{
    "Akin909": "Currently image layers pop up whenever a split is made, or rather I observe this using any plugins that create splits. This PR aims to fix this which I raised as #1673, using the filter functionality of the add bufferLayer method, which is very cool re api design \ud83d\udc4d.\r\n\r\nI added a filter to only open the image layer for `jpg` and `png` formats (the only 2 that came to mind at the time) Actually thinking about it rather than having a list defined by oni it might be useful to some users to have the list of files the image layer opened for editable aka via their config or (*not for this PR* a means of toggling it on or off) the reason I suggest this is that in one scenario I know of a user might want to edit the raw file, or process it in some way, this can definitely be the case with something like `svg` but may also be the case for some other file format for some other reason @bryphe added in the config setting for this now \ud83d\udc4d  Currently image layers pop up whenever a split is made, or rather I observe this using any plugins that create splits. This PR aims to fix this which I raised as #1673, using the filter functionality of the add bufferLayer method, which is very cool re api design \ud83d\udc4d.\r\n\r\nI added a filter to only open the image layer for `jpg` and `png` formats (the only 2 that came to mind at the time) Actually thinking about it rather than having a list defined by oni it might be useful to some users to have the list of files the image layer opened for editable aka via their config or (*not for this PR* a means of toggling it on or off) the reason I suggest this is that in one scenario I know of a user might want to edit the raw file, or process it in some way, this can definitely be the case with something like `svg` but may also be the case for some other file format for some other reason @bryphe added in the config setting for this now \ud83d\udc4d  @bryphe when you say potentially deprecate the `buffers` setting does this mean by default all users will have to work with `tabs`, definitely not wanting to restart what have been many discussions, but it seems like anyone with a primarily buffer based workflow coming from vim would only be able to use tabs? \ud83d\ude1e\r\n\r\nMight just wait to see what the change ends up looking like since I interact very little/never with tabs \ud83d\ude1f  @bryphe when you say potentially deprecate the `buffers` setting does this mean by default all users will have to work with `tabs`, definitely not wanting to restart what have been many discussions, but it seems like anyone with a primarily buffer based workflow coming from vim would only be able to use tabs? \ud83d\ude1e\r\n\r\nMight just wait to see what the change ends up looking like since I interact very little/never with tabs \ud83d\ude1f  @bryphe when you say potentially deprecate the `buffers` setting does this mean by default all users will have to work with `tabs`, definitely not wanting to restart what have been many discussions, but it seems like anyone with a primarily buffer based workflow coming from vim would only be able to use tabs? \ud83d\ude1e\r\n\r\nMight just wait to see what the change ends up looking like since I interact very little/never with tabs \ud83d\ude1f  Add a 20s expiry time to all notifications that **AREN'T** errors aka info notifications and warn notifications, discussed in #1618 \r\n\r\nThis PR will conflict with #1636 but will push a conflict fixed version depending on which goes first @CrossR the max width on the notifications is set to 30% of the available space which since I work primarily of a laptop seemed to always be squarish but I guess on a hi-res large monitor 30% could easily be enormous might be worth me using `30rem` instead which should roughly equate to 30characters wide based on the current font size, can add that to this once I push the merge fixes Updated \ud83d\udc4d, dont actually have a large screen to hand but 25rem should be a more constant value than the percentage @bryphe managed to get it working with the observables \ud83d\ude04 \ud83c\udf87 and added the api method as well as removed the component side effect Thanks @bryphe was nice to get the opportunity to use `redux-observable`, seems I took down one of the unit tests but just fixed it Add a 20s expiry time to all notifications that **AREN'T** errors aka info notifications and warn notifications, discussed in #1618 \r\n\r\nThis PR will conflict with #1636 but will push a conflict fixed version depending on which goes first @CrossR the max width on the notifications is set to 30% of the available space which since I work primarily of a laptop seemed to always be squarish but I guess on a hi-res large monitor 30% could easily be enormous might be worth me using `30rem` instead which should roughly equate to 30characters wide based on the current font size, can add that to this once I push the merge fixes Updated \ud83d\udc4d, dont actually have a large screen to hand but 25rem should be a more constant value than the percentage @bryphe managed to get it working with the observables \ud83d\ude04 \ud83c\udf87 and added the api method as well as removed the component side effect Thanks @bryphe was nice to get the opportunity to use `redux-observable`, seems I took down one of the unit tests but just fixed it Add a 20s expiry time to all notifications that **AREN'T** errors aka info notifications and warn notifications, discussed in #1618 \r\n\r\nThis PR will conflict with #1636 but will push a conflict fixed version depending on which goes first @CrossR the max width on the notifications is set to 30% of the available space which since I work primarily of a laptop seemed to always be squarish but I guess on a hi-res large monitor 30% could easily be enormous might be worth me using `30rem` instead which should roughly equate to 30characters wide based on the current font size, can add that to this once I push the merge fixes Updated \ud83d\udc4d, dont actually have a large screen to hand but 25rem should be a more constant value than the percentage @bryphe managed to get it working with the observables \ud83d\ude04 \ud83c\udf87 and added the api method as well as removed the component side effect Thanks @bryphe was nice to get the opportunity to use `redux-observable`, seems I took down one of the unit tests but just fixed it <!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\n@bryphe whilst looking into #1583 re `shellEnv` behaviour I think I've found the cause of the request of undefined error that can occur/ occurs on the editor startup, btw this is not a fix for #1583 as the cause of that though related maybe is still unclear.\r\n\r\nHaving the call to `shellEnv` occur asynchronously in order to cut down on startup time means that when the editor window comes into view the promise to startup a neovim instance is often not actually complete so if you click the editor or try to go into the sidebar this was what was leading to the error\r\n\r\n<img width=\"451\" alt=\"screen shot 2018-02-25 at 11 10 55\" src=\"https://user-images.githubusercontent.com/22454918/36640807-9f55888e-1a1d-11e8-8306-c3fd3f9a68ef.png\">\r\n\r\nBy using the sync version of the shellEnv function the errors stop entirely as things block till the instance is actually initialised.\r\n\r\nI know the concern was about performance, so I checked the profile logs\r\n\r\nFirst is the async version with the associated error notifications and time stamps:\r\n<img width=\"857\" alt=\"screen shot 2018-02-25 at 12 30 42\" src=\"https://user-images.githubusercontent.com/22454918/36641612-66ee9802-1a2a-11e8-84c3-4a2967de3545.png\">\r\n\r\nSync version:\r\n<img width=\"764\" alt=\"screen shot 2018-02-25 at 12 31 28\" src=\"https://user-images.githubusercontent.com/22454918/36641619-83a09464-1a2a-11e8-823a-8b0611dc2d98.png\">\r\n\r\nThe difference in startup cost seems quite small (and tbh on multiple attempts varied a lot with the 300ms difference being the largest I observed) and I think especially at the cost of starting Oni up before the neovim instance is ready.\r\n\r\nI think neovim is a crucial thing that needs to be ready before the editor appears otherwise thing's reliant on it begin to initiate functionality dependent on it before it exists (also I *think* its initial reliance on the import promise still makes that function async so while internally it blocks at the sync call it does all this in a promise.\r\n\r\nI also looked at the `mergeSpawnOptions` function which uses `shellEnv` and is actually quite an expensive function.\r\n\r\n<img width=\"444\" alt=\"screen shot 2018-02-25 at 12 22 00\" src=\"https://user-images.githubusercontent.com/22454918/36641642-0356f360-1a2b-11e8-9d9b-d67cb597cca5.png\">\r\n\r\nIt seems that almost any attempt by oni to create a process calls this function which\r\n\r\n1.) Dynamically imports shell-env\r\n2.) Calls the shell-env method async\r\n\r\nresulting in the calls above, the first is for `nvim`, second the `lsp` and third the `sidebar instance`.\r\n\r\nI moved the files functionality into a class and saved the dynamic import on the first call then also saved the value of the call to shell-env to use in subsequent calls to this function which results in\r\n\r\n<img width=\"435\" alt=\"screen shot 2018-02-25 at 12 23 16\" src=\"https://user-images.githubusercontent.com/22454918/36641667-7a3e76a6-1a2b-11e8-8c05-3a4cb1aeaab1.png\">\r\n\r\nfixes #1523\r\n\r\n Also just as an aside running this in a local build theres no noticeable difference, tbh I *subjectively* think that things might seem slightly faster \ud83d\ude06  <!-- Love oni? Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/oni/donate -->\r\n\r\n@bryphe whilst looking into #1583 re `shellEnv` behaviour I think I've found the cause of the request of undefined error that can occur/ occurs on the editor startup, btw this is not a fix for #1583 as the cause of that though related maybe is still unclear.\r\n\r\nHaving the call to `shellEnv` occur asynchronously in order to cut down on startup time means that when the editor window comes into view the promise to startup a neovim instance is often not actually complete so if you click the editor or try to go into the sidebar this was what was leading to the error\r\n\r\n<img width=\"451\" alt=\"screen shot 2018-02-25 at 11 10 55\" src=\"https://user-images.githubusercontent.com/22454918/36640807-9f55888e-1a1d-11e8-8306-c3fd3f9a68ef.png\">\r\n\r\nBy using the sync version of the shellEnv function the errors stop entirely as things block till the instance is actually initialised.\r\n\r\nI know the concern was about performance, so I checked the profile logs\r\n\r\nFirst is the async version with the associated error notifications and time stamps:\r\n<img width=\"857\" alt=\"screen shot 2018-02-25 at 12 30 42\" src=\"https://user-images.githubusercontent.com/22454918/36641612-66ee9802-1a2a-11e8-84c3-4a2967de3545.png\">\r\n\r\nSync version:\r\n<img width=\"764\" alt=\"screen shot 2018-02-25 at 12 31 28\" src=\"https://user-images.githubusercontent.com/22454918/36641619-83a09464-1a2a-11e8-823a-8b0611dc2d98.png\">\r\n\r\nThe difference in startup cost seems quite small (and tbh on multiple attempts varied a lot with the 300ms difference being the largest I observed) and I think especially at the cost of starting Oni up before the neovim instance is ready.\r\n\r\nI think neovim is a crucial thing that needs to be ready before the editor appears otherwise thing's reliant on it begin to initiate functionality dependent on it before it exists (also I *think* its initial reliance on the import promise still makes that function async so while internally it blocks at the sync call it does all this in a promise.\r\n\r\nI also looked at the `mergeSpawnOptions` function which uses `shellEnv` and is actually quite an expensive function.\r\n\r\n<img width=\"444\" alt=\"screen shot 2018-02-25 at 12 22 00\" src=\"https://user-images.githubusercontent.com/22454918/36641642-0356f360-1a2b-11e8-9d9b-d67cb597cca5.png\">\r\n\r\nIt seems that almost any attempt by oni to create a process calls this function which\r\n\r\n1.) Dynamically imports shell-env\r\n2.) Calls the shell-env method async\r\n\r\nresulting in the calls above, the first is for `nvim`, second the `lsp` and third the `sidebar instance`.\r\n\r\nI moved the files functionality into a class and saved the dynamic import on the first call then also saved the value of the call to shell-env to use in subsequent calls to this function which results in\r\n\r\n<img width=\"435\" alt=\"screen shot 2018-02-25 at 12 23 16\" src=\"https://user-images.githubusercontent.com/22454918/36641667-7a3e76a6-1a2b-11e8-8c05-3a4cb1aeaab1.png\">\r\n\r\nfixes #1523\r\n\r\n Also just as an aside running this in a local build theres no noticeable difference, tbh I *subjectively* think that things might seem slightly faster \ud83d\ude06  This PR tones down the bright red of the notification box to rendering the title based on the level of the notification it also handles issues with sizing where a large error (several of which kept occuring \ud83d\ude47 ) would cause the container to push the editor tab bar upwards causing jerkiness.\r\n\r\n@bryphe I realise the intent was to have a very obvious error message so users log bugs, though I found that the large wall of red (which is what occurs if there is an error with a large message) very distracting (not sure if others feel the same). I think some red anywhere suddenly appearing will definitely catch the user's eye as would any kind of notification over the editor window so hopefully these changes don't run counter to your intent.\r\n\r\nAlso added a possibly vain attempt to only show new errors by checking if an error is in the saved/queued errors.\r\n\r\nScreenshot to illustrate changes:\r\n\r\n<img width=\"556\" alt=\"screen shot 2018-02-23 at 22 39 56\" src=\"https://user-images.githubusercontent.com/22454918/36621191-ba2dbfd0-18ee-11e8-815c-a4ba89eeda53.png\">\r\n\r\n<img width=\"391\" alt=\"screen shot 2018-02-23 at 22 54 22\" src=\"https://user-images.githubusercontent.com/22454918/36621284-245cc572-18ef-11e8-9747-e17166bc0c5f.png\">\r\n\r\nI've implemented it with less colour but also played with this idea (which I'm putting here just to show alternatives, *personally* still feel like I never really want a large coloured banner anywhere on my screen)\r\n\r\n<img width=\"728\" alt=\"screen shot 2018-02-23 at 22 20 53\" src=\"https://user-images.githubusercontent.com/22454918/36621371-9de242dc-18ef-11e8-84ba-1e3be4c6c38e.png\">\r\n @CrossR I think blue for info sounds like a great idea I couldn't quite figure out what it should be but now you mention that really clicks, as does a blue icon, maybe font awesome have an info icon (seems highly likely), for warn vs error though not sure what symbol would tell them apart\r\n\r\nRe the small text box not sure I know what you mean, like a line maybe between the icons to say `warning` or `info` or `error`, happy to include something like that though I think red and yellow are kind of universal for something probably not good is happening Thanks for the feedback guys tweaked it and looks much nicer I think\r\n\r\n<img width=\"416\" alt=\"screen shot 2018-02-24 at 00 27 18\" src=\"https://user-images.githubusercontent.com/22454918/36623195-84bae556-18fa-11e8-8719-63bb92cfac13.png\">\r\n\r\nEDIT: Just noticed I have error and warn backwards color wise.. fixing woops just merged upstream to get latest test changes and seems I've lost approval \ud83d\ude06, also calling for tests although its primarily css which happens to be in js/ts (btw these kind of changes can be tested with [`jest-styled-components`](https://github.com/styled-components/jest-styled-components) though not sure re the value but it is possible \ud83e\udd37\u200d\u2642\ufe0f. Though still blocked on #1552 with typing issues. Also was thinking would a timeout to remove the notifications after some time limit be desirable as I find that if an error occurs and in my case I've seen it before but I'm working on something else or don't know what to do with it they just persist indefinitely till I'm forced to remove it by \ud83e\udd22 **clicking** which I personally find quite frustrating\r\n\r\nEdit: I've added this locally and can push this change to go with this PR if it'd be desirable functionality @TalAmuyal haven't actually tried \ud83d\ude06 will give that a shot.\r\n\r\nAlthough re the suggestion my thinking was along the lines of as a user who's been shown a notification (not as someone contributing to the project but just as a regular user) an error occured maybe i've filed it before maybe I'm at work and just need to get on with things, if the flow is modal pops up with error, I glance at it but wanna get back to work *subjective opinion* - I feel like I shouldn't have to do anything to make it go away.\r\n\r\nI think about it a bit like when I get a notification on my phone the back light comes on I see the message, I'm not going to do anything about it right now and eventually it just goes away and my phone goes back to sleep.\r\n\r\nMight be over thinking this been looking at ux and user flows a lot more recently at work so suddenly questioning every interaction I have. @bryphe no this is good to merge, I can add the sneakability later on when I get a moment This PR tones down the bright red of the notification box to rendering the title based on the level of the notification it also handles issues with sizing where a large error (several of which kept occuring \ud83d\ude47 ) would cause the container to push the editor tab bar upwards causing jerkiness.\r\n\r\n@bryphe I realise the intent was to have a very obvious error message so users log bugs, though I found that the large wall of red (which is what occurs if there is an error with a large message) very distracting (not sure if others feel the same). I think some red anywhere suddenly appearing will definitely catch the user's eye as would any kind of notification over the editor window so hopefully these changes don't run counter to your intent.\r\n\r\nAlso added a possibly vain attempt to only show new errors by checking if an error is in the saved/queued errors.\r\n\r\nScreenshot to illustrate changes:\r\n\r\n<img width=\"556\" alt=\"screen shot 2018-02-23 at 22 39 56\" src=\"https://user-images.githubusercontent.com/22454918/36621191-ba2dbfd0-18ee-11e8-815c-a4ba89eeda53.png\">\r\n\r\n<img width=\"391\" alt=\"screen shot 2018-02-23 at 22 54 22\" src=\"https://user-images.githubusercontent.com/22454918/36621284-245cc572-18ef-11e8-9747-e17166bc0c5f.png\">\r\n\r\nI've implemented it with less colour but also played with this idea (which I'm putting here just to show alternatives, *personally* still feel like I never really want a large coloured banner anywhere on my screen)\r\n\r\n<img width=\"728\" alt=\"screen shot 2018-02-23 at 22 20 53\" src=\"https://user-images.githubusercontent.com/22454918/36621371-9de242dc-18ef-11e8-84ba-1e3be4c6c38e.png\">\r\n @CrossR I think blue for info sounds like a great idea I couldn't quite figure out what it should be but now you mention that really clicks, as does a blue icon, maybe font awesome have an info icon (seems highly likely), for warn vs error though not sure what symbol would tell them apart\r\n\r\nRe the small text box not sure I know what you mean, like a line maybe between the icons to say `warning` or `info` or `error`, happy to include something like that though I think red and yellow are kind of universal for something probably not good is happening Thanks for the feedback guys tweaked it and looks much nicer I think\r\n\r\n<img width=\"416\" alt=\"screen shot 2018-02-24 at 00 27 18\" src=\"https://user-images.githubusercontent.com/22454918/36623195-84bae556-18fa-11e8-8719-63bb92cfac13.png\">\r\n\r\nEDIT: Just noticed I have error and warn backwards color wise.. fixing woops just merged upstream to get latest test changes and seems I've lost approval \ud83d\ude06, also calling for tests although its primarily css which happens to be in js/ts (btw these kind of changes can be tested with [`jest-styled-components`](https://github.com/styled-components/jest-styled-components) though not sure re the value but it is possible \ud83e\udd37\u200d\u2642\ufe0f. Though still blocked on #1552 with typing issues. Also was thinking would a timeout to remove the notifications after some time limit be desirable as I find that if an error occurs and in my case I've seen it before but I'm working on something else or don't know what to do with it they just persist indefinitely till I'm forced to remove it by \ud83e\udd22 **clicking** which I personally find quite frustrating\r\n\r\nEdit: I've added this locally and can push this change to go with this PR if it'd be desirable functionality @TalAmuyal haven't actually tried \ud83d\ude06 will give that a shot.\r\n\r\nAlthough re the suggestion my thinking was along the lines of as a user who's been shown a notification (not as someone contributing to the project but just as a regular user) an error occured maybe i've filed it before maybe I'm at work and just need to get on with things, if the flow is modal pops up with error, I glance at it but wanna get back to work *subjective opinion* - I feel like I shouldn't have to do anything to make it go away.\r\n\r\nI think about it a bit like when I get a notification on my phone the back light comes on I see the message, I'm not going to do anything about it right now and eventually it just goes away and my phone goes back to sleep.\r\n\r\nMight be over thinking this been looking at ux and user flows a lot more recently at work so suddenly questioning every interaction I have. @bryphe no this is good to merge, I can add the sneakability later on when I get a moment This PR tones down the bright red of the notification box to rendering the title based on the level of the notification it also handles issues with sizing where a large error (several of which kept occuring \ud83d\ude47 ) would cause the container to push the editor tab bar upwards causing jerkiness.\r\n\r\n@bryphe I realise the intent was to have a very obvious error message so users log bugs, though I found that the large wall of red (which is what occurs if there is an error with a large message) very distracting (not sure if others feel the same). I think some red anywhere suddenly appearing will definitely catch the user's eye as would any kind of notification over the editor window so hopefully these changes don't run counter to your intent.\r\n\r\nAlso added a possibly vain attempt to only show new errors by checking if an error is in the saved/queued errors.\r\n\r\nScreenshot to illustrate changes:\r\n\r\n<img width=\"556\" alt=\"screen shot 2018-02-23 at 22 39 56\" src=\"https://user-images.githubusercontent.com/22454918/36621191-ba2dbfd0-18ee-11e8-815c-a4ba89eeda53.png\">\r\n\r\n<img width=\"391\" alt=\"screen shot 2018-02-23 at 22 54 22\" src=\"https://user-images.githubusercontent.com/22454918/36621284-245cc572-18ef-11e8-9747-e17166bc0c5f.png\">\r\n\r\nI've implemented it with less colour but also played with this idea (which I'm putting here just to show alternatives, *personally* still feel like I never really want a large coloured banner anywhere on my screen)\r\n\r\n<img width=\"728\" alt=\"screen shot 2018-02-23 at 22 20 53\" src=\"https://user-images.githubusercontent.com/22454918/36621371-9de242dc-18ef-11e8-84ba-1e3be4c6c38e.png\">\r\n @CrossR I think blue for info sounds like a great idea I couldn't quite figure out what it should be but now you mention that really clicks, as does a blue icon, maybe font awesome have an info icon (seems highly likely), for warn vs error though not sure what symbol would tell them apart\r\n\r\nRe the small text box not sure I know what you mean, like a line maybe between the icons to say `warning` or `info` or `error`, happy to include something like that though I think red and yellow are kind of universal for something probably not good is happening Thanks for the feedback guys tweaked it and looks much nicer I think\r\n\r\n<img width=\"416\" alt=\"screen shot 2018-02-24 at 00 27 18\" src=\"https://user-images.githubusercontent.com/22454918/36623195-84bae556-18fa-11e8-8719-63bb92cfac13.png\">\r\n\r\nEDIT: Just noticed I have error and warn backwards color wise.. fixing woops just merged upstream to get latest test changes and seems I've lost approval \ud83d\ude06, also calling for tests although its primarily css which happens to be in js/ts (btw these kind of changes can be tested with [`jest-styled-components`](https://github.com/styled-components/jest-styled-components) though not sure re the value but it is possible \ud83e\udd37\u200d\u2642\ufe0f. Though still blocked on #1552 with typing issues. Also was thinking would a timeout to remove the notifications after some time limit be desirable as I find that if an error occurs and in my case I've seen it before but I'm working on something else or don't know what to do with it they just persist indefinitely till I'm forced to remove it by \ud83e\udd22 **clicking** which I personally find quite frustrating\r\n\r\nEdit: I've added this locally and can push this change to go with this PR if it'd be desirable functionality @TalAmuyal haven't actually tried \ud83d\ude06 will give that a shot.\r\n\r\nAlthough re the suggestion my thinking was along the lines of as a user who's been shown a notification (not as someone contributing to the project but just as a regular user) an error occured maybe i've filed it before maybe I'm at work and just need to get on with things, if the flow is modal pops up with error, I glance at it but wanna get back to work *subjective opinion* - I feel like I shouldn't have to do anything to make it go away.\r\n\r\nI think about it a bit like when I get a notification on my phone the back light comes on I see the message, I'm not going to do anything about it right now and eventually it just goes away and my phone goes back to sleep.\r\n\r\nMight be over thinking this been looking at ux and user flows a lot more recently at work so suddenly questioning every interaction I have. @bryphe no this is good to merge, I can add the sneakability later on when I get a moment This PR tones down the bright red of the notification box to rendering the title based on the level of the notification it also handles issues with sizing where a large error (several of which kept occuring \ud83d\ude47 ) would cause the container to push the editor tab bar upwards causing jerkiness.\r\n\r\n@bryphe I realise the intent was to have a very obvious error message so users log bugs, though I found that the large wall of red (which is what occurs if there is an error with a large message) very distracting (not sure if others feel the same). I think some red anywhere suddenly appearing will definitely catch the user's eye as would any kind of notification over the editor window so hopefully these changes don't run counter to your intent.\r\n\r\nAlso added a possibly vain attempt to only show new errors by checking if an error is in the saved/queued errors.\r\n\r\nScreenshot to illustrate changes:\r\n\r\n<img width=\"556\" alt=\"screen shot 2018-02-23 at 22 39 56\" src=\"https://user-images.githubusercontent.com/22454918/36621191-ba2dbfd0-18ee-11e8-815c-a4ba89eeda53.png\">\r\n\r\n<img width=\"391\" alt=\"screen shot 2018-02-23 at 22 54 22\" src=\"https://user-images.githubusercontent.com/22454918/36621284-245cc572-18ef-11e8-9747-e17166bc0c5f.png\">\r\n\r\nI've implemented it with less colour but also played with this idea (which I'm putting here just to show alternatives, *personally* still feel like I never really want a large coloured banner anywhere on my screen)\r\n\r\n<img width=\"728\" alt=\"screen shot 2018-02-23 at 22 20 53\" src=\"https://user-images.githubusercontent.com/22454918/36621371-9de242dc-18ef-11e8-84ba-1e3be4c6c38e.png\">\r\n @CrossR I think blue for info sounds like a great idea I couldn't quite figure out what it should be but now you mention that really clicks, as does a blue icon, maybe font awesome have an info icon (seems highly likely), for warn vs error though not sure what symbol would tell them apart\r\n\r\nRe the small text box not sure I know what you mean, like a line maybe between the icons to say `warning` or `info` or `error`, happy to include something like that though I think red and yellow are kind of universal for something probably not good is happening Thanks for the feedback guys tweaked it and looks much nicer I think\r\n\r\n<img width=\"416\" alt=\"screen shot 2018-02-24 at 00 27 18\" src=\"https://user-images.githubusercontent.com/22454918/36623195-84bae556-18fa-11e8-8719-63bb92cfac13.png\">\r\n\r\nEDIT: Just noticed I have error and warn backwards color wise.. fixing woops just merged upstream to get latest test changes and seems I've lost approval \ud83d\ude06, also calling for tests although its primarily css which happens to be in js/ts (btw these kind of changes can be tested with [`jest-styled-components`](https://github.com/styled-components/jest-styled-components) though not sure re the value but it is possible \ud83e\udd37\u200d\u2642\ufe0f. Though still blocked on #1552 with typing issues. Also was thinking would a timeout to remove the notifications after some time limit be desirable as I find that if an error occurs and in my case I've seen it before but I'm working on something else or don't know what to do with it they just persist indefinitely till I'm forced to remove it by \ud83e\udd22 **clicking** which I personally find quite frustrating\r\n\r\nEdit: I've added this locally and can push this change to go with this PR if it'd be desirable functionality @TalAmuyal haven't actually tried \ud83d\ude06 will give that a shot.\r\n\r\nAlthough re the suggestion my thinking was along the lines of as a user who's been shown a notification (not as someone contributing to the project but just as a regular user) an error occured maybe i've filed it before maybe I'm at work and just need to get on with things, if the flow is modal pops up with error, I glance at it but wanna get back to work *subjective opinion* - I feel like I shouldn't have to do anything to make it go away.\r\n\r\nI think about it a bit like when I get a notification on my phone the back light comes on I see the message, I'm not going to do anything about it right now and eventually it just goes away and my phone goes back to sleep.\r\n\r\nMight be over thinking this been looking at ux and user flows a lot more recently at work so suddenly questioning every interaction I have. @bryphe no this is good to merge, I can add the sneakability later on when I get a moment This PR aims to fix #1406, using `react-dnd` it adds drag and drop functionality to the file explorer so files can be moved between folders, whilst a very gui feature this aims to simplify the process of moving things around for those off moments when there isn't a quick and easy vim command\r\n\r\n### Todo\r\n\r\n- [x] Make files in the root drop targets so files in subdirectories can be moved to the root\r\n\r\n- [x] Bonus points: make folders drag and droppeable @bryphe if you get an opportunity I'd like to get your feedback on this PR, at present I've got the drag and drop functionality working for files and folders \ud83d\ude04 but there are some ux things I thought might be nice or also might be overkill like a sound playing when a file is relocated, and also some sort of highlighting of the visual area for a drop.\r\n\r\nThe reason for this is that at the moment it doesn't feel very clear that a file has moved when you move it, it appears in the folder but and I preface this by saying its quite subjective, but it feels like its silent so it leaves a sort of uncertainty, till I check and verify it has moved.\r\n\r\nI peeked at the vscode file explorer and noted that if you try to drop a file into a folder the folder area highlights, although that might be much harder in oni as the files and folders aren't in a common container I believe. @bryphe \ud83d\udc4d those would really improve the ux. I've added a success notification and expand the dir on drop, the outstanding thing now is to look into the animations @bryphe had a go at using `react-transition` for the animations but unfortunately am at a loss for how to get **only** the file or folder that was just dropped or dragged animating. `DND` exposes a prop called `didDrop` which is fired just after a drop but by wrapping all drag and drop components in `<Transition >` they all animate on enter and leave \ud83d\ude16, not sure if you're aware of a away to animate just one component wrapped in a transition in and out based on a single prop without having the others animate. @bryphe I'll have a go with what you suggest re the `css transition` and if Im successful I'll implement it here, if it seems to be dragging on or might be more involved than expected for some reason happy to split it out. Just tried with the animations and no luck using the `classNames` probably just using the api wrong but think I'd rather give it another shot as part of another PR This PR aims to fix #1406, using `react-dnd` it adds drag and drop functionality to the file explorer so files can be moved between folders, whilst a very gui feature this aims to simplify the process of moving things around for those off moments when there isn't a quick and easy vim command\r\n\r\n### Todo\r\n\r\n- [x] Make files in the root drop targets so files in subdirectories can be moved to the root\r\n\r\n- [x] Bonus points: make folders drag and droppeable @bryphe if you get an opportunity I'd like to get your feedback on this PR, at present I've got the drag and drop functionality working for files and folders \ud83d\ude04 but there are some ux things I thought might be nice or also might be overkill like a sound playing when a file is relocated, and also some sort of highlighting of the visual area for a drop.\r\n\r\nThe reason for this is that at the moment it doesn't feel very clear that a file has moved when you move it, it appears in the folder but and I preface this by saying its quite subjective, but it feels like its silent so it leaves a sort of uncertainty, till I check and verify it has moved.\r\n\r\nI peeked at the vscode file explorer and noted that if you try to drop a file into a folder the folder area highlights, although that might be much harder in oni as the files and folders aren't in a common container I believe. @bryphe \ud83d\udc4d those would really improve the ux. I've added a success notification and expand the dir on drop, the outstanding thing now is to look into the animations @bryphe had a go at using `react-transition` for the animations but unfortunately am at a loss for how to get **only** the file or folder that was just dropped or dragged animating. `DND` exposes a prop called `didDrop` which is fired just after a drop but by wrapping all drag and drop components in `<Transition >` they all animate on enter and leave \ud83d\ude16, not sure if you're aware of a away to animate just one component wrapped in a transition in and out based on a single prop without having the others animate. @bryphe I'll have a go with what you suggest re the `css transition` and if Im successful I'll implement it here, if it seems to be dragging on or might be more involved than expected for some reason happy to split it out. Just tried with the animations and no luck using the `classNames` probably just using the api wrong but think I'd rather give it another shot as part of another PR This looks like a good fix and I'm eager to have any bugfixes personally, can I ask how this was manifesting was some functionality breaking?\r\n\r\nAh never mind just read the trailing comment \ud83d\udc4d  This looks like a good fix and I'm eager to have any bugfixes personally, can I ask how this was manifesting was some functionality breaking?\r\n\r\nAh never mind just read the trailing comment \ud83d\udc4d  This looks like a good fix and I'm eager to have any bugfixes personally, can I ask how this was manifesting was some functionality breaking?\r\n\r\nAh never mind just read the trailing comment \ud83d\udc4d  @bryphe thanks for turning these on by default, as a side note as part of my alleged enzyme PR I'm looking to add some tests for these and will look at adding some integration ones as well once I have the integration tests working locally @bryphe thanks for turning these on by default, as a side note as part of my alleged enzyme PR I'm looking to add some tests for these and will look at adding some integration ones as well once I have the integration tests working locally When parsing a response from the `tss` if the response fails, we currently reject with an error which isn't handled at all, this error seems to crop up if you rename a file or open a new file (ts) I think the `tss` is probably correctly not able to deal with request since it maybe doesn't know what happened not sure if theres a better solution here but seems we should at least catch the error, not sure whether more need to be done here but I just log that that occured \ud83e\udd37\u200d\u2642\ufe0f  @bryphe definitely don't want to sweep any significant errors under the rug and I get what you mean re the actual root causes, I seem to be able to fairly consistently reproduce it by opening a new ts file moving from an open file in a project. Looking at the circumstance I'm not sure any of the actions above would cover this as it seems to be specifically about changing sessions\r\n\r\n<img width=\"813\" alt=\"screen shot 2018-02-11 at 15 04 46\" src=\"https://user-images.githubusercontent.com/22454918/36074779-fea0026a-0f3c-11e8-85ea-6efb23f6d100.png\">\r\n\r\nI think its more of a mismatch between how oni communicates changes like that with the `tss`, but just guessing. Although it is a bit \"dodgy\", I think it's inevitable that the tss or any other lsp will throw errors, I think even perfect dilligence cant prevent that given that things will likely change etc. my thinking was that where something bound to throw an error one day whilst we ought to be informed it should also not disrupt using oni, and I *think* that this is one of the errors that take down functionality as after it occurs I find I no longer get completions I'll close this and if I come up with the actual solution I'll make a PR for that and add an associated test case. Although I'm having quite a bit of trouble running test locally (although I was gonna raise that separately so if I pick you brain and there might be solutions that could help anyone else its document somewhere) When parsing a response from the `tss` if the response fails, we currently reject with an error which isn't handled at all, this error seems to crop up if you rename a file or open a new file (ts) I think the `tss` is probably correctly not able to deal with request since it maybe doesn't know what happened not sure if theres a better solution here but seems we should at least catch the error, not sure whether more need to be done here but I just log that that occured \ud83e\udd37\u200d\u2642\ufe0f  @bryphe definitely don't want to sweep any significant errors under the rug and I get what you mean re the actual root causes, I seem to be able to fairly consistently reproduce it by opening a new ts file moving from an open file in a project. Looking at the circumstance I'm not sure any of the actions above would cover this as it seems to be specifically about changing sessions\r\n\r\n<img width=\"813\" alt=\"screen shot 2018-02-11 at 15 04 46\" src=\"https://user-images.githubusercontent.com/22454918/36074779-fea0026a-0f3c-11e8-85ea-6efb23f6d100.png\">\r\n\r\nI think its more of a mismatch between how oni communicates changes like that with the `tss`, but just guessing. Although it is a bit \"dodgy\", I think it's inevitable that the tss or any other lsp will throw errors, I think even perfect dilligence cant prevent that given that things will likely change etc. my thinking was that where something bound to throw an error one day whilst we ought to be informed it should also not disrupt using oni, and I *think* that this is one of the errors that take down functionality as after it occurs I find I no longer get completions I'll close this and if I come up with the actual solution I'll make a PR for that and add an associated test case. Although I'm having quite a bit of trouble running test locally (although I was gonna raise that separately so if I pick you brain and there might be solutions that could help anyone else its document somewhere) @bryphe thanks to the new error ux I was coerced \ud83d\ude06 (actually think it is a great idea \ud83c\udf7e though I wish it would only inform of an error once not every single time it occurs, maybe we could cache/storing error messages and only show the new modal if the error hasn't already been seen before, plus it specifically address an issue I raised \ud83d\ude80 #1488 )\r\ninto looking into this bug which kept occurring whilst using splits.\r\n\r\nSeems that setting menu items in the `sharedNeovimInterface` is async so I've change the calls to reflect that. Another issue which the bug raised which I havent found a solution for is that in the file explorer on opening a file `windowManager.focus` is called but with the `Oni.Editor` rather than a windowSplit id which is what it expects, except as far as I can see it the Oni.Editor has no knowledge of which split it belongs to which I imagine is a sensible thing for me to add I just have no idea where or how they interrelate since each split has a `private` inner editor and the editor has no idea about splits\r\n\r\nEDIT: My temporary fix/hack was to pass in what I noted manually was the right split id which quietens down the errors. PS: if you agree re storing the messages i'm happy to look into that the red banners are a great call to action but also undismissable, \r\n\r\nTODO:\r\n\r\n- [x] As well as the above this is a note to self that there is still a missing await as an error still occurs on initial vim enter \ud83e\udd14  @bryphe I know this is all green now from a review perspective anyway but just wanted to point out that I made another change here lol, when the shared instance is initialised we save an `_initPromise` then await it shortly after not sure how or why this makes that much of a difference but rather than save the promise (note: we dont use the init promise for something) I just await the instances initialisation which fixes lingering issues where on startup the `MenuBinding.setItems` could not call `.eval` on the instance because it didnt exist yet. Haha seems I spoke to soon before now the bug is actually dead on startup and and subsequent split navigation although there was/is a more subtle issue at play here which I'm not sure I entirely understand when the `sharedNeovimInstance` is started the promise which should resolve once the neovim instance is initialised hangs interminably so that on navigating splits the first time after load the neovim instance is still `null` and the bug occurs just that once (now that it initialised) seems for some reason initialising a neovim instance doesn't resolve till sometime later its unclear when because the log show `starting...` till you move through windows and the bug occurs.\r\n\r\nMy solution just wraps that specific action in a check to see if the instance is initialised it doesn't solve the question of why the neovim instance start function doesnt resolve \ud83e\udd14 till... not sure when or how but it does eventually @bryphe thanks to the new error ux I was coerced \ud83d\ude06 (actually think it is a great idea \ud83c\udf7e though I wish it would only inform of an error once not every single time it occurs, maybe we could cache/storing error messages and only show the new modal if the error hasn't already been seen before, plus it specifically address an issue I raised \ud83d\ude80 #1488 )\r\ninto looking into this bug which kept occurring whilst using splits.\r\n\r\nSeems that setting menu items in the `sharedNeovimInterface` is async so I've change the calls to reflect that. Another issue which the bug raised which I havent found a solution for is that in the file explorer on opening a file `windowManager.focus` is called but with the `Oni.Editor` rather than a windowSplit id which is what it expects, except as far as I can see it the Oni.Editor has no knowledge of which split it belongs to which I imagine is a sensible thing for me to add I just have no idea where or how they interrelate since each split has a `private` inner editor and the editor has no idea about splits\r\n\r\nEDIT: My temporary fix/hack was to pass in what I noted manually was the right split id which quietens down the errors. PS: if you agree re storing the messages i'm happy to look into that the red banners are a great call to action but also undismissable, \r\n\r\nTODO:\r\n\r\n- [x] As well as the above this is a note to self that there is still a missing await as an error still occurs on initial vim enter \ud83e\udd14  @bryphe I know this is all green now from a review perspective anyway but just wanted to point out that I made another change here lol, when the shared instance is initialised we save an `_initPromise` then await it shortly after not sure how or why this makes that much of a difference but rather than save the promise (note: we dont use the init promise for something) I just await the instances initialisation which fixes lingering issues where on startup the `MenuBinding.setItems` could not call `.eval` on the instance because it didnt exist yet. Haha seems I spoke to soon before now the bug is actually dead on startup and and subsequent split navigation although there was/is a more subtle issue at play here which I'm not sure I entirely understand when the `sharedNeovimInstance` is started the promise which should resolve once the neovim instance is initialised hangs interminably so that on navigating splits the first time after load the neovim instance is still `null` and the bug occurs just that once (now that it initialised) seems for some reason initialising a neovim instance doesn't resolve till sometime later its unclear when because the log show `starting...` till you move through windows and the bug occurs.\r\n\r\nMy solution just wraps that specific action in a check to see if the instance is initialised it doesn't solve the question of why the neovim instance start function doesnt resolve \ud83e\udd14 till... not sure when or how but it does eventually Whilst adding syntax highlighting I added in `DOMPurify` for another measure of safety on top of `marked's` inbuilt sanitization. The implementation however causes safe `html/xml/jsx` to be omitted from documention blocks resulting in docs with empty codeblocks and completely remove all titles from `vue` files hover info.\r\n\r\nI've tweaked the way `DOMPurify` is called to preserve non-offensive html-esque syntax. \r\n\r\nNote: for future reference I've discovered an issue on *one* occasion with what the `lsp` sends, whilst the `lsp` dictates that documentation should be sent as markup/markdown in the case of `Observable` documentation html is sent, marked does not convert this to markdown so the whilst it sanitizes it and then in our cases it also passes through dom purify it is left in the hover docs, a potential solution would be to run a check for html after purification and run an html to markdown parser but I think this would only be worth while if it occurs often as I believe the documentation writers for `Observable` are ?in error?\r\n\r\nEDIT: checked the same documentation in `vscode` and it also renders the raw html, which makes me think that the `Observable` docs arent written according to spec Hmm not sure if the test failure here is related to what I've changed \ud83d\ude3f, just pushed again to rerun the test but they seem to be failing for different reasons or rather this time the CI tests all timed out Whilst adding syntax highlighting I added in `DOMPurify` for another measure of safety on top of `marked's` inbuilt sanitization. The implementation however causes safe `html/xml/jsx` to be omitted from documention blocks resulting in docs with empty codeblocks and completely remove all titles from `vue` files hover info.\r\n\r\nI've tweaked the way `DOMPurify` is called to preserve non-offensive html-esque syntax. \r\n\r\nNote: for future reference I've discovered an issue on *one* occasion with what the `lsp` sends, whilst the `lsp` dictates that documentation should be sent as markup/markdown in the case of `Observable` documentation html is sent, marked does not convert this to markdown so the whilst it sanitizes it and then in our cases it also passes through dom purify it is left in the hover docs, a potential solution would be to run a check for html after purification and run an html to markdown parser but I think this would only be worth while if it occurs often as I believe the documentation writers for `Observable` are ?in error?\r\n\r\nEDIT: checked the same documentation in `vscode` and it also renders the raw html, which makes me think that the `Observable` docs arent written according to spec Hmm not sure if the test failure here is related to what I've changed \ud83d\ude3f, just pushed again to rerun the test but they seem to be failing for different reasons or rather this time the CI tests all timed out Relates and hopefully fixes #1675, I added a check to open with a regular edit command if a user is using buffers mode otherwise it uses the `tabedit` command which for all I know is probably not the desired effect, the `tab drop` command does nothing for me locally though I wasn't using tabs so not sure if it would have been working for tab users.\r\n\r\nThe main aim of this PR is to have the quick open open files depending on the users `tabs.mode` settings, happy to revert the tab drop change as it likely does exactly what was intended but seemed to do nothing locally so attempted a fix for that ^^ @CrossR thanks for the explanation had no idea what it did, happy to revert it since it works as it should Reverted \ud83d\udc4d just checks tabs mode now Relates and hopefully fixes #1675, I added a check to open with a regular edit command if a user is using buffers mode otherwise it uses the `tabedit` command which for all I know is probably not the desired effect, the `tab drop` command does nothing for me locally though I wasn't using tabs so not sure if it would have been working for tab users.\r\n\r\nThe main aim of this PR is to have the quick open open files depending on the users `tabs.mode` settings, happy to revert the tab drop change as it likely does exactly what was intended but seemed to do nothing locally so attempted a fix for that ^^ @CrossR thanks for the explanation had no idea what it did, happy to revert it since it works as it should Reverted \ud83d\udc4d just checks tabs mode now Relates and hopefully fixes #1675, I added a check to open with a regular edit command if a user is using buffers mode otherwise it uses the `tabedit` command which for all I know is probably not the desired effect, the `tab drop` command does nothing for me locally though I wasn't using tabs so not sure if it would have been working for tab users.\r\n\r\nThe main aim of this PR is to have the quick open open files depending on the users `tabs.mode` settings, happy to revert the tab drop change as it likely does exactly what was intended but seemed to do nothing locally so attempted a fix for that ^^ @CrossR thanks for the explanation had no idea what it did, happy to revert it since it works as it should Reverted \ud83d\udc4d just checks tabs mode now @bryphe I don't think anything depends on process.env being set, when I initially added that I assumed that function related exclusively to startup. I think as long as Oni still picks up the users env vars on startup thats all that matters. @bryphe I don't think anything depends on process.env being set, when I initially added that I assumed that function related exclusively to startup. I think as long as Oni still picks up the users env vars on startup thats all that matters. This PR is intended to fix #1397, it solves the issue of files being opened with relative as opposed to absolute paths. In order to solve this given that the filenames are sourced via a `ripgrep` command spawned by a `child_process` which uses the `cwd` of the process which defaults to the current if not specified I made some decisions that need review.\r\n\r\nI believe that the child process' cwd is oni's cwd aka the active workspace, implicitly, but to be explicit I pass it in to process as an option as the assumption I made is that files being searched by oni ought to check from the workspace directory, plus not sure if it consistently sources the right `cwd` if not explicitly set.\r\n\r\nThen in `Quickfix.ts` I appended the `activeWorkspace` to the the open command nvim is using so rather than `e! /browser/src/index.ts` it now opens `e! /Users/myPathToOni/oni/browser/src/index.ts`. This PR is intended to fix #1397, it solves the issue of files being opened with relative as opposed to absolute paths. In order to solve this given that the filenames are sourced via a `ripgrep` command spawned by a `child_process` which uses the `cwd` of the process which defaults to the current if not specified I made some decisions that need review.\r\n\r\nI believe that the child process' cwd is oni's cwd aka the active workspace, implicitly, but to be explicit I pass it in to process as an option as the assumption I made is that files being searched by oni ought to check from the workspace directory, plus not sure if it consistently sources the right `cwd` if not explicitly set.\r\n\r\nThen in `Quickfix.ts` I appended the `activeWorkspace` to the the open command nvim is using so rather than `e! /browser/src/index.ts` it now opens `e! /Users/myPathToOni/oni/browser/src/index.ts`. This PR relates to #1575 and #1397, at present if `Oni` updates its workspace directory nvim's directory remains unchanged meaning a user might attempt to execute an nvim command with the expectation that they are in the directory `oni` reports but actually they are in different nvim dir as Oni and nvim are out of sync.\r\n\r\nThe reverse currently does happen already aka. if vim switches its dir Oni's workspace switches its directory to match. Noted that the crashes in the `ocaml-language-server` have been fixed upstream in the most recent version. This PR fixes #1571 as the issues have been resolved in 0.27 (tried locally and functionality is restored). Noted that the crashes in the `ocaml-language-server` have been fixed upstream in the most recent version. This PR fixes #1571 as the issues have been resolved in 0.27 (tried locally and functionality is restored). This PR adds truncation to long file names rather than wrapping which leads to issues with padding, there seems to have been an attempt in the less to add text overflow etc, I've added a styled component to render the name as the explicit styles are needed on the component itself (which is why this wasnt already working) and also an explicit width is necessary for the text overflow to kick in but setting a static width forces all tabs to be at that width which is visually undesirable. This component renders a width *only* if a file name is longer than 50 chars and prevents wrapping of the text\r\n\r\noutput:\r\n\r\n<img width=\"463\" alt=\"screen shot 2018-02-09 at 13 18 47\" src=\"https://user-images.githubusercontent.com/22454918/36029843-c18ddbf0-0d9c-11e8-837e-b3d927d02724.png\"> \ud83d\udcaf merging :) This PR adds truncation to long file names rather than wrapping which leads to issues with padding, there seems to have been an attempt in the less to add text overflow etc, I've added a styled component to render the name as the explicit styles are needed on the component itself (which is why this wasnt already working) and also an explicit width is necessary for the text overflow to kick in but setting a static width forces all tabs to be at that width which is visually undesirable. This component renders a width *only* if a file name is longer than 50 chars and prevents wrapping of the text\r\n\r\noutput:\r\n\r\n<img width=\"463\" alt=\"screen shot 2018-02-09 at 13 18 47\" src=\"https://user-images.githubusercontent.com/22454918/36029843-c18ddbf0-0d9c-11e8-837e-b3d927d02724.png\"> \ud83d\udcaf merging :) A comment re *your* comment about *bold* and *italic* yes nvim_hl command returns that if it is available otherwise it is undefined\r\n\r\nAlso are the editor tokens going to be set to nothing in the default config not that its particularly relevant anyway and is the structure there going to be an array? (again this is just to confirm re how I might integrate this with my PR) @bryphe did you find having more vimhighlights in the defaults problematic, I ask as I've gone in the opposite direction i.e i've added more groups as the few that were there match really infrequently with the token highlights so highlighting was *really* sparse without colors from vim which the hover has no access to if there are fewer defaults there'll be little to no highlighting, an alternative :S is generating the highlights based on the existing groups but there be quite noticeable gaps\r\n\r\nCan I add a method to the token colors to request more highlights from vim for other ui so that it wont interfere with vim's highlighting but the hover can access the colors it'll need? don't think this will return us to the original problem as this wouldn't be a dependency for functionality just a richer experience whilst we still lack themes etc. I've created a render prop that can be used in multiple locations `TokenThemeProvider` which augments the themes with token colors as classes which it passes to the render component so hopefully it can be used quite easily in a load of places without much work from another contributor as for the colors I had the exact same thing which led to pretty undesirable color mishmashes whilst I was trying to color the theme. I'll just create a function in the token theme render prop to create more tokens based on the existing ones, itll mean a much narrower set of color for now but itll still be much better than nothing \ud83d\ude06  @bryphe I've added a function to my PR to populate scopes which works well one thing which it's missing is a scope for strings. As these appear everywhere or often enough I'd like to add this *one* token to the defaults, it shouldn't add any weird colour issues (I've tried it previously) and the only token which use it are strings so as far vim highlighting is concerned nothing would change strings would still be coloured as strings but I'd have a hex value to use for the hover? A comment re *your* comment about *bold* and *italic* yes nvim_hl command returns that if it is available otherwise it is undefined\r\n\r\nAlso are the editor tokens going to be set to nothing in the default config not that its particularly relevant anyway and is the structure there going to be an array? (again this is just to confirm re how I might integrate this with my PR) @bryphe did you find having more vimhighlights in the defaults problematic, I ask as I've gone in the opposite direction i.e i've added more groups as the few that were there match really infrequently with the token highlights so highlighting was *really* sparse without colors from vim which the hover has no access to if there are fewer defaults there'll be little to no highlighting, an alternative :S is generating the highlights based on the existing groups but there be quite noticeable gaps\r\n\r\nCan I add a method to the token colors to request more highlights from vim for other ui so that it wont interfere with vim's highlighting but the hover can access the colors it'll need? don't think this will return us to the original problem as this wouldn't be a dependency for functionality just a richer experience whilst we still lack themes etc. I've created a render prop that can be used in multiple locations `TokenThemeProvider` which augments the themes with token colors as classes which it passes to the render component so hopefully it can be used quite easily in a load of places without much work from another contributor as for the colors I had the exact same thing which led to pretty undesirable color mishmashes whilst I was trying to color the theme. I'll just create a function in the token theme render prop to create more tokens based on the existing ones, itll mean a much narrower set of color for now but itll still be much better than nothing \ud83d\ude06  @bryphe I've added a function to my PR to populate scopes which works well one thing which it's missing is a scope for strings. As these appear everywhere or often enough I'd like to add this *one* token to the defaults, it shouldn't add any weird colour issues (I've tried it previously) and the only token which use it are strings so as far vim highlighting is concerned nothing would change strings would still be coloured as strings but I'd have a hex value to use for the hover? This PR adds functionality to keep the selected tab in view in the tab/buffer bar so if the bar is overflowing the selecting a buffer will bring the selected buffer into view that way the user isn't looking for a `selected` buffer somewhere off screen Cool @bryphe it does indeed \ud83d\ude04 Merging! This PR adds functionality to keep the selected tab in view in the tab/buffer bar so if the bar is overflowing the selecting a buffer will bring the selected buffer into view that way the user isn't looking for a `selected` buffer somewhere off screen Cool @bryphe it does indeed \ud83d\ude04 Merging! The open folder command was renamed to `workspace.openfolder` this PR updates the statusbar file item command so it functions properly. Relates #1408 The open folder command was renamed to `workspace.openfolder` this PR updates the statusbar file item command so it functions properly. Relates #1408 Noted recently that an error with the `windowNumber` subscription which happens consistently on startup which seems to take down the buffer bar selection, so it is no longer clear which buffer is selected. \r\n\r\n<img width=\"827\" alt=\"screen shot 2018-02-01 at 19 51 10\" src=\"https://user-images.githubusercontent.com/22454918/35700004-a5a21e60-0789-11e8-89f3-0d9d00fa3e6b.png\">\r\n\r\nI couldn't figure why the error might be happening but I added if block to the actions in the handler to prevent the error being thrown On further investigation it seems [here](https://github.com/Akin909/oni/blob/e9f9311ee245ad49b2825c5720910e18464cfe15/browser/src/neovim/NeovimWindowManager.ts#L92) `TabState.inactiveWindows` can be passed in as null, which seems expected to me as If only one window exists there wouldn't be any inactive window (at a glance dont actually know what's going on there), but I found that this error could be specifically triggered by running `bd!`, so in the subscription handler I check that there are no falsy values in the inactive windows array before the subsequent operations\r\n\r\nEDIT: This bug also may also relate to opening the welcome screen although I currently cannot test this as using the screen swallows up input like `<space>, <enter>` etc. so hard to navigate or run commands once oni is opened with the welcome menu\r\n The component did catch is essentially a somewhat unrelated suggestion of a point where some fallback UI can be set to render if the editor crashes, but even unimplemented as it is any errors in the `NeovimSurface` will get caught there and Oni at least will remain open Noted recently that an error with the `windowNumber` subscription which happens consistently on startup which seems to take down the buffer bar selection, so it is no longer clear which buffer is selected. \r\n\r\n<img width=\"827\" alt=\"screen shot 2018-02-01 at 19 51 10\" src=\"https://user-images.githubusercontent.com/22454918/35700004-a5a21e60-0789-11e8-89f3-0d9d00fa3e6b.png\">\r\n\r\nI couldn't figure why the error might be happening but I added if block to the actions in the handler to prevent the error being thrown On further investigation it seems [here](https://github.com/Akin909/oni/blob/e9f9311ee245ad49b2825c5720910e18464cfe15/browser/src/neovim/NeovimWindowManager.ts#L92) `TabState.inactiveWindows` can be passed in as null, which seems expected to me as If only one window exists there wouldn't be any inactive window (at a glance dont actually know what's going on there), but I found that this error could be specifically triggered by running `bd!`, so in the subscription handler I check that there are no falsy values in the inactive windows array before the subsequent operations\r\n\r\nEDIT: This bug also may also relate to opening the welcome screen although I currently cannot test this as using the screen swallows up input like `<space>, <enter>` etc. so hard to navigate or run commands once oni is opened with the welcome menu\r\n The component did catch is essentially a somewhat unrelated suggestion of a point where some fallback UI can be set to render if the editor crashes, but even unimplemented as it is any errors in the `NeovimSurface` will get caught there and Oni at least will remain open Upgrade the `ocaml-language-server` version, fix typo for diagnostics specification and add `bsb` to tools for diagnostics. fixes #1386 tried locally and it's really cool gives linting and diagnostics \ud83d\udc4d , looking at the `vscode-reasonml` plugin there's soo much awesome stuff this and other lsps are capable of really exciting like code splitting etc \u2728  Upgrade the `ocaml-language-server` version, fix typo for diagnostics specification and add `bsb` to tools for diagnostics. fixes #1386 tried locally and it's really cool gives linting and diagnostics \ud83d\udc4d , looking at the `vscode-reasonml` plugin there's soo much awesome stuff this and other lsps are capable of really exciting like code splitting etc \u2728  This PR will fix #1385 by adding a `workspace.autoDetectProjectRoot` setting with three options as recommended by @bryphe `never`, `noworkspace` and `always`, it mirrors the functionality of `vim-rooter` but for oni's workspaces.\r\n\r\nThe `noworkspace` option (default) will navigate to the current buffer's project root is no workspace has been set.\r\n\r\n`always` will change the workspace to match the currently open buffers project root.\r\n\r\nThe never options leaves this as they are with no dir changes.\r\n\r\nIt also a a `workspace.autoDetectRootFiles` an array of files to be used to mark a project root which the user can configure. Updated as requested @bryphe  This PR will fix #1385 by adding a `workspace.autoDetectProjectRoot` setting with three options as recommended by @bryphe `never`, `noworkspace` and `always`, it mirrors the functionality of `vim-rooter` but for oni's workspaces.\r\n\r\nThe `noworkspace` option (default) will navigate to the current buffer's project root is no workspace has been set.\r\n\r\n`always` will change the workspace to match the currently open buffers project root.\r\n\r\nThe never options leaves this as they are with no dir changes.\r\n\r\nIt also a a `workspace.autoDetectRootFiles` an array of files to be used to mark a project root which the user can configure. Updated as requested @bryphe  This PR hopefully fixes #1381, adds a check to the `changeDirectory` function in the workspace service, to check if the directory is valid, if not it changes the directory to null and passes null to the event it does not however call the `process.cwd` function.\r\n\r\nI was unclear on what the desired functionality should be if an invalid directory was passed my thinking was to not dispatch an event or change the active workspace but rather ignore the call entirely i.e. return early except I notice that to close the folder you explicitly pass `null` to the function so not sure if its best to emulate that (which is what I've currently done). This PR hopefully fixes #1381, adds a check to the `changeDirectory` function in the workspace service, to check if the directory is valid, if not it changes the directory to null and passes null to the event it does not however call the `process.cwd` function.\r\n\r\nI was unclear on what the desired functionality should be if an invalid directory was passed my thinking was to not dispatch an event or change the active workspace but rather ignore the call entirely i.e. return early except I notice that to close the folder you explicitly pass `null` to the function so not sure if its best to emulate that (which is what I've currently done). @bryphe I've changed the path to point towards `node_modules/ocaml-language-server/bin/server/index.js` as by looking at the `.app` directory in the packaged app this was the only initialisation point I found, no executable. This works on my mac when built although I have not been able to test it works on `windows` (as I dont have a windows machine) but as there is no executable I use the same entry point for both windows and mac @jordwalke, no worries it's been a blocker for me too for a little while \ud83d\udc4d  hopefully this resolves that. @bryphe I've also add a small style change to the tool tip as I noticed certain popups in reason files are quite large so I've added a max width to the content (an example is hovering over `ReasonReact` outputs a massive chunk of text) although it includes some strange characters which I think are coming from the `lsp` rather than our parsing of the markdown string as I've observed this prior to the tooltip changes Here's a screen shot of the characters I mentioned above:\r\n\r\n<img width=\"483\" alt=\"screen shot 2018-01-27 at 12 00 52\" src=\"https://user-images.githubusercontent.com/22454918/35471768-ffa55fbe-0359-11e8-859f-60381fda09bb.png\">\r\n @bryphe I've changed the path to point towards `node_modules/ocaml-language-server/bin/server/index.js` as by looking at the `.app` directory in the packaged app this was the only initialisation point I found, no executable. This works on my mac when built although I have not been able to test it works on `windows` (as I dont have a windows machine) but as there is no executable I use the same entry point for both windows and mac @jordwalke, no worries it's been a blocker for me too for a little while \ud83d\udc4d  hopefully this resolves that. @bryphe I've also add a small style change to the tool tip as I noticed certain popups in reason files are quite large so I've added a max width to the content (an example is hovering over `ReasonReact` outputs a massive chunk of text) although it includes some strange characters which I think are coming from the `lsp` rather than our parsing of the markdown string as I've observed this prior to the tooltip changes Here's a screen shot of the characters I mentioned above:\r\n\r\n<img width=\"483\" alt=\"screen shot 2018-01-27 at 12 00 52\" src=\"https://user-images.githubusercontent.com/22454918/35471768-ffa55fbe-0359-11e8-859f-60381fda09bb.png\">\r\n @bryphe I've changed the path to point towards `node_modules/ocaml-language-server/bin/server/index.js` as by looking at the `.app` directory in the packaged app this was the only initialisation point I found, no executable. This works on my mac when built although I have not been able to test it works on `windows` (as I dont have a windows machine) but as there is no executable I use the same entry point for both windows and mac @jordwalke, no worries it's been a blocker for me too for a little while \ud83d\udc4d  hopefully this resolves that. @bryphe I've also add a small style change to the tool tip as I noticed certain popups in reason files are quite large so I've added a max width to the content (an example is hovering over `ReasonReact` outputs a massive chunk of text) although it includes some strange characters which I think are coming from the `lsp` rather than our parsing of the markdown string as I've observed this prior to the tooltip changes Here's a screen shot of the characters I mentioned above:\r\n\r\n<img width=\"483\" alt=\"screen shot 2018-01-27 at 12 00 52\" src=\"https://user-images.githubusercontent.com/22454918/35471768-ffa55fbe-0359-11e8-859f-60381fda09bb.png\">\r\n @bryphe this is probably due to prettier's line length rule so having comments beside a function line disable etc will very likely in many cases cause prettier to move the line down, I think the best way around that would be to use next line rule @bryphe as discussed in #1325 this PR mirrors #1325 without any other changes. I'd recommend we merged this quickly if that's okay with you since given all the hooks any changes in master that get pulled in could accidentally cause the hooks to run (granted I forget to run `--no-verify` flag, which is inevitable) @bryphe this is probably due to prettier's line length rule so having comments beside a function line disable etc will very likely in many cases cause prettier to move the line down, I think the best way around that would be to use next line rule @bryphe @Bretley  following my comment in #1127, I've cleaned up the merge conflicts, so we can bring in the changes you made to externalize the `cmdline`, \r\n\r\njust to note that the primary ongoing issue I can see is the lack of a *proper* cursor, at the moment I've tweaked the component to be an input and force focus so it seems like its cursor responds to input but actually this is controlled by redux so the cursor doesn't behave properly.\r\n\r\nEDIT: @Bretley I can also make this PR to your branch if you'd prefer to merge it in then we merge in the original. @samvv @bryphe The majority of the work here seemed to be done so I had a quick look at fixing conflicts, and tweaking it to use styled components. \r\n\r\nUnfortunately theres an issue with the cursor which is that as the event happens essentially separately from the input/output component so an input element for example doesn't have full cursor control, @Bretley @samvv  not sure if either of you are still working on this or had any plans as to how to get round this?\r\n\r\nHappy to leave this be if either of you are still working on it was just thinking to get the simplest implementation working since you've both done all the heavy lifting and then that can be iterated on in the future rather than see the work get buried in a sea of merge conflicts? @samvv @bryphe The majority of the work here seemed to be done so I had a quick look at fixing conflicts, and tweaking it to use styled components. \r\n\r\nUnfortunately theres an issue with the cursor which is that as the event happens essentially separately from the input/output component so an input element for example doesn't have full cursor control, @Bretley @samvv  not sure if either of you are still working on this or had any plans as to how to get round this?\r\n\r\nHappy to leave this be if either of you are still working on it was just thinking to get the simplest implementation working since you've both done all the heavy lifting and then that can be iterated on in the future rather than see the work get buried in a sea of merge conflicts? @samvv @bryphe The majority of the work here seemed to be done so I had a quick look at fixing conflicts, and tweaking it to use styled components. \r\n\r\nUnfortunately theres an issue with the cursor which is that as the event happens essentially separately from the input/output component so an input element for example doesn't have full cursor control, @Bretley @samvv  not sure if either of you are still working on this or had any plans as to how to get round this?\r\n\r\nHappy to leave this be if either of you are still working on it was just thinking to get the simplest implementation working since you've both done all the heavy lifting and then that can be iterated on in the future rather than see the work get buried in a sea of merge conflicts?",
    "codecov[bot]": "# [Codecov](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=h1) Report\n> Merging [#1676](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/fa5e8c25b6efad4d25551803e840224b65cee017?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1676/graphs/tree.svg?width=650&src=pr&token=fMBrnZS5nb&height=150)](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1676      +/-   ##\n==========================================\n- Coverage   46.69%   46.68%   -0.01%     \n==========================================\n  Files         120      120              \n  Lines        4482     4485       +3     \n  Branches      645      645              \n==========================================\n+ Hits         2093     2094       +1     \n- Misses       2240     2241       +1     \n- Partials      149      150       +1\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...src/Services/Configuration/DefaultConfiguration.ts](https://codecov.io/gh/onivim/oni/pull/1676/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvQ29uZmlndXJhdGlvbi9EZWZhdWx0Q29uZmlndXJhdGlvbi50cw==) | `86.66% <\u00f8> (\u00f8)` | :arrow_up: |\n| [...ser/src/Editor/NeovimEditor/NeovimEditorReducer.ts](https://codecov.io/gh/onivim/oni/pull/1676/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvRWRpdG9yL05lb3ZpbUVkaXRvci9OZW92aW1FZGl0b3JSZWR1Y2VyLnRz) | `16.82% <0%> (-0.33%)` | :arrow_down: |\n| [browser/src/Services/Sneak/SneakView.tsx](https://codecov.io/gh/onivim/oni/pull/1676/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25lYWsvU25lYWtWaWV3LnRzeA==) | `43.33% <0%> (+1.95%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=footer). Last update [fa5e8c2...2df73ce](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=h1) Report\n> Merging [#1676](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/fa5e8c25b6efad4d25551803e840224b65cee017?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1676/graphs/tree.svg?width=650&src=pr&token=fMBrnZS5nb&height=150)](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1676      +/-   ##\n==========================================\n- Coverage   46.69%   46.68%   -0.01%     \n==========================================\n  Files         120      120              \n  Lines        4482     4485       +3     \n  Branches      645      645              \n==========================================\n+ Hits         2093     2094       +1     \n- Misses       2240     2241       +1     \n- Partials      149      150       +1\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...src/Services/Configuration/DefaultConfiguration.ts](https://codecov.io/gh/onivim/oni/pull/1676/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvQ29uZmlndXJhdGlvbi9EZWZhdWx0Q29uZmlndXJhdGlvbi50cw==) | `86.66% <\u00f8> (\u00f8)` | :arrow_up: |\n| [...ser/src/Editor/NeovimEditor/NeovimEditorReducer.ts](https://codecov.io/gh/onivim/oni/pull/1676/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvRWRpdG9yL05lb3ZpbUVkaXRvci9OZW92aW1FZGl0b3JSZWR1Y2VyLnRz) | `16.82% <0%> (-0.33%)` | :arrow_down: |\n| [browser/src/Services/Sneak/SneakView.tsx](https://codecov.io/gh/onivim/oni/pull/1676/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25lYWsvU25lYWtWaWV3LnRzeA==) | `43.33% <0%> (+1.95%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=footer). Last update [fa5e8c2...2df73ce](https://codecov.io/gh/onivim/oni/pull/1676?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=h1) Report\n> Merging [#1667](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/15868a78d306c461ecfb59d52aceeca6a8ead94f?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1667/graphs/tree.svg?width=650&token=fMBrnZS5nb&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=tree)\n\n```diff\n@@          Coverage Diff           @@\n##           master   #1667   +/-   ##\n======================================\n  Coverage    46.7%   46.7%           \n======================================\n  Files         120     120           \n  Lines        4479    4479           \n  Branches      644     644           \n======================================\n  Hits         2092    2092           \n  Misses       2238    2238           \n  Partials      149     149\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...src/Services/Configuration/DefaultConfiguration.ts](https://codecov.io/gh/onivim/oni/pull/1667/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvQ29uZmlndXJhdGlvbi9EZWZhdWx0Q29uZmlndXJhdGlvbi50cw==) | `86.66% <\u00f8> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=footer). Last update [15868a7...c501380](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=h1) Report\n> Merging [#1667](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/15868a78d306c461ecfb59d52aceeca6a8ead94f?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1667/graphs/tree.svg?width=650&token=fMBrnZS5nb&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=tree)\n\n```diff\n@@          Coverage Diff           @@\n##           master   #1667   +/-   ##\n======================================\n  Coverage    46.7%   46.7%           \n======================================\n  Files         120     120           \n  Lines        4479    4479           \n  Branches      644     644           \n======================================\n  Hits         2092    2092           \n  Misses       2238    2238           \n  Partials      149     149\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...src/Services/Configuration/DefaultConfiguration.ts](https://codecov.io/gh/onivim/oni/pull/1667/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvQ29uZmlndXJhdGlvbi9EZWZhdWx0Q29uZmlndXJhdGlvbi50cw==) | `86.66% <\u00f8> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=footer). Last update [15868a7...c501380](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=h1) Report\n> Merging [#1667](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/15868a78d306c461ecfb59d52aceeca6a8ead94f?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1667/graphs/tree.svg?width=650&token=fMBrnZS5nb&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=tree)\n\n```diff\n@@          Coverage Diff           @@\n##           master   #1667   +/-   ##\n======================================\n  Coverage    46.7%   46.7%           \n======================================\n  Files         120     120           \n  Lines        4479    4479           \n  Branches      644     644           \n======================================\n  Hits         2092    2092           \n  Misses       2238    2238           \n  Partials      149     149\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...src/Services/Configuration/DefaultConfiguration.ts](https://codecov.io/gh/onivim/oni/pull/1667/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvQ29uZmlndXJhdGlvbi9EZWZhdWx0Q29uZmlndXJhdGlvbi50cw==) | `86.66% <\u00f8> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=footer). Last update [15868a7...c501380](https://codecov.io/gh/onivim/oni/pull/1667?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=h1) Report\n> Merging [#1637](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/92e5daed6ae43a5de75eb313afd9b2e6403d0efd?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n> The diff coverage is `85.71%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1637/graphs/tree.svg?token=fMBrnZS5nb&width=650&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1637      +/-   ##\n==========================================\n- Coverage   46.17%   46.15%   -0.02%     \n==========================================\n  Files         117      117              \n  Lines        4427     4437      +10     \n  Branches      635      636       +1     \n==========================================\n+ Hits         2044     2048       +4     \n- Misses       2239     2245       +6     \n  Partials      144      144\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...er/src/Services/Notifications/NotificationStore.ts](https://codecov.io/gh/onivim/oni/pull/1637/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25TdG9yZS50cw==) | `85% <85.71%> (-0.72%)` | :arrow_down: |\n| [browser/src/Redux/createStore.ts](https://codecov.io/gh/onivim/oni/pull/1637/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvUmVkdXgvY3JlYXRlU3RvcmUudHM=) | `83.33% <0%> (-8.34%)` | :arrow_down: |\n| [...owser/src/Services/Snippets/SnippetBufferLayer.tsx](https://codecov.io/gh/onivim/oni/pull/1637/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldEJ1ZmZlckxheWVyLnRzeA==) | `23.07% <0%> (-1.93%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=footer). Last update [92e5dae...9b5a348](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=h1) Report\n> Merging [#1637](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/92e5daed6ae43a5de75eb313afd9b2e6403d0efd?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n> The diff coverage is `85.71%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1637/graphs/tree.svg?token=fMBrnZS5nb&width=650&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1637      +/-   ##\n==========================================\n- Coverage   46.17%   46.15%   -0.02%     \n==========================================\n  Files         117      117              \n  Lines        4427     4437      +10     \n  Branches      635      636       +1     \n==========================================\n+ Hits         2044     2048       +4     \n- Misses       2239     2245       +6     \n  Partials      144      144\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...er/src/Services/Notifications/NotificationStore.ts](https://codecov.io/gh/onivim/oni/pull/1637/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25TdG9yZS50cw==) | `85% <85.71%> (-0.72%)` | :arrow_down: |\n| [browser/src/Redux/createStore.ts](https://codecov.io/gh/onivim/oni/pull/1637/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvUmVkdXgvY3JlYXRlU3RvcmUudHM=) | `83.33% <0%> (-8.34%)` | :arrow_down: |\n| [...owser/src/Services/Snippets/SnippetBufferLayer.tsx](https://codecov.io/gh/onivim/oni/pull/1637/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldEJ1ZmZlckxheWVyLnRzeA==) | `23.07% <0%> (-1.93%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=footer). Last update [92e5dae...9b5a348](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=h1) Report\n> Merging [#1637](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/92e5daed6ae43a5de75eb313afd9b2e6403d0efd?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n> The diff coverage is `85.71%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1637/graphs/tree.svg?token=fMBrnZS5nb&width=650&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1637      +/-   ##\n==========================================\n- Coverage   46.17%   46.15%   -0.02%     \n==========================================\n  Files         117      117              \n  Lines        4427     4437      +10     \n  Branches      635      636       +1     \n==========================================\n+ Hits         2044     2048       +4     \n- Misses       2239     2245       +6     \n  Partials      144      144\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...er/src/Services/Notifications/NotificationStore.ts](https://codecov.io/gh/onivim/oni/pull/1637/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25TdG9yZS50cw==) | `85% <85.71%> (-0.72%)` | :arrow_down: |\n| [browser/src/Redux/createStore.ts](https://codecov.io/gh/onivim/oni/pull/1637/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvUmVkdXgvY3JlYXRlU3RvcmUudHM=) | `83.33% <0%> (-8.34%)` | :arrow_down: |\n| [...owser/src/Services/Snippets/SnippetBufferLayer.tsx](https://codecov.io/gh/onivim/oni/pull/1637/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldEJ1ZmZlckxheWVyLnRzeA==) | `23.07% <0%> (-1.93%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=footer). Last update [92e5dae...9b5a348](https://codecov.io/gh/onivim/oni/pull/1637?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=h1) Report\n> Merging [#1630](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/2812e794e1be78d55cbd6ef8299176824bda61d3?src=pr&el=desc) will **increase** coverage by `0.02%`.\n> The diff coverage is `20.68%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1630/graphs/tree.svg?token=fMBrnZS5nb&src=pr&height=150&width=650)](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master   #1630      +/-   ##\n=========================================\n+ Coverage   46.57%   46.6%   +0.02%     \n=========================================\n  Files         116     116              \n  Lines        4335    4339       +4     \n  Branches      622     623       +1     \n=========================================\n+ Hits         2019    2022       +3     \n- Misses       2173    2174       +1     \n  Partials      143     143\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...ser/src/Services/Language/LanguageClientProcess.ts](https://codecov.io/gh/onivim/oni/pull/1630/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvTGFuZ3VhZ2UvTGFuZ3VhZ2VDbGllbnRQcm9jZXNzLnRz) | `13.63% <100%> (\u00f8)` | :arrow_up: |\n| [browser/src/Plugins/Api/Process.ts](https://codecov.io/gh/onivim/oni/pull/1630/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvUGx1Z2lucy9BcGkvUHJvY2Vzcy50cw==) | `24.59% <19.29%> (+3.53%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=footer). Last update [2812e79...b7d90a0](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=h1) Report\n> Merging [#1630](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/2812e794e1be78d55cbd6ef8299176824bda61d3?src=pr&el=desc) will **increase** coverage by `0.02%`.\n> The diff coverage is `20.68%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1630/graphs/tree.svg?token=fMBrnZS5nb&src=pr&height=150&width=650)](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master   #1630      +/-   ##\n=========================================\n+ Coverage   46.57%   46.6%   +0.02%     \n=========================================\n  Files         116     116              \n  Lines        4335    4339       +4     \n  Branches      622     623       +1     \n=========================================\n+ Hits         2019    2022       +3     \n- Misses       2173    2174       +1     \n  Partials      143     143\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...ser/src/Services/Language/LanguageClientProcess.ts](https://codecov.io/gh/onivim/oni/pull/1630/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvTGFuZ3VhZ2UvTGFuZ3VhZ2VDbGllbnRQcm9jZXNzLnRz) | `13.63% <100%> (\u00f8)` | :arrow_up: |\n| [browser/src/Plugins/Api/Process.ts](https://codecov.io/gh/onivim/oni/pull/1630/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvUGx1Z2lucy9BcGkvUHJvY2Vzcy50cw==) | `24.59% <19.29%> (+3.53%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=footer). Last update [2812e79...b7d90a0](https://codecov.io/gh/onivim/oni/pull/1630?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=h1) Report\n> Merging [#1618](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/2812e794e1be78d55cbd6ef8299176824bda61d3?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `33.33%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1618/graphs/tree.svg?token=fMBrnZS5nb&src=pr&width=650&height=150)](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1618      +/-   ##\n==========================================\n- Coverage   46.57%   46.56%   -0.01%     \n==========================================\n  Files         116      116              \n  Lines        4335     4338       +3     \n  Branches      622      623       +1     \n==========================================\n+ Hits         2019     2020       +1     \n- Misses       2173     2175       +2     \n  Partials      143      143\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/UI/components/common.ts](https://codecov.io/gh/onivim/oni/pull/1618/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9jb21tb24udHM=) | `86.66% <33.33%> (-5.93%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=footer). Last update [2812e79...0a0b037](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=h1) Report\n> Merging [#1618](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/2812e794e1be78d55cbd6ef8299176824bda61d3?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `33.33%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1618/graphs/tree.svg?token=fMBrnZS5nb&src=pr&width=650&height=150)](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1618      +/-   ##\n==========================================\n- Coverage   46.57%   46.56%   -0.01%     \n==========================================\n  Files         116      116              \n  Lines        4335     4338       +3     \n  Branches      622      623       +1     \n==========================================\n+ Hits         2019     2020       +1     \n- Misses       2173     2175       +2     \n  Partials      143      143\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/UI/components/common.ts](https://codecov.io/gh/onivim/oni/pull/1618/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9jb21tb24udHM=) | `86.66% <33.33%> (-5.93%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=footer). Last update [2812e79...0a0b037](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=h1) Report\n> Merging [#1618](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/2812e794e1be78d55cbd6ef8299176824bda61d3?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `33.33%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1618/graphs/tree.svg?token=fMBrnZS5nb&src=pr&width=650&height=150)](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1618      +/-   ##\n==========================================\n- Coverage   46.57%   46.56%   -0.01%     \n==========================================\n  Files         116      116              \n  Lines        4335     4338       +3     \n  Branches      622      623       +1     \n==========================================\n+ Hits         2019     2020       +1     \n- Misses       2173     2175       +2     \n  Partials      143      143\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/UI/components/common.ts](https://codecov.io/gh/onivim/oni/pull/1618/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9jb21tb24udHM=) | `86.66% <33.33%> (-5.93%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=footer). Last update [2812e79...0a0b037](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=h1) Report\n> Merging [#1618](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/2812e794e1be78d55cbd6ef8299176824bda61d3?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `33.33%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1618/graphs/tree.svg?token=fMBrnZS5nb&src=pr&width=650&height=150)](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1618      +/-   ##\n==========================================\n- Coverage   46.57%   46.56%   -0.01%     \n==========================================\n  Files         116      116              \n  Lines        4335     4338       +3     \n  Branches      622      623       +1     \n==========================================\n+ Hits         2019     2020       +1     \n- Misses       2173     2175       +2     \n  Partials      143      143\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/UI/components/common.ts](https://codecov.io/gh/onivim/oni/pull/1618/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9jb21tb24udHM=) | `86.66% <33.33%> (-5.93%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=footer). Last update [2812e79...0a0b037](https://codecov.io/gh/onivim/oni/pull/1618?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=h1) Report\n> Merging [#1613](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/9d35fe2fda75b0701aaee52eca7a1cd7e59dc595?src=pr&el=desc) will **increase** coverage by `0.63%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1613/graphs/tree.svg?width=650&token=fMBrnZS5nb&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1613      +/-   ##\n==========================================\n+ Coverage   46.41%   47.05%   +0.63%     \n==========================================\n  Files         116      116              \n  Lines        4313     4382      +69     \n  Branches      614      630      +16     \n==========================================\n+ Hits         2002     2062      +60     \n- Misses       2170     2175       +5     \n- Partials      141      145       +4\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/UI/components/common.ts](https://codecov.io/gh/onivim/oni/pull/1613/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9jb21tb24udHM=) | `91.42% <0%> (-1.17%)` | :arrow_down: |\n| [browser/src/Services/Snippets/SnippetSession.ts](https://codecov.io/gh/onivim/oni/pull/1613/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldFNlc3Npb24udHM=) | `82.83% <0%> (+3.38%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=footer). Last update [9d35fe2...d364195](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=h1) Report\n> Merging [#1613](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/9d35fe2fda75b0701aaee52eca7a1cd7e59dc595?src=pr&el=desc) will **increase** coverage by `0.63%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1613/graphs/tree.svg?width=650&token=fMBrnZS5nb&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1613      +/-   ##\n==========================================\n+ Coverage   46.41%   47.05%   +0.63%     \n==========================================\n  Files         116      116              \n  Lines        4313     4382      +69     \n  Branches      614      630      +16     \n==========================================\n+ Hits         2002     2062      +60     \n- Misses       2170     2175       +5     \n- Partials      141      145       +4\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/UI/components/common.ts](https://codecov.io/gh/onivim/oni/pull/1613/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9jb21tb24udHM=) | `91.42% <0%> (-1.17%)` | :arrow_down: |\n| [browser/src/Services/Snippets/SnippetSession.ts](https://codecov.io/gh/onivim/oni/pull/1613/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldFNlc3Npb24udHM=) | `82.83% <0%> (+3.38%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=footer). Last update [9d35fe2...d364195](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=h1) Report\n> Merging [#1613](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/9d35fe2fda75b0701aaee52eca7a1cd7e59dc595?src=pr&el=desc) will **increase** coverage by `0.63%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1613/graphs/tree.svg?width=650&token=fMBrnZS5nb&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1613      +/-   ##\n==========================================\n+ Coverage   46.41%   47.05%   +0.63%     \n==========================================\n  Files         116      116              \n  Lines        4313     4382      +69     \n  Branches      614      630      +16     \n==========================================\n+ Hits         2002     2062      +60     \n- Misses       2170     2175       +5     \n- Partials      141      145       +4\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/UI/components/common.ts](https://codecov.io/gh/onivim/oni/pull/1613/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9jb21tb24udHM=) | `91.42% <0%> (-1.17%)` | :arrow_down: |\n| [browser/src/Services/Snippets/SnippetSession.ts](https://codecov.io/gh/onivim/oni/pull/1613/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldFNlc3Npb24udHM=) | `82.83% <0%> (+3.38%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=footer). Last update [9d35fe2...d364195](https://codecov.io/gh/onivim/oni/pull/1613?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=h1) Report\n> Merging [#1581](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/bfd5f22ae1da7350c8ff0f94b0d4dd3d2c783adb?src=pr&el=desc) will **increase** coverage by `0.58%`.\n> The diff coverage is `33.33%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1581/graphs/tree.svg?height=150&src=pr&token=fMBrnZS5nb&width=650)](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1581      +/-   ##\n==========================================\n+ Coverage   46.67%   47.25%   +0.58%     \n==========================================\n  Files         120      122       +2     \n  Lines        4486     4543      +57     \n  Branches      645      657      +12     \n==========================================\n+ Hits         2094     2147      +53     \n- Misses       2242     2244       +2     \n- Partials      150      152       +2\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/Services/Explorer/ExplorerSelectors.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvRXhwbG9yZXIvRXhwbG9yZXJTZWxlY3RvcnMudHM=) | `56% <\u00f8> (\u00f8)` | :arrow_up: |\n| [...er/src/Services/Notifications/NotificationStore.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25TdG9yZS50cw==) | `85% <\u00f8> (\u00f8)` | :arrow_up: |\n| [browser/src/UI/components/common.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9jb21tb24udHM=) | `81.81% <33.33%> (-4.85%)` | :arrow_down: |\n| [...rowser/src/Services/WindowManager/WindowManager.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvV2luZG93TWFuYWdlci9XaW5kb3dNYW5hZ2VyLnRz) | `20.45% <0%> (-1.5%)` | :arrow_down: |\n| [browser/src/Services/Language/LanguageManager.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvTGFuZ3VhZ2UvTGFuZ3VhZ2VNYW5hZ2VyLnRz) | `39.76% <0%> (-0.24%)` | :arrow_down: |\n| [...r/src/Services/WindowManager/WindowManagerStore.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvV2luZG93TWFuYWdlci9XaW5kb3dNYW5hZ2VyU3RvcmUudHM=) | `50% <0%> (\u00f8)` | :arrow_up: |\n| [...src/Services/Configuration/DefaultConfiguration.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvQ29uZmlndXJhdGlvbi9EZWZhdWx0Q29uZmlndXJhdGlvbi50cw==) | `86.66% <0%> (\u00f8)` | :arrow_up: |\n| [...r/src/Services/Snippets/SnippetVariableResolver.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldFZhcmlhYmxlUmVzb2x2ZXIudHM=) | `66.66% <0%> (\u00f8)` | |\n| [.../src/Services/WindowManager/layoutFromSplitInfo.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvV2luZG93TWFuYWdlci9sYXlvdXRGcm9tU3BsaXRJbmZvLnRz) | `100% <0%> (\u00f8)` | |\n| [browser/src/Services/Snippets/OniSnippet.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvT25pU25pcHBldC50cw==) | `97.72% <0%> (+0.16%)` | :arrow_up: |\n| ... and [7 more](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=footer). Last update [bfd5f22...48b9522](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=h1) Report\n> Merging [#1581](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/bfd5f22ae1da7350c8ff0f94b0d4dd3d2c783adb?src=pr&el=desc) will **increase** coverage by `0.58%`.\n> The diff coverage is `33.33%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1581/graphs/tree.svg?height=150&src=pr&token=fMBrnZS5nb&width=650)](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1581      +/-   ##\n==========================================\n+ Coverage   46.67%   47.25%   +0.58%     \n==========================================\n  Files         120      122       +2     \n  Lines        4486     4543      +57     \n  Branches      645      657      +12     \n==========================================\n+ Hits         2094     2147      +53     \n- Misses       2242     2244       +2     \n- Partials      150      152       +2\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/Services/Explorer/ExplorerSelectors.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvRXhwbG9yZXIvRXhwbG9yZXJTZWxlY3RvcnMudHM=) | `56% <\u00f8> (\u00f8)` | :arrow_up: |\n| [...er/src/Services/Notifications/NotificationStore.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25TdG9yZS50cw==) | `85% <\u00f8> (\u00f8)` | :arrow_up: |\n| [browser/src/UI/components/common.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9jb21tb24udHM=) | `81.81% <33.33%> (-4.85%)` | :arrow_down: |\n| [...rowser/src/Services/WindowManager/WindowManager.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvV2luZG93TWFuYWdlci9XaW5kb3dNYW5hZ2VyLnRz) | `20.45% <0%> (-1.5%)` | :arrow_down: |\n| [browser/src/Services/Language/LanguageManager.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvTGFuZ3VhZ2UvTGFuZ3VhZ2VNYW5hZ2VyLnRz) | `39.76% <0%> (-0.24%)` | :arrow_down: |\n| [...r/src/Services/WindowManager/WindowManagerStore.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvV2luZG93TWFuYWdlci9XaW5kb3dNYW5hZ2VyU3RvcmUudHM=) | `50% <0%> (\u00f8)` | :arrow_up: |\n| [...src/Services/Configuration/DefaultConfiguration.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvQ29uZmlndXJhdGlvbi9EZWZhdWx0Q29uZmlndXJhdGlvbi50cw==) | `86.66% <0%> (\u00f8)` | :arrow_up: |\n| [...r/src/Services/Snippets/SnippetVariableResolver.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldFZhcmlhYmxlUmVzb2x2ZXIudHM=) | `66.66% <0%> (\u00f8)` | |\n| [.../src/Services/WindowManager/layoutFromSplitInfo.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvV2luZG93TWFuYWdlci9sYXlvdXRGcm9tU3BsaXRJbmZvLnRz) | `100% <0%> (\u00f8)` | |\n| [browser/src/Services/Snippets/OniSnippet.ts](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvT25pU25pcHBldC50cw==) | `97.72% <0%> (+0.16%)` | :arrow_up: |\n| ... and [7 more](https://codecov.io/gh/onivim/oni/pull/1581/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=footer). Last update [bfd5f22...48b9522](https://codecov.io/gh/onivim/oni/pull/1581?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=h1) Report\n> Merging [#1555](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/b317710ae3ebd5d53f518ce2680782354bffe0bd?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1555/graphs/tree.svg?width=650&token=fMBrnZS5nb&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1555   +/-   ##\n=======================================\n  Coverage   45.63%   45.63%           \n=======================================\n  Files         112      112           \n  Lines        4111     4111           \n  Branches      589      589           \n=======================================\n  Hits         1876     1876           \n  Misses       2105     2105           \n  Partials      130      130\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=footer). Last update [b317710...eb59f56](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=h1) Report\n> Merging [#1555](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/b317710ae3ebd5d53f518ce2680782354bffe0bd?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1555/graphs/tree.svg?width=650&token=fMBrnZS5nb&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1555   +/-   ##\n=======================================\n  Coverage   45.63%   45.63%           \n=======================================\n  Files         112      112           \n  Lines        4111     4111           \n  Branches      589      589           \n=======================================\n  Hits         1876     1876           \n  Misses       2105     2105           \n  Partials      130      130\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=footer). Last update [b317710...eb59f56](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=h1) Report\n> Merging [#1555](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/b317710ae3ebd5d53f518ce2680782354bffe0bd?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1555/graphs/tree.svg?width=650&token=fMBrnZS5nb&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1555   +/-   ##\n=======================================\n  Coverage   45.63%   45.63%           \n=======================================\n  Files         112      112           \n  Lines        4111     4111           \n  Branches      589      589           \n=======================================\n  Hits         1876     1876           \n  Misses       2105     2105           \n  Partials      130      130\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=footer). Last update [b317710...eb59f56](https://codecov.io/gh/onivim/oni/pull/1555?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=h1) Report\n> Merging [#1550](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/44e162d359c6b2a669e5d6dbcef4589c4de90b56?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1550/graphs/tree.svg?width=650&height=150&src=pr&token=fMBrnZS5nb)](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1550   +/-   ##\n=======================================\n  Coverage   45.63%   45.63%           \n=======================================\n  Files         112      112           \n  Lines        4111     4111           \n  Branches      589      589           \n=======================================\n  Hits         1876     1876           \n  Misses       2105     2105           \n  Partials      130      130\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=footer). Last update [44e162d...ab5f290](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=h1) Report\n> Merging [#1550](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/44e162d359c6b2a669e5d6dbcef4589c4de90b56?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1550/graphs/tree.svg?width=650&height=150&src=pr&token=fMBrnZS5nb)](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1550   +/-   ##\n=======================================\n  Coverage   45.63%   45.63%           \n=======================================\n  Files         112      112           \n  Lines        4111     4111           \n  Branches      589      589           \n=======================================\n  Hits         1876     1876           \n  Misses       2105     2105           \n  Partials      130      130\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=footer). Last update [44e162d...ab5f290](https://codecov.io/gh/onivim/oni/pull/1550?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=h1) Report\n> Merging [#1701](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/6b193c69b0d32c6cf7c6234f4e38ffdb2ea0357b?src=pr&el=desc) will **increase** coverage by `0.14%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1701/graphs/tree.svg?height=150&width=650&token=fMBrnZS5nb&src=pr)](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1701      +/-   ##\n==========================================\n+ Coverage   46.66%   46.81%   +0.14%     \n==========================================\n  Files         120      121       +1     \n  Lines        4487     4507      +20     \n  Branches      645      649       +4     \n==========================================\n+ Hits         2094     2110      +16     \n- Misses       2243     2244       +1     \n- Partials      150      153       +3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...src/Services/Configuration/DefaultConfiguration.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvQ29uZmlndXJhdGlvbi9EZWZhdWx0Q29uZmlndXJhdGlvbi50cw==) | `86.66% <0%> (\u00f8)` | :arrow_up: |\n| [...r/src/Services/Snippets/SnippetVariableResolver.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldFZhcmlhYmxlUmVzb2x2ZXIudHM=) | `66.66% <0%> (\u00f8)` | |\n| [browser/src/Services/Snippets/OniSnippet.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvT25pU25pcHBldC50cw==) | `97.72% <0%> (+0.16%)` | :arrow_up: |\n| [browser/src/Services/Snippets/SnippetSession.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldFNlc3Npb24udHM=) | `69.04% <0%> (+0.24%)` | :arrow_up: |\n| [browser/src/UI/components/Sneakable.tsx](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9TbmVha2FibGUudHN4) | `26.31% <0%> (+4.09%)` | :arrow_up: |\n| [browser/src/Services/Snippets/index.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvaW5kZXgudHM=) | `45.83% <0%> (+4.92%)` | :arrow_up: |\n| [browser/src/Services/Sneak/index.tsx](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25lYWsvaW5kZXgudHN4) | `41.66% <0%> (+5.3%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=footer). Last update [6b193c6...17a6e2e](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=h1) Report\n> Merging [#1701](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/6b193c69b0d32c6cf7c6234f4e38ffdb2ea0357b?src=pr&el=desc) will **increase** coverage by `0.14%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1701/graphs/tree.svg?height=150&width=650&token=fMBrnZS5nb&src=pr)](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1701      +/-   ##\n==========================================\n+ Coverage   46.66%   46.81%   +0.14%     \n==========================================\n  Files         120      121       +1     \n  Lines        4487     4507      +20     \n  Branches      645      649       +4     \n==========================================\n+ Hits         2094     2110      +16     \n- Misses       2243     2244       +1     \n- Partials      150      153       +3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [...src/Services/Configuration/DefaultConfiguration.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvQ29uZmlndXJhdGlvbi9EZWZhdWx0Q29uZmlndXJhdGlvbi50cw==) | `86.66% <0%> (\u00f8)` | :arrow_up: |\n| [...r/src/Services/Snippets/SnippetVariableResolver.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldFZhcmlhYmxlUmVzb2x2ZXIudHM=) | `66.66% <0%> (\u00f8)` | |\n| [browser/src/Services/Snippets/OniSnippet.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvT25pU25pcHBldC50cw==) | `97.72% <0%> (+0.16%)` | :arrow_up: |\n| [browser/src/Services/Snippets/SnippetSession.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvU25pcHBldFNlc3Npb24udHM=) | `69.04% <0%> (+0.24%)` | :arrow_up: |\n| [browser/src/UI/components/Sneakable.tsx](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvVUkvY29tcG9uZW50cy9TbmVha2FibGUudHN4) | `26.31% <0%> (+4.09%)` | :arrow_up: |\n| [browser/src/Services/Snippets/index.ts](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25pcHBldHMvaW5kZXgudHM=) | `45.83% <0%> (+4.92%)` | :arrow_up: |\n| [browser/src/Services/Sneak/index.tsx](https://codecov.io/gh/onivim/oni/pull/1701/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvU2VydmljZXMvU25lYWsvaW5kZXgudHN4) | `41.66% <0%> (+5.3%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=footer). Last update [6b193c6...17a6e2e](https://codecov.io/gh/onivim/oni/pull/1701?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=h1) Report\n> Merging [#1677](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/fa5e8c25b6efad4d25551803e840224b65cee017?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1677/graphs/tree.svg?token=fMBrnZS5nb&width=650&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1677   +/-   ##\n=======================================\n  Coverage   46.69%   46.69%           \n=======================================\n  Files         120      120           \n  Lines        4482     4482           \n  Branches      645      645           \n=======================================\n  Hits         2093     2093           \n  Misses       2240     2240           \n  Partials      149      149\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=footer). Last update [fa5e8c2...a172da0](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=h1) Report\n> Merging [#1677](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/fa5e8c25b6efad4d25551803e840224b65cee017?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1677/graphs/tree.svg?token=fMBrnZS5nb&width=650&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1677   +/-   ##\n=======================================\n  Coverage   46.69%   46.69%           \n=======================================\n  Files         120      120           \n  Lines        4482     4482           \n  Branches      645      645           \n=======================================\n  Hits         2093     2093           \n  Misses       2240     2240           \n  Partials      149      149\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=footer). Last update [fa5e8c2...a172da0](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=h1) Report\n> Merging [#1677](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/fa5e8c25b6efad4d25551803e840224b65cee017?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1677/graphs/tree.svg?token=fMBrnZS5nb&width=650&height=150&src=pr)](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1677   +/-   ##\n=======================================\n  Coverage   46.69%   46.69%           \n=======================================\n  Files         120      120           \n  Lines        4482     4482           \n  Branches      645      645           \n=======================================\n  Hits         2093     2093           \n  Misses       2240     2240           \n  Partials      149      149\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=footer). Last update [fa5e8c2...a172da0](https://codecov.io/gh/onivim/oni/pull/1677?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=h1) Report\n> Merging [#1665](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/f1325f4fb92cc0f64f0ea1ddffe62aeb05bdee9b?src=pr&el=desc) will **increase** coverage by `0.21%`.\n> The diff coverage is `50%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1665/graphs/tree.svg?height=150&width=650&token=fMBrnZS5nb&src=pr)](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master   #1665      +/-   ##\n=========================================\n+ Coverage   46.49%   46.7%   +0.21%     \n=========================================\n  Files         120     120              \n  Lines        4476    4479       +3     \n  Branches      642     644       +2     \n=========================================\n+ Hits         2081    2092      +11     \n+ Misses       2250    2238      -12     \n- Partials      145     149       +4\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/Plugins/Api/Process.ts](https://codecov.io/gh/onivim/oni/pull/1665/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvUGx1Z2lucy9BcGkvUHJvY2Vzcy50cw==) | `40.62% <50%> (+16.03%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=footer). Last update [f1325f4...6d8760a](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=h1) Report\n> Merging [#1665](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/f1325f4fb92cc0f64f0ea1ddffe62aeb05bdee9b?src=pr&el=desc) will **increase** coverage by `0.21%`.\n> The diff coverage is `50%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1665/graphs/tree.svg?height=150&width=650&token=fMBrnZS5nb&src=pr)](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master   #1665      +/-   ##\n=========================================\n+ Coverage   46.49%   46.7%   +0.21%     \n=========================================\n  Files         120     120              \n  Lines        4476    4479       +3     \n  Branches      642     644       +2     \n=========================================\n+ Hits         2081    2092      +11     \n+ Misses       2250    2238      -12     \n- Partials      145     149       +4\n```\n\n\n| [Impacted Files](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [browser/src/Plugins/Api/Process.ts](https://codecov.io/gh/onivim/oni/pull/1665/diff?src=pr&el=tree#diff-YnJvd3Nlci9zcmMvUGx1Z2lucy9BcGkvUHJvY2Vzcy50cw==) | `40.62% <50%> (+16.03%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=footer). Last update [f1325f4...6d8760a](https://codecov.io/gh/onivim/oni/pull/1665?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=h1) Report\n> :exclamation: No coverage uploaded for pull request base (`master@cd9b551`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1645/graphs/tree.svg?token=fMBrnZS5nb&src=pr&height=150&width=650)](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff            @@\n##             master   #1645   +/-   ##\n========================================\n  Coverage          ?   46.6%           \n========================================\n  Files             ?     117           \n  Lines             ?    4386           \n  Branches          ?     628           \n========================================\n  Hits              ?    2044           \n  Misses            ?    2198           \n  Partials          ?     144\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=footer). Last update [cd9b551...528e55e](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=h1) Report\n> :exclamation: No coverage uploaded for pull request base (`master@cd9b551`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1645/graphs/tree.svg?token=fMBrnZS5nb&src=pr&height=150&width=650)](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff            @@\n##             master   #1645   +/-   ##\n========================================\n  Coverage          ?   46.6%           \n========================================\n  Files             ?     117           \n  Lines             ?    4386           \n  Branches          ?     628           \n========================================\n  Hits              ?    2044           \n  Misses            ?    2198           \n  Partials          ?     144\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=footer). Last update [cd9b551...528e55e](https://codecov.io/gh/onivim/oni/pull/1645?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1643?src=pr&el=h1) Report\n> Merging [#1643](https://codecov.io/gh/onivim/oni/pull/1643?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/26441153d372015ac315f0a09703c2577dda6b6b?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1643/graphs/tree.svg?src=pr&token=fMBrnZS5nb&width=650&height=150)](https://codecov.io/gh/onivim/oni/pull/1643?src=pr&el=tree)\n\n```diff\n@@          Coverage Diff           @@\n##           master   #1643   +/-   ##\n======================================\n  Coverage    46.6%   46.6%           \n======================================\n  Files         117     117           \n  Lines        4386    4386           \n  Branches      628     628           \n======================================\n  Hits         2044    2044           \n  Misses       2198    2198           \n  Partials      144     144\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1643?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1643?src=pr&el=footer). Last update [2644115...172224c](https://codecov.io/gh/onivim/oni/pull/1643?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=h1) Report\n> Merging [#1631](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/2812e794e1be78d55cbd6ef8299176824bda61d3?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1631/graphs/tree.svg?src=pr&width=650&token=fMBrnZS5nb&height=150)](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1631   +/-   ##\n=======================================\n  Coverage   46.57%   46.57%           \n=======================================\n  Files         116      116           \n  Lines        4335     4335           \n  Branches      622      622           \n=======================================\n  Hits         2019     2019           \n  Misses       2173     2173           \n  Partials      143      143\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=footer). Last update [2812e79...59d0a05](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n # [Codecov](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=h1) Report\n> Merging [#1631](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=desc) into [master](https://codecov.io/gh/onivim/oni/commit/2812e794e1be78d55cbd6ef8299176824bda61d3?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/onivim/oni/pull/1631/graphs/tree.svg?src=pr&width=650&token=fMBrnZS5nb&height=150)](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1631   +/-   ##\n=======================================\n  Coverage   46.57%   46.57%           \n=======================================\n  Files         116      116           \n  Lines        4335     4335           \n  Branches      622      622           \n=======================================\n  Hits         2019     2019           \n  Misses       2173     2173           \n  Partials      143      143\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=footer). Last update [2812e79...59d0a05](https://codecov.io/gh/onivim/oni/pull/1631?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n",
    "bryphe": "> Actually thinking about it rather than having a list defined by oni it might be useful to some users to have the list of files the image layer opened for editable aka via their config\r\n\r\nYes, that would be cool!\r\n\r\n> (not for this PR a means of toggling it on or off) the reason I suggest this is that in one scenario I know of a user might want to edit the raw file, or process it in some way, this can definitely be the case with something like svg but may also be the case for some other file format for some other reason\r\n\r\nDefinitely - this is actually where I want to go with the 'buffer layers' feature. It'd be cool if there was a UI  (+ settings) that would let you toggle layers on/off, disable layers, etc. The reason I included `friendlyName` as part of the `BufferLayer` interface was to support this scenario.\r\n\r\nMy hope is that we could build some really interesting layers on top of this - like a debug layer, code coverage layer, a VCS layer (showing changes), etc... Thanks @Akin909 ! > Actually thinking about it rather than having a list defined by oni it might be useful to some users to have the list of files the image layer opened for editable aka via their config\r\n\r\nYes, that would be cool!\r\n\r\n> (not for this PR a means of toggling it on or off) the reason I suggest this is that in one scenario I know of a user might want to edit the raw file, or process it in some way, this can definitely be the case with something like svg but may also be the case for some other file format for some other reason\r\n\r\nDefinitely - this is actually where I want to go with the 'buffer layers' feature. It'd be cool if there was a UI  (+ settings) that would let you toggle layers on/off, disable layers, etc. The reason I included `friendlyName` as part of the `BufferLayer` interface was to support this scenario.\r\n\r\nMy hope is that we could build some really interesting layers on top of this - like a debug layer, code coverage layer, a VCS layer (showing changes), etc... Thanks @Akin909 ! This changes the default value of `'tabs.mode'`: `'tabs'`. This is (hopefully) the culmination of several discussions around whether to default to `buffers` vs `tabs`:\r\n- #1174\r\n- #1563 \r\n- #1627 \r\n\r\nThe main concern I had was in creating an experience that is familiar to users coming from Atom / VSCode - where there is a 1:1 tabs to buffers, so I defaulted that setting to buffers. What I've found though is that this leads to very confusing behavior for existing Vim users, and also that it may not be mutually exclusive. I believe that we can satisfy the 'users coming from Atom/VSCode/Sublime' case in 'tabs' mode, with minor tweaks, by just keeping 1 tab === 1 buffer by default from the QuickOpen/Explorer. \r\n\r\nThe main changes are:\r\n- Switch to tabs.mode setting of 'tabs' by default (and potentially deprecate the 'buffers' setting, if possible)\r\n- Set up the QuickOpen selection behavior to open in a _new tab_ if the file is not already open, or an _existing tab_ if it is already open. Same for file explorer. This is different than the current default, which was using `:e` - opening the buffer in the existing tab. I'm interested if this will impact / break anyones workflow. `Control+T` in the QuickOpen selection behaves as it does today, always opening a new tab. \r\n\r\nIn addition, @CrossR  has unblocked this by giving our 'tabs' mode parity in functionality with 'buffers' mode in #1498 - thanks @CrossR ! \ud83d\udcaf\r\n\r\nGiven all the feedback around the 'buffers' default, I think pivoting and trying out the 'tabs' default makes sense for the next release - cc  @jordwalke  @badosu@hoschi, as I know you all were impacted by this. The goal here is to have a system that is intuitive for both vim users and new users, without sacrificing power or flexibility \ud83d\udc4d \r\n\r\n\r\n\r\n\r\n > when you say potentially deprecate the buffers setting does this mean by default all users will have to work with tabs\r\n\r\nOnly if people aren't using it! I wish I had telemetry - it's hard to gauge how many users had explicitly set 'tabs' vs 'buffers'. But I won't deprecate it if its useful. \r\n\r\n> Might just wait to see what the change ends up looking like since I interact very little/never with tabs \ud83d\ude1f\r\n\r\nYa, it'll be interesting to see if it works for you, or if you have to flip back to 'buffers' mode. I heard the confusion / issues around the 'buffers' default in those linked issues - I'm curious what the response will be when it is flipped to 'tabs'. Cool, I'll include this as a 'breaking change' in the release notes for next release - we'll give it a shot and see how it works \ud83d\udc4d  This changes the default value of `'tabs.mode'`: `'tabs'`. This is (hopefully) the culmination of several discussions around whether to default to `buffers` vs `tabs`:\r\n- #1174\r\n- #1563 \r\n- #1627 \r\n\r\nThe main concern I had was in creating an experience that is familiar to users coming from Atom / VSCode - where there is a 1:1 tabs to buffers, so I defaulted that setting to buffers. What I've found though is that this leads to very confusing behavior for existing Vim users, and also that it may not be mutually exclusive. I believe that we can satisfy the 'users coming from Atom/VSCode/Sublime' case in 'tabs' mode, with minor tweaks, by just keeping 1 tab === 1 buffer by default from the QuickOpen/Explorer. \r\n\r\nThe main changes are:\r\n- Switch to tabs.mode setting of 'tabs' by default (and potentially deprecate the 'buffers' setting, if possible)\r\n- Set up the QuickOpen selection behavior to open in a _new tab_ if the file is not already open, or an _existing tab_ if it is already open. Same for file explorer. This is different than the current default, which was using `:e` - opening the buffer in the existing tab. I'm interested if this will impact / break anyones workflow. `Control+T` in the QuickOpen selection behaves as it does today, always opening a new tab. \r\n\r\nIn addition, @CrossR  has unblocked this by giving our 'tabs' mode parity in functionality with 'buffers' mode in #1498 - thanks @CrossR ! \ud83d\udcaf\r\n\r\nGiven all the feedback around the 'buffers' default, I think pivoting and trying out the 'tabs' default makes sense for the next release - cc  @jordwalke  @badosu@hoschi, as I know you all were impacted by this. The goal here is to have a system that is intuitive for both vim users and new users, without sacrificing power or flexibility \ud83d\udc4d \r\n\r\n\r\n\r\n\r\n > when you say potentially deprecate the buffers setting does this mean by default all users will have to work with tabs\r\n\r\nOnly if people aren't using it! I wish I had telemetry - it's hard to gauge how many users had explicitly set 'tabs' vs 'buffers'. But I won't deprecate it if its useful. \r\n\r\n> Might just wait to see what the change ends up looking like since I interact very little/never with tabs \ud83d\ude1f\r\n\r\nYa, it'll be interesting to see if it works for you, or if you have to flip back to 'buffers' mode. I heard the confusion / issues around the 'buffers' default in those linked issues - I'm curious what the response will be when it is flipped to 'tabs'. Cool, I'll include this as a 'breaking change' in the release notes for next release - we'll give it a shot and see how it works \ud83d\udc4d  This changes the default value of `'tabs.mode'`: `'tabs'`. This is (hopefully) the culmination of several discussions around whether to default to `buffers` vs `tabs`:\r\n- #1174\r\n- #1563 \r\n- #1627 \r\n\r\nThe main concern I had was in creating an experience that is familiar to users coming from Atom / VSCode - where there is a 1:1 tabs to buffers, so I defaulted that setting to buffers. What I've found though is that this leads to very confusing behavior for existing Vim users, and also that it may not be mutually exclusive. I believe that we can satisfy the 'users coming from Atom/VSCode/Sublime' case in 'tabs' mode, with minor tweaks, by just keeping 1 tab === 1 buffer by default from the QuickOpen/Explorer. \r\n\r\nThe main changes are:\r\n- Switch to tabs.mode setting of 'tabs' by default (and potentially deprecate the 'buffers' setting, if possible)\r\n- Set up the QuickOpen selection behavior to open in a _new tab_ if the file is not already open, or an _existing tab_ if it is already open. Same for file explorer. This is different than the current default, which was using `:e` - opening the buffer in the existing tab. I'm interested if this will impact / break anyones workflow. `Control+T` in the QuickOpen selection behaves as it does today, always opening a new tab. \r\n\r\nIn addition, @CrossR  has unblocked this by giving our 'tabs' mode parity in functionality with 'buffers' mode in #1498 - thanks @CrossR ! \ud83d\udcaf\r\n\r\nGiven all the feedback around the 'buffers' default, I think pivoting and trying out the 'tabs' default makes sense for the next release - cc  @jordwalke  @badosu@hoschi, as I know you all were impacted by this. The goal here is to have a system that is intuitive for both vim users and new users, without sacrificing power or flexibility \ud83d\udc4d \r\n\r\n\r\n\r\n\r\n > when you say potentially deprecate the buffers setting does this mean by default all users will have to work with tabs\r\n\r\nOnly if people aren't using it! I wish I had telemetry - it's hard to gauge how many users had explicitly set 'tabs' vs 'buffers'. But I won't deprecate it if its useful. \r\n\r\n> Might just wait to see what the change ends up looking like since I interact very little/never with tabs \ud83d\ude1f\r\n\r\nYa, it'll be interesting to see if it works for you, or if you have to flip back to 'buffers' mode. I heard the confusion / issues around the 'buffers' default in those linked issues - I'm curious what the response will be when it is flipped to 'tabs'. Cool, I'll include this as a 'breaking change' in the release notes for next release - we'll give it a shot and see how it works \ud83d\udc4d  > might be worth me using 30rem instead which should roughly equate to 30characters wide based on the current font size, can add that to this once I push the merge fixes\r\n\r\nYes, +1 to using a measurement like this - the 30% is pretty huge on my monitor too. \ud83d\udc4d  Sweeet, nice find @Akin909 ! Change looks great - approving now. > might be worth me using 30rem instead which should roughly equate to 30characters wide based on the current font size, can add that to this once I push the merge fixes\r\n\r\nYes, +1 to using a measurement like this - the 30% is pretty huge on my monitor too. \ud83d\udc4d  Sweeet, nice find @Akin909 ! Change looks great - approving now. > might be worth me using 30rem instead which should roughly equate to 30characters wide based on the current font size, can add that to this once I push the merge fixes\r\n\r\nYes, +1 to using a measurement like this - the 30% is pretty huge on my monitor too. \ud83d\udc4d  Sweeet, nice find @Akin909 ! Change looks great - approving now. Thanks for all the details you went into measuring the performance, @Akin909 ! Appreciate it.\r\n\r\nI was concerned about the switch to the `sync` call at first, but given that we are caching the environment variables so we wouldn't hit that later (like spinning up an LSP), I think that is pretty reasonable. Nice work! (And thanks for all the help investigating #1583 \ud83d\udcaf ) Thanks for all the details you went into measuring the performance, @Akin909 ! Appreciate it.\r\n\r\nI was concerned about the switch to the `sync` call at first, but given that we are caching the environment variables so we wouldn't hit that later (like spinning up an LSP), I think that is pretty reasonable. Nice work! (And thanks for all the help investigating #1583 \ud83d\udcaf ) The change looks great, @Akin909 ! I agree, the big square red box is a bit much - especially since we still have a bunch of errors to fix! I like your first screenshot with the less color.\r\n\r\n\ud83d\udc4d to using blue for info. I think that would be great. The `info-circle` icon from font awesome would be good for this.\r\n\r\nFor the error, it might be worth having a different icon too - There is the `times-circle` icon which is a circle with an x in it that might be fitting for an error. I think if we have the colors + the icons it would be enough to differentiate.\r\n\r\nFrom a styling perspective, the only item I'd like to add is a 4 pixel border on the left with the color (red/yellow/blue). \r\n\r\nThanks for looking at this! Ah and I should have fixed the Linux issue on the build - you might need to grab the latest `master`. Awesome, looks great @Akin909 ! > Also was thinking would a timeout to remove the notifications after some time limit be desirable as I find that if an error occurs and in my case I've seen it before but I'm working on something else or don't know what to do with it they just persist indefinitely till I'm forced to remove it by \ud83e\udd22 clicking which I personally find quite frustrating\r\n\r\nA timeout would be great for notifications in general - but I was thinking for errors it makes sense to keep them sticky. Or, we could offer a configuration for this, too - perhaps we could default to a timeout in production builds, and sticky in development builds or something? In any case, perhaps we can move this to a separate issue / pull request?\r\n\r\n> @Akin909, how about using sneak mode to press the X button?\r\n\r\nIntegrating with sneak mode would be awesome! \ud83d\udc4d This should be relatively straightforward - just need to wrap the `cancel` button in the `<Sneakable />` component > woops just merged upstream to get latest test changes and seems I've lost approval \ud83d\ude06, also calling for tests although its primarily css which happens to be in js/ts (btw these kind of changes can be tested with jest-styled-components though not sure re the value but it is possible \r\n\r\nAh ya, I just turned off the gate on `codecov/project`  - I wonder if there is a way for us to configure the threshold? I don't think it really makes sense to add tests for the css, since it's so easy to visually verify - I think that would actually just end up being a tax w/o providing benefit. Approving again \ud83d\udc4d  Looks like the codecov checks are still blocking - is it cool if I bring this in, @Akin909 ? Or were there any other pending changes you were planning? Thanks for your work on this! \ud83d\udcaf  The change looks great, @Akin909 ! I agree, the big square red box is a bit much - especially since we still have a bunch of errors to fix! I like your first screenshot with the less color.\r\n\r\n\ud83d\udc4d to using blue for info. I think that would be great. The `info-circle` icon from font awesome would be good for this.\r\n\r\nFor the error, it might be worth having a different icon too - There is the `times-circle` icon which is a circle with an x in it that might be fitting for an error. I think if we have the colors + the icons it would be enough to differentiate.\r\n\r\nFrom a styling perspective, the only item I'd like to add is a 4 pixel border on the left with the color (red/yellow/blue). \r\n\r\nThanks for looking at this! Ah and I should have fixed the Linux issue on the build - you might need to grab the latest `master`. Awesome, looks great @Akin909 ! > Also was thinking would a timeout to remove the notifications after some time limit be desirable as I find that if an error occurs and in my case I've seen it before but I'm working on something else or don't know what to do with it they just persist indefinitely till I'm forced to remove it by \ud83e\udd22 clicking which I personally find quite frustrating\r\n\r\nA timeout would be great for notifications in general - but I was thinking for errors it makes sense to keep them sticky. Or, we could offer a configuration for this, too - perhaps we could default to a timeout in production builds, and sticky in development builds or something? In any case, perhaps we can move this to a separate issue / pull request?\r\n\r\n> @Akin909, how about using sneak mode to press the X button?\r\n\r\nIntegrating with sneak mode would be awesome! \ud83d\udc4d This should be relatively straightforward - just need to wrap the `cancel` button in the `<Sneakable />` component > woops just merged upstream to get latest test changes and seems I've lost approval \ud83d\ude06, also calling for tests although its primarily css which happens to be in js/ts (btw these kind of changes can be tested with jest-styled-components though not sure re the value but it is possible \r\n\r\nAh ya, I just turned off the gate on `codecov/project`  - I wonder if there is a way for us to configure the threshold? I don't think it really makes sense to add tests for the css, since it's so easy to visually verify - I think that would actually just end up being a tax w/o providing benefit. Approving again \ud83d\udc4d  Looks like the codecov checks are still blocking - is it cool if I bring this in, @Akin909 ? Or were there any other pending changes you were planning? Thanks for your work on this! \ud83d\udcaf  The change looks great, @Akin909 ! I agree, the big square red box is a bit much - especially since we still have a bunch of errors to fix! I like your first screenshot with the less color.\r\n\r\n\ud83d\udc4d to using blue for info. I think that would be great. The `info-circle` icon from font awesome would be good for this.\r\n\r\nFor the error, it might be worth having a different icon too - There is the `times-circle` icon which is a circle with an x in it that might be fitting for an error. I think if we have the colors + the icons it would be enough to differentiate.\r\n\r\nFrom a styling perspective, the only item I'd like to add is a 4 pixel border on the left with the color (red/yellow/blue). \r\n\r\nThanks for looking at this! Ah and I should have fixed the Linux issue on the build - you might need to grab the latest `master`. Awesome, looks great @Akin909 ! > Also was thinking would a timeout to remove the notifications after some time limit be desirable as I find that if an error occurs and in my case I've seen it before but I'm working on something else or don't know what to do with it they just persist indefinitely till I'm forced to remove it by \ud83e\udd22 clicking which I personally find quite frustrating\r\n\r\nA timeout would be great for notifications in general - but I was thinking for errors it makes sense to keep them sticky. Or, we could offer a configuration for this, too - perhaps we could default to a timeout in production builds, and sticky in development builds or something? In any case, perhaps we can move this to a separate issue / pull request?\r\n\r\n> @Akin909, how about using sneak mode to press the X button?\r\n\r\nIntegrating with sneak mode would be awesome! \ud83d\udc4d This should be relatively straightforward - just need to wrap the `cancel` button in the `<Sneakable />` component > woops just merged upstream to get latest test changes and seems I've lost approval \ud83d\ude06, also calling for tests although its primarily css which happens to be in js/ts (btw these kind of changes can be tested with jest-styled-components though not sure re the value but it is possible \r\n\r\nAh ya, I just turned off the gate on `codecov/project`  - I wonder if there is a way for us to configure the threshold? I don't think it really makes sense to add tests for the css, since it's so easy to visually verify - I think that would actually just end up being a tax w/o providing benefit. Approving again \ud83d\udc4d  Looks like the codecov checks are still blocking - is it cool if I bring this in, @Akin909 ? Or were there any other pending changes you were planning? Thanks for your work on this! \ud83d\udcaf  The change looks great, @Akin909 ! I agree, the big square red box is a bit much - especially since we still have a bunch of errors to fix! I like your first screenshot with the less color.\r\n\r\n\ud83d\udc4d to using blue for info. I think that would be great. The `info-circle` icon from font awesome would be good for this.\r\n\r\nFor the error, it might be worth having a different icon too - There is the `times-circle` icon which is a circle with an x in it that might be fitting for an error. I think if we have the colors + the icons it would be enough to differentiate.\r\n\r\nFrom a styling perspective, the only item I'd like to add is a 4 pixel border on the left with the color (red/yellow/blue). \r\n\r\nThanks for looking at this! Ah and I should have fixed the Linux issue on the build - you might need to grab the latest `master`. Awesome, looks great @Akin909 ! > Also was thinking would a timeout to remove the notifications after some time limit be desirable as I find that if an error occurs and in my case I've seen it before but I'm working on something else or don't know what to do with it they just persist indefinitely till I'm forced to remove it by \ud83e\udd22 clicking which I personally find quite frustrating\r\n\r\nA timeout would be great for notifications in general - but I was thinking for errors it makes sense to keep them sticky. Or, we could offer a configuration for this, too - perhaps we could default to a timeout in production builds, and sticky in development builds or something? In any case, perhaps we can move this to a separate issue / pull request?\r\n\r\n> @Akin909, how about using sneak mode to press the X button?\r\n\r\nIntegrating with sneak mode would be awesome! \ud83d\udc4d This should be relatively straightforward - just need to wrap the `cancel` button in the `<Sneakable />` component > woops just merged upstream to get latest test changes and seems I've lost approval \ud83d\ude06, also calling for tests although its primarily css which happens to be in js/ts (btw these kind of changes can be tested with jest-styled-components though not sure re the value but it is possible \r\n\r\nAh ya, I just turned off the gate on `codecov/project`  - I wonder if there is a way for us to configure the threshold? I don't think it really makes sense to add tests for the css, since it's so easy to visually verify - I think that would actually just end up being a tax w/o providing benefit. Approving again \ud83d\udc4d  Looks like the codecov checks are still blocking - is it cool if I bring this in, @Akin909 ? Or were there any other pending changes you were planning? Thanks for your work on this! \ud83d\udcaf  Hi @zapashcanon ,\r\n\r\nThank you for the PR! Appreciate you putting this together.\r\n\r\n> I fixed various things spotted by ShellCheck\r\n\r\nDo these have an end-user impact, or are they primarily hygiene fixes? If it's the latter, I'm inclined not to bring this in, because there is potential for a regression - we don't have good test coverage around some of these scripts (`oni.sh` is the one I am most concerned about). Thanks @zapashcanon ! Appreciate the details and contribution. \ud83d\udc4d Bringing this in now! Hi @zapashcanon ,\r\n\r\nThank you for the PR! Appreciate you putting this together.\r\n\r\n> I fixed various things spotted by ShellCheck\r\n\r\nDo these have an end-user impact, or are they primarily hygiene fixes? If it's the latter, I'm inclined not to bring this in, because there is potential for a regression - we don't have good test coverage around some of these scripts (`oni.sh` is the one I am most concerned about). Thanks @zapashcanon ! Appreciate the details and contribution. \ud83d\udc4d Bringing this in now! Hi @zapashcanon ,\r\n\r\nThank you for the PR! Appreciate you putting this together.\r\n\r\n> I fixed various things spotted by ShellCheck\r\n\r\nDo these have an end-user impact, or are they primarily hygiene fixes? If it's the latter, I'm inclined not to bring this in, because there is potential for a regression - we don't have good test coverage around some of these scripts (`oni.sh` is the one I am most concerned about). Thanks @zapashcanon ! Appreciate the details and contribution. \ud83d\udc4d Bringing this in now! I just tried it out, the functionality is really nice!\r\n\r\n> but there are some ux things I thought might be nice or also might be overkill like a sound playing when a file is relocated, and also some sort of highlighting of the visual area for a drop.\r\n\r\nIt's great that there is a border while we hover over the item - I like that. This is a good case where animations can be helpful - like having the source item fade out and the destination item fade in - it tells a story that the item has relocated (the destination item _fading_ or _popping_ in would be a good metaphor to help the user make sense of what just happened).  In addition, we might want to expand the destination folder - I noticed if I dragged a file into a folder, it was hard to track what happened.\r\n\r\nA sound might be overkill (we don't really have any sounds today, we previously had a beep sound, but it's not there anymore AFAIK) - I'm not sure if any other tree / explorers do it?\r\n\r\nA success notification might be helpful - like a big green checkmark + a message like \"Successfully copied C:/oni/test.ts to C:/oni2/test.ts\"\r\n\r\nI like the changes you brought in with react-dnd, this will open the door for other cool stuff, like reordering tabs. Great work on the change! \ud83d\udc4d  > not sure if you're aware of a away to animate just one component wrapped in a transition in and out based on a single prop without having the others animate.\r\n\r\nI think, if you're using the CSS transitions / animations (`<CSSTransition />`  inside `<TransitionGroup>`), we could add an additional className to the element - like `animation-enabled`, and then use a CSS selector inside the `styled-component` where the animation lives, to gate on having both the `enter` selector` and `animation-enabled`.\r\n\r\nYa, we definitely don't want all the items animating! I'm okay splitting the animation out as a separate change, too - up to you @Akin909 ! Looks really nice, @Akin909 ! \ud83d\udc4d I like the notification a lot. I just tried it out, the functionality is really nice!\r\n\r\n> but there are some ux things I thought might be nice or also might be overkill like a sound playing when a file is relocated, and also some sort of highlighting of the visual area for a drop.\r\n\r\nIt's great that there is a border while we hover over the item - I like that. This is a good case where animations can be helpful - like having the source item fade out and the destination item fade in - it tells a story that the item has relocated (the destination item _fading_ or _popping_ in would be a good metaphor to help the user make sense of what just happened).  In addition, we might want to expand the destination folder - I noticed if I dragged a file into a folder, it was hard to track what happened.\r\n\r\nA sound might be overkill (we don't really have any sounds today, we previously had a beep sound, but it's not there anymore AFAIK) - I'm not sure if any other tree / explorers do it?\r\n\r\nA success notification might be helpful - like a big green checkmark + a message like \"Successfully copied C:/oni/test.ts to C:/oni2/test.ts\"\r\n\r\nI like the changes you brought in with react-dnd, this will open the door for other cool stuff, like reordering tabs. Great work on the change! \ud83d\udc4d  > not sure if you're aware of a away to animate just one component wrapped in a transition in and out based on a single prop without having the others animate.\r\n\r\nI think, if you're using the CSS transitions / animations (`<CSSTransition />`  inside `<TransitionGroup>`), we could add an additional className to the element - like `animation-enabled`, and then use a CSS selector inside the `styled-component` where the animation lives, to gate on having both the `enter` selector` and `animation-enabled`.\r\n\r\nYa, we definitely don't want all the items animating! I'm okay splitting the animation out as a separate change, too - up to you @Akin909 ! Looks really nice, @Akin909 ! \ud83d\udc4d I like the notification a lot. Thanks for investigating this, @someguynamedmatt ! (And reviewing, @Akin909 \ud83d\udc4d )\r\n\r\nI think it makes sense to bring this in since it fixes the `Control+P` and `Control+Shift+P` functionality, which are pretty crucial.\r\n\r\nOne bug I did notice though that we can address separately is if I press `Control+Shift+F` (find in files), I get an error:\r\n![image](https://user-images.githubusercontent.com/13532591/36218374-f8ffe856-1168-11e8-93c7-d23761052d1d.png)\r\n\r\nWhat we might want to eventually do is _always_ create the sidebar + sidebar content pane, but if `sidebar.enabled` is `false`, we just hide them (or they start hidden, and we only `show` them if `sidebar.enabled` is true`). Then, if a user does `Control+Shift+B` to toggle the sidebar, or `Control+Shift+F` to find in files, we can make it visible. Logged #1562 to track this next issue, but I'll bring in this now and we can look at that later. Thanks again for your help here @someguynamedmatt and @Akin909 ! Thanks for investigating this, @someguynamedmatt ! (And reviewing, @Akin909 \ud83d\udc4d )\r\n\r\nI think it makes sense to bring this in since it fixes the `Control+P` and `Control+Shift+P` functionality, which are pretty crucial.\r\n\r\nOne bug I did notice though that we can address separately is if I press `Control+Shift+F` (find in files), I get an error:\r\n![image](https://user-images.githubusercontent.com/13532591/36218374-f8ffe856-1168-11e8-93c7-d23761052d1d.png)\r\n\r\nWhat we might want to eventually do is _always_ create the sidebar + sidebar content pane, but if `sidebar.enabled` is `false`, we just hide them (or they start hidden, and we only `show` them if `sidebar.enabled` is true`). Then, if a user does `Control+Shift+B` to toggle the sidebar, or `Control+Shift+F` to find in files, we can make it visible. Logged #1562 to track this next issue, but I'll bring in this now and we can look at that later. Thanks again for your help here @someguynamedmatt and @Akin909 ! Thanks for investigating this, @someguynamedmatt ! (And reviewing, @Akin909 \ud83d\udc4d )\r\n\r\nI think it makes sense to bring this in since it fixes the `Control+P` and `Control+Shift+P` functionality, which are pretty crucial.\r\n\r\nOne bug I did notice though that we can address separately is if I press `Control+Shift+F` (find in files), I get an error:\r\n![image](https://user-images.githubusercontent.com/13532591/36218374-f8ffe856-1168-11e8-93c7-d23761052d1d.png)\r\n\r\nWhat we might want to eventually do is _always_ create the sidebar + sidebar content pane, but if `sidebar.enabled` is `false`, we just hide them (or they start hidden, and we only `show` them if `sidebar.enabled` is true`). Then, if a user does `Control+Shift+B` to toggle the sidebar, or `Control+Shift+F` to find in files, we can make it visible. Logged #1562 to track this next issue, but I'll bring in this now and we can look at that later. Thanks again for your help here @someguynamedmatt and @Akin909 ! Ah ya, sorry about the issues @TalAmuyal . \r\n\r\nI believe the problems stem from the caching we have in TravisCI. The problem is, we need _some_ caching because downloading the oni-neovim-binaries and oni-ripgrep-binaries is throttled by github.\r\n\r\nI'll try either:\r\n- Seeing if there is a safe token we can use to authenticate with github (the token to download doesn't need much permissions)\r\n- See if we can cache _just_ those packages that have binaries\r\n\r\n> I really want to move on and work on more features, but it really feels that the CI process is an obstacle for me.\r\n\r\nMe too, I really appreciate your help! We'll try the bullet points above - we should be able to smooth this out. Still investigating the cache failures.... but since it's not due to your change, I'll bring this in. I have another idea to try in terms of dealing with the binary downloads.. Sure thing, @TalAmuyal ! Really appreciate your contributions.\r\n\r\nI'm hoping #1606 and #1616 will address this. After that, there is still some test flakiness, but those should hopefully make the PR builds more reliable, especially in the cases where the dependencies change. Ah ya, sorry about the issues @TalAmuyal . \r\n\r\nI believe the problems stem from the caching we have in TravisCI. The problem is, we need _some_ caching because downloading the oni-neovim-binaries and oni-ripgrep-binaries is throttled by github.\r\n\r\nI'll try either:\r\n- Seeing if there is a safe token we can use to authenticate with github (the token to download doesn't need much permissions)\r\n- See if we can cache _just_ those packages that have binaries\r\n\r\n> I really want to move on and work on more features, but it really feels that the CI process is an obstacle for me.\r\n\r\nMe too, I really appreciate your help! We'll try the bullet points above - we should be able to smooth this out. Still investigating the cache failures.... but since it's not due to your change, I'll bring this in. I have another idea to try in terms of dealing with the binary downloads.. Sure thing, @TalAmuyal ! Really appreciate your contributions.\r\n\r\nI'm hoping #1606 and #1616 will address this. After that, there is still some test flakiness, but those should hopefully make the PR builds more reliable, especially in the cases where the dependencies change. Awesome, thanks @Akin909 ! I'll bring this in - and then start getting the 0.3.0 builds ready for release \ud83d\udc4d  \ud83c\udf89  Awesome, thanks @Akin909 ! I'll bring this in - and then start getting the 0.3.0 builds ready for release \ud83d\udc4d  \ud83c\udf89  When I look at all the progress that came in this release, it's _crazy_ - we've started to deliver on a vision of breaking free of terminal, we have UI that is external to Vim but still navigable in the same way. Not only that, but the project as a whole is getting more mature in terms of stability, test coverage, etc. I think these are pretty good reasons to hit version `0.3.0`. Going from `0.2.21` to `0.2.22` doesn't seem to quite do it justice \ud83d\ude05 \r\n\r\nWe're making big strides and I'm excited about the next release. I'm going to tweak the roadmap shortly. Really appreciate all the help and contributions from everyone - we wouldn't be this far without all you've done! \ud83d\udc4d  Although going against my principle of 'failing fast', I'm planning to _temporarily_ turn off the notifications for this release. The reason is that they came in late, and there are still cases where they are particularly noisy (for example, I noticed in the CSS / HTML LSP that it was popping up - definitely bugs we need to fix!)\r\n\r\nThis doesn't make the situation any worse than the previous release, where issues were already \"swept under the rug\", and in fact this release made big strides because we now validate there are no errors in our automation logs, and we fixed several previously ignored crashes like #1514, #1499, #1516 , which is awesome - these were issues that had definitely impacted the experience.\r\n\r\nOnce I branch for the next release , I'll revert this change and hopefully we can fix the remaining issues and get to a new level of robustness \ud83d\udc4d \r\n\r\n This isn't a fix for #1524 , but hopefully can give us a bit more info or clues in terms of why the `SharedNeovimInstance` `nvim_ui_attach` call is failing! @Akin909 , would you be up for running the `AutoClosingPairs` test against this branch, and sharing the logs? Would be interesting to see around this `nvim_ui_attach` call if there is any craziness.. I'll bring this in, since it could help with debugging issues in the future, too. I'm on the fence about this one - I'm worried that if we sweep these exceptions \"under the rug\", we might miss valid bugs. I think that the exception being thrown in these cases is a real issue that we should try and understand. \r\n\r\n#1003 is an example of some similiar cases that were addressed when we upgraded to TypeScript 2.6. My preference would be to understand the issue a bit more before we suppress it - it'd be great if we could isolate it to a specific set of commands, or understand the circumstances. With #1003 , there were some changes in the protocol's expectations of when we call `\"open\"` vs `\"change\"`.\r\n\r\nIt'd be great to have test cases that exercise this directly. I think the ideal situation for this is to create test cases that can reproduce the error, and implement fixes to make it 'green'.\r\n\r\nOne possible way would be to create a `CiTest` that works against Oni.languages (`LanguageManager`) directly. We could construct a bunch of requests like:\r\n```\r\nawait Oni.languages.sendRequest(\"textDocument/didOpen\", { ... })\r\nawait Oni.languages.sendRequest(\"textDocument/didChange\", { ... })\r\n...\r\netc\r\n```\r\n\r\nAnd validate we get proper responses. This is something that would pay off greatly when we upgrade TypeScript (or if we decided to switch to another LSP), because we'd have a ton of confidence that things will work due to this coverage. We have only cursory, incidental coverage mainly in the auto complete test, which isn't ideal. Sounds good! \ud83d\udc4d  I'd really prefer that we have an understanding of the issue + test coverage before we suppress this. Our TS test coverage is very lacking considering how much we depend on it, and how easy it is to break when changing `tsc` versions - making it fragile. Having test coverage and understanding the underlying issue can help us make an informed decision.\r\n\r\n(FYI, I am planning on disabling the notifications (by default) for the _production_ build just for this one release on Monday - because there are still several bugs that have been existing already, but we haven't fixed yet. Just a one-time thing though for this release. Doesn't change the behavior of any of the issues though, just doesn't report it via notification. Wanted to give us one more time before it is always on - although we've made some awesome progress in fixing issues that had been ignored or missed previously!)\r\n\r\n> Although I'm having quite a bit of trouble running test locally (although I was gonna raise that separately so if I pick you brain and there might be solutions that could help anyone else its document somewhere)\r\n\r\nHmm, let me know what issue you are facing! It should be a lot better now with #1473 because you don't need a packaged build - you can just run `npm run test:integration`. The one gotcha is all Oni instances need to be closed. Usually when I'm writing a test I also comment out all the tests in `CiTests.ts` so it just runs my one test. Also might be worth looking to see if there are any known issues in the TypeScript issue tracker: https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+debug+failure+session+ I'm on the fence about this one - I'm worried that if we sweep these exceptions \"under the rug\", we might miss valid bugs. I think that the exception being thrown in these cases is a real issue that we should try and understand. \r\n\r\n#1003 is an example of some similiar cases that were addressed when we upgraded to TypeScript 2.6. My preference would be to understand the issue a bit more before we suppress it - it'd be great if we could isolate it to a specific set of commands, or understand the circumstances. With #1003 , there were some changes in the protocol's expectations of when we call `\"open\"` vs `\"change\"`.\r\n\r\nIt'd be great to have test cases that exercise this directly. I think the ideal situation for this is to create test cases that can reproduce the error, and implement fixes to make it 'green'.\r\n\r\nOne possible way would be to create a `CiTest` that works against Oni.languages (`LanguageManager`) directly. We could construct a bunch of requests like:\r\n```\r\nawait Oni.languages.sendRequest(\"textDocument/didOpen\", { ... })\r\nawait Oni.languages.sendRequest(\"textDocument/didChange\", { ... })\r\n...\r\netc\r\n```\r\n\r\nAnd validate we get proper responses. This is something that would pay off greatly when we upgrade TypeScript (or if we decided to switch to another LSP), because we'd have a ton of confidence that things will work due to this coverage. We have only cursory, incidental coverage mainly in the auto complete test, which isn't ideal. Sounds good! \ud83d\udc4d  I'd really prefer that we have an understanding of the issue + test coverage before we suppress this. Our TS test coverage is very lacking considering how much we depend on it, and how easy it is to break when changing `tsc` versions - making it fragile. Having test coverage and understanding the underlying issue can help us make an informed decision.\r\n\r\n(FYI, I am planning on disabling the notifications (by default) for the _production_ build just for this one release on Monday - because there are still several bugs that have been existing already, but we haven't fixed yet. Just a one-time thing though for this release. Doesn't change the behavior of any of the issues though, just doesn't report it via notification. Wanted to give us one more time before it is always on - although we've made some awesome progress in fixing issues that had been ignored or missed previously!)\r\n\r\n> Although I'm having quite a bit of trouble running test locally (although I was gonna raise that separately so if I pick you brain and there might be solutions that could help anyone else its document somewhere)\r\n\r\nHmm, let me know what issue you are facing! It should be a lot better now with #1473 because you don't need a packaged build - you can just run `npm run test:integration`. The one gotcha is all Oni instances need to be closed. Usually when I'm writing a test I also comment out all the tests in `CiTests.ts` so it just runs my one test. Also might be worth looking to see if there are any known issues in the TypeScript issue tracker: https://github.com/Microsoft/TypeScript/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+debug+failure+session+ Sweet, thanks for adding this @someguynamedmatt ! Just curious - do you have the option to squash and merge now? If so - go for it! \ud83d\udc4d  Ah ok, thanks for letting me know. Wasn't sure if the button would be enabled w/ an approval. Bringing it in now \ud83d\udc4d  Thanks for taking this on @someguynamedmatt !\r\n\r\nOne thing I realized is that unfortunately this won't address #246 completely - the `cli/oni` script is _only_ used for running via `npm` (`npm link`) - I don't believe it's used when Oni comes from any of the packaged binaries unfortunately. Looks good to me! I just tried it on Windows, and there is a bit of weirdness happening with `stdin`/`stdout` here, but I think this is a pre-existing issue:\r\n![image](https://user-images.githubusercontent.com/13532591/36127125-a4d03118-1010-11e8-89af-839b9828c007.png)\r\n\r\n(Somehow, the output gets printed _after_ the prompt - it's strange!) But it makes sense to bring this in - we can tackle the windows issue separately. Thanks for the contribution, @someguynamedmatt ! \ud83d\udc4d  Thanks for taking this on @someguynamedmatt !\r\n\r\nOne thing I realized is that unfortunately this won't address #246 completely - the `cli/oni` script is _only_ used for running via `npm` (`npm link`) - I don't believe it's used when Oni comes from any of the packaged binaries unfortunately. Looks good to me! I just tried it on Windows, and there is a bit of weirdness happening with `stdin`/`stdout` here, but I think this is a pre-existing issue:\r\n![image](https://user-images.githubusercontent.com/13532591/36127125-a4d03118-1010-11e8-89af-839b9828c007.png)\r\n\r\n(Somehow, the output gets printed _after_ the prompt - it's strange!) But it makes sense to bring this in - we can tackle the windows issue separately. Thanks for the contribution, @someguynamedmatt ! \ud83d\udc4d  > @bryphe thanks to the new error ux I was coerced \ud83d\ude06 (actually think it is a great idea \ud83c\udf7e though I wish it would only inform of an error once not every single time it occurs, maybe we could cache/storing error messages and only show the new modal if the error hasn't already been seen before, plus it specifically address an issue I raised \ud83d\ude80 #1488 )\r\n\r\nAwesome!! Thanks for fixing this \ud83d\udc4d I started to notice it too now once the notification was added, but didn't get a chance to investigate - really appreciate the fix. Hoping it'll prompt me to be better about catching/fixing issues up front too \ud83d\ude04 \r\n\r\nThe caching / storing error messages sounds like a great idea. It doesn't make sense to spam the user with the same message.\r\n\r\n> Another issue which the bug raised which I havent found a solution for is that in the file explorer on opening a file windowManager.focus is called but with the Oni.Editor rather than a windowSplit id which is what it expects, except as far as I can see it the Oni.Editor has no knowledge of which split it belongs to which I imagine is a sensible thing for me to add I just have no idea where or how they interrelate since each split has a private inner editor and the editor has no idea about splits\r\n\r\nThis seems reasonable to me- there are still some changes happening in regards to the Window API (how we manage / control multiple windows from the API). Using the id directly should be fine, though (in the future we might have _more_ Editor windows but we don't need to tackle that pre-emptively).\r\n\r\nThanks again for fixing this! \ud83d\udcaf  >  I just await the instances initialisation which fixes lingering issues where on startup the MenuBinding.setItems could not call .eval on the instance because it didnt exist yet.\r\n\r\nCool, thanks for fixing that! > @bryphe thanks to the new error ux I was coerced \ud83d\ude06 (actually think it is a great idea \ud83c\udf7e though I wish it would only inform of an error once not every single time it occurs, maybe we could cache/storing error messages and only show the new modal if the error hasn't already been seen before, plus it specifically address an issue I raised \ud83d\ude80 #1488 )\r\n\r\nAwesome!! Thanks for fixing this \ud83d\udc4d I started to notice it too now once the notification was added, but didn't get a chance to investigate - really appreciate the fix. Hoping it'll prompt me to be better about catching/fixing issues up front too \ud83d\ude04 \r\n\r\nThe caching / storing error messages sounds like a great idea. It doesn't make sense to spam the user with the same message.\r\n\r\n> Another issue which the bug raised which I havent found a solution for is that in the file explorer on opening a file windowManager.focus is called but with the Oni.Editor rather than a windowSplit id which is what it expects, except as far as I can see it the Oni.Editor has no knowledge of which split it belongs to which I imagine is a sensible thing for me to add I just have no idea where or how they interrelate since each split has a private inner editor and the editor has no idea about splits\r\n\r\nThis seems reasonable to me- there are still some changes happening in regards to the Window API (how we manage / control multiple windows from the API). Using the id directly should be fine, though (in the future we might have _more_ Editor windows but we don't need to tackle that pre-emptively).\r\n\r\nThanks again for fixing this! \ud83d\udcaf  >  I just await the instances initialisation which fixes lingering issues where on startup the MenuBinding.setItems could not call .eval on the instance because it didnt exist yet.\r\n\r\nCool, thanks for fixing that! Thanks for catching this, @Akin909 ! \r\n\r\nI wonder if we could add a minimal unit test for this case in `convertMarkdown` - is there a small markdown string we could pass into exercise this case, and verify it is getting rendering correctly?\r\n\r\n> Note: for future reference I've discovered an issue on one occasion with what the lsp sends, whilst the lsp dictates that documentation should be sent as markup/markdown in the case of Observable documentation html is sent\r\n\r\nOne tricky thing about the LSP implementations is they don't always adhere to the spec, so we have to be a bit flexible. I do believe though that some markdown specs allow HTML - https://github.github.com/gfm/ allows for some HTML.\r\n Thanks for catching this, @Akin909 ! \r\n\r\nI wonder if we could add a minimal unit test for this case in `convertMarkdown` - is there a small markdown string we could pass into exercise this case, and verify it is getting rendering correctly?\r\n\r\n> Note: for future reference I've discovered an issue on one occasion with what the lsp sends, whilst the lsp dictates that documentation should be sent as markup/markdown in the case of Observable documentation html is sent\r\n\r\nOne tricky thing about the LSP implementations is they don't always adhere to the spec, so we have to be a bit flexible. I do believe though that some markdown specs allow HTML - https://github.github.com/gfm/ allows for some HTML.\r\n Cool, the fix looks good to me! Thanks @Akin909 and @CrossR  \ud83d\udc4d  Cool, the fix looks good to me! Thanks @Akin909 and @CrossR  \ud83d\udc4d  Cool, the fix looks good to me! Thanks @Akin909 and @CrossR  \ud83d\udc4d  __Issue:__ While debugging automation, I noticed cases where the `process.env` would be changing seemingly at random through the course of running Oni.\r\n\r\n__Defect:__ The `mergeSpawnOptions` method has a side effect of setting `process.env`. We shouldn't need to update `process.env` during runtime, and doing so can have unpredictable results (aka, heisenbugs)\r\n\r\n__Fix:__ Don't set `process.env` - instead, just pass it, along with other environment variables, to the child process. @Akin909 - do you know if there was any code that depended on setting `process.env` based on shell arguments? My assumption was that we'd only need to pass it to other processes we spawn (like neovim, lsps, etc) Cool, thanks @Akin909 ! __Issue:__ While debugging automation, I noticed cases where the `process.env` would be changing seemingly at random through the course of running Oni.\r\n\r\n__Defect:__ The `mergeSpawnOptions` method has a side effect of setting `process.env`. We shouldn't need to update `process.env` during runtime, and doing so can have unpredictable results (aka, heisenbugs)\r\n\r\n__Fix:__ Don't set `process.env` - instead, just pass it, along with other environment variables, to the child process. @Akin909 - do you know if there was any code that depended on setting `process.env` based on shell arguments? My assumption was that we'd only need to pass it to other processes we spawn (like neovim, lsps, etc) Cool, thanks @Akin909 ! Looks good to me! Thanks @Akin909 for fixing this! Looks good to me! Thanks @Akin909 for fixing this! Looks good to me! Thanks @Akin909 \ud83d\udc4d  Awesome, thanks @Akin909 for investigating + fixing this! Awesome, thanks @Akin909 for investigating + fixing this! Cool, thanks for fixing this @Akin909 ! \ud83d\udc4d  Cool, thanks for fixing this @Akin909 ! \ud83d\udc4d  This change completes the 'decoupling' of the highlight groups from syntax highlighting. This pushes the burden of converting between `TokenColor` <-> `HighlightGroup` to `NeovimInstance`, so that the remainder of the stack can be agnostic of highlight groups. In other words, in the Oni stack, all we care about is `TokenColor`, and its just the Neovim layer that cares about highlight groups.\r\n\r\nThis adds a class called `NeovimTokenColorSynchronizer` which is responsible for creating new highlight groups whenever there is a new token color, and maintaining a mapping between token color -> highlight group. We make sure this is up-to-date prior to setting any syntax highlights, but the cache is really only updated on first launch or when colorschemes change.\r\n\r\nThis is intended to be on top of  #1484 \r\n\r\nRemaining work:\r\n- [x] Set `real` colors in `_convertTokenStyleToHighlightInfo`\r\n- [x] Fix `SyntaxHighlightingReconcilerTest` to update to new API\r\n- [x] Add simple test case for `NeovimTokenColorSynchronizer` (verify that it caches + gets highlight group, and that same token color gives same highlight group) > A comment re your comment about bold and italic yes nvim_hl command returns that if it is available otherwise it is undefined\r\n\r\nCool, thanks @Akin909 ! I'll update those to take into account.\r\n\r\n> Also are the editor tokens going to be set to nothing in the default config not that its particularly relevant anyway and is the structure there going to be an array? (again this is just to confirm re how I might integrate this with my PR)\r\n\r\nRight, the previous setup for `editor.tokenColors` was kind of a hack to get _something_ showing while we had a dependency on vim highlight groups. Now that we get a full set of token colors from `Neovim`, we don't need to set those - we can just let the user override them if they desire. In other words, that functionality is now superseded by the `VimHighlightToDefaultScope` map in #1484 . \r\n\r\n>  (again this is just to confirm re how I might integrate this with my PR)\r\n\r\nFor your PR, you'll probably want to get `tokenColors` from the `TokenColors` instance -that brings together tokens from configuration, the current theme, and any defaults (from vim), so it'd have the set you'd want as the base for hover (and then, apply any additional scopes/settings from the hover on top of that).\r\n > did you find having more vimhighlights in the defaults problematic, I ask as I've gone in the opposite direction i.e \r\n\r\nYep, when I used JavaScript files I'd see large blocks of highlighted text, so I'm going to stick with the existing set today. This makes the change more scoped anyway, as it's using the same set of highlighting we have today. We can look at expanding this set incrementally in additional PRs.\r\n\r\n> i've added more groups as the few that were there match really infrequently with the token highlights so highlighting was really sparse without colors from vim which the hover has no access to if there are fewer defaults there'll be little to no highlighting, an alternative :S is generating the highlights based on the existing groups but there be quite noticeable gaps\r\n\r\nMakes sense - in the meantime, we can use a specifically increased set of tokens for hover. It sounds like we were going to have a separate / larger set for hover anyway.\r\n\r\n> Can I add a method to the token colors to request more highlights from vim for other ui so that it wont interfere with vim's highlighting but the hover can access the colors it'll need? don't think this will return us to the original problem as this wouldn't be a dependency for functionality just a richer experience whilst we still lack themes etc.\r\n\r\nI think the best would be to add a method in hover to combine the `TokenColors` (which is from the theme + configuration) with an augmented set specifically for hover. In other words, keep `TokenColors` having the [single responsibility](https://en.wikipedia.org/wiki/Single_responsibility_principle) of coalescing the configuration + theme, and then have another object (or function) whose responsibility it is to reconcile that with specific hover styling. Maybe a `HoverTokenColors` object that has `TokenColors` as a dependency?\r\n\r\nAnother way to look at this is if we examine the dependency graph:\r\n![image](https://user-images.githubusercontent.com/13532591/36067567-3b58e1c8-0e74-11e8-9315-c6853c0dfb7e.png)\r\n\r\nWe see `TokenColors` depends on the `ThemeManager` and `Configuration` (which makes sense, becomes it brings them together and handles the merging!). But then lots of things depend on `TokenColors` - `Hover`, `SyntaxHighlighting`, `NeovimEditor`, etc. `SyntaxHighlighting` shouldn't need to worry about hover specific stuff, so if we add hover-specific methods to `TokenColors`, we end up adding _coupling_ across the entire dependency chain - now `SyntaxHighlighting` needs to know more about `hover` than it should to function. \r\n @Akin909 - cool, that makes sense to me! Like, one place I could also see using the `TokenThemeProvider` is giving some nice syntax coloring in completion - and we'd want the augmentation there too. So that seems like a good place to augment the themes. \ud83d\udc4d  @Akin909 - sounds reasonable! I think adding tokens incrementally is good, that way if there is a regression or issue we'll notice it and be able to narrow it down. Looks like this is green now, so I'll bring it in - hope it's not too bad to integrate with #1443 . Really excited for our new hover experience \ud83d\udc4d  This change completes the 'decoupling' of the highlight groups from syntax highlighting. This pushes the burden of converting between `TokenColor` <-> `HighlightGroup` to `NeovimInstance`, so that the remainder of the stack can be agnostic of highlight groups. In other words, in the Oni stack, all we care about is `TokenColor`, and its just the Neovim layer that cares about highlight groups.\r\n\r\nThis adds a class called `NeovimTokenColorSynchronizer` which is responsible for creating new highlight groups whenever there is a new token color, and maintaining a mapping between token color -> highlight group. We make sure this is up-to-date prior to setting any syntax highlights, but the cache is really only updated on first launch or when colorschemes change.\r\n\r\nThis is intended to be on top of  #1484 \r\n\r\nRemaining work:\r\n- [x] Set `real` colors in `_convertTokenStyleToHighlightInfo`\r\n- [x] Fix `SyntaxHighlightingReconcilerTest` to update to new API\r\n- [x] Add simple test case for `NeovimTokenColorSynchronizer` (verify that it caches + gets highlight group, and that same token color gives same highlight group) > A comment re your comment about bold and italic yes nvim_hl command returns that if it is available otherwise it is undefined\r\n\r\nCool, thanks @Akin909 ! I'll update those to take into account.\r\n\r\n> Also are the editor tokens going to be set to nothing in the default config not that its particularly relevant anyway and is the structure there going to be an array? (again this is just to confirm re how I might integrate this with my PR)\r\n\r\nRight, the previous setup for `editor.tokenColors` was kind of a hack to get _something_ showing while we had a dependency on vim highlight groups. Now that we get a full set of token colors from `Neovim`, we don't need to set those - we can just let the user override them if they desire. In other words, that functionality is now superseded by the `VimHighlightToDefaultScope` map in #1484 . \r\n\r\n>  (again this is just to confirm re how I might integrate this with my PR)\r\n\r\nFor your PR, you'll probably want to get `tokenColors` from the `TokenColors` instance -that brings together tokens from configuration, the current theme, and any defaults (from vim), so it'd have the set you'd want as the base for hover (and then, apply any additional scopes/settings from the hover on top of that).\r\n > did you find having more vimhighlights in the defaults problematic, I ask as I've gone in the opposite direction i.e \r\n\r\nYep, when I used JavaScript files I'd see large blocks of highlighted text, so I'm going to stick with the existing set today. This makes the change more scoped anyway, as it's using the same set of highlighting we have today. We can look at expanding this set incrementally in additional PRs.\r\n\r\n> i've added more groups as the few that were there match really infrequently with the token highlights so highlighting was really sparse without colors from vim which the hover has no access to if there are fewer defaults there'll be little to no highlighting, an alternative :S is generating the highlights based on the existing groups but there be quite noticeable gaps\r\n\r\nMakes sense - in the meantime, we can use a specifically increased set of tokens for hover. It sounds like we were going to have a separate / larger set for hover anyway.\r\n\r\n> Can I add a method to the token colors to request more highlights from vim for other ui so that it wont interfere with vim's highlighting but the hover can access the colors it'll need? don't think this will return us to the original problem as this wouldn't be a dependency for functionality just a richer experience whilst we still lack themes etc.\r\n\r\nI think the best would be to add a method in hover to combine the `TokenColors` (which is from the theme + configuration) with an augmented set specifically for hover. In other words, keep `TokenColors` having the [single responsibility](https://en.wikipedia.org/wiki/Single_responsibility_principle) of coalescing the configuration + theme, and then have another object (or function) whose responsibility it is to reconcile that with specific hover styling. Maybe a `HoverTokenColors` object that has `TokenColors` as a dependency?\r\n\r\nAnother way to look at this is if we examine the dependency graph:\r\n![image](https://user-images.githubusercontent.com/13532591/36067567-3b58e1c8-0e74-11e8-9315-c6853c0dfb7e.png)\r\n\r\nWe see `TokenColors` depends on the `ThemeManager` and `Configuration` (which makes sense, becomes it brings them together and handles the merging!). But then lots of things depend on `TokenColors` - `Hover`, `SyntaxHighlighting`, `NeovimEditor`, etc. `SyntaxHighlighting` shouldn't need to worry about hover specific stuff, so if we add hover-specific methods to `TokenColors`, we end up adding _coupling_ across the entire dependency chain - now `SyntaxHighlighting` needs to know more about `hover` than it should to function. \r\n @Akin909 - cool, that makes sense to me! Like, one place I could also see using the `TokenThemeProvider` is giving some nice syntax coloring in completion - and we'd want the augmentation there too. So that seems like a good place to augment the themes. \ud83d\udc4d  @Akin909 - sounds reasonable! I think adding tokens incrementally is good, that way if there is a regression or issue we'll notice it and be able to narrow it down. Looks like this is green now, so I'll bring it in - hope it's not too bad to integrate with #1443 . Really excited for our new hover experience \ud83d\udc4d  Awesome, looks great to me @Akin909 ! Thanks for implementing this \ud83d\udc4d  Just approved the changes - do you have the option to 'Squash and Merge' now? If so, go for it! \ud83d\udc4d  Awesome, looks great to me @Akin909 ! Thanks for implementing this \ud83d\udc4d  Just approved the changes - do you have the option to 'Squash and Merge' now? If so, go for it! \ud83d\udc4d  Awesome, thanks for the help here @Akin909 ! Looks good to me \ud83d\udc4d  Awesome, thanks for the help here @Akin909 ! Looks good to me \ud83d\udc4d  Cool, thanks for the investigation here, @Akin909 ! The fix looks safe to me, and does seem like it would make it more robust.\r\n\r\n> This bug also may also relate to opening the welcome screen although I currently cannot test this as using the screen swallows up input like <space>, <enter> etc. so hard to navigate or run commands once oni is opened with the welcome menu\r\n\r\nAh ya, for sure, this needs to be fixed before I can turn it on by default!\r\n\r\n> The component did catch is essentially a somewhat unrelated suggestion of a point where some fallback UI can be set to render if the editor crashes, but even unimplemented as it is any errors in the NeovimSurface will get caught there and Oni at least will remain open\r\n\r\nThis is a good idea - I was thinking it might make sense to add it to `<WindowSplitHost />` which is the container for all the splits (including editor splits, explorer, sidebar, etc - so it would sort of catch everything). Looks good to me! I'll bring this in. Really appreciate your help catching these issues, @Akin909 \ud83d\udc4d  Cool, thanks for the investigation here, @Akin909 ! The fix looks safe to me, and does seem like it would make it more robust.\r\n\r\n> This bug also may also relate to opening the welcome screen although I currently cannot test this as using the screen swallows up input like <space>, <enter> etc. so hard to navigate or run commands once oni is opened with the welcome menu\r\n\r\nAh ya, for sure, this needs to be fixed before I can turn it on by default!\r\n\r\n> The component did catch is essentially a somewhat unrelated suggestion of a point where some fallback UI can be set to render if the editor crashes, but even unimplemented as it is any errors in the NeovimSurface will get caught there and Oni at least will remain open\r\n\r\nThis is a good idea - I was thinking it might make sense to add it to `<WindowSplitHost />` which is the container for all the splits (including editor splits, explorer, sidebar, etc - so it would sort of catch everything). Looks good to me! I'll bring this in. Really appreciate your help catching these issues, @Akin909 \ud83d\udc4d  > fixes #1386 tried locally and it's really cool gives linting and diagnostics \ud83d\udc4d\r\n\r\nWoohoo! Glad this is fixed now, that's great. Thanks @Akin909 !\r\n\r\n> Looking at the vscode-reasonml plugin there's soo much awesome stuff this and other lsps are capable of really exciting like code splitting etc \u2728\r\n\r\nNice!! Can't wait to integrate with that. Code splitting would be amazing to have - I often find myself getting to a huge file and then needing to break it apart, and it's mostly a manual process. Would be great to have refactoring available for that. > fixes #1386 tried locally and it's really cool gives linting and diagnostics \ud83d\udc4d\r\n\r\nWoohoo! Glad this is fixed now, that's great. Thanks @Akin909 !\r\n\r\n> Looking at the vscode-reasonml plugin there's soo much awesome stuff this and other lsps are capable of really exciting like code splitting etc \u2728\r\n\r\nNice!! Can't wait to integrate with that. Code splitting would be amazing to have - I often find myself getting to a huge file and then needing to break it apart, and it's mostly a manual process. Would be great to have refactoring available for that. Wow, that was fast! \ud83d\udc4d Very nice \ud83d\ude04 Change looks great overall - just had a question about the timing of when we `auto-detect`. Awesome! Works great. Thanks @Akin909 - this will make it much easier to get started with the explorer / search features. Wow, that was fast! \ud83d\udc4d Very nice \ud83d\ude04 Change looks great overall - just had a question about the timing of when we `auto-detect`. Awesome! Works great. Thanks @Akin909 - this will make it much easier to get started with the explorer / search features. Change looks good to me, @Akin909 ! Thanks again for finding / fixing this. Bringing it in now. > return early except I notice that to close the folder you explicitly pass null to the function so not sure if its best to emulate that (which is what I've currently done).\r\n\r\nThis behavior seems reasonable to me. I'm working on some \"empty experience\" UX (like, what to show in the explorer sidebar if there is no active folder) - having it explicitly set to null when there is no workspace available will help with those features. Change looks good to me, @Akin909 ! Thanks again for finding / fixing this. Bringing it in now. > return early except I notice that to close the folder you explicitly pass null to the function so not sure if its best to emulate that (which is what I've currently done).\r\n\r\nThis behavior seems reasonable to me. I'm working on some \"empty experience\" UX (like, what to show in the explorer sidebar if there is no active folder) - having it explicitly set to null when there is no workspace available will help with those features. Awesome, thanks for fixing this @Akin909 !\r\n\r\nThe characters in the quick info do look strange... Not sure where the bug is, but it seems like the `ocaml-language-server` is basically passing the call through to `merlin`: https://github.com/freebroccolo/ocaml-language-server/blob/8f69e63bd26d26505f77498c6dc2dea037527c50/src/bin/server/command/getDocumentation.ts#L12 - so it might be that merlin is sending us those.\r\n\r\nBringing this in now. Looking forward to trying to run our Reason test again - this might fix it \ud83d\udc4d \r\n\r\n Awesome, thanks for fixing this @Akin909 !\r\n\r\nThe characters in the quick info do look strange... Not sure where the bug is, but it seems like the `ocaml-language-server` is basically passing the call through to `merlin`: https://github.com/freebroccolo/ocaml-language-server/blob/8f69e63bd26d26505f77498c6dc2dea037527c50/src/bin/server/command/getDocumentation.ts#L12 - so it might be that merlin is sending us those.\r\n\r\nBringing this in now. Looking forward to trying to run our Reason test again - this might fix it \ud83d\udc4d \r\n\r\n Awesome, thanks for fixing this @Akin909 !\r\n\r\nThe characters in the quick info do look strange... Not sure where the bug is, but it seems like the `ocaml-language-server` is basically passing the call through to `merlin`: https://github.com/freebroccolo/ocaml-language-server/blob/8f69e63bd26d26505f77498c6dc2dea037527c50/src/bin/server/command/getDocumentation.ts#L12 - so it might be that merlin is sending us those.\r\n\r\nBringing this in now. Looking forward to trying to run our Reason test again - this might fix it \ud83d\udc4d \r\n\r\n - Run `prettier` on all files in the repo, to minimize changes for incoming PRs\r\n\r\n@Akin909 , I noticed that `prettier` moves the `tslint:disable-line` comments to a different line:\r\n```\r\n+            this._resizeObserver = new window[\"ResizeObserver\"]((entries: any) => {\r\n+                // tslint:disable-line no-string-literal\r\n```\r\n\r\nWhich causes the lint checks to fail:\r\n```\r\nERROR: E:/oni/browser/src/Redux/createStore.ts[33, 22]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/neovim/Session.ts[114, 9]: Unnecessary semicolon\r\nERROR: E:/oni/browser/src/neovim/Session.ts[114, 10]: missing whitespace\r\nERROR: E:/oni/browser/src/neovim/Session.ts[115, 10]: missing whitespace\r\nERROR: E:/oni/browser/src/Renderer/CanvasRenderer.ts[274, 30]: members are not aligned\r\nERROR: E:/oni/browser/src/Services/Themes/ThemeManager.ts[157, 9]: Expected property shorthand in object literal ('{foreground}').\r\nERROR: E:/oni/browser/src/Input/Keyboard/KeyboardLayout.ts[22, 16]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Services/InputManager.ts[86, 9]: Expected a 'for-of' loop instead of a 'for' loop with this simple iteration\r\nERROR: E:/oni/browser/src/UI/components/StatusResize.tsx[66, 36]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/UI/Shell/Shell.tsx[77, 12]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/UI/components/CursorPositioner.tsx[89, 47]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Editor/NeovimEditor/NeovimRenderer.tsx[32, 47]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Services/Recorder.ts[49, 31]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Services/Recorder.ts[42, 13]: Expected a 'for-of' loop instead of a 'for' loop with this simple iteration\r\nERROR: E:/oni/browser/src/Plugins/PackageMetadataParser.ts[57, 48]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Services/BrowserWindowConfigurationSynchronizer.ts[29, 14]: statements are not aligned\r\nERROR: E:/oni/browser/src/Services/BrowserWindowConfigurationSynchronizer.ts[29, 14]: missing whitespace\r\n```\r\n\r\nDo you have a suggestion on how to handle this? Any config setting for prettier or something? We can also turn off these rules in `tslint`. Let me know what you think.\r\n\r\n(I temporarily turned off the `npm run prepush` check in this PR to get this out \ud83d\ude04 ) Looks like maybe `tslint:disable-next-line` might be an option? https://palantir.github.io/tslint/usage/rule-flags/ > I think the best way around that would be to use next line rule\r\n\r\nSounds good, looks it worked \ud83d\udc4d  Thanks @Akin909 ! This refactors and expands our existing split management story in Oni - this is about managing splits, like navigating between the dock/editor, or even multiple neovim editors. It allows for some interesting scenarios, like Oni can behave as a 'neovim multiplexer.'\r\n\r\n Sweet, thanks for splitting this out @Akin909 ! Bringing this in now- Since everything will be 'prettified' now, hopefully that will minimize merge conflicts now. - Run `prettier` on all files in the repo, to minimize changes for incoming PRs\r\n\r\n@Akin909 , I noticed that `prettier` moves the `tslint:disable-line` comments to a different line:\r\n```\r\n+            this._resizeObserver = new window[\"ResizeObserver\"]((entries: any) => {\r\n+                // tslint:disable-line no-string-literal\r\n```\r\n\r\nWhich causes the lint checks to fail:\r\n```\r\nERROR: E:/oni/browser/src/Redux/createStore.ts[33, 22]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/neovim/Session.ts[114, 9]: Unnecessary semicolon\r\nERROR: E:/oni/browser/src/neovim/Session.ts[114, 10]: missing whitespace\r\nERROR: E:/oni/browser/src/neovim/Session.ts[115, 10]: missing whitespace\r\nERROR: E:/oni/browser/src/Renderer/CanvasRenderer.ts[274, 30]: members are not aligned\r\nERROR: E:/oni/browser/src/Services/Themes/ThemeManager.ts[157, 9]: Expected property shorthand in object literal ('{foreground}').\r\nERROR: E:/oni/browser/src/Input/Keyboard/KeyboardLayout.ts[22, 16]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Services/InputManager.ts[86, 9]: Expected a 'for-of' loop instead of a 'for' loop with this simple iteration\r\nERROR: E:/oni/browser/src/UI/components/StatusResize.tsx[66, 36]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/UI/Shell/Shell.tsx[77, 12]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/UI/components/CursorPositioner.tsx[89, 47]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Editor/NeovimEditor/NeovimRenderer.tsx[32, 47]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Services/Recorder.ts[49, 31]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Services/Recorder.ts[42, 13]: Expected a 'for-of' loop instead of a 'for' loop with this simple iteration\r\nERROR: E:/oni/browser/src/Plugins/PackageMetadataParser.ts[57, 48]: object access via string literals is disallowed\r\nERROR: E:/oni/browser/src/Services/BrowserWindowConfigurationSynchronizer.ts[29, 14]: statements are not aligned\r\nERROR: E:/oni/browser/src/Services/BrowserWindowConfigurationSynchronizer.ts[29, 14]: missing whitespace\r\n```\r\n\r\nDo you have a suggestion on how to handle this? Any config setting for prettier or something? We can also turn off these rules in `tslint`. Let me know what you think.\r\n\r\n(I temporarily turned off the `npm run prepush` check in this PR to get this out \ud83d\ude04 ) Looks like maybe `tslint:disable-next-line` might be an option? https://palantir.github.io/tslint/usage/rule-flags/ > I think the best way around that would be to use next line rule\r\n\r\nSounds good, looks it worked \ud83d\udc4d  Thanks @Akin909 ! - Use the in-proc automation framework (which has access to Oni's APIs) to automate the website's video  Thanks @keforbes ! Ya, it'll be nice to have it scripted - it's a pain to create it manually... and good motivation to streamline and improve the UX, in order to see that demo video get better with each release. - Point to `onivim/oni` instead of `bryphe/oni` Nice, thanks for adding this @keforbes ! Looks much better now. __Issue:__ Previous fixes replaced several cases where we were using `px` instead of `em` (which cause problem in HDPI displays). However, the actual height of the statusbar was still using `px`, so even though the font height was fixed, the status bar height wasn't.\r\n\r\n__Fix:__ Replace the `28px` with an `em` value. Fixes #713  @hoschi , thanks \ud83d\ude04 That one was relatively straightforward and had been on my backlog anyway.... so figured it was time to go in. Appreciate you logging the issue! I'm good to bring this in - as you mentioned I don't want it to get lost in a sea of merge conflicts. Thanks for bringing it up-to-date @Akin909 , and thanks @samvv and @Bretley for your work on this! I'll bring this in now and merge #1175 with it tomorrow. > Sorry I've been AWOL since finals and visiting family, things have gotten busy as there's been an unexpected death recently in my family.\r\n\r\nSorry to hear that \ud83d\ude26 Hope everything is okay! \r\n\r\n>  I've got no objections to you fixing my initial work up; I'm not going to continue it. Keep up the great work folks\r\nThanks for getting us started w/ this! @saibing @Contextualist - thank you both for the _very_ detailed investigation and notes! Was a huge help and made it very easy for me to get up to speed. (As an aside, the completion functionality is really cool, I didn't know that was available now!)\r\n\r\n> By the way, @bryphe , to what extent and when would you like to implement these optional params? Just curious.\r\n\r\n@Contextualist - ideally these parameter should be up-to-date and accurate - at least for the functionality Oni provides. I took a pass and corrected them, and validated that other language servers still work with the new options.  Opened #1185 to correct this - let me know if it addresses the issue for you. Thanks @Contextualist and @saibing for your help and investigation here! Thanks for all the help here, @samvv (and all your work too, @Bretley ) ! I just tried out the pull and it looks so cool... I can't wait for this to make it in \ud83d\udc4d \r\n\r\nOne interesting thing here today is that Oni really has two 'command' experiences:\r\n- The _command palette_ - accessible via `Control+Shift+P`/`Meta+Shift+P` - this is more akin to the command menu in Atom/VSCode/Sublime Text/etc - it's different from `:` ex mode in that it's mostly oni-specific commands. This is Oni only, and exposes some options that don't make sense at all in neovim (like `Open DevTools`).\r\n- The _command line / wildmenu integration_ - which is the externalized `:` ex mode.\r\n\r\nLong-term, it might make sense to combine them in some way - it's nice if there is a unified model. Part of the challenge is balancing the idea of bringing new users to vim (who come from Atom/Sublime/VSCode, and aren't familiar with the command line/ex mode), and also giving power-vim-users the same functionality they expect. But from that perspective, maybe it's okay to have a split - let the new users get their feet wet with the command palette, and let the veteran vimmers have the cmdline (with an improved UX!).\r\n\r\nWhen I was thinking about the keybindings in the quote above - I was thinking more in terms of the _command palette_ - I figured that's the first place a new user would go (and hopefully we can prompt them to get there w/ a better start screen experience!):\r\n![image](https://user-images.githubusercontent.com/13532591/34011081-b5b75460-e0c3-11e7-871e-d7cfdf6e560b.png)\r\n\r\nI'm actually not sure how it would work in the externalized `cmdline`/`wildmenu` - one thing we could potentially do is look to see if, as the user is typing, any key is bound to a particular command. For example, if I type `:vsp`, we could check the keymaps via the `nvim_get_keymap` msgpack call - and if there is a mapping associated with that, we could show the keys inline. That might be kind of cool. But I imagine if a user makes it to `:`, they already have at least some familiarity with Vim - so there may be less utility for it, as opposed to the command palette. Let me know what you think! > I actually quite like the idea of having all commands nicely packed in one place, so that when I forget one I can simply look it up (that's why I wanted this so badly). \r\n\r\nCool, yes, if we can figure out a way to consolidate them in a common place, that would be great! I do think that having separate implementations - the command palette and the command line mode externalized - would be quicker to implement, and it would let us make an incremental step in that direction. But combine them up-front in a way that is intuitive, that's great.\r\n\r\n> I actually thought of parsing the :command output so that one can even fuzzy find on command name (Neovim currently does not provide a means to list all available commands via RPC or eval, unfortunately)\r\n\r\nIf we just bring in the static commands, we could potentially generate that offline (and come up with friendly names for some of the commands). We would need to find a way to get `ex` commands generated at runtime.\r\n\r\n> Edit: forgot to mention: that would imply only one pane (the command palette), as you suggested @bryphe\r\n\r\nWould this mean we'd integrate the output from the `ext_cmdline` into the command palette? Or integrate the full set of commands a different way?\r\n > Good question ... I'd say yes, if we really wanted to get a fluent interaction. Will not be as straightforward as it sounds, though ... \r\n\r\nRight, agree with it not being straightforward - the menu might not be able to support the full set of interactions that the `cmdline` expects - like recursive / nested commands, etc. Another caveat (although I could be mistaken) is that the external cmdline wants control of the cursor position - whereas the menu input right now is basically just an uncontrolled input box. So there will be a few things that will need to be thought through.\r\n\r\nThere are two alternatives to combining: one is to surface everything via the command palette, and the other is to surface everything via the cmdline. The challenge with the first approach - everything via the command palette - is we definitely wouldn't have the full support of the capabilities of the existing command line, and we'd have to rationalize things like passing arguments. The challenge with the second approach - everything via the cmdline - is that we'd have to let Vim know about all the handlers that Oni has, and some discoverability is sacrificed (the fuzzy finders usually are verbose in terms of the command name + text, which I'm not sure how we'd replicate in the vim cmdline).\r\n\r\nSo I guess there's 4 options:\r\n- Combine the external cmdline + existing command palette\r\n- Move everything to the existing command palette\r\n- Move everything to the external cmdline\r\n- Implement them separately for now.\r\n\r\n> Did you have something else in mind?\r\n\r\nJust the above options... I lean towards the 4th - implement separately - just because it seems the simplest today, and can satisfy both the novice user and experienced vim user scenarios. However, I am not an expert on the external cmdline and the full set of capabilities there - so  I'm open to exploring any of the possibilities. Interested to see what you come up with! \ud83d\udc4d  Thanks for your thinking around this, @samvv ! > @Bretley @samvv not sure if either of you are still working on this or had any plans as to how to get round this?\r\n\r\nYes, I was wondering the same thing about this! It seems like we might have to render the cursor, like we do for the `NeovimEditor`. But I wasn't sure (maybe we could reuse the `Cursor.tsx` component, but `connect` it to a different store).\r\n\r\n> Happy to leave this be if either of you are still working on it was just thinking to get the simplest implementation working since you've both done all the heavy lifting and then that can be iterated on in the future rather than see the work get buried in a sea of merge conflicts?\r\n\r\nThis is a great idea! We could bring it in behind an `experimental` flag - like `experimental.commandLine.mode` (similiar to how we have `tabs.mode` or `completion.mode` for other externalized features) - off by default. This will help us stay afloat over a sea of merge conflicts, and make it easier to get further contributions. \ud83d\udcaf It would be a bummer to not be able to merge this! \r\n I'll close this out, since there is a lot of progress in #1191! We can open a new PR for any additional functionality. Thanks all for the contributions here! Thanks for all the help here, @samvv (and all your work too, @Bretley ) ! I just tried out the pull and it looks so cool... I can't wait for this to make it in \ud83d\udc4d \r\n\r\nOne interesting thing here today is that Oni really has two 'command' experiences:\r\n- The _command palette_ - accessible via `Control+Shift+P`/`Meta+Shift+P` - this is more akin to the command menu in Atom/VSCode/Sublime Text/etc - it's different from `:` ex mode in that it's mostly oni-specific commands. This is Oni only, and exposes some options that don't make sense at all in neovim (like `Open DevTools`).\r\n- The _command line / wildmenu integration_ - which is the externalized `:` ex mode.\r\n\r\nLong-term, it might make sense to combine them in some way - it's nice if there is a unified model. Part of the challenge is balancing the idea of bringing new users to vim (who come from Atom/Sublime/VSCode, and aren't familiar with the command line/ex mode), and also giving power-vim-users the same functionality they expect. But from that perspective, maybe it's okay to have a split - let the new users get their feet wet with the command palette, and let the veteran vimmers have the cmdline (with an improved UX!).\r\n\r\nWhen I was thinking about the keybindings in the quote above - I was thinking more in terms of the _command palette_ - I figured that's the first place a new user would go (and hopefully we can prompt them to get there w/ a better start screen experience!):\r\n![image](https://user-images.githubusercontent.com/13532591/34011081-b5b75460-e0c3-11e7-871e-d7cfdf6e560b.png)\r\n\r\nI'm actually not sure how it would work in the externalized `cmdline`/`wildmenu` - one thing we could potentially do is look to see if, as the user is typing, any key is bound to a particular command. For example, if I type `:vsp`, we could check the keymaps via the `nvim_get_keymap` msgpack call - and if there is a mapping associated with that, we could show the keys inline. That might be kind of cool. But I imagine if a user makes it to `:`, they already have at least some familiarity with Vim - so there may be less utility for it, as opposed to the command palette. Let me know what you think! > I actually quite like the idea of having all commands nicely packed in one place, so that when I forget one I can simply look it up (that's why I wanted this so badly). \r\n\r\nCool, yes, if we can figure out a way to consolidate them in a common place, that would be great! I do think that having separate implementations - the command palette and the command line mode externalized - would be quicker to implement, and it would let us make an incremental step in that direction. But combine them up-front in a way that is intuitive, that's great.\r\n\r\n> I actually thought of parsing the :command output so that one can even fuzzy find on command name (Neovim currently does not provide a means to list all available commands via RPC or eval, unfortunately)\r\n\r\nIf we just bring in the static commands, we could potentially generate that offline (and come up with friendly names for some of the commands). We would need to find a way to get `ex` commands generated at runtime.\r\n\r\n> Edit: forgot to mention: that would imply only one pane (the command palette), as you suggested @bryphe\r\n\r\nWould this mean we'd integrate the output from the `ext_cmdline` into the command palette? Or integrate the full set of commands a different way?\r\n > Good question ... I'd say yes, if we really wanted to get a fluent interaction. Will not be as straightforward as it sounds, though ... \r\n\r\nRight, agree with it not being straightforward - the menu might not be able to support the full set of interactions that the `cmdline` expects - like recursive / nested commands, etc. Another caveat (although I could be mistaken) is that the external cmdline wants control of the cursor position - whereas the menu input right now is basically just an uncontrolled input box. So there will be a few things that will need to be thought through.\r\n\r\nThere are two alternatives to combining: one is to surface everything via the command palette, and the other is to surface everything via the cmdline. The challenge with the first approach - everything via the command palette - is we definitely wouldn't have the full support of the capabilities of the existing command line, and we'd have to rationalize things like passing arguments. The challenge with the second approach - everything via the cmdline - is that we'd have to let Vim know about all the handlers that Oni has, and some discoverability is sacrificed (the fuzzy finders usually are verbose in terms of the command name + text, which I'm not sure how we'd replicate in the vim cmdline).\r\n\r\nSo I guess there's 4 options:\r\n- Combine the external cmdline + existing command palette\r\n- Move everything to the existing command palette\r\n- Move everything to the external cmdline\r\n- Implement them separately for now.\r\n\r\n> Did you have something else in mind?\r\n\r\nJust the above options... I lean towards the 4th - implement separately - just because it seems the simplest today, and can satisfy both the novice user and experienced vim user scenarios. However, I am not an expert on the external cmdline and the full set of capabilities there - so  I'm open to exploring any of the possibilities. Interested to see what you come up with! \ud83d\udc4d  Thanks for your thinking around this, @samvv ! > @Bretley @samvv not sure if either of you are still working on this or had any plans as to how to get round this?\r\n\r\nYes, I was wondering the same thing about this! It seems like we might have to render the cursor, like we do for the `NeovimEditor`. But I wasn't sure (maybe we could reuse the `Cursor.tsx` component, but `connect` it to a different store).\r\n\r\n> Happy to leave this be if either of you are still working on it was just thinking to get the simplest implementation working since you've both done all the heavy lifting and then that can be iterated on in the future rather than see the work get buried in a sea of merge conflicts?\r\n\r\nThis is a great idea! We could bring it in behind an `experimental` flag - like `experimental.commandLine.mode` (similiar to how we have `tabs.mode` or `completion.mode` for other externalized features) - off by default. This will help us stay afloat over a sea of merge conflicts, and make it easier to get further contributions. \ud83d\udcaf It would be a bummer to not be able to merge this! \r\n I'll close this out, since there is a lot of progress in #1191! We can open a new PR for any additional functionality. Thanks all for the contributions here! Thanks for all the help here, @samvv (and all your work too, @Bretley ) ! I just tried out the pull and it looks so cool... I can't wait for this to make it in \ud83d\udc4d \r\n\r\nOne interesting thing here today is that Oni really has two 'command' experiences:\r\n- The _command palette_ - accessible via `Control+Shift+P`/`Meta+Shift+P` - this is more akin to the command menu in Atom/VSCode/Sublime Text/etc - it's different from `:` ex mode in that it's mostly oni-specific commands. This is Oni only, and exposes some options that don't make sense at all in neovim (like `Open DevTools`).\r\n- The _command line / wildmenu integration_ - which is the externalized `:` ex mode.\r\n\r\nLong-term, it might make sense to combine them in some way - it's nice if there is a unified model. Part of the challenge is balancing the idea of bringing new users to vim (who come from Atom/Sublime/VSCode, and aren't familiar with the command line/ex mode), and also giving power-vim-users the same functionality they expect. But from that perspective, maybe it's okay to have a split - let the new users get their feet wet with the command palette, and let the veteran vimmers have the cmdline (with an improved UX!).\r\n\r\nWhen I was thinking about the keybindings in the quote above - I was thinking more in terms of the _command palette_ - I figured that's the first place a new user would go (and hopefully we can prompt them to get there w/ a better start screen experience!):\r\n![image](https://user-images.githubusercontent.com/13532591/34011081-b5b75460-e0c3-11e7-871e-d7cfdf6e560b.png)\r\n\r\nI'm actually not sure how it would work in the externalized `cmdline`/`wildmenu` - one thing we could potentially do is look to see if, as the user is typing, any key is bound to a particular command. For example, if I type `:vsp`, we could check the keymaps via the `nvim_get_keymap` msgpack call - and if there is a mapping associated with that, we could show the keys inline. That might be kind of cool. But I imagine if a user makes it to `:`, they already have at least some familiarity with Vim - so there may be less utility for it, as opposed to the command palette. Let me know what you think! > I actually quite like the idea of having all commands nicely packed in one place, so that when I forget one I can simply look it up (that's why I wanted this so badly). \r\n\r\nCool, yes, if we can figure out a way to consolidate them in a common place, that would be great! I do think that having separate implementations - the command palette and the command line mode externalized - would be quicker to implement, and it would let us make an incremental step in that direction. But combine them up-front in a way that is intuitive, that's great.\r\n\r\n> I actually thought of parsing the :command output so that one can even fuzzy find on command name (Neovim currently does not provide a means to list all available commands via RPC or eval, unfortunately)\r\n\r\nIf we just bring in the static commands, we could potentially generate that offline (and come up with friendly names for some of the commands). We would need to find a way to get `ex` commands generated at runtime.\r\n\r\n> Edit: forgot to mention: that would imply only one pane (the command palette), as you suggested @bryphe\r\n\r\nWould this mean we'd integrate the output from the `ext_cmdline` into the command palette? Or integrate the full set of commands a different way?\r\n > Good question ... I'd say yes, if we really wanted to get a fluent interaction. Will not be as straightforward as it sounds, though ... \r\n\r\nRight, agree with it not being straightforward - the menu might not be able to support the full set of interactions that the `cmdline` expects - like recursive / nested commands, etc. Another caveat (although I could be mistaken) is that the external cmdline wants control of the cursor position - whereas the menu input right now is basically just an uncontrolled input box. So there will be a few things that will need to be thought through.\r\n\r\nThere are two alternatives to combining: one is to surface everything via the command palette, and the other is to surface everything via the cmdline. The challenge with the first approach - everything via the command palette - is we definitely wouldn't have the full support of the capabilities of the existing command line, and we'd have to rationalize things like passing arguments. The challenge with the second approach - everything via the cmdline - is that we'd have to let Vim know about all the handlers that Oni has, and some discoverability is sacrificed (the fuzzy finders usually are verbose in terms of the command name + text, which I'm not sure how we'd replicate in the vim cmdline).\r\n\r\nSo I guess there's 4 options:\r\n- Combine the external cmdline + existing command palette\r\n- Move everything to the existing command palette\r\n- Move everything to the external cmdline\r\n- Implement them separately for now.\r\n\r\n> Did you have something else in mind?\r\n\r\nJust the above options... I lean towards the 4th - implement separately - just because it seems the simplest today, and can satisfy both the novice user and experienced vim user scenarios. However, I am not an expert on the external cmdline and the full set of capabilities there - so  I'm open to exploring any of the possibilities. Interested to see what you come up with! \ud83d\udc4d  Thanks for your thinking around this, @samvv ! > @Bretley @samvv not sure if either of you are still working on this or had any plans as to how to get round this?\r\n\r\nYes, I was wondering the same thing about this! It seems like we might have to render the cursor, like we do for the `NeovimEditor`. But I wasn't sure (maybe we could reuse the `Cursor.tsx` component, but `connect` it to a different store).\r\n\r\n> Happy to leave this be if either of you are still working on it was just thinking to get the simplest implementation working since you've both done all the heavy lifting and then that can be iterated on in the future rather than see the work get buried in a sea of merge conflicts?\r\n\r\nThis is a great idea! We could bring it in behind an `experimental` flag - like `experimental.commandLine.mode` (similiar to how we have `tabs.mode` or `completion.mode` for other externalized features) - off by default. This will help us stay afloat over a sea of merge conflicts, and make it easier to get further contributions. \ud83d\udcaf It would be a bummer to not be able to merge this! \r\n I'll close this out, since there is a lot of progress in #1191! We can open a new PR for any additional functionality. Thanks all for the contributions here! Wow, excellent progress @Bretley ! Looking really cool from the gif.\r\n\r\nAnd the code changes look great so far. I like the way you wired everything up - looks like you have a good handle on React + Redux \ud83d\ude09 Left a few minor comments.\r\n\r\nI saw the cases for `wildmenu_show`, `wildmenu_select`, and `wildmenu_hide` - are you planning on including the wildmenu externalization in this change too? I'm okay either way. Cool, nice summary @Bretley !\r\n\r\nInitially, I think it makes sense to keep the command line separate (implementation-wise) from the quick open / command palette menu. There's two 'classes' of users I want to appeal to - Vim veterans who expect/know the command line, and new users who want to get start with modal editing - may be more comfortable in the quick open/command palette. Keeping that distinction now can satisfy both 'classes' of users, and then we can look towards ways to reconcile them later, if it makes sense.\r\n\r\nI do like the way you've structured the UI right now - having the command line pop in an overlay is really nice! Good point about the search, though. I wonder if, in that case, we could put it in the corner - sort of like how in Chrome it pops up in the corner?\r\n\r\nRegarding the wildmenu, if we use the UI-overlay like you've structured it, we could make the look and feel similiar to the quick open / command palette menu (even if the implementation is different) - I think it would help both classes of our users (for the vim veteran, getting adjusted to some of the new UX paradigms in Oni, and for the new user, it won't feel that different / scary from quick open or command palette).\r\n\r\nHope that helps and wasn't too vague... Great work so far! I'll close this out since we have #1177 and #1179 in now Wow, excellent progress @Bretley ! Looking really cool from the gif.\r\n\r\nAnd the code changes look great so far. I like the way you wired everything up - looks like you have a good handle on React + Redux \ud83d\ude09 Left a few minor comments.\r\n\r\nI saw the cases for `wildmenu_show`, `wildmenu_select`, and `wildmenu_hide` - are you planning on including the wildmenu externalization in this change too? I'm okay either way. Cool, nice summary @Bretley !\r\n\r\nInitially, I think it makes sense to keep the command line separate (implementation-wise) from the quick open / command palette menu. There's two 'classes' of users I want to appeal to - Vim veterans who expect/know the command line, and new users who want to get start with modal editing - may be more comfortable in the quick open/command palette. Keeping that distinction now can satisfy both 'classes' of users, and then we can look towards ways to reconcile them later, if it makes sense.\r\n\r\nI do like the way you've structured the UI right now - having the command line pop in an overlay is really nice! Good point about the search, though. I wonder if, in that case, we could put it in the corner - sort of like how in Chrome it pops up in the corner?\r\n\r\nRegarding the wildmenu, if we use the UI-overlay like you've structured it, we could make the look and feel similiar to the quick open / command palette menu (even if the implementation is different) - I think it would help both classes of our users (for the vim veteran, getting adjusted to some of the new UX paradigms in Oni, and for the new user, it won't feel that different / scary from quick open or command palette).\r\n\r\nHope that helps and wasn't too vague... Great work so far! I'll close this out since we have #1177 and #1179 in now Wow, excellent progress @Bretley ! Looking really cool from the gif.\r\n\r\nAnd the code changes look great so far. I like the way you wired everything up - looks like you have a good handle on React + Redux \ud83d\ude09 Left a few minor comments.\r\n\r\nI saw the cases for `wildmenu_show`, `wildmenu_select`, and `wildmenu_hide` - are you planning on including the wildmenu externalization in this change too? I'm okay either way. Cool, nice summary @Bretley !\r\n\r\nInitially, I think it makes sense to keep the command line separate (implementation-wise) from the quick open / command palette menu. There's two 'classes' of users I want to appeal to - Vim veterans who expect/know the command line, and new users who want to get start with modal editing - may be more comfortable in the quick open/command palette. Keeping that distinction now can satisfy both 'classes' of users, and then we can look towards ways to reconcile them later, if it makes sense.\r\n\r\nI do like the way you've structured the UI right now - having the command line pop in an overlay is really nice! Good point about the search, though. I wonder if, in that case, we could put it in the corner - sort of like how in Chrome it pops up in the corner?\r\n\r\nRegarding the wildmenu, if we use the UI-overlay like you've structured it, we could make the look and feel similiar to the quick open / command palette menu (even if the implementation is different) - I think it would help both classes of our users (for the vim veteran, getting adjusted to some of the new UX paradigms in Oni, and for the new user, it won't feel that different / scary from quick open or command palette).\r\n\r\nHope that helps and wasn't too vague... Great work so far! I'll close this out since we have #1177 and #1179 in now Wow, excellent progress @Bretley ! Looking really cool from the gif.\r\n\r\nAnd the code changes look great so far. I like the way you wired everything up - looks like you have a good handle on React + Redux \ud83d\ude09 Left a few minor comments.\r\n\r\nI saw the cases for `wildmenu_show`, `wildmenu_select`, and `wildmenu_hide` - are you planning on including the wildmenu externalization in this change too? I'm okay either way. Cool, nice summary @Bretley !\r\n\r\nInitially, I think it makes sense to keep the command line separate (implementation-wise) from the quick open / command palette menu. There's two 'classes' of users I want to appeal to - Vim veterans who expect/know the command line, and new users who want to get start with modal editing - may be more comfortable in the quick open/command palette. Keeping that distinction now can satisfy both 'classes' of users, and then we can look towards ways to reconcile them later, if it makes sense.\r\n\r\nI do like the way you've structured the UI right now - having the command line pop in an overlay is really nice! Good point about the search, though. I wonder if, in that case, we could put it in the corner - sort of like how in Chrome it pops up in the corner?\r\n\r\nRegarding the wildmenu, if we use the UI-overlay like you've structured it, we could make the look and feel similiar to the quick open / command palette menu (even if the implementation is different) - I think it would help both classes of our users (for the vim veteran, getting adjusted to some of the new UX paradigms in Oni, and for the new user, it won't feel that different / scary from quick open or command palette).\r\n\r\nHope that helps and wasn't too vague... Great work so far! I'll close this out since we have #1177 and #1179 in now  Sweet, thanks for taking a look at this @Bretley ! Would be great to have help.\r\n\r\nYour checklist looks good to me - here are some of my thoughts:\r\n\r\n- Set up switch cases - seems like a great starting point! Pushing out the events in the `_handleNotification` method - similiar to how we handle the `popupmenu_select`/`popupmenu_hide`/`popupmenu_show` notifications - we'd want to start handling the cmdline and wildmenu notifications, and `dispatch` them via the events defined in the PR. That will give us a nice, strongly-typed interface to build on.\r\n\r\nRegarding the state / action / reducer - if you're not familiar with [Redux](https://redux.js.org/) and [React](https://reactjs.org/docs/hello-world.html), it's worth checking out those docs... This write-up - [Thinking in React](https://reactjs.org/docs/thinking-in-react.html) is helpful too!\r\n\r\nI usually start by defining the __state__ - what is the data model we need? Luckily, for a lot of the neovim-externalization features, I think it maps pretty closely to the interfaces they send us via the `msgpack-rpc` protocol.\r\n\r\nOnce we have the __state__ figured out, we can do two things:\r\n- Figure out how to render our UI, based on the __state__. A helpful way to start is just making a hard-coded state, and get it showing in the UI. Once you have that, it's just about connecting the 'live' state! You could put this hardcoded component in `browser\\src\\UI\\RootComponent` for now (near the `<MenuContainer />`, so you could quickly see it live).\r\n- Figure out how the state can change - this is the responsibility of the __actions__ and __reducers__ - these define what changes can be made, and then the result of those actions. We'd likely at least need ones that map to the notifications from Neovim - a show action, a hide action, and a setCursorPosition. I'm not sure exactly how the text updates, but we might need an action for that too.\r\n\r\nI hope that helps at least give some ideas... thanks for your help! Let me know if you have other questions as you get going. Oh ya, there's weird scoping rules in JavaScript for this - the `case` statements actually aren't their own scope, so it thinks you're trying to redeclare the same variable.\r\n\r\nYou can avoid this by creating a scope like:\r\n```\r\n      case \"cmdline_show\":\r\n     {\r\n                    const [content, pos, firstc, prompt, indent, level] = a[0]\r\n                    const commandLineShowInfo: INeovimCommandLineShowEvent = {\r\n                        content,\r\n                        pos,\r\n                        firstc,\r\n                        prompt,\r\n                        indent,\r\n                        level,\r\n                    }\r\n                    this._onCommandLineShowEvent.dispatch(commandLineShowInfo)\r\n                    break\r\n   }\r\n```\r\n(sorry for the bad formatting, hopefully that gives you an idea!) > I have an action and a reducer and an actioncreator defined,\r\n\r\nCool, sounds like great progress!\r\n\r\n> But I'm not sure how to get from neovimInstance.ts to actually changing the state. I see a lot of things calling dispatch, but I'm not sure what rabbit hole that goes down if that makes any sense.\r\n\r\nAh ya... the brute force way is to create the action via the action creator, and then pass to the UI store's `dispatch` method.\r\n\r\nHowever, we use a utility called `bindActionCreators` that takes all of the ActionCreators and 'binds' them to the dispatch method for us, and gives us a new method that takes care of that - that's over here:\r\nhttps://github.com/onivim/oni/blob/e8bdda46f2d079929fee9154b245a3d8a4743bc8/browser/src/UI/index.tsx#L39\r\n\r\n(more info on `bindActionCreators` here: https://redux.js.org/docs/api/bindActionCreators.html)\r\n\r\nFrom there, we can call any of them via `UI.Actions`, like here:\r\nhttps://github.com/onivim/oni/blob/e8bdda46f2d079929fee9154b245a3d8a4743bc8/browser/src/Editor/NeovimEditor.tsx#L158\r\n\r\nThe pattern we usually have is subscribing to an event from NeovimInstance, so that the NeovimInstance object itself doesn't have to care about the UI - but NeovimEditor is the one that does all the UI stuff. Hope that helps! I'll close this out since @Bretley and @samvv both have better versions \ud83d\ude04   Sweet, thanks for taking a look at this @Bretley ! Would be great to have help.\r\n\r\nYour checklist looks good to me - here are some of my thoughts:\r\n\r\n- Set up switch cases - seems like a great starting point! Pushing out the events in the `_handleNotification` method - similiar to how we handle the `popupmenu_select`/`popupmenu_hide`/`popupmenu_show` notifications - we'd want to start handling the cmdline and wildmenu notifications, and `dispatch` them via the events defined in the PR. That will give us a nice, strongly-typed interface to build on.\r\n\r\nRegarding the state / action / reducer - if you're not familiar with [Redux](https://redux.js.org/) and [React](https://reactjs.org/docs/hello-world.html), it's worth checking out those docs... This write-up - [Thinking in React](https://reactjs.org/docs/thinking-in-react.html) is helpful too!\r\n\r\nI usually start by defining the __state__ - what is the data model we need? Luckily, for a lot of the neovim-externalization features, I think it maps pretty closely to the interfaces they send us via the `msgpack-rpc` protocol.\r\n\r\nOnce we have the __state__ figured out, we can do two things:\r\n- Figure out how to render our UI, based on the __state__. A helpful way to start is just making a hard-coded state, and get it showing in the UI. Once you have that, it's just about connecting the 'live' state! You could put this hardcoded component in `browser\\src\\UI\\RootComponent` for now (near the `<MenuContainer />`, so you could quickly see it live).\r\n- Figure out how the state can change - this is the responsibility of the __actions__ and __reducers__ - these define what changes can be made, and then the result of those actions. We'd likely at least need ones that map to the notifications from Neovim - a show action, a hide action, and a setCursorPosition. I'm not sure exactly how the text updates, but we might need an action for that too.\r\n\r\nI hope that helps at least give some ideas... thanks for your help! Let me know if you have other questions as you get going. Oh ya, there's weird scoping rules in JavaScript for this - the `case` statements actually aren't their own scope, so it thinks you're trying to redeclare the same variable.\r\n\r\nYou can avoid this by creating a scope like:\r\n```\r\n      case \"cmdline_show\":\r\n     {\r\n                    const [content, pos, firstc, prompt, indent, level] = a[0]\r\n                    const commandLineShowInfo: INeovimCommandLineShowEvent = {\r\n                        content,\r\n                        pos,\r\n                        firstc,\r\n                        prompt,\r\n                        indent,\r\n                        level,\r\n                    }\r\n                    this._onCommandLineShowEvent.dispatch(commandLineShowInfo)\r\n                    break\r\n   }\r\n```\r\n(sorry for the bad formatting, hopefully that gives you an idea!) > I have an action and a reducer and an actioncreator defined,\r\n\r\nCool, sounds like great progress!\r\n\r\n> But I'm not sure how to get from neovimInstance.ts to actually changing the state. I see a lot of things calling dispatch, but I'm not sure what rabbit hole that goes down if that makes any sense.\r\n\r\nAh ya... the brute force way is to create the action via the action creator, and then pass to the UI store's `dispatch` method.\r\n\r\nHowever, we use a utility called `bindActionCreators` that takes all of the ActionCreators and 'binds' them to the dispatch method for us, and gives us a new method that takes care of that - that's over here:\r\nhttps://github.com/onivim/oni/blob/e8bdda46f2d079929fee9154b245a3d8a4743bc8/browser/src/UI/index.tsx#L39\r\n\r\n(more info on `bindActionCreators` here: https://redux.js.org/docs/api/bindActionCreators.html)\r\n\r\nFrom there, we can call any of them via `UI.Actions`, like here:\r\nhttps://github.com/onivim/oni/blob/e8bdda46f2d079929fee9154b245a3d8a4743bc8/browser/src/Editor/NeovimEditor.tsx#L158\r\n\r\nThe pattern we usually have is subscribing to an event from NeovimInstance, so that the NeovimInstance object itself doesn't have to care about the UI - but NeovimEditor is the one that does all the UI stuff. Hope that helps! I'll close this out since @Bretley and @samvv both have better versions \ud83d\ude04  Wow, really cool stuff in the gif! I like the colorscheme switching a lot \ud83d\ude04 \r\n\r\nAnd cool list - it's neat to see the progress indication on the PR.\r\n\r\n>  Make editing shortcuts for ease\r\n\r\nOne thing I was thinking about this - is I think there are going to be a few places in Oni where we will have a 'lightweight' edit experience (like a small textbox). A few scenarios I had in mind for this:\r\n- QuickOpen (obviously)\r\n- Rename experience in the file explorer (press 'F2' or some bound key to trigger a rename, and a small textbox opens over the folder)\r\n- Snippet editing - tracked by #55 \r\n\r\nBut for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (<C-w>, <C-e>, etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings. \r\n\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\n>  Scrollbar... this is going to be fairly complex due to us only using 10 items right now, but... it shouldn't be that bad.\r\n\r\nWe might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nThere were a couple of other things I was thinking top-of-mind too:\r\n- Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n- Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nLooking awesome! Sorry I'm a bit late to the party here!  Was (finally) reading through the comments \ud83d\ude04 \r\n\r\nI really liked this:\r\n> If we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\nSounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an _embedded browser_ in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around  (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities! Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store. @Bretley I think there are a lot of really great ideas in this PR from @cyansprite  (and great discussion too!), so I've been using it as a reference. There are a few things that are top-of-mind for me in the menu space:\r\n- Asynchronous loading + general menu API (I started doing some work on this in #764)\r\n- Using a binary by default (both the default strategies can be replaced by `ripgrep`, so I have that prototyped in #762)\r\n\r\nThe most important gap we have today, though (in my opinion), is the 'first-run' experience - the first time you open Oni up, and open the quick open experience - it's a bit confusing and unintuitive. I like the experience VSCode has, where you can type `?` and see some of the available options - figuring out a way to ease the user in and show them the capabilities in an intuitive way is important here. Having the command prefixes would certainly help a lot. I think there's still some design / thinking we need to do here.\r\n\r\nLong-term, too, I'd like to see if it is possible to consolidate the Oni commands & Vim `ex` commands together too (I think you mentioned this a bit in #776). It'd be nice if users didn't have to think too hard about whether they need to `:` or `<C+S+P>` to get where they need to go \ud83d\ude04 \r\n\r\nIt might be a challenge to bring this PR in as-is giving that the menu API surface is changing, but if there are any parts that interest you that could be split out, I'm definitely open to that! Some ideas for chunks to split out could be the multi-selection (extending the new menu API to handle that), or create the colorscheme chooser - that was a really cool part of this PR too \ud83d\udc4d \r\n\r\nOtherwise, thinking about how we can smooth out that first-open experience would be awesome. Will close this out as it's pretty old, and some of the bits of functionality have migrated to other PRs. Wow, really cool stuff in the gif! I like the colorscheme switching a lot \ud83d\ude04 \r\n\r\nAnd cool list - it's neat to see the progress indication on the PR.\r\n\r\n>  Make editing shortcuts for ease\r\n\r\nOne thing I was thinking about this - is I think there are going to be a few places in Oni where we will have a 'lightweight' edit experience (like a small textbox). A few scenarios I had in mind for this:\r\n- QuickOpen (obviously)\r\n- Rename experience in the file explorer (press 'F2' or some bound key to trigger a rename, and a small textbox opens over the folder)\r\n- Snippet editing - tracked by #55 \r\n\r\nBut for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (<C-w>, <C-e>, etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings. \r\n\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\n>  Scrollbar... this is going to be fairly complex due to us only using 10 items right now, but... it shouldn't be that bad.\r\n\r\nWe might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nThere were a couple of other things I was thinking top-of-mind too:\r\n- Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n- Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nLooking awesome! Sorry I'm a bit late to the party here!  Was (finally) reading through the comments \ud83d\ude04 \r\n\r\nI really liked this:\r\n> If we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\nSounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an _embedded browser_ in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around  (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities! Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store. @Bretley I think there are a lot of really great ideas in this PR from @cyansprite  (and great discussion too!), so I've been using it as a reference. There are a few things that are top-of-mind for me in the menu space:\r\n- Asynchronous loading + general menu API (I started doing some work on this in #764)\r\n- Using a binary by default (both the default strategies can be replaced by `ripgrep`, so I have that prototyped in #762)\r\n\r\nThe most important gap we have today, though (in my opinion), is the 'first-run' experience - the first time you open Oni up, and open the quick open experience - it's a bit confusing and unintuitive. I like the experience VSCode has, where you can type `?` and see some of the available options - figuring out a way to ease the user in and show them the capabilities in an intuitive way is important here. Having the command prefixes would certainly help a lot. I think there's still some design / thinking we need to do here.\r\n\r\nLong-term, too, I'd like to see if it is possible to consolidate the Oni commands & Vim `ex` commands together too (I think you mentioned this a bit in #776). It'd be nice if users didn't have to think too hard about whether they need to `:` or `<C+S+P>` to get where they need to go \ud83d\ude04 \r\n\r\nIt might be a challenge to bring this PR in as-is giving that the menu API surface is changing, but if there are any parts that interest you that could be split out, I'm definitely open to that! Some ideas for chunks to split out could be the multi-selection (extending the new menu API to handle that), or create the colorscheme chooser - that was a really cool part of this PR too \ud83d\udc4d \r\n\r\nOtherwise, thinking about how we can smooth out that first-open experience would be awesome. Will close this out as it's pretty old, and some of the bits of functionality have migrated to other PRs. Wow, really cool stuff in the gif! I like the colorscheme switching a lot \ud83d\ude04 \r\n\r\nAnd cool list - it's neat to see the progress indication on the PR.\r\n\r\n>  Make editing shortcuts for ease\r\n\r\nOne thing I was thinking about this - is I think there are going to be a few places in Oni where we will have a 'lightweight' edit experience (like a small textbox). A few scenarios I had in mind for this:\r\n- QuickOpen (obviously)\r\n- Rename experience in the file explorer (press 'F2' or some bound key to trigger a rename, and a small textbox opens over the folder)\r\n- Snippet editing - tracked by #55 \r\n\r\nBut for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (<C-w>, <C-e>, etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings. \r\n\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\n>  Scrollbar... this is going to be fairly complex due to us only using 10 items right now, but... it shouldn't be that bad.\r\n\r\nWe might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nThere were a couple of other things I was thinking top-of-mind too:\r\n- Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n- Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nLooking awesome! Sorry I'm a bit late to the party here!  Was (finally) reading through the comments \ud83d\ude04 \r\n\r\nI really liked this:\r\n> If we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\nSounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an _embedded browser_ in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around  (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities! Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store. @Bretley I think there are a lot of really great ideas in this PR from @cyansprite  (and great discussion too!), so I've been using it as a reference. There are a few things that are top-of-mind for me in the menu space:\r\n- Asynchronous loading + general menu API (I started doing some work on this in #764)\r\n- Using a binary by default (both the default strategies can be replaced by `ripgrep`, so I have that prototyped in #762)\r\n\r\nThe most important gap we have today, though (in my opinion), is the 'first-run' experience - the first time you open Oni up, and open the quick open experience - it's a bit confusing and unintuitive. I like the experience VSCode has, where you can type `?` and see some of the available options - figuring out a way to ease the user in and show them the capabilities in an intuitive way is important here. Having the command prefixes would certainly help a lot. I think there's still some design / thinking we need to do here.\r\n\r\nLong-term, too, I'd like to see if it is possible to consolidate the Oni commands & Vim `ex` commands together too (I think you mentioned this a bit in #776). It'd be nice if users didn't have to think too hard about whether they need to `:` or `<C+S+P>` to get where they need to go \ud83d\ude04 \r\n\r\nIt might be a challenge to bring this PR in as-is giving that the menu API surface is changing, but if there are any parts that interest you that could be split out, I'm definitely open to that! Some ideas for chunks to split out could be the multi-selection (extending the new menu API to handle that), or create the colorscheme chooser - that was a really cool part of this PR too \ud83d\udc4d \r\n\r\nOtherwise, thinking about how we can smooth out that first-open experience would be awesome. Will close this out as it's pretty old, and some of the bits of functionality have migrated to other PRs. Wow, really cool stuff in the gif! I like the colorscheme switching a lot \ud83d\ude04 \r\n\r\nAnd cool list - it's neat to see the progress indication on the PR.\r\n\r\n>  Make editing shortcuts for ease\r\n\r\nOne thing I was thinking about this - is I think there are going to be a few places in Oni where we will have a 'lightweight' edit experience (like a small textbox). A few scenarios I had in mind for this:\r\n- QuickOpen (obviously)\r\n- Rename experience in the file explorer (press 'F2' or some bound key to trigger a rename, and a small textbox opens over the folder)\r\n- Snippet editing - tracked by #55 \r\n\r\nBut for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (<C-w>, <C-e>, etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings. \r\n\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\n>  Scrollbar... this is going to be fairly complex due to us only using 10 items right now, but... it shouldn't be that bad.\r\n\r\nWe might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nThere were a couple of other things I was thinking top-of-mind too:\r\n- Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n- Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nLooking awesome! Sorry I'm a bit late to the party here!  Was (finally) reading through the comments \ud83d\ude04 \r\n\r\nI really liked this:\r\n> If we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\nSounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an _embedded browser_ in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around  (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities! Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store. @Bretley I think there are a lot of really great ideas in this PR from @cyansprite  (and great discussion too!), so I've been using it as a reference. There are a few things that are top-of-mind for me in the menu space:\r\n- Asynchronous loading + general menu API (I started doing some work on this in #764)\r\n- Using a binary by default (both the default strategies can be replaced by `ripgrep`, so I have that prototyped in #762)\r\n\r\nThe most important gap we have today, though (in my opinion), is the 'first-run' experience - the first time you open Oni up, and open the quick open experience - it's a bit confusing and unintuitive. I like the experience VSCode has, where you can type `?` and see some of the available options - figuring out a way to ease the user in and show them the capabilities in an intuitive way is important here. Having the command prefixes would certainly help a lot. I think there's still some design / thinking we need to do here.\r\n\r\nLong-term, too, I'd like to see if it is possible to consolidate the Oni commands & Vim `ex` commands together too (I think you mentioned this a bit in #776). It'd be nice if users didn't have to think too hard about whether they need to `:` or `<C+S+P>` to get where they need to go \ud83d\ude04 \r\n\r\nIt might be a challenge to bring this PR in as-is giving that the menu API surface is changing, but if there are any parts that interest you that could be split out, I'm definitely open to that! Some ideas for chunks to split out could be the multi-selection (extending the new menu API to handle that), or create the colorscheme chooser - that was a really cool part of this PR too \ud83d\udc4d \r\n\r\nOtherwise, thinking about how we can smooth out that first-open experience would be awesome. Will close this out as it's pretty old, and some of the bits of functionality have migrated to other PRs.",
    "badosu": "I like this change, I think that if we have an editor capable of potentiating the VIM experience and deliver it with quality we'll have a good base on which to build and experiment with new ideas. I know that the buffer list navigation mode is popular among vim users as well, so I think it's good to not remove that. I like this change, I think that if we have an editor capable of potentiating the VIM experience and deliver it with quality we'll have a good base on which to build and experiment with new ideas. I know that the buffer list navigation mode is popular among vim users as well, so I think it's good to not remove that. I like this change, I think that if we have an editor capable of potentiating the VIM experience and deliver it with quality we'll have a good base on which to build and experiment with new ideas. I know that the buffer list navigation mode is popular among vim users as well, so I think it's good to not remove that. Hope we can have a configuration to disable this without the overhead of it's implementation. Ideally optin, but that's something @bryphe has to decide.\r\n\r\nAlthough I think this is a great feature (for some users) it's very obstrusive for the edititing flow. Hope we can have a configuration to disable this without the overhead of it's implementation. Ideally optin, but that's something @bryphe has to decide.\r\n\r\nAlthough I think this is a great feature (for some users) it's very obstrusive for the edititing flow. Hope we can have a configuration to disable this without the overhead of it's implementation. Ideally optin, but that's something @bryphe has to decide.\r\n\r\nAlthough I think this is a great feature (for some users) it's very obstrusive for the edititing flow. Hope we can have a configuration to disable this without the overhead of it's implementation. Ideally optin, but that's something @bryphe has to decide.\r\n\r\nAlthough I think this is a great feature (for some users) it's very obstrusive for the edititing flow.",
    "CrossR": "This looks good too, but think if I accept it you pushing the merge conflict fix will cause the review to become undone, so may as well wait and accept it after that.\r\n\r\nAs an aside, is it worth me creating an issue about the notification size?\r\nThe boxes seem much bigger for me now: \r\n![image](https://user-images.githubusercontent.com/10038688/36673336-5e817ca4-1afa-11e8-832e-aa91506fee15.png)\r\n\r\nLooks like there is some wasted space for me, though I am also not sure if that is because of my monitor res or scaling etc (4K monitor with 150% scaling and Windows isn't so great at scaling so it wouldn't surprise me if it was due to that). ![image](https://user-images.githubusercontent.com/10038688/36695505-6f7e2400-1b39-11e8-9ff7-007fa562ace2.png)\r\n\r\nLooks a lot more reasonable to me! This looks good too, but think if I accept it you pushing the merge conflict fix will cause the review to become undone, so may as well wait and accept it after that.\r\n\r\nAs an aside, is it worth me creating an issue about the notification size?\r\nThe boxes seem much bigger for me now: \r\n![image](https://user-images.githubusercontent.com/10038688/36673336-5e817ca4-1afa-11e8-832e-aa91506fee15.png)\r\n\r\nLooks like there is some wasted space for me, though I am also not sure if that is because of my monitor res or scaling etc (4K monitor with 150% scaling and Windows isn't so great at scaling so it wouldn't surprise me if it was due to that). ![image](https://user-images.githubusercontent.com/10038688/36695505-6f7e2400-1b39-11e8-9ff7-007fa562ace2.png)\r\n\r\nLooks a lot more reasonable to me! This looks good too, but think if I accept it you pushing the merge conflict fix will cause the review to become undone, so may as well wait and accept it after that.\r\n\r\nAs an aside, is it worth me creating an issue about the notification size?\r\nThe boxes seem much bigger for me now: \r\n![image](https://user-images.githubusercontent.com/10038688/36673336-5e817ca4-1afa-11e8-832e-aa91506fee15.png)\r\n\r\nLooks like there is some wasted space for me, though I am also not sure if that is because of my monitor res or scaling etc (4K monitor with 150% scaling and Windows isn't so great at scaling so it wouldn't surprise me if it was due to that). ![image](https://user-images.githubusercontent.com/10038688/36695505-6f7e2400-1b39-11e8-9ff7-007fa562ace2.png)\r\n\r\nLooks a lot more reasonable to me! I was going to say perhaps we should use blue for Info messages as most apps I've used use Red/Yellow/Blue for Error/Warn/Info, and green for succeeding.\r\n\r\nBut I guess the issue with that or any colour is we are assuming the user knows the colours too. I know in other notification UI you usually get a little text box message too, that makes it explicit what the message is. Is something like that worth adding etc?\r\n\r\nEither that, or possibly swapping the icons between the three, such that you have Cross/Exclamation Point/Info symbol? I was going to say perhaps we should use blue for Info messages as most apps I've used use Red/Yellow/Blue for Error/Warn/Info, and green for succeeding.\r\n\r\nBut I guess the issue with that or any colour is we are assuming the user knows the colours too. I know in other notification UI you usually get a little text box message too, that makes it explicit what the message is. Is something like that worth adding etc?\r\n\r\nEither that, or possibly swapping the icons between the three, such that you have Cross/Exclamation Point/Info symbol? I was going to say perhaps we should use blue for Info messages as most apps I've used use Red/Yellow/Blue for Error/Warn/Info, and green for succeeding.\r\n\r\nBut I guess the issue with that or any colour is we are assuming the user knows the colours too. I know in other notification UI you usually get a little text box message too, that makes it explicit what the message is. Is something like that worth adding etc?\r\n\r\nEither that, or possibly swapping the icons between the three, such that you have Cross/Exclamation Point/Info symbol? I was going to say perhaps we should use blue for Info messages as most apps I've used use Red/Yellow/Blue for Error/Warn/Info, and green for succeeding.\r\n\r\nBut I guess the issue with that or any colour is we are assuming the user knows the colours too. I know in other notification UI you usually get a little text box message too, that makes it explicit what the message is. Is something like that worth adding etc?\r\n\r\nEither that, or possibly swapping the icons between the three, such that you have Cross/Exclamation Point/Info symbol? From my brief understanding of `tab drop` it seems to be working, so may be worth leaving in.\r\n\r\nIe : \r\n```\r\n:e LICENSE\r\n:vsplit oni.sh\r\n:split package.json\r\n:tabe appveyor.yml\r\n```\r\n\r\nCalling `:tabe package.json` opens a new tab, calling `:tab drop package.json` swaps me back over to the \"workspace\" with my 3 splits in. From my brief understanding of `tab drop` it seems to be working, so may be worth leaving in.\r\n\r\nIe : \r\n```\r\n:e LICENSE\r\n:vsplit oni.sh\r\n:split package.json\r\n:tabe appveyor.yml\r\n```\r\n\r\nCalling `:tabe package.json` opens a new tab, calling `:tab drop package.json` swaps me back over to the \"workspace\" with my 3 splits in. From my brief understanding of `tab drop` it seems to be working, so may be worth leaving in.\r\n\r\nIe : \r\n```\r\n:e LICENSE\r\n:vsplit oni.sh\r\n:split package.json\r\n:tabe appveyor.yml\r\n```\r\n\r\nCalling `:tabe package.json` opens a new tab, calling `:tab drop package.json` swaps me back over to the \"workspace\" with my 3 splits in.",
    "TalAmuyal": "@Akin909, how about using sneak mode to press the X button? @Akin909, how about using sneak mode to press the X button? @Akin909, how about using sneak mode to press the X button? @Akin909, how about using sneak mode to press the X button? Nice, @zapashcanon!\r\nI didn't know about `shellcheck`, definitely gonna use it on my scripts - thanks! Nice, @zapashcanon!\r\nI didn't know about `shellcheck`, definitely gonna use it on my scripts - thanks! Nice, @zapashcanon!\r\nI didn't know about `shellcheck`, definitely gonna use it on my scripts - thanks!  @bryphe for some reason Travis's OS X machine really dislikes me.\r\nThe tests fail again for no good reason.\r\nHow can we improve it?\r\n\r\nI really want to move on and work on more features, but it really feels that the CI process is an obstacle for me. Thank you very much, @bryphe !  @bryphe for some reason Travis's OS X machine really dislikes me.\r\nThe tests fail again for no good reason.\r\nHow can we improve it?\r\n\r\nI really want to move on and work on more features, but it really feels that the CI process is an obstacle for me. Thank you very much, @bryphe !",
    "zapashcanon": "Hi,\r\n\r\nI fixed various things spotted by ShellCheck using: `find -O3 . -type f -name '*.sh' -exec shellcheck -x {} \\;`.\r\n\r\nThere are still these:\r\n\r\n```sh\r\nIn ./oni.sh line 4:\r\n    OS='Mac'\r\n    ^-- SC2034: OS appears unused. Verify it or export it.\r\n\r\n\r\nIn ./oni.sh line 28:\r\nONI_CWD=\"$OPEN_DIRECTORY\" open --new -a \"$FULL_ONI_PATH\" --args $*\r\n                                                                ^-- SC2048: Use \"$@\" (with quotes) to prevent whitespace problems.\r\n                                                                ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n```\r\n\r\nFor the first one, I think it'll be used in the future when Linux is supported.\r\n\r\nFor the second one, I'm not sure what's exactly expected here, replacing `$*` seems legit to me, but I'm not sure about adding quotes. Let me know what to do, I'll amend the commit if needed.\r\n @bryphe, in `oni.sh`, one thing will have an end-user impact: if `self` contains white space, now it'll work. The other thing is explained [here](https://github.com/koalaman/shellcheck/wiki/SC2006). With the current change in `oni.sh`, I'm confident there won't be any regression. Hi,\r\n\r\nI fixed various things spotted by ShellCheck using: `find -O3 . -type f -name '*.sh' -exec shellcheck -x {} \\;`.\r\n\r\nThere are still these:\r\n\r\n```sh\r\nIn ./oni.sh line 4:\r\n    OS='Mac'\r\n    ^-- SC2034: OS appears unused. Verify it or export it.\r\n\r\n\r\nIn ./oni.sh line 28:\r\nONI_CWD=\"$OPEN_DIRECTORY\" open --new -a \"$FULL_ONI_PATH\" --args $*\r\n                                                                ^-- SC2048: Use \"$@\" (with quotes) to prevent whitespace problems.\r\n                                                                ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n```\r\n\r\nFor the first one, I think it'll be used in the future when Linux is supported.\r\n\r\nFor the second one, I'm not sure what's exactly expected here, replacing `$*` seems legit to me, but I'm not sure about adding quotes. Let me know what to do, I'll amend the commit if needed.\r\n @bryphe, in `oni.sh`, one thing will have an end-user impact: if `self` contains white space, now it'll work. The other thing is explained [here](https://github.com/koalaman/shellcheck/wiki/SC2006). With the current change in `oni.sh`, I'm confident there won't be any regression. Hi,\r\n\r\nI fixed various things spotted by ShellCheck using: `find -O3 . -type f -name '*.sh' -exec shellcheck -x {} \\;`.\r\n\r\nThere are still these:\r\n\r\n```sh\r\nIn ./oni.sh line 4:\r\n    OS='Mac'\r\n    ^-- SC2034: OS appears unused. Verify it or export it.\r\n\r\n\r\nIn ./oni.sh line 28:\r\nONI_CWD=\"$OPEN_DIRECTORY\" open --new -a \"$FULL_ONI_PATH\" --args $*\r\n                                                                ^-- SC2048: Use \"$@\" (with quotes) to prevent whitespace problems.\r\n                                                                ^-- SC2086: Double quote to prevent globbing and word splitting.\r\n```\r\n\r\nFor the first one, I think it'll be used in the future when Linux is supported.\r\n\r\nFor the second one, I'm not sure what's exactly expected here, replacing `$*` seems legit to me, but I'm not sure about adding quotes. Let me know what to do, I'll amend the commit if needed.\r\n @bryphe, in `oni.sh`, one thing will have an end-user impact: if `self` contains white space, now it'll work. The other thing is explained [here](https://github.com/koalaman/shellcheck/wiki/SC2006). With the current change in `oni.sh`, I'm confident there won't be any regression.",
    "someguynamedmatt": "\u2026gurations which prevented quickOpen and commandMenu functionality @Akin909 Haha, yeah it\u2019s hard to see when the commit messages get too long. @CrossR documented the bug yesterday. I don\u2019t have merge permissions so anyone can merge this. Thanks! @bryphe I like that idea. Wouldn\u2019t be too difficult to implement either. \u2026gurations which prevented quickOpen and commandMenu functionality @Akin909 Haha, yeah it\u2019s hard to see when the commit messages get too long. @CrossR documented the bug yesterday. I don\u2019t have merge permissions so anyone can merge this. Thanks! @bryphe I like that idea. Wouldn\u2019t be too difficult to implement either. \u2026gurations which prevented quickOpen and commandMenu functionality @Akin909 Haha, yeah it\u2019s hard to see when the commit messages get too long. @CrossR documented the bug yesterday. I don\u2019t have merge permissions so anyone can merge this. Thanks! @bryphe I like that idea. Wouldn\u2019t be too difficult to implement either. - [Install nvm](https://github.com/creationix/nvm#installation)\r\n- `nvm use` from command line\r\n\r\nI can add these steps in the development documentation. @bryphe I would, but I don't have merge options available to me. > based on #246 \r\n\r\n- Added `--help` (also `-h`) to command line initialization\r\nsample output:\r\n\r\n![args](https://user-images.githubusercontent.com/17413539/36066808-ac91beb4-0e65-11e8-9191-f872a9f96089.png)\r\n @bryphe Okay, this should be better. I've tested it on OSX by packaging the app, installing it locally, and handing it `--help`. Seems functional. I can't get the packaging to work on Linux, though I'd assume it would work as well. Let me know what you think. And, as always, suggestions welcome! > based on #246 \r\n\r\n- Added `--help` (also `-h`) to command line initialization\r\nsample output:\r\n\r\n![args](https://user-images.githubusercontent.com/17413539/36066808-ac91beb4-0e65-11e8-9191-f872a9f96089.png)\r\n @bryphe Okay, this should be better. I've tested it on OSX by packaging the app, installing it locally, and handing it `--help`. Seems functional. I can't get the packaging to work on Linux, though I'd assume it would work as well. Let me know what you think. And, as always, suggestions welcome!",
    "coveralls": "\n[![Coverage Status](https://coveralls.io/builds/15483783/badge)](https://coveralls.io/builds/15483783)\n\nCoverage remained the same at ?% when pulling **b2a30da61211fc461b9068fe5b5794650d866dab on Akin909:feature/enable-commandline-by-default** into **2d057c3536f5a54bd68ba6e6abb0f04e7a39c545 on onivim:master**.\n \n[![Coverage Status](https://coveralls.io/builds/15483783/badge)](https://coveralls.io/builds/15483783)\n\nCoverage remained the same at ?% when pulling **b2a30da61211fc461b9068fe5b5794650d866dab on Akin909:feature/enable-commandline-by-default** into **2d057c3536f5a54bd68ba6e6abb0f04e7a39c545 on onivim:master**.\n \n[![Coverage Status](https://coveralls.io/builds/15478362/badge)](https://coveralls.io/builds/15478362)\n\nCoverage remained the same at ?% when pulling **05acc7071fcb8c3e68dfc011964de1fe3d5142f4 on bryphe/version/0.2.22-to-0.3.0** into **2600d22b70d53baef9ec00a9914f7ca587c3fbbe on master**.\n \n[![Coverage Status](https://coveralls.io/builds/15478311/badge)](https://coveralls.io/builds/15478311)\n\nCoverage remained the same at ?% when pulling **5308c36dd02a1793609113ba8d1b122b96f68436 on bryphe/notifications/disable-in-production-temporarily** into **2600d22b70d53baef9ec00a9914f7ca587c3fbbe on master**.\n \n[![Coverage Status](https://coveralls.io/builds/15478224/badge)](https://coveralls.io/builds/15478224)\n\nCoverage remained the same at ?% when pulling **a5e0ff3d6f4543ae64cd19c17536f0a764ea9f0f on bryphe/1524/automation-extra-logging** into **2600d22b70d53baef9ec00a9914f7ca587c3fbbe on master**.\n",
    "jordwalke": "@Akin909 Thanks for paying attention to this workflow. @Akin909 Thanks for paying attention to this workflow. @Akin909 Thanks for paying attention to this workflow.",
    "keforbes": "That is such a cool idea.  So the demo video will always be up-to-date with the current look & feel, neat! :thumbsup: It seemed weird for 'Syntax / Compilation Errors' to be the only Feature without a corresponding wiki link so I added a section to the wiki and added a link in the README. These will be awesome enhancements, but could you add \"update README\" to your list of todo's?  We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent. These will be awesome enhancements, but could you add \"update README\" to your list of todo's?  We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent. These will be awesome enhancements, but could you add \"update README\" to your list of todo's?  We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent. These will be awesome enhancements, but could you add \"update README\" to your list of todo's?  We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent.",
    "hoschi": "I use [vim-gitgutter]( https://github.com/airblade/vim-gitgutter) and also have this code to switch to normal line numbers when window looses focus:\r\n```VimL\r\n\" Use relativenumber only in the focused window\r\nif exists('&relativenumber')\r\n  set relativenumber\r\n  augroup WindowRNU\r\n    auto!\r\n    auto BufWinEnter,WinEnter,FocusGained * setlocal relativenumber\r\n    auto WinLeave,FocusLost               * setlocal nornu\r\n  augroup END\r\nendif\r\n```\r\n\r\nBoth don't work with Oni, because `FocusGained` and `FocusLost` doesn't fire. that was fast 0.0 thanks!",
    "Bretley": "Sorry I've been AWOL since finals and visiting family, things have gotten busy as there's been an unexpected death recently in my family. I've got no objections to you fixing my initial work up; I'm not going to continue it. Keep up the great work folks This is the initial work I've done so far. I kind of just took bits and pieces and threw things at the wall to see what stuck. I'm sure this is going to need a ton of revision and a ton of extra work.\r\n\r\n\r\n- [ ] Handle recursion with the CommandLine\r\n\r\n- [ ] Handle the cursor/position within CommandLine\r\n\r\n- [ ] Find out what values should be configurable\r\n\r\n- [ ] Determine what CommandLine should look like/ where it should be placed.\r\n\r\n\r\n![](https://i.gyazo.com/274ff6c4a9ed4648abf74814e5a766b2.gif )\r\n\r\n Sorry this is super bare in terms of commits, I very nearly deleted all of the changes I made... :man_shrugging:\r\n\r\nAlso wow, that gif is really low quality, gyazo's not that good I guess \ud83d\ude12  @bryphe Wildmenu might or might not get done depending on how your vision of this looks. There are three ways I could see this going:\r\n\r\n1) CommandLine becomes a Menu: Neovim sends over a cmdline event and the wildmenu functionality is instead replaced by fuzzy-style completion based on some list of keywords we have. This keeps 95% of the work in Oni and only requires that we have some precomputed list of help terms.\r\n\r\n2) We keep neovim's version and have it in the usual spot, but instead it's a cool little textbox instead of a part of the actual neovim screen. Even if we don't do much, externalizing the 'static' parts of the neovim screen is a step we need to take in order to get more advanced scrolling/ externalize the actual text display.\r\n\r\n3) Some hybrid of these two. It would be pretty easy to make cases for search vs ex mode vs. whatver ? means because neovim lets us know which commandline functionality is being used\r\n\r\nPersonally, I don't want the search to be over the screen because it might be covering up text,\r\nbut I do think that a popup commandline would be cool.\r\n\r\nThis is really a design choice for you. This is the initial work I've done so far. I kind of just took bits and pieces and threw things at the wall to see what stuck. I'm sure this is going to need a ton of revision and a ton of extra work.\r\n\r\n\r\n- [ ] Handle recursion with the CommandLine\r\n\r\n- [ ] Handle the cursor/position within CommandLine\r\n\r\n- [ ] Find out what values should be configurable\r\n\r\n- [ ] Determine what CommandLine should look like/ where it should be placed.\r\n\r\n\r\n![](https://i.gyazo.com/274ff6c4a9ed4648abf74814e5a766b2.gif )\r\n\r\n Sorry this is super bare in terms of commits, I very nearly deleted all of the changes I made... :man_shrugging:\r\n\r\nAlso wow, that gif is really low quality, gyazo's not that good I guess \ud83d\ude12  @bryphe Wildmenu might or might not get done depending on how your vision of this looks. There are three ways I could see this going:\r\n\r\n1) CommandLine becomes a Menu: Neovim sends over a cmdline event and the wildmenu functionality is instead replaced by fuzzy-style completion based on some list of keywords we have. This keeps 95% of the work in Oni and only requires that we have some precomputed list of help terms.\r\n\r\n2) We keep neovim's version and have it in the usual spot, but instead it's a cool little textbox instead of a part of the actual neovim screen. Even if we don't do much, externalizing the 'static' parts of the neovim screen is a step we need to take in order to get more advanced scrolling/ externalize the actual text display.\r\n\r\n3) Some hybrid of these two. It would be pretty easy to make cases for search vs ex mode vs. whatver ? means because neovim lets us know which commandline functionality is being used\r\n\r\nPersonally, I don't want the search to be over the screen because it might be covering up text,\r\nbut I do think that a popup commandline would be cool.\r\n\r\nThis is really a design choice for you. This is the initial work I've done so far. I kind of just took bits and pieces and threw things at the wall to see what stuck. I'm sure this is going to need a ton of revision and a ton of extra work.\r\n\r\n\r\n- [ ] Handle recursion with the CommandLine\r\n\r\n- [ ] Handle the cursor/position within CommandLine\r\n\r\n- [ ] Find out what values should be configurable\r\n\r\n- [ ] Determine what CommandLine should look like/ where it should be placed.\r\n\r\n\r\n![](https://i.gyazo.com/274ff6c4a9ed4648abf74814e5a766b2.gif )\r\n\r\n Sorry this is super bare in terms of commits, I very nearly deleted all of the changes I made... :man_shrugging:\r\n\r\nAlso wow, that gif is really low quality, gyazo's not that good I guess \ud83d\ude12  @bryphe Wildmenu might or might not get done depending on how your vision of this looks. There are three ways I could see this going:\r\n\r\n1) CommandLine becomes a Menu: Neovim sends over a cmdline event and the wildmenu functionality is instead replaced by fuzzy-style completion based on some list of keywords we have. This keeps 95% of the work in Oni and only requires that we have some precomputed list of help terms.\r\n\r\n2) We keep neovim's version and have it in the usual spot, but instead it's a cool little textbox instead of a part of the actual neovim screen. Even if we don't do much, externalizing the 'static' parts of the neovim screen is a step we need to take in order to get more advanced scrolling/ externalize the actual text display.\r\n\r\n3) Some hybrid of these two. It would be pretty easy to make cases for search vs ex mode vs. whatver ? means because neovim lets us know which commandline functionality is being used\r\n\r\nPersonally, I don't want the search to be over the screen because it might be covering up text,\r\nbut I do think that a popup commandline would be cool.\r\n\r\nThis is really a design choice for you. This is the initial work I've done so far. I kind of just took bits and pieces and threw things at the wall to see what stuck. I'm sure this is going to need a ton of revision and a ton of extra work.\r\n\r\n\r\n- [ ] Handle recursion with the CommandLine\r\n\r\n- [ ] Handle the cursor/position within CommandLine\r\n\r\n- [ ] Find out what values should be configurable\r\n\r\n- [ ] Determine what CommandLine should look like/ where it should be placed.\r\n\r\n\r\n![](https://i.gyazo.com/274ff6c4a9ed4648abf74814e5a766b2.gif )\r\n\r\n Sorry this is super bare in terms of commits, I very nearly deleted all of the changes I made... :man_shrugging:\r\n\r\nAlso wow, that gif is really low quality, gyazo's not that good I guess \ud83d\ude12  @bryphe Wildmenu might or might not get done depending on how your vision of this looks. There are three ways I could see this going:\r\n\r\n1) CommandLine becomes a Menu: Neovim sends over a cmdline event and the wildmenu functionality is instead replaced by fuzzy-style completion based on some list of keywords we have. This keeps 95% of the work in Oni and only requires that we have some precomputed list of help terms.\r\n\r\n2) We keep neovim's version and have it in the usual spot, but instead it's a cool little textbox instead of a part of the actual neovim screen. Even if we don't do much, externalizing the 'static' parts of the neovim screen is a step we need to take in order to get more advanced scrolling/ externalize the actual text display.\r\n\r\n3) Some hybrid of these two. It would be pretty easy to make cases for search vs ex mode vs. whatver ? means because neovim lets us know which commandline functionality is being used\r\n\r\nPersonally, I don't want the search to be over the screen because it might be covering up text,\r\nbut I do think that a popup commandline would be cool.\r\n\r\nThis is really a design choice for you. If you could make a semi-detailed checklist of what needs done I could probably do this. I stole the changes from this and added the cases to the switch statement, I'm just not sure what to add to State.ts (if anything) and also reducers and actions and all that jazz. Alright so I think I have an idea of this:\r\n\r\n- [ ] Set up Switch Cases\r\n\r\n- [ ] Create Actions\r\n\r\n- [ ] Create Reducer\r\n\r\n- [ ]  State???\r\n\r\n- [ ] Make actual CommandLine Component (or reuse Menu...) ```TypeScript\r\n                case \"cmdline_show\":\r\n                    const [content, pos, firstc, prompt, indent, level] = a[0]\r\n                    const commandLineShowInfo: INeovimCommandLineShowEvent = {\r\n                        content,\r\n                        pos,\r\n                        firstc,\r\n                        prompt,\r\n                        indent,\r\n                        level,\r\n                    }\r\n                    this._onCommandLineShowEvent.dispatch(commandLineShowInfo)\r\n                    break\r\n                case \"cmdline_pos\":\r\n                    const [pos, level] = a[0]\r\n                    const commandLinePositionInfo: INeovimCommandLineSetCursorPosition = {\r\n                        pos,\r\n                        level,\r\n                    }\r\n                    this._onCommandLineSetCursorPositionEvent.dispatch(commandLinePositionInfo)\r\n                    break\r\n\r\n```\r\nThis is modeled after the popupmenu switch case, but I get the error 'cannot redeclare block-scoped variable.' Which ones should be const and which shouldn't?  Alright here's where I'm stuck: \r\nI have an action and a reducer and an actioncreator defined, but I'm not sure how to get from neovimInstance.ts to actually changing the state. I see a lot of things calling dispatch, but I'm not sure what rabbit hole that goes down if that makes any sense.\r\n\r\nI could use a flowchart :)\r\n If you could make a semi-detailed checklist of what needs done I could probably do this. I stole the changes from this and added the cases to the switch statement, I'm just not sure what to add to State.ts (if anything) and also reducers and actions and all that jazz. Alright so I think I have an idea of this:\r\n\r\n- [ ] Set up Switch Cases\r\n\r\n- [ ] Create Actions\r\n\r\n- [ ] Create Reducer\r\n\r\n- [ ]  State???\r\n\r\n- [ ] Make actual CommandLine Component (or reuse Menu...) ```TypeScript\r\n                case \"cmdline_show\":\r\n                    const [content, pos, firstc, prompt, indent, level] = a[0]\r\n                    const commandLineShowInfo: INeovimCommandLineShowEvent = {\r\n                        content,\r\n                        pos,\r\n                        firstc,\r\n                        prompt,\r\n                        indent,\r\n                        level,\r\n                    }\r\n                    this._onCommandLineShowEvent.dispatch(commandLineShowInfo)\r\n                    break\r\n                case \"cmdline_pos\":\r\n                    const [pos, level] = a[0]\r\n                    const commandLinePositionInfo: INeovimCommandLineSetCursorPosition = {\r\n                        pos,\r\n                        level,\r\n                    }\r\n                    this._onCommandLineSetCursorPositionEvent.dispatch(commandLinePositionInfo)\r\n                    break\r\n\r\n```\r\nThis is modeled after the popupmenu switch case, but I get the error 'cannot redeclare block-scoped variable.' Which ones should be const and which shouldn't?  Alright here's where I'm stuck: \r\nI have an action and a reducer and an actioncreator defined, but I'm not sure how to get from neovimInstance.ts to actually changing the state. I see a lot of things calling dispatch, but I'm not sure what rabbit hole that goes down if that makes any sense.\r\n\r\nI could use a flowchart :)\r\n @cyansprite: I don't know how familiar you are with helm, or if this is within your skillset/goal here, but do you think you could generalize the quickOpen?\r\n\r\nI could imagine this replacing wildmenu/cmdline pretty easily, all we'd have to do is have the user give us an activation action, a list of things to choose from, and a final behavior\r\n\r\njust a thought @bryphe since I haven't been here for a while, is this a Proof Of Concept or is this something wand merged in? I'm not saying I'd be able to do it, but I could try! @cyansprite: I don't know how familiar you are with helm, or if this is within your skillset/goal here, but do you think you could generalize the quickOpen?\r\n\r\nI could imagine this replacing wildmenu/cmdline pretty easily, all we'd have to do is have the user give us an activation action, a list of things to choose from, and a final behavior\r\n\r\njust a thought @bryphe since I haven't been here for a while, is this a Proof Of Concept or is this something wand merged in? I'm not saying I'd be able to do it, but I could try! @cyansprite: I don't know how familiar you are with helm, or if this is within your skillset/goal here, but do you think you could generalize the quickOpen?\r\n\r\nI could imagine this replacing wildmenu/cmdline pretty easily, all we'd have to do is have the user give us an activation action, a list of things to choose from, and a final behavior\r\n\r\njust a thought @bryphe since I haven't been here for a while, is this a Proof Of Concept or is this something wand merged in? I'm not saying I'd be able to do it, but I could try! @cyansprite: I don't know how familiar you are with helm, or if this is within your skillset/goal here, but do you think you could generalize the quickOpen?\r\n\r\nI could imagine this replacing wildmenu/cmdline pretty easily, all we'd have to do is have the user give us an activation action, a list of things to choose from, and a final behavior\r\n\r\njust a thought @bryphe since I haven't been here for a while, is this a Proof Of Concept or is this something wand merged in? I'm not saying I'd be able to do it, but I could try!",
    "saibing": "I try use the latest version [go-langserver](https://github.com/sourcegraph/go-langserver/commit/6d17b634f244650517ca2ec9a82068d02a581b09) that support completion feature.\r\n\r\nIt report the follow error that receive from go-langserver  on initialize:\r\n\r\n```js\r\nbundle.js:1 [LANGUAGE CLIENT - STDERR]: langserver-go: reading on stdin, writing on stdout\r\n\r\nbundle.js:1 Error: json: cannot unmarshal bool into Go struct field TextDocumentClientCapabilities.completion of type struct { CompletionItemKind struct { ValueSet []lsp.CompletionItemKind \"json:\\\"valueSet,omitempty\\\"\" } \"json:\\\"completionItemKind,omitempty\\\"\" }\r\n    at new ResponseError (/data/saibing/git/ts/oni/node_modules/vscode-jsonrpc/lib/messages.js:46)\r\n    at handleResponse (/data/saibing/git/ts/oni/node_modules/vscode-jsonrpc/lib/main.js:430)\r\n    at processMessageQueue (/data/saibing/git/ts/oni/node_modules/vscode-jsonrpc/lib/main.js:258)\r\n    at Immediate._onImmediate (/data/saibing/git/ts/oni/node_modules/vscode-jsonrpc/lib/main.js:242)\r\n    at runCallback (timers.js:781)\r\n    at tryOnImmediate (timers.js:743)\r\n    at processImmediate [as _immediateCallback] (timers.js:714)\r\nt.error @ bundle.js:1\r\n(anonymous) @ 0.bundle.js:27\r\ns @ 0.bundle.js:27\r\nbundle.js:1 [Language Client] Notification textDocument/didOpen - /data/saibing/git/go/src/jvmgo/cmd.go: start\r\nbundle.js:1 [Language Client] Notification textDocument/didOpen - /data/saibing/git/go/src/jvmgo/cmd.go: end\r\n```\r\n\r\nbut vscode running is ok:\r\n\r\n```js\r\nlangserver-go: reading on stdin, writing on stdout\r\n--> request #0: initialize: {\"processId\":24192,\"rootPath\":\"/data/saibing/git/go/src/github.com/sourcegraph/go-langserver\",\"capabilities\":{},\"trace\":\"off\"}\r\n<-- result #0: initialize: {\"capabilities\":{\"textDocumentSync\":2,\"hoverProvider\":true,\"signatureHelpProvider\":{\"triggerCharacters\":[\"(\",\",\"]},\"definitionProvider\":true,\"referencesProvider\":true,\"documentSymbolProvider\":true,\"workspaceSymbolProvider\":true,\"documentFormattingProvider\":true,\"xworkspaceReferencesProvider\":true,\"xdefinitionProvider\":true,\"xworkspaceSymbolByProperties\":true}}\r\n--> notif: textDocument/didOpen: {\"textDocument\":\r\n```\r\n\r\nMaybe Oni does not support ClientCapabilities message?\r\n\r\n```ts\r\ninterface ClientCapabilities {\r\n\t/**\r\n\t * Workspace specific client capabilities.\r\n\t */\r\n\tworkspace?: WorkspaceClientCapabilities;\r\n\r\n\t/**\r\n\t * Text document specific client capabilities.\r\n\t */\r\n\ttextDocument?: TextDocumentClientCapabilities;\r\n\r\n\t/**\r\n\t * Experimental client capabilities.\r\n\t */\r\n\texperimental?: any;\r\n}\r\n```\r\n\r\nThe go-langserver struct definition as flow:\r\n\r\n```go\r\ntype ClientCapabilities struct {\r\n\tWorkspace    WorkspaceClientCapabilities    `json:\"workspace,omitempty\"`\r\n\tTextDocument TextDocumentClientCapabilities `json:\"textDocument,omitempty\"`\r\n\tExperimental interface{}                    `json:\"experimental,omitempty\"`\r\n\r\n\t// Below are Sourcegraph extensions. They do not live in lspext since\r\n\t// they are extending the field InitializeParams.Capabilities\r\n\r\n\t// XFilesProvider indicates the client provides support for\r\n\t// workspace/xfiles. This is a Sourcegraph extension.\r\n\tXFilesProvider bool `json:\"xfilesProvider,omitempty\"`\r\n\r\n\t// XContentProvider indicates the client provides support for\r\n\t// textDocument/xcontent. This is a Sourcegraph extension.\r\n\tXContentProvider bool `json:\"xcontentProvider,omitempty\"`\r\n\r\n\t// XCacheProvider indicates the client provides support for cache/get\r\n\t// and cache/set.\r\n\tXCacheProvider bool `json:\"xcacheProvider,omitempty\"`\r\n}\r\n\r\ntype WorkspaceClientCapabilities struct{}\r\n\r\ntype TextDocumentClientCapabilities struct {\r\n\tCompletion struct {\r\n\t\tCompletionItemKind struct {\r\n\t\t\tValueSet []CompletionItemKind `json:\"valueSet,omitempty\"`\r\n\t\t} `json:\"completionItemKind,omitempty\"`\r\n\t} `json:\"completion,omitempty\"`\r\n}\r\n``` I trace the detail message of go-langserver as follow:\r\n\r\n```json\r\nlangserver-go: reading on stdin, writing on stdout                                                                                                                                                                 \r\n--> request #0: initialize: {\"clientName\":\"oni\",\"rootPath\":\"/data/saibing/git/go/src/jvmgo\",\"rootUri\":\"file:///data/saibing/git/go/src/jvmgo\",\"capabilities\":{\"workspace\":{\"applyEdit\":true,\"configuration\":true,  \r\n\"workspaceEdit\":{\"documentChanges\":false},\"didChangeConfiguration\":true,\"didChangeWatchedFiles\":false,\"symbol\":true,\"executeCommand\":true},\"textDocument\":{\"synchronization\":true,\"completion\":true,\"hover\":true,  \r\n\"signatureHelp\":true,\"references\":true,\"documentHighlight\":false,\"documentSymbol\":true,\"formatting\":true,\"rangeFormatting\":true,\"onTypeFormatting\":false,\"definition\":true,\"codeAction\":true,\"codeLens\":true,      \r\n\"documentLink\":false,\"rename\":true}}}                                                                                                                                                                              \r\n<-- error #0: initialize: {\"code\":0,\"message\":\"json: cannot unmarshal bool into Go struct field TextDocumentClientCapabilities.completion of type struct { CompletionItemKind struct { ValueSet []lsp.             \r\nCompletionItemKind \\\"json:\\\\\\\"valueSet,omitempty\\\\\\\"\\\" } \\\"json:\\\\\\\"completionItemKind,omitempty\\\\\\\"\\\" }\",\"data\":null}                                                                                             \r\n--> notif: textDocument/didOpen: {\"textDocument\":{\"uri\":\"file:///data/saibing/git/go/src/jvmgo/jvm.go\",\"languageId\":\"go\",\"text\":\"package main\\n\\nimport \\\"fmt\\\"\\nimport \\\"strings\\\"\\nimport \\\"jvmgo/               \r\nclasspath\\\"\\nimport \\\"jvmgo/instructions/base\\\"\\nimport \\\"jvmgo/rtda\\\"\\nimport \\\"jvmgo/rtda/heap\\\"\\n\\ntype JVM struct {\\n\\tcmd         *Cmd\\n\\tclassLoader *heap.ClassLoader\\n\\tmainThread  *rtda.                 \r\nThread\\n}\\n\\nfunc newJVM(cmd *Cmd) *JVM {\\n\\tcp := classpath.Parse(cmd.XjreOption, cmd.cpOption)\\n\\tclassLoader := heap.NewClassLoader(cp, cmd.verboseClassFlag)\\n\\treturn \\u0026JVM{\\n\\t\\tcmd:         cmd,       \r\n\\n\\t\\tclassLoader: classLoader,\\n\\t\\tmainThread:  rtda.NewThread(),\\n\\t}\\n}\\n\\nfunc (self *JVM) start() {\\n\\tself.initVM()\\n\\tself.execMain()\\n}\\n\\nfunc (self *JVM) initVM() {\\n\\tvmClass := self.classLoader.    \r\nLoadClass(\\\"sun/misc/VM\\\")\\n\\tbase.InitClass(self.mainThread, vmClass)\\n\\tinterpret(self.mainThread, self.cmd.verboseInstFlag)\\n}\\n\\nfunc (self *JVM) execMain() {\\n\\tclassName := strings.Replace(self.cmd.class, \r\n\\\".\\\", \\\"/\\\", -1)\\n\\tmainClass := self.classLoader.LoadClass(className)\\n\\tmainMethod := mainClass.GetMainMethod()\\n\\tif mainMethod == nil {\\n\\t\\tfmt.Printf(\\\"Main method not found in class %s\\\\n\\\", self.cmd.   \r\nclass)\\n\\t\\treturn\\n\\t}\\n\\n\\targsArr := self.createArgsArray()\\n\\tframe := self.mainThread.NewFrame(mainMethod)\\n\\tframe.LocalVars().SetRef(0, argsArr)\\n\\tself.mainThread.PushFrame(frame)\\n\\tinterpret(self.     \r\nmainThread, self.cmd.verboseInstFlag)\\n}\\n\\nfunc (self *JVM) createArgsArray() *heap.Object {\\n\\tstringClass := self.classLoader.LoadClass(\\\"java/lang/String\\\")\\n\\targsLen := uint(len(self.cmd.                  \r\nargs))\\n\\targsArr := stringClass.ArrayClass().NewArray(argsLen)\\n\\tjArgs := argsArr.Refs()\\n\\tfor i, arg := range self.cmd.args {\\n\\t\\tjArgs[i] = heap.JString(self.classLoader, arg)\\n\\t}\\n\\treturn argsArr\\n}\"}} \r\njsonrpc2 handler: notification \"textDocument/didOpen\" handling error: server must be initialized\r\n``` \r\n```json\r\n\"textDocument\":{\"synchronization\":true,\"completion\":true\r\n```\r\n\r\n\"completion\":true may be wrong @Contextualist \r\n\r\nThank you very much. I have already setting this in config.js:\r\n\r\n```json\r\n\"language.go.languageServer.rootFiles\": [\".git\"],\r\n\"language.go.completionTriggerCharacters\": [\".\"],\r\n\"language.go.languageServer.arguments\": [\"--logfile\", \"goserver.log\", \"--trace\", \"--gocodecompletion\"],\r\n\r\n```\r\n\r\nSo I think the problem is that:  {\"completion\":true} can not be  unmarshal to golang struct in go-langserver.\r\n\r\nMay be  {\"completion\":true}  does not accord with the new version [Language Server Protocol](https://github.com/Microsoft/language-server-protocol/blob/gh-pages/specification.md)?\r\n\r\n```ts\r\n/**\r\n\t * Capabilities specific to the `textDocument/completion`\r\n\t */\r\n\tcompletion?: {\r\n\t\t/**\r\n\t\t * Whether completion supports dynamic registration.\r\n\t\t */\r\n\t\tdynamicRegistration?: boolean;\r\n\r\n\t\t/**\r\n\t\t * The client supports the following `CompletionItem` specific\r\n\t\t * capabilities.\r\n\t\t */\r\n\t\tcompletionItem?: {\r\n\t\t\t/**\r\n\t\t\t * Client supports snippets as insert text.\r\n\t\t\t *\r\n\t\t\t * A snippet can define tab stops and placeholders with `$1`, `$2`\r\n\t\t\t * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\r\n\t\t\t * the end of the snippet. Placeholders with equal identifiers are linked,\r\n\t\t\t * that is typing in one will update others too.\r\n\t\t\t */\r\n\t\t\tsnippetSupport?: boolean;\r\n\r\n\t\t\t/**\r\n\t\t\t * Client supports commit characters on a completion item.\r\n\t\t\t */\r\n\t\t\tcommitCharactersSupport?: boolean\t\t\t\r\n\r\n\t\t\t/**\r\n\t\t\t * Client supports the follow content formats for the documentation\r\n\t\t\t * property. The order describes the preferred format of the client.\r\n\t\t\t */\r\n\t\t\tdocumentationFormat?: MarkupKind[];\r\n\t\t}\r\n\r\n\t\tcompletionItemKind?: {\r\n\t\t\t/**\r\n\t\t\t * The completion item kind values the client supports. When this\r\n\t\t\t * property exists the client also guarantees that it will\r\n\t\t\t * handle values outside its set gracefully and falls back\r\n\t\t\t * to a default value when unknown.\r\n\t\t\t *\r\n\t\t\t * If this property is not present the client only supports\r\n\t\t\t * the completion items kinds from `Text` to `Reference` as defined in\r\n\t\t\t * the initial version of the protocol.\r\n\t\t\t */\r\n\t\t\tvalueSet?: CompletionItemKind[];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The client supports to send additional context information for a\r\n\t\t * `textDocument/completion` requestion.\r\n\t\t */\r\n\t\tcontextSupport?: boolean;\t\t\r\n\t};\r\n\r\n```",
    "Contextualist": "~Try setting `\"language.go.languageServer.arguments\": [\"--gocodecompletion\"]`, then the language server will enable completion for you. See https://github.com/sourcegraph/go-langserver/blob/6d17b634f244650517ca2ec9a82068d02a581b09/main.go#L32~\r\n\r\n~This is an experimental feature. Sorry for that it is not well documented.~\r\n\r\nSorry for my irrelevent rushed answer. I checked the [LSP spec](https://microsoft.github.io/language-server-protocol/specification#initialize) and how Oni initialize LSP\r\n\r\nhttps://github.com/onivim/oni/blob/611b194a22cbfeba175b182e877e696c6c2afa8b/browser/src/Services/Language/LanguageClientProcess.ts#L151-L180\r\n\r\nIt seems that many of the above params should not be simply set as a bool. Besides, a few entries' names seem mismatch with the spec. @saibing , I agree with you. I'm sure it will be addressed soon. If you are eager to see it work, you can simply delete L152-179 in oni/browser/src/Services/Language/LanguageClientProcess.ts and build Oni, since these params are optional.\r\n\r\nBy the way, @bryphe , to what extent and when would you like to implement these optional params? Just curious.",
    "samvv": "Shamelessly taken from @Bretley, this merge takes his code and makes it again compatible with `master`. Quoting @bryphe from #1121:\r\n\r\n> A good first step on the Oni side would be to show our current set of keybindings in that command palette window. There would be a few things needed there (that could then be reused for the Vim commands):\r\n> \r\n> - Adding the ability to show keys in the Menu - perhaps we could extend it with a custom React component? That code is in need of some love\r\n> - Having the ability to do a reverse query on the InputManager - be able to ask 'what keys do I have bound to this command'?\r\n\r\nThat's what I'd like to do now. If there are any additional pointers on how I should continue, please let me know.  I actually quite like the idea of having all commands nicely packed in one place, so that when I forget one I can simply look it up (that's why I wanted this so badly). I actually thought of parsing the `:command` output so that one can even fuzzy find on command name (Neovim currently does not provide a means to list all available commands via RPC or `eval`, unfortunately). In that case, an exact match would get precedence over 'fuzzy found' ones, but if no exact match is available it would try to get one using fuzzy search.\r\n\r\nI think I make this scenario work if you like it. \r\n\r\n**Edit:** forgot to mention: that would imply only one pane (the command palette), as you suggested @bryphe  > But combine them up-front in a way that is intuitive, that's great.\r\n\r\nThat's exactly my thought. \ud83d\ude04 \r\n\r\n> Would this mean we'd integrate the output from the ext_cmdline into the command palette? Or integrate the full set of commands a different way?\r\n\r\nGood question ... I'd say yes, if we really wanted to get a fluent interaction. Will not be as straightforward as it sounds, though ... on the other hand, it's almost weekend so I'll be having some time to experiment. Did you have something else in mind? Shamelessly taken from @Bretley, this merge takes his code and makes it again compatible with `master`. Quoting @bryphe from #1121:\r\n\r\n> A good first step on the Oni side would be to show our current set of keybindings in that command palette window. There would be a few things needed there (that could then be reused for the Vim commands):\r\n> \r\n> - Adding the ability to show keys in the Menu - perhaps we could extend it with a custom React component? That code is in need of some love\r\n> - Having the ability to do a reverse query on the InputManager - be able to ask 'what keys do I have bound to this command'?\r\n\r\nThat's what I'd like to do now. If there are any additional pointers on how I should continue, please let me know.  I actually quite like the idea of having all commands nicely packed in one place, so that when I forget one I can simply look it up (that's why I wanted this so badly). I actually thought of parsing the `:command` output so that one can even fuzzy find on command name (Neovim currently does not provide a means to list all available commands via RPC or `eval`, unfortunately). In that case, an exact match would get precedence over 'fuzzy found' ones, but if no exact match is available it would try to get one using fuzzy search.\r\n\r\nI think I make this scenario work if you like it. \r\n\r\n**Edit:** forgot to mention: that would imply only one pane (the command palette), as you suggested @bryphe  > But combine them up-front in a way that is intuitive, that's great.\r\n\r\nThat's exactly my thought. \ud83d\ude04 \r\n\r\n> Would this mean we'd integrate the output from the ext_cmdline into the command palette? Or integrate the full set of commands a different way?\r\n\r\nGood question ... I'd say yes, if we really wanted to get a fluent interaction. Will not be as straightforward as it sounds, though ... on the other hand, it's almost weekend so I'll be having some time to experiment. Did you have something else in mind? Shamelessly taken from @Bretley, this merge takes his code and makes it again compatible with `master`. Quoting @bryphe from #1121:\r\n\r\n> A good first step on the Oni side would be to show our current set of keybindings in that command palette window. There would be a few things needed there (that could then be reused for the Vim commands):\r\n> \r\n> - Adding the ability to show keys in the Menu - perhaps we could extend it with a custom React component? That code is in need of some love\r\n> - Having the ability to do a reverse query on the InputManager - be able to ask 'what keys do I have bound to this command'?\r\n\r\nThat's what I'd like to do now. If there are any additional pointers on how I should continue, please let me know.  I actually quite like the idea of having all commands nicely packed in one place, so that when I forget one I can simply look it up (that's why I wanted this so badly). I actually thought of parsing the `:command` output so that one can even fuzzy find on command name (Neovim currently does not provide a means to list all available commands via RPC or `eval`, unfortunately). In that case, an exact match would get precedence over 'fuzzy found' ones, but if no exact match is available it would try to get one using fuzzy search.\r\n\r\nI think I make this scenario work if you like it. \r\n\r\n**Edit:** forgot to mention: that would imply only one pane (the command palette), as you suggested @bryphe  > But combine them up-front in a way that is intuitive, that's great.\r\n\r\nThat's exactly my thought. \ud83d\ude04 \r\n\r\n> Would this mean we'd integrate the output from the ext_cmdline into the command palette? Or integrate the full set of commands a different way?\r\n\r\nGood question ... I'd say yes, if we really wanted to get a fluent interaction. Will not be as straightforward as it sounds, though ... on the other hand, it's almost weekend so I'll be having some time to experiment. Did you have something else in mind? I'll try to smoothen this out so that it can be merged. First need to see I can get it working. I'll try to smoothen this out so that it can be merged. First need to see I can get it working. I'll try to smoothen this out so that it can be merged. First need to see I can get it working. I'll try to smoothen this out so that it can be merged. First need to see I can get it working.",
    "cyansprite": "# Progress Made\r\n### Can select more than one item now\r\n   - c-i increments/decrements\r\n   - On enter/c-v/c-s opens all the incremented in buffers and whichever you enter/c-v/c-s on it will give that one focus.\r\n---\r\n### Can quickopen for colorschemes\r\n   - recaches each request due to not having a way to check if it updated outside of vim, it's fast so... I don't see this being a problem.\r\n### Fixed quickopen overflow with small windows\r\n   - Max width to cap at 600px (width before)\r\n   - width defaults to 70%\r\n   - details overflow-x: hidden so they aren't floating in random space...\r\n### Force open bookmarks\r\n   - Sometimes I want to open them even if I'm in a cwd other than home/install.\r\n---\r\n# TODO\r\n* [x] Force open bookmark/select folder\r\n* [x] Colorschemes activate on select instead of actually having to hit enter, this way you get a live preview of the colorscheme and you don't have to reopen each and everytime.\r\n* [x] Ignore binary files for all file gathering.\r\n* [x] Work on speed improvements\r\n* [x] Async files for things other than git folders\r\n* [x] State bg/fg colors for neovim to have for oni QO menus\r\n* [x] Cache files on directory change/construction\r\n* [x] Update ignore (we will use .gitignore kind of ignore)\r\n* [x] Be able to type as things load...\r\n* [x] Refine input field typing experience.\r\n* [x] Make incrementing only available for certain ```QuickOpenTypes```, currently this would be files.\r\n\r\n---\r\n### Future TODO\r\n- Cache files when we figure out projections/workspaces.\r\n- Searching through search results\r\n- Implement loc list with incrementing buffer lines and search results.\r\n- Buffer lines for ALL active buffers.\r\n- Preview and silent loading of buffers\r\n- <s>* [ ] Make editing shortcuts for (nvim temporary buffer/instance)</s>\r\n- * [ ] State popup bg/fg colors for neovim to have for oni AutoComplete menus\r\n* [ ] Merge #633 changes once they are done.\r\n## Gif Showing Basics Done so far.\r\n<a href=\"http://imgur.com/WUyfzsp\"><img src=\"http://i.imgur.com/WUyfzsp.gif\" title=\"source: imgur.com\" /></a>\r\n* [ ] Scrollbar... this is going to be fairly complex due to us only using 10 items right now, but... it shouldn't be <i>that</i> bad.\r\n* [ ] Figure out what color to make the highlighting. (Use a light bg you'll see what I mean.\r\n* [ ] Make incrementing loading play with tabs better so it's not slow on many file selections.\r\n* [ ] Quick Open support for buffers\r\n* [ ] Have an option to ignore hidden files/folders\r\n* [ ] Prefix support\r\n  -  : - vim command mode for current window\r\n  -  / - buffer search (integrate with the buffer search you added)\r\n  - ! - oni command mode (same commands shown in Ctrl+Shift+P)\r\n  - '`' - show available vim marks\r\n  - & - show available buffers\r\n  - Others.... >And cool list - it's neat to see the progress indication on the PR.\r\n\r\nDidn't realized it did progress I just wanted a nice list :).\r\n\r\n> But for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (, , etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings.\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\nIf we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\n>We might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nI will look into that.\r\n\r\n>    Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n\r\nI plan on adding a bg/fg color to the state by using &bg/&fg, if these are null then use default (i'm not sure what this is in nvim I've never looked at it honestly without a color for normal...)\r\nOn source/color scheme loaded recache these values, that way we can use them for our menus.\r\n\r\n>    Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nWe need a solution, I can use my binary to do this but there is not a good way in typescript without writing an algorithm or porting a library and their dependencies, however I think a solution implemented in typescript may not be the best solution but using something like ag/ripgrep/etc that way we can stream async and we don't use a scripting language that can't optimize as other coding bases. https://github.com/gjtorikian/nak currently writing a manual find, it's working pretty nice, almost done.\r\n typescript, only dependency is fs and ignore\r\n going to add support for a config ignore and config use global ignore ~/.gitignore > These will be awesome enhancements, but could you add \"update README\" to your list of todo's? We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent.\r\n\r\nOnce I have a concrete list :) This is more of a guide really. > Sorry I'm a bit late to the party here! Was (finally) reading through the comments \ud83d\ude04\r\n\r\nYou're good, I've been super busy so sorry about the late commits.\r\n\r\n> Sounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an embedded browser in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities!\r\n\r\nAnd I would LOVE to be able to do normal day to day things with the power of neovim, sounds revolutionary in a way :P.\r\nI wonder what would best to start implementing this, probably your change you are making would be a good start, then when I'm done with this PR I can try and get it to work for the input field, then that should make a pretty clear pathway for the rest.\r\n\r\nIf you don't care test it out, it works great for me, however like my commit says the overridden command doesn't seem to work. @extr0py \r\nAlso, this is the plugin I've been working on.\r\nIt might be buggy, if you find anything please let me know!\r\nhttps://github.com/cyansprite/Extract Nice gif for progress being made\r\n\r\n<a href=\"http://imgur.com/FAEwMU2\"><img src=\"http://i.imgur.com/FAEwMU2.gif\" title=\"source: imgur.com\" /></a> > Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time\r\n\r\nYeah I was super happy with the color-scheme outcome.\r\n\r\n> And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store.\r\n\r\nThanks, from when I use it it's pretty useful, I haven't found any bugs since the initial commits ( I think 14 while demoing? )\r\nHowever, there are a few improvements I can think of, let me know how it goes!\r\nAs far as I can tell it works with Oni, as it should since it works in vanilla neovim as well. @Bretley Feel free to take it over, I'm not working on this anymore, it's more of just staying here until @bryphe decides it's no longer necessary, I don't have time to work on Oni anymore fortunately. # Progress Made\r\n### Can select more than one item now\r\n   - c-i increments/decrements\r\n   - On enter/c-v/c-s opens all the incremented in buffers and whichever you enter/c-v/c-s on it will give that one focus.\r\n---\r\n### Can quickopen for colorschemes\r\n   - recaches each request due to not having a way to check if it updated outside of vim, it's fast so... I don't see this being a problem.\r\n### Fixed quickopen overflow with small windows\r\n   - Max width to cap at 600px (width before)\r\n   - width defaults to 70%\r\n   - details overflow-x: hidden so they aren't floating in random space...\r\n### Force open bookmarks\r\n   - Sometimes I want to open them even if I'm in a cwd other than home/install.\r\n---\r\n# TODO\r\n* [x] Force open bookmark/select folder\r\n* [x] Colorschemes activate on select instead of actually having to hit enter, this way you get a live preview of the colorscheme and you don't have to reopen each and everytime.\r\n* [x] Ignore binary files for all file gathering.\r\n* [x] Work on speed improvements\r\n* [x] Async files for things other than git folders\r\n* [x] State bg/fg colors for neovim to have for oni QO menus\r\n* [x] Cache files on directory change/construction\r\n* [x] Update ignore (we will use .gitignore kind of ignore)\r\n* [x] Be able to type as things load...\r\n* [x] Refine input field typing experience.\r\n* [x] Make incrementing only available for certain ```QuickOpenTypes```, currently this would be files.\r\n\r\n---\r\n### Future TODO\r\n- Cache files when we figure out projections/workspaces.\r\n- Searching through search results\r\n- Implement loc list with incrementing buffer lines and search results.\r\n- Buffer lines for ALL active buffers.\r\n- Preview and silent loading of buffers\r\n- <s>* [ ] Make editing shortcuts for (nvim temporary buffer/instance)</s>\r\n- * [ ] State popup bg/fg colors for neovim to have for oni AutoComplete menus\r\n* [ ] Merge #633 changes once they are done.\r\n## Gif Showing Basics Done so far.\r\n<a href=\"http://imgur.com/WUyfzsp\"><img src=\"http://i.imgur.com/WUyfzsp.gif\" title=\"source: imgur.com\" /></a>\r\n* [ ] Scrollbar... this is going to be fairly complex due to us only using 10 items right now, but... it shouldn't be <i>that</i> bad.\r\n* [ ] Figure out what color to make the highlighting. (Use a light bg you'll see what I mean.\r\n* [ ] Make incrementing loading play with tabs better so it's not slow on many file selections.\r\n* [ ] Quick Open support for buffers\r\n* [ ] Have an option to ignore hidden files/folders\r\n* [ ] Prefix support\r\n  -  : - vim command mode for current window\r\n  -  / - buffer search (integrate with the buffer search you added)\r\n  - ! - oni command mode (same commands shown in Ctrl+Shift+P)\r\n  - '`' - show available vim marks\r\n  - & - show available buffers\r\n  - Others.... >And cool list - it's neat to see the progress indication on the PR.\r\n\r\nDidn't realized it did progress I just wanted a nice list :).\r\n\r\n> But for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (, , etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings.\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\nIf we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\n>We might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nI will look into that.\r\n\r\n>    Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n\r\nI plan on adding a bg/fg color to the state by using &bg/&fg, if these are null then use default (i'm not sure what this is in nvim I've never looked at it honestly without a color for normal...)\r\nOn source/color scheme loaded recache these values, that way we can use them for our menus.\r\n\r\n>    Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nWe need a solution, I can use my binary to do this but there is not a good way in typescript without writing an algorithm or porting a library and their dependencies, however I think a solution implemented in typescript may not be the best solution but using something like ag/ripgrep/etc that way we can stream async and we don't use a scripting language that can't optimize as other coding bases. https://github.com/gjtorikian/nak currently writing a manual find, it's working pretty nice, almost done.\r\n typescript, only dependency is fs and ignore\r\n going to add support for a config ignore and config use global ignore ~/.gitignore > These will be awesome enhancements, but could you add \"update README\" to your list of todo's? We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent.\r\n\r\nOnce I have a concrete list :) This is more of a guide really. > Sorry I'm a bit late to the party here! Was (finally) reading through the comments \ud83d\ude04\r\n\r\nYou're good, I've been super busy so sorry about the late commits.\r\n\r\n> Sounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an embedded browser in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities!\r\n\r\nAnd I would LOVE to be able to do normal day to day things with the power of neovim, sounds revolutionary in a way :P.\r\nI wonder what would best to start implementing this, probably your change you are making would be a good start, then when I'm done with this PR I can try and get it to work for the input field, then that should make a pretty clear pathway for the rest.\r\n\r\nIf you don't care test it out, it works great for me, however like my commit says the overridden command doesn't seem to work. @extr0py \r\nAlso, this is the plugin I've been working on.\r\nIt might be buggy, if you find anything please let me know!\r\nhttps://github.com/cyansprite/Extract Nice gif for progress being made\r\n\r\n<a href=\"http://imgur.com/FAEwMU2\"><img src=\"http://i.imgur.com/FAEwMU2.gif\" title=\"source: imgur.com\" /></a> > Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time\r\n\r\nYeah I was super happy with the color-scheme outcome.\r\n\r\n> And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store.\r\n\r\nThanks, from when I use it it's pretty useful, I haven't found any bugs since the initial commits ( I think 14 while demoing? )\r\nHowever, there are a few improvements I can think of, let me know how it goes!\r\nAs far as I can tell it works with Oni, as it should since it works in vanilla neovim as well. @Bretley Feel free to take it over, I'm not working on this anymore, it's more of just staying here until @bryphe decides it's no longer necessary, I don't have time to work on Oni anymore fortunately. # Progress Made\r\n### Can select more than one item now\r\n   - c-i increments/decrements\r\n   - On enter/c-v/c-s opens all the incremented in buffers and whichever you enter/c-v/c-s on it will give that one focus.\r\n---\r\n### Can quickopen for colorschemes\r\n   - recaches each request due to not having a way to check if it updated outside of vim, it's fast so... I don't see this being a problem.\r\n### Fixed quickopen overflow with small windows\r\n   - Max width to cap at 600px (width before)\r\n   - width defaults to 70%\r\n   - details overflow-x: hidden so they aren't floating in random space...\r\n### Force open bookmarks\r\n   - Sometimes I want to open them even if I'm in a cwd other than home/install.\r\n---\r\n# TODO\r\n* [x] Force open bookmark/select folder\r\n* [x] Colorschemes activate on select instead of actually having to hit enter, this way you get a live preview of the colorscheme and you don't have to reopen each and everytime.\r\n* [x] Ignore binary files for all file gathering.\r\n* [x] Work on speed improvements\r\n* [x] Async files for things other than git folders\r\n* [x] State bg/fg colors for neovim to have for oni QO menus\r\n* [x] Cache files on directory change/construction\r\n* [x] Update ignore (we will use .gitignore kind of ignore)\r\n* [x] Be able to type as things load...\r\n* [x] Refine input field typing experience.\r\n* [x] Make incrementing only available for certain ```QuickOpenTypes```, currently this would be files.\r\n\r\n---\r\n### Future TODO\r\n- Cache files when we figure out projections/workspaces.\r\n- Searching through search results\r\n- Implement loc list with incrementing buffer lines and search results.\r\n- Buffer lines for ALL active buffers.\r\n- Preview and silent loading of buffers\r\n- <s>* [ ] Make editing shortcuts for (nvim temporary buffer/instance)</s>\r\n- * [ ] State popup bg/fg colors for neovim to have for oni AutoComplete menus\r\n* [ ] Merge #633 changes once they are done.\r\n## Gif Showing Basics Done so far.\r\n<a href=\"http://imgur.com/WUyfzsp\"><img src=\"http://i.imgur.com/WUyfzsp.gif\" title=\"source: imgur.com\" /></a>\r\n* [ ] Scrollbar... this is going to be fairly complex due to us only using 10 items right now, but... it shouldn't be <i>that</i> bad.\r\n* [ ] Figure out what color to make the highlighting. (Use a light bg you'll see what I mean.\r\n* [ ] Make incrementing loading play with tabs better so it's not slow on many file selections.\r\n* [ ] Quick Open support for buffers\r\n* [ ] Have an option to ignore hidden files/folders\r\n* [ ] Prefix support\r\n  -  : - vim command mode for current window\r\n  -  / - buffer search (integrate with the buffer search you added)\r\n  - ! - oni command mode (same commands shown in Ctrl+Shift+P)\r\n  - '`' - show available vim marks\r\n  - & - show available buffers\r\n  - Others.... >And cool list - it's neat to see the progress indication on the PR.\r\n\r\nDidn't realized it did progress I just wanted a nice list :).\r\n\r\n> But for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (, , etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings.\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\nIf we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\n>We might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nI will look into that.\r\n\r\n>    Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n\r\nI plan on adding a bg/fg color to the state by using &bg/&fg, if these are null then use default (i'm not sure what this is in nvim I've never looked at it honestly without a color for normal...)\r\nOn source/color scheme loaded recache these values, that way we can use them for our menus.\r\n\r\n>    Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nWe need a solution, I can use my binary to do this but there is not a good way in typescript without writing an algorithm or porting a library and their dependencies, however I think a solution implemented in typescript may not be the best solution but using something like ag/ripgrep/etc that way we can stream async and we don't use a scripting language that can't optimize as other coding bases. https://github.com/gjtorikian/nak currently writing a manual find, it's working pretty nice, almost done.\r\n typescript, only dependency is fs and ignore\r\n going to add support for a config ignore and config use global ignore ~/.gitignore > These will be awesome enhancements, but could you add \"update README\" to your list of todo's? We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent.\r\n\r\nOnce I have a concrete list :) This is more of a guide really. > Sorry I'm a bit late to the party here! Was (finally) reading through the comments \ud83d\ude04\r\n\r\nYou're good, I've been super busy so sorry about the late commits.\r\n\r\n> Sounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an embedded browser in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities!\r\n\r\nAnd I would LOVE to be able to do normal day to day things with the power of neovim, sounds revolutionary in a way :P.\r\nI wonder what would best to start implementing this, probably your change you are making would be a good start, then when I'm done with this PR I can try and get it to work for the input field, then that should make a pretty clear pathway for the rest.\r\n\r\nIf you don't care test it out, it works great for me, however like my commit says the overridden command doesn't seem to work. @extr0py \r\nAlso, this is the plugin I've been working on.\r\nIt might be buggy, if you find anything please let me know!\r\nhttps://github.com/cyansprite/Extract Nice gif for progress being made\r\n\r\n<a href=\"http://imgur.com/FAEwMU2\"><img src=\"http://i.imgur.com/FAEwMU2.gif\" title=\"source: imgur.com\" /></a> > Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time\r\n\r\nYeah I was super happy with the color-scheme outcome.\r\n\r\n> And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store.\r\n\r\nThanks, from when I use it it's pretty useful, I haven't found any bugs since the initial commits ( I think 14 while demoing? )\r\nHowever, there are a few improvements I can think of, let me know how it goes!\r\nAs far as I can tell it works with Oni, as it should since it works in vanilla neovim as well. @Bretley Feel free to take it over, I'm not working on this anymore, it's more of just staying here until @bryphe decides it's no longer necessary, I don't have time to work on Oni anymore fortunately. # Progress Made\r\n### Can select more than one item now\r\n   - c-i increments/decrements\r\n   - On enter/c-v/c-s opens all the incremented in buffers and whichever you enter/c-v/c-s on it will give that one focus.\r\n---\r\n### Can quickopen for colorschemes\r\n   - recaches each request due to not having a way to check if it updated outside of vim, it's fast so... I don't see this being a problem.\r\n### Fixed quickopen overflow with small windows\r\n   - Max width to cap at 600px (width before)\r\n   - width defaults to 70%\r\n   - details overflow-x: hidden so they aren't floating in random space...\r\n### Force open bookmarks\r\n   - Sometimes I want to open them even if I'm in a cwd other than home/install.\r\n---\r\n# TODO\r\n* [x] Force open bookmark/select folder\r\n* [x] Colorschemes activate on select instead of actually having to hit enter, this way you get a live preview of the colorscheme and you don't have to reopen each and everytime.\r\n* [x] Ignore binary files for all file gathering.\r\n* [x] Work on speed improvements\r\n* [x] Async files for things other than git folders\r\n* [x] State bg/fg colors for neovim to have for oni QO menus\r\n* [x] Cache files on directory change/construction\r\n* [x] Update ignore (we will use .gitignore kind of ignore)\r\n* [x] Be able to type as things load...\r\n* [x] Refine input field typing experience.\r\n* [x] Make incrementing only available for certain ```QuickOpenTypes```, currently this would be files.\r\n\r\n---\r\n### Future TODO\r\n- Cache files when we figure out projections/workspaces.\r\n- Searching through search results\r\n- Implement loc list with incrementing buffer lines and search results.\r\n- Buffer lines for ALL active buffers.\r\n- Preview and silent loading of buffers\r\n- <s>* [ ] Make editing shortcuts for (nvim temporary buffer/instance)</s>\r\n- * [ ] State popup bg/fg colors for neovim to have for oni AutoComplete menus\r\n* [ ] Merge #633 changes once they are done.\r\n## Gif Showing Basics Done so far.\r\n<a href=\"http://imgur.com/WUyfzsp\"><img src=\"http://i.imgur.com/WUyfzsp.gif\" title=\"source: imgur.com\" /></a>\r\n* [ ] Scrollbar... this is going to be fairly complex due to us only using 10 items right now, but... it shouldn't be <i>that</i> bad.\r\n* [ ] Figure out what color to make the highlighting. (Use a light bg you'll see what I mean.\r\n* [ ] Make incrementing loading play with tabs better so it's not slow on many file selections.\r\n* [ ] Quick Open support for buffers\r\n* [ ] Have an option to ignore hidden files/folders\r\n* [ ] Prefix support\r\n  -  : - vim command mode for current window\r\n  -  / - buffer search (integrate with the buffer search you added)\r\n  - ! - oni command mode (same commands shown in Ctrl+Shift+P)\r\n  - '`' - show available vim marks\r\n  - & - show available buffers\r\n  - Others.... >And cool list - it's neat to see the progress indication on the PR.\r\n\r\nDidn't realized it did progress I just wanted a nice list :).\r\n\r\n> But for all these cases, it'd be nice to have a the full set of neovim key bindings I have configured (, , etc). I was thinking, potentially, of having these textboxes essentially be tiny neovim windows - so that we could use neovim to process the keybindings.\r\nThat would be a bigger chunk of work, and depend on some of the initial multiplexing changes, so it might make sense to defer that piece (if that approach makes sense).\r\n\r\nIf we use the single neovim instance strategy we could use a temporary hidden buffer that the user doesn't have to know about (i.e. we don't show hidden buffers and unless they open it with buffers! they won't ever know, if they close it we can just open it again...) and so we can use this temporary buffer, use setline()/getline() and that will be our input field, this way we don't have to wait for a new spin each and every time, we can just edit the buffer as the text field tied to it, and then we can edit just like any other neovim buffer... it's a bit complex but it's a wildy awesome idea and I would enjoy this a lot, but I don't even know how it's hooked up to begin with but, yeah.\r\nOptionally we can have an entire nvim instance to itself... and other things we might want nvim to use but the user never interact directly, that might be an even better plan.\r\nWe could have nvim multiplexing or a neovim singleton, and then a nvim singleton for temporary operations like text inputs.\r\nThis kind of goes inline with #633 \r\n\r\n>We might be able to remove the '10-item' limit and use something like https://github.com/bvaughn/react-virtualized to only render a subset.\r\n\r\nI will look into that.\r\n\r\n>    Having the Menu use the current color schemes background / foreground colors - I noticed I had to darken up the background fade a bit, but it looked really nice - and might look even cooler with your colorscheme switcher!\r\n\r\nI plan on adding a bg/fg color to the state by using &bg/&fg, if these are null then use default (i'm not sure what this is in nvim I've never looked at it honestly without a color for normal...)\r\nOn source/color scheme loaded recache these values, that way we can use them for our menus.\r\n\r\n>    Have an incremental-loading experience. Like right now, if there is a big folder, we show \"Loading...\" but then don't show any results until everything is available. Most fuzzy-finders start showing files/results as soon as they can - that would be a huge experience improvement.\r\n\r\nWe need a solution, I can use my binary to do this but there is not a good way in typescript without writing an algorithm or porting a library and their dependencies, however I think a solution implemented in typescript may not be the best solution but using something like ag/ripgrep/etc that way we can stream async and we don't use a scripting language that can't optimize as other coding bases. https://github.com/gjtorikian/nak currently writing a manual find, it's working pretty nice, almost done.\r\n typescript, only dependency is fs and ignore\r\n going to add support for a config ignore and config use global ignore ~/.gitignore > These will be awesome enhancements, but could you add \"update README\" to your list of todo's? We need to be sure to track all the various key combos we're introducing, especially when there isn't a (neo)vim equivalent.\r\n\r\nOnce I have a concrete list :) This is more of a guide really. > Sorry I'm a bit late to the party here! Was (finally) reading through the comments \ud83d\ude04\r\n\r\nYou're good, I've been super busy so sorry about the late commits.\r\n\r\n> Sounds like we're exactly on the same page here! That's exactly how I was thinking of using it. I forgot to call out one use case I want to pursue also - I'd like to have an embedded browser in Oni (which is basically free, because Electron), and then use Neovim to manipulate text inputs. I think it'd be really helpful, at least for me, to be able to pop open github and use the keyboard to navigate around (#361) and use all the neovim-power I have to write text in the issues. Lots of cool possibilities!\r\n\r\nAnd I would LOVE to be able to do normal day to day things with the power of neovim, sounds revolutionary in a way :P.\r\nI wonder what would best to start implementing this, probably your change you are making would be a good start, then when I'm done with this PR I can try and get it to work for the input field, then that should make a pretty clear pathway for the rest.\r\n\r\nIf you don't care test it out, it works great for me, however like my commit says the overridden command doesn't seem to work. @extr0py \r\nAlso, this is the plugin I've been working on.\r\nIt might be buggy, if you find anything please let me know!\r\nhttps://github.com/cyansprite/Extract Nice gif for progress being made\r\n\r\n<a href=\"http://imgur.com/FAEwMU2\"><img src=\"http://i.imgur.com/FAEwMU2.gif\" title=\"source: imgur.com\" /></a> > Wow, that's awesome! Can't wait to have that integrated. It's so cool to see the changes to setting & configuration made real-time\r\n\r\nYeah I was super happy with the color-scheme outcome.\r\n\r\n> And thanks for linking the plugin, I'll check it out in a bit! I read through the README and it sounds interesting. I need to test it out / see how to map in my workflow. Yanking into a list and being able to grab from the list in a convenient manner sounds interesting, especially when you are juggling multiple items you want to store.\r\n\r\nThanks, from when I use it it's pretty useful, I haven't found any bugs since the initial commits ( I think 14 while demoing? )\r\nHowever, there are a few improvements I can think of, let me know how it goes!\r\nAs far as I can tell it works with Oni, as it should since it works in vanilla neovim as well. @Bretley Feel free to take it over, I'm not working on this anymore, it's more of just staying here until @bryphe decides it's no longer necessary, I don't have time to work on Oni anymore fortunately."
}