{
    "pieterv": "Awesome, thanks @Daniel15 !\n. Hmm interesting looks like it has scrolled the header down a little as well.\n. Unfortunately the table doesn't directly have touch support at this point, but stay tuned its coming soon!\n. @fingermark try it now :) We added touch support to the examples via the Zynga scroller.\n. Hey @matthughes this should be working now on the site! Thanks for the report!\n. Awesome!\n. @willywongi FF does seem to give a lower frame rate to Chrome, i will reopen this to see if we can find a way to fix this.\n. @jusio Awesome idea, i had a poke around in atom and like you said it looks like it has some good ideas we might be able to use! I use atom as my editor and have never seen it drop frames.\n. @nbostrom @wlis implemented @jusio's suggestion see #96, this is in the current master if you wanna check it out. We are seeing some pretty good perf wins in Firefox but its not perfect as a row pre-rendering doesn't seem to be working as effectively as in other browsers since Firefox doesn't seem to paint pixels until they are completely visible.\n. Hmm this didn't seem to totally solve the issue, but the code cleanup is awesome.\n\nThanks for this, ill merge it, push it live and we can see what else we need to do fix this.\n. This is live now :)\n. Tested locally, it works great. Thanks!\n. +1 I had this enabled but had to disable it as it was breaking the diff between client and server rendering since the html string generated from the markdown was getting modified, i will look at this when i get a chance. As for headers, i dont believe we have the option to set these from gh-pages hosting.\n. I have added the minification and file hashing. It took some serous webpack digging to work out that it applies an html minifier which is enable when you add the uglify plugin, this was causing the differences between the node and client React outputs.\n\nI don't really think loading React from a CDN is worth the complexity it would add for this site so im going to close this issue out for now, we can address it again if this because an issue.\n. This change is now live, the bundle is a lot smaller now.\n\nThanks for the issue!\n. Awesome! Thanks @jartek\n. Yes this is used for Facebook's internal runtime type checking system which predates Flow (you will notice the React codebase has these tags well), the intention is to upgrade this to Flow at some point. It would be awesome if the community could contribute to this as well!\n. We have started adding some basic flow typed code, when we update code we will make sure it is typed.\n. @songz like @michaelcarter-wf said you will need an es6 Object.assign shim for the code to work. es6-shim will work, or a light weight option like https://github.com/sindresorhus/object-assign then do `Object.assign = require('object-assign');` would also work.\n\nPlease let us know if you can think of a more descriptive error message that would help you solve this issue faster.\n. Just a note to say with #102 the `Object.assign` polyfill will no longer be needed :)\n. Hey sorry this is such a pain, #102 will be out soon :P If you want in the mean time you can run the objectAssignTransformer yourself which should fix the issue for you, so grab the `objectAssignTransformer.js` file from the PR then add `\"plugins\": [\"./path/to/my/stuff/objectAssignTransformer.js\"],` to your babel config and that should fix it.\n. Hey @cendy172, Update to the new version we just released (0.2.0) and this issue should be fixed, we don't need the polyfill anymore :) Let me know if not.\n. see #11, If you want to run the code from github you need to build the repo first via `npm install && npm run build-npm`\n. AWESOME! :+1: \n. Awesome! Thanks for this, we should probably also write a little about how the source CSS gets transformed to remove `/`'s.\n. This is live now :)\n. @ettysekhon Do you have any kinda of touch support on your laptop? I think this might be a configuration issue with the examples rather than a problem with the table itself. Thanks for the report, we will look into this!\n. Im pretty sure this is related to our touch checking code, our internal apps that use the table are working fine with IE11 but i am able to reproduce this issue on the example site. You can also see how no scroll bar is showing up which tells me table scrolling is explicitly being turned off as would happen if it thinks it should be using touch. Sorry this should be easily fixable but i haven't had the time to do it yet, i will get to it pretty soon :)\n. @luisrudge No we are effectively using the version that is on github master along with react master :) But the places where it is used don't currently support touch so we don't have the added touch support wrapper that we have for the `FixedDataTable` site examples, thats why i'm pretty sure its not a problem in the core table as we would know about it if was :P\n. @mjibson Yes i think this makes sense, we also have `onRowMouseDown` but not up. You can probably use CSS to get around this for now but there are certainly use cases which warrant having enter and leave.\n\ncc @wlis, @jbonta any reason why we wouldn't want to add these?\n. I guess we just need to add a link in the README to the dist files. For UMD support we just need to add a flag in the `webpack.conf.js`.\n. Yes a CDN would be sweet, im not sure how to do that. Im curious is there any advantage over using rawgit.com?\n. I have added UMD support and versioned build files are available via https://github.com/facebook/fixed-data-table/releases. I will create a specific issue for adding files to the CDN.\n. Awesome! Thanks for this.\n. Hey @onemanstartup, can you please give us a little more info around this issue. Is this happening on the sites examples? or just locally? is this installed via npm or the dist bundle?\n\nAgree we should add some more info around browser support/environment requirements, feel free to create another issue for this.\n. Hey @onemanstartup @jusio i'm having some trouble reproducing this issue. I created this minimal test case repo based off your example code above (https://github.com/pieterv/fixed-data-table-test), this runs fine for me locally. Could you try checking this out to see if it works for you and maybe tweak it till you can reproduce your error.\n\nThanks for your help, this seems like a strange error, it would be good to get to the bottom of it :P\n. @onemanstartup hmm adding `devtool: \"eval\"` to my config still didn't reproduce the issue :S, i'm on chrome 40, any other ideas? I wonder if this is some kinda webpack issue, I can't imagine what we are doing that would cause this.\n. Hey @jusio, thanks for the awesomely detailed bug report, thanks to this after a lot of digging i think i have found the issue!\n\nSo first to reliability reproduce the bug i found that if you close the dev tools, then refresh the page it would show up as soon as you scrolled the mouse wheel.\n\nI believe the issue is related to how webpack is packaging the files then `eval`ing them in combination with the `\"use strict\"` declaration. So the quick fix for this is to remove the \"use strict\" definition from `node_modules/fixed-data-table/internals/ReactWheelHandler.js` line 40. Removing this code seems to reliable fix the error for me as it allows the function to use the global `normalizeWheel` var (it seems to be `eval`ing it into global scope).\n\nThere is two ways to fix this issue, one hacky quick way is for us to remove \"use strict\" from our files, which i would really rather not do. Or the other way is for webpack to wrap the eval string of the modules in a self executing function which it does for most modules that use custom globals like `process` anyway. @jusio @onemanstartup In the mean time you can make the change locally and maybe we should file an issue on the webpack repo to see if they are able to fix it.\n. By the way @jusio that looks like an awesome chrome plugin, it's awesome to see this project being used outside of Facebook!\n. @jusio Awesome to hear! It's comments like that that make it worth it for us!\n\nGood idea i will create an issue with webpack.\n. After some poking around on github issues it seems this is a known issue and can be fixed by adding a `\"use strict\";` to the top any file that uses ES6 classes (which will remove them from being inserted in each method), i believe `ReactWheelHandler` is the only module that falls in this category but i will double check.\n\nRelated issues:\nhttps://github.com/webpack/webpack/issues/417\nhttps://github.com/facebook/flux/issues/45\n. This should be working in the `0.1.1` release, let me know if not.\n. This is intentional, when you don't use attribute expressions the number gets passed through as a string which means we could have weird side effects when doing basic math operations for example `10 + '5' = '105'`. When in dev mode you should be getting a nice error about this from the propTypes checks.\n. Hey @gsklee, thanks for the PR! Unfortunately we can't merge this as these markdown files are generated from the source code and would get overwritten on the next update. But this did help me identify a few issues, one is we should able to simplify the [propType check](https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableColumn.react.js#L88) for dataKey using `propTypes.oneOfType()` and after looking into fixing this i also found that we aren't validating the propType for the column components.\n. Thanks again for this, i have made the change to the source and pushed out the new docs to the site: http://facebook.github.io/fixed-data-table/api-column.html\n. Hey @andrewrota, yes unfortunately this feature does not work as we are overriding the browser native scrolling and reimplementing it, this means we have missed off some of these platform dependent features.\n\n@wlis is looking into ways we can take advantage of the browsers native scrolling yet maintain (or increase :P) our scroll perf, which should fix this issue and some of the other related issues.\n. Hey @bakesteve, sorry this is an issue with the examples code not so much to do with the core table itself. So the table doesn't have direct built in touch support and we add it in manually using Zynga scroller. The problem is coming from our some what [naive logic to determine whether we should use touch support or mouse support](https://github.com/facebook/fixed-data-table/blob/master/site/examples/TouchExampleWrapper.js#L23-L26). We are looking into ways of making this better support in the table itself, but if you have any suggestions of how to make the logic in the examples better in the mean time that would be awesome!\n. @ofersadgat Awesome!\n. @ofersadgat i have put your change live but it doesn't seem to have worked for me :/\n\n@bakesteve Can you check if its working for you?\n. Nice!\n. So the thing that makes these type of features possible is the [`headerRenderer`](http://facebook.github.io/fixed-data-table/api-column.html#-datakey-required-) prop on `<Column />`, this allows you to override the default header implementation with anything that is renderable via `React.render()`. So for sorting this is how you would render your own elements that have `onClick` handlers which you then use to know when to sort your data. As for reordering columns you can probably do it the same way but it will be a bit more involved as you will need to listen to drag events then reorder the columns as the drag happens.\n\nIt would be very nice to have an easy way to do these things out of the box, we already have a nice sortable header component with some good sorting utils that we use in Facebook so we might be able to clean that up and add it to the core. For column reordering we should at least have a nice example that shows how it could work.\n. @RnbWd Yeah exactly just think of it like any other React render method.\n\nSo you might end up with a `headerRenderer` function like this to do the sorting:\n\n``` javascript\nfunction renderHeader(label, key) {\n  return (\n    <div\n      onClick={handleClick.bind(null, key)}>\n      {label}\n      <MyArrow\n        direction={getCurrentDirection(key)}\n      />\n    </div>\n  );\n}\n```\n. Awesome, thanks again for doing this! I will merge this in locally so i can add the key before pushing to master.\n. @jardakotesovec yes sorry the table should support this by default and we plan on implementing this soon. We should be able to see when the user gets to the bottom scroll point and stop preventing default at that point.\n. This should be fixed in the latest release :)\n. Yes fixed-data-table works great with react 0.13 (internally Facebook uses react master), but you are right we should update the package to allow npm installing with react@0.13. We should be able to put out a new release pretty soon with this change.\n. @TomClarkson I have released `0.1.2` which updates the package.json to support react `0.13.0` as well as `0.12.x`. Sorry i didn't get to this early but i couldn't get the package.json config to allow the beta version as a dependency.\n. Hey @TomClarkson thanks for the awesome bug report! From looking through your code it looks like a webpack related issue, see https://github.com/facebook/fixed-data-table/issues/20#issuecomment-73403088. We should have a fix out for this pretty soon!\n. Should be fixed in v0.1.1, let me know if not.\n. Good catch! I guess we just need to refactor the `if` statement. Feel free to do a pull request for this :P\n. Hey @jusio sorry about the late reply and thanks for this PR! This change makes a lot of sense, if you can make the suggested comments then i can pull this in :)\n. Nice! That makes it easy :)\n\nThis looks good to land, ill just sync the change into Facebook, then merge it :)\n. Awesome, just landed this into FB. In the future we should probably do that check in the invariant via propTypes.\n. @wlis was this something you fixed?\n. Hey @jalateras, @ofersadgat was right the [`rowGetter`](http://facebook.github.io/fixed-data-table/api-table.html#-rowgetter-required-) needs to be a function. Check to see if that fixes it, if not you will need to look into your browserify config, `process` is a global in node which we use to check the environment type (dev or production), browserify normally defines this for you but maybe you have that turned off, maybe check your browserify `detectGlobals` config.\n\nIm going to close this out since its not a bug in the table per se, but let us know if you can't figure it out.\n. @ofersadgat that is correct, you will need to use the row index as the seed for your random number generator. Or just use some like the modulos operator: `return colors[index % 3]` which will be stable.\n. Closing this out since its not really something we can \"fix\" and is intended behavior :)\n. @jamnanlaw I have a fix ready to sync which fixes the two issues you pointed out :) with this change the table renders from the server great, the problem we then have is that react cannot mount onto the rendered HTML since its renders differently based on the environment :(, this is the main culprit: https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/translateDOMPositionXY.js#L23-L45. We will probably need to change the code to always render with `top` and `left` on the first pass then use `translate` if the browser supports after that.\n\nSo a long answer but yes we intend to support server rendering :)\n. Sorry no we haven't made any progress here, this just isn't a use case we have needed. The solution described above is still valid and shouldn't be too hard if someone wants to have a go at solving this.\n. I think `reloadRowAtIndex` fn would make sense given our existing API but what i would rather see is a more react \"like\" declarative API, although I don't have a good idea of what that would look like. If that looks like it will be a big change we may do this in the mean time. Any thoughts on this approach?\n. Good point! This makes a lot of sense, feel free to send a PR for this change or i can do it at some point :)\n. I would say its missing, we are missing a few events like this. If you want you can defined this on a individual cell via a `cellRenderer`. But we should look to adding these events to Rows.\n. We can probably look at doing this soon, although a pull request for these changes would certainly speed up the process :P\n. Something like this should work (i haven't tested it):\n\n``` javascript\nfunction handleDoubleClick(index, event) {\n  // handle dbl click\n}\n\nfunction cellRenderer(content, index) {\n  return (\n    <div styles={{height: '100%'}} onDoubleClick={handleDoubleClick.bind(null, index)}>{content}</div>\n  );\n}\n```\n\nYou might need to move the default cell padding to this inner element to capture all the clicks.\n. @airwin have you tried the new [`allowCellsRecycling`](http://facebook.github.io/fixed-data-table/api-column.html#-allowcellsrecycling-) config in v3.0? It was designed to solve the use cases described here by not rendering columns when they leave the viewport.\n\ncc @wlis \n. With `0.6.0` you have the option to use your own Cell (so you dont need the 3+ divs that come with the current default cell), i'm hoping this will help make over head of the table less. Let us know if this release helps at all.\n. \\0/ Nice...\n. Awesome, thank you @ofersadgat!\n. Hey @nt591, thanks for the PR, sorry its not obvious but these API docs are auto generated from the source code. If you could make the change here: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTable.react.js#L237 it wont overwritten the next time we build the docs :)\n. Fixed via #54 :)\n. Looks good!\n. A couple of things, first you need to use gitraw so it gets the right headers for JS, then you will need to polyfill `Object.assign` which is where it gets a little hard :P \n\nI was able to get it going with JSBin: http://jsbin.com/zocituvuyi/2/edit\n. You need to define an onChange handler and then set the value, see: http://facebook.github.io/react/docs/forms.html#controlled-components\n. http://jsbin.com/kuyixo/1/edit?js,output\n\nThe table wont rerender a cell unless the data for the cell changes, and since we were by passing the cells data input and referencing the state directly in the cellRenderer it didn't know the data had changed and hence didnt know to rerender. \n. You had a typo, you were setting the data for the clicked row back in place of the rows: http://jsbin.com/ribulu/2/edit\n\nMore correctly cellRenderers will not be called again unless the cells associated data changes.\n. http://jsbin.com/temufa/2/edit\n\nSo you need to create a new instance of your object data, its the same reason i was `slice()`ing the array. If you don't do this you will still have referentially equal objects and `oldObject === newObject` will still equal true. The react update helper might be helpful if you are doing lots of these updates.\n. Yeah, thats the one.\n. @eugene1g :open_mouth: \n\nWe should definitely add this to the main readme but at this point the browser support looks like this:\n- Chrome\n- Firefox (will be faster/better supported in the coming release)\n- IE9+\n  - IE11 - On Windows 8 touchpad two finger scrolling doesn't work.\n  - IE9 - Support is likely to be deprecated for this browser very soon.\n. @mkawalec nice catch, we should definitely document this :P but like @mfunkie said could you please add the prop type to https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableColumn.react.js then if you run the docs build `npm install && \n./build_helpers/buildAPIDocs.sh` it will update the markdown file.\n. Hey @dannymk, You will need an ES6 compatible `Object.assign` polyfill. `'object-assign'` is a good one, you can then do `Object.assign = Object.assign || require('object-assign');` before you require `FixedDataTable` which should fix the problem.\n. Hey @matrinox, i have been thinking about this `visibleRows` style API for a while but i'm not totally convinced it would be needed. What would be the advantage to using this `visibleRows` callback over just batching up all data request within a single event loop and then breaking that into request batches? (other than the frame work providing the logic for you :P)\n\nHere is an example of how i would build the batching logic: http://jsbin.com/temufa/9/edit?js,output\nYou will notice it will also request data outside of the view based on where it thinks you will scroll to, because we are using the rowGetter we can take advantage of the row prerendering triggering requesting data.\n. Agree with @hedgerwang  but this does seem initially non obvious. I think this would be a good example we could add to the site. Im going to close this out and create a task for it.\n. @bizmurr sure i have added it to the list and created a jsbin example, its pretty similar to the sorting example.\n. @gsklee This is pretty weird, looks like it might be a lower level react problem, as from the screenshot it is rendering the correct value just the DOM is not being updated. Do you mind having a try at creating a simple repo case so i can dig into it? here is a good jsbin to start from: http://jsbin.com/valoco/5/edit?html,js,output.\n. Hey @dannymk, the fixed data table applies a very aggressive shouldComponentUpdate function, which stops the `cellRenderer` from being called unless some data associated with that renderer has changed. The way we figure our what data is needed to render a row is via the `rowGetter`, so the issue above is that the state you are expecting to update your cellRenderer is not returned from the `rowGetter` so the diff does know that something has changed.\n\nHere is an example of how it could work by embedding the data within the row object:\nhttp://jsbin.com/temufa/18/edit\n\nThe other way to provide this behavior is for the cellRenderer to just return a single [react container](https://medium.com/@learnreact/container-components-c0e67432e005) which is responsible for subscribing to store data changes and updating the cell via setState. We do this for a lot of our applications but this only makes sense if for larger tables with a lot of different possible data types.\n\nWe are thinking about removing this aggressive shouldComponentUpdate functionality to make the table render more predictability but it will have a large performance cost if all cells rerender with each set update, so we are still trying to find the right balance here :)\n. @rovolution I created this example yesterday which shows how you can implement sorting which should help http://jsbin.com/temufa/10/edit?html,js,output\n\nAfter not seeing to much detail my guess as to your problem is that the data your updating via setState is not being returned from the `headerDataGetter` and so the `headerRenderer` doesn't see the data has changed and doesn't update.\n. Yes it was just simpler that way for this example but you can also pass more complex data via `headerDataGetter`, just remember if you want the cell to render the data returned needs to change :)\n. Im not sure i understand this change, could you give some more detailed information on what the current behavior is on render and what this effect this change will have?\n. @marcneuwirth Nice, yes this makes sense! Thanks for the detailed explanation. This should also be fixed when we move to the `React.cloneElement` API instead of `cloneWithProps` but this is a good interim solution.\n. @ondrejhlavacek thanks for bring this up. This is an interesting side effect of the way we are pooling react components and reusing them as the user scrolls. Maybe we can force them to unmount which might fix this, but we want to be careful we don't loss the ability to reuse the underlying DOM node.\n. Hey @gaearon, Thanks for this. We build the docs via react-docgen so i had to manually add the changes back to the source and merge, see https://github.com/facebook/fixed-data-table/commit/45d64c0f5bda94548d05df5da825e4d124be0e7f\n\nThanks!\n. I have deleted the generated markdown files from the repo so it should be clearer for other in the future :)\n. Hey @gsklee Thanks for the issue, this sounds pretty easy to fix, we should just force intergers when the value comes in :P\n. Thanks for the PR! i have manually merged this here: https://github.com/facebook/fixed-data-table/commit/5a55671722b12accc4ff1d63d0c2089b9192a99a\n. Sounds like this is a dependency issue, feel free to reopen if your still having trouble with the new version after reinstalling.\n. @gsklee @benshimmin Sorry we know this is bad and are planing on fixing this for the next release. For now a hacky fix for this if you know you don't need any scrolling is to set `overflowX=\"hidden\"` `overflowY=\"hidden\"` http://jsbin.com/valoco/12/edit.\n. This should be fixed in the latest release :)\n. I will take this after this release so we don't break React 0.12 support\n. This should help with #5 :)\n. Hey @gsklee, thanks for the PR. Yeah this behavior is a little weird. So we have both `maxHeight` and `height` so our plan is to change `height` to make it work like you suggested (always stuck to the bottom) and then make sure `maxHeight` maintains the current behavior :)\n. They @gabelevi thanks for the PR we fixed this in 0.2.0 by allowing maxHeight or height which have the two different behaviors :)\n. @JedWatson Im using your babel-plugin-object-assign project here :) Unfortunately i couldn't use the project as a dependency as it was giving me an error about using two different instances of Babel, i think your project might need to use peerDeps to solve this but not sure. Anyway thanks for creating this!\n. @ifrit :) I have merged it in, we are aiming to do the release next week.\n. Hey @cesarandreu, @ifrit, @zackify sorry for the delay but we have now done the v0.2.0 release, with this code in it! Check it out, and please let us know if something doesnt work for you :)\n. @hipertracker I will build the dist files when we release. As for the `React` i had it that way was the browser global for react is `window.React` not lowercase but ill look for a way to support both. Thanks for the feedback!\n. @hipertracker after some sleuthing around other webpack configs i think have the solution now. If you could try the new changes that would be very helpful :)\n. Nice! Thanks for testing.\n. Hey @hipertracker i assume you got this going, the repo seems to be working fine for me. Pretty sweet demo as well!\n\n![image](https://cloud.githubusercontent.com/assets/438482/7739714/b0bbb2fe-ff1a-11e4-9596-5d7fca7892e2.png)\n. @TomClarkson Sure that should be doable\n. This release is out! https://github.com/facebook/fixed-data-table/releases/tag/v0.2.0\n. Not at the moment, rendering a row is currently very complex especially with fixed columns and it would be hard to allow a user to do this and still render correctly. This something we will think about when refactoring the core to be more flexible in the future but its not on the immediate road map.\n. Hey @difelice, thanks for the PR. I think this usecase is already covered by the user being able to determine if a column should be rendered at all:\n\n```\n<Table>\n  <Column />\n  {hidden ? null : <Column />}\n</Table>\n```\n. For this use case you can use the `headerDataGetter` on the Table component  to return the relevant data into the headerRenderer :)\n. I fixed this with #110, if you pull down master and then do a fresh `npm install` it should work :)\n. Hey @Andreyco, PR would be awesome! This is definitely something we want, we just haven't had the time to do it.\n\nSo the way we have thought about approaching this is to split out layout specific css and styling \"theme\" css. The layout styles should include anything that is required to make the table function/ position correctly (like you described). With the \"theme\" being everything else including borders and such. Ideally we would split the current stylesheets in two different css files for each one and create different classes for both the styling hooks and the layout. In the long term we see the layout styles being included as inline CSS in the react component but we don't think our tooling this ready for this yet, with this in mind it makes splitting the class names out more important so its easier to remove and pull the style inline in the future :)\n\nLet me know of you have any questions or need any help.\n\ncc @jbonta Do you have any other thoughts on this?\n. Hey @jmcpeak, hmm i think the order of requires is wrong in that fiddle which is throwing it off. I tired getting the project working in jsfiddle a while back but i couldn't get it easily setup due to the need for the object.assign polyfill before defining the table, but this should be easier in the next version of the table where this is not needed. I did setup the project with jsbin which has been working well for me: http://jsbin.com/valoco/10/edit?html,js,output\n. Hey @allanbond shouldn't it be enough to install via `bower install facebook/fixed-data-table` and reference the dist files? What advantage does having the bower.json file give? Bower can look at git tags right?\n. Hey @DanielMiddleton the table handles most of this logic for you and will call the `rowGetter` function as the rows get close to being in view, the one key thing is you will need to give it an absolute number of rows so the scollbar size can be estimated but you can update the value over time as you get more data. Here is an example of how this can be implemented http://jsbin.com/temufa/8/edit?html,js,output)\n. Hey @Andreyco, Sorry for the slow response. This PR looks really good! Ill get @jbonta to give it a full review soon. Also I can take a look at the build step stuff if you wanna remove it from this PR.\n\nThanks for putting this together!\n. @jbonta how do you feel about having all the theme styles in a single file? Is it worth splitting them out?\n. No we don't have our own chat room but i do hang out in the #reactjs IRC chat room if you want to ping me there :)\n. Nice find! Would love a PR for this :)\n. Awesome, thanks for the PR @llh1, if you can do the change @hedgerwang suggested then i can merge this in :)\n. Awesome, thank you @llh1!\n. Thanks for bring this up this will be super useful for when taking on accessibility.\n\ncc @jbonta \n. So we have unit tests setup for this code in the FB code base which we run when we sync code changes back in to FB we just haven't had the time to pull them out and setup the infra in this repo. I agree this is pretty bad though :(, ill try setting this up before the next release.\n. Hmm interesting its working for me on Chrome and Firefox on Mac, it looks like Zynga scroller is failing for you. Do you mind checking to see if your getting any failed network requests?\n. Hmmm thats interesting i will have to take a deeper look, thanks for the detailed info!\n. Hmm looks like this is a CDN issue, i will see if i can find a more reliable place to host this file.\n. Yeah you will just want to setup a custom `cellRenderer` on the column which you can then render what ever you want with react :)\n. @ConAntonakos I think in the latest React you would write it like this if your not using JSX:\n\n```\nfunction renderLink(cellData){\n  return React.createElement('div', { dangerouslySetInnerHTML: {__html: cellData} });\n}\n```\n\nDoes that work?\n. Hey sorry @iammerrick i'm probably too late to help you but there was nothing inherently wrong with what you had i don't see any reason it shouldn't work. \n\nI ran the following code and it worked fine for me, maybe try with the latest release?\n\n```\nimport React from 'react';\nvar FixedDataTable = require('fixed-data-table');\nrequire('fixed-data-table/dist/fixed-data-table.css');\n\nfunction DataTableHandler() {\n  return class DataTableHandler extends React.Component {\n    render() {\n\n      var Table = FixedDataTable.Table;\n      var Column = FixedDataTable.Column;\n\n      // Table data as a list of array.\n      var rows = [\n        ['a1', 'b1', 'c1'],\n        ['a2', 'b3', 'c2'],\n        ['a3', 'b3', 'c3']\n      ];\n\n      function rowGetter(rowIndex) {\n        return rows[rowIndex];\n      }\n\n      return (\n        <Table\n          rowHeight={50}\n          rowGetter={rowGetter}\n          rowsCount={rows.length}\n          width={5000}\n          height={5000}\n          headerHeight={50}>\n          <Column\n            label=\"Col 1\"\n            width={3000}\n            dataKey={0}\n          />\n          <Column\n            label=\"Col 2\"\n            width={2000}\n            dataKey={1}\n          />\n        </Table>\n      );\n    }\n  }\n}\n\nexport default DataTableHandler();\n```\n. Hey @mikestead Thanks for the PR!\n\n@jbonta @wlis What do you think about changing the scroll bar to not overlap the header?\n. This should work now with the latest releases dist build, you will need to make sure you install and require React before the table.\n. Exciting! I feel a release coming :P\n. Nice, thanks for the quick PR, hmmm would prefer to use `Math.round` so its a bit clearer whats happening + round will go to the closest value not just strip the decimal :)\n\ncc @wlis Do you think we should do it here or on the resulting value so we don't need to round every prop?\n. Hey @cesarandreu thanks for bringing this up! I have put this info into the github release :) https://github.com/facebook/fixed-data-table/releases/tag/v0.2.0 And we will continue to do this for all future releases.\n. With the \"Replacing getDOMNode with findDOMNode\" commit we will be breaking compatibility with react `0.12.x` this seems fine to me but we should make this clear in the release notes and update the package.json.\n. This looks good to go, merge when ready.\n. Awesome! Looks good to me. Release when ready :)\n. Awesome! once you have cleaned up the minor lint issues and squashed the changes into one commit you can merge when your ready :)\n. Awesome!\n. cc @jbonta \n. This looks good to me. Merge when ready :)\n. So much red :heart::heart::heart: this is looking really good! Lets get this in.\n. FixedDataTable will definitely work with the beta since FB runs React master internally. But last time i tried to do this i couldn't get the npm dependencies to allow a beta as well as the normal versions. If anyones has an idea how the npm dependency versioning should look for this i will be happy to do the release.\n. @cesarandreu thanks for the info! Let us know if the release doesn't solve the problem for you.\n. @bolinfest i'm not happy with the approach taken here, as a library special casing one particular consumers use case like isn't a maintainable solution for us given all the consumers we have and their needs. Its great we could unblock you for this but lets work together to find a way to alias the react module at your build level (babel has a way to do this) as we wont be able to maintain this special case long term and i would guess not all libraries are going to be so accommodating.\n. I would recommend for this using a transparent border, this way you keep the width but it looks like its not there. Our default layout theme does this. In the future we are looking to make this stuff configurable via inline styles but its currently assumed in a lot of places\n. The other thing you can do is in each cell on `componentDidMount` you check the contents height via `React.getDOMNode().outerHeight` (or something like that) then use that to reset the height of the row. The downside is this will be pretty hard to get to run a performant way. The auto content sizing is not something we are looking at adding to this library.\n. Hey @fullvlad yes this is possible, at FB we have this functionality with FixedDataTable for one of our ads products. For something complex like this I would suggest connecting each cell to its data source directly, we do this via Flux, each cell connects to its data store based on the row index and binds to events which will set state on the cell (rather than passing the data back through the data getter).\n. Check out the `0.6.0` release with this there are no limitations on what can be passed to a cell since we don't own any of this state.\n. @vojtech-dobes I though this was the case (that `rowHeightGetter` would only be called for visible rows), @wlis any thoughts here?\n. Thanks @masonicboom i have fixed this with fb7b6f4494af0c3c7a20c55e7d11271b1ebb9777\n. I have done a quick release with @chentsulin's PR to allow `react@0.14.0-rc1` as a dep (https://github.com/facebook/fixed-data-table/releases/tag/v0.4.7) and will try to do another release shortly to clean up the warnings.\n. Sorry there is no standard way in the FixedDataTable to do this, in theory you should be able to build this in your cell by measuring all the column content after render then set the width. This is not an API we expect to add to the table since it would be very hard to do it a performant way.\n. Yeah you likely are missing a bind somewhere.\n. Thanks!\n. Awesome thanks for this @chentsulin!\n. I have pushed out the `0.5.0-rc1` package which adds support for React `0.14.0`, if someone can try it out and make sure its working for you i can publish the stable `0.5.0` release.\n. Thanks @musbaig! i have now published 0.5.0\n. Awesome, glad to hear this. Let us know if you run into problems with this!\n. You will need to listen to the window resize event and then update the table with when it changes, here is how we do it for the examples page: https://github.com/facebook/fixed-data-table/blob/cf28c0e78a3859c9a6e5d94fc84912e28d64f62a/site/examples/ExamplesPage.js#L100-L116\n. Hey @johnnyji check out the latest `0.6.0-rc1` release ([docs are here for now](https://github.com/facebook/fixed-data-table/tree/master/docs)). With this, the fixed data table no longer needs any data via the `rowGetter` so you can use whatever data structure you want :)\n. Sorry its not possible with the current release. If you check out the latest `0.6.0-rc1` release ([docs are here for now](https://github.com/facebook/fixed-data-table/tree/master/docs)). With this, the fixed data table no longer needs any data via the rowGetter so you can access data however you want :)\n. cc @ehzhang @wlis\n. No worries :) I simplified the examples a bunch to :)\n\nWill be great to finally release your awesome work!\n. :dancers::dancers::dancers: \n. This code has been released as [`v0.6.0-rc1`](https://github.com/facebook/fixed-data-table/releases/tag/v0.6.0-rc1)! Im working on docs now for the full release.\n. Sorry we are halfway through a release, the example in the readme is for the `0.6.0` release which is only released as `0.6.0-rc1`. You are welcome to try this out (it will be release properly very shortly) or the docs for the current release are on the site.\n. Hey @marduke182, thanks for the PR. The way i was thinking about in the past to solve this was to have some state that tells us we are in the first pass and always render positions with `left` and `top` (since we know all browsers support this but not translate pos), then on any other render from there we can use the fancy translate3d stuff. See the inline message for why i think the current approach in this PR is bad. Do you think you would be able to update this to do that?\n. Hmm i dont think this flag necessarily needs to live on state, since we don't actually want to force a render as a result of changing it, we just need a flag to signify that we are now out of the first render. The down side of this is it will make the render more non-pure, but it wont be to much worse than it already was (since it already relies on global state).\n\nso:\n\n```\ncomponentDidMount() {\n  this._initialRender = false;\n}\n```\n\nLets also create a wrapper around `translateDOMPositionXY` module that does this logic (`translateDOMPositionXY` is hard for us to change since its a core FB module), so if is `this._initialRender` then use `left` and `top` then after this we just delegate to `translateDOMPositionXY`.\n\nThanks for taking this on!\n. Thank you for this!\n. Oh thanks for the issue, i think i know what i might have missed when messing with the examples for the  latest release.\n. cc @wlis @jbonta @dehamilton\n. Oh yeah we should fix this up, so whats happening here is this is where we reach the maximum size of a div that the browser supports, so it just stops rendering after that height, we should change all the examples to instead of rendering 1,000,000 rows we render 500,000 or something. If you have time to submit a PR this is the the number you need to change for each example: https://github.com/facebook/fixed-data-table/blob/master/examples/ResizeExample.js#L32\n. oh wow :( thanks for this!\n. Oh nice! Would love a PR for that.\n. Thanks for working on this @zpao. The synced code looks good, it contained everything I expected. The build system is looks nice although i didn't look into it with a huge amount of detail. Let me know if you want me to do another review or help out with testing.\n. let me know if i broke anything :D. Awesome, thanks @Daniel15 !\n. Hmm interesting looks like it has scrolled the header down a little as well.\n. Unfortunately the table doesn't directly have touch support at this point, but stay tuned its coming soon!\n. @fingermark try it now :) We added touch support to the examples via the Zynga scroller.\n. Hey @matthughes this should be working now on the site! Thanks for the report!\n. Awesome!\n. @willywongi FF does seem to give a lower frame rate to Chrome, i will reopen this to see if we can find a way to fix this.\n. @jusio Awesome idea, i had a poke around in atom and like you said it looks like it has some good ideas we might be able to use! I use atom as my editor and have never seen it drop frames.\n. @nbostrom @wlis implemented @jusio's suggestion see #96, this is in the current master if you wanna check it out. We are seeing some pretty good perf wins in Firefox but its not perfect as a row pre-rendering doesn't seem to be working as effectively as in other browsers since Firefox doesn't seem to paint pixels until they are completely visible.\n. Hmm this didn't seem to totally solve the issue, but the code cleanup is awesome.\n\nThanks for this, ill merge it, push it live and we can see what else we need to do fix this.\n. This is live now :)\n. Tested locally, it works great. Thanks!\n. +1 I had this enabled but had to disable it as it was breaking the diff between client and server rendering since the html string generated from the markdown was getting modified, i will look at this when i get a chance. As for headers, i dont believe we have the option to set these from gh-pages hosting.\n. I have added the minification and file hashing. It took some serous webpack digging to work out that it applies an html minifier which is enable when you add the uglify plugin, this was causing the differences between the node and client React outputs.\n\nI don't really think loading React from a CDN is worth the complexity it would add for this site so im going to close this issue out for now, we can address it again if this because an issue.\n. This change is now live, the bundle is a lot smaller now.\n\nThanks for the issue!\n. Awesome! Thanks @jartek\n. Yes this is used for Facebook's internal runtime type checking system which predates Flow (you will notice the React codebase has these tags well), the intention is to upgrade this to Flow at some point. It would be awesome if the community could contribute to this as well!\n. We have started adding some basic flow typed code, when we update code we will make sure it is typed.\n. @songz like @michaelcarter-wf said you will need an es6 Object.assign shim for the code to work. es6-shim will work, or a light weight option like https://github.com/sindresorhus/object-assign then do `Object.assign = require('object-assign');` would also work.\n\nPlease let us know if you can think of a more descriptive error message that would help you solve this issue faster.\n. Just a note to say with #102 the `Object.assign` polyfill will no longer be needed :)\n. Hey sorry this is such a pain, #102 will be out soon :P If you want in the mean time you can run the objectAssignTransformer yourself which should fix the issue for you, so grab the `objectAssignTransformer.js` file from the PR then add `\"plugins\": [\"./path/to/my/stuff/objectAssignTransformer.js\"],` to your babel config and that should fix it.\n. Hey @cendy172, Update to the new version we just released (0.2.0) and this issue should be fixed, we don't need the polyfill anymore :) Let me know if not.\n. see #11, If you want to run the code from github you need to build the repo first via `npm install && npm run build-npm`\n. AWESOME! :+1: \n. Awesome! Thanks for this, we should probably also write a little about how the source CSS gets transformed to remove `/`'s.\n. This is live now :)\n. @ettysekhon Do you have any kinda of touch support on your laptop? I think this might be a configuration issue with the examples rather than a problem with the table itself. Thanks for the report, we will look into this!\n. Im pretty sure this is related to our touch checking code, our internal apps that use the table are working fine with IE11 but i am able to reproduce this issue on the example site. You can also see how no scroll bar is showing up which tells me table scrolling is explicitly being turned off as would happen if it thinks it should be using touch. Sorry this should be easily fixable but i haven't had the time to do it yet, i will get to it pretty soon :)\n. @luisrudge No we are effectively using the version that is on github master along with react master :) But the places where it is used don't currently support touch so we don't have the added touch support wrapper that we have for the `FixedDataTable` site examples, thats why i'm pretty sure its not a problem in the core table as we would know about it if was :P\n. @mjibson Yes i think this makes sense, we also have `onRowMouseDown` but not up. You can probably use CSS to get around this for now but there are certainly use cases which warrant having enter and leave.\n\ncc @wlis, @jbonta any reason why we wouldn't want to add these?\n. I guess we just need to add a link in the README to the dist files. For UMD support we just need to add a flag in the `webpack.conf.js`.\n. Yes a CDN would be sweet, im not sure how to do that. Im curious is there any advantage over using rawgit.com?\n. I have added UMD support and versioned build files are available via https://github.com/facebook/fixed-data-table/releases. I will create a specific issue for adding files to the CDN.\n. Awesome! Thanks for this.\n. Hey @onemanstartup, can you please give us a little more info around this issue. Is this happening on the sites examples? or just locally? is this installed via npm or the dist bundle?\n\nAgree we should add some more info around browser support/environment requirements, feel free to create another issue for this.\n. Hey @onemanstartup @jusio i'm having some trouble reproducing this issue. I created this minimal test case repo based off your example code above (https://github.com/pieterv/fixed-data-table-test), this runs fine for me locally. Could you try checking this out to see if it works for you and maybe tweak it till you can reproduce your error.\n\nThanks for your help, this seems like a strange error, it would be good to get to the bottom of it :P\n. @onemanstartup hmm adding `devtool: \"eval\"` to my config still didn't reproduce the issue :S, i'm on chrome 40, any other ideas? I wonder if this is some kinda webpack issue, I can't imagine what we are doing that would cause this.\n. Hey @jusio, thanks for the awesomely detailed bug report, thanks to this after a lot of digging i think i have found the issue!\n\nSo first to reliability reproduce the bug i found that if you close the dev tools, then refresh the page it would show up as soon as you scrolled the mouse wheel.\n\nI believe the issue is related to how webpack is packaging the files then `eval`ing them in combination with the `\"use strict\"` declaration. So the quick fix for this is to remove the \"use strict\" definition from `node_modules/fixed-data-table/internals/ReactWheelHandler.js` line 40. Removing this code seems to reliable fix the error for me as it allows the function to use the global `normalizeWheel` var (it seems to be `eval`ing it into global scope).\n\nThere is two ways to fix this issue, one hacky quick way is for us to remove \"use strict\" from our files, which i would really rather not do. Or the other way is for webpack to wrap the eval string of the modules in a self executing function which it does for most modules that use custom globals like `process` anyway. @jusio @onemanstartup In the mean time you can make the change locally and maybe we should file an issue on the webpack repo to see if they are able to fix it.\n. By the way @jusio that looks like an awesome chrome plugin, it's awesome to see this project being used outside of Facebook!\n. @jusio Awesome to hear! It's comments like that that make it worth it for us!\n\nGood idea i will create an issue with webpack.\n. After some poking around on github issues it seems this is a known issue and can be fixed by adding a `\"use strict\";` to the top any file that uses ES6 classes (which will remove them from being inserted in each method), i believe `ReactWheelHandler` is the only module that falls in this category but i will double check.\n\nRelated issues:\nhttps://github.com/webpack/webpack/issues/417\nhttps://github.com/facebook/flux/issues/45\n. This should be working in the `0.1.1` release, let me know if not.\n. This is intentional, when you don't use attribute expressions the number gets passed through as a string which means we could have weird side effects when doing basic math operations for example `10 + '5' = '105'`. When in dev mode you should be getting a nice error about this from the propTypes checks.\n. Hey @gsklee, thanks for the PR! Unfortunately we can't merge this as these markdown files are generated from the source code and would get overwritten on the next update. But this did help me identify a few issues, one is we should able to simplify the [propType check](https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableColumn.react.js#L88) for dataKey using `propTypes.oneOfType()` and after looking into fixing this i also found that we aren't validating the propType for the column components.\n. Thanks again for this, i have made the change to the source and pushed out the new docs to the site: http://facebook.github.io/fixed-data-table/api-column.html\n. Hey @andrewrota, yes unfortunately this feature does not work as we are overriding the browser native scrolling and reimplementing it, this means we have missed off some of these platform dependent features.\n\n@wlis is looking into ways we can take advantage of the browsers native scrolling yet maintain (or increase :P) our scroll perf, which should fix this issue and some of the other related issues.\n. Hey @bakesteve, sorry this is an issue with the examples code not so much to do with the core table itself. So the table doesn't have direct built in touch support and we add it in manually using Zynga scroller. The problem is coming from our some what [naive logic to determine whether we should use touch support or mouse support](https://github.com/facebook/fixed-data-table/blob/master/site/examples/TouchExampleWrapper.js#L23-L26). We are looking into ways of making this better support in the table itself, but if you have any suggestions of how to make the logic in the examples better in the mean time that would be awesome!\n. @ofersadgat Awesome!\n. @ofersadgat i have put your change live but it doesn't seem to have worked for me :/\n\n@bakesteve Can you check if its working for you?\n. Nice!\n. So the thing that makes these type of features possible is the [`headerRenderer`](http://facebook.github.io/fixed-data-table/api-column.html#-datakey-required-) prop on `<Column />`, this allows you to override the default header implementation with anything that is renderable via `React.render()`. So for sorting this is how you would render your own elements that have `onClick` handlers which you then use to know when to sort your data. As for reordering columns you can probably do it the same way but it will be a bit more involved as you will need to listen to drag events then reorder the columns as the drag happens.\n\nIt would be very nice to have an easy way to do these things out of the box, we already have a nice sortable header component with some good sorting utils that we use in Facebook so we might be able to clean that up and add it to the core. For column reordering we should at least have a nice example that shows how it could work.\n. @RnbWd Yeah exactly just think of it like any other React render method.\n\nSo you might end up with a `headerRenderer` function like this to do the sorting:\n\n``` javascript\nfunction renderHeader(label, key) {\n  return (\n    <div\n      onClick={handleClick.bind(null, key)}>\n      {label}\n      <MyArrow\n        direction={getCurrentDirection(key)}\n      />\n    </div>\n  );\n}\n```\n. Awesome, thanks again for doing this! I will merge this in locally so i can add the key before pushing to master.\n. @jardakotesovec yes sorry the table should support this by default and we plan on implementing this soon. We should be able to see when the user gets to the bottom scroll point and stop preventing default at that point.\n. This should be fixed in the latest release :)\n. Yes fixed-data-table works great with react 0.13 (internally Facebook uses react master), but you are right we should update the package to allow npm installing with react@0.13. We should be able to put out a new release pretty soon with this change.\n. @TomClarkson I have released `0.1.2` which updates the package.json to support react `0.13.0` as well as `0.12.x`. Sorry i didn't get to this early but i couldn't get the package.json config to allow the beta version as a dependency.\n. Hey @TomClarkson thanks for the awesome bug report! From looking through your code it looks like a webpack related issue, see https://github.com/facebook/fixed-data-table/issues/20#issuecomment-73403088. We should have a fix out for this pretty soon!\n. Should be fixed in v0.1.1, let me know if not.\n. Good catch! I guess we just need to refactor the `if` statement. Feel free to do a pull request for this :P\n. Hey @jusio sorry about the late reply and thanks for this PR! This change makes a lot of sense, if you can make the suggested comments then i can pull this in :)\n. Nice! That makes it easy :)\n\nThis looks good to land, ill just sync the change into Facebook, then merge it :)\n. Awesome, just landed this into FB. In the future we should probably do that check in the invariant via propTypes.\n. @wlis was this something you fixed?\n. Hey @jalateras, @ofersadgat was right the [`rowGetter`](http://facebook.github.io/fixed-data-table/api-table.html#-rowgetter-required-) needs to be a function. Check to see if that fixes it, if not you will need to look into your browserify config, `process` is a global in node which we use to check the environment type (dev or production), browserify normally defines this for you but maybe you have that turned off, maybe check your browserify `detectGlobals` config.\n\nIm going to close this out since its not a bug in the table per se, but let us know if you can't figure it out.\n. @ofersadgat that is correct, you will need to use the row index as the seed for your random number generator. Or just use some like the modulos operator: `return colors[index % 3]` which will be stable.\n. Closing this out since its not really something we can \"fix\" and is intended behavior :)\n. @jamnanlaw I have a fix ready to sync which fixes the two issues you pointed out :) with this change the table renders from the server great, the problem we then have is that react cannot mount onto the rendered HTML since its renders differently based on the environment :(, this is the main culprit: https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/translateDOMPositionXY.js#L23-L45. We will probably need to change the code to always render with `top` and `left` on the first pass then use `translate` if the browser supports after that.\n\nSo a long answer but yes we intend to support server rendering :)\n. Sorry no we haven't made any progress here, this just isn't a use case we have needed. The solution described above is still valid and shouldn't be too hard if someone wants to have a go at solving this.\n. I think `reloadRowAtIndex` fn would make sense given our existing API but what i would rather see is a more react \"like\" declarative API, although I don't have a good idea of what that would look like. If that looks like it will be a big change we may do this in the mean time. Any thoughts on this approach?\n. Good point! This makes a lot of sense, feel free to send a PR for this change or i can do it at some point :)\n. I would say its missing, we are missing a few events like this. If you want you can defined this on a individual cell via a `cellRenderer`. But we should look to adding these events to Rows.\n. We can probably look at doing this soon, although a pull request for these changes would certainly speed up the process :P\n. Something like this should work (i haven't tested it):\n\n``` javascript\nfunction handleDoubleClick(index, event) {\n  // handle dbl click\n}\n\nfunction cellRenderer(content, index) {\n  return (\n    <div styles={{height: '100%'}} onDoubleClick={handleDoubleClick.bind(null, index)}>{content}</div>\n  );\n}\n```\n\nYou might need to move the default cell padding to this inner element to capture all the clicks.\n. @airwin have you tried the new [`allowCellsRecycling`](http://facebook.github.io/fixed-data-table/api-column.html#-allowcellsrecycling-) config in v3.0? It was designed to solve the use cases described here by not rendering columns when they leave the viewport.\n\ncc @wlis \n. With `0.6.0` you have the option to use your own Cell (so you dont need the 3+ divs that come with the current default cell), i'm hoping this will help make over head of the table less. Let us know if this release helps at all.\n. \\0/ Nice...\n. Awesome, thank you @ofersadgat!\n. Hey @nt591, thanks for the PR, sorry its not obvious but these API docs are auto generated from the source code. If you could make the change here: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTable.react.js#L237 it wont overwritten the next time we build the docs :)\n. Fixed via #54 :)\n. Looks good!\n. A couple of things, first you need to use gitraw so it gets the right headers for JS, then you will need to polyfill `Object.assign` which is where it gets a little hard :P \n\nI was able to get it going with JSBin: http://jsbin.com/zocituvuyi/2/edit\n. You need to define an onChange handler and then set the value, see: http://facebook.github.io/react/docs/forms.html#controlled-components\n. http://jsbin.com/kuyixo/1/edit?js,output\n\nThe table wont rerender a cell unless the data for the cell changes, and since we were by passing the cells data input and referencing the state directly in the cellRenderer it didn't know the data had changed and hence didnt know to rerender. \n. You had a typo, you were setting the data for the clicked row back in place of the rows: http://jsbin.com/ribulu/2/edit\n\nMore correctly cellRenderers will not be called again unless the cells associated data changes.\n. http://jsbin.com/temufa/2/edit\n\nSo you need to create a new instance of your object data, its the same reason i was `slice()`ing the array. If you don't do this you will still have referentially equal objects and `oldObject === newObject` will still equal true. The react update helper might be helpful if you are doing lots of these updates.\n. Yeah, thats the one.\n. @eugene1g :open_mouth: \n\nWe should definitely add this to the main readme but at this point the browser support looks like this:\n- Chrome\n- Firefox (will be faster/better supported in the coming release)\n- IE9+\n  - IE11 - On Windows 8 touchpad two finger scrolling doesn't work.\n  - IE9 - Support is likely to be deprecated for this browser very soon.\n. @mkawalec nice catch, we should definitely document this :P but like @mfunkie said could you please add the prop type to https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableColumn.react.js then if you run the docs build `npm install && \n./build_helpers/buildAPIDocs.sh` it will update the markdown file.\n. Hey @dannymk, You will need an ES6 compatible `Object.assign` polyfill. `'object-assign'` is a good one, you can then do `Object.assign = Object.assign || require('object-assign');` before you require `FixedDataTable` which should fix the problem.\n. Hey @matrinox, i have been thinking about this `visibleRows` style API for a while but i'm not totally convinced it would be needed. What would be the advantage to using this `visibleRows` callback over just batching up all data request within a single event loop and then breaking that into request batches? (other than the frame work providing the logic for you :P)\n\nHere is an example of how i would build the batching logic: http://jsbin.com/temufa/9/edit?js,output\nYou will notice it will also request data outside of the view based on where it thinks you will scroll to, because we are using the rowGetter we can take advantage of the row prerendering triggering requesting data.\n. Agree with @hedgerwang  but this does seem initially non obvious. I think this would be a good example we could add to the site. Im going to close this out and create a task for it.\n. @bizmurr sure i have added it to the list and created a jsbin example, its pretty similar to the sorting example.\n. @gsklee This is pretty weird, looks like it might be a lower level react problem, as from the screenshot it is rendering the correct value just the DOM is not being updated. Do you mind having a try at creating a simple repo case so i can dig into it? here is a good jsbin to start from: http://jsbin.com/valoco/5/edit?html,js,output.\n. Hey @dannymk, the fixed data table applies a very aggressive shouldComponentUpdate function, which stops the `cellRenderer` from being called unless some data associated with that renderer has changed. The way we figure our what data is needed to render a row is via the `rowGetter`, so the issue above is that the state you are expecting to update your cellRenderer is not returned from the `rowGetter` so the diff does know that something has changed.\n\nHere is an example of how it could work by embedding the data within the row object:\nhttp://jsbin.com/temufa/18/edit\n\nThe other way to provide this behavior is for the cellRenderer to just return a single [react container](https://medium.com/@learnreact/container-components-c0e67432e005) which is responsible for subscribing to store data changes and updating the cell via setState. We do this for a lot of our applications but this only makes sense if for larger tables with a lot of different possible data types.\n\nWe are thinking about removing this aggressive shouldComponentUpdate functionality to make the table render more predictability but it will have a large performance cost if all cells rerender with each set update, so we are still trying to find the right balance here :)\n. @rovolution I created this example yesterday which shows how you can implement sorting which should help http://jsbin.com/temufa/10/edit?html,js,output\n\nAfter not seeing to much detail my guess as to your problem is that the data your updating via setState is not being returned from the `headerDataGetter` and so the `headerRenderer` doesn't see the data has changed and doesn't update.\n. Yes it was just simpler that way for this example but you can also pass more complex data via `headerDataGetter`, just remember if you want the cell to render the data returned needs to change :)\n. Im not sure i understand this change, could you give some more detailed information on what the current behavior is on render and what this effect this change will have?\n. @marcneuwirth Nice, yes this makes sense! Thanks for the detailed explanation. This should also be fixed when we move to the `React.cloneElement` API instead of `cloneWithProps` but this is a good interim solution.\n. @ondrejhlavacek thanks for bring this up. This is an interesting side effect of the way we are pooling react components and reusing them as the user scrolls. Maybe we can force them to unmount which might fix this, but we want to be careful we don't loss the ability to reuse the underlying DOM node.\n. Hey @gaearon, Thanks for this. We build the docs via react-docgen so i had to manually add the changes back to the source and merge, see https://github.com/facebook/fixed-data-table/commit/45d64c0f5bda94548d05df5da825e4d124be0e7f\n\nThanks!\n. I have deleted the generated markdown files from the repo so it should be clearer for other in the future :)\n. Hey @gsklee Thanks for the issue, this sounds pretty easy to fix, we should just force intergers when the value comes in :P\n. Thanks for the PR! i have manually merged this here: https://github.com/facebook/fixed-data-table/commit/5a55671722b12accc4ff1d63d0c2089b9192a99a\n. Sounds like this is a dependency issue, feel free to reopen if your still having trouble with the new version after reinstalling.\n. @gsklee @benshimmin Sorry we know this is bad and are planing on fixing this for the next release. For now a hacky fix for this if you know you don't need any scrolling is to set `overflowX=\"hidden\"` `overflowY=\"hidden\"` http://jsbin.com/valoco/12/edit.\n. This should be fixed in the latest release :)\n. I will take this after this release so we don't break React 0.12 support\n. This should help with #5 :)\n. Hey @gsklee, thanks for the PR. Yeah this behavior is a little weird. So we have both `maxHeight` and `height` so our plan is to change `height` to make it work like you suggested (always stuck to the bottom) and then make sure `maxHeight` maintains the current behavior :)\n. They @gabelevi thanks for the PR we fixed this in 0.2.0 by allowing maxHeight or height which have the two different behaviors :)\n. @JedWatson Im using your babel-plugin-object-assign project here :) Unfortunately i couldn't use the project as a dependency as it was giving me an error about using two different instances of Babel, i think your project might need to use peerDeps to solve this but not sure. Anyway thanks for creating this!\n. @ifrit :) I have merged it in, we are aiming to do the release next week.\n. Hey @cesarandreu, @ifrit, @zackify sorry for the delay but we have now done the v0.2.0 release, with this code in it! Check it out, and please let us know if something doesnt work for you :)\n. @hipertracker I will build the dist files when we release. As for the `React` i had it that way was the browser global for react is `window.React` not lowercase but ill look for a way to support both. Thanks for the feedback!\n. @hipertracker after some sleuthing around other webpack configs i think have the solution now. If you could try the new changes that would be very helpful :)\n. Nice! Thanks for testing.\n. Hey @hipertracker i assume you got this going, the repo seems to be working fine for me. Pretty sweet demo as well!\n\n![image](https://cloud.githubusercontent.com/assets/438482/7739714/b0bbb2fe-ff1a-11e4-9596-5d7fca7892e2.png)\n. @TomClarkson Sure that should be doable\n. This release is out! https://github.com/facebook/fixed-data-table/releases/tag/v0.2.0\n. Not at the moment, rendering a row is currently very complex especially with fixed columns and it would be hard to allow a user to do this and still render correctly. This something we will think about when refactoring the core to be more flexible in the future but its not on the immediate road map.\n. Hey @difelice, thanks for the PR. I think this usecase is already covered by the user being able to determine if a column should be rendered at all:\n\n```\n<Table>\n  <Column />\n  {hidden ? null : <Column />}\n</Table>\n```\n. For this use case you can use the `headerDataGetter` on the Table component  to return the relevant data into the headerRenderer :)\n. I fixed this with #110, if you pull down master and then do a fresh `npm install` it should work :)\n. Hey @Andreyco, PR would be awesome! This is definitely something we want, we just haven't had the time to do it.\n\nSo the way we have thought about approaching this is to split out layout specific css and styling \"theme\" css. The layout styles should include anything that is required to make the table function/ position correctly (like you described). With the \"theme\" being everything else including borders and such. Ideally we would split the current stylesheets in two different css files for each one and create different classes for both the styling hooks and the layout. In the long term we see the layout styles being included as inline CSS in the react component but we don't think our tooling this ready for this yet, with this in mind it makes splitting the class names out more important so its easier to remove and pull the style inline in the future :)\n\nLet me know of you have any questions or need any help.\n\ncc @jbonta Do you have any other thoughts on this?\n. Hey @jmcpeak, hmm i think the order of requires is wrong in that fiddle which is throwing it off. I tired getting the project working in jsfiddle a while back but i couldn't get it easily setup due to the need for the object.assign polyfill before defining the table, but this should be easier in the next version of the table where this is not needed. I did setup the project with jsbin which has been working well for me: http://jsbin.com/valoco/10/edit?html,js,output\n. Hey @allanbond shouldn't it be enough to install via `bower install facebook/fixed-data-table` and reference the dist files? What advantage does having the bower.json file give? Bower can look at git tags right?\n. Hey @DanielMiddleton the table handles most of this logic for you and will call the `rowGetter` function as the rows get close to being in view, the one key thing is you will need to give it an absolute number of rows so the scollbar size can be estimated but you can update the value over time as you get more data. Here is an example of how this can be implemented http://jsbin.com/temufa/8/edit?html,js,output)\n. Hey @Andreyco, Sorry for the slow response. This PR looks really good! Ill get @jbonta to give it a full review soon. Also I can take a look at the build step stuff if you wanna remove it from this PR.\n\nThanks for putting this together!\n. @jbonta how do you feel about having all the theme styles in a single file? Is it worth splitting them out?\n. No we don't have our own chat room but i do hang out in the #reactjs IRC chat room if you want to ping me there :)\n. Nice find! Would love a PR for this :)\n. Awesome, thanks for the PR @llh1, if you can do the change @hedgerwang suggested then i can merge this in :)\n. Awesome, thank you @llh1!\n. Thanks for bring this up this will be super useful for when taking on accessibility.\n\ncc @jbonta \n. So we have unit tests setup for this code in the FB code base which we run when we sync code changes back in to FB we just haven't had the time to pull them out and setup the infra in this repo. I agree this is pretty bad though :(, ill try setting this up before the next release.\n. Hmm interesting its working for me on Chrome and Firefox on Mac, it looks like Zynga scroller is failing for you. Do you mind checking to see if your getting any failed network requests?\n. Hmmm thats interesting i will have to take a deeper look, thanks for the detailed info!\n. Hmm looks like this is a CDN issue, i will see if i can find a more reliable place to host this file.\n. Yeah you will just want to setup a custom `cellRenderer` on the column which you can then render what ever you want with react :)\n. @ConAntonakos I think in the latest React you would write it like this if your not using JSX:\n\n```\nfunction renderLink(cellData){\n  return React.createElement('div', { dangerouslySetInnerHTML: {__html: cellData} });\n}\n```\n\nDoes that work?\n. Hey sorry @iammerrick i'm probably too late to help you but there was nothing inherently wrong with what you had i don't see any reason it shouldn't work. \n\nI ran the following code and it worked fine for me, maybe try with the latest release?\n\n```\nimport React from 'react';\nvar FixedDataTable = require('fixed-data-table');\nrequire('fixed-data-table/dist/fixed-data-table.css');\n\nfunction DataTableHandler() {\n  return class DataTableHandler extends React.Component {\n    render() {\n\n      var Table = FixedDataTable.Table;\n      var Column = FixedDataTable.Column;\n\n      // Table data as a list of array.\n      var rows = [\n        ['a1', 'b1', 'c1'],\n        ['a2', 'b3', 'c2'],\n        ['a3', 'b3', 'c3']\n      ];\n\n      function rowGetter(rowIndex) {\n        return rows[rowIndex];\n      }\n\n      return (\n        <Table\n          rowHeight={50}\n          rowGetter={rowGetter}\n          rowsCount={rows.length}\n          width={5000}\n          height={5000}\n          headerHeight={50}>\n          <Column\n            label=\"Col 1\"\n            width={3000}\n            dataKey={0}\n          />\n          <Column\n            label=\"Col 2\"\n            width={2000}\n            dataKey={1}\n          />\n        </Table>\n      );\n    }\n  }\n}\n\nexport default DataTableHandler();\n```\n. Hey @mikestead Thanks for the PR!\n\n@jbonta @wlis What do you think about changing the scroll bar to not overlap the header?\n. This should work now with the latest releases dist build, you will need to make sure you install and require React before the table.\n. Exciting! I feel a release coming :P\n. Nice, thanks for the quick PR, hmmm would prefer to use `Math.round` so its a bit clearer whats happening + round will go to the closest value not just strip the decimal :)\n\ncc @wlis Do you think we should do it here or on the resulting value so we don't need to round every prop?\n. Hey @cesarandreu thanks for bringing this up! I have put this info into the github release :) https://github.com/facebook/fixed-data-table/releases/tag/v0.2.0 And we will continue to do this for all future releases.\n. With the \"Replacing getDOMNode with findDOMNode\" commit we will be breaking compatibility with react `0.12.x` this seems fine to me but we should make this clear in the release notes and update the package.json.\n. This looks good to go, merge when ready.\n. Awesome! Looks good to me. Release when ready :)\n. Awesome! once you have cleaned up the minor lint issues and squashed the changes into one commit you can merge when your ready :)\n. Awesome!\n. cc @jbonta \n. This looks good to me. Merge when ready :)\n. So much red :heart::heart::heart: this is looking really good! Lets get this in.\n. FixedDataTable will definitely work with the beta since FB runs React master internally. But last time i tried to do this i couldn't get the npm dependencies to allow a beta as well as the normal versions. If anyones has an idea how the npm dependency versioning should look for this i will be happy to do the release.\n. @cesarandreu thanks for the info! Let us know if the release doesn't solve the problem for you.\n. @bolinfest i'm not happy with the approach taken here, as a library special casing one particular consumers use case like isn't a maintainable solution for us given all the consumers we have and their needs. Its great we could unblock you for this but lets work together to find a way to alias the react module at your build level (babel has a way to do this) as we wont be able to maintain this special case long term and i would guess not all libraries are going to be so accommodating.\n. I would recommend for this using a transparent border, this way you keep the width but it looks like its not there. Our default layout theme does this. In the future we are looking to make this stuff configurable via inline styles but its currently assumed in a lot of places\n. The other thing you can do is in each cell on `componentDidMount` you check the contents height via `React.getDOMNode().outerHeight` (or something like that) then use that to reset the height of the row. The downside is this will be pretty hard to get to run a performant way. The auto content sizing is not something we are looking at adding to this library.\n. Hey @fullvlad yes this is possible, at FB we have this functionality with FixedDataTable for one of our ads products. For something complex like this I would suggest connecting each cell to its data source directly, we do this via Flux, each cell connects to its data store based on the row index and binds to events which will set state on the cell (rather than passing the data back through the data getter).\n. Check out the `0.6.0` release with this there are no limitations on what can be passed to a cell since we don't own any of this state.\n. @vojtech-dobes I though this was the case (that `rowHeightGetter` would only be called for visible rows), @wlis any thoughts here?\n. Thanks @masonicboom i have fixed this with fb7b6f4494af0c3c7a20c55e7d11271b1ebb9777\n. I have done a quick release with @chentsulin's PR to allow `react@0.14.0-rc1` as a dep (https://github.com/facebook/fixed-data-table/releases/tag/v0.4.7) and will try to do another release shortly to clean up the warnings.\n. Sorry there is no standard way in the FixedDataTable to do this, in theory you should be able to build this in your cell by measuring all the column content after render then set the width. This is not an API we expect to add to the table since it would be very hard to do it a performant way.\n. Yeah you likely are missing a bind somewhere.\n. Thanks!\n. Awesome thanks for this @chentsulin!\n. I have pushed out the `0.5.0-rc1` package which adds support for React `0.14.0`, if someone can try it out and make sure its working for you i can publish the stable `0.5.0` release.\n. Thanks @musbaig! i have now published 0.5.0\n. Awesome, glad to hear this. Let us know if you run into problems with this!\n. You will need to listen to the window resize event and then update the table with when it changes, here is how we do it for the examples page: https://github.com/facebook/fixed-data-table/blob/cf28c0e78a3859c9a6e5d94fc84912e28d64f62a/site/examples/ExamplesPage.js#L100-L116\n. Hey @johnnyji check out the latest `0.6.0-rc1` release ([docs are here for now](https://github.com/facebook/fixed-data-table/tree/master/docs)). With this, the fixed data table no longer needs any data via the `rowGetter` so you can use whatever data structure you want :)\n. Sorry its not possible with the current release. If you check out the latest `0.6.0-rc1` release ([docs are here for now](https://github.com/facebook/fixed-data-table/tree/master/docs)). With this, the fixed data table no longer needs any data via the rowGetter so you can access data however you want :)\n. cc @ehzhang @wlis\n. No worries :) I simplified the examples a bunch to :)\n\nWill be great to finally release your awesome work!\n. :dancers::dancers::dancers: \n. This code has been released as [`v0.6.0-rc1`](https://github.com/facebook/fixed-data-table/releases/tag/v0.6.0-rc1)! Im working on docs now for the full release.\n. Sorry we are halfway through a release, the example in the readme is for the `0.6.0` release which is only released as `0.6.0-rc1`. You are welcome to try this out (it will be release properly very shortly) or the docs for the current release are on the site.\n. Hey @marduke182, thanks for the PR. The way i was thinking about in the past to solve this was to have some state that tells us we are in the first pass and always render positions with `left` and `top` (since we know all browsers support this but not translate pos), then on any other render from there we can use the fancy translate3d stuff. See the inline message for why i think the current approach in this PR is bad. Do you think you would be able to update this to do that?\n. Hmm i dont think this flag necessarily needs to live on state, since we don't actually want to force a render as a result of changing it, we just need a flag to signify that we are now out of the first render. The down side of this is it will make the render more non-pure, but it wont be to much worse than it already was (since it already relies on global state).\n\nso:\n\n```\ncomponentDidMount() {\n  this._initialRender = false;\n}\n```\n\nLets also create a wrapper around `translateDOMPositionXY` module that does this logic (`translateDOMPositionXY` is hard for us to change since its a core FB module), so if is `this._initialRender` then use `left` and `top` then after this we just delegate to `translateDOMPositionXY`.\n\nThanks for taking this on!\n. Thank you for this!\n. Oh thanks for the issue, i think i know what i might have missed when messing with the examples for the  latest release.\n. cc @wlis @jbonta @dehamilton\n. Oh yeah we should fix this up, so whats happening here is this is where we reach the maximum size of a div that the browser supports, so it just stops rendering after that height, we should change all the examples to instead of rendering 1,000,000 rows we render 500,000 or something. If you have time to submit a PR this is the the number you need to change for each example: https://github.com/facebook/fixed-data-table/blob/master/examples/ResizeExample.js#L32\n. oh wow :( thanks for this!\n. Oh nice! Would love a PR for that.\n. Thanks for working on this @zpao. The synced code looks good, it contained everything I expected. The build system is looks nice although i didn't look into it with a huge amount of detail. Let me know if you want me to do another review or help out with testing.\n. let me know if i broke anything :D. ",
    "hedgerwang": "Hi @hharnisc \nThe screenshot looks normal to me. \nDo I miss anything?\n. There is a property `scrollToRow` that you can specify the row index of the row that you want to jump to initially.\n\nWhen more rows get loaded, you can bump the value of  `scrollToRow` and the `rowsCount`.\n. you're right. \n\nthis isn't what the table was originally designed for.  we're planning building separate layout system that can support for generic use layout cases such as list or grid.\n. @matrinox : this sounds more like a issue with data fetching and processing that the data loader (store) should optimize for.\n\nOne way to address this issue is to break the rows into chunks, such as [0-50], [51-100], ...etc. The store will does all the data caching and invoke the data fetching action if the chunk referred hasn't been fetched or loading yet.\n\nthe table is just a view, after all.\n. @matrinox: It's basically like how the normal pagination would work.\n\nDepends on the network and server resources, you breakdown the data (rows) into chunks then the scrollbar is just a tool for you to move between \"pages\".\n\nIf user happen to step into the position that require fetching more than one page, so be it or you can solve that with batched requested.\n\nThe proposed API `visibleRows` does not help to ease the problem because the visible rows are constantly changing while scrolling and you'd still need to implement batching and pagination logics for your data-fetching library eventually for perf sake.   \n. The short answer is that that the host environment can provide mocked or polyfill implementation is necessary. \n. Is it for flexibility. Perf-wise, the less `<div />`, the better perf.\n. Hi @hharnisc \nThe screenshot looks normal to me. \nDo I miss anything?\n. There is a property `scrollToRow` that you can specify the row index of the row that you want to jump to initially.\n\nWhen more rows get loaded, you can bump the value of  `scrollToRow` and the `rowsCount`.\n. you're right. \n\nthis isn't what the table was originally designed for.  we're planning building separate layout system that can support for generic use layout cases such as list or grid.\n. @matrinox : this sounds more like a issue with data fetching and processing that the data loader (store) should optimize for.\n\nOne way to address this issue is to break the rows into chunks, such as [0-50], [51-100], ...etc. The store will does all the data caching and invoke the data fetching action if the chunk referred hasn't been fetched or loading yet.\n\nthe table is just a view, after all.\n. @matrinox: It's basically like how the normal pagination would work.\n\nDepends on the network and server resources, you breakdown the data (rows) into chunks then the scrollbar is just a tool for you to move between \"pages\".\n\nIf user happen to step into the position that require fetching more than one page, so be it or you can solve that with batched requested.\n\nThe proposed API `visibleRows` does not help to ease the problem because the visible rows are constantly changing while scrolling and you'd still need to implement batching and pagination logics for your data-fetching library eventually for perf sake.   \n. The short answer is that that the host environment can provide mocked or polyfill implementation is necessary. \n. Is it for flexibility. Perf-wise, the less `<div />`, the better perf.\n. ",
    "hharnisc": "@hedgerwang if you look at `Kacey Lubowitz` row, just above the profile image. You'll see there's just a little bit of the profile image from the previous row behind it and cut off.\n. @hedgerwang if you look at `Kacey Lubowitz` row, just above the profile image. You'll see there's just a little bit of the profile image from the previous row behind it and cut off.\n. ",
    "wlis": "@hedgerwang Haven't you solved this issue with https://github.com/facebook/fixed-data-table/commit/a907bafe8403a82a057363af0bda271f76ea8fc0 ?\n. This was issue with the Image component we used. This is fixed now.\n. @DjebbZ Thanks for testing it, If you look at code, we haven't actually implemented touch support inside the table. Table scrolling can be also controlled by props and we just wrapped it in ZyngaScroller in examples. In this way you could use any touch event handler and scrolling engine to customise behaviour of scrolling on touch devices.\n. @pieterv There is no reason not to add onRowMouseLeave to the API. It is not there because we never needed it.\n. This has been fixed in #151 \n. We have thought about doing the same to columns that we do to rows with scrolling and only render ones that are visible + buffer to DOM, but we didn't have need to actually implement it. The solution we were thinking about was only for scrolling perf improvement and I think it would be able to handle hundreds of columns, but I don't think it would do i.e. million, because we still would have kept passing data by rows.\nWhat number of columns do you have in mind when you say \"large number\"?\n. So right now the table will handle that many columns, but the performance of scrolling may be not perfect, because all cells of visible row are rendered into DOM.\nFor configuring large numbers of columns- this is already possible to do with the FixedDataTable, since you can pass children (column configs) to FixedDatatTable as array- you don't have to inline column definitions where you render array. You could do something like\ncolumnNamesYouWantToSee.map(columnName => buildColumnConfigForName(columnName))\nWhere buildColumnConfigForName returns instance of FixedDataTableColumn based on the columnName- it can specify custom renderers, min widths etc. Such table could be just passed as children of FixedDataTable and it would render all those columns.\nIs that something that would work in your case?\n. Thanks for the request. we fixed that in #156 \n. @difelice Thanks for writing the pull request! I would like to take the change for onRowContextMenu, but there are a bit to many changes here and automatic merge will not work. Could you please request the change for onRowContextMenu only within 1 commit?\n. v 0.3.0 has been released. I'll update changelog soon.\n@nidu At some point in the future row grouping should be possible to achieve, but we don't have timeline for these changes yet.\n. Thanks for the pull request!\n. @Sunify Thanks for the pull request. We have just merged #151 that does the same thing, but uses the documented in ColumnGroup API renderer (groupHeaderRendrer). I hope this will work for you.\n. @TomClarkson Thanks for making these changes!\n. @sww Thanks for the pull request!\n. @cesarandreu We have solved part of it with 0.3.0 release ( #156 ). You can now mark your columns using allowCellsRecycling prop and this will allow table to not render cells in these columns when they are outside of viewport. \nThis doesn't allow table to have any number of columns, but we tested on 1000 columns and it works quite well. There will be additional example coming soon.\n. @krystian-3c thanks for reporting this! The first part is going to be merged in #156.\nFor the second one we will try to fix that soon. \n. Did you specify the onColumnResizeEnd prop in the table? The table doesn't actually resize columns, it just provides UI. The onColumnResizeEnd will get info about updated column size and ultimately you will have to render the table with updated columns.\n. Thank you for pointing this out. We will add changelog for 0.3.0 soon.\n. @box-turtle I am not sure that this will come with the new API, but removing unnecessary overflow:hidden from many places in our CSS will also happen soon.\n. This request is AWESOME!\nI wish we were able to get rid of isFooterCell and isHeaderCell or at least minimise branching base on that because it makes code more difficult to understand.\nAlso please add trailing comas in missing places and empty lines before function declarations.\n\nOne more thing I didn't think through, but might be worth looking at is columnKey. Fact that people can pass components with some props already defined now, would also make it very easy to get the columnKey out from FixedDataColumn and make people pass it to their components themselves if they need it.\n. That looks cool. I went very quickly over and I see that you are still using ReactComponentWithPureRenderMixin in Cells/Rows. With that and no data there is no way for user to force the table to render new contents for cells. I don't think we can assume that everyone who uses table has cells subscribing to data sources and is ok with not re-rendering cells. At this point the FixedDataTableCell.react with the set of props will nearly always return false from shouldComponentUpdate.\n. @Martynas-P Thanks for reporting this. There is a plan to get these translation values down by not rendering fake div with dimensions of whole table and some smaller blocks instead. We didn't have time to work on that yet. \n. Thanks for fixing this @pieterv!\n. Yeah, we should properly fix this by not rendering div that huge, but have couple smaller divs wrapping rows and control them well.\n. @hedgerwang Haven't you solved this issue with https://github.com/facebook/fixed-data-table/commit/a907bafe8403a82a057363af0bda271f76ea8fc0 ?\n. This was issue with the Image component we used. This is fixed now.\n. @DjebbZ Thanks for testing it, If you look at code, we haven't actually implemented touch support inside the table. Table scrolling can be also controlled by props and we just wrapped it in ZyngaScroller in examples. In this way you could use any touch event handler and scrolling engine to customise behaviour of scrolling on touch devices.\n. @pieterv There is no reason not to add onRowMouseLeave to the API. It is not there because we never needed it.\n. This has been fixed in #151 \n. We have thought about doing the same to columns that we do to rows with scrolling and only render ones that are visible + buffer to DOM, but we didn't have need to actually implement it. The solution we were thinking about was only for scrolling perf improvement and I think it would be able to handle hundreds of columns, but I don't think it would do i.e. million, because we still would have kept passing data by rows.\nWhat number of columns do you have in mind when you say \"large number\"?\n. So right now the table will handle that many columns, but the performance of scrolling may be not perfect, because all cells of visible row are rendered into DOM.\nFor configuring large numbers of columns- this is already possible to do with the FixedDataTable, since you can pass children (column configs) to FixedDatatTable as array- you don't have to inline column definitions where you render array. You could do something like\ncolumnNamesYouWantToSee.map(columnName => buildColumnConfigForName(columnName))\nWhere buildColumnConfigForName returns instance of FixedDataTableColumn based on the columnName- it can specify custom renderers, min widths etc. Such table could be just passed as children of FixedDataTable and it would render all those columns.\nIs that something that would work in your case?\n. Thanks for the request. we fixed that in #156 \n. @difelice Thanks for writing the pull request! I would like to take the change for onRowContextMenu, but there are a bit to many changes here and automatic merge will not work. Could you please request the change for onRowContextMenu only within 1 commit?\n. v 0.3.0 has been released. I'll update changelog soon.\n@nidu At some point in the future row grouping should be possible to achieve, but we don't have timeline for these changes yet.\n. Thanks for the pull request!\n. @Sunify Thanks for the pull request. We have just merged #151 that does the same thing, but uses the documented in ColumnGroup API renderer (groupHeaderRendrer). I hope this will work for you.\n. @TomClarkson Thanks for making these changes!\n. @sww Thanks for the pull request!\n. @cesarandreu We have solved part of it with 0.3.0 release ( #156 ). You can now mark your columns using allowCellsRecycling prop and this will allow table to not render cells in these columns when they are outside of viewport. \nThis doesn't allow table to have any number of columns, but we tested on 1000 columns and it works quite well. There will be additional example coming soon.\n. @krystian-3c thanks for reporting this! The first part is going to be merged in #156.\nFor the second one we will try to fix that soon. \n. Did you specify the onColumnResizeEnd prop in the table? The table doesn't actually resize columns, it just provides UI. The onColumnResizeEnd will get info about updated column size and ultimately you will have to render the table with updated columns.\n. Thank you for pointing this out. We will add changelog for 0.3.0 soon.\n. @box-turtle I am not sure that this will come with the new API, but removing unnecessary overflow:hidden from many places in our CSS will also happen soon.\n. This request is AWESOME!\nI wish we were able to get rid of isFooterCell and isHeaderCell or at least minimise branching base on that because it makes code more difficult to understand.\nAlso please add trailing comas in missing places and empty lines before function declarations.\n\nOne more thing I didn't think through, but might be worth looking at is columnKey. Fact that people can pass components with some props already defined now, would also make it very easy to get the columnKey out from FixedDataColumn and make people pass it to their components themselves if they need it.\n. That looks cool. I went very quickly over and I see that you are still using ReactComponentWithPureRenderMixin in Cells/Rows. With that and no data there is no way for user to force the table to render new contents for cells. I don't think we can assume that everyone who uses table has cells subscribing to data sources and is ok with not re-rendering cells. At this point the FixedDataTableCell.react with the set of props will nearly always return false from shouldComponentUpdate.\n. @Martynas-P Thanks for reporting this. There is a plan to get these translation values down by not rendering fake div with dimensions of whole table and some smaller blocks instead. We didn't have time to work on that yet. \n. Thanks for fixing this @pieterv!\n. Yeah, we should properly fix this by not rendering div that huge, but have couple smaller divs wrapping rows and control them well.\n. ",
    "kamilogorek": "@fabiomcosta \n\n> FixedDataTable does not support touch devices, but eventually will.\n. @fabiomcosta \n\n> FixedDataTable does not support touch devices, but eventually will.\n. ",
    "DjebbZ": "Tested (iPhone 5C, iOS 7, Safari), and while it works, the behaviour is somehow weird, because when I scroll up/down, my finger doesn't move perfectly vertically, so I see the right part of the table sliding a little left or right too when it's sliding up or down. Otherwise the animation is smooth.\n\nOf course such a big table isn't pratical at all on a small phone, even in landscape.\n. Tested (iPhone 5C, iOS 7, Safari), and while it works, the behaviour is somehow weird, because when I scroll up/down, my finger doesn't move perfectly vertically, so I see the right part of the table sliding a little left or right too when it's sliding up or down. Otherwise the animation is smooth.\n\nOf course such a big table isn't pratical at all on a small phone, even in landscape.\n. ",
    "fabiomcosta": "I think I was mistakenly tagged on this thread hah\n. I think I was mistakenly tagged on this thread hah\n. ",
    "fingermark": "It works, but it's no where as fast or smooth as it is on desktop.  I really like where this is going, though.\n. It works, but it's no where as fast or smooth as it is on desktop.  I really like where this is going, though.\n. ",
    "martinpesout": "I see that you are using ZingaScroller to achieve scrolling on touch devices. But if you check https://github.com/zynga/scroller you can see that Zinga Scroller is without support and update over 3 years. Do you think that it's still good idea to achieve scrolling with outdated library? Is there any live alternative for this? \n. @NerdCowboy no, I'm using ZingaScroller in the end :smile: I think that this library works. I had to extend classes for better rendering performance support:\n\n```\n.public_fixedDataTable_header,\n.fixedDataTableLayout_rowsContainer > * {\n    transform: translateZ(0);\n}\n```\n\nThis improve scrolling performance just a bit and fix weird problem on iOS Safari, when I had disappearing header for a while when interact with cells inside (for example I placed checkbox into table). \n\nInteresting is that during my frontend development I've found a lot of problems with rendering on iOS Safari or Chrome (and problems weren't related only to fixed-data-table) and every time I solved it by some trick with `transform: translateZ(0);` :smiley: \n. Is there any progress with this issue? Is there any workaround how to solve it?\n. @srinigowda make sure whether you have the right values in next function. You must have something like this:\n\n```\n_onContentHeightChange: function(contentHeight) {\n    if (this.props.onContentDimensionsChange) {\n        this.props.onContentDimensionsChange(contentHeight, Math.max(600, this.props.tableWidth));\n    }\n},\n```\n\nNumber `600` means maximum width of all cells in your table. Make sure that you have right number here. Maybe is your problem similar.\n. +1 for this feature\n. +1\n. I see that you are using ZingaScroller to achieve scrolling on touch devices. But if you check https://github.com/zynga/scroller you can see that Zinga Scroller is without support and update over 3 years. Do you think that it's still good idea to achieve scrolling with outdated library? Is there any live alternative for this? \n. @NerdCowboy no, I'm using ZingaScroller in the end :smile: I think that this library works. I had to extend classes for better rendering performance support:\n\n```\n.public_fixedDataTable_header,\n.fixedDataTableLayout_rowsContainer > * {\n    transform: translateZ(0);\n}\n```\n\nThis improve scrolling performance just a bit and fix weird problem on iOS Safari, when I had disappearing header for a while when interact with cells inside (for example I placed checkbox into table). \n\nInteresting is that during my frontend development I've found a lot of problems with rendering on iOS Safari or Chrome (and problems weren't related only to fixed-data-table) and every time I solved it by some trick with `transform: translateZ(0);` :smiley: \n. Is there any progress with this issue? Is there any workaround how to solve it?\n. @srinigowda make sure whether you have the right values in next function. You must have something like this:\n\n```\n_onContentHeightChange: function(contentHeight) {\n    if (this.props.onContentDimensionsChange) {\n        this.props.onContentDimensionsChange(contentHeight, Math.max(600, this.props.tableWidth));\n    }\n},\n```\n\nNumber `600` means maximum width of all cells in your table. Make sure that you have right number here. Maybe is your problem similar.\n. +1 for this feature\n. +1\n. ",
    "NerdCowboy": "@martinpesout Did you you find any alternatives? \n. @martinpesout Did you you find any alternatives? \n. ",
    "mtando": "https://facebook.github.io/fixed-data-table/example-object-data.html  -> I can only scroll horizontally up to ZipCode column on my chrome (iOS iphone 6 device). Is there a way to fix this?\n. https://facebook.github.io/fixed-data-table/example-object-data.html  -> I can only scroll horizontally up to ZipCode column on my chrome (iOS iphone 6 device). Is there a way to fix this?\n. ",
    "wcjordan": "@mtando this repos maintainers are no longer active, but we've created a maintained fork here:\nhttps://github.com/schrodinger/fixed-data-table-2 (under fixed-data-table-2 on npm)\n\nWe also recently added a touch scroll support which I believe will work for your case.  It can be enabled by passing a touchScrollEnabled prop to the Table as in the example [here](https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/TouchScrollExample.js).\n\nPlease try it out and file any issues you see on our repo.\n. Our [fork](https://github.com/schrodinger/fixed-data-table-2) provides an example of how to do this [here](http://schrodinger.github.io/fixed-data-table-2/example-reorder.html).\n. @AlesJiranek @grahamb @jamnanlaw we've merged the PR for this into our fork at https://github.com/schrodinger/fixed-data-table-2 and should have the fix up on npm within a week.\n. One thing I love about React is the composibility of its components and the power of higher order components.  I think this is a great case for using that since the existing FDT API already supports the necessary functionality for resizing.\n\n@jdelafon your points regarding rewriting functionality and the effort it takes to find and learn a solution are valid.  I think a good way to address them is to create an example that demonstrates using a HOC like [react-dimensions](https://github.com/digidem/react-dimensions) and add it to our [FDT2 fork](https://github.com/schrodinger/fixed-data-table-2).  I'll attempt to do this over the next week..\n\nI don't think there's value in integrating the solution directly into FDT / FDT2 since FDT isn't currently maintained, and FDT2 only has a few part time maintainers.  That won't address the issues around getting the HOC to work with an existing code base or handle specific edge cases, but maybe we can discuss and address those as they arise.\n\nDo folks feel this is a good direction for the repo?\n. An example for doing responsive resizing with react-dimensions is now available here: \nhttp://schrodinger.github.io/fixed-data-table-2/example-responsive.html\n. Ah thanks for pointing that out.  That's an issue with the left navigation and example pages layout for FDT.  The example should be fine to use though.  I'll get the left nav issue fixed shortly.\n. Should be fixed now.  Thanks again for pointing that out.\n. @zpao is there anyway you could sync the existing tests Pieter mentioned onto a branch for us?  We'd be interested in integrating them into FDT2 if possible.\n. @binarykitchen This repo isn't very active, but if you want to file on [our fork](https://github.com/schrodinger/fixed-data-table-2), we're happy to look into it there.\r\n\r\nSomething like our [Data Context Example](http://schrodinger.github.io/fixed-data-table-2/example-context.html) may help in this case.. The Facebook maintainers haven't had the time to work on it. See #468 and #408 for more discussion.\r\n\r\nAt Schrodinger, we're committed to maintaining the repo and pulling in PRs.  Also hopefully fostering the community.  We've been adding performance improvements over the last year, and aim to land a migration to cleaner state management with Redux sometime in the next couple months.. @tbrd @HillLiu @DenLilleMand @djbobbydrake we've merged the PR for this into our fork at https://github.com/schrodinger/fixed-data-table-2 and should have the fix up on npm within a week.\n\n@thomasdavis If you open an issue or PR with the SSR issues you're seeing, we'd appreciate your help getting it stable on our fork.  Thanks!\n. There's an example here as well http://schrodinger.github.io/fixed-data-table-2/example-collapse.html. I recommend using our fork here:\r\nhttps://github.com/schrodinger/fixed-data-table-2\r\nhttps://www.npmjs.com/package/fixed-data-table-2\r\n\r\nWe have a responsive resizing example using [react-dimensions here](http://schrodinger.github.io/fixed-data-table-2/example-responsive.html).  I believe that fits your use case.. Cells tend to be re-rendered frequently because their containing component will be re-rendered during a scroll even though their state and props aren't changed.  If you inherit React.PureComponent or add performance checks to shouldComponentUpdate you can avoid these cell re-renders.\n\nI recommend looking at the [example cells](https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/helpers/cells.js).  They allow the [examples](http://schrodinger.github.io/fixed-data-table-2/example-pagination.html) to scroll without jank.  \n\nThe [pagination example](https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/PaginationExample.js) in particular has an interesting trick for re-rendering the cells only when data updates come in from requests to the backend by including a dataVersion prop from the data store.\n. Hey @israelidanny the maintainers of this repo are no longer active, but a few of us are actively working on a fork here: https://github.com/schrodinger/fixed-data-table-2\n\nIf you'd like to open an issue or submit a PR there, we'd be happy to take a look.  Our guide for contributing can be found here: https://github.com/schrodinger/fixed-data-table-2/blob/master/CONTRIBUTING.md\n. Hey @Robertmw the maintainers of this repo haven't been active lately, but we have [a fork here](https://github.com/schrodinger/fixed-data-table-2) which actually just merged in a [pull request](https://github.com/schrodinger/fixed-data-table-2/pull/28) which I believe will fix this issue.  We're on npm as fixed-data-table-2 and should be pushing a version with the fix shortly. \n\n@KamranAsif can you comment here when we publish 0.6.7 for fixed-data-table-2?\n. This would resolve that issue, but I think it will have a negative impact on performance since buffered rows will now only be recycling the React objects, not the DOM elements.  @KamranAsif do you want to try this out on our scrolling performance test and see if there's noticeable degradation?\n. This repo doesn't see a lot of active maintenance.  Would it be possible for you to try https://github.com/schrodinger/fixed-data-table-2 and see if the issue exists there?  The examples are here: http://schrodinger.github.io/fixed-data-table-2/example-object-data.html\n. @jibees I'm assuming you're making use of the SortHeaderCell example code.  This bug appears to be in there.  Where it [consumes the props](https://github.com/schrodinger/fixed-data-table-2/blob/b4394d1b526a5a53888abe9c2dcac1c0b57e92d0/examples/SortExample.js#L30), it doesn't consume onSortChange when it should.  It does appear to consume sortDir though so I'm not sure why you're seeing that as an error, unless it's fixed on FDT2 but not FDT.  \n\nAdding onSortChange to be consumed in that SortHeaderCell should fix the issue.  If that works for you we'd appreciate it if you could put up a PR with the fix to the example on our repo [here](https://github.com/schrodinger/fixed-data-table-2).  Thanks!\n. I've fixed this in the FDT2 examples with this PR: https://github.com/schrodinger/fixed-data-table-2/pull/59\n. Here's an example\r\n```\r\nvar {onSortChange, sortDir, children, ...props} = this.props;\r\nreturn <Cell {...props}>\r\n...\r\n```\r\n\r\nThe examples in this repo are unfortunately out of date.  I recommend copying from the [maintained fork](https://github.com/schrodinger/fixed-data-table-2/).  See here for a complete example: https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/SortExample.js\r\n. Hey @txgruppi, this repo is no longer maintained, but we have a maintained fork at [schrodinger/fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2).  Could you try that and see if this is still an issue?. Ya it could be much more clear, but no actions been taken yet.\r\nFeel free to upvote or chime in on #468 and #408 where discussion about that has been focused.. Hey @matthewrobb, this repo is no longer maintained, but check out our active fork here:\r\nhttps://github.com/schrodinger/fixed-data-table-2\r\nhttp://schrodinger.github.io/fixed-data-table-2/\r\n\r\nThe examples should work.. I think you should be able to create a custom header cell component for that column.  See this example for a similar case: http://schrodinger.github.io/fixed-data-table-2/example-collapse.html\n. Would it be possible for you to share a CodePen or JsFiddle reproducing what you're seeing?\n\nI was able to achieve this by updating the RemovableHeaderCell to this:\n\n```\n<Cell {...props} style={{backgroundColor: 'red'}}>\n  {children}\n  <a style={{float: 'right'}} onClick={() => callback(columnKey)}>\n    {'\\u274C'}\n  </a>\n</Cell>\n```\n\n<img width=\"467\" alt=\"screen shot 2016-10-19 at 11 22 17 pm\" src=\"https://cloud.githubusercontent.com/assets/1034455/19545274/f0fa2a1e-9652-11e6-94d4-95316dd23f79.png\">\n\nHere's a sample JsFiddle, in case it helps you share an example: https://jsfiddle.net/pvt3dc1r/\n. Hey @nextofsearch, this repo is no longer maintained, but we maintain [a fork at Schrodinger](https://github.com/schrodinger/fixed-data-table-2).  We've put together a [roadmap here](http://schrodinger.github.io/fixed-data-table-2/roadmap.html) and try to fix any bugs which popup and assist with anyone adding new functionality through a PR.  Another popular library to look at is [React-Virtualized](https://github.com/bvaughn/react-virtualized) which allows performant rendering of large lists and grid data.. I believe this issue has been resolved in [FDT2](https://github.com/schrodinger/fixed-data-table-2) if you'd like to check.  @KamranAsif may be able to give details on the way it was resolved.. Ya unfortunately Facebook has yet to deprecate this repo in-spite of the inactivity.  They also softly encourage React-Virtualized over the fork of this as it provides a more general solution for those willing to switch over.  In the meantime we're working on hyper optimized performance specifically for interactive grids over on FDT2 and will continue to do so for anyone who has FDT issues.\r\n\r\nMore discussion on deprecating this repo can be found on #468 and #408. Hey @kyldvs & @gaearon, I'm one of the maintainers of the [fixed-data-table-2 fork](https://github.com/schrodinger/fixed-data-table-2).  You should be able to create a release with `npm run publish-package`.  We ran into some issues because react-docgen doesn't support create-react-class yet, but I'm working on a [PR for that](https://github.com/reactjs/react-docgen/pull/179).\r\n\r\nWhile you're active here, would it be possible to revisit adding a deprecation notice to the repo that points users to fixed-data-table-2 and react-virtualized?  It's been discussed for a while, but the repo's been left in limbo (#468 & #408).\r\n\r\nP.S. Thanks for all your hard work on React & Redux.  It's made my life incredibly better both in working on web applications and in mentoring and training others.  The effort you put into documentation & tooling means everything.. The issue is that there have been 5 commits since November 2015 (8 if you include merge commits).  Many users have filed issues and pull requests against the repo, and there are no active maintainers to address them.. Thanks for the update, Kyle.  Please let me know if there's anything we can do from the FDT2 end to help with the issues around maintenance.. Hey @Odrin, thanks for your work on this and #487!  This repo is no longer maintained, but we have an active fork at [schrodinger/fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2).  We're working on the 15.5 deprecation warnings with [this PR](https://github.com/schrodinger/fixed-data-table-2/pull/147).  There are some additional challenges with keeping all our build tools running smoothly with the changes (react-docgen, etc), but if you'd like to help, feel free to reach out to @KamranAsif or chime in on that PR.. Hey @glenne, this repo's maintainers haven't been very active (see #468 and #408).  I recommend checking out our fork at https://github.com/schrodinger/fixed-data-table-2 where we're trying to include any PRs and keep things up to date.\r\n. Please do, and if you're willing feel free to create a pull request.  I'm guessing that code has become out of date or assumes it's part of a page with a div with the id example.  We tend to rely on the [examples](http://schrodinger.github.io/fixed-data-table-2/example-object-data.html) section of our docs a bit more.\r\n\r\nAny details on how to make it easier to onboard to is much appreciated.  Thanks!. This feature exists on the [fixed-data-table-2 fork|https://github.com/schrodinger/fixed-data-table-2].  If you're interested.  This repo is pretty much abandoned, but we're actively bug fixing and taking pull requests on the fork.. @kyldvs @zpao could either of you weigh in here?. @mtando this repos maintainers are no longer active, but we've created a maintained fork here:\nhttps://github.com/schrodinger/fixed-data-table-2 (under fixed-data-table-2 on npm)\n\nWe also recently added a touch scroll support which I believe will work for your case.  It can be enabled by passing a touchScrollEnabled prop to the Table as in the example [here](https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/TouchScrollExample.js).\n\nPlease try it out and file any issues you see on our repo.\n. Our [fork](https://github.com/schrodinger/fixed-data-table-2) provides an example of how to do this [here](http://schrodinger.github.io/fixed-data-table-2/example-reorder.html).\n. @AlesJiranek @grahamb @jamnanlaw we've merged the PR for this into our fork at https://github.com/schrodinger/fixed-data-table-2 and should have the fix up on npm within a week.\n. One thing I love about React is the composibility of its components and the power of higher order components.  I think this is a great case for using that since the existing FDT API already supports the necessary functionality for resizing.\n\n@jdelafon your points regarding rewriting functionality and the effort it takes to find and learn a solution are valid.  I think a good way to address them is to create an example that demonstrates using a HOC like [react-dimensions](https://github.com/digidem/react-dimensions) and add it to our [FDT2 fork](https://github.com/schrodinger/fixed-data-table-2).  I'll attempt to do this over the next week..\n\nI don't think there's value in integrating the solution directly into FDT / FDT2 since FDT isn't currently maintained, and FDT2 only has a few part time maintainers.  That won't address the issues around getting the HOC to work with an existing code base or handle specific edge cases, but maybe we can discuss and address those as they arise.\n\nDo folks feel this is a good direction for the repo?\n. An example for doing responsive resizing with react-dimensions is now available here: \nhttp://schrodinger.github.io/fixed-data-table-2/example-responsive.html\n. Ah thanks for pointing that out.  That's an issue with the left navigation and example pages layout for FDT.  The example should be fine to use though.  I'll get the left nav issue fixed shortly.\n. Should be fixed now.  Thanks again for pointing that out.\n. @zpao is there anyway you could sync the existing tests Pieter mentioned onto a branch for us?  We'd be interested in integrating them into FDT2 if possible.\n. @binarykitchen This repo isn't very active, but if you want to file on [our fork](https://github.com/schrodinger/fixed-data-table-2), we're happy to look into it there.\r\n\r\nSomething like our [Data Context Example](http://schrodinger.github.io/fixed-data-table-2/example-context.html) may help in this case.. The Facebook maintainers haven't had the time to work on it. See #468 and #408 for more discussion.\r\n\r\nAt Schrodinger, we're committed to maintaining the repo and pulling in PRs.  Also hopefully fostering the community.  We've been adding performance improvements over the last year, and aim to land a migration to cleaner state management with Redux sometime in the next couple months.. @tbrd @HillLiu @DenLilleMand @djbobbydrake we've merged the PR for this into our fork at https://github.com/schrodinger/fixed-data-table-2 and should have the fix up on npm within a week.\n\n@thomasdavis If you open an issue or PR with the SSR issues you're seeing, we'd appreciate your help getting it stable on our fork.  Thanks!\n. There's an example here as well http://schrodinger.github.io/fixed-data-table-2/example-collapse.html. I recommend using our fork here:\r\nhttps://github.com/schrodinger/fixed-data-table-2\r\nhttps://www.npmjs.com/package/fixed-data-table-2\r\n\r\nWe have a responsive resizing example using [react-dimensions here](http://schrodinger.github.io/fixed-data-table-2/example-responsive.html).  I believe that fits your use case.. Cells tend to be re-rendered frequently because their containing component will be re-rendered during a scroll even though their state and props aren't changed.  If you inherit React.PureComponent or add performance checks to shouldComponentUpdate you can avoid these cell re-renders.\n\nI recommend looking at the [example cells](https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/helpers/cells.js).  They allow the [examples](http://schrodinger.github.io/fixed-data-table-2/example-pagination.html) to scroll without jank.  \n\nThe [pagination example](https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/PaginationExample.js) in particular has an interesting trick for re-rendering the cells only when data updates come in from requests to the backend by including a dataVersion prop from the data store.\n. Hey @israelidanny the maintainers of this repo are no longer active, but a few of us are actively working on a fork here: https://github.com/schrodinger/fixed-data-table-2\n\nIf you'd like to open an issue or submit a PR there, we'd be happy to take a look.  Our guide for contributing can be found here: https://github.com/schrodinger/fixed-data-table-2/blob/master/CONTRIBUTING.md\n. Hey @Robertmw the maintainers of this repo haven't been active lately, but we have [a fork here](https://github.com/schrodinger/fixed-data-table-2) which actually just merged in a [pull request](https://github.com/schrodinger/fixed-data-table-2/pull/28) which I believe will fix this issue.  We're on npm as fixed-data-table-2 and should be pushing a version with the fix shortly. \n\n@KamranAsif can you comment here when we publish 0.6.7 for fixed-data-table-2?\n. This would resolve that issue, but I think it will have a negative impact on performance since buffered rows will now only be recycling the React objects, not the DOM elements.  @KamranAsif do you want to try this out on our scrolling performance test and see if there's noticeable degradation?\n. This repo doesn't see a lot of active maintenance.  Would it be possible for you to try https://github.com/schrodinger/fixed-data-table-2 and see if the issue exists there?  The examples are here: http://schrodinger.github.io/fixed-data-table-2/example-object-data.html\n. @jibees I'm assuming you're making use of the SortHeaderCell example code.  This bug appears to be in there.  Where it [consumes the props](https://github.com/schrodinger/fixed-data-table-2/blob/b4394d1b526a5a53888abe9c2dcac1c0b57e92d0/examples/SortExample.js#L30), it doesn't consume onSortChange when it should.  It does appear to consume sortDir though so I'm not sure why you're seeing that as an error, unless it's fixed on FDT2 but not FDT.  \n\nAdding onSortChange to be consumed in that SortHeaderCell should fix the issue.  If that works for you we'd appreciate it if you could put up a PR with the fix to the example on our repo [here](https://github.com/schrodinger/fixed-data-table-2).  Thanks!\n. I've fixed this in the FDT2 examples with this PR: https://github.com/schrodinger/fixed-data-table-2/pull/59\n. Here's an example\r\n```\r\nvar {onSortChange, sortDir, children, ...props} = this.props;\r\nreturn <Cell {...props}>\r\n...\r\n```\r\n\r\nThe examples in this repo are unfortunately out of date.  I recommend copying from the [maintained fork](https://github.com/schrodinger/fixed-data-table-2/).  See here for a complete example: https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/SortExample.js\r\n. Hey @txgruppi, this repo is no longer maintained, but we have a maintained fork at [schrodinger/fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2).  Could you try that and see if this is still an issue?. Ya it could be much more clear, but no actions been taken yet.\r\nFeel free to upvote or chime in on #468 and #408 where discussion about that has been focused.. Hey @matthewrobb, this repo is no longer maintained, but check out our active fork here:\r\nhttps://github.com/schrodinger/fixed-data-table-2\r\nhttp://schrodinger.github.io/fixed-data-table-2/\r\n\r\nThe examples should work.. I think you should be able to create a custom header cell component for that column.  See this example for a similar case: http://schrodinger.github.io/fixed-data-table-2/example-collapse.html\n. Would it be possible for you to share a CodePen or JsFiddle reproducing what you're seeing?\n\nI was able to achieve this by updating the RemovableHeaderCell to this:\n\n```\n<Cell {...props} style={{backgroundColor: 'red'}}>\n  {children}\n  <a style={{float: 'right'}} onClick={() => callback(columnKey)}>\n    {'\\u274C'}\n  </a>\n</Cell>\n```\n\n<img width=\"467\" alt=\"screen shot 2016-10-19 at 11 22 17 pm\" src=\"https://cloud.githubusercontent.com/assets/1034455/19545274/f0fa2a1e-9652-11e6-94d4-95316dd23f79.png\">\n\nHere's a sample JsFiddle, in case it helps you share an example: https://jsfiddle.net/pvt3dc1r/\n. Hey @nextofsearch, this repo is no longer maintained, but we maintain [a fork at Schrodinger](https://github.com/schrodinger/fixed-data-table-2).  We've put together a [roadmap here](http://schrodinger.github.io/fixed-data-table-2/roadmap.html) and try to fix any bugs which popup and assist with anyone adding new functionality through a PR.  Another popular library to look at is [React-Virtualized](https://github.com/bvaughn/react-virtualized) which allows performant rendering of large lists and grid data.. I believe this issue has been resolved in [FDT2](https://github.com/schrodinger/fixed-data-table-2) if you'd like to check.  @KamranAsif may be able to give details on the way it was resolved.. Ya unfortunately Facebook has yet to deprecate this repo in-spite of the inactivity.  They also softly encourage React-Virtualized over the fork of this as it provides a more general solution for those willing to switch over.  In the meantime we're working on hyper optimized performance specifically for interactive grids over on FDT2 and will continue to do so for anyone who has FDT issues.\r\n\r\nMore discussion on deprecating this repo can be found on #468 and #408. Hey @kyldvs & @gaearon, I'm one of the maintainers of the [fixed-data-table-2 fork](https://github.com/schrodinger/fixed-data-table-2).  You should be able to create a release with `npm run publish-package`.  We ran into some issues because react-docgen doesn't support create-react-class yet, but I'm working on a [PR for that](https://github.com/reactjs/react-docgen/pull/179).\r\n\r\nWhile you're active here, would it be possible to revisit adding a deprecation notice to the repo that points users to fixed-data-table-2 and react-virtualized?  It's been discussed for a while, but the repo's been left in limbo (#468 & #408).\r\n\r\nP.S. Thanks for all your hard work on React & Redux.  It's made my life incredibly better both in working on web applications and in mentoring and training others.  The effort you put into documentation & tooling means everything.. The issue is that there have been 5 commits since November 2015 (8 if you include merge commits).  Many users have filed issues and pull requests against the repo, and there are no active maintainers to address them.. Thanks for the update, Kyle.  Please let me know if there's anything we can do from the FDT2 end to help with the issues around maintenance.. Hey @Odrin, thanks for your work on this and #487!  This repo is no longer maintained, but we have an active fork at [schrodinger/fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2).  We're working on the 15.5 deprecation warnings with [this PR](https://github.com/schrodinger/fixed-data-table-2/pull/147).  There are some additional challenges with keeping all our build tools running smoothly with the changes (react-docgen, etc), but if you'd like to help, feel free to reach out to @KamranAsif or chime in on that PR.. Hey @glenne, this repo's maintainers haven't been very active (see #468 and #408).  I recommend checking out our fork at https://github.com/schrodinger/fixed-data-table-2 where we're trying to include any PRs and keep things up to date.\r\n. Please do, and if you're willing feel free to create a pull request.  I'm guessing that code has become out of date or assumes it's part of a page with a div with the id example.  We tend to rely on the [examples](http://schrodinger.github.io/fixed-data-table-2/example-object-data.html) section of our docs a bit more.\r\n\r\nAny details on how to make it easier to onboard to is much appreciated.  Thanks!. This feature exists on the [fixed-data-table-2 fork|https://github.com/schrodinger/fixed-data-table-2].  If you're interested.  This repo is pretty much abandoned, but we're actively bug fixing and taking pull requests on the fork.. @kyldvs @zpao could either of you weigh in here?. ",
    "matthughes": "Yup, much better now.  Thanks.\n. @willbailey Slow or stuttering?  FF is still slower than Chrome with this fix, but the stuttering is completely gone for me.  I tried my browser at bunch of different dimensions and didn't see it.  Only difference is you're on 10.9.5 and I'm on 10.10.2 but I can't believe that would matter.\n. Yup, much better now.  Thanks.\n. @willbailey Slow or stuttering?  FF is still slower than Chrome with this fix, but the stuttering is completely gone for me.  I tried my browser at bunch of different dimensions and didn't see it.  Only difference is you're on 10.9.5 and I'm on 10.10.2 but I can't believe that would matter.\n. ",
    "willywongi": "Main page and example page are still stuttering here: FF 35 on OS X 10.9.5. Same goes on Chrome as @matthughes. I inspected the page and I see the fix linked to this thread, but scrolling is still slow.\n. On my Mac, with 10.9, scrolling is definitely slow (< 1FPS), both using scroll wheel and dragging the scroll bar. Checking this issue with a colleague I noticed that on his Mac, with OS X 10.10, scrolling is good (smooth). \n. Main page and example page are still stuttering here: FF 35 on OS X 10.9.5. Same goes on Chrome as @matthughes. I inspected the page and I see the fix linked to this thread, but scrolling is still slow.\n. On my Mac, with 10.9, scrolling is definitely slow (< 1FPS), both using scroll wheel and dragging the scroll bar. Checking this issue with a colleague I noticed that on his Mac, with OS X 10.10, scrolling is good (smooth). \n. ",
    "jusio": "I don't have any significant performance scrolling problems, but I've noticed one thing:\n\ntranslate3d seems to be applied to each row separately and it seems that during scrolling each row is always updated on scroll event. It seems that it makes scrolling dependent on viewport size (e.g. how many rows are visible on the screen). \n\nGuys from Github used different approach for scrolling in Atom (http://atom.io).\nThey've created a giant div (it has a height enough to contain all rows) where they put all the rows. transform3d is applied only to that root div. Individual rows are positioned inside the div using top position. When some rows are way to far from viewport, they are repositioned to be after/before viewport (so there is same number of invisible rows before/after viewport, they seem to keep at least two invisible rows before/after viewport).\nThe advantage of this approach is that there is a constant number of dom updates, scrolling generally is achieved by updating a single div, and only rows which are too far from viewport are being repositioned (the rest of the rows is not touched) vs current fixed-data-table approach  where every single visible row position is updated on each scroll. \n. Didn't encounter this issue, until I started using webpack. Happens randomly, for no obvious reason.\n. Well, it's looks like this bug is extremely random. Sometimes it appears right away after page load. Sometimes it appears after 5 minutes after load. But happens less often on your example (with devtools:\"eval\"), than on my project.\n\nJust to help I've put my code on this branch: https://github.com/jusio/storage-area-explorer/tree/wheel-bug\n\nTo build, use:\nnpm install \nwebpack\nopen reacttest/test.html\n\nHere is a demonstration of bug in action: https://www.youtube.com/watch?v=eupBPysVaDg\n. @pieterv  thanks a lot, I was toying with idea to move to React from Angular for some time already, but it was fixed-data-table, which helped to make this decision. Many more people will be using it, for many applications a scrollable, fast grid with fixed rows/headers is a must have component. It is  very generous of you to open-source this component=)\n\nRegarding the bug, I think Webpack should be notified for sure, at least they will be able to make a more specific bug report for chrome team (it is mainly a chrome issue, from what I understand).\n. I've added the missing space, but boolean child handling is not needed, react is mapping boolean&undefined children values to null https://github.com/facebook/react/blob/cf4bef8bd7e62e96775992417db436ac6f5809b7/src/utils/traverseAllChildren.js#L102\n. I don't have any significant performance scrolling problems, but I've noticed one thing:\n\ntranslate3d seems to be applied to each row separately and it seems that during scrolling each row is always updated on scroll event. It seems that it makes scrolling dependent on viewport size (e.g. how many rows are visible on the screen). \n\nGuys from Github used different approach for scrolling in Atom (http://atom.io).\nThey've created a giant div (it has a height enough to contain all rows) where they put all the rows. transform3d is applied only to that root div. Individual rows are positioned inside the div using top position. When some rows are way to far from viewport, they are repositioned to be after/before viewport (so there is same number of invisible rows before/after viewport, they seem to keep at least two invisible rows before/after viewport).\nThe advantage of this approach is that there is a constant number of dom updates, scrolling generally is achieved by updating a single div, and only rows which are too far from viewport are being repositioned (the rest of the rows is not touched) vs current fixed-data-table approach  where every single visible row position is updated on each scroll. \n. Didn't encounter this issue, until I started using webpack. Happens randomly, for no obvious reason.\n. Well, it's looks like this bug is extremely random. Sometimes it appears right away after page load. Sometimes it appears after 5 minutes after load. But happens less often on your example (with devtools:\"eval\"), than on my project.\n\nJust to help I've put my code on this branch: https://github.com/jusio/storage-area-explorer/tree/wheel-bug\n\nTo build, use:\nnpm install \nwebpack\nopen reacttest/test.html\n\nHere is a demonstration of bug in action: https://www.youtube.com/watch?v=eupBPysVaDg\n. @pieterv  thanks a lot, I was toying with idea to move to React from Angular for some time already, but it was fixed-data-table, which helped to make this decision. Many more people will be using it, for many applications a scrollable, fast grid with fixed rows/headers is a must have component. It is  very generous of you to open-source this component=)\n\nRegarding the bug, I think Webpack should be notified for sure, at least they will be able to make a more specific bug report for chrome team (it is mainly a chrome issue, from what I understand).\n. I've added the missing space, but boolean child handling is not needed, react is mapping boolean&undefined children values to null https://github.com/facebook/react/blob/cf4bef8bd7e62e96775992417db436ac6f5809b7/src/utils/traverseAllChildren.js#L102\n. ",
    "nbostrom": "@jusio 's suggestion would probably also solve the other scroll issues, like page up/down, arrow keys, scroll locking, etc.\n. We had our own solution before you announced fixed-data-table in which we had a container with overflow: auto. Inside of that container we had another one with a height set to the calculated height of all rows combined. Inside of that we had a absolutely position container with overflow hidden. Inside of that container we rendered the actualt table. The top position always reflected the scroll position of the outer container. This way all of the native scolling aspects worked as expected.\n\nBasically:\n\n```\ndiv.scollingContainer {overflow: auto}\n    div {height: <actual height of all rows>}\n        div {position: absolute, overflow: hidden, height: <height of .scrollingContainer>, top: <scrollTop of .scrollingContainer>}\n```\n. We have this as a blocker where I work. I would love to create a pull request, but since there are no tests I don't really dare :/\n. @srinigowda what does your headerRenderer look like? I'm thinking that this might be the same issue as https://github.com/facebook/fixed-data-table/issues/146\n. This happens when React checks for mutated props so this only happens when using the development build of React.\n. Works like a charm! Thanks!\n. Probably related to #146 \n. @jusio 's suggestion would probably also solve the other scroll issues, like page up/down, arrow keys, scroll locking, etc.\n. We had our own solution before you announced fixed-data-table in which we had a container with overflow: auto. Inside of that container we had another one with a height set to the calculated height of all rows combined. Inside of that we had a absolutely position container with overflow hidden. Inside of that container we rendered the actualt table. The top position always reflected the scroll position of the outer container. This way all of the native scolling aspects worked as expected.\n\nBasically:\n\n```\ndiv.scollingContainer {overflow: auto}\n    div {height: <actual height of all rows>}\n        div {position: absolute, overflow: hidden, height: <height of .scrollingContainer>, top: <scrollTop of .scrollingContainer>}\n```\n. We have this as a blocker where I work. I would love to create a pull request, but since there are no tests I don't really dare :/\n. @srinigowda what does your headerRenderer look like? I'm thinking that this might be the same issue as https://github.com/facebook/fixed-data-table/issues/146\n. This happens when React checks for mutated props so this only happens when using the development build of React.\n. Works like a charm! Thanks!\n. Probably related to #146 \n. ",
    "Daniel15": "In that case you could probably pull the Markdown into a separate bundle that's not minified. Also React should be loaded from the CDN rather than being bundled.\n. Awesome, thanks Pieter! :D\n. If you're only styling it then I'd suggest using CSS :hover rather than JS.\n. I think it makes sense to add `onRowMouseLeave` to the API, but I wouldn't use it for styling. You should try to not re-render while scrolling as this will seriously hurt performance. CSS :hover should be fine, but adding and removing class names on the React component will force it to constantly re-render rows while scrolling. In general you should avoid heavy operations like that while scrolling.\n. Oh cool, I didn't even notice the dist files. It would be cool to get them onto either CDNJS or the Facebook CDN too so people can just hotlink them if they want to :)\n. Well, ideally built assets should never be in source control, only the source files :). A `dist` directory in source control results in lots of noise in every diff, and quickly becomes out of date once someone forgets to update it. \n\nLoading directly from a Git repo is unversioned. I guess you could use tags, but a proper CDN will have better performance. I believe it's fairly simple to add new libraries to CDNJS.\n. You need to edit the source files rather than the built file that's in the `dist` directory \ud83d\ude04 \n. Thanks for working on this! :smile: \n. > there are just a couple of left: 0; to be adapted in the CSS\n\nGood catch. At Facebook we have a transform that automatically converts things like `left: 0` to `right: 0` and `margin-left` to `margin-right` for RTL languages. This means we generally don't have to worry about having separate CSS files for our internal use cases. Probably worth having separate RTL stylesheets for the open-source release, or a similar transform that generates them.\n. If we _do_ want to support Bower, we could have a separate repo with just the `dist` files. That's what I do with `Babel-standalone`.\n\nIt is definitely still useful to have built files available (eg. for people that don't use `npm`), they shouldn't be checked in though. Instead, we should use the \"releases\" feature of Github for this purpose.\n. > We could also set up cdnjs/jsdelivr to pull those files whenever we publish to npm.\n\nI set up CDNJS to do this for babel-standalone, it works pretty well.\n\n> We've been doing it for React forever too\n\nReact hasn't included `dist` in its repo for a while though, right? The files for Bower are in a separate repo (https://github.com/reactjs/react-bower).\n. Oh cool, now I understand! If Bower can use npmcdn, then I think that's probably the best approach as it means no extra work for us :smile:  Bower seems to be slowly dying anyways, so it's probably not worth having something special just for Bower.\n. Oh I totally forgot to mention - I'm seeing this in Chrome. Haven't tested other browsers yet.\n. In that case you could probably pull the Markdown into a separate bundle that's not minified. Also React should be loaded from the CDN rather than being bundled.\n. Awesome, thanks Pieter! :D\n. If you're only styling it then I'd suggest using CSS :hover rather than JS.\n. I think it makes sense to add `onRowMouseLeave` to the API, but I wouldn't use it for styling. You should try to not re-render while scrolling as this will seriously hurt performance. CSS :hover should be fine, but adding and removing class names on the React component will force it to constantly re-render rows while scrolling. In general you should avoid heavy operations like that while scrolling.\n. Oh cool, I didn't even notice the dist files. It would be cool to get them onto either CDNJS or the Facebook CDN too so people can just hotlink them if they want to :)\n. Well, ideally built assets should never be in source control, only the source files :). A `dist` directory in source control results in lots of noise in every diff, and quickly becomes out of date once someone forgets to update it. \n\nLoading directly from a Git repo is unversioned. I guess you could use tags, but a proper CDN will have better performance. I believe it's fairly simple to add new libraries to CDNJS.\n. You need to edit the source files rather than the built file that's in the `dist` directory \ud83d\ude04 \n. Thanks for working on this! :smile: \n. > there are just a couple of left: 0; to be adapted in the CSS\n\nGood catch. At Facebook we have a transform that automatically converts things like `left: 0` to `right: 0` and `margin-left` to `margin-right` for RTL languages. This means we generally don't have to worry about having separate CSS files for our internal use cases. Probably worth having separate RTL stylesheets for the open-source release, or a similar transform that generates them.\n. If we _do_ want to support Bower, we could have a separate repo with just the `dist` files. That's what I do with `Babel-standalone`.\n\nIt is definitely still useful to have built files available (eg. for people that don't use `npm`), they shouldn't be checked in though. Instead, we should use the \"releases\" feature of Github for this purpose.\n. > We could also set up cdnjs/jsdelivr to pull those files whenever we publish to npm.\n\nI set up CDNJS to do this for babel-standalone, it works pretty well.\n\n> We've been doing it for React forever too\n\nReact hasn't included `dist` in its repo for a while though, right? The files for Bower are in a separate repo (https://github.com/reactjs/react-bower).\n. Oh cool, now I understand! If Bower can use npmcdn, then I think that's probably the best approach as it means no extra work for us :smile:  Bower seems to be slowly dying anyways, so it's probably not worth having something special just for Bower.\n. Oh I totally forgot to mention - I'm seeing this in Chrome. Haven't tested other browsers yet.\n. ",
    "michaelcarter-wf": "Try using [es6-shim](https://github.com/paulmillr/es6-shim/). Solved the issue for me.\n. Try using [es6-shim](https://github.com/paulmillr/es6-shim/). Solved the issue for me.\n. ",
    "nanodocumet": "**[SOLVED]** Add this `Object.assign = Object.assign || require('object-assign');` before `var FixedDataTable = require('fixed-data-table');`\n\nHow can this be fixed when using `webpack`?\n\nI have installed this package using `npm install --save fixed-data-table`, then I have the code below, but I am still getting the error. I am not sure if it is something that I need to fix in my webpack config or anywhere else. Any help will be appreciated!\n\nThanks.\n\n``` javascript\nvar React = require('react');\nvar FixedDataTable = require('fixed-data-table');\n\nvar Table = FixedDataTable.Table;\nvar Column = FixedDataTable.Column;\n\n// Table data as a list of array.\nvar rows = [\n  ['a1', 'b1', 'c1'],\n  ['a2', 'b3', 'c2'],\n  ['a3', 'b3', 'c3'],\n  //..... /// and more\n];\n\nfunction rowGetter(rowIndex) {\n  return rows[rowIndex];\n}\n\nvar MyComponent = React.createClass({\n  mixins: [FluxMixin, State],\n\n  render: function() {\n    return (<Table\n      rowHeight={50}\n      rowGetter={rowGetter}\n      rowsCount={rows.length}\n      width={5000}\n      height={5000}\n      headerHeight={50}>\n      <Column\n        label=\"Col 1\"\n        width={3000}\n        dataKey={0}\n      />\n      <Column\n        label=\"Col 2\"\n        width={2000}\n        dataKey={1}\n      />\n    </Table>);\n  }\n});\n\nmodule.exports = MyComponent;\n```\n. **[SOLVED]** Add this `Object.assign = Object.assign || require('object-assign');` before `var FixedDataTable = require('fixed-data-table');`\n\nHow can this be fixed when using `webpack`?\n\nI have installed this package using `npm install --save fixed-data-table`, then I have the code below, but I am still getting the error. I am not sure if it is something that I need to fix in my webpack config or anywhere else. Any help will be appreciated!\n\nThanks.\n\n``` javascript\nvar React = require('react');\nvar FixedDataTable = require('fixed-data-table');\n\nvar Table = FixedDataTable.Table;\nvar Column = FixedDataTable.Column;\n\n// Table data as a list of array.\nvar rows = [\n  ['a1', 'b1', 'c1'],\n  ['a2', 'b3', 'c2'],\n  ['a3', 'b3', 'c3'],\n  //..... /// and more\n];\n\nfunction rowGetter(rowIndex) {\n  return rows[rowIndex];\n}\n\nvar MyComponent = React.createClass({\n  mixins: [FluxMixin, State],\n\n  render: function() {\n    return (<Table\n      rowHeight={50}\n      rowGetter={rowGetter}\n      rowsCount={rows.length}\n      width={5000}\n      height={5000}\n      headerHeight={50}>\n      <Column\n        label=\"Col 1\"\n        width={3000}\n        dataKey={0}\n      />\n      <Column\n        label=\"Col 2\"\n        width={2000}\n        dataKey={1}\n      />\n    </Table>);\n  }\n});\n\nmodule.exports = MyComponent;\n```\n. ",
    "franleplant": "This does not work with es6 imports somehow :(\n. It seems like babel (which Im using to to transpile es6 to es5) is moving all module declarations to the top and that is why I cannot do the `Object.assign = Object.assign || require('object-assign');`\n\nWhat I ended doing is to paste verbatim the ponyfill in a script in my `index.html` and it works. But it's a horrible hack and I will love to see #102 merged!\n. Hi @pieterv no need to apologize :)\nLast night I was kind of frustrated, nevertheless now it works and with #102 on the way there is nothing less to be said but what has already been said.\n\nThanks _a lot_ for all your support.\n\nFran\n. Another thing related to this is to handle row selection, it'll be nice to allow the user the know better the row is clickable and if the row is selected by a single click the the user might want to try double clicking for further actions.\n. Love this! Waiting for it!\n. This does not work with es6 imports somehow :(\n. It seems like babel (which Im using to to transpile es6 to es5) is moving all module declarations to the top and that is why I cannot do the `Object.assign = Object.assign || require('object-assign');`\n\nWhat I ended doing is to paste verbatim the ponyfill in a script in my `index.html` and it works. But it's a horrible hack and I will love to see #102 merged!\n. Hi @pieterv no need to apologize :)\nLast night I was kind of frustrated, nevertheless now it works and with #102 on the way there is nothing less to be said but what has already been said.\n\nThanks _a lot_ for all your support.\n\nFran\n. Another thing related to this is to handle row selection, it'll be nice to allow the user the know better the row is clickable and if the row is selected by a single click the the user might want to try double clicking for further actions.\n. Love this! Waiting for it!\n. ",
    "cendy172": "Hi there,\nAfter I added Object.assign = Object.assign || require('object-assign'); before require fixed-data-table. the error in browser console is still:  \"FixedDataTable expected an ES6 compatible `Object.assign` polyfill\" and plus another error: Uncaught TypeError: Object.assign is not a function\n\nAnyone can help me here?\n. Hi there,\nAfter I added Object.assign = Object.assign || require('object-assign'); before require fixed-data-table. the error in browser console is still:  \"FixedDataTable expected an ES6 compatible `Object.assign` polyfill\" and plus another error: Uncaught TypeError: Object.assign is not a function\n\nAnyone can help me here?\n. ",
    "facebook-github-bot": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n\n**If you are contributing on behalf of someone else (eg your employer)**: the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!. ",
    "ettysekhon": "@pieterv I will check, i've tried it on 2 machines with IE11 and it doesn't work on both, although both are laptops (without touch).\n. @pieterv I will check, i've tried it on 2 machines with IE11 and it doesn't work on both, although both are laptops (without touch).\n. ",
    "luisrudge": "I don't have touch support and scrolling isn't working. It doesn't show the scroll bar either.\n\n![scroll](https://cloud.githubusercontent.com/assets/941075/6181807/ef1e5fa2-b31f-11e4-81de-015d4ab7eee8.gif)\n. @pieterv you mean facebook is using another version? :D\n. Ah, oh. Thanks for the clarification! Awesome that you guys are using the same version!\n. Still doesn't work on MS EDGE\n. I don't have touch support and scrolling isn't working. It doesn't show the scroll bar either.\n\n![scroll](https://cloud.githubusercontent.com/assets/941075/6181807/ef1e5fa2-b31f-11e4-81de-015d4ab7eee8.gif)\n. @pieterv you mean facebook is using another version? :D\n. Ah, oh. Thanks for the clarification! Awesome that you guys are using the same version!\n. Still doesn't work on MS EDGE\n. ",
    "Axbon": "Not sure this has todo with bad touchdetection, however we've had to change how we detect touchsupport in some of our apps. Some computers \"think\" that they are touchactivated, particulary in Windows 8 with IE11 (even Chrome on some machines).\n\nThis can be caused by a service called \"Tablet Service\" in windows. The strange thing is that it does not happen on all machines, it does however happen even if there is no touchscreen on the machine. I also believe some external USB peripherals can cause touchsupport to be activated. The browser then uses some API in Windows to detect this, and it will be a \"false positive\".\n\nI just tried (I am on a Macbook pro) but I got the Modern.ie image for Windows 8 with IE11 and the scrolling does not appear to work there either in the datatable. I am refering to these images using Virtual Box: https://www.modern.ie/en-us/virtualization-tools#downloads\n\nChecking for touch in IE11 does in fact give me correct values, since I have no touchsupport:\n\n'ontouchstart' in Window === false\nwindow.DocumentTouch === undefined\ndocument instanceof DocumentTouch === 'DocumentTouch' is  undefined\n\nI guess we can rule out this being a \"touch\" issue then :)\n. Yep, reasonable, thanks for the info! :)\n. Not sure this has todo with bad touchdetection, however we've had to change how we detect touchsupport in some of our apps. Some computers \"think\" that they are touchactivated, particulary in Windows 8 with IE11 (even Chrome on some machines).\n\nThis can be caused by a service called \"Tablet Service\" in windows. The strange thing is that it does not happen on all machines, it does however happen even if there is no touchscreen on the machine. I also believe some external USB peripherals can cause touchsupport to be activated. The browser then uses some API in Windows to detect this, and it will be a \"false positive\".\n\nI just tried (I am on a Macbook pro) but I got the Modern.ie image for Windows 8 with IE11 and the scrolling does not appear to work there either in the datatable. I am refering to these images using Virtual Box: https://www.modern.ie/en-us/virtualization-tools#downloads\n\nChecking for touch in IE11 does in fact give me correct values, since I have no touchsupport:\n\n'ontouchstart' in Window === false\nwindow.DocumentTouch === undefined\ndocument instanceof DocumentTouch === 'DocumentTouch' is  undefined\n\nI guess we can rule out this being a \"touch\" issue then :)\n. Yep, reasonable, thanks for the info! :)\n. ",
    "box-turtle": "I'm trying the simplest possible example of fixed data table on Windows 7 with IE10 (I know, everyone's favorite.). Scrollbar shows up, but mouse wheel doesn't work. Clicking and dragging scroll doesn't work. Clicking in empty area of scroll bar does do page up/down. \n\nIf I run the debugger, the error \"Invalid Calling Object\" is thrown on line 61 of ReactWheelHandler.js.\n\n`this.$ReactWheelHandler_animationFrameID = requestAnimationFramePolyfill(this.$ReactWheelHandler_didWheel);\n`\n\nI think the issue has to do with the logic in requestAnimationFramePolyfill - some IE weirdness in binding requestAnimationFrame to the global object. \n\nIf I replace `requestAnimationFramePolyfill` with `window.requestAnimationFrame` then scrolling with the mousewheel works (albeit slowly).\n\nI'll try to look into this a bit more tomorrow.\n. I think we are running into the same ie issue described here:\n\nhttps://github.com/caolan/async/issues/299\n\nexcept in this case it is due to calling requestAnimationFrame as a property of \"global\". \n\n```\nvar nativeRequestAnimationFrame =\n  global.requestAnimationFrame       ||\n  global.webkitRequestAnimationFrame ||\n  global.mozRequestAnimationFrame    ||\n  global.oRequestAnimationFrame      ||\n  global.msRequestAnimationFrame;\n\nmodule.exports = nativeRequestAnimationFrame;\n```\n\nI don't know where in the code the window objects are bound to \"global\" - I am guessing some webpack dark magic.\n. Pretty sure this is a horrible hack, but putting this here in case it helps someone smarter than me fix this. \n\nBased on this bug report: https://github.com/caolan/async/issues/299 and not having a really good understanding of how to intercept the binding of global.requestAnimationFrame, I added this code to nativeRequestAnimationFrame.js\n\n```\nif (requestAnimationFrame) {\n  global.requestAnimationFrame = requestAnimationFrame.bind(null);\n}\n\nvar nativeRequestAnimationFrame =\n  global.requestAnimationFrame       ||\n  global.webkitRequestAnimationFrame ||\n  global.mozRequestAnimationFrame    ||\n  global.oRequestAnimationFrame      ||\n  global.msRequestAnimationFrame;\n\nmodule.exports = nativeRequestAnimationFrame;\n\n```\n\nand this code to cancelAnimationFrame:\n\n```\n if (cancelAnimationFrame) {\n   global.cancelAnimationFrame = cancelAnimationFrame.bind(null);\n }\n\n\nvar cancelAnimationFrame =\n  global.cancelAnimationFrame       ||\n  global.webkitCancelAnimationFrame ||\n  global.mozCancelAnimationFrame    ||\n  global.oCancelAnimationFrame      ||\n  global.msCancelAnimationFrame     ||\n  global.clearTimeout;\n\nmodule.exports = cancelAnimationFrame;\n```\n\nIf you do this then mousewheel and dragging of scrollbar work in IE 10. However, performance is terrible.\n\nThe change does not seem to affect Firefox or Chrome, scrolling remains fast and smooth in those browsers after the change.\n. Tested the fix above on IE11, and it works there too. Also, scrolling is smooth and fast on IE11 (janky on IE10 but who cares).\n. +1 for binarykitchen's suggestion, or just make the first param columnProps.\n. Will this new API make it possible to use a menu or dropdown component as a cell such  that the dropdown can escape the bounds of the cell?\n. Awesome! Currently I'm able to work around using the portal technique suggested in another issue. Maybe removing overflow:hidden could allow us to simulate colspan as well.\n. I'm using a react-bootstrap menu inside a react-overlay component.\n\nhttps://github.com/react-bootstrap/react-overlays\n\n```\n<Overlay\n           show={this.state.show}\n           onHide={() => this.setState({ show: false })}\n           placement=\"bottom\"\n           rootClose\n           container={document.body}\n           target={ () => ReactDOM.findDOMNode(this.refs.target)}\n         >\n            <ul className=\"dropdown-menu\" style={{display: 'block'}}>\n              <MenuItem key='freezeMenu' onSelect={this.freeze}>{col.fixed ? 'Unfreeze' : 'Freeze'}</MenuItem>\n              {groupMenu}\n            </ul>\n        </Overlay>\n```\n. I'm trying the simplest possible example of fixed data table on Windows 7 with IE10 (I know, everyone's favorite.). Scrollbar shows up, but mouse wheel doesn't work. Clicking and dragging scroll doesn't work. Clicking in empty area of scroll bar does do page up/down. \n\nIf I run the debugger, the error \"Invalid Calling Object\" is thrown on line 61 of ReactWheelHandler.js.\n\n`this.$ReactWheelHandler_animationFrameID = requestAnimationFramePolyfill(this.$ReactWheelHandler_didWheel);\n`\n\nI think the issue has to do with the logic in requestAnimationFramePolyfill - some IE weirdness in binding requestAnimationFrame to the global object. \n\nIf I replace `requestAnimationFramePolyfill` with `window.requestAnimationFrame` then scrolling with the mousewheel works (albeit slowly).\n\nI'll try to look into this a bit more tomorrow.\n. I think we are running into the same ie issue described here:\n\nhttps://github.com/caolan/async/issues/299\n\nexcept in this case it is due to calling requestAnimationFrame as a property of \"global\". \n\n```\nvar nativeRequestAnimationFrame =\n  global.requestAnimationFrame       ||\n  global.webkitRequestAnimationFrame ||\n  global.mozRequestAnimationFrame    ||\n  global.oRequestAnimationFrame      ||\n  global.msRequestAnimationFrame;\n\nmodule.exports = nativeRequestAnimationFrame;\n```\n\nI don't know where in the code the window objects are bound to \"global\" - I am guessing some webpack dark magic.\n. Pretty sure this is a horrible hack, but putting this here in case it helps someone smarter than me fix this. \n\nBased on this bug report: https://github.com/caolan/async/issues/299 and not having a really good understanding of how to intercept the binding of global.requestAnimationFrame, I added this code to nativeRequestAnimationFrame.js\n\n```\nif (requestAnimationFrame) {\n  global.requestAnimationFrame = requestAnimationFrame.bind(null);\n}\n\nvar nativeRequestAnimationFrame =\n  global.requestAnimationFrame       ||\n  global.webkitRequestAnimationFrame ||\n  global.mozRequestAnimationFrame    ||\n  global.oRequestAnimationFrame      ||\n  global.msRequestAnimationFrame;\n\nmodule.exports = nativeRequestAnimationFrame;\n\n```\n\nand this code to cancelAnimationFrame:\n\n```\n if (cancelAnimationFrame) {\n   global.cancelAnimationFrame = cancelAnimationFrame.bind(null);\n }\n\n\nvar cancelAnimationFrame =\n  global.cancelAnimationFrame       ||\n  global.webkitCancelAnimationFrame ||\n  global.mozCancelAnimationFrame    ||\n  global.oCancelAnimationFrame      ||\n  global.msCancelAnimationFrame     ||\n  global.clearTimeout;\n\nmodule.exports = cancelAnimationFrame;\n```\n\nIf you do this then mousewheel and dragging of scrollbar work in IE 10. However, performance is terrible.\n\nThe change does not seem to affect Firefox or Chrome, scrolling remains fast and smooth in those browsers after the change.\n. Tested the fix above on IE11, and it works there too. Also, scrolling is smooth and fast on IE11 (janky on IE10 but who cares).\n. +1 for binarykitchen's suggestion, or just make the first param columnProps.\n. Will this new API make it possible to use a menu or dropdown component as a cell such  that the dropdown can escape the bounds of the cell?\n. Awesome! Currently I'm able to work around using the portal technique suggested in another issue. Maybe removing overflow:hidden could allow us to simulate colspan as well.\n. I'm using a react-bootstrap menu inside a react-overlay component.\n\nhttps://github.com/react-bootstrap/react-overlays\n\n```\n<Overlay\n           show={this.state.show}\n           onHide={() => this.setState({ show: false })}\n           placement=\"bottom\"\n           rootClose\n           container={document.body}\n           target={ () => ReactDOM.findDOMNode(this.refs.target)}\n         >\n            <ul className=\"dropdown-menu\" style={{display: 'block'}}>\n              <MenuItem key='freezeMenu' onSelect={this.freeze}>{col.fixed ? 'Unfreeze' : 'Freeze'}</MenuItem>\n              {groupMenu}\n            </ul>\n        </Overlay>\n```\n. ",
    "tim-field": "Can we get a bug label added to this? its kind of a major and has been broken for a while now. \n. @pieterv Hi any update on this one? Still no scrolling in any IE with the example pages. https://facebook.github.io/fixed-data-table/example-object-data.html \n. I'm getting the same issue in Ubuntu Linux with Chrome. Text is clear in Firefox ( I don't think Firefox is hardware accelerated )\n. For me this was caused by a non integer value for headerHeight \n\n`headerHeight={28.5}`\n\nChanging this to\n\n`headerHeight={28}`\n\nFixed the issue in Chrome\n. Can we get a bug label added to this? its kind of a major and has been broken for a while now. \n. @pieterv Hi any update on this one? Still no scrolling in any IE with the example pages. https://facebook.github.io/fixed-data-table/example-object-data.html \n. I'm getting the same issue in Ubuntu Linux with Chrome. Text is clear in Firefox ( I don't think Firefox is hardware accelerated )\n. For me this was caused by a non integer value for headerHeight \n\n`headerHeight={28.5}`\n\nChanging this to\n\n`headerHeight={28}`\n\nFixed the issue in Chrome\n. ",
    "ghost": "Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Is there is support for safari?. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thanks for your response! The rowGetter function seems to also be called hundreds/thousands of times depending on the amount of scrolling that takes place, this many calls to the rowGetter doesn't seem very efficient or is this supposed to happen? The implementation of my rowGetter is also very simple (see the screenshot) and the props that are used in the getter doesn't change very often.\n\nWhat I am especially worried about is the \"wasted time\" rendering these tables. The React documentation states: ' \"Wasted\" time is spent on components that didn't actually render anything, e.g. the render stayed the same, so the DOM wasn't touched.' \n\nDo you experience a lot of \"wasted time\" when using the table component in your implementation or does this seem to be a problem specific to my implementation. \n\nIf you wish to view my implementation of the table API I could send you my source code, perhaps you can find the performance bottleneck.\n\n<img width=\"452\" alt=\"screen shot 2015-08-04 at 14 06 08\" src=\"https://cloud.githubusercontent.com/assets/9976658/9060330/f68ef376-3ab2-11e5-913a-a7721c760355.png\">\n. Thank you so much for your help! The table is more responsive now.\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request.  As you may know, we require contributors to sign our Contributor License Agreement, and we don't seem to have you on file and listed as active anymore.  In order for us to review and merge your code, please email cla@fb.com with your details so we can update your status.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Is there is support for safari?. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thank you for reporting this issue and appreciate your patience. We've  notified the core team for an update on this issue. We're looking for a response within the next 30 days or the issue may be closed.\n. Thanks for your response! The rowGetter function seems to also be called hundreds/thousands of times depending on the amount of scrolling that takes place, this many calls to the rowGetter doesn't seem very efficient or is this supposed to happen? The implementation of my rowGetter is also very simple (see the screenshot) and the props that are used in the getter doesn't change very often.\n\nWhat I am especially worried about is the \"wasted time\" rendering these tables. The React documentation states: ' \"Wasted\" time is spent on components that didn't actually render anything, e.g. the render stayed the same, so the DOM wasn't touched.' \n\nDo you experience a lot of \"wasted time\" when using the table component in your implementation or does this seem to be a problem specific to my implementation. \n\nIf you wish to view my implementation of the table API I could send you my source code, perhaps you can find the performance bottleneck.\n\n<img width=\"452\" alt=\"screen shot 2015-08-04 at 14 06 08\" src=\"https://cloud.githubusercontent.com/assets/9976658/9060330/f68ef376-3ab2-11e5-913a-a7721c760355.png\">\n. Thank you so much for your help! The table is more responsive now.\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request.  As you may know, we require contributors to sign our Contributor License Agreement, and we don't seem to have you on file and listed as active anymore.  In order for us to review and merge your code, please email cla@fb.com with your details so we can update your status.\n. ",
    "AuthorProxy": "Examples not work at all on IE11\n. Examples not work at all on IE11\n. ",
    "fru": "+1\n. @pieterv Would you consider a pull request cleaning up the webpack build system? At the same time I could also reduce the reliance on .sh scripts. I would like to contribute to this project, but the lack of windows compatibility doesn't help. :wink: \n. +1\n. @pieterv Would you consider a pull request cleaning up the webpack build system? At the same time I could also reduce the reliance on .sh scripts. I would like to contribute to this project, but the lack of windows compatibility doesn't help. :wink: \n. ",
    "kertal": "@pieterv \"added touch support wrapper\" how can one remove it? would love to use this table but without working ie11 :( ... although i'd love to tell the users : \"DONT USE IE, GET A BROWSER!\"\n. @pieterv \"added touch support wrapper\" how can one remove it? would love to use this table but without working ie11 :( ... although i'd love to tell the users : \"DONT USE IE, GET A BROWSER!\"\n. ",
    "davidmoshal": "Not working on IE 11, so cannot use this component.\n. Not working on IE 11, so cannot use this component.\n. ",
    "onethread": "@pieterv Just fyi, I think there seems to be 2 different errors at play here. The examples will throw an error on mouseover, but based on your comments that's do to some kind of touch wrapper. However, if I pull down the project and make a rudimentary example using just out of the box Table and Cell components, IE 11 won't throw on mouseover, but it will throw on mousescroll:\n\nLine 89 of ReactWheelHandler.js \"Invalid calling object\". \n\nHowever, the error won't manifest if the node environment is set to production.  \n. @pieterv Just fyi, I think there seems to be 2 different errors at play here. The examples will throw an error on mouseover, but based on your comments that's do to some kind of touch wrapper. However, if I pull down the project and make a rudimentary example using just out of the box Table and Cell components, IE 11 won't throw on mouseover, but it will throw on mousescroll:\n\nLine 89 of ReactWheelHandler.js \"Invalid calling object\". \n\nHowever, the error won't manifest if the node environment is set to production.  \n. ",
    "ichbinedgar": "Hi guys, it's still not working on IE11 or edge mode / Windows 7. \nThe scroll bar is not appearing. But on IE 9 compatibility mode works though. \nThe other features are working (filter, sort,...).\n. Hi guys, it's still not working on IE11 or edge mode / Windows 7. \nThe scroll bar is not appearing. But on IE 9 compatibility mode works though. \nThe other features are working (filter, sort,...).\n. ",
    "mikechabot": "+1 on this 2 year old issue\r\n\r\nBreaks on fixed-data-table/internal/DOMMouseMoveTracker.js\r\n\r\n```\r\n      if (this._animationFrameID === null) {\r\n        // The mouse may move faster then the animation frame does.\r\n        // Use `requestAnimationFramePolyfill` to avoid over-updating.\r\n        this._animationFrameID = requestAnimationFramePolyfill(this._didMouseMove);\r\n      }\r\n```. +1 on this 2 year old issue\r\n\r\nBreaks on fixed-data-table/internal/DOMMouseMoveTracker.js\r\n\r\n```\r\n      if (this._animationFrameID === null) {\r\n        // The mouse may move faster then the animation frame does.\r\n        // Use `requestAnimationFramePolyfill` to avoid over-updating.\r\n        this._animationFrameID = requestAnimationFramePolyfill(this._didMouseMove);\r\n      }\r\n```. I added #490 for this. Linking #392 \r\nSO article: http://stackoverflow.com/questions/39150974/fixed-data-tables-function-onrowclick-not-returning-row-data. @zpao Thanks for all your work.. +1 on this 2 year old issue\r\n\r\nBreaks on fixed-data-table/internal/DOMMouseMoveTracker.js\r\n\r\n```\r\n      if (this._animationFrameID === null) {\r\n        // The mouse may move faster then the animation frame does.\r\n        // Use `requestAnimationFramePolyfill` to avoid over-updating.\r\n        this._animationFrameID = requestAnimationFramePolyfill(this._didMouseMove);\r\n      }\r\n```. +1 on this 2 year old issue\r\n\r\nBreaks on fixed-data-table/internal/DOMMouseMoveTracker.js\r\n\r\n```\r\n      if (this._animationFrameID === null) {\r\n        // The mouse may move faster then the animation frame does.\r\n        // Use `requestAnimationFramePolyfill` to avoid over-updating.\r\n        this._animationFrameID = requestAnimationFramePolyfill(this._didMouseMove);\r\n      }\r\n```. I added #490 for this. Linking #392 \r\nSO article: http://stackoverflow.com/questions/39150974/fixed-data-tables-function-onrowclick-not-returning-row-data. @zpao Thanks for all your work.. ",
    "liamcmitchell": "The current code as I understand it:\n- final col width is calculated from `Table:width`, `Column:width` and `Column:flexGrow`\n- `flexGrow` isn't set to 0 after resize, like it says in the docs\n- when resizing, col width state is meant to be handled by the table's parent component\n- there is no `onColumnResizeStartCallback` so no way to set `isColumnResizing` to true\n  Let me know if I have any of that wrong.\n\nThe problem comes from using the same `width` property to set exact width after resize and as a base for `flexGrow` calculation. This could be fixed in the parent component by working out flex values there but I would rather have both flex and resize state managed within `Table`. Managing resize state internally would make it a lot easier to use out of the box.\n\nIf you wanted to support managing resize state both internally and externally, then it might be easier to have both `width` and `defaultWidth` like input components. Use `width` for specifying exact width if you are managing width in the parent component or use `defaultWidth` as a base for internal resize state and flex calculations.\n\nAny thoughts?\n. The current code as I understand it:\n- final col width is calculated from `Table:width`, `Column:width` and `Column:flexGrow`\n- `flexGrow` isn't set to 0 after resize, like it says in the docs\n- when resizing, col width state is meant to be handled by the table's parent component\n- there is no `onColumnResizeStartCallback` so no way to set `isColumnResizing` to true\n  Let me know if I have any of that wrong.\n\nThe problem comes from using the same `width` property to set exact width after resize and as a base for `flexGrow` calculation. This could be fixed in the parent component by working out flex values there but I would rather have both flex and resize state managed within `Table`. Managing resize state internally would make it a lot easier to use out of the box.\n\nIf you wanted to support managing resize state both internally and externally, then it might be easier to have both `width` and `defaultWidth` like input components. Use `width` for specifying exact width if you are managing width in the parent component or use `defaultWidth` as a base for internal resize state and flex calculations.\n\nAny thoughts?\n. ",
    "matrinox": "I like the `width`/`defaultWidth` idea. Makes it clear your intent, maybe even a warning thrown when using `width` with `isResizable`\n\nFor now, I just set `flexGrow` to `null` which makes sense. I think explicitly setting `flexGrow` to `null` has clearer intent, too\n. :+1: \n. @ehzhang This is what you need to do to reproduce:\n1) Render component with\n\n``` jsx\n<Table\n  rowGetter={@rowGetter}\n  \u2026\n  />\n```\n\n2) in `rowGetter` function, log the rowIndex/first param: `console.log(rowIndex)`\n3) scroll to the top of the list and then keep scrolling\n\nNotice that the logs keep coming even though clearly no rows have changed. In fact, I feel like it shouldn't bother calling that method unless a new row is really needed, as opposed to just on ever scroll. Performance cost isn't that high but could be better. It should only call it once when the user scrolls 1 pixel past the next row, versus all of them again.\n. @hedgerwang Good idea, separating the concerns\n\nBut what if you click on the scroll bar to, I don't know, line 49-59? Do you fetch [0-49] and [50-99]? And then what happens when you refresh the table view, do you do another 2 fetches?\n\nI suppose it could work in the meantime but long term I think that is the best solution\n. :+1: \n. I like the `width`/`defaultWidth` idea. Makes it clear your intent, maybe even a warning thrown when using `width` with `isResizable`\n\nFor now, I just set `flexGrow` to `null` which makes sense. I think explicitly setting `flexGrow` to `null` has clearer intent, too\n. :+1: \n. @ehzhang This is what you need to do to reproduce:\n1) Render component with\n\n``` jsx\n<Table\n  rowGetter={@rowGetter}\n  \u2026\n  />\n```\n\n2) in `rowGetter` function, log the rowIndex/first param: `console.log(rowIndex)`\n3) scroll to the top of the list and then keep scrolling\n\nNotice that the logs keep coming even though clearly no rows have changed. In fact, I feel like it shouldn't bother calling that method unless a new row is really needed, as opposed to just on ever scroll. Performance cost isn't that high but could be better. It should only call it once when the user scrolls 1 pixel past the next row, versus all of them again.\n. @hedgerwang Good idea, separating the concerns\n\nBut what if you click on the scroll bar to, I don't know, line 49-59? Do you fetch [0-49] and [50-99]? And then what happens when you refresh the table view, do you do another 2 fetches?\n\nI suppose it could work in the meantime but long term I think that is the best solution\n. :+1: \n. ",
    "jdhenckel": "After two hours messing with this, here's what i found. 1. you MUST set columnMode=flex, 2. you set the flexGrow to a positive number, 3. the minWidth is useful, 4. the maxWidth and width values are IGNORED. 5. you might want to stretch the table, for instance class=\"material fullscreen\", or some class of your own.. After two hours messing with this, here's what i found. 1. you MUST set columnMode=flex, 2. you set the flexGrow to a positive number, 3. the minWidth is useful, 4. the maxWidth and width values are IGNORED. 5. you might want to stretch the table, for instance class=\"material fullscreen\", or some class of your own.. ",
    "jmorrell": "You would also need mouse hooks in lieu of `:hover' in CSS if you were wanting inline all of your CSS in javascript.\n\nIn either case, this could result in bad performance while scrolling, so it might be discouraged somewhere? If this is a concern we could give a warning and a link to description of how to disable hover styles on scroll? Perhaps we could add a class to the table during scroll to help them? E.g. `:not(.is-scrolling) fixedDataTableRow:hover`. Or if we rely on javascript, we could just not fire those callbacks during scrolling.\n. You would also need mouse hooks in lieu of `:hover' in CSS if you were wanting inline all of your CSS in javascript.\n\nIn either case, this could result in bad performance while scrolling, so it might be discouraged somewhere? If this is a concern we could give a warning and a link to description of how to disable hover styles on scroll? Perhaps we could add a class to the table during scroll to help them? E.g. `:not(.is-scrolling) fixedDataTableRow:hover`. Or if we rely on javascript, we could just not fire those callbacks during scrolling.\n. ",
    "onemanstartup": "Just locally, basically this is what I have this code. I'm using webpack. \n\n``` coffee\nObject.assign = Object.assign || require('object.assign')\nFixedDataTable = require('fixed-data-table')\nrequire('fixed-data-table/dist/fixed-data-table.css')\nTable = FixedDataTable.Table\nColumn = FixedDataTable.Column\nrows = [[1,2], [2,2], [2,2], [2,2], [2,2]]\n\nrowGetter = (rowIndex) ->\n  rows[rowIndex]\n\nmodule.exports = React.createClass\n  render: ->\n    <div>\n      <Table rowHeight={40} rowGetter={rowGetter} rowsCount={rows.length} width={200} height={610} headerHeight={40} >\n        <Column cellRenderer={@cellRender} label=\"lol\" width={200} dataKey={0} />\n      </Table>\n    </div>\n```\n\nit seems webpack can't require some files.\n\n```\nvar normalizeWheel = __webpack_require__(366);\nvar EventListener = __webpack_require__(407);\n```\n. @pieterv Here is how to reproduce, insert in webpack.config.js this `devtool: \"eval\",`\nWithout eval it is working, and with inline-source-map.\n. I tried chrome 39\nChecked webpack version 1.5.3\nSafari, Firefox, even old Opera are working.\n\nSo I downloaded chrome canary 42, clear cache and it's working. I still don't know what besides eval can trigger that behaviour. I will report if any changes in browser break this. \n. Just locally, basically this is what I have this code. I'm using webpack. \n\n``` coffee\nObject.assign = Object.assign || require('object.assign')\nFixedDataTable = require('fixed-data-table')\nrequire('fixed-data-table/dist/fixed-data-table.css')\nTable = FixedDataTable.Table\nColumn = FixedDataTable.Column\nrows = [[1,2], [2,2], [2,2], [2,2], [2,2]]\n\nrowGetter = (rowIndex) ->\n  rows[rowIndex]\n\nmodule.exports = React.createClass\n  render: ->\n    <div>\n      <Table rowHeight={40} rowGetter={rowGetter} rowsCount={rows.length} width={200} height={610} headerHeight={40} >\n        <Column cellRenderer={@cellRender} label=\"lol\" width={200} dataKey={0} />\n      </Table>\n    </div>\n```\n\nit seems webpack can't require some files.\n\n```\nvar normalizeWheel = __webpack_require__(366);\nvar EventListener = __webpack_require__(407);\n```\n. @pieterv Here is how to reproduce, insert in webpack.config.js this `devtool: \"eval\",`\nWithout eval it is working, and with inline-source-map.\n. I tried chrome 39\nChecked webpack version 1.5.3\nSafari, Firefox, even old Opera are working.\n\nSo I downloaded chrome canary 42, clear cache and it's working. I still don't know what besides eval can trigger that behaviour. I will report if any changes in browser break this. \n. ",
    "gsklee": "@pieterv Great explanation, thanks!\n. Some more evidence about this being a bug of the lib:\n\nThis is what I saw using the React devtool:\n\n![React Devtool](http://i.imgur.com/okdc8FI.png)\n\nThe correct figure after the update is `$13,872.17` as shown by the devtool, but the table/HTML displays `$0.00` which is the value before the update:\n\n![HTML](http://i.imgur.com/66QHULb.png)\n. @pieterv I will see if I can come up with one this weekend when I get some time :)\n. This is probably not a bug of the lib. Will reopen if such a case is confirmed.\n. Screenshots\n\n# \n\nFirst error message\n\n![1](http://i.imgur.com/9Wgf3AN.png)\n(cont.)\n![2](http://i.imgur.com/AQXdUd2.png)\n(cont.)\n![3](http://i.imgur.com/7gRLcWh.png)\n(looping)\n\n# ![4](http://i.imgur.com/Lba7s41.png)\n\nSecond error message\n\n![5](http://i.imgur.com/Nmif3Z5.png)\n(cont.)\n![6](http://i.imgur.com/BnmhCTn.png)\n(cont.)\n![7](http://i.imgur.com/1LUATsp.png)\n(looping)\n\n# ![8](http://i.imgur.com/iog9rJ3.png)\n. Found the reason - if `height` etc. are not integers this will cause the problem. The reason that they're not integers can be that they're calculated; in my specific case I calculate my height using the golden ratio.\n\nExample:\n\nhttp://jsbin.com/biwazetufo/5/edit?html,js,output\n. @pieterv Did a quick fix, hopefully that's all about it\n. @pieterv :100: \n. For reference:\n\n![1](http://i.imgur.com/MQJ30Pa.png)\n![2](http://i.imgur.com/VK9RivH.png)\n\nI'd say the first one (stick footer to bottom) is better. If I set a `height` for the table, it means I'd really like to see that `height` in full because I may need to match some other element's height (as shown in the screenshot).\n. @pieterv cool :)\n. @ehzhang :+1: \n. @pieterv Great explanation, thanks!\n. Some more evidence about this being a bug of the lib:\n\nThis is what I saw using the React devtool:\n\n![React Devtool](http://i.imgur.com/okdc8FI.png)\n\nThe correct figure after the update is `$13,872.17` as shown by the devtool, but the table/HTML displays `$0.00` which is the value before the update:\n\n![HTML](http://i.imgur.com/66QHULb.png)\n. @pieterv I will see if I can come up with one this weekend when I get some time :)\n. This is probably not a bug of the lib. Will reopen if such a case is confirmed.\n. Screenshots\n\n# \n\nFirst error message\n\n![1](http://i.imgur.com/9Wgf3AN.png)\n(cont.)\n![2](http://i.imgur.com/AQXdUd2.png)\n(cont.)\n![3](http://i.imgur.com/7gRLcWh.png)\n(looping)\n\n# ![4](http://i.imgur.com/Lba7s41.png)\n\nSecond error message\n\n![5](http://i.imgur.com/Nmif3Z5.png)\n(cont.)\n![6](http://i.imgur.com/BnmhCTn.png)\n(cont.)\n![7](http://i.imgur.com/1LUATsp.png)\n(looping)\n\n# ![8](http://i.imgur.com/iog9rJ3.png)\n. Found the reason - if `height` etc. are not integers this will cause the problem. The reason that they're not integers can be that they're calculated; in my specific case I calculate my height using the golden ratio.\n\nExample:\n\nhttp://jsbin.com/biwazetufo/5/edit?html,js,output\n. @pieterv Did a quick fix, hopefully that's all about it\n. @pieterv :100: \n. For reference:\n\n![1](http://i.imgur.com/MQJ30Pa.png)\n![2](http://i.imgur.com/VK9RivH.png)\n\nI'd say the first one (stick footer to bottom) is better. If I set a `height` for the table, it means I'd really like to see that `height` in full because I may need to match some other element's height (as shown in the screenshot).\n. @pieterv cool :)\n. @ehzhang :+1: \n. ",
    "andrewrota": "Cool, thanks for the quick response!\n. Cool, thanks for the quick response!\n. ",
    "CASandmann": "Any news on support for this?  I almost exclusively use the middle mouse click to scroll, so this is a rather frustrating limitation for me.\n. Any news on support for this?  I almost exclusively use the middle mouse click to scroll, so this is a rather frustrating limitation for me.\n. ",
    "luin": "Same issue here. Could reproduce by scrolling to the bottom, and then give the table a larger height.\n. +1 for the context menu. Any workaround before we have this shipped?\n. @difelice Just tested this pull request with 0.5.0, and it worked great. Seems we can just merge this pr without port it to the new API. Did I miss something? Here's my changes based on the master branch: https://github.com/luin/fixed-data-table/commit/440a87c6b2861d0efcd8b127c5c3ad4b6822e8ad\n. Same issue here. Could reproduce by scrolling to the bottom, and then give the table a larger height.\n. +1 for the context menu. Any workaround before we have this shipped?\n. @difelice Just tested this pull request with 0.5.0, and it worked great. Seems we can just merge this pr without port it to the new API. Did I miss something? Here's my changes based on the master branch: https://github.com/luin/fixed-data-table/commit/440a87c6b2861d0efcd8b127c5c3ad4b6822e8ad\n. ",
    "safareli": "same issue here. :/\n. @ekros see #376. @RJSchmertz it' was not merged i just closed that as for me looks like this repo is not maintained + i'm not using it any more :D . #25 \n. same issue here. :/\n. @ekros see #376. @RJSchmertz it' was not merged i just closed that as for me looks like this repo is not maintained + i'm not using it any more :D . #25 \n. ",
    "StephanUa": "The same issue.  Do you have any updates about fixing it? \n. The same issue.  Do you have any updates about fixing it? \n. ",
    "ekros": "I'm having the same issue. It's quite annoying.. any known workaround?. I'm having the same issue. It's quite annoying.. any known workaround?. ",
    "RJSchmertz": "@safareli did this ever get merged? I don't think I have it in 0.6.4.  This is even worse if your table doesn't take up a full max screen browser.  If the window is smaller than max and you scroll to the bottom then resize/max screen, you can't even scroll anymore because the table thinks your visible area is too small to be scrollable so you can never get back to the top of the data.. @safareli did this ever get merged? I don't think I have it in 0.6.4.  This is even worse if your table doesn't take up a full max screen browser.  If the window is smaller than max and you scroll to the bottom then resize/max screen, you can't even scroll anymore because the table thinks your visible area is too small to be scrollable so you can never get back to the top of the data.. ",
    "KamranAsif": "@RJSchmertz We've fixed this in our fork, github.com/schrodinger/fixed-data-table-2. @tkirda I agree this library does an excellent job of handing large amounts of data, but there are a lot of small bugs that are clearly broken. \n. Hey,\r\n\r\nWe have a forked repo [fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2) that uses webpack, along with new features, bug fixes, unit testing, etc.. @jtrussell Hey,\n\nThis library hasn't been updated for a while. We've been trying to maintain a fork https://github.com/schrodinger/fixed-data-table-2 that includes unit test as well as bug fixes and new features.\n\nWe are slowly building up the tests and would love help from the community \n. Hey,\r\n\r\nWe have this in our maintained fork: http://schrodinger.github.io/fixed-data-table-2/\r\n\r\nWe also have new features, bug fixes, unit tests, etc.. It's less than ideal because you have to disable scrolling by setting overflowY to hidden.\nLucky, we've fixed this quirk in our fork, https://github.com/schrodinger/fixed-data-table-2\n\nThe real pain point is the way FDT calculates a valid position for scrollToRow. It checks to see if scrollToRow is on screen, and if so, considers it 'scrolled to'\nThats obviously annoying when you want to make it at the top or bottom of the table\n. @VladimirPal Sadly not. You can look at the amount of open issues and pull requests. \nI hope FB does try and maintain it, we would love to contribute our work. But until then, we've been working on it ourselves\n. This repo isn't really up to date anymore. I would recommend filing an issue in the maintained fork: https://github.com/schrodinger/fixed-data-table-2\n. @wcjordan can we get a ticket to bring over these commits?\n. Hey folks,\n\nMy group is using this library very actively, and we plan to maintain it. \nWe've already merged in some pull requests (Notably column drag reorder) and have done several bug fixes and have support for react v15.\nWe also threw up some new examples to help folks!\n\nCheck it out here: https://github.com/schrodinger/fixed-data-table\n. If you are using any of the old API's, it seems the transition code will try and cover you over to the new APIs.\nMake sure you aren't using any of the old code (see https://github.com/facebook/fixed-data-table/blob/master/src/transition/FixedDataTable.react.js#L316)\n\nWe have a fork that removed the transition code, you can test on there to make sure you aren't using any deprecated props: https://github.com/schrodinger/fixed-data-table\n\nAs for 0.7, it seems the maintainers haven't been active in quite a while so no idea when the official version is coming out.\n. Curious, what scenarios does this fix?\n. You need to use [rowHeightGetter](http://facebook.github.io/fixed-data-table/api-table.html#-rowheightgetter-) defiend at the table level.\n. Can you throw up your example in a jsfiddle? This works fine for us\n. You can just omit them in the render function. Do you have a fiddle of what your doing?\n. You probably need to implement some sort of paging logic to avoid that. FDT doesn't handle a large amount of data, but rather a large amount of _rows_\n. You can add an onClick event handler to the column header, and have that store its columnKey prop.\n\nIf you want a more detailed answer, feel free to ask in our maintained fork: https://github.com/schrodinger/fixed-data-table\n. Hey folks,\n\nMy group is using this library very actively, and we plan to maintain it. \nWe've already merged in some pull requests (Notably column drag reorder) and have done several bug fixes and have support for react v15.\nWe also threw up some new examples to help folks!\n\nCheck it out here: https://github.com/schrodinger/fixed-data-table\n. We've done this! http://schrodinger.github.io/fixed-data-table-2/example-scroll-to.html\n\nWe've actually [forked](https://github.com/schrodinger/fixed-data-table-2) this repo because of the lack of updates.\n. Hey,\n\nThere are several scroll events you can listen to: \nonScrollStart\nonScrollEnd\n\nWe have a maintained fork adding onHorizontalScroll as well! (Plus bug fixes!)\nCheck out https://github.com/schrodinger/fixed-data-table and feel free to post a follow up question there. \n. Whats the motivation to move towards gulp? We've switched to babel 6 in our fork \n@wcjordan I think there are some commits here we may want to cherry pick. Can we create a jira ticket to follow up on this next sprint?\n. @jippi \r\n\r\nWe have a fork of this library with mobile support\r\nhttp://schrodinger.github.io/fixed-data-table-2/api-table.html#-touchscrollenabled-\r\n\r\nIts a WIP but it should be usable. . @jippi Glad to hear! Feel free to file issues on any bugs you see. We have a POC of dynamic row heights in our maintained fork. \nCheck it out: http://schrodinger.github.io/fixed-data-table-2/example-collapse-rows.html\n. @vinayaknagpal I think the jank is from the n*logN calculation when you update rowHeightGetter. The code seems discard previous results and recalculate.\n\nThey use a binary indexed tree under the hood, so individual row height changes could be logN time. \n\nOur app currently doesn't use individual row heights but its something in our pipeline. We have tables with over 10,000 rows so it would be great to avoid n*logN time\n\nEdit: This is only true if you return a new callback for rowHeightGetter, which I think should not have any errors. I'm not sure if the code does the correct calculation if the callback doesn't change but the values do.\n\n@alansalnikov If you [file an issue](https://github.com/schrodinger/fixed-data-table-2/issues) we can try and tackle it sooner\n. I've put a PR with the fix in our repo. It looks like the scroll helper _is_ calculating the contentHeight correctly, it just that the height was calculated in the wrong order\n\n@alansalnikov Can you please verify if you are still able to reproduce?\n. I assume you are referring to http://ludo.cubicphuse.nl/jquery-treetable/ ?\nIn that case, no it does not. \n. Hey folks,\n\nMy group is using this library very actively, and we plan to maintain it. \nWe've already merged in some pull requests (Notably column drag reorder) and have done several bug fixes and have support for react v15.\nWe also threw up some [new examples](http://schrodinger.github.io/fixed-data-table-2/example-collapse-rows.html) to help folks!\n\nCheck it out here: [https://github.com/schrodinger/fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2)\n. @bartvde Updated, we recently renamed it to fixed-data-table-2 to avoid namespace conflict on npm\n@zpao Can we get https://github.com/facebook/fixed-data-table/pull/411 merged in?\n. Hey,\n\nThis repo isn't maintained anymore, so we can't even offer a PR to fix this.\nWe have a [fork](https://github.com/schrodinger/fixed-data-table-2) that is actively being worked on. \n\nFree free to [file an issue](https://github.com/schrodinger/fixed-data-table-2/issues/new) and we can help you out!\n. @zpao Can we reopen this with a slightly different message that links people to the alternative repo?\n. Hey,\n\nAre you using shouldComponentUpdate? I found it can be a big source of lag because each cell will attempt to render when anything changes. Check out an example here: http://schrodinger.github.io/fixed-data-table-2/example-reorder.html\n\nWe've spent a lot of time optimizing FDT for our application. Feel free to prod more in the maintained fork: https://github.com/schrodinger/fixed-data-table-2\n\nThis repo has been more or less abandoned.\n. Columns in FDT have some strange behavior. They are never actually 'rendered', instead they are treated as a data store and referenced from (e.g. get cell for this column, get column width, etc)\n\nIf you really want to encapsulate it, you need to define this property on the column helper:\n\n```\nColumnHelper['__TableColumn__'] = true;\n```\n\nYou still can't render from it though, but you can do something like this:\n\n```\n<ColumnHelper\n  width={0}\n  flexGrow={2}\n  cell={props=>(<Cell>{rows[props.rowIndex].name}</Cell>)}\n  header='Name'\n>\n```\n\nThe only benefit in this is allowing for extra proptype validation if you have custom rules.\nAlso this repo hasn't really been maintained much. Check out our fork: https://github.com/schrodinger/fixed-data-table-2\n. We've done something similar, where we load data dynamically.\n\nWe've actually [forked](https://github.com/schrodinger/fixed-data-table-2) this repo to add more functionality / bug fixes since the original maintained seem to have abonded it. \n\nHeres an example we have of pagination: http://schrodinger.github.io/fixed-data-table-2/example-pagination.html\n. Hey,\n\nWe have this fix in our repo: https://github.com/schrodinger/fixed-data-table-2/pull/28\nI haven't seen much support for this repo so we've went ahead and created a maintained fork. Feel free to check it out\n. We've had this fix in our fork for a while: https://github.com/schrodinger/fixed-data-table-2\nWe have a bunch of new features, bug fixes, unit testing, etc. Feel free to check it out\n. What version of chrome are you on? Someone reported a similar issue on our fork: https://github.com/schrodinger/fixed-data-table-2/issues/36\n. I'm on OS X 10.11.4 with Chrome Version 52.0.2743.116 (64-bit) and I can't reproduce this on our fork or this one. Are you able to reproduce it consistently? \n. This library hasn't seen a lot of maintenance (you can just look at the number of open issues and PRs)\n\nOur fork has more features, documentation, examples and bug fixes. We are trying to get the community more involved so feel free to check it out and contribute!\n. @ekh64 Can you give some repo steps of where you see the bug?\n. @wcjordan This might be a better solution to https://github.com/schrodinger/fixed-data-table-2/issues/18\n. @ekh64 Could you make the same PR on our maintained fork? https://github.com/schrodinger/fixed-data-table-2\n\nWe haven't seen much activity on this repo (just look at the number of open issues/PRs), but we are trying to actively maintain this library. \n. You need to define footerHeight as well.\nAlso this repo hasn't seen much maintenance. Check out our fork https://github.com/schrodinger/fixed-data-table-2 which has bug fixes and new features\n. This is pretty doable. I think we have a ticket on our fork to add this to the documentation\nhttps://github.com/schrodinger/fixed-data-table-2/issues/14\n. Just change your data and trigger a re-render.\nHeres an example: \nhttps://jsfiddle.net/fppunm8j/\n. You should try and implement shouldComponentUpdate in your functions. FDT doesn't make the assumption of whether your component is pure or not, so it attempts to re-render the cell every scroll.  \n\nHeres an example: https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/ReorderExample.js#L15\n\nAlso, check our our fork: https://github.com/schrodinger/fixed-data-table-2\nWe have bug fixes, new features, more documentation, testing, etc. \n. We have a fork that is compiled via webpack\nhttps://github.com/schrodinger/fixed-data-table-2\n\nWe also have bug fixes, new features, better documentation, etc.\n. React is only listed as a peer dependency, so I think it tries to avoid compiling  using the React stub as a placeholder for the imports. I think  you might be importing react as 'React' somewhere in your code causing a conflict\n. Hmm this might be a bug in your code. Can you paste the full stacktrace?\n. Your render might be too heavy. See my comment on #451 \n. You can change the fixed-data-table.css file\n. Cool fix. Facebook hasn't really been maintain this repo but some of us have been working on a fork with bug fixes, release, unit test, documentation, etc. https://github.com/schrodinger/fixed-data-table-2\n\nWould you mind doing a PR on there as well?\n. This is because your inputs are being reused. Best way to avoid this is to give each input a unique key using the row index + column key. Isn't that what the header already does?. Just add onContextMenu to your cells. We've fixed this in our fork: https://schrodinger.github.io/fixed-data-table-2\r\n\r\nWe also have bug fixes, new features and better documentation. . @RJSchmertz We've fixed this in our fork, github.com/schrodinger/fixed-data-table-2. @tkirda I agree this library does an excellent job of handing large amounts of data, but there are a lot of small bugs that are clearly broken. \n. Hey,\r\n\r\nWe have a forked repo [fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2) that uses webpack, along with new features, bug fixes, unit testing, etc.. @jtrussell Hey,\n\nThis library hasn't been updated for a while. We've been trying to maintain a fork https://github.com/schrodinger/fixed-data-table-2 that includes unit test as well as bug fixes and new features.\n\nWe are slowly building up the tests and would love help from the community \n. Hey,\r\n\r\nWe have this in our maintained fork: http://schrodinger.github.io/fixed-data-table-2/\r\n\r\nWe also have new features, bug fixes, unit tests, etc.. It's less than ideal because you have to disable scrolling by setting overflowY to hidden.\nLucky, we've fixed this quirk in our fork, https://github.com/schrodinger/fixed-data-table-2\n\nThe real pain point is the way FDT calculates a valid position for scrollToRow. It checks to see if scrollToRow is on screen, and if so, considers it 'scrolled to'\nThats obviously annoying when you want to make it at the top or bottom of the table\n. @VladimirPal Sadly not. You can look at the amount of open issues and pull requests. \nI hope FB does try and maintain it, we would love to contribute our work. But until then, we've been working on it ourselves\n. This repo isn't really up to date anymore. I would recommend filing an issue in the maintained fork: https://github.com/schrodinger/fixed-data-table-2\n. @wcjordan can we get a ticket to bring over these commits?\n. Hey folks,\n\nMy group is using this library very actively, and we plan to maintain it. \nWe've already merged in some pull requests (Notably column drag reorder) and have done several bug fixes and have support for react v15.\nWe also threw up some new examples to help folks!\n\nCheck it out here: https://github.com/schrodinger/fixed-data-table\n. If you are using any of the old API's, it seems the transition code will try and cover you over to the new APIs.\nMake sure you aren't using any of the old code (see https://github.com/facebook/fixed-data-table/blob/master/src/transition/FixedDataTable.react.js#L316)\n\nWe have a fork that removed the transition code, you can test on there to make sure you aren't using any deprecated props: https://github.com/schrodinger/fixed-data-table\n\nAs for 0.7, it seems the maintainers haven't been active in quite a while so no idea when the official version is coming out.\n. Curious, what scenarios does this fix?\n. You need to use [rowHeightGetter](http://facebook.github.io/fixed-data-table/api-table.html#-rowheightgetter-) defiend at the table level.\n. Can you throw up your example in a jsfiddle? This works fine for us\n. You can just omit them in the render function. Do you have a fiddle of what your doing?\n. You probably need to implement some sort of paging logic to avoid that. FDT doesn't handle a large amount of data, but rather a large amount of _rows_\n. You can add an onClick event handler to the column header, and have that store its columnKey prop.\n\nIf you want a more detailed answer, feel free to ask in our maintained fork: https://github.com/schrodinger/fixed-data-table\n. Hey folks,\n\nMy group is using this library very actively, and we plan to maintain it. \nWe've already merged in some pull requests (Notably column drag reorder) and have done several bug fixes and have support for react v15.\nWe also threw up some new examples to help folks!\n\nCheck it out here: https://github.com/schrodinger/fixed-data-table\n. We've done this! http://schrodinger.github.io/fixed-data-table-2/example-scroll-to.html\n\nWe've actually [forked](https://github.com/schrodinger/fixed-data-table-2) this repo because of the lack of updates.\n. Hey,\n\nThere are several scroll events you can listen to: \nonScrollStart\nonScrollEnd\n\nWe have a maintained fork adding onHorizontalScroll as well! (Plus bug fixes!)\nCheck out https://github.com/schrodinger/fixed-data-table and feel free to post a follow up question there. \n. Whats the motivation to move towards gulp? We've switched to babel 6 in our fork \n@wcjordan I think there are some commits here we may want to cherry pick. Can we create a jira ticket to follow up on this next sprint?\n. @jippi \r\n\r\nWe have a fork of this library with mobile support\r\nhttp://schrodinger.github.io/fixed-data-table-2/api-table.html#-touchscrollenabled-\r\n\r\nIts a WIP but it should be usable. . @jippi Glad to hear! Feel free to file issues on any bugs you see. We have a POC of dynamic row heights in our maintained fork. \nCheck it out: http://schrodinger.github.io/fixed-data-table-2/example-collapse-rows.html\n. @vinayaknagpal I think the jank is from the n*logN calculation when you update rowHeightGetter. The code seems discard previous results and recalculate.\n\nThey use a binary indexed tree under the hood, so individual row height changes could be logN time. \n\nOur app currently doesn't use individual row heights but its something in our pipeline. We have tables with over 10,000 rows so it would be great to avoid n*logN time\n\nEdit: This is only true if you return a new callback for rowHeightGetter, which I think should not have any errors. I'm not sure if the code does the correct calculation if the callback doesn't change but the values do.\n\n@alansalnikov If you [file an issue](https://github.com/schrodinger/fixed-data-table-2/issues) we can try and tackle it sooner\n. I've put a PR with the fix in our repo. It looks like the scroll helper _is_ calculating the contentHeight correctly, it just that the height was calculated in the wrong order\n\n@alansalnikov Can you please verify if you are still able to reproduce?\n. I assume you are referring to http://ludo.cubicphuse.nl/jquery-treetable/ ?\nIn that case, no it does not. \n. Hey folks,\n\nMy group is using this library very actively, and we plan to maintain it. \nWe've already merged in some pull requests (Notably column drag reorder) and have done several bug fixes and have support for react v15.\nWe also threw up some [new examples](http://schrodinger.github.io/fixed-data-table-2/example-collapse-rows.html) to help folks!\n\nCheck it out here: [https://github.com/schrodinger/fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2)\n. @bartvde Updated, we recently renamed it to fixed-data-table-2 to avoid namespace conflict on npm\n@zpao Can we get https://github.com/facebook/fixed-data-table/pull/411 merged in?\n. Hey,\n\nThis repo isn't maintained anymore, so we can't even offer a PR to fix this.\nWe have a [fork](https://github.com/schrodinger/fixed-data-table-2) that is actively being worked on. \n\nFree free to [file an issue](https://github.com/schrodinger/fixed-data-table-2/issues/new) and we can help you out!\n. @zpao Can we reopen this with a slightly different message that links people to the alternative repo?\n. Hey,\n\nAre you using shouldComponentUpdate? I found it can be a big source of lag because each cell will attempt to render when anything changes. Check out an example here: http://schrodinger.github.io/fixed-data-table-2/example-reorder.html\n\nWe've spent a lot of time optimizing FDT for our application. Feel free to prod more in the maintained fork: https://github.com/schrodinger/fixed-data-table-2\n\nThis repo has been more or less abandoned.\n. Columns in FDT have some strange behavior. They are never actually 'rendered', instead they are treated as a data store and referenced from (e.g. get cell for this column, get column width, etc)\n\nIf you really want to encapsulate it, you need to define this property on the column helper:\n\n```\nColumnHelper['__TableColumn__'] = true;\n```\n\nYou still can't render from it though, but you can do something like this:\n\n```\n<ColumnHelper\n  width={0}\n  flexGrow={2}\n  cell={props=>(<Cell>{rows[props.rowIndex].name}</Cell>)}\n  header='Name'\n>\n```\n\nThe only benefit in this is allowing for extra proptype validation if you have custom rules.\nAlso this repo hasn't really been maintained much. Check out our fork: https://github.com/schrodinger/fixed-data-table-2\n. We've done something similar, where we load data dynamically.\n\nWe've actually [forked](https://github.com/schrodinger/fixed-data-table-2) this repo to add more functionality / bug fixes since the original maintained seem to have abonded it. \n\nHeres an example we have of pagination: http://schrodinger.github.io/fixed-data-table-2/example-pagination.html\n. Hey,\n\nWe have this fix in our repo: https://github.com/schrodinger/fixed-data-table-2/pull/28\nI haven't seen much support for this repo so we've went ahead and created a maintained fork. Feel free to check it out\n. We've had this fix in our fork for a while: https://github.com/schrodinger/fixed-data-table-2\nWe have a bunch of new features, bug fixes, unit testing, etc. Feel free to check it out\n. What version of chrome are you on? Someone reported a similar issue on our fork: https://github.com/schrodinger/fixed-data-table-2/issues/36\n. I'm on OS X 10.11.4 with Chrome Version 52.0.2743.116 (64-bit) and I can't reproduce this on our fork or this one. Are you able to reproduce it consistently? \n. This library hasn't seen a lot of maintenance (you can just look at the number of open issues and PRs)\n\nOur fork has more features, documentation, examples and bug fixes. We are trying to get the community more involved so feel free to check it out and contribute!\n. @ekh64 Can you give some repo steps of where you see the bug?\n. @wcjordan This might be a better solution to https://github.com/schrodinger/fixed-data-table-2/issues/18\n. @ekh64 Could you make the same PR on our maintained fork? https://github.com/schrodinger/fixed-data-table-2\n\nWe haven't seen much activity on this repo (just look at the number of open issues/PRs), but we are trying to actively maintain this library. \n. You need to define footerHeight as well.\nAlso this repo hasn't seen much maintenance. Check out our fork https://github.com/schrodinger/fixed-data-table-2 which has bug fixes and new features\n. This is pretty doable. I think we have a ticket on our fork to add this to the documentation\nhttps://github.com/schrodinger/fixed-data-table-2/issues/14\n. Just change your data and trigger a re-render.\nHeres an example: \nhttps://jsfiddle.net/fppunm8j/\n. You should try and implement shouldComponentUpdate in your functions. FDT doesn't make the assumption of whether your component is pure or not, so it attempts to re-render the cell every scroll.  \n\nHeres an example: https://github.com/schrodinger/fixed-data-table-2/blob/master/examples/ReorderExample.js#L15\n\nAlso, check our our fork: https://github.com/schrodinger/fixed-data-table-2\nWe have bug fixes, new features, more documentation, testing, etc. \n. We have a fork that is compiled via webpack\nhttps://github.com/schrodinger/fixed-data-table-2\n\nWe also have bug fixes, new features, better documentation, etc.\n. React is only listed as a peer dependency, so I think it tries to avoid compiling  using the React stub as a placeholder for the imports. I think  you might be importing react as 'React' somewhere in your code causing a conflict\n. Hmm this might be a bug in your code. Can you paste the full stacktrace?\n. Your render might be too heavy. See my comment on #451 \n. You can change the fixed-data-table.css file\n. Cool fix. Facebook hasn't really been maintain this repo but some of us have been working on a fork with bug fixes, release, unit test, documentation, etc. https://github.com/schrodinger/fixed-data-table-2\n\nWould you mind doing a PR on there as well?\n. This is because your inputs are being reused. Best way to avoid this is to give each input a unique key using the row index + column key. Isn't that what the header already does?. Just add onContextMenu to your cells. We've fixed this in our fork: https://schrodinger.github.io/fixed-data-table-2\r\n\r\nWe also have bug fixes, new features and better documentation. . ",
    "bakesteve": "ah - ok - makes sense\nfeels like, for a grid, if you have a mouse, that's the key scrolling device?\nSo a quick and dirty change would just be to return false in isTouchDevice if window has mouseevents?\nbut guess a better solution is to keep mousescrolling (and scrollbar) if you have a mouse, and then layer on the touchable area / zyngaScroller if you have touch?\n. nope - same behaviour here (on http://facebook.github.io/fixed-data-table/example-object-data.html)\n- no scroll bar\n- touch scrolling works\n- mouse (trackpad or external scroll wheel) doesnt work\n  win 8.1, chrome 40\n. ah - ok - makes sense\nfeels like, for a grid, if you have a mouse, that's the key scrolling device?\nSo a quick and dirty change would just be to return false in isTouchDevice if window has mouseevents?\nbut guess a better solution is to keep mousescrolling (and scrollbar) if you have a mouse, and then layer on the touchable area / zyngaScroller if you have touch?\n. nope - same behaviour here (on http://facebook.github.io/fixed-data-table/example-object-data.html)\n- no scroll bar\n- touch scrolling works\n- mouse (trackpad or external scroll wheel) doesnt work\n  win 8.1, chrome 40\n. ",
    "ofersadgat": "@pieterv what I did in my boilerplate example (https://github.com/ofersadgat/fixed-data-table-simple) is change `'ontouchstart' in window` to `'ontouchstart' in document.documentElement` and that solved the issue. I will create the pull request for it tomorrow.\n. @pieterv what isnt working for you specifically? I tested it with Chome 40 and Firefox 35 and both seem to be working for me.\n. @pieterv I've been googling around looking at touch detection and it looks like it is a very unreliable thing to try and detect simply because some machines may have attachable/detachable touch devices. Therefore, I had a thought: the reason that sort of detection is there is to determine whether to use the touchwrapper for scrolling or to use the built in scroller, so instead of detecting it why dont we default to the build in scroller and then switch to the touchscroller when we detect a touchevent? That way we dont have to rely on any detection.\n. You can see an example in my boilerplate repo: https://github.com/ofersadgat/fixed-data-table-simple\n. I had a lot of the same issues as you and so I created a boilerplate example which isolates a lot of the sizing logic: https://github.com/ofersadgat/fixed-data-table-simple hope it helps!\n. This is the error:\n\n```\nrowGetter={this.state.data}\n```\n\nrowGetter is a function like (from the example):\n\n```\nfunction rowGetter(rowIndex) {\n  return rows[rowIndex];\n}\n```\n. No, what is happening is that the row is being requested multiple times and since you randomly select a color when the row is requested, it changes colors unpredictably. (or at least that is my best theory).\n. While I would still like 'reloadRowAtIndex' it is possible to do this by having a container which updates itself sitting under the Table, see https://github.com/ofersadgat/fixed-data-table-simple as an example.\n. I think that the React-style approach is something like what I did in my example (see the repo linked above for more detail):\n\n```\nvar renderCell = function(cellData, cellDataKey, rowData, rowIndex, columnData, width){\n  var renderLoaded = function(rowData){\n    if (cellDataKey == 'thumbnail'){\n      return <img src={rowData.thumbnailUrl} />;\n    }\n    return <div>{rowData[cellDataKey]}</div>;\n  };\n\n  return (\n    <LoadingCellContainer \n        data={rowData} \n        unloaded={<span></span>}\n        renderLoaded={renderLoaded} />\n  );\n};\n```\n\n`LoadingObjectContainer` is an object which will notify all listeners when the data changes. `LoadingCellContainer` is the object that listens to changes from the `LoadingObjectContainer`.\n\nIn that example you can declarativly state what to render when the data is unloaded vs loaded. The only problem with this approach (and the reason I'd prefer to have something like reloadRowAtIndex) is that it requires that you store the `LoadingObjectContainer` in your stores so that you can populate it when the data arrives. \n\n`reloadRowAtIndex` would relieve that by having render return whatever the table should render at that moment and having the loading logic reload that row. Furthermore, it is simpler because it removes the necessity of having all of the signaling between `LoadingObjectContainer`  and `LoadingCellContainer` . \n\nA problem with that approach would be that if you wanted to do some sort of animation between the unloaded and the loaded state, you would be at a loss. Therefore, an alternative to `reloadRowAtIndex` might be: `getRowDataAtIndex` which will allow you to use the above approach because it will let you store the `LoadingObjectContainer` in the table and the actual data in your own store.\n\nIn summary, `reloadRowAtIndex` is probably better for people to get started but `getRowDataAtIndex` is more react-y and allows you to do animations while allowing your stores to hold their own types.\n. Also, I have added a few improvements such as adding the abstraction that the table will expand to fill the size of the div that it is in so you dont need to care about managing the sizes manually. Also, instead of using the refresh hack to check and see if the div size has changed it uses a library which handles that with an event.\n. The reason that the table requires the size parameter is because it uses the fixed size to remove elements from the DOM that arent displayed on screen.\n\nIn order to do this the way that you want, you would have to hook window.onScroll, use that to update the dom by finding the visible region of the screen and then rendering just that section using absolute positioning. While that might be a good feature to add in the future, as I have hopefully illustrated, it is a lot of work.\n. You can do what I did: make the table resize to the containing div: https://github.com/ofersadgat/fixed-data-table-simple/\n. To be fair, most of it isnt actually boilerplate code. You can use fitted table directly in your code without modification.\n. That example doesnt really work because it wont tell you if only a component resizes but the outermost doesnt. The way that the example handles this case is by manually refreshing and relying on React to not rerender if nothing changed.\n. I think you can pass the props to the `<Column>` as part of the `columnData` and then use that in the `cellRender` to style your components.\n. https://github.com/ofersadgat/fixed-data-table-simple/blob/master/src/js/ObjectDataListStore.jsx\n. The problem is that if you want to add older messages (to continue with my example) they would be inserted in indexes [0 : numNewRows] thereby causing all the indexes of the other rows to change as well. Now, I can force a refresh, but that would cause the table to jump to the top. I could try as you suggested to force a refresh and simultaneously scroll to wherever they were (if I can even figure out where that is), but that would still cause the table to move (because the user might have been on a boundary between rows). Contrast this to loading new rows below where you are looking: the table stays in the exact same place and new rows just appear.\n. Cool! I'm glad to hear that you guys are still working on improving this. I was thinking about starting my own fork to provide some features like the above (and potentially the reloadAtIndex which was previously discussed), but if you guys are working on it, Ill just wait? Are there any details you can share or a timeline?\n. @pieterv what I did in my boilerplate example (https://github.com/ofersadgat/fixed-data-table-simple) is change `'ontouchstart' in window` to `'ontouchstart' in document.documentElement` and that solved the issue. I will create the pull request for it tomorrow.\n. @pieterv what isnt working for you specifically? I tested it with Chome 40 and Firefox 35 and both seem to be working for me.\n. @pieterv I've been googling around looking at touch detection and it looks like it is a very unreliable thing to try and detect simply because some machines may have attachable/detachable touch devices. Therefore, I had a thought: the reason that sort of detection is there is to determine whether to use the touchwrapper for scrolling or to use the built in scroller, so instead of detecting it why dont we default to the build in scroller and then switch to the touchscroller when we detect a touchevent? That way we dont have to rely on any detection.\n. You can see an example in my boilerplate repo: https://github.com/ofersadgat/fixed-data-table-simple\n. I had a lot of the same issues as you and so I created a boilerplate example which isolates a lot of the sizing logic: https://github.com/ofersadgat/fixed-data-table-simple hope it helps!\n. This is the error:\n\n```\nrowGetter={this.state.data}\n```\n\nrowGetter is a function like (from the example):\n\n```\nfunction rowGetter(rowIndex) {\n  return rows[rowIndex];\n}\n```\n. No, what is happening is that the row is being requested multiple times and since you randomly select a color when the row is requested, it changes colors unpredictably. (or at least that is my best theory).\n. While I would still like 'reloadRowAtIndex' it is possible to do this by having a container which updates itself sitting under the Table, see https://github.com/ofersadgat/fixed-data-table-simple as an example.\n. I think that the React-style approach is something like what I did in my example (see the repo linked above for more detail):\n\n```\nvar renderCell = function(cellData, cellDataKey, rowData, rowIndex, columnData, width){\n  var renderLoaded = function(rowData){\n    if (cellDataKey == 'thumbnail'){\n      return <img src={rowData.thumbnailUrl} />;\n    }\n    return <div>{rowData[cellDataKey]}</div>;\n  };\n\n  return (\n    <LoadingCellContainer \n        data={rowData} \n        unloaded={<span></span>}\n        renderLoaded={renderLoaded} />\n  );\n};\n```\n\n`LoadingObjectContainer` is an object which will notify all listeners when the data changes. `LoadingCellContainer` is the object that listens to changes from the `LoadingObjectContainer`.\n\nIn that example you can declarativly state what to render when the data is unloaded vs loaded. The only problem with this approach (and the reason I'd prefer to have something like reloadRowAtIndex) is that it requires that you store the `LoadingObjectContainer` in your stores so that you can populate it when the data arrives. \n\n`reloadRowAtIndex` would relieve that by having render return whatever the table should render at that moment and having the loading logic reload that row. Furthermore, it is simpler because it removes the necessity of having all of the signaling between `LoadingObjectContainer`  and `LoadingCellContainer` . \n\nA problem with that approach would be that if you wanted to do some sort of animation between the unloaded and the loaded state, you would be at a loss. Therefore, an alternative to `reloadRowAtIndex` might be: `getRowDataAtIndex` which will allow you to use the above approach because it will let you store the `LoadingObjectContainer` in the table and the actual data in your own store.\n\nIn summary, `reloadRowAtIndex` is probably better for people to get started but `getRowDataAtIndex` is more react-y and allows you to do animations while allowing your stores to hold their own types.\n. Also, I have added a few improvements such as adding the abstraction that the table will expand to fill the size of the div that it is in so you dont need to care about managing the sizes manually. Also, instead of using the refresh hack to check and see if the div size has changed it uses a library which handles that with an event.\n. The reason that the table requires the size parameter is because it uses the fixed size to remove elements from the DOM that arent displayed on screen.\n\nIn order to do this the way that you want, you would have to hook window.onScroll, use that to update the dom by finding the visible region of the screen and then rendering just that section using absolute positioning. While that might be a good feature to add in the future, as I have hopefully illustrated, it is a lot of work.\n. You can do what I did: make the table resize to the containing div: https://github.com/ofersadgat/fixed-data-table-simple/\n. To be fair, most of it isnt actually boilerplate code. You can use fitted table directly in your code without modification.\n. That example doesnt really work because it wont tell you if only a component resizes but the outermost doesnt. The way that the example handles this case is by manually refreshing and relying on React to not rerender if nothing changed.\n. I think you can pass the props to the `<Column>` as part of the `columnData` and then use that in the `cellRender` to style your components.\n. https://github.com/ofersadgat/fixed-data-table-simple/blob/master/src/js/ObjectDataListStore.jsx\n. The problem is that if you want to add older messages (to continue with my example) they would be inserted in indexes [0 : numNewRows] thereby causing all the indexes of the other rows to change as well. Now, I can force a refresh, but that would cause the table to jump to the top. I could try as you suggested to force a refresh and simultaneously scroll to wherever they were (if I can even figure out where that is), but that would still cause the table to move (because the user might have been on a boundary between rows). Contrast this to loading new rows below where you are looking: the table stays in the exact same place and new rows just appear.\n. Cool! I'm glad to hear that you guys are still working on improving this. I was thinking about starting my own fork to provide some features like the above (and potentially the reloadAtIndex which was previously discussed), but if you guys are working on it, Ill just wait? Are there any details you can share or a timeline?\n. ",
    "ehzhang": "Duplicate of #15 \n. For v0.4.0, rows now include both classes `.public_fixedDataTableRow_highlighted` and either `.public_fixedDataTableRow_odd` or `.public_fixedDataTableRow_even`!\n. This issue has been addressed in the most recent version (v0.3.0), which includes the onRowDoubleClick property in the Table component.\n. @binarykitchen changelog has been updated.\n. @matrinox could you clarify what you mean by this, and what performance costs you observe?\n. Hmm! I just checked it out, and it looks like you're right - there are duplicate calls to the rowGetter function. However, if you add logs to a cellRenderer function, you'll notice that the cells themselves don't actually re-render.\n\nThe performance of the rowGetter is negligible, as the real bottleneck here is rendering. I've decided to close this issue as it is more of a micro-optimization.\n. Thanks for bringing this up. Making width an optional field would be a great addition to the table. Otherwise, I would recommend using a window.resize handler as mentioned by @parties to explicitly update the width of your table.\n. The JSBin examples in the original post have been updated to work with React ~0.13 and fixed-data-table v0.3.\n- Create example of requesting + batching data requests based on visible content - http://jsbin.com/kuhene/5/edit?html,js,output (#66, #28)\n- Sorting example - http://jsbin.com/pukiri/6/edit (#29)\n- Filtering example - http://jsbin.com/fupiyipoba/3/edit\n. Hi @HectorWon ,\n\nI wrote up a quick example in JSBin here: http://jsbin.com/lajada/1/edit?html,js,output\nThe table property _scrollToColumn_ here indeed scrolls to that column.\nI've also added scrollToRow, so that you can see that in action as well.\n\nLet me know if you have any more questions! :)\n. @HectorWon yes, this is the current behavior for those two properties.\n. @toppetoppe here you go: http://jsbin.com/buzevofasa/1/edit?html,js,output\n\nNote that this is just a simple merge of both sort and filter examples from above. The general concept to note here is that the only difference is that instead of only one action changing the source data (filteredRows) you have two.\n. Thanks for bringing this up! We're currently working on solving this issue.\n. This has been fixed in v0.4.0! Thanks!\n. Closing, as addressed by PR #121. Woo!\n. This has been closed due to oldness - if this issue persists, feel free to reopen!\n. @Andreyco thanks for the PR! It's been merged in with a few changes.\n. Hi! \n\nI whipped up a JSBin to test, and this doesn't seem to be an error for React 0.13 + FixedDataTable v0.3.0\n\nhttp://jsbin.com/wirubo/1/edit?html,js,output\n. Thank you for bringing this up! This appears to be a duplicate of #15. \n. This definitely seems like a good behavior to have, and we'll make note of it for our next release. In the meantime, you can calculate the header text using another function, as you are given the column index. Otherwise, you may be interested in applying a custom headerRenderer for the columns in question.\n. Indeed, this is indeed very possible and not very difficult to implement. However, with any change in the behavior of the table, we need to make sure to check our internal uses to make sure that it doesn't break anything before we sync it up with the public repo, and report changes. Thank you for your patience.\n. This has been fixed for version v0.4.0. Thanks!\n. Hi! Can you explain a little bit more about what you mean here?\n. Thanks for the PR! It's been merged in, with the adjustment to the z-index (100).\n. Thanks for the pull request! A simplified version of this has been merged into version v0.4.0.\n. Hi @nbostrom !\n\nThis appears to be working with react v0.13 and fixed-data-table v0.3.0. This example uses both most recent react and fixed-data-table versions.\n\nhttp://jsbin.com/pukiri/6/edit?html,js,output\n\nThe example is also up on the main site, https://facebook.github.io/fixed-data-table/example-sort.html\n. This is a known issue. Unfortunately, because the table relies on overriding the browser's native scroll to determine table position, the browser's 'find' interferes by forcing the scroll position.\n\nWe'll definitely look into ways to fix this! Definitely annoying. :S\n. Hey @rundis , I ran your gist, and encountered the error you mentioned.\nIf you change line 18 to the most up to date release, it works fine.\n\nI've attached a gist here:\nhttps://gist.github.com/ehzhang/daf4453df43a4dede3d8\n\n![image](https://cloud.githubusercontent.com/assets/3484848/8093517/747d3166-0f76-11e5-9170-d05e2bcc0883.png)\n. Version v0.4.0 has been released with bugfixes and splitting layout and theme styles.\n. Please see #193 !\n. Indeed, the documentation isn't really clear about this: it'll be added soon. Thanks!\n. @muraveill, please use the `onColumnResizeEndCallback.` wlis was abbreviating the prop name.\n. @delafont - you'll want to use the `onColumnResizeEndCallback` on the Table, as it is a Table property.\n\nYou can see the documentation here: http://facebook.github.io/fixed-data-table/api-table.html\n\nIt is admittedly a little confusing, but the callback doesn't run on a single column but watches for any resize event on all columns, so it exists at the table level.\n. No problem :)\n\nI'm going to close this issue since the documentation has been updated with this information. If still unclear, feel free to reopen!\n. @binarykitchen a changelog for version v0.3.0 has been added - most notably, support for React 0.12 has been discontinued.\n\nYou can find it here: https://github.com/facebook/fixed-data-table/releases\n. Hi!\n\nThanks for bringing up this bug. Can you explain how you came across it, and the steps to reproduce it?\n\nIn the examples, I've tried adding the text-align: right; property to both the table and the container, as well as set the Column _align_ property to right, but the resize guide appears to be working correctly.\n. @gillesruppert so far, I've been unable to reproduce this bug in Firefox, Opera, Safari, Chrome, and IE. I'm going to be closing this issue, but feel free to open it again if you encounter this bug again!\n. Hi!\n\nI looked into this, and created this JSBin to play around with adding this select box.\nhttp://jsbin.com/ladiko/1/edit?html,js,output\n\nUnfortunately, this appears to be a compatibility issue with the react-select component and react-table's CSS, but a default HTML <select> works fine.\n\nLet me know if you have any questions, or would like me to prod deeper :)\n. Hey @Martynas-P !\n\nThanks for bringing up this bug! Indeed, this doesn't seem to be the expected behavior. I'll look into a fix.\n\ncc @pieterv \n. This bug has been fixed in v0.4.0. Thanks!\n. @Martynas-P sorry about the slow response! As @davidxi mentions in his PR, this is because we currently expect a footerDataGetter to return a truthy value (some kind of data) to determine whether or not we want to render a cell and use the footerRenderer function provided.\n\nI've categorized this as a bug and a need to fix documentation, as this behavior should mimic that of the header, and this should be mentioned in the docs.\n\nHowever, in future versions ( #155 ) we may be looking for an alternate API to render this table that doesn't depend on the link between the data getters and renderers.\n. Hmm! We haven't tested this with material UI - have you tried including the fixed-data-table.css file manually?\n. Glad to hear it's all fixed @kenr ! \n\nFixed-data-table relies on including the css in order to render properly, regardless of the method you use to bundle and/or transpile the jsx or javascript (in this case, browserify). \n. @binarykitchen thanks for bringing this up! Do you think you could attach a screenshot of the issue? I have been so far unable to reproduce it on my end.\n\nThis may be because of the behavior of translate3d, and I'm guessing that it might have something to do with the setting of a width/height with a fractional value (like a percentage).\n\nTranslate3d is used because it triggers hardware acceleration in order to maximize performant scrolling, by giving us explicit control on the location of the elements within the viewport.\n. Hi! Thanks for bringing this up. The examples on the site will be working again soon, there has just been a small hiccup with a recent commit.\n. @skmasq things should be working again. The site publishing script happened to pick up a few of my local changes by accident, sorry about that!\n. @jbonta good catch and suggestion - those changes have been made.\n. @cosminnicula currently there isn't a way to specify a colspan-like attribute on the row level, but this may be a feature for a future release. Sorry :(\n. Unfortunately, as referenced in #169, this is likely because the two components do not have compatible CSS. :(\n. In the case of a nested datastructure, I'm on more of the side of keeping it as `Number` or `String` since it seems to be more of a common convention to represent nested paths as strings.\n. @hipertracker sorry for the frustration!\n\nRight now, the way that the table works is that `headerDataGetter` is a function used by each column to get that header's \"data\", which is the `label` value given as the first argument to the `headerRenderer` function. In order to determine whether or not the header will need to re-render using the `headerRenderer` function, the table checks for any changes in the return value of the headerDataGetter. No data changes, no re-render.\n\nThe headerDataGetter function has a single argument, which is the column number, which you canu se to get a label.\n\nI agree that the documentation isn't clear about how this works, and it's definitely quite confusing. As referenced in #155 , future versions will have a different API dealing with this data vs render problem.\n. Looks good, thanks for the pull request!\n. I've tested with the latest on npm, and haven't encountered this error. Can you be more specific as to how to reproduce this bug?\n. Looks good, thanks for the pull request!\n. Hi @sharky93, what do you mean by fetching text that has been selected in a cell?\n. Can you explain what you're trying to accomplish? If you are trying to get data from a highlighted selection, `window.getSelection()` is a perfectly valid method.\n. rowCount should be consistent for the entire table - one column should not have more or less. From the arguments in a  rowClickHandler, you won't be able to access them, but considering you have to provide a rowsCount to the table itself, you should be able to access it from there.\n. from the onRowClick prop, row index is the second argument. This does not also provide the column index, unfortunately.\n. This will very likely not be something that will be added to the API in the future. Instead, we are looking to cut down on the API so you can more flexibly attach these onClick and onDoubleClick listeners (or anything) without depending on the Column or Table API.\n. I'm going to be closing this issue as providing an API for this information is not in the scope of the table's responsibility.\n. Yes, this is beyond the scope of FixedDataTable. You can provide your own `Column` components as children of the `Table` component. When the columns you provide are updated, the table will update accordingly.\n\nThere is no API to add new columns, as you must provide the columns anyway.\n\nHere's a simple example:\nhttp://jsbin.com/putuzi/4/edit?html,js,output\n. I'm going to be closing this issue as mentioned above, as adding an API for column addition is beyond the scope of this table.\n. Thanks for the pull request! Unfortunately, this isn't something we can take, as these are properties that can be added to the cell you provide to the column yourself. We don't want to pass these in from the Column level.\n. Hi!\n\nI would recommend keeping a selected property in your data itself. FixedDataTable is meant to render whatever data you provide. Selection state can be managed by a cellRenderer you provide. Likewise, changing selection state should be managed by the component that you provide the cellRenderer.\n\nBecause of this, I don't think that this would be a good change for the API, since it is up to you to manage the state of your individual components through components that you define, and data that you provide.\n. Hi! Thanks for the suggestion. Unfortunately, this feature is outside of the scope of the table - you must provide the table with data and components, and how you manage that data is up to you! The table otherwise takes care of virtualizing the rows to maintain high performance scrolling. \n\nThis decision keeps the table flexible enough to allow you to choose whatever you'd like to go in the cell, so you can adjust it to your use case. \n\nIf you would like inline-editing, you can look into creating a component that does that by using cellRenderer and cellDataGetter. \n. You're welcome :)\n\nI'll be closing this issue now, but if you feel the need you can re-open it. Thanks!\n. @Siyfion sorry for not seeing this sooner! Looking through the link you provided, I don't anticipate too much issue in terms of rendering if you used the inline version, but you'd probably have trouble with the pop-over. Also, because of the way that cells are routinely destroyed/rerendered, it may actually be a bit tricky to actually initialize each row with jQuery.\n. Data loading in the rowGetter is actually a fine way of doing this, as in the example above. The table will render rows based off of the the data that backs it, and changing the data that the rowGetter is based off of will accommodate the loading behavior that you might want.\n. Hey @cosminnicula!\n\nRight now, the focus is on a new API design that will make it much easier to create your own components for the table and maximize flexibility. Once we have stabilized on that API, it should be easier to focus on accessibility!\n. @rmilesson this release is currently still in development - we're also working to make sure that the migration goes smoothly before making such large API changes.\n. Hey @Andreyco! The way that fixed-data-table is actually able to work is because we take over native scrolling and replace it with our own scrollbar. That's currently how we're able to achieve the performance that we do.\n\nI'm going to close this issue because it does not seem to be applicable to our implementation - if I misunderstood you, please feel free to reopen!\n. @andreypopp the files in the vendor_upstream folder are actually modules and utilities that we pull in internally, so ideally we shouldn't be making any changes to them, as the that would change some expected behavior. \n\nOtherwise, I'm a bit confused as to how to reproduce this issue, and a bit worried that this would halt scrolling completely while a mouse button is clicked.\n. Looks like I can only successfully reproduce this in Firefox, and not Chrome. Interesting!\n\nWhile this is certainly looks a bit janky I'm uncertain that this would be the best way to fix this.\n. @difelice This must've been missed in the syncing process. Thanks so much for catching it!\n. @difelice thanks for the pull request!\n\nI'll batch this into the next v0.4.x release. However, v0.5.0 (for the future #193) will be focused on removing these Table level API additions in favor of defining your own row components with your own props.\n. Hi! Fixed data table works by virtualizing your cells and only rendering what is in view. The cells themselves are rendered based off of data that is provided via the rowGetter, and individual cell state is not preserved as scrolling will recreate the cell as necessary.\n\nAt the your level, you will need to actually change the data source that backs the cell in question. \n. This largely depends on how you choose to feed in your data!\n\nWe try to accommodate for the instance where the data is actually fed in through an outside source, and the cells act to manipulate that data source. In this case, you're using state of the parent, which is all good. Other implementations may choose to manipulate data in a flux store, for example.\n\nSo basically, what you have seems to be a perfectly reasonable way of doing this :)\n. No problem!\n\nWe're actually focusing on changing the API right now, and the examples should follow.\n. Unfortunately, because this is a unique use case where we're virtualizing cells, we don't currently have a best general solution :(\n\nThere is a consideration that we should be saving state somewhere, but this isn't a use case that React works best with, and we can't really easily restore that state. Right now, the best option is to use props to render information properly using props.\n\nI'm currently working to see if this is something that we can fix for the next version though.\n. @sidnair while turning off virtualization could be useful here, at that point the table does little more than render rows for you - something that you could easily do on our own (and you'd have a lot more control over state, content, etc). If you aren't rendering large quantities of data and you stateful cells are a requirement, it may be of better use to you to render your own table, and possibly paginate if you do run into performance setbacks.\n\nAs for performance - we find a performance benefit in our use case where we deal with hundreds if not thousands of rows of data (FDT has been tested with ~1000000 rows!) and want to maintain consistent performance no matter how many rows we may need to render or change.\n\nI'll keep this open though, since it is something we should address - but it might not make it into the next release.\n. Hi! This is a known bug (see #149). I'm going to close this issue in favor of the previous - but unfortunately, we cannot currently prevent this behavior because of the way we manage scrolling. \n. Certainly! This is actually one of the reasons why we're moving into using cell 'templates' instead of renderers and getters in the next release. That way, you can assign your own classNames for your cells without needing an API to do so. This will likely be included as a part of the release #193 .\n. Hi @rmilesson! Can you elaborate on what you mean by 'not possible'?\n\nThis current behavior is currently one that we expect - perhaps you might be interested in having something like a CSS rule that sets the opacity of the scrollbar to 0, but brings it back up on hover? You can customize the Scrollbar's CSS in the `fixed-data-table-style.css` file, or by adding your own CSS.\n. I'm closing this because there hasn't been any update, and a solution exists. Feel free to reopen if this persists!\n. @MalucoMarinero nice find! I looked through your commit and the changes look pretty useful. I'll have to do some further testing, but a PR for this would be great! Thanks! :+1: \n. @wlis the columnKey is used as an identifier and one of the arguments for the onColumnResizeEndCallback - even though users can provide their own to the cell, I believe that it is better to have a reserved property on the Column level than specify in the documentation to include that property in particular on the cell for resizing.\n\nI'm open to changing it to something different (like columnId or something), and we don't necessarily have to pass it into the cell too - I just thought it'd be nice since it can save a lot of typing :P\n. This has been abandoned for #221, which includes this plus a transition layer.\n. Thanks for the pull request! Unfortunately, this is not something that we can take at this time. We're in the process of changing the API and moving away from using renderer functions and adding to the API in favor of stripping down the API so that you can use your own components (like an expander) without depending on the table to take care of it for you.\n\nI'm going to be closing this PR, but if anything changes I'll reopen it.\n. Thanks for the PR!\n. Have you tried adding padding to the parent container?\n\nOtherwise, could you explain this in greater detail or provide a screenshot? I'm a bit confused as to what you mean here, visually :S\n. Sorry, I'm still confused - is this the behavior you currently have, or the one you're trying to achieve?\n. @chrisdrackett thanks for clarifying - I've been able to solve this in JSBin.\nhttp://jsbin.com/cafeza/edit?html,css,js,output\n\nThis isn't a problem with FixedDataTable, but the way it appears you're using `overflow: auto` or `overflow: scroll`. Read here: http://stackoverflow.com/questions/11695354/css-right-margin-does-not-work-inside-a-div-with-overflow-scroll\n\nBasically, you'll want to apply the `display: inline-block` rule to the table, or its wrapper.\n. If you need to remove the scroll bar in the table, you can feel free to make it non visible with CSS, or by making the overall table width the sum of the widths of the table columns so that the table itself doesn't scroll.\n\nWith regards to user experience, this concept of a scrolling table within a scrollable wrapper is already not a great experience, scroll bar or not. \n. Thanks for the pull request! I'll do some testing on this first, but it looks pretty good :)\n. Looks great! This will be a part of the next minor version release.\n. To help debug - have you defined your `onColumnResizeEndCallback`, and if so, can you include that code too? \n\nThanks :)\n. Hey @pavanpodila , I have not been able to reproduce this bug - I wrote up an example on usage here, attempting to mimic what you're doing. You should also remove the `.bind` calls on your `rowGetter` and `onColumnResizeEndCallback` functions, since React component methods may only be bound to the component instance.\n\nhttp://jsbin.com/safipo/2/edit?html,js,console,output\n\nUnless this can be reproduced, I'll close this issue - but I'll leave it open for now while some debugging happens!\n. Actually, it looks like what you're getting as a `dataKey` is not the same way you represent your columnWidths. You set your Column's dataKey as `\"request.url\"`, so when you get the dataKey back form the column resize callback, you're receiving `\"request.url\"`, not `.url` as you expect in your Column width.\n\nYou'll likely need to change that line to `this.state.tableWidths['request.url']`.\n\nLet me know if that solved your problem!\n\n(as a side note, the return value of cellDataGetter does not change the dataKey that identifies that column in callbacks like the resizeCallback, in case that was what you expected)\n. Thanks for the PR!\n. So as to keep with the latest releases with react, we've added support for React v0.14.0-beta3 with v0.4.6 (but not beta1 or beta2).\n. Hey @prachp!\n\nThis is a known issue, and stems from the way our rows are rendered. This does not really occur until the  you exceed half a million rows (with that height), and isn't a priority for now.\n. Hey @weixing2014, the method of reordering columns would not change with this release - in order to reorder columns, you will need to implement your own logic to pass in the re-organized columns under the `<Table>` Component.\n. @yrokhlin - I was just about to make a comment regarding this.\n\nThe current state of this PR is incompatible with the current v0.5.0 with the new React support for 0.14, and is also incomplete in a few other places regarding performance. A version similar to this may be released soon, but not in this specific PR.\n\nI closed this mostly to clean up the list of PRs. @wlis or @pieterv will be better able to answer questions regarding the state of the table source.\n\nAs an added note, I do not speak on behalf of Facebook with regards to the state of this project.\n. Hi @tehandyb! Unfortunately, because this version uses React's `cloneWithProps` function on the result of the cellRenderer, the `ref` prop is not preserved.\n\nSince this method is now deprecated, in next versions, we will instead be using `React.cloneElement`, which will copy refs, and hopefully fix this problem. In the meantime, you may have more success adding your own custom property to the component in your cellRenderer.\n. Hey @gappture! \nThe cellRenderer should only fire when the results from either the rowGetter changes for a specific rowIndex or the results from the cellDataGetter changes. If the information you provide there changes often, that might be the source of these hundreds/thousands of renders.\n\nOtherwise, your cellRenderer appears to be fairly straightforward.\n\nI'd like to hear more about how you're using this, in case that sheds more light to this performance problem.\n. @gappture \nIt's actually not unusual, but actually expected for the rowGetter to fire many times - it's actually really fast. The problem is when the return value does not evaluate as true for otherwise equivalent information, which makes the table think - \"oh hey, something's changed - we should rerender!\"\n\nIn your rowGetter, you create a new data array every time the function is called. Unfortunately, this means that when we check the previous value, javascript does not think that it's equal, even if the data is the 'same'.\n\nYou can see for yourself by typing into the javascript console something like:\n\n```\n[1, 2, 3] ==  [1, 2, 3]\n> false\n```\n\nThanks, javascript :P\n\nInstead, you'll want something that we can use to evaluate as true, like a reference to the original data. If your `this.props.data[rowIndex+1]` is an array, you might be able to solve your problem by changing your code to\n\n```\n_rowgetter: function(rowIndex){\n  return this.props.data[rowIndex+1];\n}\n```\n. Glad to hear it :)\n. Adding PureRenderMixin means it will never update - if you try it, the table just sits there completely stationary :p\n. That is actually how the table works right now! The rerender of s cell is determined by the results of the rowGetter or the cellDataGetter. When that changes, a render is triggered. \n. @khankuan are you experiencing poor performance? It'd be great to see if its something that we should address.\n. Great to hear it! If you don't mind I'm going to close this issue then - feel free to open it if anything changes.\n. Hi @alolis! Because we manage our own scrolling for performance, we don't use the native scrollbar.\n. cloneWithProps has been removed in version v0.4.2! :)\n. Hi @fullvlad! \n\nWe actually maintain that the direct children of the table are either the Fixed Data Table Column group or fixed data table column. To get this kind of behavior, you may want to instead use a generator function to create those columns.\n. As a really rough case, it's just a function that returns a react element, like:\n\n```\nfunction createColumn(id){\n   // What you want here\n   return <Column\n     headerRenderer={renderHeader}\n     label={id}\n     //...your other props\n     />\n}\n```\n. I've closed this since there hasn't been any activity - hopefully this has solved your problem. Let me know  if you still need help!\n. To achieve the effect that we have in the Facebook Ads Manager, we use a controlled scrolling situation where we watch for wheel events on the overall page and scroll the table by changing the ownerHeight and scrollTop properties.\n\nChanging the ownerheight property allows the header to become \"fixed\" at a certain height, and changing scrollTop scrolls the table.\n\nUnfortunately, we don't have a simplified example of this in action.\n. Thanks for the suggestion! Just added that.\n. cc @pieterv\n. This arose while trying to add support for atom. You can safely ignore this error though. Otherwise, you may wish to revert back to 0.4.2 (the only difference is that)\n. I\"m sorry about that :( I'm going to try and release a patch to 0.4.3 as soon as possible.\n. @AlesJiranek @YoYuUm I can't seem to reproduce this error on my end - 0.4.4 builds using webpack without error for me. Are you using the provided webpack config or your own?\n\nIf this continues to be an error, I may have to roll back these changes in the next release. :\\\n. Hi everybody! Please update to the latest 0.4.5 version, which should fix these issues since we've basically reverted back.\n\nThe problems here arose from attempting to support react-for-atom within, and @HankMcCoy is correct on the reasons why this was more than unfortunate. We're going to look for better ways of supporting Atom without affecting this library.\n\nSorry about this release hiccup! Let me know if this issue needs to be reopened.\n. This is a pretty tricky problem since in order to virtualize the cells, we need to know an explicit height for each row. \nCurrently, the best way I know of doing this is to use a heuristic to determine the expected row height for any given cell. :\\\n. Currently, the cells choose to re-render when a comparison of the previous data and the next updated data is different. \n\nIt sounds like you are modifying the objects directly, so when the shouldComponentUpdate does a comparison of old vs new, it returns true as a direct comparison of an object reference to itself is true. So it won't update, since effectively oldCellData === newCellData. \n\nYou may have more success in using something like Immutable.js to wrap the objects, or create an instance of a new object. \n. Are you triggering an attempt to render in the table at a higher level in any way when you go through the rows?\n\nPerhaps by setting a state in the parent component may help?\n. Hmm. Actually, I believe that currently it's actually blocked at a higher level for the rowData. If the old rowData === new rowData equality passes then it will never think to go further. \n\nWe're actually in the middle of changing this behavior, it's kind of frustrating. \n. For performance reasons, we're not going to inspect the contents of a row and do any sort of deep comparison.\n\nIn the future, we won't be choosing re-renders based on data, but letting you choose to do it based on your own cell components and your own shouldComponentUpdate functions.\n. Inspecting arbitrarily deeply nested row objects isn't something we want to do as a part of the table, and adding to the API just makes the table more bloated. The table itself shouldn't be handling your data anyway, and that's a behavior we'd like to change.\n\nPlease see #221 for more information on the next release that will happen later this week. I'll be making updates to documentation and description in preparation.\n. @fullvlad you can use the cellRenderer to render the cells connected to your flux stores, and then use the rowGetter function to get the value in your store. The rowGetter when you do this will be used to decide rendering of the cells, and you don't have to use that data when you use the cellRenderer. \n. Fixed Data table does not have pagination built in, if that is your question. \n\nRather, it will render whatever data you give it through the rowGetter. Changing a page means that you would just supply it with different data (presumably a second pages worth). \n\nI'm not certain what you mean by the second question - the table works with large numbers of rows by virtualizing the row position to render only what is in the viewport. \n. Yup, this is true. The table is just the table. We don't intend to support these features as it would make the table less flexible in the process.\n. Hi @daannijkamp! We can't actually take this PR because we actually prefer trailing commas. Sorry!\n. Yeah, there are a few instances where variables are leftover and aren't used. It isn't important that they be removed for now though.\n. These nested nodes are currently necessary for the method of vertical alignment for each cell. We're currently working on a release that does flatten this though. \n. If you're using the ES6 class syntax for react components, you will have to bind `this` when you use rowGetter (which might be, for example, in your render() function).\n\nSee this: https://facebook.github.io/react/docs/reusable-components.html in the 'No autobinding' section.\n. Yes there is!\n\nUse the `footerHeight` and `footerDataGetter` properties in the `Table` and for your columns, optionally specify a `footerRenderer`.\n\nThe footer is fixed on the bottom, and span all of the columns.\n. The table doesn't support a footer at the table level - to get that kind of functionality, you can show/hide the footer by changing the `footerHeight` from 0 to your value.\n\nHowever, it sounds like your first idea would be totally reasonable - that is, rendering a component that is absolutely positioned and overlays the bottom of the table. I don't think that the drawback there is significant, since that is how the fixed footer behaves in the first place.\n. The table requires an explicit pixel width in order to properly calculate the layout. You will need to set this value yourself.\n. Thanks for the rebase and the perf fixes!\n. :tada: :tada: :tada:\n. Duplicate of #15 \n. For v0.4.0, rows now include both classes `.public_fixedDataTableRow_highlighted` and either `.public_fixedDataTableRow_odd` or `.public_fixedDataTableRow_even`!\n. This issue has been addressed in the most recent version (v0.3.0), which includes the onRowDoubleClick property in the Table component.\n. @binarykitchen changelog has been updated.\n. @matrinox could you clarify what you mean by this, and what performance costs you observe?\n. Hmm! I just checked it out, and it looks like you're right - there are duplicate calls to the rowGetter function. However, if you add logs to a cellRenderer function, you'll notice that the cells themselves don't actually re-render.\n\nThe performance of the rowGetter is negligible, as the real bottleneck here is rendering. I've decided to close this issue as it is more of a micro-optimization.\n. Thanks for bringing this up. Making width an optional field would be a great addition to the table. Otherwise, I would recommend using a window.resize handler as mentioned by @parties to explicitly update the width of your table.\n. The JSBin examples in the original post have been updated to work with React ~0.13 and fixed-data-table v0.3.\n- Create example of requesting + batching data requests based on visible content - http://jsbin.com/kuhene/5/edit?html,js,output (#66, #28)\n- Sorting example - http://jsbin.com/pukiri/6/edit (#29)\n- Filtering example - http://jsbin.com/fupiyipoba/3/edit\n. Hi @HectorWon ,\n\nI wrote up a quick example in JSBin here: http://jsbin.com/lajada/1/edit?html,js,output\nThe table property _scrollToColumn_ here indeed scrolls to that column.\nI've also added scrollToRow, so that you can see that in action as well.\n\nLet me know if you have any more questions! :)\n. @HectorWon yes, this is the current behavior for those two properties.\n. @toppetoppe here you go: http://jsbin.com/buzevofasa/1/edit?html,js,output\n\nNote that this is just a simple merge of both sort and filter examples from above. The general concept to note here is that the only difference is that instead of only one action changing the source data (filteredRows) you have two.\n. Thanks for bringing this up! We're currently working on solving this issue.\n. This has been fixed in v0.4.0! Thanks!\n. Closing, as addressed by PR #121. Woo!\n. This has been closed due to oldness - if this issue persists, feel free to reopen!\n. @Andreyco thanks for the PR! It's been merged in with a few changes.\n. Hi! \n\nI whipped up a JSBin to test, and this doesn't seem to be an error for React 0.13 + FixedDataTable v0.3.0\n\nhttp://jsbin.com/wirubo/1/edit?html,js,output\n. Thank you for bringing this up! This appears to be a duplicate of #15. \n. This definitely seems like a good behavior to have, and we'll make note of it for our next release. In the meantime, you can calculate the header text using another function, as you are given the column index. Otherwise, you may be interested in applying a custom headerRenderer for the columns in question.\n. Indeed, this is indeed very possible and not very difficult to implement. However, with any change in the behavior of the table, we need to make sure to check our internal uses to make sure that it doesn't break anything before we sync it up with the public repo, and report changes. Thank you for your patience.\n. This has been fixed for version v0.4.0. Thanks!\n. Hi! Can you explain a little bit more about what you mean here?\n. Thanks for the PR! It's been merged in, with the adjustment to the z-index (100).\n. Thanks for the pull request! A simplified version of this has been merged into version v0.4.0.\n. Hi @nbostrom !\n\nThis appears to be working with react v0.13 and fixed-data-table v0.3.0. This example uses both most recent react and fixed-data-table versions.\n\nhttp://jsbin.com/pukiri/6/edit?html,js,output\n\nThe example is also up on the main site, https://facebook.github.io/fixed-data-table/example-sort.html\n. This is a known issue. Unfortunately, because the table relies on overriding the browser's native scroll to determine table position, the browser's 'find' interferes by forcing the scroll position.\n\nWe'll definitely look into ways to fix this! Definitely annoying. :S\n. Hey @rundis , I ran your gist, and encountered the error you mentioned.\nIf you change line 18 to the most up to date release, it works fine.\n\nI've attached a gist here:\nhttps://gist.github.com/ehzhang/daf4453df43a4dede3d8\n\n![image](https://cloud.githubusercontent.com/assets/3484848/8093517/747d3166-0f76-11e5-9170-d05e2bcc0883.png)\n. Version v0.4.0 has been released with bugfixes and splitting layout and theme styles.\n. Please see #193 !\n. Indeed, the documentation isn't really clear about this: it'll be added soon. Thanks!\n. @muraveill, please use the `onColumnResizeEndCallback.` wlis was abbreviating the prop name.\n. @delafont - you'll want to use the `onColumnResizeEndCallback` on the Table, as it is a Table property.\n\nYou can see the documentation here: http://facebook.github.io/fixed-data-table/api-table.html\n\nIt is admittedly a little confusing, but the callback doesn't run on a single column but watches for any resize event on all columns, so it exists at the table level.\n. No problem :)\n\nI'm going to close this issue since the documentation has been updated with this information. If still unclear, feel free to reopen!\n. @binarykitchen a changelog for version v0.3.0 has been added - most notably, support for React 0.12 has been discontinued.\n\nYou can find it here: https://github.com/facebook/fixed-data-table/releases\n. Hi!\n\nThanks for bringing up this bug. Can you explain how you came across it, and the steps to reproduce it?\n\nIn the examples, I've tried adding the text-align: right; property to both the table and the container, as well as set the Column _align_ property to right, but the resize guide appears to be working correctly.\n. @gillesruppert so far, I've been unable to reproduce this bug in Firefox, Opera, Safari, Chrome, and IE. I'm going to be closing this issue, but feel free to open it again if you encounter this bug again!\n. Hi!\n\nI looked into this, and created this JSBin to play around with adding this select box.\nhttp://jsbin.com/ladiko/1/edit?html,js,output\n\nUnfortunately, this appears to be a compatibility issue with the react-select component and react-table's CSS, but a default HTML <select> works fine.\n\nLet me know if you have any questions, or would like me to prod deeper :)\n. Hey @Martynas-P !\n\nThanks for bringing up this bug! Indeed, this doesn't seem to be the expected behavior. I'll look into a fix.\n\ncc @pieterv \n. This bug has been fixed in v0.4.0. Thanks!\n. @Martynas-P sorry about the slow response! As @davidxi mentions in his PR, this is because we currently expect a footerDataGetter to return a truthy value (some kind of data) to determine whether or not we want to render a cell and use the footerRenderer function provided.\n\nI've categorized this as a bug and a need to fix documentation, as this behavior should mimic that of the header, and this should be mentioned in the docs.\n\nHowever, in future versions ( #155 ) we may be looking for an alternate API to render this table that doesn't depend on the link between the data getters and renderers.\n. Hmm! We haven't tested this with material UI - have you tried including the fixed-data-table.css file manually?\n. Glad to hear it's all fixed @kenr ! \n\nFixed-data-table relies on including the css in order to render properly, regardless of the method you use to bundle and/or transpile the jsx or javascript (in this case, browserify). \n. @binarykitchen thanks for bringing this up! Do you think you could attach a screenshot of the issue? I have been so far unable to reproduce it on my end.\n\nThis may be because of the behavior of translate3d, and I'm guessing that it might have something to do with the setting of a width/height with a fractional value (like a percentage).\n\nTranslate3d is used because it triggers hardware acceleration in order to maximize performant scrolling, by giving us explicit control on the location of the elements within the viewport.\n. Hi! Thanks for bringing this up. The examples on the site will be working again soon, there has just been a small hiccup with a recent commit.\n. @skmasq things should be working again. The site publishing script happened to pick up a few of my local changes by accident, sorry about that!\n. @jbonta good catch and suggestion - those changes have been made.\n. @cosminnicula currently there isn't a way to specify a colspan-like attribute on the row level, but this may be a feature for a future release. Sorry :(\n. Unfortunately, as referenced in #169, this is likely because the two components do not have compatible CSS. :(\n. In the case of a nested datastructure, I'm on more of the side of keeping it as `Number` or `String` since it seems to be more of a common convention to represent nested paths as strings.\n. @hipertracker sorry for the frustration!\n\nRight now, the way that the table works is that `headerDataGetter` is a function used by each column to get that header's \"data\", which is the `label` value given as the first argument to the `headerRenderer` function. In order to determine whether or not the header will need to re-render using the `headerRenderer` function, the table checks for any changes in the return value of the headerDataGetter. No data changes, no re-render.\n\nThe headerDataGetter function has a single argument, which is the column number, which you canu se to get a label.\n\nI agree that the documentation isn't clear about how this works, and it's definitely quite confusing. As referenced in #155 , future versions will have a different API dealing with this data vs render problem.\n. Looks good, thanks for the pull request!\n. I've tested with the latest on npm, and haven't encountered this error. Can you be more specific as to how to reproduce this bug?\n. Looks good, thanks for the pull request!\n. Hi @sharky93, what do you mean by fetching text that has been selected in a cell?\n. Can you explain what you're trying to accomplish? If you are trying to get data from a highlighted selection, `window.getSelection()` is a perfectly valid method.\n. rowCount should be consistent for the entire table - one column should not have more or less. From the arguments in a  rowClickHandler, you won't be able to access them, but considering you have to provide a rowsCount to the table itself, you should be able to access it from there.\n. from the onRowClick prop, row index is the second argument. This does not also provide the column index, unfortunately.\n. This will very likely not be something that will be added to the API in the future. Instead, we are looking to cut down on the API so you can more flexibly attach these onClick and onDoubleClick listeners (or anything) without depending on the Column or Table API.\n. I'm going to be closing this issue as providing an API for this information is not in the scope of the table's responsibility.\n. Yes, this is beyond the scope of FixedDataTable. You can provide your own `Column` components as children of the `Table` component. When the columns you provide are updated, the table will update accordingly.\n\nThere is no API to add new columns, as you must provide the columns anyway.\n\nHere's a simple example:\nhttp://jsbin.com/putuzi/4/edit?html,js,output\n. I'm going to be closing this issue as mentioned above, as adding an API for column addition is beyond the scope of this table.\n. Thanks for the pull request! Unfortunately, this isn't something we can take, as these are properties that can be added to the cell you provide to the column yourself. We don't want to pass these in from the Column level.\n. Hi!\n\nI would recommend keeping a selected property in your data itself. FixedDataTable is meant to render whatever data you provide. Selection state can be managed by a cellRenderer you provide. Likewise, changing selection state should be managed by the component that you provide the cellRenderer.\n\nBecause of this, I don't think that this would be a good change for the API, since it is up to you to manage the state of your individual components through components that you define, and data that you provide.\n. Hi! Thanks for the suggestion. Unfortunately, this feature is outside of the scope of the table - you must provide the table with data and components, and how you manage that data is up to you! The table otherwise takes care of virtualizing the rows to maintain high performance scrolling. \n\nThis decision keeps the table flexible enough to allow you to choose whatever you'd like to go in the cell, so you can adjust it to your use case. \n\nIf you would like inline-editing, you can look into creating a component that does that by using cellRenderer and cellDataGetter. \n. You're welcome :)\n\nI'll be closing this issue now, but if you feel the need you can re-open it. Thanks!\n. @Siyfion sorry for not seeing this sooner! Looking through the link you provided, I don't anticipate too much issue in terms of rendering if you used the inline version, but you'd probably have trouble with the pop-over. Also, because of the way that cells are routinely destroyed/rerendered, it may actually be a bit tricky to actually initialize each row with jQuery.\n. Data loading in the rowGetter is actually a fine way of doing this, as in the example above. The table will render rows based off of the the data that backs it, and changing the data that the rowGetter is based off of will accommodate the loading behavior that you might want.\n. Hey @cosminnicula!\n\nRight now, the focus is on a new API design that will make it much easier to create your own components for the table and maximize flexibility. Once we have stabilized on that API, it should be easier to focus on accessibility!\n. @rmilesson this release is currently still in development - we're also working to make sure that the migration goes smoothly before making such large API changes.\n. Hey @Andreyco! The way that fixed-data-table is actually able to work is because we take over native scrolling and replace it with our own scrollbar. That's currently how we're able to achieve the performance that we do.\n\nI'm going to close this issue because it does not seem to be applicable to our implementation - if I misunderstood you, please feel free to reopen!\n. @andreypopp the files in the vendor_upstream folder are actually modules and utilities that we pull in internally, so ideally we shouldn't be making any changes to them, as the that would change some expected behavior. \n\nOtherwise, I'm a bit confused as to how to reproduce this issue, and a bit worried that this would halt scrolling completely while a mouse button is clicked.\n. Looks like I can only successfully reproduce this in Firefox, and not Chrome. Interesting!\n\nWhile this is certainly looks a bit janky I'm uncertain that this would be the best way to fix this.\n. @difelice This must've been missed in the syncing process. Thanks so much for catching it!\n. @difelice thanks for the pull request!\n\nI'll batch this into the next v0.4.x release. However, v0.5.0 (for the future #193) will be focused on removing these Table level API additions in favor of defining your own row components with your own props.\n. Hi! Fixed data table works by virtualizing your cells and only rendering what is in view. The cells themselves are rendered based off of data that is provided via the rowGetter, and individual cell state is not preserved as scrolling will recreate the cell as necessary.\n\nAt the your level, you will need to actually change the data source that backs the cell in question. \n. This largely depends on how you choose to feed in your data!\n\nWe try to accommodate for the instance where the data is actually fed in through an outside source, and the cells act to manipulate that data source. In this case, you're using state of the parent, which is all good. Other implementations may choose to manipulate data in a flux store, for example.\n\nSo basically, what you have seems to be a perfectly reasonable way of doing this :)\n. No problem!\n\nWe're actually focusing on changing the API right now, and the examples should follow.\n. Unfortunately, because this is a unique use case where we're virtualizing cells, we don't currently have a best general solution :(\n\nThere is a consideration that we should be saving state somewhere, but this isn't a use case that React works best with, and we can't really easily restore that state. Right now, the best option is to use props to render information properly using props.\n\nI'm currently working to see if this is something that we can fix for the next version though.\n. @sidnair while turning off virtualization could be useful here, at that point the table does little more than render rows for you - something that you could easily do on our own (and you'd have a lot more control over state, content, etc). If you aren't rendering large quantities of data and you stateful cells are a requirement, it may be of better use to you to render your own table, and possibly paginate if you do run into performance setbacks.\n\nAs for performance - we find a performance benefit in our use case where we deal with hundreds if not thousands of rows of data (FDT has been tested with ~1000000 rows!) and want to maintain consistent performance no matter how many rows we may need to render or change.\n\nI'll keep this open though, since it is something we should address - but it might not make it into the next release.\n. Hi! This is a known bug (see #149). I'm going to close this issue in favor of the previous - but unfortunately, we cannot currently prevent this behavior because of the way we manage scrolling. \n. Certainly! This is actually one of the reasons why we're moving into using cell 'templates' instead of renderers and getters in the next release. That way, you can assign your own classNames for your cells without needing an API to do so. This will likely be included as a part of the release #193 .\n. Hi @rmilesson! Can you elaborate on what you mean by 'not possible'?\n\nThis current behavior is currently one that we expect - perhaps you might be interested in having something like a CSS rule that sets the opacity of the scrollbar to 0, but brings it back up on hover? You can customize the Scrollbar's CSS in the `fixed-data-table-style.css` file, or by adding your own CSS.\n. I'm closing this because there hasn't been any update, and a solution exists. Feel free to reopen if this persists!\n. @MalucoMarinero nice find! I looked through your commit and the changes look pretty useful. I'll have to do some further testing, but a PR for this would be great! Thanks! :+1: \n. @wlis the columnKey is used as an identifier and one of the arguments for the onColumnResizeEndCallback - even though users can provide their own to the cell, I believe that it is better to have a reserved property on the Column level than specify in the documentation to include that property in particular on the cell for resizing.\n\nI'm open to changing it to something different (like columnId or something), and we don't necessarily have to pass it into the cell too - I just thought it'd be nice since it can save a lot of typing :P\n. This has been abandoned for #221, which includes this plus a transition layer.\n. Thanks for the pull request! Unfortunately, this is not something that we can take at this time. We're in the process of changing the API and moving away from using renderer functions and adding to the API in favor of stripping down the API so that you can use your own components (like an expander) without depending on the table to take care of it for you.\n\nI'm going to be closing this PR, but if anything changes I'll reopen it.\n. Thanks for the PR!\n. Have you tried adding padding to the parent container?\n\nOtherwise, could you explain this in greater detail or provide a screenshot? I'm a bit confused as to what you mean here, visually :S\n. Sorry, I'm still confused - is this the behavior you currently have, or the one you're trying to achieve?\n. @chrisdrackett thanks for clarifying - I've been able to solve this in JSBin.\nhttp://jsbin.com/cafeza/edit?html,css,js,output\n\nThis isn't a problem with FixedDataTable, but the way it appears you're using `overflow: auto` or `overflow: scroll`. Read here: http://stackoverflow.com/questions/11695354/css-right-margin-does-not-work-inside-a-div-with-overflow-scroll\n\nBasically, you'll want to apply the `display: inline-block` rule to the table, or its wrapper.\n. If you need to remove the scroll bar in the table, you can feel free to make it non visible with CSS, or by making the overall table width the sum of the widths of the table columns so that the table itself doesn't scroll.\n\nWith regards to user experience, this concept of a scrolling table within a scrollable wrapper is already not a great experience, scroll bar or not. \n. Thanks for the pull request! I'll do some testing on this first, but it looks pretty good :)\n. Looks great! This will be a part of the next minor version release.\n. To help debug - have you defined your `onColumnResizeEndCallback`, and if so, can you include that code too? \n\nThanks :)\n. Hey @pavanpodila , I have not been able to reproduce this bug - I wrote up an example on usage here, attempting to mimic what you're doing. You should also remove the `.bind` calls on your `rowGetter` and `onColumnResizeEndCallback` functions, since React component methods may only be bound to the component instance.\n\nhttp://jsbin.com/safipo/2/edit?html,js,console,output\n\nUnless this can be reproduced, I'll close this issue - but I'll leave it open for now while some debugging happens!\n. Actually, it looks like what you're getting as a `dataKey` is not the same way you represent your columnWidths. You set your Column's dataKey as `\"request.url\"`, so when you get the dataKey back form the column resize callback, you're receiving `\"request.url\"`, not `.url` as you expect in your Column width.\n\nYou'll likely need to change that line to `this.state.tableWidths['request.url']`.\n\nLet me know if that solved your problem!\n\n(as a side note, the return value of cellDataGetter does not change the dataKey that identifies that column in callbacks like the resizeCallback, in case that was what you expected)\n. Thanks for the PR!\n. So as to keep with the latest releases with react, we've added support for React v0.14.0-beta3 with v0.4.6 (but not beta1 or beta2).\n. Hey @prachp!\n\nThis is a known issue, and stems from the way our rows are rendered. This does not really occur until the  you exceed half a million rows (with that height), and isn't a priority for now.\n. Hey @weixing2014, the method of reordering columns would not change with this release - in order to reorder columns, you will need to implement your own logic to pass in the re-organized columns under the `<Table>` Component.\n. @yrokhlin - I was just about to make a comment regarding this.\n\nThe current state of this PR is incompatible with the current v0.5.0 with the new React support for 0.14, and is also incomplete in a few other places regarding performance. A version similar to this may be released soon, but not in this specific PR.\n\nI closed this mostly to clean up the list of PRs. @wlis or @pieterv will be better able to answer questions regarding the state of the table source.\n\nAs an added note, I do not speak on behalf of Facebook with regards to the state of this project.\n. Hi @tehandyb! Unfortunately, because this version uses React's `cloneWithProps` function on the result of the cellRenderer, the `ref` prop is not preserved.\n\nSince this method is now deprecated, in next versions, we will instead be using `React.cloneElement`, which will copy refs, and hopefully fix this problem. In the meantime, you may have more success adding your own custom property to the component in your cellRenderer.\n. Hey @gappture! \nThe cellRenderer should only fire when the results from either the rowGetter changes for a specific rowIndex or the results from the cellDataGetter changes. If the information you provide there changes often, that might be the source of these hundreds/thousands of renders.\n\nOtherwise, your cellRenderer appears to be fairly straightforward.\n\nI'd like to hear more about how you're using this, in case that sheds more light to this performance problem.\n. @gappture \nIt's actually not unusual, but actually expected for the rowGetter to fire many times - it's actually really fast. The problem is when the return value does not evaluate as true for otherwise equivalent information, which makes the table think - \"oh hey, something's changed - we should rerender!\"\n\nIn your rowGetter, you create a new data array every time the function is called. Unfortunately, this means that when we check the previous value, javascript does not think that it's equal, even if the data is the 'same'.\n\nYou can see for yourself by typing into the javascript console something like:\n\n```\n[1, 2, 3] ==  [1, 2, 3]\n> false\n```\n\nThanks, javascript :P\n\nInstead, you'll want something that we can use to evaluate as true, like a reference to the original data. If your `this.props.data[rowIndex+1]` is an array, you might be able to solve your problem by changing your code to\n\n```\n_rowgetter: function(rowIndex){\n  return this.props.data[rowIndex+1];\n}\n```\n. Glad to hear it :)\n. Adding PureRenderMixin means it will never update - if you try it, the table just sits there completely stationary :p\n. That is actually how the table works right now! The rerender of s cell is determined by the results of the rowGetter or the cellDataGetter. When that changes, a render is triggered. \n. @khankuan are you experiencing poor performance? It'd be great to see if its something that we should address.\n. Great to hear it! If you don't mind I'm going to close this issue then - feel free to open it if anything changes.\n. Hi @alolis! Because we manage our own scrolling for performance, we don't use the native scrollbar.\n. cloneWithProps has been removed in version v0.4.2! :)\n. Hi @fullvlad! \n\nWe actually maintain that the direct children of the table are either the Fixed Data Table Column group or fixed data table column. To get this kind of behavior, you may want to instead use a generator function to create those columns.\n. As a really rough case, it's just a function that returns a react element, like:\n\n```\nfunction createColumn(id){\n   // What you want here\n   return <Column\n     headerRenderer={renderHeader}\n     label={id}\n     //...your other props\n     />\n}\n```\n. I've closed this since there hasn't been any activity - hopefully this has solved your problem. Let me know  if you still need help!\n. To achieve the effect that we have in the Facebook Ads Manager, we use a controlled scrolling situation where we watch for wheel events on the overall page and scroll the table by changing the ownerHeight and scrollTop properties.\n\nChanging the ownerheight property allows the header to become \"fixed\" at a certain height, and changing scrollTop scrolls the table.\n\nUnfortunately, we don't have a simplified example of this in action.\n. Thanks for the suggestion! Just added that.\n. cc @pieterv\n. This arose while trying to add support for atom. You can safely ignore this error though. Otherwise, you may wish to revert back to 0.4.2 (the only difference is that)\n. I\"m sorry about that :( I'm going to try and release a patch to 0.4.3 as soon as possible.\n. @AlesJiranek @YoYuUm I can't seem to reproduce this error on my end - 0.4.4 builds using webpack without error for me. Are you using the provided webpack config or your own?\n\nIf this continues to be an error, I may have to roll back these changes in the next release. :\\\n. Hi everybody! Please update to the latest 0.4.5 version, which should fix these issues since we've basically reverted back.\n\nThe problems here arose from attempting to support react-for-atom within, and @HankMcCoy is correct on the reasons why this was more than unfortunate. We're going to look for better ways of supporting Atom without affecting this library.\n\nSorry about this release hiccup! Let me know if this issue needs to be reopened.\n. This is a pretty tricky problem since in order to virtualize the cells, we need to know an explicit height for each row. \nCurrently, the best way I know of doing this is to use a heuristic to determine the expected row height for any given cell. :\\\n. Currently, the cells choose to re-render when a comparison of the previous data and the next updated data is different. \n\nIt sounds like you are modifying the objects directly, so when the shouldComponentUpdate does a comparison of old vs new, it returns true as a direct comparison of an object reference to itself is true. So it won't update, since effectively oldCellData === newCellData. \n\nYou may have more success in using something like Immutable.js to wrap the objects, or create an instance of a new object. \n. Are you triggering an attempt to render in the table at a higher level in any way when you go through the rows?\n\nPerhaps by setting a state in the parent component may help?\n. Hmm. Actually, I believe that currently it's actually blocked at a higher level for the rowData. If the old rowData === new rowData equality passes then it will never think to go further. \n\nWe're actually in the middle of changing this behavior, it's kind of frustrating. \n. For performance reasons, we're not going to inspect the contents of a row and do any sort of deep comparison.\n\nIn the future, we won't be choosing re-renders based on data, but letting you choose to do it based on your own cell components and your own shouldComponentUpdate functions.\n. Inspecting arbitrarily deeply nested row objects isn't something we want to do as a part of the table, and adding to the API just makes the table more bloated. The table itself shouldn't be handling your data anyway, and that's a behavior we'd like to change.\n\nPlease see #221 for more information on the next release that will happen later this week. I'll be making updates to documentation and description in preparation.\n. @fullvlad you can use the cellRenderer to render the cells connected to your flux stores, and then use the rowGetter function to get the value in your store. The rowGetter when you do this will be used to decide rendering of the cells, and you don't have to use that data when you use the cellRenderer. \n. Fixed Data table does not have pagination built in, if that is your question. \n\nRather, it will render whatever data you give it through the rowGetter. Changing a page means that you would just supply it with different data (presumably a second pages worth). \n\nI'm not certain what you mean by the second question - the table works with large numbers of rows by virtualizing the row position to render only what is in the viewport. \n. Yup, this is true. The table is just the table. We don't intend to support these features as it would make the table less flexible in the process.\n. Hi @daannijkamp! We can't actually take this PR because we actually prefer trailing commas. Sorry!\n. Yeah, there are a few instances where variables are leftover and aren't used. It isn't important that they be removed for now though.\n. These nested nodes are currently necessary for the method of vertical alignment for each cell. We're currently working on a release that does flatten this though. \n. If you're using the ES6 class syntax for react components, you will have to bind `this` when you use rowGetter (which might be, for example, in your render() function).\n\nSee this: https://facebook.github.io/react/docs/reusable-components.html in the 'No autobinding' section.\n. Yes there is!\n\nUse the `footerHeight` and `footerDataGetter` properties in the `Table` and for your columns, optionally specify a `footerRenderer`.\n\nThe footer is fixed on the bottom, and span all of the columns.\n. The table doesn't support a footer at the table level - to get that kind of functionality, you can show/hide the footer by changing the `footerHeight` from 0 to your value.\n\nHowever, it sounds like your first idea would be totally reasonable - that is, rendering a component that is absolutely positioned and overlays the bottom of the table. I don't think that the drawback there is significant, since that is how the fixed footer behaves in the first place.\n. The table requires an explicit pixel width in order to properly calculate the layout. You will need to set this value yourself.\n. Thanks for the rebase and the perf fixes!\n. :tada: :tada: :tada:\n. ",
    "wewea": "All examples can't touch scrolling in Chrome Devtool's Device Mode,\nChrome Version 47.0.2526.106 (64-bit)\n. All examples can't touch scrolling in Chrome Devtool's Device Mode,\nChrome Version 47.0.2526.106 (64-bit)\n. ",
    "jeremypagley": "@pieterv Hi, did you ever manage to find a solution for this problem?\n. @pieterv Hi, did you ever manage to find a solution for this problem?\n. ",
    "RnbWd": "To reorder columns (left-right headers) I've been able to use a generator function that maps an array and returns a list of columns. So if the array is a state or prop, the columns reorder when the component updates.\n\nWhat I'm struggling with at the moment is filtering / searching columns. There's a lot of low level functions that help with this, but no click handlers on the headers I'm aware of (which would help build a UI for sorting).\n. @pieterv thanks for the clarification! So when the documentation says:\n\n> returns React-renderable content for ..... (table-header/cell/etc)\n\nDoes this mean I can return a React component which would replace the default content of the header/cell?  I've created headers by simply returning the parameter I wanted as the header in the `headerRenderer` function, but I didn't realize those parameters could be used as props in React components (if I understand correctly)? I'm about to go try this out, I didn't realize that was possible.\n. This makes me very happy :)\n. To reorder columns (left-right headers) I've been able to use a generator function that maps an array and returns a list of columns. So if the array is a state or prop, the columns reorder when the component updates.\n\nWhat I'm struggling with at the moment is filtering / searching columns. There's a lot of low level functions that help with this, but no click handlers on the headers I'm aware of (which would help build a UI for sorting).\n. @pieterv thanks for the clarification! So when the documentation says:\n\n> returns React-renderable content for ..... (table-header/cell/etc)\n\nDoes this mean I can return a React component which would replace the default content of the header/cell?  I've created headers by simply returning the parameter I wanted as the header in the `headerRenderer` function, but I didn't realize those parameters could be used as props in React components (if I understand correctly)? I'm about to go try this out, I didn't realize that was possible.\n. This makes me very happy :)\n. ",
    "gabro": "I figured the same (having the Columns in an array that I can sort) but I'd be much more interested in the ability to sort columns by drag-dropping the headers. I don't know if this is something that can be built on top of the current implementation, but I suspect this not possible due to the way columns are used internally.\nFor instance I can't just wrap columns in custom containers for supporting animations because of internal invariants.\n\nFiltering columns is also something I'm after.\n\nI'm considering moving from an angular app which  uses ng-grid, but the lack of these features (sorting and filtering of columns) is a show stopper for now.\n. @pieterv thanks for the point, `headerRenderer` looks promising!\n\nAn example of column re-ordering would be really nice, since I suspect that even listening to drag events on the header cell animating the whole column is still a little tricky.\n\nI'll give it a shot, but having an API for doing this would be great.\n\nI'm thinking of something that would allow to specify whether a `Column` is draggable and perhaps a callback that allows further tuning of the behavior, along the lines of `canColumnMove(startingIndex, destinationIndex)`\n. I figured the same (having the Columns in an array that I can sort) but I'd be much more interested in the ability to sort columns by drag-dropping the headers. I don't know if this is something that can be built on top of the current implementation, but I suspect this not possible due to the way columns are used internally.\nFor instance I can't just wrap columns in custom containers for supporting animations because of internal invariants.\n\nFiltering columns is also something I'm after.\n\nI'm considering moving from an angular app which  uses ng-grid, but the lack of these features (sorting and filtering of columns) is a show stopper for now.\n. @pieterv thanks for the point, `headerRenderer` looks promising!\n\nAn example of column re-ordering would be really nice, since I suspect that even listening to drag events on the header cell animating the whole column is still a little tricky.\n\nI'll give it a shot, but having an API for doing this would be great.\n\nI'm thinking of something that would allow to specify whether a `Column` is draggable and perhaps a callback that allows further tuning of the behavior, along the lines of `canColumnMove(startingIndex, destinationIndex)`\n. ",
    "AlesJiranek": "+1 for example of columns reordering\n. Is there any update on this? I have same problem as @grahamb \n. I think, it is not correct to perform data loading in rowGetter, because it is used in render method and I think, that render method should be simple as much as possible and you should not be updating state when it is called. I consider using setTimeout(..., 0); as hack, but I have not figured out, how to do it better. Do you have any ideas?\n. Could you make an example of async based rowGetter with flux and pure render (passing data only via props) please? \n. I get same error with webpack and 0.4.4\n. I'm using [este/este](https://github.com/este/este), so my config looks like https://github.com/este/este/blob/master/webpack/makeconfig.js \n. You can do this without visible parameter. You can render column only if visible is true\n. it would be great to have this pull request merged\n. +1 for example of columns reordering\n. Is there any update on this? I have same problem as @grahamb \n. I think, it is not correct to perform data loading in rowGetter, because it is used in render method and I think, that render method should be simple as much as possible and you should not be updating state when it is called. I consider using setTimeout(..., 0); as hack, but I have not figured out, how to do it better. Do you have any ideas?\n. Could you make an example of async based rowGetter with flux and pure render (passing data only via props) please? \n. I get same error with webpack and 0.4.4\n. I'm using [este/este](https://github.com/este/este), so my config looks like https://github.com/este/este/blob/master/webpack/makeconfig.js \n. You can do this without visible parameter. You can render column only if visible is true\n. it would be great to have this pull request merged\n. ",
    "enriquecaballero": "+1\n. +1\n. ",
    "musbaig": "+1\n. +1 :+1: \n. Yup getting the same npm error as @eriknyk \n+1 for `v0.14` support\n. +1\n. cellRender, right, nm! move along, nothing to see :+1: \n. +1\n. Hmm, `0.5.0-rc1` appears to be working for my stuff, albeit, my use cases may not be exercising every `fixed-data-table` api. Still, thanks for the update!\n. +1\n. +1 :+1: \n. Yup getting the same npm error as @eriknyk \n+1 for `v0.14` support\n. +1\n. cellRender, right, nm! move along, nothing to see :+1: \n. +1\n. Hmm, `0.5.0-rc1` appears to be working for my stuff, albeit, my use cases may not be exercising every `fixed-data-table` api. Still, thanks for the update!\n. ",
    "ascariandrea": "Hi @pieterv, I'm trying to sort my columns content by clicking on an icon in the header, but I have a problem.\nSorting data works fine, but what I need is to re-render the column header to update the icon for sort order.\nThis is possible only when columns props has changed and my column data don't.\n\nMaybe an additional props for `Column` component that forces the render even if data are unchanged could be helpful? \nOtherwise the only possible way is to update data in any case (?)\n. Hi @pieterv, I'm trying to sort my columns content by clicking on an icon in the header, but I have a problem.\nSorting data works fine, but what I need is to re-render the column header to update the icon for sort order.\nThis is possible only when columns props has changed and my column data don't.\n\nMaybe an additional props for `Column` component that forces the render even if data are unchanged could be helpful? \nOtherwise the only possible way is to update data in any case (?)\n. ",
    "twmills": "Also interested in this. Thanks!\n. Also interested in this. Thanks!\n. ",
    "TravestyDesigns": "+1\n. +1\n. ",
    "danielone": "+1 For drag and drop support for reordering. very core to our usage\n. This spacing issue occurs when we dynamically change the data results of the table and they are less than the original amount\n. As per your example\nhttps://facebook.github.io/fixed-data-table/example-filter.html\nIs there a way to have the table border resize with the table so it doesn't stay at the bottom?\n. Thank you @wcjordan , will look into this to see if can help!\n. +1 For drag and drop support for reordering. very core to our usage\n. This spacing issue occurs when we dynamically change the data results of the table and they are less than the original amount\n. As per your example\nhttps://facebook.github.io/fixed-data-table/example-filter.html\nIs there a way to have the table border resize with the table so it doesn't stay at the bottom?\n. Thank you @wcjordan , will look into this to see if can help!\n. ",
    "zpao": "Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Much delayed, but thanks for catching & fixing!\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. I'm doing this as a part of #402 so closing out. Thanks though!\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. We shipped 15.0 support a couple weeks ago.\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Pulling in the cx from fbjs which doesn't have this issue so closing out.\n. 0.6.1 (just shipped) should work with React v15.\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. I ended up making this change slightly differently, but thanks!\n. > Will this include any issue fixes or merges from other PR's?\n\nNo, this is purely to get this building and syncing better with the tooling we have. The handful of code changes that are a part of this were just copied out from the internal version. Some open PRs could probably get closed as a result of better use of shared dependencies (eg #387).\n. Ok, everything is updated and actually builds now. I'm 99.99% certain it doesn't run properly (especially since `cssVar` is just going to throw right now: https://github.com/facebook/fbjs/pull/150/files#diff-5060a7b6b38915d3ac82bf25f1a2e74cR11). I'm still thinking on the best way to actually make that work. I don't want to duplicate the colors list, which currently we have partially in here, so perhaps I'll move it up into a standalone package in fbjs and we can have fbjs & the css transform consume it\u2026\n. Motivation is that we have a bunch of infra built around gulp that we're using for our other projects, making it much easier to contribute for people at FB (especially, but hopefully also people in open source). Using that shared infra also means that we don't have 7 different ways of doing the same thing, each slightly differently (eg converting providesModule to commonjs).\n. Alright, I _think_ this is just about done. I tested the built package with both the dist and npm builds (via browserify).\n\nThere's still a bit of followup work to do but it's pretty much ready to start using our shipit tools. The website doesn't build at all (need to learn more webpack voodoo) but the code builds.  There's sti\n\nFWIW, while the actual code here hasn't changed too much, we might want to clean up a little bit and then ship it as 0.7. The biggest immediate change is that CSS class names have changed (using hyphen instead of underscore). The upgrade to Babel 6 means the build is pretty different bit-wise, though functionally it should be pretty similar.\n. I clearly never did this and just archived the project. Oh well.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. This project is not actively maintained at the moment. Many of the people involved have taken on other responsibilities and haven't had the time to dedicate to this. I have an in-progress pull request (#402) to make it easier for us to maintain moving forward, but we may need some help after that (I'm not actually involved in the project, just work on open source at FB so have some incentive to make this better). There are some others who want to help so I hope we get it to a good point soon.\n\nIn the mean time or if you aren't interested in waiting for the revival, I've heard many good things about https://www.npmjs.com/package/react-virtualized.\n. You can consider my comment above an official statement. I work at Facebook and work with the people involved with this project.\n. We did not get this to a good place so I have archived the project. Sorry for the confusion and frustration this has caused.. This project is not officially deprecated yet so not going to take this. It's not actively maintained but also not deprecated. If/When that happens, there's a chance we'll list a couple alternatives, not just 1.\n. Let's leave the issue open. We'll want to fix it here too soon :) The fix they have in the fork is definitely a correct fix.\n. Please use https://www.facebook.com/help/326603310765065/ to report issues with the Facebook website.\n. Thanks!\n. Just shipped 0.6.2 with this.\n. We've been doing it for React forever too. But I don't like it (mostly because the value proposition isn't really there). We should continue shipping `dist/` to npm and then we can use something like npmcdn, which can even serve a zip file for bower. We could also set up cdnjs/jsdelivr to pull those files whenever we publish to npm.\n\nEdit: And yes we can use the releases feature too. That's also marginally useful so personally I'm pretty _meh_ about that.\n. > The files for Bower are in a separate repo\n\nOh yea, that's what I meant. I didn't quote you but I was responding to that proposal :)\n. Just pushed a fix (should be anyway). I'll ship that as 0.6.3.\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. This project is now archived and I have added a banner to the readme.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. I did a quick fix for this, shipped it, and have now officially deprecated this package. Please see the readme for further information.. I have officially archived this project so we will not be doing any further work. I shipped a final release compatible with React v16 and archived it.. I will ask around but given the lack of focus on this project, it's not likely to be a high priority.. I'm sorry but we won't be doing this. I just shipped out a final release to make this compatible with React v16 and have archived the project.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. published 0.6.5. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Much delayed, but thanks for catching & fixing!\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. I'm doing this as a part of #402 so closing out. Thanks though!\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. We shipped 15.0 support a couple weeks ago.\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Pulling in the cx from fbjs which doesn't have this issue so closing out.\n. 0.6.1 (just shipped) should work with React v15.\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. I ended up making this change slightly differently, but thanks!\n. > Will this include any issue fixes or merges from other PR's?\n\nNo, this is purely to get this building and syncing better with the tooling we have. The handful of code changes that are a part of this were just copied out from the internal version. Some open PRs could probably get closed as a result of better use of shared dependencies (eg #387).\n. Ok, everything is updated and actually builds now. I'm 99.99% certain it doesn't run properly (especially since `cssVar` is just going to throw right now: https://github.com/facebook/fbjs/pull/150/files#diff-5060a7b6b38915d3ac82bf25f1a2e74cR11). I'm still thinking on the best way to actually make that work. I don't want to duplicate the colors list, which currently we have partially in here, so perhaps I'll move it up into a standalone package in fbjs and we can have fbjs & the css transform consume it\u2026\n. Motivation is that we have a bunch of infra built around gulp that we're using for our other projects, making it much easier to contribute for people at FB (especially, but hopefully also people in open source). Using that shared infra also means that we don't have 7 different ways of doing the same thing, each slightly differently (eg converting providesModule to commonjs).\n. Alright, I _think_ this is just about done. I tested the built package with both the dist and npm builds (via browserify).\n\nThere's still a bit of followup work to do but it's pretty much ready to start using our shipit tools. The website doesn't build at all (need to learn more webpack voodoo) but the code builds.  There's sti\n\nFWIW, while the actual code here hasn't changed too much, we might want to clean up a little bit and then ship it as 0.7. The biggest immediate change is that CSS class names have changed (using hyphen instead of underscore). The upgrade to Babel 6 means the build is pretty different bit-wise, though functionally it should be pretty similar.\n. I clearly never did this and just archived the project. Oh well.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. This project is not actively maintained at the moment. Many of the people involved have taken on other responsibilities and haven't had the time to dedicate to this. I have an in-progress pull request (#402) to make it easier for us to maintain moving forward, but we may need some help after that (I'm not actually involved in the project, just work on open source at FB so have some incentive to make this better). There are some others who want to help so I hope we get it to a good point soon.\n\nIn the mean time or if you aren't interested in waiting for the revival, I've heard many good things about https://www.npmjs.com/package/react-virtualized.\n. You can consider my comment above an official statement. I work at Facebook and work with the people involved with this project.\n. We did not get this to a good place so I have archived the project. Sorry for the confusion and frustration this has caused.. This project is not officially deprecated yet so not going to take this. It's not actively maintained but also not deprecated. If/When that happens, there's a chance we'll list a couple alternatives, not just 1.\n. Let's leave the issue open. We'll want to fix it here too soon :) The fix they have in the fork is definitely a correct fix.\n. Please use https://www.facebook.com/help/326603310765065/ to report issues with the Facebook website.\n. Thanks!\n. Just shipped 0.6.2 with this.\n. We've been doing it for React forever too. But I don't like it (mostly because the value proposition isn't really there). We should continue shipping `dist/` to npm and then we can use something like npmcdn, which can even serve a zip file for bower. We could also set up cdnjs/jsdelivr to pull those files whenever we publish to npm.\n\nEdit: And yes we can use the releases feature too. That's also marginally useful so personally I'm pretty _meh_ about that.\n. > The files for Bower are in a separate repo\n\nOh yea, that's what I meant. I didn't quote you but I was responding to that proposal :)\n. Just pushed a fix (should be anyway). I'll ship that as 0.6.3.\n. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. This project is now archived and I have added a banner to the readme.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. I did a quick fix for this, shipped it, and have now officially deprecated this package. Please see the readme for further information.. I have officially archived this project so we will not be doing any further work. I shipped a final release compatible with React v16 and archived it.. I will ask around but given the lack of focus on this project, it's not likely to be a high priority.. I'm sorry but we won't be doing this. I just shipped out a final release to make this compatible with React v16 and have archived the project.. Thanks for your pull request. I apologize for leaving this project in limbo and not addressing your concerns. I have archived this project after doing a final release to make it compatible with React v16.. published 0.6.5. ",
    "TomClarkson": "I need this aswell. This is related to #84 Can you give me a heads up on how to fix this.\n. I was unable to push my pull request but here is my change to add in groupHeaderRender as per the docs https://github.com/TomClarkson/fixed-data-table/pull/1/files\n. @pieterv Can you please use groupHeaderRenderer prop as the cellRenderer for ColumnGroups\n\nHere you can see the problem and the line of code that is needed to fix it\n\n https://github.com/TomClarkson/fixeddatatable/blob/master/README.md\n. Can you add fixing #41 (implementing groupHeaderRenderer) to this too :)\n. Can't wait for these :)\n. I need this aswell. This is related to #84 Can you give me a heads up on how to fix this.\n. I was unable to push my pull request but here is my change to add in groupHeaderRender as per the docs https://github.com/TomClarkson/fixed-data-table/pull/1/files\n. @pieterv Can you please use groupHeaderRenderer prop as the cellRenderer for ColumnGroups\n\nHere you can see the problem and the line of code that is needed to fix it\n\n https://github.com/TomClarkson/fixeddatatable/blob/master/README.md\n. Can you add fixing #41 (implementing groupHeaderRenderer) to this too :)\n. Can't wait for these :)\n. ",
    "jardakotesovec": "@ofersadgat I have the same question. Did you figure out the answer since you closed it?\n. Nevermind, answer is pretty much here #4 \n. @ofersadgat I have the same question. Did you figure out the answer since you closed it?\n. Nevermind, answer is pretty much here #4 \n. ",
    "jalateras": "I am also using gulp and browserify.\n. I am also using gulp and browserify.\n. ",
    "grahamb": "Has there been any update on this? Server rendering is working, but throwing warnings in the browser:\n\n```\nWarning: React attempted to reuse markup in a container but the checksum was invalid. \nThis generally means that you are using server rendering and the markup generated on \nthe server was not what the client was expecting. React injected new markup to compensate \nwhich works but you have lost many of the benefits of server rendering. Instead, figure out \nwhy the markup being generated is different on the client or server:\n (client) ight:50px;z-index:1;transform:translate3\n (server) ight:50px;z-index:1;left:0px;top:0px;\" c\n```\n. Has there been any update on this? Server rendering is working, but throwing warnings in the browser:\n\n```\nWarning: React attempted to reuse markup in a container but the checksum was invalid. \nThis generally means that you are using server rendering and the markup generated on \nthe server was not what the client was expecting. React injected new markup to compensate \nwhich works but you have lost many of the benefits of server rendering. Instead, figure out \nwhy the markup being generated is different on the client or server:\n (client) ight:50px;z-index:1;transform:translate3\n (server) ight:50px;z-index:1;left:0px;top:0px;\" c\n```\n. ",
    "binarykitchen": "No rush, take your time to change this. Cheers\n. Adding these events to Rows would be great. Any chance this can be done soon?\n\nMeanwhile I'll hack my code with a `cellRenderer`. Are there any examples for that?\n. A PR from my part would take a bit too long. Have to deliver some code today, so I would like to monkey patch this with a cellRenderer for now. Can you show me how?\n. Thanks but this is not working properly because it messes with the existing `onRowClick` handler I have on the table :(\n. thanks, already figured out a similar, temporary hack ...\n. Thanks @ehzhang but I won't check out v0.3 until you have updated the changelog at https://github.com/facebook/fixed-data-table/releases\n. Ah, that explains @pieterv thanks! But why can't I modify (tick/untick) the checkboxes in your example?\n. Okay, here is the next problem:\nhttp://jsbin.com/jonimu/3/edit\n\nI have an array of selected states. But somehow this is not updated. Any clues?\n. Maybe it's a problem with `shouldComponentUpdate()`?\n. @pieterv Do you think you can help me here please?\n. Ah, @pieterv, that explains. Are you saying react components won't re-render unless any attached state has changed?\n\nOk, now I have added some more code (a onRowClick handler) and here is the next problem: an error is thrown on a row click. What am I doing wrong?\n\nhttp://jsbin.com/laxifo/2/edit\n\nThanks!\n. Ah, good. We are getting closer. And now, the last problem:\nhttp://jsbin.com/kenigu/2/edit\n\nIt does not work anymore, when I change the row items into objects. Why @pieterv?\n. Ah!!!! Thank you so much!\n\nWith the react update helper, did you mean this one?\nhttp://facebook.github.io/react/docs/update.html\n. Thanks. All works perfect now.\n. Ah, beautiful, works. Thanks!\n. Hmmm, I realized there is one problem: when I define a `headerDataGetter`, then the labels I have defined in the `columns[]` props will be ignored.\n. I think, adding a second parameter at https://github.com/facebook/fixed-data-table/blob/f66c616a3d03ea0bc88f2e32b6cbb0cd93edde98/dist/fixed-data-table.js#L1051 would solve my problem.\n\nSomething like that\n\n``` js\nif (this.props.headerDataGetter) {\n  headData[columnProps.dataKey] =\n    this.props.headerDataGetter(columnProps.dataKey, columnProps);\n} else {\n  headData[columnProps.dataKey] = columnProps.label || '';\n}\n```\n. thanks man, `Object.assign = require('object-assign')` at the top did it for me\n. This should be possible and easy to implement.\n. @cesarandreu re: initial development vs versioning, i disagree, based on this comment https://github.com/dominictarr/semver-ftw/issues/2#issuecomment-13874220\n\nfirstly, we already use this fixed-data-table package in production, so it's not just an experiment. it's already serious. secondly, anytime you introduce breaking changes, the major version shall be incremented, no matter what. this to reflect the breakage.\n. thx, looking good\n. Furthermore I see that those rows with `.public_fixedDataTableRow_highlighted` are looking good. The font in these highlighted rows is crisp and not blurry. Why?\n. Also when you add one pixel to the `translate3d(0px,27px,0px);` to `translate3d(0px,28px,0px);` then the behavior gets inverted, all odd rows are crisp and the even ones are blurry.\n. Here is a screenshot:\n![blurry_table](https://cloud.githubusercontent.com/assets/177641/8318716/617fa112-1a5b-11e5-9532-4b41d5f5c396.jpg)\n\nYes, I suspect fractional pixels too. But the issue happens on Windows machines only.\n\nDo you think you could add an option to disable hardware acceleration? Or try to reproduce this on a Windows machine at least.\n. that I already know and doesn't help when the user is increasing/decreasing the font size in the browser\n. hmmmm, i cannot reproduce this either. alright, let's forget this ...\n. Right, that's how React works and I am well aware of this. Still it doesn't work, I am creating new object references, yet the table cell doesn't get re-rendered. Looks like I ll have to check out Immutable.js then.\n. Already did, no luck.\n. Yes it is frustrating.\n. For now, I have figured an ugly hack using `_.clone()` like that\n\n``` coffee\n  getRow: (index) ->\n    row = @_getCurrentPageResults()?[index])\n\n    # using this ugly hack because of https://github.com/facebook/fixed-data-table/issues/244\n    # in short: we need a new object reference to force this being re-rendered\n    if @props.forceUpdate\n      row = _.clone(row)\n\n    return row or null\n```\n\nbut in future, better inspect the contents inside a row when deciding whether to re-render or not.\n. IMO contents of a row should be inspected. That's a very legit use case to alter the contents of a single cell.\n. I am not worried about performance here because we only show about 20 rows here and paginate through the next 20 rows with buttons.\n\nIf you are so worried about performance, how about a new option to enable/disable cell content inspection?\n. still no action here?. @wcjordan oh, not very active? how come?. ah, thanks heaps for the links and comments - have missed all that out\r\n\r\nguess i ll close this issue as \"obsolete\" then.. thx\n. No rush, take your time to change this. Cheers\n. Adding these events to Rows would be great. Any chance this can be done soon?\n\nMeanwhile I'll hack my code with a `cellRenderer`. Are there any examples for that?\n. A PR from my part would take a bit too long. Have to deliver some code today, so I would like to monkey patch this with a cellRenderer for now. Can you show me how?\n. Thanks but this is not working properly because it messes with the existing `onRowClick` handler I have on the table :(\n. thanks, already figured out a similar, temporary hack ...\n. Thanks @ehzhang but I won't check out v0.3 until you have updated the changelog at https://github.com/facebook/fixed-data-table/releases\n. Ah, that explains @pieterv thanks! But why can't I modify (tick/untick) the checkboxes in your example?\n. Okay, here is the next problem:\nhttp://jsbin.com/jonimu/3/edit\n\nI have an array of selected states. But somehow this is not updated. Any clues?\n. Maybe it's a problem with `shouldComponentUpdate()`?\n. @pieterv Do you think you can help me here please?\n. Ah, @pieterv, that explains. Are you saying react components won't re-render unless any attached state has changed?\n\nOk, now I have added some more code (a onRowClick handler) and here is the next problem: an error is thrown on a row click. What am I doing wrong?\n\nhttp://jsbin.com/laxifo/2/edit\n\nThanks!\n. Ah, good. We are getting closer. And now, the last problem:\nhttp://jsbin.com/kenigu/2/edit\n\nIt does not work anymore, when I change the row items into objects. Why @pieterv?\n. Ah!!!! Thank you so much!\n\nWith the react update helper, did you mean this one?\nhttp://facebook.github.io/react/docs/update.html\n. Thanks. All works perfect now.\n. Ah, beautiful, works. Thanks!\n. Hmmm, I realized there is one problem: when I define a `headerDataGetter`, then the labels I have defined in the `columns[]` props will be ignored.\n. I think, adding a second parameter at https://github.com/facebook/fixed-data-table/blob/f66c616a3d03ea0bc88f2e32b6cbb0cd93edde98/dist/fixed-data-table.js#L1051 would solve my problem.\n\nSomething like that\n\n``` js\nif (this.props.headerDataGetter) {\n  headData[columnProps.dataKey] =\n    this.props.headerDataGetter(columnProps.dataKey, columnProps);\n} else {\n  headData[columnProps.dataKey] = columnProps.label || '';\n}\n```\n. thanks man, `Object.assign = require('object-assign')` at the top did it for me\n. This should be possible and easy to implement.\n. @cesarandreu re: initial development vs versioning, i disagree, based on this comment https://github.com/dominictarr/semver-ftw/issues/2#issuecomment-13874220\n\nfirstly, we already use this fixed-data-table package in production, so it's not just an experiment. it's already serious. secondly, anytime you introduce breaking changes, the major version shall be incremented, no matter what. this to reflect the breakage.\n. thx, looking good\n. Furthermore I see that those rows with `.public_fixedDataTableRow_highlighted` are looking good. The font in these highlighted rows is crisp and not blurry. Why?\n. Also when you add one pixel to the `translate3d(0px,27px,0px);` to `translate3d(0px,28px,0px);` then the behavior gets inverted, all odd rows are crisp and the even ones are blurry.\n. Here is a screenshot:\n![blurry_table](https://cloud.githubusercontent.com/assets/177641/8318716/617fa112-1a5b-11e5-9532-4b41d5f5c396.jpg)\n\nYes, I suspect fractional pixels too. But the issue happens on Windows machines only.\n\nDo you think you could add an option to disable hardware acceleration? Or try to reproduce this on a Windows machine at least.\n. that I already know and doesn't help when the user is increasing/decreasing the font size in the browser\n. hmmmm, i cannot reproduce this either. alright, let's forget this ...\n. Right, that's how React works and I am well aware of this. Still it doesn't work, I am creating new object references, yet the table cell doesn't get re-rendered. Looks like I ll have to check out Immutable.js then.\n. Already did, no luck.\n. Yes it is frustrating.\n. For now, I have figured an ugly hack using `_.clone()` like that\n\n``` coffee\n  getRow: (index) ->\n    row = @_getCurrentPageResults()?[index])\n\n    # using this ugly hack because of https://github.com/facebook/fixed-data-table/issues/244\n    # in short: we need a new object reference to force this being re-rendered\n    if @props.forceUpdate\n      row = _.clone(row)\n\n    return row or null\n```\n\nbut in future, better inspect the contents inside a row when deciding whether to re-render or not.\n. IMO contents of a row should be inspected. That's a very legit use case to alter the contents of a single cell.\n. I am not worried about performance here because we only show about 20 rows here and paginate through the next 20 rows with buttons.\n\nIf you are so worried about performance, how about a new option to enable/disable cell content inspection?\n. still no action here?. @wcjordan oh, not very active? how come?. ah, thanks heaps for the links and comments - have missed all that out\r\n\r\nguess i ll close this issue as \"obsolete\" then.. thx\n. ",
    "crisward": "I realise this is a bit late, but you can simulate a double click like this.\n\n``` javascript\nGrid = React.createClass({\n  clicktime:0\n  onSelected:function(e,idx){\n    if ((new Date - @clickTime) < 500){\n      this.onDblClick(idx) \n    }\n    this.clickTime = new Date()\n    //click stuff here\n  }\n\n  onDblClick:function(idx){\n    //your double click \n }\n...\n})\n```\n\nThis is the technique I'm using\n. I realise this is a bit late, but you can simulate a double click like this.\n\n``` javascript\nGrid = React.createClass({\n  clicktime:0\n  onSelected:function(e,idx){\n    if ((new Date - @clickTime) < 500){\n      this.onDblClick(idx) \n    }\n    this.clickTime = new Date()\n    //click stuff here\n  }\n\n  onDblClick:function(idx){\n    //your double click \n }\n...\n})\n```\n\nThis is the technique I'm using\n. ",
    "jstclair": "For our implementation, we were dealing with projected (power) generator outputs, where the customer typically needed to see 1-2 weeks at a time (@ 15 min resolution); so, say, 600 - 1200 columns. The number of generators was fixed, of course, so rows typically didn't need to scroll at all. \n\nBut as I mentioned, there's two parts - performance (which I believe isn't that hard, given your existing baseline), and the ability for the developer to actually configure the grid to use 100s-low 1000s of columns.\n. I'll have to try it out with something approximate to our data, but I guess the key point is that you don't virtualize column cells if the row is visible. In our case, all the rows were almost always visible, so performance-wise, that would probably be similar to our first attempt which simply used css overflow, if I'm understanding you correctly. \nFor configuration, that sounds pretty reasonable. One take could be to assume you'd want to configure fixed columns, but the rest could be auto-configured, in a similar way to infinite-scrolling rows. You might want to provide a template (formatting, etc) but they would be dynamically provisioned as you scrolled. Does that make sense?\n\nAnd thanks for taking the time to address this issue. I understand it's outside of the typical use case. \n. For our implementation, we were dealing with projected (power) generator outputs, where the customer typically needed to see 1-2 weeks at a time (@ 15 min resolution); so, say, 600 - 1200 columns. The number of generators was fixed, of course, so rows typically didn't need to scroll at all. \n\nBut as I mentioned, there's two parts - performance (which I believe isn't that hard, given your existing baseline), and the ability for the developer to actually configure the grid to use 100s-low 1000s of columns.\n. I'll have to try it out with something approximate to our data, but I guess the key point is that you don't virtualize column cells if the row is visible. In our case, all the rows were almost always visible, so performance-wise, that would probably be similar to our first attempt which simply used css overflow, if I'm understanding you correctly. \nFor configuration, that sounds pretty reasonable. One take could be to assume you'd want to configure fixed columns, but the rest could be auto-configured, in a similar way to infinite-scrolling rows. You might want to provide a template (formatting, etc) but they would be dynamically provisioned as you scrolled. Does that make sense?\n\nAnd thanks for taking the time to address this issue. I understand it's outside of the typical use case. \n. ",
    "cesarandreu": "+1 to this. This would be helpful for us, we have a few user with tables that have around ~750 columns :(. \n. If you're need to handle a large number of columns and you're looking for an alternative, [react-virtualized](https://bvaughn.github.io/react-virtualized/) added support for grids (large number of both columns and rows) in the latest release.\n. @pieterv any update on doing a release with this :)? \n. Awesome, thanks @pieterv! Seems to be working. \n. [Why We Should Stop Using Bower \u2013 And How to Do It](http://gofore.com/ohjelmistokehitys/stop-using-bower/)\n. @kursion You want npm and [webpack](http://webpack.github.io/). Webpack solve all those problems correctly. AFAIK, bower doesn't have any of those things you mentioned either. \n\n[A Reasonable Starting Point for Building a Web App](https://blog.cesarandreu.com/posts/a_reasonable_starting_point_for_building_a_web_app)\n. Cool! Thanks :D. \n. No plans for implementing #49? :( \n. Oh cool, I'll try it out, thanks :D. \n. @binarykitchen:\n\n> Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\n\n[source](http://semver.org/)\n\n+1 to changelog though :D \n. That's great to hear @pieterv! As a work-around I've just been vendoring or using forked versions, but it's far from ideal :(.\n\nBased on [this issue's discussion](https://github.com/facebook/react/issues/4542), it looks like you could set the dependency to:\n\n``` json\n{\n  \"peerDependencies\": {\n    \"react\": \">=0.13.0 || ^0.14.0-alpha\"\n  }\n}\n```\n\nLooking at libs in the wild, react-dnd's package.json has:\n\n``` json\n{\n  \"peerDependencies\": {\n    \"react\": \">=0.13.0 <0.15.0 || 0.14.0-beta1\"\n  }\n}\n```\n\nHowever, (I think?) that won't work with newer 0.14 releases. (e.g. 0.14.0-beta3)\n\nAnother lib, react-redux, [apparently](https://github.com/gaearon/react-redux/pull/4) just straight-up removed the peer dependency.\n. Awesome, the new API looks a lot nicer. Have you done any benchmarks that you could share?\n\nWould you consider publishing it as `0.5.0-alpha.0` or similar on npm so it's easier to try out?\n\nHaving an intermediate release that lets you use both APIs would be a really nice touch, it lets you avoid having to convert all your tables at once, which can be annoying.\n. You can use [react-overlays](https://github.com/react-bootstrap/react-overlays) (or [react-bootstrap](https://github.com/react-bootstrap/react-bootstrap) if you're using bootstrap styles). They provide an [Overlay](http://react-bootstrap.github.io/react-overlays/examples/#overlay) component. It uses Portal to append a div to the document root and then positions the overlay absolutely. The only problem is that when someone scrolls the overlay stays in the same place...\n. Shouldn't `react-for-atom` be an [optional dependency](https://docs.npmjs.com/files/package.json#optionaldependencies)? \n. +1 I'd also like this feature.\n\nUse case: I have a button in each row that opens a dropdown menu of options you can take on that record. When you open the option menu, I want to disable scrolling in the table.\n\nThis kind of interaction can sometimes be seen on mobile. When you open a dropdown menu, you're expected to do one of the available actions, or it'll close when you press outside.\n\nAlso, it's difficult to track the button's \"position\" in the virtual list and keep the menu positioned correctly over it, so I'd prefer to avoid that.\n. +1\n\nGetting a warning because fixed-data-table uses `React.findDOMNode` instead of `ReactDOM.findDOMNode` :( \n. I don't think there's an easy way to know the width of a column before rendering it... So it's unlikely you'll get this. \n. +1 to this. This would be helpful for us, we have a few user with tables that have around ~750 columns :(. \n. If you're need to handle a large number of columns and you're looking for an alternative, [react-virtualized](https://bvaughn.github.io/react-virtualized/) added support for grids (large number of both columns and rows) in the latest release.\n. @pieterv any update on doing a release with this :)? \n. Awesome, thanks @pieterv! Seems to be working. \n. [Why We Should Stop Using Bower \u2013 And How to Do It](http://gofore.com/ohjelmistokehitys/stop-using-bower/)\n. @kursion You want npm and [webpack](http://webpack.github.io/). Webpack solve all those problems correctly. AFAIK, bower doesn't have any of those things you mentioned either. \n\n[A Reasonable Starting Point for Building a Web App](https://blog.cesarandreu.com/posts/a_reasonable_starting_point_for_building_a_web_app)\n. Cool! Thanks :D. \n. No plans for implementing #49? :( \n. Oh cool, I'll try it out, thanks :D. \n. @binarykitchen:\n\n> Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\n\n[source](http://semver.org/)\n\n+1 to changelog though :D \n. That's great to hear @pieterv! As a work-around I've just been vendoring or using forked versions, but it's far from ideal :(.\n\nBased on [this issue's discussion](https://github.com/facebook/react/issues/4542), it looks like you could set the dependency to:\n\n``` json\n{\n  \"peerDependencies\": {\n    \"react\": \">=0.13.0 || ^0.14.0-alpha\"\n  }\n}\n```\n\nLooking at libs in the wild, react-dnd's package.json has:\n\n``` json\n{\n  \"peerDependencies\": {\n    \"react\": \">=0.13.0 <0.15.0 || 0.14.0-beta1\"\n  }\n}\n```\n\nHowever, (I think?) that won't work with newer 0.14 releases. (e.g. 0.14.0-beta3)\n\nAnother lib, react-redux, [apparently](https://github.com/gaearon/react-redux/pull/4) just straight-up removed the peer dependency.\n. Awesome, the new API looks a lot nicer. Have you done any benchmarks that you could share?\n\nWould you consider publishing it as `0.5.0-alpha.0` or similar on npm so it's easier to try out?\n\nHaving an intermediate release that lets you use both APIs would be a really nice touch, it lets you avoid having to convert all your tables at once, which can be annoying.\n. You can use [react-overlays](https://github.com/react-bootstrap/react-overlays) (or [react-bootstrap](https://github.com/react-bootstrap/react-bootstrap) if you're using bootstrap styles). They provide an [Overlay](http://react-bootstrap.github.io/react-overlays/examples/#overlay) component. It uses Portal to append a div to the document root and then positions the overlay absolutely. The only problem is that when someone scrolls the overlay stays in the same place...\n. Shouldn't `react-for-atom` be an [optional dependency](https://docs.npmjs.com/files/package.json#optionaldependencies)? \n. +1 I'd also like this feature.\n\nUse case: I have a button in each row that opens a dropdown menu of options you can take on that record. When you open the option menu, I want to disable scrolling in the table.\n\nThis kind of interaction can sometimes be seen on mobile. When you open a dropdown menu, you're expected to do one of the available actions, or it'll close when you press outside.\n\nAlso, it's difficult to track the button's \"position\" in the virtual list and keep the menu positioned correctly over it, so I'd prefer to avoid that.\n. +1\n\nGetting a warning because fixed-data-table uses `React.findDOMNode` instead of `ReactDOM.findDOMNode` :( \n. I don't think there's an easy way to know the width of a column before rendering it... So it's unlikely you'll get this. \n. ",
    "airwin": "I have performance problem when horizontal scrolling with fixed-data-table.\nMy grid has about 20+ columns, it scrolls smoothly with v2.0 but not with v3.0. When I scroll the grid the who broswer lags, I profile the lag in Chrome and find that the costest func is `validate` which maybe the React's internal method. I'm puzzled so I keeped with v2.0 now. :(\n. Hmm.. I think you got the answer. T.T  @pieterv \n. I'm sad to see the problem remain unresolved. :(\n. In `0.6.0`, use `shouldComponentUpdate` in custom cell component will help a lot.\n. I need the 2nd param too mentions in @binarykitchen 's code . @pieterv \n. I think if use custom cellRenderer, you can return anything without using the `dangerouslySetInnerHTML`, maybe just `return <div>{cellData}</div>`?\n. same problem, rows are all invisible..\nReactv0.14.2 + F-D-Tv0.5.0\n. @muraveill Hey, I got the reason, see the changelog of [v0.4.0](https://github.com/facebook/fixed-data-table/releases/tag/v0.4.0)\n\nThe style file now separate into 2 files: `dist/fixed-data-table-base.css` and `dist/fixed-data-table-style.css`. \n. I have performance problem when horizontal scrolling with fixed-data-table.\nMy grid has about 20+ columns, it scrolls smoothly with v2.0 but not with v3.0. When I scroll the grid the who broswer lags, I profile the lag in Chrome and find that the costest func is `validate` which maybe the React's internal method. I'm puzzled so I keeped with v2.0 now. :(\n. Hmm.. I think you got the answer. T.T  @pieterv \n. I'm sad to see the problem remain unresolved. :(\n. In `0.6.0`, use `shouldComponentUpdate` in custom cell component will help a lot.\n. I need the 2nd param too mentions in @binarykitchen 's code . @pieterv \n. I think if use custom cellRenderer, you can return anything without using the `dangerouslySetInnerHTML`, maybe just `return <div>{cellData}</div>`?\n. same problem, rows are all invisible..\nReactv0.14.2 + F-D-Tv0.5.0\n. @muraveill Hey, I got the reason, see the changelog of [v0.4.0](https://github.com/facebook/fixed-data-table/releases/tag/v0.4.0)\n\nThe style file now separate into 2 files: `dist/fixed-data-table-base.css` and `dist/fixed-data-table-style.css`. \n. ",
    "maug": "@airwin same problem here (15 columns). @pieterv `allowCellsRecycling=true` is not helping, horizontal scrolling is super slow. Back to 0.2.0 :(\n. @airwin same problem here (15 columns). @pieterv `allowCellsRecycling=true` is not helping, horizontal scrolling is super slow. Back to 0.2.0 :(\n. ",
    "blackn1ght": "+1 to super slow horizontal scroll performance.\n\nVertical scrolling is fine, but horizontal scrolling lags like mad.  I've got about 30 columns.  `allowCellsRecycling=true` didn't do anything for me.\n. I've just tried 0.5.0 on a separate project and the performance is still critically slow, regardless of the number of columns.\n\nDowngrading to 0.2.0 still provides a noticeable improvement, although the render process takes a few seconds on even the smallest amounts of data to the point where I can't justify using fixed-data-table.\n\nI'd be really interested to know if _anyone_ receives optimal performance from fixed-data-table, and if they are, how do they have it configured.\n. +1 to super slow horizontal scroll performance.\n\nVertical scrolling is fine, but horizontal scrolling lags like mad.  I've got about 30 columns.  `allowCellsRecycling=true` didn't do anything for me.\n. I've just tried 0.5.0 on a separate project and the performance is still critically slow, regardless of the number of columns.\n\nDowngrading to 0.2.0 still provides a noticeable improvement, although the render process takes a few seconds on even the smallest amounts of data to the point where I can't justify using fixed-data-table.\n\nI'd be really interested to know if _anyone_ receives optimal performance from fixed-data-table, and if they are, how do they have it configured.\n. ",
    "Lashas83": "I have 25 columns and also get slow horizontal scrolling issue (seems like 2-5fps or something). But I noticed that this happens only when I open development tools in chrome. While they are closed - horizontal scrolling performance is quite good.\n\nAdding allowCellsRecycling:true helps a little bit, but it's still slow.\n\nNot sure why it happens but this might help to investigate this issue.\n\nNote, that when I try to run same code with 0.2.0 - scrolling performance does not have any issues despite if development tools are opened or not\n. I actually have made API change to include onCellClick and onCellDoubleClick methods in this pull request: https://github.com/facebook/fixed-data-table/pull/188. \n. I have 25 columns and also get slow horizontal scrolling issue (seems like 2-5fps or something). But I noticed that this happens only when I open development tools in chrome. While they are closed - horizontal scrolling performance is quite good.\n\nAdding allowCellsRecycling:true helps a little bit, but it's still slow.\n\nNot sure why it happens but this might help to investigate this issue.\n\nNote, that when I try to run same code with 0.2.0 - scrolling performance does not have any issues despite if development tools are opened or not\n. I actually have made API change to include onCellClick and onCellDoubleClick methods in this pull request: https://github.com/facebook/fixed-data-table/pull/188. \n. ",
    "sidnair": "Just wanted to mention that I'm having this issue as well. Vertical scrolling is fast, but horizontal scrolling is very laggy. It happens even with relatively few columns (e.g. 10-15), and I don't notice a difference with `allowCellsRecycling`.\n. Thanks for the fast response!\n\nI made an updated snippet that passes in a callback via props to sets the state in the parent on click. http://jsbin.com/horijo/1/edit?html,js,output\n\nIs that the idiomatic way to do it, or is there a better pattern?\n. Awesome. Thanks so much for the help!\n\nIt might be worth adding an example with stateful cells to the docs if this use case is common. For context, I ran into this when working on a change to enable inline edit.\n. I was thinking about this a bit more, and it seems like the above solution breaks encapsulation. This is unfortunate when using my own components, but more importantly means I can't use any stateful third-party React components.\n\nIs there a more general solution to this problem than editing the components I use to not use state?\n\nOne idea I had was to create a wrapper component for a cell that would recursively save state on unmount and restore it when the component is recreated, but I'm not sure if that would work or what that code would look like.\n\nAlso, do the API changes you mentioned for v0.5.0 have any implications for this use case?\n. Would it make sense to have an option to turn off virtualization for cases where the table isn't huge and you want stateful cells? Do you have a sense of how large a table needs to be for virtualization to noticeably improve performance?\n\nGlad to hear that you're looking into a fix for 0.5! Going to reopen this issue to reflect that, but feel free to close if that's not how you manage issues.\n. I'll be rendering up to a few thousand rows, so virtualization would help, but having stateful cells is also important.\n\nI think I'll start by forking the repo and turning off virtualization (since I understand why you wouldn't want that as part of the API) and see how performance is. If performance is an issue, I'll make the cells stateless or paginate. And when you add support for stateful cells, I can upgrade to the new version more easily than if I rolled my own table.\n\nThanks again for the help.\n. I think these use cases could be solved by setting `overflowX` and `overflowY` to `\"hidden\"` and setting `scrollTop` and `scrollLeft` to the current scroll position. You can keep track of the correct scroll position with an `onScrollEnd` listener.\n\nWould that work, or am I missing something?\n. Are you setting `overflowX` to `\"hidden\"` as well? I think the case you described works for me when I set both `overflowX` and `overflowY`.\n. Just wanted to mention that I'm having this issue as well. Vertical scrolling is fast, but horizontal scrolling is very laggy. It happens even with relatively few columns (e.g. 10-15), and I don't notice a difference with `allowCellsRecycling`.\n. Thanks for the fast response!\n\nI made an updated snippet that passes in a callback via props to sets the state in the parent on click. http://jsbin.com/horijo/1/edit?html,js,output\n\nIs that the idiomatic way to do it, or is there a better pattern?\n. Awesome. Thanks so much for the help!\n\nIt might be worth adding an example with stateful cells to the docs if this use case is common. For context, I ran into this when working on a change to enable inline edit.\n. I was thinking about this a bit more, and it seems like the above solution breaks encapsulation. This is unfortunate when using my own components, but more importantly means I can't use any stateful third-party React components.\n\nIs there a more general solution to this problem than editing the components I use to not use state?\n\nOne idea I had was to create a wrapper component for a cell that would recursively save state on unmount and restore it when the component is recreated, but I'm not sure if that would work or what that code would look like.\n\nAlso, do the API changes you mentioned for v0.5.0 have any implications for this use case?\n. Would it make sense to have an option to turn off virtualization for cases where the table isn't huge and you want stateful cells? Do you have a sense of how large a table needs to be for virtualization to noticeably improve performance?\n\nGlad to hear that you're looking into a fix for 0.5! Going to reopen this issue to reflect that, but feel free to close if that's not how you manage issues.\n. I'll be rendering up to a few thousand rows, so virtualization would help, but having stateful cells is also important.\n\nI think I'll start by forking the repo and turning off virtualization (since I understand why you wouldn't want that as part of the API) and see how performance is. If performance is an issue, I'll make the cells stateless or paginate. And when you add support for stateful cells, I can upgrade to the new version more easily than if I rolled my own table.\n\nThanks again for the help.\n. I think these use cases could be solved by setting `overflowX` and `overflowY` to `\"hidden\"` and setting `scrollTop` and `scrollLeft` to the current scroll position. You can keep track of the correct scroll position with an `onScrollEnd` listener.\n\nWould that work, or am I missing something?\n. Are you setting `overflowX` to `\"hidden\"` as well? I think the case you described works for me when I set both `overflowX` and `overflowY`.\n. ",
    "rmilesson": "We've got 48 columns in 8 column groups and it is really laggy. You're all probably busy with 5.0 but this needs a fix as soon as you can.\n\n`allowCellsRecycling` did not work, it didn't have any performanceboost whatsoever unfortunately.\n. What's the status for this release? We're using FDT extensively and this would be a very neat addition.\n. Alright, yes, that would be nice.\n\nHowever, I just fiddled about a bit, if I pass a `headerClassName` to a ColumnGroup, it will be applied to it, but not carry on downwards to the columns. So with a bit of magic I got it to work just as fine on our end for now.\n. Yeah, I think you'll have to go poke whichever vendor of your browser of choice for that since it's their search functionality.\n. Doesn't really matter which version. It's been automatically updating since forever. I'm guessing FDT doesn't detect that your data has changed and therefore does not update.\nAre you using [immutable](https://facebook.github.io/immutable-js/) data?\n. +1\n\nVertical alignment is meh, the users can handle that themselves since we're all in control over row height anyway.\n. You write your own pagination component which selects items for Fixed Data Table to display. As far as I know, FDT doesn't provide pagination out of the box.\n. We've got 48 columns in 8 column groups and it is really laggy. You're all probably busy with 5.0 but this needs a fix as soon as you can.\n\n`allowCellsRecycling` did not work, it didn't have any performanceboost whatsoever unfortunately.\n. What's the status for this release? We're using FDT extensively and this would be a very neat addition.\n. Alright, yes, that would be nice.\n\nHowever, I just fiddled about a bit, if I pass a `headerClassName` to a ColumnGroup, it will be applied to it, but not carry on downwards to the columns. So with a bit of magic I got it to work just as fine on our end for now.\n. Yeah, I think you'll have to go poke whichever vendor of your browser of choice for that since it's their search functionality.\n. Doesn't really matter which version. It's been automatically updating since forever. I'm guessing FDT doesn't detect that your data has changed and therefore does not update.\nAre you using [immutable](https://facebook.github.io/immutable-js/) data?\n. +1\n\nVertical alignment is meh, the users can handle that themselves since we're all in control over row height anyway.\n. You write your own pagination component which selects items for Fixed Data Table to display. As far as I know, FDT doesn't provide pagination out of the box.\n. ",
    "djordjes": "I have the same problem, 16 column, vertical scrolling is buggy, but only when dev tools are opened in Chrome\n. I have the same problem, 16 column, vertical scrolling is buggy, but only when dev tools are opened in Chrome\n. ",
    "sorenhoyer": "Using the table for a reporting interface, where each week is mapped to a column with aggregated data. Scrolling horizontally is indeed super slow and laggy (allowCellsRecycling:true didn't make a difference neither - using 0.4.7 and react v0.13.3)\n. This would indeed be VERY useful! :-)\n. Using the table for a reporting interface, where each week is mapped to a column with aggregated data. Scrolling horizontally is indeed super slow and laggy (allowCellsRecycling:true didn't make a difference neither - using 0.4.7 and react v0.13.3)\n. This would indeed be VERY useful! :-)\n. ",
    "ayozebarrera": "Any advance here? I'm having the same issue just with 30 columns..\n. I have a Table that generates columns based on the header text width. So I have a function with two parameters. The first parameter is the header text and the second one is the font that you are using.\n\nThis is the function:\n\n``` es6\ngetTextWidth(text, font) {\n    let element = document.createElement('canvas');\n    let context = element.getContext('2d');\n    context.font = font;\n    return context.measureText(text).width+24;\n  }\n```\n\n*_I'm adding 24px to the final width for extra padding_\n\nAnd this is how I use it:\n\n``` es6\ngetTextWidth('hello', 'bold 14px Roboto, sans-serif')\n```\n\nResult screenshot:\n![instantanea8](https://cloud.githubusercontent.com/assets/6180188/12261524/8cc4ab4e-b919-11e5-997c-e34d414e85a9.png)\n\nhope it helps ^^\n. Any advance here? I'm having the same issue just with 30 columns..\n. I have a Table that generates columns based on the header text width. So I have a function with two parameters. The first parameter is the header text and the second one is the font that you are using.\n\nThis is the function:\n\n``` es6\ngetTextWidth(text, font) {\n    let element = document.createElement('canvas');\n    let context = element.getContext('2d');\n    context.font = font;\n    return context.measureText(text).width+24;\n  }\n```\n\n*_I'm adding 24px to the final width for extra padding_\n\nAnd this is how I use it:\n\n``` es6\ngetTextWidth('hello', 'bold 14px Roboto, sans-serif')\n```\n\nResult screenshot:\n![instantanea8](https://cloud.githubusercontent.com/assets/6180188/12261524/8cc4ab4e-b919-11e5-997c-e34d414e85a9.png)\n\nhope it helps ^^\n. ",
    "josebalius": "Also sad to report that horizontal scrolling performance is pretty bad with anything that has over 15+ columns. Is there a plan to improve this? I would be happy to help.\n\n`allowCellsRecycling` did help a bit, but it still not perfect.\n. Also sad to report that horizontal scrolling performance is pretty bad with anything that has over 15+ columns. Is there a plan to improve this? I would be happy to help.\n\n`allowCellsRecycling` did help a bit, but it still not perfect.\n. ",
    "yrokhlin": "I'm curious has any one tested to see if this is resolved with v6.0?\n. I too would love to know the answer to this question +1\n. Hey why is this closed? Is this ever going to be released?? I know we are on v0.5 NOW but all it does is add some compatibility with 0.14 while breaking everything else (laggiest release to date.) None of the changes we really need, like the new API, has made it over. No one will answer why, or what the hell is going on, and @ehzhang seems to have closed this issue, with out any comment as to wtf is going on.\n\nThe current state of F-D-D is terrible, and I can't believe a multi-billion dollar company such as Facebook would leave a public facing product this way. \n. I'm curious has any one tested to see if this is resolved with v6.0?\n. I too would love to know the answer to this question +1\n. Hey why is this closed? Is this ever going to be released?? I know we are on v0.5 NOW but all it does is add some compatibility with 0.14 while breaking everything else (laggiest release to date.) None of the changes we really need, like the new API, has made it over. No one will answer why, or what the hell is going on, and @ehzhang seems to have closed this issue, with out any comment as to wtf is going on.\n\nThe current state of F-D-D is terrible, and I can't believe a multi-billion dollar company such as Facebook would leave a public facing product this way. \n. ",
    "imorrison": "I am using `0.6.0`, I have `allowCellsRecycling` set to true and with only 10 columns the table scrolling is very slow. There are noticeable jumps and pauses. I tried using custom cells for all the data. That doesn't seem to have much effect either. \n. I am using `0.6.0`, I have `allowCellsRecycling` set to true and with only 10 columns the table scrolling is very slow. There are noticeable jumps and pauses. I tried using custom cells for all the data. That doesn't seem to have much effect either. \n. ",
    "lukeknep": "Reporting the same slowness with 10+ columns (even with only a few dozen rows).\n`allowCellsRecycling` and closing Chrome dev tools helped, but getting 2-5 fps with horizontal scrolling.\n. Reporting the same slowness with 10+ columns (even with only a few dozen rows).\n`allowCellsRecycling` and closing Chrome dev tools helped, but getting 2-5 fps with horizontal scrolling.\n. ",
    "jeremyckahn": "+1, I'd love to know what browsers this project supports.\n. +1, I'd love to know what browsers this project supports.\n. ",
    "eugene1g": "FWIW, official examples work in IE9 (but not IE8)\n. FWIW, official examples work in IE9 (but not IE8)\n. ",
    "yrezgui": "@pieterv Thank you for showing the roadmap but can you give more details about browsers versions ? I'm using an old embedded firefox in a project where I can't update it so easily. Thanks again.\n. @pieterv Thank you for showing the roadmap but can you give more details about browsers versions ? I'm using an old embedded firefox in a project where I can't update it so easily. Thanks again.\n. ",
    "bumxnhoc": "Accept  issue  \n. .public_fixedDataTableCell_main:hover {\n  background-color: yellow;\n}\n. Accept  issue  \n. .public_fixedDataTableCell_main:hover {\n  background-color: yellow;\n}\n. ",
    "mfunkie": "Thank you for this, I was pulling my hair out trying to figure out how to affix a column.  It looks like https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableColumn.react.js has a lot of these properties.  Should this be updated also?\n. Found out where in the build this happens.\n\nhttps://github.com/facebook/fixed-data-table/blob/master/build_helpers/buildAPIDocs.sh#L20-L24\n\nIf you can update the FixedDataTableColumn file\n\nhttps://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableColumn.react.js\n\nthen you can run the build script to get the output markdown.\n. Thank you for this, I was pulling my hair out trying to figure out how to affix a column.  It looks like https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableColumn.react.js has a lot of these properties.  Should this be updated also?\n. Found out where in the build this happens.\n\nhttps://github.com/facebook/fixed-data-table/blob/master/build_helpers/buildAPIDocs.sh#L20-L24\n\nIf you can update the FixedDataTableColumn file\n\nhttps://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableColumn.react.js\n\nthen you can run the build script to get the output markdown.\n. ",
    "jackcompton": "I would love to see this feature added as well. \n. I would love to see this feature added as well. \n. ",
    "YadrovSergey": "+\n. +\n. ",
    "sahilthapar": ":+1:\n. :+1:\n. ",
    "SupremeTechnopriest": "I know plus 1 is annoying... but this would be really nice.  \n. I ended up implementing my own table with row and column group support. Maybe over the holidays I can package it up and put it on npm. . It seems ComponentClass.type has been deprecated in React 0.13.  I was also forgetting to set a column group height.  I have it working now so I will close this.  Thank you\n. solved it.  Tables needed a unique key.\n. @ehzhang I am also seeing this using my own webpack config. See below:\n\n```\n/**\n * Webpack Dev Config\n * react-hot-loader and babel\n *\n * @author  Randy Lebeau\n *\n */\n\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n    devtool: 'eval',\n    watch: true,\n    cache: false,\n    entry: [\n        './examples/Init'\n    ],\n    resolve: {\n        extensions: ['', '.jsx', '.js', '.scss', '.woff', '.ttf', '.eot', '.svg', '.otf'],\n        modulesDirectories: ['src', 'node_modules']\n    },\n    output: {\n        path: path.join(__dirname, 'examples', 'build'),\n        filename: 'script.js',\n        publicPath: '/'\n    },\n    plugins: [\n        new webpack.NoErrorsPlugin()\n    ],\n    module: {\n        loaders: [{\n            test: /\\.jsx?$/,\n            loaders: ['react-hot', 'babel-loader'],\n            exclude: path.join(__dirname, 'node_modules')\n        }, {\n            test: /\\.json$/,\n            loader: 'json-loader',\n            include: path.join(__dirname, 'node_modules/moment-timezone')\n        }, {\n            test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n            loader: 'url-loader?limit=10000&mimetype=application/font-woff',\n            include: path.join(__dirname, 'src/fonts')\n        }, {\n            test: /\\.(ttf|eot|svg|otf)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n            loader: 'file-loader',\n            include: path.join(__dirname, 'src/fonts')\n        }, {\n            test: /\\.woff(2)?(\\?ntbba6)?$/,\n            loader: 'url-loader?limit=10000&mimetype=application/font-woff',\n            include: path.join(__dirname, 'src/fonts')\n        }, {\n            test: /\\.(ttf|eot|svg|otf)(\\?ntbba6)?$/,\n            loader: 'file-loader',\n            include: path.join(__dirname, 'src/fonts')\n        }]\n    }\n};\n```\n. I know plus 1 is annoying... but this would be really nice.  \n. I ended up implementing my own table with row and column group support. Maybe over the holidays I can package it up and put it on npm. . It seems ComponentClass.type has been deprecated in React 0.13.  I was also forgetting to set a column group height.  I have it working now so I will close this.  Thank you\n. solved it.  Tables needed a unique key.\n. @ehzhang I am also seeing this using my own webpack config. See below:\n\n```\n/**\n * Webpack Dev Config\n * react-hot-loader and babel\n *\n * @author  Randy Lebeau\n *\n */\n\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n    devtool: 'eval',\n    watch: true,\n    cache: false,\n    entry: [\n        './examples/Init'\n    ],\n    resolve: {\n        extensions: ['', '.jsx', '.js', '.scss', '.woff', '.ttf', '.eot', '.svg', '.otf'],\n        modulesDirectories: ['src', 'node_modules']\n    },\n    output: {\n        path: path.join(__dirname, 'examples', 'build'),\n        filename: 'script.js',\n        publicPath: '/'\n    },\n    plugins: [\n        new webpack.NoErrorsPlugin()\n    ],\n    module: {\n        loaders: [{\n            test: /\\.jsx?$/,\n            loaders: ['react-hot', 'babel-loader'],\n            exclude: path.join(__dirname, 'node_modules')\n        }, {\n            test: /\\.json$/,\n            loader: 'json-loader',\n            include: path.join(__dirname, 'node_modules/moment-timezone')\n        }, {\n            test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n            loader: 'url-loader?limit=10000&mimetype=application/font-woff',\n            include: path.join(__dirname, 'src/fonts')\n        }, {\n            test: /\\.(ttf|eot|svg|otf)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n            loader: 'file-loader',\n            include: path.join(__dirname, 'src/fonts')\n        }, {\n            test: /\\.woff(2)?(\\?ntbba6)?$/,\n            loader: 'url-loader?limit=10000&mimetype=application/font-woff',\n            include: path.join(__dirname, 'src/fonts')\n        }, {\n            test: /\\.(ttf|eot|svg|otf)(\\?ntbba6)?$/,\n            loader: 'file-loader',\n            include: path.join(__dirname, 'src/fonts')\n        }]\n    }\n};\n```\n. ",
    "luohaoGit": "+\n. +\n. ",
    "eyasliu": "+++1, what time release it\n. +++1, what time release it\n. ",
    "madCodes": "its been a long time . any update?\n. its been a long time . any update?\n. ",
    "cajoy": "+1. +1. ",
    "dannymk": "Thank you, I will give that a try.\n. Thank you for your answer.   It helps a lot.  I look forward to to future version of this great component.\n. Steve, I just removed the \"/*\\* @jsx React.DOM */\" at the top of your edit and it worked just fine.  What issues are you having?\n. Sorry, can't help you there but I am glad you got it working.  I am swamped here and behind in quite a few projects.\n. Thank you, I will give that a try.\n. Thank you for your answer.   It helps a lot.  I look forward to to future version of this great component.\n. Steve, I just removed the \"/*\\* @jsx React.DOM */\" at the top of your edit and it worked just fine.  What issues are you having?\n. Sorry, can't help you there but I am glad you got it working.  I am swamped here and behind in quite a few projects.\n. ",
    "bkazmer": "Thank you, the fix works\n. Thank you, the fix works\n. ",
    "llh1": "Right, thanks for your answer :)\n. Hi all,\n\nI think I've found the issue with IE9. I'll send a pull request a little bit later. \nIt happens in the function `PrefixIntervalTree`. At some point, it needs to initialize the Int32Array with this line: `var Int32Array = global.Int32Array || Array;`\n\nThe problem is IE9 doesn't have Int32Array, so it falls back to Array. \nNext line: `this.$PrefixIntervalTree_value = new Int32Array(nodeCount);`. On IE9, when you create array like this, it initializes everything to `undefined`, but it should be initialized to 0 to work fine.\n. Done, thanks for that @hedgerwang :)\n. Right, thanks for your answer :)\n. Hi all,\n\nI think I've found the issue with IE9. I'll send a pull request a little bit later. \nIt happens in the function `PrefixIntervalTree`. At some point, it needs to initialize the Int32Array with this line: `var Int32Array = global.Int32Array || Array;`\n\nThe problem is IE9 doesn't have Int32Array, so it falls back to Array. \nNext line: `this.$PrefixIntervalTree_value = new Int32Array(nodeCount);`. On IE9, when you create array like this, it initializes everything to `undefined`, but it should be initialized to 0 to work fine.\n. Done, thanks for that @hedgerwang :)\n. ",
    "jbraithwaite": "@ofersadgat That's a lot of boilerplate code\u2026 \n\nI feel like being responsive-friendly should be built in, especially since [the examples](http://facebook.github.io/fixed-data-table/example-object-data.html) adapt to the container size.\n. @ofersadgat That's a lot of boilerplate code\u2026 \n\nI feel like being responsive-friendly should be built in, especially since [the examples](http://facebook.github.io/fixed-data-table/example-object-data.html) adapt to the container size.\n. ",
    "afhammad": "+100\n. +100\n. ",
    "parties": "Here's an example just using a window.resize handler, it's essentially what the example pages do.\n\nhttps://gist.github.com/parties/a67c75c2ccc5ee6fe48a\n. Here's an example just using a window.resize handler, it's essentially what the example pages do.\n\nhttps://gist.github.com/parties/a67c75c2ccc5ee6fe48a\n. ",
    "gmaclennan": "I had this same problem and couldn't find any existing module to solve it, so I had a go at writing one: https://github.com/digidem/react-dimensions\n\nIts aim is to get the dimensions of the containing element and pass them to fixed-data-table, and the dimensions when the window is resized.\n\nNot that the containing element must have a height, or nothing will be rendered. The README isn't great, sorry about that.\n\nYou can use it as a higher order component or an ES7 decorator.\n\nLet me know how it works and whether it is useful. My first go at a React component, so apologies for any silly mistakes.\n. Check https://github.com/digidem/smart-data-table/blob/master/src/data-table.jsx for an example about how to do this with https://github.com/digidem/react-dimensions\n\nI really need to write better docs / example, but the short answer is that react-dimensions is a Higher-Order component that can be used like a mixin to add `this.props.containerWidth` and `this.props.containerHeight` to the component. Something like this:\n\n``` js\nimport { Table } from 'fixed-data-table'\nimport GetContainerDimensions from 'react-dimensions'\n\nclass DataTable extends React.Component {\n  render () {\n    return (\n      <Table\n        width={this.props.containerWidth}\n        height={this.props.containerHeight}>\n        {columnNodes}\n      </Table>\n    )\n  }\n}\n\nexport default GetContainerDimensions()(DataTable)\n```\n. Hi @muraveill, my apologies that the package is confusing. Your second attempt is close, but it's not working because I included some [ES6 code](https://babeljs.io/docs/learn-es2015/#modules) in the example, my apologies. Try changing this line:\n\n``` js\nexport default Dimensions()(SamplesTable)\n```\n\nto\n\n``` js\nmodule.exports = Dimensions()(SamplesTable)\n```\n. Hi @muraveill, `Dimensions()(SomeOtherComponent)` returns a wrapped react component. The API might have been simpler as just `Dimensions(SomeOtherComponent)` but I wanted to be able to define some options `Dimensions(options)(SomeOtherComponent)`. You should not export twice, just export the wrapped component. This might help: https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\n\nLet's move this out this thread, any more questions relevant to `react-dimensions` as opposed to `fixed-data-table` to https://github.com/digidem/react-dimensions/issues/1\n. This happens because of `overflow: hidden` which is set on quite a few elements, and is necessary for the rendering technique to work (you can turn them all off and popups appear but the rendering is totally messed up). There is [no easy way to override overflow: hidden](http://stackoverflow.com/questions/8837050/allow-specific-tag-to-override-overflowhidden) from within the element.\n\nThe solution if you want a pop up on the column header is to use [react-portal](https://github.com/tajo/react-portal) see [this talk](https://www.youtube.com/watch?v=z5e7kWSHWTg) for more info. You basically render the popup to document body, and you would need some logic to position it correctly. I'll hopefully have a demo I can share soon, I've just been dealing with the same problem.\n. I had this same problem and couldn't find any existing module to solve it, so I had a go at writing one: https://github.com/digidem/react-dimensions\n\nIts aim is to get the dimensions of the containing element and pass them to fixed-data-table, and the dimensions when the window is resized.\n\nNot that the containing element must have a height, or nothing will be rendered. The README isn't great, sorry about that.\n\nYou can use it as a higher order component or an ES7 decorator.\n\nLet me know how it works and whether it is useful. My first go at a React component, so apologies for any silly mistakes.\n. Check https://github.com/digidem/smart-data-table/blob/master/src/data-table.jsx for an example about how to do this with https://github.com/digidem/react-dimensions\n\nI really need to write better docs / example, but the short answer is that react-dimensions is a Higher-Order component that can be used like a mixin to add `this.props.containerWidth` and `this.props.containerHeight` to the component. Something like this:\n\n``` js\nimport { Table } from 'fixed-data-table'\nimport GetContainerDimensions from 'react-dimensions'\n\nclass DataTable extends React.Component {\n  render () {\n    return (\n      <Table\n        width={this.props.containerWidth}\n        height={this.props.containerHeight}>\n        {columnNodes}\n      </Table>\n    )\n  }\n}\n\nexport default GetContainerDimensions()(DataTable)\n```\n. Hi @muraveill, my apologies that the package is confusing. Your second attempt is close, but it's not working because I included some [ES6 code](https://babeljs.io/docs/learn-es2015/#modules) in the example, my apologies. Try changing this line:\n\n``` js\nexport default Dimensions()(SamplesTable)\n```\n\nto\n\n``` js\nmodule.exports = Dimensions()(SamplesTable)\n```\n. Hi @muraveill, `Dimensions()(SomeOtherComponent)` returns a wrapped react component. The API might have been simpler as just `Dimensions(SomeOtherComponent)` but I wanted to be able to define some options `Dimensions(options)(SomeOtherComponent)`. You should not export twice, just export the wrapped component. This might help: https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\n\nLet's move this out this thread, any more questions relevant to `react-dimensions` as opposed to `fixed-data-table` to https://github.com/digidem/react-dimensions/issues/1\n. This happens because of `overflow: hidden` which is set on quite a few elements, and is necessary for the rendering technique to work (you can turn them all off and popups appear but the rendering is totally messed up). There is [no easy way to override overflow: hidden](http://stackoverflow.com/questions/8837050/allow-specific-tag-to-override-overflowhidden) from within the element.\n\nThe solution if you want a pop up on the column header is to use [react-portal](https://github.com/tajo/react-portal) see [this talk](https://www.youtube.com/watch?v=z5e7kWSHWTg) for more info. You basically render the popup to document body, and you would need some logic to position it correctly. I'll hopefully have a demo I can share soon, I've just been dealing with the same problem.\n. ",
    "jdelafon": "This would really be a great enhancement. Modern websites are responsive. I spent hours trying to make my fixed-data-table responsive in many different ways, and still it is a hundred times slower than the examples page, and I cannot figure out why I can make it work for width but not for height. It is a lot of code that could be common to all fixed-data-table users.\n. I tried this, but it does not get rendered, although I did set a height for the parent component. What am I doing wrong ? My render function:\n\n```\nvar Dimensions = require('react-dimensions');\n...\n\n    var tab = Dimensions()(\n        <Table\n            rowHeight={ROW_HEIGHT}\n            rowGetter={_this._rowGetter}\n            rowsCount={SamplesStore.size()}\n            width={this.props.containerWidth}\n            height={this.props.containerHeight}\n            headerHeight={HEADER_HEIGHT}\n        >\n        {cols}\n        </Table>);\n\n    return <div id=\"samples-table\" style={{height:'500px'}}>\n        {tab}\n        </div>;\n```\n. Note that the react-dimensions package works fine now, this is what I am using in the end. Still, it should be a straightforward feature of fixed-data-table.\n. @ryanhca \n1. Nobody said it was hard.\n2. Should every developer really rewrite again his own version of the exact same functionality?\n3. Would you trust every one of your employees on implementing it correctly (what is debounce again)?\n4. Minimal effort !== no effort, and it accumulates with thousands of users.\nThere is no discussion about it, it is just what a library is made for. `react-dimensions` is one, and it works. The only question is could it be part of the core code instead of a separate dependency.\n. Having the code of the examples available on their respective page without inspecting the document with dev tools or returning to Github would already be an enhancement.\n\nAn example of a table with responsive dimensions would be a great addition, too.\n. Hi,\nSorry but I don't get it. Your Resizable columns example\\* has no mention of 'onColumnResizeEnd' in its code, only a 'onColumnResizeEndCallback'. When I use the latter, more or less copying your example, I get the same error message as above: `this.props.onColumnResizeEnd is not a function`.\n\n*http://facebook.github.io/fixed-data-table/example-resize.html\n. Keys should not be mutable objects, imho.\n. I am experiencing errors with version 0.5.0 and react 0.14, see here:\nhttps://github.com/facebook/fixed-data-table/issues/298\n\nIs it working for all except me ? Could you please share your package.json if it works for you, so that I could understand what dependency could cause the problem ?\n. This module helps a lot in this respect:\nhttps://www.npmjs.com/package/react-dimensions\n. I found out that I can manually edit the css in the browser's dev tools to see the hidden lines, but it is highly suspicious, and attributes are set inside the html. I have to\n- Set to 0 (down from table height) the height of the element `.fixedDataTableColumnResizerLineLayout_main.fixedDataTableColumnResizerLineLayout_hiddenElem.public_fixedDataTableColumnResizerLine_main`\n  (but it is set inside the html `style` tag, so a css rule does not override it)\n- Set to 0 (down from 50px) the height of `fixedDataTableCellGroupLayout_cellGroupWrapper` elements that have a `data-reactid=\"...$fixed_cells`\n  (but in the css I don't know how to select only these and not the `...$scrollable_cells`)\n\nPlease give me some explanation as to how to fix this. Why do fixed cells take 50px in height if I don't have any anyway ?\n. I could change these attributes on the fly by modifying the css attributes above with a bit of jQuery inside componentDidUpdate, but the problem persists for rows that were hidden and are created when the user scrolls down.\n\nWhat mechanism makes the rows appear when scrolling down ? There seems to be no component (state) update. I really need to get around this.\n. Oh thank you for noticing that ! You saved my life ! It works now\n. This would really be a great enhancement. Modern websites are responsive. I spent hours trying to make my fixed-data-table responsive in many different ways, and still it is a hundred times slower than the examples page, and I cannot figure out why I can make it work for width but not for height. It is a lot of code that could be common to all fixed-data-table users.\n. I tried this, but it does not get rendered, although I did set a height for the parent component. What am I doing wrong ? My render function:\n\n```\nvar Dimensions = require('react-dimensions');\n...\n\n    var tab = Dimensions()(\n        <Table\n            rowHeight={ROW_HEIGHT}\n            rowGetter={_this._rowGetter}\n            rowsCount={SamplesStore.size()}\n            width={this.props.containerWidth}\n            height={this.props.containerHeight}\n            headerHeight={HEADER_HEIGHT}\n        >\n        {cols}\n        </Table>);\n\n    return <div id=\"samples-table\" style={{height:'500px'}}>\n        {tab}\n        </div>;\n```\n. Note that the react-dimensions package works fine now, this is what I am using in the end. Still, it should be a straightforward feature of fixed-data-table.\n. @ryanhca \n1. Nobody said it was hard.\n2. Should every developer really rewrite again his own version of the exact same functionality?\n3. Would you trust every one of your employees on implementing it correctly (what is debounce again)?\n4. Minimal effort !== no effort, and it accumulates with thousands of users.\nThere is no discussion about it, it is just what a library is made for. `react-dimensions` is one, and it works. The only question is could it be part of the core code instead of a separate dependency.\n. Having the code of the examples available on their respective page without inspecting the document with dev tools or returning to Github would already be an enhancement.\n\nAn example of a table with responsive dimensions would be a great addition, too.\n. Hi,\nSorry but I don't get it. Your Resizable columns example\\* has no mention of 'onColumnResizeEnd' in its code, only a 'onColumnResizeEndCallback'. When I use the latter, more or less copying your example, I get the same error message as above: `this.props.onColumnResizeEnd is not a function`.\n\n*http://facebook.github.io/fixed-data-table/example-resize.html\n. Keys should not be mutable objects, imho.\n. I am experiencing errors with version 0.5.0 and react 0.14, see here:\nhttps://github.com/facebook/fixed-data-table/issues/298\n\nIs it working for all except me ? Could you please share your package.json if it works for you, so that I could understand what dependency could cause the problem ?\n. This module helps a lot in this respect:\nhttps://www.npmjs.com/package/react-dimensions\n. I found out that I can manually edit the css in the browser's dev tools to see the hidden lines, but it is highly suspicious, and attributes are set inside the html. I have to\n- Set to 0 (down from table height) the height of the element `.fixedDataTableColumnResizerLineLayout_main.fixedDataTableColumnResizerLineLayout_hiddenElem.public_fixedDataTableColumnResizerLine_main`\n  (but it is set inside the html `style` tag, so a css rule does not override it)\n- Set to 0 (down from 50px) the height of `fixedDataTableCellGroupLayout_cellGroupWrapper` elements that have a `data-reactid=\"...$fixed_cells`\n  (but in the css I don't know how to select only these and not the `...$scrollable_cells`)\n\nPlease give me some explanation as to how to fix this. Why do fixed cells take 50px in height if I don't have any anyway ?\n. I could change these attributes on the fly by modifying the css attributes above with a bit of jQuery inside componentDidUpdate, but the problem persists for rows that were hidden and are created when the user scrolls down.\n\nWhat mechanism makes the rows appear when scrolling down ? There seems to be no component (state) update. I really need to get around this.\n. Oh thank you for noticing that ! You saved my life ! It works now\n. ",
    "yoavniran": "Using the Dimensions workaround is just that. It shouldnt be brought up here as a solution to the obvious flaw in this Table component that only uses fixed width and sets it with inline styles no less! \n\nIt should be possible to render the table so it spans the width of its container. \n\n+100 for this to be added.\n. Using the Dimensions workaround is just that. It shouldnt be brought up here as a solution to the obvious flaw in this Table component that only uses fixed width and sets it with inline styles no less! \n\nIt should be possible to render the table so it spans the width of its container. \n\n+100 for this to be added.\n. ",
    "tkiethanom": "I don't really understand why these dimension settings are set here anyway. Look and feel should be handled in your own CSS files. The way it is now, the inline styles can't even be overwritten. \n. I think theres a bug in the ^example when you scroll down the page the whole table scrolls above the navigation. \n. I don't really understand why these dimension settings are set here anyway. Look and feel should be handled in your own CSS files. The way it is now, the inline styles can't even be overwritten. \n. I think theres a bug in the ^example when you scroll down the page the whole table scrolls above the navigation. \n. ",
    "langri-sha": "+1 for reasons pointed out by @muraveill. I don't want to take a performant table, only to butcher it with my own sloppy rendering requirements.\n. +1 for reasons pointed out by @muraveill. I don't want to take a performant table, only to butcher it with my own sloppy rendering requirements.\n. ",
    "mrchess": "+1 for `react-dimensions` as an interim solution. Using this as well.\n. +1 for `react-dimensions` as an interim solution. Using this as well.\n. ",
    "jludev1": "+1 Responsive friendly should be built in.\nUsing window resize handler is a poor man's approach. There will be cases that the table size need to be adjusted due to the dimension changes of neighboring elements (such as shown/hidden). In these scenarios, window resize handler won't work, and it's messy to use custom inter component communication.\n. +1 Responsive friendly should be built in.\nUsing window resize handler is a poor man's approach. There will be cases that the table size need to be adjusted due to the dimension changes of neighboring elements (such as shown/hidden). In these scenarios, window resize handler won't work, and it's messy to use custom inter component communication.\n. ",
    "applebya": "+1\n. +1\n. ",
    "mahmoudfelfel": "+1 for `react-dimensions` but yes as everyone is saying, it should be built in.\n. +1 for `react-dimensions` but yes as everyone is saying, it should be built in.\n. ",
    "avesus": "+100\n. +100\n. ",
    "shumuko": "+1\n. +1\n. ",
    "ryan-hamblin": "I don't see why it is so hard to implement a reactive container for your table component? I was able to accomplish this in a really trivial way. Simply add/remove event listeners using the react lifecycle methods and update a state property that is tied to your table's width. The team could build them in, yes, but for now everyone could just try using a little bit of vanilla JS to accomplish fluid tables with minimal effort. \n. @jdelafon I just don't see why the solution needs to be a global one. I do trust all of the employees I work with. And by seeing all the complaints here about it not being in the core of the package I figured everyone was having a hard time with it. Sorry if my comment came at you in a rough way this morning. As for your comment ('it is what the library is made for)  I have to respectfully disagree. The library was made for displaying massive amounts of data in a table which they have accomplished at FB and now by the team maintaining the library. Everything else they've managed to accomplish has been sugar on top. You've asked for solutions to your problems and you've received them, why do you need someone else to code them for you?\n. For some reason I can't get any of this data. I only get an empty object, the rowIndex and the MouseEvent. I'm not sure what I can do with any of that at this point\n. I figured this out. PM me if you get stuck on this. It was more trivial than I was thinking it would be.\n. I don't see why it is so hard to implement a reactive container for your table component? I was able to accomplish this in a really trivial way. Simply add/remove event listeners using the react lifecycle methods and update a state property that is tied to your table's width. The team could build them in, yes, but for now everyone could just try using a little bit of vanilla JS to accomplish fluid tables with minimal effort. \n. @jdelafon I just don't see why the solution needs to be a global one. I do trust all of the employees I work with. And by seeing all the complaints here about it not being in the core of the package I figured everyone was having a hard time with it. Sorry if my comment came at you in a rough way this morning. As for your comment ('it is what the library is made for)  I have to respectfully disagree. The library was made for displaying massive amounts of data in a table which they have accomplished at FB and now by the team maintaining the library. Everything else they've managed to accomplish has been sugar on top. You've asked for solutions to your problems and you've received them, why do you need someone else to code them for you?\n. For some reason I can't get any of this data. I only get an empty object, the rowIndex and the MouseEvent. I'm not sure what I can do with any of that at this point\n. I figured this out. PM me if you get stuck on this. It was more trivial than I was thinking it would be.\n. ",
    "tkirda": "We are using fixed-data-table extensively and managing it's width using higher order components. I think it is not a problem for many other users as well. \n\nLot's of people complain that is not maintained, but it already does what it was designed to do. And does it well.\n. @phkavitha You will need to provide custom formatting of a cell and highlight it yourself. Fixed data table only provides generic framework to display data. Search is not part of the component.\n. Yes it is possible. Wrap your content into div with the class and set style on that class:\n\n```\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n```\n. That's right, I did not include all the details. This should work:\n\n``` css\n.cell {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    box-sizing: border-box;\n    display: block;\n    padding: 8px;\n    width: 100%;\n}\n\n.cell-overflow {\n    box-sizing: border-box;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n```\n\n``` html\n<div class=\"cell\">\n    <div class=\"cell-overflow\">\n        Long content...\n    </div>\n</div>\n```\n. Check this doc: http://facebook.github.io/fixed-data-table/api-column.html\r\n\r\nSet value for `allowCellsRecycling` to `true` in your configuration.. I don't see why it should be marked as deprecated. Usage shows more than 50K downloads per month. More than double over fixed-data-table-2. It is stable and works well (at least for us). Maybe there are cases where it is not sufficient and then you can freely choose to use other packages.\r\n\r\nAnd with new version of react that is coming out soon, I trust it will get necessary updates and we can continue using it. We use it on a project with a very large code base and switching to something else would be time consuming and risky. Deprecating would just be not fare to current user base.\r\n\r\nThese rants about deprecation is just noise and not really helping anyone.. I know this is not ideal but that is reality. Low number of changes and popularity also shows that it is good enough.. We are using fixed-data-table extensively and managing it's width using higher order components. I think it is not a problem for many other users as well. \n\nLot's of people complain that is not maintained, but it already does what it was designed to do. And does it well.\n. @phkavitha You will need to provide custom formatting of a cell and highlight it yourself. Fixed data table only provides generic framework to display data. Search is not part of the component.\n. Yes it is possible. Wrap your content into div with the class and set style on that class:\n\n```\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n```\n. That's right, I did not include all the details. This should work:\n\n``` css\n.cell {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    box-sizing: border-box;\n    display: block;\n    padding: 8px;\n    width: 100%;\n}\n\n.cell-overflow {\n    box-sizing: border-box;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n```\n\n``` html\n<div class=\"cell\">\n    <div class=\"cell-overflow\">\n        Long content...\n    </div>\n</div>\n```\n. Check this doc: http://facebook.github.io/fixed-data-table/api-column.html\r\n\r\nSet value for `allowCellsRecycling` to `true` in your configuration.. I don't see why it should be marked as deprecated. Usage shows more than 50K downloads per month. More than double over fixed-data-table-2. It is stable and works well (at least for us). Maybe there are cases where it is not sufficient and then you can freely choose to use other packages.\r\n\r\nAnd with new version of react that is coming out soon, I trust it will get necessary updates and we can continue using it. We use it on a project with a very large code base and switching to something else would be time consuming and risky. Deprecating would just be not fare to current user base.\r\n\r\nThese rants about deprecation is just noise and not really helping anyone.. I know this is not ideal but that is reality. Low number of changes and popularity also shows that it is good enough.. ",
    "sandys": "+1 for this. an example of pagination using external json data would be invaluable. We get our json data using an external api... and I'm not able to figure out how to trigger calls to the API for pagination.\n. +1 for this. an example of pagination using external json data would be invaluable. We get our json data using an external api... and I'm not able to figure out how to trigger calls to the API for pagination.\n. ",
    "spapas": "@sandys I've written a beginner's tutorial for how to use a fixed-data-table to load paginated data with ajax @ http://spapas.github.io/2015/12/22/ajax-with-react-fixed-data-table/ -- I haven't implemented real pagination on the client side, instead, the pages are loaded when needed from the server.\n. @sandys I've written a beginner's tutorial for how to use a fixed-data-table to load paginated data with ajax @ http://spapas.github.io/2015/12/22/ajax-with-react-fixed-data-table/ -- I haven't implemented real pagination on the client side, instead, the pages are loaded when needed from the server.\n. ",
    "bizmurr": "Perhaps a search example?\n. Perhaps a search example?\n. ",
    "galmerco": "Hello,\n\nI'm start using reactjs and I was looking for datatable examples and this is Great examples, but I'd like an example with individual search by column\n\nThanks in advance.\n. Hello,\n\nI'm start using reactjs and I was looking for datatable examples and this is Great examples, but I'd like an example with individual search by column\n\nThanks in advance.\n. ",
    "HectorWon": "Hi pieterv,\n\nThanks for these useful examples.\n\nI am playing the table with large number of columns, so I tried to add a dropdown list of column names, which can allow the user to choose certain column and automatically scroll the table to that column. I tried properties scrollLeft and scrollToColumn, but didn't get the effect I want. I wonder if these two properties are useful to do that.\n\nThanks in advance.\n. Thank you, @ehzhang . The example is great, and it solved my problem.\n\nBefore I saw you example, I tried to set scrollToColumn={20} as an initial value in the rendering function. And it didn't work, while scrollLeft={200} works. So scrollLeft works at the first rendering, while scrollToColumn works after first state change?\n. ![screen shot 2015-06-08 at 3 14 57 pm](https://cloud.githubusercontent.com/assets/8444357/8043059/65535638-0df1-11e5-95a1-00e35c83230d.png)\n. @ehzhang , thanks for reply\n. Hi pieterv,\n\nThanks for these useful examples.\n\nI am playing the table with large number of columns, so I tried to add a dropdown list of column names, which can allow the user to choose certain column and automatically scroll the table to that column. I tried properties scrollLeft and scrollToColumn, but didn't get the effect I want. I wonder if these two properties are useful to do that.\n\nThanks in advance.\n. Thank you, @ehzhang . The example is great, and it solved my problem.\n\nBefore I saw you example, I tried to set scrollToColumn={20} as an initial value in the rendering function. And it didn't work, while scrollLeft={200} works. So scrollLeft works at the first rendering, while scrollToColumn works after first state change?\n. ![screen shot 2015-06-08 at 3 14 57 pm](https://cloud.githubusercontent.com/assets/8444357/8043059/65535638-0df1-11e5-95a1-00e35c83230d.png)\n. @ehzhang , thanks for reply\n. ",
    "toppetoppe": "Does anyone have a example of filter AND sort working together?\n. Does anyone have a example of filter AND sort working together?\n. ",
    "qzqzzz": "Here's an extended FixedDataTable that provides a few things like lazy loading, multiple selection, column sorting, auto width, percentage column widths, filtering, loading progress, \"no data\" custom message https://github.com/cosminnicula/react-ui-components\n. @raaka1 check out this issue #67: you'll find a filtering example there (http://jsbin.com/temufa/14/edit)\n. Wonderful work. Thanks!\n. @pieterv until this will be ready inside FixedDataTable, I'm wondering if it would be feasible to create a wrapper and hack with jQuery the logic for Keyboard / Screen-Reader Accessibility?\n\nFor Keyboard, I was thinking to subscribe to the keypress/keydown events at a top level of the DataTable and calculate the position to be focused next based on the data that populates the DataTable, which is after all a matrix. The tricky part here is when you reach the top / bottom of the visible rows and you'll have to handle also scrolling. Also, since the DOM nodes are \"recycled\", I don't know how the focus would behave.\n\nFor Screen-Reader it's even trickier:\n- rows: I'll have first to get the \"visible\" rows, which are the ones that have the \"top\" position < the height of the table. As soon as the row starts to becomes visible (top < height), I should add proper aria- and role attributes\n- header: since the header is more predictable than the rows in the DOM, I should be able to manipulate aria- and role attributes more easily\n\nWhat do you think, apart from the fact that is a veritable hack? Do you think this approach is reasonable, or maybe one should focus on providing PRs?\n. Can you also add #129 Keyboard / Screen-Reader Accessibility to this? :) Thanks!\n. @pieterv, @wlis, @hedgerwang can you please help me with this one? Thanks!\n. I've identified the problem and the solution is very simple. Inside `fdtwebpackclient` I've changed:\n\n```\nimport MyDataTable from './../lib/my-components.js';\n...\n<MyDataTable></MyDataTable>\n```\n\nwith:\n\n```\nimport MyComponents from './../lib/my-components.js';\n...\n<MyComponents.MyDataTable></MyComponents.MyDataTable>\n```\n. +1\n. Any chance to see #129 Keyboard / Screen-Reader Accessibility in this release?\n. Guys, any news on accessibility? I was wondering if there are any plans to have it in the near future.\n. Great work! Thanks!\n. Trying to imagine a possible implementation for this feature. Let's start with the API:\n\n`FixedDataTableNew.react.js` will have a new prop called `colSpanGetter: PropTypes.func`\n\nThe signature of the function will be: `function colSpanGetter(rowIndex: number): Array<number> { ... }`\nThe convention would be the following: if the function returns an empty array (default), then `colSpanGetter` is not taken into account; if the return value is an array which is not empty, then the cells will span accordingly.\n\nLet's see below how the API could look like:\n\n```\nlet dataSource = [{\n  aa: \"row0-col0\",\n  bb: \"row0-col1\",\n  cc: \"row0-col2\",\n  dd: \"row0-col3\",\n  ee: \"row0-col4\",\n  ff: \"row0-col5\",\n  gg: \"row0-col6\"\n}, {\n  aa: \"row1-col0-1\",\n  cc: \"row1-col2-4\",\n  ff: \"row2-col5-6\"\n}, {\n  aa: \"row2-col0\",\n  bb: \"row2-col1\",\n  cc: \"row2-col2\",\n  dd: \"row2-col3\",\n  ee: \"row2-col4\",\n  ff: \"row2-col5\",\n  gg: \"row2-col6\"\n}];\n\ngetCellData(rowIndex, colIndex) {\n\n  let colNames = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff'];\n\n  return this.dataSource[props.rowIndex][colNames[colIndex]];\n}\n\n<Table colSpanGetter={rowIndex => { if (rowIndex === 1) return [2, 3, 2]}} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 0)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 1)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 2)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 3)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 4)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 5)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 6)}</Cell>)} ... />\n<Table />\n```\n\nAlso, let's see how the implementation could look like:\n1. Inside the `render()` function of the `FixedDataTableBufferedRows.react.js`, the `colSpan` value could be extracted and passed down all the way to `FixedDataTableCellGroup.react.js` (going through `FixedDataTableBufferedRows.react.js` and `FixedDataTableRow.react.js`)\n2. Inside the `render()` function of the `FixedDataTableCellGroup.react.js`, there will be an if statement that checks `colSpan` parameter:\n\n```\nif(props.colSpan.length === 0) {\n  //keep the same logic as is\n  for (var i = 0, j = columns.length; i < j; i++) {\n    ...\n  }\n} else {\n  let colSpanIndex = 0, cellIndex = 0, columnProps;\n\n  //the number of rendered cells = the number of items inside the colSpan array\n  for (var i = 0, j = props.colSpan.length; i < j; i++) {\n    //cell_0, cell_2, cell_5\n    key = 'cell_' + cellIndex;\n\n    //columns[0], columns[2], columns[5]\n    columnProps = columns[cellIndex].props;\n\n    cells[i] = this._renderCell(\n      columnProps,\n      key,\n      ...\n    )\n\n    //set the next index according to the colSpan value\n    cellIndex += props.colSpan[colSpanIndex++];\n  }\n}\n```\n\n@ehzhang am I too far from what this should look like?\n. @Bazze I gave up the idea since some other things got prioritized. Nevertheless, it would be interesting to see this feature in a future release of `FixedDataTable`\n. @westoque check this out http://goo.gl/B4ogaz\n. @AlesJiranek here's an example with a wrapper on top of FixedDataTable that uses Flux https://github.com/cosminnicula/react-ui-components. This extended DataTable provides a few things like lazy loading, multiple selection, column sorting, auto width, percentage column widths, filtering, loading progress, \"no data\" custom message. Careful with the Store, Action Creators and Dispatcher which are all singletons. Just clone the repo and run the following command: `npm install && npm run build && npm run examples`\n. Any chance to add accessibility for this release? :)\n. Can you please provide a code sample for this? Thanks.\n. @Lastalas I've used FixedDataTable with Webpack without a RequireJS config. Take a look here and see if it helps you https://github.com/cosminnicula/react-ui-components\n. Here's an extended FixedDataTable that provides a few things like lazy loading, multiple selection, column sorting, auto width, percentage column widths, filtering, loading progress, \"no data\" custom message https://github.com/cosminnicula/react-ui-components\n. @raaka1 check out this issue #67: you'll find a filtering example there (http://jsbin.com/temufa/14/edit)\n. Wonderful work. Thanks!\n. @pieterv until this will be ready inside FixedDataTable, I'm wondering if it would be feasible to create a wrapper and hack with jQuery the logic for Keyboard / Screen-Reader Accessibility?\n\nFor Keyboard, I was thinking to subscribe to the keypress/keydown events at a top level of the DataTable and calculate the position to be focused next based on the data that populates the DataTable, which is after all a matrix. The tricky part here is when you reach the top / bottom of the visible rows and you'll have to handle also scrolling. Also, since the DOM nodes are \"recycled\", I don't know how the focus would behave.\n\nFor Screen-Reader it's even trickier:\n- rows: I'll have first to get the \"visible\" rows, which are the ones that have the \"top\" position < the height of the table. As soon as the row starts to becomes visible (top < height), I should add proper aria- and role attributes\n- header: since the header is more predictable than the rows in the DOM, I should be able to manipulate aria- and role attributes more easily\n\nWhat do you think, apart from the fact that is a veritable hack? Do you think this approach is reasonable, or maybe one should focus on providing PRs?\n. Can you also add #129 Keyboard / Screen-Reader Accessibility to this? :) Thanks!\n. @pieterv, @wlis, @hedgerwang can you please help me with this one? Thanks!\n. I've identified the problem and the solution is very simple. Inside `fdtwebpackclient` I've changed:\n\n```\nimport MyDataTable from './../lib/my-components.js';\n...\n<MyDataTable></MyDataTable>\n```\n\nwith:\n\n```\nimport MyComponents from './../lib/my-components.js';\n...\n<MyComponents.MyDataTable></MyComponents.MyDataTable>\n```\n. +1\n. Any chance to see #129 Keyboard / Screen-Reader Accessibility in this release?\n. Guys, any news on accessibility? I was wondering if there are any plans to have it in the near future.\n. Great work! Thanks!\n. Trying to imagine a possible implementation for this feature. Let's start with the API:\n\n`FixedDataTableNew.react.js` will have a new prop called `colSpanGetter: PropTypes.func`\n\nThe signature of the function will be: `function colSpanGetter(rowIndex: number): Array<number> { ... }`\nThe convention would be the following: if the function returns an empty array (default), then `colSpanGetter` is not taken into account; if the return value is an array which is not empty, then the cells will span accordingly.\n\nLet's see below how the API could look like:\n\n```\nlet dataSource = [{\n  aa: \"row0-col0\",\n  bb: \"row0-col1\",\n  cc: \"row0-col2\",\n  dd: \"row0-col3\",\n  ee: \"row0-col4\",\n  ff: \"row0-col5\",\n  gg: \"row0-col6\"\n}, {\n  aa: \"row1-col0-1\",\n  cc: \"row1-col2-4\",\n  ff: \"row2-col5-6\"\n}, {\n  aa: \"row2-col0\",\n  bb: \"row2-col1\",\n  cc: \"row2-col2\",\n  dd: \"row2-col3\",\n  ee: \"row2-col4\",\n  ff: \"row2-col5\",\n  gg: \"row2-col6\"\n}];\n\ngetCellData(rowIndex, colIndex) {\n\n  let colNames = ['aa', 'bb', 'cc', 'dd', 'ee', 'ff'];\n\n  return this.dataSource[props.rowIndex][colNames[colIndex]];\n}\n\n<Table colSpanGetter={rowIndex => { if (rowIndex === 1) return [2, 3, 2]}} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 0)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 1)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 2)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 3)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 4)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 5)}</Cell>)} ... />\n  <Column cell={props => (<Cell {...props}>{getCellData(props.rowIndex, 6)}</Cell>)} ... />\n<Table />\n```\n\nAlso, let's see how the implementation could look like:\n1. Inside the `render()` function of the `FixedDataTableBufferedRows.react.js`, the `colSpan` value could be extracted and passed down all the way to `FixedDataTableCellGroup.react.js` (going through `FixedDataTableBufferedRows.react.js` and `FixedDataTableRow.react.js`)\n2. Inside the `render()` function of the `FixedDataTableCellGroup.react.js`, there will be an if statement that checks `colSpan` parameter:\n\n```\nif(props.colSpan.length === 0) {\n  //keep the same logic as is\n  for (var i = 0, j = columns.length; i < j; i++) {\n    ...\n  }\n} else {\n  let colSpanIndex = 0, cellIndex = 0, columnProps;\n\n  //the number of rendered cells = the number of items inside the colSpan array\n  for (var i = 0, j = props.colSpan.length; i < j; i++) {\n    //cell_0, cell_2, cell_5\n    key = 'cell_' + cellIndex;\n\n    //columns[0], columns[2], columns[5]\n    columnProps = columns[cellIndex].props;\n\n    cells[i] = this._renderCell(\n      columnProps,\n      key,\n      ...\n    )\n\n    //set the next index according to the colSpan value\n    cellIndex += props.colSpan[colSpanIndex++];\n  }\n}\n```\n\n@ehzhang am I too far from what this should look like?\n. @Bazze I gave up the idea since some other things got prioritized. Nevertheless, it would be interesting to see this feature in a future release of `FixedDataTable`\n. @westoque check this out http://goo.gl/B4ogaz\n. @AlesJiranek here's an example with a wrapper on top of FixedDataTable that uses Flux https://github.com/cosminnicula/react-ui-components. This extended DataTable provides a few things like lazy loading, multiple selection, column sorting, auto width, percentage column widths, filtering, loading progress, \"no data\" custom message. Careful with the Store, Action Creators and Dispatcher which are all singletons. Just clone the repo and run the following command: `npm install && npm run build && npm run examples`\n. Any chance to add accessibility for this release? :)\n. Can you please provide a code sample for this? Thanks.\n. @Lastalas I've used FixedDataTable with Webpack without a RequireJS config. Take a look here and see if it helps you https://github.com/cosminnicula/react-ui-components\n. ",
    "jgarcia99": "@ehzhang @pieterv I used both your examples to use for my sorting by I have a custom Row component how should I implement this? Below is my code I feel the problem is that im passing rows as null and im returning my row component after mapping the orders\n. ``` javascript\nvar SortTypes = {\n    ASC: 'ASC',\n    DESC: 'DESC'\n};\n\nvar Table = React.createClass({\n\n    propTypes: {\n        orders: React.PropTypes.arrayOf(React.PropTypes.object).isRequired\n    },\n\n    getDefaultProps: function() {\n        return {\n            orders: []\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            rows: null,\n            sortBy: null,\n            sortDir: null\n        };\n    },\n\n    rowGetter: function() {\n        return this.state.rows[rowIndex];\n    },\n\n    sortRowsBy: function(cellDataKey) {\n        var sortDir = this.state.sortDir;\n        var sortBy = cellDataKey;\n        if (sortBy === this.state.sortDir) {\n            sortDir = this.state.sortDir === SortTypes.ASC\n                ? SortTypes.DESC\n                : SortTypes.ASC;\n        } else {\n            sortDir = SortTypes.DESC;\n        }\n\n        var rows = this.state.rows.slice();\n        rows.sort((a, b) => {\n            var sortVal = 0;\n            if (a[sortBy] > b[sortBy]) {\n                sortVal = 1;\n            }\n            if (a[sortBy] < b[sortBy]) {\n                sortVal = -1;\n            }\n            if (sortDir === SortTypes.DESC) {\n                sortVal = sortVal * -1;\n            }\n\n            return sortVal;\n        });\n\n        this.setState({\n            rows,\n            sortBy,\n            sortDir\n        });\n    },\n\n    renderHeader: function() {\n        return (\n            <a onClick={this.sortRowsBy.bind(null, cellDataKey)}>{label}</a>\n        );\n    },\n\n    render: function() {\n\n        var orders = '';\n        if (this.props.orders) {\n            orders = this.props.orders.map(function(order, index) {\n                return <Row order={order} />;\n            });\n        }\n\n        var sortDirArrow = '';\n\n        if (this.state.sortDir !== null) {\n            sortDirArrow = this.state.sortDir === SortTypes.DESC\n                ? ' \u2193'\n                : ' \u2191';\n        }\n\n        return (\n            <div>\n                <Controls />\n                <Table headerHeight={50}\n                       height={175}\n                       rowGetter={this.rowGetter}\n                       rowHeight={50}\n                       rowsCount={this.state.rows.length}\n                       width={1360}>\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Date/Time' + (this.state.sortBy === 'status.time' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='status.time' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Name' + (this.state.sortBy === 'member.firstName' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='member.firstName' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Vehicle' + (this.state.sortBy === 'vehicle.make' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='vehicle.make' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Order ID' + (this.state.sortBy === 'orderID' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='orderID' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Type' + (this.state.sortBy === 'type' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='type' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Status' + (this.state.sortBy === 'status.type' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='status.type' />\n                </Table>\n            </div>\n        );\n    },\n```\n. @ehzhang @pieterv I used both your examples to use for my sorting by I have a custom Row component how should I implement this? Below is my code I feel the problem is that im passing rows as null and im returning my row component after mapping the orders\n. ``` javascript\nvar SortTypes = {\n    ASC: 'ASC',\n    DESC: 'DESC'\n};\n\nvar Table = React.createClass({\n\n    propTypes: {\n        orders: React.PropTypes.arrayOf(React.PropTypes.object).isRequired\n    },\n\n    getDefaultProps: function() {\n        return {\n            orders: []\n        };\n    },\n\n    getInitialState: function() {\n        return {\n            rows: null,\n            sortBy: null,\n            sortDir: null\n        };\n    },\n\n    rowGetter: function() {\n        return this.state.rows[rowIndex];\n    },\n\n    sortRowsBy: function(cellDataKey) {\n        var sortDir = this.state.sortDir;\n        var sortBy = cellDataKey;\n        if (sortBy === this.state.sortDir) {\n            sortDir = this.state.sortDir === SortTypes.ASC\n                ? SortTypes.DESC\n                : SortTypes.ASC;\n        } else {\n            sortDir = SortTypes.DESC;\n        }\n\n        var rows = this.state.rows.slice();\n        rows.sort((a, b) => {\n            var sortVal = 0;\n            if (a[sortBy] > b[sortBy]) {\n                sortVal = 1;\n            }\n            if (a[sortBy] < b[sortBy]) {\n                sortVal = -1;\n            }\n            if (sortDir === SortTypes.DESC) {\n                sortVal = sortVal * -1;\n            }\n\n            return sortVal;\n        });\n\n        this.setState({\n            rows,\n            sortBy,\n            sortDir\n        });\n    },\n\n    renderHeader: function() {\n        return (\n            <a onClick={this.sortRowsBy.bind(null, cellDataKey)}>{label}</a>\n        );\n    },\n\n    render: function() {\n\n        var orders = '';\n        if (this.props.orders) {\n            orders = this.props.orders.map(function(order, index) {\n                return <Row order={order} />;\n            });\n        }\n\n        var sortDirArrow = '';\n\n        if (this.state.sortDir !== null) {\n            sortDirArrow = this.state.sortDir === SortTypes.DESC\n                ? ' \u2193'\n                : ' \u2191';\n        }\n\n        return (\n            <div>\n                <Controls />\n                <Table headerHeight={50}\n                       height={175}\n                       rowGetter={this.rowGetter}\n                       rowHeight={50}\n                       rowsCount={this.state.rows.length}\n                       width={1360}>\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Date/Time' + (this.state.sortBy === 'status.time' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='status.time' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Name' + (this.state.sortBy === 'member.firstName' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='member.firstName' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Vehicle' + (this.state.sortBy === 'vehicle.make' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='vehicle.make' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Order ID' + (this.state.sortBy === 'orderID' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='orderID' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Type' + (this.state.sortBy === 'type' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='type' />\n                    <Column headerRenderer={this.renderHeader}\n                            label={'Status' + (this.state.sortBy === 'status.type' ? sortDirArrow : '')}\n                            width={200}\n                            dataKey='status.type' />\n                </Table>\n            </div>\n        );\n    },\n```\n. ",
    "592da": "@muraveill +1\n. Hoping I am not killing here any holy cow, but i think i found more easy way to do that,\nguys, please correct me if I am killing it wrong.\n\n``` js\n  render(){\n    let tableWidth = document.querySelector('.table-container') ? \n    document.querySelector('.table-container').offsetWidth : null\n\n    return (\n        <Table\n          ....\n          width={rowWidth || 800}\n          .....\n   )}\n\n```\n\nseems to be working. \nnote : it will change only when rendering the component - not on window re-size of course.\n. +1\nPlease keep updating this repo !!!\n. @muraveill +1\n. Hoping I am not killing here any holy cow, but i think i found more easy way to do that,\nguys, please correct me if I am killing it wrong.\n\n``` js\n  render(){\n    let tableWidth = document.querySelector('.table-container') ? \n    document.querySelector('.table-container').offsetWidth : null\n\n    return (\n        <Table\n          ....\n          width={rowWidth || 800}\n          .....\n   )}\n\n```\n\nseems to be working. \nnote : it will change only when rendering the component - not on window re-size of course.\n. +1\nPlease keep updating this repo !!!\n. ",
    "igorapa": "@muraveill +1\n. @muraveill +1\n. ",
    "rahul-kamble": "i am not able to access any state data in _sortRowsBy(). please help me.\nthanks.\n. i am not able to access any state data in _sortRowsBy(). please help me.\nthanks.\n. ",
    "fkling": ":+1:  :)\n. :+1:  :)\n. ",
    "mkrn": "@pieterv The container approach sounds pretty neat, it might work for us.\nWe are building a grid based on FixedDataTable that has edit mode  but initial performance is really bad on update in cells because it seem to re-render every cell for some reason, and it takes almost a second(\n\nI've noticed some components in FixedDataTable are PureRender and some are not, including Table.\n\nDo you have any examples out there for editable table? We are currently trying to subscribe every cell to store but it may be too many listeners too. Additionally it breaks the convention to subscribe to store change only in higher-level 'controller' components...\n\nAny hint would be appreciated, thanks! \n. @pieterv The container approach sounds pretty neat, it might work for us.\nWe are building a grid based on FixedDataTable that has edit mode  but initial performance is really bad on update in cells because it seem to re-render every cell for some reason, and it takes almost a second(\n\nI've noticed some components in FixedDataTable are PureRender and some are not, including Table.\n\nDo you have any examples out there for editable table? We are currently trying to subscribe every cell to store but it may be too many listeners too. Additionally it breaks the convention to subscribe to store change only in higher-level 'controller' components...\n\nAny hint would be appreciated, thanks! \n. ",
    "steve-taylor": "> http://jsbin.com/temufa/18/edit\n\nDoesn't work anymore.\n. My edit? I didn't realise this was globally editable. Anyway, thanks for that. It works now.\n\nI landed here because I have the same or similar issue. I'm trying to implement spreadsheet-style editing in a FixedDataTable and came across this issue of the cell renderer not being invoked. I have read @pieterv's explanation and I'm working through a solution. What I'm trying to do is track the coordinates of the cell that is currently being edited and, when that changes, flip between a `div` and an `input`. The approach I'm going to take now is to create a non-singleton store to which the container components subscribe. The container components will be returned by the cell renderer.\n. Yeah, thanks, I don't really need help now that I understand the container concept and how it can be used in my situation. Good luck with your projects. Sounds like you'll need it.\n. > http://jsbin.com/temufa/18/edit\n\nDoesn't work anymore.\n. My edit? I didn't realise this was globally editable. Anyway, thanks for that. It works now.\n\nI landed here because I have the same or similar issue. I'm trying to implement spreadsheet-style editing in a FixedDataTable and came across this issue of the cell renderer not being invoked. I have read @pieterv's explanation and I'm working through a solution. What I'm trying to do is track the coordinates of the cell that is currently being edited and, when that changes, flip between a `div` and an `input`. The approach I'm going to take now is to create a non-singleton store to which the container components subscribe. The container components will be returned by the cell renderer.\n. Yeah, thanks, I don't really need help now that I understand the container concept and how it can be used in my situation. Good luck with your projects. Sounds like you'll need it.\n. ",
    "jasongonzales23": "I don't see how this strategy applies when you are receiving the rows as props. Can you update your example to show how this might work?\n\nCurrently I am trying to get the toggling of a checkbox in a row to render, but can't figure it out. When I toggle, I can update state and see my component where the Table is receive nextProps, but the cell doesn't re-render properly. If I browse away and cause a re-render of the table though my checkboxes render their state accurately.\n\nHere is some of the code\n\n``` javascript\n        <Column\n          align='center'\n          width={60}\n          dataKey={\"isSelected\"}\n          headerRenderer={this.selectAllCheckbox}\n          cellRenderer={this.renderCheckbox}\n        />\n\n  renderCheckbox(cellData, cellDataKey, rowData, rowIndex) {\n    return (\n      <input type=\"checkbox\"\n        onChange={this.toggleItem.bind(this, rowData)}\n        checked={cellData}/>\n    )\n  }\n\n  toggleItem(data) {\n    if (data.isSelected) {\n      this.props.deselectApp(data.id)\n    } else {\n      this.props.selectApp(data.id)\n    }\n  }\n\n```\n\nAt this point, I'd take a hack or a workaround, been banging my head against the wall on this one for most of the day...\n. Interestingly, when I set a breakpoint in the `toggleItem` function, I can see the checkbox stays checked until some point in the event dispatching lifecycle. Is there a way to override that?\n. This discussion in thei issue helped me figure this confusing API out, but a simple example would probably help for the time being.\n. Was your other PR merged? I need a similar implementation and would love to see how you did it.\n. Thanks!\n. Hey, not fully done investigating this, but just a suggestion, why not make the expansion it's own component rather than modifying the FixedDataTableRow file?\n. What's going on with 0.5?? It looks like this release will fix the major issue I am facing!\n. +1\n. +1\n. Update:\n\nI should add that I am using Redux to manage state. But anyway, I am seeing something pretty bizarre here. I now observe that when I click a checkbox, the state is updated as expected AND the render function for my table is called, but the cellRenderer function is NOT called. Why would that be? Is there a way to override this behavior as a temporary workaround?\n. OK, hope I am not getting annoying, but another update: My row getter gets called when I change the checkbox, but not the cellRenderer.\n\nI feel like I am so close...\n. here is a bit of a code sample if it helps at all\n\n``` javascript\n<Column\n    align='center'\n    width={60}\n    dataKey={\"isSelected\"}\n    headerRenderer={this.selectAllCheckbox}\n    cellRenderer={this.renderCheckbox}\n />\n\n  renderCheckbox(cellData, cellDataKey, rowData, rowIndex) {\n    return (\n      <input type=\"checkbox\"\n        onChange={this.toggleItem.bind(this, rowData)}\n        checked={cellData}/>\n    )\n  }\n\n  toggleItem(data) {\n    if (data.isSelected) {\n      this.props.deselectApp(data.id)\n    } else {\n      this.props.selectApp(data.id)\n    }\n  }\n```\n. OK, so issue https://github.com/facebook/fixed-data-table/issues/244 is very similar to mine. If I force clone the row, the change is updated. Ugly!\n. It sounds like you too are forcing a change. Your solution doesn't really work as well for me, in fact force cloning is better in my case.\n. There is no built in pagination. That said, are you trying to paginate on the client only? Or are you fetching pages from a remote server?\n. I don't see how this strategy applies when you are receiving the rows as props. Can you update your example to show how this might work?\n\nCurrently I am trying to get the toggling of a checkbox in a row to render, but can't figure it out. When I toggle, I can update state and see my component where the Table is receive nextProps, but the cell doesn't re-render properly. If I browse away and cause a re-render of the table though my checkboxes render their state accurately.\n\nHere is some of the code\n\n``` javascript\n        <Column\n          align='center'\n          width={60}\n          dataKey={\"isSelected\"}\n          headerRenderer={this.selectAllCheckbox}\n          cellRenderer={this.renderCheckbox}\n        />\n\n  renderCheckbox(cellData, cellDataKey, rowData, rowIndex) {\n    return (\n      <input type=\"checkbox\"\n        onChange={this.toggleItem.bind(this, rowData)}\n        checked={cellData}/>\n    )\n  }\n\n  toggleItem(data) {\n    if (data.isSelected) {\n      this.props.deselectApp(data.id)\n    } else {\n      this.props.selectApp(data.id)\n    }\n  }\n\n```\n\nAt this point, I'd take a hack or a workaround, been banging my head against the wall on this one for most of the day...\n. Interestingly, when I set a breakpoint in the `toggleItem` function, I can see the checkbox stays checked until some point in the event dispatching lifecycle. Is there a way to override that?\n. This discussion in thei issue helped me figure this confusing API out, but a simple example would probably help for the time being.\n. Was your other PR merged? I need a similar implementation and would love to see how you did it.\n. Thanks!\n. Hey, not fully done investigating this, but just a suggestion, why not make the expansion it's own component rather than modifying the FixedDataTableRow file?\n. What's going on with 0.5?? It looks like this release will fix the major issue I am facing!\n. +1\n. +1\n. Update:\n\nI should add that I am using Redux to manage state. But anyway, I am seeing something pretty bizarre here. I now observe that when I click a checkbox, the state is updated as expected AND the render function for my table is called, but the cellRenderer function is NOT called. Why would that be? Is there a way to override this behavior as a temporary workaround?\n. OK, hope I am not getting annoying, but another update: My row getter gets called when I change the checkbox, but not the cellRenderer.\n\nI feel like I am so close...\n. here is a bit of a code sample if it helps at all\n\n``` javascript\n<Column\n    align='center'\n    width={60}\n    dataKey={\"isSelected\"}\n    headerRenderer={this.selectAllCheckbox}\n    cellRenderer={this.renderCheckbox}\n />\n\n  renderCheckbox(cellData, cellDataKey, rowData, rowIndex) {\n    return (\n      <input type=\"checkbox\"\n        onChange={this.toggleItem.bind(this, rowData)}\n        checked={cellData}/>\n    )\n  }\n\n  toggleItem(data) {\n    if (data.isSelected) {\n      this.props.deselectApp(data.id)\n    } else {\n      this.props.selectApp(data.id)\n    }\n  }\n```\n. OK, so issue https://github.com/facebook/fixed-data-table/issues/244 is very similar to mine. If I force clone the row, the change is updated. Ugly!\n. It sounds like you too are forcing a change. Your solution doesn't really work as well for me, in fact force cloning is better in my case.\n. There is no built in pagination. That said, are you trying to paginate on the client only? Or are you fetching pages from a remote server?\n. ",
    "Gongreg": "I found a workaround (since I didn't want to use stores or something else for single table), I had to add possibility to edit some row cells. So on button click I just changed that row data into new object with same values:\n\n``` js\n\n  onEditClick(id, rowIndex) {\n\n        //mock data change so row rerenders itself\n        let filteredData = this.state.filteredData;\n        filteredData[rowIndex] = {...filteredData[rowIndex]};\n\n        this.setState({\n            editingId: id,\n            filteredData,\n        });\n    },\n\n```\n. I found a workaround (since I didn't want to use stores or something else for single table), I had to add possibility to edit some row cells. So on button click I just changed that row data into new object with same values:\n\n``` js\n\n  onEditClick(id, rowIndex) {\n\n        //mock data change so row rerenders itself\n        let filteredData = this.state.filteredData;\n        filteredData[rowIndex] = {...filteredData[rowIndex]};\n\n        this.setState({\n            editingId: id,\n            filteredData,\n        });\n    },\n\n```\n. ",
    "rovolution": "thank you for the example @pieterv! I see that you are using the `label` property to get the arrow icon, which makes sense.\n. cool yea just figured out how `headerDataGetter` works and that addressed my issue. thanks!\n. thank you for the example @pieterv! I see that you are using the `label` property to get the arrow icon, which makes sense.\n. cool yea just figured out how `headerDataGetter` works and that addressed my issue. thanks!\n. ",
    "Andreyco": "@rovolution  Could you please provide an example how you solved the issue?\n\nI implemented custom `headerDataGetter` which return plain object. No matter what, header cell is not re-rendered, until one special case:\n\n``` jsx\n// Not re-rendered\ncolProps.headerRenderer = this.renderHeaderSortingControls;\n\n// Re-rendered\ncolProps.headerRenderer = () => {\n    return this.renderHeaderSortingControls.apply(this, arguments);\n};\n```\n. You can specify `cellClassName` property on Column.\n\n``` js\nvar columns = [\n  // ...\n  {\n    label: 'Buy',\n    cellClassName: 'buy-column',\n    // ....\n  },\n  // ...\n];\n```\n\nThen, you can query this header cell with simple selector, in this case with `.public_fixedDataTable_header .buy-column`\n. Very same issue over here https://github.com/facebook/fixed-data-table/issues/71#issuecomment-92318922\n. Hi guys. I separated stylesheets.\n\nVisual styling is now in separate file. There is no problem with borders. Default style applies transparent border to everything having border defined.\n\nI had no additional time to dig into Webpack. Due to this fact `build-dist` script generates two JS files (regular & minified) for theme, which are completely redundant. I'd like to ask you for help with configuring build script here.\n. Lovely!\n. @tonyxiao honestly, table does not have to contain borders in every case. Default style should be as clean as possible to prevent _any_ style overrides.\n. Use [this npm module](https://www.npmjs.com/package/object-assign), or inluce [this polyfill](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill)\n. I will try to review stylesheets before @jbonta so that he catches up on \"final\" PR from my side. Wait a day or two please :)\n. I think renaming should happen in `src/theme/default.css` and in files located at `src/css/` (where needed), or are you going to add `public_` prefixed classes to markup?\n\nOriginally I submitted this PR in order to split style to 2 files.\n- main file: required to get FDT working (positioning, border widths, ...)\n- theming file: visual styling (border colors, backgrounds, ...)\n  Having this file structure devs could just not include theming file and introduce their own theming file without using `!important` to override styles (in some cases).\n. Closing for now, since v 0.4.0 handles this differently. Will investigate whether it's needed anymore.\n. Is it possible to allow composition on Columns?\nSomething like this\n\n``` jsx\n<Table>\n  { makeColumnDraggable(<Column />) }\n  { makeColumnDraggable(<Column />) }\n  { makeColumnDraggable(<Column />) }\n  { makeColumnDraggable(<Column />) }\n</Table>\n```\n. Maybe community should take responsibility for this.\nAt least, we find out whether FB is willing to review & merge potential fixes/addons\n. @rovolution  Could you please provide an example how you solved the issue?\n\nI implemented custom `headerDataGetter` which return plain object. No matter what, header cell is not re-rendered, until one special case:\n\n``` jsx\n// Not re-rendered\ncolProps.headerRenderer = this.renderHeaderSortingControls;\n\n// Re-rendered\ncolProps.headerRenderer = () => {\n    return this.renderHeaderSortingControls.apply(this, arguments);\n};\n```\n. You can specify `cellClassName` property on Column.\n\n``` js\nvar columns = [\n  // ...\n  {\n    label: 'Buy',\n    cellClassName: 'buy-column',\n    // ....\n  },\n  // ...\n];\n```\n\nThen, you can query this header cell with simple selector, in this case with `.public_fixedDataTable_header .buy-column`\n. Very same issue over here https://github.com/facebook/fixed-data-table/issues/71#issuecomment-92318922\n. Hi guys. I separated stylesheets.\n\nVisual styling is now in separate file. There is no problem with borders. Default style applies transparent border to everything having border defined.\n\nI had no additional time to dig into Webpack. Due to this fact `build-dist` script generates two JS files (regular & minified) for theme, which are completely redundant. I'd like to ask you for help with configuring build script here.\n. Lovely!\n. @tonyxiao honestly, table does not have to contain borders in every case. Default style should be as clean as possible to prevent _any_ style overrides.\n. Use [this npm module](https://www.npmjs.com/package/object-assign), or inluce [this polyfill](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill)\n. I will try to review stylesheets before @jbonta so that he catches up on \"final\" PR from my side. Wait a day or two please :)\n. I think renaming should happen in `src/theme/default.css` and in files located at `src/css/` (where needed), or are you going to add `public_` prefixed classes to markup?\n\nOriginally I submitted this PR in order to split style to 2 files.\n- main file: required to get FDT working (positioning, border widths, ...)\n- theming file: visual styling (border colors, backgrounds, ...)\n  Having this file structure devs could just not include theming file and introduce their own theming file without using `!important` to override styles (in some cases).\n. Closing for now, since v 0.4.0 handles this differently. Will investigate whether it's needed anymore.\n. Is it possible to allow composition on Columns?\nSomething like this\n\n``` jsx\n<Table>\n  { makeColumnDraggable(<Column />) }\n  { makeColumnDraggable(<Column />) }\n  { makeColumnDraggable(<Column />) }\n  { makeColumnDraggable(<Column />) }\n</Table>\n```\n. Maybe community should take responsibility for this.\nAt least, we find out whether FB is willing to review & merge potential fixes/addons\n. ",
    "vegetableman": "But there are cases I would like to simply add a class to the header cell instead of content. Any suggestions for this use case?\n. But there are cases I would like to simply add a class to the header cell instead of content. Any suggestions for this use case?\n. ",
    "marcneuwirth": "If you define custom components to be rendered with `cellRenderer`, it is not possible to set a `key` prop on that component, because it is not passed through `cloneWithProps`. That means that the table will reuse the same component and just change the `props`. For most circumstances that is great, unless you want to use `state`. \n\nNormally in this situation, I would use a `key` prop so that React would know when to reuse the same component vs create a new one. In this case, things that I expect would happen when a new row is rendered, like `componentWillMount` and `getInitialState`, are never called again because the component is being reused. Using `cloneWithProps` is removing functionality, and without my knowledge, so that looking through the code is the only way to figure out why this isn't working.\n\nWith this change, components created by `cellRenderer` will still behave the same way by default if no `key` is used. This only allows the possibility of passing through a `key` and behaving how you would expect.\n. :beers: \n. If you define custom components to be rendered with `cellRenderer`, it is not possible to set a `key` prop on that component, because it is not passed through `cloneWithProps`. That means that the table will reuse the same component and just change the `props`. For most circumstances that is great, unless you want to use `state`. \n\nNormally in this situation, I would use a `key` prop so that React would know when to reuse the same component vs create a new one. In this case, things that I expect would happen when a new row is rendered, like `componentWillMount` and `getInitialState`, are never called again because the component is being reused. Using `cloneWithProps` is removing functionality, and without my knowledge, so that looking through the code is the only way to figure out why this isn't working.\n\nWith this change, components created by `cellRenderer` will still behave the same way by default if no `key` is used. This only allows the possibility of passing through a `key` and behaving how you would expect.\n. :beers: \n. ",
    "probablyup": "Straight out, you can mention that rendering of `<table>` is blocking, in that the browser will not layout and paint the element until all the inner nodes have been computed. Thus, any `<table>` of >~100 rows will suffer from jank any time the whole object is modified and layout must be recomputed.\n. Straight out, you can mention that rendering of `<table>` is blocking, in that the browser will not layout and paint the element until all the inner nodes have been computed. Thus, any `<table>` of >~100 rows will suffer from jank any time the whole object is modified and layout must be recomputed.\n. ",
    "thellimist": "how is it currently?\n. +1\n. how is it currently?\n. +1\n. ",
    "hinathan": "I have the same issue. Workaround I've been using is\n\n```\n dataKey=\"bogus\"\n```\n\nand then \n\n``` javascript\n\n  _otherColumnRender: function(cellValue, cellKey, rowData) {\n    var values = rowData.values;\n   ...\n  }\n```\n. I have the same issue. Workaround I've been using is\n\n```\n dataKey=\"bogus\"\n```\n\nand then \n\n``` javascript\n\n  _otherColumnRender: function(cellValue, cellKey, rowData) {\n    var values = rowData.values;\n   ...\n  }\n```\n. ",
    "jketcham": "Thanks for the workaround @hinathan, I was also running in to this.\n. Also looking forward to tests!\n. I've gotten this error before too when updating either the `width` or `height` props on a Table.  Using React 0.14.3 and FixedDataTable 0.6.0.\nDoes there need to be a change to Fixed Data Table to handle updating styles without mutating the same style prop?\n. Thanks for the workaround @hinathan, I was also running in to this.\n. Also looking forward to tests!\n. I've gotten this error before too when updating either the `width` or `height` props on a Table.  Using React 0.14.3 and FixedDataTable 0.6.0.\nDoes there need to be a change to Fixed Data Table to handle updating styles without mutating the same style prop?\n. ",
    "angularsen": "Bumping this, as it is still a problem.\n. I would note that my current workaround is using jQuery:\n\n```\n// In constructor\nthis._onRowClick = (e) => {\n  $('.public_Scrollbar_main').focus();\n}\n\n// In render()\n<Table onRowClick={this._onRowClick} />\n```\n\nThis seems to work, but I'm sure there are better ways to achieve this.\n. Bumping this, as it is still a problem.\n. I would note that my current workaround is using jQuery:\n\n```\n// In constructor\nthis._onRowClick = (e) => {\n  $('.public_Scrollbar_main').focus();\n}\n\n// In render()\n<Table onRowClick={this._onRowClick} />\n```\n\nThis seems to work, but I'm sure there are better ways to achieve this.\n. ",
    "jnu": "you can use the [--output-library-target](http://webpack.github.io/docs/cli.html#configuration-options) option to webpack to bundle for amd/umd\n. fwiw: https://github.com/facebook/react/issues/3396\n. you can use the [--output-library-target](http://webpack.github.io/docs/cli.html#configuration-options) option to webpack to bundle for amd/umd\n. fwiw: https://github.com/facebook/react/issues/3396\n. ",
    "gaearon": "Sorry, I didn't realize this at first. Thanks!\n. Sure thing.. @kyldvs will review this soon.. Can you get a patch release out?. Thanks!. Sorry, I didn't realize this at first. Thanks!\n. Sure thing.. @kyldvs will review this soon.. Can you get a patch release out?. Thanks!. ",
    "iamdoron": "it can still happen (saw it on 0.6.0) if rowHeightGetter returns non-integers\n. it can still happen (saw it on 0.6.0) if rowHeightGetter returns non-integers\n. ",
    "temnoregg": "I have updated react-tools dependency to 0.13.3 and rebuild and it works for me\n. I have updated react-tools dependency to 0.13.3 and rebuild and it works for me\n. ",
    "benshimmin": "Seconded. I just had to hack around this by drawing a giant invisible DIV rectangle all over the page so that the table, intentionally without scrollbars, didn't make the rest of the page non-scrollable.\n. Seconded. I just had to hack around this by drawing a giant invisible DIV rectangle all over the page so that the table, intentionally without scrollbars, didn't make the rest of the page non-scrollable.\n. ",
    "ifrit": "Any progress on merging this? We're some ES6/babel users eagerly waiting to use it. \n. Excellent news! thanks @pieterv!\n. Yeah, that would be great. I tried pulling it from github directly and running the build scripts but couldn't get it to render properly.\n. Any progress on merging this? We're some ES6/babel users eagerly waiting to use it. \n. Excellent news! thanks @pieterv!\n. Yeah, that would be great. I tried pulling it from github directly and running the build scripts but couldn't get it to render properly.\n. ",
    "JedWatson": "@pieterv glad to hear it! sorry I missed the first notification - let me know if you're still having issues, I've been working to try and resolve the two-babels problem (and a couple of others) recently.\n. @pieterv glad to hear it! sorry I missed the first notification - let me know if you're still having issues, I've been working to try and resolve the two-babels problem (and a couple of others) recently.\n. ",
    "zackify": "Same, I need this!\n. Same, I need this!\n. ",
    "hipertracker": "You forgot to rebuild dist/ based on new UMD format.\n\nWhy webpack.config has \n\n```\n  externals: {\n    react: 'React'\n  },\n```\n\nThe standard convention in AMD is using lowercase ('react', not 'React') (and it is required by other libs, eg. `requirejs-babel`). Because of that, I have to [import React twice](https://github.com/hipertracker/react-embed/blob/master/requirejs.config.js#L9-L10)  Any suggestions?\n. @pieterv now all works like a charm :) I only needed to rebuild dist/*\n. You forgot to rebuild dist/ based on new UMD format.\n\nWhy webpack.config has \n\n```\n  externals: {\n    react: 'React'\n  },\n```\n\nThe standard convention in AMD is using lowercase ('react', not 'React') (and it is required by other libs, eg. `requirejs-babel`). Because of that, I have to [import React twice](https://github.com/hipertracker/react-embed/blob/master/requirejs.config.js#L9-L10)  Any suggestions?\n. @pieterv now all works like a charm :) I only needed to rebuild dist/*\n. ",
    "raaka1": "Hi is possible to query ?  through the table ?\n. Hi is possible to query ?  through the table ?\n. ",
    "difelice": "Yes, that would do it. Thanks.\n. Sure thing.\n. Moved to a new PR https://github.com/facebook/fixed-data-table/pull/160\n. @wlis PR https://github.com/facebook/fixed-data-table/pull/160 should be ok to merge.\n\nThanks for adding this feature!\n. Thank you so much!\n. Moved to https://github.com/facebook/fixed-data-table/pull/160 without conflicts\n. Moved to https://github.com/facebook/fixed-data-table/pull/199\n. @luin you probably have to handle it at the cellRenderer level\n. This must be ported to the new API.\n. I reopened the PR, the callback is at the _Row_ level and seems not to be affected by the new API (Cell, etc.). However this will soon be part of a Row component API on the roadmap.\n\nI also have a one-commit branch.\n\nThanks.\n. Moved to: https://github.com/facebook/fixed-data-table/pull/321\n. Yes, that would do it. Thanks.\n. Sure thing.\n. Moved to a new PR https://github.com/facebook/fixed-data-table/pull/160\n. @wlis PR https://github.com/facebook/fixed-data-table/pull/160 should be ok to merge.\n\nThanks for adding this feature!\n. Thank you so much!\n. Moved to https://github.com/facebook/fixed-data-table/pull/160 without conflicts\n. Moved to https://github.com/facebook/fixed-data-table/pull/199\n. @luin you probably have to handle it at the cellRenderer level\n. This must be ported to the new API.\n. I reopened the PR, the callback is at the _Row_ level and seems not to be affected by the new API (Cell, etc.). However this will soon be part of a Row component API on the roadmap.\n\nI also have a one-commit branch.\n\nThanks.\n. Moved to: https://github.com/facebook/fixed-data-table/pull/321\n. ",
    "puzzfuzz": "+1 as well. I've got a dynamic list of columns where I need to have the dataKey be an index, but I won't have access to the label. I'd like to show a \"sorted ASC v. DESC\" treatment on the header and do this in `headerRenderer`, however that doesn't get called if the header data doesn't change. `headerDataGetter` getting the column props in the signature would solve this nicely. \n. +1 These changes look great. I've run into a lot of the same issues others have mentioned around updating cell or header contents (sorting columns, adjusting rendered date-range for tabular data, etc.) Any update on when we can expect to see 0.5 shipping? \n. I ran into a similar issue w/ the column headers; they would only call the `headerRenderer` function if the text of the `label` attribute actually changed. I wanted to re-render the header when it was sorted. I was able to achieve this by embedding the sorted bit into the label directly using a pipe separator, then decoding it in the render, eg: `\"User Name|user_first_name|ASC\"`. This would cause a change in the label from the previous state, kicking off the `renderHeader` function. \n. +1 as well. I've got a dynamic list of columns where I need to have the dataKey be an index, but I won't have access to the label. I'd like to show a \"sorted ASC v. DESC\" treatment on the header and do this in `headerRenderer`, however that doesn't get called if the header data doesn't change. `headerDataGetter` getting the column props in the signature would solve this nicely. \n. +1 These changes look great. I've run into a lot of the same issues others have mentioned around updating cell or header contents (sorting columns, adjusting rendered date-range for tabular data, etc.) Any update on when we can expect to see 0.5 shipping? \n. I ran into a similar issue w/ the column headers; they would only call the `headerRenderer` function if the text of the `label` attribute actually changed. I wanted to re-render the header when it was sorted. I was able to achieve this by embedding the sorted bit into the label directly using a pipe separator, then decoding it in the render, eg: `\"User Name|user_first_name|ASC\"`. This would cause a change in the label from the previous state, kicking off the `renderHeader` function. \n. ",
    "nottoseethesun": "Resolved.\n. Resolved.\n. ",
    "jbonta": "Yeah, this is exactly what we're hoping for. I think the main thing to be careful of here is our dependency on border widths for computing all the dimensions. A logical first step might be to simplify everything except borders, maybe just using `border-color: transparent` if we have to. Once we are rolling with this separation (default + theme), we can maybe kill some additional border logic or make better use of `box-sizing: border-box;`\n. @egauci - Unfortunately using a real `table` proved to be all but impossible in our first attempts to make this UI with fixed columns. Accessibility is high on our list of things we'd like to add. Fortunately, with ARIA, we expect to be able to provide pretty comprehensive hints that the data is tabular and columnar, etc. In our next release, we're hoping to re-think source ordering to make this even better for SEO and assistive readers. In the meantime, we always welcome patches to make this project better!\n. I think it's fine as-is in a single theme stylesheet. Will wait for the '.public/' prefixing from @Andreyco . Thanks!\n. yeah, I think this makes sense. Does the header's shadow still cover the scrollbar? Do you have a screenshot? cc @wlis\n. Yeah, this is exactly what we're hoping for. I think the main thing to be careful of here is our dependency on border widths for computing all the dimensions. A logical first step might be to simplify everything except borders, maybe just using `border-color: transparent` if we have to. Once we are rolling with this separation (default + theme), we can maybe kill some additional border logic or make better use of `box-sizing: border-box;`\n. @egauci - Unfortunately using a real `table` proved to be all but impossible in our first attempts to make this UI with fixed columns. Accessibility is high on our list of things we'd like to add. Fortunately, with ARIA, we expect to be able to provide pretty comprehensive hints that the data is tabular and columnar, etc. In our next release, we're hoping to re-think source ordering to make this even better for SEO and assistive readers. In the meantime, we always welcome patches to make this project better!\n. I think it's fine as-is in a single theme stylesheet. Will wait for the '.public/' prefixing from @Andreyco . Thanks!\n. yeah, I think this makes sense. Does the header's shadow still cover the scrollbar? Do you have a screenshot? cc @wlis\n. ",
    "tonyxiao": "Even in default setting fixed-data-table still includes borders. \n\n![image](https://cloud.githubusercontent.com/assets/696842/18812069/83e5eede-827c-11e6-8b3e-ad416cd989ed.png)\n\nAny reason against removing border-style from fixed-data-tables-base? https://github.com/facebook/fixed-data-table/blob/0c8a7d1317077e788eae619a245bd77b09c0bf1c/src/css/layout/fixedDataTableLayout.css#L13-L14\n. Even in default setting fixed-data-table still includes borders. \n\n![image](https://cloud.githubusercontent.com/assets/696842/18812069/83e5eede-827c-11e6-8b3e-ad416cd989ed.png)\n\nAny reason against removing border-style from fixed-data-tables-base? https://github.com/facebook/fixed-data-table/blob/0c8a7d1317077e788eae619a245bd77b09c0bf1c/src/css/layout/fixedDataTableLayout.css#L13-L14\n. ",
    "kursion": "The bower.json file will be needed. If the package doesn't respect the standard of bower it will not be possible to guess what is the \"entry point\" or \"main\" file.\n. I'm not 100% convinced by this article. Even if it has some good arguments, the usability and the simplicity to manage small to big projects is pretty strong with bower. It is pretty stable and offer decent tools (integrated watcher, auto-reload, cache compilation, map files, ...). You'll need a lot of tools to imitate bower.\n. Well it seems that you didn't tested it in depth. It has all the mentioned tools (and more), and I'm using them everyday...\n\nhttp://brunch.io/compare.html\n\nAnyway doesn't seem to be the right place to battle on that topic. Wepack with NPM is great too, but bower is far from being useless and bad ;)\n. The bower.json file will be needed. If the package doesn't respect the standard of bower it will not be possible to guess what is the \"entry point\" or \"main\" file.\n. I'm not 100% convinced by this article. Even if it has some good arguments, the usability and the simplicity to manage small to big projects is pretty strong with bower. It is pretty stable and offer decent tools (integrated watcher, auto-reload, cache compilation, map files, ...). You'll need a lot of tools to imitate bower.\n. Well it seems that you didn't tested it in depth. It has all the mentioned tools (and more), and I'm using them everyday...\n\nhttp://brunch.io/compare.html\n\nAnyway doesn't seem to be the right place to battle on that topic. Wepack with NPM is great too, but bower is far from being useless and bad ;)\n. ",
    "DanielMiddleton": "Oh, I see. That example is great, that's what I needed. Thanks\n. Oh, I see. That example is great, that's what I needed. Thanks\n. ",
    "eriknyk": "is there another way to implement infiniteScroll?\nthe @pieterv is a good impl. still it seems it is not enough, can we attach some callback to the the onScroll event or something else?\n. excuse me @jardakotesovec do you have some examples of Scrollbar implementations?\nI'm trying to implement a infiniteScroll table, but still no luck,..\n\nBest Regards.\n. +1 \nI'm  using v0.4.7\n\nand I getting this npm error\n\n```\nnpm ERR! peerinvalid The package react@0.14.0-rc1 does not satisfy its siblings' peerDependencies requirements!\nnpm ERR! peerinvalid Peer fixed-data-table@0.4.7 wants react@>=0.13.0 <0.15.0 || ^0.14.0-beta3\n```\n. Thank you! https://github.com/facebook/fixed-data-table/releases/tag/v0.5.0\n. something similar here\n. yeah, thank you @ripitrust, I understand the idea, but my only question is how to capture the scrolldown event to fech more (call the async action) data from the server.\n. I've tried to found an example for this, and after wait a lot of time without answers I decided to make and example to implement Infinite scroll datatable, maybe we can discuss with this example, as starting point.\n(Comments, suggestion, pull requests are welcome!)\n\nhttps://github.com/eriknyk/fixed-datatable-infinite-scroll\n\nBest Regards.  \n. is there another way to implement infiniteScroll?\nthe @pieterv is a good impl. still it seems it is not enough, can we attach some callback to the the onScroll event or something else?\n. excuse me @jardakotesovec do you have some examples of Scrollbar implementations?\nI'm trying to implement a infiniteScroll table, but still no luck,..\n\nBest Regards.\n. +1 \nI'm  using v0.4.7\n\nand I getting this npm error\n\n```\nnpm ERR! peerinvalid The package react@0.14.0-rc1 does not satisfy its siblings' peerDependencies requirements!\nnpm ERR! peerinvalid Peer fixed-data-table@0.4.7 wants react@>=0.13.0 <0.15.0 || ^0.14.0-beta3\n```\n. Thank you! https://github.com/facebook/fixed-data-table/releases/tag/v0.5.0\n. something similar here\n. yeah, thank you @ripitrust, I understand the idea, but my only question is how to capture the scrolldown event to fech more (call the async action) data from the server.\n. I've tried to found an example for this, and after wait a lot of time without answers I decided to make and example to implement Infinite scroll datatable, maybe we can discuss with this example, as starting point.\n(Comments, suggestion, pull requests are welcome!)\n\nhttps://github.com/eriknyk/fixed-datatable-infinite-scroll\n\nBest Regards.  \n. ",
    "egauci": "Yes, I understand the issues with using HTML tables for this. One approach that's promising is to make the entire left structure aria-hidden=true then replicating the fixed columns within the scrolling table as visually hidden. It's not a perfect solution either.\n\nI'm glad to hear you're thinking of accessibility. Thank you for answering.\n. Yes, I understand the issues with using HTML tables for this. One approach that's promising is to make the entire left structure aria-hidden=true then replicating the fixed columns within the scrolling table as visually hidden. It's not a perfect solution either.\n\nI'm glad to hear you're thinking of accessibility. Thank you for answering.\n. ",
    "justinmasse": "Same issue effecting my workflow.. Same issue effecting my workflow.. ",
    "moimikey": "I couldn't _really_ believe this would be testless. good to know, thanks!\n. I couldn't _really_ believe this would be testless. good to know, thanks!\n. ",
    "MadebyAe": "Seriously?\n. @MandarinConLaBarba Hello! \u2014 How I can trigger the Render pass?\n. Automatically? Which version are using?\n. I upgrade from 0.4.7 \u2192 0.6.0 and works perfect without immutable, thanks guys!\n. Why not? :)\n. Seriously?\n. @MandarinConLaBarba Hello! \u2014 How I can trigger the Render pass?\n. Automatically? Which version are using?\n. I upgrade from 0.4.7 \u2192 0.6.0 and works perfect without immutable, thanks guys!\n. Why not? :)\n. ",
    "codemaster220": "@pieterv - How soon can we have the unit test for it?\n. @pieterv - How soon can we have the unit test for it?\n. ",
    "jainprash": "Looking forward for the test suite sooner.....\n. Looking forward for the test suite sooner.....\n. ",
    "jtrussell": "Hi - it's been a while since there was an update here. I'd like to consider this component for an upcoming project but I can't really recommend it without tests present. Is this something that's still coming? It's essentially a blocker for us on using or contributing to the component.\n. Hi - it's been a while since there was an update here. I'd like to consider this component for an upcoming project but I can't really recommend it without tests present. Is this something that's still coming? It's essentially a blocker for us on using or contributing to the component.\n. ",
    "rolo": "No probs. Doesn't look like any failed network requests. Screenshot from \n\n![data-table-network-requests](https://cloud.githubusercontent.com/assets/28436/7481018/ef4558a2-f364-11e4-96ae-e8d3c2e5e823.png)\n\nHave done it in incognito mode so no extensions (I removed adblock after noticing it was in this screenshot).\n\nLet me know if I can provide anything more to help, or if this is definitely just my end I'll go away :)\n. Tried on my wife's windows machine and seeing the same thing. Here's a Firefox console screenshot incase that's any help.\n\n![fixed-data-table-firefox-console](https://cloud.githubusercontent.com/assets/28436/7481308/0288d66c-f367-11e4-9fbe-ce3e6e4b3a7f.png)\n. No probs. Doesn't look like any failed network requests. Screenshot from \n\n![data-table-network-requests](https://cloud.githubusercontent.com/assets/28436/7481018/ef4558a2-f364-11e4-96ae-e8d3c2e5e823.png)\n\nHave done it in incognito mode so no extensions (I removed adblock after noticing it was in this screenshot).\n\nLet me know if I can provide anything more to help, or if this is definitely just my end I'll go away :)\n. Tried on my wife's windows machine and seeing the same thing. Here's a Firefox console screenshot incase that's any help.\n\n![fixed-data-table-firefox-console](https://cloud.githubusercontent.com/assets/28436/7481308/0288d66c-f367-11e4-9fbe-ce3e6e4b3a7f.png)\n. ",
    "hagsteel": "I can confirm that they are not working on Chrome (OSX) 42.0.2311.135 (64-bit)\n. I looked at the source and it's referencing \"https://cdn.rawgit.com/zynga/scroller/master/src/Scroller.js\".\nThat file doesn't seem to contain anything.\n. I can confirm that they are not working on Chrome (OSX) 42.0.2311.135 (64-bit)\n. I looked at the source and it's referencing \"https://cdn.rawgit.com/zynga/scroller/master/src/Scroller.js\".\nThat file doesn't seem to contain anything.\n. ",
    "harel": "Can confirm also broken on \nChrome (Ubuntu) 41.0.2272.118 (64-bit)  and 42.0.2311.135 (64-bit).  \nFirefox (Ubuntu) 37.0.1 \n. Can confirm also broken on \nChrome (Ubuntu) 41.0.2272.118 (64-bit)  and 42.0.2311.135 (64-bit).  \nFirefox (Ubuntu) 37.0.1 \n. ",
    "ConAntonakos": "I might have spoken early. This should perhaps solve my question?: https://github.com/facebook/fixed-data-table/blob/0fdacd8ef17b45d2b8210a267fb19d5360499bff/site/examples/ObjectDataExample.js\n. Thanks, @pieterv. I do not know why I'm struggling with this, but I setup a custom cellRenderer function like so:\n\n```\nfunction renderLink(cellData){\n  return React.DOM.div({ dangerouslySetInnerHTML: {__html: cellData} });\n}\n```\n\nwhere `cellData` is essentially string HTML.\n\nUnfortunately, I keep getting this error: `Uncaught TypeError: Cannot read property 'hasOwnProperty' of undefined` from the `checkAndWarnForMutatedProps` function at [this line](https://github.com/facebook/react/blob/a56d0d6dc58a973d103bfae7e7ef7c04226209c7/src/classic/element/ReactElementValidator.js#l358).\n. Thanks for your response, @airwin. Unfortunately, that didn't work either. I actually even used the `<ExampleImage />` React component, and I am still getting the same error. :(\n. I might have spoken early. This should perhaps solve my question?: https://github.com/facebook/fixed-data-table/blob/0fdacd8ef17b45d2b8210a267fb19d5360499bff/site/examples/ObjectDataExample.js\n. Thanks, @pieterv. I do not know why I'm struggling with this, but I setup a custom cellRenderer function like so:\n\n```\nfunction renderLink(cellData){\n  return React.DOM.div({ dangerouslySetInnerHTML: {__html: cellData} });\n}\n```\n\nwhere `cellData` is essentially string HTML.\n\nUnfortunately, I keep getting this error: `Uncaught TypeError: Cannot read property 'hasOwnProperty' of undefined` from the `checkAndWarnForMutatedProps` function at [this line](https://github.com/facebook/react/blob/a56d0d6dc58a973d103bfae7e7ef7c04226209c7/src/classic/element/ReactElementValidator.js#l358).\n. Thanks for your response, @airwin. Unfortunately, that didn't work either. I actually even used the `<ExampleImage />` React component, and I am still getting the same error. :(\n. ",
    "rundis": "I struggled bigtime with this as well. By coincidence I found that it worked when using the minified version of react 0.13.3, but got the `Uncaught TypeError: Cannot read property 'hasOwnProperty' of undefined` when using the development (non-minified) version.\n\n(I'm not using jsx, well because I'm using clojurescript btw)\n. Same problem here.\nFully reproducible example:\nhttps://gist.github.com/rundis/145cfdaf6ea277c9647b\n. Are you sure ? \nMy example is with  fixed-data-table 0.3 and React 0.13.3, and it certainly doesn't work.\nCheck out the gist. Can you run that without any problem ?\n\ncheers\nrundis\n. I struggled bigtime with this as well. By coincidence I found that it worked when using the minified version of react 0.13.3, but got the `Uncaught TypeError: Cannot read property 'hasOwnProperty' of undefined` when using the development (non-minified) version.\n\n(I'm not using jsx, well because I'm using clojurescript btw)\n. Same problem here.\nFully reproducible example:\nhttps://gist.github.com/rundis/145cfdaf6ea277c9647b\n. Are you sure ? \nMy example is with  fixed-data-table 0.3 and React 0.13.3, and it certainly doesn't work.\nCheck out the gist. Can you run that without any problem ?\n\ncheers\nrundis\n. ",
    "iammerrick": "I realize this is a poor issue, but I'm really struggling here. Any ideas would be super appreciated!\n. I realize this is a poor issue, but I'm really struggling here. Any ideas would be super appreciated!\n. ",
    "mikestead": "@jbonta good point, the scroll bar track is sitting on top of the header shadow which looks off.\n\nThe Scrollbar z-index defaults to 99 in the component, but it can be passed a different z-index prop to use. The shadow z-index is defined in the css file. I can bump that up to 100 (see before / after images below) but not sure that's a great fix.\n\n# ![screen shot 2015-05-21 at 2 31 39 pm](https://cloud.githubusercontent.com/assets/56844/7741725/b2007dbe-ffc6-11e4-9c1f-6d79b0a90d3d.png)\n\n![screen shot 2015-05-21 at 2 32 04 pm](https://cloud.githubusercontent.com/assets/56844/7741726/b7ce8ce0-ffc6-11e4-9093-a28f4c51f13b.png)\n. Apologies, I missed out the key fact that on each refresh of the table, as the user types their filter, I set `scrollToRow={0}`. I want to ensure they see the start of the table if they've previously scrolled.\n\nI can fix this issue by not scrolling to row 0 if there's no rows, doh. That seems reasonable.  You may want to include this fix to safeguard this mistake. Feel free to close if not.\n. @wlis good point, updated.\n. @jbonta good point, the scroll bar track is sitting on top of the header shadow which looks off.\n\nThe Scrollbar z-index defaults to 99 in the component, but it can be passed a different z-index prop to use. The shadow z-index is defined in the css file. I can bump that up to 100 (see before / after images below) but not sure that's a great fix.\n\n# ![screen shot 2015-05-21 at 2 31 39 pm](https://cloud.githubusercontent.com/assets/56844/7741725/b2007dbe-ffc6-11e4-9c1f-6d79b0a90d3d.png)\n\n![screen shot 2015-05-21 at 2 32 04 pm](https://cloud.githubusercontent.com/assets/56844/7741726/b7ce8ce0-ffc6-11e4-9093-a28f4c51f13b.png)\n. Apologies, I missed out the key fact that on each refresh of the table, as the user types their filter, I set `scrollToRow={0}`. I want to ensure they see the start of the table if they've previously scrolled.\n\nI can fix this issue by not scrolling to row 0 if there's no rows, doh. That seems reasonable.  You may want to include this fix to safeguard this mistake. Feel free to close if not.\n. @wlis good point, updated.\n. ",
    "srinigowda": "We resolved this by commenting out the below code from Scroller.js \n\n//self.__isAnimating = core.effect.Animate.start(step, verify, completed, 250, wasAnimating ? easeOutCubic : easeInOutCubic);\n\nAgain, after wrapping the table with scroller, the sort or selection of check boxes are not working in touch devices, immediate help would be appreciated. \n. We resolved this by commenting out the below code from Scroller.js \n\n//self.__isAnimating = core.effect.Animate.start(step, verify, completed, 250, wasAnimating ? easeOutCubic : easeInOutCubic);\n\nAgain, after wrapping the table with scroller, the sort or selection of check boxes are not working in touch devices, immediate help would be appreciated. \n. ",
    "vojtech-dobes": "I confirm that I have observed this as well.\n. So, my colleague discovered the culprit - we had wrong content width set. It was too narrow, which caused revert to original position (because Scroller obviously thought there is not place on right to scroll to).\n. :100: \n\nIf you have any plans different from developing this library further, please share that so we know where we stand :). Thanks so far for great piece of software!\n. I confirm that I have observed this as well.\n. So, my colleague discovered the culprit - we had wrong content width set. It was too narrow, which caused revert to original position (because Scroller obviously thought there is not place on right to scroll to).\n. :100: \n\nIf you have any plans different from developing this library further, please share that so we know where we stand :). Thanks so far for great piece of software!\n. ",
    "jamperry": "Lazy loading / Infinite Scrolling would be great.\n. Lazy loading / Infinite Scrolling would be great.\n. ",
    "nidu": "Do you plan to add row grouping?\n. Do you plan to add row grouping?\n. ",
    "Martynas-P": "Seems to work now in 0.3 with React 0.13.3\n. I think you got your answer.\n. Seems to work now in 0.3 with React 0.13.3\n. I think you got your answer.\n. ",
    "jedwards1211": "I'm curious about this too, I'd like to use FixedDataTable to replace what's essentially an accordion of collapse panels in an app of mine, but I'm not sure how well row expanding/collapsing would work.\n. I'm seeing this in Chrome on Linux, in the resizable columns example.  I assume that if the JS were rounding the translation offsets this problem would go away\n. I'm curious about this too, I'd like to use FixedDataTable to replace what's essentially an accordion of collapse panels in an app of mine, but I'm not sure how well row expanding/collapsing would work.\n. I'm seeing this in Chrome on Linux, in the resizable columns example.  I assume that if the JS were rounding the translation offsets this problem would go away\n. ",
    "mattcimenski": "So the change listed above results in resetting the scroll bar to the top for every redraw. I only wanted to fix a problem when rowHeightGetter returns a larger height than previous and a scroll bar should appear (but doesn't). Instead of commenting out those 4 lines, I changed the first one to this:\r\n`if (oldState && props.overflowY !== 'hidden' && oldState.scrollY !== 0) {` \r\nThis seems to resolve my issue, and doesn't cause the scrollbar to scroll to the top when it shouldn't.\r\nNote: this has not really been tested, it seems to fix my issue, hopefully it doesn't cause any other issues. So the change listed above results in resetting the scroll bar to the top for every redraw. I only wanted to fix a problem when rowHeightGetter returns a larger height than previous and a scroll bar should appear (but doesn't). Instead of commenting out those 4 lines, I changed the first one to this:\r\n`if (oldState && props.overflowY !== 'hidden' && oldState.scrollY !== 0) {` \r\nThis seems to resolve my issue, and doesn't cause the scrollbar to scroll to the top when it shouldn't.\r\nNote: this has not really been tested, it seems to fix my issue, hopefully it doesn't cause any other issues. ",
    "Reggino": "Ah thanks for that. Indeed, that fixes it.\n\nMaybe the docs could point out that `onColumnResizeEndCallback` is required for the `Table` whenever a `Column` has `isResizable` set to true, just for clarity...\n\nThanks again\n. Ah thanks for that. Indeed, that fixes it.\n\nMaybe the docs could point out that `onColumnResizeEndCallback` is required for the `Table` whenever a `Column` has `isResizable` set to true, just for clarity...\n\nThanks again\n. ",
    "delafont": "I do use that prop, and define it, yet it throws `this.props.onColumnResizeEnd is not a function`. I copied the function and the prop line from the example (except the forceUpdate()).\n\n```\n_onColumnResizeEndCallback: function(newColumnWidth, dataKey) {\n    columnWidths[dataKey] = newColumnWidth;\n    isColumnResizing = false;\n    this._onDataChange();\n},\n```\n\nthen\n`<Column ... onColumnResizeEndCallback={this._onColumnResizeEndCallback} ...  />`\nand it throws.\nIs it the propTypes, or the onContentHeightChange, or something else that I am missing ?\n(sorry, same user, wrong login).\n. I see. Thank you ! I would have tried for days before noticing that.\n. I do use that prop, and define it, yet it throws `this.props.onColumnResizeEnd is not a function`. I copied the function and the prop line from the example (except the forceUpdate()).\n\n```\n_onColumnResizeEndCallback: function(newColumnWidth, dataKey) {\n    columnWidths[dataKey] = newColumnWidth;\n    isColumnResizing = false;\n    this._onDataChange();\n},\n```\n\nthen\n`<Column ... onColumnResizeEndCallback={this._onColumnResizeEndCallback} ...  />`\nand it throws.\nIs it the propTypes, or the onContentHeightChange, or something else that I am missing ?\n(sorry, same user, wrong login).\n. I see. Thank you ! I would have tried for days before noticing that.\n. ",
    "pramodrhegde": "Table Component\n\n`<Table ref=\"entriesTable\"\n                               rowsCount={this.props.entries.length}\n                               width={this.state.tableWidth}\n                               height={this.state.tableHeight}\n                               headerHeight={30}\n                               rowHeight={30}\n                               rowGetter={this._getEntry.bind(this)}\n                               onColumnResizeEndCallback={this._onColumnResized}\n                               isColumnResizing={this.state.isColumnResizing}>\n...\n                        </Table>`\n\nresize method \n\n`_onColumnResized(newColumnWidth,dataKey){\n        var columnWidths = this.state.columnWidths;\n        columnWidths[dataKey] = newColumnWidth;\n        this.setState({\n            columnWidths:columnWidths,\n            isColumnResizing:false\n        });\n    }`\n\ncomponent class \n\n`constructor(){\n\n```\n    super();\n\n    this.state={\n        columnWidths:{\n            url:500,\n            size:100,\n            time:200\n        },\n        tableWidth:1000,\n        tableHeight:500,\n        isColumnResizing:false\n    };\n\n    this._onColumnResizeEndCallback = this._onColumnResized.bind(this)\n}\n```\n\n`\n\nHi guys above is my code everything seems proper still i am getting same exception anything that i am missing?\n. Table Component\n\n`<Table ref=\"entriesTable\"\n                               rowsCount={this.props.entries.length}\n                               width={this.state.tableWidth}\n                               height={this.state.tableHeight}\n                               headerHeight={30}\n                               rowHeight={30}\n                               rowGetter={this._getEntry.bind(this)}\n                               onColumnResizeEndCallback={this._onColumnResized}\n                               isColumnResizing={this.state.isColumnResizing}>\n...\n                        </Table>`\n\nresize method \n\n`_onColumnResized(newColumnWidth,dataKey){\n        var columnWidths = this.state.columnWidths;\n        columnWidths[dataKey] = newColumnWidth;\n        this.setState({\n            columnWidths:columnWidths,\n            isColumnResizing:false\n        });\n    }`\n\ncomponent class \n\n`constructor(){\n\n```\n    super();\n\n    this.state={\n        columnWidths:{\n            url:500,\n            size:100,\n            time:200\n        },\n        tableWidth:1000,\n        tableHeight:500,\n        isColumnResizing:false\n    };\n\n    this._onColumnResizeEndCallback = this._onColumnResized.bind(this)\n}\n```\n\n`\n\nHi guys above is my code everything seems proper still i am getting same exception anything that i am missing?\n. ",
    "gillesruppert": "@ehzhang They way I was able to reproduce the issue was by just adding `dir=RTL` on the html element of the example. I just double-checked now and can't reproduce the issue. I will have a look through the commits to see what could have fixed it.\n. @ehzhang yep. I couldn't reproduce it either anymore. I'm just happy I took the screenshot, proof that I'm not just seeing things :smile: \n. @ehzhang They way I was able to reproduce the issue was by just adding `dir=RTL` on the html element of the example. I just double-checked now and can't reproduce the issue. I will have a look through the commits to see what could have fixed it.\n. @ehzhang yep. I couldn't reproduce it either anymore. I'm just happy I took the screenshot, proof that I'm not just seeing things :smile: \n. ",
    "bartvde": "I am actually seeing this as well.\n\n![screen shot 2015-07-02 at 14 36 51](https://cloud.githubusercontent.com/assets/319678/8477099/ccbc48be-20c7-11e5-9768-3a41f7028d0f.png)\n. if I resize the second column, it seems the position is 100 px (column width) off exactly (e.g. width 97 px instead 197 px).\n. actually it seems the issue is that column resizer is not hidden after the move\ni.e. the class `.fixedDataTableColumnResizerLine_hiddenElem` is not set\n. ah this my own fault, I need to implement `isColumnResizing`\n. I got it to work fine in the end.\n. @KamranAsif your new examples link gives a 404\n. I am actually seeing this as well.\n\n![screen shot 2015-07-02 at 14 36 51](https://cloud.githubusercontent.com/assets/319678/8477099/ccbc48be-20c7-11e5-9768-3a41f7028d0f.png)\n. if I resize the second column, it seems the position is 100 px (column width) off exactly (e.g. width 97 px instead 197 px).\n. actually it seems the issue is that column resizer is not hidden after the move\ni.e. the class `.fixedDataTableColumnResizerLine_hiddenElem` is not set\n. ah this my own fault, I need to implement `isColumnResizing`\n. I got it to work fine in the end.\n. @KamranAsif your new examples link gives a 404\n. ",
    "zekedroid": "Was fighting with this issue for many hours as well. Turns out just setting `isColumnResizing={false}` fixes it. Not sure where in the documentation this was noted though, glad this Issue was brought up. Was fighting with this issue for many hours as well. Turns out just setting `isColumnResizing={false}` fixes it. Not sure where in the documentation this was noted though, glad this Issue was brought up. ",
    "bsr203": "Thanks a ton for helping me with this. I tested with some other components which add drop downs dynamically and met with same issue. I wish it works, but understand not a core requirement for data table. Closing now. thanks again.\n. +1 \n. Thanks a ton for helping me with this. I tested with some other components which add drop downs dynamically and met with same issue. I wish it works, but understand not a core requirement for data table. Closing now. thanks again.\n. +1 \n. ",
    "kevinhaas": "I was able to circumvent this by giving the parent container 'z-index: -1;'. Haven't noticed any strange behavior yet, but this will always keep the table on the bottom, which works fine for me.. I was able to circumvent this by giving the parent container 'z-index: -1;'. Haven't noticed any strange behavior yet, but this will always keep the table on the bottom, which works fine for me.. I was able to circumvent this by giving the parent container 'z-index: -1;'. Haven't noticed any strange behavior yet, but this will always keep the table on the bottom, which works fine for me.. I was able to circumvent this by giving the parent container 'z-index: -1;'. Haven't noticed any strange behavior yet, but this will always keep the table on the bottom, which works fine for me.. ",
    "gor181": "Hello,\n\nIs there a reason why the issues which are most likely related to old versions of fixed-data-table are open? The lib seems nice but the lack of documentation is making usage really hard.\n\nI browsed the source to discover how to specify the footer which in most recent version (now being 0.6.3) is by specifying `footer` property on `Column` component...\n\nThanks,\n. Hello,\n\nIs there a reason why the issues which are most likely related to old versions of fixed-data-table are open? The lib seems nice but the lack of documentation is making usage really hard.\n\nI browsed the source to discover how to specify the footer which in most recent version (now being 0.6.3) is by specifying `footer` property on `Column` component...\n\nThanks,\n. ",
    "kenr": "Your suggestion does the trick, thank you. Added \n\n``` HTML\n<link href=\"fixed-data-table.css\" rel='stylesheet' type='text/css'>\n```\n\nand now the table is correctly formatted. \n\nIs this an issue with browserify in combination with fixed-data-table then ? Is browserify supported by fixed-data-table ?\n. Your suggestion does the trick, thank you. Added \n\n``` HTML\n<link href=\"fixed-data-table.css\" rel='stylesheet' type='text/css'>\n```\n\nand now the table is correctly formatted. \n\nIs this an issue with browserify in combination with fixed-data-table then ? Is browserify supported by fixed-data-table ?\n. ",
    "skosch": "Just ran into the same problem \u2013 for those of you using a module loader of some sort, you can `require` or `import` the file `fixed-data-table/dist/fixed-data-table.css` to get it to work.\n. Just ran into the same problem \u2013 for those of you using a module loader of some sort, you can `require` or `import` the file `fixed-data-table/dist/fixed-data-table.css` to get it to work.\n. ",
    "TiagoGouvea": "`import 'fixed-data-table/dist/fixed-data-table.css';`. `import 'fixed-data-table/dist/fixed-data-table.css';`. ",
    "ahmedtabrez": "There is [this package](https://github.com/andela-cdaniel/mui-data-table) written by a folk. You might be interested. I haven't tried it and I don't know if it's still maintained. . There is [this package](https://github.com/andela-cdaniel/mui-data-table) written by a folk. You might be interested. I haven't tried it and I don't know if it's still maintained. . ",
    "MandarinConLaBarba": "I agree. Seems like the most appropriate behavior would be to center the row vertically in the scrollable area.\n. I might find this useful as well, currently doing things like this:\n\n```\n  /**\n   * Get data for a 'data' cell\n   *\n   */\n  _dataCellDataGetter(columnId, rowSpec) {\n\n    let item = this._getRowItem(rowSpec);\n\n    return item.getIn(['cells', columnId]);\n\n  },\n```\n. Once you've received the ID of the object changed in the database, use that to find the row index in your rows array. Then mutate that object with the update. The actual object for that row index has to be a different object for the row to get a new render pass. Immutability really helps with the `fixed-data-table`, you may want to check out `immutable`: https://facebook.github.io/immutable-js/. \n. Mutating rows in state will cause the FDT to perform a render pass on the affected rows.\n. I agree. Seems like the most appropriate behavior would be to center the row vertically in the scrollable area.\n. I might find this useful as well, currently doing things like this:\n\n```\n  /**\n   * Get data for a 'data' cell\n   *\n   */\n  _dataCellDataGetter(columnId, rowSpec) {\n\n    let item = this._getRowItem(rowSpec);\n\n    return item.getIn(['cells', columnId]);\n\n  },\n```\n. Once you've received the ID of the object changed in the database, use that to find the row index in your rows array. Then mutate that object with the update. The actual object for that row index has to be a different object for the row to get a new render pass. Immutability really helps with the `fixed-data-table`, you may want to check out `immutable`: https://facebook.github.io/immutable-js/. \n. Mutating rows in state will cause the FDT to perform a render pass on the affected rows.\n. ",
    "mitjacotic": "What is the a reason that `scrollToRow` [calls `scrollRowIntoView`](https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableNew.react.js#L767) ?\nReplacing that call with `scrollToRow()` would properly scroll the list so that desired row would be on the top of the list, but right now, like **francescogior** said, it only ensures that the row is somewhere in the visible viewport.\nI think there should be option for both; current behaviour and also an option to scroll some row to the top of the list but currently latter doesn't seem to be doable without modifying the lib itself.\nWhat about new prop, something like _scrollRowToTop_ so devs could choose the one which suits them more?\n. What is the a reason that `scrollToRow` [calls `scrollRowIntoView`](https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableNew.react.js#L767) ?\nReplacing that call with `scrollToRow()` would properly scroll the list so that desired row would be on the top of the list, but right now, like **francescogior** said, it only ensures that the row is somewhere in the visible viewport.\nI think there should be option for both; current behaviour and also an option to scroll some row to the top of the list but currently latter doesn't seem to be doable without modifying the lib itself.\nWhat about new prop, something like _scrollRowToTop_ so devs could choose the one which suits them more?\n. ",
    "skmasq": "@ehzhang  Thank you, cheers!\n. @ehzhang  Thank you, cheers!\n. ",
    "bvaughn": "This would be very useful for headers of related columns.\n. Judging by the commit history, fixed-data-table seems to have been abandoned. (Last commit is over 5 months old.)\n\nIf anyone would be interested in adding col-span support to react-virtualized's `FlexTable` component though, chat with me on Gitter. :)\n. No worries! I would actually expect adding colspan support to `FlexTable` to be a pretty easy task, but I understand time constraints and fixed columns aren't a feature I have on my roadmap. :)\n. FYI this is a browser limitation. You'll see different limitations on Firefox than on Chrome for example. (Chrome seems to top out around 33.5M whereas Firefox tops out around 17.8M.)\n\nWithout reimplementing scrolling (and losing a lot of advantages provided by browsers WRT off-UI-thread scrolling animations) there's not much that can be done about this.\n. I see. I'm surprised to hear that's the reason. But I'm glad to hear it will be addressed with an update. Thank you for the information. :)\n. @jamesseanwright Check out react-virtualized `FlexTable` as a possible alternative if you're looking for similar functionality with a cleaner DOM.\n\n(It also uses  `<div>` but with aria roles.)\n. This would be very useful for headers of related columns.\n. Judging by the commit history, fixed-data-table seems to have been abandoned. (Last commit is over 5 months old.)\n\nIf anyone would be interested in adding col-span support to react-virtualized's `FlexTable` component though, chat with me on Gitter. :)\n. No worries! I would actually expect adding colspan support to `FlexTable` to be a pretty easy task, but I understand time constraints and fixed columns aren't a feature I have on my roadmap. :)\n. FYI this is a browser limitation. You'll see different limitations on Firefox than on Chrome for example. (Chrome seems to top out around 33.5M whereas Firefox tops out around 17.8M.)\n\nWithout reimplementing scrolling (and losing a lot of advantages provided by browsers WRT off-UI-thread scrolling animations) there's not much that can be done about this.\n. I see. I'm surprised to hear that's the reason. But I'm glad to hear it will be addressed with an update. Thank you for the information. :)\n. @jamesseanwright Check out react-virtualized `FlexTable` as a possible alternative if you're looking for similar functionality with a cleaner DOM.\n\n(It also uses  `<div>` but with aria roles.)\n. ",
    "GrzegorzKaczan": "+1\n. It doesn't work for me either on Chrome 46.0.2490.80 m. Same problem.\n. +1\nSame problem here.\n. +1\n. It doesn't work for me either on Chrome 46.0.2490.80 m. Same problem.\n. +1\nSame problem here.\n. ",
    "wer": "+1\n. +1\n. ",
    "Bazze": "+1. Did you ever give your implementation a try @cosminnicula? I will need to fork and implement this myself if no one have done this already.\n. @bvaughn I noticed that too, however, the `FlexTable` component lacks two features I require: fixed columns & colspans. I'm guessing that implementing colspan support in `FixedDataTable` will be faster, and time is of the essence for me at the moment :)\n. +1. Did you ever give your implementation a try @cosminnicula? I will need to fork and implement this myself if no one have done this already.\n. @bvaughn I noticed that too, however, the `FlexTable` component lacks two features I require: fixed columns & colspans. I'm guessing that implementing colspan support in `FixedDataTable` will be faster, and time is of the essence for me at the moment :)\n. ",
    "jonecir": "So, any updates on DataTable colspan?\n. So, any updates on DataTable colspan?\n. ",
    "kwent": "Bumping up this issue. It's been almost a year without any follow up.. Bumping up this issue. It's been almost a year without any follow up.. ",
    "csillag": ">It's been almost a year without any follow up.\r\n\r\nSee #468.. >It's been almost a year without any follow up.\r\n\r\nSee #468.. ",
    "jeffycai": "it's good. it's good. ",
    "jasonswearingen": "@kevinhaas  could you share a code snippet?  I am trying to do what you suggest but still have the same problem.   (I am trying to add a dropdown inside a cell though, not in the header). @kevinhaas  could you share a code snippet?  I am trying to do what you suggest but still have the same problem.   (I am trying to add a dropdown inside a cell though, not in the header). ",
    "anandrikka": "@kevinhaas Could you share a code snippet? \r\n@jasonswearingen Are you able to solve it ?. @kevinhaas Could you share a code snippet? \r\n@jasonswearingen Are you able to solve it ?. ",
    "sharky93": "Yep, so, `window.getSelection()` is a way, I was wondering if that is the best way?\n. I'm trying to get cell data on the mouseUp event. There is no direct method for cells, but onRowClick works just fine.\n. Also, do we have a convenient way to get the rowCount number or some detail about the column for the row clicked on?\n. @ehzhang let me rephrase, my bad. I'm looking for a way to get the row index of the cell which has been clicked on and similarly, the column index.\n. does it sound like something that could be added to the API in recent future?\n. Yep, so, `window.getSelection()` is a way, I was wondering if that is the best way?\n. I'm trying to get cell data on the mouseUp event. There is no direct method for cells, but onRowClick works just fine.\n. Also, do we have a convenient way to get the rowCount number or some detail about the column for the row clicked on?\n. @ehzhang let me rephrase, my bad. I'm looking for a way to get the row index of the cell which has been clicked on and similarly, the column index.\n. does it sound like something that could be added to the API in recent future?\n. ",
    "aphillipo": "Ah okay so it's already going to get passed to cell renderer, of course that makes sense...\n. This seems to only occur when I call .refresh() on a ref to the table.  Very strange.\n. This lovely bug is caused by having react inside a react modules npm.  Somehow webpack includes it twice.  Nice.\n. Ah okay so it's already going to get passed to cell renderer, of course that makes sense...\n. This seems to only occur when I call .refresh() on a ref to the table.  Very strange.\n. This lovely bug is caused by having react inside a react modules npm.  Somehow webpack includes it twice.  Nice.\n. ",
    "Siyfion": "Thanks for the quick response @ehzhang! While I think it's a shame that it's not something that would be officially supported, at least you have given us enough tools to write something to do it ourselves.\n. @ehzhang Would I be able to use the `cellRenderer` and/or `cellDataGetter` to attach X-Editable (http://vitalets.github.io/x-editable/) to the contents such that when the data changed the X-Editable was reinitialised or whatever? Sorry if it's a dumb question, I'm only looking into React for the first time, so I'm not sure how it all ties together at the moment.\n. Hmm... as I thought! Hence why I was asking whether it was something you guys might think about supporting :tongue: \n. @ehzhang Perhaps an example could be added to the example list with a cell that has a simple numeric input, with two-way updates/bindings, just to show people how it could be done?\n. Thanks for the quick response @ehzhang! While I think it's a shame that it's not something that would be officially supported, at least you have given us enough tools to write something to do it ourselves.\n. @ehzhang Would I be able to use the `cellRenderer` and/or `cellDataGetter` to attach X-Editable (http://vitalets.github.io/x-editable/) to the contents such that when the data changed the X-Editable was reinitialised or whatever? Sorry if it's a dumb question, I'm only looking into React for the first time, so I'm not sure how it all ties together at the moment.\n. Hmm... as I thought! Hence why I was asking whether it was something you guys might think about supporting :tongue: \n. @ehzhang Perhaps an example could be added to the example list with a cell that has a simple numeric input, with two-way updates/bindings, just to show people how it could be done?\n. ",
    "westoque": "@cosminnicula This is awesome. Exactly what I needed. Thanks.\n. @cosminnicula This is awesome. Exactly what I needed. Thanks.\n. ",
    "ranjan653": "Hi any one help me ...........\n@AlesJiranek , How to implement that. Could you please help me\nI am using React-Bootstrap and Bower-Component to develop a Table which supports column sorting, Column search,rowedit. But not able to implement that (I am using tomcat server) with data loading dynamically. Any one help how to implement this with dynamic example.\n. Hi any one help me ...........\n@AlesJiranek , How to implement that. Could you please help me\nI am using React-Bootstrap and Bower-Component to develop a Table which supports column sorting, Column search,rowedit. But not able to implement that (I am using tomcat server) with data loading dynamically. Any one help how to implement this with dynamic example.\n. ",
    "fobbyal": "@box-turtle can you paste the link of the of the protal technique?\n. @box-turtle thx \n. @Ghbnxby react-select works with that?\n. I opened a new issue related to this\n#379 \n. @box-turtle can you paste the link of the of the protal technique?\n. @box-turtle thx \n. @Ghbnxby react-select works with that?\n. I opened a new issue related to this\n#379 \n. ",
    "quinnbaetz": "Is there any quick fix I can do outside of fixed-data-table to get around this error?  Otherwise it would be nice if this was merged in.\n. Is there any quick fix I can do outside of fixed-data-table to get around this error?  Otherwise it would be nice if this was merged in.\n. ",
    "voy": "Any update from the fixed-data-table team? We too would appreciate if this could get merged.\n. Any update from the fixed-data-table team? We too would appreciate if this could get merged.\n. ",
    "andreypopp": "Any chance it could be reviewed?\n. @ehzhang start dragging the scrollbar, move mouse outside the browser window, release the mouse button, return to mouse to browser window, see it is stills dragging the scrollbar while you don't press the button\n. That only reproduces in FF as for now.\n. @ehzhang yes, as stated in the PR, this issue is reproducible only in FF.\n\n> While this is certainly looks a bit janky I'm uncertain that this would be the best way to fix this.\n\nWhat other options do we have?\n. Any chance it could be reviewed?\n. @ehzhang start dragging the scrollbar, move mouse outside the browser window, release the mouse button, return to mouse to browser window, see it is stills dragging the scrollbar while you don't press the button\n. That only reproduces in FF as for now.\n. @ehzhang yes, as stated in the PR, this issue is reproducible only in FF.\n\n> While this is certainly looks a bit janky I'm uncertain that this would be the best way to fix this.\n\nWhat other options do we have?\n. ",
    "krystian-3c": "+1\n. +1\n. ",
    "khankuan": "Will this be merged in soon?\n. Ah ic, are there any ways to optimise a single row not to update, such as when the data is really the same.\n. Ah nope, was just thinking if i could make my application even faster :P But the current one works great and scales. (Y)\n. @ehzhang hmm seems the lag does occur. Basically I'm using rowEnter and rowLeave to set a border bottom to the row, by setting a state and customising handleRowClassName. \n. Ha! Just realised a fix was already in PR. Closing..\n. Will this be merged in soon?\n. Ah ic, are there any ways to optimise a single row not to update, such as when the data is really the same.\n. Ah nope, was just thinking if i could make my application even faster :P But the current one works great and scales. (Y)\n. @ehzhang hmm seems the lag does occur. Basically I'm using rowEnter and rowLeave to set a border bottom to the row, by setting a state and customising handleRowClassName. \n. Ha! Just realised a fix was already in PR. Closing..\n. ",
    "ripitrust": "Would like to know if this is still available \nsince I didn't see it in the code \n. this looks great\n\nI am looking into how to do it in v0.6\n. you should take a look at the Flux architecture : https://facebook.github.io/flux/\nand the async operation in the flux-chat example\n\nbasic idea is to store the data in a TableStore,  wrap Actions in a Async api callback\n\nFDT should only be a view component , it should not handle async itself\n. @eriknyk  In that case, you need to modify the internal code. This is not a officially supported API, so you have to add it yourself\n\nBut beware, this async action may slow down the performance, and hinder the user experiences\n. a good way is to use a Flux Store to store all the items and then paginate by Action\n. Hi @gamedevsam  \r\n\r\nThanks for the interest\r\n\r\nYou may checkout my fork of this library https://github.com/ripitrust/fixed-data-table. Would like to know if this is still available \nsince I didn't see it in the code \n. this looks great\n\nI am looking into how to do it in v0.6\n. you should take a look at the Flux architecture : https://facebook.github.io/flux/\nand the async operation in the flux-chat example\n\nbasic idea is to store the data in a TableStore,  wrap Actions in a Async api callback\n\nFDT should only be a view component , it should not handle async itself\n. @eriknyk  In that case, you need to modify the internal code. This is not a officially supported API, so you have to add it yourself\n\nBut beware, this async action may slow down the performance, and hinder the user experiences\n. a good way is to use a Flux Store to store all the items and then paginate by Action\n. Hi @gamedevsam  \r\n\r\nThanks for the interest\r\n\r\nYou may checkout my fork of this library https://github.com/ripitrust/fixed-data-table. ",
    "u9520107": "Facing this issue as well.\nCurrent touch handling example only allows the component to either accept touch scrolling or use mouse scrolling. I am trying to implement one that can handle both for devices with touch screen and mouse. \nMy current direction is to let fixed-data-table deal with mouse scrolling because it's optimization is better, and let zynga-scroller deal with touch by setting the scrollLeft and scrollTop only if there are touch events.\nIdeally fixed data table could respond to scrollLeft/scrollTop prop changes after mount.\n. I think scrollTop can follow the rowToScrollTo model... but the current implementation is a bit old.\nIf the initial property specified scrollTop and rowToScrollTo, the current code would first calculate scrollY based on scrollTop, then immediately recalculate scrollY based on rowToScrollTo, the scrollTop calculation in this case is totally unnecessary.\n. Should've branched before committing.\nI'll create a different PR.\n. @jasongonzales23 No, this wasn't merged. You can check out my fork on how I implemented it. It's actually fairly straightforward. \n. This is already outdated. Not sure when I'll have to time to work on this though.\n. not sure if it is still relevant.... Facing this issue as well.\nCurrent touch handling example only allows the component to either accept touch scrolling or use mouse scrolling. I am trying to implement one that can handle both for devices with touch screen and mouse. \nMy current direction is to let fixed-data-table deal with mouse scrolling because it's optimization is better, and let zynga-scroller deal with touch by setting the scrollLeft and scrollTop only if there are touch events.\nIdeally fixed data table could respond to scrollLeft/scrollTop prop changes after mount.\n. I think scrollTop can follow the rowToScrollTo model... but the current implementation is a bit old.\nIf the initial property specified scrollTop and rowToScrollTo, the current code would first calculate scrollY based on scrollTop, then immediately recalculate scrollY based on rowToScrollTo, the scrollTop calculation in this case is totally unnecessary.\n. Should've branched before committing.\nI'll create a different PR.\n. @jasongonzales23 No, this wasn't merged. You can check out my fork on how I implemented it. It's actually fairly straightforward. \n. This is already outdated. Not sure when I'll have to time to work on this though.\n. not sure if it is still relevant.... ",
    "alexandergunnarson": "I have this issue as well. See #365 for use case (touch scrolling using Zynga Scroller) and why #216 (pull request) should be merged in.\n. I've tried the Zynga Scroller as per the TouchWrapper/TouchableArea example, with the helpful hints provided by @ssolders and @vinayaknagpal . However, because Zynga Scroller simply sets props.scrollLeft and props.scrollTop, which according to #202 has no effect after mount. Due to #202, I've been forced to use an older version of FixedDataTable (the July 22nd version of the branch featured in #216 's pull request), which is inconvenient. I'm not even sure whether it works yet, but I'll post back once I try.\n\nI second @CoderBlaine in advocating that Facebook \"build[s] this feature in to a future version as I imagine almost everyone wants support for mobile.\"\n\nUPDATE:\nThe programmatic scrolling works on desktop! However, the FixedDataTable version in #216  is sadly sufficiently behind the current master branch as to have a different render/data model: it lacks the Cell component and needs props.rowGetter to work. Still trying to work out the kinks in that. But at least it scrolls!\n\nUPDATE 2:\nThe scrolling is very slow... I think I'm going to make @u9520107's changes to the current version and see what happens. I wish Facebook would enable mobile scrolling by default. Oh well.\n\nUPDATE 3:\nI made the changes and scrolling turned out to be painfully slow. Guess FixedDataTable performance has had that great of an improvement in the past few months. I moved to react-canvas and now it scrolls smooth as butter.\n. I have this issue as well. See #365 for use case (touch scrolling using Zynga Scroller) and why #216 (pull request) should be merged in.\n. I've tried the Zynga Scroller as per the TouchWrapper/TouchableArea example, with the helpful hints provided by @ssolders and @vinayaknagpal . However, because Zynga Scroller simply sets props.scrollLeft and props.scrollTop, which according to #202 has no effect after mount. Due to #202, I've been forced to use an older version of FixedDataTable (the July 22nd version of the branch featured in #216 's pull request), which is inconvenient. I'm not even sure whether it works yet, but I'll post back once I try.\n\nI second @CoderBlaine in advocating that Facebook \"build[s] this feature in to a future version as I imagine almost everyone wants support for mobile.\"\n\nUPDATE:\nThe programmatic scrolling works on desktop! However, the FixedDataTable version in #216  is sadly sufficiently behind the current master branch as to have a different render/data model: it lacks the Cell component and needs props.rowGetter to work. Still trying to work out the kinks in that. But at least it scrolls!\n\nUPDATE 2:\nThe scrolling is very slow... I think I'm going to make @u9520107's changes to the current version and see what happens. I wish Facebook would enable mobile scrolling by default. Oh well.\n\nUPDATE 3:\nI made the changes and scrolling turned out to be painfully slow. Guess FixedDataTable performance has had that great of an improvement in the past few months. I moved to react-canvas and now it scrolls smooth as butter.\n. ",
    "VladimirPal": "@MandarinConLaBarba @alexandergunnarson @u9520107 \nHere a solution:\nhttps://github.com/facebook/fixed-data-table/issues/288#issuecomment-249942491\n\n> I checked the code and if you need to manage scroll you have to set overflowY prop to 'hidden' then you can change scroll props.\n> For example if you have a pagination and want to scroll on top on each page you have to set props - overflowY: 'hidden' and scrollTop: 0 and then if you want to have auto scroll set overflowY to 'auto'\n. @ayozebarrera @amit1911 I checked the code and if you need to manage scroll you have to set overflowY prop to 'hidden' then you can change scroll props.\nFor example if you have a pagination and want to scroll on top on each page you have to set props - overflowY: 'hidden' and scrollTop: 0 and then if you want to have auto scroll set overflowY to 'auto'\n. @KamranAsif What's the reason of creating your fork? This project is not developing anymore?\n. @ehzhang @pieterv Hi guys! First of all thank you for this great project. Just wondering is this project not developing anymore?\n. @MandarinConLaBarba @alexandergunnarson @u9520107 \nHere a solution:\nhttps://github.com/facebook/fixed-data-table/issues/288#issuecomment-249942491\n\n> I checked the code and if you need to manage scroll you have to set overflowY prop to 'hidden' then you can change scroll props.\n> For example if you have a pagination and want to scroll on top on each page you have to set props - overflowY: 'hidden' and scrollTop: 0 and then if you want to have auto scroll set overflowY to 'auto'\n. @ayozebarrera @amit1911 I checked the code and if you need to manage scroll you have to set overflowY prop to 'hidden' then you can change scroll props.\nFor example if you have a pagination and want to scroll on top on each page you have to set props - overflowY: 'hidden' and scrollTop: 0 and then if you want to have auto scroll set overflowY to 'auto'\n. @KamranAsif What's the reason of creating your fork? This project is not developing anymore?\n. @ehzhang @pieterv Hi guys! First of all thank you for this great project. Just wondering is this project not developing anymore?\n. ",
    "MalucoMarinero": "PR made.\n. PR made.\n. ",
    "mathew-kurian": "Related https://github.com/schrodinger/fixed-data-table-2/pull/73\n. Related https://github.com/schrodinger/fixed-data-table-2/pull/73\n. Related https://github.com/schrodinger/fixed-data-table-2/pull/73\n. Related https://github.com/schrodinger/fixed-data-table-2/pull/73\n. Related https://github.com/schrodinger/fixed-data-table-2/pull/73\n. Related https://github.com/schrodinger/fixed-data-table-2/pull/73\n. ",
    "chrisdrackett": "so hopefully the following helps:\n\n![example](http://cl.ly/image/2w370b1u1m2e/Screen%20Shot%202015-07-21%20at%204.09.51%20PM.png)\n\nbasically the first image is when you are scrolled all the way left, the second all the way right. The margin is within the table, not on the wrapper.\n. this is what I'm trying to achieve, I'm not sure if its possible with the current code\n. I'm trying to achieve the same, but without the extra scrollbar. Now you have a scrollbar on the table and the wrapper, which isn't a great user experience.\n. I'm just going to solve this by adding two extra empty columns at the beginning and end of my table. I can then use some CSS to render these new columns as transparent and \"fake\" the edge of the table on the adjacent columns.\n. or they are left in the dom and a class is used to show or hide these shadows.\n. yeah, I'm on 0.4.2 as it stops my build on 0.4.3.\n. I'm having this issue as well. Using a transparent border doesn't fix the problem as it still takes up space.\n. did this get changed?. so hopefully the following helps:\n\n![example](http://cl.ly/image/2w370b1u1m2e/Screen%20Shot%202015-07-21%20at%204.09.51%20PM.png)\n\nbasically the first image is when you are scrolled all the way left, the second all the way right. The margin is within the table, not on the wrapper.\n. this is what I'm trying to achieve, I'm not sure if its possible with the current code\n. I'm trying to achieve the same, but without the extra scrollbar. Now you have a scrollbar on the table and the wrapper, which isn't a great user experience.\n. I'm just going to solve this by adding two extra empty columns at the beginning and end of my table. I can then use some CSS to render these new columns as transparent and \"fake\" the edge of the table on the adjacent columns.\n. or they are left in the dom and a class is used to show or hide these shadows.\n. yeah, I'm on 0.4.2 as it stops my build on 0.4.3.\n. I'm having this issue as well. Using a transparent border doesn't fix the problem as it still takes up space.\n. did this get changed?. ",
    "munkh-altai": "+1\n. can you provide code example about auto row height @pieterv \n. +1\n. can you provide code example about auto row height @pieterv \n. ",
    "tsemerad": "+1\n. +1\n. ",
    "prateekjahead": "Had to use react-virtualized due to this lacking feature. So +1.\n. Had to use react-virtualized due to this lacking feature. So +1.\n. ",
    "somonek": "+1. +1. ",
    "axe312ger": "this is fixed in https://github.com/schrodinger/fixed-data-table-2 \ud83d\ude3b . this is fixed in https://github.com/schrodinger/fixed-data-table-2 \ud83d\ude3b . ",
    "pavanpodila": "Ya, I've it like so:\n\n``` js\n    _onColumnResized(newColumnWidth, dataKey) {\n\n        var columnWidths = this.state.columnWidths;\n        columnWidths[dataKey] = newColumnWidth;\n\n        this.setState({columnWidths: columnWidths, isColumnResizing: false});\n    }\n\n```\n\n``` xml\n            <Table rowsCount={this.props.entries.length}\n                   width={this.state.tableWidth}\n                   headerHeight={30}\n                   height={500}\n                   rowHeight={30}\n                   rowGetter={this._getEntry.bind(this)}\n                   isColumnResizing={this.state.isColumnResizing}\n                   onColumnResizeEndCallback={this._onColumnResized.bind(this)}>\n\n```\n. Hi Edwin,\n         Good catch. The dataKey was the problem. BTW, I am using `bind` because of ES6. Looks like React does not autobind methods when used via ES6. \n\nThanks a lot for taking time to help :-)\n. Ya, I've it like so:\n\n``` js\n    _onColumnResized(newColumnWidth, dataKey) {\n\n        var columnWidths = this.state.columnWidths;\n        columnWidths[dataKey] = newColumnWidth;\n\n        this.setState({columnWidths: columnWidths, isColumnResizing: false});\n    }\n\n```\n\n``` xml\n            <Table rowsCount={this.props.entries.length}\n                   width={this.state.tableWidth}\n                   headerHeight={30}\n                   height={500}\n                   rowHeight={30}\n                   rowGetter={this._getEntry.bind(this)}\n                   isColumnResizing={this.state.isColumnResizing}\n                   onColumnResizeEndCallback={this._onColumnResized.bind(this)}>\n\n```\n. Hi Edwin,\n         Good catch. The dataKey was the problem. BTW, I am using `bind` because of ES6. Looks like React does not autobind methods when used via ES6. \n\nThanks a lot for taking time to help :-)\n. ",
    "grydstedt": "+1\n. +1\n. +1\n. +1\n. ",
    "debrice": "@ehzhang  maybe the documentation should warn users about the half million records hard limit, even more since the project description reads\n\n> \"The table was designed to handle thousands rows of data without sacrificing performance\"\n. Sorry duplicate of #76\n. @ehzhang  maybe the documentation should warn users about the half million records hard limit, even more since the project description reads\n\n> \"The table was designed to handle thousands rows of data without sacrificing performance\"\n. Sorry duplicate of #76\n. ",
    "weixing2014": "Hi, Edwin,\n\nThis is so great! We have been keeping eyes on this project for a long time and are happily to see this transition by which the table could be more flexible and easy to customize. \n\nOne thing I'm curious is whether your changes will make reordering columns easier if we want to implement this feature by ourselves? According to your write-up I feel the answer should be \"Yes\" while I'm not 100% sure. \n\nThanks!\n. @ehzhang thanks!\n. Hi, Edwin,\n\nThis is so great! We have been keeping eyes on this project for a long time and are happily to see this transition by which the table could be more flexible and easy to customize. \n\nOne thing I'm curious is whether your changes will make reordering columns easier if we want to implement this feature by ourselves? According to your write-up I feel the answer should be \"Yes\" while I'm not 100% sure. \n\nThanks!\n. @ehzhang thanks!\n. ",
    "brynjargr": "Hello @ehzhang, we are interested in using FixedDataTables for a project that we are going to start soon, but we don't want to start with version 0.4 knowing that 0.5 is coming soon. Do you have any estimate for when this will be merged and 0.5 will be released?\n. @ehzhang thank you for your comment, it gives us hope that a version similar to this may be released. But is there any chance you or @pieterv or whoever can speak on behalf of Facebook can give us a more committal answer than \"may be released soon\"?\nWe have started a project based off of this version of the API since we did not like the previous version as much. Of course we knew that was a risk since this had not been merged. But now that this has been closed and there is no commitment from Facebook to make this change to the API within any period of time that leaves us in a difficult spot. Please help us out a little bit. You had done a great job making these API changes and we would really like to see these changes make their way to a released version.\n. Also, I'm sure that Facebook, like all of us, has a lot of things that they can spend their time working on. So if this is not a priority, then can you at least tell us if you would be open to merging a pull request from us or someone else with changes similar to this one. That would help us decide if we should spend our time addressing the incompatibilities and incompleteness that @ehzhang mentions above.\n. Hello @ehzhang, we are interested in using FixedDataTables for a project that we are going to start soon, but we don't want to start with version 0.4 knowing that 0.5 is coming soon. Do you have any estimate for when this will be merged and 0.5 will be released?\n. @ehzhang thank you for your comment, it gives us hope that a version similar to this may be released. But is there any chance you or @pieterv or whoever can speak on behalf of Facebook can give us a more committal answer than \"may be released soon\"?\nWe have started a project based off of this version of the API since we did not like the previous version as much. Of course we knew that was a risk since this had not been merged. But now that this has been closed and there is no commitment from Facebook to make this change to the API within any period of time that leaves us in a difficult spot. Please help us out a little bit. You had done a great job making these API changes and we would really like to see these changes make their way to a released version.\n. Also, I'm sure that Facebook, like all of us, has a lot of things that they can spend their time working on. So if this is not a priority, then can you at least tell us if you would be open to merging a pull request from us or someone else with changes similar to this one. That would help us decide if we should spend our time addressing the incompatibilities and incompleteness that @ehzhang mentions above.\n. ",
    "Chehai": "I understand that 0.5 is still in development, but I do notice a performance issue in the api-v0.5 branch which I believe will be the future 0.5 release.\n\nTo reproduce the performance issue, you can use your phone to access the JSON data example in the api-v0.5 branch and do some scrolling. This example is much slower than the same example in the master branch.\n\nhttps://github.com/facebook/fixed-data-table/blob/api-v0.5/src/FixedDataTable.react.js#L640 is the problem. It compares column definitions between a table's new props and old state. Since `<Column />` can take `<Cell />` as a prop and `<Cell />` can be translated to `React.createElement`, column definitions of the table's new props will always be different from the old state. As a result, whole table rendering happens very often and scrolling is very slow.\n. The commit resolves #315\n. I noticed a performance problem in FixedDataTable's api-v0.5 branch which was later converted to version 0.6. See https://github.com/facebook/fixed-data-table/pull/221#issuecomment-145412983  \n\nI am not sure if it is fixed or not in 0.6.\n. I understand that 0.5 is still in development, but I do notice a performance issue in the api-v0.5 branch which I believe will be the future 0.5 release.\n\nTo reproduce the performance issue, you can use your phone to access the JSON data example in the api-v0.5 branch and do some scrolling. This example is much slower than the same example in the master branch.\n\nhttps://github.com/facebook/fixed-data-table/blob/api-v0.5/src/FixedDataTable.react.js#L640 is the problem. It compares column definitions between a table's new props and old state. Since `<Column />` can take `<Cell />` as a prop and `<Cell />` can be translated to `React.createElement`, column definitions of the table's new props will always be different from the old state. As a result, whole table rendering happens very often and scrolling is very slow.\n. The commit resolves #315\n. I noticed a performance problem in FixedDataTable's api-v0.5 branch which was later converted to version 0.6. See https://github.com/facebook/fixed-data-table/pull/221#issuecomment-145412983  \n\nI am not sure if it is fixed or not in 0.6.\n. ",
    "elanbar": "That is what I wrote which works for me for a hover highlight on a cell. What I am looking for is how to get the whole row to highlight. The row hover highlight is not working for me.\n. And that works! Thank you!\n. That is what I wrote which works for me for a hover highlight on a cell. What I am looking for is how to get the whole row to highlight. The row hover highlight is not working for me.\n. And that works! Thank you!\n. ",
    "dearrrfish": "this is solution:\n\n```\n.fixedDataTableRowLayout_rowWrapper:hover .public_fixedDataTableCell_main {\n  background-color: yellow;\n}\n```\n. When I implementing instant filtering with keyword highlighting, visible rows with highlight formatting cells won't be re-rendered if row indexes don't change. Any help on this behavior?\n. Thanks. Just figured out, I should put logic in `cellDataGetter` instead of `customRenderer`.\n. this is solution:\n\n```\n.fixedDataTableRowLayout_rowWrapper:hover .public_fixedDataTableCell_main {\n  background-color: yellow;\n}\n```\n. When I implementing instant filtering with keyword highlighting, visible rows with highlight formatting cells won't be re-rendered if row indexes don't change. Any help on this behavior?\n. Thanks. Just figured out, I should put logic in `cellDataGetter` instead of `customRenderer`.\n. ",
    "donnrri": "I have no idea how you worked that out but I am very glad you did. Many thanks !  By the way to stop the header highlighting\n\n .public_fixedDataTable_header:hover .public_fixedDataTableCell_main {\n\n```\nbackground-color: #FFFFFF;\n```\n\n}\n but you probably got that\n. Yes I agree. Just some simple code to start us off. Please\n. Yes just found them , thanks for the examples. A link from the website could have avoided the confusion tho\n. I have no idea how you worked that out but I am very glad you did. Many thanks !  By the way to stop the header highlighting\n\n .public_fixedDataTable_header:hover .public_fixedDataTableCell_main {\n\n```\nbackground-color: #FFFFFF;\n```\n\n}\n but you probably got that\n. Yes I agree. Just some simple code to start us off. Please\n. Yes just found them , thanks for the examples. A link from the website could have avoided the confusion tho\n. ",
    "BracWebb": "Actually, using `fixedDataTableRowLayout_rowWrapper` is not ideal as you should use the `public_` prefixed classnames. Also, as donnrri pointed out, this causes the header to highlight. These are the solutions you are looking for:\r\n\r\nHover and highlight header and body rows:\r\n```\r\n.public_fixedDataTableRow_main:hover .public_fixedDataTableCell_main {\r\n  background-color: yellow;\r\n}\r\n```\r\n\r\nHover and highlight only the header:\r\n```\r\n.public_fixedDataTable_header:hover .public_fixedDataTableCell_main {\r\n  background-color: yellow;\r\n}\r\n```\r\n\r\nHover and highlight only the body rows:\r\n```\r\n.public_fixedDataTable_bodyRow:hover .public_fixedDataTableCell_main {\r\n  background-color: yellow;\r\n}\r\n```\r\n\r\nHover and highlight only the body rows, different for even and odd:\r\n```\r\n.public_fixedDataTableRow_even:hover .public_fixedDataTableCell_main {\r\n  background-color: yellow;\r\n}\r\n.public_fixedDataTableRow_odd:hover .public_fixedDataTableCell_main {\r\n  background-color: green;\r\n}\r\n```. Actually, using `fixedDataTableRowLayout_rowWrapper` is not ideal as you should use the `public_` prefixed classnames. Also, as donnrri pointed out, this causes the header to highlight. These are the solutions you are looking for:\r\n\r\nHover and highlight header and body rows:\r\n```\r\n.public_fixedDataTableRow_main:hover .public_fixedDataTableCell_main {\r\n  background-color: yellow;\r\n}\r\n```\r\n\r\nHover and highlight only the header:\r\n```\r\n.public_fixedDataTable_header:hover .public_fixedDataTableCell_main {\r\n  background-color: yellow;\r\n}\r\n```\r\n\r\nHover and highlight only the body rows:\r\n```\r\n.public_fixedDataTable_bodyRow:hover .public_fixedDataTableCell_main {\r\n  background-color: yellow;\r\n}\r\n```\r\n\r\nHover and highlight only the body rows, different for even and odd:\r\n```\r\n.public_fixedDataTableRow_even:hover .public_fixedDataTableCell_main {\r\n  background-color: yellow;\r\n}\r\n.public_fixedDataTableRow_odd:hover .public_fixedDataTableCell_main {\r\n  background-color: green;\r\n}\r\n```. ",
    "bavicj": "Hi, your solution does not work with fixed columns. Row gets highlighted, but when you scroll horizontally, cells of highlighted row do not 'hide' behind fixed columns, but remains visible (see screenshot)\r\n<img width=\"353\" alt=\"screen shot 2017-03-21 at 15 51 19\" src=\"https://cloud.githubusercontent.com/assets/3510699/24153306/4fde11d0-0e4e-11e7-9a2e-a3f5032a5a30.png\">\r\n. Hi, your solution does not work with fixed columns. Row gets highlighted, but when you scroll horizontally, cells of highlighted row do not 'hide' behind fixed columns, but remains visible (see screenshot)\r\n<img width=\"353\" alt=\"screen shot 2017-03-21 at 15 51 19\" src=\"https://cloud.githubusercontent.com/assets/3510699/24153306/4fde11d0-0e4e-11e7-9a2e-a3f5032a5a30.png\">\r\n. ",
    "tehandyb": "Ah darn I thought it might have something to do with that! Thanks I'll try passing the tooltip function down as a prop. The refs in my child component wouldn't get blown away tho would they?\n\nEDIT: looks like using the ref function of the child of the cellRenderer component works! \n. Ah darn I thought it might have something to do with that! Thanks I'll try passing the tooltip function down as a prop. The refs in my child component wouldn't get blown away tho would they?\n\nEDIT: looks like using the ref function of the child of the cellRenderer component works! \n. ",
    "ADahmani": "I have the same problem with my component, have you figured out a solution for this problem ?\n. Yeah, that was what I ended up doing when I had that problem, I noticed that a native normal dropdown works well, so that fixed my problem.\n. I have the same problem with my component, have you figured out a solution for this problem ?\n. Yeah, that was what I ended up doing when I had that problem, I noticed that a native normal dropdown works well, so that fixed my problem.\n. ",
    "thechrisproject": "We ran into this problem. One of our designers had solved it in a similar situation by removing all the overflow:hidden styles and using a series of descending z-indexes on the rows. The proved very difficult. We were going to render the dropdown outside the table and then try to position it on the table when clicking the dropdown arrow, but we just opted for using a very standard dropdown instead; it renders just fine over everything else.\n. We ran into this problem. One of our designers had solved it in a similar situation by removing all the overflow:hidden styles and using a series of descending z-indexes on the rows. The proved very difficult. We were going to render the dropdown outside the table and then try to position it on the table when clicking the dropdown arrow, but we just opted for using a very standard dropdown instead; it renders just fine over everything else.\n. ",
    "mpritchin": "+1.\nYou can't just use something like [react-select](https://github.com/JedWatson/react-select) (but i need a component with autocomplete). \nIt would be great if the issue was fixed.\n. Possible workaround:\n\n``` javascript\n\nimport FixedDataTable from \"fixed-data-table\";\nimport jQuery from 'jquery';\n\nclass Cell {\n...\n  componentDidUpdate() {\n      if(this.props.isSelectedCell) {\n        //fix z-index\n        jQuery(this.refs.cell).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().css('z-index', 20);\n      } else {\n        jQuery(this.refs.cell).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().css('z-index', 0);\n      }\n    }\n...\n\n  render() {\n    return (\n      <FixedDataTable.Cell>\n         <div ref=\"cell\">\n           <YourBootstrapDropdown/>\n         </div>\n      </FixedDataTable.Cell>\n    )\n  }\n...\n}\n```\n\nIt looks awful, but it works (:\n\nUPDATED:\n\nInstead:\n\n``` javascript\njQuery(this.refs.cell).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().css('z-index', 20); \n```\n\nbetter use:  \n\n``` javascript\njQuery(this.refs.cell).closest('.fixedDataTableRowLayout_rowWrapper').css('z-index', 20);\n```\n. @fobbyal Yes. I've added comment in [#379](https://github.com/facebook/fixed-data-table/issues/379) with small example\n. I use react-select in cells.\r\nIt looks somethink like that:\r\n\r\n``` javascript\r\n\r\nimport jQuery from 'jquery'\r\nimport FixedDataTable from 'fixed-data-table' \r\nimport Select from 'react-select'\r\n\r\nclass ReactSelectCell {\r\n\r\n...\r\n\r\n  onOpen = () => {\r\n      jQuery(this.refs.cell).closest('.fixedDataTableRowLayout_rowWrapper').css('z-index', 20);\r\n  }\r\n\r\n  onClose = () => {\r\n     jQuery(this.refs.cell).closest('.fixedDataTableRowLayout_rowWrapper').css('z-index', 0);\r\n  }\r\n\r\n...\r\n\r\n  render(){\r\n    <FixedDataTable.Cell>\r\n      <div ref=\"cell\">\r\n          <Select\r\n            ...\r\n            onOpen={this.onOpen}\r\n            onClose={this.onClose}\r\n          />\r\n        </div>\r\n    </FixedDataTable.Cell>\r\n  }\r\n}\r\n\r\n```\r\n\r\nAlso need modify standard styles ( delete all 'overflow: hidden;'):\r\n\r\n``` css\r\n.fixedDataTableCellGroupLayout_cellGroup {\r\n ...\r\n  /*overflow: hidden;*/\r\n ...\r\n}\r\n\r\n.fixedDataTableRowLayout_main {\r\n...\r\n  /*overflow: hidden;*/\r\n...\r\n}\r\n\r\n\r\n.fixedDataTableCellLayout_main {\r\n...\r\n  /*overflow: hidden;*/\r\n  ...\r\n}\r\n\r\n.fixedDataTableLayout_rowsContainer {\r\n...\r\n  /*overflow: hidden;*/\r\n...\r\n}\r\n\r\n```\r\n. +1.\nYou can't just use something like [react-select](https://github.com/JedWatson/react-select) (but i need a component with autocomplete). \nIt would be great if the issue was fixed.\n. Possible workaround:\n\n``` javascript\n\nimport FixedDataTable from \"fixed-data-table\";\nimport jQuery from 'jquery';\n\nclass Cell {\n...\n  componentDidUpdate() {\n      if(this.props.isSelectedCell) {\n        //fix z-index\n        jQuery(this.refs.cell).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().css('z-index', 20);\n      } else {\n        jQuery(this.refs.cell).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().css('z-index', 0);\n      }\n    }\n...\n\n  render() {\n    return (\n      <FixedDataTable.Cell>\n         <div ref=\"cell\">\n           <YourBootstrapDropdown/>\n         </div>\n      </FixedDataTable.Cell>\n    )\n  }\n...\n}\n```\n\nIt looks awful, but it works (:\n\nUPDATED:\n\nInstead:\n\n``` javascript\njQuery(this.refs.cell).parent().parent().parent().parent().parent().parent().parent().parent().parent().parent().css('z-index', 20); \n```\n\nbetter use:  \n\n``` javascript\njQuery(this.refs.cell).closest('.fixedDataTableRowLayout_rowWrapper').css('z-index', 20);\n```\n. @fobbyal Yes. I've added comment in [#379](https://github.com/facebook/fixed-data-table/issues/379) with small example\n. I use react-select in cells.\r\nIt looks somethink like that:\r\n\r\n``` javascript\r\n\r\nimport jQuery from 'jquery'\r\nimport FixedDataTable from 'fixed-data-table' \r\nimport Select from 'react-select'\r\n\r\nclass ReactSelectCell {\r\n\r\n...\r\n\r\n  onOpen = () => {\r\n      jQuery(this.refs.cell).closest('.fixedDataTableRowLayout_rowWrapper').css('z-index', 20);\r\n  }\r\n\r\n  onClose = () => {\r\n     jQuery(this.refs.cell).closest('.fixedDataTableRowLayout_rowWrapper').css('z-index', 0);\r\n  }\r\n\r\n...\r\n\r\n  render(){\r\n    <FixedDataTable.Cell>\r\n      <div ref=\"cell\">\r\n          <Select\r\n            ...\r\n            onOpen={this.onOpen}\r\n            onClose={this.onClose}\r\n          />\r\n        </div>\r\n    </FixedDataTable.Cell>\r\n  }\r\n}\r\n\r\n```\r\n\r\nAlso need modify standard styles ( delete all 'overflow: hidden;'):\r\n\r\n``` css\r\n.fixedDataTableCellGroupLayout_cellGroup {\r\n ...\r\n  /*overflow: hidden;*/\r\n ...\r\n}\r\n\r\n.fixedDataTableRowLayout_main {\r\n...\r\n  /*overflow: hidden;*/\r\n...\r\n}\r\n\r\n\r\n.fixedDataTableCellLayout_main {\r\n...\r\n  /*overflow: hidden;*/\r\n  ...\r\n}\r\n\r\n.fixedDataTableLayout_rowsContainer {\r\n...\r\n  /*overflow: hidden;*/\r\n...\r\n}\r\n\r\n```\r\n. ",
    "beharguy": "+1\nI also need a solution for the issue.\nIt would be great if the issue was fixed.\n. +1\nI also need a solution for the issue.\nIt would be great if the issue was fixed.\n. ",
    "warpig9": "+1\n. +1\n. +1\n. +1\n. ",
    "sriram15690": "In the above example, we are talking about mutation of a single row. In my scenario, multiple rows change and new rows get added, yet the table doesn't reload. Let me elaborate:  \r\n\r\nIn my Webpage, I have a react-fixed-table. From an Ajax call, I receive the gridData. On the first instance, the data loads in the table. When I do some manipulations on the page(other than the dataGrid) and I trigger the Ajax call due to a form submit to reload the dataGrid with new data, the grid doesn't reload with the new data. . In the above example, we are talking about mutation of a single row. In my scenario, multiple rows change and new rows get added, yet the table doesn't reload. Let me elaborate:  \r\n\r\nIn my Webpage, I have a react-fixed-table. From an Ajax call, I receive the gridData. On the first instance, the data loads in the table. When I do some manipulations on the page(other than the dataGrid) and I trigger the Ajax call due to a form submit to reload the dataGrid with new data, the grid doesn't reload with the new data. . ",
    "tripuracherukuri": "Hello,\r\n\r\nIn my project i'm using react fixed-data-table. I got an issue \"Uncaught TypeError: r.openDeletePopUp\" is not a function with triggering event by onClick on button in data table. Here is my code please help me out\r\n\r\n`import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Table, Column, Cell} from 'fixed-data-table';\r\nimport 'fixed-data-table/dist/fixed-data-table.css';\r\n\r\n\r\nButtonDelete(cellData, cellDataKey, rowData, rowIndex){\r\nvar _id=(JSON.stringify(rowData._id)).replace(/\\\"/g, \"\");\r\nvar isDelete=(JSON.stringify(rowData.isDelete)).replace(/\\\"/g, \"\");\r\n\r\nreturn(\r\n  <span className=\"btn btn-primary btnDel\" type=\"button\"  style={{marginLeft: 10}} onClick={() => this.openDeletePopUp(_id, isDelete)}>\r\n    <span style={{fontFamily: 'verdana',fontSize: 12}} >DELETE</span>\r\n  </span>\r\n)\r\n}\r\n\r\nopenDeletePopUp(_id,value){\r\n\r\n$('#OpenDeleteComment').modal('show');\r\n}\r\n`\r\n\r\n`<Table\r\n  rowHeight={75}\r\n  headerHeight={50}\r\n  rowGetter={(rowIndex) => {\r\n        return this.state.categories[rowIndex]\r\n      }}\r\n  rowsCount={this.state.categories.length}\r\n  width={1500}\r\n  height={500}\r\n  {...this.props}>\r\n  <Column\r\n    cellRenderer= {this.ButtonDelete}\r\n    fixed={true}\r\n    width={130}\r\n  />\r\n</Table>`\r\n\r\nThanks in advance. Hello,\r\n\r\nIn my project i'm using react fixed-data-table. I got an issue \"Uncaught TypeError: r.openDeletePopUp\" is not a function with triggering event by onClick on button in data table. Here is my code please help me out\r\n\r\n`import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Table, Column, Cell} from 'fixed-data-table';\r\nimport 'fixed-data-table/dist/fixed-data-table.css';\r\n\r\n\r\nButtonDelete(cellData, cellDataKey, rowData, rowIndex){\r\nvar _id=(JSON.stringify(rowData._id)).replace(/\\\"/g, \"\");\r\nvar isDelete=(JSON.stringify(rowData.isDelete)).replace(/\\\"/g, \"\");\r\n\r\nreturn(\r\n  <span className=\"btn btn-primary btnDel\" type=\"button\"  style={{marginLeft: 10}} onClick={() => this.openDeletePopUp(_id, isDelete)}>\r\n    <span style={{fontFamily: 'verdana',fontSize: 12}} >DELETE</span>\r\n  </span>\r\n)\r\n}\r\n\r\nopenDeletePopUp(_id,value){\r\n\r\n$('#OpenDeleteComment').modal('show');\r\n}\r\n`\r\n\r\n`<Table\r\n  rowHeight={75}\r\n  headerHeight={50}\r\n  rowGetter={(rowIndex) => {\r\n        return this.state.categories[rowIndex]\r\n      }}\r\n  rowsCount={this.state.categories.length}\r\n  width={1500}\r\n  height={500}\r\n  {...this.props}>\r\n  <Column\r\n    cellRenderer= {this.ButtonDelete}\r\n    fixed={true}\r\n    width={130}\r\n  />\r\n</Table>`\r\n\r\nThanks in advance. ",
    "alolis": "@ehzhang Ah damn :( Thanks for your reply though!\n. @ehzhang Ah damn :( Thanks for your reply though!\n. ",
    "bolinfest": "Here is our current workaround, which isn't so great: https://github.com/facebooknuclideapm/fixed-data-table-for-atom/commit/dbac0afcc42feb13a8cc6e0d4010e7d75bbe7ee5.\n. LGTM. Running:\n\n```\n!!(typeof global === 'object' && global.atom)\n```\n\nin Atom evaluates to `true`.\n. /cc @jamesgpearce\n. Here is our current workaround, which isn't so great: https://github.com/facebooknuclideapm/fixed-data-table-for-atom/commit/dbac0afcc42feb13a8cc6e0d4010e7d75bbe7ee5.\n. LGTM. Running:\n\n```\n!!(typeof global === 'object' && global.atom)\n```\n\nin Atom evaluates to `true`.\n. /cc @jamesgpearce\n. ",
    "vladfulgeanu": "Thanks for the answer.\nDo you have a sample code? I've never used a generator before.\n. @pieterv yes, some sample code would really be helpful, because I don't know how would I use the rowGetter function in this case and, also, how would I define a store to be mapped to a row (so that it has all the information for each column in that row), given that the table now is initialized by Columns.\n. @ehzhang @pieterv so that would mean I'd have to have a separate store for each cell or for each column?\n. @ehzhang @pieterv I think your two answers don't represent the same idea. Either use `rowGetter` to get the data for each cell from its store, or use it just to _render_ the cell component and its data will be taken from its store.\n\nI'd really appreciate a thorough explanation :)\n. Thanks for the answer.\nDo you have a sample code? I've never used a generator before.\n. @pieterv yes, some sample code would really be helpful, because I don't know how would I use the rowGetter function in this case and, also, how would I define a store to be mapped to a row (so that it has all the information for each column in that row), given that the table now is initialized by Columns.\n. @ehzhang @pieterv so that would mean I'd have to have a separate store for each cell or for each column?\n. @ehzhang @pieterv I think your two answers don't represent the same idea. Either use `rowGetter` to get the data for each cell from its store, or use it just to _render_ the cell component and its data will be taken from its store.\n\nI'd really appreciate a thorough explanation :)\n. ",
    "HugoDaniel": "@UlricGan check out my lazy arse patch: #248 \n. @sidnair  unfortunatelly it won't be solved because when overflowY is \"hidden\" the scroll event is still handled by the table (even though it does nothing) and not passed to the window. This is particularly annoying when the table is located bellow the fold: the user is scrolling down the page and as soon as the mouse touches the head of the table the document scrolling stops and the event is handled by the table. Leaving only a few pixels of the table header visible above the fold (because the page scroll was stopped). \n. @UlricGan check out my lazy arse patch: #248 \n. @sidnair  unfortunatelly it won't be solved because when overflowY is \"hidden\" the scroll event is still handled by the table (even though it does nothing) and not passed to the window. This is particularly annoying when the table is located bellow the fold: the user is scrolling down the page and as soon as the mouse touches the head of the table the document scrolling stops and the event is handled by the table. Leaving only a few pixels of the table header visible above the fold (because the page scroll was stopped). \n. ",
    "YoYuUm": "I also get an error after the bundle is ready in webpack:\n\n```\nERROR in ./~/fixed-data-table/~/react-for-atom/main.js\nModule parse failed: /deck/node_modules/fixed-data-table/node_modules/react-for-atom/main.js Line 28: Unexpected token )\nYou may need an appropriate loader to handle this file type.\n|     var addons;\n|     Object.defineProperty(React, 'addons', {\n|       get() {\n|         if (!addons) {\n|           React = require('react/addons');\n @ ./~/fixed-data-table/internal/React.js 18:10-35\n```\n\nI'm currently running 0.4.4\n. I also get an error after the bundle is ready in webpack:\n\n```\nERROR in ./~/fixed-data-table/~/react-for-atom/main.js\nModule parse failed: /deck/node_modules/fixed-data-table/node_modules/react-for-atom/main.js Line 28: Unexpected token )\nYou may need an appropriate loader to handle this file type.\n|     var addons;\n|     Object.defineProperty(React, 'addons', {\n|       get() {\n|         if (!addons) {\n|           React = require('react/addons');\n @ ./~/fixed-data-table/internal/React.js 18:10-35\n```\n\nI'm currently running 0.4.4\n. ",
    "HankMcCoy": "This breaks with my Webpack config. It looks like `react-for-atom` assumes the presence of [ES6 object method shorthand syntax](http://babeljs.io/docs/learn-es2015/#enhanced-object-literals), which is a fair guess in the context of Atom, but not in a browser. You have the `require` call within a conditional check, but at compile time Webpack doesn't know which way that conditional is going to go so it attempts to pull in both `react` and `react-for-atom`, resulting in the error.\n\nI have no idea what the right way to support Atom as a platform would be, but this approach definitely results in problems for those of us attempting to use `fixed-data-table` in the browser environment via NPM/Webpack. I'd really prefer to not have to modify my existing Webpack config in order to get this working.\n\nMomentary annoyances aside, my thanks to you and the rest of the contributors for your work on this project!\n. This breaks with my Webpack config. It looks like `react-for-atom` assumes the presence of [ES6 object method shorthand syntax](http://babeljs.io/docs/learn-es2015/#enhanced-object-literals), which is a fair guess in the context of Atom, but not in a browser. You have the `require` call within a conditional check, but at compile time Webpack doesn't know which way that conditional is going to go so it attempts to pull in both `react` and `react-for-atom`, resulting in the error.\n\nI have no idea what the right way to support Atom as a platform would be, but this approach definitely results in problems for those of us attempting to use `fixed-data-table` in the browser environment via NPM/Webpack. I'd really prefer to not have to modify my existing Webpack config in order to get this working.\n\nMomentary annoyances aside, my thanks to you and the rest of the contributors for your work on this project!\n. ",
    "francescogior": "I think this would be very useful too\n. I think this would be very useful too\n. ",
    "nelix": "This is one of the only pure react scrollbars, most others wrap jquery plugins that mutate the dom and don't perform well.\n\nI would love to see this as a stand alone library.\n. This is one of the only pure react scrollbars, most others wrap jquery plugins that mutate the dom and don't perform well.\n\nI would love to see this as a stand alone library.\n. ",
    "rileytg": "this behavior has brought me to :sob: over the last few hours.\n\nso in future versions, you will allow us to provide something like shouldComponentUpdate function to Table or Column?\n. this behavior has brought me to :sob: over the last few hours.\n\nso in future versions, you will allow us to provide something like shouldComponentUpdate function to Table or Column?\n. ",
    "kabordonaro": "Is there any progress on #221?\n. Is there any progress on #221?\n. ",
    "alistairjcbrown": ":+1: to this change - being able to conditionally have the scrolling bubble to the page and not effect the table is very useful for large tables which required a significant proportion of the page.\n\nMy use case is pretty much as @HugoDaniel describes; I have a page with text at the top and a table at the bottom. The table is off screen, but when scrolling the page, as soon as the mouse is over the table the scroll event is consumed by the table. At this point, the table is usually only half in view.\n\nThe work around I used was to cover the table with a transparent div, so the scroll events are on that div and don't get swallowed by the table. Once the table is scrolled into view the covering div is removed.\nHowever, this prevents interacting with the table (eg. clicking) until the covering div is removed.\n. :+1: to this change - being able to conditionally have the scrolling bubble to the page and not effect the table is very useful for large tables which required a significant proportion of the page.\n\nMy use case is pretty much as @HugoDaniel describes; I have a page with text at the top and a table at the bottom. The table is off screen, but when scrolling the page, as soon as the mouse is over the table the scroll event is consumed by the table. At this point, the table is usually only half in view.\n\nThe work around I used was to cover the table with a transparent div, so the scroll events are on that div and don't get swallowed by the table. Once the table is scrolled into view the covering div is removed.\nHowever, this prevents interacting with the table (eg. clicking) until the covering div is removed.\n. ",
    "lawrencetvo": "Is there no way to do this via. inline css?\n. Is there no way to do this via. inline css?\n. ",
    "Techwraith": "Yep, we're seeing this too:\n\n![pasted image at 2015_09_04 02_33 pm](https://cloud.githubusercontent.com/assets/136558/9693184/37c41e80-5303-11e5-8c3f-740033069d01.png)\n. Yep, we're seeing this too:\n\n![pasted image at 2015_09_04 02_33 pm](https://cloud.githubusercontent.com/assets/136558/9693184/37c41e80-5303-11e5-8c3f-740033069d01.png)\n. ",
    "isaacbernat": "+1, still happening. \n\n<img width=\"1440\" alt=\"screen shot 2016-02-16 at 11 20 07 2\" src=\"https://cloud.githubusercontent.com/assets/2509809/13073507/663e6dc4-d49f-11e5-8fe9-11679ad258e8.png\">\n. +1, still happening. \n\n<img width=\"1440\" alt=\"screen shot 2016-02-16 at 11 20 07 2\" src=\"https://cloud.githubusercontent.com/assets/2509809/13073507/663e6dc4-d49f-11e5-8fe9-11679ad258e8.png\">\n. ",
    "Enet4": "Even if performance is not a concern, it seems that FixedDataTable does not support a separation of entries by pages right off the bat. This still contains some tricky logic, such as which page numbers to show and how to render them.\n. Even if performance is not a concern, it seems that FixedDataTable does not support a separation of entries by pages right off the bat. This still contains some tricky logic, such as which page numbers to show and how to render them.\n. ",
    "lastlegion": "Yes but it would be great to have an example of this implemented on the examples page.\n. Yes but it would be great to have an example of this implemented on the examples page.\n. ",
    "laramlewis": "In addition to the problem above, if you tab across to a cell value that is not visible (i.e. horizontal scrolling required), the current row scrolls horizontally, but the other rows remain in place. As you tab\nto subsequent rows, each row scrolls differently resulting in the cells of the tabbed rows being out of alignment (see screen shot below).\n\nScreen shot:\n<img width=\"1014\" alt=\"screen shot 2016-01-15 at 9 44 04 pm\" src=\"https://cloud.githubusercontent.com/assets/13322995/12370829/196d850e-bbd4-11e5-9b14-e448fe64d5eb.png\">\n\nWe discovered this problem because we are adding custom Column cells that contain menus and when tabbing through the columns, the column headers scroll, but the rows remain in place.\n\nScreen shot:\n<img width=\"1008\" alt=\"screen shot 2016-01-15 at 10 15 09 pm\" src=\"https://cloud.githubusercontent.com/assets/13322995/12370856/814e87ee-bbd5-11e5-9778-9393cd7cf400.png\">\n\nI too am using Chrome on Mac. As mentioned above, FF and Safari don't tab through the cells.\n\nAny guidance on how to go about fixing this would be much appreciated.\n. In addition to the problem above, if you tab across to a cell value that is not visible (i.e. horizontal scrolling required), the current row scrolls horizontally, but the other rows remain in place. As you tab\nto subsequent rows, each row scrolls differently resulting in the cells of the tabbed rows being out of alignment (see screen shot below).\n\nScreen shot:\n<img width=\"1014\" alt=\"screen shot 2016-01-15 at 9 44 04 pm\" src=\"https://cloud.githubusercontent.com/assets/13322995/12370829/196d850e-bbd4-11e5-9b14-e448fe64d5eb.png\">\n\nWe discovered this problem because we are adding custom Column cells that contain menus and when tabbing through the columns, the column headers scroll, but the rows remain in place.\n\nScreen shot:\n<img width=\"1008\" alt=\"screen shot 2016-01-15 at 10 15 09 pm\" src=\"https://cloud.githubusercontent.com/assets/13322995/12370856/814e87ee-bbd5-11e5-9778-9393cd7cf400.png\">\n\nI too am using Chrome on Mac. As mentioned above, FF and Safari don't tab through the cells.\n\nAny guidance on how to go about fixing this would be much appreciated.\n. ",
    "davidposin": "@cosminnicula Thanks for the help.  We ended up killing requirejs all together and going with browserify.\n. @cosminnicula Thanks for the help.  We ended up killing requirejs all together and going with browserify.\n. ",
    "daannijkamp": "@ehzhang Yeah, i was too quick (old legacy browser habbit \ud83d\ude10 ) and forgot to close this PR. Sorry about that! \nSomething else,\nI noticed that sometimes variables have been declared, but not been used. For example in [FilterExample.js](https://github.com/facebook/fixed-data-table/blob/master/site/examples/FilterExample.js) the PropTypes variable. Is this done on purpose? Because often you will need PropTypes.\n. @ehzhang Yeah, i was too quick (old legacy browser habbit \ud83d\ude10 ) and forgot to close this PR. Sorry about that! \nSomething else,\nI noticed that sometimes variables have been declared, but not been used. For example in [FilterExample.js](https://github.com/facebook/fixed-data-table/blob/master/site/examples/FilterExample.js) the PropTypes variable. Is this done on purpose? Because often you will need PropTypes.\n. ",
    "3cooper": "Is there any update on this?\n. I am interetested in this as well.  This seems to be a similar discussion - https://github.com/facebook/fixed-data-table/issues/322 - but it doesn't have any answers yet.\n. I'm curious about this as well.  Since the row height can be set, I assume that the row will not grow on its own.  I'd like to know if there is an established pattern for generating the height of dynamic content before it is rendered.  And if it needed to be rendered before I can ask the DOM for its height, is there a way to use the pre-rendered content as the content of my cell when it is later needed.\n. Also, I notice that once a scrollbar appears so that the contents can scroll, if you click a row again, the table with shift down but the scrollbar will not adjust.  Then once you start to scroll up the scroll jumps to the correct position and allows you to scroll the entire table correctly.\n. Here is the code I'm using.  You can check the JSFiddle to see it in action.  Trying to figure this out because without this functionality, we'll have to use a different data grid.\n\n```\n  var Table = FixedDataTable.Table,\n      Column = FixedDataTable.Column,\n      Cell = FixedDataTable.Cell \n      rows = [\n        {\n          items: [ \n            'apple',\n            'orange'\n          ]\n        },\n        {\n          items: [ \n            'dog',\n            'cat'\n          ]\n        },\n        {\n          items: [ \n            'xbox',\n            'playstation'\n          ]\n        },\n        {\n          items: [ \n            'computer',\n            'phone'\n          ]\n        }\n    ];\n\n    var Column1 = React.createElement(Column, {\n        width: 250,\n        header: 'Items',\n        columnKey: 'items',\n        cell: function (_ref) {\n          var rowIndex = _ref.rowIndex;\n          var width = _ref.width;\n          var height = _ref.height;\n          var columnKey = _ref.columnKey;\n          var items = rows[rowIndex][columnKey];\n          var li = [];\n\n          var i = 0;\n          for( i = 0; i < items.length; i++) {\n            li.push( React.createElement(\n              \"li\",\n              {\n                key: items[i]   // not guaranteed to be unique - just for testing\n              },\n              items[i]\n            ));\n          }\n\n          var ol =  React.createElement(\n              \"ol\",\n              null,\n              li\n            );\n\n          return React.createElement( Cell, {\n              width: width,\n              height: height,\n              className: \"my-class\" \n            },\n            ol\n          );\n        } \n      });\n\n    var ResizeTable = React.createClass({\n      displayName: 'ResizeTable',\n      render: function () {\n        var oThis = this;\n        var MyTable = React.createElement(Table, {\n            height: 350,\n            width: 250,\n            rowsCount: rows.length,\n            rowHeight: 50,\n            rowHeightGetter: function rowHeightGetter(index) {\n              var nHeight = 50,\n              oRow = rows[index];\n\n              nHeight += ( oRow.items.length - 1 ) * 15;\n\n              return nHeight;\n            },\n            headerHeight: 40,\n            onRowClick: function(e, index) {\n              rows[index].items.push( 'new item 1' );\n              rows[index].items.push( 'new item 2' );\n              rows[index].items.push( 'new item 3' );\n              rows[index].items.push( 'new item 4' );\n              rows[index].items.push( 'new item 5' );\n              rows[index].items.push( 'new item 6' );\n              rows[index].items.push( 'new item 7' );\n\n              redoTable();\n            }\n          },\n          Column1\n        );\n\n        return React.createElement(\n          'div',\n          null,\n          'My table:',\n          MyTable\n        );\n      }\n    });\n\n    function redoTable() {\n      ReactDOM.render(React.createElement(\n        ResizeTable\n      ), document.getElementById('ResizeTable'));\n    }\n\n    redoTable();\n```\n. Checking if anyone has had time to look at the fiddle.  This is something we need to work.  I don't know if I'm going about it incorrectly, if this can't be done because of performance, or if this is an actual bug.  I know this is a big project, but soon we'll have evaluate different data tables and consider switching.  Any help would be great.\n. I have not found a way around this.  Was hoping to get some sort of confirmation that this was an issue and not something I was doing wrong.  For now I am settling but was hoping this would be fixed in a future release.  I think there is another issue or pull request that deals with this same issue, but I'm on mobile and can't link to it.  Would like a project status to see the chances of an official fix, but no luck yet.  Sorry I don't have better news.\n. I have the same question as johannessjoberg.  I have submitted a few issues with JSFiddles and I haven't even heard if what I found is a bug or if I'm doing something the wrong way.  I understand the devs are very busy, and I appreciate all of Facebook's work on this but I'd like to know if this is something that will continue to evolve and be supported.\n. Does anyone here have experience with FlexTable from react-virtualized?  I have been holding off trying it because this project has worked well, and I've been hoping that we'd get some sort of answer as to the future of this project.  This issue alone is 1 month old and we haven't heard anything as to whether or not this project is abandoned. \n. @rbalicki2 - the fiddles I had were not for this issue.  I was mentioning the fiddles to show that it should have been easy for someone to look at an issue and say yes this is an issue or no you are doing it wrong.\n\nIn case you are still interested, the fiddles are in this issue - https://github.com/facebook/fixed-data-table/issues/326\n. I'm looking for one that supports resizable columns and fixed header.  I also really like the virtual rows.\n. The way we did it was in the method that creates cells.  We only have a quick prototype currently that I need to clean up.  The gist is that when we render the first cell of the last row, we kick off a request to get more rows.  You need to take into account rendering that cell multiple times and if that cell is visible without scrolling - meaning if you only have like 5 rows you will kick off another request for an empty page.\n. Sorry, but I don't know enough about scrolling and how the table handles it to say.\n. One issue with this could be variable row heights.\n. I think it is mandatory, but I could be wrong.  I am now in need of a new infinity scrolling solution since I was updating state in a render method.  Redux is complaining about this.\n. Will this include any issue fixes or merges from other PR's?\n. Is there any update on this?\n. I am interetested in this as well.  This seems to be a similar discussion - https://github.com/facebook/fixed-data-table/issues/322 - but it doesn't have any answers yet.\n. I'm curious about this as well.  Since the row height can be set, I assume that the row will not grow on its own.  I'd like to know if there is an established pattern for generating the height of dynamic content before it is rendered.  And if it needed to be rendered before I can ask the DOM for its height, is there a way to use the pre-rendered content as the content of my cell when it is later needed.\n. Also, I notice that once a scrollbar appears so that the contents can scroll, if you click a row again, the table with shift down but the scrollbar will not adjust.  Then once you start to scroll up the scroll jumps to the correct position and allows you to scroll the entire table correctly.\n. Here is the code I'm using.  You can check the JSFiddle to see it in action.  Trying to figure this out because without this functionality, we'll have to use a different data grid.\n\n```\n  var Table = FixedDataTable.Table,\n      Column = FixedDataTable.Column,\n      Cell = FixedDataTable.Cell \n      rows = [\n        {\n          items: [ \n            'apple',\n            'orange'\n          ]\n        },\n        {\n          items: [ \n            'dog',\n            'cat'\n          ]\n        },\n        {\n          items: [ \n            'xbox',\n            'playstation'\n          ]\n        },\n        {\n          items: [ \n            'computer',\n            'phone'\n          ]\n        }\n    ];\n\n    var Column1 = React.createElement(Column, {\n        width: 250,\n        header: 'Items',\n        columnKey: 'items',\n        cell: function (_ref) {\n          var rowIndex = _ref.rowIndex;\n          var width = _ref.width;\n          var height = _ref.height;\n          var columnKey = _ref.columnKey;\n          var items = rows[rowIndex][columnKey];\n          var li = [];\n\n          var i = 0;\n          for( i = 0; i < items.length; i++) {\n            li.push( React.createElement(\n              \"li\",\n              {\n                key: items[i]   // not guaranteed to be unique - just for testing\n              },\n              items[i]\n            ));\n          }\n\n          var ol =  React.createElement(\n              \"ol\",\n              null,\n              li\n            );\n\n          return React.createElement( Cell, {\n              width: width,\n              height: height,\n              className: \"my-class\" \n            },\n            ol\n          );\n        } \n      });\n\n    var ResizeTable = React.createClass({\n      displayName: 'ResizeTable',\n      render: function () {\n        var oThis = this;\n        var MyTable = React.createElement(Table, {\n            height: 350,\n            width: 250,\n            rowsCount: rows.length,\n            rowHeight: 50,\n            rowHeightGetter: function rowHeightGetter(index) {\n              var nHeight = 50,\n              oRow = rows[index];\n\n              nHeight += ( oRow.items.length - 1 ) * 15;\n\n              return nHeight;\n            },\n            headerHeight: 40,\n            onRowClick: function(e, index) {\n              rows[index].items.push( 'new item 1' );\n              rows[index].items.push( 'new item 2' );\n              rows[index].items.push( 'new item 3' );\n              rows[index].items.push( 'new item 4' );\n              rows[index].items.push( 'new item 5' );\n              rows[index].items.push( 'new item 6' );\n              rows[index].items.push( 'new item 7' );\n\n              redoTable();\n            }\n          },\n          Column1\n        );\n\n        return React.createElement(\n          'div',\n          null,\n          'My table:',\n          MyTable\n        );\n      }\n    });\n\n    function redoTable() {\n      ReactDOM.render(React.createElement(\n        ResizeTable\n      ), document.getElementById('ResizeTable'));\n    }\n\n    redoTable();\n```\n. Checking if anyone has had time to look at the fiddle.  This is something we need to work.  I don't know if I'm going about it incorrectly, if this can't be done because of performance, or if this is an actual bug.  I know this is a big project, but soon we'll have evaluate different data tables and consider switching.  Any help would be great.\n. I have not found a way around this.  Was hoping to get some sort of confirmation that this was an issue and not something I was doing wrong.  For now I am settling but was hoping this would be fixed in a future release.  I think there is another issue or pull request that deals with this same issue, but I'm on mobile and can't link to it.  Would like a project status to see the chances of an official fix, but no luck yet.  Sorry I don't have better news.\n. I have the same question as johannessjoberg.  I have submitted a few issues with JSFiddles and I haven't even heard if what I found is a bug or if I'm doing something the wrong way.  I understand the devs are very busy, and I appreciate all of Facebook's work on this but I'd like to know if this is something that will continue to evolve and be supported.\n. Does anyone here have experience with FlexTable from react-virtualized?  I have been holding off trying it because this project has worked well, and I've been hoping that we'd get some sort of answer as to the future of this project.  This issue alone is 1 month old and we haven't heard anything as to whether or not this project is abandoned. \n. @rbalicki2 - the fiddles I had were not for this issue.  I was mentioning the fiddles to show that it should have been easy for someone to look at an issue and say yes this is an issue or no you are doing it wrong.\n\nIn case you are still interested, the fiddles are in this issue - https://github.com/facebook/fixed-data-table/issues/326\n. I'm looking for one that supports resizable columns and fixed header.  I also really like the virtual rows.\n. The way we did it was in the method that creates cells.  We only have a quick prototype currently that I need to clean up.  The gist is that when we render the first cell of the last row, we kick off a request to get more rows.  You need to take into account rendering that cell multiple times and if that cell is visible without scrolling - meaning if you only have like 5 rows you will kick off another request for an empty page.\n. Sorry, but I don't know enough about scrolling and how the table handles it to say.\n. One issue with this could be variable row heights.\n. I think it is mandatory, but I could be wrong.  I am now in need of a new infinity scrolling solution since I was updating state in a render method.  Redux is complaining about this.\n. Will this include any issue fixes or merges from other PR's?\n. ",
    "Robsonsjre": "+1\n. Any news? Having the same issue\n. - 1\n. +1\n. Any news? Having the same issue\n. - 1\n. ",
    "jamesseanwright": "To dig this up from last year, I definitely would not use this unless you moved to `table` elements over `div`s. `table` is semantic, whereas `div` isn't. Are there any plans to do this? \n. To dig this up from last year, I definitely would not use this unless you moved to `table` elements over `div`s. `table` is semantic, whereas `div` isn't. Are there any plans to do this? \n. ",
    "cthanhnguyen": "+1\n. +1\n. ",
    "culshaw": "+1. +1. ",
    "Robinson7D": "I agree that there should be code connected to the examples (preferably very concise code).\n\nThough for those willing to dig a little, all of these examples seem to be available in the /site/examples folder of this project. \n\nFor example, the JSON / Object structure is available here:\nhttps://github.com/facebook/fixed-data-table/blob/master/site/examples/FakeObjectDataListStore.js\n. I agree that there should be code connected to the examples (preferably very concise code).\n\nThough for those willing to dig a little, all of these examples seem to be available in the /site/examples folder of this project. \n\nFor example, the JSON / Object structure is available here:\nhttps://github.com/facebook/fixed-data-table/blob/master/site/examples/FakeObjectDataListStore.js\n. ",
    "csman": "The link above is dead. It would be trivial to include the format of JSON used in the example, why not just make people's lives easier and show the format, in comments or something?\n. The link above is dead. It would be trivial to include the format of JSON used in the example, why not just make people's lives easier and show the format, in comments or something?\n. ",
    "filipalacerda": "I believe you can find the same example here:\nhttps://github.com/facebook/fixed-data-table/blob/master/examples/helpers/FakeObjectDataListStore.js\n. I believe you can find the same example here:\nhttps://github.com/facebook/fixed-data-table/blob/master/examples/helpers/FakeObjectDataListStore.js\n. ",
    "gmeroz": "I've having the same issue with property 'oneOf'\n. I've having the same issue with property 'oneOf'\n. ",
    "LukevdPalen": "+1\n. +1\n. ",
    "igl": "+1\n. +1\n. ",
    "everblaze": "+1\n. +1\n. ",
    "hycner": "+1\n. +1\n. ",
    "mychaelgo": "+1\nsame error as @eriknyk\n. +1\n. +1\nsame error as @eriknyk\n. +1\n. ",
    "zedd45": "I see this issue is still open.  My CI Build is failing on peer deps because we're using React 15.  Will there be an update for this?\n. I see this issue is still open.  My CI Build is failing on peer deps because we're using React 15.  Will there be an update for this?\n. ",
    "tlrobinson": "> you should be able to build this in your cell by measuring all the column content after render then set the width\n\nThis is what I'm doing. Initially I render the cells to be their full widths (either give the columns very wide widths or ensure they can overflow their container) then in componentDidUpdate I measure the cell widths and set a state variable with them to be used for the Column widths on all subsequent renders. It happens fast enough you don't see the incorrectly sized columns (but if it did you could hide the table or show a loading screen or something on top)\n\nBe aware that it will only take into account the visible rows (and the few extra buffer rows) but usually it works ok, depending on your data.\n\nHere's my `componentDidUpdate`:\n\n```\n    componentDidUpdate() {\n        if (!this.state.columnWidths) {\n            let tableElement = React.findDOMNode(this.refs.table);\n            let columnWidths = [];\n            for (let rowElement of tableElement.querySelectorAll(\".fixedDataTableRowLayout_rowWrapper\")) {\n                for (let [index, cellContentElement] of Object.entries(rowElement.querySelectorAll(\".public_fixedDataTableCell_cellContent\"))) {\n                    columnWidths[index] = Math.max(columnWidths[index] || 0, cellContentElement.offsetWidth);\n                }\n            }\n            this.setState({ columnWidths });\n        }\n    }\n```\n. > you should be able to build this in your cell by measuring all the column content after render then set the width\n\nThis is what I'm doing. Initially I render the cells to be their full widths (either give the columns very wide widths or ensure they can overflow their container) then in componentDidUpdate I measure the cell widths and set a state variable with them to be used for the Column widths on all subsequent renders. It happens fast enough you don't see the incorrectly sized columns (but if it did you could hide the table or show a loading screen or something on top)\n\nBe aware that it will only take into account the visible rows (and the few extra buffer rows) but usually it works ok, depending on your data.\n\nHere's my `componentDidUpdate`:\n\n```\n    componentDidUpdate() {\n        if (!this.state.columnWidths) {\n            let tableElement = React.findDOMNode(this.refs.table);\n            let columnWidths = [];\n            for (let rowElement of tableElement.querySelectorAll(\".fixedDataTableRowLayout_rowWrapper\")) {\n                for (let [index, cellContentElement] of Object.entries(rowElement.querySelectorAll(\".public_fixedDataTableCell_cellContent\"))) {\n                    columnWidths[index] = Math.max(columnWidths[index] || 0, cellContentElement.offsetWidth);\n                }\n            }\n            this.setState({ columnWidths });\n        }\n    }\n```\n. ",
    "henryptung": "We just ran into this; to whomever ends up working on this, would be awesome if the code had a working `z-index`less approach to the layout, since `z-index` interacts across components and DOM hierarchy boundaries and globally couples components together API-wise (requires changes in arbitrary other app components to compensate).\n. @bholdt Aye, the issue isn't that we want a hardcoded z-index - the hardcoded z-index _is the issue_, and we'd like to get rid of it :stuck_out_tongue: \n. We just ran into this; to whomever ends up working on this, would be awesome if the code had a working `z-index`less approach to the layout, since `z-index` interacts across components and DOM hierarchy boundaries and globally couples components together API-wise (requires changes in arbitrary other app components to compensate).\n. @bholdt Aye, the issue isn't that we want a hardcoded z-index - the hardcoded z-index _is the issue_, and we'd like to get rid of it :stuck_out_tongue: \n. ",
    "bholdt": "Turns out there already is a hard-coded z-index, and it is set to 99.\nhttps://github.com/facebook/fixed-data-table/pull/138\n. Ha ha. That indeed makes more sense :)\n\nOn Tuesday, 12 April 2016, henryptung notifications@github.com wrote:\n\n> @bholdt https://github.com/bholdt Aye, the issue isn't that we want a\n> hardcoded z-index - the hardcoded z-index _is the issue_, and we'd like\n> to get rid of it [image: :stuck_out_tongue:]\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/271#issuecomment-208742161\n. Turns out there already is a hard-coded z-index, and it is set to 99.\nhttps://github.com/facebook/fixed-data-table/pull/138\n. Ha ha. That indeed makes more sense :)\n\nOn Tuesday, 12 April 2016, henryptung notifications@github.com wrote:\n\n> @bholdt https://github.com/bholdt Aye, the issue isn't that we want a\n> hardcoded z-index - the hardcoded z-index _is the issue_, and we'd like\n> to get rid of it [image: :stuck_out_tongue:]\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/271#issuecomment-208742161\n. ",
    "alphapseudo": "I was able to resolve this by delaying the calls on the current stack by using `setTimeout(function() { //Some JQ },0);` \n. I was able to resolve this by delaying the calls on the current stack by using `setTimeout(function() { //Some JQ },0);` \n. ",
    "panayi": "I'm seeing the same issue, albeit only when the number of rows is really large.\n. I'm seeing the same issue, albeit only when the number of rows is really large.\n. ",
    "giogonzo": "Oh, thanks!\n\nstill, I'm confused: ideally, I'd want to have a `footerRenderer` at the table level, i.e. rendering a sticky footer with data not necessarily per-column.\n\nMy use case now would be: show additional data on a selected row only when the row is selected, otherwise show nothing (no footer)\n\nI know there are ways to do this outside of FDT easily, e.g. by rendering a component in overlay or rendering a component right below the table, and then resize table in height.\nBoth approaches have drawbacks though (either you hide part of the scroll area with first solution, or you have to manually resize the table in height with the second)\n\nAm I missing something?\n. Ok, thanks for your input here - I'll try it and come back here if anything interesting comes out\n\nThanks!\n. Oh, thanks!\n\nstill, I'm confused: ideally, I'd want to have a `footerRenderer` at the table level, i.e. rendering a sticky footer with data not necessarily per-column.\n\nMy use case now would be: show additional data on a selected row only when the row is selected, otherwise show nothing (no footer)\n\nI know there are ways to do this outside of FDT easily, e.g. by rendering a component in overlay or rendering a component right below the table, and then resize table in height.\nBoth approaches have drawbacks though (either you hide part of the scroll area with first solution, or you have to manually resize the table in height with the second)\n\nAm I missing something?\n. Ok, thanks for your input here - I'll try it and come back here if anything interesting comes out\n\nThanks!\n. ",
    "vincent-io": "+1\n\nIt seems that development on fixed-data-table has slowed down, any news on this?\n. +1\n\nIt seems that development on fixed-data-table has slowed down, any news on this?\n. ",
    "vysinsky": "+1\n. +1\n. ",
    "di5ko": "+1\n. +1\n. ",
    "philipelisha": "+1\n. +1\n. ",
    "davidlashlee": "+1\n. +1\n. ",
    "matthewbadeau": "Forgot to sign CLA\nEDIT: Misunderstood \"CLA Signed\" tag\n. Forgot to sign CLA\nEDIT: Misunderstood \"CLA Signed\" tag\n. ",
    "anytimecoder": "On second thought, there might be cases (I'm sure there are) where the cellRenderer (as it's external) renders cell based on RowData or ColumnData and ignoring those on shouldComponentUpdate will break the table in that particular case.\nAlthough it still not efficient that the whole row (and probably column) is re-rendered on one cell change.\n. As far as I can see this issue will be resolved in version 0.6 by providing the option of using custom components\n. As far as I can see issue #286  will be resolved in version 0.6 by providing the option of using custom components\n. On second thought, there might be cases (I'm sure there are) where the cellRenderer (as it's external) renders cell based on RowData or ColumnData and ignoring those on shouldComponentUpdate will break the table in that particular case.\nAlthough it still not efficient that the whole row (and probably column) is re-rendered on one cell change.\n. As far as I can see this issue will be resolved in version 0.6 by providing the option of using custom components\n. As far as I can see issue #286  will be resolved in version 0.6 by providing the option of using custom components\n. ",
    "josoroma": "Fetching from a remote server and trying to see how to emulate pagination on the client.\n\nThanks @jasongonzales23 \n. Fetching from a remote server and trying to see how to emulate pagination on the client.\n\nThanks @jasongonzales23 \n. ",
    "liesislukas": "http://slides.com/rovolutionary/deck#/13 that may help\n. Chrome Version 46.0.2490.86 (64-bit) OS X El capitan\n\nif i use browser search on they json data example it won't search on rows that are not visible and no breaks appear.\n. have you tried with flexbox model?\n\nhttps://facebook.github.io/fixed-data-table/example-flexgrow.html\n. http://slides.com/rovolutionary/deck#/13 that may help\n. Chrome Version 46.0.2490.86 (64-bit) OS X El capitan\n\nif i use browser search on they json data example it won't search on rows that are not visible and no breaks appear.\n. have you tried with flexbox model?\n\nhttps://facebook.github.io/fixed-data-table/example-flexgrow.html\n. ",
    "deju": "@liesislukas awesome. @samgqroberts  I need too.. @KamranAsif  All right.. @cyranosky [view this](https://github.com/schrodinger/fixed-data-table-2). @liesislukas awesome. @samgqroberts  I need too.. @KamranAsif  All right.. @cyranosky [view this](https://github.com/schrodinger/fixed-data-table-2). ",
    "amit1911": "+1\n. +1\n. +1\n. +1\n. ",
    "mandado": "How i can make this table responsive?\n. @muraveill i'm look this package. thanks.\n. How i can make this table responsive?\n. @muraveill i'm look this package. thanks.\n. ",
    "godfreyhobbs": "+1. +1. ",
    "julianwachholz": "See #321 \n. See #321 \n. ",
    "danbovey": "_Posting this here because it seems to be the most general issue surrounding custom row height._\n\nUsing  ideas from `react-measure` and a custom prop on the `Table` called `flexibleRows`, I got quite far creating a grid with completely variable `rowHeight` measured from the row's own contents.\n\nThe initial table looks great but I got stuck when I realised FDT is reusing elements/not rendering rows outside of the viewport/some other magic! - so to measure rows again when they have new contents I've either got to force an update when you scroll or measure every time the cell updates with `componentDidUpdate` - either way is really laggy.\n\nAny advice on this would be really welcome, as it's a lot of work for nothing, even though in the end having to implement this feature is very avoidable and I'm probably going to skip having dynamic content in my tables.\n\n#### Callback function for when a cell is measured\n\n``` js\nhandleCellMeasure(rowIndex, dimensions) {\n    let rowHeights = this.state.rowHeights;\n\n    // Only store the largest cell height of a row\n    if(typeof rowHeights[rowIndex] == 'undefined' || rowHeights[rowIndex] < dimensions.height) {\n        rowHeights[rowIndex] = dimensions.height;\n\n        this.setState({\n            rowHeights: rowHeights\n        });\n    }\n}\n```\n\n#### The rowHeightGetter\n\nAny time the grid asks for a row height, check if we've stored it's measurements in state\n\n``` js\nrowHeightGetter(index) {\n    let rowHeight = 37; // Set the default rowHeight\n\n    if(this.props.flexibleRows) {\n        let calculatedHeight = this.state.rowHeights[index]; // Retreive the rowHeight stored in state\n        if(typeof calculatedHeight != 'undefined') {\n            rowHeight = calculatedHeight + 16; // 8px padding\n        }\n    }\n\n    return rowHeight;\n}\n```\n\n#### render\n\nThen in the render of my Grid I am pushing my custom props into FDT components and I wrap the contents cell in a Measuring component.\n\n``` js\n<Table ...>\n    {React.Children.map(this.props.children, el => {\n        if(flexibleRows) {\n            clonedCell = React.createElement(MeasureCell, {\n                onMeasure: this.handleCellMeasure.bind(this)\n            }, clonedCell);\n        }\n        // Many more extensions on the column and the header\n        return React.createElement(Column, {\n            ...props, // Props to pass through to the real column (injecting the data, also - which is neat)\n            cell: clonedCell,\n            header: headerCell\n        });\n    })}\n</Table>\n```\n\n#### MeasureCell\n\nThe measure cell is just a component that wraps the cell and measures the height of the element.\n\n``` js\n// Find the cell contents and measure it\nconst dimensions = this._node.querySelector('.public_fixedDataTableCell_cellContent').getBoundingClientRect(); \nif(dimensions.height > 0) {\n    this.props.onMeasure(this.props.rowIndex, dimensions); // Run the callback function seen above\n}\n```\n. _Posting this here because it seems to be the most general issue surrounding custom row height._\n\nUsing  ideas from `react-measure` and a custom prop on the `Table` called `flexibleRows`, I got quite far creating a grid with completely variable `rowHeight` measured from the row's own contents.\n\nThe initial table looks great but I got stuck when I realised FDT is reusing elements/not rendering rows outside of the viewport/some other magic! - so to measure rows again when they have new contents I've either got to force an update when you scroll or measure every time the cell updates with `componentDidUpdate` - either way is really laggy.\n\nAny advice on this would be really welcome, as it's a lot of work for nothing, even though in the end having to implement this feature is very avoidable and I'm probably going to skip having dynamic content in my tables.\n\n#### Callback function for when a cell is measured\n\n``` js\nhandleCellMeasure(rowIndex, dimensions) {\n    let rowHeights = this.state.rowHeights;\n\n    // Only store the largest cell height of a row\n    if(typeof rowHeights[rowIndex] == 'undefined' || rowHeights[rowIndex] < dimensions.height) {\n        rowHeights[rowIndex] = dimensions.height;\n\n        this.setState({\n            rowHeights: rowHeights\n        });\n    }\n}\n```\n\n#### The rowHeightGetter\n\nAny time the grid asks for a row height, check if we've stored it's measurements in state\n\n``` js\nrowHeightGetter(index) {\n    let rowHeight = 37; // Set the default rowHeight\n\n    if(this.props.flexibleRows) {\n        let calculatedHeight = this.state.rowHeights[index]; // Retreive the rowHeight stored in state\n        if(typeof calculatedHeight != 'undefined') {\n            rowHeight = calculatedHeight + 16; // 8px padding\n        }\n    }\n\n    return rowHeight;\n}\n```\n\n#### render\n\nThen in the render of my Grid I am pushing my custom props into FDT components and I wrap the contents cell in a Measuring component.\n\n``` js\n<Table ...>\n    {React.Children.map(this.props.children, el => {\n        if(flexibleRows) {\n            clonedCell = React.createElement(MeasureCell, {\n                onMeasure: this.handleCellMeasure.bind(this)\n            }, clonedCell);\n        }\n        // Many more extensions on the column and the header\n        return React.createElement(Column, {\n            ...props, // Props to pass through to the real column (injecting the data, also - which is neat)\n            cell: clonedCell,\n            header: headerCell\n        });\n    })}\n</Table>\n```\n\n#### MeasureCell\n\nThe measure cell is just a component that wraps the cell and measures the height of the element.\n\n``` js\n// Find the cell contents and measure it\nconst dimensions = this._node.querySelector('.public_fixedDataTableCell_cellContent').getBoundingClientRect(); \nif(dimensions.height > 0) {\n    this.props.onMeasure(this.props.rowIndex, dimensions); // Run the callback function seen above\n}\n```\n. ",
    "msmicker": "I found the issue relates to cloneWithProps not being imported. And since it is deprecated the cloneWithProps can be updated to React.cloneElement.\n. fyi, I was able to resolve my particular issue - it was related to a bug in my filtering/sorting code (I have wrapped fdt in a component to provide sorting/filtering). I am still evaluating to switch to a pop-up method of rendering the content - essentially the async call is ~5-10s which can cause issues with a user scrolling around in a large table.\n\nWith Griddle I had been able to (somewhat) easily implement a boostrap pop-up cell but this isn't working properly in fdt. It would be interesting to see if anyone has experience with a pop-up type cell to display - for example to show a button that displays pop-up content larger than the cell filled with content from an async call.\n. I found the issue relates to cloneWithProps not being imported. And since it is deprecated the cloneWithProps can be updated to React.cloneElement.\n. fyi, I was able to resolve my particular issue - it was related to a bug in my filtering/sorting code (I have wrapped fdt in a component to provide sorting/filtering). I am still evaluating to switch to a pop-up method of rendering the content - essentially the async call is ~5-10s which can cause issues with a user scrolling around in a large table.\n\nWith Griddle I had been able to (somewhat) easily implement a boostrap pop-up cell but this isn't working properly in fdt. It would be interesting to see if anyone has experience with a pop-up type cell to display - for example to show a button that displays pop-up content larger than the cell filled with content from an async call.\n. ",
    "JoshuaGross": "Given the lack of responses to this, I'm assuming you two are suffering from the same bug I was - updating an attribute to a `NaN` value. After hunting down the `NaN` and fixing it, I'm no longer having this issue. See also: https://github.com/facebook/react/issues/4877\n. Given the lack of responses to this, I'm assuming you two are suffering from the same bug I was - updating an attribute to a `NaN` value. After hunting down the `NaN` and fixing it, I'm no longer having this issue. See also: https://github.com/facebook/react/issues/4877\n. ",
    "radubrehar": "Yes, fixing NaN solves the issue.\n. Yes, fixing NaN solves the issue.\n. ",
    "thewillhuang": "you can also return an object as long as your dataKey is some sort of key on the object\n. ``` js\nlet Driver = {};\nDriver.FirstName = '2000';\n\ndatakey={Driver.FirstName}\n```\n. you can also return an object as long as your dataKey is some sort of key on the object\n. ``` js\nlet Driver = {};\nDriver.FirstName = '2000';\n\ndatakey={Driver.FirstName}\n```\n. ",
    "anshulmalik1": "Hey @aphillipo , I am having the same issue. When I navigate to another route, I see this error in FixedDataTableColumnResizeHandle.react.js L109\r\nStill don't know how to resolve this issue. \r\n\r\n. Hey @aphillipo , I am having the same issue. When I navigate to another route, I see this error in FixedDataTableColumnResizeHandle.react.js L109\r\nStill don't know how to resolve this issue. \r\n\r\n. ",
    "johnnyji": "@barsukov I tried to do hovering rows, while you can, it dramatically slows down the table. The workaround is to find the row class and just alter the hover through CSS. You can also click and select rows using the `onRowClick` method. Once you've selected the row, just store the `rowIndex` of that row on the parent component state.\n\nThen you can just pass that state down to the table and do a customize cell rendering function where if the particular cell you're rendering has that `selectedRowIndex`, you give it a custom class to highlight it.\n. @barsukov I tried to do hovering rows, while you can, it dramatically slows down the table. The workaround is to find the row class and just alter the hover through CSS. You can also click and select rows using the `onRowClick` method. Once you've selected the row, just store the `rowIndex` of that row on the parent component state.\n\nThen you can just pass that state down to the table and do a customize cell rendering function where if the particular cell you're rendering has that `selectedRowIndex`, you give it a custom class to highlight it.\n. ",
    "marduke182": "Hi @pieterv, My first solution was use the state to store a flag variable, and in _componentDidMount_ change the state to know that the component was mounted. But in the best practice says that never use _setState_ inside _componentDidMount_. I update the pull request to show you my original solution.\n\nMaybe the best way is use Hight Order Component to control the state of initialRender and pass by a property the argument.\n\nThanks for the feedback.\n. I update the pull request with the final solution. All the modules affected have this change:\n\n``` javascript\ncomponentWillMount() {\n  this._initialRender = true;\n}\n\ncomponentDidMount() {\n  this._initialRender = false;\n}\n```\n\nAnd wrap  _translateDOMPositionXY_, like you said.\n. Hi @pieterv, My first solution was use the state to store a flag variable, and in _componentDidMount_ change the state to know that the component was mounted. But in the best practice says that never use _setState_ inside _componentDidMount_. I update the pull request to show you my original solution.\n\nMaybe the best way is use Hight Order Component to control the state of initialRender and pass by a property the argument.\n\nThanks for the feedback.\n. I update the pull request with the final solution. All the modules affected have this change:\n\n``` javascript\ncomponentWillMount() {\n  this._initialRender = true;\n}\n\ncomponentDidMount() {\n  this._initialRender = false;\n}\n```\n\nAnd wrap  _translateDOMPositionXY_, like you said.\n. ",
    "tbrd": "I'm quite interested in this... any chance we can get it merged?\n. I'm quite interested in this... any chance we can get it merged?\n. ",
    "djbobbydrake": "+1 - Second @tbrd - would love to get this merged\n. +1 - Second @tbrd - would love to get this merged\n. ",
    "DenLilleMand": ":+1: \n. :+1: \n. ",
    "HillLiu": ":+1: \n. @pieterv Do you have a plan merge this request?\n. +1\n. \ud83d\udc4d \n. :+1: \n. @pieterv Do you have a plan merge this request?\n. +1\n. \ud83d\udc4d \n. ",
    "thomasdavis": ":+1: \n. @marduke182 Thanks for the awesome pull requests, I've merged your fork into some of our code.  Though it seems like there a whole bunch of other things that still don't work with SSR.\n\ne.g. `global` cannot be found on the server -> https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/core/nativeRequestAnimationFrame.js\n\nThere a bunch of other small ones I've been band aiding. I wonder if it is time for a fork to really get SSR working?\n. Also a good solution to making all rows initially appear for SEO purposes would be great.\n. We migrated to React Virtualized, it is beautiful, high praise and highly recommend!. :+1: \n. @marduke182 Thanks for the awesome pull requests, I've merged your fork into some of our code.  Though it seems like there a whole bunch of other things that still don't work with SSR.\n\ne.g. `global` cannot be found on the server -> https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/core/nativeRequestAnimationFrame.js\n\nThere a bunch of other small ones I've been band aiding. I wonder if it is time for a fork to really get SSR working?\n. Also a good solution to making all rows initially appear for SEO purposes would be great.\n. We migrated to React Virtualized, it is beautiful, high praise and highly recommend!. ",
    "coockoo": "@liesislukas Given example uses this component\nhttps://github.com/facebook/fixed-data-table/blob/master/site/examples/ExamplesPage.js\nwhich does the same as `responsive-fixed-data-table` module mentioned above.\nIt listens `window.on('resize')` and changes `width` prop of `Table` component.\n. I found more elegant solution.\n[react-dimensions package.](https://github.com/digidem/react-dimensions)\n\nUsage is very simple. You have your component (React class) e.g. `Example`\nDoing\n\n```\nimport Dimensions from 'react-dimensions'\n ...component code...\nexport default Dimensions({ getWidth: element => ( element.offsetWidth ) })(Example);\n```\n\nwill inject `this.props.containerWidth` property into your component.\nAnd then you pass it to the `Table`\n. @liesislukas Given example uses this component\nhttps://github.com/facebook/fixed-data-table/blob/master/site/examples/ExamplesPage.js\nwhich does the same as `responsive-fixed-data-table` module mentioned above.\nIt listens `window.on('resize')` and changes `width` prop of `Table` component.\n. I found more elegant solution.\n[react-dimensions package.](https://github.com/digidem/react-dimensions)\n\nUsage is very simple. You have your component (React class) e.g. `Example`\nDoing\n\n```\nimport Dimensions from 'react-dimensions'\n ...component code...\nexport default Dimensions({ getWidth: element => ( element.offsetWidth ) })(Example);\n```\n\nwill inject `this.props.containerWidth` property into your component.\nAnd then you pass it to the `Table`\n. ",
    "james-gardner": "+1 - this is a must have for my use case.\n. I've found/tried using rowClassNameGetter but it doesn't apply anything.\n\n```\ngetClassName (rowIndex) { \n  return 'selected';\n}\n```\n\nRender method (incomplete):\n\n```\nrender () {\n    return (\n      <Table         \n         rowsCount={this.state.rows.length}\n         rowClassNameGetter={this.getClassName}\n```\n. +1 - this is a must have for my use case.\n. I've found/tried using rowClassNameGetter but it doesn't apply anything.\n\n```\ngetClassName (rowIndex) { \n  return 'selected';\n}\n```\n\nRender method (incomplete):\n\n```\nrender () {\n    return (\n      <Table         \n         rowsCount={this.state.rows.length}\n         rowClassNameGetter={this.getClassName}\n```\n. ",
    "shirleyYing": "maybe it has. it has a FixedDataTableBufferedRows.react.js .and has a method called rowClassNameGetter can control the specific row's style API here[here](http://facebook.github.io/fixed-data-table/api-table-v0.5.html)\n. maybe it has. it has a FixedDataTableBufferedRows.react.js .and has a method called rowClassNameGetter can control the specific row's style API here[here](http://facebook.github.io/fixed-data-table/api-table-v0.5.html)\n. ",
    "MattSPalmer": "+1\n. +1\n. ",
    "ogyr": "+1\nWas wondering for half an hour why this wouldn't work. This is against intuition.\n. +1\nWas wondering for half an hour why this wouldn't work. This is against intuition.\n. ",
    "iyn": "+1, I'd love to see not just for remote/async data loading example(s) but also remote filtering\n. +1, I'd love to see not just for remote/async data loading example(s) but also remote filtering\n. ",
    "shamshirz": "I also noticed a similar issue, any feedback would be much appreciated!\n. I also noticed a similar issue, any feedback would be much appreciated!\n. ",
    "wonskarol": "+1 \nupgrade to react 15.0.0 didn't help\n. +1 \nupgrade to react 15.0.0 didn't help\n. ",
    "Bamieh": "ouch, im facing this same issue.\r\n\r\n### Temporary solution: \r\ni wrapped the table in a div and calculated that div's height, it worked just fine, but this issue should be fixed regardless.\r\n\r\n\r\n### Details:\r\nreact version: `\"react\": \"^15.3.2\"`\r\n\r\n### Code snippet\r\n\r\n```\r\n//javascript:\r\nconst itemEls = ReactDOM.findDOMNode(this.table);\r\nitemEls.offsetHeight; //only gives the height inside \"thead\" not the \"tbody\"!\r\n\r\n//jsx\r\n<table ref={(r) => this.table = r}>\r\n        <thead><tr key=\"a\"> <th .... > </tr></thead>\r\n        <tbody><tr key=\"b\"> <td .....> </tr></tbody>\r\n</table>\r\n```\r\n\r\n. ouch, im facing this same issue.\r\n\r\n### Temporary solution: \r\ni wrapped the table in a div and calculated that div's height, it worked just fine, but this issue should be fixed regardless.\r\n\r\n\r\n### Details:\r\nreact version: `\"react\": \"^15.3.2\"`\r\n\r\n### Code snippet\r\n\r\n```\r\n//javascript:\r\nconst itemEls = ReactDOM.findDOMNode(this.table);\r\nitemEls.offsetHeight; //only gives the height inside \"thead\" not the \"tbody\"!\r\n\r\n//jsx\r\n<table ref={(r) => this.table = r}>\r\n        <thead><tr key=\"a\"> <th .... > </tr></thead>\r\n        <tbody><tr key=\"b\"> <td .....> </tr></tbody>\r\n</table>\r\n```\r\n\r\n. ",
    "samgqroberts": "+1\nI would be very happy simply with right-hand pinned columns.  It would be great to have left and right pinned columns simultaneously.\n. +1\nI would be very happy simply with right-hand pinned columns.  It would be great to have left and right pinned columns simultaneously.\n. ",
    "barrystaes": "We really need to docs to get started. When following the current v0.6.0 docs with the v0.4.6 code, errors like `Uncaught TypeError: rowGetter is not a function` appear.\n. It looks like this is taken care of since 0.5 with https://facebook.github.io/fixed-data-table/api-column-v0.5.html\n\nThe 0.5 docs are usable for v0.4.6 and the examples in old articles like http://ludovf.net/reactbook/blog/fixed-data-table-reactjs.html helped a lot.\n. We really need to docs to get started. When following the current v0.6.0 docs with the v0.4.6 code, errors like `Uncaught TypeError: rowGetter is not a function` appear.\n. It looks like this is taken care of since 0.5 with https://facebook.github.io/fixed-data-table/api-column-v0.5.html\n\nThe 0.5 docs are usable for v0.4.6 and the examples in old articles like http://ludovf.net/reactbook/blog/fixed-data-table-reactjs.html helped a lot.\n. ",
    "zsherman": "Ditto here, very odd.\n. Did you find any workaround @melnikov-s?\n. Ditto here, very odd.\n. Did you find any workaround @melnikov-s?\n. ",
    "melnikov-s": "Nope, other than:\n\n``` javascript\nfunction rowHeightGetter (index) {\n    return Math.min(rowHeight, calcRowHeight(index));\n}\n```\n. Nope, other than:\n\n``` javascript\nfunction rowHeightGetter (index) {\n    return Math.min(rowHeight, calcRowHeight(index));\n}\n```\n. ",
    "eyala-stratoscale": "@zsherman @melnikov-s  \nI'm experiencing a simliar problem when I have a table with scroll and then I scroll some and the table needs to resize its height but gets stuck with the old height and rows are missing.\nDid you find a working solution ? \nwhat do you have in calcRowHeight function ? \n. @zsherman @melnikov-s  \nI'm experiencing a simliar problem when I have a table with scroll and then I scroll some and the table needs to resize its height but gets stuck with the old height and rows are missing.\nDid you find a working solution ? \nwhat do you have in calcRowHeight function ? \n. ",
    "dbkaplun": "Solved via CSS: (actually LESS but you get the idea)\n\n``` less\n.public_fixedDataTable_bodyRow,\n.fixedDataTableCellGroupLayout_cellGroup,\n.public_fixedDataTableCell_main { &:hover { overflow: visible; } }\n.fixedDataTableRowLayout_rowWrapper,\n.public_fixedDataTableCell_main { &:hover { z-index: 1 !important; } }\n.public_fixedDataTable_bodyRow .public_fixedDataTableCell_cellContent:hover { .state('info'); }\n```\n\nScreenshot:\n![screenshot](http://imgur.com/D985keT.png)\nThis is very useful for tables with cells that have too much content and must be cropped. I think this could be very handy to anyone with very long cells so this should be somewhere in the docs.\n. Solved via CSS: (actually LESS but you get the idea)\n\n``` less\n.public_fixedDataTable_bodyRow,\n.fixedDataTableCellGroupLayout_cellGroup,\n.public_fixedDataTableCell_main { &:hover { overflow: visible; } }\n.fixedDataTableRowLayout_rowWrapper,\n.public_fixedDataTableCell_main { &:hover { z-index: 1 !important; } }\n.public_fixedDataTable_bodyRow .public_fixedDataTableCell_cellContent:hover { .state('info'); }\n```\n\nScreenshot:\n![screenshot](http://imgur.com/D985keT.png)\nThis is very useful for tables with cells that have too much content and must be cropped. I think this could be very handy to anyone with very long cells so this should be somewhere in the docs.\n. ",
    "jzahka-fiksu": "Thanks @dbkaplun this worked well for me. \n. Thanks @dbkaplun this worked well for me. \n. ",
    "toddwildey": "+1\n\nI'm having issues with FixedDataTable and the strict mode ES6 assumes.\n. +1\n\nI'm having issues with FixedDataTable and the strict mode ES6 assumes.\n. ",
    "Macil": "Babel 5 already adds 'use strict' to transpiled code, so there shouldn't be any new issues related to that if this is switched to Babel 6.\n. Babel 5 already adds 'use strict' to transpiled code, so there shouldn't be any new issues related to that if this is switched to Babel 6.\n. ",
    "sichkarev": "var ReactTable = React.createClass({\n    getInitialState: function () {\n        return {\n            data: null,\n            headersTable: null\n        };\n    },\n    componentDidMount: function () {\n        var self = this;\n        if (self.isMounted()) {\n            this.props.data.getData(function (data) {\n                self.setState({headersTable: data.data.headersTable});\n                self.setState({data: data.data.dataTable});\n            });\n        }\n    }\n/\\* other function */\n}\n\ndata.getData = function (_callback) {\n            $.ajax({\n                type: \"POST\",\n                url: \"/jsondata\",\n                dataType: \"text\",\n                success: function (resultData) {\n                        _callback(resultData);\n                },\n                error: function (resultData) {\n                    console.log(resultData);\n                }\n            });\n        };\n. var ReactTable = React.createClass({\n    getInitialState: function () {\n        return {\n            data: null,\n            headersTable: null\n        };\n    },\n    componentDidMount: function () {\n        var self = this;\n        if (self.isMounted()) {\n            this.props.data.getData(function (data) {\n                self.setState({headersTable: data.data.headersTable});\n                self.setState({data: data.data.dataTable});\n            });\n        }\n    }\n/\\* other function */\n}\n\ndata.getData = function (_callback) {\n            $.ajax({\n                type: \"POST\",\n                url: \"/jsondata\",\n                dataType: \"text\",\n                success: function (resultData) {\n                        _callback(resultData);\n                },\n                error: function (resultData) {\n                    console.log(resultData);\n                }\n            });\n        };\n. ",
    "naataaniitsosie": "I know this was opened a year and a half ago... Have you figured it out yet? I'm running into the same problems.. I know this was opened a year and a half ago... Have you figured it out yet? I'm running into the same problems.. ",
    "kayazinc": "+1, a unique key for each row is essential for animation.\n. `rowClassNameGetter` is supposed to do the styling but it doesn't work.\nYes, I style at individual cell too but its repetitive.\n. @csatish, at cell definition, you can set the style.\n\n```\nconst DateCell = ({rowIndex, data, col, ...props}) => (\n  <Cell {...props} className=\"highlight\">  // set the highlight style\n    {data.getObjectAt(rowIndex)[col].toLocaleString()}\n  </Cell>\n);\n```\n. +1, a unique key for each row is essential for animation.\n. `rowClassNameGetter` is supposed to do the styling but it doesn't work.\nYes, I style at individual cell too but its repetitive.\n. @csatish, at cell definition, you can set the style.\n\n```\nconst DateCell = ({rowIndex, data, col, ...props}) => (\n  <Cell {...props} className=\"highlight\">  // set the highlight style\n    {data.getObjectAt(rowIndex)[col].toLocaleString()}\n  </Cell>\n);\n```\n. ",
    "gamedevsam": "I would love to see this go in.. I would love to see this go in.. ",
    "dalinna": "i set fixed={ture}but it not working,,,do you knw why. i set fixed={ture}but it not working,,,do you knw why. ",
    "PhilKearney": "I am having the same issue, any update on this?. I am having the same issue, any update on this?. ",
    "RahavLussato": "so i found the issue with the plugin i used and fixed it but still its interesting why its\nimplemented this way. \n. so i found the issue with the plugin i used and fixed it but still its interesting why its\nimplemented this way. \n. ",
    "keshavkaul": "Any updates on this?. Any updates on this?. ",
    "JMacLulich": "This is great, thanks @stutrek  exactly what I was looking for, is there any chance this PR can make it into master?\n. Thanks @KamranAsif! Exactly what I was looking for someone who had accepted the column drag reorder PR request.\n. This is great, thanks @stutrek  exactly what I was looking for, is there any chance this PR can make it into master?\n. Thanks @KamranAsif! Exactly what I was looking for someone who had accepted the column drag reorder PR request.\n. ",
    "stutrek": "@JMacLulich I think you're going to want this branch, it's much better. I haven't had time to close this PR and make a new one yet.\n\nhttps://github.com/stutrek/fixed-data-table/tree/f/better-reorder\n. I just rebased\n. @JMacLulich I think you're going to want this branch, it's much better. I haven't had time to close this PR and make a new one yet.\n\nhttps://github.com/stutrek/fixed-data-table/tree/f/better-reorder\n. I just rebased\n. ",
    "johannessjoberg": "+1\n\nRepo still alive?\n. We have moved on to react-bootstrap-table (https://github.com/AllenFang/react-bootstrap-table).\nWorks very well!\nI filed some improvement suggestions last week and got a response within half an hour. This week they were implemented :) \n. +1\n\nRepo still alive?\n. We have moved on to react-bootstrap-table (https://github.com/AllenFang/react-bootstrap-table).\nWorks very well!\nI filed some improvement suggestions last week and got a response within half an hour. This week they were implemented :) \n. ",
    "ChristophBoget": "+1\n\nI need to know about this as well.  Is this repo still alive?\n. +1\n\nI need to know about this as well.  Is this repo still alive?\n. ",
    "zthomas1": "Agreed, some kind of an update would be most appreciated.\n. Agreed, some kind of an update would be most appreciated.\n. ",
    "BartoszWu": "+1 \nPlease add update about repo. \n. +1 \nPlease add update about repo. \n. ",
    "digifuzz": "+1 ditto\n. +1 ditto\n. ",
    "bryce-larson": "+1\nPlease keep keep this repo up to date. \nPlease at least gives as a update on the future of this repo\n. +1\nPlease keep keep this repo up to date. \nPlease at least gives as a update on the future of this repo\n. ",
    "amertak": "+1\n. I moved my table to react-virtualized just under 2 hours with all stylings and so. I find it much better.\n. +1\n. I moved my table to react-virtualized just under 2 hours with all stylings and so. I find it much better.\n. ",
    "cpinnix": "Looks like support for this just dropped off? 5 months since the last commit. Such a shame. Does anyone know of a well supported comparable library?\n. @EvNaverniouk Thanks for the heads up. Looks like the demo mobile performance is pretty good. Going to check react-virtualized when I get a chance. Probably sometime soon.\n. @swarajban I've moved to [react-virtualized](https://github.com/bvaughn/react-virtualized) like @amertak. It's a bit tricky to dynamically update each cell as data changes after the initial render. But things work well now that everything is together.\n. Looks like support for this just dropped off? 5 months since the last commit. Such a shame. Does anyone know of a well supported comparable library?\n. @EvNaverniouk Thanks for the heads up. Looks like the demo mobile performance is pretty good. Going to check react-virtualized when I get a chance. Probably sometime soon.\n. @swarajban I've moved to [react-virtualized](https://github.com/bvaughn/react-virtualized) like @amertak. It's a bit tricky to dynamically update each cell as data changes after the initial render. But things work well now that everything is together.\n. ",
    "EvHaus": "@cpinnix The closest thing I've seen so far is the FlexTable that ships with react-virtualized: https://bvaughn.github.io/react-virtualized/\n. @cpinnix The closest thing I've seen so far is the FlexTable that ships with react-virtualized: https://bvaughn.github.io/react-virtualized/\n. ",
    "jljorgenson18": "Unfortunately supporting IE9 makes it difficult to use a table built with flexbox. The only other table component I saw was the react boostrap table. Does anybody know of any other table components?\n. Unfortunately supporting IE9 makes it difficult to use a table built with flexbox. The only other table component I saw was the react boostrap table. Does anybody know of any other table components?\n. ",
    "rbalicki2": "Hey - does anyone know if this is actually broken with react 15?\n\nI upgraded to react 15 on a branch, and it appears that the fixed-data-table continues to work. I don't use all of the features, of course.\n\n@3cooper could you link to your jsfiddles?\n. Hey - does anyone know if this is actually broken with react 15?\n\nI upgraded to react 15 on a branch, and it appears that the fixed-data-table continues to work. I don't use all of the features, of course.\n\n@3cooper could you link to your jsfiddles?\n. ",
    "bytecodedan": "+1\n. +1\n. ",
    "pongsakornsemsuwan": "+1 \nAnyone have an alternate react table to recommend? just in case.\n. +1 \nAnyone have an alternate react table to recommend? just in case.\n. ",
    "swarajban": "If anyone is looking for a quick 'fix' to this, update your package.json dependency for fixed-data-table to:\n\n```\n\"fixed-data-table\": \"jneiku/fixed-data-table#9617de14a14e2ece87590c6b118631755eff1fc8\"\n```\n\nThe [jneiku/fixed-data-table fork](https://github.com/jneiku/fixed-data-table) removes the <= 0.14 peer dependency, and has all the built files checked into the repo. Unlike the other forks that simply update the peer dependency, this is important for webpack which requires files that are published to npm, but are not checked into the github repo.\n\nFYU I'm using React 15 + webpack. Not seeing any warning / deprecation warnings, and my tables are functioning correctly.\n\nHope this helps people get by until either facebook properly updates this repo, or you switch to a better supported table library \n. @cpinnix I'm going to move my tables over to the better supported [Griddle](https://github.com/GriddleGriddle/Griddle) react table library\n. If anyone is looking for a quick 'fix' to this, update your package.json dependency for fixed-data-table to:\n\n```\n\"fixed-data-table\": \"jneiku/fixed-data-table#9617de14a14e2ece87590c6b118631755eff1fc8\"\n```\n\nThe [jneiku/fixed-data-table fork](https://github.com/jneiku/fixed-data-table) removes the <= 0.14 peer dependency, and has all the built files checked into the repo. Unlike the other forks that simply update the peer dependency, this is important for webpack which requires files that are published to npm, but are not checked into the github repo.\n\nFYU I'm using React 15 + webpack. Not seeing any warning / deprecation warnings, and my tables are functioning correctly.\n\nHope this helps people get by until either facebook properly updates this repo, or you switch to a better supported table library \n. @cpinnix I'm going to move my tables over to the better supported [Griddle](https://github.com/GriddleGriddle/Griddle) react table library\n. ",
    "malykhinvi": "> Repo still alive?\n\n@johannessjoberg seems like this particular repo is [abandoned](https://twitter.com/ryanseddon/status/692452531016986624).\n. > Repo still alive?\n\n@johannessjoberg seems like this particular repo is [abandoned](https://twitter.com/ryanseddon/status/692452531016986624).\n. ",
    "CoderBlaine": "Here is an example that will not scroll in mobile.\n\nhttp://pastebin.com/TjgV2ebv\n. Hi,\n\nScrolling for mobile is not automatically built in. So you need to go through the steps of adding the mobile scroll wrapper as per the commit example posted by vinayaknagal above.\n\nHopefully they build this feature in to a future version as I imagine almost everyone wants support for mobile. \n. Here is an example that will not scroll in mobile.\n\nhttp://pastebin.com/TjgV2ebv\n. Hi,\n\nScrolling for mobile is not automatically built in. So you need to go through the steps of adding the mobile scroll wrapper as per the commit example posted by vinayaknagal above.\n\nHopefully they build this feature in to a future version as I imagine almost everyone wants support for mobile. \n. ",
    "vinayaknagpal": "I ran into this a few weeks ago. Turns out touch events need to be explicitly captured and handled to get scrolling on mobile devices. \n\nThe site examples offer a good starting point, check out this [commit](https://github.com/facebook/fixed-data-table/commit/74a21b699ff450e92eeda555c36569b06553987d)\n. You can use onChange within Input to trigger an action. Alternatelively you can wrap your form in a stateful conponent and use that inside InputCell.\n. You can use the onContentHeightChange callback on Table. Recompute the\ncontentHeight and tableHeight props given to scroller in this callback.\n\nTable calculates contentHeight using fixed rowHeight, this causes rendering\nglitches on scroll when rowHeights are variable.\n\nNote that the callback is called for every rendered row where\nrowHeightGetter returns different value than rowHeight. You must make the\nrowHeightGetter and contentHeight calculation fairly efficient or else\nscroll turns jerky. Precompute row heights on load and update only when\ncontent changes.\n\nThis solved scrolling problems for my project. I use variable row heights\nand row content is user editable.\n. +1\n. I ran into this a few weeks ago. Turns out touch events need to be explicitly captured and handled to get scrolling on mobile devices. \n\nThe site examples offer a good starting point, check out this [commit](https://github.com/facebook/fixed-data-table/commit/74a21b699ff450e92eeda555c36569b06553987d)\n. You can use onChange within Input to trigger an action. Alternatelively you can wrap your form in a stateful conponent and use that inside InputCell.\n. You can use the onContentHeightChange callback on Table. Recompute the\ncontentHeight and tableHeight props given to scroller in this callback.\n\nTable calculates contentHeight using fixed rowHeight, this causes rendering\nglitches on scroll when rowHeights are variable.\n\nNote that the callback is called for every rendered row where\nrowHeightGetter returns different value than rowHeight. You must make the\nrowHeightGetter and contentHeight calculation fairly efficient or else\nscroll turns jerky. Precompute row heights on load and update only when\ncontent changes.\n\nThis solved scrolling problems for my project. I use variable row heights\nand row content is user editable.\n. +1\n. ",
    "ssolders": "I'm having this issue as well, has anyone come up with a good solution? \nCan you give any further directions @vinayaknagpal ? \n. Hi, \nYea I realize that, I guess I was looking for some more extensive examples.\nI've managed to get it \"working\", but having the issue that when I stop scrolling in the table it resets to its initial position (resets to left: 0, top: 0).\n\nIt's reset using the _handleScroll function, not due to the component \"reseting\" and setting the initial state. \n\nI've updated TouchWrapper/TouchableArea to use ES6 class + export so I can use import instead of require, that's the only updates to those files.\n\nHere are my relevant files: \nhttps://plnkr.co/edit/S7doxrrMb0mjnl4aYATA\n\nAny ideas?\n\nEdit: I worked out the reset problem by not calling this.props.scroller.doTouchEnd(e.timeStamp) in the handleTouchEnd in TouchableArea.js along with only setting a new top + left value in state if they are > 0.\n\n```\n  handleTouchEnd(e) {\n    if (!this.props.scroller || !this.props.touchable) {\n      return;\n    }\n    //Without this the scroller was reset to top:0 left: 0 on touchEnd.\n    e.preventDefault();\n    return\n    // this.props.scroller.doTouchEnd(e.timeStamp);\n  } \n```\n\n```\n    _handleScroll(left, top) {\n        //Don't allow to scroll sub 0\n        this.setState({\n            left: ( left > 0  ? left : 0),\n            top: ( top > 0  ? top : 0)\n        });\n    }\n\n```\n. I'm having this issue as well, has anyone come up with a good solution? \nCan you give any further directions @vinayaknagpal ? \n. Hi, \nYea I realize that, I guess I was looking for some more extensive examples.\nI've managed to get it \"working\", but having the issue that when I stop scrolling in the table it resets to its initial position (resets to left: 0, top: 0).\n\nIt's reset using the _handleScroll function, not due to the component \"reseting\" and setting the initial state. \n\nI've updated TouchWrapper/TouchableArea to use ES6 class + export so I can use import instead of require, that's the only updates to those files.\n\nHere are my relevant files: \nhttps://plnkr.co/edit/S7doxrrMb0mjnl4aYATA\n\nAny ideas?\n\nEdit: I worked out the reset problem by not calling this.props.scroller.doTouchEnd(e.timeStamp) in the handleTouchEnd in TouchableArea.js along with only setting a new top + left value in state if they are > 0.\n\n```\n  handleTouchEnd(e) {\n    if (!this.props.scroller || !this.props.touchable) {\n      return;\n    }\n    //Without this the scroller was reset to top:0 left: 0 on touchEnd.\n    e.preventDefault();\n    return\n    // this.props.scroller.doTouchEnd(e.timeStamp);\n  } \n```\n\n```\n    _handleScroll(left, top) {\n        //Don't allow to scroll sub 0\n        this.setState({\n            left: ( left > 0  ? left : 0),\n            top: ( top > 0  ? top : 0)\n        });\n    }\n\n```\n. ",
    "dcoales": "I'm not familiar with Zynga, TouchWrapper etc but I used the following code.  I'm new to this so there is probably an easier way but this seems to work.  One thing I noticed was that I had to turn off the scroll bars temporarily when on the desktop for the scrollTop and scrollLeft functions to work after the first render.  I've got them permanently turned off on mobile.\n\n`  \nrender(){\n       var Table = FixedDataTable.Table;\n        return (\n            <div style={style}\n                 ref={ref=>{this.container=ref}}\n                 onTouchStart={e=>this.__onTouchStart(e)}\n                 onTouchEnd={e=>this.__onTouchEnd(e)}\n                 onTouchMove={e=>this.__onTouchMove(e)}\n            >\n                <Table\n                    ref={ref=>this.grid=ref}\n                    {...tableProps}\n                    rowClassNameGetter={rowClassNameGetter}\n                    rowStyleGetter={index => this.__rowStyleGetter(index)}\n                    width={width}\n                    height={height}\n                    onRowDoubleClick={onRowDoubleClick}\n                    onRowClick={onRowClick}\n                    onColumnResizeEndCallback={this.__onColumnResizeEndCallback}\n                    isColumnResizing={false}\n                    onRowMouseEnter={(e, index) => this.__onRowMouseEnter(e, index)}\n                    onRowMouseLeave={(e, index) => this.__onRowMouseLeave(e, index)}\n                    onScrollEnd={(x,y)=>this.__onScrollEnd(x,y)}\n                    scrollTop={this.state.scrollTop}\n                    scrollLeft={this.state.scrollLeft}\n                    overflowX={this.state.overflowX}\n                    overflowY={this.state.overflowY}\n                    >\n                    {columns}\n                </Table>\n            </div>\n        );\n    }\n\n```\n__onScrollEnd(x,y){\n    // remember the scroll position at the end of mouse or wheel scrolling\n    if (!this.touching){\n        this.state.scrollLeft = x;\n        this.state.scrollTop = y;\n    }\n}\n\n__onTouchStart(e){\n    if (!this.mobile)this.setState({overflowX:'hidden',overflowY:'hidden'});\n    this.touching = true;\n    this.touchStart = this.__getTouchCoordinates(e);\n}\n__onTouchMove(e){\n    e.preventDefault();\n   this.__scrollGrid(e)\n}\n__onTouchEnd(e){\n    this.touching = false;\n    if (!this.mobile)this.setState({overflowX:'auto',overflowY:'auto'});\n}\n\n__scrollGrid(e){\n    var touchEnd = this.__getTouchCoordinates(e);\n    var scrollX = touchEnd.x - this.touchStart.x ;\n    var scrollY = touchEnd.y - this.touchStart.y;\n\n    var deltaX = scrollX < 0 ? scrollX * -1 : scrollX;\n    var deltaY = scrollY < 0 ? scrollY * -1: scrollY;\n\n    var scrollLeft, scrollTop;\n    if (deltaX > deltaY){\n        scrollLeft = Math.max(0,this.state.scrollLeft - scrollX);\n        scrollTop = this.state.scrollTop;\n    } else {\n        scrollLeft = this.state.scrollLeft;\n        scrollTop = Math.max(this.state.scrollTop - scrollY);\n    }\n\n    this.setState({scrollLeft: scrollLeft, scrollTop: scrollTop});\n    this.touchStart = touchEnd;\n}\n\n__getTouchCoordinates(e){\n    var touches = e.nativeEvent.changedTouches;\n    if (touches && touches.length > 0){\n        return {x:touches.item(0).clientX, y: touches.item(0).clientY};\n    }\n    return false;\n}\n```\n\n`\n\nAny suggestions for improvements gratefully received :-)\n. I'm not familiar with Zynga, TouchWrapper etc but I used the following code.  I'm new to this so there is probably an easier way but this seems to work.  One thing I noticed was that I had to turn off the scroll bars temporarily when on the desktop for the scrollTop and scrollLeft functions to work after the first render.  I've got them permanently turned off on mobile.\n\n`  \nrender(){\n       var Table = FixedDataTable.Table;\n        return (\n            <div style={style}\n                 ref={ref=>{this.container=ref}}\n                 onTouchStart={e=>this.__onTouchStart(e)}\n                 onTouchEnd={e=>this.__onTouchEnd(e)}\n                 onTouchMove={e=>this.__onTouchMove(e)}\n            >\n                <Table\n                    ref={ref=>this.grid=ref}\n                    {...tableProps}\n                    rowClassNameGetter={rowClassNameGetter}\n                    rowStyleGetter={index => this.__rowStyleGetter(index)}\n                    width={width}\n                    height={height}\n                    onRowDoubleClick={onRowDoubleClick}\n                    onRowClick={onRowClick}\n                    onColumnResizeEndCallback={this.__onColumnResizeEndCallback}\n                    isColumnResizing={false}\n                    onRowMouseEnter={(e, index) => this.__onRowMouseEnter(e, index)}\n                    onRowMouseLeave={(e, index) => this.__onRowMouseLeave(e, index)}\n                    onScrollEnd={(x,y)=>this.__onScrollEnd(x,y)}\n                    scrollTop={this.state.scrollTop}\n                    scrollLeft={this.state.scrollLeft}\n                    overflowX={this.state.overflowX}\n                    overflowY={this.state.overflowY}\n                    >\n                    {columns}\n                </Table>\n            </div>\n        );\n    }\n\n```\n__onScrollEnd(x,y){\n    // remember the scroll position at the end of mouse or wheel scrolling\n    if (!this.touching){\n        this.state.scrollLeft = x;\n        this.state.scrollTop = y;\n    }\n}\n\n__onTouchStart(e){\n    if (!this.mobile)this.setState({overflowX:'hidden',overflowY:'hidden'});\n    this.touching = true;\n    this.touchStart = this.__getTouchCoordinates(e);\n}\n__onTouchMove(e){\n    e.preventDefault();\n   this.__scrollGrid(e)\n}\n__onTouchEnd(e){\n    this.touching = false;\n    if (!this.mobile)this.setState({overflowX:'auto',overflowY:'auto'});\n}\n\n__scrollGrid(e){\n    var touchEnd = this.__getTouchCoordinates(e);\n    var scrollX = touchEnd.x - this.touchStart.x ;\n    var scrollY = touchEnd.y - this.touchStart.y;\n\n    var deltaX = scrollX < 0 ? scrollX * -1 : scrollX;\n    var deltaY = scrollY < 0 ? scrollY * -1: scrollY;\n\n    var scrollLeft, scrollTop;\n    if (deltaX > deltaY){\n        scrollLeft = Math.max(0,this.state.scrollLeft - scrollX);\n        scrollTop = this.state.scrollTop;\n    } else {\n        scrollLeft = this.state.scrollLeft;\n        scrollTop = Math.max(this.state.scrollTop - scrollY);\n    }\n\n    this.setState({scrollLeft: scrollLeft, scrollTop: scrollTop});\n    this.touchStart = touchEnd;\n}\n\n__getTouchCoordinates(e){\n    var touches = e.nativeEvent.changedTouches;\n    if (touches && touches.length > 0){\n        return {x:touches.item(0).clientX, y: touches.item(0).clientY};\n    }\n    return false;\n}\n```\n\n`\n\nAny suggestions for improvements gratefully received :-)\n. ",
    "esparkman": ":+1: \n. :+1: \n. ",
    "piratus": "Seems like the base style is missing\n. Seems like the base style is missing\n. ",
    "danesparza": "By 'styles are present on the page' do you mean that you have included the 3 css files in your page somewhere? \n\nExample:\n\n```\n<!-- Fixed data table CSS -->\n<link href=\"/ui/css/fixed-data-table-base.min.css\" rel=\"stylesheet\" type='text/css'>\n<link href=\"/ui/css/fixed-data-table.min.css\" rel=\"stylesheet\" type='text/css'>\n<link href=\"/ui/css/fixed-data-table-style.min.css\" rel=\"stylesheet\" type='text/css'>\n```\n. By 'styles are present on the page' do you mean that you have included the 3 css files in your page somewhere? \n\nExample:\n\n```\n<!-- Fixed data table CSS -->\n<link href=\"/ui/css/fixed-data-table-base.min.css\" rel=\"stylesheet\" type='text/css'>\n<link href=\"/ui/css/fixed-data-table.min.css\" rel=\"stylesheet\" type='text/css'>\n<link href=\"/ui/css/fixed-data-table-style.min.css\" rel=\"stylesheet\" type='text/css'>\n```\n. ",
    "CaptainN": "This is not mentioned in the docs afaict. Are we supposed to load css files?\n. This is not mentioned in the docs afaict. Are we supposed to load css files?\n. ",
    "slashwhatever": "+1\n. That gets me as far as a hover state but the real key is how to programmatically change the hovered cell width.\n. +1\n. That gets me as far as a hover state but the real key is how to programmatically change the hovered cell width.\n. ",
    "nicktobolski": "Happening for me as well -- with examples/FilterExample.js.\n. Happening for me as well -- with examples/FilterExample.js.\n. ",
    "vineetbatta": "I was also looking for timelines around version 0.7.\n\nThanks\n. I was also looking for timelines around version 0.7.\n\nThanks\n. ",
    "juliuszc": "I also ran into the same issue. Could someone please advise?\n. I also ran into the same issue. Could someone please advise?\n. ",
    "fixedtablev6Update": "Thanks. \n\nWe have our own fork too, where we deprecate all of the old APIs: https://github.com/fixedtablev6Update/fixed-data-table.git\n\nWe want to be sure that - this is the only way around to use the new APIs, and that there is no other way directly supported by facebook to do this (in their own branch/fork).\n. Hi, Someone in my team has pointed out a way where we can use 0.6 version without our own fork. \n\nThis will be useful for everyone. \n\nI debugged through the code to see how is it working and it looks like that \u201cTransitionTable (Old Table)\u201d has this API below. If \u201cneedsMigration\u201d is true then it goes to the Old code, otherwise to new code. \n\nOriginally, I had not removed the old definitions at all in my Definition file, so \u201cneedsMigration\u201d was always true \u2013 and hence even if I provided new cell code, it was not getting hit. \n\n_checkDeprecations: function _checkDeprecations() {\n                    var needsMigration = false;\n                    if (this.props.rowGetter) {\n                      notifyDeprecated('rowGetter', 'Please use the cell API in Column to fetch data for your cells.');\n                      // ROWGETTER??? You need to migrate.\n                      needsMigration = true;\n                    }\u2026.\n}\n\nSo, to use the new APIs - you need to delete all references to deprecated definitions (but mainly the rowGetter - as that is the only flag that causes needsMigration to be true/false).\n\nThanks.\n. Thanks. \n\nWe have our own fork too, where we deprecate all of the old APIs: https://github.com/fixedtablev6Update/fixed-data-table.git\n\nWe want to be sure that - this is the only way around to use the new APIs, and that there is no other way directly supported by facebook to do this (in their own branch/fork).\n. Hi, Someone in my team has pointed out a way where we can use 0.6 version without our own fork. \n\nThis will be useful for everyone. \n\nI debugged through the code to see how is it working and it looks like that \u201cTransitionTable (Old Table)\u201d has this API below. If \u201cneedsMigration\u201d is true then it goes to the Old code, otherwise to new code. \n\nOriginally, I had not removed the old definitions at all in my Definition file, so \u201cneedsMigration\u201d was always true \u2013 and hence even if I provided new cell code, it was not getting hit. \n\n_checkDeprecations: function _checkDeprecations() {\n                    var needsMigration = false;\n                    if (this.props.rowGetter) {\n                      notifyDeprecated('rowGetter', 'Please use the cell API in Column to fetch data for your cells.');\n                      // ROWGETTER??? You need to migrate.\n                      needsMigration = true;\n                    }\u2026.\n}\n\nSo, to use the new APIs - you need to delete all references to deprecated definitions (but mainly the rowGetter - as that is the only flag that causes needsMigration to be true/false).\n\nThanks.\n. ",
    "TylerYang": "With maxHeight can solve this problem. \n\nMy bad, this issue should belong to responsive-fixed-data-table which is a 3rd party wrapper for this component.\n\nWill send a PR to `responsive-fixed-data-table` later.\n. With maxHeight can solve this problem. \n\nMy bad, this issue should belong to responsive-fixed-data-table which is a 3rd party wrapper for this component.\n\nWill send a PR to `responsive-fixed-data-table` later.\n. ",
    "cyranosky": "Hi,can i ask you a question?  fixed-data-table  can support drag and drop?. I mean drag and drop column.... Hi,can i ask you a question?  fixed-data-table  can support drag and drop?. I mean drag and drop column.... ",
    "BugsBunny338": "@cyranosky It does not support drag&drop from the box. That's why I use Abramov's [`react-dnd`](https://github.com/react-dnd/react-dnd).. @cyranosky It does not support drag&drop from the box. That's why I use Abramov's [`react-dnd`](https://github.com/react-dnd/react-dnd).. ",
    "cshanejennings": "nvm, just found http://facebook.github.io/fixed-data-table/example-flexgrow.html\n. nvm, just found http://facebook.github.io/fixed-data-table/example-flexgrow.html\n. ",
    "snowinferno": "`rowHeightGetter` is exactly what I was looking for. Thanks!\n. `rowHeightGetter` is exactly what I was looking for. Thanks!\n. ",
    "ghernandez345": "was there a solution to this. I am trying to do the same.\n. was there a solution to this. I am trying to do the same.\n. ",
    "josescasanova": "I solved this by using `className` on the `<Cell />` component and settings the class's `background-color`\n. I solved this by using `className` on the `<Cell />` component and settings the class's `background-color`\n. ",
    "timkelty": "Same issue here. Providing `rowClassNameGetter` has no effect on the row class.\r\n#457 was closed, but I don't believe it was actually fixed.. Same issue here. Providing `rowClassNameGetter` has no effect on the row class.\r\n#457 was closed, but I don't believe it was actually fixed.. ",
    "naddeoa": "I've noticed that there is an `overflowX` and `overflowY` prop in the table api. Are these supposed to solve this issue?\n. Just going to link the PR here. This issue shows up in google searches.\n\nhttps://github.com/facebook/fixed-data-table/pull/396\n. I've noticed that there is an `overflowX` and `overflowY` prop in the table api. Are these supposed to solve this issue?\n. Just going to link the PR here. This issue shows up in google searches.\n\nhttps://github.com/facebook/fixed-data-table/pull/396\n. ",
    "kaushikbarodiya": "I have implemented similar feature using tether-drop and portal api to open dropdown in a particular cell. Please refer this link http://github.hubspot.com/drop/ .\n. I have implemented similar feature using tether-drop and portal api to open dropdown in a particular cell. Please refer this link http://github.hubspot.com/drop/ .\n. ",
    "SimonChris": "You can override inline styles with CSS. See https://css-tricks.com/override-inline-styles-with-css/.. You can override inline styles with CSS. See https://css-tricks.com/override-inline-styles-with-css/.. ",
    "sanjeev2838": "fixed by \nnpm install react-dom@0.14.3\n. fixed by \nnpm install react-dom@0.14.3\n. ",
    "xhe": "I am trying to use loop control inside a table like this:\n\n`\n   render: function(){\n    var {dataList, columnWidths, selectedColumns} = this.state;\n\n   return (\n            <div className='jnprDataTable'>\n            <ColumnChooser data={dataList} callBack={this.updateSelectedColumns}/>  \n            <Table\n              rowHeight={60}\n              headerHeight={50}\n              rowsCount={dataList.length}\n              width={1000}\n              height={300}\n              isColumnResizing={false}\n              onColumnResizeEndCallback={this._onColumnResizeEndCallback}\n              >\n            {selectedColumns.map(function(selectedColumn, i){\n              return   <Column\n                        key={i}\n                        columnKey={selectedColumn}\n                        header={<Cell>{selectedColumn}</Cell>}\n                        cell={<TextCell data={dataList} col={selectedColumn} />}\n                        fixed={true}\n                        width={columnWidths[selectedColumn]}\n                        isResizable={true}\n                      />\n            })}\n            </Table>\n            </div>\n    )\n  }`\n\nBut when I run it, I got this exception:\n`react-with-addons.js:20215 Uncaught Error: Invariant Violation: Objects are not valid as a React child (found: Sun Oct 04 2015 08:56:32 GMT-0700 (PDT)). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons. Check the render method of`FixedDataTableCellDefault`.  \n\n`\n\nIt looked like Table does not allow loop inside, right?\n\nI can use this solution to control select/option, why not working here?\n\nAny good solution?\n. To be more specific,\nIf I am using this:\n\n   <Table\n\n```\n        rowHeight={50}\n\n        headerHeight={30}\n\n        groupHeaderHeight={30}\n\n        rowsCount={10}\n\n        width={1000}\n\n        height={500}>\n\n        {selectedColumns.map(function(columnName, i){\n\n          return <Column\n\n                  key={i}\n\n                  columnKey={columnName}\n\n                  header={ <Cell>{columnName}</Cell>}\n\n                  cell={<Cell>{}</Cell>}\n\n                  width={200}\n\n                />})}\n\n        </Table>\n```\n\n   It worked.\n\nBut once I replaced the Cell by:\n\ncell={<TextCell data={dataList} col={selectedColumn} />}\n\nAnd the Text Cell is just:\n\nconst TextCell = ({rowIndex, data, col}) => (\n\n```\n    <Cell>\n\n    {data[rowIndex][col]}\n\n      </Cell>\n\n  );\n```\n\nIt is throwing error:\n\nUncaught Error: Invariant Violation: Objects are not valid as a React child\n(found: Sun Oct 04 2015 08:56:32 GMT-0700 (PDT)). If you meant to render a\ncollection of children, use an array instead or wrap the object using\ncreateFragment(object) from the React add-ons. Check the render method of\n`FixedDataTableCellDefault\n\nThis has made dynamically creating column impossible.\n\nCan anyone help please?\n\nFrank\n\nOn Wed, Apr 20, 2016 at 8:15 AM, Kamran Asif notifications@github.com\nwrote:\n\n> You can just omit them in the render function. Do you have a fiddle of\n> what your doing?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/381#issuecomment-212472538\n. It is my false, some data is array, so I have to distinguish array vs pure\nstring. Otherwise, you will meet above errors.\n\nOn Wed, Apr 20, 2016 at 3:46 PM, Frank He hexufeng@gmail.com wrote:\n\n> To be more specific,\n> If I am using this:\n> \n>    <Table\n> \n> ```\n>         rowHeight={50}\n> \n>         headerHeight={30}\n> \n>         groupHeaderHeight={30}\n> \n>         rowsCount={10}\n> \n>         width={1000}\n> \n>         height={500}>\n> \n>         {selectedColumns.map(function(columnName, i){\n> \n>           return <Column\n> \n>                   key={i}\n> \n>                   columnKey={columnName}\n> \n>                   header={ <Cell>{columnName}</Cell>}\n> \n>                   cell={<Cell>{}</Cell>}\n> \n>                   width={200}\n> \n>                 />})}\n> \n>         </Table>\n> ```\n> \n>    It worked.\n> \n> But once I replaced the Cell by:\n> \n> cell={<TextCell data={dataList} col={selectedColumn} />}\n> \n> And the Text Cell is just:\n> \n> const TextCell = ({rowIndex, data, col}) => (\n> \n> ```\n>     <Cell>\n> \n>     {data[rowIndex][col]}\n> \n>       </Cell>\n> \n>   );\n> ```\n> \n> It is throwing error:\n> \n> Uncaught Error: Invariant Violation: Objects are not valid as a React\n> child (found: Sun Oct 04 2015 08:56:32 GMT-0700 (PDT)). If you meant to\n> render a collection of children, use an array instead or wrap the object\n> using createFragment(object) from the React add-ons. Check the render\n> method of `FixedDataTableCellDefault\n> \n> This has made dynamically creating column impossible.\n> \n> Can anyone help please?\n> \n> Frank\n> \n> On Wed, Apr 20, 2016 at 8:15 AM, Kamran Asif notifications@github.com\n> wrote:\n> \n> > You can just omit them in the render function. Do you have a fiddle of\n> > what your doing?\n> > \n> > \u2014\n> > You are receiving this because you authored the thread.\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/facebook/fixed-data-table/issues/381#issuecomment-212472538\n. Yes, definitely, see my above answer\n\nOn Tue, Jan 3, 2017 at 11:25 PM, anyexinglu <notifications@github.com>\nwrote:\n\n> So, is it possible for hiding some columns?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/facebook/fixed-data-table/issues/381#issuecomment-270309395>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAN4c-3ysPP9U_VRsubmIx0DczJHqRAvks5rO0lZgaJpZM4ILUwt>\n> .\n>\n. My solution is:\nif the scrollY is greater or equal of total height, which is the row height\n- lengthOfRows, then it is approaching end.\n\n_onScrollEndCallBack: function(scrollX, scrollY){\n\n```\nif( this.state.rowHeight*(this.state.dataList.length-1)-this.state.tableHeight\n```\n\n<= scrollY ){\n\n```\n  console.log(\"appraching bottom\");\n\n}\n```\n\n}\n\nDo you think if this is reliable or not?\n\nOn Fri, Apr 22, 2016 at 5:55 AM, 3cooper notifications@github.com wrote:\n\n> The way we did it was in the method that creates cells. We only have a\n> quick prototype currently that I need to clean up. The gist is that when we\n> render the first cell of the last row, we kick off a request to get more\n> rows. You need to take into account rendering that cell multiple times and\n> if that cell is visible without scrolling - meaning if you only have like 5\n> rows you will kick off another request for an empty page.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/385#issuecomment-213417135\n. But based on the configuration, each row has fixed height, and row position\nis absolute. I tried to change position for each row from absolute to\nrelative, then the effect is terrible. Is absolute position mandatory for\nfixed data table? if that is true, then the calculation should be ok.\nAny idea?\n\nOn Tue, Apr 26, 2016 at 8:18 AM, 3cooper notifications@github.com wrote:\n\n> One issue with this could be variable row heights.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/385#issuecomment-214780097\n. Complaining what, the various row height?\nIf position and row are already fixed, then, total height should also be\nfixed.\nI actually met one more issue, that is clickable cell, once a certain cell\nis clicked, it will expand some contents below it. Now my solution is only\nto hack into html and insert content, but I have to hide following rows,\notherwise, the inserted html can not be shown. This is all because the\nabsolution position for each row, and they can NOT be pushed down\nautomatically.\nBut I think this has made the total height accurate and we can use scrollY\nto detect if it is approaching bottom\n\nOn Tue, Apr 26, 2016 at 8:30 AM, 3cooper notifications@github.com wrote:\n\n> I think it is mandatory, but I could be wrong. I am now in need of a new\n> infinity scrolling solution since I was updating state in a render method.\n> Redux is complaining about this.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/385#issuecomment-214783932\n. I think the beauty for fixed-data-table is \"Fixed\", it is only suitable to\ndisplay flat data with NO nested display available. So in order to display\nnested data, I need to use other solution, or just regular table syntax.\n\nOn Wed, Apr 27, 2016 at 11:04 PM, mjb3ats notifications@github.com wrote:\n\n> I am asking myself the same question.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/390#issuecomment-215318048\n. No, not working in fixed dataTable.\nBut I used a more simple solution:\n\n_onScrollStartHanlder: function() {\ndocument.body.style.overflow = 'hidden';\n}\n_onScrollEndHanlder: function() {\ndocument.body.style.overflow = 'auto';\n}\n\nI believe biding event on onScrollStart/End is better solution for fixed\nDataTable\n\nOn Mon, Aug 8, 2016 at 1:34 AM, nhducit notifications@github.com wrote:\n\n> You can try this solution: http://jsfiddle.net/troyalford/4wrxq/4/\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/438#issuecomment-238174116,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAN4c9f6cimSD4t7mWaED0t6WL4WLf-kks5qduoegaJpZM4JdXc0\n> .\n. Thanks, worked in IE!\n\nOn Thu, Oct 6, 2016 at 8:20 AM, Chris Jordan notifications@github.com\nwrote:\n\n> This repo doesn't see a lot of active maintenance. Would it be possible\n> for you to try https://github.com/schrodinger/fixed-data-table-2 and see\n> if the issue exists there? The examples are here:\n> http://schrodinger.github.io/fixed-data-table-2/example-object-data.html\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/448#issuecomment-251995402,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAN4c4o0kfF2TRyo542Zfscszt_QWwIhks5qxRGigaJpZM4JpAgr\n> .\n. Thanks Tomas,\nWorked like charm, thanks for the consideration in this senario.\nFrank\n\nOn Mon, Jan 9, 2017 at 11:16 AM, Tomas Kirda <notifications@github.com>\nwrote:\n\n> Check this doc: http://facebook.github.io/fixed-data-table/api-column.html\n>\n> Set value for allowCellsRecycling to true in your configuration.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/facebook/fixed-data-table/issues/474#issuecomment-271379191>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAN4c0yZEyfw-YFOQ7SnTOGO4N9BGF3Uks5rQodygaJpZM4LemWv>\n> .\n>\n. I am trying to use loop control inside a table like this:\n\n`\n   render: function(){\n    var {dataList, columnWidths, selectedColumns} = this.state;\n\n   return (\n            <div className='jnprDataTable'>\n            <ColumnChooser data={dataList} callBack={this.updateSelectedColumns}/>  \n            <Table\n              rowHeight={60}\n              headerHeight={50}\n              rowsCount={dataList.length}\n              width={1000}\n              height={300}\n              isColumnResizing={false}\n              onColumnResizeEndCallback={this._onColumnResizeEndCallback}\n              >\n            {selectedColumns.map(function(selectedColumn, i){\n              return   <Column\n                        key={i}\n                        columnKey={selectedColumn}\n                        header={<Cell>{selectedColumn}</Cell>}\n                        cell={<TextCell data={dataList} col={selectedColumn} />}\n                        fixed={true}\n                        width={columnWidths[selectedColumn]}\n                        isResizable={true}\n                      />\n            })}\n            </Table>\n            </div>\n    )\n  }`\n\nBut when I run it, I got this exception:\n`react-with-addons.js:20215 Uncaught Error: Invariant Violation: Objects are not valid as a React child (found: Sun Oct 04 2015 08:56:32 GMT-0700 (PDT)). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons. Check the render method of`FixedDataTableCellDefault`.  \n\n`\n\nIt looked like Table does not allow loop inside, right?\n\nI can use this solution to control select/option, why not working here?\n\nAny good solution?\n. To be more specific,\nIf I am using this:\n\n   <Table\n\n```\n        rowHeight={50}\n\n        headerHeight={30}\n\n        groupHeaderHeight={30}\n\n        rowsCount={10}\n\n        width={1000}\n\n        height={500}>\n\n        {selectedColumns.map(function(columnName, i){\n\n          return <Column\n\n                  key={i}\n\n                  columnKey={columnName}\n\n                  header={ <Cell>{columnName}</Cell>}\n\n                  cell={<Cell>{}</Cell>}\n\n                  width={200}\n\n                />})}\n\n        </Table>\n```\n\n   It worked.\n\nBut once I replaced the Cell by:\n\ncell={<TextCell data={dataList} col={selectedColumn} />}\n\nAnd the Text Cell is just:\n\nconst TextCell = ({rowIndex, data, col}) => (\n\n```\n    <Cell>\n\n    {data[rowIndex][col]}\n\n      </Cell>\n\n  );\n```\n\nIt is throwing error:\n\nUncaught Error: Invariant Violation: Objects are not valid as a React child\n(found: Sun Oct 04 2015 08:56:32 GMT-0700 (PDT)). If you meant to render a\ncollection of children, use an array instead or wrap the object using\ncreateFragment(object) from the React add-ons. Check the render method of\n`FixedDataTableCellDefault\n\nThis has made dynamically creating column impossible.\n\nCan anyone help please?\n\nFrank\n\nOn Wed, Apr 20, 2016 at 8:15 AM, Kamran Asif notifications@github.com\nwrote:\n\n> You can just omit them in the render function. Do you have a fiddle of\n> what your doing?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/381#issuecomment-212472538\n. It is my false, some data is array, so I have to distinguish array vs pure\nstring. Otherwise, you will meet above errors.\n\nOn Wed, Apr 20, 2016 at 3:46 PM, Frank He hexufeng@gmail.com wrote:\n\n> To be more specific,\n> If I am using this:\n> \n>    <Table\n> \n> ```\n>         rowHeight={50}\n> \n>         headerHeight={30}\n> \n>         groupHeaderHeight={30}\n> \n>         rowsCount={10}\n> \n>         width={1000}\n> \n>         height={500}>\n> \n>         {selectedColumns.map(function(columnName, i){\n> \n>           return <Column\n> \n>                   key={i}\n> \n>                   columnKey={columnName}\n> \n>                   header={ <Cell>{columnName}</Cell>}\n> \n>                   cell={<Cell>{}</Cell>}\n> \n>                   width={200}\n> \n>                 />})}\n> \n>         </Table>\n> ```\n> \n>    It worked.\n> \n> But once I replaced the Cell by:\n> \n> cell={<TextCell data={dataList} col={selectedColumn} />}\n> \n> And the Text Cell is just:\n> \n> const TextCell = ({rowIndex, data, col}) => (\n> \n> ```\n>     <Cell>\n> \n>     {data[rowIndex][col]}\n> \n>       </Cell>\n> \n>   );\n> ```\n> \n> It is throwing error:\n> \n> Uncaught Error: Invariant Violation: Objects are not valid as a React\n> child (found: Sun Oct 04 2015 08:56:32 GMT-0700 (PDT)). If you meant to\n> render a collection of children, use an array instead or wrap the object\n> using createFragment(object) from the React add-ons. Check the render\n> method of `FixedDataTableCellDefault\n> \n> This has made dynamically creating column impossible.\n> \n> Can anyone help please?\n> \n> Frank\n> \n> On Wed, Apr 20, 2016 at 8:15 AM, Kamran Asif notifications@github.com\n> wrote:\n> \n> > You can just omit them in the render function. Do you have a fiddle of\n> > what your doing?\n> > \n> > \u2014\n> > You are receiving this because you authored the thread.\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/facebook/fixed-data-table/issues/381#issuecomment-212472538\n. Yes, definitely, see my above answer\n\nOn Tue, Jan 3, 2017 at 11:25 PM, anyexinglu <notifications@github.com>\nwrote:\n\n> So, is it possible for hiding some columns?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/facebook/fixed-data-table/issues/381#issuecomment-270309395>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAN4c-3ysPP9U_VRsubmIx0DczJHqRAvks5rO0lZgaJpZM4ILUwt>\n> .\n>\n. My solution is:\nif the scrollY is greater or equal of total height, which is the row height\n- lengthOfRows, then it is approaching end.\n\n_onScrollEndCallBack: function(scrollX, scrollY){\n\n```\nif( this.state.rowHeight*(this.state.dataList.length-1)-this.state.tableHeight\n```\n\n<= scrollY ){\n\n```\n  console.log(\"appraching bottom\");\n\n}\n```\n\n}\n\nDo you think if this is reliable or not?\n\nOn Fri, Apr 22, 2016 at 5:55 AM, 3cooper notifications@github.com wrote:\n\n> The way we did it was in the method that creates cells. We only have a\n> quick prototype currently that I need to clean up. The gist is that when we\n> render the first cell of the last row, we kick off a request to get more\n> rows. You need to take into account rendering that cell multiple times and\n> if that cell is visible without scrolling - meaning if you only have like 5\n> rows you will kick off another request for an empty page.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/385#issuecomment-213417135\n. But based on the configuration, each row has fixed height, and row position\nis absolute. I tried to change position for each row from absolute to\nrelative, then the effect is terrible. Is absolute position mandatory for\nfixed data table? if that is true, then the calculation should be ok.\nAny idea?\n\nOn Tue, Apr 26, 2016 at 8:18 AM, 3cooper notifications@github.com wrote:\n\n> One issue with this could be variable row heights.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/385#issuecomment-214780097\n. Complaining what, the various row height?\nIf position and row are already fixed, then, total height should also be\nfixed.\nI actually met one more issue, that is clickable cell, once a certain cell\nis clicked, it will expand some contents below it. Now my solution is only\nto hack into html and insert content, but I have to hide following rows,\notherwise, the inserted html can not be shown. This is all because the\nabsolution position for each row, and they can NOT be pushed down\nautomatically.\nBut I think this has made the total height accurate and we can use scrollY\nto detect if it is approaching bottom\n\nOn Tue, Apr 26, 2016 at 8:30 AM, 3cooper notifications@github.com wrote:\n\n> I think it is mandatory, but I could be wrong. I am now in need of a new\n> infinity scrolling solution since I was updating state in a render method.\n> Redux is complaining about this.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/385#issuecomment-214783932\n. I think the beauty for fixed-data-table is \"Fixed\", it is only suitable to\ndisplay flat data with NO nested display available. So in order to display\nnested data, I need to use other solution, or just regular table syntax.\n\nOn Wed, Apr 27, 2016 at 11:04 PM, mjb3ats notifications@github.com wrote:\n\n> I am asking myself the same question.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/390#issuecomment-215318048\n. No, not working in fixed dataTable.\nBut I used a more simple solution:\n\n_onScrollStartHanlder: function() {\ndocument.body.style.overflow = 'hidden';\n}\n_onScrollEndHanlder: function() {\ndocument.body.style.overflow = 'auto';\n}\n\nI believe biding event on onScrollStart/End is better solution for fixed\nDataTable\n\nOn Mon, Aug 8, 2016 at 1:34 AM, nhducit notifications@github.com wrote:\n\n> You can try this solution: http://jsfiddle.net/troyalford/4wrxq/4/\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/438#issuecomment-238174116,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAN4c9f6cimSD4t7mWaED0t6WL4WLf-kks5qduoegaJpZM4JdXc0\n> .\n. Thanks, worked in IE!\n\nOn Thu, Oct 6, 2016 at 8:20 AM, Chris Jordan notifications@github.com\nwrote:\n\n> This repo doesn't see a lot of active maintenance. Would it be possible\n> for you to try https://github.com/schrodinger/fixed-data-table-2 and see\n> if the issue exists there? The examples are here:\n> http://schrodinger.github.io/fixed-data-table-2/example-object-data.html\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/448#issuecomment-251995402,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAN4c4o0kfF2TRyo542Zfscszt_QWwIhks5qxRGigaJpZM4JpAgr\n> .\n. Thanks Tomas,\nWorked like charm, thanks for the consideration in this senario.\nFrank\n\nOn Mon, Jan 9, 2017 at 11:16 AM, Tomas Kirda <notifications@github.com>\nwrote:\n\n> Check this doc: http://facebook.github.io/fixed-data-table/api-column.html\n>\n> Set value for allowCellsRecycling to true in your configuration.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/facebook/fixed-data-table/issues/474#issuecomment-271379191>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAN4c0yZEyfw-YFOQ7SnTOGO4N9BGF3Uks5rQodygaJpZM4LemWv>\n> .\n>\n. ",
    "anyexinglu": "So, is it possible for hiding some columns, by adding a \"hidden\" attribute, for example? . So, is it possible for hiding some columns, by adding a \"hidden\" attribute, for example? . ",
    "stephenjelfs": "This is duplicate of issue #313. @wlis suggested splitting up the overly large div--it would be nice to know if anyone tried this?\n. FYI **ag-grid** has similar issues https://github.com/ceolter/ag-grid/issues/226 (I just tried it with similar data to the example above).\n. This is duplicate of issue #313. @wlis suggested splitting up the overly large div--it would be nice to know if anyone tried this?\n. FYI **ag-grid** has similar issues https://github.com/ceolter/ag-grid/issues/226 (I just tried it with similar data to the example above).\n. ",
    "DimitarChristoff": "sure. you can do pagination or other workarounds. just seems like a shame\nthat problems like this are still being seen where much older grids like\nslickgrid worked flawlessly with arrays over 200k objects long. data grids\nhave not improved in proportion to javascript and browser advancements. \ud83d\ude15\n\nOn Thursday, 19 May 2016, Steve notifications@github.com wrote:\n\n> FYI _ag-grid_ has similar issues ceolter/ag-grid#226\n> https://github.com/ceolter/ag-grid/issues/226\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/382#issuecomment-220333192\n\n## \n\nDimitar Christoff\n\n\"JavaScript is to JAVA what hamster is to ham\"\n@D_mitar - https://github.com/DimitarChristoff\n. sure. you can do pagination or other workarounds. just seems like a shame\nthat problems like this are still being seen where much older grids like\nslickgrid worked flawlessly with arrays over 200k objects long. data grids\nhave not improved in proportion to javascript and browser advancements. \ud83d\ude15\n\nOn Thursday, 19 May 2016, Steve notifications@github.com wrote:\n\n> FYI _ag-grid_ has similar issues ceolter/ag-grid#226\n> https://github.com/ceolter/ag-grid/issues/226\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/facebook/fixed-data-table/issues/382#issuecomment-220333192\n\n## \n\nDimitar Christoff\n\n\"JavaScript is to JAVA what hamster is to ham\"\n@D_mitar - https://github.com/DimitarChristoff\n. ",
    "deepakmenon": "Hi,\nI was trying to implement infinity scrolling based on the approach specified by xhe..things seems to work as expected...but then i could not find this.state property withing my _onScrollEndCallBack method..I am trying to implement react redux table.any info will be appreciated ..\n. Hi,\nI was trying to implement infinity scrolling based on the approach specified by xhe..things seems to work as expected...but then i could not find this.state property withing my _onScrollEndCallBack method..I am trying to implement react redux table.any info will be appreciated ..\n. ",
    "jaimeagudo": "Perhaps we might add the mention to `.babelrc` for completion sake\n\n`{\n  \"plugins\": [\"transform-object-rest-spread\"]\n}`\n. Perhaps we might add the mention to `.babelrc` for completion sake\n\n`{\n  \"plugins\": [\"transform-object-rest-spread\"]\n}`\n. ",
    "madisvain": "I actually ended up asking the same question. And browser find also does not work for this kind of tables actually - what is the best solution that people are using?\n. I actually ended up asking the same question. And browser find also does not work for this kind of tables actually - what is the best solution that people are using?\n. ",
    "tearsofphoenix": "I just write new component of table, print it in new window.\n. I just write new component of table, print it in new window.\n. ",
    "ckyabsley": "There is some magic happening in the examples.  See the comments on this issue: https://github.com/facebook/fixed-data-table/issues/289\n. There is some magic happening in the examples.  See the comments on this issue: https://github.com/facebook/fixed-data-table/issues/289\n. ",
    "mkozhukharenko": "\ud83d\udc4d  same issue \n. @blairheuer this project is unmaintained . \ud83d\udc4d  same issue \n. @blairheuer this project is unmaintained . ",
    "blankzust": "Same issue +1 Need help. Same issue +1 Need help. ",
    "mkjoerg": "I am asking myself the same question.\n. Yes it did :)\nThank you.\n. I am asking myself the same question.\n. Yes it did :)\nThank you.\n. ",
    "dhirajbasukala": "if you check the arguments in the onRowClick handler you'll get the rowIndex of the data, from which you can get the record data. hop it helps. \n. I've recently updated Fixed-data-table to 0.6.3 and it works out of the box in IE11 as well. If you're referencing the examples displayed on the site then it has the touch support implemented which account for presence of onmsgesturechange in browser window object to detect a touch device. So IE11 shows false positive to touch device, and the container is set to overflow hidden and no scrollbar and then again there is not noTouchStart, onTouchMove, onTouchEnd, onTouchCancel support in IE. However if you just implement the FDT it works in ie with scrollbar. let me know if your case is different. \n. if you check the arguments in the onRowClick handler you'll get the rowIndex of the data, from which you can get the record data. hop it helps. \n. I've recently updated Fixed-data-table to 0.6.3 and it works out of the box in IE11 as well. If you're referencing the examples displayed on the site then it has the touch support implemented which account for presence of onmsgesturechange in browser window object to detect a touch device. So IE11 shows false positive to touch device, and the container is set to overflow hidden and no scrollbar and then again there is not noTouchStart, onTouchMove, onTouchEnd, onTouchCancel support in IE. However if you just implement the FDT it works in ie with scrollbar. let me know if your case is different. \n. ",
    "pencilcheck": "There is no API doc that listed the full argument that the func takes. I only find this information in a stackoverflow thread and it said it were only called with two parameters (event, index)\r\n\r\nAnd none of that is useful, if I want to implement something like \"edit-in-place\". There is no API doc that listed the full argument that the func takes. I only find this information in a stackoverflow thread and it said it were only called with two parameters (event, index)\r\n\r\nAnd none of that is useful, if I want to implement something like \"edit-in-place\". ",
    "chungwong": "Can you add onClick() to <Column/>?\n. Can you add onClick() to <Column/>?\n. ",
    "foodaka": "can you get row data from the onClick callback?\n. nevermind just provided second parameter and provides row index\n\n`handleClick(e,index){console.log(index)}`\n. Ive used native javascript to hack it together. In component will mount or constructor\n\n```\n  constructor(props){\n    super(props)\n\n    //handle window height ajax\n    window.addEventListener('scroll', e =>{\n      e.preventDefault();\n      let body = document.body;\n      let html = document.documentElement;\n      let height = Math.max( body.scrollHeight, body.offsetHeight,html.clientHeight, html.scrollHeight, html.offsetHeight );\n      let scrollTop = document.body.scrollTop;\n      if(scrollTop + window.innerHeight > height -100 && !this.props.reducer.isLoading){\n        let skip = this.props.reducer.offSet\n        skip += 100;\n        this.props.actions.FIRE(skip)\n      }\n    })\n  }\n```\n. can you get row data from the onClick callback?\n. nevermind just provided second parameter and provides row index\n\n`handleClick(e,index){console.log(index)}`\n. Ive used native javascript to hack it together. In component will mount or constructor\n\n```\n  constructor(props){\n    super(props)\n\n    //handle window height ajax\n    window.addEventListener('scroll', e =>{\n      e.preventDefault();\n      let body = document.body;\n      let html = document.documentElement;\n      let height = Math.max( body.scrollHeight, body.offsetHeight,html.clientHeight, html.scrollHeight, html.offsetHeight );\n      let scrollTop = document.body.scrollTop;\n      if(scrollTop + window.innerHeight > height -100 && !this.props.reducer.isLoading){\n        let skip = this.props.reducer.offSet\n        skip += 100;\n        this.props.actions.FIRE(skip)\n      }\n    })\n  }\n```\n. ",
    "jonaswindey": "+1\n\npretty strange to see an \"official\" facebook react module not being maintained\n. For now, you can use my fork if you want to use react 15.x\n\n`\"fixed-data-table\": \"git://github.com/trinit/fixed-data-table#master\",`\n. Done\n. +1\n\npretty strange to see an \"official\" facebook react module not being maintained\n. For now, you can use my fork if you want to use react 15.x\n\n`\"fixed-data-table\": \"git://github.com/trinit/fixed-data-table#master\",`\n. Done\n. ",
    "FredericHeem": "@jonaswindey: do you mind to create a PR if not already done ?\n. In my use case, `overflow:hidden` is also needed in the `cell-overflow` class\n. @jonaswindey: do you mind to create a PR if not already done ?\n. In my use case, `overflow:hidden` is also needed in the `cell-overflow` class\n. ",
    "ses4j": "Ah, figured out the problem.  TextCell was not taking `...props` (only the unset `props`) and so the width/height were being discarded.  Replacing my TextCell with this fixed it:\n\n```\nconst TextCell = ({rowIndex, data, col, columnKey, width, height}) => {\n    var props = {\n        width: width,\n        height: height,\n        columnKey: columnKey\n    };\n```\n\nI can't use the ...props in the signature because my transpiler doesn't seem to support it.\n. Ah, figured out the problem.  TextCell was not taking `...props` (only the unset `props`) and so the width/height were being discarded.  Replacing my TextCell with this fixed it:\n\n```\nconst TextCell = ({rowIndex, data, col, columnKey, width, height}) => {\n    var props = {\n        width: width,\n        height: height,\n        columnKey: columnKey\n    };\n```\n\nI can't use the ...props in the signature because my transpiler doesn't seem to support it.\n. ",
    "AndreyStrib": "I can confirm. Having same issue.\n. I can confirm. Having same issue.\n. ",
    "burakcan": "Any solutions?\n. Found :) https://github.com/facebook/fixed-data-table/issues/167#issuecomment-118022854\n. It's interesting that they're not maintaining this module, because facebook is also using it in power editor.\n. Any solutions?\n. Found :) https://github.com/facebook/fixed-data-table/issues/167#issuecomment-118022854\n. It's interesting that they're not maintaining this module, because facebook is also using it in power editor.\n. ",
    "rzhou186": "Hey @burakcan - just read the issue you linked and it seems like the fix for one of the users was to \"implement `isColumnResizing`\"? Did that fix it for you / how would that even work? I was under the impression that `isColumnResizing` was implemented by FixedDataTable itself, not something that users of the library implement.\n. I figured it out. As it turns out, this isn't a bug - the solution is simply that if you are implementing a `Table` component with resizable columns, you must pass `isColumnResizing={false}` as `props` to that `Table` (as well as, of course, defining `onColumnResizeEndCallback`).\n\nI realized this after reading the issue @burakcan linked above, as well as inspecting the source code for the official example demonstrating resizable columns: https://github.com/facebook/fixed-data-table/blob/master/examples/ResizeExample.js#L61.\n\nThe documentation on `isColumnResizing` is really unclear: https://facebook.github.io/fixed-data-table/api-table.html. Both its name and the fact that it needs to be set to `false` don't really make any sense. Also, there is practically no explanation around it.\n. Hey @burakcan - just read the issue you linked and it seems like the fix for one of the users was to \"implement `isColumnResizing`\"? Did that fix it for you / how would that even work? I was under the impression that `isColumnResizing` was implemented by FixedDataTable itself, not something that users of the library implement.\n. I figured it out. As it turns out, this isn't a bug - the solution is simply that if you are implementing a `Table` component with resizable columns, you must pass `isColumnResizing={false}` as `props` to that `Table` (as well as, of course, defining `onColumnResizeEndCallback`).\n\nI realized this after reading the issue @burakcan linked above, as well as inspecting the source code for the official example demonstrating resizable columns: https://github.com/facebook/fixed-data-table/blob/master/examples/ResizeExample.js#L61.\n\nThe documentation on `isColumnResizing` is really unclear: https://facebook.github.io/fixed-data-table/api-table.html. Both its name and the fact that it needs to be set to `false` don't really make any sense. Also, there is practically no explanation around it.\n. ",
    "slmille4": "I'm getting this same problem on my Surface Pro 3, no scrolling in Chrome or Edge. Dev team please respond?\n. I'm getting this same problem on my Surface Pro 3, no scrolling in Chrome or Edge. Dev team please respond?\n. ",
    "jippi": "Any love for this team FB ? not having the table functional on mobile devices seem quite 2010 :( . @KamranAsif I switched to the fork like 15min later, it works, but not 100% perfect - but 10000x better than nothing ;) Thanks for the great work on fixing this in a fork!\r\n. Any love for this team FB ? not having the table functional on mobile devices seem quite 2010 :( . @KamranAsif I switched to the fork like 15min later, it works, but not 100% perfect - but 10000x better than nothing ;) Thanks for the great work on fixing this in a fork!\r\n. ",
    "alansalnikov": "I'm also seeing the same issue although in my case its with rows that expand on click. I tracked down the root cause of the issue, I'm guessing its the same for you. \n\nWhat happens is that when you scroll around in the table, the order in which it renders the rows changes (haven't really looked into why). For instance on initial render if renders them form `0,1,2,3,4,5,6,7,8,9,10,11`, but on later renders if might do `0,1,3,2,4,5,10,11,7,8,9`. When you have have dynamically changing heights it doesn't update the height it bases its offset calculation on until it gets to the row with that has had its height changes. So if higher index rows that render before the one that had its height change, have the offset calculated incorrectly as its using the old height.\n\nAlso its fixed on scroll because when it re-renders the table it now has all the correct height to do the offset calculations since it set them on the previous messed up render.\n\nWould be nice if this got fixed, but I don't think there is a way around it from just using the library other than not using dynamically changing heights.\n. @KamranAsif Cool. Though I notice it runs into the same issue. Its fine on first load, and then after you scroll around for a bit it gets messed up rendering.\n. I'm also seeing the same issue although in my case its with rows that expand on click. I tracked down the root cause of the issue, I'm guessing its the same for you. \n\nWhat happens is that when you scroll around in the table, the order in which it renders the rows changes (haven't really looked into why). For instance on initial render if renders them form `0,1,2,3,4,5,6,7,8,9,10,11`, but on later renders if might do `0,1,3,2,4,5,10,11,7,8,9`. When you have have dynamically changing heights it doesn't update the height it bases its offset calculation on until it gets to the row with that has had its height changes. So if higher index rows that render before the one that had its height change, have the offset calculated incorrectly as its using the old height.\n\nAlso its fixed on scroll because when it re-renders the table it now has all the correct height to do the offset calculations since it set them on the previous messed up render.\n\nWould be nice if this got fixed, but I don't think there is a way around it from just using the library other than not using dynamically changing heights.\n. @KamranAsif Cool. Though I notice it runs into the same issue. Its fine on first load, and then after you scroll around for a bit it gets messed up rendering.\n. ",
    "shikelong": "thank you\n. thank you\n. ",
    "andrewmclagan": "Agreed. A response would be appreciated. Its a great thing to open-source a project. Although its altogether another to then abandon it and leave small companies who leverage open source project to make their operations feasible, totally open and exposed. We choose a Facebook supported project for this very reason. \n. Thank you for the response. I would be happy to be involved in this repository moving forward, depending on what decisions are made around CLA and what not. This move will likely impact the trust Facebook has in the OS community (minimally of course, as their contribution is huge).\n\nReact Virtualised is great. Although browser support is limited to IE11+, the main reason that we are interested in using this repo. \n\nFor those who are interested the next best option IMO is perhaps http://dynamictyped.github.io/Griddle/ having good browser support down to IE9.\n. At facebook\n\nPlease place a deprecated notice on this repo for future developers. Will save allot of people wasted time.\n. Just use react virtualised. But yes I agree, its part of being an open source company.\n. Yeah agreed. The JS community is very fragmented, although IMO its a result of its size and speed of growth. This repo is a prime example of that situation. React virtualised is a little more comprehensive then just a data grid.\n. Agreed. A response would be appreciated. Its a great thing to open-source a project. Although its altogether another to then abandon it and leave small companies who leverage open source project to make their operations feasible, totally open and exposed. We choose a Facebook supported project for this very reason. \n. Thank you for the response. I would be happy to be involved in this repository moving forward, depending on what decisions are made around CLA and what not. This move will likely impact the trust Facebook has in the OS community (minimally of course, as their contribution is huge).\n\nReact Virtualised is great. Although browser support is limited to IE11+, the main reason that we are interested in using this repo. \n\nFor those who are interested the next best option IMO is perhaps http://dynamictyped.github.io/Griddle/ having good browser support down to IE9.\n. At facebook\n\nPlease place a deprecated notice on this repo for future developers. Will save allot of people wasted time.\n. Just use react virtualised. But yes I agree, its part of being an open source company.\n. Yeah agreed. The JS community is very fragmented, although IMO its a result of its size and speed of growth. This repo is a prime example of that situation. React virtualised is a little more comprehensive then just a data grid.\n. ",
    "larrydahooster": "Would be nice to get an official statement. I'd really like to use this library in my project.\n. Would be nice to get an official statement. I'd really like to use this library in my project.\n. ",
    "MaffooBristol": "I'm going to give react-virtualized a go because my experience of this module so far has been very poor and I can't imagine it getting much better...\n. I'm going to give react-virtualized a go because my experience of this module so far has been very poor and I can't imagine it getting much better...\n. ",
    "seb0zz": "What about making https://github.com/schrodinger/fixed-data-table-2 the official repo?\n. What about making https://github.com/schrodinger/fixed-data-table-2 the official repo?\n. ",
    "gertsonderby": "Some sort of obvious notice that this project is in the freezer would be capital. I didn't find this issue until I started looking for ways to apply custom styling to this component. Would've been nice to know to write this component off on day 1 rather than day 3.\n. @andrewmclagan That presupposes knowledge of react-virtualized - which is not very publicized, and does not show up in a search for 'react data grid' or 'react data table'. I'm not precisely a beginner - 15 years in the business, most of that in JS and open source environments, only relatively new to React ecosystem - but I had no way to know to 'just use'.\n\nBut maybe that highlights an inherent problem with the React ecosystem? Or more generally JS?\n. So maybe add a note that this is not actively maintained? I just wasted three days on this.\n. Some sort of obvious notice that this project is in the freezer would be capital. I didn't find this issue until I started looking for ways to apply custom styling to this component. Would've been nice to know to write this component off on day 1 rather than day 3.\n. @andrewmclagan That presupposes knowledge of react-virtualized - which is not very publicized, and does not show up in a search for 'react data grid' or 'react data table'. I'm not precisely a beginner - 15 years in the business, most of that in JS and open source environments, only relatively new to React ecosystem - but I had no way to know to 'just use'.\n\nBut maybe that highlights an inherent problem with the React ecosystem? Or more generally JS?\n. So maybe add a note that this is not actively maintained? I just wasted three days on this.\n. ",
    "tannerlinsley": "At Nozzle.io, we felt a bit weary banking on this repo for mission-critical parts of our app, so we ended up building our own and migrating away.  https://github.com/tannerlinsley/react-table.  Cheers!\n. At Nozzle.io, we felt a bit weary banking on this repo for mission-critical parts of our app, so we ended up building our own and migrating away.  https://github.com/tannerlinsley/react-table.  Cheers!\n. ",
    "haohcraft": "@KamranAsif thanks for pointing out.\n. @KamranAsif thanks for pointing out.\n. ",
    "xinghul": "Hey @KamranAsif, what do you mean by using shouldComponentUpdate? it's not even invoked I think. \nPlease correct me if I'm wrong, assuming there's no state/props change, the render and shouldComponentUpdate will not trigger after the initial render. But since it's buffered rendering, when scrolling happens, rows got removed/appended dynamically, which is inevitable and the cause of the slowness?\n\nIf that's the case, is there anything I can do the improve the performance?\n. Hey @KamranAsif, what do you mean by using shouldComponentUpdate? it's not even invoked I think. \nPlease correct me if I'm wrong, assuming there's no state/props change, the render and shouldComponentUpdate will not trigger after the initial render. But since it's buffered rendering, when scrolling happens, rows got removed/appended dynamically, which is inevitable and the cause of the slowness?\n\nIf that's the case, is there anything I can do the improve the performance?\n. ",
    "2color": "I'm also curious about this.\n. I'm also curious about this.\n. ",
    "icpavel-sv": "I noticed that if my `onColumnResizeEndCallback` doesn't trigger a state change, my table doesn't get re-rendered (this leaves the blue handle line element visible).\nI took a look at the [source code](https://github.com/facebook/fixed-data-table/blob/5cbf487dd038c2b741cd0298922c1c30dacb38d7/dist/fixed-data-table.js#L1192) and it looks like the handle element's visibility doesn't get changed back to \"hidden\" after the user is done resizing, and it's relying on a state change. I may be wrong, though.\n. I noticed that if my `onColumnResizeEndCallback` doesn't trigger a state change, my table doesn't get re-rendered (this leaves the blue handle line element visible).\nI took a look at the [source code](https://github.com/facebook/fixed-data-table/blob/5cbf487dd038c2b741cd0298922c1c30dacb38d7/dist/fixed-data-table.js#L1192) and it looks like the handle element's visibility doesn't get changed back to \"hidden\" after the user is done resizing, and it's relying on a state change. I may be wrong, though.\n. ",
    "hinikai": "is it work?\n. is it work?\n. ",
    "Robertmw": "Thank you, @wcjordan! I'll replace it and if everything will be ok i'll close this issue. If not, I'll just move it to the forked repo :smile: \n. Thank you, @wcjordan! I'll replace it and if everything will be ok i'll close this issue. If not, I'll just move it to the forked repo :smile: \n. ",
    "kevinaltschuler": "Just updated I should be on v0.6.0\n\nI'm still getting this error using the cell like this\n\n```\nconst EditCell = ({ rowIndex, data, onChange }) => {\n  if (!data) {\n    return (\n      <div>\n        error rendering Cell\n      </div>\n    );\n  }\n  return (\n    <Cell>\n      <Editor\n        onChange={(c) => {\n          if (data[rowIndex]) {\n            const newData = data;\n            newData[rowIndex].text = c.html;\n            onChange(() => ({\n              data: newData,\n            }));\n          }\n        }}\n        options={{ buttons: ['bold', 'italic', 'underline'] }}\n      />\n    </Cell>\n  );\n};\n```\n\nalthough the error is coming from a div rather than tag in RobertMW's case\n\n```\nwarning.js:36 Warning: Unknown prop `columnKey` on <div> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop\n    in div (created by TableBlock)\n    in div (created by FixedDataTableCell)\n    in FixedDataTableCell (created by FixedDataTableCellGroupImpl)\n    in div (created by FixedDataTableCellGroupImpl)\n    in FixedDataTableCellGroupImpl (created by FixedDataTableCellGroup)\n    in div (created by FixedDataTableCellGroup)\n    in FixedDataTableCellGroup (created by FixedDataTableRowImpl)\n    in div (created by FixedDataTableRowImpl)\n    in div (created by FixedDataTableRowImpl)\n    in FixedDataTableRowImpl (created by FixedDataTableRow)\n    in div (created by FixedDataTableRow)\n    in FixedDataTableRow (created by FixedDataTable)\n    in div (created by FixedDataTable)\n    in div (created by FixedDataTable)\n    in FixedDataTable (created by TransitionTable)\n```\n\n(theres more in the stacktrace but thats the end of the FixedDataTable references)\n. Fixed! the problem was that I was giving `<div/>` as the prop `header` of `Column` and Column must pass props to whatever element it gets as `header`\n. Just updated I should be on v0.6.0\n\nI'm still getting this error using the cell like this\n\n```\nconst EditCell = ({ rowIndex, data, onChange }) => {\n  if (!data) {\n    return (\n      <div>\n        error rendering Cell\n      </div>\n    );\n  }\n  return (\n    <Cell>\n      <Editor\n        onChange={(c) => {\n          if (data[rowIndex]) {\n            const newData = data;\n            newData[rowIndex].text = c.html;\n            onChange(() => ({\n              data: newData,\n            }));\n          }\n        }}\n        options={{ buttons: ['bold', 'italic', 'underline'] }}\n      />\n    </Cell>\n  );\n};\n```\n\nalthough the error is coming from a div rather than tag in RobertMW's case\n\n```\nwarning.js:36 Warning: Unknown prop `columnKey` on <div> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop\n    in div (created by TableBlock)\n    in div (created by FixedDataTableCell)\n    in FixedDataTableCell (created by FixedDataTableCellGroupImpl)\n    in div (created by FixedDataTableCellGroupImpl)\n    in FixedDataTableCellGroupImpl (created by FixedDataTableCellGroup)\n    in div (created by FixedDataTableCellGroup)\n    in FixedDataTableCellGroup (created by FixedDataTableRowImpl)\n    in div (created by FixedDataTableRowImpl)\n    in div (created by FixedDataTableRowImpl)\n    in FixedDataTableRowImpl (created by FixedDataTableRow)\n    in div (created by FixedDataTableRow)\n    in FixedDataTableRow (created by FixedDataTable)\n    in div (created by FixedDataTable)\n    in div (created by FixedDataTable)\n    in FixedDataTable (created by TransitionTable)\n```\n\n(theres more in the stacktrace but thats the end of the FixedDataTable references)\n. Fixed! the problem was that I was giving `<div/>` as the prop `header` of `Column` and Column must pass props to whatever element it gets as `header`\n. ",
    "jivinivan": "Yes! I want this too. It would also be nice if the callback could be fired based on a configurable threshold (when last visible row is x rows away from the end or something similar).\n. Yes! I want this too. It would also be nice if the callback could be fired based on a configurable threshold (when last visible row is x rows away from the end or something similar).\n. ",
    "nhagen": "Nevermind, for some reason I was wrapping the `ColumnGroup`s I actually needed inside of a `ColumnGroup` with no header, which was superfluous. Disregard.\n. Nevermind, for some reason I was wrapping the `ColumnGroup`s I actually needed inside of a `ColumnGroup` with no header, which was superfluous. Disregard.\n. ",
    "craigcosmo": "solution: https://github.com/facebook/fixed-data-table/issues/289\n. solution: https://github.com/facebook/fixed-data-table/issues/289\n. ",
    "ajrouvoet": "No longer occurs after updating several packages including react to ^15.0.0\n. No longer occurs after updating several packages including react to ^15.0.0\n. ",
    "nhducit": "You can try this solution: http://jsfiddle.net/troyalford/4wrxq/4/\n. You can try this solution: http://jsfiddle.net/troyalford/4wrxq/4/\n. ",
    "djkirby": "@KamranAsif OS X Version 52.0.2743.116 (64-bit).\n. To clarify, the scrolling itself works, but using a Magic Mouse or Macbook track pad causes the 'back' behavior\n\nEdit: works after restarting chrome...keeping fingers crossed\n. Since restarting chrome I haven't experienced this behavior, so we can probably close this issue.\n. @KamranAsif  Btw what is different in your fork? Should it be used over this repo?\n. @KamranAsif OS X Version 52.0.2743.116 (64-bit).\n. To clarify, the scrolling itself works, but using a Magic Mouse or Macbook track pad causes the 'back' behavior\n\nEdit: works after restarting chrome...keeping fingers crossed\n. Since restarting chrome I haven't experienced this behavior, so we can probably close this issue.\n. @KamranAsif  Btw what is different in your fork? Should it be used over this repo?\n. ",
    "sheerun": "This is still an issue\n. It's fixed in chrome 54...\n. This is still an issue\n. It's fixed in chrome 54...\n. ",
    "ekh64": "The issue occurs when using input fields inside Cells.\n\nHere's [my fiddle](https://jsfiddle.net/amjmvqr2/2/) to replicate the issue.\n\nEnter text in any input and the value of the input field starts appearing in other rows. Keying by `rowIndex` seems to maintain the integrity of the input fields when scrolling.\n. The issue occurs when using input fields inside Cells.\n\nHere's [my fiddle](https://jsfiddle.net/amjmvqr2/2/) to replicate the issue.\n\nEnter text in any input and the value of the input field starts appearing in other rows. Keying by `rowIndex` seems to maintain the integrity of the input fields when scrolling.\n. ",
    "devang-kredx": "Am getting this error too. Were you able to resolve it?\n. Am getting this error too. Were you able to resolve it?\n. ",
    "csatish": "@kayazinc \nCan you please share some code to show selection highlight?\n. @kayazinc \nCan you please share some code to show selection highlight?\n. ",
    "varenya": "Cell class applies at cell not the row level right? @kayazinc . I tried that but it works on cell only.... Cell class applies at cell not the row level right? @kayazinc . I tried that but it works on cell only.... ",
    "Dhruv56": "You can use **rowClassNameGetter** to apply class on a Row. Refer to [documentation](https://facebook.github.io/fixed-data-table/api-table.html) for more details @varenya \r\n. You can use **rowClassNameGetter** to apply class on a Row. Refer to [documentation](https://facebook.github.io/fixed-data-table/api-table.html) for more details @varenya \r\n. ",
    "undejavue": "+1, want to highlight whole row on hover; no success (. +1, want to highlight whole row on hover; no success (. ",
    "Rahadian347": " i can't use rowClassNameGetter to change row's background color , it'cant change row's background color, only cell background, any idea ?.  i can't use rowClassNameGetter to change row's background color , it'cant change row's background color, only cell background, any idea ?. ",
    "kylejacks": "This issue exist with Internet Explorer (Edge).\n. This issue exist with Internet Explorer (Edge).\n. ",
    "jpggvilaca": "+1. +1. ",
    "rayozerets": "thank.\n. I've the same problem(\nhttps://github.com/facebook/fixed-data-table/issues/451\n. Thank you very much!\n. thank.\n. I've the same problem(\nhttps://github.com/facebook/fixed-data-table/issues/451\n. Thank you very much!\n. ",
    "davidtzoor": "Thanks! Do you know why this is happening? It seems as though it doesn't import react well. \n. Thanks! Do you know why this is happening? It seems as though it doesn't import react well. \n. ",
    "jibees": "Yes, sure:\n\n```\nconsole.js:26Warning: Unknown props 'onSortChange','sortDir' on <div> tag. Remove these props from the element. For details, see https://fb.me/react-unknown-prop\n    in div (created by FixedDataTableCellDefault)\n    in FixedDataTableCellDefault (created by SortHeaderCell)\n    in SortHeaderCell (created by ContentDBApp)\n    in div (created by FixedDataTableCell)\n    in FixedDataTableCell (created by FixedDataTableCellGroupImpl)\n    in div (created by FixedDataTableCellGroupImpl)\n    in FixedDataTableCellGroupImpl (created by FixedDataTableCellGroup)\n    in div (created by FixedDataTableCellGroup)\n    in FixedDataTableCellGroup (created by FixedDataTableRowImpl)\n    in div (created by FixedDataTableRowImpl)\n    in div (created by FixedDataTableRowImpl)\n    in FixedDataTableRowImpl (created by FixedDataTableRow)\n    in div (created by FixedDataTableRow)\n    in FixedDataTableRow (created by FixedDataTable)\n    in div (created by FixedDataTable)\n    in div (created by FixedDataTable)\n    in FixedDataTable (created by TransitionTable)\n    in TransitionTable (created by ContentDBApp)\n    in div (created by ContentDBApp)\n    in div (created by ContentDBApp)\n    in div (created by ContentDBApp)\n    in ContentDBApp\n```\n\nContentDBApp is my component\n. Yes, sure:\n\n```\nconsole.js:26Warning: Unknown props 'onSortChange','sortDir' on <div> tag. Remove these props from the element. For details, see https://fb.me/react-unknown-prop\n    in div (created by FixedDataTableCellDefault)\n    in FixedDataTableCellDefault (created by SortHeaderCell)\n    in SortHeaderCell (created by ContentDBApp)\n    in div (created by FixedDataTableCell)\n    in FixedDataTableCell (created by FixedDataTableCellGroupImpl)\n    in div (created by FixedDataTableCellGroupImpl)\n    in FixedDataTableCellGroupImpl (created by FixedDataTableCellGroup)\n    in div (created by FixedDataTableCellGroup)\n    in FixedDataTableCellGroup (created by FixedDataTableRowImpl)\n    in div (created by FixedDataTableRowImpl)\n    in div (created by FixedDataTableRowImpl)\n    in FixedDataTableRowImpl (created by FixedDataTableRow)\n    in div (created by FixedDataTableRow)\n    in FixedDataTableRow (created by FixedDataTable)\n    in div (created by FixedDataTable)\n    in div (created by FixedDataTable)\n    in FixedDataTable (created by TransitionTable)\n    in TransitionTable (created by ContentDBApp)\n    in div (created by ContentDBApp)\n    in div (created by ContentDBApp)\n    in div (created by ContentDBApp)\n    in ContentDBApp\n```\n\nContentDBApp is my component\n. ",
    "roblapp": "This is still an issue. I am having this problem as well. I am not sure what @wcjordan meant by 'Adding onSortChange to be consumed in that SortHeaderCell should fix the issue'. Do he mean to move the [_onSortChange ](https://github.com/facebook/fixed-data-table/blob/master/examples/SortExample.js#L105) function from the SortExample class to the SortCellHeader class?. @wcjordan Ah I see. Thanks for showing me that.. This is still an issue. I am having this problem as well. I am not sure what @wcjordan meant by 'Adding onSortChange to be consumed in that SortHeaderCell should fix the issue'. Do he mean to move the [_onSortChange ](https://github.com/facebook/fixed-data-table/blob/master/examples/SortExample.js#L105) function from the SortExample class to the SortCellHeader class?. @wcjordan Ah I see. Thanks for showing me that.. ",
    "mirko77": "I tried but it does not work, the text is on a single line and trimmed but the overflow is not replaced by the ellipsis. \n\nI also tried on the example [here](https://facebook.github.io/fixed-data-table/example-object-data.html) adding long text to a cell and then play with the css but I get the same result, no ellipsis showing\n\nSee [screenshot](https://drive.google.com/file/d/0B6K16Oe-ZJjeMGs3WkxLa3pjczA/view)\n. It does work indeed!\n\nMany thanks\n. I tried but it does not work, the text is on a single line and trimmed but the overflow is not replaced by the ellipsis. \n\nI also tried on the example [here](https://facebook.github.io/fixed-data-table/example-object-data.html) adding long text to a cell and then play with the css but I get the same result, no ellipsis showing\n\nSee [screenshot](https://drive.google.com/file/d/0B6K16Oe-ZJjeMGs3WkxLa3pjczA/view)\n. It does work indeed!\n\nMany thanks\n. ",
    "alexedev": "@tkirda Thanks, you just saved my day!. @tkirda Thanks, you just saved my day!. ",
    "mobimation": "Now in 2017 useful with fixed-data-table-2 also !. Now in 2017 useful with fixed-data-table-2 also !. ",
    "seanmadi": "I had this problem as well, even after changing my component to a PureComponent. Upgraded Chrome to version Version 54.0.2840.98 and now it seems to be resolved.\r\n\r\nEdit: I actually started getting the problem again after upgrading but then realized what the problem was. If the Chrome React Inspector is open, the scrolling is constantly jittery and freezes. But once I close the React Inspector, everything works fine.. I had this problem as well, even after changing my component to a PureComponent. Upgraded Chrome to version Version 54.0.2840.98 and now it seems to be resolved.\r\n\r\nEdit: I actually started getting the problem again after upgrading but then realized what the problem was. If the Chrome React Inspector is open, the scrolling is constantly jittery and freezes. But once I close the React Inspector, everything works fine.. ",
    "mandarsawant": "Hey thanks Kamran will try this.\n. Hey thanks Kamran will try this.\n. ",
    "walreyes": "Hey @mandarsawant how did that go? I'm about to dig into this stylesheet.. Hey @mandarsawant how did that go? I'm about to dig into this stylesheet.. ",
    "dhenson02": "Actually it probably is working but the background isn't going to show up because the cells have a default background set already.  \n\nI had this problem as well so to work around it I override the provided classes with the following:\n\n``` css\n.public_fixedDataTableCell_main,\n.public_fixedDataTableRow_highlighted .public_fixedDataTableCell_main {\n    background-color: inherit;\n}\n```\n\nTry adding `color: lime;` or something to that class and see what happens then.\n. Actually it probably is working but the background isn't going to show up because the cells have a default background set already.  \n\nI had this problem as well so to work around it I override the provided classes with the following:\n\n``` css\n.public_fixedDataTableCell_main,\n.public_fixedDataTableRow_highlighted .public_fixedDataTableCell_main {\n    background-color: inherit;\n}\n```\n\nTry adding `color: lime;` or something to that class and see what happens then.\n. ",
    "txgruppi": "What is missing for the changes to be accepted?\r\n\r\nI need `scrollToRow` to work on a new table.\r\n\r\nCheers.. @wcjordan I will check this one.\r\n\r\nSomeone, who is allowed to edit this repo's files, could add a message on `README.md` to inform this repo is no longer maintained. =/\r\n\r\nCheers.. What is missing for the changes to be accepted?\r\n\r\nI need `scrollToRow` to work on a new table.\r\n\r\nCheers.. @wcjordan I will check this one.\r\n\r\nSomeone, who is allowed to edit this repo's files, could add a message on `README.md` to inform this repo is no longer maintained. =/\r\n\r\nCheers.. ",
    "jacobbaskin": "Done.\n. Done.\n. ",
    "jvaill": "This seems to still be an issue in Chrome 56.. This seems to still be an issue in Chrome 56.. ",
    "matthewrobb": "I'm actually not able to scroll in any direction in Chrome right now when looking at the examples on the website.. I'm actually not able to scroll in any direction in Chrome right now when looking at the examples on the website.. ",
    "chiester": "Disregard. I tracked down the problem in my data and code. \n. Disregard. I tracked down the problem in my data and code. \n. ",
    "srobertson": "hi @wcjordan,  while it's true you can add custom header content, what we're trying to do is style the column, or the column header (possibly based on the column).\n\nAs you can see from the below image. As far as I can tell... If I insert a cell component and make it's background red, I can't necessarily make the entire cell look red.  \n\n![image](https://cloud.githubusercontent.com/assets/25101/19531952/85c938c0-95ee-11e6-8200-674ff90b1551.png)\n. hi @wcjordan,  while it's true you can add custom header content, what we're trying to do is style the column, or the column header (possibly based on the column).\n\nAs you can see from the below image. As far as I can tell... If I insert a cell component and make it's background red, I can't necessarily make the entire cell look red.  \n\n![image](https://cloud.githubusercontent.com/assets/25101/19531952/85c938c0-95ee-11e6-8200-674ff90b1551.png)\n. ",
    "andreafalzetti": "\ud83d\udc4d . \ud83d\udc4d . ",
    "adilapapaya": "Would be great if they could also point to the [fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2) forked repo.\r\n\r\nProject website: http://schrodinger.github.io/fixed-data-table-2/.. Would be great if they could also point to the [fixed-data-table-2](https://github.com/schrodinger/fixed-data-table-2) forked repo.\r\n\r\nProject website: http://schrodinger.github.io/fixed-data-table-2/.. ",
    "robhadfield": "Hey Kamran, thanks for the quick reply :)\r\n\r\nI've added unique keys and the it's stopped the duplication but I still lose the value when scrolling?\r\n\r\nVideo : http://quick.as/yylyuppyp\r\n\r\nThis is not a controlled component, it's just a HTML input. I wonder if it will retain the value once I actually set a value using react state/props?. Hey @KamranAsif I've done some testing and adding the value dynamically seems to resolve this issue \ud83d\udc4d \r\n\r\nThanks for your help!. Hey Kamran, thanks for the quick reply :)\r\n\r\nI've added unique keys and the it's stopped the duplication but I still lose the value when scrolling?\r\n\r\nVideo : http://quick.as/yylyuppyp\r\n\r\nThis is not a controlled component, it's just a HTML input. I wonder if it will retain the value once I actually set a value using react state/props?. Hey @KamranAsif I've done some testing and adding the value dynamically seems to resolve this issue \ud83d\udc4d \r\n\r\nThanks for your help!. ",
    "swingtempo": "No, it does not. Do you have an example app showing the table header doesn't scroll out of view?  None of the examples here https://facebook.github.io/fixed-data-table/example-column-groups.html show any scrolling.. No, it does not. Do you have an example app showing the table header doesn't scroll out of view?  None of the examples here https://facebook.github.io/fixed-data-table/example-column-groups.html show any scrolling.. ",
    "arthurchipdean": "Awesome. Thank you. Awesome. Thank you. ",
    "nextofsearch": "@wcjordan Thank you so much!. @wcjordan Thank you so much!. ",
    "jstafford": "I just noticed this myself, and was about to write up an issue, until I saw yours. I dug in a little using the React extension for Chrome developer tools. Things I noticed:\r\n\r\n- table has 1,000,000 rows\r\n- each with a row height of 50\r\n- each row has a property called offsetTop, which appears to increase by 50\r\n- the last row to render properly is at index 671,088\r\n- the offsetTop at index 671088 is 33544400 (which is 50 x 671088)\r\n- the offsetTop at index 671089 is 33544450\r\n- in hex 33544400 is 0x1FFFFE0\r\n- in hex 33544450 is 0x2000012\r\n\r\nSo this does look suspiciously like a limit in the browser. But where and why? I have no idea.\r\n\r\nmacOS 10.12.4\r\nGoogle Chrome Version 57.0.2987.133 (64-bit)\r\n. Problem is worse than I thought.\r\n\r\nIn FireFox the last index to render properly is 178956, with offsetTop 8947800 or 0x888858 in hex\r\nThe next one isn't stacked on top of the others, like it is in Chrome, but it just doesn't display.\r\nIt's index 178957, offsetTop 8947850 or 0x88888A in hex.\r\n. Yes, this is fixed in Fixed-Data-Table-2. I was just discovering that the problem was the incredibly large values going into CSS transform, which really didn't need to be done that way.  Glad to know that there is a new project. \r\n\r\nWhen I found Fixed-Data-Table, I thought I was at the right place. I didn't see any big red \"DEPRECATED\" warnings, or links to FDT2. Oh well.\r\n\r\nThanks for linking me to where I needed to go.. I just noticed this myself, and was about to write up an issue, until I saw yours. I dug in a little using the React extension for Chrome developer tools. Things I noticed:\r\n\r\n- table has 1,000,000 rows\r\n- each with a row height of 50\r\n- each row has a property called offsetTop, which appears to increase by 50\r\n- the last row to render properly is at index 671,088\r\n- the offsetTop at index 671088 is 33544400 (which is 50 x 671088)\r\n- the offsetTop at index 671089 is 33544450\r\n- in hex 33544400 is 0x1FFFFE0\r\n- in hex 33544450 is 0x2000012\r\n\r\nSo this does look suspiciously like a limit in the browser. But where and why? I have no idea.\r\n\r\nmacOS 10.12.4\r\nGoogle Chrome Version 57.0.2987.133 (64-bit)\r\n. Problem is worse than I thought.\r\n\r\nIn FireFox the last index to render properly is 178956, with offsetTop 8947800 or 0x888858 in hex\r\nThe next one isn't stacked on top of the others, like it is in Chrome, but it just doesn't display.\r\nIt's index 178957, offsetTop 8947850 or 0x88888A in hex.\r\n. Yes, this is fixed in Fixed-Data-Table-2. I was just discovering that the problem was the incredibly large values going into CSS transform, which really didn't need to be done that way.  Glad to know that there is a new project. \r\n\r\nWhen I found Fixed-Data-Table, I thought I was at the right place. I didn't see any big red \"DEPRECATED\" warnings, or links to FDT2. Oh well.\r\n\r\nThanks for linking me to where I needed to go.. ",
    "travi": "@gaearon anything you can do to nudge this internally? this is the last package preventing the react 15.5 upgrade on a few projects for my team. Great, thanks!. thank you for getting this pushed through!. could we get #488 pushed through too for the `React.createClass` warnings?. @gaearon anything you can do to nudge this internally? this is the last package preventing the react 15.5 upgrade on a few projects for my team. Great, thanks!. thank you for getting this pushed through!. could we get #488 pushed through too for the `React.createClass` warnings?. ",
    "kyldvs": "I think this is okay - really I have no idea how this repo works though :). @gaearon: Yes I asked @pieterv to publish a new version, should happen this morning. I don't actually have npm access for the project :)\r\n\r\nRe: Deprecation/no active maintainers: We are aware and have been discussing it internally for a long time. Right now I do not have any updates related to that.. Looks like it should be at 0.6.4 now, thanks @pieterv :)\r\n\r\nhttps://www.npmjs.com/package/fixed-data-table. I think this is okay - really I have no idea how this repo works though :). @gaearon: Yes I asked @pieterv to publish a new version, should happen this morning. I don't actually have npm access for the project :)\r\n\r\nRe: Deprecation/no active maintainers: We are aware and have been discussing it internally for a long time. Right now I do not have any updates related to that.. Looks like it should be at 0.6.4 now, thanks @pieterv :)\r\n\r\nhttps://www.npmjs.com/package/fixed-data-table. ",
    "kevflynn": "this was ready to merge #488 but looks like it has conflicts now. this was ready to merge #488 but looks like it has conflicts now. ",
    "mb21": "see [Add README notice that project is not officially/actively maintained](https://github.com/facebook/fixed-data-table/issues/468). see [Add README notice that project is not officially/actively maintained](https://github.com/facebook/fixed-data-table/issues/468). ",
    "glenne": "Great to see it being actively maintained in your fork!  It looks like your Basic example has the same issues though that it doesn't work as-is.  Should I perhaps create an issue in your fork?. Great to see it being actively maintained in your fork!  It looks like your Basic example has the same issues though that it doesn't work as-is.  Should I perhaps create an issue in your fork?. ",
    "jecacs": "Have same Warning. Have same Warning. ",
    "acampbellb": "I have been experiencing the same warnings.. I have been experiencing the same warnings.. ",
    "emirdeliz": "I have same warning. I have same warning. ",
    "alexcroox": "https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html. https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html. ",
    "conradogarciaberrotaran": "I'm having the same issue. \r\n```\r\nWarning: FixedDataTableBufferedRows: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\r\n\r\nWarning: FixedDataTable: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\r\n\r\nWarning: Scrollbar: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\r\n```\r\nIs it planned fixing this issue?. I'm having the same issue. \r\n```\r\nWarning: FixedDataTableBufferedRows: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\r\n\r\nWarning: FixedDataTable: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\r\n\r\nWarning: Scrollbar: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\r\n```\r\nIs it planned fixing this issue?. ",
    "jaytaylor": "Also seeing this warning.\r\n\r\n```javascript\r\nWarning: FixedDataTable: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\r\n``` . @maxdarque Thanks for the React Table tip, it looks really nice!. Also seeing this warning.\r\n\r\n```javascript\r\nWarning: FixedDataTable: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\r\n``` . @maxdarque Thanks for the React Table tip, it looks really nice!. ",
    "alexis1990": "Solution ?. Solution ?. ",
    "scorchiowned": "Isnt this maintained anymore? Could the authors comment if we should move to perhaps [FixedDataTable](https://github.com/schrodinger/fixed-data-table-2). Isnt this maintained anymore? Could the authors comment if we should move to perhaps [FixedDataTable](https://github.com/schrodinger/fixed-data-table-2). ",
    "RahulReddy75": "Same error.! any update on this issue?. @maxdarque Yes figured it. Thank you for the reply.. @maxdarque Thank you for the suggestion, will have a look. Mean while as the search was very frustrating to find a appropriate one, I ran out of patience and ended up building my own. :-D   . @piyushdhamecha Check @maxdarque's comment above... could be a good solution.. Same error.! any update on this issue?. @maxdarque Yes figured it. Thank you for the reply.. @maxdarque Thank you for the suggestion, will have a look. Mean while as the search was very frustrating to find a appropriate one, I ran out of patience and ended up building my own. :-D   . @piyushdhamecha Check @maxdarque's comment above... could be a good solution.. ",
    "maxdarque": "Looks like it isn't maintained any more - they've got a FixedDataTable2 - see [here](http://schrodinger.github.io/fixed-data-table-2/). @Rahulreddy75 After trying to use multiple different react tables, I found [React Table](https://react-table.js.org/#/story/readme) and it's been really good so far. Looks like it isn't maintained any more - they've got a FixedDataTable2 - see [here](http://schrodinger.github.io/fixed-data-table-2/). @Rahulreddy75 After trying to use multiple different react tables, I found [React Table](https://react-table.js.org/#/story/readme) and it's been really good so far. ",
    "piyushdhamecha": "having same issue.... having same issue.... ",
    "asinha08": "Is this project dead? No one responding.. Is this project dead? No one responding.. ",
    "wsfuller": "My personal favorite is \"React Table\":\r\n\r\n- [Site](https://react-table.js.org/#/story/readme)\r\n- [Github](https://github.com/tannerlinsley/react-table). My personal favorite is \"React Table\":\r\n\r\n- [Site](https://react-table.js.org/#/story/readme)\r\n- [Github](https://github.com/tannerlinsley/react-table). ",
    "EdHuamani": "It seems that they continue in this repository [fixed-data-table-2 ](http://schrodinger.github.io/fixed-data-table-2) I am reviewing it\r\n. It seems that they continue in this repository [fixed-data-table-2 ](http://schrodinger.github.io/fixed-data-table-2) I am reviewing it\r\n. ",
    "jtlindsey": "More options:\r\n\r\n| Site                               | GitHub                                 |\r\n| ------------------------------ |:------------------------------------:|\r\n| [Griddle (this one is the most production ready that i've tried)](https://griddlegriddle.github.io/Griddle/docs/) | [GitHub](https://github.com/griddlegriddle/griddle/)\r\n| [PrimeReact datatable](https://www.primefaces.org/primereact/#/datatable)  | [GitHub](https://github.com/primefaces/primereact)    |\r\n| [adazzle React Data Grid](http://adazzle.github.io/react-data-grid/index.html) | [GitHub](https://github.com/adazzle/react-data-grid)\r\n\r\n\r\n\r\n. More options:\r\n\r\n| Site                               | GitHub                                 |\r\n| ------------------------------ |:------------------------------------:|\r\n| [Griddle (this one is the most production ready that i've tried)](https://griddlegriddle.github.io/Griddle/docs/) | [GitHub](https://github.com/griddlegriddle/griddle/)\r\n| [PrimeReact datatable](https://www.primefaces.org/primereact/#/datatable)  | [GitHub](https://github.com/primefaces/primereact)    |\r\n| [adazzle React Data Grid](http://adazzle.github.io/react-data-grid/index.html) | [GitHub](https://github.com/adazzle/react-data-grid)\r\n\r\n\r\n\r\n. ",
    "ezmiller": "Is it actually the case that this project has been abandoned? Would be good to know one way or another.. Is it actually the case that this project has been abandoned? Would be good to know one way or another.. ",
    "follower90": "I have found fixed-data-table has firstRowIndex in state, thats what I need. Investigating how to get it from there. I have found fixed-data-table has firstRowIndex in state, thats what I need. Investigating how to get it from there. ",
    "thejohnbackes": "see https://github.com/schrodinger/fixed-data-table-2/issues/229. see https://github.com/schrodinger/fixed-data-table-2/issues/229. "
}