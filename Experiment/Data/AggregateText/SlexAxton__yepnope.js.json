{
    "SlexAxton": "Aiight, I'm thinking a prefix is in order here, but I'm weary about adding a bunch of specific logic to the tool just for IE. So my proposed solution (which I'm currently coding) is as follows:\n\nFor IE specific includes, it'd like like this\n\n```\nyepnope([\n  {\n    nope: ['script1.js', 'script2.js', 'ie6!style1.css', 'ie7!style1.css', 'ie8!style1.css'],\n  }\n]);\n```\n\nI'd love to make it only work on css files, but that's not really point of the addition, so I think I won't. If people are going to do things incorrectly, they'll likely find a way anyways...\n\nI think I'll add this as a prefix plugin, and the api for those plugins will be something like:\n\n```\nyepnope.addPrefix('prefix', function(location){\n  //.. logic\n  return newLocation;\n});\n```\n\nIf the new location evaluated to false, then nothing will be loaded. So for the ie ones, it would look like:\n\n```\nyepnope.addPrefix('ie6', function(location) {\n  if(isIE6) {\n    return location;\n  }\n  return false;\n});\n```\n\nOnly restrictions i can see is multiple prefixes... I suppose I could support chaining prefixes...\n\n```\n`css!ie6!style.css`\n```\n\nI'll try that... it's a little odd, but I'd rather keep it pretty simple...\n. Okie... I think I got this in here.\n\nCSS now loads in order... so that's a total go.\n\nI also added a new function on `yepnope` called `addPrefix`\n\nThis handles all prefixes (including the built in `css!` prefix).\n\nI added an official extension to the `prefixes` folder that contains the IE conditional logic that you seem to want.\n\nIt is a good example of what you can do with the new addPrefix function.\n\nAll prefixes are chainable, and in the case where you use multiple prefixes from the ie package, it performs a logical `OR` in order to pass the tests. Other prefix families may implement that differently though, since it's specific to this plugin. Here's an example:\n\n```\nyepnope({\n  test: Modernizr.borderradius,\n  nope: ['ie!allIE.js', 'ie6!ie7!oldIEs.js', 'iegt8!newIEs.js', 'css!ielt6!iegt8!wtf.css?rnd=123']\n});\n```\n\nHere are your total list of prefixes:\n\n```\nie\nie5\nie6\nie7\nie8\nie9\niegt5\niegt6\niegt7\niegt8\nielt7\nielt8\nielt9\n```\n\nThey should be pretty self-explanatory. I think I left out a few that no one would ever use, or that we don't have yet, but this should be good for a while.\n\nI've done some regular testing, but haven't put the stress test on it yet, so let me know if you see anything odd. I'll get some real docs, and some better demos up now that #jqcon is over.\n\n<3z\n. For the record, you would probably just concat and minify those the yepnope.js file and the yepnope.ie-prefix.js file (in that order) and serve that. No extra wiring is necessary once they're loaded.\n. I went ahead and fixed this by giving access to $LAB on the yepnope object (via your suggestion) - marking as fixed. :D\n. I like it. Nice change with so little code. Appreciated.\n. I like it. \n\nI think, if I'm guessing correctly, instead of passing an object to 'callback' it'd take an array and just match up the callbacks in order, since it's just a numerically indexed object with a few extra functions on the prototype...\n\nAlso the complete callback is one I was def going to add. I enjoy the extra protection in the callback stuff.\n\nStop showing me up on my own app.\n. This is not a bug in yepnope. The way JavaScript creates object literals happens right away.\n\nSo your test for `typeof jQuery == 'function'` will always be false, because it evaluates before the yepnope function executes.\n\nThis is just the way JavaScript executes code, so I'm not sure I could fix it for you.\n\nWe could potentially add the ability to add a delayed function to execute in the `test` variable. I will add this to the list of things to consider.\n. That would be true for any expression. It would need to exist prior to yepnope executing.\n\nWe're working on an api that allows for injecting things in the yepnope lab chain in a callback.\n\nUntil then, you might do that manually with the $LABjs instance that yepnope has. It's ugly, but it should work. However, I think you're underestimating the ways that a script could fail to load. Really, you can't just check for the value of jQuery since depending on the browser, the script may or may not have a callback for a bad script at all. You may need to set up some sort of polling and a timeout to do it correctly.\n\n```\nfunction doAnotherYepnopeCall(prevLabChain) {\n  yepnope([{...},{...}], prevLabChain);\n}\n\nvar myLABchain = yepnope([{\n  load: 'http://cdn.com/jquery.js',\n  callback: function(){\n    // pass our labchain into the second param of another call\n    doAnotherYepnopeCall(myLABchain);\n  }\n}]);\n\nsetTimeout(function(){\n  if (!jQuery) {\n    // pass in our different LAB call\n    doAnotherYepnopeCall(yepnope('/local/jquery.js'));\n  }\n}, 15000);\n```\n\nThis of course doesn't cancel the original attempt at loading, which could potentially break some things, but LABjs doesn't really have a 'cancel' api, so it'd be tough to put that in myself. I'd say if you _absolutely_ had to have a fallback, perhaps async loading (in any capacity) isn't your best bet. You'd still see some perf gains if you did a sync load and check of jQuery (and subsequently another load of the back up) and _then_ called yepnope on the rest of your stuff.\n\nIt's possible to do the fallbacks, but there's really no pretty api for it (that I know of) and it takes quite a bit of knowledge of browser loading patterns and callbacks on errors, etc.\n\nHopefully that helps!\n\nPS the sync pattern of this is easy:\n\n```\n<script \"http://cdn.com/jquery.js\"></script>\n<script>\n  if(!jQuery) {\n    document.write('<script src=\"local/jquery.js\"><'+'/script>');\n  }\n</script>\n<script>\n  yepnope(...);\n</script>\n```\n. Yea, I've talked at great length with jdalton about some of this stuff. For the most part, it's anyone's guess. jdalton uses `MozOpacity` and stuff, but only because it's shorter. I figured opacity was closer to being non-prefixed than the Appearance object, though it is spec'd.\n\nI'm open to change them, I'd just love to find something with any more security than that.\n\nMaybe we need to add to one of your lazyweb lists and/or the modernizr undetectable lists about the _best_ browser inferences to use, only when you have to. Then if those inferences become standard enough... maybe they'd be more unlikely to change (or perhaps more likely... like the UA string... idk )\n. closing this until we know of something better.\n. Yepnope does request every file you put into it twice. The first time it loads itself into your cache as some sort of non-executable entity (an object element, or an img element, or a script element with a fake type attribute, depending on your browser). The second time it's injected, we inject it as an executable script, and this time it's cached. So there is really only the millisecond or less that it takes to execute the callback function and reinject a script tag extra (and however long it takes to access the cache).\n\nFirebug hasn't been the  most reliable source of what's going on (since arguably, this technique isn't exactly standard). We found that we needed to create test cases around the issue in a more foolproof manner, so we did.\n\nIf you serve the yepnope directory (on apache w/ a php installation) (with wamp or mamp works on windows or mac, respectively), then you can direct your browser at the tests folder. A few of the tests are specifically built to catch a _real_ double load (as this was _previously_ an issue in firefox - (so if you have an old version, you should update)).\n\nThe way the test works, is to put a sleep timer on resources that's long enough to be unmistakable. So we can force a JS file to take 3 seconds to download.\n\nIf at 5 seconds in it's not done (enough time for latency/slow computers etc), then it probably downloaded twice, instead of caching the second time. If it takes between 3 and 5 seconds, then it works as expected. And if it takes less than 3 seconds then it was cached to begin with an is an invalid test.\n\nSo I'd encourage you to make sure you're on the latest version and run the test suite in your browser and let me know the results. If it is double loading for real (like full-request-double-loading) then I'd love to get as much info about your set up as possible, because I'm currently passing all tests in as many browsers as I can get my hands on.\n\nThanks for reporting the issue.\n. Oh, as for injected script tags not being seen in the html view, we try to keep the memory footprint low by removing the script elements after they execute. This helps a lot in IEs.\n. Actually, yepnope does enforce execution order. It's why we removed the `wait!` prefix from the api. Any order that you give your scripts in will be guaranteed to execute in that order (but all will download in parallel). We have (as you seem to have stumbled upon) created a way to load scripts inside the callbacks (and have those scripts execute before something in the next array element).  This probably isn't what you want in your case though. If you just specify the next script in an array, it will load in order. This way both scripts can download simultaneously instead of not knowing to start downloading the second script until the first is already done.\n\nThanks for the feedback! We've seen some of the firefox throbber issues, but we're not sure how to consistently reproduce them and it seems to be in conjuncture with other things. Needless to say, we'll keep our eye open. (but it doesn't keep me up at night).\n. Closing this unless someone else has double loading issues in the future.\n. It makes 5 uncached requests and 5 cached requests (which have little to no cost).\n. Unfortunately, google maps is a huge user of `document.write` which is not compatible with asynchronous loading (or good coding practices).\n\nThis is untested: http://pastie.org/1541467\n\nBut replacing the `document.write` with a call to `yepnope` _may_ be the start of something that works, but the script it requests probably has the wrong stuff too.\n\nIt may be better to leave out google maps from yepnope altogether, unfortunately, since google has a hard time following their own best-practices. :/\n. This might be a good reason to do a _preload-but-dont-execute_ prefix, so you could load in the eventual google script that get's injected via google.load in parallel with google.load, then have it get actually injected by google.load instead.\n\nI'm on it.\n. In the latest RC, I went ahead and added a _preload-but-dont-execute_ prefix `preload!`\n\nIf you download the latest source (including yepnope.js), and the the preload prefix you can preload the file right away, so it's ready to inject in the callback.\n\n```\nyepnope([{load: ['http://www.google.com/jsapi', 'preload!http://whateverthegoogleloadeventuallyinjects.com/maps.js'],\n    callback: function() {\n      google.load(\"maps\", \"3\",\n            {\n                callback: function () {\n                    console.log(\"loaded\");\n                },\n                other_params: \"sensor=false\"\n            });\n}}]);\n```\n\nIf you look at your web inspector, you can see which file name that the `google.load` ends up injecting, and then use it to preload. Then you still get parallel loading of your files :D  (the google load will inject it and execute it, but it will already be in your cache, so it should be approaching free).\n. I wouldn't suggest using yepnope with google maps since they still use document.write.\n. It looks like you are using some snapshot of our development and are running into a bug because of that. Try updating to the RC1 that's currently the latest in the repo, and it should work (I tested it, and it did).\n\nAlso, `wait!` is no longer necessary, we decided to just always enforce order. So save the bytes.\n\nAlso, ask the selectivizr guy to make his stuff not use `document.write` so you can load jQuery and selectivizr all with yepnope (async).\n\nAlso instead of including 3 separate files for yepnope, and all of Modernizr, try the builder that I created: http://modernizr.github.com/Modernizr/2.0-beta/#flexbox-input-iepp-load\n\nThat should automagically create a build of Modernizr that just has the flexbox and input tests that you need, and it also has yepnope bundled with it. Then, I would say to concatenate the yepnope.ie-prefix.js file to the end of that, and just have 1 file up top, BUT you aren't using the ie prefix anywhere... so just leave that out.\n\nHope all that helps!\n. Is there any way you can put up an example of this happening on a live webpage?\n\nWe have a test suite that does this about 50 times, and it's passing in every browser that we support, as far as I can tell, but perhaps you're doing something that I haven't thought of. It'd be hard for me to tell without seeing it though, so if you could get me access, that'd be awesome.\n\nThanks!\n. Moved it to master, thanks for the find! It looks like the problem occurred when you try to use yepnope inside of a file that you load with yepnope. We hadn't considered that use-case. (I actually would advise against it if you can avoid it, but if you're trying the hack i showed you in the google maps stuff, that'd be a good reason to do it :) ).\n\nThanks for the catch!\n\nWe moved away from LABjs in the 1.x version of yepnope so we could do some things that aren't possible (while obviously making other sacrifices) with LAB. This also helps to keep our file size down, which is priority #1 with script loaders.\n\nThanks for the congratz. Let me know if you run into anything else!\n\nP.S. thanks for the fix ralph\n. I noticed this last night as well. Something I just changed to support older firefoxes broke the newer ones under my nose. I'll get it cleaned up today. I'd suggest not running on master branch until we get a real 1.0 - because we're getting all the grossest bugs out and I totally shouldn't have RC'd it until we did that, but I didn't have enough tests in place at the time.\n\nThanks for running the tests and letting us know. Super helpful!\n. Looks like ralph cleaned this up before I had a chance. Let me know if you still see an issue.\n. This is new info, I'll look into it today with the other FF issue. Thanks!\n. If this was happening in the buggy last update, then it isn't anymore. Let me know if you see otherwise.\n. Sounds like you need cache headers.\n. Thanks.\n. Hmm. I can reproduce that. Before we'd only seen it on the testsuite, but it seems to have made its way all the way in. It obviously is a firefox bug, but I'm looking into possible solutions.\n\nThanks for the report.\n. For what it's worth, we've narrowed this down to only happen when you are using yepnope within one its own callbacks. If there's another way you can structure your loads to avoid this, that's a temporary fix. Working on a real one, currently.\n. haha thnx mathias :D\n. We made the (somewhat silly, but I stand by it) call to not increase the version number because we hadn't actually announced 1.0.0 yet ( we will today ) and the bug fix was pretty minor and only a few hours old. A 1.0.1 launch just didn't feel right. I also happen to be on the modernizr team, so consider the build tool instantly up to date :D.\n. Hmm, Okay, my feedback:\n- You _do_ need the plugins in order for them to work.\n- The site _does_ list them as _plugins_ - but we'll see what we can do about making it more clear for people who didn't see the title first.\n- The Modernizr build tool options (while I may be on that team) are completely up to the Modernizr team. Yepnope went 1.0.0 2 days, ago, so I'd expect a little time before extra features show up in the _beta_ builder for modernizr. I think it'd be good to get some of the plugins as an option, but I also think that they could severely clutter the Modernizr build tool with things that no one generally cares about. I think if you're going to be loading plugins, you should probably not use it as Modernizr.load - and just concatenate your modernizr build and your yepnope build. Modernizr.load is not guaranteed to act exactly the same as yepnope in the future\n- I think you misunderstand the flexibility of plugins. The ie prefixes are just implemented as plugins, so yepnope's internals have no way of knowing that these are 'exclusive' plugins instead of just modification plugins. Some plugins would require the exact _opposite_ behavior from the one you're suggesting. We always strip off the various plugins, and then run their modification function on the resource objects. If there is no modification function, nothing gets modified, and the script loads as-is. This is entirely desired behavior. Since `!` is invalid in a url (which is why we use it) - it would be silly to just leave on an unknown prefix and request it. It would also be silly to assume anything about whether the resource should be loaded by default or not loaded by default (because different plugins may not have anything to do with _whether_ something loads or not.).\n- I don't think that IE, preload, or CSS are even close to common use-cases. While they all might be small individually, they add up (and we'll add more official plugins in the future). It doesn't make sense to include _any_ bytes in a loader that you don't absolutely need, since the loader is a blocking resource. It pains me to even have a 1.6kb library at this point.\n\nI understand that we seem to simply have a difference of opinion on most of these things, rather than any technical issues. Please know that with sufficient support, I'd consider these types of suggestions, but as of now, I think I like the structure as-is. I will certainly go back through and make the appropriate documentation changes to make these things more obvious in the future.\n\nThanks for your report!\nAlex\n\nPS: you're example of what you're trying to do seems to go against the main point of yepnope, which is to load scripts in parallel. So rather than what you have there, perhaps you could not _automatically_run_front.js_ and instead have it create an object that you can call `.init()` on (or something similar). That way, you could do:\n\n```\n<script>\n  yepnope({\n    load: [ \n      \"/js/jquery-1.5+tinypubsub-0.6.min.js\",\n      \"ie6!/js/dd-belated-png.min.js\",\n      \"/js/front.js\"\n    ],\n    complete : function() {\n      // Delay loading until DOM READY signal\n      jQuery(function(){ Front.init(); });\n    }\n  });\n</script>\n```\n\nAnd you'd get full parallel loading.\n. Even though you don't need front.js until after dom ready, doesn't mean you shouldn't load the file immediately. This is where you'll have nice performance gains.\n\nyepnope is an _asynchronous parallel script loader_ - The parallel part means that you can load all of your scripts at once. So you are welcome to load front.js later on, but you are only artificially extending the time that it takes for that script to run. This would probably end up being even slower than a normal `script` tag, because it isn't injected until _after_ the dom is ready, whereas most scripts would be a part of the dom. That's all I meant by that. Certainly it will continue to work.\n. I guess the key thing to realize is that you can _load_ a script at a different time than it executes. If you wait until you have to execute a script to load it, then you put yourself in a spot of extra time, if it's already loaded, then you get immediate execution, which is awesome.\n. Got it, sorry got derailed.\n\nThere should be no issue adding prefixes to modernizr.load.\n\nHere's how the Modernizr build tool works\n1. Include Modernizr (with correct options)\n2. Include yepnope 1.0.0 exactly\n3. Add `Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};`\n\nSo quite literally, there is nothing different about Modernizr.load than yepnope, because it calls `yepnope` in it. (yepnope is also leaked globally (on purpose)).\n\nI just tested to see if prefixes loaded after `Modernizr.load` was aliased and they still work fine. (though you would add them to the `yepnope` object, NOT to the `modernizr.load` object).\n\nAfter a modernizr build with `modernizr.load` try this:\n\n`yepnope.addPrefix( 'alert', function ( r ) { alert( 'works!' ); return r; });`\n\n`Modernizr.load( 'alert!something/that/exists.js' );`\n\nThis alerts just dandy. I've tested this with the `ie` prefix and it seems to work as intended.\n. This is good feedback. I think we tried to hit a good mix a of file-size vs. customizability in the first release, and as more people use yepnope in the real world, we'll see what really deserves to be in. I think exposing the underlying script injector (much like we expose the caching-only) would be a good addition. Unfortunately it'd probably be a significant amount of code change. Probably a 1.1.0 type thing.\n\nIf you want to try to hack your own version until we hit our next version, the `injectJs` function would be a good place to start. You'd just need to create an object in the format that `preloadFile` returns. That's at least where I'd start.\n\nThanks for the suggestion!\n. For those of you guys interested in this feature, I've pushed the feature to the v1.1 branch here:\n\nhttps://github.com/SlexAxton/yepnope.js/commit/a4e5f933caec5516f79ba2a61ac83c2da191ba73\n\nI'll likely have to add an options object for types and attributes, etc. - but this is pretty close to what I think it will end up being.\n\nCurrently\n\n```\nyepnope.injectJs( 'url.js', function(){ console.log( 'loaded' ); });\n```\n. `v1.1` is scheduled for two-weeks out. Bugs triaged. Code in place. Writing tests and finishing up final fixes.\n. (note this already all works, it's just not in the main branch yet. I'll close this ticket when we push 1.1)\n. I'm in the process of closing tickets that I've fixed that haven't landed in master, but are in the `v1.1` branch. So consider this fixed officially when that version goes live. (via `yepnope.injectJs`)\n. Yes, this is an unfortunate side affect of tricking the browser into caching everything. If you need to see these graphs, a tool like Charles Proxy or HttpWatch is probably your best bet.\n. Loading JSON is a pretty different beast than script loading. We'd suggest using a different tool for this.\n. Another note is that we don't have any filters in the filters folder anymore, and git won't allow you to checkin an empty folder. So that's why it's gone.\n. I can't reproduce this in any of the browsers mentioned here. I'd also love to see a test case!\n. Thanks Paul.\n\nThough, while this is _possible_ with yepnope. I'd strongly suggest doing that work on the serverside. You always know which page you're serving up, so the best performance is going to come by writing a small module in whatever backend you use in order to output the correct included scripts into yepnope per page. It doesn't sound as sexy, and I love it when people use yepnope, but I think you'll be happier in the end.\n\nJust for a little insight into why, you'd actually need to load jQuery first, then start loading your script afterwards. This stops you from being able to do parallel downloads, and will end up hurting your speed. It also highly couples your dom to your app. This means that when some other designer changes the class names, the whole site stops working suddenly.\n\nHope that helps!\n. Do you mean in the readme file. Currently there is a prefixes folder that has all of our prefixes in it. I'd be happy to put the information where everyone thought it was necessary though.\n. I'm sorry, I'm still confused about what you'd like me to do. Try again?\n. Oh, what would be the use case? Modifying other prefixes seems like a bad idea.\n. I suppose my advice would be to check your yepnope file to see if you included the prefix. I don't think the extra bytes for listing out prefixes would help anymore than just looking at the file. The flaw is that a person who isn't actually testing in older browsers, and forgets a prefix doesn't know that they'd _want_ to list out the prefixes, and those are the only people who'd be interested in doing so.\n. Closing this until use-cases are present.\n. I haven't gone as far as to test it (always a good thing :/) but as far as I know, the code you have there should work. We intentionally made it to where the 'complete' callback fires regardless of any actual script loading.\n\nThat also means the code could go in the 'complete' callback of the last block, as well. Yepnope forces the order of execution, so it will always be the last thing to run if it's the last thing to be declared.\n\nHope that helps!\n. Closing this out unless I was wrong about this stuff.\n. Hey Ben,\n\nThis is certainly an issue we've seen, and moved around quite a bit in Firefox. (and it's certainly a bug in firefox, as _nothing_ is still loading). However, as of right now, we can't really find a way around it in the scenario that you are talking about.\n\nMy best suggestion is to not wait until `domready` to load anything. The best case scenario is to wrap the script in a function and _execute_ the function on domready, instead of waiting to load it altogether.\n\nThe other, slightly dirtier option would be to use the `preload!` prefix/plugin in order to preload the plugin right away in the initial block. Then, since jQuery is on the page, just use a `getScript` call to the exact same url you preloaded with. This will avoid an additional object preload, and ensure that there is no eternal loader. We are definitely adding a 'now' prefix that will also avoid preloading, but we haven't quite got there yet.\n\nAs a background, firefox has some  bugs with object loading of elements being injected in the callbacks of other object preloads. So you _might_ have some luck just adding a `setTimeout` to the call that you have in the document ready function.\n\n```\n    OTR.ready(function() {\n      log('All base scripts have loaded...');\n      setTimeout( function() {\n      yepnope([\n        {\n          // load one, we may load more depending on what the page requires.\n          load: \"http://www.cornify.com/js/cornify.js\",\n          complete: function() {\n            cornify_add();\n            log('cornify loaded:', cornify_add);\n          }\n        }\n      ]);\n      }, 0 );\n    });\n```\n\nThough I can't guarantee that one will actually work. It's worth a shot though. :/\n\nThanks! And we'll certainly update immediately if we can figure out a way to make this go away for good.\n. Hey, thanks for the commit. Can you perhaps detail the use-cases for this change? Thanks!\n. I think instead of just extending this to charsets I am adding in an 'attribute' object that will define key/value attribute pairs to be added or overridden. This should also cover the charset use-case.\n. Here are the warnings on your personal website: \n\n![http://f.cl.ly/items/1m431V0F3s0C381G1z2R/Screen%20Shot%202012-12-19%20at%203.09.17%20PM.png](http://f.cl.ly/items/1m431V0F3s0C381G1z2R/Screen%20Shot%202012-12-19%20at%203.09.17%20PM.png)\n\nHas anyone complained about them yet?\n. @montlebalm I did not reply with an 'ad hominem' attack. The fact that you have _warnings_ on your site is a perfectly valid argument that warnings are an accepted part of developing websites. In fact I was stating that your website is in a good/acceptable state. It would be 'ad hominem' if I was saying that your site was _bad_ because of the warnings. The point of warnings are to point developers in the direction of something that _might_ go wrong, but they aren't _errors_.\n\nThe preloading of scripts in yepnope uses images as the mechanism. It's a hack to get things to work in every browser. Using the cache that is primed with images, yepnope can be certain that the next injection of the script will happen immediately, rather than after a network delay. You could not 'fork' yepnope and keep this behavior without doing preloading. There are other ways to do async loading in-order script execution, but they break features in yepnope. It's the exact same reason that you have a `box-sizing` warning in your CSS. Because we often add all possibilities to our CSS in order to cover all bases and make things compatible everywhere.\n\nThe warning for most people serves as a way of telling that they may not be sending the right headers for their images. However, we are well aware of the headers that we are sending for scripts are the incorrect ones for images. So you can safely ignore the warning.\n\nIf you are being 'annoyed by constant pollution of the console', then you should seriously reconsider how many scripts you are loading with yepnope. 3 or less is a best practice, and the consequences of loading more are far far more serious than a developer needing to adjust their eyes 10 to 20 pixels during a console debugging scenario.\n. Furthermore, your original comment was much closer to an ad hominem attack, and was kind of a dick move.\n. As noted above, we're doing this intentionally and these warnings can be\nsafely ignored.\n. We're killing this by default. So let's kill this bug. Screw Safari and it's quirks.\n. We have this fixed in the v1.1 branch that should go out soon. Thanks for the extra info.\n. I believe this is fixed, and `v1.1` is around the corner (see milestone). Adding @ralphholzmann to this ticket since he's responsible for that section of code.\n. I'll fix this in the repo, you are correct, but this pull request is crazy-weird. I think you're trying to pull in the site branch into the master branch.\n. Unfortunately, this is a bit different than the way yepnope works internally. When you load a resource with a fake `type` attribute (like `text/template`), it actually doesn't even download in most modern browsers. In the browsers that it does download in, the text isn't accessible to you like it would be if the template was inline.\n\nThe way requirejs does this is by doing an XHR request for the file, if you specify that it is a `text!` dependency. ( https://github.com/jrburke/requirejs/blob/master/text.js#L22 ). This technique does not work cross-domain. The way that RequireJS gets around this, is that if you require a cross domain text file, it will pull it down during the build process, and inline it as a string in your final source code.\n\nYepnope neither has any xhr capabilities, nor a build tool, so I think this may be out of the bounds of what will ever be possible with yepnope.\n\nLet me know if you know differently about any of this stuff, but I've done a fair amount of work with this stuff in the past, and it's just an entirely different ballgame. a micro-xhr library maybe all you really need.\n. The `complete` function always runs no matter what. If you need to tie a callback to a specific script load, use `callback`.\n\n```\nyepnope({\n  test: window.JSON,\n  nope: {\n    json : 'json2.js'\n  },\n  callback: {\n    json: function () { alert('json2 was loaded.'); // run some JavaScript!!! }\n  }\n});\n```\n. I can't reproduce this happening: http://jsfiddle.net/gVQJD/show/\n\nHere is my net tab in IE9 for that page\nhttps://img.skitch.com/20110526-ckdwk1ytuk6wihw6eq1ckqh8kx.jpg\n. I have heard of this issue, and would love to fix it, but for the life of me I can't get it to happen. Can you get something that's sharable for me to look at?\n. Is there something special that I have to do to get this to show up? Here is a screen cast of me loading it on os x and windows FF3.6 (hard-refreshes) a couple times: http://screencast.com/t/9RQwcLDW1hc\n. As the person who wrote a good chunk of both yepnope and the bazaarvoice integration code, this must _really_ be my fault. Thanks for the additional test cases. I will try and get this fixed this weekend. It's probably our last `v1.1` blocker.\n. Sure, my email is alexsexton at gmail - I'm currently at a conference, but should have some intermittent time.\n. This is the most reduced that I could get the issue (mostly testing in FF 3.5.19) - it doesn't happen _every_ time, but it's pretty consistent.\n\nMuch like in the video, you either need to cache bust the url, or re-press enter in the window (a first load situation).\n\nhttp://jsfiddle.net/SlexAxton/t6AvB/56/show/?cachebust=1234\n. It seems pretty easy to break that example to _not_ break by changing just about anything.\n\nIf I had to _guess_ that you are likely loading more than 3 or 4 scripts at once. I wouldn't suggest doing that for speed or performance, etc, but also it may solve your problem if you merged more of them together.\n\n@ralphholzman seems to think that maybe `v1.1` is not susceptible to this problem, but we haven't changed too much of the core, so I'm skeptical.\n\nStill looking for a solution ... \n. I already broke the `v1.1` \"fix\" by loading more scripts at once. That really seems to be the cause of the bug showing up.\n. Unfortunately we have _no_ leads on this problem. I'm pushing to a further out milestone since it would forever block the new release otherwise.\n. I have been debating this, because there are quite a few loaders with a similar api to the one you are describing.\n\nI just don't find the yepnope way to be much harder than your way:\n\nW/ functions\n`yepnope({ test:Modernizr.geolocation, yep:['map.js', pinHome] });`\n\nCurrent\n`yepnope({ test:Modernizr.geolocation, yep: { a: 'map.js' }, callback: { a : pinHome } });`\n\nand honestly I think that's a little more clear...\n\nI am still open to this, I'd just love a discussion and perhaps some more input. Thank you for the suggestion, regardless.\n. Hmm, I'll look into this. Until I find a fix, in development, you could reduce the `yepnope.errorTimeout` to something lower, so the timeouts will happen quickly and everything will go a little more smoothly. I'd bump this back up for production though.\n. We're working on the next version of `yepnope` and this has actually already made it in. If you look at the `v1.1` branch, you can see in the prefixes section that we've added an attribute object that you can send via prefix or filter.\n\nIt looks something like this in practice:\n\n```\nyepnope.addPrefix( 'media_all', function ( resource ) {\n    resource.attrs = {\n        \"media\" : \"all\"\n    };\n    return resource;\n});\nyepnope('media_all!all.css');\n```\n\nBUT - this use actually kind of defeats the purpose of yepnope a little bit. These won't lazy load, because yepnope preloads files first, then injects them. So I think the real solution here is the the `Modernizr.mq` function. It allows you to pass in mediaqueries as your test;\n\n```\nyepnope({ test: Modernizr.mq('min-width:0px;'), yep: 'all.css' });\n```\n\nIt's an additional thing to add, but you can build a pretty small version of modernizr with yepnope built in.\n\nHope that helps.\n. I have this programmed and working in `v1.1` - when we push that out, this will be live.\n. Hi @summsel - thanks for your question. Would it be possible for you to set up a test case with your situation that would be available to us so we could debug it?\n\nAs for your second question, that is planned in the v1.1 release.\n. From what I can tell, you aren't doing much conditional loading. Ideally, you still concatenate all files that you can together, and serve them up together. Also, I'm not positive, but last I checked, `selectivizr` had a `document.write` in it, which means that it cannot be loaded asynchronously.\n\nAssuming Selectivizr was fixed, it seems like you could reduce this to 3 requests. Concatenate all JS except selectivizr, and all css (potentially in a build tool) and use `Modernizr.load` to bring them in. Then instead of using the `ie` prefix for yepnope, you'd be better off using feature detection for support of the css3 capabilities that you need. So that should be rewritten as a test/nope situation.\n\nHope that helps!\n. Thanks for the report. I have seen other similar reports with way less detail, so this helps greatly.\n\nIf I had to guess, something in the minification/build process is actually changing the code to not work the correct way. I will look into it.\n. Assuming that there is a head tag is actually way more dangerous than assuming that there is a script tag. In fact, jQuery does not assume that there is a `head` - it uses the same method that yepnope does. However, we could recompute the available script tag at the time of each injection, rather than once at the top. I will talk it over with @ralphholzmann and see if it's not a big pain. Until then, that's the patch that I'd suggest.\n\nThere are plenty of browsers, however, that do not automatically add a head element in. http://www.stevesouders.com/blog/2010/05/12/autohead-my-first-browserscope-user-test/\n\nSo that is not a safe alternative.\n. Marking this to add a test for this behavior before `v1.1` goes live. I haven't reproduced, but the code above should be close to create a test for it.\n. The underlying code for jQuery.getScript is the same as in yepnope. The difference is that yepnope executes things in order. If you don't need that functionality, you probably should just use barebones script injection:\n\n``` javascript\n(function(d){\n  var s = d.createElement('script'),\n        t = d.getElementsByTagName('script')[0];\n  s.src = 'script.js';\n  s.async = true;\n  t.parentNode.insertBefore( s, t );\n})(document);\n```\n\nThe fastest it gets, and doesn't make you wait on jQuery.\n. This should be fixed along with this issue in this commit (reworked how `complete` works entirely):\n\nhttps://github.com/SlexAxton/yepnope.js/commit/6715e2c7646462c33411c0e3af4aebadb623c4e9\n. I'll turn this into an issue for documentation of fallbacks for complete. We'll consider looking into how difficult this would be to make work in the complete callback, which would be ideal, but if it causes too much bloat, etc, documentation might be our best bet.\n\nThanks for the report!\n. The tests run instantly, so your solution would result in double loading jQuery, more than likely. I'd go with the `callback` fix above.\n. Marking this to go into `v1.1` to fix it to work for complete and callbacks.\n. Just realized this issue was the same as another, but I just fixed this in the `v1.1` branch. The solution sucked to write, but I think it works. Test case added, etc.\n\nhttps://github.com/SlexAxton/yepnope.js/commit/6715e2c7646462c33411c0e3af4aebadb623c4e9\n. I'll merge this into 1.1 -- anyone who knows a reason on why this wouldn't work, speak now plz.\n. I think this is probably a good idea. Can you clean up the code to not have multiple var statements? And also, I think a global timeout is a nice feature. Can you keep that in, and then just add the resourceObj timeout as a supplemental feature?\n\nThanks!\n. Yes, that line. you can declare it outside of the loop at the top of the function.\n\nI see the global timeout, missed it before. Apologies.\n. Considering this, or similar, for v1.1 - I definitely like individual timeout support, and I can't think of a much better way to set those timeouts than this. Needs some tests.\n\n@ralphholzmann - take another look at this as well, and let me know if you think anything should change.\n\nI'll add an official issue for this so we can add it as a considered milestone for v1.1\n. Couldn't merge this in due to big changes in `v1.1` but I pulled in the basic idea, and it's now in place in that branch.\n. Cool! Thanks for the work on this. Any chance you wanna do a pull request so you get the credz in the log?\n. @ralphholzmann - you put this fix in the `v1.1` stuff, yes? Either way, when we take out the CSS callbacks by default, let's make sure this fix is in the new plugin to support this. We won't pull this into master since we're changing the way it works, but it'll be fixed in the appropriate spot. Many thank yous.\n. I think I'm going to close this one out for now. I do really appreciate the contribution, but I think we're ok with the functionality now, and will save the bytes. Anyone who disagrees can feel free to voice their opinion.\n. Commented on #53 for this. Thank you for the fix. We'll likely pull it into a different section of code.\n. Yepnope doesn't work that well in prehistoric browsers for other reasons, and this test works in all of our supported browsers, so we'll keep the shorter one for now. Also, hard to add in code that is simple and copyrighted like that into a WTFPL project.\n\nWill happily re-consider if anyone has a good argument against, but closing for now.\n. In the `v1.1` branch of yepnope, we are exposing `yepnope.injectJs` and `yepnope.injectCss` - these will just inject your scripts and allow you to run a callback on them without doing any order preservation. I'd imagine a `now!` plugin would be a pretty easy write after that, but I haven't tried it quite yet.\n. (the `v1.1` release is imminent, hence the issue closing)\n. I added a comment to the gist. Try it if you could.\n. Don't forget to include the CSS prefix in the prefix folder. We've had complaints that that isn't clear enough currently, and were working on it. Right now, it's interpreting your CSS as JS.\n. 1) The autoprotocol filter is no longer necessary, as of 1.0.0 - just use the `//www.google.com` format.\n\n2) We'll look into the failing tests on the new FFs. The CSS callbacks have always been difficult to get exactly right. We may try and remove built-in support in the next version, since this feature is actually very rarely used.\n. We are officially removing css callback support as a default (which should clear up most of this) since essentially no one uses it. We'll put out much of our code now into a plugin for those diehard style loading peeps. Creating a new issue to make sure that happens for `v1.1`\n. Unfortunately there is no cross-browser way to detect a 404. There are a few browsers that we can do this in, but we felt a consistent experience cross-browser was important. Do you know of a way to add this functionality?\n. I think we _do_ know that it's not possible. @ralphholzmann did most of the research on that. I think Opera was definitely a blocker, not sure about the rest. ( We rely on error handlers in a few browsers in order to know when things are done preloading, so it's impossible to tell the difference between a good error and a bad one ).\n. Are you using the most recent version of yepnope?\n. Also, potentially try using the callback for the resource instead of the complete handler.\n\n``` javascript\nyepnope([{ load: \"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.2.min.js\"\n        , callback: function() {\n            if (!window.jQuery) {\n                yepnope('../javascript/jquery.min.js');\n            }\n        }\n}, /* some resource */]);\n```\n\nI know that's a silly limitation if that ends up fixing it, but I think that might do it (and will be fixed in later versions).\n. @ralphholzmann - I think this is the weird thing where it has to be inside of a `callback` instead of a `complete` function - let's change that restriction if this is that. I can fix it, but please confirm that you think this is the same thing I do.\n. This is a repeat. Closing out. Fixed in the `v1.1` branch if anyone needs it immediately.\n. In `v1.1` we've added in support for arbitrary attributes to be added to a script or style element. I think this will open up the opportunity for a plugin to support this, as well as infinite other things like it. I think I like that approach as a base, though we'd very much appreciate you creating a plugin on top of that new api for specific LESS support when we push that out. This should serve as a good base. Thank you for bringing this to our attention, and we want to support this type of stuff, we're just taking a slightly more generic approach.\n. Adding this as a blocker for putting out `v1.1` - I agree, it would be a good default\n. Make sure you're including the `css` prefix plugin from the `prefixes` directory.\n. Can you post an example? http://jsfiddle.net\n\nIf you use the css prefix, it _forces_ the plugin to be loaded as css. The only way for it to load as a script tag is if the css prefix isn't being added or isn't added correctly.\n\nYou can see it in action in our test suite if that helps as well.\n. I don't have access to all my normal tools right now, in order to run the proper test suite, but a quick test I just ran worked:\n\nI went to http://2011.texasjavascript.com/ - which has the latest yepnope on it.\n\nThen I put the following in my console:\n\nAdd the css prefix plugin (from `/prefixes/yepnope.css-prefix.js`)\n\n``` javascript\nyepnope.addPrefix( 'css', function ( resource ) {\n  resource.forceCSS = true;\n  return resource;\n} );\n```\n\ntest with some broken file\n\n``` javascript\nyepnope('css!test.css?fake');\n```\n\nThen look in the `<head>` element to see if it was injected as a link tag or a script.\n\nI can add a proper test for it tonight when I have my  normal dev environment around.\n. Again, sorry for the primitive testing techniques right now, but here's a screenshot of my result:\n\nhttps://img.skitch.com/20111010-8bjw183s65xds67h4k7yujeuti.jpg\n. Did you ever figure out if your stuff worked? You seemed upset that I suggested that you didn't add the 'css' prefix, but I can't find a different reason for that not to work. We've (read: @ralphholzmann ) added additional support for testing that in the `v1.1` tests by moving over some of the rewriting work to handle it better. It all seems to work well.\n\nLet me know if you find out something else. We're looking to move on `v1.1` soon so it'd be good to get a fix in for this if it's truly a bug.\n. No offenses as long as we get this straightened out. I'm marking this to be fixed for `v1.1` - regardless of what that ends up being. Our goal is the 13th, so I'll close out this issue if we can't reproduce it by then. Assigning myself.\n. Well, I still can't be sure you're successfully loading the css prefix plugin with that demo.\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/demo/index.html#L7-9\n\nThe plugin is not included in that page by default (it's an old testing ground we don't use much anymore).\nCan you load in the `yepnope.css-prefix.js` file into that?\n. Ideally you'd provide a failing test case. Inside of the `tests/` folder there are several tests that test the successful loading of css. I'd suggest copying a simple one, and using the css prefix, and showing that it fails when qUnit runs.\n. I think it's safe to say that this works if the plugin is included. I have tested in every browser I could get my hands on in both operating systems. I'd imagine we're just not being clear enough that the plugin needed to be included for this to work.\n\nSo.... @ralphholzmann added logic into `v1.1` to parse out query strings. I'm sure there's still some secret ways to break it if you try, so we'll still offer the css plugin (adds the `forceCSS` options to `true` on the resource object) just in case you need to be absolutely sure (like if you are generating urls and you don't know if they're valid.)\n\nSo I'm closing this as invalid again, but the feedback is clear that the plugin is not obvious, and so we've pushed those changes into the next version.\n\nThanks for your report. \n. I can't test this right now, but perhaps trying a bare minimum injection of the small script. something like:\n\n``` javascript\n(function(w,d){\n  var s = d.createElement('script'),\n        l = d.getElementsByTagName('script')[0];\n  s.src = 'test.js';\n  l.parentNode.insertBefore( s, l );\n})(window, document);\n```\n\nIf that works it's yepnope specific, I'd guess, and if it doesn't, then we need to file a bug.\n. Will look into this before pushing out `v1.1` - I initially don't have a problem with it, but I'll go try it in the real world and see if it has any drawbacks.\n\nI think the original reason we don't take it as the second param is because you used to be able to pass in an old yepnope chain, and fall into the ordered list that was already occurring, but I think we took that out in `v1.0`.\n\nWould love some @ralphholzmann and/or @paulirish feedback on this.\n\n``` javascript\nyepnope('something.js', function(){ something() });\n```\n\nMy only immediate reaction is that it stops making a ton of sense once you add multiple objects and stuff, but if it was a consistent 'complete after everything' it could just be well-documented.\n. Marking to consider this for `v1.1` not necessarily putting it in.\n. Alright, I looked into the code it would take to add this in. It wouldn't be as small as I'd like, so I don't think I'm going to add this in.\n\nHowever, I think this really only looks good in the case when you're only loading a single string with yepnope. Like so:\n\n``` javascript\nyepnope('myscript.js', function(){ alert('done!'); });\n```\n\nI agree that that is better than creating an object and giving it a `complete` handler. But once you start creating tests and stuff, I think it becomes more clear with the explicit `complete` handler.\n\nLuckily in `v1.1` we exposed the raw injection function `yepnope.injectJs` so you'll be able to do this simple case with that:\n\n``` javascript\nyepnope.injectJs('myscript.js', function () { alert('done!'); });\n```\n\nThat bypasses all the caching mechanisms and stuff, so it's a bit more smooth anyways. So people who want to use yepnope as just an async script injector can be satisfied.\n. The delimiter could also be a colon, if we wanted.\n. Just pulled this into `v1.1` with some modifications. Tests needed though.\n. This would require quite a bit of extra code, not to mention be slower because of the extra requests involved. Also, it can be very difficult to know which script tag was the including script, etc.\n\nIn other words, I think there are better ways to do this. I do appreciate the thought though, and welcome other ideas.\n\nThanks.\n. That is kind of crazy, never seen anything like it. There's no chance that there isn't more yepnope calls in that file? That's the only thing I can think of right now...  We may need to set up a test case of sorts so i can debug this if that isn't the problem.\n. I think I'd just opt for people doing a Function.prototype.bind for this feature.\n. These are harmless warnings that come from the preloading tricks that yepnope uses. They have no effect on the outcome, but are unavoidable. Luckily users aren't reading these soft warnings.\n. Call `yepnope` from one place - at least after your css includes and after any of your most important external resources. Everything works, but testing, much like @aFarkas implies, is the only way to know for your site. End of the page before the body tag is the _safest_ - not necessarily the fastest, which is why that's often the advice.\n. It still has to parse all the code regardless, and yepnope is that heavy. I'd bet you'd see better performance without the `setTimeout` than with it, as all the important stuff executes asynchronously in the long run.\n. My comment over on that issue, for reference:\n\n\"Yepnope does not suffer from this issue. While it does use script tags for preloading, it uses invalid mime-types to ensure execution doesn't happen. There is a hard to reproduce bug in yepnope that we think has been ironed out in the `v1.1` branch if you'd like to try that out.\n\nThanks!\"\n. You couldn't rewrite it as a `jQuery.ajax` call because it's a script (unless you `eval` everything). You'd have to use [jQuery.getScript](http://api.jquery.com/jQuery.getScript/) which also does not have an error callback. This is because there's no way to reliably get an error state back from loading a script. We considered adding the error state for the few browsers that this works in, however we felt this would encourage people to build apps that supported less browsers.\n. I'm mobile, but they'd have to still inject script tags for cross domain\nscripts, no?\n. Hi Jake,\n\nI think you're running into two things.\n\nThe delay comes from the fact that in some browsers errors aren't passed on to the `onload` event of scripts. We'd love to get these errors, but we can't act on the ones that we don't get. We put the timeout in place for this reason.\n\nThe other problem is a bug in yepnope that we've fixed in `v1.1` (not yet released) but is pretty easy to work around yourself. Just use a `callback` instead of a `complete` when you're relying on the fallback. I think that should solve it.\n. The beta for v1.5 was launched about 29 minutes before you asked this. Just\ncheck out the main repo.\n\nThanks! Good timing!\n. Awesomely descriptive problem. I think yepnope could potentially solve this one, but I'd have to be sold on a better api than an empty string.\n\nI have two solutions for you, both of which I don't think are ideal:\n\n``` javascript\n// This solution just uses a single function to kick off things when everything is ready.\n(function(){\n  function jqInit(){\n    $(function(){\n      $(\"div.whatever\").css(\"color\", \"red\");\n    });\n  }\n\n  yepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope({ load: '/js/jquery-1.7.1.min.js', complete: jqInit });\n        }\n        else {\n          jqInit();\n        }\n    }\n  }]);\n})();\n```\n\nThe following way is a hack that uses the new 'non-reexcuting' script as a means to an end.\n\n``` javascript\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: \"//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js\",\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nI didn't test that second one, because it's a bit silly, but I think it might work. Feel free to suggest the right syntax for this. It'd have to look and feel better than the first example though.\n. You could also maybe use the `callback` and `complete` properties to your advantage.\n\n``` javascript\nyepnope({\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    callback: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    },\n    complete: function () {\n      $(function(){\n        $(\"div.whatever\").css(\"color\",\"red\");\n      });\n    }\n});\n\n```\n. Injecting a script with javascript will always be async, unless you use `document.write`, but even then it doesn't happen until the end of the current script, so you still wouldn't have a workable api.\n\nI'm interested in making the `callback` `complete` situation work. I feel like it _should_ work.\n\nJust FYI, yepnope exposes `yepnope.injectJs` to do alot of the script creation and injection that you're rewriting in these attempts.\n. Agreed. Will get that working.\n. I think this might have actually worked before `complete` was solidified a bit better in 1.5. I think I know where the issue lies:\n\nHere's a test case:\n\nhttp://jsbin.com/equzis\n\nIdeally, this would alert `1.7.0`\n\ncc-ing @ralphholzmann just so he's aware of this issue.\n. Is there any chance we can make this a completely optional file that we could just attach at the end of the file? I like having this option, but having it in by default has some significant size concerns for us.\n. If there's anything we can do to expose the correct stuff, let us know (or feel free to add it). We want to push out the v1.1 stuff (likely, actually as v1.5 since it's kind of some big changes) pretty soon, so happy to tackle it quickly.\n. I just launched the v1.5 beta, it's 1.1 with a few bigger features, so we bumped it a bit to make it a little more obvious.\n. Unfortunately for everyone, headers are everything when it comes to our style of script injection. The browsers just don't send the correct events when the headers are outside of what they expect. I don't know of a solution. :/ Many apologies.\n. This is actually a pretty highly tested portion of yepnope:\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/tests/tests.js#L155-239\n\nI'd be interested to see a failing test case if this really is a bug, as we pass all of those tests in our supported browsers.\n. Your code seems to be:\n\n``` javascript\nyepnope({\n  load : 'http://www.yandex.ru/dropcounters.js',\n  callback : function ( url, result, key ) {\n    console.log( url, result, key );\n  },\n  complete: function () {\n    alert('Everything has loaded in this test object!');\n  }\n});\n```\n\nThe only only errors that throw in my copy of firefox (which it seems like you're using) are the ones in http://www.yandex.ru/dropcounters.js .\n\nThe reason why it seems like things are loading twice is explained here on the yepnope site: http://yepnopejs.com/#twice\n\nIf you could host a test page that you can reproduce the error and give us more information about the browser you're seeing this in, we may be able to help solve this for you. Have you tried using other scripts than the `dropcounters.js` file? That seems to have quite a few problems in it (The only function isn't defined).\n. Ah I see Firefox 10 in the initial comment. Will investigate further in that browser.\n. Some of those extra errors were helpful. Thank you.\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/yepnope.js#L189\n\nI think perhaps the reason why it's throwing is because of that line only running in state 1.\n\nThat means that on some subsequent loads\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/yepnope.js#L246\n\n`preloadElem` could end up being null/empty object. That's the type of thing that would throw that type of error.\n\nI'll see if I can't clean it out. Thanks for the report.\n. I can definitely repro the bug at this point, but we may have to rework the whole system to get it fixed. Apologies on this one guys, it just didn't occur in the tests.\n. Hmm, i need to grab more context, and I have a 4pm meeting. But I'll run the test suite against that right after.\n\nThanks for the patch :D\n. I pushed this into the `yepnope.js` file in master, I'd love for you guys to try it in your individual situations. Thanks!\n. That's clear. It's intended that they don't re-execute. It is not intended that the complete callback doesn't fire. That may be a separate issue though. Looking into it.\n. Do you want to do a pull request for this? I can put it in if not, but want you to have the git history credit.\n. Merged. Thanks for the pull. Will push a 1.5.3 soon.\n. I pushed 1.5.3 today which had this fix.\n. They boil down to nearly the exact same thing. Whichever one you prefer would be the best one to use. I personally like the first one, unless I'm using multiple groups, in which case I mix them.\n\nyepnope _does_ separate loading and execution. That's how it can load everything all at once and execute them in order. We offer a whole plugin system through filters and prefixes that we have documented on the site. We have a 'preload' prefix that just preloads a file, but doesn't allow it to execute. Then you can execute it at anytime by just injecting it (like with `injectJS`), we do this on the yepnope website.\n\n> From all I see, you can't really control either loading or execution, but can only monitor, and even then, only the execution\n\nThis is confusing to me. You decided the order by what order you call in. You can use 'recursive yepnope' (documented on the site) in order to inject scripts into the middle of the stack, and you can stop things from executing. It seems like all of the things we mention. Let me know if something is not clear here.\n. Its a bug that were working out. Technically it only happens when the second time you request a script is the last thing you request. But that's a bug for sure.\n. @ralphholzmann - I missed this issue when it came through. Do we have a successful loading mechanism for older mobile webkit browsers?\n. If you look at some of the branching we do with the browser inferences at the top of the file, we decide what type of element we want to use to preload with. There's a good chance that the method we used in the 1.0.x series of yepnope releases actually works on these browsers, since it was a little bigger and more specific. That may be a good place to start. See if yepnope 1.0.x works on those devices.\n. I think it's likely a performance hit, but one I'm willing to add. Any chance you wanna do a pull request for this?\n. Its not an error, its just a warning. Yepnope does this on purpose in order to preserve execution order. Its a pretty well accepted side effect\n. The issue is not the mime type warnings though. If you can figure out the source of the TinyMCE stuff, feel free to file an issue.\n. Live JSLint your code!\n\nhttp://mondaybynoon.com/20110421/jslint-in-sublime-text-2-on-os-x/\n\nhttps://github.com/hallettj/jslint.vim\n. (or even better, jshint!)\n. Haha. No worries. Thanks for reporting!\n. It certainly seems like we can add this to the list of bugs that fixing other things about the `complete` callback added. We're working on fixing both sets of problems, but they seems to fight each other. Stay tuned for updates.\n\nThanks for the report. This is helpful for adding to our test suite.\n. Hey Pat,\n\nWhat if we just stopped removing script tags?\n. I can't find a reason why anyone would want to remove script tags. Can you figure out a use case for this?\n. you could poll for a `parentNode` and whenever it was `unedefined` it would be about that time. Let's fix the bug in the other stuff rather than here. Happy to help.\n. > If yepnope crashes then Yepnope has a bug....\n> unless:\n> Yepnope points the finger of blame at the person causing the problem.\n\nI'm not sure I agree with that logic. Otherwise all my bugs would be browser bugs -- and all browser bugs would be OS bugs for that matter.\n\nEither way. I can point a finger to 'whatever is removing the initial script tag.' That shouldn't ever need to happen, so I don't understand why we would want to add extra bytes and extra complexity to handle something that shouldn't happen.\n\nI'm sure your code is fine, but it re-queries the dom on every injection. That's both unnecessary and still asynchronous enough to cause the race condition to happen (just reduces the time it can happen in). It is not the appropriate fix for the problem.\n\n> Understand that my motivation to debugging other people's code is pretty limited as well. I have enough of my own bugs and issues. (Plus I have my own startup to run. Ask me about my day :-P )\n\nI offerred my help to debug the issue in the other script because I wanted to help you, as well as answered your questions quickly and respectfully. If you think that I am not also busy, and I just run yepnope for a living, check out it's license. I am willing to get to the _bottom_ of your issue with you. Not put bandaides over the top. It's not an engineering technique that I'm a fan of.\n\nIf this is unacceptable to you - yepnope is WTFPL - feel free to fork, patch, and claim that yours is better.\n. Firefox has some mechanisms for figuring that stuff out, but it's tough. I don't think it fires when they are removed, just when they are 'get' and 'set'.\n\nAs for the 3am scenario, it would make sense that that company can't use yepnope. There are plenty of people with incompatible systems that can't use yepnope as well as many other open source software projects. As the maintainer, you get to draw a line for the amount of noise you're willing to accept.\n\nPersonally loading more than a couple scripts (like 3) on page load - all through yepnope - is the use-case that I'm optimizing. It's really the only time when yepnope has value. I could support many many options for support of every use-case, but I don't find value in supporting use-cases where yepnope is not going to be helpful.\n. I think we used to fire errors immediately when we knew. @ralphholzmann does most of the loading stuff and i think this changed. Maybe he knows why it changed better than my dance around the facts.\n. There's no test, so there is no result. no?\n. The `result` parameter is the result of the `test` property. Currently there is no cross browser way to detect a failed script.\n. Seems simple enough. Let me know if your app continues to work on normal browsers. I don't think there's a ton of people using the css loading feature, so whatever you wanna put in here is probably the most relevant thing to do.\n. We actually added this as a feature in 1.5. The majority of people wanted to avoid loading scripts twice. You can force an injection again with `yepnope.injectJs('url/here.js')`\n. Can you upgrade to the latest and try again? If it still breaks, could you post a jsfiddle? Happy to help debug an isolated test case.\n. I updated the site for you (and all). Unfortunately, I have nothing to do with NuGet.\n. Amazing bug report. Thank you.\n\nWould you like to put in a pull request for that fix?\n. <3z\n. Unfortunately I do not have one of these devices to try on. It does very much sounds like a timeout issue. If you look where there is browser inference, potentially you could mess with trying to run other browsers' execution paths by hard coding those tests and see if that clears anything up?\n. Hi Ken,\n\nI think this may be better off as an official plugin, rather than a core feature. You can implement it as a `filter` - via the `yepnope.addFilter` method.\n\nWe try to be religious about adding features into core, so we can keep the file size as small as possible.\n\nDoes this sound agreeable? Happy to hear arguments to the contrary. Happy to help out if the docs are lacking. We _love_ pull requests and yours is great. So good when people add tests.\n. (note, we can still add it in the official repo. We don't have a `filters` directory, like we have a `prefixes` directory, but you could create one)\n. Also, regardless of the direction we go, we have a system for generating the test files that you've created. If you check out the test server app a bit, that logic should be clear. If not, happy to help out.\n. As far as I can tell, the `url` param on the resource object should be immediately available to change. I wouldn't change the `origUrl` - just the `url` property.\n\n``` javascript\nyepnope.addFilter(function( resObj ) {\n  resObj.url = yepnope.baseUrl + resObj.url;\n  return resObj;\n});\n```\n\nSomething like that seems like it would work, no?\n. It may be better implemented as a `paths` type system like in RequireJS.\n\n``` javascript\nyepnope.paths = {\n  'template' : 'http://something.com/template',\n  'js' : 'http://somethingelse.com/scripts'\n}\n```\n\nThen any time a resource starts with the path, the path mapped string is put there instead.\n. Best.\n. Woah, that worked first try?! I'm a regex master!\n. Merged. Thanks!\n. Unfortunately, the place we inject precached scripts is carefully placed to work in as many browsers as possible. There's a lot of extra logic in trying to find a spot in the body to inject into without breaking old IEs etc. The speed tools here are just a bit dated and don't take this stuff into consideration. You should be going for fastest page loads, in my opinion, not the highest scores.\n. Any chance you could add a test case for this too? Thanks for the commit! Will pull.\n. Wanna post your code to a branch and link it here? Perhaps it could be useful in our fix.\n. Many thanks, @ralphholzmann and I will take a look.\n. You would need to also load jQuery with yepnope.\n. Awesome find.\n. thanks :D\n. This is a very good bug report, much appreciated detail. I'll look into fixing it. Thanks.\n. Pull request?\n. Are you sure you're including the separate CSS preload prefix plugin? This\nshould all still work.\n. It's actually not a plugin, it's a prefix. It's a weird distinction, but try this one:\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/prefixes/yepnope.preload.js\n. I'll see what I can do. Thanks!\n. It's working how we interpereted people wanting it, but I think your assumptions are better than what we built. The user should have final say in the override.\n. I'd say this is a decently small enough way to handle this. Merging.\n. Not sure I follow. Why would `firstNode` help?\n. Unfortunately yepnope does not do any type of non-native resource loading. It doesn't do any ajax work, which is how this would need to happen. We just inject tags (script/style) on the page.\n\nThat's why it looks like you've added entire ajax libs and stuff to the prefix. I'd suggest against this. By the time you load jQuery, it'd be better to just do raw ajax requests.\n\nIf I have to choose from those three, I'd probably say 'very bad way' - because it's just going to be slower.\n\nThanks for asking, though!\n. fresh.\n. Handling all of this in #136\n. This looks good. Looks like you got `notie` as `other` in the output here. Merging.\n. We've seen some issues when other script elements are removed from the page. Could that be happening?\n\nThanks for the info/report!\n. Sorry for the brevity but I'm mobile:\n\nThe setting would definitely cause dual downloads but it wouldn't cause\ndual executions.\n\nAre you noticing things run twice?\n. Hi @YoussefTaghlabi (and all). I'm just getting back from overseas, but that's a good find. Would you consider submitting a pull-request to fix it. /cc @ralphholzmann \n. Fixed in #139\n. Thanks!\n. Awesome, thanks!\n. The WTFPL license allows you to relicense yepnope to whatever fits your project. So if you need MIT or BSD, just change the license.\n. Would you submit this fix as a pull request?\n. Solid. Thank you.\n. Where does this occur? In one of the plugins?\n. Please don't create duplicate issues. You already commented on #32 with \"what the heck\" (classy). \n. I never use that plugin, if you think it's a good fix that'll work in mobile and desktop, I'd be happy to take a pull request. There was likely a reason it was added though. Perhaps @unscriptable knows?\n. I'd guess the old code + the new onload stuff would be the best way forward. Would likely take a sniff of some sort, but I'm old and tired and that's a good enough compromise for me.\n. I think anyone who needs that much accuracy should probably go with the set and check poll anyways.\n. I agree that for the most part, you should not be using a script loader to load style sheets. They're usually best in the `<head>` and synchronous.\n. Please sign the WTFPL Contributors License Agreement before we can pull this.\n. There's likely a bug where css that's last can get lost in the execution stack. We're rewriting in 2.0 right now to solve those things. Your way is totally fine, and probably a tiny bit faster.\n. Can you make this mergeable?\n. Can we get it to pass tests?\n. I wish we would have documented some of this a little better internally. There are some crazy things that happen with objects. Sometimes they become visible or change layout subtly. So this change stops us from taking that out. What if instead, you check for the existence of the `insBeforeObject` which it sounds like doesn't exist for you for some reason. We wrote some code around `getFirstScript` to handle this for scripts I'd be happy to take a PR that either just checked and gave up or did something fancier. We are rewriting this though and it won't use objects internally anymore, so if your fix works for you, you can also just use it happily and not worry about stuff in here.\n\nThank you for the report and PR!\n. I deprecated yepnope tonight because of bugs like this in the way that in-order loading had to be hacked in, as well as because it's no longer considered a best practice to load in a bunch of scripts separately.\n\nMore info here: https://github.com/SlexAxton/yepnope.js#deprecation-notice\n. I didn't say you had to use AMD. I said that you should build your application and not rely on in-order script loaders (which are increasingly breaking in newer/mobile browsers)\n. Then the 2.0.0 update should work great for you!\n\n`yepnope.injectJs('script.js', function(){});`\n. I would say just pull that logic out and use it. I don't think yepnope should add properties to other objects. It's really small!\n. Yea. My suggestion would be to pull it out, and use it in your app, and then don't use this prefix, but instead modify it to use your results. Does that makes sense?\n\nSo just switch out the line in the prefix plugin with:\n\n``` js\nvar oldie = (function(){\n\n    var undef,\n        v = 3,\n        div = document.createElement('div'),\n        all = div.getElementsByTagName('i');\n\n    while (\n      div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',\n      all[0]\n    );\n\n    return v > 4 ? v : undef;\n\n  }())\n```\n\nto\n\n``` js\nvar oldie = myOldIEVariable,\n```\n. (because I just don't think yepnope should try to be a Modernizr for browser sniffs, if that makes sense)\n. The callback runs in both cases and passes the result back as one of the\narguments.\n. The goal of the 2.0 version was to remove the ability to load multiple scripts, as a performance best-practice. If you want multiple scripts you can use the 1.x versions, but I don't recommend it. Lots of good build tools out there these days!\n. I wouldn't worry about the order too much in practice, but I suppose I was assuming a dynamic server would interpret the query parameters  and return the correct file (and then cache that result). I don't think it'd be worth it to sort or anything unless someone comes across some actual issues here.\n\nAppreciate the valid input, though!\n. Unable to reproduce this. Closing, but happy to look if I can get a repro case.\n. The goal of yepnope 2 is to avoid loading multiple files like this. If you'd like this functionality, then use yepnope 1.x, but it may come with performance costs.\n. Sounds like nothing was sent into the function call? \n. It was leading to some pretty ugly stuff. Your use case is fine, but an if statement works just as nicely:\n\n``` js\nif (window.Intl) yepnope.injectJs('js/intl.js');\n```\n\nThe `IntlPolyfill` should probably recommend a different method than they currently are. The actual nicer scenario is bundling `intl.js` with your main build for users that need it:\n\n``` js\nyepnope('js/app.js', {\n  intl: window.Intl\n}, function() {\n  console.log(new Intl.DateTimeFormat(...).format(new Date()));\n});\n```\n\nThis would request either: `js/app.js?yep=intl` or `js/app.js?nope=intl`\n\nYou could then potentially handle serving the correct file depending on those urls (which can look different with a different formatter).\n\nHope that helps!\n. Yepnope as it was included in Modernizr (`Modernizr.load` was just an alias to `yepnope`) is deprecated, and has been removed from Modernizr. You're welcome to grab the previous version and use it. A deprecation warning generally means that the old libraries still work, but that it's no longer going to be worked on.\n\nThe master branch has a version of yepnope that's more in line with what you _should_ be doing, but also isn't a maintained, suggested library. Modernizr points you at the yepnope library in case you need backwards compatibility, not as a suggested solution. Use a build tool.\n\nIf the docs are poor, please, by all means feel free to contribute back more clear updates.\n. > here it's an even confusing doc which says it has deprecated itself, but still houses the library\n\nI'm not sure what you want. Should I delete the repo?\n. As far as I can tell, there's only one version of the MIT license:\n\nhttps://spdx.org/licenses/MIT.html\n. We have the license in the code, which I think should remove ambiguity?\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/LICENSE.md\n. Sorry, all of those licenses are the 'new bsd' license, not MIT. I thought you were saying that I still had an  MIT license somewhere and that it was mismatching against the new bsd license.\n\nI think there's no ambiguity there, since it's inlined in the readme and in the LICENSE.md file, but I mean this license:\n\nhttps://spdx.org/licenses/BSD-3-Clause.html\n. It's right above a 3 clause license, but I'll happily merge a PR that makes that clarification.\n. Might as well update the package.json too\n. Aiight, I'm thinking a prefix is in order here, but I'm weary about adding a bunch of specific logic to the tool just for IE. So my proposed solution (which I'm currently coding) is as follows:\n\nFor IE specific includes, it'd like like this\n\n```\nyepnope([\n  {\n    nope: ['script1.js', 'script2.js', 'ie6!style1.css', 'ie7!style1.css', 'ie8!style1.css'],\n  }\n]);\n```\n\nI'd love to make it only work on css files, but that's not really point of the addition, so I think I won't. If people are going to do things incorrectly, they'll likely find a way anyways...\n\nI think I'll add this as a prefix plugin, and the api for those plugins will be something like:\n\n```\nyepnope.addPrefix('prefix', function(location){\n  //.. logic\n  return newLocation;\n});\n```\n\nIf the new location evaluated to false, then nothing will be loaded. So for the ie ones, it would look like:\n\n```\nyepnope.addPrefix('ie6', function(location) {\n  if(isIE6) {\n    return location;\n  }\n  return false;\n});\n```\n\nOnly restrictions i can see is multiple prefixes... I suppose I could support chaining prefixes...\n\n```\n`css!ie6!style.css`\n```\n\nI'll try that... it's a little odd, but I'd rather keep it pretty simple...\n. Okie... I think I got this in here.\n\nCSS now loads in order... so that's a total go.\n\nI also added a new function on `yepnope` called `addPrefix`\n\nThis handles all prefixes (including the built in `css!` prefix).\n\nI added an official extension to the `prefixes` folder that contains the IE conditional logic that you seem to want.\n\nIt is a good example of what you can do with the new addPrefix function.\n\nAll prefixes are chainable, and in the case where you use multiple prefixes from the ie package, it performs a logical `OR` in order to pass the tests. Other prefix families may implement that differently though, since it's specific to this plugin. Here's an example:\n\n```\nyepnope({\n  test: Modernizr.borderradius,\n  nope: ['ie!allIE.js', 'ie6!ie7!oldIEs.js', 'iegt8!newIEs.js', 'css!ielt6!iegt8!wtf.css?rnd=123']\n});\n```\n\nHere are your total list of prefixes:\n\n```\nie\nie5\nie6\nie7\nie8\nie9\niegt5\niegt6\niegt7\niegt8\nielt7\nielt8\nielt9\n```\n\nThey should be pretty self-explanatory. I think I left out a few that no one would ever use, or that we don't have yet, but this should be good for a while.\n\nI've done some regular testing, but haven't put the stress test on it yet, so let me know if you see anything odd. I'll get some real docs, and some better demos up now that #jqcon is over.\n\n<3z\n. For the record, you would probably just concat and minify those the yepnope.js file and the yepnope.ie-prefix.js file (in that order) and serve that. No extra wiring is necessary once they're loaded.\n. I went ahead and fixed this by giving access to $LAB on the yepnope object (via your suggestion) - marking as fixed. :D\n. I like it. Nice change with so little code. Appreciated.\n. I like it. \n\nI think, if I'm guessing correctly, instead of passing an object to 'callback' it'd take an array and just match up the callbacks in order, since it's just a numerically indexed object with a few extra functions on the prototype...\n\nAlso the complete callback is one I was def going to add. I enjoy the extra protection in the callback stuff.\n\nStop showing me up on my own app.\n. This is not a bug in yepnope. The way JavaScript creates object literals happens right away.\n\nSo your test for `typeof jQuery == 'function'` will always be false, because it evaluates before the yepnope function executes.\n\nThis is just the way JavaScript executes code, so I'm not sure I could fix it for you.\n\nWe could potentially add the ability to add a delayed function to execute in the `test` variable. I will add this to the list of things to consider.\n. That would be true for any expression. It would need to exist prior to yepnope executing.\n\nWe're working on an api that allows for injecting things in the yepnope lab chain in a callback.\n\nUntil then, you might do that manually with the $LABjs instance that yepnope has. It's ugly, but it should work. However, I think you're underestimating the ways that a script could fail to load. Really, you can't just check for the value of jQuery since depending on the browser, the script may or may not have a callback for a bad script at all. You may need to set up some sort of polling and a timeout to do it correctly.\n\n```\nfunction doAnotherYepnopeCall(prevLabChain) {\n  yepnope([{...},{...}], prevLabChain);\n}\n\nvar myLABchain = yepnope([{\n  load: 'http://cdn.com/jquery.js',\n  callback: function(){\n    // pass our labchain into the second param of another call\n    doAnotherYepnopeCall(myLABchain);\n  }\n}]);\n\nsetTimeout(function(){\n  if (!jQuery) {\n    // pass in our different LAB call\n    doAnotherYepnopeCall(yepnope('/local/jquery.js'));\n  }\n}, 15000);\n```\n\nThis of course doesn't cancel the original attempt at loading, which could potentially break some things, but LABjs doesn't really have a 'cancel' api, so it'd be tough to put that in myself. I'd say if you _absolutely_ had to have a fallback, perhaps async loading (in any capacity) isn't your best bet. You'd still see some perf gains if you did a sync load and check of jQuery (and subsequently another load of the back up) and _then_ called yepnope on the rest of your stuff.\n\nIt's possible to do the fallbacks, but there's really no pretty api for it (that I know of) and it takes quite a bit of knowledge of browser loading patterns and callbacks on errors, etc.\n\nHopefully that helps!\n\nPS the sync pattern of this is easy:\n\n```\n<script \"http://cdn.com/jquery.js\"></script>\n<script>\n  if(!jQuery) {\n    document.write('<script src=\"local/jquery.js\"><'+'/script>');\n  }\n</script>\n<script>\n  yepnope(...);\n</script>\n```\n. Yea, I've talked at great length with jdalton about some of this stuff. For the most part, it's anyone's guess. jdalton uses `MozOpacity` and stuff, but only because it's shorter. I figured opacity was closer to being non-prefixed than the Appearance object, though it is spec'd.\n\nI'm open to change them, I'd just love to find something with any more security than that.\n\nMaybe we need to add to one of your lazyweb lists and/or the modernizr undetectable lists about the _best_ browser inferences to use, only when you have to. Then if those inferences become standard enough... maybe they'd be more unlikely to change (or perhaps more likely... like the UA string... idk )\n. closing this until we know of something better.\n. Yepnope does request every file you put into it twice. The first time it loads itself into your cache as some sort of non-executable entity (an object element, or an img element, or a script element with a fake type attribute, depending on your browser). The second time it's injected, we inject it as an executable script, and this time it's cached. So there is really only the millisecond or less that it takes to execute the callback function and reinject a script tag extra (and however long it takes to access the cache).\n\nFirebug hasn't been the  most reliable source of what's going on (since arguably, this technique isn't exactly standard). We found that we needed to create test cases around the issue in a more foolproof manner, so we did.\n\nIf you serve the yepnope directory (on apache w/ a php installation) (with wamp or mamp works on windows or mac, respectively), then you can direct your browser at the tests folder. A few of the tests are specifically built to catch a _real_ double load (as this was _previously_ an issue in firefox - (so if you have an old version, you should update)).\n\nThe way the test works, is to put a sleep timer on resources that's long enough to be unmistakable. So we can force a JS file to take 3 seconds to download.\n\nIf at 5 seconds in it's not done (enough time for latency/slow computers etc), then it probably downloaded twice, instead of caching the second time. If it takes between 3 and 5 seconds, then it works as expected. And if it takes less than 3 seconds then it was cached to begin with an is an invalid test.\n\nSo I'd encourage you to make sure you're on the latest version and run the test suite in your browser and let me know the results. If it is double loading for real (like full-request-double-loading) then I'd love to get as much info about your set up as possible, because I'm currently passing all tests in as many browsers as I can get my hands on.\n\nThanks for reporting the issue.\n. Oh, as for injected script tags not being seen in the html view, we try to keep the memory footprint low by removing the script elements after they execute. This helps a lot in IEs.\n. Actually, yepnope does enforce execution order. It's why we removed the `wait!` prefix from the api. Any order that you give your scripts in will be guaranteed to execute in that order (but all will download in parallel). We have (as you seem to have stumbled upon) created a way to load scripts inside the callbacks (and have those scripts execute before something in the next array element).  This probably isn't what you want in your case though. If you just specify the next script in an array, it will load in order. This way both scripts can download simultaneously instead of not knowing to start downloading the second script until the first is already done.\n\nThanks for the feedback! We've seen some of the firefox throbber issues, but we're not sure how to consistently reproduce them and it seems to be in conjuncture with other things. Needless to say, we'll keep our eye open. (but it doesn't keep me up at night).\n. Closing this unless someone else has double loading issues in the future.\n. It makes 5 uncached requests and 5 cached requests (which have little to no cost).\n. Unfortunately, google maps is a huge user of `document.write` which is not compatible with asynchronous loading (or good coding practices).\n\nThis is untested: http://pastie.org/1541467\n\nBut replacing the `document.write` with a call to `yepnope` _may_ be the start of something that works, but the script it requests probably has the wrong stuff too.\n\nIt may be better to leave out google maps from yepnope altogether, unfortunately, since google has a hard time following their own best-practices. :/\n. This might be a good reason to do a _preload-but-dont-execute_ prefix, so you could load in the eventual google script that get's injected via google.load in parallel with google.load, then have it get actually injected by google.load instead.\n\nI'm on it.\n. In the latest RC, I went ahead and added a _preload-but-dont-execute_ prefix `preload!`\n\nIf you download the latest source (including yepnope.js), and the the preload prefix you can preload the file right away, so it's ready to inject in the callback.\n\n```\nyepnope([{load: ['http://www.google.com/jsapi', 'preload!http://whateverthegoogleloadeventuallyinjects.com/maps.js'],\n    callback: function() {\n      google.load(\"maps\", \"3\",\n            {\n                callback: function () {\n                    console.log(\"loaded\");\n                },\n                other_params: \"sensor=false\"\n            });\n}}]);\n```\n\nIf you look at your web inspector, you can see which file name that the `google.load` ends up injecting, and then use it to preload. Then you still get parallel loading of your files :D  (the google load will inject it and execute it, but it will already be in your cache, so it should be approaching free).\n. I wouldn't suggest using yepnope with google maps since they still use document.write.\n. It looks like you are using some snapshot of our development and are running into a bug because of that. Try updating to the RC1 that's currently the latest in the repo, and it should work (I tested it, and it did).\n\nAlso, `wait!` is no longer necessary, we decided to just always enforce order. So save the bytes.\n\nAlso, ask the selectivizr guy to make his stuff not use `document.write` so you can load jQuery and selectivizr all with yepnope (async).\n\nAlso instead of including 3 separate files for yepnope, and all of Modernizr, try the builder that I created: http://modernizr.github.com/Modernizr/2.0-beta/#flexbox-input-iepp-load\n\nThat should automagically create a build of Modernizr that just has the flexbox and input tests that you need, and it also has yepnope bundled with it. Then, I would say to concatenate the yepnope.ie-prefix.js file to the end of that, and just have 1 file up top, BUT you aren't using the ie prefix anywhere... so just leave that out.\n\nHope all that helps!\n. Is there any way you can put up an example of this happening on a live webpage?\n\nWe have a test suite that does this about 50 times, and it's passing in every browser that we support, as far as I can tell, but perhaps you're doing something that I haven't thought of. It'd be hard for me to tell without seeing it though, so if you could get me access, that'd be awesome.\n\nThanks!\n. Moved it to master, thanks for the find! It looks like the problem occurred when you try to use yepnope inside of a file that you load with yepnope. We hadn't considered that use-case. (I actually would advise against it if you can avoid it, but if you're trying the hack i showed you in the google maps stuff, that'd be a good reason to do it :) ).\n\nThanks for the catch!\n\nWe moved away from LABjs in the 1.x version of yepnope so we could do some things that aren't possible (while obviously making other sacrifices) with LAB. This also helps to keep our file size down, which is priority #1 with script loaders.\n\nThanks for the congratz. Let me know if you run into anything else!\n\nP.S. thanks for the fix ralph\n. I noticed this last night as well. Something I just changed to support older firefoxes broke the newer ones under my nose. I'll get it cleaned up today. I'd suggest not running on master branch until we get a real 1.0 - because we're getting all the grossest bugs out and I totally shouldn't have RC'd it until we did that, but I didn't have enough tests in place at the time.\n\nThanks for running the tests and letting us know. Super helpful!\n. Looks like ralph cleaned this up before I had a chance. Let me know if you still see an issue.\n. This is new info, I'll look into it today with the other FF issue. Thanks!\n. If this was happening in the buggy last update, then it isn't anymore. Let me know if you see otherwise.\n. Sounds like you need cache headers.\n. Thanks.\n. Hmm. I can reproduce that. Before we'd only seen it on the testsuite, but it seems to have made its way all the way in. It obviously is a firefox bug, but I'm looking into possible solutions.\n\nThanks for the report.\n. For what it's worth, we've narrowed this down to only happen when you are using yepnope within one its own callbacks. If there's another way you can structure your loads to avoid this, that's a temporary fix. Working on a real one, currently.\n. haha thnx mathias :D\n. We made the (somewhat silly, but I stand by it) call to not increase the version number because we hadn't actually announced 1.0.0 yet ( we will today ) and the bug fix was pretty minor and only a few hours old. A 1.0.1 launch just didn't feel right. I also happen to be on the modernizr team, so consider the build tool instantly up to date :D.\n. Hmm, Okay, my feedback:\n- You _do_ need the plugins in order for them to work.\n- The site _does_ list them as _plugins_ - but we'll see what we can do about making it more clear for people who didn't see the title first.\n- The Modernizr build tool options (while I may be on that team) are completely up to the Modernizr team. Yepnope went 1.0.0 2 days, ago, so I'd expect a little time before extra features show up in the _beta_ builder for modernizr. I think it'd be good to get some of the plugins as an option, but I also think that they could severely clutter the Modernizr build tool with things that no one generally cares about. I think if you're going to be loading plugins, you should probably not use it as Modernizr.load - and just concatenate your modernizr build and your yepnope build. Modernizr.load is not guaranteed to act exactly the same as yepnope in the future\n- I think you misunderstand the flexibility of plugins. The ie prefixes are just implemented as plugins, so yepnope's internals have no way of knowing that these are 'exclusive' plugins instead of just modification plugins. Some plugins would require the exact _opposite_ behavior from the one you're suggesting. We always strip off the various plugins, and then run their modification function on the resource objects. If there is no modification function, nothing gets modified, and the script loads as-is. This is entirely desired behavior. Since `!` is invalid in a url (which is why we use it) - it would be silly to just leave on an unknown prefix and request it. It would also be silly to assume anything about whether the resource should be loaded by default or not loaded by default (because different plugins may not have anything to do with _whether_ something loads or not.).\n- I don't think that IE, preload, or CSS are even close to common use-cases. While they all might be small individually, they add up (and we'll add more official plugins in the future). It doesn't make sense to include _any_ bytes in a loader that you don't absolutely need, since the loader is a blocking resource. It pains me to even have a 1.6kb library at this point.\n\nI understand that we seem to simply have a difference of opinion on most of these things, rather than any technical issues. Please know that with sufficient support, I'd consider these types of suggestions, but as of now, I think I like the structure as-is. I will certainly go back through and make the appropriate documentation changes to make these things more obvious in the future.\n\nThanks for your report!\nAlex\n\nPS: you're example of what you're trying to do seems to go against the main point of yepnope, which is to load scripts in parallel. So rather than what you have there, perhaps you could not _automatically_run_front.js_ and instead have it create an object that you can call `.init()` on (or something similar). That way, you could do:\n\n```\n<script>\n  yepnope({\n    load: [ \n      \"/js/jquery-1.5+tinypubsub-0.6.min.js\",\n      \"ie6!/js/dd-belated-png.min.js\",\n      \"/js/front.js\"\n    ],\n    complete : function() {\n      // Delay loading until DOM READY signal\n      jQuery(function(){ Front.init(); });\n    }\n  });\n</script>\n```\n\nAnd you'd get full parallel loading.\n. Even though you don't need front.js until after dom ready, doesn't mean you shouldn't load the file immediately. This is where you'll have nice performance gains.\n\nyepnope is an _asynchronous parallel script loader_ - The parallel part means that you can load all of your scripts at once. So you are welcome to load front.js later on, but you are only artificially extending the time that it takes for that script to run. This would probably end up being even slower than a normal `script` tag, because it isn't injected until _after_ the dom is ready, whereas most scripts would be a part of the dom. That's all I meant by that. Certainly it will continue to work.\n. I guess the key thing to realize is that you can _load_ a script at a different time than it executes. If you wait until you have to execute a script to load it, then you put yourself in a spot of extra time, if it's already loaded, then you get immediate execution, which is awesome.\n. Got it, sorry got derailed.\n\nThere should be no issue adding prefixes to modernizr.load.\n\nHere's how the Modernizr build tool works\n1. Include Modernizr (with correct options)\n2. Include yepnope 1.0.0 exactly\n3. Add `Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};`\n\nSo quite literally, there is nothing different about Modernizr.load than yepnope, because it calls `yepnope` in it. (yepnope is also leaked globally (on purpose)).\n\nI just tested to see if prefixes loaded after `Modernizr.load` was aliased and they still work fine. (though you would add them to the `yepnope` object, NOT to the `modernizr.load` object).\n\nAfter a modernizr build with `modernizr.load` try this:\n\n`yepnope.addPrefix( 'alert', function ( r ) { alert( 'works!' ); return r; });`\n\n`Modernizr.load( 'alert!something/that/exists.js' );`\n\nThis alerts just dandy. I've tested this with the `ie` prefix and it seems to work as intended.\n. This is good feedback. I think we tried to hit a good mix a of file-size vs. customizability in the first release, and as more people use yepnope in the real world, we'll see what really deserves to be in. I think exposing the underlying script injector (much like we expose the caching-only) would be a good addition. Unfortunately it'd probably be a significant amount of code change. Probably a 1.1.0 type thing.\n\nIf you want to try to hack your own version until we hit our next version, the `injectJs` function would be a good place to start. You'd just need to create an object in the format that `preloadFile` returns. That's at least where I'd start.\n\nThanks for the suggestion!\n. For those of you guys interested in this feature, I've pushed the feature to the v1.1 branch here:\n\nhttps://github.com/SlexAxton/yepnope.js/commit/a4e5f933caec5516f79ba2a61ac83c2da191ba73\n\nI'll likely have to add an options object for types and attributes, etc. - but this is pretty close to what I think it will end up being.\n\nCurrently\n\n```\nyepnope.injectJs( 'url.js', function(){ console.log( 'loaded' ); });\n```\n. `v1.1` is scheduled for two-weeks out. Bugs triaged. Code in place. Writing tests and finishing up final fixes.\n. (note this already all works, it's just not in the main branch yet. I'll close this ticket when we push 1.1)\n. I'm in the process of closing tickets that I've fixed that haven't landed in master, but are in the `v1.1` branch. So consider this fixed officially when that version goes live. (via `yepnope.injectJs`)\n. Yes, this is an unfortunate side affect of tricking the browser into caching everything. If you need to see these graphs, a tool like Charles Proxy or HttpWatch is probably your best bet.\n. Loading JSON is a pretty different beast than script loading. We'd suggest using a different tool for this.\n. Another note is that we don't have any filters in the filters folder anymore, and git won't allow you to checkin an empty folder. So that's why it's gone.\n. I can't reproduce this in any of the browsers mentioned here. I'd also love to see a test case!\n. Thanks Paul.\n\nThough, while this is _possible_ with yepnope. I'd strongly suggest doing that work on the serverside. You always know which page you're serving up, so the best performance is going to come by writing a small module in whatever backend you use in order to output the correct included scripts into yepnope per page. It doesn't sound as sexy, and I love it when people use yepnope, but I think you'll be happier in the end.\n\nJust for a little insight into why, you'd actually need to load jQuery first, then start loading your script afterwards. This stops you from being able to do parallel downloads, and will end up hurting your speed. It also highly couples your dom to your app. This means that when some other designer changes the class names, the whole site stops working suddenly.\n\nHope that helps!\n. Do you mean in the readme file. Currently there is a prefixes folder that has all of our prefixes in it. I'd be happy to put the information where everyone thought it was necessary though.\n. I'm sorry, I'm still confused about what you'd like me to do. Try again?\n. Oh, what would be the use case? Modifying other prefixes seems like a bad idea.\n. I suppose my advice would be to check your yepnope file to see if you included the prefix. I don't think the extra bytes for listing out prefixes would help anymore than just looking at the file. The flaw is that a person who isn't actually testing in older browsers, and forgets a prefix doesn't know that they'd _want_ to list out the prefixes, and those are the only people who'd be interested in doing so.\n. Closing this until use-cases are present.\n. I haven't gone as far as to test it (always a good thing :/) but as far as I know, the code you have there should work. We intentionally made it to where the 'complete' callback fires regardless of any actual script loading.\n\nThat also means the code could go in the 'complete' callback of the last block, as well. Yepnope forces the order of execution, so it will always be the last thing to run if it's the last thing to be declared.\n\nHope that helps!\n. Closing this out unless I was wrong about this stuff.\n. Hey Ben,\n\nThis is certainly an issue we've seen, and moved around quite a bit in Firefox. (and it's certainly a bug in firefox, as _nothing_ is still loading). However, as of right now, we can't really find a way around it in the scenario that you are talking about.\n\nMy best suggestion is to not wait until `domready` to load anything. The best case scenario is to wrap the script in a function and _execute_ the function on domready, instead of waiting to load it altogether.\n\nThe other, slightly dirtier option would be to use the `preload!` prefix/plugin in order to preload the plugin right away in the initial block. Then, since jQuery is on the page, just use a `getScript` call to the exact same url you preloaded with. This will avoid an additional object preload, and ensure that there is no eternal loader. We are definitely adding a 'now' prefix that will also avoid preloading, but we haven't quite got there yet.\n\nAs a background, firefox has some  bugs with object loading of elements being injected in the callbacks of other object preloads. So you _might_ have some luck just adding a `setTimeout` to the call that you have in the document ready function.\n\n```\n    OTR.ready(function() {\n      log('All base scripts have loaded...');\n      setTimeout( function() {\n      yepnope([\n        {\n          // load one, we may load more depending on what the page requires.\n          load: \"http://www.cornify.com/js/cornify.js\",\n          complete: function() {\n            cornify_add();\n            log('cornify loaded:', cornify_add);\n          }\n        }\n      ]);\n      }, 0 );\n    });\n```\n\nThough I can't guarantee that one will actually work. It's worth a shot though. :/\n\nThanks! And we'll certainly update immediately if we can figure out a way to make this go away for good.\n. Hey, thanks for the commit. Can you perhaps detail the use-cases for this change? Thanks!\n. I think instead of just extending this to charsets I am adding in an 'attribute' object that will define key/value attribute pairs to be added or overridden. This should also cover the charset use-case.\n. Here are the warnings on your personal website: \n\n![http://f.cl.ly/items/1m431V0F3s0C381G1z2R/Screen%20Shot%202012-12-19%20at%203.09.17%20PM.png](http://f.cl.ly/items/1m431V0F3s0C381G1z2R/Screen%20Shot%202012-12-19%20at%203.09.17%20PM.png)\n\nHas anyone complained about them yet?\n. @montlebalm I did not reply with an 'ad hominem' attack. The fact that you have _warnings_ on your site is a perfectly valid argument that warnings are an accepted part of developing websites. In fact I was stating that your website is in a good/acceptable state. It would be 'ad hominem' if I was saying that your site was _bad_ because of the warnings. The point of warnings are to point developers in the direction of something that _might_ go wrong, but they aren't _errors_.\n\nThe preloading of scripts in yepnope uses images as the mechanism. It's a hack to get things to work in every browser. Using the cache that is primed with images, yepnope can be certain that the next injection of the script will happen immediately, rather than after a network delay. You could not 'fork' yepnope and keep this behavior without doing preloading. There are other ways to do async loading in-order script execution, but they break features in yepnope. It's the exact same reason that you have a `box-sizing` warning in your CSS. Because we often add all possibilities to our CSS in order to cover all bases and make things compatible everywhere.\n\nThe warning for most people serves as a way of telling that they may not be sending the right headers for their images. However, we are well aware of the headers that we are sending for scripts are the incorrect ones for images. So you can safely ignore the warning.\n\nIf you are being 'annoyed by constant pollution of the console', then you should seriously reconsider how many scripts you are loading with yepnope. 3 or less is a best practice, and the consequences of loading more are far far more serious than a developer needing to adjust their eyes 10 to 20 pixels during a console debugging scenario.\n. Furthermore, your original comment was much closer to an ad hominem attack, and was kind of a dick move.\n. As noted above, we're doing this intentionally and these warnings can be\nsafely ignored.\n. We're killing this by default. So let's kill this bug. Screw Safari and it's quirks.\n. We have this fixed in the v1.1 branch that should go out soon. Thanks for the extra info.\n. I believe this is fixed, and `v1.1` is around the corner (see milestone). Adding @ralphholzmann to this ticket since he's responsible for that section of code.\n. I'll fix this in the repo, you are correct, but this pull request is crazy-weird. I think you're trying to pull in the site branch into the master branch.\n. Unfortunately, this is a bit different than the way yepnope works internally. When you load a resource with a fake `type` attribute (like `text/template`), it actually doesn't even download in most modern browsers. In the browsers that it does download in, the text isn't accessible to you like it would be if the template was inline.\n\nThe way requirejs does this is by doing an XHR request for the file, if you specify that it is a `text!` dependency. ( https://github.com/jrburke/requirejs/blob/master/text.js#L22 ). This technique does not work cross-domain. The way that RequireJS gets around this, is that if you require a cross domain text file, it will pull it down during the build process, and inline it as a string in your final source code.\n\nYepnope neither has any xhr capabilities, nor a build tool, so I think this may be out of the bounds of what will ever be possible with yepnope.\n\nLet me know if you know differently about any of this stuff, but I've done a fair amount of work with this stuff in the past, and it's just an entirely different ballgame. a micro-xhr library maybe all you really need.\n. The `complete` function always runs no matter what. If you need to tie a callback to a specific script load, use `callback`.\n\n```\nyepnope({\n  test: window.JSON,\n  nope: {\n    json : 'json2.js'\n  },\n  callback: {\n    json: function () { alert('json2 was loaded.'); // run some JavaScript!!! }\n  }\n});\n```\n. I can't reproduce this happening: http://jsfiddle.net/gVQJD/show/\n\nHere is my net tab in IE9 for that page\nhttps://img.skitch.com/20110526-ckdwk1ytuk6wihw6eq1ckqh8kx.jpg\n. I have heard of this issue, and would love to fix it, but for the life of me I can't get it to happen. Can you get something that's sharable for me to look at?\n. Is there something special that I have to do to get this to show up? Here is a screen cast of me loading it on os x and windows FF3.6 (hard-refreshes) a couple times: http://screencast.com/t/9RQwcLDW1hc\n. As the person who wrote a good chunk of both yepnope and the bazaarvoice integration code, this must _really_ be my fault. Thanks for the additional test cases. I will try and get this fixed this weekend. It's probably our last `v1.1` blocker.\n. Sure, my email is alexsexton at gmail - I'm currently at a conference, but should have some intermittent time.\n. This is the most reduced that I could get the issue (mostly testing in FF 3.5.19) - it doesn't happen _every_ time, but it's pretty consistent.\n\nMuch like in the video, you either need to cache bust the url, or re-press enter in the window (a first load situation).\n\nhttp://jsfiddle.net/SlexAxton/t6AvB/56/show/?cachebust=1234\n. It seems pretty easy to break that example to _not_ break by changing just about anything.\n\nIf I had to _guess_ that you are likely loading more than 3 or 4 scripts at once. I wouldn't suggest doing that for speed or performance, etc, but also it may solve your problem if you merged more of them together.\n\n@ralphholzman seems to think that maybe `v1.1` is not susceptible to this problem, but we haven't changed too much of the core, so I'm skeptical.\n\nStill looking for a solution ... \n. I already broke the `v1.1` \"fix\" by loading more scripts at once. That really seems to be the cause of the bug showing up.\n. Unfortunately we have _no_ leads on this problem. I'm pushing to a further out milestone since it would forever block the new release otherwise.\n. I have been debating this, because there are quite a few loaders with a similar api to the one you are describing.\n\nI just don't find the yepnope way to be much harder than your way:\n\nW/ functions\n`yepnope({ test:Modernizr.geolocation, yep:['map.js', pinHome] });`\n\nCurrent\n`yepnope({ test:Modernizr.geolocation, yep: { a: 'map.js' }, callback: { a : pinHome } });`\n\nand honestly I think that's a little more clear...\n\nI am still open to this, I'd just love a discussion and perhaps some more input. Thank you for the suggestion, regardless.\n. Hmm, I'll look into this. Until I find a fix, in development, you could reduce the `yepnope.errorTimeout` to something lower, so the timeouts will happen quickly and everything will go a little more smoothly. I'd bump this back up for production though.\n. We're working on the next version of `yepnope` and this has actually already made it in. If you look at the `v1.1` branch, you can see in the prefixes section that we've added an attribute object that you can send via prefix or filter.\n\nIt looks something like this in practice:\n\n```\nyepnope.addPrefix( 'media_all', function ( resource ) {\n    resource.attrs = {\n        \"media\" : \"all\"\n    };\n    return resource;\n});\nyepnope('media_all!all.css');\n```\n\nBUT - this use actually kind of defeats the purpose of yepnope a little bit. These won't lazy load, because yepnope preloads files first, then injects them. So I think the real solution here is the the `Modernizr.mq` function. It allows you to pass in mediaqueries as your test;\n\n```\nyepnope({ test: Modernizr.mq('min-width:0px;'), yep: 'all.css' });\n```\n\nIt's an additional thing to add, but you can build a pretty small version of modernizr with yepnope built in.\n\nHope that helps.\n. I have this programmed and working in `v1.1` - when we push that out, this will be live.\n. Hi @summsel - thanks for your question. Would it be possible for you to set up a test case with your situation that would be available to us so we could debug it?\n\nAs for your second question, that is planned in the v1.1 release.\n. From what I can tell, you aren't doing much conditional loading. Ideally, you still concatenate all files that you can together, and serve them up together. Also, I'm not positive, but last I checked, `selectivizr` had a `document.write` in it, which means that it cannot be loaded asynchronously.\n\nAssuming Selectivizr was fixed, it seems like you could reduce this to 3 requests. Concatenate all JS except selectivizr, and all css (potentially in a build tool) and use `Modernizr.load` to bring them in. Then instead of using the `ie` prefix for yepnope, you'd be better off using feature detection for support of the css3 capabilities that you need. So that should be rewritten as a test/nope situation.\n\nHope that helps!\n. Thanks for the report. I have seen other similar reports with way less detail, so this helps greatly.\n\nIf I had to guess, something in the minification/build process is actually changing the code to not work the correct way. I will look into it.\n. Assuming that there is a head tag is actually way more dangerous than assuming that there is a script tag. In fact, jQuery does not assume that there is a `head` - it uses the same method that yepnope does. However, we could recompute the available script tag at the time of each injection, rather than once at the top. I will talk it over with @ralphholzmann and see if it's not a big pain. Until then, that's the patch that I'd suggest.\n\nThere are plenty of browsers, however, that do not automatically add a head element in. http://www.stevesouders.com/blog/2010/05/12/autohead-my-first-browserscope-user-test/\n\nSo that is not a safe alternative.\n. Marking this to add a test for this behavior before `v1.1` goes live. I haven't reproduced, but the code above should be close to create a test for it.\n. The underlying code for jQuery.getScript is the same as in yepnope. The difference is that yepnope executes things in order. If you don't need that functionality, you probably should just use barebones script injection:\n\n``` javascript\n(function(d){\n  var s = d.createElement('script'),\n        t = d.getElementsByTagName('script')[0];\n  s.src = 'script.js';\n  s.async = true;\n  t.parentNode.insertBefore( s, t );\n})(document);\n```\n\nThe fastest it gets, and doesn't make you wait on jQuery.\n. This should be fixed along with this issue in this commit (reworked how `complete` works entirely):\n\nhttps://github.com/SlexAxton/yepnope.js/commit/6715e2c7646462c33411c0e3af4aebadb623c4e9\n. I'll turn this into an issue for documentation of fallbacks for complete. We'll consider looking into how difficult this would be to make work in the complete callback, which would be ideal, but if it causes too much bloat, etc, documentation might be our best bet.\n\nThanks for the report!\n. The tests run instantly, so your solution would result in double loading jQuery, more than likely. I'd go with the `callback` fix above.\n. Marking this to go into `v1.1` to fix it to work for complete and callbacks.\n. Just realized this issue was the same as another, but I just fixed this in the `v1.1` branch. The solution sucked to write, but I think it works. Test case added, etc.\n\nhttps://github.com/SlexAxton/yepnope.js/commit/6715e2c7646462c33411c0e3af4aebadb623c4e9\n. I'll merge this into 1.1 -- anyone who knows a reason on why this wouldn't work, speak now plz.\n. I think this is probably a good idea. Can you clean up the code to not have multiple var statements? And also, I think a global timeout is a nice feature. Can you keep that in, and then just add the resourceObj timeout as a supplemental feature?\n\nThanks!\n. Yes, that line. you can declare it outside of the loop at the top of the function.\n\nI see the global timeout, missed it before. Apologies.\n. Considering this, or similar, for v1.1 - I definitely like individual timeout support, and I can't think of a much better way to set those timeouts than this. Needs some tests.\n\n@ralphholzmann - take another look at this as well, and let me know if you think anything should change.\n\nI'll add an official issue for this so we can add it as a considered milestone for v1.1\n. Couldn't merge this in due to big changes in `v1.1` but I pulled in the basic idea, and it's now in place in that branch.\n. Cool! Thanks for the work on this. Any chance you wanna do a pull request so you get the credz in the log?\n. @ralphholzmann - you put this fix in the `v1.1` stuff, yes? Either way, when we take out the CSS callbacks by default, let's make sure this fix is in the new plugin to support this. We won't pull this into master since we're changing the way it works, but it'll be fixed in the appropriate spot. Many thank yous.\n. I think I'm going to close this one out for now. I do really appreciate the contribution, but I think we're ok with the functionality now, and will save the bytes. Anyone who disagrees can feel free to voice their opinion.\n. Commented on #53 for this. Thank you for the fix. We'll likely pull it into a different section of code.\n. Yepnope doesn't work that well in prehistoric browsers for other reasons, and this test works in all of our supported browsers, so we'll keep the shorter one for now. Also, hard to add in code that is simple and copyrighted like that into a WTFPL project.\n\nWill happily re-consider if anyone has a good argument against, but closing for now.\n. In the `v1.1` branch of yepnope, we are exposing `yepnope.injectJs` and `yepnope.injectCss` - these will just inject your scripts and allow you to run a callback on them without doing any order preservation. I'd imagine a `now!` plugin would be a pretty easy write after that, but I haven't tried it quite yet.\n. (the `v1.1` release is imminent, hence the issue closing)\n. I added a comment to the gist. Try it if you could.\n. Don't forget to include the CSS prefix in the prefix folder. We've had complaints that that isn't clear enough currently, and were working on it. Right now, it's interpreting your CSS as JS.\n. 1) The autoprotocol filter is no longer necessary, as of 1.0.0 - just use the `//www.google.com` format.\n\n2) We'll look into the failing tests on the new FFs. The CSS callbacks have always been difficult to get exactly right. We may try and remove built-in support in the next version, since this feature is actually very rarely used.\n. We are officially removing css callback support as a default (which should clear up most of this) since essentially no one uses it. We'll put out much of our code now into a plugin for those diehard style loading peeps. Creating a new issue to make sure that happens for `v1.1`\n. Unfortunately there is no cross-browser way to detect a 404. There are a few browsers that we can do this in, but we felt a consistent experience cross-browser was important. Do you know of a way to add this functionality?\n. I think we _do_ know that it's not possible. @ralphholzmann did most of the research on that. I think Opera was definitely a blocker, not sure about the rest. ( We rely on error handlers in a few browsers in order to know when things are done preloading, so it's impossible to tell the difference between a good error and a bad one ).\n. Are you using the most recent version of yepnope?\n. Also, potentially try using the callback for the resource instead of the complete handler.\n\n``` javascript\nyepnope([{ load: \"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.2.min.js\"\n        , callback: function() {\n            if (!window.jQuery) {\n                yepnope('../javascript/jquery.min.js');\n            }\n        }\n}, /* some resource */]);\n```\n\nI know that's a silly limitation if that ends up fixing it, but I think that might do it (and will be fixed in later versions).\n. @ralphholzmann - I think this is the weird thing where it has to be inside of a `callback` instead of a `complete` function - let's change that restriction if this is that. I can fix it, but please confirm that you think this is the same thing I do.\n. This is a repeat. Closing out. Fixed in the `v1.1` branch if anyone needs it immediately.\n. In `v1.1` we've added in support for arbitrary attributes to be added to a script or style element. I think this will open up the opportunity for a plugin to support this, as well as infinite other things like it. I think I like that approach as a base, though we'd very much appreciate you creating a plugin on top of that new api for specific LESS support when we push that out. This should serve as a good base. Thank you for bringing this to our attention, and we want to support this type of stuff, we're just taking a slightly more generic approach.\n. Adding this as a blocker for putting out `v1.1` - I agree, it would be a good default\n. Make sure you're including the `css` prefix plugin from the `prefixes` directory.\n. Can you post an example? http://jsfiddle.net\n\nIf you use the css prefix, it _forces_ the plugin to be loaded as css. The only way for it to load as a script tag is if the css prefix isn't being added or isn't added correctly.\n\nYou can see it in action in our test suite if that helps as well.\n. I don't have access to all my normal tools right now, in order to run the proper test suite, but a quick test I just ran worked:\n\nI went to http://2011.texasjavascript.com/ - which has the latest yepnope on it.\n\nThen I put the following in my console:\n\nAdd the css prefix plugin (from `/prefixes/yepnope.css-prefix.js`)\n\n``` javascript\nyepnope.addPrefix( 'css', function ( resource ) {\n  resource.forceCSS = true;\n  return resource;\n} );\n```\n\ntest with some broken file\n\n``` javascript\nyepnope('css!test.css?fake');\n```\n\nThen look in the `<head>` element to see if it was injected as a link tag or a script.\n\nI can add a proper test for it tonight when I have my  normal dev environment around.\n. Again, sorry for the primitive testing techniques right now, but here's a screenshot of my result:\n\nhttps://img.skitch.com/20111010-8bjw183s65xds67h4k7yujeuti.jpg\n. Did you ever figure out if your stuff worked? You seemed upset that I suggested that you didn't add the 'css' prefix, but I can't find a different reason for that not to work. We've (read: @ralphholzmann ) added additional support for testing that in the `v1.1` tests by moving over some of the rewriting work to handle it better. It all seems to work well.\n\nLet me know if you find out something else. We're looking to move on `v1.1` soon so it'd be good to get a fix in for this if it's truly a bug.\n. No offenses as long as we get this straightened out. I'm marking this to be fixed for `v1.1` - regardless of what that ends up being. Our goal is the 13th, so I'll close out this issue if we can't reproduce it by then. Assigning myself.\n. Well, I still can't be sure you're successfully loading the css prefix plugin with that demo.\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/demo/index.html#L7-9\n\nThe plugin is not included in that page by default (it's an old testing ground we don't use much anymore).\nCan you load in the `yepnope.css-prefix.js` file into that?\n. Ideally you'd provide a failing test case. Inside of the `tests/` folder there are several tests that test the successful loading of css. I'd suggest copying a simple one, and using the css prefix, and showing that it fails when qUnit runs.\n. I think it's safe to say that this works if the plugin is included. I have tested in every browser I could get my hands on in both operating systems. I'd imagine we're just not being clear enough that the plugin needed to be included for this to work.\n\nSo.... @ralphholzmann added logic into `v1.1` to parse out query strings. I'm sure there's still some secret ways to break it if you try, so we'll still offer the css plugin (adds the `forceCSS` options to `true` on the resource object) just in case you need to be absolutely sure (like if you are generating urls and you don't know if they're valid.)\n\nSo I'm closing this as invalid again, but the feedback is clear that the plugin is not obvious, and so we've pushed those changes into the next version.\n\nThanks for your report. \n. I can't test this right now, but perhaps trying a bare minimum injection of the small script. something like:\n\n``` javascript\n(function(w,d){\n  var s = d.createElement('script'),\n        l = d.getElementsByTagName('script')[0];\n  s.src = 'test.js';\n  l.parentNode.insertBefore( s, l );\n})(window, document);\n```\n\nIf that works it's yepnope specific, I'd guess, and if it doesn't, then we need to file a bug.\n. Will look into this before pushing out `v1.1` - I initially don't have a problem with it, but I'll go try it in the real world and see if it has any drawbacks.\n\nI think the original reason we don't take it as the second param is because you used to be able to pass in an old yepnope chain, and fall into the ordered list that was already occurring, but I think we took that out in `v1.0`.\n\nWould love some @ralphholzmann and/or @paulirish feedback on this.\n\n``` javascript\nyepnope('something.js', function(){ something() });\n```\n\nMy only immediate reaction is that it stops making a ton of sense once you add multiple objects and stuff, but if it was a consistent 'complete after everything' it could just be well-documented.\n. Marking to consider this for `v1.1` not necessarily putting it in.\n. Alright, I looked into the code it would take to add this in. It wouldn't be as small as I'd like, so I don't think I'm going to add this in.\n\nHowever, I think this really only looks good in the case when you're only loading a single string with yepnope. Like so:\n\n``` javascript\nyepnope('myscript.js', function(){ alert('done!'); });\n```\n\nI agree that that is better than creating an object and giving it a `complete` handler. But once you start creating tests and stuff, I think it becomes more clear with the explicit `complete` handler.\n\nLuckily in `v1.1` we exposed the raw injection function `yepnope.injectJs` so you'll be able to do this simple case with that:\n\n``` javascript\nyepnope.injectJs('myscript.js', function () { alert('done!'); });\n```\n\nThat bypasses all the caching mechanisms and stuff, so it's a bit more smooth anyways. So people who want to use yepnope as just an async script injector can be satisfied.\n. The delimiter could also be a colon, if we wanted.\n. Just pulled this into `v1.1` with some modifications. Tests needed though.\n. This would require quite a bit of extra code, not to mention be slower because of the extra requests involved. Also, it can be very difficult to know which script tag was the including script, etc.\n\nIn other words, I think there are better ways to do this. I do appreciate the thought though, and welcome other ideas.\n\nThanks.\n. That is kind of crazy, never seen anything like it. There's no chance that there isn't more yepnope calls in that file? That's the only thing I can think of right now...  We may need to set up a test case of sorts so i can debug this if that isn't the problem.\n. I think I'd just opt for people doing a Function.prototype.bind for this feature.\n. These are harmless warnings that come from the preloading tricks that yepnope uses. They have no effect on the outcome, but are unavoidable. Luckily users aren't reading these soft warnings.\n. Call `yepnope` from one place - at least after your css includes and after any of your most important external resources. Everything works, but testing, much like @aFarkas implies, is the only way to know for your site. End of the page before the body tag is the _safest_ - not necessarily the fastest, which is why that's often the advice.\n. It still has to parse all the code regardless, and yepnope is that heavy. I'd bet you'd see better performance without the `setTimeout` than with it, as all the important stuff executes asynchronously in the long run.\n. My comment over on that issue, for reference:\n\n\"Yepnope does not suffer from this issue. While it does use script tags for preloading, it uses invalid mime-types to ensure execution doesn't happen. There is a hard to reproduce bug in yepnope that we think has been ironed out in the `v1.1` branch if you'd like to try that out.\n\nThanks!\"\n. You couldn't rewrite it as a `jQuery.ajax` call because it's a script (unless you `eval` everything). You'd have to use [jQuery.getScript](http://api.jquery.com/jQuery.getScript/) which also does not have an error callback. This is because there's no way to reliably get an error state back from loading a script. We considered adding the error state for the few browsers that this works in, however we felt this would encourage people to build apps that supported less browsers.\n. I'm mobile, but they'd have to still inject script tags for cross domain\nscripts, no?\n. Hi Jake,\n\nI think you're running into two things.\n\nThe delay comes from the fact that in some browsers errors aren't passed on to the `onload` event of scripts. We'd love to get these errors, but we can't act on the ones that we don't get. We put the timeout in place for this reason.\n\nThe other problem is a bug in yepnope that we've fixed in `v1.1` (not yet released) but is pretty easy to work around yourself. Just use a `callback` instead of a `complete` when you're relying on the fallback. I think that should solve it.\n. The beta for v1.5 was launched about 29 minutes before you asked this. Just\ncheck out the main repo.\n\nThanks! Good timing!\n. Awesomely descriptive problem. I think yepnope could potentially solve this one, but I'd have to be sold on a better api than an empty string.\n\nI have two solutions for you, both of which I don't think are ideal:\n\n``` javascript\n// This solution just uses a single function to kick off things when everything is ready.\n(function(){\n  function jqInit(){\n    $(function(){\n      $(\"div.whatever\").css(\"color\", \"red\");\n    });\n  }\n\n  yepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope({ load: '/js/jquery-1.7.1.min.js', complete: jqInit });\n        }\n        else {\n          jqInit();\n        }\n    }\n  }]);\n})();\n```\n\nThe following way is a hack that uses the new 'non-reexcuting' script as a means to an end.\n\n``` javascript\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: \"//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js\",\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nI didn't test that second one, because it's a bit silly, but I think it might work. Feel free to suggest the right syntax for this. It'd have to look and feel better than the first example though.\n. You could also maybe use the `callback` and `complete` properties to your advantage.\n\n``` javascript\nyepnope({\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    callback: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    },\n    complete: function () {\n      $(function(){\n        $(\"div.whatever\").css(\"color\",\"red\");\n      });\n    }\n});\n\n```\n. Injecting a script with javascript will always be async, unless you use `document.write`, but even then it doesn't happen until the end of the current script, so you still wouldn't have a workable api.\n\nI'm interested in making the `callback` `complete` situation work. I feel like it _should_ work.\n\nJust FYI, yepnope exposes `yepnope.injectJs` to do alot of the script creation and injection that you're rewriting in these attempts.\n. Agreed. Will get that working.\n. I think this might have actually worked before `complete` was solidified a bit better in 1.5. I think I know where the issue lies:\n\nHere's a test case:\n\nhttp://jsbin.com/equzis\n\nIdeally, this would alert `1.7.0`\n\ncc-ing @ralphholzmann just so he's aware of this issue.\n. Is there any chance we can make this a completely optional file that we could just attach at the end of the file? I like having this option, but having it in by default has some significant size concerns for us.\n. If there's anything we can do to expose the correct stuff, let us know (or feel free to add it). We want to push out the v1.1 stuff (likely, actually as v1.5 since it's kind of some big changes) pretty soon, so happy to tackle it quickly.\n. I just launched the v1.5 beta, it's 1.1 with a few bigger features, so we bumped it a bit to make it a little more obvious.\n. Unfortunately for everyone, headers are everything when it comes to our style of script injection. The browsers just don't send the correct events when the headers are outside of what they expect. I don't know of a solution. :/ Many apologies.\n. This is actually a pretty highly tested portion of yepnope:\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/tests/tests.js#L155-239\n\nI'd be interested to see a failing test case if this really is a bug, as we pass all of those tests in our supported browsers.\n. Your code seems to be:\n\n``` javascript\nyepnope({\n  load : 'http://www.yandex.ru/dropcounters.js',\n  callback : function ( url, result, key ) {\n    console.log( url, result, key );\n  },\n  complete: function () {\n    alert('Everything has loaded in this test object!');\n  }\n});\n```\n\nThe only only errors that throw in my copy of firefox (which it seems like you're using) are the ones in http://www.yandex.ru/dropcounters.js .\n\nThe reason why it seems like things are loading twice is explained here on the yepnope site: http://yepnopejs.com/#twice\n\nIf you could host a test page that you can reproduce the error and give us more information about the browser you're seeing this in, we may be able to help solve this for you. Have you tried using other scripts than the `dropcounters.js` file? That seems to have quite a few problems in it (The only function isn't defined).\n. Ah I see Firefox 10 in the initial comment. Will investigate further in that browser.\n. Some of those extra errors were helpful. Thank you.\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/yepnope.js#L189\n\nI think perhaps the reason why it's throwing is because of that line only running in state 1.\n\nThat means that on some subsequent loads\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/yepnope.js#L246\n\n`preloadElem` could end up being null/empty object. That's the type of thing that would throw that type of error.\n\nI'll see if I can't clean it out. Thanks for the report.\n. I can definitely repro the bug at this point, but we may have to rework the whole system to get it fixed. Apologies on this one guys, it just didn't occur in the tests.\n. Hmm, i need to grab more context, and I have a 4pm meeting. But I'll run the test suite against that right after.\n\nThanks for the patch :D\n. I pushed this into the `yepnope.js` file in master, I'd love for you guys to try it in your individual situations. Thanks!\n. That's clear. It's intended that they don't re-execute. It is not intended that the complete callback doesn't fire. That may be a separate issue though. Looking into it.\n. Do you want to do a pull request for this? I can put it in if not, but want you to have the git history credit.\n. Merged. Thanks for the pull. Will push a 1.5.3 soon.\n. I pushed 1.5.3 today which had this fix.\n. They boil down to nearly the exact same thing. Whichever one you prefer would be the best one to use. I personally like the first one, unless I'm using multiple groups, in which case I mix them.\n\nyepnope _does_ separate loading and execution. That's how it can load everything all at once and execute them in order. We offer a whole plugin system through filters and prefixes that we have documented on the site. We have a 'preload' prefix that just preloads a file, but doesn't allow it to execute. Then you can execute it at anytime by just injecting it (like with `injectJS`), we do this on the yepnope website.\n\n> From all I see, you can't really control either loading or execution, but can only monitor, and even then, only the execution\n\nThis is confusing to me. You decided the order by what order you call in. You can use 'recursive yepnope' (documented on the site) in order to inject scripts into the middle of the stack, and you can stop things from executing. It seems like all of the things we mention. Let me know if something is not clear here.\n. Its a bug that were working out. Technically it only happens when the second time you request a script is the last thing you request. But that's a bug for sure.\n. @ralphholzmann - I missed this issue when it came through. Do we have a successful loading mechanism for older mobile webkit browsers?\n. If you look at some of the branching we do with the browser inferences at the top of the file, we decide what type of element we want to use to preload with. There's a good chance that the method we used in the 1.0.x series of yepnope releases actually works on these browsers, since it was a little bigger and more specific. That may be a good place to start. See if yepnope 1.0.x works on those devices.\n. I think it's likely a performance hit, but one I'm willing to add. Any chance you wanna do a pull request for this?\n. Its not an error, its just a warning. Yepnope does this on purpose in order to preserve execution order. Its a pretty well accepted side effect\n. The issue is not the mime type warnings though. If you can figure out the source of the TinyMCE stuff, feel free to file an issue.\n. Live JSLint your code!\n\nhttp://mondaybynoon.com/20110421/jslint-in-sublime-text-2-on-os-x/\n\nhttps://github.com/hallettj/jslint.vim\n. (or even better, jshint!)\n. Haha. No worries. Thanks for reporting!\n. It certainly seems like we can add this to the list of bugs that fixing other things about the `complete` callback added. We're working on fixing both sets of problems, but they seems to fight each other. Stay tuned for updates.\n\nThanks for the report. This is helpful for adding to our test suite.\n. Hey Pat,\n\nWhat if we just stopped removing script tags?\n. I can't find a reason why anyone would want to remove script tags. Can you figure out a use case for this?\n. you could poll for a `parentNode` and whenever it was `unedefined` it would be about that time. Let's fix the bug in the other stuff rather than here. Happy to help.\n. > If yepnope crashes then Yepnope has a bug....\n> unless:\n> Yepnope points the finger of blame at the person causing the problem.\n\nI'm not sure I agree with that logic. Otherwise all my bugs would be browser bugs -- and all browser bugs would be OS bugs for that matter.\n\nEither way. I can point a finger to 'whatever is removing the initial script tag.' That shouldn't ever need to happen, so I don't understand why we would want to add extra bytes and extra complexity to handle something that shouldn't happen.\n\nI'm sure your code is fine, but it re-queries the dom on every injection. That's both unnecessary and still asynchronous enough to cause the race condition to happen (just reduces the time it can happen in). It is not the appropriate fix for the problem.\n\n> Understand that my motivation to debugging other people's code is pretty limited as well. I have enough of my own bugs and issues. (Plus I have my own startup to run. Ask me about my day :-P )\n\nI offerred my help to debug the issue in the other script because I wanted to help you, as well as answered your questions quickly and respectfully. If you think that I am not also busy, and I just run yepnope for a living, check out it's license. I am willing to get to the _bottom_ of your issue with you. Not put bandaides over the top. It's not an engineering technique that I'm a fan of.\n\nIf this is unacceptable to you - yepnope is WTFPL - feel free to fork, patch, and claim that yours is better.\n. Firefox has some mechanisms for figuring that stuff out, but it's tough. I don't think it fires when they are removed, just when they are 'get' and 'set'.\n\nAs for the 3am scenario, it would make sense that that company can't use yepnope. There are plenty of people with incompatible systems that can't use yepnope as well as many other open source software projects. As the maintainer, you get to draw a line for the amount of noise you're willing to accept.\n\nPersonally loading more than a couple scripts (like 3) on page load - all through yepnope - is the use-case that I'm optimizing. It's really the only time when yepnope has value. I could support many many options for support of every use-case, but I don't find value in supporting use-cases where yepnope is not going to be helpful.\n. I think we used to fire errors immediately when we knew. @ralphholzmann does most of the loading stuff and i think this changed. Maybe he knows why it changed better than my dance around the facts.\n. There's no test, so there is no result. no?\n. The `result` parameter is the result of the `test` property. Currently there is no cross browser way to detect a failed script.\n. Seems simple enough. Let me know if your app continues to work on normal browsers. I don't think there's a ton of people using the css loading feature, so whatever you wanna put in here is probably the most relevant thing to do.\n. We actually added this as a feature in 1.5. The majority of people wanted to avoid loading scripts twice. You can force an injection again with `yepnope.injectJs('url/here.js')`\n. Can you upgrade to the latest and try again? If it still breaks, could you post a jsfiddle? Happy to help debug an isolated test case.\n. I updated the site for you (and all). Unfortunately, I have nothing to do with NuGet.\n. Amazing bug report. Thank you.\n\nWould you like to put in a pull request for that fix?\n. <3z\n. Unfortunately I do not have one of these devices to try on. It does very much sounds like a timeout issue. If you look where there is browser inference, potentially you could mess with trying to run other browsers' execution paths by hard coding those tests and see if that clears anything up?\n. Hi Ken,\n\nI think this may be better off as an official plugin, rather than a core feature. You can implement it as a `filter` - via the `yepnope.addFilter` method.\n\nWe try to be religious about adding features into core, so we can keep the file size as small as possible.\n\nDoes this sound agreeable? Happy to hear arguments to the contrary. Happy to help out if the docs are lacking. We _love_ pull requests and yours is great. So good when people add tests.\n. (note, we can still add it in the official repo. We don't have a `filters` directory, like we have a `prefixes` directory, but you could create one)\n. Also, regardless of the direction we go, we have a system for generating the test files that you've created. If you check out the test server app a bit, that logic should be clear. If not, happy to help out.\n. As far as I can tell, the `url` param on the resource object should be immediately available to change. I wouldn't change the `origUrl` - just the `url` property.\n\n``` javascript\nyepnope.addFilter(function( resObj ) {\n  resObj.url = yepnope.baseUrl + resObj.url;\n  return resObj;\n});\n```\n\nSomething like that seems like it would work, no?\n. It may be better implemented as a `paths` type system like in RequireJS.\n\n``` javascript\nyepnope.paths = {\n  'template' : 'http://something.com/template',\n  'js' : 'http://somethingelse.com/scripts'\n}\n```\n\nThen any time a resource starts with the path, the path mapped string is put there instead.\n. Best.\n. Woah, that worked first try?! I'm a regex master!\n. Merged. Thanks!\n. Unfortunately, the place we inject precached scripts is carefully placed to work in as many browsers as possible. There's a lot of extra logic in trying to find a spot in the body to inject into without breaking old IEs etc. The speed tools here are just a bit dated and don't take this stuff into consideration. You should be going for fastest page loads, in my opinion, not the highest scores.\n. Any chance you could add a test case for this too? Thanks for the commit! Will pull.\n. Wanna post your code to a branch and link it here? Perhaps it could be useful in our fix.\n. Many thanks, @ralphholzmann and I will take a look.\n. You would need to also load jQuery with yepnope.\n. Awesome find.\n. thanks :D\n. This is a very good bug report, much appreciated detail. I'll look into fixing it. Thanks.\n. Pull request?\n. Are you sure you're including the separate CSS preload prefix plugin? This\nshould all still work.\n. It's actually not a plugin, it's a prefix. It's a weird distinction, but try this one:\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/prefixes/yepnope.preload.js\n. I'll see what I can do. Thanks!\n. It's working how we interpereted people wanting it, but I think your assumptions are better than what we built. The user should have final say in the override.\n. I'd say this is a decently small enough way to handle this. Merging.\n. Not sure I follow. Why would `firstNode` help?\n. Unfortunately yepnope does not do any type of non-native resource loading. It doesn't do any ajax work, which is how this would need to happen. We just inject tags (script/style) on the page.\n\nThat's why it looks like you've added entire ajax libs and stuff to the prefix. I'd suggest against this. By the time you load jQuery, it'd be better to just do raw ajax requests.\n\nIf I have to choose from those three, I'd probably say 'very bad way' - because it's just going to be slower.\n\nThanks for asking, though!\n. fresh.\n. Handling all of this in #136\n. This looks good. Looks like you got `notie` as `other` in the output here. Merging.\n. We've seen some issues when other script elements are removed from the page. Could that be happening?\n\nThanks for the info/report!\n. Sorry for the brevity but I'm mobile:\n\nThe setting would definitely cause dual downloads but it wouldn't cause\ndual executions.\n\nAre you noticing things run twice?\n. Hi @YoussefTaghlabi (and all). I'm just getting back from overseas, but that's a good find. Would you consider submitting a pull-request to fix it. /cc @ralphholzmann \n. Fixed in #139\n. Thanks!\n. Awesome, thanks!\n. The WTFPL license allows you to relicense yepnope to whatever fits your project. So if you need MIT or BSD, just change the license.\n. Would you submit this fix as a pull request?\n. Solid. Thank you.\n. Where does this occur? In one of the plugins?\n. Please don't create duplicate issues. You already commented on #32 with \"what the heck\" (classy). \n. I never use that plugin, if you think it's a good fix that'll work in mobile and desktop, I'd be happy to take a pull request. There was likely a reason it was added though. Perhaps @unscriptable knows?\n. I'd guess the old code + the new onload stuff would be the best way forward. Would likely take a sniff of some sort, but I'm old and tired and that's a good enough compromise for me.\n. I think anyone who needs that much accuracy should probably go with the set and check poll anyways.\n. I agree that for the most part, you should not be using a script loader to load style sheets. They're usually best in the `<head>` and synchronous.\n. Please sign the WTFPL Contributors License Agreement before we can pull this.\n. There's likely a bug where css that's last can get lost in the execution stack. We're rewriting in 2.0 right now to solve those things. Your way is totally fine, and probably a tiny bit faster.\n. Can you make this mergeable?\n. Can we get it to pass tests?\n. I wish we would have documented some of this a little better internally. There are some crazy things that happen with objects. Sometimes they become visible or change layout subtly. So this change stops us from taking that out. What if instead, you check for the existence of the `insBeforeObject` which it sounds like doesn't exist for you for some reason. We wrote some code around `getFirstScript` to handle this for scripts I'd be happy to take a PR that either just checked and gave up or did something fancier. We are rewriting this though and it won't use objects internally anymore, so if your fix works for you, you can also just use it happily and not worry about stuff in here.\n\nThank you for the report and PR!\n. I deprecated yepnope tonight because of bugs like this in the way that in-order loading had to be hacked in, as well as because it's no longer considered a best practice to load in a bunch of scripts separately.\n\nMore info here: https://github.com/SlexAxton/yepnope.js#deprecation-notice\n. I didn't say you had to use AMD. I said that you should build your application and not rely on in-order script loaders (which are increasingly breaking in newer/mobile browsers)\n. Then the 2.0.0 update should work great for you!\n\n`yepnope.injectJs('script.js', function(){});`\n. I would say just pull that logic out and use it. I don't think yepnope should add properties to other objects. It's really small!\n. Yea. My suggestion would be to pull it out, and use it in your app, and then don't use this prefix, but instead modify it to use your results. Does that makes sense?\n\nSo just switch out the line in the prefix plugin with:\n\n``` js\nvar oldie = (function(){\n\n    var undef,\n        v = 3,\n        div = document.createElement('div'),\n        all = div.getElementsByTagName('i');\n\n    while (\n      div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',\n      all[0]\n    );\n\n    return v > 4 ? v : undef;\n\n  }())\n```\n\nto\n\n``` js\nvar oldie = myOldIEVariable,\n```\n. (because I just don't think yepnope should try to be a Modernizr for browser sniffs, if that makes sense)\n. The callback runs in both cases and passes the result back as one of the\narguments.\n. The goal of the 2.0 version was to remove the ability to load multiple scripts, as a performance best-practice. If you want multiple scripts you can use the 1.x versions, but I don't recommend it. Lots of good build tools out there these days!\n. I wouldn't worry about the order too much in practice, but I suppose I was assuming a dynamic server would interpret the query parameters  and return the correct file (and then cache that result). I don't think it'd be worth it to sort or anything unless someone comes across some actual issues here.\n\nAppreciate the valid input, though!\n. Unable to reproduce this. Closing, but happy to look if I can get a repro case.\n. The goal of yepnope 2 is to avoid loading multiple files like this. If you'd like this functionality, then use yepnope 1.x, but it may come with performance costs.\n. Sounds like nothing was sent into the function call? \n. It was leading to some pretty ugly stuff. Your use case is fine, but an if statement works just as nicely:\n\n``` js\nif (window.Intl) yepnope.injectJs('js/intl.js');\n```\n\nThe `IntlPolyfill` should probably recommend a different method than they currently are. The actual nicer scenario is bundling `intl.js` with your main build for users that need it:\n\n``` js\nyepnope('js/app.js', {\n  intl: window.Intl\n}, function() {\n  console.log(new Intl.DateTimeFormat(...).format(new Date()));\n});\n```\n\nThis would request either: `js/app.js?yep=intl` or `js/app.js?nope=intl`\n\nYou could then potentially handle serving the correct file depending on those urls (which can look different with a different formatter).\n\nHope that helps!\n. Yepnope as it was included in Modernizr (`Modernizr.load` was just an alias to `yepnope`) is deprecated, and has been removed from Modernizr. You're welcome to grab the previous version and use it. A deprecation warning generally means that the old libraries still work, but that it's no longer going to be worked on.\n\nThe master branch has a version of yepnope that's more in line with what you _should_ be doing, but also isn't a maintained, suggested library. Modernizr points you at the yepnope library in case you need backwards compatibility, not as a suggested solution. Use a build tool.\n\nIf the docs are poor, please, by all means feel free to contribute back more clear updates.\n. > here it's an even confusing doc which says it has deprecated itself, but still houses the library\n\nI'm not sure what you want. Should I delete the repo?\n. As far as I can tell, there's only one version of the MIT license:\n\nhttps://spdx.org/licenses/MIT.html\n. We have the license in the code, which I think should remove ambiguity?\n\nhttps://github.com/SlexAxton/yepnope.js/blob/master/LICENSE.md\n. Sorry, all of those licenses are the 'new bsd' license, not MIT. I thought you were saying that I still had an  MIT license somewhere and that it was mismatching against the new bsd license.\n\nI think there's no ambiguity there, since it's inlined in the readme and in the LICENSE.md file, but I mean this license:\n\nhttps://spdx.org/licenses/BSD-3-Clause.html\n. It's right above a 3 clause license, but I'll happily merge a PR that makes that clarification.\n. Might as well update the package.json too\n. ",
    "jsdriller": "Is that also true for a \n\ntest: jQuery\n\n'cause this also seems always to be false?\n\nHow would you handle a cdn fallback with yepnote the way it is today?\n. Is that also true for a \n\ntest: jQuery\n\n'cause this also seems always to be false?\n\nHow would you handle a cdn fallback with yepnote the way it is today?\n. ",
    "johnloy": "Alex,\n\nThanks for the feedback. Turns out I was using a slightly old version. The scripts don't seem to be downloading twice when using the latest code.\n\nI also noticed that multiple calls to yepnope in the same page seem to cause Firefox to hang as if it's waiting for resources to download. Granted, the purpose of yepnope seems to be a onetime dynamic loader for polyfills, but I found myself in a situation where I needed to pause loading of a subsequent script until a callback is executed, ala $LAB.wait(). The callbacks specified in yepnope don't seem to force a wait, so I tried calling yepnope again from inside the callback itself. Though the second call does download the resources, I get a never-ending beachball (on a mac) and progress bar.\n. Alex,\n\nThanks for the feedback. Turns out I was using a slightly old version. The scripts don't seem to be downloading twice when using the latest code.\n\nI also noticed that multiple calls to yepnope in the same page seem to cause Firefox to hang as if it's waiting for resources to download. Granted, the purpose of yepnope seems to be a onetime dynamic loader for polyfills, but I found myself in a situation where I needed to pause loading of a subsequent script until a callback is executed, ala $LAB.wait(). The callbacks specified in yepnope don't seem to force a wait, so I tried calling yepnope again from inside the callback itself. Though the second call does download the resources, I get a never-ending beachball (on a mac) and progress bar.\n. ",
    "johjacb": "so - just to clarify, each resource makes two http requests? \n\nloading 5 scripts = 10 http requests?\n\nthanks\n. so - just to clarify, each resource makes two http requests? \n\nloading 5 scripts = 10 http requests?\n\nthanks\n. ",
    "itechnology": "Thank's for the heads up\n\nGot me thinking and digging, and came up with a solution ...tho i wonder why it loads fine via googles own loader and misbehaves in others (i tried with handmade dom script injection and the result was the same as with yepnope).\n\nThis seems to work just fine:\n\n```\nyepnope([{load:'http://www.google.com/jsapi', callback: function() {\n    google.load(\"maps\", \"3\",\n                {\n                    callback: function () {\n                        console.log(\"loaded\");\n                    },\n                    other_params: \"sensor=false\"\n                });\n}}]);\n```\n. If you find a solution that would be nice.\n\nHowever if it requires hacks & workarounds i prefer to pass.\n(small, simple, stable, & extensible is how i prefer them)\n\nI've been looking into yepnope, requirejs, labjs, & headjs (nice, but we already use modernizr) for one of our high traffic sites. YepNope looks like the most compact, elegant (love the idea of filters & prefixes) and straight to the point solution right now, the others seem either kinda bloated and/or overkill for what we are trying to achieve.\n\nThank's again,\nRobert\n. Thank's will give it a try!\n. Using yepnope 0.2.3, works fine\n/test/index.htm (deleted)\n\nUsing yepnope 1.0 rc2, works as described above\nSame behavior if using modernizr 2.0 beta with yepnope included\n/test/index-rc.htm  (deleted)\n\nHowever while putting up the sample i noticed that 0.2.3 includes the minified version of $lab inside it, where the rc and modernizr version does not, and i did not include labjs in any of my pages.\n\nOh, and congrats on joining the modernizr team!\n. Actually i've been wanting to split my js into modules since quite a while now, and yesterday when i came across\nhttps://github.com/rmurphey/jquery-module\n\ni thought i'd try something similar based on html5 data attributes, and then use yepnope as the dependency loader, where each module might require additional dependencies and load them as needed, but ran across this issue.\n\nGoogle maps is different issue where we noticed that it could take ages to load, and block other js from executing on our site, which is pretty reliant on js/ajax for updating the UI. (especially for users with ie6/7/ff2: which allow only 2 same domain tcp connections)\n\nSo for now i just moved the google loader jsapi reference to the login page, like this the users cache is already primed when he hits the actual application page, and then use googles native load function if a client ever needs to access it.\n\nThank's for the updates, will surely be integrating them with modernizr 2 :)\n. Thank's for the heads up\n\nGot me thinking and digging, and came up with a solution ...tho i wonder why it loads fine via googles own loader and misbehaves in others (i tried with handmade dom script injection and the result was the same as with yepnope).\n\nThis seems to work just fine:\n\n```\nyepnope([{load:'http://www.google.com/jsapi', callback: function() {\n    google.load(\"maps\", \"3\",\n                {\n                    callback: function () {\n                        console.log(\"loaded\");\n                    },\n                    other_params: \"sensor=false\"\n                });\n}}]);\n```\n. If you find a solution that would be nice.\n\nHowever if it requires hacks & workarounds i prefer to pass.\n(small, simple, stable, & extensible is how i prefer them)\n\nI've been looking into yepnope, requirejs, labjs, & headjs (nice, but we already use modernizr) for one of our high traffic sites. YepNope looks like the most compact, elegant (love the idea of filters & prefixes) and straight to the point solution right now, the others seem either kinda bloated and/or overkill for what we are trying to achieve.\n\nThank's again,\nRobert\n. Thank's will give it a try!\n. Using yepnope 0.2.3, works fine\n/test/index.htm (deleted)\n\nUsing yepnope 1.0 rc2, works as described above\nSame behavior if using modernizr 2.0 beta with yepnope included\n/test/index-rc.htm  (deleted)\n\nHowever while putting up the sample i noticed that 0.2.3 includes the minified version of $lab inside it, where the rc and modernizr version does not, and i did not include labjs in any of my pages.\n\nOh, and congrats on joining the modernizr team!\n. Actually i've been wanting to split my js into modules since quite a while now, and yesterday when i came across\nhttps://github.com/rmurphey/jquery-module\n\ni thought i'd try something similar based on html5 data attributes, and then use yepnope as the dependency loader, where each module might require additional dependencies and load them as needed, but ran across this issue.\n\nGoogle maps is different issue where we noticed that it could take ages to load, and block other js from executing on our site, which is pretty reliant on js/ajax for updating the UI. (especially for users with ie6/7/ff2: which allow only 2 same domain tcp connections)\n\nSo for now i just moved the google loader jsapi reference to the login page, like this the users cache is already primed when he hits the actual application page, and then use googles native load function if a client ever needs to access it.\n\nThank's for the updates, will surely be integrating them with modernizr 2 :)\n. ",
    "zeroedin": "is there a full example where you have gmaps loaded using yepnope and drawing it out on the page?  \n. is there a full example where you have gmaps loaded using yepnope and drawing it out on the page?  \n. ",
    "dieisraels": "I use the asynchronously loading of Google Maps API V3:\nhttp://code.google.com/apis/maps/documentation/javascript/tutorial.html#Loading_the_Maps_API\n\nThis works great with yepnope for me.\n. I use the asynchronously loading of Google Maps API V3:\nhttp://code.google.com/apis/maps/documentation/javascript/tutorial.html#Loading_the_Maps_API\n\nThis works great with yepnope for me.\n. ",
    "doubleclickdetroit": "I am going to go ahead and close this. After re-installing IE7 the issue has disappeared. Not sure what happened, but you know, it's IE. :)\n. I am going to go ahead and close this. After re-installing IE7 the issue has disappeared. Not sure what happened, but you know, it's IE. :)\n. ",
    "ralphholzmann": "This is indeed a bug in our loading logic. Great job on finding this. I've fixed this in my branch ( https://github.com/ralphholzmann/yepnope.js ) and Alex should be pulling the fix in shortly. We'll make sure to add this specific use case into our test suite. Thank you.\n. Test case for this specific issue has been added to the test suite with this commit:\n\nhttps://github.com/ralphholzmann/yepnope.js/commit/76c6ba386d2d3364c5d6fc1dda8cee36887d98f5\n. Heyo,\n\nSo after looking into this issue, there's definitely a header being sent back by twitter that is prompting the pop-up. I can't tell which specifically, but I assume it has something to do with the mime / content-type.\n\nThat being said, yepnope isn't really designed to be loading json callbacks. While it may work if the headers are correct, typically JSON is sent with a <code>no-cache</code> header, and yepnope requires that there always be proper caching on the resources it loads. This is because yepnope fully decouples preloading and executing. This technique hinges on the fact that we can preload a resource, and then quickly execute it because its already loaded into the browsers cache. In the case of loading JSON, we cant preload the data because it's being sent with a <code>no-cache</code> header, so you would essentially be downloading the JSON twice (this is also the case with _any_ resources that doesn't have proper caching headers).\n\nUsing jQuery to grab the json in the callback would be the best option here:\n\n<pre><code>var twitterid = 'some_twitter_id';\n\nyepnope({\n  test: window.twitterCallback2,\n  nope: \"js!http://twitter.com/javascripts/blogger.js\",\n  complete: function() {\n    $.getScript('http://twitter.com/statuses/user_timeline/' + twitterid +'.json?callback=twitterCallback2&count=3')\n  }\n});</code></pre>\n\n\nPerhaps we can add this to the \"gotchas\" or \"keep in mind\" section on the site.\n\nThanks,\n\nRalph\n. Unfortunately, we only support Opera 10+.\n. Can you provide an example of this? I loaded up http://yepnopejs.com/ in Safari 5 and Webkit nightly, and the 3 scripts loaded by yepnope (jquery, jsbeautify and hijs) show up in the script dropdown in both browsers:\n\nhttp://grabs.ralphholzmann.com/fd.png\n. I see your issue now. Unfortunately, this is a browser vendor issue that we cannot fix.\n. We don't recommend using yepnope to load JSON callbacks, because these typically do not have caching headers, which will result in a double download. Continue to use getScript or getJSON from jQuery for this.\n. Heyo Acoustic,\n\nThe deleting of the autoprotocol filter was intentional. Back in the early days of yepnope.js, when it was basically a wrapper around LABjs, the autoprotocol filter was needed because LABjs would not properly handle \"[protocol relative URLs](http://paulirish.com/2010/the-protocol-relative-url/).\" However, after looking at the features and file size we were targeting, it became clear to us that we would have to ditch LABjs and write our own loader to keep the file size down and have awesome features (like recursive yepnope and fallback scripts). Once we gathered some requirements, ditched LABjs, and wrote our own loader from scratch, we no longer needed that filter because our new shnazzy loader handled protocol relative URLs correctly out of the box.\n\nSorry for the confusion, but if you're using protocol relative URLs, they'll just work, no filter needed, bro.\n\nThanks,\n\nRalph\n. PS: I should also note that you can feel free to load protocol relative CSS in yepnope, it won't double download in old IEs. Turns out dynamically created link tags with PRUs don't double download, but standard ones do.\n. Can you please provide a test case via jsfiddle or jsbin?\n. Heyo,\n\nThis is intended because we use images to preload resources certain versions of webkit in yepnope. There's nothing we can do about the warnings. They're not breaking your page. I would suggest clicking the \"Errors\" or \"Logs\" button on the console tab of the web inspector to find the messages you're looking for.\n\nThanks,\n\nRalph\n. I would double check to make sure all of your resources exist. Check out the \"Errors and Timeouts\" section of [yepnopejs.com](http://yepnopejs.com/). We use a timeout mechanism in yepnope that continues execution after a set amount of time if an onload handler fails or times out. The default is 10 seconds. So if your page is stalling for 10 seconds, this likely means that something is returning a 404 or taking a very long time to load.\n. It was a typo -- we _use_ images to preload resources in yepnope.\n. Totally.\n\nOn Dec 19, 2012, at 5:45 PM, Jason Giedymin notifications@github.com wrote:\n\n> Kinda like a hack \n> \n> -Jason \n> \n> On Dec 19, 2012, at 6:25 PM, baloneysandwiches notifications@github.com wrote: \n> \n> > Yeah I figured that out. I'm actually just curious about the how and why? \n> > \n> > \u2014 \n> > Reply to this email directly or view it on GitHub. \n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. Tell them they're not errors, because they're not, they're warnings.\n\nOn Feb 2, 2013, at 10:33 AM, Greg Tarnoff notifications@github.com wrote:\n\n> I know this issue is closed and old, but while I understand they can be ignored, I can't get my QA and Stakeholders to sign off on projects with JS errors showing up. An explanation of why they are used so I can look to see if I need to fork it would have been nice.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Unfortunately, there's not much that can be done until 2.0 (which is only in the planning stages). You can try and hack around it starting on [line 34](https://github.com/SlexAxton/yepnope.js/blob/master/yepnope.js#L34) by replacing `img` with `script`, but other than that, not sure what to tell you.\n. So to clarify -- you want to load your JavaScript templates via yepnope, and give them a bogus type attribute so they won't execute?\n. +1 -- if we could get a reproducible test case that would be awesome. This bug has been lurking for awhile.\n. Hi @vincentbernat, thanks for the suggestion. Unfortunately, your example is an invalid way of specifying a script include. That being said, yepnope does indeed accept query string parameters. For example:\n\n```\nyepnope( \"https://apis.google.com/js/plusone.js?parsetags=explicit\" );\n```\n\nPerhaps give that a try?\n. Not sure why yepnope is stalling. I'll definitely look into this. However, you really shouldn't be specifying fallbacks in the `complete` callback. Here's a working example: http://jsfiddle.net/nZCYY/\n. All these type detections have their upsides and downsides. File size is very important to yepnope and its not something we're looking to sacrifice unless it would yield substantial value.\n. Hi Andrew,\n\nFor the time being, the best you can do is to test for the existence of the script you're loading on the `window`, and if it exists, don't load it again.\n\n``` javascript\nyepnope({\n    test : window.jQuery,\n    nope: \"https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js\"\n});\n```\n\nThis isn't 100% full proof, because if you're making two yepnope calls to download a script, it may have not executed before the second call has been made, and then won't exist in the `window`.\n\nThat being said, we're working on the ability to prevent duplicate script downloads for a future release, so stay tuned.\n. It's better at the end of the page, right before the closing `</body>`.\n. It looks like the complete callback is not waiting for inner yepnope calls to complete before it fires. This is indeed a bug. I'll look into this right now.\n. We do. Images work everywhere webkit. This is a weird edge case. I'm installing the 2.3 emulator now to give this a shot.\n. I tested on a simulator and confirm the issue. It sounds like in certain cases the <image> tag we preload scripts with isn't firing its `onload` callback. We may need to look at an alternative loading method for mobile and older webkits. We _used_ to have a code fork for older webkits, but we removed it to save space and didn't see any compatibility issues. I guess its time to revisit that assumption.\n. The code surrounding errors could likely use some refactoring. I believe it used to fire immediately when we were doing `script`/`object` preloading, but we've since switched to `img`/`object` preloading because the code is much smaller and it handles a recent change to webkit engines with regarding to caching downloaded scripts.\n\nPerhaps we could provide an error callback in test objects so you can define your own error functionality on a per script basis.\n\n``` javascript\nyepnope({\n  load : \"jquery.js\",\n  error : function() {\n    console.log(\"oh shiii....\");\n  }\n});\n```\n\nThoughts @SlexAxton @Jakobud ?\n. It's all good in the hood.\n. Hey @crane-may, thanks for the pull! While this certainly will work in some cases, perhaps a better solution would be to additionally set `visibility` to `hidden` so while the element is floated, its not visible.\n. lol omg\n. @csillag The project is now deprecated. If you discover and issue with the new 2.0 release, please create a new issue. We won't be addressing issues from 1.5.\n. :thumbsup: \n. This is indeed a bug in our loading logic. Great job on finding this. I've fixed this in my branch ( https://github.com/ralphholzmann/yepnope.js ) and Alex should be pulling the fix in shortly. We'll make sure to add this specific use case into our test suite. Thank you.\n. Test case for this specific issue has been added to the test suite with this commit:\n\nhttps://github.com/ralphholzmann/yepnope.js/commit/76c6ba386d2d3364c5d6fc1dda8cee36887d98f5\n. Heyo,\n\nSo after looking into this issue, there's definitely a header being sent back by twitter that is prompting the pop-up. I can't tell which specifically, but I assume it has something to do with the mime / content-type.\n\nThat being said, yepnope isn't really designed to be loading json callbacks. While it may work if the headers are correct, typically JSON is sent with a <code>no-cache</code> header, and yepnope requires that there always be proper caching on the resources it loads. This is because yepnope fully decouples preloading and executing. This technique hinges on the fact that we can preload a resource, and then quickly execute it because its already loaded into the browsers cache. In the case of loading JSON, we cant preload the data because it's being sent with a <code>no-cache</code> header, so you would essentially be downloading the JSON twice (this is also the case with _any_ resources that doesn't have proper caching headers).\n\nUsing jQuery to grab the json in the callback would be the best option here:\n\n<pre><code>var twitterid = 'some_twitter_id';\n\nyepnope({\n  test: window.twitterCallback2,\n  nope: \"js!http://twitter.com/javascripts/blogger.js\",\n  complete: function() {\n    $.getScript('http://twitter.com/statuses/user_timeline/' + twitterid +'.json?callback=twitterCallback2&count=3')\n  }\n});</code></pre>\n\n\nPerhaps we can add this to the \"gotchas\" or \"keep in mind\" section on the site.\n\nThanks,\n\nRalph\n. Unfortunately, we only support Opera 10+.\n. Can you provide an example of this? I loaded up http://yepnopejs.com/ in Safari 5 and Webkit nightly, and the 3 scripts loaded by yepnope (jquery, jsbeautify and hijs) show up in the script dropdown in both browsers:\n\nhttp://grabs.ralphholzmann.com/fd.png\n. I see your issue now. Unfortunately, this is a browser vendor issue that we cannot fix.\n. We don't recommend using yepnope to load JSON callbacks, because these typically do not have caching headers, which will result in a double download. Continue to use getScript or getJSON from jQuery for this.\n. Heyo Acoustic,\n\nThe deleting of the autoprotocol filter was intentional. Back in the early days of yepnope.js, when it was basically a wrapper around LABjs, the autoprotocol filter was needed because LABjs would not properly handle \"[protocol relative URLs](http://paulirish.com/2010/the-protocol-relative-url/).\" However, after looking at the features and file size we were targeting, it became clear to us that we would have to ditch LABjs and write our own loader to keep the file size down and have awesome features (like recursive yepnope and fallback scripts). Once we gathered some requirements, ditched LABjs, and wrote our own loader from scratch, we no longer needed that filter because our new shnazzy loader handled protocol relative URLs correctly out of the box.\n\nSorry for the confusion, but if you're using protocol relative URLs, they'll just work, no filter needed, bro.\n\nThanks,\n\nRalph\n. PS: I should also note that you can feel free to load protocol relative CSS in yepnope, it won't double download in old IEs. Turns out dynamically created link tags with PRUs don't double download, but standard ones do.\n. Can you please provide a test case via jsfiddle or jsbin?\n. Heyo,\n\nThis is intended because we use images to preload resources certain versions of webkit in yepnope. There's nothing we can do about the warnings. They're not breaking your page. I would suggest clicking the \"Errors\" or \"Logs\" button on the console tab of the web inspector to find the messages you're looking for.\n\nThanks,\n\nRalph\n. I would double check to make sure all of your resources exist. Check out the \"Errors and Timeouts\" section of [yepnopejs.com](http://yepnopejs.com/). We use a timeout mechanism in yepnope that continues execution after a set amount of time if an onload handler fails or times out. The default is 10 seconds. So if your page is stalling for 10 seconds, this likely means that something is returning a 404 or taking a very long time to load.\n. It was a typo -- we _use_ images to preload resources in yepnope.\n. Totally.\n\nOn Dec 19, 2012, at 5:45 PM, Jason Giedymin notifications@github.com wrote:\n\n> Kinda like a hack \n> \n> -Jason \n> \n> On Dec 19, 2012, at 6:25 PM, baloneysandwiches notifications@github.com wrote: \n> \n> > Yeah I figured that out. I'm actually just curious about the how and why? \n> > \n> > \u2014 \n> > Reply to this email directly or view it on GitHub. \n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. Tell them they're not errors, because they're not, they're warnings.\n\nOn Feb 2, 2013, at 10:33 AM, Greg Tarnoff notifications@github.com wrote:\n\n> I know this issue is closed and old, but while I understand they can be ignored, I can't get my QA and Stakeholders to sign off on projects with JS errors showing up. An explanation of why they are used so I can look to see if I need to fork it would have been nice.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Unfortunately, there's not much that can be done until 2.0 (which is only in the planning stages). You can try and hack around it starting on [line 34](https://github.com/SlexAxton/yepnope.js/blob/master/yepnope.js#L34) by replacing `img` with `script`, but other than that, not sure what to tell you.\n. So to clarify -- you want to load your JavaScript templates via yepnope, and give them a bogus type attribute so they won't execute?\n. +1 -- if we could get a reproducible test case that would be awesome. This bug has been lurking for awhile.\n. Hi @vincentbernat, thanks for the suggestion. Unfortunately, your example is an invalid way of specifying a script include. That being said, yepnope does indeed accept query string parameters. For example:\n\n```\nyepnope( \"https://apis.google.com/js/plusone.js?parsetags=explicit\" );\n```\n\nPerhaps give that a try?\n. Not sure why yepnope is stalling. I'll definitely look into this. However, you really shouldn't be specifying fallbacks in the `complete` callback. Here's a working example: http://jsfiddle.net/nZCYY/\n. All these type detections have their upsides and downsides. File size is very important to yepnope and its not something we're looking to sacrifice unless it would yield substantial value.\n. Hi Andrew,\n\nFor the time being, the best you can do is to test for the existence of the script you're loading on the `window`, and if it exists, don't load it again.\n\n``` javascript\nyepnope({\n    test : window.jQuery,\n    nope: \"https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js\"\n});\n```\n\nThis isn't 100% full proof, because if you're making two yepnope calls to download a script, it may have not executed before the second call has been made, and then won't exist in the `window`.\n\nThat being said, we're working on the ability to prevent duplicate script downloads for a future release, so stay tuned.\n. It's better at the end of the page, right before the closing `</body>`.\n. It looks like the complete callback is not waiting for inner yepnope calls to complete before it fires. This is indeed a bug. I'll look into this right now.\n. We do. Images work everywhere webkit. This is a weird edge case. I'm installing the 2.3 emulator now to give this a shot.\n. I tested on a simulator and confirm the issue. It sounds like in certain cases the <image> tag we preload scripts with isn't firing its `onload` callback. We may need to look at an alternative loading method for mobile and older webkits. We _used_ to have a code fork for older webkits, but we removed it to save space and didn't see any compatibility issues. I guess its time to revisit that assumption.\n. The code surrounding errors could likely use some refactoring. I believe it used to fire immediately when we were doing `script`/`object` preloading, but we've since switched to `img`/`object` preloading because the code is much smaller and it handles a recent change to webkit engines with regarding to caching downloaded scripts.\n\nPerhaps we could provide an error callback in test objects so you can define your own error functionality on a per script basis.\n\n``` javascript\nyepnope({\n  load : \"jquery.js\",\n  error : function() {\n    console.log(\"oh shiii....\");\n  }\n});\n```\n\nThoughts @SlexAxton @Jakobud ?\n. It's all good in the hood.\n. Hey @crane-may, thanks for the pull! While this certainly will work in some cases, perhaps a better solution would be to additionally set `visibility` to `hidden` so while the element is floated, its not visible.\n. lol omg\n. @csillag The project is now deprecated. If you discover and issue with the new 2.0 release, please create a new issue. We won't be addressing issues from 1.5.\n. :thumbsup: \n. ",
    "alexisabril": "Great call on the tag rc, that version works fine for me cross browser in all regards. I apologize for not taking the time for looking for a fix, I'm just throwing out problems ;)\n. Great call on the tag rc, that version works fine for me cross browser in all regards. I apologize for not taking the time for looking for a fix, I'm just throwing out problems ;)\n. ",
    "tixvieira": "I've just tested the demo in version 1.0.2 and it always load each file twice.\nMy test was on IE8, FF3.6, Chrome 14.0.835.202.\nIn the Network area of each browser, appears the file loaded twice and the second file is not cached. When the first file completes loading, it starts again and always get a 200OK status.\n\nHope the explanation helps for the bug tracking.\n. I've just tested the demo in version 1.0.2 and it always load each file twice.\nMy test was on IE8, FF3.6, Chrome 14.0.835.202.\nIn the Network area of each browser, appears the file loaded twice and the second file is not cached. When the first file completes loading, it starts again and always get a 200OK status.\n\nHope the explanation helps for the bug tracking.\n. ",
    "mathiasbynens": "Closed by 3d80d8d2389fd28f6e94e4145000fa710bb72fef.\n. I can confirm this patch fixes the problem for me.\n. Closed by 3d80d8d2389fd28f6e94e4145000fa710bb72fef.\n. I can confirm this patch fixes the problem for me.\n. ",
    "mkoistinen": "Thanks for the super rapido fix!  I am curious why the version number wasn't advanced though.  I've posted a issue on the Moderizr hub to alert them that this is fixed and should go in there too.\n. Awesome, thanks!\n. Fair points!\n. I can confirm it also loads in IE8 and in IE8 in compatibility mode (possibly indicating it loads in IE7 too).  And, sadly, DD-belated-png causes JS errors in IE 8 (strangely though, not in IE8 in compatibility mode.)\n. OK, couple of things:\n- I believe I'm having this issue because the Yepnope that is embedded in Modernizr does NOT include any of the prefixes that are documented on the Yepnopejs.com site.\n- I have since minified yepnope.is-prefix.js and appended it to my Modernizr build.  Sadly, this doesn't appear to have any desired affect.  I would venture to guess that this prefix would need to be installed inside one of the closures inside of the minified Modernizr code.  Since custom Modernizr builds are only available in minified form, this is a rather difficult position that us users are put in.\n- Why does yepnope load a resource that is prefixed with a string it doesn't understand?  In particular, YN appears to load resources prefixed with \"ie6!\" if there is no prefix 'installed' to handle that?  That seems to be an important logic bug, eh?\n\nI would like to make these recommendations:\n- The documentation at yepnopejs.com should use clearer language about features that aren't actually installed in the build;  Language like \"Yepnope officially supports...\" is unclear at best;\n- Modernizr should at least allow a build option to include these optional prefixes; OR Yepnope plugins should be able to be appended to the minified Modernizr builds and still work;\n- To be honest, IE-, preload!- and css!-prefixes probably should just be part of the normal build.  I do realise that we can save a few bytes by not including them, but these are only a few bytes and since this is the preloader that yepnope users will be using, how would we go about loading the extra components that we require for yepnope itself?\n- Yepnope should not treat unknown prefixes as anything special, but instead consider it the URL as per normal.  Silently ignoring them seems dangerous.  As a developer, I would rather see 404's for resources like ie6!/js/dd-belated-png.min.js in my console.  It points directly to what the problem is.\n. Well, darn.  I was hoping to use Modernizr.load/Yepnope to lazyload virtually all my JS until after Document Ready, and yes, I would like this to be in parallel where possible.  (In this case, I don't need really need any part of front.js until after Document Ready, so, I think I'm doing this the right way for my case.)\n\nRe: \"You're example of what you're trying to do seems to go against the main point of yepnope, which is to load scripts in parallel\".  That's weird, I thought Yepnope's goal was to serve as a \"Conditional Loader for your Polyfills\"?  =) And, what is DD_belatedPNG if not one of the original polyfills? =)\n\nRe: \"Modernizr.load is not guaranteed to act exactly the same as yepnope in the future\".  This is precisely why I would prefer to use Modernizr.load vs. a separate Yepnope build directly and therefore, precisely why I would like support for IE prefixes built in, or as an optional part of the custom Modernizr builder.  Sadly, right now, we seem to be sitting across two stools.\n\nI know that there's a stigma, nowadays about browser sniffing in favor of feature detection.  I get that, 100%.  And, I wish there was a feature detect algorithm for 32-bit PNG support, but there's not (that I am aware of).  Until there is, we (web developers at large) need to know if we're on IE6.  To be honest, I think this should be in Modernizr more-so than in Yepnope.\n\nI can continue to use conditional scripts to load PNG support for IE6, but doing that ensures that, at least for IE6, DD_belatedPNG is a blocking load.  A hybrid approach, albeit ugly is:\n\n```\n<head>\n  ...\n  <script src=\"/js/modernizr.min.js\">\n  <!--[if IE 6]>\n  <script>\n    var ie6 = true;\n  </script>\n  <![endif]-->\n<body>\n  ...\n  <script>\n    yepnope({\n      test: window.ie6,\n      yep: \"/js/dd-belated-png.min.js\",\n      load: [ \n        \"/js/jquery-1.5+tinypubsub-0.6.min.js\"\n      ],\n      complete : function() {\n        $(function(){ yepnope(\"/js/front.min.js\"); });\n      }\n    });\n  </script>\n</body>\n```\n\nYou can imagine that this would get even uglier if, for some reason, I needed to detect other flavors of IE too.  But for now, this will suffice.\n\nThanks for the great tool!  I look forward to baking this deeper into the architecture of more projects.\n. Thanks, Slex, you're right of course and I do know this.\n\nSince I've posted the above, I have removed the $(function() {...}) from my complete block as I had deemed it safe to start loading front.js anytime after jQuery.  My reasoning before this change was based around not loading anything until the page is visually complete so as not to delay anything loading that is required for the visual \"ready\".  Since front.js is the last thing loaded, I can safely assume that at worse, it may download in parallel with some of images, but would never block them.  Currently this whole visually page loads in about 500ms from a server on the other side of the Atlantic, which is fantastic for this site.  Another 2-3 seconds of JS will continue to execute preloading more content that is offscreen and behaviours that aren't required right away.  I'm quite pleased with this, and Yepnope is a nice part of this, thank you.\n\nBeyond that, I don't think I should be loading any of front.js until I am certain that jQuery is available, as everything in there is within self-running closures that require jQuery as parameter.  I suppose I could preload it, but then I would need the preload! prefix now wouldn't I? =)\n\nMy main focus for this thread, however, is loading DD_belatedPNG in the right circumstances.  And, while I have a workable solution now, I was hoping to convince either the folks at Yepnope or Modernizr to include IE-detection in their respective libraries.  I can easily write my own (or just use the cond. comments as per above), but I'm not building a single webpage, but a whole, very large website, and I'm looking after getting the right mix of COTS components that I know will continue to be maintained and don't require a lot of customization over the coming months/years.\n\nModernizr, the only thing I want loaded in < head > (as it was intended) is where IE detection should reside.  Yepnope already has this capability, but sadly as a plugin, which is not included in Modernizr, nor is it an installable option.  Darn the luck.\n. I just tried it all again, and it is working fine.  My trouble before was that after my minification process, there was no preceding semicolon before the plugin's closure.   I should have paid more attention before.  Thanks!\n. Seems to be OK in Opera v10 & v11.  The above is failing in Opera v9.64 though.  Not a huge deal, this should represent less than 0.1% of the population.\n. Sorry, looks like this may be a repeat of #55.\n. Thanks for the super rapido fix!  I am curious why the version number wasn't advanced though.  I've posted a issue on the Moderizr hub to alert them that this is fixed and should go in there too.\n. Awesome, thanks!\n. Fair points!\n. I can confirm it also loads in IE8 and in IE8 in compatibility mode (possibly indicating it loads in IE7 too).  And, sadly, DD-belated-png causes JS errors in IE 8 (strangely though, not in IE8 in compatibility mode.)\n. OK, couple of things:\n- I believe I'm having this issue because the Yepnope that is embedded in Modernizr does NOT include any of the prefixes that are documented on the Yepnopejs.com site.\n- I have since minified yepnope.is-prefix.js and appended it to my Modernizr build.  Sadly, this doesn't appear to have any desired affect.  I would venture to guess that this prefix would need to be installed inside one of the closures inside of the minified Modernizr code.  Since custom Modernizr builds are only available in minified form, this is a rather difficult position that us users are put in.\n- Why does yepnope load a resource that is prefixed with a string it doesn't understand?  In particular, YN appears to load resources prefixed with \"ie6!\" if there is no prefix 'installed' to handle that?  That seems to be an important logic bug, eh?\n\nI would like to make these recommendations:\n- The documentation at yepnopejs.com should use clearer language about features that aren't actually installed in the build;  Language like \"Yepnope officially supports...\" is unclear at best;\n- Modernizr should at least allow a build option to include these optional prefixes; OR Yepnope plugins should be able to be appended to the minified Modernizr builds and still work;\n- To be honest, IE-, preload!- and css!-prefixes probably should just be part of the normal build.  I do realise that we can save a few bytes by not including them, but these are only a few bytes and since this is the preloader that yepnope users will be using, how would we go about loading the extra components that we require for yepnope itself?\n- Yepnope should not treat unknown prefixes as anything special, but instead consider it the URL as per normal.  Silently ignoring them seems dangerous.  As a developer, I would rather see 404's for resources like ie6!/js/dd-belated-png.min.js in my console.  It points directly to what the problem is.\n. Well, darn.  I was hoping to use Modernizr.load/Yepnope to lazyload virtually all my JS until after Document Ready, and yes, I would like this to be in parallel where possible.  (In this case, I don't need really need any part of front.js until after Document Ready, so, I think I'm doing this the right way for my case.)\n\nRe: \"You're example of what you're trying to do seems to go against the main point of yepnope, which is to load scripts in parallel\".  That's weird, I thought Yepnope's goal was to serve as a \"Conditional Loader for your Polyfills\"?  =) And, what is DD_belatedPNG if not one of the original polyfills? =)\n\nRe: \"Modernizr.load is not guaranteed to act exactly the same as yepnope in the future\".  This is precisely why I would prefer to use Modernizr.load vs. a separate Yepnope build directly and therefore, precisely why I would like support for IE prefixes built in, or as an optional part of the custom Modernizr builder.  Sadly, right now, we seem to be sitting across two stools.\n\nI know that there's a stigma, nowadays about browser sniffing in favor of feature detection.  I get that, 100%.  And, I wish there was a feature detect algorithm for 32-bit PNG support, but there's not (that I am aware of).  Until there is, we (web developers at large) need to know if we're on IE6.  To be honest, I think this should be in Modernizr more-so than in Yepnope.\n\nI can continue to use conditional scripts to load PNG support for IE6, but doing that ensures that, at least for IE6, DD_belatedPNG is a blocking load.  A hybrid approach, albeit ugly is:\n\n```\n<head>\n  ...\n  <script src=\"/js/modernizr.min.js\">\n  <!--[if IE 6]>\n  <script>\n    var ie6 = true;\n  </script>\n  <![endif]-->\n<body>\n  ...\n  <script>\n    yepnope({\n      test: window.ie6,\n      yep: \"/js/dd-belated-png.min.js\",\n      load: [ \n        \"/js/jquery-1.5+tinypubsub-0.6.min.js\"\n      ],\n      complete : function() {\n        $(function(){ yepnope(\"/js/front.min.js\"); });\n      }\n    });\n  </script>\n</body>\n```\n\nYou can imagine that this would get even uglier if, for some reason, I needed to detect other flavors of IE too.  But for now, this will suffice.\n\nThanks for the great tool!  I look forward to baking this deeper into the architecture of more projects.\n. Thanks, Slex, you're right of course and I do know this.\n\nSince I've posted the above, I have removed the $(function() {...}) from my complete block as I had deemed it safe to start loading front.js anytime after jQuery.  My reasoning before this change was based around not loading anything until the page is visually complete so as not to delay anything loading that is required for the visual \"ready\".  Since front.js is the last thing loaded, I can safely assume that at worse, it may download in parallel with some of images, but would never block them.  Currently this whole visually page loads in about 500ms from a server on the other side of the Atlantic, which is fantastic for this site.  Another 2-3 seconds of JS will continue to execute preloading more content that is offscreen and behaviours that aren't required right away.  I'm quite pleased with this, and Yepnope is a nice part of this, thank you.\n\nBeyond that, I don't think I should be loading any of front.js until I am certain that jQuery is available, as everything in there is within self-running closures that require jQuery as parameter.  I suppose I could preload it, but then I would need the preload! prefix now wouldn't I? =)\n\nMy main focus for this thread, however, is loading DD_belatedPNG in the right circumstances.  And, while I have a workable solution now, I was hoping to convince either the folks at Yepnope or Modernizr to include IE-detection in their respective libraries.  I can easily write my own (or just use the cond. comments as per above), but I'm not building a single webpage, but a whole, very large website, and I'm looking after getting the right mix of COTS components that I know will continue to be maintained and don't require a lot of customization over the coming months/years.\n\nModernizr, the only thing I want loaded in < head > (as it was intended) is where IE detection should reside.  Yepnope already has this capability, but sadly as a plugin, which is not included in Modernizr, nor is it an installable option.  Darn the luck.\n. I just tried it all again, and it is working fine.  My trouble before was that after my minification process, there was no preceding semicolon before the plugin's closure.   I should have paid more attention before.  Thanks!\n. Seems to be OK in Opera v10 & v11.  The above is failing in Opera v9.64 though.  Not a huge deal, this should represent less than 0.1% of the population.\n. Sorry, looks like this may be a repeat of #55.\n. ",
    "miketaylr": "There are so few Opera 9 users in the wild I wouldn't spend very much time on this...\n. There are so few Opera 9 users in the wild I wouldn't spend very much time on this...\n. ",
    "miljan-aleksic": "Hmm, seems working now. Seems some problem on my script. Anyway thanks, really great job!\n. Hmm, seems working now. Seems some problem on my script. Anyway thanks, really great job!\n. ",
    "aFarkas": "+1 for this feature in next \"major\" release\n\nI have refactored webshims lib to use third party scriptloaders like yepnope or requirejs and I noticed a very small additional FOUC using yepnope in FF4, which isn't there if I'm using requirejs. \n\nI know scriptloaders can always produce FOUC's, but this is special to the way yepnope is doing his preload and ordered execution. (Haven't looked deep into this fouc issue, but i think it's by design).\n\nDue to the fact, that webshims lib has its own mechanism for ordering execution (similiar to requirejs), the current way isn't needed and I would welcome a simple injectJS method.\n. Can you give us some feedback, about the current state of this feature and the new version 1.1. For me it's not only critical for loading non-cacheable scripts, but also for loading and executing scripts in parallel without any specific order.\n. great news thanks.\n. Head or bottom:\nActually, I really dislike this answer. Modern browsers can load JS without blocking other downloads, but they still block the visual rendering. If you are using yepnope or any other script loader neither downloading other resources nor rendering the page is blocked. \n\nThe only difference between putting in head and putting @bottom is, that if you are calling yepnope from head the scripts are loaded in front of other resources, which means your behavior is faster attached as content images and css images. If you put it @ bottom, first content images are loaded and then your scripts. What is best for you, really depends on what you are doing. If you have a lightbox, it is fine to put @bottom, if you are using tabs or accordions, it might be better to use from head. And if your site doesn't work without JS, you should really start your scripts as soon as possible. (There is also another technique to call scripts right after the header of website...).\n\ncombined or uncombined:\nI think the answer above already gives you some hint for this. If both scripts are really small, you should combine them to minimize request, if they are not small (above 20kb) it is ok to not combine, because the download can be parallelized.\n\nI also would suggest, that you simply try it and look into your network panel of Firefox and decide yourself, what is important, what is better in case of your site. (I really like AOL Pagetest for IE8 to look the network waterfall).\n. +1 for this feature in next \"major\" release\n\nI have refactored webshims lib to use third party scriptloaders like yepnope or requirejs and I noticed a very small additional FOUC using yepnope in FF4, which isn't there if I'm using requirejs. \n\nI know scriptloaders can always produce FOUC's, but this is special to the way yepnope is doing his preload and ordered execution. (Haven't looked deep into this fouc issue, but i think it's by design).\n\nDue to the fact, that webshims lib has its own mechanism for ordering execution (similiar to requirejs), the current way isn't needed and I would welcome a simple injectJS method.\n. Can you give us some feedback, about the current state of this feature and the new version 1.1. For me it's not only critical for loading non-cacheable scripts, but also for loading and executing scripts in parallel without any specific order.\n. great news thanks.\n. Head or bottom:\nActually, I really dislike this answer. Modern browsers can load JS without blocking other downloads, but they still block the visual rendering. If you are using yepnope or any other script loader neither downloading other resources nor rendering the page is blocked. \n\nThe only difference between putting in head and putting @bottom is, that if you are calling yepnope from head the scripts are loaded in front of other resources, which means your behavior is faster attached as content images and css images. If you put it @ bottom, first content images are loaded and then your scripts. What is best for you, really depends on what you are doing. If you have a lightbox, it is fine to put @bottom, if you are using tabs or accordions, it might be better to use from head. And if your site doesn't work without JS, you should really start your scripts as soon as possible. (There is also another technique to call scripts right after the header of website...).\n\ncombined or uncombined:\nI think the answer above already gives you some hint for this. If both scripts are really small, you should combine them to minimize request, if they are not small (above 20kb) it is ok to not combine, because the download can be parallelized.\n\nI also would suggest, that you simply try it and look into your network panel of Firefox and decide yourself, what is important, what is better in case of your site. (I really like AOL Pagetest for IE8 to look the network waterfall).\n. ",
    "deleteme": "Cool. I may try replacing labjs with yepnope in my project. If I do, I'll let you know how it goes.\n. :heart:\n. Here is a page that is demonstrating the problem for me with the latest Chrome Dev Build.\n\nhttp://jsbin.com/ibeva5/5\n\nScreenshot of problem: http://grab.by/grabs/ea32978c06c2c81be5d1cdaecac80c50.png\n\nThe page is inlining yepnope, and then loading the Google JSAPI after the window load event.\n. And here's a screenshot of it on yepnopejs.com: http://grab.by/grabs/ba930f7b103315ef86cccd6715740d1b.png\n\nI believe the Script panel worked the first time, then upon subsequent views of the page, the panel doesn't work.\n. If there was a way to disable the preloading functionality, could that be used to get around this problem while in development?\n. Cool. I may try replacing labjs with yepnope in my project. If I do, I'll let you know how it goes.\n. :heart:\n. Here is a page that is demonstrating the problem for me with the latest Chrome Dev Build.\n\nhttp://jsbin.com/ibeva5/5\n\nScreenshot of problem: http://grab.by/grabs/ea32978c06c2c81be5d1cdaecac80c50.png\n\nThe page is inlining yepnope, and then loading the Google JSAPI after the window load event.\n. And here's a screenshot of it on yepnopejs.com: http://grab.by/grabs/ba930f7b103315ef86cccd6715740d1b.png\n\nI believe the Script panel worked the first time, then upon subsequent views of the page, the panel doesn't work.\n. If there was a way to disable the preloading functionality, could that be used to get around this problem while in development?\n. ",
    "gtraxx": "ok I'll use getJson, for the moment I test yepnodes\nBest regards\n. ok I'll use getJson, for the moment I test yepnodes\nBest regards\n. ",
    "paulirish": "dicks\n. `test : jQuery('body').hasClass('home')` will do the trick\n. @freshwinded can you make a PR?\n. this is to address #113 \n. dicks\n. `test : jQuery('body').hasClass('home')` will do the trick\n. @freshwinded can you make a PR?\n. this is to address #113 \n. ",
    "TylerBrinks": "got it - makes sense.  There's still a reference to ../filters/yepnope.autoprotocol.js in the /tests/index.html file which is why I assumed it was missing in the first place.\n. got it - makes sense.  There's still a reference to ../filters/yepnope.autoprotocol.js in the /tests/index.html file which is why I assumed it was missing in the first place.\n. ",
    "aronduby": "http://client.grcmc.org/wip/rmf/apply/yn_test.php\n\nI'll try and put together something more specific up on jsfiddle later on, but for now here's where I'm been working on it. There's one yepnope called on document ready, then each section can have it's own yepnope call, triggered when it loads in. The system that loads the sections and triggers the yepnope handles caching callbacks to avoid sending duplicate requests because this was happening if if I turned allow duplicates to false in the LAB chain.\n\nTo get the issue to trigger use the next button (or jump to) to get over to the narrative. As soon as that is loaded you should see the spinner. The other option you have is using console to trigger another yepnope call once the initial spot is done. Here's what I use since I know the script doesn't result in 404.\n\n```\n      yepnope([ {test:true, yep:['js/yn_test.js']} ])\n```\n\nThe system for handling the yepnope calls\n        // check if we've already loaded the form yepnope\n        if(this.loaded_yepnope['form'] != undefined){\n            // check if it's an array (will be null if there's no resources)\n            // and if so loop through and check if it's a function, and call it\n            if($.isArray(this.loaded_yepnope['form'])){\n                $.each(this.loaded_yepnope['form'], function(){\n                    prop_to_check = this.test == true ? 'yep' : 'nope';\n                    if($.isArray(this[prop_to_check]) && $.isFunction(this.callback))\n                        this.callback.call();\n                });\n            }\n        } else {\n            $.merge(resources, this.yepnope_resources);\n            this.loaded_yepnope['form'] = this.yepnope_resources;\n        }\n\n```\n    // same as above but for the current section\n    if(this.loaded_yepnope[this.section.name] != undefined){\n        if($.isArray(this.loaded_yepnope[this.section.name])){\n            $.each(this.loaded_yepnope[this.section.name], function(){\n                prop_to_check = this.test == true ? 'yep' : 'nope';\n                if($.isArray(this[prop_to_check]) && $.isFunction(this.callback))\n                    this.callback.call();\n            });\n        }\n    } else {\n        if($.isFunction(this.section.getYepnopeResources)){\n            s_yepnope = this.section.getYepnopeResources();\n            $.merge(resources, s_yepnope);\n        } else {\n            // if there's no getYepnopeResources function, set it to null to not have to deal with it again\n            s_yepnope = null;\n        }\n        this.loaded_yepnope[this.section.name] = s_yepnope;\n    }\n\n\n    //if(this.debug)\n        console.log('yepnope resources:', resources);\n\n    // and now load\n    if(resources.length)\n        yepnope(resources);\n```\n. sorry, had to pull the bug from the link I have listed, stupid clients, always wanting stuff bug-free :). I'll get something up probably later this week.\n. http://client.grcmc.org/wip/rmf/apply/yn_test.php\n\nI'll try and put together something more specific up on jsfiddle later on, but for now here's where I'm been working on it. There's one yepnope called on document ready, then each section can have it's own yepnope call, triggered when it loads in. The system that loads the sections and triggers the yepnope handles caching callbacks to avoid sending duplicate requests because this was happening if if I turned allow duplicates to false in the LAB chain.\n\nTo get the issue to trigger use the next button (or jump to) to get over to the narrative. As soon as that is loaded you should see the spinner. The other option you have is using console to trigger another yepnope call once the initial spot is done. Here's what I use since I know the script doesn't result in 404.\n\n```\n      yepnope([ {test:true, yep:['js/yn_test.js']} ])\n```\n\nThe system for handling the yepnope calls\n        // check if we've already loaded the form yepnope\n        if(this.loaded_yepnope['form'] != undefined){\n            // check if it's an array (will be null if there's no resources)\n            // and if so loop through and check if it's a function, and call it\n            if($.isArray(this.loaded_yepnope['form'])){\n                $.each(this.loaded_yepnope['form'], function(){\n                    prop_to_check = this.test == true ? 'yep' : 'nope';\n                    if($.isArray(this[prop_to_check]) && $.isFunction(this.callback))\n                        this.callback.call();\n                });\n            }\n        } else {\n            $.merge(resources, this.yepnope_resources);\n            this.loaded_yepnope['form'] = this.yepnope_resources;\n        }\n\n```\n    // same as above but for the current section\n    if(this.loaded_yepnope[this.section.name] != undefined){\n        if($.isArray(this.loaded_yepnope[this.section.name])){\n            $.each(this.loaded_yepnope[this.section.name], function(){\n                prop_to_check = this.test == true ? 'yep' : 'nope';\n                if($.isArray(this[prop_to_check]) && $.isFunction(this.callback))\n                    this.callback.call();\n            });\n        }\n    } else {\n        if($.isFunction(this.section.getYepnopeResources)){\n            s_yepnope = this.section.getYepnopeResources();\n            $.merge(resources, s_yepnope);\n        } else {\n            // if there's no getYepnopeResources function, set it to null to not have to deal with it again\n            s_yepnope = null;\n        }\n        this.loaded_yepnope[this.section.name] = s_yepnope;\n    }\n\n\n    //if(this.debug)\n        console.log('yepnope resources:', resources);\n\n    // and now load\n    if(resources.length)\n        yepnope(resources);\n```\n. sorry, had to pull the bug from the link I have listed, stupid clients, always wanting stuff bug-free :). I'll get something up probably later this week.\n. ",
    "voodoo6": "So simple, I'm still a beginner with Javascript/JQuery and still don't know why I think things should always be so complicated! Thanks Paul..\n\n(also, thats officially the fastest reply to a comment I've ever received :)\n. Maybe not so simple :(\n\nThanks SlexAxton - I do see your points - although writing a module sounds much more complicated than this simple method!\n\nMy sites on a wordpress install - I was just researching ways of doing what I need and came across yepnope - I'll have a little look around for serverside stuff, though you're right - doesn't seem as sexy!\n. So simple, I'm still a beginner with Javascript/JQuery and still don't know why I think things should always be so complicated! Thanks Paul..\n\n(also, thats officially the fastest reply to a comment I've ever received :)\n. Maybe not so simple :(\n\nThanks SlexAxton - I do see your points - although writing a module sounds much more complicated than this simple method!\n\nMy sites on a wordpress install - I was just researching ways of doing what I need and came across yepnope - I'll have a little look around for serverside stuff, though you're right - doesn't seem as sexy!\n. ",
    "tmikaeld": "Hello,\n\nI'm trying to load an additional jQuery plugin from the html page (body), but since i'm loading jQuery in the head, the yepnope load in the body will be ready before jQuery is. Is there any way i can resolve that?\n. Has this issue been fixed?\n\nI just noticed it yesterday and it was just luck i found this issue reported, kind of have a site to launch and it depends on this function working.\n\nAny one know what version of yepnope this still works with?\n. Hello,\n\nI'm trying to load an additional jQuery plugin from the html page (body), but since i'm loading jQuery in the head, the yepnope load in the body will be ready before jQuery is. Is there any way i can resolve that?\n. Has this issue been fixed?\n\nI just noticed it yesterday and it was just luck i found this issue reported, kind of have a site to launch and it depends on this function working.\n\nAny one know what version of yepnope this still works with?\n. ",
    "codler": "No, I were thinking of the \"yepnope.addPrefix\"-function :P \n\nThe prefixes-folder is self-explaining. :)\n. `yepnope.addPrefix = function ( prefix, callback ) { prefixes[ prefix ] = callback; };`\n\nWhen you add a prefix by using this function it adds to the \"prefixes\" variable\n\nBut you can't access the \"prefixes\"-variable outside yepnope. Could you make it accessible?\n. I dont want to modify, only list them.\nFor example if I want to use ielt9 prefix\n`yepnope({ load: 'ielt9!some-file.js' });`\n\nand if I forget to include yepnope.ie-prefix.js-file then it would always load some-file.js. That is why I want to be able to see which prefixes are defined.\n. No, I were thinking of the \"yepnope.addPrefix\"-function :P \n\nThe prefixes-folder is self-explaining. :)\n. `yepnope.addPrefix = function ( prefix, callback ) { prefixes[ prefix ] = callback; };`\n\nWhen you add a prefix by using this function it adds to the \"prefixes\" variable\n\nBut you can't access the \"prefixes\"-variable outside yepnope. Could you make it accessible?\n. I dont want to modify, only list them.\nFor example if I want to use ielt9 prefix\n`yepnope({ load: 'ielt9!some-file.js' });`\n\nand if I forget to include yepnope.ie-prefix.js-file then it would always load some-file.js. That is why I want to be able to see which prefixes are defined.\n. ",
    "sirbarrence": "Just FYI for anyone that finds this issue and is having trouble getting this to work with an older version of yepnope (perhaps embedded in Modernizr):\n\nIn yepnope prior to d0c44e4 the final complete call will probably run immediately, i.e. before other files load - so it's not the final call you desire. d0c44e4 seems to fix this.\n\nRelated to #96 and #100.\n. @twome I think I manually patched my copy of modernizr.js with d0c44e4. I didn't need to import yepnope separately. But I probably did have to minify my modified modernizr myself. (mouthful) \n. Just FYI for anyone that finds this issue and is having trouble getting this to work with an older version of yepnope (perhaps embedded in Modernizr):\n\nIn yepnope prior to d0c44e4 the final complete call will probably run immediately, i.e. before other files load - so it's not the final call you desire. d0c44e4 seems to fix this.\n\nRelated to #96 and #100.\n. @twome I think I manually patched my copy of modernizr.js with d0c44e4. I didn't need to import yepnope separately. But I probably did have to minify my modified modernizr myself. (mouthful) \n. ",
    "dergachev": "I hit this as well, see my writeup in http://stackoverflow.com/a/16487063/9621\nIt's unfortunate that 1.5 hasn't been updated in a year. Hope 2.0 comes out soon!\n. I hit this as well, see my writeup in http://stackoverflow.com/a/16487063/9621\nIt's unfortunate that 1.5 hasn't been updated in a year. Hope 2.0 comes out soon!\n. ",
    "twome": "Motherf-\n\n_exhale_\n\nSo that's why. Thanks, @dergachev. Modernizr is the first and only library I load outside of Modernizr.load - I guess the solution to this to replace my Modernizr build with a version sans yepnope, and add a second `<script>` for the up-to-date solo version of yepnope?\n\nEdit: Worked a charm; thanks so much for pointing this out - I don't know why I assumed it was intended behaviour, given that the docs on `complete` were all pretty clearly worded.\n. Ahaha, indeed! I might do the same and save yepnope's extra initial HTTP request.\n. Motherf-\n\n_exhale_\n\nSo that's why. Thanks, @dergachev. Modernizr is the first and only library I load outside of Modernizr.load - I guess the solution to this to replace my Modernizr build with a version sans yepnope, and add a second `<script>` for the up-to-date solo version of yepnope?\n\nEdit: Worked a charm; thanks so much for pointing this out - I don't know why I assumed it was intended behaviour, given that the docs on `complete` were all pretty clearly worded.\n. Ahaha, indeed! I might do the same and save yepnope's extra initial HTTP request.\n. ",
    "betalb": "My only use-case, for now \u2014 preloading translations.\n. My only use-case, for now \u2014 preloading translations.\n. ",
    "arestov": "+1\nI must support some old project with windows-1251 encoding, but I use*.js with utf-8 encoding. Possibility to set charset will save me\n. this will be best! :)\n. +1\nI must support some old project with windows-1251 encoding, but I use*.js with utf-8 encoding. Possibility to set charset will save me\n. this will be best! :)\n. ",
    "forresto": "I see. I also noticed that yepnope'ing the jquery ui css can hold things up for 10 seconds or so. Is it waiting for all of the images as well?\n\n```\nyepnope('http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/themes/eggplant/jquery-ui.css');\n```\n. How is that 1.1 coming for this issue?\n. I see. I also noticed that yepnope'ing the jquery ui css can hold things up for 10 seconds or so. Is it waiting for all of the images as well?\n\n```\nyepnope('http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/themes/eggplant/jquery-ui.css');\n```\n. How is that 1.1 coming for this issue?\n. ",
    "unjust": "The only drawback I see to Chrome's warnings is that I am unable to set breakpoints in my js code to debug :\\\n. I don't understand how this change makes the build fail. Would be nice to have this merged in...\n. The only drawback I see to Chrome's warnings is that I am unable to set breakpoints in my js code to debug :\\\n. I don't understand how this change makes the build fail. Would be nice to have this merged in...\n. ",
    "anselmh": "My console says: \"uncaught ReferenceError: $ is not defined\" when calling a jQuery action. I use this code:\n\n```\nyepnope([{\n    load: '//code.jquery.com/jquery-1.6.1.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('[[++base_url]]assets/templates/main/js/libs/jquery-1.6.1.min.js');\n        }\n    }\n}, {\n    load: ['[[++base_url]]assets/templates/main/js/plugins.js', '[[++base_url]]assets/templates/main/js/scripts.js'  ]\n}]);\n```\n\nIf I simulate CDN is down (no internet connection or wrong URL) I get these errors. jQuery is loaded, I get the error message that it's interpreted as image but is js\u2026\nUsed Chrome + Firefox.\n\nAny suggestions?\n. My console says: \"uncaught ReferenceError: $ is not defined\" when calling a jQuery action. I use this code:\n\n```\nyepnope([{\n    load: '//code.jquery.com/jquery-1.6.1.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('[[++base_url]]assets/templates/main/js/libs/jquery-1.6.1.min.js');\n        }\n    }\n}, {\n    load: ['[[++base_url]]assets/templates/main/js/plugins.js', '[[++base_url]]assets/templates/main/js/scripts.js'  ]\n}]);\n```\n\nIf I simulate CDN is down (no internet connection or wrong URL) I get these errors. jQuery is loaded, I get the error message that it's interpreted as image but is js\u2026\nUsed Chrome + Firefox.\n\nAny suggestions?\n. ",
    "JasonGiedymin": "@smooth-graphics instead of using `complete`, try `callback`. This way when jquery is trying to be loaded it tests to see if it even exists. When it does not, you then try to load the fallback alternative. You may also want to play around with `errorTimeout` as I believe the default timeout is too long (10 seconds?) before it loads the fallback.\n\n## Sample snippet\n\n```\nscripts = {\n    'jQuery': '//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js'\n    ,'jQuery_fallback': '/js/lib/jquery-1.6.2.min.js'\n}\n\nyepnope([{\n...\ncallback: function (url, result, key) {\n            if (url === scripts.jQuery) {\n                if (!window.jQuery) {\n                    Modernizr.load(scripts.jQuery_fallback);\n                    console.log(\"Detected Google API errors, loading jQuery from our servers instead.\");\n                }\n            }\n        }\n....\n```\n. \"This is intended because we images to preload resources certain versions of webkit in yepnope.\".\n\nWhy only certain versions? And why?\n. It has been a while since I've used yepnope but lets see what I can muster. Callback is run after each script is 'loaded' or 'acted' upon. The complete event happens only after when all scripts have loaded. If your trying to load scripts that rely on jQuery you want to load your fallback right away so that you can continue and load your scripts. Waiting until the end won't be helpful.\n. The issue here is that when in chrome it uses the image loader and will show up as such. It behaves differently.\n\nPlease post a new issue if you feel there us a bug.\n\n-Jason\n\nOn Aug 20, 2012, at 7:57 PM, baloneysandwiches notifications@github.com wrote:\n\n> Well, it seems like the whole point of this is to decouple \"loading\" and \"acting upon,\" aka execution. Those two things are not the same, right? If you're not doing any feature tests, just loading in sequence, it's my understanding that both callback and complete script sets happen after both the loading and the execution of any scripts nested in a load object in the same block. A script listed in a complete object doesn't wait until the execution of every single script on the entire page. If there are both callback and complete script sets, then the complete will run after the callback. But if you're using just one of the two, I really don't see the difference.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Kinda like a hack\n\n-Jason\n\nOn Dec 19, 2012, at 6:25 PM, baloneysandwiches notifications@github.com wrote:\n\n> Yeah I figured that out. I'm actually just curious about the how and why?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Guys lets relax. If you truly believe something should be changed you have the right to fork. And if there is enough community support around any particular issue I would hope that the src owner accept some dialogue, but these things take time. Either way there is a solution for everyone. And lets not forget to not bit the hand that feeds us eh?\n. @smooth-graphics instead of using `complete`, try `callback`. This way when jquery is trying to be loaded it tests to see if it even exists. When it does not, you then try to load the fallback alternative. You may also want to play around with `errorTimeout` as I believe the default timeout is too long (10 seconds?) before it loads the fallback.\n\n## Sample snippet\n\n```\nscripts = {\n    'jQuery': '//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js'\n    ,'jQuery_fallback': '/js/lib/jquery-1.6.2.min.js'\n}\n\nyepnope([{\n...\ncallback: function (url, result, key) {\n            if (url === scripts.jQuery) {\n                if (!window.jQuery) {\n                    Modernizr.load(scripts.jQuery_fallback);\n                    console.log(\"Detected Google API errors, loading jQuery from our servers instead.\");\n                }\n            }\n        }\n....\n```\n. \"This is intended because we images to preload resources certain versions of webkit in yepnope.\".\n\nWhy only certain versions? And why?\n. It has been a while since I've used yepnope but lets see what I can muster. Callback is run after each script is 'loaded' or 'acted' upon. The complete event happens only after when all scripts have loaded. If your trying to load scripts that rely on jQuery you want to load your fallback right away so that you can continue and load your scripts. Waiting until the end won't be helpful.\n. The issue here is that when in chrome it uses the image loader and will show up as such. It behaves differently.\n\nPlease post a new issue if you feel there us a bug.\n\n-Jason\n\nOn Aug 20, 2012, at 7:57 PM, baloneysandwiches notifications@github.com wrote:\n\n> Well, it seems like the whole point of this is to decouple \"loading\" and \"acting upon,\" aka execution. Those two things are not the same, right? If you're not doing any feature tests, just loading in sequence, it's my understanding that both callback and complete script sets happen after both the loading and the execution of any scripts nested in a load object in the same block. A script listed in a complete object doesn't wait until the execution of every single script on the entire page. If there are both callback and complete script sets, then the complete will run after the callback. But if you're using just one of the two, I really don't see the difference.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Kinda like a hack\n\n-Jason\n\nOn Dec 19, 2012, at 6:25 PM, baloneysandwiches notifications@github.com wrote:\n\n> Yeah I figured that out. I'm actually just curious about the how and why?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Guys lets relax. If you truly believe something should be changed you have the right to fork. And if there is enough community support around any particular issue I would hope that the src owner accept some dialogue, but these things take time. Either way there is a solution for everyone. And lets not forget to not bit the hand that feeds us eh?\n. ",
    "vdh": "It would have been nice if these _intentional_ errors had been mentioned in yepnope's documentation somewhere, before I tried to debug them thinking I had made a mistake.\n. It would have been nice if these _intentional_ errors had been mentioned in yepnope's documentation somewhere, before I tried to debug them thinking I had made a mistake.\n. ",
    "albell": "+1 for adding this explanation to the docs. It's confusing to encounter as a newb. Tell the people up front, please!\n\n@JasonGiedymin What is different about `callback` versus  `complete` exactly? The `if (!window.jQuery)` call is the same either way. The docs make no clear distinction. Can you possibly explain?\n. Well, it seems like the whole point of this is to decouple \"loading\" and \"acting upon (aka _execution_)\" . Those two things are not the same, right? If you're not doing any feature tests, just loading in sequence, it's my understanding that both `callback` and `complete` script sets happen after both the loading and the execution of any scripts nested in a `load` object in the same block. A script listed in a `complete` object doesn't wait until the execution of every single script on the entire page. If there are both `callback` and `complete` script sets, then the `complete` will run after the callback. But if you're using just one of the two, I really don't see the difference.\n. :) ok, ok! Just out of curiousity--Alex can you actually explain what Ralph meant when he said \"This is intended because we images to preload resources certain versions of webkit in yepnope.\" I'm not nitpicking about the grammar--I'm actually trying to understand how yepnope works. \"Images\" of what?\n. Yeah I figured that out. I'm actually just curious about the how and why?\n. +1 for adding this explanation to the docs. It's confusing to encounter as a newb. Tell the people up front, please!\n\n@JasonGiedymin What is different about `callback` versus  `complete` exactly? The `if (!window.jQuery)` call is the same either way. The docs make no clear distinction. Can you possibly explain?\n. Well, it seems like the whole point of this is to decouple \"loading\" and \"acting upon (aka _execution_)\" . Those two things are not the same, right? If you're not doing any feature tests, just loading in sequence, it's my understanding that both `callback` and `complete` script sets happen after both the loading and the execution of any scripts nested in a `load` object in the same block. A script listed in a `complete` object doesn't wait until the execution of every single script on the entire page. If there are both `callback` and `complete` script sets, then the `complete` will run after the callback. But if you're using just one of the two, I really don't see the difference.\n. :) ok, ok! Just out of curiousity--Alex can you actually explain what Ralph meant when he said \"This is intended because we images to preload resources certain versions of webkit in yepnope.\" I'm not nitpicking about the grammar--I'm actually trying to understand how yepnope works. \"Images\" of what?\n. Yeah I figured that out. I'm actually just curious about the how and why?\n. ",
    "montlebalm": "So the solution to the warnings is to turn warnings off? Sounds legit.\n. @SlexAxton So someone comments about a hacky workaround and you reply with an ad hominem attack? You sound like a real stand up guy.\n\nI don't expect users to notice warnings on websites they visit. I do expect developers to be annoyed by constant pollution of the console. Turning off warnings is not a savvy solution for developers (i.e., people consuming your code).\n. @JasonGiedymin Agreed.\n\n@SlexAxton  Yepnope is great. If the warnings are a necessary part of the implementation they should stay. However, I think they should be removed if at all possible for developer's sake.\n. So the solution to the warnings is to turn warnings off? Sounds legit.\n. @SlexAxton So someone comments about a hacky workaround and you reply with an ad hominem attack? You sound like a real stand up guy.\n\nI don't expect users to notice warnings on websites they visit. I do expect developers to be annoyed by constant pollution of the console. Turning off warnings is not a savvy solution for developers (i.e., people consuming your code).\n. @JasonGiedymin Agreed.\n\n@SlexAxton  Yepnope is great. If the warnings are a necessary part of the implementation they should stay. However, I think they should be removed if at all possible for developer's sake.\n. ",
    "hocine": "What the heck, is there any solution for this? It's irksome.\n\n![Screenshot from 2012-12-24 17:57:44](https://f.cloud.github.com/assets/36092/30125/621052a0-4e1d-11e2-8409-1702273fde82.png)\n. This would be great.\n. What the heck, is there any solution for this? It's irksome.\n\n![Screenshot from 2012-12-24 17:57:44](https://f.cloud.github.com/assets/36092/30125/621052a0-4e1d-11e2-8409-1702273fde82.png)\n. This would be great.\n. ",
    "nattarnoff": "I know this issue is closed and old, but while I understand they can be ignored, I can't get my QA and Stakeholders to sign off on projects with JS errors showing up. An explanation of why they are used so I can look to see if I need to fork it would have been nice.\n. My bad in saying errors. Company policy is no shipping with errors,\nwarnings, issues in any public facing product. I have also communicated\nwhat documentation is available on the topic, with no avail.\n\nOn Sat, Feb 2, 2013 at 10:39 AM, Ralph Holzmann notifications@github.comwrote:\n\n> Tell them they're not errors, because they're not, they're warnings.\n> \n> On Feb 2, 2013, at 10:33 AM, Greg Tarnoff notifications@github.com\n> wrote:\n> \n> > I know this issue is closed and old, but while I understand they can be\n> > ignored, I can't get my QA and Stakeholders to sign off on projects with JS\n> > errors showing up. An explanation of why they are used so I can look to see\n> > if I need to fork it would have been nice.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SlexAxton/yepnope.js/issues/32#issuecomment-13033168.\n. I know this issue is closed and old, but while I understand they can be ignored, I can't get my QA and Stakeholders to sign off on projects with JS errors showing up. An explanation of why they are used so I can look to see if I need to fork it would have been nice.\n. My bad in saying errors. Company policy is no shipping with errors,\nwarnings, issues in any public facing product. I have also communicated\nwhat documentation is available on the topic, with no avail.\n\nOn Sat, Feb 2, 2013 at 10:39 AM, Ralph Holzmann notifications@github.comwrote:\n\n> Tell them they're not errors, because they're not, they're warnings.\n> \n> On Feb 2, 2013, at 10:33 AM, Greg Tarnoff notifications@github.com\n> wrote:\n> \n> > I know this issue is closed and old, but while I understand they can be\n> > ignored, I can't get my QA and Stakeholders to sign off on projects with JS\n> > errors showing up. An explanation of why they are used so I can look to see\n> > if I need to fork it would have been nice.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SlexAxton/yepnope.js/issues/32#issuecomment-13033168.\n. ",
    "vdavid": "If it's a _really_ high priority to get rid off the warnings, an ugly workaround is to load all yepnope-loaded JS files from the localhost, put them in a separate dir and put there a .htaccess with something like\n\nAddType image/jpeg .js # To avoid YepNope warnings\n\nNot beautiful, but surely works (tested on Apache).\n. If it's a _really_ high priority to get rid off the warnings, an ugly workaround is to load all yepnope-loaded JS files from the localhost, put them in a separate dir and put there a .htaccess with something like\n\nAddType image/jpeg .js # To avoid YepNope warnings\n\nNot beautiful, but surely works (tested on Apache).\n. ",
    "Francolpm": "THE PROBLEM IS THIS! ----> check your css code because in some place you have for sure some like this: \n\n.someting {\nbackground: #fff url();\n}\nREMOVE the url() from background or put some image for it.\n\nRegards\n. THE PROBLEM IS THIS! ----> check your css code because in some place you have for sure some like this: \n\n.someting {\nbackground: #fff url();\n}\nREMOVE the url() from background or put some image for it.\n\nRegards\n. ",
    "OscarGodson": "@ralphholzmann So, this _is_ breaking pages now that implement CSP. Since it's transferred as a type of image IE11 will run the default-src content policy against it thus making the script not load at all unless you then make all your default-src's the same as your script-src's.\n. @ralphholzmann So, this _is_ breaking pages now that implement CSP. Since it's transferred as a type of image IE11 will run the default-src content policy against it thus making the script not load at all unless you then make all your default-src's the same as your script-src's.\n. ",
    "naoyeye": "Thanks @Francolpm !!\n. Thanks @Francolpm !!\n. ",
    "malei0311": "@naoyeye you have solve the problem?\n. @naoyeye you have solve the problem?\n. ",
    "jrevillini": "You might also have something silly in css like\n\n```\nsomething{background:url(http://yoursite.com/)}\n```\n\nTo find it, you can see in the warning the URL of the item that is being transferred with the wrong mime type and use that to search CSS. If the affected site is a Wordpress site, it might make sense to use Autoptimizer to minify everything and then be able to search all the CSS in one shot, then figure out where that code comes from by looking at the classes in the selectors.\n\nThank you so much @Francolpm !\n. You might also have something silly in css like\n\n```\nsomething{background:url(http://yoursite.com/)}\n```\n\nTo find it, you can see in the warning the URL of the item that is being transferred with the wrong mime type and use that to search CSS. If the affected site is a Wordpress site, it might make sense to use Autoptimizer to minify everything and then be able to search all the CSS in one shot, then figure out where that code comes from by looking at the classes in the selectors.\n\nThank you so much @Francolpm !\n. ",
    "rtud": "@jrevillini that was just the case for me, thanks! :+1: \n. @jrevillini that was just the case for me, thanks! :+1: \n. ",
    "jeffutter": "I'm having what I think is a related problem. When i try to load jquery 1.6 from the google CDN (it's not live on their cdn yet). I get a 404 almost immediately. However the rest of my code doesn't execute for ~6s from a local copy of jquery.. my yepnope looks like this:\n\n```\nyepnope([{\n            load: 'http://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js',\n            callback: function(url, result, key) {\n                if(!window.jQuery) {\n                    yepnope('/pos/assets/js/jquery-1.6.min.js');\n                }\n            }\n        },{\n            load: 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.12/jquery-ui.min.js',\n            callback: function(url, result, key) {\n                if(!jQuery.ui){\n                    yepnope('/pos/assets/js/jquery-ui.min.js');\n                }\n            }\n        },\n        'my',\n        'other',\n        'scripts'\n\n                                    ]);\n```\n. I'm having what I think is a related problem. When i try to load jquery 1.6 from the google CDN (it's not live on their cdn yet). I get a 404 almost immediately. However the rest of my code doesn't execute for ~6s from a local copy of jquery.. my yepnope looks like this:\n\n```\nyepnope([{\n            load: 'http://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js',\n            callback: function(url, result, key) {\n                if(!window.jQuery) {\n                    yepnope('/pos/assets/js/jquery-1.6.min.js');\n                }\n            }\n        },{\n            load: 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.12/jquery-ui.min.js',\n            callback: function(url, result, key) {\n                if(!jQuery.ui){\n                    yepnope('/pos/assets/js/jquery-ui.min.js');\n                }\n            }\n        },\n        'my',\n        'other',\n        'scripts'\n\n                                    ]);\n```\n. ",
    "dris92": "Hello,\n\nI can confirm this issue with both Google CDN and Microsoft CDN.\n\nFor example loading http://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.13/themes/cupertino/jquery-ui.css using YepNope **always** takes about 10 seconds to load, even when the browser has the file in its cache.\n\nHowever the problem is only really apparent with Chrome 10+ which stalls the browser.\nFor whatever reason IE9 and Firefox 4 continue to process the page.\n\nI don't think that this is caused by the loading of images used by the jQuery UI CSS file, those are optimized spritesheets.\n\nThe only solution for now is to load the jQuery UI CSS theme files (css and spritesheets images) locally.\n. Hello,\n\nI can confirm this issue with both Google CDN and Microsoft CDN.\n\nFor example loading http://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.13/themes/cupertino/jquery-ui.css using YepNope **always** takes about 10 seconds to load, even when the browser has the file in its cache.\n\nHowever the problem is only really apparent with Chrome 10+ which stalls the browser.\nFor whatever reason IE9 and Firefox 4 continue to process the page.\n\nI don't think that this is caused by the loading of images used by the jQuery UI CSS file, those are optimized spritesheets.\n\nThe only solution for now is to load the jQuery UI CSS theme files (css and spritesheets images) locally.\n. ",
    "KevM": "Wow you are right. Not sure what I did that made it so wonky. Apologies. Glad to see it fixed.\n. Wow you are right. Not sure what I did that made it so wonky. Apologies. Glad to see it fixed.\n. ",
    "lapusta": "Loading a template from server into DOM or into variable is what I want to have in the end. Just setting an attribute won't work i believe?\n\nSmth similar to what Require.JS offers http://requirejs.org/docs/api.html#text\n. Just finished your slides about cross-domain, your experience is definitely more deep. I'm just starting with loaders and was curious whether I could use them for templates too. I believe I will go for build time options: either inlining or converting my templates to multiline JS strings and loading via yepnope.\n. Loading a template from server into DOM or into variable is what I want to have in the end. Just setting an attribute won't work i believe?\n\nSmth similar to what Require.JS offers http://requirejs.org/docs/api.html#text\n. Just finished your slides about cross-domain, your experience is definitely more deep. I'm just starting with loaders and was curious whether I could use them for templates too. I believe I will go for build time options: either inlining or converting my templates to multiline JS strings and loading via yepnope.\n. ",
    "jonkemp": "I think my comments must have been misunderstood. \n\nThe code above should only download the 'json2.js' script if native JSON support isn't available. That's how yepnope should work, correct? Yet IE 9 still downloads that script even though it should pass the test because it supports JSON natively. This appears to be a bug to me. \n\nUsing complete instead of callback appears to be irrelevant to this issue, unless I am misunderstanding something.\n. This was completely my fault. I failed to remember that my page set up IE 7 compatibility mode which means that native JSON is not available. Which means this works as expected. Sorry for the trouble. Thanks.\n. Test case is here.\n\nhttp://jsfiddle.net/jonkemp/3wN6c/embedded/result/\n\nI can reproduce it some of the time because I don't think it loads an iframe everytime. I just picked the site css as an example. So when it happens you will see the css file being loaded into the ad slot. This is in Firefox 3.6.\n. I was able to reproduce it quite frequently, but I think what is happening is Firefox is caching the page with the iframes and so on refresh it won't go away unless you clear your cache or do a hard refresh. Once you do that it is hard to get it to occur again. The more testing I do I admit it is very hard to reproduce.\n. I think my comments must have been misunderstood. \n\nThe code above should only download the 'json2.js' script if native JSON support isn't available. That's how yepnope should work, correct? Yet IE 9 still downloads that script even though it should pass the test because it supports JSON natively. This appears to be a bug to me. \n\nUsing complete instead of callback appears to be irrelevant to this issue, unless I am misunderstanding something.\n. This was completely my fault. I failed to remember that my page set up IE 7 compatibility mode which means that native JSON is not available. Which means this works as expected. Sorry for the trouble. Thanks.\n. Test case is here.\n\nhttp://jsfiddle.net/jonkemp/3wN6c/embedded/result/\n\nI can reproduce it some of the time because I don't think it loads an iframe everytime. I just picked the site css as an example. So when it happens you will see the css file being loaded into the ad slot. This is in Firefox 3.6.\n. I was able to reproduce it quite frequently, but I think what is happening is Firefox is caching the page with the iframes and so on refresh it won't go away unless you clear your cache or do a hard refresh. Once you do that it is hard to get it to occur again. The more testing I do I admit it is very hard to reproduce.\n. ",
    "codeninja-ru": "I have the same problem. \nIt apears on social buttons and iframe banners when page loads at first time.\nscreenshots:\nhttp://imm.io/6fpF\nhttp://imm.io/6fpH\nhttp://primpogoda.ru/weather/vladivostok/\nhttp://primpogoda.ru/news/ecology/20_tonn_fenola_popalo_v_reku_kitaya/\n\nI try manualy overload iframes when page are loaded. but it's not good solving.\n. I have the same problem. \nIt apears on social buttons and iframe banners when page loads at first time.\nscreenshots:\nhttp://imm.io/6fpF\nhttp://imm.io/6fpH\nhttp://primpogoda.ru/weather/vladivostok/\nhttp://primpogoda.ru/news/ecology/20_tonn_fenola_popalo_v_reku_kitaya/\n\nI try manualy overload iframes when page are loaded. but it's not good solving.\n. ",
    "philwinkle": "I'm having the same issue on pages with Bazaarvoice and Facebook like buttons. However it is only happening in Firefox 3.6.14 and 3.5.19 for us. Sometimes disabling plugins helps, but not on every machine. Refreshing fixes the issue intermittently. Here's a screencast of it in action:\n\nhttp://www.youtube.com/watch?v=GkXECzIIg84\n\nI can give you code examples and allow ip's into our testing environment should the need arise.\n. Would you like more test cases or access to our staging environment to see it in action?\n. Interesting. So what is your suggestion as a possible workaround for those particular browser versions? Can (or should) we sniff for minor browser version and hide BV/Facebook Like buttons until a later time? Perhaps this can be accomplished with css / Modernizr\n. You're correct there - we're loading 10-12 individual scripts. We can certainly combine them as a test and I'll report my findings. I'm interested to see if `v1.1` addresses the issue but I'm sure we can find a workable solution in the meantime.\n. Combined down to 4 includes - two from google cdn (jq/jqui)... still happening and we were able to demonstrate it on IE8 as well. Skipped YepNope for this release - excited for `v1.1`\n. I'm having the same issue on pages with Bazaarvoice and Facebook like buttons. However it is only happening in Firefox 3.6.14 and 3.5.19 for us. Sometimes disabling plugins helps, but not on every machine. Refreshing fixes the issue intermittently. Here's a screencast of it in action:\n\nhttp://www.youtube.com/watch?v=GkXECzIIg84\n\nI can give you code examples and allow ip's into our testing environment should the need arise.\n. Would you like more test cases or access to our staging environment to see it in action?\n. Interesting. So what is your suggestion as a possible workaround for those particular browser versions? Can (or should) we sniff for minor browser version and hide BV/Facebook Like buttons until a later time? Perhaps this can be accomplished with css / Modernizr\n. You're correct there - we're loading 10-12 individual scripts. We can certainly combine them as a test and I'll report my findings. I'm interested to see if `v1.1` addresses the issue but I'm sure we can find a workable solution in the meantime.\n. Combined down to 4 includes - two from google cdn (jq/jqui)... still happening and we were able to demonstrate it on IE8 as well. Skipped YepNope for this release - excited for `v1.1`\n. ",
    "spacebat": "I just had a large website go live with a new design - there were many dynamic elements using jquery plugins so I conditionalised loading using yepnope.js v1.0.2. The JS source in IFrame issue was noticed after going live yesterday.\n\nLast night I tried an upgrade to 1.1 and it seemed to work - at least on the first page load. Subsequently hitting refresh causes it to happen reliably. I'm using FF 3.6.17 for these tests, some of our users on various FF 3.6.x have reported it too.\n\nAny ideas about the cause to get me started debugging?\n. Switched the project to jquery.defer.js which resolved the issue; the site is jquery based anyway. I must agree though FF iframes seem fraught with problems.\n. I just had a large website go live with a new design - there were many dynamic elements using jquery plugins so I conditionalised loading using yepnope.js v1.0.2. The JS source in IFrame issue was noticed after going live yesterday.\n\nLast night I tried an upgrade to 1.1 and it seemed to work - at least on the first page load. Subsequently hitting refresh causes it to happen reliably. I'm using FF 3.6.17 for these tests, some of our users on various FF 3.6.x have reported it too.\n\nAny ideas about the cause to get me started debugging?\n. Switched the project to jquery.defer.js which resolved the issue; the site is jquery based anyway. I must agree though FF iframes seem fraught with problems.\n. ",
    "skaurus": "Seen this once. I believe it's FF bug, because seen something like that in project without yepnope. Actually FF iframes quite buggy: https://bugzilla.mozilla.org/show_bug.cgi?id=356558 (5 years old!), 254144, 473436, 295813, 462076 and more.\nLast three similar to this issue.\n. Ooh, seems it my error: moving \"yepnope.errorTimeout = 10000;\" to callback code seems to fix the issue.\n. Anyone?\n. Glad to hear this :)\n\nWell, global timeout still used as default: https://github.com/SlexAxton/yepnope.js/pull/52/files#L0R231\nAnd I don't quite understand you about multiple statements; are you talking about this line https://github.com/SlexAxton/yepnope.js/pull/52/files#L0R374 ?\n. Done :)\n. Seen this once. I believe it's FF bug, because seen something like that in project without yepnope. Actually FF iframes quite buggy: https://bugzilla.mozilla.org/show_bug.cgi?id=356558 (5 years old!), 254144, 473436, 295813, 462076 and more.\nLast three similar to this issue.\n. Ooh, seems it my error: moving \"yepnope.errorTimeout = 10000;\" to callback code seems to fix the issue.\n. Anyone?\n. Glad to hear this :)\n\nWell, global timeout still used as default: https://github.com/SlexAxton/yepnope.js/pull/52/files#L0R231\nAnd I don't quite understand you about multiple statements; are you talking about this line https://github.com/SlexAxton/yepnope.js/pull/52/files#L0R374 ?\n. Done :)\n. ",
    "summsel": "Hi Slex!\n\nim getting deeper and deeper with yenope...\n\nI found out that I have to initialize jquery plugins too inside yenope; so I guess I have to do this also with the JW Player and my Shadowbox (which also does not respond when loaded with yenope).\n\nAm I on the right way?\n\nYes, I can make a test page - tomorrow, its evening here. Thankx!\n\nKai\n\n Modernizr.load([\n                         {\n                            load: ['iegt6!ielt8!files/_layout/_js/selectivizr.js'\n\n```\n                              ]\n\n\n\n                     },\n\n                     {\n                        load: '//ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.js',\n                        complete: function () {\n                            if ( !window.jQuery ) {\n                            Modernizr.load('files/_layout/_js/jquery.js');\n                            }\n                        }\n                     },\n\n                     {\n                        load: ['files/_layout/_js/jquery.easing.js',\n                               'files/_layout/_js/jquery.scroll.pack.js',\n                               'files/_layout/_js/jquery.scrollTo-1.4.2-min.js'\n                              ],\n\n                        complete: function () {\n\n                                $(\"#toTop\").scrollToTop({speed:\"slow\",ease:\"easeInBack\",start:1400\n                                });\n\n                                $(document).ready(function(){\n\n                                    $(\".moviedesc_accordion h2\").eq(0).addClass(\"active\");\n                                    $(\".moviedesc_accordion div\").eq(0).show();\n\n                                    $(\".moviedesc_accordion h2\").click(function(){\n                                    $(this).next(\"div\").slideToggle(\"slow\")\n                                    .siblings(\"div:visible\").slideUp(\"slow\");\n                                    $(this).toggleClass(\"active\");\n                                    $(this).siblings(\"h2\").removeClass(\"active\");\n                                });\n\n                            });\n\n                        } \n                     },\n\n                     {\n                        load: ['files/_layout/_js/shadowbox/shadowbox.css',\n                               'files/_layout/_js/shadowbox/shadowbox.js'\n                              ],\n\n                        complete: function () {\n                            Shadowbox.init({\n                            overlayColor:   \"#000\",\n                            overlayOpacity: \"0.8\"\n                            });\n\n                        }\n\n\n                     }\n\n\n\n                ]);\n\n  </script>\n```\n\nAm 15.06.2011 um 18:32 schrieb SlexAxton:\n\n> Hi @summsel - thanks for your question. Would it be possible for you to set up a test case with your situation that would be available to us so we could debug it?\n> \n> As for your second question, that is planned in the v1.1 release.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SlexAxton/yepnope.js/issues/43#issuecomment-1374959\n\n---\n\nKai Pulfer\nBro: 052 202 25 53\nMobil: 077 420 63 69\n\n---\n\nkai@pulfer.info\nSkype: kaipulfer\n. Hi Slex!\n\nim getting deeper and deeper with yenope...\n\nI found out that I have to initialize jquery plugins too inside yenope; so I guess I have to do this also with the JW Player and my Shadowbox (which also does not respond when loaded with yenope).\n\nAm I on the right way?\n\nYes, I can make a test page - tomorrow, its evening here. Thankx!\n\nKai\n\n Modernizr.load([\n                         {\n                            load: ['iegt6!ielt8!files/_layout/_js/selectivizr.js'\n\n```\n                              ]\n\n\n\n                     },\n\n                     {\n                        load: '//ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.js',\n                        complete: function () {\n                            if ( !window.jQuery ) {\n                            Modernizr.load('files/_layout/_js/jquery.js');\n                            }\n                        }\n                     },\n\n                     {\n                        load: ['files/_layout/_js/jquery.easing.js',\n                               'files/_layout/_js/jquery.scroll.pack.js',\n                               'files/_layout/_js/jquery.scrollTo-1.4.2-min.js'\n                              ],\n\n                        complete: function () {\n\n                                $(\"#toTop\").scrollToTop({speed:\"slow\",ease:\"easeInBack\",start:1400\n                                });\n\n                                $(document).ready(function(){\n\n                                    $(\".moviedesc_accordion h2\").eq(0).addClass(\"active\");\n                                    $(\".moviedesc_accordion div\").eq(0).show();\n\n                                    $(\".moviedesc_accordion h2\").click(function(){\n                                    $(this).next(\"div\").slideToggle(\"slow\")\n                                    .siblings(\"div:visible\").slideUp(\"slow\");\n                                    $(this).toggleClass(\"active\");\n                                    $(this).siblings(\"h2\").removeClass(\"active\");\n                                });\n\n                            });\n\n                        } \n                     },\n\n                     {\n                        load: ['files/_layout/_js/shadowbox/shadowbox.css',\n                               'files/_layout/_js/shadowbox/shadowbox.js'\n                              ],\n\n                        complete: function () {\n                            Shadowbox.init({\n                            overlayColor:   \"#000\",\n                            overlayOpacity: \"0.8\"\n                            });\n\n                        }\n\n\n                     }\n\n\n\n                ]);\n\n  </script>\n```\n\nAm 15.06.2011 um 18:32 schrieb SlexAxton:\n\n> Hi @summsel - thanks for your question. Would it be possible for you to set up a test case with your situation that would be available to us so we could debug it?\n> \n> As for your second question, that is planned in the v1.1 release.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SlexAxton/yepnope.js/issues/43#issuecomment-1374959\n\n---\n\nKai Pulfer\nBro: 052 202 25 53\nMobil: 077 420 63 69\n\n---\n\nkai@pulfer.info\nSkype: kaipulfer\n. ",
    "freqdec": "Looks like one of the weekend updates fixed the problem. Custom build of Modernizr 2.0.6 works like a charm. Thanks Guys.  \n. Looks like one of the weekend updates fixed the problem. Custom build of Modernizr 2.0.6 works like a charm. Thanks Guys.  \n. ",
    "robertoamici": "hi,\n\nthanks for the quick response\n\nI wasn't suggesting to use the head element directly, a fallback element can be used if the head is not defined (exactly like yepnope is already doing) - the focus of my proposal was \"head.firstChild\" inside the \"insertBefore\" method, which is computing the available script tag at insertion time - like you said. Lousy explanation on my side\n\nLooking forward to have yepnope working on my sites\n\nCheers\n. hi,\n\nthanks for the quick response\n\nI wasn't suggesting to use the head element directly, a fallback element can be used if the head is not defined (exactly like yepnope is already doing) - the focus of my proposal was \"head.firstChild\" inside the \"insertBefore\" method, which is computing the available script tag at insertion time - like you said. Lousy explanation on my side\n\nLooking forward to have yepnope working on my sites\n\nCheers\n. ",
    "jokeyrhyme": "Okay, before I submitted this issue I double-checked this, clearing the cache on my Motorola Xoom in-between each attempt. I am definitely not a crazy person!\n\nNow when I do that I get onMainLoad() running out of sequence regardless of the YepNope \"load\" style I use. Whatever event you are using to trigger the \"complete\" callback, it's firing too early on Android. :S\n\nOh, before anyone suggests it, the reason I have my scripts split up like this is I have the 3rd party scripts setup with a very long cache expiry, because they will never change (new versions have new file names). My \"main.js\" file (and my HTML file) have a fairly short cache expiry while I am in development mode. I will consider minifying these into a single blob once I reach stable.\n. I have encountered a situation where the files are being downloaded (no 404s) and the complete handler is executing, but the script inside the JS files is not executing. I will see if I can build a sanitised example (this is company code, unfortunately) to demonstrate. I put alert()s at the top of the loaded scripts and never saw any of them pop up. This is not only happening on Android, and even putting a setTimeout() in the complete handler isn't enough to guarantee script execution.\n\nI've had to resort to jQuery.getScript in the meantime, which I've noticed is blindingly fast compared to YepNope. I have a feeling I can probably do away with those setTimeout()s too. It obviously doesn't work for CSS files, but I am thinking of building something that accepts similar parameters to YepNope but uses jQuery.getScript underneath.\n. Thanks so much. I've just switched from using complete to callback in a few places (still using Modernizr, so it'll be a while before I get this fix) and already I can see improvements. Kind of annoyed that I didn't notice that it was mostly my completes that were fishy. :P\n. Okay, before I submitted this issue I double-checked this, clearing the cache on my Motorola Xoom in-between each attempt. I am definitely not a crazy person!\n\nNow when I do that I get onMainLoad() running out of sequence regardless of the YepNope \"load\" style I use. Whatever event you are using to trigger the \"complete\" callback, it's firing too early on Android. :S\n\nOh, before anyone suggests it, the reason I have my scripts split up like this is I have the 3rd party scripts setup with a very long cache expiry, because they will never change (new versions have new file names). My \"main.js\" file (and my HTML file) have a fairly short cache expiry while I am in development mode. I will consider minifying these into a single blob once I reach stable.\n. I have encountered a situation where the files are being downloaded (no 404s) and the complete handler is executing, but the script inside the JS files is not executing. I will see if I can build a sanitised example (this is company code, unfortunately) to demonstrate. I put alert()s at the top of the loaded scripts and never saw any of them pop up. This is not only happening on Android, and even putting a setTimeout() in the complete handler isn't enough to guarantee script execution.\n\nI've had to resort to jQuery.getScript in the meantime, which I've noticed is blindingly fast compared to YepNope. I have a feeling I can probably do away with those setTimeout()s too. It obviously doesn't work for CSS files, but I am thinking of building something that accepts similar parameters to YepNope but uses jQuery.getScript underneath.\n. Thanks so much. I've just switched from using complete to callback in a few places (still using Modernizr, so it'll be a while before I get this fix) and already I can see improvements. Kind of annoyed that I didn't notice that it was mostly my completes that were fishy. :P\n. ",
    "vincentbernat": "Unfortunately, this does not work.  The example comes from Google +1 documentation. Since the code is minified, this is difficult to know what the script does. I suppose that it searches for its script tag and grab arguments from here. This seems to be a common idiom with Google widgets.\n. Thanks for the tips. This works fine with your solution. Maybe the documentation should be updated to use `callback` instead of `complete` in the fallback example.\n. Unfortunately, this does not work.  The example comes from Google +1 documentation. Since the code is minified, this is difficult to know what the script does. I suppose that it searches for its script tag and grab arguments from here. This seems to be a common idiom with Google widgets.\n. Thanks for the tips. This works fine with your solution. Maybe the documentation should be updated to use `callback` instead of `complete` in the fallback example.\n. ",
    "makenosound": "I've just come across the exact same problem, so I think it's definitely worth changing the docs as they're misleading.\n\nMy solution was to do the following:\n\n```\nyepnope([\n  {\n    load: 'http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js',\n  }, {\n    test: function() { return (window.jQuery) ? true: false; },\n    load: 'local/jquery.min.js'\n  }, {\n    load: 'local/jquery.plugin.js'\n  }\n]);\n```\n. Ah, right, that makes sense. Cheers.\n. I've just come across the exact same problem, so I think it's definitely worth changing the docs as they're misleading.\n\nMy solution was to do the following:\n\n```\nyepnope([\n  {\n    load: 'http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js',\n  }, {\n    test: function() { return (window.jQuery) ? true: false; },\n    load: 'local/jquery.min.js'\n  }, {\n    load: 'local/jquery.plugin.js'\n  }\n]);\n```\n. Ah, right, that makes sense. Cheers.\n. ",
    "LeonFedotov": "ok it seems that i was wrong this will actually always return true, (SORYY,SORRY), committing the solution.\n. Good point, i have checked the outputs from String's class function eg (big, split) and they all come out as a simple string. \n. ok it seems that i was wrong this will actually always return true, (SORYY,SORRY), committing the solution.\n. Good point, i have checked the outputs from String's class function eg (big, split) and they all come out as a simple string. \n. ",
    "magus424": "did this not make it into the CSS plugin? cross domain CSS is currently broken in Safari w/the plugin\n. I'm seeing this also - if I remove the css plugin, the code executes properly instead of waiting forever (though sometimes too soon, but that's another issue)\n. Looks like you just fixed it; it was in the yepnope.css plugin\n. did this not make it into the CSS plugin? cross domain CSS is currently broken in Safari w/the plugin\n. I'm seeing this also - if I remove the css plugin, the code executes properly instead of waiting forever (though sometimes too soon, but that's another issue)\n. Looks like you just fixed it; it was in the yepnope.css plugin\n. ",
    "chrisjacob": "I can confirm this works for me on Chrome.\n\nIt also fixes a similar issue encountered when trying to load a `.less` file... see patch:\nhttps://github.com/SlexAxton/yepnope.js/pull/64\n. NOTE: loading `.less` files using this patch incurs a 10 second delay (on Chrome) before yepnope continues to load additional resources that follow the `.less` load.\n\nTo fix this you need to implement this other patch:\nhttps://github.com/SlexAxton/yepnope.js/pull/55 (issue: https://github.com/SlexAxton/yepnope.js/issues/53).\n. Rather then just adding support for .less ... how about extending things further to allow for defining any attributes for the script/style element?\n\nFor reference see Enhance.js documentation:\n\n\"Specify script & style attributes\" - https://github.com/filamentgroup/EnhanceJS/wiki/enhancejs-basics\n\n```\nenhance({\n    loadStyles: [\n        {href: 'css/screen.css', media: 'screen'},\n        {href: 'css/alternate.css', media: 'screen', rel: 'alternate stylesheet'},\n        {href: 'css/print.css', media: 'print'}\n    ],\n    loadScripts: [\n        'js/jquery.min.js',\n        {src: 'js/screen.js', id: 'myScreenJavaScript'}\n    ]   \n}); \n```\n.  Agreed, generic is the way to go. Thank you.\n. I can confirm this works for me on Chrome.\n\nIt also fixes a similar issue encountered when trying to load a `.less` file... see patch:\nhttps://github.com/SlexAxton/yepnope.js/pull/64\n. NOTE: loading `.less` files using this patch incurs a 10 second delay (on Chrome) before yepnope continues to load additional resources that follow the `.less` load.\n\nTo fix this you need to implement this other patch:\nhttps://github.com/SlexAxton/yepnope.js/pull/55 (issue: https://github.com/SlexAxton/yepnope.js/issues/53).\n. Rather then just adding support for .less ... how about extending things further to allow for defining any attributes for the script/style element?\n\nFor reference see Enhance.js documentation:\n\n\"Specify script & style attributes\" - https://github.com/filamentgroup/EnhanceJS/wiki/enhancejs-basics\n\n```\nenhance({\n    loadStyles: [\n        {href: 'css/screen.css', media: 'screen'},\n        {href: 'css/alternate.css', media: 'screen', rel: 'alternate stylesheet'},\n        {href: 'css/print.css', media: 'print'}\n    ],\n    loadScripts: [\n        'js/jquery.min.js',\n        {src: 'js/screen.js', id: 'myScreenJavaScript'}\n    ]   \n}); \n```\n.  Agreed, generic is the way to go. Thank you.\n. ",
    "smeyfroi": "This patch works for me too on Safari 5.1/MacOSX Lion. Good to see it rolled into the official distro.\n. I'm also keen to see \"load once\" (execute once) for loaded JS as part of the core yepnope distro. I'm using it as a loader for widgets that can be composed on a single page, so duplicate JS imports through multiple invocations of yepnope to support each widget individually are inevitable for us.\n\nFor now my loader uses a modified/fixed version of https://raw.github.com/gist/871434/1845a2412db76951a3e7786ca14c2a94457bd943/once-filter.js\n\nUseful comments also at https://gist.github.com/827073/bf58b16680767dec639579a105e65795dd18db70\n. This patch works for me too on Safari 5.1/MacOSX Lion. Good to see it rolled into the official distro.\n. I'm also keen to see \"load once\" (execute once) for loaded JS as part of the core yepnope distro. I'm using it as a loader for widgets that can be composed on a single page, so duplicate JS imports through multiple invocations of yepnope to support each widget individually are inevitable for us.\n\nFor now my loader uses a modified/fixed version of https://raw.github.com/gist/871434/1845a2412db76951a3e7786ca14c2a94457bd943/once-filter.js\n\nUseful comments also at https://gist.github.com/827073/bf58b16680767dec639579a105e65795dd18db70\n. ",
    "DBJDBJ": "I can donate this code as long as I stay as the author.\n\nOn 24 October 2011 20:19, Alex Sexton\nreply@reply.github.com\nwrote:\n\n> Yepnope doesn't work that well in prehistoric browsers for other reasons, and this test works in all of our supported browsers, so we'll keep the shorter one for now. Also, hard to add in code that is simple and copyrighted like that into a WTFPL project.\n> \n> Will happily re-consider if anyone has a good argument against, but closing for now.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SlexAxton/yepnope.js/pull/56#issuecomment-2508029\n. I can donate this code as long as I stay as the author.\n\nOn 24 October 2011 20:19, Alex Sexton\nreply@reply.github.com\nwrote:\n\n> Yepnope doesn't work that well in prehistoric browsers for other reasons, and this test works in all of our supported browsers, so we'll keep the shorter one for now. Also, hard to add in code that is simple and copyrighted like that into a WTFPL project.\n> \n> Will happily re-consider if anyone has a good argument against, but closing for now.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/SlexAxton/yepnope.js/pull/56#issuecomment-2508029\n. ",
    "toqueteos": "I'm not very used to Modernizr, but it says **Yepnope is bundled** so I'm not sure if this thing will work with Modernizr, but it does with Yepnope.js\n\nRemember, order matters for yepnope.\n\n**Example 1**: load first script1.js, then script2.js and finally google's code.\n\n```\nModernizr.load({\n    load: [\n        \"script1.js\",\n        \"script2.js\",\n        \"http://www.google-analytics.com/ga.js\"\n    ],\n    // This just gives you some loading info\n    callback: function(url, result, key) {\n        console.log(url, result, key);\n    },\n    complete: function() {\n        // Analytics code should go here\n        console.log(\"All resources loaded!\");\n    }\n});\n```\n\n**Example 2**: Also you can load your scripts, wait for completion and then load google's code.\n\n```\nModernizr.load({\n    load: [\"script1.js\", \"script2.js\"],\n    complete: function() {\n        Modernizr.load({\n            load: \"http://www.google-analytics.com/ga.js\",\n            complete: function() {\n                // Analytics code should go here\n            }\n        });\n    }\n});\n```\n\nHope it helps!\n\n**EDIT:** Just tested, example1 and it works! http://jsbin.com/uqepop\n. The only way to disable async loading is not loading the script.\n\nThe delay will only occur on the first page load, then it's cached, but Google Analytics needs some extra JS to init it's thingy so you need to wait the DOM to be ready, right?\n. I'm not very used to Modernizr, but it says **Yepnope is bundled** so I'm not sure if this thing will work with Modernizr, but it does with Yepnope.js\n\nRemember, order matters for yepnope.\n\n**Example 1**: load first script1.js, then script2.js and finally google's code.\n\n```\nModernizr.load({\n    load: [\n        \"script1.js\",\n        \"script2.js\",\n        \"http://www.google-analytics.com/ga.js\"\n    ],\n    // This just gives you some loading info\n    callback: function(url, result, key) {\n        console.log(url, result, key);\n    },\n    complete: function() {\n        // Analytics code should go here\n        console.log(\"All resources loaded!\");\n    }\n});\n```\n\n**Example 2**: Also you can load your scripts, wait for completion and then load google's code.\n\n```\nModernizr.load({\n    load: [\"script1.js\", \"script2.js\"],\n    complete: function() {\n        Modernizr.load({\n            load: \"http://www.google-analytics.com/ga.js\",\n            complete: function() {\n                // Analytics code should go here\n            }\n        });\n    }\n});\n```\n\nHope it helps!\n\n**EDIT:** Just tested, example1 and it works! http://jsbin.com/uqepop\n. The only way to disable async loading is not loading the script.\n\nThe delay will only occur on the first page load, then it's cached, but Google Analytics needs some extra JS to init it's thingy so you need to wait the DOM to be ready, right?\n. ",
    "curvedmark": "Thank you for your help.\n\nExample 1 seems to wait for google analytics to be downloaded before script1 and script2 are executed.\n\nExample 2 is want I needed. However, script1 and script2 are bound to DOM ready event. Asyncly loading a script before the DOM ready event is fired seems to delay the firing of the event until the async script has been downloaded.\n\nSo what I end up with is this code, assuming jQuery is pre-loaded:\n\n```\nModernizr.load({\n    load: ['script1.js', 'script2.js'],\n    complete: function() {\n        $(function() {\n            $.getScript('http://www.google-analytics.com/ga.js');\n        })\n    }\n});\n```\n\nDependence on jQuery makes me a little uneasy, but it works. Still looking for a better solution.\n. Thank you for your help.\n\nExample 1 seems to wait for google analytics to be downloaded before script1 and script2 are executed.\n\nExample 2 is want I needed. However, script1 and script2 are bound to DOM ready event. Asyncly loading a script before the DOM ready event is fired seems to delay the firing of the event until the async script has been downloaded.\n\nSo what I end up with is this code, assuming jQuery is pre-loaded:\n\n```\nModernizr.load({\n    load: ['script1.js', 'script2.js'],\n    complete: function() {\n        $(function() {\n            $.getScript('http://www.google-analytics.com/ga.js');\n        })\n    }\n});\n```\n\nDependence on jQuery makes me a little uneasy, but it works. Still looking for a better solution.\n. ",
    "ebhoren": "Sorry, i've test what you mention and did not work. \nSee my comment on the gist.\n. I think i've found the problem.\nI disabled a lot of plugins Microsoft install by default on my version of Windows 7 Home Edition and the script is now working correctly. I think the bad one was HTML5 DivX Web Player.\n\nSimply disable it and everything work fine.\nGreat job IE Team :(\n. Sorry, i've test what you mention and did not work. \nSee my comment on the gist.\n. I think i've found the problem.\nI disabled a lot of plugins Microsoft install by default on my version of Windows 7 Home Edition and the script is now working correctly. I think the bad one was HTML5 DivX Web Player.\n\nSimply disable it and everything work fine.\nGreat job IE Team :(\n. ",
    "kflorence": "Hmm, not with script injection. I was hoping you would know :[\n. Hmm, not with script injection. I was hoping you would know :[\n. ",
    "chrisyip": "> Are you using the most recent version of yepnope?\n\nI don't the version exactly, it's packed by Modernizr.\nBut I generated Modernizr after yepnope 1.0.2 released.\n\nI'll try the callback later, thanks.\n. callback works on Chrome, but loading script slower on IE series.\n\nLet me explain my problem more clear:\n\n``` javascript\nyepnope([{ load: \"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.2.min.js\"\n        , complete: function() {\n            if (!window.jQuery) {\n                alert('Hey! I'm here!');\n                yepnope('../javascript/jquery.min.js');\n            }\n        }\n}, /* some resource */]);\n```\n\nI can get the alert box, but\n\n``` javascript\nyepnope('../javascript/jquery.min.js');\n```\n\ndoesn't work as expected. I can't see the script element that created by yepnope.\nSeems yepnope ignores this script.\n\nHope can see it will be fixed in next version.\n. @SlexAxton you mean only can load scripts in \"callback\" not \"complete\" in 1.0.2? If yes, yes, what are you doing is what I want.\n. > Are you using the most recent version of yepnope?\n\nI don't the version exactly, it's packed by Modernizr.\nBut I generated Modernizr after yepnope 1.0.2 released.\n\nI'll try the callback later, thanks.\n. callback works on Chrome, but loading script slower on IE series.\n\nLet me explain my problem more clear:\n\n``` javascript\nyepnope([{ load: \"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.2.min.js\"\n        , complete: function() {\n            if (!window.jQuery) {\n                alert('Hey! I'm here!');\n                yepnope('../javascript/jquery.min.js');\n            }\n        }\n}, /* some resource */]);\n```\n\nI can get the alert box, but\n\n``` javascript\nyepnope('../javascript/jquery.min.js');\n```\n\ndoesn't work as expected. I can't see the script element that created by yepnope.\nSeems yepnope ignores this script.\n\nHope can see it will be fixed in next version.\n. @SlexAxton you mean only can load scripts in \"callback\" not \"complete\" in 1.0.2? If yes, yes, what are you doing is what I want.\n. ",
    "andrewdavey": "Okay, thanks. Since my project deals with any arbitrary scripts I won't be able to test like that. I'm not in a rush, so I'm happy to wait for a future release.\n\nI assume it will involve some kind of prefix or filter that modifies the behaviour? I'll keep an eye on the commits :)\n. Okay, thanks. Since my project deals with any arbitrary scripts I won't be able to test like that. I'm not in a rush, so I'm happy to wait for a future release.\n\nI assume it will involve some kind of prefix or filter that modifies the behaviour? I'll keep an eye on the commits :)\n. ",
    "Hainesy": "+1 - very important feature.\n. +1 - very important feature.\n. ",
    "aensley": "It looks like this fix is causing me issues. I actually _want_ scripts to be loaded twice. Explanation below. Is there any way to force re-loading and re-executing a script?\n\nExplanation:\n\nI have a one-page web-app with AJAX navigation. Some \"pages\" require specific scripts to be loaded that most others do not. I'm using yepnope.js to load the scripts for those \"pages\". When navigating away from a page with those scripts, I null the relevant JS code (for garbage-collection), and remove the script elements from the page. A problem arises when navigating back to the same page (with additional scripts) again. The scripts aren't actually re-loaded because of the logic introduced in this fix.\n\nEdit:\n\nNevermind. I see you already merged a fix in 56c016eae836a13f7b041060053b6f929f755260.\nI was using the Modernizr bundled version. Switched to the latest Git version, used reexecute in my prefixes, and all is gravy. Thanks!\n. > Sure, but using yepnope to load them can be very handy when designing a very dynamic and modular interface. Loading CSS after the page load is almost mandatory for me.\n\nWhat you said, @pjparra. Except for me, loading CSS after the page load _is_ mandatory.\n\n@unscriptable's solution would work for me. I don't necessarily need the accuracy of when the styles are applied as long as I can know about when the stylesheet has finished loading.\n. It looks like this fix is causing me issues. I actually _want_ scripts to be loaded twice. Explanation below. Is there any way to force re-loading and re-executing a script?\n\nExplanation:\n\nI have a one-page web-app with AJAX navigation. Some \"pages\" require specific scripts to be loaded that most others do not. I'm using yepnope.js to load the scripts for those \"pages\". When navigating away from a page with those scripts, I null the relevant JS code (for garbage-collection), and remove the script elements from the page. A problem arises when navigating back to the same page (with additional scripts) again. The scripts aren't actually re-loaded because of the logic introduced in this fix.\n\nEdit:\n\nNevermind. I see you already merged a fix in 56c016eae836a13f7b041060053b6f929f755260.\nI was using the Modernizr bundled version. Switched to the latest Git version, used reexecute in my prefixes, and all is gravy. Thanks!\n. > Sure, but using yepnope to load them can be very handy when designing a very dynamic and modular interface. Loading CSS after the page load is almost mandatory for me.\n\nWhat you said, @pjparra. Except for me, loading CSS after the page load _is_ mandatory.\n\n@unscriptable's solution would work for me. I don't necessarily need the accuracy of when the styles are applied as long as I can know about when the stylesheet has finished loading.\n. ",
    "bmsterling": "Right, I am, the script works fine before adding the querystring.\n. Thanks for the follow up, I'll look into the test suite and come up with generic example of the issue and possibly a fix.\n\nBut to be clear, all works well using `css!` prior to adding in the `?time=12121`.  Again, I will pull up the test cases and see if I can pinpoint the issue and be able to provide a fix.\n. Still working on a true test case but just wanted to follow up real quick.  Took your tests.js file and changed line 293 to `yepnope('css/sleep-3/' + myrgb.join( ',' ) + '.css?time');` and was able to reproduce the issue. To make sure, I also did `yepnope('css!css/sleep-3/' + myrgb.join( ',' ) + '.css?time');`, which failed, and `yepnope('css!css/sleep-3/' + myrgb.join( ',' ) + '.css');` which passed.\n. Sorry, been extremely busy with client work I took over from other swamped devs.  I did have a good test case but don't have it available atm, will try to get it out tonight.\n\nRegarding \"upset that I suggested that you didn't add the 'css' prefix,\", sadly there is two issues there.  One, I don't have a filter, at least not a good one, so I apologies if you took offense. And two, this was actually the third time this has happened in as many days with two other project I work with a ton.  Just a bit frustrating.\n\nAgain, will try to follow up on this tonight.\n. So, here is a screencast of what I am encountering http://www.screenr.com/l84s.  This is with the most recent code from github.\n\nCan you give me some other guidance on how I should produce a test case that will be useful to you?\n. Good calls, sorry I had not followed up, things just been too crazy around here.  I appreciate you looking into this.\n. I'm having the same issue when trying to reload something.\n\nIn FF 10.0.2 I get: Could not convert JavaScript argument arg 0 [nsIDOMHTMLHeadElement.insertBefore]\nIn IE 9 I get: SCRIPT5022: DOM Exception: HIERARCHY_REQUEST_ERR (3) \n\nIt seems to be centered around items the were already loaded at some point via yepnope.  \n\nThis is happening in 1.5.2 and 1.5.3.\n\nHere is my set up currently that works with the version of yepnope that came with Modernizr 2.0.6 (not sure how to figure out what version of yepnope that is) http://pastie.org/3437852\n. Just to build on nex2hex 's example, the error is only thrown after there has been some time passed.  If you run that code as is, no error will show.  But, if you give it a delay, in my example below I have 1 second, the error gets thrown.  The load.js file only has console.log in it.\n\n```\nyepnope(\n    {\n        load: ['load.js'],\n        callback: function (url, result, key) { // exception in this line\n            console.log(url, result, key);\n        },\n        complete: function () {\n            console.log('Everything has loaded in this test object!');\n        }\n    }\n);\n\nsetTimeout(function () {\n    yepnope(\n        {\n            load: ['load.js'],\n            callback: function (url, result, key) { // exception in this line\n                console.log(url, result, key);\n            },\n            complete: function () {\n                console.log('Everything has loaded in this test object!');\n            }\n        }\n    );\n}, 1000);\n```\n. I changed\n\n```\n    // The first time (common-case)\n    if ( scriptCache[ url ] === 1 ) {\n      firstFlag = 1;\n      scriptCache[ url ] = [];\n      preloadElem = doc.createElement( elem );\n    }\n```\n\nto:\n\n```\n    // The first time (common-case)\n    if ( scriptCache[ url ] === 1 ) {\n      firstFlag = 1;\n      scriptCache[ url ] = [];\n\n    }\n\n    preloadElem = doc.createElement( elem );\n```\n\nAnd everything seems to be working correctly, is there some side affect I am not aware of by doing this?\n. With Version - 1.5.4pre there are no errors thrown but the complete call back does not trigger nor do the files execute if there is a one or more files in the list that was already loaded by yepnope.  For instance: http://pastie.org/3447843\n\nLet me know if I am not clear.\n. Right, I am, the script works fine before adding the querystring.\n. Thanks for the follow up, I'll look into the test suite and come up with generic example of the issue and possibly a fix.\n\nBut to be clear, all works well using `css!` prior to adding in the `?time=12121`.  Again, I will pull up the test cases and see if I can pinpoint the issue and be able to provide a fix.\n. Still working on a true test case but just wanted to follow up real quick.  Took your tests.js file and changed line 293 to `yepnope('css/sleep-3/' + myrgb.join( ',' ) + '.css?time');` and was able to reproduce the issue. To make sure, I also did `yepnope('css!css/sleep-3/' + myrgb.join( ',' ) + '.css?time');`, which failed, and `yepnope('css!css/sleep-3/' + myrgb.join( ',' ) + '.css');` which passed.\n. Sorry, been extremely busy with client work I took over from other swamped devs.  I did have a good test case but don't have it available atm, will try to get it out tonight.\n\nRegarding \"upset that I suggested that you didn't add the 'css' prefix,\", sadly there is two issues there.  One, I don't have a filter, at least not a good one, so I apologies if you took offense. And two, this was actually the third time this has happened in as many days with two other project I work with a ton.  Just a bit frustrating.\n\nAgain, will try to follow up on this tonight.\n. So, here is a screencast of what I am encountering http://www.screenr.com/l84s.  This is with the most recent code from github.\n\nCan you give me some other guidance on how I should produce a test case that will be useful to you?\n. Good calls, sorry I had not followed up, things just been too crazy around here.  I appreciate you looking into this.\n. I'm having the same issue when trying to reload something.\n\nIn FF 10.0.2 I get: Could not convert JavaScript argument arg 0 [nsIDOMHTMLHeadElement.insertBefore]\nIn IE 9 I get: SCRIPT5022: DOM Exception: HIERARCHY_REQUEST_ERR (3) \n\nIt seems to be centered around items the were already loaded at some point via yepnope.  \n\nThis is happening in 1.5.2 and 1.5.3.\n\nHere is my set up currently that works with the version of yepnope that came with Modernizr 2.0.6 (not sure how to figure out what version of yepnope that is) http://pastie.org/3437852\n. Just to build on nex2hex 's example, the error is only thrown after there has been some time passed.  If you run that code as is, no error will show.  But, if you give it a delay, in my example below I have 1 second, the error gets thrown.  The load.js file only has console.log in it.\n\n```\nyepnope(\n    {\n        load: ['load.js'],\n        callback: function (url, result, key) { // exception in this line\n            console.log(url, result, key);\n        },\n        complete: function () {\n            console.log('Everything has loaded in this test object!');\n        }\n    }\n);\n\nsetTimeout(function () {\n    yepnope(\n        {\n            load: ['load.js'],\n            callback: function (url, result, key) { // exception in this line\n                console.log(url, result, key);\n            },\n            complete: function () {\n                console.log('Everything has loaded in this test object!');\n            }\n        }\n    );\n}, 1000);\n```\n. I changed\n\n```\n    // The first time (common-case)\n    if ( scriptCache[ url ] === 1 ) {\n      firstFlag = 1;\n      scriptCache[ url ] = [];\n      preloadElem = doc.createElement( elem );\n    }\n```\n\nto:\n\n```\n    // The first time (common-case)\n    if ( scriptCache[ url ] === 1 ) {\n      firstFlag = 1;\n      scriptCache[ url ] = [];\n\n    }\n\n    preloadElem = doc.createElement( elem );\n```\n\nAnd everything seems to be working correctly, is there some side affect I am not aware of by doing this?\n. With Version - 1.5.4pre there are no errors thrown but the complete call back does not trigger nor do the files execute if there is a one or more files in the list that was already loaded by yepnope.  For instance: http://pastie.org/3447843\n\nLet me know if I am not clear.\n. ",
    "JorritSalverda": "I didn't see until now that I can increase the timeout by setting yepnope.errorTimeout. So then it appears to be a non-issue.\n. I didn't see until now that I can increase the timeout by setting yepnope.errorTimeout. So then it appears to be a non-issue.\n. ",
    "nym": "I also ran into this issue, although I'm running modernizr 2.5.3\n. I have a similar problem related to complete being fired before large js files on slow connections (below 3G basically). \n. I also ran into this issue, although I'm running modernizr 2.5.3\n. I have a similar problem related to complete being fired before large js files on slow connections (below 3G basically). \n. ",
    "cgbeekman": "Your code sample works just fine. I investigated this some more and found out that the issue only occurs when the server does not send a Content-Type header. As soon as I added 'application/x-javascript' for JS it started working. The same goes for loading CSS files.\n\nI don't think this can be solved/handled in yepnope. Might be a good thing to document somewhere though.\n\nThanks!\n. Your code sample works just fine. I investigated this some more and found out that the issue only occurs when the server does not send a Content-Type header. As soon as I added 'application/x-javascript' for JS it started working. The same goes for loading CSS files.\n\nI don't think this can be solved/handled in yepnope. Might be a good thing to document somewhere though.\n\nThanks!\n. ",
    "AlicanC": "This gave the expected result on the worst (IE8) and the best (Chrome 15) browser I could find:\n\n``` javascript\n//Dummy yepnope\nvar yepnope = function()\n    {\n    if(arguments[0])\n        alert('I will load \"'+arguments[0].join('\" and \"')+'\".');\n    }\n\nvar e = document.getElementsByTagName('script');\nif(e = e[e.length-1].src.split('?', 2)[1])\n    for(var i in (e = e.split('&')))\n        if((i = e[i].split('=', 2))[0]=='load' && i[1])\n            yepnope(i[1].split(','));\n```\n\nIt simply assumes (knows?) that the last element in document.getElementsByTagName('script') is the current script. The rest is just plain text parsing.\n. This gave the expected result on the worst (IE8) and the best (Chrome 15) browser I could find:\n\n``` javascript\n//Dummy yepnope\nvar yepnope = function()\n    {\n    if(arguments[0])\n        alert('I will load \"'+arguments[0].join('\" and \"')+'\".');\n    }\n\nvar e = document.getElementsByTagName('script');\nif(e = e[e.length-1].src.split('?', 2)[1])\n    for(var i in (e = e.split('&')))\n        if((i = e[i].split('=', 2))[0]=='load' && i[1])\n            yepnope(i[1].split(','));\n```\n\nIt simply assumes (knows?) that the last element in document.getElementsByTagName('script') is the current script. The rest is just plain text parsing.\n. ",
    "SimplGy": "It's a pretty isolated test case. yepnope is one of the first things I put in. Here's the whole code base.\n\nIn one file I create a new application objecct.\nIn another file I start to build the initial view. The first thing I do is use yepnope to try to load in a component. The comments show both attempts.\n\nMarkup\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Tests for Tablet Devices</title>\n        <?php include 'stylesheets.inc.php' ?>\n        </head>\n        <body>\n\n```\n    tablet Tests\n\n\n\n    <?php include 'scripts.inc.php' ?>\n    <script>\n    var myCompany = myCompany || {}; //reference the old one, or, if it doesn't exist, make a new one.\n\n    $(function(){ //equivalent of doc ready\n        myCompany.curApp = new myCompany.emc();\n    }); //doc ready\n\n    </script>\n\n    </body>\n    </html>\n```\n\nJS\n       var myCompany = myCompany || {}; //reference the old one, or, if it doesn't exist, make a new one.\n\n```\n   //Constructor\n   myCompany.emc = function()\n   {\n       //Build the initial view state of the EMC application\n       this.buildInitialView();\n   }//Constructor\n\n\n\n   //Prototype\n   myCompany.emc.prototype = {\n       buildInitialView: function()\n       {\n           //Load the tab bar if this is a touch device (hypothetical)\n           //Otherwise, we could use some other UI.\n           //Once loaded, it executes the call back. we use this to initialize the new tab bar component\n           /*\n\n           yepnope({\n               test: true //hypothetical. Really we should be testing for touch UI capability here.\n           ,   yep: 'components/myCompany.slidingTabBar.js'\n           ,   callback: function(wasLoaded) {\n                   if (wasLoaded) {\n                       //console.log('this: ' + this);\n                       new myCompany.slidingTabBar();\n                   }//if\n               }//callback\n           });//yepnope\n           */   \n           yepnope({\n               load: 'components/myCompany.slidingTabBar.js'\n           ,   complete: function(thisEmc) {\n                   console.log('this: ' + this);\n                   console.log('thisEmc: ' + thisEmc);\n                   new myCompany.slidingTabBar();\n               }\n           });//yepnope\n       } \n   }//prototype\n```\n. It's even more isolated. It happens in even the most simple case. Must be a browser version thing? I noticed it lower cases all the requests except the first.\n\nhttp://i.imgur.com/KsAlZ.png\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n<title>Tests for Tablet Devices</title>\n</head>\n<body>\n\nnopenope.php\n\n\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js\"></script>\n<script src=\"global/modernizr-dev.js\"></script>\n<script src=\"global/yepnope/yepnope.js\"></script> <?php //replace with a version of modernizr that contains modernizr.load() ?>\n<script>\nyepnope('components/myCompany.slidingTabBar.js');\n</script>\n\n</body>\n</html>\n```\n. It's a pretty isolated test case. yepnope is one of the first things I put in. Here's the whole code base.\n\nIn one file I create a new application objecct.\nIn another file I start to build the initial view. The first thing I do is use yepnope to try to load in a component. The comments show both attempts.\n\nMarkup\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Tests for Tablet Devices</title>\n        <?php include 'stylesheets.inc.php' ?>\n        </head>\n        <body>\n\n```\n    tablet Tests\n\n\n\n    <?php include 'scripts.inc.php' ?>\n    <script>\n    var myCompany = myCompany || {}; //reference the old one, or, if it doesn't exist, make a new one.\n\n    $(function(){ //equivalent of doc ready\n        myCompany.curApp = new myCompany.emc();\n    }); //doc ready\n\n    </script>\n\n    </body>\n    </html>\n```\n\nJS\n       var myCompany = myCompany || {}; //reference the old one, or, if it doesn't exist, make a new one.\n\n```\n   //Constructor\n   myCompany.emc = function()\n   {\n       //Build the initial view state of the EMC application\n       this.buildInitialView();\n   }//Constructor\n\n\n\n   //Prototype\n   myCompany.emc.prototype = {\n       buildInitialView: function()\n       {\n           //Load the tab bar if this is a touch device (hypothetical)\n           //Otherwise, we could use some other UI.\n           //Once loaded, it executes the call back. we use this to initialize the new tab bar component\n           /*\n\n           yepnope({\n               test: true //hypothetical. Really we should be testing for touch UI capability here.\n           ,   yep: 'components/myCompany.slidingTabBar.js'\n           ,   callback: function(wasLoaded) {\n                   if (wasLoaded) {\n                       //console.log('this: ' + this);\n                       new myCompany.slidingTabBar();\n                   }//if\n               }//callback\n           });//yepnope\n           */   \n           yepnope({\n               load: 'components/myCompany.slidingTabBar.js'\n           ,   complete: function(thisEmc) {\n                   console.log('this: ' + this);\n                   console.log('thisEmc: ' + thisEmc);\n                   new myCompany.slidingTabBar();\n               }\n           });//yepnope\n       } \n   }//prototype\n```\n. It's even more isolated. It happens in even the most simple case. Must be a browser version thing? I noticed it lower cases all the requests except the first.\n\nhttp://i.imgur.com/KsAlZ.png\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n<title>Tests for Tablet Devices</title>\n</head>\n<body>\n\nnopenope.php\n\n\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js\"></script>\n<script src=\"global/modernizr-dev.js\"></script>\n<script src=\"global/yepnope/yepnope.js\"></script> <?php //replace with a version of modernizr that contains modernizr.load() ?>\n<script>\nyepnope('components/myCompany.slidingTabBar.js');\n</script>\n\n</body>\n</html>\n```\n. ",
    "ryanve": "[@aFarkas](#issuecomment-2853085) [@SlexAxton](#issuecomment-2878281) Thx\u2014that's super helpful!\n. [@aFarkas](#issuecomment-2853085) [@SlexAxton](#issuecomment-2878281) Thx\u2014that's super helpful!\n. ",
    "gregwebs": "Is this a stupid idea: run the yepnope at the bottom of the head in a setTimeout 0. The idea is that the yepnope js execution would now not block the page load, and the browser can start loading scripts while it is waiting to load content images.\n. Oh nevermind, that is probably basically how yepnope already works.\n. Is this a stupid idea: run the yepnope at the bottom of the head in a setTimeout 0. The idea is that the yepnope js execution would now not block the page load, and the browser can start loading scripts while it is waiting to load content images.\n. Oh nevermind, that is probably basically how yepnope already works.\n. ",
    "ptitgraig": "Hello!\nWe still reproduce this bug with yepnope v1.5.3 : the complete event is raised before the end of the execution of all the scripts. We can easily reproduce this bug when we try to \"brute force\" refresh the page on IE7-8-9 using the F5 key.\nOn IE7, this error can be raised only at the first page load (no need to try to refresh \"wildly\").\n\nPS : we are using yepnot through Modernizr 2.5.3\n. Hello!\nWe still reproduce this bug with yepnope v1.5.3 : the complete event is raised before the end of the execution of all the scripts. We can easily reproduce this bug when we try to \"brute force\" refresh the page on IE7-8-9 using the F5 key.\nOn IE7, this error can be raised only at the first page load (no need to try to refresh \"wildly\").\n\nPS : we are using yepnot through Modernizr 2.5.3\n. ",
    "uselesscode": "I've been wanting this too. Either a flag in `callback()` or a separate callback for errors would be useful.  A flag in `complete()` would be nice too.  \n\n I've been using yepnope to load all the scripts in a JS application I've been writing, displaying a progress bar as they complete and then displaying the application once everything is loaded. Unfortunately since `callback()` and `complete()` fire regardless of whether there was an error or not the app displays even when something fails to load. This generally breaks the app and gets really ugly when something like jQuery UI fails to load. I can usually tell when something hasn't loaded and just reload the page but some of my users may not be as perceptive about these things. It's a big enough issue that I've been considering ditching yepnope and just rewriting my loading code as a convoluted mess of `jQuery.ajax()` calls.\n. It wouldn't bother me too much if fewer browsers were supported, I tend to target only newer browsers anyway; the particular project that I mentioned already only works in a couple of browsers due to its use of [IndexedDB](http://www.w3.org/TR/IndexedDB/). ;-)\n\nI do understand your desire to support a wide variety of browsers though.\n\n`jQuery.getScript` actually just calls `jQuery.ajax` with the `dataType` set to `\"script\"` (by way of `jQuery.get`). Older versions of jQuery actually inserted a `<script>` tag although looking at the 1.8 source it looks like it now evals the script via the `globalEval` function.\n. It seems every version of jQuery gets harder for me to read, so many things abstracted into undocumented functions that call undocumented functions... It looks like you are right, digging a little deeper into the built jquery.js it looks like the code that injects a `<script>` tag has been moved into a call to `jQuery.ajaxTransport`. I had trouble finding it in their repo; it is no longer in ajax.js where I expected it, it's now in ajax/script.js\n. I've been wanting this too. Either a flag in `callback()` or a separate callback for errors would be useful.  A flag in `complete()` would be nice too.  \n\n I've been using yepnope to load all the scripts in a JS application I've been writing, displaying a progress bar as they complete and then displaying the application once everything is loaded. Unfortunately since `callback()` and `complete()` fire regardless of whether there was an error or not the app displays even when something fails to load. This generally breaks the app and gets really ugly when something like jQuery UI fails to load. I can usually tell when something hasn't loaded and just reload the page but some of my users may not be as perceptive about these things. It's a big enough issue that I've been considering ditching yepnope and just rewriting my loading code as a convoluted mess of `jQuery.ajax()` calls.\n. It wouldn't bother me too much if fewer browsers were supported, I tend to target only newer browsers anyway; the particular project that I mentioned already only works in a couple of browsers due to its use of [IndexedDB](http://www.w3.org/TR/IndexedDB/). ;-)\n\nI do understand your desire to support a wide variety of browsers though.\n\n`jQuery.getScript` actually just calls `jQuery.ajax` with the `dataType` set to `\"script\"` (by way of `jQuery.get`). Older versions of jQuery actually inserted a `<script>` tag although looking at the 1.8 source it looks like it now evals the script via the `globalEval` function.\n. It seems every version of jQuery gets harder for me to read, so many things abstracted into undocumented functions that call undocumented functions... It looks like you are right, digging a little deeper into the built jquery.js it looks like the code that injects a `<script>` tag has been moved into a call to `jQuery.ajaxTransport`. I had trouble finding it in their repo; it is no longer in ajax.js where I expected it, it's now in ajax/script.js\n. ",
    "Jakobud": "Thanks Alex!  I will try using the callback instead.\n. hey Alex, any word on when you guys are going to push out `v1.1`?\n. Woot!\n. Hey Alex,\n\nJust wanted to revisit this issue again with the latest version.  It looks like the above bug is fixed, but there is another issue that is semi-related.\n\nTo summarize: I'm not sure where the best place is to put jQuery-dependent code at that will ensure it runs even if the jQuery fallback script is used.\n\nTake the following example where the CDN is offline and the fallback is used:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nThis code will fail, because the jQuery code used to change the css of `div.whatever` runs before the fallback is done loading.\n\nNow, if you do the following code, it works fine:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: \"/js/jquery.plugin.js\",\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nThis works, because `jquery.plugin.js` doesn't try to load until after the fallback is loaded.  This works great.  But what about the case where you don't have any plugins to load and you simply just need to run some jQuery to manipulate the DOM or CSS or whatever?\n\nCan't do this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: \"\",\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nor this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: null,\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nbecause the `div.whatever` code doesn't wait until the jQuery fallback is loaded to run, since there is no script to load and wait on.\n\nAlso can't do this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n\n        $(document).ready(function(){\n            $(\"div.whatever\").css(\"color\",\"red\");\n        });\n    }\n}]);\n```\n\nAnd you can't put it outside yepnope either:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n}]);\n\n$(document).ready(function(){    // $ is undefined\n    $(\"div.whatever\").css(\"color\",\"red\");\n});\n```\n\nor simply:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n}]);\n\n$(\"div.whatever\").css(\"color\",\"red\");   // $ still undefined\n```\n\nThe only solution I can come up with is this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n'/js/another.script.js'\n]);\n```\n\nIn that example I just load up another file and have all my jQuery init/setup stuff in it.  This works because it waits to load that other script until after all the other stuff runs, including the jQuery fallback.  The only bad thing about this solution is that you have to load another file, which if is really small, like <4kb then it's more optimal to have it inline with the yepnope loading script...\n\nFirst of all, again, perhaps I'm misunderstanding how to use yepnope properly.  Is there an obvious place I should be placing jQuery stuff that will ensure it runs properly even after the fallback is used?\n\nThere are two possible solutions I can think of with regards to improving yepnope to fix this problem:\n1. The whole problem would be solved (I think) if the `yepnope('/js/jquery-1.7.1.min.js')` fallback had an option to load the script synchronously instead of asynchronously.  This would make the rest of the `complete` function wait until the script was loaded before continuing.\n2. The following would work:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: \"\",\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nif you still treated the empty script name as a script and putting in the loading queue anyways.  I see in the yepnope code that if the script is empty then it just returns.  If it continued like usual, added the empty script to the queue and then when  the script came to the front of the queue, return at that point, then it would maybe work then as well, because the complete function wouldn't run until then, at which point all the previous scripts (including the fallback) would have run because they already went through the queue.\n\nAnyways, let me know what you think and please let me know if I'm just doing everything wrong :-)\n. Yeah I was going to also suggest the solution you mentioned above about a separate function that is called in both of those places.  Hadn't considered the non-reexecuting thing, although I do recall reading about it in the changelog.  I'll mess with the callback function.  Haven't used that before.\n\nAnd I agree, a blank/empty script name isn't a good solution.  I'll take a look at the yepnope code and see if any better ideas hit him.  Honestly, it kind of goes against the spirit of yepnope and it's async loading style, but having the option to synchronously load a script if you want would be nice in situations like this.  Not sure how hard that would be to pull off with the existing code base.\n\nThanks for the suggestions, Alex!\n. Okay so some more experimentation:\n\nThe combination of complete/callback didn't seem to work either.  I think I'm doing it right... should that have worked?\n\nI also tried the following (that I really thought would work actually).  \n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function ()\n    {\n        if (!window.jQuery)\n        {\n                console.log(\"loading local file\");\n\n                var script=document.createElement('script');\n                script.setAttribute(\"type\",\"text/javascript\");\n                script.setAttribute(\"src\", 'local.jquery.min.js');\n                document.getElementsByTagName(\"head\")[0].appendChild(script);\n\n                console.log(\"done loading local file\");\n        }\n\n        console.log(\"some jQuery stuff\");\n\n        $(\"div.whatever\").css(\"color\",\"red\");\n\n        console.log(\"done with jQuery stuff\");\n    }\n}]);\n```\n\nIt just manually appends the local script to the head.  I thought this would work for sure... Not sure why.  I was thinking that if I didn't have the `async` attribute in there, that the script would not continue until it was done loading.  I guess I was wrong.  It looks like it appends the script node (at which point the local jquery .js starts to load) and then the script continues, at which it fails since `$` still isn't defined yet.\n\nI also tried this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function ()\n    {\n        if (!window.jQuery)\n        {\n                console.log(\"loading local file\");\n\n                var script=document.createElement('script');\n                script.setAttribute(\"type\",\"text/javascript\");\n                script.setAttribute(\"src\", 'local.jquery.min.js');\n                document.getElementsByTagName(\"head\")[0].appendChild(script);\n\n                while ( window.jQuery == null )\n                {\n                    setTimeout(function() {console.log(\"still not loaded yet\");},100);\n                }\n\n                console.log(\"done loading local file\");\n        }\n\n        console.log(\"some jQuery stuff\");\n\n        $(\"div.whatever\").css(\"color\",\"red\");\n\n        console.log(\"done with jQuery stuff\");\n    }\n}]);\n```\n\nTried to get the script just to sit in limbo until jQuery was loaded but it seemed to go on forever.  This probably doesn't work because setTimeout isn't really \"pausing\" the script.\n\nHonestly at this point, I think that the best solution here is go the external function route as you suggested above.  Define a function that \"inits\" all your jQuery stuff.  Set it to run after the fallback is run and run it if no fallback is run.\n\nI don't know if it's possible, very well might not be, but adding in an `async` parameter to yepnope (who's default value is `true`) would possibly solve the problem.  Something like this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope({ load: '/js/jquery-1.7.1.min.js', async: false });   // async default value is true\n        }\n\n        // Do jQuery-dependent stuff here...         \n    }\n  }]);\n```\n\nI think that would be the prettiest solution.  But it might not be possible with JS, not sure... I don't know if you can \"pause\" the script until the script is loaded or not.  I don't understand all the yepnope code, but perhaps doing something with the readyState stuff in there... test it to see if it's done loading or not before going to the next script/css in the stack... not sure.\n. Yeah I agree, the `callback` `complete` solution should work, at least in the way that I understand how yepnope is supposed to work.\n\nActually once I think about it, if the `callback` `complete` solution was working properly, that really is the proper solution for this entire problem.\n. Alex, regarding the delay that yepnope has in place for when a script comes back 404, can you point me toward more information about why that is there?  Like which browsers do and don't report back errors when trying to load a script and how do you test this?\n. That would be very helpful.  I'm not sure how that would work with browsers that didn't support onerror.\n. Thanks Alex!  I will try using the callback instead.\n. hey Alex, any word on when you guys are going to push out `v1.1`?\n. Woot!\n. Hey Alex,\n\nJust wanted to revisit this issue again with the latest version.  It looks like the above bug is fixed, but there is another issue that is semi-related.\n\nTo summarize: I'm not sure where the best place is to put jQuery-dependent code at that will ensure it runs even if the jQuery fallback script is used.\n\nTake the following example where the CDN is offline and the fallback is used:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nThis code will fail, because the jQuery code used to change the css of `div.whatever` runs before the fallback is done loading.\n\nNow, if you do the following code, it works fine:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: \"/js/jquery.plugin.js\",\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nThis works, because `jquery.plugin.js` doesn't try to load until after the fallback is loaded.  This works great.  But what about the case where you don't have any plugins to load and you simply just need to run some jQuery to manipulate the DOM or CSS or whatever?\n\nCan't do this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: \"\",\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nor this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: null,\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nbecause the `div.whatever` code doesn't wait until the jQuery fallback is loaded to run, since there is no script to load and wait on.\n\nAlso can't do this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n\n        $(document).ready(function(){\n            $(\"div.whatever\").css(\"color\",\"red\");\n        });\n    }\n}]);\n```\n\nAnd you can't put it outside yepnope either:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n}]);\n\n$(document).ready(function(){    // $ is undefined\n    $(\"div.whatever\").css(\"color\",\"red\");\n});\n```\n\nor simply:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n}]);\n\n$(\"div.whatever\").css(\"color\",\"red\");   // $ still undefined\n```\n\nThe only solution I can come up with is this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n'/js/another.script.js'\n]);\n```\n\nIn that example I just load up another file and have all my jQuery init/setup stuff in it.  This works because it waits to load that other script until after all the other stuff runs, including the jQuery fallback.  The only bad thing about this solution is that you have to load another file, which if is really small, like <4kb then it's more optimal to have it inline with the yepnope loading script...\n\nFirst of all, again, perhaps I'm misunderstanding how to use yepnope properly.  Is there an obvious place I should be placing jQuery stuff that will ensure it runs properly even after the fallback is used?\n\nThere are two possible solutions I can think of with regards to improving yepnope to fix this problem:\n1. The whole problem would be solved (I think) if the `yepnope('/js/jquery-1.7.1.min.js')` fallback had an option to load the script synchronously instead of asynchronously.  This would make the rest of the `complete` function wait until the script was loaded before continuing.\n2. The following would work:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope('/js/jquery-1.7.1.min.js');\n        }\n    }\n},\n{\n    load: \"\",\n    complete: function() {\n        $(\"div.whatever\").css(\"color\",\"red\");\n    }\n}]);\n```\n\nif you still treated the empty script name as a script and putting in the loading queue anyways.  I see in the yepnope code that if the script is empty then it just returns.  If it continued like usual, added the empty script to the queue and then when  the script came to the front of the queue, return at that point, then it would maybe work then as well, because the complete function wouldn't run until then, at which point all the previous scripts (including the fallback) would have run because they already went through the queue.\n\nAnyways, let me know what you think and please let me know if I'm just doing everything wrong :-)\n. Yeah I was going to also suggest the solution you mentioned above about a separate function that is called in both of those places.  Hadn't considered the non-reexecuting thing, although I do recall reading about it in the changelog.  I'll mess with the callback function.  Haven't used that before.\n\nAnd I agree, a blank/empty script name isn't a good solution.  I'll take a look at the yepnope code and see if any better ideas hit him.  Honestly, it kind of goes against the spirit of yepnope and it's async loading style, but having the option to synchronously load a script if you want would be nice in situations like this.  Not sure how hard that would be to pull off with the existing code base.\n\nThanks for the suggestions, Alex!\n. Okay so some more experimentation:\n\nThe combination of complete/callback didn't seem to work either.  I think I'm doing it right... should that have worked?\n\nI also tried the following (that I really thought would work actually).  \n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function ()\n    {\n        if (!window.jQuery)\n        {\n                console.log(\"loading local file\");\n\n                var script=document.createElement('script');\n                script.setAttribute(\"type\",\"text/javascript\");\n                script.setAttribute(\"src\", 'local.jquery.min.js');\n                document.getElementsByTagName(\"head\")[0].appendChild(script);\n\n                console.log(\"done loading local file\");\n        }\n\n        console.log(\"some jQuery stuff\");\n\n        $(\"div.whatever\").css(\"color\",\"red\");\n\n        console.log(\"done with jQuery stuff\");\n    }\n}]);\n```\n\nIt just manually appends the local script to the head.  I thought this would work for sure... Not sure why.  I was thinking that if I didn't have the `async` attribute in there, that the script would not continue until it was done loading.  I guess I was wrong.  It looks like it appends the script node (at which point the local jquery .js starts to load) and then the script continues, at which it fails since `$` still isn't defined yet.\n\nI also tried this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n    complete: function ()\n    {\n        if (!window.jQuery)\n        {\n                console.log(\"loading local file\");\n\n                var script=document.createElement('script');\n                script.setAttribute(\"type\",\"text/javascript\");\n                script.setAttribute(\"src\", 'local.jquery.min.js');\n                document.getElementsByTagName(\"head\")[0].appendChild(script);\n\n                while ( window.jQuery == null )\n                {\n                    setTimeout(function() {console.log(\"still not loaded yet\");},100);\n                }\n\n                console.log(\"done loading local file\");\n        }\n\n        console.log(\"some jQuery stuff\");\n\n        $(\"div.whatever\").css(\"color\",\"red\");\n\n        console.log(\"done with jQuery stuff\");\n    }\n}]);\n```\n\nTried to get the script just to sit in limbo until jQuery was loaded but it seemed to go on forever.  This probably doesn't work because setTimeout isn't really \"pausing\" the script.\n\nHonestly at this point, I think that the best solution here is go the external function route as you suggested above.  Define a function that \"inits\" all your jQuery stuff.  Set it to run after the fallback is run and run it if no fallback is run.\n\nI don't know if it's possible, very well might not be, but adding in an `async` parameter to yepnope (who's default value is `true`) would possibly solve the problem.  Something like this:\n\n```\nyepnope([{\n    load: '//ajax.googleapisOFFLINE.com/ajaxX/libs/jquery/1.7.1/jquery.min.js',\n    complete: function () {\n        if (!window.jQuery) {\n            yepnope({ load: '/js/jquery-1.7.1.min.js', async: false });   // async default value is true\n        }\n\n        // Do jQuery-dependent stuff here...         \n    }\n  }]);\n```\n\nI think that would be the prettiest solution.  But it might not be possible with JS, not sure... I don't know if you can \"pause\" the script until the script is loaded or not.  I don't understand all the yepnope code, but perhaps doing something with the readyState stuff in there... test it to see if it's done loading or not before going to the next script/css in the stack... not sure.\n. Yeah I agree, the `callback` `complete` solution should work, at least in the way that I understand how yepnope is supposed to work.\n\nActually once I think about it, if the `callback` `complete` solution was working properly, that really is the proper solution for this entire problem.\n. Alex, regarding the delay that yepnope has in place for when a script comes back 404, can you point me toward more information about why that is there?  Like which browsers do and don't report back errors when trying to load a script and how do you test this?\n. That would be very helpful.  I'm not sure how that would work with browsers that didn't support onerror.\n. ",
    "DonSanto": "Sweet. I was having the exact same problem. Good to know a solution is on its way. I like the callback/complete solution  when you don't have any other jQuery/otherLibrary dependent script to load before domload.\n. Sweet. I was having the exact same problem. Good to know a solution is on its way. I like the callback/complete solution  when you don't have any other jQuery/otherLibrary dependent script to load before domload.\n. ",
    "EnigmaSolved": "> It looks like the complete callback is not waiting for inner yepnope calls to complete before it fires. This is indeed a bug.\n\nDid this ever get resolved/fixed?  I think I am seeing this problem with yepnope 1.5.4 as well as Modernizr 2.5.3 (which I assume is using the same yepnope code).  Here is an example:\n\n```\nyepnope([\n    {\n        load: 'http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js',\n        callback: function(url, result, key){\n            if (!window.jQuery){yepnope('jquery/1.7.2/jquery.min.js');}\n        },\n        complete: function(){mft.init();}\n    },\n    {\n        test: mft.ldHS,\n        yep: 'highslide/4.1.9/highslide3.js',\n        complete: function(){mft.loadHighslide();}\n    }\n]);\n\n```\n\nmft.init() and mft.loadHighslide both depend on jQuery.  What I am observing is that if mft.ldHS is set to False, then the complete that calls mft.loadHighslide is firing **before** the complete that calls mft.init **and** also before jQuery is ready (so I get a jQuery is undefined error).  Either I'm misunderstanding how yepnope works (which is certainly possible), or things aren't working the way they are supposed to.\n\nMy expectation/interpretation is that the order should be as follows:\n- try to load jQuery from Google, and if that fails, then load local fallback;\n- once jQuery (either one) has loaded, the _complete_ fires that calls mft.init;\n- then, test mft.ldHS; if True, load highslide3.js; either way, call the _complete_ that fires mft.loadHighslide (yes, I know I'm calling this even if highslide3.js is not loaded).\n\nI'm posting this in this thread/issue because it seems like exactly what @ralphholzmann was describing (ie, the complete not waiting).  I am guessing that I can use callbacks instead of completes in the meantime, but I'd rather use completes if they can function the way (I think) they're supposed to.\n\nAny help on this would be greatly appreciated!  :-)\n. > It looks like the complete callback is not waiting for inner yepnope calls to complete before it fires. This is indeed a bug.\n\nDid this ever get resolved/fixed?  I think I am seeing this problem with yepnope 1.5.4 as well as Modernizr 2.5.3 (which I assume is using the same yepnope code).  Here is an example:\n\n```\nyepnope([\n    {\n        load: 'http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js',\n        callback: function(url, result, key){\n            if (!window.jQuery){yepnope('jquery/1.7.2/jquery.min.js');}\n        },\n        complete: function(){mft.init();}\n    },\n    {\n        test: mft.ldHS,\n        yep: 'highslide/4.1.9/highslide3.js',\n        complete: function(){mft.loadHighslide();}\n    }\n]);\n\n```\n\nmft.init() and mft.loadHighslide both depend on jQuery.  What I am observing is that if mft.ldHS is set to False, then the complete that calls mft.loadHighslide is firing **before** the complete that calls mft.init **and** also before jQuery is ready (so I get a jQuery is undefined error).  Either I'm misunderstanding how yepnope works (which is certainly possible), or things aren't working the way they are supposed to.\n\nMy expectation/interpretation is that the order should be as follows:\n- try to load jQuery from Google, and if that fails, then load local fallback;\n- once jQuery (either one) has loaded, the _complete_ fires that calls mft.init;\n- then, test mft.ldHS; if True, load highslide3.js; either way, call the _complete_ that fires mft.loadHighslide (yes, I know I'm calling this even if highslide3.js is not loaded).\n\nI'm posting this in this thread/issue because it seems like exactly what @ralphholzmann was describing (ie, the complete not waiting).  I am guessing that I can use callbacks instead of completes in the meantime, but I'd rather use completes if they can function the way (I think) they're supposed to.\n\nAny help on this would be greatly appreciated!  :-)\n. ",
    "gburgett": "I'm not sure how it would hook in to be notified when yepnope is done loading.  It's important that execReadies happens immediately after a script is loaded and the associated callbacks are fired.  I'll take a look at the plugin interface you guys have made in v1.1, and see if it could function as a plugin.\n\nedit: whoops hit close and comment by accident, but thats okay because request #84 is more current\n. I am attempting to write a plugin to do this, and am debating what to expose to my plugin.\n\nOption 1 is to expose loadScriptOrStyle as a property so I can override it in the plugin and queue another callback function.  This has the disadvantage of exposing loadScriptOrStyle publicly, but is only 1 additional line in the main yepnope.js.  It also requires moving loadScriptOrStyle and its dependent functions out of the yepnope function.\n\nOption 2 is to override the yepnope loader and replace it with my own, this has the advantage that the yepnope loader is already exposed, but the disadvantage that the existing callbacks call getYepnope() which creates and attaches a fresh loader.  This would have to change, and I'd need to figure out a way to translate the index reset (which I imagine is the main purpose of that call) down through the override to the base loader.  Possibly 2 or 3 more lines of code in yepnope.js.\n\nI prefer option 2, though we may regret that if later the loader needs to reset more state than just the index.  However if that is the case, exposing getYepnope so it can be overridden might solve that problem.\n\n-Gordon\n. After fiddling a bit more, I'm pretty confident I can do it all as a filter.  Will get that tested and submit another pull request soon.\n. As I was hoping, I was able to do it as a filter.  The plugin injects itself by adding a filter and then adding an autoCallback on every resource.\n\nOne thing I changed in the main yepnope, the index is now passed to the filter.  I needed this to get the callback key associated with a resource.  Take a look here: https://github.com/gburgett/yepnope.js/commit/54082ec6ac2e7f66bcfbc80ebfe75bd4dc56a5da\n\nI am still writing QUnit tests for the plugin, will submit a pull request when those are done.  Unless you guys need to roll out 1.5 sooner.\n\nThanks,\n-Gordon\n. plugin is good to go now.\n. Any word on when v1.1 is coming out?  Would like to be able to convince my boss to use this plugin.\n. I'm not sure how it would hook in to be notified when yepnope is done loading.  It's important that execReadies happens immediately after a script is loaded and the associated callbacks are fired.  I'll take a look at the plugin interface you guys have made in v1.1, and see if it could function as a plugin.\n\nedit: whoops hit close and comment by accident, but thats okay because request #84 is more current\n. I am attempting to write a plugin to do this, and am debating what to expose to my plugin.\n\nOption 1 is to expose loadScriptOrStyle as a property so I can override it in the plugin and queue another callback function.  This has the disadvantage of exposing loadScriptOrStyle publicly, but is only 1 additional line in the main yepnope.js.  It also requires moving loadScriptOrStyle and its dependent functions out of the yepnope function.\n\nOption 2 is to override the yepnope loader and replace it with my own, this has the advantage that the yepnope loader is already exposed, but the disadvantage that the existing callbacks call getYepnope() which creates and attaches a fresh loader.  This would have to change, and I'd need to figure out a way to translate the index reset (which I imagine is the main purpose of that call) down through the override to the base loader.  Possibly 2 or 3 more lines of code in yepnope.js.\n\nI prefer option 2, though we may regret that if later the loader needs to reset more state than just the index.  However if that is the case, exposing getYepnope so it can be overridden might solve that problem.\n\n-Gordon\n. After fiddling a bit more, I'm pretty confident I can do it all as a filter.  Will get that tested and submit another pull request soon.\n. As I was hoping, I was able to do it as a filter.  The plugin injects itself by adding a filter and then adding an autoCallback on every resource.\n\nOne thing I changed in the main yepnope, the index is now passed to the filter.  I needed this to get the callback key associated with a resource.  Take a look here: https://github.com/gburgett/yepnope.js/commit/54082ec6ac2e7f66bcfbc80ebfe75bd4dc56a5da\n\nI am still writing QUnit tests for the plugin, will submit a pull request when those are done.  Unless you guys need to roll out 1.5 sooner.\n\nThanks,\n-Gordon\n. plugin is good to go now.\n. Any word on when v1.1 is coming out?  Would like to be able to convince my boss to use this plugin.\n. ",
    "termi": "It is in Chrome and Opera also.\n\nCould we do something like this?\n\n``` javascript\n// Testing for can we use bogus `script` type or not\nwindow['yepnope']['isBogus'] = true;\nvar o = doc.createElement( \"script\" );\no.type = \"e1\";\no.src = \"data:application/x-javascript,yepnope.isBogus%3Dfalse\";\no.onload = o.onerror = o.onreadystatechange = function() {\nwindow['yepnope']['isBogus'] = true;//yuuuhoooooo\n}\nfirstScript.parentNode.insertBefore( o, firstScript )\n```\n. Checked. Does not work :(\n\nupdate: It work in IE9 well. So, if you targeting only for caching in IE, it can solve the problem\n. It is in Chrome and Opera also.\n\nCould we do something like this?\n\n``` javascript\n// Testing for can we use bogus `script` type or not\nwindow['yepnope']['isBogus'] = true;\nvar o = doc.createElement( \"script\" );\no.type = \"e1\";\no.src = \"data:application/x-javascript,yepnope.isBogus%3Dfalse\";\no.onload = o.onerror = o.onreadystatechange = function() {\nwindow['yepnope']['isBogus'] = true;//yuuuhoooooo\n}\nfirstScript.parentNode.insertBefore( o, firstScript )\n```\n. Checked. Does not work :(\n\nupdate: It work in IE9 well. So, if you targeting only for caching in IE, it can solve the problem\n. ",
    "tubalmartin": "I'm afraid there's an issue with your included scripts, not with Yepnope. \n\nI've tested your code on FF 10 & Chrome and everything works perfectly with YepNope 1.5.2.\n\nMake a test on a blank index.html file...and you'll see it works, here's the console output of your code:\n\nhttp://www.yandex.ru/dropcounters.js false 0\nsocReset is not defined socReset(0) dropcounters.js (l\u00ednea 1)\nhttp://www.yandex.ru/dropcounters.js false 0\n. I'm afraid there's an issue with your included scripts, not with Yepnope. \n\nI've tested your code on FF 10 & Chrome and everything works perfectly with YepNope 1.5.2.\n\nMake a test on a blank index.html file...and you'll see it works, here's the console output of your code:\n\nhttp://www.yandex.ru/dropcounters.js false 0\nsocReset is not defined socReset(0) dropcounters.js (l\u00ednea 1)\nhttp://www.yandex.ru/dropcounters.js false 0\n. ",
    "homm": "How it can be happen?\nhttp://www.youtube.com/watch?v=DcZO5Bod4Sw\n\nAnd after first call file appear in network inspector twice. \n. This is not related to Firefox. I have same error in Opera:\n\nhttp://img837.imageshack.us/img837/9357/screenshot20120209at124.png\n\nIn Chrome there are no errors, but behavior total unexpected. I use another script for test.\n\nhttp://img849.imageshack.us/img849/7162/screenshot20120209at125.png\n. How it can be happen?\nhttp://www.youtube.com/watch?v=DcZO5Bod4Sw\n\nAnd after first call file appear in network inspector twice. \n. This is not related to Firefox. I have same error in Opera:\n\nhttp://img837.imageshack.us/img837/9357/screenshot20120209at124.png\n\nIn Chrome there are no errors, but behavior total unexpected. I use another script for test.\n\nhttp://img849.imageshack.us/img849/7162/screenshot20120209at125.png\n. ",
    "aportilla": "Here's a live repro of this issue:  http://adamportilla.net/yepnopetest/\n\nThis causes the 'Could not convert JavaScript argument arg 0' error in FF 10.0.1,  but not in Chrome or Safari.\n\nOddly,  if you switch it around, and load setB before setA,  this will not cause an error in FF,  even though the sets overlap in the same way.\n\n```\n  var setA = ['test1.js','test2.js'];\n\n  var setB = ['test3.js','test1.js'];\n\n  yepnope({\n\n    load: setA,\n    complete: function () {\n\n      console.log('set A loaded');\n\n      yepnope({\n\n        load: setB,\n        complete: function () {\n\n          console.log('set B loaded');\n\n      }});\n\n  }});\n```\n. Looks like there's a related issue when CSS files are included in 1.5.4pre using the yepnope.css.js plugin.  When a duplicate css dependency is loaded, it does not trigger the complete callback method.\n\nIn this example, because test1.css is included in both sets,  the complete callback for the second set is not executed.\n\nExample is posted online here:  http://adamportilla.net/yepnopetest/1.5.4withCSS.html\n\n```\n  var setA = ['test1.js','test2.js','test1.css'];\n\n  var setB = ['test3.js','test1.js','test1.css'];\n\n\n  yepnope({\n\n    load: setA,\n    complete: function () {\n\n      console.log('set A loaded');\n\n      yepnope({\n\n        load: setB,\n        complete: function () {\n\n          console.log('set B loaded');\n\n      }});\n\n  }});\n```\n. The CSS complete bug described above appears to be fixed by updating the if statement in the yepnope.css.js plugin.\n\nfrom this:\n\n```\nif ( ! err ) {\n  ref = document.getElementsByTagName('base')[0] || document.getElementsByTagName('script')[0];\n  ref.parentNode.insertBefore( link, ref );\n  link.onload = onload;\n\n  function poll() {\n    try {\n        var sheets = document.styleSheets;\n        for(var j=0, k=sheets.length; j<k; j++) {\n            if(sheets[j].ownerNode.id == id) {\n                sheets[j].cssRules;\n            }\n        }\n        // If you made it here, success!\n        onload();\n    } catch(e) {\n        // Keep polling\n        setTimeout(poll, 20);\n    }\n  }\n  poll();\n}\n```\n\nto this ( just adding an 'else' case ):\n\n```\nif ( ! err ) {\n  ref = document.getElementsByTagName('base')[0] || document.getElementsByTagName('script')[0];\n  ref.parentNode.insertBefore( link, ref );\n  link.onload = onload;\n\n  function poll() {\n    try {\n        var sheets = document.styleSheets;\n        for(var j=0, k=sheets.length; j<k; j++) {\n            if(sheets[j].ownerNode.id == id) {\n                sheets[j].cssRules;\n            }\n        }\n        // If you made it here, success!\n        onload();\n    } catch(e) {\n        // Keep polling\n        setTimeout(poll, 20);\n    }\n  }\n  poll();\n} else {\n  setTimeout( cb, 0 );\n}\n```\n. Here's a live repro of this issue:  http://adamportilla.net/yepnopetest/\n\nThis causes the 'Could not convert JavaScript argument arg 0' error in FF 10.0.1,  but not in Chrome or Safari.\n\nOddly,  if you switch it around, and load setB before setA,  this will not cause an error in FF,  even though the sets overlap in the same way.\n\n```\n  var setA = ['test1.js','test2.js'];\n\n  var setB = ['test3.js','test1.js'];\n\n  yepnope({\n\n    load: setA,\n    complete: function () {\n\n      console.log('set A loaded');\n\n      yepnope({\n\n        load: setB,\n        complete: function () {\n\n          console.log('set B loaded');\n\n      }});\n\n  }});\n```\n. Looks like there's a related issue when CSS files are included in 1.5.4pre using the yepnope.css.js plugin.  When a duplicate css dependency is loaded, it does not trigger the complete callback method.\n\nIn this example, because test1.css is included in both sets,  the complete callback for the second set is not executed.\n\nExample is posted online here:  http://adamportilla.net/yepnopetest/1.5.4withCSS.html\n\n```\n  var setA = ['test1.js','test2.js','test1.css'];\n\n  var setB = ['test3.js','test1.js','test1.css'];\n\n\n  yepnope({\n\n    load: setA,\n    complete: function () {\n\n      console.log('set A loaded');\n\n      yepnope({\n\n        load: setB,\n        complete: function () {\n\n          console.log('set B loaded');\n\n      }});\n\n  }});\n```\n. The CSS complete bug described above appears to be fixed by updating the if statement in the yepnope.css.js plugin.\n\nfrom this:\n\n```\nif ( ! err ) {\n  ref = document.getElementsByTagName('base')[0] || document.getElementsByTagName('script')[0];\n  ref.parentNode.insertBefore( link, ref );\n  link.onload = onload;\n\n  function poll() {\n    try {\n        var sheets = document.styleSheets;\n        for(var j=0, k=sheets.length; j<k; j++) {\n            if(sheets[j].ownerNode.id == id) {\n                sheets[j].cssRules;\n            }\n        }\n        // If you made it here, success!\n        onload();\n    } catch(e) {\n        // Keep polling\n        setTimeout(poll, 20);\n    }\n  }\n  poll();\n}\n```\n\nto this ( just adding an 'else' case ):\n\n```\nif ( ! err ) {\n  ref = document.getElementsByTagName('base')[0] || document.getElementsByTagName('script')[0];\n  ref.parentNode.insertBefore( link, ref );\n  link.onload = onload;\n\n  function poll() {\n    try {\n        var sheets = document.styleSheets;\n        for(var j=0, k=sheets.length; j<k; j++) {\n            if(sheets[j].ownerNode.id == id) {\n                sheets[j].cssRules;\n            }\n        }\n        // If you made it here, success!\n        onload();\n    } catch(e) {\n        // Keep polling\n        setTimeout(poll, 20);\n    }\n  }\n  poll();\n} else {\n  setTimeout( cb, 0 );\n}\n```\n. ",
    "cybercussion": "I am having a similar issue.  I call logic that can occur one to many times or not at all.  So I need it to at minimum fire the callback/complete if it already exists so it can create a new instance and continue on its merry way.\n\nLooks like when resource['noexec'] = true;  it doesn't place it in the DOM which is good.  But its not clear to me where I should be forcing a callback.  I'll keep looking, but I just wanted to mention my situation as a use case.\n. I am having a similar issue.  I call logic that can occur one to many times or not at all.  So I need it to at minimum fire the callback/complete if it already exists so it can create a new instance and continue on its merry way.\n\nLooks like when resource['noexec'] = true;  it doesn't place it in the DOM which is good.  But its not clear to me where I should be forcing a callback.  I'll keep looking, but I just wanted to mention my situation as a use case.\n. ",
    "bugdebugger": "Made the pull request, hope it's ok this way.\nI added the `isOpera` flag to the `isIE` check so I don't need to change both the `strJsElem` and `strCssElem` expressions.\n\nbtw it looks like it automatically opened another issue (#89).\n\nI'm not sure if there are still more issues with Opera, as on my system the test suite isn't passing. But that could be because I used apache not nodejs. So please check if the tests pass for you in Opera\n. @lencioni that happens because in the test cases I directly linked to the yepnope files on github. e.g. `https://raw.github.com/SlexAxton/yepnope.js/v1.5.2/yepnope.js`\nGithub serves these raw files as `text/plain` which stops IE9 from parsing them as javascript, thus yepnope isn't loaded. \n\nThe error console in IE9 also mentions this with a \"SEC7112\" warning right before the error messages.\n\nHere you can read more about the [MIME-Handling Changes in Internet Explorer 9](http://blogs.msdn.com/b/ie/archive/2010/10/26/mime-handling-changes-in-internet-explorer.aspx)\n. This isn't yepnope's fault by any means, as far as I can tell.\n\nWhat you \"stumbled\" upon is a behavior which only shows under specific circumstances.\n- Asynchronously loading a js-library (jQuery, MooTools, ...)\n- (Thus) js-Library loading after the `DOMContentLoaded`-event has already fired\n- Using the frameworks \"_document has loaded_\"-helper in the yepnope callback\n- Having a long loading resource on the page (big image, slow iframe, ...)\n\nNote: In all modern browsers (due to the long loading resource) `document.readyState` will be set to `interactive` until the resource is loaded.\n\n## \n\nAll of this causes the js-library to wait until the long loading resource is loaded, before it fires the stuff bound via  it's \"_document has loaded_\"-helper. The reason slightly differs from library to library. As the `DOMContentLoaded`-event was missed:\n- **jQuery**: waits for the `load`-event to fire\n- **MooTools**: waits for`readyState` to become `loaded` or `complete` (via `readystatechange`-event or polling)\n- **domready**: works as this [regexp](https://github.com/ded/domready/blob/master/ready.js#L14) also matches `interactive`. Instead of only matching `loaded` or `complete`, which was the authors original intend (Compare to this [check](https://github.com/ded/domready/blob/master/ready.js#L28) and the commit history).\n\n## \n\nA few links for further reading:\n\n[W3 HTML5 Parsing](http://www.w3.org/TR/html5/the-end.html#the-end) (DOMContentLoaded)\n[WHATWG document.readyState](http://www.whatwg.org/specs/web-apps/current-work/multipage/dom.html#current-document-readiness) Scroll a bit up to the see right green box about readyState\n[MooTools' 1.4.5 DOMReady](https://github.com/mootools/mootools-core/blob/1.4.5/Source/Utilities/DOMReady.js) implementation\n[jQuery's 1.7.1 $.ready](https://github.com/jquery/jquery/blob/1.7.1/src/core.js#L423-L466) implementation (There is more to `$.ready` but this is the relevant stuff)\n[**jQuery Bug Report**](http://bugs.jquery.com/ticket/10067) regarding `readyState === 'interactive'` and `jQuery.ready`\n[domready Bug Report](https://github.com/ded/domready/issues/12) not directly related, but in a comment [jdalton](https://github.com/ded/domready/issues/12#issuecomment-2750146) points out the regexp error\n. Made the pull request, hope it's ok this way.\nI added the `isOpera` flag to the `isIE` check so I don't need to change both the `strJsElem` and `strCssElem` expressions.\n\nbtw it looks like it automatically opened another issue (#89).\n\nI'm not sure if there are still more issues with Opera, as on my system the test suite isn't passing. But that could be because I used apache not nodejs. So please check if the tests pass for you in Opera\n. @lencioni that happens because in the test cases I directly linked to the yepnope files on github. e.g. `https://raw.github.com/SlexAxton/yepnope.js/v1.5.2/yepnope.js`\nGithub serves these raw files as `text/plain` which stops IE9 from parsing them as javascript, thus yepnope isn't loaded. \n\nThe error console in IE9 also mentions this with a \"SEC7112\" warning right before the error messages.\n\nHere you can read more about the [MIME-Handling Changes in Internet Explorer 9](http://blogs.msdn.com/b/ie/archive/2010/10/26/mime-handling-changes-in-internet-explorer.aspx)\n. This isn't yepnope's fault by any means, as far as I can tell.\n\nWhat you \"stumbled\" upon is a behavior which only shows under specific circumstances.\n- Asynchronously loading a js-library (jQuery, MooTools, ...)\n- (Thus) js-Library loading after the `DOMContentLoaded`-event has already fired\n- Using the frameworks \"_document has loaded_\"-helper in the yepnope callback\n- Having a long loading resource on the page (big image, slow iframe, ...)\n\nNote: In all modern browsers (due to the long loading resource) `document.readyState` will be set to `interactive` until the resource is loaded.\n\n## \n\nAll of this causes the js-library to wait until the long loading resource is loaded, before it fires the stuff bound via  it's \"_document has loaded_\"-helper. The reason slightly differs from library to library. As the `DOMContentLoaded`-event was missed:\n- **jQuery**: waits for the `load`-event to fire\n- **MooTools**: waits for`readyState` to become `loaded` or `complete` (via `readystatechange`-event or polling)\n- **domready**: works as this [regexp](https://github.com/ded/domready/blob/master/ready.js#L14) also matches `interactive`. Instead of only matching `loaded` or `complete`, which was the authors original intend (Compare to this [check](https://github.com/ded/domready/blob/master/ready.js#L28) and the commit history).\n\n## \n\nA few links for further reading:\n\n[W3 HTML5 Parsing](http://www.w3.org/TR/html5/the-end.html#the-end) (DOMContentLoaded)\n[WHATWG document.readyState](http://www.whatwg.org/specs/web-apps/current-work/multipage/dom.html#current-document-readiness) Scroll a bit up to the see right green box about readyState\n[MooTools' 1.4.5 DOMReady](https://github.com/mootools/mootools-core/blob/1.4.5/Source/Utilities/DOMReady.js) implementation\n[jQuery's 1.7.1 $.ready](https://github.com/jquery/jquery/blob/1.7.1/src/core.js#L423-L466) implementation (There is more to `$.ready` but this is the relevant stuff)\n[**jQuery Bug Report**](http://bugs.jquery.com/ticket/10067) regarding `readyState === 'interactive'` and `jQuery.ready`\n[domready Bug Report](https://github.com/ded/domready/issues/12) not directly related, but in a comment [jdalton](https://github.com/ded/domready/issues/12#issuecomment-2750146) points out the regexp error\n. ",
    "lencioni": "FWIW, none of the three test cases work for me in IE 9.0.8112.16421 (compatibility view off). I just get this:\n\n```\nBefore yepnope({...}): Tuesday, February 14, 2012 9:22:00 AM\n\ncallback called: \n\ncomplete called: \n```\n\nIf I go to `Tools > Internet Options > Advanced` and uncheck `Disable script debugging (Internet Explorer)`, I get the following error messages:\n\nTest case 1: \n\n```\nLine: 36\nError: 'yepnope' is undefined\n```\n\nTest case 2:\n\n```\nLine: 39\nError: 'yepnope' is undefined\n```\n\nTest case 3:\n\n```\nLine: 36\nError: 'yepnope' is undefined\n```\n. Duplicate? https://github.com/SlexAxton/yepnope.js/issues/96\n. :+1: \n. FWIW, none of the three test cases work for me in IE 9.0.8112.16421 (compatibility view off). I just get this:\n\n```\nBefore yepnope({...}): Tuesday, February 14, 2012 9:22:00 AM\n\ncallback called: \n\ncomplete called: \n```\n\nIf I go to `Tools > Internet Options > Advanced` and uncheck `Disable script debugging (Internet Explorer)`, I get the following error messages:\n\nTest case 1: \n\n```\nLine: 36\nError: 'yepnope' is undefined\n```\n\nTest case 2:\n\n```\nLine: 39\nError: 'yepnope' is undefined\n```\n\nTest case 3:\n\n```\nLine: 36\nError: 'yepnope' is undefined\n```\n. Duplicate? https://github.com/SlexAxton/yepnope.js/issues/96\n. :+1: \n. ",
    "programmieraffe": "This is very odd. Is there a workaround?\n. This is very odd. Is there a workaround?\n. ",
    "jscheel": "So, totally just lost about 2 hours to this. Here's a quick workaround: use underscore to wrap your yepnope in a _.once, or just use a boolean to track that it's only loaded once. Also, don't forget to defer execution, so that yepnope doesn't prevent the last call because it finds a resource in cache.\n. It appears that yepnope cannot handle cross-origin stylesheets in Safari 5. Any thoughts?\n. So, totally just lost about 2 hours to this. Here's a quick workaround: use underscore to wrap your yepnope in a _.once, or just use a boolean to track that it's only loaded once. Also, don't forget to defer execution, so that yepnope doesn't prevent the last call because it finds a resource in cache.\n. It appears that yepnope cannot handle cross-origin stylesheets in Safari 5. Any thoughts?\n. ",
    "ritcoder": "Is there a workaround to this? Some code might help.\n. I realised that I also had the issue in application when the same call is made more than once. Eg. where difference section of the code is using yepnope to load similar calls. I fixed it by writing  a helper class and introducing a field named testFn instead of just test. \n\nI realised that, in loading angular and using [test:window.angular], any such test will return false as long as the library is not loaded but testFn defined as function(){ return window.angular;} will return true after it is loaded.\n\nNot sure if it is the best approach but that is how I got it to work.\n. Is there a workaround to this? Some code might help.\n. I realised that I also had the issue in application when the same call is made more than once. Eg. where difference section of the code is using yepnope to load similar calls. I fixed it by writing  a helper class and introducing a field named testFn instead of just test. \n\nI realised that, in loading angular and using [test:window.angular], any such test will return false as long as the library is not loaded but testFn defined as function(){ return window.angular;} will return true after it is loaded.\n\nNot sure if it is the best approach but that is how I got it to work.\n. ",
    "jontro": "Can you write a line about this on the first page? \n\"Scripts with the same url won't execute twice, but their callbacks fire in the correct order.\" is listed as a feature and we have been debugging this for a while thinking this behaviour worked.\n. Can you write a line about this on the first page? \n\"Scripts with the same url won't execute twice, but their callbacks fire in the correct order.\" is listed as a feature and we have been debugging this for a while thinking this behaviour worked.\n. ",
    "rkyoku": "Same bug here, a year later!\nAt the era of SPA, this is crucial that complete() gets called even when scripts are already loaded and in browser cache!\nPlease could you fix it? In my opinion this is a severe bug.\n. Same bug here, a year later!\nAt the era of SPA, this is crucial that complete() gets called even when scripts are already loaded and in browser cache!\nPlease could you fix it? In my opinion this is a severe bug.\n. ",
    "pySilver": "it seems that problem appears if one loads both css and js file at once.\n. Funny. This works:\n\n``` javascript\n    yepnope({\n        load: [\n            \"{static_url}javascripts/vendor/redactor/redactor.js\"\n        ],\n        complete: function(){\n            $(function(){\n                $(\"#{element_id}\").redactor({config});\n            });\n        }\n    });    \n    yepnope(\"{static_url}javascripts/vendor/redactor/css/redactor.css\");\n```\n\nBut this not\n\n``` javascript\n    yepnope({\n        load: [\n            \"{static_url}javascripts/vendor/redactor/redactor.js\",\n            \"{static_url}javascripts/vendor/redactor/css/redactor.css\"\n        ],\n        complete: function(){\n            $(function(){\n                $(\"#{element_id}\").redactor({config});\n            });\n        }\n    });    \n```\n. it seems that problem appears if one loads both css and js file at once.\n. Funny. This works:\n\n``` javascript\n    yepnope({\n        load: [\n            \"{static_url}javascripts/vendor/redactor/redactor.js\"\n        ],\n        complete: function(){\n            $(function(){\n                $(\"#{element_id}\").redactor({config});\n            });\n        }\n    });    \n    yepnope(\"{static_url}javascripts/vendor/redactor/css/redactor.css\");\n```\n\nBut this not\n\n``` javascript\n    yepnope({\n        load: [\n            \"{static_url}javascripts/vendor/redactor/redactor.js\",\n            \"{static_url}javascripts/vendor/redactor/css/redactor.css\"\n        ],\n        complete: function(){\n            $(function(){\n                $(\"#{element_id}\").redactor({config});\n            });\n        }\n    });    \n```\n. ",
    "mishal": "I have also troubles with this bug. Could you please provide any help on this? Thanks\n. Thanks @colinStevenson for your solution.\n\nI used it, but changed the behavior to catch assets which need to be loaded instead of trying to find if all have been loaded. Something like:\n\n```\n// return only those which are not loaded yet\nresources = processResources(resources);\nyepnope({\n  load: resources,\n  complete: myComplete\n});\n\nfunction processResources(resources){\n  var notLoaded = [];\n  for(var i = 0; i < resources.length; i++)\n  {\n    if(!loadedResources[resources[i]])\n    {\n      notLoaded.push(resources[i]);\n    }\n    loadedResources[resources[i]] = true;\n  }\n  return notLoaded;\n}\n```\n\nEven if the `notLoaded` array is empty the complete callback is successfully executed.\n. I have also troubles with this bug. Could you please provide any help on this? Thanks\n. Thanks @colinStevenson for your solution.\n\nI used it, but changed the behavior to catch assets which need to be loaded instead of trying to find if all have been loaded. Something like:\n\n```\n// return only those which are not loaded yet\nresources = processResources(resources);\nyepnope({\n  load: resources,\n  complete: myComplete\n});\n\nfunction processResources(resources){\n  var notLoaded = [];\n  for(var i = 0; i < resources.length; i++)\n  {\n    if(!loadedResources[resources[i]])\n    {\n      notLoaded.push(resources[i]);\n    }\n    loadedResources[resources[i]] = true;\n  }\n  return notLoaded;\n}\n```\n\nEven if the `notLoaded` array is empty the complete callback is successfully executed.\n. ",
    "colinStevenson": "I was able to sort out a workaround for this. The idea is that I keep track of the resources that I've loaded, and if I come across a case where all resources have already been loaded, I call the \"complete handler\" immediately. I think you could end up with scenarios where the handler will be called twice if you call loadResources in rapid succession (before the resources have actually been added to the page), but overall this did the job for me. \n\n``` javascript\n\nvar loadedResources = {};\nfunction loadResources(){\n    var resources = [\"redactor.js\", \"redactor.css\"];\n    processResources(resources);\n    yepnope({\n        load: resources,\n        complete: handleResourcesLoaded\n    });\n}\nfunction handleResourcesLoaded(){\n    //do something\n}\nfunction processResources(resources){\n    var hasAllResources = true;\n    for(var i=0;i<resources.length;i++){\n        if(!loadedResources[resources[i]]){\n            hasAllResources = false;\n        }\n        loadedResources[resources[i]] = true;\n    }\n    if(hassAllResources){\n        handleResourcesLoaded();\n    }\n}\n\n```\n. I was able to sort out a workaround for this. The idea is that I keep track of the resources that I've loaded, and if I come across a case where all resources have already been loaded, I call the \"complete handler\" immediately. I think you could end up with scenarios where the handler will be called twice if you call loadResources in rapid succession (before the resources have actually been added to the page), but overall this did the job for me. \n\n``` javascript\n\nvar loadedResources = {};\nfunction loadResources(){\n    var resources = [\"redactor.js\", \"redactor.css\"];\n    processResources(resources);\n    yepnope({\n        load: resources,\n        complete: handleResourcesLoaded\n    });\n}\nfunction handleResourcesLoaded(){\n    //do something\n}\nfunction processResources(resources){\n    var hasAllResources = true;\n    for(var i=0;i<resources.length;i++){\n        if(!loadedResources[resources[i]]){\n            hasAllResources = false;\n        }\n        loadedResources[resources[i]] = true;\n    }\n    if(hassAllResources){\n        handleResourcesLoaded();\n    }\n}\n\n```\n. ",
    "navotgil": "Any news?\nThe workaround isn't pretty \n. Any news?\nThe workaround isn't pretty \n. ",
    "pjparra": "It would be really great if we could work on this issue.\n\nIn the meantime, I had to improve a little bit @mishal solution for it to work on my project. The complete callback wasn't called every time it should have. So here is my version:\n\n``` js\nvar loadedResources = {};\n\nfunction loadResources(resources, completeCallback) {\n    // return only those which are not loaded yet\n    resources = processResources(resources, completeCallback);\n    yepnope({\n        load: resources,\n        complete: completeCallback\n    });\n}\n\nfunction processResources(resources, completeCallback) {\n    var notLoaded = [];\n    for(var i = 0; i < resources.length; i++)\n    {\n        if(!loadedResources[resources[i]])\n        {\n            notLoaded.push(resources[i]);\n        }\n        loadedResources[resources[i]] = true;\n    }\n\n    if (notLoaded.length == 0) {\n        completeCallback();\n    }\n\n    return notLoaded;\n}\n```\n. With Chrome 28, I even see that `sheets[j].ownerNode.id` is always empty. So `poll()` gets called infinitely, for each stylesheet I try to insert.\n\nI think this is a pretty important issue since asynchronous CSS is clearly not a good idea : it causes ugly FOUCS and can cause performance issues, which is quite ironic when using a script loader.\n\nI have not been able to understand why it behaves this way yet. I'll have a deeper look at this problem though.\n. Sure, but using yepnope to load them can be very handy when designing a very dynamic and modular interface. Loading CSS after the page load is almost mandatory for me.\n\nNote that despite my comment here, CSS are loaded, it's just that the infinite `poll()` calls make profiling an app really hard.\n\nI'm wondering: what's the goal of this `poll` thing? It seems to work fine without it. Maybe I'm missing something, but my CSS seems to load properly, and synchronously, without it.\n. I don't say that I need to know exactly when stylesheets are applied.\n\nI just said that with Chrome 28, I am not even able to reach the line of code you pointed out in the first place. I never have `sheets[j].ownerNode.id == id` evaluate to true. So I was thinking something else was wrong.\n\nMoreover, with both Chrome and Firefox, I get infinite calls to `poll()`, whether I comment out the line you suggested or not. And that is probably not a good thing: it sure causes unnecessary overhead, and makes profiling an app a nightmare.\n\nHowever, I can comment out the whole poll thing, and my callbacks still get called after the stylesheets have finished loading, so I was wondering what was the goal of this piece of code. Maybe it is necessary for browsers I didn't test yet, but it would still feel strange to me to have these infinite calls to `poll()` on most browsers.\n. It would be really great if we could work on this issue.\n\nIn the meantime, I had to improve a little bit @mishal solution for it to work on my project. The complete callback wasn't called every time it should have. So here is my version:\n\n``` js\nvar loadedResources = {};\n\nfunction loadResources(resources, completeCallback) {\n    // return only those which are not loaded yet\n    resources = processResources(resources, completeCallback);\n    yepnope({\n        load: resources,\n        complete: completeCallback\n    });\n}\n\nfunction processResources(resources, completeCallback) {\n    var notLoaded = [];\n    for(var i = 0; i < resources.length; i++)\n    {\n        if(!loadedResources[resources[i]])\n        {\n            notLoaded.push(resources[i]);\n        }\n        loadedResources[resources[i]] = true;\n    }\n\n    if (notLoaded.length == 0) {\n        completeCallback();\n    }\n\n    return notLoaded;\n}\n```\n. With Chrome 28, I even see that `sheets[j].ownerNode.id` is always empty. So `poll()` gets called infinitely, for each stylesheet I try to insert.\n\nI think this is a pretty important issue since asynchronous CSS is clearly not a good idea : it causes ugly FOUCS and can cause performance issues, which is quite ironic when using a script loader.\n\nI have not been able to understand why it behaves this way yet. I'll have a deeper look at this problem though.\n. Sure, but using yepnope to load them can be very handy when designing a very dynamic and modular interface. Loading CSS after the page load is almost mandatory for me.\n\nNote that despite my comment here, CSS are loaded, it's just that the infinite `poll()` calls make profiling an app really hard.\n\nI'm wondering: what's the goal of this `poll` thing? It seems to work fine without it. Maybe I'm missing something, but my CSS seems to load properly, and synchronously, without it.\n. I don't say that I need to know exactly when stylesheets are applied.\n\nI just said that with Chrome 28, I am not even able to reach the line of code you pointed out in the first place. I never have `sheets[j].ownerNode.id == id` evaluate to true. So I was thinking something else was wrong.\n\nMoreover, with both Chrome and Firefox, I get infinite calls to `poll()`, whether I comment out the line you suggested or not. And that is probably not a good thing: it sure causes unnecessary overhead, and makes profiling an app a nightmare.\n\nHowever, I can comment out the whole poll thing, and my callbacks still get called after the stylesheets have finished loading, so I was wondering what was the goal of this piece of code. Maybe it is necessary for browsers I didn't test yet, but it would still feel strange to me to have these infinite calls to `poll()` on most browsers.\n. ",
    "lukaszfiszer": "Thank you for the detailed answer and the links provided. \n\nI think it's worth to mention this behavior on yepnope's website, as it may be confusing for many users.\n. wow, this issue is 2 years old, i don't even remember opening it. but the answer provided was very exhaustive so it definitely deserved to be closed.\n. Thank you for the detailed answer and the links provided. \n\nI think it's worth to mention this behavior on yepnope's website, as it may be confusing for many users.\n. wow, this issue is 2 years old, i don't even remember opening it. but the answer provided was very exhaustive so it definitely deserved to be closed.\n. ",
    "masterbee": "@lukaszfiszer et al. Agree but I am also asking if there is any desire to close this issue since it appears to be addressed.\n. @patocallaghan - Unless I am reading the code wrong, your ``UI.AllPages` is only being called from the complete of your first code. You first complete is using the jQuery .ready wrapper so it will not trigger the function till after the page dom is loaded. \n\nMakes sense? or did I misunderstand what complete you were referencing is the problem.\n. @SlexAxton - I have been playing with the build and realized the .addPrefix is my friend. For those that are looking for a solution here a quick function that I drummed up to look for my top level .js file so I can use it's path as a bearing. It is not for everyone but thought it may help those in search of the something similar;\n\n```\nyepnope.addPrefix(\"site\", function(resourceObj) {\n  var _path;\n  _path = $('script[src$=\"vapour.js\"],script[src$=\"vapour.min.js\"]').last().prop(\"src\").split('?')[0].split('/').slice(0, -1).join('/');\n  resourceObj.url = _path + \"/\" + resourceObj.url;\n  return resourceObj; });\n```\n\nThen I used the prefix in my Modernizr.load function;\n\n```\nModernizr.load([\n{\ntest: Modernizr.canvas,\nnope: \"site!polyfills/excanvas.min.js\"\n}]);\n```\n. Ok bad day without coffee. Sorry, just went through the closed issues and discovered my answer issue: #106 . Thanks @SlexAxton and group and sorry about the new issue.\n. @SlexAxton - Thanks, that was my point and love the fact that yepnope is really small. I was hoping to leverage the test results directly through yepnope ( i.e-  yepnope.ielt8, etc ) and not have to pull it out it logic which I have done on several occasions.\n\nMake sense?\n. @SlexAxton - Thanks it does, and since it was already doing it the idea was to minimize code duplication for implementers. I use Modernizr for everything and a big fan of feature detection. There is just the fringe cases where we have to identify IE ( makes me shiver that I have to ), so since it was already tested in yepnope and stored as an internal var, it would shave a few lines off a few of my sites by not duplicating the same thing. \n. @lukaszfiszer et al. Agree but I am also asking if there is any desire to close this issue since it appears to be addressed.\n. @patocallaghan - Unless I am reading the code wrong, your ``UI.AllPages` is only being called from the complete of your first code. You first complete is using the jQuery .ready wrapper so it will not trigger the function till after the page dom is loaded. \n\nMakes sense? or did I misunderstand what complete you were referencing is the problem.\n. @SlexAxton - I have been playing with the build and realized the .addPrefix is my friend. For those that are looking for a solution here a quick function that I drummed up to look for my top level .js file so I can use it's path as a bearing. It is not for everyone but thought it may help those in search of the something similar;\n\n```\nyepnope.addPrefix(\"site\", function(resourceObj) {\n  var _path;\n  _path = $('script[src$=\"vapour.js\"],script[src$=\"vapour.min.js\"]').last().prop(\"src\").split('?')[0].split('/').slice(0, -1).join('/');\n  resourceObj.url = _path + \"/\" + resourceObj.url;\n  return resourceObj; });\n```\n\nThen I used the prefix in my Modernizr.load function;\n\n```\nModernizr.load([\n{\ntest: Modernizr.canvas,\nnope: \"site!polyfills/excanvas.min.js\"\n}]);\n```\n. Ok bad day without coffee. Sorry, just went through the closed issues and discovered my answer issue: #106 . Thanks @SlexAxton and group and sorry about the new issue.\n. @SlexAxton - Thanks, that was my point and love the fact that yepnope is really small. I was hoping to leverage the test results directly through yepnope ( i.e-  yepnope.ielt8, etc ) and not have to pull it out it logic which I have done on several occasions.\n\nMake sense?\n. @SlexAxton - Thanks it does, and since it was already doing it the idea was to minimize code duplication for implementers. I use Modernizr for everything and a big fan of feature detection. There is just the fringe cases where we have to identify IE ( makes me shiver that I have to ), so since it was already tested in yepnope and stored as an internal var, it would shave a few lines off a few of my sites by not duplicating the same thing. \n. ",
    "gewfy": "I totally agree. CSS files should not load asynchronously. Or at least it would be nice with an option :)\n\nThanks!\n. I totally agree. CSS files should not load asynchronously. Or at least it would be nice with an option :)\n\nThanks!\n. ",
    "niksy": "Just checked on iOS 5 and it works as it should regardless of refreshing, loading through address bar or clicking on a link.\n\nHere is a test case:\nhttp://jsbin.com/ynload/\nhttp://jsbin.com/ynload1/\nhttp://jsbin.com/ynload2/\n\nAndroid stock browser (haven't checked others) is the one with problems, all other work as expected.\n. @ralphholzmann have you tested this on real device or just in simulator? Mine test cases were done on real device (HTC Desire), if that helps somehow\u2026\n. Yes, definitely, there is a pretty big number of Android devices with those OS versions than newer ones and it makes conditional loading of resources on larger mobile browser landscape pretty inconvenient if we can't use this technique.\n. @nring do you have a fork of yepnope which we could use for now?\n. Just checked on iOS 5 and it works as it should regardless of refreshing, loading through address bar or clicking on a link.\n\nHere is a test case:\nhttp://jsbin.com/ynload/\nhttp://jsbin.com/ynload1/\nhttp://jsbin.com/ynload2/\n\nAndroid stock browser (haven't checked others) is the one with problems, all other work as expected.\n. @ralphholzmann have you tested this on real device or just in simulator? Mine test cases were done on real device (HTC Desire), if that helps somehow\u2026\n. Yes, definitely, there is a pretty big number of Android devices with those OS versions than newer ones and it makes conditional loading of resources on larger mobile browser landscape pretty inconvenient if we can't use this technique.\n. @nring do you have a fork of yepnope which we could use for now?\n. ",
    "lpancescu": "@ralphholzmann - I see the same symptoms not only with Android 2.3, but also with Mobile Safari on iOS 4.2.1 and with Epiphany and Chromium on Debian Squeeze (both use older versions of WebKit). I'm using Modernizr.load to conditionally load jQuery, a hyphenation plugin for jQuery and a language pattern, if the browser supports soft hyphens but not CSS hyphens (like iOS 4.2.1 or Android's browser). It only works if I clear the cache before loading a page, on all browsers above.\n\nI see a difference when loading the page in Chromium's Timeline, with and without purged cache: when the javascript files are already in cache, there's a \"Send request\" for each, they are loaded in 0ms, but there is no \"Evaluate script\" stage after that for any of them, as it happens with an empty cache. The Modernizr.load callbacks are also not executed (I set a breakpoint in my callback, which only gets hit when the cache is empty). If I try $('p') in Chromium's Web Console, it returns an array of objects with purged cache, and null if jQuery was already in the cache - I guess Timeline tells the truth...\n\nEDIT: Tested on iPod Touch 2G running iOS 4.2.1, VirtualBox VM running Android-x86 2.3RC1 and Debian Squeeze amd64 on my EeePC. I also tested with iPhone 4 running iOS 5.1, but that works properly.\n. I did some tests with two other loaders (as replacement for yepnope.js). $script.js loads the scripts reliably and executes them _almost_ always in the correct order - about 1 time out of 10, some jQuery plugin ends up running before jQuery itself with the older WebKit in Android and Debian.\n\nLAB.js always works reliably in my tests - every single time, with all tested browsers. Its only disadvantage is that it needs to be loaded separately, it cannot be embedded in HTML like $script.js or in Modernizr itself. Perhaps LAB.js can serve as a starting point for fixing this in yepnope.js?\n. @ralphholzmann - I see the same symptoms not only with Android 2.3, but also with Mobile Safari on iOS 4.2.1 and with Epiphany and Chromium on Debian Squeeze (both use older versions of WebKit). I'm using Modernizr.load to conditionally load jQuery, a hyphenation plugin for jQuery and a language pattern, if the browser supports soft hyphens but not CSS hyphens (like iOS 4.2.1 or Android's browser). It only works if I clear the cache before loading a page, on all browsers above.\n\nI see a difference when loading the page in Chromium's Timeline, with and without purged cache: when the javascript files are already in cache, there's a \"Send request\" for each, they are loaded in 0ms, but there is no \"Evaluate script\" stage after that for any of them, as it happens with an empty cache. The Modernizr.load callbacks are also not executed (I set a breakpoint in my callback, which only gets hit when the cache is empty). If I try $('p') in Chromium's Web Console, it returns an array of objects with purged cache, and null if jQuery was already in the cache - I guess Timeline tells the truth...\n\nEDIT: Tested on iPod Touch 2G running iOS 4.2.1, VirtualBox VM running Android-x86 2.3RC1 and Debian Squeeze amd64 on my EeePC. I also tested with iPhone 4 running iOS 5.1, but that works properly.\n. I did some tests with two other loaders (as replacement for yepnope.js). $script.js loads the scripts reliably and executes them _almost_ always in the correct order - about 1 time out of 10, some jQuery plugin ends up running before jQuery itself with the older WebKit in Android and Debian.\n\nLAB.js always works reliably in my tests - every single time, with all tested browsers. Its only disadvantage is that it needs to be loaded separately, it cannot be embedded in HTML like $script.js or in Modernizr itself. Perhaps LAB.js can serve as a starting point for fixing this in yepnope.js?\n. ",
    "mjc-gh": "+1 to this. \n\nWe've been seeing the behavior initially describe in this ticket on older Android devices (and on a Kindle Fire) for sometime now. Glad I'm not alone in this.. ;D\n\nWhere can I find the older webkit code mentioned above?\n. Look a little into this issue and many tests fail on both my Android phone and Kindle Fire (which is good). Haven't tried to run the test page on an emulator though, has anyone tried that?\n\nI'm interested in fixing this bug (cause its a big block for mobile support on our app) however I am unsure of where to start. If someone could point me in the right direction and describe the polling technique in general and I could try and implement it and get this bug squashed once and for all!\n. Been meaning to reply to this ticket. We added back in the test for `isOldWebkit` and added some logic to manually trigger the `onload` callback when the file is already cached.\n\nBasically, whenever the file is cached and is loaded via an image tag on 'old webkit', the image callback will fail to trigger and the file will never load properly.\n\nWe've been using this change on our app for a while now and haven't had heard any issues with \"false starts\" (breakbase.com). It's a client-heavy app and when it would fail to load users would get stuck at our load screen.\n\nHere's a link to the changes on my fork. Let me know what you guys think and I can send a pull req (I also need to pull down and merge from upstream :x)\nhttps://github.com/mikeycgto/yepnope.js/commit/bcdc296e7811b8a2fee14b3461b4863368dc3ab7\n. I'm now noticing that our app will fail to load sometimes during a refresh (scripts are cached). Going to mess around a bit more with `isOldWebkit` handling and see if I can get something going that works all the time (\"clean\" hits as well as refreshing).\n. Will do. We actually yepnope with Modernizr to load in responsive layouts. We test if the device is a \"handheld\" device (combination of a few things) and load in different responsive style sheets accordingly. Thus, we'll have this code running in a wide range of places (desktop and mobile\\tablet browsers)\n. +1 to this. \n\nWe've been seeing the behavior initially describe in this ticket on older Android devices (and on a Kindle Fire) for sometime now. Glad I'm not alone in this.. ;D\n\nWhere can I find the older webkit code mentioned above?\n. Look a little into this issue and many tests fail on both my Android phone and Kindle Fire (which is good). Haven't tried to run the test page on an emulator though, has anyone tried that?\n\nI'm interested in fixing this bug (cause its a big block for mobile support on our app) however I am unsure of where to start. If someone could point me in the right direction and describe the polling technique in general and I could try and implement it and get this bug squashed once and for all!\n. Been meaning to reply to this ticket. We added back in the test for `isOldWebkit` and added some logic to manually trigger the `onload` callback when the file is already cached.\n\nBasically, whenever the file is cached and is loaded via an image tag on 'old webkit', the image callback will fail to trigger and the file will never load properly.\n\nWe've been using this change on our app for a while now and haven't had heard any issues with \"false starts\" (breakbase.com). It's a client-heavy app and when it would fail to load users would get stuck at our load screen.\n\nHere's a link to the changes on my fork. Let me know what you guys think and I can send a pull req (I also need to pull down and merge from upstream :x)\nhttps://github.com/mikeycgto/yepnope.js/commit/bcdc296e7811b8a2fee14b3461b4863368dc3ab7\n. I'm now noticing that our app will fail to load sometimes during a refresh (scripts are cached). Going to mess around a bit more with `isOldWebkit` handling and see if I can get something going that works all the time (\"clean\" hits as well as refreshing).\n. Will do. We actually yepnope with Modernizr to load in responsive layouts. We test if the device is a \"handheld\" device (combination of a few things) and load in different responsive style sheets accordingly. Thus, we'll have this code running in a wide range of places (desktop and mobile\\tablet browsers)\n. ",
    "cmelion": "+1 for this issue on Version - 1.5.4pre\nIt looks like most of the Android devices we test with are working, the notable exception is a Samsung 10\" tablet with Android 3.2.\n. yepnope 1.0 works on older android, 1.5.4pre does not.\n\nThe behavior is quite strange, when multiple dependencies are specified, some but not all load.\nI verified this by writing console.log messages in each of the dependent js files.\nI also checked in Charles Proxy, the requests were processed with 200s.\n\nRolling back to 1.0 for now.\n. F.Y.I.  Swapping the 1.5.x browser sniffs for 1.0.2 browser sniffs works on all platforms we tested (IOS, Android, IE8+, Firefox and desktop webkit)\n. I pulled the patched version from the repository I am still getting\nfailures.  I'm having better success inserting the browser sniffs from 1.x\nversions.\n\nOn Sat, Oct 6, 2012 at 5:25 AM, Nick Forsberg notifications@github.comwrote:\n\n> mikeycgto did your solution work? We have the same issue with Android 2\n> getting the callback 50% of loads. Might have to ditch using YepNope on a\n> current project - which will be a shame!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SlexAxton/yepnope.js/issues/95#issuecomment-9196690.\n. Michael,\nCan you test with appcache as well?  With empty (first time), up to date\nand after a cach update.  We also se different behavior when loading from a\nlink or bookmark and reload/refresh.\n\n-Charlie\n\nOn Sunday, October 14, 2012, Michael Coyne wrote:\n\n> I'm now noticing that our app will fail to load sometimes during a refresh\n> (scripts are cached). Going to mess around a bit more with isOldWebkithandling and see if I can get something going that works all the time\n> (\"clean\" hits as well as refreshing).\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SlexAxton/yepnope.js/issues/95#issuecomment-9421132.\n. @SlexAxton @ralphholzmann Any chance we can get an official fix for this issue?  We would prefer to use the latest release but the Android loading issues prevent this.\n. Which version of Yepnope?  \nI've tested 1.x versions up to 1.0.2 and they will work on Kindle and other Android OSs including 3.2.x. \n\nThe behavior you describe is intermittent, I have even seen it alternate consistently between refreshes, where exactly 50% of the time yepnope waited for the timeout period even though a proxy app showed correct and timely delivery of all resources.  Appcache only made the issue worse.\n\nIf you want to use the latest version of yepnope on Android you will want to swap in  the browser sniffs from 1.0.2.\n. This issue is related to https://github.com/SlexAxton/yepnope.js/issues/95\n. I ran into all kinds of anomalous behavior on android 2.3-3.2.  Especially when using appcache.  Reverting to the 1.0.2 browser sniffs has worked best for me so far.\n\nSee https://github.com/SlexAxton/yepnope.js/issues/95\n. I see this issue intermittently on desktop chrome (27.0.1453.116) and Safari (Version 6.0.5 (7536.30.1)) and more frequently with Safari (Version 5.1.3) when loading large concatenated scripts.\n. +1 for this issue on Version - 1.5.4pre\nIt looks like most of the Android devices we test with are working, the notable exception is a Samsung 10\" tablet with Android 3.2.\n. yepnope 1.0 works on older android, 1.5.4pre does not.\n\nThe behavior is quite strange, when multiple dependencies are specified, some but not all load.\nI verified this by writing console.log messages in each of the dependent js files.\nI also checked in Charles Proxy, the requests were processed with 200s.\n\nRolling back to 1.0 for now.\n. F.Y.I.  Swapping the 1.5.x browser sniffs for 1.0.2 browser sniffs works on all platforms we tested (IOS, Android, IE8+, Firefox and desktop webkit)\n. I pulled the patched version from the repository I am still getting\nfailures.  I'm having better success inserting the browser sniffs from 1.x\nversions.\n\nOn Sat, Oct 6, 2012 at 5:25 AM, Nick Forsberg notifications@github.comwrote:\n\n> mikeycgto did your solution work? We have the same issue with Android 2\n> getting the callback 50% of loads. Might have to ditch using YepNope on a\n> current project - which will be a shame!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SlexAxton/yepnope.js/issues/95#issuecomment-9196690.\n. Michael,\nCan you test with appcache as well?  With empty (first time), up to date\nand after a cach update.  We also se different behavior when loading from a\nlink or bookmark and reload/refresh.\n\n-Charlie\n\nOn Sunday, October 14, 2012, Michael Coyne wrote:\n\n> I'm now noticing that our app will fail to load sometimes during a refresh\n> (scripts are cached). Going to mess around a bit more with isOldWebkithandling and see if I can get something going that works all the time\n> (\"clean\" hits as well as refreshing).\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/SlexAxton/yepnope.js/issues/95#issuecomment-9421132.\n. @SlexAxton @ralphholzmann Any chance we can get an official fix for this issue?  We would prefer to use the latest release but the Android loading issues prevent this.\n. Which version of Yepnope?  \nI've tested 1.x versions up to 1.0.2 and they will work on Kindle and other Android OSs including 3.2.x. \n\nThe behavior you describe is intermittent, I have even seen it alternate consistently between refreshes, where exactly 50% of the time yepnope waited for the timeout period even though a proxy app showed correct and timely delivery of all resources.  Appcache only made the issue worse.\n\nIf you want to use the latest version of yepnope on Android you will want to swap in  the browser sniffs from 1.0.2.\n. This issue is related to https://github.com/SlexAxton/yepnope.js/issues/95\n. I ran into all kinds of anomalous behavior on android 2.3-3.2.  Especially when using appcache.  Reverting to the 1.0.2 browser sniffs has worked best for me so far.\n\nSee https://github.com/SlexAxton/yepnope.js/issues/95\n. I see this issue intermittently on desktop chrome (27.0.1453.116) and Safari (Version 6.0.5 (7536.30.1)) and more frequently with Safari (Version 5.1.3) when loading large concatenated scripts.\n. ",
    "seventy6": "mikeycgto did your solution work? We have the same issue with Android 2 getting the callback 50% of loads. Might have to ditch using YepNope on a current project - which will be a shame!\n. mikeycgto did your solution work? We have the same issue with Android 2 getting the callback 50% of loads. Might have to ditch using YepNope on a current project - which will be a shame!\n. ",
    "jfroom": "+1 for this issue on Version - 1.5.4pre with Android emulators. \n\nIn case it helps, remote browser based Android emulators over here: http://www.manymo.com/\n. A bit more information on this topic for SEO (it took me a bit of digging to find this topic - hope to help others out there looking for this).\n\nThere seems to be one or two variations on this in Firefox (16.0.2 Mac & Win8). This can be mostly easily seen on the yepnope homepage.\n\n1) Error: \"The character encoding of the plain text document was not declared. The document will render with garbled text in some browser configurations if the document contains characters from outside the US-ASCII range. The character encoding of the file needs to be declared in the transfer protocol or file needs to use a byte order mark as an encoding signature.\"\n\n2) Warning: \"The character encoding of a framed document was not declared. The document may appear different if viewed without the document framing it.\"\n\nMy only concern is that for our application, we are streaming into a client's website and then use yepnope to load our dependencies. This causes the errors/warnings to display for the client site. We will refer to this thread if any \"defects\" are logged by the client for our application.\n\nI did notice that if instead, injectJs or injectCss is called one at a time on the files, these issues are avoided - but this causes a slower load time since the loads happen more sequentially.\n. +1 for this issue on Version - 1.5.4pre with Android emulators. \n\nIn case it helps, remote browser based Android emulators over here: http://www.manymo.com/\n. A bit more information on this topic for SEO (it took me a bit of digging to find this topic - hope to help others out there looking for this).\n\nThere seems to be one or two variations on this in Firefox (16.0.2 Mac & Win8). This can be mostly easily seen on the yepnope homepage.\n\n1) Error: \"The character encoding of the plain text document was not declared. The document will render with garbled text in some browser configurations if the document contains characters from outside the US-ASCII range. The character encoding of the file needs to be declared in the transfer protocol or file needs to use a byte order mark as an encoding signature.\"\n\n2) Warning: \"The character encoding of a framed document was not declared. The document may appear different if viewed without the document framing it.\"\n\nMy only concern is that for our application, we are streaming into a client's website and then use yepnope to load our dependencies. This causes the errors/warnings to display for the client site. We will refer to this thread if any \"defects\" are logged by the client for our application.\n\nI did notice that if instead, injectJs or injectCss is called one at a time on the files, these issues are avoided - but this causes a slower load time since the loads happen more sequentially.\n. ",
    "nring": "Using 1.5.4pre as a base, I used the injectCss function from 1.0.2 combined with the following browser sniffs:\n\n```\nisGecko               = ( \"MozAppearance\" in docElement.style ),\nisGeckoLTE18          = isGecko && !! doc.createRange().compareNode,\ninsBeforeObj          = isGeckoLTE18 ? docElement : firstScript.parentNode,\nisOpera               = window.opera && toString.call( window.opera ) == '[object Opera]',\nisIE                  = !! doc.attachEvent && !isOpera,\nisWebkit              = ( 'webkitAppearance' in docElement.style ),\nisNewerWebkit         = isWebkit && 'async' in doc.createElement('script'),\nstrJsElem             = isGecko ? 'object' : ( isOpera || isNewerWebkit ) ? 'img' : 'script',\nstrCssElem            = isWebkit ? 'img' : strJsElem,\n```\n\nIt's working for me so far in IE8+, Android 2.3+, iOS6, and modern browsers. \n. Using 1.5.4pre as a base, I used the injectCss function from 1.0.2 combined with the following browser sniffs:\n\n```\nisGecko               = ( \"MozAppearance\" in docElement.style ),\nisGeckoLTE18          = isGecko && !! doc.createRange().compareNode,\ninsBeforeObj          = isGeckoLTE18 ? docElement : firstScript.parentNode,\nisOpera               = window.opera && toString.call( window.opera ) == '[object Opera]',\nisIE                  = !! doc.attachEvent && !isOpera,\nisWebkit              = ( 'webkitAppearance' in docElement.style ),\nisNewerWebkit         = isWebkit && 'async' in doc.createElement('script'),\nstrJsElem             = isGecko ? 'object' : ( isOpera || isNewerWebkit ) ? 'img' : 'script',\nstrCssElem            = isWebkit ? 'img' : strJsElem,\n```\n\nIt's working for me so far in IE8+, Android 2.3+, iOS6, and modern browsers. \n. ",
    "DesignByOnyx": "I have fixed the issue with some inspiration from @mikeycgto's `isOlderWebkit` idea.  The change is minimal and does not affect newer webkit browsers.  I have submitted a pull request to get this change into the official yepnope library, however the impatient can find the fix here:\n\nhttps://github.com/DesignByOnyx/yepnope.js/blob/master/yepnope.js\n\n**NOTE: I did not minify the code.**  That part is up to you!\n. 1. At the top of your Modernizr file there should be a long URL to the modernizr download page.  Paste the url in your browser.\n2. Uncheck the option for `Modernizr.load (yepnope)` and generate your new Modernizr code **without** yepnope.\n3. Download the [yepnope.js](https://github.com/SlexAxton/yepnope.js/blob/master/yepnope.js) file and paste it into your Modernizr.js file.  I recommend you [minimize](http://jscompress.com/) it first.\n4. Add the following code to your Modernizr file at the very bottom:\n\n```\nModernizr.load = yepnope;\n```\n\nNote: I haven't tested it, but it should work.  If you are having issues with `Modernizr.load()` not working, try changing your code to call `yepnope` instead:\n\n``` javascript\n// Old code\nModernizr.load([{\n  load: 'http:/\u00ad/ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js',\n  complete: function () { }\n}]);\n\n// New Code\nyepnope([{\n  load: 'http:/\u00ad/ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js',\n  complete: function () { }\n}]);\n```\n. I have fixed the issue with some inspiration from @mikeycgto's `isOlderWebkit` idea.  The change is minimal and does not affect newer webkit browsers.  I have submitted a pull request to get this change into the official yepnope library, however the impatient can find the fix here:\n\nhttps://github.com/DesignByOnyx/yepnope.js/blob/master/yepnope.js\n\n**NOTE: I did not minify the code.**  That part is up to you!\n. 1. At the top of your Modernizr file there should be a long URL to the modernizr download page.  Paste the url in your browser.\n2. Uncheck the option for `Modernizr.load (yepnope)` and generate your new Modernizr code **without** yepnope.\n3. Download the [yepnope.js](https://github.com/SlexAxton/yepnope.js/blob/master/yepnope.js) file and paste it into your Modernizr.js file.  I recommend you [minimize](http://jscompress.com/) it first.\n4. Add the following code to your Modernizr file at the very bottom:\n\n```\nModernizr.load = yepnope;\n```\n\nNote: I haven't tested it, but it should work.  If you are having issues with `Modernizr.load()` not working, try changing your code to call `yepnope` instead:\n\n``` javascript\n// Old code\nModernizr.load([{\n  load: 'http:/\u00ad/ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js',\n  complete: function () { }\n}]);\n\n// New Code\nyepnope([{\n  load: 'http:/\u00ad/ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js',\n  complete: function () { }\n}]);\n```\n. ",
    "niccottrell": "Thanks for everyone for finding and patching this. Please excuse my ignorance, but can anyone point me to instructions on how to replace the yepnode packaged with Modernizr with this patched version?\n. @DesignByOnyx Thanks for the instructions! We ended up needing to add the final line as:\n\n```\nModernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0));};\n```\n\nsince otherwise the `this[\"yepnode\"]` value was never populated.\n. Thanks for everyone for finding and patching this. Please excuse my ignorance, but can anyone point me to instructions on how to replace the yepnode packaged with Modernizr with this patched version?\n. @DesignByOnyx Thanks for the instructions! We ended up needing to add the final line as:\n\n```\nModernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0));};\n```\n\nsince otherwise the `this[\"yepnode\"]` value was never populated.\n. ",
    "humanaut": "I just wanted to confirm that the immediate above made it work for me too. \n\nI also wanted to request confirmation of this fix working or not working completely for iOS 3? Clicking on a link in a page and going to another page still results in assets not being loaded from conditional tests, unless the page is refreshed.\n\nIf polyfills such as respond, matchmedia etc are hardcoded into HTML file, this problem does not happen.\n. I just wanted to confirm that the immediate above made it work for me too. \n\nI also wanted to request confirmation of this fix working or not working completely for iOS 3? Clicking on a link in a page and going to another page still results in assets not being loaded from conditional tests, unless the page is refreshed.\n\nIf polyfills such as respond, matchmedia etc are hardcoded into HTML file, this problem does not happen.\n. ",
    "dcmoore-gd": "Absolutely!\n\nWe have a good-enough-for-now workaround right now (loading Outbrain after Modernizr+yepnope) so I'll need to hold off for a day or two, but as soon as our other issues are resolved I'll get you a well-tested pull request.\n\nThanks so much for yepnope, and especially your speedy response and willingness to have this change made!\n. This was (almost certainly) fixed by commit #89d36049, so closing.\n. Absolutely!\n\nWe have a good-enough-for-now workaround right now (loading Outbrain after Modernizr+yepnope) so I'll need to hold off for a day or two, but as soon as our other issues are resolved I'll get you a well-tested pull request.\n\nThanks so much for yepnope, and especially your speedy response and willingness to have this change made!\n. This was (almost certainly) fixed by commit #89d36049, so closing.\n. ",
    "richardzcode": "What's the point of load the same js twice? I think you actually wanted execute some js twice, which is not yepnope's job.\n. What's the point of load the same js twice? I think you actually wanted execute some js twice, which is not yepnope's job.\n. ",
    "Goudnet": "This actually does seem to be an issue in Chrome when I use yepnope to load TinyMCE then run tinyMCE.init on a textbox. Nothing happens in Chrome, but the tinyMCE controls are loaded fine in other browsers.\n\nI'm still messing around with it, but for now, I can't get yepnope to load and then execute init() on a callback.\n. Thanks Slex, you can ignore my post and chalk it up to me being stupid... had a comma at the end of my options array. You'd think after 13 years of this, I'd know better. Gotta stop coding when sleepy!\n. Using Visual Studio. I had a syntax warning staring me in the face and just... yeah... I felt like an idiot. Sorry for the trouble :)\n. This actually does seem to be an issue in Chrome when I use yepnope to load TinyMCE then run tinyMCE.init on a textbox. Nothing happens in Chrome, but the tinyMCE controls are loaded fine in other browsers.\n\nI'm still messing around with it, but for now, I can't get yepnope to load and then execute init() on a callback.\n. Thanks Slex, you can ignore my post and chalk it up to me being stupid... had a comma at the end of my options array. You'd think after 13 years of this, I'd know better. Gotta stop coding when sleepy!\n. Using Visual Studio. I had a syntax warning staring me in the face and just... yeah... I felt like an idiot. Sorry for the trouble :)\n. ",
    "folktrash": "Any experience with js types, IE8, and jQuery .post() not working? http://stackoverflow.com/questions/879137/problem-with-jquery-in-internet-explorer-8\n\nI do see in Chrome saying the MIME type being transferred to application/javascript, which is what that thread appears to call the culprit for IE8 post choking. Anyhoo. \n. Sorry, I jumped on the MIME type thing. It looks to be a very peculiar IE8 and jQuery .post(). _blush face_\n. Any experience with js types, IE8, and jQuery .post() not working? http://stackoverflow.com/questions/879137/problem-with-jquery-in-internet-explorer-8\n\nI do see in Chrome saying the MIME type being transferred to application/javascript, which is what that thread appears to call the culprit for IE8 post choking. Anyhoo. \n. Sorry, I jumped on the MIME type thing. It looks to be a very peculiar IE8 and jQuery .post(). _blush face_\n. ",
    "evanleck": "Awesome, thank you!\n. @lencioni yeah, duplicate behavior definitely. Like that issue, I'm not sure what version this happened in either.\n. I'm not sure what version of yepnope it is, but the build included in Modernizr 2.0.6 works fine.\n. Just bumping this issue, it's still cropping up in Modernizr 2.6.1. Test code:\n\n``` html\n<html>\n  <head>\n    <script src=\"m.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <script type=\"text/javascript\" charset=\"utf-8\">\n      Modernizr.load('http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js');\n    </script>\n  <body>\n    <p>This is my page</p>\n    <script>\n      Modernizr.load({\n        complete: function() {\n          jQuery(function($){\n            $('body').append(\"<p>jQuery, why u no load?</p>\");\n          });\n        }\n      });\n    </script>\n```\n\nWhere 'm.js' is built from http://modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-flexbox_legacy-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-input-inputtypes-shiv-cssclasses-teststyles-testprop-testallprops-prefixes-domprefixes-load\n. Awesome, thank you!\n. @lencioni yeah, duplicate behavior definitely. Like that issue, I'm not sure what version this happened in either.\n. I'm not sure what version of yepnope it is, but the build included in Modernizr 2.0.6 works fine.\n. Just bumping this issue, it's still cropping up in Modernizr 2.6.1. Test code:\n\n``` html\n<html>\n  <head>\n    <script src=\"m.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <script type=\"text/javascript\" charset=\"utf-8\">\n      Modernizr.load('http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js');\n    </script>\n  <body>\n    <p>This is my page</p>\n    <script>\n      Modernizr.load({\n        complete: function() {\n          jQuery(function($){\n            $('body').append(\"<p>jQuery, why u no load?</p>\");\n          });\n        }\n      });\n    </script>\n```\n\nWhere 'm.js' is built from http://modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-flexbox_legacy-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-input-inputtypes-shiv-cssclasses-teststyles-testprop-testallprops-prefixes-domprefixes-load\n. ",
    "ghost": "Is there are news on how a fix for this is progressing?\n. Is there are news on how a fix for this is progressing?\n. ",
    "patmoore": "Hi Alex --\n\nDon't know if I wrote this patch with few enough characters :-)\n. \"What if we just stopped removing script tags?\" \n\nDo you mean prevented the removal of the script tags? As far as I can tell, it is wordpress code doing the removal, not my code nor yepnope.js. I didn't get deep into debugging exact which bit of code removed the script element. \n. I can't think of a reason either if it makes you feel better. All I know is that I was running into this issue while developing a wordpress plugin. Wordpress does its own async script loading. I spent a huge amount of time figuring out that the element was being dropped from the DOM, so I didn't have much time to figure out why. Once I figured out what was happening, I really was ready to move on.\n\nDo you know if there is a way to set a breakpoint that triggers when the script element is removed?\n. \"Let's fix the bug in the other stuff rather than here\". Sure if it is my bug.\n\nSomethings to think about:\n\nIf yepnope crashes then Yepnope has a bug....\n\nunless:\n\nYepnope points the finger of blame at the person causing the problem.\n\nHOWEVER, I don't understand why not just prevent Yepnope for experiencing any ill-effects of others code? Why is it so necessary to cache that reference to the firstScript? Did my change introduce a bug?\n\nUnderstand that my motivation to debugging other people's code is pretty limited as well. I have enough of my own bugs and issues. (Plus I have my own startup to run. Ask me about my day :-P ) \n. > > If yepnope crashes then Yepnope has a bug....\n> > unless:\n> > Yepnope points the finger of blame at the person causing the problem.\n> \n> I'm not sure I agree with that logic. Otherwise all my bugs would be browser bugs ...\n\nCall this voice of 3am. Imagine it is 3am, the production server has just awoken the on-call developer, \"Peter\", with an automatic alert that some code is failing. As it turns out, yepnope.js is not allowing 1 page's javascript load. \n\nAt this moment at 3am, \"Peter\" just wants to go back to bed (or the party). Yepnope crashed - it is yepnope that has the bug as far as \"Peter\" is concerned at 3am. At this point, \"Peter\" is cursing at \"Bob\". \"Bob\" is the developer that advocated using yepnope. \n\n\"Peter\" hacks something together to bypass yepnope and his hack works. His report on the crash blames yepnope. The next day, \"Bob\" is left trying to explain that yepnope should still be used. But no one else cares. \"Peter\" proved that yepnope was the problem by removing yepnope and the crash went away.\n\nIf yepnope pointed the \"finger of blame\" saying:  _\"It wasn't me. It was some other javascript that removed the first script element.\"_ Then at 3am Peter looks for why the firstScript element went away instead of focusing on yepnope.\n\n> > Understand that my motivation to debugging other people's code is pretty limited as well. \n> \n> I offerred my help to debug the issue in the other script because I wanted to help you\n\nSorry my poor communication here. I was referring to the wordpress code or the jquery code not you or yepnope. You are cool in this regards. I should have been more clear.\n\nBut other people's code being poorly behaved or not behaved in the way that is needed is life in the glorious world of open-source code.\n\n---\n\nBut back to the issue at hand, what also confused me was \n\n```\n  insBeforeObj = isGeckoLTE18 ? docElement : firstScript.parentNode\n```\n\nbut then in the code sometimes insBeforeObj was used and sometimes firstScript.parentNode was used.\n\nI will keep an eye out for why this firstScript was being deleted. It is driving me up the wall. AFAIK there is no way to put a breakpoint when a value changes in javascript. Am I wrong about that?\n\nSorry about the miscommunication earlier\n. Hi Alex --\n\nDon't know if I wrote this patch with few enough characters :-)\n. \"What if we just stopped removing script tags?\" \n\nDo you mean prevented the removal of the script tags? As far as I can tell, it is wordpress code doing the removal, not my code nor yepnope.js. I didn't get deep into debugging exact which bit of code removed the script element. \n. I can't think of a reason either if it makes you feel better. All I know is that I was running into this issue while developing a wordpress plugin. Wordpress does its own async script loading. I spent a huge amount of time figuring out that the element was being dropped from the DOM, so I didn't have much time to figure out why. Once I figured out what was happening, I really was ready to move on.\n\nDo you know if there is a way to set a breakpoint that triggers when the script element is removed?\n. \"Let's fix the bug in the other stuff rather than here\". Sure if it is my bug.\n\nSomethings to think about:\n\nIf yepnope crashes then Yepnope has a bug....\n\nunless:\n\nYepnope points the finger of blame at the person causing the problem.\n\nHOWEVER, I don't understand why not just prevent Yepnope for experiencing any ill-effects of others code? Why is it so necessary to cache that reference to the firstScript? Did my change introduce a bug?\n\nUnderstand that my motivation to debugging other people's code is pretty limited as well. I have enough of my own bugs and issues. (Plus I have my own startup to run. Ask me about my day :-P ) \n. > > If yepnope crashes then Yepnope has a bug....\n> > unless:\n> > Yepnope points the finger of blame at the person causing the problem.\n> \n> I'm not sure I agree with that logic. Otherwise all my bugs would be browser bugs ...\n\nCall this voice of 3am. Imagine it is 3am, the production server has just awoken the on-call developer, \"Peter\", with an automatic alert that some code is failing. As it turns out, yepnope.js is not allowing 1 page's javascript load. \n\nAt this moment at 3am, \"Peter\" just wants to go back to bed (or the party). Yepnope crashed - it is yepnope that has the bug as far as \"Peter\" is concerned at 3am. At this point, \"Peter\" is cursing at \"Bob\". \"Bob\" is the developer that advocated using yepnope. \n\n\"Peter\" hacks something together to bypass yepnope and his hack works. His report on the crash blames yepnope. The next day, \"Bob\" is left trying to explain that yepnope should still be used. But no one else cares. \"Peter\" proved that yepnope was the problem by removing yepnope and the crash went away.\n\nIf yepnope pointed the \"finger of blame\" saying:  _\"It wasn't me. It was some other javascript that removed the first script element.\"_ Then at 3am Peter looks for why the firstScript element went away instead of focusing on yepnope.\n\n> > Understand that my motivation to debugging other people's code is pretty limited as well. \n> \n> I offerred my help to debug the issue in the other script because I wanted to help you\n\nSorry my poor communication here. I was referring to the wordpress code or the jquery code not you or yepnope. You are cool in this regards. I should have been more clear.\n\nBut other people's code being poorly behaved or not behaved in the way that is needed is life in the glorious world of open-source code.\n\n---\n\nBut back to the issue at hand, what also confused me was \n\n```\n  insBeforeObj = isGeckoLTE18 ? docElement : firstScript.parentNode\n```\n\nbut then in the code sometimes insBeforeObj was used and sometimes firstScript.parentNode was used.\n\nI will keep an eye out for why this firstScript was being deleted. It is driving me up the wall. AFAIK there is no way to put a breakpoint when a value changes in javascript. Am I wrong about that?\n\nSorry about the miscommunication earlier\n. ",
    "badg0003": "I may misunderstand the way the callback function works then. I assumed that without a 'test' that the result parameter would return true or false depending on if the script was loaded correctly or not.\n. I may misunderstand the way the callback function works then. I assumed that without a 'test' that the result parameter would return true or false depending on if the script was loaded correctly or not.\n. ",
    "NiceLiron": "Hi SlexAxton,\nI'm new here and started using Modernizr integration with yepnope and encountered a problem with the loading flow. I have no way of knowing if the resource i requested to load has been downloaded successfully. I also thought it's the \"result\" parameter meaning but as you said - it isn't :)\n\nCan you please add support for \"download_result\" or a \"error_flag\" parameter for the callback function or even better - to the complete function?\n\nThanks\n. Hi SlexAxton,\nI'm new here and started using Modernizr integration with yepnope and encountered a problem with the loading flow. I have no way of knowing if the resource i requested to load has been downloaded successfully. I also thought it's the \"result\" parameter meaning but as you said - it isn't :)\n\nCan you please add support for \"download_result\" or a \"error_flag\" parameter for the callback function or even better - to the complete function?\n\nThanks\n. ",
    "jimmyheaddon": "Hi Alex,\n\nMy problem is that YepNope 1.5.2 throws an error on page when I try to load scripts for a second time, it doesn't prevent them being loaded, and I'm not using either of the 'inject' methods?\n. Hi Alex,\n\nThanks for that, 1.5.4 seems to work, I was using 1.5.2 from the official YepNope site.\n\nCheers!\n. Also Alex, can you update the NuGet package to 1.5.4?  NuGet 1.7 supports prerelease builds if this has been putting you off pushing the latest release.\n\nCheers!\n. Hi Alex,\n\nMy problem is that YepNope 1.5.2 throws an error on page when I try to load scripts for a second time, it doesn't prevent them being loaded, and I'm not using either of the 'inject' methods?\n. Hi Alex,\n\nThanks for that, 1.5.4 seems to work, I was using 1.5.2 from the official YepNope site.\n\nCheers!\n. Also Alex, can you update the NuGet package to 1.5.4?  NuGet 1.7 supports prerelease builds if this has been putting you off pushing the latest release.\n\nCheers!\n. ",
    "jamesstephenson": "I sure can.  I just started on GitHub, so I do have to get set up, then I'll get that pull request to you.\n. I sure can.  I just started on GitHub, so I do have to get set up, then I'll get that pull request to you.\n. ",
    "knpwrs": "That sounds good. I'll get on that tomorrow (time for bed).\n. I'm not seeing any way to make the base url reach the filter without setting a global (ick). I see that there is an `attrs` property in the passed `resourceObj` but I don't see a user interface for setting attributes. It could be possible to pull off with a function call before any scripts are loaded but keeping this as a core feature has the benefit of specifying different bases for each test object (one test object could load jquery and jquery-ui from google, another could load all local scripts / other scripts from another CDN, and yet another could load with no base at all).\n\nI have reopened this pull request with a few changes to the test logic.\n. Setting `yepnope.baseUrl` would set the base url for all scripts to be loaded (not all scripts may have the same base url). By putting `base` as a property of the test object we can still pass in an array of test objects and use different bases for different scripts.\n. Makes sense. I'll look into that after class.\n. I have created the filter and removed the core functionality. I have also removed two of my tests as they are no longer necessary because my code doesn't touch prefixes.\n. Removed dependency on `Array.indexOf(...)`. All tests still pass.\n. That sounds good. I'll get on that tomorrow (time for bed).\n. I'm not seeing any way to make the base url reach the filter without setting a global (ick). I see that there is an `attrs` property in the passed `resourceObj` but I don't see a user interface for setting attributes. It could be possible to pull off with a function call before any scripts are loaded but keeping this as a core feature has the benefit of specifying different bases for each test object (one test object could load jquery and jquery-ui from google, another could load all local scripts / other scripts from another CDN, and yet another could load with no base at all).\n\nI have reopened this pull request with a few changes to the test logic.\n. Setting `yepnope.baseUrl` would set the base url for all scripts to be loaded (not all scripts may have the same base url). By putting `base` as a property of the test object we can still pass in an array of test objects and use different bases for different scripts.\n. Makes sense. I'll look into that after class.\n. I have created the filter and removed the core functionality. I have also removed two of my tests as they are no longer necessary because my code doesn't touch prefixes.\n. Removed dependency on `Array.indexOf(...)`. All tests still pass.\n. ",
    "freshwinded": "For sure, I'll do it asap.\n. Hopefully the tests are ok. It was my first time working with qunit.\n. Sure, let me tidy it up a bit first.\n. Try this:\n\nhttps://github.com/freshwinded/yepnope.js/tree/concurrent\n. The code I linked above fixes the problem - I'm using it in production.\n\nYou could try just using my forked version and see how that goes...\n. Done. As I said, a bunch of the tests are busted but I've been using it in production without any issues.\n. I think that should do it.\n. For sure, I'll do it asap.\n. Hopefully the tests are ok. It was my first time working with qunit.\n. Sure, let me tidy it up a bit first.\n. Try this:\n\nhttps://github.com/freshwinded/yepnope.js/tree/concurrent\n. The code I linked above fixes the problem - I'm using it in production.\n\nYou could try just using my forked version and see how that goes...\n. Done. As I said, a bunch of the tests are busted but I've been using it in production without any issues.\n. I think that should do it.\n. ",
    "benbabics": "Has there been any progress on this? This seems to be what I need.\n. Has there been any progress on this? This seems to be what I need.\n. ",
    "BrandonZacharie": " I'm having a similar (if not the same) problem. Is anyone tackling this?\n.  I'm having a similar (if not the same) problem. Is anyone tackling this?\n. ",
    "frodik": "This really needs to be fixed ! For now yepnope is unusable because it is unreliable when doing multiple concurrent yepnope calls, exactly as mentioned above. Have spent many hours on this before I found out it was yepnope fault. Can't believe its still not fixed....\n. This really needs to be fixed ! For now yepnope is unusable because it is unreliable when doing multiple concurrent yepnope calls, exactly as mentioned above. Have spent many hours on this before I found out it was yepnope fault. Can't believe its still not fixed....\n. ",
    "KushnirAndrew": "We are having the same issue. The fix from @freshwinded works, but it'd be great to get the problem fixed in the main repo, to make the fix available after the next release.\n. We are having the same issue. The fix from @freshwinded works, but it'd be great to get the problem fixed in the main repo, to make the fix available after the next release.\n. ",
    "proteamer": "I was able to reproduce this issue. You can see it here: http://jsfiddle.net/unlimit/S27Kz/\n. I was able to reproduce this issue. You can see it here: http://jsfiddle.net/unlimit/S27Kz/\n. ",
    "chrismbarr": "Same issue here.  We thought it was only related to IE based on this article \"[IE\u2019s Premature Execution Problem](http://www.guypo.com/technical/ies-premature-execution-problem/)\" - but after looking and searching we found this issue, which more accurately describes the problem we are running into.\n\n@proteamer's reproduction of the issue is a perfect example of what is happening incorrectly, and @freshwinded seems to have a valid fix for this issue.  Can someone please review this and pull it into the trunk if it's valid?\n. Same issue here.  We thought it was only related to IE based on this article \"[IE\u2019s Premature Execution Problem](http://www.guypo.com/technical/ies-premature-execution-problem/)\" - but after looking and searching we found this issue, which more accurately describes the problem we are running into.\n\n@proteamer's reproduction of the issue is a perfect example of what is happening incorrectly, and @freshwinded seems to have a valid fix for this issue.  Can someone please review this and pull it into the trunk if it's valid?\n. ",
    "bcreeves": "That's what I suspected. Thanks.\n. That's what I suspected. Thanks.\n. ",
    "timoxley": "omfg. Ignore this. User error. My build script wasn't running.\n. :+1:\n. omfg. Ignore this. User error. My build script wasn't running.\n. :+1:\n. ",
    "leslc": "Since this is getting into the realm of Internet Explorer 7 and Windows inconsistency, there's no need to address this bug.   \n\nThis is really hard to reproduce on IE7.  I have 3 IE7 virtual machines testing, and the problem appears on only 2 of them.  The other machine shows the correct order every time!  Changing the length of the pause function seems to change the behavior too.  \n\nFor those who are doing the same thing I'm doing (multiple requests for same file in different subsets and callbacks after each set), I've tested head.js and LABjs with this.  head.js has the same problem as yepnope.js.  However, I was pleasantly surprised that LABjs works in IE7 and executes callbacks in the most efficient order.\n\nLABjs:\n\n```\nasync-js-1.js: starting execution\nasync-js-1.js: completed execution\njsCallback 1\nasync-js-2.js: starting execution\nasync-js-2.js: completed execution\njsCallback 2\nasync-js-3.js: starting execution\nasync-js-3.js: completed execution\njsCallback 1 2 3\njsCallback 3\njsCallback 1 2 3\n```\n\nI'm still testing different scenarios.\n\nNOTE: I'm NOT saying yepnope.js won't work for IE7.  It's only for my case of loading similar files and having callbacks after different interwoven chains of files.  I don't think this pattern would occur in standard pages, as I'm relying on the async loader to keep track of files loaded dynamically based on changeable content.\n. Since this is getting into the realm of Internet Explorer 7 and Windows inconsistency, there's no need to address this bug.   \n\nThis is really hard to reproduce on IE7.  I have 3 IE7 virtual machines testing, and the problem appears on only 2 of them.  The other machine shows the correct order every time!  Changing the length of the pause function seems to change the behavior too.  \n\nFor those who are doing the same thing I'm doing (multiple requests for same file in different subsets and callbacks after each set), I've tested head.js and LABjs with this.  head.js has the same problem as yepnope.js.  However, I was pleasantly surprised that LABjs works in IE7 and executes callbacks in the most efficient order.\n\nLABjs:\n\n```\nasync-js-1.js: starting execution\nasync-js-1.js: completed execution\njsCallback 1\nasync-js-2.js: starting execution\nasync-js-2.js: completed execution\njsCallback 2\nasync-js-3.js: starting execution\nasync-js-3.js: completed execution\njsCallback 1 2 3\njsCallback 3\njsCallback 1 2 3\n```\n\nI'm still testing different scenarios.\n\nNOTE: I'm NOT saying yepnope.js won't work for IE7.  It's only for my case of loading similar files and having callbacks after different interwoven chains of files.  I don't think this pattern would occur in standard pages, as I'm relying on the async loader to keep track of files loaded dynamically based on changeable content.\n. ",
    "rodoabad": "Can someone re-open this as this is still happening even on IE 11.\n. I'll let you know tomorrow at work and yes this is exactly the same issue that I'm having since IE loads and executes scripts immediately.\n. Update: Still gives the undefined errors on scripts that are loaded and then executed immediately.\n. Yep, that's what I used.\n. You can take a look at my dev site.\n\nhttp://www.eabad-dev.townnews365.com/\n- Works flawlessly on modern browsers except IE (even with your fix).\n. Hmm, I also used our IE9 testing environment and I was able to reproduce the undefined function. This is so weird. Do you have a another test case? This is the only test case I can constantly reproduce the error.\n. That site works for me (IE10/IE11). That's a very cool side menu. What plugin are you using for that one?\n. Can someone re-open this as this is still happening even on IE 11.\n. I'll let you know tomorrow at work and yes this is exactly the same issue that I'm having since IE loads and executes scripts immediately.\n. Update: Still gives the undefined errors on scripts that are loaded and then executed immediately.\n. Yep, that's what I used.\n. You can take a look at my dev site.\n\nhttp://www.eabad-dev.townnews365.com/\n- Works flawlessly on modern browsers except IE (even with your fix).\n. Hmm, I also used our IE9 testing environment and I was able to reproduce the undefined function. This is so weird. Do you have a another test case? This is the only test case I can constantly reproduce the error.\n. That site works for me (IE10/IE11). That's a very cool side menu. What plugin are you using for that one?\n. ",
    "bastibeckr": "Same here...\nMainly on Internet Explorer 8-11.\n\nI use multiple (2) conditions to load polyfills and then I load the App.\n\n```\nModernizr.load([\n       {\n            test: Modernizr.textshadow,\n            nope: [\n                config.baseURL+'/js/lib/polyfills/textshadow.js',\n                config.baseURL+'/js/lib/polyfills/textshadow.css',\n            ]\n        },\n       {\n            test: Modernizr.anotherconditon,\n            nope: [\n                config.baseURL+'/js/lib/polyfills/another-polyfill.js',\n                config.baseURL+'/js/lib/polyfills/another-polyfill.css',\n            ]\n        },\n       {\n            load: [config.baseURL+'/js/dist/frontend/app'+config.suffix+'.js'],\n            complete: function(){\n                console.log('ALL LOADED! ');\n                App.init();\n            }\n        }\n]);\n```\n\n```\nALL LOADED!  \nAPP INIT!  \nscript1.js loaded\nscript2.js loaded\n```\n\nexpected:\n\n```\nscript1.js loaded\nscript2.js loaded\nALL LOADED!  \nAPP INIT!  \n```\n\nI have set and verified expires Headers, turned browser-caching on while testing, turned ETags off (don't know if this matters) (i've put the `scriptx.js loaded` directly into the bottom of the scripts to see when they execute - sometimes 'APP LOADED' is called definitely before all scripts are loaded...)\n. Same here...\nMainly on Internet Explorer 8-11.\n\nI use multiple (2) conditions to load polyfills and then I load the App.\n\n```\nModernizr.load([\n       {\n            test: Modernizr.textshadow,\n            nope: [\n                config.baseURL+'/js/lib/polyfills/textshadow.js',\n                config.baseURL+'/js/lib/polyfills/textshadow.css',\n            ]\n        },\n       {\n            test: Modernizr.anotherconditon,\n            nope: [\n                config.baseURL+'/js/lib/polyfills/another-polyfill.js',\n                config.baseURL+'/js/lib/polyfills/another-polyfill.css',\n            ]\n        },\n       {\n            load: [config.baseURL+'/js/dist/frontend/app'+config.suffix+'.js'],\n            complete: function(){\n                console.log('ALL LOADED! ');\n                App.init();\n            }\n        }\n]);\n```\n\n```\nALL LOADED!  \nAPP INIT!  \nscript1.js loaded\nscript2.js loaded\n```\n\nexpected:\n\n```\nscript1.js loaded\nscript2.js loaded\nALL LOADED!  \nAPP INIT!  \n```\n\nI have set and verified expires Headers, turned browser-caching on while testing, turned ETags off (don't know if this matters) (i've put the `scriptx.js loaded` directly into the bottom of the scripts to see when they execute - sometimes 'APP LOADED' is called definitely before all scripts are loaded...)\n. ",
    "vjnrv": "I keep with this problem using yepnope 1.5.4 and Firefox 17.\nThanks\n. I keep with this problem using yepnope 1.5.4 and Firefox 17.\nThanks\n. ",
    "crane-may": "run tests/preload.html with \"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/533.19.4 (KHTML, like Gecko) Version/5.0.3 Safari/533.19.4\"\n\nthe onerror or onreadystatechange callback not run when js file is loaded. This may be the cause of the error\n. run tests/preload.html with \"Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN) AppleWebKit/533.19.4 (KHTML, like Gecko) Version/5.0.3 Safari/533.19.4\"\n\nthe onerror or onreadystatechange callback not run when js file is loaded. This may be the cause of the error\n. ",
    "ixti": "Same for JS.\n\nThis one works perfectly... http://jsfiddle.net/ixti/QMXL6/\nThis one demonstrates problem perfectly... http://jsfiddle.net/ixti/QMXL6/4/\n. Same for JS.\n\nThis one works perfectly... http://jsfiddle.net/ixti/QMXL6/\nThis one demonstrates problem perfectly... http://jsfiddle.net/ixti/QMXL6/4/\n. ",
    "agilecrm": "I am planning to more from headjs because of css support in this. Is there an alternative or a fix coming by?\n. I am planning to more from headjs because of css support in this. Is there an alternative or a fix coming by?\n. ",
    "Jobu": "Might this also be the cause for the following issue?\n\nhttps://github.com/SlexAxton/yepnope.js/issues/33\n. Might this also be the cause for the following issue?\n\nhttps://github.com/SlexAxton/yepnope.js/issues/33\n. ",
    "filipmares": "any progress on this bug?\n. any progress on this bug?\n. ",
    "tjunghans": "This is seems to still be open. Is there any progress on this bug?\n. This is seems to still be open. Is there any progress on this bug?\n. ",
    "milux": "For my application I fixed this by moving the call to the cb callback parameter out of the if clause (very last lines in injectCSS()):\n\n```\nif ( ! err ) {\n  readFirstScript();\n  firstScript.parentNode.insertBefore( link, firstScript );\n}\nsTimeout(cb, 0);\n```\n\ninstead of\n\n```\nif ( ! err ) {\n  readFirstScript();\n  firstScript.parentNode.insertBefore( link, firstScript );\n  sTimeout(cb, 0);\n}\n```\n\nAs the \"err\" parameter of injectCSS is for internal use only, and cb always references executeStack in that case, this change should not mess up anything imho...\n. I don't know why this strange \"build failed\" message showed up.\nI did my best to fix it, and it worked quite well for me.\nMeanwhile I've switched to requirejs, so I don't really care whether this is finally fixed some day... sorry folks. (This project seems to be continued only half-heartedly anyway...)\n. For my application I fixed this by moving the call to the cb callback parameter out of the if clause (very last lines in injectCSS()):\n\n```\nif ( ! err ) {\n  readFirstScript();\n  firstScript.parentNode.insertBefore( link, firstScript );\n}\nsTimeout(cb, 0);\n```\n\ninstead of\n\n```\nif ( ! err ) {\n  readFirstScript();\n  firstScript.parentNode.insertBefore( link, firstScript );\n  sTimeout(cb, 0);\n}\n```\n\nAs the \"err\" parameter of injectCSS is for internal use only, and cb always references executeStack in that case, this change should not mess up anything imho...\n. I don't know why this strange \"build failed\" message showed up.\nI did my best to fix it, and it worked quite well for me.\nMeanwhile I've switched to requirejs, so I don't really care whether this is finally fixed some day... sorry folks. (This project seems to be continued only half-heartedly anyway...)\n. ",
    "peeter-tomberg": "If your Phonegap setup is as follows:\n\nMobile site at:  m.mysite.com\nPhonegap app loads a webview (that loads m.mysite.com)\n\nThen you cannot access the filesystem on m.mysite.com. This includes file://android_asset/some.js \n. Do you do full page reloads? \n. I would check logcat if there are any errors accessing the files and make a simple demo to showcase this bug. \n. I'm going out on a whim and say forge.tools.getURL() is the culprit, but without any more debug info, I can't really be sure. \n\nDebug the URL when moving from page1 to page2 and then back to page1. \n. This ticket is basically a duplicate of #114\n. If your Phonegap setup is as follows:\n\nMobile site at:  m.mysite.com\nPhonegap app loads a webview (that loads m.mysite.com)\n\nThen you cannot access the filesystem on m.mysite.com. This includes file://android_asset/some.js \n. Do you do full page reloads? \n. I would check logcat if there are any errors accessing the files and make a simple demo to showcase this bug. \n. I'm going out on a whim and say forge.tools.getURL() is the culprit, but without any more debug info, I can't really be sure. \n\nDebug the URL when moving from page1 to page2 and then back to page1. \n. This ticket is basically a duplicate of #114\n. ",
    "grofit": "EVERYTHING is local in my web app, it does NO external (outside of file://android_assets/www/*) resource loading, the whole point of using phone gap was to completely package the application into a native looking app.\n\nThe strange thing is that it works from the first page and every subsequent page fine, its just if I revisit a page it stops working, its like its caching mechanism doesn't work on android. \n\nAnyway just to confirm there are no www.* calls, every resource request is made from the root of file://android_assets/www/\\* or whatever the root url is, as phonegap's root url differs from trigger.io but trigger has a method to get your assets relative for you. So I dont think the issue mentioned above would apply in this case.\n\nAlthough the page urls look something like like:\n- file://android_assets/www/index.html\n- file://android_assets/www/pages/some_page/page_2.html\n- file://android_assets/www/pages/some_page/page_3.html\n\nAnd going from page 2 to page 3 works but then going from page 3 to page 2 would not work, but they are both within the same directory container. Currently this is a blocker on my project, and there are no alternatives which allow js and css loading, as I use dynamic resource loading quite heavily in this project.\n. Yep, everything is a full page reload. I do use Jquery mobile but I have disabled the ajax linking, I need each page to do a full refresh to clear the scripts already loaded for the existing page.\n. I have made a simple demo, but as mentioned this issue only becomes apparent when using it on android devices (or at least the 2 that I have):\n\nhttp://grofit.co.uk/uploads/yepnope_issue.zip\n\nI test my mobile applications 2 ways, either by making an IIS application and hosting it there from the src directory as the root, or I will just deploy to android device (via trigger io android deployment in this case).\n\nThe application works fine in firefox when hosted on IIS, but if deployed on the android device, if you go from page1 to page2 then back to page1 it stops working. Let me know if you have any questions.\n. Even phonegap acts the same way, and that has hardcoded root url which is something like \"file://android_assets/www\", like I said I have tried 2 separate android webview wrapping frameworks and both behave the same, I will dump the debug information here for you so you can see if there is something I am missing.\n\n```\n[INFO] Forge tools running at version 3.3.5\n[INFO] Update result: you already have the latest tools\n[INFO] Configuration is unchanged: using existing templates\n[WARNING] Platform version: v1.3 is no longer the current platform version, it is recommended you migrate to a newer version using the 'forge migrate' command. See http://current-docs.trigger.io/release-notes.html for more details\n[WARNING] No profile DEFAULT found for android\n[WARNING] No profile DEFAULT found for ios\n[INFO] Checking JavaScript files...\n[INFO] JavaScript check complete\n[INFO] Verifying your configuration settings...\n[INFO] Configuration settings check complete\n[INFO] Development build created. Use forge run to run your app.\n[INFO] Forge tools running at version 3.3.5\n[WARNING] No profile DEFAULT found for android\n[INFO] Checking JavaScript files...\n[INFO] JavaScript check complete\n[INFO] Verifying your configuration settings...\n[INFO] Configuration settings check complete\n[INFO] Starting ADB if not running\n[INFO] Looking for Android device\n[INFO] No android device specified, defaulting to TA7440BMJ1\n[INFO] Creating Android .apk file\n[INFO] Creating APK with aapt\n[INFO] Signing APK with a debug key\n[INFO] Aligning apk\n[INFO] Installing apk\n[INFO] Clearing android log\n[INFO] Showing android log\n[INFO] --------- beginning of /dev/log/main\n[INFO] 08-02 15:12:53.697 21708 21708 I Forge   : Loading initial page in webview.\n[INFO] 08-02 15:12:53.717 21708 21708 I Forge   : Application in focus, resuming webview.\n[INFO] --------- beginning of /dev/log/system\n[INFO] 08-02 15:12:53.807 21708 21708 D Forge   : Returning event: {\"event\":\"internal.connectionStateChange\",\"params\":{\"wifi\":false,\"connected\":true}}\n[INFO] 08-02 15:12:53.999 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/index.html\n[INFO] 08-02 15:12:54.039 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:54.039 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:54.077 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:12:56.299 21708 21708 E Forge   : Page Loaded -- From line 14 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:57.757 21708 21708 I Forge   : Webview switching to internal URL: file:///android_asset/src/pages/page-two.html\n[INFO] 08-02 15:12:57.817 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/pages/page-two.html\n[INFO] 08-02 15:12:57.827 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:57.837 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:57.847 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:12:59.157 21708 21708 E Forge   : Page Loaded -- From line 14 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:00.437 21708 21708 I Forge   : Webview switching to internal URL: file:///android_asset/src/index.html\n[INFO] 08-02 15:13:00.507 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/index.html\n[INFO] 08-02 15:13:00.517 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:00.517 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:00.527 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:13:03.447 21708 21708 I Forge   : Back button pressed, navigating to previous URL.\n[INFO] 08-02 15:13:03.487 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/pages/page-two.html\n[INFO] 08-02 15:13:03.497 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:03.497 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:03.497 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:13:04.047 21708 21708 I Forge   : Back button pressed, navigating to previous URL.\n[INFO] 08-02 15:13:04.117 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/index.html\n[INFO] 08-02 15:13:04.127 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:04.127 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:04.137 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:13:04.507 21708 21708 I Forge   : Back button pressed, closing activity.\n```\n\nAs you can see there are no errors, and I believe trigger.io dumps the logcat output into that same log, the first 2 pages load fine, then when I revisit the index.html page it fires yepnope but never gets a complete. Then I press the back button twice to exit the application, neither of the pages working as it goes backwards.\n. Any luck replicating it so I know I am not going mad? If you have any ideas you want me to try out to see if I can stop the behaviour happening let me know, as I don't really know what to try to do to rectify the problem and its a blocker on my project which is otherwise finished at the moment.\n. Oh good its not just me then, could you possibly give a little more context as to where abouts you check if the preloaded element is complete, as I cannot see any loops or timers on quick inspection to indicate that you could check to see if something is loaded, as it all seems to hang together on callbacks.\n. Brilliant, will give it a go.\n\n== Update ==\n\nHave tried using the above method, and whilst it does work and yepnope does load everything, the complete callback is not called correctly, which I assume is because of the manual calling of onload. So my application waits for everything to be populated then kickstarts everything else, but when complete is fired, the other files have not finished loading so it just throws an error.\n\nIt is a step in the right direction though\n. EVERYTHING is local in my web app, it does NO external (outside of file://android_assets/www/*) resource loading, the whole point of using phone gap was to completely package the application into a native looking app.\n\nThe strange thing is that it works from the first page and every subsequent page fine, its just if I revisit a page it stops working, its like its caching mechanism doesn't work on android. \n\nAnyway just to confirm there are no www.* calls, every resource request is made from the root of file://android_assets/www/\\* or whatever the root url is, as phonegap's root url differs from trigger.io but trigger has a method to get your assets relative for you. So I dont think the issue mentioned above would apply in this case.\n\nAlthough the page urls look something like like:\n- file://android_assets/www/index.html\n- file://android_assets/www/pages/some_page/page_2.html\n- file://android_assets/www/pages/some_page/page_3.html\n\nAnd going from page 2 to page 3 works but then going from page 3 to page 2 would not work, but they are both within the same directory container. Currently this is a blocker on my project, and there are no alternatives which allow js and css loading, as I use dynamic resource loading quite heavily in this project.\n. Yep, everything is a full page reload. I do use Jquery mobile but I have disabled the ajax linking, I need each page to do a full refresh to clear the scripts already loaded for the existing page.\n. I have made a simple demo, but as mentioned this issue only becomes apparent when using it on android devices (or at least the 2 that I have):\n\nhttp://grofit.co.uk/uploads/yepnope_issue.zip\n\nI test my mobile applications 2 ways, either by making an IIS application and hosting it there from the src directory as the root, or I will just deploy to android device (via trigger io android deployment in this case).\n\nThe application works fine in firefox when hosted on IIS, but if deployed on the android device, if you go from page1 to page2 then back to page1 it stops working. Let me know if you have any questions.\n. Even phonegap acts the same way, and that has hardcoded root url which is something like \"file://android_assets/www\", like I said I have tried 2 separate android webview wrapping frameworks and both behave the same, I will dump the debug information here for you so you can see if there is something I am missing.\n\n```\n[INFO] Forge tools running at version 3.3.5\n[INFO] Update result: you already have the latest tools\n[INFO] Configuration is unchanged: using existing templates\n[WARNING] Platform version: v1.3 is no longer the current platform version, it is recommended you migrate to a newer version using the 'forge migrate' command. See http://current-docs.trigger.io/release-notes.html for more details\n[WARNING] No profile DEFAULT found for android\n[WARNING] No profile DEFAULT found for ios\n[INFO] Checking JavaScript files...\n[INFO] JavaScript check complete\n[INFO] Verifying your configuration settings...\n[INFO] Configuration settings check complete\n[INFO] Development build created. Use forge run to run your app.\n[INFO] Forge tools running at version 3.3.5\n[WARNING] No profile DEFAULT found for android\n[INFO] Checking JavaScript files...\n[INFO] JavaScript check complete\n[INFO] Verifying your configuration settings...\n[INFO] Configuration settings check complete\n[INFO] Starting ADB if not running\n[INFO] Looking for Android device\n[INFO] No android device specified, defaulting to TA7440BMJ1\n[INFO] Creating Android .apk file\n[INFO] Creating APK with aapt\n[INFO] Signing APK with a debug key\n[INFO] Aligning apk\n[INFO] Installing apk\n[INFO] Clearing android log\n[INFO] Showing android log\n[INFO] --------- beginning of /dev/log/main\n[INFO] 08-02 15:12:53.697 21708 21708 I Forge   : Loading initial page in webview.\n[INFO] 08-02 15:12:53.717 21708 21708 I Forge   : Application in focus, resuming webview.\n[INFO] --------- beginning of /dev/log/system\n[INFO] 08-02 15:12:53.807 21708 21708 D Forge   : Returning event: {\"event\":\"internal.connectionStateChange\",\"params\":{\"wifi\":false,\"connected\":true}}\n[INFO] 08-02 15:12:53.999 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/index.html\n[INFO] 08-02 15:12:54.039 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:54.039 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:54.077 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:12:56.299 21708 21708 E Forge   : Page Loaded -- From line 14 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:57.757 21708 21708 I Forge   : Webview switching to internal URL: file:///android_asset/src/pages/page-two.html\n[INFO] 08-02 15:12:57.817 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/pages/page-two.html\n[INFO] 08-02 15:12:57.827 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:57.837 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:12:57.847 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:12:59.157 21708 21708 E Forge   : Page Loaded -- From line 14 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:00.437 21708 21708 I Forge   : Webview switching to internal URL: file:///android_asset/src/index.html\n[INFO] 08-02 15:13:00.507 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/index.html\n[INFO] 08-02 15:13:00.517 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:00.517 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:00.527 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:13:03.447 21708 21708 I Forge   : Back button pressed, navigating to previous URL.\n[INFO] 08-02 15:13:03.487 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/pages/page-two.html\n[INFO] 08-02 15:13:03.497 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:03.497 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:03.497 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:13:04.047 21708 21708 I Forge   : Back button pressed, navigating to previous URL.\n[INFO] 08-02 15:13:04.117 21708 21708 E Forge   : page initilizing -- From line 18 of file:///android_asset/src/index.html\n[INFO] 08-02 15:13:04.127 21708 21708 E Forge   : Running with forge -- From line 33 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:04.127 21708 21708 E Forge   : yepnope firing -- From line 22 of file:///android_asset/src/scripts/loader/default-resources.js\n[INFO] 08-02 15:13:04.137 21708 21718 D Forge   : Native call \"internal.hideLaunchImage\" with task.params: {}\n[INFO] 08-02 15:13:04.507 21708 21708 I Forge   : Back button pressed, closing activity.\n```\n\nAs you can see there are no errors, and I believe trigger.io dumps the logcat output into that same log, the first 2 pages load fine, then when I revisit the index.html page it fires yepnope but never gets a complete. Then I press the back button twice to exit the application, neither of the pages working as it goes backwards.\n. Any luck replicating it so I know I am not going mad? If you have any ideas you want me to try out to see if I can stop the behaviour happening let me know, as I don't really know what to try to do to rectify the problem and its a blocker on my project which is otherwise finished at the moment.\n. Oh good its not just me then, could you possibly give a little more context as to where abouts you check if the preloaded element is complete, as I cannot see any loops or timers on quick inspection to indicate that you could check to see if something is loaded, as it all seems to hang together on callbacks.\n. Brilliant, will give it a go.\n\n== Update ==\n\nHave tried using the above method, and whilst it does work and yepnope does load everything, the complete callback is not called correctly, which I assume is because of the manual calling of onload. So my application waits for everything to be populated then kickstarts everything else, but when complete is fired, the other files have not finished loading so it just throws an error.\n\nIt is a step in the right direction though\n. ",
    "bryjeep": "I came across the same thing on android when I was dealing with dynamic loading in my offline web app in android on a page refresh.  It seems in android they handle a clean load on a webview (or browser) differently than a page refresh or a new window or tab.  Specifically none of the preloadElem.onerror, preloadElem.onload, preloadElem.onreadystatechange are triggered on a page refresh in android browsers gingerbread or older.  ICS and newer seems to handle it correctly.  I made a quick patch that works for me enough to move my project along\n\n255a256,261\n\n> ```\n> }else{\n>   //For android versions and older webkit versions the events are not fired on a page refresh\n>   //but they are detected with complete check\n>   if (preloadElem.complete) {\n>       onload();\n>   }\n> ```\n. That was a patch diff showing the code was added at line 256 from the latest version (which i was working at) in detail description in the \n\nfunction preloadFile ( elem, url, type, splicePoint, dontExec, attrObj, timeout ) {\n\nI modified this chunk of code\n\n```\nif ( elem != \"img\" ) {\n  // If it's the first time, or we've already loaded it all the way through\n  if ( firstFlag || scriptCache[ url ] === 2 ) {\n    insBeforeObj.insertBefore( preloadElem, isGeckoLTE18 ? null : firstScript );\n\n    // If something fails, and onerror doesn't fire,\n    // continue after a timeout.\n    sTimeout( onload, timeout );\n  }\n  else {\n    // instead of injecting, just hold on to it\n    scriptCache[ url ].push( preloadElem );\n  }\n}else{\n    //For android versions and older webkit versions the events are not fired on a page refresh\n    //but they are detected with complete check\n    if (preloadElem.complete) {\n        onload();\n    }\n}\n```\n. I came across the same thing on android when I was dealing with dynamic loading in my offline web app in android on a page refresh.  It seems in android they handle a clean load on a webview (or browser) differently than a page refresh or a new window or tab.  Specifically none of the preloadElem.onerror, preloadElem.onload, preloadElem.onreadystatechange are triggered on a page refresh in android browsers gingerbread or older.  ICS and newer seems to handle it correctly.  I made a quick patch that works for me enough to move my project along\n\n255a256,261\n\n> ```\n> }else{\n>   //For android versions and older webkit versions the events are not fired on a page refresh\n>   //but they are detected with complete check\n>   if (preloadElem.complete) {\n>       onload();\n>   }\n> ```\n. That was a patch diff showing the code was added at line 256 from the latest version (which i was working at) in detail description in the \n\nfunction preloadFile ( elem, url, type, splicePoint, dontExec, attrObj, timeout ) {\n\nI modified this chunk of code\n\n```\nif ( elem != \"img\" ) {\n  // If it's the first time, or we've already loaded it all the way through\n  if ( firstFlag || scriptCache[ url ] === 2 ) {\n    insBeforeObj.insertBefore( preloadElem, isGeckoLTE18 ? null : firstScript );\n\n    // If something fails, and onerror doesn't fire,\n    // continue after a timeout.\n    sTimeout( onload, timeout );\n  }\n  else {\n    // instead of injecting, just hold on to it\n    scriptCache[ url ].push( preloadElem );\n  }\n}else{\n    //For android versions and older webkit versions the events are not fired on a page refresh\n    //but they are detected with complete check\n    if (preloadElem.complete) {\n        onload();\n    }\n}\n```\n. ",
    "ethanresnick": "That must be it, but which plugin are you talking about? I tried including [this one](https://github.com/SlexAxton/yepnope.js/blob/master/plugins/yepnope.css.js), which is the only one I saw in the repo, but it's still not working.\n. That makes sense and it's working now. Thanks!\n\nI'd just thought that !preload was part of the core (i.e. included by default). Maybe the documentation at yepnopejs.com could be clearer on that point?\n. That must be it, but which plugin are you talking about? I tried including [this one](https://github.com/SlexAxton/yepnope.js/blob/master/plugins/yepnope.css.js), which is the only one I saw in the repo, but it's still not working.\n. That makes sense and it's working now. Thanks!\n\nI'd just thought that !preload was part of the core (i.e. included by default). Maybe the documentation at yepnopejs.com could be clearer on that point?\n. ",
    "one-way": "It would be nice for the developer to have the opportunity to change the behaviour if needed.\n. It would be nice for the developer to have the opportunity to change the behaviour if needed.\n. ",
    "crodas": "Anyways I thought about it, I think it could do better if we read the parentNode along with firstNode when the closure is executed. Better approach? \n. I meant that most problems are solved (I believe) with having a firstNodeParent.\n. Anyways I thought about it, I think it could do better if we read the parentNode along with firstNode when the closure is executed. Better approach? \n. I meant that most problems are solved (I believe) with having a firstNodeParent.\n. ",
    "k33g": "Ok :)\nthank you for the prompt response. I'm going to investigate with raw ajax requests.\nhave a nice day\n. Ok :)\nthank you for the prompt response. I'm going to investigate with raw ajax requests.\nhave a nice day\n. ",
    "olemarius": "Just realized this part of the project is a huge mess. I'll clean it up and try to nail exactly what's causing this along the way, or if the issue is still there after the cleanup. I should be able to make a sandbox test for it if it's still an issue. \n. Is it possible that some systems might have \"always refresh from server\" as default setting in their IE8, and this forces yepnope to actually load scripts twice? Some of our clients are on terminals with pretty high security settings, so I'm worried this might be the reason I get a lot of weird errors. \n\nI get errors when 1) Hitting Ctrl + F5 like a maniac (30+ times) and 2) when turning on \"Always refresh from cache\". And now specifically when loading scripts that uses $.widget in jQuery which I think can break if jQuery (or other scripts) is loaded twice. \n. > We've seen some issues when other script elements are removed from the page. Could that be happening?\n\nBy this you mean adding or removing script tags to the DOM? No I dont think that's happening. Can it be because I have multiple instances of Modernizr.load ? I have widget A, B and C, and each installation of this has a Modernizr.load({ ... }); which some times loads the same scripts. I suspect I might be using it wrong :) \n. Just saw this issue: https://github.com/SlexAxton/yepnope.js/issues/96#issuecomment-9184062\n\nIt actually might be what's happening in my case as well. \n. Just realized this part of the project is a huge mess. I'll clean it up and try to nail exactly what's causing this along the way, or if the issue is still there after the cleanup. I should be able to make a sandbox test for it if it's still an issue. \n. Is it possible that some systems might have \"always refresh from server\" as default setting in their IE8, and this forces yepnope to actually load scripts twice? Some of our clients are on terminals with pretty high security settings, so I'm worried this might be the reason I get a lot of weird errors. \n\nI get errors when 1) Hitting Ctrl + F5 like a maniac (30+ times) and 2) when turning on \"Always refresh from cache\". And now specifically when loading scripts that uses $.widget in jQuery which I think can break if jQuery (or other scripts) is loaded twice. \n. > We've seen some issues when other script elements are removed from the page. Could that be happening?\n\nBy this you mean adding or removing script tags to the DOM? No I dont think that's happening. Can it be because I have multiple instances of Modernizr.load ? I have widget A, B and C, and each installation of this has a Modernizr.load({ ... }); which some times loads the same scripts. I suspect I might be using it wrong :) \n. Just saw this issue: https://github.com/SlexAxton/yepnope.js/issues/96#issuecomment-9184062\n\nIt actually might be what's happening in my case as well. \n. ",
    "YoussefTaghlabi": "I see where the issue is...\npreloadElem onload is defined as the following:\n\n``` javascript\n    // Attach handlers for all browsers\n    preloadElem.onerror = preloadElem.onload = preloadElem.onreadystatechange = function(){\n      onload.call(this, firstFlag);\n    };\n\n```\n\nIt gets nulled once onload fires:\n\n``` javascript\n    function onload ( first ) {\n        .........\n\n        // Handle memory leak in IE\n        preloadElem.onload = preloadElem.onreadystatechange = null;\n\n```\n\nInside the onload function we run through the scripcache array as:\n\n``` javascript\n\n          for ( var i in scriptCache[ url ] ) {\n            if ( scriptCache[ url ].hasOwnProperty( i )) {  \n                scriptCache[ url ][ i ].onload();\n            }\n          }\n```\n\nIn IE, it sees that onload has been nulled, hence scriptCache[ url ][ i ].onload() will raise an exception. \nI get this behavior on all IE versions.\n. Sure, I'll submit a pull-request by tomorrow.\n. Done.\n. I see where the issue is...\npreloadElem onload is defined as the following:\n\n``` javascript\n    // Attach handlers for all browsers\n    preloadElem.onerror = preloadElem.onload = preloadElem.onreadystatechange = function(){\n      onload.call(this, firstFlag);\n    };\n\n```\n\nIt gets nulled once onload fires:\n\n``` javascript\n    function onload ( first ) {\n        .........\n\n        // Handle memory leak in IE\n        preloadElem.onload = preloadElem.onreadystatechange = null;\n\n```\n\nInside the onload function we run through the scripcache array as:\n\n``` javascript\n\n          for ( var i in scriptCache[ url ] ) {\n            if ( scriptCache[ url ].hasOwnProperty( i )) {  \n                scriptCache[ url ][ i ].onload();\n            }\n          }\n```\n\nIn IE, it sees that onload has been nulled, hence scriptCache[ url ][ i ].onload() will raise an exception. \nI get this behavior on all IE versions.\n. Sure, I'll submit a pull-request by tomorrow.\n. Done.\n. ",
    "jazbek": "I am also seeing this problem in Chrome 24, OSX 10.7.5. I'm using yepnope to load https://github.com/fgnass/spin.js, but getting \"Uncaught ReferenceError: Spinner is not defined \" when I run a function that uses spin.js in my callback.\n\nThe problem is intermittent.\n. No idea if it's related, but in case it helps, I'm also seeing this in the Chrome console:\n\n```\nResource interpreted as Image but transferred with MIME type application/x-javascript\n```\n\n.. only for scripts that are loaded with yepnope.\n. I am also seeing this problem in Chrome 24, OSX 10.7.5. I'm using yepnope to load https://github.com/fgnass/spin.js, but getting \"Uncaught ReferenceError: Spinner is not defined \" when I run a function that uses spin.js in my callback.\n\nThe problem is intermittent.\n. No idea if it's related, but in case it helps, I'm also seeing this in the Chrome console:\n\n```\nResource interpreted as Image but transferred with MIME type application/x-javascript\n```\n\n.. only for scripts that are loaded with yepnope.\n. ",
    "davidhund": "I have just run into this issue. This is kind of a bummer since executing stuff when the script is loaded is one of the reasons I choose yepnope (Modernizr) instead of simply lazy-loading myself..\n\nThe Chrome warning has no negative effect I believe, it is simply a result of some load-scripts-through-image-magic yepnope does, not harmful.\n\nI would love to hear somebody on the issue of too early callbacks. @SlexAxton ?\n. I have just run into this issue. This is kind of a bummer since executing stuff when the script is loaded is one of the reasons I choose yepnope (Modernizr) instead of simply lazy-loading myself..\n\nThe Chrome warning has no negative effect I believe, it is simply a result of some load-scripts-through-image-magic yepnope does, not harmful.\n\nI would love to hear somebody on the issue of too early callbacks. @SlexAxton ?\n. ",
    "jonbca": "~~I've also reproduced this on IE 11/Windows 8.1 pre-release. [Here's a fiddle](http://jsfiddle.net/jonbca/Nn9A9/). You'll see if you open the F12 developer tools and capture network traffic that the `code.jquery.com` version of jQuery always loads even if the first one succeeds.~~\n\nThe problem I was running into was related to a bug in jQuery 1.10.1, not Yepnope.\n. Similar issue here.\n\nI'm using Modernizr.load like so:\n\n```\nModernizr.load({\n    test: Modernizr.input.placeholder,\n    nope: 'jquery.placeholder.min.js',\n    callback: $.proxy(function () {\n        this.$('input').placeholder();\n    }, this)\n});\n```\n\nIE 9 complains that \"Object doesn't support property or method 'apply'\".\n\nThe break is on the same line as in the previous comment. The highlighted code in my debugger is `y[c][d].onload()`.\n\nOn inspection:\n\n**c** is the name of the script being loaded\n**d** is 0\n\nFor that particular object, `onload` is `null`.\n\nI haven't investigated further than this.\n. Ok, a little more investigation:\n\nThis error seems to occur only the _first_ time the load call executes for a given script. Subsequent calls always succeed.\n\nI'm wondering if it's possible that the error might be happening if the 'this' object is destroyed before the script loads? In my case, the error seems to occur predictably in Karma testing, but irregularly in manual testing.\n. I've logged a bug against WebKit also: https://bugs.webkit.org/show_bug.cgi?id=125151.\n\nI was able to reproduce this issue in Safari 7/Mac and WebKit nightly, but it seems to occur both for HTTP and HTTPS scripts.\n\nEdit: It also looks like my WebKit bug is a dupe of https://bugs.webkit.org/show_bug.cgi?id=32423. :(\n. ~~I've also reproduced this on IE 11/Windows 8.1 pre-release. [Here's a fiddle](http://jsfiddle.net/jonbca/Nn9A9/). You'll see if you open the F12 developer tools and capture network traffic that the `code.jquery.com` version of jQuery always loads even if the first one succeeds.~~\n\nThe problem I was running into was related to a bug in jQuery 1.10.1, not Yepnope.\n. Similar issue here.\n\nI'm using Modernizr.load like so:\n\n```\nModernizr.load({\n    test: Modernizr.input.placeholder,\n    nope: 'jquery.placeholder.min.js',\n    callback: $.proxy(function () {\n        this.$('input').placeholder();\n    }, this)\n});\n```\n\nIE 9 complains that \"Object doesn't support property or method 'apply'\".\n\nThe break is on the same line as in the previous comment. The highlighted code in my debugger is `y[c][d].onload()`.\n\nOn inspection:\n\n**c** is the name of the script being loaded\n**d** is 0\n\nFor that particular object, `onload` is `null`.\n\nI haven't investigated further than this.\n. Ok, a little more investigation:\n\nThis error seems to occur only the _first_ time the load call executes for a given script. Subsequent calls always succeed.\n\nI'm wondering if it's possible that the error might be happening if the 'this' object is destroyed before the script loads? In my case, the error seems to occur predictably in Karma testing, but irregularly in manual testing.\n. I've logged a bug against WebKit also: https://bugs.webkit.org/show_bug.cgi?id=125151.\n\nI was able to reproduce this issue in Safari 7/Mac and WebKit nightly, but it seems to occur both for HTTP and HTTPS scripts.\n\nEdit: It also looks like my WebKit bug is a dupe of https://bugs.webkit.org/show_bug.cgi?id=32423. :(\n. ",
    "rayfoss": "I can mitigate the issue by using a window load event, inside the callback. Seems unnecessary.\n. I can mitigate the issue by using a window load event, inside the callback. Seems unnecessary.\n. ",
    "unscriptable": "When I get back to my desk, I'll take a closer look at the entire plugin. The WebKit team have been making lots of changes to link onload and style sheet processing over the past few months -- not all of them are good changes IMHO. I'm debating whether to file a new bug since their new code prevents any means to detect when a stylesheet's rules have been applied to the document. (Other browsers wait to fire onload until after the rules have been applied, although this behavior is not strictly part of the w3c spec.  I don't know if you care to distinguish the difference between the time when the sheet's file is loaded and when the styles are applied.)\n\nOn the bright side, all WebKit browsers now have a working onload event so this code may not be needed any more, depending on how you want to deal with previous WebKit releases. I am about to patch my plugin to deal with the latest WebKit mess. Let me know what you want to do and I can submit a pull request for your plugin, too. \n. Just to clarify: you don't mind if onload fires before the css rules are applied to the document?  If you do mind, I don't currently have a solution for that for webkit when loading cross-domain stylesheets.  \n. Agreed. I'm planning to remove any of my docs that claim to be that accurate and suggest that people do what you suggest.\n. When I get back to my desk, I'll take a closer look at the entire plugin. The WebKit team have been making lots of changes to link onload and style sheet processing over the past few months -- not all of them are good changes IMHO. I'm debating whether to file a new bug since their new code prevents any means to detect when a stylesheet's rules have been applied to the document. (Other browsers wait to fire onload until after the rules have been applied, although this behavior is not strictly part of the w3c spec.  I don't know if you care to distinguish the difference between the time when the sheet's file is loaded and when the styles are applied.)\n\nOn the bright side, all WebKit browsers now have a working onload event so this code may not be needed any more, depending on how you want to deal with previous WebKit releases. I am about to patch my plugin to deal with the latest WebKit mess. Let me know what you want to do and I can submit a pull request for your plugin, too. \n. Just to clarify: you don't mind if onload fires before the css rules are applied to the document?  If you do mind, I don't currently have a solution for that for webkit when loading cross-domain stylesheets.  \n. Agreed. I'm planning to remove any of my docs that claim to be that accurate and suggest that people do what you suggest.\n. ",
    "timmfin": "I just noticed this problem as well. Some browsers are polling infinitely and while that isn't breaking anything, it is eating up unnecessary CPU cycles.\n\nHas anyone dug deeper to try and fix this? Or at least prevent the polling from happening in the browsers that support `onload` on the `<link>` element?\n. I took a shot at fixing this. Check out https://github.com/SlexAxton/yepnope.js/pull/200\n. I just noticed this problem as well. Some browsers are polling infinitely and while that isn't breaking anything, it is eating up unnecessary CPU cycles.\n\nHas anyone dug deeper to try and fix this? Or at least prevent the polling from happening in the browsers that support `onload` on the `<link>` element?\n. I took a shot at fixing this. Check out https://github.com/SlexAxton/yepnope.js/pull/200\n. ",
    "hinok": "Modernizr 2.6.2 with Modernizr.load (Yepnope 1.5.4)\nInternet Explorer 9.0.81122 / Windows 7\n\nI have the same issue still. In developer tool's console:\n\n```\nSCRIPT5007: Object expected \nmodernizr.min.js, line 4 character 8879\nLOG: assets/js/components.js loaded \nLOG: assets/js/modules/App.js loaded \nLOG: typeof App undefined \nLOG: typeof enquire object \nLOG: typeof window.App undefined \nLOG: typeof window.enquire object \nSCRIPT5009: 'App' is undefined \nloader.modernizr.js, line 36 character 7\n```\n\nmodernizr.min.js, line 4 character 8879\n\n```\ny[c].hasOwnProperty(d)&& CURSOR HERE y[c][d].onload()}}var j=j||B.errorTimeout,l=b.createElement(a)\n```\n\nCallback return information that App is loaded, but using App in complete function sometimes end with error - App is undefined, and sometimes just work.\n\nModernizr is loaded sync. in <head> as first script. \n. Modernizr 2.6.2 with Modernizr.load (Yepnope 1.5.4)\nInternet Explorer 9.0.81122 / Windows 7\n\nI have the same issue still. In developer tool's console:\n\n```\nSCRIPT5007: Object expected \nmodernizr.min.js, line 4 character 8879\nLOG: assets/js/components.js loaded \nLOG: assets/js/modules/App.js loaded \nLOG: typeof App undefined \nLOG: typeof enquire object \nLOG: typeof window.App undefined \nLOG: typeof window.enquire object \nSCRIPT5009: 'App' is undefined \nloader.modernizr.js, line 36 character 7\n```\n\nmodernizr.min.js, line 4 character 8879\n\n```\ny[c].hasOwnProperty(d)&& CURSOR HERE y[c][d].onload()}}var j=j||B.errorTimeout,l=b.createElement(a)\n```\n\nCallback return information that App is loaded, but using App in complete function sometimes end with error - App is undefined, and sometimes just work.\n\nModernizr is loaded sync. in <head> as first script. \n. ",
    "hannesjohansson": "I'm pretty sure I am experiencing this error right now through a build of Modernizr with Modernizr load\n\nEDIT: Now thinking that it has to do with the \"common gotcha\" of not being able to load more than two scripts in old ie.\n. I'm pretty sure I am experiencing this error right now through a build of Modernizr with Modernizr load\n\nEDIT: Now thinking that it has to do with the \"common gotcha\" of not being able to load more than two scripts in old ie.\n. ",
    "david-kirkland": "In case some of you did not notice, the development version of Modernizr does NOT include the load method as you might presume it would.  The following was taken from: http://modernizr.com/downloads/modernizr-latest.js\n- Modernizr has an optional (not included) conditional resource loader\n- called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n- To get a build that includes Modernizr.load(), as well as choosing\n- which tests to include, go to www.modernizr.com/download/\n. In case some of you did not notice, the development version of Modernizr does NOT include the load method as you might presume it would.  The following was taken from: http://modernizr.com/downloads/modernizr-latest.js\n- Modernizr has an optional (not included) conditional resource loader\n- called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n- To get a build that includes Modernizr.load(), as well as choosing\n- which tests to include, go to www.modernizr.com/download/\n. ",
    "bbodenmiller": "@SlexAxton where does one sign this? [My PR](https://github.com/SlexAxton/yepnope.js/pull/197) is the same as this one.\n. @SlexAxton where does one sign this? [My PR](https://github.com/SlexAxton/yepnope.js/pull/197) is the same as this one.\n. ",
    "tomfuertes": "xD\n. xD\n. ",
    "EvanHahn": "I get this too. Because yepnope.js doesn't have characters outside of the [US-ASCII range](http://www.asciitable.com/), it's fine. You may be able to suppress this in the HTML with the [charset attribute](http://reference.sitepoint.com/html/script/charset).\n. I get this too. Because yepnope.js doesn't have characters outside of the [US-ASCII range](http://www.asciitable.com/), it's fine. You may be able to suppress this in the HTML with the [charset attribute](http://reference.sitepoint.com/html/script/charset).\n. ",
    "cr101": "Does anyone know how to suppress these error messages when loading JavaScript files?\n. Does anyone know how to suppress these error messages when loading JavaScript files?\n. ",
    "acasademont": "Nevermind, I guess it's more important to have the byte count low. I'll continue to add it with the `addPrefix` method\n. Nevermind, I guess it's more important to have the byte count low. I'll continue to add it with the `addPrefix` method\n. ",
    "collinforrester": "Thanks! I'll leave it and wait for 2.0.\n. Thanks! I'll leave it and wait for 2.0.\n. ",
    "RinkAttendant6": "I'm wondering when this will be merged in because I think it will address the issues in Internet Explorer that I'm encountering with Modernizr: [Stack Overflow - YepNope/Modernizr callbacks with global JavaScript variables and Internet Explorer](http://stackoverflow.com/questions/20532727/yepnope-modernizr-callbacks-with-global-javascript-variables-and-internet-explor)\n. I'm wondering when this will be merged in because I think it will address the issues in Internet Explorer that I'm encountering with Modernizr: [Stack Overflow - YepNope/Modernizr callbacks with global JavaScript variables and Internet Explorer](http://stackoverflow.com/questions/20532727/yepnope-modernizr-callbacks-with-global-javascript-variables-and-internet-explor)\n. ",
    "CyrilMazur": "I found out that the compiled version of yepnope was buggy, I had a similar issue (different case, but the fact that I had an empty load attribute was provoking an unexpected behaviour on my complete callback).\n\nThe minified version of yepnope must be recompiled with a different compiler, or updated version of the compiler (they used what, Closure Compiler?). The version included in Modernizr is also affected.\n. Ok I did more testing and here is my finding. The behaviour is different whether I use the minified version or the full version. The bug occurs when using the minified version of yepnope, but gives the right expected result when using the full version.\n\nYou can use my JS code for testing, whether script*.js files exist or not doesn't change the result, and try to use either the minified version or the full version, and see the results are different.\n. This issue is also related according to my testing https://github.com/SlexAxton/yepnope.js/issues/167 using the full version solves his problem\n. I found out that the compiled version of yepnope was buggy, I had a similar issue (different case, but the fact that I had an empty load attribute was provoking an unexpected behaviour on my complete callback).\n\nThe minified version of yepnope must be recompiled with a different compiler, or updated version of the compiler (they used what, Closure Compiler?). The version included in Modernizr is also affected.\n. Ok I did more testing and here is my finding. The behaviour is different whether I use the minified version or the full version. The bug occurs when using the minified version of yepnope, but gives the right expected result when using the full version.\n\nYou can use my JS code for testing, whether script*.js files exist or not doesn't change the result, and try to use either the minified version or the full version, and see the results are different.\n. This issue is also related according to my testing https://github.com/SlexAxton/yepnope.js/issues/167 using the full version solves his problem\n. ",
    "dwt": "Reported to chromium at https://code.google.com/p/chromium/issues/detail?id=244381\n. Reported to chromium at https://code.google.com/p/chromium/issues/detail?id=244381\n. ",
    "rbu": "I have seen the same behavior in IE8.\n\n![ie8-jsload-error](https://f.cloud.github.com/assets/65913/694387/a44831d6-dcae-11e2-9c08-85a94afc8c11.png)\n. The documentation says:\n\n> IEs less than 9 don't guarantee that the callbacks for scripts run immediately after the related script executes. There are hacks for this but they are not universally applicable to all scripts. Please see Julian Aubourg's blog post on this subject if you you'd like to learn more information.\n\nI'm not sure that is the issue you are referring to. The link is now dead, but you can find an archived copy at http://web.archive.org/web/20130115002058/http://jaubourg.net/archive/7/2010\n. I have seen the same behavior in IE8.\n\n![ie8-jsload-error](https://f.cloud.github.com/assets/65913/694387/a44831d6-dcae-11e2-9c08-85a94afc8c11.png)\n. The documentation says:\n\n> IEs less than 9 don't guarantee that the callbacks for scripts run immediately after the related script executes. There are hacks for this but they are not universally applicable to all scripts. Please see Julian Aubourg's blog post on this subject if you you'd like to learn more information.\n\nI'm not sure that is the issue you are referring to. The link is now dead, but you can find an archived copy at http://web.archive.org/web/20130115002058/http://jaubourg.net/archive/7/2010\n. ",
    "giammin": "why closed? it has been resolved?\n. I don't agree with you... AMD in many cases is not the solution and yepnope in those cases works great\n. ok, I misunderstood you post. Anyway I find your plugin very usefull becouse i use it to load single js and does not use the in-order script features\n. yes, it is!\n. why closed? it has been resolved?\n. I don't agree with you... AMD in many cases is not the solution and yepnope in those cases works great\n. ok, I misunderstood you post. Anyway I find your plugin very usefull becouse i use it to load single js and does not use the in-order script features\n. yes, it is!\n. ",
    "hopewise": "I found that jQuery is loaded twice! oh .. sorry, please delete this issue if possible ..\n. I found that jQuery is loaded twice! oh .. sorry, please delete this issue if possible ..\n. ",
    "gjerokrsteski": "I read your documentation :-) do I know why it is twice times loaded. I will revert my change. Sorry and thank you :-)\n. I read your documentation :-) do I know why it is twice times loaded. I will revert my change. Sorry and thank you :-)\n. ",
    "jslegers": "I wonder if this issue is related with issue https://github.com/SlexAxton/yepnope.js/issues/181.\n. I wonder if this issue is related with issue https://github.com/SlexAxton/yepnope.js/issues/178.\n. I wonder if this issue is related with issue https://github.com/SlexAxton/yepnope.js/issues/181.\n. I wonder if this issue is related with issue https://github.com/SlexAxton/yepnope.js/issues/178.\n. ",
    "jameswilson": "Just out of curiosity, does it work if you make the brackets and braces match between the load and callback options?\n\n```\nload: [ ... ],\ncallback: [ ... ],\n```\n\nor \n\n```\nload: { ... },\ncallback: { ... },\n```\n\ninstead of:\n\n```\nload: [ ... ],\ncallback: { ... },\n```\n. Just out of curiosity, does it work if you make the brackets and braces match between the load and callback options?\n\n```\nload: [ ... ],\ncallback: [ ... ],\n```\n\nor \n\n```\nload: { ... },\ncallback: { ... },\n```\n\ninstead of:\n\n```\nload: [ ... ],\ncallback: { ... },\n```\n. ",
    "jaypea": "any news on this? I run into this bug today, too.\n. i've experience the same problem :/\n. any news on this? I run into this bug today, too.\n. i've experience the same problem :/\n. ",
    "ismailbay": "any news on this issue?\n. Hi @milux , \n\nThanks for your quick response. \nThe reason for the build failure is that there is no .travis.yml in the project root included. \n\nMay be, @SlexAxton takes a look at it and merges it eventually as a new release.\n. any news on this issue?\n. Hi @milux , \n\nThanks for your quick response. \nThe reason for the build failure is that there is no .travis.yml in the project root included. \n\nMay be, @SlexAxton takes a look at it and merges it eventually as a new release.\n. ",
    "csillag": "Was this problem solved? I don't see any of the commits referencing this issue.\nCould you please enlighten me about the current status of this?\n. Was this problem solved? I don't see any of the commits referencing this issue.\nCould you please enlighten me about the current status of this?\n. ",
    "zigotica": "ok, i was searching the whole internet and issues while the info is at your homepage:\nhttp://yepnopejs.com/#twice\n\nthe question remains the same. even for your own site, there are two requests per injection in chrome. no cache at all. no 304 status, all 200. apparently firefox manages cache correctly. \n\nis there a way to ensure i can setup this correctly in my server? what does \"sending the correct cache headers\" imply? \n\nthanx\n. hi @tdakhla \nI finally ended up using modernizr test + a simple async loader, something like:\n\n```\ninjectJS : function(src, body){\n        var script = document.createElement('script');\n            script.src = src;\n        if(body) document.body.appendChild(script);\n        else  document.getElementsByTagName(\"head\")[0].appendChild(script);\n    }\n```\n. ok, i was searching the whole internet and issues while the info is at your homepage:\nhttp://yepnopejs.com/#twice\n\nthe question remains the same. even for your own site, there are two requests per injection in chrome. no cache at all. no 304 status, all 200. apparently firefox manages cache correctly. \n\nis there a way to ensure i can setup this correctly in my server? what does \"sending the correct cache headers\" imply? \n\nthanx\n. hi @tdakhla \nI finally ended up using modernizr test + a simple async loader, something like:\n\n```\ninjectJS : function(src, body){\n        var script = document.createElement('script');\n            script.src = src;\n        if(body) document.body.appendChild(script);\n        else  document.getElementsByTagName(\"head\")[0].appendChild(script);\n    }\n```\n. ",
    "tdakhla": "I just started using yepnope for a website and noticed this behavior in Chrome as well.  It looks like even yepnope's website requests every asset twice, although I'm not entirely sure why.  Here's what I've noticed:\n- Script tags that are requested _before_ the page onload event are duplicate requested from the server and not looked in the cache.\n- Script tags that are requested _after_ page onload event aren't duplicate requested, as Chrome appears to lookup the asset in the cache correctly.\n- 2 inline script tags with the exact same URL are _not_ duplicate requested (both fire before onload event).\n- An inline script tag and an inline img tag with the same URL _are_ duplicate requested (both fire before the onload event).\n\nBottom line: Chrome seems to treat img and script requests differently if they occur before the onload event, even if they're the exact same URL.\n. I just started using yepnope for a website and noticed this behavior in Chrome as well.  It looks like even yepnope's website requests every asset twice, although I'm not entirely sure why.  Here's what I've noticed:\n- Script tags that are requested _before_ the page onload event are duplicate requested from the server and not looked in the cache.\n- Script tags that are requested _after_ page onload event aren't duplicate requested, as Chrome appears to lookup the asset in the cache correctly.\n- 2 inline script tags with the exact same URL are _not_ duplicate requested (both fire before onload event).\n- An inline script tag and an inline img tag with the same URL _are_ duplicate requested (both fire before the onload event).\n\nBottom line: Chrome seems to treat img and script requests differently if they occur before the onload event, even if they're the exact same URL.\n. ",
    "hugofelp": "Can you please provide more details on your issue? Also, could you please have a look at this fix and let me know if it works for you? - https://github.com/SlexAxton/yepnope.js/pull/196\n. Silly question... you didn't use the minified file, did you? I applied changes only to the source - https://github.com/hugofelp/yepnope.js/blob/a9f4518bf8b4faebd1b893e8af6c485ec4e5af01/yepnope.js\n. It actually works fine on IE here. IE9 doesn't throw any error, and IE8 complains about a chain of methods with a null value in the middle - \"'exec(...)' is null or not an object\"\nBut nothing related to yepnope... 10 out of 10 it hit the callback after the loaded file had been parsed (I was looking at the lazyload bit).\n. Well, this is my case - http://trustpower.co.nz/for-your-home/plans-and-pricing\nIt breaks on my IE8. I will be pushing the fix to live later on today, let's see how it behaves...\n. Can you please provide more details on your issue? Also, could you please have a look at this fix and let me know if it works for you? - https://github.com/SlexAxton/yepnope.js/pull/196\n. Silly question... you didn't use the minified file, did you? I applied changes only to the source - https://github.com/hugofelp/yepnope.js/blob/a9f4518bf8b4faebd1b893e8af6c485ec4e5af01/yepnope.js\n. It actually works fine on IE here. IE9 doesn't throw any error, and IE8 complains about a chain of methods with a null value in the middle - \"'exec(...)' is null or not an object\"\nBut nothing related to yepnope... 10 out of 10 it hit the callback after the loaded file had been parsed (I was looking at the lazyload bit).\n. Well, this is my case - http://trustpower.co.nz/for-your-home/plans-and-pricing\nIt breaks on my IE8. I will be pushing the fix to live later on today, let's see how it behaves...\n. ",
    "ultimatedelman": "FWIW - I am also having this issue. Every once in a while, the `complete` function will fire before the file is either loaded or executed, causing inexplicable errors.\n. FWIW - I am also having this issue. Every once in a while, the `complete` function will fire before the file is either loaded or executed, causing inexplicable errors.\n. ",
    "seethroughtrees": "Hi Keenan,  Likely your problem is that whatever code is using jquery is loading before you get the resource.  Try putting the code that is using jquery inside the callback and see if that makes the difference.  This is the key to async.  It takes a bit to get used to.  But once you do, everything will be better.\n. Don't worry.  Its hard to grasp async until you've gotten to the point where you really need it.  And there are probably a lot of people who can describe it better than me.  But here's the idea:\n\nWhen you load everything in order (sync), you know what is available to you because the previous file is loaded.  When you load async, you put it all out there at once, and download your assets concurrently.  The only way to know when something has returned, is by using that callback.   \n\nSo you need to delay any code that depends on jQuery until you know for a fact that jQuery has loaded.  (hence putting your new code in the callback).\n\nSo for your example:  (I removed all the extra code so you can focus on the idea)\n\n```\nyepnope([{\n  load: 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n  complete: function () {\n     // add any code using jQuery in here\n     $(document.body).append('<p>jQuery is loaded!</p>'); \n   }\n}]);\n```\n\nHope that helps.\n\nAlso, keep in mind, StackOverflow is perfect for questions like this.  Devs will expect Issues in here to be possible bugs in the codebase...\n\nBest of luck.\n. No problem at all, glad I could help...  @SlexAxton can feel free to close this issue.\n. Hi Keenan,  Likely your problem is that whatever code is using jquery is loading before you get the resource.  Try putting the code that is using jquery inside the callback and see if that makes the difference.  This is the key to async.  It takes a bit to get used to.  But once you do, everything will be better.\n. Don't worry.  Its hard to grasp async until you've gotten to the point where you really need it.  And there are probably a lot of people who can describe it better than me.  But here's the idea:\n\nWhen you load everything in order (sync), you know what is available to you because the previous file is loaded.  When you load async, you put it all out there at once, and download your assets concurrently.  The only way to know when something has returned, is by using that callback.   \n\nSo you need to delay any code that depends on jQuery until you know for a fact that jQuery has loaded.  (hence putting your new code in the callback).\n\nSo for your example:  (I removed all the extra code so you can focus on the idea)\n\n```\nyepnope([{\n  load: 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js',\n  complete: function () {\n     // add any code using jQuery in here\n     $(document.body).append('<p>jQuery is loaded!</p>'); \n   }\n}]);\n```\n\nHope that helps.\n\nAlso, keep in mind, StackOverflow is perfect for questions like this.  Devs will expect Issues in here to be possible bugs in the codebase...\n\nBest of luck.\n. No problem at all, glad I could help...  @SlexAxton can feel free to close this issue.\n. ",
    "keenanpayne": "@seethroughtrees Thank you very much for the description, but I truly don't understand how to use the callback. I hate to bother but if you could please show me using that little code snipped I used above I would really appreciate it. This issue has been killing me recently and I'm having a hard time wrapping my head around this. \n. @seethroughtrees Thank you so much for your help. Your answer really helped me out and you're right, it is hard to wrap your head around. However, I managed to use the callback to load my jQuery dependent scripts, so I'm moving in the right direction. \n\nAnd you're right, this is for \"issues with the code\" and not \"personal issues\". I'll be sure to head to StackOverflow for questions like this in the future. \n\nBest,\nKeenan \n. @seethroughtrees Thank you very much for the description, but I truly don't understand how to use the callback. I hate to bother but if you could please show me using that little code snipped I used above I would really appreciate it. This issue has been killing me recently and I'm having a hard time wrapping my head around this. \n. @seethroughtrees Thank you so much for your help. Your answer really helped me out and you're right, it is hard to wrap your head around. However, I managed to use the callback to load my jQuery dependent scripts, so I'm moving in the right direction. \n\nAnd you're right, this is for \"issues with the code\" and not \"personal issues\". I'll be sure to head to StackOverflow for questions like this in the future. \n\nBest,\nKeenan \n. ",
    "jacobq": "It looks like it should actually be `function(url, result, key)` to match the other examples on the page and code like `callback( resource['origUrl'], testResult, index )` in yepnope.js. \n. It looks like it should actually be `function(url, result, key)` to match the other examples on the page and code like `callback( resource['origUrl'], testResult, index )` in yepnope.js. \n. ",
    "j-ro": "Update here: I'm currently using this to load yepnope:\n\n``` javascript\n<script>window.yepnope || document.write('<script src=\"/assets/yepnope154-min.js\"><\\/script>');</script>\n```\n\nIt would be nice not to use document.write, though, hence the noconflict request.\n. Update here: I'm currently using this to load yepnope:\n\n``` javascript\n<script>window.yepnope || document.write('<script src=\"/assets/yepnope154-min.js\"><\\/script>');</script>\n```\n\nIt would be nice not to use document.write, though, hence the noconflict request.\n. ",
    "alexreardon": "Issue also appears to be occurring on firefox\n\n![screenshot 2014-04-24 11 13 27](https://cloud.githubusercontent.com/assets/2182637/2785173/bc18b81a-cb4d-11e3-9740-9d2e6530e912.png)\n. _bump_\n. _bumping again_\n. Issue also appears to be occurring on firefox\n\n![screenshot 2014-04-24 11 13 27](https://cloud.githubusercontent.com/assets/2182637/2785173/bc18b81a-cb4d-11e3-9740-9d2e6530e912.png)\n. _bump_\n. _bumping again_\n. ",
    "rotsee": "Weird, that's what I thought after reading the docs, but I failed to make it work. Will have to try again...\n. Weird, that's what I thought after reading the docs, but I failed to make it work. Will have to try again...\n. ",
    "stewieoO": "The error seems to be in the 'yepnope' function.\n\n```\nfunction yepnope(url, tests, cb) {\n    var options;\n\n    if (isObject(url)) {\n      // It was just kidding about being the url\n      options = url;\n      // Can't ever have both, so this is fine\n      url = options.src || options.href;\n    }\n\n    url = yepnope.urlFormatter(url, tests);\n\n    if (!options) {\n      options = {_url: url};\n    }\n    else {\n      options._url = url;\n    }\n\n    var type = getExtension(url);\n```\n\nIn the line where url is set the first time, it says \"options.src || options.href\".\nBut the object passed to url doesn't have these attributes. It has \"complete\" and \"load\", where \"load\" is an array of the links you have put into Load: [...].\n\nI haven't figured out yet how to fix this, since the yepnope function seems not to support this type of object or even multiple files. Or am i totally wrong here?\n. The error seems to be in the 'yepnope' function.\n\n```\nfunction yepnope(url, tests, cb) {\n    var options;\n\n    if (isObject(url)) {\n      // It was just kidding about being the url\n      options = url;\n      // Can't ever have both, so this is fine\n      url = options.src || options.href;\n    }\n\n    url = yepnope.urlFormatter(url, tests);\n\n    if (!options) {\n      options = {_url: url};\n    }\n    else {\n      options._url = url;\n    }\n\n    var type = getExtension(url);\n```\n\nIn the line where url is set the first time, it says \"options.src || options.href\".\nBut the object passed to url doesn't have these attributes. It has \"complete\" and \"load\", where \"load\" is an array of the links you have put into Load: [...].\n\nI haven't figured out yet how to fix this, since the yepnope function seems not to support this type of object or even multiple files. Or am i totally wrong here?\n. ",
    "lext-7": "I got the same wrong.\n\n``` javascript\nif (isObject(url)) {\n      // It was just kidding about being the url\n      options = url;\n      // Can't ever have both, so this is fine\n      url = options.src || options.href;\n    }\n```\n\non line 256 in yepnode.2.0.0.js\n. I got the same wrong.\n\n``` javascript\nif (isObject(url)) {\n      // It was just kidding about being the url\n      options = url;\n      // Can't ever have both, so this is fine\n      url = options.src || options.href;\n    }\n```\n\non line 256 in yepnode.2.0.0.js\n. ",
    "radonirinamaminiaina": "Ok, thanks for your reply\n. Ok, thanks for your reply\n. ",
    "tr33m4n": "This is still an issue, any updates?\n. This is still an issue, any updates?\n. ",
    "tortillaj": "If anyone is still watching, this is still a problem\n. If anyone is still watching, this is still a problem\n. ",
    "atakanau": "Try this:\r\n[https://github.com/SlexAxton/yepnope.js/compare/master...atakanau:patch-1#diff-634c4c46979e03886c66c0e5c632a848](https://github.com/SlexAxton/yepnope.js/compare/master...atakanau:patch-1#diff-634c4c46979e03886c66c0e5c632a848). Try this:\r\n[https://github.com/SlexAxton/yepnope.js/compare/master...atakanau:patch-1#diff-634c4c46979e03886c66c0e5c632a848](https://github.com/SlexAxton/yepnope.js/compare/master...atakanau:patch-1#diff-634c4c46979e03886c66c0e5c632a848). ",
    "iq-dot": "Brilliant thanks for the alternative.\n. Brilliant thanks for the alternative.\n. ",
    "kumarharsh": "No idea what's going on with these two projects... modernizr already has very poor docs wrt this, and here it's an even confusing doc which says it has deprecated itself, but still houses the library\n. No, I don't want you to delete the repo. I was just stumped by the wording of the notice:\n\n> We have replaced this repo with a script...\n\nI assumed this repo was discontinued, and replaced with a simple gist or something. That confused me, because the repo, and the code was all there. Then when I looked into the commit history, it became clear that the \"repo\" you refer here is the old library, not the whole repo as such.\n. No, I don't want you to delete the repo. I was just stumped by the wording of the notice:\n\n> We have replaced this repo with a script...\n\nI assumed this repo was discontinued, and replaced with a simple gist or something. That confused me, because the repo, and the code was all there. Then when I looked into the commit history, it became clear that the \"repo\" you refer here is the old library, not the whole repo as such.\n. No idea what's going on with these two projects... modernizr already has very poor docs wrt this, and here it's an even confusing doc which says it has deprecated itself, but still houses the library\n. No, I don't want you to delete the repo. I was just stumped by the wording of the notice:\n\n> We have replaced this repo with a script...\n\nI assumed this repo was discontinued, and replaced with a simple gist or something. That confused me, because the repo, and the code was all there. Then when I looked into the commit history, it became clear that the \"repo\" you refer here is the old library, not the whole repo as such.\n. No, I don't want you to delete the repo. I was just stumped by the wording of the notice:\n\n> We have replaced this repo with a script...\n\nI assumed this repo was discontinued, and replaced with a simple gist or something. That confused me, because the repo, and the code was all there. Then when I looked into the commit history, it became clear that the \"repo\" you refer here is the old library, not the whole repo as such.\n. ",
    "plusplusben": "Not sure if anyone still follows this, but I ran into this same issue. I was able to resolve it by moving the following line...\n\n// Handle memory leak in IE\nscript.onload = script.onreadystatechange = script.onerror = null;\n\n... to after yepnope has actually finished its work.\n\nBasically, this line is ripping the rug out from under yepnope. Once the readystate is \"loading\", the handler is removed. That means, we will never be notified when the readystate is \"loaded\".\n. One other thing, I had to remove the two blocks of code that checked for isOldIE. This seemed to resolve my issues with both IE9 and IE10.\n. I wasn't able to figure out exactly what was going on with the isOldIE flag. Just that when that code was in there I would get a timeout. When I removed it, I got notified of successful load. The comment next to the isOldIE stuff seems to be from 2010, so I don't think IE9 and IE10 existed then.\n. Not sure if anyone still follows this, but I ran into this same issue. I was able to resolve it by moving the following line...\n\n// Handle memory leak in IE\nscript.onload = script.onreadystatechange = script.onerror = null;\n\n... to after yepnope has actually finished its work.\n\nBasically, this line is ripping the rug out from under yepnope. Once the readystate is \"loading\", the handler is removed. That means, we will never be notified when the readystate is \"loaded\".\n. One other thing, I had to remove the two blocks of code that checked for isOldIE. This seemed to resolve my issues with both IE9 and IE10.\n. I wasn't able to figure out exactly what was going on with the isOldIE flag. Just that when that code was in there I would get a timeout. When I removed it, I got notified of successful load. The comment next to the isOldIE stuff seems to be from 2010, so I don't think IE9 and IE10 existed then.\n. ",
    "marianmeres": "Ben, I think I see your point, will try the patch soon. Thank you.\n\nWith the isOldIE flag, what were the other issues?\n. Ben, I think I see your point, will try the patch soon. Thank you.\n\nWith the isOldIE flag, what were the other issues?\n. ",
    "PeterDaveHello": "Okay, because [new-bsd-license](https://github.com/SlexAxton/yepnope.js#new-bsd-license) usually means BSD-2/3-Clause I think.\n. hmmm ... what about make \"new-bsd-license\" just \"MIT\" in readme?\n. Okay, sorry for the misunderstanding, would you consider to say \"BSD-3-Clause\" in readme?\n. Is this okay?\n. Okay\n. Updated. in #232 \n. Okay, because [new-bsd-license](https://github.com/SlexAxton/yepnope.js#new-bsd-license) usually means BSD-2/3-Clause I think.\n. hmmm ... what about make \"new-bsd-license\" just \"MIT\" in readme?\n. Okay, sorry for the misunderstanding, would you consider to say \"BSD-3-Clause\" in readme?\n. Is this okay?\n. Okay\n. Updated. in #232 \n. ",
    "Tokimon": "Yeah that is kinda strange actually?. Yeah that is kinda strange actually?. ",
    "Chubtone": "Read your README notes on deprecation, and it sounds like expected behavior with latest version.\nIf so, please disregard my message!\n. Read your README notes on deprecation, and it sounds like expected behavior with latest version.\nIf so, please disregard my message!\n. "
}