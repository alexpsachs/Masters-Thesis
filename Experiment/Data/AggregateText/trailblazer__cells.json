{
    "cowboyd": "It seems to me that the variables in the controller should not be visible at all inside the cells. Isn't that better encapsulation? I.e. if it isn't passed as an option to the cell, then it isn't visible. I've actually been burned by this in the past where I had cells silently depending on variables set in the controller.\n. It seems to me that the variables in the controller should not be visible at all inside the cells. Isn't that better encapsulation? I.e. if it isn't passed as an option to the cell, then it isn't visible. I've actually been burned by this in the past where I had cells silently depending on variables set in the controller.\n. ",
    "apotonick": "this is NOT the intended behaviour, but a serious bug! the cell view should never know anything about controller variables. guess the problem is inside ActionView::Base where controller variables are prefered in place of the passed local vars. damn- gotta fix that.\nthanks for spotting\n. fixed in https://github.com/apotonick/cells/commit/bf49226dac55fc0c908bcd956934ef455d8ca205\nplease report if that works for you!\n. thank you, kinokuni.\n\none thing we have to take into account is that controller ivars with no same-named cell ivar will still be accessible in the cell view, since an unspecified set of controller ivars have to be around in the view, for helpers, so we have to copy them. sucks, but i don't see any way around that if we want to stay forward-compatible.\n. hi giates,\nthanks for your interesting report. the only problem i can think of is that cells does NOT cache view paths in production mode, while it does cache it in development mode (may-be?). this would slow down rendering as it has to lookup views at every render call. i will investigate on that.\nbtw- great test case, thanks again ;-)\n\nnick\n. hey giates, could you please check\nhttp://github.com/apotonick/cells/commit/f9f3eb24cd6152005840e07a3dc861e5d8e78964\n. oh-yes!\n. perfect!\n. ```\ngem install cells\n```\n\nand you're da maaan.\n. hey grimen,\nit's important to understand that controller != cell. if you define a helper_method in a controller, it is only available in the controller's views, not in the cell views- otherwise we would break proper encapsulation.\n\nwhen using #helper_method in a cell this method must also exist there. note that you could also use #helper to include files in a cell.\n. not sure what you mean with \"cells don't support controller helpers\"...? are you sure you tried #helper in a cell? that should work and is tested thoroughly. any helper that works in a controller should work in a cell view as well.\ndid you experience problems here?\n\ni speak against some magic helper inclusion where cells would \"inherit\" helpers from controllers- cells should never know anything about there parent controller to assure clean encapsulation.\nimagine such a cell being plugged into another controller B but relying on a mysterious helper method from controller A. this would cause a name error  which would be hard to trace, apart from evil dependencies. what do you think, grimen?\n. hi grimen!\nthanks for the link.\ngo and try the following:\n\nclass MyCell < Cell::Base\n  helper WhatEver\n  helper_method :method_from_whatever\n\nthat should really work (has been doing the job for 4 years now ;-)\ndoes that help?\ncheers! nick\n. grimen! thanks for your post, i start to grasp what you mean :-)\nthe problem is that those plugins are for controllers only- no cells in mind! the simplest solution i see would be (in your example)\n\n```\ncell MyCell < Cell::Base\n  include Devise::Controllers::Helpers\n```\n\ni really don't see any way to automatically distinguish what in a controller is a helper and what not, so we cannot provide a generic mechanism for that in cells. you would have to go by foot here. and plugin developers would have to mix in their code in ActionController::Base and in Cell::Base :-(\n. maybe there IS a way to handle that! we could extract all helper methods from the controller's MasterHelperModule and mix those methods in the cell's view.\n\nhowever, i wouldn't do that by default- rather you would have to turn on that evil thing explicitly, like\n    render_cell :grimen_cell, :shout, :mixin_controller_helpers => true\n. we have severe problems with getting the #capture related methods to work, as this part of rails' ActionView is nasty and we're already thinking about some clean replacement (view the discussion here http://rubyforge.org/pipermail/cells-talk/2009-December/000190.html ).\n\nif you like to investigate on that i can push the respective branch to github. however, what we need is a better replacement.\n\ncheers,\nnick\n. see http://github.com/apotonick/cells/commit/ed892c156d2002e4939136d1241c9661d5cc881b\n. hey jason- is it possible that this is an Autoloader issue? all we do is adding\n    ActiveSupport::Dependencies.load_paths << RAILS_ROOT+\"/app/cells\"\nin cells/init.rb - which usually works?!?!\n\nnick\n. yo subimage, are you running rails in threaded mode?\n\nif you're doing, i guess there's some load_paths magic going on in rails which simply forgets the non-standard app/cells dir.\n. `#global_content_for` does _exactly_ what `#content_for` does: it provides global attributes in the controller view.\nhowever, the name reflects that the captured content is _not_ available in subsequent cell views, only in \"global\" controller views.\n\nyou think we should rename it? or provide an alias_method?\n\nnote: it would be great to have one markup system here on github as i tend to confuse textile and markdown. period.\n. we're on it! see http://github.com/mlomnicki/cells3/tree/integration\n. http://github.com/apotonick/cells is Rails 3, yeah!\n. that's a pure rails testing issue. guess you have to \n\n```\ninclude ActionController::UrlWriter\n```\n\nin your TestController.\n. no, no, like \n    def setup\n      super\n      @controller.instance_eval do\n        include ActionController::UrlWriter\n. Ok, I will add some note.\n. Cool, thanks for those hints! I wanna keep the relative path for future compat (e.g. when cells will run in Sinatra). However, the cells view paths initializer should run _before_ your stuff is run _and_ we still need to note that in the README.\n. @semaperepelitsa Hey dude, can you verify that the cells railtie is run _after_ yours? If yes, this must be fixed.\n. Yo Cyrille,\nI confirm that behaviour, added a test.\n\nCheers,\nNick\n. Could you checkout http://github.com/apotonick/cells/commit/9e5098ef85e90b3a06e7f1affbf420a39e78359f ? That should work now.\n\nMerci,\nNick\n. fixed!\n. Calling `image_tag` doesn't work?\n. Hey, did #content_for really work in beta4???\n\nA couple of things broke in RC which we have to fix. I will investigate on your bug and report back here, ok?\n\nNick\n. Be precise! What's goin' on? You're into trouble? Can I help???\n. closing.\n. Uhm.. from which version you updated?\n\nNick\n. - Is it just that one view? Do other cells work?\n- You're doing some view inheritance stuff in your cell?\n- Can you paste the render call which should return design/top?\n. This sounds very strange, as we didn't change anything in view finding from 3.3.1 to 3.3.4.\n- Can you try to set up a minimal cell and see if it works?\n- Did you play around with Cell::Base.view_paths ?\n- Any other upgrades (gems, rails, plugins, ...)\n. Did you try it, looks good :-)\n\nThat's something we should get running soon. Anyway, if you need a quick workaround, just use the controller as cell server, like\n\n```\nclass CellController < ...\n  def serve\n    render :text => render_cell(...)\n```\n. I more and more love this idea! You could attach a cell to a route in order to provide RESTful HTML views of resources, for instance. Will check that out!\n. Wait- wouldn't this strengthen the coupling between Cell and route? The cell being a complete Rack-compatible controller sitting directly on a route?\n. The emerging problem will be: Cells don't know about Rack so far, so we will need a module to make 'em speak HTTP.\n. The recent commits in master removed the controller dependency. You can now create standalone cells like\n\n```\nclass StandaloneCell < Cell::Base\nend\n\nStandaloneCell.new.render_state(:drink)\n```\n\nThe next step would be to make cells mountable on routes - could anyone provide a minimal example app to show me what's missing?\n. Ok, guys, this WORKS now in 3.8.0!!! Just be sure to derive your cell from `Cell::Base` if you don't want the AC dependency.\n\nTo mount it:\n\n```\nmatch \"/posts\" => proc { |env|\n  [ 200, {}, [ Cell::Base.render_cell_for(:post, :show) ]]\n}\n```\n\nLemme know how it works and what can be improved.\n. http://nicksda.apotomo.de/2011/12/mounting-a-cell-to-a-route-with-cells-3-8/\n. Thanks - does that look better: http://github.com/apotonick/cells/commit/b8f36cec9110caf6ae926be8490a0ad177e92e25\n\nHow did you notice that bug?\n\nNick\n. Fixed now? Thanks!\n. Mayoral, thanks. As we discussed recently, I'd prefer not touching the 2.3 line anymore :-D\n. Hey Icowell,\n\nwhat are you trying to do? Automatically test cells? Great! What doesn't work right now?\n\nDid you already discover `Cell::TestCase`?\n\nCheers\n. Can you point me to the canonical repo of autotest? I can't find it! (Sorry!!!).\nThat sounds like a good idea and I marked it as \"feature\", so let's work on that!\n. Thanks dude, I was browsing that today at work when I was exploring Autotest. It looks kinda outdated, are you sure it's the \"official\"?\n. Luke-\nthe .autotest needs the following content to work:\n\n<code>\nAutotest.add_hook :initialize do |at|\n  at.add_mapping %r%^app/cells/(.*).rb$% do |_, m|\n    \"test/cells/#{m[1]}_test.rb\"\n  end\nend\n</code>\n\nHowever, we need to fix a bit in autotest-rails: seattlerb/autotest-rails#2\n\nLook what a nice person I am! I even started bugging the autotest guys for you ;-)\n. Where exactly do you put that config? Do you think it would make sense to add that to Cells itself? Or maybe to a separate gem? Or put instructions on its own wiki page?\n\nThanks for figuring out all that shit!!! :-)\n. Sounds odd, but I can't help. I fired up the rails-2.3 branch test suite and got\n\n`102 tests, 172 assertions, 0 failures, 0 errors, 0 skips`\n\n:-D\n. I currently see no solution for that in Cells. The explicit `#render` does not track if it already rendered - and I think that's a good thing. I really don't like the hidden semantics of the before_filter in Rails. Can I help you otherwise?\n\nWhat are you trying to do in your (real) before_filter? And, where are our comments?\n. Ok, that looks cool!\n\nCells are not all-mighty controllers as the ActionController, they are derived from AbstractController and have limited abilities. This is good.\n\nBTW- did you already consider using view inheritance instead of if's? I <em>could</em> blog about that.........\n. I have to play around with authorization plugins, maybe we can do something easy and generic with what you call pre-authorization!\n\nCould you post some more details about that restful problem, maybe in a separate issue?\n. I got it working by calling \n\n<pre>helper_method :current_user</pre>\n\nand that's what Jos\u00e9 recommended, too!\n. Przemek- thanks for that feedback. Several things you can do here.\n1. You may use GET in your forms, too.\n2. Cells shouldn't redirect, they are view components, nothing more. I'd move the routing behaviour to the controller, which could ask the cell to redirect or not. Just an idea.\n3. Another ugly, nasty approach would be to break encapsulation and instruct the parent_controller in the cell to redirect - wouldn't do that.\n4. When cells get interactive I usually switch to Apotomo widgets, so I don't have to care about all that. I just hit submit which triggers an apotomo event, catch that in my form widget and process it. This is a more RIA-like approach.\n\nLet me know if I can help you anywhere.\n\nCheers,\nNick\n. Sorry dude, in Rails 3.0 it's simply impossible to support capturing :-( Maybe we get a hook in 3.1 - what are you trying to do?\n. In Rails 3.1 will be some asset compiler which we will use in cells, too. I think this will remove the need for content capturing in cells.\n\nLove the dynamic50 web site, btw... :-)\n. This is indeed an interesting solution. I basically like it! I like the fact that you extract JS generation to a separate state, this makes things cleaner and separates view and JS. Not a big fan of the capture helpers in Rails, but in your case, this really is done in a reasonable manner ;-)\n\nWe should think about a generic solution for that - maybe we won't need capture support _within_ cells (it breaks encapsulation anyway).\n. On Tue, Aug 9, 2011 at 10:57 PM, nickhoffman\nreply@reply.github.com\nwrote:\n\n> I just discovered why my work-around is insufficient: it doesn't work when called from a cell view. Fark.\n> \n> @apotonick What will it take to get support for `content_for` in Cells?\n> \n> The problem is that content_for is accessing the global ActionView\n> instance, the one rendered by the controller. In Rails 3.x, you cannot\n> grab that instance very easily and you have to apply violence to\n> inject the captured content from the cells into that instance. The\n> entire architecture - currently - is designed for one global,\n> monolithic view instance and we'd have to fix that, first.\n\nCheck Tyler's fork, he was working on that, too:\nhttps://github.com/TylerRick/cells-capture\n\nOne reason we didn't work on this is that capturing is violating the\nencapsulation that cells gives us, since we're injecting content from\na component into some global instance. Nevertheless, people find this\nuseful so we should work on it ;-)\n\nNick\n\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/25#issuecomment-1767339\n. Nick, thanks. Cells were made to encapsulate visiblbly connected blocks in the page. That's all they were supposed to do, you simply call `#render_cell` and they return their markup. Now, injecting arbitrary content into some other \"block\" outside of the cell's scope violates encapsulation, since the cell has knowledge about the outer world (well, not really, but you get what I mean ;-) This is a new requirement which we have to meet.\n\nAnother idea could be that the cell has a second method to return JS, like the idea you had:\n\n``` ruby\nrender_cell(..) do |cell|\n  global_js_container << cell.javascript\n```\n\nI guess providing a `content_for` is less clumsy, although it breaks encapsulation.\n. Already decided to provide that in the next versions of cells - donations welcome.\n. https://github.com/apotonick/cells-capture\n. Aaron, the problem here is the helper accesses `@request` directly instead of `@controller.request`. If you set this instance variable, it will be around in your cell view.\n\nIn your state, simply do\n\n<pre>\n  @request = parent_controller.request\n</pre>\n. Problem here was Rails' 2.3 and bundler gem handling which doesn't detect generators correctly, right?\n. Yepp! You had Cells included via bundler, which in Rails 2.3.x doesn't pull in generators correctly. Try it the old way in `environment.rb` and pleeeease report!!\n. Hey, I remember you! You are \"RE-trying\" cells? Does that mean you didn't like it in the first place?????????????????\n\nYou can access flash using `parent_controller.flash`. However, the flash object is intentionally hidden from cells as they usually should _not_ access global variables like the flash message :-/ \n\nPlease report if that works for you!\n\nNick\n. Yeah, the problem is people expect Cells to be like ActionController, which is an all-mighty monster. Nevertheless, Cells are \"only\" view components, and hence they aren't supposed to do everything.\n\nYou could also try \n\n<pre>\nhelper_method :parent_controller\n</pre>\n\n\nto access parent_controller in your view. The same applies for your fix, just wrap it in a `def flash` and declare it as helper method.\n\nGood to hear you're still not too encouraged ;-)\n. Fantastic example for using cells, draper and flash messages, @mateusz-sojka - we should start screencasting about Cells!\n. Discussed here https://github.com/apotonick/cells/pull/136\n. Andy- the wiki seems to be outdated. You can use the same API as in an ActionController, \u00e0 la `Cell::Base.prepend_view_path`.\n. This is something which we started discussing on the list a couple of weeks ago. Great to see your contribution!!! :-)\n\nSo, basically you merge @opts and params? Could you post that \"proposal\" to the list, so we can officially \"decide\" the API change?\n. Thanks for the valueable discussion, Andy! The changes we talked about were applied here: https://github.com/apotonick/cells/commit/7ba9f66bef3df433b2629135df32434570af3427\n. Hi salmont,\n\nwe're currently discussing that on the list: http://groups.google.com/group/cells-and-apotomo/browse_thread/thread/6bc00543828c4de1\n\nIn that case it seems that Passenger is overriding the #link_to behaviour for ActionController, only, and so the Passenger-patch doesn't apply to Cells/Apotomo. Are you using Passenger?\n\nBeside that, when I use `RAILS_RELATIVE_URL_ROOT` only the asset links get prepended the new root - both link_to in cells and in ordinary controller views still point to the old root.\n\nNick\n. This should be fixed in 3.6.3 with this commit: https://github.com/apotonick/cells/commit/2f999f7d9efd845e805ed42c67ee98860f5bdb91\n. Dude, just one word: **AWESOME!**\n\nI'm so happy somebody fixes this. Great work, will merge it till the weekend. Any chance to have some deprecation warning if using `rails g cells:cell` ? It really sucked, I simply didn't know how to do it better :-)\n. Yo Pete! In the 3.5.0.beta1+ you can have haml views using the standard generator flag `-e haml`, check the USAGE banner :-)\n. Where's your fork where I can pull in that fix? ;-)\n. Matt, thanks. Can you check if the current rails-2.3 branch works for you?\n. Matt's fix is included in 3.3.6, thx.\n. Luis, what \"new active_helper dependency\"???\n. Can you checkout the new gemspec version: http://rubygems.org/gems/cells/versions/3.3.7\n. That seems to be a problem at rubygems' dependency algorithm, the `cells.gemspec` file is fine and runs :-) Can you verify?\n. I removed jeweler in favor of a standard gemspec, look here: https://github.com/apotonick/cells/blob/1e4ec12f4f80d34f0cbf71feadb8738935b28aa2/cells.gemspec\n\nMaybe the `rake build` command ran jeweler?\n. 3.3.8 works!\n. Hi Brett,\nthe url_helpers are included automatically in Cells. Are you overwriting #user_path or so?\n. https://github.com/apotonick/cells/wiki/Devise-in-Cells\n\n;-)\n. Strange.... Gemfile?\n. That's why I insist on your Gemfile :-)\n\nIt should contain\n`gem 'rspec-cells'`\n. Yo Mike! Uhm... what do you mean, actually?\n\nWe require `abstract_controller` and `railtie`, that's all. Do you have any conflicts?\n. Ok, I got it, you meant in the `gemspec`, right? This is fixed here: https://github.com/apotonick/cells/commit/9d8993423ce2c8ab81e5669c7d51747af35c6bca\n\nGood to see you back!\n. Yo Michael,\n\ncheck that post: http://nicksda.apotomo.de/2011/02/cells-3-5-release-party-summary/\n\n`@opts` simply got `#options`. Enjoy.\n. Which cells version?\n. Nevertheless, in Cells 3.5 you should use `#options` - what version are you using?\n. You're trying to use #options in your _view_ which doesn't work. Declare it a helper_method.\n. I'm always a bit careful about mixin in ActionController\\* things into Cells. They mess around heavily with `request` in this module which is a strong dependency, scares me a bit to bring that into the clean cell. What do you think? Am I too rigorous?\n. Yeah, AC::UrlFor redefines #url_options and accesses `request`, which is kinda breaking the encapsulation Cells advocates. Don't get me wrong, I like your solution as it simply includes one single module. However, this module internally does things that scare me.\n\nIn Cells we really try hard to encapsulate things whereas the ActionController simply includes everything. This is nice for the end user but also adds evil dependencies to your classes.\n\nOne decision in Cells is _not_ being dependent on request/response per default. This change would tighten the coupling between HTTP and Cells. Maybe we should include your solution in the Troubleshooting wiki page?\n\nMy thought behind all this is: Cells are view components, and they really shouldn't know about hosts and HTTP. So, if you really want your cell to \"break\" this, you might include the module yourself, saying \"I really want my cell to access HTTP stuff\". Can you get my points?\n. @chikamichi: It already does the proxying, look here: https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L38 personally, I hate this part of Cells :-D\n\nThe simplest solution would be to let users include that module by hand and thus make it their decision to \"break\" encapsulation, or not. What I like about wingrunr21's solution is that it really just takes one `include` to make it work.\n. Passing `*_url` helpers into the cell if you need to generate urls dynamically is poor, indeed. I agree here.\n\nIf I knew my cell is going to work with subdomains a lot, I'd include the module you already proposed. This is ok since I decide to \"break\" encapsulation, and this is absolutely appropriate here.\n\nBTW, the problem I have is not the inclusion of the `AC::UrlFor` module as it, the problem is that its `#url_options` accesses `request`, which is definitely \"too much\" for a light-weight view component. And if we decide to include that module per default we would tighten the coupling between cells and HTTP even more.\n. Absolutely! You're the first who comes with a really beautiful solution, though ;-) I will make a nicer Troubleshooting wiki page right away.\n. It's `render :nothing => true` so far - what's the \"official\" syntax?\n. Hi Brett,\n\nonly including a module doesn't make it available in the view. I hate\nhelpers and I'm gonna vent my anger in a blog post soon ;-)\n\nTry that:\n\nClass MenuCell < Cell::Rails\n  # ...\n  helper UrlHelper\n\nand lemme know if that helps.\n\nNick\n\nOn Mon, Apr 11, 2011 at 4:32 PM, brett-richardson <\nreply@reply.github.com>wrote:\n\n> Hey, I've been trying to get Cells to render a menu that links to a list of\n> sub-domains.\n> \n> I have gone through @wingrunr21's recent pull request for adding the UrlFor\n> module, but I'm unsure how one should go about getting this working.\n> \n> My cell looks like this:\n> \n> ```\n>    class MenuCell < Cell::Rails\n> \n>            include ActionController::UrlFor\n>            include UrlHelper\n> \n> \n>            def primary\n>                    render\n>            end\n>     end\n> ```\n> \n> But I have also tried this method too:\n> \n> ```\n>    module UrlHelper\n> \n>            def with_subdomain( subdomain )\n>                    subdomain = ( subdomain || '' )\n>                    subdomain += '.' unless subdomain.empty?\n>                    [subdomain, request.domain,\n> ```\n> \n> request.port_string].join\n>                end\n> \n> ```\n>            def url_for( options = nil )\n>                    if options.kind_of?( Hash ) && options.has_key?(\n> ```\n> \n> :subdomain )\n>                                options[:host] = with_subdomain(\n> options.delete( :subdomain ) )\n>                        end\n> \n> ```\n>                    super\n>            end\n> \n>    end\n> \n> \n>    module Cell\n>            class Rails < AbstractController::Base\n>                    include ActionController::UrlFor\n>                    include UrlHelper\n>            end\n>    end\n> ```\n> \n> Ideally I think Cells should be able to handle a link_to call like this:\n> \n> ```\n>    %li= link_to mod.name, root_url { :subdomain => mod.subdomain }\n> ```\n> \n> Do you know what needs to be done here?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/48\n. Rails 3.0?\n\nDo you call #link_to in a cell view or in the cell controller?\n\nOn Mon, May 9, 2011 at 11:01 PM, digiprop\nreply@reply.github.com\nwrote:\n\n> I seem to be having a rather strange issue with nested resources. \u00a0If i link to a child resource (example: \u00a0link_to \"New Store\", :controller => \"stores\", :action => \"new\") from a cell being rendered by said child resource, i get an error saying the route can't be found. \u00a0If i take that same link_to and cut/paste it directly into the page, it works fine. \u00a0(paths work the same way.)\n> \n> if i do a rake routes i can confirm the route is there.\n> \n> Is there a workaround for this?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/49\n. That's what I figured, it reminded me of https://github.com/apotonick/cells/pull/45\n\nThanks for posting it.\n. On Wed, Jun 8, 2011 at 3:05 PM, silviorelli\nreply@reply.github.com\nwrote:\n\n> Inside application controller I have some methods that I use site-wide, some of them exported as helpers with helper_method.\n> Those helpers are not available inside cells.\n> \n> And that's how it should be! Cells ain't no ActionController - by\n> intention. Use Cell::Base.helper if you need custom helpers in a cell.\n\nclass MyCell < ...\n  helper Custom\n\nCheers,\n\nNick\n\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/50\n. Hey cameel,\n\nthe reason we chose :set_routes_preloader was to make sure routes are available for cells. Not sure if that will work if we change that to :after_initialize. Did you try it already? Would be great ;-)\n. So how does cells' \"asset breaking\" look like right now? Is there an exception or something like that?\n. Hey Mark,\n\nyou're right, thanks! Not sure why I introduced the options stuff a while ago. Anyway, your fix is applied: https://github.com/apotonick/cells/commit/3455518b0e066025192b54f40c184611f66a0fa0 Thanks man!!!\n. We already discussed that issue here https://github.com/apotonick/cells/pull/45 :-) and decided to _not_ include anything from `ActionController` per default since the `ActionController` mixes too many things in one class and would make Cells HTTP-dependent. What do you think?\n. Silly me! Thanks Mathieu, this is fixed in 3.6.2.\n. I hated that `require-if env==test` line ever since, will merge it and update the README.\n. Bug confirmed.\n. This should be fixed with https://github.com/apotonick/cells/commit/8ad53ae918076481b6f1e17a566c10142aa4486a\n\nThanks.\n. So the Rails30 strategy has to be fixed, but 31 can stay as-it? Maybe I should ask Jos\u00e9 what has changed here?\n. Hi Brendon, this was fixed in https://github.com/apotonick/cells/commit/ab1541b1c2c53c94eb45c24c30297b5202c3cd17 - go and give 3.3.6 a try!\n. In 3.6.3 we tried to solve a helper issue with Cells, maybe that broke stuff. I will investigate on that later today! Thanks so far for your reports.\n\n@electic: Are you sure you got this exception with 3.6.2?\n\n@igray: Are you sure this came with Rails 3.1?\n\nAnyway, try using 3.6.2 - this should work for both 3.x\n. @electic: I can't reproduce this error in a Rails 3.0.5-8 environment and with Cells 3.6.3. Can you help me here?\n. Thanks dudes, this is fixed in 3.6.4: https://github.com/apotonick/cells/commit/96c2c6c26bc2335177a960cfd22814ae8185e728\n\nYou've helped a ton with your reports and fixes, Thanks again :-)\n. Thank you so much! This helped a lot! 3.6.4 fixes this: https://github.com/apotonick/cells/commit/96c2c6c26bc2335177a960cfd22814ae8185e728\n. This looks pretty obvious, as you say, the respective Cells sweeper module isn't included anywhere... Should we do that per default?\n. We don't sweep in Cells 4 anymore, soooorry.\n. We once had this in earlier versions but removed it as nobody seemed to take advantage of this feature. I'd be happy to see a patch, however, maybe we should introduce some `cell/debugging.rb` module responsible for mixing in development-specific behaviour into cells (e.g. caching logging, template finding output, etc). If you send a patch for logging I can take care of the rest. Thanks!\n. Yeah, notifications seem to be a good choice, although I'd like to push stuff like this in a Cell::Debugging module. Cash tests are here: https://github.com/apotonick/cells/blob/master/test/rails/caching_test.rb\n. Cool, only 3 years later this got implemented. Thanks @fractious I basically copied your code to `Caching::Notifications`.\n. @schorsch Yo! Good to see you here!\n\n@timoschilling Hilft!\n. Great commit, you're part of Cells now! https://github.com/apotonick/cells/commit/30aff3772ccde884468778f0975cbed2f08f5883\n\nOriginally, the cache versioner was meant to handle that kind of conditional decider, but the `:if` option makes it much more clear, thanks, Arthur!\n. Try running the tests with Ruby 1.9, this should work better when\ntesting. I will take a look at your gist on Sunday when I'm back\nsober, thanks bro!\n\nOn 8/12/11, fractious\nreply@reply.github.com\nwrote:\n\n> I'm just getting into cells and am really liking them but I'm having some\n> issues with tests:\n> \n> I have a PageCell with a `:footer` state which takes a single `args`\n> parameter. On a call to `invoke(:footer, :foo => 'bar')` [my\n> code](https://gist.github.com/1142130) is throwing an unexpected\n> `ArgumentError: wrong number of arguments (0 for 1)` exception.\n> \n> I've just cloned the repo to try and get to the bottom of it, but running\n> the gem's tests is resulting in a [load of failing\n> tests](https://gist.github.com/1142138) too, mostly `NameError: uncaught\n> throw 'invalid_test'`.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/67\n. Fixed in 3.6.5, thanks you two!\n. We removed the explicit require in the cells railtie, see here: https://github.com/apotonick/cells/pull/57\n. Added a note here: https://github.com/apotonick/cells/commit/29303281eb6682b05004986ff94f128362a1f360\n\nThanks, Kamil, you're a great help!!!\n. Hi Kamil,\n\nthe behaviour you're experiencing is the intended. `#render_cell` is designed to accept arbitrary data, like a hash, an array, or whatever, and `#options` shouldn't be used in favor of _state-args_. Check out this post to learn about passing options as explicit arguments to the state: http://nicksda.apotomo.de/2011/02/cells-3-5-release-party-summary/\n\n Does that help? So, rule of thumb is: Don't use options but state-args!\n. Can you paste your cell code? I'd love to see what you're trying to do, then I maybe can come up with a more detailed blog post on this?\n. Thanks, Kamil. Your fixes are here: https://github.com/apotonick/cells/commit/d1a8402bd50c98dbd24c8baa09c2feaa0369868a\n. I'm a bit scared to merge that. Maybe we could do that in ENV=test, only? Or just tell people to manually require the file. I prefer the latter, definitely ;-)\n. Hi Stefan,\n\ncould you write a test case for that? It would probably go to https://github.com/apotonick/cells/blob/master/test/helper_test.rb\n. The `cycle` helper is not supported as it relies on global state. In Cells 4.1, this can be easily solved by injecting the index. See http://trailblazer.to/gems/cells/api.html#collection\n. Trying to use device? Maybe this helps? https://github.com/apotonick/cells/wiki/Devise-in-Cells\n\nYou can use any helper in Cells by using `helper WhateverHelperModule`\n\nDoes that help?\n. Now I got it. You may not access controller methods in Cells (encapsulation, blabla). If you need methods from the controller in your cell, extract those methods to a module and include it both in the controller _and_ the cell. Then define them as helper_methods in both.\n. Thanks, Kevin! It would be interesting to see if this bug also comes up in the 3.0 version of Cells, which implements view inheritance itself. Since you're busy writing your app, I will do the test case. Thanks for the coffee you just bought.\n. This does not happen in Cells 4. :tongue: :stuck_out_tongue_winking_eye: \n. Use ::Rails.root :-)\n. We're still planning to port Cells to Sinatra and in a strange state of mind I once named it Cell::Rails - does that suck? Change it?\n. The more I think about the `Cell::Rails` class the more I hate it. Maybe we should deprecate it and go back to `Cell::Base`. Any comments, guys?\n. That all sounds conclusive but I'll definitely spend more time tomorrow on it when I'm sober\n. This now works in view models using `#cell` and in concept cells with `#concept`.\n. Thanks, fixed in 3.3.9, also I backported TestCase#view_assigns to this version.\n. http://nicksda.apotomo.de/2011/10/cells-3-7-released-taataa/\n\nYou now need to expect args in your state method, or use the\nDeprecations module.\n\nOn Thu, Oct 13, 2011 at 11:04 PM, Marc MacLeod\nreply@reply.github.com\nwrote:\n\n> Just a simple:\n> \n> <%= render_cell :list, :sidebar_list, :user => @user %>\n> \n> is now causing the error in the title. Any more info please ask.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/85\n. Check out the blog post:\nhttp://nicksda.apotomo.de/2011/10/cells-3-7-released-taataa/\n\nYou now need the Deprecations module if you want #options.\n\nOn Thu, Oct 13, 2011 at 11:04 PM, rpmessner\nreply@reply.github.com\nwrote:\n\n> I have code similar to this:\n> \n> class Post < Rails::Cell\n> \n> \u00a0before_filter do\n> \u00a0 \u00a0@admin = options.admin\n> \u00a0 end\n> \n> \u00a0def content(options)\n> \u00a0 render\n> \u00a0end\n> end\n> \n> This works great in 3.6.7, in 3.7 the options hash is not bound for the before_filter\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/86\n. This is a pure Ruby problem, sorry for the inconvenience, though ;)\n. I guess that's cause state-args don't work in Rails 2.3 / Cells 3.3. Sorry for that! We could backport that feature into the 3.3 line, however, this might be some work. Interested?\n. Great! Sorry my comment on issue#88 was brainwashed, of course your change works. Released 3.3.10: https://github.com/apotonick/cells/commit/0f8aacfcbb4a80edc69e136f69bb236dfcc88d69 Thanks!\n. Fixed in 3.7.1.\n. Hi Mohammad, I merged it into the 3-7 branch to make it quickly available in 3.7.1. Thanks!\n. I see this code in a `cells-rescue` gem. Not that I don't like your code, I love it! However, unlike Rails, we decided to keep the Cells core totally simple. Are you interested in setting up a separate gem? I can help, of course :-)\n. The #cells channel on irc.freenode.org is usually used for 1st level support ;-)\n. Hey @yagooar, what about this `cells-rescue` gem? I think it would be great!\n. I still think `cells-rescue` would be cool. You could use the hooks gem to provide hooks that developers can plug in and run their code.\n. Complain at the Rails core that they make too much magic around the inheritance code.\n\nNo, seriously, that sounds familiar. Lemme dig into that.\n. The method `display` is a reserved method in Ruby and we do some stuff to get rid of that - that might fuck up the inheritance. I vote for renaming the `display` method to `show` and deprecate it.\n. ???\n. I'm not sure, someone else reported this earlier last year. Maybe we have to patch so that the state-args are passed as block variables to the before_filter block? Can you post an example of a filter and how you use it?\n. Absolutely, but this is a wrong design in Rails itself. I will patch it in Cells for now and then push it to the core. So, what you basically want is:\n\n```\nclass WidgetCell < Cell::Rails\n  before_filter :set_widget\n\n  def set_widget(options)\n    @widget = options[:widget]\n```\n. Rails partly supports a concept like state-args (called action-args) but it is not implemented consequently. E.g. the Callbacks module doesn't care about options passed to #process and so on, we have to fix that.\n. Ok, I looked into `ActiveSupport::Callbacks` which is the implementation of filters in controllers. IMO, it's way too complex and _wrong_ since you cannot pass options to callbacks (in our case, those are the state args) when invoking them. That's why I wrote [hooks](https://github.com/apotonick/hooks) years ago which implements the same as Callbacks but better. We have to write our own little filter layer using hooks in order to make state-args work in filters - I'm not willing to fix that in Rails itself as long as they're using the messy AS::Callbacks... sorry ;-)\n. Exactly, we simply pass the state-args to the filters. What are the most frequently used options for `before_filter` and friends? We have to implement those manually.\n. Please check out the new gem: https://github.com/apotonick/cells-filters\n. What exactly does this do? I don't understand Gemnasium :-)\n. Hi! Cells are not supposed to access HTTP data - if you still want to do that, there are 2 possibilites:\n\nUsing state-args (recommended):\n\n``` ruby\nrender_cell(:comments, :show, cookie)\n\ndef show(cookie)\n  #...\nend\n```\n\nOr using the controller (sucks) reference in your cell:\n\n``` ruby\ndef show\n  parent_controller.cookie\n```\n. You guys already using https://github.com/apotonick/rspec-cells ?\n. @svoop Add `gem 'rspec-cells'` to your `Gemfile`.\n. Cells != Rails\n\nWe like to separate concerns and the rspec-cells gem is referenced in cells' README.\n\nDoes it work now, can we close this issue?\n. Hooray, so you really just missed to include the gem? :-)\n. Cells still have the actionpack dependency - would that be of any problem?\n. I was reflecting about this the last days. My plan is making Cells independent from Rails, which would allow using them in any framework (Sinatra, Webmachine, ...). I will play around with this the next days.\n. This project shows how to use cells in sinatra, which can easily be transfered to webmachine. https://github.com/apotonick/sinatra-on-cells\n. Thx, your patches were really helpful, couldn't merge some of them, though. Anyway, you're part of it :-D\n. Good to know that, thank you Olek! You're supposed to hand in a pull request as soon as the next 3.2 is out!\n. Awesome. I already merged your changes, now, can you please provide a minimal test engine in https://github.com/apotonick/cells/tree/master/test/dummy @juniorz ?\n. You have to add the partials directory path with `Cell::Rails.append_view_path` - we don't support partials in Cells since it doesn't make any sense to have \"views\" _and_ \"partials\". Sorry! Does that help you?\n. Jupp, the engines API changed from 3.0 to 3.1 so we need another Strategy module there. Anyone?\n. Fixed in 3.8.2.\n. I'd give Apotomo a shot!\n\nOn Wed, Feb 8, 2012 at 9:33 PM, Jonathan Rochkind\nreply@reply.github.com\nwrote:\n\n> I'm having trouble figuring out how form submission in a cell works. Is there any documentation available?\n> \n> Somehow, form submission in a cell winds up being handled by a method in the right cell, right? How does this happen?\n> \n> Is there any way to use the mechanism to have hyperlinks (GET) that wind up being handled by a method in the cell too?\n> \n> Or am I completely misunderstanding what goes on?\n> \n> Thanks for any hints or pointers.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/104\n. A detailed stacktrace would help!!!\n. You're trying to render a subclass of `Cell::Rails` which requires an ActionController instance! Derive your `NewsletterCell` from `Cell::Base`, that should work. But be warned that not everything might work since a lot of Rails helpers are tied to the controller instance. You could also keep your `NewsletterCell` as a `Cell:Rails` subclass and pass a controller instance:\n\n``` ruby\nCell::Base.render_cell_for(:newsletter, :signup, controller_instance)\n```\n\nbut then it's up to you creating the controller. Does that help/make sense for you?\n. Hm, what exactly do you need in your cell, @mckenziec? Access to sessoin, and whatelse? And, do you really need it, or could you pass it as arguments into the cell? \n. You can use the `:format => :mobile` option in the render call in your cell state.\n. Should be fixed in 3.8.3 - please test!\n. Huh? Does that appear in a cached scenario, only? Why isn't the cached view escaped already, then?\n. But... the cached view should be escaped already. They (the Rails core) change this every other week. Did that work for you in Rails 3.0 and 3.1?\n. I close this because we don't do escaping anymore in Cells 4 - only for defined properties, which should make this issue obsolete.\n. Hi Mike, the initializer should still work, so you can reset the view paths there. Are you sure this gets executed? Can you try running the initializer on `Cell::Rails` not `Cell::Base` ?\n. Wheew :-) Can you paste your initializer? We need to add that to the README.\n. The `parent_controller` dependency was removed in `Cell::Base` and is only around in `Cell::Rails`, darling!\n. We also need that change in rspec-cells, @gertas are you ready?\n. Where do you define\n\n``` ruby\nclass BaseCell < Cell::Rails\n  helper :application, :users, :topics, :locations\n```\n\nAnd where are the UsersHelper, TopicsHelper, etc defined?\n. Man, cool! Now if you would add a note to the README I will merge in a minute :-)\n. So happy we finally address this issue. Here's the problem:\n\nIn order to make `Cell::Rails` feel like a real HTTPable ActionController we delegate some random methods to the parent_controller in the `Cell::Rails::Metal` module: https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L10\n\nThis makes it necessary to provide the Rails cell a controller instance. Now, maybe this is not necessary in the routeable-cell setup. Maybe we don't need a controller instance there but a request object, only, which is available at the time we call `render_cell_for` (in `env`).\n\nSo, would you guys be ok with deriving your cells from, let's say, `Cell::Rack` and I will do the rest? \n. `Cell::Rails` is pretty heavy-weighted since it carries around an ActionController instance. `Cell::Rack` just owns a request object so this could actually make cells work in other environments, like Sinatra, while still having a working devise API, etc. Exciting stuff!!!\n. @pboling Of course, `Cell::Rails` still has the `#parent_controller` dependency and looks and feels like an ActionController. What kind of magic in your cells are you refering to? Just curious... Why don't you checkout 3.8, maybe I can help.\n\n@mckenziec As long as Devise etc rely on the specified internal API (e.g. accessing #session) then the new `Cell::Rack` should work fine. Are you ready for testing?\n\nSpeaking of charity.. http://www.pledgie.com/campaigns/16068 ;-)\n. @mckenziec Go for it! https://github.com/apotonick/cells/commit/911436bb177e7c5f86fb74e876b93ea65c1e7ecc :-)\n\nLike\n\n``` ruby\nrender_cell(:comments, :show, env[how the fuck do i get the request from a rack env?]\n```\n. Looks good, are you still having trouble using `Cell::Rack`? Require the cells repo in your Gemfile! http://gembundler.com/gemfile.html\n\n``` ruby\ngem \"cells\", :git => \"git://github.com/apotonick/cells.git\"\n```\n. Try this:\n\n``` ruby\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ Cell::Base.render_cell_for(cell_name, :display, request) ]]\n}\n```\n. I'll fix it, have to think a bit more about it! Tonight ;)\n. Check commit https://github.com/apotonick/cells/commit/2f87fdfce4fe8259464cff75e9d6c7f96cf5ccaa\n\nYour code should go like this now:\n\n``` ruby\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ Cell::Rack.render_cell_for(cell_name, :display, request) ]]\n}\n```\n. What else information is in the env that we need in the cell? I want to keep cells decoupled from HTTP by all means..\n. You shouldn't use the `#cell` method at all in the test but go with the \"official\" `#render_cell`:\n\n``` ruby\nrender_cell(..) do |cell|\n  # here is your cell instance you're longing for!\n```\n. Using `#create_cell_for` is just fine for what you're trying to do! On the other hand, `#cell` does really the same and maybe we should just remove the deprecation warning. This notice was meant to inform people that the cell no longer accepts options at instantiation time but wants dynamic data as state-args in the `#render_cell` call.\n. https://github.com/apotonick/cells/commit/b72fdcc9f8be86ba4723e60f7737831a0c6c66c4\n. Thanks. Blog about it. Tweet about it. Or http://feedback.railscasts.com/forums/77-episode-suggestions/suggestions/363034-rails-cells :-) Have a great weekend!\n. Maybe the `html_safe` is a problem? See https://github.com/apotonick/cells/blob/master/lib/cell/rendering.rb#L91\n. Question here is do we still need the `html_safe` call or can we simply omit it in Rails 3.x? @bmaland @skyeagle Which Rails versions you guys using?\n. That seems odd since I didn't change any rendering code so far. I still released 3.8.4 explicitely for you, @skyeagle :-) Please check if it works for you.\n. Check 3.8.5, I gemified a dirty working tree in 3.8.4!\n. @skyeagle I still don't understand why this suddenly works. Whatever ;) Close this issue when appropriate.\n. Can you write a test that fails with JRuby? That would help!\n\nOn Fri, May 18, 2012 at 12:51 PM, Bj\u00f8rn Arild M\u00e6land\nreply@reply.github.com\nwrote:\n\n> For the record, this still doesn't work on JRuby. I'm using Rails 3.2 as well.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/121#issuecomment-5783579\n. When including your test (thanks!) I get\n\n`NoMethodError: undefined method`encoding' for \"\u00e6\u00f8\u00e5\":ActiveSupport::SafeBuffer`\n\nWhen I remove the `.html_safe` call I get\n\n`NoMethodError: undefined method`encoding' for \"\u00e6\u00f8\u00e5\":String`\n\nSo Jruby is definitely expecting something else from the cache?!?!?!\n. This is when you change your Ruby interpreter but still use old caches. Not cells-specific.\n. It is true, every engine is added to cells view paths. It should look at Cells' setting first, and then AC. Do we still need this fix? I reckon yes.\n. So, does that mean `main_app` in an ENGINE cell does refer to the wrong thing?\n. What you might try as a workaround is `parent_controller.main_app`. I'll see what I can do.\n. Guess if we delegate `main_app` to `parent_controller` it should be just fine. Did you try the above? Is `parent_controller` available in the view?\n. Please try the current master branch: https://github.com/apotonick/cells/commit/a559f7c972c7bd64b678a3adc1d264ff1e093c2b\n. They do weird stuff in Rails to set the `main_app` helper and I already hate it. So please as a work-around use `Rails.application.routes.url_helpers` as @steveh suggests. When there is time I'll try to discuss this with the core team.\n. Sorry I fixed it in 3.8.5, my bad.. ;)\n. Oh... I'm not sure if cells 3.3 (Rails 2.3) supports state-args at all... That answers your first question: So far I dropped 2.3 development since nobody asked for it and it is quite a bit of work. Are you tied to Rails 2.3?\n. Well I can take a look at how easy it is to backport stuff but for me personally it is a bit of waste of time to work on old code. Sorry dude ;)\n. That is a valid point! Should the found class be queried again for buliders, making the finding recursive... Hm. Shouldn't be required in most cases but definitely makes sense. Can you give an example how you're using that?\n. Why does Github say you posted this in 2012?\n. Cause there seems to be no request object in ActionMailer. Try to derive\nyour cell from Cell::Base then (which does not have this dependency) and be\nsure not to use URL helpers in the cell. Let me know if that doesn't work\nfor you.\n\nOn Mon, Aug 13, 2012 at 1:42 PM, Jan Dudulski notifications@github.comwrote:\n\n> when I'm trying to render_cell inside mailer view I'm getting an error\n> like:\n> \n> ActionView::Template::Error (undefined method `request' for #SomethingCell:0x007fa97e694a90)\n> \n> Rails 3.2.x, cells 3.8.x\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/132.\n. Then you need to \"find\" the request object, it must be hanging around in\nActionMailer somewhere. Sorry for that inconvenience, but this is due to\nRails' internal dependency architecture. I can take a look at it today.\n\nOn Mon, Aug 13, 2012 at 3:25 PM, Jan Dudulski notifications@github.comwrote:\n\n> Thanks, works! What can I do if I need url helpers also?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/132#issuecomment-7691576.\n. Can you add a brief paragraph to the cells README? Maybe below \"Mountable Cells\"?\n. Problem is: the more we allow users to access HTTP objects in a _view component_ the more they will get miseducated and consider it \"best practice\" to not having interfaces. Have you thought about the following?\n\n``` ruby\nrender_cell :comments, :show, cookies\n```\n\nAnd then:\n\n``` ruby\nclass CommentsCell < Cell::Rack\n  def show(cookies)\n```\n\nWould that work? Really, I already hate the fact that we have params and session in  cells but now, cookies.... well... send a pull request :-)\n. Guys, you don't have to rewrite helpers if you want to use cookies in cells. Just  add this to your cell.\n\n``` ruby\nhelper :cookies\n\ndef cookies\n  parent_controller.cookies\nend\n```\n. I am missing some discussion here! Maybe I should blog?\n. Do we still want that with Cells 4? \n. This won't be necessary with `ViewModel` anymore and in combination with `Options` (coming soon).\n. Maybe that is what you're interested in? http://nicksda.apotomo.de/2012/06/using-rails-gems-like-simple_form-in-sinatra-or-anywhere/\n. Hey Francesco, try the newer cells 3.8.6 I guess I forgot to release a new gem :-)\n. don't require 'cells' !!!\n\nOn Mon, Oct 8, 2012 at 11:14 AM, francesco agati\nnotifications@github.comwrote:\n\n> if i try to use cells and actionpack i get this error\n> \n> main.rb\n> \n> require 'action_pack'\n> require 'cells'\n> require 'cell/base'\n> \n> class MusicianCell < Cell::Base\n>   def show\n> \n>   end\n> end\n> \n> /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:6:in `<class:Rails>': uninitialized constant ActionController::RequestForgeryProtection (NameError)\n>     from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:4:in`module:Cell'\n>     from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:3:in `<top (required)>'\n>     from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cells.rb:75:in`require'\n>     from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cells.rb:75:in `<top (required)>'\n>     from main.rb:2:in`require'\n>     from main.rb:2:in `<main>'\n> \n>  \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/138#issuecomment-9220090.\n. Sorry! Can you please try with the current master branch?\n. So what are you exactly doing, I wanna know! Show some code!!! And, can we close this issue?\n. I wanna see the players view, too. And how do you use that cell? In a Ruby script? Sinatra? Our wiki is crying for you!\n. Dude that sounds _really_ interesting, please keep us posted, especially cells and celluloid seems like a great idea to me.\n. Note that if you wanna use a helper in your view you have to use `helper EventsHelper`, not `include`. It's stupid, I know, but that is Rails, not Cells ;-)\n\nAre you trying to use the helper methods in a cell _method_? This could help.\n\n``` ruby\nclass EventCell < Cell::Rails\n  def controller\n    parent_controller\n  end\n```\n. When you remove the state arg `:movies => @movies` does the problem still\noccur? There was a bug in Rails' ActionController#process. Maybe that is a\nregression bug in Rails, let me check.\n\nOn Tue, Oct 23, 2012 at 6:57 PM, scervera notifications@github.com wrote:\n\n> I have been getting a maddening error:\n> Wrong number of arguments (1 for 0) after updating from Rails 3.0.3 to\n> Rails 3.0.10 to Rails 3.2.8\n> \n> See this stackoverflow question:\n> http://stackoverflow.com/questions/13001289/wrong-number-of-arguments-1-for-0-after-updating-from-rails-3-0-3-to-rails-3-0\n> \n> I discovered that when I remove all of the render cells lines in my code\n> the problem goes away. I'm hoping for a fix, because I love cells!\n> \n> Here is the line of code:\n> <%= render_cell :video_feature, :display, :movies => @movies %>\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/140.\n. It's not a Rails problem, try renaming the `#display` method to `#show`.\n. Steve, if your cell still works with that `quote` variable than something is really fucked up. Cells are close to but still not so smart to figure out themselves what you need in your methods ;-) What would help would be an isolated minimum rails app that provokes this problem.\n. Rails version?\n. Sorry bro I just created a clean 3.2.8 app with cells + state args and it works, I can't reproduce this problem. Maybe it's your 1.9.1 ruby?\n. Now I'm the one to blame for not seeing your bug! Your `#show` method has to receive the argument, dude!\n\n``` ruby\ndef show(story)\n```\n. No problem bro I was just kidding :-D\n\nWondering how that could work without receiving an argument in the state. Guess you had a method around, then?\n. Yo @hipertracker,\n1. what \"Rails methods\" do you need? Helpers?\n2. are you in a Rails environment at all? If not, this might help: http://nicksda.apotomo.de/2012/06/using-rails-gems-like-simple_form-in-sinatra-or-anywhere/\n3. If you are digging AJAX and cells, have you checked out apotomo? http://apotomo.de\n4. we have some attempts on packaging together cells and their assets but I need more input and ideas about that: https://github.com/cowboyd/cells-assets\n5. If you wanna derive your cell from `Cell::Rails` you need an `ActionController` instance which is not already available in router context.\n\nLet me know how I can help out further!\n. @kikorb Your solution is for Cells 3.x. In Cells 4, this will be as simple as\n\n``` ruby\ncell(:post, request: request) \n```\n\nor something like that.\n. I will close this issue as in Cells 4, we don't have any controller dependency anymore.\n\nYou can simply do \n\n``` ruby\nSong::Cell.new(song).()\n```\n. If you just want to have different views for `show` simply derive an empty cell and drop the overriding view into `app/cells/linked_cell/show.haml`.\n\n``` ruby\nclass LinkedCell < AvatarCell\nend\n```\n\nWhen you have different setups in your code, extract the code to a separate method and override it in the subclass, just as you did in your second example.\n. You can always render another state (method+view) using \n\n``` ruby\nrender :state => :show\n```\n\nor render another view (eh, view only) with\n\n``` ruby\nrender :view => :show\n```\n. Ah, now I understand you. You want to extend the view with the \"super\" view. One first step would be introducing a new state.\n\n``` ruby\nclass LinkedCell < AvatarCell\n\ndef extended_show\n  render\nend\n```\n\nIn the view, you could do\n\n``` haml\n= link_to ..\n= render :state => :show\n```\n\nAnother trick would be by extending the view in your cell state.\n\n``` ruby\nclass LinkedCell < AvatarCell\n  def show\n    render_state(:link) + super\n  end\n\n  def link\n    render # add the link here\n  end\nend\n\n\n```\n\nIt would be cool if you could call the super view in your derived view, like you proposed.\n\n``` haml\n= do something\n\n= render :super\n```\n\nLet me think about that!\n. I played around with this a bit, I can see some new feature in cells similar to the one I proposed above. However, no urgent need to fix this right now, right? ;-)\n\nYou could do the following.\n\n``` haml\n\ndo something\n\nrender :file => \"super_cell/state\"\n```\n\nHowever, it would be cool if cells provides this for you so you don't have to know the super name. Does that work?\n. Also, I'd love to have a consistent API differing from Rails.\n\n``` ruby\nrender :view => \"state\" # render cell's view or inherit.\n\nrender :view => \"some_ascendent/state\" # render inherited view up from some_ascendent's inheritance chain.\n\nrender :view => super_view_for(state) # like above but you don't have to know the ascendent names.\n```\n. Try out the `:file` thing, it will work for you.\n\nWhat do you think of the proposed API with `:view`?\n\nYeeaaah, 2.0!!!! :+1: \n. render_cell \"admin/articles\", that is a Rails convention ;-)\n\nOn Fri, Nov 30, 2012 at 1:49 PM, Alexander Podkidyshev <\nnotifications@github.com> wrote:\n\n> Hi.\n> I can do this:\n> rails generate cell admin::articles index\n> , but this\n> = render_cell :admin_articles, :index\n> generates error\n> uninitialized constant AdminArticlesCell.\n> \n> Is it possible to get access to this cell?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/145.\n. Hi Luc,\n\nwhat exactly should happen when you click that link? Do you want to reload\nthe widget with the new state? Then you should take a look at Apotomo (\nhttp://apotomo.de). Tell me what you need (request-wise), maybe we can do\nthat simply with cells?\n\nCheers\n\nOn Tue, Dec 4, 2012 at 4:28 PM, Luc notifications@github.com wrote:\n\n> Hi,\n> \n> I'm following several tutorials on Cells components for Rails and did not\n> found how to add a link to another view from within a cell's view.\n> \n> I have the \"Test\" cell. Inside this one, 2 methods:\n> - show\n> - configure\n> \n> Within the show.html.erb I'd like to add a link to the configure view (and\n> vice-versa), what is the syntax to use ?\n> \n> I tried:\n> <%= link_to :configure, :action => :configure %>\n> \n> or\n> <%= link_to :configure, :cell => :test, :action => :configure %>\n> \n> but this does not target the cell controller.\n> \n> Any idea ?\n> Thanks,\n> Luc\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/146.\n. Well I usually point people to Apotomo as soon as I hear the word\n\"dashboard\". It is simply cells with interactivity (AJAX) that comes out of\nthe box. Check the first introducing screencast! If you have questions,\nmail me or on the mailing list:\nhttps://groups.google.com/forum/?fromgroups#!forum/cells-and-apotomo\n\nOn Wed, Dec 5, 2012 at 9:30 AM, Luc notifications@github.com wrote:\n\n> Hi Nick,\n> \n> Thanks a lot for the quick reply !!!\n> In fact, the whole thing I need to do is a platform that runs several\n> widgets.\n> My first though is to have several views for each widget:\n> - show (display info to the user)\n> - configuration\n>   This is pretty much similar to igoogle or netvibes for instance.\n>   For now on, I need to check if this is possible (and also if this is the\n>   good approach).\n>   I came across Apotomo yesterday and definitively find it really\n>   interesting, I still need to follow the tutos to see if this can fit my\n>   needs (I'm pretty much sure it will).\n> \n> Thanks for your help,\n> Cheers,\n> Luc\n> \n> On Wed, Dec 5, 2012 at 9:14 AM, Nick Sutterer notifications@github.comwrote:\n> \n> > Hi Luc,\n> > \n> > what exactly should happen when you click that link? Do you want to\n> > reload\n> > the widget with the new state? Then you should take a look at Apotomo (\n> > http://apotomo.de). Tell me what you need (request-wise), maybe we can\n> > do\n> > that simply with cells?\n> > \n> > Cheers\n> > \n> > On Tue, Dec 4, 2012 at 4:28 PM, Luc notifications@github.com wrote:\n> > \n> > > Hi,\n> > > \n> > > I'm following several tutorials on Cells components for Rails and did\n> > > not\n> > > found how to add a link to another view from within a cell's view.\n> > > \n> > > I have the \"Test\" cell. Inside this one, 2 methods:\n> > > - show\n> > > - configure\n> > > \n> > > Within the show.html.erb I'd like to add a link to the configure view\n> > > (and\n> > > vice-versa), what is the syntax to use ?\n> > > \n> > > I tried:\n> > > <%= link_to :configure, :action => :configure %>\n> > > \n> > > or\n> > > <%= link_to :configure, :cell => :test, :action => :configure %>\n> > > \n> > > but this does not target the cell controller.\n> > > \n> > > Any idea ?\n> > > Thanks,\n> > > Luc\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub<\n> > > https://github.com/apotonick/cells/issues/146>.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/apotonick/cells/issues/146#issuecomment-11032888>.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/146#issuecomment-11033249.\n. You inspired me to make Apotomo simpler: https://github.com/apotonick/apotomo/issues/77\n\nWould it be helpful to have that behavior in Cells directly? `cells-interactive` or something? I guess it would be a cool addition in a separate gem since a lot of people seem to be scared of Apotomo although it is just a thin layer on top of cells.\n. Hi Mateusz! I am working on the fix right now :-)\n. Please check if 3.8.7 works for you: https://github.com/apotonick/cells/commit/168fbc7ae9b179b36ef524b786a5b22573f5242a\n. The 3.8.8 release might help!\n. Engines support is still missing for Rails 4. Unfortunately, we don't have a test case for that.\n. Why didn't you say a word? I simply forgot about that patch, sometimes you guys gotta refresh my memory! ;-)\n. The appending behavior is the intended semantic. We don't do internal buffering and the like as it is implicit and less versatile. Why don't you try this?\n\n``` ruby\noutput = []\n\noutput << render(view: :facebook) if need_facebook\noutput << render(view: :twitter) if need_twitter\n\noutput.join(\"\")\n```\n. I am in the process of re-thinking the initializing flow and will share my thoughts in this thread - thanks dude!\n. `Builder#create_cell_for` now propagates the options to the constructor: https://github.com/apotonick/cells/blob/285dc0230e5a7c8b837448237e73b7a59155dfaf/lib/cell/builder.rb#L53\n\nIf you wanna grab a cell instance in your controller/view, use `#cell`.\n. So good to hear! And thanks for the feedback. If you run into any trouble with the experimental stuff, don't hesitate to post it - I promise it won't take another 9 months :grin: \n. In a couple of days I will release cells with #global_content_for which\ndoes exactly what you want.\n\nOn Sat, Feb 23, 2013 at 1:53 AM, yasirs notifications@github.com wrote:\n\n> I have the same issue.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/152#issuecomment-13946629.\n. https://github.com/apotonick/cells-capture\n. [Note: I might move this discussion to my blog since I find this really important.]\n\nTwo problems with `content_for`.\n1. You're changing state of a global (brrr) variable from a well-encapsulated cell.\n2. A cached cell will mess up the global (brrr) as you expect the cell to set something but it actually doesn't (cache hit).\n\nI would prefer something explicit like the following.\n\n``` ruby\nrender_cell(:bassist, :play) do |cell|\n  content_for(:global_js, cell.js)\nend\n```\n\nHere, `content_for` is used where it should be, in the ActionController's view, whereas the cell has a separate - uncached - state that just returns the JS, ignoring the cell's caching.\n. Added a blog post: http://nicksda.apotomo.de/2013/02/cells-got-content_for-support/ - please continue the discussion there.\n. Does that work without RSpec?\n. Well... `#in_view` is supposed to return a string of the rendered content -\nis that what you want?\n. The `#in_view` method is only meant for testing helpers and the like, sorry :-) I am sure you can create a `simple_form` object manually but the rendering won't work outside of a template. What are you trying to do (just curious)???\n. That is indeed a good question. You could go with an `ActionView::TestCase`.\n\n``` ruby\nclass FormCellTest < ActionView::TestCase\n\n  test \"form rendering\" do\n    simple_form_for subject do |form|\n      render_cell(:form, :show, form).should == \"...\"\n    end\n  end\n```\n\nDoes that work?\n. Well I would love to have cells controller-less but Rails still forces us to keep up that requirement. What we could do easily is providing `Cell::TestCase` as a module that can easily be used in `AV::TestCase`.\n. Closing this as view models cells make `in_view` unnecessary. You can simply call the rendering cell action in your test after converting the cell to a view model.\n. Correct use is `render :view => :no_results`.\n. How did you solve it (out of curiosity)????\n. Ah, ok, that's because `#form_for` needs a controller instance to compute the URLs. When calling `#render_cell` on this instance it's done for you automatically and therefore it works. Sorry for that clumsy controller instance propagating but that is a Rails design flaw not coming from cells.\n. Kind of, engines are part of Rails. It wouldn't make sense to add engines view paths to the abstract `Cell::Base`. I mean, if you're in trouble, let me know and we can change this.\n. The ApplicationHelper#current_user method does of course access the cell's\ninstance variable @current_user and not the one from the controller - this\nis exactly why I keep telling people that helpers are shit :-)\n\nPass the current user into the cell!\n\n``` ruby\nrender_cell :notice, :view, current_user\n\nclass NoticeCell < Cell::Rails\n  helper ApplicationHelper\n  def view(current_user)\n\n   @current_user = current_user\n\n   render\n  end\n```\n. Hi @cedrics, the master line now contains tests for engines.\n\nHere's the engine: https://github.com/apotonick/cells/tree/ed5963d9f9b79883d73b071a1fd1430e0f001249/test/dummy/label\nAnd here a test: https://github.com/apotonick/cells/blob/ed5963d9f9b79883d73b071a1fd1430e0f001249/test/rails/integration_test.rb#L49\n\nCan you add a state/view to the engine and write a test that fails without your fix, please? Thanks buddy!\n. On purpose! We explicitly _don't_ want caching _in_ the view but on the cell instance. If you have a fragment you wanna cache, extract it to a second state.\n\n``` ruby\nclass CommentCell < Cell::Rails\n  def show(comment)\n    @comment = comment\n    render\n  end\nend\n```\n\n``` haml\n# show.haml\n= @comment.title\n\n= @comment.text\n```\n\nLet's say you wanna cache the second line (for whatever reason).\n\n``` ruby\nclass CommentCell < Cell::Rails\n  def show(comment)\n    @comment = comment\n    render\n  end\n\n  def text\n    render\n  end\n  cache :text\nend\n```\n\n``` haml\n# show.haml\n= @comment.title\n\n= render state: :text\n```\n\n``` haml\n# text.haml\n= @comment.text\n```\n. https://github.com/apotonick/cells#cache-options\n\nThere's also a method to expire a certain key but I would highly recommend expiring caches by incrementing a cache key instead. My book talks about that in detail: https://leanpub.com/trailblazer\n. I'd merge your PR instantaneously if you'd send one!!!!\n. Thanks, what does that change? Did you run into any problems without that patch?\n. Sorry for disappointing you, @blankyao but this is no longer necessary with Cells 4. Thanks for your work!\n. @lulalala Can you provide a small example where the delegation of `config` is triggered (e.g. by calling one of those helpers)? That'll be great, I will merge the test (@kuraga ;-) and fix `Cell::Rails` to provide it!\n. Hm, I had another look at it and I believe it should just work by deriving the mailer from `Cell::Rails` as there is no request dependency. What happens when you do that?\n\nAnd, please, do create a test `test/mailer_test.rb` so I can play around with it - Thanks man!\n. Wait a minute - `delegate` is inherited, it just creates instance method when the class is evaluated (\"compiled\"). But as I could see this is not the problem, since `config` is not really dependent on request anyway. So what was the problem then? ;-)\n\nThere is a dummy test app in cells which is used for testing the Rails bindings: https://github.com/apotonick/cells/tree/master/test/dummy You can add stuff here if you need.\n\nI'm pretty sure we already have a test for `config`, btw: https://github.com/apotonick/cells/blob/master/test/rails/cells_test.rb#L80 Not a really strong test, thou.\n\nIt would be awesome if you could try adding a cell mailer to the dummy and then run it in `mailer_cell_test.rb`.\n. Cool! Thanks for catching up here, I'll look into it :headphones: \n. Cells 4.0 won't have the request/ActionController dependency anymore, which will basically allow you to use `Cell::Rails` as a mailer (still having `#assets_path` etc). Will that help?\n. You can still define `Cell::default_url_options` or set it in the `config` (can you? Good point actually).\n\nI don't know why I didn't remove that dependency earlier, like... 3 years ago :/\n. How was your holidays? cell-4 branch not ready, yet.\n. In Cells 4, we don't have an ActionController dependency anymore, you can use the cell directly.\n. Thanks @graysonwright for fixing that!\n. This is the desired semantic when rendering a cell. Passing the arguments into the method in a functional style avoids internal state. We call that `state-args` - why do you think this should be changed?\n\nIn an upcoming version of cells we have a more view model-like way to render cells which might be exactly what you want! :-)\n. Aaaah, thanks man! :heart: \n. You need to install `rspec-cells`.\n. In `development`, caching is turned off per default! https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L40\n. And in Cells in the view-models branch ;)\n. I'm gonna release a new version when the new view model branch got merged. Thanks, Alex!\n. We will deprecate `Cell::TestCase` soon and just provide a module so you can inherit from whatever you want. Actually, the module is [already there](https://github.com/apotonick/cells/blob/master/lib/cell/test_case.rb#L86), try including it in your class.\n. Just out of curiosity - where do you put your cells?\n. I'd love to hear more about that \"cells-like components including assets\"!\n. Wow, lots of questions:\n1. How do you set your cells view paths?\n2. How does Rails' autoloading find the cell in that directory?\n3. Do you use Cells' view model dialect?\n4. How do you render the coffeescript/js/etc files from the cell?\n. The standard cache key is computed here: https://github.com/apotonick/cells/blob/master/lib/cell/caching.rb#L65\n\nIs including the template's MD5 a new feature in Rails 4? Please educate me.\n. Well you can always compute your own cache key with the MD5 of the\ntemplate. Not sure how to get that, thou. Is that a feature you definitely\nneed? Anyone?\n\nOn Thu, Dec 12, 2013 at 12:31 PM, PikachuEXE notifications@github.comwrote:\n\n> There is a gem called cache_digesthttps://github.com/rails/cache_digests\n> But I don't know if that could work on Cell (since it's using controller)\n> \n> I updated a template for a cell and but since the cache key remains\n> unchanged (record not updated)\n> The cache is still valid and requires an explicit key (version date or\n> something) to expire it\n> \n> I want to see if there is a way to auto/semi-auto expire the caching when\n> template is updated\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/188#issuecomment-30382142\n> .\n. We actually have a method to expire a cache! It's in the `Caching` module. Maybe it should be easier accessible?\n. Why do you find the template manually? How can you make sure this is the same template that actually gets rendered? Your idea is great, however, we should find a way to use the actual template found by Cells and compute the digest using this very instance.\n. @PikachuEXE Any help needed here? Or can we close this?\n. I don't understand this feature. \n- Does it mean the cache key should be the \"MD5 sum of the template file\" (whatever that means)? \n- How do you know which template will be rendered when computing the cache key?\n- What's the purpose? To cache a template until the file changes?\n. Ah, so the MD5 is automatically included in the cache key?\n. Yeah but how do you know that it's gonna be the `show.haml` file in the versioner? You only know the used template for sure until you run the state.\n\nI have an idea how we can provide that optionally.\n. @reneklacan We could talk to Rails core about changing their API for `Digestor` so it doesn't have to be ugly anymore?. I don't understand - what's the problem? If you want to test your caching, turn it on? :smile: \n. Can you paste your cell class here?\n. We could give the caching layer some love, I haven't touched it in years.\n\nWhat if you would test your versioner like that?\n\n``` ruby\ncell(:text_links_in_comments).send(:versioner, options)\n```\n. What do you wanna test?\n. So, basically, you wanna \"test\"/invoke that line: https://github.com/apotonick/cells/blob/master/lib/cell/caching.rb#L85 when you're working on your cells?\n\nWe can't simply run `#state_cache_key` or the like as this will break stuff. Also, when I turn off caching, I don't expect _any_ code related to caching being run.\n\nI think you should have some dedicated tests where caching is turned on where you call `#render_cell` with all possible permutations of options, and then assert different view states.\n. Tests should run now with a simple `rake`.\n. Tests are fixed in 3.9.1.\n. @aalbagarcia The current master is CI'ed against 4.0.2 and works! Can you double-check?\n\n@xdite Thanks honey, I started working on that. What we need is a test with a Rails engine, we don't have that, yet.\n. Cells 3.9.1 works with Rails 4.1.\n. Sorry not a big fan of this badge overloading. A good gem's builds should be always green :grin: \n. I'm sorry, I can't merge that. It would change the expected API: When caching is turned off, I don't expect _any_ caching code to be run. This PR would run the versioner anyway.\n\nMaybe we should try to find some test helpers instead to make asserting your caching easier with cells?\n. Wouldn't it make more sense to have separate tests for non-cached and cached setups? I might be wrong, but supposed I had a cell with cached states I'd write explicit tests for the caching where I switch it on.\n\n``` ruby\ndescribe \"#show with caching\" do\n  before { caching_on! }\n\n  it \"renders cart\" do\n  end\n\n  it \"renders old cart even when changed\" do\n    cart.items << beer\n    cell.render_state(:show).must_equal ...\n  end\nend\n```\n\nAre we on the same page?\n. Sure! Check out how we do it in the tests: https://github.com/apotonick/cells/blob/master/test/rails/caching_test.rb#L29\n. Hi Josh,\n\nusing state-args (e.g. passing user explicitely, as you do) is good style, as it removes \"magic\" behaviour: You're using pure Ruby to inject dependencies in your encapsulated cell.\n\nThe benefit from explicit code is, tests and production code work exactly the same: The cell doesn't care about the environment as long as you pass it the `User` instance. In the standard Rails stack, this is different: There's dozens of lines of code to make Devise work in tests. I personally find this wrong.\n\nI haven't looked at Devise in a long time, but it seems it is still designed very monolithic, relying on global variables like `current_user`, etc. You have to go the clumsy way here and use `helper_method` to import it into Cells.\n. The \"environment stuff\" you mention are global variables. They might seem handy at first glance but cause endless trouble in tests, threading, isolated components, etc. :wink: \n. You have to do that yourself, Cells is a very minimalistic view component framework. I was thinking about making the transition from Cells to Apotomo easier: https://github.com/apotonick/apotomo/issues/77\n. Thanks! An example in form of a **test** would be great!\n. This is already working in Cells!!! Just use a block and return an array of key elements:\n\n``` ruby\ncache :show do |cell, options|\n  [cell.id, options.hash]\n```\n. I understand, we already have the concept in `cache_options`, but you want that to be a lambda and execute that at run-time?!?!\n. This is because we include all URL helpers into each cell: https://github.com/apotonick/cells/blob/master/lib/cells/railtie.rb#L7\n\nI personally hate the way those helpers are implemented in Rails and don't wanna spend another single minute on looking through how Rails kills object-orientation with it's 500 helper modules. This sounds like a feature that has been added recently to Rails, thou, if you find out how engines import there own routing, only, I'm happy to merge it.\n. Ah, thanks! You see, the code is horrible?! Do you know since when `#railtie_routes_url_helpers` is around? 4.0?\n. However, thanks for finding this!!! :heart: \n. That code is ridiculous. I am not sure if I am gonna support this in Cells 4.\n\nThe good thing is we don't have the problem with \"wrong\" helpers being included into Cells, as you have to explicitely say which helpers you want.\n\nThe bad news is we would need a switch where we either include the app's Url helper module, or only the `define_method(:railtie_routes_url_helpers) { railtie.routes_url_helpers }` bullshit one.\n\nOh man, how I fucking hate Rails and its helper system.\n. Cool. @dreyks, I will document that as this looks like the cleanest way to solve this.\n. This should go to [`rspec-cells`](https://github.com/apotonick/rspec-cells/)! Was `has_content?` removed in Capybara just recently? I'd appreciate any help here as my rspec knowledge is zero.\n. Can you please check out rspec-cells 0.1.10 (just released)? That should fix this. Are you using Capybara in the first place?\n. Haha, sorry, I don't understand what I was trying to say, I guess something like \"do you use Capybara at all\"?\n. It's not a gem, it's an attitude! :grin: \n\nYou might wanna check out [Apotomo](http://apotomo.de) as well, which is interactive Cells. Regarding JS frameworks, I'd definitely use them when it comes to more complex UX. However, I can see cells/widgets back an Ember widget.\n\nWhat people often do is hook a cell directly to a controller route and use this as an ember widget backend. The initial rendering comes from the cell, then AJAX requests update the ember pendant. This is very close to a real MVC architecture.\n. This is a secret but I'm gonna tell you anyway: cells-widget is gonna be all the good parts of Apotomo combined with Cells. I am expecting JS framework integrations from that project. :rocket: :guitar: \n. Hey @kuraga, good to see you back!!! :smile: \n\nUhm, the reason there's two modules `Cells` and `Cell` is that\n1. `Cells` is the \"gem\" module that contains generic code that doesn't really fit into 2. (e.g. ActionView extensions).\n2. The name `Cell` reflects the domain concern way better than `Cells`, I'd find it weird to have a `Cells::ViewModel` as I don't like plural class names in general when speaking about an entity.\n\nI agree that we could look over the Railtie location etc, but I definitely don't wanna merge the two. Do you find it confusing?\n\nBTW - I had some ideas this weekend for making a cell behave like an Apotomo widget, so stay tuned, I will need your help!\n. Yeah, and I partly agree with you. The gem name should simply be `cell` and everything would be good. You made me think now, maybe it would really be less confusion if everything was in `Cell`?\n. A lot of stuff looks complicated because of the `parent_controller` dependency in `Cell::Rails`. In order to keep the code _clean_ the `Rails` cell needs to hook into several steps, otherwise we'd have to copy code (e.g. for builders).\n\nThen there's a couple of features (e.g. `Caching`) that is _not_ hardcoded in the core code but included as modules. Without knowing the core, it might be hard to follow, but that's a common principle accross all my gems and also used in many other projects.\n\nIn addition to that, there's helpers and stuff that doesn't fit into the `Cell` namespace, like ActionView extensions, the Railtie and all that stuff.\n\nWith Cells 4.0 it will get a lot easier as we don't have the fuckin' `parent_controller` bleeding through anymore. In other words, `Cell::Rack` and `Cell::Base` get redundant.\n\nGive me an example what you find dirty about the existing code!!!\n\n---PS: Another complication might be the `VersionStrategy`. Cells is compatible with Rails 3.0, 3.1, 3.2, 4.0 and 4.1 so far and that's something we should be proud of.\n. Oh BTW, Cells 4.0 **will** be compatible with the existing API (unless you use `Cell::Rails.new()` directly) it's just gonna be simpler!!! :grin: \n\nSorry for all those changes, I didn't know you were secretly working on a fork :surfer: \n. Alex, I haven't forgotten your justified criticism and I want to present you an almost-stable version of [Cells 4.0](https://github.com/apotonick/cells/tree/4-0-no-actionview). It is incredibly simplified. What do you think?\n. Whoops I totally missed this comment. Why did you close that, I liked your work?!\n\nWhy drop support? I originally wanted to \"fade out\" support for older Rails by simply not back-porting new stuff (e.g. view models don't work with 3.0 afaik).\n\nI'm currently cleaning up in master as I'm moving towards 4.0 - should we discuss that based on the 4.0 code?\n. Hihi, I tell you a secret: I use latest Cells with old Rails versions in legacy apps :grin: \n. I agree with you on dropping support to make the code more streamlined. Anyways, it is only minimal effort to support older Railses and somehow this makes me a bit proud :wink: I'll go through it tonight and see what we can do.\n\nThanks for the input, man, I appreciate that.\n. No no, it's good that you addressed this. I'll go through it and let you know later. Thanks again, Abdel :heart: \n. Thanks! Was completely outdated anyway. The new websites will all go to trailblazerb.org.\n. Thanks, I'm still \"waiting\" for my hoster to 1.) Get my blog back running and 2.) delegate *.trailblazerb.org to that server :(\n. I added a gh-pages generated branch to trailblazer - anyone keen to set up a landing page that explains that Cells is part of Trb and the site is gonna be updated soon, etc.?\n. Hahahahaha!\n. You guys are hilarious! :laughing: \n. Yepp, Cells are _view_ models and don't know anything about HTTP or Excel.\n\nReturn the rendered data from the Cell and do the request/environment-specific stuff in the controller (that's the only reason a controller should exist).\n\nCall your view model like that.\n\n``` ruby\ncontent = cell(:spreadsheet, format: :csv)\n```\n\nAnd here's the implementation.\n\n``` ruby\nclass SpreadsheetCell < Cell::ViewModel\n  property :format\n\n  def show\n    \"this;is;csv\" if format == :csv\n```\n\nLet me know if that doesn't work for you.\n. Ok! Yeah, you need to use `:partial` (is that documented?).\n\nCan you enlight me why you'd want to render a global partial in a cell, though?\n. Interesting. So you just passing the partial symbol, like `:header_v2` and then render in the cell? I understand, since that is non-cell stuff these views don't go into the cell.\n\nThat's a really interesting use case, I'd like to make that simpler in general. Do the partials need to be partials or could they be cells, again (different cells, for each controller)?\n\nCould you add a quick section about `:partial` in the README? Thanks :fireworks: \n. Thanks!!!! :heart: \n. Hey,\n\n1) Absolutely no idea. Cells are just parts of your view and will be rendered with your page. So, that should work. I personally find turbolinks one of the worst ideas ever and wouldn't use it at all. If you want AJAX widgets, check out Apotomo, which works on top of Cells.\n\nThe Apotomo approach is a bit more work as you need to define widgets, but you get to control _what_ updates _when_. Give it a go, I love it!\n\n2) A very old one, sorry :) The Trailblazer example app will contain an in-depth example of Cells as a view model. This is completely unrelated to other Trailblazer concepts, so you will easily be able to extract the knowledge you need.\n\nAlso, the book will contain a huge section about Cells. I'm sorry I'm not providing more docs atm but it's impossible for me to maintain all those gems and provide example apps at the same time. Maybe you want to help?\n. Byron is horrible, just came back from the surf and the waves were too big and it's way too warm for winter!!!!\n\nDefinitely come back to Rails - with Trailblazer, a new wind is blowing, you're gonna like it.\n\nLet me know if I can help you with Cells. I should be able to work on the demo app for TB in about 2 weeks.\n. :+1: :+1: :+1: :+1: :+1: :+1: \n\nAnd Reform forms for forms and contracts, and representers for your APIs and Operations for your domain logic!\n\nAre you Aussie?\n. It's a tough job, but someone's gotta do it... :wink: \n. Hmm.... yes and no. I had the same idea, but then realized that it's totally fine to use Cells and the concept file layout without any other Trb feature, so I decided it's ok to \"bundle\" it into the gem.\n\nSince Trb is a mash-up of Cells, Reform, etc., I was planning to put trb-specific _extensions_ to the latter into the `trailblazer` gem itself, instead of having one gem per layer. Also, I try to make the new features available to \"non-trb\" Rails projects, so \"conventional\" Rails users can take advantage of the concept file layout without having to install trailblazer, for instance.\n\nI don't know if that makes sense :) Do you see any issues with the concept cell generators being part of cells itself?\n. Wait, what do you mean? Cells does have a Trb dependency? That's wrong, as you say, this shouldn't be the case!!\n. Ok that makes sense. I have to work on the generators anyway so I might correct that. Thanks!\n. Hm... that doesn't make sense. Can you look into that? Maybe that generator shouldn't be loaded? https://github.com/apotonick/cells/blob/master/lib/generators/test_unit/cell_generator.rb\n. Thanks for looking into that, Dmitry!!! How does Rails do that? Doesn't Rails have test-unit support out-of-da-box and then \"hides\" it if rspec is loaded? Maybe there's a switch when requiring the task?\n. Please reopen in cells-rails.\n. This is a haml bug I fixed here: https://github.com/haml/haml/commit/6d4558034c061990c76393331002767eef5a4034 Try upgrading haml? Also, if that doesn't work, could you please provoke the same error with ERB? Thanks!\n. I had a similar issue a while ago, and it was AV's output buffer handling. I can't remember the details but a problem was that everything relies on a global buffer, which is not present in encapsulated cells. \n\nWhich Rails version are you working with?\n. Cool! How did you manage to get that method body? That's a great idea to debug that! I had a hard time following through the flow with `puts`, etc.\n\nYes, if you can find out what's the problem, that'll be great. Remember, we can change things in Rails core, too. \n. Great man! When I played with it a while ago I ended up _not_ using a buffer variable but returning the buffered output, or I injected a buffer instance instead of using a global one (damn, can't remember).\n\nLet's try it out in cells, if it's cool we can push it to the rails core - I'm pretty sure they like that to be cleaned up.\n. I am planning to completely replace ActionView in Cells with a minimal implementation using tilt (probably a couple hundred lines of code, not 5000+).\n\nThe AV gem is unnecessarily bloated with all kind of crap code that has survived a decade and no one really cares about it. I don't want to waste my time working with this anymore (I tried my best in the last years, but nothing changes on the Rails side) so why don't we just use a clean view template engine and build our stuff around this?\n\nThis will still allow using all the helpers, etc. we just don't have to fight with AV's implementation anymore.\n. Why, we can provide our own buffering? As far as I remember, that was kinda built-into tilt itself?! I played around with that idea years ago and it worked!\n. I had a look into cells today and I realized how long overdue this AV replacement is - we only need template finding from AV, everything else is implemented in tilt. It's gonna be fun replacing it!!!!!! :dancer: \n. Nice explanation, thanks @Iazel!\n\nSo why is the block bound to the cell's context? Can't we make that explicit, so we can inject/pass any buffer? I wanted to fix that a long time ago as the Rails implementation is unusable in non-monolithic setups as with cells. Good to have you on board!\n. I think I'm getting closer with Cells 4.0 and this output buffering. Can you please look into this test https://github.com/apotonick/cells/blob/4-0-no-actionview/test/vm/render_test.rb#L60, you seem to know everything about buffering!\n\nAlso, this simpler code, would that help you in achieving what you need?\n\nBesides that, Cells 4.0 is fucking amazing, so little code and 3x faster!!!!!!!!!\n. We should change the form helpers, capture and content_tag to do it the way Sinatra does it: https://github.com/cymen/sinatra-formhelpers-ng/blob/master/lib/sinatra/form_helpers.rb\n\nIt is so wrong to maintain this stupid output buffer. Why does HAML has to patch a helper method to make it work? I don't understand how so much kludge found its way into the core of those two great gems.\n\nI'll be back working on this later. Thanks so much for your help. Cells 4.0 is gonna be fucking awesome :heart: \n. @Iazel I strongly vote for you releasing your fork of ERB as a separate gem (ERBoo). We want to use it as an alternative for the patched mess from Rails in Trailblazer.\n\nAlso, we want **clean** ERB support in Cells as I met quite a few cells users who prefer ERB over HAML.\n\nAn additional benefit is that we can push all our fixes and clean-ups into your gem. If the original ERB decides to get up-to-date we can always merge back. But I guess it might end similar to HAML and Slim.\n\nPlease, go for it!\n. @Iazel Is there any way I can encourage you to release your ERB version? If you don't want that, can you move the ERB code you wrote in the render_test to a separate file and PR (I want it to be visible that this is your work, not mine)? We want to release Cells 4.0 and need ya!\n. I did, and that's the next big thing we're gonna roll out! :dancing:\n\nYou can also just move the ERB code from the render_test into a separate file (lib/cell/erb.rb). If you need help with releasing the gem, I've done that a few times.... :wink:\n\nHit me up on gtalk, apotonick@gmail.com, if you like?!\n. The ERB is fixed in cells-erb 0.0.2.\n. Cool! I have no idea what you're doing, though! :grin:\n\nI don't completely understand why we have to patch Erubis - is that to make that work?\n\n``` ruby\n<%= form_for .. do .. %>\n```\n\nWhy isn't this supported on a lower level? Haml does this out-of-the-box, right? Thanks @Iazel \n. Yeah, I saw the problem with Erubis and how Rails fixes it (with that preamble stuff). Thanks for pushing this into Cells 4.0 and make it work.\n\nHaml does blocks! I think it just has a problem with the way Rails uses capture, that's why they override it. I got it working now by [copying the capture code](https://github.com/apotonick/cells/commit/62d96c0938f751dd6d530195f3e83b9eae0d6ed6).\n\nThe only problem here is that the inner block is escaped because it's not a `SafeBuffer`.\n\nI totally do not understand why this is so messed up? Isn't it pretty simple? If a line starting with `=` is in the block, you capture that and then return it internally?\n\nWhat are we gonna do? Should we start talking to the Haml guys? They are awesome and really helpful. Maybe we can simplify this once and forever?\n. Wow! :heart: Is there a way we could pull your Erubis implementation into Cells without monkey-patching the existing, old one? I am absolutely up for your stuff!\n. You could just use another name for your implementation. I will use your ERB, then. No need to try to make old stuff work.\n\nBTW, the way we find and render templates also changes: A cell now has _one_ template engine, e.g. `haml`. This is per class. If you need to render something else, you can do `render format: :erb`. Reason for this is because in 99.9% an encapsulated cell needs exactly one template engine. You don't use 2 or 3 different for one widget (I do, but that's another story ;).\n\nThen, the way we escape will be different to Rails. We don't escape anything per default. This is hundred times faster than going through _every_ string and escape it. I am thinking of escaping on the method level.\n\n``` haml\n.header\n  = author_name!\n  = id\n```\n\nNot sure if the bang'ed method name will return escaped, or the normal one. However, the concept is to escape the reader's value and not _everything_. If people don't use readers it's their problem.\n\nThis will greatly speedup as we don't do a regexp per string! :fireworks: \n. I think the best would be to escape all un-bang'ed methods _in the view_. This could happen via a simple intermediate object only used _in the view_.\n\nIt basically would do what you suggest.\n\nHow can I turn off Haml's escaping?\n. BTW, if I use your gem than it will override Erubis globally - not sure if we want that?\n. You're awesome!\n\nSetting `escape_html: false` doesn't really help as escaping and `if`s are everywhere in Rails helpers. It's probably best to rewrite some of them (capture, tag helper, etc.) to have a clean state. As I said, I won't waste more time with that cobweb code...\n. Yeah, and I think most of it will still be usable even in our new Cells world - PLUS new development in existing gems will probably involve the simpler Cells way? Ditching Rails as too easy! :grin: \n. So, the recent changes allow Cells 4.0 to be fully used in a Rails 4.x environment + HAML!!! I haven't tested all ERB, yet, and some form helpers do not work with Rails <= 3.1.\n\nWe don't need any HAML/Rails escaping anywhere so we have to patch/change that in the original gems (as they escape everything everywhere 3x, it's such a mess!).\n\nAlternatively, we can just rewrite a couple of helpers and throw out all the horrbile hacks that were introduced over the last years.\n. .........it is gonna be fantastic, I love this branch already!!!!!! Thanks for your support :beers: :heart: :beer: \n. Thanks! Everything seems to work fine with HAML so far (Rails >3.1).\n\nThe HAML guys are great and if we explain our concerns they will merge it, right, @teeparham?\n\n@Iazel I would _LOVE_ to have better view inheritance without the need for a hundred files. We should discuss that in another thread?!\n. @Iazel This kind of view inheritance is already implemented in Cells since version 2.0. I want something more block-oriented, I think you had some ideas about that, too.\n. I always include the particular helpers modules into my view models - that's how it's designed to be (usually `FormHelper`, and so on).\n\nIt is absolutely ok to do that and in line with Cells' philosophy of encapsulation.\n\nThis will also help finding flaws in Rails helpers so they can be fixed for both Rails and Cells. As an example, we found lots of helpers that do escaping wrong. This wasn't visible in a vanilla Rails app but in an isolated environment it would break.\n\nThat's a good thing, so hopefully the Rails helpers will become cleaner. If you find problems, please ask me first, we can then communicate it to the Rails core team.\n. The correct way would be to change that in Rails and replace this incredibly fucked up URL helper system with something object-oriented and sustainable.\n\nI absolutely have no clue how the sprocket paths stuff works in Rails > 3.2 but as soon as I run into it I'll let you know.\n. Man, thanks for figuring this out. Ok, I understand, the problem is class settings that are not \"copied\" from the parent controller.\n\nYour way looks ok to me - the better way would be to provide an object to the cell that already keeps all those values, but that'll mean Rails had to use objects instead of blindly copying PHP-like helper methods onto other helper methods, dear god, objects, unheard of! :wink: \n. @incorvia I added a test for that here: https://github.com/apotonick/cells/blob/master/test/rails4.2/test/integration/url_helper_test.rb#L32\n\nThe cell sits here: https://github.com/apotonick/cells/blob/master/test/rails4.2/app/cells/song_cell.rb#L6\n\nAs you can see, this is a fully self-contained Rails app to test Cells. Could you make this test pass/fail? I don't know what your app setup is to make this `/assets` problem pop up. That'll be great for finding what's the problem.\n\n@gavinkflam I can't include them per default since people might not use sprockets. Sorry!\n. That is brillant, @PikachuEXE !!! Actually, the fix could be even simpler:\n\n``` ruby\nclass Comment::Cell\n  include Uber::Delegates\n  delegates :image_tag, :parent_controller\n```\n. Goooood boy! It is a stable dependency in cells with Rails.\n. Hahaha! No magic, it's an explicit option getting passed into the cell via the `#concept` helper: https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L10\n. Documented this fix here: http://trailblazerb.org/gems/cells/helpers.html#asset-helpers\n. In the controller, you might have to say\n\n``` ruby\nclass ApplicationController < ..\n  helper_method :image_tag\n```\n\nPlease note that this is Rails-specific, and I do not support Rails anymore.\n. Haha, you're good, use Rails, but be prepared for problems like this! :grimacing: \n\nDoes the `helper_method` work for you? Should I add that to docs?\n. Yepp! Suggestion is to open an issue on Rails- we can't do anything beyond providing a beautiful view layer. Sorry!\n. We probably could extract a lot of code into a new gem `cells-rails` that takes care of all those nasty hacks?\n. Please all use the https://github.com/trailblazer/cells-rails gem, it fixes all of the above problems.\n. Cells 4.0 is not released yet, I will try to finish it within the next days. Check the README, there's no such thing as `Cell::Base` anymore, only `Cell::ViewModel`! :grin: \n\nI will write a brief migration guide today, and, pleeease, go and try master, it would really help me!\n. Hey Alex, here's the new upgrade guide: https://github.com/apotonick/cells/wiki/Upgrading-Guide\n\nLet me know if you need further help.\n. Haha, right! :grin: \n\nThe second paragraph in the README says that this README is for Cells 4.0 and shows a link to the 3.x docs.\n\nIf you do `cell(:item)` it calls the `ItemCell#show` method, you do `cell(:item).call(:list)`, which is also documented :stuck_out_tongue_closed_eyes: !\n\nI will fix the README ASAP and your valuable input is appreciado mucho mucho hombre!\n. Guys, please _READ_ the README. There is no `Cell::Base` in master anymore! This is also documented in [CHANGES](https://github.com/apotonick/cells/blob/master/CHANGES.md#400) and in the [Upgrading guide](https://github.com/apotonick/cells/wiki/Upgrading-Guide).\n\nOne of the few things I like about Rails is the way master is treated: It's the development branch everyone works on.\n. Is that pizza?\n. @LinkedHK Check out this: https://github.com/apotonick/cells/wiki/Upgrading-Guide\n. Ah, sorry! `#render_cell` is gone in 4.0! This is to avoid confusion.\n. Thanks! That hasn't been fixed, yet. Sorry! :stuck_out_tongue: \n. ``` ruby\nCell::ViewModel.template_engine = \"slim\"\n```\n. Thanks so much for trying out master. Sorry that I haven't fully documented.\n\nHit me up on IRC, freenode #trailblazer channel or on gtalk!\n. That sounds like two unrelated issues, @nacengineer. This ticket was about \"activating\" the template engine for a cell before 4.0 was released.\n\nYou want to use two engines in one project. The problem here is that each gem (cells-haml, etc.) will try to include itself into `Cell::ViewModel`, so the last one wins.\n\nWe can't simply provide multiple engines with an option in `#render`, as every template engine needs different helpers to be patched (again, this is not my fault) which implies the cell to include those helpers.\n\nThe only real solution is to suppress Cells-in-Rails-mode to automatically include those engines and let the user do it, but then people will complain that this is \"not convenient\". See the problem? What do you think?\n. @sveredyuk Which Cells version?\n. It looks as if your added view path `engines/core/app/cells` is not applied to your cell? Can you see that it's not printed in the exception?\n. Can you come join us on the Gitter channel, please? https://gitter.im/trailblazer/chat\n. Cool, thanks so much!!!!!! :heart: \n\nPlease, please, please, do that ERB gem - I will use it 100% in Cells and you will have many testers and downloads!!! :grin: \n\nDon't say \"when you got time\", that never works. Start this week!!!!!!!!\n. You sound like you're my man! :laughing: \n\nTarget repo? When cloning?\n. BTW I have the same problem - I know exactly what you mean.\n. All good, the `4-0-whatever` branch is merged into master! I actually don't know how to PR to another branch but the commiter (me) can always manually merge it into a particular branch.\n\nFor example, if I wanted to merge your stuff in `4-0`, I do the following locally.\n\n``` bash\ngit checkout 4-0\ngit pull https://github.com/Iazel/cells erb_with_block\n```\n\nYour stuff is then merged into the current branch. It will be in master anyway!\n. @Iazel Thanks again, I will add more tests for your ERB now.\n\nNext time when you work on a branch, do the following before considering to PR.\n\n``` bash\ngit fetch\ngit rebase origin/master\n```\n\nThis will apply all the \"news\" from GH master into your local branch. Thanks again, I hope this makes ERB work like a charm.\n\nHow is your new gem going? Need any help?\n. Oh, I added a test with `form_for` which uses `capture` and it worked. Are you sure? I hate the way the capturing works ATM, with this stupid `@output_buffer`, could be done so much simpler.\n\nBTW, we can go an talk to the HAML and Slim guys, I'm confident they're happy to work on a simplification of all that. At the same time, we started work on ActionView \"rewrite\". Not sure how far this will go, but I can pull in a simpler output buffering for sure.\n. Can you link to that PR here? Thanks!\n. We can leave it open - this is generally a good idea and probably what most people do anyway. I just don't want to merge it now before we have an agreement on the naming.\n\nThanks for all your work! :dancer: \n. :heart: \n. @azapps Thanks for trying out master - we're still working on some parts, but if you have questions, feel free to email me directly!\n. Hey Braden!\n\nThis is not implemented, yet! We have to hook into the Rails \"reload\" event and expire `@templates`. If you're keen, you can help me by finding out which Rails notification we need to hook into!\n. Cool, thanks! I don't think we have to dig that deep - There must be a public hook for AV reload events somewhere.\n. Hey thanks, this is really nice of you but the API for tests has changed, no `#render_cell` anymore :grin: \n. https://github.com/apotonick/cells/wiki/Upgrading-Guide#render_cell-helper\n\nCells 4.0 is still alpha, though (I use it in production anyway haha).\n. This is fixed in cells-erb 0.0.2.\n. This is now a confirmed bug in cells-erb and cells-haml. I am closing this as we have duplicate issues.\n. You have to activate haml via `Cell::ViewModel.template_engine = \"haml\"`. Does that help?\n. Hey Jerry, thanks for reporting. Yeah, I decided you will never ever have a cell with multiple engines (you can, if you want) as this also makes the code simpler.\n. Fixed in master.\n. Yeah, add it if you need it for 3.x. This is all so much simpler in 4.0, really can't wait to push it!!!\n. What do you mean, I thought you were gonna check docs after I pushed :wink: ?\n. Your english is great! :grimacing: Cells 4.0 is not yet released, you can use master branch or the 3.11 line. Sorry for that but we have to fix some stuff in the template engines.\n. I know it's confusing, and you're right @Undistraction - we should put the \"Note for Cells 3.x\" section under the installation instructions. :smile:\n. I wouldn't set an instance variable but define a reader, @timmi-on-rails.\n\n``` ruby\ndef items\n  @items = model.items_in_cart\nend\n```\n. BTW, issues are fine for questions, we just have to make sure to close them! :grimacing: \n. Thanks for this report, @mbajur. It's a bit of a mission for us since we have to fix a lot of technical debts that ActionView has accumulated over the past decade. Luckily, @seuros and @Iazel are working on a proper implementation for blocks in both HAML and, ERB. :grin: \n. This is fixed in cells-haml 0.0.2. Is that still a problem with slim?\n. Sorry to hear that, Corey. Cells has been extremely stable since 3.x so I'm not sure when was the last time you checked it out...?\n\nI thought the documentation clearly says the README is for 4.0. Maybe add a line saying \"not yet released\" or something? Would that help?\n\nYou wouldn't believe how much work it is to fix all the crap that Rails has messed up in the last years. Cells 4.0 comes without ActionView and we need to fix/remove a lot of things in template engines like HAML, where HAML monkey-patches Rails helpers to make them work due to bugs in Rails, and so on. It is incredible and we do our best to ship an awesome 4.0.\n\nA lot of people use the master branch in production already (me too), so give it a go!\n. That's because we're still working on the slim extension, @seuros can give you a heads up. Have some more patience with us!! :grimacing: \n. Uhm.... we have to actually change some code for Cells 4.0 to get rid of that warning. Is that what you're asking for?\n. @seuros Should we have a hack night this weekend (night for you, day for me or the other way round)?\n. I will come back to Cells the next week and then we will fix it.\n. Is slim working OK so far? Is it \"just\" this warning? Will look into it once I know more from you! :wink: \n. Hey @porbas can you do me a favour and convert all those files in here to correct slim? https://github.com/trailblazer/cells-slim/tree/master/test/dummy/app/cells/song\n. All tests passing now, released cells-slim-0.0.2. Please test and report bugs it the cells-slim repo. Thaaanks! :beers: \n. I will do it in a second!\n. Released 3.11.3 with @pwim's fix. Thanks! :heart: \n. What if people use Capybara, they don't need the `rails-dom-testing` gem (thanks @pwim for that hint!). Do you _have_ to include that gem when you use `Cell::TestCase` in Rails 4.2?\n\nCells 4 will soon be ready and doesn't have all this mess anymore, that's why we're not really focusing on a fix here, @balauru ! :beers: \n. You're using cells master, right? That's because we're still fixing the ERB bugs in Rails. Is that why, @seuros ? I need to merge PR that probably fixes this in master.\n. That is weird, what does better_errors do to crash ERB? I am pretty pretty sure @seuros is working on that!\n. This is fixed with cells-erb 0.0.2.\n. You have to include `ActionView::Helpers::FormHelper` into your cell, and then define `#dom_class` and `#dom_id` in your cell as an instance method. This is a dependency from simple_form or Haml, I don't know exactly why one needs this.\n\nWe can think about a cells helper module that provides that out-of-the-box but on the other hand I want to increase the pain so that users like you report to Rails  core and probably push them to remove those dependencies from core. :grimacing: \n. This is just wrong per design - why is a view component library supposed to fix these kind of template engine details. I really hope we can set a usable standard with `cells-haml` etc. and push that knowledge back to Rails core itself for ActionView5.\n\nI merged seuros cleanup, [cells/cells-4](https://github.com/apotonick/cells/tree/cells-4) is now the authorative source for our future work. Thanks to @seuros for his work on extracting template engine specific logic to gems! :heart: :beers: ah no wait, he doesn't drink alcohol.... :tea: \n. Why do you need that for cells 3 anyway, @PikachuEXE?\n. But... I don't understand... how is the `Concept` cell in Cells 3 related to HAML bugs that are fixed in `cells-haml`? In Cells 3, these fixes are shipped with the cells gem itself?\n. Would using cells 4.0 be a choice for you?\n. Ok, if your hacks work, then I'm happy. Sorry for the inconvenience - everything will be better in Cells 4.\n. You have to tell the formtastic guys to fix that in their code. They are not including necessary helpers in their modules and assume that everything is automatically/magically there, which is the case in Rails but not in Cells or in other Ruby environments.\n\nDo me a favour and open a ticket there, telling them to include the necessary modules in `Formtastic::Helper` (or whatever the name of the \"main\" helper is). I could add a fix to Cells, but this way, it will never be fixed correctly. :beers: \n. Hey Tom, may I enquire which Cells version you're using?\n. The rspec-cells version for Cells 4 is yet to be written - it will only be a few lines of code but someone's gotta do it! :wink: \n. This is fixed in the new rspec-cells 0.3 release.\n. Apotomo doesn't work with Cells 4, yet.\n. Sorry @dineshPallapa, not really - I would love to support Cells with Apotomo but don't have the time for \"experiments\"... :cry: \n. Hey David, thanks for that valid comment. The thing is, I completely change the semantic of a cell. In Cells 4 we get away from Rails and its controller-orientation to an actual _view model_.\n\nHere's the difference.\n\n``` ruby\nrender_cell(:song, :show, @song)\n```\n\nresults in \n\n``` ruby\nclass SongCell < Cell::Rails\n  def show(song)\n```\n\nThe song argument is passed into `#show` in the old dialect.\n\nNow, Cells 4.\n\n``` ruby\ncell(:song, @song).(:show)\n```\n\nIn Cells 4, the `cell` helper instantiates a cell with all the arguments, then calls the view state*.\n\n``` ruby\nclass SongCell < Cell::ViewModel\n  def initialize(song)\n\n  def show\n```\n\nAs you can see, you'd have to change your view states anyway (unless you patch).\n\nYou can surely introduce your own `#render_cell` helper that does exactly this behind the scenes (you can still do `cell(:song).show(@song)` but I have to warn you: The way helpers work has changed, some ActionView hacks are not gonna work in Cells 4, and many other things, such as a changed `#render` API.\n\nCells 4 is not meant to be a drop-in replacement for your cells 3 components - you have to migrate them manually in some cases. I can totally understand your concern and we will make this as painless as possible, but in order to smash this milestone we have to be aggressively changing, otherwise we will end up like other major \"MVC\" frameworks and keep treading water. :wink: \n\n*BTW, the call styles are documented in [my book](https://leanpub.com/trailblazer) in chapter 6 - I am gonna publish this chapter this week.\n. The solution might be to provide a `render_cell` compatibility helper.\n\n``` ruby\ndef render_cell(name, state, *args)\n  cell(name).(state, *args)\nend\n```\n\nDone. Hahaha, not sure if that works for each and everyone, though. :laughing: \n. I am glad you came up with that problem. Sometimes I am too focused on my \"innovation trip\" and forget about all the poor users who have to deal with my attitude. :laughing: \n\nWe added the `cells-3` branch so we can keep maintaining it. I just had a funny idea to allow both gem versions in one app (basically not a problem) but then we have to rename cells-3 to some other gem name.\n. @nacengineer Haha. Ehm, not sure how Haskell will save you from API changes, though? If you change the signature of a function in Haskell, you have to change your user code, too, don't you? Disabuse me as I haven't programmed Haskell in a long time. :hourglass_flowing_sand: \n\n@barttenbrinke Sorry to increase your workload. I had to change the public semantics - we needed to get rid of this \"Rails crust\" to keep innovating. The result is a super-lean core library now, some users reported rendering speed-ups of factor 2-3. :rocket: \n\n`#call` hasn't been removed - what makes you think so? Do you have specs for all your cells? If not, this is a good chance to write quick smoke tests, with Cells 4 it's even simpler now without all those hacks to make AV behave the way we want it in tests.\n\nI will try to add another section to the upgrade guide to address your trouble, @barttenbrinke. Also, make sure to join the IRC (Freenode) #trailblazer channel! :beers: \n. Haha, this totally is a forum and you don't rant but bring up valid points.\n\nPlease don't use Rails as an example for change. Rails hasn't changed at all in the last decade, it's still stuck in it's primitive \"MVC\" thinking where other communities have moved on a long time ago. Rails problems actually _is_ the obsession to be backward-compatible. This is why (what you call) \"API change\" in Rails means that AR scopes suddenly have a different naming scheme or callbacks can be stopped by emiting a special symbol.\n\nThis is not change, this is a cosmetic improvement. Still inconvenient, as you say, but superficial and absolutely not fixing the actual problems Rails has on an architectural level.\n\nAnyway, to come back to what you say. I don't think it's wrong to innovate. Innovation in programming means new structures, new objects (or functions) and new flows. And this means work for upgraders. :grin: I can't find this in Rails, though, whether this is a good or bad thing, I won't say in public haha.\n\nThink about these changes as this: I aggressively change my gems in order to make your life better. I do not simply decide that this method signature sucks or that class is useless, I collect input over the years and play with ideas permanently.\n\nAt some point, you simply figure out your original idea was suboptimal or misleaded (e.g. by trying to be \"Rails-like\"). And then you have to hardcore-change. I myself had to change about 20 cells in our current production project, it didn't really hurt and in the end I could see a significant performance increase, zero hacking in tests anymore, and the good feeling of having decoupled my code from Rails.\n. So true! One thing that really scared me off was when Rails suddenly decided to drop old Ruby support, mainly to use Refinements, which are feature I am never ever gonna use (ever!). Honestly, a web framework that uses super low-level _language_ tools, that's just not good. Another thing was when everyone dropped 1.8 support to have 1.9 hash syntax... WTF?\n\nI would _love_ to see typing in Ruby, and different method signatures depending on the argument types, as we have it in Java. Thanks for your kind words! :heart: \n. Can you give me some more details on those \"external helpers\"? Is that to test if methods are called properly? Theoretically, you can do that as follows.\n\n``` ruby\ncell = cell(:song, song)\nexpect(cell).to_receive ..\ncell.(:show)\n```\n\nRemember, every helper is just an instance method call on the cell instance. Does that help?\n. Ah, ok. cells3... Hmm... do this.\n\n``` ruby\ncell = cell(:song)\ncell.mocking_sucks! # do your mocking here ;)\ncell.render_state(:show, song, volume: 9).must_match ...\n```\n. Closing this, as this works with rspec-cells 0.3.\n. We should add this \"special behaviour\" to the gems' tests, @seuros ?\n. Hey Andy,\n\nthanks! Rails and its helpers are a pest and the way it's implemented is \"improvable\" :wink: - could you give this a go? https://github.com/apotonick/cells/wiki/Troubleshooting#rendering-problems\n\nWhat if you include the `AssetUrlHelper` in your cell?\n. Hm, this might actually be a good occasion to fix this in Rails itself.\n\nI am meeting @rafaelfranca and @carlosantoniodasilva in a few days and maybe we can go through it with some cervecas and discuss how to deal with this annoying design flaw in the future?\n. Hey @andypike, sorry for the late reply.\n\nI was able to reproduce this bug, but at the same time couldn't find where the actual `model.to_params` in the sprockets helper happens. If you find it out, I'll fix it.\n\nWent through your repository - looks great! First I thought you were already using Trailblazer due to the `app/concepts` directory, but .. not _yet_!\n\nA lot of things have happened in Cells 4 - can you upgrade to the release candidate and see if your tests still pass? Thanks! :heart: \n. Ehm... did anyone say \"blog post\"??????? :tada: :beers: :laughing: \n. This should be fixed in 4.1.0 in combination with https://github.com/trailblazer/cells-rails.\n. The `nothing: true` is Rails API, Cells tries hard to get away from that! :wink:  I've never liked that particular \"signature\" since it embraces Rails' monolithic rendering. (I mean, how awkward is it to say `render nothing: true` to do exactly _nothing_, hahaha?)\n\nYou can use `return` to return _nothing_. \n\n``` ruby\ndef show\n  do_stuff\n  return\nend\n```\n\nMaybe we should add that to the README/book?\n\nThanks for pointing it out! :heart: \n. As you can tell, there's a `FIXME` that is supposed to remind me to go through all base paths.\n\nThanks for your patch, but we have to restructure that a bit so we make use of caching.\n\nWhat's the deal with the tests? Not running for you? And, yeah, I know what you mean with \"paying the bills\" _cough_ :stuck_out_tongue_winking_eye: \n. Yeah, sorry, the `Gemfile` is wrong, I always run tests with the newest rails version from `gemfiles`. Sorry haha. Should all be good and running in a few weeks, can't wait to release Cells 4!!\n. Yes, but we also need a test setup for testing engine cells and this is some work. I would appreciate if someone could help me with the engine test.\n. I have several questions on how you use cells in/with engines.\n1. If your engine bundles cells that should simply be usable across the app, you could simply reset the `view_paths` and it would still work with the current (insufficient) implementation\n   \n   ``` ruby\n   MyEngine::Cell.view_paths = \"/var/engines/app/cells/\"\n   ```\n2. The problem arises when you _inherit_ from engine cells  in another directory (do you guys do that?).\n   \n   ``` ruby\n   class SongCell < MyEngine::Cell\n   ```\n   \n   Now that application cell needs two bases, namely `Rails.root/app` (application) and `/var/engines/...`.\n\nI'm wondering if we should merge prefixes and view_paths. There's simply no such case where you'd want Cells to look for `/var/engines/cells/song/show.haml` (application cell in engine, it's never gonna be there). Likewise, you don't want it to search for `Rails.root/app/cells/myengine/show.haml` because overriding engine views in the application namespace without actually inheriting from the engine is super dirty.\n\nThoughts?\n. @jamis Partials, or cell views?\n. You were rendering partials from cells? With Cells 4?\n\nI totally get subclassing engine cells and overriding views - that's why we introduced view inheritance in the first place.\n. I will most probably merge `::prefixes` and `::view_paths` do avoid confusion and simplify the entire process of view finding.\n1. Every cell can have one view path.\n   \n   ``` ruby\n   MyEngine::Cell.view_path = \"/var/my_engine/cells\"\n   \n   SongCell.view_path = \"app/cells\"\n   ```\n2. `::prefixes` will contain the base path already, so `ViewModel#find_template` doesn't have to figure it out.\n   \n   ``` ruby\n   MyEngine::Cell.prefixes #=> [\"/var/my_engine/cells/my_engine\"]\n   SongCell.prefixes  #=> [\"app/cells/song\"]\n   ```\n3. When inheriting, we simply inherit `::prefixes` from the parent cell, the way we do it now.\n   \n   ``` ruby\n   HitCell < MyEngine::Cell\n   HitCell.prefixes #=> [\"app/cells/hit\", \"/var/my_engine/cells/my_engine\"]\n   ```\n4. If you're not happy with that, you can push more onto `::prefixes`\n   \n   ``` ruby\n   class MegaHitCell < Cell::ViewModel\n     def self.prefixes\n       super + SongCell.prefixes\n     end\n   end\n   \n   MegaHitCell.prefixes #=> [\"app/cells/hit\", \"app/cells/song\"]\n   ```\n\nThis greatly reduces the lookup algorithm complexity and makes it simply to understand where views come from, no need to explain \"it first looks through base paths, then the prefixes, then the other base path, ...\" and so on. Cool?\n. @jamis Thanks for your invalueable help, man! I decided to implement the above solution and did not merge your PR. Anyway, feel free to PR again, I will merge it! :heart: :beers: \n. I started documenting here: http://trailblazerb.org/gems/cells/render.html\n. @bmcdaniel11 Some feedback here would be amazing: https://github.com/apotonick/cells/issues/280\n. Aaand: what Cells version?\n. Fixed in 0.3.0 (only Cells 4, though).\n\nAre you considering upgrading Cells, or should I backport the feature?\n. Not a priority, though, since it's just a warning, right? @incorvia It's simple, you can try. Here's how it's done in Cells 4: https://github.com/apotonick/rspec-cells/blob/master/lib/rspec/cells/example_group.rb#L21\n. You need to use the `#concept` helper instead of `#cell`. This is because you use the new, cooler, better, beautifuler and sexier concept (Trailblazer) naming style `Comment::Cell`.\n. Cool idea - I don't think you have to configure that. You have to override the `#t` method _in_ the cell class and then add this path.\n\n``` ruby\nclass Cell::ViewModel < ..\n  def t(name)\n    super \"en.bla.#{name}\"\n  end\nend\n```\n\nI am not sure where to get all the information you need for this string (e.g. `en`) since I haven't used i18n so far but if you PR something we can merge this into Cells 4! :beers: \n. It's really simple: every instance method in a cell class is available as a \"helper\" in the view. That means you can simply put it into `Cell::ViewModel` as I showed you earlier.\n\nThis is cool! I like it! Can you PR? Just put that code into `lib/cell/i18n.rb` into a module `Cell::I18N`. Thanks!!!\n. First of all, you don't need to use `helper_method` since all instance methods of the view model are \"helpers\" in the view.\n\nSecond, I can't help that the Rails helpers and all gems that add helpers are extremely hard to use in a non-AV-conform environment. Helpers automatically assume that all the other helpers are magically there.\n\nThis is not my fault, but a Rails design flaw. I am hoping that Cells 4 will gently force Rails core and other helper authors to properly include dependent modules into their helpers. I unfortunately can't fix every possible helper in the Rails eco-system myself. Sorry for this inconvenience. Maybe you can open an issue on the respective repository and fix it there? :stuck_out_tongue_winking_eye: \n. @seuros This is because we removed many tests when I merged the gigantic PR. We _have_ to re-add those tests before we release Cells 4. \n. This is fixed in cells-erb 0.0.2.\n. This is fixed in cells-erb 0.0.2. Please use cells-erb/master until @seuros gives me push rights.\n. That's a cells \"issue\". In Cells 4, we do not escape HTML (only defined properties, and I still have to implement this).\n\nCan you link me to the react-rails helper implementation? It sounds as if that helper doesn't call manual escaping properly.\n. It looks like `content_tag` does the escaping normally. This is weird?!\n. This should be fixed in master, you have to make sure you're using cells-erb or whatever format you desire.\n. Yeah, what about a cells-slim update? :wink: \n\nWe don't support `::helper_method` anymore, as we don't need it: every instance method is a helper in the view.\n\nYou can do\n\n``` ruby\nclass ApplicationCell < ..\n  def self.helper_method(*)\n  end\n```\n\nand please open a ticket on Devise and tell them to restructure their helpers, so `::helper_method` doesn't need to be called.\n. Wait a second, `{}.to_json` never produces escaped content - how can that work in the react helper, then?\n\nI guess the problem is in `content_tag` https://github.com/reactjs/react-rails/blob/master/lib/react/rails/view_helper.rb#L25 as I said earlier. If you change that line to the following, it might work:\n\n``` ruby\ncontent_tag(html_tag, '', html_options, true, &block)\n```\n\nThe 4th argument `true` will re-enable escaping. Can you try if that works?\n. Can you create a minimal Rails app where I can see this bug in action? I will invest a few minutes and try to find what's the problem, and with an example app this would be a breeze.\n\nThanks! :beers: \n. Man, your repository is excellent, thanks so much, this helped a lot! :heart: \n\nHere's how to fix it manually:\n\n``` ruby\nclass YourReactCell < Cell::ViewModel\n  def tag_options(options, escape = true)\n    super(options, true)\n  end\nend\n```\n\nI am thinking about adding this per default to Cells. This will always escape tag options, which should be OK, shouldn't it?\n\nOne positive thing I have to say about Rails here is that _AT LEAST_ they introduced this `escape` flag as an argument which makes it quite easy to change behaviour. :grin: \n. Hmm, I am not sure if we should escape per default, TBH. To me this looks like a very specific thing. I don't have enough experience with all those gems and helpers.\n\nShould we escape tag attributes per default? What do you think, @mbajur ?\n. I decided to enable it, it makes sense. Thanks for your help! Upgrade to cells-erb 0.0.6 please.\n. Already released! https://github.com/trailblazer/cells-slim/commit/13c8a4c38a32ee60db31d0c4426b93185eb5f57e\n. Yeah, I wonder the same!\n. Ok - that's because the `I18N` module might be included _after_ you defined your method and thus overwrites your beautiful method! I'll go through this soon!\n. @mbajur Can you add a test for that in a separate `i18n_test.rb` file? You can look up how to write such a test here: https://github.com/apotonick/cells/blob/master/test/url_helper_test.rb#L58\n. Hi guys, sorry for the late reply. I haven't implemented support for engines in Cells 4, yet. But as you can see :wink: it's on our \"TODO\" :wink: list :wink: https://github.com/apotonick/cells/wiki/Cells-4.0\n\nI've been traveling to conferences the last 12 weeks and hoping to catch up soon and push out a nice and fast and clean Cells 4.0.\n. Here's how to fix it from 4.0.0.beta4 onwards: http://trailblazerb.org/gems/cells/render.html#view-paths\n\nI am working on setting the `view_paths` in an engine cell automatically just now, but in the meantime, this will work.\n\n``` ruby\nclass MyEngine::Cell < ..\n  view_paths << \"/path/to/my/engine/app/cells\"\n```\n\nAs noted in the doc, do as follows to find out how the engine cell finds its views.\n\n``` ruby\nputs MyEngine::Cell.prefixes\n```\n\nEverything here depends on your feedback, I am not using cells in engines at the moment and need your help!! :beers: \n. What about the following convention?\n\nIn your railtie, set your cell's view path.\n\n``` ruby\nclass MyEngine < Rails::Engine\n  Cell.view_paths << File.expand_path(\"../app/cells\", __FILE__)\nend\n```\n\nDoes that work? Can we also use `MyEngine.root`? An example app would be great.\n\nI am not planning to integrate that into Cells itself as this implies a lot of hacking with Rails/Engines internals, which is absolutely not how I plan to spend the rest of the day. :wink: \n\nIf you get the chance, please provide some feedback, how you managed to get it working. Much appreciated! :heart: \n. Cool, thanks @alihuber now I can see if I can abstract that. Thanks! :heart: \n\n@bmcdaniel11 You can also append the `view_paths` of the engine cell, when rendering this cell (e.g. `MyEngine::Cell` it first looks in `app/cells` for overridden views, then in the canonical engine dir.\n\nYou have to make sure you use `cells-4.0.0.beta4` or cells/master, @bmcdaniel11, did you do that? Thanks for your help.\n. It works great, thanks @alihuber :beer:   and @bmcdaniel11.\n\n@alihuber I had to add the `cells-erb` gem to the app's `Gemfile` in order to make the engine cell rendering in the application work.\n\nI've documented cells in engines here: http://trailblazerb.org/gems/cells/engine.html\n. BTW, I'm thinking about a `::namespace` method in line with what we got in Reform and Trailblazer.\n\n``` ruby\nmodule MyEngine\n  class Song::Cell < Cell::ViewModel\n    namespace MyEngine\n  end\nend \n```\n\nThis will strip the `MyEngine` from the cell's prefix, and basically allow to structure your views like this.\n\n```\nmy_engine/app/concepts/song/views\n```\n. http://trailblazer.to/gems/cells/rails.html#engine-cells\r\n\r\n. Hey, I can't see the exception anymore. What exactly is the problem? I don't think that using `::Product` is a wrong thing to do - namespacing and finding constants is still a problem in Ruby :/\n. This is fixed in the new trailblazer/master initializer: first, the model is loaded, then operation, then cell.\n. `Cell::Rails.render_cell_for(nil, :chat, :single_message, message: ..)`\n\nhttp://www.rubydoc.info/gems/cells/3.6.0/Cell/ClassMethods:render_cell_for\n. Sorry I gave you the wrong information - I probably wasn't drunk enough.\n\n``` ruby\n::Cell::Rails.render_cell_for(name, state, controller, *args, &block)\n```\n\nThat's the correct one. Why ain't you not using Cells 4?\n. Eeeh.. you know that Cells 4 is not Cells 3? Rspec + Unit support for Cells 4 coming!\n. Pretty much, yeah, but there's some API changes, too, and structural changes, and so on. I think I blogged about it, but I recommend the 4 line anyway.\n\nWe're on #trailblazer on Freenode IRC, in case you need support!\n. Thanks man!! But... where do you add the new task to the existing default one?\n. I think we have to make the second rake task \"chdir\" into `test/rails4.2` and run `rake` there. That's basically what I do now.\n. Thanks, I was excepting this to happen at some point :) We use Erbse for ERB in Cells, which uses Tilt, and sprockets use Tilt as well (instead of ActionView, which doesn't make sense at all, but, welcome to Rails). Sprockets now uses our ERB which is not compatible with Rails again. \n. No need to do that @samstickland - I know exactly where the problem lies.\n. I was able to provoke that problem very easily and will fix it in the next 12 hrs. :beers: \n. This is fixed now in cells/master and cells-erb/master.\n\nHowever, be warned that there's a bug in sprockets: I was able to reproduce this error in a VANILLA rails 4.2.1 app with the following `application.js.erb` file.\n\n```\n/*\n * This is a manifest file that'll be compiled into application.css, which will include all the files\n * listed below.\n *\n * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,\n * or any plugin's vendor/assets/stylesheets directory can be referenced here using a relative path.\n *\n * You're free to add application-wide styles to this file and they'll appear at the bottom of the\n * compiled file so the styles you add here take precedence over styles defined in any styles\n * defined in the other CSS/SCSS files in this directory. It is generally better to create a new\n * file per style scope.\n *\n *= require_tree .\n *= require_self\n */\n\n<% capture do %>\n\n<% end %>\n```\n. The way I solved this is very straight-forward: we do not register our templates with Tilt anymore and directly access `Cell::Erb::Template` and so on, so Tilt has no idea about us anymore. Everything breaking in a non-cell is _not_ cell's fault.\n. Hey Jim, good to see you here. I hope you've upgraded to Cells 4. Many things have changed and got simpler.\n\n`TestCase#invoke` is now simply `#cell`: http://trailblazerb.org/gems/cells/testing.html\n\nI will update the README as soon as I get to it haha! Cheers from Oz my friend, and let me know if that works for you! :heart: \n\nPS: How's Lotus going? :laughing: \n. BTW if Capybara is loaded, Cells will automatically wrap the output from `#call` in a matchable object. No need for Nokogiri.\n. @kevinansfield Are you sure you were using the RC1? The delegation is fixed there. If yes, how do you invoke your cell? What helpers are mixed in?\n\nI've added a test to show this works (usually), so closing this until we have a failing test.\n. Thanks Kevin!\n\nWhen you instantiate the cell yourself, you also have to pass in the controller manually, which carries all the url madness.\n. The controller is passed automatically into cells and propagated from there to nested cells.\n\nIt's available as `Cell#parent_controller`. If you want to pass in another controller, do `cell(:comment, comment, parent_controller: controller)`.\n. Isn't that done in the bundling process (not sure, but here it works???)?\n. Aaaah, cool, I didn't know that. I found this iterative lookup annoying but now I learned that you can disable it. Thanks! :beers: \n. Thanks, but that's not a bug, that's because you still have old `Cell::Rails` classes lying around haha! :stuck_out_tongue_closed_eyes: \n. Duplicate in #290, thanks @jhblacklock. :heart:  This is not really \"fix-worthy\" as there is no `Rails` constant anywhere anymore in Cells 4.\n. I like that! :heart: :beers: \n. This is documented here: http://trailblazerb.org/gems/cells/engine.html\n. :wink: \n. Cells 3 or 4?\n. Do you get a feeling now why I hate Rails helpers and don't want to do anything with them anymore?\n\nBTW I know where the problem is, stop wasting your precious time.. :stuck_out_tongue_winking_eye: \n. This is not learning because the way helpers are done and output buffering is done in Rails is _WRONG_. It took me some years to realise that I should better not learn from Rails.\n. Fixed in cells-erb 0.0.5.\n\nThe problem was that the old helper uses `output_buffer` (the method). In cells, this method is only called once per view, so this creates a new output buffer and thus forgets some input (as we're appending to two different output buffers).\n\nIf you want to learn how it's done right, check out how slim does it. No need to fix anything there, as it's really clean. I will soon change Erbse to support these operations on the ERB level.\n\nIn case you're interested in all this and want to help - just let me know, I can give you an introduction and then maybe you want to play with Erbse a bit? :cake: \n. https://github.com/apotonick/cells/#installation :wink: \n. Thanks @EppO for pointing out the naming inconsistency. I will use the view model naming style throughout the README, the concept style and the benefits are well documented in the Trailblazer book in the Cells chapter. :+1: \n. Thanks to you for spotting the README inconsistency! Did you see your mention in the commit? :wink: The Installation section is kinda hidden, maybe we should move it up?\n. I find that the introduction reads very well and a long Installation section interrupts the flow, though?\n. Good idea about the resource links, even though, I would like people to buy the book. :wink: \n\nYeah, true, it's a hard thing to figure out. 50% expect your README to be an awesome introduction with code samples, and the other 50% wants it to be  full-blown documentation covering the entire API, and the other 50% expect both of it plus a complete wiki.\n\nI'm one of the first group: when I browse gems, I check the README and if I can't find instant code snippets to understand (I mostly don't even really read text) I \"lose interest\" and might move on.\n\nMaybe be can leave the generator section where it was and move just Installation further up?\n. Yeah, I haven't implemented that, yet, as it's extremely coupled to the controller. The cell has to ask the controller for the token and then tell the form builder about it - let me have a look now, that I have \"more time\". :grin: \n. Can you try adding the following to `lib/cell/rails.rb`, line 41?\n\n``` ruby\n    included do\n        extend Uber::Delegates\n        delegates :parent_controller, :session, :params, :request, :config, :env, :url_options\n        # forgery protection. ADD THIS:\n        delegates :parent_controller, :protect_against_forgery?, :form_authenticity_token\n      end\n```\n\nAnd remove the `protect_against_forgery?` method?\n. I don't care about CI anymore. The time you waste setting up Travis doesn't outweigh its benefits since I run tests locally all the time. [correction: the time you waste setting up _any_ CI tool] There's always something wrong and Rails 4.0 doesn't do what it should do, and so on...\n. Let's leave it as it is, it really reads better and it's only _one_ page scroll down hahahahha! Thanks anyway and keep up your good work! :beers: \n. It looks like `Cell::Erb` is not included in the cells that fail, since it uses `capture` from Rails and not the patched one from `Cell::Erb`.\n\nIn your specs, can you do `Cell::Concept < Cell::Erb`? The result has to be `true`, otherwise your initialization hasn't worked properly. You can try using `rspec-cells`.\n. Yes! In Rails, this is done automatically. Are you not working in a Rails environment? :heart: \n\nCome join us on #trailblazer on IRC (Freenode), we can solve it there faster.\n. I hate Rails helpers. It looks like it is done automatically (otherwise the `Cell::Concept < Cell::Erb` would be false, but maybe one of the helpers you include overrides `capture`? I hate Rails helpers. Can I see the failing cell code? I hate Rails helpers.\n. Does this cell work in a view?\n\nPlease, join me on IRC, I can help you much quicker there.\n. If you find the correct position in the Railtie initializer chain, I'm happy to merge it in `cells-rails`. :+1: . As discussed on IRC:\n1. You have a model `::Partner`.\n2. `Administration::PartnersController`.\n3. You have a directory `app/cells/administration/partner`.\n\nThis is enough to crash the Rails autoloader?\n. Twin is not supported in Cells 4 (yet) - why do you have that included?\n. Hm, when you copy it, it should work. I will re-add twin support when I release Disposable.\n. It works without twin, here's the proof: https://github.com/apotonick/cells/blob/master/test/public_test.rb#L35 :stuck_out_tongue_winking_eye: \n\nCan you paste some code, I'm curious to know how you use twins?\n. Yeah, that's exactly how it's meant to work. :grimacing:  You should use a representer to compile your `to_hash` hash with Representable. You can infer a representer from a twin.\n. But it only breaks with `Twin` included, right?\n. I know, I know, I have to rewrite `Twin` for cells anyway.\n. This will dramatically slow down rendering collections! Hash operations are expensive!\n. :kiss: \n. Almost correct! :grin: It's documented here: http://trailblazerb.org/gems/cells/engine.html#view-paths Doesn't that work for you???\n. The problem is here: https://github.com/apotonick/cells/blob/master/lib/cell/concept.rb#L13\n\nHaha! :laughing: It removes the `Cell` from your namespace, leaving the single `s` which makes it look pluralized haha.\n. Please, can you make the prefix regex catch the /::Cell$/ instead? Test goes here: https://github.com/apotonick/cells/blob/master/test/concept_test.rb#L41\n. I thought you wanted to do that???\n. This is fixed in 4.1.0 with https://github.com/trailblazer/cells-rails.\n. Not sure I understand the problem? `ViewModel#call` will `html_safe` the content in Rails, calling the method manually won't. Is that poorly documented?\n. This is documented here: https://github.com/apotonick/cells#invocation-styles\n\nCalling the method manually is not official API and up to you. This is also discussed at the end of chapter 8 in the Trailblazer book, where you can call states manually and avoid Capybara wrapping.\n. Ah ok, thanks,  now I understand your pain.\n\nI can't say it for sure, but if `Cell::RailsExtensions::ViewModel` did not get included properly, many other things wouldn't work, either. Also, you said \"when using `.call` it works. That also implies the module got mixed in and `html_safe`s the return value of `call`.\n\nCan you confirm that? When you do `cell(..).call` it works in both environments?\n. That's right, in views, `cell(..)` will result in `cell(..).to_s` will result in `cell(..).(:show)` will result in a html_safe string.\n. ..which is exactly what happens: https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L47\n\nI just messages you on IRC to please join Trailblazer gitter channel.\n. I have zero clue what might be wrong, as it works for me in many projects. Do you have a minimal cell that can provoke this error? Or does it happen with nested cells?\n. So, should we simply document that in `cells-slim`? I have no clue how to fix that and zero time to investigate. It must be something with this bloody `html_safe` string marking?\n. Yes, this doesn't make sense to me, but it makes sense in Rails. :thinking: How could we test this?\n\nThis must go to the cells-rails gem, though.\n. If they want them global, we can add that functionality later. E.g. by providing `asset_paths = \"/var/assets\"`.\n\nIn Defaults, that should say\n\n``` ruby\nclass Song::Cell < Cell::Concept\n  # app/concepts/song/views\nend\n```\n\nright?\n. This is documented here:\n\nhttp://trailblazerb.org/gems/cells/testing.html#optional-controller\n\nI will add that to the rspec-cells README, too. Sorry for the \"clumsiness\" of having to call `::controller` but Rails helpers need all kinds of dependencies everywhere so you need to specify them.\n. We don't support `#content_for` (so far) - it completely defeats the purpose of encapsulating your view part. :laughing:\n\nI won't implement a new version of `cells-capture` as I think `content_for` is a horrible idea and can easily be achieved with clean encapsulation:\n1. If you want CSS, JS or other assets to be placed in your global HTML, read this: http://trailblazerb.org/gems/cells/rails.html#asset-pipeline\n2. When in need to render a fragment from your cell somewhere else, just extract that to a separate state. Here's an example.\n\n``` ruby\ncomment_cell = cell(:comment, @comment)\nhtml = comment_cell.() # calls #show\nmore_html = comment_cell.(:more) # calls #more\n```\n\nWould that work for you?\n. Implementing a `cells-content-for` gem/module would actually be quite simple: You override the `#cell` helper and pass in the global AV instance as an option, somehow along this.\n\n``` ruby\ncell(:comment, @comment, action_view: self)\n```\n\nIn the cell, you'd define a delegation to `action_view`.\n\n``` ruby\nclass CommentCell < Cell::ViewModel\n  delegates :action_view, :content_for\n```\n\nThat should do the trick.\n. Wow, I love this \"using the model part\" idea - I never thought of this! It shouldn't be hard to implement. We could simply catch the block and evaluate it in cells context.\n\nMany people use `content_tag` blocks in cell methods to achieve just that.\n\nI had a slightly different idea a few years ago and I was evaluating either Erector or Ambre where you have the templates defined in Ruby, in the cell itself instead of a rather clumsy template snippet. This does not only speed up things but also allows way better overriding semantics, where you can programmatically overwrite parts of your \"view\" in subclasses.\n\n``` ruby\nclass SongCell < Cell::ViewModel\n  view do\n    div do\n      address1\n      address2\n    end\n  end\n```\n\nI remember I loved the Erector gem by @alexch but we never integrated the two projects. Maybe it's time now? :fireworks: \n. :heart: Thanks!\n. This is no longer supported in Cells, because we think that you can also do this with simple method overriding. Soooorry! :beers: \n. Oh, and in case you missed that: Cells 4 doesn't use Rails anymore, including `AbstractController` is not a good idea... :wink: \n. How exactly do you use `cells-filters`? I don't quite understand how this gem could ever be helpful since controller filters do not really fit into view models anymore. A few examples where this helped you would help me to understand and maybe I can suggest you a better Ruby solution?\n\nA `cells-rails` gem is redundant, since the railtie in Cells already includes all stuff Rails that we found helpful. \n. Oh, relax, aggregating data in a cell is totally fine - as long as you don't repeat this code anywhere else.\n\nI still don't get how a filter then helps, though. Do you use things like `before_filter: :setup_models!` ?\n. Hi Ryan, this is bad practise, and documented here: https://github.com/apotonick/cells#rails-helper-api\n\nBasically, we automatically include the default Rails helpers in order to fix some bugs in a Rails environment. This is why `form_for` works, but to make formtastic run, you need to include the required helpers manually. Here's an example: https://github.com/apotonick/cells/blob/master/test/rails4.2/app/cells/formtastic_cell.rb\n\nIf you want to learn more, read the _Cells_ chapter of the Trailblazer book where I speak about this, too.\n\nBTW: Passing objects around in Ruby is never costly, so what you do is clumsy, but should be equally fast. However, in Cells 4, we want to completely stop using ActionView so please don't do it.\n. No problem! Sorry for the inconvenience, but this is really a Rails problem and not Cells' fault. I explain it a bit more here: http://nicksda.apotomo.de/2015/06/cells-4-0-goodbye-rails-hello-ruby/ (_Long Live Rails_ section).\n. Thanks, man, but this is the wrong project. You need to send this PR to formtastic because they do not correctly include all helpers - please fix it there, too!\n. Exactly, they have to include the Rails helpers where they actually use them. They won't be included twice, Ruby takes care of that, so, go for it!!!!\n. Uhm, I don't think so. That's on purpose because a cell usually has a handful of public rendering methods, only, so it's safe to declare it \"globally\" on the class level. If you don't want that, pass the layout when rendering the views that actually need a layout, e.g. `render layout: :default`.\n\nI tried to keep layout logic in Cells as simple as possible. If you look into the Rails code and how they provide 25-30 different ways to compute a layout, you will understand my motivations.\n\nCan you explain your use case a bit more detailed?\n. One assumption you might have missed is that one cell class only has one public method (`show`), in your example, it looks as if you expose several of those. This is outdated 3.x behavior and not encouraged any more.\n. We had the same problem [here](https://github.com/apotonick/cells/issues/277). Please try using `#tag_options` which should escape the options.\n\nI'd suggest you change your view.\n\n``` slim\n.row data-viewmodel=data_attr\n```\n\nThen, define the `#data_attr` method on your cell.\n\n``` ruby\nclass SongCell < Cell::ViewModel\n  # ..\n\n  def data_attr\n    html_escape @feature.view_model.to_json\n  end\n```\n\nThis also makes your view logic-less. :smile: \n. Ah, ok, cool. Doesn't `#html_escape` do just that? And: did you move that code to an instance method of your cell? If not, please do it. :beers: \n. So, is the `#html_escape` method available on the cell or not? Because we can add it, as it is extremely handy?\n. Because `#tag_options` is not used in your code! :grimacing: \n. I wonder what is not _DRY_ about your first example? I can't see redudance there.\n\nIt's best to have two cells for this kind of setup. We discuss a very similar case on pg. 79-81 in the Trailblazer book.\n. There's a `Thing::Cell::Grid` here: https://github.com/apotonick/gemgem-trbrb/blob/chapter-10/app/concepts/thing/cell.rb#L21\n\nAnd that grid simply renders the `Thing::Cell` (which represents one grid item). Does that help, or you still confused (:beer: helps)?\n. Wow, that's a lot of helpers you need for a little cell...!\n\nYou need to `require \"cell/partial\"`.\n. Ha! The `render partial:` still doesn't know where your partials are. http://trailblazerb.org/gems/cells/render.html#partials\n\nWhy are you using a global partial in the first place, I wonder?\n. I re-checked and this is also documented directly in the README, in the undocumented section, haha: https://github.com/apotonick/cells#rendering-global-partials Protip: `Ctrl+F` on GH README page can save you time.\n. (and me). :beers: \n. @ryan2johnson9 Can you join the https://gitter.im/trailblazer/chat channel for a minute so we can resolve this?\n. The `ViewModel::view_paths` directive is meant as the path to where all the cells reside (similar to `AC::view_paths`). The actual paths to the cell's views is available via `ViewModel#prefixes`, you need to override that to point to another directory (but do _you_ really need this?).\n\n`render partial: ..`'s documentation is reflecting the actual behavior, see here: https://github.com/apotonick/cells/blob/master/test/partial_test.rb#L12 The difference is that your partial is _not_ in a global directory.\n\nI am probably gonna move the partial code to a separate gem soon (`cells-partial` or something), just to further discriminate this. I find it wrong to render partials from other stacks in a cell and want to ban this explicitly, otherwise people will keep hacking stuff instead of fixing the actual gem. Also, I then don't have to support this madness anymore. :wink: \n\nThe cleanest solution would be to \"fix\" `#render` in your cell, so when subsequent calls to `render` from cocoon are detected, change their API to ours. And the cleanestest would be cocoon using cells in general, but... :stuck_out_tongue_winking_eye: \n. @nathanvda You can't see that, right, that's why I suggested @ryan2johnson9 to patch _his_ `#render` and detect when it's a call from cocoon and when not.\n\nIdeally, Cocoon would use Cells to render its elements in general. I am about to write a new form builder based on Cells, maybe that can be source of inspiration? :wine_glass: \n. Thanks for posting it.\n\nYou don't have to differentiate between case 1. and 2., the cell will do that for you.\n. ARgh, you're right. I personally hate this little piece of magic in my code, especially since it only saves 5 characters:\n\n``` ruby\nrender\n```\n\nvs.\n\n``` ruby\nrender :show\n```\n. But my gems are not Rails, which is why I might remove this in the near future.\n. Sorry, I have no idea what @ryan2johnson9 does in your code, but overriding `#render` is problematic, you should call it with the view name, instead.\n\n``` ruby\nrender :view_you_actually_wanna_render\nrender view: :view_you_actually_wanna_render\n\n```\n\nNot working on any Cocoon stuff, I don't even know what it is?\n. I _like_ that a lot!!! :stuck_out_tongue_winking_eye: \n. Multiple `view_paths` are totally fine, that's why it's an array! :stuck_out_tongue_winking_eye: \n\nI like your change - but what's the problem with `unshift`? Admittedly, I simply added this without thinking too much, so creating a new array is probably cleaner. Anyway, what's the \"unexpected results\"?\n\nThanks! :beers: \n. Ah ok, I get it, because I used `unshift` it _replaces_ the old directory.\n\nAre you trying to render a global partial with that weird Rails naming like `_bla.html.haml` or just reuse views across cells?\n. The manual loading is on purpose, as I want to discriminate the _wrong_ Rails Way. Also, this is not a feature I'm planning to support in the future as people should switch to cells and not use partials anymore.\n\nThanks, man!\n. Cool, thanks so much for your investigations @johnlane, very helpful! :beers: \n\nDoesn't I18N traverse the \"path\" by iteratively removing the last element? In that case, the full namespace path would probably be more precise.\n\nIf `a.b` can't be resolved, `a` is used (as far as I remember that from validations in Reform).\n\n@johnlane Could you write a new test (`test/i18n_test.rb`) so we can refine things in the code?\n. Should we simply add the cell path (e.g. `admin/comment`) and maybe provide `ViewModel::translate_path \"admin\"` if you need to fine tune? That should work just fine?!\n. Hi @phillipoertel - isn't that how it's supposed to be? We don't do autoloading in most TRB gems anymore because it always breaks, this is why people have to manually require files. :beers: \n. Cool, thanks @phillipoertel ! TRB is in more than 200 production apps already and very stable! It's very easy now with the `trailblazer-rails` gem. :beers: \n. The idea is to use those gems from within the operation - not excluding each other. I also love https://github.com/icelab/call_sheet\n. It works like this now:\n\n``` ruby\nrequire \"cell/translation\"\n\nclass Admin::Comment::Cell < Cell::Concept\n  include Cell::Translation\n\n  def show\n    t(\".greeting\")\n  end\nend\n```\n\nThis will lookup the I18N path `admin.comment.greeting`.\n\nNot sure if that's the ideal path, I need some feedback from you power users what makes sense, (e.g. `cell.admin.comment.greeting`).\n. Convention over configuration. It is already configurable via `ViewModel::translation_path`, we should just decide a standard and people will be happy. :dancer: \n. I got it, and I agree! However, I have always avoided `Whatever.config` in favour of overridable methods because then I don't have to implement/test the config hook! :stuck_out_tongue_winking_eye: We should come up with something meaningful, I'm pretty confident that users will simply adopt this. Then, we can save the config variable.\n. Very good point @AndrewSwerlick - that's why I'm asking here for \"best practices\"! :+1: \n\nThe `::translation_path` is the absolute path, so if set to `nil` you will end up without any path. Can you make an example what kind of path would be helpful for you?\n. I agree with @AndrewSwerlick: don't prepend any non-domain tokens. In Trailblazer, though, we are planning to add the prefix `concept.`, which _is_ business-related.\n\nMaybe just release the current state, which is super primitive?\n\nReg. fallbacks @smathy: Too much work for me: I have to write tests, code it, and document it, and then people are not gonna use it anyway. :stuck_out_tongue_winking_eye: I've learned that from Rails in the past decade... they always have this super-magic \"helpful\" code everywhere that's used by like 3% of the framework users but pollutes the code and makes it hard to change architecture. Example: there's about [25 different ways to compute a layout](https://github.com/rails/rails/pull/15050) name in a controller. Do you need that? No.\n. On the other hand, I don't even see why we'd need a `concept.` prefix, now that I think about it \"with your eyes\". _Everything_ in an application is business, which is organised in concepts?!\n. You're not including the `cells` gem! See here: https://github.com/apotonick/cells#installation\n. Concept cells are cells that follow the Trailblazer file and naming layout: https://github.com/apotonick/cells#concept-cells They are basically identical to normal cells but instead of `CommentCell`, they use namespacing, e.g. `Comment::Cell`.\n. Cool @agm1988 that might help me fixing the issue!\n. Thanks @agm1988 for following up on this. Can you please test `cells/master` if it works for you?\n. Your initializer is wrong, it must be\n\n``` ruby\nCell::Concept.class_eval do\n  include ActionView::Helpers::TranslationHelper\nend\n```\n\nand not\n\n``` ruby\nclass Cell::Concept\n  include ActionView::Helpers::TranslationHelper\nend\n```\n. Oh hang on, I still had trouble. I could make it work with\n\n``` ruby\nCell::Concept.class_eval do\n  include ActionView::Helpers::TranslationHelper\n  include Cell::Erb\nend\n```\n\nThanks for the test app, BTW! :heart: \n. I found out the problem. The Cells railtie is run after your initializer and Rails helper modules override our fixes. There's three fixes:\n1. Stop using Rails and lead a happier life.\n2. Make your initializer be run after the Cells railtie (no idea, I thought that was the default anyway).\n3. Introduce `ApplicationCell < Cell::Concept` where you include your additional global helpers.\n. The `class_eval` didn't work for me! :blush: It's because of the loading order of railties and all that, but I had the urge to post it anyway, so it _is_ a solution, but only in an initializer that's run _after_ the cell railtie. Confused enough? :laughing:  \n. Loving that! :heart: \n. This is implemented in 4.1, see https://github.com/apotonick/cells/commit/5638f373eec2771f5c44eca249eef5eef279ea9e\n. I still don't understand how \n\n``` ruby\ndef to_s\n  call.html_safe\nend\n```\n\nwill save you from having to define a `#show` method, because `to_s` will call `call` which will call `show`, so your actual problem is the \"missing\" `show` method.\n\nAs discussed, this is a design decision I made to avoid confusion for new users who will have trouble understanding that they \n1. can actually override the render process (e.g. with `render :another_template`)\n2. can add logic to `#show` (`def show; @bla = Whatever.(); end`)\n3. can extend the rendering (`render(:item) + render + \"hello\"`).\n\nYou can easily add a `show` method to your \"base class\". \n\n``` ruby\nCell::Concept.class_eval do\n  def show; render; end\nend\n```\n\nAlso, the `to_s` method is already aliased to `call`, which, in Rails, will call `show.html_safe`.\n. Wow!!! :heart: Should we add something to make that configurable, what if people don't want this logging? Other than that, great work!\n\nI think it's time for `cells-rails`?\n. We had that fuzzy API in earlier Cells and it was confusing. Aren't you all about strong, non-blurry APIs? :stuck_out_tongue_winking_eye: The API you suggest is indeed very \"railsy\".\n\nAlso, we want to drive things more towards using twins or structs instead of model/hash mixes, where the twin represents your actual domain object (even if that is a view domain-specific thing). This means, the cell will always get one \"model\" only and you don't use `@options` anymore.\n\nBTW, I am all-in for incorporating twins/decorators into the language itself. There's no reason we're still messing around with primitive hashes to simulate domain objects. Ruby could support that out-of-the-box and people would think different about what objects they pass around between layers.\n. Why so complicated?\n\n![screenshot_2016-04-18_21-51-03](https://cloud.githubusercontent.com/assets/10406/14603204/c94332a6-05af-11e6-880a-fbc6f16d9fed.png)\n\nThanks for that, @smathy ! :heart: \n. Many :heart: ! You solved it!\n. Thanks!!!\n\nNot a huge fan of the gitter integration... you get blasted with \"apotonick pushed this, apotonick pushed that\", dunno..\n. I won't touch this because it sucks and works right now. :grimacing: I had it removed for a while and many apps broke. Thanks anyway :kiss: \n. Are you confusing `Cell::ViewModel` and `Cell::Concept`? The documentation clearly distinguishes between them. Note that all documentation is getting moved here http://trailblazer.to/gems/cells/ and to the books, but you're more than welcome to help improving it.\n. And join the Gitter channel if you need help. I will add _Getting Started_ tutorials for every Trailblazer gem in a few weeks but in the meantime, come chat with us.\n. It should be redirected to http://trailblazer.to!!!!!! Thanks!\n. Too expensive! :laughing: \n. Internally merged as discussed! :kissing_heart: \n. Exactly! :smile: It's a pure Rails autoloading issue! Thanks @Tab10id! @sdesbure - jump on the https://gitter.im/trailblazer/chat channel if you need more support. :wink: \n. No no, `app/XXX/toplevel/bla.rb` where the file `bla.rb` is `Toplevel::Bla`. The directory between `app` and `toplevel` could be `dfjzkcxjalsdfjalskdfj1` and it would still work.\n. I am pretty sure you can call `cache` only once, or when multiple times, the last one wins. We could think about making the options dynamic, e.g. `->(options) { expires_in: logic_to_find_out }`.\n. I agree. Let them figure it out themselves! :evil laughter: :grimacing: \n. Oh, ok, where do we override `call`? Which module do you mean?\n. I'm stupid, you're right!\n. If you say that than it must be right because you're always right. :heart_eyes: \n. Hm, but this could leave a dirty controller around for the next test. Use `let`?\n. First of all: Cells is not a library - it's an attitude. :stuck_out_tongue_winking_eye: \n\nIn earlier versions, I did the `let` trick, so you'd have the same instance around within a test case. I'm just a bit anxious about caching something between test cases, I think that's wrong. Any objections?\n. That's why I want to use`let`! If you want, play with it, but it also has to work with `rspec-cells`.\n. So... does that mean that in Minitest unknown instance variables are erased between every test case automatically? If that is the case, this patch would - of course - work. I still would prefer using `let` so we don't have to care about this.\n. Awesome, so you could test it right away? Yeah, I had that `let` code in older versions but something was wrong, but please try again!\n. Good attitude! Have a drink instead!\n. Do you want to PR? :heart_eyes: \n. Is that necessary? I don't think so... the less API the better. We should fix the existing `Escaped` module. Are you keen to do so?\n. Thanks, brother! How are you? :beer: \n. `Builder` already has to be included manually! :tada: \n. Implemented via https://github.com/apotonick/cells/commit/9c4b282d89482f1182145ce41e593808cd58a45f.\n. What about this?\n\n``` ruby\ncell(:post, collection: [..]) { |c| c.(:item) }\n```\n\nI really want to avoid a DSL object.\n. You were right, I was wrong! :heart_eyes: \n. Should we add some test?\n. Good one, thanks, but you should give up smoking!\n. Answer on SO.\n\nYou have to say `::Cell::Concept` not `Cell::Concept`, Ruby will look it up in the wrong namespace otherwise.\n. Maybe because `cells-hamlit` doesn't `require \"cells\"` ?\n. Here, that's what I mean: https://github.com/trailblazer/cells-hamlit/blob/master/lib/cell/hamlit.rb#L1 We don't `require \"cells\"` - we probably should do that in all gems `cells-erb`, and so on. Do you want to do that for all four gems? :heart: \n. Yeah, I agree with you that we should require cells as a dependency, and if you want, you can PR that on all four gems (unless it's already done in the particular gem). It would be of great help for us! :heart: \n. Is it possible to catch the first 10 lines of that exception?\n. This is fixed in cells-rails 0.0.6. Thanks @dan-palmer and @mrship for helping!!! :beers: \n. Does this PR need https://github.com/apotonick/cells/pull/279 ? Wondering because you're using `super` in `def t`, and I can't find out where `#t` comes from.\n\nThis should all go to `cells-rails`, I don't want any Rails-specific code in Cells anymore. Also, shouldn't we test that with normal cells and concept cells?\n\nThanks!!!\n. Haha, it doesn't exist, yet, we have to create it!\n. https://github.com/trailblazer/cells-rails :heart: \n. Yeah, this would go to `cells-rails`. :grimacing: \n. Is that a Cucumber test that only tests a cell in isolation, or retrieves the page via the controller, e.g. `GET /comments`?\n. @thedanielhanke Are you very very very sure that this is the case? This would mean that [the override in `call`](https://github.com/trailblazer/cells-rails/blob/master/lib/cell/rails.rb#L54) works, but the `ViewModel#to_s` method is not invoked.\n\nCan anyone override the `to_s` method and raise an exception to see if it is called or not?\n. I can see your pain here, @hazah, the way we force users to include their helpers manually is ... awkward. It's a result of Rails' helper system, I was hoping this will put pressure on the core team to revisit this ugly part of Rails.\n\nWe could make your work part of `cells-rails`, as an optional feature (as @timoschilling suggested). Anyway, I still don't understand the `Collection` code - how's that related to the helpers? Thanks for your work! :beers: \n. @hazah I added the repo here: https://github.com/trailblazer/cells-rails\n\nAs per the collections, I'm pretty sure @timoschilling had a PR here... Timo, bring it on.\n. I read your repo @hazah but I'm struggling to see the difference to Cells? The naming (to me) is completely irrelevant, I don't even know what the official meaning for _view model_ is haha. Is it only the wording in Cells that made you create this?\n. Fixed in 4.0.5, with an ugly hack, and awesome again in 4.1.\n. Please update `kaminari-cells` to 0.0.4.\n. What about this?\n\n``` ruby\nrender :layout, locals: { content: render(:content_view) }\n```\n\nThis will do the trick and avoid any problems about buffers and execution contexts. It's incredibly hard for me to find a solution for the `yield` approach in views which is essentially unnecessary as you can pass layout content as a local, or am I wrong here?\n. I still don't understand why the example I posted earlier wouldn't work? You could override `#render` in your cells and add the syntactical block sugar, but the mechanics are already there via the `:locals` option? \n\nInstead of `yield` in your layout, you'd do `= content` - isn't that exactly what you want???\n. For Cells 5, we are simplifying Cells core even more and really rip out anything that's not 99% useful. Passing a block to `render` is really really just a syntactical sugar that can be implemented easily with `:locals`.\n\nBTW, I added some cool functionality in regards to layouts in Cells 4.1: You can now instruct a cell to use a second \"layout\" cell to render a container (e.g. the page layout). Would that help you?\n\nThanks for thinking about this, @blelump, I will have another thought if we should provide this feature.\n. Very very good point, @blelump about the `#render_to_string`. Let me think about this real quick.\n. Maybe the `External` module shouldn't override `render_to_string` but `show`, as a convention?\n. Yeah, it's the only way to hook into the \"global\" render.\n. If you want, @blelump, you can test the above commit. It works great for me!\n. Hey Ben!!! Good to see you here!\n\nThat's correct, the `#prefixes` method is designed to do that. We played with other ideas but this is pretty straight-forward and simple. \n\nLet me know if you need more help!\n. Hell no, that's a global variable, but that's your problem haha! You could also inject the custom path as an option and then use the `:prefixes` option when rendering: https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L167\n\nDoes that help?\n. You should definitely go the functional-explicit way and pass those options into the cell, you could override the `cell` helper for that and do it there. https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L5\n\nWhat you do right now is \"less clumsy\" but depends on global state, very hard to test, very hard to maintain, keep the explicit \"pass customization as arguments\" in mind. :stuck_out_tongue_winking_eye: \n. Please don't include all helpers if you don't have to. I could probably point you to where's the problem if I could see the first 10 lines for the stack trace. It's one of the Rails helpers in you `show` view, definitely.\n. Only include the ones you need!\n. I've changed that in Cells 4.1 (and upcoming 5.0). The main point is you shouldn't mix naming styles, and in that sense, `Concept::cell` will alias to `concept` which will _now_ resolve a concept cell, and not an old-style cell anymore.\n\nThanks for reporting!\n. Similar to https://github.com/apotonick/cells/issues/305, I guess.\n. It would be interesting to see if that only happens in Rails, or if Slim and Cells also muck around in an isolated environment.\n. How did you solve it, I wonder?\n. But that should be done automatically in `rails.rb`! https://github.com/apotonick/cells/blob/84cce1c2c62dc690190f31cb36504fda41287272/lib/cell/rails.rb#L54 :question: \n. You might have to override https://github.com/trailblazer/cells-haml/blob/master/lib/cell/haml.rb#L5 and make the `:suffix` option configurable.\n\nAnyway, that won't work as the cell can only render using the `Haml` module. The \"new\" design in Cells is not made for different template formats in one cell class.\n. https://github.com/trailblazer/trailblazer-cells is gonna be the preferred, canonical way. I love it.\n. In Cells 5, `cell` and `concept` will be identical.\n. In Cells 5, it'll be gone! In 4.1, the old-school `RailsWayCell` style is still supported, but I hate it a lot! :laughing: :rocket: \n. Make sure to only use `Trailblazer::Cell`, it's the API of the upcoming Cells 5 that drops all the former versions.\n. In 4.1, this is implemented: https://github.com/apotonick/cells/blob/4d39f994e6dd288367e75d30cec2d30ac7e1aec6/test/public_test.rb#L70\n\nIs that cool?\n. The `html_safe` shouldn't be necessary since that's done via `cells-rails` automatically. Other than that, what API would you like to have?\n. We actually thought of a \"collection context object\". We could totally do that, that's not really magic.\n. Simply do `cell(..., content: cell(...))` and use `options[:content]` in the first cell.\n. No, of course not. Cells doesn't use Rails.\n\nWhat exactly do you need? Note that you can simply pass the constant directly in 4.1.  https://github.com/apotonick/cells/blob/master/CHANGES.md#410\n\n``` ruby\ncell(Whatever::CellYou::Want, ...)\n```\n\nHere's where the \"inflection\" is invoked: https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L57\n. The first point here: https://github.com/apotonick/cells/blob/master/CHANGES.md#api-fixchanges\n. @TrevorHinesley Sorry - did you add the `cells-rails` gem?\n. https://github.com/apotonick/cells/blob/master/CHANGES.md#410\nhttp://nicksda.apotomo.de/2016/05/cells-4-1-block-support-better-collections-external-layouts/\n. :grin: \n. Please use `gem \"cells-rails\"` as noted here: https://github.com/apotonick/cells/blob/master/CHANGES.md#410 :giggle:\n. I like both! @shvetsovdm You could also override `#inspect` in `cells-rails` and add the `parent_controller` code there, since this is a pure Rails-specific feature, only!\n. I think it's a good idea to have the `inspect` as a framework-agnostic concept (please move to `cell/inspect.rb`), because in other environments such as Roda or Hanami, you might want to \"blacklist\" unsolicited objects, too?\n. Yes, a separate file `cell/inspect.rb` and in a separate module, then include that module in `ViewModel`, that should do the trick. Goal is to make your code easily removable (in a good way).\n. Ah yeah, that's because the yielding doesn't work with template blocks, only pure \"Ruby\". It's a problem from the template engines themselves where yielding a block in a different object instance will still write to the original output buffer.\n\nThe solution is to implement changing the output buffer in the template engine itself, e.g. via  Erbse.\n. I can only reply to 2.) and I think it looks totally fine to me. The point of Cells is to get away from ugly view fragment caching by modelling your view as an object (with multiple states, if you want that).\n\nOnly `call` with rails-cells is `html_safe`ed, render really only returns the string. \n. Bring it on, sounds like a good feature!\n. Yeah, but we have a better internal API where you can find the respective state template and hash it, on the class level. No problem!\n\nI'm here if you need help - maybe join Gitter and we chat there at some point.\n. https://gitter.im/trailblazer/chat\n. Hi @crododile, this is a nice idea but unfortunately slowing down rendering immensely. Besides that, checking object types is something I avoid everywhere I can, just because I don't want to limit people's use of my libraries. The overuse of `is_a?` is something that's always bitten me in Rails, it's not a good practice to do so.\n\nInstead, I'll wait until Ruby gets static typing (which will be in about 10 yrs, hahaha). Does that make sense?\n\nThanks anyway, and good to hear you like it!\n. Thanks @crododile! It's nice to have someone take time to look into this! Can we redirect your effort to something else, though (and there is plenty of things to do)? It's simply not TRB-style to check arguments for types.\n\nIf we added that in Cells, we would have to add it everywhere else, and I don't think it's our job to do that.\n\nIt's the price we pay for a dynamic, loosely typed language, and I personally would prefer static types exactly for the reason you mention, but Ruby needs a lot of discipline or a lot of guard code which I do not second for the reasons above.\n. What argument string do you pass into the resolver?\n. Can you add a failing test to cover that case in https://github.com/apotonick/cells/blob/master/test/public_test.rb ? :heart: \n. Passing blocks from views doesn't really work because of the way the horrible output buffer is implemented. I'd use nested cells instead of this.\n\nWe will work on a new technique to allow this kind of code, but it will take a while. Sorry!\n. What happens when you call `::Rails::env` - this will work, that's pure Ruby and no Cells involved.\n. Of course, because this is wrong! :stuck_out_tongue_winking_eye: \n\n`cell(:promotion_rule).(:selector)` will return a Capybara-assertable string.\n`cell(:promotion_rule)` returns the cell instance. That's what you want.\n. Yes, can you move that to `cells-rails`, please? And maybe a Rails version check and no `respond_to?`. Awesome, thanks! :beers: \n. @dan-palmer Thanks, I merged your fix and then moved it over to `cells-rails`.\n. What if other cells would simply write to the `context` object?\n. I thought again about this: why don't we simply provide the content cell instance in the `:context` object? That would save the new argument and utilize what's already there.\n\n``` ruby\ncontext[:content_cell] # set per default\n```\n\nWhat do you think, will that do the trick?\n. This is tested and fixed.. Latest Cells!. I don't understand that.. the context is passed into collections, there's tests here: https://github.com/apotonick/cells/blob/master/test/context_test.rb#L18\n\nCould you provide a test that fails for your fix?\n. Hahaha thanks @toastercup I'm having a look today!\n. Just giving you a heads-up: we are planning to introduce a new collection API with a dedicated collection cell that you can override, etc. That is no excuse, though, why I haven't merged and fine-tuned this PR, though :blush:. Though.\n. It's actually a bug in this gem, so you're doing right in posting that here. It shouldn't merge the options hash that way!\n. This is the wrong repository, buddy! :grimacing: \n. In Cells, the concept of \"partials\" doesn't exist anymore, everything is just a view. A cell always has at least one of them. If you want to share views across cells, you can use view inheritance, change the `prefixes` or simply encapsulate the shared ones into a cell itself and than call it from the other two.\n\nMakes sense? https://gitter.im/trailblazer/chat\n. I might pick up this issue for our new Trailblazer [cookbook](http://pro.trailblazer.to). Thanks! :heart: \n. Pass the `spree` instance (whatever that is) into the cell.\n\n``` ruby\ncell(:comment, @comment, spree: spree)\n```\n\nand use it via `options` in the cell! :wink: \n. That's a pure Ruby problem and not related to Cells. I can't help you with \"it doesn't work\", I need more specific stack traces.\n. Enlighten us, what was it? :sunrise: :beers: :laughing: \n. Hi! Class-level layouts will be removed in Cells 5 in favor of the much more flexible runtime option, see the `:layout` option here: http://trailblazer.to/gems/cells/getting-started.html#putting-things-together\n. You don't pass the controller into the call. Please use the `cell` helper as documented here: http://trailblazer.to/gems/cells/api.html#instantiation-helper This helper will inject the controller for you and then `url_for` and friends work.\n\nI'm not sure I understand the stacktrace problem, could you paste your exception (or maybe the first 10 lines)?\n. It's simple, you have to find the helper module that defines this method and include it in the cell.\n\nPlease also update to 4.1.\n. @gaggle The \"upgrade\" to 4.1 should be seamless, you only need to bump up `cells` to 4.1 and `gem \"cells-rails\"`. What exception are you facing?\n\nI really encourage you to stay up-to-date! Jump on our Gitter channel for quick support. https://gitter.im/trailblazer/chat\n. It should work with 3.2 - I actually don't know about the Tilt compat, but you could try setting the cells tilt dependency to 1.1, this should still work.\n. @gaggle Can you show me one of those \"missing constant\" exceptions and the way you invoke the `cell` helper?\n. Good decision. :wink: . Currently, the context is \"global\".\n. And that changes fixes it? \ud83e\udd14 Why?\n. Yeah right, in Cells 5, there will only be constants, not magic `constant_for` anymore, so the `cell(Constant, ..)` is the way to go and how Rails resolves constants is not our problem anymore!\n. @jarosluv Yes, Cells 5 will be really straight-forward and zero magic.\n\nDon't get me wrong, if I did know your patch fixes this problem, I'd merge, but @samstickland has reported the opposite, so dropping all magic entirely is probably best. Thanks anyway, great to see your dedication!\n. That's brilliant! But no test? :sob: \n. @JelF Thanks, into layout test, please. @timoschilling what do you think about this?\n. :hand: <-- :highfive:\n. http://trailblazer.to/gems/cells/api.html#yield\n\nThe `cell` helper doesn't pass your block on.\n. Actually, it's not the `cell` \"helper\" but `::call` that doesn't pass on the block: https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L45\n\nI can't remember exactly but there was some problem...?!?!?!\n. The problem is the way ERB is implemented for Rails views: it writes to a stupid instance variable and then Rails changes this variable (aka output buffer) globally when capturing - it's a horrible hack that \"makes it work\". \r\n\r\nThe solution is to use our ERBse gem and Cells, only, because there is no global `capture` state. I'm sorry but I can't easily fix it and won't waste more time on improving Rails, please use Cells for your views and everything will work as expected. :beers: . Closing this as we can't do anything about the Haml releases. I recommend using Slim.. Yeah! In Cells 5, there is only the `Trailblazer::Cell` style, and it'll *finally* be called \"cell\", again.. Actually, we should mark that the constant way is the new default, @georgemillo!!!. I think they will be merged? Not sure about the inheritance hierarchy, though.\r\n\r\nThere's no point in dragging around 3 different styles forever :blush: (my bad!).. Actually @georgemillo it's probably a good time to start talking about Cells 5? We should reactivate @timoschilling for this.. Agreeing with @Startouf - in builder, I'm also OK with a `case` statement, it looks better. . A test to illustrate the problem would be great! :heart: . Let me think about it! Can you show me an example Rspec test, please? :beers: . Please use the new constant API: `cell(Advisor::Offer, ...)`. This is a Ruby-problem and not related to Cells.. You simply pass the cell constant to `cell`, I don't know your app, so `Advisor::Offer` might be wrong, I don't even know if you use Trailblazer::Cell or `Cell::ViewModel`, does `cell Advisor::OfferCell` maybe do the trick?. You are misunderstanding the API :wink: Whatever your cell *class* name is, e.g. `Advisor::OfferIndexWhateverCell`, you have to pass that class into `cell`.\r\n\r\n```ruby\r\ncell(Advisor::OfferIndexWhateverCell, advisor_model)\r\n```\r\n\r\nCells doesn't know or care about your ActiveRecord setup, that's why you pass the cell class and the model instance. Ok?. The gem you use uses Rails' `render` API, but Cells has its own API. It calls the wrong `render`. Solution is to rewrite table-for to use Cells.. Yepp, the newer versions of cells-rails do not support several helpers of Rails anymore that use global state buffering. We're sorry for the inconvenience but those few \"helpers\" would dramatically increase our code complexity. Maybe it's time to write our own `link_to` helper that's done properly, and not a disgusting hack?. The problem is Reform 2.2.3, and not Cells.\n\nOn Mon, Jan 30, 2017 at 3:53 AM, wintersolutions <notifications@github.com>\nwrote:\n\n> I updated cells from 4.1.5 to version 4.1.6. When I run my specs now I get\n> the error Uninitialized constant Uber::Options (NameError). The full\n> stacktrace (anonymized) is found below.\n>\n> Currently my workaround is to not update cells.\n>\n> *Note*: This issue was filed under trailblazer/trailblazer#175\n> <https://github.com/trailblazer/trailblazer/issues/175> first until I\n> found out that cells is the culprit here.\n>\n> Relevant gems and their versions:\n>\n>    - trailblazer 2.0.3\n>    - bundler 1.13.6\n>    - cells-rails 0.0.7\n>    - cells 4.1.6\n>    - cells-hamlit 0.2.0\n>    - trailblazer-cells 0.0.3\n>    - trailblazer-loader 0.1.0\n>    - trailblazer-operation 0.0.12\n>    - trailblazer-rails 1.0.2\n>    - uber 0.1.0\n>\n> /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-2.2.3/lib/reform/form/populator.rb:12:in `initialize': uninitialized constant Uber::Options (NameError)\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-2.2.3/lib/reform/form.rb:25:in `new'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-2.2.3/lib/reform/form.rb:25:in `property'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-rails-0.1.7/lib/reform/form/active_model.rb:30:in `property'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-rails-0.1.7/lib/reform/form/active_model/form_builder_methods.rb:15:in `property'\n> \tfrom /home/foo_user/projects/foo_project/app/concepts/base_contract.rb:2:in `<class:BaseContract>'\n> \tfrom /home/foo_user/projects/foo_project/app/concepts/base_contract.rb:1:in `<top (required)>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/dependencies/interlock.rb:12:in `block in loading'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/concurrency/share_lock.rb:150:in `exclusive'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/dependencies/interlock.rb:11:in `loading'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-rails-1.0.2/lib/trailblazer/rails/railtie.rb:19:in `block in load_for'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-loader-0.1.0/lib/trailblazer/loader.rb:75:in `block in load_files'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-loader-0.1.0/lib/trailblazer/loader.rb:75:in `each'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-loader-0.1.0/lib/trailblazer/loader.rb:75:in `load_files'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-loader-0.1.0/lib/trailblazer/loader.rb:38:in `call'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-rails-1.0.2/lib/trailblazer/rails/railtie.rb:19:in `load_for'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-rails-1.0.2/lib/trailblazer/rails/railtie.rb:11:in `load_concepts'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-rails-1.0.2/lib/trailblazer/rails/railtie.rb:31:in `block (2 levels) in <class:Railtie>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:396:in `instance_exec'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:396:in `block in make_lambda'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:169:in `block (2 levels) in halting'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:547:in `block (2 levels) in default_terminator'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:546:in `catch'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:546:in `block in default_terminator'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:170:in `block in halting'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:454:in `block in call'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:454:in `each'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:454:in `call'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:101:in `__run_callbacks__'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:750:in `_run_prepare_callbacks'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:90:in `run_callbacks'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/reloader.rb:87:in `prepare!'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/application/finisher.rb:53:in `block in <module:Finisher>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/initializable.rb:30:in `instance_exec'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/initializable.rb:30:in `run'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/initializable.rb:55:in `block in run_initializers'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:228:in `block in tsort_each'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:350:in `block (2 levels) in each_strongly_connected_component'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:431:in `each_strongly_connected_component_from'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:349:in `block in each_strongly_connected_component'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:347:in `each'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:347:in `call'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:347:in `each_strongly_connected_component'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:226:in `tsort_each'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:205:in `tsort_each'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/initializable.rb:54:in `run_initializers'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/application.rb:352:in `initialize!'\n> \tfrom /home/foo_user/projects/foo_project/config/environment.rb:5:in `<top (required)>'\n> \tfrom /home/foo_user/projects/foo_project/spec/rails_helper.rb:6:in `require'\n> \tfrom /home/foo_user/projects/foo_project/spec/rails_helper.rb:6:in `<top (required)>'\n> \tfrom /home/foo_user/projects/foo_project/spec/concepts/base_operation_spec.rb:1:in `require'\n> \tfrom /home/foo_user/projects/foo_project/spec/concepts/base_operation_spec.rb:1:in `<top (required)>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1435:in `load'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1435:in `block in load_spec_files'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1433:in `each'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1433:in `load_spec_files'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:100:in `setup'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:86:in `run'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:71:in `run'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:45:in `invoke'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/exe/rspec:4:in `<top (required)>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/bin/rspec:22:in `load'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/bin/rspec:22:in `<main>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/bin/ruby_executable_hooks:15:in `eval'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/bin/ruby_executable_hooks:15:in `<main>'\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/trailblazer/cells/issues/445>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAAopgfw6AKIohX_qShWcR2uTw8rsADMks5rXMQagaJpZM4Lw1qZ>\n> .\n>\n. You can now upgrade to Reform 2.2.4, which doesn't use `uber` anymore.. Hi El, you need to include the respective cell format module into the cells.\r\n\r\n```ruby\r\nclass Hello < Cell::ViewModel\r\n  include Cell::Haml\r\n```\r\n\r\nTwo things: please use `trailblazer-cells` wherever you can to stay forward compatible (only [a few things in the behavior](http://trailblazer.to/gems/cells/trailblazer.html) have changed) and avoid Haml wherever you can, it's dead, use Slim.. ```\r\ncells$ gem push cells-4.1.7.gem \r\nPushing gem to https://rubygems.org...\r\nSuccessfully registered gem: cells (4.1.7)\r\n```. Yes, the problem is, that with this bump we will break other people's tests because they might not have a strict ERBse version set and do test their cells using `must_equal`. We should bump it in the Gemfile!!!. Argh, I was only reading `dependency`, sorry! :beers: . This issue must be raised in `cells-rails`, because `cells` has nothing to do with Rails.. Since the `cells-rails` dependency comes via a gem itself, you might have to `require \"cells/rails\"` in the dummy app or - maybe better - in your engine's lib file (`yourgem/lib/yourgem.rb`).. I don't know if autoloading works with a Rails engine, I am guessing you have to `require_relative` the files you need. The error indicates that files defining class constants haven't been loaded. This is usually done manually in gems.. Here's a typical \"top-level\" gem file: https://github.com/trailblazer/trailblazer/blob/master/lib/trailblazer.rb. In the gem! See the above link as an example, the trailblazer gem loads all files with the classes it wants to provide to the user. :beers: . Why are your engine cell files outside of `lib`? You should have a bunch of lines in your `my-rails-engine.rb` file saying stuff such as\r\n\r\n```ruby\r\nrequire_relative \"cell/bla/main.rb\" # will load my-rails-engine/lib/cell/bla/main.rb\r\n```\r\n\r\nThis is a standard thing to do in gems, you will find it in a hundred thousands of them. Maybe the engine is not aware of the load path where your gem's cells sit, and you need to add it to the engine's configuration. Rails engines are a great idea, but the implementation is quite limited to Rails-only files (e.g. models).\r\n\r\n@rafaelfranca can you help us? We want to have cell class files from a Rails engine autoloaded by Rails - is that what engines are supposed to do automatically?. @TheFlow0360 Komm mal auf https://gitter.im/trailblazer/chat !. this is NOT the intended behaviour, but a serious bug! the cell view should never know anything about controller variables. guess the problem is inside ActionView::Base where controller variables are prefered in place of the passed local vars. damn- gotta fix that.\nthanks for spotting\n. fixed in https://github.com/apotonick/cells/commit/bf49226dac55fc0c908bcd956934ef455d8ca205\nplease report if that works for you!\n. thank you, kinokuni.\n\none thing we have to take into account is that controller ivars with no same-named cell ivar will still be accessible in the cell view, since an unspecified set of controller ivars have to be around in the view, for helpers, so we have to copy them. sucks, but i don't see any way around that if we want to stay forward-compatible.\n. hi giates,\nthanks for your interesting report. the only problem i can think of is that cells does NOT cache view paths in production mode, while it does cache it in development mode (may-be?). this would slow down rendering as it has to lookup views at every render call. i will investigate on that.\nbtw- great test case, thanks again ;-)\n\nnick\n. hey giates, could you please check\nhttp://github.com/apotonick/cells/commit/f9f3eb24cd6152005840e07a3dc861e5d8e78964\n. oh-yes!\n. perfect!\n. ```\ngem install cells\n```\n\nand you're da maaan.\n. hey grimen,\nit's important to understand that controller != cell. if you define a helper_method in a controller, it is only available in the controller's views, not in the cell views- otherwise we would break proper encapsulation.\n\nwhen using #helper_method in a cell this method must also exist there. note that you could also use #helper to include files in a cell.\n. not sure what you mean with \"cells don't support controller helpers\"...? are you sure you tried #helper in a cell? that should work and is tested thoroughly. any helper that works in a controller should work in a cell view as well.\ndid you experience problems here?\n\ni speak against some magic helper inclusion where cells would \"inherit\" helpers from controllers- cells should never know anything about there parent controller to assure clean encapsulation.\nimagine such a cell being plugged into another controller B but relying on a mysterious helper method from controller A. this would cause a name error  which would be hard to trace, apart from evil dependencies. what do you think, grimen?\n. hi grimen!\nthanks for the link.\ngo and try the following:\n\nclass MyCell < Cell::Base\n  helper WhatEver\n  helper_method :method_from_whatever\n\nthat should really work (has been doing the job for 4 years now ;-)\ndoes that help?\ncheers! nick\n. grimen! thanks for your post, i start to grasp what you mean :-)\nthe problem is that those plugins are for controllers only- no cells in mind! the simplest solution i see would be (in your example)\n\n```\ncell MyCell < Cell::Base\n  include Devise::Controllers::Helpers\n```\n\ni really don't see any way to automatically distinguish what in a controller is a helper and what not, so we cannot provide a generic mechanism for that in cells. you would have to go by foot here. and plugin developers would have to mix in their code in ActionController::Base and in Cell::Base :-(\n. maybe there IS a way to handle that! we could extract all helper methods from the controller's MasterHelperModule and mix those methods in the cell's view.\n\nhowever, i wouldn't do that by default- rather you would have to turn on that evil thing explicitly, like\n    render_cell :grimen_cell, :shout, :mixin_controller_helpers => true\n. we have severe problems with getting the #capture related methods to work, as this part of rails' ActionView is nasty and we're already thinking about some clean replacement (view the discussion here http://rubyforge.org/pipermail/cells-talk/2009-December/000190.html ).\n\nif you like to investigate on that i can push the respective branch to github. however, what we need is a better replacement.\n\ncheers,\nnick\n. see http://github.com/apotonick/cells/commit/ed892c156d2002e4939136d1241c9661d5cc881b\n. hey jason- is it possible that this is an Autoloader issue? all we do is adding\n    ActiveSupport::Dependencies.load_paths << RAILS_ROOT+\"/app/cells\"\nin cells/init.rb - which usually works?!?!\n\nnick\n. yo subimage, are you running rails in threaded mode?\n\nif you're doing, i guess there's some load_paths magic going on in rails which simply forgets the non-standard app/cells dir.\n. `#global_content_for` does _exactly_ what `#content_for` does: it provides global attributes in the controller view.\nhowever, the name reflects that the captured content is _not_ available in subsequent cell views, only in \"global\" controller views.\n\nyou think we should rename it? or provide an alias_method?\n\nnote: it would be great to have one markup system here on github as i tend to confuse textile and markdown. period.\n. we're on it! see http://github.com/mlomnicki/cells3/tree/integration\n. http://github.com/apotonick/cells is Rails 3, yeah!\n. that's a pure rails testing issue. guess you have to \n\n```\ninclude ActionController::UrlWriter\n```\n\nin your TestController.\n. no, no, like \n    def setup\n      super\n      @controller.instance_eval do\n        include ActionController::UrlWriter\n. Ok, I will add some note.\n. Cool, thanks for those hints! I wanna keep the relative path for future compat (e.g. when cells will run in Sinatra). However, the cells view paths initializer should run _before_ your stuff is run _and_ we still need to note that in the README.\n. @semaperepelitsa Hey dude, can you verify that the cells railtie is run _after_ yours? If yes, this must be fixed.\n. Yo Cyrille,\nI confirm that behaviour, added a test.\n\nCheers,\nNick\n. Could you checkout http://github.com/apotonick/cells/commit/9e5098ef85e90b3a06e7f1affbf420a39e78359f ? That should work now.\n\nMerci,\nNick\n. fixed!\n. Calling `image_tag` doesn't work?\n. Hey, did #content_for really work in beta4???\n\nA couple of things broke in RC which we have to fix. I will investigate on your bug and report back here, ok?\n\nNick\n. Be precise! What's goin' on? You're into trouble? Can I help???\n. closing.\n. Uhm.. from which version you updated?\n\nNick\n. - Is it just that one view? Do other cells work?\n- You're doing some view inheritance stuff in your cell?\n- Can you paste the render call which should return design/top?\n. This sounds very strange, as we didn't change anything in view finding from 3.3.1 to 3.3.4.\n- Can you try to set up a minimal cell and see if it works?\n- Did you play around with Cell::Base.view_paths ?\n- Any other upgrades (gems, rails, plugins, ...)\n. Did you try it, looks good :-)\n\nThat's something we should get running soon. Anyway, if you need a quick workaround, just use the controller as cell server, like\n\n```\nclass CellController < ...\n  def serve\n    render :text => render_cell(...)\n```\n. I more and more love this idea! You could attach a cell to a route in order to provide RESTful HTML views of resources, for instance. Will check that out!\n. Wait- wouldn't this strengthen the coupling between Cell and route? The cell being a complete Rack-compatible controller sitting directly on a route?\n. The emerging problem will be: Cells don't know about Rack so far, so we will need a module to make 'em speak HTTP.\n. The recent commits in master removed the controller dependency. You can now create standalone cells like\n\n```\nclass StandaloneCell < Cell::Base\nend\n\nStandaloneCell.new.render_state(:drink)\n```\n\nThe next step would be to make cells mountable on routes - could anyone provide a minimal example app to show me what's missing?\n. Ok, guys, this WORKS now in 3.8.0!!! Just be sure to derive your cell from `Cell::Base` if you don't want the AC dependency.\n\nTo mount it:\n\n```\nmatch \"/posts\" => proc { |env|\n  [ 200, {}, [ Cell::Base.render_cell_for(:post, :show) ]]\n}\n```\n\nLemme know how it works and what can be improved.\n. http://nicksda.apotomo.de/2011/12/mounting-a-cell-to-a-route-with-cells-3-8/\n. Thanks - does that look better: http://github.com/apotonick/cells/commit/b8f36cec9110caf6ae926be8490a0ad177e92e25\n\nHow did you notice that bug?\n\nNick\n. Fixed now? Thanks!\n. Mayoral, thanks. As we discussed recently, I'd prefer not touching the 2.3 line anymore :-D\n. Hey Icowell,\n\nwhat are you trying to do? Automatically test cells? Great! What doesn't work right now?\n\nDid you already discover `Cell::TestCase`?\n\nCheers\n. Can you point me to the canonical repo of autotest? I can't find it! (Sorry!!!).\nThat sounds like a good idea and I marked it as \"feature\", so let's work on that!\n. Thanks dude, I was browsing that today at work when I was exploring Autotest. It looks kinda outdated, are you sure it's the \"official\"?\n. Luke-\nthe .autotest needs the following content to work:\n\n<code>\nAutotest.add_hook :initialize do |at|\n  at.add_mapping %r%^app/cells/(.*).rb$% do |_, m|\n    \"test/cells/#{m[1]}_test.rb\"\n  end\nend\n</code>\n\nHowever, we need to fix a bit in autotest-rails: seattlerb/autotest-rails#2\n\nLook what a nice person I am! I even started bugging the autotest guys for you ;-)\n. Where exactly do you put that config? Do you think it would make sense to add that to Cells itself? Or maybe to a separate gem? Or put instructions on its own wiki page?\n\nThanks for figuring out all that shit!!! :-)\n. Sounds odd, but I can't help. I fired up the rails-2.3 branch test suite and got\n\n`102 tests, 172 assertions, 0 failures, 0 errors, 0 skips`\n\n:-D\n. I currently see no solution for that in Cells. The explicit `#render` does not track if it already rendered - and I think that's a good thing. I really don't like the hidden semantics of the before_filter in Rails. Can I help you otherwise?\n\nWhat are you trying to do in your (real) before_filter? And, where are our comments?\n. Ok, that looks cool!\n\nCells are not all-mighty controllers as the ActionController, they are derived from AbstractController and have limited abilities. This is good.\n\nBTW- did you already consider using view inheritance instead of if's? I <em>could</em> blog about that.........\n. I have to play around with authorization plugins, maybe we can do something easy and generic with what you call pre-authorization!\n\nCould you post some more details about that restful problem, maybe in a separate issue?\n. I got it working by calling \n\n<pre>helper_method :current_user</pre>\n\nand that's what Jos\u00e9 recommended, too!\n. Przemek- thanks for that feedback. Several things you can do here.\n1. You may use GET in your forms, too.\n2. Cells shouldn't redirect, they are view components, nothing more. I'd move the routing behaviour to the controller, which could ask the cell to redirect or not. Just an idea.\n3. Another ugly, nasty approach would be to break encapsulation and instruct the parent_controller in the cell to redirect - wouldn't do that.\n4. When cells get interactive I usually switch to Apotomo widgets, so I don't have to care about all that. I just hit submit which triggers an apotomo event, catch that in my form widget and process it. This is a more RIA-like approach.\n\nLet me know if I can help you anywhere.\n\nCheers,\nNick\n. Sorry dude, in Rails 3.0 it's simply impossible to support capturing :-( Maybe we get a hook in 3.1 - what are you trying to do?\n. In Rails 3.1 will be some asset compiler which we will use in cells, too. I think this will remove the need for content capturing in cells.\n\nLove the dynamic50 web site, btw... :-)\n. This is indeed an interesting solution. I basically like it! I like the fact that you extract JS generation to a separate state, this makes things cleaner and separates view and JS. Not a big fan of the capture helpers in Rails, but in your case, this really is done in a reasonable manner ;-)\n\nWe should think about a generic solution for that - maybe we won't need capture support _within_ cells (it breaks encapsulation anyway).\n. On Tue, Aug 9, 2011 at 10:57 PM, nickhoffman\nreply@reply.github.com\nwrote:\n\n> I just discovered why my work-around is insufficient: it doesn't work when called from a cell view. Fark.\n> \n> @apotonick What will it take to get support for `content_for` in Cells?\n> \n> The problem is that content_for is accessing the global ActionView\n> instance, the one rendered by the controller. In Rails 3.x, you cannot\n> grab that instance very easily and you have to apply violence to\n> inject the captured content from the cells into that instance. The\n> entire architecture - currently - is designed for one global,\n> monolithic view instance and we'd have to fix that, first.\n\nCheck Tyler's fork, he was working on that, too:\nhttps://github.com/TylerRick/cells-capture\n\nOne reason we didn't work on this is that capturing is violating the\nencapsulation that cells gives us, since we're injecting content from\na component into some global instance. Nevertheless, people find this\nuseful so we should work on it ;-)\n\nNick\n\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/25#issuecomment-1767339\n. Nick, thanks. Cells were made to encapsulate visiblbly connected blocks in the page. That's all they were supposed to do, you simply call `#render_cell` and they return their markup. Now, injecting arbitrary content into some other \"block\" outside of the cell's scope violates encapsulation, since the cell has knowledge about the outer world (well, not really, but you get what I mean ;-) This is a new requirement which we have to meet.\n\nAnother idea could be that the cell has a second method to return JS, like the idea you had:\n\n``` ruby\nrender_cell(..) do |cell|\n  global_js_container << cell.javascript\n```\n\nI guess providing a `content_for` is less clumsy, although it breaks encapsulation.\n. Already decided to provide that in the next versions of cells - donations welcome.\n. https://github.com/apotonick/cells-capture\n. Aaron, the problem here is the helper accesses `@request` directly instead of `@controller.request`. If you set this instance variable, it will be around in your cell view.\n\nIn your state, simply do\n\n<pre>\n  @request = parent_controller.request\n</pre>\n. Problem here was Rails' 2.3 and bundler gem handling which doesn't detect generators correctly, right?\n. Yepp! You had Cells included via bundler, which in Rails 2.3.x doesn't pull in generators correctly. Try it the old way in `environment.rb` and pleeeease report!!\n. Hey, I remember you! You are \"RE-trying\" cells? Does that mean you didn't like it in the first place?????????????????\n\nYou can access flash using `parent_controller.flash`. However, the flash object is intentionally hidden from cells as they usually should _not_ access global variables like the flash message :-/ \n\nPlease report if that works for you!\n\nNick\n. Yeah, the problem is people expect Cells to be like ActionController, which is an all-mighty monster. Nevertheless, Cells are \"only\" view components, and hence they aren't supposed to do everything.\n\nYou could also try \n\n<pre>\nhelper_method :parent_controller\n</pre>\n\n\nto access parent_controller in your view. The same applies for your fix, just wrap it in a `def flash` and declare it as helper method.\n\nGood to hear you're still not too encouraged ;-)\n. Fantastic example for using cells, draper and flash messages, @mateusz-sojka - we should start screencasting about Cells!\n. Discussed here https://github.com/apotonick/cells/pull/136\n. Andy- the wiki seems to be outdated. You can use the same API as in an ActionController, \u00e0 la `Cell::Base.prepend_view_path`.\n. This is something which we started discussing on the list a couple of weeks ago. Great to see your contribution!!! :-)\n\nSo, basically you merge @opts and params? Could you post that \"proposal\" to the list, so we can officially \"decide\" the API change?\n. Thanks for the valueable discussion, Andy! The changes we talked about were applied here: https://github.com/apotonick/cells/commit/7ba9f66bef3df433b2629135df32434570af3427\n. Hi salmont,\n\nwe're currently discussing that on the list: http://groups.google.com/group/cells-and-apotomo/browse_thread/thread/6bc00543828c4de1\n\nIn that case it seems that Passenger is overriding the #link_to behaviour for ActionController, only, and so the Passenger-patch doesn't apply to Cells/Apotomo. Are you using Passenger?\n\nBeside that, when I use `RAILS_RELATIVE_URL_ROOT` only the asset links get prepended the new root - both link_to in cells and in ordinary controller views still point to the old root.\n\nNick\n. This should be fixed in 3.6.3 with this commit: https://github.com/apotonick/cells/commit/2f999f7d9efd845e805ed42c67ee98860f5bdb91\n. Dude, just one word: **AWESOME!**\n\nI'm so happy somebody fixes this. Great work, will merge it till the weekend. Any chance to have some deprecation warning if using `rails g cells:cell` ? It really sucked, I simply didn't know how to do it better :-)\n. Yo Pete! In the 3.5.0.beta1+ you can have haml views using the standard generator flag `-e haml`, check the USAGE banner :-)\n. Where's your fork where I can pull in that fix? ;-)\n. Matt, thanks. Can you check if the current rails-2.3 branch works for you?\n. Matt's fix is included in 3.3.6, thx.\n. Luis, what \"new active_helper dependency\"???\n. Can you checkout the new gemspec version: http://rubygems.org/gems/cells/versions/3.3.7\n. That seems to be a problem at rubygems' dependency algorithm, the `cells.gemspec` file is fine and runs :-) Can you verify?\n. I removed jeweler in favor of a standard gemspec, look here: https://github.com/apotonick/cells/blob/1e4ec12f4f80d34f0cbf71feadb8738935b28aa2/cells.gemspec\n\nMaybe the `rake build` command ran jeweler?\n. 3.3.8 works!\n. Hi Brett,\nthe url_helpers are included automatically in Cells. Are you overwriting #user_path or so?\n. https://github.com/apotonick/cells/wiki/Devise-in-Cells\n\n;-)\n. Strange.... Gemfile?\n. That's why I insist on your Gemfile :-)\n\nIt should contain\n`gem 'rspec-cells'`\n. Yo Mike! Uhm... what do you mean, actually?\n\nWe require `abstract_controller` and `railtie`, that's all. Do you have any conflicts?\n. Ok, I got it, you meant in the `gemspec`, right? This is fixed here: https://github.com/apotonick/cells/commit/9d8993423ce2c8ab81e5669c7d51747af35c6bca\n\nGood to see you back!\n. Yo Michael,\n\ncheck that post: http://nicksda.apotomo.de/2011/02/cells-3-5-release-party-summary/\n\n`@opts` simply got `#options`. Enjoy.\n. Which cells version?\n. Nevertheless, in Cells 3.5 you should use `#options` - what version are you using?\n. You're trying to use #options in your _view_ which doesn't work. Declare it a helper_method.\n. I'm always a bit careful about mixin in ActionController\\* things into Cells. They mess around heavily with `request` in this module which is a strong dependency, scares me a bit to bring that into the clean cell. What do you think? Am I too rigorous?\n. Yeah, AC::UrlFor redefines #url_options and accesses `request`, which is kinda breaking the encapsulation Cells advocates. Don't get me wrong, I like your solution as it simply includes one single module. However, this module internally does things that scare me.\n\nIn Cells we really try hard to encapsulate things whereas the ActionController simply includes everything. This is nice for the end user but also adds evil dependencies to your classes.\n\nOne decision in Cells is _not_ being dependent on request/response per default. This change would tighten the coupling between HTTP and Cells. Maybe we should include your solution in the Troubleshooting wiki page?\n\nMy thought behind all this is: Cells are view components, and they really shouldn't know about hosts and HTTP. So, if you really want your cell to \"break\" this, you might include the module yourself, saying \"I really want my cell to access HTTP stuff\". Can you get my points?\n. @chikamichi: It already does the proxying, look here: https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L38 personally, I hate this part of Cells :-D\n\nThe simplest solution would be to let users include that module by hand and thus make it their decision to \"break\" encapsulation, or not. What I like about wingrunr21's solution is that it really just takes one `include` to make it work.\n. Passing `*_url` helpers into the cell if you need to generate urls dynamically is poor, indeed. I agree here.\n\nIf I knew my cell is going to work with subdomains a lot, I'd include the module you already proposed. This is ok since I decide to \"break\" encapsulation, and this is absolutely appropriate here.\n\nBTW, the problem I have is not the inclusion of the `AC::UrlFor` module as it, the problem is that its `#url_options` accesses `request`, which is definitely \"too much\" for a light-weight view component. And if we decide to include that module per default we would tighten the coupling between cells and HTTP even more.\n. Absolutely! You're the first who comes with a really beautiful solution, though ;-) I will make a nicer Troubleshooting wiki page right away.\n. It's `render :nothing => true` so far - what's the \"official\" syntax?\n. Hi Brett,\n\nonly including a module doesn't make it available in the view. I hate\nhelpers and I'm gonna vent my anger in a blog post soon ;-)\n\nTry that:\n\nClass MenuCell < Cell::Rails\n  # ...\n  helper UrlHelper\n\nand lemme know if that helps.\n\nNick\n\nOn Mon, Apr 11, 2011 at 4:32 PM, brett-richardson <\nreply@reply.github.com>wrote:\n\n> Hey, I've been trying to get Cells to render a menu that links to a list of\n> sub-domains.\n> \n> I have gone through @wingrunr21's recent pull request for adding the UrlFor\n> module, but I'm unsure how one should go about getting this working.\n> \n> My cell looks like this:\n> \n> ```\n>    class MenuCell < Cell::Rails\n> \n>            include ActionController::UrlFor\n>            include UrlHelper\n> \n> \n>            def primary\n>                    render\n>            end\n>     end\n> ```\n> \n> But I have also tried this method too:\n> \n> ```\n>    module UrlHelper\n> \n>            def with_subdomain( subdomain )\n>                    subdomain = ( subdomain || '' )\n>                    subdomain += '.' unless subdomain.empty?\n>                    [subdomain, request.domain,\n> ```\n> \n> request.port_string].join\n>                end\n> \n> ```\n>            def url_for( options = nil )\n>                    if options.kind_of?( Hash ) && options.has_key?(\n> ```\n> \n> :subdomain )\n>                                options[:host] = with_subdomain(\n> options.delete( :subdomain ) )\n>                        end\n> \n> ```\n>                    super\n>            end\n> \n>    end\n> \n> \n>    module Cell\n>            class Rails < AbstractController::Base\n>                    include ActionController::UrlFor\n>                    include UrlHelper\n>            end\n>    end\n> ```\n> \n> Ideally I think Cells should be able to handle a link_to call like this:\n> \n> ```\n>    %li= link_to mod.name, root_url { :subdomain => mod.subdomain }\n> ```\n> \n> Do you know what needs to be done here?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/48\n. Rails 3.0?\n\nDo you call #link_to in a cell view or in the cell controller?\n\nOn Mon, May 9, 2011 at 11:01 PM, digiprop\nreply@reply.github.com\nwrote:\n\n> I seem to be having a rather strange issue with nested resources. \u00a0If i link to a child resource (example: \u00a0link_to \"New Store\", :controller => \"stores\", :action => \"new\") from a cell being rendered by said child resource, i get an error saying the route can't be found. \u00a0If i take that same link_to and cut/paste it directly into the page, it works fine. \u00a0(paths work the same way.)\n> \n> if i do a rake routes i can confirm the route is there.\n> \n> Is there a workaround for this?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/49\n. That's what I figured, it reminded me of https://github.com/apotonick/cells/pull/45\n\nThanks for posting it.\n. On Wed, Jun 8, 2011 at 3:05 PM, silviorelli\nreply@reply.github.com\nwrote:\n\n> Inside application controller I have some methods that I use site-wide, some of them exported as helpers with helper_method.\n> Those helpers are not available inside cells.\n> \n> And that's how it should be! Cells ain't no ActionController - by\n> intention. Use Cell::Base.helper if you need custom helpers in a cell.\n\nclass MyCell < ...\n  helper Custom\n\nCheers,\n\nNick\n\n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/50\n. Hey cameel,\n\nthe reason we chose :set_routes_preloader was to make sure routes are available for cells. Not sure if that will work if we change that to :after_initialize. Did you try it already? Would be great ;-)\n. So how does cells' \"asset breaking\" look like right now? Is there an exception or something like that?\n. Hey Mark,\n\nyou're right, thanks! Not sure why I introduced the options stuff a while ago. Anyway, your fix is applied: https://github.com/apotonick/cells/commit/3455518b0e066025192b54f40c184611f66a0fa0 Thanks man!!!\n. We already discussed that issue here https://github.com/apotonick/cells/pull/45 :-) and decided to _not_ include anything from `ActionController` per default since the `ActionController` mixes too many things in one class and would make Cells HTTP-dependent. What do you think?\n. Silly me! Thanks Mathieu, this is fixed in 3.6.2.\n. I hated that `require-if env==test` line ever since, will merge it and update the README.\n. Bug confirmed.\n. This should be fixed with https://github.com/apotonick/cells/commit/8ad53ae918076481b6f1e17a566c10142aa4486a\n\nThanks.\n. So the Rails30 strategy has to be fixed, but 31 can stay as-it? Maybe I should ask Jos\u00e9 what has changed here?\n. Hi Brendon, this was fixed in https://github.com/apotonick/cells/commit/ab1541b1c2c53c94eb45c24c30297b5202c3cd17 - go and give 3.3.6 a try!\n. In 3.6.3 we tried to solve a helper issue with Cells, maybe that broke stuff. I will investigate on that later today! Thanks so far for your reports.\n\n@electic: Are you sure you got this exception with 3.6.2?\n\n@igray: Are you sure this came with Rails 3.1?\n\nAnyway, try using 3.6.2 - this should work for both 3.x\n. @electic: I can't reproduce this error in a Rails 3.0.5-8 environment and with Cells 3.6.3. Can you help me here?\n. Thanks dudes, this is fixed in 3.6.4: https://github.com/apotonick/cells/commit/96c2c6c26bc2335177a960cfd22814ae8185e728\n\nYou've helped a ton with your reports and fixes, Thanks again :-)\n. Thank you so much! This helped a lot! 3.6.4 fixes this: https://github.com/apotonick/cells/commit/96c2c6c26bc2335177a960cfd22814ae8185e728\n. This looks pretty obvious, as you say, the respective Cells sweeper module isn't included anywhere... Should we do that per default?\n. We don't sweep in Cells 4 anymore, soooorry.\n. We once had this in earlier versions but removed it as nobody seemed to take advantage of this feature. I'd be happy to see a patch, however, maybe we should introduce some `cell/debugging.rb` module responsible for mixing in development-specific behaviour into cells (e.g. caching logging, template finding output, etc). If you send a patch for logging I can take care of the rest. Thanks!\n. Yeah, notifications seem to be a good choice, although I'd like to push stuff like this in a Cell::Debugging module. Cash tests are here: https://github.com/apotonick/cells/blob/master/test/rails/caching_test.rb\n. Cool, only 3 years later this got implemented. Thanks @fractious I basically copied your code to `Caching::Notifications`.\n. @schorsch Yo! Good to see you here!\n\n@timoschilling Hilft!\n. Great commit, you're part of Cells now! https://github.com/apotonick/cells/commit/30aff3772ccde884468778f0975cbed2f08f5883\n\nOriginally, the cache versioner was meant to handle that kind of conditional decider, but the `:if` option makes it much more clear, thanks, Arthur!\n. Try running the tests with Ruby 1.9, this should work better when\ntesting. I will take a look at your gist on Sunday when I'm back\nsober, thanks bro!\n\nOn 8/12/11, fractious\nreply@reply.github.com\nwrote:\n\n> I'm just getting into cells and am really liking them but I'm having some\n> issues with tests:\n> \n> I have a PageCell with a `:footer` state which takes a single `args`\n> parameter. On a call to `invoke(:footer, :foo => 'bar')` [my\n> code](https://gist.github.com/1142130) is throwing an unexpected\n> `ArgumentError: wrong number of arguments (0 for 1)` exception.\n> \n> I've just cloned the repo to try and get to the bottom of it, but running\n> the gem's tests is resulting in a [load of failing\n> tests](https://gist.github.com/1142138) too, mostly `NameError: uncaught\n> throw 'invalid_test'`.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/67\n. Fixed in 3.6.5, thanks you two!\n. We removed the explicit require in the cells railtie, see here: https://github.com/apotonick/cells/pull/57\n. Added a note here: https://github.com/apotonick/cells/commit/29303281eb6682b05004986ff94f128362a1f360\n\nThanks, Kamil, you're a great help!!!\n. Hi Kamil,\n\nthe behaviour you're experiencing is the intended. `#render_cell` is designed to accept arbitrary data, like a hash, an array, or whatever, and `#options` shouldn't be used in favor of _state-args_. Check out this post to learn about passing options as explicit arguments to the state: http://nicksda.apotomo.de/2011/02/cells-3-5-release-party-summary/\n\n Does that help? So, rule of thumb is: Don't use options but state-args!\n. Can you paste your cell code? I'd love to see what you're trying to do, then I maybe can come up with a more detailed blog post on this?\n. Thanks, Kamil. Your fixes are here: https://github.com/apotonick/cells/commit/d1a8402bd50c98dbd24c8baa09c2feaa0369868a\n. I'm a bit scared to merge that. Maybe we could do that in ENV=test, only? Or just tell people to manually require the file. I prefer the latter, definitely ;-)\n. Hi Stefan,\n\ncould you write a test case for that? It would probably go to https://github.com/apotonick/cells/blob/master/test/helper_test.rb\n. The `cycle` helper is not supported as it relies on global state. In Cells 4.1, this can be easily solved by injecting the index. See http://trailblazer.to/gems/cells/api.html#collection\n. Trying to use device? Maybe this helps? https://github.com/apotonick/cells/wiki/Devise-in-Cells\n\nYou can use any helper in Cells by using `helper WhateverHelperModule`\n\nDoes that help?\n. Now I got it. You may not access controller methods in Cells (encapsulation, blabla). If you need methods from the controller in your cell, extract those methods to a module and include it both in the controller _and_ the cell. Then define them as helper_methods in both.\n. Thanks, Kevin! It would be interesting to see if this bug also comes up in the 3.0 version of Cells, which implements view inheritance itself. Since you're busy writing your app, I will do the test case. Thanks for the coffee you just bought.\n. This does not happen in Cells 4. :tongue: :stuck_out_tongue_winking_eye: \n. Use ::Rails.root :-)\n. We're still planning to port Cells to Sinatra and in a strange state of mind I once named it Cell::Rails - does that suck? Change it?\n. The more I think about the `Cell::Rails` class the more I hate it. Maybe we should deprecate it and go back to `Cell::Base`. Any comments, guys?\n. That all sounds conclusive but I'll definitely spend more time tomorrow on it when I'm sober\n. This now works in view models using `#cell` and in concept cells with `#concept`.\n. Thanks, fixed in 3.3.9, also I backported TestCase#view_assigns to this version.\n. http://nicksda.apotomo.de/2011/10/cells-3-7-released-taataa/\n\nYou now need to expect args in your state method, or use the\nDeprecations module.\n\nOn Thu, Oct 13, 2011 at 11:04 PM, Marc MacLeod\nreply@reply.github.com\nwrote:\n\n> Just a simple:\n> \n> <%= render_cell :list, :sidebar_list, :user => @user %>\n> \n> is now causing the error in the title. Any more info please ask.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/85\n. Check out the blog post:\nhttp://nicksda.apotomo.de/2011/10/cells-3-7-released-taataa/\n\nYou now need the Deprecations module if you want #options.\n\nOn Thu, Oct 13, 2011 at 11:04 PM, rpmessner\nreply@reply.github.com\nwrote:\n\n> I have code similar to this:\n> \n> class Post < Rails::Cell\n> \n> \u00a0before_filter do\n> \u00a0 \u00a0@admin = options.admin\n> \u00a0 end\n> \n> \u00a0def content(options)\n> \u00a0 render\n> \u00a0end\n> end\n> \n> This works great in 3.6.7, in 3.7 the options hash is not bound for the before_filter\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/86\n. This is a pure Ruby problem, sorry for the inconvenience, though ;)\n. I guess that's cause state-args don't work in Rails 2.3 / Cells 3.3. Sorry for that! We could backport that feature into the 3.3 line, however, this might be some work. Interested?\n. Great! Sorry my comment on issue#88 was brainwashed, of course your change works. Released 3.3.10: https://github.com/apotonick/cells/commit/0f8aacfcbb4a80edc69e136f69bb236dfcc88d69 Thanks!\n. Fixed in 3.7.1.\n. Hi Mohammad, I merged it into the 3-7 branch to make it quickly available in 3.7.1. Thanks!\n. I see this code in a `cells-rescue` gem. Not that I don't like your code, I love it! However, unlike Rails, we decided to keep the Cells core totally simple. Are you interested in setting up a separate gem? I can help, of course :-)\n. The #cells channel on irc.freenode.org is usually used for 1st level support ;-)\n. Hey @yagooar, what about this `cells-rescue` gem? I think it would be great!\n. I still think `cells-rescue` would be cool. You could use the hooks gem to provide hooks that developers can plug in and run their code.\n. Complain at the Rails core that they make too much magic around the inheritance code.\n\nNo, seriously, that sounds familiar. Lemme dig into that.\n. The method `display` is a reserved method in Ruby and we do some stuff to get rid of that - that might fuck up the inheritance. I vote for renaming the `display` method to `show` and deprecate it.\n. ???\n. I'm not sure, someone else reported this earlier last year. Maybe we have to patch so that the state-args are passed as block variables to the before_filter block? Can you post an example of a filter and how you use it?\n. Absolutely, but this is a wrong design in Rails itself. I will patch it in Cells for now and then push it to the core. So, what you basically want is:\n\n```\nclass WidgetCell < Cell::Rails\n  before_filter :set_widget\n\n  def set_widget(options)\n    @widget = options[:widget]\n```\n. Rails partly supports a concept like state-args (called action-args) but it is not implemented consequently. E.g. the Callbacks module doesn't care about options passed to #process and so on, we have to fix that.\n. Ok, I looked into `ActiveSupport::Callbacks` which is the implementation of filters in controllers. IMO, it's way too complex and _wrong_ since you cannot pass options to callbacks (in our case, those are the state args) when invoking them. That's why I wrote [hooks](https://github.com/apotonick/hooks) years ago which implements the same as Callbacks but better. We have to write our own little filter layer using hooks in order to make state-args work in filters - I'm not willing to fix that in Rails itself as long as they're using the messy AS::Callbacks... sorry ;-)\n. Exactly, we simply pass the state-args to the filters. What are the most frequently used options for `before_filter` and friends? We have to implement those manually.\n. Please check out the new gem: https://github.com/apotonick/cells-filters\n. What exactly does this do? I don't understand Gemnasium :-)\n. Hi! Cells are not supposed to access HTTP data - if you still want to do that, there are 2 possibilites:\n\nUsing state-args (recommended):\n\n``` ruby\nrender_cell(:comments, :show, cookie)\n\ndef show(cookie)\n  #...\nend\n```\n\nOr using the controller (sucks) reference in your cell:\n\n``` ruby\ndef show\n  parent_controller.cookie\n```\n. You guys already using https://github.com/apotonick/rspec-cells ?\n. @svoop Add `gem 'rspec-cells'` to your `Gemfile`.\n. Cells != Rails\n\nWe like to separate concerns and the rspec-cells gem is referenced in cells' README.\n\nDoes it work now, can we close this issue?\n. Hooray, so you really just missed to include the gem? :-)\n. Cells still have the actionpack dependency - would that be of any problem?\n. I was reflecting about this the last days. My plan is making Cells independent from Rails, which would allow using them in any framework (Sinatra, Webmachine, ...). I will play around with this the next days.\n. This project shows how to use cells in sinatra, which can easily be transfered to webmachine. https://github.com/apotonick/sinatra-on-cells\n. Thx, your patches were really helpful, couldn't merge some of them, though. Anyway, you're part of it :-D\n. Good to know that, thank you Olek! You're supposed to hand in a pull request as soon as the next 3.2 is out!\n. Awesome. I already merged your changes, now, can you please provide a minimal test engine in https://github.com/apotonick/cells/tree/master/test/dummy @juniorz ?\n. You have to add the partials directory path with `Cell::Rails.append_view_path` - we don't support partials in Cells since it doesn't make any sense to have \"views\" _and_ \"partials\". Sorry! Does that help you?\n. Jupp, the engines API changed from 3.0 to 3.1 so we need another Strategy module there. Anyone?\n. Fixed in 3.8.2.\n. I'd give Apotomo a shot!\n\nOn Wed, Feb 8, 2012 at 9:33 PM, Jonathan Rochkind\nreply@reply.github.com\nwrote:\n\n> I'm having trouble figuring out how form submission in a cell works. Is there any documentation available?\n> \n> Somehow, form submission in a cell winds up being handled by a method in the right cell, right? How does this happen?\n> \n> Is there any way to use the mechanism to have hyperlinks (GET) that wind up being handled by a method in the cell too?\n> \n> Or am I completely misunderstanding what goes on?\n> \n> Thanks for any hints or pointers.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/104\n. A detailed stacktrace would help!!!\n. You're trying to render a subclass of `Cell::Rails` which requires an ActionController instance! Derive your `NewsletterCell` from `Cell::Base`, that should work. But be warned that not everything might work since a lot of Rails helpers are tied to the controller instance. You could also keep your `NewsletterCell` as a `Cell:Rails` subclass and pass a controller instance:\n\n``` ruby\nCell::Base.render_cell_for(:newsletter, :signup, controller_instance)\n```\n\nbut then it's up to you creating the controller. Does that help/make sense for you?\n. Hm, what exactly do you need in your cell, @mckenziec? Access to sessoin, and whatelse? And, do you really need it, or could you pass it as arguments into the cell? \n. You can use the `:format => :mobile` option in the render call in your cell state.\n. Should be fixed in 3.8.3 - please test!\n. Huh? Does that appear in a cached scenario, only? Why isn't the cached view escaped already, then?\n. But... the cached view should be escaped already. They (the Rails core) change this every other week. Did that work for you in Rails 3.0 and 3.1?\n. I close this because we don't do escaping anymore in Cells 4 - only for defined properties, which should make this issue obsolete.\n. Hi Mike, the initializer should still work, so you can reset the view paths there. Are you sure this gets executed? Can you try running the initializer on `Cell::Rails` not `Cell::Base` ?\n. Wheew :-) Can you paste your initializer? We need to add that to the README.\n. The `parent_controller` dependency was removed in `Cell::Base` and is only around in `Cell::Rails`, darling!\n. We also need that change in rspec-cells, @gertas are you ready?\n. Where do you define\n\n``` ruby\nclass BaseCell < Cell::Rails\n  helper :application, :users, :topics, :locations\n```\n\nAnd where are the UsersHelper, TopicsHelper, etc defined?\n. Man, cool! Now if you would add a note to the README I will merge in a minute :-)\n. So happy we finally address this issue. Here's the problem:\n\nIn order to make `Cell::Rails` feel like a real HTTPable ActionController we delegate some random methods to the parent_controller in the `Cell::Rails::Metal` module: https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L10\n\nThis makes it necessary to provide the Rails cell a controller instance. Now, maybe this is not necessary in the routeable-cell setup. Maybe we don't need a controller instance there but a request object, only, which is available at the time we call `render_cell_for` (in `env`).\n\nSo, would you guys be ok with deriving your cells from, let's say, `Cell::Rack` and I will do the rest? \n. `Cell::Rails` is pretty heavy-weighted since it carries around an ActionController instance. `Cell::Rack` just owns a request object so this could actually make cells work in other environments, like Sinatra, while still having a working devise API, etc. Exciting stuff!!!\n. @pboling Of course, `Cell::Rails` still has the `#parent_controller` dependency and looks and feels like an ActionController. What kind of magic in your cells are you refering to? Just curious... Why don't you checkout 3.8, maybe I can help.\n\n@mckenziec As long as Devise etc rely on the specified internal API (e.g. accessing #session) then the new `Cell::Rack` should work fine. Are you ready for testing?\n\nSpeaking of charity.. http://www.pledgie.com/campaigns/16068 ;-)\n. @mckenziec Go for it! https://github.com/apotonick/cells/commit/911436bb177e7c5f86fb74e876b93ea65c1e7ecc :-)\n\nLike\n\n``` ruby\nrender_cell(:comments, :show, env[how the fuck do i get the request from a rack env?]\n```\n. Looks good, are you still having trouble using `Cell::Rack`? Require the cells repo in your Gemfile! http://gembundler.com/gemfile.html\n\n``` ruby\ngem \"cells\", :git => \"git://github.com/apotonick/cells.git\"\n```\n. Try this:\n\n``` ruby\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ Cell::Base.render_cell_for(cell_name, :display, request) ]]\n}\n```\n. I'll fix it, have to think a bit more about it! Tonight ;)\n. Check commit https://github.com/apotonick/cells/commit/2f87fdfce4fe8259464cff75e9d6c7f96cf5ccaa\n\nYour code should go like this now:\n\n``` ruby\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ Cell::Rack.render_cell_for(cell_name, :display, request) ]]\n}\n```\n. What else information is in the env that we need in the cell? I want to keep cells decoupled from HTTP by all means..\n. You shouldn't use the `#cell` method at all in the test but go with the \"official\" `#render_cell`:\n\n``` ruby\nrender_cell(..) do |cell|\n  # here is your cell instance you're longing for!\n```\n. Using `#create_cell_for` is just fine for what you're trying to do! On the other hand, `#cell` does really the same and maybe we should just remove the deprecation warning. This notice was meant to inform people that the cell no longer accepts options at instantiation time but wants dynamic data as state-args in the `#render_cell` call.\n. https://github.com/apotonick/cells/commit/b72fdcc9f8be86ba4723e60f7737831a0c6c66c4\n. Thanks. Blog about it. Tweet about it. Or http://feedback.railscasts.com/forums/77-episode-suggestions/suggestions/363034-rails-cells :-) Have a great weekend!\n. Maybe the `html_safe` is a problem? See https://github.com/apotonick/cells/blob/master/lib/cell/rendering.rb#L91\n. Question here is do we still need the `html_safe` call or can we simply omit it in Rails 3.x? @bmaland @skyeagle Which Rails versions you guys using?\n. That seems odd since I didn't change any rendering code so far. I still released 3.8.4 explicitely for you, @skyeagle :-) Please check if it works for you.\n. Check 3.8.5, I gemified a dirty working tree in 3.8.4!\n. @skyeagle I still don't understand why this suddenly works. Whatever ;) Close this issue when appropriate.\n. Can you write a test that fails with JRuby? That would help!\n\nOn Fri, May 18, 2012 at 12:51 PM, Bj\u00f8rn Arild M\u00e6land\nreply@reply.github.com\nwrote:\n\n> For the record, this still doesn't work on JRuby. I'm using Rails 3.2 as well.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/121#issuecomment-5783579\n. When including your test (thanks!) I get\n\n`NoMethodError: undefined method`encoding' for \"\u00e6\u00f8\u00e5\":ActiveSupport::SafeBuffer`\n\nWhen I remove the `.html_safe` call I get\n\n`NoMethodError: undefined method`encoding' for \"\u00e6\u00f8\u00e5\":String`\n\nSo Jruby is definitely expecting something else from the cache?!?!?!\n. This is when you change your Ruby interpreter but still use old caches. Not cells-specific.\n. It is true, every engine is added to cells view paths. It should look at Cells' setting first, and then AC. Do we still need this fix? I reckon yes.\n. So, does that mean `main_app` in an ENGINE cell does refer to the wrong thing?\n. What you might try as a workaround is `parent_controller.main_app`. I'll see what I can do.\n. Guess if we delegate `main_app` to `parent_controller` it should be just fine. Did you try the above? Is `parent_controller` available in the view?\n. Please try the current master branch: https://github.com/apotonick/cells/commit/a559f7c972c7bd64b678a3adc1d264ff1e093c2b\n. They do weird stuff in Rails to set the `main_app` helper and I already hate it. So please as a work-around use `Rails.application.routes.url_helpers` as @steveh suggests. When there is time I'll try to discuss this with the core team.\n. Sorry I fixed it in 3.8.5, my bad.. ;)\n. Oh... I'm not sure if cells 3.3 (Rails 2.3) supports state-args at all... That answers your first question: So far I dropped 2.3 development since nobody asked for it and it is quite a bit of work. Are you tied to Rails 2.3?\n. Well I can take a look at how easy it is to backport stuff but for me personally it is a bit of waste of time to work on old code. Sorry dude ;)\n. That is a valid point! Should the found class be queried again for buliders, making the finding recursive... Hm. Shouldn't be required in most cases but definitely makes sense. Can you give an example how you're using that?\n. Why does Github say you posted this in 2012?\n. Cause there seems to be no request object in ActionMailer. Try to derive\nyour cell from Cell::Base then (which does not have this dependency) and be\nsure not to use URL helpers in the cell. Let me know if that doesn't work\nfor you.\n\nOn Mon, Aug 13, 2012 at 1:42 PM, Jan Dudulski notifications@github.comwrote:\n\n> when I'm trying to render_cell inside mailer view I'm getting an error\n> like:\n> \n> ActionView::Template::Error (undefined method `request' for #SomethingCell:0x007fa97e694a90)\n> \n> Rails 3.2.x, cells 3.8.x\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/132.\n. Then you need to \"find\" the request object, it must be hanging around in\nActionMailer somewhere. Sorry for that inconvenience, but this is due to\nRails' internal dependency architecture. I can take a look at it today.\n\nOn Mon, Aug 13, 2012 at 3:25 PM, Jan Dudulski notifications@github.comwrote:\n\n> Thanks, works! What can I do if I need url helpers also?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/132#issuecomment-7691576.\n. Can you add a brief paragraph to the cells README? Maybe below \"Mountable Cells\"?\n. Problem is: the more we allow users to access HTTP objects in a _view component_ the more they will get miseducated and consider it \"best practice\" to not having interfaces. Have you thought about the following?\n\n``` ruby\nrender_cell :comments, :show, cookies\n```\n\nAnd then:\n\n``` ruby\nclass CommentsCell < Cell::Rack\n  def show(cookies)\n```\n\nWould that work? Really, I already hate the fact that we have params and session in  cells but now, cookies.... well... send a pull request :-)\n. Guys, you don't have to rewrite helpers if you want to use cookies in cells. Just  add this to your cell.\n\n``` ruby\nhelper :cookies\n\ndef cookies\n  parent_controller.cookies\nend\n```\n. I am missing some discussion here! Maybe I should blog?\n. Do we still want that with Cells 4? \n. This won't be necessary with `ViewModel` anymore and in combination with `Options` (coming soon).\n. Maybe that is what you're interested in? http://nicksda.apotomo.de/2012/06/using-rails-gems-like-simple_form-in-sinatra-or-anywhere/\n. Hey Francesco, try the newer cells 3.8.6 I guess I forgot to release a new gem :-)\n. don't require 'cells' !!!\n\nOn Mon, Oct 8, 2012 at 11:14 AM, francesco agati\nnotifications@github.comwrote:\n\n> if i try to use cells and actionpack i get this error\n> \n> main.rb\n> \n> require 'action_pack'\n> require 'cells'\n> require 'cell/base'\n> \n> class MusicianCell < Cell::Base\n>   def show\n> \n>   end\n> end\n> \n> /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:6:in `<class:Rails>': uninitialized constant ActionController::RequestForgeryProtection (NameError)\n>     from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:4:in`module:Cell'\n>     from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:3:in `<top (required)>'\n>     from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cells.rb:75:in`require'\n>     from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cells.rb:75:in `<top (required)>'\n>     from main.rb:2:in`require'\n>     from main.rb:2:in `<main>'\n> \n>  \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/138#issuecomment-9220090.\n. Sorry! Can you please try with the current master branch?\n. So what are you exactly doing, I wanna know! Show some code!!! And, can we close this issue?\n. I wanna see the players view, too. And how do you use that cell? In a Ruby script? Sinatra? Our wiki is crying for you!\n. Dude that sounds _really_ interesting, please keep us posted, especially cells and celluloid seems like a great idea to me.\n. Note that if you wanna use a helper in your view you have to use `helper EventsHelper`, not `include`. It's stupid, I know, but that is Rails, not Cells ;-)\n\nAre you trying to use the helper methods in a cell _method_? This could help.\n\n``` ruby\nclass EventCell < Cell::Rails\n  def controller\n    parent_controller\n  end\n```\n. When you remove the state arg `:movies => @movies` does the problem still\noccur? There was a bug in Rails' ActionController#process. Maybe that is a\nregression bug in Rails, let me check.\n\nOn Tue, Oct 23, 2012 at 6:57 PM, scervera notifications@github.com wrote:\n\n> I have been getting a maddening error:\n> Wrong number of arguments (1 for 0) after updating from Rails 3.0.3 to\n> Rails 3.0.10 to Rails 3.2.8\n> \n> See this stackoverflow question:\n> http://stackoverflow.com/questions/13001289/wrong-number-of-arguments-1-for-0-after-updating-from-rails-3-0-3-to-rails-3-0\n> \n> I discovered that when I remove all of the render cells lines in my code\n> the problem goes away. I'm hoping for a fix, because I love cells!\n> \n> Here is the line of code:\n> <%= render_cell :video_feature, :display, :movies => @movies %>\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/140.\n. It's not a Rails problem, try renaming the `#display` method to `#show`.\n. Steve, if your cell still works with that `quote` variable than something is really fucked up. Cells are close to but still not so smart to figure out themselves what you need in your methods ;-) What would help would be an isolated minimum rails app that provokes this problem.\n. Rails version?\n. Sorry bro I just created a clean 3.2.8 app with cells + state args and it works, I can't reproduce this problem. Maybe it's your 1.9.1 ruby?\n. Now I'm the one to blame for not seeing your bug! Your `#show` method has to receive the argument, dude!\n\n``` ruby\ndef show(story)\n```\n. No problem bro I was just kidding :-D\n\nWondering how that could work without receiving an argument in the state. Guess you had a method around, then?\n. Yo @hipertracker,\n1. what \"Rails methods\" do you need? Helpers?\n2. are you in a Rails environment at all? If not, this might help: http://nicksda.apotomo.de/2012/06/using-rails-gems-like-simple_form-in-sinatra-or-anywhere/\n3. If you are digging AJAX and cells, have you checked out apotomo? http://apotomo.de\n4. we have some attempts on packaging together cells and their assets but I need more input and ideas about that: https://github.com/cowboyd/cells-assets\n5. If you wanna derive your cell from `Cell::Rails` you need an `ActionController` instance which is not already available in router context.\n\nLet me know how I can help out further!\n. @kikorb Your solution is for Cells 3.x. In Cells 4, this will be as simple as\n\n``` ruby\ncell(:post, request: request) \n```\n\nor something like that.\n. I will close this issue as in Cells 4, we don't have any controller dependency anymore.\n\nYou can simply do \n\n``` ruby\nSong::Cell.new(song).()\n```\n. If you just want to have different views for `show` simply derive an empty cell and drop the overriding view into `app/cells/linked_cell/show.haml`.\n\n``` ruby\nclass LinkedCell < AvatarCell\nend\n```\n\nWhen you have different setups in your code, extract the code to a separate method and override it in the subclass, just as you did in your second example.\n. You can always render another state (method+view) using \n\n``` ruby\nrender :state => :show\n```\n\nor render another view (eh, view only) with\n\n``` ruby\nrender :view => :show\n```\n. Ah, now I understand you. You want to extend the view with the \"super\" view. One first step would be introducing a new state.\n\n``` ruby\nclass LinkedCell < AvatarCell\n\ndef extended_show\n  render\nend\n```\n\nIn the view, you could do\n\n``` haml\n= link_to ..\n= render :state => :show\n```\n\nAnother trick would be by extending the view in your cell state.\n\n``` ruby\nclass LinkedCell < AvatarCell\n  def show\n    render_state(:link) + super\n  end\n\n  def link\n    render # add the link here\n  end\nend\n\n\n```\n\nIt would be cool if you could call the super view in your derived view, like you proposed.\n\n``` haml\n= do something\n\n= render :super\n```\n\nLet me think about that!\n. I played around with this a bit, I can see some new feature in cells similar to the one I proposed above. However, no urgent need to fix this right now, right? ;-)\n\nYou could do the following.\n\n``` haml\n\ndo something\n\nrender :file => \"super_cell/state\"\n```\n\nHowever, it would be cool if cells provides this for you so you don't have to know the super name. Does that work?\n. Also, I'd love to have a consistent API differing from Rails.\n\n``` ruby\nrender :view => \"state\" # render cell's view or inherit.\n\nrender :view => \"some_ascendent/state\" # render inherited view up from some_ascendent's inheritance chain.\n\nrender :view => super_view_for(state) # like above but you don't have to know the ascendent names.\n```\n. Try out the `:file` thing, it will work for you.\n\nWhat do you think of the proposed API with `:view`?\n\nYeeaaah, 2.0!!!! :+1: \n. render_cell \"admin/articles\", that is a Rails convention ;-)\n\nOn Fri, Nov 30, 2012 at 1:49 PM, Alexander Podkidyshev <\nnotifications@github.com> wrote:\n\n> Hi.\n> I can do this:\n> rails generate cell admin::articles index\n> , but this\n> = render_cell :admin_articles, :index\n> generates error\n> uninitialized constant AdminArticlesCell.\n> \n> Is it possible to get access to this cell?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/145.\n. Hi Luc,\n\nwhat exactly should happen when you click that link? Do you want to reload\nthe widget with the new state? Then you should take a look at Apotomo (\nhttp://apotomo.de). Tell me what you need (request-wise), maybe we can do\nthat simply with cells?\n\nCheers\n\nOn Tue, Dec 4, 2012 at 4:28 PM, Luc notifications@github.com wrote:\n\n> Hi,\n> \n> I'm following several tutorials on Cells components for Rails and did not\n> found how to add a link to another view from within a cell's view.\n> \n> I have the \"Test\" cell. Inside this one, 2 methods:\n> - show\n> - configure\n> \n> Within the show.html.erb I'd like to add a link to the configure view (and\n> vice-versa), what is the syntax to use ?\n> \n> I tried:\n> <%= link_to :configure, :action => :configure %>\n> \n> or\n> <%= link_to :configure, :cell => :test, :action => :configure %>\n> \n> but this does not target the cell controller.\n> \n> Any idea ?\n> Thanks,\n> Luc\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/146.\n. Well I usually point people to Apotomo as soon as I hear the word\n\"dashboard\". It is simply cells with interactivity (AJAX) that comes out of\nthe box. Check the first introducing screencast! If you have questions,\nmail me or on the mailing list:\nhttps://groups.google.com/forum/?fromgroups#!forum/cells-and-apotomo\n\nOn Wed, Dec 5, 2012 at 9:30 AM, Luc notifications@github.com wrote:\n\n> Hi Nick,\n> \n> Thanks a lot for the quick reply !!!\n> In fact, the whole thing I need to do is a platform that runs several\n> widgets.\n> My first though is to have several views for each widget:\n> - show (display info to the user)\n> - configuration\n>   This is pretty much similar to igoogle or netvibes for instance.\n>   For now on, I need to check if this is possible (and also if this is the\n>   good approach).\n>   I came across Apotomo yesterday and definitively find it really\n>   interesting, I still need to follow the tutos to see if this can fit my\n>   needs (I'm pretty much sure it will).\n> \n> Thanks for your help,\n> Cheers,\n> Luc\n> \n> On Wed, Dec 5, 2012 at 9:14 AM, Nick Sutterer notifications@github.comwrote:\n> \n> > Hi Luc,\n> > \n> > what exactly should happen when you click that link? Do you want to\n> > reload\n> > the widget with the new state? Then you should take a look at Apotomo (\n> > http://apotomo.de). Tell me what you need (request-wise), maybe we can\n> > do\n> > that simply with cells?\n> > \n> > Cheers\n> > \n> > On Tue, Dec 4, 2012 at 4:28 PM, Luc notifications@github.com wrote:\n> > \n> > > Hi,\n> > > \n> > > I'm following several tutorials on Cells components for Rails and did\n> > > not\n> > > found how to add a link to another view from within a cell's view.\n> > > \n> > > I have the \"Test\" cell. Inside this one, 2 methods:\n> > > - show\n> > > - configure\n> > > \n> > > Within the show.html.erb I'd like to add a link to the configure view\n> > > (and\n> > > vice-versa), what is the syntax to use ?\n> > > \n> > > I tried:\n> > > <%= link_to :configure, :action => :configure %>\n> > > \n> > > or\n> > > <%= link_to :configure, :cell => :test, :action => :configure %>\n> > > \n> > > but this does not target the cell controller.\n> > > \n> > > Any idea ?\n> > > Thanks,\n> > > Luc\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub<\n> > > https://github.com/apotonick/cells/issues/146>.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/apotonick/cells/issues/146#issuecomment-11032888>.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/146#issuecomment-11033249.\n. You inspired me to make Apotomo simpler: https://github.com/apotonick/apotomo/issues/77\n\nWould it be helpful to have that behavior in Cells directly? `cells-interactive` or something? I guess it would be a cool addition in a separate gem since a lot of people seem to be scared of Apotomo although it is just a thin layer on top of cells.\n. Hi Mateusz! I am working on the fix right now :-)\n. Please check if 3.8.7 works for you: https://github.com/apotonick/cells/commit/168fbc7ae9b179b36ef524b786a5b22573f5242a\n. The 3.8.8 release might help!\n. Engines support is still missing for Rails 4. Unfortunately, we don't have a test case for that.\n. Why didn't you say a word? I simply forgot about that patch, sometimes you guys gotta refresh my memory! ;-)\n. The appending behavior is the intended semantic. We don't do internal buffering and the like as it is implicit and less versatile. Why don't you try this?\n\n``` ruby\noutput = []\n\noutput << render(view: :facebook) if need_facebook\noutput << render(view: :twitter) if need_twitter\n\noutput.join(\"\")\n```\n. I am in the process of re-thinking the initializing flow and will share my thoughts in this thread - thanks dude!\n. `Builder#create_cell_for` now propagates the options to the constructor: https://github.com/apotonick/cells/blob/285dc0230e5a7c8b837448237e73b7a59155dfaf/lib/cell/builder.rb#L53\n\nIf you wanna grab a cell instance in your controller/view, use `#cell`.\n. So good to hear! And thanks for the feedback. If you run into any trouble with the experimental stuff, don't hesitate to post it - I promise it won't take another 9 months :grin: \n. In a couple of days I will release cells with #global_content_for which\ndoes exactly what you want.\n\nOn Sat, Feb 23, 2013 at 1:53 AM, yasirs notifications@github.com wrote:\n\n> I have the same issue.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/152#issuecomment-13946629.\n. https://github.com/apotonick/cells-capture\n. [Note: I might move this discussion to my blog since I find this really important.]\n\nTwo problems with `content_for`.\n1. You're changing state of a global (brrr) variable from a well-encapsulated cell.\n2. A cached cell will mess up the global (brrr) as you expect the cell to set something but it actually doesn't (cache hit).\n\nI would prefer something explicit like the following.\n\n``` ruby\nrender_cell(:bassist, :play) do |cell|\n  content_for(:global_js, cell.js)\nend\n```\n\nHere, `content_for` is used where it should be, in the ActionController's view, whereas the cell has a separate - uncached - state that just returns the JS, ignoring the cell's caching.\n. Added a blog post: http://nicksda.apotomo.de/2013/02/cells-got-content_for-support/ - please continue the discussion there.\n. Does that work without RSpec?\n. Well... `#in_view` is supposed to return a string of the rendered content -\nis that what you want?\n. The `#in_view` method is only meant for testing helpers and the like, sorry :-) I am sure you can create a `simple_form` object manually but the rendering won't work outside of a template. What are you trying to do (just curious)???\n. That is indeed a good question. You could go with an `ActionView::TestCase`.\n\n``` ruby\nclass FormCellTest < ActionView::TestCase\n\n  test \"form rendering\" do\n    simple_form_for subject do |form|\n      render_cell(:form, :show, form).should == \"...\"\n    end\n  end\n```\n\nDoes that work?\n. Well I would love to have cells controller-less but Rails still forces us to keep up that requirement. What we could do easily is providing `Cell::TestCase` as a module that can easily be used in `AV::TestCase`.\n. Closing this as view models cells make `in_view` unnecessary. You can simply call the rendering cell action in your test after converting the cell to a view model.\n. Correct use is `render :view => :no_results`.\n. How did you solve it (out of curiosity)????\n. Ah, ok, that's because `#form_for` needs a controller instance to compute the URLs. When calling `#render_cell` on this instance it's done for you automatically and therefore it works. Sorry for that clumsy controller instance propagating but that is a Rails design flaw not coming from cells.\n. Kind of, engines are part of Rails. It wouldn't make sense to add engines view paths to the abstract `Cell::Base`. I mean, if you're in trouble, let me know and we can change this.\n. The ApplicationHelper#current_user method does of course access the cell's\ninstance variable @current_user and not the one from the controller - this\nis exactly why I keep telling people that helpers are shit :-)\n\nPass the current user into the cell!\n\n``` ruby\nrender_cell :notice, :view, current_user\n\nclass NoticeCell < Cell::Rails\n  helper ApplicationHelper\n  def view(current_user)\n\n   @current_user = current_user\n\n   render\n  end\n```\n. Hi @cedrics, the master line now contains tests for engines.\n\nHere's the engine: https://github.com/apotonick/cells/tree/ed5963d9f9b79883d73b071a1fd1430e0f001249/test/dummy/label\nAnd here a test: https://github.com/apotonick/cells/blob/ed5963d9f9b79883d73b071a1fd1430e0f001249/test/rails/integration_test.rb#L49\n\nCan you add a state/view to the engine and write a test that fails without your fix, please? Thanks buddy!\n. On purpose! We explicitly _don't_ want caching _in_ the view but on the cell instance. If you have a fragment you wanna cache, extract it to a second state.\n\n``` ruby\nclass CommentCell < Cell::Rails\n  def show(comment)\n    @comment = comment\n    render\n  end\nend\n```\n\n``` haml\n# show.haml\n= @comment.title\n\n= @comment.text\n```\n\nLet's say you wanna cache the second line (for whatever reason).\n\n``` ruby\nclass CommentCell < Cell::Rails\n  def show(comment)\n    @comment = comment\n    render\n  end\n\n  def text\n    render\n  end\n  cache :text\nend\n```\n\n``` haml\n# show.haml\n= @comment.title\n\n= render state: :text\n```\n\n``` haml\n# text.haml\n= @comment.text\n```\n. https://github.com/apotonick/cells#cache-options\n\nThere's also a method to expire a certain key but I would highly recommend expiring caches by incrementing a cache key instead. My book talks about that in detail: https://leanpub.com/trailblazer\n. I'd merge your PR instantaneously if you'd send one!!!!\n. Thanks, what does that change? Did you run into any problems without that patch?\n. Sorry for disappointing you, @blankyao but this is no longer necessary with Cells 4. Thanks for your work!\n. @lulalala Can you provide a small example where the delegation of `config` is triggered (e.g. by calling one of those helpers)? That'll be great, I will merge the test (@kuraga ;-) and fix `Cell::Rails` to provide it!\n. Hm, I had another look at it and I believe it should just work by deriving the mailer from `Cell::Rails` as there is no request dependency. What happens when you do that?\n\nAnd, please, do create a test `test/mailer_test.rb` so I can play around with it - Thanks man!\n. Wait a minute - `delegate` is inherited, it just creates instance method when the class is evaluated (\"compiled\"). But as I could see this is not the problem, since `config` is not really dependent on request anyway. So what was the problem then? ;-)\n\nThere is a dummy test app in cells which is used for testing the Rails bindings: https://github.com/apotonick/cells/tree/master/test/dummy You can add stuff here if you need.\n\nI'm pretty sure we already have a test for `config`, btw: https://github.com/apotonick/cells/blob/master/test/rails/cells_test.rb#L80 Not a really strong test, thou.\n\nIt would be awesome if you could try adding a cell mailer to the dummy and then run it in `mailer_cell_test.rb`.\n. Cool! Thanks for catching up here, I'll look into it :headphones: \n. Cells 4.0 won't have the request/ActionController dependency anymore, which will basically allow you to use `Cell::Rails` as a mailer (still having `#assets_path` etc). Will that help?\n. You can still define `Cell::default_url_options` or set it in the `config` (can you? Good point actually).\n\nI don't know why I didn't remove that dependency earlier, like... 3 years ago :/\n. How was your holidays? cell-4 branch not ready, yet.\n. In Cells 4, we don't have an ActionController dependency anymore, you can use the cell directly.\n. Thanks @graysonwright for fixing that!\n. This is the desired semantic when rendering a cell. Passing the arguments into the method in a functional style avoids internal state. We call that `state-args` - why do you think this should be changed?\n\nIn an upcoming version of cells we have a more view model-like way to render cells which might be exactly what you want! :-)\n. Aaaah, thanks man! :heart: \n. You need to install `rspec-cells`.\n. In `development`, caching is turned off per default! https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L40\n. And in Cells in the view-models branch ;)\n. I'm gonna release a new version when the new view model branch got merged. Thanks, Alex!\n. We will deprecate `Cell::TestCase` soon and just provide a module so you can inherit from whatever you want. Actually, the module is [already there](https://github.com/apotonick/cells/blob/master/lib/cell/test_case.rb#L86), try including it in your class.\n. Just out of curiosity - where do you put your cells?\n. I'd love to hear more about that \"cells-like components including assets\"!\n. Wow, lots of questions:\n1. How do you set your cells view paths?\n2. How does Rails' autoloading find the cell in that directory?\n3. Do you use Cells' view model dialect?\n4. How do you render the coffeescript/js/etc files from the cell?\n. The standard cache key is computed here: https://github.com/apotonick/cells/blob/master/lib/cell/caching.rb#L65\n\nIs including the template's MD5 a new feature in Rails 4? Please educate me.\n. Well you can always compute your own cache key with the MD5 of the\ntemplate. Not sure how to get that, thou. Is that a feature you definitely\nneed? Anyone?\n\nOn Thu, Dec 12, 2013 at 12:31 PM, PikachuEXE notifications@github.comwrote:\n\n> There is a gem called cache_digesthttps://github.com/rails/cache_digests\n> But I don't know if that could work on Cell (since it's using controller)\n> \n> I updated a template for a cell and but since the cache key remains\n> unchanged (record not updated)\n> The cache is still valid and requires an explicit key (version date or\n> something) to expire it\n> \n> I want to see if there is a way to auto/semi-auto expire the caching when\n> template is updated\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/188#issuecomment-30382142\n> .\n. We actually have a method to expire a cache! It's in the `Caching` module. Maybe it should be easier accessible?\n. Why do you find the template manually? How can you make sure this is the same template that actually gets rendered? Your idea is great, however, we should find a way to use the actual template found by Cells and compute the digest using this very instance.\n. @PikachuEXE Any help needed here? Or can we close this?\n. I don't understand this feature. \n- Does it mean the cache key should be the \"MD5 sum of the template file\" (whatever that means)? \n- How do you know which template will be rendered when computing the cache key?\n- What's the purpose? To cache a template until the file changes?\n. Ah, so the MD5 is automatically included in the cache key?\n. Yeah but how do you know that it's gonna be the `show.haml` file in the versioner? You only know the used template for sure until you run the state.\n\nI have an idea how we can provide that optionally.\n. @reneklacan We could talk to Rails core about changing their API for `Digestor` so it doesn't have to be ugly anymore?. I don't understand - what's the problem? If you want to test your caching, turn it on? :smile: \n. Can you paste your cell class here?\n. We could give the caching layer some love, I haven't touched it in years.\n\nWhat if you would test your versioner like that?\n\n``` ruby\ncell(:text_links_in_comments).send(:versioner, options)\n```\n. What do you wanna test?\n. So, basically, you wanna \"test\"/invoke that line: https://github.com/apotonick/cells/blob/master/lib/cell/caching.rb#L85 when you're working on your cells?\n\nWe can't simply run `#state_cache_key` or the like as this will break stuff. Also, when I turn off caching, I don't expect _any_ code related to caching being run.\n\nI think you should have some dedicated tests where caching is turned on where you call `#render_cell` with all possible permutations of options, and then assert different view states.\n. Tests should run now with a simple `rake`.\n. Tests are fixed in 3.9.1.\n. @aalbagarcia The current master is CI'ed against 4.0.2 and works! Can you double-check?\n\n@xdite Thanks honey, I started working on that. What we need is a test with a Rails engine, we don't have that, yet.\n. Cells 3.9.1 works with Rails 4.1.\n. Sorry not a big fan of this badge overloading. A good gem's builds should be always green :grin: \n. I'm sorry, I can't merge that. It would change the expected API: When caching is turned off, I don't expect _any_ caching code to be run. This PR would run the versioner anyway.\n\nMaybe we should try to find some test helpers instead to make asserting your caching easier with cells?\n. Wouldn't it make more sense to have separate tests for non-cached and cached setups? I might be wrong, but supposed I had a cell with cached states I'd write explicit tests for the caching where I switch it on.\n\n``` ruby\ndescribe \"#show with caching\" do\n  before { caching_on! }\n\n  it \"renders cart\" do\n  end\n\n  it \"renders old cart even when changed\" do\n    cart.items << beer\n    cell.render_state(:show).must_equal ...\n  end\nend\n```\n\nAre we on the same page?\n. Sure! Check out how we do it in the tests: https://github.com/apotonick/cells/blob/master/test/rails/caching_test.rb#L29\n. Hi Josh,\n\nusing state-args (e.g. passing user explicitely, as you do) is good style, as it removes \"magic\" behaviour: You're using pure Ruby to inject dependencies in your encapsulated cell.\n\nThe benefit from explicit code is, tests and production code work exactly the same: The cell doesn't care about the environment as long as you pass it the `User` instance. In the standard Rails stack, this is different: There's dozens of lines of code to make Devise work in tests. I personally find this wrong.\n\nI haven't looked at Devise in a long time, but it seems it is still designed very monolithic, relying on global variables like `current_user`, etc. You have to go the clumsy way here and use `helper_method` to import it into Cells.\n. The \"environment stuff\" you mention are global variables. They might seem handy at first glance but cause endless trouble in tests, threading, isolated components, etc. :wink: \n. You have to do that yourself, Cells is a very minimalistic view component framework. I was thinking about making the transition from Cells to Apotomo easier: https://github.com/apotonick/apotomo/issues/77\n. Thanks! An example in form of a **test** would be great!\n. This is already working in Cells!!! Just use a block and return an array of key elements:\n\n``` ruby\ncache :show do |cell, options|\n  [cell.id, options.hash]\n```\n. I understand, we already have the concept in `cache_options`, but you want that to be a lambda and execute that at run-time?!?!\n. This is because we include all URL helpers into each cell: https://github.com/apotonick/cells/blob/master/lib/cells/railtie.rb#L7\n\nI personally hate the way those helpers are implemented in Rails and don't wanna spend another single minute on looking through how Rails kills object-orientation with it's 500 helper modules. This sounds like a feature that has been added recently to Rails, thou, if you find out how engines import there own routing, only, I'm happy to merge it.\n. Ah, thanks! You see, the code is horrible?! Do you know since when `#railtie_routes_url_helpers` is around? 4.0?\n. However, thanks for finding this!!! :heart: \n. That code is ridiculous. I am not sure if I am gonna support this in Cells 4.\n\nThe good thing is we don't have the problem with \"wrong\" helpers being included into Cells, as you have to explicitely say which helpers you want.\n\nThe bad news is we would need a switch where we either include the app's Url helper module, or only the `define_method(:railtie_routes_url_helpers) { railtie.routes_url_helpers }` bullshit one.\n\nOh man, how I fucking hate Rails and its helper system.\n. Cool. @dreyks, I will document that as this looks like the cleanest way to solve this.\n. This should go to [`rspec-cells`](https://github.com/apotonick/rspec-cells/)! Was `has_content?` removed in Capybara just recently? I'd appreciate any help here as my rspec knowledge is zero.\n. Can you please check out rspec-cells 0.1.10 (just released)? That should fix this. Are you using Capybara in the first place?\n. Haha, sorry, I don't understand what I was trying to say, I guess something like \"do you use Capybara at all\"?\n. It's not a gem, it's an attitude! :grin: \n\nYou might wanna check out [Apotomo](http://apotomo.de) as well, which is interactive Cells. Regarding JS frameworks, I'd definitely use them when it comes to more complex UX. However, I can see cells/widgets back an Ember widget.\n\nWhat people often do is hook a cell directly to a controller route and use this as an ember widget backend. The initial rendering comes from the cell, then AJAX requests update the ember pendant. This is very close to a real MVC architecture.\n. This is a secret but I'm gonna tell you anyway: cells-widget is gonna be all the good parts of Apotomo combined with Cells. I am expecting JS framework integrations from that project. :rocket: :guitar: \n. Hey @kuraga, good to see you back!!! :smile: \n\nUhm, the reason there's two modules `Cells` and `Cell` is that\n1. `Cells` is the \"gem\" module that contains generic code that doesn't really fit into 2. (e.g. ActionView extensions).\n2. The name `Cell` reflects the domain concern way better than `Cells`, I'd find it weird to have a `Cells::ViewModel` as I don't like plural class names in general when speaking about an entity.\n\nI agree that we could look over the Railtie location etc, but I definitely don't wanna merge the two. Do you find it confusing?\n\nBTW - I had some ideas this weekend for making a cell behave like an Apotomo widget, so stay tuned, I will need your help!\n. Yeah, and I partly agree with you. The gem name should simply be `cell` and everything would be good. You made me think now, maybe it would really be less confusion if everything was in `Cell`?\n. A lot of stuff looks complicated because of the `parent_controller` dependency in `Cell::Rails`. In order to keep the code _clean_ the `Rails` cell needs to hook into several steps, otherwise we'd have to copy code (e.g. for builders).\n\nThen there's a couple of features (e.g. `Caching`) that is _not_ hardcoded in the core code but included as modules. Without knowing the core, it might be hard to follow, but that's a common principle accross all my gems and also used in many other projects.\n\nIn addition to that, there's helpers and stuff that doesn't fit into the `Cell` namespace, like ActionView extensions, the Railtie and all that stuff.\n\nWith Cells 4.0 it will get a lot easier as we don't have the fuckin' `parent_controller` bleeding through anymore. In other words, `Cell::Rack` and `Cell::Base` get redundant.\n\nGive me an example what you find dirty about the existing code!!!\n\n---PS: Another complication might be the `VersionStrategy`. Cells is compatible with Rails 3.0, 3.1, 3.2, 4.0 and 4.1 so far and that's something we should be proud of.\n. Oh BTW, Cells 4.0 **will** be compatible with the existing API (unless you use `Cell::Rails.new()` directly) it's just gonna be simpler!!! :grin: \n\nSorry for all those changes, I didn't know you were secretly working on a fork :surfer: \n. Alex, I haven't forgotten your justified criticism and I want to present you an almost-stable version of [Cells 4.0](https://github.com/apotonick/cells/tree/4-0-no-actionview). It is incredibly simplified. What do you think?\n. Whoops I totally missed this comment. Why did you close that, I liked your work?!\n\nWhy drop support? I originally wanted to \"fade out\" support for older Rails by simply not back-porting new stuff (e.g. view models don't work with 3.0 afaik).\n\nI'm currently cleaning up in master as I'm moving towards 4.0 - should we discuss that based on the 4.0 code?\n. Hihi, I tell you a secret: I use latest Cells with old Rails versions in legacy apps :grin: \n. I agree with you on dropping support to make the code more streamlined. Anyways, it is only minimal effort to support older Railses and somehow this makes me a bit proud :wink: I'll go through it tonight and see what we can do.\n\nThanks for the input, man, I appreciate that.\n. No no, it's good that you addressed this. I'll go through it and let you know later. Thanks again, Abdel :heart: \n. Thanks! Was completely outdated anyway. The new websites will all go to trailblazerb.org.\n. Thanks, I'm still \"waiting\" for my hoster to 1.) Get my blog back running and 2.) delegate *.trailblazerb.org to that server :(\n. I added a gh-pages generated branch to trailblazer - anyone keen to set up a landing page that explains that Cells is part of Trb and the site is gonna be updated soon, etc.?\n. Hahahahaha!\n. You guys are hilarious! :laughing: \n. Yepp, Cells are _view_ models and don't know anything about HTTP or Excel.\n\nReturn the rendered data from the Cell and do the request/environment-specific stuff in the controller (that's the only reason a controller should exist).\n\nCall your view model like that.\n\n``` ruby\ncontent = cell(:spreadsheet, format: :csv)\n```\n\nAnd here's the implementation.\n\n``` ruby\nclass SpreadsheetCell < Cell::ViewModel\n  property :format\n\n  def show\n    \"this;is;csv\" if format == :csv\n```\n\nLet me know if that doesn't work for you.\n. Ok! Yeah, you need to use `:partial` (is that documented?).\n\nCan you enlight me why you'd want to render a global partial in a cell, though?\n. Interesting. So you just passing the partial symbol, like `:header_v2` and then render in the cell? I understand, since that is non-cell stuff these views don't go into the cell.\n\nThat's a really interesting use case, I'd like to make that simpler in general. Do the partials need to be partials or could they be cells, again (different cells, for each controller)?\n\nCould you add a quick section about `:partial` in the README? Thanks :fireworks: \n. Thanks!!!! :heart: \n. Hey,\n\n1) Absolutely no idea. Cells are just parts of your view and will be rendered with your page. So, that should work. I personally find turbolinks one of the worst ideas ever and wouldn't use it at all. If you want AJAX widgets, check out Apotomo, which works on top of Cells.\n\nThe Apotomo approach is a bit more work as you need to define widgets, but you get to control _what_ updates _when_. Give it a go, I love it!\n\n2) A very old one, sorry :) The Trailblazer example app will contain an in-depth example of Cells as a view model. This is completely unrelated to other Trailblazer concepts, so you will easily be able to extract the knowledge you need.\n\nAlso, the book will contain a huge section about Cells. I'm sorry I'm not providing more docs atm but it's impossible for me to maintain all those gems and provide example apps at the same time. Maybe you want to help?\n. Byron is horrible, just came back from the surf and the waves were too big and it's way too warm for winter!!!!\n\nDefinitely come back to Rails - with Trailblazer, a new wind is blowing, you're gonna like it.\n\nLet me know if I can help you with Cells. I should be able to work on the demo app for TB in about 2 weeks.\n. :+1: :+1: :+1: :+1: :+1: :+1: \n\nAnd Reform forms for forms and contracts, and representers for your APIs and Operations for your domain logic!\n\nAre you Aussie?\n. It's a tough job, but someone's gotta do it... :wink: \n. Hmm.... yes and no. I had the same idea, but then realized that it's totally fine to use Cells and the concept file layout without any other Trb feature, so I decided it's ok to \"bundle\" it into the gem.\n\nSince Trb is a mash-up of Cells, Reform, etc., I was planning to put trb-specific _extensions_ to the latter into the `trailblazer` gem itself, instead of having one gem per layer. Also, I try to make the new features available to \"non-trb\" Rails projects, so \"conventional\" Rails users can take advantage of the concept file layout without having to install trailblazer, for instance.\n\nI don't know if that makes sense :) Do you see any issues with the concept cell generators being part of cells itself?\n. Wait, what do you mean? Cells does have a Trb dependency? That's wrong, as you say, this shouldn't be the case!!\n. Ok that makes sense. I have to work on the generators anyway so I might correct that. Thanks!\n. Hm... that doesn't make sense. Can you look into that? Maybe that generator shouldn't be loaded? https://github.com/apotonick/cells/blob/master/lib/generators/test_unit/cell_generator.rb\n. Thanks for looking into that, Dmitry!!! How does Rails do that? Doesn't Rails have test-unit support out-of-da-box and then \"hides\" it if rspec is loaded? Maybe there's a switch when requiring the task?\n. Please reopen in cells-rails.\n. This is a haml bug I fixed here: https://github.com/haml/haml/commit/6d4558034c061990c76393331002767eef5a4034 Try upgrading haml? Also, if that doesn't work, could you please provoke the same error with ERB? Thanks!\n. I had a similar issue a while ago, and it was AV's output buffer handling. I can't remember the details but a problem was that everything relies on a global buffer, which is not present in encapsulated cells. \n\nWhich Rails version are you working with?\n. Cool! How did you manage to get that method body? That's a great idea to debug that! I had a hard time following through the flow with `puts`, etc.\n\nYes, if you can find out what's the problem, that'll be great. Remember, we can change things in Rails core, too. \n. Great man! When I played with it a while ago I ended up _not_ using a buffer variable but returning the buffered output, or I injected a buffer instance instead of using a global one (damn, can't remember).\n\nLet's try it out in cells, if it's cool we can push it to the rails core - I'm pretty sure they like that to be cleaned up.\n. I am planning to completely replace ActionView in Cells with a minimal implementation using tilt (probably a couple hundred lines of code, not 5000+).\n\nThe AV gem is unnecessarily bloated with all kind of crap code that has survived a decade and no one really cares about it. I don't want to waste my time working with this anymore (I tried my best in the last years, but nothing changes on the Rails side) so why don't we just use a clean view template engine and build our stuff around this?\n\nThis will still allow using all the helpers, etc. we just don't have to fight with AV's implementation anymore.\n. Why, we can provide our own buffering? As far as I remember, that was kinda built-into tilt itself?! I played around with that idea years ago and it worked!\n. I had a look into cells today and I realized how long overdue this AV replacement is - we only need template finding from AV, everything else is implemented in tilt. It's gonna be fun replacing it!!!!!! :dancer: \n. Nice explanation, thanks @Iazel!\n\nSo why is the block bound to the cell's context? Can't we make that explicit, so we can inject/pass any buffer? I wanted to fix that a long time ago as the Rails implementation is unusable in non-monolithic setups as with cells. Good to have you on board!\n. I think I'm getting closer with Cells 4.0 and this output buffering. Can you please look into this test https://github.com/apotonick/cells/blob/4-0-no-actionview/test/vm/render_test.rb#L60, you seem to know everything about buffering!\n\nAlso, this simpler code, would that help you in achieving what you need?\n\nBesides that, Cells 4.0 is fucking amazing, so little code and 3x faster!!!!!!!!!\n. We should change the form helpers, capture and content_tag to do it the way Sinatra does it: https://github.com/cymen/sinatra-formhelpers-ng/blob/master/lib/sinatra/form_helpers.rb\n\nIt is so wrong to maintain this stupid output buffer. Why does HAML has to patch a helper method to make it work? I don't understand how so much kludge found its way into the core of those two great gems.\n\nI'll be back working on this later. Thanks so much for your help. Cells 4.0 is gonna be fucking awesome :heart: \n. @Iazel I strongly vote for you releasing your fork of ERB as a separate gem (ERBoo). We want to use it as an alternative for the patched mess from Rails in Trailblazer.\n\nAlso, we want **clean** ERB support in Cells as I met quite a few cells users who prefer ERB over HAML.\n\nAn additional benefit is that we can push all our fixes and clean-ups into your gem. If the original ERB decides to get up-to-date we can always merge back. But I guess it might end similar to HAML and Slim.\n\nPlease, go for it!\n. @Iazel Is there any way I can encourage you to release your ERB version? If you don't want that, can you move the ERB code you wrote in the render_test to a separate file and PR (I want it to be visible that this is your work, not mine)? We want to release Cells 4.0 and need ya!\n. I did, and that's the next big thing we're gonna roll out! :dancing:\n\nYou can also just move the ERB code from the render_test into a separate file (lib/cell/erb.rb). If you need help with releasing the gem, I've done that a few times.... :wink:\n\nHit me up on gtalk, apotonick@gmail.com, if you like?!\n. The ERB is fixed in cells-erb 0.0.2.\n. Cool! I have no idea what you're doing, though! :grin:\n\nI don't completely understand why we have to patch Erubis - is that to make that work?\n\n``` ruby\n<%= form_for .. do .. %>\n```\n\nWhy isn't this supported on a lower level? Haml does this out-of-the-box, right? Thanks @Iazel \n. Yeah, I saw the problem with Erubis and how Rails fixes it (with that preamble stuff). Thanks for pushing this into Cells 4.0 and make it work.\n\nHaml does blocks! I think it just has a problem with the way Rails uses capture, that's why they override it. I got it working now by [copying the capture code](https://github.com/apotonick/cells/commit/62d96c0938f751dd6d530195f3e83b9eae0d6ed6).\n\nThe only problem here is that the inner block is escaped because it's not a `SafeBuffer`.\n\nI totally do not understand why this is so messed up? Isn't it pretty simple? If a line starting with `=` is in the block, you capture that and then return it internally?\n\nWhat are we gonna do? Should we start talking to the Haml guys? They are awesome and really helpful. Maybe we can simplify this once and forever?\n. Wow! :heart: Is there a way we could pull your Erubis implementation into Cells without monkey-patching the existing, old one? I am absolutely up for your stuff!\n. You could just use another name for your implementation. I will use your ERB, then. No need to try to make old stuff work.\n\nBTW, the way we find and render templates also changes: A cell now has _one_ template engine, e.g. `haml`. This is per class. If you need to render something else, you can do `render format: :erb`. Reason for this is because in 99.9% an encapsulated cell needs exactly one template engine. You don't use 2 or 3 different for one widget (I do, but that's another story ;).\n\nThen, the way we escape will be different to Rails. We don't escape anything per default. This is hundred times faster than going through _every_ string and escape it. I am thinking of escaping on the method level.\n\n``` haml\n.header\n  = author_name!\n  = id\n```\n\nNot sure if the bang'ed method name will return escaped, or the normal one. However, the concept is to escape the reader's value and not _everything_. If people don't use readers it's their problem.\n\nThis will greatly speedup as we don't do a regexp per string! :fireworks: \n. I think the best would be to escape all un-bang'ed methods _in the view_. This could happen via a simple intermediate object only used _in the view_.\n\nIt basically would do what you suggest.\n\nHow can I turn off Haml's escaping?\n. BTW, if I use your gem than it will override Erubis globally - not sure if we want that?\n. You're awesome!\n\nSetting `escape_html: false` doesn't really help as escaping and `if`s are everywhere in Rails helpers. It's probably best to rewrite some of them (capture, tag helper, etc.) to have a clean state. As I said, I won't waste more time with that cobweb code...\n. Yeah, and I think most of it will still be usable even in our new Cells world - PLUS new development in existing gems will probably involve the simpler Cells way? Ditching Rails as too easy! :grin: \n. So, the recent changes allow Cells 4.0 to be fully used in a Rails 4.x environment + HAML!!! I haven't tested all ERB, yet, and some form helpers do not work with Rails <= 3.1.\n\nWe don't need any HAML/Rails escaping anywhere so we have to patch/change that in the original gems (as they escape everything everywhere 3x, it's such a mess!).\n\nAlternatively, we can just rewrite a couple of helpers and throw out all the horrbile hacks that were introduced over the last years.\n. .........it is gonna be fantastic, I love this branch already!!!!!! Thanks for your support :beers: :heart: :beer: \n. Thanks! Everything seems to work fine with HAML so far (Rails >3.1).\n\nThe HAML guys are great and if we explain our concerns they will merge it, right, @teeparham?\n\n@Iazel I would _LOVE_ to have better view inheritance without the need for a hundred files. We should discuss that in another thread?!\n. @Iazel This kind of view inheritance is already implemented in Cells since version 2.0. I want something more block-oriented, I think you had some ideas about that, too.\n. I always include the particular helpers modules into my view models - that's how it's designed to be (usually `FormHelper`, and so on).\n\nIt is absolutely ok to do that and in line with Cells' philosophy of encapsulation.\n\nThis will also help finding flaws in Rails helpers so they can be fixed for both Rails and Cells. As an example, we found lots of helpers that do escaping wrong. This wasn't visible in a vanilla Rails app but in an isolated environment it would break.\n\nThat's a good thing, so hopefully the Rails helpers will become cleaner. If you find problems, please ask me first, we can then communicate it to the Rails core team.\n. The correct way would be to change that in Rails and replace this incredibly fucked up URL helper system with something object-oriented and sustainable.\n\nI absolutely have no clue how the sprocket paths stuff works in Rails > 3.2 but as soon as I run into it I'll let you know.\n. Man, thanks for figuring this out. Ok, I understand, the problem is class settings that are not \"copied\" from the parent controller.\n\nYour way looks ok to me - the better way would be to provide an object to the cell that already keeps all those values, but that'll mean Rails had to use objects instead of blindly copying PHP-like helper methods onto other helper methods, dear god, objects, unheard of! :wink: \n. @incorvia I added a test for that here: https://github.com/apotonick/cells/blob/master/test/rails4.2/test/integration/url_helper_test.rb#L32\n\nThe cell sits here: https://github.com/apotonick/cells/blob/master/test/rails4.2/app/cells/song_cell.rb#L6\n\nAs you can see, this is a fully self-contained Rails app to test Cells. Could you make this test pass/fail? I don't know what your app setup is to make this `/assets` problem pop up. That'll be great for finding what's the problem.\n\n@gavinkflam I can't include them per default since people might not use sprockets. Sorry!\n. That is brillant, @PikachuEXE !!! Actually, the fix could be even simpler:\n\n``` ruby\nclass Comment::Cell\n  include Uber::Delegates\n  delegates :image_tag, :parent_controller\n```\n. Goooood boy! It is a stable dependency in cells with Rails.\n. Hahaha! No magic, it's an explicit option getting passed into the cell via the `#concept` helper: https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L10\n. Documented this fix here: http://trailblazerb.org/gems/cells/helpers.html#asset-helpers\n. In the controller, you might have to say\n\n``` ruby\nclass ApplicationController < ..\n  helper_method :image_tag\n```\n\nPlease note that this is Rails-specific, and I do not support Rails anymore.\n. Haha, you're good, use Rails, but be prepared for problems like this! :grimacing: \n\nDoes the `helper_method` work for you? Should I add that to docs?\n. Yepp! Suggestion is to open an issue on Rails- we can't do anything beyond providing a beautiful view layer. Sorry!\n. We probably could extract a lot of code into a new gem `cells-rails` that takes care of all those nasty hacks?\n. Please all use the https://github.com/trailblazer/cells-rails gem, it fixes all of the above problems.\n. Cells 4.0 is not released yet, I will try to finish it within the next days. Check the README, there's no such thing as `Cell::Base` anymore, only `Cell::ViewModel`! :grin: \n\nI will write a brief migration guide today, and, pleeease, go and try master, it would really help me!\n. Hey Alex, here's the new upgrade guide: https://github.com/apotonick/cells/wiki/Upgrading-Guide\n\nLet me know if you need further help.\n. Haha, right! :grin: \n\nThe second paragraph in the README says that this README is for Cells 4.0 and shows a link to the 3.x docs.\n\nIf you do `cell(:item)` it calls the `ItemCell#show` method, you do `cell(:item).call(:list)`, which is also documented :stuck_out_tongue_closed_eyes: !\n\nI will fix the README ASAP and your valuable input is appreciado mucho mucho hombre!\n. Guys, please _READ_ the README. There is no `Cell::Base` in master anymore! This is also documented in [CHANGES](https://github.com/apotonick/cells/blob/master/CHANGES.md#400) and in the [Upgrading guide](https://github.com/apotonick/cells/wiki/Upgrading-Guide).\n\nOne of the few things I like about Rails is the way master is treated: It's the development branch everyone works on.\n. Is that pizza?\n. @LinkedHK Check out this: https://github.com/apotonick/cells/wiki/Upgrading-Guide\n. Ah, sorry! `#render_cell` is gone in 4.0! This is to avoid confusion.\n. Thanks! That hasn't been fixed, yet. Sorry! :stuck_out_tongue: \n. ``` ruby\nCell::ViewModel.template_engine = \"slim\"\n```\n. Thanks so much for trying out master. Sorry that I haven't fully documented.\n\nHit me up on IRC, freenode #trailblazer channel or on gtalk!\n. That sounds like two unrelated issues, @nacengineer. This ticket was about \"activating\" the template engine for a cell before 4.0 was released.\n\nYou want to use two engines in one project. The problem here is that each gem (cells-haml, etc.) will try to include itself into `Cell::ViewModel`, so the last one wins.\n\nWe can't simply provide multiple engines with an option in `#render`, as every template engine needs different helpers to be patched (again, this is not my fault) which implies the cell to include those helpers.\n\nThe only real solution is to suppress Cells-in-Rails-mode to automatically include those engines and let the user do it, but then people will complain that this is \"not convenient\". See the problem? What do you think?\n. @sveredyuk Which Cells version?\n. It looks as if your added view path `engines/core/app/cells` is not applied to your cell? Can you see that it's not printed in the exception?\n. Can you come join us on the Gitter channel, please? https://gitter.im/trailblazer/chat\n. Cool, thanks so much!!!!!! :heart: \n\nPlease, please, please, do that ERB gem - I will use it 100% in Cells and you will have many testers and downloads!!! :grin: \n\nDon't say \"when you got time\", that never works. Start this week!!!!!!!!\n. You sound like you're my man! :laughing: \n\nTarget repo? When cloning?\n. BTW I have the same problem - I know exactly what you mean.\n. All good, the `4-0-whatever` branch is merged into master! I actually don't know how to PR to another branch but the commiter (me) can always manually merge it into a particular branch.\n\nFor example, if I wanted to merge your stuff in `4-0`, I do the following locally.\n\n``` bash\ngit checkout 4-0\ngit pull https://github.com/Iazel/cells erb_with_block\n```\n\nYour stuff is then merged into the current branch. It will be in master anyway!\n. @Iazel Thanks again, I will add more tests for your ERB now.\n\nNext time when you work on a branch, do the following before considering to PR.\n\n``` bash\ngit fetch\ngit rebase origin/master\n```\n\nThis will apply all the \"news\" from GH master into your local branch. Thanks again, I hope this makes ERB work like a charm.\n\nHow is your new gem going? Need any help?\n. Oh, I added a test with `form_for` which uses `capture` and it worked. Are you sure? I hate the way the capturing works ATM, with this stupid `@output_buffer`, could be done so much simpler.\n\nBTW, we can go an talk to the HAML and Slim guys, I'm confident they're happy to work on a simplification of all that. At the same time, we started work on ActionView \"rewrite\". Not sure how far this will go, but I can pull in a simpler output buffering for sure.\n. Can you link to that PR here? Thanks!\n. We can leave it open - this is generally a good idea and probably what most people do anyway. I just don't want to merge it now before we have an agreement on the naming.\n\nThanks for all your work! :dancer: \n. :heart: \n. @azapps Thanks for trying out master - we're still working on some parts, but if you have questions, feel free to email me directly!\n. Hey Braden!\n\nThis is not implemented, yet! We have to hook into the Rails \"reload\" event and expire `@templates`. If you're keen, you can help me by finding out which Rails notification we need to hook into!\n. Cool, thanks! I don't think we have to dig that deep - There must be a public hook for AV reload events somewhere.\n. Hey thanks, this is really nice of you but the API for tests has changed, no `#render_cell` anymore :grin: \n. https://github.com/apotonick/cells/wiki/Upgrading-Guide#render_cell-helper\n\nCells 4.0 is still alpha, though (I use it in production anyway haha).\n. This is fixed in cells-erb 0.0.2.\n. This is now a confirmed bug in cells-erb and cells-haml. I am closing this as we have duplicate issues.\n. You have to activate haml via `Cell::ViewModel.template_engine = \"haml\"`. Does that help?\n. Hey Jerry, thanks for reporting. Yeah, I decided you will never ever have a cell with multiple engines (you can, if you want) as this also makes the code simpler.\n. Fixed in master.\n. Yeah, add it if you need it for 3.x. This is all so much simpler in 4.0, really can't wait to push it!!!\n. What do you mean, I thought you were gonna check docs after I pushed :wink: ?\n. Your english is great! :grimacing: Cells 4.0 is not yet released, you can use master branch or the 3.11 line. Sorry for that but we have to fix some stuff in the template engines.\n. I know it's confusing, and you're right @Undistraction - we should put the \"Note for Cells 3.x\" section under the installation instructions. :smile:\n. I wouldn't set an instance variable but define a reader, @timmi-on-rails.\n\n``` ruby\ndef items\n  @items = model.items_in_cart\nend\n```\n. BTW, issues are fine for questions, we just have to make sure to close them! :grimacing: \n. Thanks for this report, @mbajur. It's a bit of a mission for us since we have to fix a lot of technical debts that ActionView has accumulated over the past decade. Luckily, @seuros and @Iazel are working on a proper implementation for blocks in both HAML and, ERB. :grin: \n. This is fixed in cells-haml 0.0.2. Is that still a problem with slim?\n. Sorry to hear that, Corey. Cells has been extremely stable since 3.x so I'm not sure when was the last time you checked it out...?\n\nI thought the documentation clearly says the README is for 4.0. Maybe add a line saying \"not yet released\" or something? Would that help?\n\nYou wouldn't believe how much work it is to fix all the crap that Rails has messed up in the last years. Cells 4.0 comes without ActionView and we need to fix/remove a lot of things in template engines like HAML, where HAML monkey-patches Rails helpers to make them work due to bugs in Rails, and so on. It is incredible and we do our best to ship an awesome 4.0.\n\nA lot of people use the master branch in production already (me too), so give it a go!\n. That's because we're still working on the slim extension, @seuros can give you a heads up. Have some more patience with us!! :grimacing: \n. Uhm.... we have to actually change some code for Cells 4.0 to get rid of that warning. Is that what you're asking for?\n. @seuros Should we have a hack night this weekend (night for you, day for me or the other way round)?\n. I will come back to Cells the next week and then we will fix it.\n. Is slim working OK so far? Is it \"just\" this warning? Will look into it once I know more from you! :wink: \n. Hey @porbas can you do me a favour and convert all those files in here to correct slim? https://github.com/trailblazer/cells-slim/tree/master/test/dummy/app/cells/song\n. All tests passing now, released cells-slim-0.0.2. Please test and report bugs it the cells-slim repo. Thaaanks! :beers: \n. I will do it in a second!\n. Released 3.11.3 with @pwim's fix. Thanks! :heart: \n. What if people use Capybara, they don't need the `rails-dom-testing` gem (thanks @pwim for that hint!). Do you _have_ to include that gem when you use `Cell::TestCase` in Rails 4.2?\n\nCells 4 will soon be ready and doesn't have all this mess anymore, that's why we're not really focusing on a fix here, @balauru ! :beers: \n. You're using cells master, right? That's because we're still fixing the ERB bugs in Rails. Is that why, @seuros ? I need to merge PR that probably fixes this in master.\n. That is weird, what does better_errors do to crash ERB? I am pretty pretty sure @seuros is working on that!\n. This is fixed with cells-erb 0.0.2.\n. You have to include `ActionView::Helpers::FormHelper` into your cell, and then define `#dom_class` and `#dom_id` in your cell as an instance method. This is a dependency from simple_form or Haml, I don't know exactly why one needs this.\n\nWe can think about a cells helper module that provides that out-of-the-box but on the other hand I want to increase the pain so that users like you report to Rails  core and probably push them to remove those dependencies from core. :grimacing: \n. This is just wrong per design - why is a view component library supposed to fix these kind of template engine details. I really hope we can set a usable standard with `cells-haml` etc. and push that knowledge back to Rails core itself for ActionView5.\n\nI merged seuros cleanup, [cells/cells-4](https://github.com/apotonick/cells/tree/cells-4) is now the authorative source for our future work. Thanks to @seuros for his work on extracting template engine specific logic to gems! :heart: :beers: ah no wait, he doesn't drink alcohol.... :tea: \n. Why do you need that for cells 3 anyway, @PikachuEXE?\n. But... I don't understand... how is the `Concept` cell in Cells 3 related to HAML bugs that are fixed in `cells-haml`? In Cells 3, these fixes are shipped with the cells gem itself?\n. Would using cells 4.0 be a choice for you?\n. Ok, if your hacks work, then I'm happy. Sorry for the inconvenience - everything will be better in Cells 4.\n. You have to tell the formtastic guys to fix that in their code. They are not including necessary helpers in their modules and assume that everything is automatically/magically there, which is the case in Rails but not in Cells or in other Ruby environments.\n\nDo me a favour and open a ticket there, telling them to include the necessary modules in `Formtastic::Helper` (or whatever the name of the \"main\" helper is). I could add a fix to Cells, but this way, it will never be fixed correctly. :beers: \n. Hey Tom, may I enquire which Cells version you're using?\n. The rspec-cells version for Cells 4 is yet to be written - it will only be a few lines of code but someone's gotta do it! :wink: \n. This is fixed in the new rspec-cells 0.3 release.\n. Apotomo doesn't work with Cells 4, yet.\n. Sorry @dineshPallapa, not really - I would love to support Cells with Apotomo but don't have the time for \"experiments\"... :cry: \n. Hey David, thanks for that valid comment. The thing is, I completely change the semantic of a cell. In Cells 4 we get away from Rails and its controller-orientation to an actual _view model_.\n\nHere's the difference.\n\n``` ruby\nrender_cell(:song, :show, @song)\n```\n\nresults in \n\n``` ruby\nclass SongCell < Cell::Rails\n  def show(song)\n```\n\nThe song argument is passed into `#show` in the old dialect.\n\nNow, Cells 4.\n\n``` ruby\ncell(:song, @song).(:show)\n```\n\nIn Cells 4, the `cell` helper instantiates a cell with all the arguments, then calls the view state*.\n\n``` ruby\nclass SongCell < Cell::ViewModel\n  def initialize(song)\n\n  def show\n```\n\nAs you can see, you'd have to change your view states anyway (unless you patch).\n\nYou can surely introduce your own `#render_cell` helper that does exactly this behind the scenes (you can still do `cell(:song).show(@song)` but I have to warn you: The way helpers work has changed, some ActionView hacks are not gonna work in Cells 4, and many other things, such as a changed `#render` API.\n\nCells 4 is not meant to be a drop-in replacement for your cells 3 components - you have to migrate them manually in some cases. I can totally understand your concern and we will make this as painless as possible, but in order to smash this milestone we have to be aggressively changing, otherwise we will end up like other major \"MVC\" frameworks and keep treading water. :wink: \n\n*BTW, the call styles are documented in [my book](https://leanpub.com/trailblazer) in chapter 6 - I am gonna publish this chapter this week.\n. The solution might be to provide a `render_cell` compatibility helper.\n\n``` ruby\ndef render_cell(name, state, *args)\n  cell(name).(state, *args)\nend\n```\n\nDone. Hahaha, not sure if that works for each and everyone, though. :laughing: \n. I am glad you came up with that problem. Sometimes I am too focused on my \"innovation trip\" and forget about all the poor users who have to deal with my attitude. :laughing: \n\nWe added the `cells-3` branch so we can keep maintaining it. I just had a funny idea to allow both gem versions in one app (basically not a problem) but then we have to rename cells-3 to some other gem name.\n. @nacengineer Haha. Ehm, not sure how Haskell will save you from API changes, though? If you change the signature of a function in Haskell, you have to change your user code, too, don't you? Disabuse me as I haven't programmed Haskell in a long time. :hourglass_flowing_sand: \n\n@barttenbrinke Sorry to increase your workload. I had to change the public semantics - we needed to get rid of this \"Rails crust\" to keep innovating. The result is a super-lean core library now, some users reported rendering speed-ups of factor 2-3. :rocket: \n\n`#call` hasn't been removed - what makes you think so? Do you have specs for all your cells? If not, this is a good chance to write quick smoke tests, with Cells 4 it's even simpler now without all those hacks to make AV behave the way we want it in tests.\n\nI will try to add another section to the upgrade guide to address your trouble, @barttenbrinke. Also, make sure to join the IRC (Freenode) #trailblazer channel! :beers: \n. Haha, this totally is a forum and you don't rant but bring up valid points.\n\nPlease don't use Rails as an example for change. Rails hasn't changed at all in the last decade, it's still stuck in it's primitive \"MVC\" thinking where other communities have moved on a long time ago. Rails problems actually _is_ the obsession to be backward-compatible. This is why (what you call) \"API change\" in Rails means that AR scopes suddenly have a different naming scheme or callbacks can be stopped by emiting a special symbol.\n\nThis is not change, this is a cosmetic improvement. Still inconvenient, as you say, but superficial and absolutely not fixing the actual problems Rails has on an architectural level.\n\nAnyway, to come back to what you say. I don't think it's wrong to innovate. Innovation in programming means new structures, new objects (or functions) and new flows. And this means work for upgraders. :grin: I can't find this in Rails, though, whether this is a good or bad thing, I won't say in public haha.\n\nThink about these changes as this: I aggressively change my gems in order to make your life better. I do not simply decide that this method signature sucks or that class is useless, I collect input over the years and play with ideas permanently.\n\nAt some point, you simply figure out your original idea was suboptimal or misleaded (e.g. by trying to be \"Rails-like\"). And then you have to hardcore-change. I myself had to change about 20 cells in our current production project, it didn't really hurt and in the end I could see a significant performance increase, zero hacking in tests anymore, and the good feeling of having decoupled my code from Rails.\n. So true! One thing that really scared me off was when Rails suddenly decided to drop old Ruby support, mainly to use Refinements, which are feature I am never ever gonna use (ever!). Honestly, a web framework that uses super low-level _language_ tools, that's just not good. Another thing was when everyone dropped 1.8 support to have 1.9 hash syntax... WTF?\n\nI would _love_ to see typing in Ruby, and different method signatures depending on the argument types, as we have it in Java. Thanks for your kind words! :heart: \n. Can you give me some more details on those \"external helpers\"? Is that to test if methods are called properly? Theoretically, you can do that as follows.\n\n``` ruby\ncell = cell(:song, song)\nexpect(cell).to_receive ..\ncell.(:show)\n```\n\nRemember, every helper is just an instance method call on the cell instance. Does that help?\n. Ah, ok. cells3... Hmm... do this.\n\n``` ruby\ncell = cell(:song)\ncell.mocking_sucks! # do your mocking here ;)\ncell.render_state(:show, song, volume: 9).must_match ...\n```\n. Closing this, as this works with rspec-cells 0.3.\n. We should add this \"special behaviour\" to the gems' tests, @seuros ?\n. Hey Andy,\n\nthanks! Rails and its helpers are a pest and the way it's implemented is \"improvable\" :wink: - could you give this a go? https://github.com/apotonick/cells/wiki/Troubleshooting#rendering-problems\n\nWhat if you include the `AssetUrlHelper` in your cell?\n. Hm, this might actually be a good occasion to fix this in Rails itself.\n\nI am meeting @rafaelfranca and @carlosantoniodasilva in a few days and maybe we can go through it with some cervecas and discuss how to deal with this annoying design flaw in the future?\n. Hey @andypike, sorry for the late reply.\n\nI was able to reproduce this bug, but at the same time couldn't find where the actual `model.to_params` in the sprockets helper happens. If you find it out, I'll fix it.\n\nWent through your repository - looks great! First I thought you were already using Trailblazer due to the `app/concepts` directory, but .. not _yet_!\n\nA lot of things have happened in Cells 4 - can you upgrade to the release candidate and see if your tests still pass? Thanks! :heart: \n. Ehm... did anyone say \"blog post\"??????? :tada: :beers: :laughing: \n. This should be fixed in 4.1.0 in combination with https://github.com/trailblazer/cells-rails.\n. The `nothing: true` is Rails API, Cells tries hard to get away from that! :wink:  I've never liked that particular \"signature\" since it embraces Rails' monolithic rendering. (I mean, how awkward is it to say `render nothing: true` to do exactly _nothing_, hahaha?)\n\nYou can use `return` to return _nothing_. \n\n``` ruby\ndef show\n  do_stuff\n  return\nend\n```\n\nMaybe we should add that to the README/book?\n\nThanks for pointing it out! :heart: \n. As you can tell, there's a `FIXME` that is supposed to remind me to go through all base paths.\n\nThanks for your patch, but we have to restructure that a bit so we make use of caching.\n\nWhat's the deal with the tests? Not running for you? And, yeah, I know what you mean with \"paying the bills\" _cough_ :stuck_out_tongue_winking_eye: \n. Yeah, sorry, the `Gemfile` is wrong, I always run tests with the newest rails version from `gemfiles`. Sorry haha. Should all be good and running in a few weeks, can't wait to release Cells 4!!\n. Yes, but we also need a test setup for testing engine cells and this is some work. I would appreciate if someone could help me with the engine test.\n. I have several questions on how you use cells in/with engines.\n1. If your engine bundles cells that should simply be usable across the app, you could simply reset the `view_paths` and it would still work with the current (insufficient) implementation\n   \n   ``` ruby\n   MyEngine::Cell.view_paths = \"/var/engines/app/cells/\"\n   ```\n2. The problem arises when you _inherit_ from engine cells  in another directory (do you guys do that?).\n   \n   ``` ruby\n   class SongCell < MyEngine::Cell\n   ```\n   \n   Now that application cell needs two bases, namely `Rails.root/app` (application) and `/var/engines/...`.\n\nI'm wondering if we should merge prefixes and view_paths. There's simply no such case where you'd want Cells to look for `/var/engines/cells/song/show.haml` (application cell in engine, it's never gonna be there). Likewise, you don't want it to search for `Rails.root/app/cells/myengine/show.haml` because overriding engine views in the application namespace without actually inheriting from the engine is super dirty.\n\nThoughts?\n. @jamis Partials, or cell views?\n. You were rendering partials from cells? With Cells 4?\n\nI totally get subclassing engine cells and overriding views - that's why we introduced view inheritance in the first place.\n. I will most probably merge `::prefixes` and `::view_paths` do avoid confusion and simplify the entire process of view finding.\n1. Every cell can have one view path.\n   \n   ``` ruby\n   MyEngine::Cell.view_path = \"/var/my_engine/cells\"\n   \n   SongCell.view_path = \"app/cells\"\n   ```\n2. `::prefixes` will contain the base path already, so `ViewModel#find_template` doesn't have to figure it out.\n   \n   ``` ruby\n   MyEngine::Cell.prefixes #=> [\"/var/my_engine/cells/my_engine\"]\n   SongCell.prefixes  #=> [\"app/cells/song\"]\n   ```\n3. When inheriting, we simply inherit `::prefixes` from the parent cell, the way we do it now.\n   \n   ``` ruby\n   HitCell < MyEngine::Cell\n   HitCell.prefixes #=> [\"app/cells/hit\", \"/var/my_engine/cells/my_engine\"]\n   ```\n4. If you're not happy with that, you can push more onto `::prefixes`\n   \n   ``` ruby\n   class MegaHitCell < Cell::ViewModel\n     def self.prefixes\n       super + SongCell.prefixes\n     end\n   end\n   \n   MegaHitCell.prefixes #=> [\"app/cells/hit\", \"app/cells/song\"]\n   ```\n\nThis greatly reduces the lookup algorithm complexity and makes it simply to understand where views come from, no need to explain \"it first looks through base paths, then the prefixes, then the other base path, ...\" and so on. Cool?\n. @jamis Thanks for your invalueable help, man! I decided to implement the above solution and did not merge your PR. Anyway, feel free to PR again, I will merge it! :heart: :beers: \n. I started documenting here: http://trailblazerb.org/gems/cells/render.html\n. @bmcdaniel11 Some feedback here would be amazing: https://github.com/apotonick/cells/issues/280\n. Aaand: what Cells version?\n. Fixed in 0.3.0 (only Cells 4, though).\n\nAre you considering upgrading Cells, or should I backport the feature?\n. Not a priority, though, since it's just a warning, right? @incorvia It's simple, you can try. Here's how it's done in Cells 4: https://github.com/apotonick/rspec-cells/blob/master/lib/rspec/cells/example_group.rb#L21\n. You need to use the `#concept` helper instead of `#cell`. This is because you use the new, cooler, better, beautifuler and sexier concept (Trailblazer) naming style `Comment::Cell`.\n. Cool idea - I don't think you have to configure that. You have to override the `#t` method _in_ the cell class and then add this path.\n\n``` ruby\nclass Cell::ViewModel < ..\n  def t(name)\n    super \"en.bla.#{name}\"\n  end\nend\n```\n\nI am not sure where to get all the information you need for this string (e.g. `en`) since I haven't used i18n so far but if you PR something we can merge this into Cells 4! :beers: \n. It's really simple: every instance method in a cell class is available as a \"helper\" in the view. That means you can simply put it into `Cell::ViewModel` as I showed you earlier.\n\nThis is cool! I like it! Can you PR? Just put that code into `lib/cell/i18n.rb` into a module `Cell::I18N`. Thanks!!!\n. First of all, you don't need to use `helper_method` since all instance methods of the view model are \"helpers\" in the view.\n\nSecond, I can't help that the Rails helpers and all gems that add helpers are extremely hard to use in a non-AV-conform environment. Helpers automatically assume that all the other helpers are magically there.\n\nThis is not my fault, but a Rails design flaw. I am hoping that Cells 4 will gently force Rails core and other helper authors to properly include dependent modules into their helpers. I unfortunately can't fix every possible helper in the Rails eco-system myself. Sorry for this inconvenience. Maybe you can open an issue on the respective repository and fix it there? :stuck_out_tongue_winking_eye: \n. @seuros This is because we removed many tests when I merged the gigantic PR. We _have_ to re-add those tests before we release Cells 4. \n. This is fixed in cells-erb 0.0.2.\n. This is fixed in cells-erb 0.0.2. Please use cells-erb/master until @seuros gives me push rights.\n. That's a cells \"issue\". In Cells 4, we do not escape HTML (only defined properties, and I still have to implement this).\n\nCan you link me to the react-rails helper implementation? It sounds as if that helper doesn't call manual escaping properly.\n. It looks like `content_tag` does the escaping normally. This is weird?!\n. This should be fixed in master, you have to make sure you're using cells-erb or whatever format you desire.\n. Yeah, what about a cells-slim update? :wink: \n\nWe don't support `::helper_method` anymore, as we don't need it: every instance method is a helper in the view.\n\nYou can do\n\n``` ruby\nclass ApplicationCell < ..\n  def self.helper_method(*)\n  end\n```\n\nand please open a ticket on Devise and tell them to restructure their helpers, so `::helper_method` doesn't need to be called.\n. Wait a second, `{}.to_json` never produces escaped content - how can that work in the react helper, then?\n\nI guess the problem is in `content_tag` https://github.com/reactjs/react-rails/blob/master/lib/react/rails/view_helper.rb#L25 as I said earlier. If you change that line to the following, it might work:\n\n``` ruby\ncontent_tag(html_tag, '', html_options, true, &block)\n```\n\nThe 4th argument `true` will re-enable escaping. Can you try if that works?\n. Can you create a minimal Rails app where I can see this bug in action? I will invest a few minutes and try to find what's the problem, and with an example app this would be a breeze.\n\nThanks! :beers: \n. Man, your repository is excellent, thanks so much, this helped a lot! :heart: \n\nHere's how to fix it manually:\n\n``` ruby\nclass YourReactCell < Cell::ViewModel\n  def tag_options(options, escape = true)\n    super(options, true)\n  end\nend\n```\n\nI am thinking about adding this per default to Cells. This will always escape tag options, which should be OK, shouldn't it?\n\nOne positive thing I have to say about Rails here is that _AT LEAST_ they introduced this `escape` flag as an argument which makes it quite easy to change behaviour. :grin: \n. Hmm, I am not sure if we should escape per default, TBH. To me this looks like a very specific thing. I don't have enough experience with all those gems and helpers.\n\nShould we escape tag attributes per default? What do you think, @mbajur ?\n. I decided to enable it, it makes sense. Thanks for your help! Upgrade to cells-erb 0.0.6 please.\n. Already released! https://github.com/trailblazer/cells-slim/commit/13c8a4c38a32ee60db31d0c4426b93185eb5f57e\n. Yeah, I wonder the same!\n. Ok - that's because the `I18N` module might be included _after_ you defined your method and thus overwrites your beautiful method! I'll go through this soon!\n. @mbajur Can you add a test for that in a separate `i18n_test.rb` file? You can look up how to write such a test here: https://github.com/apotonick/cells/blob/master/test/url_helper_test.rb#L58\n. Hi guys, sorry for the late reply. I haven't implemented support for engines in Cells 4, yet. But as you can see :wink: it's on our \"TODO\" :wink: list :wink: https://github.com/apotonick/cells/wiki/Cells-4.0\n\nI've been traveling to conferences the last 12 weeks and hoping to catch up soon and push out a nice and fast and clean Cells 4.0.\n. Here's how to fix it from 4.0.0.beta4 onwards: http://trailblazerb.org/gems/cells/render.html#view-paths\n\nI am working on setting the `view_paths` in an engine cell automatically just now, but in the meantime, this will work.\n\n``` ruby\nclass MyEngine::Cell < ..\n  view_paths << \"/path/to/my/engine/app/cells\"\n```\n\nAs noted in the doc, do as follows to find out how the engine cell finds its views.\n\n``` ruby\nputs MyEngine::Cell.prefixes\n```\n\nEverything here depends on your feedback, I am not using cells in engines at the moment and need your help!! :beers: \n. What about the following convention?\n\nIn your railtie, set your cell's view path.\n\n``` ruby\nclass MyEngine < Rails::Engine\n  Cell.view_paths << File.expand_path(\"../app/cells\", __FILE__)\nend\n```\n\nDoes that work? Can we also use `MyEngine.root`? An example app would be great.\n\nI am not planning to integrate that into Cells itself as this implies a lot of hacking with Rails/Engines internals, which is absolutely not how I plan to spend the rest of the day. :wink: \n\nIf you get the chance, please provide some feedback, how you managed to get it working. Much appreciated! :heart: \n. Cool, thanks @alihuber now I can see if I can abstract that. Thanks! :heart: \n\n@bmcdaniel11 You can also append the `view_paths` of the engine cell, when rendering this cell (e.g. `MyEngine::Cell` it first looks in `app/cells` for overridden views, then in the canonical engine dir.\n\nYou have to make sure you use `cells-4.0.0.beta4` or cells/master, @bmcdaniel11, did you do that? Thanks for your help.\n. It works great, thanks @alihuber :beer:   and @bmcdaniel11.\n\n@alihuber I had to add the `cells-erb` gem to the app's `Gemfile` in order to make the engine cell rendering in the application work.\n\nI've documented cells in engines here: http://trailblazerb.org/gems/cells/engine.html\n. BTW, I'm thinking about a `::namespace` method in line with what we got in Reform and Trailblazer.\n\n``` ruby\nmodule MyEngine\n  class Song::Cell < Cell::ViewModel\n    namespace MyEngine\n  end\nend \n```\n\nThis will strip the `MyEngine` from the cell's prefix, and basically allow to structure your views like this.\n\n```\nmy_engine/app/concepts/song/views\n```\n. http://trailblazer.to/gems/cells/rails.html#engine-cells\r\n\r\n. Hey, I can't see the exception anymore. What exactly is the problem? I don't think that using `::Product` is a wrong thing to do - namespacing and finding constants is still a problem in Ruby :/\n. This is fixed in the new trailblazer/master initializer: first, the model is loaded, then operation, then cell.\n. `Cell::Rails.render_cell_for(nil, :chat, :single_message, message: ..)`\n\nhttp://www.rubydoc.info/gems/cells/3.6.0/Cell/ClassMethods:render_cell_for\n. Sorry I gave you the wrong information - I probably wasn't drunk enough.\n\n``` ruby\n::Cell::Rails.render_cell_for(name, state, controller, *args, &block)\n```\n\nThat's the correct one. Why ain't you not using Cells 4?\n. Eeeh.. you know that Cells 4 is not Cells 3? Rspec + Unit support for Cells 4 coming!\n. Pretty much, yeah, but there's some API changes, too, and structural changes, and so on. I think I blogged about it, but I recommend the 4 line anyway.\n\nWe're on #trailblazer on Freenode IRC, in case you need support!\n. Thanks man!! But... where do you add the new task to the existing default one?\n. I think we have to make the second rake task \"chdir\" into `test/rails4.2` and run `rake` there. That's basically what I do now.\n. Thanks, I was excepting this to happen at some point :) We use Erbse for ERB in Cells, which uses Tilt, and sprockets use Tilt as well (instead of ActionView, which doesn't make sense at all, but, welcome to Rails). Sprockets now uses our ERB which is not compatible with Rails again. \n. No need to do that @samstickland - I know exactly where the problem lies.\n. I was able to provoke that problem very easily and will fix it in the next 12 hrs. :beers: \n. This is fixed now in cells/master and cells-erb/master.\n\nHowever, be warned that there's a bug in sprockets: I was able to reproduce this error in a VANILLA rails 4.2.1 app with the following `application.js.erb` file.\n\n```\n/*\n * This is a manifest file that'll be compiled into application.css, which will include all the files\n * listed below.\n *\n * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,\n * or any plugin's vendor/assets/stylesheets directory can be referenced here using a relative path.\n *\n * You're free to add application-wide styles to this file and they'll appear at the bottom of the\n * compiled file so the styles you add here take precedence over styles defined in any styles\n * defined in the other CSS/SCSS files in this directory. It is generally better to create a new\n * file per style scope.\n *\n *= require_tree .\n *= require_self\n */\n\n<% capture do %>\n\n<% end %>\n```\n. The way I solved this is very straight-forward: we do not register our templates with Tilt anymore and directly access `Cell::Erb::Template` and so on, so Tilt has no idea about us anymore. Everything breaking in a non-cell is _not_ cell's fault.\n. Hey Jim, good to see you here. I hope you've upgraded to Cells 4. Many things have changed and got simpler.\n\n`TestCase#invoke` is now simply `#cell`: http://trailblazerb.org/gems/cells/testing.html\n\nI will update the README as soon as I get to it haha! Cheers from Oz my friend, and let me know if that works for you! :heart: \n\nPS: How's Lotus going? :laughing: \n. BTW if Capybara is loaded, Cells will automatically wrap the output from `#call` in a matchable object. No need for Nokogiri.\n. @kevinansfield Are you sure you were using the RC1? The delegation is fixed there. If yes, how do you invoke your cell? What helpers are mixed in?\n\nI've added a test to show this works (usually), so closing this until we have a failing test.\n. Thanks Kevin!\n\nWhen you instantiate the cell yourself, you also have to pass in the controller manually, which carries all the url madness.\n. The controller is passed automatically into cells and propagated from there to nested cells.\n\nIt's available as `Cell#parent_controller`. If you want to pass in another controller, do `cell(:comment, comment, parent_controller: controller)`.\n. Isn't that done in the bundling process (not sure, but here it works???)?\n. Aaaah, cool, I didn't know that. I found this iterative lookup annoying but now I learned that you can disable it. Thanks! :beers: \n. Thanks, but that's not a bug, that's because you still have old `Cell::Rails` classes lying around haha! :stuck_out_tongue_closed_eyes: \n. Duplicate in #290, thanks @jhblacklock. :heart:  This is not really \"fix-worthy\" as there is no `Rails` constant anywhere anymore in Cells 4.\n. I like that! :heart: :beers: \n. This is documented here: http://trailblazerb.org/gems/cells/engine.html\n. :wink: \n. Cells 3 or 4?\n. Do you get a feeling now why I hate Rails helpers and don't want to do anything with them anymore?\n\nBTW I know where the problem is, stop wasting your precious time.. :stuck_out_tongue_winking_eye: \n. This is not learning because the way helpers are done and output buffering is done in Rails is _WRONG_. It took me some years to realise that I should better not learn from Rails.\n. Fixed in cells-erb 0.0.5.\n\nThe problem was that the old helper uses `output_buffer` (the method). In cells, this method is only called once per view, so this creates a new output buffer and thus forgets some input (as we're appending to two different output buffers).\n\nIf you want to learn how it's done right, check out how slim does it. No need to fix anything there, as it's really clean. I will soon change Erbse to support these operations on the ERB level.\n\nIn case you're interested in all this and want to help - just let me know, I can give you an introduction and then maybe you want to play with Erbse a bit? :cake: \n. https://github.com/apotonick/cells/#installation :wink: \n. Thanks @EppO for pointing out the naming inconsistency. I will use the view model naming style throughout the README, the concept style and the benefits are well documented in the Trailblazer book in the Cells chapter. :+1: \n. Thanks to you for spotting the README inconsistency! Did you see your mention in the commit? :wink: The Installation section is kinda hidden, maybe we should move it up?\n. I find that the introduction reads very well and a long Installation section interrupts the flow, though?\n. Good idea about the resource links, even though, I would like people to buy the book. :wink: \n\nYeah, true, it's a hard thing to figure out. 50% expect your README to be an awesome introduction with code samples, and the other 50% wants it to be  full-blown documentation covering the entire API, and the other 50% expect both of it plus a complete wiki.\n\nI'm one of the first group: when I browse gems, I check the README and if I can't find instant code snippets to understand (I mostly don't even really read text) I \"lose interest\" and might move on.\n\nMaybe be can leave the generator section where it was and move just Installation further up?\n. Yeah, I haven't implemented that, yet, as it's extremely coupled to the controller. The cell has to ask the controller for the token and then tell the form builder about it - let me have a look now, that I have \"more time\". :grin: \n. Can you try adding the following to `lib/cell/rails.rb`, line 41?\n\n``` ruby\n    included do\n        extend Uber::Delegates\n        delegates :parent_controller, :session, :params, :request, :config, :env, :url_options\n        # forgery protection. ADD THIS:\n        delegates :parent_controller, :protect_against_forgery?, :form_authenticity_token\n      end\n```\n\nAnd remove the `protect_against_forgery?` method?\n. I don't care about CI anymore. The time you waste setting up Travis doesn't outweigh its benefits since I run tests locally all the time. [correction: the time you waste setting up _any_ CI tool] There's always something wrong and Rails 4.0 doesn't do what it should do, and so on...\n. Let's leave it as it is, it really reads better and it's only _one_ page scroll down hahahahha! Thanks anyway and keep up your good work! :beers: \n. It looks like `Cell::Erb` is not included in the cells that fail, since it uses `capture` from Rails and not the patched one from `Cell::Erb`.\n\nIn your specs, can you do `Cell::Concept < Cell::Erb`? The result has to be `true`, otherwise your initialization hasn't worked properly. You can try using `rspec-cells`.\n. Yes! In Rails, this is done automatically. Are you not working in a Rails environment? :heart: \n\nCome join us on #trailblazer on IRC (Freenode), we can solve it there faster.\n. I hate Rails helpers. It looks like it is done automatically (otherwise the `Cell::Concept < Cell::Erb` would be false, but maybe one of the helpers you include overrides `capture`? I hate Rails helpers. Can I see the failing cell code? I hate Rails helpers.\n. Does this cell work in a view?\n\nPlease, join me on IRC, I can help you much quicker there.\n. If you find the correct position in the Railtie initializer chain, I'm happy to merge it in `cells-rails`. :+1: . As discussed on IRC:\n1. You have a model `::Partner`.\n2. `Administration::PartnersController`.\n3. You have a directory `app/cells/administration/partner`.\n\nThis is enough to crash the Rails autoloader?\n. Twin is not supported in Cells 4 (yet) - why do you have that included?\n. Hm, when you copy it, it should work. I will re-add twin support when I release Disposable.\n. It works without twin, here's the proof: https://github.com/apotonick/cells/blob/master/test/public_test.rb#L35 :stuck_out_tongue_winking_eye: \n\nCan you paste some code, I'm curious to know how you use twins?\n. Yeah, that's exactly how it's meant to work. :grimacing:  You should use a representer to compile your `to_hash` hash with Representable. You can infer a representer from a twin.\n. But it only breaks with `Twin` included, right?\n. I know, I know, I have to rewrite `Twin` for cells anyway.\n. This will dramatically slow down rendering collections! Hash operations are expensive!\n. :kiss: \n. Almost correct! :grin: It's documented here: http://trailblazerb.org/gems/cells/engine.html#view-paths Doesn't that work for you???\n. The problem is here: https://github.com/apotonick/cells/blob/master/lib/cell/concept.rb#L13\n\nHaha! :laughing: It removes the `Cell` from your namespace, leaving the single `s` which makes it look pluralized haha.\n. Please, can you make the prefix regex catch the /::Cell$/ instead? Test goes here: https://github.com/apotonick/cells/blob/master/test/concept_test.rb#L41\n. I thought you wanted to do that???\n. This is fixed in 4.1.0 with https://github.com/trailblazer/cells-rails.\n. Not sure I understand the problem? `ViewModel#call` will `html_safe` the content in Rails, calling the method manually won't. Is that poorly documented?\n. This is documented here: https://github.com/apotonick/cells#invocation-styles\n\nCalling the method manually is not official API and up to you. This is also discussed at the end of chapter 8 in the Trailblazer book, where you can call states manually and avoid Capybara wrapping.\n. Ah ok, thanks,  now I understand your pain.\n\nI can't say it for sure, but if `Cell::RailsExtensions::ViewModel` did not get included properly, many other things wouldn't work, either. Also, you said \"when using `.call` it works. That also implies the module got mixed in and `html_safe`s the return value of `call`.\n\nCan you confirm that? When you do `cell(..).call` it works in both environments?\n. That's right, in views, `cell(..)` will result in `cell(..).to_s` will result in `cell(..).(:show)` will result in a html_safe string.\n. ..which is exactly what happens: https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L47\n\nI just messages you on IRC to please join Trailblazer gitter channel.\n. I have zero clue what might be wrong, as it works for me in many projects. Do you have a minimal cell that can provoke this error? Or does it happen with nested cells?\n. So, should we simply document that in `cells-slim`? I have no clue how to fix that and zero time to investigate. It must be something with this bloody `html_safe` string marking?\n. Yes, this doesn't make sense to me, but it makes sense in Rails. :thinking: How could we test this?\n\nThis must go to the cells-rails gem, though.\n. If they want them global, we can add that functionality later. E.g. by providing `asset_paths = \"/var/assets\"`.\n\nIn Defaults, that should say\n\n``` ruby\nclass Song::Cell < Cell::Concept\n  # app/concepts/song/views\nend\n```\n\nright?\n. This is documented here:\n\nhttp://trailblazerb.org/gems/cells/testing.html#optional-controller\n\nI will add that to the rspec-cells README, too. Sorry for the \"clumsiness\" of having to call `::controller` but Rails helpers need all kinds of dependencies everywhere so you need to specify them.\n. We don't support `#content_for` (so far) - it completely defeats the purpose of encapsulating your view part. :laughing:\n\nI won't implement a new version of `cells-capture` as I think `content_for` is a horrible idea and can easily be achieved with clean encapsulation:\n1. If you want CSS, JS or other assets to be placed in your global HTML, read this: http://trailblazerb.org/gems/cells/rails.html#asset-pipeline\n2. When in need to render a fragment from your cell somewhere else, just extract that to a separate state. Here's an example.\n\n``` ruby\ncomment_cell = cell(:comment, @comment)\nhtml = comment_cell.() # calls #show\nmore_html = comment_cell.(:more) # calls #more\n```\n\nWould that work for you?\n. Implementing a `cells-content-for` gem/module would actually be quite simple: You override the `#cell` helper and pass in the global AV instance as an option, somehow along this.\n\n``` ruby\ncell(:comment, @comment, action_view: self)\n```\n\nIn the cell, you'd define a delegation to `action_view`.\n\n``` ruby\nclass CommentCell < Cell::ViewModel\n  delegates :action_view, :content_for\n```\n\nThat should do the trick.\n. Wow, I love this \"using the model part\" idea - I never thought of this! It shouldn't be hard to implement. We could simply catch the block and evaluate it in cells context.\n\nMany people use `content_tag` blocks in cell methods to achieve just that.\n\nI had a slightly different idea a few years ago and I was evaluating either Erector or Ambre where you have the templates defined in Ruby, in the cell itself instead of a rather clumsy template snippet. This does not only speed up things but also allows way better overriding semantics, where you can programmatically overwrite parts of your \"view\" in subclasses.\n\n``` ruby\nclass SongCell < Cell::ViewModel\n  view do\n    div do\n      address1\n      address2\n    end\n  end\n```\n\nI remember I loved the Erector gem by @alexch but we never integrated the two projects. Maybe it's time now? :fireworks: \n. :heart: Thanks!\n. This is no longer supported in Cells, because we think that you can also do this with simple method overriding. Soooorry! :beers: \n. Oh, and in case you missed that: Cells 4 doesn't use Rails anymore, including `AbstractController` is not a good idea... :wink: \n. How exactly do you use `cells-filters`? I don't quite understand how this gem could ever be helpful since controller filters do not really fit into view models anymore. A few examples where this helped you would help me to understand and maybe I can suggest you a better Ruby solution?\n\nA `cells-rails` gem is redundant, since the railtie in Cells already includes all stuff Rails that we found helpful. \n. Oh, relax, aggregating data in a cell is totally fine - as long as you don't repeat this code anywhere else.\n\nI still don't get how a filter then helps, though. Do you use things like `before_filter: :setup_models!` ?\n. Hi Ryan, this is bad practise, and documented here: https://github.com/apotonick/cells#rails-helper-api\n\nBasically, we automatically include the default Rails helpers in order to fix some bugs in a Rails environment. This is why `form_for` works, but to make formtastic run, you need to include the required helpers manually. Here's an example: https://github.com/apotonick/cells/blob/master/test/rails4.2/app/cells/formtastic_cell.rb\n\nIf you want to learn more, read the _Cells_ chapter of the Trailblazer book where I speak about this, too.\n\nBTW: Passing objects around in Ruby is never costly, so what you do is clumsy, but should be equally fast. However, in Cells 4, we want to completely stop using ActionView so please don't do it.\n. No problem! Sorry for the inconvenience, but this is really a Rails problem and not Cells' fault. I explain it a bit more here: http://nicksda.apotomo.de/2015/06/cells-4-0-goodbye-rails-hello-ruby/ (_Long Live Rails_ section).\n. Thanks, man, but this is the wrong project. You need to send this PR to formtastic because they do not correctly include all helpers - please fix it there, too!\n. Exactly, they have to include the Rails helpers where they actually use them. They won't be included twice, Ruby takes care of that, so, go for it!!!!\n. Uhm, I don't think so. That's on purpose because a cell usually has a handful of public rendering methods, only, so it's safe to declare it \"globally\" on the class level. If you don't want that, pass the layout when rendering the views that actually need a layout, e.g. `render layout: :default`.\n\nI tried to keep layout logic in Cells as simple as possible. If you look into the Rails code and how they provide 25-30 different ways to compute a layout, you will understand my motivations.\n\nCan you explain your use case a bit more detailed?\n. One assumption you might have missed is that one cell class only has one public method (`show`), in your example, it looks as if you expose several of those. This is outdated 3.x behavior and not encouraged any more.\n. We had the same problem [here](https://github.com/apotonick/cells/issues/277). Please try using `#tag_options` which should escape the options.\n\nI'd suggest you change your view.\n\n``` slim\n.row data-viewmodel=data_attr\n```\n\nThen, define the `#data_attr` method on your cell.\n\n``` ruby\nclass SongCell < Cell::ViewModel\n  # ..\n\n  def data_attr\n    html_escape @feature.view_model.to_json\n  end\n```\n\nThis also makes your view logic-less. :smile: \n. Ah, ok, cool. Doesn't `#html_escape` do just that? And: did you move that code to an instance method of your cell? If not, please do it. :beers: \n. So, is the `#html_escape` method available on the cell or not? Because we can add it, as it is extremely handy?\n. Because `#tag_options` is not used in your code! :grimacing: \n. I wonder what is not _DRY_ about your first example? I can't see redudance there.\n\nIt's best to have two cells for this kind of setup. We discuss a very similar case on pg. 79-81 in the Trailblazer book.\n. There's a `Thing::Cell::Grid` here: https://github.com/apotonick/gemgem-trbrb/blob/chapter-10/app/concepts/thing/cell.rb#L21\n\nAnd that grid simply renders the `Thing::Cell` (which represents one grid item). Does that help, or you still confused (:beer: helps)?\n. Wow, that's a lot of helpers you need for a little cell...!\n\nYou need to `require \"cell/partial\"`.\n. Ha! The `render partial:` still doesn't know where your partials are. http://trailblazerb.org/gems/cells/render.html#partials\n\nWhy are you using a global partial in the first place, I wonder?\n. I re-checked and this is also documented directly in the README, in the undocumented section, haha: https://github.com/apotonick/cells#rendering-global-partials Protip: `Ctrl+F` on GH README page can save you time.\n. (and me). :beers: \n. @ryan2johnson9 Can you join the https://gitter.im/trailblazer/chat channel for a minute so we can resolve this?\n. The `ViewModel::view_paths` directive is meant as the path to where all the cells reside (similar to `AC::view_paths`). The actual paths to the cell's views is available via `ViewModel#prefixes`, you need to override that to point to another directory (but do _you_ really need this?).\n\n`render partial: ..`'s documentation is reflecting the actual behavior, see here: https://github.com/apotonick/cells/blob/master/test/partial_test.rb#L12 The difference is that your partial is _not_ in a global directory.\n\nI am probably gonna move the partial code to a separate gem soon (`cells-partial` or something), just to further discriminate this. I find it wrong to render partials from other stacks in a cell and want to ban this explicitly, otherwise people will keep hacking stuff instead of fixing the actual gem. Also, I then don't have to support this madness anymore. :wink: \n\nThe cleanest solution would be to \"fix\" `#render` in your cell, so when subsequent calls to `render` from cocoon are detected, change their API to ours. And the cleanestest would be cocoon using cells in general, but... :stuck_out_tongue_winking_eye: \n. @nathanvda You can't see that, right, that's why I suggested @ryan2johnson9 to patch _his_ `#render` and detect when it's a call from cocoon and when not.\n\nIdeally, Cocoon would use Cells to render its elements in general. I am about to write a new form builder based on Cells, maybe that can be source of inspiration? :wine_glass: \n. Thanks for posting it.\n\nYou don't have to differentiate between case 1. and 2., the cell will do that for you.\n. ARgh, you're right. I personally hate this little piece of magic in my code, especially since it only saves 5 characters:\n\n``` ruby\nrender\n```\n\nvs.\n\n``` ruby\nrender :show\n```\n. But my gems are not Rails, which is why I might remove this in the near future.\n. Sorry, I have no idea what @ryan2johnson9 does in your code, but overriding `#render` is problematic, you should call it with the view name, instead.\n\n``` ruby\nrender :view_you_actually_wanna_render\nrender view: :view_you_actually_wanna_render\n\n```\n\nNot working on any Cocoon stuff, I don't even know what it is?\n. I _like_ that a lot!!! :stuck_out_tongue_winking_eye: \n. Multiple `view_paths` are totally fine, that's why it's an array! :stuck_out_tongue_winking_eye: \n\nI like your change - but what's the problem with `unshift`? Admittedly, I simply added this without thinking too much, so creating a new array is probably cleaner. Anyway, what's the \"unexpected results\"?\n\nThanks! :beers: \n. Ah ok, I get it, because I used `unshift` it _replaces_ the old directory.\n\nAre you trying to render a global partial with that weird Rails naming like `_bla.html.haml` or just reuse views across cells?\n. The manual loading is on purpose, as I want to discriminate the _wrong_ Rails Way. Also, this is not a feature I'm planning to support in the future as people should switch to cells and not use partials anymore.\n\nThanks, man!\n. Cool, thanks so much for your investigations @johnlane, very helpful! :beers: \n\nDoesn't I18N traverse the \"path\" by iteratively removing the last element? In that case, the full namespace path would probably be more precise.\n\nIf `a.b` can't be resolved, `a` is used (as far as I remember that from validations in Reform).\n\n@johnlane Could you write a new test (`test/i18n_test.rb`) so we can refine things in the code?\n. Should we simply add the cell path (e.g. `admin/comment`) and maybe provide `ViewModel::translate_path \"admin\"` if you need to fine tune? That should work just fine?!\n. Hi @phillipoertel - isn't that how it's supposed to be? We don't do autoloading in most TRB gems anymore because it always breaks, this is why people have to manually require files. :beers: \n. Cool, thanks @phillipoertel ! TRB is in more than 200 production apps already and very stable! It's very easy now with the `trailblazer-rails` gem. :beers: \n. The idea is to use those gems from within the operation - not excluding each other. I also love https://github.com/icelab/call_sheet\n. It works like this now:\n\n``` ruby\nrequire \"cell/translation\"\n\nclass Admin::Comment::Cell < Cell::Concept\n  include Cell::Translation\n\n  def show\n    t(\".greeting\")\n  end\nend\n```\n\nThis will lookup the I18N path `admin.comment.greeting`.\n\nNot sure if that's the ideal path, I need some feedback from you power users what makes sense, (e.g. `cell.admin.comment.greeting`).\n. Convention over configuration. It is already configurable via `ViewModel::translation_path`, we should just decide a standard and people will be happy. :dancer: \n. I got it, and I agree! However, I have always avoided `Whatever.config` in favour of overridable methods because then I don't have to implement/test the config hook! :stuck_out_tongue_winking_eye: We should come up with something meaningful, I'm pretty confident that users will simply adopt this. Then, we can save the config variable.\n. Very good point @AndrewSwerlick - that's why I'm asking here for \"best practices\"! :+1: \n\nThe `::translation_path` is the absolute path, so if set to `nil` you will end up without any path. Can you make an example what kind of path would be helpful for you?\n. I agree with @AndrewSwerlick: don't prepend any non-domain tokens. In Trailblazer, though, we are planning to add the prefix `concept.`, which _is_ business-related.\n\nMaybe just release the current state, which is super primitive?\n\nReg. fallbacks @smathy: Too much work for me: I have to write tests, code it, and document it, and then people are not gonna use it anyway. :stuck_out_tongue_winking_eye: I've learned that from Rails in the past decade... they always have this super-magic \"helpful\" code everywhere that's used by like 3% of the framework users but pollutes the code and makes it hard to change architecture. Example: there's about [25 different ways to compute a layout](https://github.com/rails/rails/pull/15050) name in a controller. Do you need that? No.\n. On the other hand, I don't even see why we'd need a `concept.` prefix, now that I think about it \"with your eyes\". _Everything_ in an application is business, which is organised in concepts?!\n. You're not including the `cells` gem! See here: https://github.com/apotonick/cells#installation\n. Concept cells are cells that follow the Trailblazer file and naming layout: https://github.com/apotonick/cells#concept-cells They are basically identical to normal cells but instead of `CommentCell`, they use namespacing, e.g. `Comment::Cell`.\n. Cool @agm1988 that might help me fixing the issue!\n. Thanks @agm1988 for following up on this. Can you please test `cells/master` if it works for you?\n. Your initializer is wrong, it must be\n\n``` ruby\nCell::Concept.class_eval do\n  include ActionView::Helpers::TranslationHelper\nend\n```\n\nand not\n\n``` ruby\nclass Cell::Concept\n  include ActionView::Helpers::TranslationHelper\nend\n```\n. Oh hang on, I still had trouble. I could make it work with\n\n``` ruby\nCell::Concept.class_eval do\n  include ActionView::Helpers::TranslationHelper\n  include Cell::Erb\nend\n```\n\nThanks for the test app, BTW! :heart: \n. I found out the problem. The Cells railtie is run after your initializer and Rails helper modules override our fixes. There's three fixes:\n1. Stop using Rails and lead a happier life.\n2. Make your initializer be run after the Cells railtie (no idea, I thought that was the default anyway).\n3. Introduce `ApplicationCell < Cell::Concept` where you include your additional global helpers.\n. The `class_eval` didn't work for me! :blush: It's because of the loading order of railties and all that, but I had the urge to post it anyway, so it _is_ a solution, but only in an initializer that's run _after_ the cell railtie. Confused enough? :laughing:  \n. Loving that! :heart: \n. This is implemented in 4.1, see https://github.com/apotonick/cells/commit/5638f373eec2771f5c44eca249eef5eef279ea9e\n. I still don't understand how \n\n``` ruby\ndef to_s\n  call.html_safe\nend\n```\n\nwill save you from having to define a `#show` method, because `to_s` will call `call` which will call `show`, so your actual problem is the \"missing\" `show` method.\n\nAs discussed, this is a design decision I made to avoid confusion for new users who will have trouble understanding that they \n1. can actually override the render process (e.g. with `render :another_template`)\n2. can add logic to `#show` (`def show; @bla = Whatever.(); end`)\n3. can extend the rendering (`render(:item) + render + \"hello\"`).\n\nYou can easily add a `show` method to your \"base class\". \n\n``` ruby\nCell::Concept.class_eval do\n  def show; render; end\nend\n```\n\nAlso, the `to_s` method is already aliased to `call`, which, in Rails, will call `show.html_safe`.\n. Wow!!! :heart: Should we add something to make that configurable, what if people don't want this logging? Other than that, great work!\n\nI think it's time for `cells-rails`?\n. We had that fuzzy API in earlier Cells and it was confusing. Aren't you all about strong, non-blurry APIs? :stuck_out_tongue_winking_eye: The API you suggest is indeed very \"railsy\".\n\nAlso, we want to drive things more towards using twins or structs instead of model/hash mixes, where the twin represents your actual domain object (even if that is a view domain-specific thing). This means, the cell will always get one \"model\" only and you don't use `@options` anymore.\n\nBTW, I am all-in for incorporating twins/decorators into the language itself. There's no reason we're still messing around with primitive hashes to simulate domain objects. Ruby could support that out-of-the-box and people would think different about what objects they pass around between layers.\n. Why so complicated?\n\n![screenshot_2016-04-18_21-51-03](https://cloud.githubusercontent.com/assets/10406/14603204/c94332a6-05af-11e6-880a-fbc6f16d9fed.png)\n\nThanks for that, @smathy ! :heart: \n. Many :heart: ! You solved it!\n. Thanks!!!\n\nNot a huge fan of the gitter integration... you get blasted with \"apotonick pushed this, apotonick pushed that\", dunno..\n. I won't touch this because it sucks and works right now. :grimacing: I had it removed for a while and many apps broke. Thanks anyway :kiss: \n. Are you confusing `Cell::ViewModel` and `Cell::Concept`? The documentation clearly distinguishes between them. Note that all documentation is getting moved here http://trailblazer.to/gems/cells/ and to the books, but you're more than welcome to help improving it.\n. And join the Gitter channel if you need help. I will add _Getting Started_ tutorials for every Trailblazer gem in a few weeks but in the meantime, come chat with us.\n. It should be redirected to http://trailblazer.to!!!!!! Thanks!\n. Too expensive! :laughing: \n. Internally merged as discussed! :kissing_heart: \n. Exactly! :smile: It's a pure Rails autoloading issue! Thanks @Tab10id! @sdesbure - jump on the https://gitter.im/trailblazer/chat channel if you need more support. :wink: \n. No no, `app/XXX/toplevel/bla.rb` where the file `bla.rb` is `Toplevel::Bla`. The directory between `app` and `toplevel` could be `dfjzkcxjalsdfjalskdfj1` and it would still work.\n. I am pretty sure you can call `cache` only once, or when multiple times, the last one wins. We could think about making the options dynamic, e.g. `->(options) { expires_in: logic_to_find_out }`.\n. I agree. Let them figure it out themselves! :evil laughter: :grimacing: \n. Oh, ok, where do we override `call`? Which module do you mean?\n. I'm stupid, you're right!\n. If you say that than it must be right because you're always right. :heart_eyes: \n. Hm, but this could leave a dirty controller around for the next test. Use `let`?\n. First of all: Cells is not a library - it's an attitude. :stuck_out_tongue_winking_eye: \n\nIn earlier versions, I did the `let` trick, so you'd have the same instance around within a test case. I'm just a bit anxious about caching something between test cases, I think that's wrong. Any objections?\n. That's why I want to use`let`! If you want, play with it, but it also has to work with `rspec-cells`.\n. So... does that mean that in Minitest unknown instance variables are erased between every test case automatically? If that is the case, this patch would - of course - work. I still would prefer using `let` so we don't have to care about this.\n. Awesome, so you could test it right away? Yeah, I had that `let` code in older versions but something was wrong, but please try again!\n. Good attitude! Have a drink instead!\n. Do you want to PR? :heart_eyes: \n. Is that necessary? I don't think so... the less API the better. We should fix the existing `Escaped` module. Are you keen to do so?\n. Thanks, brother! How are you? :beer: \n. `Builder` already has to be included manually! :tada: \n. Implemented via https://github.com/apotonick/cells/commit/9c4b282d89482f1182145ce41e593808cd58a45f.\n. What about this?\n\n``` ruby\ncell(:post, collection: [..]) { |c| c.(:item) }\n```\n\nI really want to avoid a DSL object.\n. You were right, I was wrong! :heart_eyes: \n. Should we add some test?\n. Good one, thanks, but you should give up smoking!\n. Answer on SO.\n\nYou have to say `::Cell::Concept` not `Cell::Concept`, Ruby will look it up in the wrong namespace otherwise.\n. Maybe because `cells-hamlit` doesn't `require \"cells\"` ?\n. Here, that's what I mean: https://github.com/trailblazer/cells-hamlit/blob/master/lib/cell/hamlit.rb#L1 We don't `require \"cells\"` - we probably should do that in all gems `cells-erb`, and so on. Do you want to do that for all four gems? :heart: \n. Yeah, I agree with you that we should require cells as a dependency, and if you want, you can PR that on all four gems (unless it's already done in the particular gem). It would be of great help for us! :heart: \n. Is it possible to catch the first 10 lines of that exception?\n. This is fixed in cells-rails 0.0.6. Thanks @dan-palmer and @mrship for helping!!! :beers: \n. Does this PR need https://github.com/apotonick/cells/pull/279 ? Wondering because you're using `super` in `def t`, and I can't find out where `#t` comes from.\n\nThis should all go to `cells-rails`, I don't want any Rails-specific code in Cells anymore. Also, shouldn't we test that with normal cells and concept cells?\n\nThanks!!!\n. Haha, it doesn't exist, yet, we have to create it!\n. https://github.com/trailblazer/cells-rails :heart: \n. Yeah, this would go to `cells-rails`. :grimacing: \n. Is that a Cucumber test that only tests a cell in isolation, or retrieves the page via the controller, e.g. `GET /comments`?\n. @thedanielhanke Are you very very very sure that this is the case? This would mean that [the override in `call`](https://github.com/trailblazer/cells-rails/blob/master/lib/cell/rails.rb#L54) works, but the `ViewModel#to_s` method is not invoked.\n\nCan anyone override the `to_s` method and raise an exception to see if it is called or not?\n. I can see your pain here, @hazah, the way we force users to include their helpers manually is ... awkward. It's a result of Rails' helper system, I was hoping this will put pressure on the core team to revisit this ugly part of Rails.\n\nWe could make your work part of `cells-rails`, as an optional feature (as @timoschilling suggested). Anyway, I still don't understand the `Collection` code - how's that related to the helpers? Thanks for your work! :beers: \n. @hazah I added the repo here: https://github.com/trailblazer/cells-rails\n\nAs per the collections, I'm pretty sure @timoschilling had a PR here... Timo, bring it on.\n. I read your repo @hazah but I'm struggling to see the difference to Cells? The naming (to me) is completely irrelevant, I don't even know what the official meaning for _view model_ is haha. Is it only the wording in Cells that made you create this?\n. Fixed in 4.0.5, with an ugly hack, and awesome again in 4.1.\n. Please update `kaminari-cells` to 0.0.4.\n. What about this?\n\n``` ruby\nrender :layout, locals: { content: render(:content_view) }\n```\n\nThis will do the trick and avoid any problems about buffers and execution contexts. It's incredibly hard for me to find a solution for the `yield` approach in views which is essentially unnecessary as you can pass layout content as a local, or am I wrong here?\n. I still don't understand why the example I posted earlier wouldn't work? You could override `#render` in your cells and add the syntactical block sugar, but the mechanics are already there via the `:locals` option? \n\nInstead of `yield` in your layout, you'd do `= content` - isn't that exactly what you want???\n. For Cells 5, we are simplifying Cells core even more and really rip out anything that's not 99% useful. Passing a block to `render` is really really just a syntactical sugar that can be implemented easily with `:locals`.\n\nBTW, I added some cool functionality in regards to layouts in Cells 4.1: You can now instruct a cell to use a second \"layout\" cell to render a container (e.g. the page layout). Would that help you?\n\nThanks for thinking about this, @blelump, I will have another thought if we should provide this feature.\n. Very very good point, @blelump about the `#render_to_string`. Let me think about this real quick.\n. Maybe the `External` module shouldn't override `render_to_string` but `show`, as a convention?\n. Yeah, it's the only way to hook into the \"global\" render.\n. If you want, @blelump, you can test the above commit. It works great for me!\n. Hey Ben!!! Good to see you here!\n\nThat's correct, the `#prefixes` method is designed to do that. We played with other ideas but this is pretty straight-forward and simple. \n\nLet me know if you need more help!\n. Hell no, that's a global variable, but that's your problem haha! You could also inject the custom path as an option and then use the `:prefixes` option when rendering: https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L167\n\nDoes that help?\n. You should definitely go the functional-explicit way and pass those options into the cell, you could override the `cell` helper for that and do it there. https://github.com/apotonick/cells/blob/master/lib/cell/rails.rb#L5\n\nWhat you do right now is \"less clumsy\" but depends on global state, very hard to test, very hard to maintain, keep the explicit \"pass customization as arguments\" in mind. :stuck_out_tongue_winking_eye: \n. Please don't include all helpers if you don't have to. I could probably point you to where's the problem if I could see the first 10 lines for the stack trace. It's one of the Rails helpers in you `show` view, definitely.\n. Only include the ones you need!\n. I've changed that in Cells 4.1 (and upcoming 5.0). The main point is you shouldn't mix naming styles, and in that sense, `Concept::cell` will alias to `concept` which will _now_ resolve a concept cell, and not an old-style cell anymore.\n\nThanks for reporting!\n. Similar to https://github.com/apotonick/cells/issues/305, I guess.\n. It would be interesting to see if that only happens in Rails, or if Slim and Cells also muck around in an isolated environment.\n. How did you solve it, I wonder?\n. But that should be done automatically in `rails.rb`! https://github.com/apotonick/cells/blob/84cce1c2c62dc690190f31cb36504fda41287272/lib/cell/rails.rb#L54 :question: \n. You might have to override https://github.com/trailblazer/cells-haml/blob/master/lib/cell/haml.rb#L5 and make the `:suffix` option configurable.\n\nAnyway, that won't work as the cell can only render using the `Haml` module. The \"new\" design in Cells is not made for different template formats in one cell class.\n. https://github.com/trailblazer/trailblazer-cells is gonna be the preferred, canonical way. I love it.\n. In Cells 5, `cell` and `concept` will be identical.\n. In Cells 5, it'll be gone! In 4.1, the old-school `RailsWayCell` style is still supported, but I hate it a lot! :laughing: :rocket: \n. Make sure to only use `Trailblazer::Cell`, it's the API of the upcoming Cells 5 that drops all the former versions.\n. In 4.1, this is implemented: https://github.com/apotonick/cells/blob/4d39f994e6dd288367e75d30cec2d30ac7e1aec6/test/public_test.rb#L70\n\nIs that cool?\n. The `html_safe` shouldn't be necessary since that's done via `cells-rails` automatically. Other than that, what API would you like to have?\n. We actually thought of a \"collection context object\". We could totally do that, that's not really magic.\n. Simply do `cell(..., content: cell(...))` and use `options[:content]` in the first cell.\n. No, of course not. Cells doesn't use Rails.\n\nWhat exactly do you need? Note that you can simply pass the constant directly in 4.1.  https://github.com/apotonick/cells/blob/master/CHANGES.md#410\n\n``` ruby\ncell(Whatever::CellYou::Want, ...)\n```\n\nHere's where the \"inflection\" is invoked: https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L57\n. The first point here: https://github.com/apotonick/cells/blob/master/CHANGES.md#api-fixchanges\n. @TrevorHinesley Sorry - did you add the `cells-rails` gem?\n. https://github.com/apotonick/cells/blob/master/CHANGES.md#410\nhttp://nicksda.apotomo.de/2016/05/cells-4-1-block-support-better-collections-external-layouts/\n. :grin: \n. Please use `gem \"cells-rails\"` as noted here: https://github.com/apotonick/cells/blob/master/CHANGES.md#410 :giggle:\n. I like both! @shvetsovdm You could also override `#inspect` in `cells-rails` and add the `parent_controller` code there, since this is a pure Rails-specific feature, only!\n. I think it's a good idea to have the `inspect` as a framework-agnostic concept (please move to `cell/inspect.rb`), because in other environments such as Roda or Hanami, you might want to \"blacklist\" unsolicited objects, too?\n. Yes, a separate file `cell/inspect.rb` and in a separate module, then include that module in `ViewModel`, that should do the trick. Goal is to make your code easily removable (in a good way).\n. Ah yeah, that's because the yielding doesn't work with template blocks, only pure \"Ruby\". It's a problem from the template engines themselves where yielding a block in a different object instance will still write to the original output buffer.\n\nThe solution is to implement changing the output buffer in the template engine itself, e.g. via  Erbse.\n. I can only reply to 2.) and I think it looks totally fine to me. The point of Cells is to get away from ugly view fragment caching by modelling your view as an object (with multiple states, if you want that).\n\nOnly `call` with rails-cells is `html_safe`ed, render really only returns the string. \n. Bring it on, sounds like a good feature!\n. Yeah, but we have a better internal API where you can find the respective state template and hash it, on the class level. No problem!\n\nI'm here if you need help - maybe join Gitter and we chat there at some point.\n. https://gitter.im/trailblazer/chat\n. Hi @crododile, this is a nice idea but unfortunately slowing down rendering immensely. Besides that, checking object types is something I avoid everywhere I can, just because I don't want to limit people's use of my libraries. The overuse of `is_a?` is something that's always bitten me in Rails, it's not a good practice to do so.\n\nInstead, I'll wait until Ruby gets static typing (which will be in about 10 yrs, hahaha). Does that make sense?\n\nThanks anyway, and good to hear you like it!\n. Thanks @crododile! It's nice to have someone take time to look into this! Can we redirect your effort to something else, though (and there is plenty of things to do)? It's simply not TRB-style to check arguments for types.\n\nIf we added that in Cells, we would have to add it everywhere else, and I don't think it's our job to do that.\n\nIt's the price we pay for a dynamic, loosely typed language, and I personally would prefer static types exactly for the reason you mention, but Ruby needs a lot of discipline or a lot of guard code which I do not second for the reasons above.\n. What argument string do you pass into the resolver?\n. Can you add a failing test to cover that case in https://github.com/apotonick/cells/blob/master/test/public_test.rb ? :heart: \n. Passing blocks from views doesn't really work because of the way the horrible output buffer is implemented. I'd use nested cells instead of this.\n\nWe will work on a new technique to allow this kind of code, but it will take a while. Sorry!\n. What happens when you call `::Rails::env` - this will work, that's pure Ruby and no Cells involved.\n. Of course, because this is wrong! :stuck_out_tongue_winking_eye: \n\n`cell(:promotion_rule).(:selector)` will return a Capybara-assertable string.\n`cell(:promotion_rule)` returns the cell instance. That's what you want.\n. Yes, can you move that to `cells-rails`, please? And maybe a Rails version check and no `respond_to?`. Awesome, thanks! :beers: \n. @dan-palmer Thanks, I merged your fix and then moved it over to `cells-rails`.\n. What if other cells would simply write to the `context` object?\n. I thought again about this: why don't we simply provide the content cell instance in the `:context` object? That would save the new argument and utilize what's already there.\n\n``` ruby\ncontext[:content_cell] # set per default\n```\n\nWhat do you think, will that do the trick?\n. This is tested and fixed.. Latest Cells!. I don't understand that.. the context is passed into collections, there's tests here: https://github.com/apotonick/cells/blob/master/test/context_test.rb#L18\n\nCould you provide a test that fails for your fix?\n. Hahaha thanks @toastercup I'm having a look today!\n. Just giving you a heads-up: we are planning to introduce a new collection API with a dedicated collection cell that you can override, etc. That is no excuse, though, why I haven't merged and fine-tuned this PR, though :blush:. Though.\n. It's actually a bug in this gem, so you're doing right in posting that here. It shouldn't merge the options hash that way!\n. This is the wrong repository, buddy! :grimacing: \n. In Cells, the concept of \"partials\" doesn't exist anymore, everything is just a view. A cell always has at least one of them. If you want to share views across cells, you can use view inheritance, change the `prefixes` or simply encapsulate the shared ones into a cell itself and than call it from the other two.\n\nMakes sense? https://gitter.im/trailblazer/chat\n. I might pick up this issue for our new Trailblazer [cookbook](http://pro.trailblazer.to). Thanks! :heart: \n. Pass the `spree` instance (whatever that is) into the cell.\n\n``` ruby\ncell(:comment, @comment, spree: spree)\n```\n\nand use it via `options` in the cell! :wink: \n. That's a pure Ruby problem and not related to Cells. I can't help you with \"it doesn't work\", I need more specific stack traces.\n. Enlighten us, what was it? :sunrise: :beers: :laughing: \n. Hi! Class-level layouts will be removed in Cells 5 in favor of the much more flexible runtime option, see the `:layout` option here: http://trailblazer.to/gems/cells/getting-started.html#putting-things-together\n. You don't pass the controller into the call. Please use the `cell` helper as documented here: http://trailblazer.to/gems/cells/api.html#instantiation-helper This helper will inject the controller for you and then `url_for` and friends work.\n\nI'm not sure I understand the stacktrace problem, could you paste your exception (or maybe the first 10 lines)?\n. It's simple, you have to find the helper module that defines this method and include it in the cell.\n\nPlease also update to 4.1.\n. @gaggle The \"upgrade\" to 4.1 should be seamless, you only need to bump up `cells` to 4.1 and `gem \"cells-rails\"`. What exception are you facing?\n\nI really encourage you to stay up-to-date! Jump on our Gitter channel for quick support. https://gitter.im/trailblazer/chat\n. It should work with 3.2 - I actually don't know about the Tilt compat, but you could try setting the cells tilt dependency to 1.1, this should still work.\n. @gaggle Can you show me one of those \"missing constant\" exceptions and the way you invoke the `cell` helper?\n. Good decision. :wink: . Currently, the context is \"global\".\n. And that changes fixes it? \ud83e\udd14 Why?\n. Yeah right, in Cells 5, there will only be constants, not magic `constant_for` anymore, so the `cell(Constant, ..)` is the way to go and how Rails resolves constants is not our problem anymore!\n. @jarosluv Yes, Cells 5 will be really straight-forward and zero magic.\n\nDon't get me wrong, if I did know your patch fixes this problem, I'd merge, but @samstickland has reported the opposite, so dropping all magic entirely is probably best. Thanks anyway, great to see your dedication!\n. That's brilliant! But no test? :sob: \n. @JelF Thanks, into layout test, please. @timoschilling what do you think about this?\n. :hand: <-- :highfive:\n. http://trailblazer.to/gems/cells/api.html#yield\n\nThe `cell` helper doesn't pass your block on.\n. Actually, it's not the `cell` \"helper\" but `::call` that doesn't pass on the block: https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L45\n\nI can't remember exactly but there was some problem...?!?!?!\n. The problem is the way ERB is implemented for Rails views: it writes to a stupid instance variable and then Rails changes this variable (aka output buffer) globally when capturing - it's a horrible hack that \"makes it work\". \r\n\r\nThe solution is to use our ERBse gem and Cells, only, because there is no global `capture` state. I'm sorry but I can't easily fix it and won't waste more time on improving Rails, please use Cells for your views and everything will work as expected. :beers: . Closing this as we can't do anything about the Haml releases. I recommend using Slim.. Yeah! In Cells 5, there is only the `Trailblazer::Cell` style, and it'll *finally* be called \"cell\", again.. Actually, we should mark that the constant way is the new default, @georgemillo!!!. I think they will be merged? Not sure about the inheritance hierarchy, though.\r\n\r\nThere's no point in dragging around 3 different styles forever :blush: (my bad!).. Actually @georgemillo it's probably a good time to start talking about Cells 5? We should reactivate @timoschilling for this.. Agreeing with @Startouf - in builder, I'm also OK with a `case` statement, it looks better. . A test to illustrate the problem would be great! :heart: . Let me think about it! Can you show me an example Rspec test, please? :beers: . Please use the new constant API: `cell(Advisor::Offer, ...)`. This is a Ruby-problem and not related to Cells.. You simply pass the cell constant to `cell`, I don't know your app, so `Advisor::Offer` might be wrong, I don't even know if you use Trailblazer::Cell or `Cell::ViewModel`, does `cell Advisor::OfferCell` maybe do the trick?. You are misunderstanding the API :wink: Whatever your cell *class* name is, e.g. `Advisor::OfferIndexWhateverCell`, you have to pass that class into `cell`.\r\n\r\n```ruby\r\ncell(Advisor::OfferIndexWhateverCell, advisor_model)\r\n```\r\n\r\nCells doesn't know or care about your ActiveRecord setup, that's why you pass the cell class and the model instance. Ok?. The gem you use uses Rails' `render` API, but Cells has its own API. It calls the wrong `render`. Solution is to rewrite table-for to use Cells.. Yepp, the newer versions of cells-rails do not support several helpers of Rails anymore that use global state buffering. We're sorry for the inconvenience but those few \"helpers\" would dramatically increase our code complexity. Maybe it's time to write our own `link_to` helper that's done properly, and not a disgusting hack?. The problem is Reform 2.2.3, and not Cells.\n\nOn Mon, Jan 30, 2017 at 3:53 AM, wintersolutions <notifications@github.com>\nwrote:\n\n> I updated cells from 4.1.5 to version 4.1.6. When I run my specs now I get\n> the error Uninitialized constant Uber::Options (NameError). The full\n> stacktrace (anonymized) is found below.\n>\n> Currently my workaround is to not update cells.\n>\n> *Note*: This issue was filed under trailblazer/trailblazer#175\n> <https://github.com/trailblazer/trailblazer/issues/175> first until I\n> found out that cells is the culprit here.\n>\n> Relevant gems and their versions:\n>\n>    - trailblazer 2.0.3\n>    - bundler 1.13.6\n>    - cells-rails 0.0.7\n>    - cells 4.1.6\n>    - cells-hamlit 0.2.0\n>    - trailblazer-cells 0.0.3\n>    - trailblazer-loader 0.1.0\n>    - trailblazer-operation 0.0.12\n>    - trailblazer-rails 1.0.2\n>    - uber 0.1.0\n>\n> /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-2.2.3/lib/reform/form/populator.rb:12:in `initialize': uninitialized constant Uber::Options (NameError)\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-2.2.3/lib/reform/form.rb:25:in `new'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-2.2.3/lib/reform/form.rb:25:in `property'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-rails-0.1.7/lib/reform/form/active_model.rb:30:in `property'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/reform-rails-0.1.7/lib/reform/form/active_model/form_builder_methods.rb:15:in `property'\n> \tfrom /home/foo_user/projects/foo_project/app/concepts/base_contract.rb:2:in `<class:BaseContract>'\n> \tfrom /home/foo_user/projects/foo_project/app/concepts/base_contract.rb:1:in `<top (required)>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/dependencies/interlock.rb:12:in `block in loading'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/concurrency/share_lock.rb:150:in `exclusive'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/dependencies/interlock.rb:11:in `loading'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-rails-1.0.2/lib/trailblazer/rails/railtie.rb:19:in `block in load_for'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-loader-0.1.0/lib/trailblazer/loader.rb:75:in `block in load_files'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-loader-0.1.0/lib/trailblazer/loader.rb:75:in `each'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-loader-0.1.0/lib/trailblazer/loader.rb:75:in `load_files'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-loader-0.1.0/lib/trailblazer/loader.rb:38:in `call'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-rails-1.0.2/lib/trailblazer/rails/railtie.rb:19:in `load_for'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-rails-1.0.2/lib/trailblazer/rails/railtie.rb:11:in `load_concepts'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/trailblazer-rails-1.0.2/lib/trailblazer/rails/railtie.rb:31:in `block (2 levels) in <class:Railtie>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:396:in `instance_exec'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:396:in `block in make_lambda'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:169:in `block (2 levels) in halting'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:547:in `block (2 levels) in default_terminator'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:546:in `catch'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:546:in `block in default_terminator'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:170:in `block in halting'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:454:in `block in call'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:454:in `each'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:454:in `call'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:101:in `__run_callbacks__'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:750:in `_run_prepare_callbacks'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/callbacks.rb:90:in `run_callbacks'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/activesupport-5.0.1/lib/active_support/reloader.rb:87:in `prepare!'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/application/finisher.rb:53:in `block in <module:Finisher>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/initializable.rb:30:in `instance_exec'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/initializable.rb:30:in `run'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/initializable.rb:55:in `block in run_initializers'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:228:in `block in tsort_each'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:350:in `block (2 levels) in each_strongly_connected_component'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:431:in `each_strongly_connected_component_from'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:349:in `block in each_strongly_connected_component'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:347:in `each'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:347:in `call'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:347:in `each_strongly_connected_component'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:226:in `tsort_each'\n> \tfrom /home/foo_user/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:205:in `tsort_each'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/initializable.rb:54:in `run_initializers'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/railties-5.0.1/lib/rails/application.rb:352:in `initialize!'\n> \tfrom /home/foo_user/projects/foo_project/config/environment.rb:5:in `<top (required)>'\n> \tfrom /home/foo_user/projects/foo_project/spec/rails_helper.rb:6:in `require'\n> \tfrom /home/foo_user/projects/foo_project/spec/rails_helper.rb:6:in `<top (required)>'\n> \tfrom /home/foo_user/projects/foo_project/spec/concepts/base_operation_spec.rb:1:in `require'\n> \tfrom /home/foo_user/projects/foo_project/spec/concepts/base_operation_spec.rb:1:in `<top (required)>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1435:in `load'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1435:in `block in load_spec_files'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1433:in `each'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/configuration.rb:1433:in `load_spec_files'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:100:in `setup'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:86:in `run'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:71:in `run'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/lib/rspec/core/runner.rb:45:in `invoke'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/gems/rspec-core-3.5.4/exe/rspec:4:in `<top (required)>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/bin/rspec:22:in `load'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/bin/rspec:22:in `<main>'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/bin/ruby_executable_hooks:15:in `eval'\n> \tfrom /home/foo_user/.rvm/gems/ruby-2.3.3@foo_project/bin/ruby_executable_hooks:15:in `<main>'\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/trailblazer/cells/issues/445>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAAopgfw6AKIohX_qShWcR2uTw8rsADMks5rXMQagaJpZM4Lw1qZ>\n> .\n>\n. You can now upgrade to Reform 2.2.4, which doesn't use `uber` anymore.. Hi El, you need to include the respective cell format module into the cells.\r\n\r\n```ruby\r\nclass Hello < Cell::ViewModel\r\n  include Cell::Haml\r\n```\r\n\r\nTwo things: please use `trailblazer-cells` wherever you can to stay forward compatible (only [a few things in the behavior](http://trailblazer.to/gems/cells/trailblazer.html) have changed) and avoid Haml wherever you can, it's dead, use Slim.. ```\r\ncells$ gem push cells-4.1.7.gem \r\nPushing gem to https://rubygems.org...\r\nSuccessfully registered gem: cells (4.1.7)\r\n```. Yes, the problem is, that with this bump we will break other people's tests because they might not have a strict ERBse version set and do test their cells using `must_equal`. We should bump it in the Gemfile!!!. Argh, I was only reading `dependency`, sorry! :beers: . This issue must be raised in `cells-rails`, because `cells` has nothing to do with Rails.. Since the `cells-rails` dependency comes via a gem itself, you might have to `require \"cells/rails\"` in the dummy app or - maybe better - in your engine's lib file (`yourgem/lib/yourgem.rb`).. I don't know if autoloading works with a Rails engine, I am guessing you have to `require_relative` the files you need. The error indicates that files defining class constants haven't been loaded. This is usually done manually in gems.. Here's a typical \"top-level\" gem file: https://github.com/trailblazer/trailblazer/blob/master/lib/trailblazer.rb. In the gem! See the above link as an example, the trailblazer gem loads all files with the classes it wants to provide to the user. :beers: . Why are your engine cell files outside of `lib`? You should have a bunch of lines in your `my-rails-engine.rb` file saying stuff such as\r\n\r\n```ruby\r\nrequire_relative \"cell/bla/main.rb\" # will load my-rails-engine/lib/cell/bla/main.rb\r\n```\r\n\r\nThis is a standard thing to do in gems, you will find it in a hundred thousands of them. Maybe the engine is not aware of the load path where your gem's cells sit, and you need to add it to the engine's configuration. Rails engines are a great idea, but the implementation is quite limited to Rails-only files (e.g. models).\r\n\r\n@rafaelfranca can you help us? We want to have cell class files from a Rails engine autoloaded by Rails - is that what engines are supposed to do automatically?. @TheFlow0360 Komm mal auf https://gitter.im/trailblazer/chat !. ",
    "kinokuni": "I'm sorry for the late reply, but I tested the source \nand I confirmed that it works as expected for me.\nThank you. \n. I'm sorry for the late reply, but I tested the source \nand I confirmed that it works as expected for me.\nThank you. \n. ",
    "giates": "I just tried with new rails project:\n\nscript/generate cell test test test1\nscript/generate controller test test\n\napp/views/test/test.html.erb:\n<code><%- 1.upto(100) do -%><%= render_cell :test, :test %><%- end -%></code>\n\nNow calling http://localhost:3000/test/test:\n\ndevelopment: Completed in 722ms (View: 718, DB: 0)\nproduction: Completed in 800ms (View: 799, DB: 0)\n\nI don't understand where is the problem...\n. I just tried reverting the test application from cells to partials:\n\napp/views/test/test.html.erb: \n<code><%- 1.upto(100) do -%><%= render :partial => \"test\" %><%- end -%></code>\n\napp/views/test/_test.html.erb:\n<code><h1>Test#test</h1></code>\n\ndevelopment: Completed in 65ms (View: 61, DB: 0)\nproduction: Completed in 24ms (View: 23, DB: 0)\n\nThe results are now correct: production is about 3x faster than development (cells seems to be 10x slower than partial but this is not a big problem, the problem is that in production mode cells are slower than development mode...)\n. I solved it.\n\nInto the cell controller I've put:\n\n  def flashes\n    @flash = parent_controller.flash\n    render\n  end\n\nand into the view I use @flash instead of flash.\n\nMany thanks for your response.\n. Now my project is fully using rails cells and it is very modular.\n\nMany thanks for your support and congratulations for the wonderful gem !!!\n. I just tried with new rails project:\n\nscript/generate cell test test test1\nscript/generate controller test test\n\napp/views/test/test.html.erb:\n<code><%- 1.upto(100) do -%><%= render_cell :test, :test %><%- end -%></code>\n\nNow calling http://localhost:3000/test/test:\n\ndevelopment: Completed in 722ms (View: 718, DB: 0)\nproduction: Completed in 800ms (View: 799, DB: 0)\n\nI don't understand where is the problem...\n. I just tried reverting the test application from cells to partials:\n\napp/views/test/test.html.erb: \n<code><%- 1.upto(100) do -%><%= render :partial => \"test\" %><%- end -%></code>\n\napp/views/test/_test.html.erb:\n<code><h1>Test#test</h1></code>\n\ndevelopment: Completed in 65ms (View: 61, DB: 0)\nproduction: Completed in 24ms (View: 23, DB: 0)\n\nThe results are now correct: production is about 3x faster than development (cells seems to be 10x slower than partial but this is not a big problem, the problem is that in production mode cells are slower than development mode...)\n. I solved it.\n\nInto the cell controller I've put:\n\n  def flashes\n    @flash = parent_controller.flash\n    render\n  end\n\nand into the view I use @flash instead of flash.\n\nMany thanks for your response.\n. Now my project is fully using rails cells and it is very modular.\n\nMany thanks for your support and congratulations for the wonderful gem !!!\n. ",
    "sjamaan": "I noticed that if you use cell class hierarchies, it can be quite slow because it traverses the hierarchy to find the file every single time. Instead, you can cache it in the template class. Here's a patch for the Rails 2.1 version which I'm still using. I'm sure it is pretty trivial to port it to the latest version. (I hope this comes through correctly, there's no preview function...)\n\n```\nIndex: lib/cell/template_finder.rb\n===================================================================\n--- lib/cell/template_finder.rb (revision 55)\n+++ lib/cell/template_finder.rb (working copy)\n@@ -39,13 +39,19 @@\n     # First check for this template in the application. If it exists, the user has\n     # overridden anything from the plugin, so use it (unless we're testing plugins).\n     def resolve_cells_path_and_extension(cell, state, type_ext)\n+      @@known_paths ||= {}\n+      res = @@known_paths[\"#{cell.cell_name}/#{state}/#{type_ext}\"]\n+      return res if res\n+\n       resolve_cell = cell.class\n\n       while resolve_cell != Cell::Base\n         possible_cell_paths.each do |path|\n           template_handler_extensions.each do |ext|\n             if File.exists?(path_for_cell_template_with_type_extension(path, resolve_cell.cell_name, state, type_ext) +'.'+ext)\n-              return [path_for_cell_template_with_type_extension(path, resolve_cell.cell_name, state, type_ext), ext]\n+              res = [path_for_cell_template_with_type_extension(path, resolve_cell.cell_name, state, type_ext), ext]\n+              @@known_paths[\"#{cell.cell_name}/#{state}/#{type_ext}\"] = res if ENV[\"RAILS_ENV\"] == \"production\"\n+              return res\n             end\n           end\n         end\n```\n. I noticed that if you use cell class hierarchies, it can be quite slow because it traverses the hierarchy to find the file every single time. Instead, you can cache it in the template class. Here's a patch for the Rails 2.1 version which I'm still using. I'm sure it is pretty trivial to port it to the latest version. (I hope this comes through correctly, there's no preview function...)\n\n```\nIndex: lib/cell/template_finder.rb\n===================================================================\n--- lib/cell/template_finder.rb (revision 55)\n+++ lib/cell/template_finder.rb (working copy)\n@@ -39,13 +39,19 @@\n     # First check for this template in the application. If it exists, the user has\n     # overridden anything from the plugin, so use it (unless we're testing plugins).\n     def resolve_cells_path_and_extension(cell, state, type_ext)\n+      @@known_paths ||= {}\n+      res = @@known_paths[\"#{cell.cell_name}/#{state}/#{type_ext}\"]\n+      return res if res\n+\n       resolve_cell = cell.class\n\n       while resolve_cell != Cell::Base\n         possible_cell_paths.each do |path|\n           template_handler_extensions.each do |ext|\n             if File.exists?(path_for_cell_template_with_type_extension(path, resolve_cell.cell_name, state, type_ext) +'.'+ext)\n-              return [path_for_cell_template_with_type_extension(path, resolve_cell.cell_name, state, type_ext), ext]\n+              res = [path_for_cell_template_with_type_extension(path, resolve_cell.cell_name, state, type_ext), ext]\n+              @@known_paths[\"#{cell.cell_name}/#{state}/#{type_ext}\"] = res if ENV[\"RAILS_ENV\"] == \"production\"\n+              return res\n             end\n           end\n         end\n```\n. ",
    "yury": "Still very slow on production with rails 2.3.x\nif config.action_view.cache_template_loading == true (as in production) then\nActionView use EagerPath and with Cells it very slow.\nif config.action_view.cache_template_loading == false then\nReloadablePath path is used in ActionView\n. huge speed with http://github.com/yury/cells/commit/2096bae64198942beb7c55806ac933c67033d665\n\nwithout fix:\nCompleted in 2995ms (View: 2855, DB: 84) | 200 OK\nwith fix:\nCompleted in 433ms (View: 263, DB: 84) | 200 OK\n. Still very slow on production with rails 2.3.x\nif config.action_view.cache_template_loading == true (as in production) then\nActionView use EagerPath and with Cells it very slow.\nif config.action_view.cache_template_loading == false then\nReloadablePath path is used in ActionView\n. huge speed with http://github.com/yury/cells/commit/2096bae64198942beb7c55806ac933c67033d665\n\nwithout fix:\nCompleted in 2995ms (View: 2855, DB: 84) | 200 OK\nwith fix:\nCompleted in 433ms (View: 263, DB: 84) | 200 OK\n. ",
    "cice": "hey guys,\nthe problem lies in here:\nhttp://github.com/apotonick/cells/blob/master/lib/cell/base.rb#L220\nself.view_paths = ActionView::PathSet.new\n\none would expect that self.view_paths now contains a PathSet, but due to the implementation of class_inheritable_array, it is still an array, therefore all caching,memoizing etc is repeated for every request (which is avoided with a pathset, cause every path is saved as EagerPath with a @loaded flag). if you pass an array to the template, every path gets parsed into an EagerPath, memoized and freezed with every request for each cell!\n\na simple solution would be to replace \n    self.view_paths = ActionView::PathSet.new\nwith\n    write_inheritable_attribute(:view_paths, ActionView::PathSet.new)\n\nit took me about 5 hours to get to that, at least im now familiar with cells and rails source code :D\n. update: before my patch i had in \ndevelopment mode\n800ms\nproduction mode\n3000ms\n\nnow in production mode:\n~50ms\n. nice!\n. hey guys,\nthe problem lies in here:\nhttp://github.com/apotonick/cells/blob/master/lib/cell/base.rb#L220\nself.view_paths = ActionView::PathSet.new\n\none would expect that self.view_paths now contains a PathSet, but due to the implementation of class_inheritable_array, it is still an array, therefore all caching,memoizing etc is repeated for every request (which is avoided with a pathset, cause every path is saved as EagerPath with a @loaded flag). if you pass an array to the template, every path gets parsed into an EagerPath, memoized and freezed with every request for each cell!\n\na simple solution would be to replace \n    self.view_paths = ActionView::PathSet.new\nwith\n    write_inheritable_attribute(:view_paths, ActionView::PathSet.new)\n\nit took me about 5 hours to get to that, at least im now familiar with cells and rails source code :D\n. update: before my patch i had in \ndevelopment mode\n800ms\nproduction mode\n3000ms\n\nnow in production mode:\n~50ms\n. nice!\n. ",
    "grimen": "I could make a patch for this, want? =)\n. See:\n\nhttp://github.com/grimen/cells/commit/4ae1430dd09fc0e2a5c406822e6a7f03b2923b23\n. Done (http://gemcutter.org/gems/cells), so let's close this - and add a README note on how to install. =)\n. Note: In the cell view I need to call current_account.\n. Neither this solves the problem: render :locals => {:current_account => current_account}\n. Right, but a cell is rather a \"child\" of a controller as a controller render a view that render one or many cells. It's actually also a bit of a problem that cells dont' support controller helpers, as _all?_ authentication solutions defines helpers in controller. This code-duplication make cells bittersweet I must say. I would suggest looking on controller helpers as a \"parent\".\n. Yes, but helper won't work because I got loads of helpers that belongs to  - and is defined in - controllers, but is used as helpers as well with \"helper_method :my_method_1, :my_method_2, ... A pattern used in most plugins I'm aware of, e.g. Devise, Facebooker, etc. As I see it, even if Cells is excellent as a philosophy and plugin; Cells needs to support these globally available controller helpers somehow, otherwise it'll be more pain than gain to use Cells. Btw, helper_methods are usually declared for ActionController::Base so if these helpers could be included somehow.\n. Update: \n\nHere's how helper_method works under the hood:\n\nhttp://www.neeraj.name/blog/articles/718-how-helper_method-brings-methods-to-view-level\n\nI tried to access them using ActionController::Base.helpers.{method}, but for some reason this don't work either. Will continue see if I can solve this...\n. I tried that already, but as already described above many helpers are not defined in helpers, rather in controller but added to the master template as helpers (helper modules). If you look into the the article I posted above you see that your code suggestions cannot work for helpers defined in controllers. ActionController::Base.helpers.{method} should work, but there seems to be a Rails bug which I filed in the Rails issue tracker. Anyway, that bug is not the reason for why these helpers are not available in cells.\n. Example of controller helpers:\n\nhttp://github.com/plataformatec/devise/blob/master/lib/devise/controllers/helpers.rb\n. That was just a sample, so won't change much I'm afraid. OK, well that won't happen (other developers to mixin stuf finto Cell::Base) I'm sure unless Cells gets merged into Rails. Thanks for the follow ups though. I'll let u know if I find a best practice on my own to get around it.\n. My solution/hack that works (but discussable why):\n\napp/helpers/cells_hacks_helper.rb:\n\n<pre>\nmodule CellsHacksHelper\n  def method_missing(method, *args)\n    controller.send(method, *args) rescue super(method, *args)\n  end\nend\n</pre>\n\n\napp/cells/some_cell.rb:\n\n<pre>\nclass SomeCell < Cell::Base\n  helper :cells_hacks\n  # ...\nend\n</pre>\n. @joshk: :) Just had to.\n. I could make a patch for this, want? =)\n. See:\n\nhttp://github.com/grimen/cells/commit/4ae1430dd09fc0e2a5c406822e6a7f03b2923b23\n. Done (http://gemcutter.org/gems/cells), so let's close this - and add a README note on how to install. =)\n. Note: In the cell view I need to call current_account.\n. Neither this solves the problem: render :locals => {:current_account => current_account}\n. Right, but a cell is rather a \"child\" of a controller as a controller render a view that render one or many cells. It's actually also a bit of a problem that cells dont' support controller helpers, as _all?_ authentication solutions defines helpers in controller. This code-duplication make cells bittersweet I must say. I would suggest looking on controller helpers as a \"parent\".\n. Yes, but helper won't work because I got loads of helpers that belongs to  - and is defined in - controllers, but is used as helpers as well with \"helper_method :my_method_1, :my_method_2, ... A pattern used in most plugins I'm aware of, e.g. Devise, Facebooker, etc. As I see it, even if Cells is excellent as a philosophy and plugin; Cells needs to support these globally available controller helpers somehow, otherwise it'll be more pain than gain to use Cells. Btw, helper_methods are usually declared for ActionController::Base so if these helpers could be included somehow.\n. Update: \n\nHere's how helper_method works under the hood:\n\nhttp://www.neeraj.name/blog/articles/718-how-helper_method-brings-methods-to-view-level\n\nI tried to access them using ActionController::Base.helpers.{method}, but for some reason this don't work either. Will continue see if I can solve this...\n. I tried that already, but as already described above many helpers are not defined in helpers, rather in controller but added to the master template as helpers (helper modules). If you look into the the article I posted above you see that your code suggestions cannot work for helpers defined in controllers. ActionController::Base.helpers.{method} should work, but there seems to be a Rails bug which I filed in the Rails issue tracker. Anyway, that bug is not the reason for why these helpers are not available in cells.\n. Example of controller helpers:\n\nhttp://github.com/plataformatec/devise/blob/master/lib/devise/controllers/helpers.rb\n. That was just a sample, so won't change much I'm afraid. OK, well that won't happen (other developers to mixin stuf finto Cell::Base) I'm sure unless Cells gets merged into Rails. Thanks for the follow ups though. I'll let u know if I find a best practice on my own to get around it.\n. My solution/hack that works (but discussable why):\n\napp/helpers/cells_hacks_helper.rb:\n\n<pre>\nmodule CellsHacksHelper\n  def method_missing(method, *args)\n    controller.send(method, *args) rescue super(method, *args)\n  end\nend\n</pre>\n\n\napp/cells/some_cell.rb:\n\n<pre>\nclass SomeCell < Cell::Base\n  helper :cells_hacks\n  # ...\nend\n</pre>\n. @joshk: :) Just had to.\n. ",
    "subimage": "I'm an idiot...appears I was just referencing something incorrectly. My bad! Deleted the previous comment.\n. Still bombing out...\n\n<pre>\nrequire 'test_helper'\n\nclass ClientCellTest < ActionController::TestCase\n  fixtures(\n    :accounts, :estimates, :line_items, :people, :companies\n  )\n  include Cells::AssertionsHelper\n  include ActionController::UrlWriter\n  \n  def test_select_control\n    est = estimates(:auctions_redesign)\n    \n    cell = cell(\n      :client, {\n        :account => accounts(:paid),\n        :select_name => 'estimate',\n        :selected => est.client\n      }\n    )\n    cell.select_control()\n    \n    html = render_cell(\n      :client, \n      :select_control, \n      :account => accounts(:paid),\n      :select_name => 'estimate',\n      :selected => est.client\n    )\n    \n    assert_selekt html, \"span#selected_client_text\"\n  end\nend\n</pre>\n\n\n<pre>\n\n1) Error:\ntest_select_control(ClientCellTest):\nActionView::TemplateError: undefined method `rewrite' for nil:NilClass\nOn line #85 of app/cells/client/select_control.html.erb\n\n\n82:       div.scrollTop = div.scrollHeight;\n83:     },\n84:     insertPerson: function(id) {\n85:             var url = \"<%= url_for(:controller => 'people', :action => 'show') %>\";\n86:             var pars = {}\n87:             pars[\"id\"] = id;\n88:             new Ajax.Request(\n\n\napp/cells/client/select_control.html.erb:85\napp/cells/client_cell.rb:12:in `select_control'\n</pre>\n. I'm an idiot...appears I was just referencing something incorrectly. My bad! Deleted the previous comment.\n. Still bombing out...\n\n<pre>\nrequire 'test_helper'\n\nclass ClientCellTest < ActionController::TestCase\n  fixtures(\n    :accounts, :estimates, :line_items, :people, :companies\n  )\n  include Cells::AssertionsHelper\n  include ActionController::UrlWriter\n  \n  def test_select_control\n    est = estimates(:auctions_redesign)\n    \n    cell = cell(\n      :client, {\n        :account => accounts(:paid),\n        :select_name => 'estimate',\n        :selected => est.client\n      }\n    )\n    cell.select_control()\n    \n    html = render_cell(\n      :client, \n      :select_control, \n      :account => accounts(:paid),\n      :select_name => 'estimate',\n      :selected => est.client\n    )\n    \n    assert_selekt html, \"span#selected_client_text\"\n  end\nend\n</pre>\n\n\n<pre>\n\n1) Error:\ntest_select_control(ClientCellTest):\nActionView::TemplateError: undefined method `rewrite' for nil:NilClass\nOn line #85 of app/cells/client/select_control.html.erb\n\n\n82:       div.scrollTop = div.scrollHeight;\n83:     },\n84:     insertPerson: function(id) {\n85:             var url = \"<%= url_for(:controller => 'people', :action => 'show') %>\";\n86:             var pars = {}\n87:             pars[\"id\"] = id;\n88:             new Ajax.Request(\n\n\napp/cells/client/select_control.html.erb:85\napp/cells/client_cell.rb:12:in `select_control'\n</pre>\n. ",
    "vdshah": "I am not sure that I understand what the fix is saying to do here. What initializer should we be modifying? Why is this necessary? Can this be fixed in cells instead?\n. After some poking around in the cells source, I found that adding the following initializer is what is required:\n\nconfig/initializers/cells.rb\n\nCell::Base.view_paths=[\n  File.join(RAILS_ROOT, 'app', 'cells'),\n  File.join(RAILS_ROOT, 'app', 'cells', 'layouts')\n]\n\nHope this helps!\n. I am having this same issue with cells 3.3.5.\n\nWhat I have found is that if I run script/server, it works okay. However, for some bizarre reason, script/server -d makes it fail. To the best of my knowledge, this is consistent and reproducible.\n. Ah, apparently this is discussed in another one of your tickets... https://github.com/apotonick/cells/issues#issue/10\n. I am not sure that I understand what the fix is saying to do here. What initializer should we be modifying? Why is this necessary? Can this be fixed in cells instead?\n. After some poking around in the cells source, I found that adding the following initializer is what is required:\n\nconfig/initializers/cells.rb\n\nCell::Base.view_paths=[\n  File.join(RAILS_ROOT, 'app', 'cells'),\n  File.join(RAILS_ROOT, 'app', 'cells', 'layouts')\n]\n\nHope this helps!\n. I am having this same issue with cells 3.3.5.\n\nWhat I have found is that if I run script/server, it works okay. However, for some bizarre reason, script/server -d makes it fail. To the best of my knowledge, this is consistent and reproducible.\n. Ah, apparently this is discussed in another one of your tickets... https://github.com/apotonick/cells/issues#issue/10\n. ",
    "aishek": "Yeah, that's helps, thanks!\n\nBut I think that this remark should be at least included at docs.\n. Yeah, that's helps, thanks!\n\nBut I think that this remark should be at least included at docs.\n. ",
    "semaperepelitsa": "Hi, I have hit the same issue: when running my integration tests from the test directory Cell searches app/cells under the test directory instead of the app's root. And the initializer with setting view paths does not work, unfortunately. I think it is because your railtie's initializer is running after my initializers. Anyway, the issue could be fixed in the railtie like this:\n\n```\ninitializer \"cells.setup_view_paths\" do |app|\n  Cell::Base.view_paths = app.root + \"app/cells\"\nend\n```\n\nShould I send a pull request?\n. The railtie can be used only in Rails (not in Sinatra) AFAIK\n\nOn 24.04.2012, at 18:33, Nick Suttererreply@reply.github.com wrote:\n\n> Cool, thanks for those hints! I wanna keep the relative path for future compat (e.g. when cells will run in Sinatra). However, the cells view_paths initializer should run _before_ your stuff is run _and_ we still need to note that in the README.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/10#issuecomment-5301679\n. Hi, I have hit the same issue: when running my integration tests from the test directory Cell searches app/cells under the test directory instead of the app's root. And the initializer with setting view paths does not work, unfortunately. I think it is because your railtie's initializer is running after my initializers. Anyway, the issue could be fixed in the railtie like this:\n\n```\ninitializer \"cells.setup_view_paths\" do |app|\n  Cell::Base.view_paths = app.root + \"app/cells\"\nend\n```\n\nShould I send a pull request?\n. The railtie can be used only in Rails (not in Sinatra) AFAIK\n\nOn 24.04.2012, at 18:33, Nick Suttererreply@reply.github.com wrote:\n\n> Cool, thanks for those hints! I wanna keep the relative path for future compat (e.g. when cells will run in Sinatra). However, the cells view_paths initializer should run _before_ your stuff is run _and_ we still need to note that in the README.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/10#issuecomment-5301679\n. ",
    "fmalamitsas": "Yes it's working now.\n\nMany thanks apotonick.\n. Hey apotonick,\n\n #content_for ? yep it works.\n\nThank you for your reactivity, that's great\n. Thanks for the fix Nick\n. Yes it's working now.\n\nMany thanks apotonick.\n. Hey apotonick,\n\n #content_for ? yep it works.\n\nThank you for your reactivity, that's great\n. Thanks for the fix Nick\n. ",
    "create-marcel": "same issue with rails 3.0.11 and latest cells version 3.8.2\n. sorry. just found out. i m refactoring old code from 2.3. there was still < Cell:Base in the cells instead of < Cell:Rails\n. same issue with rails 3.0.11 and latest cells version 3.8.2\n. sorry. just found out. i m refactoring old code from 2.3. there was still < Cell:Base in the cells instead of < Cell:Rails\n. ",
    "pfenig": "Oh Cell::Rails.  I missed that change. Nevermind.\n. Oh Cell::Rails.  I missed that change. Nevermind.\n. ",
    "seanbot2000": "3.3.1 - I've never had issues with this before. Not sure where to go to troubleshoot the problem.\n. It is the common view for all pages. I disabled this and other calls and they seem to all have the same issue. The cell inherits nothing and the method and render call are empty:\ndef top\n    render\n  end\n\nHere's the stack trace:\n\n/usr/lib64/ruby/gems/1.8/gems/actionpack-2.3.8/lib/action_view/paths.rb:74:in `find_template'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/view.rb:13:in`try_picking_template_for_path'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:403:in `find_family_view_for_state'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:399:in`each'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:399:in `find_family_view_for_state'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:417:in`find_family_view_for_state_with_caching'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:352:in `render_view_for'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:328:in`render'\n/home6/seannoye/rails/ma/app/cells/design_cell.rb:4:in `top'\n/home6/seannoye/rails/ma/app/views/layouts/public.html.erb:25:in`_run_erb_app47views47layouts47public46html46erb'\n. 3.3.1 - I've never had issues with this before. Not sure where to go to troubleshoot the problem.\n. It is the common view for all pages. I disabled this and other calls and they seem to all have the same issue. The cell inherits nothing and the method and render call are empty:\ndef top\n    render\n  end\n\nHere's the stack trace:\n\n/usr/lib64/ruby/gems/1.8/gems/actionpack-2.3.8/lib/action_view/paths.rb:74:in `find_template'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/view.rb:13:in`try_picking_template_for_path'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:403:in `find_family_view_for_state'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:399:in`each'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:399:in `find_family_view_for_state'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:417:in`find_family_view_for_state_with_caching'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:352:in `render_view_for'\n/home6/seannoye/ruby/gems/gems/cells-3.3.4/lib/cells/cell/base.rb:328:in`render'\n/home6/seannoye/rails/ma/app/cells/design_cell.rb:4:in `top'\n/home6/seannoye/rails/ma/app/views/layouts/public.html.erb:25:in`_run_erb_app47views47layouts47public46html46erb'\n. ",
    "mooktakim": "Recent entry in the blog mentions that in Rails3 cells are controllers?\nso i'm think BasketCell.action(:index) should be possible.\n\nWill test this out\n. nope, can't do it.\n\"action\" method doesn't exist.\n\nIt would be great if we could do this though, would be VERY handy.\nSimilar to how rack app can be mounted in a route for rails3\n. Absolutely. It would be a very cool way to decouple the cells and routes.\nYou would have all the flexibility to create whatever routing you would want.\n. I mean, it would decouple cells from controllers. At the moment you need require a controller to display the cell, so you can route to it.\n. Recent entry in the blog mentions that in Rails3 cells are controllers?\nso i'm think BasketCell.action(:index) should be possible.\n\nWill test this out\n. nope, can't do it.\n\"action\" method doesn't exist.\n\nIt would be great if we could do this though, would be VERY handy.\nSimilar to how rack app can be mounted in a route for rails3\n. Absolutely. It would be a very cool way to decouple the cells and routes.\nYou would have all the flexibility to create whatever routing you would want.\n. I mean, it would decouple cells from controllers. At the moment you need require a controller to display the cell, so you can route to it.\n. ",
    "jamesbebbington": "@apotonick did this go anywhere in the end? We too would like to explore caching cells with Varnish.\n. Assuming we only need to  support Rails 3 we can use [`ActiveSupport::Notifications`](http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html) ([RailsCast](http://railscasts.com/episodes/249-notifications-in-rails-3)).\n\nI had a quick play with it and simply modifying `#expire_cache_key` and `#render_state` in `Cell::Caching::ClassMethods` to include instrumentation seems to do the job:\n\n``` ruby\ndef expire_cache_key(key, *args)\n  ActiveSupport::Notifications.instrument(\"expire_fragment.action_controller\", :key => key) do\n    cache_store.delete(key, *args)\n  end\nend\n\ndef render_state(state, *args)\n  return super(state, *args) unless self.class.cache?(state)\n\n  key     = self.class.state_cache_key(state, call_state_versioner(state, *args))\n  options = self.class.cache_options[state]\n\n  ActiveSupport::Notifications.instrument(\"read_fragment.action_controller\", :key => key) do\n    self.class.cache_store.fetch(key, options) do\n      ActiveSupport::Notifications.instrument(\"write_fragment.action_controller\", :key => key) do\n        super(state, *args)\n      end\n    end\n  end\nend\n```\n\nNote that the instrumentation in `#render_state` does result in both a read and write being logged the when the cache is empty, so the logic may want to be changed to conditionally do a cache read or write instead of a fetch.\n\nI wasn't sure how to go about testing this however as I couldn't see any caching tests.\n. @apotonick did this go anywhere in the end? We too would like to explore caching cells with Varnish.\n. Assuming we only need to  support Rails 3 we can use [`ActiveSupport::Notifications`](http://api.rubyonrails.org/classes/ActiveSupport/Notifications.html) ([RailsCast](http://railscasts.com/episodes/249-notifications-in-rails-3)).\n\nI had a quick play with it and simply modifying `#expire_cache_key` and `#render_state` in `Cell::Caching::ClassMethods` to include instrumentation seems to do the job:\n\n``` ruby\ndef expire_cache_key(key, *args)\n  ActiveSupport::Notifications.instrument(\"expire_fragment.action_controller\", :key => key) do\n    cache_store.delete(key, *args)\n  end\nend\n\ndef render_state(state, *args)\n  return super(state, *args) unless self.class.cache?(state)\n\n  key     = self.class.state_cache_key(state, call_state_versioner(state, *args))\n  options = self.class.cache_options[state]\n\n  ActiveSupport::Notifications.instrument(\"read_fragment.action_controller\", :key => key) do\n    self.class.cache_store.fetch(key, options) do\n      ActiveSupport::Notifications.instrument(\"write_fragment.action_controller\", :key => key) do\n        super(state, *args)\n      end\n    end\n  end\nend\n```\n\nNote that the instrumentation in `#render_state` does result in both a read and write being logged the when the cache is empty, so the logic may want to be changed to conditionally do a cache read or write instead of a fetch.\n\nI wasn't sure how to go about testing this however as I couldn't see any caching tests.\n. ",
    "nickhoffman": "Yeah, this is a great idea. +1\n. @ahmeij That's useful, thanks.\n\n@ahmeij, @apotonick How can we use `content_for` for only part of a cell view?\n\nFor example, one of my cell views has JavaScript that needs to be run when the document's ready. That'd be fine, except jQuery's loaded at the bottom of the page, and the cell view is rendered in the middle of the page. So when the JS in the cell view executes, `$` is undefined.\n. I've found a work-around that's similar to what @ahmeij suggested. Unfortunately, it requires the creation of a new cell state, whose name is `X_javascript`, where `X` is the name of the target state. (Is \"state\" the correct word here?)\n\n``` ruby\n# app/helpers/application_helper.rb\n\n# Renders two things:\n# 1) The specified cell.\n# 2) The corresponding cell whose name ends with \"_javascript\".\n#\n# The \"X_javascript\" cell is rendered first, and inside of \"content_for :javascript\",\n# to ensure that the JavaScript is inserted at the end of the page.\ndef render_cell_with_javascript(cell, action, options = nil, &block)\n  content_for :javascript do\n    render_cell cell, \"#{action}_javascript\", options, &block\n  end\n\n  render_cell cell, action, options, &block\nend\n```\n\n``` ruby\n# app/cells/flags_cell.rb\n\nclass FlagsCell < Cell::Rails\n  def for_curator(curator)\n    @flags = Flag.where :curator_ids => curator.id\n    render\n  end \n\n  def for_curator_javascript\n    render\n  end \nend\n```\n\n``` html\n<!-- app/cells/flags/for_curator_javascript.html.erb -->\n\n<script type=\"text/javascript\">\n  $(document).ready(function() {\n    console.log(\"JavaScript executing from app/cells/flags/for_curator_javascript.html.erb\");\n  });\n</script>\n```\n\nIt's a kludge, but it works.\n. I have to admit that I really dislike putting the JS in a separate state. The JS is dependent upon the view's content, so the two should be in the same view in my opinion.\n\nWhat do you have against `content_for`? It's incredibly useful for building pages by piecing together many smaller components.\n. I just discovered why my work-around is insufficient: it doesn't work when called from a cell view. Fark.\n\n@apotonick What will it take to get support for `content_for` in Cells?\n. Thanks for the info, Nick. Much appreciated. If you don't use `content_for`, how do you ensure that certain HTML is inserted into certain locations within the page? For example, that JavaScript is put at the end of the page?\n. Ah, I didn't know that a block can be passed to `render_cell`!\n\nYesterday, I ended up doing this, which feels dirty because the 2 cell state renders are related, yet located far apart in the view:\n\n```\n<!-- ...other ERb... -->\n\n<%= render_cell :flags, :report_a_flag %>\n\n<!-- ...other ERb... -->\n\n<% content_for :javascript do %>\n  <!-- other JavaScript -->\n\n  <%= render_cell :flags, :report_a_flag_javascript, :target => 'Catalog' %>\n<% end %>\n```\n\nHowever, now I can change it to this, and keep the 2 cell state renders together:\n\n```\n<%= render_cell :flags, :report_a_flag do |cell| %>\n  <% content_for(:javascript) { cell.report_a_flag_javascript :target => 'Catalog' } %>\n<% end %>\n```\n\nThe resulting syntax is obtuse and not particularly elegant, but I'd say it's a usable solution.\n. Yeah, this is a great idea. +1\n. @ahmeij That's useful, thanks.\n\n@ahmeij, @apotonick How can we use `content_for` for only part of a cell view?\n\nFor example, one of my cell views has JavaScript that needs to be run when the document's ready. That'd be fine, except jQuery's loaded at the bottom of the page, and the cell view is rendered in the middle of the page. So when the JS in the cell view executes, `$` is undefined.\n. I've found a work-around that's similar to what @ahmeij suggested. Unfortunately, it requires the creation of a new cell state, whose name is `X_javascript`, where `X` is the name of the target state. (Is \"state\" the correct word here?)\n\n``` ruby\n# app/helpers/application_helper.rb\n\n# Renders two things:\n# 1) The specified cell.\n# 2) The corresponding cell whose name ends with \"_javascript\".\n#\n# The \"X_javascript\" cell is rendered first, and inside of \"content_for :javascript\",\n# to ensure that the JavaScript is inserted at the end of the page.\ndef render_cell_with_javascript(cell, action, options = nil, &block)\n  content_for :javascript do\n    render_cell cell, \"#{action}_javascript\", options, &block\n  end\n\n  render_cell cell, action, options, &block\nend\n```\n\n``` ruby\n# app/cells/flags_cell.rb\n\nclass FlagsCell < Cell::Rails\n  def for_curator(curator)\n    @flags = Flag.where :curator_ids => curator.id\n    render\n  end \n\n  def for_curator_javascript\n    render\n  end \nend\n```\n\n``` html\n<!-- app/cells/flags/for_curator_javascript.html.erb -->\n\n<script type=\"text/javascript\">\n  $(document).ready(function() {\n    console.log(\"JavaScript executing from app/cells/flags/for_curator_javascript.html.erb\");\n  });\n</script>\n```\n\nIt's a kludge, but it works.\n. I have to admit that I really dislike putting the JS in a separate state. The JS is dependent upon the view's content, so the two should be in the same view in my opinion.\n\nWhat do you have against `content_for`? It's incredibly useful for building pages by piecing together many smaller components.\n. I just discovered why my work-around is insufficient: it doesn't work when called from a cell view. Fark.\n\n@apotonick What will it take to get support for `content_for` in Cells?\n. Thanks for the info, Nick. Much appreciated. If you don't use `content_for`, how do you ensure that certain HTML is inserted into certain locations within the page? For example, that JavaScript is put at the end of the page?\n. Ah, I didn't know that a block can be passed to `render_cell`!\n\nYesterday, I ended up doing this, which feels dirty because the 2 cell state renders are related, yet located far apart in the view:\n\n```\n<!-- ...other ERb... -->\n\n<%= render_cell :flags, :report_a_flag %>\n\n<!-- ...other ERb... -->\n\n<% content_for :javascript do %>\n  <!-- other JavaScript -->\n\n  <%= render_cell :flags, :report_a_flag_javascript, :target => 'Catalog' %>\n<% end %>\n```\n\nHowever, now I can change it to this, and keep the 2 cell state renders together:\n\n```\n<%= render_cell :flags, :report_a_flag do |cell| %>\n  <% content_for(:javascript) { cell.report_a_flag_javascript :target => 'Catalog' } %>\n<% end %>\n```\n\nThe resulting syntax is obtuse and not particularly elegant, but I'd say it's a usable solution.\n. ",
    "rainhead": "+1\n. This is pretty cool, but it will almost certainly be several months before we're able to play with it. I'm not sure it's exactly what we're looking for, but I can't tell you what that is because I've been out of this area for too long.\n. Right. I'm complaining that I can't use a Cell::Rails subclass from outside of a request.\n. +1\n. This is pretty cool, but it will almost certainly be several months before we're able to play with it. I'm not sure it's exactly what we're looking for, but I can't tell you what that is because I've been out of this area for too long.\n. Right. I'm complaining that I can't use a Cell::Rails subclass from outside of a request.\n. ",
    "neiled": "Yeah, great thanks.\nI'd actually put a link directly to the git repository in my Gemfile and bundler complained that the gemspec didn't match the source when I did a bundle update.\n\nLove the cells by the way, thanks!\n. Sorry Nick, don't know how I missed the message but you've still got:\n\"Gemfile.lock\", \"test/dummy/tmp\"\nin the Gemspec.\nOpened as #18\n. Yep, sorry took so long but all looks great now. Thanks!\n. Yeah, great thanks.\nI'd actually put a link directly to the git repository in my Gemfile and bundler complained that the gemspec didn't match the source when I did a bundle update.\n\nLove the cells by the way, thanks!\n. Sorry Nick, don't know how I missed the message but you've still got:\n\"Gemfile.lock\", \"test/dummy/tmp\"\nin the Gemspec.\nOpened as #18\n. Yep, sorry took so long but all looks great now. Thanks!\n. ",
    "lcowell": "Hi, I'm trying to get autotest to automatically run tests against the cell files. I can write tests and run them manually using rake test:cells - however, autotest doesn't appear to know about the cell controllers, views or tests.\n\nI'm running cells 3.3.5 w/ rails 2.3.x.\n\nThanks!\n. Hi there, I can't believe it! A widely used project not hosted on github! Haha.\n\nThis is the official zentest repo:\nhttp://rubyforge.org/projects/zentest/\n. Yeah, I'm pretty sure it's official. I think part of the problem is that everything on rubyforge looks out of date. The version on rubyforge matches the version of the gem I have on my computer and it was released on rubyforge Sep 1, 2010. Hope that helps.\n\nI tried doing this myself, but wasn't able to get things working. Anyways, thanks for looking in to this for me.\n. Thanks man!\n\nHere's what I put in the discover.rb file. It provides the reverse mapping to trigger autotest if the test file is edited instead of the cell definition (this might be useful to others).\n\n<pre>\nAutotest.add_hook :initialize do |at|\n  at.add_mapping %r%^app/cells/(.*)\\.rb$% do |_, m|\n    \"test/cells/#{m[1]}_test.rb\"\n  end\n  \n  at.add_mapping %r%^test/cells/(.*)_test\\.rb$% do |_, m|\n    \"app/cells/#{m[1]}.rb\"\n  end\nend\n</pre>\n\n\nEverything works perfectly, but if you trigger the tests based on modifying the test file, you'll get this error:\n./app/cells/treatment_cell.rb:4: uninitialized constant Cell (NameError)\n\nI tried requiring cell like this:\nrequire 'cell'\n\nHowever, I then get this error:\nuninitialized constant Cell::ActiveSupport\n\nAny ideas ?\n\nThanks again for your help with all this.\n. I had a typo in my mapping definition which is what was throwing all the errors. Here's the updated definition:\n\n<pre>\nAutotest.add_hook :initialize do |at|\n  at.add_mapping %r%^app/cells/(.*)\\.rb$% do |_, m|\n    \"test/cells/#{m[1]}_test.rb\"\n  end\n  \n  at.add_mapping %r%^test/cells/(.*)_test\\.rb$% do |filename, _|\n    filename\n  end\nend\n</pre>\n. The config goes in Rails.root + \"autotest/discover.rb\". I've added some info to the wiki.\n\nI haven't had a chance to test it yet, but I think the second group might need to be:\n\n<pre>\n  at.add_mapping %r%^(test/cells/.*_test\\.rb)$% do |filename, _|\n    filename\n  end\n</pre>\n\n\nI think putting the information in its own page or in the readme is probably good for now. Are you thinking about making a gem that creates an autotest style called cells-rails or something like that ?\n. Hi, I'm trying to get autotest to automatically run tests against the cell files. I can write tests and run them manually using rake test:cells - however, autotest doesn't appear to know about the cell controllers, views or tests.\n\nI'm running cells 3.3.5 w/ rails 2.3.x.\n\nThanks!\n. Hi there, I can't believe it! A widely used project not hosted on github! Haha.\n\nThis is the official zentest repo:\nhttp://rubyforge.org/projects/zentest/\n. Yeah, I'm pretty sure it's official. I think part of the problem is that everything on rubyforge looks out of date. The version on rubyforge matches the version of the gem I have on my computer and it was released on rubyforge Sep 1, 2010. Hope that helps.\n\nI tried doing this myself, but wasn't able to get things working. Anyways, thanks for looking in to this for me.\n. Thanks man!\n\nHere's what I put in the discover.rb file. It provides the reverse mapping to trigger autotest if the test file is edited instead of the cell definition (this might be useful to others).\n\n<pre>\nAutotest.add_hook :initialize do |at|\n  at.add_mapping %r%^app/cells/(.*)\\.rb$% do |_, m|\n    \"test/cells/#{m[1]}_test.rb\"\n  end\n  \n  at.add_mapping %r%^test/cells/(.*)_test\\.rb$% do |_, m|\n    \"app/cells/#{m[1]}.rb\"\n  end\nend\n</pre>\n\n\nEverything works perfectly, but if you trigger the tests based on modifying the test file, you'll get this error:\n./app/cells/treatment_cell.rb:4: uninitialized constant Cell (NameError)\n\nI tried requiring cell like this:\nrequire 'cell'\n\nHowever, I then get this error:\nuninitialized constant Cell::ActiveSupport\n\nAny ideas ?\n\nThanks again for your help with all this.\n. I had a typo in my mapping definition which is what was throwing all the errors. Here's the updated definition:\n\n<pre>\nAutotest.add_hook :initialize do |at|\n  at.add_mapping %r%^app/cells/(.*)\\.rb$% do |_, m|\n    \"test/cells/#{m[1]}_test.rb\"\n  end\n  \n  at.add_mapping %r%^test/cells/(.*)_test\\.rb$% do |filename, _|\n    filename\n  end\nend\n</pre>\n. The config goes in Rails.root + \"autotest/discover.rb\". I've added some info to the wiki.\n\nI haven't had a chance to test it yet, but I think the second group might need to be:\n\n<pre>\n  at.add_mapping %r%^(test/cells/.*_test\\.rb)$% do |filename, _|\n    filename\n  end\n</pre>\n\n\nI think putting the information in its own page or in the readme is probably good for now. Are you thinking about making a gem that creates an autotest style called cells-rails or something like that ?\n. ",
    "ChristianPeters": "At it turns out, this is no cells issue. Got the same problem with other generators. Strange.\n. At it turns out, this is no cells issue. Got the same problem with other generators. Strange.\n. ",
    "sobstel": "All comments seem to disappear silently.\n\nI wanted to do redirect to different view when user is not authenticated (eg. to display him \"Log in to comment\" instead of comment form). Now Im doing following\n\n```\ndef new\n  return render :view => \"new/noaccess\" unless user_signed_in?\n  render\nend\n```\n\nIm not a big fan of filters, but as it works this way in controllers, I expected similar in Cells.\n. I am not really familiar with view inheritance in cells, so it would be great to read some more about it, especially how it could solve problems like pre-authorization.\n\nBtw, another way I couldn't really find is how to handle forms to work smoothly with restful routing, eg. processing comment form embedded somewhere inside post site.\n. Thanks for your help. Probably best way for stuff like this would be to use Apotomo. \n\nFor now I've created specialized controller's action with special POST route to it. So now controller decides about showing full site (on error) or redirecting (on success).\n\nSomething like this:\n\n```\ndef specialized_action\n  find_item\n  comment = params[:comment]\n  @comment = @item.comments.new\n  @comment.comment = comment[:comment]\n  @comment.user = current_user\n  if @comment.save\n    redirect_to item_path(@item, :anchor => \"comment-#{@comment.id}\") and return\n  end    \n  render \"items/show\"\nend\n```\n\nBut still it's clumsy. I'll try Apotomo and get back to you if it doesn't work ok for me somehow.\n. +1\n\n(maybe it's better to remove link from github for now as sadly it makes this great project look abandoned)\n. All comments seem to disappear silently.\n\nI wanted to do redirect to different view when user is not authenticated (eg. to display him \"Log in to comment\" instead of comment form). Now Im doing following\n\n```\ndef new\n  return render :view => \"new/noaccess\" unless user_signed_in?\n  render\nend\n```\n\nIm not a big fan of filters, but as it works this way in controllers, I expected similar in Cells.\n. I am not really familiar with view inheritance in cells, so it would be great to read some more about it, especially how it could solve problems like pre-authorization.\n\nBtw, another way I couldn't really find is how to handle forms to work smoothly with restful routing, eg. processing comment form embedded somewhere inside post site.\n. Thanks for your help. Probably best way for stuff like this would be to use Apotomo. \n\nFor now I've created specialized controller's action with special POST route to it. So now controller decides about showing full site (on error) or redirecting (on success).\n\nSomething like this:\n\n```\ndef specialized_action\n  find_item\n  comment = params[:comment]\n  @comment = @item.comments.new\n  @comment.comment = comment[:comment]\n  @comment.user = current_user\n  if @comment.save\n    redirect_to item_path(@item, :anchor => \"comment-#{@comment.id}\") and return\n  end    \n  render \"items/show\"\nend\n```\n\nBut still it's clumsy. I'll try Apotomo and get back to you if it doesn't work ok for me somehow.\n. +1\n\n(maybe it's better to remove link from github for now as sadly it makes this great project look abandoned)\n. ",
    "mixr": "i have the same problems in a rails 3 app and just use signed_in?(:user) for the moment.\n\nwhen i tried to reproduce the problem in a blank rails 3 app, everything worked fine just by including \"include Devise::Controllers::Helpers\" in the Cell.\n\ni have no idea right now which part of my app-setup is responsible for this.\n. hey,\n\ndid you try with a fresh rails 3 app? it's working without any extras, just include\n    include Devise::Controllers::Helpers\nyou can try the example app here: https://github.com/mixr/cells_devise\n. i have the same problems in a rails 3 app and just use signed_in?(:user) for the moment.\n\nwhen i tried to reproduce the problem in a blank rails 3 app, everything worked fine just by including \"include Devise::Controllers::Helpers\" in the Cell.\n\ni have no idea right now which part of my app-setup is responsible for this.\n. hey,\n\ndid you try with a fresh rails 3 app? it's working without any extras, just include\n    include Devise::Controllers::Helpers\nyou can try the example app here: https://github.com/mixr/cells_devise\n. ",
    "bhavinkamani": "Thanks for your inputs. While signed_in?(:user) seems to be working fine. I am getting stuck with resource_name while inserting login form inside cell view. I have included Devise::Controllers::Helpers in the cell. I am trying to keep the view code as close to devise generated view code as possible. Hence I am not directly using user model.\n\nDid you happen to face that problem?\n. Apart from \"include Devise::Controllers::Helpers\", inserting Devise::Controllers::Helpers.define_helpers(User) helps me access rest of the devise helper methods. Not sure if this is the best way or the cleaner way to access devise helper methods.\n. Thanks it works great... looks much cleaner too..\n. Hi,\n\nYep I tried and yes it indeed works without any additional line... Its kind of strange because now when I run my app after removing \"helper_method :current_user\" its recognizing user_signed_in? method. I have still not figured out why it was giving me error earlier. But good news is that it now works with one line code and thats 50% improvement over 2 lines :-) Thanks a ton.\n. Thanks for your inputs. While signed_in?(:user) seems to be working fine. I am getting stuck with resource_name while inserting login form inside cell view. I have included Devise::Controllers::Helpers in the cell. I am trying to keep the view code as close to devise generated view code as possible. Hence I am not directly using user model.\n\nDid you happen to face that problem?\n. Apart from \"include Devise::Controllers::Helpers\", inserting Devise::Controllers::Helpers.define_helpers(User) helps me access rest of the devise helper methods. Not sure if this is the best way or the cleaner way to access devise helper methods.\n. Thanks it works great... looks much cleaner too..\n. Hi,\n\nYep I tried and yes it indeed works without any additional line... Its kind of strange because now when I run my app after removing \"helper_method :current_user\" its recognizing user_signed_in? method. I have still not figured out why it was giving me error earlier. But good news is that it now works with one line code and thats 50% improvement over 2 lines :-) Thanks a ton.\n. ",
    "fsmanuel": "thax!\nclass TransactionWidget < Apotomo::Widget\n  include Devise::Controllers::Helpers\n\n  helper_method :current_user\n\n did the trick!\n. thax!\nclass TransactionWidget < Apotomo::Widget\n  include Devise::Controllers::Helpers\n\n  helper_method :current_user\n\n did the trick!\n. ",
    "johanbaaij": "Hi, i'm trying the following:\n\n_app/cells/main_menu_cell.rb_\n\n```\nclass MainMenuCell < Cell::Rails\n    include Devise::Controllers::Helpers\n    helper_method :current_user\n\n    def display\n        render\n    end\nend\n```\n\n_display.html.haml_\n\n```\n- if user_signed_in?\n    %li\n        = link_to 'Logout', destroy_user_session_path, :method=>'delete'\n- else\n    %li\n        = link_to 'Login', new_user_session_path\n```\n\nBut i'm getting a undefined method `user_signed_in?'\n\nWhat could I be doing wrong?\nCheers!\n\nEdit:\n\nduh. I get it :). Had to use\nhelper_method :user_signed_in?\n. Hi, i'm trying the following:\n\n_app/cells/main_menu_cell.rb_\n\n```\nclass MainMenuCell < Cell::Rails\n    include Devise::Controllers::Helpers\n    helper_method :current_user\n\n    def display\n        render\n    end\nend\n```\n\n_display.html.haml_\n\n```\n- if user_signed_in?\n    %li\n        = link_to 'Logout', destroy_user_session_path, :method=>'delete'\n- else\n    %li\n        = link_to 'Login', new_user_session_path\n```\n\nBut i'm getting a undefined method `user_signed_in?'\n\nWhat could I be doing wrong?\nCheers!\n\nEdit:\n\nduh. I get it :). Had to use\nhelper_method :user_signed_in?\n. ",
    "ghost": "ok no worries; using cells to create graph type widgets; and simetimes I need to send js to the header; \n. I would leave this out, because again you are meddling with dragons. Cells are designed to have an extremely limited knowledge of the app, which is what it should be.\n\nIf you need a *_url then you can pass it into the cell, much like you have to do with mailers. Or, include the module yourself, but then you are breaking the concept of a cell.\n. Sure! It does the trick, even though it goes the other way round. I know is more correct thinking in the concept of encapsulation, but what I wanted to avoid was having a lot of references to the cell in my main app. Anyway, as I told you, it works and its a good solution.\n\nThanks for your help and quick response!\n. Hi!\n\nI already know that Cells 4 don't use Rails anymore, but I was still hoping that you kept the good things of the framework... Not all of them are that awful, aren't they? :sweat_smile:\n\nThe possibility of using Cells more like the Rails way would be awesome, but I understand that you're focused on abstracting the gem more and more from the framework... Anyway, I'm sure I'm not the only one begging for a \"cells-rails\" gem!\n\nThank you anyway! I'll keep prying for it! :sweat_smile: :sweat_smile: :sweat_smile:\n. Hi!\n\nThe truth is that I'm using Cells in a way that I'm afraid you're not going to like at all. Instead of passing the object or collection to the cell as an argument, I'm retrieving them inside of the cell ifself. I saw in the examples that I should do it the other way round, but I prefer to have this part isolated in the cell rather than having it in all the controllers implicated.\n\nThe problem comes when, following this logic, I need to use CanCan inside the cell. Its \"load_and_authorize_resource\" method, expecting to be in a controller (where this function is available),  calls internally \"before_filter\" in order to verify if you have permission to see the resource of not.\nI presume that this precise case could be resolved by delegating the method execution to the controller, but I wasn't able to make it work when I tried.\n\nAnyway, with CanCan or not, retrieving model data inside the cell is what's causing the need of using filters in certain cases. Since I'm using Cells in a way different than they were meant to, maybe I should use another gem or whatever. If you have any thoughts, I'm all ears. :relieved:\n. Wow, I was afraid of telling you so. I thought I was using your gem in a twisted way, haha. :sweat_smile:\n\nWell, as I told you, the main problem was when I tried to use CanCan inside the cell, as it calls \"before_filter\" internally. In addition, I suppose I'd need to use filters too if I'd have a cell with more than just the \"show\" method, maybe 1 or 2 more methods needing the same object data.\n. @apotonick \nNice. problem was be resolved. thank for support.\n. ok no worries; using cells to create graph type widgets; and simetimes I need to send js to the header; \n. I would leave this out, because again you are meddling with dragons. Cells are designed to have an extremely limited knowledge of the app, which is what it should be.\n\nIf you need a *_url then you can pass it into the cell, much like you have to do with mailers. Or, include the module yourself, but then you are breaking the concept of a cell.\n. Sure! It does the trick, even though it goes the other way round. I know is more correct thinking in the concept of encapsulation, but what I wanted to avoid was having a lot of references to the cell in my main app. Anyway, as I told you, it works and its a good solution.\n\nThanks for your help and quick response!\n. Hi!\n\nI already know that Cells 4 don't use Rails anymore, but I was still hoping that you kept the good things of the framework... Not all of them are that awful, aren't they? :sweat_smile:\n\nThe possibility of using Cells more like the Rails way would be awesome, but I understand that you're focused on abstracting the gem more and more from the framework... Anyway, I'm sure I'm not the only one begging for a \"cells-rails\" gem!\n\nThank you anyway! I'll keep prying for it! :sweat_smile: :sweat_smile: :sweat_smile:\n. Hi!\n\nThe truth is that I'm using Cells in a way that I'm afraid you're not going to like at all. Instead of passing the object or collection to the cell as an argument, I'm retrieving them inside of the cell ifself. I saw in the examples that I should do it the other way round, but I prefer to have this part isolated in the cell rather than having it in all the controllers implicated.\n\nThe problem comes when, following this logic, I need to use CanCan inside the cell. Its \"load_and_authorize_resource\" method, expecting to be in a controller (where this function is available),  calls internally \"before_filter\" in order to verify if you have permission to see the resource of not.\nI presume that this precise case could be resolved by delegating the method execution to the controller, but I wasn't able to make it work when I tried.\n\nAnyway, with CanCan or not, retrieving model data inside the cell is what's causing the need of using filters in certain cases. Since I'm using Cells in a way different than they were meant to, maybe I should use another gem or whatever. If you have any thoughts, I'm all ears. :relieved:\n. Wow, I was afraid of telling you so. I thought I was using your gem in a twisted way, haha. :sweat_smile:\n\nWell, as I told you, the main problem was when I tried to use CanCan inside the cell, as it calls \"before_filter\" internally. In addition, I suppose I'd need to use filters too if I'd have a cell with more than just the \"show\" method, maybe 1 or 2 more methods needing the same object data.\n. @apotonick \nNice. problem was be resolved. thank for support.\n. ",
    "ahmeij": "If you want all content to be rendered with content_for like I needed, the following piece of code in the application_helper.rb will enable the functionality:\n\n```\ndef render_cell_for(id, cell, action, options = nil, &block)\n  content_for id do\n    render_cell(cell, action, options, &block)\n  end\nend\n```\n\nUse\n    <%=render_cell_for(:content_for, :cell, :action) %>\n\nin your views to render within a content for block.\n. If you want all content to be rendered with content_for like I needed, the following piece of code in the application_helper.rb will enable the functionality:\n\n```\ndef render_cell_for(id, cell, action, options = nil, &block)\n  content_for id do\n    render_cell(cell, action, options, &block)\n  end\nend\n```\n\nUse\n    <%=render_cell_for(:content_for, :cell, :action) %>\n\nin your views to render within a content for block.\n. ",
    "adamgotterer": "Was wondering if there were any new thoughts on this thread? I understand the encapsulation concern. I'm actually doing something similar to the OP. I have 10 - 15 charts that get rendered on a page and being able to pass the JS to a Javascript block in the layout would be really helpful.\n. Was wondering if there were any new thoughts on this thread? I understand the encapsulation concern. I'm actually doing something similar to the OP. I have 10 - 15 charts that get rendered on a page and being able to pass the JS to a Javascript block in the layout would be really helpful.\n. ",
    "Aaron2Ti": "I see, will try it\nthanks\n. I see, will try it\nthanks\n. ",
    "aspiers": "Sorry, I can't remember if we ever got to the bottom of the problem or not :-/\n. Sorry, I can't remember if we ever got to the bottom of the problem or not :-/\n. ",
    "guilhermesilveira": "its missing one test case. sorry. will send the pull request again.\n. its missing one test case. sorry. will send the pull request again.\n. ",
    "yagooar": "First of all, @apotonick , I want to say thank you for this magnific tool, it's just a little big revolution to my personal way of developing in Rails. I've just started a new project, using cells so I can find my way through it and plan the code structure from beginning.\n\nNow, lets get to @giates question.\n\nFirst of all, as I started using cells, I wanted to do everything the \"old school\" style: flash messages, global helpers, some logic in views... Then I realized that what I need is to do stuff different so it fits this new approach.\n\nAbout flash messages. In my project I use the Decorator patttern by using the draper(https://github.com/jcasimir/draper) gem. It helps to assign \"helper\" methods in a more OOP way. So I did with the flash messages, which now rely on a concrete class.\n\n# app/controllers/foos_controller.rb\n\n```\ndef create\n  @foo = Foo.new(params[:foo])\n\n  begin\n    @foo.save!\n    flash[:notice] = \"Created successfully!\"\n    redirect_to :controller => \"foos\", :action => \"index\"\n  rescue Mongoid::Errors::Validations\n    render :new\n  end\nend\n```\n- notice there is no flash[:error] used here, we'll come to it later!\n\n# app/cells/foo_cell.rb\n\n```\ndef flash_messages(foo)\n  @foo = FooDecorator.decorate(foo)\n  render\nend\n```\n\n# app/decorators/application_decorator.rb\n\n```\nclass ApplicationDecorator < Draper::Base\n\n  def errors\n    model && model.errors || {}\n  end\n\n  def notice\n    h.flash[:notice] if h.flash\n  end\n```\n- notice that I am using the `ActiveModel` \"errors\" method to show the errors.\n\nSo this way, I just render a cell above my pages so they can show the flash messages:\n\n```\n <%= render_cell :foo, :flash_messages, @foo %>\n```\n\nMaybe it is not the best approach, but it works for me very nicely. Actually, as I am writing this lines, I realize that an `application_cell.rb` would be a nice place to put the `flash_messages` cell so it can be reused in the whole application :)\n. I'm glad to here you like it :)\n\nThe idea about screencasting is great! I think it could boost the popularity of the gem and make the voice spread.\n\nBTW: I voted you at Ryan Bates site, I hope you get a screencast :)\n. Yes, of course. I'm not an expert at building gems, but I think the best approach would be making `cells-rescue` a \"wrapper\" gem which depends on the cells core so if a new version comes out, the `cells-rescue` stays synced.\n\nSo I am excited about building this cells-rescue gem, as long as I have some more ideas I would like to implement :)\nI am sure too that I'll need your help, so which would be the best channel to talk about it?\n. It's been a long time, heh. I still think the idea is nice, but I don't think there is a need for a new gem. \n\nI think the concept of escaping errors depending on the environment could be implemented in two different ways: by documenting it in something like a Developer Guide or by adding a hook / plugin approach to the Cells core. \n\nThe second solution would allow the user to define code to be run when a specific action occurs, like rendering the cell, or getting an error. The problem is that this way requires changes to the Cells core, thus may not be desired.\n\nLet me know what you think about it ;)\n. @EnotPoloskun I strongly recommend you to check out this issue #32 in order to see a different approach on the flash in cells problem. I think it is a good thing to have cells as much isolated from the Rails view stack as possible, in order to ensure they are not becoming just a fancy way of writing your views.\n. Well that's cool! Can't wait as I'm working on a new project now and need some of the nice features of Cells in Rails 4 ;)\n. ```\n`require': cannot load such file -- cell/rails4_0_strategy (LoadError)\n```\n\nThe file is missing in the head.\n. Works like a charm!\n. I'm actually on Ruby 2.0.0-rc1 too, so double win :metal: \n. First of all, @apotonick , I want to say thank you for this magnific tool, it's just a little big revolution to my personal way of developing in Rails. I've just started a new project, using cells so I can find my way through it and plan the code structure from beginning.\n\nNow, lets get to @giates question.\n\nFirst of all, as I started using cells, I wanted to do everything the \"old school\" style: flash messages, global helpers, some logic in views... Then I realized that what I need is to do stuff different so it fits this new approach.\n\nAbout flash messages. In my project I use the Decorator patttern by using the draper(https://github.com/jcasimir/draper) gem. It helps to assign \"helper\" methods in a more OOP way. So I did with the flash messages, which now rely on a concrete class.\n\n# app/controllers/foos_controller.rb\n\n```\ndef create\n  @foo = Foo.new(params[:foo])\n\n  begin\n    @foo.save!\n    flash[:notice] = \"Created successfully!\"\n    redirect_to :controller => \"foos\", :action => \"index\"\n  rescue Mongoid::Errors::Validations\n    render :new\n  end\nend\n```\n- notice there is no flash[:error] used here, we'll come to it later!\n\n# app/cells/foo_cell.rb\n\n```\ndef flash_messages(foo)\n  @foo = FooDecorator.decorate(foo)\n  render\nend\n```\n\n# app/decorators/application_decorator.rb\n\n```\nclass ApplicationDecorator < Draper::Base\n\n  def errors\n    model && model.errors || {}\n  end\n\n  def notice\n    h.flash[:notice] if h.flash\n  end\n```\n- notice that I am using the `ActiveModel` \"errors\" method to show the errors.\n\nSo this way, I just render a cell above my pages so they can show the flash messages:\n\n```\n <%= render_cell :foo, :flash_messages, @foo %>\n```\n\nMaybe it is not the best approach, but it works for me very nicely. Actually, as I am writing this lines, I realize that an `application_cell.rb` would be a nice place to put the `flash_messages` cell so it can be reused in the whole application :)\n. I'm glad to here you like it :)\n\nThe idea about screencasting is great! I think it could boost the popularity of the gem and make the voice spread.\n\nBTW: I voted you at Ryan Bates site, I hope you get a screencast :)\n. Yes, of course. I'm not an expert at building gems, but I think the best approach would be making `cells-rescue` a \"wrapper\" gem which depends on the cells core so if a new version comes out, the `cells-rescue` stays synced.\n\nSo I am excited about building this cells-rescue gem, as long as I have some more ideas I would like to implement :)\nI am sure too that I'll need your help, so which would be the best channel to talk about it?\n. It's been a long time, heh. I still think the idea is nice, but I don't think there is a need for a new gem. \n\nI think the concept of escaping errors depending on the environment could be implemented in two different ways: by documenting it in something like a Developer Guide or by adding a hook / plugin approach to the Cells core. \n\nThe second solution would allow the user to define code to be run when a specific action occurs, like rendering the cell, or getting an error. The problem is that this way requires changes to the Cells core, thus may not be desired.\n\nLet me know what you think about it ;)\n. @EnotPoloskun I strongly recommend you to check out this issue #32 in order to see a different approach on the flash in cells problem. I think it is a good thing to have cells as much isolated from the Rails view stack as possible, in order to ensure they are not becoming just a fancy way of writing your views.\n. Well that's cool! Can't wait as I'm working on a new project now and need some of the nice features of Cells in Rails 4 ;)\n. ```\n`require': cannot load such file -- cell/rails4_0_strategy (LoadError)\n```\n\nThe file is missing in the head.\n. Works like a charm!\n. I'm actually on Ruby 2.0.0-rc1 too, so double win :metal: \n. ",
    "andyjeffries": "Brilliant, thanks apotonick - that works perfect from my Engine now.  I've corrected the Wiki page too.\n. Sure, can you tell me where the list is? :-)\n. Ignore that, done...\n. +1 I just came along to do the same thing...\n. Brilliant, thanks apotonick - that works perfect from my Engine now.  I've corrected the Wiki page too.\n. Sure, can you tell me where the list is? :-)\n. Ignore that, done...\n. +1 I just came along to do the same thing...\n. ",
    "salmont": "Hi Nick,\nthank you for the reply.\n\nYes, I'm using Passenger 3.0.2, but I don't know if it is causing the problem.\nI'm not expert of rails internals, but anyway, by looking for some hints, I noticed that when url_for from RouteSet is called from cell views the :script_name option is not passed.\n\nSo I found a snippet I modified in this code that seems to solve the issue:\n\n```\n# initializers/fix_relative_root_cells.rb\nfail unless ActionDispatch::Routing::RouteSet\nmodule ActionDispatch\n    module Routing\n        class RouteSet\n            alias url_for__ptsroot__ url_for\n            def url_for(options = {})\n                options[:script_name] = ENV['RAILS_RELATIVE_URL_ROOT'] if options.kind_of?(Hash)\n                options = Base.relative_url_root.to_s + options if\n                options.kind_of?(String) and options.starts_with?('/')\n                url_for__ptsroot__(options)\n            end\n        end\n    end\nend\n```\n. Hi Nick,\nthank you for the reply.\n\nYes, I'm using Passenger 3.0.2, but I don't know if it is causing the problem.\nI'm not expert of rails internals, but anyway, by looking for some hints, I noticed that when url_for from RouteSet is called from cell views the :script_name option is not passed.\n\nSo I found a snippet I modified in this code that seems to solve the issue:\n\n```\n# initializers/fix_relative_root_cells.rb\nfail unless ActionDispatch::Routing::RouteSet\nmodule ActionDispatch\n    module Routing\n        class RouteSet\n            alias url_for__ptsroot__ url_for\n            def url_for(options = {})\n                options[:script_name] = ENV['RAILS_RELATIVE_URL_ROOT'] if options.kind_of?(Hash)\n                options = Base.relative_url_root.to_s + options if\n                options.kind_of?(String) and options.starts_with?('/')\n                url_for__ptsroot__(options)\n            end\n        end\n    end\nend\n```\n. ",
    "mjtko": "Hi,\n\nI'm seeing a similar issue with Rails 3.1 under thin. My app is mounted under a prefix and while the path helpers are working as expected within standard views, the prefix is not being prepended when using the same helpers within a cell view.\n\nI'll have a dig around and see if I can locate where/why the behaviour is different.\n. Ok, it seems that, within rails 3.1 at least, this was caused by the inclusion of AbstractController::UrlFor rather than ActionController::UrlFor within the strategy file.\n\nI've submitted a pull request in ticket #52 which alleviates fixes this in for Rails 3.1.\n. Related to this: my attempts to get cells working with rails 3.1 (and engines) initially failed until I commented out the line in the cells railtie that deals with initialization after `set_routes_reloader`.\n\nI've submitted this change (removal of the specific `:after` option) as a pull request in #53 - my testing indicates that it makes no difference to route helper usage within cell views but does make significant difference to being able to use cells within a project that incorporates engines (and specifically engines that need their routes to be loaded after their initializers have run).\n. Sorry, I totally failed to see that!\n\nAfter reading through #45 I understand your concerns.  I'll close this pull request, but I have an alternative (that is actually properly topic branched this time) that you might like...\n\nCheers,\n\nMark.\n. Hi,\n\nI'm seeing a similar issue with Rails 3.1 under thin. My app is mounted under a prefix and while the path helpers are working as expected within standard views, the prefix is not being prepended when using the same helpers within a cell view.\n\nI'll have a dig around and see if I can locate where/why the behaviour is different.\n. Ok, it seems that, within rails 3.1 at least, this was caused by the inclusion of AbstractController::UrlFor rather than ActionController::UrlFor within the strategy file.\n\nI've submitted a pull request in ticket #52 which alleviates fixes this in for Rails 3.1.\n. Related to this: my attempts to get cells working with rails 3.1 (and engines) initially failed until I commented out the line in the cells railtie that deals with initialization after `set_routes_reloader`.\n\nI've submitted this change (removal of the specific `:after` option) as a pull request in #53 - my testing indicates that it makes no difference to route helper usage within cell views but does make significant difference to being able to use cells within a project that incorporates engines (and specifically engines that need their routes to be loaded after their initializers have run).\n. Sorry, I totally failed to see that!\n\nAfter reading through #45 I understand your concerns.  I'll close this pull request, but I have an alternative (that is actually properly topic branched this time) that you might like...\n\nCheers,\n\nMark.\n. ",
    "pboling": "Just tried it in beta2, and it worked for haml generation.  Thanks!\n. @apotonick: If this is legit, then +1.  NAMESPACE ALL THE THINGS!!!\n. +1  We have a similar setup, and have all our cells inherit from a customized base class.  Not a few errors have stemmed from forgetting to switch the default base class to our custom one.  I approve of \"set it and forget it\"!\n. I am very interested in this as well.  We are stuck on cells 3.7.x because we need the ActionController ancestor for magic things we do in our custom cell base class.  If we could still have the full fledged ActionController based cells in the latest version of cells I would increase my donations to charity. ;)\n\n@apotonick: Maybe this is already currently possible?\n. Just tried it in beta2, and it worked for haml generation.  Thanks!\n. @apotonick: If this is legit, then +1.  NAMESPACE ALL THE THINGS!!!\n. +1  We have a similar setup, and have all our cells inherit from a customized base class.  Not a few errors have stemmed from forgetting to switch the default base class to our custom one.  I approve of \"set it and forget it\"!\n. I am very interested in this as well.  We are stuck on cells 3.7.x because we need the ActionController ancestor for magic things we do in our custom cell base class.  If we could still have the full fledged ActionController based cells in the latest version of cells I would increase my donations to charity. ;)\n\n@apotonick: Maybe this is already currently possible?\n. ",
    "luislavena": "Ha, I mostly don't fork when is a one liner, if not, I would have 300 projects instead of all the ones that I currently maintain.\n\nWill send you a patch if that works.\n. Thank you, this closed the issue but the new `active_helper` dependency introduced a double warning:\n\n```\nDEPRECATION WARNING: ActiveSupport::Dependencies.load_paths is deprecated, please use autoload_paths instead. (called from /Users/luis/.rvm/gems/ruby-1.8.7-p334/gems/active_helper-0.2.2/lib/active_helper/rails.rb:32)\nDEPRECATION WARNING: ActiveSupport::Dependencies.load_paths is deprecated, please use autoload_paths instead. (called from /Users/luis/.rvm/gems/ruby-1.8.7-p334/gems/active_helper-0.2.2/lib/active_helper/rails.rb:32)\n```\n\nReported as Issue 2 there:\nhttps://github.com/apotonick/active_helper/issues/2\n. Cells 3.3.6 dependencies:\nhttp://rubygems.org/gems/cells/versions/3.3.6\n\n```\nactive_helper >= 0\nrails ~> 2.3\nshoulda >= 0\n```\n\n3.3.5 does not have those as dependencies:\n\nhttp://rubygems.org/gems/cells/versions/3.3.5\n\nAlso I believe shoulda should be listed as development dependency and not runtime.\n. https://gist.github.com/1081553\n\nI see a problem there, cells 3.3.7 depends on cells >= 0?\n\nHow are you generating the gemspec? I just checked rails-2.3 branch:\n\nAnd neither cells.gemspec or Rakefile:\n\nhttps://github.com/apotonick/cells/blob/rails-2.3/cells.gemspec\nhttps://github.com/apotonick/cells/blob/rails-2.3/Rakefile\n\nShows the dependencies there.\n. Well, I just cloned the repository, checkout rails-2.3 branch, installed jeweler, run `rake gemspec` and checked the generated gemspec, to my surprise:\n\n``` ruby\n\n  if s.respond_to? :specification_version then\n    s.specification_version = 3\n\n    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then\n      s.add_runtime_dependency(%q<cells>, [\">= 0\"])\n      s.add_development_dependency(%q<shoulda>, [\">= 0\"])\n      s.add_development_dependency(%q<active_helper>, [\">= 0\"])\n    else\n      s.add_dependency(%q<cells>, [\">= 0\"])\n      s.add_dependency(%q<shoulda>, [\">= 0\"])\n      s.add_dependency(%q<active_helper>, [\">= 0\"])\n    end\n  else\n    s.add_dependency(%q<cells>, [\">= 0\"])\n    s.add_dependency(%q<shoulda>, [\">= 0\"])\n    s.add_dependency(%q<active_helper>, [\">= 0\"])\n  end\n```\n\nThat is what got pushed to rubygems.org, can you confirm that you see the same? cells >= 0 been listed as dependency. If you don't see it, I'm crazy.\n. If `build` task is provided by Jeweler gem, then it ran Jeweler and borked the gemspec.\n\nI just run `rake build` on a pristine checkout and after closer inspection of the YAML metadata inside the generated gem seems that is modifying your dependencies.\n\nHowever, doing a simple `gem build cells.gemspec` does generate a gem in the same directory that do not contain borked set of dependencies:\n\n``` yaml\n---\n- !ruby/object:Gem::Dependency\n  name: rails\n  prerelease: false\n  requirement: &id001 !ruby/object:Gem::Requirement\n    none: false\n    requirements:\n    - - ~>\n      - !ruby/object:Gem::Version\n        hash: 5\n        segments:\n        - 2\n        - 3\n        version: \"2.3\"\n  type: :runtime\n  version_requirements: *id001\n- !ruby/object:Gem::Dependency\n  name: shoulda\n  prerelease: false\n  requirement: &id002 !ruby/object:Gem::Requirement\n    none: false\n    requirements:\n    - - \">=\"\n      - !ruby/object:Gem::Version\n        hash: 3\n        segments:\n        - 0\n        version: \"0\"\n  type: :development\n  version_requirements: *id002\n- !ruby/object:Gem::Dependency\n  name: active_helper\n  prerelease: false\n  requirement: &id003 !ruby/object:Gem::Requirement\n    none: false\n    requirements:\n    - - \">=\"\n      - !ruby/object:Gem::Version\n        hash: 3\n        segments:\n        - 0\n        version: \"0\"\n  type: :development\n  version_requirements: *id003\n```\n. @apotonick indeed, thank you!\n. Ha, I mostly don't fork when is a one liner, if not, I would have 300 projects instead of all the ones that I currently maintain.\n\nWill send you a patch if that works.\n. Thank you, this closed the issue but the new `active_helper` dependency introduced a double warning:\n\n```\nDEPRECATION WARNING: ActiveSupport::Dependencies.load_paths is deprecated, please use autoload_paths instead. (called from /Users/luis/.rvm/gems/ruby-1.8.7-p334/gems/active_helper-0.2.2/lib/active_helper/rails.rb:32)\nDEPRECATION WARNING: ActiveSupport::Dependencies.load_paths is deprecated, please use autoload_paths instead. (called from /Users/luis/.rvm/gems/ruby-1.8.7-p334/gems/active_helper-0.2.2/lib/active_helper/rails.rb:32)\n```\n\nReported as Issue 2 there:\nhttps://github.com/apotonick/active_helper/issues/2\n. Cells 3.3.6 dependencies:\nhttp://rubygems.org/gems/cells/versions/3.3.6\n\n```\nactive_helper >= 0\nrails ~> 2.3\nshoulda >= 0\n```\n\n3.3.5 does not have those as dependencies:\n\nhttp://rubygems.org/gems/cells/versions/3.3.5\n\nAlso I believe shoulda should be listed as development dependency and not runtime.\n. https://gist.github.com/1081553\n\nI see a problem there, cells 3.3.7 depends on cells >= 0?\n\nHow are you generating the gemspec? I just checked rails-2.3 branch:\n\nAnd neither cells.gemspec or Rakefile:\n\nhttps://github.com/apotonick/cells/blob/rails-2.3/cells.gemspec\nhttps://github.com/apotonick/cells/blob/rails-2.3/Rakefile\n\nShows the dependencies there.\n. Well, I just cloned the repository, checkout rails-2.3 branch, installed jeweler, run `rake gemspec` and checked the generated gemspec, to my surprise:\n\n``` ruby\n\n  if s.respond_to? :specification_version then\n    s.specification_version = 3\n\n    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then\n      s.add_runtime_dependency(%q<cells>, [\">= 0\"])\n      s.add_development_dependency(%q<shoulda>, [\">= 0\"])\n      s.add_development_dependency(%q<active_helper>, [\">= 0\"])\n    else\n      s.add_dependency(%q<cells>, [\">= 0\"])\n      s.add_dependency(%q<shoulda>, [\">= 0\"])\n      s.add_dependency(%q<active_helper>, [\">= 0\"])\n    end\n  else\n    s.add_dependency(%q<cells>, [\">= 0\"])\n    s.add_dependency(%q<shoulda>, [\">= 0\"])\n    s.add_dependency(%q<active_helper>, [\">= 0\"])\n  end\n```\n\nThat is what got pushed to rubygems.org, can you confirm that you see the same? cells >= 0 been listed as dependency. If you don't see it, I'm crazy.\n. If `build` task is provided by Jeweler gem, then it ran Jeweler and borked the gemspec.\n\nI just run `rake build` on a pristine checkout and after closer inspection of the YAML metadata inside the generated gem seems that is modifying your dependencies.\n\nHowever, doing a simple `gem build cells.gemspec` does generate a gem in the same directory that do not contain borked set of dependencies:\n\n``` yaml\n---\n- !ruby/object:Gem::Dependency\n  name: rails\n  prerelease: false\n  requirement: &id001 !ruby/object:Gem::Requirement\n    none: false\n    requirements:\n    - - ~>\n      - !ruby/object:Gem::Version\n        hash: 5\n        segments:\n        - 2\n        - 3\n        version: \"2.3\"\n  type: :runtime\n  version_requirements: *id001\n- !ruby/object:Gem::Dependency\n  name: shoulda\n  prerelease: false\n  requirement: &id002 !ruby/object:Gem::Requirement\n    none: false\n    requirements:\n    - - \">=\"\n      - !ruby/object:Gem::Version\n        hash: 3\n        segments:\n        - 0\n        version: \"0\"\n  type: :development\n  version_requirements: *id002\n- !ruby/object:Gem::Dependency\n  name: active_helper\n  prerelease: false\n  requirement: &id003 !ruby/object:Gem::Requirement\n    none: false\n    requirements:\n    - - \">=\"\n      - !ruby/object:Gem::Version\n        hash: 3\n        segments:\n        - 0\n        version: \"0\"\n  type: :development\n  version_requirements: *id003\n```\n. @apotonick indeed, thank you!\n. ",
    "mattdb": "Sent a [pull request](https://github.com/apotonick/cells/pull/55) that is backwards compatible with all versions of rails 2.3. Apologies, looks like the pull request also created a duplicate issue.\n. Addresses [issue #40](https://github.com/apotonick/cells/issues/40) \n. Sent a [pull request](https://github.com/apotonick/cells/pull/55) that is backwards compatible with all versions of rails 2.3. Apologies, looks like the pull request also created a duplicate issue.\n. Addresses [issue #40](https://github.com/apotonick/cells/issues/40) \n. ",
    "brett-richardson": "No I'm not.\n\nThis helper is provided by Devise... do you think that might be the problem?\n. Thank you for your help man!!! Awesome gem btw. \n:)\n. Ah, that's great! Thanks. :)\n. No I'm not.\n\nThis helper is provided by Devise... do you think that might be the problem?\n. Thank you for your help man!!! Awesome gem btw. \n:)\n. Ah, that's great! Thanks. :)\n. ",
    "mat813": "Hum, rspec works fine outside of cells, there is no rspec generator in the git repository for cell though.\n. Oh, it does not, that's the problem, sorry for the noise :-)\n. Hum, rspec works fine outside of cells, there is no rspec generator in the git repository for cell though.\n. Oh, it does not, that's the problem, sorry for the noise :-)\n. ",
    "mkastner": "I hope, I'm not dumbfounding this, but using #options instead of @opts throws an error:\n\nundefined local variable or method `options' for #Cell::Rails::View:0x103b9a7b8\n. Sorry, I found the problem. I didn't realize that @opts was simply renamed to @options. I misunderstood the hint given by the deprecation warning.\n\nThanks for you help!\n. It's version 3.5.5\n. In fact, that's what I was trying to do.\n\nThx!\n. I hope, I'm not dumbfounding this, but using #options instead of @opts throws an error:\n\nundefined local variable or method `options' for #Cell::Rails::View:0x103b9a7b8\n. Sorry, I found the problem. I didn't realize that @opts was simply renamed to @options. I misunderstood the hint given by the deprecation warning.\n\nThanks for you help!\n. It's version 3.5.5\n. In fact, that's what I was trying to do.\n\nThx!\n. ",
    "wingrunr21": "Only one additional file is getting included (ActionController::UrlFor).  All this file does is redefine url_options (which is already included in ActionDispatch::Routing::UrlFor which had been included via AbstractController) so that request parameters can be merged with the hash provided by default_url_options.\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/url_for.rb\n. Passing *_url helpers into a Cell as arguments is a very poor solution.  What if someone is trying to utilize a Cell(s) to build a dynamic navigation menu?  This is a perfect use case for a Cell.  They could be passing 6 or 7 url strings into the Cell along with other arguments.  That would shoot code readability in the foot.\n\nI would argue behind these types of methods being necessary precisely because Cells are view components.  A helper as basic as root_url is utilized in views all the time to link back to the home page.  Note that root_path is not always an option for some people (you must use _url if you have subdomains for example).\n\nThere is another option.  url_options, like I already said, is already being included from ActionDispatch::Routing::UrlFor.  Instead of including the AC reimplementation, Cells could override url_options, eliminating the lines of code that modify the request (there are only a couple, most request calls are accessors).  It is possible that we could get away with something as simple as this:\n\n```\ndef url_options(options)\n  @_url_options ||= super.reverse_merge(:host => request.host).freeze\nend\n```\n\nThis, however, is not only duplicating code, but I do not know the consequences of not including the parts of the method.  I'm willing to bet it would work in most scenarios, but eventually you are going to get someone that needs those other aspects of the request.\n. I have no problems with it being optional.  This will definitely need to be documented, however.  I am not the first, and certainly not the last, person to run into this issue.\n. brett, including the ApplicationController::UrlFor module in your Cell should be all that is necessary for those types of links to work.  I'm using them right now in my site.\n\nroot_url(:subdomain => :foobar)\n\nCell:\n    class NavigationCell < Cell::Rails\n      include ActionController::UrlFor\n\n```\n  def nav_links\n    ...\n  end\nend\n```\n\nView:\n    %li\n      = link_to(root_url(:subdomain => :courses)) do\n        %span.pictos W\n        Courses\n    %li\n      = link_to(root_url(:subdomain => :resources)) do\n        %span.pictos p\n        Resources\n    %li\n      = link_to(root_url(:subdomain => :projects)) do\n        %span.pictos e\n        Projects\n    %li\n      = link_to(root_url(:subdomain => :alumni)) do\n        %span.pictos g\n        Alumni\n. Only one additional file is getting included (ActionController::UrlFor).  All this file does is redefine url_options (which is already included in ActionDispatch::Routing::UrlFor which had been included via AbstractController) so that request parameters can be merged with the hash provided by default_url_options.\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/url_for.rb\n. Passing *_url helpers into a Cell as arguments is a very poor solution.  What if someone is trying to utilize a Cell(s) to build a dynamic navigation menu?  This is a perfect use case for a Cell.  They could be passing 6 or 7 url strings into the Cell along with other arguments.  That would shoot code readability in the foot.\n\nI would argue behind these types of methods being necessary precisely because Cells are view components.  A helper as basic as root_url is utilized in views all the time to link back to the home page.  Note that root_path is not always an option for some people (you must use _url if you have subdomains for example).\n\nThere is another option.  url_options, like I already said, is already being included from ActionDispatch::Routing::UrlFor.  Instead of including the AC reimplementation, Cells could override url_options, eliminating the lines of code that modify the request (there are only a couple, most request calls are accessors).  It is possible that we could get away with something as simple as this:\n\n```\ndef url_options(options)\n  @_url_options ||= super.reverse_merge(:host => request.host).freeze\nend\n```\n\nThis, however, is not only duplicating code, but I do not know the consequences of not including the parts of the method.  I'm willing to bet it would work in most scenarios, but eventually you are going to get someone that needs those other aspects of the request.\n. I have no problems with it being optional.  This will definitely need to be documented, however.  I am not the first, and certainly not the last, person to run into this issue.\n. brett, including the ApplicationController::UrlFor module in your Cell should be all that is necessary for those types of links to work.  I'm using them right now in my site.\n\nroot_url(:subdomain => :foobar)\n\nCell:\n    class NavigationCell < Cell::Rails\n      include ActionController::UrlFor\n\n```\n  def nav_links\n    ...\n  end\nend\n```\n\nView:\n    %li\n      = link_to(root_url(:subdomain => :courses)) do\n        %span.pictos W\n        Courses\n    %li\n      = link_to(root_url(:subdomain => :resources)) do\n        %span.pictos p\n        Resources\n    %li\n      = link_to(root_url(:subdomain => :projects)) do\n        %span.pictos e\n        Projects\n    %li\n      = link_to(root_url(:subdomain => :alumni)) do\n        %span.pictos g\n        Alumni\n. ",
    "chikamichi": "I'd advocate having this optionnal as it will introduce references to the request, which is not something a Cell should know about by design. Should it be needed, the controller is the entity responsible for translating and controlling (!) what comes from the HTTP layer (like the request metadata) to some internal states, which the Cells may consume to behave as intented. Maybe Cells could provide, as an option, a way of proxying the request object at the controller level, maybe using a method on the root widget when it's been attached to a controller?\n. I'd advocate having this optionnal as it will introduce references to the request, which is not something a Cell should know about by design. Should it be needed, the controller is the entity responsible for translating and controlling (!) what comes from the HTTP layer (like the request metadata) to some internal states, which the Cells may consume to behave as intented. Maybe Cells could provide, as an option, a way of proxying the request object at the controller level, maybe using a method on the root widget when it's been attached to a controller?\n. ",
    "digiprop": "I'm sorry, should have elaborated.  link_to is called in my cell view.\n\nRails 3.0.7 and cells 3.5.6\n. Oddly enough, include ActionController::UrlFor fixed the issue.  It is now working properly.  Not ideal but...\n. I'm sorry, should have elaborated.  link_to is called in my cell view.\n\nRails 3.0.7 and cells 3.5.6\n. Oddly enough, include ActionController::UrlFor fixed the issue.  It is now working properly.  Not ideal but...\n. ",
    "silviorelli": "Ah ok thanks, I'll try to use modules instead of methods from the application controller.\n. Ah ok thanks, I'll try to use modules instead of methods from the application controller.\n. ",
    "cameel": "Not directly, but the patch in the pull request mentioned above makes Finisher, including :set_routes_preloader, always run last and it does not break cells in my project. I am not sure how to test it more thoroughly though.\n. rake assets:precompile should create public/assets directory and put precompiled JavaScript and CSS there. When Cells is included in Gemfile it does not do this. There is no exception, no errors on the console, nothing. It's because Sprockets' :after_initialize runs when config.assets.paths is not yet initialized and it just thinks that there are no assets. \n\nAnd it's not just rake task. The same goes if you run your Rails application - it should precompile the assets on the first access and this does not happen.\n. I've got it fixed. Here's my patch: #70\n. Ok. So it seems that `Cell::TestCase` does not get automatically loaded by Test::Unit after all. That's because `lib/` directories from engines and railties are not added by Rails to `config.autoload_paths` automatically. I wonder why is it autoloaded by rspec-cells. Maybe it requires it explicitly?\n\nSo I think that CHANGELOG and README should be updated to say that when using `Test::Unit` you need to put `require 'cell/test_case'` in `test_helper.rb`. Or you could make cells add its `lib/` to `config.autoload_paths`. It would probably be something like this:\n\n``` ruby\n# lib/cells/railtie.rb\ninitializer 'cells.add_autoload_paths', :before => :set_autoload_paths do |app|\n  app.config.autoload_paths << File.expand_path(\"../../lib\", File.dirname(__FILE__))\nend\n```\n\nUPDATE: Since I made that change anyway to see if it works, here's a patch in case you wanted to use this: #72\n. But aren't `#options` intended to always be a hash like `params` in controllers? It shouldn't be difficult to make them an empty hash if `args` is nil or not a hash. It would still make it possible to distinguish between passing an empty hash and passing nothing by checking `args`. And if the state has no `args` the difference is not meaningful anyway.\n\nIt may be that I just don't understand how are `args` meant to be used. The post you mention gives only one example. Is there more documentation for this?\n. I wasn't talking about any particular cell. The lines above are from a dummy cell I created in a fresh rails app only to demonstrate my point.\n\nAs for `args`, I think it would be enough to give a few more examples of passing arguments to cells. I.e. passing an array, passing two arguments, passing an empty hash, passing nothing. Also make it clear whether `options` is always equal to `args` or is it always a hash.\n\nAlso: is it possible to create a state that takes more than one argument (explicitly, by declaring two arguments, not as an array)?\n. This probably explains why gems don't usually autoload their lib/. \n\n[Rails 3 RC does not autoload from lib/](https://rails.lighthouseapp.com/projects/8994/tickets/5218-rails-3-rc-does-not-autoload-from-lib#ticket-5218-8)\n\n> However, engines cannot autoload stuff in lib since they are usually required by the gem so we did this change to make them behave the same.\n\nMy patch works for me though. I wonder in what situations does autoloading conflict with requiring those files? Maybe it breaks reloading changed files?\n. OK. You're probably right. Treat it just as a proof of concept.\n\nFrom what I see in `test_helper.rb`, `Test::Unit`'s test case classes need to be manually required too:\n\n``` ruby\n# test/test_helper.rb\n...\nrequire 'rails/test_help'\n...\n```\n\nThe only difference from Cells is that Rails generates that file itself so it can put that there by default.\n. Sorry, my bad. It works if you put :locals and :view in the same hash.\n\n``` ruby\ndef display\n  render :view => :display, :locals => {:why? => :just_because}\nend\n```\n\n#130 still stands though.\n. Not directly, but the patch in the pull request mentioned above makes Finisher, including :set_routes_preloader, always run last and it does not break cells in my project. I am not sure how to test it more thoroughly though.\n. rake assets:precompile should create public/assets directory and put precompiled JavaScript and CSS there. When Cells is included in Gemfile it does not do this. There is no exception, no errors on the console, nothing. It's because Sprockets' :after_initialize runs when config.assets.paths is not yet initialized and it just thinks that there are no assets. \n\nAnd it's not just rake task. The same goes if you run your Rails application - it should precompile the assets on the first access and this does not happen.\n. I've got it fixed. Here's my patch: #70\n. Ok. So it seems that `Cell::TestCase` does not get automatically loaded by Test::Unit after all. That's because `lib/` directories from engines and railties are not added by Rails to `config.autoload_paths` automatically. I wonder why is it autoloaded by rspec-cells. Maybe it requires it explicitly?\n\nSo I think that CHANGELOG and README should be updated to say that when using `Test::Unit` you need to put `require 'cell/test_case'` in `test_helper.rb`. Or you could make cells add its `lib/` to `config.autoload_paths`. It would probably be something like this:\n\n``` ruby\n# lib/cells/railtie.rb\ninitializer 'cells.add_autoload_paths', :before => :set_autoload_paths do |app|\n  app.config.autoload_paths << File.expand_path(\"../../lib\", File.dirname(__FILE__))\nend\n```\n\nUPDATE: Since I made that change anyway to see if it works, here's a patch in case you wanted to use this: #72\n. But aren't `#options` intended to always be a hash like `params` in controllers? It shouldn't be difficult to make them an empty hash if `args` is nil or not a hash. It would still make it possible to distinguish between passing an empty hash and passing nothing by checking `args`. And if the state has no `args` the difference is not meaningful anyway.\n\nIt may be that I just don't understand how are `args` meant to be used. The post you mention gives only one example. Is there more documentation for this?\n. I wasn't talking about any particular cell. The lines above are from a dummy cell I created in a fresh rails app only to demonstrate my point.\n\nAs for `args`, I think it would be enough to give a few more examples of passing arguments to cells. I.e. passing an array, passing two arguments, passing an empty hash, passing nothing. Also make it clear whether `options` is always equal to `args` or is it always a hash.\n\nAlso: is it possible to create a state that takes more than one argument (explicitly, by declaring two arguments, not as an array)?\n. This probably explains why gems don't usually autoload their lib/. \n\n[Rails 3 RC does not autoload from lib/](https://rails.lighthouseapp.com/projects/8994/tickets/5218-rails-3-rc-does-not-autoload-from-lib#ticket-5218-8)\n\n> However, engines cannot autoload stuff in lib since they are usually required by the gem so we did this change to make them behave the same.\n\nMy patch works for me though. I wonder in what situations does autoloading conflict with requiring those files? Maybe it breaks reloading changed files?\n. OK. You're probably right. Treat it just as a proof of concept.\n\nFrom what I see in `test_helper.rb`, `Test::Unit`'s test case classes need to be manually required too:\n\n``` ruby\n# test/test_helper.rb\n...\nrequire 'rails/test_help'\n...\n```\n\nThe only difference from Cells is that Rails generates that file itself so it can put that there by default.\n. Sorry, my bad. It works if you put :locals and :view in the same hash.\n\n``` ruby\ndef display\n  render :view => :display, :locals => {:why? => :just_because}\nend\n```\n\n#130 still stands though.\n. ",
    "oriolgual": "+1000\n\nThis is also causing that `before` is NEVER called when using MiniSpec :(\n. +1000\n\nThis is also causing that `before` is NEVER called when using MiniSpec :(\n. ",
    "dbalatero": "Glad to see others are having problems with this line as well!\n\n(I mean that in the best way possible, @oriolgual :))\n\nOn Tue, Jul 5, 2011 at 1:42 PM, oriolgual <\nreply@reply.github.com>wrote:\n\n> +1000\n> \n> This is also causing that `before` is NEVER called when using MiniSpec :(\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/pull/57#issuecomment-1507189\n. Glad to see others are having problems with this line as well!\n\n(I mean that in the best way possible, @oriolgual :))\n\nOn Tue, Jul 5, 2011 at 1:42 PM, oriolgual <\nreply@reply.github.com>wrote:\n\n> +1000\n> \n> This is also causing that `before` is NEVER called when using MiniSpec :(\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/pull/57#issuecomment-1507189\n. ",
    "paneq": "We should probably write a test for it and maybe also fix the strategy for rails 3.1 ?\n. I added a test for that fix and also checked that without my patch the test was failing.\n. The test is passing for rails 3.1 without changes in `rails3_1_strategy.rb`\n. Yes. There are quite different in this element. After my fix both pass the test.\n. We should probably write a test for it and maybe also fix the strategy for rails 3.1 ?\n. I added a test for that fix and also checked that without my patch the test was failing.\n. The test is passing for rails 3.1 without changes in `rails3_1_strategy.rb`\n. Yes. There are quite different in this element. After my fix both pass the test.\n. ",
    "brendon": "Thanks for that, I tried 3.3.8 as it seems to be the latest in that release and just has gem changes in it.\n\nThe documentation still mentions installing 3.3.5 for rails 2 even in the latest branch. :)\n\nHave a great day!\n\nBrendon\n. Just reviving this. I'm stuck on Rails 2.3 and needed to upgrade cells from a plugin version I was using to the gem (3.3.9) to avoid deprecation warnings triggered by the plugin in Rails 2.3.6+.\n\nI used to do this:\n\n``` ruby\ndef my_cell\n    @variable = @opts[:variable]\n\n    render\n  end\n\nrender_cell :model_name, :my_cell, :variable => whatever\n```\n\nI get this error now:\n\n``` ruby\nThe error occurred while evaluating nil.[]\n\n/cells-3.3.9/lib/cells/cell/base.rb:340:in `render_view_for'\n/cells-3.3.9/lib/cells/cell/base.rb:281:in `render_view_for_backward_compat'\n/cells-3.3.9/lib/cells/cell/base.rb:269:in `render_state'\n```\n\nI'm confused as to why this functionality (passing in variables) seems to have been either removed or is buggy? Could you let me know how I'm supposed to access variables now? I presume access changed somewhere along the line. Alternatively, is there a gem version that doesn't trigger the deprecation warnings (`load_paths` and `returning`) but still allows the old functionality?\n. Turns out that I wasn't calling `render` in one of my cells. Slightly obscure :)\n\nStill, @bikramwp, you can use the method I outlined above to send arguments into a cell render and access them.\n. Indeed @georgemillo, I think I may have resorted to `html_escape` on one occasion also. If I remember correctly, the process of upgrading to Cells 4 was quite a positive learning experience once I got my head around the changes. :). Thanks for that, I tried 3.3.8 as it seems to be the latest in that release and just has gem changes in it.\n\nThe documentation still mentions installing 3.3.5 for rails 2 even in the latest branch. :)\n\nHave a great day!\n\nBrendon\n. Just reviving this. I'm stuck on Rails 2.3 and needed to upgrade cells from a plugin version I was using to the gem (3.3.9) to avoid deprecation warnings triggered by the plugin in Rails 2.3.6+.\n\nI used to do this:\n\n``` ruby\ndef my_cell\n    @variable = @opts[:variable]\n\n    render\n  end\n\nrender_cell :model_name, :my_cell, :variable => whatever\n```\n\nI get this error now:\n\n``` ruby\nThe error occurred while evaluating nil.[]\n\n/cells-3.3.9/lib/cells/cell/base.rb:340:in `render_view_for'\n/cells-3.3.9/lib/cells/cell/base.rb:281:in `render_view_for_backward_compat'\n/cells-3.3.9/lib/cells/cell/base.rb:269:in `render_state'\n```\n\nI'm confused as to why this functionality (passing in variables) seems to have been either removed or is buggy? Could you let me know how I'm supposed to access variables now? I presume access changed somewhere along the line. Alternatively, is there a gem version that doesn't trigger the deprecation warnings (`load_paths` and `returning`) but still allows the old functionality?\n. Turns out that I wasn't calling `render` in one of my cells. Slightly obscure :)\n\nStill, @bikramwp, you can use the method I outlined above to send arguments into a cell render and access them.\n. Indeed @georgemillo, I think I may have resorted to `html_escape` on one occasion also. If I remember correctly, the process of upgrading to Cells 4 was quite a positive learning experience once I got my head around the changes. :). ",
    "igray": "I had this problem in Rails 3.1rc4 and cells 3.6.3, but it went away when I downgraded to cells 3.6.2.  \n\nFor Rails 3.0.5, try using cells 3.5.x.\n. I had this problem in Rails 3.1rc4 and cells 3.6.3, but it went away when I downgraded to cells 3.6.2.  \n\nFor Rails 3.0.5, try using cells 3.5.x.\n. ",
    "libc": "``` text\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:74:in `initialize'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:74:in `initialize'\nactionpack (3.0.7) lib/abstract_controller/layouts.rb:299:in `initialize'\ncells (3.6.3) lib/cell/rails.rb:53:in `initialize'\ncells (3.6.3) lib/cell.rb:28:in `new'\ncells (3.6.3) lib/cell.rb:28:in `create_cell_for'\ncells (3.6.3) lib/cell.rb:18:in `render_cell_for'\ncells (3.6.3) lib/cells/rails.rb:53:in `render_cell'\n```\n\n``` text\nruby-1.8.7-p352 :015 > Cell::Rails.ancestors.each { |c| puts c.instance_method(:initialize) rescue nil }\n#<UnboundMethod: Cell::Rails#initialize>\n#<UnboundMethod: AbstractController::Layouts#initialize>\n#<UnboundMethod: AbstractController::Rendering#initialize>\n#<UnboundMethod: AbstractController::Base(Object)#initialize>\n#<UnboundMethod: Object#initialize>\nruby-1.8.7-p352 :016 > Cell::Rails.ancestors.each { |c| puts c.instance_method(:initialize).arity rescue nil }\n-2\n-1\n-1\n0\n0\nruby-1.8.7-p352 :017 > AbstractController::Base.instance_method(:initialize)\n => #<UnboundMethod: AbstractController::Base(Object)#initialize> \n```\n\n``` ruby\nirb(main):002:0> class A < Object;\nirb(main):003:1* def initialize(a); super; end\nirb(main):004:1> end\n=> nil\nirb(main):005:0> A.new(:a)\nArgumentError: wrong number of arguments (1 for 0)\n    from (irb):3:in `initialize'\n    from (irb):3:in `initialize'\n    from (irb):5:in `new'\n    from (irb):5\n```\n\nChanging line 53 in cell/rails.rb from `super` to `super(*args)` fixes the problem.\n\nI think you can't reproduce it, because you're using ruby 1.9.2.\n. ``` text\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:74:in `initialize'\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:74:in `initialize'\nactionpack (3.0.7) lib/abstract_controller/layouts.rb:299:in `initialize'\ncells (3.6.3) lib/cell/rails.rb:53:in `initialize'\ncells (3.6.3) lib/cell.rb:28:in `new'\ncells (3.6.3) lib/cell.rb:28:in `create_cell_for'\ncells (3.6.3) lib/cell.rb:18:in `render_cell_for'\ncells (3.6.3) lib/cells/rails.rb:53:in `render_cell'\n```\n\n``` text\nruby-1.8.7-p352 :015 > Cell::Rails.ancestors.each { |c| puts c.instance_method(:initialize) rescue nil }\n#<UnboundMethod: Cell::Rails#initialize>\n#<UnboundMethod: AbstractController::Layouts#initialize>\n#<UnboundMethod: AbstractController::Rendering#initialize>\n#<UnboundMethod: AbstractController::Base(Object)#initialize>\n#<UnboundMethod: Object#initialize>\nruby-1.8.7-p352 :016 > Cell::Rails.ancestors.each { |c| puts c.instance_method(:initialize).arity rescue nil }\n-2\n-1\n-1\n0\n0\nruby-1.8.7-p352 :017 > AbstractController::Base.instance_method(:initialize)\n => #<UnboundMethod: AbstractController::Base(Object)#initialize> \n```\n\n``` ruby\nirb(main):002:0> class A < Object;\nirb(main):003:1* def initialize(a); super; end\nirb(main):004:1> end\n=> nil\nirb(main):005:0> A.new(:a)\nArgumentError: wrong number of arguments (1 for 0)\n    from (irb):3:in `initialize'\n    from (irb):3:in `initialize'\n    from (irb):5:in `new'\n    from (irb):5\n```\n\nChanging line 53 in cell/rails.rb from `super` to `super(*args)` fixes the problem.\n\nI think you can't reproduce it, because you're using ruby 1.9.2.\n. ",
    "galetahub": "My env:\nree 1.8.7 (2011-02-18 patchlevel 334)\nrails 3.0.9\ncells 3.6.3\n. My env:\nree 1.8.7 (2011-02-18 patchlevel 334)\nrails 3.0.9\ncells 3.6.3\n. ",
    "sprysoft": "I came up against this yesterday and figured out really quickly that a simple include fixes the problem, I don't see it as a problem to add to my sweepers but might be nice to have it added by default.\n. I came up against this yesterday and figured out really quickly that a simple include fixes the problem, I don't see it as a problem to add to my sweepers but might be nice to have it added by default.\n. ",
    "dgilperez": "Hi!\n\nIs the Cell::Debugging module feature going forward? We'd be also interested in having such a logging feature. We just started playing caching our cells and its difficult to understand what is happening without some logging.\n\nRegards!\n. :+1:\n. Fixed in rspec-rails like this: https://github.com/rspec/rspec-rails/issues/1187 and caused by the usage of `named_routes.helpers` in rspec-cells: https://github.com/apotonick/rspec-cells/search?utf8=%E2%9C%93&q=named_routes.helpers\n. Hi!\n\nIs the Cell::Debugging module feature going forward? We'd be also interested in having such a logging feature. We just started playing caching our cells and its difficult to understand what is happening without some logging.\n\nRegards!\n. :+1:\n. Fixed in rspec-rails like this: https://github.com/rspec/rspec-rails/issues/1187 and caused by the usage of `named_routes.helpers` in rspec-cells: https://github.com/apotonick/rspec-cells/search?utf8=%E2%9C%93&q=named_routes.helpers\n. ",
    "schorsch": "Do i need to wire the notifications to the log output myself? As the cache output is pretty usefull for a dev.\n\n... yes i finally made it to try cells \n. I would not dive into this template cache digest thing as it over-complicates  things.\n\nWe rather should go for a simpler cache getter/cleaning methods in the core.\n\nf. ex. this is some code i am using to delete the cache for specific cells:\n\n``` ruby\nclass SomeCell\n\n  cache :show do\n    \"#{model.id}/#{model.updated_at.strftime('%Y%m%d%H%M%S')}\"\n  end\n\n  cache :public_show do\n    \"#{model.id}/#{model.updated_at.strftime('%Y%m%d%H%M%S')}\"\n  end\n\n  # Delete the cache for a single or multiple states (views)\n  # If states is empty deletes all defined caches\n  # Needed whenever a view is updated, for manual deletion of the cache:\n  #\n  #   Model.select(:id, :updated_at).each{|i| SomeCell.delete_cache( i, :show)}\n  #\n  # @param [aModel] obj\n  # @param [Array<Symbol>, Symbol] states name of cache partial see defs on top\n  def self.delete_cache(obj, states)\n    state_keys = states.is_a?(Array) ? states : [states]\n    state_keys ||= version_procs.keys\n    state_keys.each do |i|\n      key = cache_key(i, obj)\n      #btw. this does not seem to work maybe bcs my local prefix 'cache' in rails.cache_config is not prepended \n      ::Rails.cache.delete(key)   \n    end\n  end\n\n  # Get a cache key for a given object and state\n  # @param [aModel] obj\n  # @param [Array<Symbol>, Symbol] states name of cache partial see defs on top\n  # @return [String]\n  def self.cache_key(state, obj)\n    cell = self.(obj)\n    # ??\n    state_cache_key(state, version_procs[state].evaluate(cell))\n  end\nend\n```\n\nthe specs continue to have a rather ugly lookup:\n\n``` ruby\n  describe 'cache keys' do\n    it 'has keys' do\n      obj = FactoryGirl.create(:a_model)\n      cell = cell(:some, obj)\n      # WTF ??\n      key = cell.class.state_cache_key(:show, cell.class.version_procs[:show].evaluate(cell))\n      expect(key).to eq (\"cells/some/show/#{obj.id}/#{obj.updated_at.strftime('%Y%m%d%H%M%S')}\")\n    end\n  end\n```\n\nThis could be continued with methods to destroy all caches for a cell, all caches for an object across cells, etc. I am using redis + gem readthis for caching and think about to just use http://redis.io/commands/keys command, which by the help of *-lookups would render all of the above useless.\n. Great to see you starting to groom. Is there any other place(ticket) dedicated to some major code removal/cleanup? \r\n\r\nOn my list:\r\n\r\n* remove cell(:name) calls in favour of MyCellClass.()    \r\n* do we really need a 'show' method, when we use def call() anyway?\r\n* above could also simplify caching, which could need some love in getting the cache-key or deleting a key base on the cells current model \r\n* remove :collection magic rendering as it leads to ugly code instead of simply opening a table/list and use  my_objects.each + render call in a template \r\n* allow explizit params for a cells call() method, as an options hash is hard to track, and sometimes i dont have a model so the first arg is nil\r\n* dont assume the cells base folder and always set it in initializer or base class\r\n* maybe there is away i can build my ow base class and include only some modules to achive cleaner classes like mentioned above \r\n. > remove cell(:name) calls in favour of MyCellClass.()\r\n\r\nI dont use any link_to magic anymore and voted for plain links like %a{href:\"/my/area/{model.id\"}. Same goes for form_for & field_helpers, where plain HAML is a decent fit and much more stable between rails upgrades (e.g. renaming of form/field-ids where your js depend on). So i tried to decouple my views from rails(helpers) as much as possible, but of course i do understand the necessity to keep it around. The cell() helper to wrap the rails controller context could f.ex be moved to the cell-rails gem. \r\n\r\n\r\n>  :collection magic rendering \r\n\r\nThe usage might be a personal taste. When not using cell() it does impose a call like MyCell.(nil, collection: xy). Maybe there is a chance to outsource it into a module, so one can opt-in to use it and the default cell() wrapper has it already included.\r\n\r\n> explizit params\r\n\r\nThrowing whatever into the options parameter is convenient but gets really dirty when you start passing them from one cell to another, where each cell requires a different part of them. Atm. i try to comment the required options as much as possible or raise if something is missing. Rails 5.1 move to ActionParams (which also has its positive effects) and the habit to add controller/action names to the request params lead me to avoid juggling with params and just use&pass the required parts: MyCell.(an_object, user: current_user).\r\nI could imagine a structure like:\r\n\r\n```ruby\r\nclass MyCell\r\n   include Cells::Render\r\n   extend Cells::Cache\r\n   include Maybe::SomeRailsNumberHelper\r\n\r\n # The params can be commented, used for lookup by autocompletes in IDE's,\r\n # transparently set defaults and use 'jump-to-definition' in IDE\r\n # @param [MyModel] model a single product\r\n # @param [User] user product owner\r\n # @return ..\r\n  def call(model, user, another='default')\r\n    # do stuff\r\n    render\r\n  end\r\nend\r\n\r\n# VS my current approach where i have no chance to directly comment e.g. the \r\n# model type (+ options hash inject in by my own base class)\r\n  class Index < ApplicationCell\r\n    include PaginationHelper\r\n    \r\n   # no params needed .. half a year later .. which params are needed? What's the model kind? \r\n    def show\r\n      @scope  = options[:scope] || :my\r\n      @filter = options[:filter] # required\r\n      @org    = options[:org] if options[:org]\r\n      render\r\n    end\r\n  end\r\n\r\n``` \r\n\r\nFor me it boils down to having a slim(fast) 'rendering' toolbox. I can give some more insights on my usage and how i moved from ActionView -> cell(:xy) -> MyCell.() and using Rails now mostly for controller/routes/models. But dont know if this ticket is a good fit for it.\r\nResult can be seen https://app.reimbursement.info/icds/F10-F19 where f.ex. each box in the body is cell\r\n\r\n\r\n\r\n\r\n\r\n . Do i need to wire the notifications to the log output myself? As the cache output is pretty usefull for a dev.\n\n... yes i finally made it to try cells \n. I would not dive into this template cache digest thing as it over-complicates  things.\n\nWe rather should go for a simpler cache getter/cleaning methods in the core.\n\nf. ex. this is some code i am using to delete the cache for specific cells:\n\n``` ruby\nclass SomeCell\n\n  cache :show do\n    \"#{model.id}/#{model.updated_at.strftime('%Y%m%d%H%M%S')}\"\n  end\n\n  cache :public_show do\n    \"#{model.id}/#{model.updated_at.strftime('%Y%m%d%H%M%S')}\"\n  end\n\n  # Delete the cache for a single or multiple states (views)\n  # If states is empty deletes all defined caches\n  # Needed whenever a view is updated, for manual deletion of the cache:\n  #\n  #   Model.select(:id, :updated_at).each{|i| SomeCell.delete_cache( i, :show)}\n  #\n  # @param [aModel] obj\n  # @param [Array<Symbol>, Symbol] states name of cache partial see defs on top\n  def self.delete_cache(obj, states)\n    state_keys = states.is_a?(Array) ? states : [states]\n    state_keys ||= version_procs.keys\n    state_keys.each do |i|\n      key = cache_key(i, obj)\n      #btw. this does not seem to work maybe bcs my local prefix 'cache' in rails.cache_config is not prepended \n      ::Rails.cache.delete(key)   \n    end\n  end\n\n  # Get a cache key for a given object and state\n  # @param [aModel] obj\n  # @param [Array<Symbol>, Symbol] states name of cache partial see defs on top\n  # @return [String]\n  def self.cache_key(state, obj)\n    cell = self.(obj)\n    # ??\n    state_cache_key(state, version_procs[state].evaluate(cell))\n  end\nend\n```\n\nthe specs continue to have a rather ugly lookup:\n\n``` ruby\n  describe 'cache keys' do\n    it 'has keys' do\n      obj = FactoryGirl.create(:a_model)\n      cell = cell(:some, obj)\n      # WTF ??\n      key = cell.class.state_cache_key(:show, cell.class.version_procs[:show].evaluate(cell))\n      expect(key).to eq (\"cells/some/show/#{obj.id}/#{obj.updated_at.strftime('%Y%m%d%H%M%S')}\")\n    end\n  end\n```\n\nThis could be continued with methods to destroy all caches for a cell, all caches for an object across cells, etc. I am using redis + gem readthis for caching and think about to just use http://redis.io/commands/keys command, which by the help of *-lookups would render all of the above useless.\n. Great to see you starting to groom. Is there any other place(ticket) dedicated to some major code removal/cleanup? \r\n\r\nOn my list:\r\n\r\n* remove cell(:name) calls in favour of MyCellClass.()    \r\n* do we really need a 'show' method, when we use def call() anyway?\r\n* above could also simplify caching, which could need some love in getting the cache-key or deleting a key base on the cells current model \r\n* remove :collection magic rendering as it leads to ugly code instead of simply opening a table/list and use  my_objects.each + render call in a template \r\n* allow explizit params for a cells call() method, as an options hash is hard to track, and sometimes i dont have a model so the first arg is nil\r\n* dont assume the cells base folder and always set it in initializer or base class\r\n* maybe there is away i can build my ow base class and include only some modules to achive cleaner classes like mentioned above \r\n. > remove cell(:name) calls in favour of MyCellClass.()\r\n\r\nI dont use any link_to magic anymore and voted for plain links like %a{href:\"/my/area/{model.id\"}. Same goes for form_for & field_helpers, where plain HAML is a decent fit and much more stable between rails upgrades (e.g. renaming of form/field-ids where your js depend on). So i tried to decouple my views from rails(helpers) as much as possible, but of course i do understand the necessity to keep it around. The cell() helper to wrap the rails controller context could f.ex be moved to the cell-rails gem. \r\n\r\n\r\n>  :collection magic rendering \r\n\r\nThe usage might be a personal taste. When not using cell() it does impose a call like MyCell.(nil, collection: xy). Maybe there is a chance to outsource it into a module, so one can opt-in to use it and the default cell() wrapper has it already included.\r\n\r\n> explizit params\r\n\r\nThrowing whatever into the options parameter is convenient but gets really dirty when you start passing them from one cell to another, where each cell requires a different part of them. Atm. i try to comment the required options as much as possible or raise if something is missing. Rails 5.1 move to ActionParams (which also has its positive effects) and the habit to add controller/action names to the request params lead me to avoid juggling with params and just use&pass the required parts: MyCell.(an_object, user: current_user).\r\nI could imagine a structure like:\r\n\r\n```ruby\r\nclass MyCell\r\n   include Cells::Render\r\n   extend Cells::Cache\r\n   include Maybe::SomeRailsNumberHelper\r\n\r\n # The params can be commented, used for lookup by autocompletes in IDE's,\r\n # transparently set defaults and use 'jump-to-definition' in IDE\r\n # @param [MyModel] model a single product\r\n # @param [User] user product owner\r\n # @return ..\r\n  def call(model, user, another='default')\r\n    # do stuff\r\n    render\r\n  end\r\nend\r\n\r\n# VS my current approach where i have no chance to directly comment e.g. the \r\n# model type (+ options hash inject in by my own base class)\r\n  class Index < ApplicationCell\r\n    include PaginationHelper\r\n    \r\n   # no params needed .. half a year later .. which params are needed? What's the model kind? \r\n    def show\r\n      @scope  = options[:scope] || :my\r\n      @filter = options[:filter] # required\r\n      @org    = options[:org] if options[:org]\r\n      render\r\n    end\r\n  end\r\n\r\n``` \r\n\r\nFor me it boils down to having a slim(fast) 'rendering' toolbox. I can give some more insights on my usage and how i moved from ActionView -> cell(:xy) -> MyCell.() and using Rails now mostly for controller/routes/models. But dont know if this ticket is a good fit for it.\r\nResult can be seen https://app.reimbursement.info/icds/F10-F19 where f.ex. each box in the body is cell\r\n\r\n\r\n\r\n\r\n\r\n . ",
    "timoschilling": "@schorsch \nHere is a subscribe example for `read_fragment.action_controller` and `write_fragment.action_controller`\n\n``` ruby\nActiveSupport::Notifications.subscribe('read_fragment.action_controller') do |name, start, finish, id, payload|\n  name    # => String, name of the event (such as 'read_fragment.action_controller' from above)\n  start   # => Time, when the instrumented block started execution\n  finish  # => Time, when the instrumented block ended execution\n  id      # => String, unique ID for this notification\n  payload # => Hash, the payload\n  Rails.logger.debug \"...\"\nend\n```\n. @schorsch contact me if you need more support\n. new link from last comment: http://trailblazer.to/gems/cells/helpers.html#asset-helpers\n. We can add a configuration for that, but I think it should default on.\n. I will rewrite something similar without the usage of ActiveSupport::Notifications\n. The same should work with the `cell` helper. Otherwise we have a inconsistent API.\n. I understand what you mean, the reflection from the string argument to the class is different. But if we change only `concept` we have a different API between both. Until now they have both the same args.\nSure there is a difference in the name notation, but I think thats the best way.\n\n``` ruby\ncell(\"foo/bar\") == cell(Foo::BarCell)\nconcept(\"foo/bar\") == concept(Foo::Bar)\n```\n. it look's like your are loving the close / open button :wink: \n. good work :+1: \n. No thats only @apotonick, I'm only a normal user in this repo\n. @apotonick has forgotten to set the api key into the travis file, thats way it has no effect.\n. @apotonick you should set the key or remove the webhook, I vote for the last option\n. Posible backward compatibility until next major release:\n\n``` ruby\nclass Cell::ViewModel\n  class << self\n    def builder\n      extend Uber::Builder\n      puts \"[Cells]: Cell builder support has been moved into Cell::Builder, include `Cell::Builder` into your Model, to be safe in the future.\"\n      super\n    end\n  end\nend\n```\n. @apotonick this can be merged now\n. [Cell::Testing](https://github.com/apotonick/cells/blob/62d919050acc84117b4da5ba0146af2fdf24db4d/lib/cell/testing.rb#L38)\n[Cell::RailsExtensions::ViewModel](https://github.com/apotonick/cells/blob/c1ea80fa93c1cb1450cf6b3f9b40f83db10ad483/lib/cell/rails.rb#L46)\n. Yes, I'm right, but you are not stupid!\n. The Block execution cost to much time.\n\n``` ruby\ncell(:post).collection(:item)\n```\n. would be closed by #342\n. double of #342\n. This should not be merged for two reasons:\n1. Every Rails related code will be removed from `cells` and will be go into `cells-rails`.\n2. You brake the core principal of Cells by exposing all helpers to the Cell. Even in a Rails related Cell, the Cell should have only the needed helpers.\n. Maybe we pick up the idea of `Cell::Rails::Helper::` in `cells-rails`\n. > Anyway, I still don't understand the Collection code - how's that related to the helpers?\n\n@apotonick It is not related to the helpers, like @hazah says: https://github.com/apotonick/cells/pull/379/files#r53317187\n. I know this issue and working on new collection interface\n. Here is a workaround:\n\n``` ruby\nsubject { Capybara.string(concept(\"thing/cell\", collection: [trb, rails], last: rails)) }\n```\n. try:\n\n``` ruby\nsubject { ::Capybara.string(concept(\"thing/cell\", collection: [trb.model, rails.model], last: rails.model)) }\n```\n. Your code brings the problem that your `block` / `nested_content` is just append to the view.\n\nI will write a change to support `render(options={}, &block)` and `yield` usage in the template.\n. I hope I can rewrite many of the rendering things in the near future.\n\nThis will maybe work then:\nCell:\n\n``` ruby\nclass ACell\n  def show\n    render :foo do\n      detail\n    end\n  end\n\n  def detail\n    \"content\"\n  end\nend\n# or\nclass ACell\n  def show\n    render :foo do\n      AOtherCell.(model).()\n    end\n  end\nend\nclass AOtherCell\n  def show\n    \"content\"\n  end\nend\n```\n\nView:\n\n``` erb\n# foo.erb\n<h1><%= name %></h1>\n<div class=\"content\">\n  <%= yield %>\n</div>\n```\n\nResult:\n\n``` html\n<h1>Foo Bar</h1>\n<div class=\"content\">\n  content\n</div>\n```\n. This should work without any buffer conflicts.\n\n``` ruby\nrender :layout do\n  concept(...).()\nend\n```\n. can you test it with this branch?\n\n``` ruby\ngem 'cells', github: 'timoschilling/cells', branch: 'improve-development-reloading'\n```\n. super!\n\nmaybe it could be like this:\n\n``` ruby\ndef inspect(inspect_parent_controller = false)\n  parent_controller_s = if @parent_controller && !inspect_parent_controller\n```\n. I agree with @apotonick, this change slows don't cells to much.\n. Yes this can be closed and reopen unter `cells-rails`\n. this should be handled in the calling code section:\n\n``` ruby\ncell('...', model, context: option[:context].merge({...}))\n```\n. The problem is that you overwrite the context in your example. You need to merge your `current_user` into the existing context.\n. ``` ruby\n# wrong\n= cell(:comment, collection: Comment.recent, context: { current_user:\ncurrent_user } )\n# right\n= cell(:comment, collection: Comment.recent, context: option[:context].merge(current_user: current_user))\n```\n. @apotonick There is no performance Problem, if you mean this? If the cell don't include `Cell::Builder`, `build` is just an alias for `new` and calling a alias coast the same as calling the original. This PR unifies the API of a normal cell and a layout cell, so I give it a thumbs up!\n. We should that merge wenn we know which way we go with Cells 5\n. @schorsch \nHere is a subscribe example for `read_fragment.action_controller` and `write_fragment.action_controller`\n\n``` ruby\nActiveSupport::Notifications.subscribe('read_fragment.action_controller') do |name, start, finish, id, payload|\n  name    # => String, name of the event (such as 'read_fragment.action_controller' from above)\n  start   # => Time, when the instrumented block started execution\n  finish  # => Time, when the instrumented block ended execution\n  id      # => String, unique ID for this notification\n  payload # => Hash, the payload\n  Rails.logger.debug \"...\"\nend\n```\n. @schorsch contact me if you need more support\n. new link from last comment: http://trailblazer.to/gems/cells/helpers.html#asset-helpers\n. We can add a configuration for that, but I think it should default on.\n. I will rewrite something similar without the usage of ActiveSupport::Notifications\n. The same should work with the `cell` helper. Otherwise we have a inconsistent API.\n. I understand what you mean, the reflection from the string argument to the class is different. But if we change only `concept` we have a different API between both. Until now they have both the same args.\nSure there is a difference in the name notation, but I think thats the best way.\n\n``` ruby\ncell(\"foo/bar\") == cell(Foo::BarCell)\nconcept(\"foo/bar\") == concept(Foo::Bar)\n```\n. it look's like your are loving the close / open button :wink: \n. good work :+1: \n. No thats only @apotonick, I'm only a normal user in this repo\n. @apotonick has forgotten to set the api key into the travis file, thats way it has no effect.\n. @apotonick you should set the key or remove the webhook, I vote for the last option\n. Posible backward compatibility until next major release:\n\n``` ruby\nclass Cell::ViewModel\n  class << self\n    def builder\n      extend Uber::Builder\n      puts \"[Cells]: Cell builder support has been moved into Cell::Builder, include `Cell::Builder` into your Model, to be safe in the future.\"\n      super\n    end\n  end\nend\n```\n. @apotonick this can be merged now\n. [Cell::Testing](https://github.com/apotonick/cells/blob/62d919050acc84117b4da5ba0146af2fdf24db4d/lib/cell/testing.rb#L38)\n[Cell::RailsExtensions::ViewModel](https://github.com/apotonick/cells/blob/c1ea80fa93c1cb1450cf6b3f9b40f83db10ad483/lib/cell/rails.rb#L46)\n. Yes, I'm right, but you are not stupid!\n. The Block execution cost to much time.\n\n``` ruby\ncell(:post).collection(:item)\n```\n. would be closed by #342\n. double of #342\n. This should not be merged for two reasons:\n1. Every Rails related code will be removed from `cells` and will be go into `cells-rails`.\n2. You brake the core principal of Cells by exposing all helpers to the Cell. Even in a Rails related Cell, the Cell should have only the needed helpers.\n. Maybe we pick up the idea of `Cell::Rails::Helper::` in `cells-rails`\n. > Anyway, I still don't understand the Collection code - how's that related to the helpers?\n\n@apotonick It is not related to the helpers, like @hazah says: https://github.com/apotonick/cells/pull/379/files#r53317187\n. I know this issue and working on new collection interface\n. Here is a workaround:\n\n``` ruby\nsubject { Capybara.string(concept(\"thing/cell\", collection: [trb, rails], last: rails)) }\n```\n. try:\n\n``` ruby\nsubject { ::Capybara.string(concept(\"thing/cell\", collection: [trb.model, rails.model], last: rails.model)) }\n```\n. Your code brings the problem that your `block` / `nested_content` is just append to the view.\n\nI will write a change to support `render(options={}, &block)` and `yield` usage in the template.\n. I hope I can rewrite many of the rendering things in the near future.\n\nThis will maybe work then:\nCell:\n\n``` ruby\nclass ACell\n  def show\n    render :foo do\n      detail\n    end\n  end\n\n  def detail\n    \"content\"\n  end\nend\n# or\nclass ACell\n  def show\n    render :foo do\n      AOtherCell.(model).()\n    end\n  end\nend\nclass AOtherCell\n  def show\n    \"content\"\n  end\nend\n```\n\nView:\n\n``` erb\n# foo.erb\n<h1><%= name %></h1>\n<div class=\"content\">\n  <%= yield %>\n</div>\n```\n\nResult:\n\n``` html\n<h1>Foo Bar</h1>\n<div class=\"content\">\n  content\n</div>\n```\n. This should work without any buffer conflicts.\n\n``` ruby\nrender :layout do\n  concept(...).()\nend\n```\n. can you test it with this branch?\n\n``` ruby\ngem 'cells', github: 'timoschilling/cells', branch: 'improve-development-reloading'\n```\n. super!\n\nmaybe it could be like this:\n\n``` ruby\ndef inspect(inspect_parent_controller = false)\n  parent_controller_s = if @parent_controller && !inspect_parent_controller\n```\n. I agree with @apotonick, this change slows don't cells to much.\n. Yes this can be closed and reopen unter `cells-rails`\n. this should be handled in the calling code section:\n\n``` ruby\ncell('...', model, context: option[:context].merge({...}))\n```\n. The problem is that you overwrite the context in your example. You need to merge your `current_user` into the existing context.\n. ``` ruby\n# wrong\n= cell(:comment, collection: Comment.recent, context: { current_user:\ncurrent_user } )\n# right\n= cell(:comment, collection: Comment.recent, context: option[:context].merge(current_user: current_user))\n```\n. @apotonick There is no performance Problem, if you mean this? If the cell don't include `Cell::Builder`, `build` is just an alias for `new` and calling a alias coast the same as calling the original. This PR unifies the API of a normal cell and a layout cell, so I give it a thumbs up!\n. We should that merge wenn we know which way we go with Cells 5\n. ",
    "dmathieu": "\\o/\n. \\o/\n. ",
    "joshk": "I love this PR \"becoming a very good best practice for Ruby projects\" <3<3<3\n. I love this PR \"becoming a very good best practice for Ruby projects\" <3<3<3\n. ",
    "ramigg": "Please ignore it for now. I think it's my fault.\n\n10x!\n. It is a simple example for now:\n\nclass WidgetCell < Cell::Rails\n  include Devise::Controllers::Helpers\n  helper_method :current_user\n\n  before_filter :set_widget\n\n  def display\n    render :layout => \"widget\"\n  end\n\n  def set_widget\n    @widget = options[:widget]\n  end\nend\n\nclass ArticleCell < WidgetCell\n\n  def display(args = {})\n    @article = @widget.content_assets.try(:first).try(:resource)\n    super\n  end\nend\n\nOn Tue, Jan 3, 2012 at 11:07 AM, Nick Sutterer <\nreply@reply.github.com\n\n> wrote:\n> \n> I'm not sure, someone else reported this earlier last year. Maybe we have\n> to patch so that the state-args are passed as block variables to the\n> before_filter block? Can you post an example of a filter and how you use it?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/95#issuecomment-3337660\n. It is very limiting if I have access to the state-args only through the state action. Please add this patch to pass it as block variables to the before_filter block. This way I'll have more control on the parent cell.\n\n10x\n. Why wrong design?\n. Got you.\n\nthanks!\n. Anyway,\nthe final result will be\n\n``` ruby\nclass WidgetCell < Cell::Rails\n  before_filter :set_widget\n\n  def set_widget(options)\n    @widget = options[:widget]\n```\n\n?\n. Works great\n\nthanks Nick!\n. Please ignore it for now. I think it's my fault.\n\n10x!\n. It is a simple example for now:\n\nclass WidgetCell < Cell::Rails\n  include Devise::Controllers::Helpers\n  helper_method :current_user\n\n  before_filter :set_widget\n\n  def display\n    render :layout => \"widget\"\n  end\n\n  def set_widget\n    @widget = options[:widget]\n  end\nend\n\nclass ArticleCell < WidgetCell\n\n  def display(args = {})\n    @article = @widget.content_assets.try(:first).try(:resource)\n    super\n  end\nend\n\nOn Tue, Jan 3, 2012 at 11:07 AM, Nick Sutterer <\nreply@reply.github.com\n\n> wrote:\n> \n> I'm not sure, someone else reported this earlier last year. Maybe we have\n> to patch so that the state-args are passed as block variables to the\n> before_filter block? Can you post an example of a filter and how you use it?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/95#issuecomment-3337660\n. It is very limiting if I have access to the state-args only through the state action. Please add this patch to pass it as block variables to the before_filter block. This way I'll have more control on the parent cell.\n\n10x\n. Why wrong design?\n. Got you.\n\nthanks!\n. Anyway,\nthe final result will be\n\n``` ruby\nclass WidgetCell < Cell::Rails\n  before_filter :set_widget\n\n  def set_widget(options)\n    @widget = options[:widget]\n```\n\n?\n. Works great\n\nthanks Nick!\n. ",
    "schneems": "I'll give that a shot, thanks for the reply and for the library\n. I'll give that a shot, thanks for the reply and for the library\n. ",
    "zaius": "Well yep, I shouldn't say 'impossible', just unintuitive :) Is there any reason why Cell::Rails has to be called that?\n. Well yep, I shouldn't say 'impossible', just unintuitive :) Is there any reason why Cell::Rails has to be called that?\n. ",
    "pokonski": "Yeah, it could be something autonomous instead of Rails.\n\nBtw glad to see Cells is still being worked on, great stuff ;)\n. Yeah, it could be something autonomous instead of Rails.\n\nBtw glad to see Cells is still being worked on, great stuff ;)\n. ",
    "urbanautomaton": "So, not too surprisingly, the problem here is that the #cycle helper is defined in the `ActionView::TextHelper` module, which in normal operation is just mixed in to your one monolithic view instance. It therefore happily relies on setting instance state to operate, safe in the knowledge that no matter where it's called from, the state will be available.\n\nIn cells, because each render_cell call creates a new cell instance that the helper is mixed into, that state is lost.\n\nThere's no way around this that I can see. If you want sequential `render_cell` calls to have access to cycle information from the level above, the only solution is to pass it to them:\n\n```\n- 10.times do\n  = render_cell(:widget, :show, :item => @item, :cycle => cycle(\"odd\", \"even\"))\n```\n\nAnd actually, thinking about it, that's exactly how it should be. I'm using cells precisely because I don't want a monolithic heap of state to which everything has access. :-)\n\nI'll stop talking to myself now.\n. Ah, okay, thanks. Am I right in thinking that this means there's no official way to get a cell instance without also doing a full render pass for a specified state? The above works, but it means the test double I pass to the `render_cell` call has to support every method used in the state's template, which I'm not so interested in testing at this level.\n\nFrom my point of view it'd be really nice to be able to test cell instances independently of the render pass (much like you can test Rails controllers without rendering templates). I think I can bodge around it for the moment by directly accessing `::Cell::Rails.create_cell_for`, but it feels a bit wrong.\n\nMay I ask why `TestCase#cell` was deprecated originally? I'd be happy to submit a pull request giving users some way to get hold of a cell instance without doing a render pass, but I don't want to trample all over design decisions you've made. :-)\n\nCheers,\nSimon\n. Fantastic. Thanks very much! And thanks for Cells in general, by the way - it's making such a difference to the maintainability of our views...\n\nCheers,\nSimon\n. Hi Nick,\n\nI've added a commit so that `Engines.append_engines_view_paths_for` now accesses `Cell::Base.config.view_path_engines` as per the docs, and have rebased the branch on top of the current master - tests all pass. Is there anything else I can do to make this ready to merge?\n. So, not too surprisingly, the problem here is that the #cycle helper is defined in the `ActionView::TextHelper` module, which in normal operation is just mixed in to your one monolithic view instance. It therefore happily relies on setting instance state to operate, safe in the knowledge that no matter where it's called from, the state will be available.\n\nIn cells, because each render_cell call creates a new cell instance that the helper is mixed into, that state is lost.\n\nThere's no way around this that I can see. If you want sequential `render_cell` calls to have access to cycle information from the level above, the only solution is to pass it to them:\n\n```\n- 10.times do\n  = render_cell(:widget, :show, :item => @item, :cycle => cycle(\"odd\", \"even\"))\n```\n\nAnd actually, thinking about it, that's exactly how it should be. I'm using cells precisely because I don't want a monolithic heap of state to which everything has access. :-)\n\nI'll stop talking to myself now.\n. Ah, okay, thanks. Am I right in thinking that this means there's no official way to get a cell instance without also doing a full render pass for a specified state? The above works, but it means the test double I pass to the `render_cell` call has to support every method used in the state's template, which I'm not so interested in testing at this level.\n\nFrom my point of view it'd be really nice to be able to test cell instances independently of the render pass (much like you can test Rails controllers without rendering templates). I think I can bodge around it for the moment by directly accessing `::Cell::Rails.create_cell_for`, but it feels a bit wrong.\n\nMay I ask why `TestCase#cell` was deprecated originally? I'd be happy to submit a pull request giving users some way to get hold of a cell instance without doing a render pass, but I don't want to trample all over design decisions you've made. :-)\n\nCheers,\nSimon\n. Fantastic. Thanks very much! And thanks for Cells in general, by the way - it's making such a difference to the maintainability of our views...\n\nCheers,\nSimon\n. Hi Nick,\n\nI've added a commit so that `Engines.append_engines_view_paths_for` now accesses `Cell::Base.config.view_path_engines` as per the docs, and have rebased the branch on top of the current master - tests all pass. Is there anything else I can do to make this ready to merge?\n. ",
    "docwhat": "I added the travis goodies for cell...\n. I added the travis goodies for cell...\n. ",
    "marbemac": "Ahh gotcha. Much better! Thanks very much.\n. Ahh gotcha. Much better! Thanks very much.\n. ",
    "hpathan": "Thats awesome!\n. Thats awesome!\n. ",
    "tyok": "I've sent a pull request, meanwhile you can use our version at [bukalapak/cells](https://github.com/bukalapak/cells)\n. I've sent a pull request, meanwhile you can use our version at [bukalapak/cells](https://github.com/bukalapak/cells)\n. ",
    "javierv": "In my case it only happens if the action is called \"display\". Changing the name of the action makes it work fine.\n. In my case it only happens if the action is called \"display\". Changing the name of the action makes it work fine.\n. ",
    "blazes816": "I'm having the same issue.  I attempted using another action name as per @javierv's suggestion but that didn't work either.  @apotonick I don't mind trying to debug this on my end, but do you have any idea where a good starting point is?  (You seem to have at least some indication as to what the cause is)\n. Even with using the name \"show\" (or \"foo\", \"bar\", and \"asdf\") it's not working.  But I just tested in a fresh app and got the issue with \"display\", changing to \"show\" fixed it.  The problem I'm having is must be coming from elsewhere in my app.  If I track it down to a bug in cells (not likely), I'll fix it.\n. ``` ruby\ndef initialize(*args)\n  super\n  view_paths.unshift \"/foo\"\nend\n```\n\nIn the model you want to change the view_paths for will cause Cells to look for the views in /foo, before looking in app/cells.  If you want to remove it's lookup in app/cells entirely:\n\n``` ruby\ndef initialize(*args)\n  super\n  view_paths.tap { |paths| paths.shift}.unshift \"/foo\"\nend\n```\n. I'm having the same issue.  I attempted using another action name as per @javierv's suggestion but that didn't work either.  @apotonick I don't mind trying to debug this on my end, but do you have any idea where a good starting point is?  (You seem to have at least some indication as to what the cause is)\n. Even with using the name \"show\" (or \"foo\", \"bar\", and \"asdf\") it's not working.  But I just tested in a fresh app and got the issue with \"display\", changing to \"show\" fixed it.  The problem I'm having is must be coming from elsewhere in my app.  If I track it down to a bug in cells (not likely), I'll fix it.\n. ``` ruby\ndef initialize(*args)\n  super\n  view_paths.unshift \"/foo\"\nend\n```\n\nIn the model you want to change the view_paths for will cause Cells to look for the views in /foo, before looking in app/cells.  If you want to remove it's lookup in app/cells entirely:\n\n``` ruby\ndef initialize(*args)\n  super\n  view_paths.tap { |paths| paths.shift}.unshift \"/foo\"\nend\n```\n. ",
    "netmute": "+1 for renaming the display method.\n. +1 for renaming the display method.\n. ",
    "laserlemon": "It helps to indicate when a library like cells is falling behind with regard to its surrounding dependencies. It watches the latests versions of your gem dependencies and lets you know when they've moved outside of what your library is requiring. That way you stay up with the most performant and bug-free versions.\n. More here: https://gemnasium.com/questions\n. You can also find dependency statuses on [Rails](https://github.com/rails/rails#footer), [Twitter](https://github.com/jnunemaker/twitter#readme), [Delayed Job](https://github.com/collectiveidea/delayed_job#readme) and a bunch more.\n. It helps to indicate when a library like cells is falling behind with regard to its surrounding dependencies. It watches the latests versions of your gem dependencies and lets you know when they've moved outside of what your library is requiring. That way you stay up with the most performant and bug-free versions.\n. More here: https://gemnasium.com/questions\n. You can also find dependency statuses on [Rails](https://github.com/rails/rails#footer), [Twitter](https://github.com/jnunemaker/twitter#readme), [Delayed Job](https://github.com/collectiveidea/delayed_job#readme) and a bunch more.\n. ",
    "marshluca": "many thanks\n. many thanks\n. ",
    "alec-c4": "+1 Please add template for rspec :)\n. yeah, i've found it, but why you have divided to two gems? As i understand - Dmytro (kpumuk) have started development of this gem, but if you merge both gems - IMHO it will be better :)\n. yeah, you can :) thanks!\n. +1 Please add template for rspec :)\n. yeah, i've found it, but why you have divided to two gems? As i understand - Dmytro (kpumuk) have started development of this gem, but if you merge both gems - IMHO it will be better :)\n. yeah, you can :) thanks!\n. ",
    "svoop": "Nope, I'm on cells from RubyGems. Thanks for the hint!\n. Great addition, too bad it stalled. :cry: \n. Nope, I'm on cells from RubyGems. Thanks for the hint!\n. Great addition, too bad it stalled. :cry: \n. ",
    "jonathan": "I'm not sure. I'll need to play around a little and see. There is talk right now in webmachine-ruby to add guards to the router; which would be really nice. Tying these all together with a backing store like ripple would make an interesting web framework.\n. Sounds good. I'll be watching the project.\n. I'm not sure. I'll need to play around a little and see. There is talk right now in webmachine-ruby to add guards to the router; which would be really nice. Tying these all together with a backing store like ripple would make an interesting web framework.\n. Sounds good. I'll be watching the project.\n. ",
    "pawelpacana": "FYI here are some code samples of webmachine-ruby and actionpack: https://gist.github.com/2472931\n. FYI here are some code samples of webmachine-ruby and actionpack: https://gist.github.com/2472931\n. ",
    "atambo": "Just ran into this as well when upgrading to rails 3.2.\n. You should probably update the cells links on http://apotomo.de/ as well.\n. Just ran into this as well when upgrading to rails 3.2.\n. You should probably update the cells links on http://apotomo.de/ as well.\n. ",
    "exviva": "FYI the \"`expand_cache_key` for arrays\" change has been reverted in Rails master and 3-2-stable.\n\nhttps://github.com/rails/rails/commit/66b445c319a217df2c0ac94f55760594aab63600\nhttps://github.com/rails/rails/commit/83dbef6074269c3eb742c0506476b3679707dedd\n. > Good to know that, thank you Olek! You're supposed to hand in a pull request as soon as the next 3.2 is out!\n\nI can't promise anything :)\n. See https://github.com/apotonick/cells/pull/100\n\nTL;DR the \"Array/\" part was introduced in Rails but has been reverted.\n. FYI the \"`expand_cache_key` for arrays\" change has been reverted in Rails master and 3-2-stable.\n\nhttps://github.com/rails/rails/commit/66b445c319a217df2c0ac94f55760594aab63600\nhttps://github.com/rails/rails/commit/83dbef6074269c3eb742c0506476b3679707dedd\n. > Good to know that, thank you Olek! You're supposed to hand in a pull request as soon as the next 3.2 is out!\n\nI can't promise anything :)\n. See https://github.com/apotonick/cells/pull/100\n\nTL;DR the \"Array/\" part was introduced in Rails but has been reverted.\n. ",
    "Nerian": "+1\n. +1\n. ",
    "the8472": "I'm basically using a helper that does `fields_for :name_of_the_cell do |f| ...` to scope the form fields inside a cell and then have the cell automagically extract the params subhash from the parent controller.\n. I basically have items that need specific behavior, so - in a gem - I just pass them into a basic cell that delegates down to some default behavior for the specific class of the item. If the gem is included in an application the application itself can override the behavior simply by having the builders of the default behavior locating the cell based on conventions specific to the item's class.\n\nBut it's just an observation of what would seem intuitive. In my case other requirements forced me to initialize the cells in the parent controller anyway and then pass them into the view instead of using render_cell, so that problem doesn't apply anymore.\n. Ah thanks, that wasn't exactly what i was looking for, but with some debugging i finally found what i needed:\n\n``` ruby\n  def initialize(*args)\n    super\n    lookup_context.prefixes.unshift @object.class.name\n  end\n```\n\nThis allows me to deal with cases where subclasses need a separate view but should fallback to the default if none exists.\n. Or a more advanced what one can do with custom helpers (+ some builder objects generated by the helper in the background) right now:\n\n``` haml\n\n=sortable_table_builder @objects do |t|\n  - t.define_column do |col|   \n     -col.header :default_index => 15 do\n       =@objects.first.class.human_attribute_name :title\n     -col.item do |obj|\n       =link_to obj, obj.title\n  %caption=@objects.first.class.human_name\n  %thead\n    %tr\n      %td{:colspan=>t.column_count} My Additional Header\n  =t.flush\n  %tfoot\n    %tr\n      %td{:colspan=>t.column_count} My Additional Footer\n```\n\nThe table builder would keep a lot of state in the background, and i think cells would be the better choice, but the inability to pass blocks really hampers that.\n. I have been toying with a few helpers that capture the block and pass it on to the cell and got it somewhat working so far, but i noticed that `cell.render_state` is not reentrant. I.e. if i trigger another state while a state is currently being rendered it change the `@_action_name` variable inside the cell and thus the views that get rendered.\n\nI guess that's actually a limitation of the AbstractController being used. That means i can only use normal method calls inside a block or have to delegate to another (sub-)cell if i want to keep things clean.\n. For doing ajax calls to Cell::Rails instances I'm using a generic wrapper controller and a route that accepts class + id + cell name + cell state parameters (modulo security checks of course) to feed the correct object to the cell.\n. Together with the other changes in 3.9 this will make cell building much simpler for us\n\n:+1: \n. Well, I'm using rails but for one case I want cells that don't require a parent controller to reduce coupling. It's not big trouble since I simply copied the code from the engine integration, but of course it would be nicer if Cell::Base could provide this behavior out of the box, or as a mixin.\nIf you don't feel it belongs there just close the issue.\n. I'm basically using a helper that does `fields_for :name_of_the_cell do |f| ...` to scope the form fields inside a cell and then have the cell automagically extract the params subhash from the parent controller.\n. I basically have items that need specific behavior, so - in a gem - I just pass them into a basic cell that delegates down to some default behavior for the specific class of the item. If the gem is included in an application the application itself can override the behavior simply by having the builders of the default behavior locating the cell based on conventions specific to the item's class.\n\nBut it's just an observation of what would seem intuitive. In my case other requirements forced me to initialize the cells in the parent controller anyway and then pass them into the view instead of using render_cell, so that problem doesn't apply anymore.\n. Ah thanks, that wasn't exactly what i was looking for, but with some debugging i finally found what i needed:\n\n``` ruby\n  def initialize(*args)\n    super\n    lookup_context.prefixes.unshift @object.class.name\n  end\n```\n\nThis allows me to deal with cases where subclasses need a separate view but should fallback to the default if none exists.\n. Or a more advanced what one can do with custom helpers (+ some builder objects generated by the helper in the background) right now:\n\n``` haml\n\n=sortable_table_builder @objects do |t|\n  - t.define_column do |col|   \n     -col.header :default_index => 15 do\n       =@objects.first.class.human_attribute_name :title\n     -col.item do |obj|\n       =link_to obj, obj.title\n  %caption=@objects.first.class.human_name\n  %thead\n    %tr\n      %td{:colspan=>t.column_count} My Additional Header\n  =t.flush\n  %tfoot\n    %tr\n      %td{:colspan=>t.column_count} My Additional Footer\n```\n\nThe table builder would keep a lot of state in the background, and i think cells would be the better choice, but the inability to pass blocks really hampers that.\n. I have been toying with a few helpers that capture the block and pass it on to the cell and got it somewhat working so far, but i noticed that `cell.render_state` is not reentrant. I.e. if i trigger another state while a state is currently being rendered it change the `@_action_name` variable inside the cell and thus the views that get rendered.\n\nI guess that's actually a limitation of the AbstractController being used. That means i can only use normal method calls inside a block or have to delegate to another (sub-)cell if i want to keep things clean.\n. For doing ajax calls to Cell::Rails instances I'm using a generic wrapper controller and a route that accepts class + id + cell name + cell state parameters (modulo security checks of course) to feed the correct object to the cell.\n. Together with the other changes in 3.9 this will make cell building much simpler for us\n\n:+1: \n. Well, I'm using rails but for one case I want cells that don't require a parent controller to reduce coupling. It's not big trouble since I simply copied the code from the engine integration, but of course it would be nicer if Cell::Base could provide this behavior out of the box, or as a mixin.\nIf you don't feel it belongs there just close the issue.\n. ",
    "kris": "http://pastie.org/private/lncnjfq86mbl8t3tyczgw\n. http://pastie.org/private/lncnjfq86mbl8t3tyczgw\n. ",
    "mckenziec": "Same problem here. This is a big issue for anyone using render_cell_for in routes. Any progress? Thanks!\n. Not to hijack anything, maybe my case will help.\n\nMy Cells are Cell::Rails derived, so I can get access to :session, etc... not Cell::Base. \n\n```\nclass ActivityCell < Cell::Rails\n```\n\nIf Cell::Rails inherits Cell::Base, and Base would normally have everything it needs to render_cell_for a Cell::Base, why would rendering a Cell::Rails not work? Is there a more appropriate way to render a Cell::Rails from a route?\n\n```\nmatch \"/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  [ 200, {}, [ Cell::Base.render_cell_for(cell_name, :display) ]]\n}\n```\n. That's a good idea actually. I guess the session could be passed to the render_cell_for from the route code. The rack.session exists in env. But the only reason I need the session is for Devise anyways. (I'm using some Devise methods, which the session is needed for)\n\n```\nmatch \"/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  [ 200, {}, [ Cell::Base.render_cell_for(cell_name, :display) ]]\n}\n```\n\nSo is this the right way to do this, or just a suggestion/work around? What about working with Devise and CanCan from within a Cell that's called from a route? (al'la AJAX JSON request) Again, not trying to hi-hack. Just adding content to a question about render_cell_for. Thanks!\n. Honestly I'm not sure what's needed for what use cases. I think we can all agree that Cell::Rails represents an ActionController pretty well when normally rendering from a regular View. But if we're talking rendering from routes, it's missing needed rack pieces for things that rely on session and request. I'm not sure what a Cell would normally use from ActionController that would be missing when using Cell::Rack. I'm not a Rails expert, this is why I'm relying on a great gem like Cells to isolate widget MVC for clean organization. Currently I'm only interested in support for Devise and CanCan from a Cell that's been called from routes, as I know it'll work when rendering it from a normal View. I don't know what might not be available otherwise. Thanks.\n. Same here. I should have offered a bribe as well. ;-) \n. @apotonick I thought you would never ask. :D I'll be online and working on and off over the weekend and into next week. Let me know when you have a build/branch and I'll try using it right away.\n. I popped the changes in and started looking at how to call it from routes.rb. The request in a ActionController seems to be an ActionDispatch::Request object. In routes.rb, I think you can create it from env like so:\n\nrequest = ActionDispatch::Request.new(env)\n\nThis is the way it's done in ActionController::Middleware::ActionMiddleware.call. Doing it this way will basically assign env. The rest of the class variables you see when debugging are available as methods when constructing your own. e.g. request.fullpath, etc... If this works out, you might want to change Rack to accept env, then construct DispatchRequest there to make routes.rb require one less line.\n\nThe problem I'm having now is using Cell::Rack properly. (be gentle) My route looks like this now:\n\n```\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ render_cell(cell_name, :display, request) ]]\n}\n```\n\nAnd my Cell looks like this:\n\n```\nclass MemberLatestLoginCell < Cell::Rack\n  include Devise::Controllers::Helpers\n  helper_method :current_member\n\n  def display(opts = { })\n    ...\n  end\nend\n```\n\nBut I'm getting: NameError (uninitialized constant Cell::Rack)\n\nI've probably screwed up adding your changes to my project. I honestly don't know if there's a proper way to test a custom or development Gem source set. I simply found the location of rails.rb (basically C:<project location>\\ruby\\1.9.1\\gems\\cells-3.8.3\\lib\\cell) and added Rack to it. (the change was clear)\n\nLet me know if I'm doing something naive please.\n. I already had cells in my Gemfile, even with the direct link to the git repo, nothing has changed. The version used from github is noted as 3.8.3. Isn't that the latest version I already had? (maybe you just didn't increment the version after changing it)\n\nI've mucked about with it too much to give you a clean picture on what I'm trying, maybe you can simply point out how I'm calling it incorrectly. In my Cell:\n        class MemberLatestLoginCell < Cell::Rack\n\nIn routes.rb:\n        match \"/dashboard/widget/:name\" => proc { |env|\n          cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n          #[ 200, {}, [ render_cell(cell_name, :display) ]]\n          request = ActionDispatch::Request.new(env)\n          [ 200, {}, [ Cell::Rack.render_cell(cell_name, :display, request) ]]\n        }\n\nWhen requesting the Cell route I get: \n    ArgumentError (wrong number of arguments (0 for 1)):\n      config/routes.rb:46:in `block (3 levels) in <top (required)>'\n\nI did a gem uninstall cells, then with the Github linked Cells gem I bundled. It still notes the version as 3.8.3.\n\nThe error is occurring on Rack: \n\n```\nclass MemberLatestLoginCell < Cell::Rack\n```\n. Found it. I don't have all the answers, but using your suggestion I still get the same Argument Error. Debug tracing deep into Rails classes can be frustrating, but I tracked the issue down to builder.rb, Cell::Builder.create_cell(*args)\n\n```\n    # Override this if you want to receive arguments right in the cell constructor.\n    def create_cell(*args)\n      new\n    end\n```\n\nThe new doesn't work for what I assume is the constructed Cell::Rack class (by name). I evaluated with new(*args) and the Cell::Rack class was constructed fine.\n\nIs there a reason why we can't use the following in all create_cell cases? I mean the *args is passed in, I'm not sure why new can't included them.\n\n```\n    # Override this if you want to receive arguments right in the cell constructor.\n    def create_cell(*args)\n      new(*args)\n    end\n```\n\nIf you think this is a fix that'll be compatible with the three Cell types, go ahead and make the change. I'll test it out with Cell::Rake.\n. So how do I override Cell::Builder.create_cell? Should it be done from Cell::Rack? (Clicked the wrong button by accident! This isn't closed! I'm wired because of the hockey game)\n. Bingo, that did it. Are you happy with the way the request is passed in? You could accept env as well or instead. I'm fine with either way.\n. Not sure. The parts I care about thus far all seem to be in place. Devise works (because the request is present) and I can access all my Models as from a normal Controller. Will you be bumping the version to 8.3.4? I'd like to go back to a fixed version gem. Thanks!\n. Still playing with the changes. Here's what I did to make sure any request parameters made their way into Cell::Rake. I also set the action with a default, that can be specified in the request parameters:\n\n```\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  parameters = request.query_parameters\n  action = parameters['action']?parameters['action'] : :display\n  [ 200, {}, [ Cell::Rack.render_cell_for(cell_name, :display, request, parameters) ]]\n}\n```\n. Same problem here. This is a big issue for anyone using render_cell_for in routes. Any progress? Thanks!\n. Not to hijack anything, maybe my case will help.\n\nMy Cells are Cell::Rails derived, so I can get access to :session, etc... not Cell::Base. \n\n```\nclass ActivityCell < Cell::Rails\n```\n\nIf Cell::Rails inherits Cell::Base, and Base would normally have everything it needs to render_cell_for a Cell::Base, why would rendering a Cell::Rails not work? Is there a more appropriate way to render a Cell::Rails from a route?\n\n```\nmatch \"/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  [ 200, {}, [ Cell::Base.render_cell_for(cell_name, :display) ]]\n}\n```\n. That's a good idea actually. I guess the session could be passed to the render_cell_for from the route code. The rack.session exists in env. But the only reason I need the session is for Devise anyways. (I'm using some Devise methods, which the session is needed for)\n\n```\nmatch \"/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  [ 200, {}, [ Cell::Base.render_cell_for(cell_name, :display) ]]\n}\n```\n\nSo is this the right way to do this, or just a suggestion/work around? What about working with Devise and CanCan from within a Cell that's called from a route? (al'la AJAX JSON request) Again, not trying to hi-hack. Just adding content to a question about render_cell_for. Thanks!\n. Honestly I'm not sure what's needed for what use cases. I think we can all agree that Cell::Rails represents an ActionController pretty well when normally rendering from a regular View. But if we're talking rendering from routes, it's missing needed rack pieces for things that rely on session and request. I'm not sure what a Cell would normally use from ActionController that would be missing when using Cell::Rack. I'm not a Rails expert, this is why I'm relying on a great gem like Cells to isolate widget MVC for clean organization. Currently I'm only interested in support for Devise and CanCan from a Cell that's been called from routes, as I know it'll work when rendering it from a normal View. I don't know what might not be available otherwise. Thanks.\n. Same here. I should have offered a bribe as well. ;-) \n. @apotonick I thought you would never ask. :D I'll be online and working on and off over the weekend and into next week. Let me know when you have a build/branch and I'll try using it right away.\n. I popped the changes in and started looking at how to call it from routes.rb. The request in a ActionController seems to be an ActionDispatch::Request object. In routes.rb, I think you can create it from env like so:\n\nrequest = ActionDispatch::Request.new(env)\n\nThis is the way it's done in ActionController::Middleware::ActionMiddleware.call. Doing it this way will basically assign env. The rest of the class variables you see when debugging are available as methods when constructing your own. e.g. request.fullpath, etc... If this works out, you might want to change Rack to accept env, then construct DispatchRequest there to make routes.rb require one less line.\n\nThe problem I'm having now is using Cell::Rack properly. (be gentle) My route looks like this now:\n\n```\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ render_cell(cell_name, :display, request) ]]\n}\n```\n\nAnd my Cell looks like this:\n\n```\nclass MemberLatestLoginCell < Cell::Rack\n  include Devise::Controllers::Helpers\n  helper_method :current_member\n\n  def display(opts = { })\n    ...\n  end\nend\n```\n\nBut I'm getting: NameError (uninitialized constant Cell::Rack)\n\nI've probably screwed up adding your changes to my project. I honestly don't know if there's a proper way to test a custom or development Gem source set. I simply found the location of rails.rb (basically C:<project location>\\ruby\\1.9.1\\gems\\cells-3.8.3\\lib\\cell) and added Rack to it. (the change was clear)\n\nLet me know if I'm doing something naive please.\n. I already had cells in my Gemfile, even with the direct link to the git repo, nothing has changed. The version used from github is noted as 3.8.3. Isn't that the latest version I already had? (maybe you just didn't increment the version after changing it)\n\nI've mucked about with it too much to give you a clean picture on what I'm trying, maybe you can simply point out how I'm calling it incorrectly. In my Cell:\n        class MemberLatestLoginCell < Cell::Rack\n\nIn routes.rb:\n        match \"/dashboard/widget/:name\" => proc { |env|\n          cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n          #[ 200, {}, [ render_cell(cell_name, :display) ]]\n          request = ActionDispatch::Request.new(env)\n          [ 200, {}, [ Cell::Rack.render_cell(cell_name, :display, request) ]]\n        }\n\nWhen requesting the Cell route I get: \n    ArgumentError (wrong number of arguments (0 for 1)):\n      config/routes.rb:46:in `block (3 levels) in <top (required)>'\n\nI did a gem uninstall cells, then with the Github linked Cells gem I bundled. It still notes the version as 3.8.3.\n\nThe error is occurring on Rack: \n\n```\nclass MemberLatestLoginCell < Cell::Rack\n```\n. Found it. I don't have all the answers, but using your suggestion I still get the same Argument Error. Debug tracing deep into Rails classes can be frustrating, but I tracked the issue down to builder.rb, Cell::Builder.create_cell(*args)\n\n```\n    # Override this if you want to receive arguments right in the cell constructor.\n    def create_cell(*args)\n      new\n    end\n```\n\nThe new doesn't work for what I assume is the constructed Cell::Rack class (by name). I evaluated with new(*args) and the Cell::Rack class was constructed fine.\n\nIs there a reason why we can't use the following in all create_cell cases? I mean the *args is passed in, I'm not sure why new can't included them.\n\n```\n    # Override this if you want to receive arguments right in the cell constructor.\n    def create_cell(*args)\n      new(*args)\n    end\n```\n\nIf you think this is a fix that'll be compatible with the three Cell types, go ahead and make the change. I'll test it out with Cell::Rake.\n. So how do I override Cell::Builder.create_cell? Should it be done from Cell::Rack? (Clicked the wrong button by accident! This isn't closed! I'm wired because of the hockey game)\n. Bingo, that did it. Are you happy with the way the request is passed in? You could accept env as well or instead. I'm fine with either way.\n. Not sure. The parts I care about thus far all seem to be in place. Devise works (because the request is present) and I can access all my Models as from a normal Controller. Will you be bumping the version to 8.3.4? I'd like to go back to a fixed version gem. Thanks!\n. Still playing with the changes. Here's what I did to make sure any request parameters made their way into Cell::Rake. I also set the action with a default, that can be specified in the request parameters:\n\n```\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  parameters = request.query_parameters\n  action = parameters['action']?parameters['action'] : :display\n  [ 200, {}, [ Cell::Rack.render_cell_for(cell_name, :display, request, parameters) ]]\n}\n```\n. ",
    "romul": "Yes, 3.8.3 works well with Rails 3.0 :+1:\n. Yes, 3.8.3 works well with Rails 3.0 :+1:\n. ",
    "Imomoi": "It's appear only when cell is loaded from cache. When cell renders without cache all works correctly.\n\nIn Rails they do `safe_concat` after getting value from cache: https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/cache_helper.rb#L36\n. hm, dunno. We are using caching since Rails 3.2 only.\n. It's appear only when cell is loaded from cache. When cell renders without cache all works correctly.\n\nIn Rails they do `safe_concat` after getting value from cache: https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/cache_helper.rb#L36\n. hm, dunno. We are using caching since Rails 3.2 only.\n. ",
    "mcrowe": "Cool. Thanks!\n. Cool. Thanks!\n. ",
    "mikesager": "Well... that was easy.  :-)  Cell::Rails did the trick.  Thank you!\n. Sure.  Pretty simple stuff.\n\nIn config/initializers/cells.rb:\n\n```\nCell::Rails.view_paths = [ Rails.root.join('app', 'cells') ]\n```\n. Well... that was easy.  :-)  Cell::Rails did the trick.  Thank you!\n. Sure.  Pretty simple stuff.\n\nIn config/initializers/cells.rb:\n\n```\nCell::Rails.view_paths = [ Rails.root.join('app', 'cells') ]\n```\n. ",
    "lulalala": "+1 for this change. Currently my generated spec files are not in the namespaced location.\n. @apotonick yep sure, sorry I was too excited that I finally find a way to do mailing cell I just rushed the pull request without the test. The next few days I'll:\n1. See if it can inherit from Cell::Rails\n2. Create demo app or test\nDo you want to change the name of this cell class?\n. Sorry, this is not my day. I made a mistake subclassing the wrong class in my demo app.\n\nThe conclusion is that inheriting from Cell::Rails does not work.\n\nIf you download my demo app https://github.com/lulalala/demo_cell , and run `Note.new_mail.deliver` in the console, you can see the error about delegation.\n\n> ActionView::Template::Error: undefined method `request' for #<Note:0x007fcf2e2a6048>\n>   from ../cells-3.8.8/lib/cell/rails.rb:9:in`request'\n\nAt compile time, delegate method looks and see if parent controller has \"request\" method or not. Since it does not, an error was raised.\n\nSo I guess my original approach of subclassing from Cell::Base is the way to do it.\n\n**UPDATE**\n\nTrying to figure out how to do tests (sorry I only used Rspec before). I guess only two things needs to be tested:\n1. Cell does not raise delegation error when rendered.\n2. Cell renders full url for asset paths.\n\nSince both of them are related to config (one to set it up and one to use it), I think one integration test will do. Any thoughts?\n. After some research, and adding tests, I have come up with two possible fixes:\n1. My original implementation of making a subclass of Cell::Base\n   https://github.com/lulalala/cells/tree/mailer-cell-with-test\n2. Just conditionally delegate methods to parent controller if it exists:\n   https://github.com/lulalala/cells/tree/action-mailer-compatible\n\nI am more inclined for the second solution now. It is simpler and user does not have to remember sub-classing the correct class - you always subclass Cell::Rails.\n\nWhat do you think?\n. Bump~ could you take a look?\n. If request delegation is gone I guess that would solve the issue (but I wonder how you solve the problem of generating full urls (don't you needed request in order to do that?)).\n\nMy two branches both contains tests. You can use the new test in https://github.com/lulalala/cells/tree/action-mailer-compatible to see if it works or not.\n. Sorry I just got back from holiday. Anyways it is the cells-4 branch right? Let me apply the test and see if it works.\n. Oh it's pretty good :D NY is awesome~~\nOkay thanks for letting me know :D\n. Same here for erb here:\n\n```\n<% form_for(model) do |f| %>\n<% end %>\n```\n\nShould I open another issue for ERB? I am not sure if it is the same issue.\n. +1 for this change. Currently my generated spec files are not in the namespaced location.\n. @apotonick yep sure, sorry I was too excited that I finally find a way to do mailing cell I just rushed the pull request without the test. The next few days I'll:\n1. See if it can inherit from Cell::Rails\n2. Create demo app or test\nDo you want to change the name of this cell class?\n. Sorry, this is not my day. I made a mistake subclassing the wrong class in my demo app.\n\nThe conclusion is that inheriting from Cell::Rails does not work.\n\nIf you download my demo app https://github.com/lulalala/demo_cell , and run `Note.new_mail.deliver` in the console, you can see the error about delegation.\n\n> ActionView::Template::Error: undefined method `request' for #<Note:0x007fcf2e2a6048>\n>   from ../cells-3.8.8/lib/cell/rails.rb:9:in`request'\n\nAt compile time, delegate method looks and see if parent controller has \"request\" method or not. Since it does not, an error was raised.\n\nSo I guess my original approach of subclassing from Cell::Base is the way to do it.\n\n**UPDATE**\n\nTrying to figure out how to do tests (sorry I only used Rspec before). I guess only two things needs to be tested:\n1. Cell does not raise delegation error when rendered.\n2. Cell renders full url for asset paths.\n\nSince both of them are related to config (one to set it up and one to use it), I think one integration test will do. Any thoughts?\n. After some research, and adding tests, I have come up with two possible fixes:\n1. My original implementation of making a subclass of Cell::Base\n   https://github.com/lulalala/cells/tree/mailer-cell-with-test\n2. Just conditionally delegate methods to parent controller if it exists:\n   https://github.com/lulalala/cells/tree/action-mailer-compatible\n\nI am more inclined for the second solution now. It is simpler and user does not have to remember sub-classing the correct class - you always subclass Cell::Rails.\n\nWhat do you think?\n. Bump~ could you take a look?\n. If request delegation is gone I guess that would solve the issue (but I wonder how you solve the problem of generating full urls (don't you needed request in order to do that?)).\n\nMy two branches both contains tests. You can use the new test in https://github.com/lulalala/cells/tree/action-mailer-compatible to see if it works or not.\n. Sorry I just got back from holiday. Anyways it is the cells-4 branch right? Let me apply the test and see if it works.\n. Oh it's pretty good :D NY is awesome~~\nOkay thanks for letting me know :D\n. Same here for erb here:\n\n```\n<% form_for(model) do |f| %>\n<% end %>\n```\n\nShould I open another issue for ERB? I am not sure if it is the same issue.\n. ",
    "pgaertig": "It is done now https://github.com/apotonick/rspec-cells/pull/19 . I did a basic test with real app - just running rspec, but please @lulalala test it with yours as well.\n. @francescoagati +1 to cells+celluloid example project\n. It is done now https://github.com/apotonick/rspec-cells/pull/19 . I did a basic test with real app - just running rspec, but please @lulalala test it with yours as well.\n. @francescoagati +1 to cells+celluloid example project\n. ",
    "grasp": " UsersHelper is inside app/heplers/ruser/users_helpers so as topic helper.\n\n And cell is on app/cells\n. work around  this issue.\n\nclass BaseCell < Cell::Rails\ninclude Ruser::UsersHeper\n\nend\n\nrails himself also need include helper in controller class.\n.  UsersHelper is inside app/heplers/ruser/users_helpers so as topic helper.\n\n And cell is on app/cells\n. work around  this issue.\n\nclass BaseCell < Cell::Rails\ninclude Ruser::UsersHeper\n\nend\n\nrails himself also need include helper in controller class.\n. ",
    "joecorcoran": "Two commits to change the code, three commits to change the README. Bloody syntax highlighting!\n. Two commits to change the code, three commits to change the README. Bloody syntax highlighting!\n. ",
    "duhmojo": "I'm down with that. A Cell:Rack would mean we would have a clear, separate Cell to inherit from that would be likely compatible with anyother Controller gem, like Devise, we might need. For lighter Cells there's always Base and Rails.\n. I'm down with that. A Cell:Rack would mean we would have a clear, separate Cell to inherit from that would be likely compatible with anyother Controller gem, like Devise, we might need. For lighter Cells there's always Base and Rails.\n. ",
    "twetzel": "please change Readme to:\n\n```\nclass PostCell < Cell::Rack\n..\n```\n\nIn your routes.rb file, mount the cell like a Rack app.\n\n```\nmatch \"/posts\" => proc { |env|\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ Cell::Base.render_cell_for(:post, :show, request) ]]\n}\n```\n\n.. takes a while to find that solution\n. please change Readme to:\n\n```\nclass PostCell < Cell::Rack\n..\n```\n\nIn your routes.rb file, mount the cell like a Rack app.\n\n```\nmatch \"/posts\" => proc { |env|\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ Cell::Base.render_cell_for(:post, :show, request) ]]\n}\n```\n\n.. takes a while to find that solution\n. ",
    "kikorb": "Hi,\n\nI think doing this\n\n``` ruby\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ Cell::Rack.render_cell_for(cell_name, :display, request) ]]\n}\n```\n\nNo longer works since the third param is actually expecting a controller and not a request object (In fact you can get undefined method request for request object)\n\nThe solution I found is to do this:\n\n``` ruby\nmatch \"/posts\" => proc { |env|\n  controller = ActionController::Base.new\n  controller.request = ActionDispatch::Request.new(env)\n\n  [ 200, {}, [ Cell::Rack.render_cell_for(:post, :show, controller, controller.request.query_parameters) ]]\n}\n```\n\nBy doing this your cell can be a Cell::Rails and you will be able to mount it in the routes.\nI have writed about this [here](http://www.kikorb.com/rails/cells/routes/2015/05/19/mounting-rails-cells-in-rails-routes.html)\n. I hope is not too late I found that you can do it like this:\n\n```\nmatch \"/posts\" => proc { |env|\n  controller = ActionController::Base.new\n  controller.request = ActionDispatch::Request.new(env)\n\n  [ 200, {}, [ Cell::Rack.render_cell_for(:post, :show, controller, controller.request.query_parameters) ]]\n}\n```\n\nBasically providing an empty controller with the necessary request object\n. Hi,\n\nI think doing this\n\n``` ruby\nmatch \"/dashboard/widget/:name\" => proc { |env|\n  cell_name = env[\"action_dispatch.request.path_parameters\"][:name]\n  request = ActionDispatch::Request.new(env)\n  [ 200, {}, [ Cell::Rack.render_cell_for(cell_name, :display, request) ]]\n}\n```\n\nNo longer works since the third param is actually expecting a controller and not a request object (In fact you can get undefined method request for request object)\n\nThe solution I found is to do this:\n\n``` ruby\nmatch \"/posts\" => proc { |env|\n  controller = ActionController::Base.new\n  controller.request = ActionDispatch::Request.new(env)\n\n  [ 200, {}, [ Cell::Rack.render_cell_for(:post, :show, controller, controller.request.query_parameters) ]]\n}\n```\n\nBy doing this your cell can be a Cell::Rails and you will be able to mount it in the routes.\nI have writed about this [here](http://www.kikorb.com/rails/cells/routes/2015/05/19/mounting-rails-cells-in-rails-routes.html)\n. I hope is not too late I found that you can do it like this:\n\n```\nmatch \"/posts\" => proc { |env|\n  controller = ActionController::Base.new\n  controller.request = ActionDispatch::Request.new(env)\n\n  [ 200, {}, [ Cell::Rack.render_cell_for(:post, :show, controller, controller.request.query_parameters) ]]\n}\n```\n\nBasically providing an empty controller with the necessary request object\n. ",
    "bmaland": "Indeed, it seems to work correctly when `html_safe` is commented out! `html_safe` in isolation in rails console doesn't mess up encodings though, so I'll have to dig deeper\n. For the record, this still doesn't work on JRuby. I'm using Rails 3.2 as well.\n. I did, see https://gist.github.com/2470557 and search for utf8.\n\nThe test fails for me on both JRuby 1.6.7 and JRuby-head (in 1.9 mode), and passes on 1.9.2 and 1.9.3.\n. Indeed, it seems to work correctly when `html_safe` is commented out! `html_safe` in isolation in rails console doesn't mess up encodings though, so I'll have to dig deeper\n. For the record, this still doesn't work on JRuby. I'm using Rails 3.2 as well.\n. I did, see https://gist.github.com/2470557 and search for utf8.\n\nThe test fails for me on both JRuby 1.6.7 and JRuby-head (in 1.9 mode), and passes on 1.9.2 and 1.9.3.\n. ",
    "skyeagle": "I've had same issue and only with caching in cells.\nRuby 1.9.3p-125\n\n``` ruby\ncache_store = :dalli_store\n```\n\nand the exception:\n\n``` ruby\nincompatible character encodings: ASCII-8BIT and UTF-8\n```\n. I am using 3-2-stable branch. My investigation shows that this behaviour oc\u0441urs only with 3.8.3 version but not with master branch of cells. It means that html_safe isn't the main problem and it has already been fixed. :)\n. First of all thank you for releasing a new gem version. But there is something strange. In case when I use master branch in Gemfile all works fine but when it's the latest gem 3.8.4 I've got an error:\n\n```\n undefined method cache for XxxCell:Class\n```\n\nIn the first case Gemfile.lock looks like:\n\n```\n remote: git://github.com/apotonick/cells.git\n revision: 6cb055ad9e207ecc46381e667cbc34f55e888241\n specs:\n   cells (3.8.4)\n     actionpack (~> 3.0)\n     railties (~> 3.0)\n```\n\nwhen gem is bundled:\n\n```\n   cells (3.8.4)\n     actionpack (~> 3.0)\n     railties (~> 3.0)\n```\n\nAny thoughts?\n. Everything is ok. Nice job. Thank you.\n. I've had same issue and only with caching in cells.\nRuby 1.9.3p-125\n\n``` ruby\ncache_store = :dalli_store\n```\n\nand the exception:\n\n``` ruby\nincompatible character encodings: ASCII-8BIT and UTF-8\n```\n. I am using 3-2-stable branch. My investigation shows that this behaviour oc\u0441urs only with 3.8.3 version but not with master branch of cells. It means that html_safe isn't the main problem and it has already been fixed. :)\n. First of all thank you for releasing a new gem version. But there is something strange. In case when I use master branch in Gemfile all works fine but when it's the latest gem 3.8.4 I've got an error:\n\n```\n undefined method cache for XxxCell:Class\n```\n\nIn the first case Gemfile.lock looks like:\n\n```\n remote: git://github.com/apotonick/cells.git\n revision: 6cb055ad9e207ecc46381e667cbc34f55e888241\n specs:\n   cells (3.8.4)\n     actionpack (~> 3.0)\n     railties (~> 3.0)\n```\n\nwhen gem is bundled:\n\n```\n   cells (3.8.4)\n     actionpack (~> 3.0)\n     railties (~> 3.0)\n```\n\nAny thoughts?\n. Everything is ok. Nice job. Thank you.\n. ",
    "ajlai": "What's left to be done to fix this? Would love to get rid of the warning on our rails app as well...\n. What's left to be done to fix this? Would love to get rid of the warning on our rails app as well...\n. ",
    "steveh": "For anyone that stumbles across this issue, a hacky workaround is to use Rails.application.routes.url_helpers directly.\n. It seems to be, yes - it looks like the engine scope overrides the main_app scope. I plan on doing more hunting once I've got another task out of the way\n. For anyone that stumbles across this issue, a hacky workaround is to use Rails.application.routes.url_helpers directly.\n. It seems to be, yes - it looks like the engine scope overrides the main_app scope. I plan on doing more hunting once I've got another task out of the way\n. ",
    "bleonard": "any progress on this by chance?\n. any progress on this by chance?\n. ",
    "bikramwp": "Yes, tied to 2.3 unfortunately.\n. Yes, tied to 2.3 unfortunately.\n. ",
    "bitcababy": "I think it's a problem with rails_cells, not cells.\n. I think it's a problem with rails_cells, not cells.\n. ",
    "thedanielhanke": "Wrong Timezone :D ( sorry, just had to laught about that comment :) )\n. i had the same issue when calling  `= cell(:foo, model)` instead of (really!) `=cell(:foo, model).()`\n. @apotonick sorry for the delay. it does not happen anymore, iirc it was a result of slim, caching and omitting `.()` but i cannot reproduce it now. \n. :+1: i prefer a more explicit writing anyway. `:foo` is more magical than `Foo::Cell`.\n. then why keeping it?\n. new major is always a good time to kick out the known devils. \nif that hurts, add a convenience-wrapper,  but dont bother too much about compatilibity, fame money and bi***es,  its still ruby ;)\n. Wrong Timezone :D ( sorry, just had to laught about that comment :) )\n. i had the same issue when calling  `= cell(:foo, model)` instead of (really!) `=cell(:foo, model).()`\n. @apotonick sorry for the delay. it does not happen anymore, iirc it was a result of slim, caching and omitting `.()` but i cannot reproduce it now. \n. :+1: i prefer a more explicit writing anyway. `:foo` is more magical than `Foo::Cell`.\n. then why keeping it?\n. new major is always a good time to kick out the known devils. \nif that hurts, add a convenience-wrapper,  but dont bother too much about compatilibity, fame money and bi***es,  its still ruby ;)\n. ",
    "Startouf": "Hey I was actually expecting this cascade behavior to be available already and I'm quite missing it for my application.\r\n\r\nFor big inheritance scheme, it made more sense to me to split the builder into multiple builders instead of one giant builder at the root.\r\n\r\nIn some case it might event make sense to have recursive builders cause it would let us select better \"cell routing\". Here's an example\r\n\r\n```\r\nclass StatusCell < DefaultCell\r\n  builds do |model|\r\n    model.vip? ? VIPStatusCell::Cell : NormalStatusCell\r\n  end\r\nend\r\n\r\nclass VIPStatusCell < StatusCell\r\n  builds do |model|\r\n    case model.status\r\n      when :hungry; VIPStatusCell::Hungry # A cell with lots of tasty and expensive food\r\n      when :sleepy, :sleeping; VIPStatusCell::Sleepy # A cell with a very confortable bed\r\n    end\r\n  end\r\nend\r\nclass VIPStatusCell::Hungry < VIPStatusCell; ...; end\r\nclass VIPStatusCell::Sleepy < VIPStatusCell; ...; end\r\n\r\nclass NormalStatusCell < StatusCell\r\n  build do |model|\r\n    case model.status\r\n      when :hungry; NormalStatusCell::Hungry    # A cell with affordable food\r\n      when :sleepy, :sleeping; SleepyStatusCell::Sleepy # A cell with a simple bed\r\n  end\r\nend\r\nclass NormalStatusCell::Hungry < NormalStatusCell; ...; end\r\nclass NormalStatusCell::Sleepy < NormalStatusCell; ...; end\r\n```\r\nWith recursive builders there would be a difference between calling `:normal_status_cell` and `status_cell` in the following example\r\n\r\n```\r\n# Suppose the current_user might be a VIP and might want to travel incognito\r\n\r\n# incognito_travel.html.erb\r\n<%= cell(:normal_status_cell, current_user) %>\r\n\r\n# normal_travel.html.erb\r\n<%= cell(:status_cell, current_user %>\r\n```. Hello there, \nSorry to come here after the battle, I also wish to use Cocoon with cells, but when using @ryan2johnson9's last fix, I run into one more issue. It seems that the partial name is not resolved correctly, and instead the library keeps looking for a `render_state.erb` file instead of the right file.\n\n`Template missing: view:`render_state.erb`prefixes: [\"app/cells/company\", \"app/cells/default\"]`\n\n(Instead of \"app/cells/company/dashboard.erb\")\n\nI am defining the new `render` override in a `default_cell.rb` which is then inherited by other cells.\n\nI am rendering a custom action `dashboard` of my CompanyCell\n\n``` ruby\n# app/cells/default_cell.rb\nrequire \"cell/partial\"\n\nclass DefaultCell < Cell::ViewModel\n  # include ActionView::Helpers\n  include SimpleEnum::ViewHelpers\n  include ActionView::Helpers::TranslationHelper\n  include ActionView::Helpers::FormHelper\n  include ActionView::Helpers::FormOptionsHelper\n  include Cocoon::ViewHelpers\n  include ::TranslationHelper\n  include BootstrapHelper\n  include Partial\n\n  def render(options = nil, locals = nil, &block)\n    # @ryan2johnson9's last fix\n    #CASE 1 Cell calls render without arguments\n    if options.nil?\n      super(state_for_implicit_render(caller))\n\n    #Case 2 Cell calls render with either the name of a view or a single optios Hash as its paramater\n    elsif options.present? && locals.nil?\n      super options\n\n    #Case 3 render is called by Cocoon, intended for ActionView::Helpers::RenderingHelper so massage params such that Cells render can handle it\n    elsif options.is_a?(String) && locals.is_a?(Hash)\n      if block_given?\n        raise \"sorry don't know how to handle block in this custom override - ryan - see app/cells/location_variable_cell.rb:32\"\n      end\n      super({view: options, locals: locals})\n    else\n      raise \"Woops, this overriding render method written so that we could make use of Cocoon in Cells did not handle a render call properly, please see app/cells/location_variable_cell.rb\"\n    end\n  end\n\n# app/cells/company_cell.rb\nclass CompanyCell < DefaultCell\n  def dashboard\n    render\n  end\n```\n\nThe error happens on the call `super(state_for_implicit_render(caller))`\n\nRelevant stack trace\n\n```\nC:/dev/Ruby22-x64/lib/ruby/gems/2.2.0/gems/cells-4.0.4/lib/cell/view_model.rb:182:in `find_template'\nC:/dev/Ruby22-x64/lib/ruby/gems/2.2.0/gems/cells-4.0.4/lib/cell/view_model.rb:112:in `render_to_string'\nC:/dev/Ruby22-x64/lib/ruby/gems/2.2.0/gems/cells-4.0.4/lib/cell/view_model.rb:107:in `render'\napp/cells/default_cell.rb:23:in `render'\napp/cells/company_cell.rb:3:in `dashboard'\n```\n\nI am using cells (4.0.4), RoR 5.0.0beta3\n\nOtherwise, @apotonick you mentionned working on a proper Cocoon implementation for cells, any update on that ?\n. Oh sorry, read too fast and I was inaccurate. I was reffering to this, but indeed nothing especially concerning Cocoon\n\n> Ideally, Cocoon would use Cells to render its elements in general. I am about to write a new form builder based on Cells, maybe that can be source of inspiration?\n\nHowever I see there has been a new comment concerning this in the [associated issue of the Cocoon issue tracker](https://github.com/nathanvda/cocoon/issues/315)  . Apparently someone is working on appropriate Cocoon helpers to be included in Cells\nI will look at this commit from @asaletnik [\"add separate helpers for cells, with proper render method call\"](https://github.com/asaletnik/cocoon/commit/7c864f85c892fe21feeead09933f751e6773bdf6) \n. Ah yes, because I was using a variety of helpers, I thought I could just brute-include all helpers now and then take some time later to only include the ones I needed. But yes, it seems one Helper is overriding the render method defined for your library.\n\n```\n# Full Trace, first 2 lines\nC:/dev/Ruby22-x64/lib/ruby/gems/2.2.0/gems/actionview-5.0.0.beta3/lib/action_view/helpers/rendering_helper.rb:32:in `render'\napp/cells/professional_cell.rb:11:in `show'\n```\n\nSo I guess there's no help including them one by one until I get rid of all errors ? Or I _could_ include [all those rails helpers](http://api.rubyonrails.org/classes/ActionView/Helpers.html) except the `rendering_helper` one ?\n. Same problem for cell context inspection (new feature in cells 4.1). \n\n`cell(:song, song, context: { current_user: current_user })`\n\nTrying to debug the context of a cell `self.context`is very hard.\n. I'm getting some weird error as well after the 4.1 migration\n\n`undefined method builds for TaskCell:Class`\n\n`builds` as in `builds do |model|`\n\nSeems like 4.1 needs some debugging :P\n\nEDIT : Moving to #397\n. me too!\n\n:P\n. Well I guess I'll be using the code from that commit until it is merged to the main branch, because I really need that.\n. Hey, \nI believe the methods were tightly coupled to the rest of autocomplete classes, so I ended up creating an autocomplete helper especially for cells where I basically sort of copy pasted the relevant autocomplete code\n\n``` ruby\ndef rewrite_autocomplete_option(options)\n    options[\"data-autocomplete-fields\"] = JSON.generate(options.delete :fields) if options[:fields]\n    options[\"data-update-elements\"] = JSON.generate(options.delete :update_elements) if options[:update_elements]\n    options[\"data-id-element\"] = options.delete :id_element if options[:id_element]\n    options[\"data-append-to\"] = options.delete :append_to if options[:append_to]\n    options\n  end\n```\n\nI also wrote my own form helper on top of that\n\n``` ruby\n# Produces an autocomplete field that can populate an id element\n  # = Params\n  # +association+ - symbol for the association\n  # +path+ - url used for getting autocompletion results\n  # = Options\n  # +:autocomplete+ - default to false (the html_option autocompletes from previous output)\n  # +:id_element+ - change the populated id field, or set to nil to do nothing\n  def autocomplete_association(f, association, path, options={})\n    # Da magic regexp\n    id_element = \"##{f.object_name}[#{association.to_s}_id]\".gsub(/(\\])?\\[/, \"_\").chop\n    options[:autocomplete] ||= false\n    options[:id_element] ||= id_element\n    capture do\n      concat f.hidden_field(\"#{association.to_s}_id\")\n      concat f.autocomplete_field(association, path, options)\n    end\n  end\n```\n\nSo then I could call the autocompleter easily in my views\n\n```\n<%= autocomplete_association(f, :main_school, autocomplete_school_path, value: f.object.main_school_name,\n            placeholder: t(:add_school_placeholder),\n            class: 'form-control')\n        end %>\n```\n\n...which would fill both the field with the visual name for the user, and the hidden id field with the id element for database saving purposes.\n. @gaggle The new issue you raised seem to concern only HAML but I am using ERB. No problems here anyways. Don't forget to include cells-rails (Cells hacks for Rails) and cells-(Haml/erb) into your Gemfile.\n\nAmongst others, I have \n\n```\ninclude ActionView::Helpers::FormHelper\ninclude ActionView::Helpers::FormOptionsHelper\ninclude AbstractController::Helpers\n```\n\ninside cells that need forms\n. The include was definitely missing but then you removed the alignment of the `is_a?`which feels less clean now.\r\n\r\nActually instead of the `if else`, although I usually don't like that, the builder is probable the only place where using a case syntax feels nicer\r\n\r\n```ruby\r\nbuilds do |model, options|\r\n  case model\r\n  when Post; PostCell\r\n  when Comment; CommentCell\r\n  end\r\nend\r\n```. Hey I was actually expecting this cascade behavior to be available already and I'm quite missing it for my application.\r\n\r\nFor big inheritance scheme, it made more sense to me to split the builder into multiple builders instead of one giant builder at the root.\r\n\r\nIn some case it might event make sense to have recursive builders cause it would let us select better \"cell routing\". Here's an example\r\n\r\n```\r\nclass StatusCell < DefaultCell\r\n  builds do |model|\r\n    model.vip? ? VIPStatusCell::Cell : NormalStatusCell\r\n  end\r\nend\r\n\r\nclass VIPStatusCell < StatusCell\r\n  builds do |model|\r\n    case model.status\r\n      when :hungry; VIPStatusCell::Hungry # A cell with lots of tasty and expensive food\r\n      when :sleepy, :sleeping; VIPStatusCell::Sleepy # A cell with a very confortable bed\r\n    end\r\n  end\r\nend\r\nclass VIPStatusCell::Hungry < VIPStatusCell; ...; end\r\nclass VIPStatusCell::Sleepy < VIPStatusCell; ...; end\r\n\r\nclass NormalStatusCell < StatusCell\r\n  build do |model|\r\n    case model.status\r\n      when :hungry; NormalStatusCell::Hungry    # A cell with affordable food\r\n      when :sleepy, :sleeping; SleepyStatusCell::Sleepy # A cell with a simple bed\r\n  end\r\nend\r\nclass NormalStatusCell::Hungry < NormalStatusCell; ...; end\r\nclass NormalStatusCell::Sleepy < NormalStatusCell; ...; end\r\n```\r\nWith recursive builders there would be a difference between calling `:normal_status_cell` and `status_cell` in the following example\r\n\r\n```\r\n# Suppose the current_user might be a VIP and might want to travel incognito\r\n\r\n# incognito_travel.html.erb\r\n<%= cell(:normal_status_cell, current_user) %>\r\n\r\n# normal_travel.html.erb\r\n<%= cell(:status_cell, current_user %>\r\n```. Hello there, \nSorry to come here after the battle, I also wish to use Cocoon with cells, but when using @ryan2johnson9's last fix, I run into one more issue. It seems that the partial name is not resolved correctly, and instead the library keeps looking for a `render_state.erb` file instead of the right file.\n\n`Template missing: view:`render_state.erb`prefixes: [\"app/cells/company\", \"app/cells/default\"]`\n\n(Instead of \"app/cells/company/dashboard.erb\")\n\nI am defining the new `render` override in a `default_cell.rb` which is then inherited by other cells.\n\nI am rendering a custom action `dashboard` of my CompanyCell\n\n``` ruby\n# app/cells/default_cell.rb\nrequire \"cell/partial\"\n\nclass DefaultCell < Cell::ViewModel\n  # include ActionView::Helpers\n  include SimpleEnum::ViewHelpers\n  include ActionView::Helpers::TranslationHelper\n  include ActionView::Helpers::FormHelper\n  include ActionView::Helpers::FormOptionsHelper\n  include Cocoon::ViewHelpers\n  include ::TranslationHelper\n  include BootstrapHelper\n  include Partial\n\n  def render(options = nil, locals = nil, &block)\n    # @ryan2johnson9's last fix\n    #CASE 1 Cell calls render without arguments\n    if options.nil?\n      super(state_for_implicit_render(caller))\n\n    #Case 2 Cell calls render with either the name of a view or a single optios Hash as its paramater\n    elsif options.present? && locals.nil?\n      super options\n\n    #Case 3 render is called by Cocoon, intended for ActionView::Helpers::RenderingHelper so massage params such that Cells render can handle it\n    elsif options.is_a?(String) && locals.is_a?(Hash)\n      if block_given?\n        raise \"sorry don't know how to handle block in this custom override - ryan - see app/cells/location_variable_cell.rb:32\"\n      end\n      super({view: options, locals: locals})\n    else\n      raise \"Woops, this overriding render method written so that we could make use of Cocoon in Cells did not handle a render call properly, please see app/cells/location_variable_cell.rb\"\n    end\n  end\n\n# app/cells/company_cell.rb\nclass CompanyCell < DefaultCell\n  def dashboard\n    render\n  end\n```\n\nThe error happens on the call `super(state_for_implicit_render(caller))`\n\nRelevant stack trace\n\n```\nC:/dev/Ruby22-x64/lib/ruby/gems/2.2.0/gems/cells-4.0.4/lib/cell/view_model.rb:182:in `find_template'\nC:/dev/Ruby22-x64/lib/ruby/gems/2.2.0/gems/cells-4.0.4/lib/cell/view_model.rb:112:in `render_to_string'\nC:/dev/Ruby22-x64/lib/ruby/gems/2.2.0/gems/cells-4.0.4/lib/cell/view_model.rb:107:in `render'\napp/cells/default_cell.rb:23:in `render'\napp/cells/company_cell.rb:3:in `dashboard'\n```\n\nI am using cells (4.0.4), RoR 5.0.0beta3\n\nOtherwise, @apotonick you mentionned working on a proper Cocoon implementation for cells, any update on that ?\n. Oh sorry, read too fast and I was inaccurate. I was reffering to this, but indeed nothing especially concerning Cocoon\n\n> Ideally, Cocoon would use Cells to render its elements in general. I am about to write a new form builder based on Cells, maybe that can be source of inspiration?\n\nHowever I see there has been a new comment concerning this in the [associated issue of the Cocoon issue tracker](https://github.com/nathanvda/cocoon/issues/315)  . Apparently someone is working on appropriate Cocoon helpers to be included in Cells\nI will look at this commit from @asaletnik [\"add separate helpers for cells, with proper render method call\"](https://github.com/asaletnik/cocoon/commit/7c864f85c892fe21feeead09933f751e6773bdf6) \n. Ah yes, because I was using a variety of helpers, I thought I could just brute-include all helpers now and then take some time later to only include the ones I needed. But yes, it seems one Helper is overriding the render method defined for your library.\n\n```\n# Full Trace, first 2 lines\nC:/dev/Ruby22-x64/lib/ruby/gems/2.2.0/gems/actionview-5.0.0.beta3/lib/action_view/helpers/rendering_helper.rb:32:in `render'\napp/cells/professional_cell.rb:11:in `show'\n```\n\nSo I guess there's no help including them one by one until I get rid of all errors ? Or I _could_ include [all those rails helpers](http://api.rubyonrails.org/classes/ActionView/Helpers.html) except the `rendering_helper` one ?\n. Same problem for cell context inspection (new feature in cells 4.1). \n\n`cell(:song, song, context: { current_user: current_user })`\n\nTrying to debug the context of a cell `self.context`is very hard.\n. I'm getting some weird error as well after the 4.1 migration\n\n`undefined method builds for TaskCell:Class`\n\n`builds` as in `builds do |model|`\n\nSeems like 4.1 needs some debugging :P\n\nEDIT : Moving to #397\n. me too!\n\n:P\n. Well I guess I'll be using the code from that commit until it is merged to the main branch, because I really need that.\n. Hey, \nI believe the methods were tightly coupled to the rest of autocomplete classes, so I ended up creating an autocomplete helper especially for cells where I basically sort of copy pasted the relevant autocomplete code\n\n``` ruby\ndef rewrite_autocomplete_option(options)\n    options[\"data-autocomplete-fields\"] = JSON.generate(options.delete :fields) if options[:fields]\n    options[\"data-update-elements\"] = JSON.generate(options.delete :update_elements) if options[:update_elements]\n    options[\"data-id-element\"] = options.delete :id_element if options[:id_element]\n    options[\"data-append-to\"] = options.delete :append_to if options[:append_to]\n    options\n  end\n```\n\nI also wrote my own form helper on top of that\n\n``` ruby\n# Produces an autocomplete field that can populate an id element\n  # = Params\n  # +association+ - symbol for the association\n  # +path+ - url used for getting autocompletion results\n  # = Options\n  # +:autocomplete+ - default to false (the html_option autocompletes from previous output)\n  # +:id_element+ - change the populated id field, or set to nil to do nothing\n  def autocomplete_association(f, association, path, options={})\n    # Da magic regexp\n    id_element = \"##{f.object_name}[#{association.to_s}_id]\".gsub(/(\\])?\\[/, \"_\").chop\n    options[:autocomplete] ||= false\n    options[:id_element] ||= id_element\n    capture do\n      concat f.hidden_field(\"#{association.to_s}_id\")\n      concat f.autocomplete_field(association, path, options)\n    end\n  end\n```\n\nSo then I could call the autocompleter easily in my views\n\n```\n<%= autocomplete_association(f, :main_school, autocomplete_school_path, value: f.object.main_school_name,\n            placeholder: t(:add_school_placeholder),\n            class: 'form-control')\n        end %>\n```\n\n...which would fill both the field with the visual name for the user, and the hidden id field with the id element for database saving purposes.\n. @gaggle The new issue you raised seem to concern only HAML but I am using ERB. No problems here anyways. Don't forget to include cells-rails (Cells hacks for Rails) and cells-(Haml/erb) into your Gemfile.\n\nAmongst others, I have \n\n```\ninclude ActionView::Helpers::FormHelper\ninclude ActionView::Helpers::FormOptionsHelper\ninclude AbstractController::Helpers\n```\n\ninside cells that need forms\n. The include was definitely missing but then you removed the alignment of the `is_a?`which feels less clean now.\r\n\r\nActually instead of the `if else`, although I usually don't like that, the builder is probable the only place where using a case syntax feels nicer\r\n\r\n```ruby\r\nbuilds do |model, options|\r\n  case model\r\n  when Post; PostCell\r\n  when Comment; CommentCell\r\n  end\r\nend\r\n```. ",
    "ivanyv": "I tried (Slim):\n\n```\n= cell :cell, nil, content: -> do\n  h1 Blah\n```\n\nThen on the cell view:\n\n```\n= @options[:content].call\n```\n\nBut that outputs the content twice, once before the cell's HTML. If I do `-` instead of `=` then just the content on the wrong place is rendered.\n. Found a not so neat workaround:\n\n```\n= cell :cell, nil, content: -> do\n  - capture do\n    h1 Blah\n```\n. I tried (Slim):\n\n```\n= cell :cell, nil, content: -> do\n  h1 Blah\n```\n\nThen on the cell view:\n\n```\n= @options[:content].call\n```\n\nBut that outputs the content twice, once before the cell's HTML. If I do `-` instead of `=` then just the content on the wrong place is rendered.\n. Found a not so neat workaround:\n\n```\n= cell :cell, nil, content: -> do\n  - capture do\n    h1 Blah\n```\n. ",
    "jandudulski": "Thanks, works! What can I do if I need url helpers also? \n. http://www.simonecarletti.com/blog/2009/10/actionmailer-and-host-value/ this helps.\n. Good idea, will do it.\n. Thanks, works! What can I do if I need url helpers also? \n. http://www.simonecarletti.com/blog/2009/10/actionmailer-and-host-value/ this helps.\n. Good idea, will do it.\n. ",
    "hasghari": "Even though my cell inherited from `Cell::Base`, I was still getting the following exception when using url helpers:\n\n```\nMissing host to link to! Please provide the :host parameter, set default_url_options[:host], or set :only_path to true\n```\n\nThis is due to the fact that cells initializes the value of the class attribute `default_url_options` to an empty hash. In my case it made sense to set that to the default mailer options instead so I added this snippet to my `application.rb` file:\n\n``` ruby\nconfig.after_initialize do\n  Cell::Base.default_url_options = config.action_mailer.default_url_options\nend\n```\n. Even though my cell inherited from `Cell::Base`, I was still getting the following exception when using url helpers:\n\n```\nMissing host to link to! Please provide the :host parameter, set default_url_options[:host], or set :only_path to true\n```\n\nThis is due to the fact that cells initializes the value of the class attribute `default_url_options` to an empty hash. In my case it made sense to set that to the default mailer options instead so I added this snippet to my `application.rb` file:\n\n``` ruby\nconfig.after_initialize do\n  Cell::Base.default_url_options = config.action_mailer.default_url_options\nend\n```\n. ",
    "travisbot": "This pull request [passes](http://travis-ci.org/apotonick/cells/builds/2153727) (merged e3fa9611 into cc2ea594).\n. This pull request [passes](http://travis-ci.org/apotonick/cells/builds/2153727) (merged e3fa9611 into cc2ea594).\n. ",
    "fgrehm": "I ended up doing something like that :-) I just wanted to know your ideas about it. Tks!\n. I ended up doing something like that :-) I just wanted to know your ideas about it. Tks!\n. ",
    "manic": "I agree with EnotPoloskun and I think it's very helpful because I have same issues when I have a helper using cookies.\n. I agree with EnotPoloskun and I think it's very helpful because I have same issues when I have a helper using cookies.\n. ",
    "ermolaev": "it not worked in rails4\n\n``` ruby\nprivate method `cookies` called for #<ProductsController:0xcbc73b4>\n```\n\nfor this code\n\n``` ruby\nclass ApplicationCell < Cell::Rails\n\n  helper_method :cookies\n\n  private\n\n  def cookies\n    parent_controller.cookies\n  end\nend\n```\n\nI use\n\n``` ruby\nparent_controller.send(:cookies)\n```\n. it not worked in rails4\n\n``` ruby\nprivate method `cookies` called for #<ProductsController:0xcbc73b4>\n```\n\nfor this code\n\n``` ruby\nclass ApplicationCell < Cell::Rails\n\n  helper_method :cookies\n\n  private\n\n  def cookies\n    parent_controller.cookies\n  end\nend\n```\n\nI use\n\n``` ruby\nparent_controller.send(:cookies)\n```\n. ",
    "PikachuEXE": "That would be great!\nMass assignment > `@var = var`\n. Any update on this new feature? ;)\n. If you have enough to talk, do it :D\n\nBe sure to post the link here also!\n. I am already using Concept cell, no need for this :D\n. Or should I use different \"states\" of a cell? like:\n\n``` ruby\nclass AvatarCell < Cell::Rails\n  BASE_CLASS = \"mod-avatar\"\n\n  def default(options = {})\n    prepare(options)\n\n    render\n  end\n\n  def linked(options = {})\n    prepare(options)\n\n    render\n  end\n\n  protected\n\n  def prepare(options)\n    @user = options[:user]\n    @size = options[:size] || :large\n\n    @all_classes = [BASE_CLASS, options[:class]].compact.join(\" \")\n    @image_classes = options[:image_class]\n  end\n\nend\n```\n\nand make the template do this:\n\n```\n= link_to @user, title: full_name_of(@user), rel: \"tooltip\" do\n  = render view: :default\n```\n. Is it possible to get \"parent view\" and render in the subclass' view?\nLike\n\n```\n= link_to 'somewhere' do\n  = #super or render blah blah\n```\n\nIf it is possible, how should i do that?\n. The first one is like my second example, but with an extra subclass which is unnecessary\nThe second one is also the same\n\nWhat I want is inherit from avatar cell but without any extra method \n(`Avatar#show` and `LinkedAvatar#show`)\n\nOh the last one should be what I want\n\nRight now I will just stick with my second example :)\n. I have no urgent need for this :)\nNow I just use different states to achieve what I need\n\nWorking on upgrading to Ruby 2.0 right now :P\n. Well I can do the \"wrapper\" thing with states, so no need to use `:file`\n\nThe proposed API is good for real \"view inheritance\".\nIt is possible to call super in code, why not view? (as a cell's view of course)\n. Good! 3.8.8 also fixes issue with Ruby 2.0.0-rc1!\n\nI was trying to post this: (rails 3.2.11)\n\n```\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 0 (expected array)                                          |  ETA: 00:00:00 \n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 1 (expected array)\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 2 (expected array)\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 3 (expected array)\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 6 (expected array)\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 7 (expected array)\n...(more)\n```\n. Should this be closed?\n. Oops you are faster  :o\n. There is a gem called [cache_digest](https://github.com/rails/cache_digests)\nBut I don't know if that could work on Cell (since it's using controller)\n\nI updated a template for a cell and but since the cache key remains unchanged (record not updated)\nThe cache is still valid and requires an explicit key (version date or something) to expire it\n\nI want to see if there is a way to auto/semi-auto expire the caching when template is updated\n. I guess the cell caching today is like action/fragment caching (since its a controller level caching)\nWhich might need `expire_action` if the cell is complex (but a complex cell's caching should be managed carefully or even removed)\n\nWhile a simple cell could have template change from time to time (and should have caching for performance)\n. `expire_cache_key` and `expire_cache_key_for` right?\nBut that would requires manual operation. I can \"expire\" the cache by changing the cache key(`v1`).\n\nI wish to have a semi auto way to expire the cache when template changed.\nSomething like\n\n``` ruby\ncache :state, :versioner\ndef versioner(options)\n  ['template_path'.md5, some_method('template_path')]\nend\n```\n\nI still have to state all the template paths that might be involved, but that's OK.\nBut I don't know how to do it, that's why I ask here.\n. Can you help take a look at the [branch](https://github.com/PikachuEXE/cells/tree/feature/template-digestor)?\nI really need help for integrating this thing into cells (and how the helper and caching method should look and work)\n\nModified the [digestor](https://github.com/rails/cache_digests/blob/master/lib/cache_digests/template_digestor.rb) from [`cache_digest`](https://github.com/rails/cache_digests)\n(No dependency tracking for `cells`)\n\nUpdate 1:\nWork done today:\n`TemplateFinder`:\n- It still needs `_` for partial templates (Otherwise not sure what to do when `_dii` and `dii` both exists)\n- Not sure if it works for `Cells::Base` (too tired to add those tests now :P)\n- Not sure if it works for getting other cells' templates\n\n`TemplateDigestor`:\n- Not much changed from the original one except the extracted logic. So I am not sure if the caching logic is correct\n\nWe still need some helper method(s) & a **README** section for it. \nIf you want to do it please do tell me.\n. Thanks for your comment\nDo you have any idea how to do so?\n\nI implement this for my idea [above](#issuecomment-30383823), which is used in `versioner`\nSince the `versioner` will be run before state logic, I think the templates would to be used cannot be detected\nI am not sure what the actual flow would be (for auto template digesting)\nOr should we do (example only):\n\n``` ruby\ndef state(options\n  @cheap_resource = get_something_cheap\n  cache(@cheap_resource, options[:key]) do\n    @expensive_resource = @cheap_resource.get_expensively\n    render\n  end\nend\n```\n\nwhere `cache`should be a custom method\n. I am doing manual update for now\nOr I have to clear the whole cache for it\n\nPossible to create a rake job and clear all cell related cache only?\n. I am using \"manual update\" an additional key as part of cache key to do this\nIt kind of works.\nUntil a better solution is found, I am closing this.\n. I wonder how to do it\nSince the templates to be rendered are dynamic isn't it?\n. My workaround/solution is:\r\n\r\n```ruby\r\nTEMPLATE_FILES_CONTENT_CACHE_KEY = begin\r\n    view_folder_path = File.expand_path(\"../views\", __FILE__)\r\n    file_paths = Dir.glob(File.join(view_folder_path, \"**\", \"*\"))\r\n\r\n    file_digests = file_paths.map do |file_path|\r\n      ::Digest::MD5.hexdigest(File.read(file_path))\r\n    end\r\n\r\n    ::Digest::MD5.hexdigest(file_digests.join(\"\"))\r\n  end\r\n```\r\n\r\nBut only works if all templates are used and the files are within the same folder\r\nIf any of them is in parent cell(s) or different view path, requires another solution. Well not the caching, but the cache key generation\nI don't want to turn on `config.action_controller.perform_caching` since it affects test result\nBut I want the cache key proc/instance methods to be run\n. ``` ruby\nrequire 'digest'\n\nclass TextLinksInColumnsCell < Cell::Rails\n\n  TOTAL_COLUMN_COUNT = 12\n\n  helper :icon\n\n  cache :default, :versioner, expire_in: 1.day\n\n  # @param elements [Array] Collection of HTML elements strings (Assumed to be links)\n  # @param column_count [Integer] How many column you want to use, should be factor of TOTAL_COLUMN_COUNT\n  # @param rows_to_show_count [Integer] How many rows should be shown on start, 0 to hide all, negative to show all\n  def default(elements: [], column_count: 4, rows_to_show_count: -1)\n    elements.is_a?(Array) or raise ArgumentError\n\n    all_rows = []\n\n    @span_size = TOTAL_COLUMN_COUNT / column_count\n\n    until elements.empty?\n      elements_in_a_row = elements.shift(column_count)\n\n      @spans = elements_in_a_row.map do |element_html_string|\n        @link_html_string = element_html_string\n        render view: 'span'\n      end.join.html_safe\n\n      all_rows << (render view: 'row').html_safe\n    end\n\n    if rows_to_show_count.neg?\n      # No one would have more than 1 billion rows right?\n      rows_to_show_count = 10 ** 9\n    end\n\n    @rows_to_show = all_rows.shift(rows_to_show_count).join.html_safe\n    @rows_to_hide = all_rows.join.html_safe\n    @has_hidden_rows = !all_rows.empty?\n\n    render view: 'container'\n  end\n\n  private\n\n  begin ### PRIVATE ###\n    def versioner(options)\n      [\n        :locale,\n        I18n.locale,\n        :elements,\n        Digest::MD5.hexdigest(options[:elements].join),\n        :column_count,\n        options[:column_count],\n        :rows_to_show_count,\n        options[:rows_to_show_count],\n      ]\n    end\n  end\n\nend\n```\n. Maybe run the `state_cache_key` (not sure which one generates the cache key) everytime even when \n`perform_caching` is false?\n\nSending signal to the `versioner` method is not quite practical to me, since caching is part of rendering a state\nAnd it should fail loud if I am testing the cell states, which it doesn't right now\n. For the example above, it would be `options[:elements]`\nIt could be missing or got wrong type\n. I just move `return` after `option` in `render_state`, that would gives me what I want\nI tested it by putting `raise RuntimeError` in `versioner`\n\nCan't run the gem test since `s.add_development_dependency \"activemodel\"` seems to be missing\nAnd some tests are failing before I change the code\n. Test failed with 2 errors\n\n```\nFinished tests in 0.933092s, 157.5407 tests/s, 316.1532 assertions/s.\n\n  1) Error:\nViewModelIntegrationTest#test_URL_helper_in_instance:\nNoMethodError: undefined method `empty?' for 1:Fixnum\n\n\n  2) Error:\nViewModelIntegrationTest#test_URL_helpers_in_view:\nActionView::Template::Error: undefined method `empty?' for 1:Fixnum\n\n\n147 tests, 295 assertions, 0 failures, 2 errors, 3 skips\n```\n. Seems I have to specify the `actionpack`, `railties` and `minitest` in gemfile to make it work\nAnyway you have one test failed due to missing cell class\n\nI will open a PR when done\n\nEDIT: strange it does not fail on Travis\n. Which didn't happen last time :P\n. How about always run caching when some config is set to true? \nLike `Cells.config.test_mode` or `Cells.config.always_run_versioner`\nSince I just want the existing tests to cover caching code.\n. I agree.\nBut do we have a way to turn on caching now? (in `test`)\n. Now I am usually just passing in current_user\nMake tests a lot easier to read and stub (if needed)\n. I just delegate `image_tag` to `ActionController::Base.helpers`\nIt's not OO but it works.\nI don't want to touch the rails screwed up helper system.\n. `parent_controller` is a magic thing that I didn't know\nI won't use it until this is properly documented :D\n. Still too \"magical\" for me. (Especially \"rails only\")\nAnd these gem are meant to remove the \"magic\" right?\n. Whatever I use, this is one of the \"pitfalls\" when using rails.\nWorth documenting?\n. I always use `::ActionController::Base.helpers.image_tag`\nQuestion/Blame rails for this.\n. Why this project is not under `trailblazer`? :)\n. I can wait for `4.0` :+1: \nBe sure to check documentation before pushing (or push beta versions for testing)\n. I need the gem `cells-haml` for `Cell::Concept` using `cells` 3.x.\n. I guess I will just hack it myself Q_Q\n. cells 3 also got `Cell::Concept`, and then I use `simple_form` in it...\n. In one of my concept cell I need to use `simple_form_for`.\nSo I do this:\n\n``` ruby\n# Required by simple form for `form_for` I guess\ninclude ActionView::RecordIdentifier\ninclude ActionView::Helpers::FormHelper\ninclude SimpleForm::ActionViewExtensions::FormHelper\n```\n\nThen it will out put escaped HTML\nSo I need to do `include Cell::Haml` too (code from `cells-haml`).\nAlso I need to include `Cell::Haml` last to make it work\n. For now I would be using my hacks.\nI got many \"old cells\" which inherits from `Cell::Rails`\nI guess I don't have time refactoring until April\n. Don't put and \"workaround\" (not fix) in this gem, no.\nAnother negative \"rails style\" :bomb: \n. What's the point of this PR .3.?\n. That would be great!\nMass assignment > `@var = var`\n. Any update on this new feature? ;)\n. If you have enough to talk, do it :D\n\nBe sure to post the link here also!\n. I am already using Concept cell, no need for this :D\n. Or should I use different \"states\" of a cell? like:\n\n``` ruby\nclass AvatarCell < Cell::Rails\n  BASE_CLASS = \"mod-avatar\"\n\n  def default(options = {})\n    prepare(options)\n\n    render\n  end\n\n  def linked(options = {})\n    prepare(options)\n\n    render\n  end\n\n  protected\n\n  def prepare(options)\n    @user = options[:user]\n    @size = options[:size] || :large\n\n    @all_classes = [BASE_CLASS, options[:class]].compact.join(\" \")\n    @image_classes = options[:image_class]\n  end\n\nend\n```\n\nand make the template do this:\n\n```\n= link_to @user, title: full_name_of(@user), rel: \"tooltip\" do\n  = render view: :default\n```\n. Is it possible to get \"parent view\" and render in the subclass' view?\nLike\n\n```\n= link_to 'somewhere' do\n  = #super or render blah blah\n```\n\nIf it is possible, how should i do that?\n. The first one is like my second example, but with an extra subclass which is unnecessary\nThe second one is also the same\n\nWhat I want is inherit from avatar cell but without any extra method \n(`Avatar#show` and `LinkedAvatar#show`)\n\nOh the last one should be what I want\n\nRight now I will just stick with my second example :)\n. I have no urgent need for this :)\nNow I just use different states to achieve what I need\n\nWorking on upgrading to Ruby 2.0 right now :P\n. Well I can do the \"wrapper\" thing with states, so no need to use `:file`\n\nThe proposed API is good for real \"view inheritance\".\nIt is possible to call super in code, why not view? (as a cell's view of course)\n. Good! 3.8.8 also fixes issue with Ruby 2.0.0-rc1!\n\nI was trying to post this: (rails 3.2.11)\n\n```\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 0 (expected array)                                          |  ETA: 00:00:00 \n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 1 (expected array)\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 2 (expected array)\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 3 (expected array)\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 6 (expected array)\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: ignoring wrong elements is deprecated, remove them explicitly\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: this causes ArgumentError in the next release\n/usr/local/rvm/gems/ruby-2.0.0-rc1/gems/cells-3.8.6/lib/cell/test_case.rb:78: warning: wrong element type nil at 7 (expected array)\n...(more)\n```\n. Should this be closed?\n. Oops you are faster  :o\n. There is a gem called [cache_digest](https://github.com/rails/cache_digests)\nBut I don't know if that could work on Cell (since it's using controller)\n\nI updated a template for a cell and but since the cache key remains unchanged (record not updated)\nThe cache is still valid and requires an explicit key (version date or something) to expire it\n\nI want to see if there is a way to auto/semi-auto expire the caching when template is updated\n. I guess the cell caching today is like action/fragment caching (since its a controller level caching)\nWhich might need `expire_action` if the cell is complex (but a complex cell's caching should be managed carefully or even removed)\n\nWhile a simple cell could have template change from time to time (and should have caching for performance)\n. `expire_cache_key` and `expire_cache_key_for` right?\nBut that would requires manual operation. I can \"expire\" the cache by changing the cache key(`v1`).\n\nI wish to have a semi auto way to expire the cache when template changed.\nSomething like\n\n``` ruby\ncache :state, :versioner\ndef versioner(options)\n  ['template_path'.md5, some_method('template_path')]\nend\n```\n\nI still have to state all the template paths that might be involved, but that's OK.\nBut I don't know how to do it, that's why I ask here.\n. Can you help take a look at the [branch](https://github.com/PikachuEXE/cells/tree/feature/template-digestor)?\nI really need help for integrating this thing into cells (and how the helper and caching method should look and work)\n\nModified the [digestor](https://github.com/rails/cache_digests/blob/master/lib/cache_digests/template_digestor.rb) from [`cache_digest`](https://github.com/rails/cache_digests)\n(No dependency tracking for `cells`)\n\nUpdate 1:\nWork done today:\n`TemplateFinder`:\n- It still needs `_` for partial templates (Otherwise not sure what to do when `_dii` and `dii` both exists)\n- Not sure if it works for `Cells::Base` (too tired to add those tests now :P)\n- Not sure if it works for getting other cells' templates\n\n`TemplateDigestor`:\n- Not much changed from the original one except the extracted logic. So I am not sure if the caching logic is correct\n\nWe still need some helper method(s) & a **README** section for it. \nIf you want to do it please do tell me.\n. Thanks for your comment\nDo you have any idea how to do so?\n\nI implement this for my idea [above](#issuecomment-30383823), which is used in `versioner`\nSince the `versioner` will be run before state logic, I think the templates would to be used cannot be detected\nI am not sure what the actual flow would be (for auto template digesting)\nOr should we do (example only):\n\n``` ruby\ndef state(options\n  @cheap_resource = get_something_cheap\n  cache(@cheap_resource, options[:key]) do\n    @expensive_resource = @cheap_resource.get_expensively\n    render\n  end\nend\n```\n\nwhere `cache`should be a custom method\n. I am doing manual update for now\nOr I have to clear the whole cache for it\n\nPossible to create a rake job and clear all cell related cache only?\n. I am using \"manual update\" an additional key as part of cache key to do this\nIt kind of works.\nUntil a better solution is found, I am closing this.\n. I wonder how to do it\nSince the templates to be rendered are dynamic isn't it?\n. My workaround/solution is:\r\n\r\n```ruby\r\nTEMPLATE_FILES_CONTENT_CACHE_KEY = begin\r\n    view_folder_path = File.expand_path(\"../views\", __FILE__)\r\n    file_paths = Dir.glob(File.join(view_folder_path, \"**\", \"*\"))\r\n\r\n    file_digests = file_paths.map do |file_path|\r\n      ::Digest::MD5.hexdigest(File.read(file_path))\r\n    end\r\n\r\n    ::Digest::MD5.hexdigest(file_digests.join(\"\"))\r\n  end\r\n```\r\n\r\nBut only works if all templates are used and the files are within the same folder\r\nIf any of them is in parent cell(s) or different view path, requires another solution. Well not the caching, but the cache key generation\nI don't want to turn on `config.action_controller.perform_caching` since it affects test result\nBut I want the cache key proc/instance methods to be run\n. ``` ruby\nrequire 'digest'\n\nclass TextLinksInColumnsCell < Cell::Rails\n\n  TOTAL_COLUMN_COUNT = 12\n\n  helper :icon\n\n  cache :default, :versioner, expire_in: 1.day\n\n  # @param elements [Array] Collection of HTML elements strings (Assumed to be links)\n  # @param column_count [Integer] How many column you want to use, should be factor of TOTAL_COLUMN_COUNT\n  # @param rows_to_show_count [Integer] How many rows should be shown on start, 0 to hide all, negative to show all\n  def default(elements: [], column_count: 4, rows_to_show_count: -1)\n    elements.is_a?(Array) or raise ArgumentError\n\n    all_rows = []\n\n    @span_size = TOTAL_COLUMN_COUNT / column_count\n\n    until elements.empty?\n      elements_in_a_row = elements.shift(column_count)\n\n      @spans = elements_in_a_row.map do |element_html_string|\n        @link_html_string = element_html_string\n        render view: 'span'\n      end.join.html_safe\n\n      all_rows << (render view: 'row').html_safe\n    end\n\n    if rows_to_show_count.neg?\n      # No one would have more than 1 billion rows right?\n      rows_to_show_count = 10 ** 9\n    end\n\n    @rows_to_show = all_rows.shift(rows_to_show_count).join.html_safe\n    @rows_to_hide = all_rows.join.html_safe\n    @has_hidden_rows = !all_rows.empty?\n\n    render view: 'container'\n  end\n\n  private\n\n  begin ### PRIVATE ###\n    def versioner(options)\n      [\n        :locale,\n        I18n.locale,\n        :elements,\n        Digest::MD5.hexdigest(options[:elements].join),\n        :column_count,\n        options[:column_count],\n        :rows_to_show_count,\n        options[:rows_to_show_count],\n      ]\n    end\n  end\n\nend\n```\n. Maybe run the `state_cache_key` (not sure which one generates the cache key) everytime even when \n`perform_caching` is false?\n\nSending signal to the `versioner` method is not quite practical to me, since caching is part of rendering a state\nAnd it should fail loud if I am testing the cell states, which it doesn't right now\n. For the example above, it would be `options[:elements]`\nIt could be missing or got wrong type\n. I just move `return` after `option` in `render_state`, that would gives me what I want\nI tested it by putting `raise RuntimeError` in `versioner`\n\nCan't run the gem test since `s.add_development_dependency \"activemodel\"` seems to be missing\nAnd some tests are failing before I change the code\n. Test failed with 2 errors\n\n```\nFinished tests in 0.933092s, 157.5407 tests/s, 316.1532 assertions/s.\n\n  1) Error:\nViewModelIntegrationTest#test_URL_helper_in_instance:\nNoMethodError: undefined method `empty?' for 1:Fixnum\n\n\n  2) Error:\nViewModelIntegrationTest#test_URL_helpers_in_view:\nActionView::Template::Error: undefined method `empty?' for 1:Fixnum\n\n\n147 tests, 295 assertions, 0 failures, 2 errors, 3 skips\n```\n. Seems I have to specify the `actionpack`, `railties` and `minitest` in gemfile to make it work\nAnyway you have one test failed due to missing cell class\n\nI will open a PR when done\n\nEDIT: strange it does not fail on Travis\n. Which didn't happen last time :P\n. How about always run caching when some config is set to true? \nLike `Cells.config.test_mode` or `Cells.config.always_run_versioner`\nSince I just want the existing tests to cover caching code.\n. I agree.\nBut do we have a way to turn on caching now? (in `test`)\n. Now I am usually just passing in current_user\nMake tests a lot easier to read and stub (if needed)\n. I just delegate `image_tag` to `ActionController::Base.helpers`\nIt's not OO but it works.\nI don't want to touch the rails screwed up helper system.\n. `parent_controller` is a magic thing that I didn't know\nI won't use it until this is properly documented :D\n. Still too \"magical\" for me. (Especially \"rails only\")\nAnd these gem are meant to remove the \"magic\" right?\n. Whatever I use, this is one of the \"pitfalls\" when using rails.\nWorth documenting?\n. I always use `::ActionController::Base.helpers.image_tag`\nQuestion/Blame rails for this.\n. Why this project is not under `trailblazer`? :)\n. I can wait for `4.0` :+1: \nBe sure to check documentation before pushing (or push beta versions for testing)\n. I need the gem `cells-haml` for `Cell::Concept` using `cells` 3.x.\n. I guess I will just hack it myself Q_Q\n. cells 3 also got `Cell::Concept`, and then I use `simple_form` in it...\n. In one of my concept cell I need to use `simple_form_for`.\nSo I do this:\n\n``` ruby\n# Required by simple form for `form_for` I guess\ninclude ActionView::RecordIdentifier\ninclude ActionView::Helpers::FormHelper\ninclude SimpleForm::ActionViewExtensions::FormHelper\n```\n\nThen it will out put escaped HTML\nSo I need to do `include Cell::Haml` too (code from `cells-haml`).\nAlso I need to include `Cell::Haml` last to make it work\n. For now I would be using my hacks.\nI got many \"old cells\" which inherits from `Cell::Rails`\nI guess I don't have time refactoring until April\n. Don't put and \"workaround\" (not fix) in this gem, no.\nAnother negative \"rails style\" :bomb: \n. What's the point of this PR .3.?\n. ",
    "rweng": "+1, except the last line, where I would default to `locals: args`.\n. +1, except the last line, where I would default to `locals: args`.\n. ",
    "francescoagati": "I have try it, but i receive this error:\n\n```\n/Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.5/lib/cell/base.rb:5:in `<top (required)>': uninitialized constant Cells (NameError)\n    from main.rb:1:in `require'\n    from main.rb:1:in `<main>'\n```\n\nwith this gemfile\n\n```\n# A sample Gemfile\nsource \"https://rubygems.org\"\n\ngem \"cells\" , \"~> 3.8.5\"\ngem \"sqlite3\"\ngem \"activerecord\"\ngem \"simple_form\"\ngem 'actionpack'\n```\n\nand this main.rb\n\n```\n\nrequire 'cell/base'\nrequire \"cell/rails/helper_api\"\nrequire \"simple_form\"\n\nclass MusicianCell < Cell::Base\n  include Cell::Rails::HelperAPI\n\n  self._helpers = RoutingHelpers\n\n  def show\n    render\n  end\nend\n\n```\n. and this is gem versions\n\n```\n\nUsing rake (0.9.2.2) \nUsing i18n (0.6.1) \nUsing multi_json (1.3.6) \nUsing activesupport (3.2.8) \nUsing builder (3.0.3) \nUsing activemodel (3.2.8) \nUsing erubis (2.7.0) \nUsing journey (1.0.4) \nUsing rack (1.4.1) \nUsing rack-cache (1.2) \nUsing rack-test (0.6.2) \nUsing hike (1.2.1) \nUsing tilt (1.3.3) \nUsing sprockets (2.1.3) \nUsing actionpack (3.2.8) \nUsing arel (3.0.2) \nUsing tzinfo (0.3.33) \nUsing activerecord (3.2.8) \nUsing rack-ssl (1.3.2) \nUsing json (1.7.5) \nUsing rdoc (3.12) \nUsing thor (0.16.0) \nUsing railties (3.2.8) \nUsing cells (3.8.5) \nUsing simple_form (2.0.3) \nUsing sqlite3 (1.3.6) \nUsing bundler (1.2.0.pre.1) \n\n```\n. I try but i have some problems\n\ngemfile\n\n```\n\n# A sample Gemfile\nsource \"https://rubygems.org\"\n\n# gem \"rails\"\ngem 'cells'\ngem 'actionpack'\n\n```\n\ngemfile.lock\n\n```\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actionpack (3.2.8)\n      activemodel (= 3.2.8)\n      activesupport (= 3.2.8)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      journey (~> 1.0.4)\n      rack (~> 1.4.0)\n      rack-cache (~> 1.2)\n      rack-test (~> 0.6.1)\n      sprockets (~> 2.1.3)\n    activemodel (3.2.8)\n      activesupport (= 3.2.8)\n      builder (~> 3.0.0)\n    activesupport (3.2.8)\n      i18n (~> 0.6)\n      multi_json (~> 1.0)\n    builder (3.0.3)\n    cells (3.8.6)\n      actionpack (~> 3.0)\n      railties (~> 3.0)\n    erubis (2.7.0)\n    hike (1.2.1)\n    i18n (0.6.1)\n    journey (1.0.4)\n    json (1.7.5)\n    multi_json (1.3.6)\n    rack (1.4.1)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-ssl (1.3.2)\n      rack\n    rack-test (0.6.2)\n      rack (>= 1.0)\n    railties (3.2.8)\n      actionpack (= 3.2.8)\n      activesupport (= 3.2.8)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (>= 0.14.6, < 2.0)\n    rake (0.9.2.2)\n    rdoc (3.12)\n      json (~> 1.4)\n    sprockets (2.1.3)\n      hike (~> 1.2)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    thor (0.16.0)\n    tilt (1.3.3)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  actionpack\n  cells\n\n```\n\nmain.rb\n\n```\nrequire 'cell/base'\n\nclass MusicianCell < Cell::Base\n  def show\n\n  end\nend\n\n```\n\ni get this error\n\n```\n\n/Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails3_1_strategy.rb:26:in `<top (required)>': uninitialized constant Cells (NameError)\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:29:in `<class:Base>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:20:in `<module:Cell>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:6:in `<top (required)>'\n    from main.rb:1:in `require'\n    from main.rb:1:in `<main>'\n\n```\n. if i try to use cells and actionpack i get this error\n\nmain.rb\n\n```\nrequire 'action_pack'\nrequire 'cells'\nrequire 'cell/base'\n\nclass MusicianCell < Cell::Base\n  def show\n\n  end\nend\n\n```\n\n```\n\n/Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:6:in `<class:Rails>': uninitialized constant ActionController::RequestForgeryProtection (NameError)\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:4:in `<module:Cell>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:3:in `<top (required)>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cells.rb:75:in `require'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cells.rb:75:in `<top (required)>'\n    from main.rb:2:in `require'\n    from main.rb:2:in `<main>'\n\n```\n. i have try to not require 'cells'. in this comment https://github.com/apotonick/cells/issues/138#issuecomment-9220071\n\nbut i get this error:\n\n```\n\n/Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails3_1_strategy.rb:26:in `<top (required)>': uninitialized constant Cells (NameError)\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:29:in `<class:Base>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:20:in `<module:Cell>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:6:in `<top (required)>'\n    from main.rb:1:in `require'\n    from main.rb:1:in `<main>'\n\n```\n. with master branch IT WORKS! :-)\n. i have use branch master\n\nGemfile\n\n```\n# A sample Gemfile\nsource \"https://rubygems.org\"\n\n# gem \"rails\"\ngem 'cells', :git => 'git://github.com/apotonick/cells.git'\ngem 'actionpack'\ngem 'syringe'\ngem 'awesome_print'\n\n```\n\nGemfile.lock\n\n```\nGIT\n  remote: git://github.com/apotonick/cells.git\n  revision: 7a9e1dd0e4266021fb7629296d5c708e8bd24aee\n  specs:\n    cells (3.8.6)\n      actionpack (~> 3.0)\n      railties (~> 3.0)\n\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actionpack (3.2.8)\n      activemodel (= 3.2.8)\n      activesupport (= 3.2.8)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      journey (~> 1.0.4)\n      rack (~> 1.4.0)\n      rack-cache (~> 1.2)\n      rack-test (~> 0.6.1)\n      sprockets (~> 2.1.3)\n    activemodel (3.2.8)\n      activesupport (= 3.2.8)\n      builder (~> 3.0.0)\n    activesupport (3.2.8)\n      i18n (~> 0.6)\n      multi_json (~> 1.0)\n    awesome_print (1.1.0)\n    builder (3.0.3)\n    erubis (2.7.0)\n    hike (1.2.1)\n    i18n (0.6.1)\n    journey (1.0.4)\n    json (1.7.5)\n    multi_json (1.3.6)\n    rack (1.4.1)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-ssl (1.3.2)\n      rack\n    rack-test (0.6.2)\n      rack (>= 1.0)\n    railties (3.2.8)\n      actionpack (= 3.2.8)\n      activesupport (= 3.2.8)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (>= 0.14.6, < 2.0)\n    rake (0.9.2.2)\n    rdoc (3.12)\n      json (~> 1.4)\n    sprockets (2.1.3)\n      hike (~> 1.2)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    syringe (0.0.1.pre)\n    thor (0.16.0)\n    tilt (1.3.3)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  actionpack\n  awesome_print\n  cells!\n  syringe\n\n\n```\n\nmain.rb\n\n```\n\nrequire 'action_pack'\nrequire 'cell/base'\nrequire \"cell/rails/helper_api\"\n\nmodule RoutingHelpers\n  def musician_path(model, *args)\n    \"/musicians/#{model.id}\"\n  end\nend\n\n  class Statistics < Cell::Base\n\n      include Cell::Rails::HelperAPI\n      self._helpers = RoutingHelpers\n\n      def players(args={})\n        render\n      end\n\n    end\n\n Statistics.new.render_state(:players)\n\n```\n. i use it in a ruby script (main.rb). thereisn't no rack framework. i wanna use for generate static file html (like in middleman).\n\nthe view is \n\nviews/statistics/players.html.erb\n\n```\n<%= 1+1 %>\n```\n\nfor now is only for check that is work correctly\n. i will make a git  repository with an example of this.\n\nMi idea is to use cells with celluoid. In this mode an actor of celluloid render a cell and write the output on a db or file system.\n\nso after that, scale it on more workers actors with dcell.\n. ok. This week i post some news on a git repository with celluloid.\nWe at Milan are organizing a Ruby Social Club at november for speaking about celluoid,reel and dcell.\n\nIf you are interested we can organize an hangout\n. @apotonick @pgaertig -> https://github.com/francescoagati/cell-celluloid\n\nask here for details\n. I have try it, but i receive this error:\n\n```\n/Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.5/lib/cell/base.rb:5:in `<top (required)>': uninitialized constant Cells (NameError)\n    from main.rb:1:in `require'\n    from main.rb:1:in `<main>'\n```\n\nwith this gemfile\n\n```\n# A sample Gemfile\nsource \"https://rubygems.org\"\n\ngem \"cells\" , \"~> 3.8.5\"\ngem \"sqlite3\"\ngem \"activerecord\"\ngem \"simple_form\"\ngem 'actionpack'\n```\n\nand this main.rb\n\n```\n\nrequire 'cell/base'\nrequire \"cell/rails/helper_api\"\nrequire \"simple_form\"\n\nclass MusicianCell < Cell::Base\n  include Cell::Rails::HelperAPI\n\n  self._helpers = RoutingHelpers\n\n  def show\n    render\n  end\nend\n\n```\n. and this is gem versions\n\n```\n\nUsing rake (0.9.2.2) \nUsing i18n (0.6.1) \nUsing multi_json (1.3.6) \nUsing activesupport (3.2.8) \nUsing builder (3.0.3) \nUsing activemodel (3.2.8) \nUsing erubis (2.7.0) \nUsing journey (1.0.4) \nUsing rack (1.4.1) \nUsing rack-cache (1.2) \nUsing rack-test (0.6.2) \nUsing hike (1.2.1) \nUsing tilt (1.3.3) \nUsing sprockets (2.1.3) \nUsing actionpack (3.2.8) \nUsing arel (3.0.2) \nUsing tzinfo (0.3.33) \nUsing activerecord (3.2.8) \nUsing rack-ssl (1.3.2) \nUsing json (1.7.5) \nUsing rdoc (3.12) \nUsing thor (0.16.0) \nUsing railties (3.2.8) \nUsing cells (3.8.5) \nUsing simple_form (2.0.3) \nUsing sqlite3 (1.3.6) \nUsing bundler (1.2.0.pre.1) \n\n```\n. I try but i have some problems\n\ngemfile\n\n```\n\n# A sample Gemfile\nsource \"https://rubygems.org\"\n\n# gem \"rails\"\ngem 'cells'\ngem 'actionpack'\n\n```\n\ngemfile.lock\n\n```\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actionpack (3.2.8)\n      activemodel (= 3.2.8)\n      activesupport (= 3.2.8)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      journey (~> 1.0.4)\n      rack (~> 1.4.0)\n      rack-cache (~> 1.2)\n      rack-test (~> 0.6.1)\n      sprockets (~> 2.1.3)\n    activemodel (3.2.8)\n      activesupport (= 3.2.8)\n      builder (~> 3.0.0)\n    activesupport (3.2.8)\n      i18n (~> 0.6)\n      multi_json (~> 1.0)\n    builder (3.0.3)\n    cells (3.8.6)\n      actionpack (~> 3.0)\n      railties (~> 3.0)\n    erubis (2.7.0)\n    hike (1.2.1)\n    i18n (0.6.1)\n    journey (1.0.4)\n    json (1.7.5)\n    multi_json (1.3.6)\n    rack (1.4.1)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-ssl (1.3.2)\n      rack\n    rack-test (0.6.2)\n      rack (>= 1.0)\n    railties (3.2.8)\n      actionpack (= 3.2.8)\n      activesupport (= 3.2.8)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (>= 0.14.6, < 2.0)\n    rake (0.9.2.2)\n    rdoc (3.12)\n      json (~> 1.4)\n    sprockets (2.1.3)\n      hike (~> 1.2)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    thor (0.16.0)\n    tilt (1.3.3)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  actionpack\n  cells\n\n```\n\nmain.rb\n\n```\nrequire 'cell/base'\n\nclass MusicianCell < Cell::Base\n  def show\n\n  end\nend\n\n```\n\ni get this error\n\n```\n\n/Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails3_1_strategy.rb:26:in `<top (required)>': uninitialized constant Cells (NameError)\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:29:in `<class:Base>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:20:in `<module:Cell>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:6:in `<top (required)>'\n    from main.rb:1:in `require'\n    from main.rb:1:in `<main>'\n\n```\n. if i try to use cells and actionpack i get this error\n\nmain.rb\n\n```\nrequire 'action_pack'\nrequire 'cells'\nrequire 'cell/base'\n\nclass MusicianCell < Cell::Base\n  def show\n\n  end\nend\n\n```\n\n```\n\n/Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:6:in `<class:Rails>': uninitialized constant ActionController::RequestForgeryProtection (NameError)\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:4:in `<module:Cell>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails.rb:3:in `<top (required)>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cells.rb:75:in `require'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cells.rb:75:in `<top (required)>'\n    from main.rb:2:in `require'\n    from main.rb:2:in `<main>'\n\n```\n. i have try to not require 'cells'. in this comment https://github.com/apotonick/cells/issues/138#issuecomment-9220071\n\nbut i get this error:\n\n```\n\n/Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/rails3_1_strategy.rb:26:in `<top (required)>': uninitialized constant Cells (NameError)\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:29:in `<class:Base>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:20:in `<module:Cell>'\n    from /Users/francesco/.rvm/gems/ruby-1.9.3-p194/gems/cells-3.8.6/lib/cell/base.rb:6:in `<top (required)>'\n    from main.rb:1:in `require'\n    from main.rb:1:in `<main>'\n\n```\n. with master branch IT WORKS! :-)\n. i have use branch master\n\nGemfile\n\n```\n# A sample Gemfile\nsource \"https://rubygems.org\"\n\n# gem \"rails\"\ngem 'cells', :git => 'git://github.com/apotonick/cells.git'\ngem 'actionpack'\ngem 'syringe'\ngem 'awesome_print'\n\n```\n\nGemfile.lock\n\n```\nGIT\n  remote: git://github.com/apotonick/cells.git\n  revision: 7a9e1dd0e4266021fb7629296d5c708e8bd24aee\n  specs:\n    cells (3.8.6)\n      actionpack (~> 3.0)\n      railties (~> 3.0)\n\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actionpack (3.2.8)\n      activemodel (= 3.2.8)\n      activesupport (= 3.2.8)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      journey (~> 1.0.4)\n      rack (~> 1.4.0)\n      rack-cache (~> 1.2)\n      rack-test (~> 0.6.1)\n      sprockets (~> 2.1.3)\n    activemodel (3.2.8)\n      activesupport (= 3.2.8)\n      builder (~> 3.0.0)\n    activesupport (3.2.8)\n      i18n (~> 0.6)\n      multi_json (~> 1.0)\n    awesome_print (1.1.0)\n    builder (3.0.3)\n    erubis (2.7.0)\n    hike (1.2.1)\n    i18n (0.6.1)\n    journey (1.0.4)\n    json (1.7.5)\n    multi_json (1.3.6)\n    rack (1.4.1)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-ssl (1.3.2)\n      rack\n    rack-test (0.6.2)\n      rack (>= 1.0)\n    railties (3.2.8)\n      actionpack (= 3.2.8)\n      activesupport (= 3.2.8)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (>= 0.14.6, < 2.0)\n    rake (0.9.2.2)\n    rdoc (3.12)\n      json (~> 1.4)\n    sprockets (2.1.3)\n      hike (~> 1.2)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    syringe (0.0.1.pre)\n    thor (0.16.0)\n    tilt (1.3.3)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  actionpack\n  awesome_print\n  cells!\n  syringe\n\n\n```\n\nmain.rb\n\n```\n\nrequire 'action_pack'\nrequire 'cell/base'\nrequire \"cell/rails/helper_api\"\n\nmodule RoutingHelpers\n  def musician_path(model, *args)\n    \"/musicians/#{model.id}\"\n  end\nend\n\n  class Statistics < Cell::Base\n\n      include Cell::Rails::HelperAPI\n      self._helpers = RoutingHelpers\n\n      def players(args={})\n        render\n      end\n\n    end\n\n Statistics.new.render_state(:players)\n\n```\n. i use it in a ruby script (main.rb). thereisn't no rack framework. i wanna use for generate static file html (like in middleman).\n\nthe view is \n\nviews/statistics/players.html.erb\n\n```\n<%= 1+1 %>\n```\n\nfor now is only for check that is work correctly\n. i will make a git  repository with an example of this.\n\nMi idea is to use cells with celluoid. In this mode an actor of celluloid render a cell and write the output on a db or file system.\n\nso after that, scale it on more workers actors with dcell.\n. ok. This week i post some news on a git repository with celluloid.\nWe at Milan are organizing a Ruby Social Club at november for speaking about celluoid,reel and dcell.\n\nIf you are interested we can organize an hangout\n. @apotonick @pgaertig -> https://github.com/francescoagati/cell-celluloid\n\nask here for details\n. ",
    "EnotPoloskun": "Thanks for you fast response.\n\nI have included helper because I am using it's methods not only in views.\n\nI will try your code a bit later. Thanks!\n. Thanks for you fast response.\n\nI have included helper because I am using it's methods not only in views.\n\nI will try your code a bit later. Thanks!\n. ",
    "scervera": "Ok. I'll give it a shot and report back. Thank you, Nick. Cells has been a wonderful solution for me. \n\nSteve\n\nOn Oct 24, 2012, at 7:06 PM, Nick Sutterer notifications@github.com wrote:\n\n> It's not a Rails problem, try renaming the #display method to #show.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I tried renaming \"display\" to \"show\" (along with associated method and html file), but that didn't work.\n\nHowever, what DID work was changing this:\n<%= render_cell :quote, :display, :quote => @quote %>\n\nto this:\n\n<%= render_cell :quote, :display %>\n\nSo maybe there is a regression in Rails 3.2.8. What's odd is even though I omit this argument, the cell seems to be working with the variable in the method.  Is that suppose to work? Once you figure this out, do you think you could comment back into my stackoverflow question?\n\nThanks for all your help with this.\n\nSteve\n\nOn Oct 24, 2012, at 6:40 PM, Nick Sutterer notifications@github.com wrote:\n\n> When you remove the state arg `:movies => @movies` does the problem still \n> occur? There was a bug in Rails' ActionController#process. Maybe that is a \n> regression bug in Rails, let me check. \n> \n> On Tue, Oct 23, 2012 at 6:57 PM, scervera notifications@github.com wrote: \n> \n> > I have been getting a maddening error: \n> > Wrong number of arguments (1 for 0) after updating from Rails 3.0.3 to \n> > Rails 3.0.10 to Rails 3.2.8 \n> > \n> > See this stackoverflow question: \n> > http://stackoverflow.com/questions/13001289/wrong-number-of-arguments-1-for-0-after-updating-from-rails-3-0-3-to-rails-3-0 \n> > \n> > I discovered that when I remove all of the render cells lines in my code \n> > the problem goes away. I'm hoping for a fix, because I love cells! \n> > \n> > Here is the line of code: \n> > <%= render_cell :video_feature, :display, :movies => @movies %> \n> > \n> > \u2014 \n> > Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/140. \n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. Hehe. Yeah, I was wondering about that. Then I was thinking if this information was cached somewhere, so I changed some data and sure enough it showed up as it should with the variable present. I will create a bare minimum rails app as you suggest and report back. Thx again for your support.\n\nOn Oct 25, 2012, at 10:24 AM, Nick Sutterer notifications@github.com wrote:\n\n> Steve, if your cell still works with that quote variable than something is really fucked up. Cells are close to but still not so smart to figure out themselves what you need in your methods ;-) What would help would be an isolated minimum rails app that provokes this problem.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I'm able to reproduce the problem in a new basic rails project I created. I have a static page with a cell called \"messages\" inserted. So I get the same error message as before \"ArgumentError  Wrong number of arguments (1 for 0)\". However, removing the argument causes cells to fail as expected. Not sure why it's working in my other web site.\n\nHere is my code:\n\nnews.html.erb:\n`<h1>StaticPages#news</h1>\n<%= render_cell :messages, :show, :story => @story %>`\n\nmessages_cell.rb:\n`class MessagesCell < Cell::Rails\n  def show\n    @story = Stories.first\n    render\n  end\nend`\n\nshow.html.erb\n`<h1>Top News Headlines</h1>\n<p>These are the top stories:<%= @story %></p>`\n\nHere is a full trace:\ngit://gist.github.com/3953798.git\n. Rails 3.2.8\n\nHere's my Gemfile:\n\nsource 'https://rubygems.org'\ngem 'rails', '3.2.8'\ngem 'sqlite3'\n\ngroup :assets do\n  gem 'sass-rails',   '~> 3.2.3'\n  gem 'coffee-rails', '~> 3.2.1'\n  gem 'uglifier', '>= 1.0.3'\nend\n\ngem 'jquery-rails'\ngem 'cells'\n\nOn Oct 25, 2012, at 5:26 PM, Nick Sutterer notifications@github.com wrote:\n\n> Rails version?\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. OK. So clearly there is something specific in my implementation that is screwed up, and I apologize for taking up your time with this. I have changed to ruby 1.9.3 and have removed all my gems and reinstalled them. I am able to reproduce the issue where I can remove the arguments from the render_cell statement and make it work. Because I know this is unbelievable, I've made you a video to observe it: http://youtu.be/vTjW0tBixjM\n\nOn Oct 26, 2012, at 8:57 PM, Nick Sutterer notifications@github.com wrote:\n\n> Sorry bro I just created a clean 3.2.8 app with cells + state args and it works, I can't reproduce this problem. Maybe it's your 1.9.1 ruby?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. No, I never meant to insinuate that, Nick. My apologies. Here's the weird thing. In my original web site, I never passed the argument to the method as you have shown, but it worked! That's why it wasn't obvious to me. Now that I have done what you have said, it works. Bug closed. Thank you so much for your help! I apologize for the newbie error. :-)\n\nOn Oct 27, 2012, at 10:01 AM, Nick Sutterer notifications@github.com wrote:\n\n> Now I'm the one to blame for not seeing your bug! Your #show method has to receive the argument, dude!\n> \n> def show(story)\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Honestly, I have no idea how that could have worked. All I had was what you saw. To clear out any POSSIBLE caching, I even rebooted my laptop because I was in complete disbelief! :-)\nThanks again. \nOn Oct 27, 2012, at 10:27 AM, Nick Sutterer notifications@github.com wrote:\n\n> No problem bro I was just kidding :-D\n> \n> Wondering how that could work without receiving an argument in the state. Guess you had a method around, then?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Ok. I'll give it a shot and report back. Thank you, Nick. Cells has been a wonderful solution for me. \n\nSteve\n\nOn Oct 24, 2012, at 7:06 PM, Nick Sutterer notifications@github.com wrote:\n\n> It's not a Rails problem, try renaming the #display method to #show.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I tried renaming \"display\" to \"show\" (along with associated method and html file), but that didn't work.\n\nHowever, what DID work was changing this:\n<%= render_cell :quote, :display, :quote => @quote %>\n\nto this:\n\n<%= render_cell :quote, :display %>\n\nSo maybe there is a regression in Rails 3.2.8. What's odd is even though I omit this argument, the cell seems to be working with the variable in the method.  Is that suppose to work? Once you figure this out, do you think you could comment back into my stackoverflow question?\n\nThanks for all your help with this.\n\nSteve\n\nOn Oct 24, 2012, at 6:40 PM, Nick Sutterer notifications@github.com wrote:\n\n> When you remove the state arg `:movies => @movies` does the problem still \n> occur? There was a bug in Rails' ActionController#process. Maybe that is a \n> regression bug in Rails, let me check. \n> \n> On Tue, Oct 23, 2012 at 6:57 PM, scervera notifications@github.com wrote: \n> \n> > I have been getting a maddening error: \n> > Wrong number of arguments (1 for 0) after updating from Rails 3.0.3 to \n> > Rails 3.0.10 to Rails 3.2.8 \n> > \n> > See this stackoverflow question: \n> > http://stackoverflow.com/questions/13001289/wrong-number-of-arguments-1-for-0-after-updating-from-rails-3-0-3-to-rails-3-0 \n> > \n> > I discovered that when I remove all of the render cells lines in my code \n> > the problem goes away. I'm hoping for a fix, because I love cells! \n> > \n> > Here is the line of code: \n> > <%= render_cell :video_feature, :display, :movies => @movies %> \n> > \n> > \u2014 \n> > Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/140. \n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. Hehe. Yeah, I was wondering about that. Then I was thinking if this information was cached somewhere, so I changed some data and sure enough it showed up as it should with the variable present. I will create a bare minimum rails app as you suggest and report back. Thx again for your support.\n\nOn Oct 25, 2012, at 10:24 AM, Nick Sutterer notifications@github.com wrote:\n\n> Steve, if your cell still works with that quote variable than something is really fucked up. Cells are close to but still not so smart to figure out themselves what you need in your methods ;-) What would help would be an isolated minimum rails app that provokes this problem.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I'm able to reproduce the problem in a new basic rails project I created. I have a static page with a cell called \"messages\" inserted. So I get the same error message as before \"ArgumentError  Wrong number of arguments (1 for 0)\". However, removing the argument causes cells to fail as expected. Not sure why it's working in my other web site.\n\nHere is my code:\n\nnews.html.erb:\n`<h1>StaticPages#news</h1>\n<%= render_cell :messages, :show, :story => @story %>`\n\nmessages_cell.rb:\n`class MessagesCell < Cell::Rails\n  def show\n    @story = Stories.first\n    render\n  end\nend`\n\nshow.html.erb\n`<h1>Top News Headlines</h1>\n<p>These are the top stories:<%= @story %></p>`\n\nHere is a full trace:\ngit://gist.github.com/3953798.git\n. Rails 3.2.8\n\nHere's my Gemfile:\n\nsource 'https://rubygems.org'\ngem 'rails', '3.2.8'\ngem 'sqlite3'\n\ngroup :assets do\n  gem 'sass-rails',   '~> 3.2.3'\n  gem 'coffee-rails', '~> 3.2.1'\n  gem 'uglifier', '>= 1.0.3'\nend\n\ngem 'jquery-rails'\ngem 'cells'\n\nOn Oct 25, 2012, at 5:26 PM, Nick Sutterer notifications@github.com wrote:\n\n> Rails version?\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. OK. So clearly there is something specific in my implementation that is screwed up, and I apologize for taking up your time with this. I have changed to ruby 1.9.3 and have removed all my gems and reinstalled them. I am able to reproduce the issue where I can remove the arguments from the render_cell statement and make it work. Because I know this is unbelievable, I've made you a video to observe it: http://youtu.be/vTjW0tBixjM\n\nOn Oct 26, 2012, at 8:57 PM, Nick Sutterer notifications@github.com wrote:\n\n> Sorry bro I just created a clean 3.2.8 app with cells + state args and it works, I can't reproduce this problem. Maybe it's your 1.9.1 ruby?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. No, I never meant to insinuate that, Nick. My apologies. Here's the weird thing. In my original web site, I never passed the argument to the method as you have shown, but it worked! That's why it wasn't obvious to me. Now that I have done what you have said, it works. Bug closed. Thank you so much for your help! I apologize for the newbie error. :-)\n\nOn Oct 27, 2012, at 10:01 AM, Nick Sutterer notifications@github.com wrote:\n\n> Now I'm the one to blame for not seeing your bug! Your #show method has to receive the argument, dude!\n> \n> def show(story)\n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Honestly, I have no idea how that could have worked. All I had was what you saw. To clear out any POSSIBLE caching, I even rebooted my laptop because I was in complete disbelief! :-)\nThanks again. \nOn Oct 27, 2012, at 10:27 AM, Nick Sutterer notifications@github.com wrote:\n\n> No problem bro I was just kidding :-D\n> \n> Wondering how that could work without receiving an argument in the state. Guess you had a method around, then?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "tobscher": "Unfortunately this code doesn't work with older versions of rails. I will add a commit with some compatibility code.\n. Sure, will do.\n. Unfortunately this code doesn't work with older versions of rails. I will add a commit with some compatibility code.\n. Sure, will do.\n. ",
    "mattiassvedhem": "+1, ran into this today.\n. Awesome! haha love the (brrrr), do you think there's an alternative solution for my particular problem with needing to load javascript at a lower position in the document? \n. Haven't tested without RSpec, but is this how it's supposed to work? =)\n. Ah I see, no what I wanted was to create a simple_form_for that I could pass into the cell, but I guess I'll need to read the code for form_for and simple_form_for, thanks!\n. I'm trying to integration test the rendering of a cell that takes a form object as a parameter, and thus create a form object in my spec. The form object is used to generate part of a settings pane with fields_for. Occurring date scheduling functionality is encapsulated in the cell and then reused throughout different forms.\n. Got any tips for that Nick? =)\n. Nick, thanks, I tried doing that, and I also tried creating a spec/views spec which should mix in `ActionView::TestCase::Behavior`. However as expected(?), I then can't use render_cell, so I need to mix in `Cell::TestCase` somehow, right? :)\n. After some digging I ended up with this, which works!\n\nin `spec/views`\n\n```\ndescribe 'timetable_cell/show' do\n  it \"renders the timetable_box\" do\n    simple_form_for schedulable do |form|\n      timetable = ::Cell::Rails.create_cell_for(\n        'Scheduler::Timetable',\n        Class.new(ActionController::Base).new\n      )\n      .render_state(\n        :with_fields,\n        {\n          schedulable: schedulable,\n          form: form\n        }\n      ).should have_selector(\".timetable_box\")\n    end\n  end\n```\n\nMaybe there's a way to do it without sticking in the controller?\n. +1, ran into this today.\n. Awesome! haha love the (brrrr), do you think there's an alternative solution for my particular problem with needing to load javascript at a lower position in the document? \n. Haven't tested without RSpec, but is this how it's supposed to work? =)\n. Ah I see, no what I wanted was to create a simple_form_for that I could pass into the cell, but I guess I'll need to read the code for form_for and simple_form_for, thanks!\n. I'm trying to integration test the rendering of a cell that takes a form object as a parameter, and thus create a form object in my spec. The form object is used to generate part of a settings pane with fields_for. Occurring date scheduling functionality is encapsulated in the cell and then reused throughout different forms.\n. Got any tips for that Nick? =)\n. Nick, thanks, I tried doing that, and I also tried creating a spec/views spec which should mix in `ActionView::TestCase::Behavior`. However as expected(?), I then can't use render_cell, so I need to mix in `Cell::TestCase` somehow, right? :)\n. After some digging I ended up with this, which works!\n\nin `spec/views`\n\n```\ndescribe 'timetable_cell/show' do\n  it \"renders the timetable_box\" do\n    simple_form_for schedulable do |form|\n      timetable = ::Cell::Rails.create_cell_for(\n        'Scheduler::Timetable',\n        Class.new(ActionController::Base).new\n      )\n      .render_state(\n        :with_fields,\n        {\n          schedulable: schedulable,\n          form: form\n        }\n      ).should have_selector(\".timetable_box\")\n    end\n  end\n```\n\nMaybe there's a way to do it without sticking in the controller?\n. ",
    "n0ne": "big big thank you! somehow forgot about that possibility\n. big big thank you! somehow forgot about that possibility\n. ",
    "lucj": "Hi Nick,\n\nThanks a lot for the quick reply !!!\nIn fact, the whole thing I need to do is a platform that runs several\nwidgets.\nMy first though is to have several views for each widget:\n- show (display info to the user)\n- configuration\n  This is pretty much similar to igoogle or netvibes for instance.\n  For now on, I need to check if this is possible (and also if this is the\n  good approach).\n  I came across Apotomo yesterday and definitively find it really\n  interesting, I still need to follow the tutos to see if this can fit my\n  needs (I'm pretty much sure it will).\n\nThanks for your help,\nCheers,\nLuc\n\nOn Wed, Dec 5, 2012 at 9:14 AM, Nick Sutterer notifications@github.comwrote:\n\n> Hi Luc,\n> \n> what exactly should happen when you click that link? Do you want to reload\n> the widget with the new state? Then you should take a look at Apotomo (\n> http://apotomo.de). Tell me what you need (request-wise), maybe we can do\n> that simply with cells?\n> \n> Cheers\n> \n> On Tue, Dec 4, 2012 at 4:28 PM, Luc notifications@github.com wrote:\n> \n> > Hi,\n> > \n> > I'm following several tutorials on Cells components for Rails and did\n> > not\n> > found how to add a link to another view from within a cell's view.\n> > \n> > I have the \"Test\" cell. Inside this one, 2 methods:\n> > - show\n> > - configure\n> > \n> > Within the show.html.erb I'd like to add a link to the configure view\n> > (and\n> > vice-versa), what is the syntax to use ?\n> > \n> > I tried:\n> > <%= link_to :configure, :action => :configure %>\n> > \n> > or\n> > <%= link_to :configure, :cell => :test, :action => :configure %>\n> > \n> > but this does not target the cell controller.\n> > \n> > Any idea ?\n> > Thanks,\n> > Luc\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/apotonick/cells/issues/146>.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/146#issuecomment-11032888.\n. Thanks a lot, I've checked the screencast, that is great stuff.\n. My knowledge of Apotomo is still limited yet but that sounds really good to me.\n. Hi Nick,\n\nThanks a lot for the quick reply !!!\nIn fact, the whole thing I need to do is a platform that runs several\nwidgets.\nMy first though is to have several views for each widget:\n- show (display info to the user)\n- configuration\n  This is pretty much similar to igoogle or netvibes for instance.\n  For now on, I need to check if this is possible (and also if this is the\n  good approach).\n  I came across Apotomo yesterday and definitively find it really\n  interesting, I still need to follow the tutos to see if this can fit my\n  needs (I'm pretty much sure it will).\n\nThanks for your help,\nCheers,\nLuc\n\nOn Wed, Dec 5, 2012 at 9:14 AM, Nick Sutterer notifications@github.comwrote:\n\n> Hi Luc,\n> \n> what exactly should happen when you click that link? Do you want to reload\n> the widget with the new state? Then you should take a look at Apotomo (\n> http://apotomo.de). Tell me what you need (request-wise), maybe we can do\n> that simply with cells?\n> \n> Cheers\n> \n> On Tue, Dec 4, 2012 at 4:28 PM, Luc notifications@github.com wrote:\n> \n> > Hi,\n> > \n> > I'm following several tutorials on Cells components for Rails and did\n> > not\n> > found how to add a link to another view from within a cell's view.\n> > \n> > I have the \"Test\" cell. Inside this one, 2 methods:\n> > - show\n> > - configure\n> > \n> > Within the show.html.erb I'd like to add a link to the configure view\n> > (and\n> > vice-versa), what is the syntax to use ?\n> > \n> > I tried:\n> > <%= link_to :configure, :action => :configure %>\n> > \n> > or\n> > <%= link_to :configure, :cell => :test, :action => :configure %>\n> > \n> > but this does not target the cell controller.\n> > \n> > Any idea ?\n> > Thanks,\n> > Luc\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/apotonick/cells/issues/146>.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/issues/146#issuecomment-11032888.\n. Thanks a lot, I've checked the screencast, that is great stuff.\n. My knowledge of Apotomo is still limited yet but that sounds really good to me.\n. ",
    "kuraga": "Merge or not to merge? :-D\n. Tests, docs?\n. @graysonwright but why not `'~> 4.7.3'`?\n. I did have this thought some time ago...\n\n_My_ arguments was (/cc @apotonick):\n1) Rails-style (Rails-compatible, see [this](https://github.com/apotonick/cells-filters/issues/3#issuecomment-13118672)),\n2) we can use `ActiveSupport::Callbacks` because of we shouldn't receive arguments, see [this](https://github.com/apotonick/cells-filters/blob/master/README.markdown#limitations)\n\nBut since I have started a real project, I didn't understand (/cc @hauleth):\n1) how to re-render (new) states without state method's argument?\n2) how to re-trigger events without event method's argument?\nRails can't double render. Cells can. Nick, isn't it a key difference?\n\n@apotonick Nick, can _we_ see some code or ideas of \"more view model-like way to render cells which might be exactly what you want!\"? :-) Thanks.\n. @hauleth Each cell is a new instance, but each render isn't.\n\n``` ruby\nclass MyCell < Cells::Rails\n\n  def state1(arg11, arg12)\n    # ok, `args`/`params` hash should be 2-values here\n    render { :state => :state2 }, 'bla_bla'\n  end\n\n  def state2(arg21)\n    # which `args`/`params` hash should be here?!\n    render\n  end\n\nend\n```\n. @apotonick why not? :-)\n. #174 is better :-)\n. @robyurkowski Thanks!\n\nP.S. My aim was to pay attention to my patch only. Nothing personal, thanks!\n. But you did this in Apotomo two days ago :-)\n. Aaaah, ok! I need feedback when you close, please!\n. Just I never have seen a gem without its own (and singular) module :-) Well with submodules, of course...\n. Yeah. So question is wider. Will be Cells 4.0 compatible with <4?\n\nI edited Apotomo's and Cells' code this year. I wanted to make a more-simple-and-tested-and-modern versions of them (explanation: simple - code, not api; modern - don't support old versions, support of Rails `<=current_version` is **20% of code** (https://github.com/kuraga/cells/commit/5cddac93e4046282851e704a84ec506590b5aa6b, https://github.com/kuraga/cells/commit/d7c4b871ab4f270de23a115cfeb5d9659d0da55b)!; tested - just I have some different approach about testing :smile:) But I had no time this year: https://github.com/kuraga/cells/compare/ed5963d9f9b79883d73b071a1fd1430e0f001249...master\n\n**And I saw**: Cells' code is complicated and dirty! I have tried to apply your commits since 3.9.1 into my code. But it's hard to understand something... Well code wasn't perfect year ago but now it's worse.\n\nBut we (you and I) have some different tastes here :smile: So I don't how I can help you here. But in my mind, the main: code has more... We say \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b (bicycles) in Russia. Some own classes, overloaded methods of other libs when you can solve the problem via standard approach but maybe not so beatiful... Code is overcomplicated...\n. Merge or not to merge? :-D\n. Tests, docs?\n. @graysonwright but why not `'~> 4.7.3'`?\n. I did have this thought some time ago...\n\n_My_ arguments was (/cc @apotonick):\n1) Rails-style (Rails-compatible, see [this](https://github.com/apotonick/cells-filters/issues/3#issuecomment-13118672)),\n2) we can use `ActiveSupport::Callbacks` because of we shouldn't receive arguments, see [this](https://github.com/apotonick/cells-filters/blob/master/README.markdown#limitations)\n\nBut since I have started a real project, I didn't understand (/cc @hauleth):\n1) how to re-render (new) states without state method's argument?\n2) how to re-trigger events without event method's argument?\nRails can't double render. Cells can. Nick, isn't it a key difference?\n\n@apotonick Nick, can _we_ see some code or ideas of \"more view model-like way to render cells which might be exactly what you want!\"? :-) Thanks.\n. @hauleth Each cell is a new instance, but each render isn't.\n\n``` ruby\nclass MyCell < Cells::Rails\n\n  def state1(arg11, arg12)\n    # ok, `args`/`params` hash should be 2-values here\n    render { :state => :state2 }, 'bla_bla'\n  end\n\n  def state2(arg21)\n    # which `args`/`params` hash should be here?!\n    render\n  end\n\nend\n```\n. @apotonick why not? :-)\n. #174 is better :-)\n. @robyurkowski Thanks!\n\nP.S. My aim was to pay attention to my patch only. Nothing personal, thanks!\n. But you did this in Apotomo two days ago :-)\n. Aaaah, ok! I need feedback when you close, please!\n. Just I never have seen a gem without its own (and singular) module :-) Well with submodules, of course...\n. Yeah. So question is wider. Will be Cells 4.0 compatible with <4?\n\nI edited Apotomo's and Cells' code this year. I wanted to make a more-simple-and-tested-and-modern versions of them (explanation: simple - code, not api; modern - don't support old versions, support of Rails `<=current_version` is **20% of code** (https://github.com/kuraga/cells/commit/5cddac93e4046282851e704a84ec506590b5aa6b, https://github.com/kuraga/cells/commit/d7c4b871ab4f270de23a115cfeb5d9659d0da55b)!; tested - just I have some different approach about testing :smile:) But I had no time this year: https://github.com/kuraga/cells/compare/ed5963d9f9b79883d73b071a1fd1430e0f001249...master\n\n**And I saw**: Cells' code is complicated and dirty! I have tried to apply your commits since 3.9.1 into my code. But it's hard to understand something... Well code wasn't perfect year ago but now it's worse.\n\nBut we (you and I) have some different tastes here :smile: So I don't how I can help you here. But in my mind, the main: code has more... We say \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b (bicycles) in Russia. Some own classes, overloaded methods of other libs when you can solve the problem via standard approach but maybe not so beatiful... Code is overcomplicated...\n. ",
    "astashov": "Cool! The warning was pretty annoying.\n. Cool! The warning was pretty annoying.\n. ",
    "yasirs": "I have the same issue.\n. I have the same issue.\n. ",
    "stevo": "It is something on my side apparently -  cannot reproduce it in clean project...\n. Yup, using `ActionController::Base.new.render_cell` was not that good idea after all :blush: \n. Well, inside my model (yep, my architecture did need that) i had this \"render\" method, but when rendering non-interactive cells (no forms etc.) it was fairly enough, so I just left\n\n``` ruby\n  def render\n    ActionController::Base.new.render_cell \"/reporting/#{widget}\", :show, :obj => self\n  end\n```\n\nThe error did occur when I've tried to put a form within a cell rendered that way. Still I did need forms in some of my cells, therefore I've used decorator that did already contain context of current controller, and decorated my model overriding `render` method\n\n``` ruby\nclass Reporting::BlockDecorator < ApplicationDecorator\n  def render\n    h.controller.render_cell \"/reporting/#{widget}\", :show, :obj => model\n  end\nend\n```\n. It is something on my side apparently -  cannot reproduce it in clean project...\n. Yup, using `ActionController::Base.new.render_cell` was not that good idea after all :blush: \n. Well, inside my model (yep, my architecture did need that) i had this \"render\" method, but when rendering non-interactive cells (no forms etc.) it was fairly enough, so I just left\n\n``` ruby\n  def render\n    ActionController::Base.new.render_cell \"/reporting/#{widget}\", :show, :obj => self\n  end\n```\n\nThe error did occur when I've tried to put a form within a cell rendered that way. Still I did need forms in some of my cells, therefore I've used decorator that did already contain context of current controller, and decorated my model overriding `render` method\n\n``` ruby\nclass Reporting::BlockDecorator < ApplicationDecorator\n  def render\n    h.controller.render_cell \"/reporting/#{widget}\", :show, :obj => model\n  end\nend\n```\n. ",
    "bbozo": "<3 :) thank you\n. <3 :) thank you\n. ",
    "Paxa": "How to expires this cache and set expires_in?\n. How to expires this cache and set expires_in?\n. ",
    "blankyao": "Sorry, there is a typo in the description, I have corrected it now.\n\nThe value of `lookup_context.formats` will be the default value which is an array with all the availible formats without the patch, for example, assume that I add a custome format named `:mobile`, when processing a request which format is `:mobile`, the value of `lookup_context.formats` in **Rendering** is an array with all the availible formats, not an array only with `:mobile`, which is incorrect. So, we have to set the value to the parent controller's value to correct it.\n. Sorry, there is a typo in the description, I have corrected it now.\n\nThe value of `lookup_context.formats` will be the default value which is an array with all the availible formats without the patch, for example, assume that I add a custome format named `:mobile`, when processing a request which format is `:mobile`, the value of `lookup_context.formats` in **Rendering** is an array with all the availible formats, not an array only with `:mobile`, which is incorrect. So, we have to set the value to the parent controller's value to correct it.\n. ",
    "graysonwright": "Broke on the rails3-0 gemfile, the other three are working.\n\nInvestigating...\n. Remaining failure is unrelated, introduced in b0d93cd.\n\nI recommend merging then fixing that test in a different branch.\n. No problem! I hate seeing red tests.\nOn Jul 18, 2013 7:44 AM, \"Nick Sutterer\" notifications@github.com wrote:\n\n> Thanks @graysonwright https://github.com/graysonwright for fixing that!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/pull/164#issuecomment-21153623\n> .\n. Broke on the rails3-0 gemfile, the other three are working.\n\nInvestigating...\n. Remaining failure is unrelated, introduced in b0d93cd.\n\nI recommend merging then fixing that test in a different branch.\n. No problem! I hate seeing red tests.\nOn Jul 18, 2013 7:44 AM, \"Nick Sutterer\" notifications@github.com wrote:\n\n> Thanks @graysonwright https://github.com/graysonwright for fixing that!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/pull/164#issuecomment-21153623\n> .\n. ",
    "hauleth": "Each cell is new class instance, isn't it? So it should take `args` as constructor param and then render as it is. There will be still separation between each instance of the same cell. Also now it is problem in i.e. testing (RSpec method `render_cell` throw error that there wasn't passed enough arguments, so I needed to use ugly hack `def my_cell_renderer(args = {})`, IMHO it should be in constructor. Another advantage would be that we can create helper method, i.e.\n\n``` ruby\ndef limit\n  args[:limit] || 5\nend\n```\n\nInstead repeating it in every method (DRY).\n. IMHO it should be that all renderers share the same state, as whole cell is\none module, renderers should be only a way to display it. It should work\nlike AngularJS controllers or Marionette modules.\n. Each cell is new class instance, isn't it? So it should take `args` as constructor param and then render as it is. There will be still separation between each instance of the same cell. Also now it is problem in i.e. testing (RSpec method `render_cell` throw error that there wasn't passed enough arguments, so I needed to use ugly hack `def my_cell_renderer(args = {})`, IMHO it should be in constructor. Another advantage would be that we can create helper method, i.e.\n\n``` ruby\ndef limit\n  args[:limit] || 5\nend\n```\n\nInstead repeating it in every method (DRY).\n. IMHO it should be that all renderers share the same state, as whole cell is\none module, renderers should be only a way to display it. It should work\nlike AngularJS controllers or Marionette modules.\n. ",
    "robyurkowski": "Closed in favour of #174.\n. Agreed.\n\n_Rob Yurkowski_\nFreelance Web Developer | Currently Available for Consultation\nrob@yurkowski.net | @robyurkowski https://www.twitter.com/robyurkowski |\n705 . 919 . 4476\n\nOn Thu, Aug 22, 2013 at 10:20 AM, Kurakin Alexander <\nnotifications@github.com> wrote:\n\n> #174 https://github.com/apotonick/cells/issues/174 is better :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/pull/176#issuecomment-23093707\n> .\n. Closed in favour of #174.\n. Agreed.\n\n_Rob Yurkowski_\nFreelance Web Developer | Currently Available for Consultation\nrob@yurkowski.net | @robyurkowski https://www.twitter.com/robyurkowski |\n705 . 919 . 4476\n\nOn Thu, Aug 22, 2013 at 10:20 AM, Kurakin Alexander <\nnotifications@github.com> wrote:\n\n> #174 https://github.com/apotonick/cells/issues/174 is better :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/apotonick/cells/pull/176#issuecomment-23093707\n> .\n. ",
    "jhblacklock": "That did it.  Thanks much!\n. I have had a similar issue with rendering engine cell partials when upgrading to 4.1.1.\n\n```\nrequire \"cell/partial\"\nclass BaseCell < Cell::ViewModel\n  self.view_paths << \"#{::Store::Frontend::Engine.root}/cells\"\n...\nend\n```\n\nrender code\n\n```\n = render partial: 'store/coupon_codes/coupon_code', locals: { coupon_code: my_reward }\n```\n\nERROR\n\n```\nTemplate missing: view: `_coupon_code.haml` prefixes: [\"app/cells/store/coupon_codes\", \"/Users/jacksonblacklock/Sites/store/frontend/cells/store/coupon_codes\"]\n```\n\nview_paths array has the correct path of my partial and I have tried implementing with a view call instead resulting in a similar error.\n. Ah.  Thanks!\n. Perfecto!  Thanks!\n\nOn Thu, Apr 14, 2016 at 7:24 PM, Nick Sutterer notifications@github.com\nwrote:\n\n> You might have to override\n> https://github.com/trailblazer/cells-haml/blob/master/lib/cell/haml.rb#L5\n> and make the :suffix option configurable.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/390#issuecomment-210218601\n\n## \n\nCheck out Lodestone's Omni-Channel capabilities by viewing the following\nquick video:\n_OUR PLATFORM http://youtu.be/yQaBppkuX5M_\n. That did it.  Thanks much!\n. I have had a similar issue with rendering engine cell partials when upgrading to 4.1.1.\n\n```\nrequire \"cell/partial\"\nclass BaseCell < Cell::ViewModel\n  self.view_paths << \"#{::Store::Frontend::Engine.root}/cells\"\n...\nend\n```\n\nrender code\n\n```\n = render partial: 'store/coupon_codes/coupon_code', locals: { coupon_code: my_reward }\n```\n\nERROR\n\n```\nTemplate missing: view: `_coupon_code.haml` prefixes: [\"app/cells/store/coupon_codes\", \"/Users/jacksonblacklock/Sites/store/frontend/cells/store/coupon_codes\"]\n```\n\nview_paths array has the correct path of my partial and I have tried implementing with a view call instead resulting in a similar error.\n. Ah.  Thanks!\n. Perfecto!  Thanks!\n\nOn Thu, Apr 14, 2016 at 7:24 PM, Nick Sutterer notifications@github.com\nwrote:\n\n> You might have to override\n> https://github.com/trailblazer/cells-haml/blob/master/lib/cell/haml.rb#L5\n> and make the :suffix option configurable.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/390#issuecomment-210218601\n\n## \n\nCheck out Lodestone's Omni-Channel capabilities by viewing the following\nquick video:\n_OUR PLATFORM http://youtu.be/yQaBppkuX5M_\n. ",
    "frans-k": "Yeah, that rename makes sense.\n\nI'm working on a project where we already have cells-like components including assets in app/components/blocks, so to not separate the files I (for now) put the cells in the same folder when converting to cells. Not an all that interesting response, I suppose.\n. Here's an example on how it looked and how it looks now.\n\nBefore:\n\n```\n\u251c\u2500\u2500 article\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 article.css.sass\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 article.html.erb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 article.js.coffee\n\nrender_partial 'article/article', type: 'media' # file containing switches on what parts to show\n```\n\nAfter:\n\n```\n\u251c\u2500\u2500 article\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 article.css.sass\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 article.js.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 content.html.erb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 media.html.erb\n\u251c\u2500\u2500 article_cell.rb\n\ncell(:article, article: article).media\n```\n\nCells seemed like the perfect solution. :)\n. Ha, fun!\n1. \n\n```\nCells.setup do |config|\n  config.append_view_path File.join(ROOT_PATH, \"app/components/blocks\")\nend\n```\n1. Explicitly right now.\n\n```\nDir[File.join(ROOT_PATH, 'app/components/blocks/*cell.rb')].each do |name|\n  require name\nend\n```\n1. Yup. It's awesome. I may get back with some feedback/PRs. \n2. They're required manually in application.(js|css) as they're needed. This project should in the future be a library to be re-used across different projects, those projects only requiring the parts they need.\n\n#4 has interesting possibilities, my idea right now is to have some kind of initializer saying\n\n```\nrequire_cell 'article' # or require_block maybe, to make it more domain specific.\n```\n\nAnd by doing that automatically including the assets as well, more or less the same as if they'd have been included in application.(js|css).\n. Yeah, that rename makes sense.\n\nI'm working on a project where we already have cells-like components including assets in app/components/blocks, so to not separate the files I (for now) put the cells in the same folder when converting to cells. Not an all that interesting response, I suppose.\n. Here's an example on how it looked and how it looks now.\n\nBefore:\n\n```\n\u251c\u2500\u2500 article\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 article.css.sass\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 article.html.erb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 article.js.coffee\n\nrender_partial 'article/article', type: 'media' # file containing switches on what parts to show\n```\n\nAfter:\n\n```\n\u251c\u2500\u2500 article\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 article.css.sass\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 article.js.coffee\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 content.html.erb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 media.html.erb\n\u251c\u2500\u2500 article_cell.rb\n\ncell(:article, article: article).media\n```\n\nCells seemed like the perfect solution. :)\n. Ha, fun!\n1. \n\n```\nCells.setup do |config|\n  config.append_view_path File.join(ROOT_PATH, \"app/components/blocks\")\nend\n```\n1. Explicitly right now.\n\n```\nDir[File.join(ROOT_PATH, 'app/components/blocks/*cell.rb')].each do |name|\n  require name\nend\n```\n1. Yup. It's awesome. I may get back with some feedback/PRs. \n2. They're required manually in application.(js|css) as they're needed. This project should in the future be a library to be re-used across different projects, those projects only requiring the parts they need.\n\n#4 has interesting possibilities, my idea right now is to have some kind of initializer saying\n\n```\nrequire_cell 'article' # or require_block maybe, to make it more domain specific.\n```\n\nAnd by doing that automatically including the assets as well, more or less the same as if they'd have been included in application.(js|css).\n. ",
    "musaffa": "Please we need this feature!\n. Rails caches templates with `config.action_view.cache_template_loading` on each server restart. So it knows the digested versions of the templates before hand. During cache key generation within a partial, it also uses the digest of that partial file.\n\n``` Ruby\n# /app/views/projects/_project.html.haml\n- cache project do\n  %h2= link_to project.name, edit_project_path(project)\n  %ul= render partial: 'tasks/task', collection: project.incomplete_tasks\n```\n\nIf the digest changes due to a modification in the partial file, there will be a cache miss.\n. Yes i think so.\n\nThe purpose of this feature is that sometimes we only change the templates without modifying the resources. As the cell states bypass rendering when there's a cache hit, they cannot reflect the changes made in the corresponding templates.\n. Yes we need an option that will do the magic. Before `cache_digest`, the developers were used to include a version number in the cache key after any update in the templates.\n. Please we need this feature!\n. Rails caches templates with `config.action_view.cache_template_loading` on each server restart. So it knows the digested versions of the templates before hand. During cache key generation within a partial, it also uses the digest of that partial file.\n\n``` Ruby\n# /app/views/projects/_project.html.haml\n- cache project do\n  %h2= link_to project.name, edit_project_path(project)\n  %ul= render partial: 'tasks/task', collection: project.incomplete_tasks\n```\n\nIf the digest changes due to a modification in the partial file, there will be a cache miss.\n. Yes i think so.\n\nThe purpose of this feature is that sometimes we only change the templates without modifying the resources. As the cell states bypass rendering when there's a cache hit, they cannot reflect the changes made in the corresponding templates.\n. Yes we need an option that will do the magic. Before `cache_digest`, the developers were used to include a version number in the cache key after any update in the templates.\n. ",
    "reneklacan": "@apotonick Any update on this?. In my current version I utilized Rails's Digestor like this:\r\n\r\n```ruby\r\nclass ApplicationCell < Cell::ViewModel\r\n  @@lookup_context = ActionView::LookupContext.new(::Rails.root.join(\"app/cells\"), {})\r\n\r\n  protected\r\n\r\n  def digest(template)\r\n    ActionView::Digestor.digest(name: template, finder: @@lookup_context)\r\n  end\r\nend\r\n```\r\n\r\n```ruby\r\nclass BananasCell < ApplicationCell\r\n  cache :show do\r\n    digest(\"bananas/show\")\r\n  end\r\nend\r\n```\r\n\r\nNot perfect but it's not too ugly.... @apotonick Any update on this?. In my current version I utilized Rails's Digestor like this:\r\n\r\n```ruby\r\nclass ApplicationCell < Cell::ViewModel\r\n  @@lookup_context = ActionView::LookupContext.new(::Rails.root.join(\"app/cells\"), {})\r\n\r\n  protected\r\n\r\n  def digest(template)\r\n    ActionView::Digestor.digest(name: template, finder: @@lookup_context)\r\n  end\r\nend\r\n```\r\n\r\n```ruby\r\nclass BananasCell < ApplicationCell\r\n  cache :show do\r\n    digest(\"bananas/show\")\r\n  end\r\nend\r\n```\r\n\r\nNot perfect but it's not too ugly.... ",
    "Darkside73": "More details:\n\n```\nDEPRECATION WARNING: The cattr_* method definitions have been moved into \nactive_support/core_ext/module/attribute_accessors. Please require that instead. (called from require at \n/path/to/.rvm/gems/ruby-2.0.0-p353@global/gems/bundler-1.3.0/lib/bundler/runtime.rb:72)\n/path/to/.rvm/gems/ruby-2.0.0-p353@global/gems/cells-3.9.0/lib/cell/base.rb:33:in `<class:Base>': uninitialized \nconstant Cell::Base::Layouts (NameError)\n```\n. More details:\n\n```\nDEPRECATION WARNING: The cattr_* method definitions have been moved into \nactive_support/core_ext/module/attribute_accessors. Please require that instead. (called from require at \n/path/to/.rvm/gems/ruby-2.0.0-p353@global/gems/bundler-1.3.0/lib/bundler/runtime.rb:72)\n/path/to/.rvm/gems/ruby-2.0.0-p353@global/gems/cells-3.9.0/lib/cell/base.rb:33:in `<class:Base>': uninitialized \nconstant Cell::Base::Layouts (NameError)\n```\n. ",
    "aalbagarcia": "Today I tried to upgrade my application from rails 4.0.0 to rails 4.0.2 and got this error when using cells 3.9.0:\n\n```\n# rails --version\nRails 4.0.2\n# rails c\n/home/xxxxx/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/cells-3.9.0/lib/cell/base.rb:33:in `<class:Base>': uninitialized constant Layouts (NameError)\n```\n\nVersion 3.8.8 seems be ok.\n. @apotonick Just upgraded to 2683b82e906f@master and the application launches (using rails 4.0.2). I'll upload to our testing environment to see if anything breaks. thanks!!\n. No bug reports from my colleagues, they where testing it yesterday in our pre-production environment. Thanks again!!\n. Today I tried to upgrade my application from rails 4.0.0 to rails 4.0.2 and got this error when using cells 3.9.0:\n\n```\n# rails --version\nRails 4.0.2\n# rails c\n/home/xxxxx/.rbenv/versions/2.0.0-p247/lib/ruby/gems/2.0.0/gems/cells-3.9.0/lib/cell/base.rb:33:in `<class:Base>': uninitialized constant Layouts (NameError)\n```\n\nVersion 3.8.8 seems be ok.\n. @apotonick Just upgraded to 2683b82e906f@master and the application launches (using rails 4.0.2). I'll upload to our testing environment to see if anything breaks. thanks!!\n. No bug reports from my colleagues, they where testing it yesterday in our pre-production environment. Thanks again!!\n. ",
    "xdite": "FYI\n\n#### 1. Rails move AbstractController::Layouts to ActionView::Layouts\n\nhttps://github.com/rails/rails/commit/c48ce6e73d1f0765902779adab3242b5f4a893c6#diff-cce72102984e8df90cbbf1ca6f261be2\n\n``` ruby\n-    include AbstractController::Rendering, Layouts, Helpers, Callbacks, Translation, Logger\n+    include AbstractController::Rendering, Helpers, Callbacks, Translation, Logger\n+    include ActionView::Layouts\n```\n\n#### 2. Rails 4.1 no longer needs append path. So just remove it, it works\n\n``` ruby\n   module Engines\n     module VersionStrategy\n       def registered_engines\n-        ::Rails::Engine::Railties.engines\n+        ::Rails::Engine::Railties\n       end\n```\n\n``` ruby\n     def self.append_engines_view_paths_for(config)\n       return if config.view_path_engines == false\n\n-      engines = config.view_path_engines || registered_engines  #::Rails::Application::Railties.engines\n-      engines.each {|engine| append_engine_view_path!(engine) }\n+   #   engines = config.view_path_engines   #::Rails::Application::Railties.engines\n+   #   engines.each {|engine| append_engine_view_path!(engine) }\n     end\n```\n. FYI\n\n#### 1. Rails move AbstractController::Layouts to ActionView::Layouts\n\nhttps://github.com/rails/rails/commit/c48ce6e73d1f0765902779adab3242b5f4a893c6#diff-cce72102984e8df90cbbf1ca6f261be2\n\n``` ruby\n-    include AbstractController::Rendering, Layouts, Helpers, Callbacks, Translation, Logger\n+    include AbstractController::Rendering, Helpers, Callbacks, Translation, Logger\n+    include ActionView::Layouts\n```\n\n#### 2. Rails 4.1 no longer needs append path. So just remove it, it works\n\n``` ruby\n   module Engines\n     module VersionStrategy\n       def registered_engines\n-        ::Rails::Engine::Railties.engines\n+        ::Rails::Engine::Railties\n       end\n```\n\n``` ruby\n     def self.append_engines_view_paths_for(config)\n       return if config.view_path_engines == false\n\n-      engines = config.view_path_engines || registered_engines  #::Rails::Application::Railties.engines\n-      engines.each {|engine| append_engine_view_path!(engine) }\n+   #   engines = config.view_path_engines   #::Rails::Application::Railties.engines\n+   #   engines.each {|engine| append_engine_view_path!(engine) }\n     end\n```\n. ",
    "jmuheim": "I found some answers already. I didn't notice that I have to explicitly accept an `args` parameters for my `show` action:\n\n``` ruby\n  def show(args)\n    @user = args[:user]\n    render\n  end\n```\n\nNow I can rely on `@user` in my view:\n\n``` slim\n- if @user.present?\n  p Welcome, #{@user.username}!\n```\n\nI'm already pretty sure that it's not good practice to rely on external methods or anything like that. What's your opinion about it? :+1: \n. Thanks for your comments, guys. This seems very reasonable, and I think I will always pass the needed objects into the cells from now on and won't rely on any environment stuff anymore. :+1: \n. It's working, thanks. What do you mean with \"in the first place\"?\n. I found some answers already. I didn't notice that I have to explicitly accept an `args` parameters for my `show` action:\n\n``` ruby\n  def show(args)\n    @user = args[:user]\n    render\n  end\n```\n\nNow I can rely on `@user` in my view:\n\n``` slim\n- if @user.present?\n  p Welcome, #{@user.username}!\n```\n\nI'm already pretty sure that it's not good practice to rely on external methods or anything like that. What's your opinion about it? :+1: \n. Thanks for your comments, guys. This seems very reasonable, and I think I will always pass the needed objects into the cells from now on and won't rely on any environment stuff anymore. :+1: \n. It's working, thanks. What do you mean with \"in the first place\"?\n. ",
    "crokobit": "GREAT!\n. GREAT!\n. ",
    "bibendi": ":up: \n. No\nI need dynamic options for cache_store\nhttps://github.com/apotonick/cells/blob/master/lib/cell/caching.rb#L88\n\nWe use this gem https://github.com/take-five/rails-cache-tags\nand want to generate on the fly tags for caching\n. Yes\n. :up: \n. No\nI need dynamic options for cache_store\nhttps://github.com/apotonick/cells/blob/master/lib/cell/caching.rb#L88\n\nWe use this gem https://github.com/take-five/rails-cache-tags\nand want to generate on the fly tags for caching\n. Yes\n. ",
    "aaronjensen": "They do this it looks like: https://github.com/rails/rails/blob/master/actionpack/lib/abstract_controller/railties/routes_helpers.rb\n\nWhich they include here: https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/railtie.rb#L47-L48\n. Yeah :/\n\n`isolate_namespace` was implemented the same way in 3.2: https://github.com/rails/rails/blob/4baf145375ee4ef712799b0c96c2aeadc5060015/railties/lib/rails/engine.rb#L379\n\nbut in 3.1 it doesn't look like it was the same way exactly: https://github.com/rails/rails/blob/171173122887cb35b60432a79c5c34cdd36f18d5/railties/lib/rails/engine.rb#L359\n\nHere is the commit going from 3.1 to 3.2: https://github.com/rails/rails/commit/fd86a1b6b068df87164d5763bdcd4a323a1e76f4\n\nSo they just accessed things more directly instead of defining an explicit contract.\n. They do this it looks like: https://github.com/rails/rails/blob/master/actionpack/lib/abstract_controller/railties/routes_helpers.rb\n\nWhich they include here: https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/railtie.rb#L47-L48\n. Yeah :/\n\n`isolate_namespace` was implemented the same way in 3.2: https://github.com/rails/rails/blob/4baf145375ee4ef712799b0c96c2aeadc5060015/railties/lib/rails/engine.rb#L379\n\nbut in 3.1 it doesn't look like it was the same way exactly: https://github.com/rails/rails/blob/171173122887cb35b60432a79c5c34cdd36f18d5/railties/lib/rails/engine.rb#L359\n\nHere is the commit going from 3.1 to 3.2: https://github.com/rails/rails/commit/fd86a1b6b068df87164d5763bdcd4a323a1e76f4\n\nSo they just accessed things more directly instead of defining an explicit contract.\n. ",
    "sveredyuk": "I have the same issue... On my regular rails views for correct paths i used `link_to 'Home', mynamespace.root_path`... what i must to do that include this `mynamespace` helper method to my cells ?\n. I have some issue when trying to spec views by capybara in engines.\n\n`Cell::ViewModel.view_paths = %w[engines/core/app/cells]`\n\n`ActionView::Template::Error: Template missing: view:`show.slim`prefixes [\"engines/core/app/cells/my_namespace/flash\", \"engines/core/app/cells/my_namespace/application\"]\n`\n\nIn development ENV everything is OK, but rspec don't run.\n\nI render the cell with:\n`cell 'my_namespace/flash'`\n\nHow i can solve this ?\n. @apotonick \n\n```\n  s.add_dependency 'cells',                    '~> 4.0.5'\n  s.add_dependency 'cells-slim',             '~> 0.0.5'\n```\n. Yes, i added, without it, it wouldn't work in any env.\n\nWhen remove it:\n`Template missing: view:`show.slim`prefixes: [\"app/cells/my_namespace/flash\", \"app/cells/my_namespace/application\"]`\n\nBut i think this issue is only rspec related. Because every time when i am trying spec with view rendering or capybara i got exception \n`ActionView::Template::Error: Template missing: view:show.slim prefixes [\"engines/core/app/cells/my_namespace/flash\", \"engines/core/app/cells/my_namespace/application\"]`\n\nBut show.slim is present.\n. I have the same issue... On my regular rails views for correct paths i used `link_to 'Home', mynamespace.root_path`... what i must to do that include this `mynamespace` helper method to my cells ?\n. I have some issue when trying to spec views by capybara in engines.\n\n`Cell::ViewModel.view_paths = %w[engines/core/app/cells]`\n\n`ActionView::Template::Error: Template missing: view:`show.slim`prefixes [\"engines/core/app/cells/my_namespace/flash\", \"engines/core/app/cells/my_namespace/application\"]\n`\n\nIn development ENV everything is OK, but rspec don't run.\n\nI render the cell with:\n`cell 'my_namespace/flash'`\n\nHow i can solve this ?\n. @apotonick \n\n```\n  s.add_dependency 'cells',                    '~> 4.0.5'\n  s.add_dependency 'cells-slim',             '~> 0.0.5'\n```\n. Yes, i added, without it, it wouldn't work in any env.\n\nWhen remove it:\n`Template missing: view:`show.slim`prefixes: [\"app/cells/my_namespace/flash\", \"app/cells/my_namespace/application\"]`\n\nBut i think this issue is only rspec related. Because every time when i am trying spec with view rendering or capybara i got exception \n`ActionView::Template::Error: Template missing: view:show.slim prefixes [\"engines/core/app/cells/my_namespace/flash\", \"engines/core/app/cells/my_namespace/application\"]`\n\nBut show.slim is present.\n. ",
    "dreyks": "I'm using `include Engine.routes.url_helpers`\n\n``` ruby\nmodule MySuperEngine\n  class MySuperCell < Cell::ViewModel\n    include Engine.routes.url_helpers\n\n    def my_super_method\n      link_to 'whatever', engine_specific_path_without_any_namespaces_needed\n    end\n  end\nend\n```\n. [view_model.rb#L19](https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L19) sais just `self.view_paths = [\"app/cells\"]` which is wrong if the cell is inside an engine\n. the thing is that `engines.rb` seems to be outdated, cause it uses `Cell::Rails` which isn't even present in cells 4.0\n\nthe immediate workaround for me is to use \n\n`render view: :show, base: [\"#{path_to_my_engine}/app/cells\"]` in my `show` action\n. so `Cell::Collection#join` is the public API? that's good then, waiting for that 4.1 to release. Thx\n. ok, how is this supposed to look like in an erb template?\n\n``` erb\n<%= cell('item', collection: @item).join do |cell, index| %>\n  <% cell.(:show, first_call: index.zero?) %>\n<% end.html_safe %>\n```\n\nAm I doing this right? Looks not particularly nice, especially because of the need of `html_safe`\n. Uhm, that gem does not exist yet, does it?\n\nOther than that, would be nice if index was merged into options, passed to `@cell_class#build`, though you may consider this being too much magic)\n. :+1: \n. Ok, got it, thanks\n\nBut what about code change? Right now I have to `Rails.cache.clear` after each deploy that changes code in cell class, which is sub-optimal\n. This is not as straightforward to implement as I thought. Rails' `cache` is a view helper, and therefore it knows from which template it was called. Cells' cache on the other hand is called without any knowledge about the template that would render.\n\nWill look into this closer when I have free time\n. Yeah, that's what I thought too, but then again, someone can do\n\n``` ruby\ndef show\n  render :surprise\nend\n```\n\nand how will we know that... \n\nHow do I find the chat-room in gitter?\n. #402 \n. Yeah, after spending some time fiddling with template digesting I gave up and now use a Capistrano task that clears cell caches for cells whose file were changed between deploys\n. yup, had to downgrade `uber` to `0.0.15`. this is still an issue for cells@v4.1.5. the workaround is\r\n```ruby\r\nUber::Options.class_eval do\r\n  alias_method :call, :evaluate\r\nend\r\n```. I'm using `include Engine.routes.url_helpers`\n\n``` ruby\nmodule MySuperEngine\n  class MySuperCell < Cell::ViewModel\n    include Engine.routes.url_helpers\n\n    def my_super_method\n      link_to 'whatever', engine_specific_path_without_any_namespaces_needed\n    end\n  end\nend\n```\n. [view_model.rb#L19](https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L19) sais just `self.view_paths = [\"app/cells\"]` which is wrong if the cell is inside an engine\n. the thing is that `engines.rb` seems to be outdated, cause it uses `Cell::Rails` which isn't even present in cells 4.0\n\nthe immediate workaround for me is to use \n\n`render view: :show, base: [\"#{path_to_my_engine}/app/cells\"]` in my `show` action\n. so `Cell::Collection#join` is the public API? that's good then, waiting for that 4.1 to release. Thx\n. ok, how is this supposed to look like in an erb template?\n\n``` erb\n<%= cell('item', collection: @item).join do |cell, index| %>\n  <% cell.(:show, first_call: index.zero?) %>\n<% end.html_safe %>\n```\n\nAm I doing this right? Looks not particularly nice, especially because of the need of `html_safe`\n. Uhm, that gem does not exist yet, does it?\n\nOther than that, would be nice if index was merged into options, passed to `@cell_class#build`, though you may consider this being too much magic)\n. :+1: \n. Ok, got it, thanks\n\nBut what about code change? Right now I have to `Rails.cache.clear` after each deploy that changes code in cell class, which is sub-optimal\n. This is not as straightforward to implement as I thought. Rails' `cache` is a view helper, and therefore it knows from which template it was called. Cells' cache on the other hand is called without any knowledge about the template that would render.\n\nWill look into this closer when I have free time\n. Yeah, that's what I thought too, but then again, someone can do\n\n``` ruby\ndef show\n  render :surprise\nend\n```\n\nand how will we know that... \n\nHow do I find the chat-room in gitter?\n. #402 \n. Yeah, after spending some time fiddling with template digesting I gave up and now use a Capistrano task that clears cell caches for cells whose file were changed between deploys\n. yup, had to downgrade `uber` to `0.0.15`. this is still an issue for cells@v4.1.5. the workaround is\r\n```ruby\r\nUber::Options.class_eval do\r\n  alias_method :call, :evaluate\r\nend\r\n```. ",
    "seuros": "The code is becoming too dirty, i think we should drop support for unsupported versions of rails.\n. It make no sense to sense to keep support for old rails versions if we not going to have all feature for all. People using unsupported version of rails didn't care to update their app , they won't care updating cells. They can always lock to old version of cells.\n. It make the code cleaner and the tests too . no more rails version check. It your gem, I'm not going to insist.\n. :+1:\n. @LinkedHK Seo will adapt with time. I remember when i was typing ruby on rails few years ago and end up to a video clip of this [singer](http://en.wikipedia.org/wiki/Ruby_%28Egyptian_singer%29) near a train station\n. Yes. use cell.\n. Please rebase!\n. Yes. Cells 4 is not ready yet.\n. We decided to removed haml support from cells core and extract it to an external gem.\nOnly legacy erb will be supported by default.\n. add `cells-haml` in your Gemfile.\n. What are you using?\n. Try with `cells-erb`\n. @Undistraction : Probably because we are working on it :smile_cat: \n. Yes. Correct\n. If you using the same view, then a hash is preferred. \nelse go for multiple actions.\n\nPS: Don't be afraid from the Classes.\n. We are aware of this. A fix will be availble hopefully this weekend.\n. <img src=\"http://s3.amazonaws.com/rapgenius/house_of_cards.jpg\" />\n`Le ActionView ...`\n\nU can't touch this.\n. @MaximAbramchuck This is not a cell issue. Slim is supported in 2+. \nI will ping you this weekend to test an implementation, if you have rails 4.x . \nRails 3.2 will never support slim without this warning since it has hardcoded the tilt version in sprocket.\n. can you pr it ?\n. Yes, we could that. We have to find the commit before Cells 4.2 and branch it, then you can send a PR against that branch.\n. If i recall correctly, those selectors are extracted to another gem in 4.2.\n. @balauru : It is. \n. @st0mir can you try with my fork + addition of cells-haml ?\nhttps://github.com/trailblazer/cells-haml\n. Can you send a PR ?\n. You should use either my fork or cell-4 branch. Master is too hacky.\n@apotonick we should merge cell cell-4 to master.\n. I'm going to fix  it\n. :cocktail: \n. cells-haml is for cells 4.x only.\n. You can alias it via a monkey patch if you want, officially version 3 api won't change to not cause the failing tests apocalypse. \n. 5 minutes .\n. add `gem 'cells-haml'`\n. you need to have rspec-cells from master.\n. https://github.com/apotonick/rspec-cells\n. add cells-erb gem\n. or use rspec-cells from master\n. what about http://trailblazer.from ?\n. The code is becoming too dirty, i think we should drop support for unsupported versions of rails.\n. It make no sense to sense to keep support for old rails versions if we not going to have all feature for all. People using unsupported version of rails didn't care to update their app , they won't care updating cells. They can always lock to old version of cells.\n. It make the code cleaner and the tests too . no more rails version check. It your gem, I'm not going to insist.\n. :+1:\n. @LinkedHK Seo will adapt with time. I remember when i was typing ruby on rails few years ago and end up to a video clip of this [singer](http://en.wikipedia.org/wiki/Ruby_%28Egyptian_singer%29) near a train station\n. Yes. use cell.\n. Please rebase!\n. Yes. Cells 4 is not ready yet.\n. We decided to removed haml support from cells core and extract it to an external gem.\nOnly legacy erb will be supported by default.\n. add `cells-haml` in your Gemfile.\n. What are you using?\n. Try with `cells-erb`\n. @Undistraction : Probably because we are working on it :smile_cat: \n. Yes. Correct\n. If you using the same view, then a hash is preferred. \nelse go for multiple actions.\n\nPS: Don't be afraid from the Classes.\n. We are aware of this. A fix will be availble hopefully this weekend.\n. <img src=\"http://s3.amazonaws.com/rapgenius/house_of_cards.jpg\" />\n`Le ActionView ...`\n\nU can't touch this.\n. @MaximAbramchuck This is not a cell issue. Slim is supported in 2+. \nI will ping you this weekend to test an implementation, if you have rails 4.x . \nRails 3.2 will never support slim without this warning since it has hardcoded the tilt version in sprocket.\n. can you pr it ?\n. Yes, we could that. We have to find the commit before Cells 4.2 and branch it, then you can send a PR against that branch.\n. If i recall correctly, those selectors are extracted to another gem in 4.2.\n. @balauru : It is. \n. @st0mir can you try with my fork + addition of cells-haml ?\nhttps://github.com/trailblazer/cells-haml\n. Can you send a PR ?\n. You should use either my fork or cell-4 branch. Master is too hacky.\n@apotonick we should merge cell cell-4 to master.\n. I'm going to fix  it\n. :cocktail: \n. cells-haml is for cells 4.x only.\n. You can alias it via a monkey patch if you want, officially version 3 api won't change to not cause the failing tests apocalypse. \n. 5 minutes .\n. add `gem 'cells-haml'`\n. you need to have rspec-cells from master.\n. https://github.com/apotonick/rspec-cells\n. add cells-erb gem\n. or use rspec-cells from master\n. what about http://trailblazer.from ?\n. ",
    "mrfoto": "And in gemspec. I'd do a PR, but http://cells.trailblazerb.org/ doesn't seem to be working either.\n. And in gemspec. I'd do a PR, but http://cells.trailblazerb.org/ doesn't seem to be working either.\n. ",
    "LinkedHK": "My suggestion is to rename this repository to something more SEO friendly. For example: WidgetsForRails \nAfter typing in google \"Rails widgets\" it shows me links to some shitty tutorials which suggest to use jquery to implement widgets. :file_folder:  \n. Yo Mr. Sutterer, I appreciate your time and mine , and before to submit this ticket I had carefully viewed multiple times and followed steps as described in a documentation of the 'readme' master repository  https://github.com/apotonick/cells  \n\nThe issue still remains  unresolved. \n\nThe following code should work according to the documentation, right?\n\n# My cells widget:\n\n```\nclass ItemCell < Cell::ViewModel\n  def list\n    @items = ItemPresenter.new(Item.all.limit(10))\n    render\n  end\n  def item_li(item)\n    @item = item\n    render\n  end\nend\n```\n\n# My cell view\n\n```\n  <% @items.list_items do |item| %>\n        <%= item_li( item )   %>\n    <% end %>\n```\n\nI got it working only  by including an old version of cells gem, and replacing . `cell` helper by  `render_cell` \nAlso the question:  If the documentation for a newer version of gem which hasn't been released yet, why it's placed into master repository? I had to dig into repository to find out the latest stable version  3.3. \n. lol :hankey: \n. No, That's Hankey's ~~~~ :package: \n. Hoi, \nI'm now using the latest stable gem.. looks like 4.0 gem will be released in a few days.. \nThe method \"render_cells\".. as far as I know this method is removed in not yet released v 4.0 .. \nSeems like I would have to do refactoring,don't it? :facepunch: \n. @seuros  Ok, Thank you  for response Mr. Seuros  :)\n. @apotonick  Thanks for the link :)\nMy question just was about whether or not method render_cell to be removed in the v 4.0 . I got an answer from @seuros \nThanks :)\n. :facepunch: \n. My suggestion is to rename this repository to something more SEO friendly. For example: WidgetsForRails \nAfter typing in google \"Rails widgets\" it shows me links to some shitty tutorials which suggest to use jquery to implement widgets. :file_folder:  \n. Yo Mr. Sutterer, I appreciate your time and mine , and before to submit this ticket I had carefully viewed multiple times and followed steps as described in a documentation of the 'readme' master repository  https://github.com/apotonick/cells  \n\nThe issue still remains  unresolved. \n\nThe following code should work according to the documentation, right?\n\n# My cells widget:\n\n```\nclass ItemCell < Cell::ViewModel\n  def list\n    @items = ItemPresenter.new(Item.all.limit(10))\n    render\n  end\n  def item_li(item)\n    @item = item\n    render\n  end\nend\n```\n\n# My cell view\n\n```\n  <% @items.list_items do |item| %>\n        <%= item_li( item )   %>\n    <% end %>\n```\n\nI got it working only  by including an old version of cells gem, and replacing . `cell` helper by  `render_cell` \nAlso the question:  If the documentation for a newer version of gem which hasn't been released yet, why it's placed into master repository? I had to dig into repository to find out the latest stable version  3.3. \n. lol :hankey: \n. No, That's Hankey's ~~~~ :package: \n. Hoi, \nI'm now using the latest stable gem.. looks like 4.0 gem will be released in a few days.. \nThe method \"render_cells\".. as far as I know this method is removed in not yet released v 4.0 .. \nSeems like I would have to do refactoring,don't it? :facepunch: \n. @seuros  Ok, Thank you  for response Mr. Seuros  :)\n. @apotonick  Thanks for the link :)\nMy question just was about whether or not method render_cell to be removed in the v 4.0 . I got an answer from @seuros \nThanks :)\n. :facepunch: \n. ",
    "gokul-hashlearn": "#Solved.\nUsing 'render partial:' instead of 'render view' in the cell's view ensured that the cell's controller name is  not prefixed to the template's name.\n. No, it doesn't seem to be documented. \nAs for the use case - \nI have a Cell that is used by the views of a couple of different controllers. This cell encapsulates a section of a page and takes an optional header partial and footer partial as local vars. These partials are the ones that are global, so that any view that uses that cell can also control the header and footer.\n. Pull request - https://github.com/apotonick/cells/pull/207\n\nOn Tue, Jul 8, 2014 at 5:32 PM, Nick Sutterer notifications@github.com\nwrote:\n\n> Interesting. So you just passing the partial symbol, like :header_v2 and\n> then render in the cell? I understand, since that is non-cell stuff these\n> views don't go into the cell.\n> \n> That's a really interesting use case, I'd like to make that simpler in\n> general. Do the partials need to be partials or could they be cells, again\n> (different cells, for each controller)?\n> \n> Could you add a quick section about :partial in the README? Thanks [image:\n> :fireworks:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/206#issuecomment-48327052.\n. #Solved.\nUsing 'render partial:' instead of 'render view' in the cell's view ensured that the cell's controller name is  not prefixed to the template's name.\n. No, it doesn't seem to be documented. \nAs for the use case - \nI have a Cell that is used by the views of a couple of different controllers. This cell encapsulates a section of a page and takes an optional header partial and footer partial as local vars. These partials are the ones that are global, so that any view that uses that cell can also control the header and footer.\n. Pull request - https://github.com/apotonick/cells/pull/207\n\nOn Tue, Jul 8, 2014 at 5:32 PM, Nick Sutterer notifications@github.com\nwrote:\n\n> Interesting. So you just passing the partial symbol, like :header_v2 and\n> then render in the cell? I understand, since that is non-cell stuff these\n> views don't go into the cell.\n> \n> That's a really interesting use case, I'd like to make that simpler in\n> general. Do the partials need to be partials or could they be cells, again\n> (different cells, for each controller)?\n> \n> Could you add a quick section about :partial in the README? Thanks [image:\n> :fireworks:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/206#issuecomment-48327052.\n. ",
    "spheregenomics": "Thanks Nick, I'll check out the repo in more detail. I am just finishing up a large Rails / Angular app, and I am thinking going back to a more traditional Rails app for my next project. Cells looks quite sensible. Happy to put together a demo app if I go forward with them. Looking forward to the book.\n\nByron wouldn't be a bad place to be coding from.\n. OK mate you've convinced me. I'll be starting the new app in August\nsometime, and cells & Apotomo are just what I need. I'll let you know how\nit goes.\n\nSean\n\nOn 10 July 2014 09:37, Nick Sutterer notifications@github.com wrote:\n\n> Byron is horrible, just came back from the surf and the waves were too big\n> and it's way too warm for winter!!!!\n> \n> Definitely come back to Rails - with Trailblazer, a new wind is blowing,\n> you're gonna like it.\n> \n> Let me know if I can help you with Cells. I should be able to work on the\n> demo app for TB in about 2 weeks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/208#issuecomment-48573795.\n. I am an Aussie... living in Geneva at the moment. Not too many waves over\nhere!\n\nLooks like you putting a lot of work into this Rails+ framework of yours.\nRails it a great, and now mature framework, but it needs .... something. I\nthink you might be onto it!\n\nOn 10 July 2014 09:54, Nick Sutterer notifications@github.com wrote:\n\n> [image: :+1:][image: :+1:][image: :+1:][image: :+1:][image: :+1:][image:\n> :+1:]\n> \n> And Reform forms for forms and contracts, and representers for your APIs\n> and Operations for your domain logic!\n> \n> Are you Aussie?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/208#issuecomment-48575000.\n. It's been pouring rain here for a week... Geneva summer!\n\nOn 11 July 2014 10:59, Nick Sutterer notifications@github.com wrote:\n\n> It's a tough job, but someone's gotta do it... [image: :wink:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/208#issuecomment-48708738.\n. Thanks Nick, I'll check out the repo in more detail. I am just finishing up a large Rails / Angular app, and I am thinking going back to a more traditional Rails app for my next project. Cells looks quite sensible. Happy to put together a demo app if I go forward with them. Looking forward to the book.\n\nByron wouldn't be a bad place to be coding from.\n. OK mate you've convinced me. I'll be starting the new app in August\nsometime, and cells & Apotomo are just what I need. I'll let you know how\nit goes.\n\nSean\n\nOn 10 July 2014 09:37, Nick Sutterer notifications@github.com wrote:\n\n> Byron is horrible, just came back from the surf and the waves were too big\n> and it's way too warm for winter!!!!\n> \n> Definitely come back to Rails - with Trailblazer, a new wind is blowing,\n> you're gonna like it.\n> \n> Let me know if I can help you with Cells. I should be able to work on the\n> demo app for TB in about 2 weeks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/208#issuecomment-48573795.\n. I am an Aussie... living in Geneva at the moment. Not too many waves over\nhere!\n\nLooks like you putting a lot of work into this Rails+ framework of yours.\nRails it a great, and now mature framework, but it needs .... something. I\nthink you might be onto it!\n\nOn 10 July 2014 09:54, Nick Sutterer notifications@github.com wrote:\n\n> [image: :+1:][image: :+1:][image: :+1:][image: :+1:][image: :+1:][image:\n> :+1:]\n> \n> And Reform forms for forms and contracts, and representers for your APIs\n> and Operations for your domain logic!\n> \n> Are you Aussie?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/208#issuecomment-48575000.\n. It's been pouring rain here for a week... Geneva summer!\n\nOn 11 July 2014 10:59, Nick Sutterer notifications@github.com wrote:\n\n> It's a tough job, but someone's gotta do it... [image: :wink:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/208#issuecomment-48708738.\n. ",
    "d4rky-pl": "Only that I spent 20 minutes looking for a gem that downloaded trailblazer as a dependency before I found out that it's cells themselves. It simply spreads confusion when you're listing available generators and find something called 'trailblazer' (the fact that I knew of this project is not always true for other developers who were introduced and taught how to use cells by other people).\n\nI agree that having the concept file layout is neat but maybe you should rename these generators to be in cells namespace.\n. No, no, they don't but they make it look like it when you list all your Rails generators and find trailblazer's namespace there.\n. Only that I spent 20 minutes looking for a gem that downloaded trailblazer as a dependency before I found out that it's cells themselves. It simply spreads confusion when you're listing available generators and find something called 'trailblazer' (the fact that I knew of this project is not always true for other developers who were introduced and taught how to use cells by other people).\n\nI agree that having the concept file layout is neat but maybe you should rename these generators to be in cells namespace.\n. No, no, they don't but they make it look like it when you list all your Rails generators and find trailblazer's namespace there.\n. ",
    "stgeneral": "Here is the line where it loads that rake task https://github.com/apotonick/cells/blob/master/lib/cells/railtie.rb#L35.\n\nI think that loading rake tasks should be optional.\nProbably it would be enough to check if rspec-cell gem is loaded and do no load `test:cells` task.\n. Or move test suite into a separate gem like rspec-cells.\n. Here is the line where it loads that rake task https://github.com/apotonick/cells/blob/master/lib/cells/railtie.rb#L35.\n\nI think that loading rake tasks should be optional.\nProbably it would be enough to check if rspec-cell gem is loaded and do no load `test:cells` task.\n. Or move test suite into a separate gem like rspec-cells.\n. ",
    "Iazel": "I've applied you're patch to HAML and tried with ERB, but the issue remain :(\nDebugging it, seems that the output of `form_for` is ok, it's as you expect it, but then, at some point that I'm still researching, it just get screwed up.\n. Rails 4.1.5\n\nJust know I'm also thinking that. This is the compiled erb template code (beautyfied a little):\n\n``` ruby\ndef _app_cells_product_form_show_html_erb__2110851674852849489_70010274372100(local_assigns, output_buffer)\n  _old_virtual_path, @virtual_path = @virtual_path, \"product_form/show\"\n  _old_output_buffer = @output_buffer\n\n  @output_buffer = output_buffer || ActionView::OutputBuffer.new\n  @output_buffer.safe_append='Hello\n  '.freeze\n  @output_buffer.append=  helper.form_for(model) do |f|\n    @output_buffer.safe_append='\n    '.freeze\n    @output_buffer.append=( f.text_field :name )\n    @output_buffer.safe_append='\n    '.freeze\n  end \n  @output_buffer.safe_append='World\n  '.freeze\n  @output_buffer.to_s\nensure\n  @virtual_path, @output_buffer = _old_virtual_path, _old_output_buffer\nend\n```\n\nI think the problem is the use of `@output_buffer` in the block, but I'm not 100% sure: even if the same buffer is used, the block's content will duplicate, doesn't it? I'm still missing something, hence I'm going to further debug this :)\n. The method that compile the template is `ActionView::Template#compile` and you can see the result of compilation using a debugger (I'm on ruby 2.1, hence I'm using `byebug`) and stopping at `/path/to/gems/actionview-4.1.5/lib/action_view/template.rb:292` you can then print the `source` variable :+1: \nObviously you can also tampering it, and it's what I'm doing right know to introduce debug's break ;)\nYou can stop before the code is generated (269) and then inspect what the builder does.\n\n**UPDATE**\nOk, I think I've understand it know. `form_builder` use `caputure` and this use `with_output_buffer`:\n\n``` ruby\n# Use an alternate output buffer for the duration of the block.\n# Defaults to a new empty string.\ndef with_output_buffer(buf = nil) #:nodoc:\n  unless buf\n    buf = ActionView::OutputBuffer.new\n    buf.force_encoding(output_buffer.encoding) if output_buffer\n  end\n  self.output_buffer, old_buffer = buf, output_buffer\n  yield\n  output_buffer\nensure\n  self.output_buffer = old_buffer\nend\n```\n\nThe problem is in the `yield`, because the content is evaluated in the cell context instead of the `helper` one, hence the new buffer will remain empty and the cell's current buffer will be used.\n. I'm thinking a lot for this, but I can't find a good solution, not for the current architecture at least.\nWe could execute the block in the current context (the helper's one), but other problems could arise and, more importantly, will take away the possibility of using our ViewModel's methods in the block (and that's exactly why I need this particular ViewModel).\n\nAny ideas?\n\n**UPDATE**\nOk, now I think I have enough knowledge to edit the HAML compiled code and use a different buffer for blocks, instead of using the global one. Thanks to this, the `form_for` (and any other code that require a block) can rid off the `capture` dependencies and just use the result of the block. This should fix the issue.\nProbably we could remove the entire `with_output_buffer`.\nIn my opinion, this solution is a lot cleaner than use `with_output_buffer` and I can't really understand why they doesn't implemented it this way already.\nEven if it's true that a new buffer will be created for each block, I can't think at any method/helper that require a block _and_ doesn't use `capture`, hence at the end this should give a tiny boost in performance.\n\nHowever, this will work only in HAML and not in ERB or any other template builder...\nGems should not be a problem, because `capture` can also be rewrote to take advantage of the block's internal buffer (could be practically a yield).\n\nDo you think I should implement this? Should I contact someone of Rails to propose this modification?\n. Can you give me some insight on how/where Cell render templates? It should use ActionView, and if we can substitute the `@builder` with a custom one (only when they use HAML, of course), the rest should be easy :)\nAnd we should also override `with_output_buffer` of `ViewModel` (the `view_context` to be more specifically), as a first iteration at least.\n. I also dislike this part of rails, but even if we implements a slender template manager only for cells, we cannot use the helper approach because any method that require a block will cause problem. Namely, they use `with_output_block` to introduce a temporary buffer, expecting the block to use it, BUT cell's template manager will not use it, causing the problem that we already have.\n\nPlus, the solution of a custom template for only cells, isn't that good, because at the end the helper will call its `with_output_block`. The only two possibilities I can think about are: monkeypatch AV and the Builder (haml, erb, ...) so that `with_output_block` is practically a yield; replace AV with something else (and tweak the builders).\n. Replace AV is not a big problem, but using the helpers approach is.\nTake another look at the compiled template:\n\n``` ruby\n# ...  \n@output_buffer.append=  helper.form_for(model) do |f|\n    @output_buffer.safe_append='\n    '.freeze\n    @output_buffer.append=( f.text_field :name )\n    @output_buffer.safe_append='\n    '.freeze\n  end \n# ...\n```\n\nWhen you use `helper.form_for`, the global buffer will be temporary replaced  with a new one so that the block can be captured. However, the block itself is bound to the cell's context, not the helper's one, causing the temp buffer to remain empty and the block's result to be appended to the cell's one.\nThat's why the input tag is rendered before the form one, while the latter is empty.\n\nTechnically the buffer is not _global_, any instance of AV has it's own, but if I got this correctly, rails use the same AV instance for every template.\n\nAgain, this is a problem only if you want to use another instance of AV as a helpers container.\n. Any block is bound to the context where it is created, try this\n\n``` ruby\nclass A\n  def m\n    @a = 1\n    yield\n  end\nend\n\nA.new.m { @a }\n# => nil\n\n@a = 3\nA.new.m { @a }\n# => 3\n```\n\nWhy this returns `nil` first? Because the block context isn't the instance of `A`, but, in this case at least, the global context.  Hence, even if we change `@a` in the instance, this will not affected the block, that instead will consider the `@a` of the global context, as you can see in the second example.\nThat's exactly the cause because we cannot bypass the helper's buffer.\n\n``` ruby\nclass A\n  def m(&block)\n    @a = 1\n    instance_exec &block\n  end\nend\n```\n\nThis approach evaluate the block in the instance context, and example of before will always return `1`, BUT we cannot use this solution in this case because all the power of the cell itself will vanish:\n\n``` haml\n= helper.form_for(m) do |f|\n  = f.text_field :name\n  = override_me\n```\n\nIn this case `override_me` will be a method of ViewModel, see it as an entry point for extensions, but if we bound the block to the `helper` context, `override_me` will be also evaluated in that context and an error will raise.\n\nAgain, the solution isn't that difficult, but I think the only way is to directly modify `ActionView#with_output_buffer` _and_ every template manager therefore blocks will use an internal buffer, that will be the result of the block itself.\n\nReally, it's harder to explain than to implements, but require the collaboration both of Rails and all the people that manage gems like HAML, Erubis, etc... Quite the big thing for a small, yet useful change.\n. Awesome! I can't wait for the new release :+1:\n\nBy the way, I've made the test pass, take a look:\nhttps://github.com/Iazel/cells/blob/patch-1/test/vm/render_test.rb#L81\n\nThis should also correct the logical issue because this thread started; we should do something similar to HAML to make it work.\nBefore I thought we also need to monkey patch `ActionView#capture` or `ActionView#with_output_block`, but your test point out that's unnecessary (even if doing so will speed up a bit).\n\nSorry if took me so long, but sadly I've time only in the weekends to code anything else than work >__<\n\nPS: It's normal that clean Tilt::ErbTemplate doesn't manage the block at all? It compile this:\n\n``` ruby\n_erbout << ( content_tag(:span) do ).to_s;\n```\n\nAnd that's clearly wrong...\n. Sorry, I haven't much time in this days and I've never released a gem >__< I will release it as soon as possible!\n\nOk, it's simpler than I though, maybe I can do it now...\n\nPS: Did you check the gem for template inheritance?\n. Why isn't this supported on a lower level? I'm asking this myself! \u00b0_\u00b0 It seems that Erubis doesn't support blocks AT ALL, try this:\n\n``` ruby\nrequire 'erubis'\nputs Erubis::Eruby.new(<<-RUBY\n<%= content_tag(:form) do %>\n     <%= Hello World %>\n<% end %>\nRUBY\n).src\n```\n\nIt will compile into a string containing:\n\n``` ruby\n( content_tag(:form) do ).to_s\n```\n\nAnd that's damn wrong. I've searched into their site, and there's no mention to blocks.\n\nFor what I know, HAML supports block, but doesn't give them an internal buffer as I've done with Erubis (it's easier to achieve), hence has problem with helpers.\n\nBy the way, the code gives an internal buffer to each block, called by the name of the buffer + `_tmp`. This also works with nested blocks; at each level a new `_tmp` is appended and removed on exit.\n\n**UPDATE**\nI've just digging in HAML code, and as I thought they have a rails-like approach: instead of manage the problem at low level, they just implements a `capture_haml` method, that do what we already discussed in #211 \n. I'm fixing it right now, therefore blocks will returns their contents instead of appending directly in the main buffer. Even if HAML already supports block, they use an haml-flavored `capture` and just replaced various helpers, so I don't think anymore all the blame is on Rails.\n\nRegarding Erubis, I found it's not updated since 2011 \u00b0_\u00b0 I've done this repo and add full block supports. I've also tried to contact the author, but I'm not sure the email account is still active...\n\nBy the way, It's basically the solution I've showed you, plus a fix for blocks that should not output.\nhttps://github.com/Iazel/erubis\n\nPS: do you use any IM?\n. I think you can use this new version of erubis like that:\n\n``` ruby\n# Gemfile\ngem 'erubis', github: 'Iazel/erubis'\n```\n\nFor now I stick with that name because change is _really_ small compared to all the other stuff.\n\nUsing one template engine per cell makes a lot of sense.\nRegarding the escaping, do you want to do something like that?\n\n``` ruby\n# ...\n   def author_name!\n      html_escape(author_name)\n   end\n# ...\n```\n\nWe can also add a macro to create this kind of methods:\n\n``` ruby\nescapes :author_name, :desc\n# or\nproperty :author_name, escape: true\n```\n. I think the change introduced should not hindrance already existing code (but can't be 100% sure xD).\nIf I recall it correctly, you can disable HAML auto escaping passing `escape_html: false` as an option to the engine.\n\nI've also done HAML buffer, but need some fix so that all the other tests will pass. You can give it a look here:\nhttps://github.com/Iazel/haml/tree/block_internal_buffer\n. I'm starting to think that would be better find a new framework xD Have you ever used Padrino? The main point of rails is the tons of gems available...\n. Do helpers work with HAML? If not, can you tell me some that don't work?\n\nI'm glad you like it :) I like `cells` a lot too, so I'm _very_ happy to contribute to its improvement :+1: \nIt will be even better if we could introduce some convenient view inheritance system, just like Django, Twig, & Co, but haven't found a way without a full cooperation of the template engine...\n\nAnd yes, the best thing would be rewrite a good amount of helpers so that they use the block directly instead of `capture`, but this is only feasible if the HAML group accept my work... We'll see!\n. Sure, go on! I've also found an old gem that should introduce template inheritance in rails, but I haven't tried it:\nhttps://github.com/botanicus/rails-template-inheritance\n\nI'm really curios about how he does it!\n. If you take a look at that gem, it's a block oriented solution xD Read this:\nhttps://github.com/botanicus/rango/wiki/template-inheritance\n\nAnd yes, I think I've figured out a way to do it as Django or Twig do, but it's still highly coupled to the template engine :(\n\n**UPDATE**\nOk, I've found this stand alone version of the previous gem:\nhttps://github.com/botanicus/template-inheritance\n\nNow I've understood how it works, its more a composition approach at runtime instead of the class inheritance at compile time of Twig (and I think of Django), so it's less powerful and slow, but totally embeddable in cells and the new rendering system! This is based on Tilt too.\nI think we can also support some kind of auto-extends for child views.\nLuckily (some) code doesn't go bad :D \n. Ahahah, you're right xD Sadly I've big lack: I'm not good with mundane and easy tasks, they just don't entertain me and I tend to neglect them in favor of other more interesting and complex things XD\n\nBut again, you're right, I've to do it. However, any way to change the target repo?\n. Nope, I've made a mistake and made a pull-request for merging this branch into `master` instead of `4-0-no-actionview` >__<\n\nGlad you can understand :beers: \n. Uhmm... If that branch is already merged into master, then I've to pull that one, I think that's why there's conflicts. I'm fixing it\n. Ok, know it's just a missing EOL. I think you should put it :)\n. Sorry, I'll keep that in mind the next time! I usually pull before starting to work on something (even if this time I've got the wrong branch ^^\"), but I can see why it doesn't suit this case xD I'm still a newbie when comes to github and code collaboration ^^\"\n\nSpeaking of ERB, even if blocks are supported, we still need a `capture` method, because all current view's helpers that use a block use it, but this time should be a lot simpler:\n\n``` ruby\ndef capture(*args)\n  yield(*args)\nend\n```\n. Yes, it works even with the current implementation of `capture`, but know is unnecessary and the above code should be enough (and faster) :P\n\nFor HAML, I've already made a pull request, but received only a comment on a tricky part of the code and nothing else >__<\n. Sure: haml/haml#801\n. I've applied you're patch to HAML and tried with ERB, but the issue remain :(\nDebugging it, seems that the output of `form_for` is ok, it's as you expect it, but then, at some point that I'm still researching, it just get screwed up.\n. Rails 4.1.5\n\nJust know I'm also thinking that. This is the compiled erb template code (beautyfied a little):\n\n``` ruby\ndef _app_cells_product_form_show_html_erb__2110851674852849489_70010274372100(local_assigns, output_buffer)\n  _old_virtual_path, @virtual_path = @virtual_path, \"product_form/show\"\n  _old_output_buffer = @output_buffer\n\n  @output_buffer = output_buffer || ActionView::OutputBuffer.new\n  @output_buffer.safe_append='Hello\n  '.freeze\n  @output_buffer.append=  helper.form_for(model) do |f|\n    @output_buffer.safe_append='\n    '.freeze\n    @output_buffer.append=( f.text_field :name )\n    @output_buffer.safe_append='\n    '.freeze\n  end \n  @output_buffer.safe_append='World\n  '.freeze\n  @output_buffer.to_s\nensure\n  @virtual_path, @output_buffer = _old_virtual_path, _old_output_buffer\nend\n```\n\nI think the problem is the use of `@output_buffer` in the block, but I'm not 100% sure: even if the same buffer is used, the block's content will duplicate, doesn't it? I'm still missing something, hence I'm going to further debug this :)\n. The method that compile the template is `ActionView::Template#compile` and you can see the result of compilation using a debugger (I'm on ruby 2.1, hence I'm using `byebug`) and stopping at `/path/to/gems/actionview-4.1.5/lib/action_view/template.rb:292` you can then print the `source` variable :+1: \nObviously you can also tampering it, and it's what I'm doing right know to introduce debug's break ;)\nYou can stop before the code is generated (269) and then inspect what the builder does.\n\n**UPDATE**\nOk, I think I've understand it know. `form_builder` use `caputure` and this use `with_output_buffer`:\n\n``` ruby\n# Use an alternate output buffer for the duration of the block.\n# Defaults to a new empty string.\ndef with_output_buffer(buf = nil) #:nodoc:\n  unless buf\n    buf = ActionView::OutputBuffer.new\n    buf.force_encoding(output_buffer.encoding) if output_buffer\n  end\n  self.output_buffer, old_buffer = buf, output_buffer\n  yield\n  output_buffer\nensure\n  self.output_buffer = old_buffer\nend\n```\n\nThe problem is in the `yield`, because the content is evaluated in the cell context instead of the `helper` one, hence the new buffer will remain empty and the cell's current buffer will be used.\n. I'm thinking a lot for this, but I can't find a good solution, not for the current architecture at least.\nWe could execute the block in the current context (the helper's one), but other problems could arise and, more importantly, will take away the possibility of using our ViewModel's methods in the block (and that's exactly why I need this particular ViewModel).\n\nAny ideas?\n\n**UPDATE**\nOk, now I think I have enough knowledge to edit the HAML compiled code and use a different buffer for blocks, instead of using the global one. Thanks to this, the `form_for` (and any other code that require a block) can rid off the `capture` dependencies and just use the result of the block. This should fix the issue.\nProbably we could remove the entire `with_output_buffer`.\nIn my opinion, this solution is a lot cleaner than use `with_output_buffer` and I can't really understand why they doesn't implemented it this way already.\nEven if it's true that a new buffer will be created for each block, I can't think at any method/helper that require a block _and_ doesn't use `capture`, hence at the end this should give a tiny boost in performance.\n\nHowever, this will work only in HAML and not in ERB or any other template builder...\nGems should not be a problem, because `capture` can also be rewrote to take advantage of the block's internal buffer (could be practically a yield).\n\nDo you think I should implement this? Should I contact someone of Rails to propose this modification?\n. Can you give me some insight on how/where Cell render templates? It should use ActionView, and if we can substitute the `@builder` with a custom one (only when they use HAML, of course), the rest should be easy :)\nAnd we should also override `with_output_buffer` of `ViewModel` (the `view_context` to be more specifically), as a first iteration at least.\n. I also dislike this part of rails, but even if we implements a slender template manager only for cells, we cannot use the helper approach because any method that require a block will cause problem. Namely, they use `with_output_block` to introduce a temporary buffer, expecting the block to use it, BUT cell's template manager will not use it, causing the problem that we already have.\n\nPlus, the solution of a custom template for only cells, isn't that good, because at the end the helper will call its `with_output_block`. The only two possibilities I can think about are: monkeypatch AV and the Builder (haml, erb, ...) so that `with_output_block` is practically a yield; replace AV with something else (and tweak the builders).\n. Replace AV is not a big problem, but using the helpers approach is.\nTake another look at the compiled template:\n\n``` ruby\n# ...  \n@output_buffer.append=  helper.form_for(model) do |f|\n    @output_buffer.safe_append='\n    '.freeze\n    @output_buffer.append=( f.text_field :name )\n    @output_buffer.safe_append='\n    '.freeze\n  end \n# ...\n```\n\nWhen you use `helper.form_for`, the global buffer will be temporary replaced  with a new one so that the block can be captured. However, the block itself is bound to the cell's context, not the helper's one, causing the temp buffer to remain empty and the block's result to be appended to the cell's one.\nThat's why the input tag is rendered before the form one, while the latter is empty.\n\nTechnically the buffer is not _global_, any instance of AV has it's own, but if I got this correctly, rails use the same AV instance for every template.\n\nAgain, this is a problem only if you want to use another instance of AV as a helpers container.\n. Any block is bound to the context where it is created, try this\n\n``` ruby\nclass A\n  def m\n    @a = 1\n    yield\n  end\nend\n\nA.new.m { @a }\n# => nil\n\n@a = 3\nA.new.m { @a }\n# => 3\n```\n\nWhy this returns `nil` first? Because the block context isn't the instance of `A`, but, in this case at least, the global context.  Hence, even if we change `@a` in the instance, this will not affected the block, that instead will consider the `@a` of the global context, as you can see in the second example.\nThat's exactly the cause because we cannot bypass the helper's buffer.\n\n``` ruby\nclass A\n  def m(&block)\n    @a = 1\n    instance_exec &block\n  end\nend\n```\n\nThis approach evaluate the block in the instance context, and example of before will always return `1`, BUT we cannot use this solution in this case because all the power of the cell itself will vanish:\n\n``` haml\n= helper.form_for(m) do |f|\n  = f.text_field :name\n  = override_me\n```\n\nIn this case `override_me` will be a method of ViewModel, see it as an entry point for extensions, but if we bound the block to the `helper` context, `override_me` will be also evaluated in that context and an error will raise.\n\nAgain, the solution isn't that difficult, but I think the only way is to directly modify `ActionView#with_output_buffer` _and_ every template manager therefore blocks will use an internal buffer, that will be the result of the block itself.\n\nReally, it's harder to explain than to implements, but require the collaboration both of Rails and all the people that manage gems like HAML, Erubis, etc... Quite the big thing for a small, yet useful change.\n. Awesome! I can't wait for the new release :+1:\n\nBy the way, I've made the test pass, take a look:\nhttps://github.com/Iazel/cells/blob/patch-1/test/vm/render_test.rb#L81\n\nThis should also correct the logical issue because this thread started; we should do something similar to HAML to make it work.\nBefore I thought we also need to monkey patch `ActionView#capture` or `ActionView#with_output_block`, but your test point out that's unnecessary (even if doing so will speed up a bit).\n\nSorry if took me so long, but sadly I've time only in the weekends to code anything else than work >__<\n\nPS: It's normal that clean Tilt::ErbTemplate doesn't manage the block at all? It compile this:\n\n``` ruby\n_erbout << ( content_tag(:span) do ).to_s;\n```\n\nAnd that's clearly wrong...\n. Sorry, I haven't much time in this days and I've never released a gem >__< I will release it as soon as possible!\n\nOk, it's simpler than I though, maybe I can do it now...\n\nPS: Did you check the gem for template inheritance?\n. Why isn't this supported on a lower level? I'm asking this myself! \u00b0_\u00b0 It seems that Erubis doesn't support blocks AT ALL, try this:\n\n``` ruby\nrequire 'erubis'\nputs Erubis::Eruby.new(<<-RUBY\n<%= content_tag(:form) do %>\n     <%= Hello World %>\n<% end %>\nRUBY\n).src\n```\n\nIt will compile into a string containing:\n\n``` ruby\n( content_tag(:form) do ).to_s\n```\n\nAnd that's damn wrong. I've searched into their site, and there's no mention to blocks.\n\nFor what I know, HAML supports block, but doesn't give them an internal buffer as I've done with Erubis (it's easier to achieve), hence has problem with helpers.\n\nBy the way, the code gives an internal buffer to each block, called by the name of the buffer + `_tmp`. This also works with nested blocks; at each level a new `_tmp` is appended and removed on exit.\n\n**UPDATE**\nI've just digging in HAML code, and as I thought they have a rails-like approach: instead of manage the problem at low level, they just implements a `capture_haml` method, that do what we already discussed in #211 \n. I'm fixing it right now, therefore blocks will returns their contents instead of appending directly in the main buffer. Even if HAML already supports block, they use an haml-flavored `capture` and just replaced various helpers, so I don't think anymore all the blame is on Rails.\n\nRegarding Erubis, I found it's not updated since 2011 \u00b0_\u00b0 I've done this repo and add full block supports. I've also tried to contact the author, but I'm not sure the email account is still active...\n\nBy the way, It's basically the solution I've showed you, plus a fix for blocks that should not output.\nhttps://github.com/Iazel/erubis\n\nPS: do you use any IM?\n. I think you can use this new version of erubis like that:\n\n``` ruby\n# Gemfile\ngem 'erubis', github: 'Iazel/erubis'\n```\n\nFor now I stick with that name because change is _really_ small compared to all the other stuff.\n\nUsing one template engine per cell makes a lot of sense.\nRegarding the escaping, do you want to do something like that?\n\n``` ruby\n# ...\n   def author_name!\n      html_escape(author_name)\n   end\n# ...\n```\n\nWe can also add a macro to create this kind of methods:\n\n``` ruby\nescapes :author_name, :desc\n# or\nproperty :author_name, escape: true\n```\n. I think the change introduced should not hindrance already existing code (but can't be 100% sure xD).\nIf I recall it correctly, you can disable HAML auto escaping passing `escape_html: false` as an option to the engine.\n\nI've also done HAML buffer, but need some fix so that all the other tests will pass. You can give it a look here:\nhttps://github.com/Iazel/haml/tree/block_internal_buffer\n. I'm starting to think that would be better find a new framework xD Have you ever used Padrino? The main point of rails is the tons of gems available...\n. Do helpers work with HAML? If not, can you tell me some that don't work?\n\nI'm glad you like it :) I like `cells` a lot too, so I'm _very_ happy to contribute to its improvement :+1: \nIt will be even better if we could introduce some convenient view inheritance system, just like Django, Twig, & Co, but haven't found a way without a full cooperation of the template engine...\n\nAnd yes, the best thing would be rewrite a good amount of helpers so that they use the block directly instead of `capture`, but this is only feasible if the HAML group accept my work... We'll see!\n. Sure, go on! I've also found an old gem that should introduce template inheritance in rails, but I haven't tried it:\nhttps://github.com/botanicus/rails-template-inheritance\n\nI'm really curios about how he does it!\n. If you take a look at that gem, it's a block oriented solution xD Read this:\nhttps://github.com/botanicus/rango/wiki/template-inheritance\n\nAnd yes, I think I've figured out a way to do it as Django or Twig do, but it's still highly coupled to the template engine :(\n\n**UPDATE**\nOk, I've found this stand alone version of the previous gem:\nhttps://github.com/botanicus/template-inheritance\n\nNow I've understood how it works, its more a composition approach at runtime instead of the class inheritance at compile time of Twig (and I think of Django), so it's less powerful and slow, but totally embeddable in cells and the new rendering system! This is based on Tilt too.\nI think we can also support some kind of auto-extends for child views.\nLuckily (some) code doesn't go bad :D \n. Ahahah, you're right xD Sadly I've big lack: I'm not good with mundane and easy tasks, they just don't entertain me and I tend to neglect them in favor of other more interesting and complex things XD\n\nBut again, you're right, I've to do it. However, any way to change the target repo?\n. Nope, I've made a mistake and made a pull-request for merging this branch into `master` instead of `4-0-no-actionview` >__<\n\nGlad you can understand :beers: \n. Uhmm... If that branch is already merged into master, then I've to pull that one, I think that's why there's conflicts. I'm fixing it\n. Ok, know it's just a missing EOL. I think you should put it :)\n. Sorry, I'll keep that in mind the next time! I usually pull before starting to work on something (even if this time I've got the wrong branch ^^\"), but I can see why it doesn't suit this case xD I'm still a newbie when comes to github and code collaboration ^^\"\n\nSpeaking of ERB, even if blocks are supported, we still need a `capture` method, because all current view's helpers that use a block use it, but this time should be a lot simpler:\n\n``` ruby\ndef capture(*args)\n  yield(*args)\nend\n```\n. Yes, it works even with the current implementation of `capture`, but know is unnecessary and the above code should be enough (and faster) :P\n\nFor HAML, I've already made a pull request, but received only a comment on a tricky part of the code and nothing else >__<\n. Sure: haml/haml#801\n. ",
    "incorvia": "Thanks so much for guidance!  \n. Just referencing this issue which seems to be related: https://github.com/carrierwaveuploader/carrierwave/issues/1020\n. Ok, I think I have a bit of a handle on this now.  When you call \"image_tag\" in the standard AssetTagHelper it calls a method path_to_image which calls a method asset_path in AssetUrlHeper which calls a method compute_asset_path.  This method also in AssetUrlHelper is meant to be overridden and it is by sprockets-rails: https://github.com/rails/sprockets-rails/blob/master/lib/sprockets/rails/helper.rb#L65. This is the critical method.  If the result of calling asset_digest_path is nil (which it will be if the Sprockets ENV is not set in the included class) then super is called and the default '/images' path is used.  In order to set the Sprockets ENV in the included Cell I found you need to do the following:\n\n```\nclass NavbarCell < Cell::ViewModel\n include Sprockets::Rails::Helper\n\n  self.assets_prefix = Rails.application.config.assets.prefix\n  self.assets_environment = Rails.application.assets\n\n  def show\n    render\n  end\nend\n```\n\nMaybe there is a better way to do this.  I also don't know if there are other Sprocket Settings that need to be copied in lest there be unintended side effects.. Will probably just see how it goes for now. \n. Ha. :+1:  Thanks for making such an awesome library.  \n. For future reference you also have to copy over whether digesting is turned on, otherwise the assets won't have the digest hash appended in production:\n\n```\n    self.digest_assets = Rails.application.config.assets[:digest]\n```\n. I can't get a link_to block to work with or without a wrapper.. same error...\n. I'm not using haml\nOn Feb 15, 2015 11:49 AM, \"Abdelkader Boudih\" notifications@github.com\nwrote:\n\n> add cells-haml in your Gemfile.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/247#issuecomment-74425104.\n. Erb, like in the example above.\n. Thanks for the suggestion, but that did not works.. not sure what's up...\n. In fact no block seems to work (I'm using Master btw).. so\n\n```\n<%= content_for :test do %>\n  <p>hello</p>\n<% end %>\n```\n. To be clear for the following template\n\n```\n<%= content_for(\"/\") do %>\n  <p>hi</p>\n<% end %>\n```\n\nI get the error\n\napp/cells/navbar/show.erb:1: syntax error, unexpected ')' _erbout << ( content_for(\"/\") do ).to_s; _erbout << ' ^ app/cells/navbar/show.erb:8: syntax error, unexpected keyword_ensure, expecting ')' app/cells/navbar/show.erb:10: syntax error, unexpected keyword_end, expecting ')'\n. Also seeing this issue.. I guess the line is in templates.rb\n\n```\n      Tilt.new(\"#{base}/#{prefix}/#{view}\", :escape_html => false, :escape_attrs => false)\n```\n\nIs attempting to use Tilt with cells-slim when slim doesn't support these options.. Obviously you know this but just posting here for posterity.. and to bump :)\n. This issue still exists for ERB users.. \n\n```\n<%= content_tag(:div) { \"hi\" } %>\n```\n\nProvides the given error:\n\n```\nundefined method `encoding' for []:Array\n```\n. If this is easy to backport would be nice.\n. Thanks so much for guidance!  \n. Just referencing this issue which seems to be related: https://github.com/carrierwaveuploader/carrierwave/issues/1020\n. Ok, I think I have a bit of a handle on this now.  When you call \"image_tag\" in the standard AssetTagHelper it calls a method path_to_image which calls a method asset_path in AssetUrlHeper which calls a method compute_asset_path.  This method also in AssetUrlHelper is meant to be overridden and it is by sprockets-rails: https://github.com/rails/sprockets-rails/blob/master/lib/sprockets/rails/helper.rb#L65. This is the critical method.  If the result of calling asset_digest_path is nil (which it will be if the Sprockets ENV is not set in the included class) then super is called and the default '/images' path is used.  In order to set the Sprockets ENV in the included Cell I found you need to do the following:\n\n```\nclass NavbarCell < Cell::ViewModel\n include Sprockets::Rails::Helper\n\n  self.assets_prefix = Rails.application.config.assets.prefix\n  self.assets_environment = Rails.application.assets\n\n  def show\n    render\n  end\nend\n```\n\nMaybe there is a better way to do this.  I also don't know if there are other Sprocket Settings that need to be copied in lest there be unintended side effects.. Will probably just see how it goes for now. \n. Ha. :+1:  Thanks for making such an awesome library.  \n. For future reference you also have to copy over whether digesting is turned on, otherwise the assets won't have the digest hash appended in production:\n\n```\n    self.digest_assets = Rails.application.config.assets[:digest]\n```\n. I can't get a link_to block to work with or without a wrapper.. same error...\n. I'm not using haml\nOn Feb 15, 2015 11:49 AM, \"Abdelkader Boudih\" notifications@github.com\nwrote:\n\n> add cells-haml in your Gemfile.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/247#issuecomment-74425104.\n. Erb, like in the example above.\n. Thanks for the suggestion, but that did not works.. not sure what's up...\n. In fact no block seems to work (I'm using Master btw).. so\n\n```\n<%= content_for :test do %>\n  <p>hello</p>\n<% end %>\n```\n. To be clear for the following template\n\n```\n<%= content_for(\"/\") do %>\n  <p>hi</p>\n<% end %>\n```\n\nI get the error\n\napp/cells/navbar/show.erb:1: syntax error, unexpected ')' _erbout << ( content_for(\"/\") do ).to_s; _erbout << ' ^ app/cells/navbar/show.erb:8: syntax error, unexpected keyword_ensure, expecting ')' app/cells/navbar/show.erb:10: syntax error, unexpected keyword_end, expecting ')'\n. Also seeing this issue.. I guess the line is in templates.rb\n\n```\n      Tilt.new(\"#{base}/#{prefix}/#{view}\", :escape_html => false, :escape_attrs => false)\n```\n\nIs attempting to use Tilt with cells-slim when slim doesn't support these options.. Obviously you know this but just posting here for posterity.. and to bump :)\n. This issue still exists for ERB users.. \n\n```\n<%= content_tag(:div) { \"hi\" } %>\n```\n\nProvides the given error:\n\n```\nundefined method `encoding' for []:Array\n```\n. If this is easy to backport would be nice.\n. ",
    "thetron": "@incorvia Life saver! This one was driving my crazy! :beers: \n. @incorvia Life saver! This one was driving my crazy! :beers: \n. ",
    "gavinkflam": "@incorvia Thanks! You saved my life!\n@apotonick Would the helpers be included in future release?\n. @incorvia Thanks! You saved my life!\n@apotonick Would the helpers be included in future release?\n. ",
    "bingxie": "I tried: delegates :parent_controller, :image_tag\n\nBut it said: undefined method `image_tag' for #ProductsController:0x007ffce7c0f260\n\nI am using Rails 4.2.5\n. ok, ok, no rails! thanks for you quick response!\n. Actually, It doesn't work. :(\n. thanks @PikachuEXE \n. I tried: delegates :parent_controller, :image_tag\n\nBut it said: undefined method `image_tag' for #ProductsController:0x007ffce7c0f260\n\nI am using Rails 4.2.5\n. ok, ok, no rails! thanks for you quick response!\n. Actually, It doesn't work. :(\n. thanks @PikachuEXE \n. ",
    "anaumov": "Sometimes it works, sometimes doesn't. Any suggestions?\n. Sometimes it works, sometimes doesn't. Any suggestions?\n. ",
    "AndreiMashkov": "Unfortunately these hacks don't work for me starting from Rails 4.2.5 so I have to move Sprockets environment initialization to application.rb (or to the separate initializer). This snippet helps (after_initialize is crucial here):\n\n```\n    config.after_initialize do |app|\n      Cell::ViewModel.send(:include, Sprockets::Rails::Helper)\n\n      Cell::ViewModel.assets_prefix       = app.config.assets.prefix\n      Cell::ViewModel.assets_environment  = app.assets\n      Cell::ViewModel.digest_assets       = app.config.assets[:digest]\n      Cell::ViewModel.assets_manifest     = app.assets_manifest\n      Cell::ViewModel.resolve_assets_with = app.config.assets.resolve_with\n\n      Cell::ViewModel.precompiled_asset_checker = -> logical_path { app.asset_precompiled?(logical_path) }\n    end\n```\n. Unfortunately these hacks don't work for me starting from Rails 4.2.5 so I have to move Sprockets environment initialization to application.rb (or to the separate initializer). This snippet helps (after_initialize is crucial here):\n\n```\n    config.after_initialize do |app|\n      Cell::ViewModel.send(:include, Sprockets::Rails::Helper)\n\n      Cell::ViewModel.assets_prefix       = app.config.assets.prefix\n      Cell::ViewModel.assets_environment  = app.assets\n      Cell::ViewModel.digest_assets       = app.config.assets[:digest]\n      Cell::ViewModel.assets_manifest     = app.assets_manifest\n      Cell::ViewModel.resolve_assets_with = app.config.assets.resolve_with\n\n      Cell::ViewModel.precompiled_asset_checker = -> logical_path { app.asset_precompiled?(logical_path) }\n    end\n```\n. ",
    "sebabouche": "@AndreiMashkov :+1: Thanks so much! I couldn't solve this and was sending the whole sprocketed url with `options[:url]`. Dirty dev ^^\n. @AndreiMashkov :+1: Thanks so much! I couldn't solve this and was sending the whole sprocketed url with `options[:url]`. Dirty dev ^^\n. ",
    "apneadiving": "Would help to have something to replace `asset_url` as well.\nI tend to agree with rails mess described here.\nIn the meantime I use:\n\n```\n  URI.join(\n    my_method_to_retrieve_base_url, \n    ::ActionController::Base.helpers.asset_path('liner.png')\n  )\n```\n. Seems the solution [lies here ](https://github.com/apotonick/cells/blob/master/lib/cell/prefixes.rb#L12) with a hook to change prefixes if need be.\nI'll try and close in case of success\n. I confirm this works\n\n``` ruby\nclass AbstractCell < Cell::ViewModel\n\n  def self.prefixes\n    custom_list = super\n    if custom_path.present?\n      custom_list = custom_list.map {|path| path.gsub('app/cells', \"app/cells/#{custom_path}\")} + custom_list\n    end\n    custom_list\n  end\n\n  def self.custom_path\n    Thread.current[:custom_path]\n  end\nend\n```\n\nI would be curious to hear your thoughts about it\n. :)\n\nDo you feel relying on the Thread is ok?\n\n> On 15 Mar 2016, at 06:14, Nick Sutterer notifications@github.com wrote:\n> \n> Hey Ben!!! Good to see you here!\n> \n> That's correct, the #prefixes method is designed to do that. We played with other ideas but this is pretty straight-forward and simple.\n> \n> Let me know if you need more help!\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/385#issuecomment-196665143\n. It does thanks.\n\nHaving an additional param doesnt please me that much though: I'd have 20 cells to update.\n\nI like the idea behind Rails' prepend_view_path so I'll stick with this :)\n\nThanks for your answers :)\n\n> On 16 Mar 2016, at 04:49, Nick Sutterer notifications@github.com wrote:\n> \n> Hell no, that's a global variable, but that's your problem haha! You could also inject the custom path as an option and then use the :prefixes option when rendering: https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L167\n> \n> Does that help?\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly or view it on GitHub\n. Would help to have something to replace `asset_url` as well.\nI tend to agree with rails mess described here.\nIn the meantime I use:\n\n```\n  URI.join(\n    my_method_to_retrieve_base_url, \n    ::ActionController::Base.helpers.asset_path('liner.png')\n  )\n```\n. Seems the solution [lies here ](https://github.com/apotonick/cells/blob/master/lib/cell/prefixes.rb#L12) with a hook to change prefixes if need be.\nI'll try and close in case of success\n. I confirm this works\n\n``` ruby\nclass AbstractCell < Cell::ViewModel\n\n  def self.prefixes\n    custom_list = super\n    if custom_path.present?\n      custom_list = custom_list.map {|path| path.gsub('app/cells', \"app/cells/#{custom_path}\")} + custom_list\n    end\n    custom_list\n  end\n\n  def self.custom_path\n    Thread.current[:custom_path]\n  end\nend\n```\n\nI would be curious to hear your thoughts about it\n. :)\n\nDo you feel relying on the Thread is ok?\n\n> On 15 Mar 2016, at 06:14, Nick Sutterer notifications@github.com wrote:\n> \n> Hey Ben!!! Good to see you here!\n> \n> That's correct, the #prefixes method is designed to do that. We played with other ideas but this is pretty straight-forward and simple.\n> \n> Let me know if you need more help!\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/385#issuecomment-196665143\n. It does thanks.\n\nHaving an additional param doesnt please me that much though: I'd have 20 cells to update.\n\nI like the idea behind Rails' prepend_view_path so I'll stick with this :)\n\nThanks for your answers :)\n\n> On 16 Mar 2016, at 04:49, Nick Sutterer notifications@github.com wrote:\n> \n> Hell no, that's a global variable, but that's your problem haha! You could also inject the custom path as an option and then use the :prefixes option when rendering: https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L167\n> \n> Does that help?\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly or view it on GitHub\n. ",
    "vwall": "I'm also using master and getting the same error \"uninitialized constant Cell::Base\" when calling `=cell(:item)`\n\nLooks like it's calling `::Cell::Base.cell(name, self, *args, &block)` on line 8 of rails.rb\n. Thanks!  Figured I was missing something simple.  \n. I'm also using master and getting the same error \"uninitialized constant Cell::Base\" when calling `=cell(:item)`\n\nLooks like it's calling `::Cell::Base.cell(name, self, *args, &block)` on line 8 of rails.rb\n. Thanks!  Figured I was missing something simple.  \n. ",
    "nacengineer": "FYI I tried to use this code in Rails but to no avail. I also tried \n\n``` rb\nrender format :erb\n```\n\nIt would seem that if using two template engines within rails, the first one required by bundlerwins. \n\nTo get it working with both haml and erb, I had to require: false in Gemfile and then include them in the more traditional \"ruby only\" way to get them to both work.\n\nI'm not sure if this is a bug or I didn't configure properly.  I tried the above inside the class and outside, neither worked. Perhaps a class method for Cell::ViewModel that would override initialized setting would be useful, similar to Rails' table_name settings on models. \n. Yeah  I agree with you  I posted it here because this seemed to be a class method that would allow you to se this on a per cell basis. Just as an FYI that this won't work in rails.  My bad.  I think the current method is fine.  I'll try to add a PR to the docs for using multiple engines in rails.  Sorry for any confusion \u263a\n. I can buy into that. Glad you put a lot of thought into it. \n\nKnowing your team, I assume you'll keep the 3 branch from dying for a reasonable time which is my main concern. i.e. rails 2 fixes fairly quickly become upgrade to rails 3 which was a massive API change and required community built tools like rails upgrade, etc. Guess I'm still a little gun shy from that change and all the crazy little OCD changes devs tend to make. \n\nLike I said, I'm really happy with the gem and looking forward to it being even faster! :) Keep up the great work.  I relent and will close this issue. :)\n. @barttenbrinke like all rails apps, for my upgrades I'm using a feature branch in my git repo and making sure all the cells and views where the cells are used have specs. Without the specs/tests I think the upgrade is infeasible as you won't know what's broken until its in production. One thing I would recommend is using the \"render_views\" helper in your Controller specs. \n\nHaving said that I agree this is a considerable API change in order to shed the bloat of ActiveRecord but this is the joy of Dynamic Imperative programming (insert sarcastic smiley here) and is one of the reasons I'm transitioning to Haskell ASAP\n. @apotonick not saying it'll eliminate API changes but IMO the Haskell community is less prone to make changes without a lot of consideration toward legacy code bases. For example if you pick up the Real World Haskell book from 2010 it still applies to most of the current ghc version. If you try the same with a ruby book your results will vary. IMO Functional Programming requires a lot less upkeep over time. I'm not against a server that can compile to a single bin (snap) and can handle requests in the 60k+ range vs rails 2-6k range. Plus concurrency. \n\nI see this upkeep issue as a massive problem/viewpoint in the ruby/rails community, eg. rails 2 -> 3 was a massive undertaking and some companies just couldn't manage it. rspec 2 -> 3 was a pretty major API change about half of my code is still stuck on rspec 2. rails 4.0 -> 4.1 -> 4.2  pretty much within a year of each other with some serious minor API changes that deprecate current functionality but add very little IMO improvement wise. \n\nSo the end result is a developer spends a majority of time just jumping their code through API changes vs. adding features to their applications. It becomes quite frustrating. Now we have a major release (5.0) about to break and its going to require more halt your development and update your code bases or be left behind security wise. \n\nAnother example is ruby 2.0.0 -> 2.1 -> 2.2. ruby 2.0 is pretty stable and there is a [known memory leak](http://samsaffron.com/archive/2015/03/31/debugging-memory-leaks-in-ruby) in 2.1 which allegedly was fixed in 2.2 but not in 2.1?!? However I still can't get puma to not bloat memory in 2.2 and have to run it in 2.0. Yet ruby 2.0.0 is in security maintenance phase and heading towards end of life while 2.1 and 2.2 are still kind of iffy IMO and probably deserve a Beta tag. Also things like refinements. What the hell is that all about? The community wasn't clamoring for that feature and most outright refuse to use it.  \n\nGenerally I think in our community we too easily leave old code bases behind from a security standpoint and justify it with \"its better\". Again these are probably more the ramblings of a burnt out developer who has had to maintain some nasty legacy codebases but I'd like us to have fewer API changes and work on some of ruby/rails core issues, i.e. more changes like ActiveModel/ActiveRecord separation or why was rails 2 faster performance wise than rails 3, etc.\n\nAnyway I shouldn't rant anymore here as this isn't the forum. LOL \n\nThanks @apotonick and team for all the work you do on this gem. I think its a great gem and helps me make my Rails app move toward more of a  \"functional\" paradigm. :+1: \n. @apotonick agreed re:rails. I think my issue is with gems and code that _doesn't_ follow your approach. Obviously its insane to think there will be no change. I think perhaps I'm misspeaking when I say API changes too. Really I mean OCD changes made in the spirit of the new and not always thought out shiny. Too often I see changes such as changing a method name arbitrarily or refactorings that seem to only be for the purpose of satisfying a developers' fancy or implement some new feature that hasn't really been proven, e.g. refinements in ruby. But our community does this a lot and justifies breaking changes with SemVer. \n\nIf more developers took your approach the community would be better off.  My main issue is that ruby is so dynamic and can so easily have side effects that to make changes without thought/consideration is a dangerous trend. If we had type safety it might be different, but that's never going to happen in ruby. Although gems like Contracts gives me some hope there can be intermediate solutions for ruby. \n\nAnyway as I said I have no problem with the changes you made here. I think the benefits outweigh the entropy cost plus you are moving in a super sane direction by distancing yourself from ActiveRecord and toward SRP type of design in cells. :+1: \n. FYI I tried to use this code in Rails but to no avail. I also tried \n\n``` rb\nrender format :erb\n```\n\nIt would seem that if using two template engines within rails, the first one required by bundlerwins. \n\nTo get it working with both haml and erb, I had to require: false in Gemfile and then include them in the more traditional \"ruby only\" way to get them to both work.\n\nI'm not sure if this is a bug or I didn't configure properly.  I tried the above inside the class and outside, neither worked. Perhaps a class method for Cell::ViewModel that would override initialized setting would be useful, similar to Rails' table_name settings on models. \n. Yeah  I agree with you  I posted it here because this seemed to be a class method that would allow you to se this on a per cell basis. Just as an FYI that this won't work in rails.  My bad.  I think the current method is fine.  I'll try to add a PR to the docs for using multiple engines in rails.  Sorry for any confusion \u263a\n. I can buy into that. Glad you put a lot of thought into it. \n\nKnowing your team, I assume you'll keep the 3 branch from dying for a reasonable time which is my main concern. i.e. rails 2 fixes fairly quickly become upgrade to rails 3 which was a massive API change and required community built tools like rails upgrade, etc. Guess I'm still a little gun shy from that change and all the crazy little OCD changes devs tend to make. \n\nLike I said, I'm really happy with the gem and looking forward to it being even faster! :) Keep up the great work.  I relent and will close this issue. :)\n. @barttenbrinke like all rails apps, for my upgrades I'm using a feature branch in my git repo and making sure all the cells and views where the cells are used have specs. Without the specs/tests I think the upgrade is infeasible as you won't know what's broken until its in production. One thing I would recommend is using the \"render_views\" helper in your Controller specs. \n\nHaving said that I agree this is a considerable API change in order to shed the bloat of ActiveRecord but this is the joy of Dynamic Imperative programming (insert sarcastic smiley here) and is one of the reasons I'm transitioning to Haskell ASAP\n. @apotonick not saying it'll eliminate API changes but IMO the Haskell community is less prone to make changes without a lot of consideration toward legacy code bases. For example if you pick up the Real World Haskell book from 2010 it still applies to most of the current ghc version. If you try the same with a ruby book your results will vary. IMO Functional Programming requires a lot less upkeep over time. I'm not against a server that can compile to a single bin (snap) and can handle requests in the 60k+ range vs rails 2-6k range. Plus concurrency. \n\nI see this upkeep issue as a massive problem/viewpoint in the ruby/rails community, eg. rails 2 -> 3 was a massive undertaking and some companies just couldn't manage it. rspec 2 -> 3 was a pretty major API change about half of my code is still stuck on rspec 2. rails 4.0 -> 4.1 -> 4.2  pretty much within a year of each other with some serious minor API changes that deprecate current functionality but add very little IMO improvement wise. \n\nSo the end result is a developer spends a majority of time just jumping their code through API changes vs. adding features to their applications. It becomes quite frustrating. Now we have a major release (5.0) about to break and its going to require more halt your development and update your code bases or be left behind security wise. \n\nAnother example is ruby 2.0.0 -> 2.1 -> 2.2. ruby 2.0 is pretty stable and there is a [known memory leak](http://samsaffron.com/archive/2015/03/31/debugging-memory-leaks-in-ruby) in 2.1 which allegedly was fixed in 2.2 but not in 2.1?!? However I still can't get puma to not bloat memory in 2.2 and have to run it in 2.0. Yet ruby 2.0.0 is in security maintenance phase and heading towards end of life while 2.1 and 2.2 are still kind of iffy IMO and probably deserve a Beta tag. Also things like refinements. What the hell is that all about? The community wasn't clamoring for that feature and most outright refuse to use it.  \n\nGenerally I think in our community we too easily leave old code bases behind from a security standpoint and justify it with \"its better\". Again these are probably more the ramblings of a burnt out developer who has had to maintain some nasty legacy codebases but I'd like us to have fewer API changes and work on some of ruby/rails core issues, i.e. more changes like ActiveModel/ActiveRecord separation or why was rails 2 faster performance wise than rails 3, etc.\n\nAnyway I shouldn't rant anymore here as this isn't the forum. LOL \n\nThanks @apotonick and team for all the work you do on this gem. I think its a great gem and helps me make my Rails app move toward more of a  \"functional\" paradigm. :+1: \n. @apotonick agreed re:rails. I think my issue is with gems and code that _doesn't_ follow your approach. Obviously its insane to think there will be no change. I think perhaps I'm misspeaking when I say API changes too. Really I mean OCD changes made in the spirit of the new and not always thought out shiny. Too often I see changes such as changing a method name arbitrarily or refactorings that seem to only be for the purpose of satisfying a developers' fancy or implement some new feature that hasn't really been proven, e.g. refinements in ruby. But our community does this a lot and justifies breaking changes with SemVer. \n\nIf more developers took your approach the community would be better off.  My main issue is that ruby is so dynamic and can so easily have side effects that to make changes without thought/consideration is a dangerous trend. If we had type safety it might be different, but that's never going to happen in ruby. Although gems like Contracts gives me some hope there can be intermediate solutions for ruby. \n\nAnyway as I said I have no problem with the changes you made here. I think the benefits outweigh the entropy cost plus you are moving in a super sane direction by distancing yourself from ActiveRecord and toward SRP type of design in cells. :+1: \n. ",
    "braidn": "Hmm,\n\nWell a little digging came up with this: \n\nhttps://github.com/rails/rails/blob/master/activesupport/lib/active_support/file_update_checker.rb#L29\n\nIts weird though because they freeze the file array on initialization. I guess we could always compare the array against the FS and if it was different in any way (more or less files were generated/created) we could re-initialize? Does that help? Maybe at all :wink: \n. Hmm,\n\nWell a little digging came up with this: \n\nhttps://github.com/rails/rails/blob/master/activesupport/lib/active_support/file_update_checker.rb#L29\n\nIts weird though because they freeze the file array on initialization. I guess we could always compare the array against the FS and if it was different in any way (more or less files were generated/created) we could re-initialize? Does that help? Maybe at all :wink: \n. ",
    "pskrz": "I just added some test coverage to cells in my project, using #render_cell. What is the preferred alternative?\n. I just added some test coverage to cells in my project, using #render_cell. What is the preferred alternative?\n. ",
    "wildjcrt": "I tried to use haml and it works in two-depths block. Checkout [Repo](https://github.com/wildjcrt/testcells41) with branch `two-depths-block-haml`, and then open `http://localhost:3000/posts/1`.\n\nIn `cells/post_h_cell.rb`\n\n```\ndef link_2d(args)\n  @post = args[:post]\n  render\nend\n```\n\nIn `cells/posts_h/link_2d.haml`\n\n```\n- 5.times do |i|\n  = link_to post_path(@post) do\n    = @post.title\n```\n\nIn view\n\n```\n<%= cell(:post_h).call(:link_2d, :post => @post) %>\n```\n. ah, it's ok.\n\nI found info in [change_log](https://github.com/apotonick/cells/blob/master/CHANGES.md) template engine part. :D \nSo in 4.0, each cell class should only allow one template engine.\n. +1 That's make sense.\nForgive me that I'm lazy for coding in test project and met this issue\u2026\n. I tried to use haml and it works in two-depths block. Checkout [Repo](https://github.com/wildjcrt/testcells41) with branch `two-depths-block-haml`, and then open `http://localhost:3000/posts/1`.\n\nIn `cells/post_h_cell.rb`\n\n```\ndef link_2d(args)\n  @post = args[:post]\n  render\nend\n```\n\nIn `cells/posts_h/link_2d.haml`\n\n```\n- 5.times do |i|\n  = link_to post_path(@post) do\n    = @post.title\n```\n\nIn view\n\n```\n<%= cell(:post_h).call(:link_2d, :post => @post) %>\n```\n. ah, it's ok.\n\nI found info in [change_log](https://github.com/apotonick/cells/blob/master/CHANGES.md) template engine part. :D \nSo in 4.0, each cell class should only allow one template engine.\n. +1 That's make sense.\nForgive me that I'm lazy for coding in test project and met this issue\u2026\n. ",
    "kntmrkm": "Thank you reply.\nOK!\nI'm looking forward to Awesome version.\nthank you.\n. Thank you reply.\nOK!\nI'm looking forward to Awesome version.\nthank you.\n. ",
    "Undistraction": "This is really confusing. Why put installation instructions in the `README` for a gem version which isn't available? \n. @seuros I understand that, but for someone coming to cells for the first time this is what they see; installation instructions that don't work.\n. This is really confusing. Why put installation instructions in the `README` for a gem version which isn't available? \n. @seuros I understand that, but for someone coming to cells for the first time this is what they see; installation instructions that don't work.\n. ",
    "timmi-on-rails": "I have another question related to the new concept. \nPreviously I had a couple of view files for one cell (controller). Let's say for the cart I have \"show\" (which displays all items in cart) and I have \"info\" (which shows only a summary (e.g. count) of all items in cart).\nThese would have been two actions which call the render command. \n\nIs it correct to have different actions in the model view concept aswell or should I use the options hash. \nSo would I do it like \n\n``` ruby\ncell(:cart, user).call(:show)\n# and\ncell(:cart, user).call(:info)\n```\n\n<b> or </b>\n\n``` ruby\ncell(:cart, user, mode: 'full').call(:show)\n# and\ncell(:cart, user, mode: 'summary').call(:show)\n```\n\nCertainly I don't want to create a new cell, because they might share alot of instance methods.\n. Thanks!\nIs there another place where I should discuss conceptual matters? \nBecause I don't want to open up issues, when there is nothing wrong.\n. Moin nick,\n\nbin auch deutsch, also alles okay, musst nicht \u00fcbersetzen :-).\nWir sollten das \u00f6ffentlich diskutieren, aber ich mache mir vorher noch\nein paar Gedanken.\nIch antworte sp\u00e4ter die Woche auf deine Mails. Ich hab heute erstmal\nGeburtstag und keine Zeit ;).\n\ncu,\nTom\n. I have another question related to the new concept. \nPreviously I had a couple of view files for one cell (controller). Let's say for the cart I have \"show\" (which displays all items in cart) and I have \"info\" (which shows only a summary (e.g. count) of all items in cart).\nThese would have been two actions which call the render command. \n\nIs it correct to have different actions in the model view concept aswell or should I use the options hash. \nSo would I do it like \n\n``` ruby\ncell(:cart, user).call(:show)\n# and\ncell(:cart, user).call(:info)\n```\n\n<b> or </b>\n\n``` ruby\ncell(:cart, user, mode: 'full').call(:show)\n# and\ncell(:cart, user, mode: 'summary').call(:show)\n```\n\nCertainly I don't want to create a new cell, because they might share alot of instance methods.\n. Thanks!\nIs there another place where I should discuss conceptual matters? \nBecause I don't want to open up issues, when there is nothing wrong.\n. Moin nick,\n\nbin auch deutsch, also alles okay, musst nicht \u00fcbersetzen :-).\nWir sollten das \u00f6ffentlich diskutieren, aber ich mache mir vorher noch\nein paar Gedanken.\nIch antworte sp\u00e4ter die Woche auf deine Mails. Ich hab heute erstmal\nGeburtstag und keine Zeit ;).\n\ncu,\nTom\n. ",
    "mbajur": "Ok, it seems i've found a temporary solution which goes down to adding `haml-rails` gem to Gemfile and setting a following config var: `Cell::ViewModel.template_engine = \"slim\"`\n\nHowever it still seems a bit awkward and i'm sure there needs to be a better solution which i don't know about :)\n. Ok, great, so i'm looking forward for the update :)\n. I'm gonna check that soon\n\nOn 25 May 2015 at 07:51, Nick Sutterer notifications@github.com wrote:\n\n> Closed #253 https://github.com/apotonick/cells/issues/253.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/253#event-312801590.\n. That happened both with rubygems recent version and with master\n. Oh, that totally makes sense. I'm sure i'll send a PR soon :)\n\nOn 14 April 2015 at 09:11, Nick Sutterer notifications@github.com wrote:\n\n> Cool idea - I don't think you have to configure that. You have to override\n> the #t method _in_ the cell class and then add this path.\n> \n> class Cell::ViewModel < ..\n>   def t(name)\n>     super \"en.bla.#{name}\"\n>   endend\n> \n> I am not sure where to get all the information you need for this string\n> (e.g. en) since I haven't used i18n so far but if you PR something we can\n> merge this into Cells 4! [image: :beers:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/272#issuecomment-92666128.\n. Ok so that's how that method should look like:\n\n```\ndef t(*args)\n  options   = args.last.is_a?(Hash) ? args.pop.dup : {}\n  key       = args.shift\n  cell_name = self.class.to_s.delete('Cell').underscore\n\n  path = if key.starts_with?('.')\n    \"cells.#{cell_name}#{key}\"\n  else\n    key\n  end\n\n  super(path, options)\nend\n```\n\nbut to be honest i have no idea where to put that. Cells code is a bit too complex for me so i probably don't understand something nor where that should be implemented. I've tried all probable places in Cell::ViewModel without any luck. Sorry for being dumb!\n. Sure, there you go:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/view_helper.rb#L9\n\nOn 14 April 2015 at 09:31, Nick Sutterer notifications@github.com wrote:\n\n> That's a cells \"issue\". In Cells 4, we do not escape HTML (only defined\n> properties, and I still have to implement this).\n> \n> Can you link me to the react-rails helper implementation? It sounds as if\n> that helper doesn't call manual escaping properly.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/277#issuecomment-92676070.\n. Hey, i'm not able to test that because i'm not able to update to 4.x. There are two problems that stops me:\n1. When cells-slim is enabled:  \n   \n   ```\n   /Volumes/HDD/Users/michal/.rvm/gems/ruby-2.1.2/gems/cells-slim-0.0.1/lib/cells/slim.rb:54:in     `<module:Cell>': undefined method `template_engine=' for Cell::ViewModel:Class (NoMethodError)\n   ```\n2. Devise helper can't be included:\n   \n   ```\n   class ApplicationCell < Cell::ViewModel\n     include FontAwesome::Rails::IconHelper\n     include ActionView::Helpers::TranslationHelper\n     include Devise::Controllers::Helpers\n   end\n   ```\n   \n   throws \n   `undefined method 'helper_method' for ApplicationCell:Class`\n\nAny idea what can be wrong in here?\n. Ok, thanks. I've made it - cells are now at 4.0.0, cells-slim is at 0.0.2 and devise helper works. However - the json is still not escaped properly. And what's more - using `{hash}.to_json` also does not produces escaped json so i'm not even able to use non-helper version of my react components (by non-helper i mean using `div data-react-props={x: 'y'}.to_json` instead of `react_component('HelloMessage', x: 'y')`\n. I've tried that but it not change anything. Params are still not escaped. Anyway, the `escape` argument is set to true by default http://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag\n\nI have currently managed to run my code by using `CGI::escapeHTML`:\n\n```\ndiv data-react-props=CGI::escapeHTML({x: 'y'}.to_json)\n```\n\nbut i still have no idea how to deal with the react helper\n. Ok, i dealed with it by changing [react view helper props rendering](https://github.com/reactjs/react-rails/blob/master/lib/react/rails/view_helper.rb#L16-L19):\n\n```\nhtml_options[:data].tap do |data|\n  props = CGI::escapeHTML(props.is_a?(String) ? props : props.to_json)\n\n  data[:react_class] = name\n  data[:react_props] = props\nend\n```\n\nbut it's still strange that it works in regular views but not in the cell views.\n. Yes, sure Nick. I'm gonna send you a repo today or tomorrow. Thanks!\n\nOn 15 June 2015 at 13:22, Nick Sutterer notifications@github.com wrote:\n\n> Can you create a minimal Rails app where I can see this bug in action? I\n> will invest a few minutes and try to find what's the problem, and with an\n> example app this would be a breeze.\n> \n> Thanks! [image: :beers:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/277#issuecomment-112023141.\n. Sorry, it took me way more time to prepare that than i expected. Here is the repo: https://github.com/mbajur/cells_with_react\n\nThe react-rails gem is included in the repo in untouched form (in `/react-rails` path). You can see that the produced output is not escaped and there is \"Uncaught SyntaxError: Unexpected end of input\" in Chrome's OI\n. awesome! :) i personaly think it should be enabled by default with option to disable it, not backwards\n\nShould there be an exact same fix for cells-slim ?\n. awesome!! Now it all works like it should :beers: \n. To be more clear - adding my `t` method overwrite to specific cell class works fine but adding it anywhere in `Cell::ViewModel` don't\n. Yeah, i'd love to but i don't have much time for that right now. But i'll do that for sure in upcoming days.\n. Thats more or less how it look right now:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/581569/21442221/c636b0b4-c89c-11e6-999d-33d2ab23ec8b.png)\r\n\r\nAnd i just realized that actually not ALL of the cells are escaped but i can't really see any regularity in this.. One last update - i've tried a lot of solutions from [this thread](https://github.com/trailblazer/cells/issues/260) and none of it worked. It's still the same, i just think i found the regularity - it behaves like this when i'm using a block argument (`link_to do` or `form_tag do` etc).\r\n\r\n- Development - works just fine\r\n- Production - block tags escaped. Ok, it seems i've found a temporary solution which goes down to adding `haml-rails` gem to Gemfile and setting a following config var: `Cell::ViewModel.template_engine = \"slim\"`\n\nHowever it still seems a bit awkward and i'm sure there needs to be a better solution which i don't know about :)\n. Ok, great, so i'm looking forward for the update :)\n. I'm gonna check that soon\n\nOn 25 May 2015 at 07:51, Nick Sutterer notifications@github.com wrote:\n\n> Closed #253 https://github.com/apotonick/cells/issues/253.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/253#event-312801590.\n. That happened both with rubygems recent version and with master\n. Oh, that totally makes sense. I'm sure i'll send a PR soon :)\n\nOn 14 April 2015 at 09:11, Nick Sutterer notifications@github.com wrote:\n\n> Cool idea - I don't think you have to configure that. You have to override\n> the #t method _in_ the cell class and then add this path.\n> \n> class Cell::ViewModel < ..\n>   def t(name)\n>     super \"en.bla.#{name}\"\n>   endend\n> \n> I am not sure where to get all the information you need for this string\n> (e.g. en) since I haven't used i18n so far but if you PR something we can\n> merge this into Cells 4! [image: :beers:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/272#issuecomment-92666128.\n. Ok so that's how that method should look like:\n\n```\ndef t(*args)\n  options   = args.last.is_a?(Hash) ? args.pop.dup : {}\n  key       = args.shift\n  cell_name = self.class.to_s.delete('Cell').underscore\n\n  path = if key.starts_with?('.')\n    \"cells.#{cell_name}#{key}\"\n  else\n    key\n  end\n\n  super(path, options)\nend\n```\n\nbut to be honest i have no idea where to put that. Cells code is a bit too complex for me so i probably don't understand something nor where that should be implemented. I've tried all probable places in Cell::ViewModel without any luck. Sorry for being dumb!\n. Sure, there you go:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/view_helper.rb#L9\n\nOn 14 April 2015 at 09:31, Nick Sutterer notifications@github.com wrote:\n\n> That's a cells \"issue\". In Cells 4, we do not escape HTML (only defined\n> properties, and I still have to implement this).\n> \n> Can you link me to the react-rails helper implementation? It sounds as if\n> that helper doesn't call manual escaping properly.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/277#issuecomment-92676070.\n. Hey, i'm not able to test that because i'm not able to update to 4.x. There are two problems that stops me:\n1. When cells-slim is enabled:  \n   \n   ```\n   /Volumes/HDD/Users/michal/.rvm/gems/ruby-2.1.2/gems/cells-slim-0.0.1/lib/cells/slim.rb:54:in     `<module:Cell>': undefined method `template_engine=' for Cell::ViewModel:Class (NoMethodError)\n   ```\n2. Devise helper can't be included:\n   \n   ```\n   class ApplicationCell < Cell::ViewModel\n     include FontAwesome::Rails::IconHelper\n     include ActionView::Helpers::TranslationHelper\n     include Devise::Controllers::Helpers\n   end\n   ```\n   \n   throws \n   `undefined method 'helper_method' for ApplicationCell:Class`\n\nAny idea what can be wrong in here?\n. Ok, thanks. I've made it - cells are now at 4.0.0, cells-slim is at 0.0.2 and devise helper works. However - the json is still not escaped properly. And what's more - using `{hash}.to_json` also does not produces escaped json so i'm not even able to use non-helper version of my react components (by non-helper i mean using `div data-react-props={x: 'y'}.to_json` instead of `react_component('HelloMessage', x: 'y')`\n. I've tried that but it not change anything. Params are still not escaped. Anyway, the `escape` argument is set to true by default http://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag\n\nI have currently managed to run my code by using `CGI::escapeHTML`:\n\n```\ndiv data-react-props=CGI::escapeHTML({x: 'y'}.to_json)\n```\n\nbut i still have no idea how to deal with the react helper\n. Ok, i dealed with it by changing [react view helper props rendering](https://github.com/reactjs/react-rails/blob/master/lib/react/rails/view_helper.rb#L16-L19):\n\n```\nhtml_options[:data].tap do |data|\n  props = CGI::escapeHTML(props.is_a?(String) ? props : props.to_json)\n\n  data[:react_class] = name\n  data[:react_props] = props\nend\n```\n\nbut it's still strange that it works in regular views but not in the cell views.\n. Yes, sure Nick. I'm gonna send you a repo today or tomorrow. Thanks!\n\nOn 15 June 2015 at 13:22, Nick Sutterer notifications@github.com wrote:\n\n> Can you create a minimal Rails app where I can see this bug in action? I\n> will invest a few minutes and try to find what's the problem, and with an\n> example app this would be a breeze.\n> \n> Thanks! [image: :beers:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/277#issuecomment-112023141.\n. Sorry, it took me way more time to prepare that than i expected. Here is the repo: https://github.com/mbajur/cells_with_react\n\nThe react-rails gem is included in the repo in untouched form (in `/react-rails` path). You can see that the produced output is not escaped and there is \"Uncaught SyntaxError: Unexpected end of input\" in Chrome's OI\n. awesome! :) i personaly think it should be enabled by default with option to disable it, not backwards\n\nShould there be an exact same fix for cells-slim ?\n. awesome!! Now it all works like it should :beers: \n. To be more clear - adding my `t` method overwrite to specific cell class works fine but adding it anywhere in `Cell::ViewModel` don't\n. Yeah, i'd love to but i don't have much time for that right now. But i'll do that for sure in upcoming days.\n. Thats more or less how it look right now:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/581569/21442221/c636b0b4-c89c-11e6-999d-33d2ab23ec8b.png)\r\n\r\nAnd i just realized that actually not ALL of the cells are escaped but i can't really see any regularity in this.. One last update - i've tried a lot of solutions from [this thread](https://github.com/trailblazer/cells/issues/260) and none of it worked. It's still the same, i just think i found the regularity - it behaves like this when i'm using a block argument (`link_to do` or `form_tag do` etc).\r\n\r\n- Development - works just fine\r\n- Production - block tags escaped. ",
    "aflatter": "> You wouldn't believe how much work it is to fix all the crap that Rails has messed up in the last years. \n\n:+1: \n. > You wouldn't believe how much work it is to fix all the crap that Rails has messed up in the last years. \n\n:+1: \n. ",
    "MaximAbramchuck": "Can I just remove this warning from the server log?\n. @seuros OK.\n. @seuros @apotonick let me know, if you'll fix this issue, ok?\n. Can I just remove this warning from the server log?\n. @seuros OK.\n. @seuros @apotonick let me know, if you'll fix this issue, ok?\n. ",
    "porbas": "@apotonick Hi, any progress with this? How can I help?\n. Yes, its \"just\" this warning cluttering my tests output :(\nNo other problems with cells+slim\n. Templates converted to slim: porbas/cells-slim@57a1306950076a41823c1d403cc86b55ff35fe26\nTo run tests I had to get earlier version of lib/cells/slim.rb and include ActionView and routes helpers in songs/cell.rb (not in commit)\n\nThere are problems with capturing and html_escaping.\n. @apotonick Hi, any progress with this? How can I help?\n. Yes, its \"just\" this warning cluttering my tests output :(\nNo other problems with cells+slim\n. Templates converted to slim: porbas/cells-slim@57a1306950076a41823c1d403cc86b55ff35fe26\nTo run tests I had to get earlier version of lib/cells/slim.rb and include ActionView and routes helpers in songs/cell.rb (not in commit)\n\nThere are problems with capturing and html_escaping.\n. ",
    "did": "That'd be great! thanks @apotonick! (and thanks @pwim, of course, for your fix )\n. @apotonick, tested your last version right now with success! Big thanks to @pwim and you :-)\n. That'd be great! thanks @apotonick! (and thanks @pwim, of course, for your fix )\n. @apotonick, tested your last version right now with success! Big thanks to @pwim and you :-)\n. ",
    "soemo": "I agree .. a version 3.12 with this little change, would be great.\n. I agree .. a version 3.12 with this little change, would be great.\n. ",
    "alexandru-calinoiu": "I still can get to work with rails 4.2, I get:\n\n```\ngems/cells-3.11.3/lib/cell/test_case.rb:145:in `<class:TestCase>': uninitialized constant ActionDispatch::Assertions::SelectorAssertions (NameError)\n```\n. @pwim adding the gem did the trick, thanks, still does not look like a permanent solution\n. I still can get to work with rails 4.2, I get:\n\n```\ngems/cells-3.11.3/lib/cell/test_case.rb:145:in `<class:TestCase>': uninitialized constant ActionDispatch::Assertions::SelectorAssertions (NameError)\n```\n. @pwim adding the gem did the trick, thanks, still does not look like a permanent solution\n. ",
    "pwim": "Try adding the gem `rails-dom-testing`\n. Try adding the gem `rails-dom-testing`\n. ",
    "st0mir": "It still looks the same. I've added this two methods (delegate to `ActionView::RecordIdentifier`)\n\n``` ruby\ndef dom_class(record, prefix = nil)\n  ActionView::RecordIdentifier.dom_class(record, prefix)\nend\n\ndef dom_id(record, prefix = nil)\n  ActionView::RecordIdentifier.dom_id(record, prefix)\nend\n```\n\nBoth returns in my case 'new_article' (so I think value is ok), but form still doesn't render correctly:\n\n``` html\n<input type=\"text\" name=\"article[title]\" id=\"article_title\" />\n<form class=\"new_article\" id=\"new_article\"  ...></form>\n```\n\nI've also checked how it works in cells 4.0. So I included `ActionView::Helpers::FormHelper` to my cell class and implemented `#dom_class` and `#dom_id` methods (the same way as above). Here I get following exception:\n\n```\nNoMethodError - undefined method `encoding' for []:Array:\n  actionview (4.2.0) lib/action_view/helpers/capture_helper.rb:197:in `with_output_buffer'\n  haml (4.0.6) lib/haml/helpers/action_view_xss_mods.rb:5:in `with_output_buffer_with_haml_xss'\n  actionview (4.2.0) lib/action_view/helpers/capture_helper.rb:38:in `capture'\n  haml (4.0.6) lib/haml/helpers/action_view_mods.rb:52:in `capture_with_haml'\n  actionview (4.2.0) lib/action_view/helpers/form_helper.rb:444:in `form_for'\n```\n\nDo you have any idea what I am doing wrong?\n. It works but not without problems.\n\nI've got exception:\n\n```\nNameError - uninitialized constant Cell::Haml::Util:\n  activesupport (4.2.0) lib/active_support/dependencies.rb:533:in `load_missing_constant'\n  activesupport (4.2.0) lib/active_support/dependencies.rb:184:in `const_missing'\n   () home/vagrant/.rvm/gems/ruby-2.1.5/bundler/gems/cells-haml-b99589c7e68d/lib/cell/haml.rb:13:in `set_output_buffer_with_haml'\n   () home/vagrant/.rvm/gems/ruby-2.1.5/bundler/gems/cells-haml-b99589c7e68d/lib/cell/haml.rb:46:in `ensure in with_output_buffer'\n```\n\nso, I've changed `lib/cell/haml.rb:13` to `if ::Haml::Util.rails_xss_safe? && new_buffer.is_a?(ActiveSupport::SafeBuffer)`.\n\nThere was also problem with two missing methods on String:\n\n```\nundefined method `safe_concat'\nundefined local variable or method `output_buffer'\n```\n\nso I had to include to String this modules:\n\n```\ninclude ActionView::Helpers::TextHelper\ninclude ActionView::Context\n```\n. It still looks the same. I've added this two methods (delegate to `ActionView::RecordIdentifier`)\n\n``` ruby\ndef dom_class(record, prefix = nil)\n  ActionView::RecordIdentifier.dom_class(record, prefix)\nend\n\ndef dom_id(record, prefix = nil)\n  ActionView::RecordIdentifier.dom_id(record, prefix)\nend\n```\n\nBoth returns in my case 'new_article' (so I think value is ok), but form still doesn't render correctly:\n\n``` html\n<input type=\"text\" name=\"article[title]\" id=\"article_title\" />\n<form class=\"new_article\" id=\"new_article\"  ...></form>\n```\n\nI've also checked how it works in cells 4.0. So I included `ActionView::Helpers::FormHelper` to my cell class and implemented `#dom_class` and `#dom_id` methods (the same way as above). Here I get following exception:\n\n```\nNoMethodError - undefined method `encoding' for []:Array:\n  actionview (4.2.0) lib/action_view/helpers/capture_helper.rb:197:in `with_output_buffer'\n  haml (4.0.6) lib/haml/helpers/action_view_xss_mods.rb:5:in `with_output_buffer_with_haml_xss'\n  actionview (4.2.0) lib/action_view/helpers/capture_helper.rb:38:in `capture'\n  haml (4.0.6) lib/haml/helpers/action_view_mods.rb:52:in `capture_with_haml'\n  actionview (4.2.0) lib/action_view/helpers/form_helper.rb:444:in `form_for'\n```\n\nDo you have any idea what I am doing wrong?\n. It works but not without problems.\n\nI've got exception:\n\n```\nNameError - uninitialized constant Cell::Haml::Util:\n  activesupport (4.2.0) lib/active_support/dependencies.rb:533:in `load_missing_constant'\n  activesupport (4.2.0) lib/active_support/dependencies.rb:184:in `const_missing'\n   () home/vagrant/.rvm/gems/ruby-2.1.5/bundler/gems/cells-haml-b99589c7e68d/lib/cell/haml.rb:13:in `set_output_buffer_with_haml'\n   () home/vagrant/.rvm/gems/ruby-2.1.5/bundler/gems/cells-haml-b99589c7e68d/lib/cell/haml.rb:46:in `ensure in with_output_buffer'\n```\n\nso, I've changed `lib/cell/haml.rb:13` to `if ::Haml::Util.rails_xss_safe? && new_buffer.is_a?(ActiveSupport::SafeBuffer)`.\n\nThere was also problem with two missing methods on String:\n\n```\nundefined method `safe_concat'\nundefined local variable or method `output_buffer'\n```\n\nso I had to include to String this modules:\n\n```\ninclude ActionView::Helpers::TextHelper\ninclude ActionView::Context\n```\n. ",
    "Titinux": "I am also trying to use form_for in a cell but I have a problem that is not mentioned here.\n\n`no implicit conversion of nil into String`\n\nI use rails 4.2, cells master and cells-haml form_tag_with_body branch from st0mir\n\nI checked the form_tag_with_body method in lib/cell/haml.rb (cells-haml) and the content parameter is nil. If I force the content to be an empty string it does not crash.\n\nI would be glad to tell you more details if needed.\n. Same error with the cells-4 branch.\n\nBut if I change the form_tag_with_body method like this\n\n``` ruby\ndef form_tag_with_body(html_options, content)\n  content ||= \"\"\n  \"#{form_tag_html(html_options)}\" << content << \"</form>\"\nend\n```\n\nmy problem is solved. (no idea of other consequences :sweat:)\n. It's the same problem described on https://github.com/hamlit/hamlit-block/issues/1\n. It's not possible to use two renderers. Does it works if you remove \"include Cell::Erb\" ?. I am also trying to use form_for in a cell but I have a problem that is not mentioned here.\n\n`no implicit conversion of nil into String`\n\nI use rails 4.2, cells master and cells-haml form_tag_with_body branch from st0mir\n\nI checked the form_tag_with_body method in lib/cell/haml.rb (cells-haml) and the content parameter is nil. If I force the content to be an empty string it does not crash.\n\nI would be glad to tell you more details if needed.\n. Same error with the cells-4 branch.\n\nBut if I change the form_tag_with_body method like this\n\n``` ruby\ndef form_tag_with_body(html_options, content)\n  content ||= \"\"\n  \"#{form_tag_html(html_options)}\" << content << \"</form>\"\nend\n```\n\nmy problem is solved. (no idea of other consequences :sweat:)\n. It's the same problem described on https://github.com/hamlit/hamlit-block/issues/1\n. It's not possible to use two renderers. Does it works if you remove \"include Cell::Erb\" ?. ",
    "shkm": "Just wanted to point out that this still doesn't work in Cells 4 (I'm not sure if it should; I'd like it to, but that's not my decision). Thankfully, @PikachuEXE descended like an angel, and sprinkled magical dust upon my code, allowing it to just work.\n\nI'm using this concern to get it working with Formtastic:\n\n``` ruby\nmodule FormsForCells\n  extend ActiveSupport::Concern\n\n  included do\n    include ActionView::RecordIdentifier\n    include ActionView::Helpers::FormHelper\n    include ActionView::Helpers::TextHelper\n    include ActionView::Context\n    include Formtastic::Helpers::FormHelper\n\n    include Cell::Haml\n  end\nend\n```\n. Just wanted to point out that this still doesn't work in Cells 4 (I'm not sure if it should; I'd like it to, but that's not my decision). Thankfully, @PikachuEXE descended like an angel, and sprinkled magical dust upon my code, allowing it to just work.\n\nI'm using this concern to get it working with Formtastic:\n\n``` ruby\nmodule FormsForCells\n  extend ActiveSupport::Concern\n\n  included do\n    include ActionView::RecordIdentifier\n    include ActionView::Helpers::FormHelper\n    include ActionView::Helpers::TextHelper\n    include ActionView::Context\n    include Formtastic::Helpers::FormHelper\n\n    include Cell::Haml\n  end\nend\n```\n. ",
    "contentfree": "Thanks for the idea, @shkm. Using Cells 4 (and cells-rails and cells-haml and simple_form). I had to make a concern / module to include in my cells as the list of includes was as long as yours.\n\nIt would be nice if cells-rails or cells-haml would do some of this themselves, but I guess there's both pros and cons to having stuff automagically included into Cell::Concept\n. Thanks for the idea, @shkm. Using Cells 4 (and cells-rails and cells-haml and simple_form). I had to make a concern / module to include in my cells as the list of includes was as long as yours.\n\nIt would be nice if cells-rails or cells-haml would do some of this themselves, but I guess there's both pros and cons to having stuff automagically included into Cell::Concept\n. ",
    "tbrooke": "Gemfile:\n\ngem 'cells', git: \"https://github.com/apotonick/cells\"\n\nVersion RB\n\nmodule VERSION\n    MAJOR = 4\n    MINOR = 0\n    TINY  = 0\n    PRE   = 'alpha1'\n\nOn Wed, Jan 28, 2015 at 11:28 PM, Nick Sutterer notifications@github.com\nwrote:\n\n> Hey Tom, may I enquire which Cells version you're using?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/261#issuecomment-71967523.\n. Gemfile:\n\ngem 'cells', git: \"https://github.com/apotonick/cells\"\n\nVersion RB\n\nmodule VERSION\n    MAJOR = 4\n    MINOR = 0\n    TINY  = 0\n    PRE   = 'alpha1'\n\nOn Wed, Jan 28, 2015 at 11:28 PM, Nick Sutterer notifications@github.com\nwrote:\n\n> Hey Tom, may I enquire which Cells version you're using?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/261#issuecomment-71967523.\n. ",
    "EppO": "I get the same issue when using Cells 4.0.beta2 and rspec-cells (either master branch or 0.2.2).\nthe cell controller and views are created but the specs file fails to generate.\n. I feel ashamed of myself... Didn't read the README carefully enough after upgrading from Cells 3.x\nThank you for pointing out my mistake.\n. Yeah I've seen it :)\nI would definitely put the Installation chapter before the Usage one, and I'm willing to do it to redeem myself.\n. I'm maybe wrong but I think that when you land in cells github page, you already know what you want because you read a blog post about it or you used cells 3.x, so what you're looking for is a quick working setup to start playing with cells. But I agree that all depends on what role you want this github page to fulfill.\n. And links to blog posts in a resources section like the book for example could be a useful option for someone looking for a good introduction to cells. \n. I don't think the build fail is related to my commit... \n. I get the same issue when using Cells 4.0.beta2 and rspec-cells (either master branch or 0.2.2).\nthe cell controller and views are created but the specs file fails to generate.\n. I feel ashamed of myself... Didn't read the README carefully enough after upgrading from Cells 3.x\nThank you for pointing out my mistake.\n. Yeah I've seen it :)\nI would definitely put the Installation chapter before the Usage one, and I'm willing to do it to redeem myself.\n. I'm maybe wrong but I think that when you land in cells github page, you already know what you want because you read a blog post about it or you used cells 3.x, so what you're looking for is a quick working setup to start playing with cells. But I agree that all depends on what role you want this github page to fulfill.\n. And links to blog posts in a resources section like the book for example could be a useful option for someone looking for a good introduction to cells. \n. I don't think the build fail is related to my commit... \n. ",
    "vishakhasawant": "I am still getting this error with apotomo-1.3.1 and rails 4.2. I tried using master version of both apotomo and cells but that didnt work. Below is the stacktrace.\n\n``` ruby\n/usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require': cannot load such file -- generators/cells/base (LoadError)\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `block in require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/apotomo-1.3.1/lib/generators/apotomo/widget_generator.rb:1:in `<top (required)>'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `block in require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:334:in `block (2 levels) in lookup'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:330:in `each'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:330:in `block in lookup'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:329:in `each'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:329:in `lookup'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:138:in `find_by_namespace'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:155:in `invoke'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/generate.rb:13:in `<top (required)>'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `block in require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/commands_tasks.rb:123:in `require_command!'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/commands_tasks.rb:130:in `generate_or_destroy'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/commands_tasks.rb:50:in `generate'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/commands_tasks.rb:39:in `run_command!'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands.rb:17:in `<top (required)>'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `block in require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /home/workspace/apotomo_demo/bin/rails:8:in `<top (required)>'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:268:in `load'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:268:in `block in load'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:268:in `load'\n        from /usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n        from /usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n        from -e:1:in `<main>'\n```\n. I am still getting this error with apotomo-1.3.1 and rails 4.2. I tried using master version of both apotomo and cells but that didnt work. Below is the stacktrace.\n\n``` ruby\n/usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require': cannot load such file -- generators/cells/base (LoadError)\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `block in require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/apotomo-1.3.1/lib/generators/apotomo/widget_generator.rb:1:in `<top (required)>'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `block in require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:334:in `block (2 levels) in lookup'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:330:in `each'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:330:in `block in lookup'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:329:in `each'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:329:in `lookup'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:138:in `find_by_namespace'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/generators.rb:155:in `invoke'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/generate.rb:13:in `<top (required)>'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `block in require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/commands_tasks.rb:123:in `require_command!'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/commands_tasks.rb:130:in `generate_or_destroy'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/commands_tasks.rb:50:in `generate'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands/commands_tasks.rb:39:in `run_command!'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/railties-4.2.1/lib/rails/commands.rb:17:in `<top (required)>'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `block in require'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:274:in `require'\n        from /home/workspace/apotomo_demo/bin/rails:8:in `<top (required)>'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:268:in `load'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:268:in `block in load'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:240:in `load_dependency'\n        from /usr/local/rvm/gems/ruby-2.2.1/gems/activesupport-4.2.1/lib/active_support/dependencies.rb:268:in `load'\n        from /usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n        from /usr/local/rvm/rubies/ruby-2.2.1/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n        from -e:1:in `<main>'\n```\n. ",
    "dineshPallapa": "Is their any replacement or any supported methods for Apotomo to make work with cells 4.1.3\n. Is their any replacement or any supported methods for Apotomo to make work with cells 4.1.3\n. ",
    "barttenbrinke": "Wow, this change is really big for us. I am kind of stuck as how to begin. Currently we mix in extra methods in Rails::Cell, but I guess I can safely move those to Cell::Viewmodel? And then rewrite all of our 25+ cells. And one thing I was missing in the migration guide was the fact that call has been removed. Could you tell a bit more about the old and the new behaviour?\n. Wow, this change is really big for us. I am kind of stuck as how to begin. Currently we mix in extra methods in Rails::Cell, but I guess I can safely move those to Cell::Viewmodel? And then rewrite all of our 25+ cells. And one thing I was missing in the migration guide was the fact that call has been removed. Could you tell a bit more about the old and the new behaviour?\n. ",
    "berkes": "I should have mentioned this is cells3 with a \"controller\" type cell:\n\napp/cells/analysis_cell.rb\n\n```\ndef chart(params)\n  @analysis_chart = params[:analysis_chart]\n  render\nend\n```\n\napp/cells/analysis/chart.html.slim (I've extensively tested with erb too, slim or ERB hardly seems to matter for this question)\n\n```\n= indicator_chart_tag(@analysis_chart.charts)\n```\n\nspec/cells/analysis_cell_spec.rb\n\n```\ndescribe 'rendering a chart' do\n  let(:chart) { double(:chart) }\n  let(:analysis_chart) { double(:analysis_graph, charts: [chart]) }\n\n  it 'renders a chart using the indicator_chart_tag helper' do\n    expect(view).to receive(:indicator_chart_tag).with([chart])\n    render_cell(:analysis, :chart, analysis_chart: analysis_chart)\n  end\nend\n```\n\nHere's what I tried, already (from memory):\n\n```\ndescribe AnalysisCell, type: :cell do\n   include ActionView::TestCase::Behavior\n   #..\n     expect(_view).to receive(:indicator_chart_tag)\n     expect_any_istance_of(AnalysisCell).to receive(:indicator_chart_tag)\n     expect_any_istance_of(ActionView::Basic).to receive(:indicator_chart_tag)\n```\n\nIt looks like the way `render_cell` works, does not allow stubbing at\nall, but I don't fully understand it, and think (hope) I am overlooking\nan important piece.\n\nEdit: Yes, since this is a (way too) complex helper, for now, we only want to test that this helper is called with the proper arguments. Not that it renders the correct charts.\n. I should have mentioned this is cells3 with a \"controller\" type cell:\n\napp/cells/analysis_cell.rb\n\n```\ndef chart(params)\n  @analysis_chart = params[:analysis_chart]\n  render\nend\n```\n\napp/cells/analysis/chart.html.slim (I've extensively tested with erb too, slim or ERB hardly seems to matter for this question)\n\n```\n= indicator_chart_tag(@analysis_chart.charts)\n```\n\nspec/cells/analysis_cell_spec.rb\n\n```\ndescribe 'rendering a chart' do\n  let(:chart) { double(:chart) }\n  let(:analysis_chart) { double(:analysis_graph, charts: [chart]) }\n\n  it 'renders a chart using the indicator_chart_tag helper' do\n    expect(view).to receive(:indicator_chart_tag).with([chart])\n    render_cell(:analysis, :chart, analysis_chart: analysis_chart)\n  end\nend\n```\n\nHere's what I tried, already (from memory):\n\n```\ndescribe AnalysisCell, type: :cell do\n   include ActionView::TestCase::Behavior\n   #..\n     expect(_view).to receive(:indicator_chart_tag)\n     expect_any_istance_of(AnalysisCell).to receive(:indicator_chart_tag)\n     expect_any_istance_of(ActionView::Basic).to receive(:indicator_chart_tag)\n```\n\nIt looks like the way `render_cell` works, does not allow stubbing at\nall, but I don't fully understand it, and think (hope) I am overlooking\nan important piece.\n\nEdit: Yes, since this is a (way too) complex helper, for now, we only want to test that this helper is called with the proper arguments. Not that it renders the correct charts.\n. ",
    "rhomeister": "@apotonick Could you help me with this please? It's the only issue that is blocking deploy of Cells in our production environment ;)\n. Thanks! That did the trick.\n. OK. Just figured out that `return ''` does the same. However, this could be a little counter-intuitive for other Rails users.\n. @apotonick Could you help me with this please? It's the only issue that is blocking deploy of Cells in our production environment ;)\n. Thanks! That did the trick.\n. OK. Just figured out that `return ''` does the same. However, this could be a little counter-intuitive for other Rails users.\n. ",
    "vinett-de": "+1 same problem\n. +1 same problem\n. ",
    "samstickland": "I have the same problem for ERB when using form_for, and I've provided a very hacky fix below.\n\nFor some reason I don't get much of a stack trace, but I stepped through it with byebug and the error is in ActionView:Helpers:Capture:Helper \n\n```\n  def with_output_buffer(buf = nil) #:nodoc:\n    unless buf\n      buf = ActionView::OutputBuffer.new\n      buf.force_encoding(output_buffer.encoding) if output_buffer\n    end\n    self.output_buffer, old_buffer = buf, output_buffer\n    yield\n    output_buffer\n  ensure\n    self.output_buffer = old_buffer\n  end\n```\n\nSomething has already defined output_buffer as an empty array, which makes it die here. Digging into the cells code shows that it's this method in ViewModel:\n\n```\ndef output_buffer\n  @output_buffer ||= []\nend\nattr_writer :output_buffer # TODO: test that, this breaks in MM.\n```\n\nThis can be fixed by monkey patching like this, but it is bringing back ActionView:\n\n```\nmodule Cell\n  class ViewModel < AbstractController::Base\n\n  private\n    def output_buffer\n      @output_buffer ||= ActionView::OutputBuffer.new\n    end\n  end\nend\n```\n\nThe longer term fix would be defining output_buffer to something that supports all the methods ActionView requires.\n. After a lot of digging around I found that I also needed to include the following:\n\n```\ninclude ActionView::Helpers::FormOptionsHelper\n```\n. Thanks for the reply. I'm going to submit a pull request to update the readme when I get time. It took quite a long time to gather all the required information to make this work! :)\n. Thanks :) That really ought to be mentioned in the readme (it currently says: Cells comes bundled with ERB support. To render HAML, you have to include the cells-haml gem. The same for cells-slim).\n\nUnfortunately it didn't work. I installed cells-erb (0.0.1) and without my monkey patch it still gave the same error message.\n. I've just tried this with cells-erb installed and I still have the same issue. Odd, because it says in the source-code comments for cells-erb that it's purpose is to fix precisely this problem!\n. I've tried to replicate this in a small test  project but so far I've been\nunable to. I'll let you know how I get on.\nEl 2/6/2015 23:08, \"Nick Sutterer\" notifications@github.com escribi\u00f3:\n\n> Thanks, I was excepting this to happen at some point :) We use Erbse for\n> ERB in Cells, which uses Tilt, and sprockets use Tilt as well (instead of\n> ActionView, which doesn't make sense at all, but, welcome to Rails).\n> Sprockets now uses our ERB which is not compatible with Rails again.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/285#issuecomment-108112593.\n. In that case I shall leave it in your capable hands :)\nEl 2/6/2015 23:15, \"Nick Sutterer\" notifications@github.com escribi\u00f3:\n\n> No need to do that @samstickland https://github.com/samstickland - I\n> know exactly where the problem lies.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/285#issuecomment-108114396.\n. OK, perfect :) Btw, there's no need to rush on my account, I can continue\nusing the previous version for now.\n\n2015-06-03 10:14 GMT+01:00 Nick Sutterer notifications@github.com:\n\n> I was able to provoke that problem very easily and will fix it in the next\n> 12 hrs. [image: :beers:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/285#issuecomment-108261580.\n. Cells 4.0.0\nEl 21/6/2015 23:16, \"Nick Sutterer\" notifications@github.com escribi\u00f3:\n\n> Cells 3 or 4?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Right, I've tracked this to the with_output_buffer method called from capture\n\nWhen the ActionView method invokes yield it captures the block output in output_buffer:\n\n```\n[196, 205] in /home/dev/.rvm/gems/ruby-2.2.1/gems/actionview-4.2.1/lib/action_view/helpers/capture_helper.rb\n   196:           buf = ActionView::OutputBuffer.new\n   197:           buf.force_encoding(output_buffer.encoding) if output_buffer\n   198:         end\n   199:         self.output_buffer, old_buffer = buf, output_buffer\n   200:         yield\n=> 201:         output_buffer\n   202:       ensure\n   203:         self.output_buffer = old_buffer\n   204:       end\n   205:     end\n(byebug) p output_buffer\n\"<p>Please fix the errors below.</p>\"\n```\n\nBut the Cells implementation isn't capturing the output in the returned variable.\n\n```\n[33, 42] in /home/dev/.rvm/gems/ruby-2.2.1/bundler/gems/cells-erb-1ac42b5432bf/lib/cell/erb/template.rb\n   33:     def with_output_buffer(block_buffer=ViewModel::OutputBuffer.new)\n   34:       @output_buffer, old_buffer = block_buffer, @output_buffer\n   35:       yield\n   36:       @output_buffer = old_buffer\n   37: \n=> 38:       block_buffer\n   39:     end\n   40: \n   41:     # Below:\n   42:     # Rails specific helper fixes. I hate that. I can't tell you how much I hate those helpers,\n(byebug) p block_buffer\n[]\n```\n\nBut I don't understand how either of the buffers are supposed to magically capture the output of yield so I don't know how to go about fixing this :)\n. cells and cells-erb are both at master btw.\n. OK, so I figured out that it's the concat method that should add to the output_buffer and it's the concat method that, bizarrely, doesn't seem to be working when output_buffer is Cell::ViewModel::OutputBuffer.\n\nHere's some byebug output inside the concat method where I try to manually run the << method to append to the Cell::ViewModel::OutputBuffer object without success.\n\n```\n[48, 57] in /home/dev/.rvm/gems/ruby-2.2.1/gems/actionview-4.2.1/lib/action_view/helpers/text_helper.rb\n   48:       #         concat link_to('login', action: :login)\n   49:       #       end\n   50:       #       # will either display \"Logged in!\" or a login link\n   51:       #   %>\n   52:       def concat(string)\n=> 53:         output_buffer << string\n   54:       end\n   55: \n   56:       def safe_concat(string)\n   57:         output_buffer.respond_to?(:safe_concat) ? output_buffer.safe_concat(string) : concat(string)\n(byebug) p output_buffer\n[]\n[]\n(byebug) p string\n\"<p>Please fix the errors below.</p>\"\n\"<p>Please fix the errors below.</p>\"\n(byebug) output_buffer << string\n[\"<p>Please fix the errors below.</p>\"]\n(byebug) output_buffer.join\n\"\"\n(byebug) output_buffer << \"<p>Please fix the errors below.</p>\"\n[\"<p>Please fix the errors below.</p>\"]\n(byebug) output_buffer.join\n\"\"\n```\n\nIt works just fine in a rails console though :/\n\n```\n2.2.1 :008 > output_buffer = Cell::ViewModel::OutputBuffer.new\n => [] \n2.2.1 :009 > output_buffer << \"<p>Please fix the errors below.</p>\"\n => [\"<p>Please fix the errors below.</p>\"] \n2.2.1 :010 > output_buffer.join\n => \"<p>Please fix the errors below.</p>\" \n```\n. Well it's all learning! I'm interested to know what the fix is :)\n\n2015-06-22 22:47 GMT+01:00 Nick Sutterer notifications@github.com:\n\n> Do you get a feeling now why I hate Rails helpers and don't want to do\n> anything with them anymore?\n> \n> BTW I know where the problem is, stop wasting your precious time.. [image:\n> :stuck_out_tongue_winking_eye:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/294#issuecomment-114273395.\n. Ah, I see, that makes sense. I've upgraded and it's all working for me now.\n\nWith regards, the help, I'm a bit busy at the moment (just finishing up one\nnetwork consulting job and doing some software development on the side),\nbut once things settle down a but I think I might be interested :)\n\nS\n\n2015-06-23 0:50 GMT+01:00 Nick Sutterer notifications@github.com:\n\n> Fixed in cells-erb 0.0.5.\n> \n> The problem was that the old helper uses output_buffer (the method). In\n> cells, this method is only called once per view, so this creates a new\n> output buffer and thus forgets some input (as we're appending to two\n> different output buffers).\n> \n> If you want to learn how it's done right, check out how slim does it. No\n> need to fix anything there, as it's really clean. I will soon change Erbse\n> to support these operations on the ERB level.\n> \n> In case you're interested in all this and want to help - just let me know,\n> I can give you an introduction and then maybe you want to play with Erbse a\n> bit? [image: :cake:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/294#issuecomment-114306360.\n. Have you installed the cells-erb gem?\n\n2015-06-22 20:43 GMT+01:00 Florent Monbillard notifications@github.com:\n\n> Hi,\n> \n> using Cells 4.0, I get this error\n> \n> undefined method `template_options_for' for #TeamMenuCell:0x007fe23aa0b968\n> \n> Here is the (very simple) code:\n> \n> class TeamMenuCell < Cell::ViewModel\n>   def show\n>     render\n>   end\n> \n> which is called in that view like this:\n> \n> <%= cell(:team_menu, @team, disabled: \"thumbnails\")  %>\n> \n> Reading the code, I assume template_options_for is a support method\n> provided by the template engine, as I'm using ERB, is there any\n> incompatibility with it? Or maybe I'm missing something.\n> Also, after reading the documentation, I have hard time to know how to\n> properly name my cell, should I use Comment::Cell like in the Cell class\n> section or CommentCell like in the Properties section.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/295.\n. I did consider creating a row view inside of items, but this means I end up calling the cell with different types of model which feels very icky, so I haven't gone done this route.\n\napp/cells/item_cell.rb:\n\n```\nclass Items < Cell::ViewModel\n  property :id, :name\n\n  def show\n    render\n  end\n\n  private\n\n  def has_items?\n    model.count > 0\n  end\n\n  def items\n    model.proxy_association.scope.order('date DESC')\n  end\n\n  def date\n     model.date.present? ? date.strftime('%b %Y') : ''\n  end\nend\n```\n\napp/cells/items/show.erb\n\n```\n<h1>Items</h1>\n<% if has_items? %>\n  <table>\n    <tr>\n      <th>ID</th>\n      <th>Name</th>\n      <th>Date</th>\n    </tr>\n    <%= cell(:item, collection: items).(:row) %>\n  </table>\n<% else %>\n  <h2>No items found</h2>\n<% end %>\n```\n\napp/cells/item/row.erb\n\n```\n<tr>\n  <td><%= id %></td>\n  <td><%= name %></td>\n  <td><%= date %></td>\n</tr>\n```\n. Thanks for the reply.\n\nI guess there isn't any real redundancy, but it felt a little split up, with app/cells/item/.. and app/cells/items/.. both needed to build the header and body of the table.\n\nHow would this look with concepts and not cells?\n\nIn the trailblazer book it uses:\n\n```\nclass Thing::Cell < Cell::Concept\n  class Grid < Cell::Concept \n```\n\nbut I can't find this structure in gemgem on github, instead it has:\n\n```\nclass Thing::Cell < Cell::Concept\n  class Row < self # inherit views thing/views/.\n```\n\nWhich has left me a touch confused.\n. I was googling this myself just recently and found this answer on stackoverflow.com that says the copyright year shouldn't be altered, as records the date from which you are claiming copyright. \n\nhttp://stackoverflow.com/questions/2390230/do-copyright-dates-need-to-be-updated\n. You mean to the cells helper?\n\n`cell('timesheets/client/overview')`\n. OK, I've been trying.. but writing a test that demonstrates it proving to be difficult. For some reason I can't construct a failing test. I'll get back to you!\n. @apotonick So I'm a little stumped. I can still only make my code work if I include `inherit = false` in the const_get options, as I mentioned in the trailblazer chatroom.\n\nBizarrely, once there has been a single call to const_get with `inherit = false` then all subsequent calls to const_get work just fine, even if I do `inherit = true`.  I think this, in combination with Spring, was why I failed to notice this before.\n\nI am still unable to reproduce this behaviour in a test :(\n. I installed hamlit-block and it started working. Doh.\n\nI still have no idea why it wasn't working with haml though.\n. Use :: Rails.env.development?\n\n2016-05-26 16:00 GMT+01:00 chrisyeung1121 notifications@github.com:\n\n> I have a following cell class\n> \n> class PromotionRuleCell < Cell::ViewModel\n> \n>   def selector\n>     render\n>   end\n> \n>   def all_subclasses\n>     Rails.env.development? ? [\n>         Promotion::Rules::RentTime,\n>         Promotion::Rules::RequestTime,\n>         Promotion::Rules::RentDuration,\n>         Promotion::Rules::TargetCar\n>         ] : PromotionRule.subclasses\n>   end\n> end\n> \n> I basically have to access Rails.env variable but since Rails has become\n> a module under Cell::Slim::Rails:Module I can't access Rails.env now. Is\n> there any way to work around this?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/407\n. Sorry, I put a space into that by mistake. It should had been:\n\n::Rails.env.development?\n. Wait, I didn't read your error message properly before.. Where are you calling all_subclasses from?\n\nThe ::Rails syntax is definitely correct, I'm using that in my own project.\n. https://github.com/trailblazer/cells-haml/issues/4\n. OK, I found the problem.. That was a red herring above.\n\nThe problem is that for a collection the options all end up in `model`, but in cells-rails options is initialised in the rails helper:\n\n```\n    options[:context] ||= {}\n    options[:context][:controller] = self\n```\n\nThen in cells there's this bit of code in Cells (lib/cell/view_model.rb) where it merges the options for a collection\n\n```\n  def call(model=nil, options={}, &block)\n    if model.is_a?(Hash) and array = model[:collection]\n      return Collection.new(array, model.merge(options), self)\n    end\n\n    build(model, options)\n  end\n```\n\nThe problem is that both `model` and `options` contain a `context` key so one of them gets overwritten, rather than merged.\n\nA possible fix would be this:\n\n```\n    def call(model=nil, options={}, &block)\n      if model.is_a?(Hash) and array = model[:collection]\n        merged_context = (model[:context] || {}).merge(options[:context])\n\n        merged_options = model.merge(options)\n        merged_options[:context] = merged_context\n\n        return Collection.new(array, merged_options, self)\n      end\n\n      build(model, options)\n    end\n```\n. https://github.com/samstickland/cells/commit/1ff3eac397ec87344cb1bdcafb1365c21dab1fa6\n\nSorry, I won't have time to write a test for this until next week.\n. @apotonick : Hi Nick, which release can I find this fix in?. Well this is embarrassing.. Probably best ignore that until I fix those broken tests.\n. @timoschilling Sorry, I don't understand. ViewModel#call is the public entry point.\n\nI could fix it in the calling code in rails-cells but then rails-cells would need to be aware of the collection handling logic, which doesn't seem right.\n\nThe issue is described here: https://github.com/apotonick/cells/issues/413#issuecomment-225028800\n. Sure, I'll add a test.\n\nThe symptom of the problem is in rails, given this:\n\n= cell(:comment, collection: Comment.recent, context: { current_user:\ncurrent_user } )\n\nThe contents of the context hash will be over-written with a new hash\ncontaining only 'controller'.\n\nRails-cells isn't collection aware so it sees an empty options hash (as the\noptions are in the model variable at this stage) and then creates options\nand adds :controller to :context. In Cells when it merges the options given\nby rails-cells it's not a deep merge, so the original context gets\noverwritten by the one provided by rails-cells\n\nThe problem is on the boundary between rails-cells and cells so it's not\nclear in which one the fix should be.. complicated by the fact that\nrails-cells is not aware of how collections are handled.\n\nI don't understand that.. the context is passed into collections, there's\ntests here:\nhttps://github.com/apotonick/cells/blob/master/test/context_test.rb#L18\n\nCould you provide a test that fails for your fix?\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apotonick/cells/pull/415#issuecomment-226133124, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AJfZU_U_CsJuKx392-P3mxuhBUV-9u2Jks5qL8M_gaJpZM4Iy5wl\n.\n. @apotonick This cells-rails fork includes a demonstration of this problem\n\nhttps://github.com/samstickland/cells-rails/commit/9540a5e635930ea5d54e1642abe2d334613116a7\n\nThe added test fails in the existing version of cells, but passes using my PR above.\n\n@timoschilling But context is overwritten **inside of the cells gem** when it merges the two options hashes - one provided by the user, one provided by rails-cells.\n. @apotonick @timoschilling Right, I've rewritten that test case to be contained within a single file, rather than spread out across routes, controllers etc.\n\nhttps://github.com/samstickland/cells-rails/commit/3eae04f3b2b5b33102dd3b50f186fb4266490ef1\n\n```\nrequire \"test_helper\"\n\nclass ContextCollectionTest < MiniTest::Spec\n  include Cell::RailsExtensions::ActionController\n  class ArtistCell < Cell::ViewModel\n    def show\n      # Test will fail if current_user is not present\n      raise Exception, \"no current_user in context\" unless context[:current_user]\n      return \"success\"\n    end\n  end\n\n  it do\n    size = 3\n    artists = [Artist.new] * size\n\n    result = cell(ArtistCell, collection: artists, context: { current_user: Object.new }).()\n\n    assert_equal \"success\" * size, result\n  end\nend\n```\n. If you run that test case you will see the problem straight away! ;)\n. @timoschilling Do you mean this line? I'm not sure where I'm looking at to see the linenote:\n\n`merged_options = nil if merged_options.empty?`\n\nI had to add that line to make some of the existing test cases pass in the cells test suite. I'll need to remove it and run it again to remember which ones they were.\n\n@apotonick , @timoschilling I don't proposing that we merge this PR in it's current state, I threw it together - along with the rough test case - to demonstrate the _bug_ in collection handling ;)\n\nLike I said it could be argued that the bug is on the boundary between cells and cells-rails - hence why my proposed fix is currently in cells and the test case is in cells-rails.\n\nI'm happy to try to explain this again, but if you run the test case above you'll instantly see the problem!\n\nAnd then I'd a steer as to where this should be fixed, and I'll tidy up this PR.\n. Any news? :)\n. @apotonick I'm happy to tidy this up myself, but this is the first time I've even really received an acknowledgement from a maintainer that this problem is genuine! ;)\n\nI also, as mentioned above, made a demo test-case for this here: https://github.com/samstickland/cells-rails/commit/9540a5e635930ea5d54e1642abe2d334613116a7\n\nBut as you can see the test is in cells-rails and the fix is in cells. Hardly ideal. If you can let me know what needs to happen or be tidied up for this to be accepted I'll make it happen!\n. Have you tried installing hamlit-block ?\n\n2016-06-25 16:48 GMT+01:00 Nick Yatracos notifications@github.com:\n\n> I'm not sure if this is Cells and/or Hamlit, but using a bare Rails 4.2.6\n> app on Ruby 2.2.3, rendering a simple form tag and submit tag is broken\n> with Hamlit:\n> \n> =form_tag '/' do\n>   = submit_tag 'Save'\n> \n> I get:\n> \n> With cells-hamlit (0.2.0):\n> \n> <input type=\"submit\" name=\"commit\" value=\"Save\" />\n> \n> <form action=\"/\" accept-charset=\"UTF-8\" method=\"post\"><input name=\"utf8\" type=\"hidden\" value=\"&#x2713;\" /><input type=\"hidden\" name=\"authenticity_token\" value=\"ocWFwYCM9qLZ8qqC7MOuHw98xje0g1ROcGu+7qi706YZ5C9FkqDhPA679r5CpOGTc9fUykUevBzTs+xUPOZ5hw==\" />[\"<input type=\\\"submit\\\" name=\\\"commit\\\" value=\\\"Save\\\" />\", \"\\n\"]</form>\n> \n> With cells-haml (0.0.10) and the haml ref from the readme:\n> \n> <form action=\"/\" accept-charset=\"UTF-8\" method=\"post\"><input name=\"utf8\" type=\"hidden\" value=\"&#x2713;\" /><input type=\"hidden\" name=\"authenticity_token\" value=\"Ozbug08sSSPi6CNZ0tZOMCFEC11/Wu5E2lrSwVYRXsaDF0QHXQBevTWhf2V8sQG8Xe8ZoI7HBhZ5goB7wkz05w==\" />\n>   <input type=\"submit\" name=\"commit\" value=\"Save\" />\n> </form>\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apotonick/cells/issues/419, or mute the thread\n> https://github.com/notifications/unsubscribe/AJfZU51gmFnXebv-AOT71-ZZ9e-3Pg2qks5qPU3egaJpZM4I-Xwo\n> .\n. Yeah @apotonick or the hamlit author might have something to add about\nthis. I've since swapped hamlit for slim.\n\nSam\nEl 26 jun. 2016 2:54 PM, \"Nick Yatracos\" notifications@github.com\nescribi\u00f3:\n\n> I see. @samstickland https://github.com/samstickland installing\n> hamlit-block has the side effect you mentioned in hamlit/hamlit-block#1\n> https://github.com/hamlit/hamlit-block/issues/1 where blocks no longer\n> have any output so my other templates break.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apotonick/cells/issues/419#issuecomment-228602503,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AJfZU65EDUkeawE6rvn4hKW3QG8cJizZks5qPoR2gaJpZM4I-Xwo\n> .\n. @apotonick  this is same problem I was having, that I never truly got to the bottom of.\n. See: https://github.com/apotonick/cells/pull/404 , which was merged but then I found it never really fixed my problem, unless I did the same thing that is proposed here.\n\nI was unable to ever reproduce my problem in an isolated test.\n. @jarosluv Do you still have this issue if you pass the class name to the helper directly? i.e.\n\n`cell(Foo::Bar::BazCell, model)`\n. @apotonick to be clear, what he is proposing does fix my problem as well..\nBut I could never accurately reproduce it in a test so I didn't submit a PR\nand I've since moved over to using the Class names directly.\n\n2016-10-19 12:53 GMT+01:00 Nick Sutterer notifications@github.com:\n\n> Closed #431 https://github.com/apotonick/cells/pull/431.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apotonick/cells/pull/431#event-828930891, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AJfZU1ZCRFFCgNLKWA1PHBgBa7TGjj6Aks5q1gScgaJpZM4KZs_l\n> .\n. I have the same problem for ERB when using form_for, and I've provided a very hacky fix below.\n\nFor some reason I don't get much of a stack trace, but I stepped through it with byebug and the error is in ActionView:Helpers:Capture:Helper \n\n```\n  def with_output_buffer(buf = nil) #:nodoc:\n    unless buf\n      buf = ActionView::OutputBuffer.new\n      buf.force_encoding(output_buffer.encoding) if output_buffer\n    end\n    self.output_buffer, old_buffer = buf, output_buffer\n    yield\n    output_buffer\n  ensure\n    self.output_buffer = old_buffer\n  end\n```\n\nSomething has already defined output_buffer as an empty array, which makes it die here. Digging into the cells code shows that it's this method in ViewModel:\n\n```\ndef output_buffer\n  @output_buffer ||= []\nend\nattr_writer :output_buffer # TODO: test that, this breaks in MM.\n```\n\nThis can be fixed by monkey patching like this, but it is bringing back ActionView:\n\n```\nmodule Cell\n  class ViewModel < AbstractController::Base\n\n  private\n    def output_buffer\n      @output_buffer ||= ActionView::OutputBuffer.new\n    end\n  end\nend\n```\n\nThe longer term fix would be defining output_buffer to something that supports all the methods ActionView requires.\n. After a lot of digging around I found that I also needed to include the following:\n\n```\ninclude ActionView::Helpers::FormOptionsHelper\n```\n. Thanks for the reply. I'm going to submit a pull request to update the readme when I get time. It took quite a long time to gather all the required information to make this work! :)\n. Thanks :) That really ought to be mentioned in the readme (it currently says: Cells comes bundled with ERB support. To render HAML, you have to include the cells-haml gem. The same for cells-slim).\n\nUnfortunately it didn't work. I installed cells-erb (0.0.1) and without my monkey patch it still gave the same error message.\n. I've just tried this with cells-erb installed and I still have the same issue. Odd, because it says in the source-code comments for cells-erb that it's purpose is to fix precisely this problem!\n. I've tried to replicate this in a small test  project but so far I've been\nunable to. I'll let you know how I get on.\nEl 2/6/2015 23:08, \"Nick Sutterer\" notifications@github.com escribi\u00f3:\n\n> Thanks, I was excepting this to happen at some point :) We use Erbse for\n> ERB in Cells, which uses Tilt, and sprockets use Tilt as well (instead of\n> ActionView, which doesn't make sense at all, but, welcome to Rails).\n> Sprockets now uses our ERB which is not compatible with Rails again.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/285#issuecomment-108112593.\n. In that case I shall leave it in your capable hands :)\nEl 2/6/2015 23:15, \"Nick Sutterer\" notifications@github.com escribi\u00f3:\n\n> No need to do that @samstickland https://github.com/samstickland - I\n> know exactly where the problem lies.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/285#issuecomment-108114396.\n. OK, perfect :) Btw, there's no need to rush on my account, I can continue\nusing the previous version for now.\n\n2015-06-03 10:14 GMT+01:00 Nick Sutterer notifications@github.com:\n\n> I was able to provoke that problem very easily and will fix it in the next\n> 12 hrs. [image: :beers:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/285#issuecomment-108261580.\n. Cells 4.0.0\nEl 21/6/2015 23:16, \"Nick Sutterer\" notifications@github.com escribi\u00f3:\n\n> Cells 3 or 4?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Right, I've tracked this to the with_output_buffer method called from capture\n\nWhen the ActionView method invokes yield it captures the block output in output_buffer:\n\n```\n[196, 205] in /home/dev/.rvm/gems/ruby-2.2.1/gems/actionview-4.2.1/lib/action_view/helpers/capture_helper.rb\n   196:           buf = ActionView::OutputBuffer.new\n   197:           buf.force_encoding(output_buffer.encoding) if output_buffer\n   198:         end\n   199:         self.output_buffer, old_buffer = buf, output_buffer\n   200:         yield\n=> 201:         output_buffer\n   202:       ensure\n   203:         self.output_buffer = old_buffer\n   204:       end\n   205:     end\n(byebug) p output_buffer\n\"<p>Please fix the errors below.</p>\"\n```\n\nBut the Cells implementation isn't capturing the output in the returned variable.\n\n```\n[33, 42] in /home/dev/.rvm/gems/ruby-2.2.1/bundler/gems/cells-erb-1ac42b5432bf/lib/cell/erb/template.rb\n   33:     def with_output_buffer(block_buffer=ViewModel::OutputBuffer.new)\n   34:       @output_buffer, old_buffer = block_buffer, @output_buffer\n   35:       yield\n   36:       @output_buffer = old_buffer\n   37: \n=> 38:       block_buffer\n   39:     end\n   40: \n   41:     # Below:\n   42:     # Rails specific helper fixes. I hate that. I can't tell you how much I hate those helpers,\n(byebug) p block_buffer\n[]\n```\n\nBut I don't understand how either of the buffers are supposed to magically capture the output of yield so I don't know how to go about fixing this :)\n. cells and cells-erb are both at master btw.\n. OK, so I figured out that it's the concat method that should add to the output_buffer and it's the concat method that, bizarrely, doesn't seem to be working when output_buffer is Cell::ViewModel::OutputBuffer.\n\nHere's some byebug output inside the concat method where I try to manually run the << method to append to the Cell::ViewModel::OutputBuffer object without success.\n\n```\n[48, 57] in /home/dev/.rvm/gems/ruby-2.2.1/gems/actionview-4.2.1/lib/action_view/helpers/text_helper.rb\n   48:       #         concat link_to('login', action: :login)\n   49:       #       end\n   50:       #       # will either display \"Logged in!\" or a login link\n   51:       #   %>\n   52:       def concat(string)\n=> 53:         output_buffer << string\n   54:       end\n   55: \n   56:       def safe_concat(string)\n   57:         output_buffer.respond_to?(:safe_concat) ? output_buffer.safe_concat(string) : concat(string)\n(byebug) p output_buffer\n[]\n[]\n(byebug) p string\n\"<p>Please fix the errors below.</p>\"\n\"<p>Please fix the errors below.</p>\"\n(byebug) output_buffer << string\n[\"<p>Please fix the errors below.</p>\"]\n(byebug) output_buffer.join\n\"\"\n(byebug) output_buffer << \"<p>Please fix the errors below.</p>\"\n[\"<p>Please fix the errors below.</p>\"]\n(byebug) output_buffer.join\n\"\"\n```\n\nIt works just fine in a rails console though :/\n\n```\n2.2.1 :008 > output_buffer = Cell::ViewModel::OutputBuffer.new\n => [] \n2.2.1 :009 > output_buffer << \"<p>Please fix the errors below.</p>\"\n => [\"<p>Please fix the errors below.</p>\"] \n2.2.1 :010 > output_buffer.join\n => \"<p>Please fix the errors below.</p>\" \n```\n. Well it's all learning! I'm interested to know what the fix is :)\n\n2015-06-22 22:47 GMT+01:00 Nick Sutterer notifications@github.com:\n\n> Do you get a feeling now why I hate Rails helpers and don't want to do\n> anything with them anymore?\n> \n> BTW I know where the problem is, stop wasting your precious time.. [image:\n> :stuck_out_tongue_winking_eye:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/294#issuecomment-114273395.\n. Ah, I see, that makes sense. I've upgraded and it's all working for me now.\n\nWith regards, the help, I'm a bit busy at the moment (just finishing up one\nnetwork consulting job and doing some software development on the side),\nbut once things settle down a but I think I might be interested :)\n\nS\n\n2015-06-23 0:50 GMT+01:00 Nick Sutterer notifications@github.com:\n\n> Fixed in cells-erb 0.0.5.\n> \n> The problem was that the old helper uses output_buffer (the method). In\n> cells, this method is only called once per view, so this creates a new\n> output buffer and thus forgets some input (as we're appending to two\n> different output buffers).\n> \n> If you want to learn how it's done right, check out how slim does it. No\n> need to fix anything there, as it's really clean. I will soon change Erbse\n> to support these operations on the ERB level.\n> \n> In case you're interested in all this and want to help - just let me know,\n> I can give you an introduction and then maybe you want to play with Erbse a\n> bit? [image: :cake:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/294#issuecomment-114306360.\n. Have you installed the cells-erb gem?\n\n2015-06-22 20:43 GMT+01:00 Florent Monbillard notifications@github.com:\n\n> Hi,\n> \n> using Cells 4.0, I get this error\n> \n> undefined method `template_options_for' for #TeamMenuCell:0x007fe23aa0b968\n> \n> Here is the (very simple) code:\n> \n> class TeamMenuCell < Cell::ViewModel\n>   def show\n>     render\n>   end\n> \n> which is called in that view like this:\n> \n> <%= cell(:team_menu, @team, disabled: \"thumbnails\")  %>\n> \n> Reading the code, I assume template_options_for is a support method\n> provided by the template engine, as I'm using ERB, is there any\n> incompatibility with it? Or maybe I'm missing something.\n> Also, after reading the documentation, I have hard time to know how to\n> properly name my cell, should I use Comment::Cell like in the Cell class\n> section or CommentCell like in the Properties section.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/295.\n. I did consider creating a row view inside of items, but this means I end up calling the cell with different types of model which feels very icky, so I haven't gone done this route.\n\napp/cells/item_cell.rb:\n\n```\nclass Items < Cell::ViewModel\n  property :id, :name\n\n  def show\n    render\n  end\n\n  private\n\n  def has_items?\n    model.count > 0\n  end\n\n  def items\n    model.proxy_association.scope.order('date DESC')\n  end\n\n  def date\n     model.date.present? ? date.strftime('%b %Y') : ''\n  end\nend\n```\n\napp/cells/items/show.erb\n\n```\n<h1>Items</h1>\n<% if has_items? %>\n  <table>\n    <tr>\n      <th>ID</th>\n      <th>Name</th>\n      <th>Date</th>\n    </tr>\n    <%= cell(:item, collection: items).(:row) %>\n  </table>\n<% else %>\n  <h2>No items found</h2>\n<% end %>\n```\n\napp/cells/item/row.erb\n\n```\n<tr>\n  <td><%= id %></td>\n  <td><%= name %></td>\n  <td><%= date %></td>\n</tr>\n```\n. Thanks for the reply.\n\nI guess there isn't any real redundancy, but it felt a little split up, with app/cells/item/.. and app/cells/items/.. both needed to build the header and body of the table.\n\nHow would this look with concepts and not cells?\n\nIn the trailblazer book it uses:\n\n```\nclass Thing::Cell < Cell::Concept\n  class Grid < Cell::Concept \n```\n\nbut I can't find this structure in gemgem on github, instead it has:\n\n```\nclass Thing::Cell < Cell::Concept\n  class Row < self # inherit views thing/views/.\n```\n\nWhich has left me a touch confused.\n. I was googling this myself just recently and found this answer on stackoverflow.com that says the copyright year shouldn't be altered, as records the date from which you are claiming copyright. \n\nhttp://stackoverflow.com/questions/2390230/do-copyright-dates-need-to-be-updated\n. You mean to the cells helper?\n\n`cell('timesheets/client/overview')`\n. OK, I've been trying.. but writing a test that demonstrates it proving to be difficult. For some reason I can't construct a failing test. I'll get back to you!\n. @apotonick So I'm a little stumped. I can still only make my code work if I include `inherit = false` in the const_get options, as I mentioned in the trailblazer chatroom.\n\nBizarrely, once there has been a single call to const_get with `inherit = false` then all subsequent calls to const_get work just fine, even if I do `inherit = true`.  I think this, in combination with Spring, was why I failed to notice this before.\n\nI am still unable to reproduce this behaviour in a test :(\n. I installed hamlit-block and it started working. Doh.\n\nI still have no idea why it wasn't working with haml though.\n. Use :: Rails.env.development?\n\n2016-05-26 16:00 GMT+01:00 chrisyeung1121 notifications@github.com:\n\n> I have a following cell class\n> \n> class PromotionRuleCell < Cell::ViewModel\n> \n>   def selector\n>     render\n>   end\n> \n>   def all_subclasses\n>     Rails.env.development? ? [\n>         Promotion::Rules::RentTime,\n>         Promotion::Rules::RequestTime,\n>         Promotion::Rules::RentDuration,\n>         Promotion::Rules::TargetCar\n>         ] : PromotionRule.subclasses\n>   end\n> end\n> \n> I basically have to access Rails.env variable but since Rails has become\n> a module under Cell::Slim::Rails:Module I can't access Rails.env now. Is\n> there any way to work around this?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/407\n. Sorry, I put a space into that by mistake. It should had been:\n\n::Rails.env.development?\n. Wait, I didn't read your error message properly before.. Where are you calling all_subclasses from?\n\nThe ::Rails syntax is definitely correct, I'm using that in my own project.\n. https://github.com/trailblazer/cells-haml/issues/4\n. OK, I found the problem.. That was a red herring above.\n\nThe problem is that for a collection the options all end up in `model`, but in cells-rails options is initialised in the rails helper:\n\n```\n    options[:context] ||= {}\n    options[:context][:controller] = self\n```\n\nThen in cells there's this bit of code in Cells (lib/cell/view_model.rb) where it merges the options for a collection\n\n```\n  def call(model=nil, options={}, &block)\n    if model.is_a?(Hash) and array = model[:collection]\n      return Collection.new(array, model.merge(options), self)\n    end\n\n    build(model, options)\n  end\n```\n\nThe problem is that both `model` and `options` contain a `context` key so one of them gets overwritten, rather than merged.\n\nA possible fix would be this:\n\n```\n    def call(model=nil, options={}, &block)\n      if model.is_a?(Hash) and array = model[:collection]\n        merged_context = (model[:context] || {}).merge(options[:context])\n\n        merged_options = model.merge(options)\n        merged_options[:context] = merged_context\n\n        return Collection.new(array, merged_options, self)\n      end\n\n      build(model, options)\n    end\n```\n. https://github.com/samstickland/cells/commit/1ff3eac397ec87344cb1bdcafb1365c21dab1fa6\n\nSorry, I won't have time to write a test for this until next week.\n. @apotonick : Hi Nick, which release can I find this fix in?. Well this is embarrassing.. Probably best ignore that until I fix those broken tests.\n. @timoschilling Sorry, I don't understand. ViewModel#call is the public entry point.\n\nI could fix it in the calling code in rails-cells but then rails-cells would need to be aware of the collection handling logic, which doesn't seem right.\n\nThe issue is described here: https://github.com/apotonick/cells/issues/413#issuecomment-225028800\n. Sure, I'll add a test.\n\nThe symptom of the problem is in rails, given this:\n\n= cell(:comment, collection: Comment.recent, context: { current_user:\ncurrent_user } )\n\nThe contents of the context hash will be over-written with a new hash\ncontaining only 'controller'.\n\nRails-cells isn't collection aware so it sees an empty options hash (as the\noptions are in the model variable at this stage) and then creates options\nand adds :controller to :context. In Cells when it merges the options given\nby rails-cells it's not a deep merge, so the original context gets\noverwritten by the one provided by rails-cells\n\nThe problem is on the boundary between rails-cells and cells so it's not\nclear in which one the fix should be.. complicated by the fact that\nrails-cells is not aware of how collections are handled.\n\nI don't understand that.. the context is passed into collections, there's\ntests here:\nhttps://github.com/apotonick/cells/blob/master/test/context_test.rb#L18\n\nCould you provide a test that fails for your fix?\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apotonick/cells/pull/415#issuecomment-226133124, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AJfZU_U_CsJuKx392-P3mxuhBUV-9u2Jks5qL8M_gaJpZM4Iy5wl\n.\n. @apotonick This cells-rails fork includes a demonstration of this problem\n\nhttps://github.com/samstickland/cells-rails/commit/9540a5e635930ea5d54e1642abe2d334613116a7\n\nThe added test fails in the existing version of cells, but passes using my PR above.\n\n@timoschilling But context is overwritten **inside of the cells gem** when it merges the two options hashes - one provided by the user, one provided by rails-cells.\n. @apotonick @timoschilling Right, I've rewritten that test case to be contained within a single file, rather than spread out across routes, controllers etc.\n\nhttps://github.com/samstickland/cells-rails/commit/3eae04f3b2b5b33102dd3b50f186fb4266490ef1\n\n```\nrequire \"test_helper\"\n\nclass ContextCollectionTest < MiniTest::Spec\n  include Cell::RailsExtensions::ActionController\n  class ArtistCell < Cell::ViewModel\n    def show\n      # Test will fail if current_user is not present\n      raise Exception, \"no current_user in context\" unless context[:current_user]\n      return \"success\"\n    end\n  end\n\n  it do\n    size = 3\n    artists = [Artist.new] * size\n\n    result = cell(ArtistCell, collection: artists, context: { current_user: Object.new }).()\n\n    assert_equal \"success\" * size, result\n  end\nend\n```\n. If you run that test case you will see the problem straight away! ;)\n. @timoschilling Do you mean this line? I'm not sure where I'm looking at to see the linenote:\n\n`merged_options = nil if merged_options.empty?`\n\nI had to add that line to make some of the existing test cases pass in the cells test suite. I'll need to remove it and run it again to remember which ones they were.\n\n@apotonick , @timoschilling I don't proposing that we merge this PR in it's current state, I threw it together - along with the rough test case - to demonstrate the _bug_ in collection handling ;)\n\nLike I said it could be argued that the bug is on the boundary between cells and cells-rails - hence why my proposed fix is currently in cells and the test case is in cells-rails.\n\nI'm happy to try to explain this again, but if you run the test case above you'll instantly see the problem!\n\nAnd then I'd a steer as to where this should be fixed, and I'll tidy up this PR.\n. Any news? :)\n. @apotonick I'm happy to tidy this up myself, but this is the first time I've even really received an acknowledgement from a maintainer that this problem is genuine! ;)\n\nI also, as mentioned above, made a demo test-case for this here: https://github.com/samstickland/cells-rails/commit/9540a5e635930ea5d54e1642abe2d334613116a7\n\nBut as you can see the test is in cells-rails and the fix is in cells. Hardly ideal. If you can let me know what needs to happen or be tidied up for this to be accepted I'll make it happen!\n. Have you tried installing hamlit-block ?\n\n2016-06-25 16:48 GMT+01:00 Nick Yatracos notifications@github.com:\n\n> I'm not sure if this is Cells and/or Hamlit, but using a bare Rails 4.2.6\n> app on Ruby 2.2.3, rendering a simple form tag and submit tag is broken\n> with Hamlit:\n> \n> =form_tag '/' do\n>   = submit_tag 'Save'\n> \n> I get:\n> \n> With cells-hamlit (0.2.0):\n> \n> <input type=\"submit\" name=\"commit\" value=\"Save\" />\n> \n> <form action=\"/\" accept-charset=\"UTF-8\" method=\"post\"><input name=\"utf8\" type=\"hidden\" value=\"&#x2713;\" /><input type=\"hidden\" name=\"authenticity_token\" value=\"ocWFwYCM9qLZ8qqC7MOuHw98xje0g1ROcGu+7qi706YZ5C9FkqDhPA679r5CpOGTc9fUykUevBzTs+xUPOZ5hw==\" />[\"<input type=\\\"submit\\\" name=\\\"commit\\\" value=\\\"Save\\\" />\", \"\\n\"]</form>\n> \n> With cells-haml (0.0.10) and the haml ref from the readme:\n> \n> <form action=\"/\" accept-charset=\"UTF-8\" method=\"post\"><input name=\"utf8\" type=\"hidden\" value=\"&#x2713;\" /><input type=\"hidden\" name=\"authenticity_token\" value=\"Ozbug08sSSPi6CNZ0tZOMCFEC11/Wu5E2lrSwVYRXsaDF0QHXQBevTWhf2V8sQG8Xe8ZoI7HBhZ5goB7wkz05w==\" />\n>   <input type=\"submit\" name=\"commit\" value=\"Save\" />\n> </form>\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apotonick/cells/issues/419, or mute the thread\n> https://github.com/notifications/unsubscribe/AJfZU51gmFnXebv-AOT71-ZZ9e-3Pg2qks5qPU3egaJpZM4I-Xwo\n> .\n. Yeah @apotonick or the hamlit author might have something to add about\nthis. I've since swapped hamlit for slim.\n\nSam\nEl 26 jun. 2016 2:54 PM, \"Nick Yatracos\" notifications@github.com\nescribi\u00f3:\n\n> I see. @samstickland https://github.com/samstickland installing\n> hamlit-block has the side effect you mentioned in hamlit/hamlit-block#1\n> https://github.com/hamlit/hamlit-block/issues/1 where blocks no longer\n> have any output so my other templates break.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apotonick/cells/issues/419#issuecomment-228602503,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AJfZU65EDUkeawE6rvn4hKW3QG8cJizZks5qPoR2gaJpZM4I-Xwo\n> .\n. @apotonick  this is same problem I was having, that I never truly got to the bottom of.\n. See: https://github.com/apotonick/cells/pull/404 , which was merged but then I found it never really fixed my problem, unless I did the same thing that is proposed here.\n\nI was unable to ever reproduce my problem in an isolated test.\n. @jarosluv Do you still have this issue if you pass the class name to the helper directly? i.e.\n\n`cell(Foo::Bar::BazCell, model)`\n. @apotonick to be clear, what he is proposing does fix my problem as well..\nBut I could never accurately reproduce it in a test so I didn't submit a PR\nand I've since moved over to using the Class names directly.\n\n2016-10-19 12:53 GMT+01:00 Nick Sutterer notifications@github.com:\n\n> Closed #431 https://github.com/apotonick/cells/pull/431.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/apotonick/cells/pull/431#event-828930891, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AJfZU1ZCRFFCgNLKWA1PHBgBa7TGjj6Aks5q1gScgaJpZM4KZs_l\n> .\n. ",
    "andypike": "Thanks for the reply Nick. I added `include ActionView::Helpers::AssetUrlHelper` to the cell but it still renders `video_path(model)` as `/videos/#<Video:0x007fda549c8f48>`. \n\nI'm happy to help if there are other things you would like me to try :smile: \n\nAndy\n. Thanks Nick, if there is anything I can help with then just let me know :heart: \n. Thanks @apotonick, I'll upgrade to the RC and see what happens.\n\nI started using Trailblazer but there were a few things I wanted to do differently but loved the idea of concepts and cells so kept those bits. Maybe I should do a blog post with more details if you would find that interesting?\n\nThanks again :sparkling_heart: \n. Updated to RC and everything worked as before :smile: I'll try to free up some time to investigate this issue and will let you know if I get anywhere.\n. Thanks for the reply Nick. I added `include ActionView::Helpers::AssetUrlHelper` to the cell but it still renders `video_path(model)` as `/videos/#<Video:0x007fda549c8f48>`. \n\nI'm happy to help if there are other things you would like me to try :smile: \n\nAndy\n. Thanks Nick, if there is anything I can help with then just let me know :heart: \n. Thanks @apotonick, I'll upgrade to the RC and see what happens.\n\nI started using Trailblazer but there were a few things I wanted to do differently but loved the idea of concepts and cells so kept those bits. Maybe I should do a blog post with more details if you would find that interesting?\n\nThanks again :sparkling_heart: \n. Updated to RC and everything worked as before :smile: I'll try to free up some time to investigate this issue and will let you know if I get anywhere.\n. ",
    "carlosantoniodasilva": "@apotonick :+1: please feel free to bring this discussion :)\n. @apotonick :+1: please feel free to bring this discussion :)\n. ",
    "jamis": "Yeah, I figured there was a reason the FIXME was there instead of something like my (nearly trivial) patch. :) As for the tests, after running `bundle`, and then `bundle exec rake`, I get `cannot load such file -- rails` -- which seems very odd. So I notice that Gemfile.lock is missing rails, so I add `gem \"rails\"` to Gemfile and try again, and...same error.\n\nHOWEVER. Trying it all again just now, I notice that Gemfile.lock now has a dependency on rails 0.9.5 (wha?), so I change Gemfile to say `gem \"rails\", \"4.2.0\"`, and rebundle, and now...\n\nHey. It works. :P So, maybe I'm doing it wrong, but it seems like your Gemfile might need a dependency on rails itself, and not just actionpack? (Maybe this is the fault of rails 4.2.0?)\n. Cool, no worries. :) I'll live off my fork for now, so I can have the engine loading, and I'll sit tight and wait patiently for the other goodies. :) If I have a chance, I'll have a look tomorrow at considering caching in this patch.\n. Alright, I moved the caching from Temlates#find_template to Templates#[], to accommodate the wider net cast by the bases check. I also added a test, and confirmed all tests are still passing. (yay!) Does this fit with what you meant by \"make use of caching?\"\n. The issue I had was with the second point you made, where the engine contained a base cell class, and the application inherited from it. We were doing this because we had a gem that encapsulated logic to be shared between several related apps (think \"service-oriented architecture\"). I've been out of that project for several months now, so it's not very fresh in my mind, but I do recall that we also had shared partials -- bits that subclassed cells could take advantage of in order to build a custom view. I'm not sure if that falls under the \"no such case where you'd want Cells to look for /var/engines/cells/song/show.haml\" bit.\n. Partials only. Concrete cell views themselves were always defined where cells themselves were defined (app or engine).\n. That sounds great to me!\n\n(FWIW, no, we weren't using cells 4. The previous architecture was using cells 3, and I was trying to upgrade us, but as this thread has noted, there were...obstacles. In the end, the project got mothballed anyway, so all I've _really_ got is \"we wanted it to work like X\". Apologies for not being clearer.)\n. :+1:\n. Yeah, I figured there was a reason the FIXME was there instead of something like my (nearly trivial) patch. :) As for the tests, after running `bundle`, and then `bundle exec rake`, I get `cannot load such file -- rails` -- which seems very odd. So I notice that Gemfile.lock is missing rails, so I add `gem \"rails\"` to Gemfile and try again, and...same error.\n\nHOWEVER. Trying it all again just now, I notice that Gemfile.lock now has a dependency on rails 0.9.5 (wha?), so I change Gemfile to say `gem \"rails\", \"4.2.0\"`, and rebundle, and now...\n\nHey. It works. :P So, maybe I'm doing it wrong, but it seems like your Gemfile might need a dependency on rails itself, and not just actionpack? (Maybe this is the fault of rails 4.2.0?)\n. Cool, no worries. :) I'll live off my fork for now, so I can have the engine loading, and I'll sit tight and wait patiently for the other goodies. :) If I have a chance, I'll have a look tomorrow at considering caching in this patch.\n. Alright, I moved the caching from Temlates#find_template to Templates#[], to accommodate the wider net cast by the bases check. I also added a test, and confirmed all tests are still passing. (yay!) Does this fit with what you meant by \"make use of caching?\"\n. The issue I had was with the second point you made, where the engine contained a base cell class, and the application inherited from it. We were doing this because we had a gem that encapsulated logic to be shared between several related apps (think \"service-oriented architecture\"). I've been out of that project for several months now, so it's not very fresh in my mind, but I do recall that we also had shared partials -- bits that subclassed cells could take advantage of in order to build a custom view. I'm not sure if that falls under the \"no such case where you'd want Cells to look for /var/engines/cells/song/show.haml\" bit.\n. Partials only. Concrete cell views themselves were always defined where cells themselves were defined (app or engine).\n. That sounds great to me!\n\n(FWIW, no, we weren't using cells 4. The previous architecture was using cells 3, and I was trying to upgrade us, but as this thread has noted, there were...obstacles. In the end, the project got mothballed anyway, so all I've _really_ got is \"we wanted it to work like X\". Apologies for not being clearer.)\n. :+1:\n. ",
    "bmcdaniel11": "Is there any way we can get this merged into the latest release? It's a roadblock for engines.\n\nThanks!\n. Thanks, Nick, your solution looks like it will work fine. Just for documentation sake, I too am using the engine cell in the same way jamis is, minus the rendering partials. I have a base cell in the engine I inherit from for several of my cells. Appreciate the work you are doing, keep up the good work!\n. @dreyks you can get your engine to work by setting a single element in the view paths array to be your engine cell view path.\n\nSo for example:\nMyEngineCell < Cells::ViewModel\n  self.view_paths = [\"#{MyEngine.root}/cells\"]\n\nI would recommend having a base cell of some sort to put that in and just extend that. Currently this solution is working for me but I have not tried inheriting that base cell from outside the engine, I.e. the parent app, so I'm not sure if that works since you are technically overriding the original view path of \"app/cells\"\n. Sorry for the lack of editing, I'm using a phone :P\n. @apotonick just to note, you can't append the view path from the engine cell because only the first of the base paths is being recognized, as shown via the referenced pull request. Jamis' solution was to iterate over all the base paths, but as we discussed, that isn't very efficient. Just telling cells one place to look for cells in the parent app and cells in the engine would be better.\n. @apotonick, sorry, I had not tried appending the view path with 4.0.0.beta4, I was out of town during the weekend and was using 4.0.0.beta3 still. Good to know it works on beta4, thanks!\n. Is there any way we can get this merged into the latest release? It's a roadblock for engines.\n\nThanks!\n. Thanks, Nick, your solution looks like it will work fine. Just for documentation sake, I too am using the engine cell in the same way jamis is, minus the rendering partials. I have a base cell in the engine I inherit from for several of my cells. Appreciate the work you are doing, keep up the good work!\n. @dreyks you can get your engine to work by setting a single element in the view paths array to be your engine cell view path.\n\nSo for example:\nMyEngineCell < Cells::ViewModel\n  self.view_paths = [\"#{MyEngine.root}/cells\"]\n\nI would recommend having a base cell of some sort to put that in and just extend that. Currently this solution is working for me but I have not tried inheriting that base cell from outside the engine, I.e. the parent app, so I'm not sure if that works since you are technically overriding the original view path of \"app/cells\"\n. Sorry for the lack of editing, I'm using a phone :P\n. @apotonick just to note, you can't append the view path from the engine cell because only the first of the base paths is being recognized, as shown via the referenced pull request. Jamis' solution was to iterate over all the base paths, but as we discussed, that isn't very efficient. Just telling cells one place to look for cells in the parent app and cells in the engine would be better.\n. @apotonick, sorry, I had not tried appending the view path with 4.0.0.beta4, I was out of town during the weekend and was using 4.0.0.beta3 still. Good to know it works on beta4, thanks!\n. ",
    "reconstructions": "3.11.3\n. 3.11.3\n. ",
    "firedev": "```\nUsing cells 4.0.0.beta2 from git://github.com/apotonick/cells.git (at master)\n```\n\n```\n$ rails g cell test                                                                                                                                                            \n      create  app/cells/test_cell.rb\n      create  app/cells/test/show.erb\n       error  rspec [not found]\n```\n. Indeed! That helped, thanks.\n\n```\ngroup :development, :test do\n  gem 'rspec-cells', github: 'apotonick/rspec-cells'\nend\n```\n. I concur. This looks strange in the view:\n\n``` slim\n= cell('worktime', worktime).()\n```\n\nShouldn't view helper return html_safe output by default?\n\nBesides\n\n``` slim\n= cell('worktime', collection: worktimes)\n```\n\nReturns an html_safe string.\n. Yep, I understand, but if we are striving for consistency then maybe adding something like this to base class would be reasonable? \n\n``` ruby\ndef to_s\n  call.html_safe\nend\n```\n. ``` ruby\nuninitialized constant Shared::NoDatum\nExtracted source (around line #4):\n\n  = concept('shared/no_data').call\n```\n. ```\nUsing cells 4.0.0.beta2 from git://github.com/apotonick/cells.git (at master)\n```\n\n```\n$ rails g cell test                                                                                                                                                            \n      create  app/cells/test_cell.rb\n      create  app/cells/test/show.erb\n       error  rspec [not found]\n```\n. Indeed! That helped, thanks.\n\n```\ngroup :development, :test do\n  gem 'rspec-cells', github: 'apotonick/rspec-cells'\nend\n```\n. I concur. This looks strange in the view:\n\n``` slim\n= cell('worktime', worktime).()\n```\n\nShouldn't view helper return html_safe output by default?\n\nBesides\n\n``` slim\n= cell('worktime', collection: worktimes)\n```\n\nReturns an html_safe string.\n. Yep, I understand, but if we are striving for consistency then maybe adding something like this to base class would be reasonable? \n\n``` ruby\ndef to_s\n  call.html_safe\nend\n```\n. ``` ruby\nuninitialized constant Shared::NoDatum\nExtracted source (around line #4):\n\n  = concept('shared/no_data').call\n```\n. ",
    "ciembor": "@samstickland thank you for digging.. @samstickland thank you for digging.. ",
    "alihuber": "Same problem here. I'm trying to use Trailblazer's concept-oriented layout and getting the same error for the view path: `Template missing: view: 'tile.slim' prefixes: [\"my_engine/namespace/views\"] view_paths:[\"app/concepts\"]`. I'm calling the cell like this: `concept(\"my_engine/namespace/cell\", @model).call(:tile)` and it inherits from `Cell::Concept`.  \nThe way described [in the engines.rb file](https://github.com/apotonick/cells/blob/master/lib/cell/engines.rb) to alter the `view_paths`-setting seems not to work, I can add any path I want.\n. I tried out above solutions, they all work. I made this little demo app (https://github.com/alihuber/engine_cells) to try them out, as you can see adding to the view paths in the Cell works, and also adding  \n`Cell::Concept.view_paths << File.expand_path(\"#{MyEngine::Engine.root}/app/concepts\", __FILE__)`\nsomewhere in either `lib/my_engine.rb` or `lib/my_engine/engine.rb`.\n. Same problem here. I'm trying to use Trailblazer's concept-oriented layout and getting the same error for the view path: `Template missing: view: 'tile.slim' prefixes: [\"my_engine/namespace/views\"] view_paths:[\"app/concepts\"]`. I'm calling the cell like this: `concept(\"my_engine/namespace/cell\", @model).call(:tile)` and it inherits from `Cell::Concept`.  \nThe way described [in the engines.rb file](https://github.com/apotonick/cells/blob/master/lib/cell/engines.rb) to alter the `view_paths`-setting seems not to work, I can add any path I want.\n. I tried out above solutions, they all work. I made this little demo app (https://github.com/alihuber/engine_cells) to try them out, as you can see adding to the view paths in the Cell works, and also adding  \n`Cell::Concept.view_paths << File.expand_path(\"#{MyEngine::Engine.root}/app/concepts\", __FILE__)`\nsomewhere in either `lib/my_engine.rb` or `lib/my_engine/engine.rb`.\n. ",
    "TheFlow0360": "@apotonick Is there any documentation for engines that's still available? The cells engine page doesn't exist on the new website.... I'm having this problem, too, just with ERB. I'm not including `Cell::Erb` in my ViewModel since the README states this isn't necessary when using Rails. Also, I tried including it anyways and got another error: `uninitialized constant Cell::Erb` (even though I have `spec.add_dependency \"cells-erb\", \"~> 0.1\"` in my gemspec).\r\n\r\n@ElliottAYoung Is the project you are working on public? I'm also trying to create an Engine as a gem that uses Cells and any guidance would be really helpful. It would be great, if you could point out resources you used to find out best practices etc.\r\n\r\nEDIT: i fixed it, I needed to do the `include Cell::Erb` but was missing a `require \"cell/erb\"`. @ElliottAYoung thanks a lot, I'll take a look!. I put it in the lib file and it worked, thanks a lot!. also see [this question on SO](https://stackoverflow.com/questions/44966087/cant-use-cells-from-an-engine-inside-rails-application#) for more details. Haven't gotten an answer there, either.... Do you mean I have to use `require_relative` in the gem or in the application?. Ok, thanks, I'll try that out as soon as I can. Also, feel free to create an answer on SO since there is still an open bounty (at least for the next few hours).. Ok, this basically works, at least the constants are now known. Still, I can't include the javascript and ccs like this, right?  But I need the javascript and css to be applied correctly, which isn't the case now...\r\n\r\nI somehow get the feeling the way cells works is not really compatible with how Engines are intended to work. Adding these `require_relative`s is already discouraged, since the files are outside of the `lib` folder.... @rafaelfranca the auto-loading for the cells now does work, my current problems are the assets... my css and js is not getting applied\r\n. The issue was realted to ActiveAdmin overriding the assets.... @apotonick Is there any documentation for engines that's still available? The cells engine page doesn't exist on the new website.... I'm having this problem, too, just with ERB. I'm not including `Cell::Erb` in my ViewModel since the README states this isn't necessary when using Rails. Also, I tried including it anyways and got another error: `uninitialized constant Cell::Erb` (even though I have `spec.add_dependency \"cells-erb\", \"~> 0.1\"` in my gemspec).\r\n\r\n@ElliottAYoung Is the project you are working on public? I'm also trying to create an Engine as a gem that uses Cells and any guidance would be really helpful. It would be great, if you could point out resources you used to find out best practices etc.\r\n\r\nEDIT: i fixed it, I needed to do the `include Cell::Erb` but was missing a `require \"cell/erb\"`. @ElliottAYoung thanks a lot, I'll take a look!. I put it in the lib file and it worked, thanks a lot!. also see [this question on SO](https://stackoverflow.com/questions/44966087/cant-use-cells-from-an-engine-inside-rails-application#) for more details. Haven't gotten an answer there, either.... Do you mean I have to use `require_relative` in the gem or in the application?. Ok, thanks, I'll try that out as soon as I can. Also, feel free to create an answer on SO since there is still an open bounty (at least for the next few hours).. Ok, this basically works, at least the constants are now known. Still, I can't include the javascript and ccs like this, right?  But I need the javascript and css to be applied correctly, which isn't the case now...\r\n\r\nI somehow get the feeling the way cells works is not really compatible with how Engines are intended to work. Adding these `require_relative`s is already discouraged, since the files are outside of the `lib` folder.... @rafaelfranca the auto-loading for the cells now does work, my current problems are the assets... my css and js is not getting applied\r\n. The issue was realted to ActiveAdmin overriding the assets.... ",
    "toomus": "Thx, but now I have something like that: \n\n```\nNoMethodError (undefined method `builders' for Cell:Module):\n```\n\nsetup\n\n```\nRuby 2.2.0\nrails 4.2.0  \nrspec 3.2.0\ncells 3.11.3\nrspec-cells 0.2.2\n```\n. After update Cells to 4.0.0.beta2, when I try to start server:\n\n```\n.rvm/gems/ruby-2.2.0/gems/rspec-cells-0.2.2/lib/rspec/cells/cell_example_group.rb:7:in \n`<module:CellExampleGroup>': uninitialized constant Cell::TestCase::TestMethods (NameError)\n```\n. So what I have to do to run server? Uninstall rspec-cells? \n. Thx, but now I have something like that: \n\n```\nNoMethodError (undefined method `builders' for Cell:Module):\n```\n\nsetup\n\n```\nRuby 2.2.0\nrails 4.2.0  \nrspec 3.2.0\ncells 3.11.3\nrspec-cells 0.2.2\n```\n. After update Cells to 4.0.0.beta2, when I try to start server:\n\n```\n.rvm/gems/ruby-2.2.0/gems/rspec-cells-0.2.2/lib/rspec/cells/cell_example_group.rb:7:in \n`<module:CellExampleGroup>': uninitialized constant Cell::TestCase::TestMethods (NameError)\n```\n. So what I have to do to run server? Uninstall rspec-cells? \n. ",
    "summera": "Didn't add it in yet. Wanted to get your thoughts on the `bundle exec` issue before doing so.\n. @apotonick working locally. Breaking on travis because we aren't bundle installing in the rails 4.2 directory https://travis-ci.org/apotonick/cells/jobs/65027019\n. Didn't add it in yet. Wanted to get your thoughts on the `bundle exec` issue before doing so.\n. @apotonick working locally. Breaking on travis because we aren't bundle installing in the rails 4.2 directory https://travis-ci.org/apotonick/cells/jobs/65027019\n. ",
    "sps196": "Thanks Nick, all my tests are passing again now.\n. Thanks Nick, all my tests are passing again now.\n. ",
    "sauy7": "@apotonick Gentle reminder: The unit_test.rb.erb generator template will need changing too.\n. @apotonick Gentle reminder: The unit_test.rb.erb generator template will need changing too.\n. ",
    "saturnflyer": "I'm using Cells 4.0.0.beta5\n\nI'm not using Capybara, but I'll look into that. Agreed with @sauy7, the generated tests lead me down the path looking for `invoke`\n\nLotus: :+1: of course\n. I attempted to implement this but don't understand enough about cells structure to do it quickly.\nSo I looked to see if I could just implement it in my cell with this:\n\n``` ruby\n  def show(&block)\n    if block\n      instance_eval(&block)\n    else\n      render\n    end\n  end\n```\n\nBut it seems like the block is ignored.\n\nRelated to the template builders, I'd rather bake in easy support but not the actual implementation. There are already 3 options (Erector, Arbre, and Fortitude) mentioned. Why not take the approach that cells does with rails helpers and just force users to add what they need?\n. I'm using Cells 4.0.0.beta5\n\nI'm not using Capybara, but I'll look into that. Agreed with @sauy7, the generated tests lead me down the path looking for `invoke`\n\nLotus: :+1: of course\n. I attempted to implement this but don't understand enough about cells structure to do it quickly.\nSo I looked to see if I could just implement it in my cell with this:\n\n``` ruby\n  def show(&block)\n    if block\n      instance_eval(&block)\n    else\n      render\n    end\n  end\n```\n\nBut it seems like the block is ignored.\n\nRelated to the template builders, I'd rather bake in easy support but not the actual implementation. There are already 3 options (Erector, Arbre, and Fortitude) mentioned. Why not take the approach that cells does with rails helpers and just force users to add what they need?\n. ",
    "kevinansfield": "Oh, and also the code from https://github.com/apotonick/cells/issues/214 so you get `/assets` with the digest instead of `/images`\n\n```\ninclude Sprockets::Rails::Helper\n\nself.assets_prefix = Rails.application.config.assets.prefix\nself.assets_environment = Rails.application.assets\nself.digest_assets = Rails.application.config.assets[:digest]\n```\n. Confirmed on RC1. I was using it in a draper decorator class like this:\n\n```\n  def avatar_tag(options={})\n    AvatarCell.(object).(:show, options)\n  end\n```\n\nI realised I hadn't completed my refactor so I've now removed that helper and replaced all uses with direct calls to `cell('avatar')` - when using the `cell` helper directly the `def request` fix isn't needed.\n. Ok, that makes sense, thanks!\n. Oh, and also the code from https://github.com/apotonick/cells/issues/214 so you get `/assets` with the digest instead of `/images`\n\n```\ninclude Sprockets::Rails::Helper\n\nself.assets_prefix = Rails.application.config.assets.prefix\nself.assets_environment = Rails.application.assets\nself.digest_assets = Rails.application.config.assets[:digest]\n```\n. Confirmed on RC1. I was using it in a draper decorator class like this:\n\n```\n  def avatar_tag(options={})\n    AvatarCell.(object).(:show, options)\n  end\n```\n\nI realised I hadn't completed my refactor so I've now removed that helper and replaced all uses with direct calls to `cell('avatar')` - when using the `cell` helper directly the `def request` fix isn't needed.\n. Ok, that makes sense, thanks!\n. ",
    "StefanWallin": "How would you pass a controller to a cell initialized within a controller?\n. How would you pass a controller to a cell initialized within a controller?\n. ",
    "makefunstuff": "NOTE: In order to avoid such issues please check all your outdated cell-\\* related gems. In my case the problem was in cell-capture gem that was triggering deprecated `Cell::Rails` constant definition.\n. NOTE: In order to avoid such issues please check all your outdated cell-\\* related gems. In my case the problem was in cell-capture gem that was triggering deprecated `Cell::Rails` constant definition.\n. ",
    "gregorw": "Very helpful. Thanks!\n. Very helpful. Thanks!\n. ",
    "opti": "Thanks!\n. Sorry, was away from the computer to try it out.\n\nJust upgraded, works perfectly! Thank you @apotonick \n. I'm using `rspec-cells` and `Cell::Concept < Cell::Erb` returns `true` in my specs.\n\nIn the backtrace cells-erb-0.0.5 is also present.\n\n```\n  # /gems/cells-erb-0.0.5/lib/cell/erb/template.rb:10:in `render_template'\n```\n. However, the problem fixes when I manually include `Cell::Erb` in a cell (not spec).\n\nIsn't it should be done automatically in rails env?\n. Here it is:\n**concepts/checkout/coupon/cell.rb**\n\n``` ruby\nmodule Checkout\n  module Coupon\n    class Cell < Cell::Concept\n      include ActionView::Helpers::UrlHelper\n      include ActionView::Helpers::FormTagHelper\n      include ::Cell::Erb\n\n      property :coupon\n      property :number\n\n      def show\n        coupon ? render(:current) : render(:new)\n      end\n\n      private\n\n      def coupon_code\n        coupon.code\n      end\n\n      def coupons_path\n        checkout_coupons_path(number)\n      end\n\n      def contract\n        options[:contract]\n      end\n    end\n  end\nend\n```\n\nP.S. I can fill you pain about rails helpers\n. As it turned out, the problem was in not necessary inclusion of rails helpers in the cell:\n\n``` ruby\ninclude ActionView::Helpers::UrlHelper\ninclude ActionView::Helpers::FormTagHelper\n```\n\nThose two are already [included by Cells](https://github.com/apotonick/cells/blob/5367e29c7c602b44e73ff2504cb777615ead5989/lib/cell/railtie.rb#L36), so don't need to do it second time, because it overrides cells' `capture` implementation.\n\nSo, the correct version looks like that:\n\n``` ruby\nmodule Checkout\n  module Coupon\n    class Cell < Cell::Concept\n      property :coupon\n      property :number\n\n      def show\n        coupon ? render(:current) : render(:new)\n      end\n\n      ...\n\n    end\n  end\nend\n```\n. any chance on adding `assets_path` option?\n. heh, miscommunication \n. > In Defaults, that should say\n\nYou're right. It's how things now. I'll update\n. Initial description updated as well\n. Closing since the main issue [has been fixed](https://github.com/apotonick/cells/issues/303#issuecomment-216428268).\n. Thanks!\n. Sorry, was away from the computer to try it out.\n\nJust upgraded, works perfectly! Thank you @apotonick \n. I'm using `rspec-cells` and `Cell::Concept < Cell::Erb` returns `true` in my specs.\n\nIn the backtrace cells-erb-0.0.5 is also present.\n\n```\n  # /gems/cells-erb-0.0.5/lib/cell/erb/template.rb:10:in `render_template'\n```\n. However, the problem fixes when I manually include `Cell::Erb` in a cell (not spec).\n\nIsn't it should be done automatically in rails env?\n. Here it is:\n**concepts/checkout/coupon/cell.rb**\n\n``` ruby\nmodule Checkout\n  module Coupon\n    class Cell < Cell::Concept\n      include ActionView::Helpers::UrlHelper\n      include ActionView::Helpers::FormTagHelper\n      include ::Cell::Erb\n\n      property :coupon\n      property :number\n\n      def show\n        coupon ? render(:current) : render(:new)\n      end\n\n      private\n\n      def coupon_code\n        coupon.code\n      end\n\n      def coupons_path\n        checkout_coupons_path(number)\n      end\n\n      def contract\n        options[:contract]\n      end\n    end\n  end\nend\n```\n\nP.S. I can fill you pain about rails helpers\n. As it turned out, the problem was in not necessary inclusion of rails helpers in the cell:\n\n``` ruby\ninclude ActionView::Helpers::UrlHelper\ninclude ActionView::Helpers::FormTagHelper\n```\n\nThose two are already [included by Cells](https://github.com/apotonick/cells/blob/5367e29c7c602b44e73ff2504cb777615ead5989/lib/cell/railtie.rb#L36), so don't need to do it second time, because it overrides cells' `capture` implementation.\n\nSo, the correct version looks like that:\n\n``` ruby\nmodule Checkout\n  module Coupon\n    class Cell < Cell::Concept\n      property :coupon\n      property :number\n\n      def show\n        coupon ? render(:current) : render(:new)\n      end\n\n      ...\n\n    end\n  end\nend\n```\n. any chance on adding `assets_path` option?\n. heh, miscommunication \n. > In Defaults, that should say\n\nYou're right. It's how things now. I'll update\n. Initial description updated as well\n. Closing since the main issue [has been fixed](https://github.com/apotonick/cells/issues/303#issuecomment-216428268).\n. ",
    "tjjjwxzq": "Hmmm...I'm getting a similar problem but when I pass a block to a `link_to` helper in my view (if I don't pass a block it seems fine). This only breaks the specs, but it's fine in a real environment. Using Cells 4.1.5, Cells-Rails 0.0.6, and Cells-Slim 0.0.5\r\n\r\nMy cell class\r\n```ruby\r\nclass EventProposal::IndexCell < Cell::ViewModel\r\n    # I have to manually include this stuff for my specs to pass\r\n    # even though it's supposed to be already handled by cells-rails\r\n    include ActionView::Helpers::FormHelper\r\n    include Cell::RailsExtensions::HelpersAreShit\r\n    include Cell::Slim\r\n\r\n    def show\r\n        render\r\n    end\r\n```\r\n\r\nAnd when the specs break, this is what I get\r\n\r\n```ruby\r\nEventProposal::IndexCell#show when the current user is an osl admin \r\n      Failure/Error: = link_to '' do\r\n\r\n      NoMethodError:\r\n        undefined method `output_buffer=' for #<EventProposal::IndexCell:0x0055c0836bedd0>\r\n        Did you mean?  output_buffer\r\n      # app/cells/event_proposal/index/show.slim:1:in `block in singleton class'\r\n      # app/cells/event_proposal/index/show.slim:-2:in `instance_eval'\r\n      # app/cells/event_proposal/index/show.slim:-2:in `singleton class'\r\n      # app/cells/event_proposal/index/show.slim:-4:in `__tilt_47142621548820'\r\n      # ./app/cells/event_proposal/index_cell.rb:16:in `show'\r\n      # ./spec/cells/event_proposal/index_cell_spec.rb:98:in `block (4 levels) in <top (required)>'\r\n      # ./spec/cells/event_proposal/index_cell_spec.rb:102:in `block (4 levels) in <top (required)>'\r\n      # ------------------\r\n      # --- Caused by: ---\r\n      # NoMethodError:\r\n      #   undefined method `output_buffer=' for #<EventProposal::IndexCell:0x0055c0836bedd0>\r\n      #   Did you mean?  output_buffer\r\n      #   app/cells/event_proposal/index/show.slim:1:in `block in singleton class'\r\n```\r\nSo I realize `Cell::Slim::Rails::Helpers` is supposed to override Rails' shitty capture helper, but for some reason the order of the module inclusion in the testing environment is such that I get `ActionView::Helpers::CaptureHelper` before `Cell::Slim::Rails::Helpers` in the list of included modules. So I'm basically getting this:\r\n\r\n```ruby\r\n# real environment, inside the template\r\n= raise self.class.included_modules.inspect\r\n[... Cell::Slim::Rails::Helpers, ...ActionView::Helpers::CaptureHelper, ...]\r\n\r\n# test environment, inside the template\r\n= raise self.class.included_modules.inspect\r\n[...ActionView::Helpers::CaptureHelper, ...Cell::Slim::Rails::Helpers, ]\r\n```\r\n\r\nQuick and dirty fix is to do this in my specs:\r\n\r\n```ruby\r\nbefore do\r\n   described_class.class_eval do\r\n      prepend Cell::Slim\r\n      prepend Cell::RailsExtensions::HelpersAreShit\r\n   end\r\nend\r\n```\r\nbut I hope you can shed light on why the module inclusion order is different in the test environment? (I should add also that this seems to only happen after I add in `config/application.rb` a line to specify cells with assets `config.cells.with_assets = ['event_proposal/index_cell']`. Everything was fine and dandy before that)\r\n\r\n(thanks for opening my eyes to the wonderful mess that is the Rails helper system). Actually, this doesn't seem to be determined by environment, and seems to depend on where the cell is initialized and/or stuff I add to config, presumably because the initialization (and hence helper module inclusion order) is modified. Since we *must* have `Cell::RailsExtensions::HelpersAreShit` and `Cell::Slim` overriding the default rails helpers, can we not have the `cells-rails` railtie prepend these modules instead of simply including them?. Hmmm...I'm getting a similar problem but when I pass a block to a `link_to` helper in my view (if I don't pass a block it seems fine). This only breaks the specs, but it's fine in a real environment. Using Cells 4.1.5, Cells-Rails 0.0.6, and Cells-Slim 0.0.5\r\n\r\nMy cell class\r\n```ruby\r\nclass EventProposal::IndexCell < Cell::ViewModel\r\n    # I have to manually include this stuff for my specs to pass\r\n    # even though it's supposed to be already handled by cells-rails\r\n    include ActionView::Helpers::FormHelper\r\n    include Cell::RailsExtensions::HelpersAreShit\r\n    include Cell::Slim\r\n\r\n    def show\r\n        render\r\n    end\r\n```\r\n\r\nAnd when the specs break, this is what I get\r\n\r\n```ruby\r\nEventProposal::IndexCell#show when the current user is an osl admin \r\n      Failure/Error: = link_to '' do\r\n\r\n      NoMethodError:\r\n        undefined method `output_buffer=' for #<EventProposal::IndexCell:0x0055c0836bedd0>\r\n        Did you mean?  output_buffer\r\n      # app/cells/event_proposal/index/show.slim:1:in `block in singleton class'\r\n      # app/cells/event_proposal/index/show.slim:-2:in `instance_eval'\r\n      # app/cells/event_proposal/index/show.slim:-2:in `singleton class'\r\n      # app/cells/event_proposal/index/show.slim:-4:in `__tilt_47142621548820'\r\n      # ./app/cells/event_proposal/index_cell.rb:16:in `show'\r\n      # ./spec/cells/event_proposal/index_cell_spec.rb:98:in `block (4 levels) in <top (required)>'\r\n      # ./spec/cells/event_proposal/index_cell_spec.rb:102:in `block (4 levels) in <top (required)>'\r\n      # ------------------\r\n      # --- Caused by: ---\r\n      # NoMethodError:\r\n      #   undefined method `output_buffer=' for #<EventProposal::IndexCell:0x0055c0836bedd0>\r\n      #   Did you mean?  output_buffer\r\n      #   app/cells/event_proposal/index/show.slim:1:in `block in singleton class'\r\n```\r\nSo I realize `Cell::Slim::Rails::Helpers` is supposed to override Rails' shitty capture helper, but for some reason the order of the module inclusion in the testing environment is such that I get `ActionView::Helpers::CaptureHelper` before `Cell::Slim::Rails::Helpers` in the list of included modules. So I'm basically getting this:\r\n\r\n```ruby\r\n# real environment, inside the template\r\n= raise self.class.included_modules.inspect\r\n[... Cell::Slim::Rails::Helpers, ...ActionView::Helpers::CaptureHelper, ...]\r\n\r\n# test environment, inside the template\r\n= raise self.class.included_modules.inspect\r\n[...ActionView::Helpers::CaptureHelper, ...Cell::Slim::Rails::Helpers, ]\r\n```\r\n\r\nQuick and dirty fix is to do this in my specs:\r\n\r\n```ruby\r\nbefore do\r\n   described_class.class_eval do\r\n      prepend Cell::Slim\r\n      prepend Cell::RailsExtensions::HelpersAreShit\r\n   end\r\nend\r\n```\r\nbut I hope you can shed light on why the module inclusion order is different in the test environment? (I should add also that this seems to only happen after I add in `config/application.rb` a line to specify cells with assets `config.cells.with_assets = ['event_proposal/index_cell']`. Everything was fine and dandy before that)\r\n\r\n(thanks for opening my eyes to the wonderful mess that is the Rails helper system). Actually, this doesn't seem to be determined by environment, and seems to depend on where the cell is initialized and/or stuff I add to config, presumably because the initialization (and hence helper module inclusion order) is modified. Since we *must* have `Cell::RailsExtensions::HelpersAreShit` and `Cell::Slim` overriding the default rails helpers, can we not have the `cells-rails` railtie prepend these modules instead of simply including them?. ",
    "georgemillo": "Just noting that I'm getting the same error in tests for a cell that includes ` ActionView::Helpers::FormOptionsHelper` (so I can use `options_for_select`). Everything works as expected when testing in the browser, but RSpec fails with `undefined method `output_buffer=' for #<MyCell:0x007f8efd10d6f8>`.\r\n\r\nDon't have time to investigate it properly, but my hacky fix for now is to `include ::Cell::Erb` in my Cell, *below* the line `include ActionView::Helpers::FormOptionsHelper`.\r\n. I agree that this should be documented. (It's worth noting for anyone else reading this that the `escape!` method isn't available unless you `include Escaped` into the Cell.)\r\n\r\nI find it's fairly common that I need to escape a string that can't be neatly encapsulated within a `property`. Yes, this is probably a sign that I should split out an entirely new 'sub cell', but as we all know, sometimes you have to sacrifice perfect design for the sake of getting things done fast.\r\n\r\nNote that all `escape!(string)` does is call `ERB::Util.html_escape(string)`, so you can always just use `ERB::Util` directly if you don't want to depend on `escape!`.. I think the plan is to remove concepts in Cells 5?. @apotonick we've talked about this before, but to confirm, is the plan to get rid of `Cell::ViewModel` and just use `Trailblazer::Cell` for everything? Or is the `C::VM > T::C` hierarchy gonna be kept?\r\n\r\nIf it's the former, is the plan to merge `trailblazer-cells` and `cells` into a single gem?. fixed and rebased ;). If you approve this then I updated the docs too at https://github.com/trailblazer/trailblazer.github.io/pull/91. Can we pretty please get a release that includes this feature? :). Thanks! :). We've also talked about merging `Cell::ViewModel` and `Trailblazer::Cell` into a single class. This would also mean merging `cells` and `trailblazer-cells`, which I think only makes sense as it's confusing to have two gems, and `trailblazer-cells` is only a [single file](https://github.com/trailblazer/trailblazer-cells/blob/master/lib/trailblazer/cell.rb) with less than 50 LOC.\r\n\r\nIf these two classes are merged, will the new class be called `Cell::ViewModel` or `Trailblazer::Cell`? I think it makes sense to stick with `Cell::ViewModel` and consign `Trailblazer::Cell` to the dustbin. This follows the pattern set by other TRB gems - e.g. `disposable` and `reform` use classes called `Disposable:*` and `Reform::*`, not `Trailblazer::Disposable` and `Trailblazer::Reform`.\r\n\r\nOr perhaps it would reduce confusion by scrapping both old names, and using a new constant name for 5.0? `Cells::Cell`? `Cells::ViewModel`? `Cell::Model`? `Cell::View`? (I like the idea of using `Cells` instead of `Cell` as the outermost namespace as it's more conventional to have the top-level namespace be the same as the name of the gem.)\r\n\r\nWhatever the case, if one or both of the existing classes is going to be removed I think a new `4.X` version should be released that includes deprecation warnings for anyone trying to use the outdated class.. aaaaand it looks like my \"fix\" for the \"broken\" tests ended up breaking them on CI. I'll investigate what the source of the problem is.. > remove cell(:name) calls in favour of MyCellClass.()\r\n\r\nIf you're talking about passing a string to the `cell` helper (e.g. `cell('song')` to render `SongCell`), my commits above already remove this. But you can still pass the constant to the `cell` helper directly: `cell(SongCell)`. Why do you want to remove this? If you're using cells with rails, `SongCell.()` can't be used as a drop-in replacement for `cell(SongCell)`, because the `cell` helper also passes in the `controller` context (so that the cell can access things like routes.)\r\n\r\n> remove :collection magic rendering as it leads to ugly code instead of simply opening a table/list and use my_objects.each + render call in a template\r\n\r\nWhat's wrong with `collection`? I use this all the time. `cell(SongCell, collection: songs)` is much cleaner and simpler than `songs.each { |song| SongCell.() }` if you ask me, plus the `Collection` class has extra functionality e.g. `join`.\r\n\r\n> allow explizit params for a cells call() method, as an options hash is hard to track, and sometimes i dont have a model so the first arg is nil\r\n\r\nNot sure what you mean by \"explicit\" params - what's your suggested syntax for this? I opened a PR for an `option` class method at #449 - is this the kind of thing you're talking about?. I also think that once Cells 5 is released, it may be time to bump the version of all the 'support' gems (cells-rails, cells-erb, cells-slim etc) to 1.0.0. Most of them are currently on versions like `0.0.x` which implies major instability, and is sure to discourage people from using cells in their projects. A major version bump of the core gem is a good opportunity to \"lock down\" the support gems with a stable API.. Hmmm, I suppose when it comes to rendering collections, it is a bit strange using the \"magic\" option `:collection`. (It also means that you can't have a normal option called `collection`, although I doubt that trips many people up.)\r\n\r\nAlternative idea: render a collection by calling a class method on the cell instead?\r\n\r\nSo e.g. the syntax could be:\r\n\r\n```ruby\r\nMyCell.for_collection(x)\r\n# instead of\r\nMyCell.(nil, collection: x)\r\n```\r\n\r\n... which does feel a bit cleaner to me. If we're going to keep the `cell` helper around, then a second helper called `collection` could also be added which calls the `for_collection` method instead of `MyCell.call`.\r\n\r\nI'll write some more later about context/routes/links and param comments later when I have the time.. Another possible change for 5.0: remove dependency on the `uber` gem as I believe it's now deprecated?. Why it would it break other people's tests? This is a change to one of the `development_dependencies`, not to one of the \"real\" dependencies. So projects that have `cells` in their Gemfile won't be affected by this change, only the `cells` gem itself when people are developing the gem directly. (Right?). Just noting that I'm getting the same error in tests for a cell that includes ` ActionView::Helpers::FormOptionsHelper` (so I can use `options_for_select`). Everything works as expected when testing in the browser, but RSpec fails with `undefined method `output_buffer=' for #<MyCell:0x007f8efd10d6f8>`.\r\n\r\nDon't have time to investigate it properly, but my hacky fix for now is to `include ::Cell::Erb` in my Cell, *below* the line `include ActionView::Helpers::FormOptionsHelper`.\r\n. I agree that this should be documented. (It's worth noting for anyone else reading this that the `escape!` method isn't available unless you `include Escaped` into the Cell.)\r\n\r\nI find it's fairly common that I need to escape a string that can't be neatly encapsulated within a `property`. Yes, this is probably a sign that I should split out an entirely new 'sub cell', but as we all know, sometimes you have to sacrifice perfect design for the sake of getting things done fast.\r\n\r\nNote that all `escape!(string)` does is call `ERB::Util.html_escape(string)`, so you can always just use `ERB::Util` directly if you don't want to depend on `escape!`.. I think the plan is to remove concepts in Cells 5?. @apotonick we've talked about this before, but to confirm, is the plan to get rid of `Cell::ViewModel` and just use `Trailblazer::Cell` for everything? Or is the `C::VM > T::C` hierarchy gonna be kept?\r\n\r\nIf it's the former, is the plan to merge `trailblazer-cells` and `cells` into a single gem?. fixed and rebased ;). If you approve this then I updated the docs too at https://github.com/trailblazer/trailblazer.github.io/pull/91. Can we pretty please get a release that includes this feature? :). Thanks! :). We've also talked about merging `Cell::ViewModel` and `Trailblazer::Cell` into a single class. This would also mean merging `cells` and `trailblazer-cells`, which I think only makes sense as it's confusing to have two gems, and `trailblazer-cells` is only a [single file](https://github.com/trailblazer/trailblazer-cells/blob/master/lib/trailblazer/cell.rb) with less than 50 LOC.\r\n\r\nIf these two classes are merged, will the new class be called `Cell::ViewModel` or `Trailblazer::Cell`? I think it makes sense to stick with `Cell::ViewModel` and consign `Trailblazer::Cell` to the dustbin. This follows the pattern set by other TRB gems - e.g. `disposable` and `reform` use classes called `Disposable:*` and `Reform::*`, not `Trailblazer::Disposable` and `Trailblazer::Reform`.\r\n\r\nOr perhaps it would reduce confusion by scrapping both old names, and using a new constant name for 5.0? `Cells::Cell`? `Cells::ViewModel`? `Cell::Model`? `Cell::View`? (I like the idea of using `Cells` instead of `Cell` as the outermost namespace as it's more conventional to have the top-level namespace be the same as the name of the gem.)\r\n\r\nWhatever the case, if one or both of the existing classes is going to be removed I think a new `4.X` version should be released that includes deprecation warnings for anyone trying to use the outdated class.. aaaaand it looks like my \"fix\" for the \"broken\" tests ended up breaking them on CI. I'll investigate what the source of the problem is.. > remove cell(:name) calls in favour of MyCellClass.()\r\n\r\nIf you're talking about passing a string to the `cell` helper (e.g. `cell('song')` to render `SongCell`), my commits above already remove this. But you can still pass the constant to the `cell` helper directly: `cell(SongCell)`. Why do you want to remove this? If you're using cells with rails, `SongCell.()` can't be used as a drop-in replacement for `cell(SongCell)`, because the `cell` helper also passes in the `controller` context (so that the cell can access things like routes.)\r\n\r\n> remove :collection magic rendering as it leads to ugly code instead of simply opening a table/list and use my_objects.each + render call in a template\r\n\r\nWhat's wrong with `collection`? I use this all the time. `cell(SongCell, collection: songs)` is much cleaner and simpler than `songs.each { |song| SongCell.() }` if you ask me, plus the `Collection` class has extra functionality e.g. `join`.\r\n\r\n> allow explizit params for a cells call() method, as an options hash is hard to track, and sometimes i dont have a model so the first arg is nil\r\n\r\nNot sure what you mean by \"explicit\" params - what's your suggested syntax for this? I opened a PR for an `option` class method at #449 - is this the kind of thing you're talking about?. I also think that once Cells 5 is released, it may be time to bump the version of all the 'support' gems (cells-rails, cells-erb, cells-slim etc) to 1.0.0. Most of them are currently on versions like `0.0.x` which implies major instability, and is sure to discourage people from using cells in their projects. A major version bump of the core gem is a good opportunity to \"lock down\" the support gems with a stable API.. Hmmm, I suppose when it comes to rendering collections, it is a bit strange using the \"magic\" option `:collection`. (It also means that you can't have a normal option called `collection`, although I doubt that trips many people up.)\r\n\r\nAlternative idea: render a collection by calling a class method on the cell instead?\r\n\r\nSo e.g. the syntax could be:\r\n\r\n```ruby\r\nMyCell.for_collection(x)\r\n# instead of\r\nMyCell.(nil, collection: x)\r\n```\r\n\r\n... which does feel a bit cleaner to me. If we're going to keep the `cell` helper around, then a second helper called `collection` could also be added which calls the `for_collection` method instead of `MyCell.call`.\r\n\r\nI'll write some more later about context/routes/links and param comments later when I have the time.. Another possible change for 5.0: remove dependency on the `uber` gem as I believe it's now deprecated?. Why it would it break other people's tests? This is a change to one of the `development_dependencies`, not to one of the \"real\" dependencies. So projects that have `cells` in their Gemfile won't be affected by this change, only the `cells` gem itself when people are developing the gem directly. (Right?). ",
    "marcelloma": "Heres a sample app reproducing the issue https://github.com/marcelloma/helloworld\n. Heres a sample app reproducing the issue https://github.com/marcelloma/helloworld\n. ",
    "BlackFoks": "I have a twin class to share some code between different representers. I just want to use its properties in a cell (concept actually).\n. Yes, it works without twin. I just tested it. Ok, here is some code:\n\n``` ruby\nclass Invoice < ActiveRecord::Base\n  # ...\nend\n\nclass Invoice::Twin < BaseTwin\n  # properties here...\n\n  module XeroIntegration\n    def invoice_number\n      \"INV-#{ id }\"\n    end\n\n    def xero_url\n      if bill?\n        xero_bill_url\n      else\n        xero_invoice_url\n      end\n    end\n\n    protected\n\n    def xero_bill_url\n      # ...\n    end\n\n    def xero_invoice_url\n      # ...\n    end\n  end\n  include XeroIntegration\nend\n\nclass Invoice::Concept < Concept\n  include ::Cell::Twin\n\n  def show\n    #...\n  end\n\n  private\n\n  twin ::Invoice::Twin\nend\n\nclass Invoice::XeroRepresenter\n  def initialize(invoice)\n    @invoice = ::Invoice::Twin.new(invoice)\n  end\n\n  def to_hash\n    {\n      number: invoice.invoice_number,\n      # other properties\n    }\n  end\nend\n```\n\nSo I use twin as a decorator. I didn't want to put twin's code into a model so I though it was a good idea to use twins for this.\n. Yes, I can I know. It's not an issue :) The issue is that including `include ::Cell::Twin` into `Invoice::Concept` breaks collection rendering.\n. I just updated cells to 4.0.1 and it broke device helpers in cells. I already read that helper_method is not available anymore so I tried to use something like `delegate :current_user, to: :controller` to get a current user inside a cell. It works well expect collections because controller is nil for all non-first elements.\n. Yes, I think it's due to `options.delete(:controller)` and then `options` is passed to the next element with no :controller in `options`.\n. It's here https://github.com/apotonick/cells/blob/f785b3431b226b5c98a5cd58d4fc76e13239f0d7/lib/cell/twin.rb#L17\n\nSo it builds the first element with controller and then controller gets lost.\n. Ok, thanks again.\n\nJust one thought: since anyone can modify options in one cell and it will affect all next cells in a collection maybe it would be good to pass a copy of original options to each cell to prevent such issues in future?\n. Oh, I see.\n. I have a twin class to share some code between different representers. I just want to use its properties in a cell (concept actually).\n. Yes, it works without twin. I just tested it. Ok, here is some code:\n\n``` ruby\nclass Invoice < ActiveRecord::Base\n  # ...\nend\n\nclass Invoice::Twin < BaseTwin\n  # properties here...\n\n  module XeroIntegration\n    def invoice_number\n      \"INV-#{ id }\"\n    end\n\n    def xero_url\n      if bill?\n        xero_bill_url\n      else\n        xero_invoice_url\n      end\n    end\n\n    protected\n\n    def xero_bill_url\n      # ...\n    end\n\n    def xero_invoice_url\n      # ...\n    end\n  end\n  include XeroIntegration\nend\n\nclass Invoice::Concept < Concept\n  include ::Cell::Twin\n\n  def show\n    #...\n  end\n\n  private\n\n  twin ::Invoice::Twin\nend\n\nclass Invoice::XeroRepresenter\n  def initialize(invoice)\n    @invoice = ::Invoice::Twin.new(invoice)\n  end\n\n  def to_hash\n    {\n      number: invoice.invoice_number,\n      # other properties\n    }\n  end\nend\n```\n\nSo I use twin as a decorator. I didn't want to put twin's code into a model so I though it was a good idea to use twins for this.\n. Yes, I can I know. It's not an issue :) The issue is that including `include ::Cell::Twin` into `Invoice::Concept` breaks collection rendering.\n. I just updated cells to 4.0.1 and it broke device helpers in cells. I already read that helper_method is not available anymore so I tried to use something like `delegate :current_user, to: :controller` to get a current user inside a cell. It works well expect collections because controller is nil for all non-first elements.\n. Yes, I think it's due to `options.delete(:controller)` and then `options` is passed to the next element with no :controller in `options`.\n. It's here https://github.com/apotonick/cells/blob/f785b3431b226b5c98a5cd58d4fc76e13239f0d7/lib/cell/twin.rb#L17\n\nSo it builds the first element with controller and then controller gets lost.\n. Ok, thanks again.\n\nJust one thought: since anyone can modify options in one cell and it will affect all next cells in a collection maybe it would be good to pass a copy of original options to each cell to prevent such issues in future?\n. Oh, I see.\n. ",
    "Vorob-Astronaut": "``` ruby\nmodule Core::Cells\n  class Application::Cell < Cell::Concept\n    self_contained!\n    class_name = name.split('::')[-2].downcase\n    self.view_paths = [\"#{Jobs::Cells::Engine.root}/app/concepts\"] + [\"#{Core::Cells::Engine.root}/app/concepts\"]\n\n    include ::Cell::Slim\n  end\nend\n```\n\nAn error:\n\n```\nTemplate missing: view: `show.slim` prefixes: \n[\"/Users/vorob/Dropbox/ruby/devby_new/devby/components/jobs/cells/app/concepts/cores/asd/cell/views\",\n \"/Users/vorob/Dropbox/ruby/devby_new/devby/components/core/cells/app/concepts/cores/asd/cell/views\",\n \"/Users/vorob/Dropbox/ruby/devby_new/devby/components/jobs/cells/app/concepts/cores/application/cell/views\", \n\"/Users/vorob/Dropbox/ruby/devby_new/devby/components/core/cells/app/concepts/cores/application/cell/views\"\n```\n\nThe problem is: It pluralizes my engine name (_cores_, not just _core_), and doesn't add _cells_ subnamespace.\n. @apotonick can u create a 4.0.2 release for this patch?\nWe are using this in the production.\nThnx\n. ``` ruby\nmodule Core::Cells\n  class Application::Cell < Cell::Concept\n    self_contained!\n    class_name = name.split('::')[-2].downcase\n    self.view_paths = [\"#{Jobs::Cells::Engine.root}/app/concepts\"] + [\"#{Core::Cells::Engine.root}/app/concepts\"]\n\n    include ::Cell::Slim\n  end\nend\n```\n\nAn error:\n\n```\nTemplate missing: view: `show.slim` prefixes: \n[\"/Users/vorob/Dropbox/ruby/devby_new/devby/components/jobs/cells/app/concepts/cores/asd/cell/views\",\n \"/Users/vorob/Dropbox/ruby/devby_new/devby/components/core/cells/app/concepts/cores/asd/cell/views\",\n \"/Users/vorob/Dropbox/ruby/devby_new/devby/components/jobs/cells/app/concepts/cores/application/cell/views\", \n\"/Users/vorob/Dropbox/ruby/devby_new/devby/components/core/cells/app/concepts/cores/application/cell/views\"\n```\n\nThe problem is: It pluralizes my engine name (_cores_, not just _core_), and doesn't add _cells_ subnamespace.\n. @apotonick can u create a 4.0.2 release for this patch?\nWe are using this in the production.\nThnx\n. ",
    "ilya-konanykhin": "Uh-oh, excuse me. I changed title of this issue (I realized the real problem while submitting and re-wrote text, but forgot about title).\n\nNow, the problem is different behavior in environments: when I was in dev and used `cell :name, :model` (without `.call`) I got what I wanted, HTML was rendered properly (html_safed). When I uploaded that code without change to staging, it started escaping HTML entities (no html_safe).\n\nMaybe, in staging & production module `Cell::RailsExtensions::ViewModel` doesn't get mixed in for some reason? I deploy code via Capistrano and restart server with each deploy, trying `puma restart` and `puma start/puma stop`. Nothing helped until I added `.call`, now it works consistently in all environments.\n. Just made a clean check \u2014 rendered the same cell subsequently with `.call` and without it, with `.call` works well in both environments, without it in staging produces escaped output. So yes, it is confirmed.\n\nI observe this behavior on cells both with and without caching, don't think it is related.\n\nExtensions inclusion: I see your point and made a little investigation, with no luck though. I'll try digging deeper.\n. I found this old issue and felt it would be nice if it can be finally resolved.\n\n**_TL/DR**_: add to your cells a method `html_safe?` returning `true`.\n\nIn details, it seems the problem is in Slim engine's test for `html_safe?` before rendering anything:\n\n``` slim\n= cell(:test)\n# ERB equivalent: <%= ::Temple::Utils.escape_html_safe((cell(:test))) %>\n```\n\nThe method `escape_html_safe` is like this:\n\n``` ruby\ndef escape_html_safe(html)\n  html.html_safe? ? html : escape_html(html)\nend\n```\n\n(This method may or may not be called depending on a combination of settings \u2014 I guess that's the reason why some folks see different behavior in dev/prod, including me.)\n\nThis leads to:\n\n``` slim\n= cell(:test).html_safe?      # false\n= cell(:test).to_s.html_safe? # true\n= cell(:test).call.html_safe? # true\n```\n\nAs we really do cell html_safing in Rails, it seems OK to add its sister method somewhere near:\n\n``` ruby\n# lib/cell/rails.rb\ndef call(*)\n  super.html_safe\nend\n\ndef html_safe?\n  true\nend\n```\n\nThis was tested in cells 4.0.5 and cells 4.1.3 + cells-rails 0.0.6.\n\nWhat do you think, can we add this? I can make a pull request if you give it a go.\n. I did fresh installation of latest Rails and Slim, and tested both with old cells (4.0.5) and new cells + cells-rails (4.1.3 + 0.0.6). That is, I added method `html_safe?` returning true to `lib/cell/rails.rb` and all worked well, resolving the issue.\n\nWould this suffice? If not, can you suggest other tests to do?\n. I've made a pull request \u2014 take a look at it when you have a chance: [https://github.com/trailblazer/cells-rails/pull/12](url). Uh-oh, excuse me. I changed title of this issue (I realized the real problem while submitting and re-wrote text, but forgot about title).\n\nNow, the problem is different behavior in environments: when I was in dev and used `cell :name, :model` (without `.call`) I got what I wanted, HTML was rendered properly (html_safed). When I uploaded that code without change to staging, it started escaping HTML entities (no html_safe).\n\nMaybe, in staging & production module `Cell::RailsExtensions::ViewModel` doesn't get mixed in for some reason? I deploy code via Capistrano and restart server with each deploy, trying `puma restart` and `puma start/puma stop`. Nothing helped until I added `.call`, now it works consistently in all environments.\n. Just made a clean check \u2014 rendered the same cell subsequently with `.call` and without it, with `.call` works well in both environments, without it in staging produces escaped output. So yes, it is confirmed.\n\nI observe this behavior on cells both with and without caching, don't think it is related.\n\nExtensions inclusion: I see your point and made a little investigation, with no luck though. I'll try digging deeper.\n. I found this old issue and felt it would be nice if it can be finally resolved.\n\n**_TL/DR**_: add to your cells a method `html_safe?` returning `true`.\n\nIn details, it seems the problem is in Slim engine's test for `html_safe?` before rendering anything:\n\n``` slim\n= cell(:test)\n# ERB equivalent: <%= ::Temple::Utils.escape_html_safe((cell(:test))) %>\n```\n\nThe method `escape_html_safe` is like this:\n\n``` ruby\ndef escape_html_safe(html)\n  html.html_safe? ? html : escape_html(html)\nend\n```\n\n(This method may or may not be called depending on a combination of settings \u2014 I guess that's the reason why some folks see different behavior in dev/prod, including me.)\n\nThis leads to:\n\n``` slim\n= cell(:test).html_safe?      # false\n= cell(:test).to_s.html_safe? # true\n= cell(:test).call.html_safe? # true\n```\n\nAs we really do cell html_safing in Rails, it seems OK to add its sister method somewhere near:\n\n``` ruby\n# lib/cell/rails.rb\ndef call(*)\n  super.html_safe\nend\n\ndef html_safe?\n  true\nend\n```\n\nThis was tested in cells 4.0.5 and cells 4.1.3 + cells-rails 0.0.6.\n\nWhat do you think, can we add this? I can make a pull request if you give it a go.\n. I did fresh installation of latest Rails and Slim, and tested both with old cells (4.0.5) and new cells + cells-rails (4.1.3 + 0.0.6). That is, I added method `html_safe?` returning true to `lib/cell/rails.rb` and all worked well, resolving the issue.\n\nWould this suffice? If not, can you suggest other tests to do?\n. I've made a pull request \u2014 take a look at it when you have a chance: [https://github.com/trailblazer/cells-rails/pull/12](url). ",
    "siegfried": "@apotonick Any news about this issue? It has blocked our project. What can I help?\n. It only occurs to SLIM in production. In development it is fine. And calling cell/concept with collection would be fine as well. It seems that this problem does not happen to HAML anymore. @apotonick \n. I think I got it fixed by using '==' instead of '='. Maybe that is the correct way to use cells in slim. However, it is just strange that development and production have different behaviours.\n. @apotonick Any news about this issue? It has blocked our project. What can I help?\n. It only occurs to SLIM in production. In development it is fine. And calling cell/concept with collection would be fine as well. It seems that this problem does not happen to HAML anymore. @apotonick \n. I think I got it fixed by using '==' instead of '='. Maybe that is the correct way to use cells in slim. However, it is just strange that development and production have different behaviours.\n. ",
    "szyablitsky": "+1 for this problem in slim.\nAlso have to use `==` instead of `=` in slim templates.\n. +1 for this problem in slim.\nAlso have to use `==` instead of `=` in slim templates.\n. ",
    "tmullen": "That works for me. Thanks Nick!\n. That works for me. Thanks Nick!\n. ",
    "CJBrew": "Hi, \n\nI believe I've come up against this issue too, and I can't see how to fix it from this information. An example of what @tmullen did would be good!\n\nMy cell, as far as I know, doesn't need a \"Optional Controller\" -- if I had to pass that in, what should it be?\n\nHere's an example project, I'd be grateful if you could take a look; I think most of the interesting stuff is in the readme on the front page:\nhttps://bitbucket.org/CJBrew/cellstestbed\n\nBy the way @apotonick , the link above is wrong (changed?). It should be \nhttp://trailblazer.to/gems/cells/testing.html#optional-controller\n\n/EDIT:\nhttps://github.com/apotonick/rspec-cells#api\n\n```\nURL helpers\nIf your cells use helpers with controller dependency, you need to specify a controller to use in your test.\n```\n\nI have tried \n\n``` ruby\nRSpec.describe NavCell, type: :cell do\n  controller ApplicationController\n```\n\nbut this doesn't help.... \n\nI don't think this is a Cells issue, but more how Rspec instantiates the Rails environment (or doesn't).\n\nCurrently using the helper module I found here:\nhttp://stackoverflow.com/questions/16720514/how-to-use-url-helpers-in-lib-modules-and-set-host-for-multiple-environments\nIt's not a great solution but it seems to be working as a workaround. \n\nIf you can enlighten me on what includes etc. I need in my cell to make it _just work_ without this helper, that'd be wonderful :) \n. Further, this info seems to have helped\nhttps://github.com/apotonick/cells/wiki/From-Cells-3-to-Cells-4---Upgrading-Guide#migrating-from-cells-3-to-cells-4-with-rails-help\n\nGave me enough information to get this up and running:\n\n``` ruby\n    before do\n      allow(controller).to receive(:current_user).and_return(nil)\n    end\n\n    it 'has the expected homepage_link' do\n      content = cell(:nav, controller: controller).call\n```\n. I saw this: https://github.com/apotonick/cells/issues/270\n\nHave tested with the github link in my Gemfile and it doesn't appear to solve the problem,\n. /facepalm\n\nFor some reason that wasn't clear enough. Thank you.\n. @apotonick, thanks for the pointer to the cells gem; however there still seems to be an issue with generating Concepts (sorry, I deleted my example repo). \n\nIt's this issue: https://github.com/apotonick/rspec-cells/issues/57\n\n```\n01:54 $ rails g concept Frog get post\n      create  app/concepts/frog/cell.rb\n      create  app/concepts/frog/views/show.erb\n      create  app/concepts/frog/views/get.erb\n      create  app/concepts/frog/views/post.erb\n       error  rspec [not found]\n```\n\nI'm not really sure what I gain from using Concepts over Cells -- what I'm really after is a nice ViewModel-like layer. \n. Hi, \n\nI believe I've come up against this issue too, and I can't see how to fix it from this information. An example of what @tmullen did would be good!\n\nMy cell, as far as I know, doesn't need a \"Optional Controller\" -- if I had to pass that in, what should it be?\n\nHere's an example project, I'd be grateful if you could take a look; I think most of the interesting stuff is in the readme on the front page:\nhttps://bitbucket.org/CJBrew/cellstestbed\n\nBy the way @apotonick , the link above is wrong (changed?). It should be \nhttp://trailblazer.to/gems/cells/testing.html#optional-controller\n\n/EDIT:\nhttps://github.com/apotonick/rspec-cells#api\n\n```\nURL helpers\nIf your cells use helpers with controller dependency, you need to specify a controller to use in your test.\n```\n\nI have tried \n\n``` ruby\nRSpec.describe NavCell, type: :cell do\n  controller ApplicationController\n```\n\nbut this doesn't help.... \n\nI don't think this is a Cells issue, but more how Rspec instantiates the Rails environment (or doesn't).\n\nCurrently using the helper module I found here:\nhttp://stackoverflow.com/questions/16720514/how-to-use-url-helpers-in-lib-modules-and-set-host-for-multiple-environments\nIt's not a great solution but it seems to be working as a workaround. \n\nIf you can enlighten me on what includes etc. I need in my cell to make it _just work_ without this helper, that'd be wonderful :) \n. Further, this info seems to have helped\nhttps://github.com/apotonick/cells/wiki/From-Cells-3-to-Cells-4---Upgrading-Guide#migrating-from-cells-3-to-cells-4-with-rails-help\n\nGave me enough information to get this up and running:\n\n``` ruby\n    before do\n      allow(controller).to receive(:current_user).and_return(nil)\n    end\n\n    it 'has the expected homepage_link' do\n      content = cell(:nav, controller: controller).call\n```\n. I saw this: https://github.com/apotonick/cells/issues/270\n\nHave tested with the github link in my Gemfile and it doesn't appear to solve the problem,\n. /facepalm\n\nFor some reason that wasn't clear enough. Thank you.\n. @apotonick, thanks for the pointer to the cells gem; however there still seems to be an issue with generating Concepts (sorry, I deleted my example repo). \n\nIt's this issue: https://github.com/apotonick/rspec-cells/issues/57\n\n```\n01:54 $ rails g concept Frog get post\n      create  app/concepts/frog/cell.rb\n      create  app/concepts/frog/views/show.erb\n      create  app/concepts/frog/views/get.erb\n      create  app/concepts/frog/views/post.erb\n       error  rspec [not found]\n```\n\nI'm not really sure what I gain from using Concepts over Cells -- what I'm really after is a nice ViewModel-like layer. \n. ",
    "selectport": "+1 ... i'm finding the similar approach in react.js for simple 'templates' is really nice ... having it along with the normal cell template files would be a nice option to add ....\n. +1 ... i'm finding the similar approach in react.js for simple 'templates' is really nice ... having it along with the normal cell template files would be a nice option to add ....\n. ",
    "fernandes": "for reference [erector](https://github.com/erector/erector) and [arbre](http://github.com/activeadmin/arbre)\n\nThats a fuckin' amazing idea... specially because we can \"overwrite\" and customize views (manually or programmatically) using ruby OOP\n\ntrying to go one step further on @saturnflyer idea, what is we could create \"wrappers\" for the view?\n\nso we could do:\n\n``` ruby\n<%= cell :address, location do %>\n  <%= address1 %><br />\n  <%= address2 %><br />\n  <%= address3 %><br />\n  <%= city_state %><br />\n  <%= country_and_postal %>\n<%- end -%>\n```\n\nor\n\n```\ncell :address, location, wrapper: :bootstrap\n```\n\nthis would be a great addition to \"form-builder-sprite-thing\" no @apotonick ?\n. it's pretty much this idea: https://github.com/apotonick/cells/blob/master/test/rails_extensions_test.rb\n\nbut instead of\n\n``` ruby\n<%= concept(\"bold_cell\", \"hello\") %>\n```\n\nwould be\n\n``` ruby\n<%= concept(\"bold_cell\") do %>\n  <%= concept('some_other_cell') %>\n<% end %>\n```\n. a block would be easier.. but _ok, I understand_ hahaha \ud83d\ude3d \n. \ud83d\ude47 \n. for reference [erector](https://github.com/erector/erector) and [arbre](http://github.com/activeadmin/arbre)\n\nThats a fuckin' amazing idea... specially because we can \"overwrite\" and customize views (manually or programmatically) using ruby OOP\n\ntrying to go one step further on @saturnflyer idea, what is we could create \"wrappers\" for the view?\n\nso we could do:\n\n``` ruby\n<%= cell :address, location do %>\n  <%= address1 %><br />\n  <%= address2 %><br />\n  <%= address3 %><br />\n  <%= city_state %><br />\n  <%= country_and_postal %>\n<%- end -%>\n```\n\nor\n\n```\ncell :address, location, wrapper: :bootstrap\n```\n\nthis would be a great addition to \"form-builder-sprite-thing\" no @apotonick ?\n. it's pretty much this idea: https://github.com/apotonick/cells/blob/master/test/rails_extensions_test.rb\n\nbut instead of\n\n``` ruby\n<%= concept(\"bold_cell\", \"hello\") %>\n```\n\nwould be\n\n``` ruby\n<%= concept(\"bold_cell\") do %>\n  <%= concept('some_other_cell') %>\n<% end %>\n```\n. a block would be easier.. but _ok, I understand_ hahaha \ud83d\ude3d \n. \ud83d\ude47 \n. ",
    "alexch": "Another Erector spinoff is https://github.com/ageweke/fortitude which is a\nbit cleaner codebase and more up to date with the latest Rails. I've been\nusing it on a client project and (apart for some headaches with nested\nblocks passed in to Rails helpers) it's working fine.\n\nOn Wed, Jul 22, 2015 at 8:40 AM, Celso Fernandes notifications@github.com\nwrote:\n\n> for reference erector https://github.com/erector/erector and arbre\n> https://github.com/activeadmin/arbre\n> \n> Thats a fuckin' amazing idea... specially because we can \"overwrite\" and\n> customize views (manually or programmatically) using ruby OOP\n> \n> trying to go one step further on @saturnflyer\n> https://github.com/saturnflyer idea, what is we could create \"wrappers\"\n> for the view?\n> \n> so we could do:\n> \n> <%= cell :address, location do %>  <%= address1 %><br />\n>   <%= address2 %><br />\n>   <%= address3 %><br />\n>   <%= city_state %><br />\n>   <%= country_and_postal %><%- end -%>\n> \n> or\n> \n> cell :address, location, wrapper: :bootstrap\n> \n> this would be a great addition to \"form-builder-sprite-thing\" no\n> @apotonick https://github.com/apotonick ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/309#issuecomment-123707888.\n\n## \n\nAlex Chaffee - alex@stinky.com\nhttp://alexchaffee.com\nhttp://twitter.com/alexch\n. Both Erector and Fortitude use constructors to initialize view objects\n(because, you know, OO), so it would be easy to pass in a cell as a\nparameter that then turns into an instance variable. Or to pass in the\ncell's model.\n\nOr alternately to give a cell a \"view\" method that returns a widget\npre-initialized to point to the cell itself. Or to automagically make each\nof the model's fields a view instance var. Or...\n\nI've tried a few times but never quite wrapped my head around the Cells\narchitecture. Can you point me to a tutorial? Or better, a fully functional\napp project?\n. Another Erector spinoff is https://github.com/ageweke/fortitude which is a\nbit cleaner codebase and more up to date with the latest Rails. I've been\nusing it on a client project and (apart for some headaches with nested\nblocks passed in to Rails helpers) it's working fine.\n\nOn Wed, Jul 22, 2015 at 8:40 AM, Celso Fernandes notifications@github.com\nwrote:\n\n> for reference erector https://github.com/erector/erector and arbre\n> https://github.com/activeadmin/arbre\n> \n> Thats a fuckin' amazing idea... specially because we can \"overwrite\" and\n> customize views (manually or programmatically) using ruby OOP\n> \n> trying to go one step further on @saturnflyer\n> https://github.com/saturnflyer idea, what is we could create \"wrappers\"\n> for the view?\n> \n> so we could do:\n> \n> <%= cell :address, location do %>  <%= address1 %><br />\n>   <%= address2 %><br />\n>   <%= address3 %><br />\n>   <%= city_state %><br />\n>   <%= country_and_postal %><%- end -%>\n> \n> or\n> \n> cell :address, location, wrapper: :bootstrap\n> \n> this would be a great addition to \"form-builder-sprite-thing\" no\n> @apotonick https://github.com/apotonick ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/apotonick/cells/issues/309#issuecomment-123707888.\n\n## \n\nAlex Chaffee - alex@stinky.com\nhttp://alexchaffee.com\nhttp://twitter.com/alexch\n. Both Erector and Fortitude use constructors to initialize view objects\n(because, you know, OO), so it would be easy to pass in a cell as a\nparameter that then turns into an instance variable. Or to pass in the\ncell's model.\n\nOr alternately to give a cell a \"view\" method that returns a widget\npre-initialized to point to the cell itself. Or to automagically make each\nof the model's fields a view instance var. Or...\n\nI've tried a few times but never quite wrapped my head around the Cells\narchitecture. Can you point me to a tutorial? Or better, a fully functional\napp project?\n. ",
    "ryan2johnson9": "@apotonick Thank you so much for the quick and clear response.\n\nI almost got there on my own, I tried\n`include Formtastic::Helpers::FormHelper`\nand got an error\nI did not do the\n`include ActionView::RecordIdentifier`\n\nThat fixed it for me. Cheers - made my day and I'm very enthusiastic about Cells 4!\n. Selects with formtastic don't work unless you also do\n`include ActionView::Helpers::FormOptionsHelper`\nwas a bit tricky to find, error: `private method 'select' called on an instance of LocationVariableCell.`\n\nI guess using cells makes you get to know exactly which helpers you are using.\n\nI'll try editing the link to the formtastic help file you showed me.\n. Not sure I know enough to raise a ticket there.\nI think in this case they are making use of the Rails helpers from their helpers. Would the correct way for them be to include the Rails Helpers in their helpers where they are used? If so, would this result in Rails helpers being included twice in a standard project?\n. Yeh I know!\n\nThanks, now I can require 'cells/partial'. However it does not seem to do anything. I get the same error as before I tried to `include Partial`. The render call from within the (nested) cell looks like this:\n\n`= render partial: 'translation_nested_fields'`\n\ngives this very strange error:\n\n(when rendered from within debugger):\n\n```\nTemplate missing: view: `__metaclass_init__.haml` prefixes: [\"app/cells/location_variable\"] (Cell::TemplateMissingError)\n            Cell::ViewModel::TemplateFor(LocationVariableCell)#find_template at /home/ryan/.rvm/gems/rbx-2.5.7@rails4.1_registration/gems/cells-4.0.2/lib/cell\n                                                                                /view_model.rb:188\n           Cell::ViewModel::Rendering(LocationVariableCell)#render_to_string at /home/ryan/.rvm/gems/rbx-2.5.7@rails4.1_registration/gems/cells-4.0.2/lib/cell\n                                                                                /view_model.rb:117\n                     Cell::ViewModel::Rendering(LocationVariableCell)#render at /home/ryan/.rvm/gems/rbx-2.5.7@rails4.1_registration/gems/cells-4.0.2/lib/cell\n                                                                                /view_model.rb:112\n```\n\nwhen rendered normally in HAML\n\n```\nActionView::Template::Error (Template missing: view: `__tilt_22303564.haml` prefixes: [\"app/cells/location_variable\"]):\napp/cells/location_variable/edit_letter_translations.haml:4:in `__tilt_22303564'\napp/cells/location_variable/edit_letter_translations.haml:-8:in `__tilt_22303564'\napp/cells/location_variable/edit_letter_translations.haml:-10:in `__tilt_22303564'\napp/cells/location_variable_cell.rb:116:in `edit_letter_translations'\napp/cells/location_variable/edit.haml:28:in `__tilt_22303564'\napp/cells/location_variable/edit.haml:18:in `__tilt_22303564'\napp/cells/location_variable/edit.haml:-8:in `__tilt_22303564'\napp/cells/location_variable/edit.haml:-10:in `__tilt_22303564'\napp/cells/location_variable_cell.rb:20:in `edit'\napp/views/location_variables/edit.haml:12:in `_app_views_location_variables_edit_haml__1547421109874181847_9140608'\napp/controllers/location_location_variables_controller.rb:113:in `edit'\napp/controllers/location_location_variables_controller.rb:112:in `edit'\n```\n\nThe partial is defined at \"app/cells/location_variable/_translation_nested_form.haml\n. Yes I read that section, found using my nifty Ctrl-F on my browser. :)\n\nI don't want to use a global partial, I want to simply use a partial (required by cocoon) and the only info on the README is for Global Partials. I just wanted to put it in with the folder for all my cells views.\n\nI've tried a number of things now, including and not including the .haml extension. Including and not including the `_` at the front of the partial. Ensuring the name of my partial is correct. Taking the partial out of the folder of my cells views and putting it in my normal view paths and trying to access it like in the Readme. Removing the `require 'partial'` line.\n\nappending to the view paths using\n\n`self.view_paths << 'app/views/location_variables'`\n\nthis seems to have a bug\nsee how my appended view path has had the name of the cell added to it: `\"app/views/location_variables/location_variable\"`\n\n`ActionView::Template::Error (Template missing: view:`__tilt_1144364.haml`prefixes: [\"app/cells/location_variable\", \"app/views/location_variables/location_variable\"]):`\n\nBut even if I account for this seeming bug (by appending 'app/views/') and putting my partial in a folder called 'location_variable'\n\nI always get this error about not being able to find '__tilt_.........'\n\nI'm stumped.. \n. __tilt_1471860.haml, always has a different number on the end, before the  haml extension\n. Thanks for the chat @apotonick .\n\nIt seems that the Readme is no longer true for cells 4.0.2. Although I did not need to render a Global partial in the end, I still experimented with this on my way and found a) `include Partial` raises an error and should be require 'cells/partial', but then from there I could not render a global partial anyway.\n\nThe solution for me to render a partial defined in my cells/location_variable folder was as you suggested `= render view: '_translation_nested_form', locals:{ f: trans_form, disable: false }`\n\nso shall I investigate and be sure that the README rendering partials is incorrect, and then add a pull request for the readme?\n\nAlso is it an error with the view_paths as suggested above? i.e. no matter what view path is put in, the name of the cell is always added at the end of the path. Or is this intended?\n\nAnd do you think it would be helpful for me to add something to the readme about rendering partials in general, in the \"please do not read section\"?\n\nOne more thing, The biggest issue I faced was making use of Cocoon's link_to_add_association method which asks for the name of a partial. With @apotonick's encouragement I managed to do a monkey patch for Cocoon so that it uses the correct render call. Here is my monkey patch for anyone else in this situation:\n\nfrom within the cell, when you call link_to_add_association, pass in a render option `cells_compatible:true` like this:\n\n```\nlink_to_add_association \"add\", @form, :association_name,\n                          :partial => \"_partial_name\", render_options:{cells_compatible:true}\n```\n\n(note the leading underscore required in the partial_name)\n\nin some model, or however you like to do monkey patches, (I use a class_extensions.rb file in my models directory) add this code:\n\n```\nrequire 'cocoon/view_helpers'\n# overwrite the cocoon method which renders the partial for adding associations in the link_to_add_association helper method\nmodule Cocoon\n  module ViewHelpers\n    def render_association(association, f, new_object, form_name, render_options={}, custom_partial=nil)\n      partial = get_partial_path(custom_partial, association)\n      locals =  render_options.delete(:locals) || {}\n      cells_compatible = render_options.delete(:cells_compatible)\n      method_name = f.respond_to?(:semantic_fields_for) ? :semantic_fields_for : (f.respond_to?(:simple_fields_for) ? :simple_fields_for : :fields_for)\n      f.send(method_name, association, new_object, {:child_index => \"new_#{association}\"}.merge(render_options)) do |builder|\n        partial_options = {form_name.to_sym => builder, :dynamic => true}.merge(locals)\n        if cells_compatible\n          render view: partial, locals: partial_options\n        else\n          render(partial, partial_options)\n        end\n      end\n    end\n  end\nend\n```\n\nThis simply overwrites the same method in Coccon which looks like this\n\n```\ndef render_association(association, f, new_object, form_name, render_options={}, custom_partial=nil)\n  partial = get_partial_path(custom_partial, association)\n  locals =  render_options.delete(:locals) || {}\n  method_name = f.respond_to?(:semantic_fields_for) ? :semantic_fields_for : (f.respond_to?(:simple_fields_for) ? :simple_fields_for : :fields_for)\n  f.send(method_name, association, new_object, {:child_index => \"new_#{association}\"}.merge(render_options)) do |builder|\n    partial_options = {form_name.to_sym => builder, :dynamic => true}.merge(locals)\n    render(partial, partial_options)\n  end\nend\n```\n\nI will raise an issue with Cocoon now to see if they think it is worth me making a pull request.\n. https://github.com/nathanvda/cocoon/issues/315\n. Ahh ok, so Cocoon's render call is hitting Cells render method, rather than the global render helper. So If I adjust my Cells render method and detect when the render call is meant for the global render, and massage the parameters there before handing them onto super that would be cleaner than introducing a conditional statement into @nathanvda 's Cocoon's internals. It would mean my overwriting render method in my cell would have to be able to accept both combinations of paramaters, i.e\n\nfrom Cells::ViewModel the render method params = `def render(options={})`\nfrom ActionView::Helpers::RenderingHelper `def render(options = {}, locals = {}, &block)`\n\nI'll give it a whirl, Ta\n. :)\n. Ok, here is my 'cleaner' solution as suggested by @apotonick(though not condoned :) ) . Brace yourselves, it may be cringeworthy, but for me it works pretty well so far and has helped me to understand better the issue that @apotonick has been trying to teach me.. i.e. there are problems when a gem makes use of a global rails helper such as `render`. I wonder what the alternative is then for such gems, should they explicitly include the helpers they need rather than rely on them being in the global set of helpers? I think I need to read that Trailblazer book.\n\nAnyway here is the code I added to my Cell, I'll probably extract it into a module and include it when I need to use it in other cells:\n\n```\n# Need to overwrite the cells render so that we can use Cocoon in the edit_letter_translations view\n# Cocoon assumes it is using ActionView::Helpers::RenderingHelper render method which accepts these parameters: def render(options = {}, locals = {}, &block)\n# but when rendered in the context of a cell, it hits the Cells::ViewModel render method which accepts different params = def render(options={})\n# so accept all params and massage these before sending them onto the Cells::ViewModel render with 'super'\ndef render(options = nil, locals = nil, &block)\n  #CASE 1 Cell calls render without arguments\n  if options.nil?\n    super(state_for_implicit_render(caller))\n\n  #Case 2 Cell calls render with either the name of a view or a single optios Hash as its paramater\n  elsif options.present? && locals.nil?\n    super options\n\n  #Case 3 render is called by Cocoon, intended for ActionView::Helpers::RenderingHelper so massage params such that Cells render can handle it\n  elsif options.is_a?(String) && locals.is_a?(Hash)\n    if block_given?\n      raise \"sorry don't know how to handle block in this custom override - ryan - see app/cells/location_variable_cell.rb:32\"\n    end\n    super({view: options, locals: locals})\n  else\n    raise \"Woops, this overriding render method written so that we could make use of Cocoon in Cells did not handle a render call properly, please see app/cells/location_variable_cell.rb\"\n  end\nend\n```\n\nThis covers all the cases I need to use render for, but I won't be surprised if we hit the \"Woops\" error one day.\n. I had to do that because 'caller' in the context of Cells::ViewModel render is no longer my cells method, e.g. edit, when render hits my overwriting method first.\n. Yeah, nice one! Rails developers start to expect magic I guess.\n. :+1:  \n. @Startouf sorry I did not see your post til now. I came across the same error re `render_state.erb` when using the monkey patch I added here. I solved it by never using simply `render` but always specifying the name of the template. e.g. `render \"show\"`, (i.e. the `if options.nil?` block in my monkey patch is now broken so I avoid it). I have not tried the Cocoon::Cells Helper yet but will do soon as I'm keen to remove the monkey patch from my code. How did you go with the Helper, did it work for you?\n. @apotonick Thank you so much for the quick and clear response.\n\nI almost got there on my own, I tried\n`include Formtastic::Helpers::FormHelper`\nand got an error\nI did not do the\n`include ActionView::RecordIdentifier`\n\nThat fixed it for me. Cheers - made my day and I'm very enthusiastic about Cells 4!\n. Selects with formtastic don't work unless you also do\n`include ActionView::Helpers::FormOptionsHelper`\nwas a bit tricky to find, error: `private method 'select' called on an instance of LocationVariableCell.`\n\nI guess using cells makes you get to know exactly which helpers you are using.\n\nI'll try editing the link to the formtastic help file you showed me.\n. Not sure I know enough to raise a ticket there.\nI think in this case they are making use of the Rails helpers from their helpers. Would the correct way for them be to include the Rails Helpers in their helpers where they are used? If so, would this result in Rails helpers being included twice in a standard project?\n. Yeh I know!\n\nThanks, now I can require 'cells/partial'. However it does not seem to do anything. I get the same error as before I tried to `include Partial`. The render call from within the (nested) cell looks like this:\n\n`= render partial: 'translation_nested_fields'`\n\ngives this very strange error:\n\n(when rendered from within debugger):\n\n```\nTemplate missing: view: `__metaclass_init__.haml` prefixes: [\"app/cells/location_variable\"] (Cell::TemplateMissingError)\n            Cell::ViewModel::TemplateFor(LocationVariableCell)#find_template at /home/ryan/.rvm/gems/rbx-2.5.7@rails4.1_registration/gems/cells-4.0.2/lib/cell\n                                                                                /view_model.rb:188\n           Cell::ViewModel::Rendering(LocationVariableCell)#render_to_string at /home/ryan/.rvm/gems/rbx-2.5.7@rails4.1_registration/gems/cells-4.0.2/lib/cell\n                                                                                /view_model.rb:117\n                     Cell::ViewModel::Rendering(LocationVariableCell)#render at /home/ryan/.rvm/gems/rbx-2.5.7@rails4.1_registration/gems/cells-4.0.2/lib/cell\n                                                                                /view_model.rb:112\n```\n\nwhen rendered normally in HAML\n\n```\nActionView::Template::Error (Template missing: view: `__tilt_22303564.haml` prefixes: [\"app/cells/location_variable\"]):\napp/cells/location_variable/edit_letter_translations.haml:4:in `__tilt_22303564'\napp/cells/location_variable/edit_letter_translations.haml:-8:in `__tilt_22303564'\napp/cells/location_variable/edit_letter_translations.haml:-10:in `__tilt_22303564'\napp/cells/location_variable_cell.rb:116:in `edit_letter_translations'\napp/cells/location_variable/edit.haml:28:in `__tilt_22303564'\napp/cells/location_variable/edit.haml:18:in `__tilt_22303564'\napp/cells/location_variable/edit.haml:-8:in `__tilt_22303564'\napp/cells/location_variable/edit.haml:-10:in `__tilt_22303564'\napp/cells/location_variable_cell.rb:20:in `edit'\napp/views/location_variables/edit.haml:12:in `_app_views_location_variables_edit_haml__1547421109874181847_9140608'\napp/controllers/location_location_variables_controller.rb:113:in `edit'\napp/controllers/location_location_variables_controller.rb:112:in `edit'\n```\n\nThe partial is defined at \"app/cells/location_variable/_translation_nested_form.haml\n. Yes I read that section, found using my nifty Ctrl-F on my browser. :)\n\nI don't want to use a global partial, I want to simply use a partial (required by cocoon) and the only info on the README is for Global Partials. I just wanted to put it in with the folder for all my cells views.\n\nI've tried a number of things now, including and not including the .haml extension. Including and not including the `_` at the front of the partial. Ensuring the name of my partial is correct. Taking the partial out of the folder of my cells views and putting it in my normal view paths and trying to access it like in the Readme. Removing the `require 'partial'` line.\n\nappending to the view paths using\n\n`self.view_paths << 'app/views/location_variables'`\n\nthis seems to have a bug\nsee how my appended view path has had the name of the cell added to it: `\"app/views/location_variables/location_variable\"`\n\n`ActionView::Template::Error (Template missing: view:`__tilt_1144364.haml`prefixes: [\"app/cells/location_variable\", \"app/views/location_variables/location_variable\"]):`\n\nBut even if I account for this seeming bug (by appending 'app/views/') and putting my partial in a folder called 'location_variable'\n\nI always get this error about not being able to find '__tilt_.........'\n\nI'm stumped.. \n. __tilt_1471860.haml, always has a different number on the end, before the  haml extension\n. Thanks for the chat @apotonick .\n\nIt seems that the Readme is no longer true for cells 4.0.2. Although I did not need to render a Global partial in the end, I still experimented with this on my way and found a) `include Partial` raises an error and should be require 'cells/partial', but then from there I could not render a global partial anyway.\n\nThe solution for me to render a partial defined in my cells/location_variable folder was as you suggested `= render view: '_translation_nested_form', locals:{ f: trans_form, disable: false }`\n\nso shall I investigate and be sure that the README rendering partials is incorrect, and then add a pull request for the readme?\n\nAlso is it an error with the view_paths as suggested above? i.e. no matter what view path is put in, the name of the cell is always added at the end of the path. Or is this intended?\n\nAnd do you think it would be helpful for me to add something to the readme about rendering partials in general, in the \"please do not read section\"?\n\nOne more thing, The biggest issue I faced was making use of Cocoon's link_to_add_association method which asks for the name of a partial. With @apotonick's encouragement I managed to do a monkey patch for Cocoon so that it uses the correct render call. Here is my monkey patch for anyone else in this situation:\n\nfrom within the cell, when you call link_to_add_association, pass in a render option `cells_compatible:true` like this:\n\n```\nlink_to_add_association \"add\", @form, :association_name,\n                          :partial => \"_partial_name\", render_options:{cells_compatible:true}\n```\n\n(note the leading underscore required in the partial_name)\n\nin some model, or however you like to do monkey patches, (I use a class_extensions.rb file in my models directory) add this code:\n\n```\nrequire 'cocoon/view_helpers'\n# overwrite the cocoon method which renders the partial for adding associations in the link_to_add_association helper method\nmodule Cocoon\n  module ViewHelpers\n    def render_association(association, f, new_object, form_name, render_options={}, custom_partial=nil)\n      partial = get_partial_path(custom_partial, association)\n      locals =  render_options.delete(:locals) || {}\n      cells_compatible = render_options.delete(:cells_compatible)\n      method_name = f.respond_to?(:semantic_fields_for) ? :semantic_fields_for : (f.respond_to?(:simple_fields_for) ? :simple_fields_for : :fields_for)\n      f.send(method_name, association, new_object, {:child_index => \"new_#{association}\"}.merge(render_options)) do |builder|\n        partial_options = {form_name.to_sym => builder, :dynamic => true}.merge(locals)\n        if cells_compatible\n          render view: partial, locals: partial_options\n        else\n          render(partial, partial_options)\n        end\n      end\n    end\n  end\nend\n```\n\nThis simply overwrites the same method in Coccon which looks like this\n\n```\ndef render_association(association, f, new_object, form_name, render_options={}, custom_partial=nil)\n  partial = get_partial_path(custom_partial, association)\n  locals =  render_options.delete(:locals) || {}\n  method_name = f.respond_to?(:semantic_fields_for) ? :semantic_fields_for : (f.respond_to?(:simple_fields_for) ? :simple_fields_for : :fields_for)\n  f.send(method_name, association, new_object, {:child_index => \"new_#{association}\"}.merge(render_options)) do |builder|\n    partial_options = {form_name.to_sym => builder, :dynamic => true}.merge(locals)\n    render(partial, partial_options)\n  end\nend\n```\n\nI will raise an issue with Cocoon now to see if they think it is worth me making a pull request.\n. https://github.com/nathanvda/cocoon/issues/315\n. Ahh ok, so Cocoon's render call is hitting Cells render method, rather than the global render helper. So If I adjust my Cells render method and detect when the render call is meant for the global render, and massage the parameters there before handing them onto super that would be cleaner than introducing a conditional statement into @nathanvda 's Cocoon's internals. It would mean my overwriting render method in my cell would have to be able to accept both combinations of paramaters, i.e\n\nfrom Cells::ViewModel the render method params = `def render(options={})`\nfrom ActionView::Helpers::RenderingHelper `def render(options = {}, locals = {}, &block)`\n\nI'll give it a whirl, Ta\n. :)\n. Ok, here is my 'cleaner' solution as suggested by @apotonick(though not condoned :) ) . Brace yourselves, it may be cringeworthy, but for me it works pretty well so far and has helped me to understand better the issue that @apotonick has been trying to teach me.. i.e. there are problems when a gem makes use of a global rails helper such as `render`. I wonder what the alternative is then for such gems, should they explicitly include the helpers they need rather than rely on them being in the global set of helpers? I think I need to read that Trailblazer book.\n\nAnyway here is the code I added to my Cell, I'll probably extract it into a module and include it when I need to use it in other cells:\n\n```\n# Need to overwrite the cells render so that we can use Cocoon in the edit_letter_translations view\n# Cocoon assumes it is using ActionView::Helpers::RenderingHelper render method which accepts these parameters: def render(options = {}, locals = {}, &block)\n# but when rendered in the context of a cell, it hits the Cells::ViewModel render method which accepts different params = def render(options={})\n# so accept all params and massage these before sending them onto the Cells::ViewModel render with 'super'\ndef render(options = nil, locals = nil, &block)\n  #CASE 1 Cell calls render without arguments\n  if options.nil?\n    super(state_for_implicit_render(caller))\n\n  #Case 2 Cell calls render with either the name of a view or a single optios Hash as its paramater\n  elsif options.present? && locals.nil?\n    super options\n\n  #Case 3 render is called by Cocoon, intended for ActionView::Helpers::RenderingHelper so massage params such that Cells render can handle it\n  elsif options.is_a?(String) && locals.is_a?(Hash)\n    if block_given?\n      raise \"sorry don't know how to handle block in this custom override - ryan - see app/cells/location_variable_cell.rb:32\"\n    end\n    super({view: options, locals: locals})\n  else\n    raise \"Woops, this overriding render method written so that we could make use of Cocoon in Cells did not handle a render call properly, please see app/cells/location_variable_cell.rb\"\n  end\nend\n```\n\nThis covers all the cases I need to use render for, but I won't be surprised if we hit the \"Woops\" error one day.\n. I had to do that because 'caller' in the context of Cells::ViewModel render is no longer my cells method, e.g. edit, when render hits my overwriting method first.\n. Yeah, nice one! Rails developers start to expect magic I guess.\n. :+1:  \n. @Startouf sorry I did not see your post til now. I came across the same error re `render_state.erb` when using the monkey patch I added here. I solved it by never using simply `render` but always specifying the name of the template. e.g. `render \"show\"`, (i.e. the `if options.nil?` block in my monkey patch is now broken so I avoid it). I have not tried the Cocoon::Cells Helper yet but will do soon as I'm keen to remove the monkey patch from my code. How did you go with the Helper, did it work for you?\n. ",
    "ethanyoung": "`#tag_options` does not help. The related code is already included in cell-slim gem anyway... \n\nHowever, this fixed my issue:\n\n``` rb\nCGI::escapeHTML @feature.view_model.to_json\n```\n. `::ERB::Util.html_escape` can also do it. \n\nYeah,  I have moved the code to an instance method. Thank you for the advice. :smiley: \n. I have to add the line to my cell:\n\n``` rb\ninclude ::ERB::Util\n```\n\nin order to use `#html_escape`.\n\nI do not use `#html_escape` very often. This is my first time using `#html_escape` to manually escape the JSON string. Previously it was just escaped automatically...\n\nBy the way, do you know the reason why `#tag_options` does not work here? My code was like this:\n\n``` rb\nclass FeatureCell < Cell::ViewModel\n  #...\n\n  def tag_options(options, escape = true)\n    super(options, true)\n  end\n\n  def data_feature\n    # If not using ::ERB::Util.html_escape then JSON string is not escaped.\n    @feature.view_model.to_json\n  end\nend\n\n```\n. `#tag_options` does not help. The related code is already included in cell-slim gem anyway... \n\nHowever, this fixed my issue:\n\n``` rb\nCGI::escapeHTML @feature.view_model.to_json\n```\n. `::ERB::Util.html_escape` can also do it. \n\nYeah,  I have moved the code to an instance method. Thank you for the advice. :smiley: \n. I have to add the line to my cell:\n\n``` rb\ninclude ::ERB::Util\n```\n\nin order to use `#html_escape`.\n\nI do not use `#html_escape` very often. This is my first time using `#html_escape` to manually escape the JSON string. Previously it was just escaped automatically...\n\nBy the way, do you know the reason why `#tag_options` does not work here? My code was like this:\n\n``` rb\nclass FeatureCell < Cell::ViewModel\n  #...\n\n  def tag_options(options, escape = true)\n    super(options, true)\n  end\n\n  def data_feature\n    # If not using ::ERB::Util.html_escape then JSON string is not escaped.\n    @feature.view_model.to_json\n  end\nend\n\n```\n. ",
    "nathanvda": "How can cocoon see if we are being rendered in a cell? The suggested change is to give a parameter to `link_to_add_association` and change the render call in that case, which seems ok to me. I definitely love to support cells, but I also want to stay backward compatible :wink: :stuck_out_tongue_winking_eye: \n. Ok, now you got me confused :confused: :smile: cocoon just renders a partial to be inserted later inside a form, and cocoon does not know how this form is rendered. So not entirely sure what you mean precisely (when you say: use cells to render its elements?).\n\nBut when writing a new form builder, based on cells, yes then it would seem more obvious, and very interesting. Completly OT: I still need to check out Reform+cocoon together :smile: \n. Ha! Ok, @ryan2johnson9 makes sense :smile: \n. How can cocoon see if we are being rendered in a cell? The suggested change is to give a parameter to `link_to_add_association` and change the render call in that case, which seems ok to me. I definitely love to support cells, but I also want to stay backward compatible :wink: :stuck_out_tongue_winking_eye: \n. Ok, now you got me confused :confused: :smile: cocoon just renders a partial to be inserted later inside a form, and cocoon does not know how this form is rendered. So not entirely sure what you mean precisely (when you say: use cells to render its elements?).\n\nBut when writing a new form builder, based on cells, yes then it would seem more obvious, and very interesting. Completly OT: I still need to check out Reform+cocoon together :smile: \n. Ha! Ok, @ryan2johnson9 makes sense :smile: \n. ",
    "phillipoertel": "@apotonick now that there's cells_rails, wouldn't it make sense to enable this (and other stuff expected in Rails context) by default there? It took me a while to figure out what I needed to do when migrating existing partials into cells; this work could be saved by future developers if they could just inherit from Cell::Rails.\n. Hi @apotonick, with cells 4.0.4 I still had to `require 'cell/translation'` in order for everything to work.\n. Fair enough! Some modules (like Escaped) don't require an explicit require though, so I'd either make it consistent  or document in each case if/what needs to be included.\n\nBtw., how stable is the TRB codebase & API right now? I took a look a few months ago, but it seemed to me there were several ways to do things (and several different documentations), while none of them was easy to get to work :-) I'd love to take another look when the time is right.\n. Alright, I'll have a look when I find the time. Kudos to your heroic efforts with this, mate!\n. Btw. one of the projects I'm in uses https://github.com/cypriss/mutations and we're looking into https://github.com/orgsync/active_interaction. They solve the encapsulation-of-application-specific-business-logic problem, as well.\n. I just realized the following: cells works fine with 4.0.7, only cells' documentation is not up to date. \n\nThe README says \"Make sure to bundle Haml 4.1: `gem \"haml\", github: \"haml/haml\", ref: \"7c7c169\"`\" Their commit `7c7c169` (2015-06-08) is older than and also contained in the 4.0.7 (`99cf4e`, 2015-08-10) release: https://github.com/haml/haml/commits/master.\n. @apotonick now that there's cells_rails, wouldn't it make sense to enable this (and other stuff expected in Rails context) by default there? It took me a while to figure out what I needed to do when migrating existing partials into cells; this work could be saved by future developers if they could just inherit from Cell::Rails.\n. Hi @apotonick, with cells 4.0.4 I still had to `require 'cell/translation'` in order for everything to work.\n. Fair enough! Some modules (like Escaped) don't require an explicit require though, so I'd either make it consistent  or document in each case if/what needs to be included.\n\nBtw., how stable is the TRB codebase & API right now? I took a look a few months ago, but it seemed to me there were several ways to do things (and several different documentations), while none of them was easy to get to work :-) I'd love to take another look when the time is right.\n. Alright, I'll have a look when I find the time. Kudos to your heroic efforts with this, mate!\n. Btw. one of the projects I'm in uses https://github.com/cypriss/mutations and we're looking into https://github.com/orgsync/active_interaction. They solve the encapsulation-of-application-specific-business-logic problem, as well.\n. I just realized the following: cells works fine with 4.0.7, only cells' documentation is not up to date. \n\nThe README says \"Make sure to bundle Haml 4.1: `gem \"haml\", github: \"haml/haml\", ref: \"7c7c169\"`\" Their commit `7c7c169` (2015-06-08) is older than and also contained in the 4.0.7 (`99cf4e`, 2015-08-10) release: https://github.com/haml/haml/commits/master.\n. ",
    "katafrakt": "Yes, sorry for an unclear description. Yesterday was not my best day ( :beers: ) :wink:\n\nI'm doing classic \"Rails way\": a helper that renders a partial, which is used both in the cell and a regular view. So I'm also using Rails naming convention for partials. This was a subject to refactoring anyway (I know this now better than ever) but still after quick try to update cells to version 4, it failed to work even though worked before.\n\nI also remember now that I had to manually require `cell/partial` \u2013 is this intended behaviour or should it be autoloaded from `Cell::ViewModel`?\n. Yes, sorry for an unclear description. Yesterday was not my best day ( :beers: ) :wink:\n\nI'm doing classic \"Rails way\": a helper that renders a partial, which is used both in the cell and a regular view. So I'm also using Rails naming convention for partials. This was a subject to refactoring anyway (I know this now better than ever) but still after quick try to update cells to version 4, it failed to work even though worked before.\n\nI also remember now that I had to manually require `cell/partial` \u2013 is this intended behaviour or should it be autoloaded from `Cell::ViewModel`?\n. ",
    "johnlane": "I'll have a look at writing a test.\n\nRe the upward traversal... you would expect so wouldn't you?\n\nFrom what I can see the `t` helper looks at `@vrtual_path` as given. If the lookup fails then that's it.\n\nHere's a snippt from `actionview-4.2.4/lib/action_view/helpers/translation_helper.rb`:\n\n``` ruby\n        def scope_key_by_partial(key)\n          if key.to_s.first == \".\"\n            if @virtual_path\n              @virtual_path.gsub(%r{/_?}, \".\") + key.to_s\n            else\n              raise \"Cannot use t(#{key.inspect}) shortcut because path is not available\"\n            end   \n          else\n            key \n          end \n        end\n```\n. Sent PR https://github.com/apotonick/cells/pull/320 with tests\n. Yes I think the cell path by default and being able to customise it makes the most sense.\n. So is the class `class_eval` approach an option 4 to the above list or does 3 (`ApplicationCell`) supercede that?\n\nI've tried both methods and both work. \n\nwhich one to choose - is it just a matter of personal taste ?\n. I'll have a look at writing a test.\n\nRe the upward traversal... you would expect so wouldn't you?\n\nFrom what I can see the `t` helper looks at `@vrtual_path` as given. If the lookup fails then that's it.\n\nHere's a snippt from `actionview-4.2.4/lib/action_view/helpers/translation_helper.rb`:\n\n``` ruby\n        def scope_key_by_partial(key)\n          if key.to_s.first == \".\"\n            if @virtual_path\n              @virtual_path.gsub(%r{/_?}, \".\") + key.to_s\n            else\n              raise \"Cannot use t(#{key.inspect}) shortcut because path is not available\"\n            end   \n          else\n            key \n          end \n        end\n```\n. Sent PR https://github.com/apotonick/cells/pull/320 with tests\n. Yes I think the cell path by default and being able to customise it makes the most sense.\n. So is the class `class_eval` approach an option 4 to the above list or does 3 (`ApplicationCell`) supercede that?\n\nI've tried both methods and both work. \n\nwhich one to choose - is it just a matter of personal taste ?\n. ",
    "smathy": "I definitely prefer it being under a common root like `cell` or `cells`, but why not just make it configurable:\n\n``` ruby\nCell::Translation.config.root = \"my_stuff\"\n```\n\nYou could then make it an empty string to use the current behavior of no root.\n. Sorry, I wasn't clear. I wasn't saying that you _had to_ configure it, just that you should allow it so that people could override the default if they wanted. Then the discussion becomes less critical, just pick whatever you want, and people are always free to override it if they want.\n. Sure, the method method is also fine :)\n\nI think `cell` or `cells` would be perfect as a top level, and as you have it from there.\n. How about a cascading fallback, looks at `cells` root, falls back to a global root.\n. Happy to add it, but let me explain my thoughts first and see if they change your thinking.\n\nFirst that there's already a difference in the APIs between `cell` and `concept`. Also `concept` already has the newer, less magical API so making it even less magical by allowing the actual class constant seemed much more fitting for `concept` than `cell`. Further to that `cell`'s magical API of adding the `\"_cell\"` suffix would mean that `cell \"foo/bar\"`would have to become `cell Foo::BarCell` which is internally inconsistent for `cell`'s own API.\n. Ok, so I refactored slightly to take out the duplicate code in both classes, so only the `full_cell_name` method is implemented in both classes, the `camelize.constantize` is only in the base class. I also renamed the `name` parameter to `name_or_class` where appropriate.\n. Yeah, close/open is the only way I can trigger a new Travis run for those occasional failures. Using that `@response.body.must_equal` is a bad idea without a `describe` context.  I'll send a PR to fix that too :)\n. Ok, so fixed that test failure in #338, could merge that to master and rebase this to get past those annoying travis false negatives.\n. :shipit: baby!  Do you merge stuff @timoschilling - or is that only @apotonick ?\n. :+1: \n. Bump, how about this @apotonick ?\n. Did I miss some simpler way to do that?\n. This failure is fixed by #338 \n. Oh right, I didn't realize it was so different for the webhooks.  We can configure that though. Something like this:\n\n``` yaml\n  on_success: change\n  on_failure: always\n  on_start: never\n```\n\nWill notify of all failures, of first success after failure.\n\nNB, what you merged already had [the webhook placeholder in the `.travis.yml`](https://github.com/apotonick/cells/blob/master/.travis.yml#L20-L22) (although not doing any damage, it'll probably be an error inside Travis somewhere).\n. I definitely prefer it being under a common root like `cell` or `cells`, but why not just make it configurable:\n\n``` ruby\nCell::Translation.config.root = \"my_stuff\"\n```\n\nYou could then make it an empty string to use the current behavior of no root.\n. Sorry, I wasn't clear. I wasn't saying that you _had to_ configure it, just that you should allow it so that people could override the default if they wanted. Then the discussion becomes less critical, just pick whatever you want, and people are always free to override it if they want.\n. Sure, the method method is also fine :)\n\nI think `cell` or `cells` would be perfect as a top level, and as you have it from there.\n. How about a cascading fallback, looks at `cells` root, falls back to a global root.\n. Happy to add it, but let me explain my thoughts first and see if they change your thinking.\n\nFirst that there's already a difference in the APIs between `cell` and `concept`. Also `concept` already has the newer, less magical API so making it even less magical by allowing the actual class constant seemed much more fitting for `concept` than `cell`. Further to that `cell`'s magical API of adding the `\"_cell\"` suffix would mean that `cell \"foo/bar\"`would have to become `cell Foo::BarCell` which is internally inconsistent for `cell`'s own API.\n. Ok, so I refactored slightly to take out the duplicate code in both classes, so only the `full_cell_name` method is implemented in both classes, the `camelize.constantize` is only in the base class. I also renamed the `name` parameter to `name_or_class` where appropriate.\n. Yeah, close/open is the only way I can trigger a new Travis run for those occasional failures. Using that `@response.body.must_equal` is a bad idea without a `describe` context.  I'll send a PR to fix that too :)\n. Ok, so fixed that test failure in #338, could merge that to master and rebase this to get past those annoying travis false negatives.\n. :shipit: baby!  Do you merge stuff @timoschilling - or is that only @apotonick ?\n. :+1: \n. Bump, how about this @apotonick ?\n. Did I miss some simpler way to do that?\n. This failure is fixed by #338 \n. Oh right, I didn't realize it was so different for the webhooks.  We can configure that though. Something like this:\n\n``` yaml\n  on_success: change\n  on_failure: always\n  on_start: never\n```\n\nWill notify of all failures, of first success after failure.\n\nNB, what you merged already had [the webhook placeholder in the `.travis.yml`](https://github.com/apotonick/cells/blob/master/.travis.yml#L20-L22) (although not doing any damage, it'll probably be an error inside Travis somewhere).\n. ",
    "AndrewSwerlick": "I'd also add, that the rest of the library should play nicely if I override `ViewModel::translation_path` to return nil. We have users manage alot of our translations and try to make the keys make sense from a business perspective. Having something like \"cells\" at the root level would not be good for that scenario.\n. I think I misunderstood, I thought this was a global config value for a default root. I understand now that this is a per cell path, and by overriding we'd be setting the path for a specific cell.\n\nIn general, I'd push for not including any default root like \"cells\", but that's because I'm generally annoyed by every library insisting it have it's own translation namespace and not making it configurable. I guess it's to prevent collisions, but it makes translation files feel very clunky, and makes it hard to remember exactly where a key lives. Particularly for using facing keys, I generally end up avoiding the shortcut version anyways, and explicitly defining the key so I can have complete control\n\nIt also makes migrating to and from different frameworks a little obnoxious if you're using a non yaml backend file like the ActiveRecord backend, because now you have to write a migration that take all the keys that live under \"formtastic\" and move them to whatever. \n. That might be reasonable, though I think it would have to be implemented in such a way that `t(\".my_key\", cascade: true)` would continue to behave nicely, if you're using the `I8n::Cascade` module, which we do heavily.\n\nAs I think about this, I may not be the best person to weigh in on this, because we have a very specific translation workflow that probably doesn't represent the norm. For the most part I frequently end up having to do everything explicitly anyways, so as long as the solution doesn't prevent me from taking the wheel and doing things my way, I'll be happy.\n. I think it's reasonable as is. If you are going to have trailblazer prepend `concept` (which I'm okay with, that one I can explain to users) then I feel like `Cell::Concept` should mimic that behavior. \n. The only real reason I see for it is to prevent translation conflicts, but that seems like an edge case to me.\n. I'd also add, that the rest of the library should play nicely if I override `ViewModel::translation_path` to return nil. We have users manage alot of our translations and try to make the keys make sense from a business perspective. Having something like \"cells\" at the root level would not be good for that scenario.\n. I think I misunderstood, I thought this was a global config value for a default root. I understand now that this is a per cell path, and by overriding we'd be setting the path for a specific cell.\n\nIn general, I'd push for not including any default root like \"cells\", but that's because I'm generally annoyed by every library insisting it have it's own translation namespace and not making it configurable. I guess it's to prevent collisions, but it makes translation files feel very clunky, and makes it hard to remember exactly where a key lives. Particularly for using facing keys, I generally end up avoiding the shortcut version anyways, and explicitly defining the key so I can have complete control\n\nIt also makes migrating to and from different frameworks a little obnoxious if you're using a non yaml backend file like the ActiveRecord backend, because now you have to write a migration that take all the keys that live under \"formtastic\" and move them to whatever. \n. That might be reasonable, though I think it would have to be implemented in such a way that `t(\".my_key\", cascade: true)` would continue to behave nicely, if you're using the `I8n::Cascade` module, which we do heavily.\n\nAs I think about this, I may not be the best person to weigh in on this, because we have a very specific translation workflow that probably doesn't represent the norm. For the most part I frequently end up having to do everything explicitly anyways, so as long as the solution doesn't prevent me from taking the wheel and doing things my way, I'll be happy.\n. I think it's reasonable as is. If you are going to have trailblazer prepend `concept` (which I'm okay with, that one I can explain to users) then I feel like `Cell::Concept` should mimic that behavior. \n. The only real reason I see for it is to prevent translation conflicts, but that seems like an edge case to me.\n. ",
    "agm1988": "same issue using trailblazer\nadded rspec-cells gem\n\n/gems/bundler-1.12.5/lib/bundler/runtime.rb:89:in `rescue in block (2 levels) in require': There was an error while trying to load the gem 'rspec-cells'. (Bundler::GemRequireError)\nGem Load Error is: uninitialized constant Cell::Testing::Uber\n. @apotonick https://github.com/apotonick/rspec-cells/issues/84\nalso opened here\n. same issue using trailblazer\nadded rspec-cells gem\n\n/gems/bundler-1.12.5/lib/bundler/runtime.rb:89:in `rescue in block (2 levels) in require': There was an error while trying to load the gem 'rspec-cells'. (Bundler::GemRequireError)\nGem Load Error is: uninitialized constant Cell::Testing::Uber\n. @apotonick https://github.com/apotonick/rspec-cells/issues/84\nalso opened here\n. ",
    "adrianpacala": ":+1:\n. :+1:\n. ",
    "Tab10id": "app/cells/type_icon.rb - module TypeIcon\napp/cells/cell/type_icon.rb - module Cell::TypeIcon\nDirectory names should correspond to namespaces\n. app/cells/type_icon.rb - module TypeIcon\napp/cells/cell/type_icon.rb - module Cell::TypeIcon\nDirectory names should correspond to namespaces\n. ",
    "sdesbure": "Hello,\nthanks for the answer! I tried with `app/cell` but wasn't working either so I thought it was a different story!\nthanks guys\n. Hello,\nthanks for the answer! I tried with `app/cell` but wasn't working either so I thought it was a different story!\nthanks guys\n. ",
    "jlogsdon": "I think its reasonable to assume, as a user of this library, that `controller` in tests would be cached. This change presents issues across multiple tests, as you've said, but I think it would be beneficial to look at how rspec-rails et. all does it (no need to manually `let` it for caching).\n. Caching between tests would be a problem, yeah.\n. I'm a jerk and didn't notice https://github.com/apotonick/cells/pull/362 when looking at the issue directly... feel free to ignore this one.\n. I think its reasonable to assume, as a user of this library, that `controller` in tests would be cached. This change presents issues across multiple tests, as you've said, but I think it would be beneficial to look at how rspec-rails et. all does it (no need to manually `let` it for caching).\n. Caching between tests would be a problem, yeah.\n. I'm a jerk and didn't notice https://github.com/apotonick/cells/pull/362 when looking at the issue directly... feel free to ignore this one.\n. ",
    "tycooon": "I don't understand how this could leave the dirty controller for the next test, I just added this code to my specs:\n\n``` ruby\nbefore { 2.times { p controller.object_id } }\n```\n\nAnd what I see is in each example I see 2 identical `object_id`'s, but they are different between different examples. Without this patch, all `object_id`'s are different.\n. I'm actually using rspec, and yes it cleans up instance variables as far as I know. Talking about using `let`, how should I do this? Like this or smth simpler?\n\n``` ruby\nlet(:controller) { controller_for(self.class.controller_class) }\n```\n. I will try it tomorrow when I get to my work macbook, too lazy to bring it home everyday :)\n. So I approve that putting this code in `spec/support` works:\n\n``` ruby\nshared_context(type: :cell) do\n  let(:controller) { controller_for(self.class.controller_class) }\nend\n```\n\nWould be nice if it was somehow built in into `Cell::Testing`, though.\n. I investigated `Cell::Testing` code a bit, and found out, that capybara feature relies on `ViewModel#to_s` calling `call` method, which is not true when rendering collections, since `render_collection` method always returns `ActiveSupport::SafeBuffer` and not a cell instance.\n. I don't understand how this could leave the dirty controller for the next test, I just added this code to my specs:\n\n``` ruby\nbefore { 2.times { p controller.object_id } }\n```\n\nAnd what I see is in each example I see 2 identical `object_id`'s, but they are different between different examples. Without this patch, all `object_id`'s are different.\n. I'm actually using rspec, and yes it cleans up instance variables as far as I know. Talking about using `let`, how should I do this? Like this or smth simpler?\n\n``` ruby\nlet(:controller) { controller_for(self.class.controller_class) }\n```\n. I will try it tomorrow when I get to my work macbook, too lazy to bring it home everyday :)\n. So I approve that putting this code in `spec/support` works:\n\n``` ruby\nshared_context(type: :cell) do\n  let(:controller) { controller_for(self.class.controller_class) }\nend\n```\n\nWould be nice if it was somehow built in into `Cell::Testing`, though.\n. I investigated `Cell::Testing` code a bit, and found out, that capybara feature relies on `ViewModel#to_s` calling `call` method, which is not true when rendering collections, since `render_collection` method always returns `ActiveSupport::SafeBuffer` and not a cell instance.\n. ",
    "zlobz": "What about method, that escape methods explicitly?\n\n```\nescaped :property1, :property3\n```\n. What about method, that escape methods explicitly?\n\n```\nescaped :property1, :property3\n```\n. ",
    "amatsuda": ":beers: :beers: :beers: =\u035f\u035f\u035e\u035e)\n. :beers: :beers: :beers: =\u035f\u035f\u035e\u035e)\n. ",
    "Kledal": "@timoschilling Sorry i missed that :smile: \n. @apotonick Please review whenever you have the time :smile: \n. Could you point me to where `cells-rails` is located. I've tried to look for it at Trailblazer and in your gems.  But I'm properly overlooking something.\n. Lets do it! I'm ready :smile: \n. @timoschilling Sorry i missed that :smile: \n. @apotonick Please review whenever you have the time :smile: \n. Could you point me to where `cells-rails` is located. I've tried to look for it at Trailblazer and in your gems.  But I'm properly overlooking something.\n. Lets do it! I'm ready :smile: \n. ",
    "byrnejb": "Is there something wrong with my TBR setup or should the concept\ngenerator be altered?\n\nOn Thu, February 11, 2016 00:30, Nick Sutterer wrote:\n\n> Answer on SO.\n> \n> You have to say `::Cell::Concept` not `Cell::Concept`, Ruby will look\n> it up in the wrong namespace otherwise.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/374#issuecomment-182719741\n\n## \n\n**\\*          e-Mail is NOT a SECURE channel          ***\n        Do NOT transmit sensitive data via e-Mail\nJames B. Byrne                mailto:ByrneJB@Harte-Lyne.ca\nHarte & Lyne Limited          http://www.harte-lyne.ca\n9 Brockley Drive              vox: +1 905 561 1241\nHamilton, Ontario             fax: +1 905 561 0757\nCanada  L8E 3C3\n. On Thu, February 11, 2016 00:30, Nick Sutterer wrote:\n\n> Answer on SO.\n> \n> You have to say `::Cell::Concept` not `Cell::Concept`, Ruby will look\n> it up in the wrong namespace otherwise.\n> \n> ---\n\n```\nclass ARInvoice::Cell < ::Cell::Concept\n  def show\n    render\n  end\nend\n```\n\n```\nrails c\n/home/byrnejb/Projects/Software/theHeart/code/proforma/app/concepts\n/ar_invoice/cell.rb:1:in `<top (required)>': uninitialized constant\n Cell::Concept (NameError)\n```\n\nThis by itself does not seem to work.  Or have I misunderstood where\n::Cell:Concept is supposed to be used?\n. I never ran into this problem before but evidently one must explicitly name a gem in ones `Gemfile` in order for it to load into the application.  I had listed `cells-hamlit` in the `Gemfile` without naming `cells` itself. `Cells-hamlit` brings the `cells` gem into the bundled gem list as a dependency but it does not cause it to be loaded on application startup.  And that caused the problem.  Once `cells` was explicitly named then the original formulation of `class ARInvoice::Cell < Cell::Concept` worked as expected.\n. Sorry about that. I initially took a different interpretation of the word _require_ as inline code formatting does not show up well on my system.  I have not previously run into a situation where one gem has a dependency upon another and yet does not `require` it.  \n. I am not really in a position to suggest, much less recommend, any particular approach.  I am just beginning to work with _Cells_ and my experience with _Trailblazer_ is not much greater.  My comment referred to the fact that I had not encountered this situation before and I was surprised by it.  On the other hand, this situation did forcibly impress on me one aspect of _Bundler_'s behaviour that I had not given much thought to.\n\nHowever, on further reflection, I think that the _principle of least surprise_ should apply here and that gems should in general `require()` their dependencies; unless there is a very good technical reason not to.  I do not know what common practice is but I tend to only explicitly list the minimum number of _Gems_ in my `Gemfile` and allow the dependency tree to bring in everything else.  This assists me in trimming back obsolete `gem` references to the bare minimum.  Which, over time, have proven an amazingly large number in several projects.\n\nAnyway, regardless of what you decide to do, thank you for your patience and help.  I am now into yet another `Cells` set-up issue which will no-doubt be resolved by re-reading the documentation or further begging for help in various venues.\n\nBy the way, forgive me if I appear dense, but is it your remark meant to imply that I should do as you suggest and submit the changes as a pull request?  I have no objection to doing so.  I just want to make the situation clear to myself and assume nothing.\n. On Mon, February 29, 2016 06:34, Nick Sutterer wrote:\n\n> Yeah, I agree with you that we should require cells as a dependency,\n> and if you want, you can PR that on all four gems (unless it's already\n> done in the particular gem). It would be of great help for us! :heart:\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/374#issuecomment-190167115\n\nI will try and get to it this week.  Things are a little hectic atm.\n\nRegards,\n\n## \n\n**\\*          e-Mail is NOT a SECURE channel          ***\n        Do NOT transmit sensitive data via e-Mail\nJames B. Byrne                mailto:ByrneJB@Harte-Lyne.ca\nHarte & Lyne Limited          http://www.harte-lyne.ca\n9 Brockley Drive              vox: +1 905 561 1241\nHamilton, Ontario             fax: +1 905 561 0757\nCanada  L8E 3C3\n. Is there something wrong with my TBR setup or should the concept\ngenerator be altered?\n\nOn Thu, February 11, 2016 00:30, Nick Sutterer wrote:\n\n> Answer on SO.\n> \n> You have to say `::Cell::Concept` not `Cell::Concept`, Ruby will look\n> it up in the wrong namespace otherwise.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/374#issuecomment-182719741\n\n## \n\n**\\*          e-Mail is NOT a SECURE channel          ***\n        Do NOT transmit sensitive data via e-Mail\nJames B. Byrne                mailto:ByrneJB@Harte-Lyne.ca\nHarte & Lyne Limited          http://www.harte-lyne.ca\n9 Brockley Drive              vox: +1 905 561 1241\nHamilton, Ontario             fax: +1 905 561 0757\nCanada  L8E 3C3\n. On Thu, February 11, 2016 00:30, Nick Sutterer wrote:\n\n> Answer on SO.\n> \n> You have to say `::Cell::Concept` not `Cell::Concept`, Ruby will look\n> it up in the wrong namespace otherwise.\n> \n> ---\n\n```\nclass ARInvoice::Cell < ::Cell::Concept\n  def show\n    render\n  end\nend\n```\n\n```\nrails c\n/home/byrnejb/Projects/Software/theHeart/code/proforma/app/concepts\n/ar_invoice/cell.rb:1:in `<top (required)>': uninitialized constant\n Cell::Concept (NameError)\n```\n\nThis by itself does not seem to work.  Or have I misunderstood where\n::Cell:Concept is supposed to be used?\n. I never ran into this problem before but evidently one must explicitly name a gem in ones `Gemfile` in order for it to load into the application.  I had listed `cells-hamlit` in the `Gemfile` without naming `cells` itself. `Cells-hamlit` brings the `cells` gem into the bundled gem list as a dependency but it does not cause it to be loaded on application startup.  And that caused the problem.  Once `cells` was explicitly named then the original formulation of `class ARInvoice::Cell < Cell::Concept` worked as expected.\n. Sorry about that. I initially took a different interpretation of the word _require_ as inline code formatting does not show up well on my system.  I have not previously run into a situation where one gem has a dependency upon another and yet does not `require` it.  \n. I am not really in a position to suggest, much less recommend, any particular approach.  I am just beginning to work with _Cells_ and my experience with _Trailblazer_ is not much greater.  My comment referred to the fact that I had not encountered this situation before and I was surprised by it.  On the other hand, this situation did forcibly impress on me one aspect of _Bundler_'s behaviour that I had not given much thought to.\n\nHowever, on further reflection, I think that the _principle of least surprise_ should apply here and that gems should in general `require()` their dependencies; unless there is a very good technical reason not to.  I do not know what common practice is but I tend to only explicitly list the minimum number of _Gems_ in my `Gemfile` and allow the dependency tree to bring in everything else.  This assists me in trimming back obsolete `gem` references to the bare minimum.  Which, over time, have proven an amazingly large number in several projects.\n\nAnyway, regardless of what you decide to do, thank you for your patience and help.  I am now into yet another `Cells` set-up issue which will no-doubt be resolved by re-reading the documentation or further begging for help in various venues.\n\nBy the way, forgive me if I appear dense, but is it your remark meant to imply that I should do as you suggest and submit the changes as a pull request?  I have no objection to doing so.  I just want to make the situation clear to myself and assume nothing.\n. On Mon, February 29, 2016 06:34, Nick Sutterer wrote:\n\n> Yeah, I agree with you that we should require cells as a dependency,\n> and if you want, you can PR that on all four gems (unless it's already\n> done in the particular gem). It would be of great help for us! :heart:\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/apotonick/cells/issues/374#issuecomment-190167115\n\nI will try and get to it this week.  Things are a little hectic atm.\n\nRegards,\n\n## \n\n**\\*          e-Mail is NOT a SECURE channel          ***\n        Do NOT transmit sensitive data via e-Mail\nJames B. Byrne                mailto:ByrneJB@Harte-Lyne.ca\nHarte & Lyne Limited          http://www.harte-lyne.ca\n9 Brockley Drive              vox: +1 905 561 1241\nHamilton, Ontario             fax: +1 905 561 0757\nCanada  L8E 3C3\n. ",
    "mstanielewicz": "The strange thing is that I cannot recreate it now, but it is not the first time I had this problem. It happened to me a few times when working with hash models, when used delegator methods like this and called them in some places.\nI'm pretty sure there wasn't any call stack with that error. It was just\n\n>  SystemStackError: stack level too deep\n\nwhich showed the line that was using the delegator method. And that's it. If I spot this problem again, I'll capture the exact message.\nThe issue is strange because when I use the exacly same thing next time, with no changes in the code it worked ok.\n. The strange thing is that I cannot recreate it now, but it is not the first time I had this problem. It happened to me a few times when working with hash models, when used delegator methods like this and called them in some places.\nI'm pretty sure there wasn't any call stack with that error. It was just\n\n>  SystemStackError: stack level too deep\n\nwhich showed the line that was using the delegator method. And that's it. If I spot this problem again, I'll capture the exact message.\nThe issue is strange because when I use the exacly same thing next time, with no changes in the code it worked ok.\n. ",
    "scarfacedeb": "Any news on this one? \u270c\ufe0f\n. Any news on this one? \u270c\ufe0f\n. ",
    "lessless": "@apotonick it's the later, with `visit new_realty_path`\n. btw, in both `development` and `test`  environments, i.e. when called during regular navigation with a browser and when called during the `visit` helper inspired request, cell renders the same string.\nAlso template engine doesn't matter - it's the same for `erb` and `slim`.\n\n```\n\"<form class=\\\"simple_form large-9 larger-centered medium-10 medium-centered small-12 columns\\\" id=\\\"new_realty\\\" action=\\\"/manage/realties\\\" accept-charset=\\\"UTF-8\\\" method=\\\"post\\\"><input name=\\\"utf8\\\" type=\\\"hidden\\\" value=\\\"&#x2713;\\\" />\\n  \\n\\n  <div class=\\\"form-section small-12 colunms\\\">\\n    <div class=\\\"row\\\">\\n      \\n        <div class=\\\"input hidden realty_listing_deal\\\"><input value=\\\"rent\\\" class=\\\"hidden\\\" type=\\\"hidden\\\" name=\\\"realty[listing_attributes][deal]\\\" id=\\\"realty_listing_attributes_deal\\\" /></div>\\n        <div class=\\\"input string required realty_listing_price medium-6 small-12 columns\\\"><label class=\\\"string required\\\" for=\\\"realty_listing_attributes_price\\\">Price <abbr title=\\\"required\\\">*</abbr></label><input class=\\\"string required\\\" required=\\\"required\\\" aria-required=\\\"true\\\" placeholder=\\\"Price\\\" type=\\\"text\\\" name=\\\"realty[listing_attributes][price]\\\" id=\\\"realty_listing_attributes_price\\\" /></div>\\n</div></div>\\n</form>\"\n```\n\n**update:**\neventually, marking string as html safe helped to put tags on screen\n\n`\n= concept('realty/cell/create', @form).to_s.html_safe\n`\n. @apotonick it's the later, with `visit new_realty_path`\n. btw, in both `development` and `test`  environments, i.e. when called during regular navigation with a browser and when called during the `visit` helper inspired request, cell renders the same string.\nAlso template engine doesn't matter - it's the same for `erb` and `slim`.\n\n```\n\"<form class=\\\"simple_form large-9 larger-centered medium-10 medium-centered small-12 columns\\\" id=\\\"new_realty\\\" action=\\\"/manage/realties\\\" accept-charset=\\\"UTF-8\\\" method=\\\"post\\\"><input name=\\\"utf8\\\" type=\\\"hidden\\\" value=\\\"&#x2713;\\\" />\\n  \\n\\n  <div class=\\\"form-section small-12 colunms\\\">\\n    <div class=\\\"row\\\">\\n      \\n        <div class=\\\"input hidden realty_listing_deal\\\"><input value=\\\"rent\\\" class=\\\"hidden\\\" type=\\\"hidden\\\" name=\\\"realty[listing_attributes][deal]\\\" id=\\\"realty_listing_attributes_deal\\\" /></div>\\n        <div class=\\\"input string required realty_listing_price medium-6 small-12 columns\\\"><label class=\\\"string required\\\" for=\\\"realty_listing_attributes_price\\\">Price <abbr title=\\\"required\\\">*</abbr></label><input class=\\\"string required\\\" required=\\\"required\\\" aria-required=\\\"true\\\" placeholder=\\\"Price\\\" type=\\\"text\\\" name=\\\"realty[listing_attributes][price]\\\" id=\\\"realty_listing_attributes_price\\\" /></div>\\n</div></div>\\n</form>\"\n```\n\n**update:**\neventually, marking string as html safe helped to put tags on screen\n\n`\n= concept('realty/cell/create', @form).to_s.html_safe\n`\n. ",
    "chrisyeung1121": "same issue here.\n. I tried using `:: Rails.env.development?`\nIt also results in `NoMethodError: undefined method 'all_subclasses' for #<ActiveSupport::SafeBuffer:0x007f846c266360>` \n. I tried that as well. It all result in the same error :(\n\nOn May 26 2016, at 11:37 pm, Sam Stickland &lt;notifications@github.com&gt;\nwrote:  \n\n> Sorry, I put a space into that by mistake. It should had been:\n> \n> ::Rails.env.development?\n> \n> \u2014  \n> You are receiving this because you authored the thread.  \n> Reply to this email directly or [view it on GitHub](https://github.com/apotoni\n> ck/cells/issues/407#issuecomment-221908188)![](https://github.com/notification\n> s/beacon/ADU7R4oH5f2zzkf5VMtaqnF5XWan-Gk6ks5qFb5AgaJpZM4Inogy.gif)\n. I am calling it from spec/cell/. Is it not included in test ?\n\n> Sam Stickland notifications@github.com \u65bc 2016\u5e745\u670827\u65e5 \u4e0a\u534812:19 \u5beb\u9053\uff1a\n> \n> Wait, I didn't read your error message properly before.. Where are you calling all_subclasses from?\n> \n> The ::Rails syntax is definitely correct, I'm using that in my own project.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n. If I just run `::Rails::env` in console it works fine. If I run it from `bundle exec spec` It just gives me the same error. \n\n``` ruby\n\nFailures:\n\n  1) PromotionRuleCell\n     Failure/Error: it { expect(cell(:promotion_rule).(:selector).all_subclasses).to eq(4) }\n\n     NoMethodError:\n       undefined method `all_subclasses' for #<ActiveSupport::SafeBuffer:0x007fc63be6f8a8>\n     # ./spec/cells/promotion_rule_cell_spec.rb:6:in `block (2 levels) in <top (required)>'\n\nFinished in 0.3323 seconds (files took 6.01 seconds to load)\n1 example, 1 failure\n\nFailed examples:\n\nrspec ./spec/cells/promotion_rule_cell_spec.rb:6 # PromotionRuleCell\n\n```\n\nThis is my spec file if it helps\n\n```\nrequire 'rails_helper'\n\nRSpec.describe PromotionRuleCell, type: :cell do\n    subject { cell(:promotion_rule).(:selector) }\n\n    it { expect(cell(:promotion_rule).(:selector).all_subclasses).to eq(4) }\nend\n\n```\n. same issue here.\n. I tried using `:: Rails.env.development?`\nIt also results in `NoMethodError: undefined method 'all_subclasses' for #<ActiveSupport::SafeBuffer:0x007f846c266360>` \n. I tried that as well. It all result in the same error :(\n\nOn May 26 2016, at 11:37 pm, Sam Stickland &lt;notifications@github.com&gt;\nwrote:  \n\n> Sorry, I put a space into that by mistake. It should had been:\n> \n> ::Rails.env.development?\n> \n> \u2014  \n> You are receiving this because you authored the thread.  \n> Reply to this email directly or [view it on GitHub](https://github.com/apotoni\n> ck/cells/issues/407#issuecomment-221908188)![](https://github.com/notification\n> s/beacon/ADU7R4oH5f2zzkf5VMtaqnF5XWan-Gk6ks5qFb5AgaJpZM4Inogy.gif)\n. I am calling it from spec/cell/. Is it not included in test ?\n\n> Sam Stickland notifications@github.com \u65bc 2016\u5e745\u670827\u65e5 \u4e0a\u534812:19 \u5beb\u9053\uff1a\n> \n> Wait, I didn't read your error message properly before.. Where are you calling all_subclasses from?\n> \n> The ::Rails syntax is definitely correct, I'm using that in my own project.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n. If I just run `::Rails::env` in console it works fine. If I run it from `bundle exec spec` It just gives me the same error. \n\n``` ruby\n\nFailures:\n\n  1) PromotionRuleCell\n     Failure/Error: it { expect(cell(:promotion_rule).(:selector).all_subclasses).to eq(4) }\n\n     NoMethodError:\n       undefined method `all_subclasses' for #<ActiveSupport::SafeBuffer:0x007fc63be6f8a8>\n     # ./spec/cells/promotion_rule_cell_spec.rb:6:in `block (2 levels) in <top (required)>'\n\nFinished in 0.3323 seconds (files took 6.01 seconds to load)\n1 example, 1 failure\n\nFailed examples:\n\nrspec ./spec/cells/promotion_rule_cell_spec.rb:6 # PromotionRuleCell\n\n```\n\nThis is my spec file if it helps\n\n```\nrequire 'rails_helper'\n\nRSpec.describe PromotionRuleCell, type: :cell do\n    subject { cell(:promotion_rule).(:selector) }\n\n    it { expect(cell(:promotion_rule).(:selector).all_subclasses).to eq(4) }\nend\n\n```\n. ",
    "hazah": "> This should not be merged for two reasons:\n\nI'm looking for a discussion more than a merge here.\n\n> 1. You brake the core principal of Cells by exposing all helpers to the Cell.\n\nI'm not so sure that it's that clear cut -- this issue had haunted this gem ever since I can remember.\n\nI understand that Cells is built with proper encapsulation in mind. Helpers are, on the other hand, global request cross-cutting concerns & functions that extend the existing template framework. What happens now is that an enormous part of standard Rails is completely unavailable (polymorphic routes across engines). This, naturally, leads to more hacks, not clean code, which is a shame since Cells provide a lot of power except for when you work with links across an extensible (by engine plugins) web application.\n\n> Even in a Rails related Cell, the Cell should have only the needed helpers.\n\nHow do you propose to predict this case for the user without blocking them? As I have seen over the last few years, that issue has yet to have an adequate solution, meanwhile, the standard Rails request context is simply unavailable to the Cell without hacks. I maintain that helpers solve the problem of extending the capacity of the _Base_ template itself, since some application extensions do belong to the global request context.\n\nUltimately users will abuse any tool, and helpers are almost always used inappropriately. Even Cells aren't immune. But there are cases when they are the proper solution. Internalisation, formatting, & tags are prime examples of extensions that belong to all cells if the underlying framework is already making this assumption. The same goes for the current user, the permission system, and if the application makes heavy use of it, the current category (as an extreme example of specific use case). Currently Cells only allow for a push model. This will enable both push and pull content models, a principle that works well for plugin systems.\n\n>  Every Rails related code will be removed from cells and will be go into cells-rails.\n\nThat's fair. Decoupling is the name of the game. Anything rails specific can be part of its include and override the original methods instead of updating them directly.\n. @apotonick Yes, I've been following your distaste for helpers for a few years now. In general, I agree with you.\n\nI would more than love to contribute to `cells-rails` if that's the direction things are going (I didn't find the repo). \n\nAs for the `Collection` code. It was late last night and I missed taking it out of the commit. The issue I have there is that cell collections have a different interface than regular cells (ie, they render immediately, while you still have to call #call on non collection cells). That made cell ignostic code more complicated.\n. @apotonick Awesome. Forked. Hopes are high that this can be actually figured out.\n. @apotonick, Sorry to highjack this PR. This is related but not really on the same topic.\n\nAlso, sorry to beat the dead horse that is truly dead. I wanted to mention that I ended up going in a different direction, and started working on a different variation on the \"View Component\" theme using the MVP pattern instead of MVC. I assure you that I am not attempting to repeat [the architectures you've described](http://nicksda.apotomo.de/2010/11/rails-misapprehensions-what-the-fuck-is-mvp/). I don't know if that matters, but maybe you may find this approach more palatable -- its main distinction from MVC is that the entry point into these objects is the view, not the controller (which now controls only the view's presentation state and is called \"presenter\").\n\nI hope that given similarities some ideas can be exchanged. I certainly want to see a proper HMVC implementation alive and well and may tackle that as well on my own. The two patterns can work side by side.\n\nRepo is here: https://github.com/hazah/activeview\n\nThe dummy application is a small proof of concept.\n. @apotonick, yes I understand that this is a rather nuanced distinction. I will attempt to explain that this is a little more than just naming.\n\nBoth patterns have essentially the same division in responsibility, this is why it's hard to tell them apart. In essence, the main difference is the _point of entry_ & and their _modes of operation_.\n\nLets take our beloved MVC: We start at the controller and we call an _action_. This controller has the potential to have _many_ actions, each of which has the potential to direct you to one of _several_ views. So, MVC is a pattern where we have _one_ controller mapping its actions to _many_ views.\n\nNow for MVP: We start at the view and we give it _commands_. The view itself only records the parameters of the command and triggers _any number of actions_ on the presenter (what used to be the controller), which are responsible for getting the view ready for rendering. So, MVP is a pattern where we have _one_ view mapping its commands to _many_ actions.\n\nThe model layer is basically unchanged, except that since now you start from the view, the view objects themselves have an external interface that of a model (properties, callbacks, etc) -- so they can be called \"view models\" in the sense that they are modelling a view (the rendered data) through their properties. This also makes them something of a decorator, which leads to the \"Presenter\" pattern you normally hear about in Rails land where you just wrap a model and give it helper super powers.\n\n>  I'm struggling to see the difference to Cells?\n\nI think this is because Cells actually implements elements of _both_ patterns at the same time, but without any separation of each case. For instance, the Cell itself is essentially a view object, but its API would have you believe that its actually a controller. The most common case for Cells seems to be a single action controller. When that is the case, the stack resembles the MVP approach, except for the fact that you don't have a clean command interface to the resulting Cell other than \"render\". So you're stuck implementing them as a procedure in your action (state as you call them) -- this action is performing the role of a presenter, setting the Cell up for rendering. But when you implement several actions in your Cell, it ceases to look like a view object, but is now a gateway to _selecting_ one, and the Cell resembles a controller object.\n\n> The naming (to me) is completely irrelevant\n\nI'm very much the same. I hope to have illustrated the actual distinction apart from the name (which is actually more of a convenience than anything else -- presenters _are_ controllers, they are simply put to a slightly different task, which is to respond to commands on the view).\n\n> I don't even know what the official meaning for view model is haha.\n\nIt was invented by microsoft, so i wouldn't beat myself up over it ;). The technical distinction is that you have a view, a model, a view model (which is like a presenter but you execute commands on it directly instead of having the view forward them), and a binder that binds data properties from model to view for rendering and commands from view to view model for processing. \n\n> Is it only the wording in Cells that made you create this?\n\nNo, I've had this itch for years now. I have a very specific need of the implementation, and unfortunately nothing out there does it yet.\n. @apotonick If you get curious, you should now see a very clear difference between my repo and Cells. I had to figure out the interface. :beers: \n. > This should not be merged for two reasons:\n\nI'm looking for a discussion more than a merge here.\n\n> 1. You brake the core principal of Cells by exposing all helpers to the Cell.\n\nI'm not so sure that it's that clear cut -- this issue had haunted this gem ever since I can remember.\n\nI understand that Cells is built with proper encapsulation in mind. Helpers are, on the other hand, global request cross-cutting concerns & functions that extend the existing template framework. What happens now is that an enormous part of standard Rails is completely unavailable (polymorphic routes across engines). This, naturally, leads to more hacks, not clean code, which is a shame since Cells provide a lot of power except for when you work with links across an extensible (by engine plugins) web application.\n\n> Even in a Rails related Cell, the Cell should have only the needed helpers.\n\nHow do you propose to predict this case for the user without blocking them? As I have seen over the last few years, that issue has yet to have an adequate solution, meanwhile, the standard Rails request context is simply unavailable to the Cell without hacks. I maintain that helpers solve the problem of extending the capacity of the _Base_ template itself, since some application extensions do belong to the global request context.\n\nUltimately users will abuse any tool, and helpers are almost always used inappropriately. Even Cells aren't immune. But there are cases when they are the proper solution. Internalisation, formatting, & tags are prime examples of extensions that belong to all cells if the underlying framework is already making this assumption. The same goes for the current user, the permission system, and if the application makes heavy use of it, the current category (as an extreme example of specific use case). Currently Cells only allow for a push model. This will enable both push and pull content models, a principle that works well for plugin systems.\n\n>  Every Rails related code will be removed from cells and will be go into cells-rails.\n\nThat's fair. Decoupling is the name of the game. Anything rails specific can be part of its include and override the original methods instead of updating them directly.\n. @apotonick Yes, I've been following your distaste for helpers for a few years now. In general, I agree with you.\n\nI would more than love to contribute to `cells-rails` if that's the direction things are going (I didn't find the repo). \n\nAs for the `Collection` code. It was late last night and I missed taking it out of the commit. The issue I have there is that cell collections have a different interface than regular cells (ie, they render immediately, while you still have to call #call on non collection cells). That made cell ignostic code more complicated.\n. @apotonick Awesome. Forked. Hopes are high that this can be actually figured out.\n. @apotonick, Sorry to highjack this PR. This is related but not really on the same topic.\n\nAlso, sorry to beat the dead horse that is truly dead. I wanted to mention that I ended up going in a different direction, and started working on a different variation on the \"View Component\" theme using the MVP pattern instead of MVC. I assure you that I am not attempting to repeat [the architectures you've described](http://nicksda.apotomo.de/2010/11/rails-misapprehensions-what-the-fuck-is-mvp/). I don't know if that matters, but maybe you may find this approach more palatable -- its main distinction from MVC is that the entry point into these objects is the view, not the controller (which now controls only the view's presentation state and is called \"presenter\").\n\nI hope that given similarities some ideas can be exchanged. I certainly want to see a proper HMVC implementation alive and well and may tackle that as well on my own. The two patterns can work side by side.\n\nRepo is here: https://github.com/hazah/activeview\n\nThe dummy application is a small proof of concept.\n. @apotonick, yes I understand that this is a rather nuanced distinction. I will attempt to explain that this is a little more than just naming.\n\nBoth patterns have essentially the same division in responsibility, this is why it's hard to tell them apart. In essence, the main difference is the _point of entry_ & and their _modes of operation_.\n\nLets take our beloved MVC: We start at the controller and we call an _action_. This controller has the potential to have _many_ actions, each of which has the potential to direct you to one of _several_ views. So, MVC is a pattern where we have _one_ controller mapping its actions to _many_ views.\n\nNow for MVP: We start at the view and we give it _commands_. The view itself only records the parameters of the command and triggers _any number of actions_ on the presenter (what used to be the controller), which are responsible for getting the view ready for rendering. So, MVP is a pattern where we have _one_ view mapping its commands to _many_ actions.\n\nThe model layer is basically unchanged, except that since now you start from the view, the view objects themselves have an external interface that of a model (properties, callbacks, etc) -- so they can be called \"view models\" in the sense that they are modelling a view (the rendered data) through their properties. This also makes them something of a decorator, which leads to the \"Presenter\" pattern you normally hear about in Rails land where you just wrap a model and give it helper super powers.\n\n>  I'm struggling to see the difference to Cells?\n\nI think this is because Cells actually implements elements of _both_ patterns at the same time, but without any separation of each case. For instance, the Cell itself is essentially a view object, but its API would have you believe that its actually a controller. The most common case for Cells seems to be a single action controller. When that is the case, the stack resembles the MVP approach, except for the fact that you don't have a clean command interface to the resulting Cell other than \"render\". So you're stuck implementing them as a procedure in your action (state as you call them) -- this action is performing the role of a presenter, setting the Cell up for rendering. But when you implement several actions in your Cell, it ceases to look like a view object, but is now a gateway to _selecting_ one, and the Cell resembles a controller object.\n\n> The naming (to me) is completely irrelevant\n\nI'm very much the same. I hope to have illustrated the actual distinction apart from the name (which is actually more of a convenience than anything else -- presenters _are_ controllers, they are simply put to a slightly different task, which is to respond to commands on the view).\n\n> I don't even know what the official meaning for view model is haha.\n\nIt was invented by microsoft, so i wouldn't beat myself up over it ;). The technical distinction is that you have a view, a model, a view model (which is like a presenter but you execute commands on it directly instead of having the view forward them), and a binder that binds data properties from model to view for rendering and commands from view to view model for processing. \n\n> Is it only the wording in Cells that made you create this?\n\nNo, I've had this itch for years now. I have a very specific need of the implementation, and unfortunately nothing out there does it yet.\n. @apotonick If you get curious, you should now see a very clear difference between my repo and Cells. I had to figure out the interface. :beers: \n. ",
    "glapworth": "I have to change that slightly, otherwise the call to the \"thing/cell\" doesn't work correctly:\n\n`subject { Capybara.string(concept(\"thing/cell\", collection: [trb.model, rails.model], last: rails.model)) }`\n\nHowever, this code causes the following exception:\n\n```\nNoMethodError: undefined method `string' for Cell::Testing::Capybara:Module\n    test/concepts/thing/cell_test.rb:9:in `block in <class:ThingCellTest>'\n    test/concepts/thing/cell_test.rb:12:in `block in <class:ThingCellTest>'\n```\n. :+1:  @timoschilling that works, as expected.  Thanks for your help.\n. I have to change that slightly, otherwise the call to the \"thing/cell\" doesn't work correctly:\n\n`subject { Capybara.string(concept(\"thing/cell\", collection: [trb.model, rails.model], last: rails.model)) }`\n\nHowever, this code causes the following exception:\n\n```\nNoMethodError: undefined method `string' for Cell::Testing::Capybara:Module\n    test/concepts/thing/cell_test.rb:9:in `block in <class:ThingCellTest>'\n    test/concepts/thing/cell_test.rb:12:in `block in <class:ThingCellTest>'\n```\n. :+1:  @timoschilling that works, as expected.  Thanks for your help.\n. ",
    "blelump": "Hi @timoschilling !\n\nThanks for answering. Yep, my code is probably far from ideal. Could you elaborate your approach?\n. I see, thanks! Your proposal sounds better and I think it should be quite easily affordable with the current API. I am not sure yet (will try it tomorrow), but I think for now it would be enough to pass a block [here](https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L103) and fire `yield` in particular view.\n. Hi @timoschilling ,\n\nI've checked it and it works, however I am not sure this is what I'd expect. I mean with such approach you have smth like:\n\n```\n# view.erb\n  <%= yield %>\n\ndef render_to_string(options, &block)\n  # ...\n  content = render_template(template, options, &block)\n  # ...\nend\n```\n\nwhich explicitly enforce using `yield` in view, whereas this is not the intention, because I'd like to have these view components to be generic widgets and built more complex layout from them. \n\nIs it what did you mean?\n. Hi guys,\n\nI've experimented a bit more with cells rendering and it seems, at least with slim, that everything is working. Now, I'm able to do smth like:\n\n```\nrender view: :main do\n  render(view: :content) + render(view: :sidebar)\nend\n```\n\nor even\n\n```\nrender view: :main do\n  render(view: :content) + concept('smth/sidebar/cell').to_s\nend\n```\n\n![example](http://i.imgur.com/js6NxMN.png)\n\nIt works for Slim and to make it working with ERB and HAML, probably more changes are needed. Essentially I've removed buffer from `template_options_for` and passed a block [here](https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L103). If working with pure Tilt, it plays really smoothly.\n. Hi guys!\n\nThe approach I've shown above evaluated, a bit :smile:  . Because I am able to work with blocks, it lets me to do smth like:\n\n```\n    render view: :form, layout: :main do |f|\n      render view: :show, locals: {f: f}\n    end\n```\n\nwhich essentially not only covers the \"parent  child\" case, but also allows me to inject additional dependencies into child so I am able to create interactions among my components. You guys for sure ever created a GUI program which have had a graphic layout \u2013 perhaps I'm too old, because I'm using such dinosaur\u2013like example :smile: . Today I'd recall React probably... Anyway, in any language or GUI library it works the same, I mean you're able to create interactions among components in a way however you like. So any event happened in compontent X, may interact with component Y or Z in any manner.\n\nI am not sure, but perhaps we would be able to do that with @apotonick suggesstion,  e.g. create a `def form @form ||= Formular::Builder.new(...) ; end` , method so each view template is able to access the `form` . I think the same is affordable with @timoschilling use case, where I'd inject `self` as a concept model (and actually I'm doing it right now in many cases) so the \"child\" cell is able to access parent.\n\nHowever, I'm still kind of a fan of the \n\n```\nrender :smth do\n  render :blah + concept('cool/cell')\nend\n```\n\napproach, because I think it is simply easier to understand \u2013 at least for me. I mean, you see what goes where. Perhaps it works so nice for me, because I'm on Slim and Formular, so not touching any AcionView core (OK, except `content_tag`) or these are unrelated? \n\nWhat do you guys think about it? Right now I'm out of spare resources to investigate the remaining templates (ERB, HAML) and AcionView compontents (e.g `form_for`), but perhaps I could provide a sample app to show how it spins.\n. @apotonick , I think it will work in most cases just fine. Just wanted to say that the _block_ approach seems to be more flexible, however I'm still experimenting with this and trying to find solutions that seem to be a _best fit_ (yep, that's quite subjective though).\n\nAnyway, I can close it, if you think the way it works now is just fine.\n. closing because of no response\n. Hi @apotonick ,\n\nthanks for your response! Not sure yet about the second layout, but I've seen the context object and `tap` approach. I've played with it a bit, I mean `Comment::Cell.new(comment).().tap { |cell| }` and it might be useful in some cases, but I recognize it as a \"postprocessing\" step, since the `Comment::Cell` is already rendered here. I've tweaked it a bit to be able to render nested, eg:\n\n```\n    content = concept(\"main/cell\", ctxt).tap do |parent|\n      parent.show do\n        concept(\"documents/cell\",\n                cell_ctxt(with: {blah: op.contract}))\n      end\n    end\n\n    render text: content, layout: true\n```\n\nand main_cell:\n\n```\nclass Main::Cell < Isa::Cell::Concept\n  attr_reader :result\n\n  def to_s\n    result\n  end\n\n  def show(&block)\n    @result = render view: :main, &block\n  end\nend\n```\n\nYou may wonder WTF and yes, it somewhat still uses a blocks :-) .\n\nWhat I want to achieve here is to separate responsibilities of cells. At first (a couple weeks ago) my intention was to render a \"super cell\" (with a _super context_ to meet all cells dependencies) which also renders all nested cells (if exist). \n\nNow I've changed the approach because it mixins the concerns, e.g a subcell should be aware only of the context (an arbitrary object) you put into it. It doesn't need to know who is its parent. However, the parent cell is responsible of rendering its children within a layout, no matter whether its a horizontal, vertical or a mix of these two.\n\nBesides, I'd be really grateful if you'd explain [this](https://github.com/apotonick/cells/blob/master/test/context_test.rb#L22). I mean what should be the result of calling `cell.cell(\"context_test/child\", \"\")` ? Such `child` cell is nested in parent? Nontheless, the API here is much better, because it is simple `smth.cell('blah')`, however I wonder how it's supposed to work. \n. @apotonick ,  OK, I've checked the new layout feature you've metnioned above. I've set it up as shown in the [test](https://github.com/apotonick/cells/blob/master/test/layout_test.rb#L60) and it spins fine. :fire: \n\nThere's one caveat, however, because what if you have smth like `render(view: :content) + render(view: :sidebar)`? The `render_to_string` from [external](https://github.com/apotonick/cells/blob/master/lib/cell/layout.rb#L23) module is used any time render is performed and hence, the result is that each render is wrapped with layout cell, which is not expected behaviour. If you don't get what I mean, please look on the picture [here](https://github.com/apotonick/cells/issues/382#issuecomment-196024098).\n. > Maybe the External module shouldn't override render_to_string but show, as a convention?\n\n@apotonick ,\n\nyeah, `show` output wrapped into a layout sounds good :+1: .  However, I think there should be an intermediate interface that would allow one to use any present method (`show`, `present` or whatever). The point here is that `layout.new(model, context: context, content: content)` needs to get appropriate `content`. \n\nNote that [`ViewModel#to_s`](https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L131) is overidden with `call`, so why not to just override call method? e.g:\n\n```\nmodule Layout\n  def call(*args)\n     content = super\n     layout.new(model, context: context, content: content)\n  end\nend\n```\n\nWould it work? Sorry, but didn't have time to test it.\n. Hi @apotonick , \n\nI've just pulled the latest commit from master and it seems it works fine! :fire: :fireworks: \n. Hi @timoschilling !\n\nThanks for answering. Yep, my code is probably far from ideal. Could you elaborate your approach?\n. I see, thanks! Your proposal sounds better and I think it should be quite easily affordable with the current API. I am not sure yet (will try it tomorrow), but I think for now it would be enough to pass a block [here](https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L103) and fire `yield` in particular view.\n. Hi @timoschilling ,\n\nI've checked it and it works, however I am not sure this is what I'd expect. I mean with such approach you have smth like:\n\n```\n# view.erb\n  <%= yield %>\n\ndef render_to_string(options, &block)\n  # ...\n  content = render_template(template, options, &block)\n  # ...\nend\n```\n\nwhich explicitly enforce using `yield` in view, whereas this is not the intention, because I'd like to have these view components to be generic widgets and built more complex layout from them. \n\nIs it what did you mean?\n. Hi guys,\n\nI've experimented a bit more with cells rendering and it seems, at least with slim, that everything is working. Now, I'm able to do smth like:\n\n```\nrender view: :main do\n  render(view: :content) + render(view: :sidebar)\nend\n```\n\nor even\n\n```\nrender view: :main do\n  render(view: :content) + concept('smth/sidebar/cell').to_s\nend\n```\n\n![example](http://i.imgur.com/js6NxMN.png)\n\nIt works for Slim and to make it working with ERB and HAML, probably more changes are needed. Essentially I've removed buffer from `template_options_for` and passed a block [here](https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L103). If working with pure Tilt, it plays really smoothly.\n. Hi guys!\n\nThe approach I've shown above evaluated, a bit :smile:  . Because I am able to work with blocks, it lets me to do smth like:\n\n```\n    render view: :form, layout: :main do |f|\n      render view: :show, locals: {f: f}\n    end\n```\n\nwhich essentially not only covers the \"parent  child\" case, but also allows me to inject additional dependencies into child so I am able to create interactions among my components. You guys for sure ever created a GUI program which have had a graphic layout \u2013 perhaps I'm too old, because I'm using such dinosaur\u2013like example :smile: . Today I'd recall React probably... Anyway, in any language or GUI library it works the same, I mean you're able to create interactions among components in a way however you like. So any event happened in compontent X, may interact with component Y or Z in any manner.\n\nI am not sure, but perhaps we would be able to do that with @apotonick suggesstion,  e.g. create a `def form @form ||= Formular::Builder.new(...) ; end` , method so each view template is able to access the `form` . I think the same is affordable with @timoschilling use case, where I'd inject `self` as a concept model (and actually I'm doing it right now in many cases) so the \"child\" cell is able to access parent.\n\nHowever, I'm still kind of a fan of the \n\n```\nrender :smth do\n  render :blah + concept('cool/cell')\nend\n```\n\napproach, because I think it is simply easier to understand \u2013 at least for me. I mean, you see what goes where. Perhaps it works so nice for me, because I'm on Slim and Formular, so not touching any AcionView core (OK, except `content_tag`) or these are unrelated? \n\nWhat do you guys think about it? Right now I'm out of spare resources to investigate the remaining templates (ERB, HAML) and AcionView compontents (e.g `form_for`), but perhaps I could provide a sample app to show how it spins.\n. @apotonick , I think it will work in most cases just fine. Just wanted to say that the _block_ approach seems to be more flexible, however I'm still experimenting with this and trying to find solutions that seem to be a _best fit_ (yep, that's quite subjective though).\n\nAnyway, I can close it, if you think the way it works now is just fine.\n. closing because of no response\n. Hi @apotonick ,\n\nthanks for your response! Not sure yet about the second layout, but I've seen the context object and `tap` approach. I've played with it a bit, I mean `Comment::Cell.new(comment).().tap { |cell| }` and it might be useful in some cases, but I recognize it as a \"postprocessing\" step, since the `Comment::Cell` is already rendered here. I've tweaked it a bit to be able to render nested, eg:\n\n```\n    content = concept(\"main/cell\", ctxt).tap do |parent|\n      parent.show do\n        concept(\"documents/cell\",\n                cell_ctxt(with: {blah: op.contract}))\n      end\n    end\n\n    render text: content, layout: true\n```\n\nand main_cell:\n\n```\nclass Main::Cell < Isa::Cell::Concept\n  attr_reader :result\n\n  def to_s\n    result\n  end\n\n  def show(&block)\n    @result = render view: :main, &block\n  end\nend\n```\n\nYou may wonder WTF and yes, it somewhat still uses a blocks :-) .\n\nWhat I want to achieve here is to separate responsibilities of cells. At first (a couple weeks ago) my intention was to render a \"super cell\" (with a _super context_ to meet all cells dependencies) which also renders all nested cells (if exist). \n\nNow I've changed the approach because it mixins the concerns, e.g a subcell should be aware only of the context (an arbitrary object) you put into it. It doesn't need to know who is its parent. However, the parent cell is responsible of rendering its children within a layout, no matter whether its a horizontal, vertical or a mix of these two.\n\nBesides, I'd be really grateful if you'd explain [this](https://github.com/apotonick/cells/blob/master/test/context_test.rb#L22). I mean what should be the result of calling `cell.cell(\"context_test/child\", \"\")` ? Such `child` cell is nested in parent? Nontheless, the API here is much better, because it is simple `smth.cell('blah')`, however I wonder how it's supposed to work. \n. @apotonick ,  OK, I've checked the new layout feature you've metnioned above. I've set it up as shown in the [test](https://github.com/apotonick/cells/blob/master/test/layout_test.rb#L60) and it spins fine. :fire: \n\nThere's one caveat, however, because what if you have smth like `render(view: :content) + render(view: :sidebar)`? The `render_to_string` from [external](https://github.com/apotonick/cells/blob/master/lib/cell/layout.rb#L23) module is used any time render is performed and hence, the result is that each render is wrapped with layout cell, which is not expected behaviour. If you don't get what I mean, please look on the picture [here](https://github.com/apotonick/cells/issues/382#issuecomment-196024098).\n. > Maybe the External module shouldn't override render_to_string but show, as a convention?\n\n@apotonick ,\n\nyeah, `show` output wrapped into a layout sounds good :+1: .  However, I think there should be an intermediate interface that would allow one to use any present method (`show`, `present` or whatever). The point here is that `layout.new(model, context: context, content: content)` needs to get appropriate `content`. \n\nNote that [`ViewModel#to_s`](https://github.com/apotonick/cells/blob/master/lib/cell/view_model.rb#L131) is overidden with `call`, so why not to just override call method? e.g:\n\n```\nmodule Layout\n  def call(*args)\n     content = super\n     layout.new(model, context: context, content: content)\n  end\nend\n```\n\nWould it work? Sorry, but didn't have time to test it.\n. Hi @apotonick , \n\nI've just pulled the latest commit from master and it seems it works fine! :fire: :fireworks: \n. ",
    "darkhelmet": "That works, though it's missing this commit: https://github.com/apotonick/cells/commit/08d85c79fef301f5f23419ca095b2f802ba42794\n\nIt also takes a while to detect changes. With the code from this repo, template changes are picked up instantly and `*_cell.rb` changes aren't picked up at all. Using your branch, changes in both are picked up, but it takes numerous requests to get the new code.\n\nI am using a vagrant/docker setup to develop, which means NFS is involved, but again, template changes would happen instantly with this repo. Weird.\n. That works, though it's missing this commit: https://github.com/apotonick/cells/commit/08d85c79fef301f5f23419ca095b2f802ba42794\n\nIt also takes a while to detect changes. With the code from this repo, template changes are picked up instantly and `*_cell.rb` changes aren't picked up at all. Using your branch, changes in both are picked up, but it takes numerous requests to get the new code.\n\nI am using a vagrant/docker setup to develop, which means NFS is involved, but again, template changes would happen instantly with this repo. Weird.\n. ",
    "pnomolos": "@apotonick Cool, thanks!\n. @apotonick Cool, thanks!\n. ",
    "Nguyenanh": "i need change \n\n``` ruby\n#_header.html.slim\n= cell(:popup_info) \n```\n\nto \n\n``` ruby\n#_header.html.slim\n= cell(:popup_info).to_s.html_safe\n```\n. @apotonick \noh. I'm Stupid.\nI changed it\n\n``` ruby\n#_header.html.slim\n = cell(:popup_info).()\n```\n\nthanks again. :)\n. i need change \n\n``` ruby\n#_header.html.slim\n= cell(:popup_info) \n```\n\nto \n\n``` ruby\n#_header.html.slim\n= cell(:popup_info).to_s.html_safe\n```\n. @apotonick \noh. I'm Stupid.\nI changed it\n\n``` ruby\n#_header.html.slim\n = cell(:popup_info).()\n```\n\nthanks again. :)\n. ",
    "TrevorHinesley": "@apotonick if I'm starting a new project with Cells in Rails, should I use `concept` or `cell`? If I'm reading this right, `concept` syntax will be gone in V5.\n. Totally, i just mean is the actual `concept` helper going to be no more, so that `cell` is used everywhere? Because in trailblazer-cells I can still use either\n. @apotonick no i did not, do I need to? I thought that would just keep ActionView in or something, which I'd rather not do.\n. Got it, I saw the first line in the changelog but just thought it was for pulling in view helpers or something. Thanks @apotonick \n. @apotonick if I'm starting a new project with Cells in Rails, should I use `concept` or `cell`? If I'm reading this right, `concept` syntax will be gone in V5.\n. Totally, i just mean is the actual `concept` helper going to be no more, so that `cell` is used everywhere? Because in trailblazer-cells I can still use either\n. @apotonick no i did not, do I need to? I thought that would just keep ActionView in or something, which I'd rather not do.\n. Got it, I saw the first line in the changelog but just thought it was for pulling in view helpers or something. Thanks @apotonick \n. ",
    "yjukaku": "Just wanted to point out, the trailblazer site still references the `concept()` method, which was a little confusing to me until I saw this issue. \ud83d\udc4d \n\nhttp://trailblazer.to/gems/cells/\n. Just wanted to point out, the trailblazer site still references the `concept()` method, which was a little confusing to me until I saw this issue. \ud83d\udc4d \n\nhttp://trailblazer.to/gems/cells/\n. ",
    "acaron": "After adding `cells-rails` and updating `cells` to 4.1.1, I get one big problem...\n\n`app/concepts/auth/organization/cells/index.rb`\n\n```\nclass Auth::Organization::Cells::Index < Cell::Concept\n  def show\n    render :table\n  end\nend\n```\n\nI now get this error:\n\n```\nTemplate missing: view: `table.haml` prefixes: [\"app/concepts/cells/views\"]\n```\n\nMy `table.haml` is here: `app/concepts/auth/organization/cells/views/table.haml`\n\nAny clue why?\n. P.S. This works, but I don't want to set them everywhere. Prefixes are no longer working by themselves...\n\n`render view: :table, prefixes: [\"app/concepts/auth/organization/cells/views\"]`\n. After adding `cells-rails` and updating `cells` to 4.1.1, I get one big problem...\n\n`app/concepts/auth/organization/cells/index.rb`\n\n```\nclass Auth::Organization::Cells::Index < Cell::Concept\n  def show\n    render :table\n  end\nend\n```\n\nI now get this error:\n\n```\nTemplate missing: view: `table.haml` prefixes: [\"app/concepts/cells/views\"]\n```\n\nMy `table.haml` is here: `app/concepts/auth/organization/cells/views/table.haml`\n\nAny clue why?\n. P.S. This works, but I don't want to set them everywhere. Prefixes are no longer working by themselves...\n\n`render view: :table, prefixes: [\"app/concepts/auth/organization/cells/views\"]`\n. ",
    "shvetsovdm": "@timoschilling I do not mind. You think it will be useful?\n. @apotonick totally forgot about that cell is framework agnostic. There is no controller and that explains why I failed to spot the place where controllers injected into cell.\n\nSince problem in `#inspect` comes from controllers only, should we close this PR? I will replicate this changes in cells-rails.\n. @apotonick there is any pattern in `cells` that I should use to implement `cell/inspect.rb`?\n. @apotonick modified solution provided\n. @apotonick ping\n. @timoschilling I do not mind. You think it will be useful?\n. @apotonick totally forgot about that cell is framework agnostic. There is no controller and that explains why I failed to spot the place where controllers injected into cell.\n\nSince problem in `#inspect` comes from controllers only, should we close this PR? I will replicate this changes in cells-rails.\n. @apotonick there is any pattern in `cells` that I should use to implement `cell/inspect.rb`?\n. @apotonick modified solution provided\n. @apotonick ping\n. ",
    "crododile": "I changed to `constant <= Cell::ViewModel` for a significant speedup on benchmarks/class_builder.rb  though it's still slower than _not_ running this code.\n( the other benchmarks wouldn't run, same error on both, see below )\n\n```\n$ bundle exec ruby benchmarks/collection.rb\nbenchmarks/collection.rb:1:in `require': cannot load such file -- test_helper (LoadError)\n```\n. I changed to `constant <= Cell::ViewModel` for a significant speedup on benchmarks/class_builder.rb  though it's still slower than _not_ running this code.\n( the other benchmarks wouldn't run, same error on both, see below )\n\n```\n$ bundle exec ruby benchmarks/collection.rb\nbenchmarks/collection.rb:1:in `require': cannot load such file -- test_helper (LoadError)\n```\n. ",
    "DimaSamodurov": "If content is small the workaround could be to bypass templating and pass the block directly: \r\n```erb\r\n<%= cell(:page_body).() do\r\n  'Some Content'\r\n end %>\r\n```\r\nThis approach also allows rendering nested cells:\r\n```erb\r\n<%= cell(:page_body).() do\r\n  cell(:content)\r\n end %>\r\n```. If content is small the workaround could be to bypass templating and pass the block directly: \r\n```erb\r\n<%= cell(:page_body).() do\r\n  'Some Content'\r\n end %>\r\n```\r\nThis approach also allows rendering nested cells:\r\n```erb\r\n<%= cell(:page_body).() do\r\n  cell(:content)\r\n end %>\r\n```. ",
    "dan-palmer": "Feels as though this should really be handled in `cells-rails`\n. @apotonick sure thing, i'll see what I can do. Should we close this PR for now?\n. @apotonick no probz \ud83d\udc4d\n. Feels as though this should really be handled in `cells-rails`\n. @apotonick sure thing, i'll see what I can do. Should we close this PR for now?\n. @apotonick no probz \ud83d\udc4d\n. ",
    "toastercup": "I'm aware it's not good practice to comment on a PR/issue and clutter it with \"me too!\" (one should normally just 'subscribe'), but since this hasn't been touched by the maintainers in a month, I'll give @samstickland a boost and say that this affects our Rails/Cells setup, as well - and that the proposed PR works as intended.\n. I'm aware it's not good practice to comment on a PR/issue and clutter it with \"me too!\" (one should normally just 'subscribe'), but since this hasn't been touched by the maintainers in a month, I'll give @samstickland a boost and say that this affects our Rails/Cells setup, as well - and that the proposed PR works as intended.\n. ",
    "sbleon": "Oh Jeez. That was silly of me! Sorry about that.\n. Oh Jeez. That was silly of me! Sorry about that.\n. ",
    "herenow": "Makes sense :) Thanks :thumbsup:\n. Makes sense :) Thanks :thumbsup:\n. ",
    "Xanthus": "I see. @samstickland installing hamlit-block has the side effect you mentioned in https://github.com/hamlit/hamlit-block/issues/1 where blocks no longer have any output so my other templates break.\n. +1 for this issue. Instantiated a cell from within another cell and passed in a context hash but the 'child' cell's context was overridden to the parent cell's context instead so the extra context was lost. Seemed a bit counterintuitive - I was expecting an overwrite (i.e. child cell would get the explicit context or a merger of the parent's context and the supplied context), but not for it to be silently ignored. Ended up using the options hash instead. . I see. @samstickland installing hamlit-block has the side effect you mentioned in https://github.com/hamlit/hamlit-block/issues/1 where blocks no longer have any output so my other templates break.\n. +1 for this issue. Instantiated a cell from within another cell and passed in a context hash but the 'child' cell's context was overridden to the parent cell's context instead so the extra context was lost. Seemed a bit counterintuitive - I was expecting an overwrite (i.e. child cell would get the explicit context or a merger of the parent's context and the supplied context), but not for it to be silently ignored. Ended up using the options hash instead. . ",
    "1a2b": "@apotonick, Thanks a lot for your fast response! I have just found a problem, and fixed it.\n. @apotonick 2 same names for module (but in different namespaces), some problem with spring maybe\n. @apotonick, Thanks a lot for your fast response! I have just found a problem, and fixed it.\n. @apotonick 2 same names for module (but in different namespaces), some problem with spring maybe\n. ",
    "AlexVPopov": "Based on [this issue](https://github.com/apotonick/cells/issues/314) the current workaround for me would be to remove the class-level declaration for the layout from FooCell (the `layout :layout` part on line 3) and put it in the `show` method:\n\n``` ruby\ndef show\n  render layout: :layout\nend\n```\n. Hi and thanks for the quick response :+1:\n. Based on [this issue](https://github.com/apotonick/cells/issues/314) the current workaround for me would be to remove the class-level declaration for the layout from FooCell (the `layout :layout` part on line 3) and put it in the `show` method:\n\n``` ruby\ndef show\n  render layout: :layout\nend\n```\n. Hi and thanks for the quick response :+1:\n. ",
    "jraedisch": "Sry, wrong project!\n. Sry, wrong project!\n. ",
    "gaggle": "Thank you both for the extremely fast replies!\n\n@Startouf thank you for the code snippet, I'm too new to Ruby/Rails to figure this out myself and your code brought me further. In fact, it solved the issue!... _ish_. I'm now stuck on Cells generating incorrect form elements where input elements are siblings to the form element, as described in #260. I can make a new issue to pursue a solution for this, but I take it you don't have this problem?\n\n@apotonick I've experimented with an upgrade but there's a version conflict error when I just target `cells` so I've only successfully upgraded by deleting the `.lock` file which also lets in a ton of other updates. I'm introducing Cells to better manage our complexity and put us on a sane(er) upgrade path, but for now I'm not sure I can proceed.. Does 4.1 specifically address issues surrounding forms?\n. @Startouf I see, I didn't know it just affected HAML, that is indeed what we use. I've been unable to include `cells-rails` gem because it requires cells 4.1, and the furthest I've gotten with 4.1 is that the server starts but `cell` helper raises `wrong constant name` for all existing cells (so far I've been using version 4.0.5 and just `cells-haml` gem).\n\nThere's probably some way through all this that I don't know about yet, but unless you're spotting something obvious I don't mean to drag you into debugging our setup. For now I'll park my Cells branch and loop back to this when I can upgrade with confidence.\n. @apotonick, thanks I'll check out the gitter channel. When I add version constraint and `cells-rails` al\u00e1\n\n```\ngem 'cells', '~>4.1'\ngem 'cells-haml'\ngem 'cells-rails'\n```\n\nThen doing a `bundle upgrade cells` results in errors such as:\n\n```\nBundler could not find compatible versions for gem \"tilt\":\n  In Gemfile:\n    rails (= 3.2.18) ruby depends on\n      tilt (!= 1.3.0, ~> 1.1) ruby\n\n    cells (>= 4.1) ruby depends on\n      tilt (2.0.5)\n```\n\nIs Cells supposed to work with Rails 3.2? Because I assumed this is on us, that we need to get with the times.\n. Hi @apotonick,\n\nI plucked away at this, and have managed some progress but ultimately no success.\n\nTo recap, I downloaded the `cells` and `cells-haml` gems, and changed their dependencies to accept lower `tilt` and `haml` dependencies respectively. This allowed bundler to upgrade:\n\n```\n  cells (~> 4.1)!\n  cells-haml!\n  cells-rails\n```\n\nBut the result is the same [as my previous attempt](https://github.com/apotonick/cells/issues/426#issuecomment-240867544), pages that uses widgets raise a `wrong constant name` error (and these pages worked prior to the upgrade).\n\nThe locally-altered-hack is not sustainable in the long run anyway, so I'll be backing out of this and phasing out our use of `Cells` for the time being. Maybe once we complete our upgrades I can loop back around. Thanks for the help, and of course if you spot something I should try I'm happy to keep experimenting in my branch.\n. Closing as I have stopped using Rails.. Thank you both for the extremely fast replies!\n\n@Startouf thank you for the code snippet, I'm too new to Ruby/Rails to figure this out myself and your code brought me further. In fact, it solved the issue!... _ish_. I'm now stuck on Cells generating incorrect form elements where input elements are siblings to the form element, as described in #260. I can make a new issue to pursue a solution for this, but I take it you don't have this problem?\n\n@apotonick I've experimented with an upgrade but there's a version conflict error when I just target `cells` so I've only successfully upgraded by deleting the `.lock` file which also lets in a ton of other updates. I'm introducing Cells to better manage our complexity and put us on a sane(er) upgrade path, but for now I'm not sure I can proceed.. Does 4.1 specifically address issues surrounding forms?\n. @Startouf I see, I didn't know it just affected HAML, that is indeed what we use. I've been unable to include `cells-rails` gem because it requires cells 4.1, and the furthest I've gotten with 4.1 is that the server starts but `cell` helper raises `wrong constant name` for all existing cells (so far I've been using version 4.0.5 and just `cells-haml` gem).\n\nThere's probably some way through all this that I don't know about yet, but unless you're spotting something obvious I don't mean to drag you into debugging our setup. For now I'll park my Cells branch and loop back to this when I can upgrade with confidence.\n. @apotonick, thanks I'll check out the gitter channel. When I add version constraint and `cells-rails` al\u00e1\n\n```\ngem 'cells', '~>4.1'\ngem 'cells-haml'\ngem 'cells-rails'\n```\n\nThen doing a `bundle upgrade cells` results in errors such as:\n\n```\nBundler could not find compatible versions for gem \"tilt\":\n  In Gemfile:\n    rails (= 3.2.18) ruby depends on\n      tilt (!= 1.3.0, ~> 1.1) ruby\n\n    cells (>= 4.1) ruby depends on\n      tilt (2.0.5)\n```\n\nIs Cells supposed to work with Rails 3.2? Because I assumed this is on us, that we need to get with the times.\n. Hi @apotonick,\n\nI plucked away at this, and have managed some progress but ultimately no success.\n\nTo recap, I downloaded the `cells` and `cells-haml` gems, and changed their dependencies to accept lower `tilt` and `haml` dependencies respectively. This allowed bundler to upgrade:\n\n```\n  cells (~> 4.1)!\n  cells-haml!\n  cells-rails\n```\n\nBut the result is the same [as my previous attempt](https://github.com/apotonick/cells/issues/426#issuecomment-240867544), pages that uses widgets raise a `wrong constant name` error (and these pages worked prior to the upgrade).\n\nThe locally-altered-hack is not sustainable in the long run anyway, so I'll be backing out of this and phasing out our use of `Cells` for the time being. Maybe once we complete our upgrades I can loop back around. Thanks for the help, and of course if you spot something I should try I'm happy to keep experimenting in my branch.\n. Closing as I have stopped using Rails.. ",
    "mayinx": "Same here - I use cells + cells-erb with rails 3 and the `form_tag`-output is escaped - did you (or anyone else) find any fix for this in the meantime? . Awesome dude - that worked like a charm - thanks a lot!. Same here - I use cells + cells-erb with rails 3 and the `form_tag`-output is escaped - did you (or anyone else) find any fix for this in the meantime? . Awesome dude - that worked like a charm - thanks a lot!. ",
    "KudryashovAV": "in config/initializers/cells.rb you can write:\r\n\r\n```\r\nmodule Cell\r\n  module Erb\r\n    def form_tag_in_block(html_options, &block)\r\n      content = capture(&block)\r\n      \"#{form_tag_html(html_options)}\" << content.to_s << \"</form>\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nand it should works. in config/initializers/cells.rb you can write:\r\n\r\n```\r\nmodule Cell\r\n  module Erb\r\n    def form_tag_in_block(html_options, &block)\r\n      content = capture(&block)\r\n      \"#{form_tag_html(html_options)}\" << content.to_s << \"</form>\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nand it should works. ",
    "jarosluv": "Yes, with passing constant to cell helper, it's working pretty good. As I understand, this is proper way now, and magic of loading cells by string will be deprecated? If it, then we can close PR, thanks!\n. Try to use case statement like [described here](https://gist.github.com/davidphasson/91613):\r\n\r\n```erb\r\n<% case planning.activity.a_type\r\n   when '0' %>\r\n     <%= daily %>\r\n<% else %>\r\n     <%= weekly %>\r\n<% end %>\r\n```. Yes, with passing constant to cell helper, it's working pretty good. As I understand, this is proper way now, and magic of loading cells by string will be deprecated? If it, then we can close PR, thanks!\n. Try to use case statement like [described here](https://gist.github.com/davidphasson/91613):\r\n\r\n```erb\r\n<% case planning.activity.a_type\r\n   when '0' %>\r\n     <%= daily %>\r\n<% else %>\r\n     <%= weekly %>\r\n<% end %>\r\n```. ",
    "JelF": "@apotonick should i place it in builder_test or in layout_test?\n. @apotonick should i place it in builder_test or in layout_test?\n. ",
    "007lva": "I have the same problem, works fine if you pass the block from a normal rails view, but not from another cell. Some workaround for this?\n. I have the same problem, works fine if you pass the block from a normal rails view, but not from another cell. Some workaround for this?\n. ",
    "phansch": "It looks like the `cell` method should pass through the block to the template with the current documentation?\r\n\r\nRunning into a similar issue also trying to make it work for something like panels.\r\n\r\nWith the above code, if I call the block that is passed to `#show` it will contain the whole template string of the file where the block/cell-call is defined in.\r\n\r\n(Otherwise cells has been a really great experience and it brings a lot of fresh air into every-day development, thank you!)\r\n\r\n**Update:**\r\n\r\nA **workaround**, if you are using Rails, could be to wrap the block in a [capture](http://api.rubyonrails.org/classes/ActionView/Helpers/CaptureHelper.html#method-i-capture)  call:\r\n\r\n```ruby\r\n= cell(SharedComponents::PanelCell, nil, title: model.title) do\r\n  - capture do\r\n    %p Hello\r\n```\r\n\r\n\r\n. It looks like the `cell` method should pass through the block to the template with the current documentation?\r\n\r\nRunning into a similar issue also trying to make it work for something like panels.\r\n\r\nWith the above code, if I call the block that is passed to `#show` it will contain the whole template string of the file where the block/cell-call is defined in.\r\n\r\n(Otherwise cells has been a really great experience and it brings a lot of fresh air into every-day development, thank you!)\r\n\r\n**Update:**\r\n\r\nA **workaround**, if you are using Rails, could be to wrap the block in a [capture](http://api.rubyonrails.org/classes/ActionView/Helpers/CaptureHelper.html#method-i-capture)  call:\r\n\r\n```ruby\r\n= cell(SharedComponents::PanelCell, nil, title: model.title) do\r\n  - capture do\r\n    %p Hello\r\n```\r\n\r\n\r\n. ",
    "Ravenstine": "I have a similar problem but where the block somehow gets yielded both where yield is called and above the cell itself.  Using `capture` just causes the block to not render at all.  Rails 4.2.3.  It might work with HAML in @phansch's example, but that workaround doesn't appear to help with straight ERB/ActionView.\r\n\r\nEDIT: Nevermind, that's a [separate issue](https://github.com/trailblazer/cells/issues/406).. I have a similar problem but where the block somehow gets yielded both where yield is called and above the cell itself.  Using `capture` just causes the block to not render at all.  Rails 4.2.3.  It might work with HAML in @phansch's example, but that workaround doesn't appear to help with straight ERB/ActionView.\r\n\r\nEDIT: Nevermind, that's a [separate issue](https://github.com/trailblazer/cells/issues/406).. ",
    "ushis": "@adambedford it should work with:\r\n\r\n```ruby\r\n= cell(SharedComponents::PanelCell, nil, title: model.title).() do\r\n  %p hello world\r\n```. @adambedford it should work with:\r\n\r\n```ruby\r\n= cell(SharedComponents::PanelCell, nil, title: model.title).() do\r\n  %p hello world\r\n```. ",
    "seanfcarroll": "It also works for concepts\r\n\r\n```\r\n<%= concept(UserWord::Cell,sentence_words.first) %>\r\n```. It also works for concepts\r\n\r\n```\r\n<%= concept(UserWord::Cell,sentence_words.first) %>\r\n```. ",
    "dmandalinic": "A MiniTest here is a no go since I need a Rails and Rspec. But I will create a mini Rails app with specs and link it here.. ```ruby\r\nrequire 'rails_helper'\r\n\r\ndescribe 'Sessions' do\r\n  let(:admin) {create(:admin)}\r\n\r\n  before do\r\n    sign_in admin\r\n  end\r\n\r\n  it 'signs admin in' do\r\n    get root_url\r\n    expect(controller.current_admin).to eq(admin) #this will raise an exception since controller is nil\r\n  end\r\n\r\nend\r\n\r\n```. Thank you. I was unaware that `rspec-cells` was there (:. A MiniTest here is a no go since I need a Rails and Rspec. But I will create a mini Rails app with specs and link it here.. ```ruby\r\nrequire 'rails_helper'\r\n\r\ndescribe 'Sessions' do\r\n  let(:admin) {create(:admin)}\r\n\r\n  before do\r\n    sign_in admin\r\n  end\r\n\r\n  it 'signs admin in' do\r\n    get root_url\r\n    expect(controller.current_admin).to eq(admin) #this will raise an exception since controller is nil\r\n  end\r\n\r\nend\r\n\r\n```. Thank you. I was unaware that `rspec-cells` was there (:. ",
    "wpsamurai": "I can confirm the issue. Because of this, all rspec [helper specs](https://github.com/rspec/rspec-rails#user-content-helper-specs) fail with the following exception:\r\n```ruby\r\n Failure/Error: controller.controller_path = _controller_path(example)\r\n\r\n     NoMethodError:\r\n       undefined method `controller_path=' for nil:NilClass\r\n     # /gems/rspec-rails-3.5.2/lib/rspec/rails/example/helper_example_group.rb:44:in `block (2 levels) in <module:HelperExampleGroup>'\r\n...\r\n```\r\n\r\nTested with Rails 5.0.0.1, Cells 4.1.4, Rspec-rails 3.5.2\r\n\r\n**Steps to reproduce**\r\n\r\n1. Add simple helper \r\n```ruby\r\nmodule ApplicationHelper\r\n  def get_abc\r\n    \"abc\"\r\n  end\r\nend\r\n```\r\n2. Add spec\r\n```ruby\r\nrequire 'rails_helper'\r\n\r\nRSpec.describe ApplicationHelper, :type => :helper do\r\n  describe \"#get_abc\" do\r\n    it \"returns abc\" do\r\n      expect(helper.get_abc).to match /abc/\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n3. Add Cells gems to Gemfile and `bundle install`\r\n```ruby\r\ngem 'cells-rails'\r\ngem 'cells-erb'\r\n```\r\n\r\n4. In `spec/rails_helper.rb` include `Cell::Testing` and run specs\r\n```ruby\r\nconfig.include Cell::Testing\r\n```. Using `rspec-cells` gems instead of `config.include Cell::Testing` seems to resolve the problem.. I can confirm the issue. Because of this, all rspec [helper specs](https://github.com/rspec/rspec-rails#user-content-helper-specs) fail with the following exception:\r\n```ruby\r\n Failure/Error: controller.controller_path = _controller_path(example)\r\n\r\n     NoMethodError:\r\n       undefined method `controller_path=' for nil:NilClass\r\n     # /gems/rspec-rails-3.5.2/lib/rspec/rails/example/helper_example_group.rb:44:in `block (2 levels) in <module:HelperExampleGroup>'\r\n...\r\n```\r\n\r\nTested with Rails 5.0.0.1, Cells 4.1.4, Rspec-rails 3.5.2\r\n\r\n**Steps to reproduce**\r\n\r\n1. Add simple helper \r\n```ruby\r\nmodule ApplicationHelper\r\n  def get_abc\r\n    \"abc\"\r\n  end\r\nend\r\n```\r\n2. Add spec\r\n```ruby\r\nrequire 'rails_helper'\r\n\r\nRSpec.describe ApplicationHelper, :type => :helper do\r\n  describe \"#get_abc\" do\r\n    it \"returns abc\" do\r\n      expect(helper.get_abc).to match /abc/\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n3. Add Cells gems to Gemfile and `bundle install`\r\n```ruby\r\ngem 'cells-rails'\r\ngem 'cells-erb'\r\n```\r\n\r\n4. In `spec/rails_helper.rb` include `Cell::Testing` and run specs\r\n```ruby\r\nconfig.include Cell::Testing\r\n```. Using `rspec-cells` gems instead of `config.include Cell::Testing` seems to resolve the problem.. ",
    "ekampp": "Excellent. I was missing something. Thanks for the awesomely fast response. I will try that and close the issue if it fixes my problem.. @apotonick doing `cell(Advisor::Offer, Offer.new).(:tr)` gives me the following error:\r\n\r\n```bash\r\nNoMethodError - undefined method `call' for #<Class:0x007fe629fcf280>\r\n```\r\n\r\nStack trace\r\n\r\n```bash\r\nNoMethodError - undefined method `call' for #<Class:0x007fe629fcf280>\r\n18:37:08 web.1         | Did you mean?  caller\r\n18:37:08 web.1         |                all:\r\n18:37:08 web.1         |    () Users/emil/.rbenv/versions/2.3.3/lib/ruby/gems/2.3.0/bundler/gems/rails-b0b4a9a65861/activerecord/lib/active_record/dynamic_matchers.rb:21:in `method_missing'\r\n18:37:08 web.1         |    () Users/emil/.rbenv/versions/2.3.3/lib/ruby/gems/2.3.0/bundler/gems/cells-2462e558b8a0/lib/cell/view_model.rb:31:in `cell'\r\n18:37:08 web.1         |   cells-rails (0.0.6) lib/cell/rails.rb:13:in `cell'\r\n18:37:08 web.1         |   cells-rails (0.0.6) lib/cell/rails.rb:27:in `cell'\r\n```\r\n\r\nGems\r\n\r\n  * cells (4.1.4)\r\n  * cells-rails (0.0.6 71c7d28)\r\n  * cells-slim (0.0.5)\r\n  * rspec-cells (0.3.4)\r\n\r\nAm I still doing something wrong? . Thanks for being patient with me \u2764\ufe0f \r\n\r\nI'm passing in a simple ActiveRecord class constant and the ActiveRecord instance. \r\n\r\nI'm using the ViewModel.\r\n\r\nI will investigate further, and try and narrow the issue down.. Ok. I refactored my way around the issue. The initial problem still doesn't seem solved, but I believe it's an issue with the cells-rails app.. Ohh.. This makes more sense. Thanks for pointing that out. I will try another pass at using it correctly \ud83d\ude09 . Excellent. I was missing something. Thanks for the awesomely fast response. I will try that and close the issue if it fixes my problem.. @apotonick doing `cell(Advisor::Offer, Offer.new).(:tr)` gives me the following error:\r\n\r\n```bash\r\nNoMethodError - undefined method `call' for #<Class:0x007fe629fcf280>\r\n```\r\n\r\nStack trace\r\n\r\n```bash\r\nNoMethodError - undefined method `call' for #<Class:0x007fe629fcf280>\r\n18:37:08 web.1         | Did you mean?  caller\r\n18:37:08 web.1         |                all:\r\n18:37:08 web.1         |    () Users/emil/.rbenv/versions/2.3.3/lib/ruby/gems/2.3.0/bundler/gems/rails-b0b4a9a65861/activerecord/lib/active_record/dynamic_matchers.rb:21:in `method_missing'\r\n18:37:08 web.1         |    () Users/emil/.rbenv/versions/2.3.3/lib/ruby/gems/2.3.0/bundler/gems/cells-2462e558b8a0/lib/cell/view_model.rb:31:in `cell'\r\n18:37:08 web.1         |   cells-rails (0.0.6) lib/cell/rails.rb:13:in `cell'\r\n18:37:08 web.1         |   cells-rails (0.0.6) lib/cell/rails.rb:27:in `cell'\r\n```\r\n\r\nGems\r\n\r\n  * cells (4.1.4)\r\n  * cells-rails (0.0.6 71c7d28)\r\n  * cells-slim (0.0.5)\r\n  * rspec-cells (0.3.4)\r\n\r\nAm I still doing something wrong? . Thanks for being patient with me \u2764\ufe0f \r\n\r\nI'm passing in a simple ActiveRecord class constant and the ActiveRecord instance. \r\n\r\nI'm using the ViewModel.\r\n\r\nI will investigate further, and try and narrow the issue down.. Ok. I refactored my way around the issue. The initial problem still doesn't seem solved, but I believe it's an issue with the cells-rails app.. Ohh.. This makes more sense. Thanks for pointing that out. I will try another pass at using it correctly \ud83d\ude09 . ",
    "havran": "Thanks.. Thanks.. ",
    "batamire": "new rails 5.1 app, gems: 'slim-rails', 'cells-rails', 'cells-slim'\r\n```ruby\r\n= link_to '/' do\r\n  strong ABCD\r\n```\r\n\r\nproduces escaped HTML in development:\r\n`<strong>ABCD</strong>`\r\n. new rails 5.1 app, gems: 'slim-rails', 'cells-rails', 'cells-slim'\r\n```ruby\r\n= link_to '/' do\r\n  strong ABCD\r\n```\r\n\r\nproduces escaped HTML in development:\r\n`<strong>ABCD</strong>`\r\n. ",
    "wintersolutions": "Damn, there it is on the first line of the stacktrace. Damn, there it is on the first line of the stacktrace. ",
    "ElliottAYoung": "Perfect, thank you very much!. @TheFlow0360 The project is public, you can access it here: https://github.com/ElliottAYoung/funfetti\r\n\r\nI haven't done a whole lot with it yet / written sufficient documentation, so I do apologize for that. But you should be able to see all relevant examples for including cells in an engine in [/app/cells/funfetti/cell.rb](https://github.com/ElliottAYoung/funfetti/blob/master/app/cells/funfetti/cell.rb) and see examples for how to call this in [lib/confetti](https://github.com/ElliottAYoung/funfetti/blob/master/lib/confetti.rb). Perfect, thank you very much!. @TheFlow0360 The project is public, you can access it here: https://github.com/ElliottAYoung/funfetti\r\n\r\nI haven't done a whole lot with it yet / written sufficient documentation, so I do apologize for that. But you should be able to see all relevant examples for including cells in an engine in [/app/cells/funfetti/cell.rb](https://github.com/ElliottAYoung/funfetti/blob/master/app/cells/funfetti/cell.rb) and see examples for how to call this in [lib/confetti](https://github.com/ElliottAYoung/funfetti/blob/master/lib/confetti.rb). ",
    "rafaelfranca": "engines only autoload files inside app. I see that the cells are inside `lib` so the automatic autoload will not work. You can make it work too, but you will need to add `lib/cell` to `config.eager_load_paths`.. engines only autoload files inside app. I see that the cells are inside `lib` so the automatic autoload will not work. You can make it work too, but you will need to add `lib/cell` to `config.eager_load_paths`.. ",
    "asaletnik": "Furthermore, I have just tried another case - if I use the default `show` action or view, and the exception is raised somewhere inside, Airbrake picks it up and then calls the same cell again when sanitizing, causing that exception to be raised again... Inside its rescue block.. I have made a temporary override in the initializer file, and it fixes the issue for me for now, without breaking anything else:\r\n```\r\nmodule Cell\r\n  class ViewModel\r\n    def to_s\r\n      if caller[0].match(/airbrake.*sanitize_value/)\r\n        super\r\n      else\r\n        call\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n// Edit - fixes both cases described above.. Furthermore, I have just tried another case - if I use the default `show` action or view, and the exception is raised somewhere inside, Airbrake picks it up and then calls the same cell again when sanitizing, causing that exception to be raised again... Inside its rescue block.. I have made a temporary override in the initializer file, and it fixes the issue for me for now, without breaking anything else:\r\n```\r\nmodule Cell\r\n  class ViewModel\r\n    def to_s\r\n      if caller[0].match(/airbrake.*sanitize_value/)\r\n        super\r\n      else\r\n        call\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n// Edit - fixes both cases described above.. "
}