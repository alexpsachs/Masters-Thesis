{
    "mgravell": "That's a new one on me; as a side note, though: high field numbers are more expensive. As a general rule, you should prefer low numbers. I'm not saying that this makes it ok to fail, note\n. Thanks\n. @ANTPro no, that doesn't achieve what is wanted here\n\nOn 3 July 2014 15:05, ANTPro notifications@github.com wrote:\n\n> I not test:\n> \n> [ProtoMember(5,DynamicType = true)]\n> public dynamic Data { get; set; }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47933654.\n\n## \n\nRegards,\n\nMarc\n. That is simply not a good idea, but you could probably get around it via:\n\n```\n[ProtoMember(4)]\npublic SomeType TheOriginalProperty {get;set;}\n```\n\nthen migrating to:\n\n```\n[ProtoMember(4)]\npublic SomeType TheOriginalProperty {...}\n\npublic bool ShouldSerializeTheOriginalProperty()\n{\n    return false;\n}\n\n[ProtoMember(12)]\npublic int TheNewProperty {...}\n```\n\nwith one of the two properties being the \"actual\" code, and one of them\nbeing a shim that has the code to translate between the two. This approach\nwill allow both old and new data to be read, but data will always be\nwritten using the new layout.\n\nOn 29 June 2014 16:57, slav notifications@github.com wrote:\n\n> Is it possible to change property type, for example from class to simple\n> int, and then on deserialization to customize deserialize if deserializing\n> as int fails, to try deserialize class which was used in place of int\n> before, filling out int property based on the values that used to be in\n> that class?\n> \n> So basically I want to convert stored value to a different type on\n> deserialize. How would I go around doing it?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4.\n\n## \n\nRegards,\n\nMarc\n. No, basically. That is not possible. Not least: this is a read-once stream:\nmess it up, and the data is gone.\nOn 3 Jul 2014 21:09, \"slav\" notifications@github.com wrote:\n\n> I realize it's not the best idea, but sometimes data migration is\n> necessary. I was hoping it would be possible not to keep the old property\n> around.\n> Is it possible to customize serialization/deserialization of specific\n> property?\n> \n> like\n> [ProtoMember(4)]\n> public int TheNewProperty{...}\n> \n> int DeserializeTheNewProperty( data )\n> {\n> // try load as int\n> // if fails, try load as SomeType and convert to int\n> }\n> \n> On Thu, Jul 3, 2014 at 10:38 AM, Marc Gravell notifications@github.com\n> wrote:\n> \n> > That is simply not a good idea, but you could probably get around it\n> > via:\n> > \n> > [ProtoMember(4)]\n> > public SomeType TheOriginalProperty {get;set;}\n> > \n> > then migrating to:\n> > \n> > [ProtoMember(4)]\n> > public SomeType TheOriginalProperty {...}\n> > \n> > public bool ShouldSerializeTheOriginalProperty()\n> > {\n> > return false;\n> > }\n> > \n> > [ProtoMember(12)]\n> > public int TheNewProperty {...}\n> > \n> > with one of the two properties being the \"actual\" code, and one of them\n> > being a shim that has the code to translate between the two. This\n> > approach\n> > will allow both old and new data to be read, but data will always be\n> > written using the new layout.\n> > \n> > On 29 June 2014 16:57, slav notifications@github.com wrote:\n> > \n> > > Is it possible to change property type, for example from class to\n> > > simple\n> > > int, and then on deserialization to customize deserialize if\n> > > deserializing\n> > > as int fails, to try deserialize class which was used in place of int\n> > > before, filling out int property based on the values that used to be\n> > > in\n> > > that class?\n> > > \n> > > So basically I want to convert stored value to a different type on\n> > > deserialize. How would I go around doing it?\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/mgravell/protobuf-net/issues/4.\n> > \n> > ## \n> > \n> > Regards,\n> > \n> > Marc\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47937884.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47978924.\n. The migration scheme I proposed, however, should work.\nOn 3 Jul 2014 21:13, \"Marc Gravell\" marc.gravell@gmail.com wrote:\n\n> No, basically. That is not possible. Not least: this is a read-once\n> stream: mess it up, and the data is gone.\n> On 3 Jul 2014 21:09, \"slav\" notifications@github.com wrote:\n> \n> > I realize it's not the best idea, but sometimes data migration is\n> > necessary. I was hoping it would be possible not to keep the old property\n> > around.\n> > Is it possible to customize serialization/deserialization of specific\n> > property?\n> > \n> > like\n> > [ProtoMember(4)]\n> > public int TheNewProperty{...}\n> > \n> > int DeserializeTheNewProperty( data )\n> > {\n> > // try load as int\n> > // if fails, try load as SomeType and convert to int\n> > }\n> > \n> > On Thu, Jul 3, 2014 at 10:38 AM, Marc Gravell notifications@github.com\n> > wrote:\n> > \n> > > That is simply not a good idea, but you could probably get around it\n> > > via:\n> > > \n> > > [ProtoMember(4)]\n> > > public SomeType TheOriginalProperty {get;set;}\n> > > \n> > > then migrating to:\n> > > \n> > > [ProtoMember(4)]\n> > > public SomeType TheOriginalProperty {...}\n> > > \n> > > public bool ShouldSerializeTheOriginalProperty()\n> > > {\n> > > return false;\n> > > }\n> > > \n> > > [ProtoMember(12)]\n> > > public int TheNewProperty {...}\n> > > \n> > > with one of the two properties being the \"actual\" code, and one of them\n> > > being a shim that has the code to translate between the two. This\n> > > approach\n> > > will allow both old and new data to be read, but data will always be\n> > > written using the new layout.\n> > > \n> > > On 29 June 2014 16:57, slav notifications@github.com wrote:\n> > > \n> > > > Is it possible to change property type, for example from class to\n> > > > simple\n> > > > int, and then on deserialization to customize deserialize if\n> > > > deserializing\n> > > > as int fails, to try deserialize class which was used in place of int\n> > > > before, filling out int property based on the values that used to be\n> > > > in\n> > > > that class?\n> > > > \n> > > > So basically I want to convert stored value to a different type on\n> > > > deserialize. How would I go around doing it?\n> > > > \n> > > > \u2014\n> > > > Reply to this email directly or view it on GitHub\n> > > > https://github.com/mgravell/protobuf-net/issues/4.\n> > > \n> > > ## \n> > > \n> > > Regards,\n> > > \n> > > Marc\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > <\n> > > https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47937884>.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47978924\n> > .\n. The deserializer doesn't know that - it has to assume the worst.\nOn 4 Jul 2014 00:48, \"slav\" notifications@github.com wrote:\n\n> Using it to efficiently store data, so not read-once stream. It's ok.\n> thank you for ideas.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47996379.\n. If it works, then by all means submit a pull request; it is unclear whether you are reporting an issue that you have not already resolved.\n. I wasn't aware that there was a supported alias for unity. If that works:\nsure, can do. I've never seen that alias mentioned in the nuget docs.\nOn 6 Jul 2014 13:03, \"Joao C Costa\" notifications@github.com wrote:\n\n> It would be much simpler to have the latest official DLLs compiled for\n> Unity3D in the NuGet package (under /lib/unity if possible).\n> We can do submit the changes if you prefer.\n> Thanks\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/6.\n. Of course a slight nuisance there is that for unity _ideally_ one would use\nthe precompiler. I really should package that too, under tools\nOn 6 Jul 2014 15:21, \"Marc Gravell\" marc.gravell@gmail.com wrote:\n\n> I wasn't aware that there was a supported alias for unity. If that works:\n> sure, can do. I've never seen that alias mentioned in the nuget docs.\n> On 6 Jul 2014 13:03, \"Joao C Costa\" notifications@github.com wrote:\n> \n> > It would be much simpler to have the latest official DLLs compiled for\n> > Unity3D in the NuGet package (under /lib/unity if possible).\n> > We can do submit the changes if you prefer.\n> > Thanks\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/6.\n. Can I perhaps see your performance test? Impossible to comment in a vacuum.\nOn 9 Jul 2014 21:07, \"abcpp\" notifications@github.com wrote:\n\n> hmmm... tried precompiler, results were even worse... clearly, I'm doing\n> something wrong...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/7#issuecomment-48527336.\n. I have an email citing \"TestProto\" - if that is it, I will review it in the\nmorning (I'm on mobile right now; this needs a PC)\nOn 9 Jul 2014 22:04, \"abcpp\" notifications@github.com wrote:\n\n> Thank you! I sent you a link to the solution file. Would appreciate any\n> help on making it the speedier. It does feel like I'm missing an option or\n> two...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/7#issuecomment-48533800.\n. The test project didn't contain comparisons to protobuf-csharp-port, so it\nis hard for me to comment, but my initial thought is: the google\nimplementation does a lot of the serialization work _in the builder_, so if\nyou aren't measuring object construction time and object query time - that\nis probably a huge part of the difference. The MS impl is a more\nfeature-parity comparison. I've tidied up some glitches in the code (let me\nknow if you want the revised .cs back), and I get data like:\n\nTest1 (MS.LiveLabs) ser:1594 deser:1531 len:442\nTest2 (protobuf-net) ser:1172 deser:2156 len:432\nTest1 (MS.LiveLabs) ser:1625 deser:2047 len:442\nTest2 (protobuf-net) ser:1437 deser:3391 len:432\nTest1 (MS.LiveLabs) ser:1594 deser:1531 len:442\nTest2 (protobuf-net) ser:1156 deser:2250 len:432\nTest1 (MS.LiveLabs) ser:1610 deser:1531 len:442\nTest2 (protobuf-net) ser:1156 deser:2250 len:432\nTest1 (MS.LiveLabs) ser:1609 deser:1532 len:442\nTest2 (protobuf-net) ser:1156 deser:2172 len:432\n\nGeneral conclusions, then: at the moment, protobuf-net on the data is\nfaster at serialization, but slightly slower on deserialization.\nInvestigating the exact time is tricky, and I can't give an immediate\nanswer on that, but it is something I can look at to see if there's a\n\"trick\" I can do here. But overall, they are very comparable. I'm not sure\nit is worth getting excited over the difference between them....\n\nOn 9 July 2014 22:08, Marc Gravell marc.gravell@gmail.com wrote:\n\n> I have an email citing \"TestProto\" - if that is it, I will review it in\n> the morning (I'm on mobile right now; this needs a PC)\n>  On 9 Jul 2014 22:04, \"abcpp\" notifications@github.com wrote:\n> \n> > Thank you! I sent you a link to the solution file. Would appreciate any\n> > help on making it the speedier. It does feel like I'm missing an option or\n> > two...\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/7#issuecomment-48533800\n> > .\n\n## \n\nRegards,\n\nMarc\n. Seems fine, thanks\n. Yes, I have a spike locally that fixes this (developed separately to this\nemail) - I'll see what the status of that is.\nOn 23 Aug 2014 11:21, \"James Ford\" notifications@github.com wrote:\n\n> It appears that at the lowest level this library is working with all\n> values as objects, and that this will generate garbage do to\n> boxing/unboxing at least once for each value written or read. This is a\n> major concern for games, or other fps dependent applications for which\n> unexpected GC passes are noticeable to the user.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/15.\n. I was pleasantly surprised to see emit code here; I was (from experience) only expecting to see the runtime fallback implementation. I can look at the IKVM - probably a Type vs Type mismatch (needs a call to MapType, IIRC). However, 2 things:\n- inheritance: since interfaces aren't per-level, this won't work with inheritance - that should probably be checked for\n- any chance of a test/example usage? (sorry if it was there and I missed it). Ideally should cover class, struct, inheritance (expect to fail), and using both runtime and compiled implementation.\n. Ah, fine - makes sense. I'll check on the ShouldSerialize - I am not at a\nPC to answer that.\nOn 23 Aug 2014 23:14, \"James Ford\" notifications@github.com wrote:\n\n> This is more of a \"heads up\" pull request it isn't actually tested (unit\n> test or otherwise) yet. Are there any unit tests in place for the\n> ShouldSerialize Get/Set pattern i can look at as a model? In addition i'll\n> have some of my own project code attempting to make use of this by the end\n> of the day, and thereby it will get some verification if working as\n> intended or not.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/16#issuecomment-53168090.\n. k; thanks for the update\n. This is actually the correct application of reading an individual value; in\nthe protobuf wire format, streams can be directly appended. If a field is\nduplicated, it is the **last occurrence** that wins (except for sub-items,\nwhere they are merged). To do anything different would be to parse the data\nincorrectly. To read lists, you should use the separate \"items\" based\nmethod - apologies, I am on mobile and don't have the name to hand.\n\nOn 8 September 2014 at 19:46, arobincaron notifications@github.com wrote:\n\n> I am using Extensible to implement a serialized type that can handle\n> arbitrary data members. One of those members is a list of items. To set the\n> values of this members I use AppendValue and to get it's values I use\n> GetValues. Unfortunately I find that GetValues only returns the last value\n> added. By inspecting the byte stream I see that the data is there.\n> \n> Below you'll find a small sample reproducing the behavior. I would expect\n> the output of this program to be:\n> foo\n> bar\n> \n> Instead you get:\n> bar\n> \n> I believe is caused the loop in ProtoBuf.ExtensibleUtil.GetExtendedValues\n> (around line 76):\n> \n> ```\n>         while (model.TryDeserializeAuxiliaryType(reader, format, tag, type, ref value, true, false, false, false) && value != null)\n> ```\n> \n> Passing false as the \"asListItem\" parameter causes\n> TryDeserializeAuxiliaryType to return only the last value.\n> \n> class Program\n> {\n> static void Main(string[] args)\n> {\n> var x = new SampleExt();\n> x.AddData(\"foo\");\n> x.AddData(\"bar\");\n> foreach (var value in x.GetData())\n> {\n> Console.WriteLine(value);\n> }\n> }\n> \n> class SampleExt : Extensible\n> {\n>     public string[] GetData()\n>     {\n>         return GetValues<string>(this, 1).ToArray();\n>     }\n> \n> ```\n> public void AddData(string value)\n> {\n>     AppendValue(this, 1, value);\n> }\n> ```\n> \n> }\n> \n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/20.\n\n## \n\nRegards,\n\nMarc\n. the fix is noted and appreciated, but no longer applies now that 2.3.0 has gutted the protogen tools; the PR is unmergeable, so I can't merge just to say thanks - but: thanks.. This is an odd one. Thanks for putting a sample together to demonstrate it. I genuinely don't know how deep this rabbit hole will turn out to be.\n. Suggest we keep this in one place only: http://stackoverflow.com/questions/25989234/adding-attributes-to-the-fields-of-runtimetypemodel-types\n. Like this:\n\n```\n    var lookup = new Dictionary<int,Type> { { 1, typeof(SHWrapperData)\n```\n\n}, { 2, typeof(ObjectPastStateData) } };\n        Serializer.TypeResolver resolver = i =>\n        {\n            Type t;\n            return lookup.TryGetValue(i, out t) ? t : null;\n        };\n\n```\n    object obj;\n    while(Serializer.NonGeneric.TryDeserializeWithLengthPrefix(bs,\n```\n\nPrefixStyle.Base128, resolver, out obj))\n        {\n            // process obj\n        }\n\nOr perhaps avoid the dictionary if the numbers are hard-coded:\n\n```\n    Serializer.TypeResolver resolver = i =>\n    {\n        switch(i)\n        {\n            case 1: return typeof(SHWrapperData);\n            case 2: return typeof(ObjectPastStateData);\n            default: return null;\n        }\n    };\n\n    object obj;\n    while(Serializer.NonGeneric.TryDeserializeWithLengthPrefix(bs,\n```\n\nPrefixStyle.Base128, resolver, out obj))\n        {\n            // process obj\n        }\n\nAny good?\n. Ah, just noticed you're probably using TypeModel, in which case what you have in the hastepin should work... ish. Can you clarify what currently goes wrong? what happens?\n. The buffering is used also for functional reasons, specifically: lengths\nare not precomputed in all cases, so buffering allows mutation later.\n\nI'll check on the default length thing; but it should retain _minimum_\nlength\n\nWeak references: yes, should be fine\n\nResizeAndFlushLeft - I will have to check (not at a PC currently)\n\nGood thoughts, thanks\nOn 8 Oct 2014 11:05, \"tbella\" notifications@github.com wrote:\n\n> The BufferPool throws OutOfMemory exception when serializing large objects\n> on x86 platforms. In our case one of the fields is a byta array containing\n> 64 MB data. Possible improvements:\n> - Remove buffering from ProtoWriter: dirently write to the stream,\n>   buffering should be performed by the underlying stream.\n> - Do not only cache default-sized buffers. The real gain would be in\n>   caching big buffers allocated on the Large Object Heap. They are\n>   responsible for memory fragmentation and also more expensive to re-allocate.\n> - Use weak references for cached buffers. They could be automatically\n>   collected in low-memory situations.\n> - Re-use cached buffers in ResizeAndFlushLeft method.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/32.\n. Cool; I will review later - not at a PC right now\nOn 8 Oct 2014 15:48, \"tbella\" notifications@github.com wrote:\n\n> Thank you for the quick response. I have just posted Pull Request #33\n> https://github.com/mgravell/protobuf-net/pull/33 addressing weak\n> references, first-chance OutOfMemoryExceptions and caching large buffers.\n> The BufferPool.GetBuffer can also receive a minSize argument when the size\n> of the required buffer is known (possibly ProtoReader?)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/32#issuecomment-58369364\n> .\n. That scenario is not supported.\nOn 11 Oct 2014 20:42, \"Michael\" notifications@github.com wrote:\n\n> Hello. I have been trying to find a way to preserve object references\n> between multiple serializations to streams. I tried serializing a list of\n> objects to a file stream (with the reference features enabled) and it\n> worked for that single list of objects in the stream. But, I need to keep\n> object references across multiple streams or serializations. Is it\n> possible?\n> \n> Forgive me if I've overlooked some documentation on how to do this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/34.\n. Will reply to the group, but the tl;dr; version is \"cannot repro; please provide an example\" - my working-fine example is below:\n\n```\nusing ProtoBuf;\nusing System;\nusing System.IO;\n\nstatic class Program\n{\n    static void Main()\n    {\n        var a = new A {\n            location = new Location {\n                city = \"someCity\",\n                coordinate = null\n            }\n        };\n        var ms = new MemoryStream();\n        Serializer.Serialize(ms, a);\n        var hex = BitConverter.ToString(\n            ms.GetBuffer(), 0, (int)ms.Length);\n        Console.WriteLine(hex);\n        // outputs: 22-0A-12-08-73-6F-6D-65-43-69-74-79\n    }\n}\n[ProtoContract]\nclass A\n{\n    [ProtoMember(2)]\n    public string someField { get; set; }\n\n    [ProtoMember(4)]\n    public Location location { get; set; }\n}\n[ProtoContract]\nclass Location\n{\n    [ProtoMember(1)]\n    public Coordinate coordinate { get; set; }\n    [ProtoMember(2)]\n    public string city { get; set; }\n}\n[ProtoContract]\nclass Coordinate\n{\n    //...\n}\n```\n. The key point, though, is that the above does not emit an 0x0\n. Please also note my mention of `GetBuffer()` and over-sized backing buffers (on the group reply); not sure if this is what is causing the confusion, but: I see people make that mistake _a lot_ (but I must note: that is nothing to do with protobuf-net, and is simply a feature of how the framework's `MemoryStream` class works)\n. Another random thought; is it possible that your string has a trailing nul? That would result in:\n\n```\n(blah...)-12-09-73-6F-6D-65-43-69-74-79-00\n```\n\n(in partcular, note the 12-09-...-00) - note that this is still perfectly valid protobuf, and if _this_ is what the scenario is, I would say that protostuff has a string-reading bug - sounds unlikely, though.\n. I'm assuming this is \"SOLNA\" ?\n\nAgreed: tag 90 is field-number 11. Just to check: _is there_ a field 11 in\nyour message? If not, it sounds like a nasty bug in the output generation.\nI would love to see a complete runnable sample that generates the wrong\noutput.\n\nOn 15 October 2014 11:15, Johannes Elgh notifications@github.com wrote:\n\n> Okay sorry, that zero in the sequence above wasn't related to my problem.\n> \n> This is from the Java side, I'm stepping through the ProtoStuff code. This\n> array is the input buffer. And remember that java and c# byte\n> representation are different (java -127 to 128 and c# 0 to 255, right?).\n> \n> ...\n> [201] = 90\n> [202] = 7\n> [203] = 26\n> [204] = 5\n> [205] = 83\n> [206] = 79\n> [207] = 76\n> [208] = 78\n> [209] = 65\n> ...\n> \n> This is where the Location object is stored. 90 is read:\n> \n> final int tag = readRawVarint32();\n> final int fieldNumber = tag >>> TAG_TYPE_BITS; // TAG_TYPE_BITS = 3\n> \n> So this makes fieldNumber equal 11, which is the Location message nested\n> inside class A (doesn't really coincide with the example in my initial\n> post).\n> This makes ProtoStuff look into the Schema and find that field 11 is of\n> type Location and it starts handling the nested message. The first thing it\n> reads, inside this nested message, is buffer position 202: 7. It uses the\n> two lines above making tag=7 and therefore fieldNumber=0.\n> \n> The continuation of the two lines above:\n> \n> ```\n>     final int tag = readRawVarint32();\n>     final int fieldNumber = tag >>> TAG_TYPE_BITS;\n>     if (fieldNumber == 0)\n>     {\n>         if (decodeNestedMessageAsGroup && WIRETYPE_TAIL_DELIMITER == (tag & TAG_TYPE_MASK)) // WIRETYPE_TAIL_DELIMITER = 7\n>         {\n>             // protostuff's tail delimiter for streaming\n>             // 2 options: length-delimited or tail-delimited.\n>             lastTag = 0;\n>             return 0;\n>         }\n>         ...\n> ```\n> \n> ProtoStuff is going through all the incoming fieldNumbers and aborts\n> looping when fieldNumber is 0. Therefore the nested message Location is\n> never populated since the looping is aborted immediately. It moves out to\n> the outer message (class A). Here the next byte it finds is 26 (pos 203\n> above). This should actually belong to the nested message Location but is\n> populating the wrong field in the outer message.\n> \n> As I described in the GoogleGroup thread I'm very new to Protocol Buffers\n> so I'm not sure what this all means. But the byte at position 202 7 is\n> interpreted as Location population is over.\n> \n> Can you make anything of this very long description? Is it something that\n> you want from me in order to clarify?\n> \n> Thanks for your help.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/35#issuecomment-59184959\n> .\n\n## \n\nRegards,\n\nMarc\n. So to be clear, then; what makes you think there is a problem? The 9 bytes in the binary you posted most recently says:\n\n```\n\"field 11, string, length 7\" (2 bytes)\n    \"field 3, string, length 5\" (2 bytes)\n        \"SOLNA\" (5 bytes)\n```\n\nIf field 11 is a location with Coordinate = null, Accuracy = 0 and City = \"SOLNA\", then that is entirely reasonable. So: what makes you think there is an issue? What is the symptom? \n. From your comment here:\n\n> The first thing it reads, inside this nested message, is buffer position 202: 7. It uses the two lines above making tag=7 and therefore fieldNumber=0.\n\nwhat you are describing here is a bug in protostuff; a tag with value 90 indicates a length-prefixed type (aka \"string\"). The correct thing to do next is to read a varint, which indicates the length of the content - in this case, 7 bytes. The _content_ starts _after_ the 7. If protostuff isn't reading the varint that denotes the length: then it is doing it wrong. You can refer to the \"Strings\" and \"Embedded Messages\" sections of [the encoding spec](https://developers.google.com/protocol-buffers/docs/encoding) for more information.\n. Step back; what are these 3 different DLLs? What is the difference between\nthem? Are they targeting different platforms? Or...?\nOn 15 Oct 2014 21:51, \"Snow-Okami\" notifications@github.com wrote:\n\n> So I have two other assets in my unity3d project that also now use\n> protobuf-net. I see that when you create a type model and a serializer, you\n> use your own built version of the library. At first I thought it would be\n> easy as swapping out the protobuf-net.dll file, but it isn't. It causes\n> things from whichever asset that had that dll file to have things missing.\n> Seeing how I have now 3 different protobuf-net.dll files (my own, and 2\n> others), how can I centralize into just depending off of one so that they\n> all can work in unison? I hope my question makes sense\n> \n> In other words how can I get them to all play nicely?\n> \n> Thank you!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/36.\n. Did you ask the same on stackoverflow? I answered this earlier today:\nhttp://stackoverflow.com/questions/26528610/c-sharp-protobuf-with-tcpclient-how-can-i-separate-packets\nOn 23 Oct 2014 06:48, \"Lee\" notifications@github.com wrote:\n\n> Hello,\n> \n> If i send packet like this, http://codepad.org/cYB0AyyN\n> And receive packet like this, http://codepad.org/5IR4zfRr\n> \n> How can i separate two persons if in one time received all...\n> \n> Thanks in advance.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/38.\n. I've had quite a lot of discussion on this one lately. Short recap:\n- yes, I'm basically in favor of adding the UTC kind, and wish it had been added at the origin\n- but: there is a genuine and real problem with enabling this by default, as it will change the output when people expect it to be consistent\n- but I'm all in favor of making it opt-in, disabled by default\n\nGiven that it will involve IL-emit changes, I'm tempted just to do it, to avoid the ongoing debate ;p\n\nI have _some ideas_ towards some kind of \"backlevel compatibility\" flag to avoid having to set lots of flags manually, although I'm also tempted to do some kind of assembly-level configuration, i.e.\n\n```\n [assembly:ProtoConfiguration(DateTimeKind = true, GuidsShouldNotBeBatshitCrazy = true)]\n```\n\nBut that is probably a discussion for another thread.\n. This is fixed next deploy: https://github.com/mgravell/protobuf-net/commit/e601b359c6ae56afc159754d29f5e7d0f05a01f5\n. Yes I do, but fair question.\n\nOn 26 May 2015 at 15:22, Bar Arnon notifications@github.com wrote:\n\n> Thank you. this is very good news :).\n> \n> Do you have any plans of pushing a new nuget version with this commit?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/44#issuecomment-105541238\n> .\n\n## \n\nRegards,\n\nMarc\n. You could actually try the alpha build here:\nhttps://www.nuget.org/packages/protobuf-net/2.1.0-alpha-1\n\nThis includes the DateTimeKind code, I believe.\n\nOn 6 January 2016 at 13:05, Bar Arnon notifications@github.com wrote:\n\n> @roberttaylor26 https://github.com/roberttaylor26 while you wait... if\n> you can handle _all_ DateTimes being _either_ DateTimeKind.Utc _or_\n> DateTimeKind.Local you can set it with reflection. There are explanations\n> and examples on my blog\n> http://blog.i3arnon.com/2015/10/03/protobuf-net-datetime-bug/.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/44#issuecomment-169319217\n> .\n\n## \n\nRegards,\n\nMarc\n. Interesting. Does it do that if the number is 1, not 0? 0 is not a valid protobuf field number\n. Ah, this is probably the annoying \"implicit defaults\" - an early design choice that is much regretted. Try adding:\n\n[DefaultValue(true)]\n\nTo the property. That should hopefully fit it.\n. This is simply a poor design choice that happened many many years ago in v1 of protobuf-net. What I should have done is only use explicit default values. How the code was implemented - and remains the default, for compatibility - is that it assumes \"zero\" as the default, unless told otherwise (or unless some kind of conditional serialization is in play, for example Nullable-of-T, ShouldSerialize*, or *Specified). There is actually an option to disable this if you create your own RuntimeTypeModel instance rather than using .Default - something like \".UseImplicitZeroDefaults\".\n\nThe [DefaultValue(true)] in this case simply gives the library more clue as to what is an actual value vs a default.\n. the fundsmental thing here is that the .proto schema proessing needs a\nsingnificant overhaul (read: rewrite) in order to be viable in the\nxplat/core-clr world. This would be a natural thing to fold into that, but\nin some ways I'm reluctant to stir too hard at the old protoc/xslt code.\n\nthe good-ish news is that it is all protocol compatible, but I acknowledge\nthat it is inconvenient to do so. Needs work, and I have a chunk of time\nearmarked for protobuf-net love this quarter.\n\nOn 1 Feb 2017 5:06 p.m., \"DapperTayra\" <notifications@github.com> wrote:\n\n> +1\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/47#issuecomment-276716537>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsEbwksQtUcGRUtl53pGmztd3oyZyks5rYLuAgaJpZM4C8pza>\n> .\n>\n. for info, I'm starting some ANTLR work to see what falls out; it isn't\nbeing ignored\n\nOn 1 Feb 2017 7:23 p.m., \"Marc Gravell\" <marc.gravell@gmail.com> wrote:\n\n> the fundsmental thing here is that the .proto schema proessing needs a\n> singnificant overhaul (read: rewrite) in order to be viable in the\n> xplat/core-clr world. This would be a natural thing to fold into that, but\n> in some ways I'm reluctant to stir too hard at the old protoc/xslt code.\n>\n> the good-ish news is that it is all protocol compatible, but I acknowledge\n> that it is inconvenient to do so. Needs work, and I have a chunk of time\n> earmarked for protobuf-net love this quarter.\n>\n> On 1 Feb 2017 5:06 p.m., \"DapperTayra\" <notifications@github.com> wrote:\n>\n>> +1\n>>\n>> \u2014\n>> You are receiving this because you are subscribed to this thread.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/mgravell/protobuf-net/issues/47#issuecomment-276716537>,\n>> or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AABDsEbwksQtUcGRUtl53pGmztd3oyZyks5rYLuAgaJpZM4C8pza>\n>> .\n>>\n>\n. @yaakov-h  the schema overhaul needed for this is complete [as of 2.3.0](http://blog.marcgravell.com/2017/06/protobuf-net-gets-proto3-support.html); \"oneof\" support is in the code-generator and library; example: https://protogen.marcgravell.com/#g01989f8da1f4ce8ab358756115478c37\r\n\r\nBasically: this is all done. Marking as closed.. Yeah, I'm *not* going to simply remove all enum verification, so I'm not going to merge the PR \"as is\", but I am open to suggestions on what the right \"fix\" is - if there is any. As noted, there is support to disable enum verification, and this is done automatically if `[Flag]` is on the enum. It can also be specified per-enum in the metadata via `[ProtoContract(EnumPassthru = true)]`. And it can be set at runtime for other types via `RuntimeTypeModel`.\r\n\r\nIs that not enough?. I'm going to close this PR as it is unmergeable in `git` terms, *plus* I think the code suggested is the wrong fix; but I'm open to further discussion on the topic both here or in a separate issue.. Just as I was reading the example, mdonoughe replies perfectly correctly. Basically: give it a clue that the default is `true`.\n. all done in 2.3.0. Yes, it is certainly a scenario I would like the library to support, but no\nI haven't had chance to investigate.\n\nOn 31 December 2014 at 08:53, Anthony Sneed notifications@github.com\nwrote:\n\n> Are there plans to support CLR Core for compatibility with ASP.NET 5.0?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/56.\n\n## \n\nRegards,\n\nMarc\n. Zero is a valid length for protobuf data. This comes down to \"implicit zero\ndefaults\", something I which I had never put into v1; there are multiple\nways to force it to write the false (including disabling implicit zero\ndefaults), but ultimately: zero is a valid length!\nOn 8 Jan 2015 12:28, \"justkao\" notifications@github.com wrote:\n\n> I have following object type that I want to serialize using protobuf\n> v2.0.0.668:\n> \n> ```\n> [DataContract]\n> public class SimpleCustomType\n> {\n>     [DataMember(Order = 1)]\n>     public bool BoolProperty { get; set; }\n> }\n> ```\n> \n> Calling following code will not write any data to stream.\n> \n>  ProtoBuf.Serializer.Serialize(stream, new SimpleCustomType());\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/61.\n. You can use `ProtoReader` to parse things manually looking at wire-type and\nfield numbers - so essentially you could _create_ that tool; something\nquite that complete is not included though.\n\nOn 26 January 2015 at 07:53, lofrank notifications@github.com wrote:\n\n> As we known, protoc.exe has a '--decode_raw' option, which can decode\n> protobuf binary without proto description file.\n> Is there any method to do this using protobuf-net?\n> \n> Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/65.\n\n## \n\nRegards,\n\nMarc\n. No, it hasn't been discontinued; I simply haven't had a pressing need to\nre-release it. There are, as always, some remaining bugs and feature\nrequests, but I have to balance time between multiple projects, family, and\nother commitments. I am currently actiuvely researching options for\nprotobuf-net in the vNext world, which introduces an entirely different\nruntime and BCL, which is where I expect the bulk of any protobuf-net\nefforts in the near future to be focused.\n\nMarc\n\nOn 23 February 2015 at 06:01, Scratch notifications@github.com wrote:\n\n> Hi there.\n> There's been no updates since 2013. Should we look for alternatives like\n> capnproto-net?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/72.\n\n## \n\nRegards,\n\nMarc\n. It would be good to improve the tooling around .proto schema parsing and\ncode generation, ideally in a 100% managed way that was platform\nindependent, and with proto3 language support. CoreCLR support is\nin-progress. I'm open to feature requests beyond that.\nOn 25 May 2015 9:12 pm, \"Nikolai Mynkow\" notifications@github.com wrote:\n\n> Hello @mgravell https://github.com/mgravell ,\n> Would you share a short list of things which you want to improve and the\n> reasons?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/72#issuecomment-105305092\n> .\n. It isn't discontinued - just..  I haven't had massive need for changes for\na while, and other projects have consumed my time. I expect coreclr will\nget some love soon (have done dapper, working on se.redis, etc)\nOn 19 Oct 2015 11:28 pm, \"Vladyslav Taranov\" notifications@github.com\nwrote:\n\n> Hi! I had the same feelings so I made a fork of protobuf-net which now\n> contains multiple improvements and fixes especially for better reference\n> tracking. You can find it here\n> https://github.com/AqlaSolutions/AqlaSerializer.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/72#issuecomment-149365418\n> .\n. Hugely active right now; closing this. I can't disagree - yup, makes sense\n. I wouldn't way no, for sure\nOn 26 Mar 2015 17:59, \"Sandor\" notifications@github.com wrote:\n\n> That would help new users a lot if there was a readme.md.\n> And that would be awesome to migrate the soon to be discontinued google\n> code wiki.\n> \n> Do you want a pull request with a readme.md proposal?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/76.\n. IIRC that is already pooled and reused quite aggressively... passing one in\nis awkward because you don't know the sizes in advance. I'm open to ideas,\nbut it isn't trivial.\n\nMarc\n\nOn 26 August 2015 at 18:48, ikopylov notifications@github.com wrote:\n\n> [image: :+1:]\n> \n> With large objects ProtoWriter reallocate inner _ioBuffer_ many times.\n> This leads to a high memory traffic.\n> \n> So it would be great to reuse ProtoWriter with same _ioBuffer_ inside or\n> give a possibility to pass an external buffer through the constructor.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/77#issuecomment-135121515\n> .\n\n## \n\nRegards,\n\nMarc\n. To do this, call `AppendBytes`; pass null as the existing data. For example:\r\n\r\n    var payloadBytes = ProtoBuf.ProtoReader.AppendBytes(null, reader);\r\n\r\n(from https://github.com/mgravell/protobuf-net/blob/parser/src/protogen.site/Views/Home/DecodeBytes.cshtml#L58). That's fine, but:\n- I'm not a Windows Phone developer\n- I'm not a Silverlight developer\n- I'm not a Windows Metro / RT developer\n- I'm not a xamarin developer\n- and why the prejudice against Phone 8.1?\n\nPut simply: I lack the tools and time to configure builds for, and support,\na wide range of frameworks that _I otherwise wouldn't touch_.\n\nI'd be more than happy if someone else wanted to put build packages\ntogether for those frameworks, test those packages, etc - but it isn't\nsomething that just happens magically, and despite all the rumours it isn't\na case of clicking 3 buttons in the IDE...\n\nOn 2 June 2015 at 02:55, ezverev notifications@github.com wrote:\n\n> If you wish your library to be as inclusive as possible i.e. be as\n> available as possible you should target:\n> 1. .NET 4.0\n> 2. Windows 8\n> 3. Windows Phone Silverlight (last version)\n> 4. Silverlight 5\n> 5. All xamarins\n> (do no include Windows Phone 8.1)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/79#issuecomment-107771706\n> .\n\n## \n\nRegards,\n\nMarc\n. Ah, sorry; my bad; I misunderstood; this just pushes the issue up one\nlevel; it is **really, really hard** to support that range of platforms (\nportable-net45+win+wpa81+wp80+MonoAndroid10+xamarinios10+MonoTouch10)\nconcurrently\nand efficiently - they have massively different reflection and\nmeta-programming APIs, and the PCL subset / intersection is next to\nuseless. It can be _done_, but that doesn't mean it is a _good idea_.\n\nAlso: add to my list of \"frameworks that I don't use\": ios, mono-android and mono-touch.\n\nIf I was full time supporting this library as a commercial project: sure, I'd pick those up in a heartbeat.\n\nOn 2 June 2015 at 11:28, ezverev notifications@github.com wrote:\n\n> Oh my, Marc.\n> My reply was not for you but for R2D221. I was telling HIM how to make HIS\n> PCL more including. Yours is pretty fine/all right/super-puper/mega-fun.\n> Pay no attention please :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/79#issuecomment-107910966\n> .\n\n## \n\nRegards,\n\nMarc\n. That sounds like it may be only a small amount of work, but it isn't\nsomething I currently have setup locally to be able to target; I will need\nto investigate what exact target frameworks, nuget targets, etc I need to\nadd. It _might_ get better with DNX for multi-target builds (I have a\nbranch exploring that), but: the current beta DNX tools cannot successfully\nbuild the existing libs (even for core .NET) due to strong naming. I'll\nhave to see what I can do with (yet another) csproj...\n\nOn 2 June 2015 at 11:52, ezverev notifications@github.com wrote:\n\n> Offtopic.\n> \n> Marc,\n> \n> May I let you know that MonoAndroid10+xamarinios10+MonoTouch10 are very\n> close to wp80 and are supported by your library. As a matter of fact I was\n> pushed to use your library when I started developing for Xamarin.Android.\n> The problem is the DataContractSerializer (that is meant to be a\n> cross-platform WCF/WebServices serializer) failed i.e. it serializes\n> Dictionaries differently on Microsoft platforms and on Xamarin\n> (Android/iOS). May be this is a Xamarin failure, I don't know. Fact is: for\n> those who adopt Xamarin protobuf-net is the cure. You may not use that\n> framework but you do help it a great deal.\n> \n> Big thanks!\n> P.S. I would not think a second to subscribe for material support of what\n> you do. Actually I spent some time searching for a way but did not find\n> any. If there is one please give me a hint.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/79#issuecomment-107914967\n> .\n\n## \n\nRegards,\n\nMarc\n. Do you mean System.Runtime.Serialization.EnumMemberAttribute? If so: indeed - it is a `string`. I believe there is a `ProtoEnumAttribute` in the protobuf namespace that should do what you want.\n. The current build makes no attempt to `TryParse` etc the enum values,\nbecause _in the general case_, it is not expected that they will have\nnumeric values in `EnumMemberAttribute` attributes. Dapper treats enums as\ninteger types. However, can I ask: do you actually need to do _anything_\nhere? normally, enums serialize just fine without any extra work. And there\nare ways such as `[Flags]` to get it to treat it as a raw number without\nenum handling at all. Finally, there is always runtime model configuration.\nAre any of those options useful to you?\n\nOn 21 April 2015 at 00:00, mrent notifications@github.com wrote:\n\n> Yes, the serialization EnumMember. We are trying to stick as close as\n> possible to built-in serialization attributes, since we are supporting\n> different serializers (ProtoBuf and JSON). So we have been using\n> DataContract/ordered DataMembers instead of serializer specific attributes.\n> When it comes to enum values it seems however difficult to accomplish this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/80#issuecomment-94587834\n> .\n\n## \n\nRegards,\n\nMarc\n.  I don't think we can _just_ enable this - it is a breaking change, especially for people who expect the data output to be reproducible. To merge this, I would want to make this \"opt-in\", perhaps via a global setting, so that it doesn't adversely impact other users. If it was in from day zero, that would be different.\n\nThoughts?\n. Note: it is fine to always process during deserialization as long as the old default is preserved: it is only during serialization that we need to check a flag \n. I need to look more at the arrays - yes my main concern was the date times\n. I'm fully aware of the aim that parsers should ignore unknown fields; but\nI'm also aware that many people expect the output to remain consistent -\nand I know of a few implementations that this change would actively break\n(for example, when using the output as \"set\" values in things like redis).\nIt would also break a lot of peoples' tests that assert \"the output of this\ninput is this binary\". Hence why I feel it should be made opt-in. Does that\nmake sense?\nOn 4 May 2015 5:09 pm, \"Rob Taylor\" notifications@github.com wrote:\n\n> Thanks for taking a look. There were two changes i made:\n> \n> 1) Empty arrays should be deserialized as an empty array and not as null.\n> This seems like a low risk bug fix, did you have an issue with this?\n> \n> 2) DateTimeKind is serialized with the DateTime as a field. From your\n> email it seemed like this was the change that most concerned you, is that\n> correct? I'm fairly new to protobuf but on\n> https://developers.google.com/protocol-buffers/docs/encoding it mentions\n> that \"When the message is being decoded, the parser needs to be able to\n> skip fields that it doesn't recognize.\". In the event where someone was\n> using a library that wasn't the protobuf-net library (or if they were using\n> a version of protobuf-net without this fix) wouldn't the parser just skip\n> the DateTimeKind field and the behaviour would be as it currently is with\n> the DateTimeKind not being serialized?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-98768146.\n. good question; my initial thought is possibly via an instance property on\nRuntimeTypeModel, like how `AllowParseableTypes` works; however, what we'd\nprobably need to do is:\n- add a **new overload** to BclHelpers.WriteDateTime that accepts a boolean\n  to indicate whether to include the kind\n- forward the old WriteDateTime to WriteDateTime(value,dest,false);\n- optional: mark the old overload as `[Obsolete]`\n- change the DateTimeSerializer code in both Write and EmitWrite to include\n  the extra parameter (and in the case of EmitWrite: to select the correct\n  method, which could perhaps be done by making EmitWrite ignore methods\n  where `[Obsolete]` is defined)\n\nThe point of this lot is due to the ability of protobuf-net to generate\nserialization assemblies; we don't want old serialization assemblies to\nbreak with `MissingMethodException`, and we want newly generated\nserialization assemblies to respect the options that were set on their\n`RuntimeTypeModel`.\n\nThat lot probably isn't trivial, though - and depends on reflection/IL\nknowledge. I might be able to jump in and help on some of that if it is\nproblematic. I'm open to alternative implementation ideas too!\n\nOn 4 May 2015 at 17:26, Rob Taylor notifications@github.com wrote:\n\n> Sure that makes sense. Do you know how we'd go about implementing the\n> opt-in option flag?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-98771900.\n\n## \n\nRegards,\n\nMarc\n. The IKVM API is _basically_ the same - which is why it can switch a lot\njust based on \"using\" directives. I can fix that up, though - I wouldn't\nstress about it. Will review changes tomorrow.\nOn 4 May 2015 7:52 pm, \"Rob Taylor\" notifications@github.com wrote:\n\n> OK, I've had a go. I've committed the following.\n> - add a _new overload_ to BclHelpers.WriteDateTime that accepts a\n>   boolean to indicate whether to include the kind\n> - forward the old WriteDateTime to WriteDateTime(value,dest,false);\n> - optional: mark the old overload as [Obsolete]\n> \n> The last point involving modifying the EmitWrite method in CompilerContext\n> to ignore Obsolete methods - I can do this when using System.Reflection but\n> I haven't come across IKVM before. I tried using\n> Attribute.GetCustomAttribute but I couldn't see an Attribute class when I\n> decompiled IKVM.Reflection dll...any chance you know how to get custom\n> attributes using IKVM off the top of your head :-) ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-98811909.\n. > There should be a requirement for the protobuf-net library to be able to deserialize protobuf strings serialized by older versions so I think that any change that violates this rule is a breaking change.\n\nYes, there is, and there absolutely must be. But that is largely unrelated to the issue. As I tried to explain, the problem is not about deserialization (indeed, I mentioned that deserialization wouldn't even need to check any config option)  but: serialization, and the effects of suddenly changing the output of the serialization process between versions. I also tried to outline several of the scenarios _that I actively know about_ that would be impacted by this. People reasonably expect the binary data to change if they add fields etc, but not **unexpectedly** from this; the path of least failure is thus to make it an opt-in configuration option.\n\nI'm sorry if this has caused you frustration, but I need to consider _all_ users.\n. The redis scenario was simply one of many that immediately leapt to mind re people not expecting the same data to serialise to different bytes today vs tomorrow. And technically, that would most likely be a value not a key.\n\n> From my point of view the only requirement the library should support is... \"The protobuf-net library must be able to deserialize protobuf strings serialized by older versions.\"\n\n\"don't unexpectedly change the output\" is _also_ a key requirement. And one that can be accommodated at the same time by making it a configurable option.\n\n> but as a user it would be frustrating having to set various obscure options in order to have the library work correctly\n\nI understand your point - and sure, if this were day zero, it would be great to include this from the start, but: it wasn't, and _because_ I need to support existing users, I can't just change this blindly. I think it is a posititive change, but it needs to be done with appropriate consideration for known scenarios.\n\nI'm still trying to stabilise the CoreCLR branch, but once that is in, I'll see if I can bring these things together. But if I do: there _will_ be a configuration setting.\n\nIt makes me wonder if there's some kind of \"compatibility profile\" that could be devised - heck, I'd nuke implicit zero defaults at the same time... but I wonder if rather than setting lots of individual properties, setting some kind of `CompatilibilityOption = {version}`. That is mainly rhetorical and probably isn't very thoroughly thought through yet.\n. Bumping the major version doesn't solve the underlying problem; I have now addressed this as an **opt-in** behaviour re related issue #44 - opt-in flag available from next build\n. Yep, I still need to look at that part - and a few other things (unrelated)\nbefore I package and deploy.\nOn 26 May 2015 17:48, \"Rob Taylor\" notifications@github.com wrote:\n\n> FYI,\n> \n> It looks like nested empty arrays are still be deserialized as null.\n> \n> [Test]\n> public void InnerEmptyArrayShouldNotBeDeserializedAsNull()\n> {\n> using (MemoryStream ms = new MemoryStream())\n> {\n> var instance = new[]\n> {\n> new Test\n> {\n> tests = new int[0]\n> },\n> };\n> \n> Serializer.Serialize(ms, instance);\n> \n> ms.Flush();\n> ms.Position = 0;\n> var obj = Serializer.Deserialize<Test[]>(ms);\n> \n> Assert.That(obj[0].tests, Is.Not.Null);\n> }\n> }\n> \n> On Tue, May 26, 2015 at 4:45 PM, Rob Taylor rob.taylor.21@gmail.com\n> wrote:\n> \n> > Ah thanks very much that is exciting! Did that include the empty array\n> > serialization bug fix also - where empty arrays were being deserialized\n> > to\n> > null instead of an empty array? I kind of lumped that in together with\n> > the\n> > DateTime issue in my original pull request.\n> > \n> > It would be good to know when you intend to publish a version to nuget,\n> > I'll subscribe to the issue.\n> > \n> > Thanks for resolving this :-)\n> > \n> > On Tue, May 26, 2015 at 11:12 AM, Marc Gravell <notifications@github.com\n> > \n> > wrote:\n> > \n> > > Bumping the major version doesn't solve the underlying problem; I have\n> > > now addressed this as an _opt-in_ behaviour re related issue #44\n> > > https://github.com/mgravell/protobuf-net/issues/44 - opt-in flag\n> > > available from next build\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > <\n> > > https://github.com/mgravell/protobuf-net/pull/82#issuecomment-105476966>\n> > > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-105599639.\n. Actually, there is something you can do here **if and only if** the additional data is a direct child of the original root object. For example: if the original is:\n\n```\nFoo {\n    a = 1;\n    b = 2;\n    repeated c = 3;\n}\n```\n\nThe protobuf format is both:\n- appendable (append===merge)\n- not required to be in order\n\nThis means that you can actually drop the \"b\" part (for example) onto the wire separately from the rest, simply by appending it correctly. To append with the right headers, the easiest thing to do is to create a dummy object with just the b:\n\n```\nFooBOnly {\n    b = 2;\n}\n```\n\nNow you can:\n- serialize a Foo that doesn't include a \"b\"\n- serialize a FooBOnly with a \"b\"\n\nWhen the receiver seaerializes as Foo, it will merge both parts automatically.\n\nAny use?\n. I see you closed and reopened this; did you still need input? If so: can\nyou clarify?\nOn 30 Apr 2015 7:33 pm, \"brentww\" notifications@github.com wrote:\n\n> Reopened #83 https://github.com/mgravell/protobuf-net/issues/83.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/83#event-294357781.\n. I don't think it is a good idea to leak the actual `ioBuffer`, because that is leased from the `BufferPool` -  basically:\n- the contents might have been changed completely by another caller by the time the recpient sees it\n- it would allow the recipient to screw up someone else's `ioBuffer`\n\nI'd be fine with adding context about the position, length, etc... but the `ioBuffer`: probably not a good idea\n. I would also question the usefulness; it isn't like xml and json - most people won't have a clue how to interpret the data.\n. the only way to safely do that would be to grab the data from the `ioBuffer` _before_ adding it to the exception, so the only thing you're adding is isolated; however, protobuf is a binary format, and _in the general case_ we should not expect it to be likely to contain text\n. `ioBuffer` can be pretty huge, though - I would advise only copying (say) a max of 100 bytes either side of where it exploded (would need some min/max checks, etc); additionally, note that you should only look at most at the _known available_ bytes - anything past that point is potentially garbage and unrelated to the current problem: it would be unnecessarily confusing to report that as though it were part of the problem, when it isn't.\n\nFinally, in terms of allocation and large blocks, this isn't ideal - it kinda feels like this should be opt-in (although it is fine if the message says \"enable ShowBufferContentsInExceptions to view the data at the time of the error\", or something like that)\n. I'm confused - you've opened and closed within an hour; was this mistaken?\n. Is it possible that any thread is _changing_ the list contents at this\ntime? I suspect the problem is most likely 2 (or more) threads talking to\nthe same _instance_ - some reading (presumably serialising), and one\nwriting - perhaps doing something completely unrelated to serialization,\nlike obj.Items.Add(newItem);\n\nI can try to help, but threading issues need a lot of context, typically.\nOn 16 May 2015 10:21 pm, \"Alexey Solovyov\" notifications@github.com wrote:\n\n> Hi Marc, is there a chance that you can handle this issue, may be we can\n> discuss commercial support?\n> \n> Parallel threads try to serialize Entity with List where obj1 has inside\n> serializable List.\n> \n> We work with protobuf-net more then 1 year, current version 2.0.0.668 and\n> never had problems like that before (or we didn't notice that).\n> \n> We got serialization wrapper:\n> public static byte[] SerializeProtobuf(this object data)\n> {\n> byte[] bt = null;\n> using (System.IO.MemoryStream ms = new System.IO.MemoryStream())\n> {\n> ProtoBuf.Serializer.NonGeneric.Serialize(ms, data);\n> bt = ms.ToArray();\n> ms.Close();\n> }\n> \n> ```\n>     return bt;\n> }\n> ```\n> \n> Also, in the procedure, who is called by parallel threads, we use and\n> deserialization and serialization of the same entity type.\n> \n> All technical nuances can be supplied to you in case of your interest.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/87#issuecomment-102699378\n> .\n. Iirc this is a restriction of the universal runtime: limited reflection,\nincluding both access to non-public members. Not sure there's much I can\ndo...\nOn 16 May 2015 16:58, \"plynkus\" notifications@github.com wrote:\n\n> (Spooling up a clone here to diagnose the root cause, but filing the issue\n> before I forget to.)\n> \n> Found: Failed calls to [ProtoAfterDeserialization]-tagged methods under\n> VS2015 RC with Windows 8.1 and Windows Universal targets when tagged\n> methods are private.\n> \n> Console applications under the same toolchain still exhibit the previous\n> behavior---method invocation no matter the protection level. Migrating\n> existing code from VS2013 to the new toolchain/SDKs exposed the change here.\n> \n> A workaround for now is to change the associated methods to public.\n> Consistent behavior is of course desirable.\n> Support for private methods, as before, is better for encapsulation.\n> \n> As always, many thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/88.\n. closing this down because I don't think the WCF options are going to be supportable going forwards; long term, I think the direction this should take is: gRPC. We're moving in that direction, but I don't see benefit in trying to hack the existing tools any further.. Looks good, thanks\n. Thanks\n. Thanks - appreciated\n. iirc there were, at some point in history, errors in unity from this. It\nmight be fixed now. I'm not a unity user, so.\n\nOn 27 Dec 2016 9:39 a.m., \"Arthur-qi\" <notifications@github.com> wrote:\n\n> why not be using FEAT_SAFE?Did it run slow?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/106#issuecomment-269301591>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHRenrG7rn8Fqc4GcwucZaTb7ew1ks5rMNzIgaJpZM4FqV5P>\n> .\n>\n. Protocol buffers _at the protocol level_ doesn't define inheritance _at\nall_. Protobuf-net adds limited inheritance support, but things like\nmultiple inheritance is complex; to do that properly would require\nconsiderable design, implementation and testing, for what is an edge\nscenario - and arguably one better served by mapping to a simpler DTO model\nthat (as is the nature of DTOs) reflects the reality of the serialisation\nparadigm.\n\nThis isn't on my planned list of things to do. If someone can absorb the\ntime to properly specify, proove (i.e. that it is unambiguous, etc),\ndesign, implement, test, document and support it - I would consider a PR\nfor it.\n\nOn Wed, 11 Nov 2015 18:54 Jochen K\u00fchner notifications@github.com wrote:\n\n> Is that feature planed to be implemented? Is anyone working on this? Is\n> this possible with current protobufer protocol format?\n> \n> I also have a class wich inhertits from multiple\n> class Bbb : AbstractAaa, IHhhh\n> { }\n> and one:\n> class Ddd\n> { public IHhhh BlaBla {get;set;} }\n> \n> Where I try to serialize/deserialize class Dddd\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/107#issuecomment-155876166\n> .\n. It is in progress. Have done Dapper, have done Jil + Sigil this week,\nSE.Redis has a _huge_ PR from MS I'm working through. For protobuf-net, am\nworking through a local spike trying to get it happy. A very busy time if\nyou're a library author / contributor!\nOn 18 Nov 2015 8:19 pm, \"SapientGuardian\" notifications@github.com wrote:\n\n> I'll be needing protobuf support in dnxcore for the foreseeable future, so\n> until there's an official release I'll be maintaining my fork, at least\n> from a bugfix perspective. I think it would be a mistake to use my fork in\n> any production capacity, though I'll end up doing that myself soon.\n> c249dd1\n> https://github.com/mgravell/protobuf-net/commit/c249dd12dda506e9e9d04c7cef3159490353cfb2\n> would suggest that @mgravell https://github.com/mgravell is working on\n> a proper release.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/108#issuecomment-157851052\n> .\n. There has been an experimental rc1 build on nuget for quite some time. Now\nthat rc2 is released, I have a lot of libs to re-deploy; yes, this is on\nthe list.\n\nOn Mon, 16 May 2016 20:05 akatz0813, notifications@github.com wrote:\n\n> @mgravell https://github.com/mgravell any word on support now that RC2\n> is released?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/108#issuecomment-219515951\n. I'll be hoping to work through my list of libraries fairly soon - I\nunderstand that the ecosystem is dependent on libraries. Dapper will\nprobably be first, bit this shouldn't be far behind.\nOn 27 Jun 2016 11:54 p.m., \"akatz0813\" notifications@github.com wrote:\n\n> @mgravell https://github.com/mgravell Realistically do you have an ETA\n> or prioritization for this now that 1.0 RTM is out?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/108#issuecomment-228900172,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsLHbbaWQaslxAmmFZIq6BW_7kWftks5qQFSZgaJpZM4FuWEY\n> .\n. That is a C++ compiler issue; I am unable to advise on what may cause that\n- presumably something in some generated wrapper C++ code files? None of\n  protobuf-net is in C++ and thus none is being compiled here.\n. Thanks\n. Thanks, appreciated\n. Appreciated, thanks\n. Can you provide a concrete example of when this makes something work that didn't before? (ideally a test, but text would be fine)\n. Appreciated, thanks\n. Any chance of a translation? I can run it through Google translate, but it\noften does a less than perfect job compared to a native speaker...\n\nOn Tue, 10 Nov 2015 10:51 Shingo INADA notifications@github.com wrote:\n\n> The following compilation error came to occur from the commit 45a6f6e\n> https://github.com/mgravell/protobuf-net/commit/45a6f6e5c3183d24e27c0bcba56aa47c4d0ff2bb\n> .\n> \n> c:\\work\\protobuf-net\\Serializer.cs(87,11): error CS1502: 'ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream, object, System.Type)' \u306b\u6700\u3082\u9069\u3057\u3066\u3044\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 \u30e1\u30bd\u30c3\u30c9\u306b\u306f\u7121\u52b9\u306a\u5f15\u6570\u304c\u3044\u304f\u3064\u304b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 [C:\\work\\protobuf-net_IKVM\\protobuf-net_IKVM.csproj]\n> c:\\work\\protobuf-net\\Serializer.cs(87,62): error CS1503: \u5f15\u6570 3: 'IKVM.Reflection.Type' \u304b\u3089 'System.Type' \u306b\u5909\u63db\u3067\u304d\u307e\u305b\u3093 [C:\\work\\protobuf-net_IKVM\\protobuf-net_IKVM.csproj]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/121.\n. Yeah, that should be explicitly `System.Type` - a simple fix, and a problem\nthat would only show up in the IKVM build. I will fix when I have the\ncore-clr code in a stable state. Thanks.\n. Hmmm, yes; that looks problematic and an omission.  Will re-review the PR\nand rectify.\n\nOn Tue, 10 Nov 2015 11:11 Shingo INADA notifications@github.com wrote:\n\n> A default value ( [ default = xxx] ) is ignored from this comit\n> d55cec9\n> https://github.com/mgravell/protobuf-net/commit/d55cec946b6ad5a0e8571f00cf71f28e0da6ed31\n> \n> This behavior violates specifications of protobuf\n> https://developers.google.com/protocol-buffers/docs/proto?hl=en#optional\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/122.\n. If anyone cares to suggest what the nuspec should be here, let me know.\nNote that I'm trying to transition to a project.json-based build - this\n_might_ be a lost hope, but I'm at least going to try ;p\n\nOn 8 December 2015 at 08:57, Ben Abelshausen notifications@github.com\nwrote:\n\n> Yep, a change in the nuget should do it but it's a bit difficult for me to\n> test using OsmSharp because I have a protobuf-net dependency. Also\n> impossible to install in a fresh android project targetting\n> 'MonoAndroid,Version=v6.0'...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/124#issuecomment-162820277\n> .\n\n## \n\nRegards,\n\nMarc\n. That's a very specific build ;p I _so_ hope that there is a netstandard in\nthe future that works ;p\n\nOn 8 December 2015 at 16:27, Ben Abelshausen notifications@github.com\nwrote:\n\n> Thanks @pauldendulk https://github.com/pauldendulk, I was just replying\n> myself... [image: :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/124#issuecomment-162935785\n> .\n\n## \n\nRegards,\n\nMarc\n. Have updated master; try now\n. Works fine here (see example based on yours, below); can you provide a more complete repro of the problem?\n\n```\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nusing Newtonsoft.Json;\nusing ProtoBuf;\nusing System.Collections.Generic;\nusing System;\n\n[Serializable]\n[DataContract] // [JsonObject(MemberSerialization.OptIn)]\n[ProtoContract]\npublic class AttributableItem\n{\n    [DataMember, ProtoMember(1)]\n    public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n\n}\nstatic class Program\n{\n    static void Main()\n    {\n        var obj = new AttributableItem\n        {\n            Attributes =\n            {\n                {\"abc\", \"def\" },\n                {\"ghi\", \"jkl\" },\n            }\n        };\n        var clone = Serializer.DeepClone(obj);\n        Console.WriteLine(\"Same AttributableItem: {0}\", ReferenceEquals(clone, obj));\n        Console.WriteLine(\"Same Dictionary`2: {0}\", ReferenceEquals(clone.Attributes, obj.Attributes));\n        foreach(var pair in clone.Attributes)\n        {\n            Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n        }\n    }\n}\n```\n. Protobuf-net doesn't know about inheritance automatically. You need to\neducate it by marking the base type.\n\nAdd `[ProtoInclude(Type, n)]` for some n not already used in the base type,\nfor example:\n\n[ProtoContract]\n[ProtoInclude(typeof(ExtendedItem), 2)]\npublic class AttributableItem {...}\nOn 22 Dec 2015 8:23 am, \"QuAzI\" notifications@github.com wrote:\n\n> Looks like my mistake\n> \n> using System;\n> using System.Collections.Generic;\n> using System.Diagnostics;\n> using System.IO;\n> \n> using ProtoBuf;\n> \n> [ProtoContract]\n> public class AttributableItem\n> {\n>     [ProtoMember(1)]\n>     public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n> }\n> \n> [ProtoContract]\n> public class ExtendedItem : AttributableItem\n> {\n>     [ProtoMember(1)]\n>     public string description;\n> }\n> \n> static class Program\n> {\n>     static void Main()\n>     {\n>         var obj = new ExtendedItem\n>         {\n>             Attributes =\n>             {\n>                 {\"abc\", \"def\" },\n>                 {\"ghi\", \"jkl\" },\n>             }\n>         };\n>         obj.description = \"test\";\n> \n> ```\n>     string testFile = \"test.proto\";\n>     SerializeAsProtobuf(testFile, obj);\n>     var objCopy = DeserializeProtobuf(testFile);\n> \n>     Debug.Assert(objCopy.Attributes.Count == obj.Attributes.Count);\n>     foreach (var pair in objCopy.Attributes)\n>     {\n>         Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n>         Debug.Assert(pair.Value == obj.Attributes[pair.Key]);\n>     }\n> }\n> \n> static public void SerializeAsProtobuf(string filePath, object obj)\n> {\n>     using (FileStream fileStream = new FileStream(filePath, FileMode.OpenOrCreate))\n>     {\n>         SerializeAsProtobuf(fileStream, obj);\n>         fileStream.Close();\n>     }\n> }\n> \n> static public void SerializeAsProtobuf(Stream stream, object obj)\n> {\n>     Serializer.Serialize(stream, obj);\n> }\n> \n> static public ExtendedItem DeserializeProtobuf(string filePath)\n> {\n>     using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\n>     {\n>         ExtendedItem product = DeserializeProtobuf(fileStream);\n>         fileStream.Close();\n>         return product;\n>     }\n> }\n> \n> static public ExtendedItem DeserializeProtobuf(Stream stream)\n> {\n>     return ProtoBuf.Serializer.Deserialize<ExtendedItem>(stream);\n> }\n> ```\n> \n> }\n> \n> It isn't clear how to trace an order of fields at multiple inheritance\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/130#issuecomment-166551536\n> .\n. 1: yes\n2: in terms of the protobuf specification, each sub-type is implemented as\nan optional sub-message using that numeric identifier\n3: this is not uncommon in serialisation; compare/contrast [XmlInclude];\nthe problem is that during deserialization the only thing you usually know\nis the parent, hence it becomes necessary for the parent to know about the\nderived types\n\nOn Tue, 22 Dec 2015 09:29 QuAzI notifications@github.com wrote:\n\n> Thanks\n> What if I have several classes inherited from base class?\n> \n> I must wite something like this?\n> \n> [ProtoContract]\n> [ProtoInclude(typeof(ExtendedItem1), 2)]\n> [ProtoInclude(typeof(ExtendedItem2), 3)]\n> [ProtoInclude(typeof(ExtendedItem3), 4)]\n> public class AttributableItem {...}\n> \n> What numeric tag means in this case?\n> As a rule parents don't know about the inherited and shouldn't care of it.\n> But in this case it is a great problem.\n> There are too small examples to explain this case. Should be in\n> documentation I think\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/130#issuecomment-166565602\n> .\n. Also: [KnownType(..)] For DCS\n\nOn Tue, 22 Dec 2015 16:43 Marc Gravell marc.gravell@gmail.com wrote:\n\n> 1: yes\n> 2: in terms of the protobuf specification, each sub-type is implemented as\n> an optional sub-message using that numeric identifier\n> 3: this is not uncommon in serialisation; compare/contrast [XmlInclude];\n> the problem is that during deserialization the only thing you usually know\n> is the parent, hence it becomes necessary for the parent to know about the\n> derived types\n> \n> On Tue, 22 Dec 2015 09:29 QuAzI notifications@github.com wrote:\n> \n> > Thanks\n> > What if I have several classes inherited from base class?\n> > \n> > I must wite something like this?\n> > \n> > [ProtoContract]\n> > [ProtoInclude(typeof(ExtendedItem1), 2)]\n> > [ProtoInclude(typeof(ExtendedItem2), 3)]\n> > [ProtoInclude(typeof(ExtendedItem3), 4)]\n> > public class AttributableItem {...}\n> > \n> > What numeric tag means in this case?\n> > As a rule parents don't know about the inherited and shouldn't care of\n> > it. But in this case it is a great problem.\n> > There are too small examples to explain this case. Should be in\n> > documentation I think\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/130#issuecomment-166565602\n> > .\n. Thank you - I will look at your full example when I get a moment.\nOn 23 Dec 2015 7:59 a.m., \"QuAzI\" notifications@github.com wrote:\n\n> Here man told that RuntimeTypeModel.Default.Add(typeof(type),\n> true).AddSubType(tag, subType)\n> is equivalent to what the attribute-processing code does\n> \n> https://stackoverflow.com/questions/11869467/protobuf-net-how-to-handle-inheritance-without-protoinclude\n> \n> I try to write static constructor for register child\n> \n> ```\n> static ExtendedItem1()\n> {\n>     ProtoBuf.Meta.RuntimeTypeModel\n>         .Default\n>         .Add(typeof(AttributableItem), true)\n>         .AddSubType(typeof(ExtendedItem1).FullName.GetHashCode(), typeof(ExtendedItem1));\n> }\n> ```\n> \n> And it serialized OK. I see all fields in file with small differences.\n> \n> [image: 2015-12-23_10-54-21_jn2ybe0u]\n> https://cloud.githubusercontent.com/assets/1897605/11972904/de030ff2-a963-11e5-8d1a-e5dc1436690f.png\n> \n> But on deserialisation fired \"Unable to cast object of type\n> 'AttributableItem' to type 'ExtendedItem1'\". Why?\n> \n> Full example\n> \n> using System;\n> using System.Collections.Generic;\n> using System.Diagnostics;\n> using System.IO;\n> \n> using ProtoBuf;\n> \n> [ProtoContract]\n> public class AttributableItem\n> {\n>     [ProtoMember(1)]\n>     public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n> }\n> \n> [ProtoContract]\n> public class ExtendedItem1 : AttributableItem\n> {\n>     static ExtendedItem1()\n>     {\n>         ProtoBuf.Meta.RuntimeTypeModel\n>             .Default\n>             .Add(typeof(AttributableItem), true)\n>             .AddSubType(typeof(ExtendedItem1).FullName.GetHashCode(), typeof(ExtendedItem1));\n>     }\n> \n> ```\n> [ProtoMember(1)]\n> public string description;\n> ```\n> \n> }\n> \n> static class Program\n> {\n>     static void Main()\n>     {\n>         var obj = new ExtendedItem1\n>         {\n>             Attributes =\n>             {\n>                 {\"abc\", \"def\" },\n>                 {\"ghi\", \"jkl\" },\n>             }\n>         };\n>         obj.description = \"test\";\n> \n> ```\n>     string testFile = \"test.proto\";\n>     SerializeAsProtobuf(testFile, obj);\n>     var objCopy = DeserializeProtobuf(testFile);\n> \n>     Debug.Assert(objCopy.Attributes.Count == obj.Attributes.Count);\n>     foreach (var pair in objCopy.Attributes)\n>     {\n>         Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n>         Debug.Assert(pair.Value == obj.Attributes[pair.Key]);\n>     }\n> }\n> \n> static public void SerializeAsProtobuf(string filePath, object obj)\n> {\n>     using (FileStream fileStream = new FileStream(filePath, FileMode.OpenOrCreate))\n>     {\n>         SerializeAsProtobuf(fileStream, obj);\n>         fileStream.Close();\n>     }\n> }\n> \n> static public void SerializeAsProtobuf(Stream stream, object obj)\n> {\n>     Serializer.Serialize(stream, obj);\n> }\n> \n> static public ExtendedItem1 DeserializeProtobuf(string filePath)\n> {\n>     using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\n>     {\n>         ExtendedItem1 product = DeserializeProtobuf(fileStream);\n>         fileStream.Close();\n>         return product;\n>     }\n> }\n> \n> static public ExtendedItem1 DeserializeProtobuf(Stream stream)\n> {\n>     return ProtoBuf.Serializer.Deserialize<ExtendedItem1>(stream);\n> }\n> ```\n> \n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/130#issuecomment-166830005\n> .\n. thanks; wow, it took me a while to close that down, sorry; I fail. I think we could do this; it would need to be a different package,\nobviously. The really awkward thing to sip is the tools that go _along_\nwith that. I'm struggling for good ways of deploying those.\n\nOn 7 January 2016 at 23:18, Stephan Dilly notifications@github.com wrote:\n\n> Would it be possible to provide the precompile binaries with the nuget\n> package too ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/132.\n\n## \n\nRegards,\n\nMarc\n. The `false` in `Add(Type, bool)` says \"don't process anything yourself; I'm going to tell you what to do, explicitly\". Hence, you need to tell it about the default value yourself in this case. In code:\n\n```\n    var typeMeta = RuntimeTypeModel.Default.Add(typeof(Foo), false);\n    typeMeta.AddField(1, \"Bar\").DefaultValue = 0;\n```\n\n(I only introduced `typeMeta` in this example because you probably want to add multiple fields)\n\nNote: if you are using C# 6:\n\n```\n    typeMeta.AddField(1, nameof(Foo.Bar)).DefaultValue = 0;\n```\n. Woohoo! Sorted before I even wake up; cheers. Very minor point, but that\nisn't actually \"boxing\", but... either way: sorted.\n\nOn 11 January 2016 at 07:19, Andrey notifications@github.com wrote:\n\n> Closed #135 https://github.com/mgravell/protobuf-net/issues/135.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/135#event-510783841.\n\n## \n\nRegards,\n\nMarc\n. protobuf-net is very heavy on the meta-programming. I haven't explicitly\ntested it with ILMerge, but it wouldn't amaze me if there were problems.\nThe core-only build should work fine, but then you'd have to use\npre-generation, which is complex.\n\nIf we want it to work cleanly (supported etc) with ILMerge, then it would\nneed someone to take the time to explicitly test, identify and resolve and\nissues. I'm \"up\" for that, but I can't give any specific guarantees on when\nI can find the required time; for all I know, the changes required could be\ntrivial, or could be extensive...\n\nOn 13 January 2016 at 21:52, Meirion Hughes notifications@github.com\nwrote:\n\n> Try Costura https://github.com/Fody/Costura. I've bundled protobuf with\n> it. I've not tried the very latest though.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/136#issuecomment-171448646\n> .\n\n## \n\nRegards,\n\nMarc\n. If I was doing it all over again, I would have done it much simpler - I\nmight still add an option to make it simpler! but:\n\nhttps://github.com/mgravell/protobuf-net/blob/master/Tools/bcl.proto\n\nbasically, it chooses the correct scale to guarantee the value.\n\nOn 5 February 2016 at 19:46, efficks notifications@github.com wrote:\n\n> Hi,\n> This is not a real issue but I don't know where to post my question\n> I'm reading protobuf encoded messages generated in Net I'm reading it with\n> a Python program How the DataTime is encoded I can't change the message\n> emitter to send an EPOCH or string representation How do I decode the\n> datetime representation?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/140.\n\n## \n\nRegards,\n\nMarc\n. Thanks\n. Protobuf-net needs to know _numbers_ for each field you want to serialize. There are ways to make this semi-automated, but the easiest way would be to explicitly mark them:\n\n```\n[DataMember(Order=1)]\npublic string ABC {get;set;}\n\n[DataMember(Order=2)]\npublic int QWE {get;set;}\n```\n\nThat should fix it.\n. Well, in this scenario the first thing I'd note is that using implementation details (such as `Microsoft.Crm.Sdk.Entity`) in serialization layers is not a great idea - it creates a huge number of traps. Frankly, if serialization of an existing object model becomes non-trivial, the best approach is not \"fight the serializer\" but rather \"create a simple DTO that fits the serializer perfectly\"\n\nAs it happens, protobuf-net does have things like `ImplicitFields` that _can_ help in some of these scenarios, but it only looks at the _declaring_ type, not base-types - so it wouldn't pull from `Entity`. protobuf-net also has the ability to configure types _manually_, but that would require you adding code to your app-init. But to give an example broadly similar to yours:\n\n```\nusing ProtoBuf;\nusing ProtoBuf.Meta;\nusing System;\nusing System.Runtime.Serialization;\n\nclass Program {\n    static void Main() {\n        RuntimeTypeModel.Default.Add(typeof(MyObj), false).Add(\"Foo\", \"Bar\", \"Name\");\n        var obj = new MyObj { Name = \"abc\", Foo = 123, Bar = \"def\" };\n        var clone = Serializer.DeepClone(obj);\n        Console.WriteLine(obj);\n        Console.WriteLine(clone);\n    }\n}\n[DataContract] public class MyObj : Entity {\n    [DataMember] public string Name { get; set; }\n    public override string ToString() => $\"{Name}, {Foo}, {Bar}\";\n}\n[DataContract] public class Entity {\n    [DataMember] public int Foo { get; set; }\n    [DataMember] public string Bar { get; set; }\n}\n```\n\nNote here that the order of the members in `Add` defines their wire identity - so `Foo` is 1, `Bar` is 2, etc. Depending on your C# version, you may also wish to look at `nameof` rather than hard-coded strings:\n\n```\n        RuntimeTypeModel.Default.Add(typeof(MyObj), false).Add(\n            nameof(Entity.Foo), nameof(Entity.Bar), nameof(MyObj.Name));\n```\n\nIs any of that useful?\n. Microsoft.Xrm.Sdk.AttributeCollection is basically a\nDictionary<string,object>, which protobuf-net is going to _hate_. The\nprotobuf format is designed to serialize models with a well-known shape /\nformat - which \"object\" _isn't_. There is no good way to handle a\nstring-object map in protobuf; there are some bad ways, but that depends a\nlot on what the actual values are in your scenario.\n. The problem isn't the map - protobuf-net would happily support\n`Dictionary<string,Project>`, to use the example from your links; it is the\n\"object\". Protobuf wants to know _what it is deserializing_. So again: what\nare the actual values?\n\nOn 7 March 2016 at 09:14, rebulanyum notifications@github.com wrote:\n\n> Well it's just a collection with items of type KeyValuePair<string,\n> object>. Right? And KeyValuePair is just a struct with 2 properties: Key\n> and Value. So what should I do about it?\n> \n> And I think, on the contrary, Google.ProtocolBuffers supports map fields\n> with version 3\n> https://developers.google.com/protocol-buffers/docs/reference/proto3-spec#map_field\n> and even with version 2\n> https://developers.google.com/protocol-buffers/docs/reference/proto2-spec#map_field\n> .\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/146#issuecomment-193172891\n> .\n\n## \n\nRegards,\n\nMarc\n. > But even strings are not serializing...\n\nThat is expected. It knows that in the general case it doesn't know how to\nwork with \"object\", so it isn't happy to start trying, unless it has been\nspecifically configured to treat it as a string-string map. But\nfundamentally, I would again simply suggest that anything based on this\nmuch implementation details rather than data details _isn't a good choice\nfor serialization_. The preference here (IMO) would be to create a DTO\nmodel specifically intended for serialization, that represents the _data_\nyou want to serialize, rather than the active object model you happen to be\nusing at the timel\n\nOn 7 March 2016 at 14:32, rebulanyum notifications@github.com wrote:\n\n> Oh, I'm sorry for my bad understanding...\n> \n> The \"object\" is sometimes string, sometimes\n> Microsoft.Xrm.Sdk.EntityReference. It's not a single fixed type. But even\n> strings are not serializing...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/146#issuecomment-193272526\n> .\n\n## \n\nRegards,\n\nMarc\n. closing as this is not going to be compatible with the massively refactored tooling; if there are good ways of adding this to the new tooling, I'm open to options, but it would need to not break simple \"dotnet build\" usage. should be here in 2.3.0; preview of current state is here: https://protogen.marcgravell.com/\r\n\r\n(only a web site for convenience; long term we'd hope to get build tools too - the entire parser / generator pipe is being rewritten). it will be closed in a very few days - I'm about to release 2.3.0 which\nprovides this. Note that comamn-line / IDE build tools will be part of\n2.3.1 (or similar); for 2.3.0 the only provision is\nhttps://protogen.marcgravell.com (which is in the \"parser\" branch if you\nwant to self host)\n\nOn 6 Jun 2017 9:40 p.m., \"Edward Brey\" <notifications@github.com> wrote:\n\n> Should this issue still be open? I was encouraged at first to think that\n> proto3 support was available already... only to find out it isn't.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/150#issuecomment-306610173>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsBIahMDhtWCXON413C_ApZuxc9xNks5sBbkfgaJpZM4H56El>\n> .\n>\n. Which bits do you need? If you're just talking about the 2.3 language\ntools: then ... *voila*: https://protogen.marcgravell.com/ - it is done!\n\nIf you mean runtime support for some of the new pieces (Map<TKey,TValue>,\nTimestamp, Duration, etc); then yes, I expect that to be released in the\nnext few days. Just a few pieces to tidy up. Are there any specific pieces\nyou need?\n\nOn 11 June 2017 at 21:18, Andrew Sampson <notifications@github.com> wrote:\n\n> Is 2.3.0 likely to hit this week? Sachiel\n> <https://github.com/RainwayApp/sachiel-net> makes heavy use of this\n> library and 3.0 support would be fantastic.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/150#issuecomment-307654072>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsFWGMbPTolZThKATxgXH0BGyXKoPks5sDEutgaJpZM4H56El>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. oddly, no not really. You see, there aren't any binary serialization format\nchanges between proto2 and proto3, so you can already do everything. The\nDSL changes just make it more elegant in some cases if you're using .proto\nschemas. Which has never been a hard requirement in protobuf-net. The\nruntime in proto3 for protobuf-net aren't huge - the biggest things are the\naddition of Duration / Timestamp support and cleaner Map handling, but:\nthey're done. I haven't started the attribs=>proto3 work; proto3 is\nactually a subset of proto2, not a superset as you might imagine. The\nchallenge for me will be to see what I can live without :)\n\nOn 12 Jun 2017 12:57 a.m., \"Andrew Sampson\" <notifications@github.com>\nwrote:\n\nMostly I'm just referring to the ability to serialize/deseralize proto3\ncompliant buffers along with generating a .proto schema from decorated\nmodels. I suppose this mostly has to do with run time?\n\nLooking forward to it!\n\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/150#issuecomment-307665496>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsMozgDAKRHeAb6CtBUe_ek5JsQFrks5sDH8FgaJpZM4H56El>\n.\n. Fair point. The changes to support this are fairly trivial - we've already\ndone the same with \"dapper\". But yes: definitely needs a code change.\nOn 8 Apr 2016 8:12 am, \"HellBrick\" notifications@github.com wrote:\n\n> It seems protobuf-net doesn't support C#6 read-only properties. Here's a\n> test to illustrate the problem:\n> \n> ```\n> [TestFixture]\n> public class ReadOnlyPropertyBugTest\n> {\n>     [Test]\n>     public void StructIsRoundTripped()\n>     {\n>         CustomStruct value = new CustomStruct( \"I'm a description ^_^\", DateTime.UtcNow );\n> \n>         using ( MemoryStream memory = new MemoryStream() )\n>         {\n>             Serializer.Serialize( memory, value );\n>             memory.Position = 0;\n>             CustomStruct deserialized = Serializer.Deserialize<CustomStruct>( memory );\n>             deserialized.Should().Be( value );\n>         }\n>     }\n> \n>     [ProtoContract]\n>     private struct CustomStruct : IEquatable<CustomStruct>\n>     {\n>         public CustomStruct( string description, DateTime importantDate )\n>         {\n>             Description = description;\n>             ImportantDate = importantDate;\n>         }\n> \n>         [ProtoMember( 1 )]\n>         public string Description { get; }\n> \n>         [ProtoMember( 2 )]\n>         public DateTime ImportantDate { get; }\n> \n>         public override string ToString() => $\"[{ImportantDate}] {Description}\";            public bool Equals( CustomStruct other ) => Description == other.Description && ImportantDate == other.ImportantDate;            public override bool Equals( object obj ) => obj is CustomStruct && Equals( (CustomStruct) obj );        }    }\n> ```\n> \n> It fails with the following exception:\n> \n> System.InvalidOperationException : Cannot apply changes to property Utils.Test.Events.ReadOnlyPropertyBugTest+CustomStruct.Description\n>    at ProtoBuf.Serializers.PropertyDecorator.SanityCheck(TypeModel model, PropertyInfo property, IProtoSerializer tail, Boolean& writeValue, Boolean nonPublic, Boolean allowInternal) in c:\\Dev\\protobuf-net\\protobuf-net\\Serializers\\PropertyDecorator.cs:line 46\n>    at ProtoBuf.Serializers.PropertyDecorator..ctor(TypeModel model, Type forType, PropertyInfo property, IProtoSerializer tail) in c:\\Dev\\protobuf-net\\protobuf-net\\Serializers\\PropertyDecorator.cs:line 32\n>    at ProtoBuf.Meta.ValueMember.BuildSerializer() in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\ValueMember.cs:line 375\n>    at ProtoBuf.Meta.MetaType.BuildSerializer() in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\MetaType.cs:line 408\n>    at ProtoBuf.Meta.MetaType.get_Serializer() in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\MetaType.cs:line 384\n>    at ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest) in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\RuntimeTypeModel.cs:line 752\n>    at ProtoBuf.Meta.TypeModel.SerializeCore(ProtoWriter writer, Object value) in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\TypeModel.cs:line 192\n>    at ProtoBuf.Meta.TypeModel.Serialize(Stream dest, Object value, SerializationContext context) in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\TypeModel.cs:line 218\n>    at ProtoBuf.Serializer.Serialize[T](Stream destination, T instance) in c:\\Dev\\protobuf-net\\protobuf-net\\Serializer.cs:line 89\n> \n> It should be quite possible to fix this, because there's already support\n> for read-only fields. If I change the property declarations like this, the\n> test is going to pass:\n> \n> ```\n>         [ProtoMember( 1 )]\n>         private readonly string _description;\n>         public string Description => _description;\n> \n>         [ProtoMember( 2 )]\n>         private readonly DateTime _importantDate;\n>         public DateTime ImportantDate => _importantDate;\n> ```\n> \n> It seems what's missing is a way to leverage this mechanism by recognizing\n> the generated backing fields and pulling the [ProtoXXX] attributes from\n> the corresponding properties. I wouldn't mind doing it myself and sending\n> you a PR, but I'd like to hear your thoughts on this matter first. (And if\n> you can give any tips on what parts of the code base are responsible for\n> this, this would be very helpful as well.)\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/152\n. The protobuf specification simply has no mechanism in the format to express\na null. I don't think this can be fixed as such. It is a protocol\nlimitation.\nOn 27 May 2016 3:38 pm, \"gabriele-ricci-kyklos\" notifications@github.com\nwrote:\n\n> We use your library to increase performance in tcp communication between\n> our softwares, and it's working wvery well. But today I encountered a very\n> strange situation.\n> I tried to serialize a container class I had modified adding a new\n> collection. I got this exception:\n> \n> System.NullReferenceException: Object reference not set to an instance of an object.\n>    in ProtoBuf.Serializers.ArrayDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.PropertyDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TypeSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest)\n>    in ProtoBuf.ProtoWriter.WriteObject(Object value, Int32 key, ProtoWriter writer)\n>    in ProtoBuf.Serializers.SubItemSerializer.ProtoBuf.Serializers.IProtoSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TagDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.PropertyDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TypeSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest)\n>    in ProtoBuf.ProtoWriter.WriteRecursionSafeObject(Object value, Int32 key, ProtoWriter writer)\n>    in ProtoBuf.Serializers.SubItemSerializer.ProtoBuf.Serializers.IProtoSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TagDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TypeSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest)\n>    in ProtoBuf.ProtoWriter.WriteRecursionSafeObject(Object value, Int32 key, ProtoWriter writer)\n>    in ProtoBuf.Serializers.SubItemSerializer.ProtoBuf.Serializers.IProtoSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TagDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TypeSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.TypeModel.SerializeCore(ProtoWriter writer, Object value)\n>    in ProtoBuf.Meta.TypeModel.Serialize(Stream dest, Object value, SerializationContext context)\n>    in ProtoBuf.Meta.TypeModel.Serialize(Stream dest, Object value)\n> \n> I checked the definitions ten times and even if all seemed right I still\n> kept getting the exception. So I downloaded the source code and I manually\n> debugged the method ProtoBuf.Serializers.ArrayDecorator.Write(Object\n> value, ProtoWriter dest)\n> finding that there actually is a NullReferenceException throwing at line\n> 157:\n> \n> if (checkForNull && obj == null) { throw new NullReferenceException(); }\n> \n> The exception is thrown because obj is the actual item of the array. Is\n> there a fix that you can do to prevent this behaviour?\n> \n> Please also notice: google/protobuf#827\n> https://github.com/google/protobuf/issues/827\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/156, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsNQhHvGevsKPtz2sNQGwzEJeW2e1ks5qFwHwgaJpZM4IokDn\n> .\n. I have not yet updated it to current RCs.\n\nOn Thu, 9 Jun 2016 10:50 William Davis, notifications@github.com wrote:\n\n> It appears that the project supports .NET Core 4.5 (is that even a thing?)\n> But does support .NET Core RC1\n> \n> [image: image]\n> https://cloud.githubusercontent.com/assets/2580575/15925646/f9a27ea6-2e05-11e6-9745-1acdaa04714b.png\n> \n> Errors in C:\\users\\willi\\documents\\visual studio\n> 2015\\Projects\\ConsoleApp1\\src\\ConsoleApp1\\project.json\n> \n> Package protobuf-net 2.0.0.668 is not compatible with netcoreapp1.0 (.NETCoreApp,Version=v1.0). Package protobuf-net\n> \n> 2.0.0.668 supports:\n> - net20 (.NETFramework,Version=v2.0)\n> - net20-cf (.NETFramework,Version=v2.0,Profile=CompactFramework)\n> - net30 (.NETFramework,Version=v3.0)\n> - net35 (.NETFramework,Version=v3.5)\n> - net35-cf (.NETFramework,Version=v3.5,Profile=CompactFramework)\n> - net40 (.NETFramework,Version=v4.0)\n> - net40-cf (.NETFramework,Version=v4.0,Profile=CompactFramework)\n>   _\\- netcore45 (.NETCore,Version=v4.5)_\n> - portable-net40+sl4+win8+wp7 (.NETPortable,Version=v0.0,Profile=Profile2)\n> - sl3-wp (Silverlight,Version=v3.0,Profile=WindowsPhone)\n> - sl4 (Silverlight,Version=v4.0)\n> - sl4-wp71 (Silverlight,Version=v4.0,Profile=WindowsPhone71)\n> - wp8 (WindowsPhone,Version=v8.0)\n>   _One or more packages are incompatible with .NETCoreApp,Version=v1.0._\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/159, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsNy0YQqiae1rDG98J0eyj8ONvOqzks5qJ-HfgaJpZM4IxzXo\n> .\n. `Extensible.GetValue`; for example:\nhttp://stackoverflow.com/questions/2218793/how-to-use-protobuf-net-extensions\n\nOn 13 June 2016 at 11:34, LazyPlanet notifications@github.com wrote:\n\n> Hey, I want to use custom options?\n> Does not support it?\n> Thank u.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/160#issuecomment-225545743,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsA3KTmcUOAc-eaRa12Fsxn-z2JINks5qLTIkgaJpZM4Iy-TP\n> .\n\n## \n\nRegards,\n\nMarc\n. Dammit, I hate the Uri type; craziness ensues every time. Suggestion: just\nsend a string?\n\nOn 13 June 2016 at 10:07, Ivan Demchuk notifications@github.com wrote:\n\n> Serialization of relative URL results in exception:\n> \n> An exception of type 'System.InvalidOperationException' occurred in System.dll but was not handled in user code\n> Additional information: This operation is not supported for a relative URI.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/162, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsBXfdPCqMqmdgfOU93Q8uZjAEJ3mks5qLR3jgaJpZM4I0IM2\n> .\n\n## \n\nRegards,\n\nMarc\n. Very kindly fixed via PR. Will be included next deploy.. Are you talking about the collection accessor? It is pretty rare and\nunusual for collection accessors to have setters - and frankly, that isn't\nhow you're meant to use them. I'm not sure how implementing this would\nimprove the general case, but you're welcome to change the xslt locally\n(just drop a modified csharp.xslt next to the generator, and it will use it)\n\nOn Sat, 18 Jun 2016 07:04 LazyPlanet, notifications@github.com wrote:\n\n> When I write proto file like this:\n> message Material {\n> optional int32 m = 1;\n> }\n> message Forge{\n> repeated Material materials = 1;\n> }\n> \n> And I want to use Reflection to set a Property with type as follow:\n> `Forge forge = new Forge ();\n> PropertyInfo pi = forge.GetType().GetProperty(\"materials \");\n> Object instance = Activator.CreateInstance(property.ProtoperyType);\n> IList list = (IList) instance;\n> \n> Material ma = new Material();\n> ma.m = 10;\n> list.Add(ma);\n> \n> pi.SetValue(forge, list, null);`\n> \n> It asserts...For code generated is \"readonly\" and has not \"set\" function...\n> I do not know why repeated items generated like that.\n> Thank u.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/164, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsL1pIKP51YtnnMn969iVZUDQHuFwks5qM4p7gaJpZM4I44UG\n> .\n. Protobuf-net doesn't support custom options as attributes, and the nature\nof partial classes doesn't make it convenient for them either.\n\nOn Sat, 18 Jun 2016 09:53 LazyPlanet, notifications@github.com wrote:\n\n> Thank u, It works. I have another mix about custom options :\n> \n> message person {\n> option (my_message_option) = true;\n> \n> optional string firstname = 1 [(my_field_option) = 42];\n> optional string lastname = 2 [(my_field_option) = 12];\n> optional int age = 3;\n> }\n> I want to generate:\n> \n> [ProtoContract, MyMessageOption(true)]\n> public class Person\n> {\n> [ProtoMember(1), MyFieldOption(42)]\n> public string Firstname;\n> \n> [ProtoMember(2), MyFieldOption(12)]\n> public string Firstname;\n> \n> [ProtoMember(3)]\n> public string Firstname;\n> \n> }\n> \n> How can i do that, does it support that ? and I have seen this article as\n> below:\n> \n> http://stackoverflow.com/questions/5458477/generate-c-sharp-from-proto-files-and-vice-versa-interpreting-custom-options\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/164#issuecomment-226930313,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsLbaKztOEAHffn7ZsI1y-mQPyz1Jks5qM7IDgaJpZM4I44UG\n> .\n. it looks like this already got fixed, but merging anyway to preserve credit! it is appreciated. It is very odd that it is doing a stack dive here, but I can look. Can you\ntell me : is there an Add method here? And is there an indexer (this[int\nindex])? I need to see the signatures because that is part of the signal it\nuses for determining the inner type.\nOn 3 Jul 2016 6:31 a.m., \"jhimes144\" notifications@github.com wrote:\n\n> I encountered a stackoverflow exception while serializing an object who's\n> purpose is to convey a tree structure. The object implements IEnumerable\n> and the enumerator implementation returns the object's children, which\n> happen to be the same type as the parent object... thus it appears\n> protobuffers net is scanning that implementation, even though its the same\n> type, infinite amount of times. This issue isn't critical for me as I can\n> conceive a workaround, but I'd feel sorry for the next guy who hits this\n> issue.\n> \n> ```\n> public class TreeObject\n> {\n> protected List<TreeObject> _children =\n>     new List<TreeObject>();\n> \n>     public virtual IEnumerator GetEnumerator()\n>     {\n>         return this._children.GetEnumerator();\n>     }\n> }\n> ```\n> \n> ^ Where the this._children is an enumeration of the same type.\n> \n> The stack trace is infinite calls of: TypeModel.GetListItemType\n> \n> It took me 2 hours to figure out the cause of this problem, and I was\n> furious because my Visual Studio was hanging for about 5 minutes every time\n> I hit the exception. Let me know if you need further information.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/167, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsHAtlUstyL60Yw755IduaebduW3Kks5qR0kZgaJpZM4JDzrZ\n> .\n. protobuf-net isn't going to be interested in unmarked private fields unless\nit has good cause to do so. The code in the example you have provide simply\nfails with:\n\nSystem.InvalidOperationException: Type is not expected, and no contract can\nbe inferred: TreeObject\n\nI am very interested in what is happening here, and want to fix it (I'm in\nthe process of doing core-clr changes, so it is a good time to fix it), but\nI need a minimal repro to ensure that I'm investigating the correct\nproblem. It doesn't need to be your actual code, but it should ideally\nillustrate the same problem.\n\nIs there any chance you can provide a minimal repro?\n\nOn 3 July 2016 at 10:13, jhimes144 notifications@github.com wrote:\n\n> @mgravell https://github.com/mgravell Yes I took a quick look at the\n> source to acquaint myself. The code for the TreeObject class does not make\n> use of Add neither does it have an indexer. As you probably already knew\n> the _children field does have an add method and indexer. If you'd like I\n> can attempt to create an example project to recreate the issue. If I can't\n> produce an example project I can provide you with a private message\n> containing code from an old commit that produces the problem.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/167#issuecomment-230143553,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsJGI6C_pK2jIxHYbv1M0osfbGb3kks5qR30lgaJpZM4JDzrZ\n> .\n\n## \n\nRegards,\n\nMarc\n. I missed the follow-up reply - entirely my mistake. Will look today. Thanks\nfor providing a repro.\nOn 8 Jul 2016 6:48 a.m., \"jhimes144\" notifications@github.com wrote:\n\n> Any news on the bug? My team is actually very much relying on the fact\n> that our implementation has this IEnumerable interface. I know your project\n> is open source and you probably have a life outside of this, let me know\n> where I can donate as well.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/167#issuecomment-231280308,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsCQvDVkArBqa9fmpblCNUOZX7jLuks5qTeSWgaJpZM4JDzrZ\n> .\n. K; I've fixed the library to stop it exploding, but the fundamental problem here is that a type (to protobuf-net) can either be a leaf or a list, not both; in being enumerable of itself, it tries to be both. The code isn't going to like the \"list\" style (it ... just doesn't parse), so it now reverts to \"leaf\". This will, however, mean that to get this to behave as you expect, you will need to still expose the downstream tree; this could be done by:\n\n```\n[ProtoMember(3)] // or whatever\nprotected List<TreeObject> _children = \n```\n. Note: to fix this using the existing library, you should be able to do:\n\n```\n[ProtoContract(IgnoreListHandling = true)]\nclass Problematic : IEnumerable\n{\n    [ProtoMember(3)] // or whatever\n    protected List<TreeObject> _children = \n```\n\nhere the `IgnoreListHandling` is checked **before** the code that is currently causing it to explode.\n. The problem here is that it grarually becomes prohibitively and\ndisproportionately time consuming to support older runtimes. For context,\nMS .NET 4.51 support **ended over a year ago** (\nhttps://blogs.msdn.microsoft.com/dotnet/2014/08/07/moving-to-the-net-framework-4-5-2/\n).\n\nThis is especially challenging given the changes to the build process etc.\nWhich needs *another* overhaul for the csproj changes, but that's another\nstory.\n\nThe long and short, then, will be:\n\n- if I do the csproj changes (imminent) and the old versions \"just work\"\n(meaning: fall into place without me going crazy), then great: I'll include\nthem\n- otherwise, if someone can figure out what the csproj and build changes\nare to make it successfully target those versions without causing problems,\nthen a PR will be gratefully received and merged\n\nHistorically I have tried to consider back-level - heck, it even used to\ncompile on C#1.2 (.Net 1.1), and might still do so! But: there comes a time\nwhen it isn't the best use of my time to try to do so.\n\nI also have concerns that continuing to support these very very old\nruntimes is me being an \"enabler\" when what I should actually be doing is\nadvocating for you to move to an up to date framework.\n\nOn 27 Jan 2017 5:32 p.m., \"Artem Kravchenko\" <notifications@github.com>\nwrote:\n\nThe same problem (.NET 3.5)\n\nCould not install package 'protobuf-net 2.1.0'. You are trying to\ninstall this package\ninto a project that targets '.NETFramework,Version=v3.5', but the\npackage does not\ncontain any assembly references or content files that are compatible with that\nframework. For more information, contact the package author.\n\n\u2014\nYou are receiving this because you modified the open/close state.\n\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/168#issuecomment-275723766>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsKa5y67uhEO_UWy-1tekDHBGMY5Cks5rWioSgaJpZM4JJDFA>\n.\n. Well that's odd. I'll try to setup a minimal repro here.\nOn 14 Jul 2016 2:26 pm, \"pantonis\" notifications@github.com wrote:\n\n> Hi,\n> \n> I have an asp.net core application. I referenced protobuf-net 2.1.0\n> Project builds fine\n> \n> I have the following line of code\n> \n> And gives the following exception:\n> \n> An unhandled exception occurred while processing the request.\n> \n> FileLoadException: Could not load file or assembly 'protobuf-net, Version=2.1.0.0, Culture=neutral, PublicKeyToken=257b51d87d2e4d67' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\n> GetProto in HomeController.cs, line 17\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/171, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsFNRq5k10KuqS1bDXsH9yyxIgBwUks5qVjj_gaJpZM4JMbrK\n> .\n. So I set up a minimal asp.net core site, used `install-package protobuf-net` (it picked up 2.1.0), added some protobuf-net code, and... it simply worked. Cannot repro the issue. Please can you give more context about what you're doing. In particular, if you are using any indirect tooling (things that reference protobuf-net), check that either they have been updated, or that you have an assembly binding redirect (which should be added automatically when you install from nuget).\n\nFor completeness, here's the code I added to the `/Home/About` route of the default asp.net core app:\n\n```\n    [ProtoContract]\n    public class Foo\n    {\n        [ProtoMember(1)]\n        public string Bar { get; set; }\n    }\n    public IActionResult About()\n    {\n        using (var ms = new MemoryStream())\n        {\n            Serializer.Serialize(ms, new Foo { Bar = \"hello world\" });\n            ArraySegment<byte> buffer;\n            if (!ms.TryGetBuffer(out buffer)) throw new InvalidOperationException();\n\n            ViewData[\"Message\"] = BitConverter.ToString(\n                buffer.Array, buffer.Offset, buffer.Count);\n        }\n        return View();\n    }\n```\n\nand here's the PMC:\n\n```\nPM> install-package protobuf-net\n  GET https://api.nuget.org/v3/registration1-gz/protobuf-net/index.json\n  OK https://api.nuget.org/v3/registration1-gz/protobuf-net/index.json 136ms\nRetrieving package 'protobuf-net 2.1.0' from 'nuget.org'.\n  GET https://api.nuget.org/v3-flatcontainer/protobuf-net/2.1.0/protobuf-net.2.1.0.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/protobuf-net/2.1.0/protobuf-net.2.1.0.nupkg 459ms\nInstalling protobuf-net 2.1.0.\nInstalling NuGet package protobuf-net.2.1.0.\nSuccessfully installed 'protobuf-net 2.1.0' to WebApplication1\nExecuting nuget actions took 1.39 sec\nTime Elapsed: 00:00:03.0723974\n```\n. Actually, I'd used core-clr by mistake, but doing the same thing in asp.net core using .net framework also worked perfectly; minor tweak to the test code:\n\n```\n    public IActionResult About()\n    {\n        using (var ms = new MemoryStream())\n        {\n            Serializer.Serialize(ms, new Foo { Bar = \"hello world\" });\n\n            ViewData[\"Message\"] = BitConverter.ToString(\n                ms.GetBuffer(), 0, (int)ms.Length);\n        }\n        return View();\n    }\n```\n\n(`TryGetBuffer` vs `GetBuffer()`)\n\nStill cannot repro.\n. Ah, k; an assembly binding redirect should also fix that.  I don't know if it has changed in the latest tooling, but app.config (not web.config) used to be the home for this: http://blog.rytmis.net/2016/03/29/asp-net-core-and-assembly-binding-redirects/\n. Inherit from Extensible. Add members for your 1 and 2. The rest should be\nstored opaquely without you needing to know anything about them.\n\nSo:\n\n```\n[ProtoContract] class Foo : Extensible {\n    [ProtoMember(1)] public string X {...}\n    [ProtoMember(2)] public string Y {...}\n\n}\n```\n\nOn Tue, 26 Jul 2016 15:57 Alexander Lutz, notifications@github.com wrote:\n\n> Maybe it is an stupid question but I couldn't find an solution.\n> \n> I've got an byte[] of serialized data and I know that first & second proto\n> members in it are strings. And I need to change only that members -\n> everything else must stay the same(other member's count is unknown so it's\n> type).\n> \n> How can I do that?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/173, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsKu2iLD0bsNxdSmVFq2qZM8PHsxCks5qZiBhgaJpZM4JVPMl\n> .\n. What is T in your generic usage? What is the relationship between the two\ndifferent classes and the interface?\n\nOn Tue, 26 Jul 2016 19:59 Alexander Lutz, notifications@github.com wrote:\n\n> Reopened #173 https://github.com/mgravell/protobuf-net/issues/173.\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/173#event-735432972, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsNOsY-WPTx0k2wyGNAH20BaMporFks5qZlj9gaJpZM4JVPMl\n> .\n. To put it another way: what would a fully reproducible sample look like?\n\nOn 26 Jul 2016 9:39 p.m., \"Marc Gravell\" marc.gravell@gmail.com wrote:\n\n> What is T in your generic usage? What is the relationship between the two\n> different classes and the interface?\n> \n> On Tue, 26 Jul 2016 19:59 Alexander Lutz, notifications@github.com\n> wrote:\n> \n> > Reopened #173 https://github.com/mgravell/protobuf-net/issues/173.\n> > \n> > \u2014\n> > You are receiving this because you commented.\n> > \n> > Reply to this email directly, view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/173#event-735432972,\n> > or mute the thread\n> > https://github.com/notifications/unsubscribe-auth/AABDsNOsY-WPTx0k2wyGNAH20BaMporFks5qZlj9gaJpZM4JVPMl\n> > .\n. Thanks - vexing that I missed this :(\n. The empty System.Xml looks odd - can you confirm this as a legal syntax?\n. Multiple ways. If your code-gen tool supports DataContractSerializer (many\ndo), then: job done - enable that\n\nIf your code-gen tool creates \"partial\" classes, you can create a\n**second** file with the same \"partial\" class and add your attributes\n**there**. In place of [ProtoMember], there's a [ProtoPartialMember] that\ncan be applied at the class level (instead of the member level), simply by\ntelling each one the name of the member it applies to.\n\nFinally, you can configure _everything_ at runtime using RuntimeTypeModel.\n\nThat do?\n\nOn 16 August 2016 at 03:04, HOHO notifications@github.com wrote:\n\n> in my application,the model is generated by db-first,so how can I\n> (de)serialize my class without ProtoContract attribute and ProtoMember\n> attribute ?thanks~\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/179, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsA2-rIfSd3xNSrAni9ghcadsCtPjks5qgRqigaJpZM4Jk9AN\n> .\n\n## \n\nRegards,\n\nMarc\n. What ORM tool are you using for your DB-first approach? It all depends on\nthat.\n\nOn 17 Aug 2016 11:14 a.m., \"HOHO\" notifications@github.com wrote:\n\n> hi~ @mgravell https://github.com/mgravell ,thanks for your answer!But I\n> cannot understand the first way absolutely,can you describe in detail, or\n> give me some example?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/179#issuecomment-240371157,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsFMuGiLJwlZiBwzFTzfjxc_W4MN_ks5qgt8OgaJpZM4Jk9AN\n> .\n. Merged. Will publish.\n\nOn 24 Aug 2016 8:58 p.m., \"Xaver Schulz\" notifications@github.com wrote:\n\n> already fixed in pull request #175\n> https://github.com/mgravell/protobuf-net/pull/175 but not merged or\n> published right now\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/181#issuecomment-242188836,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsEGImHCxfomP4QYaCKA0ZoO3BVctks5qjKJjgaJpZM4JsGR2\n> .\n. thanks. Usually I would *expect* the reader to be collectable about the same time, but; yeah, this should be fine. Thanks.. The  schema processing tools have not been updated to parse proto3. The\nbinary format, however, is unchanged - so as long as you understand how\nproto3 translates to the object model, it is readily consumable. I'm open\nto offers from anyone who wants to update the schema parsing tooling - they\nare long overdue some love. But the _primary_ API in protobuf-net has\nalways been code-first, which simply isn't impacted at all by proto3.\n\nOn 21 September 2016 at 22:41, jgrandyxignite notifications@github.com\nwrote:\n\n> Does protobuf-net support proto3 ?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/187, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsOebUEbB8sX6MBrVVj9piVVhIuNkks5qsaRsgaJpZM4KDTy3\n> .\n\n## \n\nRegards,\n\nMarc\n. should be here in 2.3.0; preview of current state is here: https://protogen.marcgravell.com/\r\n\r\n(only a web site for convenience; long term we'd hope to get build tools too - the entire parser / generator pipe is being rewritten). Yup, looks like the code I added to Jil for the same thing, so was pretty much what I had in mind; much appreciated.\n. thanks, you're right of course. Agreed - this looks like  a missing stream rewind, thanks (sorry, this\nslipped past my email). Note: the `Flush()` here is not needed, but also\ndoesn't hurt.\n\nOn 25 November 2016 at 09:26, Anton van Dijk <notifications@github.com>\nwrote:\n\n> An issue could be that the stream is being read at the wrong position.\n> Besides that, it might not be done writing when you're calling the\n> deserialize.\n>\n> Instead of:\n>\n> var serverStream = new MemoryStream();\n> ProtoBuf.Serializer.Serialize(serverStream, responseMsg);\n> Console.WriteLine($\"responseMsg {responseMsg?.responseStr ?? \"failed\"}\\n\");\n>\n> var response =ProtoBuf.Serializer.Deserialize<ResponseMessage>(serverStream);\n> Console.WriteLine($\"response {response?.responseStr ?? \"failed\"}\\n\");\n>\n> Try:\n>\n> var serverStream = new MemoryStream();\n> ProtoBuf.Serializer.Serialize(serverStream, responseMsg);\n> Console.WriteLine($\"responseMsg {responseMsg?.responseStr ?? \"failed\"}\\n\");\n>\n> serverStream.Flush();\n> serverStream.Position = 0;\n>\n> var response =ProtoBuf.Serializer.Deserialize<ResponseMessage>(serverStream);\n> Console.WriteLine($\"response {response?.responseStr ?? \"failed\"}\\n\");\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/191#issuecomment-262914565>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHaBbdM-qnW0mWmQMTPE6_90grLtks5rBqnYgaJpZM4Kh5Z5>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. My colleagues and I are currently working on the build/pack tooling for the current dotnet bits, which should include this; our plan is essentially to have the same build/pack tooling for our combined libs, so: protobuf-net, se.redis, miniprofiler, dapper, etc. The intellisense is already included on the new myget feed (https://www.myget.org/F/protobuf-net/) (when we get our tooling stuff complete, it will include automatic myget builds from the repo).\r\n\r\nSo basically: \"done, ish\". K, I need to look at what has broken. Will try to look asap.\n\nOn 8 Nov 2016 10:33 a.m., \"mnml_\" notifications@github.com wrote:\n\n> I've spent hours now trying to compile protobuf-net\n> \n> when i try to simply build the core project msbuild protobuf-net.csproj i\n> get\n> \n> Microsoft.NuGet.targets(140,5): error : Your project is not referencing the \".NETFramework,Version=v3.0\" framework. Add a reference to \".NETFramework,Version=v3.0\" in the \"frameworks\" sectio n of your project.json, and then re-run NuGet restore. [D:\\lib\\protobuf-net\\protobuf-net\\protobuf-net.csproj]\n> \n> I've tried fiddling around with the project.json, the best I've got was\n> either \"there's no interpolated strings in c#2\" or the same as here\n> https://github.com/mgravell/protobuf-net/issues/177\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/193, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsBFEOkQ1dtmdeGIAWdLX4RF1RWajks5q8E_cgaJpZM4KsRJ8\n> .\n. It almost certainly got through because I'm primarily using the new build\ntooling, which presumably omits the langver stuff. The workaround is\nsimply: build from the DNX projects. These will be updated *yet again* soon\nto the new new new .net core build tools (back to csproj, but a smaller\nleaner csproj).\n\nHistorically I tried to preserve down-level language support, but frankly\nI'm not sure it is worth the effort.  We should just nuke that language\nversion setting. I'll go do that...\n\n\nOn 15 March 2017 at 08:57, luoxiaodi <notifications@github.com> wrote:\n\n> me too. Error about \"$\"!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/193#issuecomment-286679079>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsA5N2fXSuaD5w1AKArYctsK0n31lks5rl6fzgaJpZM4KsRJ8>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. sigh; the tooling rework for .net core has been... pain pain pain. still,\nit should build fine from the sln - it worked a few days ago, at least.\n\ni cannot comment on proto3 - haven't reworked anything for that. If\nswitching the \"protoc\" makes it work: great. But I doubt it would be as\nsimple as that.\n\nOn 22 Mar 2017 3:38 p.m., \"force78\" <notifications@github.com> wrote:\n\n> Hello. I'm having trouble building protobuf-net. I'm ultimately trying to\n> get a protogen.exe that can parse proto3 syntax. When I build protobuf-net\n> I'm getting an error :\n> Your project.json doesn't have a runtimes section. You should add\n> '\"runtimes\": { \"win\": { } }' to your project.json and then re-run NuGet\n> restore. protobuf-net\n> I've pulled the latest commit.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/193#issuecomment-288439508>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsIfoK8mK2K17KQYUVRUPDpyuyRLgks5roUCOgaJpZM4KsRJ8>\n> .\n>\n. I can take a look, but I am not confident in my ability to adequately test\n/ support the WCF pieces. It has been \"many years\" since I WCF'd...\n\nOn 18 Dec 2016 1:50 p.m., \"Roman Badiornyi\" <notifications@github.com>\nwrote:\n\nWe've got an issue that we need support of both, WCF (available in < 2.1.0)\nand interface surrogates (available from 2.1.0) @mgravell\n<https://github.com/mgravell> , can you please publish at least alpha\nversion which will bring WCF support back to 2.1.0.\nThanks in advance.\n\n\u2014\nYou are receiving this because you were mentioned.\n\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/194#issuecomment-267822244>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsI0b44ritXl1LpP8bp9Rq43F14Bpks5rJTopgaJpZM4KscP3>\n.\n. The code in the repo has service-model enabled; I've been working on the\nbuild etc tools for this in the last week or so, so it should now build\nusing the new csproj build tools - I'm just waiting on clarification / ETA\non a known regression with the nuspec output from the new build tools,\nbefore I do a package update (https://github.com/NuGet/Home/issues/4853)\n\nOn 28 March 2017 at 21:44, Felipe Andrade <notifications@github.com> wrote:\n\n> Any updates on this? It's been 3+ months since last one.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/194#issuecomment-289898763>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsCBi95AXLvOgApMpwmblvXgFC8qoks5rqXEygaJpZM4KscP3>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. Protobuf-net has not had tooling updates for processing 2.0 schema files.\nI'm in several minds as to the best way to make those changes. It can\nprocess 2.0 data (the data format is unchanged in 2.0) - but only if you're\nusing correctly configured code-first implementations. It cannot currently\nautomatically generate classes to represent a 2.0 schema.\n\nOn 25 Nov 2016 7:46 pm, \"Mitch Capper\" <notifications@github.com> wrote:\n\n> ie:\n> message SampleMessage { oneof test_oneof { string name = 4; SubMessage\n> sub_message = 9; } }\n> errors out with:\n> C:\\temp\\proto\\test.proto(1,9): error CS001: unknown rule: oneof\n> unknown rule: oneof\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/196>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsJrNnOLYhv6cGoGTY29OhVXoLIssks5rBzr9gaJpZM4K8rph>\n> .\n>\n. interesting; iirc I have some inbuilt default cases for things like IList-T\n(being List-T, obviously) - this would be a legitimate addition, I think. I\nhave some time booked to look at pb-net soon, so will hopefully look at\nsoon. I also have a lot of backlog to look through.\n\nOn 27 Jan 2017 11:28 p.m., \"Mauricio Morales\" <notifications@github.com>\nwrote:\n\n> I wrote a test that can exercise this issue:\n>\n>         [TestMethod, TestCategory(\"RecruitmentEdge\"), Owner(\"RecruitmentEdge@careerbuilder.com\")]\n>         public void Verify_Protobuf_Serialization()\n>         {\n>             using (var writeStream = new System.IO.MemoryStream())\n>             {\n>                 ISet<String> mySet = new HashSet<String>();\n>                 mySet.Add(\"hello world\");\n>\n>                 ProtoBuf.Serializer.Serialize(writeStream, mySet);\n>\n>                 using (var readStream = new System.IO.MemoryStream(writeStream.ToArray()))\n>                 {\n>                     var myDeserializedSet = ProtoBuf.Serializer.Deserialize<ISet<String>>(readStream);\n>                     Assert.AreEqual(mySet.First(), myDeserializedSet.First());\n>                     Assert.AreEqual(\"hello world\", mySet.First());\n>                 }\n>             }\n>\n>             using (var writeStream = new System.IO.MemoryStream())\n>             {\n>                 IDictionary<DayOfWeek, ISet<String>> myMap = new Dictionary<DayOfWeek, ISet<String>>();\n>                 myMap.Add(DayOfWeek.Monday, new HashSet<string> { \"hello world\" });\n>\n>                 ProtoBuf.Serializer.Serialize(writeStream, myMap);\n>\n>                 using (var readStream = new System.IO.MemoryStream(writeStream.ToArray()))\n>                 {\n>                     var myDeserializedMap = ProtoBuf.Serializer.Deserialize<IDictionary<DayOfWeek, ISet<String>>>(readStream);\n>                     Assert.AreEqual(myMap[DayOfWeek.Monday].First(), myDeserializedMap[DayOfWeek.Monday].First());\n>                     Assert.AreEqual(\"hello world\", myMap[DayOfWeek.Monday].First());\n>                 }\n>             }\n>         }\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/197#issuecomment-275802329>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsG2yq8AWozqcrG589ODL9bsYS7IAks5rWn2rgaJpZM4K-Sfo>\n> .\n>\n. lgtm; ta. Closing because tooling has changed making this redundant. Messing with the assembly version is always a fun topic. Just about every\napproach possible annoys someone. Since we deploy via nuget, assembly\nversion redirects are much less of an issue these days. Is there a good\nreason to stray from what it is doing currently?\n\nOn 19 Dec 2016 2:46 p.m., \"KlausLinzner\" <notifications@github.com> wrote:\n\n> I found no clear documentation on how you're versioning the assemblies but\n> I assume it's some sort of semantic versioning - please correct me if I'm\n> wrong.\n>\n> Could you change the AssemblyVersion from \"2.1.0.0\" (which is already a\n> huge step ahead compared to prior) to \"2.0.0.0\"? Do you see any downsides\n> on this?\n> As far as I know the AssemblyFileVersion and AssemblyInformationalVersion\n> can stay the same (\"2.1.0\" or even \"2.1.0.build\");\n>\n> This would allow easier updates and less need for assembly redirects\n> and/or synchronization of updates.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/201>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGkrCBosCIMLvMTahUWiX0O2xKc6ks5rJpjCgaJpZM4LQzHL>\n> .\n>\n. I have pushed changes re the C# language version; pull and retry please\n\nOn 15 March 2017 at 08:53, luoxiaodi <notifications@github.com> wrote:\n\n> me too. HELP! SOS ! Unity(64bit) 5.4.0f3\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/205#issuecomment-286678098>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsKC_u1CgnXUHxoH1LQUgWWQX6T10ks5rl6b7gaJpZM4LXJYC>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. indeed; there is no explicit support - it looks like the \"does it look a\nbit like a collection?\" code it trying to have a go at it, unsuccessfully.\nIt is a fun one - I can't say that bitarray is a common case. I might be\nable to come up with a surrogate implementation that works nicely, though -\nwill have a peek tomorrow (1am here)\n\nOn 3 Jan 2017 9:39 p.m., \"btecu\" <notifications@github.com> wrote:\n\n> When trying to serialize a BitArray I get Unable to resolve a suitable\n> Add method for System.Collections.BitArray.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/206>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsD08b4ExLJQw8nt2ULy6BmHLDWIRks5rOsAfgaJpZM4LaDr0>\n> .\n>\n. it is pretty unusual for protobuf-net output to be as large or bigger than\nBF. Can I see the model? (the classes). Very hard to comment without that.\nAlso, is it possible that you have the same repeated object in the tree\nmultiple times? (for example, a City object where 20 customers all have the\nsame City instance) - protobuf-net is a tree serializer by default, so that\ndata would be repeated. BF is a graph serializer that uses object tracking\n- however protobuf-net also has this as an optional feature.\n\nOn 5 Jan 2017 2:38 a.m., \"SidneyWells\" <notifications@github.com> wrote:\n\n> I'm converting a .NET 4.0 C# app to use protobuf-net for binary\n> serialisation. It currently uses BinaryFormatter but this is proving too\n> fragile to be sustainable.\n>\n> I've got to the point where it can serialize an in-memory workspace to\n> disk, and the first thing I noticed is the resulting files are much larger\n> than their old BF equivalents. The protobuf files are nearly twice as big,\n> in fact. For example,\n>\n> File 1: BF = 1371 kB, protobuf = 2569 kB\n> File 2: BF = 12103 kB, protobuf = 21245 kB\n>\n> I've seen several comparisons between protobuf and other serialization\n> mechanisms, and if memory serves these tests usually show that protobuf\n> produces smaller files than BinaryFormatter, so this makes me think I'm\n> doing something wrong.\n>\n> I'm new to protobuf so I'm not sure what to change in order to reduce file\n> size. I've put IsPacked=true on all arrays of primitives (which sometimes\n> contain many thousands of elements), but this only resulted in a small\n> improvement.\n>\n> Any general tips on minimizing protobuf file sizes, or do I need to\n> provide more detail about the classes I'm serializing? (I tried to attach\n> my .proto file (zipped) but I get a message saying 'We don't support that\n> file type' even though ZIP is one of the listed file types!)\n>\n> Thanks in advance.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/207>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsCheFzwobLyRNzZV9R4kB3ccsZNzks5rPFekgaJpZM4LbSh8>\n> .\n>\n. I doubt you'll make any fundamental changes to the size at this point, if\nyou are sure you're not duplicating anything in the tree now. You could\nalso consider running it through DeflateStream or similar - of course that\napplies to either serializer. Ultimately, there's data there that needs\nstoring.\n\nMarc\n\nOn 5 Jan 2017 10:59 p.m., \"SidneyWells\" <notifications@github.com> wrote:\n\n> Thanks Marc, you're spot on. One of my classes is referenced by a couple\n> of others in the model. I've set AsReference and AsReferenceDefault to true\n> in what I think are the appropriate places and the file size is now\n> slightly less than the BF equivalents:\n>\n> File 1: BF = 1371 kB, protobuf = 1285 kB\n> File 2: BF = 12103 kB, protobuf = 11795 kB\n>\n> Is this nearer to what you'd expect?\n>\n> In simplified terms, my model consists of a Workspace object, which\n> contains a collection of Recordings, and each Recording contains a\n> collection of Waveforms. Each Waveform contains a reference to the\n> Recording it belongs to. This is the only place in the model where there\n> are circular references. Each of these three classes also contain a few\n> primitives (or arrays of primitives) and a collection of Property objects.\n>\n> The .proto file is pasted below. Can you suggest any further optimisations?\n>\n> --\n>\n> import \"bcl.proto\"; // schema for protobuf-net's handling of core .NET\n> types\n>\n> message AirblastWaveform {\n> repeated int32 _amplitudeSigns = 1;\n> }\n> message BooleanProperty {\n> optional bool _value = 1 [default = false];\n> }\n> message DateTimeProperty {\n> optional bcl.DateTime _value = 1;\n> }\n> message DoubleProperty {\n> optional double _value = 1 [default = 0];\n> }\n> message DynamicStrain {\n> repeated double Ex = 1 [packed=true];\n> repeated double Ey = 2 [packed=true];\n> repeated double Ez = 3 [packed=true];\n> repeated double Exy = 4 [packed=true];\n> repeated double Eyz = 5 [packed=true];\n> repeated double Exz = 6 [packed=true];\n> }\n> message IntegerProperty {\n> optional int32 _value = 1 [default = 0];\n> }\n> message LongProperty {\n> optional int64 _value = 1 [default = 0];\n> }\n> message OID {\n> optional string Name = 1;\n> optional bcl_Guid Guid = 2;\n> }\n> message Object {\n> }\n> message ObjectProperty {\n> optional bcl.NetObjectProxy _value = 1;\n> }\n> message PhysicalQuantity {\n> optional PhysicalQuantityType _type = 1 [default = Dimensionless];\n> optional PhysicalUnitsType _siUnitsType = 2 [default = Dimensionless];\n> }\n> enum PhysicalQuantityType {\n> Dimensionless = 0;\n> Acceleration = 1;\n> Velocity = 2;\n> Displacement = 3;\n> Temperature = 4;\n> Voltage = 5;\n> Pressure = 6;\n> Time = 7;\n> Frequency = 8;\n> AccelerometerSensitivity = 9;\n> MicrophoneSensitivity = 10;\n> Mass = 11;\n> GeophoneSensitivity = 12;\n> }\n> message PhysicalUnits {\n> optional PhysicalUnitsType _type = 1 [default = Dimensionless];\n> optional PhysicalQuantity _quantity = 2;\n> optional string _symbol = 3;\n> optional string _name = 4;\n> }\n> enum PhysicalUnitsType {\n> Dimensionless = 0;\n> MetresPerSecondSquared = 1;\n> MultipleOfG = 2;\n> MmPerSecondSquared = 3;\n> MetresPerSecond = 4;\n> MmPerSecond = 5;\n> Metres = 6;\n> Millimetres = 7;\n> Pascals = 8;\n> Atmospheres = 9;\n> dBL = 10;\n> Seconds = 11;\n> Milliseconds = 12;\n> Microseconds = 13;\n> Volts = 14;\n> Celcius = 15;\n> Kelvin = 16;\n> Bits = 17;\n> Samples = 18;\n> Hertz = 19;\n> InchesPerSecondSquared = 20;\n> InchesPerSecond = 21;\n> VoltsPerMetrePerSecondSquared = 22;\n> VoltsPerG = 23;\n> VoltsPerPascal = 24;\n> MillivoltsPerPascal = 25;\n> Inches = 26;\n> Hours = 27;\n> Millibars = 28;\n> VoltsPerCmPerSecondSquared = 29;\n> CmPerSecondSquared = 30;\n> PoundsPerSquareInch = 31;\n> Kilograms = 32;\n> Pounds = 33;\n> VoltsPerMetrePerSecond = 34;\n> VoltsPerMmPerSecond = 35;\n> VoltsPerCmPerSecond = 36;\n> CmPerSecond = 37;\n> }\n> message PrincipalStrain {\n> repeated double E1 = 1 [packed=true];\n> repeated double E2 = 2 [packed=true];\n> repeated double E3 = 3 [packed=true];\n> }\n> message Property {\n> optional PropertyType _type = 1 [default = FilePath];\n> optional PhysicalUnits _units = 2;\n> // the following represent sub-types; at most 1 should have a value\n> optional ObjectProperty ObjectProperty = 100;\n> optional IntegerProperty IntegerProperty = 101;\n> optional LongProperty LongProperty = 102;\n> optional DoubleProperty DoubleProperty = 103;\n> optional StringProperty StringProperty = 104;\n> optional DateTimeProperty DateTimeProperty = 105;\n> optional BooleanProperty BooleanProperty = 106;\n> }\n> enum PropertyType {\n> FilePath = 0;\n> NumberOfChannels = 1;\n> Description = 2;\n> TriggerMethod = 3;\n> ConfigurationFile = 4;\n> Timestamp = 5;\n> BatteryVoltage = 6;\n> Temperature = 7;\n> TriggerSource = 8;\n> MonitorID = 9;\n> CalibrationDate = 10;\n> ChannelID = 11;\n> ChannelNumber = 12;\n> CalibrationValue = 13;\n> Units = 14;\n> OriginalUnits = 15;\n> SensorRange = 16;\n> Resolution = 17;\n> WaveformLength = 18;\n> WaveformDuration = 19;\n> SampleTime = 20;\n> SampleRate = 21;\n> PretriggerLength = 22;\n> PretriggerDuration = 23;\n> TriggerLevel = 24;\n> MaxAmplitude = 25;\n> MinAmplitude = 26;\n> PeakParticleAcceleration = 27;\n> PeakParticleVelocity = 28;\n> PeakPressure = 29;\n> Location = 30;\n> Comments = 31;\n> Coordinates = 32;\n> AccelerometerSensitivity = 33;\n> MicrophoneSensitivity = 34;\n> PeakParticleDisplacement = 35;\n> LocalTimeOffset = 36;\n> AirblastTriggerLevel = 37;\n> Null = 38;\n> RelativeEnergy = 39;\n> DigitisingConstant = 40;\n> FirmwareVersion = 41;\n> ShotNumber = 42;\n> ZeroCrossingFrequency = 43;\n> MonitoringPoint = 44;\n> BlastDesign = 45;\n> LocalCoordinates = 46;\n> Initiation = 47;\n> ChargeWeight = 48;\n> FiringDelay = 49;\n> ShowFiringData = 50;\n> FiringTimeOffset = 51;\n> FiringTimeScale = 52;\n> GeophoneSensitivity = 53;\n> }\n> message Recording {\n> repeated Property _originalProperties = 1;\n> optional double _originalInitialTimeOffset = 2 [default = 0];\n> optional double _initialTimeOffset = 3 [default = 0];\n> optional double _sampleTimeInSeconds = 4 [default = 0];\n> repeated Waveform _waveforms = 5;\n> repeated Property _properties = 6;\n> }\n> message StandardError {\n> repeated double Sx = 1 [packed=true];\n> repeated double Sy = 2 [packed=true];\n> repeated double Sz = 3 [packed=true];\n> repeated double Sxy = 4 [packed=true];\n> repeated double Syz = 5 [packed=true];\n> repeated double Sxz = 6 [packed=true];\n> }\n> message StrainCalculationResult {\n> optional DynamicStrain DynamicStrain = 1;\n> optional PrincipalStrain PrincipalStrain = 2;\n> optional StrainRotation Rotation = 3;\n> optional StandardError StandardError = 4;\n> repeated double SSR = 5 [packed=true];\n> repeated double Q = 6 [packed=true];\n> optional bcl.DateTime StartTime = 7;\n> optional StrainCalculationType CalculationType = 8 [default = TwoD];\n> repeated OID MonitorPoints = 9;\n> optional OID ReferencePoint = 10;\n> optional bool ArePrerequisitesMet = 11 [default = false];\n> }\n> enum StrainCalculationType {\n> TwoD = 0;\n> ThreeD = 1;\n> }\n> message StrainRotation {\n> repeated double Wx = 1 [packed=true];\n> repeated double Wy = 2 [packed=true];\n> repeated double Wz = 3 [packed=true];\n> }\n> message StringProperty {\n> optional string _value = 1;\n> }\n> enum TimeAxisStyle {\n> Relative = 0;\n> Absolute = 1;\n> }\n> message VectorSumWaveform {\n> }\n> message VibrationWaveform {\n> optional bool _hasBeenRotated = 1 [default = false];\n> }\n> message Waveform {\n> optional WaveformType _type = 1 [default = Radial];\n> optional bcl.NetObjectProxy _recording = 2; // reference-tracked Recording\n> optional string _name = 3;\n> repeated Property _properties = 4;\n> repeated double _amplitude = 5 [packed=true];\n> repeated double _originalAmplitude = 6 [packed=true];\n> optional bool _isAlignable = 7 [default = false];\n> optional bool _hasBeenFiltered = 8 [default = false];\n> optional bool _hasLengthChanged = 9 [default = false];\n> // the following represent sub-types; at most 1 should have a value\n> optional AirblastWaveform AirblastWaveform = 100;\n> optional VectorSumWaveform VectorSumWaveform = 101;\n> optional VibrationWaveform VibrationWaveform = 102;\n> }\n> enum WaveformType {\n> Radial = 0;\n> Transverse = 1;\n> Vertical = 2;\n> VectorSum = 3;\n> Airblast = 4;\n> }\n> message Workspace {\n> optional int32 _index = 1 [default = 0];\n> repeated bcl.NetObjectProxy _recordings = 2; // reference-tracked Recording\n> repeated Property _properties = 3;\n> optional bool _neverSaved = 4 [default = false];\n> optional TimeAxisStyle _xAxisStyle = 5 [default = Relative];\n> optional StrainCalculationResult _strainCalcResult = 6;\n> }\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/207#issuecomment-270782757>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsAwI4IdYjTQsb0kL1hph88xoeO4aks5rPXXSgaJpZM4LbSh8>\n> .\n>\n. And what is the code that goes with this? Indeed, protobuf-net can't\ndeserialize an interface - at least, not without some help to tell it how\nto interpret that in terms of concrete types.\n\nOn 12 January 2017 at 13:49, fhchina <notifications@github.com> wrote:\n\n> ProtoBuf couldn't find parameterless constructor for IExpression, but\n> IExpression is an interface.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/208>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsOl0QuBV9GMQ1sUGcdhDqCiohdMNks5rRi9OgaJpZM4LhxL7>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. In general I would try to avoid that scenario *entirely* - interfaces on DTOs look ... just wrong. However, `MetaType` has a `ConcreteType` property (simple use) or a `SetFactory` method (more complex scenarios), which *may* be usable, depending on the scenario.\r\n. default values also need to be applied by your own code. this is easy in c#\nlatest:\n\n    [Required]\n    [DefaultValue(-1)]\n    [ProtoMember(1)]\n    public int MvcUserId { get; set; } = -1;\n\n(Note the initial value after the property)\n\nOn 21 Jan 2017 4:34 p.m., \"Greg Eakin\" <notifications@github.com> wrote:\n\nIf you look at the data written, when MvcUserId is default (-1), no\ninformation is written [correct].\n\n[TestMethod]public void UserWriteDefault()\n{\n    using (var stream = new MemoryStream())\n    {\n        var person = new MvcUser { Id = -1 };\n        Serializer.Serialize(stream, person);\n        CollectionAssert.AreEqual(new byte[] { }, stream.ToArray());\n    }\n}\n\nBut the read-back doesn't change it from zero to the default [wrong].\n\n[TestMethod]public void UserReadDefault()\n{\n    using (var stream = new MemoryStream(new byte[] { }))\n    {\n        var person = Serializer.Deserialize<MvcUser>(stream);\n        Assert.AreEqual(-1, person.Id);\n    }\n}\n\nThe schema looks good.\n\n[TestMethod]public void SchemaTest()\n{\n    var proto = Serializer.GetProto<MvcUser>();\n    var schema = \"package BufferTests;\\r\\n\\r\\n\" +\n        \"message MvcUser {\\r\\n\" +\n        \"   optional int32 Id = 1 [default = -1];\\r\\n\" +\n        \"}\\r\\n\";\n    Assert.AreEqual(schema, proto);\n}\n\nThis also looks like issue #203\n<https://github.com/mgravell/protobuf-net/issues/203>.\nDefaultTests.zip\n<https://github.com/mgravell/protobuf-net/files/721286/DefaultTests.zip>\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/209#issuecomment-274272158>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsDGNzV1Kyfr4znUykzSU7jWI-E2vks5rUjOBgaJpZM4LlQt3>\n.\n. noted, thanks; very interesting - hopefully will find out what is happening\nasap\n\nOn 30 Jan 2017 4:57 p.m., \"jamesgibbs100\" <notifications@github.com> wrote:\n\n> Hi there,\n>\n> Environment : NET Core 1.1.0 console application, consuming protobuf-net\n> 2.1.0. MUST be run/build in Release mode.\n>\n>    - Create a class with a static public constructor\n>    - Deserialize the class (after having serialized it)\n>    - Exception is thrown : System.InvalidProgramException: Common\n>    Language Runtime detected an invalid program\n>\n> Remove the static public constructor and the deserialization works as\n> expected.\n>\n> *Note : This only effects deserialization and not serialization*\n>\n> Very simple test rig below demonstrated the problem\n>\n> Thanks\n> James\n>\n> public class Program\n> {\n>         public static void Main(string[] args)\n>         {\n>             ProtoTestOne t1 = null;\n>             using (MemoryStream ms = new MemoryStream())\n>             {\n>                 ProtoBuf.Serializer.Serialize<ProtoTestOne>(ms, t1);\n>                 ms.Seek(0, SeekOrigin.Begin);\n>                 t1 = ProtoBuf.Serializer.Deserialize<ProtoTestOne>(ms);\n>             }\n>         }\n>\n>         [ProtoBuf.ProtoContract]\n>         public class ProtoTestOne\n>         {\n>             //This causes the exception\n>             static ProtoTestOne()\n>             {\n>             }\n>\n>             public ProtoTestOne()\n>             {\n>             }\n>         }\n> }\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/210>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHhVVK3sEutChOKE5WLaY0OARCXrks5rXhZygaJpZM4LxpYv>\n> .\n>\n. This appears to be fixed - I think via a contributed PR at some point. Closing.. There is a pre-existing `Serializer.NonGeneric.TryDeserializeWithLengthPrefix`, but that takes an awkward `TypeResolver`; will look at the PR (and: sorry for delay, I've been.... *distracted*). Re \"really big integers\": that's actually part of the protobuf spec (https://developers.google.com/protocol-buffers/docs/proto):\r\n\r\n> The smallest tag number you can specify is 1, and the largest is 229 - 1, or 536,870,911.\r\n\r\n(unless the obsolete and undocumented \"message-set\" encoding is used, but protobuf-net doesn't support message-set encoding - it isn't even part of the formal specification, although I've reverse-engineered it and understand what it needs to look like)\r\n\r\nHowever, I'm happy to check to see that appropriate and useful errors are being raised.  The exception thing (base class) - yup, sounds like a bug. Will target both in 2.31. you're absolutely right, of course; either it needs to work, or it needs to fail as early as possible with a meaningful message; I've shipped 2.3.0, so I'm starting the 2.3.1 work currently (this issue is tagged for 2.3.1).. appreciated, thanks. if the main issue here is UWP, that's on the roadmap as a future item. This is an interesting one; I need to think about how this should work. The non-trivial part of the issue is that enums in protobuf are only defined for 32-bit values. However, since 2.3.0 adds much improved enum pass-thru support (consistent with proto3 runtime behaviour), it might be that we can simply treat `long` enums as direct pass-thru. Needs consideration. Adding to 2.3.1. The previous comment is correct, but to be more specific: because you write\nmultiple times to the same stream without rewinding/clearing the contents,\nyou are essentially *concatenating* all the objects into a single stream -\nso the overall length of data will be (number of objects)*(size of object).\nAs an aside, this also means it isn't a like for like performance test,\nespecially for deserialization!\n\nNow, protobuf is designed such that append===merge. So from protobuf's\nperspective, you have written a **single** object with many many key/value\npairs - most of which are duplicates. If you *ever need* to do what you are\ndoing here (writing multiple objects sequentially), the\nSerializeWithLengthPrefix and DeserializeWithLengthPrefix methods will help\nyou - basically they allow you to tell the system how to identify\nindividual objects. However, in your case what you should probably do is\nrewind and clear the stream between writes, so:\n\n\nfor(...) {\n    ms.Position = 0;\n    ms.Length = 0;\n\n    // not shown: serialize to ms here\n\n}\n// read the contents of the final write:\nvar arr = ms.ToArray();\n\n\n\nOn 23 February 2017 at 17:38, Snarly Narwhal <notifications@github.com>\nwrote:\n\n> I get a SystemArgumentException: \"An item with the same key has already\n> been added.\" when deserializing a dictionary. I wrote this test script:\n>\n> `\n> using System;\n> using System.Collections.Generic;\n> using System.Diagnostics;\n> using System.IO;\n> using System.Text;\n> using ProtoBuf;\n>\n> class Program {\n> static void Main(string[] args) {\n>\n> \tint length = 1000;\n>\n> \tstring json = \"\";\n>\n> \tStopwatch watch;\n>\n> \tfloat ms;\n>\n>\n> \tPerson person = new Person {\n> \t\tFirstName = \"John\",\n> \t\tLastName = \"Doe\",\n> \t\tProfession = \"Programmer\",\n> \t\tAge = 99,\n> \t\tIsMale = false\n> \t};\n>\n> \tperson.GiveFriends();\n>\n> \t//////////////////// JSON_START\n> \twatch = Stopwatch.StartNew();\n> \tfor (int i = 0; i < length; i++) {\n> \t\tjson = Newtonsoft.Json.JsonConvert.SerializeObject(person);\n> \t}\n> \twatch.Stop();\n> \tms = watch.ElapsedMilliseconds;\n> \tConsole.WriteLine(\"Json serialize: \" + ms);\n>\n> \twatch = Stopwatch.StartNew();\n> \tfor (int i = 0; i < length; i++) {\n> \t\tPerson person0 = Newtonsoft.Json.JsonConvert.DeserializeObject<Person>(json);\n> \t}\n> \twatch.Stop();\n> \tms = watch.ElapsedMilliseconds;\n> \tConsole.WriteLine(\"Json deserialize: \" + ms);\n>\n> \t//////////////////// JSON_END\n>\n> \t////////////////// PROTOBUFF_START\n>\n> \tbyte[] data = null;\n>\n> \twatch = Stopwatch.StartNew();\n> \tusing (MemoryStream stream = new MemoryStream()) {\t\n> \t\tfor (int i = 0; i < length; i++) {\n> \t\t\tSerializer.Serialize(stream, person);\n> \t\t}\n> \t\tdata = stream.ToArray();\n> \t}\n> \twatch.Stop();\n> \tms = watch.ElapsedMilliseconds;\n> \tConsole.WriteLine(\"Proto serialize: \" + ms);\n>\n> \twatch = Stopwatch.StartNew();\n> \tusing (MemoryStream stream = new MemoryStream(data)) {\n> \t\tfor (int i = 0; i < length; i++) {\n> \t\t\tSerializer.Deserialize<Person>(stream);\n> \t\t}\n> \t}\n>\n> \twatch.Stop();\n> \tms = watch.ElapsedMilliseconds;\n> \tConsole.WriteLine(\"Proto deserialize: \" + ms);\n>\n> \t//////////////////// PROTOBUFF_END\n>\n> \tConsole.ReadLine();\n> }\n>\n> }\n>\n> [ProtoContract]\n> public class Person {\n>\n> [ProtoMember(1)]\n> public string FirstName;\n> [ProtoMember(2)]\n> public string LastName;\n> [ProtoMember(3)]\n> public string Profession;\n> [ProtoMember(4)]\n> public int Age;\n> [ProtoMember(5)]\n> public bool IsMale;\n> [ProtoMember(6)]\n> public Person[] FriendsArray;\n> [ProtoMember(7)]\n> public List<Person> FriendsList = new List<Person>();\n> [ProtoMember(8)]\n> public Dictionary<int, Person> FriendsDictionary = new Dictionary<int, Person>();\n>\n> public Person() {\n> \tFirstName = \"John\";\n> \tLastName = \"Doe\";\n> \tProfession = \"Programmer\";\n> \tAge = 99;\n> \tIsMale = true;\n> }\n>\n> public void GiveFriends() {\n> \tint len = 100;\n> \tFriendsArray = new Person[len];\n> \tFriendsList = new List<Person>();\n> \tFriendsDictionary = new Dictionary<int, Person>();\n> \tfor (int i = 0; i < len; i++) {\n> \t\tFriendsArray[i] = new Person();\n> \t\tFriendsList.Add(new Person());\n> \t\tFriendsDictionary.Add(i, new Person());\n> \t}\n> }\n>\n> }\n> `\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/220>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGYa6L32UxHjPD59ec7sAW-hPVE7ks5rfcQAgaJpZM4MKRUD>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. This isn't a scenario that the library targets or that I intend the library to target; my advice here would be: always initialize your lists. For example\r\n\r\n    [ProtoMember(1)]\r\n    public List<Foo> Items {get; } = new List<Foo>();\r\n\r\nprotobuf-net is fine with things like that. If you want lazier initialization, then you can do that with more nuanced getters, for example:\r\n\r\n    private List<Foo> _items;\r\n    [ProtoMember(1)]\r\n    public List<Foo> Items => items ?? (_items = new List<Foo>());\r\n\r\nwhich again: protobuf-net is fine with.\r\n\r\nWhen the 3.0.0 codegen code changes are a thing, it might be that this is something we can target *there*, but: ultimately I'm not sure this is protobuf-net's thing to do.\r\n\r\nNote that root-level lists *are* initialized, but that's a very different scenario.. To quote from the homepage:\n\ninstall\n\nNuget : Install-Package protobuf-net\n\n\nThe nuget link is https://www.nuget.org/packages/protobuf-net/, but as\nmentioned - the most common way to install would be via the package manager\nin Visual Studio.\n\nOn 2 March 2017 at 18:52, Snarly Narwhal <notifications@github.com> wrote:\n\n> Can the .dll files be downloaded anywhere? If not, can they be uploaded so\n> we don't need to build ourselves? Or could we get documentation explaining\n> how to build protobuf-net for a specific platform?\n>\n> I forked the project and can't even build the solution. :/\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/222>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsC60-qRLiA8xWKSJzrzLc3d3zNNeks5rhw_0gaJpZM4MRYZR>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. 0 bytes is legal in protobuf - so thr first thing to check is that you\ndon't have an example that serializes to zero bytes. However, is is also\npossible that UWP / Native is making it unhappy, in particular with the\nlack of meta-programming. Are there any exceptions? I would have expected\nexceptions if this were the case...\n\nOn 12 Mar 2017 2:18 a.m., \"Ryan Tremblay\" <notifications@github.com> wrote:\n\n> When protobuf-net 2.0.0.668 (the last one that seems to work with UWP\n> projects) is used in a UWP project that is compiled with .NET Native (the\n> default for Release builds, and required for any app published to the\n> store), it completely doesn't work. That is, the Serialize function writes\n> zero bytes to the specified stream.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/223>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsOQscvHjga7-Oe2U_UydM0vaudcaks5rk1XagaJpZM4MaaJe>\n> .\n>\n. im kinda surpised it doesnt throw all kinds of exceptions, then.\n\nultimately UWP needs pre-gen. ive been hoping that the Roslyn generator\nstuff would ship so I can start working on a v3 that handles this\nautomatically, but until then you'd have to use the precompiler options in\npb-net. Unfortunately this isn't trivial and I have not tested it on UWP\nspecifically.\n\nOn 12 Mar 2017 5:31 p.m., \"Ryan Tremblay\" <notifications@github.com> wrote:\n\n> In this case, the data I'm serializing definitely should not be 0 bytes.\n> The exact same code works fine when built as Debug (without .NET Native),\n> but in Release (with .NET Native) it doesn't write any data out. The same\n> problem seems to exist for deserializing as well. That is, where I\n> successfully serialized in a Debug build, when I try to deserialize the\n> data in Release, it doesn't read any of the data and I get back an\n> empty/default object.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/223#issuecomment-285960038>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGE1aWk46KfGPyFqBYdTIP8XKsGEks5rlCwHgaJpZM4MaaJe>\n> .\n>\n. that is fantastic; thanks for that update!\n\nOn 13 Mar 2017 4:00 a.m., \"Ryan Tremblay\" <notifications@github.com> wrote:\n\n> I was reading up a bit on the *.rd.xml files used by the .NET Native\n> compiler and found that if I change:\n>\n> <Assembly Name=\"*Application*\" Dynamic=\"Required All\" />\n>\n> to:\n>\n> <Assembly Name=\"*Application*\" Dynamic=\"Required All\" Serialize=\"All\" />\n>\n> then protobuf works as expected. From the docs:\n>\n> Serialize. Controls runtime access to constructors, fields, and\n> properties, to enable type instances to be serialized and serialized by\n> third-party libraries such as the Newtonsoft JSON serializer.\n>\n> Probably worth updating the protobuf-net docs to call this out! Also,\n> after discovering this, I found there was a mention of something similar in\n> issue #138 <https://github.com/mgravell/protobuf-net/issues/138>. That\n> issue is more focused on UWP support specifically in 2.1 (side note: Is\n> there any update on this? As mentioned in this thread, I had to use\n> 2.0.0.668).\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/223#issuecomment-286010747>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsPwWVuGXzhEpkO-G_toxe3GdVTJiks5rlL9WgaJpZM4MaaJe>\n> .\n>\n. protogen has been completely rewritten for 2.3.0; this will be working in the 2.3.0 release.\r\n\r\nNote, however, that it is now **strongly** recommended (by Google) to always have a zero value as the first item in an enum. This is a requirement for proto3 (you are using proto2 by default, since you don't have `syntax = \"proto3\";`). Fixed in 2.3.0; example output:\r\n\r\n```\r\n[global::ProtoBuf.ProtoContract()]\r\npublic partial class EnumFirstIsNonZero\r\n{\r\n    [global::ProtoBuf.ProtoMember(1, Name = @\"optional\")]\r\n    [global::System.ComponentModel.DefaultValue(Foo.A)]\r\n    public Foo Optional\r\n    {\r\n        get { return __pbn__Optional ?? Foo.A; }\r\n        set { __pbn__Optional = value; }\r\n    }\r\n    public bool ShouldSerializeOptional() => __pbn__Optional != null;\r\n    public void ResetOptional() => __pbn__Optional = null;\r\n    private Foo? __pbn__Optional;\r\n\r\n    [global::ProtoBuf.ProtoMember(2, Name = @\"required\", IsRequired = true)]\r\n    public Foo Required { get; set; } = Foo.A;\r\n\r\n}\r\n```. At a complete guess: IL2CPP is doing \"pruning\" to reduce the final size,\nremoving things that it can't see evidence for usage. There's usually\nattributes you can add, or other configuration options, to tell a pruning\ntool to leave something alone. Apply that to your DTOs.\n\nOn 24 Mar 2017 3:11 a.m., \"mygoodsemail\" <notifications@github.com> wrote:\n\n> I used ProtoBuf as network communication protocol. If my android project\n> compile using Mono 2x, everything is OK. But compile using IL2CPP throw\n> exception. The following exception information:\n>\n> System.Exception: ProtoBuf deserialize type:GameFramework.ConnectionData.GamePlayerData\n> error ---> ProtoBuf.ProtoException: No parameterless constructor found for\n> VehicleModel at ProtoBuf.Meta.TypeModel.ThrowCannotCreateInstance\n> (System.Type type) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.TypeSerializer.CreateInstance (ProtoBuf.ProtoReader\n> source, Boolean includeLocalCallback) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.TypeSerializer.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.ProtoReader.ReadTypedObject (System.Object value, Int32 key,\n> ProtoBuf.ProtoReader reader, System.Type type) [0x00000] in <filename\n> unknown>:0 at ProtoBuf.ProtoReader.ReadObject (System.Object value, Int32\n> key, ProtoBuf.ProtoReader reader) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.SubItemSerializer.ProtoBuf.\n> Serializers.IProtoSerializer.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.ListDecorator.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.PropertyDecorator.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.TypeSerializer.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Meta.TypeModel.DeserializeCore (ProtoBuf.ProtoReader reader,\n> System.Type type, System.Object value, Boolean noAutoCreate) [0x00000] in\n> <filename unknown>:0 at ProtoBuf.Meta.TypeModel.Deserialize\n> (System.IO.Stream source, System.Object value, System.Type type,\n> ProtoBuf.SerializationContext context) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Meta.TypeModel.Deserialize (System.IO.Stream source,\n> System.Object value, System.Type type) [0x00000] in <filename unknown>:0\n>\n> Version : 2.0.0.668\n> Anyone know why? Thank you!\n> Sorry for my english -_-!\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/225>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsFRn0YdypicdXOjsRX6f-uqro8Q_ks5rozREgaJpZM4MnnyW>\n> .\n>\n. I'm *assuming* my guess was right; closing due to lack of feedback. Feel free to reopen if I'm wrong.. Hi; subclasses can also be configured at runtime via RuntimeTypeModel (in\nmost cases, the .Default instance is what you want). Note that any\nconfiguration must be done before you start serializing, and note also that\nthe tags used must be repeatable - if SomeSubType is key 17 today, then it\nneeds to stay key 17 in the future.\n\nI'm not at a PC, so this is purely from memory:\n\n     RuntimeTypeModel.Default[typeof(TheBaseType)]\n        .AddSubType(17, typeof(SomeSubType));\n\nOn 4 Apr 2017 11:35 p.m., \"Harsimran Bath\" <notifications@github.com> wrote:\n\n> I have been researching this for a while, and it seems that the BaseClass\n> needs the [ProtoInclude] attribute exposing the subclasses. As per:\n> http://wallaceturner.com/serialization-with-protobuf-net.\n>\n> However, my BaseClass and SubClass reside in separate assemblies. My\n> SubClass assembly is referencing the BaseClass assembly. Because of this\n> architecture, my BaseClass is not *aware* of the SubClass, but my\n> SubClass *is* obviously aware of my BaseClass.\n>\n> As such, how can I make inheritance work given this architecture? I tried\n> decorating my SubClass with [ProtoInclude] but that did not work.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/227>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsLY_m7KsOCBxnWkL_hWG-3JH0oSgks5rssW9gaJpZM4MzhSG>\n> .\n>\n. All great extra context, thanks. Merged.. All good extra context, cheers. Merging as another interesting comparison / line in the sand - but in that outcome we'd just use `Task<T>` from the outset - both have the same allocation issue, and direct `Task<T>` is marginally faster. Odd that it is faster to wrap a `ValueTask<T>` into a `Task<T>` than to use `await` on the original `ValueTask<T>`!. If I get a chance later I'll try with float and double (without a reference wrapper) - see if there's a stack size limit where the suckage starts.. The protobuf format doesn't include field names, so the code needs *some* mechanism to know which members map to which field **numbers** in the data, and it needs to be *reliable*, i.e. you'll always get the same mapping - today, tomorrow, and two months from now.\r\n\r\n*one* of the ways to do this is by annotating the object via attributes - this can be done via any of `[ProtoMember]`, `[DataMember]` or `[XmlElement]` (in the last two cases, you will need to include the field number in the optional `Order` member). If you have code-generated entity models, there is also a `[ProtoPartialMember]` that can be added in a separate `partial class` file to allow you to attach numbers to members in the generated file without having to edit the generated file.\r\n\r\nAnother way you can do it is by asking the library to just assume that you're *never going to change your type*, and use the alphabetical order of the members.  You would do this via `[ProtoContract(InferTagFromName = true)]` - or to apply this as a more general default: `RuntimeTypeModel.Default.InferTagFromNameDefault`. However, this should not be done lightly - it makes your types very brittle - adding, removing or renaming members can (will) make the data unreliable.\r\n\r\nIndividual types can also be configured entirely manually using the `RuntimeTypeModel` / `MetaType` API in the library.\r\n\r\nWould any of those options suffice? If you are more specific about what issue you are facing, I can advise further.. > Please suggest something\r\n\r\nto repeat:\r\n\r\n> Would any of those options suffice? If you are more specific about what issue you are facing, I can advise further.\r\n\r\nYou haven't told me what problem you are facing or where you're stuck.. You haven't rewound the `MemoryStream` - if you are \"old school\" like me, think of VHS or audio cassettes: the `MemoryStream` is currently at the end, there is nothing to read. As it happens, 0 bytes is a perfectly valid length to protobuf. All you need is `ms.Position = 0;`.\r\n\r\nAdditional notes:\r\n\r\n- `var dcat = Serializer.DeepClone(cat);` would do all of this in one go\r\n- the generic `Serializer.Serialize(ms, cat)` and `Serializer.Deserialize<Cat>(ms)` API may be easier for you to use. because that isn't how you usually use streams - indeed, most streams\n*arent rewindable* (TCP sockets, etc). MemoryStream is a very unusual case\n- usually people don't write and read to the same stream in this way.\n\nOn 25 Apr 2017 5:09 p.m., \"nathvi\" <notifications@github.com> wrote:\n\n> I do have a question about the process of the Serialize / Deserialize\n> process.\n> If you are feeding in a memory stream to your Serialize method, and need to\n> rewind the position to 0 in order to get the Deserialize method to read\n> it, why not\n> automatically do this on the Serialize call? I'm sure I'm missing\n> something here.\n> @mgravell <https://github.com/mgravell>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/239#issuecomment-297081078>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsAdwxDdqqlnRdfFhkpP_fynLRkbrks5rzhqkgaJpZM4NHqed>\n> .\n>\n. GetBuffer returns the oversized array that MemoryStream uses to avoid\nallocating for every write. You should never use GetBuffer without also\nchecking .Length and limiting your access to exactly that many bytes.\n\nProtobuf-net got the message entirely correct :)\n\nEither use ToArray when storing to redis, or check .Length and use\nArraySegment<byte>(ms.GetBuffer(), 0, ms.Length) if your redis client\nsupport that or similar.\n\nOn 25 Apr 2017 5:39 p.m., \"nathvi\" <notifications@github.com> wrote:\n\n> I'm fine now with serializing an object and sending it to a Redis List,\n> but when I try and\n> pop it off into a byte[] and deserialize I'm getting a strange error.\n> First is my Cat definition:\n>\n> [ProtoContract]\n> public class Cat\n> {\n>     [ProtoMember(1)]\n>     public string Name { get; set; }\n>\n>     public Cat()\n>     {\n>     }\n>\n>     public Cat(string name)\n>     {\n>         Name = name;\n>     }\n> }\n>\n> And how I'm using it:\n>\n>     public override void Start()\n>     {\n>         base.Start();\n>\n>         Cat c1 = new Cat(\"Felix\");\n>         MemoryStream ms = new MemoryStream();\n>         Serializer.Serialize<Cat>(ms, c1);\n>         ms.Position = 0;\n>\n>         RedisClient.LPush(\"CatList\", ms.GetBuffer());\n>         byte[] catObject = RedisClient.LPop(\"CatList\");\n>         MemoryStream dStream = new MemoryStream(catObject);\n>         Cat dCat = Serializer.Deserialize<Cat>(dStream);\n>     }\n>\n> When executing the line:\n> Cat dCat = Serializer.Deserialize(dStream);\n> I'm getting this exception and I'm not sure why:\n> An exception of type 'ProtoBuf.ProtoException' occurred in\n> protobuf-net.dll but was not handled in\n> user code\n> Additional information: Unconsumed data left in the buffer; this suggests\n> corrupt input\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/240>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsDBzTN0IGvJyKQQTo6LXzxGm11Epks5rziHKgaJpZM4NHv_J>\n> .\n>\n. Well that's embarrassing. I suspect you're right! . Hi; for some reason all my usual github notifications got blown away, so I only noticed this because of @nathvi 's comment (I rebuilt all my notifications the other day). I will look this evening and see what's wrong.. I'm assuming that `myIP` is an `IPEndPoint`. For the purposes of testing this, I generated a random IP and am using:\r\n\r\n    var myIP = new IPEndPoint(IPAddress.Parse(\"220.5.105.207\"), 6379);\r\n\r\nThis fails in the way you describe.\r\n\r\nYou can see the problem here if we look at the stacktrace:\r\n\r\n```\r\nUnhandled Exception: System.Net.Sockets.SocketException: The attempted operation is not supported for the type of object referenced\r\n   at System.Net.IPAddress.get_ScopeId()\r\n   at IPAddressSurrogate.op_Implicit(IPAddress value) in C:\\Users\\mgravell\\Documents\\Visual Studio 2017\\Projects\\ConsoleApp12\\ConsoleApp12\\Program.cs:line 44\r\n```\r\n\r\nNotice that it is failing when accessing the `ScopeId`, and sure enough - if we *forget about protobuf*, and just look at `myIP.ScopeId`, that alone is enough to make it fail. So; let's assume we don't need that and just throw it away (remove `ScopeId` completely in the surrogate and operators).\r\n\r\nThis now (for me) fails with a complaint about no wire-value for `InterNetwork`. I think this is just because the surrogate feature was never intended to work with enums; if we remove all mention of `AddressFamilySurrogate`, the code now *runs*, but doesn't actually serialize anything - that's because `IPAddressSurrogate` has no members marked for serialization - but... on investigation, I don't think we even need `IPAddressSurrogate` - the only interesting property that we actually need to store is `IPString` - or the bytes equivalent. I'm going to stick with the `string` approach.\r\n\r\nNext I notice that the conversion operators are failing because of the `null` initial values - conversion operators on reference types need to handle `null` (usually by passing it through).\r\n\r\nAnd you don't seem to be storing the `Port`, which is essential.\r\n\r\nAt this point I took a step back, because I think you're making this **way, way** more complicated than necessary. I'm pretty sure that *all* you need is:\r\n\r\n```\r\n[ProtoContract]\r\npublic class IPEndPointSurrogate\r\n{\r\n\r\n    [ProtoMember(1)]\r\n    public string Address { get; set; }\r\n\r\n    [ProtoMember(2)]\r\n    public int Port { get; set; }\r\n\r\n    public static implicit operator IPEndPointSurrogate(IPEndPoint value)\r\n        => value == null ? null : new IPEndPointSurrogate { Address = value.Address.ToString(), Port = value.Port };\r\n\r\n    public static implicit operator IPEndPoint(IPEndPointSurrogate value)\r\n        => value == null ? null : new IPEndPoint(IPAddress.Parse(value.Address), value.Port);\r\n}\r\n```\r\n\r\nwith example usage:\r\n\r\n```\r\npublic static class P\r\n{\r\n    public static void Main()\r\n    {\r\n        RuntimeTypeModel.Default.Add(typeof(IPEndPoint), false)\r\n            .SetSurrogate(typeof(IPEndPointSurrogate));\r\n\r\n        var myIP = new IPEndPoint(IPAddress.Parse(\"220.5.105.207\"), 6379);\r\n        using (var ipStream = new MemoryStream())\r\n        {\r\n            Serializer.Serialize(ipStream, myIP);\r\n            ipStream.Position = 0;\r\n            var clone = (IPEndPoint)Serializer.Deserialize<IPEndPoint>(ipStream);\r\n            Console.WriteLine(clone.ToString());\r\n\r\n            // prove it worked:\r\n            Console.WriteLine(ReferenceEquals(clone, myIP)); // false, different objects\r\n            Console.WriteLine(Equals(clone, myIP)); // true, count as equivalent\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI'm not sure if I've answered the question, but...\r\n\r\nNote it will be *slightly smaller* if we use raw bytes intead:\r\n\r\n```\r\n[ProtoContract]\r\npublic class IPEndPointSurrogate\r\n{\r\n\r\n    [ProtoMember(1)]\r\n    public byte[] Address { get; set; }\r\n\r\n    [ProtoMember(2)]\r\n    public int Port { get; set; }\r\n\r\n    public static implicit operator IPEndPointSurrogate(IPEndPoint value)\r\n        => value == null ? null : new IPEndPointSurrogate { Address = value.Address.GetAddressBytes(), Port = value.Port };\r\n\r\n    public static implicit operator IPEndPoint(IPEndPointSurrogate value)\r\n        => value == null ? null : new IPEndPoint(new IPAddress(value.Address), value.Port);\r\n}\r\n```. I don't think there's much useful that protobuf-net can do for an `int` - using the base serializer should probably be fine. Does it work?. IMO the problem is here:\r\n\r\n    Encoding.ASCII.GetBytes(messageString)\r\n\r\nIt isn't clear what `messageString` is here, but a .NET `string` is **not** a valid way to pass around raw binary ([see previous blog entry](http://blog.marcgravell.com/2013/02/how-many-ways-can-you-mess-up-io.html)).\r\n\r\nCan you indicate what `messageString` is and where it came from?\r\n\r\nIf you **absolutely must** use a `string` for some reason, then base-64 is your friend (`Convert.ToBase64String()` and `Convert.FromBase64String()`). Otherwise, prefer something like `byte[]` or `Stream` for raw data.\r\n\r\nWhat redis client are you using? StackExchange.Redis supports `byte[]` - anything that accepts a `RedisValue` can take a `byte[]`. Redis itself is binary-safe.. at the raw redis level, you want `LRANGE` ; I can't advise on ServiceStack. Basically: if you can get the original binary back, I can help. Until you have the same binary data that you wanted to store, protobuf-net doesn't stand a chance of succeeding. It sounds like your blocker is upstream of protobuf-net.\r\n\r\nWorst case, if the problem is that your client doesn't work with binary: base-64. I'm closing this because it doesn't sound like a protobuf-net issue, but if I've misunderstood please reopen or ping me. I think this is already fixed; hard to tell if we fixed it the same way, as all I can see in the merge is a sea of red and green; that file has changed radically in the last day. But running the \"failing\" example gives:\r\n\r\n```\r\n#pragma warning disable CS1591\r\n[global::ProtoBuf.ProtoContract(Name = @\"Test\")]\r\npublic partial class Test\r\n{\r\n    [global::ProtoBuf.ProtoMember(1, Name = @\"fs\", IsPacked = true)]\r\n    public float[] Fs { get; set; }\r\n}\r\n#pragma warning restore CS1591\r\n```\r\n. Very much appreciated, but already found and fixed separately, and is going to be impossible to merge. Keep 'em coming, though!. I don't currently offer that, mostly because nobody has ever asked. If you have something in mind, feel free to ping me (marc.gravell@gmail.com), ideally spelling out whether you're after:\r\n\r\n- a specific feature addition / tweak\r\n- advice and guidance\r\n- troubleshooting / bug report\r\n- etc\r\n\r\nNote that I *have* recently added a librepay account in case anyone wants to make any donations, but: that is (by definition) not intended for work-in-kind things. https://liberapay.com/protobuf-net/donate. Ultimately, the protobuf format has no mechanism to express this. I could silently ignore them; would that be preferable?. if you `Deserialize<List<T>>`, how would you know whether to expect the shim or not? how would it work for append-only files? if the first list you append has nulls, the second list doesn't, and the third list does again? having a different *shape* depending on whether there are nulls or not is a very bad idea, IMO, and is going to lead to huge injuries - the effect is non-obvious.\r\n\r\nIMO the real fix here is: since you know you have nulls, manually create a root object that has a list *marked for nullable support*, and serialize *that* instead. Then it is in *your* control, and not down to the library to make arbitrary opinionated decisions.. wow, that's pretty cute; much obliged. merged and deployed, but I notice that \"generate\" now only works once - any ideas? I can take a look later, but obviously you're more familiar. I like that the errors move to the right squigglies, btw - I'm glad I went to the trouble of tracking the full token ranges :). also: it doesn't show the generated code when there are only warnings; this may or may not be the same issue. ah, got it; if it fails with an exception, the `exception` is returned in the JSON but not displayed anywhere; actual bug causing it to `throw` was mine. I fixed this, btw; https://github.com/mgravell/protobuf-net/commit/ca2ad112386bc188bca14e5f233376b350808ce8. works for me, thanks. powerful editor; like it!. ![image](https://cloud.githubusercontent.com/assets/17328/26458655/ccac5ec4-416b-11e7-85db-0a63d700966b.png)\r\n\r\nyay!. oh wow, that's worrying; does dummy.zip exist and have data in this minimal example? trying to repro locally.... k, can't repro with that code, because a: I don't have your `Pnl<T>` or `Holding` types, and b: I don't have your data, and if I do anything with an empty zip, the `ZipArchive` code exploded long before it gets near protobuf-net.. additional question: how large is the data when uncompressed?\r\n. > The error happens when there are at least 2 objects in the list. I can send the zip and the code to read it, if you'd like to take a look.\r\n\r\nYes please, very much. Sorry for drip-feeding comments here!. marc.gravell@gmail.com. Thank you, your email was perfect. I have isolated the problem (I know what is happening, where, and why), and a fix should be available this weekend. Good bug report, thanks.\r\n\r\nhttps://twitter.com/marcgravell/status/868397653939429376. fix deployed: https://www.nuget.org/packages/protobuf-net?NormalizedVersion=2.2.1. @newton3 do you have anything I can use to repro this? It is quite hard to diagnose *just* from a stacktrace - a minimal repro would make it a lot easier to find what the problem is. thanks; will look momentarily - as a temporary workaround (without even\nchecking): try adding [ProtoMap(DisableMap=true)] to the afflicted member\n\nOn 2 Aug 2017 9:06 p.m., \"Abhishek\" <notifications@github.com> wrote:\n\n> having difficulty with email - so created a repo for you to check out the\n> code - https://github.com/newton3/protobuf-2.3.1-error\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-319783048>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsA2SImziRsgnJ1GMidmlxjYr_xO1ks5sUNbNgaJpZM4Nm4Ke>\n> .\n>\n. I was hoping to look at it last night, but family stuff happened. I hope to\nhave a fix for this deployed very soon. No there is no global \"disable\nmaps\" switch right now.\n\nOn 3 Aug 2017 5:13 p.m., \"Abhishek\" <notifications@github.com> wrote:\n\n> @mgravell <https://github.com/mgravell> is there any workaround to apply\n> globally or at the type level? the Dictionary is being used at a number of\n> places and it is a huge change to find and fix all the members. Are you\n> going to open a new issue to track this ?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-320017180>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsDtrDDm3CuYicH1yMAQu7l4XyYSOks5sUfHFgaJpZM4Nm4Ke>\n> .\n>\n. K; cause has been identified and patch created; I'm just running the\nregression tests. Do I have your permission to use the code from your repro\nrepo to add to the test suite?\n\nMarc\n. Nuget is pushed: https://www.nuget.org/packages/protobuf-net/2.3.2\n\nRelease notes should auto-update in a few minutes:\nhttps://mgravell.github.io/protobuf-net/releasenotes\n\nOn 4 August 2017 at 16:33, Abhishek <notifications@github.com> wrote:\n\n> yes, thank you!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-320279956>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsCRtjfDvgcS1tK91Y1hU1nyWHCknks5sUznWgaJpZM4Nm4Ke>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. Regarding running protoc: do you actually need the includes? I am not involved in the official Google implementation, so I **cannot advise** on how to get protoc to behave, since that isn't my tooling. However! I do expose both protogen (the new incomplete rewrite) and protoc on my website:  https://protogen.marcgravell.com/\r\n\r\nRe ClaimsPrincipal; I don't know enough about that type. What do you actually need to serialize to store and rehydrate one of those? I genuinely don't know. However, protobuf-net includes features that allow you to get the serializer to automatically use a  simple DTO (serializaiton) type in place of a complex POCO object as long as you provide a method to get between them. So if you can say \"to work a ClaimsPrincipal I need to store a string, 3 integers and a boolean\" - then I can tell you how to get it to do that.. K\r\n\r\n## Option 0:\r\n\r\nMy *preferred* option would be to serialize an object model that just *doesn't have* the complex non-serializable thing in it. Leave that entirely in the code that is downstream. That isn't always possible, so:\r\n\r\n## Option 1:\r\n\r\nRetain your existing model, but have a shim property on your type; so while you might have:\r\n\r\n    public SomethingComplex ProblematicProperty {get;set;}\r\n\r\nyou could add:\r\n\r\n    [ProtoMember(12)]\r\n    private SomethingSimple ProblematicPropertySerialized {\r\n        get { /* convert from ProblematicProperty */ }\r\n        set { /* convert from value and assign into ProblematicProperty */ }\r\n    }\r\n\r\n(and you write a `SomethingSimple` type that meets your needs and works with the serializer)\r\n\r\nhowever, I acknowledge that this *also* isn't always possible. In that case, you can hack around it with...\r\n\r\n## Option 2\r\n\r\n a surrogate - the key point here is the `SetSurrogate` method which expects there to be conversion operators between the two types (on the assumption that you're writing the surrogate type specifically for this purpose, so that's fine); you can see this in the runnable example below. The idea is the same, but instead of using a shim property, the library does that step for you.\r\n\r\nAnd to answer your question: no, don't touch `ISerializable`\r\n\r\n```\r\nusing ProtoBuf;\r\nusing ProtoBuf.Meta;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var obj = new MyData { Id = 1, Foo = new ComplexNonSerializableClass() };\r\n\r\n        RuntimeTypeModel.Default.Add(typeof(ComplexNonSerializableClass), false)\r\n            .SetSurrogate(typeof(SimplerThingThatLooksSimilar));\r\n        var clone = Serializer.DeepClone(obj);\r\n    }\r\n\r\n\r\n    [ProtoContract]\r\n    public class MyData\r\n    {\r\n        [ProtoMember(1)]\r\n        public int Id { get; set; }\r\n        [ProtoMember(2)]\r\n        public ComplexNonSerializableClass Foo {get;set;}\r\n    }\r\n\r\n    public class ComplexNonSerializableClass\r\n    {\r\n         // ... real code here, obviously - although this probably isn't\r\n         // your type in the first place - it is probably a BCL type\r\n    }\r\n\r\n    [ProtoContract]\r\n    public class SimplerThingThatLooksSimilar\r\n    {\r\n        public static implicit operator SimplerThingThatLooksSimilar(ComplexNonSerializableClass other)\r\n        {   // ... real code here, obviously\r\n            return new SimplerThingThatLooksSimilar { Name = \"abc\", Whatever = 123 };\r\n        }\r\n        public static implicit operator ComplexNonSerializableClass(SimplerThingThatLooksSimilar other)\r\n        {\r\n            return new ComplexNonSerializableClass(); // ... real code here, obviously\r\n        }\r\n\r\n        [ProtoMember(1)]\r\n        public string Name { get; set; }\r\n        [ProtoMember(2)]\r\n        public int Whatever { get; set; }\r\n    }\r\n}\r\n```. I'm glad you were able to make progress; I'm going to close this, but feel free to ping me if there's something else.. The library always intends to be as compatible in every direction as possible. That is a key aim of both protobuf as a general concept, and protobuf-net as a specific implementation of protobuf.\r\n\r\nIn the case of DateTimeKind - this data is tagged in as an additional optional field. As you correctly assume, if an older library doesn't know what to do with that, it will just ignore it.\r\n\r\nNote that this is *not* always possible, though. As a specific example, Google added \"Timestamp\" as a common standard for storing date-time data (long after I'd written protobuf-net's DateTime representation). I plan to add `Timestamp` support in 2.3.0, probably doing something like:\r\n\r\n    [ProtoMember(1, DataFormat = DataFormat.WellKnown)]\r\n    public DateTime When {get;set;}\r\n\r\nThis uses a *different format*. If there was old code that used 2.1.0 (or whatever) and had (since `DataFormat.WellKnown` doesn't exist yet):\r\n\r\n    [ProtoMember(1)]\r\n    public DateTime When {get;set;}\r\n\r\nthen when *this* code tries to deserialize the time, it will *either* fail *or* silently come up with a nonsensical value. Ultimately, changing the `DataFormat` property of a member is *almost always* a breaking change in your data. I do not plan on changing the *default* `DateTime` / `DataFormat` matching, for exactly the reasons you highlight: compatibility.\r\n\r\nThe protobuf wire format has not changed *at all*, even with the addition of proto3 - so there shouldn't be any *fundamentally* changing ideas, at least until some hypothetical proto4; and if that happens, I would expect to add configuration options to *enable* this, so that nothing changes how existing code behaves. For example, if that happened, I would probably change:\r\n\r\n    public void Serialize<T>(Stream s, T value, ...\r\n\r\nto:\r\n\r\n    [Obsolete(\"Please explicitly specify the protocol version; Proto2 is assumed by default\")]\r\n    public void Serialize<T>(Stream s, T value, ...) => Serialize<T>(s, value, ProtocolVersion.Proto2);\r\n    public void Serialize<T>(Stream s, T value, ProtocolVersion version, ...)\r\n\r\nif that makes sense. Basically, I will always go out of my way to **avoid** making it easy to fail. Which is, IMO, the entire point of a library.. I literally threw `CommonCodeGenerator` together as a starting point. I'm completely open to other radical ideas, although also note that `CodeGenerator` (the base) doesn't use that pattern at all - it may be that is the better fit for your scenario?. they're right next to the file in your own link (top post); https://github.com/mgravell/protobuf-net/blob/parser/src/protogen/CodeGenerator.cs. There's also `[ProtoContract(EnumPassthru = true)]` at the enum level. Wouldn't it make more sense for your test to just use:\r\n\r\n    [ProtoContract(Name = @\"TestEnum\", EnumPassthru = true)]\r\n\r\n? I'm open to the *idea*; I'm just not sure that there's a *necessity* for it... and global options are almost always problematic, especially in complex systems where one bit of code expects the global option to be one way, and another bit of code expects it to be the opposite.. K; interesting thing I notice: in proto3 (and in contrast to proto2), there is a new additional paragraph that clarifies how it expects unknown enums to be handled:\r\n\r\n> During deserialization, unrecognized enum values will be preserved in the message, though how this is represented when the message is deserialized is language-dependent. In languages that support open enum types with values outside the range of specified symbols, such as C++ and Go, the unknown enum value is simply stored as its underlying integer representation.\r\n\r\nBecause of this, I think it is entirely reasonable for proto3-based generation to automatically include `EnumPassthru = true`. It helps that proto3 has more sensible rules for enums that make this more ... possible.\r\n\r\nI notice that RTB is implicitly a proto2 schema, so the interesting question *for me* is: \"should we interpret this paragraph as applying retrospectively to proto2?\". And if we do: what are the consequences? Are there problems where this will be actively harmful?\r\n\r\nLet me have a think about that. It *might* be that we can magic this away completely, especially if we detect that the enum looks proto3 compatible (meaning: the first enum item has the value of zero).\r\n\r\nIt looks like the RTB enums would satisfy this rule.\r\n\r\nThoughts?. Ooh, I also need to thank you for the example; looks like the upcoming 2.3.0 parser needs a few more tweaks - it fails on that proto schema ([see here](https://protogen.marcgravell.com/#g0435db396fa82fe2434ea4fab590b66f)) in two ways:\r\n\r\n- it doesn't expect hex numbers, giving \"unable to parse integers\" on everything in `NativeAdTemplate.Fields`\r\n- it fails to resolve `Hyperlocal.Point` correctly\r\n\r\nI expect both of these to be easy fixes - will have a look this evening.. The annoying problem with enums in C# is that they *don't have a defined order*, and in proto2 the order matters (because the first one is the default). I think the rule for automatic \"yeah, this is passthru\" should be:\r\n\r\n- if `[Flags]` or `[ProtoContract(EnumPassthru=true)]` - trivial case, explicitly pass-thru\r\n\r\notherwise:\r\n\r\n- if there's an enum definition with value zero\r\n- and if there is no enum definition that has a `[ProtoEnum(...)]` marker with a value that is **different** than the enum's native value\r\n- and if there is **not** a `[DefaultValue(...)]` on the *member* that gives a value *other* than zero\r\n\r\nthen: treat it as pass-thru\r\n\r\nI *think* that works......?. The more I think about it, the more I think we should *only* worry about this if there *is* a `[ProtoEnum]` with a non-matching value... i.e. do we *actually* need to do any mapping. If we don't: just pass it through as-is; which means *at the DSL layer*, both proto2 and proto3 can include this happily. It is only user-generated \"code-first\" enums that would ever have this problem.. What you say about `VideoFormat` is *fine* **if** we use the \"The more I think about it\" version, i.e. \"as long as we don't *know that there is* a conflict: use the simple rules\". This would only ever apply to \"I'm using enums that I wrote in my regular non-.proto code, and I've added ProtoEnum to remap the values\". This is a tiny edge case, and I'm OK if things are more complicated for that scenario. The default thing isn't a factor there - was just being paranoid - separate concern.\r\n\r\nBTW, I fixed the parser - it *almost* works perfectly for that .proto now - only issue is the *emitted* code doesn't give quite the right name - it says `public Point CenterPoint { get; set; }` when it should be `public Hyperlocal.Point CenterPoint { get; set; }`. That's a known issue (it was already in the \"Pending work items in generated code\" list) that I'll try to fix tonight.. @rstonkus \"exactly!\" - the fact that is unclear highlights how unusual a situation that is. But basically, protobuf-net supports the hypothetical situation where you have an enum:\r\n\r\n    enum Foo {\r\n        A = 0, B = 17, C = 42\r\n    }\r\n\r\nAnd **for whatever reason** you want to use that in a model that is (perhaps at a later date) being exposed to protobuf but where the protobuf enum has values 0, 1, 4. In that scenario you can add [ProtoEnum(Value = 1)] against B and [ProtoEnum(Value = 4)] against C, and those values will be used in the serialization. This is a very unusual scenario, and is the only one where the pass-thru would appear to be unsafe. Having a [ProtoEnum] marker by itself is fine, as is using the same value in the ProtoEnum and the .NET enum.\r\n\r\n. This will behave in the desired way in 2.3.0; tests (passing) have been added, etc; https://github.com/mgravell/protobuf-net/commit/b248af6487c9baf89d199868aa72695bf60ea4fa\r\n\r\nThe strict mode is enabled by **explicitly** setting `EnumPassThru` to `false`. This looks great, thanks; I expect the next deploy will be 2.3.0 in the next week; this will be included. Much appreciated. I'll hack the csproj this evening and create a 3.5 target. Basically, the\nproblem is:\n\n- VS2017 can target 3.5\n- dotnet CLI can't\n- I want the project to be trivially buildable via dotnet CLI\n\nI suspect I can add a different config that includes 3.5 support for use\nwhen building in VS.\n\nOn 10 Jun 2017 6:53 p.m., \"Qingfeng Tan\" <notifications@github.com> wrote:\n\n> Hi,\n> I am trying to rebuild this library to target framework .net 3.5. However,\n> when I got to the right clicked project name Protobuf-net, properties,\n> application tab, the target framework field is grayed out and can not be\n> changed.\n>\n> Is there a way to set the target framework to .net 3.5?\n>\n> Thank you!\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHNdOJ0MKAvSb5wJwWDprHzavBYvks5sCtgDgaJpZM4N2Laj>\n> .\n>\n. Yep; see this commit that I've made to the \"parser\" branch:\nhttps://github.com/mgravell/protobuf-net/commit/26f56e72dcd76d6389153f820fa6633477b3b242\n-\nanything similar should work. If you just want it for your local build,\njust change the targetframework to whatever you need\n\nOn 10 June 2017 at 19:44, Qingfeng Tan <notifications@github.com> wrote:\n\n> Hi,\n> Is it in the csproj file, just need to change:\n> net40;netstandard1.3\n> to\n> net3.5;netstandard1.3\n>\n> I can give it a try now.\n>\n> Thank you!\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262#issuecomment-307583134>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsNkfkNI_d3zd143snsy5dD5-DGv9ks5sCuQJgaJpZM4N2Laj>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. On the first: did you try adding a reference to System.Xml? This sounds\nlike the nuget pack problem that should be fixed soon - basically, the\nnuget pack tooling fails to properly record framework dependencies, so\ndownstream references aren't added when needed. You should be able to add\nmanually while that gets fixed.\n\nOn VS2008:\n\nis it possible: absolutely! but: not by me. I don't have VS2008 and have no\nintentions of installing VS2008 or supporting VS2008. However, it shouldn't\nbe necessary. I'd rather understand what the thing is that makes you want\nVS2008 to build this.\n\nOn 12 June 2017 at 20:04, Qingfeng Tan <notifications@github.com> wrote:\n\n> So after I created the dll from the vs2017 build, with target framework of\n> .Net3.5. Ireferenced it in a Windows Mobile 6.5 application. But unluckily,\n> that WM6.5 application had errors after I have reference the new dll. The\n> first error is:\n> The type 'System.Xml.Serialization.IXmlSerializable' is defined in an\n> assembly that is not referenced. You must add a reference to assembly\n> 'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=\n> b77a5c561934e089'.\n>\n> Another question I have is: Is it possible to convert this package\n> (protobuf-net) to a vs2008 solution and build it with target frame .Net3.5\n> in there?\n>\n> Thank you!\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262#issuecomment-307888576>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsDZY0KnWKcShfo8Ho3_TOCGyfu9Zks5sDYvCgaJpZM4N2Laj>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. I've checked the csproj, and xmlserializer isn't in there explicitly,\nexcept for the .net core builds; however, what you're seeing sounds like\nsomething that an assembly binding redirect should be able to solve. Again,\nthese are usually added automatically by nuget, but for the issue (that is\nbeing fixed, but it is a MS thing) with framework deps in dotnet cli.\n\nSee\nhttps://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/bindingredirect-element\n- you should be able to copy the required values directly out of the error\nmessage.\n\nOn 12 June 2017 at 21:59, Qingfeng Tan <notifications@github.com> wrote:\n\n> When I tried to remove the System.Xml version 2.0.0.0 referenced in the\n> protobuf-net solution, it gave an error:\n> [image: image]\n> <https://user-images.githubusercontent.com/17502718/27054839-699df83c-4f90-11e7-9da7-0ef933de7826.png>\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262#issuecomment-307927201>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsD0K3mX_VhyHcgs27r0fYte1bN2Aks5sDaaWgaJpZM4N2Laj>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. btw, if you want the full gory details:\nhttps://github.com/NuGet/Home/issues/4853\n\nOn 12 Jun 2017 11:02 p.m., \"Marc Gravell\" <marc.gravell@gmail.com> wrote:\n\nI've checked the csproj, and xmlserializer isn't in there explicitly,\nexcept for the .net core builds; however, what you're seeing sounds like\nsomething that an assembly binding redirect should be able to solve. Again,\nthese are usually added automatically by nuget, but for the issue (that is\nbeing fixed, but it is a MS thing) with framework deps in dotnet cli.\n\nSee https://docs.microsoft.com/en-us/dotnet/framework/\nconfigure-apps/file-schema/runtime/bindingredirect-element - you should be\nable to copy the required values directly out of the error message.\n\nOn 12 June 2017 at 21:59, Qingfeng Tan <notifications@github.com> wrote:\n\n> When I tried to remove the System.Xml version 2.0.0.0 referenced in the\n> protobuf-net solution, it gave an error:\n> [image: image]\n> <https://user-images.githubusercontent.com/17502718/27054839-699df83c-4f90-11e7-9da7-0ef933de7826.png>\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262#issuecomment-307927201>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsD0K3mX_VhyHcgs27r0fYte1bN2Aks5sDaaWgaJpZM4N2Laj>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. Yeah, this isn't a package reference on regular .NET; it is a framework reference. Try:\r\n\r\n    <Reference Include=System.Xml\" />\r\n\r\nIt *is*, however, a package reference in .NET core. Build tools are fun :/ I have fun `Condition` markers to do things like this, for example in protobuf-net itself:\r\n\r\n```\r\n  <ItemGroup Condition=\"'$(ImportLibs)|$(FeatureServiceModel)' == 'net|true'\">\r\n    <Reference Include=\"System.ServiceModel\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n    <Reference Include=\"System.Runtime.Serialization\" />\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(ImportLibs)' == 'core'\">\r\n    <!-- could make this more granular to respect the options, but no need yet -->\r\n    <PackageReference Include=\"System.Reflection.Emit\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Reflection.Emit.ILGeneration\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Reflection.Emit.Lightweight\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Reflection.TypeExtensions\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Xml.XmlSerializer\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Runtime.Serialization.Primitives\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nHowever, I'm slightly confused because IIRC `System.Xml` is actually *included by default*. Sheesh.\r\n\r\nThe fact is the build tools are a bit of a mess right now (for .NET / .NET core generally, not this library specifically). It is causing me pain on a number of projects. Fixes are in the pipelines, but are outside of my control.. If you're targetting .NET 3.5, then it *is* System.Xml 2.0; .NET 3.5 are *incremental additions* to .NET 2.0 via additional assemblies; the base assembles do not change (except for bugfixes etc, but they didn't increase the major version).\r\n\r\nBecause `System.Xml.Linq` is one of those additions in .NET 3.5, *it* gets the 3.5 versioning; however `System.Xml`: does not - it stays 2.0\r\n\r\nIn .NET 4.0, they all become 4.0.. AFAIK (and I'm happy to be corrected): System.Xml 3.5 *does not exist*.. at least, not in regular .NET. If it exists in some Mono / Unity / whatever branch, then fine.. Closing issue; 2.3.0 will include 2.0 and 3.5 builds via the \"VS\" configuration (that only works in VS, hence the name). What is \"it\" in this context? What specifically are you looking for? Are you talking about the DSL parsing tools (protogen)? And if so, are you talking about the old version, or are you talking about the version that I'm working on for the 2.3.0 release? If you *aren't* talking about the DSL parsing tools... what *do* you mean?\r\n\r\nPlease be specific so I can address your question.. I'm happy to investigate, but I really need it to be clearer what you are after. Please could you explain more, otherwise I'll have to close it as unclear.. there is a brand new \"protogen\" tool in the \"parser\" branch, scheduled for\nrelease with 2.3.0\n\nOn 19 Jun 2017 12:16 a.m., \"\u8c22\u96c4\u5e73\" <notifications@github.com> wrote:\n\n> I am sorry for replay so late.\n> Yes, \"it\" is the DLS (protogen).\n> I will try the version,thanks.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/263#issuecomment-309309342>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsNIt4oLt-S8zRffyI7J-3fciLsg6ks5sFa-zgaJpZM4N5VNH>\n> .\n>\n. If what you are saying is \"comments are not carried over from the .proto into the generated code\": that indeed has not been looked at yet. Please can you clarify whether you mean \"comment line\" vs \"command line\"?. Got it; yes, totally agree we should get that, and I know (vaguely) what we need to do to get it - it just isn't done yet. I'm going to make this part of the 2.3.1 milestone; 2.3.0 is pretty much wrapped - I'm just doing regression / test suite updates (see PR #265); have updated the *branch* release notes (will hit master when I've finished the regression test): https://github.com/mgravell/protobuf-net/blob/parser/docs/releasenotes.md. note: what I'll *probably* do is : when I've finished everything I want for 2.3.0, I'll take a look at this - if it falls out easily, it'll move into 2.3.0 - otherwise I'll ship 2.3.0 and look at it as a separate piece of work\r\n\r\nnote to self: also implement `protogen --include_source_info`. Yes, it probably should; will target for 2.3.0. It surprises me that you've hit this, as this *should* only impact the runtime-only (reflection etc) implementation. Are you running on UWP or similar, by any chance? Anyway, fixed for 2.3.0. K; I can switch to `.FullName` which solves a lot of this (it expands generics), but do you have a minimal repro that I can use to validate? My attempt at a repro shows the concrete type name, not the interface; would really like to validate. fixed in 2.3.0. d'oh! you're absolutely right; fix applied to code, will be in 2.3.0 (which is in package prep). fixed in 2.3.0. Do you have an illustration of what your callback signature looks like? And you mention silver light: I'll be honest : it is increasingly hard to support silverlight, and many of the tools I need to build and test for that aren't tools that I have installed usually. If the fix requires a build (rather than a fix of your signature): it is going to be gnarly.. I would say that is the *correct* deserialization - protobuf (the google\nspec) is designed such that data is appended, not replaced.\n\nThe good news is that there are two ways to fix this:\n\n1) don't run the initializer during deserialization - you do this by adding\nSkipConstructor = true to the [ProtoContract]\n\n2) tell protobuf-net to not interpret the list data as append; add\nOverwriteList = true to the [ProtoMember]\n\nEither of these should achieve what you want\n\nOn 25 Jun 2017 12:22 p.m., \"vmas\" <notifications@github.com> wrote:\n\n> Sample (protobuf-net 2.2.1):\n>\n> [ProtoContract]\n> class A\n> {\n>     public A() { Values = new int[5]; }\n>\n>     [ProtoMember(1)]\n>     public int[] Values { get; set; }\n> }\n>\n> static void Main(string[] args)\n> {\n>      A a, b;\n>      a = new A();\n>      a.Values[0] = 5;\n>\n>      using (var ms = new MemoryStream())\n>      {\n>          Serializer.Serialize(ms, a);\n>          ms.Seek(0, SeekOrigin.Begin);\n>          b = Serializer.Deserialize<A>(ms);\n>      }\n>      Console.WriteLine(\"Sizes: {0}, {1}\", a.Values.Length, b.Values.Length);\n> }\n>\n> After deserialization *b.Values* contains 10 elements instead 5.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/273>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsPKT1O_uQ3AdYAJzKyFWjzUFrIDeks5sHkLbgaJpZM4OElLh>\n> .\n>\n. K, this is a complex one.\r\n\r\nCurrently, the support for .net native and UWP / AOT etc is limited. As back-story, historically there is a precompilation tool for protobuf-net that allows limited cross-platform pre-compilation of the IL pieces. This *kinda worked*, but was awkward, ugly, really hard to support, and just generally messy. Additionally, this is going to be a nightmare as we add \"async\" (on the roadmap).\r\n\r\nI don't think that is the way to go in the future, although the google code download still has the bits for this.\r\n\r\nI have repeatedly been talking with MS and other folks re better ways of doing code-gen for this and other scenarios, for two different needs - the code-first approach and the contract-first approach. There are a range of plans to improve what is available here in the mid-range future. Basically the plan is to split the non-IL pieces (the reader/writer, etc) into \"protobuf-net.Core\" or similar. Projects would target the .Core project if they have generated C#, or both .Core and protobuf-net if they want to use the runtime emitter. The idea being that AOT scenarios would fall into the first camp.\r\n\r\nAt the moment, though, that mostly doesn't exist.\r\n\r\nIn the r668 world there is a core-only project that uses reflection. We could probably resurrect that short term, but the performance won't be anything to shout about.\r\n\r\nSo: are you looking for something *today*? Or is this \"in the next n months\" stuff?\r\n\r\nI'm working on it; it exists on the roadmap; but it won't be there this week.. (Opps, accidentally closed - wrong button). quick question: are you a code-first person or a contract-first person?\nmeaning: is your serialisation model primarily in c#? or in .proto? (c#\ntends to be the norm for protobuf-net)\n\nOn 26 Jun 2017 7:04 a.m., \"Meinrad Jean-Richard\" <notifications@github.com>\nwrote:\n\n> Thanks for your fast response. I don't need it today, since it currently\n> works if I disable .net native. I'll need it as soon as I want to deploy it\n> to the store though. So next n months with n smaller than 6 :-)\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/274#issuecomment-310970894>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsO_CFuMvD5HFmogJl9j7IekGVL4Tks5sH0oKgaJpZM4OEpFX>\n> .\n>\n. that doesn't provide an immediate fix; it simply changes the starting point\nfor the serializer emit - Roslyn vs protocol/protogen, specifically. My\nusual approach is \"support everything, but get the thing being asked for\nmost: first\".\n\nOn 26 Jun 2017 9:04 a.m., \"Meinrad Jean-Richard\" <notifications@github.com>\nwrote:\n\n> I am a code-first person. I could however switch to contract-first if that\n> would solve my problem...\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/274#issuecomment-310990545>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsH4jLJwxAe056LgiyoJU5za6f4ptks5sH2YCgaJpZM4OEpFX>\n> .\n>\n. I am pretty sure that this is already fixed in 2.3.0 (available on nuget).\nCsnnyou try 2.3.0?\n\nOn 26 Jun 2017 10:57 a.m., \"Serj8500\" <notifications@github.com> wrote:\n\n> Hi!\n>\n> *Test project:* https://yadi.sk/d/cipeM9z63KTHVV\n>\n> *Description:* I serialize data into memory stream then I try to\n> deserialize it back. If I specify length for Deserialize() I receive\n> NullReferenceException. The problem has appeared after upgrade to the\n> latest version (2.2.1) - you can see it in the test project where I used 3\n> versions of the library: 2.2.1, 2.1.0 and 2.0.0.668\n>\n> In the test project the test for 2.2.1 fails with the message:\n>\n> Test Name: TestDeserializeWithLength_In_2_2_1\n> Test FullName: ProtoBufNet_2_2_1.UnitTest1.TestDeserializeWithLength_In_\n> 2_2_1\n> Test Source: C:\\Projects\\TestProtoBufNetVersions\\ProtoBufNet_2_2_1\\UnitTest1.cs\n> : line 24\n> Test Outcome: Failed\n> Test Duration: 0:00:00,0427232\n>\n> Result StackTrace:\n> at ProtoBuf.Meta.TypeModel.Deserialize(Stream source, Object value, Type\n> type, Int32 length, SerializationContext context)\n> at ProtoBuf.Meta.TypeModel.Deserialize(Stream source, Object value, Type\n> type, Int32 length)\n> at ProtoBufNetVersions.Logic.DeserializeWithLength(RuntimeTypeModel\n> model, Int32[] data) in C:\\Projects\\TestProtoBufNetVersions\\\n> ProtoBufNet_2_2_1\\Logic.cs:line 33\n> at ProtoBufNet_2_2_1.UnitTest1.TestDeserializeWithLength_In_2_2_1() in\n> C:\\Projects\\TestProtoBufNetVersions\\ProtoBufNet_2_2_1\\UnitTest1.cs:line 28\n> Result Message:\n> Test method ProtoBufNet_2_2_1.UnitTest1.TestDeserializeWithLength_In_2_2_1\n> threw exception:\n> System.NullReferenceException: Object reference not set to an instance of\n> an object.\n>\n> Best regards,\n> Sergey.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/275>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHvOAF7HtLuQ3S4B58A_JtBUJXnSks5sH4CJgaJpZM4OFGi8>\n> .\n>\n. Looks good, thanks. It means it will either read zero bytes (already at the end of a stream,\nyou just didn't know), or it will consume an entire varint. Partial data is\nnot supported - if it reads an incomplete varint it will throw. TCP is a\nstream, so if you use this method on a NetworkStream it will still work as\nlong as the data arrives eventually.\n\nIf you are processing a back-buffer in a MemoryStream, you may have to\nmanually check for a complete varint - or just catch the exception. To\ncheck, you need to test at most 10 bytes to see if the MSB is zero. Once\nyou have a zero MSB, you're good to go.\n\n\nOn 9 Jul 2017 6:31 a.m., \"PM Extra\" <notifications@github.com> wrote:\n\nIn my case, if the stream data is split (tcp socket), and the received data\nis not a whole base128 variant. The TryReadLengthPrefix(source,\nPrefixStyle.Base128, out var length) will throw the exception\nEndOfStreamException.\n\nSo, what does the Try mean?\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/277>, or mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsKMSmIBIN0QbBWUM0gPdsniLqvAFks5sMGWdgaJpZM4OR9l4>\n.\n. you can add that check - or a try/catch - by the code that *calls* that\nmethod, sure.\n\nOn 10 Jul 2017 8:10 a.m., \"PM Extra\" <notifications@github.com> wrote:\n\n> @mgravell <https://github.com/mgravell> Thanks a lot. I am using a third\n> party socket framework and that process a back-buffer in a MemoryStream. So\n> shall we add the MSB check to the TryReadLengthPrefix method?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/277#issuecomment-314023877>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsC5BjixrcZ1a8_4towBxKFGVmIq3ks5sMc5zgaJpZM4OR9l4>\n> .\n>\n. There are a few things that make this more awkward when starting from interfaces. Firstly, we can't just serialize it as a Class1 - it would need to be wrapped appropriately, which would mean any interface members at the root level, which would then probably end up being duplicated at the type level (because people would forget to exclude them), which is especially problematic for lists / arrays.\r\n\r\nSecondly, it is very hard to deal with interfaces as the root object, since when using GetType() you lose the declared type and only have the concrete type. This would potentially make it serialize differently per context, which is very awkward. Likewise when the class type is used directly without mention of the interface.\r\n\r\nThis scenario is a lot more nuanced then is obvious. It would need very clear consideration as to how it would behave in a range of scenarios including (but not limited to) these cases.. > Can you explain why that is the case for an interface but not the case for a class that extends a base class?\r\n\r\nIt *is* the case for a base-class / sub-class. The difference is that a subclass doesn't usually re-declare (`new` etc) the same properties that the base class had. Most interface implementations, however: do.\r\n\r\n> Isn't this a good thing? You simply serialise it as a the concrete type which in my example is what I would like it to do.\r\n\r\nit *cannot* simply be serialized as the concrete type - that will not work in any way. During deserialization it needs to know what type to deserialize. Serializing it *as* the type itself includes **zero** such metadata, so you'd be thinking `IFoo` and seeing data for `Bar`, but with no clue that it is a `Bar`. This is why it needs wrapping in the first place.\r\n\r\n> Well yes, because its an interface it would serialise as whatever the underlying object is. Wouldn't that be what most people expect?\r\n\r\nSee above.\r\n\r\nThe aim is fine, but it isn't as simple as just serializing as the concrete type. As I say: any approach here would need very clear ideas of what should happen (ideally in terms of the data protocol) in each case.. No. The problem is that the serialization of a Foo does not include anything that says \"I'm a Foo\".\r\n\r\nIf we did that, then during deserialization: *how do you know what it should be*?. A lot of the code *does* use exactly GetType() etc. That doesn't change he nature of the problem in any way. Types don't change their members, so it doesn't matter when we check if it will be the same shape either way.. Because this stuff is nuanced :)\r\n\r\nThere are 3 different scenarios here, and we'd need to know how each should behave:\r\n\r\n- root objects via generic usage such as `Serialize<T>` uses `typeof(T)` IIRC\r\n- root objects via non-generic usage may or may not have a type specified\r\n- members inside types know the member's type\r\n\r\nFrankly, I don't think the problem that you're trying to solve is very clear at the moment. And the key point is: it isn't enough to serialize - we also need to be able to deserialize knowing just the interface.. Indeed, but we start getting into problems.\r\n\r\nConsider: in order to serialize such a model, we need to find the logical root, which in this case *probably is* the interface - so: imagine we have:\r\n\r\n    [ProtoContract, ProtoInclude(10, typeof(Foo))]\r\n    interface IFoo {\r\n       [ProtoMember(1)] int Id {get;set;}\r\n    }\r\n    [ProtoContract, ProtoInclude(10, typeof(Bar))]\r\n    class Foo : IFoo {\r\n        public int Id {get;set;}\r\n        // ...\r\n    }\r\n    [ProtoContract]\r\n    class Bar : Foo { ... }\r\n\r\nSo far so good. If we see a `Bar`, we need to build the model. Currently we just look at the `.BaseType`, which is simple and readily available - we find `Foo`, notice that there is an \"include\" and note that `Bar`'s logical root is `Foo`, and we start from there.\r\n\r\nSo; let's say we want to fully support interfaces. Now we need to look not just at the `.BaseType` of each level, but also at the interfaces implemented by each level - and check *them* for \"include\" directives. In theory that's fine - we can find `IFoo` easily enough and determine that `IFoo` is the logical root for `Foo` and `Bar`.\r\n\r\nNote that this is **not** the same as just serializing the concrete type - we need to start at the logical root in order to be able to deserialize correctly (we need to identify the correct type). This is one of the key points I was trying to call out earlier, although perhaps that is largely an implementation detail (it is a very important one). It would also be necessary to observe that adding an interface using this kind of \"include\" approach is fundamentally a breaking serialization change in the same way that adding a new base-type (with \"include\") is a breaking serialization change. But it can probably work - it just doesn't today.\r\n\r\nIt gets more complex, though - we'd need to think about what scenarios we don't support and how to message the user. For example:\r\n\r\n    [ProtoContract, ProtoInclude(10, typeof(SomeType))]\r\n    interface IFoo {...}\r\n    [ProtoContract, ProtoInclude(10, typeof(SomeType))]\r\n    interface IBar {...}\r\n\r\n    [ProtoContract]\r\n    class SomeType : IFoo, IBar { ... }\r\n\r\nThis *doesn't have* a sensible common root, and cannot be supported. Then we get into interfaces implementing interfaces (`IFoo : IBar`), etc. Should *that* work? \r\n\r\nThis is probably fine, for example:\r\n\r\n    [ProtoContract, ProtoInclude(10, typeof(IBar))]\r\n    interface IFoo {...}\r\n    [ProtoContract, ProtoInclude(10, typeof(SomeType))]\r\n    interface IBar : IFoo {...}\r\n    [ProtoContract]\r\n    class SomeType : IBar { ...}\r\n\r\nBut what if we get to the same concrete type via multiple paths?\r\n\r\n---\r\n\r\nWe also get into fun scenarios around unknown data and different versions of the contract; this is *mostly* the same scenario that we already have today for `abstract` classes, so it isn't drastically a new problem - but it is one that needs consideration\r\n\r\n---\r\n\r\nI guess the point I'm getting at here is that this is a complex problem. It isn't impossible to do it - but rather, it needs serious consideration and design and testing - plus of course whatever changes it needs to implement it, and document it, and update any now-wrong documents/questions on the topic, and fix any code regressions, and update any tests that now fail incorrectly because of the changes, and support these changes at every point in the future. We can't just shoe-horn it in with a 5 line hack. And before I take on significant pieces of work, I like to understand *why* we're doing it - i.e. what use case it supports that can't already be supported in other ways. Ultimately, time spent working on this is time not spent working on other code, so it is all a juggling act re how to spend resources (mostly: my time). It seems to me that everything here can already be achieved via a DTO layer. I'm not saying we can't do it, but I'd really want to explore what the **compelling example is** for doing it.. In the example you give, *during deserialization*, how would the code know to select `SomeType`? what members are serialized? are the members on `IFoo` serialized? or just those on `SomeType`? What happens if the list contains multiple different `IFoo` implementations? Why is `SomeType` tested for, specifically? What happens if there aren't any known `IFoo` implementations? What happens if I serialize a `SomeType` instance by itself? Does that look the same as an `IFoo` that *was* a `SomeType`? Does a `List<SomeType>` look identical to a `List<IFoo>`?\r\n\r\nThese are the questions that I'd need to get to the bottom of.. > When you start deserialising you know what you are deserialising due to the ProtoMember numbers in the data don't you? So from these you can infer the type that was serialised eg in this case SomeClass?\r\n\r\nHow? where did that number come from? If we take your specfic example: where would it get such a number from? The only possible place is a `[ProtoInclude]` on the interface,  which takes us back to the more complex scenario that I strongly suspect is the only way to do it.\r\n\r\n> When you start the deserialization process and you receive the memberNumber do you not look up the class of this member number? I'm not sure how this problem is unique to interfaces.\r\n\r\nThe member number only tells us that we're talking about the `ListOfIFoo` member.. If you mean \"treat all `IFoo` as though they were `SomeType`, and fail if one isn't, and just use `SomeType` during deserialization\"... then frankly I think it should be a `List<SomeType>`.... > It would get the number from SomeClass, it would never look at anything about the interface implementation.\r\n\r\nThat just tells us to expect IFoo. We don't know about SomeType from that\r\n\r\n> Upon deserialisation you check every single object Is An IFoo and cast it to IFoo\r\n\r\nI think the key thing you're missing here is context on how deserialization works and what data the protobuf stream contains. The ultimate problem is: the data in the raw stream doesn't tell us what type of object to create. A `List<Blah>` when deserialized doesn't create `Blah` instances \"because the data tells us to\". Rather, it creates `Blah` instances *because it is deserializing a `List<Blah>`*. As such, it interprets the data (which is otherwise unadorned) using the rules for `Blah`. So: you can't just deserialize and then cast to `IFoo` - we need to know what to actually do with the data that we see. This is what the \"logical root / include\" approach of protobuf-net does - it defines a set of conventions for interpreting an inheritance based model.. K; the way protobuf-net encodes that is essentially (to use `.proto` syntax):\r\n\r\n    message DTO {\r\n        repeated BaseClass listOfBase  = 5;\r\n    }\r\n    message BaseClass {\r\n        optional ExtendsBase1 _eb1 = 1;\r\n        optional ExtendsBase2 _eb2 = 2;\r\n    }\r\n    message ExtendsBase1 {\r\n        optional string Test3 = 3;\r\n    }\r\n    message ExtendsBase2 {\r\n        optional string Test4 = 4;\r\n    }\r\n\r\nwhere exactly zero or one of `_eb1` / `_eb2` are assigned a value (this could also use `oneof` in recent `.proto` versions). The sub-classes are mapped as *inner objects*, and the sub-class data always comes first. In JSON terms (although it isn't JSON - this is purely for example purposes), an object would look something like:\r\n\r\n    {\r\n       \"_eb1\": {\r\n        \"Test3\": \"foo\"\r\n      }\r\n    }\r\n\r\nDuring deserialization, we start with a `null` reference, and start resolving fields, and only create the instance when required (because of data fields, or at the end of any deserialization path). Since the first *actual data* we get is the `\"Test3\"`, it is *at that point* that we create the instance, which we know by the context should be a `ExtendsBase1`. If neither `_eb1` or `eb2` had a value, then we'd create a `BaseClass` instance on the way out (or when some data in that context was encountered, but there aren't any other fields in this case).\r\n\r\n---\r\n\r\nMy point in the comment yesterday is that we could apply this same logic to interfaces, **within certain constraints** - mainly around the topics of multiple inheritance (resolving to contract types) would be disallowed.\r\n\r\nSo essentially, it could be mapped with the interface as the root type:\r\n\r\n    message IFoo {\r\n        optional SomeType _st = 1;\r\n        optional SomeOtherType _sot = 2;\r\n    }\r\n\r\nwhich would map to:\r\n\r\n    [ProtoContract]\r\n    [ProtoInclude(1, typeof(SomeType))]\r\n    [ProtoInclude(2, typeof(SomeOtherType))]\r\n    interface IFoo {...}\r\n\r\nThis would allow us to deserialize an `IFoo` into any of the known / expected concrete types. This obviously has the issue that if no expected type is found in the data, then it can't instantiate - but that's actually the same problem we get for `abstract` base classes today, so that's not a new restriction.. This is #276 and is fixed and available on nuget: https://mgravell.github.io/protobuf-net/releasenotes. I can do a \"non pre-release\" build if it would help; I was waiting on\ndogfooding results, but we've been using 2.3.0-gamma on Stack Overflow\nsuccessfully, so we're probably OK for that smoke test.\n\nOn 13 Jul 2017 7:36 a.m., \"Lu Hao\" <notifications@github.com> wrote:\n\n> Sample (protobuf-net 2.2.1):\n>\n> using System.IO;using ProtoBuf;\n> namespace ConsoleApp7\n> {\n>     [ProtoContract]\n>     class A\n>     {\n>         static A() {}\n>\n>         [ProtoMember(1)]\n>         public int Value { get; set; }\n>     }\n>\n>     class Program\n>     {\n>         static void Main(string[] args)\n>         {\n>             using (var stream = new MemoryStream())\n>             {\n>                 var a = new A();\n>                 Serializer.Serialize(stream, a);\n>                 stream.Seek(0, SeekOrigin.Begin);\n>                 var b = Serializer.Deserialize<A>(stream);\n>             }\n>         }\n>     }\n> }\n>\n> It will throw \u201cSystem.InvalidProgramException:\u201cCommon Language Runtime\n> detected an invalid program.\u201d\u201d when deserializing. It works after I remove\n> the static constructor. However I need a static constructor in my project.\n> You can also see the case in https://github.com/HaleLu/ProtobufCase.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/279>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsIwVBIL4PGSM0UU642ZXlEPazZhcks5sNbr4gaJpZM4OWj95>\n> .\n>\n. 2.3.0 (non-gamma) is available. Ah, sub-types; yes, this is a bug - will be fixed 2.3.1\r\n\r\nSimply removing the `optional` should fix it, although it would be nice if it emitted `oneof` instead, really.... (reopening for tracking purposes). Will attributes suffice?\r\n\r\n```\r\npublic enum ViaAttribs\r\n{\r\n    [ProtoEnum(Name = \"a\")]\r\n    X,\r\n    [ProtoEnum(Name = \"b\")]\r\n    Y\r\n}\r\n```\r\n\r\nwhich gives:\r\n\r\n```\r\nenum ViaAttribs {\r\n   a = 0;\r\n   b = 1;\r\n}\r\n```\r\n\r\nIf not, I can check whether they can be tweaked via `RuntimeTypeModel`.. I'll investigate; there's a chance it isn't currently supported, in which case it'll need to wait for 2.3.1. Needed a code change; this will work in 2.3.1 (or if you build locally):\r\n\r\n```\r\n        [Fact]\r\n        public void TestEnumProto_Proto2_RuntimeRenamed()\r\n        {\r\n            var model = TypeModel.Create();\r\n            model[typeof(HazEnum.SomeEnum)][1].Name = \"zzz\";\r\n            var schema = model.GetSchema(typeof(HazEnum), ProtoSyntax.Proto2);\r\n            Assert.Equal(@\"syntax = \"\"proto2\"\";\r\npackage ProtoBuf.Serializers;\r\n\r\nmessage HazEnum {\r\n   optional SomeEnum X = 1 [default = B];\r\n}\r\nenum SomeEnum {\r\n   B = 0;\r\n   zzz = 1;\r\n   C = 2;\r\n}\r\n\", schema);\r\n        }\r\n```. I suspect that you're seeing some reference confusion - you're main project is probably still referencing the nuget version. Make sure you've completely removed any protobuf-net references before trying to switch to the local build version.\r\n\r\nThe version in git is definitely read/write: https://github.com/mgravell/protobuf-net/blob/master/src/protobuf-net/Meta/ValueMember.cs#L779. MemoryStream would be the normal way to do this in .NET; I'm not sure\nthere's a need for a specific method to do this. no other .NET serializer\nthat I can think of wraps that up. Thought: is it actually needed?\n\nOn 15 Jul 2017 8:54 p.m., \"sbardos\" <notifications@github.com> wrote:\n\n> RabbitMQ expects a byte array (byte[]) as message.\n> Is there a way to get a byte array back from the serializer?\n>\n> At the moment I write to a Memorystream and get the byte array from there.\n>\n> Thx,\n> Sven\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/282>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsG9wkrh4AdJAReoYAvYqmAyXOnxaks5sORjigaJpZM4OZHEv>\n> .\n>\n. See, when I'm talking binary serializers, I always think of them as writing\n*to* somewhere - a file, a network, etc....\n\nOn 15 July 2017 at 22:32, sbardos <notifications@github.com> wrote:\n\n> Hm, not sure. In case of JSON, serializer returns a string, right? I think\n> this is because one can presume that applications that act on JSON can\n> handle strings as data by default. How is it with protobuf? I think byte\n> array won't be to esoteric.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/282#issuecomment-315564636>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsN3JaxhJUafORG0cAkACdbyHOxH4ks5sOS_rgaJpZM4OZHEv>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. the main reason for that is that I dont have a setup or the experience /\nneed to build and test CF 3.5. The actual code is probably fine. Does CF\nsupport .NET Standard of any flavor? that would be the easiest thing for me\nto support, as I won't require a separate build etc.\n\nOn 17 Jul 2017 4:46 p.m., \"Matt Shindala\" <notifications@github.com> wrote:\n\n> Hi,\n>\n> I'm trying to parse proto3 messages on a device running Compact Framework\n> 3.5. From what I understand, Google's official implementation\n> <https://github.com/google/protobuf/tree/master/csharp> doesn't support\n> Compact Framework at all. From reading your README, protobuf-net supports\n> Compact Framework 3.5 only up to version 2.1.0, and after that it dropped\n> support.\n>\n>    - Does v2.1.0 support proto3?\n>    - Do you know of any other way to get proto3 messages parsed on a\n>    Compact Framework 3.5 device?\n>\n> Thanks.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/283>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsDnFb1wjPolMdbERwRtXUo0HHI73ks5sO3VogaJpZM4OaFUm>\n> .\n>\n. Can I ask: what build environment do you use? Are you restricted to VS2008?\n\nOn 17 Jul 2017 6:10 p.m., \"Matt Shindala\" <notifications@github.com> wrote:\n\n> As far as I know CF does not support .NET Standard, unfortunately.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/283#issuecomment-315817918>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsLZ_pzJwrYSjUdMrD91hJIZOXec8ks5sO5VTgaJpZM4OaFUm>\n> .\n>\n. That's what I thought and is the crux of the difficulty for me. I don't have\r\nVS2008, and I don't really want to install VS2008, etc. It is a major PITA\r\nto support, unfortunately.\r\n\r\nI'm open to good ideas here.... > Why is it such a PITA to support?\r\n\r\nbecause a: I don't *have* those things setup currently, b: I don't use CF to know if it *works*, and c: it means I need to create and maintain an entirely separate set of project files / build scripts (the new format csproj is not going to work with VS2008 build tools). and d: because it will mean manually creating and maintaining a nuspec, since I don't think I can include that separate build from `dotnet pack`. Are you able to add :\r\n\r\n    RuntimeTypeModel.Default[typeof(BaseClass)]\r\n        .AddSubType(12, typeof(ChildClassA));\r\n\r\nsomewhere at app startup? That would seem a better option. Obviously change 12 to a sensible number.. there are very good reasons that injeritance in protobuf-net starts at the\nroot not the leaf. i don't see any way to implement deserialization\nsensibly with leaf-oriented layout. how wouod you propose that would work,\nwith consideration of what gets stored and how that is interpreted?\n\nOn 19 Jul 2017 3:30 p.m., \"chrishaly\" <notifications@github.com> wrote:\n\n> This method can partial solve my problem. In my project i can control the\n> startup.\n> However some of library projects will provide to others use.\n>\n> In some document about Protobuf 3, have two solution for Inheritace: one\n> is use oneof equals to ProtoInclude and the other is \"Composite\" define a\n> property with type is base class.\n>\n> If use ProtoInclude there a two little flaw\n>\n>    1. When add or remove a child class, you should modify base class.\n>    2. Consider about byte size of field number, use which number as the\n>    first ProtoInclude argument sometimes becomes a question.\n>    Since if use a small number when need to add filed to base class the\n>    property field number will greater than child class field number, and then\n>    add a child class, the child class field number will greater than some\n>    property field number, I think it's a little problem.\n>    But if use a great enough number will west of memory and network\n>    bandwidth.\n>\n> Considering these problem, I prefer to add a ProtoInheritAttribute, in\n> .net one class only have one base class just set the base class field\n> number to 1.\n>\n> How do you think?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/284#issuecomment-316405909>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGPlofpOzD9fTOIlFL0caXAVG9iiks5sPhL_gaJpZM4OcOHr>\n> .\n>\n. will happily review, but would ideally like some words first - i.e. how is\nit modelling this at the serialization format layer? what are the rules?\nKinda like the info in this answer:\nhttps://stackoverflow.com/a/45162348/23354\n\nOn 6 Aug 2017 3:06 p.m., \"Chris Huang\" <notifications@github.com> wrote:\n\n> @mgravell <https://github.com/mgravell>\n> I've improved the code for ProtoInherit please help me to review\n> master...chrishaly:master\n> <https://github.com/mgravell/protobuf-net/compare/master...chrishaly:master>,\n> if it's ok I will create a pull request. Or else please give me some advise.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/284#issuecomment-320509132>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsAkdRxxALHZqDt8kxaiX94OzIQyuks5sVch_gaJpZM4OcOHr>\n> .\n>\n. right; now with that layout, there are certain restrictions and limitations\nthat are imposed, in particular relating to polymorphism - you basically\nneed to know the exact concrete type in order to deserialize, which is the\nopposite of the LSP / regular inheritance.\n\nI'm not trying to labor the point but I want to be really really clear in\nmy mind: what is the target scenario here? When would this be more\nappealing than the existing inheritance approach?\n\nOn 7 Aug 2017 5:52 a.m., \"Chris Huang\" <notifications@github.com> wrote:\n\n>\n>    - the ProtoInherit is used on SubType, which treat BaseType as a\n>    (virtual) Field\n>    - Field number of BaseType suggest to be 1, in .NET just support\n>    single inheritace\n>    - just keep in concrete class fieldNumber of ProtoInherit not\n>    duplicate with fields & ProtoInclude's fieldNumber, no need to think about\n>    field number in BaseType or it's SubType.\n>    usage as following, MessageChild is equals to MessageChildB\n>\n>         [ProtoContract]\n>         public class MessageBase\n>         {\n>             [ProtoMember(1)]\n>             public int Id { get; set; }\n>         }\n>\n>         [ProtoContract]\n>         [ProtoInherit(1)] //fieldNumber_inherit\n>         //[ProtoInclude(fieldNumber_include_x)] //if exist\n>         public class MessageChild : MessageBase\n>         {\n>             [ProtoMember(2)] //fieldfieldNumber_include_x\n>             public string Name { get; set; }\n>         }\n>\n>         [ProtoContract]\n>         public class MessageChildB\n>         {\n>             [ProtoMember(1)]\n>             public MessageBase Base { get; set; }\n>\n>             [ProtoMember(2)]\n>             public string Name { get; set; }\n>         }\n>\n> about fieldNumber it said that fieldNumber_inherit, fieldNumber_include_x,\n> fieldfieldNumber_include_x must be unique as above.\n>\n> in terms of proto2 syntax:\n>\n> message MessageBase {\n>     optional int32 Id = 1;\n> }message MessageChild {\n>     optional MessageBase _Base = 1;\n>     optional string Name = 2;\n> }message MessageChild {\n>     optional MessageBase Base = 1;\n>     optional string Name = 2;\n> }\n>\n> in terms of proto3 syntax:\n>\n> syntax = \"proto3\";\n> message MessageBase {\n>     int32 Id = 1;\n> }message MessageChild {\n>     MessageBase _Base = 1;\n>     string Name = 2;\n> }message MessageChildB {\n>     MessageBase Base = 1;\n>     string Name = 2;\n> }\n>\n> oneof is not sutable for ProtoInherit.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/284#issuecomment-320568371>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsINQp3eemnc89P1sifHIlzb8aTulks5sVpgqgaJpZM4OcOHr>\n> .\n>\n. The interesting challenges re inheritance aren't when you *know* what the concrete type is. They are when you *don't know* - and only know about the base type. From what I can see, this code will only work in the \"we know what the exact actual type will be\" scenario. This is indeed *a valid scenario*, but is the small %, not the large %.\r\n\r\nIs this the intention? Have I misunderstood?. No, I mean when you don't know what the **derived** type is. For example, with :\r\n\r\n    Vehicle\r\n    RoadVehicle : Vehicle\r\n    Car : RoadVehicle\r\n    Bike : RoadVehicle\r\n    Train : Vehicle\r\n\r\nAnd all you know to expect is a Vehicle. Ultimately this is the problem that ProtoInclude solves via root-based serialization. What you have is leaf-based serialization, which only works for specific types - it would be fine if you know to expect a Car, for example.\r\n\r\nIs this an intentional limitation?. closing as duplicate of #289 (technically this one was first obviously, but status update is already in 289). Yes, I saw the two questions (One of them even has or had a bounty, which is awesome). This is already on my list to look at, but I have not had time to look in the last few days as my daughter is unwell. Thanks for adding a github issue though - it will make it easier to track and make sure I investigate.. No judgement implied. I've simply been up to my eyeballs (busy), with barely enough time for critical bug fixes. Will get to it.. Not currently, no.\n\nOn 2 Aug 2017 6:21 a.m., \"Rush Frisby\" <notifications@github.com> wrote:\n\n> To work around protobuf-net's handling of Guids which other languages\n> don't know how to work with I've ended up doing this a lot:\n>\n> [DataContract]public class TestResult\n> {\n>     public Guid Id { get; set; }\n>\n>     [DataMember(Order = 1)]\n>     private string IdValue\n>     {\n>         get\n>         {\n>             return Id.ToString();\n>         }\n>         set\n>         {\n>             Id = Guid.Parse(value);\n>         }\n>     }\n> }\n>\n> This can get messy if Guids are used a lot and I'd like to use a surrogate\n> instead:\n>\n> RuntimeTypeModel.Default.Add(typeof(Guid), true).SetSurrogate(typeof(GuidSurrogate));\n>\n> however, I get this runtime exception:\n>\n> System.ArgumentException: 'Data of this type has inbuilt behaviour, and\n> cannot be added to a model in this way: System.Guid'\n>\n> Is there any way to get around this?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/292>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsKfaYB60r8IuQ4QdTioS9SorXg86ks5sUAdRgaJpZM4OqnLZ>\n> .\n>\n. I haven't written a single line of code there. All I've done is read the\nspec and think about options. So there is nothing to play with *right now*.\n\nOn 7 Aug 2017 8:15 a.m., \"\u6124\u6012\u7684TryCatch\" <notifications@github.com> wrote:\n\n> [image: 12]\n> <https://user-images.githubusercontent.com/9330061/29015990-fc52725c-7b82-11e7-9679-01a03c496c5a.png>\n>\n> I see the V3 version plan to support GRPC and whether GRPC can be\n> supported in advance\uff1f\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/294>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsErfz2nVRFF75I4Y-31EauxUgSTpks5sVrmsgaJpZM4OvEsZ>\n> .\n>\n. In the C#, I assume that is a System.DateTime, not your own DateTime message? In which case indeed: the way that protobuf-net will encode that System.DateTime is not the same as your DateTime message in the .proto\r\n\r\nGood news: fixable.\r\n\r\nOptions:\r\n\r\n- if you need to keep the DateTime from your .proto, you can do that but you'll need to create a .NET type that looks like that - presumably simply by running your .proto through protogen (https://protogen.marcgravell.com is the easiest way to do this)\r\n- alternatively, use `google.protobuf.Timestamp`, the \"well known\" mechanism to express date/time info - protobuf-net supports this, including protogen (you'll need to import \"google/timestamp.proto\") and code-first (use DataFormat.WellKnown on that property); note that this option replaces the DateTime you've defined in your .proto and will change the data - and the change needs to be shared between all callers\r\n\r\nOther options exist, but those are the simplest. Note: if you have existing protobuf-net data that was serialized with the class shown, and you want to deserialize that in another client - then: it gets harder. Until relatively recently there was no \"well known\" format for dates/times, so protobuf-net invented one. Unfortunately the representation it used is not the one that got chosen, and is awkward to use from other clients. There is a .proto for it, though - see bcl.proto / DateTime: https://github.com/mgravell/protobuf-net/blob/master/src/Tools/bcl.proto\r\n\r\nIf possible, when using cross-platform clients, I suggest moving to the new \"well known\" formats for dates/times, but: this is fundamentally incompatible with any existing data stored using the bcl.proto approach.. thats very odd; I will need to take a look, but that \"actual\" indeed looks\nvery unlikely\n\nOn 10 Aug 2017 8:13 a.m., \"mizuno-gsinet\" <notifications@github.com> wrote:\n\n> I have encountered the following problem:\n>\n> using System.Collections.Generic;using ProtoBuf;using ProtoBuf.Meta;\n> namespace ProtobufNetTest\n> {\n>     [ProtoContract(IgnoreListHandling = true)]\n>     public class Inner : List<int>\n>     {\n>         [ProtoMember(1)]\n>         public int Int { get; set; }\n>     }\n>\n>     [ProtoContract]\n>     public class Outer\n>     {\n>         [ProtoMember(1)]\n>         public bool Bool { get; set; }\n>\n>         public Inner Inner { get; set; }\n>     }\n>\n>     public class Program\n>     {\n>         public static void Main(string[] args)\n>         {\n>             var typeModel = TypeModel.Create();\n>             typeModel.UseImplicitZeroDefaults = false;\n>\n>             typeModel.Add(typeof(Outer), true)\n>                 .AddField(2, \"Inner\");\n>             System.Diagnostics.Trace.WriteLine(typeModel.GetSchema(typeof(Outer), ProtoSyntax.Proto3));\n>         }\n>     }\n> }\n>\n> Expected output:\n>\n> syntax = \"proto3\";\n> package EFTest;\n>\n> message Inner {\n>    int32 Int = 1;\n> }\n> message Outer {\n>    bool Bool = 1;\n>    Inner Inner = 2;\n> }\n>\n> Actual output:\n>\n> syntax = \"proto3\";\n> package EFTest;\n>\n> message Outer {\n>    bool Bool = 1;\n>    repeated int32 Inner = 2 [packed = false];\n> }\n>\n> Of course, this is not my actual usage, but I really miss this behavior.\n> Am I missing some points?\n>\n> Thank you.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/297>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsPSg0TBjkN7Mw0IehmpvKie3VB4Bks5sWq21gaJpZM4OzCEd>\n> .\n>\n. Always. There isn't a specific build for them because the library doesn't\nneed any 4.5.2 etc runtime features. It should already install just fine\nand work just fine.\n\nIf you are seeing a problem please let me know (with details).\n\nOn 11 Aug 2017 12:04 p.m., \"Rahul Kate\" <notifications@github.com> wrote:\n\n> When support for Dot.Net framework 4.5.2/4.6 available in protobuf-net\n> library?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/298>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsAP2iqfMFOZy3HgkwWYc-IF16_3_ks5sXDVFgaJpZM4O0hQf>\n> .\n>\n. K, where did you get the protogen that you're using? Is this the ancient\nGoogle download? Or have you build the current code from source?\n\nIf the latter: it should simply work - interface is much like protoc and it\nshould JustWorkTM. If you don't want to build from source, the tool is\navailable for online usage at protogen.marcgravell.com - the work to\npackage and deploy protogen as a convenient tool is still on the pending\nlist.\n\nOn 14 Aug 2017 3:10 p.m., \"kongbu0621\" <notifications@github.com> wrote:\n\n> How to generate *.cs for *.proto by protoGen.exe, version is 2.3.3?\n>\n> There is a System.BadImageFormatException when protoGen.exe is run. so I\n> can't generate *.cs for *.proto, version is 2.3.3\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/299>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsK9rzD2YAmNKSuldHecqT8n1EFsgks5sYFVsgaJpZM4O2a0o>\n> .\n>\n. What am I looking at here? (The text)\n\nRe recursion: child properties / list elements will be onward calls. If you\nhave a recursive model, the code itself will usually spot that and complain\nloudly (it starts tracking after a set depth)\n\nOn 21 Aug 2017 8:29 p.m., \"Sergey Morenko\" <notifications@github.com> wrote:\n\n> I've getting stack overflow exceptions and can not figure out what is\n> wrong with the data mode, so added logs to TypeSerializer into public\n> void Write(object value, ProtoWriter dest) method and logged all object\n> ids (I thought, should be some circles during the serialization, but all\n> looks fine)\n>\n>  CXR:903:531:5988.34:46:D  3\n>  CXR:903:531:5989.1:47:D  3\n>  CXR:903:431:5988:51:D  3\n>  CXR:903:131:5991.44:1333:D  3\n>  CXR:903:131:5991.55:1334:D  3\n>  CXR:903:131:5993.08:1328:D  3\n>  CXR:903:131:5994.88:1392:D  3\n>  CXR:903:131:5996.48:1358:D  3\n>  CXR:903:131:5997.33:1365:D  3\n>  CXR:903:131:5998.1:1688:D  3\n>  CXR:903:131:5999.11:1687:D  3\n>  CXR:903:131:5999.9:1364:D  3\n>  CXR:903:131:6000.64:4262:D  3\n>  CXR:903:131:6001.52:4263:D  3\n>  CXR:903:131:6003.16:1651:D  3\n>  CXR:903:131:6004.42:1366:D  3\n>  CXR:903:131:6004.94:1367:D  3\n>  CXR:903:9031:6004.67:9268:D  3\n>  CXR:903:9031:6002.67:9267:D  3\n>  CXR:903:9031:6000.73:62:D  3\n>  CXR:903:9031:5998.73:66:D  3\n>  CXR:903:9031:5996.39:9236:D  3\n>  CXR:903:9031:5994.41:9239:D  3\n>  CXR:903:9031:5992.81:9252:D  3\n>  CXR:903:531:5991.78:50:D  3\n>  CXR:903:531:5993.31:54:D  3\n>  CXR:903:531:5994.46:57:D  3\n>  CXR:903:531:5995.22:58:D  3\n>  CXR:903:531:5996.37:59:D  3\n>  CXR:903:9031:5997.47:9657:D  3\n>  CXR:903:531:5997.9:60:D  3\n>  CXR:903:531:5999.43:63:D  3\n>  CXR:903:9031:5999.74:64:D  3\n>  CXR:903:531:6000.96:65:D  3\n>  CXR:903:531:6001.93:38:D  3\n>  CXR:903:531:6001.93:38:D:CPG-04B  3\n>  CXR:903:531:6002.69:61:D  3\n>  CXR:903:531:6003.89:67:D  3\n>  CXR:903:531:6005.1:69:D  3\n>  CXR:903:531:6005.75:71:D  3\n>  CXR:903:531:6005.82:72:D  3\n>  CXR:903:531:6005.89:73:D  3\n>  CXR:903:531:6005.96:74:D  3\n>  CXR:903:231:6005.81:2034:D  3\n>  CXR:903:231:6005.35:2033:D  3\n>  CXR:903:231:6004.88:2038:D  3\n>  CXR:903:231:6004.41:2039:D  3\n>  CXR:903:231:6003.87:2040:D  3\n>  CXR:903:231:6003.25:2037:D  3\n>  CXR:903:231:6001.46:79:D  3\n>  CXR:903:1031:5999.86:210:D  3\n>  CXR:903:1031:6000.76:213:D  3\n>  CXR:903:1031:6000.96:214:D  3\n>  CXR:903:1031:6001.16:215:D  3\n>  CXR:903:1031:6001.36:216:D  3\n>  CXR:903:1031:6001.56:217:D  3\n>  CXR:903:1031:6001.76:211:D  3\n>  CXR:903:1031:6001.96:212:D  3\n>  BLKL:BCEAO-3:D  4\n>  BCEAO-3  3\n>  BLKL:BCEAO-3:U  4\n>  CXR:903:1031:5999.86:210  3\n>  TPS:903:1031:5999.86:210  6\n>  CXR:903:131:5998.1:1688  3\n>  TPS:903:131:5998.1:1688  6\n>  CXR:903:9031:5996.39:9236  3\n> etc\n>\n> a bit strange while each item min by three but as per log there're each\n> after another\n>\n> 2017-08-21 14:38:41,956 DEBUG [ProtoBuf.Serializers.TypeSerializer 13] - CarrierDownlink Id: CXR:903:131:5993.08:1328:D\n> 2017-08-21 14:38:41,956 DEBUG [ProtoBuf.Serializers.TypeSerializer 13] - CarrierDownlink Id: CXR:903:131:5993.08:1328:D\n> 2017-08-21 14:38:41,975 DEBUG [ProtoBuf.Serializers.TypeSerializer 13] - CarrierDownlink Id: CXR:903:131:5993.08:1328:D\n>\n> Is ther're any any recursion calls?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/300>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsBIFnGRacuy97iPPSs19_u7Mv2-uks5sadqagaJpZM4O9u29>\n> .\n>\n. Hey all.\n\nIf you use the latest build, \"map\" behavior is assumed by default when\npossible (to match proto3) - this means that dictionaries replace rather\nthan add. You can override this if needed, but: it would seem a simple\nsolution.\n\nOn 11 Sep 2017 3:51 p.m., \"Lucian Bargaoanu\" <notifications@github.com>\nwrote:\n\n> Maybe @mgravell <https://github.com/mgravell> will see it your way. I\n> don't :)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/306#issuecomment-328554375>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsBG9pl30itlgf4hefA2wEr6Vmta8ks5shUkAgaJpZM4PSxnA>\n> .\n>\n. At the moment it *essentially* uses list add here; however, for fixed size data like `float`, *if* the data is using \"packed\" encoding (which isn't the default, but which you should *really* use here - it would be much more efficient), then it is possible to pre-compute the array length. This is part of the optimizations that are planned for the \"when we get better codegen\" work, but: right now this isn't implemented.. 2.3.2 already targets 2.0\n\ncan you be more specific about what you're seeing?\n\nOn 21 Oct 2017 11:05 a.m., \"sophiepeithos\" <notifications@github.com> wrote:\n\n> there are many Unity users who want to use proto3 but can't upgrade their\n> mono compiler.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/314>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsOjD0jNcskdapikWeFpn7_D3x3_1ks5sucIAgaJpZM4QBgyf>\n> .\n>\n. It is possible you mean the language version, not the .net version. If so,\nplease indicate what language version is available to you. Is it really\nonly C# 2.0?\n\nOn 21 Oct 2017 2:14 p.m., \"Marc Gravell\" <marc.gravell@gmail.com> wrote:\n\n> 2.3.2 already targets 2.0\n>\n> can you be more specific about what you're seeing?\n>\n> On 21 Oct 2017 11:05 a.m., \"sophiepeithos\" <notifications@github.com>\n> wrote:\n>\n>> there are many Unity users who want to use proto3 but can't upgrade their\n>> mono compiler.\n>>\n>> \u2014\n>> You are receiving this because you are subscribed to this thread.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/mgravell/protobuf-net/issues/314>, or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AABDsOjD0jNcskdapikWeFpn7_D3x3_1ks5sucIAgaJpZM4QBgyf>\n>> .\n>>\n>\n. Right; so it is definitely a language version issue. What is the exact\ncompiler (including version) in play here? Presumably mcs, but what version?\n\nOn 21 Oct 2017 6:51 p.m., \"sophiepeithos\" <notifications@github.com> wrote:\n\n> protogen generates code like this\n> public string Query { get; set; } = \"\";\n> then unity will complain error CS1519: Unexpected symbol `=' in class,\n> struct, or interface member declaration\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/314#issuecomment-338420445>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsA0VVb8k4T6MiBY6PJvmbXFV2PS7ks5sui8xgaJpZM4QBgyf>\n> .\n>\n. I've been trying to lean heavily on MS folks to support improved build-time\ncodgen tools as a replacement for the old prevent tooling in protobuf-net.\nIt is very hard to support or work with that tooling. I don't have great\nanswers there, especially since the main utility it uses for most of the\nevil bits (IKVM) has been abandoned by the author.\n\nLong term we need to replace that tooling with a different approach.\n\nOn 22 Oct 2017 6:47 a.m., \"sophiepeithos\" <notifications@github.com> wrote:\n\n> ok, so I managed to solve this problem by pass -sdk:2 to mcs.\n> Then I can't get precompile to compile, I have to get precompile from r668.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/314#issuecomment-338453484>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsFFK7eCc5IMLE8K2gSlS56Sow4hoks5sutbggaJpZM4QBgyf>\n> .\n>\n. dammit; fixing that would require a *lot* of work to make the current\ncodebase compatible with IKVM. But long term, that's not the direction we\ncan continue to go, since it a: is brittle, and b: is a dead-end (IKVM is\ndead). I was *really* hoping to spend that time moving to a different\nmechanism (solving the future needs) instead of doing that work (which just\nprolongs the pain).\n\nNot sure of the best move here; I need to catch up with MS on the codegen\nstory and think.\n\nI wonder if the best option *right now* might be to essentially implement\nthe \"new\" codegen stuff via the new protogen (not the old protogen),\nessentially making it possible to emit everything in one step when\nprocessing the .proto schema. Hopefully in a way that lets me reuse that\ncode later :)\n\nThat's my preferred option. The \"precompile\" hack is... a massive PITA for\neveryone.\n\nLet me think on that.\n\nOn 22 October 2017 at 14:41, sophiepeithos <notifications@github.com> wrote:\n\n> ok\uff0cusing the precompile from r668 seems ok on windows, I can successfully\n> serialization and deserialization proto3 map.\n> but It throw an exception when running precompile on macos:\n> huis-MacBook-Pro:precompile hui$ mono precompile.exe Model.dll -o:1.dll\n> -t:a WARNING: The runtime version supported by this application is\n> unavailable. Using default runtime: v4.0.30319 protobuf-net pre-compiler No\n> framework specified; defaulting to 4.0.30319.42000 Resolved\n> /Library/Frameworks/Mono.framework/Versions/5.2.0/lib/mono/4.5/mscorlib.dll\n> Resolved /Library/Frameworks/Mono.framework/Versions/5.2.0/lib/mono/4.5/System.dll\n> Resolved protobuf-net.dll Adding MessageContainingMapCalledEntry...\n> Member 'ProtoBuf.ProtoMapAttribute' is a missing member and does not\n> support the requested operation. at IKVM.Reflection.MissingType.get_Attributes\n> () [0x00006] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 at\n> IKVM.Reflection.Type.get_IsInterface () [0x00000] in <\n> 523ab91bcfd44fcaaadcaa2aa7737e44>:0 at IKVM.Reflection.Type.IsAssignableFrom\n> (IKVM.Reflection.Type type) [0x000c4] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0\n> at IKVM.Reflection.CustomAttributeData.GetCustomAttributesImpl\n> (System.Collections.Generic.List1[T] list, IKVM.Reflection.Module module,\n> System.Int32 token, IKVM.Reflection.Type attributeType) [0x00063] in <\n> 523ab91bcfd44fcaaadcaa2aa7737e44>:0\n> at IKVM.Reflection.CustomAttributeData.GetCustomAttributesImpl\n> (System.Collections.Generic.List1[T] list, IKVM.Reflection.MemberInfo\n> member, IKVM.Reflection.Type attributeType) [0x00039] in <\n> 523ab91bcfd44fcaaadcaa2aa7737e44>:0 at IKVM.Reflection.\n> CustomAttributeData.__GetCustomAttributes (IKVM.Reflection.MemberInfo\n> member, IKVM.Reflection.Type attributeType, System.Boolean inherit)\n> [0x00031] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 at\n> IKVM.Reflection.MemberInfo.IsDefined (IKVM.Reflection.Type attributeType,\n> System.Boolean inherit) [0x00000] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0\n> at ProtoBuf.Meta.MetaType.ApplyDefaultBehaviour () [0x004c0] in <\n> 3cd6a73ffeae488b98fe6fa28875c5e3>:0 at ProtoBuf.Meta.RuntimeTypeModel.Add\n> (IKVM.Reflection.Type type, System.Boolean applyDefaultBehaviour) [0x000eb]\n> in <3cd6a73ffeae488b98fe6fa28875c5e3>:0 at ProtoBuf.Precompile.PreCompileContext.Execute\n> () [0x002a7] in <dc2388999df64e489ff273a6b981447e>:0 at\n> ProtoBuf.Precompile.Program.Main (System.String[] args) [0x00057] in <\n> dc2388999df64e489ff273a6b981447e>:0\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/314#issuecomment-338478277>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsFYcHUzFnCgUVSL8W6_2pAPN9xKRks5su0YBgaJpZM4QBgyf>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. 1: and what problem would that solve for me?\n\n2: I can't advise on unity since I don't unity. From what I hear, it should\nwork OK\n\n3: that's fair, but the problem is getting the time\n\nOn 30 Oct 2017 8:27 a.m., \"LIUYANLIN\" <notifications@github.com> wrote:\n\n1.I want you to use cmake to build the project\n2.where is \"Unity\" folder. I saw this folder on other forums. or how to do\nit in unity?\n3.Can you have a more detailed tutorial?\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/315>, or mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsMm_y4Tns8Ln384pxhSuSpl3ETIKks5sxYiKgaJpZM4QK0iq>\n.\n. You should also be able to build via \"dotnet build\" if you don't want 2017.\nUltimately, the project tooling that's there is there to allow me to build\nthe packages for the things I need (mainly for nuget). I don't have those\nadditional requirements, nor do I have the tools that are needed installed.\nIf there's a case for offering additional build options, I think it is\nneeded for somebody who understands, needs, and uses those tools to propose\nthem. I could suggest something, but there's no way for me to know if that\nactually solves anything.\n\nOn 30 October 2017 at 12:00, LIUYANLIN <notifications@github.com> wrote:\n\n> 1.It's more user friendly, vs only supports upward compatibility, but now\n> many people are still using 2015 or old version, and your project uses 2017.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/315#issuecomment-340423762>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGDHJ2k48T1joKXFm6P70x2-PtQWks5sxbpzgaJpZM4QK0iq>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. if you mean in the 668 code, it should be fine - iirc it scans the local\npath before anything else, so just place it side by\nside\n\nIn the current \"head\" there is no protoc, except for the website code to\nallow other languages\n\nOn 31 Oct 2017 2:51 a.m., \"LIUYANLIN\" <notifications@github.com> wrote:\n\n> ok~ and have a last question.\n> can i replace protoc.exe in protobuf-net with any version of google's\n> protoc.exe?\n> Will prtobuf-net be affected by version of google protobuf?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/315#issuecomment-340644770>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsOpostAizpfkZzLG53P_Qop407QEks5sxotNgaJpZM4QK0iq>\n> .\n>\n. If you are just using the library (the dll, etc), then there is no\ndependency whatsoever on any google code.\n\nPartly, the wording is included as a courtesy and to make it very obvious\nthat the underlying protocol (\"protobuf\") that protobuf-net implements is a\ngoogle property.\n\nHowever, additionally: among the *additional tools* available in the\nprotobuf-net packages are copies of \"protoc\" and multiple google .proto\nfiles. Historically, \"protoc\" was used by the \"protogen\" tool, although\nthis is no longer the case (the \"protogen\" tool is now entirely managed\ncode with no dependency); however, the source code also includes the code\nfor https://protogen.marcgravell.com/ which again includes \"protoc\" as a\nconvenience for people working with multiple languages, and multiple .proto\nfiles (mostly by google) to allow people to make use of common \"import\"\nscenarios.\n\n\nDoes that help?\n\nOn 2 November 2017 at 09:53, Vincent Weevers <notifications@github.com>\nwrote:\n\n> The license\n> <https://github.com/mgravell/protobuf-net/blob/a978575b9e8bc281f7341237cace35220ef0ff35/Licence.txt>\n> says:\n>\n> The core Protocol Buffers technology is provided courtesy of Google.\n> At the time of writing, this is released under the BSD license.\n> Full details can be found here:\n> http://code.google.com/p/protobuf/\n>\n> This .NET implementation is Copyright 2008 Marc Gravell\n>\n> But as far as I can see, protobuf-net does not use any Google code or\n> libraries. If so, the first paragraph is not necessary (and somewhat\n> confusing). Can you please clarify why you included it? Thanks!\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/316>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsLDrWWZGBiNVJxfAoRiDw_XafUD6ks5syZEtgaJpZM4QPa-h>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. right; this gets complex and there might not br great news. The \"assorted\"\nis stuff that has not been updated to the current build tools, so may not\nbe in an immediately buildable state. In the case of precompile, this is\npartly because the tool we use to hack around some platform limitations\n(IKVM) has been abandoned by the author. But also, it has always been\nsomewhat brittle and hacky. The library that is available for earlier\nbuilds seems incompatible with .net core etc, and frankly that simply isn't\nthe right tool to pursue going forward.\n\nLong term, the plan is to replace this tool with better build-like tooling\nperhaps using Roslyn, perhaps not. I've been chasing MS on improved build\ntime generation, and while folks see the need nothing has changed. The\nexperimental \"generators\" Roslyn spike is stalled.\n\nSo; right now I don't have good options for pre-generation, at least: not\nfor recent builds. If you're using an older build, then the old precompile\nexe should work.\n\nOther than that, I would need to dust off a lot of pieces to plumb\neverything together. It isn't something that I need day to day, which -\nbeing realistic - has influenced my prioritization. If I needed it for\nwork, it would be relatively easy to carve out some work time to get the\njob done - but otherwise, I'm kinda kept busy on other things.\n\nI am aware that this is a pain point - and I've seen various people talking\nabout unity in particular. Here again I am slightly hampered by not being a\nunity user. I don't know much about the platform limitations. What I guess\nI need to do is find the time to carve out some R+D time to set up a\nminimal unity project and try to see for myself what happens, and what I\ncan get working.\n\nWhat version(s) / platforms of unity are you hitting problems with? Just in\ncase it matters (I don't want to install latest and \"fix\" things, only to\nfind that my fixes don't work with the version folks are actually using)\n\nOn 17 Nov 2017 1:12 p.m., \"PeterLake2002\" <notifications@github.com> wrote:\n\nI know this question is kinds of stupid, but I have spent 10 hours on this,\nand still can't get it done, I seriously feel despair, please help.\nI download protobuf-net-2.3.2.zip, unzip it, and open\nprotobuf-net-2.3.2\\src\\protobuf-net.sln in Visual Studio 2017, choose Unity\n- Any CPU - protobuf-net and Build Solution.\nEverything is fine, but then I realize there is no precompile, is's in\nprotobuf-net-2.3.2\\assorted\\precompile, I am not sure what to do since I am\na noob.\nSo I right click on Solution - Add - Existing Project - choose\nprotobuf-net-2.3.2\\assorted\\precompile\\precompile.csproj to add precompile\nproject to current solution.\n<https://camo.githubusercontent.com/5432841c85398d2f19d04d920915ca5e3a8a5c6f/68747470733a2f2f692e696d6775722e636f6d2f6873315a5a51762e706e67>\n\nBut there are so many errors in protobuf-net-2.3.2\\assorted\\\nprecompile\\Program.cs\n\n<https://camo.githubusercontent.com/94b5e7c4ae5051eb91957dce5cdee1597f8ce31f/68747470733a2f2f692e696d6775722e636f6d2f426c7a74324e482e706e67>\nAfter I precompile project - right click References - Add Reference -\nProjects - choose protobuf-net, this error seems disappear\n\n<https://camo.githubusercontent.com/0f05ffa2f131803080181255eb2ac050d4a4b65c/68747470733a2f2f692e696d6775722e636f6d2f4967656f6e73552e706e67>\nI realize there is a protobuf-net-2.3.2\\src\\Tools\\IKVM.Reflection.dll,\nafter I add this dll to reference, error disappear\n\nand the last one\n<https://camo.githubusercontent.com/a3f055b877628e480446ea0b8832916a6a33e58e/68747470733a2f2f692e696d6775722e636f6d2f664f41646858412e706e67>\nI have no idea how to solve this, I am almost crazy, please help, please,\nplease, many thanks\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/319>, or mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsD-LnworuKwXa-rBZ-IhPg6Q-1c0ks5s3YZXgaJpZM4QiBQF>\n.\n. which protogen is this? it was rewritten for 2.3.0, and the extension\nsupport is one of the differences\n\nOn 24 Nov 2017 2:38 p.m., \"Marques da Silva\" <notifications@github.com>\nwrote:\n\n> This issue was discussed initially in the stackoverflow\n> <https://stackoverflow.com/questions/47424568/do-protobuf-net-supports-protobuf-extensions>\n> .\n>\n> I have a base.proto with a set of messages that can be extensible using\n> protobuff extensions, then I have a comm.proto that extends some of the\n> messages defined in base.proto.\n>\n> I used ProtoGen to generate base.cs and comm.cs files but I am not able to\n> access the extension fields added by comm.cs.\n>\n> Is this supported or I have to pass some extra parameter to ProtoGen?\n>\n> *My environment:*\n>\n> dotnet --info\n>\n> .NET Command Line Tools (2.0.3)\n>\n> Product Information:\n>  Version:            2.0.3\n>  Commit SHA-1 hash:  eb1d5ee318\n>\n> Runtime Environment:\n>  OS Name:     Mac OS X\n>  OS Version:  10.12\n>  OS Platform: Darwin\n>  RID:         osx.10.12-x64\n>  Base Path:   /usr/local/share/dotnet/sdk/2.0.3/\n>\n> Microsoft .NET Core Shared Framework Host\n>\n>   Version  : 2.0.3\n>   Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\n>\n> *Trying to build the project with*\n>\n> DOTNET_RUNTIME_ID=osx.10.12-x64 dotnet build -f netstandard1.3 -c Release\n>\n> *Mono version*\n>\n> Mono JIT compiler version 5.4.1.6 (2017-06/1f4613aa1ac Wed Oct 18 09:31:57 EDT 2017)\n> Copyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\n> \tTLS:           normal\n> \tSIGSEGV:       altstack\n> \tNotification:  kqueue\n> \tArchitecture:  amd64\n> \tDisabled:      none\n> \tMisc:          softdebug\n> \tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\n> \tGC:            sgen (concurrent by default)\n>\n> Unity Version: 5.6.4p2 (not relevant because I am trying to build outside\n> of unity)\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/321>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsNZavMuLY47Oai2sQaY6477AivhDks5s5tTogaJpZM4Qp5fn>\n> .\n>\n. That's a new one on me; as a side note, though: high field numbers are more expensive. As a general rule, you should prefer low numbers. I'm not saying that this makes it ok to fail, note\n. Thanks\n. @ANTPro no, that doesn't achieve what is wanted here\n\nOn 3 July 2014 15:05, ANTPro notifications@github.com wrote:\n\n> I not test:\n> \n> [ProtoMember(5,DynamicType = true)]\n> public dynamic Data { get; set; }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47933654.\n\n## \n\nRegards,\n\nMarc\n. That is simply not a good idea, but you could probably get around it via:\n\n```\n[ProtoMember(4)]\npublic SomeType TheOriginalProperty {get;set;}\n```\n\nthen migrating to:\n\n```\n[ProtoMember(4)]\npublic SomeType TheOriginalProperty {...}\n\npublic bool ShouldSerializeTheOriginalProperty()\n{\n    return false;\n}\n\n[ProtoMember(12)]\npublic int TheNewProperty {...}\n```\n\nwith one of the two properties being the \"actual\" code, and one of them\nbeing a shim that has the code to translate between the two. This approach\nwill allow both old and new data to be read, but data will always be\nwritten using the new layout.\n\nOn 29 June 2014 16:57, slav notifications@github.com wrote:\n\n> Is it possible to change property type, for example from class to simple\n> int, and then on deserialization to customize deserialize if deserializing\n> as int fails, to try deserialize class which was used in place of int\n> before, filling out int property based on the values that used to be in\n> that class?\n> \n> So basically I want to convert stored value to a different type on\n> deserialize. How would I go around doing it?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4.\n\n## \n\nRegards,\n\nMarc\n. No, basically. That is not possible. Not least: this is a read-once stream:\nmess it up, and the data is gone.\nOn 3 Jul 2014 21:09, \"slav\" notifications@github.com wrote:\n\n> I realize it's not the best idea, but sometimes data migration is\n> necessary. I was hoping it would be possible not to keep the old property\n> around.\n> Is it possible to customize serialization/deserialization of specific\n> property?\n> \n> like\n> [ProtoMember(4)]\n> public int TheNewProperty{...}\n> \n> int DeserializeTheNewProperty( data )\n> {\n> // try load as int\n> // if fails, try load as SomeType and convert to int\n> }\n> \n> On Thu, Jul 3, 2014 at 10:38 AM, Marc Gravell notifications@github.com\n> wrote:\n> \n> > That is simply not a good idea, but you could probably get around it\n> > via:\n> > \n> > [ProtoMember(4)]\n> > public SomeType TheOriginalProperty {get;set;}\n> > \n> > then migrating to:\n> > \n> > [ProtoMember(4)]\n> > public SomeType TheOriginalProperty {...}\n> > \n> > public bool ShouldSerializeTheOriginalProperty()\n> > {\n> > return false;\n> > }\n> > \n> > [ProtoMember(12)]\n> > public int TheNewProperty {...}\n> > \n> > with one of the two properties being the \"actual\" code, and one of them\n> > being a shim that has the code to translate between the two. This\n> > approach\n> > will allow both old and new data to be read, but data will always be\n> > written using the new layout.\n> > \n> > On 29 June 2014 16:57, slav notifications@github.com wrote:\n> > \n> > > Is it possible to change property type, for example from class to\n> > > simple\n> > > int, and then on deserialization to customize deserialize if\n> > > deserializing\n> > > as int fails, to try deserialize class which was used in place of int\n> > > before, filling out int property based on the values that used to be\n> > > in\n> > > that class?\n> > > \n> > > So basically I want to convert stored value to a different type on\n> > > deserialize. How would I go around doing it?\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/mgravell/protobuf-net/issues/4.\n> > \n> > ## \n> > \n> > Regards,\n> > \n> > Marc\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47937884.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47978924.\n. The migration scheme I proposed, however, should work.\nOn 3 Jul 2014 21:13, \"Marc Gravell\" marc.gravell@gmail.com wrote:\n\n> No, basically. That is not possible. Not least: this is a read-once\n> stream: mess it up, and the data is gone.\n> On 3 Jul 2014 21:09, \"slav\" notifications@github.com wrote:\n> \n> > I realize it's not the best idea, but sometimes data migration is\n> > necessary. I was hoping it would be possible not to keep the old property\n> > around.\n> > Is it possible to customize serialization/deserialization of specific\n> > property?\n> > \n> > like\n> > [ProtoMember(4)]\n> > public int TheNewProperty{...}\n> > \n> > int DeserializeTheNewProperty( data )\n> > {\n> > // try load as int\n> > // if fails, try load as SomeType and convert to int\n> > }\n> > \n> > On Thu, Jul 3, 2014 at 10:38 AM, Marc Gravell notifications@github.com\n> > wrote:\n> > \n> > > That is simply not a good idea, but you could probably get around it\n> > > via:\n> > > \n> > > [ProtoMember(4)]\n> > > public SomeType TheOriginalProperty {get;set;}\n> > > \n> > > then migrating to:\n> > > \n> > > [ProtoMember(4)]\n> > > public SomeType TheOriginalProperty {...}\n> > > \n> > > public bool ShouldSerializeTheOriginalProperty()\n> > > {\n> > > return false;\n> > > }\n> > > \n> > > [ProtoMember(12)]\n> > > public int TheNewProperty {...}\n> > > \n> > > with one of the two properties being the \"actual\" code, and one of them\n> > > being a shim that has the code to translate between the two. This\n> > > approach\n> > > will allow both old and new data to be read, but data will always be\n> > > written using the new layout.\n> > > \n> > > On 29 June 2014 16:57, slav notifications@github.com wrote:\n> > > \n> > > > Is it possible to change property type, for example from class to\n> > > > simple\n> > > > int, and then on deserialization to customize deserialize if\n> > > > deserializing\n> > > > as int fails, to try deserialize class which was used in place of int\n> > > > before, filling out int property based on the values that used to be\n> > > > in\n> > > > that class?\n> > > > \n> > > > So basically I want to convert stored value to a different type on\n> > > > deserialize. How would I go around doing it?\n> > > > \n> > > > \u2014\n> > > > Reply to this email directly or view it on GitHub\n> > > > https://github.com/mgravell/protobuf-net/issues/4.\n> > > \n> > > ## \n> > > \n> > > Regards,\n> > > \n> > > Marc\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > <\n> > > https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47937884>.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47978924\n> > .\n. The deserializer doesn't know that - it has to assume the worst.\nOn 4 Jul 2014 00:48, \"slav\" notifications@github.com wrote:\n\n> Using it to efficiently store data, so not read-once stream. It's ok.\n> thank you for ideas.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47996379.\n. If it works, then by all means submit a pull request; it is unclear whether you are reporting an issue that you have not already resolved.\n. I wasn't aware that there was a supported alias for unity. If that works:\nsure, can do. I've never seen that alias mentioned in the nuget docs.\nOn 6 Jul 2014 13:03, \"Joao C Costa\" notifications@github.com wrote:\n\n> It would be much simpler to have the latest official DLLs compiled for\n> Unity3D in the NuGet package (under /lib/unity if possible).\n> We can do submit the changes if you prefer.\n> Thanks\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/6.\n. Of course a slight nuisance there is that for unity _ideally_ one would use\nthe precompiler. I really should package that too, under tools\nOn 6 Jul 2014 15:21, \"Marc Gravell\" marc.gravell@gmail.com wrote:\n\n> I wasn't aware that there was a supported alias for unity. If that works:\n> sure, can do. I've never seen that alias mentioned in the nuget docs.\n> On 6 Jul 2014 13:03, \"Joao C Costa\" notifications@github.com wrote:\n> \n> > It would be much simpler to have the latest official DLLs compiled for\n> > Unity3D in the NuGet package (under /lib/unity if possible).\n> > We can do submit the changes if you prefer.\n> > Thanks\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/6.\n. Can I perhaps see your performance test? Impossible to comment in a vacuum.\nOn 9 Jul 2014 21:07, \"abcpp\" notifications@github.com wrote:\n\n> hmmm... tried precompiler, results were even worse... clearly, I'm doing\n> something wrong...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/7#issuecomment-48527336.\n. I have an email citing \"TestProto\" - if that is it, I will review it in the\nmorning (I'm on mobile right now; this needs a PC)\nOn 9 Jul 2014 22:04, \"abcpp\" notifications@github.com wrote:\n\n> Thank you! I sent you a link to the solution file. Would appreciate any\n> help on making it the speedier. It does feel like I'm missing an option or\n> two...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/7#issuecomment-48533800.\n. The test project didn't contain comparisons to protobuf-csharp-port, so it\nis hard for me to comment, but my initial thought is: the google\nimplementation does a lot of the serialization work _in the builder_, so if\nyou aren't measuring object construction time and object query time - that\nis probably a huge part of the difference. The MS impl is a more\nfeature-parity comparison. I've tidied up some glitches in the code (let me\nknow if you want the revised .cs back), and I get data like:\n\nTest1 (MS.LiveLabs) ser:1594 deser:1531 len:442\nTest2 (protobuf-net) ser:1172 deser:2156 len:432\nTest1 (MS.LiveLabs) ser:1625 deser:2047 len:442\nTest2 (protobuf-net) ser:1437 deser:3391 len:432\nTest1 (MS.LiveLabs) ser:1594 deser:1531 len:442\nTest2 (protobuf-net) ser:1156 deser:2250 len:432\nTest1 (MS.LiveLabs) ser:1610 deser:1531 len:442\nTest2 (protobuf-net) ser:1156 deser:2250 len:432\nTest1 (MS.LiveLabs) ser:1609 deser:1532 len:442\nTest2 (protobuf-net) ser:1156 deser:2172 len:432\n\nGeneral conclusions, then: at the moment, protobuf-net on the data is\nfaster at serialization, but slightly slower on deserialization.\nInvestigating the exact time is tricky, and I can't give an immediate\nanswer on that, but it is something I can look at to see if there's a\n\"trick\" I can do here. But overall, they are very comparable. I'm not sure\nit is worth getting excited over the difference between them....\n\nOn 9 July 2014 22:08, Marc Gravell marc.gravell@gmail.com wrote:\n\n> I have an email citing \"TestProto\" - if that is it, I will review it in\n> the morning (I'm on mobile right now; this needs a PC)\n>  On 9 Jul 2014 22:04, \"abcpp\" notifications@github.com wrote:\n> \n> > Thank you! I sent you a link to the solution file. Would appreciate any\n> > help on making it the speedier. It does feel like I'm missing an option or\n> > two...\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/7#issuecomment-48533800\n> > .\n\n## \n\nRegards,\n\nMarc\n. Seems fine, thanks\n. Yes, I have a spike locally that fixes this (developed separately to this\nemail) - I'll see what the status of that is.\nOn 23 Aug 2014 11:21, \"James Ford\" notifications@github.com wrote:\n\n> It appears that at the lowest level this library is working with all\n> values as objects, and that this will generate garbage do to\n> boxing/unboxing at least once for each value written or read. This is a\n> major concern for games, or other fps dependent applications for which\n> unexpected GC passes are noticeable to the user.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/15.\n. I was pleasantly surprised to see emit code here; I was (from experience) only expecting to see the runtime fallback implementation. I can look at the IKVM - probably a Type vs Type mismatch (needs a call to MapType, IIRC). However, 2 things:\n- inheritance: since interfaces aren't per-level, this won't work with inheritance - that should probably be checked for\n- any chance of a test/example usage? (sorry if it was there and I missed it). Ideally should cover class, struct, inheritance (expect to fail), and using both runtime and compiled implementation.\n. Ah, fine - makes sense. I'll check on the ShouldSerialize - I am not at a\nPC to answer that.\nOn 23 Aug 2014 23:14, \"James Ford\" notifications@github.com wrote:\n\n> This is more of a \"heads up\" pull request it isn't actually tested (unit\n> test or otherwise) yet. Are there any unit tests in place for the\n> ShouldSerialize Get/Set pattern i can look at as a model? In addition i'll\n> have some of my own project code attempting to make use of this by the end\n> of the day, and thereby it will get some verification if working as\n> intended or not.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/16#issuecomment-53168090.\n. k; thanks for the update\n. This is actually the correct application of reading an individual value; in\nthe protobuf wire format, streams can be directly appended. If a field is\nduplicated, it is the **last occurrence** that wins (except for sub-items,\nwhere they are merged). To do anything different would be to parse the data\nincorrectly. To read lists, you should use the separate \"items\" based\nmethod - apologies, I am on mobile and don't have the name to hand.\n\nOn 8 September 2014 at 19:46, arobincaron notifications@github.com wrote:\n\n> I am using Extensible to implement a serialized type that can handle\n> arbitrary data members. One of those members is a list of items. To set the\n> values of this members I use AppendValue and to get it's values I use\n> GetValues. Unfortunately I find that GetValues only returns the last value\n> added. By inspecting the byte stream I see that the data is there.\n> \n> Below you'll find a small sample reproducing the behavior. I would expect\n> the output of this program to be:\n> foo\n> bar\n> \n> Instead you get:\n> bar\n> \n> I believe is caused the loop in ProtoBuf.ExtensibleUtil.GetExtendedValues\n> (around line 76):\n> \n> ```\n>         while (model.TryDeserializeAuxiliaryType(reader, format, tag, type, ref value, true, false, false, false) && value != null)\n> ```\n> \n> Passing false as the \"asListItem\" parameter causes\n> TryDeserializeAuxiliaryType to return only the last value.\n> \n> class Program\n> {\n> static void Main(string[] args)\n> {\n> var x = new SampleExt();\n> x.AddData(\"foo\");\n> x.AddData(\"bar\");\n> foreach (var value in x.GetData())\n> {\n> Console.WriteLine(value);\n> }\n> }\n> \n> class SampleExt : Extensible\n> {\n>     public string[] GetData()\n>     {\n>         return GetValues<string>(this, 1).ToArray();\n>     }\n> \n> ```\n> public void AddData(string value)\n> {\n>     AppendValue(this, 1, value);\n> }\n> ```\n> \n> }\n> \n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/20.\n\n## \n\nRegards,\n\nMarc\n. the fix is noted and appreciated, but no longer applies now that 2.3.0 has gutted the protogen tools; the PR is unmergeable, so I can't merge just to say thanks - but: thanks.. This is an odd one. Thanks for putting a sample together to demonstrate it. I genuinely don't know how deep this rabbit hole will turn out to be.\n. Suggest we keep this in one place only: http://stackoverflow.com/questions/25989234/adding-attributes-to-the-fields-of-runtimetypemodel-types\n. Like this:\n\n```\n    var lookup = new Dictionary<int,Type> { { 1, typeof(SHWrapperData)\n```\n\n}, { 2, typeof(ObjectPastStateData) } };\n        Serializer.TypeResolver resolver = i =>\n        {\n            Type t;\n            return lookup.TryGetValue(i, out t) ? t : null;\n        };\n\n```\n    object obj;\n    while(Serializer.NonGeneric.TryDeserializeWithLengthPrefix(bs,\n```\n\nPrefixStyle.Base128, resolver, out obj))\n        {\n            // process obj\n        }\n\nOr perhaps avoid the dictionary if the numbers are hard-coded:\n\n```\n    Serializer.TypeResolver resolver = i =>\n    {\n        switch(i)\n        {\n            case 1: return typeof(SHWrapperData);\n            case 2: return typeof(ObjectPastStateData);\n            default: return null;\n        }\n    };\n\n    object obj;\n    while(Serializer.NonGeneric.TryDeserializeWithLengthPrefix(bs,\n```\n\nPrefixStyle.Base128, resolver, out obj))\n        {\n            // process obj\n        }\n\nAny good?\n. Ah, just noticed you're probably using TypeModel, in which case what you have in the hastepin should work... ish. Can you clarify what currently goes wrong? what happens?\n. The buffering is used also for functional reasons, specifically: lengths\nare not precomputed in all cases, so buffering allows mutation later.\n\nI'll check on the default length thing; but it should retain _minimum_\nlength\n\nWeak references: yes, should be fine\n\nResizeAndFlushLeft - I will have to check (not at a PC currently)\n\nGood thoughts, thanks\nOn 8 Oct 2014 11:05, \"tbella\" notifications@github.com wrote:\n\n> The BufferPool throws OutOfMemory exception when serializing large objects\n> on x86 platforms. In our case one of the fields is a byta array containing\n> 64 MB data. Possible improvements:\n> - Remove buffering from ProtoWriter: dirently write to the stream,\n>   buffering should be performed by the underlying stream.\n> - Do not only cache default-sized buffers. The real gain would be in\n>   caching big buffers allocated on the Large Object Heap. They are\n>   responsible for memory fragmentation and also more expensive to re-allocate.\n> - Use weak references for cached buffers. They could be automatically\n>   collected in low-memory situations.\n> - Re-use cached buffers in ResizeAndFlushLeft method.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/32.\n. Cool; I will review later - not at a PC right now\nOn 8 Oct 2014 15:48, \"tbella\" notifications@github.com wrote:\n\n> Thank you for the quick response. I have just posted Pull Request #33\n> https://github.com/mgravell/protobuf-net/pull/33 addressing weak\n> references, first-chance OutOfMemoryExceptions and caching large buffers.\n> The BufferPool.GetBuffer can also receive a minSize argument when the size\n> of the required buffer is known (possibly ProtoReader?)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/32#issuecomment-58369364\n> .\n. That scenario is not supported.\nOn 11 Oct 2014 20:42, \"Michael\" notifications@github.com wrote:\n\n> Hello. I have been trying to find a way to preserve object references\n> between multiple serializations to streams. I tried serializing a list of\n> objects to a file stream (with the reference features enabled) and it\n> worked for that single list of objects in the stream. But, I need to keep\n> object references across multiple streams or serializations. Is it\n> possible?\n> \n> Forgive me if I've overlooked some documentation on how to do this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/34.\n. Will reply to the group, but the tl;dr; version is \"cannot repro; please provide an example\" - my working-fine example is below:\n\n```\nusing ProtoBuf;\nusing System;\nusing System.IO;\n\nstatic class Program\n{\n    static void Main()\n    {\n        var a = new A {\n            location = new Location {\n                city = \"someCity\",\n                coordinate = null\n            }\n        };\n        var ms = new MemoryStream();\n        Serializer.Serialize(ms, a);\n        var hex = BitConverter.ToString(\n            ms.GetBuffer(), 0, (int)ms.Length);\n        Console.WriteLine(hex);\n        // outputs: 22-0A-12-08-73-6F-6D-65-43-69-74-79\n    }\n}\n[ProtoContract]\nclass A\n{\n    [ProtoMember(2)]\n    public string someField { get; set; }\n\n    [ProtoMember(4)]\n    public Location location { get; set; }\n}\n[ProtoContract]\nclass Location\n{\n    [ProtoMember(1)]\n    public Coordinate coordinate { get; set; }\n    [ProtoMember(2)]\n    public string city { get; set; }\n}\n[ProtoContract]\nclass Coordinate\n{\n    //...\n}\n```\n. The key point, though, is that the above does not emit an 0x0\n. Please also note my mention of `GetBuffer()` and over-sized backing buffers (on the group reply); not sure if this is what is causing the confusion, but: I see people make that mistake _a lot_ (but I must note: that is nothing to do with protobuf-net, and is simply a feature of how the framework's `MemoryStream` class works)\n. Another random thought; is it possible that your string has a trailing nul? That would result in:\n\n```\n(blah...)-12-09-73-6F-6D-65-43-69-74-79-00\n```\n\n(in partcular, note the 12-09-...-00) - note that this is still perfectly valid protobuf, and if _this_ is what the scenario is, I would say that protostuff has a string-reading bug - sounds unlikely, though.\n. I'm assuming this is \"SOLNA\" ?\n\nAgreed: tag 90 is field-number 11. Just to check: _is there_ a field 11 in\nyour message? If not, it sounds like a nasty bug in the output generation.\nI would love to see a complete runnable sample that generates the wrong\noutput.\n\nOn 15 October 2014 11:15, Johannes Elgh notifications@github.com wrote:\n\n> Okay sorry, that zero in the sequence above wasn't related to my problem.\n> \n> This is from the Java side, I'm stepping through the ProtoStuff code. This\n> array is the input buffer. And remember that java and c# byte\n> representation are different (java -127 to 128 and c# 0 to 255, right?).\n> \n> ...\n> [201] = 90\n> [202] = 7\n> [203] = 26\n> [204] = 5\n> [205] = 83\n> [206] = 79\n> [207] = 76\n> [208] = 78\n> [209] = 65\n> ...\n> \n> This is where the Location object is stored. 90 is read:\n> \n> final int tag = readRawVarint32();\n> final int fieldNumber = tag >>> TAG_TYPE_BITS; // TAG_TYPE_BITS = 3\n> \n> So this makes fieldNumber equal 11, which is the Location message nested\n> inside class A (doesn't really coincide with the example in my initial\n> post).\n> This makes ProtoStuff look into the Schema and find that field 11 is of\n> type Location and it starts handling the nested message. The first thing it\n> reads, inside this nested message, is buffer position 202: 7. It uses the\n> two lines above making tag=7 and therefore fieldNumber=0.\n> \n> The continuation of the two lines above:\n> \n> ```\n>     final int tag = readRawVarint32();\n>     final int fieldNumber = tag >>> TAG_TYPE_BITS;\n>     if (fieldNumber == 0)\n>     {\n>         if (decodeNestedMessageAsGroup && WIRETYPE_TAIL_DELIMITER == (tag & TAG_TYPE_MASK)) // WIRETYPE_TAIL_DELIMITER = 7\n>         {\n>             // protostuff's tail delimiter for streaming\n>             // 2 options: length-delimited or tail-delimited.\n>             lastTag = 0;\n>             return 0;\n>         }\n>         ...\n> ```\n> \n> ProtoStuff is going through all the incoming fieldNumbers and aborts\n> looping when fieldNumber is 0. Therefore the nested message Location is\n> never populated since the looping is aborted immediately. It moves out to\n> the outer message (class A). Here the next byte it finds is 26 (pos 203\n> above). This should actually belong to the nested message Location but is\n> populating the wrong field in the outer message.\n> \n> As I described in the GoogleGroup thread I'm very new to Protocol Buffers\n> so I'm not sure what this all means. But the byte at position 202 7 is\n> interpreted as Location population is over.\n> \n> Can you make anything of this very long description? Is it something that\n> you want from me in order to clarify?\n> \n> Thanks for your help.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/35#issuecomment-59184959\n> .\n\n## \n\nRegards,\n\nMarc\n. So to be clear, then; what makes you think there is a problem? The 9 bytes in the binary you posted most recently says:\n\n```\n\"field 11, string, length 7\" (2 bytes)\n    \"field 3, string, length 5\" (2 bytes)\n        \"SOLNA\" (5 bytes)\n```\n\nIf field 11 is a location with Coordinate = null, Accuracy = 0 and City = \"SOLNA\", then that is entirely reasonable. So: what makes you think there is an issue? What is the symptom? \n. From your comment here:\n\n> The first thing it reads, inside this nested message, is buffer position 202: 7. It uses the two lines above making tag=7 and therefore fieldNumber=0.\n\nwhat you are describing here is a bug in protostuff; a tag with value 90 indicates a length-prefixed type (aka \"string\"). The correct thing to do next is to read a varint, which indicates the length of the content - in this case, 7 bytes. The _content_ starts _after_ the 7. If protostuff isn't reading the varint that denotes the length: then it is doing it wrong. You can refer to the \"Strings\" and \"Embedded Messages\" sections of [the encoding spec](https://developers.google.com/protocol-buffers/docs/encoding) for more information.\n. Step back; what are these 3 different DLLs? What is the difference between\nthem? Are they targeting different platforms? Or...?\nOn 15 Oct 2014 21:51, \"Snow-Okami\" notifications@github.com wrote:\n\n> So I have two other assets in my unity3d project that also now use\n> protobuf-net. I see that when you create a type model and a serializer, you\n> use your own built version of the library. At first I thought it would be\n> easy as swapping out the protobuf-net.dll file, but it isn't. It causes\n> things from whichever asset that had that dll file to have things missing.\n> Seeing how I have now 3 different protobuf-net.dll files (my own, and 2\n> others), how can I centralize into just depending off of one so that they\n> all can work in unison? I hope my question makes sense\n> \n> In other words how can I get them to all play nicely?\n> \n> Thank you!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/36.\n. Did you ask the same on stackoverflow? I answered this earlier today:\nhttp://stackoverflow.com/questions/26528610/c-sharp-protobuf-with-tcpclient-how-can-i-separate-packets\nOn 23 Oct 2014 06:48, \"Lee\" notifications@github.com wrote:\n\n> Hello,\n> \n> If i send packet like this, http://codepad.org/cYB0AyyN\n> And receive packet like this, http://codepad.org/5IR4zfRr\n> \n> How can i separate two persons if in one time received all...\n> \n> Thanks in advance.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/38.\n. I've had quite a lot of discussion on this one lately. Short recap:\n- yes, I'm basically in favor of adding the UTC kind, and wish it had been added at the origin\n- but: there is a genuine and real problem with enabling this by default, as it will change the output when people expect it to be consistent\n- but I'm all in favor of making it opt-in, disabled by default\n\nGiven that it will involve IL-emit changes, I'm tempted just to do it, to avoid the ongoing debate ;p\n\nI have _some ideas_ towards some kind of \"backlevel compatibility\" flag to avoid having to set lots of flags manually, although I'm also tempted to do some kind of assembly-level configuration, i.e.\n\n```\n [assembly:ProtoConfiguration(DateTimeKind = true, GuidsShouldNotBeBatshitCrazy = true)]\n```\n\nBut that is probably a discussion for another thread.\n. This is fixed next deploy: https://github.com/mgravell/protobuf-net/commit/e601b359c6ae56afc159754d29f5e7d0f05a01f5\n. Yes I do, but fair question.\n\nOn 26 May 2015 at 15:22, Bar Arnon notifications@github.com wrote:\n\n> Thank you. this is very good news :).\n> \n> Do you have any plans of pushing a new nuget version with this commit?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/44#issuecomment-105541238\n> .\n\n## \n\nRegards,\n\nMarc\n. You could actually try the alpha build here:\nhttps://www.nuget.org/packages/protobuf-net/2.1.0-alpha-1\n\nThis includes the DateTimeKind code, I believe.\n\nOn 6 January 2016 at 13:05, Bar Arnon notifications@github.com wrote:\n\n> @roberttaylor26 https://github.com/roberttaylor26 while you wait... if\n> you can handle _all_ DateTimes being _either_ DateTimeKind.Utc _or_\n> DateTimeKind.Local you can set it with reflection. There are explanations\n> and examples on my blog\n> http://blog.i3arnon.com/2015/10/03/protobuf-net-datetime-bug/.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/44#issuecomment-169319217\n> .\n\n## \n\nRegards,\n\nMarc\n. Interesting. Does it do that if the number is 1, not 0? 0 is not a valid protobuf field number\n. Ah, this is probably the annoying \"implicit defaults\" - an early design choice that is much regretted. Try adding:\n\n[DefaultValue(true)]\n\nTo the property. That should hopefully fit it.\n. This is simply a poor design choice that happened many many years ago in v1 of protobuf-net. What I should have done is only use explicit default values. How the code was implemented - and remains the default, for compatibility - is that it assumes \"zero\" as the default, unless told otherwise (or unless some kind of conditional serialization is in play, for example Nullable-of-T, ShouldSerialize*, or *Specified). There is actually an option to disable this if you create your own RuntimeTypeModel instance rather than using .Default - something like \".UseImplicitZeroDefaults\".\n\nThe [DefaultValue(true)] in this case simply gives the library more clue as to what is an actual value vs a default.\n. the fundsmental thing here is that the .proto schema proessing needs a\nsingnificant overhaul (read: rewrite) in order to be viable in the\nxplat/core-clr world. This would be a natural thing to fold into that, but\nin some ways I'm reluctant to stir too hard at the old protoc/xslt code.\n\nthe good-ish news is that it is all protocol compatible, but I acknowledge\nthat it is inconvenient to do so. Needs work, and I have a chunk of time\nearmarked for protobuf-net love this quarter.\n\nOn 1 Feb 2017 5:06 p.m., \"DapperTayra\" <notifications@github.com> wrote:\n\n> +1\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/47#issuecomment-276716537>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsEbwksQtUcGRUtl53pGmztd3oyZyks5rYLuAgaJpZM4C8pza>\n> .\n>\n. for info, I'm starting some ANTLR work to see what falls out; it isn't\nbeing ignored\n\nOn 1 Feb 2017 7:23 p.m., \"Marc Gravell\" <marc.gravell@gmail.com> wrote:\n\n> the fundsmental thing here is that the .proto schema proessing needs a\n> singnificant overhaul (read: rewrite) in order to be viable in the\n> xplat/core-clr world. This would be a natural thing to fold into that, but\n> in some ways I'm reluctant to stir too hard at the old protoc/xslt code.\n>\n> the good-ish news is that it is all protocol compatible, but I acknowledge\n> that it is inconvenient to do so. Needs work, and I have a chunk of time\n> earmarked for protobuf-net love this quarter.\n>\n> On 1 Feb 2017 5:06 p.m., \"DapperTayra\" <notifications@github.com> wrote:\n>\n>> +1\n>>\n>> \u2014\n>> You are receiving this because you are subscribed to this thread.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/mgravell/protobuf-net/issues/47#issuecomment-276716537>,\n>> or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AABDsEbwksQtUcGRUtl53pGmztd3oyZyks5rYLuAgaJpZM4C8pza>\n>> .\n>>\n>\n. @yaakov-h  the schema overhaul needed for this is complete [as of 2.3.0](http://blog.marcgravell.com/2017/06/protobuf-net-gets-proto3-support.html); \"oneof\" support is in the code-generator and library; example: https://protogen.marcgravell.com/#g01989f8da1f4ce8ab358756115478c37\r\n\r\nBasically: this is all done. Marking as closed.. Yeah, I'm *not* going to simply remove all enum verification, so I'm not going to merge the PR \"as is\", but I am open to suggestions on what the right \"fix\" is - if there is any. As noted, there is support to disable enum verification, and this is done automatically if `[Flag]` is on the enum. It can also be specified per-enum in the metadata via `[ProtoContract(EnumPassthru = true)]`. And it can be set at runtime for other types via `RuntimeTypeModel`.\r\n\r\nIs that not enough?. I'm going to close this PR as it is unmergeable in `git` terms, *plus* I think the code suggested is the wrong fix; but I'm open to further discussion on the topic both here or in a separate issue.. Just as I was reading the example, mdonoughe replies perfectly correctly. Basically: give it a clue that the default is `true`.\n. all done in 2.3.0. Yes, it is certainly a scenario I would like the library to support, but no\nI haven't had chance to investigate.\n\nOn 31 December 2014 at 08:53, Anthony Sneed notifications@github.com\nwrote:\n\n> Are there plans to support CLR Core for compatibility with ASP.NET 5.0?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/56.\n\n## \n\nRegards,\n\nMarc\n. Zero is a valid length for protobuf data. This comes down to \"implicit zero\ndefaults\", something I which I had never put into v1; there are multiple\nways to force it to write the false (including disabling implicit zero\ndefaults), but ultimately: zero is a valid length!\nOn 8 Jan 2015 12:28, \"justkao\" notifications@github.com wrote:\n\n> I have following object type that I want to serialize using protobuf\n> v2.0.0.668:\n> \n> ```\n> [DataContract]\n> public class SimpleCustomType\n> {\n>     [DataMember(Order = 1)]\n>     public bool BoolProperty { get; set; }\n> }\n> ```\n> \n> Calling following code will not write any data to stream.\n> \n>  ProtoBuf.Serializer.Serialize(stream, new SimpleCustomType());\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/61.\n. You can use `ProtoReader` to parse things manually looking at wire-type and\nfield numbers - so essentially you could _create_ that tool; something\nquite that complete is not included though.\n\nOn 26 January 2015 at 07:53, lofrank notifications@github.com wrote:\n\n> As we known, protoc.exe has a '--decode_raw' option, which can decode\n> protobuf binary without proto description file.\n> Is there any method to do this using protobuf-net?\n> \n> Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/65.\n\n## \n\nRegards,\n\nMarc\n. No, it hasn't been discontinued; I simply haven't had a pressing need to\nre-release it. There are, as always, some remaining bugs and feature\nrequests, but I have to balance time between multiple projects, family, and\nother commitments. I am currently actiuvely researching options for\nprotobuf-net in the vNext world, which introduces an entirely different\nruntime and BCL, which is where I expect the bulk of any protobuf-net\nefforts in the near future to be focused.\n\nMarc\n\nOn 23 February 2015 at 06:01, Scratch notifications@github.com wrote:\n\n> Hi there.\n> There's been no updates since 2013. Should we look for alternatives like\n> capnproto-net?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/72.\n\n## \n\nRegards,\n\nMarc\n. It would be good to improve the tooling around .proto schema parsing and\ncode generation, ideally in a 100% managed way that was platform\nindependent, and with proto3 language support. CoreCLR support is\nin-progress. I'm open to feature requests beyond that.\nOn 25 May 2015 9:12 pm, \"Nikolai Mynkow\" notifications@github.com wrote:\n\n> Hello @mgravell https://github.com/mgravell ,\n> Would you share a short list of things which you want to improve and the\n> reasons?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/72#issuecomment-105305092\n> .\n. It isn't discontinued - just..  I haven't had massive need for changes for\na while, and other projects have consumed my time. I expect coreclr will\nget some love soon (have done dapper, working on se.redis, etc)\nOn 19 Oct 2015 11:28 pm, \"Vladyslav Taranov\" notifications@github.com\nwrote:\n\n> Hi! I had the same feelings so I made a fork of protobuf-net which now\n> contains multiple improvements and fixes especially for better reference\n> tracking. You can find it here\n> https://github.com/AqlaSolutions/AqlaSerializer.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/72#issuecomment-149365418\n> .\n. Hugely active right now; closing this. I can't disagree - yup, makes sense\n. I wouldn't way no, for sure\nOn 26 Mar 2015 17:59, \"Sandor\" notifications@github.com wrote:\n\n> That would help new users a lot if there was a readme.md.\n> And that would be awesome to migrate the soon to be discontinued google\n> code wiki.\n> \n> Do you want a pull request with a readme.md proposal?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/76.\n. IIRC that is already pooled and reused quite aggressively... passing one in\nis awkward because you don't know the sizes in advance. I'm open to ideas,\nbut it isn't trivial.\n\nMarc\n\nOn 26 August 2015 at 18:48, ikopylov notifications@github.com wrote:\n\n> [image: :+1:]\n> \n> With large objects ProtoWriter reallocate inner _ioBuffer_ many times.\n> This leads to a high memory traffic.\n> \n> So it would be great to reuse ProtoWriter with same _ioBuffer_ inside or\n> give a possibility to pass an external buffer through the constructor.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/77#issuecomment-135121515\n> .\n\n## \n\nRegards,\n\nMarc\n. To do this, call `AppendBytes`; pass null as the existing data. For example:\r\n\r\n    var payloadBytes = ProtoBuf.ProtoReader.AppendBytes(null, reader);\r\n\r\n(from https://github.com/mgravell/protobuf-net/blob/parser/src/protogen.site/Views/Home/DecodeBytes.cshtml#L58). That's fine, but:\n- I'm not a Windows Phone developer\n- I'm not a Silverlight developer\n- I'm not a Windows Metro / RT developer\n- I'm not a xamarin developer\n- and why the prejudice against Phone 8.1?\n\nPut simply: I lack the tools and time to configure builds for, and support,\na wide range of frameworks that _I otherwise wouldn't touch_.\n\nI'd be more than happy if someone else wanted to put build packages\ntogether for those frameworks, test those packages, etc - but it isn't\nsomething that just happens magically, and despite all the rumours it isn't\na case of clicking 3 buttons in the IDE...\n\nOn 2 June 2015 at 02:55, ezverev notifications@github.com wrote:\n\n> If you wish your library to be as inclusive as possible i.e. be as\n> available as possible you should target:\n> 1. .NET 4.0\n> 2. Windows 8\n> 3. Windows Phone Silverlight (last version)\n> 4. Silverlight 5\n> 5. All xamarins\n> (do no include Windows Phone 8.1)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/79#issuecomment-107771706\n> .\n\n## \n\nRegards,\n\nMarc\n. Ah, sorry; my bad; I misunderstood; this just pushes the issue up one\nlevel; it is **really, really hard** to support that range of platforms (\nportable-net45+win+wpa81+wp80+MonoAndroid10+xamarinios10+MonoTouch10)\nconcurrently\nand efficiently - they have massively different reflection and\nmeta-programming APIs, and the PCL subset / intersection is next to\nuseless. It can be _done_, but that doesn't mean it is a _good idea_.\n\nAlso: add to my list of \"frameworks that I don't use\": ios, mono-android and mono-touch.\n\nIf I was full time supporting this library as a commercial project: sure, I'd pick those up in a heartbeat.\n\nOn 2 June 2015 at 11:28, ezverev notifications@github.com wrote:\n\n> Oh my, Marc.\n> My reply was not for you but for R2D221. I was telling HIM how to make HIS\n> PCL more including. Yours is pretty fine/all right/super-puper/mega-fun.\n> Pay no attention please :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/79#issuecomment-107910966\n> .\n\n## \n\nRegards,\n\nMarc\n. That sounds like it may be only a small amount of work, but it isn't\nsomething I currently have setup locally to be able to target; I will need\nto investigate what exact target frameworks, nuget targets, etc I need to\nadd. It _might_ get better with DNX for multi-target builds (I have a\nbranch exploring that), but: the current beta DNX tools cannot successfully\nbuild the existing libs (even for core .NET) due to strong naming. I'll\nhave to see what I can do with (yet another) csproj...\n\nOn 2 June 2015 at 11:52, ezverev notifications@github.com wrote:\n\n> Offtopic.\n> \n> Marc,\n> \n> May I let you know that MonoAndroid10+xamarinios10+MonoTouch10 are very\n> close to wp80 and are supported by your library. As a matter of fact I was\n> pushed to use your library when I started developing for Xamarin.Android.\n> The problem is the DataContractSerializer (that is meant to be a\n> cross-platform WCF/WebServices serializer) failed i.e. it serializes\n> Dictionaries differently on Microsoft platforms and on Xamarin\n> (Android/iOS). May be this is a Xamarin failure, I don't know. Fact is: for\n> those who adopt Xamarin protobuf-net is the cure. You may not use that\n> framework but you do help it a great deal.\n> \n> Big thanks!\n> P.S. I would not think a second to subscribe for material support of what\n> you do. Actually I spent some time searching for a way but did not find\n> any. If there is one please give me a hint.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/79#issuecomment-107914967\n> .\n\n## \n\nRegards,\n\nMarc\n. Do you mean System.Runtime.Serialization.EnumMemberAttribute? If so: indeed - it is a `string`. I believe there is a `ProtoEnumAttribute` in the protobuf namespace that should do what you want.\n. The current build makes no attempt to `TryParse` etc the enum values,\nbecause _in the general case_, it is not expected that they will have\nnumeric values in `EnumMemberAttribute` attributes. Dapper treats enums as\ninteger types. However, can I ask: do you actually need to do _anything_\nhere? normally, enums serialize just fine without any extra work. And there\nare ways such as `[Flags]` to get it to treat it as a raw number without\nenum handling at all. Finally, there is always runtime model configuration.\nAre any of those options useful to you?\n\nOn 21 April 2015 at 00:00, mrent notifications@github.com wrote:\n\n> Yes, the serialization EnumMember. We are trying to stick as close as\n> possible to built-in serialization attributes, since we are supporting\n> different serializers (ProtoBuf and JSON). So we have been using\n> DataContract/ordered DataMembers instead of serializer specific attributes.\n> When it comes to enum values it seems however difficult to accomplish this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/80#issuecomment-94587834\n> .\n\n## \n\nRegards,\n\nMarc\n.  I don't think we can _just_ enable this - it is a breaking change, especially for people who expect the data output to be reproducible. To merge this, I would want to make this \"opt-in\", perhaps via a global setting, so that it doesn't adversely impact other users. If it was in from day zero, that would be different.\n\nThoughts?\n. Note: it is fine to always process during deserialization as long as the old default is preserved: it is only during serialization that we need to check a flag \n. I need to look more at the arrays - yes my main concern was the date times\n. I'm fully aware of the aim that parsers should ignore unknown fields; but\nI'm also aware that many people expect the output to remain consistent -\nand I know of a few implementations that this change would actively break\n(for example, when using the output as \"set\" values in things like redis).\nIt would also break a lot of peoples' tests that assert \"the output of this\ninput is this binary\". Hence why I feel it should be made opt-in. Does that\nmake sense?\nOn 4 May 2015 5:09 pm, \"Rob Taylor\" notifications@github.com wrote:\n\n> Thanks for taking a look. There were two changes i made:\n> \n> 1) Empty arrays should be deserialized as an empty array and not as null.\n> This seems like a low risk bug fix, did you have an issue with this?\n> \n> 2) DateTimeKind is serialized with the DateTime as a field. From your\n> email it seemed like this was the change that most concerned you, is that\n> correct? I'm fairly new to protobuf but on\n> https://developers.google.com/protocol-buffers/docs/encoding it mentions\n> that \"When the message is being decoded, the parser needs to be able to\n> skip fields that it doesn't recognize.\". In the event where someone was\n> using a library that wasn't the protobuf-net library (or if they were using\n> a version of protobuf-net without this fix) wouldn't the parser just skip\n> the DateTimeKind field and the behaviour would be as it currently is with\n> the DateTimeKind not being serialized?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-98768146.\n. good question; my initial thought is possibly via an instance property on\nRuntimeTypeModel, like how `AllowParseableTypes` works; however, what we'd\nprobably need to do is:\n- add a **new overload** to BclHelpers.WriteDateTime that accepts a boolean\n  to indicate whether to include the kind\n- forward the old WriteDateTime to WriteDateTime(value,dest,false);\n- optional: mark the old overload as `[Obsolete]`\n- change the DateTimeSerializer code in both Write and EmitWrite to include\n  the extra parameter (and in the case of EmitWrite: to select the correct\n  method, which could perhaps be done by making EmitWrite ignore methods\n  where `[Obsolete]` is defined)\n\nThe point of this lot is due to the ability of protobuf-net to generate\nserialization assemblies; we don't want old serialization assemblies to\nbreak with `MissingMethodException`, and we want newly generated\nserialization assemblies to respect the options that were set on their\n`RuntimeTypeModel`.\n\nThat lot probably isn't trivial, though - and depends on reflection/IL\nknowledge. I might be able to jump in and help on some of that if it is\nproblematic. I'm open to alternative implementation ideas too!\n\nOn 4 May 2015 at 17:26, Rob Taylor notifications@github.com wrote:\n\n> Sure that makes sense. Do you know how we'd go about implementing the\n> opt-in option flag?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-98771900.\n\n## \n\nRegards,\n\nMarc\n. The IKVM API is _basically_ the same - which is why it can switch a lot\njust based on \"using\" directives. I can fix that up, though - I wouldn't\nstress about it. Will review changes tomorrow.\nOn 4 May 2015 7:52 pm, \"Rob Taylor\" notifications@github.com wrote:\n\n> OK, I've had a go. I've committed the following.\n> - add a _new overload_ to BclHelpers.WriteDateTime that accepts a\n>   boolean to indicate whether to include the kind\n> - forward the old WriteDateTime to WriteDateTime(value,dest,false);\n> - optional: mark the old overload as [Obsolete]\n> \n> The last point involving modifying the EmitWrite method in CompilerContext\n> to ignore Obsolete methods - I can do this when using System.Reflection but\n> I haven't come across IKVM before. I tried using\n> Attribute.GetCustomAttribute but I couldn't see an Attribute class when I\n> decompiled IKVM.Reflection dll...any chance you know how to get custom\n> attributes using IKVM off the top of your head :-) ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-98811909.\n. > There should be a requirement for the protobuf-net library to be able to deserialize protobuf strings serialized by older versions so I think that any change that violates this rule is a breaking change.\n\nYes, there is, and there absolutely must be. But that is largely unrelated to the issue. As I tried to explain, the problem is not about deserialization (indeed, I mentioned that deserialization wouldn't even need to check any config option)  but: serialization, and the effects of suddenly changing the output of the serialization process between versions. I also tried to outline several of the scenarios _that I actively know about_ that would be impacted by this. People reasonably expect the binary data to change if they add fields etc, but not **unexpectedly** from this; the path of least failure is thus to make it an opt-in configuration option.\n\nI'm sorry if this has caused you frustration, but I need to consider _all_ users.\n. The redis scenario was simply one of many that immediately leapt to mind re people not expecting the same data to serialise to different bytes today vs tomorrow. And technically, that would most likely be a value not a key.\n\n> From my point of view the only requirement the library should support is... \"The protobuf-net library must be able to deserialize protobuf strings serialized by older versions.\"\n\n\"don't unexpectedly change the output\" is _also_ a key requirement. And one that can be accommodated at the same time by making it a configurable option.\n\n> but as a user it would be frustrating having to set various obscure options in order to have the library work correctly\n\nI understand your point - and sure, if this were day zero, it would be great to include this from the start, but: it wasn't, and _because_ I need to support existing users, I can't just change this blindly. I think it is a posititive change, but it needs to be done with appropriate consideration for known scenarios.\n\nI'm still trying to stabilise the CoreCLR branch, but once that is in, I'll see if I can bring these things together. But if I do: there _will_ be a configuration setting.\n\nIt makes me wonder if there's some kind of \"compatibility profile\" that could be devised - heck, I'd nuke implicit zero defaults at the same time... but I wonder if rather than setting lots of individual properties, setting some kind of `CompatilibilityOption = {version}`. That is mainly rhetorical and probably isn't very thoroughly thought through yet.\n. Bumping the major version doesn't solve the underlying problem; I have now addressed this as an **opt-in** behaviour re related issue #44 - opt-in flag available from next build\n. Yep, I still need to look at that part - and a few other things (unrelated)\nbefore I package and deploy.\nOn 26 May 2015 17:48, \"Rob Taylor\" notifications@github.com wrote:\n\n> FYI,\n> \n> It looks like nested empty arrays are still be deserialized as null.\n> \n> [Test]\n> public void InnerEmptyArrayShouldNotBeDeserializedAsNull()\n> {\n> using (MemoryStream ms = new MemoryStream())\n> {\n> var instance = new[]\n> {\n> new Test\n> {\n> tests = new int[0]\n> },\n> };\n> \n> Serializer.Serialize(ms, instance);\n> \n> ms.Flush();\n> ms.Position = 0;\n> var obj = Serializer.Deserialize<Test[]>(ms);\n> \n> Assert.That(obj[0].tests, Is.Not.Null);\n> }\n> }\n> \n> On Tue, May 26, 2015 at 4:45 PM, Rob Taylor rob.taylor.21@gmail.com\n> wrote:\n> \n> > Ah thanks very much that is exciting! Did that include the empty array\n> > serialization bug fix also - where empty arrays were being deserialized\n> > to\n> > null instead of an empty array? I kind of lumped that in together with\n> > the\n> > DateTime issue in my original pull request.\n> > \n> > It would be good to know when you intend to publish a version to nuget,\n> > I'll subscribe to the issue.\n> > \n> > Thanks for resolving this :-)\n> > \n> > On Tue, May 26, 2015 at 11:12 AM, Marc Gravell <notifications@github.com\n> > \n> > wrote:\n> > \n> > > Bumping the major version doesn't solve the underlying problem; I have\n> > > now addressed this as an _opt-in_ behaviour re related issue #44\n> > > https://github.com/mgravell/protobuf-net/issues/44 - opt-in flag\n> > > available from next build\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > <\n> > > https://github.com/mgravell/protobuf-net/pull/82#issuecomment-105476966>\n> > > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-105599639.\n. Actually, there is something you can do here **if and only if** the additional data is a direct child of the original root object. For example: if the original is:\n\n```\nFoo {\n    a = 1;\n    b = 2;\n    repeated c = 3;\n}\n```\n\nThe protobuf format is both:\n- appendable (append===merge)\n- not required to be in order\n\nThis means that you can actually drop the \"b\" part (for example) onto the wire separately from the rest, simply by appending it correctly. To append with the right headers, the easiest thing to do is to create a dummy object with just the b:\n\n```\nFooBOnly {\n    b = 2;\n}\n```\n\nNow you can:\n- serialize a Foo that doesn't include a \"b\"\n- serialize a FooBOnly with a \"b\"\n\nWhen the receiver seaerializes as Foo, it will merge both parts automatically.\n\nAny use?\n. I see you closed and reopened this; did you still need input? If so: can\nyou clarify?\nOn 30 Apr 2015 7:33 pm, \"brentww\" notifications@github.com wrote:\n\n> Reopened #83 https://github.com/mgravell/protobuf-net/issues/83.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/83#event-294357781.\n. I don't think it is a good idea to leak the actual `ioBuffer`, because that is leased from the `BufferPool` -  basically:\n- the contents might have been changed completely by another caller by the time the recpient sees it\n- it would allow the recipient to screw up someone else's `ioBuffer`\n\nI'd be fine with adding context about the position, length, etc... but the `ioBuffer`: probably not a good idea\n. I would also question the usefulness; it isn't like xml and json - most people won't have a clue how to interpret the data.\n. the only way to safely do that would be to grab the data from the `ioBuffer` _before_ adding it to the exception, so the only thing you're adding is isolated; however, protobuf is a binary format, and _in the general case_ we should not expect it to be likely to contain text\n. `ioBuffer` can be pretty huge, though - I would advise only copying (say) a max of 100 bytes either side of where it exploded (would need some min/max checks, etc); additionally, note that you should only look at most at the _known available_ bytes - anything past that point is potentially garbage and unrelated to the current problem: it would be unnecessarily confusing to report that as though it were part of the problem, when it isn't.\n\nFinally, in terms of allocation and large blocks, this isn't ideal - it kinda feels like this should be opt-in (although it is fine if the message says \"enable ShowBufferContentsInExceptions to view the data at the time of the error\", or something like that)\n. I'm confused - you've opened and closed within an hour; was this mistaken?\n. Is it possible that any thread is _changing_ the list contents at this\ntime? I suspect the problem is most likely 2 (or more) threads talking to\nthe same _instance_ - some reading (presumably serialising), and one\nwriting - perhaps doing something completely unrelated to serialization,\nlike obj.Items.Add(newItem);\n\nI can try to help, but threading issues need a lot of context, typically.\nOn 16 May 2015 10:21 pm, \"Alexey Solovyov\" notifications@github.com wrote:\n\n> Hi Marc, is there a chance that you can handle this issue, may be we can\n> discuss commercial support?\n> \n> Parallel threads try to serialize Entity with List where obj1 has inside\n> serializable List.\n> \n> We work with protobuf-net more then 1 year, current version 2.0.0.668 and\n> never had problems like that before (or we didn't notice that).\n> \n> We got serialization wrapper:\n> public static byte[] SerializeProtobuf(this object data)\n> {\n> byte[] bt = null;\n> using (System.IO.MemoryStream ms = new System.IO.MemoryStream())\n> {\n> ProtoBuf.Serializer.NonGeneric.Serialize(ms, data);\n> bt = ms.ToArray();\n> ms.Close();\n> }\n> \n> ```\n>     return bt;\n> }\n> ```\n> \n> Also, in the procedure, who is called by parallel threads, we use and\n> deserialization and serialization of the same entity type.\n> \n> All technical nuances can be supplied to you in case of your interest.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/87#issuecomment-102699378\n> .\n. Iirc this is a restriction of the universal runtime: limited reflection,\nincluding both access to non-public members. Not sure there's much I can\ndo...\nOn 16 May 2015 16:58, \"plynkus\" notifications@github.com wrote:\n\n> (Spooling up a clone here to diagnose the root cause, but filing the issue\n> before I forget to.)\n> \n> Found: Failed calls to [ProtoAfterDeserialization]-tagged methods under\n> VS2015 RC with Windows 8.1 and Windows Universal targets when tagged\n> methods are private.\n> \n> Console applications under the same toolchain still exhibit the previous\n> behavior---method invocation no matter the protection level. Migrating\n> existing code from VS2013 to the new toolchain/SDKs exposed the change here.\n> \n> A workaround for now is to change the associated methods to public.\n> Consistent behavior is of course desirable.\n> Support for private methods, as before, is better for encapsulation.\n> \n> As always, many thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/88.\n. closing this down because I don't think the WCF options are going to be supportable going forwards; long term, I think the direction this should take is: gRPC. We're moving in that direction, but I don't see benefit in trying to hack the existing tools any further.. Looks good, thanks\n. Thanks\n. Thanks - appreciated\n. iirc there were, at some point in history, errors in unity from this. It\nmight be fixed now. I'm not a unity user, so.\n\nOn 27 Dec 2016 9:39 a.m., \"Arthur-qi\" <notifications@github.com> wrote:\n\n> why not be using FEAT_SAFE?Did it run slow?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/106#issuecomment-269301591>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHRenrG7rn8Fqc4GcwucZaTb7ew1ks5rMNzIgaJpZM4FqV5P>\n> .\n>\n. Protocol buffers _at the protocol level_ doesn't define inheritance _at\nall_. Protobuf-net adds limited inheritance support, but things like\nmultiple inheritance is complex; to do that properly would require\nconsiderable design, implementation and testing, for what is an edge\nscenario - and arguably one better served by mapping to a simpler DTO model\nthat (as is the nature of DTOs) reflects the reality of the serialisation\nparadigm.\n\nThis isn't on my planned list of things to do. If someone can absorb the\ntime to properly specify, proove (i.e. that it is unambiguous, etc),\ndesign, implement, test, document and support it - I would consider a PR\nfor it.\n\nOn Wed, 11 Nov 2015 18:54 Jochen K\u00fchner notifications@github.com wrote:\n\n> Is that feature planed to be implemented? Is anyone working on this? Is\n> this possible with current protobufer protocol format?\n> \n> I also have a class wich inhertits from multiple\n> class Bbb : AbstractAaa, IHhhh\n> { }\n> and one:\n> class Ddd\n> { public IHhhh BlaBla {get;set;} }\n> \n> Where I try to serialize/deserialize class Dddd\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/107#issuecomment-155876166\n> .\n. It is in progress. Have done Dapper, have done Jil + Sigil this week,\nSE.Redis has a _huge_ PR from MS I'm working through. For protobuf-net, am\nworking through a local spike trying to get it happy. A very busy time if\nyou're a library author / contributor!\nOn 18 Nov 2015 8:19 pm, \"SapientGuardian\" notifications@github.com wrote:\n\n> I'll be needing protobuf support in dnxcore for the foreseeable future, so\n> until there's an official release I'll be maintaining my fork, at least\n> from a bugfix perspective. I think it would be a mistake to use my fork in\n> any production capacity, though I'll end up doing that myself soon.\n> c249dd1\n> https://github.com/mgravell/protobuf-net/commit/c249dd12dda506e9e9d04c7cef3159490353cfb2\n> would suggest that @mgravell https://github.com/mgravell is working on\n> a proper release.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/108#issuecomment-157851052\n> .\n. There has been an experimental rc1 build on nuget for quite some time. Now\nthat rc2 is released, I have a lot of libs to re-deploy; yes, this is on\nthe list.\n\nOn Mon, 16 May 2016 20:05 akatz0813, notifications@github.com wrote:\n\n> @mgravell https://github.com/mgravell any word on support now that RC2\n> is released?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/108#issuecomment-219515951\n. I'll be hoping to work through my list of libraries fairly soon - I\nunderstand that the ecosystem is dependent on libraries. Dapper will\nprobably be first, bit this shouldn't be far behind.\nOn 27 Jun 2016 11:54 p.m., \"akatz0813\" notifications@github.com wrote:\n\n> @mgravell https://github.com/mgravell Realistically do you have an ETA\n> or prioritization for this now that 1.0 RTM is out?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/108#issuecomment-228900172,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsLHbbaWQaslxAmmFZIq6BW_7kWftks5qQFSZgaJpZM4FuWEY\n> .\n. That is a C++ compiler issue; I am unable to advise on what may cause that\n- presumably something in some generated wrapper C++ code files? None of\n  protobuf-net is in C++ and thus none is being compiled here.\n. Thanks\n. Thanks, appreciated\n. Appreciated, thanks\n. Can you provide a concrete example of when this makes something work that didn't before? (ideally a test, but text would be fine)\n. Appreciated, thanks\n. Any chance of a translation? I can run it through Google translate, but it\noften does a less than perfect job compared to a native speaker...\n\nOn Tue, 10 Nov 2015 10:51 Shingo INADA notifications@github.com wrote:\n\n> The following compilation error came to occur from the commit 45a6f6e\n> https://github.com/mgravell/protobuf-net/commit/45a6f6e5c3183d24e27c0bcba56aa47c4d0ff2bb\n> .\n> \n> c:\\work\\protobuf-net\\Serializer.cs(87,11): error CS1502: 'ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream, object, System.Type)' \u306b\u6700\u3082\u9069\u3057\u3066\u3044\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 \u30e1\u30bd\u30c3\u30c9\u306b\u306f\u7121\u52b9\u306a\u5f15\u6570\u304c\u3044\u304f\u3064\u304b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 [C:\\work\\protobuf-net_IKVM\\protobuf-net_IKVM.csproj]\n> c:\\work\\protobuf-net\\Serializer.cs(87,62): error CS1503: \u5f15\u6570 3: 'IKVM.Reflection.Type' \u304b\u3089 'System.Type' \u306b\u5909\u63db\u3067\u304d\u307e\u305b\u3093 [C:\\work\\protobuf-net_IKVM\\protobuf-net_IKVM.csproj]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/121.\n. Yeah, that should be explicitly `System.Type` - a simple fix, and a problem\nthat would only show up in the IKVM build. I will fix when I have the\ncore-clr code in a stable state. Thanks.\n. Hmmm, yes; that looks problematic and an omission.  Will re-review the PR\nand rectify.\n\nOn Tue, 10 Nov 2015 11:11 Shingo INADA notifications@github.com wrote:\n\n> A default value ( [ default = xxx] ) is ignored from this comit\n> d55cec9\n> https://github.com/mgravell/protobuf-net/commit/d55cec946b6ad5a0e8571f00cf71f28e0da6ed31\n> \n> This behavior violates specifications of protobuf\n> https://developers.google.com/protocol-buffers/docs/proto?hl=en#optional\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/122.\n. If anyone cares to suggest what the nuspec should be here, let me know.\nNote that I'm trying to transition to a project.json-based build - this\n_might_ be a lost hope, but I'm at least going to try ;p\n\nOn 8 December 2015 at 08:57, Ben Abelshausen notifications@github.com\nwrote:\n\n> Yep, a change in the nuget should do it but it's a bit difficult for me to\n> test using OsmSharp because I have a protobuf-net dependency. Also\n> impossible to install in a fresh android project targetting\n> 'MonoAndroid,Version=v6.0'...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/124#issuecomment-162820277\n> .\n\n## \n\nRegards,\n\nMarc\n. That's a very specific build ;p I _so_ hope that there is a netstandard in\nthe future that works ;p\n\nOn 8 December 2015 at 16:27, Ben Abelshausen notifications@github.com\nwrote:\n\n> Thanks @pauldendulk https://github.com/pauldendulk, I was just replying\n> myself... [image: :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/124#issuecomment-162935785\n> .\n\n## \n\nRegards,\n\nMarc\n. Have updated master; try now\n. Works fine here (see example based on yours, below); can you provide a more complete repro of the problem?\n\n```\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nusing Newtonsoft.Json;\nusing ProtoBuf;\nusing System.Collections.Generic;\nusing System;\n\n[Serializable]\n[DataContract] // [JsonObject(MemberSerialization.OptIn)]\n[ProtoContract]\npublic class AttributableItem\n{\n    [DataMember, ProtoMember(1)]\n    public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n\n}\nstatic class Program\n{\n    static void Main()\n    {\n        var obj = new AttributableItem\n        {\n            Attributes =\n            {\n                {\"abc\", \"def\" },\n                {\"ghi\", \"jkl\" },\n            }\n        };\n        var clone = Serializer.DeepClone(obj);\n        Console.WriteLine(\"Same AttributableItem: {0}\", ReferenceEquals(clone, obj));\n        Console.WriteLine(\"Same Dictionary`2: {0}\", ReferenceEquals(clone.Attributes, obj.Attributes));\n        foreach(var pair in clone.Attributes)\n        {\n            Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n        }\n    }\n}\n```\n. Protobuf-net doesn't know about inheritance automatically. You need to\neducate it by marking the base type.\n\nAdd `[ProtoInclude(Type, n)]` for some n not already used in the base type,\nfor example:\n\n[ProtoContract]\n[ProtoInclude(typeof(ExtendedItem), 2)]\npublic class AttributableItem {...}\nOn 22 Dec 2015 8:23 am, \"QuAzI\" notifications@github.com wrote:\n\n> Looks like my mistake\n> \n> using System;\n> using System.Collections.Generic;\n> using System.Diagnostics;\n> using System.IO;\n> \n> using ProtoBuf;\n> \n> [ProtoContract]\n> public class AttributableItem\n> {\n>     [ProtoMember(1)]\n>     public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n> }\n> \n> [ProtoContract]\n> public class ExtendedItem : AttributableItem\n> {\n>     [ProtoMember(1)]\n>     public string description;\n> }\n> \n> static class Program\n> {\n>     static void Main()\n>     {\n>         var obj = new ExtendedItem\n>         {\n>             Attributes =\n>             {\n>                 {\"abc\", \"def\" },\n>                 {\"ghi\", \"jkl\" },\n>             }\n>         };\n>         obj.description = \"test\";\n> \n> ```\n>     string testFile = \"test.proto\";\n>     SerializeAsProtobuf(testFile, obj);\n>     var objCopy = DeserializeProtobuf(testFile);\n> \n>     Debug.Assert(objCopy.Attributes.Count == obj.Attributes.Count);\n>     foreach (var pair in objCopy.Attributes)\n>     {\n>         Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n>         Debug.Assert(pair.Value == obj.Attributes[pair.Key]);\n>     }\n> }\n> \n> static public void SerializeAsProtobuf(string filePath, object obj)\n> {\n>     using (FileStream fileStream = new FileStream(filePath, FileMode.OpenOrCreate))\n>     {\n>         SerializeAsProtobuf(fileStream, obj);\n>         fileStream.Close();\n>     }\n> }\n> \n> static public void SerializeAsProtobuf(Stream stream, object obj)\n> {\n>     Serializer.Serialize(stream, obj);\n> }\n> \n> static public ExtendedItem DeserializeProtobuf(string filePath)\n> {\n>     using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\n>     {\n>         ExtendedItem product = DeserializeProtobuf(fileStream);\n>         fileStream.Close();\n>         return product;\n>     }\n> }\n> \n> static public ExtendedItem DeserializeProtobuf(Stream stream)\n> {\n>     return ProtoBuf.Serializer.Deserialize<ExtendedItem>(stream);\n> }\n> ```\n> \n> }\n> \n> It isn't clear how to trace an order of fields at multiple inheritance\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/130#issuecomment-166551536\n> .\n. 1: yes\n2: in terms of the protobuf specification, each sub-type is implemented as\nan optional sub-message using that numeric identifier\n3: this is not uncommon in serialisation; compare/contrast [XmlInclude];\nthe problem is that during deserialization the only thing you usually know\nis the parent, hence it becomes necessary for the parent to know about the\nderived types\n\nOn Tue, 22 Dec 2015 09:29 QuAzI notifications@github.com wrote:\n\n> Thanks\n> What if I have several classes inherited from base class?\n> \n> I must wite something like this?\n> \n> [ProtoContract]\n> [ProtoInclude(typeof(ExtendedItem1), 2)]\n> [ProtoInclude(typeof(ExtendedItem2), 3)]\n> [ProtoInclude(typeof(ExtendedItem3), 4)]\n> public class AttributableItem {...}\n> \n> What numeric tag means in this case?\n> As a rule parents don't know about the inherited and shouldn't care of it.\n> But in this case it is a great problem.\n> There are too small examples to explain this case. Should be in\n> documentation I think\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/130#issuecomment-166565602\n> .\n. Also: [KnownType(..)] For DCS\n\nOn Tue, 22 Dec 2015 16:43 Marc Gravell marc.gravell@gmail.com wrote:\n\n> 1: yes\n> 2: in terms of the protobuf specification, each sub-type is implemented as\n> an optional sub-message using that numeric identifier\n> 3: this is not uncommon in serialisation; compare/contrast [XmlInclude];\n> the problem is that during deserialization the only thing you usually know\n> is the parent, hence it becomes necessary for the parent to know about the\n> derived types\n> \n> On Tue, 22 Dec 2015 09:29 QuAzI notifications@github.com wrote:\n> \n> > Thanks\n> > What if I have several classes inherited from base class?\n> > \n> > I must wite something like this?\n> > \n> > [ProtoContract]\n> > [ProtoInclude(typeof(ExtendedItem1), 2)]\n> > [ProtoInclude(typeof(ExtendedItem2), 3)]\n> > [ProtoInclude(typeof(ExtendedItem3), 4)]\n> > public class AttributableItem {...}\n> > \n> > What numeric tag means in this case?\n> > As a rule parents don't know about the inherited and shouldn't care of\n> > it. But in this case it is a great problem.\n> > There are too small examples to explain this case. Should be in\n> > documentation I think\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/130#issuecomment-166565602\n> > .\n. Thank you - I will look at your full example when I get a moment.\nOn 23 Dec 2015 7:59 a.m., \"QuAzI\" notifications@github.com wrote:\n\n> Here man told that RuntimeTypeModel.Default.Add(typeof(type),\n> true).AddSubType(tag, subType)\n> is equivalent to what the attribute-processing code does\n> \n> https://stackoverflow.com/questions/11869467/protobuf-net-how-to-handle-inheritance-without-protoinclude\n> \n> I try to write static constructor for register child\n> \n> ```\n> static ExtendedItem1()\n> {\n>     ProtoBuf.Meta.RuntimeTypeModel\n>         .Default\n>         .Add(typeof(AttributableItem), true)\n>         .AddSubType(typeof(ExtendedItem1).FullName.GetHashCode(), typeof(ExtendedItem1));\n> }\n> ```\n> \n> And it serialized OK. I see all fields in file with small differences.\n> \n> [image: 2015-12-23_10-54-21_jn2ybe0u]\n> https://cloud.githubusercontent.com/assets/1897605/11972904/de030ff2-a963-11e5-8d1a-e5dc1436690f.png\n> \n> But on deserialisation fired \"Unable to cast object of type\n> 'AttributableItem' to type 'ExtendedItem1'\". Why?\n> \n> Full example\n> \n> using System;\n> using System.Collections.Generic;\n> using System.Diagnostics;\n> using System.IO;\n> \n> using ProtoBuf;\n> \n> [ProtoContract]\n> public class AttributableItem\n> {\n>     [ProtoMember(1)]\n>     public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n> }\n> \n> [ProtoContract]\n> public class ExtendedItem1 : AttributableItem\n> {\n>     static ExtendedItem1()\n>     {\n>         ProtoBuf.Meta.RuntimeTypeModel\n>             .Default\n>             .Add(typeof(AttributableItem), true)\n>             .AddSubType(typeof(ExtendedItem1).FullName.GetHashCode(), typeof(ExtendedItem1));\n>     }\n> \n> ```\n> [ProtoMember(1)]\n> public string description;\n> ```\n> \n> }\n> \n> static class Program\n> {\n>     static void Main()\n>     {\n>         var obj = new ExtendedItem1\n>         {\n>             Attributes =\n>             {\n>                 {\"abc\", \"def\" },\n>                 {\"ghi\", \"jkl\" },\n>             }\n>         };\n>         obj.description = \"test\";\n> \n> ```\n>     string testFile = \"test.proto\";\n>     SerializeAsProtobuf(testFile, obj);\n>     var objCopy = DeserializeProtobuf(testFile);\n> \n>     Debug.Assert(objCopy.Attributes.Count == obj.Attributes.Count);\n>     foreach (var pair in objCopy.Attributes)\n>     {\n>         Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n>         Debug.Assert(pair.Value == obj.Attributes[pair.Key]);\n>     }\n> }\n> \n> static public void SerializeAsProtobuf(string filePath, object obj)\n> {\n>     using (FileStream fileStream = new FileStream(filePath, FileMode.OpenOrCreate))\n>     {\n>         SerializeAsProtobuf(fileStream, obj);\n>         fileStream.Close();\n>     }\n> }\n> \n> static public void SerializeAsProtobuf(Stream stream, object obj)\n> {\n>     Serializer.Serialize(stream, obj);\n> }\n> \n> static public ExtendedItem1 DeserializeProtobuf(string filePath)\n> {\n>     using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\n>     {\n>         ExtendedItem1 product = DeserializeProtobuf(fileStream);\n>         fileStream.Close();\n>         return product;\n>     }\n> }\n> \n> static public ExtendedItem1 DeserializeProtobuf(Stream stream)\n> {\n>     return ProtoBuf.Serializer.Deserialize<ExtendedItem1>(stream);\n> }\n> ```\n> \n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/130#issuecomment-166830005\n> .\n. thanks; wow, it took me a while to close that down, sorry; I fail. I think we could do this; it would need to be a different package,\nobviously. The really awkward thing to sip is the tools that go _along_\nwith that. I'm struggling for good ways of deploying those.\n\nOn 7 January 2016 at 23:18, Stephan Dilly notifications@github.com wrote:\n\n> Would it be possible to provide the precompile binaries with the nuget\n> package too ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/132.\n\n## \n\nRegards,\n\nMarc\n. The `false` in `Add(Type, bool)` says \"don't process anything yourself; I'm going to tell you what to do, explicitly\". Hence, you need to tell it about the default value yourself in this case. In code:\n\n```\n    var typeMeta = RuntimeTypeModel.Default.Add(typeof(Foo), false);\n    typeMeta.AddField(1, \"Bar\").DefaultValue = 0;\n```\n\n(I only introduced `typeMeta` in this example because you probably want to add multiple fields)\n\nNote: if you are using C# 6:\n\n```\n    typeMeta.AddField(1, nameof(Foo.Bar)).DefaultValue = 0;\n```\n. Woohoo! Sorted before I even wake up; cheers. Very minor point, but that\nisn't actually \"boxing\", but... either way: sorted.\n\nOn 11 January 2016 at 07:19, Andrey notifications@github.com wrote:\n\n> Closed #135 https://github.com/mgravell/protobuf-net/issues/135.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/135#event-510783841.\n\n## \n\nRegards,\n\nMarc\n. protobuf-net is very heavy on the meta-programming. I haven't explicitly\ntested it with ILMerge, but it wouldn't amaze me if there were problems.\nThe core-only build should work fine, but then you'd have to use\npre-generation, which is complex.\n\nIf we want it to work cleanly (supported etc) with ILMerge, then it would\nneed someone to take the time to explicitly test, identify and resolve and\nissues. I'm \"up\" for that, but I can't give any specific guarantees on when\nI can find the required time; for all I know, the changes required could be\ntrivial, or could be extensive...\n\nOn 13 January 2016 at 21:52, Meirion Hughes notifications@github.com\nwrote:\n\n> Try Costura https://github.com/Fody/Costura. I've bundled protobuf with\n> it. I've not tried the very latest though.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/136#issuecomment-171448646\n> .\n\n## \n\nRegards,\n\nMarc\n. If I was doing it all over again, I would have done it much simpler - I\nmight still add an option to make it simpler! but:\n\nhttps://github.com/mgravell/protobuf-net/blob/master/Tools/bcl.proto\n\nbasically, it chooses the correct scale to guarantee the value.\n\nOn 5 February 2016 at 19:46, efficks notifications@github.com wrote:\n\n> Hi,\n> This is not a real issue but I don't know where to post my question\n> I'm reading protobuf encoded messages generated in Net I'm reading it with\n> a Python program How the DataTime is encoded I can't change the message\n> emitter to send an EPOCH or string representation How do I decode the\n> datetime representation?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/140.\n\n## \n\nRegards,\n\nMarc\n. Thanks\n. Protobuf-net needs to know _numbers_ for each field you want to serialize. There are ways to make this semi-automated, but the easiest way would be to explicitly mark them:\n\n```\n[DataMember(Order=1)]\npublic string ABC {get;set;}\n\n[DataMember(Order=2)]\npublic int QWE {get;set;}\n```\n\nThat should fix it.\n. Well, in this scenario the first thing I'd note is that using implementation details (such as `Microsoft.Crm.Sdk.Entity`) in serialization layers is not a great idea - it creates a huge number of traps. Frankly, if serialization of an existing object model becomes non-trivial, the best approach is not \"fight the serializer\" but rather \"create a simple DTO that fits the serializer perfectly\"\n\nAs it happens, protobuf-net does have things like `ImplicitFields` that _can_ help in some of these scenarios, but it only looks at the _declaring_ type, not base-types - so it wouldn't pull from `Entity`. protobuf-net also has the ability to configure types _manually_, but that would require you adding code to your app-init. But to give an example broadly similar to yours:\n\n```\nusing ProtoBuf;\nusing ProtoBuf.Meta;\nusing System;\nusing System.Runtime.Serialization;\n\nclass Program {\n    static void Main() {\n        RuntimeTypeModel.Default.Add(typeof(MyObj), false).Add(\"Foo\", \"Bar\", \"Name\");\n        var obj = new MyObj { Name = \"abc\", Foo = 123, Bar = \"def\" };\n        var clone = Serializer.DeepClone(obj);\n        Console.WriteLine(obj);\n        Console.WriteLine(clone);\n    }\n}\n[DataContract] public class MyObj : Entity {\n    [DataMember] public string Name { get; set; }\n    public override string ToString() => $\"{Name}, {Foo}, {Bar}\";\n}\n[DataContract] public class Entity {\n    [DataMember] public int Foo { get; set; }\n    [DataMember] public string Bar { get; set; }\n}\n```\n\nNote here that the order of the members in `Add` defines their wire identity - so `Foo` is 1, `Bar` is 2, etc. Depending on your C# version, you may also wish to look at `nameof` rather than hard-coded strings:\n\n```\n        RuntimeTypeModel.Default.Add(typeof(MyObj), false).Add(\n            nameof(Entity.Foo), nameof(Entity.Bar), nameof(MyObj.Name));\n```\n\nIs any of that useful?\n. Microsoft.Xrm.Sdk.AttributeCollection is basically a\nDictionary<string,object>, which protobuf-net is going to _hate_. The\nprotobuf format is designed to serialize models with a well-known shape /\nformat - which \"object\" _isn't_. There is no good way to handle a\nstring-object map in protobuf; there are some bad ways, but that depends a\nlot on what the actual values are in your scenario.\n. The problem isn't the map - protobuf-net would happily support\n`Dictionary<string,Project>`, to use the example from your links; it is the\n\"object\". Protobuf wants to know _what it is deserializing_. So again: what\nare the actual values?\n\nOn 7 March 2016 at 09:14, rebulanyum notifications@github.com wrote:\n\n> Well it's just a collection with items of type KeyValuePair<string,\n> object>. Right? And KeyValuePair is just a struct with 2 properties: Key\n> and Value. So what should I do about it?\n> \n> And I think, on the contrary, Google.ProtocolBuffers supports map fields\n> with version 3\n> https://developers.google.com/protocol-buffers/docs/reference/proto3-spec#map_field\n> and even with version 2\n> https://developers.google.com/protocol-buffers/docs/reference/proto2-spec#map_field\n> .\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/146#issuecomment-193172891\n> .\n\n## \n\nRegards,\n\nMarc\n. > But even strings are not serializing...\n\nThat is expected. It knows that in the general case it doesn't know how to\nwork with \"object\", so it isn't happy to start trying, unless it has been\nspecifically configured to treat it as a string-string map. But\nfundamentally, I would again simply suggest that anything based on this\nmuch implementation details rather than data details _isn't a good choice\nfor serialization_. The preference here (IMO) would be to create a DTO\nmodel specifically intended for serialization, that represents the _data_\nyou want to serialize, rather than the active object model you happen to be\nusing at the timel\n\nOn 7 March 2016 at 14:32, rebulanyum notifications@github.com wrote:\n\n> Oh, I'm sorry for my bad understanding...\n> \n> The \"object\" is sometimes string, sometimes\n> Microsoft.Xrm.Sdk.EntityReference. It's not a single fixed type. But even\n> strings are not serializing...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/146#issuecomment-193272526\n> .\n\n## \n\nRegards,\n\nMarc\n. closing as this is not going to be compatible with the massively refactored tooling; if there are good ways of adding this to the new tooling, I'm open to options, but it would need to not break simple \"dotnet build\" usage. should be here in 2.3.0; preview of current state is here: https://protogen.marcgravell.com/\r\n\r\n(only a web site for convenience; long term we'd hope to get build tools too - the entire parser / generator pipe is being rewritten). it will be closed in a very few days - I'm about to release 2.3.0 which\nprovides this. Note that comamn-line / IDE build tools will be part of\n2.3.1 (or similar); for 2.3.0 the only provision is\nhttps://protogen.marcgravell.com (which is in the \"parser\" branch if you\nwant to self host)\n\nOn 6 Jun 2017 9:40 p.m., \"Edward Brey\" <notifications@github.com> wrote:\n\n> Should this issue still be open? I was encouraged at first to think that\n> proto3 support was available already... only to find out it isn't.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/150#issuecomment-306610173>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsBIahMDhtWCXON413C_ApZuxc9xNks5sBbkfgaJpZM4H56El>\n> .\n>\n. Which bits do you need? If you're just talking about the 2.3 language\ntools: then ... *voila*: https://protogen.marcgravell.com/ - it is done!\n\nIf you mean runtime support for some of the new pieces (Map<TKey,TValue>,\nTimestamp, Duration, etc); then yes, I expect that to be released in the\nnext few days. Just a few pieces to tidy up. Are there any specific pieces\nyou need?\n\nOn 11 June 2017 at 21:18, Andrew Sampson <notifications@github.com> wrote:\n\n> Is 2.3.0 likely to hit this week? Sachiel\n> <https://github.com/RainwayApp/sachiel-net> makes heavy use of this\n> library and 3.0 support would be fantastic.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/150#issuecomment-307654072>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsFWGMbPTolZThKATxgXH0BGyXKoPks5sDEutgaJpZM4H56El>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. oddly, no not really. You see, there aren't any binary serialization format\nchanges between proto2 and proto3, so you can already do everything. The\nDSL changes just make it more elegant in some cases if you're using .proto\nschemas. Which has never been a hard requirement in protobuf-net. The\nruntime in proto3 for protobuf-net aren't huge - the biggest things are the\naddition of Duration / Timestamp support and cleaner Map handling, but:\nthey're done. I haven't started the attribs=>proto3 work; proto3 is\nactually a subset of proto2, not a superset as you might imagine. The\nchallenge for me will be to see what I can live without :)\n\nOn 12 Jun 2017 12:57 a.m., \"Andrew Sampson\" <notifications@github.com>\nwrote:\n\nMostly I'm just referring to the ability to serialize/deseralize proto3\ncompliant buffers along with generating a .proto schema from decorated\nmodels. I suppose this mostly has to do with run time?\n\nLooking forward to it!\n\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/150#issuecomment-307665496>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsMozgDAKRHeAb6CtBUe_ek5JsQFrks5sDH8FgaJpZM4H56El>\n.\n. Fair point. The changes to support this are fairly trivial - we've already\ndone the same with \"dapper\". But yes: definitely needs a code change.\nOn 8 Apr 2016 8:12 am, \"HellBrick\" notifications@github.com wrote:\n\n> It seems protobuf-net doesn't support C#6 read-only properties. Here's a\n> test to illustrate the problem:\n> \n> ```\n> [TestFixture]\n> public class ReadOnlyPropertyBugTest\n> {\n>     [Test]\n>     public void StructIsRoundTripped()\n>     {\n>         CustomStruct value = new CustomStruct( \"I'm a description ^_^\", DateTime.UtcNow );\n> \n>         using ( MemoryStream memory = new MemoryStream() )\n>         {\n>             Serializer.Serialize( memory, value );\n>             memory.Position = 0;\n>             CustomStruct deserialized = Serializer.Deserialize<CustomStruct>( memory );\n>             deserialized.Should().Be( value );\n>         }\n>     }\n> \n>     [ProtoContract]\n>     private struct CustomStruct : IEquatable<CustomStruct>\n>     {\n>         public CustomStruct( string description, DateTime importantDate )\n>         {\n>             Description = description;\n>             ImportantDate = importantDate;\n>         }\n> \n>         [ProtoMember( 1 )]\n>         public string Description { get; }\n> \n>         [ProtoMember( 2 )]\n>         public DateTime ImportantDate { get; }\n> \n>         public override string ToString() => $\"[{ImportantDate}] {Description}\";            public bool Equals( CustomStruct other ) => Description == other.Description && ImportantDate == other.ImportantDate;            public override bool Equals( object obj ) => obj is CustomStruct && Equals( (CustomStruct) obj );        }    }\n> ```\n> \n> It fails with the following exception:\n> \n> System.InvalidOperationException : Cannot apply changes to property Utils.Test.Events.ReadOnlyPropertyBugTest+CustomStruct.Description\n>    at ProtoBuf.Serializers.PropertyDecorator.SanityCheck(TypeModel model, PropertyInfo property, IProtoSerializer tail, Boolean& writeValue, Boolean nonPublic, Boolean allowInternal) in c:\\Dev\\protobuf-net\\protobuf-net\\Serializers\\PropertyDecorator.cs:line 46\n>    at ProtoBuf.Serializers.PropertyDecorator..ctor(TypeModel model, Type forType, PropertyInfo property, IProtoSerializer tail) in c:\\Dev\\protobuf-net\\protobuf-net\\Serializers\\PropertyDecorator.cs:line 32\n>    at ProtoBuf.Meta.ValueMember.BuildSerializer() in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\ValueMember.cs:line 375\n>    at ProtoBuf.Meta.MetaType.BuildSerializer() in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\MetaType.cs:line 408\n>    at ProtoBuf.Meta.MetaType.get_Serializer() in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\MetaType.cs:line 384\n>    at ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest) in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\RuntimeTypeModel.cs:line 752\n>    at ProtoBuf.Meta.TypeModel.SerializeCore(ProtoWriter writer, Object value) in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\TypeModel.cs:line 192\n>    at ProtoBuf.Meta.TypeModel.Serialize(Stream dest, Object value, SerializationContext context) in c:\\Dev\\protobuf-net\\protobuf-net\\Meta\\TypeModel.cs:line 218\n>    at ProtoBuf.Serializer.Serialize[T](Stream destination, T instance) in c:\\Dev\\protobuf-net\\protobuf-net\\Serializer.cs:line 89\n> \n> It should be quite possible to fix this, because there's already support\n> for read-only fields. If I change the property declarations like this, the\n> test is going to pass:\n> \n> ```\n>         [ProtoMember( 1 )]\n>         private readonly string _description;\n>         public string Description => _description;\n> \n>         [ProtoMember( 2 )]\n>         private readonly DateTime _importantDate;\n>         public DateTime ImportantDate => _importantDate;\n> ```\n> \n> It seems what's missing is a way to leverage this mechanism by recognizing\n> the generated backing fields and pulling the [ProtoXXX] attributes from\n> the corresponding properties. I wouldn't mind doing it myself and sending\n> you a PR, but I'd like to hear your thoughts on this matter first. (And if\n> you can give any tips on what parts of the code base are responsible for\n> this, this would be very helpful as well.)\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/152\n. The protobuf specification simply has no mechanism in the format to express\na null. I don't think this can be fixed as such. It is a protocol\nlimitation.\nOn 27 May 2016 3:38 pm, \"gabriele-ricci-kyklos\" notifications@github.com\nwrote:\n\n> We use your library to increase performance in tcp communication between\n> our softwares, and it's working wvery well. But today I encountered a very\n> strange situation.\n> I tried to serialize a container class I had modified adding a new\n> collection. I got this exception:\n> \n> System.NullReferenceException: Object reference not set to an instance of an object.\n>    in ProtoBuf.Serializers.ArrayDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.PropertyDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TypeSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest)\n>    in ProtoBuf.ProtoWriter.WriteObject(Object value, Int32 key, ProtoWriter writer)\n>    in ProtoBuf.Serializers.SubItemSerializer.ProtoBuf.Serializers.IProtoSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TagDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.PropertyDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TypeSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest)\n>    in ProtoBuf.ProtoWriter.WriteRecursionSafeObject(Object value, Int32 key, ProtoWriter writer)\n>    in ProtoBuf.Serializers.SubItemSerializer.ProtoBuf.Serializers.IProtoSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TagDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TypeSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest)\n>    in ProtoBuf.ProtoWriter.WriteRecursionSafeObject(Object value, Int32 key, ProtoWriter writer)\n>    in ProtoBuf.Serializers.SubItemSerializer.ProtoBuf.Serializers.IProtoSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TagDecorator.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Serializers.TypeSerializer.Write(Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest)\n>    in ProtoBuf.Meta.TypeModel.SerializeCore(ProtoWriter writer, Object value)\n>    in ProtoBuf.Meta.TypeModel.Serialize(Stream dest, Object value, SerializationContext context)\n>    in ProtoBuf.Meta.TypeModel.Serialize(Stream dest, Object value)\n> \n> I checked the definitions ten times and even if all seemed right I still\n> kept getting the exception. So I downloaded the source code and I manually\n> debugged the method ProtoBuf.Serializers.ArrayDecorator.Write(Object\n> value, ProtoWriter dest)\n> finding that there actually is a NullReferenceException throwing at line\n> 157:\n> \n> if (checkForNull && obj == null) { throw new NullReferenceException(); }\n> \n> The exception is thrown because obj is the actual item of the array. Is\n> there a fix that you can do to prevent this behaviour?\n> \n> Please also notice: google/protobuf#827\n> https://github.com/google/protobuf/issues/827\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/156, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsNQhHvGevsKPtz2sNQGwzEJeW2e1ks5qFwHwgaJpZM4IokDn\n> .\n. I have not yet updated it to current RCs.\n\nOn Thu, 9 Jun 2016 10:50 William Davis, notifications@github.com wrote:\n\n> It appears that the project supports .NET Core 4.5 (is that even a thing?)\n> But does support .NET Core RC1\n> \n> [image: image]\n> https://cloud.githubusercontent.com/assets/2580575/15925646/f9a27ea6-2e05-11e6-9745-1acdaa04714b.png\n> \n> Errors in C:\\users\\willi\\documents\\visual studio\n> 2015\\Projects\\ConsoleApp1\\src\\ConsoleApp1\\project.json\n> \n> Package protobuf-net 2.0.0.668 is not compatible with netcoreapp1.0 (.NETCoreApp,Version=v1.0). Package protobuf-net\n> \n> 2.0.0.668 supports:\n> - net20 (.NETFramework,Version=v2.0)\n> - net20-cf (.NETFramework,Version=v2.0,Profile=CompactFramework)\n> - net30 (.NETFramework,Version=v3.0)\n> - net35 (.NETFramework,Version=v3.5)\n> - net35-cf (.NETFramework,Version=v3.5,Profile=CompactFramework)\n> - net40 (.NETFramework,Version=v4.0)\n> - net40-cf (.NETFramework,Version=v4.0,Profile=CompactFramework)\n>   _\\- netcore45 (.NETCore,Version=v4.5)_\n> - portable-net40+sl4+win8+wp7 (.NETPortable,Version=v0.0,Profile=Profile2)\n> - sl3-wp (Silverlight,Version=v3.0,Profile=WindowsPhone)\n> - sl4 (Silverlight,Version=v4.0)\n> - sl4-wp71 (Silverlight,Version=v4.0,Profile=WindowsPhone71)\n> - wp8 (WindowsPhone,Version=v8.0)\n>   _One or more packages are incompatible with .NETCoreApp,Version=v1.0._\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/159, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsNy0YQqiae1rDG98J0eyj8ONvOqzks5qJ-HfgaJpZM4IxzXo\n> .\n. `Extensible.GetValue`; for example:\nhttp://stackoverflow.com/questions/2218793/how-to-use-protobuf-net-extensions\n\nOn 13 June 2016 at 11:34, LazyPlanet notifications@github.com wrote:\n\n> Hey, I want to use custom options?\n> Does not support it?\n> Thank u.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/160#issuecomment-225545743,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsA3KTmcUOAc-eaRa12Fsxn-z2JINks5qLTIkgaJpZM4Iy-TP\n> .\n\n## \n\nRegards,\n\nMarc\n. Dammit, I hate the Uri type; craziness ensues every time. Suggestion: just\nsend a string?\n\nOn 13 June 2016 at 10:07, Ivan Demchuk notifications@github.com wrote:\n\n> Serialization of relative URL results in exception:\n> \n> An exception of type 'System.InvalidOperationException' occurred in System.dll but was not handled in user code\n> Additional information: This operation is not supported for a relative URI.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/162, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsBXfdPCqMqmdgfOU93Q8uZjAEJ3mks5qLR3jgaJpZM4I0IM2\n> .\n\n## \n\nRegards,\n\nMarc\n. Very kindly fixed via PR. Will be included next deploy.. Are you talking about the collection accessor? It is pretty rare and\nunusual for collection accessors to have setters - and frankly, that isn't\nhow you're meant to use them. I'm not sure how implementing this would\nimprove the general case, but you're welcome to change the xslt locally\n(just drop a modified csharp.xslt next to the generator, and it will use it)\n\nOn Sat, 18 Jun 2016 07:04 LazyPlanet, notifications@github.com wrote:\n\n> When I write proto file like this:\n> message Material {\n> optional int32 m = 1;\n> }\n> message Forge{\n> repeated Material materials = 1;\n> }\n> \n> And I want to use Reflection to set a Property with type as follow:\n> `Forge forge = new Forge ();\n> PropertyInfo pi = forge.GetType().GetProperty(\"materials \");\n> Object instance = Activator.CreateInstance(property.ProtoperyType);\n> IList list = (IList) instance;\n> \n> Material ma = new Material();\n> ma.m = 10;\n> list.Add(ma);\n> \n> pi.SetValue(forge, list, null);`\n> \n> It asserts...For code generated is \"readonly\" and has not \"set\" function...\n> I do not know why repeated items generated like that.\n> Thank u.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/164, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsL1pIKP51YtnnMn969iVZUDQHuFwks5qM4p7gaJpZM4I44UG\n> .\n. Protobuf-net doesn't support custom options as attributes, and the nature\nof partial classes doesn't make it convenient for them either.\n\nOn Sat, 18 Jun 2016 09:53 LazyPlanet, notifications@github.com wrote:\n\n> Thank u, It works. I have another mix about custom options :\n> \n> message person {\n> option (my_message_option) = true;\n> \n> optional string firstname = 1 [(my_field_option) = 42];\n> optional string lastname = 2 [(my_field_option) = 12];\n> optional int age = 3;\n> }\n> I want to generate:\n> \n> [ProtoContract, MyMessageOption(true)]\n> public class Person\n> {\n> [ProtoMember(1), MyFieldOption(42)]\n> public string Firstname;\n> \n> [ProtoMember(2), MyFieldOption(12)]\n> public string Firstname;\n> \n> [ProtoMember(3)]\n> public string Firstname;\n> \n> }\n> \n> How can i do that, does it support that ? and I have seen this article as\n> below:\n> \n> http://stackoverflow.com/questions/5458477/generate-c-sharp-from-proto-files-and-vice-versa-interpreting-custom-options\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/164#issuecomment-226930313,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsLbaKztOEAHffn7ZsI1y-mQPyz1Jks5qM7IDgaJpZM4I44UG\n> .\n. it looks like this already got fixed, but merging anyway to preserve credit! it is appreciated. It is very odd that it is doing a stack dive here, but I can look. Can you\ntell me : is there an Add method here? And is there an indexer (this[int\nindex])? I need to see the signatures because that is part of the signal it\nuses for determining the inner type.\nOn 3 Jul 2016 6:31 a.m., \"jhimes144\" notifications@github.com wrote:\n\n> I encountered a stackoverflow exception while serializing an object who's\n> purpose is to convey a tree structure. The object implements IEnumerable\n> and the enumerator implementation returns the object's children, which\n> happen to be the same type as the parent object... thus it appears\n> protobuffers net is scanning that implementation, even though its the same\n> type, infinite amount of times. This issue isn't critical for me as I can\n> conceive a workaround, but I'd feel sorry for the next guy who hits this\n> issue.\n> \n> ```\n> public class TreeObject\n> {\n> protected List<TreeObject> _children =\n>     new List<TreeObject>();\n> \n>     public virtual IEnumerator GetEnumerator()\n>     {\n>         return this._children.GetEnumerator();\n>     }\n> }\n> ```\n> \n> ^ Where the this._children is an enumeration of the same type.\n> \n> The stack trace is infinite calls of: TypeModel.GetListItemType\n> \n> It took me 2 hours to figure out the cause of this problem, and I was\n> furious because my Visual Studio was hanging for about 5 minutes every time\n> I hit the exception. Let me know if you need further information.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/167, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsHAtlUstyL60Yw755IduaebduW3Kks5qR0kZgaJpZM4JDzrZ\n> .\n. protobuf-net isn't going to be interested in unmarked private fields unless\nit has good cause to do so. The code in the example you have provide simply\nfails with:\n\nSystem.InvalidOperationException: Type is not expected, and no contract can\nbe inferred: TreeObject\n\nI am very interested in what is happening here, and want to fix it (I'm in\nthe process of doing core-clr changes, so it is a good time to fix it), but\nI need a minimal repro to ensure that I'm investigating the correct\nproblem. It doesn't need to be your actual code, but it should ideally\nillustrate the same problem.\n\nIs there any chance you can provide a minimal repro?\n\nOn 3 July 2016 at 10:13, jhimes144 notifications@github.com wrote:\n\n> @mgravell https://github.com/mgravell Yes I took a quick look at the\n> source to acquaint myself. The code for the TreeObject class does not make\n> use of Add neither does it have an indexer. As you probably already knew\n> the _children field does have an add method and indexer. If you'd like I\n> can attempt to create an example project to recreate the issue. If I can't\n> produce an example project I can provide you with a private message\n> containing code from an old commit that produces the problem.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/167#issuecomment-230143553,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsJGI6C_pK2jIxHYbv1M0osfbGb3kks5qR30lgaJpZM4JDzrZ\n> .\n\n## \n\nRegards,\n\nMarc\n. I missed the follow-up reply - entirely my mistake. Will look today. Thanks\nfor providing a repro.\nOn 8 Jul 2016 6:48 a.m., \"jhimes144\" notifications@github.com wrote:\n\n> Any news on the bug? My team is actually very much relying on the fact\n> that our implementation has this IEnumerable interface. I know your project\n> is open source and you probably have a life outside of this, let me know\n> where I can donate as well.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/167#issuecomment-231280308,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsCQvDVkArBqa9fmpblCNUOZX7jLuks5qTeSWgaJpZM4JDzrZ\n> .\n. K; I've fixed the library to stop it exploding, but the fundamental problem here is that a type (to protobuf-net) can either be a leaf or a list, not both; in being enumerable of itself, it tries to be both. The code isn't going to like the \"list\" style (it ... just doesn't parse), so it now reverts to \"leaf\". This will, however, mean that to get this to behave as you expect, you will need to still expose the downstream tree; this could be done by:\n\n```\n[ProtoMember(3)] // or whatever\nprotected List<TreeObject> _children = \n```\n. Note: to fix this using the existing library, you should be able to do:\n\n```\n[ProtoContract(IgnoreListHandling = true)]\nclass Problematic : IEnumerable\n{\n    [ProtoMember(3)] // or whatever\n    protected List<TreeObject> _children = \n```\n\nhere the `IgnoreListHandling` is checked **before** the code that is currently causing it to explode.\n. The problem here is that it grarually becomes prohibitively and\ndisproportionately time consuming to support older runtimes. For context,\nMS .NET 4.51 support **ended over a year ago** (\nhttps://blogs.msdn.microsoft.com/dotnet/2014/08/07/moving-to-the-net-framework-4-5-2/\n).\n\nThis is especially challenging given the changes to the build process etc.\nWhich needs *another* overhaul for the csproj changes, but that's another\nstory.\n\nThe long and short, then, will be:\n\n- if I do the csproj changes (imminent) and the old versions \"just work\"\n(meaning: fall into place without me going crazy), then great: I'll include\nthem\n- otherwise, if someone can figure out what the csproj and build changes\nare to make it successfully target those versions without causing problems,\nthen a PR will be gratefully received and merged\n\nHistorically I have tried to consider back-level - heck, it even used to\ncompile on C#1.2 (.Net 1.1), and might still do so! But: there comes a time\nwhen it isn't the best use of my time to try to do so.\n\nI also have concerns that continuing to support these very very old\nruntimes is me being an \"enabler\" when what I should actually be doing is\nadvocating for you to move to an up to date framework.\n\nOn 27 Jan 2017 5:32 p.m., \"Artem Kravchenko\" <notifications@github.com>\nwrote:\n\nThe same problem (.NET 3.5)\n\nCould not install package 'protobuf-net 2.1.0'. You are trying to\ninstall this package\ninto a project that targets '.NETFramework,Version=v3.5', but the\npackage does not\ncontain any assembly references or content files that are compatible with that\nframework. For more information, contact the package author.\n\n\u2014\nYou are receiving this because you modified the open/close state.\n\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/168#issuecomment-275723766>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsKa5y67uhEO_UWy-1tekDHBGMY5Cks5rWioSgaJpZM4JJDFA>\n.\n. Well that's odd. I'll try to setup a minimal repro here.\nOn 14 Jul 2016 2:26 pm, \"pantonis\" notifications@github.com wrote:\n\n> Hi,\n> \n> I have an asp.net core application. I referenced protobuf-net 2.1.0\n> Project builds fine\n> \n> I have the following line of code\n> \n> And gives the following exception:\n> \n> An unhandled exception occurred while processing the request.\n> \n> FileLoadException: Could not load file or assembly 'protobuf-net, Version=2.1.0.0, Culture=neutral, PublicKeyToken=257b51d87d2e4d67' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\n> GetProto in HomeController.cs, line 17\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/171, or mute the thread\n> https://github.com/notifications/unsubscribe/AABDsFNRq5k10KuqS1bDXsH9yyxIgBwUks5qVjj_gaJpZM4JMbrK\n> .\n. So I set up a minimal asp.net core site, used `install-package protobuf-net` (it picked up 2.1.0), added some protobuf-net code, and... it simply worked. Cannot repro the issue. Please can you give more context about what you're doing. In particular, if you are using any indirect tooling (things that reference protobuf-net), check that either they have been updated, or that you have an assembly binding redirect (which should be added automatically when you install from nuget).\n\nFor completeness, here's the code I added to the `/Home/About` route of the default asp.net core app:\n\n```\n    [ProtoContract]\n    public class Foo\n    {\n        [ProtoMember(1)]\n        public string Bar { get; set; }\n    }\n    public IActionResult About()\n    {\n        using (var ms = new MemoryStream())\n        {\n            Serializer.Serialize(ms, new Foo { Bar = \"hello world\" });\n            ArraySegment<byte> buffer;\n            if (!ms.TryGetBuffer(out buffer)) throw new InvalidOperationException();\n\n            ViewData[\"Message\"] = BitConverter.ToString(\n                buffer.Array, buffer.Offset, buffer.Count);\n        }\n        return View();\n    }\n```\n\nand here's the PMC:\n\n```\nPM> install-package protobuf-net\n  GET https://api.nuget.org/v3/registration1-gz/protobuf-net/index.json\n  OK https://api.nuget.org/v3/registration1-gz/protobuf-net/index.json 136ms\nRetrieving package 'protobuf-net 2.1.0' from 'nuget.org'.\n  GET https://api.nuget.org/v3-flatcontainer/protobuf-net/2.1.0/protobuf-net.2.1.0.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/protobuf-net/2.1.0/protobuf-net.2.1.0.nupkg 459ms\nInstalling protobuf-net 2.1.0.\nInstalling NuGet package protobuf-net.2.1.0.\nSuccessfully installed 'protobuf-net 2.1.0' to WebApplication1\nExecuting nuget actions took 1.39 sec\nTime Elapsed: 00:00:03.0723974\n```\n. Actually, I'd used core-clr by mistake, but doing the same thing in asp.net core using .net framework also worked perfectly; minor tweak to the test code:\n\n```\n    public IActionResult About()\n    {\n        using (var ms = new MemoryStream())\n        {\n            Serializer.Serialize(ms, new Foo { Bar = \"hello world\" });\n\n            ViewData[\"Message\"] = BitConverter.ToString(\n                ms.GetBuffer(), 0, (int)ms.Length);\n        }\n        return View();\n    }\n```\n\n(`TryGetBuffer` vs `GetBuffer()`)\n\nStill cannot repro.\n. Ah, k; an assembly binding redirect should also fix that.  I don't know if it has changed in the latest tooling, but app.config (not web.config) used to be the home for this: http://blog.rytmis.net/2016/03/29/asp-net-core-and-assembly-binding-redirects/\n. Inherit from Extensible. Add members for your 1 and 2. The rest should be\nstored opaquely without you needing to know anything about them.\n\nSo:\n\n```\n[ProtoContract] class Foo : Extensible {\n    [ProtoMember(1)] public string X {...}\n    [ProtoMember(2)] public string Y {...}\n\n}\n```\n\nOn Tue, 26 Jul 2016 15:57 Alexander Lutz, notifications@github.com wrote:\n\n> Maybe it is an stupid question but I couldn't find an solution.\n> \n> I've got an byte[] of serialized data and I know that first & second proto\n> members in it are strings. And I need to change only that members -\n> everything else must stay the same(other member's count is unknown so it's\n> type).\n> \n> How can I do that?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/173, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsKu2iLD0bsNxdSmVFq2qZM8PHsxCks5qZiBhgaJpZM4JVPMl\n> .\n. What is T in your generic usage? What is the relationship between the two\ndifferent classes and the interface?\n\nOn Tue, 26 Jul 2016 19:59 Alexander Lutz, notifications@github.com wrote:\n\n> Reopened #173 https://github.com/mgravell/protobuf-net/issues/173.\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/173#event-735432972, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsNOsY-WPTx0k2wyGNAH20BaMporFks5qZlj9gaJpZM4JVPMl\n> .\n. To put it another way: what would a fully reproducible sample look like?\n\nOn 26 Jul 2016 9:39 p.m., \"Marc Gravell\" marc.gravell@gmail.com wrote:\n\n> What is T in your generic usage? What is the relationship between the two\n> different classes and the interface?\n> \n> On Tue, 26 Jul 2016 19:59 Alexander Lutz, notifications@github.com\n> wrote:\n> \n> > Reopened #173 https://github.com/mgravell/protobuf-net/issues/173.\n> > \n> > \u2014\n> > You are receiving this because you commented.\n> > \n> > Reply to this email directly, view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/173#event-735432972,\n> > or mute the thread\n> > https://github.com/notifications/unsubscribe-auth/AABDsNOsY-WPTx0k2wyGNAH20BaMporFks5qZlj9gaJpZM4JVPMl\n> > .\n. Thanks - vexing that I missed this :(\n. The empty System.Xml looks odd - can you confirm this as a legal syntax?\n. Multiple ways. If your code-gen tool supports DataContractSerializer (many\ndo), then: job done - enable that\n\nIf your code-gen tool creates \"partial\" classes, you can create a\n**second** file with the same \"partial\" class and add your attributes\n**there**. In place of [ProtoMember], there's a [ProtoPartialMember] that\ncan be applied at the class level (instead of the member level), simply by\ntelling each one the name of the member it applies to.\n\nFinally, you can configure _everything_ at runtime using RuntimeTypeModel.\n\nThat do?\n\nOn 16 August 2016 at 03:04, HOHO notifications@github.com wrote:\n\n> in my application,the model is generated by db-first,so how can I\n> (de)serialize my class without ProtoContract attribute and ProtoMember\n> attribute ?thanks~\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/179, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsA2-rIfSd3xNSrAni9ghcadsCtPjks5qgRqigaJpZM4Jk9AN\n> .\n\n## \n\nRegards,\n\nMarc\n. What ORM tool are you using for your DB-first approach? It all depends on\nthat.\n\nOn 17 Aug 2016 11:14 a.m., \"HOHO\" notifications@github.com wrote:\n\n> hi~ @mgravell https://github.com/mgravell ,thanks for your answer!But I\n> cannot understand the first way absolutely,can you describe in detail, or\n> give me some example?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/179#issuecomment-240371157,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsFMuGiLJwlZiBwzFTzfjxc_W4MN_ks5qgt8OgaJpZM4Jk9AN\n> .\n. Merged. Will publish.\n\nOn 24 Aug 2016 8:58 p.m., \"Xaver Schulz\" notifications@github.com wrote:\n\n> already fixed in pull request #175\n> https://github.com/mgravell/protobuf-net/pull/175 but not merged or\n> published right now\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/181#issuecomment-242188836,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsEGImHCxfomP4QYaCKA0ZoO3BVctks5qjKJjgaJpZM4JsGR2\n> .\n. thanks. Usually I would *expect* the reader to be collectable about the same time, but; yeah, this should be fine. Thanks.. The  schema processing tools have not been updated to parse proto3. The\nbinary format, however, is unchanged - so as long as you understand how\nproto3 translates to the object model, it is readily consumable. I'm open\nto offers from anyone who wants to update the schema parsing tooling - they\nare long overdue some love. But the _primary_ API in protobuf-net has\nalways been code-first, which simply isn't impacted at all by proto3.\n\nOn 21 September 2016 at 22:41, jgrandyxignite notifications@github.com\nwrote:\n\n> Does protobuf-net support proto3 ?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/187, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsOebUEbB8sX6MBrVVj9piVVhIuNkks5qsaRsgaJpZM4KDTy3\n> .\n\n## \n\nRegards,\n\nMarc\n. should be here in 2.3.0; preview of current state is here: https://protogen.marcgravell.com/\r\n\r\n(only a web site for convenience; long term we'd hope to get build tools too - the entire parser / generator pipe is being rewritten). Yup, looks like the code I added to Jil for the same thing, so was pretty much what I had in mind; much appreciated.\n. thanks, you're right of course. Agreed - this looks like  a missing stream rewind, thanks (sorry, this\nslipped past my email). Note: the `Flush()` here is not needed, but also\ndoesn't hurt.\n\nOn 25 November 2016 at 09:26, Anton van Dijk <notifications@github.com>\nwrote:\n\n> An issue could be that the stream is being read at the wrong position.\n> Besides that, it might not be done writing when you're calling the\n> deserialize.\n>\n> Instead of:\n>\n> var serverStream = new MemoryStream();\n> ProtoBuf.Serializer.Serialize(serverStream, responseMsg);\n> Console.WriteLine($\"responseMsg {responseMsg?.responseStr ?? \"failed\"}\\n\");\n>\n> var response =ProtoBuf.Serializer.Deserialize<ResponseMessage>(serverStream);\n> Console.WriteLine($\"response {response?.responseStr ?? \"failed\"}\\n\");\n>\n> Try:\n>\n> var serverStream = new MemoryStream();\n> ProtoBuf.Serializer.Serialize(serverStream, responseMsg);\n> Console.WriteLine($\"responseMsg {responseMsg?.responseStr ?? \"failed\"}\\n\");\n>\n> serverStream.Flush();\n> serverStream.Position = 0;\n>\n> var response =ProtoBuf.Serializer.Deserialize<ResponseMessage>(serverStream);\n> Console.WriteLine($\"response {response?.responseStr ?? \"failed\"}\\n\");\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/191#issuecomment-262914565>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHaBbdM-qnW0mWmQMTPE6_90grLtks5rBqnYgaJpZM4Kh5Z5>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. My colleagues and I are currently working on the build/pack tooling for the current dotnet bits, which should include this; our plan is essentially to have the same build/pack tooling for our combined libs, so: protobuf-net, se.redis, miniprofiler, dapper, etc. The intellisense is already included on the new myget feed (https://www.myget.org/F/protobuf-net/) (when we get our tooling stuff complete, it will include automatic myget builds from the repo).\r\n\r\nSo basically: \"done, ish\". K, I need to look at what has broken. Will try to look asap.\n\nOn 8 Nov 2016 10:33 a.m., \"mnml_\" notifications@github.com wrote:\n\n> I've spent hours now trying to compile protobuf-net\n> \n> when i try to simply build the core project msbuild protobuf-net.csproj i\n> get\n> \n> Microsoft.NuGet.targets(140,5): error : Your project is not referencing the \".NETFramework,Version=v3.0\" framework. Add a reference to \".NETFramework,Version=v3.0\" in the \"frameworks\" sectio n of your project.json, and then re-run NuGet restore. [D:\\lib\\protobuf-net\\protobuf-net\\protobuf-net.csproj]\n> \n> I've tried fiddling around with the project.json, the best I've got was\n> either \"there's no interpolated strings in c#2\" or the same as here\n> https://github.com/mgravell/protobuf-net/issues/177\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/193, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABDsBFEOkQ1dtmdeGIAWdLX4RF1RWajks5q8E_cgaJpZM4KsRJ8\n> .\n. It almost certainly got through because I'm primarily using the new build\ntooling, which presumably omits the langver stuff. The workaround is\nsimply: build from the DNX projects. These will be updated *yet again* soon\nto the new new new .net core build tools (back to csproj, but a smaller\nleaner csproj).\n\nHistorically I tried to preserve down-level language support, but frankly\nI'm not sure it is worth the effort.  We should just nuke that language\nversion setting. I'll go do that...\n\n\nOn 15 March 2017 at 08:57, luoxiaodi <notifications@github.com> wrote:\n\n> me too. Error about \"$\"!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/193#issuecomment-286679079>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsA5N2fXSuaD5w1AKArYctsK0n31lks5rl6fzgaJpZM4KsRJ8>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. sigh; the tooling rework for .net core has been... pain pain pain. still,\nit should build fine from the sln - it worked a few days ago, at least.\n\ni cannot comment on proto3 - haven't reworked anything for that. If\nswitching the \"protoc\" makes it work: great. But I doubt it would be as\nsimple as that.\n\nOn 22 Mar 2017 3:38 p.m., \"force78\" <notifications@github.com> wrote:\n\n> Hello. I'm having trouble building protobuf-net. I'm ultimately trying to\n> get a protogen.exe that can parse proto3 syntax. When I build protobuf-net\n> I'm getting an error :\n> Your project.json doesn't have a runtimes section. You should add\n> '\"runtimes\": { \"win\": { } }' to your project.json and then re-run NuGet\n> restore. protobuf-net\n> I've pulled the latest commit.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/193#issuecomment-288439508>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsIfoK8mK2K17KQYUVRUPDpyuyRLgks5roUCOgaJpZM4KsRJ8>\n> .\n>\n. I can take a look, but I am not confident in my ability to adequately test\n/ support the WCF pieces. It has been \"many years\" since I WCF'd...\n\nOn 18 Dec 2016 1:50 p.m., \"Roman Badiornyi\" <notifications@github.com>\nwrote:\n\nWe've got an issue that we need support of both, WCF (available in < 2.1.0)\nand interface surrogates (available from 2.1.0) @mgravell\n<https://github.com/mgravell> , can you please publish at least alpha\nversion which will bring WCF support back to 2.1.0.\nThanks in advance.\n\n\u2014\nYou are receiving this because you were mentioned.\n\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/194#issuecomment-267822244>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsI0b44ritXl1LpP8bp9Rq43F14Bpks5rJTopgaJpZM4KscP3>\n.\n. The code in the repo has service-model enabled; I've been working on the\nbuild etc tools for this in the last week or so, so it should now build\nusing the new csproj build tools - I'm just waiting on clarification / ETA\non a known regression with the nuspec output from the new build tools,\nbefore I do a package update (https://github.com/NuGet/Home/issues/4853)\n\nOn 28 March 2017 at 21:44, Felipe Andrade <notifications@github.com> wrote:\n\n> Any updates on this? It's been 3+ months since last one.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/194#issuecomment-289898763>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsCBi95AXLvOgApMpwmblvXgFC8qoks5rqXEygaJpZM4KscP3>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. Protobuf-net has not had tooling updates for processing 2.0 schema files.\nI'm in several minds as to the best way to make those changes. It can\nprocess 2.0 data (the data format is unchanged in 2.0) - but only if you're\nusing correctly configured code-first implementations. It cannot currently\nautomatically generate classes to represent a 2.0 schema.\n\nOn 25 Nov 2016 7:46 pm, \"Mitch Capper\" <notifications@github.com> wrote:\n\n> ie:\n> message SampleMessage { oneof test_oneof { string name = 4; SubMessage\n> sub_message = 9; } }\n> errors out with:\n> C:\\temp\\proto\\test.proto(1,9): error CS001: unknown rule: oneof\n> unknown rule: oneof\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/196>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsJrNnOLYhv6cGoGTY29OhVXoLIssks5rBzr9gaJpZM4K8rph>\n> .\n>\n. interesting; iirc I have some inbuilt default cases for things like IList-T\n(being List-T, obviously) - this would be a legitimate addition, I think. I\nhave some time booked to look at pb-net soon, so will hopefully look at\nsoon. I also have a lot of backlog to look through.\n\nOn 27 Jan 2017 11:28 p.m., \"Mauricio Morales\" <notifications@github.com>\nwrote:\n\n> I wrote a test that can exercise this issue:\n>\n>         [TestMethod, TestCategory(\"RecruitmentEdge\"), Owner(\"RecruitmentEdge@careerbuilder.com\")]\n>         public void Verify_Protobuf_Serialization()\n>         {\n>             using (var writeStream = new System.IO.MemoryStream())\n>             {\n>                 ISet<String> mySet = new HashSet<String>();\n>                 mySet.Add(\"hello world\");\n>\n>                 ProtoBuf.Serializer.Serialize(writeStream, mySet);\n>\n>                 using (var readStream = new System.IO.MemoryStream(writeStream.ToArray()))\n>                 {\n>                     var myDeserializedSet = ProtoBuf.Serializer.Deserialize<ISet<String>>(readStream);\n>                     Assert.AreEqual(mySet.First(), myDeserializedSet.First());\n>                     Assert.AreEqual(\"hello world\", mySet.First());\n>                 }\n>             }\n>\n>             using (var writeStream = new System.IO.MemoryStream())\n>             {\n>                 IDictionary<DayOfWeek, ISet<String>> myMap = new Dictionary<DayOfWeek, ISet<String>>();\n>                 myMap.Add(DayOfWeek.Monday, new HashSet<string> { \"hello world\" });\n>\n>                 ProtoBuf.Serializer.Serialize(writeStream, myMap);\n>\n>                 using (var readStream = new System.IO.MemoryStream(writeStream.ToArray()))\n>                 {\n>                     var myDeserializedMap = ProtoBuf.Serializer.Deserialize<IDictionary<DayOfWeek, ISet<String>>>(readStream);\n>                     Assert.AreEqual(myMap[DayOfWeek.Monday].First(), myDeserializedMap[DayOfWeek.Monday].First());\n>                     Assert.AreEqual(\"hello world\", myMap[DayOfWeek.Monday].First());\n>                 }\n>             }\n>         }\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/197#issuecomment-275802329>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsG2yq8AWozqcrG589ODL9bsYS7IAks5rWn2rgaJpZM4K-Sfo>\n> .\n>\n. lgtm; ta. Closing because tooling has changed making this redundant. Messing with the assembly version is always a fun topic. Just about every\napproach possible annoys someone. Since we deploy via nuget, assembly\nversion redirects are much less of an issue these days. Is there a good\nreason to stray from what it is doing currently?\n\nOn 19 Dec 2016 2:46 p.m., \"KlausLinzner\" <notifications@github.com> wrote:\n\n> I found no clear documentation on how you're versioning the assemblies but\n> I assume it's some sort of semantic versioning - please correct me if I'm\n> wrong.\n>\n> Could you change the AssemblyVersion from \"2.1.0.0\" (which is already a\n> huge step ahead compared to prior) to \"2.0.0.0\"? Do you see any downsides\n> on this?\n> As far as I know the AssemblyFileVersion and AssemblyInformationalVersion\n> can stay the same (\"2.1.0\" or even \"2.1.0.build\");\n>\n> This would allow easier updates and less need for assembly redirects\n> and/or synchronization of updates.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/201>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGkrCBosCIMLvMTahUWiX0O2xKc6ks5rJpjCgaJpZM4LQzHL>\n> .\n>\n. I have pushed changes re the C# language version; pull and retry please\n\nOn 15 March 2017 at 08:53, luoxiaodi <notifications@github.com> wrote:\n\n> me too. HELP! SOS ! Unity(64bit) 5.4.0f3\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/205#issuecomment-286678098>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsKC_u1CgnXUHxoH1LQUgWWQX6T10ks5rl6b7gaJpZM4LXJYC>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. indeed; there is no explicit support - it looks like the \"does it look a\nbit like a collection?\" code it trying to have a go at it, unsuccessfully.\nIt is a fun one - I can't say that bitarray is a common case. I might be\nable to come up with a surrogate implementation that works nicely, though -\nwill have a peek tomorrow (1am here)\n\nOn 3 Jan 2017 9:39 p.m., \"btecu\" <notifications@github.com> wrote:\n\n> When trying to serialize a BitArray I get Unable to resolve a suitable\n> Add method for System.Collections.BitArray.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/206>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsD08b4ExLJQw8nt2ULy6BmHLDWIRks5rOsAfgaJpZM4LaDr0>\n> .\n>\n. it is pretty unusual for protobuf-net output to be as large or bigger than\nBF. Can I see the model? (the classes). Very hard to comment without that.\nAlso, is it possible that you have the same repeated object in the tree\nmultiple times? (for example, a City object where 20 customers all have the\nsame City instance) - protobuf-net is a tree serializer by default, so that\ndata would be repeated. BF is a graph serializer that uses object tracking\n- however protobuf-net also has this as an optional feature.\n\nOn 5 Jan 2017 2:38 a.m., \"SidneyWells\" <notifications@github.com> wrote:\n\n> I'm converting a .NET 4.0 C# app to use protobuf-net for binary\n> serialisation. It currently uses BinaryFormatter but this is proving too\n> fragile to be sustainable.\n>\n> I've got to the point where it can serialize an in-memory workspace to\n> disk, and the first thing I noticed is the resulting files are much larger\n> than their old BF equivalents. The protobuf files are nearly twice as big,\n> in fact. For example,\n>\n> File 1: BF = 1371 kB, protobuf = 2569 kB\n> File 2: BF = 12103 kB, protobuf = 21245 kB\n>\n> I've seen several comparisons between protobuf and other serialization\n> mechanisms, and if memory serves these tests usually show that protobuf\n> produces smaller files than BinaryFormatter, so this makes me think I'm\n> doing something wrong.\n>\n> I'm new to protobuf so I'm not sure what to change in order to reduce file\n> size. I've put IsPacked=true on all arrays of primitives (which sometimes\n> contain many thousands of elements), but this only resulted in a small\n> improvement.\n>\n> Any general tips on minimizing protobuf file sizes, or do I need to\n> provide more detail about the classes I'm serializing? (I tried to attach\n> my .proto file (zipped) but I get a message saying 'We don't support that\n> file type' even though ZIP is one of the listed file types!)\n>\n> Thanks in advance.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/207>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsCheFzwobLyRNzZV9R4kB3ccsZNzks5rPFekgaJpZM4LbSh8>\n> .\n>\n. I doubt you'll make any fundamental changes to the size at this point, if\nyou are sure you're not duplicating anything in the tree now. You could\nalso consider running it through DeflateStream or similar - of course that\napplies to either serializer. Ultimately, there's data there that needs\nstoring.\n\nMarc\n\nOn 5 Jan 2017 10:59 p.m., \"SidneyWells\" <notifications@github.com> wrote:\n\n> Thanks Marc, you're spot on. One of my classes is referenced by a couple\n> of others in the model. I've set AsReference and AsReferenceDefault to true\n> in what I think are the appropriate places and the file size is now\n> slightly less than the BF equivalents:\n>\n> File 1: BF = 1371 kB, protobuf = 1285 kB\n> File 2: BF = 12103 kB, protobuf = 11795 kB\n>\n> Is this nearer to what you'd expect?\n>\n> In simplified terms, my model consists of a Workspace object, which\n> contains a collection of Recordings, and each Recording contains a\n> collection of Waveforms. Each Waveform contains a reference to the\n> Recording it belongs to. This is the only place in the model where there\n> are circular references. Each of these three classes also contain a few\n> primitives (or arrays of primitives) and a collection of Property objects.\n>\n> The .proto file is pasted below. Can you suggest any further optimisations?\n>\n> --\n>\n> import \"bcl.proto\"; // schema for protobuf-net's handling of core .NET\n> types\n>\n> message AirblastWaveform {\n> repeated int32 _amplitudeSigns = 1;\n> }\n> message BooleanProperty {\n> optional bool _value = 1 [default = false];\n> }\n> message DateTimeProperty {\n> optional bcl.DateTime _value = 1;\n> }\n> message DoubleProperty {\n> optional double _value = 1 [default = 0];\n> }\n> message DynamicStrain {\n> repeated double Ex = 1 [packed=true];\n> repeated double Ey = 2 [packed=true];\n> repeated double Ez = 3 [packed=true];\n> repeated double Exy = 4 [packed=true];\n> repeated double Eyz = 5 [packed=true];\n> repeated double Exz = 6 [packed=true];\n> }\n> message IntegerProperty {\n> optional int32 _value = 1 [default = 0];\n> }\n> message LongProperty {\n> optional int64 _value = 1 [default = 0];\n> }\n> message OID {\n> optional string Name = 1;\n> optional bcl_Guid Guid = 2;\n> }\n> message Object {\n> }\n> message ObjectProperty {\n> optional bcl.NetObjectProxy _value = 1;\n> }\n> message PhysicalQuantity {\n> optional PhysicalQuantityType _type = 1 [default = Dimensionless];\n> optional PhysicalUnitsType _siUnitsType = 2 [default = Dimensionless];\n> }\n> enum PhysicalQuantityType {\n> Dimensionless = 0;\n> Acceleration = 1;\n> Velocity = 2;\n> Displacement = 3;\n> Temperature = 4;\n> Voltage = 5;\n> Pressure = 6;\n> Time = 7;\n> Frequency = 8;\n> AccelerometerSensitivity = 9;\n> MicrophoneSensitivity = 10;\n> Mass = 11;\n> GeophoneSensitivity = 12;\n> }\n> message PhysicalUnits {\n> optional PhysicalUnitsType _type = 1 [default = Dimensionless];\n> optional PhysicalQuantity _quantity = 2;\n> optional string _symbol = 3;\n> optional string _name = 4;\n> }\n> enum PhysicalUnitsType {\n> Dimensionless = 0;\n> MetresPerSecondSquared = 1;\n> MultipleOfG = 2;\n> MmPerSecondSquared = 3;\n> MetresPerSecond = 4;\n> MmPerSecond = 5;\n> Metres = 6;\n> Millimetres = 7;\n> Pascals = 8;\n> Atmospheres = 9;\n> dBL = 10;\n> Seconds = 11;\n> Milliseconds = 12;\n> Microseconds = 13;\n> Volts = 14;\n> Celcius = 15;\n> Kelvin = 16;\n> Bits = 17;\n> Samples = 18;\n> Hertz = 19;\n> InchesPerSecondSquared = 20;\n> InchesPerSecond = 21;\n> VoltsPerMetrePerSecondSquared = 22;\n> VoltsPerG = 23;\n> VoltsPerPascal = 24;\n> MillivoltsPerPascal = 25;\n> Inches = 26;\n> Hours = 27;\n> Millibars = 28;\n> VoltsPerCmPerSecondSquared = 29;\n> CmPerSecondSquared = 30;\n> PoundsPerSquareInch = 31;\n> Kilograms = 32;\n> Pounds = 33;\n> VoltsPerMetrePerSecond = 34;\n> VoltsPerMmPerSecond = 35;\n> VoltsPerCmPerSecond = 36;\n> CmPerSecond = 37;\n> }\n> message PrincipalStrain {\n> repeated double E1 = 1 [packed=true];\n> repeated double E2 = 2 [packed=true];\n> repeated double E3 = 3 [packed=true];\n> }\n> message Property {\n> optional PropertyType _type = 1 [default = FilePath];\n> optional PhysicalUnits _units = 2;\n> // the following represent sub-types; at most 1 should have a value\n> optional ObjectProperty ObjectProperty = 100;\n> optional IntegerProperty IntegerProperty = 101;\n> optional LongProperty LongProperty = 102;\n> optional DoubleProperty DoubleProperty = 103;\n> optional StringProperty StringProperty = 104;\n> optional DateTimeProperty DateTimeProperty = 105;\n> optional BooleanProperty BooleanProperty = 106;\n> }\n> enum PropertyType {\n> FilePath = 0;\n> NumberOfChannels = 1;\n> Description = 2;\n> TriggerMethod = 3;\n> ConfigurationFile = 4;\n> Timestamp = 5;\n> BatteryVoltage = 6;\n> Temperature = 7;\n> TriggerSource = 8;\n> MonitorID = 9;\n> CalibrationDate = 10;\n> ChannelID = 11;\n> ChannelNumber = 12;\n> CalibrationValue = 13;\n> Units = 14;\n> OriginalUnits = 15;\n> SensorRange = 16;\n> Resolution = 17;\n> WaveformLength = 18;\n> WaveformDuration = 19;\n> SampleTime = 20;\n> SampleRate = 21;\n> PretriggerLength = 22;\n> PretriggerDuration = 23;\n> TriggerLevel = 24;\n> MaxAmplitude = 25;\n> MinAmplitude = 26;\n> PeakParticleAcceleration = 27;\n> PeakParticleVelocity = 28;\n> PeakPressure = 29;\n> Location = 30;\n> Comments = 31;\n> Coordinates = 32;\n> AccelerometerSensitivity = 33;\n> MicrophoneSensitivity = 34;\n> PeakParticleDisplacement = 35;\n> LocalTimeOffset = 36;\n> AirblastTriggerLevel = 37;\n> Null = 38;\n> RelativeEnergy = 39;\n> DigitisingConstant = 40;\n> FirmwareVersion = 41;\n> ShotNumber = 42;\n> ZeroCrossingFrequency = 43;\n> MonitoringPoint = 44;\n> BlastDesign = 45;\n> LocalCoordinates = 46;\n> Initiation = 47;\n> ChargeWeight = 48;\n> FiringDelay = 49;\n> ShowFiringData = 50;\n> FiringTimeOffset = 51;\n> FiringTimeScale = 52;\n> GeophoneSensitivity = 53;\n> }\n> message Recording {\n> repeated Property _originalProperties = 1;\n> optional double _originalInitialTimeOffset = 2 [default = 0];\n> optional double _initialTimeOffset = 3 [default = 0];\n> optional double _sampleTimeInSeconds = 4 [default = 0];\n> repeated Waveform _waveforms = 5;\n> repeated Property _properties = 6;\n> }\n> message StandardError {\n> repeated double Sx = 1 [packed=true];\n> repeated double Sy = 2 [packed=true];\n> repeated double Sz = 3 [packed=true];\n> repeated double Sxy = 4 [packed=true];\n> repeated double Syz = 5 [packed=true];\n> repeated double Sxz = 6 [packed=true];\n> }\n> message StrainCalculationResult {\n> optional DynamicStrain DynamicStrain = 1;\n> optional PrincipalStrain PrincipalStrain = 2;\n> optional StrainRotation Rotation = 3;\n> optional StandardError StandardError = 4;\n> repeated double SSR = 5 [packed=true];\n> repeated double Q = 6 [packed=true];\n> optional bcl.DateTime StartTime = 7;\n> optional StrainCalculationType CalculationType = 8 [default = TwoD];\n> repeated OID MonitorPoints = 9;\n> optional OID ReferencePoint = 10;\n> optional bool ArePrerequisitesMet = 11 [default = false];\n> }\n> enum StrainCalculationType {\n> TwoD = 0;\n> ThreeD = 1;\n> }\n> message StrainRotation {\n> repeated double Wx = 1 [packed=true];\n> repeated double Wy = 2 [packed=true];\n> repeated double Wz = 3 [packed=true];\n> }\n> message StringProperty {\n> optional string _value = 1;\n> }\n> enum TimeAxisStyle {\n> Relative = 0;\n> Absolute = 1;\n> }\n> message VectorSumWaveform {\n> }\n> message VibrationWaveform {\n> optional bool _hasBeenRotated = 1 [default = false];\n> }\n> message Waveform {\n> optional WaveformType _type = 1 [default = Radial];\n> optional bcl.NetObjectProxy _recording = 2; // reference-tracked Recording\n> optional string _name = 3;\n> repeated Property _properties = 4;\n> repeated double _amplitude = 5 [packed=true];\n> repeated double _originalAmplitude = 6 [packed=true];\n> optional bool _isAlignable = 7 [default = false];\n> optional bool _hasBeenFiltered = 8 [default = false];\n> optional bool _hasLengthChanged = 9 [default = false];\n> // the following represent sub-types; at most 1 should have a value\n> optional AirblastWaveform AirblastWaveform = 100;\n> optional VectorSumWaveform VectorSumWaveform = 101;\n> optional VibrationWaveform VibrationWaveform = 102;\n> }\n> enum WaveformType {\n> Radial = 0;\n> Transverse = 1;\n> Vertical = 2;\n> VectorSum = 3;\n> Airblast = 4;\n> }\n> message Workspace {\n> optional int32 _index = 1 [default = 0];\n> repeated bcl.NetObjectProxy _recordings = 2; // reference-tracked Recording\n> repeated Property _properties = 3;\n> optional bool _neverSaved = 4 [default = false];\n> optional TimeAxisStyle _xAxisStyle = 5 [default = Relative];\n> optional StrainCalculationResult _strainCalcResult = 6;\n> }\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/207#issuecomment-270782757>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsAwI4IdYjTQsb0kL1hph88xoeO4aks5rPXXSgaJpZM4LbSh8>\n> .\n>\n. And what is the code that goes with this? Indeed, protobuf-net can't\ndeserialize an interface - at least, not without some help to tell it how\nto interpret that in terms of concrete types.\n\nOn 12 January 2017 at 13:49, fhchina <notifications@github.com> wrote:\n\n> ProtoBuf couldn't find parameterless constructor for IExpression, but\n> IExpression is an interface.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/208>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsOl0QuBV9GMQ1sUGcdhDqCiohdMNks5rRi9OgaJpZM4LhxL7>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. In general I would try to avoid that scenario *entirely* - interfaces on DTOs look ... just wrong. However, `MetaType` has a `ConcreteType` property (simple use) or a `SetFactory` method (more complex scenarios), which *may* be usable, depending on the scenario.\r\n. default values also need to be applied by your own code. this is easy in c#\nlatest:\n\n    [Required]\n    [DefaultValue(-1)]\n    [ProtoMember(1)]\n    public int MvcUserId { get; set; } = -1;\n\n(Note the initial value after the property)\n\nOn 21 Jan 2017 4:34 p.m., \"Greg Eakin\" <notifications@github.com> wrote:\n\nIf you look at the data written, when MvcUserId is default (-1), no\ninformation is written [correct].\n\n[TestMethod]public void UserWriteDefault()\n{\n    using (var stream = new MemoryStream())\n    {\n        var person = new MvcUser { Id = -1 };\n        Serializer.Serialize(stream, person);\n        CollectionAssert.AreEqual(new byte[] { }, stream.ToArray());\n    }\n}\n\nBut the read-back doesn't change it from zero to the default [wrong].\n\n[TestMethod]public void UserReadDefault()\n{\n    using (var stream = new MemoryStream(new byte[] { }))\n    {\n        var person = Serializer.Deserialize<MvcUser>(stream);\n        Assert.AreEqual(-1, person.Id);\n    }\n}\n\nThe schema looks good.\n\n[TestMethod]public void SchemaTest()\n{\n    var proto = Serializer.GetProto<MvcUser>();\n    var schema = \"package BufferTests;\\r\\n\\r\\n\" +\n        \"message MvcUser {\\r\\n\" +\n        \"   optional int32 Id = 1 [default = -1];\\r\\n\" +\n        \"}\\r\\n\";\n    Assert.AreEqual(schema, proto);\n}\n\nThis also looks like issue #203\n<https://github.com/mgravell/protobuf-net/issues/203>.\nDefaultTests.zip\n<https://github.com/mgravell/protobuf-net/files/721286/DefaultTests.zip>\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/209#issuecomment-274272158>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsDGNzV1Kyfr4znUykzSU7jWI-E2vks5rUjOBgaJpZM4LlQt3>\n.\n. noted, thanks; very interesting - hopefully will find out what is happening\nasap\n\nOn 30 Jan 2017 4:57 p.m., \"jamesgibbs100\" <notifications@github.com> wrote:\n\n> Hi there,\n>\n> Environment : NET Core 1.1.0 console application, consuming protobuf-net\n> 2.1.0. MUST be run/build in Release mode.\n>\n>    - Create a class with a static public constructor\n>    - Deserialize the class (after having serialized it)\n>    - Exception is thrown : System.InvalidProgramException: Common\n>    Language Runtime detected an invalid program\n>\n> Remove the static public constructor and the deserialization works as\n> expected.\n>\n> *Note : This only effects deserialization and not serialization*\n>\n> Very simple test rig below demonstrated the problem\n>\n> Thanks\n> James\n>\n> public class Program\n> {\n>         public static void Main(string[] args)\n>         {\n>             ProtoTestOne t1 = null;\n>             using (MemoryStream ms = new MemoryStream())\n>             {\n>                 ProtoBuf.Serializer.Serialize<ProtoTestOne>(ms, t1);\n>                 ms.Seek(0, SeekOrigin.Begin);\n>                 t1 = ProtoBuf.Serializer.Deserialize<ProtoTestOne>(ms);\n>             }\n>         }\n>\n>         [ProtoBuf.ProtoContract]\n>         public class ProtoTestOne\n>         {\n>             //This causes the exception\n>             static ProtoTestOne()\n>             {\n>             }\n>\n>             public ProtoTestOne()\n>             {\n>             }\n>         }\n> }\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/210>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHhVVK3sEutChOKE5WLaY0OARCXrks5rXhZygaJpZM4LxpYv>\n> .\n>\n. This appears to be fixed - I think via a contributed PR at some point. Closing.. There is a pre-existing `Serializer.NonGeneric.TryDeserializeWithLengthPrefix`, but that takes an awkward `TypeResolver`; will look at the PR (and: sorry for delay, I've been.... *distracted*). Re \"really big integers\": that's actually part of the protobuf spec (https://developers.google.com/protocol-buffers/docs/proto):\r\n\r\n> The smallest tag number you can specify is 1, and the largest is 229 - 1, or 536,870,911.\r\n\r\n(unless the obsolete and undocumented \"message-set\" encoding is used, but protobuf-net doesn't support message-set encoding - it isn't even part of the formal specification, although I've reverse-engineered it and understand what it needs to look like)\r\n\r\nHowever, I'm happy to check to see that appropriate and useful errors are being raised.  The exception thing (base class) - yup, sounds like a bug. Will target both in 2.31. you're absolutely right, of course; either it needs to work, or it needs to fail as early as possible with a meaningful message; I've shipped 2.3.0, so I'm starting the 2.3.1 work currently (this issue is tagged for 2.3.1).. appreciated, thanks. if the main issue here is UWP, that's on the roadmap as a future item. This is an interesting one; I need to think about how this should work. The non-trivial part of the issue is that enums in protobuf are only defined for 32-bit values. However, since 2.3.0 adds much improved enum pass-thru support (consistent with proto3 runtime behaviour), it might be that we can simply treat `long` enums as direct pass-thru. Needs consideration. Adding to 2.3.1. The previous comment is correct, but to be more specific: because you write\nmultiple times to the same stream without rewinding/clearing the contents,\nyou are essentially *concatenating* all the objects into a single stream -\nso the overall length of data will be (number of objects)*(size of object).\nAs an aside, this also means it isn't a like for like performance test,\nespecially for deserialization!\n\nNow, protobuf is designed such that append===merge. So from protobuf's\nperspective, you have written a **single** object with many many key/value\npairs - most of which are duplicates. If you *ever need* to do what you are\ndoing here (writing multiple objects sequentially), the\nSerializeWithLengthPrefix and DeserializeWithLengthPrefix methods will help\nyou - basically they allow you to tell the system how to identify\nindividual objects. However, in your case what you should probably do is\nrewind and clear the stream between writes, so:\n\n\nfor(...) {\n    ms.Position = 0;\n    ms.Length = 0;\n\n    // not shown: serialize to ms here\n\n}\n// read the contents of the final write:\nvar arr = ms.ToArray();\n\n\n\nOn 23 February 2017 at 17:38, Snarly Narwhal <notifications@github.com>\nwrote:\n\n> I get a SystemArgumentException: \"An item with the same key has already\n> been added.\" when deserializing a dictionary. I wrote this test script:\n>\n> `\n> using System;\n> using System.Collections.Generic;\n> using System.Diagnostics;\n> using System.IO;\n> using System.Text;\n> using ProtoBuf;\n>\n> class Program {\n> static void Main(string[] args) {\n>\n> \tint length = 1000;\n>\n> \tstring json = \"\";\n>\n> \tStopwatch watch;\n>\n> \tfloat ms;\n>\n>\n> \tPerson person = new Person {\n> \t\tFirstName = \"John\",\n> \t\tLastName = \"Doe\",\n> \t\tProfession = \"Programmer\",\n> \t\tAge = 99,\n> \t\tIsMale = false\n> \t};\n>\n> \tperson.GiveFriends();\n>\n> \t//////////////////// JSON_START\n> \twatch = Stopwatch.StartNew();\n> \tfor (int i = 0; i < length; i++) {\n> \t\tjson = Newtonsoft.Json.JsonConvert.SerializeObject(person);\n> \t}\n> \twatch.Stop();\n> \tms = watch.ElapsedMilliseconds;\n> \tConsole.WriteLine(\"Json serialize: \" + ms);\n>\n> \twatch = Stopwatch.StartNew();\n> \tfor (int i = 0; i < length; i++) {\n> \t\tPerson person0 = Newtonsoft.Json.JsonConvert.DeserializeObject<Person>(json);\n> \t}\n> \twatch.Stop();\n> \tms = watch.ElapsedMilliseconds;\n> \tConsole.WriteLine(\"Json deserialize: \" + ms);\n>\n> \t//////////////////// JSON_END\n>\n> \t////////////////// PROTOBUFF_START\n>\n> \tbyte[] data = null;\n>\n> \twatch = Stopwatch.StartNew();\n> \tusing (MemoryStream stream = new MemoryStream()) {\t\n> \t\tfor (int i = 0; i < length; i++) {\n> \t\t\tSerializer.Serialize(stream, person);\n> \t\t}\n> \t\tdata = stream.ToArray();\n> \t}\n> \twatch.Stop();\n> \tms = watch.ElapsedMilliseconds;\n> \tConsole.WriteLine(\"Proto serialize: \" + ms);\n>\n> \twatch = Stopwatch.StartNew();\n> \tusing (MemoryStream stream = new MemoryStream(data)) {\n> \t\tfor (int i = 0; i < length; i++) {\n> \t\t\tSerializer.Deserialize<Person>(stream);\n> \t\t}\n> \t}\n>\n> \twatch.Stop();\n> \tms = watch.ElapsedMilliseconds;\n> \tConsole.WriteLine(\"Proto deserialize: \" + ms);\n>\n> \t//////////////////// PROTOBUFF_END\n>\n> \tConsole.ReadLine();\n> }\n>\n> }\n>\n> [ProtoContract]\n> public class Person {\n>\n> [ProtoMember(1)]\n> public string FirstName;\n> [ProtoMember(2)]\n> public string LastName;\n> [ProtoMember(3)]\n> public string Profession;\n> [ProtoMember(4)]\n> public int Age;\n> [ProtoMember(5)]\n> public bool IsMale;\n> [ProtoMember(6)]\n> public Person[] FriendsArray;\n> [ProtoMember(7)]\n> public List<Person> FriendsList = new List<Person>();\n> [ProtoMember(8)]\n> public Dictionary<int, Person> FriendsDictionary = new Dictionary<int, Person>();\n>\n> public Person() {\n> \tFirstName = \"John\";\n> \tLastName = \"Doe\";\n> \tProfession = \"Programmer\";\n> \tAge = 99;\n> \tIsMale = true;\n> }\n>\n> public void GiveFriends() {\n> \tint len = 100;\n> \tFriendsArray = new Person[len];\n> \tFriendsList = new List<Person>();\n> \tFriendsDictionary = new Dictionary<int, Person>();\n> \tfor (int i = 0; i < len; i++) {\n> \t\tFriendsArray[i] = new Person();\n> \t\tFriendsList.Add(new Person());\n> \t\tFriendsDictionary.Add(i, new Person());\n> \t}\n> }\n>\n> }\n> `\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/220>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGYa6L32UxHjPD59ec7sAW-hPVE7ks5rfcQAgaJpZM4MKRUD>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. This isn't a scenario that the library targets or that I intend the library to target; my advice here would be: always initialize your lists. For example\r\n\r\n    [ProtoMember(1)]\r\n    public List<Foo> Items {get; } = new List<Foo>();\r\n\r\nprotobuf-net is fine with things like that. If you want lazier initialization, then you can do that with more nuanced getters, for example:\r\n\r\n    private List<Foo> _items;\r\n    [ProtoMember(1)]\r\n    public List<Foo> Items => items ?? (_items = new List<Foo>());\r\n\r\nwhich again: protobuf-net is fine with.\r\n\r\nWhen the 3.0.0 codegen code changes are a thing, it might be that this is something we can target *there*, but: ultimately I'm not sure this is protobuf-net's thing to do.\r\n\r\nNote that root-level lists *are* initialized, but that's a very different scenario.. To quote from the homepage:\n\ninstall\n\nNuget : Install-Package protobuf-net\n\n\nThe nuget link is https://www.nuget.org/packages/protobuf-net/, but as\nmentioned - the most common way to install would be via the package manager\nin Visual Studio.\n\nOn 2 March 2017 at 18:52, Snarly Narwhal <notifications@github.com> wrote:\n\n> Can the .dll files be downloaded anywhere? If not, can they be uploaded so\n> we don't need to build ourselves? Or could we get documentation explaining\n> how to build protobuf-net for a specific platform?\n>\n> I forked the project and can't even build the solution. :/\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/222>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsC60-qRLiA8xWKSJzrzLc3d3zNNeks5rhw_0gaJpZM4MRYZR>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. 0 bytes is legal in protobuf - so thr first thing to check is that you\ndon't have an example that serializes to zero bytes. However, is is also\npossible that UWP / Native is making it unhappy, in particular with the\nlack of meta-programming. Are there any exceptions? I would have expected\nexceptions if this were the case...\n\nOn 12 Mar 2017 2:18 a.m., \"Ryan Tremblay\" <notifications@github.com> wrote:\n\n> When protobuf-net 2.0.0.668 (the last one that seems to work with UWP\n> projects) is used in a UWP project that is compiled with .NET Native (the\n> default for Release builds, and required for any app published to the\n> store), it completely doesn't work. That is, the Serialize function writes\n> zero bytes to the specified stream.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/223>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsOQscvHjga7-Oe2U_UydM0vaudcaks5rk1XagaJpZM4MaaJe>\n> .\n>\n. im kinda surpised it doesnt throw all kinds of exceptions, then.\n\nultimately UWP needs pre-gen. ive been hoping that the Roslyn generator\nstuff would ship so I can start working on a v3 that handles this\nautomatically, but until then you'd have to use the precompiler options in\npb-net. Unfortunately this isn't trivial and I have not tested it on UWP\nspecifically.\n\nOn 12 Mar 2017 5:31 p.m., \"Ryan Tremblay\" <notifications@github.com> wrote:\n\n> In this case, the data I'm serializing definitely should not be 0 bytes.\n> The exact same code works fine when built as Debug (without .NET Native),\n> but in Release (with .NET Native) it doesn't write any data out. The same\n> problem seems to exist for deserializing as well. That is, where I\n> successfully serialized in a Debug build, when I try to deserialize the\n> data in Release, it doesn't read any of the data and I get back an\n> empty/default object.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/223#issuecomment-285960038>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGE1aWk46KfGPyFqBYdTIP8XKsGEks5rlCwHgaJpZM4MaaJe>\n> .\n>\n. that is fantastic; thanks for that update!\n\nOn 13 Mar 2017 4:00 a.m., \"Ryan Tremblay\" <notifications@github.com> wrote:\n\n> I was reading up a bit on the *.rd.xml files used by the .NET Native\n> compiler and found that if I change:\n>\n> <Assembly Name=\"*Application*\" Dynamic=\"Required All\" />\n>\n> to:\n>\n> <Assembly Name=\"*Application*\" Dynamic=\"Required All\" Serialize=\"All\" />\n>\n> then protobuf works as expected. From the docs:\n>\n> Serialize. Controls runtime access to constructors, fields, and\n> properties, to enable type instances to be serialized and serialized by\n> third-party libraries such as the Newtonsoft JSON serializer.\n>\n> Probably worth updating the protobuf-net docs to call this out! Also,\n> after discovering this, I found there was a mention of something similar in\n> issue #138 <https://github.com/mgravell/protobuf-net/issues/138>. That\n> issue is more focused on UWP support specifically in 2.1 (side note: Is\n> there any update on this? As mentioned in this thread, I had to use\n> 2.0.0.668).\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/223#issuecomment-286010747>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsPwWVuGXzhEpkO-G_toxe3GdVTJiks5rlL9WgaJpZM4MaaJe>\n> .\n>\n. protogen has been completely rewritten for 2.3.0; this will be working in the 2.3.0 release.\r\n\r\nNote, however, that it is now **strongly** recommended (by Google) to always have a zero value as the first item in an enum. This is a requirement for proto3 (you are using proto2 by default, since you don't have `syntax = \"proto3\";`). Fixed in 2.3.0; example output:\r\n\r\n```\r\n[global::ProtoBuf.ProtoContract()]\r\npublic partial class EnumFirstIsNonZero\r\n{\r\n    [global::ProtoBuf.ProtoMember(1, Name = @\"optional\")]\r\n    [global::System.ComponentModel.DefaultValue(Foo.A)]\r\n    public Foo Optional\r\n    {\r\n        get { return __pbn__Optional ?? Foo.A; }\r\n        set { __pbn__Optional = value; }\r\n    }\r\n    public bool ShouldSerializeOptional() => __pbn__Optional != null;\r\n    public void ResetOptional() => __pbn__Optional = null;\r\n    private Foo? __pbn__Optional;\r\n\r\n    [global::ProtoBuf.ProtoMember(2, Name = @\"required\", IsRequired = true)]\r\n    public Foo Required { get; set; } = Foo.A;\r\n\r\n}\r\n```. At a complete guess: IL2CPP is doing \"pruning\" to reduce the final size,\nremoving things that it can't see evidence for usage. There's usually\nattributes you can add, or other configuration options, to tell a pruning\ntool to leave something alone. Apply that to your DTOs.\n\nOn 24 Mar 2017 3:11 a.m., \"mygoodsemail\" <notifications@github.com> wrote:\n\n> I used ProtoBuf as network communication protocol. If my android project\n> compile using Mono 2x, everything is OK. But compile using IL2CPP throw\n> exception. The following exception information:\n>\n> System.Exception: ProtoBuf deserialize type:GameFramework.ConnectionData.GamePlayerData\n> error ---> ProtoBuf.ProtoException: No parameterless constructor found for\n> VehicleModel at ProtoBuf.Meta.TypeModel.ThrowCannotCreateInstance\n> (System.Type type) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.TypeSerializer.CreateInstance (ProtoBuf.ProtoReader\n> source, Boolean includeLocalCallback) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.TypeSerializer.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.ProtoReader.ReadTypedObject (System.Object value, Int32 key,\n> ProtoBuf.ProtoReader reader, System.Type type) [0x00000] in <filename\n> unknown>:0 at ProtoBuf.ProtoReader.ReadObject (System.Object value, Int32\n> key, ProtoBuf.ProtoReader reader) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.SubItemSerializer.ProtoBuf.\n> Serializers.IProtoSerializer.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.ListDecorator.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.PropertyDecorator.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Serializers.TypeSerializer.Read (System.Object value,\n> ProtoBuf.ProtoReader source) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Meta.TypeModel.DeserializeCore (ProtoBuf.ProtoReader reader,\n> System.Type type, System.Object value, Boolean noAutoCreate) [0x00000] in\n> <filename unknown>:0 at ProtoBuf.Meta.TypeModel.Deserialize\n> (System.IO.Stream source, System.Object value, System.Type type,\n> ProtoBuf.SerializationContext context) [0x00000] in <filename unknown>:0 at\n> ProtoBuf.Meta.TypeModel.Deserialize (System.IO.Stream source,\n> System.Object value, System.Type type) [0x00000] in <filename unknown>:0\n>\n> Version : 2.0.0.668\n> Anyone know why? Thank you!\n> Sorry for my english -_-!\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/225>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsFRn0YdypicdXOjsRX6f-uqro8Q_ks5rozREgaJpZM4MnnyW>\n> .\n>\n. I'm *assuming* my guess was right; closing due to lack of feedback. Feel free to reopen if I'm wrong.. Hi; subclasses can also be configured at runtime via RuntimeTypeModel (in\nmost cases, the .Default instance is what you want). Note that any\nconfiguration must be done before you start serializing, and note also that\nthe tags used must be repeatable - if SomeSubType is key 17 today, then it\nneeds to stay key 17 in the future.\n\nI'm not at a PC, so this is purely from memory:\n\n     RuntimeTypeModel.Default[typeof(TheBaseType)]\n        .AddSubType(17, typeof(SomeSubType));\n\nOn 4 Apr 2017 11:35 p.m., \"Harsimran Bath\" <notifications@github.com> wrote:\n\n> I have been researching this for a while, and it seems that the BaseClass\n> needs the [ProtoInclude] attribute exposing the subclasses. As per:\n> http://wallaceturner.com/serialization-with-protobuf-net.\n>\n> However, my BaseClass and SubClass reside in separate assemblies. My\n> SubClass assembly is referencing the BaseClass assembly. Because of this\n> architecture, my BaseClass is not *aware* of the SubClass, but my\n> SubClass *is* obviously aware of my BaseClass.\n>\n> As such, how can I make inheritance work given this architecture? I tried\n> decorating my SubClass with [ProtoInclude] but that did not work.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/227>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsLY_m7KsOCBxnWkL_hWG-3JH0oSgks5rssW9gaJpZM4MzhSG>\n> .\n>\n. All great extra context, thanks. Merged.. All good extra context, cheers. Merging as another interesting comparison / line in the sand - but in that outcome we'd just use `Task<T>` from the outset - both have the same allocation issue, and direct `Task<T>` is marginally faster. Odd that it is faster to wrap a `ValueTask<T>` into a `Task<T>` than to use `await` on the original `ValueTask<T>`!. If I get a chance later I'll try with float and double (without a reference wrapper) - see if there's a stack size limit where the suckage starts.. The protobuf format doesn't include field names, so the code needs *some* mechanism to know which members map to which field **numbers** in the data, and it needs to be *reliable*, i.e. you'll always get the same mapping - today, tomorrow, and two months from now.\r\n\r\n*one* of the ways to do this is by annotating the object via attributes - this can be done via any of `[ProtoMember]`, `[DataMember]` or `[XmlElement]` (in the last two cases, you will need to include the field number in the optional `Order` member). If you have code-generated entity models, there is also a `[ProtoPartialMember]` that can be added in a separate `partial class` file to allow you to attach numbers to members in the generated file without having to edit the generated file.\r\n\r\nAnother way you can do it is by asking the library to just assume that you're *never going to change your type*, and use the alphabetical order of the members.  You would do this via `[ProtoContract(InferTagFromName = true)]` - or to apply this as a more general default: `RuntimeTypeModel.Default.InferTagFromNameDefault`. However, this should not be done lightly - it makes your types very brittle - adding, removing or renaming members can (will) make the data unreliable.\r\n\r\nIndividual types can also be configured entirely manually using the `RuntimeTypeModel` / `MetaType` API in the library.\r\n\r\nWould any of those options suffice? If you are more specific about what issue you are facing, I can advise further.. > Please suggest something\r\n\r\nto repeat:\r\n\r\n> Would any of those options suffice? If you are more specific about what issue you are facing, I can advise further.\r\n\r\nYou haven't told me what problem you are facing or where you're stuck.. You haven't rewound the `MemoryStream` - if you are \"old school\" like me, think of VHS or audio cassettes: the `MemoryStream` is currently at the end, there is nothing to read. As it happens, 0 bytes is a perfectly valid length to protobuf. All you need is `ms.Position = 0;`.\r\n\r\nAdditional notes:\r\n\r\n- `var dcat = Serializer.DeepClone(cat);` would do all of this in one go\r\n- the generic `Serializer.Serialize(ms, cat)` and `Serializer.Deserialize<Cat>(ms)` API may be easier for you to use. because that isn't how you usually use streams - indeed, most streams\n*arent rewindable* (TCP sockets, etc). MemoryStream is a very unusual case\n- usually people don't write and read to the same stream in this way.\n\nOn 25 Apr 2017 5:09 p.m., \"nathvi\" <notifications@github.com> wrote:\n\n> I do have a question about the process of the Serialize / Deserialize\n> process.\n> If you are feeding in a memory stream to your Serialize method, and need to\n> rewind the position to 0 in order to get the Deserialize method to read\n> it, why not\n> automatically do this on the Serialize call? I'm sure I'm missing\n> something here.\n> @mgravell <https://github.com/mgravell>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/239#issuecomment-297081078>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsAdwxDdqqlnRdfFhkpP_fynLRkbrks5rzhqkgaJpZM4NHqed>\n> .\n>\n. GetBuffer returns the oversized array that MemoryStream uses to avoid\nallocating for every write. You should never use GetBuffer without also\nchecking .Length and limiting your access to exactly that many bytes.\n\nProtobuf-net got the message entirely correct :)\n\nEither use ToArray when storing to redis, or check .Length and use\nArraySegment<byte>(ms.GetBuffer(), 0, ms.Length) if your redis client\nsupport that or similar.\n\nOn 25 Apr 2017 5:39 p.m., \"nathvi\" <notifications@github.com> wrote:\n\n> I'm fine now with serializing an object and sending it to a Redis List,\n> but when I try and\n> pop it off into a byte[] and deserialize I'm getting a strange error.\n> First is my Cat definition:\n>\n> [ProtoContract]\n> public class Cat\n> {\n>     [ProtoMember(1)]\n>     public string Name { get; set; }\n>\n>     public Cat()\n>     {\n>     }\n>\n>     public Cat(string name)\n>     {\n>         Name = name;\n>     }\n> }\n>\n> And how I'm using it:\n>\n>     public override void Start()\n>     {\n>         base.Start();\n>\n>         Cat c1 = new Cat(\"Felix\");\n>         MemoryStream ms = new MemoryStream();\n>         Serializer.Serialize<Cat>(ms, c1);\n>         ms.Position = 0;\n>\n>         RedisClient.LPush(\"CatList\", ms.GetBuffer());\n>         byte[] catObject = RedisClient.LPop(\"CatList\");\n>         MemoryStream dStream = new MemoryStream(catObject);\n>         Cat dCat = Serializer.Deserialize<Cat>(dStream);\n>     }\n>\n> When executing the line:\n> Cat dCat = Serializer.Deserialize(dStream);\n> I'm getting this exception and I'm not sure why:\n> An exception of type 'ProtoBuf.ProtoException' occurred in\n> protobuf-net.dll but was not handled in\n> user code\n> Additional information: Unconsumed data left in the buffer; this suggests\n> corrupt input\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/240>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsDBzTN0IGvJyKQQTo6LXzxGm11Epks5rziHKgaJpZM4NHv_J>\n> .\n>\n. Well that's embarrassing. I suspect you're right! . Hi; for some reason all my usual github notifications got blown away, so I only noticed this because of @nathvi 's comment (I rebuilt all my notifications the other day). I will look this evening and see what's wrong.. I'm assuming that `myIP` is an `IPEndPoint`. For the purposes of testing this, I generated a random IP and am using:\r\n\r\n    var myIP = new IPEndPoint(IPAddress.Parse(\"220.5.105.207\"), 6379);\r\n\r\nThis fails in the way you describe.\r\n\r\nYou can see the problem here if we look at the stacktrace:\r\n\r\n```\r\nUnhandled Exception: System.Net.Sockets.SocketException: The attempted operation is not supported for the type of object referenced\r\n   at System.Net.IPAddress.get_ScopeId()\r\n   at IPAddressSurrogate.op_Implicit(IPAddress value) in C:\\Users\\mgravell\\Documents\\Visual Studio 2017\\Projects\\ConsoleApp12\\ConsoleApp12\\Program.cs:line 44\r\n```\r\n\r\nNotice that it is failing when accessing the `ScopeId`, and sure enough - if we *forget about protobuf*, and just look at `myIP.ScopeId`, that alone is enough to make it fail. So; let's assume we don't need that and just throw it away (remove `ScopeId` completely in the surrogate and operators).\r\n\r\nThis now (for me) fails with a complaint about no wire-value for `InterNetwork`. I think this is just because the surrogate feature was never intended to work with enums; if we remove all mention of `AddressFamilySurrogate`, the code now *runs*, but doesn't actually serialize anything - that's because `IPAddressSurrogate` has no members marked for serialization - but... on investigation, I don't think we even need `IPAddressSurrogate` - the only interesting property that we actually need to store is `IPString` - or the bytes equivalent. I'm going to stick with the `string` approach.\r\n\r\nNext I notice that the conversion operators are failing because of the `null` initial values - conversion operators on reference types need to handle `null` (usually by passing it through).\r\n\r\nAnd you don't seem to be storing the `Port`, which is essential.\r\n\r\nAt this point I took a step back, because I think you're making this **way, way** more complicated than necessary. I'm pretty sure that *all* you need is:\r\n\r\n```\r\n[ProtoContract]\r\npublic class IPEndPointSurrogate\r\n{\r\n\r\n    [ProtoMember(1)]\r\n    public string Address { get; set; }\r\n\r\n    [ProtoMember(2)]\r\n    public int Port { get; set; }\r\n\r\n    public static implicit operator IPEndPointSurrogate(IPEndPoint value)\r\n        => value == null ? null : new IPEndPointSurrogate { Address = value.Address.ToString(), Port = value.Port };\r\n\r\n    public static implicit operator IPEndPoint(IPEndPointSurrogate value)\r\n        => value == null ? null : new IPEndPoint(IPAddress.Parse(value.Address), value.Port);\r\n}\r\n```\r\n\r\nwith example usage:\r\n\r\n```\r\npublic static class P\r\n{\r\n    public static void Main()\r\n    {\r\n        RuntimeTypeModel.Default.Add(typeof(IPEndPoint), false)\r\n            .SetSurrogate(typeof(IPEndPointSurrogate));\r\n\r\n        var myIP = new IPEndPoint(IPAddress.Parse(\"220.5.105.207\"), 6379);\r\n        using (var ipStream = new MemoryStream())\r\n        {\r\n            Serializer.Serialize(ipStream, myIP);\r\n            ipStream.Position = 0;\r\n            var clone = (IPEndPoint)Serializer.Deserialize<IPEndPoint>(ipStream);\r\n            Console.WriteLine(clone.ToString());\r\n\r\n            // prove it worked:\r\n            Console.WriteLine(ReferenceEquals(clone, myIP)); // false, different objects\r\n            Console.WriteLine(Equals(clone, myIP)); // true, count as equivalent\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI'm not sure if I've answered the question, but...\r\n\r\nNote it will be *slightly smaller* if we use raw bytes intead:\r\n\r\n```\r\n[ProtoContract]\r\npublic class IPEndPointSurrogate\r\n{\r\n\r\n    [ProtoMember(1)]\r\n    public byte[] Address { get; set; }\r\n\r\n    [ProtoMember(2)]\r\n    public int Port { get; set; }\r\n\r\n    public static implicit operator IPEndPointSurrogate(IPEndPoint value)\r\n        => value == null ? null : new IPEndPointSurrogate { Address = value.Address.GetAddressBytes(), Port = value.Port };\r\n\r\n    public static implicit operator IPEndPoint(IPEndPointSurrogate value)\r\n        => value == null ? null : new IPEndPoint(new IPAddress(value.Address), value.Port);\r\n}\r\n```. I don't think there's much useful that protobuf-net can do for an `int` - using the base serializer should probably be fine. Does it work?. IMO the problem is here:\r\n\r\n    Encoding.ASCII.GetBytes(messageString)\r\n\r\nIt isn't clear what `messageString` is here, but a .NET `string` is **not** a valid way to pass around raw binary ([see previous blog entry](http://blog.marcgravell.com/2013/02/how-many-ways-can-you-mess-up-io.html)).\r\n\r\nCan you indicate what `messageString` is and where it came from?\r\n\r\nIf you **absolutely must** use a `string` for some reason, then base-64 is your friend (`Convert.ToBase64String()` and `Convert.FromBase64String()`). Otherwise, prefer something like `byte[]` or `Stream` for raw data.\r\n\r\nWhat redis client are you using? StackExchange.Redis supports `byte[]` - anything that accepts a `RedisValue` can take a `byte[]`. Redis itself is binary-safe.. at the raw redis level, you want `LRANGE` ; I can't advise on ServiceStack. Basically: if you can get the original binary back, I can help. Until you have the same binary data that you wanted to store, protobuf-net doesn't stand a chance of succeeding. It sounds like your blocker is upstream of protobuf-net.\r\n\r\nWorst case, if the problem is that your client doesn't work with binary: base-64. I'm closing this because it doesn't sound like a protobuf-net issue, but if I've misunderstood please reopen or ping me. I think this is already fixed; hard to tell if we fixed it the same way, as all I can see in the merge is a sea of red and green; that file has changed radically in the last day. But running the \"failing\" example gives:\r\n\r\n```\r\n#pragma warning disable CS1591\r\n[global::ProtoBuf.ProtoContract(Name = @\"Test\")]\r\npublic partial class Test\r\n{\r\n    [global::ProtoBuf.ProtoMember(1, Name = @\"fs\", IsPacked = true)]\r\n    public float[] Fs { get; set; }\r\n}\r\n#pragma warning restore CS1591\r\n```\r\n. Very much appreciated, but already found and fixed separately, and is going to be impossible to merge. Keep 'em coming, though!. I don't currently offer that, mostly because nobody has ever asked. If you have something in mind, feel free to ping me (marc.gravell@gmail.com), ideally spelling out whether you're after:\r\n\r\n- a specific feature addition / tweak\r\n- advice and guidance\r\n- troubleshooting / bug report\r\n- etc\r\n\r\nNote that I *have* recently added a librepay account in case anyone wants to make any donations, but: that is (by definition) not intended for work-in-kind things. https://liberapay.com/protobuf-net/donate. Ultimately, the protobuf format has no mechanism to express this. I could silently ignore them; would that be preferable?. if you `Deserialize<List<T>>`, how would you know whether to expect the shim or not? how would it work for append-only files? if the first list you append has nulls, the second list doesn't, and the third list does again? having a different *shape* depending on whether there are nulls or not is a very bad idea, IMO, and is going to lead to huge injuries - the effect is non-obvious.\r\n\r\nIMO the real fix here is: since you know you have nulls, manually create a root object that has a list *marked for nullable support*, and serialize *that* instead. Then it is in *your* control, and not down to the library to make arbitrary opinionated decisions.. wow, that's pretty cute; much obliged. merged and deployed, but I notice that \"generate\" now only works once - any ideas? I can take a look later, but obviously you're more familiar. I like that the errors move to the right squigglies, btw - I'm glad I went to the trouble of tracking the full token ranges :). also: it doesn't show the generated code when there are only warnings; this may or may not be the same issue. ah, got it; if it fails with an exception, the `exception` is returned in the JSON but not displayed anywhere; actual bug causing it to `throw` was mine. I fixed this, btw; https://github.com/mgravell/protobuf-net/commit/ca2ad112386bc188bca14e5f233376b350808ce8. works for me, thanks. powerful editor; like it!. ![image](https://cloud.githubusercontent.com/assets/17328/26458655/ccac5ec4-416b-11e7-85db-0a63d700966b.png)\r\n\r\nyay!. oh wow, that's worrying; does dummy.zip exist and have data in this minimal example? trying to repro locally.... k, can't repro with that code, because a: I don't have your `Pnl<T>` or `Holding` types, and b: I don't have your data, and if I do anything with an empty zip, the `ZipArchive` code exploded long before it gets near protobuf-net.. additional question: how large is the data when uncompressed?\r\n. > The error happens when there are at least 2 objects in the list. I can send the zip and the code to read it, if you'd like to take a look.\r\n\r\nYes please, very much. Sorry for drip-feeding comments here!. marc.gravell@gmail.com. Thank you, your email was perfect. I have isolated the problem (I know what is happening, where, and why), and a fix should be available this weekend. Good bug report, thanks.\r\n\r\nhttps://twitter.com/marcgravell/status/868397653939429376. fix deployed: https://www.nuget.org/packages/protobuf-net?NormalizedVersion=2.2.1. @newton3 do you have anything I can use to repro this? It is quite hard to diagnose *just* from a stacktrace - a minimal repro would make it a lot easier to find what the problem is. thanks; will look momentarily - as a temporary workaround (without even\nchecking): try adding [ProtoMap(DisableMap=true)] to the afflicted member\n\nOn 2 Aug 2017 9:06 p.m., \"Abhishek\" <notifications@github.com> wrote:\n\n> having difficulty with email - so created a repo for you to check out the\n> code - https://github.com/newton3/protobuf-2.3.1-error\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-319783048>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsA2SImziRsgnJ1GMidmlxjYr_xO1ks5sUNbNgaJpZM4Nm4Ke>\n> .\n>\n. I was hoping to look at it last night, but family stuff happened. I hope to\nhave a fix for this deployed very soon. No there is no global \"disable\nmaps\" switch right now.\n\nOn 3 Aug 2017 5:13 p.m., \"Abhishek\" <notifications@github.com> wrote:\n\n> @mgravell <https://github.com/mgravell> is there any workaround to apply\n> globally or at the type level? the Dictionary is being used at a number of\n> places and it is a huge change to find and fix all the members. Are you\n> going to open a new issue to track this ?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-320017180>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsDtrDDm3CuYicH1yMAQu7l4XyYSOks5sUfHFgaJpZM4Nm4Ke>\n> .\n>\n. K; cause has been identified and patch created; I'm just running the\nregression tests. Do I have your permission to use the code from your repro\nrepo to add to the test suite?\n\nMarc\n. Nuget is pushed: https://www.nuget.org/packages/protobuf-net/2.3.2\n\nRelease notes should auto-update in a few minutes:\nhttps://mgravell.github.io/protobuf-net/releasenotes\n\nOn 4 August 2017 at 16:33, Abhishek <notifications@github.com> wrote:\n\n> yes, thank you!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-320279956>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsCRtjfDvgcS1tK91Y1hU1nyWHCknks5sUznWgaJpZM4Nm4Ke>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. Regarding running protoc: do you actually need the includes? I am not involved in the official Google implementation, so I **cannot advise** on how to get protoc to behave, since that isn't my tooling. However! I do expose both protogen (the new incomplete rewrite) and protoc on my website:  https://protogen.marcgravell.com/\r\n\r\nRe ClaimsPrincipal; I don't know enough about that type. What do you actually need to serialize to store and rehydrate one of those? I genuinely don't know. However, protobuf-net includes features that allow you to get the serializer to automatically use a  simple DTO (serializaiton) type in place of a complex POCO object as long as you provide a method to get between them. So if you can say \"to work a ClaimsPrincipal I need to store a string, 3 integers and a boolean\" - then I can tell you how to get it to do that.. K\r\n\r\n## Option 0:\r\n\r\nMy *preferred* option would be to serialize an object model that just *doesn't have* the complex non-serializable thing in it. Leave that entirely in the code that is downstream. That isn't always possible, so:\r\n\r\n## Option 1:\r\n\r\nRetain your existing model, but have a shim property on your type; so while you might have:\r\n\r\n    public SomethingComplex ProblematicProperty {get;set;}\r\n\r\nyou could add:\r\n\r\n    [ProtoMember(12)]\r\n    private SomethingSimple ProblematicPropertySerialized {\r\n        get { /* convert from ProblematicProperty */ }\r\n        set { /* convert from value and assign into ProblematicProperty */ }\r\n    }\r\n\r\n(and you write a `SomethingSimple` type that meets your needs and works with the serializer)\r\n\r\nhowever, I acknowledge that this *also* isn't always possible. In that case, you can hack around it with...\r\n\r\n## Option 2\r\n\r\n a surrogate - the key point here is the `SetSurrogate` method which expects there to be conversion operators between the two types (on the assumption that you're writing the surrogate type specifically for this purpose, so that's fine); you can see this in the runnable example below. The idea is the same, but instead of using a shim property, the library does that step for you.\r\n\r\nAnd to answer your question: no, don't touch `ISerializable`\r\n\r\n```\r\nusing ProtoBuf;\r\nusing ProtoBuf.Meta;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var obj = new MyData { Id = 1, Foo = new ComplexNonSerializableClass() };\r\n\r\n        RuntimeTypeModel.Default.Add(typeof(ComplexNonSerializableClass), false)\r\n            .SetSurrogate(typeof(SimplerThingThatLooksSimilar));\r\n        var clone = Serializer.DeepClone(obj);\r\n    }\r\n\r\n\r\n    [ProtoContract]\r\n    public class MyData\r\n    {\r\n        [ProtoMember(1)]\r\n        public int Id { get; set; }\r\n        [ProtoMember(2)]\r\n        public ComplexNonSerializableClass Foo {get;set;}\r\n    }\r\n\r\n    public class ComplexNonSerializableClass\r\n    {\r\n         // ... real code here, obviously - although this probably isn't\r\n         // your type in the first place - it is probably a BCL type\r\n    }\r\n\r\n    [ProtoContract]\r\n    public class SimplerThingThatLooksSimilar\r\n    {\r\n        public static implicit operator SimplerThingThatLooksSimilar(ComplexNonSerializableClass other)\r\n        {   // ... real code here, obviously\r\n            return new SimplerThingThatLooksSimilar { Name = \"abc\", Whatever = 123 };\r\n        }\r\n        public static implicit operator ComplexNonSerializableClass(SimplerThingThatLooksSimilar other)\r\n        {\r\n            return new ComplexNonSerializableClass(); // ... real code here, obviously\r\n        }\r\n\r\n        [ProtoMember(1)]\r\n        public string Name { get; set; }\r\n        [ProtoMember(2)]\r\n        public int Whatever { get; set; }\r\n    }\r\n}\r\n```. I'm glad you were able to make progress; I'm going to close this, but feel free to ping me if there's something else.. The library always intends to be as compatible in every direction as possible. That is a key aim of both protobuf as a general concept, and protobuf-net as a specific implementation of protobuf.\r\n\r\nIn the case of DateTimeKind - this data is tagged in as an additional optional field. As you correctly assume, if an older library doesn't know what to do with that, it will just ignore it.\r\n\r\nNote that this is *not* always possible, though. As a specific example, Google added \"Timestamp\" as a common standard for storing date-time data (long after I'd written protobuf-net's DateTime representation). I plan to add `Timestamp` support in 2.3.0, probably doing something like:\r\n\r\n    [ProtoMember(1, DataFormat = DataFormat.WellKnown)]\r\n    public DateTime When {get;set;}\r\n\r\nThis uses a *different format*. If there was old code that used 2.1.0 (or whatever) and had (since `DataFormat.WellKnown` doesn't exist yet):\r\n\r\n    [ProtoMember(1)]\r\n    public DateTime When {get;set;}\r\n\r\nthen when *this* code tries to deserialize the time, it will *either* fail *or* silently come up with a nonsensical value. Ultimately, changing the `DataFormat` property of a member is *almost always* a breaking change in your data. I do not plan on changing the *default* `DateTime` / `DataFormat` matching, for exactly the reasons you highlight: compatibility.\r\n\r\nThe protobuf wire format has not changed *at all*, even with the addition of proto3 - so there shouldn't be any *fundamentally* changing ideas, at least until some hypothetical proto4; and if that happens, I would expect to add configuration options to *enable* this, so that nothing changes how existing code behaves. For example, if that happened, I would probably change:\r\n\r\n    public void Serialize<T>(Stream s, T value, ...\r\n\r\nto:\r\n\r\n    [Obsolete(\"Please explicitly specify the protocol version; Proto2 is assumed by default\")]\r\n    public void Serialize<T>(Stream s, T value, ...) => Serialize<T>(s, value, ProtocolVersion.Proto2);\r\n    public void Serialize<T>(Stream s, T value, ProtocolVersion version, ...)\r\n\r\nif that makes sense. Basically, I will always go out of my way to **avoid** making it easy to fail. Which is, IMO, the entire point of a library.. I literally threw `CommonCodeGenerator` together as a starting point. I'm completely open to other radical ideas, although also note that `CodeGenerator` (the base) doesn't use that pattern at all - it may be that is the better fit for your scenario?. they're right next to the file in your own link (top post); https://github.com/mgravell/protobuf-net/blob/parser/src/protogen/CodeGenerator.cs. There's also `[ProtoContract(EnumPassthru = true)]` at the enum level. Wouldn't it make more sense for your test to just use:\r\n\r\n    [ProtoContract(Name = @\"TestEnum\", EnumPassthru = true)]\r\n\r\n? I'm open to the *idea*; I'm just not sure that there's a *necessity* for it... and global options are almost always problematic, especially in complex systems where one bit of code expects the global option to be one way, and another bit of code expects it to be the opposite.. K; interesting thing I notice: in proto3 (and in contrast to proto2), there is a new additional paragraph that clarifies how it expects unknown enums to be handled:\r\n\r\n> During deserialization, unrecognized enum values will be preserved in the message, though how this is represented when the message is deserialized is language-dependent. In languages that support open enum types with values outside the range of specified symbols, such as C++ and Go, the unknown enum value is simply stored as its underlying integer representation.\r\n\r\nBecause of this, I think it is entirely reasonable for proto3-based generation to automatically include `EnumPassthru = true`. It helps that proto3 has more sensible rules for enums that make this more ... possible.\r\n\r\nI notice that RTB is implicitly a proto2 schema, so the interesting question *for me* is: \"should we interpret this paragraph as applying retrospectively to proto2?\". And if we do: what are the consequences? Are there problems where this will be actively harmful?\r\n\r\nLet me have a think about that. It *might* be that we can magic this away completely, especially if we detect that the enum looks proto3 compatible (meaning: the first enum item has the value of zero).\r\n\r\nIt looks like the RTB enums would satisfy this rule.\r\n\r\nThoughts?. Ooh, I also need to thank you for the example; looks like the upcoming 2.3.0 parser needs a few more tweaks - it fails on that proto schema ([see here](https://protogen.marcgravell.com/#g0435db396fa82fe2434ea4fab590b66f)) in two ways:\r\n\r\n- it doesn't expect hex numbers, giving \"unable to parse integers\" on everything in `NativeAdTemplate.Fields`\r\n- it fails to resolve `Hyperlocal.Point` correctly\r\n\r\nI expect both of these to be easy fixes - will have a look this evening.. The annoying problem with enums in C# is that they *don't have a defined order*, and in proto2 the order matters (because the first one is the default). I think the rule for automatic \"yeah, this is passthru\" should be:\r\n\r\n- if `[Flags]` or `[ProtoContract(EnumPassthru=true)]` - trivial case, explicitly pass-thru\r\n\r\notherwise:\r\n\r\n- if there's an enum definition with value zero\r\n- and if there is no enum definition that has a `[ProtoEnum(...)]` marker with a value that is **different** than the enum's native value\r\n- and if there is **not** a `[DefaultValue(...)]` on the *member* that gives a value *other* than zero\r\n\r\nthen: treat it as pass-thru\r\n\r\nI *think* that works......?. The more I think about it, the more I think we should *only* worry about this if there *is* a `[ProtoEnum]` with a non-matching value... i.e. do we *actually* need to do any mapping. If we don't: just pass it through as-is; which means *at the DSL layer*, both proto2 and proto3 can include this happily. It is only user-generated \"code-first\" enums that would ever have this problem.. What you say about `VideoFormat` is *fine* **if** we use the \"The more I think about it\" version, i.e. \"as long as we don't *know that there is* a conflict: use the simple rules\". This would only ever apply to \"I'm using enums that I wrote in my regular non-.proto code, and I've added ProtoEnum to remap the values\". This is a tiny edge case, and I'm OK if things are more complicated for that scenario. The default thing isn't a factor there - was just being paranoid - separate concern.\r\n\r\nBTW, I fixed the parser - it *almost* works perfectly for that .proto now - only issue is the *emitted* code doesn't give quite the right name - it says `public Point CenterPoint { get; set; }` when it should be `public Hyperlocal.Point CenterPoint { get; set; }`. That's a known issue (it was already in the \"Pending work items in generated code\" list) that I'll try to fix tonight.. @rstonkus \"exactly!\" - the fact that is unclear highlights how unusual a situation that is. But basically, protobuf-net supports the hypothetical situation where you have an enum:\r\n\r\n    enum Foo {\r\n        A = 0, B = 17, C = 42\r\n    }\r\n\r\nAnd **for whatever reason** you want to use that in a model that is (perhaps at a later date) being exposed to protobuf but where the protobuf enum has values 0, 1, 4. In that scenario you can add [ProtoEnum(Value = 1)] against B and [ProtoEnum(Value = 4)] against C, and those values will be used in the serialization. This is a very unusual scenario, and is the only one where the pass-thru would appear to be unsafe. Having a [ProtoEnum] marker by itself is fine, as is using the same value in the ProtoEnum and the .NET enum.\r\n\r\n. This will behave in the desired way in 2.3.0; tests (passing) have been added, etc; https://github.com/mgravell/protobuf-net/commit/b248af6487c9baf89d199868aa72695bf60ea4fa\r\n\r\nThe strict mode is enabled by **explicitly** setting `EnumPassThru` to `false`. This looks great, thanks; I expect the next deploy will be 2.3.0 in the next week; this will be included. Much appreciated. I'll hack the csproj this evening and create a 3.5 target. Basically, the\nproblem is:\n\n- VS2017 can target 3.5\n- dotnet CLI can't\n- I want the project to be trivially buildable via dotnet CLI\n\nI suspect I can add a different config that includes 3.5 support for use\nwhen building in VS.\n\nOn 10 Jun 2017 6:53 p.m., \"Qingfeng Tan\" <notifications@github.com> wrote:\n\n> Hi,\n> I am trying to rebuild this library to target framework .net 3.5. However,\n> when I got to the right clicked project name Protobuf-net, properties,\n> application tab, the target framework field is grayed out and can not be\n> changed.\n>\n> Is there a way to set the target framework to .net 3.5?\n>\n> Thank you!\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHNdOJ0MKAvSb5wJwWDprHzavBYvks5sCtgDgaJpZM4N2Laj>\n> .\n>\n. Yep; see this commit that I've made to the \"parser\" branch:\nhttps://github.com/mgravell/protobuf-net/commit/26f56e72dcd76d6389153f820fa6633477b3b242\n-\nanything similar should work. If you just want it for your local build,\njust change the targetframework to whatever you need\n\nOn 10 June 2017 at 19:44, Qingfeng Tan <notifications@github.com> wrote:\n\n> Hi,\n> Is it in the csproj file, just need to change:\n> net40;netstandard1.3\n> to\n> net3.5;netstandard1.3\n>\n> I can give it a try now.\n>\n> Thank you!\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262#issuecomment-307583134>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsNkfkNI_d3zd143snsy5dD5-DGv9ks5sCuQJgaJpZM4N2Laj>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. On the first: did you try adding a reference to System.Xml? This sounds\nlike the nuget pack problem that should be fixed soon - basically, the\nnuget pack tooling fails to properly record framework dependencies, so\ndownstream references aren't added when needed. You should be able to add\nmanually while that gets fixed.\n\nOn VS2008:\n\nis it possible: absolutely! but: not by me. I don't have VS2008 and have no\nintentions of installing VS2008 or supporting VS2008. However, it shouldn't\nbe necessary. I'd rather understand what the thing is that makes you want\nVS2008 to build this.\n\nOn 12 June 2017 at 20:04, Qingfeng Tan <notifications@github.com> wrote:\n\n> So after I created the dll from the vs2017 build, with target framework of\n> .Net3.5. Ireferenced it in a Windows Mobile 6.5 application. But unluckily,\n> that WM6.5 application had errors after I have reference the new dll. The\n> first error is:\n> The type 'System.Xml.Serialization.IXmlSerializable' is defined in an\n> assembly that is not referenced. You must add a reference to assembly\n> 'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=\n> b77a5c561934e089'.\n>\n> Another question I have is: Is it possible to convert this package\n> (protobuf-net) to a vs2008 solution and build it with target frame .Net3.5\n> in there?\n>\n> Thank you!\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262#issuecomment-307888576>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsDZY0KnWKcShfo8Ho3_TOCGyfu9Zks5sDYvCgaJpZM4N2Laj>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. I've checked the csproj, and xmlserializer isn't in there explicitly,\nexcept for the .net core builds; however, what you're seeing sounds like\nsomething that an assembly binding redirect should be able to solve. Again,\nthese are usually added automatically by nuget, but for the issue (that is\nbeing fixed, but it is a MS thing) with framework deps in dotnet cli.\n\nSee\nhttps://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/bindingredirect-element\n- you should be able to copy the required values directly out of the error\nmessage.\n\nOn 12 June 2017 at 21:59, Qingfeng Tan <notifications@github.com> wrote:\n\n> When I tried to remove the System.Xml version 2.0.0.0 referenced in the\n> protobuf-net solution, it gave an error:\n> [image: image]\n> <https://user-images.githubusercontent.com/17502718/27054839-699df83c-4f90-11e7-9da7-0ef933de7826.png>\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262#issuecomment-307927201>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsD0K3mX_VhyHcgs27r0fYte1bN2Aks5sDaaWgaJpZM4N2Laj>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. btw, if you want the full gory details:\nhttps://github.com/NuGet/Home/issues/4853\n\nOn 12 Jun 2017 11:02 p.m., \"Marc Gravell\" <marc.gravell@gmail.com> wrote:\n\nI've checked the csproj, and xmlserializer isn't in there explicitly,\nexcept for the .net core builds; however, what you're seeing sounds like\nsomething that an assembly binding redirect should be able to solve. Again,\nthese are usually added automatically by nuget, but for the issue (that is\nbeing fixed, but it is a MS thing) with framework deps in dotnet cli.\n\nSee https://docs.microsoft.com/en-us/dotnet/framework/\nconfigure-apps/file-schema/runtime/bindingredirect-element - you should be\nable to copy the required values directly out of the error message.\n\nOn 12 June 2017 at 21:59, Qingfeng Tan <notifications@github.com> wrote:\n\n> When I tried to remove the System.Xml version 2.0.0.0 referenced in the\n> protobuf-net solution, it gave an error:\n> [image: image]\n> <https://user-images.githubusercontent.com/17502718/27054839-699df83c-4f90-11e7-9da7-0ef933de7826.png>\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/262#issuecomment-307927201>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsD0K3mX_VhyHcgs27r0fYte1bN2Aks5sDaaWgaJpZM4N2Laj>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. Yeah, this isn't a package reference on regular .NET; it is a framework reference. Try:\r\n\r\n    <Reference Include=System.Xml\" />\r\n\r\nIt *is*, however, a package reference in .NET core. Build tools are fun :/ I have fun `Condition` markers to do things like this, for example in protobuf-net itself:\r\n\r\n```\r\n  <ItemGroup Condition=\"'$(ImportLibs)|$(FeatureServiceModel)' == 'net|true'\">\r\n    <Reference Include=\"System.ServiceModel\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n    <Reference Include=\"System.Runtime.Serialization\" />\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(ImportLibs)' == 'core'\">\r\n    <!-- could make this more granular to respect the options, but no need yet -->\r\n    <PackageReference Include=\"System.Reflection.Emit\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Reflection.Emit.ILGeneration\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Reflection.Emit.Lightweight\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Reflection.TypeExtensions\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Xml.XmlSerializer\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Runtime.Serialization.Primitives\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nHowever, I'm slightly confused because IIRC `System.Xml` is actually *included by default*. Sheesh.\r\n\r\nThe fact is the build tools are a bit of a mess right now (for .NET / .NET core generally, not this library specifically). It is causing me pain on a number of projects. Fixes are in the pipelines, but are outside of my control.. If you're targetting .NET 3.5, then it *is* System.Xml 2.0; .NET 3.5 are *incremental additions* to .NET 2.0 via additional assemblies; the base assembles do not change (except for bugfixes etc, but they didn't increase the major version).\r\n\r\nBecause `System.Xml.Linq` is one of those additions in .NET 3.5, *it* gets the 3.5 versioning; however `System.Xml`: does not - it stays 2.0\r\n\r\nIn .NET 4.0, they all become 4.0.. AFAIK (and I'm happy to be corrected): System.Xml 3.5 *does not exist*.. at least, not in regular .NET. If it exists in some Mono / Unity / whatever branch, then fine.. Closing issue; 2.3.0 will include 2.0 and 3.5 builds via the \"VS\" configuration (that only works in VS, hence the name). What is \"it\" in this context? What specifically are you looking for? Are you talking about the DSL parsing tools (protogen)? And if so, are you talking about the old version, or are you talking about the version that I'm working on for the 2.3.0 release? If you *aren't* talking about the DSL parsing tools... what *do* you mean?\r\n\r\nPlease be specific so I can address your question.. I'm happy to investigate, but I really need it to be clearer what you are after. Please could you explain more, otherwise I'll have to close it as unclear.. there is a brand new \"protogen\" tool in the \"parser\" branch, scheduled for\nrelease with 2.3.0\n\nOn 19 Jun 2017 12:16 a.m., \"\u8c22\u96c4\u5e73\" <notifications@github.com> wrote:\n\n> I am sorry for replay so late.\n> Yes, \"it\" is the DLS (protogen).\n> I will try the version,thanks.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/263#issuecomment-309309342>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsNIt4oLt-S8zRffyI7J-3fciLsg6ks5sFa-zgaJpZM4N5VNH>\n> .\n>\n. If what you are saying is \"comments are not carried over from the .proto into the generated code\": that indeed has not been looked at yet. Please can you clarify whether you mean \"comment line\" vs \"command line\"?. Got it; yes, totally agree we should get that, and I know (vaguely) what we need to do to get it - it just isn't done yet. I'm going to make this part of the 2.3.1 milestone; 2.3.0 is pretty much wrapped - I'm just doing regression / test suite updates (see PR #265); have updated the *branch* release notes (will hit master when I've finished the regression test): https://github.com/mgravell/protobuf-net/blob/parser/docs/releasenotes.md. note: what I'll *probably* do is : when I've finished everything I want for 2.3.0, I'll take a look at this - if it falls out easily, it'll move into 2.3.0 - otherwise I'll ship 2.3.0 and look at it as a separate piece of work\r\n\r\nnote to self: also implement `protogen --include_source_info`. Yes, it probably should; will target for 2.3.0. It surprises me that you've hit this, as this *should* only impact the runtime-only (reflection etc) implementation. Are you running on UWP or similar, by any chance? Anyway, fixed for 2.3.0. K; I can switch to `.FullName` which solves a lot of this (it expands generics), but do you have a minimal repro that I can use to validate? My attempt at a repro shows the concrete type name, not the interface; would really like to validate. fixed in 2.3.0. d'oh! you're absolutely right; fix applied to code, will be in 2.3.0 (which is in package prep). fixed in 2.3.0. Do you have an illustration of what your callback signature looks like? And you mention silver light: I'll be honest : it is increasingly hard to support silverlight, and many of the tools I need to build and test for that aren't tools that I have installed usually. If the fix requires a build (rather than a fix of your signature): it is going to be gnarly.. I would say that is the *correct* deserialization - protobuf (the google\nspec) is designed such that data is appended, not replaced.\n\nThe good news is that there are two ways to fix this:\n\n1) don't run the initializer during deserialization - you do this by adding\nSkipConstructor = true to the [ProtoContract]\n\n2) tell protobuf-net to not interpret the list data as append; add\nOverwriteList = true to the [ProtoMember]\n\nEither of these should achieve what you want\n\nOn 25 Jun 2017 12:22 p.m., \"vmas\" <notifications@github.com> wrote:\n\n> Sample (protobuf-net 2.2.1):\n>\n> [ProtoContract]\n> class A\n> {\n>     public A() { Values = new int[5]; }\n>\n>     [ProtoMember(1)]\n>     public int[] Values { get; set; }\n> }\n>\n> static void Main(string[] args)\n> {\n>      A a, b;\n>      a = new A();\n>      a.Values[0] = 5;\n>\n>      using (var ms = new MemoryStream())\n>      {\n>          Serializer.Serialize(ms, a);\n>          ms.Seek(0, SeekOrigin.Begin);\n>          b = Serializer.Deserialize<A>(ms);\n>      }\n>      Console.WriteLine(\"Sizes: {0}, {1}\", a.Values.Length, b.Values.Length);\n> }\n>\n> After deserialization *b.Values* contains 10 elements instead 5.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/273>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsPKT1O_uQ3AdYAJzKyFWjzUFrIDeks5sHkLbgaJpZM4OElLh>\n> .\n>\n. K, this is a complex one.\r\n\r\nCurrently, the support for .net native and UWP / AOT etc is limited. As back-story, historically there is a precompilation tool for protobuf-net that allows limited cross-platform pre-compilation of the IL pieces. This *kinda worked*, but was awkward, ugly, really hard to support, and just generally messy. Additionally, this is going to be a nightmare as we add \"async\" (on the roadmap).\r\n\r\nI don't think that is the way to go in the future, although the google code download still has the bits for this.\r\n\r\nI have repeatedly been talking with MS and other folks re better ways of doing code-gen for this and other scenarios, for two different needs - the code-first approach and the contract-first approach. There are a range of plans to improve what is available here in the mid-range future. Basically the plan is to split the non-IL pieces (the reader/writer, etc) into \"protobuf-net.Core\" or similar. Projects would target the .Core project if they have generated C#, or both .Core and protobuf-net if they want to use the runtime emitter. The idea being that AOT scenarios would fall into the first camp.\r\n\r\nAt the moment, though, that mostly doesn't exist.\r\n\r\nIn the r668 world there is a core-only project that uses reflection. We could probably resurrect that short term, but the performance won't be anything to shout about.\r\n\r\nSo: are you looking for something *today*? Or is this \"in the next n months\" stuff?\r\n\r\nI'm working on it; it exists on the roadmap; but it won't be there this week.. (Opps, accidentally closed - wrong button). quick question: are you a code-first person or a contract-first person?\nmeaning: is your serialisation model primarily in c#? or in .proto? (c#\ntends to be the norm for protobuf-net)\n\nOn 26 Jun 2017 7:04 a.m., \"Meinrad Jean-Richard\" <notifications@github.com>\nwrote:\n\n> Thanks for your fast response. I don't need it today, since it currently\n> works if I disable .net native. I'll need it as soon as I want to deploy it\n> to the store though. So next n months with n smaller than 6 :-)\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/274#issuecomment-310970894>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsO_CFuMvD5HFmogJl9j7IekGVL4Tks5sH0oKgaJpZM4OEpFX>\n> .\n>\n. that doesn't provide an immediate fix; it simply changes the starting point\nfor the serializer emit - Roslyn vs protocol/protogen, specifically. My\nusual approach is \"support everything, but get the thing being asked for\nmost: first\".\n\nOn 26 Jun 2017 9:04 a.m., \"Meinrad Jean-Richard\" <notifications@github.com>\nwrote:\n\n> I am a code-first person. I could however switch to contract-first if that\n> would solve my problem...\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/274#issuecomment-310990545>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsH4jLJwxAe056LgiyoJU5za6f4ptks5sH2YCgaJpZM4OEpFX>\n> .\n>\n. I am pretty sure that this is already fixed in 2.3.0 (available on nuget).\nCsnnyou try 2.3.0?\n\nOn 26 Jun 2017 10:57 a.m., \"Serj8500\" <notifications@github.com> wrote:\n\n> Hi!\n>\n> *Test project:* https://yadi.sk/d/cipeM9z63KTHVV\n>\n> *Description:* I serialize data into memory stream then I try to\n> deserialize it back. If I specify length for Deserialize() I receive\n> NullReferenceException. The problem has appeared after upgrade to the\n> latest version (2.2.1) - you can see it in the test project where I used 3\n> versions of the library: 2.2.1, 2.1.0 and 2.0.0.668\n>\n> In the test project the test for 2.2.1 fails with the message:\n>\n> Test Name: TestDeserializeWithLength_In_2_2_1\n> Test FullName: ProtoBufNet_2_2_1.UnitTest1.TestDeserializeWithLength_In_\n> 2_2_1\n> Test Source: C:\\Projects\\TestProtoBufNetVersions\\ProtoBufNet_2_2_1\\UnitTest1.cs\n> : line 24\n> Test Outcome: Failed\n> Test Duration: 0:00:00,0427232\n>\n> Result StackTrace:\n> at ProtoBuf.Meta.TypeModel.Deserialize(Stream source, Object value, Type\n> type, Int32 length, SerializationContext context)\n> at ProtoBuf.Meta.TypeModel.Deserialize(Stream source, Object value, Type\n> type, Int32 length)\n> at ProtoBufNetVersions.Logic.DeserializeWithLength(RuntimeTypeModel\n> model, Int32[] data) in C:\\Projects\\TestProtoBufNetVersions\\\n> ProtoBufNet_2_2_1\\Logic.cs:line 33\n> at ProtoBufNet_2_2_1.UnitTest1.TestDeserializeWithLength_In_2_2_1() in\n> C:\\Projects\\TestProtoBufNetVersions\\ProtoBufNet_2_2_1\\UnitTest1.cs:line 28\n> Result Message:\n> Test method ProtoBufNet_2_2_1.UnitTest1.TestDeserializeWithLength_In_2_2_1\n> threw exception:\n> System.NullReferenceException: Object reference not set to an instance of\n> an object.\n>\n> Best regards,\n> Sergey.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/275>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsHvOAF7HtLuQ3S4B58A_JtBUJXnSks5sH4CJgaJpZM4OFGi8>\n> .\n>\n. Looks good, thanks. It means it will either read zero bytes (already at the end of a stream,\nyou just didn't know), or it will consume an entire varint. Partial data is\nnot supported - if it reads an incomplete varint it will throw. TCP is a\nstream, so if you use this method on a NetworkStream it will still work as\nlong as the data arrives eventually.\n\nIf you are processing a back-buffer in a MemoryStream, you may have to\nmanually check for a complete varint - or just catch the exception. To\ncheck, you need to test at most 10 bytes to see if the MSB is zero. Once\nyou have a zero MSB, you're good to go.\n\n\nOn 9 Jul 2017 6:31 a.m., \"PM Extra\" <notifications@github.com> wrote:\n\nIn my case, if the stream data is split (tcp socket), and the received data\nis not a whole base128 variant. The TryReadLengthPrefix(source,\nPrefixStyle.Base128, out var length) will throw the exception\nEndOfStreamException.\n\nSo, what does the Try mean?\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/277>, or mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsKMSmIBIN0QbBWUM0gPdsniLqvAFks5sMGWdgaJpZM4OR9l4>\n.\n. you can add that check - or a try/catch - by the code that *calls* that\nmethod, sure.\n\nOn 10 Jul 2017 8:10 a.m., \"PM Extra\" <notifications@github.com> wrote:\n\n> @mgravell <https://github.com/mgravell> Thanks a lot. I am using a third\n> party socket framework and that process a back-buffer in a MemoryStream. So\n> shall we add the MSB check to the TryReadLengthPrefix method?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/277#issuecomment-314023877>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsC5BjixrcZ1a8_4towBxKFGVmIq3ks5sMc5zgaJpZM4OR9l4>\n> .\n>\n. There are a few things that make this more awkward when starting from interfaces. Firstly, we can't just serialize it as a Class1 - it would need to be wrapped appropriately, which would mean any interface members at the root level, which would then probably end up being duplicated at the type level (because people would forget to exclude them), which is especially problematic for lists / arrays.\r\n\r\nSecondly, it is very hard to deal with interfaces as the root object, since when using GetType() you lose the declared type and only have the concrete type. This would potentially make it serialize differently per context, which is very awkward. Likewise when the class type is used directly without mention of the interface.\r\n\r\nThis scenario is a lot more nuanced then is obvious. It would need very clear consideration as to how it would behave in a range of scenarios including (but not limited to) these cases.. > Can you explain why that is the case for an interface but not the case for a class that extends a base class?\r\n\r\nIt *is* the case for a base-class / sub-class. The difference is that a subclass doesn't usually re-declare (`new` etc) the same properties that the base class had. Most interface implementations, however: do.\r\n\r\n> Isn't this a good thing? You simply serialise it as a the concrete type which in my example is what I would like it to do.\r\n\r\nit *cannot* simply be serialized as the concrete type - that will not work in any way. During deserialization it needs to know what type to deserialize. Serializing it *as* the type itself includes **zero** such metadata, so you'd be thinking `IFoo` and seeing data for `Bar`, but with no clue that it is a `Bar`. This is why it needs wrapping in the first place.\r\n\r\n> Well yes, because its an interface it would serialise as whatever the underlying object is. Wouldn't that be what most people expect?\r\n\r\nSee above.\r\n\r\nThe aim is fine, but it isn't as simple as just serializing as the concrete type. As I say: any approach here would need very clear ideas of what should happen (ideally in terms of the data protocol) in each case.. No. The problem is that the serialization of a Foo does not include anything that says \"I'm a Foo\".\r\n\r\nIf we did that, then during deserialization: *how do you know what it should be*?. A lot of the code *does* use exactly GetType() etc. That doesn't change he nature of the problem in any way. Types don't change their members, so it doesn't matter when we check if it will be the same shape either way.. Because this stuff is nuanced :)\r\n\r\nThere are 3 different scenarios here, and we'd need to know how each should behave:\r\n\r\n- root objects via generic usage such as `Serialize<T>` uses `typeof(T)` IIRC\r\n- root objects via non-generic usage may or may not have a type specified\r\n- members inside types know the member's type\r\n\r\nFrankly, I don't think the problem that you're trying to solve is very clear at the moment. And the key point is: it isn't enough to serialize - we also need to be able to deserialize knowing just the interface.. Indeed, but we start getting into problems.\r\n\r\nConsider: in order to serialize such a model, we need to find the logical root, which in this case *probably is* the interface - so: imagine we have:\r\n\r\n    [ProtoContract, ProtoInclude(10, typeof(Foo))]\r\n    interface IFoo {\r\n       [ProtoMember(1)] int Id {get;set;}\r\n    }\r\n    [ProtoContract, ProtoInclude(10, typeof(Bar))]\r\n    class Foo : IFoo {\r\n        public int Id {get;set;}\r\n        // ...\r\n    }\r\n    [ProtoContract]\r\n    class Bar : Foo { ... }\r\n\r\nSo far so good. If we see a `Bar`, we need to build the model. Currently we just look at the `.BaseType`, which is simple and readily available - we find `Foo`, notice that there is an \"include\" and note that `Bar`'s logical root is `Foo`, and we start from there.\r\n\r\nSo; let's say we want to fully support interfaces. Now we need to look not just at the `.BaseType` of each level, but also at the interfaces implemented by each level - and check *them* for \"include\" directives. In theory that's fine - we can find `IFoo` easily enough and determine that `IFoo` is the logical root for `Foo` and `Bar`.\r\n\r\nNote that this is **not** the same as just serializing the concrete type - we need to start at the logical root in order to be able to deserialize correctly (we need to identify the correct type). This is one of the key points I was trying to call out earlier, although perhaps that is largely an implementation detail (it is a very important one). It would also be necessary to observe that adding an interface using this kind of \"include\" approach is fundamentally a breaking serialization change in the same way that adding a new base-type (with \"include\") is a breaking serialization change. But it can probably work - it just doesn't today.\r\n\r\nIt gets more complex, though - we'd need to think about what scenarios we don't support and how to message the user. For example:\r\n\r\n    [ProtoContract, ProtoInclude(10, typeof(SomeType))]\r\n    interface IFoo {...}\r\n    [ProtoContract, ProtoInclude(10, typeof(SomeType))]\r\n    interface IBar {...}\r\n\r\n    [ProtoContract]\r\n    class SomeType : IFoo, IBar { ... }\r\n\r\nThis *doesn't have* a sensible common root, and cannot be supported. Then we get into interfaces implementing interfaces (`IFoo : IBar`), etc. Should *that* work? \r\n\r\nThis is probably fine, for example:\r\n\r\n    [ProtoContract, ProtoInclude(10, typeof(IBar))]\r\n    interface IFoo {...}\r\n    [ProtoContract, ProtoInclude(10, typeof(SomeType))]\r\n    interface IBar : IFoo {...}\r\n    [ProtoContract]\r\n    class SomeType : IBar { ...}\r\n\r\nBut what if we get to the same concrete type via multiple paths?\r\n\r\n---\r\n\r\nWe also get into fun scenarios around unknown data and different versions of the contract; this is *mostly* the same scenario that we already have today for `abstract` classes, so it isn't drastically a new problem - but it is one that needs consideration\r\n\r\n---\r\n\r\nI guess the point I'm getting at here is that this is a complex problem. It isn't impossible to do it - but rather, it needs serious consideration and design and testing - plus of course whatever changes it needs to implement it, and document it, and update any now-wrong documents/questions on the topic, and fix any code regressions, and update any tests that now fail incorrectly because of the changes, and support these changes at every point in the future. We can't just shoe-horn it in with a 5 line hack. And before I take on significant pieces of work, I like to understand *why* we're doing it - i.e. what use case it supports that can't already be supported in other ways. Ultimately, time spent working on this is time not spent working on other code, so it is all a juggling act re how to spend resources (mostly: my time). It seems to me that everything here can already be achieved via a DTO layer. I'm not saying we can't do it, but I'd really want to explore what the **compelling example is** for doing it.. In the example you give, *during deserialization*, how would the code know to select `SomeType`? what members are serialized? are the members on `IFoo` serialized? or just those on `SomeType`? What happens if the list contains multiple different `IFoo` implementations? Why is `SomeType` tested for, specifically? What happens if there aren't any known `IFoo` implementations? What happens if I serialize a `SomeType` instance by itself? Does that look the same as an `IFoo` that *was* a `SomeType`? Does a `List<SomeType>` look identical to a `List<IFoo>`?\r\n\r\nThese are the questions that I'd need to get to the bottom of.. > When you start deserialising you know what you are deserialising due to the ProtoMember numbers in the data don't you? So from these you can infer the type that was serialised eg in this case SomeClass?\r\n\r\nHow? where did that number come from? If we take your specfic example: where would it get such a number from? The only possible place is a `[ProtoInclude]` on the interface,  which takes us back to the more complex scenario that I strongly suspect is the only way to do it.\r\n\r\n> When you start the deserialization process and you receive the memberNumber do you not look up the class of this member number? I'm not sure how this problem is unique to interfaces.\r\n\r\nThe member number only tells us that we're talking about the `ListOfIFoo` member.. If you mean \"treat all `IFoo` as though they were `SomeType`, and fail if one isn't, and just use `SomeType` during deserialization\"... then frankly I think it should be a `List<SomeType>`.... > It would get the number from SomeClass, it would never look at anything about the interface implementation.\r\n\r\nThat just tells us to expect IFoo. We don't know about SomeType from that\r\n\r\n> Upon deserialisation you check every single object Is An IFoo and cast it to IFoo\r\n\r\nI think the key thing you're missing here is context on how deserialization works and what data the protobuf stream contains. The ultimate problem is: the data in the raw stream doesn't tell us what type of object to create. A `List<Blah>` when deserialized doesn't create `Blah` instances \"because the data tells us to\". Rather, it creates `Blah` instances *because it is deserializing a `List<Blah>`*. As such, it interprets the data (which is otherwise unadorned) using the rules for `Blah`. So: you can't just deserialize and then cast to `IFoo` - we need to know what to actually do with the data that we see. This is what the \"logical root / include\" approach of protobuf-net does - it defines a set of conventions for interpreting an inheritance based model.. K; the way protobuf-net encodes that is essentially (to use `.proto` syntax):\r\n\r\n    message DTO {\r\n        repeated BaseClass listOfBase  = 5;\r\n    }\r\n    message BaseClass {\r\n        optional ExtendsBase1 _eb1 = 1;\r\n        optional ExtendsBase2 _eb2 = 2;\r\n    }\r\n    message ExtendsBase1 {\r\n        optional string Test3 = 3;\r\n    }\r\n    message ExtendsBase2 {\r\n        optional string Test4 = 4;\r\n    }\r\n\r\nwhere exactly zero or one of `_eb1` / `_eb2` are assigned a value (this could also use `oneof` in recent `.proto` versions). The sub-classes are mapped as *inner objects*, and the sub-class data always comes first. In JSON terms (although it isn't JSON - this is purely for example purposes), an object would look something like:\r\n\r\n    {\r\n       \"_eb1\": {\r\n        \"Test3\": \"foo\"\r\n      }\r\n    }\r\n\r\nDuring deserialization, we start with a `null` reference, and start resolving fields, and only create the instance when required (because of data fields, or at the end of any deserialization path). Since the first *actual data* we get is the `\"Test3\"`, it is *at that point* that we create the instance, which we know by the context should be a `ExtendsBase1`. If neither `_eb1` or `eb2` had a value, then we'd create a `BaseClass` instance on the way out (or when some data in that context was encountered, but there aren't any other fields in this case).\r\n\r\n---\r\n\r\nMy point in the comment yesterday is that we could apply this same logic to interfaces, **within certain constraints** - mainly around the topics of multiple inheritance (resolving to contract types) would be disallowed.\r\n\r\nSo essentially, it could be mapped with the interface as the root type:\r\n\r\n    message IFoo {\r\n        optional SomeType _st = 1;\r\n        optional SomeOtherType _sot = 2;\r\n    }\r\n\r\nwhich would map to:\r\n\r\n    [ProtoContract]\r\n    [ProtoInclude(1, typeof(SomeType))]\r\n    [ProtoInclude(2, typeof(SomeOtherType))]\r\n    interface IFoo {...}\r\n\r\nThis would allow us to deserialize an `IFoo` into any of the known / expected concrete types. This obviously has the issue that if no expected type is found in the data, then it can't instantiate - but that's actually the same problem we get for `abstract` base classes today, so that's not a new restriction.. This is #276 and is fixed and available on nuget: https://mgravell.github.io/protobuf-net/releasenotes. I can do a \"non pre-release\" build if it would help; I was waiting on\ndogfooding results, but we've been using 2.3.0-gamma on Stack Overflow\nsuccessfully, so we're probably OK for that smoke test.\n\nOn 13 Jul 2017 7:36 a.m., \"Lu Hao\" <notifications@github.com> wrote:\n\n> Sample (protobuf-net 2.2.1):\n>\n> using System.IO;using ProtoBuf;\n> namespace ConsoleApp7\n> {\n>     [ProtoContract]\n>     class A\n>     {\n>         static A() {}\n>\n>         [ProtoMember(1)]\n>         public int Value { get; set; }\n>     }\n>\n>     class Program\n>     {\n>         static void Main(string[] args)\n>         {\n>             using (var stream = new MemoryStream())\n>             {\n>                 var a = new A();\n>                 Serializer.Serialize(stream, a);\n>                 stream.Seek(0, SeekOrigin.Begin);\n>                 var b = Serializer.Deserialize<A>(stream);\n>             }\n>         }\n>     }\n> }\n>\n> It will throw \u201cSystem.InvalidProgramException:\u201cCommon Language Runtime\n> detected an invalid program.\u201d\u201d when deserializing. It works after I remove\n> the static constructor. However I need a static constructor in my project.\n> You can also see the case in https://github.com/HaleLu/ProtobufCase.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/279>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsIwVBIL4PGSM0UU642ZXlEPazZhcks5sNbr4gaJpZM4OWj95>\n> .\n>\n. 2.3.0 (non-gamma) is available. Ah, sub-types; yes, this is a bug - will be fixed 2.3.1\r\n\r\nSimply removing the `optional` should fix it, although it would be nice if it emitted `oneof` instead, really.... (reopening for tracking purposes). Will attributes suffice?\r\n\r\n```\r\npublic enum ViaAttribs\r\n{\r\n    [ProtoEnum(Name = \"a\")]\r\n    X,\r\n    [ProtoEnum(Name = \"b\")]\r\n    Y\r\n}\r\n```\r\n\r\nwhich gives:\r\n\r\n```\r\nenum ViaAttribs {\r\n   a = 0;\r\n   b = 1;\r\n}\r\n```\r\n\r\nIf not, I can check whether they can be tweaked via `RuntimeTypeModel`.. I'll investigate; there's a chance it isn't currently supported, in which case it'll need to wait for 2.3.1. Needed a code change; this will work in 2.3.1 (or if you build locally):\r\n\r\n```\r\n        [Fact]\r\n        public void TestEnumProto_Proto2_RuntimeRenamed()\r\n        {\r\n            var model = TypeModel.Create();\r\n            model[typeof(HazEnum.SomeEnum)][1].Name = \"zzz\";\r\n            var schema = model.GetSchema(typeof(HazEnum), ProtoSyntax.Proto2);\r\n            Assert.Equal(@\"syntax = \"\"proto2\"\";\r\npackage ProtoBuf.Serializers;\r\n\r\nmessage HazEnum {\r\n   optional SomeEnum X = 1 [default = B];\r\n}\r\nenum SomeEnum {\r\n   B = 0;\r\n   zzz = 1;\r\n   C = 2;\r\n}\r\n\", schema);\r\n        }\r\n```. I suspect that you're seeing some reference confusion - you're main project is probably still referencing the nuget version. Make sure you've completely removed any protobuf-net references before trying to switch to the local build version.\r\n\r\nThe version in git is definitely read/write: https://github.com/mgravell/protobuf-net/blob/master/src/protobuf-net/Meta/ValueMember.cs#L779. MemoryStream would be the normal way to do this in .NET; I'm not sure\nthere's a need for a specific method to do this. no other .NET serializer\nthat I can think of wraps that up. Thought: is it actually needed?\n\nOn 15 Jul 2017 8:54 p.m., \"sbardos\" <notifications@github.com> wrote:\n\n> RabbitMQ expects a byte array (byte[]) as message.\n> Is there a way to get a byte array back from the serializer?\n>\n> At the moment I write to a Memorystream and get the byte array from there.\n>\n> Thx,\n> Sven\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/282>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsG9wkrh4AdJAReoYAvYqmAyXOnxaks5sORjigaJpZM4OZHEv>\n> .\n>\n. See, when I'm talking binary serializers, I always think of them as writing\n*to* somewhere - a file, a network, etc....\n\nOn 15 July 2017 at 22:32, sbardos <notifications@github.com> wrote:\n\n> Hm, not sure. In case of JSON, serializer returns a string, right? I think\n> this is because one can presume that applications that act on JSON can\n> handle strings as data by default. How is it with protobuf? I think byte\n> array won't be to esoteric.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/282#issuecomment-315564636>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsN3JaxhJUafORG0cAkACdbyHOxH4ks5sOS_rgaJpZM4OZHEv>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. the main reason for that is that I dont have a setup or the experience /\nneed to build and test CF 3.5. The actual code is probably fine. Does CF\nsupport .NET Standard of any flavor? that would be the easiest thing for me\nto support, as I won't require a separate build etc.\n\nOn 17 Jul 2017 4:46 p.m., \"Matt Shindala\" <notifications@github.com> wrote:\n\n> Hi,\n>\n> I'm trying to parse proto3 messages on a device running Compact Framework\n> 3.5. From what I understand, Google's official implementation\n> <https://github.com/google/protobuf/tree/master/csharp> doesn't support\n> Compact Framework at all. From reading your README, protobuf-net supports\n> Compact Framework 3.5 only up to version 2.1.0, and after that it dropped\n> support.\n>\n>    - Does v2.1.0 support proto3?\n>    - Do you know of any other way to get proto3 messages parsed on a\n>    Compact Framework 3.5 device?\n>\n> Thanks.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/283>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsDnFb1wjPolMdbERwRtXUo0HHI73ks5sO3VogaJpZM4OaFUm>\n> .\n>\n. Can I ask: what build environment do you use? Are you restricted to VS2008?\n\nOn 17 Jul 2017 6:10 p.m., \"Matt Shindala\" <notifications@github.com> wrote:\n\n> As far as I know CF does not support .NET Standard, unfortunately.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/283#issuecomment-315817918>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsLZ_pzJwrYSjUdMrD91hJIZOXec8ks5sO5VTgaJpZM4OaFUm>\n> .\n>\n. That's what I thought and is the crux of the difficulty for me. I don't have\r\nVS2008, and I don't really want to install VS2008, etc. It is a major PITA\r\nto support, unfortunately.\r\n\r\nI'm open to good ideas here.... > Why is it such a PITA to support?\r\n\r\nbecause a: I don't *have* those things setup currently, b: I don't use CF to know if it *works*, and c: it means I need to create and maintain an entirely separate set of project files / build scripts (the new format csproj is not going to work with VS2008 build tools). and d: because it will mean manually creating and maintaining a nuspec, since I don't think I can include that separate build from `dotnet pack`. Are you able to add :\r\n\r\n    RuntimeTypeModel.Default[typeof(BaseClass)]\r\n        .AddSubType(12, typeof(ChildClassA));\r\n\r\nsomewhere at app startup? That would seem a better option. Obviously change 12 to a sensible number.. there are very good reasons that injeritance in protobuf-net starts at the\nroot not the leaf. i don't see any way to implement deserialization\nsensibly with leaf-oriented layout. how wouod you propose that would work,\nwith consideration of what gets stored and how that is interpreted?\n\nOn 19 Jul 2017 3:30 p.m., \"chrishaly\" <notifications@github.com> wrote:\n\n> This method can partial solve my problem. In my project i can control the\n> startup.\n> However some of library projects will provide to others use.\n>\n> In some document about Protobuf 3, have two solution for Inheritace: one\n> is use oneof equals to ProtoInclude and the other is \"Composite\" define a\n> property with type is base class.\n>\n> If use ProtoInclude there a two little flaw\n>\n>    1. When add or remove a child class, you should modify base class.\n>    2. Consider about byte size of field number, use which number as the\n>    first ProtoInclude argument sometimes becomes a question.\n>    Since if use a small number when need to add filed to base class the\n>    property field number will greater than child class field number, and then\n>    add a child class, the child class field number will greater than some\n>    property field number, I think it's a little problem.\n>    But if use a great enough number will west of memory and network\n>    bandwidth.\n>\n> Considering these problem, I prefer to add a ProtoInheritAttribute, in\n> .net one class only have one base class just set the base class field\n> number to 1.\n>\n> How do you think?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/284#issuecomment-316405909>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGPlofpOzD9fTOIlFL0caXAVG9iiks5sPhL_gaJpZM4OcOHr>\n> .\n>\n. will happily review, but would ideally like some words first - i.e. how is\nit modelling this at the serialization format layer? what are the rules?\nKinda like the info in this answer:\nhttps://stackoverflow.com/a/45162348/23354\n\nOn 6 Aug 2017 3:06 p.m., \"Chris Huang\" <notifications@github.com> wrote:\n\n> @mgravell <https://github.com/mgravell>\n> I've improved the code for ProtoInherit please help me to review\n> master...chrishaly:master\n> <https://github.com/mgravell/protobuf-net/compare/master...chrishaly:master>,\n> if it's ok I will create a pull request. Or else please give me some advise.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/284#issuecomment-320509132>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsAkdRxxALHZqDt8kxaiX94OzIQyuks5sVch_gaJpZM4OcOHr>\n> .\n>\n. right; now with that layout, there are certain restrictions and limitations\nthat are imposed, in particular relating to polymorphism - you basically\nneed to know the exact concrete type in order to deserialize, which is the\nopposite of the LSP / regular inheritance.\n\nI'm not trying to labor the point but I want to be really really clear in\nmy mind: what is the target scenario here? When would this be more\nappealing than the existing inheritance approach?\n\nOn 7 Aug 2017 5:52 a.m., \"Chris Huang\" <notifications@github.com> wrote:\n\n>\n>    - the ProtoInherit is used on SubType, which treat BaseType as a\n>    (virtual) Field\n>    - Field number of BaseType suggest to be 1, in .NET just support\n>    single inheritace\n>    - just keep in concrete class fieldNumber of ProtoInherit not\n>    duplicate with fields & ProtoInclude's fieldNumber, no need to think about\n>    field number in BaseType or it's SubType.\n>    usage as following, MessageChild is equals to MessageChildB\n>\n>         [ProtoContract]\n>         public class MessageBase\n>         {\n>             [ProtoMember(1)]\n>             public int Id { get; set; }\n>         }\n>\n>         [ProtoContract]\n>         [ProtoInherit(1)] //fieldNumber_inherit\n>         //[ProtoInclude(fieldNumber_include_x)] //if exist\n>         public class MessageChild : MessageBase\n>         {\n>             [ProtoMember(2)] //fieldfieldNumber_include_x\n>             public string Name { get; set; }\n>         }\n>\n>         [ProtoContract]\n>         public class MessageChildB\n>         {\n>             [ProtoMember(1)]\n>             public MessageBase Base { get; set; }\n>\n>             [ProtoMember(2)]\n>             public string Name { get; set; }\n>         }\n>\n> about fieldNumber it said that fieldNumber_inherit, fieldNumber_include_x,\n> fieldfieldNumber_include_x must be unique as above.\n>\n> in terms of proto2 syntax:\n>\n> message MessageBase {\n>     optional int32 Id = 1;\n> }message MessageChild {\n>     optional MessageBase _Base = 1;\n>     optional string Name = 2;\n> }message MessageChild {\n>     optional MessageBase Base = 1;\n>     optional string Name = 2;\n> }\n>\n> in terms of proto3 syntax:\n>\n> syntax = \"proto3\";\n> message MessageBase {\n>     int32 Id = 1;\n> }message MessageChild {\n>     MessageBase _Base = 1;\n>     string Name = 2;\n> }message MessageChildB {\n>     MessageBase Base = 1;\n>     string Name = 2;\n> }\n>\n> oneof is not sutable for ProtoInherit.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/284#issuecomment-320568371>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsINQp3eemnc89P1sifHIlzb8aTulks5sVpgqgaJpZM4OcOHr>\n> .\n>\n. The interesting challenges re inheritance aren't when you *know* what the concrete type is. They are when you *don't know* - and only know about the base type. From what I can see, this code will only work in the \"we know what the exact actual type will be\" scenario. This is indeed *a valid scenario*, but is the small %, not the large %.\r\n\r\nIs this the intention? Have I misunderstood?. No, I mean when you don't know what the **derived** type is. For example, with :\r\n\r\n    Vehicle\r\n    RoadVehicle : Vehicle\r\n    Car : RoadVehicle\r\n    Bike : RoadVehicle\r\n    Train : Vehicle\r\n\r\nAnd all you know to expect is a Vehicle. Ultimately this is the problem that ProtoInclude solves via root-based serialization. What you have is leaf-based serialization, which only works for specific types - it would be fine if you know to expect a Car, for example.\r\n\r\nIs this an intentional limitation?. closing as duplicate of #289 (technically this one was first obviously, but status update is already in 289). Yes, I saw the two questions (One of them even has or had a bounty, which is awesome). This is already on my list to look at, but I have not had time to look in the last few days as my daughter is unwell. Thanks for adding a github issue though - it will make it easier to track and make sure I investigate.. No judgement implied. I've simply been up to my eyeballs (busy), with barely enough time for critical bug fixes. Will get to it.. Not currently, no.\n\nOn 2 Aug 2017 6:21 a.m., \"Rush Frisby\" <notifications@github.com> wrote:\n\n> To work around protobuf-net's handling of Guids which other languages\n> don't know how to work with I've ended up doing this a lot:\n>\n> [DataContract]public class TestResult\n> {\n>     public Guid Id { get; set; }\n>\n>     [DataMember(Order = 1)]\n>     private string IdValue\n>     {\n>         get\n>         {\n>             return Id.ToString();\n>         }\n>         set\n>         {\n>             Id = Guid.Parse(value);\n>         }\n>     }\n> }\n>\n> This can get messy if Guids are used a lot and I'd like to use a surrogate\n> instead:\n>\n> RuntimeTypeModel.Default.Add(typeof(Guid), true).SetSurrogate(typeof(GuidSurrogate));\n>\n> however, I get this runtime exception:\n>\n> System.ArgumentException: 'Data of this type has inbuilt behaviour, and\n> cannot be added to a model in this way: System.Guid'\n>\n> Is there any way to get around this?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/292>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsKfaYB60r8IuQ4QdTioS9SorXg86ks5sUAdRgaJpZM4OqnLZ>\n> .\n>\n. I haven't written a single line of code there. All I've done is read the\nspec and think about options. So there is nothing to play with *right now*.\n\nOn 7 Aug 2017 8:15 a.m., \"\u6124\u6012\u7684TryCatch\" <notifications@github.com> wrote:\n\n> [image: 12]\n> <https://user-images.githubusercontent.com/9330061/29015990-fc52725c-7b82-11e7-9679-01a03c496c5a.png>\n>\n> I see the V3 version plan to support GRPC and whether GRPC can be\n> supported in advance\uff1f\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/294>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsErfz2nVRFF75I4Y-31EauxUgSTpks5sVrmsgaJpZM4OvEsZ>\n> .\n>\n. In the C#, I assume that is a System.DateTime, not your own DateTime message? In which case indeed: the way that protobuf-net will encode that System.DateTime is not the same as your DateTime message in the .proto\r\n\r\nGood news: fixable.\r\n\r\nOptions:\r\n\r\n- if you need to keep the DateTime from your .proto, you can do that but you'll need to create a .NET type that looks like that - presumably simply by running your .proto through protogen (https://protogen.marcgravell.com is the easiest way to do this)\r\n- alternatively, use `google.protobuf.Timestamp`, the \"well known\" mechanism to express date/time info - protobuf-net supports this, including protogen (you'll need to import \"google/timestamp.proto\") and code-first (use DataFormat.WellKnown on that property); note that this option replaces the DateTime you've defined in your .proto and will change the data - and the change needs to be shared between all callers\r\n\r\nOther options exist, but those are the simplest. Note: if you have existing protobuf-net data that was serialized with the class shown, and you want to deserialize that in another client - then: it gets harder. Until relatively recently there was no \"well known\" format for dates/times, so protobuf-net invented one. Unfortunately the representation it used is not the one that got chosen, and is awkward to use from other clients. There is a .proto for it, though - see bcl.proto / DateTime: https://github.com/mgravell/protobuf-net/blob/master/src/Tools/bcl.proto\r\n\r\nIf possible, when using cross-platform clients, I suggest moving to the new \"well known\" formats for dates/times, but: this is fundamentally incompatible with any existing data stored using the bcl.proto approach.. thats very odd; I will need to take a look, but that \"actual\" indeed looks\nvery unlikely\n\nOn 10 Aug 2017 8:13 a.m., \"mizuno-gsinet\" <notifications@github.com> wrote:\n\n> I have encountered the following problem:\n>\n> using System.Collections.Generic;using ProtoBuf;using ProtoBuf.Meta;\n> namespace ProtobufNetTest\n> {\n>     [ProtoContract(IgnoreListHandling = true)]\n>     public class Inner : List<int>\n>     {\n>         [ProtoMember(1)]\n>         public int Int { get; set; }\n>     }\n>\n>     [ProtoContract]\n>     public class Outer\n>     {\n>         [ProtoMember(1)]\n>         public bool Bool { get; set; }\n>\n>         public Inner Inner { get; set; }\n>     }\n>\n>     public class Program\n>     {\n>         public static void Main(string[] args)\n>         {\n>             var typeModel = TypeModel.Create();\n>             typeModel.UseImplicitZeroDefaults = false;\n>\n>             typeModel.Add(typeof(Outer), true)\n>                 .AddField(2, \"Inner\");\n>             System.Diagnostics.Trace.WriteLine(typeModel.GetSchema(typeof(Outer), ProtoSyntax.Proto3));\n>         }\n>     }\n> }\n>\n> Expected output:\n>\n> syntax = \"proto3\";\n> package EFTest;\n>\n> message Inner {\n>    int32 Int = 1;\n> }\n> message Outer {\n>    bool Bool = 1;\n>    Inner Inner = 2;\n> }\n>\n> Actual output:\n>\n> syntax = \"proto3\";\n> package EFTest;\n>\n> message Outer {\n>    bool Bool = 1;\n>    repeated int32 Inner = 2 [packed = false];\n> }\n>\n> Of course, this is not my actual usage, but I really miss this behavior.\n> Am I missing some points?\n>\n> Thank you.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/297>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsPSg0TBjkN7Mw0IehmpvKie3VB4Bks5sWq21gaJpZM4OzCEd>\n> .\n>\n. Always. There isn't a specific build for them because the library doesn't\nneed any 4.5.2 etc runtime features. It should already install just fine\nand work just fine.\n\nIf you are seeing a problem please let me know (with details).\n\nOn 11 Aug 2017 12:04 p.m., \"Rahul Kate\" <notifications@github.com> wrote:\n\n> When support for Dot.Net framework 4.5.2/4.6 available in protobuf-net\n> library?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/298>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsAP2iqfMFOZy3HgkwWYc-IF16_3_ks5sXDVFgaJpZM4O0hQf>\n> .\n>\n. K, where did you get the protogen that you're using? Is this the ancient\nGoogle download? Or have you build the current code from source?\n\nIf the latter: it should simply work - interface is much like protoc and it\nshould JustWorkTM. If you don't want to build from source, the tool is\navailable for online usage at protogen.marcgravell.com - the work to\npackage and deploy protogen as a convenient tool is still on the pending\nlist.\n\nOn 14 Aug 2017 3:10 p.m., \"kongbu0621\" <notifications@github.com> wrote:\n\n> How to generate *.cs for *.proto by protoGen.exe, version is 2.3.3?\n>\n> There is a System.BadImageFormatException when protoGen.exe is run. so I\n> can't generate *.cs for *.proto, version is 2.3.3\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/299>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsK9rzD2YAmNKSuldHecqT8n1EFsgks5sYFVsgaJpZM4O2a0o>\n> .\n>\n. What am I looking at here? (The text)\n\nRe recursion: child properties / list elements will be onward calls. If you\nhave a recursive model, the code itself will usually spot that and complain\nloudly (it starts tracking after a set depth)\n\nOn 21 Aug 2017 8:29 p.m., \"Sergey Morenko\" <notifications@github.com> wrote:\n\n> I've getting stack overflow exceptions and can not figure out what is\n> wrong with the data mode, so added logs to TypeSerializer into public\n> void Write(object value, ProtoWriter dest) method and logged all object\n> ids (I thought, should be some circles during the serialization, but all\n> looks fine)\n>\n>  CXR:903:531:5988.34:46:D  3\n>  CXR:903:531:5989.1:47:D  3\n>  CXR:903:431:5988:51:D  3\n>  CXR:903:131:5991.44:1333:D  3\n>  CXR:903:131:5991.55:1334:D  3\n>  CXR:903:131:5993.08:1328:D  3\n>  CXR:903:131:5994.88:1392:D  3\n>  CXR:903:131:5996.48:1358:D  3\n>  CXR:903:131:5997.33:1365:D  3\n>  CXR:903:131:5998.1:1688:D  3\n>  CXR:903:131:5999.11:1687:D  3\n>  CXR:903:131:5999.9:1364:D  3\n>  CXR:903:131:6000.64:4262:D  3\n>  CXR:903:131:6001.52:4263:D  3\n>  CXR:903:131:6003.16:1651:D  3\n>  CXR:903:131:6004.42:1366:D  3\n>  CXR:903:131:6004.94:1367:D  3\n>  CXR:903:9031:6004.67:9268:D  3\n>  CXR:903:9031:6002.67:9267:D  3\n>  CXR:903:9031:6000.73:62:D  3\n>  CXR:903:9031:5998.73:66:D  3\n>  CXR:903:9031:5996.39:9236:D  3\n>  CXR:903:9031:5994.41:9239:D  3\n>  CXR:903:9031:5992.81:9252:D  3\n>  CXR:903:531:5991.78:50:D  3\n>  CXR:903:531:5993.31:54:D  3\n>  CXR:903:531:5994.46:57:D  3\n>  CXR:903:531:5995.22:58:D  3\n>  CXR:903:531:5996.37:59:D  3\n>  CXR:903:9031:5997.47:9657:D  3\n>  CXR:903:531:5997.9:60:D  3\n>  CXR:903:531:5999.43:63:D  3\n>  CXR:903:9031:5999.74:64:D  3\n>  CXR:903:531:6000.96:65:D  3\n>  CXR:903:531:6001.93:38:D  3\n>  CXR:903:531:6001.93:38:D:CPG-04B  3\n>  CXR:903:531:6002.69:61:D  3\n>  CXR:903:531:6003.89:67:D  3\n>  CXR:903:531:6005.1:69:D  3\n>  CXR:903:531:6005.75:71:D  3\n>  CXR:903:531:6005.82:72:D  3\n>  CXR:903:531:6005.89:73:D  3\n>  CXR:903:531:6005.96:74:D  3\n>  CXR:903:231:6005.81:2034:D  3\n>  CXR:903:231:6005.35:2033:D  3\n>  CXR:903:231:6004.88:2038:D  3\n>  CXR:903:231:6004.41:2039:D  3\n>  CXR:903:231:6003.87:2040:D  3\n>  CXR:903:231:6003.25:2037:D  3\n>  CXR:903:231:6001.46:79:D  3\n>  CXR:903:1031:5999.86:210:D  3\n>  CXR:903:1031:6000.76:213:D  3\n>  CXR:903:1031:6000.96:214:D  3\n>  CXR:903:1031:6001.16:215:D  3\n>  CXR:903:1031:6001.36:216:D  3\n>  CXR:903:1031:6001.56:217:D  3\n>  CXR:903:1031:6001.76:211:D  3\n>  CXR:903:1031:6001.96:212:D  3\n>  BLKL:BCEAO-3:D  4\n>  BCEAO-3  3\n>  BLKL:BCEAO-3:U  4\n>  CXR:903:1031:5999.86:210  3\n>  TPS:903:1031:5999.86:210  6\n>  CXR:903:131:5998.1:1688  3\n>  TPS:903:131:5998.1:1688  6\n>  CXR:903:9031:5996.39:9236  3\n> etc\n>\n> a bit strange while each item min by three but as per log there're each\n> after another\n>\n> 2017-08-21 14:38:41,956 DEBUG [ProtoBuf.Serializers.TypeSerializer 13] - CarrierDownlink Id: CXR:903:131:5993.08:1328:D\n> 2017-08-21 14:38:41,956 DEBUG [ProtoBuf.Serializers.TypeSerializer 13] - CarrierDownlink Id: CXR:903:131:5993.08:1328:D\n> 2017-08-21 14:38:41,975 DEBUG [ProtoBuf.Serializers.TypeSerializer 13] - CarrierDownlink Id: CXR:903:131:5993.08:1328:D\n>\n> Is ther're any any recursion calls?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/300>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsBIFnGRacuy97iPPSs19_u7Mv2-uks5sadqagaJpZM4O9u29>\n> .\n>\n. Hey all.\n\nIf you use the latest build, \"map\" behavior is assumed by default when\npossible (to match proto3) - this means that dictionaries replace rather\nthan add. You can override this if needed, but: it would seem a simple\nsolution.\n\nOn 11 Sep 2017 3:51 p.m., \"Lucian Bargaoanu\" <notifications@github.com>\nwrote:\n\n> Maybe @mgravell <https://github.com/mgravell> will see it your way. I\n> don't :)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/306#issuecomment-328554375>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsBG9pl30itlgf4hefA2wEr6Vmta8ks5shUkAgaJpZM4PSxnA>\n> .\n>\n. At the moment it *essentially* uses list add here; however, for fixed size data like `float`, *if* the data is using \"packed\" encoding (which isn't the default, but which you should *really* use here - it would be much more efficient), then it is possible to pre-compute the array length. This is part of the optimizations that are planned for the \"when we get better codegen\" work, but: right now this isn't implemented.. 2.3.2 already targets 2.0\n\ncan you be more specific about what you're seeing?\n\nOn 21 Oct 2017 11:05 a.m., \"sophiepeithos\" <notifications@github.com> wrote:\n\n> there are many Unity users who want to use proto3 but can't upgrade their\n> mono compiler.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/314>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsOjD0jNcskdapikWeFpn7_D3x3_1ks5sucIAgaJpZM4QBgyf>\n> .\n>\n. It is possible you mean the language version, not the .net version. If so,\nplease indicate what language version is available to you. Is it really\nonly C# 2.0?\n\nOn 21 Oct 2017 2:14 p.m., \"Marc Gravell\" <marc.gravell@gmail.com> wrote:\n\n> 2.3.2 already targets 2.0\n>\n> can you be more specific about what you're seeing?\n>\n> On 21 Oct 2017 11:05 a.m., \"sophiepeithos\" <notifications@github.com>\n> wrote:\n>\n>> there are many Unity users who want to use proto3 but can't upgrade their\n>> mono compiler.\n>>\n>> \u2014\n>> You are receiving this because you are subscribed to this thread.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/mgravell/protobuf-net/issues/314>, or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AABDsOjD0jNcskdapikWeFpn7_D3x3_1ks5sucIAgaJpZM4QBgyf>\n>> .\n>>\n>\n. Right; so it is definitely a language version issue. What is the exact\ncompiler (including version) in play here? Presumably mcs, but what version?\n\nOn 21 Oct 2017 6:51 p.m., \"sophiepeithos\" <notifications@github.com> wrote:\n\n> protogen generates code like this\n> public string Query { get; set; } = \"\";\n> then unity will complain error CS1519: Unexpected symbol `=' in class,\n> struct, or interface member declaration\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/314#issuecomment-338420445>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsA0VVb8k4T6MiBY6PJvmbXFV2PS7ks5sui8xgaJpZM4QBgyf>\n> .\n>\n. I've been trying to lean heavily on MS folks to support improved build-time\ncodgen tools as a replacement for the old prevent tooling in protobuf-net.\nIt is very hard to support or work with that tooling. I don't have great\nanswers there, especially since the main utility it uses for most of the\nevil bits (IKVM) has been abandoned by the author.\n\nLong term we need to replace that tooling with a different approach.\n\nOn 22 Oct 2017 6:47 a.m., \"sophiepeithos\" <notifications@github.com> wrote:\n\n> ok, so I managed to solve this problem by pass -sdk:2 to mcs.\n> Then I can't get precompile to compile, I have to get precompile from r668.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/314#issuecomment-338453484>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsFFK7eCc5IMLE8K2gSlS56Sow4hoks5sutbggaJpZM4QBgyf>\n> .\n>\n. dammit; fixing that would require a *lot* of work to make the current\ncodebase compatible with IKVM. But long term, that's not the direction we\ncan continue to go, since it a: is brittle, and b: is a dead-end (IKVM is\ndead). I was *really* hoping to spend that time moving to a different\nmechanism (solving the future needs) instead of doing that work (which just\nprolongs the pain).\n\nNot sure of the best move here; I need to catch up with MS on the codegen\nstory and think.\n\nI wonder if the best option *right now* might be to essentially implement\nthe \"new\" codegen stuff via the new protogen (not the old protogen),\nessentially making it possible to emit everything in one step when\nprocessing the .proto schema. Hopefully in a way that lets me reuse that\ncode later :)\n\nThat's my preferred option. The \"precompile\" hack is... a massive PITA for\neveryone.\n\nLet me think on that.\n\nOn 22 October 2017 at 14:41, sophiepeithos <notifications@github.com> wrote:\n\n> ok\uff0cusing the precompile from r668 seems ok on windows, I can successfully\n> serialization and deserialization proto3 map.\n> but It throw an exception when running precompile on macos:\n> huis-MacBook-Pro:precompile hui$ mono precompile.exe Model.dll -o:1.dll\n> -t:a WARNING: The runtime version supported by this application is\n> unavailable. Using default runtime: v4.0.30319 protobuf-net pre-compiler No\n> framework specified; defaulting to 4.0.30319.42000 Resolved\n> /Library/Frameworks/Mono.framework/Versions/5.2.0/lib/mono/4.5/mscorlib.dll\n> Resolved /Library/Frameworks/Mono.framework/Versions/5.2.0/lib/mono/4.5/System.dll\n> Resolved protobuf-net.dll Adding MessageContainingMapCalledEntry...\n> Member 'ProtoBuf.ProtoMapAttribute' is a missing member and does not\n> support the requested operation. at IKVM.Reflection.MissingType.get_Attributes\n> () [0x00006] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 at\n> IKVM.Reflection.Type.get_IsInterface () [0x00000] in <\n> 523ab91bcfd44fcaaadcaa2aa7737e44>:0 at IKVM.Reflection.Type.IsAssignableFrom\n> (IKVM.Reflection.Type type) [0x000c4] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0\n> at IKVM.Reflection.CustomAttributeData.GetCustomAttributesImpl\n> (System.Collections.Generic.List1[T] list, IKVM.Reflection.Module module,\n> System.Int32 token, IKVM.Reflection.Type attributeType) [0x00063] in <\n> 523ab91bcfd44fcaaadcaa2aa7737e44>:0\n> at IKVM.Reflection.CustomAttributeData.GetCustomAttributesImpl\n> (System.Collections.Generic.List1[T] list, IKVM.Reflection.MemberInfo\n> member, IKVM.Reflection.Type attributeType) [0x00039] in <\n> 523ab91bcfd44fcaaadcaa2aa7737e44>:0 at IKVM.Reflection.\n> CustomAttributeData.__GetCustomAttributes (IKVM.Reflection.MemberInfo\n> member, IKVM.Reflection.Type attributeType, System.Boolean inherit)\n> [0x00031] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 at\n> IKVM.Reflection.MemberInfo.IsDefined (IKVM.Reflection.Type attributeType,\n> System.Boolean inherit) [0x00000] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0\n> at ProtoBuf.Meta.MetaType.ApplyDefaultBehaviour () [0x004c0] in <\n> 3cd6a73ffeae488b98fe6fa28875c5e3>:0 at ProtoBuf.Meta.RuntimeTypeModel.Add\n> (IKVM.Reflection.Type type, System.Boolean applyDefaultBehaviour) [0x000eb]\n> in <3cd6a73ffeae488b98fe6fa28875c5e3>:0 at ProtoBuf.Precompile.PreCompileContext.Execute\n> () [0x002a7] in <dc2388999df64e489ff273a6b981447e>:0 at\n> ProtoBuf.Precompile.Program.Main (System.String[] args) [0x00057] in <\n> dc2388999df64e489ff273a6b981447e>:0\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/314#issuecomment-338478277>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsFYcHUzFnCgUVSL8W6_2pAPN9xKRks5su0YBgaJpZM4QBgyf>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. 1: and what problem would that solve for me?\n\n2: I can't advise on unity since I don't unity. From what I hear, it should\nwork OK\n\n3: that's fair, but the problem is getting the time\n\nOn 30 Oct 2017 8:27 a.m., \"LIUYANLIN\" <notifications@github.com> wrote:\n\n1.I want you to use cmake to build the project\n2.where is \"Unity\" folder. I saw this folder on other forums. or how to do\nit in unity?\n3.Can you have a more detailed tutorial?\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/315>, or mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsMm_y4Tns8Ln384pxhSuSpl3ETIKks5sxYiKgaJpZM4QK0iq>\n.\n. You should also be able to build via \"dotnet build\" if you don't want 2017.\nUltimately, the project tooling that's there is there to allow me to build\nthe packages for the things I need (mainly for nuget). I don't have those\nadditional requirements, nor do I have the tools that are needed installed.\nIf there's a case for offering additional build options, I think it is\nneeded for somebody who understands, needs, and uses those tools to propose\nthem. I could suggest something, but there's no way for me to know if that\nactually solves anything.\n\nOn 30 October 2017 at 12:00, LIUYANLIN <notifications@github.com> wrote:\n\n> 1.It's more user friendly, vs only supports upward compatibility, but now\n> many people are still using 2015 or old version, and your project uses 2017.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/315#issuecomment-340423762>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsGDHJ2k48T1joKXFm6P70x2-PtQWks5sxbpzgaJpZM4QK0iq>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. if you mean in the 668 code, it should be fine - iirc it scans the local\npath before anything else, so just place it side by\nside\n\nIn the current \"head\" there is no protoc, except for the website code to\nallow other languages\n\nOn 31 Oct 2017 2:51 a.m., \"LIUYANLIN\" <notifications@github.com> wrote:\n\n> ok~ and have a last question.\n> can i replace protoc.exe in protobuf-net with any version of google's\n> protoc.exe?\n> Will prtobuf-net be affected by version of google protobuf?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/315#issuecomment-340644770>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsOpostAizpfkZzLG53P_Qop407QEks5sxotNgaJpZM4QK0iq>\n> .\n>\n. If you are just using the library (the dll, etc), then there is no\ndependency whatsoever on any google code.\n\nPartly, the wording is included as a courtesy and to make it very obvious\nthat the underlying protocol (\"protobuf\") that protobuf-net implements is a\ngoogle property.\n\nHowever, additionally: among the *additional tools* available in the\nprotobuf-net packages are copies of \"protoc\" and multiple google .proto\nfiles. Historically, \"protoc\" was used by the \"protogen\" tool, although\nthis is no longer the case (the \"protogen\" tool is now entirely managed\ncode with no dependency); however, the source code also includes the code\nfor https://protogen.marcgravell.com/ which again includes \"protoc\" as a\nconvenience for people working with multiple languages, and multiple .proto\nfiles (mostly by google) to allow people to make use of common \"import\"\nscenarios.\n\n\nDoes that help?\n\nOn 2 November 2017 at 09:53, Vincent Weevers <notifications@github.com>\nwrote:\n\n> The license\n> <https://github.com/mgravell/protobuf-net/blob/a978575b9e8bc281f7341237cace35220ef0ff35/Licence.txt>\n> says:\n>\n> The core Protocol Buffers technology is provided courtesy of Google.\n> At the time of writing, this is released under the BSD license.\n> Full details can be found here:\n> http://code.google.com/p/protobuf/\n>\n> This .NET implementation is Copyright 2008 Marc Gravell\n>\n> But as far as I can see, protobuf-net does not use any Google code or\n> libraries. If so, the first paragraph is not necessary (and somewhat\n> confusing). Can you please clarify why you included it? Thanks!\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/316>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsLDrWWZGBiNVJxfAoRiDw_XafUD6ks5syZEtgaJpZM4QPa-h>\n> .\n>\n\n\n\n-- \nRegards,\n\nMarc\n. right; this gets complex and there might not br great news. The \"assorted\"\nis stuff that has not been updated to the current build tools, so may not\nbe in an immediately buildable state. In the case of precompile, this is\npartly because the tool we use to hack around some platform limitations\n(IKVM) has been abandoned by the author. But also, it has always been\nsomewhat brittle and hacky. The library that is available for earlier\nbuilds seems incompatible with .net core etc, and frankly that simply isn't\nthe right tool to pursue going forward.\n\nLong term, the plan is to replace this tool with better build-like tooling\nperhaps using Roslyn, perhaps not. I've been chasing MS on improved build\ntime generation, and while folks see the need nothing has changed. The\nexperimental \"generators\" Roslyn spike is stalled.\n\nSo; right now I don't have good options for pre-generation, at least: not\nfor recent builds. If you're using an older build, then the old precompile\nexe should work.\n\nOther than that, I would need to dust off a lot of pieces to plumb\neverything together. It isn't something that I need day to day, which -\nbeing realistic - has influenced my prioritization. If I needed it for\nwork, it would be relatively easy to carve out some work time to get the\njob done - but otherwise, I'm kinda kept busy on other things.\n\nI am aware that this is a pain point - and I've seen various people talking\nabout unity in particular. Here again I am slightly hampered by not being a\nunity user. I don't know much about the platform limitations. What I guess\nI need to do is find the time to carve out some R+D time to set up a\nminimal unity project and try to see for myself what happens, and what I\ncan get working.\n\nWhat version(s) / platforms of unity are you hitting problems with? Just in\ncase it matters (I don't want to install latest and \"fix\" things, only to\nfind that my fixes don't work with the version folks are actually using)\n\nOn 17 Nov 2017 1:12 p.m., \"PeterLake2002\" <notifications@github.com> wrote:\n\nI know this question is kinds of stupid, but I have spent 10 hours on this,\nand still can't get it done, I seriously feel despair, please help.\nI download protobuf-net-2.3.2.zip, unzip it, and open\nprotobuf-net-2.3.2\\src\\protobuf-net.sln in Visual Studio 2017, choose Unity\n- Any CPU - protobuf-net and Build Solution.\nEverything is fine, but then I realize there is no precompile, is's in\nprotobuf-net-2.3.2\\assorted\\precompile, I am not sure what to do since I am\na noob.\nSo I right click on Solution - Add - Existing Project - choose\nprotobuf-net-2.3.2\\assorted\\precompile\\precompile.csproj to add precompile\nproject to current solution.\n<https://camo.githubusercontent.com/5432841c85398d2f19d04d920915ca5e3a8a5c6f/68747470733a2f2f692e696d6775722e636f6d2f6873315a5a51762e706e67>\n\nBut there are so many errors in protobuf-net-2.3.2\\assorted\\\nprecompile\\Program.cs\n\n<https://camo.githubusercontent.com/94b5e7c4ae5051eb91957dce5cdee1597f8ce31f/68747470733a2f2f692e696d6775722e636f6d2f426c7a74324e482e706e67>\nAfter I precompile project - right click References - Add Reference -\nProjects - choose protobuf-net, this error seems disappear\n\n<https://camo.githubusercontent.com/0f05ffa2f131803080181255eb2ac050d4a4b65c/68747470733a2f2f692e696d6775722e636f6d2f4967656f6e73552e706e67>\nI realize there is a protobuf-net-2.3.2\\src\\Tools\\IKVM.Reflection.dll,\nafter I add this dll to reference, error disappear\n\nand the last one\n<https://camo.githubusercontent.com/a3f055b877628e480446ea0b8832916a6a33e58e/68747470733a2f2f692e696d6775722e636f6d2f664f41646858412e706e67>\nI have no idea how to solve this, I am almost crazy, please help, please,\nplease, many thanks\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<https://github.com/mgravell/protobuf-net/issues/319>, or mute the thread\n<https://github.com/notifications/unsubscribe-auth/AABDsD-LnworuKwXa-rBZ-IhPg6Q-1c0ks5s3YZXgaJpZM4QiBQF>\n.\n. which protogen is this? it was rewritten for 2.3.0, and the extension\nsupport is one of the differences\n\nOn 24 Nov 2017 2:38 p.m., \"Marques da Silva\" <notifications@github.com>\nwrote:\n\n> This issue was discussed initially in the stackoverflow\n> <https://stackoverflow.com/questions/47424568/do-protobuf-net-supports-protobuf-extensions>\n> .\n>\n> I have a base.proto with a set of messages that can be extensible using\n> protobuff extensions, then I have a comm.proto that extends some of the\n> messages defined in base.proto.\n>\n> I used ProtoGen to generate base.cs and comm.cs files but I am not able to\n> access the extension fields added by comm.cs.\n>\n> Is this supported or I have to pass some extra parameter to ProtoGen?\n>\n> *My environment:*\n>\n> dotnet --info\n>\n> .NET Command Line Tools (2.0.3)\n>\n> Product Information:\n>  Version:            2.0.3\n>  Commit SHA-1 hash:  eb1d5ee318\n>\n> Runtime Environment:\n>  OS Name:     Mac OS X\n>  OS Version:  10.12\n>  OS Platform: Darwin\n>  RID:         osx.10.12-x64\n>  Base Path:   /usr/local/share/dotnet/sdk/2.0.3/\n>\n> Microsoft .NET Core Shared Framework Host\n>\n>   Version  : 2.0.3\n>   Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\n>\n> *Trying to build the project with*\n>\n> DOTNET_RUNTIME_ID=osx.10.12-x64 dotnet build -f netstandard1.3 -c Release\n>\n> *Mono version*\n>\n> Mono JIT compiler version 5.4.1.6 (2017-06/1f4613aa1ac Wed Oct 18 09:31:57 EDT 2017)\n> Copyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\n> \tTLS:           normal\n> \tSIGSEGV:       altstack\n> \tNotification:  kqueue\n> \tArchitecture:  amd64\n> \tDisabled:      none\n> \tMisc:          softdebug\n> \tLLVM:          yes(3.6.0svn-mono-master/8b1520c8aae)\n> \tGC:            sgen (concurrent by default)\n>\n> Unity Version: 5.6.4p2 (not relevant because I am trying to build outside\n> of unity)\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/321>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABDsNZavMuLY47Oai2sQaY6477AivhDks5s5tTogaJpZM4Qp5fn>\n> .\n>\n. ",
    "grzsz": "This returing default value also contains a bug: if we have enum inside message, like\n\nmessage MyMessage {\n   enum MyEnum {\n      MY_VAL1 = 1;\n      MY_VAL2 = 2;\n   }\n   optional MyEnum someVariable = 1;\n}\n\nand we use -p:fixCase option, then getter will be generated with returning MY_VAL1, but enum will have MYVAL1 (not sure if it's bug in fixCase option or in generating getter for optional field)\n. This returing default value also contains a bug: if we have enum inside message, like\n\nmessage MyMessage {\n   enum MyEnum {\n      MY_VAL1 = 1;\n      MY_VAL2 = 2;\n   }\n   optional MyEnum someVariable = 1;\n}\n\nand we use -p:fixCase option, then getter will be generated with returning MY_VAL1, but enum will have MYVAL1 (not sure if it's bug in fixCase option or in generating getter for optional field)\n. ",
    "sunib": "@mgravell : I noticed this problem with the ProtoGen, and now I see that there's already a pull request. Would be really great if this could be pulled into the main branch. Thanks!\n. @mgravell : I noticed this problem with the ProtoGen, and now I see that there's already a pull request. Would be really great if this could be pulled into the main branch. Thanks!\n. ",
    "fnicollet": "Found it, sorry. You need to pull from Nuget with all the deps, then delete the reference to protobuf-net from the Solution Explorer and add a reference to the DLL that is in the portable-sl4+net40+wp7+windows8 folder\n. Found it, sorry. You need to pull from Nuget with all the deps, then delete the reference to protobuf-net from the Solution Explorer and add a reference to the DLL that is in the portable-sl4+net40+wp7+windows8 folder\n. ",
    "QuantumDeveloper": "@fnicollet  I will just add a tip to your previous post:\nthis folder is inside packages folder of your solution.\nJust to be sure everyone will understand this correctly, but anyway, this issue must be fixed, I think, because lib must work out of box without spinning around and thinking why it is not working.\n. @fnicollet  I will just add a tip to your previous post:\nthis folder is inside packages folder of your solution.\nJust to be sure everyone will understand this correctly, but anyway, this issue must be fixed, I think, because lib must work out of box without spinning around and thinking why it is not working.\n. ",
    "ANTPro": "I not test:\n\n[ProtoMember(5,DynamicType = true)]\npublic dynamic Data { get; set; }\n. I not test:\n\n[ProtoMember(5,DynamicType = true)]\npublic dynamic Data { get; set; }\n. ",
    "slav": "I realize it's not the best idea, but sometimes data migration is\nnecessary. I was hoping it would be possible not to keep the old property\naround.\nIs it possible to customize serialization/deserialization of specific\nproperty?\n\nlike\n[ProtoMember(4)]\npublic int TheNewProperty{...}\n\nint DeserializeTheNewProperty( data )\n{\n// try load as int\n// if fails, try load as SomeType and convert to int\n}\n\nOn Thu, Jul 3, 2014 at 10:38 AM, Marc Gravell notifications@github.com\nwrote:\n\n> That is simply not a good idea, but you could probably get around it via:\n> \n> [ProtoMember(4)]\n> public SomeType TheOriginalProperty {get;set;}\n> \n> then migrating to:\n> \n> [ProtoMember(4)]\n> public SomeType TheOriginalProperty {...}\n> \n> public bool ShouldSerializeTheOriginalProperty()\n> {\n> return false;\n> }\n> \n> [ProtoMember(12)]\n> public int TheNewProperty {...}\n> \n> with one of the two properties being the \"actual\" code, and one of them\n> being a shim that has the code to translate between the two. This approach\n> will allow both old and new data to be read, but data will always be\n> written using the new layout.\n> \n> On 29 June 2014 16:57, slav notifications@github.com wrote:\n> \n> > Is it possible to change property type, for example from class to simple\n> > int, and then on deserialization to customize deserialize if\n> > deserializing\n> > as int fails, to try deserialize class which was used in place of int\n> > before, filling out int property based on the values that used to be in\n> > that class?\n> > \n> > So basically I want to convert stored value to a different type on\n> > deserialize. How would I go around doing it?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/4.\n> \n> ## \n> \n> Regards,\n> \n> Marc\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47937884.\n. Using it to efficiently store data, so not read-once stream. It's ok. thank you for ideas.\n. I understand, and it should be that way. Was just hoping it's possible to customize/inject serializer.\n. I realize it's not the best idea, but sometimes data migration is\nnecessary. I was hoping it would be possible not to keep the old property\naround.\nIs it possible to customize serialization/deserialization of specific\nproperty?\n\nlike\n[ProtoMember(4)]\npublic int TheNewProperty{...}\n\nint DeserializeTheNewProperty( data )\n{\n// try load as int\n// if fails, try load as SomeType and convert to int\n}\n\nOn Thu, Jul 3, 2014 at 10:38 AM, Marc Gravell notifications@github.com\nwrote:\n\n> That is simply not a good idea, but you could probably get around it via:\n> \n> [ProtoMember(4)]\n> public SomeType TheOriginalProperty {get;set;}\n> \n> then migrating to:\n> \n> [ProtoMember(4)]\n> public SomeType TheOriginalProperty {...}\n> \n> public bool ShouldSerializeTheOriginalProperty()\n> {\n> return false;\n> }\n> \n> [ProtoMember(12)]\n> public int TheNewProperty {...}\n> \n> with one of the two properties being the \"actual\" code, and one of them\n> being a shim that has the code to translate between the two. This approach\n> will allow both old and new data to be read, but data will always be\n> written using the new layout.\n> \n> On 29 June 2014 16:57, slav notifications@github.com wrote:\n> \n> > Is it possible to change property type, for example from class to simple\n> > int, and then on deserialization to customize deserialize if\n> > deserializing\n> > as int fails, to try deserialize class which was used in place of int\n> > before, filling out int property based on the values that used to be in\n> > that class?\n> > \n> > So basically I want to convert stored value to a different type on\n> > deserialize. How would I go around doing it?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/4.\n> \n> ## \n> \n> Regards,\n> \n> Marc\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/4#issuecomment-47937884.\n. Using it to efficiently store data, so not read-once stream. It's ok. thank you for ideas.\n. I understand, and it should be that way. Was just hoping it's possible to customize/inject serializer.\n. ",
    "xidius": "It seems worked. But  ...  i'm  testing protobuf now on  client and server.  \nTell me please, Mark \n1 - where CompileInPlace() for server will store compiled temporary assembly by default - because after i changed class localtion to another assembly i still have message of unable to resolve it in old assembly-How clear that cache?May be it's better to use Compile() on server ?\n2 -And Also where CompileInPlace()  saving cache contracts(resolvings) in mobile versions? may be you even know where is cache for silverlight?\n. OK I beleleave that  RuntimeTypeModel.CompileInPlace()  works in silverlight  so i'll  submit a pull request as you sad  Mark \n. Hello Mark.  Im sorry that i too long doesn't say any thing.    Current state  -    I stopped to use protobuf because of error in deserialization in server-silverlight app. But i still beleave that  issue- Sliverlight RuntimeTypeModel  - can be.  Now i use other serializer - it supports inheritance( that's what i need) from BaseType, and even from object. if you interesting in my Test class  and Model class i can send them to you. if you interesting in more details i also can answer for you of course. thank's Mark for your great job for open source    \n. It seems worked. But  ...  i'm  testing protobuf now on  client and server.  \nTell me please, Mark \n1 - where CompileInPlace() for server will store compiled temporary assembly by default - because after i changed class localtion to another assembly i still have message of unable to resolve it in old assembly-How clear that cache?May be it's better to use Compile() on server ?\n2 -And Also where CompileInPlace()  saving cache contracts(resolvings) in mobile versions? may be you even know where is cache for silverlight?\n. OK I beleleave that  RuntimeTypeModel.CompileInPlace()  works in silverlight  so i'll  submit a pull request as you sad  Mark \n. Hello Mark.  Im sorry that i too long doesn't say any thing.    Current state  -    I stopped to use protobuf because of error in deserialization in server-silverlight app. But i still beleave that  issue- Sliverlight RuntimeTypeModel  - can be.  Now i use other serializer - it supports inheritance( that's what i need) from BaseType, and even from object. if you interesting in my Test class  and Model class i can send them to you. if you interesting in more details i also can answer for you of course. thank's Mark for your great job for open source    \n. ",
    "polkovnikov-ph": "@mgravell But is the precompiler required? There's some conditional compilation over the source code which seems to mess with `Reflection.Emit`, that is not supported when Unity compiles C# for iOS, as runtime codegen is forbidden by Apple for security reasons.\n\n```\n#if FEAT_COMPILER\nusing System.Reflection.Emit;\n#endif \n```\n\nI'm pretty unsure how to compile `protobuf-net` for Unity, as I don't know what that conditional means. So I second request of @joaocc to create a prebuilt version for Unity.\n. @mgravell But is the precompiler required? There's some conditional compilation over the source code which seems to mess with `Reflection.Emit`, that is not supported when Unity compiles C# for iOS, as runtime codegen is forbidden by Apple for security reasons.\n\n```\n#if FEAT_COMPILER\nusing System.Reflection.Emit;\n#endif \n```\n\nI'm pretty unsure how to compile `protobuf-net` for Unity, as I don't know what that conditional means. So I second request of @joaocc to create a prebuilt version for Unity.\n. ",
    "joaocc": "Sorry about the delay. At that time we ended up removing existing dependencies on protobuf. \nAlso, our experience was limited to Windows Store App (8.0 at the time).\nYou can get all the info on conditional compilation in Unity3D [here](http://docs.unity3d.com/Manual/PlatformDependentCompilation.html).\nI'll try to find if we have more info on this.\n. Sorry about the delay. At that time we ended up removing existing dependencies on protobuf. \nAlso, our experience was limited to Windows Store App (8.0 at the time).\nYou can get all the info on conditional compilation in Unity3D [here](http://docs.unity3d.com/Manual/PlatformDependentCompilation.html).\nI'll try to find if we have more info on this.\n. ",
    "AqlaSolutions": "@joaocc protobuf-net comes as a compiled dll. conditional compilation does not apply here. you don't want to include protobuf-net sources in your project, don't you?\n. @monsdar you can simple use dlls from zip download on github, in releases section.\n. IgnoreListHandling would work only for complex types (because it forces protobuf to serialize fields/properties inside). Arrays don't have fields/properties which can be serialized so they require special handling like a primitive type so you can't make it work. I advice you to <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/wiki/Comparsion-with-protobuf-net\">look at the fork which goal is to support all .NET stuff</a>. Nested/jagged arrays are not supported there too but you can code your implementation and it will be accepted even if it breaks proto spec.\n. Oops, you are right. I should have read it more attentively. There is no support for int[,] but in your case it should work.\n. Fixed in my fork, see <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/commit/a2feeb82dd0c306b7bb62a71a46e33c57854b480\">commit</a>. \n\nI'm not going to issue the pull request for the whole fork. If you need it for protobuf-net - apply it yourself.\n. yep, no one would accept it\n. See also #11\n. Yes, it's a feature. The same for \"bool ShouldSerializeSomeProperty()\". For now it can't be disabled.\n. Unfortunately it would be really hard to change the current code to be agnostic to the order to the inheritance fields. The type should be constructed before you can set its fields. Otherwise it can't be used \"AsReference\" inside these fields.\n\nAlso there is no support for inheritance in the official protobuf spec.\n. Could you check your example with <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/wiki/Comparsion-with-protobuf-net\">this fork</a>? It has improvements in reference tracking so there is a great chance that it will work fine. Just add dll reference and replace the usage of Protobuf.TypeModel with AqlaSerializer.TypeModel.\n. @MrGuardian @gyurisc I added the demo as a unit test for my fork, it's green. https://github.com/AqlaSolutions/AqlaSerializer/commit/2bab26164dee27dc6594cc38ad5c5d253a8beb6c \n\nSorry for spaming you in case you are not going to migrate.\n. Just select the iOS Configuration and build the main protobuf-net project.\n. I think with compiled (pregenerated) dll it should work fine.\n. A new version is released. It contains all updates from here and have separate treating for null and empty lists. AqlaSerializer is now also available on <a href=\"https://www.nuget.org/packages/aqlaserializer/\">nuget</a>. \n. Hey, breaking specs is ok for <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/wiki/Comparsion-with-protobuf-net\">my fork</a>, you are welcome to make your changes there.\n. The problem here looks like it doesn't serialize default values. Try setting IsRequired = true for your member.\n. Also try RuntimeTypeModel model.UseImplicitZeroDefaults = false;\n. You can use Serialize/DeserializeWithLengthPrefix methods.\n. Hi! I had the same feelings so I made a fork of protobuf-net which now contains multiple improvements and fixes especially for better reference tracking. You can find it <a href=\"https://github.com/AqlaSolutions/AqlaSerializer\">here</a>.\n. Yes, it's supported. You can use dlls from any previous frameworks (3.0, 3.5, etc).\n. It was long time ago but can you please provide a code example for this so I can check if it's present in my fork?\n. Looks like there are still no releases. My fork have an equivalent -  <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/wiki/Comparsion-with-protobuf-net#attributes\">SurrogateConverterAttribute</a> and it's published both in releases and on <a href=\"https://www.nuget.org/packages/aqlaserializer/\">nuget</a>. Feel free to use it instead.\n. @i3arnon can you provide the full code to test it so I can implement this thing in my fork?\n. @i3arnon ok, I'll check it\n. Ok, so I managed to fix it pretty easy: https://github.com/AqlaSolutions/AqlaSerializer/commit/c2c8b6a74410cbc0491b04e8b3eb89548b3e569a\n. @galpin yep, I don't see that protobuf-net is really updating and also doing everything inside my fork I don't need to care too much about behavior and protocol compatibility. This way I fixed a lot reference tracking and null's issues.\n\nSo I don't bother with PRs. But my fork is under the same license so anyone may copy-paste and PR.\n. Hi, I've just <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/commit/ae40a74d450fbb8331e14f98aaa0d1bec75f14ea\">fixed this bug in my fork</a>. I'm not sure whether it can be applied to the original but you are free to use <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/\">AqlaSerializer</a> instead.\n. As I understand protobuf-net is designed to be used for transferring compact data over network in fast lightweight applications with strict performance requirements. You would never want to send 2gb in such apps therefore I don't think protobuf-net will ever support that.\n. Yes, there are issues with using \"SupportNull\" in some cases. Sorry for ads but you may be interested in using my <a href=\"https://github.com/AqlaSolutions/AqlaSerializer\">fork</a> which is aimed to support all common .net features. It considers \"SupportNull\" to be default behavior where possible just like BinaryFormatter does.\n. This problem is not present in my <a href=\"https://github.com/AqlaSolutions/AqlaSerializer\">fork</a>. I added a <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/commit/a5b2c8c7a8cac9e2353609461f175e60b80bc9ed\">unit test</a> to check your case so feel free to use my fork instead. \n. Hi. I made a <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/commit/3ddba96844b593e4a50139eb89879990a26d8794\">unit test</a> for my fork called <a href=\"https://github.com/AqlaSolutions/AqlaSerializer\">AqlaSerializer</a> and it works perfectly with your code. So feel free to use it instead. The only change was replacing attribute names.\n. @joaocc protobuf-net comes as a compiled dll. conditional compilation does not apply here. you don't want to include protobuf-net sources in your project, don't you?\n. @monsdar you can simple use dlls from zip download on github, in releases section.\n. IgnoreListHandling would work only for complex types (because it forces protobuf to serialize fields/properties inside). Arrays don't have fields/properties which can be serialized so they require special handling like a primitive type so you can't make it work. I advice you to <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/wiki/Comparsion-with-protobuf-net\">look at the fork which goal is to support all .NET stuff</a>. Nested/jagged arrays are not supported there too but you can code your implementation and it will be accepted even if it breaks proto spec.\n. Oops, you are right. I should have read it more attentively. There is no support for int[,] but in your case it should work.\n. Fixed in my fork, see <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/commit/a2feeb82dd0c306b7bb62a71a46e33c57854b480\">commit</a>. \n\nI'm not going to issue the pull request for the whole fork. If you need it for protobuf-net - apply it yourself.\n. yep, no one would accept it\n. See also #11\n. Yes, it's a feature. The same for \"bool ShouldSerializeSomeProperty()\". For now it can't be disabled.\n. Unfortunately it would be really hard to change the current code to be agnostic to the order to the inheritance fields. The type should be constructed before you can set its fields. Otherwise it can't be used \"AsReference\" inside these fields.\n\nAlso there is no support for inheritance in the official protobuf spec.\n. Could you check your example with <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/wiki/Comparsion-with-protobuf-net\">this fork</a>? It has improvements in reference tracking so there is a great chance that it will work fine. Just add dll reference and replace the usage of Protobuf.TypeModel with AqlaSerializer.TypeModel.\n. @MrGuardian @gyurisc I added the demo as a unit test for my fork, it's green. https://github.com/AqlaSolutions/AqlaSerializer/commit/2bab26164dee27dc6594cc38ad5c5d253a8beb6c \n\nSorry for spaming you in case you are not going to migrate.\n. Just select the iOS Configuration and build the main protobuf-net project.\n. I think with compiled (pregenerated) dll it should work fine.\n. A new version is released. It contains all updates from here and have separate treating for null and empty lists. AqlaSerializer is now also available on <a href=\"https://www.nuget.org/packages/aqlaserializer/\">nuget</a>. \n. Hey, breaking specs is ok for <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/wiki/Comparsion-with-protobuf-net\">my fork</a>, you are welcome to make your changes there.\n. The problem here looks like it doesn't serialize default values. Try setting IsRequired = true for your member.\n. Also try RuntimeTypeModel model.UseImplicitZeroDefaults = false;\n. You can use Serialize/DeserializeWithLengthPrefix methods.\n. Hi! I had the same feelings so I made a fork of protobuf-net which now contains multiple improvements and fixes especially for better reference tracking. You can find it <a href=\"https://github.com/AqlaSolutions/AqlaSerializer\">here</a>.\n. Yes, it's supported. You can use dlls from any previous frameworks (3.0, 3.5, etc).\n. It was long time ago but can you please provide a code example for this so I can check if it's present in my fork?\n. Looks like there are still no releases. My fork have an equivalent -  <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/wiki/Comparsion-with-protobuf-net#attributes\">SurrogateConverterAttribute</a> and it's published both in releases and on <a href=\"https://www.nuget.org/packages/aqlaserializer/\">nuget</a>. Feel free to use it instead.\n. @i3arnon can you provide the full code to test it so I can implement this thing in my fork?\n. @i3arnon ok, I'll check it\n. Ok, so I managed to fix it pretty easy: https://github.com/AqlaSolutions/AqlaSerializer/commit/c2c8b6a74410cbc0491b04e8b3eb89548b3e569a\n. @galpin yep, I don't see that protobuf-net is really updating and also doing everything inside my fork I don't need to care too much about behavior and protocol compatibility. This way I fixed a lot reference tracking and null's issues.\n\nSo I don't bother with PRs. But my fork is under the same license so anyone may copy-paste and PR.\n. Hi, I've just <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/commit/ae40a74d450fbb8331e14f98aaa0d1bec75f14ea\">fixed this bug in my fork</a>. I'm not sure whether it can be applied to the original but you are free to use <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/\">AqlaSerializer</a> instead.\n. As I understand protobuf-net is designed to be used for transferring compact data over network in fast lightweight applications with strict performance requirements. You would never want to send 2gb in such apps therefore I don't think protobuf-net will ever support that.\n. Yes, there are issues with using \"SupportNull\" in some cases. Sorry for ads but you may be interested in using my <a href=\"https://github.com/AqlaSolutions/AqlaSerializer\">fork</a> which is aimed to support all common .net features. It considers \"SupportNull\" to be default behavior where possible just like BinaryFormatter does.\n. This problem is not present in my <a href=\"https://github.com/AqlaSolutions/AqlaSerializer\">fork</a>. I added a <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/commit/a5b2c8c7a8cac9e2353609461f175e60b80bc9ed\">unit test</a> to check your case so feel free to use my fork instead. \n. Hi. I made a <a href=\"https://github.com/AqlaSolutions/AqlaSerializer/commit/3ddba96844b593e4a50139eb89879990a26d8794\">unit test</a> for my fork called <a href=\"https://github.com/AqlaSolutions/AqlaSerializer\">AqlaSerializer</a> and it works perfectly with your code. So feel free to use it instead. The only change was replacing attribute names.\n. ",
    "monsdar": "Any updates on this topic? Is this issue not updated because there are better ways of integrating Protobuf into Unity, or is there simply no interest?\n. Figured that out a minute ago, thanks a lot for the fast answer :)\n. Any updates on this topic? Is this issue not updated because there are better ways of integrating Protobuf into Unity, or is there simply no interest?\n. Figured that out a minute ago, thanks a lot for the fast answer :)\n. ",
    "abcpp": "hmmm... tried precompiler, results were even worse... clearly, I'm doing something wrong...\n. Thank you! I sent you a link to the solution file. Would appreciate any help on making it the speedier. It does feel like I'm missing an option or two...\n. Thank you-thank you-thank you!!! Yes, please send the revised cs to me at andrew.cher@gmail.com. I definitely was seriously stumbled at why it was that slow and even with serializer it looked like something wrong with my project. Could be a great idea for your blog to help our newbies )))\n\nI suspected that the builder was a big difference for proto-sharp-port as well as precompiled serializer.\n\nI really like your version more because it provides backward compatibility (LiveLabs breaks if you add a new field) and also can serialize properties (.NET and LL is only for fields). That's why I wanted to use your version. Really appreciate you taking a look at this and helping me out!!!\n\nThank you!\nAndrew\n. hmmm... tried precompiler, results were even worse... clearly, I'm doing something wrong...\n. Thank you! I sent you a link to the solution file. Would appreciate any help on making it the speedier. It does feel like I'm missing an option or two...\n. Thank you-thank you-thank you!!! Yes, please send the revised cs to me at andrew.cher@gmail.com. I definitely was seriously stumbled at why it was that slow and even with serializer it looked like something wrong with my project. Could be a great idea for your blog to help our newbies )))\n\nI suspected that the builder was a big difference for proto-sharp-port as well as precompiled serializer.\n\nI really like your version more because it provides backward compatibility (LiveLabs breaks if you add a new field) and also can serialize properties (.NET and LL is only for fields). That's why I wanted to use your version. Really appreciate you taking a look at this and helping me out!!!\n\nThank you!\nAndrew\n. ",
    "factormystic": ":+1: \n. :+1: \n. ",
    "adama119": "pls support wpa8.1  from nuget\n. pls support wpa8.1  from nuget\n. ",
    "sflanders": "That would be awesome\n. That would be awesome\n. ",
    "NeoLegends": "No, thats not true. If I leave the IEnumerable out of the class the whole thing serializes just fine. It seems like there is an error while handling the flag. \n\nAlso, I'm using complex types, as you can see. \n. @ltrzesniewski It seems like this project is dead anyway.\n. No, thats not true. If I leave the IEnumerable out of the class the whole thing serializes just fine. It seems like there is an error while handling the flag. \n\nAlso, I'm using complex types, as you can see. \n. @ltrzesniewski It seems like this project is dead anyway.\n. ",
    "ltrzesniewski": "@AqlaSolutions it would be really helpful if you could provide a separate pull request for that fix so that everyone could benefit.\n. @AqlaSolutions it would be really helpful if you could provide a separate pull request for that fix so that everyone could benefit.\n. ",
    "Bringer128": "@mgravell Is active on Github on other projects, so there may be hope for us yet.\n\nI've created a pull request to fix this issue.\n. If I get time soon I'll submit a test.\n\nThe scenario that failed was as described in issue #9. The code in that issue is the same format as the problem I ran into.\n. @mgravell Is active on Github on other projects, so there may be hope for us yet.\n\nI've created a pull request to fix this issue.\n. If I get time soon I'll submit a test.\n\nThe scenario that failed was as described in issue #9. The code in that issue is the same format as the problem I ran into.\n. ",
    "mikeyoon": "There's a static class in Serializer called NonGeneric that has this exact method.\n\nProtoBuf.Serializer.NonGeneric.Deserialize()\n. There's a static class in Serializer called NonGeneric that has this exact method.\n\nProtoBuf.Serializer.NonGeneric.Deserialize()\n. ",
    "jamesford42": "I was looking at the XXXMemberDecorator.Read/Write methods at the time I posted this issue. The EmitRead/EmitWrite methods look much better. I'll post back when I have actually run this through a memory profiler.\n. Note that protobuf-net_IKVM has build errors with this change, and I was unable on my own to figure out why.\n. This is more of a \"heads up\" pull request it isn't actually tested (unit test or otherwise) yet. Are there any unit tests in place for the ShouldSerialize Get/Set pattern i can look at as a model? In addition i'll have some of my own project code attempting to make use of this by the end of the day, and thereby it will get some verification if working as intended or not. \n. I still do not know if I will actually need this feature, so that's why this is still in limbo as 'totally untested'.\n. I suspect this feature actually works, or is at least very close to working; however, I am no longer using protobuf-net for the task I originally needed this feature for.\n. I was looking at the XXXMemberDecorator.Read/Write methods at the time I posted this issue. The EmitRead/EmitWrite methods look much better. I'll post back when I have actually run this through a memory profiler.\n. Note that protobuf-net_IKVM has build errors with this change, and I was unable on my own to figure out why.\n. This is more of a \"heads up\" pull request it isn't actually tested (unit test or otherwise) yet. Are there any unit tests in place for the ShouldSerialize Get/Set pattern i can look at as a model? In addition i'll have some of my own project code attempting to make use of this by the end of the day, and thereby it will get some verification if working as intended or not. \n. I still do not know if I will actually need this feature, so that's why this is still in limbo as 'totally untested'.\n. I suspect this feature actually works, or is at least very close to working; however, I am no longer using protobuf-net for the task I originally needed this feature for.\n. ",
    "maguslin": "I've met that issue as well, what should I do to fix this,sir ?@ mgravell \n. I've met that issue as well, what should I do to fix this,sir ?@ mgravell \n. ",
    "deanis74": "I forgot to mention that I am using r668, which is the newest as far as I can tell.  The files were originally created using r640.\n. Mark and I discussed this issue over on StackOverflow...\n    http://stackoverflow.com/questions/25578013/protobuf-net-outofmemoryexception\n. I forgot to mention that I am using r668, which is the newest as far as I can tell.  The files were originally created using r640.\n. Mark and I discussed this issue over on StackOverflow...\n    http://stackoverflow.com/questions/25578013/protobuf-net-outofmemoryexception\n. ",
    "aukaost": "You can specify -p:lightFramework to generate compatible classes.\n. You can specify -p:lightFramework to generate compatible classes.\n. ",
    "sulbon": "[edit]I was wrong. Content removed so as not to mislead.\n. [edit]I was wrong. Content removed so as not to mislead.\n. ",
    "mdonoughe": "See [mdonoughe/protobuf-net-issue24](https://github.com/mdonoughe/protobuf-net-issue24).\n\n```\n> .\\BreakProtobufNet.Launcher.exe\n15 46 41 49 4C\n\u00a7FAIL\n> .\\BreakProtobufNet.Launcher.exe\n0A 05 15 46 41 49 4C\nPass\n> rm .\\BreakProtobufNet.Payload.dll\n> .\\BreakProtobufNet.Launcher.exe\n15 46 41 49 4C\n\u00a7FAIL\n```\n. I've been looking at this a bit more and what seemed to work before does not appear to work in all cases. The type referred to by a token seems to change when observed, making me suspect there is a CLR bug involved.\n. So this looks like it works, but I don't like it.\n\nThere's some strange behavior seen in the tests and this feels more like a work around than a solution.\n. We're treating this as a CLR bug and have changed the application such that we can no longer encounter this issue.\n. I've created a pull request #68.\n. protobuf-net thinks the default value is false, so it does not write it to the stream, so it does not have a value to set when it deserializes the stream later. You can solve this by declaring the default value: `[DefaultValue(true)]`.\n. Did you set BoolProperty to true? Unless you are writing your object with a header or setting one of the properties to a non-default value, no data will be written to the stream. If you deserialize your empty stream you should get back an instance of SimpleCustomType with BoolProperty set to false.\n. See [mdonoughe/protobuf-net-issue24](https://github.com/mdonoughe/protobuf-net-issue24).\n\n```\n> .\\BreakProtobufNet.Launcher.exe\n15 46 41 49 4C\n\u00a7FAIL\n> .\\BreakProtobufNet.Launcher.exe\n0A 05 15 46 41 49 4C\nPass\n> rm .\\BreakProtobufNet.Payload.dll\n> .\\BreakProtobufNet.Launcher.exe\n15 46 41 49 4C\n\u00a7FAIL\n```\n. I've been looking at this a bit more and what seemed to work before does not appear to work in all cases. The type referred to by a token seems to change when observed, making me suspect there is a CLR bug involved.\n. So this looks like it works, but I don't like it.\n\nThere's some strange behavior seen in the tests and this feels more like a work around than a solution.\n. We're treating this as a CLR bug and have changed the application such that we can no longer encounter this issue.\n. I've created a pull request #68.\n. protobuf-net thinks the default value is false, so it does not write it to the stream, so it does not have a value to set when it deserializes the stream later. You can solve this by declaring the default value: `[DefaultValue(true)]`.\n. Did you set BoolProperty to true? Unless you are writing your object with a header or setting one of the properties to a non-default value, no data will be written to the stream. If you deserialize your empty stream you should get back an instance of SimpleCustomType with BoolProperty set to false.\n. ",
    "MrGuardian": "I managed to access fields via MetaType.GetFields() and setting AsReference flag on each field individually, however I don't know if this is the right way to do what I want or maybe there is more straightforward way to do this (which should exist, imo).\n. I managed to access fields via MetaType.GetFields() and setting AsReference flag on each field individually, however I don't know if this is the right way to do what I want or maybe there is more straightforward way to do this (which should exist, imo).\n. ",
    "Snow-Okami": "I solved the issue! Another asset I was using had an older version of protobuf-net.dll already in it. I never knew the asset used protobufs as I hadn't use the asset much at all. Removing this dll solved the issue. Whew!\n. Wow you're quick! That example is what I've been finding, unfortunately because I am using a TypeModel I can't do it that way, or at least not that I've figured out (tried your example and still nada). What goes wrong is I can't deserialize both of the objects. I can either get one or the other, but not both.\n\nHere is my serialization:\n\nhttp://hastebin.com/xiridehone.avrasm\n\nMy deserialization is as above: http://hastebin.com/tiragefufe.coffee\n\nThe deserialization above doesn't work at all and it's the part I am confused about getting to work so I can pull both objects out and be able to distinguish between the two objects. If I do this:\n\nhttp://hastebin.com/zojenenona.coffee\n\nThis deserializes just fine, but I can only get 1 of the objects, not both (which ever expected field / type I ask for). What I don't understand is the 2 and 1 in the expected field argument. That is what I want to understand and know more about.\n\nThanks so much for the help, I really appreciate it.\n. So I never solved the problem using some sort of way above, but I did manage to solve it using my own little thing. The key to getting it to work the way I posted as my current working way was so add a Seek(0, SeekOrigin.Begin) to the file stream after pulling the first series of objects, I assume you would do this for each different object you need to pull from file, and set the expected field to be a different integer for each type, so if you have 3 types, have ALL of type 1 be 1, all of type 2 be 2 and all of type 3 be 3. Then each time you need to deserialize them, do one type, then seek to the beginning, then do the other type and so on. Here is a stripped down version of my code (just the main bit) so you have an example to work from. That is assuming whoever is reading this is having a similar dilemma.\n\nhttp://hastebin.com/izicikusey.coffee\n. Ah, I meant 3 protobuf dlls.\n\nBefore I was getting confusion of different assets looking at different protobuf-net dll files like so:\n\nhttp://gyazo.com/a12b77cdbf534052c3af06966021ea28\n\nSome of the assets would break (they wouldn't work correctly) when I swapped dlls with my own (the newer version of protobuf) I seem to have messed around and restructured things a bit.\n\nhttp://gyazo.com/3e06cc8f6eb5e5670b8c1ca6d87a58fd\n\nNow everything works properly and seems to find the proper dll. Sorry I was just checking to see if you knew anything about this before going to the asset providers who are also using protobuf-net. Seems to have solved itself for now though!\n. So after some refactoring and recoding, I was able to solve how to serialize the list. The List<ObjectType> is held now as it's own class that is used with the circular buffer.\n\nNow however when serializing, it is fine like before, but deserializing gives me a:\n\nInvalidOperationException: Operation is not valid due to the current state of the object\nProtoBuf.ProtoReader.ReadLengthPrefix (System.IO.Stream source, Boolean expectHeader, PrefixStyle style, System.Int32& fieldNumber, System.Int32& bytesRead)\n\nThis is with DeserializeWithLengthPrefix. Using Deserialize yields:\n\nProtoException: Invalid field in source data: 0\nProtoBuf.ProtoReader.ReadFieldHeader ()\n\nReading on the net reveals other people that also had this issue were using GetBuffer() in which this needed to be changed to ToArray(), unfortunately I am not using this at all. I can't seem to pinpoint the issue.\n. I have solved this issue after much frustration. Turns out this was caused by an incompatibility with using SharpBZip library. Removing the:\n\nusing (BZip2OutputStream osBZip2 = new BZip2OutputStream(bs))\n\nfrom above as any other implementations of it solved the issue. Strange seeing how even though this was implemented, I wasn't actually using it (was using buffered stream still) I am now using the 7zip SDK and have put these tasks on a background thread with GREAT results.\n. I solved the issue! Another asset I was using had an older version of protobuf-net.dll already in it. I never knew the asset used protobufs as I hadn't use the asset much at all. Removing this dll solved the issue. Whew!\n. Wow you're quick! That example is what I've been finding, unfortunately because I am using a TypeModel I can't do it that way, or at least not that I've figured out (tried your example and still nada). What goes wrong is I can't deserialize both of the objects. I can either get one or the other, but not both.\n\nHere is my serialization:\n\nhttp://hastebin.com/xiridehone.avrasm\n\nMy deserialization is as above: http://hastebin.com/tiragefufe.coffee\n\nThe deserialization above doesn't work at all and it's the part I am confused about getting to work so I can pull both objects out and be able to distinguish between the two objects. If I do this:\n\nhttp://hastebin.com/zojenenona.coffee\n\nThis deserializes just fine, but I can only get 1 of the objects, not both (which ever expected field / type I ask for). What I don't understand is the 2 and 1 in the expected field argument. That is what I want to understand and know more about.\n\nThanks so much for the help, I really appreciate it.\n. So I never solved the problem using some sort of way above, but I did manage to solve it using my own little thing. The key to getting it to work the way I posted as my current working way was so add a Seek(0, SeekOrigin.Begin) to the file stream after pulling the first series of objects, I assume you would do this for each different object you need to pull from file, and set the expected field to be a different integer for each type, so if you have 3 types, have ALL of type 1 be 1, all of type 2 be 2 and all of type 3 be 3. Then each time you need to deserialize them, do one type, then seek to the beginning, then do the other type and so on. Here is a stripped down version of my code (just the main bit) so you have an example to work from. That is assuming whoever is reading this is having a similar dilemma.\n\nhttp://hastebin.com/izicikusey.coffee\n. Ah, I meant 3 protobuf dlls.\n\nBefore I was getting confusion of different assets looking at different protobuf-net dll files like so:\n\nhttp://gyazo.com/a12b77cdbf534052c3af06966021ea28\n\nSome of the assets would break (they wouldn't work correctly) when I swapped dlls with my own (the newer version of protobuf) I seem to have messed around and restructured things a bit.\n\nhttp://gyazo.com/3e06cc8f6eb5e5670b8c1ca6d87a58fd\n\nNow everything works properly and seems to find the proper dll. Sorry I was just checking to see if you knew anything about this before going to the asset providers who are also using protobuf-net. Seems to have solved itself for now though!\n. So after some refactoring and recoding, I was able to solve how to serialize the list. The List<ObjectType> is held now as it's own class that is used with the circular buffer.\n\nNow however when serializing, it is fine like before, but deserializing gives me a:\n\nInvalidOperationException: Operation is not valid due to the current state of the object\nProtoBuf.ProtoReader.ReadLengthPrefix (System.IO.Stream source, Boolean expectHeader, PrefixStyle style, System.Int32& fieldNumber, System.Int32& bytesRead)\n\nThis is with DeserializeWithLengthPrefix. Using Deserialize yields:\n\nProtoException: Invalid field in source data: 0\nProtoBuf.ProtoReader.ReadFieldHeader ()\n\nReading on the net reveals other people that also had this issue were using GetBuffer() in which this needed to be changed to ToArray(), unfortunately I am not using this at all. I can't seem to pinpoint the issue.\n. I have solved this issue after much frustration. Turns out this was caused by an incompatibility with using SharpBZip library. Removing the:\n\nusing (BZip2OutputStream osBZip2 = new BZip2OutputStream(bs))\n\nfrom above as any other implementations of it solved the issue. Strange seeing how even though this was implemented, I wasn't actually using it (was using buffered stream still) I am now using the 7zip SDK and have put these tasks on a background thread with GREAT results.\n. ",
    "huwpascoe": "If you're getting a message like this\n\n```\nAn unhandled exception of type 'System.InvalidOperationException' occurred in protobuf-net.dll\n\nAdditional information: Operation is not valid due to the current state of the object.\n```\n\nThen you've hit the gotcha: An index of 0 is invalid. An easy fix is to add a dummy value at [0].\n\n`new Type[] { null, typeof(A), typeof(B), ... };`\n. If you're getting a message like this\n\n```\nAn unhandled exception of type 'System.InvalidOperationException' occurred in protobuf-net.dll\n\nAdditional information: Operation is not valid due to the current state of the object.\n```\n\nThen you've hit the gotcha: An index of 0 is invalid. An easy fix is to add a dummy value at [0].\n\n`new Type[] { null, typeof(A), typeof(B), ... };`\n. ",
    "MhAllan": "what the heck is that resolver? first time in my life i see the type supplied in this way!! I keep getting \"a type must be provided unless base-128...\" error while I supplied the resolver i => typeof(myclass). on the other side the serializer wants \"fieldNumber\" .. which is what do you want!!?\n. what the heck is that resolver? first time in my life i see the type supplied in this way!! I keep getting \"a type must be provided unless base-128...\" error while I supplied the resolver i => typeof(myclass). on the other side the serializer wants \"fieldNumber\" .. which is what do you want!!?\n. ",
    "gyurisc": "I am having the same issue. I am getting the exception when using a surrogate\n. I am having the same issue. I am getting the exception when using a surrogate\n. ",
    "tbella": "Thank you for the quick response. I have just posted Pull Request #33 addressing weak references, first-chance OutOfMemoryExceptions and caching large buffers. The BufferPool.GetBuffer can also receive a minSize argument when the size of the required buffer is known (possibly ProtoReader?)\n. I had no chance to test (or compile) it on WinRT and WinPhone platforms, proceed with caution.\n. Thank you for the quick response. I have just posted Pull Request #33 addressing weak references, first-chance OutOfMemoryExceptions and caching large buffers. The BufferPool.GetBuffer can also receive a minSize argument when the size of the required buffer is known (possibly ProtoReader?)\n. I had no chance to test (or compile) it on WinRT and WinPhone platforms, proceed with caution.\n. ",
    "jelgh": "Ok, I will test this and deserialize it in ProtoStuff.\n. Right. Thanks for your quick reply. Maybe I was too quick posting this without understanding what actually happened. Will dig further\n. The code: \n\n```\nMemoryStream ms = null;\ntry\n{\n    ms = ProtobufUtils.Serialize (payload);\n//  var hex = BitConverter.ToString(ms.GetBuffer(), 0, (int)ms.Length);\n//  Console.WriteLine(hex);\n    request.AddParameter(\"application/x-protobuf\", ms.ToArray (), ParameterType.RequestBody);\n```\n\nand the Serialize method:\n\n```\npublic static MemoryStream Serialize (object obj)\n{\n    var ms = new MemoryStream ();\n    lock (serLock) {\n        Serializer.Serialize (ms, obj);\n    }\n\n    ms.Position = 0;\n    return ms;\n}\n```\n\nActually outputs: 0A-...-62-00-68-...-32-36\nI'm sorry I had to remove a lot here as I cannot give away our actual data and/or the real Contract. Will try to debug more. \n. Okay sorry, that zero in the sequence above wasn't related to my problem.\n\nThis is from the Java side, I'm stepping through the ProtoStuff code. This array is the input buffer. And remember that java and c# byte representation are different (java -127 to 128 and c# 0 to 255, right?).\n\n```\n...\n[201] = 90\n[202] = 7\n[203] = 26\n[204] = 5\n[205] = 83\n[206] = 79\n[207] = 76\n[208] = 78\n[209] = 65\n...\n```\n\nThis is where the Location object is stored. `90` is read:\n\n```\nfinal int tag = readRawVarint32();\nfinal int fieldNumber = tag >>> TAG_TYPE_BITS; // TAG_TYPE_BITS = 3\n```\n\nSo this makes fieldNumber equal 11, which is the Location message nested inside class A (doesn't really coincide with the example in my initial post).\nThis makes ProtoStuff look into the Schema and find that field 11 is of type Location and it starts handling the nested message. The first thing it reads, inside this nested message, is buffer position 202: `7`. It uses the two lines above making `tag=7` and therefore `fieldNumber=0`.\n\nThe continuation of the two lines above:\n\n```\n        final int tag = readRawVarint32();\n        final int fieldNumber = tag >>> TAG_TYPE_BITS;\n        if (fieldNumber == 0)\n        {\n            if (decodeNestedMessageAsGroup && WIRETYPE_TAIL_DELIMITER == (tag & TAG_TYPE_MASK)) // WIRETYPE_TAIL_DELIMITER = 7\n            {\n                // protostuff's tail delimiter for streaming\n                // 2 options: length-delimited or tail-delimited.\n                lastTag = 0;\n                return 0;\n            }\n            ...\n```\n\nProtoStuff is going through all the incoming fieldNumbers and aborts looping when fieldNumber is 0. Therefore the nested message `Location` is never populated since the looping is aborted immediately. It moves out to the outer message (class `A`). Here the next byte it finds is `26` (pos 203 above). This should actually belong to the nested message `Location` but is populating the wrong field in the outer message.\n\nAs I described in the GoogleGroup thread I'm very new to Protocol Buffers so I'm not sure what this all means. But the byte at position 202 `7` is interpreted as `Location` population is over.\n\nCan you make anything of this very long description? Is it something that you want from me in order to clarify?\n\nThanks for your help.\n. I maybe should add that we are using protobuf-net (clients) to ProtoStuff (back-end) for our app. We have 200k users so I don't think that it is an issue with how _we_ serialize / deserialize using protobuf-net and ProtoStuff as you suggested (with ms.GetBuffer() vs ms.ToArray()). Everything else works but this intricate case. \n. The city is SOLNA correct. \nAnd yes, there is a field 11 in the message. Its an `Location` object with a string field City populated with \"SOLNA\"\n. ```\n    [DataContract]\n    [ProtoContract]\n    public class Location\n    {\n        [DataMember (Name = \"coordinate\")]\n        [ProtoMember(1)]\n        public Coordinate Coordinate { get; set; }\n\n        [DataMember (Name = \"accuracy\")]\n        [ProtoMember(2)]\n        public Double Accuracy { get; set; }\n\n        [DataMember (Name = \"city\")]\n        [ProtoMember(3)]\n        public string City { get; set; }\n    }\n```\n\nIn the above example, Coordinate and Accuracy are null and 0 respectively. \n\nI'll see if I can post a full example. Or maybe if I can remove some parts that are business dependant.\n. Ah I see. Thanks for describing this for me and sorry for taking your time. I will take this to ProtoStuff.\n\nThanks again!\n. Ok, I will test this and deserialize it in ProtoStuff.\n. Right. Thanks for your quick reply. Maybe I was too quick posting this without understanding what actually happened. Will dig further\n. The code: \n\n```\nMemoryStream ms = null;\ntry\n{\n    ms = ProtobufUtils.Serialize (payload);\n//  var hex = BitConverter.ToString(ms.GetBuffer(), 0, (int)ms.Length);\n//  Console.WriteLine(hex);\n    request.AddParameter(\"application/x-protobuf\", ms.ToArray (), ParameterType.RequestBody);\n```\n\nand the Serialize method:\n\n```\npublic static MemoryStream Serialize (object obj)\n{\n    var ms = new MemoryStream ();\n    lock (serLock) {\n        Serializer.Serialize (ms, obj);\n    }\n\n    ms.Position = 0;\n    return ms;\n}\n```\n\nActually outputs: 0A-...-62-00-68-...-32-36\nI'm sorry I had to remove a lot here as I cannot give away our actual data and/or the real Contract. Will try to debug more. \n. Okay sorry, that zero in the sequence above wasn't related to my problem.\n\nThis is from the Java side, I'm stepping through the ProtoStuff code. This array is the input buffer. And remember that java and c# byte representation are different (java -127 to 128 and c# 0 to 255, right?).\n\n```\n...\n[201] = 90\n[202] = 7\n[203] = 26\n[204] = 5\n[205] = 83\n[206] = 79\n[207] = 76\n[208] = 78\n[209] = 65\n...\n```\n\nThis is where the Location object is stored. `90` is read:\n\n```\nfinal int tag = readRawVarint32();\nfinal int fieldNumber = tag >>> TAG_TYPE_BITS; // TAG_TYPE_BITS = 3\n```\n\nSo this makes fieldNumber equal 11, which is the Location message nested inside class A (doesn't really coincide with the example in my initial post).\nThis makes ProtoStuff look into the Schema and find that field 11 is of type Location and it starts handling the nested message. The first thing it reads, inside this nested message, is buffer position 202: `7`. It uses the two lines above making `tag=7` and therefore `fieldNumber=0`.\n\nThe continuation of the two lines above:\n\n```\n        final int tag = readRawVarint32();\n        final int fieldNumber = tag >>> TAG_TYPE_BITS;\n        if (fieldNumber == 0)\n        {\n            if (decodeNestedMessageAsGroup && WIRETYPE_TAIL_DELIMITER == (tag & TAG_TYPE_MASK)) // WIRETYPE_TAIL_DELIMITER = 7\n            {\n                // protostuff's tail delimiter for streaming\n                // 2 options: length-delimited or tail-delimited.\n                lastTag = 0;\n                return 0;\n            }\n            ...\n```\n\nProtoStuff is going through all the incoming fieldNumbers and aborts looping when fieldNumber is 0. Therefore the nested message `Location` is never populated since the looping is aborted immediately. It moves out to the outer message (class `A`). Here the next byte it finds is `26` (pos 203 above). This should actually belong to the nested message `Location` but is populating the wrong field in the outer message.\n\nAs I described in the GoogleGroup thread I'm very new to Protocol Buffers so I'm not sure what this all means. But the byte at position 202 `7` is interpreted as `Location` population is over.\n\nCan you make anything of this very long description? Is it something that you want from me in order to clarify?\n\nThanks for your help.\n. I maybe should add that we are using protobuf-net (clients) to ProtoStuff (back-end) for our app. We have 200k users so I don't think that it is an issue with how _we_ serialize / deserialize using protobuf-net and ProtoStuff as you suggested (with ms.GetBuffer() vs ms.ToArray()). Everything else works but this intricate case. \n. The city is SOLNA correct. \nAnd yes, there is a field 11 in the message. Its an `Location` object with a string field City populated with \"SOLNA\"\n. ```\n    [DataContract]\n    [ProtoContract]\n    public class Location\n    {\n        [DataMember (Name = \"coordinate\")]\n        [ProtoMember(1)]\n        public Coordinate Coordinate { get; set; }\n\n        [DataMember (Name = \"accuracy\")]\n        [ProtoMember(2)]\n        public Double Accuracy { get; set; }\n\n        [DataMember (Name = \"city\")]\n        [ProtoMember(3)]\n        public string City { get; set; }\n    }\n```\n\nIn the above example, Coordinate and Accuracy are null and 0 respectively. \n\nI'll see if I can post a full example. Or maybe if I can remove some parts that are business dependant.\n. Ah I see. Thanks for describing this for me and sorry for taking your time. I will take this to ProtoStuff.\n\nThanks again!\n. ",
    "JoyLeeSoft": "@mgravell Wow! yeah. thanks a lot\n. @mgravell Wow! yeah. thanks a lot\n. ",
    "w359405949": "thx, \n. thx, \n. ",
    "mpb27": "A merge will also cause a stack overflow regardless of SkipConstructor.\n\n``` C#\n            // ... create a non-default Foo (with BarB) ...\n            var fooWithBarB = new Foo() { SomeBar = new BarB() { Value = 321.0 } };\n\n            // ... serialize it into memory ...\n            var ms = new MemoryStream();\n            Serializer.Serialize<Foo>(ms, fooWithBarB);\n\n            // ... create an instance of Foo to merge with ...\n            var mergeFoo = new Foo(); \n\n            // ... merge which will cause a buffer overflow ...\n            ms.Position = 0;\n            Serializer.Merge<Foo>(ms, mergeFoo);\n```\n. A merge will also cause a stack overflow regardless of SkipConstructor.\n\n``` C#\n            // ... create a non-default Foo (with BarB) ...\n            var fooWithBarB = new Foo() { SomeBar = new BarB() { Value = 321.0 } };\n\n            // ... serialize it into memory ...\n            var ms = new MemoryStream();\n            Serializer.Serialize<Foo>(ms, fooWithBarB);\n\n            // ... create an instance of Foo to merge with ...\n            var mergeFoo = new Foo(); \n\n            // ... merge which will cause a buffer overflow ...\n            ms.Position = 0;\n            Serializer.Merge<Foo>(ms, mergeFoo);\n```\n. ",
    "i3arnon": "This is a very important issue with no real solution (other than special-treating every single `DateTime` member).\n\nWhen your product only works with times in UTC (which is quite common) or you use libraries that do (like the MongoDB C# Driver) this can get ugly really fast.\n\nI see 3 possible solutions/workarounds:\n1. Adding the `DateTimeKind` to the message.\n2. Enabling surrogates for `DateTime`.\n3. Setting the [`EpochOrigin`](https://github.com/mgravell/protobuf-net/blob/15174a09ee3223c8805b3ef81c1288879c746dfa/protobuf-net/BclHelpers.cs#L48) (and so every `DateTime` resulting from it) to be `DateTimeKind.Utc` instead of `DateTimeKind.Unspecified` and using `ToUniversalTime` in the serialization:\n\n<b>\n\n```\ninternal static readonly DateTime EpochOrigin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n```\n\nI think the `DateTimeKind.Utc` option is preferable as it's a simple change, it's the suggested way to treat epoch times ([How do you convert epoch time in C#?](http://stackoverflow.com/a/2883645/885318)), it's more predictable than `DateTimeKind.Unspecified` that changes by calling both `ToUniversalTime` **and** `ToLocalTime` and doesn't increase the message size.\n\n@mgravell, I'm willing to implement and PR any of these options, but it would be a waste if you disagree. So, do you like any of these options and are willing to accept one?\n\n---\n\nCurrently, we use reflection to switch the `EpochOrigin` value with one that has `DateTimeKind.Utc`. This works, but it's brittle and ugly.\n. Thanks @mgravell. this is very good news :).\n\nDo you have any plans of pushing a new nuget version with this commit?\n. @roberttaylor26 not yet.\n. @roberttaylor26 while you wait... if you can handle **all** `DateTime`s being **either** `DateTimeKind.Utc` **or** `DateTimeKind.Local` you can set it with reflection. There are explanations and examples [on my blog](http://blog.i3arnon.com/2015/10/03/protobuf-net-datetime-bug/).\n. @russcam The package is definitely not up to date with master as the last nuget update was in 2013 and there have been some commits since then.\n\nHowever in issue #44 marc said he plans on releasing an update soon.\n. @jtcalhoun I'm not sure this is exactly the same as the old issue.\nI'm talking about the usual types in an `IReadOnly` container while that issue is about specific read only types.\nI think my issue is much simpler to implement (as it's just an interface) and is more common, but I could be wrong on this.\n. @AqlaSolutions not really sure what you mean. The above code is the entire test.\nA `Sheep` class with `IReadOnlyCollection<string>` property that throws when calling `DeepClone`.\n. @galpin Me? I would if there weren't 17 pending PRs already or if there was a plan to drop support for older version that don't have these interfaces...\n. This is a very important issue with no real solution (other than special-treating every single `DateTime` member).\n\nWhen your product only works with times in UTC (which is quite common) or you use libraries that do (like the MongoDB C# Driver) this can get ugly really fast.\n\nI see 3 possible solutions/workarounds:\n1. Adding the `DateTimeKind` to the message.\n2. Enabling surrogates for `DateTime`.\n3. Setting the [`EpochOrigin`](https://github.com/mgravell/protobuf-net/blob/15174a09ee3223c8805b3ef81c1288879c746dfa/protobuf-net/BclHelpers.cs#L48) (and so every `DateTime` resulting from it) to be `DateTimeKind.Utc` instead of `DateTimeKind.Unspecified` and using `ToUniversalTime` in the serialization:\n\n<b>\n\n```\ninternal static readonly DateTime EpochOrigin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);\n```\n\nI think the `DateTimeKind.Utc` option is preferable as it's a simple change, it's the suggested way to treat epoch times ([How do you convert epoch time in C#?](http://stackoverflow.com/a/2883645/885318)), it's more predictable than `DateTimeKind.Unspecified` that changes by calling both `ToUniversalTime` **and** `ToLocalTime` and doesn't increase the message size.\n\n@mgravell, I'm willing to implement and PR any of these options, but it would be a waste if you disagree. So, do you like any of these options and are willing to accept one?\n\n---\n\nCurrently, we use reflection to switch the `EpochOrigin` value with one that has `DateTimeKind.Utc`. This works, but it's brittle and ugly.\n. Thanks @mgravell. this is very good news :).\n\nDo you have any plans of pushing a new nuget version with this commit?\n. @roberttaylor26 not yet.\n. @roberttaylor26 while you wait... if you can handle **all** `DateTime`s being **either** `DateTimeKind.Utc` **or** `DateTimeKind.Local` you can set it with reflection. There are explanations and examples [on my blog](http://blog.i3arnon.com/2015/10/03/protobuf-net-datetime-bug/).\n. @russcam The package is definitely not up to date with master as the last nuget update was in 2013 and there have been some commits since then.\n\nHowever in issue #44 marc said he plans on releasing an update soon.\n. @jtcalhoun I'm not sure this is exactly the same as the old issue.\nI'm talking about the usual types in an `IReadOnly` container while that issue is about specific read only types.\nI think my issue is much simpler to implement (as it's just an interface) and is more common, but I could be wrong on this.\n. @AqlaSolutions not really sure what you mean. The above code is the entire test.\nA `Sheep` class with `IReadOnlyCollection<string>` property that throws when calling `DeepClone`.\n. @galpin Me? I would if there weren't 17 pending PRs already or if there was a plan to drop support for older version that don't have these interfaces...\n. ",
    "michaeldolinsky": "Hey @mgravell,\nAre there any updates about the nuget update?\n. Hey @mgravell,\nAre there any updates about the nuget update?\n. ",
    "frarees": "@mgravell +1 for NuGet update with those changes. \n. @mgravell +1 for NuGet update with those changes. \n. ",
    "ghost": "hey, was a nuget update ever made that included this fix?\n\nThanks,\nRob\n. Hey, I was just wondering if the DateTimeKind had been added into the serialization of a DateTime yet and if a nuget package would be made available?\n\nThanks,\nRob\n. Thanks for taking a look. There were two changes i made:\n\n1) Empty arrays should be deserialized as an empty array and not as null. This seems like a low risk bug fix, did you have an issue with this?\n\n2) DateTimeKind is serialized with the DateTime as a field. From your email it seemed like this was the change that most concerned you, is that correct? I'm fairly new to protobuf but on https://developers.google.com/protocol-buffers/docs/encoding it mentions that \"When the message is being decoded, the parser needs to be able to skip fields that it doesn't recognize.\". In the event where someone was using a library that wasn't the protobuf-net library (or if they were using a version of protobuf-net without this fix) wouldn't the parser just skip the DateTimeKind field and the behaviour would be as it currently is with the DateTimeKind not being serialized? \n. Sure that makes sense. Do you know how we'd go about implementing the opt-in option flag?\n. OK, I've had a go. I've committed the following.\n- add a **new overload** to BclHelpers.WriteDateTime that accepts a boolean\n  to indicate whether to include the kind\n- forward the old WriteDateTime to WriteDateTime(value,dest,false);\n- optional: mark the old overload as `[Obsolete]`\n\nThe last point involving modifying the EmitWrite method in CompilerContext to ignore Obsolete methods - I can do this when using System.Reflection but I haven't come across IKVM before. I tried using Attribute.GetCustomAttribute but I couldn't see an Attribute class when I decompiled IKVM.Reflection dll...any chance you know how to get custom attributes using IKVM off the top of your head :-) ?\n. Ah thanks for that, I've had a go at implementing the required changes in EmitWrite. I think I'm close but have left a TODO in the \"#if FEAT_IKVM\" section. Feel free to revert and implement properly if it doesn't look close.\n. Marc you said this earlier.\n\n\"I don't think we can just enable this - it is a breaking change, especially for people who expect the data output to be reproducible. To merge this, I would want to make this \"opt-in\", perhaps via a global setting, so that it doesn't adversely impact other users. If it was in from day zero, that would be different.\n\nThoughts?\"\n\nThis led me to try to implement the changes in a way that would not change the serialization string (unless opt'ed in) but after thinking about it further I think the original changes are actually ok and any attempt to make the changes opt-in are unnecessary and would just add code complexity. \n\nThe whole point of protobuf if that you have the flexibility to add/remove headers without breaking things. There should be a requirement for the protobuf-net library to be able to deserialize protobuf strings serialized by older versions so I think that any change that violates this rule is a breaking change. \n\nI don't think there needs to be a requirement on the library to ensure that serialized objects via different versions produce the same protobuf string. Anyone relying on the protobuf serialization string is asking for trouble and hasn't really understood what protobuf is really about....in my opinion.\n\nI've reverted my changes back to what they were originally. If you disagree can you please create an issue and whoever picks it up can implement it in anyway they choose but I don't think I want to spend any more time than I already have.\n\nThanks,\nRob \n. I think that one of the scenarios you mentioned was a redis \"set\" so basically anywhere where someone is using the serialization string as a key would consider this change as a breaking change. I'm just wondering if using the serialization string as a key is a requirement that the protobuf-net library should support. \n\nFrom my point of view the only requirement the library should support is (which I know isn't related to this issue):\n\n\"The protobuf-net library must be able to deserialize protobuf strings serialized by older versions.\" \n\nAs you mentioned the safest approach would be to have users opt-in but as a user it would be frustrating having to set various obscure options in order to have the library work correctly. I'm not a protobuf user at the moment so clearly my bias is towards the frustration of setting obscure config over having the serialization string change out from under you.\n\nAnyway hopefully this will be resolved sometime in the future, until these I'll stick with NewtonSoft.Json and my unnecessarily large messages..\n. Hi,\n\nWould another option be to bump the major version up and just accept the changes as they are? I'm happy to wait and have it as an opt-in configuration setting but wondered about just using the major version instead.\n\nThanks,\nRob\n. Ah thanks very much that is exciting! Did that include the empty array\nserialization bug fix also - where empty arrays were being deserialized to\nnull instead of an empty array? I kind of lumped that in together with the\nDateTime issue in my original pull request.\n\nIt would be good to know when you intend to publish a version to nuget,\nI'll subscribe to the issue.\n\nThanks for resolving this :-)\n\nOn Tue, May 26, 2015 at 11:12 AM, Marc Gravell notifications@github.com\nwrote:\n\n> Bumping the major version doesn't solve the underlying problem; I have now\n> addressed this as an _opt-in_ behaviour re related issue #44\n> https://github.com/mgravell/protobuf-net/issues/44 - opt-in flag\n> available from next build\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-105476966.\n. FYI,\n\nIt looks like nested empty arrays are still be deserialized as null.\n\n[Test]\n        public void InnerEmptyArrayShouldNotBeDeserializedAsNull()\n        {\n            using (MemoryStream ms = new MemoryStream())\n            {\n                var instance = new[]\n                {\n                    new Test\n                    {\n                        tests = new int[0]\n                    },\n                };\n\n```\n            Serializer.Serialize(ms, instance);\n\n            ms.Flush();\n            ms.Position = 0;\n            var obj = Serializer.Deserialize<Test[]>(ms);\n\n            Assert.That(obj[0].tests, Is.Not.Null);\n        }\n    }\n```\n\nOn Tue, May 26, 2015 at 4:45 PM, Rob Taylor rob.taylor.21@gmail.com wrote:\n\n> Ah thanks very much that is exciting! Did that include the empty array\n> serialization bug fix also - where empty arrays were being deserialized to\n> null instead of an empty array? I kind of lumped that in together with the\n> DateTime issue in my original pull request.\n> \n> It would be good to know when you intend to publish a version to nuget,\n> I'll subscribe to the issue.\n> \n> Thanks for resolving this :-)\n> \n> On Tue, May 26, 2015 at 11:12 AM, Marc Gravell notifications@github.com\n> wrote:\n> \n> > Bumping the major version doesn't solve the underlying problem; I have\n> > now addressed this as an _opt-in_ behaviour re related issue #44\n> > https://github.com/mgravell/protobuf-net/issues/44 - opt-in flag\n> > available from next build\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/pull/82#issuecomment-105476966\n> > .\n. It's my first pull request and i have identified some more bugs, will try\nagain tomorrow. Thanks for asking\nAm 09.05.2015 18:40 schrieb \"Marc Gravell\" notifications@github.com:\n\n> I'm confused - you've opened and closed within an hour; was this mistaken?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Is there any update on tracking this down, I am encountering this issue as well.\r\n\r\nEdit:\r\nI am also having this problem in release mode.... @mgravell, when I clone your source at ```master```, enter ```protobuf-net```, ```dotnet migrate``` (to use the new .NET Core csproj format), edit the csproj to add a ```PropertyGroup``` for ```netstandard1.5``` (also knocked out targets that I don't personally need for debugging purposes) and add ```DefineConstants``` for ```$(DefineConstants);FEAT_SAFE;COREFX;PORTABLE``` and then reference this DLL from my ```netstandard1.5``` project, everything seems to work fine.... hey, was a nuget update ever made that included this fix?\n\nThanks,\nRob\n. Hey, I was just wondering if the DateTimeKind had been added into the serialization of a DateTime yet and if a nuget package would be made available?\n\nThanks,\nRob\n. Thanks for taking a look. There were two changes i made:\n\n1) Empty arrays should be deserialized as an empty array and not as null. This seems like a low risk bug fix, did you have an issue with this?\n\n2) DateTimeKind is serialized with the DateTime as a field. From your email it seemed like this was the change that most concerned you, is that correct? I'm fairly new to protobuf but on https://developers.google.com/protocol-buffers/docs/encoding it mentions that \"When the message is being decoded, the parser needs to be able to skip fields that it doesn't recognize.\". In the event where someone was using a library that wasn't the protobuf-net library (or if they were using a version of protobuf-net without this fix) wouldn't the parser just skip the DateTimeKind field and the behaviour would be as it currently is with the DateTimeKind not being serialized? \n. Sure that makes sense. Do you know how we'd go about implementing the opt-in option flag?\n. OK, I've had a go. I've committed the following.\n- add a **new overload** to BclHelpers.WriteDateTime that accepts a boolean\n  to indicate whether to include the kind\n- forward the old WriteDateTime to WriteDateTime(value,dest,false);\n- optional: mark the old overload as `[Obsolete]`\n\nThe last point involving modifying the EmitWrite method in CompilerContext to ignore Obsolete methods - I can do this when using System.Reflection but I haven't come across IKVM before. I tried using Attribute.GetCustomAttribute but I couldn't see an Attribute class when I decompiled IKVM.Reflection dll...any chance you know how to get custom attributes using IKVM off the top of your head :-) ?\n. Ah thanks for that, I've had a go at implementing the required changes in EmitWrite. I think I'm close but have left a TODO in the \"#if FEAT_IKVM\" section. Feel free to revert and implement properly if it doesn't look close.\n. Marc you said this earlier.\n\n\"I don't think we can just enable this - it is a breaking change, especially for people who expect the data output to be reproducible. To merge this, I would want to make this \"opt-in\", perhaps via a global setting, so that it doesn't adversely impact other users. If it was in from day zero, that would be different.\n\nThoughts?\"\n\nThis led me to try to implement the changes in a way that would not change the serialization string (unless opt'ed in) but after thinking about it further I think the original changes are actually ok and any attempt to make the changes opt-in are unnecessary and would just add code complexity. \n\nThe whole point of protobuf if that you have the flexibility to add/remove headers without breaking things. There should be a requirement for the protobuf-net library to be able to deserialize protobuf strings serialized by older versions so I think that any change that violates this rule is a breaking change. \n\nI don't think there needs to be a requirement on the library to ensure that serialized objects via different versions produce the same protobuf string. Anyone relying on the protobuf serialization string is asking for trouble and hasn't really understood what protobuf is really about....in my opinion.\n\nI've reverted my changes back to what they were originally. If you disagree can you please create an issue and whoever picks it up can implement it in anyway they choose but I don't think I want to spend any more time than I already have.\n\nThanks,\nRob \n. I think that one of the scenarios you mentioned was a redis \"set\" so basically anywhere where someone is using the serialization string as a key would consider this change as a breaking change. I'm just wondering if using the serialization string as a key is a requirement that the protobuf-net library should support. \n\nFrom my point of view the only requirement the library should support is (which I know isn't related to this issue):\n\n\"The protobuf-net library must be able to deserialize protobuf strings serialized by older versions.\" \n\nAs you mentioned the safest approach would be to have users opt-in but as a user it would be frustrating having to set various obscure options in order to have the library work correctly. I'm not a protobuf user at the moment so clearly my bias is towards the frustration of setting obscure config over having the serialization string change out from under you.\n\nAnyway hopefully this will be resolved sometime in the future, until these I'll stick with NewtonSoft.Json and my unnecessarily large messages..\n. Hi,\n\nWould another option be to bump the major version up and just accept the changes as they are? I'm happy to wait and have it as an opt-in configuration setting but wondered about just using the major version instead.\n\nThanks,\nRob\n. Ah thanks very much that is exciting! Did that include the empty array\nserialization bug fix also - where empty arrays were being deserialized to\nnull instead of an empty array? I kind of lumped that in together with the\nDateTime issue in my original pull request.\n\nIt would be good to know when you intend to publish a version to nuget,\nI'll subscribe to the issue.\n\nThanks for resolving this :-)\n\nOn Tue, May 26, 2015 at 11:12 AM, Marc Gravell notifications@github.com\nwrote:\n\n> Bumping the major version doesn't solve the underlying problem; I have now\n> addressed this as an _opt-in_ behaviour re related issue #44\n> https://github.com/mgravell/protobuf-net/issues/44 - opt-in flag\n> available from next build\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/pull/82#issuecomment-105476966.\n. FYI,\n\nIt looks like nested empty arrays are still be deserialized as null.\n\n[Test]\n        public void InnerEmptyArrayShouldNotBeDeserializedAsNull()\n        {\n            using (MemoryStream ms = new MemoryStream())\n            {\n                var instance = new[]\n                {\n                    new Test\n                    {\n                        tests = new int[0]\n                    },\n                };\n\n```\n            Serializer.Serialize(ms, instance);\n\n            ms.Flush();\n            ms.Position = 0;\n            var obj = Serializer.Deserialize<Test[]>(ms);\n\n            Assert.That(obj[0].tests, Is.Not.Null);\n        }\n    }\n```\n\nOn Tue, May 26, 2015 at 4:45 PM, Rob Taylor rob.taylor.21@gmail.com wrote:\n\n> Ah thanks very much that is exciting! Did that include the empty array\n> serialization bug fix also - where empty arrays were being deserialized to\n> null instead of an empty array? I kind of lumped that in together with the\n> DateTime issue in my original pull request.\n> \n> It would be good to know when you intend to publish a version to nuget,\n> I'll subscribe to the issue.\n> \n> Thanks for resolving this :-)\n> \n> On Tue, May 26, 2015 at 11:12 AM, Marc Gravell notifications@github.com\n> wrote:\n> \n> > Bumping the major version doesn't solve the underlying problem; I have\n> > now addressed this as an _opt-in_ behaviour re related issue #44\n> > https://github.com/mgravell/protobuf-net/issues/44 - opt-in flag\n> > available from next build\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/mgravell/protobuf-net/pull/82#issuecomment-105476966\n> > .\n. It's my first pull request and i have identified some more bugs, will try\nagain tomorrow. Thanks for asking\nAm 09.05.2015 18:40 schrieb \"Marc Gravell\" notifications@github.com:\n\n> I'm confused - you've opened and closed within an hour; was this mistaken?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Is there any update on tracking this down, I am encountering this issue as well.\r\n\r\nEdit:\r\nI am also having this problem in release mode.... @mgravell, when I clone your source at ```master```, enter ```protobuf-net```, ```dotnet migrate``` (to use the new .NET Core csproj format), edit the csproj to add a ```PropertyGroup``` for ```netstandard1.5``` (also knocked out targets that I don't personally need for debugging purposes) and add ```DefineConstants``` for ```$(DefineConstants);FEAT_SAFE;COREFX;PORTABLE``` and then reference this DLL from my ```netstandard1.5``` project, everything seems to work fine.... ",
    "mauricio-morales": "I'm facing this issue now (with v2.0.0.668, latest I can get in VS2012 \ud83d\ude22). While I'm happy accepting that I'm going to have to manually include the DLL into VS2012 instead of nuget to get v2.1 running... I do have a question:\r\n\r\nSince `DateTime.Ticks` is already _always_ in UTC (according to my interpretation of https://msdn.microsoft.com/en-us/library/system.datetime.ticks%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396), why wasn't \"always serialize and deserialize in UTC\" considered? I mean, if I ask to send a `DateTimeKind.Local` message, it would still send UTC Ticks, and could receive a `DateTimeKind.UTC` on the other side (which I effectively am anyway). Perhaps it's just a matter of staying _true_ to what was sent over the wire.\r\n\r\nI'm not deeply familiar with the code, so I'm sorry if this was a silly question. . I wrote a test that can exercise this issue:\r\n\r\n```\r\n        [TestMethod, TestCategory(\"RecruitmentEdge\"), Owner(\"RecruitmentEdge@careerbuilder.com\")]\r\n        public void Verify_Protobuf_Serialization()\r\n        {\r\n            using (var writeStream = new System.IO.MemoryStream())\r\n            {\r\n                ISet<String> mySet = new HashSet<String>();\r\n                mySet.Add(\"hello world\");\r\n\r\n                ProtoBuf.Serializer.Serialize(writeStream, mySet);\r\n\r\n                using (var readStream = new System.IO.MemoryStream(writeStream.ToArray()))\r\n                {\r\n                    var myDeserializedSet = ProtoBuf.Serializer.Deserialize<ISet<String>>(readStream);\r\n                    Assert.AreEqual(mySet.First(), myDeserializedSet.First());\r\n                    Assert.AreEqual(\"hello world\", mySet.First());\r\n                }\r\n            }\r\n\r\n            using (var writeStream = new System.IO.MemoryStream())\r\n            {\r\n                IDictionary<DayOfWeek, ISet<String>> myMap = new Dictionary<DayOfWeek, ISet<String>>();\r\n                myMap.Add(DayOfWeek.Monday, new HashSet<string> { \"hello world\" });\r\n\r\n                ProtoBuf.Serializer.Serialize(writeStream, myMap);\r\n\r\n                using (var readStream = new System.IO.MemoryStream(writeStream.ToArray()))\r\n                {\r\n                    var myDeserializedMap = ProtoBuf.Serializer.Deserialize<IDictionary<DayOfWeek, ISet<String>>>(readStream);\r\n                    Assert.AreEqual(myMap[DayOfWeek.Monday].First(), myDeserializedMap[DayOfWeek.Monday].First());\r\n                    Assert.AreEqual(\"hello world\", myMap[DayOfWeek.Monday].First());\r\n                }\r\n            }\r\n        }\r\n```. I'm facing this issue now (with v2.0.0.668, latest I can get in VS2012 \ud83d\ude22). While I'm happy accepting that I'm going to have to manually include the DLL into VS2012 instead of nuget to get v2.1 running... I do have a question:\r\n\r\nSince `DateTime.Ticks` is already _always_ in UTC (according to my interpretation of https://msdn.microsoft.com/en-us/library/system.datetime.ticks%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396), why wasn't \"always serialize and deserialize in UTC\" considered? I mean, if I ask to send a `DateTimeKind.Local` message, it would still send UTC Ticks, and could receive a `DateTimeKind.UTC` on the other side (which I effectively am anyway). Perhaps it's just a matter of staying _true_ to what was sent over the wire.\r\n\r\nI'm not deeply familiar with the code, so I'm sorry if this was a silly question. . I wrote a test that can exercise this issue:\r\n\r\n```\r\n        [TestMethod, TestCategory(\"RecruitmentEdge\"), Owner(\"RecruitmentEdge@careerbuilder.com\")]\r\n        public void Verify_Protobuf_Serialization()\r\n        {\r\n            using (var writeStream = new System.IO.MemoryStream())\r\n            {\r\n                ISet<String> mySet = new HashSet<String>();\r\n                mySet.Add(\"hello world\");\r\n\r\n                ProtoBuf.Serializer.Serialize(writeStream, mySet);\r\n\r\n                using (var readStream = new System.IO.MemoryStream(writeStream.ToArray()))\r\n                {\r\n                    var myDeserializedSet = ProtoBuf.Serializer.Deserialize<ISet<String>>(readStream);\r\n                    Assert.AreEqual(mySet.First(), myDeserializedSet.First());\r\n                    Assert.AreEqual(\"hello world\", mySet.First());\r\n                }\r\n            }\r\n\r\n            using (var writeStream = new System.IO.MemoryStream())\r\n            {\r\n                IDictionary<DayOfWeek, ISet<String>> myMap = new Dictionary<DayOfWeek, ISet<String>>();\r\n                myMap.Add(DayOfWeek.Monday, new HashSet<string> { \"hello world\" });\r\n\r\n                ProtoBuf.Serializer.Serialize(writeStream, myMap);\r\n\r\n                using (var readStream = new System.IO.MemoryStream(writeStream.ToArray()))\r\n                {\r\n                    var myDeserializedMap = ProtoBuf.Serializer.Deserialize<IDictionary<DayOfWeek, ISet<String>>>(readStream);\r\n                    Assert.AreEqual(myMap[DayOfWeek.Monday].First(), myDeserializedMap[DayOfWeek.Monday].First());\r\n                    Assert.AreEqual(\"hello world\", myMap[DayOfWeek.Monday].First());\r\n                }\r\n            }\r\n        }\r\n```. ",
    "mreu": "What I found is the required fields cannot have default values. If the fields are optional the default values are set. Is that correct, that required fields cannot have deafult values?\n. Sorry, took the wrong button and close it accidential. \n. I fixed it for C# and made a pullrequest\n. What I found is the required fields cannot have default values. If the fields are optional the default values are set. Is that correct, that required fields cannot have deafult values?\n. Sorry, took the wrong button and close it accidential. \n. I fixed it for C# and made a pullrequest\n. ",
    "kieranbenton": "Ah apologies - I knew I was going to get something wrong with the contrived\nsample I gave! Yes in reality I'm seeing this as part of a much more\ncomplex example I can't share directly with a member number of \"3\".\n\nOn 16 November 2014 20:50, Marc Gravell notifications@github.com wrote:\n\n> Interesting. Does it do that if the number is 1, not 0? 0 is not a valid\n> protobuf field number\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/46#issuecomment-63238342\n> .\n. Ah - so there is no way to directly initialize properties if you're\nexpecting on them being pulled in by deserialization at a later point\nunless you use [DefaultValue(..)]? Is there something I can read to\nunderstand that behaviour somewhere?\n\nCheers!\n\nOn 17 November 2014 00:22, Marc Gravell notifications@github.com wrote:\n\n> Ah, this is probably the annoying \"implicit defaults\" - an early design\n> choice that is much regretted. Try adding:\n> \n> [DefaultValue(true)]\n> \n> To the property. That should hopefully fit it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/46#issuecomment-63247207\n> .\n. Ah apologies - I knew I was going to get something wrong with the contrived\nsample I gave! Yes in reality I'm seeing this as part of a much more\ncomplex example I can't share directly with a member number of \"3\".\n\nOn 16 November 2014 20:50, Marc Gravell notifications@github.com wrote:\n\n> Interesting. Does it do that if the number is 1, not 0? 0 is not a valid\n> protobuf field number\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/46#issuecomment-63238342\n> .\n. Ah - so there is no way to directly initialize properties if you're\nexpecting on them being pulled in by deserialization at a later point\nunless you use [DefaultValue(..)]? Is there something I can read to\nunderstand that behaviour somewhere?\n\nCheers!\n\nOn 17 November 2014 00:22, Marc Gravell notifications@github.com wrote:\n\n> Ah, this is probably the annoying \"implicit defaults\" - an early design\n> choice that is much regretted. Try adding:\n> \n> [DefaultValue(true)]\n> \n> To the property. That should hopefully fit it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/46#issuecomment-63247207\n> .\n. ",
    "eggsterino": "+1\noneof is an awesome feature and I really hope to use it!\n. +1\noneof is an awesome feature and I really hope to use it!\n. ",
    "ejball": ":+1: \n. :+1: \n. ",
    "matthewsommer": "+1\n. +1\n. ",
    "bbarritt": "+1\n. +1\n. ",
    "tengyifei": ":+1: \n. :+1: \n. ",
    "unalone": "![](https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png)\n. ![](https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png)\n. ",
    "polteennick": "+1\n. +1\n. ",
    "dhirschfeld": ":+1:\n. :+1:\n. ",
    "Ginurx": "+1\n. +1\n. ",
    "sawdiggy": "This issue is pretty old, is it scheduled to be added?  \n. This issue is pretty old, is it scheduled to be added?  \n. ",
    "DapperTayra": "+1. +1. ",
    "yaakov-h": "@mgravell any progress in this area, or near-future plans?. @mgravell any progress in this area, or near-future plans?. ",
    "tonysneed": "You may have a serialization problem due to cycles.  You should try configuring Protobuf to handle cycles. This can be done with attributes, or in code.  I have a solution which does this in code, which I prefer to littering my entities with serialization attributes. Feel free to check it out. I also plan to publish some NuGet packages for it. https://gist.github.com/tonysneed/d7f6533e12e5f7e1c0fc\n. What about deploying Protobuf-net as a Portable Class Library?  Currently it targets .NET 4 and higher.  Is there something that might be incompatible with PCL's?\n. You may have a serialization problem due to cycles.  You should try configuring Protobuf to handle cycles. This can be done with attributes, or in code.  I have a solution which does this in code, which I prefer to littering my entities with serialization attributes. Feel free to check it out. I also plan to publish some NuGet packages for it. https://gist.github.com/tonysneed/d7f6533e12e5f7e1c0fc\n. What about deploying Protobuf-net as a Portable Class Library?  Currently it targets .NET 4 and higher.  Is there something that might be incompatible with PCL's?\n. ",
    "Hijdra": "For the time being I solved this by doing the next steps:\n1. Add a Universal Portable Library next to the WinRT library.\n2. Copy every file from the WinRT to the Universal project.\n3. Remove the AssemblyInfo.cs from the Properties folder.\n4. Copy the build Conditional compilation symbols from the WinRT to the Universal library.\n5. Have fun :smiley: \n\nWould be awesome if this is included in Nuget\n. For the time being I solved this by doing the next steps:\n1. Add a Universal Portable Library next to the WinRT library.\n2. Copy every file from the WinRT to the Universal project.\n3. Remove the AssemblyInfo.cs from the Properties folder.\n4. Copy the build Conditional compilation symbols from the WinRT to the Universal library.\n5. Have fun :smiley: \n\nWould be awesome if this is included in Nuget\n. ",
    "BrannonKing": "I would like support for profile 259: [portable-win8+net45+wp8+wpa81]. Thanks.\n. I would like support for profile 259: [portable-win8+net45+wp8+wpa81]. Thanks.\n. ",
    "StingrayFE": "Hi, I'm trying to compile protobuf-net with your modification. But I can't find a .sln that compiles without error. I was wondering if you had a binary of your fixes or some explanation on what i need to do to be able to compile the protobuf.net master branch.\n. Hi, I'm trying to compile protobuf-net with your modification. But I can't find a .sln that compiles without error. I was wondering if you had a binary of your fixes or some explanation on what i need to do to be able to compile the protobuf.net master branch.\n. ",
    "annakata": "This seems like a critical fix for VTS which has been pending for far too long - but it's also missing tests.\n. This seems like a critical fix for VTS which has been pending for far too long - but it's also missing tests.\n. ",
    "rstonkus": "I'd suggest introduce global flag for this instead of dropping all errors.\r\nMy option here: [https://github.com/mgravell/protobuf-net/pull/260](https://github.com/mgravell/protobuf-net/pull/260).\r\nInstead of dropping the exception, one could use single-liner:\r\n`\r\nRuntimeTypeModel.Default.GlobalEnumPassthru = true;\r\n`\r\nOr set that option for each enum separatelly like (existing functionality):\r\n`\r\nRuntimeTypeModel.Default[typeof(YourEnum)].EnumPassthru = true;\r\n`. As an example of scenario, where global Enum passthru would help is the [Google RTB protobuf contract](https://developers.google.com/ad-exchange/rtb/downloads/realtime-bidding-proto). It happens that they change (add) Enum values from time to time, prior to updating contract schema.\r\nUsually, there's 0 business impact in those changes, before they appear in actual contract, but they certainly can brake business if failing to process requests because of the new values.\r\n\r\nAnd there is a lot of Enums in those types of contracts, so:\r\n\r\n- listing them statically is not an option\r\n- adding attribute is not an option as well, as the code is generated via proto-gen\r\n- reflecting through enums through reflection on start is an option, but IMO it is a bit overkill\r\n. Googles protoc for c# on proto3 relies on int type backing field for enums as far as I have checked.\r\n\r\nYes, proto3 basically relaxes the requirement for enums in the sense that they allow other values than defined by default, which makes it backwards compatible (in business sense) by default. But AFAIK they must be 0 based, which is not the case in case of current RTB contract, e.g. `VideoFormat`. \r\nAnd just recently they've added extra enumerators to that type :) So, I guess, your previous suggestion wouldn't work either (if I understand it correctly).\r\n\r\nNot sure though that completely removing check or relying on `[DefaultValue(...)]` logic makes sense. 'Cause in some more stringent scenarios that could be used to validate data on the wire. I see as two different domains.\r\nOf course, there's a possibility to invert. `EnablePassthru=true` by default, and add option for concrete checks. Not sure if it is a good thing regarding backwards compatibility.. And what scenario you mean by _\"remap the values\"_?. I thought so, just don't have any reasonable scenario in my mind, where I could want to use that :)\r\nSo in other words, your suggestion is to use pass thru always, except when attribute values do not match actual enum values?\r\nStill, in that case it would be _decent idea_ to provide option to strictly control and match wire values, either for particular enum or for all of them. Just to enforce \"strict\" integration scenario between parties if that is deemed necessary.\r\nIn other words, that would result in similar solution, just different default.. I'd suggest introduce global flag for this instead of dropping all errors.\r\nMy option here: [https://github.com/mgravell/protobuf-net/pull/260](https://github.com/mgravell/protobuf-net/pull/260).\r\nInstead of dropping the exception, one could use single-liner:\r\n`\r\nRuntimeTypeModel.Default.GlobalEnumPassthru = true;\r\n`\r\nOr set that option for each enum separatelly like (existing functionality):\r\n`\r\nRuntimeTypeModel.Default[typeof(YourEnum)].EnumPassthru = true;\r\n`. As an example of scenario, where global Enum passthru would help is the [Google RTB protobuf contract](https://developers.google.com/ad-exchange/rtb/downloads/realtime-bidding-proto). It happens that they change (add) Enum values from time to time, prior to updating contract schema.\r\nUsually, there's 0 business impact in those changes, before they appear in actual contract, but they certainly can brake business if failing to process requests because of the new values.\r\n\r\nAnd there is a lot of Enums in those types of contracts, so:\r\n\r\n- listing them statically is not an option\r\n- adding attribute is not an option as well, as the code is generated via proto-gen\r\n- reflecting through enums through reflection on start is an option, but IMO it is a bit overkill\r\n. Googles protoc for c# on proto3 relies on int type backing field for enums as far as I have checked.\r\n\r\nYes, proto3 basically relaxes the requirement for enums in the sense that they allow other values than defined by default, which makes it backwards compatible (in business sense) by default. But AFAIK they must be 0 based, which is not the case in case of current RTB contract, e.g. `VideoFormat`. \r\nAnd just recently they've added extra enumerators to that type :) So, I guess, your previous suggestion wouldn't work either (if I understand it correctly).\r\n\r\nNot sure though that completely removing check or relying on `[DefaultValue(...)]` logic makes sense. 'Cause in some more stringent scenarios that could be used to validate data on the wire. I see as two different domains.\r\nOf course, there's a possibility to invert. `EnablePassthru=true` by default, and add option for concrete checks. Not sure if it is a good thing regarding backwards compatibility.. And what scenario you mean by _\"remap the values\"_?. I thought so, just don't have any reasonable scenario in my mind, where I could want to use that :)\r\nSo in other words, your suggestion is to use pass thru always, except when attribute values do not match actual enum values?\r\nStill, in that case it would be _decent idea_ to provide option to strictly control and match wire values, either for particular enum or for all of them. Just to enforce \"strict\" integration scenario between parties if that is deemed necessary.\r\nIn other words, that would result in similar solution, just different default.. ",
    "Kylar": "Just adding the source code that is causing this issue:\r\n\r\n`BufferPool.ResizeAndFlushLeft`\r\n\r\n```c#\r\n// try doubling, else match\r\nint newLength = buffer.Length * 2;\r\nif (newLength < toFitAtLeastBytes) newLength = toFitAtLeastBytes;\r\n```\r\n\r\nWhen `buffer.Length * 2` overflows, `newLength` is negative so the condition is true and `newLength` is assigned `toFitAtLeastBytes`, which is only a few bytes larger than the previous size. So for every piece of data to be written after the buffer reaches ~1GB, it is allocating and copying 1GB.. Just adding the source code that is causing this issue:\r\n\r\n`BufferPool.ResizeAndFlushLeft`\r\n\r\n```c#\r\n// try doubling, else match\r\nint newLength = buffer.Length * 2;\r\nif (newLength < toFitAtLeastBytes) newLength = toFitAtLeastBytes;\r\n```\r\n\r\nWhen `buffer.Length * 2` overflows, `newLength` is negative so the condition is true and `newLength` is assigned `toFitAtLeastBytes`, which is only a few bytes larger than the previous size. So for every piece of data to be written after the buffer reaches ~1GB, it is allocating and copying 1GB.. ",
    "mintsoft": "@p4fg Have you tried a fork that maintains a resized bufferpool? Try https://github.com/mintsoft/protobuf-net/tree/bufferpool it might behave better. That said, if you *need* a 1GB buffer, it will keep and maintain a 1GB buffer for the lifetime of the application so there may be a performance (memory footprint) hit there. @Singh400 We've been running protobuf in production for a while and experienced similar issues. We found there was a PR with a tweak to the bufferpool implementation which we forked and refactored to our liking which had a significant impact on LOH fragmentation.\r\n\r\nWe ran it side-by-side on different servers initially and got the following results.\r\n\r\nThis is the original buffer pool:\r\n![originalbufferpool](https://user-images.githubusercontent.com/978048/29751869-86362d60-8b4b-11e7-901f-c75b0792b8db.png)\r\n\r\nThis is the tweaked pool that stores larger arrays:\r\n![improvedbufferpool](https://user-images.githubusercontent.com/978048/29751879-aa9dc190-8b4b-11e7-9c0b-b886d6373eb5.png)\r\n\r\nYou can see the flatness of the LOH size as the yellow line. When we have bursts of load (for example 04:00) you can see the previous behaviour causing a large amount of LOH allocation whereas the new pool is flat. The max is 1.84GB on the original implementation yet ~ 251MB on the new. \r\n\r\nI've put our version of the bufferpool in a branch here (https://github.com/mintsoft/protobuf-net/blob/bufferpool/src/protobuf-net/BufferPool.cs), it's based heavily on (https://github.com/mgravell/protobuf-net/pull/33) however we have removed the OOM handling as we don't need it and are significantly less likely to hit any OOM condition on 64 bit machines.\r\n\r\nI'd suggest trying that branch and see if the behaviour improves?\r\n. @mgravell Now I know there's a benefit that's not just limited to us, are you open to a PR of that branch to enhance the BufferPool implementation?. @Singh400 In that spirit I've put a PR here: https://github.com/mgravell/protobuf-net/pull/307 . @Singh400 I've also released that fork to NuGet: https://www.nuget.org/packages/protobuf-net.Pool/ I might expand on the pooling features to allow more control around the initial sizes and number of buffers in the pool. I think it's also key to include monitoring of the pool somehow, I'll probably integrate ETW into the allocations. @Singh400 I'd switch to using https://www.nuget.org/packages/protobuf-net.Pool/ if I were you, I don't know if it'll be an interim solution or what though. \r\n. @p4fg Have you tried a fork that maintains a resized bufferpool? Try https://github.com/mintsoft/protobuf-net/tree/bufferpool it might behave better. That said, if you *need* a 1GB buffer, it will keep and maintain a 1GB buffer for the lifetime of the application so there may be a performance (memory footprint) hit there. @Singh400 We've been running protobuf in production for a while and experienced similar issues. We found there was a PR with a tweak to the bufferpool implementation which we forked and refactored to our liking which had a significant impact on LOH fragmentation.\r\n\r\nWe ran it side-by-side on different servers initially and got the following results.\r\n\r\nThis is the original buffer pool:\r\n![originalbufferpool](https://user-images.githubusercontent.com/978048/29751869-86362d60-8b4b-11e7-901f-c75b0792b8db.png)\r\n\r\nThis is the tweaked pool that stores larger arrays:\r\n![improvedbufferpool](https://user-images.githubusercontent.com/978048/29751879-aa9dc190-8b4b-11e7-9c0b-b886d6373eb5.png)\r\n\r\nYou can see the flatness of the LOH size as the yellow line. When we have bursts of load (for example 04:00) you can see the previous behaviour causing a large amount of LOH allocation whereas the new pool is flat. The max is 1.84GB on the original implementation yet ~ 251MB on the new. \r\n\r\nI've put our version of the bufferpool in a branch here (https://github.com/mintsoft/protobuf-net/blob/bufferpool/src/protobuf-net/BufferPool.cs), it's based heavily on (https://github.com/mgravell/protobuf-net/pull/33) however we have removed the OOM handling as we don't need it and are significantly less likely to hit any OOM condition on 64 bit machines.\r\n\r\nI'd suggest trying that branch and see if the behaviour improves?\r\n. @mgravell Now I know there's a benefit that's not just limited to us, are you open to a PR of that branch to enhance the BufferPool implementation?. @Singh400 In that spirit I've put a PR here: https://github.com/mgravell/protobuf-net/pull/307 . @Singh400 I've also released that fork to NuGet: https://www.nuget.org/packages/protobuf-net.Pool/ I might expand on the pooling features to allow more control around the initial sizes and number of buffers in the pool. I think it's also key to include monitoring of the pool somehow, I'll probably integrate ETW into the allocations. @Singh400 I'd switch to using https://www.nuget.org/packages/protobuf-net.Pool/ if I were you, I don't know if it'll be an interim solution or what though. \r\n. ",
    "p4fg": "@mintsoft No, we worked around the problem (years ago).. . @mintsoft No, we worked around the problem (years ago).. . ",
    "Flavien": "I would also love the NuGet package to be compatible with .NET Core. \n. I would also love the NuGet package to be compatible with .NET Core. \n. ",
    "maximpashuk": "Same thing for System.Type.\n\"No .proto map found for: System.Type\" exception thrown then you try to get schema.\n\nHowever, serializing\\deserializing works well, so this is not very big problem fo me.\n. Same thing for System.Type.\n\"No .proto map found for: System.Type\" exception thrown then you try to get schema.\n\nHowever, serializing\\deserializing works well, so this is not very big problem fo me.\n. ",
    "abdullin": "This was also already discussed a few years ago on [StackOverflow](http://stackoverflow.com/questions/13802844/protobuf-net-into-proto-generates-enum-conflicts). \n\nAre there any news on this feature?\n. This was also already discussed a few years ago on [StackOverflow](http://stackoverflow.com/questions/13802844/protobuf-net-into-proto-generates-enum-conflicts). \n\nAre there any news on this feature?\n. ",
    "justkao": "Thanks for help. I will handle the serialization using custom TypeModel and handle empty streams myself.\n\n``` c#\nRuntimeTypeModel model = TypeModel.Create();\nRuntimeTypeModel model.UseImplicitZeroDefaults = false;\n```\n\nDoes this mean the protobuf will never return the null value upon deserialization ?\n. Thanks for help. I will handle the serialization using custom TypeModel and handle empty streams myself.\n\n``` c#\nRuntimeTypeModel model = TypeModel.Create();\nRuntimeTypeModel model.UseImplicitZeroDefaults = false;\n```\n\nDoes this mean the protobuf will never return the null value upon deserialization ?\n. ",
    "joeyciechanowicz": "This is also the case when downloading the zip from code.google.com and referenceing the dll in sl4.\n. You can fix this locally by grabbing the source and changing the Silverlight4 project to target Silverlight4 then build it. If you are running your own NuGet feed then you can update the .nupkg with the sl4 version (bump the version) and push it to your own feed.\n. This is also the case when downloading the zip from code.google.com and referenceing the dll in sl4.\n. You can fix this locally by grabbing the source and changing the Silverlight4 project to target Silverlight4 then build it. If you are running your own NuGet feed then you can update the .nupkg with the sl4 version (bump the version) and push it to your own feed.\n. ",
    "lofrank": "Thanks for your quick response, `ProtoReader` is enough for me.\n. Thanks for your quick response, `ProtoReader` is enough for me.\n. ",
    "btecu": "Is there a way to handle subclasses in the newer versions?. @mgravell Thanks!. Is there a way to handle subclasses in the newer versions?. @mgravell Thanks!. ",
    "mynkow": "Hello @mgravell ,\nWould you share a short list of things which you want to improve and the reasons?\n. Hello @mgravell ,\nWould you share a short list of things which you want to improve and the reasons?\n. ",
    "Kulgann": "Please Note: I have already added SkipConstructor and OverWriteList to the wrapper class for the dictionary. Nothing changed.\n. Please Note: I have already added SkipConstructor and OverWriteList to the wrapper class for the dictionary. Nothing changed.\n. ",
    "sandorfr": "It's been a long time but here is a first version.\n. It's been a long time but here is a first version.\n. ",
    "ikopylov": ":+1: \n\nWith large objects ProtoWriter reallocate inner _ioBuffer_ many times. This leads to a high memory traffic. \n\nSo it would be great to reuse ProtoWriter with same _ioBuffer_ inside or give a possibility to pass an external buffer through the constructor.\n. > IIRC that is already pooled and reused quite aggressively...\n\nYes, it is pooled. But the size of _ioBuffer_ in pool is restricted to 1024. It is good for small objects, but not work for large.\n\n> passing one in is awkward because you don't know the sizes in advance.\n\nActually, in many cases the upper limit of the _ioBuffer_ size can be easily estimated.\n. :+1: \n\nWith large objects ProtoWriter reallocate inner _ioBuffer_ many times. This leads to a high memory traffic. \n\nSo it would be great to reuse ProtoWriter with same _ioBuffer_ inside or give a possibility to pass an external buffer through the constructor.\n. > IIRC that is already pooled and reused quite aggressively...\n\nYes, it is pooled. But the size of _ioBuffer_ in pool is restricted to 1024. It is good for small objects, but not work for large.\n\n> passing one in is awkward because you don't know the sizes in advance.\n\nActually, in many cases the upper limit of the _ioBuffer_ size can be easily estimated.\n. ",
    "siegelpeter": "Hello,  I have the same Problem as this Issue is old, has anybody found a solution for this? . Hello,  I have the same Problem as this Issue is old, has anybody found a solution for this? . ",
    "ezverev": "Dear R2D221, if you wish your library to be as inclusive as possible i.e. be as available as possible you should target:\n1. .NET 4.0\n2. Windows 8\n3. Windows Phone Silverlight 8\n4. Silverlight 5\n5. All xamarins\n(do no include Windows Phone 8.1)\nIf you do that your library will successfully accept a reference to protobuf-net (portable) directly or via NuGet. The main problem here is the support for Windows Phone 8.1 which is too different from all other platforms.\n. Oh my, Marc.\nMy reply was not for you but for R2D221. I was telling HIM how to make HIS PCL more including. Yours is pretty fine/all right/super-puper/mega-fun. Pay no attention please :)\nI will edit my previous comment to make it more clear.\nI am sorry to bother you.\n. Offtopic.\n\nMarc,\n\nMay I let you know that MonoAndroid10+xamarinios10+MonoTouch10 are very close to wp80 and are supported by your library. As a matter of fact I was pushed to use your library when I started developing for Xamarin.Android. The problem is the DataContractSerializer (that is meant to be a cross-platform WCF/WebServices serializer) failed i.e. it serializes Dictionaries differently on Microsoft platforms and on Xamarin (Android/iOS). May be this is a Xamarin failure, I don't know. Fact is: for those who adopt Xamarin, protobuf-net is the cure. You may not use that framework but you do help it a great deal.\n\nBig thanks!\nP.S. I would not think a second to subscribe for material support of what you do. Actually I spent some time searching for a way but did not find any. If there is one please give me a hint.\n. I fear I did not make myself clear...again.\nProtobuf-net already targets `MonoAndroid10+xamarinios10+MonoTouch10`, may be unwillingly but it does. NuGet successfully applies to PCL projects targeting `Xamarin Forms`. It looks like `MonoAndroid10+xamarinios10+MonoTouch10` metadata states that these frameworks are equivalent to `win+wp80` (Windows Store 8, tablet/desktop + phone). Mind you, `NOT win81+wp81`, as you mentioned, these are targeting WinRT and its native compilation which is too much different.\n. Dear R2D221, if you wish your library to be as inclusive as possible i.e. be as available as possible you should target:\n1. .NET 4.0\n2. Windows 8\n3. Windows Phone Silverlight 8\n4. Silverlight 5\n5. All xamarins\n(do no include Windows Phone 8.1)\nIf you do that your library will successfully accept a reference to protobuf-net (portable) directly or via NuGet. The main problem here is the support for Windows Phone 8.1 which is too different from all other platforms.\n. Oh my, Marc.\nMy reply was not for you but for R2D221. I was telling HIM how to make HIS PCL more including. Yours is pretty fine/all right/super-puper/mega-fun. Pay no attention please :)\nI will edit my previous comment to make it more clear.\nI am sorry to bother you.\n. Offtopic.\n\nMarc,\n\nMay I let you know that MonoAndroid10+xamarinios10+MonoTouch10 are very close to wp80 and are supported by your library. As a matter of fact I was pushed to use your library when I started developing for Xamarin.Android. The problem is the DataContractSerializer (that is meant to be a cross-platform WCF/WebServices serializer) failed i.e. it serializes Dictionaries differently on Microsoft platforms and on Xamarin (Android/iOS). May be this is a Xamarin failure, I don't know. Fact is: for those who adopt Xamarin, protobuf-net is the cure. You may not use that framework but you do help it a great deal.\n\nBig thanks!\nP.S. I would not think a second to subscribe for material support of what you do. Actually I spent some time searching for a way but did not find any. If there is one please give me a hint.\n. I fear I did not make myself clear...again.\nProtobuf-net already targets `MonoAndroid10+xamarinios10+MonoTouch10`, may be unwillingly but it does. NuGet successfully applies to PCL projects targeting `Xamarin Forms`. It looks like `MonoAndroid10+xamarinios10+MonoTouch10` metadata states that these frameworks are equivalent to `win+wp80` (Windows Store 8, tablet/desktop + phone). Mind you, `NOT win81+wp81`, as you mentioned, these are targeting WinRT and its native compilation which is too much different.\n. ",
    "BlueRaja": "[The project homepage](https://code.google.com/p/protobuf-net/) seems to imply that v2 is supported on all those platforms.  Is this not the case?\n. [The project homepage](https://code.google.com/p/protobuf-net/) seems to imply that v2 is supported on all those platforms.  Is this not the case?\n. ",
    "tlhintoq": "I'm guessing this project is abandoned or at least relegated to old hardware & OSes.  WinPhone?  Windows8?  Really?  I'm in the same boat as @R2D221 where I would like to use this in a MODERN solution targeting .NET4.5, WindowsUWP and Xamarin.Forms PCL - Profile111\n. I'm guessing this project is abandoned or at least relegated to old hardware & OSes.  WinPhone?  Windows8?  Really?  I'm in the same boat as @R2D221 where I would like to use this in a MODERN solution targeting .NET4.5, WindowsUWP and Xamarin.Forms PCL - Profile111\n. ",
    "mrent": "Yes, the serialization EnumMember. We are trying to stick as close as possible to built-in serialization attributes, since we are supporting different serializers (ProtoBuf and JSON). So we have been using DataContract/ordered DataMembers instead of serializer specific attributes. When it comes to enum values it seems however difficult to accomplish this.\n. Yes, the serialization EnumMember. We are trying to stick as close as possible to built-in serialization attributes, since we are supporting different serializers (ProtoBuf and JSON). So we have been using DataContract/ordered DataMembers instead of serializer specific attributes. When it comes to enum values it seems however difficult to accomplish this.\n. ",
    "brent-williams": "Holy cow that works.  I guess the sequence\n- serialize a Foo that doesn't include a \"b\"\n- serialize a FooBOnly with a \"b\"\n\nis not ambiguous (a complete Foo vs. an incomplete Foo and a FooBOnly) in that the receiver breaks the ambiguity based on how they deserialize.  Nice, I would not have discovered that one easily by myself, many thanks Marc.\n. Ha no thanks I didn't know what open/close did.  Case closed!\n. Holy cow that works.  I guess the sequence\n- serialize a Foo that doesn't include a \"b\"\n- serialize a FooBOnly with a \"b\"\n\nis not ambiguous (a complete Foo vs. an incomplete Foo and a FooBOnly) in that the receiver breaks the ambiguity based on how they deserialize.  Nice, I would not have discovered that one easily by myself, many thanks Marc.\n. Ha no thanks I didn't know what open/close did.  Case closed!\n. ",
    "ubikuity": "Ok, thanks for your feedback.\nMy idea was to have a more descriptive information about the reason of the error message \"Invalid wire-type, this usually means you have over-written a file...\".\n\nFor example, I had few times a deserializing error because the content of the proto message was: \"\\b\\0\u0012'\\n0\u0012 server.error.internalServerError\". The problem was obviously not on my side, it was an error on the remote server but it forced me to open Visual Studio to debug/analyze the source of the error.\nThat's why I wanted to add to the deserialization exception a fragment of the raw proto message which I can save into my logs.\n. Ok I changed the code to copy `ioBuffer` into a new variable and then add it to the exception. \n. I will try to prepare an implementation following your advice.\n. Ok, thanks for your feedback.\nMy idea was to have a more descriptive information about the reason of the error message \"Invalid wire-type, this usually means you have over-written a file...\".\n\nFor example, I had few times a deserializing error because the content of the proto message was: \"\\b\\0\u0012'\\n0\u0012 server.error.internalServerError\". The problem was obviously not on my side, it was an error on the remote server but it forced me to open Visual Studio to debug/analyze the source of the error.\nThat's why I wanted to add to the deserialization exception a fragment of the raw proto message which I can save into my logs.\n. Ok I changed the code to copy `ioBuffer` into a new variable and then add it to the exception. \n. I will try to prepare an implementation following your advice.\n. ",
    "hhblaze": "Transaltion of an error is  \"Collection was modified the enumeration operation may not be executed\"\n. Hi Marc, is there a chance that you can handle this issue, may be we can discuss commercial support?\n\nParallel threads try to serialize Entity with List of obj1 where obj1 has inside serializable List of obj2. \n\nWe work with protobuf-net more then 1 year, current version 2.0.0.668 and never had problems like that before (or we didn't notice that).\n\nWe got serialization wrapper:\n\n``` C#\n        public static byte[] SerializeProtobuf(this object data)\n        {\n            byte[] bt = null;\n            using (System.IO.MemoryStream ms = new System.IO.MemoryStream())\n            {\n                ProtoBuf.Serializer.NonGeneric.Serialize(ms, data);\n                bt = ms.ToArray();\n                ms.Close();\n            }\n\n            return bt;\n        }\n```\n\nAlso, in the procedure, who is called by parallel threads, we use and deserialization and serialization of the same entity type.\n\nAll technical nuances can be supplied to you in case of your interest.\n. Thank you Marc, looks like it was a bug in our code, where variable by ref was changed without write lock.\n. Transaltion of an error is  \"Collection was modified the enumeration operation may not be executed\"\n. Hi Marc, is there a chance that you can handle this issue, may be we can discuss commercial support?\n\nParallel threads try to serialize Entity with List of obj1 where obj1 has inside serializable List of obj2. \n\nWe work with protobuf-net more then 1 year, current version 2.0.0.668 and never had problems like that before (or we didn't notice that).\n\nWe got serialization wrapper:\n\n``` C#\n        public static byte[] SerializeProtobuf(this object data)\n        {\n            byte[] bt = null;\n            using (System.IO.MemoryStream ms = new System.IO.MemoryStream())\n            {\n                ProtoBuf.Serializer.NonGeneric.Serialize(ms, data);\n                bt = ms.ToArray();\n                ms.Close();\n            }\n\n            return bt;\n        }\n```\n\nAlso, in the procedure, who is called by parallel threads, we use and deserialization and serialization of the same entity type.\n\nAll technical nuances can be supplied to you in case of your interest.\n. Thank you Marc, looks like it was a bug in our code, where variable by ref was changed without write lock.\n. ",
    "plynkus": "That's good info, Marc...I appreciate it.  I'll go take a peek at the reflection API docs as well.  Cheers.\n. Just augmented a little test case here to see what reflection differences there might be, found I could observe MethodInfo metadata as expected.  Doing a quick search for the same APIs in the protobuf-net code, I noticed in:\n\nhttps://github.com/mgravell/protobuf-net/blob/master/protobuf-net/Meta/MetaType.cs\n\n...in the internal ApplyDefaultBehavior() method, the development of a MemberInfo \"foundList\" naturally has different implementations for WINRT vs. not.  Of interest is that the WINRT case (which I assume must be what I am executing as Type.GetMembers() is unavailable with the 8.1 and Universal targets) differs between the non-WINRT case w.r.t. public/private---the former adds public methods only, whereas the latter includes private ones (BindingFlags.NonPublic is evident for non-enum cases).\n\nGiven that this foundList is then used below for CheckForCallback() calls, including those for the before/after serialization attributes, might this be the issue?  (and a simple remedy to change the checks in the WINRT block?)\n. Note, too, that private data members marked with the `ProtoMember` attribute also fail to deserialize on these targets---so this is probably a more generic problem than the before/after events.  A temporary change to public restores proper operation.\n. FWIW, the local changes that resolved both these issues can be found at https://github.com/plynkus/protobuf-net/commit/e01b978defdd19d42433b7595c34532be7004ea2.\n. That's good info, Marc...I appreciate it.  I'll go take a peek at the reflection API docs as well.  Cheers.\n. Just augmented a little test case here to see what reflection differences there might be, found I could observe MethodInfo metadata as expected.  Doing a quick search for the same APIs in the protobuf-net code, I noticed in:\n\nhttps://github.com/mgravell/protobuf-net/blob/master/protobuf-net/Meta/MetaType.cs\n\n...in the internal ApplyDefaultBehavior() method, the development of a MemberInfo \"foundList\" naturally has different implementations for WINRT vs. not.  Of interest is that the WINRT case (which I assume must be what I am executing as Type.GetMembers() is unavailable with the 8.1 and Universal targets) differs between the non-WINRT case w.r.t. public/private---the former adds public methods only, whereas the latter includes private ones (BindingFlags.NonPublic is evident for non-enum cases).\n\nGiven that this foundList is then used below for CheckForCallback() calls, including those for the before/after serialization attributes, might this be the issue?  (and a simple remedy to change the checks in the WINRT block?)\n. Note, too, that private data members marked with the `ProtoMember` attribute also fail to deserialize on these targets---so this is probably a more generic problem than the before/after events.  A temporary change to public restores proper operation.\n. FWIW, the local changes that resolved both these issues can be found at https://github.com/plynkus/protobuf-net/commit/e01b978defdd19d42433b7595c34532be7004ea2.\n. ",
    "russcam": "@i3arnon ok, if Marc has a release in the pipeline, I'll hold tight for the moment.\n. @i3arnon ok, if Marc has a release in the pipeline, I'll hold tight for the moment.\n. ",
    "jtcalhoun": "+1\n\nIssue since 2011:\n- https://code.google.com/p/protobuf-net/issues/detail?id=254\n- http://stackoverflow.com/questions/8250734/protobuf-net-failing-to-deserialize-readonlycollection\n. +1\n\nIssue since 2011:\n- https://code.google.com/p/protobuf-net/issues/detail?id=254\n- http://stackoverflow.com/questions/8250734/protobuf-net-failing-to-deserialize-readonlycollection\n. ",
    "galpin": "@i3arnon Send a PR?\n. Sorry, I meant @AqlaSolutions but point taken!\n. @i3arnon Send a PR?\n. Sorry, I meant @AqlaSolutions but point taken!\n. ",
    "aienabled": "I also have this issue.\nAqlaSerializer is simply amazing, thanks for mentioning it! I've switched on it in just a few minutes (there is a simple migration guide) and now the issue resolved, together with other issues (like empty/null collections and references problems) I've had.\nRegards!\n. I also have this issue.\nAqlaSerializer is simply amazing, thanks for mentioning it! I've switched on it in just a few minutes (there is a simple migration guide) and now the issue resolved, together with other issues (like empty/null collections and references problems) I've had.\nRegards!\n. ",
    "itadapter": "This has been superseded by this:\n https://github.com/aumcode/serbench,\nnamely ProtoBuff is here:\n https://github.com/aumcode/serbench/blob/master/Source/Serbench.Specimens/Serializers/ProtoBufSerializer.cs\n\nBenchmarks (including Protobuf):\n\nhttp://aumcode.github.io/serbench/\n. This has been superseded by this:\n https://github.com/aumcode/serbench,\nnamely ProtoBuff is here:\n https://github.com/aumcode/serbench/blob/master/Source/Serbench.Specimens/Serializers/ProtoBufSerializer.cs\n\nBenchmarks (including Protobuf):\n\nhttp://aumcode.github.io/serbench/\n. ",
    "scottparkes": "I'm going to close this - noticed some cases in the Behavior that need more tests.\n. I'm going to close this - noticed some cases in the Behavior that need more tests.\n. ",
    "yoniiny": "Most applications won't want to use several serialization frameworks. As a result, it makes sense to support large input streams in order to be a \"one stop shop\", or accept that people will discard this framework because of unsupported corner cases.\n\nIn addition, this can \"legitimately\" happen in streaming situations, where many small objects in a stream add up to more than 2gb. Re-creating a ProtoReader object isn't practical, since it reads buffers from the stream, so it might have consumed more than it should have.\n\nAdditionally, the fix is entirely changing the \"position\" field to a long, so it seems quite painless.\n. Most applications won't want to use several serialization frameworks. As a result, it makes sense to support large input streams in order to be a \"one stop shop\", or accept that people will discard this framework because of unsupported corner cases.\n\nIn addition, this can \"legitimately\" happen in streaming situations, where many small objects in a stream add up to more than 2gb. Re-creating a ProtoReader object isn't practical, since it reads buffers from the stream, so it might have consumed more than it should have.\n\nAdditionally, the fix is entirely changing the \"position\" field to a long, so it seems quite painless.\n. ",
    "masnider": "I'm getting this as well, though on Serialize. Also, why is System.xml even needed here? \r\n\r\nIn my case, adding the System.Xml.ReaderWriter nuget package appears to fix the issue, but I'm still confused as to why this is necessary in the first place, just conceptually :). I'm getting this as well, though on Serialize. Also, why is System.xml even needed here? \r\n\r\nIn my case, adding the System.Xml.ReaderWriter nuget package appears to fix the issue, but I'm still confused as to why this is necessary in the first place, just conceptually :). ",
    "rushfrisby": "I also tried adding [ProtoIgnore] on top of the [DataMember] attribute which didn't work either. I thought this might just skip over updating the typemodel info and still serialize the property but that's not the case. Maybe there could be a new attribute added that does this?\n. Your surrogate should be\r\n```csharp\r\nusing System;\r\nusing System.Runtime.Serialization;\r\n\r\nnamespace ProtobufNetTest\r\n{\r\n    [DataContract(Name = nameof(DateTimeOffset))]\r\n    public class DateTimeOffsetSurrogate\r\n    {\r\n        [DataMember(Order = 1)]\r\n        public long? Value { get; set; }\r\n\r\n        public static implicit operator DateTimeOffset(DateTimeOffsetSurrogate surrogate)\r\n        {\r\n            return DateTimeOffset.FromUnixTimeMilliseconds(surrogate.Value.Value);\r\n        }\r\n\r\n        public static implicit operator DateTimeOffset?(DateTimeOffsetSurrogate surrogate)\r\n        {\r\n            return surrogate != null ? DateTimeOffset.FromUnixTimeMilliseconds(surrogate.Value.Value) : (DateTimeOffset?)null;\r\n        }\r\n\r\n        public static implicit operator DateTimeOffsetSurrogate(DateTimeOffset source)\r\n        {\r\n            return new DateTimeOffsetSurrogate\r\n            {\r\n                Value = source.ToUnixTimeMilliseconds()\r\n            };\r\n        }\r\n\r\n        public static implicit operator DateTimeOffsetSurrogate(DateTimeOffset? source)\r\n        {\r\n            return new DateTimeOffsetSurrogate\r\n            {\r\n                Value = source?.ToUnixTimeMilliseconds()\r\n            };\r\n        }\r\n    }\r\n}\r\n```. The way you registered surrogates is correct however your class has a `DateTimeOffset?` property and your surrogate has no operators for converting between the two. Your surrogate only has operators for `DateTimeOffset` which is a different _type_.\r\n\r\nSure you can serialize the value as a string. I used long and the unix time value because the output is smaller than the string representation and faster than converting to/from a string.. By definition it takes into account the time zone since unix time starts at 1/1/1970 00:00:00 (UTC). I also tried adding [ProtoIgnore] on top of the [DataMember] attribute which didn't work either. I thought this might just skip over updating the typemodel info and still serialize the property but that's not the case. Maybe there could be a new attribute added that does this?\n. Your surrogate should be\r\n```csharp\r\nusing System;\r\nusing System.Runtime.Serialization;\r\n\r\nnamespace ProtobufNetTest\r\n{\r\n    [DataContract(Name = nameof(DateTimeOffset))]\r\n    public class DateTimeOffsetSurrogate\r\n    {\r\n        [DataMember(Order = 1)]\r\n        public long? Value { get; set; }\r\n\r\n        public static implicit operator DateTimeOffset(DateTimeOffsetSurrogate surrogate)\r\n        {\r\n            return DateTimeOffset.FromUnixTimeMilliseconds(surrogate.Value.Value);\r\n        }\r\n\r\n        public static implicit operator DateTimeOffset?(DateTimeOffsetSurrogate surrogate)\r\n        {\r\n            return surrogate != null ? DateTimeOffset.FromUnixTimeMilliseconds(surrogate.Value.Value) : (DateTimeOffset?)null;\r\n        }\r\n\r\n        public static implicit operator DateTimeOffsetSurrogate(DateTimeOffset source)\r\n        {\r\n            return new DateTimeOffsetSurrogate\r\n            {\r\n                Value = source.ToUnixTimeMilliseconds()\r\n            };\r\n        }\r\n\r\n        public static implicit operator DateTimeOffsetSurrogate(DateTimeOffset? source)\r\n        {\r\n            return new DateTimeOffsetSurrogate\r\n            {\r\n                Value = source?.ToUnixTimeMilliseconds()\r\n            };\r\n        }\r\n    }\r\n}\r\n```. The way you registered surrogates is correct however your class has a `DateTimeOffset?` property and your surrogate has no operators for converting between the two. Your surrogate only has operators for `DateTimeOffset` which is a different _type_.\r\n\r\nSure you can serialize the value as a string. I used long and the unix time value because the output is smaller than the string representation and faster than converting to/from a string.. By definition it takes into account the time zone since unix time starts at 1/1/1970 00:00:00 (UTC). ",
    "langboost": "How did you use this from a Universal Windows Project? Does NuGet work on Windows 10, VS 2015 Tech Preview, or did you work around this somehow?\n. How did you use this from a Universal Windows Project? Does NuGet work on Windows 10, VS 2015 Tech Preview, or did you work around this somehow?\n. ",
    "SimonPStevens": "@langboost I didn't use NuGet. I just built the PCL project and referenced it from my UWP manually.\n. @langboost I didn't use NuGet. I just built the PCL project and referenced it from my UWP manually.\n. ",
    "Arakade": "Is this specific to contract-first?  Would using references solve? (I'd expect)\nCan't one specify AsReference or AsReferenceDefault when using contract?\nHTH\n. Is this specific to contract-first?  Would using references solve? (I'd expect)\nCan't one specify AsReference or AsReferenceDefault when using contract?\nHTH\n. ",
    "Zhouxing-Su": "sorry for that...\nI skipped the \"Attribute\" wiki page...  \n. sorry for that...\nI skipped the \"Attribute\" wiki page...  \n. ",
    "bb": "In my opionion it should not add the List_Int32 message type but instead resolve to\n\n```\nmessage KeyValuePair_String_List_Int32 {\n  optional string Key = 1;\n  repeated int32 Value = 2;\n}\n```\n\nI just found something similar where\n\n```\n[ProtoMember(6)]\npublic Dictionary<byte, int[]> Something { get; set; }\n```\n\nbecame \n\n```\nmessage Int32[] {\n}\nmessage KeyValuePair_Byte_Int32[] {\n  optional uint32 Key = 1;\n  optional Int32[] Value = 2;\n}\nrepeated KeyValuePair_Byte_Int32[] Something = 6;\n```\n\nbut I expected something like\n\n```\nmessage KeyValuePair_Byte_repeatedInt32 {\n  optional uint32 Key = 1;\n  repeated int32 Value = 2;\n}\noptional KeyValuePair_Byte_repeatedInt32 Something = 6;\n```\n\nI'm seeing 3 issues here:\n- `int` was exported as message type `Int32` instead of `int32` (even though it got the `32`)\n- the array of `int32` in the value of the dictionary is not resolved to `repeated` but marked as `[]`\n- the dictionary itself became `repeated`, even though it should be just `optional`\n. In my opionion it should not add the List_Int32 message type but instead resolve to\n\n```\nmessage KeyValuePair_String_List_Int32 {\n  optional string Key = 1;\n  repeated int32 Value = 2;\n}\n```\n\nI just found something similar where\n\n```\n[ProtoMember(6)]\npublic Dictionary<byte, int[]> Something { get; set; }\n```\n\nbecame \n\n```\nmessage Int32[] {\n}\nmessage KeyValuePair_Byte_Int32[] {\n  optional uint32 Key = 1;\n  optional Int32[] Value = 2;\n}\nrepeated KeyValuePair_Byte_Int32[] Something = 6;\n```\n\nbut I expected something like\n\n```\nmessage KeyValuePair_Byte_repeatedInt32 {\n  optional uint32 Key = 1;\n  repeated int32 Value = 2;\n}\noptional KeyValuePair_Byte_repeatedInt32 Something = 6;\n```\n\nI'm seeing 3 issues here:\n- `int` was exported as message type `Int32` instead of `int32` (even though it got the `32`)\n- the array of `int32` in the value of the dictionary is not resolved to `repeated` but marked as `[]`\n- the dictionary itself became `repeated`, even though it should be just `optional`\n. ",
    "belm0": "I take back what I said about the deserialization side not being a problem.  ProtoReader.ReadSingle etc. use BitConverter.GetBytes, yielding a temporary array on the heap.\n\nhttps://github.com/mgravell/protobuf-net/blob/e601b359c6ae56afc159754d29f5e7d0f05a01f5/protobuf-net/ProtoReader.cs#L845\n\nUnity users should really, really not be using FEAT_SAFE.\n. I take back what I said about the deserialization side not being a problem.  ProtoReader.ReadSingle etc. use BitConverter.GetBytes, yielding a temporary array on the heap.\n\nhttps://github.com/mgravell/protobuf-net/blob/e601b359c6ae56afc159754d29f5e7d0f05a01f5/protobuf-net/ProtoReader.cs#L845\n\nUnity users should really, really not be using FEAT_SAFE.\n. ",
    "Arthur-qi": "why not be using FEAT_SAFE?Did it run slow?. why not be using FEAT_SAFE?Did it run slow?. ",
    "jogibear9988": "Is that feature planed to be implemented? Is anyone working on this? Is this possible with current protobufer protocol format?\n\nI also have a class wich inhertits from multiple\n\n```\n class Bbb : AbstractAaa, IHhhh \n { }\n```\n\nand one:\n\n```\n class Ddd\n {  \n public IHhhh BlaBla {get;set;}  \n }\n```\n\nWhere I try to serialize/deserialize class Dddd\n. Is inharitance at the protocol Level really needed for such a scenario? Doesnt protoculbuffers use a Id for every class type, so it's irelevant for protobuf how the hierachical structure is?\n. Is that feature planed to be implemented? Is anyone working on this? Is this possible with current protobufer protocol format?\n\nI also have a class wich inhertits from multiple\n\n```\n class Bbb : AbstractAaa, IHhhh \n { }\n```\n\nand one:\n\n```\n class Ddd\n {  \n public IHhhh BlaBla {get;set;}  \n }\n```\n\nWhere I try to serialize/deserialize class Dddd\n. Is inharitance at the protocol Level really needed for such a scenario? Doesnt protoculbuffers use a Id for every class type, so it's irelevant for protobuf how the hierachical structure is?\n. ",
    "SapientGuardian": ":+1: I've managed to get a build going for DNXCORE50/DNX46 based on the CoreCLR branch, which I've pushed to https://github.com/SapientGuardian/protobuf-net. I haven't run any of the official unit tests, but a minimal set of unit tests in my own projects that use the library are passing with this build.\n\nLooking forward to an official release with DNXCore50 support.\n. I'll be needing protobuf support in dnxcore for the foreseeable future, so until there's an official release I'll be maintaining my fork, at least from a bugfix perspective. I think it would be a mistake to use my fork in any production capacity, though I'll end up doing that myself soon. c249dd1 would suggest that @mgravell is working on a proper release.\n. :+1: I've managed to get a build going for DNXCORE50/DNX46 based on the CoreCLR branch, which I've pushed to https://github.com/SapientGuardian/protobuf-net. I haven't run any of the official unit tests, but a minimal set of unit tests in my own projects that use the library are passing with this build.\n\nLooking forward to an official release with DNXCore50 support.\n. I'll be needing protobuf support in dnxcore for the foreseeable future, so until there's an official release I'll be maintaining my fork, at least from a bugfix perspective. I think it would be a mistake to use my fork in any production capacity, though I'll end up doing that myself soon. c249dd1 would suggest that @mgravell is working on a proper release.\n. ",
    "forestjohnsonilm": "Looks like @mgravell is currently working on dnx core support? Any idea when it will be available? Is there anything that people unfamiliar with protobuf-net like myself can do to help? \n\n@SapientGuardian are you planning on continuing to develop or maintain your fork?\n. Looks like @mgravell is currently working on dnx core support? Any idea when it will be available? Is there anything that people unfamiliar with protobuf-net like myself can do to help? \n\n@SapientGuardian are you planning on continuing to develop or maintain your fork?\n. ",
    "akatz0813": "@mgravell Are you waiting on RC2 to ship (understandably so) before starting on this?  \n. @mgravell any word on support now that RC2 is released?  \n. I'd gladly make some kind of financial contribution to bump this higher in the priority.  I can't adopt a lick of .net core without this.\n. @mgravell Realistically do you have an ETA or prioritization for this now that 1.0 RTM is out?\n. @mgravell Are you waiting on RC2 to ship (understandably so) before starting on this?  \n. @mgravell any word on support now that RC2 is released?  \n. I'd gladly make some kind of financial contribution to bump this higher in the priority.  I can't adopt a lick of .net core without this.\n. @mgravell Realistically do you have an ETA or prioritization for this now that 1.0 RTM is out?\n. ",
    "CumpsD": "Any news if protobuf works on coreclr?. Any news if protobuf works on coreclr?. ",
    "vk37": "And here:\n![image](https://cloud.githubusercontent.com/assets/10302177/9436850/e4f908a6-4a5a-11e5-92da-5eb241bd7258.png)\n. And here:\n![image](https://cloud.githubusercontent.com/assets/10302177/9436850/e4f908a6-4a5a-11e5-92da-5eb241bd7258.png)\n. ",
    "nathanielcook": "@mgravell this fix seems to work. Can we get this merged in?\n. @mgravell this fix seems to work. Can we get this merged in?\n. ",
    "ab-tools": "Hello,\n\nfirst I'm sorry to not respond earlier, but I did not receive an e-mail notification about your reply.\n\nIt was great to see that you forked protobuf-net as this seems to be quite dead obviously.\n\nTherefore I directly tested it with my project:\nunfortunately AqlaSerializer still seems to have similar bugs as protobuf-net. It might work fine for small data structure, but with my about 50 MB big database I get an exception if I try to serialize it with AqlaSerializer.\n\nI have created an issue in your project and provide you with an example to reproduce:\nhttps://github.com/AqlaSolutions/AqlaSerializer/issues/1\n\nAndreas\n. Hello,\n\nfirst I'm sorry to not respond earlier, but I did not receive an e-mail notification about your reply.\n\nIt was great to see that you forked protobuf-net as this seems to be quite dead obviously.\n\nTherefore I directly tested it with my project:\nunfortunately AqlaSerializer still seems to have similar bugs as protobuf-net. It might work fine for small data structure, but with my about 50 MB big database I get an exception if I try to serialize it with AqlaSerializer.\n\nI have created an issue in your project and provide you with an example to reproduce:\nhttps://github.com/AqlaSolutions/AqlaSerializer/issues/1\n\nAndreas\n. ",
    "cmdel": "Take a look at this article on SO. It's probably exactly what you need.\nhttp://stackoverflow.com/a/7046868/1595994\n. Take a look at this article on SO. It's probably exactly what you need.\nhttp://stackoverflow.com/a/7046868/1595994\n. ",
    "inada-s": "sorry, I translated it\n\n```\nc:\\work\\protobuf-net\\Serializer.cs(87,11): error CS1502: The best overloaded method match for ' ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream, object, System.Type)'  has some invalid arguments  [C:\\work\\protobuf-net_IKVM\\protobuf-net_IKVM.csproj]\nc:\\work\\protobuf-net\\Serializer.cs(87,62): error CS1503: Argument 3: cannot convert from 'IKVM.Reflection.Type' to 'System.Type'  [C:\\work\\protobuf-net_IKVM\\protobuf-net_IKVM.csproj]\n```\n. - In protobuf-net/Meta/TypeModel.cs:L575, `type : System.Type`\n\n```\npublic object Deserialize(Stream source, object value, System.Type type)\n```\n- In protobuf-net/Serializer.cs:L85, `type : IKVM.Reflection.Type`\n\n```\nusing Type = IKVM.Reflection.Type;\n...\npublic static object Deserialize(Type type, Stream source)\n```\n\nThe compiler error that `cannot convert from 'IKVM.Reflection.Type' to 'System.Type'` is occurred.\n. sorry, I translated it\n\n```\nc:\\work\\protobuf-net\\Serializer.cs(87,11): error CS1502: The best overloaded method match for ' ProtoBuf.Meta.TypeModel.Deserialize(System.IO.Stream, object, System.Type)'  has some invalid arguments  [C:\\work\\protobuf-net_IKVM\\protobuf-net_IKVM.csproj]\nc:\\work\\protobuf-net\\Serializer.cs(87,62): error CS1503: Argument 3: cannot convert from 'IKVM.Reflection.Type' to 'System.Type'  [C:\\work\\protobuf-net_IKVM\\protobuf-net_IKVM.csproj]\n```\n. - In protobuf-net/Meta/TypeModel.cs:L575, `type : System.Type`\n\n```\npublic object Deserialize(Stream source, object value, System.Type type)\n```\n- In protobuf-net/Serializer.cs:L85, `type : IKVM.Reflection.Type`\n\n```\nusing Type = IKVM.Reflection.Type;\n...\npublic static object Deserialize(Type type, Stream source)\n```\n\nThe compiler error that `cannot convert from 'IKVM.Reflection.Type' to 'System.Type'` is occurred.\n. ",
    "MeirionHughes": "try this: \n\n```\n[ProtoMember(1, DataFormat = DataFormat.FixedSize)]\npublic uint FixedInteger { get; set; }\n```\n. You'll have to use NonGeneric if you feed the serializer with an `object`\n\n```\nvar stream = new MemoryStream();\nobject input = new Person\n{\n    Name = \"Bob\",\n    Age = 20\n};\n\nSerializer.NonGeneric.SerializeWithLengthPrefix(stream, input, PrefixStyle.Base128, 1);\nstream.Seek(0, SeekOrigin.Begin);\n\nobject output;\n\nSerializer.NonGeneric.TryDeserializeWithLengthPrefix(stream, PrefixStyle.Base128,\n    (_) => typeof (Person), out output);\n\nvar outputPerson = (Person)output;\n\nConsole.WriteLine(\"Deserialized: \" + outputPerson.Name + \" \" + outputPerson.Age);\n```\n. Try [Costura](https://github.com/Fody/Costura). I've bundled protobuf  with it. I've not tried the very latest though. \n. try this: \n\n```\n[ProtoMember(1, DataFormat = DataFormat.FixedSize)]\npublic uint FixedInteger { get; set; }\n```\n. You'll have to use NonGeneric if you feed the serializer with an `object`\n\n```\nvar stream = new MemoryStream();\nobject input = new Person\n{\n    Name = \"Bob\",\n    Age = 20\n};\n\nSerializer.NonGeneric.SerializeWithLengthPrefix(stream, input, PrefixStyle.Base128, 1);\nstream.Seek(0, SeekOrigin.Begin);\n\nobject output;\n\nSerializer.NonGeneric.TryDeserializeWithLengthPrefix(stream, PrefixStyle.Base128,\n    (_) => typeof (Person), out output);\n\nvar outputPerson = (Person)output;\n\nConsole.WriteLine(\"Deserialized: \" + outputPerson.Name + \" \" + outputPerson.Age);\n```\n. Try [Costura](https://github.com/Fody/Costura). I've bundled protobuf  with it. I've not tried the very latest though. \n. ",
    "skrysmanski": "That's right. I didn't see this. Thanks.\n. That's right. I didn't see this. Thanks.\n. ",
    "xivk": "Yep, a change in the nuget should do it but it's a bit difficult for me to test using OsmSharp because I have a protobuf-net dependency. Also impossible to install in a fresh android project targetting 'MonoAndroid,Version=v6.0'...\n. Thanks @pauldendulk, I was just replying myself... :+1: \n. Yep, a change in the nuget should do it but it's a bit difficult for me to test using OsmSharp because I have a protobuf-net dependency. Also impossible to install in a fresh android project targetting 'MonoAndroid,Version=v6.0'...\n. Thanks @pauldendulk, I was just replying myself... :+1: \n. ",
    "pauldendulk": "protobuf-net_Portable.csproj has Profile136. For use in Xamarin the target should be:\n`portable-net40+sl50+win+wp80+Xamarin.iOS10+MonoAndroid10+MonoTouch10`\n\nThe .nuspec is empty. Are you generating the nuget package from the .csproj like this `nuget pack <project.csproj>`? If so, the resulting package's targets will depend on what you have installed on your machine. See [this answer](http://stackoverflow.com/a/20385259/85325) from Matt Ward.\n. I think the idea is that a PCL build could be that standard. Profile136 makes many other builds irrelevant (like WinRT, Phone8, Silverlight, MonoDroid, regular .net) and with the proper .nuspec target string would allow use in Xamarin.iOS. The other builds are older technologies that are rarely used nowadays. You could also choose to support just one or two PCL profiles.\n\nI must add that I have not looked into the json based build yet. I understand this changes a lot again.\n. How are the PCLs generated right now? Perhaps I could lend a hand.\n. protobuf-net_Portable.csproj has Profile136. For use in Xamarin the target should be:\n`portable-net40+sl50+win+wp80+Xamarin.iOS10+MonoAndroid10+MonoTouch10`\n\nThe .nuspec is empty. Are you generating the nuget package from the .csproj like this `nuget pack <project.csproj>`? If so, the resulting package's targets will depend on what you have installed on your machine. See [this answer](http://stackoverflow.com/a/20385259/85325) from Matt Ward.\n. I think the idea is that a PCL build could be that standard. Profile136 makes many other builds irrelevant (like WinRT, Phone8, Silverlight, MonoDroid, regular .net) and with the proper .nuspec target string would allow use in Xamarin.iOS. The other builds are older technologies that are rarely used nowadays. You could also choose to support just one or two PCL profiles.\n\nI must add that I have not looked into the json based build yet. I understand this changes a lot again.\n. How are the PCLs generated right now? Perhaps I could lend a hand.\n. ",
    "habermeier": "Hmm... I'm also getting: `Could not install package 'protobuf-net 2.1.0'. You are trying to install this package into a project that targets 'portable-net45+win+wp80+MonoTouch10+MonoAndroid10+xamarinmac20+xamarintvos10+xamarinwatchos10+xamarinios10', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.`\n\nIs there a work-around?\n. Hmm... I'm also getting: `Could not install package 'protobuf-net 2.1.0'. You are trying to install this package into a project that targets 'portable-net45+win+wp80+MonoTouch10+MonoAndroid10+xamarinmac20+xamarintvos10+xamarinwatchos10+xamarinios10', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.`\n\nIs there a work-around?\n. ",
    "hvanbakel": "Fix for #126 \n. Fix for #126 \n. ",
    "MasterIV": "ok it worked:\n\n```\nBuild succeeded.\n\nWarnings:\n\n/home/vagrant/protobuf-net/precompile/precompile.csproj (default targets) ->\n/usr/lib/mono/4.0/Microsoft.Common.targets (ResolveProjectReferences target) ->\n/home/vagrant/protobuf-net/protobuf-net_IKVM/protobuf-net_IKVM.csproj (default targets) ->\n/usr/lib/mono/4.0/Microsoft.CSharp.targets (CoreCompile target) ->\n\n        /home/vagrant/protobuf-net/protobuf-net/Meta/RuntimeTypeModel.cs(1189,18): warning CS0219: The variable `finalType' is assigned but its value is never used\n        /home/vagrant/protobuf-net/protobuf-net/Meta/TypeModel.cs(1556,35): warning CS0414: The private field `ProtoBuf.Meta.TypeModel.Formatter.type' is assigned but its value is never used\n        /home/vagrant/protobuf-net/protobuf-net/Serializers/PropertyDecorator.cs(24,31): warning CS0414: The private field `ProtoBuf.Serializers.PropertyDecorator.readOptionsWriteValue' is assigned but its value is never used\n\n         3 Warning(s)\n         0 Error(s)\n\nTime Elapsed 00:00:01.5698600\n```\n. ok it worked:\n\n```\nBuild succeeded.\n\nWarnings:\n\n/home/vagrant/protobuf-net/precompile/precompile.csproj (default targets) ->\n/usr/lib/mono/4.0/Microsoft.Common.targets (ResolveProjectReferences target) ->\n/home/vagrant/protobuf-net/protobuf-net_IKVM/protobuf-net_IKVM.csproj (default targets) ->\n/usr/lib/mono/4.0/Microsoft.CSharp.targets (CoreCompile target) ->\n\n        /home/vagrant/protobuf-net/protobuf-net/Meta/RuntimeTypeModel.cs(1189,18): warning CS0219: The variable `finalType' is assigned but its value is never used\n        /home/vagrant/protobuf-net/protobuf-net/Meta/TypeModel.cs(1556,35): warning CS0414: The private field `ProtoBuf.Meta.TypeModel.Formatter.type' is assigned but its value is never used\n        /home/vagrant/protobuf-net/protobuf-net/Serializers/PropertyDecorator.cs(24,31): warning CS0414: The private field `ProtoBuf.Serializers.PropertyDecorator.readOptionsWriteValue' is assigned but its value is never used\n\n         3 Warning(s)\n         0 Error(s)\n\nTime Elapsed 00:00:01.5698600\n```\n. ",
    "QuAzI": "Looks like my mistake\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\n\nusing ProtoBuf;\n\n[ProtoContract]\npublic class AttributableItem\n{\n    [ProtoMember(1)]\n    public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n}\n\n[ProtoContract]\npublic class ExtendedItem : AttributableItem\n{\n    [ProtoMember(1)]\n    public string description;\n}\n\nstatic class Program\n{\n    static void Main()\n    {\n        var obj = new ExtendedItem\n        {\n            Attributes =\n            {\n                {\"abc\", \"def\" },\n                {\"ghi\", \"jkl\" },\n            }\n        };\n        obj.description = \"test\";\n\n        string testFile = \"test.proto\";\n        SerializeAsProtobuf(testFile, obj);\n        var objCopy = DeserializeProtobuf(testFile);\n\n        Debug.Assert(objCopy.Attributes.Count == obj.Attributes.Count);\n        foreach (var pair in objCopy.Attributes)\n        {\n            Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n            Debug.Assert(pair.Value == obj.Attributes[pair.Key]);\n        }\n    }\n\n    static public void SerializeAsProtobuf(string filePath, object obj)\n    {\n        using (FileStream fileStream = new FileStream(filePath, FileMode.OpenOrCreate))\n        {\n            SerializeAsProtobuf(fileStream, obj);\n            fileStream.Close();\n        }\n    }\n\n    static public void SerializeAsProtobuf(Stream stream, object obj)\n    {\n        Serializer.Serialize(stream, obj);\n    }\n\n    static public ExtendedItem DeserializeProtobuf(string filePath)\n    {\n        using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\n        {\n            ExtendedItem product = DeserializeProtobuf(fileStream);\n            fileStream.Close();\n            return product;\n        }\n    }\n\n    static public ExtendedItem DeserializeProtobuf(Stream stream)\n    {\n        return ProtoBuf.Serializer.Deserialize<ExtendedItem>(stream);\n    }\n}\n```\n\nIt isn't clear how to trace an order of fields at multiple inheritance\n. Thanks\nWhat if I have several classes inherited from base class? \n\nI must wite something like this? \n\n```\n[ProtoContract] \n[ProtoInclude(typeof(ExtendedItem1), 2)] \n[ProtoInclude(typeof(ExtendedItem2), 3)] \n[ProtoInclude(typeof(ExtendedItem3), 4)] \npublic class AttributableItem {...}\n```\n\nWhat numeric tag means in this case?\nAs a rule parents don't know about the inherited and shouldn't care of it. But in this case it is a great problem.\nThere are too small examples to explain this case. Should be in documentation I think\n. Here man told that RuntimeTypeModel.Default.Add(typeof(type), true).AddSubType(tag, subType) \nis equivalent to what the attribute-processing code does\nhttps://stackoverflow.com/questions/11869467/protobuf-net-how-to-handle-inheritance-without-protoinclude\n\nI try to write static constructor for register child \n\n```\n    static ExtendedItem1()\n    {\n        ProtoBuf.Meta.RuntimeTypeModel\n            .Default\n            .Add(typeof(AttributableItem), true)\n            .AddSubType(typeof(ExtendedItem1).FullName.GetHashCode(), typeof(ExtendedItem1));\n    }\n```\n\nAnd it serialized OK. I see all fields in file with small differences. \n\n![2015-12-23_10-54-21_jn2ybe0u](https://cloud.githubusercontent.com/assets/1897605/11972904/de030ff2-a963-11e5-8d1a-e5dc1436690f.png)\n\nBut on deserialisation fired \"Unable to cast object of type 'AttributableItem' to type 'ExtendedItem1'\". Why?\n\nFull example\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\n\nusing ProtoBuf;\n\n[ProtoContract]\npublic class AttributableItem\n{\n    [ProtoMember(1)]\n    public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n}\n\n[ProtoContract]\npublic class ExtendedItem1 : AttributableItem\n{\n    static ExtendedItem1()\n    {\n        ProtoBuf.Meta.RuntimeTypeModel\n            .Default\n            .Add(typeof(AttributableItem), true)\n            .AddSubType(typeof(ExtendedItem1).FullName.GetHashCode(), typeof(ExtendedItem1));\n    }\n\n    [ProtoMember(1)]\n    public string description;\n}\n\nstatic class Program\n{\n    static void Main()\n    {\n        var obj = new ExtendedItem1\n        {\n            Attributes =\n            {\n                {\"abc\", \"def\" },\n                {\"ghi\", \"jkl\" },\n            }\n        };\n        obj.description = \"test\";\n\n        string testFile = \"test.proto\";\n        SerializeAsProtobuf(testFile, obj);\n        var objCopy = DeserializeProtobuf(testFile);\n\n        Debug.Assert(objCopy.Attributes.Count == obj.Attributes.Count);\n        foreach (var pair in objCopy.Attributes)\n        {\n            Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n            Debug.Assert(pair.Value == obj.Attributes[pair.Key]);\n        }\n    }\n\n    static public void SerializeAsProtobuf(string filePath, object obj)\n    {\n        using (FileStream fileStream = new FileStream(filePath, FileMode.OpenOrCreate))\n        {\n            SerializeAsProtobuf(fileStream, obj);\n            fileStream.Close();\n        }\n    }\n\n    static public void SerializeAsProtobuf(Stream stream, object obj)\n    {\n        Serializer.Serialize(stream, obj);\n    }\n\n    static public ExtendedItem1 DeserializeProtobuf(string filePath)\n    {\n        using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\n        {\n            ExtendedItem1 product = DeserializeProtobuf(fileStream);\n            fileStream.Close();\n            return product;\n        }\n    }\n\n    static public ExtendedItem1 DeserializeProtobuf(Stream stream)\n    {\n        return ProtoBuf.Serializer.Deserialize<ExtendedItem1>(stream);\n    }\n}\n```\n. Well, I will wait\n. Looks like my mistake\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\n\nusing ProtoBuf;\n\n[ProtoContract]\npublic class AttributableItem\n{\n    [ProtoMember(1)]\n    public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n}\n\n[ProtoContract]\npublic class ExtendedItem : AttributableItem\n{\n    [ProtoMember(1)]\n    public string description;\n}\n\nstatic class Program\n{\n    static void Main()\n    {\n        var obj = new ExtendedItem\n        {\n            Attributes =\n            {\n                {\"abc\", \"def\" },\n                {\"ghi\", \"jkl\" },\n            }\n        };\n        obj.description = \"test\";\n\n        string testFile = \"test.proto\";\n        SerializeAsProtobuf(testFile, obj);\n        var objCopy = DeserializeProtobuf(testFile);\n\n        Debug.Assert(objCopy.Attributes.Count == obj.Attributes.Count);\n        foreach (var pair in objCopy.Attributes)\n        {\n            Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n            Debug.Assert(pair.Value == obj.Attributes[pair.Key]);\n        }\n    }\n\n    static public void SerializeAsProtobuf(string filePath, object obj)\n    {\n        using (FileStream fileStream = new FileStream(filePath, FileMode.OpenOrCreate))\n        {\n            SerializeAsProtobuf(fileStream, obj);\n            fileStream.Close();\n        }\n    }\n\n    static public void SerializeAsProtobuf(Stream stream, object obj)\n    {\n        Serializer.Serialize(stream, obj);\n    }\n\n    static public ExtendedItem DeserializeProtobuf(string filePath)\n    {\n        using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\n        {\n            ExtendedItem product = DeserializeProtobuf(fileStream);\n            fileStream.Close();\n            return product;\n        }\n    }\n\n    static public ExtendedItem DeserializeProtobuf(Stream stream)\n    {\n        return ProtoBuf.Serializer.Deserialize<ExtendedItem>(stream);\n    }\n}\n```\n\nIt isn't clear how to trace an order of fields at multiple inheritance\n. Thanks\nWhat if I have several classes inherited from base class? \n\nI must wite something like this? \n\n```\n[ProtoContract] \n[ProtoInclude(typeof(ExtendedItem1), 2)] \n[ProtoInclude(typeof(ExtendedItem2), 3)] \n[ProtoInclude(typeof(ExtendedItem3), 4)] \npublic class AttributableItem {...}\n```\n\nWhat numeric tag means in this case?\nAs a rule parents don't know about the inherited and shouldn't care of it. But in this case it is a great problem.\nThere are too small examples to explain this case. Should be in documentation I think\n. Here man told that RuntimeTypeModel.Default.Add(typeof(type), true).AddSubType(tag, subType) \nis equivalent to what the attribute-processing code does\nhttps://stackoverflow.com/questions/11869467/protobuf-net-how-to-handle-inheritance-without-protoinclude\n\nI try to write static constructor for register child \n\n```\n    static ExtendedItem1()\n    {\n        ProtoBuf.Meta.RuntimeTypeModel\n            .Default\n            .Add(typeof(AttributableItem), true)\n            .AddSubType(typeof(ExtendedItem1).FullName.GetHashCode(), typeof(ExtendedItem1));\n    }\n```\n\nAnd it serialized OK. I see all fields in file with small differences. \n\n![2015-12-23_10-54-21_jn2ybe0u](https://cloud.githubusercontent.com/assets/1897605/11972904/de030ff2-a963-11e5-8d1a-e5dc1436690f.png)\n\nBut on deserialisation fired \"Unable to cast object of type 'AttributableItem' to type 'ExtendedItem1'\". Why?\n\nFull example\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\n\nusing ProtoBuf;\n\n[ProtoContract]\npublic class AttributableItem\n{\n    [ProtoMember(1)]\n    public Dictionary<string, string> Attributes = new Dictionary<string, string>();\n}\n\n[ProtoContract]\npublic class ExtendedItem1 : AttributableItem\n{\n    static ExtendedItem1()\n    {\n        ProtoBuf.Meta.RuntimeTypeModel\n            .Default\n            .Add(typeof(AttributableItem), true)\n            .AddSubType(typeof(ExtendedItem1).FullName.GetHashCode(), typeof(ExtendedItem1));\n    }\n\n    [ProtoMember(1)]\n    public string description;\n}\n\nstatic class Program\n{\n    static void Main()\n    {\n        var obj = new ExtendedItem1\n        {\n            Attributes =\n            {\n                {\"abc\", \"def\" },\n                {\"ghi\", \"jkl\" },\n            }\n        };\n        obj.description = \"test\";\n\n        string testFile = \"test.proto\";\n        SerializeAsProtobuf(testFile, obj);\n        var objCopy = DeserializeProtobuf(testFile);\n\n        Debug.Assert(objCopy.Attributes.Count == obj.Attributes.Count);\n        foreach (var pair in objCopy.Attributes)\n        {\n            Console.WriteLine(\"{0}={1}\", pair.Key, pair.Value);\n            Debug.Assert(pair.Value == obj.Attributes[pair.Key]);\n        }\n    }\n\n    static public void SerializeAsProtobuf(string filePath, object obj)\n    {\n        using (FileStream fileStream = new FileStream(filePath, FileMode.OpenOrCreate))\n        {\n            SerializeAsProtobuf(fileStream, obj);\n            fileStream.Close();\n        }\n    }\n\n    static public void SerializeAsProtobuf(Stream stream, object obj)\n    {\n        Serializer.Serialize(stream, obj);\n    }\n\n    static public ExtendedItem1 DeserializeProtobuf(string filePath)\n    {\n        using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\n        {\n            ExtendedItem1 product = DeserializeProtobuf(fileStream);\n            fileStream.Close();\n            return product;\n        }\n    }\n\n    static public ExtendedItem1 DeserializeProtobuf(Stream stream)\n    {\n        return ProtoBuf.Serializer.Deserialize<ExtendedItem1>(stream);\n    }\n}\n```\n. Well, I will wait\n. ",
    "chrisxue815": "Thanks for your help @mgravell !\n. Thanks for your help @mgravell !\n. ",
    "Razenpok": "Thanks, it worked!\n. Thanks, it worked!\n. ",
    "JonSargent": "Meirion -- thanks for the tip, I'll give it a try.\n\nMarc -- thanks for weighing in.  Would be great to get this working.  Let me do some further messing around, including with other merge tools, before I burden you with too much troubleshooting.  After all, this probably falls in the \"nice to have\" category...\n\nThanks,\n\nJon\n. Meirion -- thanks for the tip, I'll give it a try.\n\nMarc -- thanks for weighing in.  Would be great to get this working.  Let me do some further messing around, including with other merge tools, before I burden you with too much troubleshooting.  After all, this probably falls in the \"nice to have\" category...\n\nThanks,\n\nJon\n. ",
    "zhangjia517": "wow\n. wow\n. ",
    "yufeih": "Same here. I created a private build [here](https://github.com/yufeih/protobuf-net/commit/f6afb6848fda9511b6876f89600d06b8640a7910) to make it work on UWP.\n. Same here. I created a private build [here](https://github.com/yufeih/protobuf-net/commit/f6afb6848fda9511b6876f89600d06b8640a7910) to make it work on UWP.\n. ",
    "karkusviktor": "Will it be fixed? Now protobuf-net 2.1 is not alpha anymore and I still can't add this package to my UWP App. Unfortunately I couldn't manage to build the new version with the above build configuration.. @thumbmunkeys Yes, it was mentioned at the first comment that the old stable (2.0.0.668) works, but thanks. Some nuget packages require the new version, that's why it is a problem.. I managed to figure out the problem. My serialized fields were private, after I made them public it worked.\r\nI think the reason is the project in which I read the objects is a UWP project where the code generation is limited. (UWP is the reason why I use 2.0 instead of 2.1)\r\nIt was a little bit frustrating that I got no exception about this problem, just all my classes were empty.. Will it be fixed? Now protobuf-net 2.1 is not alpha anymore and I still can't add this package to my UWP App. Unfortunately I couldn't manage to build the new version with the above build configuration.. @thumbmunkeys Yes, it was mentioned at the first comment that the old stable (2.0.0.668) works, but thanks. Some nuget packages require the new version, that's why it is a problem.. I managed to figure out the problem. My serialized fields were private, after I made them public it worked.\r\nI think the reason is the project in which I read the objects is a UWP project where the code generation is limited. (UWP is the reason why I use 2.0 instead of 2.1)\r\nIt was a little bit frustrating that I got no exception about this problem, just all my classes were empty.. ",
    "thumbmunkeys": "@karkusviktor I got a small uwp sample app running by adding protobuf-net version 2.0.0.668 to my project.\r\n\r\nFurthermore I had to add this into Default.rd.xml:\r\n `   <Namespace Name=\"ProtoBuf\"  Dynamic=\"Required All\" Serialize=\"Required Public\" Browse=\"Required All\" Activate=\"Required All\" />`\r\n\r\n. @karkusviktor I got a small uwp sample app running by adding protobuf-net version 2.0.0.668 to my project.\r\n\r\nFurthermore I had to add this into Default.rd.xml:\r\n `   <Namespace Name=\"ProtoBuf\"  Dynamic=\"Required All\" Serialize=\"Required Public\" Browse=\"Required All\" Activate=\"Required All\" />`\r\n\r\n. ",
    "rebulanyum": "Well @mgravell , I'm afraid that won't work in my case. I was using a base class `Microsoft.Xrm.Sdk.Entity` . So for the DataContract and DataMember attributes I'm not able to change the Order parameter value. Then, what should I do? (Please consider the following example)\n\n``` csharp\n[System.Runtime.Serialization.DataContract]\n        class XQW : Microsoft.Xrm.Sdk.Entity\n        {\n            public string ABC { get; set; }\n            public int QWE { get; set; }\n        }\n        static void Main()\n        {\n            XQW a = new XQW()\n            {\n                ABC = \"asdsadasdsadasd\",\n                QWE = 3\n            };\n            XQW newA;\n\n            byte[] buffer;\n            using (MemoryStream serializationStream = new MemoryStream())\n            {\n                Serializer.Serialize(serializationStream, a);\n                buffer = serializationStream.ToArray();\n            }\n            using (MemoryStream deserializationStream = new MemoryStream(buffer))\n            {\n                newA = Serializer.Deserialize<XQW>(deserializationStream);\n                buffer = null;\n            }\n\n            if (a.QWE != newA.QWE)\n                throw new Exception(\"Serialization for datacontract is not working\");\n        }\n```\n\nAnd there are some properties on `Microsoft.Crm.Sdk.Entity` class that ae marked with DataMember attribute without Order parameter setted and the class itself is marked with DataContract attribute. \n\n``` csharp\nnamespace Microsoft.Xrm.Sdk\n{\n    [DataContract(Name = \"Entity\", Namespace = \"http://schemas.microsoft.com/xrm/2011/Contracts\")]\n...\npublic class Entity : IExtensibleDataObject\n    {\n    ....\n[DataMember]\n        public AttributeCollection Attributes { get; set; }\n        [DataMember]\n        public EntityState? EntityState { get; set; }\n        public ExtensionDataObject ExtensionData { get; set; }\n        [DataMember]\n        public FormattedValueCollection FormattedValues { get; }\n        [DataMember]\n        public virtual Guid Id { get; set; }\n        [DataMember]\n        public KeyAttributeCollection KeyAttributes { get; set; }\n        [DataMember]\n        public string LogicalName { get; set; }\n        [DataMember]\n        [SuppressMessage(\"Microsoft.Naming\", \"CA1721:PropertyNamesShouldNotMatchGetMethods\", Justification = \"Member and conflicting method differences are obvious.\")]\n        public RelatedEntityCollection RelatedEntities { get; }\n        [DataMember]\n        public string RowVersion { get; set; }\n...\n```\n\nSo, it has to be fixed I guess; I mean there is no other way, right?\n. Actually, `RuntimeTypeModel.Default.Add` solution worked for me for most of the situations. But I couldn't solve 1 problem with this way: It doesn't serialize `Attributes` property: It's type is `Microsoft.Xrm.Sdk.AttributeCollection`. What can be the problem with collection types when using this trick. (Please consider the following example.)\n\n``` csharp\n[System.Runtime.Serialization.DataContract]\n        class XQW : Microsoft.Xrm.Sdk.Entity\n        {\n            [System.Runtime.Serialization.DataMember]\n            public string ABC { get; set; }\n            [System.Runtime.Serialization.DataMember]\n            public int QWE { get; set; }\n        }\n        static Program()\n        {\n            XQW entity = new XQW();\n            RuntimeTypeModel.Default.Add(typeof(Entity), false).Add(nameof(entity.Id), nameof(entity.LogicalName), nameof(entity.Attributes), nameof(entity.EntityState), nameof(entity.FormattedValues), nameof(entity.RelatedEntities));\n            RuntimeTypeModel.Default.Add(typeof(XQW), false).Add(nameof(entity.ABC), nameof(entity.QWE));\n\n            EntityReference refe = new EntityReference();\n            RuntimeTypeModel.Default.Add(typeof(EntityReference), false).Add(nameof(refe.Id), nameof(refe.LogicalName), nameof(refe.KeyAttributes), nameof(refe.Name), nameof(refe.RowVersion));\n        }\n        static void Main()\n        {\n            XQW a = new XQW()\n            {\n                ABC = \"asdsadasdsadasd\",\n                QWE = 3,\n                Id = Guid.Parse(\"a108168e-ac83-e511-80dd-005056a305e7\"),\n                Attributes = new Microsoft.Xrm.Sdk.AttributeCollection() {\n                    new KVP(\"somerefid\", new EntityReference() {\n                        LogicalName = \"someref\",\n                        Id = Guid.Parse(\"6f2de500-39d1-e411-8125-b8ca3a62a025\"),\n                        Name = \"Dev\"\n                    })\n                }\n            };\n            XQW newA;\n\n            byte[] buffer;\n            using (MemoryStream serializationStream = new MemoryStream())\n            {\n                Serializer.Serialize(serializationStream, a);\n                buffer = serializationStream.ToArray();\n            }\n            using (MemoryStream deserializationStream = new MemoryStream(buffer))\n            {\n                newA = Serializer.Deserialize<XQW>(deserializationStream);\n                buffer = null;\n            }\n\n            if (a.QWE != newA.QWE)\n                throw new Exception(\"Serialization for datacontract is not working\");\n\n            if (newA.Attributes.Count == 0)\n                /* At this point it fails even Attributes property is serialized. Because whatever I added to the collection is not serialized. */\n                throw new Exception(\"Serialization for datacontract is not working\");\n        }\n```\n. Well it's just a collection with items of type `KeyValuePair<string, object>`. Right? And KeyValuePair is just a struct with 2 properties: Key and Value. So what should I do about it? \n\nAnd I think, on the contrary, Google.ProtocolBuffers supports map fields with [version 3](https://developers.google.com/protocol-buffers/docs/reference/proto3-spec#map_field) and even with [version 2](https://developers.google.com/protocol-buffers/docs/reference/proto2-spec#map_field).\n. Oh, I'm sorry for my bad understanding...\n\nThe \"object\" is sometimes `string`, sometimes `Microsoft.Xrm.Sdk.EntityReference`. It's not a single fixed type. But even strings are not serializing... \n. Well @mgravell , I'm afraid that won't work in my case. I was using a base class `Microsoft.Xrm.Sdk.Entity` . So for the DataContract and DataMember attributes I'm not able to change the Order parameter value. Then, what should I do? (Please consider the following example)\n\n``` csharp\n[System.Runtime.Serialization.DataContract]\n        class XQW : Microsoft.Xrm.Sdk.Entity\n        {\n            public string ABC { get; set; }\n            public int QWE { get; set; }\n        }\n        static void Main()\n        {\n            XQW a = new XQW()\n            {\n                ABC = \"asdsadasdsadasd\",\n                QWE = 3\n            };\n            XQW newA;\n\n            byte[] buffer;\n            using (MemoryStream serializationStream = new MemoryStream())\n            {\n                Serializer.Serialize(serializationStream, a);\n                buffer = serializationStream.ToArray();\n            }\n            using (MemoryStream deserializationStream = new MemoryStream(buffer))\n            {\n                newA = Serializer.Deserialize<XQW>(deserializationStream);\n                buffer = null;\n            }\n\n            if (a.QWE != newA.QWE)\n                throw new Exception(\"Serialization for datacontract is not working\");\n        }\n```\n\nAnd there are some properties on `Microsoft.Crm.Sdk.Entity` class that ae marked with DataMember attribute without Order parameter setted and the class itself is marked with DataContract attribute. \n\n``` csharp\nnamespace Microsoft.Xrm.Sdk\n{\n    [DataContract(Name = \"Entity\", Namespace = \"http://schemas.microsoft.com/xrm/2011/Contracts\")]\n...\npublic class Entity : IExtensibleDataObject\n    {\n    ....\n[DataMember]\n        public AttributeCollection Attributes { get; set; }\n        [DataMember]\n        public EntityState? EntityState { get; set; }\n        public ExtensionDataObject ExtensionData { get; set; }\n        [DataMember]\n        public FormattedValueCollection FormattedValues { get; }\n        [DataMember]\n        public virtual Guid Id { get; set; }\n        [DataMember]\n        public KeyAttributeCollection KeyAttributes { get; set; }\n        [DataMember]\n        public string LogicalName { get; set; }\n        [DataMember]\n        [SuppressMessage(\"Microsoft.Naming\", \"CA1721:PropertyNamesShouldNotMatchGetMethods\", Justification = \"Member and conflicting method differences are obvious.\")]\n        public RelatedEntityCollection RelatedEntities { get; }\n        [DataMember]\n        public string RowVersion { get; set; }\n...\n```\n\nSo, it has to be fixed I guess; I mean there is no other way, right?\n. Actually, `RuntimeTypeModel.Default.Add` solution worked for me for most of the situations. But I couldn't solve 1 problem with this way: It doesn't serialize `Attributes` property: It's type is `Microsoft.Xrm.Sdk.AttributeCollection`. What can be the problem with collection types when using this trick. (Please consider the following example.)\n\n``` csharp\n[System.Runtime.Serialization.DataContract]\n        class XQW : Microsoft.Xrm.Sdk.Entity\n        {\n            [System.Runtime.Serialization.DataMember]\n            public string ABC { get; set; }\n            [System.Runtime.Serialization.DataMember]\n            public int QWE { get; set; }\n        }\n        static Program()\n        {\n            XQW entity = new XQW();\n            RuntimeTypeModel.Default.Add(typeof(Entity), false).Add(nameof(entity.Id), nameof(entity.LogicalName), nameof(entity.Attributes), nameof(entity.EntityState), nameof(entity.FormattedValues), nameof(entity.RelatedEntities));\n            RuntimeTypeModel.Default.Add(typeof(XQW), false).Add(nameof(entity.ABC), nameof(entity.QWE));\n\n            EntityReference refe = new EntityReference();\n            RuntimeTypeModel.Default.Add(typeof(EntityReference), false).Add(nameof(refe.Id), nameof(refe.LogicalName), nameof(refe.KeyAttributes), nameof(refe.Name), nameof(refe.RowVersion));\n        }\n        static void Main()\n        {\n            XQW a = new XQW()\n            {\n                ABC = \"asdsadasdsadasd\",\n                QWE = 3,\n                Id = Guid.Parse(\"a108168e-ac83-e511-80dd-005056a305e7\"),\n                Attributes = new Microsoft.Xrm.Sdk.AttributeCollection() {\n                    new KVP(\"somerefid\", new EntityReference() {\n                        LogicalName = \"someref\",\n                        Id = Guid.Parse(\"6f2de500-39d1-e411-8125-b8ca3a62a025\"),\n                        Name = \"Dev\"\n                    })\n                }\n            };\n            XQW newA;\n\n            byte[] buffer;\n            using (MemoryStream serializationStream = new MemoryStream())\n            {\n                Serializer.Serialize(serializationStream, a);\n                buffer = serializationStream.ToArray();\n            }\n            using (MemoryStream deserializationStream = new MemoryStream(buffer))\n            {\n                newA = Serializer.Deserialize<XQW>(deserializationStream);\n                buffer = null;\n            }\n\n            if (a.QWE != newA.QWE)\n                throw new Exception(\"Serialization for datacontract is not working\");\n\n            if (newA.Attributes.Count == 0)\n                /* At this point it fails even Attributes property is serialized. Because whatever I added to the collection is not serialized. */\n                throw new Exception(\"Serialization for datacontract is not working\");\n        }\n```\n. Well it's just a collection with items of type `KeyValuePair<string, object>`. Right? And KeyValuePair is just a struct with 2 properties: Key and Value. So what should I do about it? \n\nAnd I think, on the contrary, Google.ProtocolBuffers supports map fields with [version 3](https://developers.google.com/protocol-buffers/docs/reference/proto3-spec#map_field) and even with [version 2](https://developers.google.com/protocol-buffers/docs/reference/proto2-spec#map_field).\n. Oh, I'm sorry for my bad understanding...\n\nThe \"object\" is sometimes `string`, sometimes `Microsoft.Xrm.Sdk.EntityReference`. It's not a single fixed type. But even strings are not serializing... \n. ",
    "omtslug": "fwiw I just want to comment that dropping field presence logic is the main reason I'm looking into this implementation. C# is on its way officially from g with proto3 but without any possibility to check if a \nfield is included or not. Please don't include that 'feature' here.\n. fwiw I just want to comment that dropping field presence logic is the main reason I'm looking into this implementation. C# is on its way officially from g with proto3 but without any possibility to check if a \nfield is included or not. Please don't include that 'feature' here.\n. ",
    "breyed": "Should this issue still be open? I was encouraged at first to think that proto3 support was available already... only to find out it isn't.. The source code has lots of lovely comments, but since the NuGet package doesn't include the .xml files, we don't get to see them. :-(. Should this issue still be open? I was encouraged at first to think that proto3 support was available already... only to find out it isn't.. The source code has lots of lovely comments, but since the NuGet package doesn't include the .xml files, we don't get to see them. :-(. ",
    "Codeusa": "Is 2.3.0 likely to hit this week? [Sachiel](https://github.com/RainwayApp/sachiel-net) makes heavy use of this library and 3.0 support would be fantastic. . Mostly I'm just referring to the ability to serialize/deseralize proto3 compliant buffers along with generating a .proto schema from decorated models.  I suppose this mostly has to do with run time? \r\n\r\nLooking forward to it!. Is 2.3.0 likely to hit this week? [Sachiel](https://github.com/RainwayApp/sachiel-net) makes heavy use of this library and 3.0 support would be fantastic. . Mostly I'm just referring to the ability to serialize/deseralize proto3 compliant buffers along with generating a .proto schema from decorated models.  I suppose this mostly has to do with run time? \r\n\r\nLooking forward to it!. ",
    "yariker": "Will throw in my two cents. This issue applies not only to the structs, but to the regular classes as well, so I would change the issue title. We need the support of C# 6.0 read-only properties in protobuf-net!\n. Will throw in my two cents. This issue applies not only to the structs, but to the regular classes as well, so I would change the issue title. We need the support of C# 6.0 read-only properties in protobuf-net!\n. ",
    "gabriele-ricci-kyklos": "That's ok, but I'm not expecting a `NullReferenceException`. This exception doesn't tell me much about what's wrong.\n\n If I serialize an array of 5 element with 3 of them set to null, can protobuf simply give me back an array of 2 elements?\n. That's ok, but I'm not expecting a `NullReferenceException`. This exception doesn't tell me much about what's wrong.\n\n If I serialize an array of 5 element with 3 of them set to null, can protobuf simply give me back an array of 2 elements?\n. ",
    "eric-b": "I eventually found the cause.\n\nThis sample will throw a StackoverflowException:\n\n```\nvoid Main()\n{\n    var model = new Model();\n    model.Foo = new FooB() { Property2 = \"bar\" };\n\n    var modelBuffer = new Model();\n    modelBuffer.Foo = new FooA();\n\n    var serializer = RuntimeTypeModel.Default;\n\n    using (var ms = new MemoryStream())\n    {\n        serializer.Serialize(ms, model);\n        ms.Position = 0;\n        serializer.Deserialize(ms, modelBuffer, typeof(Model));\n    }\n\n}\n\n[ProtoContract]\npublic sealed class Model\n{\n    [ProtoMember(1)]\n    public FooBase Foo { get; set; }\n\n}\n\n[ProtoContract]\n[ProtoInclude(100, typeof(FooA))]\n[ProtoInclude(200, typeof(FooB))]\npublic abstract class FooBase\n{\n}\n\n[ProtoContract]\npublic sealed class FooA : FooBase\n{\n    [ProtoMember(1)]\n    public string Property1 { get; set; }\n}\n\n[ProtoContract]\npublic sealed class FooB : FooBase\n{\n    [ProtoMember(1)]\n    public string Property2 { get; set; }\n}\n```\n- Model.Foo property's type is abstract (FooBase).\n- If we try to deserialize an object containing the subtype FooA in Model.Foo, with a buffer instance containing a subtype FooB, the application crashes.\n\nThe workaround here is to reinitialize the buffer instance with Model.Foo = null. Until now, I used to only reset the properties of Model.Foo.\n. I eventually found the cause.\n\nThis sample will throw a StackoverflowException:\n\n```\nvoid Main()\n{\n    var model = new Model();\n    model.Foo = new FooB() { Property2 = \"bar\" };\n\n    var modelBuffer = new Model();\n    modelBuffer.Foo = new FooA();\n\n    var serializer = RuntimeTypeModel.Default;\n\n    using (var ms = new MemoryStream())\n    {\n        serializer.Serialize(ms, model);\n        ms.Position = 0;\n        serializer.Deserialize(ms, modelBuffer, typeof(Model));\n    }\n\n}\n\n[ProtoContract]\npublic sealed class Model\n{\n    [ProtoMember(1)]\n    public FooBase Foo { get; set; }\n\n}\n\n[ProtoContract]\n[ProtoInclude(100, typeof(FooA))]\n[ProtoInclude(200, typeof(FooB))]\npublic abstract class FooBase\n{\n}\n\n[ProtoContract]\npublic sealed class FooA : FooBase\n{\n    [ProtoMember(1)]\n    public string Property1 { get; set; }\n}\n\n[ProtoContract]\npublic sealed class FooB : FooBase\n{\n    [ProtoMember(1)]\n    public string Property2 { get; set; }\n}\n```\n- Model.Foo property's type is abstract (FooBase).\n- If we try to deserialize an object containing the subtype FooA in Model.Foo, with a buffer instance containing a subtype FooB, the application crashes.\n\nThe workaround here is to reinitialize the buffer instance with Model.Foo = null. Until now, I used to only reset the properties of Model.Foo.\n. ",
    "pantonis": "+1 Need urgently\n\nThanks\n. This happened in an asp.net core (.net framework project) targeting .net46 with minimal code.\n. I think I have found the issue. Apart from the web project I had my ViewModels as a class library. The protobuf lib there was version 2.0.0.668 and in the web project it was 2.1.0. As soon as I updated the class library to 2.1.0 it worked.\n. @pskpsk6 Both attributes can work. Think the problem here has to do with paremeterized constructor not the attributes\n. Yes I totally agree. . Same problem here.. +1 Need urgently\n\nThanks\n. This happened in an asp.net core (.net framework project) targeting .net46 with minimal code.\n. I think I have found the issue. Apart from the web project I had my ViewModels as a class library. The protobuf lib there was version 2.0.0.668 and in the web project it was 2.1.0. As soon as I updated the class library to 2.1.0 it worked.\n. @pskpsk6 Both attributes can work. Think the problem here has to do with paremeterized constructor not the attributes\n. Yes I totally agree. . Same problem here.. ",
    "cemremengu": "Any ETA on this one ?\n. Any ETA on this one ?\n. ",
    "mcmillab": "I don't understand - so we can't use Protobuf.Net on .Net Core at the moment?\r\n. I don't understand - so we can't use Protobuf.Net on .Net Core at the moment?\r\n. ",
    "li-keli": "now , .Net Core can use Protobuf.Net ?. now , .Net Core can use Protobuf.Net ?. ",
    "LazyPlanet": "I downloaded demo in this, in file protobuf-net.proto wrote as below:\n\npackage protobuf_net;\nimport \"descriptor.proto\";\n\nextend google.protobuf.FileOptions {\n  optional string namespace = 52500;\n}\n\n**while it created nothing:**\n//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\n// Generated from: protobuf-net.proto\n// Note: requires additional types generated from: descriptor.proto\nnamespace protobuf_net\n{\n}\n. Hey, I want to use custom options?\nDoes not support it?\nThank u.\n. Thank u, but you may mistake what I mean,\n\n## My question is in\n\nimport \"google/protobuf/descriptor.proto\";\n     extend google.protobuf.MessageOptions {\n     optional string my_option = 51234;\n}\nmessage MyMessage {\n     option (my_option) = \"Hello world!\";\n\n## }\n\n**How can i get my_option value from MyMessage ?**\nThank u for your time.\n. Does it support?\nThank u.\n. I have search as below:\nhttp://stackoverflow.com/questions/8421463/how-to-support-custom-options-with-protobuf-net\nhttp://stackoverflow.com/questions/5458477/generate-c-sharp-from-proto-files-and-vice-versa-interpreting-custom-options\n\nWhat a pity it does not support it.\n. Thank u, It works. I have another mix about custom options :\n\nmessage person {\n   option (my_message_option) = true;\n\n   optional string firstname = 1 [(my_field_option) = 42];\n   optional string lastname = 2 [(my_field_option) = 12];\n   optional int age = 3;\n}\nI want to generate:\n\n[ProtoContract, MyMessageOption(true)]\npublic class Person\n{\n    [ProtoMember(1), MyFieldOption(42)]\n    public string Firstname;\n\n```\n[ProtoMember(2), MyFieldOption(12)]\npublic string Firstname;\n\n[ProtoMember(3)]\npublic string Firstname;\n```\n\n}\n\nHow can i do that, does it support that ? and I have seen this article as below:\nhttp://stackoverflow.com/questions/5458477/generate-c-sharp-from-proto-files-and-vice-versa-interpreting-custom-options\n. I downloaded demo in this, in file protobuf-net.proto wrote as below:\n\npackage protobuf_net;\nimport \"descriptor.proto\";\n\nextend google.protobuf.FileOptions {\n  optional string namespace = 52500;\n}\n\n**while it created nothing:**\n//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\n// Generated from: protobuf-net.proto\n// Note: requires additional types generated from: descriptor.proto\nnamespace protobuf_net\n{\n}\n. Hey, I want to use custom options?\nDoes not support it?\nThank u.\n. Thank u, but you may mistake what I mean,\n\n## My question is in\n\nimport \"google/protobuf/descriptor.proto\";\n     extend google.protobuf.MessageOptions {\n     optional string my_option = 51234;\n}\nmessage MyMessage {\n     option (my_option) = \"Hello world!\";\n\n## }\n\n**How can i get my_option value from MyMessage ?**\nThank u for your time.\n. Does it support?\nThank u.\n. I have search as below:\nhttp://stackoverflow.com/questions/8421463/how-to-support-custom-options-with-protobuf-net\nhttp://stackoverflow.com/questions/5458477/generate-c-sharp-from-proto-files-and-vice-versa-interpreting-custom-options\n\nWhat a pity it does not support it.\n. Thank u, It works. I have another mix about custom options :\n\nmessage person {\n   option (my_message_option) = true;\n\n   optional string firstname = 1 [(my_field_option) = 42];\n   optional string lastname = 2 [(my_field_option) = 12];\n   optional int age = 3;\n}\nI want to generate:\n\n[ProtoContract, MyMessageOption(true)]\npublic class Person\n{\n    [ProtoMember(1), MyFieldOption(42)]\n    public string Firstname;\n\n```\n[ProtoMember(2), MyFieldOption(12)]\npublic string Firstname;\n\n[ProtoMember(3)]\npublic string Firstname;\n```\n\n}\n\nHow can i do that, does it support that ? and I have seen this article as below:\nhttp://stackoverflow.com/questions/5458477/generate-c-sharp-from-proto-files-and-vice-versa-interpreting-custom-options\n. ",
    "Demivan": "I will probably convert URLs to strings for now.\nI wanted to implement surrogate for URI class but surrogate types cannot be used on types with inbuilt behavior. Can I somehow change serialization of inbuilt type?\n. I will probably convert URLs to strings for now.\nI wanted to implement surrogate for URI class but surrogate types cannot be used on types with inbuilt behavior. Can I somehow change serialization of inbuilt type?\n. ",
    "jhimes144": "@mgravell Yes I took a quick look at the protobuf-net source to acquaint myself. The code for the TreeObject class does not make use of a method named Add neither does it have an indexer. As you probably already know the _children field does have an add method and indexer with it being a List. If you'd like I can attempt to create an example project to recreate the issue. If I can't produce an example project I can provide you with a private message containing code from an old commit that produces the problem. Keep me posted\n. @mgravell  Sorry, the example I provided was just an excerpt, I should of included more. I wrote a very small console application that recreates the issue. The code only uses the latest nuget version of protobuffers-net. I was wrong about the indexer, my original code DID have an indexer that I forgot about and the bug DOES NOT occur unless an indexer is present. I was able to do this in 40 lines of code so it should be an easy read.\n\nFYI The children field is irrelevant to the issue, it appears to have something to do with the combination of the enumeration type and indexer. The children field is specified for code completeness.\n\nI didn't test whether the problem occurs with an explicit enumeration implementation with a type generic as well as a generic-less enumeration implementation. This is in regards to the problematic class in the source I provided.\n\nSource -\n[Program.zip](https://github.com/mgravell/protobuf-net/files/345153/Program.zip)\n. Any news on the bug? My team is actually very much relying on the fact that our implementation has this IEnumerable interface. I know your project is open source and you probably have a life outside of this, let me know where I can donate as well.\n. Excellent, I've managed to create a class to surrogate our real life implementation for serialization, it allowed for a better implementation anyways. Thanks for your support. I've used protobuffers-net in a few projects. We used the library to transfer storage of data from a database implementation to a pure document-based storage implementation.\n\nI'd like to help in some way, If you are interested... I run a startup that generates documentation for projects like this... our back end uses protobuffers-net.\n\nhttps://www.docify.net/\n\nI think we could set you up with a free premium account if you have the slightest interest.\n. @mgravell Yes I took a quick look at the protobuf-net source to acquaint myself. The code for the TreeObject class does not make use of a method named Add neither does it have an indexer. As you probably already know the _children field does have an add method and indexer with it being a List. If you'd like I can attempt to create an example project to recreate the issue. If I can't produce an example project I can provide you with a private message containing code from an old commit that produces the problem. Keep me posted\n. @mgravell  Sorry, the example I provided was just an excerpt, I should of included more. I wrote a very small console application that recreates the issue. The code only uses the latest nuget version of protobuffers-net. I was wrong about the indexer, my original code DID have an indexer that I forgot about and the bug DOES NOT occur unless an indexer is present. I was able to do this in 40 lines of code so it should be an easy read.\n\nFYI The children field is irrelevant to the issue, it appears to have something to do with the combination of the enumeration type and indexer. The children field is specified for code completeness.\n\nI didn't test whether the problem occurs with an explicit enumeration implementation with a type generic as well as a generic-less enumeration implementation. This is in regards to the problematic class in the source I provided.\n\nSource -\n[Program.zip](https://github.com/mgravell/protobuf-net/files/345153/Program.zip)\n. Any news on the bug? My team is actually very much relying on the fact that our implementation has this IEnumerable interface. I know your project is open source and you probably have a life outside of this, let me know where I can donate as well.\n. Excellent, I've managed to create a class to surrogate our real life implementation for serialization, it allowed for a better implementation anyways. Thanks for your support. I've used protobuffers-net in a few projects. We used the library to transfer storage of data from a database implementation to a pure document-based storage implementation.\n\nI'd like to help in some way, If you are interested... I run a startup that generates documentation for projects like this... our back end uses protobuffers-net.\n\nhttps://www.docify.net/\n\nI think we could set you up with a free premium account if you have the slightest interest.\n. ",
    "veblush": "Awesome \ud83d\udc4d \n. Awesome \ud83d\udc4d \n. ",
    "nhnifong": "This seems to still be a problem when trying to install with \"Install-Package protobuf-net\"\nIs it not released?\n\nInstall-Package : Could not install package 'protobuf-net 2.1.0'. You are trying to install this package into a project that targets '.NETFramework,Version=v3.5', but the package does n\not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\nAt line:1 char:16\n- Install-Package <<<<  protobuf-net\n  - CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\n  - FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\n. This seems to still be a problem when trying to install with \"Install-Package protobuf-net\"\nIs it not released?\n\nInstall-Package : Could not install package 'protobuf-net 2.1.0'. You are trying to install this package into a project that targets '.NETFramework,Version=v3.5', but the package does n\not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\nAt line:1 char:16\n- Install-Package <<<<  protobuf-net\n  - CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\n  - FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\n. ",
    "artkravchenko": "The same problem for .NET 2.0, 3.0 and 3.5.\r\n\r\nExample:\r\n```\r\nCould not install package 'protobuf-net 2.1.0'. You are trying to install this package\r\ninto a project that targets '.NETFramework,Version=v3.5', but the package does not\r\ncontain any assembly references or content files that are compatible with that\r\nframework. For more information, contact the package author.\r\n```\r\n\r\nHowever, it can be successfully installed on .NET 4.5.2.. The same problem for .NET 2.0, 3.0 and 3.5.\r\n\r\nExample:\r\n```\r\nCould not install package 'protobuf-net 2.1.0'. You are trying to install this package\r\ninto a project that targets '.NETFramework,Version=v3.5', but the package does not\r\ncontain any assembly references or content files that are compatible with that\r\nframework. For more information, contact the package author.\r\n```\r\n\r\nHowever, it can be successfully installed on .NET 4.5.2.. ",
    "JohnHBrock": "Here's my argument for continued .NET 3.5 support:\r\n\r\nMicrosoft has ended .NET 4.5.1 support, but they haven't ended .NET 3.5 SP1 support: [.NET 3.5 SP1 support is tied to the various Windows OS support lifecycles](https://support.microsoft.com/en-us/gp/framework_faq/en-us), including Windows 10; some of these OS support lifecycles last through at least 2020.\r\n\r\n.NET 3.5 is also the highest version that can still run on Windows XP. Standard Windows XP isn't supported by Microsoft anymore, but embedded versions -- especially for point-of-sale systems like cash registers -- I believe are still officially supported by Microsoft.. Here's my argument for continued .NET 3.5 support:\r\n\r\nMicrosoft has ended .NET 4.5.1 support, but they haven't ended .NET 3.5 SP1 support: [.NET 3.5 SP1 support is tied to the various Windows OS support lifecycles](https://support.microsoft.com/en-us/gp/framework_faq/en-us), including Windows 10; some of these OS support lifecycles last through at least 2020.\r\n\r\n.NET 3.5 is also the highest version that can still run on Windows XP. Standard Windows XP isn't supported by Microsoft anymore, but embedded versions -- especially for point-of-sale systems like cash registers -- I believe are still officially supported by Microsoft.. ",
    "mehmetakbulut": "In addition to POS systems pointed out by John, projects for the Unity3D platform also need to target .NET 3.5 for the time being. ([there is .NET 4.6 support on the way](https://forum.unity3d.com/threads/upgraded-mono-net-in-editor-on-5-5-0b9.438359/) but it is on the research track and won't be here for a while). In addition to POS systems pointed out by John, projects for the Unity3D platform also need to target .NET 3.5 for the time being. ([there is .NET 4.6 support on the way](https://forum.unity3d.com/threads/upgraded-mono-net-in-editor-on-5-5-0b9.438359/) but it is on the research track and won't be here for a while). ",
    "philipogorman": "The nuget package is in the folder `portable-sl4+net40+wp7+windows8`\nThis doesn't match the name for 136 here http://portablelibraryprofiles.apps.stephencleary.com/\n`portable-net4+sl50+netcore45+wp8` maybe this is the cause?\n. The nuget package is in the folder `portable-sl4+net40+wp7+windows8`\nThis doesn't match the name for 136 here http://portablelibraryprofiles.apps.stephencleary.com/\n`portable-net4+sl50+netcore45+wp8` maybe this is the cause?\n. ",
    "SL-RU": "Awesome! Thanks!\n\n26.07.2016 19:47, Marc Gravell \u043f\u0438\u0448\u0435\u0442:\n\n> Inherit from Extensible. Add members for your 1 and 2. The rest should be\n> stored opaquely without you needing to know anything about them.\n> \n> So:\n> \n> [ProtoContract] class Foo : Extensible {\n> [ProtoMember(1)] public string X {...}\n> [ProtoMember(2)] public string Y {...}\n> \n> }\n> \n> On Tue, 26 Jul 2016 15:57 Alexander Lutz, notifications@github.com\n> wrote:\n> \n> > Maybe it is an stupid question but I couldn't find an solution.\n> > \n> > I've got an byte[] of serialized data and I know that first & second\n> > proto\n> > members in it are strings. And I need to change only that members -\n> > everything else must stay the same(other member's count is unknown\n> > so it's\n> > type).\n> > \n> > How can I do that?\n> > \n> > \u2014\n> > You are receiving this because you are subscribed to this thread.\n> > Reply to this email directly, view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/173, or mute the\n> > thread\n> > \n> > https://github.com/notifications/unsubscribe-auth/AABDsKu2iLD0bsNxdSmVFq2qZM8PHsxCks5qZiBhgaJpZM4JVPMl\n> > .\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/173#issuecomment-235330128,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AEEN7WVIBAhio1sdeoYkAAjEl753X-o0ks5qZjokgaJpZM4JVPMl.\n\n## \n\n\u0421 \u0443\u0432\u0430\u0436\u0435\u043d\u0438\u0435\u043c, \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440.\n. Well, I've got a new problem.\n\nThat class was made as you sad.\n\n```\n    [ProtoContract]\n    public class SqliteDbInterfaceVersionData : Extensible\n    {\n        [ProtoMember(1)]\n        public string Locked { get; set; }\n\n        [ProtoMember(2)]\n        public string Version { get; set; }\n\n        [ProtoMember(3)]\n        public string EditBy { get; set; }\n\n        [ProtoMember(4)]\n        public string EditTime { get; set; }\n    }\n```\n\nThat class is one of which is serialized\n\n```\n    [ProtoContract]\n    public class TextData : IData, INotifyPropertyChanged\n    {\n        private string _locked;\n\n        [ProtoMember(1)]\n        public string Locked { get; set; }\n\n        private string _version;\n        [ProtoMember(2)]\n        public string Version { get { return _version; } set { _version = value; OnPropertyChanged(); } }\n\n        private string _editBy;\n\n        [ProtoMember(3)]\n        public string EditBy\n        {\n            get { return _editBy; }\n            set\n            {\n                _editBy = value;\n                OnPropertyChanged(); \n            }\n        }\n\n        private string _editTime;\n        [ProtoMember(4)]\n        public string EditTime { get { return _editTime; } set { _editTime = value; OnPropertyChanged(); } }\n\n        private string _text;\n        [ProtoMember(5)]\n        public string Text\n        {\n            get { return _text; }\n            set { _text = value; OnPropertyChanged(); }\n        }\n\n        public string Id { get; set; }\n        public bool IsFullDataRecieved => true;\n\n        #region notify\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n        #endregion\n    }\n```\n\nWhat am I doing:\n1. I'm serializing TextData \n\n```\n        public T Deserialize(byte[] s)\n        {\n            using (var m = new MemoryStream(s))\n            {\n                return (T)Serializer.Deserialize(typeof(T), m);\n            }\n        }\n\n        public byte[] Serialize(T data)\n        {\n            using (var m = new MemoryStream())\n            {\n                Serializer.Serialize(m, data);\n                return m.ToArray();\n            }\n        }\n```\n1. Deserializing that data as DbInterfaceVersionData \n\n```\n            SqliteDbInterfaceVersionData d;\n            using (var m = new MemoryStream(data))\n            {\n                d = (SqliteDbInterfaceVersionData) Serializer.Deserialize(typeof (SqliteDbInterfaceVersionData), m);\n                d.EditBy = CurrentAuthor;\n                d.Version = CurrentVersion;\n                d.EditTime = DateTime.Now.ToString();\n                if (d.Locked == null)\n                    d.Locked = \"\";\n            }\n```\n1. Changing values in DbInterfaceVersionData \n2. Serializing that again and store that data somewhere\n\nAfter that I'm deserializing that stored data in TextData again. Text field deserialized without a problems... but other fields are null =c\n\nWhat can it be? Is it because Extensible\n. Here it go:\n\n``` C#\n    [ProtoContract]\n    public class SqliteDbInterfaceVersionData : Extensible\n    {\n        [ProtoMember(1)]\n        public string Locked { get; set; }\n\n        [ProtoMember(2)]\n        public string Version { get; set; }\n\n        [ProtoMember(3)]\n        public string EditBy { get; set; }\n\n        [ProtoMember(4)]\n        public string EditTime { get; set; }\n    }\n\n    public interface IData\n    {\n        //Weeell, let client be creating new data.\n        string Locked { get; }\n        string Version { get; }\n        string EditBy { get; }\n        string EditTime { get; }\n\n        string Id { get; set; }\n        bool IsFullDataRecieved { get; }\n    }\n    [ProtoContract]\n    public class Data : IData, INotifyPropertyChanged\n    {\n        private string _locked;\n\n        [ProtoMember(1)]\n        public string Locked { get; set; }\n\n        private string _version;\n        [ProtoMember(2)]\n        public string Version { get { return _version; } set { _version = value; OnPropertyChanged(); } }\n\n        private string _editBy;\n\n        [ProtoMember(3)]\n        public string EditBy\n        {\n            get { return _editBy; }\n            set\n            {\n                _editBy = value;\n                OnPropertyChanged(); \n            }\n        }\n\n        private string _editTime;\n        [ProtoMember(4)]\n        public string EditTime { get { return _editTime; } set { _editTime = value; OnPropertyChanged(); } }\n\n        public string Id { get; set; }\n        public bool IsFullDataRecieved => true;\n\n        #region notify\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n        #endregion\n    }\n    [ProtoContract]\n    public class TextData : Data, INotifyPropertyChanged\n    {\n        private string _text;\n        [ProtoMember(5)]\n        public string Text\n        {\n            get { return _text; }\n            set { _text = value; OnPropertyChanged(); }\n        }\n    }\n...............................................\n            TextData td = new TextData();\n            TextData.Text = \"blahblah\";\n            byte[] ser;\n            using (var m = new MemoryStream())\n            {\n                Serializer.Serialize(m, dt);\n                ser = m.ToArray();\n            }\n\n            SqliteDbInterfaceVersionData d;\n            using (var m = new MemoryStream(ser))\n            {\n                d = (SqliteDbInterfaceVersionData) Serializer.Deserialize(typeof (SqliteDbInterfaceVersionData), m);\n                d.EditBy = CurrentAuthor;\n                d.Version = CurrentVersion;\n                d.EditTime = DateTime.Now.ToString();\n                if (d.Locked == null)\n                    d.Locked = \"\";\n            }\n            byte[] data;\n            using (var m = new MemoryStream())\n            {\n                Serializer.Serialize(m, d);\n                data = m.ToArray();\n            }\n```\n\nHere is everything OK. All data is serialized.\n![screenshot 877](https://cloud.githubusercontent.com/assets/4263405/17226317/8e683b02-5511-11e6-9035-366f239035a3.png)\n\nBut after deserialization\n\n```\n            TextData td;\n            using (var m = new MemoryStream(data))\n            {\n                td = (TextData)Serializer.Deserialize(typeof(TextData), m);\n            }\n```\n\nAll fields in td  except td.Text is nul!!1\n\nMaybe it because of parenting?\n\nThank you for the answer!\n. Is it because of parenting?\n. Awesome! Thanks!\n\n26.07.2016 19:47, Marc Gravell \u043f\u0438\u0448\u0435\u0442:\n\n> Inherit from Extensible. Add members for your 1 and 2. The rest should be\n> stored opaquely without you needing to know anything about them.\n> \n> So:\n> \n> [ProtoContract] class Foo : Extensible {\n> [ProtoMember(1)] public string X {...}\n> [ProtoMember(2)] public string Y {...}\n> \n> }\n> \n> On Tue, 26 Jul 2016 15:57 Alexander Lutz, notifications@github.com\n> wrote:\n> \n> > Maybe it is an stupid question but I couldn't find an solution.\n> > \n> > I've got an byte[] of serialized data and I know that first & second\n> > proto\n> > members in it are strings. And I need to change only that members -\n> > everything else must stay the same(other member's count is unknown\n> > so it's\n> > type).\n> > \n> > How can I do that?\n> > \n> > \u2014\n> > You are receiving this because you are subscribed to this thread.\n> > Reply to this email directly, view it on GitHub\n> > https://github.com/mgravell/protobuf-net/issues/173, or mute the\n> > thread\n> > \n> > https://github.com/notifications/unsubscribe-auth/AABDsKu2iLD0bsNxdSmVFq2qZM8PHsxCks5qZiBhgaJpZM4JVPMl\n> > .\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/mgravell/protobuf-net/issues/173#issuecomment-235330128,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AEEN7WVIBAhio1sdeoYkAAjEl753X-o0ks5qZjokgaJpZM4JVPMl.\n\n## \n\n\u0421 \u0443\u0432\u0430\u0436\u0435\u043d\u0438\u0435\u043c, \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440.\n. Well, I've got a new problem.\n\nThat class was made as you sad.\n\n```\n    [ProtoContract]\n    public class SqliteDbInterfaceVersionData : Extensible\n    {\n        [ProtoMember(1)]\n        public string Locked { get; set; }\n\n        [ProtoMember(2)]\n        public string Version { get; set; }\n\n        [ProtoMember(3)]\n        public string EditBy { get; set; }\n\n        [ProtoMember(4)]\n        public string EditTime { get; set; }\n    }\n```\n\nThat class is one of which is serialized\n\n```\n    [ProtoContract]\n    public class TextData : IData, INotifyPropertyChanged\n    {\n        private string _locked;\n\n        [ProtoMember(1)]\n        public string Locked { get; set; }\n\n        private string _version;\n        [ProtoMember(2)]\n        public string Version { get { return _version; } set { _version = value; OnPropertyChanged(); } }\n\n        private string _editBy;\n\n        [ProtoMember(3)]\n        public string EditBy\n        {\n            get { return _editBy; }\n            set\n            {\n                _editBy = value;\n                OnPropertyChanged(); \n            }\n        }\n\n        private string _editTime;\n        [ProtoMember(4)]\n        public string EditTime { get { return _editTime; } set { _editTime = value; OnPropertyChanged(); } }\n\n        private string _text;\n        [ProtoMember(5)]\n        public string Text\n        {\n            get { return _text; }\n            set { _text = value; OnPropertyChanged(); }\n        }\n\n        public string Id { get; set; }\n        public bool IsFullDataRecieved => true;\n\n        #region notify\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n        #endregion\n    }\n```\n\nWhat am I doing:\n1. I'm serializing TextData \n\n```\n        public T Deserialize(byte[] s)\n        {\n            using (var m = new MemoryStream(s))\n            {\n                return (T)Serializer.Deserialize(typeof(T), m);\n            }\n        }\n\n        public byte[] Serialize(T data)\n        {\n            using (var m = new MemoryStream())\n            {\n                Serializer.Serialize(m, data);\n                return m.ToArray();\n            }\n        }\n```\n1. Deserializing that data as DbInterfaceVersionData \n\n```\n            SqliteDbInterfaceVersionData d;\n            using (var m = new MemoryStream(data))\n            {\n                d = (SqliteDbInterfaceVersionData) Serializer.Deserialize(typeof (SqliteDbInterfaceVersionData), m);\n                d.EditBy = CurrentAuthor;\n                d.Version = CurrentVersion;\n                d.EditTime = DateTime.Now.ToString();\n                if (d.Locked == null)\n                    d.Locked = \"\";\n            }\n```\n1. Changing values in DbInterfaceVersionData \n2. Serializing that again and store that data somewhere\n\nAfter that I'm deserializing that stored data in TextData again. Text field deserialized without a problems... but other fields are null =c\n\nWhat can it be? Is it because Extensible\n. Here it go:\n\n``` C#\n    [ProtoContract]\n    public class SqliteDbInterfaceVersionData : Extensible\n    {\n        [ProtoMember(1)]\n        public string Locked { get; set; }\n\n        [ProtoMember(2)]\n        public string Version { get; set; }\n\n        [ProtoMember(3)]\n        public string EditBy { get; set; }\n\n        [ProtoMember(4)]\n        public string EditTime { get; set; }\n    }\n\n    public interface IData\n    {\n        //Weeell, let client be creating new data.\n        string Locked { get; }\n        string Version { get; }\n        string EditBy { get; }\n        string EditTime { get; }\n\n        string Id { get; set; }\n        bool IsFullDataRecieved { get; }\n    }\n    [ProtoContract]\n    public class Data : IData, INotifyPropertyChanged\n    {\n        private string _locked;\n\n        [ProtoMember(1)]\n        public string Locked { get; set; }\n\n        private string _version;\n        [ProtoMember(2)]\n        public string Version { get { return _version; } set { _version = value; OnPropertyChanged(); } }\n\n        private string _editBy;\n\n        [ProtoMember(3)]\n        public string EditBy\n        {\n            get { return _editBy; }\n            set\n            {\n                _editBy = value;\n                OnPropertyChanged(); \n            }\n        }\n\n        private string _editTime;\n        [ProtoMember(4)]\n        public string EditTime { get { return _editTime; } set { _editTime = value; OnPropertyChanged(); } }\n\n        public string Id { get; set; }\n        public bool IsFullDataRecieved => true;\n\n        #region notify\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n        #endregion\n    }\n    [ProtoContract]\n    public class TextData : Data, INotifyPropertyChanged\n    {\n        private string _text;\n        [ProtoMember(5)]\n        public string Text\n        {\n            get { return _text; }\n            set { _text = value; OnPropertyChanged(); }\n        }\n    }\n...............................................\n            TextData td = new TextData();\n            TextData.Text = \"blahblah\";\n            byte[] ser;\n            using (var m = new MemoryStream())\n            {\n                Serializer.Serialize(m, dt);\n                ser = m.ToArray();\n            }\n\n            SqliteDbInterfaceVersionData d;\n            using (var m = new MemoryStream(ser))\n            {\n                d = (SqliteDbInterfaceVersionData) Serializer.Deserialize(typeof (SqliteDbInterfaceVersionData), m);\n                d.EditBy = CurrentAuthor;\n                d.Version = CurrentVersion;\n                d.EditTime = DateTime.Now.ToString();\n                if (d.Locked == null)\n                    d.Locked = \"\";\n            }\n            byte[] data;\n            using (var m = new MemoryStream())\n            {\n                Serializer.Serialize(m, d);\n                data = m.ToArray();\n            }\n```\n\nHere is everything OK. All data is serialized.\n![screenshot 877](https://cloud.githubusercontent.com/assets/4263405/17226317/8e683b02-5511-11e6-9035-366f239035a3.png)\n\nBut after deserialization\n\n```\n            TextData td;\n            using (var m = new MemoryStream(data))\n            {\n                td = (TextData)Serializer.Deserialize(typeof(TextData), m);\n            }\n```\n\nAll fields in td  except td.Text is nul!!1\n\nMaybe it because of parenting?\n\nThank you for the answer!\n. Is it because of parenting?\n. ",
    "shamork": "expecting the update of the nuget package\n. expecting the update of the nuget package\n. ",
    "petriashev": "Hello, this fix was at 27 jul, but latest package was uploaded at 8 jul.\nCan you upload new version of package?\n. Hello, this fix was at 27 jul, but latest package was uploaded at 8 jul.\nCan you upload new version of package?\n. ",
    "nielslbeck": "A new version of the package would be great! I hope @mgravell can help here :-). A new version of the package would be great! I hope @mgravell can help here :-). ",
    "schulz3000": "To tell the truth I have no reference for this syntax.\nI can only say that if I input a version number for it e.g. 3.5.0.0 build is not working.\nAlso I had a look into [project.json](https://github.com/JamesNK/Newtonsoft.Json/blob/master/Src/Newtonsoft.Json/project.json) file from Newtonsoft.Json. There are no version numbers given for all frameworkAssemblies references and looks like it build correct.\n. already fixed in pull request #175 but not merged or published right now\n. This is already fixed in #170 but no new nuget package was created since then.\n. Let it open and @mgravell maybe can give us some insights about his time plans about publishing a new version to nuget\n. duplicate to #194 . To tell the truth I have no reference for this syntax.\nI can only say that if I input a version number for it e.g. 3.5.0.0 build is not working.\nAlso I had a look into [project.json](https://github.com/JamesNK/Newtonsoft.Json/blob/master/Src/Newtonsoft.Json/project.json) file from Newtonsoft.Json. There are no version numbers given for all frameworkAssemblies references and looks like it build correct.\n. already fixed in pull request #175 but not merged or published right now\n. This is already fixed in #170 but no new nuget package was created since then.\n. Let it open and @mgravell maybe can give us some insights about his time plans about publishing a new version to nuget\n. duplicate to #194 . ",
    "daef": "same problem here :(\n\nhave you found a solution yet @zhenlinyang ?\n. @mexmer have you tried commit 66bf1217...?. @pantonis have you tried PR https://github.com/mgravell/protobuf-net/pull/200 from @Cardanis ?. same problem here :(\n\nhave you found a solution yet @zhenlinyang ?\n. @mexmer have you tried commit 66bf1217...?. @pantonis have you tried PR https://github.com/mgravell/protobuf-net/pull/200 from @Cardanis ?. ",
    "hey-hoho": "hi~ @mgravell ,thanks for your answer!But I cannot understand the first way absolutely,can you describe in detail, or give me some example?\n. I use EF6.0  with the .edmx file to generate all models\n. hi~ @mgravell ,I have found a way to add attribute for class and property.My model are generated by T4 ,so I can add the attribute in .tt file.But the other question is ,can I set a global config for all class rather than one by one ,because there are so many custom class in my application,or there is a way to (de)serialize class without attribute ?\n. hi~ @mgravell ,thanks for your answer!But I cannot understand the first way absolutely,can you describe in detail, or give me some example?\n. I use EF6.0  with the .edmx file to generate all models\n. hi~ @mgravell ,I have found a way to add attribute for class and property.My model are generated by T4 ,so I can add the attribute in .tt file.But the other question is ,can I set a global config for all class rather than one by one ,because there are so many custom class in my application,or there is a way to (de)serialize class without attribute ?\n. ",
    "teocomi": "Great, thanks\n. Great, thanks\n. ",
    "JobaDiniz": "It's not possible to use 2.1 version in VS2013: [stackoverflow](http://stackoverflow.com/questions/38654856/how-to-install-protobuf-net-on-visual-studio-2012-using-nuget)\n\n`'protobuf-net' already has a dependency defined for 'NETStandard.Library'.`\n. Couldn't find either.... It's not possible to use 2.1 version in VS2013: [stackoverflow](http://stackoverflow.com/questions/38654856/how-to-install-protobuf-net-on-visual-studio-2012-using-nuget)\n\n`'protobuf-net' already has a dependency defined for 'NETStandard.Library'.`\n. Couldn't find either.... ",
    "vinsrc": "Came looking to suggest the fix and good to see its already done  :+1:  .   Thanks for the fix. \r\n\r\nThis is not only a memory issue.  Its causing considerable performance loss also.   \r\n\r\nThe internal hash bucket keeps growing as the protoreader is being recycled and the same dictionary used.\r\nEventually,  the clear method starts slowing down as it has to set all the buckets and entries to nil values.\r\n\r\nIts a .Net Dictionary implementation issue but affecting the protoreader .\r\n\r\nSince the protoreader is defined ThreadStatic ,  it occurs only if the same thread is used for multiple serialization and de-serialization with unique strings.\r\n\r\nBelow is the sample code to reproduce the issue.\r\n\r\n          //Build some data.\r\n            List<byte[]> bytes = new List<byte[]>();\r\n            foreach (var item in Enumerable.Range(0, 100000))\r\n            {\r\n                var ms = new MemoryStream();\r\n                Serializer.Serialize<string>(ms, item.ToString());\r\n                bytes.Add(ms.ToArray());\r\n            }\r\n\r\n            // before the issue, try to deserialize it\r\n            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();\r\n            sw.Start();\r\n            foreach (var item in bytes) { var ret = Serializer.Deserialize<string>(new MemoryStream(item)); }\r\n            sw.Stop();\r\n            Console.WriteLine(\"Before:\" + sw.ElapsedMilliseconds + \" ms\");\r\n\r\n            // lets cause a lot of deserialization with unique strings\r\n            var stream = new MemoryStream();\r\n            IList<string> items = new List<string>();\r\n            Enumerable.Range(0, 40000).ToList().ForEach((item) => items.Add(item.ToString()));\r\n            Serializer.Serialize(stream, items);\r\n\r\n            // deserialize . This will result in the interner dictionary internal buckets to grow.\r\n           var test = Serializer.Deserialize<IList<string>>(new MemoryStream(stream.ToArray()));\r\n\r\n              // after this , every stringInterner.Clear(); call is slow.\r\n            // now we can see the delay\r\n            System.Diagnostics.Stopwatch sw2 = new System.Diagnostics.Stopwatch();\r\n            sw2.Start();\r\n            foreach (var item in bytes) { var ret = Serializer.Deserialize<string>(new MemoryStream(item)); }\r\n            sw2.Stop();\r\n            Console.WriteLine(\"After :\" + sw2.ElapsedMilliseconds +\" ms\");\r\n\r\n            Console.ReadKey();\r\n\r\n\r\nin my PC , the below results came out.  thats a significant performance loss\r\nBefore:262 ms\r\nAfter :4201 ms\r\n. Came looking to suggest the fix and good to see its already done  :+1:  .   Thanks for the fix. \r\n\r\nThis is not only a memory issue.  Its causing considerable performance loss also.   \r\n\r\nThe internal hash bucket keeps growing as the protoreader is being recycled and the same dictionary used.\r\nEventually,  the clear method starts slowing down as it has to set all the buckets and entries to nil values.\r\n\r\nIts a .Net Dictionary implementation issue but affecting the protoreader .\r\n\r\nSince the protoreader is defined ThreadStatic ,  it occurs only if the same thread is used for multiple serialization and de-serialization with unique strings.\r\n\r\nBelow is the sample code to reproduce the issue.\r\n\r\n          //Build some data.\r\n            List<byte[]> bytes = new List<byte[]>();\r\n            foreach (var item in Enumerable.Range(0, 100000))\r\n            {\r\n                var ms = new MemoryStream();\r\n                Serializer.Serialize<string>(ms, item.ToString());\r\n                bytes.Add(ms.ToArray());\r\n            }\r\n\r\n            // before the issue, try to deserialize it\r\n            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();\r\n            sw.Start();\r\n            foreach (var item in bytes) { var ret = Serializer.Deserialize<string>(new MemoryStream(item)); }\r\n            sw.Stop();\r\n            Console.WriteLine(\"Before:\" + sw.ElapsedMilliseconds + \" ms\");\r\n\r\n            // lets cause a lot of deserialization with unique strings\r\n            var stream = new MemoryStream();\r\n            IList<string> items = new List<string>();\r\n            Enumerable.Range(0, 40000).ToList().ForEach((item) => items.Add(item.ToString()));\r\n            Serializer.Serialize(stream, items);\r\n\r\n            // deserialize . This will result in the interner dictionary internal buckets to grow.\r\n           var test = Serializer.Deserialize<IList<string>>(new MemoryStream(stream.ToArray()));\r\n\r\n              // after this , every stringInterner.Clear(); call is slow.\r\n            // now we can see the delay\r\n            System.Diagnostics.Stopwatch sw2 = new System.Diagnostics.Stopwatch();\r\n            sw2.Start();\r\n            foreach (var item in bytes) { var ret = Serializer.Deserialize<string>(new MemoryStream(item)); }\r\n            sw2.Stop();\r\n            Console.WriteLine(\"After :\" + sw2.ElapsedMilliseconds +\" ms\");\r\n\r\n            Console.ReadKey();\r\n\r\n\r\nin my PC , the below results came out.  thats a significant performance loss\r\nBefore:262 ms\r\nAfter :4201 ms\r\n. ",
    "jgrandyxignite": "Thanks @mgravell -  just curious, is your coding involvement in protobuf-net on hold due to other commitments ?\n\nSo assuming I'm able to figure-out how the proto3 schema translates to protobuf-net object-model , potentially I could write my own generator to translate proto3 message-types to protobuf-net classes ? \n. Thanks @mgravell -  just curious, is your coding involvement in protobuf-net on hold due to other commitments ?\n\nSo assuming I'm able to figure-out how the proto3 schema translates to protobuf-net object-model , potentially I could write my own generator to translate proto3 message-types to protobuf-net classes ? \n. ",
    "GregEakin": "The code is applying the DataMembers to the properties, without the ability to write to the backing variable. To fix this, we can do either of these:\r\n1) Apply the DataMember to the backing variables (the contract will have lower case names):\r\n```C#\r\n[DataContract]\r\npublic class TestMessage\r\n{\r\n    [DataMember(Order = 1)]\r\n    private readonly int clientId;\r\n    public int ClientId\r\n    {\r\n        get { return clientId; }\r\n    }\r\n\r\n    [DataMember(Order = 2)]\r\n    private readonly string name;\r\n    public string Name\r\n    {\r\n        get { return name; }\r\n    }\r\n\r\n    public TestMessage()\r\n    {}\r\n\r\n    public TestMessage(int clientId, string name)\r\n    {\r\n        this.clientId = clientId;\r\n        this.name = name;\r\n    }\r\n}\r\n```\r\n\r\n2) Use Auto-Properties instead:\r\n```C#\r\n[DataContract]\r\npublic class TestMessage\r\n{\r\n    [DataMember(Order = 1)]\r\n    public int ClientId { get; private set; }\r\n\r\n    [DataMember(Order = 2)]\r\n    public string Name { get; private set; }\r\n\r\n    public TestMessage()\r\n    { }\r\n\r\n    public TestMessage(int clientId, string name)\r\n    {\r\n        ClientId = clientId;\r\n        Name = name;\r\n    }\r\n}\r\n```\r\n\r\nIn either case, we also need a default constructor.\r\n[DataMemberTests.zip](https://github.com/mgravell/protobuf-net/files/721324/DataMemberTests.zip)\r\n. Per @mgravell's help, we also need to set the default in the C# code, like this:\r\n```C#\r\n  [ProtoMember(2, Name = \"Type\"), DefaultValue(PhoneType.HOME)]\r\n  private PhoneType _type = PhoneType.HOME;\r\n```. If you look at the data written, when MvcUserId is default (-1), no information is written [correct].\r\n```C#\r\n[TestMethod]\r\npublic void UserWriteDefault()\r\n{\r\n    using (var stream = new MemoryStream())\r\n    {\r\n        var person = new MvcUser { Id = -1 };\r\n        Serializer.Serialize(stream, person);\r\n        CollectionAssert.AreEqual(new byte[] { }, stream.ToArray());\r\n    }\r\n}\r\n```\r\n\r\nBut the read-back doesn't change it from zero to the default [wrong].\r\n```C#\r\n[TestMethod]\r\npublic void UserReadDefault()\r\n{\r\n    using (var stream = new MemoryStream(new byte[] { }))\r\n    {\r\n        var person = Serializer.Deserialize<MvcUser>(stream);\r\n        Assert.AreEqual(-1, person.Id);\r\n    }\r\n}\r\n```\r\n\r\nThe schema looks good.\r\n```C#\r\n[TestMethod]\r\npublic void SchemaTest()\r\n{\r\n    var proto = Serializer.GetProto<MvcUser>();\r\n    var schema = \"package BufferTests;\\r\\n\\r\\n\" +\r\n        \"message MvcUser {\\r\\n\" +\r\n        \"   optional int32 Id = 1 [default = -1];\\r\\n\" +\r\n        \"}\\r\\n\";\r\n    Assert.AreEqual(schema, proto);\r\n}\r\n```\r\n\r\nThis also looks like issue #203.\r\n[DefaultTests.zip](https://github.com/mgravell/protobuf-net/files/721286/DefaultTests.zip)\r\n. Thank you. That fixes these tests, and the ones in #203 . The code is applying the DataMembers to the properties, without the ability to write to the backing variable. To fix this, we can do either of these:\r\n1) Apply the DataMember to the backing variables (the contract will have lower case names):\r\n```C#\r\n[DataContract]\r\npublic class TestMessage\r\n{\r\n    [DataMember(Order = 1)]\r\n    private readonly int clientId;\r\n    public int ClientId\r\n    {\r\n        get { return clientId; }\r\n    }\r\n\r\n    [DataMember(Order = 2)]\r\n    private readonly string name;\r\n    public string Name\r\n    {\r\n        get { return name; }\r\n    }\r\n\r\n    public TestMessage()\r\n    {}\r\n\r\n    public TestMessage(int clientId, string name)\r\n    {\r\n        this.clientId = clientId;\r\n        this.name = name;\r\n    }\r\n}\r\n```\r\n\r\n2) Use Auto-Properties instead:\r\n```C#\r\n[DataContract]\r\npublic class TestMessage\r\n{\r\n    [DataMember(Order = 1)]\r\n    public int ClientId { get; private set; }\r\n\r\n    [DataMember(Order = 2)]\r\n    public string Name { get; private set; }\r\n\r\n    public TestMessage()\r\n    { }\r\n\r\n    public TestMessage(int clientId, string name)\r\n    {\r\n        ClientId = clientId;\r\n        Name = name;\r\n    }\r\n}\r\n```\r\n\r\nIn either case, we also need a default constructor.\r\n[DataMemberTests.zip](https://github.com/mgravell/protobuf-net/files/721324/DataMemberTests.zip)\r\n. Per @mgravell's help, we also need to set the default in the C# code, like this:\r\n```C#\r\n  [ProtoMember(2, Name = \"Type\"), DefaultValue(PhoneType.HOME)]\r\n  private PhoneType _type = PhoneType.HOME;\r\n```. If you look at the data written, when MvcUserId is default (-1), no information is written [correct].\r\n```C#\r\n[TestMethod]\r\npublic void UserWriteDefault()\r\n{\r\n    using (var stream = new MemoryStream())\r\n    {\r\n        var person = new MvcUser { Id = -1 };\r\n        Serializer.Serialize(stream, person);\r\n        CollectionAssert.AreEqual(new byte[] { }, stream.ToArray());\r\n    }\r\n}\r\n```\r\n\r\nBut the read-back doesn't change it from zero to the default [wrong].\r\n```C#\r\n[TestMethod]\r\npublic void UserReadDefault()\r\n{\r\n    using (var stream = new MemoryStream(new byte[] { }))\r\n    {\r\n        var person = Serializer.Deserialize<MvcUser>(stream);\r\n        Assert.AreEqual(-1, person.Id);\r\n    }\r\n}\r\n```\r\n\r\nThe schema looks good.\r\n```C#\r\n[TestMethod]\r\npublic void SchemaTest()\r\n{\r\n    var proto = Serializer.GetProto<MvcUser>();\r\n    var schema = \"package BufferTests;\\r\\n\\r\\n\" +\r\n        \"message MvcUser {\\r\\n\" +\r\n        \"   optional int32 Id = 1 [default = -1];\\r\\n\" +\r\n        \"}\\r\\n\";\r\n    Assert.AreEqual(schema, proto);\r\n}\r\n```\r\n\r\nThis also looks like issue #203.\r\n[DefaultTests.zip](https://github.com/mgravell/protobuf-net/files/721286/DefaultTests.zip)\r\n. Thank you. That fixes these tests, and the ones in #203 . ",
    "Measurity": "An issue could be that the stream is being read at the wrong position. Besides that, it might not be done writing when you're calling the deserialize.\r\n\r\nInstead of:\r\n\r\n    var serverStream = new MemoryStream();\r\n    ProtoBuf.Serializer.Serialize(serverStream, responseMsg);\r\n    Console.WriteLine($\"responseMsg {responseMsg?.responseStr ?? \"failed\"}\\n\");\r\n\r\n    var response =ProtoBuf.Serializer.Deserialize<ResponseMessage>(serverStream);\r\n    Console.WriteLine($\"response {response?.responseStr ?? \"failed\"}\\n\");\r\n\r\nTry:\r\n\r\n    var serverStream = new MemoryStream();\r\n    ProtoBuf.Serializer.Serialize(serverStream, responseMsg);\r\n    Console.WriteLine($\"responseMsg {responseMsg?.responseStr ?? \"failed\"}\\n\");\r\n\r\n    serverStream.Flush();\r\n    serverStream.Position = 0;\r\n\r\n    var response =ProtoBuf.Serializer.Deserialize<ResponseMessage>(serverStream);\r\n    Console.WriteLine($\"response {response?.responseStr ?? \"failed\"}\\n\");. An issue could be that the stream is being read at the wrong position. Besides that, it might not be done writing when you're calling the deserialize.\r\n\r\nInstead of:\r\n\r\n    var serverStream = new MemoryStream();\r\n    ProtoBuf.Serializer.Serialize(serverStream, responseMsg);\r\n    Console.WriteLine($\"responseMsg {responseMsg?.responseStr ?? \"failed\"}\\n\");\r\n\r\n    var response =ProtoBuf.Serializer.Deserialize<ResponseMessage>(serverStream);\r\n    Console.WriteLine($\"response {response?.responseStr ?? \"failed\"}\\n\");\r\n\r\nTry:\r\n\r\n    var serverStream = new MemoryStream();\r\n    ProtoBuf.Serializer.Serialize(serverStream, responseMsg);\r\n    Console.WriteLine($\"responseMsg {responseMsg?.responseStr ?? \"failed\"}\\n\");\r\n\r\n    serverStream.Flush();\r\n    serverStream.Position = 0;\r\n\r\n    var response =ProtoBuf.Serializer.Deserialize<ResponseMessage>(serverStream);\r\n    Console.WriteLine($\"response {response?.responseStr ?? \"failed\"}\\n\");. ",
    "ScottAllSet": "I got the same error through xbuild. I fixed it by renaming project.lock.json to project.lock.json.1.\n. I got the same error through xbuild. I fixed it by renaming project.lock.json to project.lock.json.1.\n. ",
    "mexmer": "@sjones204g unfortunately that doesn't work for me. \r\n\r\ntried to build protobuf-net in VS 2015 and VS 2017, and same issue.. also when i change protobuf-net to different target framework (2,3.5,4.0 etc.) i get\r\n\r\n\r\n\"Your project.json doesn't have a runtimes section. You should add '\"runtimes\": { \"win\": { } }' to your project.json and then re-run NuGet restore.\tprotobuf-net\"\r\n. @daef that does fix issue with missing .NET refference as per OP, but not issue with \r\n\r\n> \"Your project.json doesn't have a runtimes section. You should add '\"runtimes\": { \"win\": { } }' to your project.json and then re-run NuGet restore.\tprotobuf-net\". @sjones204g unfortunately that doesn't work for me. \r\n\r\ntried to build protobuf-net in VS 2015 and VS 2017, and same issue.. also when i change protobuf-net to different target framework (2,3.5,4.0 etc.) i get\r\n\r\n\r\n\"Your project.json doesn't have a runtimes section. You should add '\"runtimes\": { \"win\": { } }' to your project.json and then re-run NuGet restore.\tprotobuf-net\"\r\n. @daef that does fix issue with missing .NET refference as per OP, but not issue with \r\n\r\n> \"Your project.json doesn't have a runtimes section. You should add '\"runtimes\": { \"win\": { } }' to your project.json and then re-run NuGet restore.\tprotobuf-net\". ",
    "Cardanis": "I have a PR right now that fixes this issue.  I added net30 to the Project.json which caused the same error as above (requiring runtimes in project.json).  Apparently the fix to that is adding <CopyNuGetImplementations>false</CopyNuGetImplementations> to the project, which made that error go away.  Though this works, I'm not sure if there will be a negative impact.\r\n\r\nOne last error to fix after this was language version.  Protobuf-net.csproj had the preferred language set to ISO-2, which doesn't include some of the newer C# language features that have been used in recent changes (nameof for example).  The suggested fix was setting the LangVersion to C#6, but I found just removing the tag altogether caused it to work fine.  I'm not sure if using ISO-2 is actually required, but if it is we need to revert usage of newer C# language features like nameof.\r\n\r\nMostly I'm curious as to how this \"build break\" got through.  There've been a lot of recent commits, and I'm assuming that building the project would be part of verification before doing a PR.  There must be some difference between the environment/build process of developers that's causing builds to succeed for some people and fail for others.  So for those of you who aren't seeing a build failure as described here, what environment/build process are you using?\r\n\r\nFor reference I'm running VS2015 on Windows 10, and trying to build protobuf-net.csproj under Debug/Release/CoreOnly (pretty much anything) and AnyCPU fails with the above errors.. Ya, it works fine for me as well, but that's because it's a completely different csproj file for a different platform.  All the other platform projects still rely on the core protobuf-net project which is broken (at least in my environment).  With just these few changes to the project files it will fix the project build for anyone trying to use it.  As far as I can tell the changes won't have any negative impact, though I'm not 100% sure about the CopyNuGetImplementations Property, as I haven't done much with NuGet projects (I do know it got the build to work however, and was a suggested fix to the error I was seeing).. I have a PR right now that fixes this issue.  I added net30 to the Project.json which caused the same error as above (requiring runtimes in project.json).  Apparently the fix to that is adding <CopyNuGetImplementations>false</CopyNuGetImplementations> to the project, which made that error go away.  Though this works, I'm not sure if there will be a negative impact.\r\n\r\nOne last error to fix after this was language version.  Protobuf-net.csproj had the preferred language set to ISO-2, which doesn't include some of the newer C# language features that have been used in recent changes (nameof for example).  The suggested fix was setting the LangVersion to C#6, but I found just removing the tag altogether caused it to work fine.  I'm not sure if using ISO-2 is actually required, but if it is we need to revert usage of newer C# language features like nameof.\r\n\r\nMostly I'm curious as to how this \"build break\" got through.  There've been a lot of recent commits, and I'm assuming that building the project would be part of verification before doing a PR.  There must be some difference between the environment/build process of developers that's causing builds to succeed for some people and fail for others.  So for those of you who aren't seeing a build failure as described here, what environment/build process are you using?\r\n\r\nFor reference I'm running VS2015 on Windows 10, and trying to build protobuf-net.csproj under Debug/Release/CoreOnly (pretty much anything) and AnyCPU fails with the above errors.. Ya, it works fine for me as well, but that's because it's a completely different csproj file for a different platform.  All the other platform projects still rely on the core protobuf-net project which is broken (at least in my environment).  With just these few changes to the project files it will fix the project build for anyone trying to use it.  As far as I can tell the changes won't have any negative impact, though I'm not 100% sure about the CopyNuGetImplementations Property, as I haven't done much with NuGet projects (I do know it got the build to work however, and was a suggested fix to the error I was seeing).. ",
    "mydishes": "@daef Same problem\r\nAnd Try revert  protobuf-net\\protobuf-net\\Meta\\MetaType.cs to the [Commits on Jul 7, 2016](https://github.com/mgravell/protobuf-net/blob/96fd6d2d737344007e1f37af789156414c0583a2/protobuf-net/Meta/MetaType.cs) would compiling success!. @daef Same problem\r\nAnd Try revert  protobuf-net\\protobuf-net\\Meta\\MetaType.cs to the [Commits on Jul 7, 2016](https://github.com/mgravell/protobuf-net/blob/96fd6d2d737344007e1f37af789156414c0583a2/protobuf-net/Meta/MetaType.cs) would compiling success!. ",
    "Scooletz": "Same problem. @mgravell any update on this? . Same problem. @mgravell any update on this? . ",
    "luoxiaodi": "me too. Error about \"$\"!. me too. HELP! SOS ! Unity(64bit) 5.4.0f3. me too. Error about \"$\"!. me too. HELP! SOS ! Unity(64bit) 5.4.0f3. ",
    "force78": "Hello. I'm having trouble building protobuf-net. I'm ultimately trying to get a protogen.exe that can parse proto3 syntax. When I build protobuf-net I'm getting an error :\r\nYour project.json doesn't have a runtimes section. You should add '\"runtimes\": { \"win\": { } }' to your project.json and then re-run NuGet restore.\t\t\t\r\nI've pulled the latest commit. . Hello. I'm having trouble building protobuf-net. I'm ultimately trying to get a protogen.exe that can parse proto3 syntax. When I build protobuf-net I'm getting an error :\r\nYour project.json doesn't have a runtimes section. You should add '\"runtimes\": { \"win\": { } }' to your project.json and then re-run NuGet restore.\t\t\t\r\nI've pulled the latest commit. . ",
    "kenoma": "Thanks for your reply. I'm not sure, should be that issue closed until new nuget package release, or not.\n. Thanks for your reply. I'm not sure, should be that issue closed until new nuget package release, or not.\n. ",
    "arman-arian": "@mgravell please publish new nuget package. protobuf doesn't work in WCF configurations.. @mgravell please publish new nuget package. protobuf doesn't work in WCF configurations.. ",
    "RomanBadiornyi": "We've got an issue that we need support of both, WCF (available in < 2.1.0) and interface surrogates (available from 2.1.0) @mgravell , can you please publish at least alpha version which will bring WCF support back to 2.1.0.\r\nThanks in advance.. We've got an issue that we need support of both, WCF (available in < 2.1.0) and interface surrogates (available from 2.1.0) @mgravell , can you please publish at least alpha version which will bring WCF support back to 2.1.0.\r\nThanks in advance.. ",
    "andradf": "Any updates on this? It's been 3+ months since last one.. Any updates on this? It's been 3+ months since last one.. ",
    "nrandell": "Why not?\r\nDid you try it. I just ran this and it produced a 32 byte file called person.bin\r\n\r\n    32 Nov 23 14:23 person.bin\r\n\r\n    00000000  08 b9 60 12 04 46 72 65  64 1a 15 0a 06 46 6c 61  |..`..Fred....Fla|\r\n    00000010  74 20 31 12 0b 54 68 65  20 4d 65 61 64 6f 77 73  |t 1..The Meadows|\r\n    00000020\r\n. Have a look at the protocol buffers specification (see https://developers.google.com/protocol-buffers/)\r\n\r\nThe bottom line is that protocol buffers are a generic encoding format that is cross platform. All values are represented in a more efficient wire protocol. For example using 4 bytes to store an integer value of 7 is 3 bytes too many. The same is true of storing strings. Most strings can be represented as one byte per character, but in order to make for efficient in memory processing, most modern languages store in 2 bytes per character (though there are efforts ongoing to make this more efficient for .net core). \r\n\r\nI suggest you read the specification in more detail, then run some examples and understand how this can be the case. Remember that the wire format can be different to the in memory format. . Why not?\r\nDid you try it. I just ran this and it produced a 32 byte file called person.bin\r\n\r\n    32 Nov 23 14:23 person.bin\r\n\r\n    00000000  08 b9 60 12 04 46 72 65  64 1a 15 0a 06 46 6c 61  |..`..Fred....Fla|\r\n    00000010  74 20 31 12 0b 54 68 65  20 4d 65 61 64 6f 77 73  |t 1..The Meadows|\r\n    00000020\r\n. Have a look at the protocol buffers specification (see https://developers.google.com/protocol-buffers/)\r\n\r\nThe bottom line is that protocol buffers are a generic encoding format that is cross platform. All values are represented in a more efficient wire protocol. For example using 4 bytes to store an integer value of 7 is 3 bytes too many. The same is true of storing strings. Most strings can be represented as one byte per character, but in order to make for efficient in memory processing, most modern languages store in 2 bytes per character (though there are efforts ongoing to make this more efficient for .net core). \r\n\r\nI suggest you read the specification in more detail, then run some examples and understand how this can be the case. Remember that the wire format can be different to the in memory format. . ",
    "SherifRefaat": "@nrandell .Net strings are of size 2 bytes characters, how they are written into 1 byte format?. @nrandell It is my fault not reading the specification first.\r\nThanks for your kindness and help.. @nrandell .Net strings are of size 2 bytes characters, how they are written into 1 byte format?. @nrandell It is my fault not reading the specification first.\r\nThanks for your kindness and help.. ",
    "pred4c3": "I've also struggled recently with building this project (using Proto 2013.sln file or the build scripts). Then I've tried using proto_dnx.sln which worked fine under VS2015.. I've also struggled recently with building this project (using Proto 2013.sln file or the build scripts). Then I've tried using proto_dnx.sln which worked fine under VS2015.. ",
    "KlausLinzner": "Yes - you can pretty much count on it that versioning scheme and strong naming raises more opinions than people - sorry I'm one of those.\r\n\r\nFrom what I've seen, with the 2.1 nuget package you changed it a bit already and IMO improved things a lot: When you ship a bugfix to version 2.1 and publish it as 2.1.692 it can be hot fixed without the need of recompile or assembly redirects.\r\nOn the other hand - when you implement new features and make bugfixes you'd currently update the version to 2.2; This update would require a recompile or assembly redirects. \r\n\r\nYou are completely right that assembly redirects are not that much of an issue any more in (rather high volatile) nuget environments. But when shipping applications to industrial sites the required support timeframe can range to many years - and the easier and less error prone update and hotfix scenarios are the better.\r\n\r\nExample:\r\nI ship library AwesomeLib in version 3.3 that requires protobuf-net in version 2.1. \r\nThis libray is used by AwesomeService that uses protobuf-net itself as well;\r\nBoth are shipped to Customer site X and go to production.\r\n\r\nA year goes by, AwesomeLib is already at version 3.5 and upgraded to protobuf-net in version 2.2. \r\nNow a bug report comes in from site X - a bug that was already fixed in 3.5;\r\nInstead of being able to apply the hotfix (stop the service, copy the AwesomeLib and its dependencies, start the service) assembly redirects need to be made as well. \r\nAn additional, manual step that is error prone and can induce further bugs, but that doesn't provide any benefits (or at least: none that I'm aware of).\r\n\r\nOf course - those are just my problems, induced by a not that common usage scenario. Nevertheless - I'd really appreciate if you could think about it and maybe reconsider.\r\n\r\nBest regards. You're correct - if I replace AwesomeLib and its dependencies, AwesomeLib doesn't require the assembly redirect - but the the hosting AwesomeService would require the redirect for protobuf (as it's referencing protobuf directly as well).\r\n\r\nA less likely error scenario is that there's a bug in protobuf-net that can be hotfixed; in that case both AwesomeLib and AwesomeService require the redirect.\r\n. Yes - you can pretty much count on it that versioning scheme and strong naming raises more opinions than people - sorry I'm one of those.\r\n\r\nFrom what I've seen, with the 2.1 nuget package you changed it a bit already and IMO improved things a lot: When you ship a bugfix to version 2.1 and publish it as 2.1.692 it can be hot fixed without the need of recompile or assembly redirects.\r\nOn the other hand - when you implement new features and make bugfixes you'd currently update the version to 2.2; This update would require a recompile or assembly redirects. \r\n\r\nYou are completely right that assembly redirects are not that much of an issue any more in (rather high volatile) nuget environments. But when shipping applications to industrial sites the required support timeframe can range to many years - and the easier and less error prone update and hotfix scenarios are the better.\r\n\r\nExample:\r\nI ship library AwesomeLib in version 3.3 that requires protobuf-net in version 2.1. \r\nThis libray is used by AwesomeService that uses protobuf-net itself as well;\r\nBoth are shipped to Customer site X and go to production.\r\n\r\nA year goes by, AwesomeLib is already at version 3.5 and upgraded to protobuf-net in version 2.2. \r\nNow a bug report comes in from site X - a bug that was already fixed in 3.5;\r\nInstead of being able to apply the hotfix (stop the service, copy the AwesomeLib and its dependencies, start the service) assembly redirects need to be made as well. \r\nAn additional, manual step that is error prone and can induce further bugs, but that doesn't provide any benefits (or at least: none that I'm aware of).\r\n\r\nOf course - those are just my problems, induced by a not that common usage scenario. Nevertheless - I'd really appreciate if you could think about it and maybe reconsider.\r\n\r\nBest regards. You're correct - if I replace AwesomeLib and its dependencies, AwesomeLib doesn't require the assembly redirect - but the the hosting AwesomeService would require the redirect for protobuf (as it's referencing protobuf directly as well).\r\n\r\nA less likely error scenario is that there's a bug in protobuf-net that can be hotfixed; in that case both AwesomeLib and AwesomeService require the redirect.\r\n. ",
    "maritaria": "If you copy over AwesomeLib v3.5 and its dependencies (including protobuf-net v2.2) then why would you still need to use redirects? Wouldn't you only need those if you can only deploy the new AwesomeLib v3.5 without its dependencies?. If you copy over AwesomeLib v3.5 and its dependencies (including protobuf-net v2.2) then why would you still need to use redirects? Wouldn't you only need those if you can only deploy the new AwesomeLib v3.5 without its dependencies?. ",
    "SidneyWells": "Thanks Marc, you're spot on.  One of my classes is referenced by a couple of others in the model.  I've set AsReference and AsReferenceDefault to true in what I think are the appropriate places and the file size is now slightly less than the BF equivalents:\r\n\r\nFile 1: BF = 1371 kB, protobuf = 1285 kB\r\nFile 2: BF = 12103 kB, protobuf = 11795 kB\r\n\r\nIs this nearer to what you'd expect?\r\n\r\nIn simplified terms, my model consists of a Workspace object, which contains a collection of Recordings, and each Recording contains a collection of Waveforms.  Each Waveform contains a reference to the Recording it belongs to.  This is the only place in the model where there are circular references.  Each of these three classes also contain a few primitives (or arrays of primitives) and a collection of Property objects.\r\n\r\nThe .proto file is pasted below.  Can you suggest any further optimisations?\r\n\r\n--\r\n\r\nimport \"bcl.proto\"; // schema for protobuf-net's handling of core .NET types\r\n\r\nmessage AirblastWaveform {\r\n   repeated int32 _amplitudeSigns = 1;\r\n}\r\nmessage BooleanProperty {\r\n   optional bool _value = 1 [default = false];\r\n}\r\nmessage DateTimeProperty {\r\n   optional bcl.DateTime _value = 1;\r\n}\r\nmessage DoubleProperty {\r\n   optional double _value = 1 [default = 0];\r\n}\r\nmessage DynamicStrain {\r\n   repeated double Ex = 1 [packed=true];\r\n   repeated double Ey = 2 [packed=true];\r\n   repeated double Ez = 3 [packed=true];\r\n   repeated double Exy = 4 [packed=true];\r\n   repeated double Eyz = 5 [packed=true];\r\n   repeated double Exz = 6 [packed=true];\r\n}\r\nmessage IntegerProperty {\r\n   optional int32 _value = 1 [default = 0];\r\n}\r\nmessage LongProperty {\r\n   optional int64 _value = 1 [default = 0];\r\n}\r\nmessage OID {\r\n   optional string Name = 1;\r\n   optional bcl_Guid Guid = 2;\r\n}\r\nmessage Object {\r\n}\r\nmessage ObjectProperty {\r\n   optional bcl.NetObjectProxy _value = 1;\r\n}\r\nmessage PhysicalQuantity {\r\n   optional PhysicalQuantityType _type = 1 [default = Dimensionless];\r\n   optional PhysicalUnitsType _siUnitsType = 2 [default = Dimensionless];\r\n}\r\nenum PhysicalQuantityType {\r\n   Dimensionless = 0;\r\n   Acceleration = 1;\r\n   Velocity = 2;\r\n   Displacement = 3;\r\n   Temperature = 4;\r\n   Voltage = 5;\r\n   Pressure = 6;\r\n   Time = 7;\r\n   Frequency = 8;\r\n   AccelerometerSensitivity = 9;\r\n   MicrophoneSensitivity = 10;\r\n   Mass = 11;\r\n   GeophoneSensitivity = 12;\r\n}\r\nmessage PhysicalUnits {\r\n   optional PhysicalUnitsType _type = 1 [default = Dimensionless];\r\n   optional PhysicalQuantity _quantity = 2;\r\n   optional string _symbol = 3;\r\n   optional string _name = 4;\r\n}\r\nenum PhysicalUnitsType {\r\n   Dimensionless = 0;\r\n   MetresPerSecondSquared = 1;\r\n   MultipleOfG = 2;\r\n   MmPerSecondSquared = 3;\r\n   MetresPerSecond = 4;\r\n   MmPerSecond = 5;\r\n   Metres = 6;\r\n   Millimetres = 7;\r\n   Pascals = 8;\r\n   Atmospheres = 9;\r\n   dBL = 10;\r\n   Seconds = 11;\r\n   Milliseconds = 12;\r\n   Microseconds = 13;\r\n   Volts = 14;\r\n   Celcius = 15;\r\n   Kelvin = 16;\r\n   Bits = 17;\r\n   Samples = 18;\r\n   Hertz = 19;\r\n   InchesPerSecondSquared = 20;\r\n   InchesPerSecond = 21;\r\n   VoltsPerMetrePerSecondSquared = 22;\r\n   VoltsPerG = 23;\r\n   VoltsPerPascal = 24;\r\n   MillivoltsPerPascal = 25;\r\n   Inches = 26;\r\n   Hours = 27;\r\n   Millibars = 28;\r\n   VoltsPerCmPerSecondSquared = 29;\r\n   CmPerSecondSquared = 30;\r\n   PoundsPerSquareInch = 31;\r\n   Kilograms = 32;\r\n   Pounds = 33;\r\n   VoltsPerMetrePerSecond = 34;\r\n   VoltsPerMmPerSecond = 35;\r\n   VoltsPerCmPerSecond = 36;\r\n   CmPerSecond = 37;\r\n}\r\nmessage PrincipalStrain {\r\n   repeated double E1 = 1 [packed=true];\r\n   repeated double E2 = 2 [packed=true];\r\n   repeated double E3 = 3 [packed=true];\r\n}\r\nmessage Property {\r\n   optional PropertyType _type = 1 [default = FilePath];\r\n   optional PhysicalUnits _units = 2;\r\n   // the following represent sub-types; at most 1 should have a value\r\n   optional ObjectProperty ObjectProperty = 100;\r\n   optional IntegerProperty IntegerProperty = 101;\r\n   optional LongProperty LongProperty = 102;\r\n   optional DoubleProperty DoubleProperty = 103;\r\n   optional StringProperty StringProperty = 104;\r\n   optional DateTimeProperty DateTimeProperty = 105;\r\n   optional BooleanProperty BooleanProperty = 106;\r\n}\r\nenum PropertyType {\r\n   FilePath = 0;\r\n   NumberOfChannels = 1;\r\n   Description = 2;\r\n   TriggerMethod = 3;\r\n   ConfigurationFile = 4;\r\n   Timestamp = 5;\r\n   BatteryVoltage = 6;\r\n   Temperature = 7;\r\n   TriggerSource = 8;\r\n   MonitorID = 9;\r\n   CalibrationDate = 10;\r\n   ChannelID = 11;\r\n   ChannelNumber = 12;\r\n   CalibrationValue = 13;\r\n   Units = 14;\r\n   OriginalUnits = 15;\r\n   SensorRange = 16;\r\n   Resolution = 17;\r\n   WaveformLength = 18;\r\n   WaveformDuration = 19;\r\n   SampleTime = 20;\r\n   SampleRate = 21;\r\n   PretriggerLength = 22;\r\n   PretriggerDuration = 23;\r\n   TriggerLevel = 24;\r\n   MaxAmplitude = 25;\r\n   MinAmplitude = 26;\r\n   PeakParticleAcceleration = 27;\r\n   PeakParticleVelocity = 28;\r\n   PeakPressure = 29;\r\n   Location = 30;\r\n   Comments = 31;\r\n   Coordinates = 32;\r\n   AccelerometerSensitivity = 33;\r\n   MicrophoneSensitivity = 34;\r\n   PeakParticleDisplacement = 35;\r\n   LocalTimeOffset = 36;\r\n   AirblastTriggerLevel = 37;\r\n   Null = 38;\r\n   RelativeEnergy = 39;\r\n   DigitisingConstant = 40;\r\n   FirmwareVersion = 41;\r\n   ShotNumber = 42;\r\n   ZeroCrossingFrequency = 43;\r\n   MonitoringPoint = 44;\r\n   BlastDesign = 45;\r\n   LocalCoordinates = 46;\r\n   Initiation = 47;\r\n   ChargeWeight = 48;\r\n   FiringDelay = 49;\r\n   ShowFiringData = 50;\r\n   FiringTimeOffset = 51;\r\n   FiringTimeScale = 52;\r\n   GeophoneSensitivity = 53;\r\n}\r\nmessage Recording {\r\n   repeated Property _originalProperties = 1;\r\n   optional double _originalInitialTimeOffset = 2 [default = 0];\r\n   optional double _initialTimeOffset = 3 [default = 0];\r\n   optional double _sampleTimeInSeconds = 4 [default = 0];\r\n   repeated Waveform _waveforms = 5;\r\n   repeated Property _properties = 6;\r\n}\r\nmessage StandardError {\r\n   repeated double Sx = 1 [packed=true];\r\n   repeated double Sy = 2 [packed=true];\r\n   repeated double Sz = 3 [packed=true];\r\n   repeated double Sxy = 4 [packed=true];\r\n   repeated double Syz = 5 [packed=true];\r\n   repeated double Sxz = 6 [packed=true];\r\n}\r\nmessage StrainCalculationResult {\r\n   optional DynamicStrain DynamicStrain = 1;\r\n   optional PrincipalStrain PrincipalStrain = 2;\r\n   optional StrainRotation Rotation = 3;\r\n   optional StandardError StandardError = 4;\r\n   repeated double SSR = 5 [packed=true];\r\n   repeated double Q = 6 [packed=true];\r\n   optional bcl.DateTime StartTime = 7;\r\n   optional StrainCalculationType CalculationType = 8 [default = TwoD];\r\n   repeated OID MonitorPoints = 9;\r\n   optional OID ReferencePoint = 10;\r\n   optional bool ArePrerequisitesMet = 11 [default = false];\r\n}\r\nenum StrainCalculationType {\r\n   TwoD = 0;\r\n   ThreeD = 1;\r\n}\r\nmessage StrainRotation {\r\n   repeated double Wx = 1 [packed=true];\r\n   repeated double Wy = 2 [packed=true];\r\n   repeated double Wz = 3 [packed=true];\r\n}\r\nmessage StringProperty {\r\n   optional string _value = 1;\r\n}\r\nenum TimeAxisStyle {\r\n   Relative = 0;\r\n   Absolute = 1;\r\n}\r\nmessage VectorSumWaveform {\r\n}\r\nmessage VibrationWaveform {\r\n   optional bool _hasBeenRotated = 1 [default = false];\r\n}\r\nmessage Waveform {\r\n   optional WaveformType _type = 1 [default = Radial];\r\n   optional bcl.NetObjectProxy _recording = 2; // reference-tracked Recording\r\n   optional string _name = 3;\r\n   repeated Property _properties = 4;\r\n   repeated double _amplitude = 5 [packed=true];\r\n   repeated double _originalAmplitude = 6 [packed=true];\r\n   optional bool _isAlignable = 7 [default = false];\r\n   optional bool _hasBeenFiltered = 8 [default = false];\r\n   optional bool _hasLengthChanged = 9 [default = false];\r\n   // the following represent sub-types; at most 1 should have a value\r\n   optional AirblastWaveform AirblastWaveform = 100;\r\n   optional VectorSumWaveform VectorSumWaveform = 101;\r\n   optional VibrationWaveform VibrationWaveform = 102;\r\n}\r\nenum WaveformType {\r\n   Radial = 0;\r\n   Transverse = 1;\r\n   Vertical = 2;\r\n   VectorSum = 3;\r\n   Airblast = 4;\r\n}\r\nmessage Workspace {\r\n   optional int32 _index = 1 [default = 0];\r\n   repeated bcl.NetObjectProxy _recordings = 2; // reference-tracked Recording\r\n   repeated Property _properties = 3;\r\n   optional bool _neverSaved = 4 [default = false];\r\n   optional TimeAxisStyle _xAxisStyle = 5 [default = Relative];\r\n   optional StrainCalculationResult _strainCalcResult = 6;\r\n}\r\n. Thanks Marc, I'm happy with things now.  I'll use compression to reduce file size further.. Thanks Marc, you're spot on.  One of my classes is referenced by a couple of others in the model.  I've set AsReference and AsReferenceDefault to true in what I think are the appropriate places and the file size is now slightly less than the BF equivalents:\r\n\r\nFile 1: BF = 1371 kB, protobuf = 1285 kB\r\nFile 2: BF = 12103 kB, protobuf = 11795 kB\r\n\r\nIs this nearer to what you'd expect?\r\n\r\nIn simplified terms, my model consists of a Workspace object, which contains a collection of Recordings, and each Recording contains a collection of Waveforms.  Each Waveform contains a reference to the Recording it belongs to.  This is the only place in the model where there are circular references.  Each of these three classes also contain a few primitives (or arrays of primitives) and a collection of Property objects.\r\n\r\nThe .proto file is pasted below.  Can you suggest any further optimisations?\r\n\r\n--\r\n\r\nimport \"bcl.proto\"; // schema for protobuf-net's handling of core .NET types\r\n\r\nmessage AirblastWaveform {\r\n   repeated int32 _amplitudeSigns = 1;\r\n}\r\nmessage BooleanProperty {\r\n   optional bool _value = 1 [default = false];\r\n}\r\nmessage DateTimeProperty {\r\n   optional bcl.DateTime _value = 1;\r\n}\r\nmessage DoubleProperty {\r\n   optional double _value = 1 [default = 0];\r\n}\r\nmessage DynamicStrain {\r\n   repeated double Ex = 1 [packed=true];\r\n   repeated double Ey = 2 [packed=true];\r\n   repeated double Ez = 3 [packed=true];\r\n   repeated double Exy = 4 [packed=true];\r\n   repeated double Eyz = 5 [packed=true];\r\n   repeated double Exz = 6 [packed=true];\r\n}\r\nmessage IntegerProperty {\r\n   optional int32 _value = 1 [default = 0];\r\n}\r\nmessage LongProperty {\r\n   optional int64 _value = 1 [default = 0];\r\n}\r\nmessage OID {\r\n   optional string Name = 1;\r\n   optional bcl_Guid Guid = 2;\r\n}\r\nmessage Object {\r\n}\r\nmessage ObjectProperty {\r\n   optional bcl.NetObjectProxy _value = 1;\r\n}\r\nmessage PhysicalQuantity {\r\n   optional PhysicalQuantityType _type = 1 [default = Dimensionless];\r\n   optional PhysicalUnitsType _siUnitsType = 2 [default = Dimensionless];\r\n}\r\nenum PhysicalQuantityType {\r\n   Dimensionless = 0;\r\n   Acceleration = 1;\r\n   Velocity = 2;\r\n   Displacement = 3;\r\n   Temperature = 4;\r\n   Voltage = 5;\r\n   Pressure = 6;\r\n   Time = 7;\r\n   Frequency = 8;\r\n   AccelerometerSensitivity = 9;\r\n   MicrophoneSensitivity = 10;\r\n   Mass = 11;\r\n   GeophoneSensitivity = 12;\r\n}\r\nmessage PhysicalUnits {\r\n   optional PhysicalUnitsType _type = 1 [default = Dimensionless];\r\n   optional PhysicalQuantity _quantity = 2;\r\n   optional string _symbol = 3;\r\n   optional string _name = 4;\r\n}\r\nenum PhysicalUnitsType {\r\n   Dimensionless = 0;\r\n   MetresPerSecondSquared = 1;\r\n   MultipleOfG = 2;\r\n   MmPerSecondSquared = 3;\r\n   MetresPerSecond = 4;\r\n   MmPerSecond = 5;\r\n   Metres = 6;\r\n   Millimetres = 7;\r\n   Pascals = 8;\r\n   Atmospheres = 9;\r\n   dBL = 10;\r\n   Seconds = 11;\r\n   Milliseconds = 12;\r\n   Microseconds = 13;\r\n   Volts = 14;\r\n   Celcius = 15;\r\n   Kelvin = 16;\r\n   Bits = 17;\r\n   Samples = 18;\r\n   Hertz = 19;\r\n   InchesPerSecondSquared = 20;\r\n   InchesPerSecond = 21;\r\n   VoltsPerMetrePerSecondSquared = 22;\r\n   VoltsPerG = 23;\r\n   VoltsPerPascal = 24;\r\n   MillivoltsPerPascal = 25;\r\n   Inches = 26;\r\n   Hours = 27;\r\n   Millibars = 28;\r\n   VoltsPerCmPerSecondSquared = 29;\r\n   CmPerSecondSquared = 30;\r\n   PoundsPerSquareInch = 31;\r\n   Kilograms = 32;\r\n   Pounds = 33;\r\n   VoltsPerMetrePerSecond = 34;\r\n   VoltsPerMmPerSecond = 35;\r\n   VoltsPerCmPerSecond = 36;\r\n   CmPerSecond = 37;\r\n}\r\nmessage PrincipalStrain {\r\n   repeated double E1 = 1 [packed=true];\r\n   repeated double E2 = 2 [packed=true];\r\n   repeated double E3 = 3 [packed=true];\r\n}\r\nmessage Property {\r\n   optional PropertyType _type = 1 [default = FilePath];\r\n   optional PhysicalUnits _units = 2;\r\n   // the following represent sub-types; at most 1 should have a value\r\n   optional ObjectProperty ObjectProperty = 100;\r\n   optional IntegerProperty IntegerProperty = 101;\r\n   optional LongProperty LongProperty = 102;\r\n   optional DoubleProperty DoubleProperty = 103;\r\n   optional StringProperty StringProperty = 104;\r\n   optional DateTimeProperty DateTimeProperty = 105;\r\n   optional BooleanProperty BooleanProperty = 106;\r\n}\r\nenum PropertyType {\r\n   FilePath = 0;\r\n   NumberOfChannels = 1;\r\n   Description = 2;\r\n   TriggerMethod = 3;\r\n   ConfigurationFile = 4;\r\n   Timestamp = 5;\r\n   BatteryVoltage = 6;\r\n   Temperature = 7;\r\n   TriggerSource = 8;\r\n   MonitorID = 9;\r\n   CalibrationDate = 10;\r\n   ChannelID = 11;\r\n   ChannelNumber = 12;\r\n   CalibrationValue = 13;\r\n   Units = 14;\r\n   OriginalUnits = 15;\r\n   SensorRange = 16;\r\n   Resolution = 17;\r\n   WaveformLength = 18;\r\n   WaveformDuration = 19;\r\n   SampleTime = 20;\r\n   SampleRate = 21;\r\n   PretriggerLength = 22;\r\n   PretriggerDuration = 23;\r\n   TriggerLevel = 24;\r\n   MaxAmplitude = 25;\r\n   MinAmplitude = 26;\r\n   PeakParticleAcceleration = 27;\r\n   PeakParticleVelocity = 28;\r\n   PeakPressure = 29;\r\n   Location = 30;\r\n   Comments = 31;\r\n   Coordinates = 32;\r\n   AccelerometerSensitivity = 33;\r\n   MicrophoneSensitivity = 34;\r\n   PeakParticleDisplacement = 35;\r\n   LocalTimeOffset = 36;\r\n   AirblastTriggerLevel = 37;\r\n   Null = 38;\r\n   RelativeEnergy = 39;\r\n   DigitisingConstant = 40;\r\n   FirmwareVersion = 41;\r\n   ShotNumber = 42;\r\n   ZeroCrossingFrequency = 43;\r\n   MonitoringPoint = 44;\r\n   BlastDesign = 45;\r\n   LocalCoordinates = 46;\r\n   Initiation = 47;\r\n   ChargeWeight = 48;\r\n   FiringDelay = 49;\r\n   ShowFiringData = 50;\r\n   FiringTimeOffset = 51;\r\n   FiringTimeScale = 52;\r\n   GeophoneSensitivity = 53;\r\n}\r\nmessage Recording {\r\n   repeated Property _originalProperties = 1;\r\n   optional double _originalInitialTimeOffset = 2 [default = 0];\r\n   optional double _initialTimeOffset = 3 [default = 0];\r\n   optional double _sampleTimeInSeconds = 4 [default = 0];\r\n   repeated Waveform _waveforms = 5;\r\n   repeated Property _properties = 6;\r\n}\r\nmessage StandardError {\r\n   repeated double Sx = 1 [packed=true];\r\n   repeated double Sy = 2 [packed=true];\r\n   repeated double Sz = 3 [packed=true];\r\n   repeated double Sxy = 4 [packed=true];\r\n   repeated double Syz = 5 [packed=true];\r\n   repeated double Sxz = 6 [packed=true];\r\n}\r\nmessage StrainCalculationResult {\r\n   optional DynamicStrain DynamicStrain = 1;\r\n   optional PrincipalStrain PrincipalStrain = 2;\r\n   optional StrainRotation Rotation = 3;\r\n   optional StandardError StandardError = 4;\r\n   repeated double SSR = 5 [packed=true];\r\n   repeated double Q = 6 [packed=true];\r\n   optional bcl.DateTime StartTime = 7;\r\n   optional StrainCalculationType CalculationType = 8 [default = TwoD];\r\n   repeated OID MonitorPoints = 9;\r\n   optional OID ReferencePoint = 10;\r\n   optional bool ArePrerequisitesMet = 11 [default = false];\r\n}\r\nenum StrainCalculationType {\r\n   TwoD = 0;\r\n   ThreeD = 1;\r\n}\r\nmessage StrainRotation {\r\n   repeated double Wx = 1 [packed=true];\r\n   repeated double Wy = 2 [packed=true];\r\n   repeated double Wz = 3 [packed=true];\r\n}\r\nmessage StringProperty {\r\n   optional string _value = 1;\r\n}\r\nenum TimeAxisStyle {\r\n   Relative = 0;\r\n   Absolute = 1;\r\n}\r\nmessage VectorSumWaveform {\r\n}\r\nmessage VibrationWaveform {\r\n   optional bool _hasBeenRotated = 1 [default = false];\r\n}\r\nmessage Waveform {\r\n   optional WaveformType _type = 1 [default = Radial];\r\n   optional bcl.NetObjectProxy _recording = 2; // reference-tracked Recording\r\n   optional string _name = 3;\r\n   repeated Property _properties = 4;\r\n   repeated double _amplitude = 5 [packed=true];\r\n   repeated double _originalAmplitude = 6 [packed=true];\r\n   optional bool _isAlignable = 7 [default = false];\r\n   optional bool _hasBeenFiltered = 8 [default = false];\r\n   optional bool _hasLengthChanged = 9 [default = false];\r\n   // the following represent sub-types; at most 1 should have a value\r\n   optional AirblastWaveform AirblastWaveform = 100;\r\n   optional VectorSumWaveform VectorSumWaveform = 101;\r\n   optional VibrationWaveform VibrationWaveform = 102;\r\n}\r\nenum WaveformType {\r\n   Radial = 0;\r\n   Transverse = 1;\r\n   Vertical = 2;\r\n   VectorSum = 3;\r\n   Airblast = 4;\r\n}\r\nmessage Workspace {\r\n   optional int32 _index = 1 [default = 0];\r\n   repeated bcl.NetObjectProxy _recordings = 2; // reference-tracked Recording\r\n   repeated Property _properties = 3;\r\n   optional bool _neverSaved = 4 [default = false];\r\n   optional TimeAxisStyle _xAxisStyle = 5 [default = Relative];\r\n   optional StrainCalculationResult _strainCalcResult = 6;\r\n}\r\n. Thanks Marc, I'm happy with things now.  I'll use compression to reduce file size further.. ",
    "rolandh": "Can you give an example of how to tell it what types to attempt to interpret the interface as?. Firstly please forgive my ignorance, I am still learning how your typemodel is built.\r\n\r\n_Firstly, we can't just serialize it as a Class1 - it would need to be wrapped appropriately,_\r\n\r\nCan you explain why that is the case for an interface but not the case for a class that extends a base class?\r\n\r\n_Secondly, it is very hard to deal with interfaces as the root object, since when using GetType() you lose the declared type and only have the concrete type._\r\n\r\nIsn't this a good thing? You simply serialise it as a the concrete type which in my example is what I would like it to do.\r\n\r\n_This would potentially make it serialize differently per context, which is very awkward_\r\n\r\nWell yes, because its an interface it would serialise as whatever the underlying object is. Wouldn't that be what most people expect?\r\n\r\nCurrently no one serialises interfaces (at least I doubt many people do) so would this not be adding additional functionality?\r\n\r\nI might explore the source code myself to see if I can understand why you are saying it is more difficult that I seem to currently believe. Appreciate the quick response.\r\n. Would a simpler method to effectively ignore the fact it is an interface and effectively serialise it as if it was a concrete class?\r\n\r\nThen when it comes to deserialising the data and it sees a Bar but it expects an IFoo could it not simply perform a check to see if Bar IS an IFoo and cast it back?\r\n\r\nEg during serialisation if the serialiser encounters an interface it simply casts it to its actual type.\r\n\r\nThen during deserialization if it comes across an object that it expects to be an interface, it first checks if that object implements that interface and if it does casts it back ?\r\n\r\nThis would probably break any existing interface behaviour however I believe not many people are currently serialising interfaces due to the difficulty in doing so.. After stepping through the code I can see where my misunderstanding comes from. It creates a model based on reflecting the code, not based upon the actual in memory object.\r\n\r\nWhat I was hoping to do is dynamically create the model based upon what the object in memories type is. Eg when it builds the model it takes the current in memory state of the object and calls GetType on it then.\r\n\r\nIs there any functionality in the protobuf library to obtain the current in memory type of an object during the runtime model creation? I am not talking by creating the model in code at runtime, but by the protobuf library doing this automatically for you.\r\n\r\nI'm not sure if you currently support serialising dynamic types. However I imagine you would do it the same way I am proposing, treat the interface as \"dynamic\" with its type unknown until runtime.. Then I don't understand the problem.\r\n\r\nGetType would return Class1 in my first example. So it wouldn't even realise it was an interface, hence it should serialise without issue. However it seems to currently return IClass not Class1, why is this?\r\n\r\nWhen deserialising and it gets Class1 but expects IClass, could it not just check that Class1 is an IClass and cast it?\r\n\r\n> No. The problem is that the serialization of a Foo does not include anything that says \"I'm a Foo\".\r\n\r\nvar type = Foo.GetType()\r\ntype should = Foo, not IFoo\r\n. I'll give an example of why I thought it was simple.\r\n\r\nIf I make a base class with nothing in it, then make all my interface implementations inherit from that base class, then set the type to the base class instead of the interface the existing protobuf code works and will serialise and deserialise my \"interface\".\r\n\r\nThe above is ugly though, I'd rather just serialise my interface directly.\r\n. Thank you for the explanation. It makes a lot more sense after you detail the problems.\r\n\r\nIf we simply said you cannot serialise objects where the logical root is an interface I believe that would remove a lot of problems. I can't imagine many people would attempt this either so it is probably acceptable.\r\n\r\nI would also suggest that you simply cannot put [ProtoContact] on an interface, eg you can only serialise concrete classes. I would argue to attempt to serialise an actual interface or use an interface as the root object are poor design choices and it would be reasonable to exclude them.\r\n\r\nSo my suggestion would be to only support the following use cases of interfaces. From what I've read on SO and the issues register these are the only asked for use cases and in my head are the only ones that make design sense to actually implement. \r\n\r\n```\r\ninterface IFoo {...}\r\n\r\n[ProtoContract]\r\nclass SomeType : IFoo { ... }\r\n\r\nOr\r\n\r\n[ProtoContract]\r\nclass SomeClass {\r\n     List<IFoo> ListOfIFoo;\r\n }\r\n\r\n```\r\nThese restrictions would simplify the design and problems you encounter.\r\n\r\nCurrently to achieve the above there are two solutions. \r\n\r\nMaking all IFoo implementations (eg SomeType) inherit from a common base class, and changing `List<IFoo>` to be `List<Base>`.\r\n\r\n(edited by @mgravell to add markdown on the list generic types, for readability)\r\n\r\nSecond solution is to make a new DTO class with individual lists for each implementation of IFoo, this is painful as every time you add a new implementation of IFoo you need to update your DTO container class.\r\n\r\nPersonally both seem like average solutions to me.\r\n\r\nI've posted up a gist of my current problem and how I have had to solve it. As you can see it looks yuck.\r\nhttps://gist.github.com/rolandh/68c208cdf4d9ca2c9e1cff7a344477f2\r\n\r\n\r\n. > In the example you give, during deserialization, how would the code know to select SomeType? \r\n\r\nWhen you start deserialising you know what you are deserialising due to the ProtoMember numbers in the data don't you? So from these you can infer the type that was serialised eg in this case SomeClass?\r\n\r\nThen you can look at the Class you are trying to deserialise to, in this case it is IFoo but you have found a class of type SomeClass specified instead. Could you not then check (is SomeClass an IFoo) and perform a cast?\r\n\r\n> what members are serialized?\r\nOnly the members of SomeClass \r\n\r\n> What happens if the list contains multiple different IFoo implementations? \r\nWhen you serialise a list that has multiple IFoo implementations you simply serialise their concrete classes\r\nEg\r\n\r\nListOfIFoo.Add(SomeClass);\r\nListOfIFoo.Add(SomeClass2);   //Another IFoo implementation\r\n\r\nWould simply serialise the object SomeClass followed by the object SomeClass2 with zero knowledge that it was originally IFoo. I would imagine the binary serialised result of the list would look the same as the following:\r\n\r\nstruct test{\r\n    Public SomeClass someClass;\r\n    Public SomeClass2 someClass2\r\n}\r\n\r\n> Why is SomeType tested for, specifically? What happens if there aren't any known IFoo implementations?\r\n\r\nWhen you start the deserialization process and you receive the memberNumber do you not look up the class of this member number? I'm not sure how this problem is unique to interfaces.\r\n\r\nIf there are no known IFoo implementations then how was it serialised in the first place? I would argue this would be completely fair to fail at this point.\r\n\r\nIn my example problem I posted up earlier, can you see a better way to achieve that using the existing protobuf implementation?\r\n. > How? where did that number come from? If we take your specfic example: where would it get such a number from? The only possible place is a [ProtoInclude] on the interface, which takes us back to the more complex scenario that I strongly suspect is the only way to do it.\r\n\r\nIt would get the number from SomeClass, it would never look at anything about the interface implementation.\r\n\r\n> If you mean \"treat all IFoo as though they were SomeType, and fail if one isn't, and just use SomeType during deserialization\"... then frankly I think it should be a List<SomeType>...\r\n\r\nTreat List of IFoo as a dynamic list, eg the same as List of dynamic. For every single object in the list you call GetType, then go to the actual class and look for a [ProtoContract] to determine how to serialise it.\r\n\r\nUpon deserialisation you check every single object Is An IFoo and cast it to IFoo. > I think the key thing you're missing here is context on how deserialization works and what data the protobuf stream contains. The ultimate problem is: the data in the raw stream doesn't tell us what type of object to create. \r\n\r\nThis is definitely what I was misunderstanding. I can see the problem now. To help with my understanding in this example below, how does the deserialiser know to when deserialising class DTO that listOfBase contains an instance of ExtendsBase1, ExtendsBase2 and then BaseClass. Eg when processing the raw byte stream, how does it know that the object is ExtendsBase2 and not ExtendsBase1 or even BaseClass? What tells it which is which?\r\n\r\n```\r\n[ProtoInclude(typeof(ExtendsBase1),1]\r\n[ProtoInclude(typeof(ExtendsBase2),2]\r\n[ProtoContract]\r\nclass BaseClass:\r\n\r\n[ProtoContract]\r\nclass ExtendsBase1 : BaseClass\r\n[ProtoMember(3)]\r\nstring Test3;\r\n\r\n[ProtoContract]\r\nclass ExtendsBase2 : BaseClass\r\n[ProtoMember(4)]\r\nstring Test4;\r\n\r\n[ProtoContract]\r\nclass DTO\r\n[ProtoMember(5)]\r\nList<BaseClass> listOfBase;\r\n\r\nlistOfBase.Add(new ExtendsBase1());\r\nlistOfBase.Add(new ExtendsBase2());\r\nlistOfBase.Add(new BaseClass());\r\n```. Can you give an example of how to tell it what types to attempt to interpret the interface as?. Firstly please forgive my ignorance, I am still learning how your typemodel is built.\r\n\r\n_Firstly, we can't just serialize it as a Class1 - it would need to be wrapped appropriately,_\r\n\r\nCan you explain why that is the case for an interface but not the case for a class that extends a base class?\r\n\r\n_Secondly, it is very hard to deal with interfaces as the root object, since when using GetType() you lose the declared type and only have the concrete type._\r\n\r\nIsn't this a good thing? You simply serialise it as a the concrete type which in my example is what I would like it to do.\r\n\r\n_This would potentially make it serialize differently per context, which is very awkward_\r\n\r\nWell yes, because its an interface it would serialise as whatever the underlying object is. Wouldn't that be what most people expect?\r\n\r\nCurrently no one serialises interfaces (at least I doubt many people do) so would this not be adding additional functionality?\r\n\r\nI might explore the source code myself to see if I can understand why you are saying it is more difficult that I seem to currently believe. Appreciate the quick response.\r\n. Would a simpler method to effectively ignore the fact it is an interface and effectively serialise it as if it was a concrete class?\r\n\r\nThen when it comes to deserialising the data and it sees a Bar but it expects an IFoo could it not simply perform a check to see if Bar IS an IFoo and cast it back?\r\n\r\nEg during serialisation if the serialiser encounters an interface it simply casts it to its actual type.\r\n\r\nThen during deserialization if it comes across an object that it expects to be an interface, it first checks if that object implements that interface and if it does casts it back ?\r\n\r\nThis would probably break any existing interface behaviour however I believe not many people are currently serialising interfaces due to the difficulty in doing so.. After stepping through the code I can see where my misunderstanding comes from. It creates a model based on reflecting the code, not based upon the actual in memory object.\r\n\r\nWhat I was hoping to do is dynamically create the model based upon what the object in memories type is. Eg when it builds the model it takes the current in memory state of the object and calls GetType on it then.\r\n\r\nIs there any functionality in the protobuf library to obtain the current in memory type of an object during the runtime model creation? I am not talking by creating the model in code at runtime, but by the protobuf library doing this automatically for you.\r\n\r\nI'm not sure if you currently support serialising dynamic types. However I imagine you would do it the same way I am proposing, treat the interface as \"dynamic\" with its type unknown until runtime.. Then I don't understand the problem.\r\n\r\nGetType would return Class1 in my first example. So it wouldn't even realise it was an interface, hence it should serialise without issue. However it seems to currently return IClass not Class1, why is this?\r\n\r\nWhen deserialising and it gets Class1 but expects IClass, could it not just check that Class1 is an IClass and cast it?\r\n\r\n> No. The problem is that the serialization of a Foo does not include anything that says \"I'm a Foo\".\r\n\r\nvar type = Foo.GetType()\r\ntype should = Foo, not IFoo\r\n. I'll give an example of why I thought it was simple.\r\n\r\nIf I make a base class with nothing in it, then make all my interface implementations inherit from that base class, then set the type to the base class instead of the interface the existing protobuf code works and will serialise and deserialise my \"interface\".\r\n\r\nThe above is ugly though, I'd rather just serialise my interface directly.\r\n. Thank you for the explanation. It makes a lot more sense after you detail the problems.\r\n\r\nIf we simply said you cannot serialise objects where the logical root is an interface I believe that would remove a lot of problems. I can't imagine many people would attempt this either so it is probably acceptable.\r\n\r\nI would also suggest that you simply cannot put [ProtoContact] on an interface, eg you can only serialise concrete classes. I would argue to attempt to serialise an actual interface or use an interface as the root object are poor design choices and it would be reasonable to exclude them.\r\n\r\nSo my suggestion would be to only support the following use cases of interfaces. From what I've read on SO and the issues register these are the only asked for use cases and in my head are the only ones that make design sense to actually implement. \r\n\r\n```\r\ninterface IFoo {...}\r\n\r\n[ProtoContract]\r\nclass SomeType : IFoo { ... }\r\n\r\nOr\r\n\r\n[ProtoContract]\r\nclass SomeClass {\r\n     List<IFoo> ListOfIFoo;\r\n }\r\n\r\n```\r\nThese restrictions would simplify the design and problems you encounter.\r\n\r\nCurrently to achieve the above there are two solutions. \r\n\r\nMaking all IFoo implementations (eg SomeType) inherit from a common base class, and changing `List<IFoo>` to be `List<Base>`.\r\n\r\n(edited by @mgravell to add markdown on the list generic types, for readability)\r\n\r\nSecond solution is to make a new DTO class with individual lists for each implementation of IFoo, this is painful as every time you add a new implementation of IFoo you need to update your DTO container class.\r\n\r\nPersonally both seem like average solutions to me.\r\n\r\nI've posted up a gist of my current problem and how I have had to solve it. As you can see it looks yuck.\r\nhttps://gist.github.com/rolandh/68c208cdf4d9ca2c9e1cff7a344477f2\r\n\r\n\r\n. > In the example you give, during deserialization, how would the code know to select SomeType? \r\n\r\nWhen you start deserialising you know what you are deserialising due to the ProtoMember numbers in the data don't you? So from these you can infer the type that was serialised eg in this case SomeClass?\r\n\r\nThen you can look at the Class you are trying to deserialise to, in this case it is IFoo but you have found a class of type SomeClass specified instead. Could you not then check (is SomeClass an IFoo) and perform a cast?\r\n\r\n> what members are serialized?\r\nOnly the members of SomeClass \r\n\r\n> What happens if the list contains multiple different IFoo implementations? \r\nWhen you serialise a list that has multiple IFoo implementations you simply serialise their concrete classes\r\nEg\r\n\r\nListOfIFoo.Add(SomeClass);\r\nListOfIFoo.Add(SomeClass2);   //Another IFoo implementation\r\n\r\nWould simply serialise the object SomeClass followed by the object SomeClass2 with zero knowledge that it was originally IFoo. I would imagine the binary serialised result of the list would look the same as the following:\r\n\r\nstruct test{\r\n    Public SomeClass someClass;\r\n    Public SomeClass2 someClass2\r\n}\r\n\r\n> Why is SomeType tested for, specifically? What happens if there aren't any known IFoo implementations?\r\n\r\nWhen you start the deserialization process and you receive the memberNumber do you not look up the class of this member number? I'm not sure how this problem is unique to interfaces.\r\n\r\nIf there are no known IFoo implementations then how was it serialised in the first place? I would argue this would be completely fair to fail at this point.\r\n\r\nIn my example problem I posted up earlier, can you see a better way to achieve that using the existing protobuf implementation?\r\n. > How? where did that number come from? If we take your specfic example: where would it get such a number from? The only possible place is a [ProtoInclude] on the interface, which takes us back to the more complex scenario that I strongly suspect is the only way to do it.\r\n\r\nIt would get the number from SomeClass, it would never look at anything about the interface implementation.\r\n\r\n> If you mean \"treat all IFoo as though they were SomeType, and fail if one isn't, and just use SomeType during deserialization\"... then frankly I think it should be a List<SomeType>...\r\n\r\nTreat List of IFoo as a dynamic list, eg the same as List of dynamic. For every single object in the list you call GetType, then go to the actual class and look for a [ProtoContract] to determine how to serialise it.\r\n\r\nUpon deserialisation you check every single object Is An IFoo and cast it to IFoo. > I think the key thing you're missing here is context on how deserialization works and what data the protobuf stream contains. The ultimate problem is: the data in the raw stream doesn't tell us what type of object to create. \r\n\r\nThis is definitely what I was misunderstanding. I can see the problem now. To help with my understanding in this example below, how does the deserialiser know to when deserialising class DTO that listOfBase contains an instance of ExtendsBase1, ExtendsBase2 and then BaseClass. Eg when processing the raw byte stream, how does it know that the object is ExtendsBase2 and not ExtendsBase1 or even BaseClass? What tells it which is which?\r\n\r\n```\r\n[ProtoInclude(typeof(ExtendsBase1),1]\r\n[ProtoInclude(typeof(ExtendsBase2),2]\r\n[ProtoContract]\r\nclass BaseClass:\r\n\r\n[ProtoContract]\r\nclass ExtendsBase1 : BaseClass\r\n[ProtoMember(3)]\r\nstring Test3;\r\n\r\n[ProtoContract]\r\nclass ExtendsBase2 : BaseClass\r\n[ProtoMember(4)]\r\nstring Test4;\r\n\r\n[ProtoContract]\r\nclass DTO\r\n[ProtoMember(5)]\r\nList<BaseClass> listOfBase;\r\n\r\nlistOfBase.Add(new ExtendsBase1());\r\nlistOfBase.Add(new ExtendsBase2());\r\nlistOfBase.Add(new BaseClass());\r\n```. ",
    "fhchina": "I have changed all of my domain models, use abstract base class instead of interface :(. It's a huge task. I have changed all of my domain models, use abstract base class instead of interface :(. It's a huge task. ",
    "jamesgibbs100": "Hi Marc,\r\n\r\nWas wondering how you were getting on - did you manage to reproduce the issue I faced ?\r\n\r\nThanks\r\nJames. Hi Marc,\r\n\r\nWas wondering how you were getting on - did you manage to reproduce the issue I faced ?\r\n\r\nThanks\r\nJames. ",
    "trimox": "Can we get this published to nuget? . Can we get this published to nuget? . ",
    "bcuff": "any update on this issue? I've had to work around it via\r\n```csharp\r\nclass SomeModelBase { static SomeModelBase() { /* do stuff here instead of in SomeModel */ } }\r\nclass SomeModel : SomeModelBase\r\n{\r\n}\r\n```. any update on this issue? I've had to work around it via\r\n```csharp\r\nclass SomeModelBase { static SomeModelBase() { /* do stuff here instead of in SomeModel */ } }\r\nclass SomeModel : SomeModelBase\r\n{\r\n}\r\n```. ",
    "TieSKey": "Oh gtk, I never actually read the spec. Since AddSubType() accepted it I though it was a bug.\r\nMaybe it would make sense to throw an exception from AddSubType() when the id exceeds the spec, since the parameter type has a bigger range.. Oh gtk, I never actually read the spec. Since AddSubType() accepted it I though it was a bug.\r\nMaybe it would make sense to throw an exception from AddSubType() when the id exceeds the spec, since the parameter type has a bigger range.. ",
    "hiredgunhouse": "I've added a Collections section to the Getting Started page: https://github.com/mgravell/protobuf-net/wiki/Getting-Started\r\nPlease feel free to make any updates/corrections you see fit and then close this issue.. I've added a Collections section to the Getting Started page: https://github.com/mgravell/protobuf-net/wiki/Getting-Started\r\nPlease feel free to make any updates/corrections you see fit and then close this issue.. ",
    "nathvi": "Why don't you close this? @karkusviktor . Thank you so much. I didn't know that you had to \"rewind\" the memory stream to 0 after serializeing the object to the memory stream. Works fine now :). I do have a question about the process of the Serialize / Deserialize process.\r\nIf you are feeding in a memory stream to your Serialize method, and need to \r\nrewind the position to 0 in order to get the Deserialize method to read it, why not \r\nautomatically do this on the Serialize call? I'm sure I'm missing something here.\r\n@mgravell . Gotcha. . Good thing you are here to answer all these newb questions. I refactored in the way you suggested and it works fine.\r\n\r\n        public override void Start()\r\n        {\r\n            base.Start();\r\n\r\n            Cat c1 = new Cat(\"Felix\");\r\n            MemoryStream ms = new MemoryStream();\r\n            Serializer.Serialize<Cat>(ms, c1);\r\n            ms.Position = 0;\r\n\r\n            RedisClient.LPush(\"CatList\", ms.GetBuffer());\r\n            byte[] catObject = RedisClient.LPop(\"CatList\");\r\n            MemoryStream dStream = new MemoryStream(catObject, 0, (int)ms.Length);\r\n            Cat dCat = Serializer.Deserialize<Cat>(dStream);\r\n\r\n            // L is the left side of the list, or the first element.\r\n            // LPop will take the head node off and return it\r\n            // LPush will add an item to the head node\r\n        }. Good thing you are here to answer all these newb questions. I refactored in the way you suggested and it works fine. Working version is:\r\n\r\n    public override void Start()\r\n        {\r\n            base.Start();\r\n\r\n            Cat c1 = new Cat(\"Felix\");\r\n            MemoryStream ms = new MemoryStream();\r\n            Serializer.Serialize<Cat>(ms, c1);\r\n            ms.Position = 0;\r\n\r\n            RedisClient.LPush(\"CatList\", ms.GetBuffer());\r\n            byte[] catObject = RedisClient.LPop(\"CatList\");\r\n            MemoryStream dStream = new MemoryStream(catObject, 0, (int)ms.Length);\r\n            Cat dCat = Serializer.Deserialize<Cat>(dStream);\r\n        }. What do you mean IPEndPoint isn't [ProtoContract]? Does that mean that IPEndPoint doesn't have the ProtoContract attribute on it? @mrtank . Anyone know anything more on this?. It's probably me just being an idiot again.. Anybody know anything on this?. I'm using ServiceStack. `messageString` is supposed to be the last message that was placed in the `ProcessingMessageQueue` list. Looks like my problem is that I cannot find, or that ServiceStack does not have a way to copy binary data from the top off a list without dequeuing it. There has to be a way... . Thank you for your response. I will be sending you an email shortly specifying what I had in mind.. Why don't you close this? @karkusviktor . Thank you so much. I didn't know that you had to \"rewind\" the memory stream to 0 after serializeing the object to the memory stream. Works fine now :). I do have a question about the process of the Serialize / Deserialize process.\r\nIf you are feeding in a memory stream to your Serialize method, and need to \r\nrewind the position to 0 in order to get the Deserialize method to read it, why not \r\nautomatically do this on the Serialize call? I'm sure I'm missing something here.\r\n@mgravell . Gotcha. . Good thing you are here to answer all these newb questions. I refactored in the way you suggested and it works fine.\r\n\r\n        public override void Start()\r\n        {\r\n            base.Start();\r\n\r\n            Cat c1 = new Cat(\"Felix\");\r\n            MemoryStream ms = new MemoryStream();\r\n            Serializer.Serialize<Cat>(ms, c1);\r\n            ms.Position = 0;\r\n\r\n            RedisClient.LPush(\"CatList\", ms.GetBuffer());\r\n            byte[] catObject = RedisClient.LPop(\"CatList\");\r\n            MemoryStream dStream = new MemoryStream(catObject, 0, (int)ms.Length);\r\n            Cat dCat = Serializer.Deserialize<Cat>(dStream);\r\n\r\n            // L is the left side of the list, or the first element.\r\n            // LPop will take the head node off and return it\r\n            // LPush will add an item to the head node\r\n        }. Good thing you are here to answer all these newb questions. I refactored in the way you suggested and it works fine. Working version is:\r\n\r\n    public override void Start()\r\n        {\r\n            base.Start();\r\n\r\n            Cat c1 = new Cat(\"Felix\");\r\n            MemoryStream ms = new MemoryStream();\r\n            Serializer.Serialize<Cat>(ms, c1);\r\n            ms.Position = 0;\r\n\r\n            RedisClient.LPush(\"CatList\", ms.GetBuffer());\r\n            byte[] catObject = RedisClient.LPop(\"CatList\");\r\n            MemoryStream dStream = new MemoryStream(catObject, 0, (int)ms.Length);\r\n            Cat dCat = Serializer.Deserialize<Cat>(dStream);\r\n        }. What do you mean IPEndPoint isn't [ProtoContract]? Does that mean that IPEndPoint doesn't have the ProtoContract attribute on it? @mrtank . Anyone know anything more on this?. It's probably me just being an idiot again.. Anybody know anything on this?. I'm using ServiceStack. `messageString` is supposed to be the last message that was placed in the `ProcessingMessageQueue` list. Looks like my problem is that I cannot find, or that ServiceStack does not have a way to copy binary data from the top off a list without dequeuing it. There has to be a way... . Thank you for your response. I will be sending you an email shortly specifying what I had in mind.. ",
    "Tom-Cuthill": "Apologies, here is the GUI text:\r\n[GUI.txt](https://github.com/mgravell/protobuf-net/files/784819/GUI.txt)\r\n. Apologies, here is the GUI text:\r\n[GUI.txt](https://github.com/mgravell/protobuf-net/files/784819/GUI.txt)\r\n. ",
    "lbargaoanu": "I don't see this [anymore](https://gist.github.com/lbargaoanu/5fb4a3376b2619e5e8e5d9d582d53ddb). @Tom-Cuthill Can you make that gist break?. Bad idea? :). The corresponding passing test is [here](https://github.com/mgravell/protobuf-net/blob/59b83356149a6df5027631421e2d6e03c8708725/src/Examples/Issues/SO14436606.cs).. I think you missed setting AsReference for Items.. Just by reading the code I'd say [this](https://github.com/mgravell/protobuf-net/blob/59b83356149a6df5027631421e2d6e03c8708725/src/Examples/Issues/SO14436606.cs#L218) suggests you're correct.. Another possible [solution](https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream).. Most of those issues are not closed, rather than open :). @mgravell This can be fixed by ignoring the keys for type objects when [reading](https://github.com/mgravell/protobuf-net/compare/master...lbargaoanu:Isuue304#diff-9c424e79ea018611691fd08f9b3135e7). All the tests pass, but this might just mean that more tests are needed :). I don't think so. @mgravell will decide eventually what exactly need to be done here.. Try [SupportNull](https://github.com/mgravell/protobuf-net/search?q=supportnull&type=Code&utf8=%E2%9C%93).. I don't see it with the latest. A repro would help. Make a gist that we can execute and see fail.. It seems to me like _you_ specify the order and Protobuf should comply.. It's part of your own code. You choose the order. I guess the idea is to give you control over the wire format. Consider that another implementation might be on the other end. Then clearly you want an explicit order. @mgravell might have a better answer for you.. Well, the order is the problem, and you have control over that. There is nothing to fix in my view.. Maybe @mgravell will see it your way. I don't :). @mgravell I guess what you mean is that the code needs some setting to get the replace behavior, because it seems to me it fails with the latest.. Found it :)\r\n    \r\n    type.AddField(2, \"Tags\").OverwriteList = true;. What happens is that items are added one by one, and the initial capacity is not set from the length of the source array. So the default list algorithm kicks in, which probably doubles the list capacity, or smth like that. That can easily cause the capacity to be larger than the max, even for arrays smaller than max. The fix would be to set the initial capacity of the destination list to the length of the source collection. Or even better, for arrays, to simply allocate an array of the required length.. I don't see this [anymore](https://gist.github.com/lbargaoanu/5fb4a3376b2619e5e8e5d9d582d53ddb). @Tom-Cuthill Can you make that gist break?. Bad idea? :). The corresponding passing test is [here](https://github.com/mgravell/protobuf-net/blob/59b83356149a6df5027631421e2d6e03c8708725/src/Examples/Issues/SO14436606.cs).. I think you missed setting AsReference for Items.. Just by reading the code I'd say [this](https://github.com/mgravell/protobuf-net/blob/59b83356149a6df5027631421e2d6e03c8708725/src/Examples/Issues/SO14436606.cs#L218) suggests you're correct.. Another possible [solution](https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream).. Most of those issues are not closed, rather than open :). @mgravell This can be fixed by ignoring the keys for type objects when [reading](https://github.com/mgravell/protobuf-net/compare/master...lbargaoanu:Isuue304#diff-9c424e79ea018611691fd08f9b3135e7). All the tests pass, but this might just mean that more tests are needed :). I don't think so. @mgravell will decide eventually what exactly need to be done here.. Try [SupportNull](https://github.com/mgravell/protobuf-net/search?q=supportnull&type=Code&utf8=%E2%9C%93).. I don't see it with the latest. A repro would help. Make a gist that we can execute and see fail.. It seems to me like _you_ specify the order and Protobuf should comply.. It's part of your own code. You choose the order. I guess the idea is to give you control over the wire format. Consider that another implementation might be on the other end. Then clearly you want an explicit order. @mgravell might have a better answer for you.. Well, the order is the problem, and you have control over that. There is nothing to fix in my view.. Maybe @mgravell will see it your way. I don't :). @mgravell I guess what you mean is that the code needs some setting to get the replace behavior, because it seems to me it fails with the latest.. Found it :)\r\n    \r\n    type.AddField(2, \"Tags\").OverwriteList = true;. What happens is that items are added one by one, and the initial capacity is not set from the length of the source array. So the default list algorithm kicks in, which probably doubles the list capacity, or smth like that. That can easily cause the capacity to be larger than the max, even for arrays smaller than max. The fix would be to set the initial capacity of the destination list to the length of the source collection. Or even better, for arrays, to simply allocate an array of the required length.. ",
    "OnurGumus": "Basically the error is due to you are serializing the same object to the same stream multiple times which is rather confusing for me. If you change the serialization line to\r\nSerializer.Serialize(stream, person);\r\nstream.Position = 0;\r\nthat would be a more reasonable test.. Basically the error is due to you are serializing the same object to the same stream multiple times which is rather confusing for me. If you change the serialization line to\r\nSerializer.Serialize(stream, person);\r\nstream.Position = 0;\r\nthat would be a more reasonable test.. ",
    "snarlynarwhal": "Thanks so much for the speedy and thorough replies! I want to simulate writing multiple objects sequentially - (De)SerializeWithLengthPrefix worked perfectly!  Would you mind elaborating more or pointing me in the direction where I could learn more about what exactly the PrefixStyle options do? All of them work, although PrefixStyle.None made the deserialization time 1 ms which appeared odd.\r\n\r\nEdit:\r\n\r\nI closed the issue, but would appreciate an elaboration regarding the PrefixStyle option. :). I needed it for Unity which doesn't integrate with Nuget. I eventually found the downloads page from the Google Code site - thanks!. Thanks so much for the speedy and thorough replies! I want to simulate writing multiple objects sequentially - (De)SerializeWithLengthPrefix worked perfectly!  Would you mind elaborating more or pointing me in the direction where I could learn more about what exactly the PrefixStyle options do? All of them work, although PrefixStyle.None made the deserialization time 1 ms which appeared odd.\r\n\r\nEdit:\r\n\r\nI closed the issue, but would appreciate an elaboration regarding the PrefixStyle option. :). I needed it for Unity which doesn't integrate with Nuget. I eventually found the downloads page from the Google Code site - thanks!. ",
    "jgrandydev": "Are you referring to root-lists ?  Or lists embedded in a type ? \r\n\r\nAn empty-list is not sent at all : `ProtoBuf.Serialize()` writes no bytes for that proto-index.\r\n\r\nWhen `ProtoBuf.Deserialize()` looks for bytes for that proto-index it doesn't find any, and so it defaults the value to null.  It has no way to know if the original value was null or an empty-list.\r\n\r\nIt's not the `protobuf-net` implementation behind this , it's the Google Protocol Buffers spec requiring no bytes if no actual data.\r\n\r\n\r\n. Why not build into `Serialize()` a mechanism to scan root-lists for nulls and if found embed the root-list in a shim class with a single property `List<T>` with static constructor init `SupportNull=true` ?  ` Deserialize() ` would extract list from the shim class with nulls intact.. Yes a shim root object ( containing a single `IList` property marked to support nulls ) with additional code pre/post-serialization to shim/un-shim is exactly the solution I'm currently going with.\r\n\r\nBut I still wonder if root-list nulls support could be built-into protobuf-net ? \r\n\r\nIf `Serialize()` encounters a root-list with nulls it first transfers the list into a shim object and includes in the bytes a special flag just before the serialized shim bytes.  If `Deserialize<List<T>>` finds the flag set it knows to first deserialize to the shim and then extract the list. \r\n\r\nOr are you saying that it's non-performant to determine whether the root-list has nulls ?  And also non-performant to always ( without first checking for nulls ) wrap all root-lists in the shim class ? . Are you referring to root-lists ?  Or lists embedded in a type ? \r\n\r\nAn empty-list is not sent at all : `ProtoBuf.Serialize()` writes no bytes for that proto-index.\r\n\r\nWhen `ProtoBuf.Deserialize()` looks for bytes for that proto-index it doesn't find any, and so it defaults the value to null.  It has no way to know if the original value was null or an empty-list.\r\n\r\nIt's not the `protobuf-net` implementation behind this , it's the Google Protocol Buffers spec requiring no bytes if no actual data.\r\n\r\n\r\n. Why not build into `Serialize()` a mechanism to scan root-lists for nulls and if found embed the root-list in a shim class with a single property `List<T>` with static constructor init `SupportNull=true` ?  ` Deserialize() ` would extract list from the shim class with nulls intact.. Yes a shim root object ( containing a single `IList` property marked to support nulls ) with additional code pre/post-serialization to shim/un-shim is exactly the solution I'm currently going with.\r\n\r\nBut I still wonder if root-list nulls support could be built-into protobuf-net ? \r\n\r\nIf `Serialize()` encounters a root-list with nulls it first transfers the list into a shim object and includes in the bytes a special flag just before the serialized shim bytes.  If `Deserialize<List<T>>` finds the flag set it knows to first deserialize to the shim and then extract the list. \r\n\r\nOr are you saying that it's non-performant to determine whether the root-list has nulls ?  And also non-performant to always ( without first checking for nulls ) wrap all root-lists in the shim class ? . ",
    "ryantrem": "In this case, the data I'm serializing definitely should not be 0 bytes. The exact same code works fine when built as Debug (without .NET Native), but in Release (with .NET Native) it doesn't write any data out. The same problem seems to exist for deserializing as well. That is, where I successfully serialized in a Debug build, when I try to deserialize the data in Release, it doesn't read any of the data and I get back an empty/default object. In both cases, there are no managed or native exceptions.. I was reading up a bit on the *.rd.xml files used by the .NET Native compiler and found that if I change:\r\n\r\n`<Assembly Name=\"*Application*\" Dynamic=\"Required All\" />`\r\n\r\nto:\r\n\r\n`<Assembly Name=\"*Application*\" Dynamic=\"Required All\" Serialize=\"All\" />`\r\n\r\nthen protobuf works as expected. From the docs:\r\n\r\n> Serialize. Controls runtime access to constructors, fields, and properties, to enable type instances to be serialized and serialized by third-party libraries such as the Newtonsoft JSON serializer.\r\n\r\nProbably worth updating the protobuf-net docs to call this out! Also, after discovering this, I found there was a mention of something similar in issue #138. That issue is more focused on UWP support specifically in 2.1 (side note: Is there any update on this? As mentioned in this thread, I had to use 2.0.0.668).. In this case, the data I'm serializing definitely should not be 0 bytes. The exact same code works fine when built as Debug (without .NET Native), but in Release (with .NET Native) it doesn't write any data out. The same problem seems to exist for deserializing as well. That is, where I successfully serialized in a Debug build, when I try to deserialize the data in Release, it doesn't read any of the data and I get back an empty/default object. In both cases, there are no managed or native exceptions.. I was reading up a bit on the *.rd.xml files used by the .NET Native compiler and found that if I change:\r\n\r\n`<Assembly Name=\"*Application*\" Dynamic=\"Required All\" />`\r\n\r\nto:\r\n\r\n`<Assembly Name=\"*Application*\" Dynamic=\"Required All\" Serialize=\"All\" />`\r\n\r\nthen protobuf works as expected. From the docs:\r\n\r\n> Serialize. Controls runtime access to constructors, fields, and properties, to enable type instances to be serialized and serialized by third-party libraries such as the Newtonsoft JSON serializer.\r\n\r\nProbably worth updating the protobuf-net docs to call this out! Also, after discovering this, I found there was a mention of something similar in issue #138. That issue is more focused on UWP support specifically in 2.1 (side note: Is there any update on this? As mentioned in this thread, I had to use 2.0.0.668).. ",
    "odysseus1973": "Thanks! I will try it, but why surrogate can't use string and how to register surrogate correctly? When I was debugging I did not see that the surrogate was called, so i think my problem with surrogate registration.. Thanks for answer! I specifically did not delete the commented lines in code block in my question, I tried it, but without success. How does converting to UnixTime support the time zone?. Thanks! I will try it, but why surrogate can't use string and how to register surrogate correctly? When I was debugging I did not see that the surrogate was called, so i think my problem with surrogate registration.. Thanks for answer! I specifically did not delete the commented lines in code block in my question, I tried it, but without success. How does converting to UnixTime support the time zone?. ",
    "paraboxx": "The purpose of DateTimeOffset is to preserve TimeZone information so it's possible to see at white Offset the timestamp was generated. By convertig to unixtime this information is lost.. The purpose of DateTimeOffset is to preserve TimeZone information so it's possible to see at white Offset the timestamp was generated. By convertig to unixtime this information is lost.. ",
    "Tornhoof": "Already done manually. Closing. Already done manually. Closing. ",
    "mattnischan": "Agreed, this is sort of a worst case of the best case kinda thing. Really mostly to illustrate the inlining issues; this should always be slower than ValueTaskAsync in a sane world.. Yeah, I was curious about that too. I figured I'd start here and go up.. Agreed, this is sort of a worst case of the best case kinda thing. Really mostly to illustrate the inlining issues; this should always be slower than ValueTaskAsync in a sane world.. Yeah, I was curious about that too. I figured I'd start here and go up.. ",
    "sparticus1701": "[ProtoBufBug.zip](https://github.com/mgravell/protobuf-net/files/926396/ProtoBufBug.zip)\r\n\r\nGuess the link doesn't work.. Apparently calling SerializeWithLengthPrefix and DeserializeWithLengthPrefix are the appropriate calls to make here.. [ProtoBufBug.zip](https://github.com/mgravell/protobuf-net/files/926396/ProtoBufBug.zip)\r\n\r\nGuess the link doesn't work.. Apparently calling SerializeWithLengthPrefix and DeserializeWithLengthPrefix are the appropriate calls to make here.. ",
    "gomathi04": "Actually my entire project is already in live,  so its not advisable to make changes in entity class level . I just want work on performance part like response time and data consumption's with minimum level changes. Please suggest something . Actually my entire project is already in live,  so its not advisable to make changes in entity class level . I just want work on performance part like response time and data consumption's with minimum level changes. Please suggest something . ",
    "mrtank": "IPEndPoint isn't [ProtoContract], so it's not that big surprise. All members have to be serializable, to serialize something.. Yes. Besides some basic types\r\n(\r\ncustom classes that:\r\nare marked as data-contract\r\nhave a parameterless constructor\r\nfor Silverlight: are public\r\nmany common primitives etc\r\nsingle dimension arrays: T[]\r\nList / IList\r\nDictionary<TKey,TValue> / IDictionary<TKey,TValue>\r\nany type which implements IEnumerable and has an Add(T) method\r\n)\r\nYou need all members to be [ProtoContract]. Meaning the class is annotated with [ProtoContract], and satisfy the means of [ProtoContract] (meaning all of the members know it's ProtoMember attribute).. IPEndPoint isn't [ProtoContract], so it's not that big surprise. All members have to be serializable, to serialize something.. Yes. Besides some basic types\r\n(\r\ncustom classes that:\r\nare marked as data-contract\r\nhave a parameterless constructor\r\nfor Silverlight: are public\r\nmany common primitives etc\r\nsingle dimension arrays: T[]\r\nList / IList\r\nDictionary<TKey,TValue> / IDictionary<TKey,TValue>\r\nany type which implements IEnumerable and has an Add(T) method\r\n)\r\nYou need all members to be [ProtoContract]. Meaning the class is annotated with [ProtoContract], and satisfy the means of [ProtoContract] (meaning all of the members know it's ProtoMember attribute).. ",
    "AlleSchonWeg": "Yes ist works. I thought, that the WCF-Extensions are equal to the normal behavior.. Yes ist works. I thought, that the WCF-Extensions are equal to the normal behavior.. ",
    "SamuelEnglard": "Issue with my environment. when exception are returned they're supposed to be shown as errors of the \"whole\" code (not the best UX but only thing I could think of). Issue with my environment. when exception are returned they're supposed to be shown as errors of the \"whole\" code (not the best UX but only thing I could think of). ",
    "mburbea": "No problem. I'll build a minimal gist, if you don't mind can I get an email\nto send it to?\n\nOn Thu, May 25, 2017, 5:59 PM Marc Gravell <notifications@github.com> wrote:\n\n> The error happens when there are at least 2 objects in the list. I can\n> send the zip and the code to read it, if you'd like to take a look.\n>\n> Yes please, very much. Sorry for drip-feeding comments here!\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-304136197>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AANA8Q3uIM2go3DcT6jlKza1dUOzRF4sks5r9fnJgaJpZM4Nm4Ke>\n> .\n>\n. Ok, I sent you an email. Thanks again for the fast response!\n\nOn Thu, May 25, 2017 at 6:01 PM, Marc Gravell <notifications@github.com>\nwrote:\n\n> marc.gravell@gmail.com\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-304136687>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AANA8Z2Lc0rJfhWvVoNupDW85HaGbeGxks5r9fpVgaJpZM4Nm4Ke>\n> .\n>\n. Thank you! Seems to be working great now.. No problem. I'll build a minimal gist, if you don't mind can I get an email\nto send it to?\n\nOn Thu, May 25, 2017, 5:59 PM Marc Gravell <notifications@github.com> wrote:\n\n> The error happens when there are at least 2 objects in the list. I can\n> send the zip and the code to read it, if you'd like to take a look.\n>\n> Yes please, very much. Sorry for drip-feeding comments here!\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-304136197>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AANA8Q3uIM2go3DcT6jlKza1dUOzRF4sks5r9fnJgaJpZM4Nm4Ke>\n> .\n>\n. Ok, I sent you an email. Thanks again for the fast response!\n\nOn Thu, May 25, 2017 at 6:01 PM, Marc Gravell <notifications@github.com>\nwrote:\n\n> marc.gravell@gmail.com\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/mgravell/protobuf-net/issues/256#issuecomment-304136687>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AANA8Z2Lc0rJfhWvVoNupDW85HaGbeGxks5r9fpVgaJpZM4Nm4Ke>\n> .\n>\n. Thank you! Seems to be working great now.. ",
    "newton3": "I have  exactly the same issue after upgrading from 2.1.0 to 2.3.0/2.3.1.\r\nI do **not** get this error when using 2.2.1 or 2.1.0\r\n\r\n@mgravell  seems like the issue was introduced back with 2.3.0 and persists in 2.3.1. Please let me know if mistaken.\r\n\r\nEDIT: \r\nMore details - error occurs while de-serializing the data using 2.3.0 or 2.3.1, which was serialized by using 2.1.0. Exception below - \r\n\r\n```\r\nInvalid wire-type; this usually means you have over-written a file without truncating or setting the length; see http://stackoverflow.com/q/2152978/23354\r\nat ProtoBuf.ProtoReader.StartSubItem(ProtoReader reader)\r\nat ProtoBuf.ProtoReader.ReadTypedObject(Object value, Int32 key, ProtoReader reader, Type type)\r\nat proto_78(Object , ProtoReader )\r\nat ProtoBuf.Meta.TypeModel.DeserializeCore(ProtoReader reader, Type type, Object value, Boolean noAutoCreate)\r\nat ProtoBuf.Meta.TypeModel.Deserialize(Stream source, Object value, Type type, SerializationContext context)\r\nat ProtoBuf.Serializer.Deserialize[T](Stream source)\r\n```. I understand. Trying to come up with a minimal repro.. @mgravell I was able to repro the issue with a simple console app and pinned the issue down to a custom implementation of IDictionary<Tkey, TValue>. When serialized with 2.1.0, deserializing after upgrading to v 2.3.1 throws the above error. \r\nI will email you the sample console app at marc.gravell@gmail.com. having difficulty with email - so created a repo for you to check out the code - https://github.com/newton3/protobuf-2.3.1-error. Thanks for your quick response.. that does solve the issue!\r\nWill wait for your complete diagnosis.. @mgravell is there any workaround to apply globally or at the type level? the Dictionary is  being used at a number of places and it is a huge change to find and fix all the members. Are you going to open a new issue to track this ?. yes, thank you!. I have  exactly the same issue after upgrading from 2.1.0 to 2.3.0/2.3.1.\r\nI do **not** get this error when using 2.2.1 or 2.1.0\r\n\r\n@mgravell  seems like the issue was introduced back with 2.3.0 and persists in 2.3.1. Please let me know if mistaken.\r\n\r\nEDIT: \r\nMore details - error occurs while de-serializing the data using 2.3.0 or 2.3.1, which was serialized by using 2.1.0. Exception below - \r\n\r\n```\r\nInvalid wire-type; this usually means you have over-written a file without truncating or setting the length; see http://stackoverflow.com/q/2152978/23354\r\nat ProtoBuf.ProtoReader.StartSubItem(ProtoReader reader)\r\nat ProtoBuf.ProtoReader.ReadTypedObject(Object value, Int32 key, ProtoReader reader, Type type)\r\nat proto_78(Object , ProtoReader )\r\nat ProtoBuf.Meta.TypeModel.DeserializeCore(ProtoReader reader, Type type, Object value, Boolean noAutoCreate)\r\nat ProtoBuf.Meta.TypeModel.Deserialize(Stream source, Object value, Type type, SerializationContext context)\r\nat ProtoBuf.Serializer.Deserialize[T](Stream source)\r\n```. I understand. Trying to come up with a minimal repro.. @mgravell I was able to repro the issue with a simple console app and pinned the issue down to a custom implementation of IDictionary<Tkey, TValue>. When serialized with 2.1.0, deserializing after upgrading to v 2.3.1 throws the above error. \r\nI will email you the sample console app at marc.gravell@gmail.com. having difficulty with email - so created a repo for you to check out the code - https://github.com/newton3/protobuf-2.3.1-error. Thanks for your quick response.. that does solve the issue!\r\nWill wait for your complete diagnosis.. @mgravell is there any workaround to apply globally or at the type level? the Dictionary is  being used at a number of places and it is a huge change to find and fix all the members. Are you going to open a new issue to track this ?. yes, thank you!. ",
    "d-saravanan": "Thanks for your response. I was also exploring the claims principal and other some of my scope objects. I felt that, it was way too much to serialize and store. As you rightly said, the simple DTO against the claims principal is my choice. I am preparing the list of properties, if you can please give me directions in this step, it will be very helpful.\r\n\r\nA generic dot net question, please bear with me.\r\nLet's say I have an aggregate object, in which the claims principal is a part, should I implement ISerializable and handle the DTO back to claims principal mapping in the GetObject method. I understand that this breaks the separation of concerns ( regarding the Serialization resolver and dto transformation), however it can be taken care via an IoC like unity. Kindly let me know your thoughts on this. . Thanks a lot for the help. \r\nI was able to test with the sample that you gave and was able to implement in a similar but moderately complex POC. I am good to proceed with the main change shortly. I have the POC application in github for anyone else to get started [link](https://github.com/d-saravanan/protobuf-custom-serialize-complex-objects). Thanks for your response. I was also exploring the claims principal and other some of my scope objects. I felt that, it was way too much to serialize and store. As you rightly said, the simple DTO against the claims principal is my choice. I am preparing the list of properties, if you can please give me directions in this step, it will be very helpful.\r\n\r\nA generic dot net question, please bear with me.\r\nLet's say I have an aggregate object, in which the claims principal is a part, should I implement ISerializable and handle the DTO back to claims principal mapping in the GetObject method. I understand that this breaks the separation of concerns ( regarding the Serialization resolver and dto transformation), however it can be taken care via an IoC like unity. Kindly let me know your thoughts on this. . Thanks a lot for the help. \r\nI was able to test with the sample that you gave and was able to implement in a similar but moderately complex POC. I am good to proceed with the main change shortly. I have the POC application in github for anyone else to get started [link](https://github.com/d-saravanan/protobuf-custom-serialize-complex-objects). ",
    "jnyrup": "Thanks for the answer and thoughts about the future.. Thanks for the answer and thoughts about the future.. ",
    "rogeralsing": "Are those things in any branch atm?\r\nthe compile-time-gen branch only contains CodeGenGenerator and CodeGenAttribute, am I looking in the wrong place?. It's working fine, I've got all the injection points needed. closing. Are those things in any branch atm?\r\nthe compile-time-gen branch only contains CodeGenGenerator and CodeGenAttribute, am I looking in the wrong place?. It's working fine, I've got all the injection points needed. closing. ",
    "Qtan75": "Hi, \r\nThanks for the response!. Hi,\r\nIs it in the csproj file, just need to change:\r\n    <TargetFrameworks>net40;netstandard1.3</TargetFrameworks>\r\nto \r\n    <TargetFrameworks>net3.5;netstandard1.3</TargetFrameworks>\r\n\r\nI can give it a try now.\r\n\r\nThank you!. It works! Thanks!. So after I created the dll from the vs2017 build, with target framework of .Net3.5. Ireferenced it in a Windows Mobile 6.5 application. But unluckily, that WM6.5 application had errors after I have reference the new dll. The first error is:\r\nThe type 'System.Xml.Serialization.IXmlSerializable' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\t\r\n\r\nAnother question I have is: Is it possible to convert this package (protobuf-net) to a vs2008 solution and build it with target frame .Net3.5 in there?\r\n\r\nThank you!. The protobuf-net dll was used for an application developed in vs2008. So has the error happened in. Yes, System.xml is in reference, but the version is 3.5.0.0 for this application. However in the protobuf-net solution, it reference to a version of 2.0.0.0 for the System.Xml it is using.\r\n\r\nSince vs2008 is used for my application, so that's why I was trying to build the protobuf-net.dll in vs2008. thought this could but actually may not.. When I tried to remove the System.Xml version 2.0.0.0 referenced in the protobuf-net solution, it gave an error: \r\n![image](https://user-images.githubusercontent.com/17502718/27054839-699df83c-4f90-11e7-9da7-0ef933de7826.png)\r\n. So I have tried adding a line:\r\n\r\n\t<PackageReference Include=\"System.Xml\" Version=\"3.5.0.0\" />\r\n\r\ninto the csproj xml, however, then vs2017 shows build errors:\r\nUnable to resolve 'System.Xml (>= 3.5.0)' for '.NETFramework,Version=v3.5'.\t\t\t\t\r\nUnable to resolve 'System.Xml (>= 3.5.0)' for '.NETFramework,Version=v4.5.2'.\t\t\t\t\r\nUnexpected dependency 'System.Xml' with no version number.\t\r\n\r\nAny insights on those?. Ok, I have changed it to:\r\n\t<Reference Include=\"System.Xml\" Version=\"3.5.0.0\" />\r\nHowever, under the Dependencies, Assemblies, The System.Xml is still 2.0.0.0. I will need 3.5. It's strange because the System.Xml.Linq is 3.5.\r\n\r\nBut now the build error is gone.. got it. However, in the other project that uses this protobuf-net.dll, it has a System.Xml reference version of 3.5. So we were wondering if that could help.\r\n\r\nThanks for the help!\r\n. Hi, \r\nThanks for the response!. Hi,\r\nIs it in the csproj file, just need to change:\r\n    <TargetFrameworks>net40;netstandard1.3</TargetFrameworks>\r\nto \r\n    <TargetFrameworks>net3.5;netstandard1.3</TargetFrameworks>\r\n\r\nI can give it a try now.\r\n\r\nThank you!. It works! Thanks!. So after I created the dll from the vs2017 build, with target framework of .Net3.5. Ireferenced it in a Windows Mobile 6.5 application. But unluckily, that WM6.5 application had errors after I have reference the new dll. The first error is:\r\nThe type 'System.Xml.Serialization.IXmlSerializable' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\t\r\n\r\nAnother question I have is: Is it possible to convert this package (protobuf-net) to a vs2008 solution and build it with target frame .Net3.5 in there?\r\n\r\nThank you!. The protobuf-net dll was used for an application developed in vs2008. So has the error happened in. Yes, System.xml is in reference, but the version is 3.5.0.0 for this application. However in the protobuf-net solution, it reference to a version of 2.0.0.0 for the System.Xml it is using.\r\n\r\nSince vs2008 is used for my application, so that's why I was trying to build the protobuf-net.dll in vs2008. thought this could but actually may not.. When I tried to remove the System.Xml version 2.0.0.0 referenced in the protobuf-net solution, it gave an error: \r\n![image](https://user-images.githubusercontent.com/17502718/27054839-699df83c-4f90-11e7-9da7-0ef933de7826.png)\r\n. So I have tried adding a line:\r\n\r\n\t<PackageReference Include=\"System.Xml\" Version=\"3.5.0.0\" />\r\n\r\ninto the csproj xml, however, then vs2017 shows build errors:\r\nUnable to resolve 'System.Xml (>= 3.5.0)' for '.NETFramework,Version=v3.5'.\t\t\t\t\r\nUnable to resolve 'System.Xml (>= 3.5.0)' for '.NETFramework,Version=v4.5.2'.\t\t\t\t\r\nUnexpected dependency 'System.Xml' with no version number.\t\r\n\r\nAny insights on those?. Ok, I have changed it to:\r\n\t<Reference Include=\"System.Xml\" Version=\"3.5.0.0\" />\r\nHowever, under the Dependencies, Assemblies, The System.Xml is still 2.0.0.0. I will need 3.5. It's strange because the System.Xml.Linq is 3.5.\r\n\r\nBut now the build error is gone.. got it. However, in the other project that uses this protobuf-net.dll, it has a System.Xml reference version of 3.5. So we were wondering if that could help.\r\n\r\nThanks for the help!\r\n. ",
    "xxpniu": "I am sorry for replay so late.\r\nYes, \"it\" is the  DLS (protogen). \r\nI will try the version,thanks.. source code is:\r\n\r\n```\r\nsyntax = \"proto3\";\r\n\r\npackage Utility.proto;\r\n\r\n//\u5efa\u7b51\u529f\u80fd\u7c7b\u578b\r\nenum BuildingFunType\r\n{\r\n   NONE = 0;//\u6ca1\u6709\u529f\u80fd\u7c7b\u578b \r\n   Produce = 1 ;//\u751f\u4ea7\r\n   Function = 2 ;//\u529f\u80fd \r\n}\r\n```\r\n\r\nand it export this file:\r\n\r\n```\r\n#pragma warning disable CS1591, CS0612, CS3021\r\n\r\nnamespace Utility.proto\r\n{\r\n\r\n    [global::ProtoBuf.ProtoContract()]\r\n    public enum BuildingFunType\r\n    {\r\n        [global::ProtoBuf.ProtoEnum(Name = @\"NONE\")]\r\n        None = 0,\r\n        [global::ProtoBuf.ProtoEnum()]\r\n        Produce = 1,\r\n        [global::ProtoBuf.ProtoEnum()]\r\n        Function = 2,\r\n    }\r\n\r\n}\r\n\r\n#pragma warning restore CS1591, CS0612, CS3021\r\n```\r\n\r\ni want like this:\r\n\r\n```\r\n#pragma warning disable CS1591, CS0612, CS3021\r\n\r\nnamespace Utility.proto\r\n{\r\n\r\n    /// <summary>\r\n    /// \u5efa\u7b51\u529f\u80fd\u7c7b\u578b\r\n    /// </summary>\r\n    [global::ProtoBuf.ProtoContract()]\r\n    public enum BuildingFunType\r\n    {\r\n        /// <summary>\r\n        /// \u6ca1\u6709\u529f\u80fd\u7c7b\u578b\r\n        /// </summary>\r\n        [global::ProtoBuf.ProtoEnum(Name = @\"NONE\")]\r\n        None = 0,\r\n        /// <summary>\r\n        /// \u751f\u4ea7\r\n        /// </summary>\r\n        [global::ProtoBuf.ProtoEnum()]\r\n        Produce = 1,\r\n        /// <summary>\r\n        /// \u529f\u80fd\r\n        /// </summary>\r\n        [global::ProtoBuf.ProtoEnum()]\r\n        Function = 2,\r\n    }\r\n\r\n}\r\n\r\n#pragma warning restore CS1591, CS0612, CS3021\r\n```. I am sorry for replay so late.\r\nYes, \"it\" is the  DLS (protogen). \r\nI will try the version,thanks.. source code is:\r\n\r\n```\r\nsyntax = \"proto3\";\r\n\r\npackage Utility.proto;\r\n\r\n//\u5efa\u7b51\u529f\u80fd\u7c7b\u578b\r\nenum BuildingFunType\r\n{\r\n   NONE = 0;//\u6ca1\u6709\u529f\u80fd\u7c7b\u578b \r\n   Produce = 1 ;//\u751f\u4ea7\r\n   Function = 2 ;//\u529f\u80fd \r\n}\r\n```\r\n\r\nand it export this file:\r\n\r\n```\r\n#pragma warning disable CS1591, CS0612, CS3021\r\n\r\nnamespace Utility.proto\r\n{\r\n\r\n    [global::ProtoBuf.ProtoContract()]\r\n    public enum BuildingFunType\r\n    {\r\n        [global::ProtoBuf.ProtoEnum(Name = @\"NONE\")]\r\n        None = 0,\r\n        [global::ProtoBuf.ProtoEnum()]\r\n        Produce = 1,\r\n        [global::ProtoBuf.ProtoEnum()]\r\n        Function = 2,\r\n    }\r\n\r\n}\r\n\r\n#pragma warning restore CS1591, CS0612, CS3021\r\n```\r\n\r\ni want like this:\r\n\r\n```\r\n#pragma warning disable CS1591, CS0612, CS3021\r\n\r\nnamespace Utility.proto\r\n{\r\n\r\n    /// <summary>\r\n    /// \u5efa\u7b51\u529f\u80fd\u7c7b\u578b\r\n    /// </summary>\r\n    [global::ProtoBuf.ProtoContract()]\r\n    public enum BuildingFunType\r\n    {\r\n        /// <summary>\r\n        /// \u6ca1\u6709\u529f\u80fd\u7c7b\u578b\r\n        /// </summary>\r\n        [global::ProtoBuf.ProtoEnum(Name = @\"NONE\")]\r\n        None = 0,\r\n        /// <summary>\r\n        /// \u751f\u4ea7\r\n        /// </summary>\r\n        [global::ProtoBuf.ProtoEnum()]\r\n        Produce = 1,\r\n        /// <summary>\r\n        /// \u529f\u80fd\r\n        /// </summary>\r\n        [global::ProtoBuf.ProtoEnum()]\r\n        Function = 2,\r\n    }\r\n\r\n}\r\n\r\n#pragma warning restore CS1591, CS0612, CS3021\r\n```. ",
    "zbynek001": "The application is running on full .net 4.6.2., not sure why it went there. \r\nAnd it didn't happen every time, only on some rare occasions. The application is running on full .net 4.6.2., not sure why it went there. \r\nAnd it didn't happen every time, only on some rare occasions. ",
    "vmas": "OK. Thank you for your help.. OK. Thank you for your help.. ",
    "mjeanrichard": "Thanks for your fast response. I don't need it today, since it currently works if I disable .net native. I'll need it as soon as I want to deploy it to the store though. So next n months with n smaller than 6 :-). I am a code-first person. I could however switch to contract-first if that would solve my problem.... Thanks for your fast response. I don't need it today, since it currently works if I disable .net native. I'll need it as soon as I want to deploy it to the store though. So next n months with n smaller than 6 :-). I am a code-first person. I could however switch to contract-first if that would solve my problem.... ",
    "Serj8500": "Yep it works in the current 2.3.0-alpha, thank you =). Hi Lucian,\r\n\r\nThank you for your response! \r\n\r\nIt seems that before 2.3.0 everything worked fine without setting AsReference=true for Items and Marc in his code in the [original discussion](https://stackoverflow.com/questions/14436606/) in the ExecuteHackedViaSurrogate() directly specifies: \r\n\r\n`// or just remove AsReference on Items`\r\n`model[typeof(B)][2].AsReference = false;`\r\n\r\nAm I right that since 2.3.0 there is no need to use SetSurrogate and substitute KeyValuePair with a custom RefPair in order to avoid duplicates of the same object referenced by different keys on deserializing? And now it's enough just to specify AsReference=true for the dictionary itself?\r\n\r\nBest Regards,\r\nSergey.\r\n. This is great! Maybe it makes sense to specify somewhere in the release notes this change then? Just to avoid confusion of somebody else...\r\n\r\nAnyway thank you Lucian for the clarification and Marc and the rest team for the library itself and the new cool feature! =). Yep it works in the current 2.3.0-alpha, thank you =). Hi Lucian,\r\n\r\nThank you for your response! \r\n\r\nIt seems that before 2.3.0 everything worked fine without setting AsReference=true for Items and Marc in his code in the [original discussion](https://stackoverflow.com/questions/14436606/) in the ExecuteHackedViaSurrogate() directly specifies: \r\n\r\n`// or just remove AsReference on Items`\r\n`model[typeof(B)][2].AsReference = false;`\r\n\r\nAm I right that since 2.3.0 there is no need to use SetSurrogate and substitute KeyValuePair with a custom RefPair in order to avoid duplicates of the same object referenced by different keys on deserializing? And now it's enough just to specify AsReference=true for the dictionary itself?\r\n\r\nBest Regards,\r\nSergey.\r\n. This is great! Maybe it makes sense to specify somewhere in the release notes this change then? Just to avoid confusion of somebody else...\r\n\r\nAnyway thank you Lucian for the clarification and Marc and the rest team for the library itself and the new cool feature! =). ",
    "PMExtra": "@mgravell Thanks a lot. I am using a third party socket framework and that process a back-buffer in a MemoryStream. So shall we add the MSB check to the `TryReadLengthPrefix` method?. @mgravell Thanks a lot. I am using a third party socket framework and that process a back-buffer in a MemoryStream. So shall we add the MSB check to the `TryReadLengthPrefix` method?. ",
    "HaleLu": "Thanks. It works when using 2.3.0-gamma.. Thanks. It works when using 2.3.0-gamma.. ",
    "rig12": "I've seen a [stackoverflow ](https://stackoverflow.com/questions/13802844/protobuf-net-into-proto-generates-enum-conflicts) solution. And unfortunately didn't find the way to make change in RuntimeTypeModel. Is there any?. Marc,\r\nthanks for the feedback\r\nI'll try to use attribute for now.\r\nBut I wonder if you tell me how to configure enums through `RuntimeTypeModel`\r\nThere's a lot of them )\r\n. Thanks a lot\r\nI'll be waiting. I fetched from github and built locally, though still seeing 2.3.0.0-gamma version\r\nAnd Name field from ValueMember, which I got by indexer [typeof(HazEnum.SomeEnum)][1] in example above - this is read only property.\r\nDid I get it right?\r\n```\r\ninternal void SetName(string name)\r\n        {\r\n            if (name != this.name)\r\n            {\r\n                ThrowIfFrozen();\r\n                this.name = name;\r\n            }\r\n        }\r\n```\r\nI make ValueMember.SetName public for now, but consider this as temporary solution, and it does workaround.. I've seen a [stackoverflow ](https://stackoverflow.com/questions/13802844/protobuf-net-into-proto-generates-enum-conflicts) solution. And unfortunately didn't find the way to make change in RuntimeTypeModel. Is there any?. Marc,\r\nthanks for the feedback\r\nI'll try to use attribute for now.\r\nBut I wonder if you tell me how to configure enums through `RuntimeTypeModel`\r\nThere's a lot of them )\r\n. Thanks a lot\r\nI'll be waiting. I fetched from github and built locally, though still seeing 2.3.0.0-gamma version\r\nAnd Name field from ValueMember, which I got by indexer [typeof(HazEnum.SomeEnum)][1] in example above - this is read only property.\r\nDid I get it right?\r\n```\r\ninternal void SetName(string name)\r\n        {\r\n            if (name != this.name)\r\n            {\r\n                ThrowIfFrozen();\r\n                this.name = name;\r\n            }\r\n        }\r\n```\r\nI make ValueMember.SetName public for now, but consider this as temporary solution, and it does workaround.. ",
    "KingKnecht": "` public static byte[] ToByteArray<T>(this T obj)\r\n        {\r\n            using (var memStream = new MemoryStream())\r\n            {\r\n                Serializer.Serialize(memStream, obj);\r\n                return memStream.ToArray();\r\n            }\r\n        }`\r\n\r\n`  public static T FromByteArray<T>(this byte[] protoBytes)\r\n        {\r\n            T result;\r\n            using (var memStream = new MemoryStream(protoBytes))\r\n            {\r\n                 result = Serializer.Deserialize<T>(memStream);\r\n            }\r\n           return result;\r\n        }`\r\n\r\nworks for me at the moment. Hm, not sure. In case of JSON, serializer returns a string, right? I think this is because one can presume that applications that act on JSON can handle strings as data by default. How is it with protobuf? I think byte array won't be too esoteric. . ` public static byte[] ToByteArray<T>(this T obj)\r\n        {\r\n            using (var memStream = new MemoryStream())\r\n            {\r\n                Serializer.Serialize(memStream, obj);\r\n                return memStream.ToArray();\r\n            }\r\n        }`\r\n\r\n`  public static T FromByteArray<T>(this byte[] protoBytes)\r\n        {\r\n            T result;\r\n            using (var memStream = new MemoryStream(protoBytes))\r\n            {\r\n                 result = Serializer.Deserialize<T>(memStream);\r\n            }\r\n           return result;\r\n        }`\r\n\r\nworks for me at the moment. Hm, not sure. In case of JSON, serializer returns a string, right? I think this is because one can presume that applications that act on JSON can handle strings as data by default. How is it with protobuf? I think byte array won't be too esoteric. . ",
    "mshindal": "As far as I know CF does not support .NET Standard, unfortunately. . I use VS2008. I don't think Compact Framework development is supported in any release after VS2008. . I definitely understand not wanting to have old versions of VS installed. The only way to build Compact Framework apps is with VS2008 though. Maybe install it in a VM or Docker or something? Why is it such a PITA to support?. As far as I know CF does not support .NET Standard, unfortunately. . I use VS2008. I don't think Compact Framework development is supported in any release after VS2008. . I definitely understand not wanting to have old versions of VS installed. The only way to build Compact Framework apps is with VS2008 though. Maybe install it in a VM or Docker or something? Why is it such a PITA to support?. ",
    "chrishaly": "This method can partial solve my problem. In my project i can control the startup.\r\nHowever some of library projects will provide to others use.\r\n\r\nIn some document about Protobuf 3, have two solution for Inheritace: one is use oneof equals to ProtoInclude and the other is \"Composite\" define a property with type is base class.\r\n\r\nIf use ProtoInclude there a two little flaw\r\n1.  When add or remove a child class, you should modify base class.\r\n2. Consider about byte size of field number, use which number as the first ProtoInclude argument sometimes becomes a question.\r\nSince if use a small number when need to add filed to base class the property field number will greater than child class field number, and then add a child class, the child class field number will greater than some property field number, I think it's a little problem.\r\nBut if use a great enough number will west of memory and network bandwidth.\r\n\r\nConsidering these problem, I prefer to add a ProtoInheritAttribute, in .net one class only have one base class just set the base class field number to 1.\r\n\r\nHow do you think?. I've try to solved this case, and create a pull request\r\nhttps://github.com/mgravell/protobuf-net/pull/287\r\nplease review. @mgravell \r\nI've improved the code for ProtoInherit please help me to review https://github.com/mgravell/protobuf-net/compare/master...chrishaly:master, if it's ok I will create a pull request. Or else please give me some advise.. * the ProtoInherit is used on SubType, which treat BaseType as a (virtual) Field\r\n* Field number of BaseType suggest to be 1, in .NET just support single inheritace\r\n* just keep in concrete class fieldNumber of ProtoInherit not duplicate with fields & ProtoInclude's fieldNumber, no need to think about field number in BaseType or it's SubType.\r\nusage as following, MessageChild is equals to MessageChildB\r\n``` csharp\r\n        [ProtoContract]\r\n        public class MessageBase\r\n        {\r\n            [ProtoMember(1)]\r\n            public int Id { get; set; }\r\n        }\r\n\r\n        [ProtoContract]\r\n        [ProtoInherit(1)] //fieldNumber_inherit\r\n        //[ProtoInclude(fieldNumber_include_x)] //if exist\r\n        public class MessageChild : MessageBase\r\n        {\r\n            [ProtoMember(2)] //fieldfieldNumber_include_x\r\n            public string Name { get; set; }\r\n        }\r\n\r\n        [ProtoContract]\r\n        public class MessageChildB\r\n        {\r\n            [ProtoMember(1)]\r\n            public MessageBase Base { get; set; }\r\n\r\n            [ProtoMember(2)]\r\n            public string Name { get; set; }\r\n        }\r\n```\r\nabout fieldNumber it said that fieldNumber_inherit, fieldNumber_include_x, fieldfieldNumber_include_x must be unique as above.\r\n\r\nin terms of proto2 syntax:\r\n``` proto\r\nmessage MessageBase {\r\n    optional int32 Id = 1;\r\n}\r\nmessage MessageChild {\r\n    optional MessageBase _Base = 1;\r\n    optional string Name = 2;\r\n}\r\nmessage MessageChild {\r\n    optional MessageBase Base = 1;\r\n    optional string Name = 2;\r\n}\r\n```\r\n\r\nin terms of proto3 syntax:\r\n``` proto\r\nsyntax = \"proto3\";\r\n\r\nmessage MessageBase {\r\n    int32 Id = 1;\r\n}\r\nmessage MessageChild {\r\n    MessageBase _Base = 1;\r\n    string Name = 2;\r\n}\r\nmessage MessageChildB {\r\n    MessageBase Base = 1;\r\n    string Name = 2;\r\n}\r\n```\r\noneof is not sutable for ProtoInherit.. protobuf usually used to transport data from end to end, the data is indistinguishable whole. and except bytes content of protobuf, there usually have some other filed to mark what's the type is. such as in RPC extra data at least function name will represent, function name awared the request type is also awared.\r\nthe actual packet may be like {funcationName: \"GetProduct\", RequestContent: \"bytes data\"}.\r\n\r\nif your ProtoInclude we still should know the exact concrete type. Even if it's not need to know the exact concrete type type base type must aware, so we transported the base type why not directly transport the exact type.\r\n\r\nSo I think what the exact type is not a problem.\r\n\r\n\r\nThe scenario of ProtoInherit such as: \r\nbase type is provider by other team, we are don't have permission to modify them.\r\nwhat's we provided is class library there's no controllable entry to do AddSubType to user's TypeModel.\r\nwhen write the concrete child type just mark it's base type not need to do some extra configuration.\r\n\r\nProtoInherit used on concrete type what is transparent to it's base type. if the concrete type will be remove just delete the class file, no need to do extra work.\r\n. I'm not clear when don't know the concrete base type is, except generic type.\r\n\r\nI did a test for generic class, it passed.\r\n\r\n```\r\n[ProtoContract]\r\n\t\t[ProtoInherit(1)]\r\n\t\tpublic class MessageChildG<T> : MessageBaseG<MessageChildG<T>>\r\n\t\t{\r\n\t\t\t[ProtoMember(2)]\r\n\t\t\tpublic string Name { get; set; }\r\n\r\n\t\t\t[ProtoMember(3)]\r\n\t\t\tpublic Pet Pet { get; set; }\r\n\r\n\r\n\t\t\t[ProtoMember(4)]\r\n\t\t\tpublic T ValueG { get; set; }\r\n\t\t}\r\n\r\n\t[Fact]\r\n\t\tpublic void GenericTest1()\r\n\t\t{\r\n\t\t\tvar name = \"Hello\";\r\n\t\t\tvar id = 9;\r\n\t\t\tvar petId = 67;\r\n\t\t\tvar petName = \"Cat\";\r\n\r\n\t\t\tvar person = new MessageChildG<string>\r\n\t\t\t{\r\n\t\t\t\tId = id,\r\n\t\t\t\tName = name,\r\n\t\t\t\tPet = new Pet\r\n\t\t\t\t{\r\n\t\t\t\t\tPetId = petId,\r\n\t\t\t\t\tPetName = petName\r\n\t\t\t\t},\r\n\t\t\t\tValueG = \"value in generic parameter type\",\r\n\t\t\t};\r\n\r\n\t\t\tusing (var ms = new MemoryStream())\r\n\t\t\t{\r\n\t\t\t\tSerializer.Serialize(ms, person);\r\n\t\t\t\tms.Position = 0;\r\n\t\t\t\tvar dobj = Serializer.Deserialize<MessageChildG<string>>(ms);\r\n\r\n\t\t\t\tAssert.Equal(id, dobj.Id);\r\n\t\t\t\tAssert.Equal(name, dobj.Name);\r\n\t\t\t\tAssert.Equal(petId, dobj.Pet.PetId);\r\n\t\t\t\tAssert.Equal(petName, dobj.Pet.PetName);\r\n\t\t\t}\r\n\t\t}\r\n```. yes you are right\r\n\r\nchange code from\r\n```\r\nif (actualType.GetBaseType() == forType) return null; //for BaseTypeSerializer\r\n```\r\nto\r\n```\r\nif (forType.IsAssignableFrom(actualType)) return null; //for BaseTypeSerializer\r\n```\r\nin  TypeSerializer.cs, serialization/deserialization works fine.\r\n\r\nthe theory of ProtoInherit is Add a Virtual Member(BaseType) to Current Type, when serialize except current  type's properties also serialize BaseType as a member. no matter what the concrete type is, just the serializer can read or write BaseType's properties from(or to) the concrete type is ok.\r\n\r\n```\r\n\tpublic class ProtoInheritTest\r\n\t{\r\n\t\t[Fact]\r\n\t\tpublic void ChildsChildTest()\r\n\t\t{\r\n\t\t\tvar name = \"DS 2017\";\r\n\t\t\tvar id = 9;\r\n\t\t\tvar diameter = 67;\r\n\t\t\tvar license = \"CAR3256\";\r\n\t\t\tvar passengerCapacity = 4;\r\n\r\n\t\t\tvar car = new Car\r\n\t\t\t{\r\n\t\t\t\tId = id,\r\n\t\t\t\tName = name,\r\n\t\t\t\tWheels = new[]\r\n\t\t\t\t{\r\n\t\t\t\t\tnew Wheel\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDiameter = diameter,\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tLicense = license,\r\n\t\t\t\tPassengerCapacity = passengerCapacity,\r\n\t\t\t};\r\n\r\n\t\t\tusing (var ms = new MemoryStream())\r\n\t\t\t{\r\n\t\t\t\tSerializer.Serialize(ms, car);\r\n\r\n\t\t\t\tms.Position = 0;\r\n\t\t\t\tvar dobj = Serializer.Deserialize<Car>(ms);\r\n\r\n\t\t\t\tAssert.Equal(id, dobj.Id);\r\n\t\t\t\tAssert.Equal(name, dobj.Name);\r\n\t\t\t\tAssert.Equal(diameter, dobj.Wheels[0].Diameter);\r\n\t\t\t\tAssert.Equal(license, dobj.License);\r\n\t\t\t\tAssert.Equal(passengerCapacity, dobj.PassengerCapacity);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t[ProtoContract]\r\n\t\tpublic class Vehicle\r\n\t\t{\r\n\t\t\t[ProtoMember(1)]\r\n\t\t\tpublic int Id { get; set; }\r\n\r\n\t\t\t[ProtoMember(2)]\r\n\t\t\tpublic virtual string Name { get; set; }\r\n\t\t}\r\n\r\n\t\t[ProtoContract]\r\n\t\t[ProtoInherit(1)]\r\n\t\tpublic class RoadVehicle : Vehicle\r\n\t\t{\r\n\t\t\t[ProtoMember(2)]\r\n\t\t\tpublic string License { get; set; }\r\n\r\n\t\t\t[ProtoMember(3)]\r\n\t\t\tpublic Wheel[] Wheels { get; set; }\r\n\t\t}\r\n\r\n\t\t[ProtoContract]\r\n\t\t[ProtoInherit(1)]\r\n\t\tpublic class Car : RoadVehicle\r\n\t\t{\r\n\t\t\t[ProtoMember(2)]\r\n\t\t\tpublic int PassengerCapacity { get; set; }\r\n\t\t}\r\n\r\n\t\t[ProtoContract]\r\n\t\tpublic class Wheel\r\n\t\t{\r\n\t\t\t[ProtoMember(1)]\r\n\t\t\tpublic int Diameter { get; set; }\r\n\t\t}\r\n\t}\r\n```. This method can partial solve my problem. In my project i can control the startup.\r\nHowever some of library projects will provide to others use.\r\n\r\nIn some document about Protobuf 3, have two solution for Inheritace: one is use oneof equals to ProtoInclude and the other is \"Composite\" define a property with type is base class.\r\n\r\nIf use ProtoInclude there a two little flaw\r\n1.  When add or remove a child class, you should modify base class.\r\n2. Consider about byte size of field number, use which number as the first ProtoInclude argument sometimes becomes a question.\r\nSince if use a small number when need to add filed to base class the property field number will greater than child class field number, and then add a child class, the child class field number will greater than some property field number, I think it's a little problem.\r\nBut if use a great enough number will west of memory and network bandwidth.\r\n\r\nConsidering these problem, I prefer to add a ProtoInheritAttribute, in .net one class only have one base class just set the base class field number to 1.\r\n\r\nHow do you think?. I've try to solved this case, and create a pull request\r\nhttps://github.com/mgravell/protobuf-net/pull/287\r\nplease review. @mgravell \r\nI've improved the code for ProtoInherit please help me to review https://github.com/mgravell/protobuf-net/compare/master...chrishaly:master, if it's ok I will create a pull request. Or else please give me some advise.. * the ProtoInherit is used on SubType, which treat BaseType as a (virtual) Field\r\n* Field number of BaseType suggest to be 1, in .NET just support single inheritace\r\n* just keep in concrete class fieldNumber of ProtoInherit not duplicate with fields & ProtoInclude's fieldNumber, no need to think about field number in BaseType or it's SubType.\r\nusage as following, MessageChild is equals to MessageChildB\r\n``` csharp\r\n        [ProtoContract]\r\n        public class MessageBase\r\n        {\r\n            [ProtoMember(1)]\r\n            public int Id { get; set; }\r\n        }\r\n\r\n        [ProtoContract]\r\n        [ProtoInherit(1)] //fieldNumber_inherit\r\n        //[ProtoInclude(fieldNumber_include_x)] //if exist\r\n        public class MessageChild : MessageBase\r\n        {\r\n            [ProtoMember(2)] //fieldfieldNumber_include_x\r\n            public string Name { get; set; }\r\n        }\r\n\r\n        [ProtoContract]\r\n        public class MessageChildB\r\n        {\r\n            [ProtoMember(1)]\r\n            public MessageBase Base { get; set; }\r\n\r\n            [ProtoMember(2)]\r\n            public string Name { get; set; }\r\n        }\r\n```\r\nabout fieldNumber it said that fieldNumber_inherit, fieldNumber_include_x, fieldfieldNumber_include_x must be unique as above.\r\n\r\nin terms of proto2 syntax:\r\n``` proto\r\nmessage MessageBase {\r\n    optional int32 Id = 1;\r\n}\r\nmessage MessageChild {\r\n    optional MessageBase _Base = 1;\r\n    optional string Name = 2;\r\n}\r\nmessage MessageChild {\r\n    optional MessageBase Base = 1;\r\n    optional string Name = 2;\r\n}\r\n```\r\n\r\nin terms of proto3 syntax:\r\n``` proto\r\nsyntax = \"proto3\";\r\n\r\nmessage MessageBase {\r\n    int32 Id = 1;\r\n}\r\nmessage MessageChild {\r\n    MessageBase _Base = 1;\r\n    string Name = 2;\r\n}\r\nmessage MessageChildB {\r\n    MessageBase Base = 1;\r\n    string Name = 2;\r\n}\r\n```\r\noneof is not sutable for ProtoInherit.. protobuf usually used to transport data from end to end, the data is indistinguishable whole. and except bytes content of protobuf, there usually have some other filed to mark what's the type is. such as in RPC extra data at least function name will represent, function name awared the request type is also awared.\r\nthe actual packet may be like {funcationName: \"GetProduct\", RequestContent: \"bytes data\"}.\r\n\r\nif your ProtoInclude we still should know the exact concrete type. Even if it's not need to know the exact concrete type type base type must aware, so we transported the base type why not directly transport the exact type.\r\n\r\nSo I think what the exact type is not a problem.\r\n\r\n\r\nThe scenario of ProtoInherit such as: \r\nbase type is provider by other team, we are don't have permission to modify them.\r\nwhat's we provided is class library there's no controllable entry to do AddSubType to user's TypeModel.\r\nwhen write the concrete child type just mark it's base type not need to do some extra configuration.\r\n\r\nProtoInherit used on concrete type what is transparent to it's base type. if the concrete type will be remove just delete the class file, no need to do extra work.\r\n. I'm not clear when don't know the concrete base type is, except generic type.\r\n\r\nI did a test for generic class, it passed.\r\n\r\n```\r\n[ProtoContract]\r\n\t\t[ProtoInherit(1)]\r\n\t\tpublic class MessageChildG<T> : MessageBaseG<MessageChildG<T>>\r\n\t\t{\r\n\t\t\t[ProtoMember(2)]\r\n\t\t\tpublic string Name { get; set; }\r\n\r\n\t\t\t[ProtoMember(3)]\r\n\t\t\tpublic Pet Pet { get; set; }\r\n\r\n\r\n\t\t\t[ProtoMember(4)]\r\n\t\t\tpublic T ValueG { get; set; }\r\n\t\t}\r\n\r\n\t[Fact]\r\n\t\tpublic void GenericTest1()\r\n\t\t{\r\n\t\t\tvar name = \"Hello\";\r\n\t\t\tvar id = 9;\r\n\t\t\tvar petId = 67;\r\n\t\t\tvar petName = \"Cat\";\r\n\r\n\t\t\tvar person = new MessageChildG<string>\r\n\t\t\t{\r\n\t\t\t\tId = id,\r\n\t\t\t\tName = name,\r\n\t\t\t\tPet = new Pet\r\n\t\t\t\t{\r\n\t\t\t\t\tPetId = petId,\r\n\t\t\t\t\tPetName = petName\r\n\t\t\t\t},\r\n\t\t\t\tValueG = \"value in generic parameter type\",\r\n\t\t\t};\r\n\r\n\t\t\tusing (var ms = new MemoryStream())\r\n\t\t\t{\r\n\t\t\t\tSerializer.Serialize(ms, person);\r\n\t\t\t\tms.Position = 0;\r\n\t\t\t\tvar dobj = Serializer.Deserialize<MessageChildG<string>>(ms);\r\n\r\n\t\t\t\tAssert.Equal(id, dobj.Id);\r\n\t\t\t\tAssert.Equal(name, dobj.Name);\r\n\t\t\t\tAssert.Equal(petId, dobj.Pet.PetId);\r\n\t\t\t\tAssert.Equal(petName, dobj.Pet.PetName);\r\n\t\t\t}\r\n\t\t}\r\n```. yes you are right\r\n\r\nchange code from\r\n```\r\nif (actualType.GetBaseType() == forType) return null; //for BaseTypeSerializer\r\n```\r\nto\r\n```\r\nif (forType.IsAssignableFrom(actualType)) return null; //for BaseTypeSerializer\r\n```\r\nin  TypeSerializer.cs, serialization/deserialization works fine.\r\n\r\nthe theory of ProtoInherit is Add a Virtual Member(BaseType) to Current Type, when serialize except current  type's properties also serialize BaseType as a member. no matter what the concrete type is, just the serializer can read or write BaseType's properties from(or to) the concrete type is ok.\r\n\r\n```\r\n\tpublic class ProtoInheritTest\r\n\t{\r\n\t\t[Fact]\r\n\t\tpublic void ChildsChildTest()\r\n\t\t{\r\n\t\t\tvar name = \"DS 2017\";\r\n\t\t\tvar id = 9;\r\n\t\t\tvar diameter = 67;\r\n\t\t\tvar license = \"CAR3256\";\r\n\t\t\tvar passengerCapacity = 4;\r\n\r\n\t\t\tvar car = new Car\r\n\t\t\t{\r\n\t\t\t\tId = id,\r\n\t\t\t\tName = name,\r\n\t\t\t\tWheels = new[]\r\n\t\t\t\t{\r\n\t\t\t\t\tnew Wheel\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tDiameter = diameter,\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tLicense = license,\r\n\t\t\t\tPassengerCapacity = passengerCapacity,\r\n\t\t\t};\r\n\r\n\t\t\tusing (var ms = new MemoryStream())\r\n\t\t\t{\r\n\t\t\t\tSerializer.Serialize(ms, car);\r\n\r\n\t\t\t\tms.Position = 0;\r\n\t\t\t\tvar dobj = Serializer.Deserialize<Car>(ms);\r\n\r\n\t\t\t\tAssert.Equal(id, dobj.Id);\r\n\t\t\t\tAssert.Equal(name, dobj.Name);\r\n\t\t\t\tAssert.Equal(diameter, dobj.Wheels[0].Diameter);\r\n\t\t\t\tAssert.Equal(license, dobj.License);\r\n\t\t\t\tAssert.Equal(passengerCapacity, dobj.PassengerCapacity);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t[ProtoContract]\r\n\t\tpublic class Vehicle\r\n\t\t{\r\n\t\t\t[ProtoMember(1)]\r\n\t\t\tpublic int Id { get; set; }\r\n\r\n\t\t\t[ProtoMember(2)]\r\n\t\t\tpublic virtual string Name { get; set; }\r\n\t\t}\r\n\r\n\t\t[ProtoContract]\r\n\t\t[ProtoInherit(1)]\r\n\t\tpublic class RoadVehicle : Vehicle\r\n\t\t{\r\n\t\t\t[ProtoMember(2)]\r\n\t\t\tpublic string License { get; set; }\r\n\r\n\t\t\t[ProtoMember(3)]\r\n\t\t\tpublic Wheel[] Wheels { get; set; }\r\n\t\t}\r\n\r\n\t\t[ProtoContract]\r\n\t\t[ProtoInherit(1)]\r\n\t\tpublic class Car : RoadVehicle\r\n\t\t{\r\n\t\t\t[ProtoMember(2)]\r\n\t\t\tpublic int PassengerCapacity { get; set; }\r\n\t\t}\r\n\r\n\t\t[ProtoContract]\r\n\t\tpublic class Wheel\r\n\t\t{\r\n\t\t\t[ProtoMember(1)]\r\n\t\t\tpublic int Diameter { get; set; }\r\n\t\t}\r\n\t}\r\n```. ",
    "jgrossrieder": "I also did encounter some other cases where it seems that the AsReferenceDefault was just ignored, and I had to put the AsReference =true too, not exactly sure why.. I also did encounter some other cases where it seems that the AsReferenceDefault was just ignored, and I had to put the AsReference =true too, not exactly sure why.. ",
    "mizuno-gsinet": "@mgravell Thank you. [This](https://stackoverflow.com/questions/42600663/protobuf-net-addfield-ignores-ignorelisthandling) SO question seems relevant.. @mgravell Thank you. [This](https://stackoverflow.com/questions/42600663/protobuf-net-addfield-ignores-ignorelisthandling) SO question seems relevant.. ",
    "zhaocy1217": "you can try the following command in cmd.\r\nprotogen -i:ArmyConf.protodesc -o:ArmyConf.cs. you can try the following command in cmd.\r\nprotogen -i:ArmyConf.protodesc -o:ArmyConf.cs. ",
    "indy-singh": "In case it helps, you can find the test harness I put together [**here**](https://github.com/Singh400/ProtoBuf-Net-Test-Harness).\r\n\r\nCheers,\r\nIndy. @mintsoft Wow, nice! Just pulled in your code very quickly into my [**test harness**](https://github.com/Singh400/ProtoBuf-Net-Test-Harness) and ran a couple of quick iterations:-\r\n\r\nIterations|WithStockProtoBuf (MB)|WithCachedPool (MB)\r\n------------ | ------------- | -------------\r\n10000|8.8|0.9\r\n50000|39|4.3\r\n100000|80|8.7\r\n200000|160|17\r\n300000|321|34\r\n\r\nAs you can see a massive reduction LOH allocations, quick napkin maths says around ~90% fewer LOH allocations.\r\n\r\nQuick screenshot of dotTrace on the last test:-\r\n\r\n![withstockprotobufnet_vs_withcachedpool](https://user-images.githubusercontent.com/1906778/29752872-ec7df3a2-8b5d-11e7-9be4-239a59b06675.png)\r\n\r\nWithStockProtoBuf is on the left, and WithCachedPool is on the right.\r\n\r\nI was concerned that a change to the `BufferPool.cs` might result in different output from ProtoBuf. But a quick SHA1 of each output *.bin file reveals identical SHA1 hashes.\r\n\r\nCheers,\r\nIndy. @lbargaoanu That looks pretty interesting. I did find System.Buffers.ArrayPool and just branched a version of protobuf-net that is backed by System.Buffers.ArrayPool. It shows the same ~90% reduction in LOH allocations as the version mentioned by @mintsoft.\r\n\r\n![withstockprotobufnet_vs_witharraypool](https://user-images.githubusercontent.com/1906778/29785987-65f1cb78-8c21-11e7-8c98-5203baefb932.png)\r\n\r\nIf I get time, I might spike out another implementation using  Microsoft.IO.RecyclableMemoryStream.\r\n\r\nCheers,\r\nIndy. @mgravell Any thoughts on this and potential solutions? It seems like the branch by @mintsoft does solve this particular problem.. I have been using @mintsoft branch in production for over a week now, and I have seen the fragmentation issue severely reduced.\r\n\r\n@mgravell I acknowledge that there at 166 open issues; but I would greatly appreciate it if we could come up with a solution to the fragmentation of the LOH and get the fix released onto NuGet so that the entire protobuf-net community can benefit.\r\n\r\nMany thanks,\r\nIndy. Any thoughts on this @mgravell or the PR by @mintsoft?\r\n\r\nCheers,\r\nIndy. @mgravell Any thoughts?. In case it helps, you can find the test harness I put together [**here**](https://github.com/Singh400/ProtoBuf-Net-Test-Harness).\r\n\r\nCheers,\r\nIndy. @mintsoft Wow, nice! Just pulled in your code very quickly into my [**test harness**](https://github.com/Singh400/ProtoBuf-Net-Test-Harness) and ran a couple of quick iterations:-\r\n\r\nIterations|WithStockProtoBuf (MB)|WithCachedPool (MB)\r\n------------ | ------------- | -------------\r\n10000|8.8|0.9\r\n50000|39|4.3\r\n100000|80|8.7\r\n200000|160|17\r\n300000|321|34\r\n\r\nAs you can see a massive reduction LOH allocations, quick napkin maths says around ~90% fewer LOH allocations.\r\n\r\nQuick screenshot of dotTrace on the last test:-\r\n\r\n![withstockprotobufnet_vs_withcachedpool](https://user-images.githubusercontent.com/1906778/29752872-ec7df3a2-8b5d-11e7-9be4-239a59b06675.png)\r\n\r\nWithStockProtoBuf is on the left, and WithCachedPool is on the right.\r\n\r\nI was concerned that a change to the `BufferPool.cs` might result in different output from ProtoBuf. But a quick SHA1 of each output *.bin file reveals identical SHA1 hashes.\r\n\r\nCheers,\r\nIndy. @lbargaoanu That looks pretty interesting. I did find System.Buffers.ArrayPool and just branched a version of protobuf-net that is backed by System.Buffers.ArrayPool. It shows the same ~90% reduction in LOH allocations as the version mentioned by @mintsoft.\r\n\r\n![withstockprotobufnet_vs_witharraypool](https://user-images.githubusercontent.com/1906778/29785987-65f1cb78-8c21-11e7-8c98-5203baefb932.png)\r\n\r\nIf I get time, I might spike out another implementation using  Microsoft.IO.RecyclableMemoryStream.\r\n\r\nCheers,\r\nIndy. @mgravell Any thoughts on this and potential solutions? It seems like the branch by @mintsoft does solve this particular problem.. I have been using @mintsoft branch in production for over a week now, and I have seen the fragmentation issue severely reduced.\r\n\r\n@mgravell I acknowledge that there at 166 open issues; but I would greatly appreciate it if we could come up with a solution to the fragmentation of the LOH and get the fix released onto NuGet so that the entire protobuf-net community can benefit.\r\n\r\nMany thanks,\r\nIndy. Any thoughts on this @mgravell or the PR by @mintsoft?\r\n\r\nCheers,\r\nIndy. @mgravell Any thoughts?. ",
    "kirbatious": "Hey @lbargaoanu thanks for replying! I actually tried doing exactly what you've done (i.e. added my test to my local copy of protobuf) and I could see that the problem was related to the keyed object stuff, but I certainly didn't consider that just deleting all that code might fix it! Surely it's there for a reason? Hopefully @mgravell knows! . @lbargaoanu Is there anything I can do to help see whether your suggested fix can make it into the master codebase? I could take and deploy your fork but I'd rather stay with the official releases to avoid future pain!. Hey @lbargaoanu thanks for replying! I actually tried doing exactly what you've done (i.e. added my test to my local copy of protobuf) and I could see that the problem was related to the keyed object stuff, but I certainly didn't consider that just deleting all that code might fix it! Surely it's there for a reason? Hopefully @mgravell knows! . @lbargaoanu Is there anything I can do to help see whether your suggested fix can make it into the master codebase? I could take and deploy your fork but I'd rather stay with the official releases to avoid future pain!. ",
    "MindGamesRussell": "Here is a simplified gist showing the issue:\r\n\r\nhttps://gist.github.com/FreeFlyingEnchilada/37b8b4e0223e92b60f237b070347ad77\r\n. Emphasizing that the issue is as suspected, reversing the order that \"SomeProperty\" and \"Tags\" are added to the object schema (from the above gist) results in the issue disappearing. Is there any practical scenario where the user would prefer properties, which typically mutate fields, be initialized prior to fields?\r\n\r\nSeems the logical order would be static fields, private fields, public fields, and then similarly for properties.. Yeah, that's the thing I'm not clear on. Is this a part of the Protobuf specification or a part of the implementation? If it's a part of the standard (*as in the annoying empty list -> null*) then meh, but it seems to unnecessarily leak implementation details into usage that can result in inexplicable crashes. In cases where the schema is built programmatically (as opposed to manual annotations) it can create the extremely bizarre behavior such that the order of declaration of fields/properties can change the behavior of the serializer. That I think is extremely undesirable.\r\n\r\nSimilarly even just updating the dictionary as opposed to calling specifically .add would also resolve this issue, though I can understand the desire to use .add for more clearly deterministic behavior. Crashing is probably better than deserializing to a valid but unexpected state.. The behavior of the underlying serializer, and it crashing, is most certainly not a part of my own code. The current situation is such that changing the order of declaration of properties/fields in a class can crash the serializer in one case and result in perfect serialization in the other. This is a very nasty leak of implementation details.\r\n\r\nThis behavior is either caused by an issue in this particular implementation of protocol buffers, or it is caused by the specification itself. In the former case, this is something that should be fixed. In the latter case, this is something I should be expected to simply work around.\r\n. Imagine we have two objects in some sort of pseudo code:\r\n\r\n\ttype t1\r\n\t{\r\n\t\t[SerializeOrder 1]\r\n\t\tProperty p {get {...} set {...} }\r\n\r\n\t\t[SerializeOrder 2]\r\n\t\tDictionary d\r\n\t}\r\n\r\n\ttype t2\r\n\t{\r\n\t\t[SerializeOrder 2]\r\n\t\tProperty p {get {...} set {...} }\r\n\r\n\t\t[SerializeOrder 1]\r\n\t\tDictionary d\r\n\t}\r\n\r\nYou are telling me you believe it is reasonable behavior for the serializer to work perfectly for one type and crash for the other? If the standard clearly forces this behavior upon the implementation (as in the case of serializing empty lists and null identically) then that's unfortunate, but it is certainly something that, excepting outstanding circumstances, I don't believe you can say is nothing to fix.. I agree this seems like a workable solution even moreso since the functionality is optional. However, this does not currently seem to be the default behavior (in this scenario) as of 2.3.2.. Here is a simplified gist showing the issue:\r\n\r\nhttps://gist.github.com/FreeFlyingEnchilada/37b8b4e0223e92b60f237b070347ad77\r\n. Emphasizing that the issue is as suspected, reversing the order that \"SomeProperty\" and \"Tags\" are added to the object schema (from the above gist) results in the issue disappearing. Is there any practical scenario where the user would prefer properties, which typically mutate fields, be initialized prior to fields?\r\n\r\nSeems the logical order would be static fields, private fields, public fields, and then similarly for properties.. Yeah, that's the thing I'm not clear on. Is this a part of the Protobuf specification or a part of the implementation? If it's a part of the standard (*as in the annoying empty list -> null*) then meh, but it seems to unnecessarily leak implementation details into usage that can result in inexplicable crashes. In cases where the schema is built programmatically (as opposed to manual annotations) it can create the extremely bizarre behavior such that the order of declaration of fields/properties can change the behavior of the serializer. That I think is extremely undesirable.\r\n\r\nSimilarly even just updating the dictionary as opposed to calling specifically .add would also resolve this issue, though I can understand the desire to use .add for more clearly deterministic behavior. Crashing is probably better than deserializing to a valid but unexpected state.. The behavior of the underlying serializer, and it crashing, is most certainly not a part of my own code. The current situation is such that changing the order of declaration of properties/fields in a class can crash the serializer in one case and result in perfect serialization in the other. This is a very nasty leak of implementation details.\r\n\r\nThis behavior is either caused by an issue in this particular implementation of protocol buffers, or it is caused by the specification itself. In the former case, this is something that should be fixed. In the latter case, this is something I should be expected to simply work around.\r\n. Imagine we have two objects in some sort of pseudo code:\r\n\r\n\ttype t1\r\n\t{\r\n\t\t[SerializeOrder 1]\r\n\t\tProperty p {get {...} set {...} }\r\n\r\n\t\t[SerializeOrder 2]\r\n\t\tDictionary d\r\n\t}\r\n\r\n\ttype t2\r\n\t{\r\n\t\t[SerializeOrder 2]\r\n\t\tProperty p {get {...} set {...} }\r\n\r\n\t\t[SerializeOrder 1]\r\n\t\tDictionary d\r\n\t}\r\n\r\nYou are telling me you believe it is reasonable behavior for the serializer to work perfectly for one type and crash for the other? If the standard clearly forces this behavior upon the implementation (as in the case of serializing empty lists and null identically) then that's unfortunate, but it is certainly something that, excepting outstanding circumstances, I don't believe you can say is nothing to fix.. I agree this seems like a workable solution even moreso since the functionality is optional. However, this does not currently seem to be the default behavior (in this scenario) as of 2.3.2.. ",
    "ilCosmico": "Never mind, I see now that it needs the latest c# version. Never mind, I see now that it needs the latest c# version. ",
    "BryantL": "Further to this, if I turn auto compilation off:\r\n```\r\nRuntimeTypeModel.Default.AutoCompile = false;\r\n```\r\n\r\nThe a more descriptive/useful error is generated:\r\n```\r\nSystem.InvalidOperationException: This operation cannot be performed on a default instance of ImmutableArray<T>.  Consider initializing the array, or checking the ImmutableArray<T>.IsDefault property.\r\n   at System.Collections.Immutable.ImmutableArray`1.ThrowInvalidOperationIfNotInitialized()\r\n   at System.Collections.Immutable.ImmutableArray`1.System.Collections.ICollection.get_Count()\r\n   at ProtoBuf.Serializers.ImmutableCollectionDecorator.Read(Object value, ProtoReader source)\r\n   at ProtoBuf.Serializers.FieldDecorator.Read(Object value, ProtoReader source)\r\n   at ProtoBuf.Serializers.TypeSerializer.Read(Object value, ProtoReader source)\r\n   at ProtoBuf.Meta.RuntimeTypeModel.Deserialize(Int32 key, Object value, ProtoReader source)\r\n   at ProtoBuf.Meta.TypeModel.DeserializeCore(ProtoReader reader, Type type, Object value, Boolean noAutoCreate)\r\n   at ProtoBuf.Meta.TypeModel.Deserialize(Stream source, Object value, Type type, SerializationContext context)\r\n   at ProtoBuf.Serializer.Deserialize[T](Stream source)\r\n```. As a workaround I have found that supplying a default empty immutable array in either the default constructor (and removing  `SkipConstructor = true`) or a method attributed with `ProtoBeforeDeserialization` stops the error occurring.\r\n\r\nIt would be good to have the issue resolved directly without the workarounds though :). Further to this, if I turn auto compilation off:\r\n```\r\nRuntimeTypeModel.Default.AutoCompile = false;\r\n```\r\n\r\nThe a more descriptive/useful error is generated:\r\n```\r\nSystem.InvalidOperationException: This operation cannot be performed on a default instance of ImmutableArray<T>.  Consider initializing the array, or checking the ImmutableArray<T>.IsDefault property.\r\n   at System.Collections.Immutable.ImmutableArray`1.ThrowInvalidOperationIfNotInitialized()\r\n   at System.Collections.Immutable.ImmutableArray`1.System.Collections.ICollection.get_Count()\r\n   at ProtoBuf.Serializers.ImmutableCollectionDecorator.Read(Object value, ProtoReader source)\r\n   at ProtoBuf.Serializers.FieldDecorator.Read(Object value, ProtoReader source)\r\n   at ProtoBuf.Serializers.TypeSerializer.Read(Object value, ProtoReader source)\r\n   at ProtoBuf.Meta.RuntimeTypeModel.Deserialize(Int32 key, Object value, ProtoReader source)\r\n   at ProtoBuf.Meta.TypeModel.DeserializeCore(ProtoReader reader, Type type, Object value, Boolean noAutoCreate)\r\n   at ProtoBuf.Meta.TypeModel.Deserialize(Stream source, Object value, Type type, SerializationContext context)\r\n   at ProtoBuf.Serializer.Deserialize[T](Stream source)\r\n```. As a workaround I have found that supplying a default empty immutable array in either the default constructor (and removing  `SkipConstructor = true`) or a method attributed with `ProtoBeforeDeserialization` stops the error occurring.\r\n\r\nIt would be good to have the issue resolved directly without the workarounds though :). ",
    "sophiepeithos": "protogen generates code like this\r\n`public string Query { get; set; } = \"\";`\r\nthen unity will complain error CS1519: Unexpected symbol `=' in class, struct, or interface member declaration. ok, so I managed to solve this problem by pass -sdk:2 to mcs.\r\nThen I can't get precompile to compile, I have to get precompile from r668.. Is use precompile from r668 to generate serialization and deserialization code going to work with the code generated by protogen?. ok\uff0cusing the precompile from r668 seems ok on windows, I can successfully serialize and deserialize proto3 map.\r\nbut It throw an exception when running precompile on macos:\r\nhuis-MacBook-Pro:precompile hui$ mono precompile.exe Model.dll -o:1.dll -t:a\r\nWARNING: The runtime version supported by this application is unavailable.\r\nUsing default runtime: v4.0.30319\r\nprotobuf-net pre-compiler\r\nNo framework specified; defaulting to 4.0.30319.42000\r\nResolved /Library/Frameworks/Mono.framework/Versions/5.2.0/lib/mono/4.5/mscorlib.dll\r\nResolved /Library/Frameworks/Mono.framework/Versions/5.2.0/lib/mono/4.5/System.dll\r\nResolved protobuf-net.dll\r\nAdding MessageContainingMapCalledEntry...\r\nMember 'ProtoBuf.ProtoMapAttribute' is a missing member and does not support the requested operation.\r\n  at IKVM.Reflection.MissingType.get_Attributes () [0x00006] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.Type.get_IsInterface () [0x00000] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.Type.IsAssignableFrom (IKVM.Reflection.Type type) [0x000c4] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.CustomAttributeData.GetCustomAttributesImpl (System.Collections.Generic.List`1[T] list, IKVM.Reflection.Module module, System.Int32 token, IKVM.Reflection.Type attributeType) [0x00063] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.CustomAttributeData.GetCustomAttributesImpl (System.Collections.Generic.List`1[T] list, IKVM.Reflection.MemberInfo member, IKVM.Reflection.Type attributeType) [0x00039] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.CustomAttributeData.__GetCustomAttributes (IKVM.Reflection.MemberInfo member, IKVM.Reflection.Type attributeType, System.Boolean inherit) [0x00031] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.MemberInfo.IsDefined (IKVM.Reflection.Type attributeType, System.Boolean inherit) [0x00000] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at ProtoBuf.Meta.MetaType.ApplyDefaultBehaviour () [0x004c0] in <3cd6a73ffeae488b98fe6fa28875c5e3>:0 \r\n  at ProtoBuf.Meta.RuntimeTypeModel.Add (IKVM.Reflection.Type type, System.Boolean applyDefaultBehaviour) [0x000eb] in <3cd6a73ffeae488b98fe6fa28875c5e3>:0 \r\n  at ProtoBuf.Precompile.PreCompileContext.Execute () [0x002a7] in <dc2388999df64e489ff273a6b981447e>:0 \r\n  at ProtoBuf.Precompile.Program.Main (System.String[] args) [0x00057] in <dc2388999df64e489ff273a6b981447e>:0 \r\n\r\nsorry about the bad formatting. protogen generates code like this\r\n`public string Query { get; set; } = \"\";`\r\nthen unity will complain error CS1519: Unexpected symbol `=' in class, struct, or interface member declaration. ok, so I managed to solve this problem by pass -sdk:2 to mcs.\r\nThen I can't get precompile to compile, I have to get precompile from r668.. Is use precompile from r668 to generate serialization and deserialization code going to work with the code generated by protogen?. ok\uff0cusing the precompile from r668 seems ok on windows, I can successfully serialize and deserialize proto3 map.\r\nbut It throw an exception when running precompile on macos:\r\nhuis-MacBook-Pro:precompile hui$ mono precompile.exe Model.dll -o:1.dll -t:a\r\nWARNING: The runtime version supported by this application is unavailable.\r\nUsing default runtime: v4.0.30319\r\nprotobuf-net pre-compiler\r\nNo framework specified; defaulting to 4.0.30319.42000\r\nResolved /Library/Frameworks/Mono.framework/Versions/5.2.0/lib/mono/4.5/mscorlib.dll\r\nResolved /Library/Frameworks/Mono.framework/Versions/5.2.0/lib/mono/4.5/System.dll\r\nResolved protobuf-net.dll\r\nAdding MessageContainingMapCalledEntry...\r\nMember 'ProtoBuf.ProtoMapAttribute' is a missing member and does not support the requested operation.\r\n  at IKVM.Reflection.MissingType.get_Attributes () [0x00006] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.Type.get_IsInterface () [0x00000] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.Type.IsAssignableFrom (IKVM.Reflection.Type type) [0x000c4] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.CustomAttributeData.GetCustomAttributesImpl (System.Collections.Generic.List`1[T] list, IKVM.Reflection.Module module, System.Int32 token, IKVM.Reflection.Type attributeType) [0x00063] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.CustomAttributeData.GetCustomAttributesImpl (System.Collections.Generic.List`1[T] list, IKVM.Reflection.MemberInfo member, IKVM.Reflection.Type attributeType) [0x00039] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.CustomAttributeData.__GetCustomAttributes (IKVM.Reflection.MemberInfo member, IKVM.Reflection.Type attributeType, System.Boolean inherit) [0x00031] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at IKVM.Reflection.MemberInfo.IsDefined (IKVM.Reflection.Type attributeType, System.Boolean inherit) [0x00000] in <523ab91bcfd44fcaaadcaa2aa7737e44>:0 \r\n  at ProtoBuf.Meta.MetaType.ApplyDefaultBehaviour () [0x004c0] in <3cd6a73ffeae488b98fe6fa28875c5e3>:0 \r\n  at ProtoBuf.Meta.RuntimeTypeModel.Add (IKVM.Reflection.Type type, System.Boolean applyDefaultBehaviour) [0x000eb] in <3cd6a73ffeae488b98fe6fa28875c5e3>:0 \r\n  at ProtoBuf.Precompile.PreCompileContext.Execute () [0x002a7] in <dc2388999df64e489ff273a6b981447e>:0 \r\n  at ProtoBuf.Precompile.Program.Main (System.String[] args) [0x00057] in <dc2388999df64e489ff273a6b981447e>:0 \r\n\r\nsorry about the bad formatting. ",
    "liuyanlin": "1.It's more user friendly, vs only supports upward compatibility, but now many people are still using 2015 or old version, and your project uses 2017.. ok~ and have a last question. \r\ncan i replace protoc.exe in protobuf-net with any version of google's protoc.exe?\r\nWill prtobuf-net be affected by version of google protobuf?. 1.It's more user friendly, vs only supports upward compatibility, but now many people are still using 2015 or old version, and your project uses 2017.. ok~ and have a last question. \r\ncan i replace protoc.exe in protobuf-net with any version of google's protoc.exe?\r\nWill prtobuf-net be affected by version of google protobuf?. ",
    "vweevers": "It does! Thank you for the detailed explanation.. It does! Thank you for the detailed explanation.. ",
    "megakid": "Turns out this works in `protobuf-net 2.2.1` but starts to throw in `protobuf-net 2.3.0`. Turns out this works in `protobuf-net 2.2.1` but starts to throw in `protobuf-net 2.3.0`. ",
    "PeterLake2002": "Thanks for your reply.\r\nI am using Unity 2017.2.0  in Windows 10.\r\nAll version of Unity available here: [http://unity3d.com/unity/download/archive](http://unity3d.com/unity/download/archive). Thanks for your reply.\r\nI am using Unity 2017.2.0  in Windows 10.\r\nAll version of Unity available here: [http://unity3d.com/unity/download/archive](http://unity3d.com/unity/download/archive). ",
    "RockChia": "I confirmed that  protobuf-net-2.3.2 does not support xamarion.iso 11.2, becuase when I diassembly the System.Reflection.Emit.Lightweight.dll I found the code:\r\n`public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility)\r\n{\r\n\tthrow new PlatformNotSupportedException();\r\n}`. I confirmed that  protobuf-net-2.3.2 does not support xamarion.iso 11.2, becuase when I diassembly the System.Reflection.Emit.Lightweight.dll I found the code:\r\n`public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility)\r\n{\r\n\tthrow new PlatformNotSupportedException();\r\n}`. ",
    "posilva": "Because I was not able to compile the version 2.3.2 I gave a shot with this project https://github.com/floatinghotpot/protogen and I was able to generate .cs files from proto with the bundled protogen.exe but the Extensions were not properly generate. I tried to follow your suggestions but I wasn\u2019t able to build 2.3.2 in my MacOS. I was able to generate protobuf-net.dll but not protogen because I got 625 errors related with Protobufnet.Reflection project. \r\n\r\nI think the generated dll is missing some Metadata part that is needed by the Reflection project. I have posted the errors on SO post.\r\n\r\nI really would like to give a try on protobuf net but I already spent so much time and I do not have any more ideas except generate the proto for c++ and do a wrapper in c# to be able to use it in Unity.\r\n\r\nYou have been very nice and helpful and if you have any thoughts how to fix this build issue using my environment I would be very glad to confirm that It works and create a tutorial around our finds and provide a Mono version to the community.. Because I was not able to compile the version 2.3.2 I gave a shot with this project https://github.com/floatinghotpot/protogen and I was able to generate .cs files from proto with the bundled protogen.exe but the Extensions were not properly generate. I tried to follow your suggestions but I wasn\u2019t able to build 2.3.2 in my MacOS. I was able to generate protobuf-net.dll but not protogen because I got 625 errors related with Protobufnet.Reflection project. \r\n\r\nI think the generated dll is missing some Metadata part that is needed by the Reflection project. I have posted the errors on SO post.\r\n\r\nI really would like to give a try on protobuf net but I already spent so much time and I do not have any more ideas except generate the proto for c++ and do a wrapper in c# to be able to use it in Unity.\r\n\r\nYou have been very nice and helpful and if you have any thoughts how to fix this build issue using my environment I would be very glad to confirm that It works and create a tutorial around our finds and provide a Mono version to the community.. "
}