{
    "zachleat": "Please reopen when you\u2019ve added a test case for this issue.\n\nThanks!\n. Thank you! I also added a fix for when bottom > 0.\n. Thanks very much for this!\n\nI did have to reinstate the global per https://github.com/filamentgroup/fixed-sticky#using-the-polyfill-instead-of-native and switched the JS back to using tabs (as is the FilamentGroup loosely held standard) :)\n. Thanks!\n. Thanks x2!\n. I believe this is achievable with fixed-sticky. You just need to make your sidebar table-cell and a child element inside of it sticky, right?\n. Please reopen if needed.\n. Thanks for testing!\n. Thanks!\n. Hm?\n\nI believe the newest Safari uses native sticky and would not apply `fixedsticky-on`.\nI could not duplicate your issue with Firefox. Can you jsbin it?\n. Thanks!\n. Sounds like you got yourself out of a\n\n![](https://dl.dropboxusercontent.com/u/361291/gifs/caruso.gif)\n\nsticky situation\n\nYEAHHHHHHHHHHH\n. Are you sure you want to take this approach? It seems like you\u2019re going to run into a lot of problems on mobile devices with overflow.\n\nRegardless, I don\u2019t think this is a use case we\u2019re likely to want to support in the core library\u2014sorry! If you\u2019d like to discuss further please feel free to do so, but I\u2019m going to close this ticket for now. Thanks!\n. Hmm, maybe I\u2019m misunderstanding your use case? Can you whip up a quick demo on jsbin or something so I can see what you\u2019re referencing?\n. Ah, so I did a bit more research on this for #16 and I don\u2019t think we\u2019ll be polyfilling this case.\n\nAs a workaround, use position: fixed for your NAVIGATION header and use the normal page scrolling for your address book (remove the overflow). I think this will save you some headache later on anyway.\n\nGood luck!\n. I like this. I wonder, though, if setting a width on the fixed element is necessary?\n. Thanks! (I removed the width stuff)\n. Hm, after looking at this a little closer, I\u2019m going to remove it\u2014sorry. I\u2019m concerned about the semantics of a `refresh` method that basically does the same thing as `destroy` without reinitializing.\n\nThe test for this was also unreliable and failing sometimes inconsistently.\n\nKeep in mind that you can use `$('#myel').fixedsticky( 'update' );` to perform a more semantic \u201crefresh\u201d function.\n. If you\u2019re browsing `demo-control.html` that file doesn\u2019t use the polyfill. It is named as such in the context of a Control in a science experiment.\n\n`demo.html` should work fine. Make sure you check the DevTools to make sure the JS is loading correctly in your environment. Please reopen if you have additional questions. Thanks!\n. Not sure what you mean here, sticky elements are constrained to their parent containers by default. The plugin operates with that in mind.\n. See also #13.\n\nUnfortunately, I don\u2019t think we\u2019ll be supporting this use case. We tend to avoid element-overflow whenever possible for the widest support on touch screens (and easiest true-to-native scrolling).\n\nSorry! Feel free to fork and I\u2019d be happy to include a link in the README.\n. Hm, this seems to only apply when `top` and `bottom` are both set on the same element.\nI created a test case for this: http://filamentgroup.github.io/fixed-sticky/demos/demo-top-and-bottom.html\n\nIt seems the behavior is the same in both Firefox and Chrome. Is this something you\u2019d like to see fixed? Not sure if it\u2019s a real world use case or not.\n. Closing this. As of right now, Firefox and Chrome are reporting `bottom: auto` for the initial value. If overridden (as shown in the test case above), Firefox and Chrome both report the correct value, 0px.\n. Oh, huh.\n\nThe dot notation is for namespaced events. http://api.jquery.com/event.namespace/\n\nI checked in a fix that doesn\u2019t use trigger, can you retest (and reopen if needed)?\n\nThanks!\n. What browsers? I am having trouble reproducing this.\n. A ha, nevermind. I understand now\u2014the sticky element has to start at the top!\n. Fixed by 72749f1ffc42e8d2d5c8f7eb436e7acdccea163a\n. `$( \"#myElement\" ).fixedsticky( \"update\" )` inside a resize handler should do it. Please reopen if that didn\u2019t answer your question!\n. This seems specialized enough that it will require an example. Please reopen this issue with an attached test case (or codepen, jsbin, etc). Thank you!\n. Thanks!\n. Thanks @jshawl! @johnstrawserjr please reopen with a test case if this is still an issue.\n. Ah, sure! v0.1.4 should be available now.\n. Not really, no, other than we\u2019d have to add a bit more CSS to reset `top`, `bottom`, `left`, and `right` values. I\u2019d be in favor of changing this!\n. Thanks!\n. Yeah, this is a known issue, currently listed as `Make sticky smoother on transition between sticky/static for container based` as a TODO on the readme. I like your idea! I\u2019ll have a look.\n. Alright, this should be working in the issue-28 branch. Have a look, I\u2019ll leave it here for a bit and think over the weight/benefit of the feature.\n. That is a good question. My hunch is that 90% of the use cases will be vertical and not horizontal, but I\u2019ll leave this open and if people want this they can leave a comment. Or if someone wants to code this themselves, feel free and we\u2019ll look at merging in, I don\u2019t think the impact will be huge.\n. Yes, I\u2019d be open to adding AMD support here! It wasn\u2019t baked in from the beginning, if that\u2019s what you\u2019re asking.\n. I feel like this will get fixed upstream, a la http://developer.telerik.com/featured/scroll-event-change-ios-8-big-deal/ I don\u2019t think we\u2019ll solve this in our plugin. Alternatively, native sticky support will also solve this.\n. You\u2019re right. This assignment needs to be made before you make any calls to $.fn.fixedsticky. I added some clarity to the readme.\n. I started to merge this to have a look but some of the tests are failing. Can you patch that up?\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Could not reproduce on Chrome 39 on Yosemite at http://filamentgroup.github.io/fixed-sticky/demos/demo.html. Please reopen if you have more details about your environment.\n. Yeah, this took me awhile to learn back when I first started working on this polyfill.\n\nSticky elements are only sticky inside their parent. Instead of height: 2000px on .main use it on header.\n. I hear you, sir! I\u2019m really glad you posted your frustrations here\u2014I\u2019ve made some changes to the documentation\u2014especially around the heavy restriction of sticky elements staying inside their parent containers. Will you take a look and let me know if that\u2019s more clear? Would love your help on improving it.\n\nAs for container padding, this is currently highlighted on Issue #35.\n. They will be, after #35! Thank you!\n. ![](https://dl.dropboxusercontent.com/u/361291/gifs/fightme.gif)\n. ![](https://dl.dropboxusercontent.com/u/361291/gifs/fight.gif)\n. When the polyfill behavior is used, the `fixedsticky-on` class means the sticky behavior is currently active on the element.\n\nLet me know if you have additional questions!\n. Oh! Sorry\u2014I misunderstood. Do you have an example of the style you\u2019re trying to add?\n\nSeems like the workaround here (use the polyfill everywhere) might be acceptable for now, since so few native implementations exist (and in fact, native support is diminishing).\n. We consider overflow to be somewhat of an anti-pattern, given spotty mobile support. Therefore, we probably won\u2019t add this\u2014sorry!\n\nThe readme does currently say: \u201cThis plugin does not support overflow on parent elements.\u201d\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Huh\u2014yes, I can reproduce this.\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Hm, I think the build is failing because the QUnit grunt task requires bower modules.\n. Thanks!\n. Sorry this was late. Thanks!\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. I don\u2019t think we\u2019ll put this into the stock plugin. It\u2019s included easily enough in downstream CSS and I think might be a little too aggressive.\n\nSorry, thanks for the PR!\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Thanks!\n. Ran into this same issue and tried to merge this but ran into test errors. I pushed a change that updates the dummy height correctly, so if you ever circle back to update this, please pull first. Sorry I\u2019m so late with these merges\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. One small change since this PR went in, Chrome removed their impl\n. Thanks!\n. Looks great! I\u2019d love some of these ideas in the fixed-sticky plugin. I made an issue for one above.\n\nI don\u2019t think we\u2019ll support the `overflow` feature but can you be more specific about some of the other complaints re: performance and `resize` problems? We do have resize handlers in our plugin.\n. Oh, and if you\u2019re using our demo code you should at probably include some kind of attribution, yeah?\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Please reopen when you\u2019ve added a test case for this issue.\n\nThanks!\n. Thank you! I also added a fix for when bottom > 0.\n. Thanks very much for this!\n\nI did have to reinstate the global per https://github.com/filamentgroup/fixed-sticky#using-the-polyfill-instead-of-native and switched the JS back to using tabs (as is the FilamentGroup loosely held standard) :)\n. Thanks!\n. Thanks x2!\n. I believe this is achievable with fixed-sticky. You just need to make your sidebar table-cell and a child element inside of it sticky, right?\n. Please reopen if needed.\n. Thanks for testing!\n. Thanks!\n. Hm?\n\nI believe the newest Safari uses native sticky and would not apply `fixedsticky-on`.\nI could not duplicate your issue with Firefox. Can you jsbin it?\n. Thanks!\n. Sounds like you got yourself out of a\n\n![](https://dl.dropboxusercontent.com/u/361291/gifs/caruso.gif)\n\nsticky situation\n\nYEAHHHHHHHHHHH\n. Are you sure you want to take this approach? It seems like you\u2019re going to run into a lot of problems on mobile devices with overflow.\n\nRegardless, I don\u2019t think this is a use case we\u2019re likely to want to support in the core library\u2014sorry! If you\u2019d like to discuss further please feel free to do so, but I\u2019m going to close this ticket for now. Thanks!\n. Hmm, maybe I\u2019m misunderstanding your use case? Can you whip up a quick demo on jsbin or something so I can see what you\u2019re referencing?\n. Ah, so I did a bit more research on this for #16 and I don\u2019t think we\u2019ll be polyfilling this case.\n\nAs a workaround, use position: fixed for your NAVIGATION header and use the normal page scrolling for your address book (remove the overflow). I think this will save you some headache later on anyway.\n\nGood luck!\n. I like this. I wonder, though, if setting a width on the fixed element is necessary?\n. Thanks! (I removed the width stuff)\n. Hm, after looking at this a little closer, I\u2019m going to remove it\u2014sorry. I\u2019m concerned about the semantics of a `refresh` method that basically does the same thing as `destroy` without reinitializing.\n\nThe test for this was also unreliable and failing sometimes inconsistently.\n\nKeep in mind that you can use `$('#myel').fixedsticky( 'update' );` to perform a more semantic \u201crefresh\u201d function.\n. If you\u2019re browsing `demo-control.html` that file doesn\u2019t use the polyfill. It is named as such in the context of a Control in a science experiment.\n\n`demo.html` should work fine. Make sure you check the DevTools to make sure the JS is loading correctly in your environment. Please reopen if you have additional questions. Thanks!\n. Not sure what you mean here, sticky elements are constrained to their parent containers by default. The plugin operates with that in mind.\n. See also #13.\n\nUnfortunately, I don\u2019t think we\u2019ll be supporting this use case. We tend to avoid element-overflow whenever possible for the widest support on touch screens (and easiest true-to-native scrolling).\n\nSorry! Feel free to fork and I\u2019d be happy to include a link in the README.\n. Hm, this seems to only apply when `top` and `bottom` are both set on the same element.\nI created a test case for this: http://filamentgroup.github.io/fixed-sticky/demos/demo-top-and-bottom.html\n\nIt seems the behavior is the same in both Firefox and Chrome. Is this something you\u2019d like to see fixed? Not sure if it\u2019s a real world use case or not.\n. Closing this. As of right now, Firefox and Chrome are reporting `bottom: auto` for the initial value. If overridden (as shown in the test case above), Firefox and Chrome both report the correct value, 0px.\n. Oh, huh.\n\nThe dot notation is for namespaced events. http://api.jquery.com/event.namespace/\n\nI checked in a fix that doesn\u2019t use trigger, can you retest (and reopen if needed)?\n\nThanks!\n. What browsers? I am having trouble reproducing this.\n. A ha, nevermind. I understand now\u2014the sticky element has to start at the top!\n. Fixed by 72749f1ffc42e8d2d5c8f7eb436e7acdccea163a\n. `$( \"#myElement\" ).fixedsticky( \"update\" )` inside a resize handler should do it. Please reopen if that didn\u2019t answer your question!\n. This seems specialized enough that it will require an example. Please reopen this issue with an attached test case (or codepen, jsbin, etc). Thank you!\n. Thanks!\n. Thanks @jshawl! @johnstrawserjr please reopen with a test case if this is still an issue.\n. Ah, sure! v0.1.4 should be available now.\n. Not really, no, other than we\u2019d have to add a bit more CSS to reset `top`, `bottom`, `left`, and `right` values. I\u2019d be in favor of changing this!\n. Thanks!\n. Yeah, this is a known issue, currently listed as `Make sticky smoother on transition between sticky/static for container based` as a TODO on the readme. I like your idea! I\u2019ll have a look.\n. Alright, this should be working in the issue-28 branch. Have a look, I\u2019ll leave it here for a bit and think over the weight/benefit of the feature.\n. That is a good question. My hunch is that 90% of the use cases will be vertical and not horizontal, but I\u2019ll leave this open and if people want this they can leave a comment. Or if someone wants to code this themselves, feel free and we\u2019ll look at merging in, I don\u2019t think the impact will be huge.\n. Yes, I\u2019d be open to adding AMD support here! It wasn\u2019t baked in from the beginning, if that\u2019s what you\u2019re asking.\n. I feel like this will get fixed upstream, a la http://developer.telerik.com/featured/scroll-event-change-ios-8-big-deal/ I don\u2019t think we\u2019ll solve this in our plugin. Alternatively, native sticky support will also solve this.\n. You\u2019re right. This assignment needs to be made before you make any calls to $.fn.fixedsticky. I added some clarity to the readme.\n. I started to merge this to have a look but some of the tests are failing. Can you patch that up?\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Could not reproduce on Chrome 39 on Yosemite at http://filamentgroup.github.io/fixed-sticky/demos/demo.html. Please reopen if you have more details about your environment.\n. Yeah, this took me awhile to learn back when I first started working on this polyfill.\n\nSticky elements are only sticky inside their parent. Instead of height: 2000px on .main use it on header.\n. I hear you, sir! I\u2019m really glad you posted your frustrations here\u2014I\u2019ve made some changes to the documentation\u2014especially around the heavy restriction of sticky elements staying inside their parent containers. Will you take a look and let me know if that\u2019s more clear? Would love your help on improving it.\n\nAs for container padding, this is currently highlighted on Issue #35.\n. They will be, after #35! Thank you!\n. ![](https://dl.dropboxusercontent.com/u/361291/gifs/fightme.gif)\n. ![](https://dl.dropboxusercontent.com/u/361291/gifs/fight.gif)\n. When the polyfill behavior is used, the `fixedsticky-on` class means the sticky behavior is currently active on the element.\n\nLet me know if you have additional questions!\n. Oh! Sorry\u2014I misunderstood. Do you have an example of the style you\u2019re trying to add?\n\nSeems like the workaround here (use the polyfill everywhere) might be acceptable for now, since so few native implementations exist (and in fact, native support is diminishing).\n. We consider overflow to be somewhat of an anti-pattern, given spotty mobile support. Therefore, we probably won\u2019t add this\u2014sorry!\n\nThe readme does currently say: \u201cThis plugin does not support overflow on parent elements.\u201d\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Huh\u2014yes, I can reproduce this.\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Hm, I think the build is failing because the QUnit grunt task requires bower modules.\n. Thanks!\n. Sorry this was late. Thanks!\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. I don\u2019t think we\u2019ll put this into the stock plugin. It\u2019s included easily enough in downstream CSS and I think might be a little too aggressive.\n\nSorry, thanks for the PR!\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Thanks!\n. Ran into this same issue and tried to merge this but ran into test errors. I pushed a change that updates the dummy height correctly, so if you ever circle back to update this, please pull first. Sorry I\u2019m so late with these merges\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. One small change since this PR went in, Chrome removed their impl\n. Thanks!\n. Looks great! I\u2019d love some of these ideas in the fixed-sticky plugin. I made an issue for one above.\n\nI don\u2019t think we\u2019ll support the `overflow` feature but can you be more specific about some of the other complaints re: performance and `resize` problems? We do have resize handlers in our plugin.\n. Oh, and if you\u2019re using our demo code you should at probably include some kind of attribution, yeah?\n. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. Really sorry this never made it in. Closing all the PRs\u2014this plugin is now deprecated:  https://github.com/filamentgroup/fixed-sticky#-this-plugin-is-deprecated-. ",
    "lipsumar": "Wrong fix, turns out we should add the el's **top** and not **height**. New pull request on the way...\n. Wrong fix, turns out we should add the el's **top** and not **height**. New pull request on the way...\n. ",
    "bbodenmiller": "I'm confused. In your example, the sidebar is sticky.\n. I'm confused. In your example, the sidebar is sticky.\n. ",
    "robwierzbowski": "Hmm. Editing the demo site and it seems to be working. I'll bang on it a little more and then get back or close this issue.\n. OK, created a reduced test case at https://github.com/robwierzbowski/fixed-sticky/tree/rw%2Bcn/abs-pos-probs\n\nIssues are a little different than what I'm experiencing on our app, but that might have to do with me having imported the released version. These issues are against master.\n\nChrome: Version 31.0.1650.63\nSafari: Version 7.0 (9537.71)\nFirefox: 24.0 / 26.0\n\n#### Issues with fixing an absolutely positioned el:\n- Safari: `fixedsticky-on` is never applied\n- Firefox and Chrome:  `fixedsticky-on` is applied, but:\n  - `fixedsticky-withoutfixedfixed .fixedsticky-off, .fixed-supported .fixedsticky-off` `{position: static;}` overrides `position: absolute` applied to the original class, changing the layout when you scroll back up.\n  - The dummy element is added even though the orig element was removed from the document flow.\n. Ha, ok. So I had been under the impression that you could apply position: sticky in CSS to non- statically positioned elements. But then I realized that's crazy talk.\n\nMy mistake. :thumbsup: :v: :ok_hand: \n. I was worried for a minute, but I think I've put myself back in a \n\n![image](https://dl.dropboxusercontent.com/u/361291/gifs/caruso.gif)\n\ngood position.\n\nDOUBLE YEAAHHHHHHHHHHHHHH\n. Hmm. Editing the demo site and it seems to be working. I'll bang on it a little more and then get back or close this issue.\n. OK, created a reduced test case at https://github.com/robwierzbowski/fixed-sticky/tree/rw%2Bcn/abs-pos-probs\n\nIssues are a little different than what I'm experiencing on our app, but that might have to do with me having imported the released version. These issues are against master.\n\nChrome: Version 31.0.1650.63\nSafari: Version 7.0 (9537.71)\nFirefox: 24.0 / 26.0\n\n#### Issues with fixing an absolutely positioned el:\n- Safari: `fixedsticky-on` is never applied\n- Firefox and Chrome:  `fixedsticky-on` is applied, but:\n  - `fixedsticky-withoutfixedfixed .fixedsticky-off, .fixed-supported .fixedsticky-off` `{position: static;}` overrides `position: absolute` applied to the original class, changing the layout when you scroll back up.\n  - The dummy element is added even though the orig element was removed from the document flow.\n. Ha, ok. So I had been under the impression that you could apply position: sticky in CSS to non- statically positioned elements. But then I realized that's crazy talk.\n\nMy mistake. :thumbsup: :v: :ok_hand: \n. I was worried for a minute, but I think I've put myself back in a \n\n![image](https://dl.dropboxusercontent.com/u/361291/gifs/caruso.gif)\n\ngood position.\n\nDOUBLE YEAAHHHHHHHHHHHHHH\n. ",
    "sazemaster": "Hi Zach, thanks for the answer. I am now curious regarding the problems with overflow you are mentioning, do you have any link to show?\n\nIt's a pity though because the native implementation of position: sticky; allows this use case and that's why I came here in the first place thiking that your polyfill had a bug :)\n. Sure: http://jsfiddle.net/g4sRY/13/\n\nNav and content are fixed. I need to scroll the content, not the body.\n\nTry it in Safari, you'll see it works!\n. Hi Zach, thanks for the answer. I am now curious regarding the problems with overflow you are mentioning, do you have any link to show?\n\nIt's a pity though because the native implementation of position: sticky; allows this use case and that's why I came here in the first place thiking that your polyfill had a bug :)\n. Sure: http://jsfiddle.net/g4sRY/13/\n\nNav and content are fixed. I need to scroll the content, not the body.\n\nTry it in Safari, you'll see it works!\n. ",
    "OliverJAsh": "Do you know if any polyfills/fork of this polyfill implement this?\n. Do you know if any polyfills/fork of this polyfill implement this?\n. ",
    "facundocabrera": "Please check https://github.com/marcosgallardo/jquery.sticky ... We are adding more documentation soon.\n. Please check https://github.com/marcosgallardo/jquery.sticky ... We are adding more documentation soon.\n. ",
    "Wilto": "@dendril This doesn\u2019t seem to address the question in the issue.\n. guys\n\ncan\u2019t you see that all this fighting is tearing me apart\n. ![](http://wil.to/_/attack.gif)\n. @dendril This doesn\u2019t seem to address the question in the issue.\n. guys\n\ncan\u2019t you see that all this fighting is tearing me apart\n. ![](http://wil.to/_/attack.gif)\n. ",
    "randallmeeker": "Sorry, let me try and be a little more specific. If I have a scrollable div in the middle of my page. If a child contained in that element could be stuck to that specific element when scrolled. It appears the current implementation only works when my element and it's parent are scrolled to the top/bottom of the window.\n\nIf anyone here uses angular I just made a directive for this script\nhttps://github.com/randallmeeker/psFixedsticky\n. Sorry, let me try and be a little more specific. If I have a scrollable div in the middle of my page. If a child contained in that element could be stuck to that specific element when scrolled. It appears the current implementation only works when my element and it's parent are scrolled to the top/bottom of the window.\n\nIf anyone here uses angular I just made a directive for this script\nhttps://github.com/randallmeeker/psFixedsticky\n. ",
    "dlerman": "I have the same issue.  I have a sticky element with {top: 0}.  On Chrome, $el.css('bottom') returns 'auto', so position.bottom gets correctly set to false.  On Firefox, $el.css('bottom') return '0px', which causes position.bottom to get incorrectly set to true.\n\nAs a workaround, explicitly setting {position: static} on the sticky element fixes the problem.\n. I have the same issue.  I have a sticky element with {top: 0}.  On Chrome, $el.css('bottom') returns 'auto', so position.bottom gets correctly set to false.  On Firefox, $el.css('bottom') return '0px', which causes position.bottom to get incorrectly set to true.\n\nAs a workaround, explicitly setting {position: static} on the sticky element fixes the problem.\n. ",
    "scarlac": "I can't tell what the dotnotation is used for (it's undocumented?). If you mean to bind both events, use a space.\n\nAnywho. A possible solution could be replaceing .trigger('scroll.fixedsticky') with triggerHandler(...). That avoids resetting the scroll position, but should trigger the internal functions still. Let me know what you think.\n. Works. Applied patch manually to local version 0.1.3\n. I can't tell what the dotnotation is used for (it's undocumented?). If you mean to bind both events, use a space.\n\nAnywho. A possible solution could be replaceing .trigger('scroll.fixedsticky') with triggerHandler(...). That avoids resetting the scroll position, but should trigger the internal functions still. Let me know what you think.\n. Works. Applied patch manually to local version 0.1.3\n. ",
    "sitepodmatt": "Presumably the browser is remembering the top offset when refreshing, would it be possible to detect when a page is loaded and immediately that top offset is > 0, then put back to top 0, before init'ing the sticky. \n. Presumably the browser is remembering the top offset when refreshing, would it be possible to detect when a page is loaded and immediately that top offset is > 0, then put back to top 0, before init'ing the sticky. \n. ",
    "o-l-e": "@topherauyeung @nonuby actually the code suggested here: https://github.com/filamentgroup/fixed-sticky/issues/20 seemed to fix the issue here. Tested on latest OSX Mavericks, latest Chrome, Firefox and Opera.\n. :+1: \n. I am sorry but i am still having problems. \nSeems like the height of the invisible element is calculated \"before the floats\" of the inside elements after resize. In other words the height of the \"pseudo placeholder\" is the total height of all the columns not the tallest column height, after the window is resized. The result is that the sticky element \"pops\" when scrolling, as if something is missing when position fixed kicks in.\n\nAlso the sticky footer/bottom fails to work after window resize.\n\nHope this is understandable :)\n. @topherauyeung @nonuby actually the code suggested here: https://github.com/filamentgroup/fixed-sticky/issues/20 seemed to fix the issue here. Tested on latest OSX Mavericks, latest Chrome, Firefox and Opera.\n. :+1: \n. I am sorry but i am still having problems. \nSeems like the height of the invisible element is calculated \"before the floats\" of the inside elements after resize. In other words the height of the \"pseudo placeholder\" is the total height of all the columns not the tallest column height, after the window is resized. The result is that the sticky element \"pops\" when scrolling, as if something is missing when position fixed kicks in.\n\nAlso the sticky footer/bottom fails to work after window resize.\n\nHope this is understandable :)\n. ",
    "jefflembeck": "Done!\n. Hey @tbranyen,\n\nAny chance you can make filamentgroup the owner?\n. The `postinstall` references a local installation of bower. Bizarre.\n. Done!\n. Hey @tbranyen,\n\nAny chance you can make filamentgroup the owner?\n. The `postinstall` references a local installation of bower. Bizarre.\n. ",
    "cvrebert": "Yay!\n. Yay!\n. ",
    "jshawl": "Do you have a link to this issue? Here's a working example with the hash jump.\n\nhttp://jshawl.github.io/fixed-sticky/demos/demo.html#jump\n. Do you have a link to this issue? Here's a working example with the hash jump.\n\nhttp://jshawl.github.io/fixed-sticky/demos/demo.html#jump\n. ",
    "efuquen": "Hi. Can you cut a new version with this fix?  Really need this and would be nice to keep on official releases.  Thanks!\n. Hi. Can you cut a new version with this fix?  Really need this and would be nice to keep on official releases.  Thanks!\n. ",
    "anselmh": "Using [`static` for sticky is a bug](https://drafts.csswg.org/css-position-3/#valdef-position-sticky). It should as per spec instead be `relative` and it caused a couple of problems in my recent testing.\n. I assume this is also mostly because of the usage of `position: static` while the element is not fixed on the page.\n. Might be a good idea. Also suggesting to the browser what will change via `will-change` might be a good idea here.\n. Using [`static` for sticky is a bug](https://drafts.csswg.org/css-position-3/#valdef-position-sticky). It should as per spec instead be `relative` and it caused a couple of problems in my recent testing.\n. I assume this is also mostly because of the usage of `position: static` while the element is not fixed on the page.\n. Might be a good idea. Also suggesting to the browser what will change via `will-change` might be a good idea here.\n. ",
    "fstoerkle": "Hi @zachleat, do you have something planned here?\n\nWould you accept a PR here?\n. Hi @zachleat, do you have something planned here?\n\nWould you accept a PR here?\n. ",
    "placenamehere": "here's a different query plugin where I'm doing that type of work already. it now does some sticky polyfilling, behind the other work it does managing display based on size of a column's content, and other special behavioral tests that one of my sites needed.\n\ni ended up just using negative top w/ fixed positioning to scroll the element off screen. absolute/bottom would save some need to content related measurements, but for this case I was already doing them all.\n\nhttps://github.com/placenamehere/stickycolumn\n. here's a different query plugin where I'm doing that type of work already. it now does some sticky polyfilling, behind the other work it does managing display based on size of a column's content, and other special behavioral tests that one of my sites needed.\n\ni ended up just using negative top w/ fixed positioning to scroll the element off screen. absolute/bottom would save some need to content related measurements, but for this case I was already doing them all.\n\nhttps://github.com/placenamehere/stickycolumn\n. ",
    "rap1ds": "+1 This was exactly what I needed. I hope to see this also in the master branch.\n. +1 This was exactly what I needed. I hope to see this also in the master branch.\n. ",
    "hnrch02": "This is a blocking issue for most of my use cases. The code in the `issue-28` branch works fine, there's just two things I'd change:\n1. Don't provide styles for `.fixedsticky-off-transition-bottom` or make the container support top and bottom padding. See also #35.\n2. Don't hide the dummy for either of the transition cases.\n. This is a blocking issue for most of my use cases. The code in the `issue-28` branch works fine, there's just two things I'd change:\n1. Don't provide styles for `.fixedsticky-off-transition-bottom` or make the container support top and bottom padding. See also #35.\n2. Don't hide the dummy for either of the transition cases.\n. ",
    "christianhaller": "+1\n. +1\n. ",
    "jonnyhaynes": "@zachleat Can this be merged into the master branch at some point? Seems to work well, or at least it did until issue #100 \n. @zachleat Can this be merged into the master branch at some point? Seems to work well, or at least it did until issue #100 \n. ",
    "RafaelPlantard": "@zachleat any idea of when we will see this merged?\n. @zachleat any idea of when we will see this merged?\n. ",
    "nicktobolski": "This is still an issue for me. It's disappearing at the bottom of my containing element in chrome 55 on OS X. My sticky element is tall-ish (height:651px;).\r\n\r\n@zachleat Is there a workaround I can use in the meantime? I'm happy to try and make a PR if need be.. This is still an issue for me. It's disappearing at the bottom of my containing element in chrome 55 on OS X. My sticky element is tall-ish (height:651px;).\r\n\r\n@zachleat Is there a workaround I can use in the meantime? I'm happy to try and make a PR if need be.. ",
    "Globegitter": "Just needing that feature now and it seems barely any sticky polyfill seems to be able to do this. Would be a really useful option for us.\n. Just needing that feature now and it seems barely any sticky polyfill seems to be able to do this. Would be a really useful option for us.\n. ",
    "stefan-niedermann": "would be really helpfull for us, too. just wanted to let you know that ;)\n. would be really helpfull for us, too. just wanted to let you know that ;)\n. ",
    "jeropaul": "This would be pretty helpful for us as well..\n. This would be pretty helpful for us as well..\n. ",
    "sdebacker": "For me too !\n. For me too !\n. ",
    "pugson": "Ditto. I'm sad that this won't work with a sidebar in Chrome. :(\n. Ditto. I'm sad that this won't work with a sidebar in Chrome. :(\n. ",
    "eltonmesquita": "Yep. Just needed to know if it was supported or if I was doing something stupid.\nBut it would be a nice addition to support AMD as lots of people use them today :D.\n. Yep. Just needed to know if it was supported or if I was doing something stupid.\nBut it would be a nice addition to support AMD as lots of people use them today :D.\n. ",
    "willlma": "This is true of all transitions from `position: static` to `position: fixed` on scroll. I came here hoping that this library would have found a way to circumvent this problem, but no such luck. Let me know if you discover anything and I'll do the same. [My SO question](http://stackoverflow.com/questions/26979089/convincing-replication-of-css-position-sticky-on-mobile)\n. This is true of all transitions from `position: static` to `position: fixed` on scroll. I came here hoping that this library would have found a way to circumvent this problem, but no such luck. Let me know if you discover anything and I'll do the same. [My SO question](http://stackoverflow.com/questions/26979089/convincing-replication-of-css-position-sticky-on-mobile)\n. ",
    "pixelthing": "Thanks!\n. eek - just spotted a regression bug - line 145 rolls back commit c58fbea (nOOb mistake). Apologies.\n. Hi Zach, Thanks for giving it a go. I'm in the process of building a bigger PR with full sticky sidebar support http://codepen.io/pixelthing/pen/wBGwVK (I just need to check for memory and destroy() compatibility) so I could either patch this one up or get the bigger one ready, depending on whether you prefer the small steps or less PRs. Cheers!\n. Sorry for the hassle - I've updated my fork with docs, demos and new features (that also happen to address some of the existing feature requests - although I know you're also working on them in a separate branch). As soon as I've gone through the tests and figured out what I need to do with them, I'll swap to another PR and kill this one.\n. Thanks!\n. eek - just spotted a regression bug - line 145 rolls back commit c58fbea (nOOb mistake). Apologies.\n. Hi Zach, Thanks for giving it a go. I'm in the process of building a bigger PR with full sticky sidebar support http://codepen.io/pixelthing/pen/wBGwVK (I just need to check for memory and destroy() compatibility) so I could either patch this one up or get the bigger one ready, depending on whether you prefer the small steps or less PRs. Cheers!\n. Sorry for the hassle - I've updated my fork with docs, demos and new features (that also happen to address some of the existing feature requests - although I know you're also working on them in a separate branch). As soon as I've gone through the tests and figured out what I need to do with them, I'll swap to another PR and kill this one.\n. ",
    "rickydazla": "@pixelthing as bonus I just tested your version and it seems to fix https://github.com/filamentgroup/fixed-sticky/issues/44\n. +1 for a fix :cake: \n. You might want to try this fork: https://github.com/pixelthing/fixed-sticky\n. @pixelthing as bonus I just tested your version and it seems to fix https://github.com/filamentgroup/fixed-sticky/issues/44\n. +1 for a fix :cake: \n. You might want to try this fork: https://github.com/pixelthing/fixed-sticky\n. ",
    "jeremiecarlson": "OK, Thanks. I didn't realize this was how sticky was supposed to work. Looks like it's not going fit my needs then.\n. OK, Thanks. I didn't realize this was how sticky was supposed to work. Looks like it's not going fit my needs then.\n. ",
    "benknight": "Thanks for the quick feedback.  After I wrote this I eventually figured out how the containers thing worked, which was definitely a breakthrough!  I also realized that in order for it to work on a direct descendent of the `body` tag I had to remove `height: 100%` from my CSS.  I think it's also probably good to point out that margins aren't maintained, only paddings (I think) on the fixedsticky element.\n. Update: It looks like forcing the polyfill in all browsers is probably the best way to achieve this, as described in the readme:\n\n`FixedSticky.tests.sticky = false;`\n\nI would love to find out if detecting the active / inactive state of sticky positioning will ever be possible in the native implementation, since special styling based on that seems like a pretty common use case.\n. Correct, that was noted in the issue description.  The suggestion is to consider adding a mechanism for styling when an element is sticky and sticky position has native support (i.e. when the Polyfill is not in effect).\n. I agree about the workaround.  Thanks for discussing!\n. Thanks for the quick feedback.  After I wrote this I eventually figured out how the containers thing worked, which was definitely a breakthrough!  I also realized that in order for it to work on a direct descendent of the `body` tag I had to remove `height: 100%` from my CSS.  I think it's also probably good to point out that margins aren't maintained, only paddings (I think) on the fixedsticky element.\n. Update: It looks like forcing the polyfill in all browsers is probably the best way to achieve this, as described in the readme:\n\n`FixedSticky.tests.sticky = false;`\n\nI would love to find out if detecting the active / inactive state of sticky positioning will ever be possible in the native implementation, since special styling based on that seems like a pretty common use case.\n. Correct, that was noted in the issue description.  The suggestion is to consider adding a mechanism for styling when an element is sticky and sticky position has native support (i.e. when the Polyfill is not in effect).\n. I agree about the workaround.  Thanks for discussing!\n. ",
    "tbranyen": "Needed this in a project, so I pushed the latest stable tag to NPM.  @zachleat I'll be happy to make you an owner and remove myself from publishing whenever is convenient for you.\n. @jefflembeck all set!\n. Needed this in a project, so I pushed the latest stable tag to NPM.  @zachleat I'll be happy to make you an owner and remove myself from publishing whenever is convenient for you.\n. @jefflembeck all set!\n. ",
    "JonWallsten": "If you use jQuery:\nWhat if you listen to the scroll event and check the sticky item's position(). Then compare it to the position's top/bottom value, if they match, it should be in sticky mode, and you can add the class, otherwise remove it. (It won't be exactly this simple but you get the point)\n\nEdit: I did this in a project, but only for top.\nBasically like this. This depens on offset though, so the element cannot be bound to a container that is not the full size of the window. The idea to a solution in the top is more robust.\n\n```\n if( Math.floor($('menu').offset().top) == $(window).scrollTop() || Math.floor($('menu').offset().top) == 0 ) {\n   $('menu').addClass('sticky');\n} else {\n  $('menu').removeClass('sticky');\n}\n```\n. If you use jQuery:\nWhat if you listen to the scroll event and check the sticky item's position(). Then compare it to the position's top/bottom value, if they match, it should be in sticky mode, and you can add the class, otherwise remove it. (It won't be exactly this simple but you get the point)\n\nEdit: I did this in a project, but only for top.\nBasically like this. This depens on offset though, so the element cannot be bound to a container that is not the full size of the window. The idea to a solution in the top is more robust.\n\n```\n if( Math.floor($('menu').offset().top) == $(window).scrollTop() || Math.floor($('menu').offset().top) == 0 ) {\n   $('menu').addClass('sticky');\n} else {\n  $('menu').removeClass('sticky');\n}\n```\n. ",
    "dennisfrank": "+1\n\nAny fix or workaround in sight? \n. +1\n\nAny fix or workaround in sight? \n. ",
    "vincentorback": "Yeah, still an issue in Safari 9.0.3\n. Yeah, still an issue in Safari 9.0.3\n. ",
    "ibbatta": "Still an issue in Safari 9.1 and doesn't work in Safari for iOS\n. Still an issue in Safari 9.1 and doesn't work in Safari for iOS\n. ",
    "ZhangYiJiang": "Did a bit more testing, and found this doesn't quite work  in all scenarios. Will try to re-open when I've fixed it \n. Did a bit more testing, and found this doesn't quite work  in all scenarios. Will try to re-open when I've fixed it \n. ",
    "yatil": "You may be able to extend the JavaScript using this code to keep the element in the bounds:\n\n``` js\n$('#fixedQuoteSidebar').css('width', $('#fixedQuoteSidebar').parent().width()).fixedsticky();\n```\n\nNote: You need to reassign the width whenever the browser is resized.\n. You may be able to extend the JavaScript using this code to keep the element in the bounds:\n\n``` js\n$('#fixedQuoteSidebar').css('width', $('#fixedQuoteSidebar').parent().width()).fixedsticky();\n```\n\nNote: You need to reassign the width whenever the browser is resized.\n. ",
    "DFurnes": "Added a `before_script` to install Bower dependencies before Travis build & it seems to be back to green!\n. Added a `before_script` to install Bower dependencies before Travis build & it seems to be back to green!\n. ",
    "lukebussey": "\ud83d\udc4dCan this be merged?\n. \ud83d\udc4dCan this be merged?\n. ",
    "wedgex": "+1 \n. +1 \n. ",
    "danimalweb": "+1\n. This would be nice.\n. +1\n. This would be nice.\n. ",
    "MikeMcChillin": "+1 please & thanks\n. +1 please & thanks\n. ",
    "paulstraw": "@Marmeladekuchen, move your call to `$( '.fixedsticky' ).fixedsticky();` _below_ the fixed-sticky code. You're trying to call it before it exists. :smiley:\n. :ok_hand: No problem!\n. @Marmeladekuchen, move your call to `$( '.fixedsticky' ).fixedsticky();` _below_ the fixed-sticky code. You're trying to call it before it exists. :smiley:\n. :ok_hand: No problem!\n. ",
    "koedev": "Thanks Paul!\n\nI guess this proves my Javascript skills big time. ;)\n. Thanks Paul!\n\nI guess this proves my Javascript skills big time. ;)\n. ",
    "smisch": "I found that this issue happened to me when I resized the window after initializing fixedsticky. If the window resizes, the plugin must re-calculate the offsets for each element. It either doesn't do this, or does it incorrectly. \n\nEdit: Short answer: The offset isn't recalculated, ever. You can do this from the outside: \n\n```\n$(window).on(\"resize\", function (){\n    $(\".fixedsticky\").removeData(\"fixedStickyOffset\");\n});\n```\n\n**Edit**: I found it's better to repair the elements offset instead of just removing it. Otherwise while resizing the window you might get jumps.\n\n**Edit2**: Adjusting the height of the dummy is also necessary. \n\n```\n// with throttle\n$(window).on(\"resize\", $.throttle(250, function (event){\n    $(\".fixedsticky\").each(function (){\n        var $obj = $(this),\n            $parent = $obj.parent();\n\n        // adjust offset and width\n        $obj.data(\"fixedStickyOffset\", $parent.offset().top ).width( $parent.width() );\n\n        // adjust height of the dummy\n        $obj.next(\".fixedsticky-dummy\").height( $obj.height() );\n    });\n}));\n\n// without throttle\n$(window).on(\"resize\", function (event){\n    $(\".fixedsticky\").each(function (){\n        var $obj = $(this),\n            $parent = $obj.parent();\n\n        // adjust offset and width\n        $obj.data(\"fixedStickyOffset\", $parent.offset().top ).width( $parent.width() );\n\n        // adjust height of the dummy\n        $obj.next(\".fixedsticky-dummy\").height( $obj.height() );\n    });\n});\n```\n\nObviously it would be better to implement this feature into the plugin. ;-)\n. I found that this issue happened to me when I resized the window after initializing fixedsticky. If the window resizes, the plugin must re-calculate the offsets for each element. It either doesn't do this, or does it incorrectly. \n\nEdit: Short answer: The offset isn't recalculated, ever. You can do this from the outside: \n\n```\n$(window).on(\"resize\", function (){\n    $(\".fixedsticky\").removeData(\"fixedStickyOffset\");\n});\n```\n\n**Edit**: I found it's better to repair the elements offset instead of just removing it. Otherwise while resizing the window you might get jumps.\n\n**Edit2**: Adjusting the height of the dummy is also necessary. \n\n```\n// with throttle\n$(window).on(\"resize\", $.throttle(250, function (event){\n    $(\".fixedsticky\").each(function (){\n        var $obj = $(this),\n            $parent = $obj.parent();\n\n        // adjust offset and width\n        $obj.data(\"fixedStickyOffset\", $parent.offset().top ).width( $parent.width() );\n\n        // adjust height of the dummy\n        $obj.next(\".fixedsticky-dummy\").height( $obj.height() );\n    });\n}));\n\n// without throttle\n$(window).on(\"resize\", function (event){\n    $(\".fixedsticky\").each(function (){\n        var $obj = $(this),\n            $parent = $obj.parent();\n\n        // adjust offset and width\n        $obj.data(\"fixedStickyOffset\", $parent.offset().top ).width( $parent.width() );\n\n        // adjust height of the dummy\n        $obj.next(\".fixedsticky-dummy\").height( $obj.height() );\n    });\n});\n```\n\nObviously it would be better to implement this feature into the plugin. ;-)\n. ",
    "ShakurOo": "I found the solution.\n\nIts because jquery.mobile.css has multiple overflow-x:hidden; in my case I have commented the property overflow-x: hidden; of the following css rules : .ui-panel-wrapper / .ui-mobile .ui-page-active and .ui-content .\n. I found the solution.\n\nIts because jquery.mobile.css has multiple overflow-x:hidden; in my case I have commented the property overflow-x: hidden; of the following css rules : .ui-panel-wrapper / .ui-mobile .ui-page-active and .ui-content .\n. ",
    "evoactivity": "thank you\n. thank you\n. ",
    "mhkeller": "Nevermind I see this is on npm https://www.npmjs.com/package/fixed-sticky\n. Nevermind I see this is on npm https://www.npmjs.com/package/fixed-sticky\n. ",
    "pkyeck": "see #87 \n. see #87 \n. ",
    "soenkekluth": "there is also a react component for that: \nhttps://github.com/soenkekluth/react-sticky-state\n. as you can see - i added support for polyfilled (fixed sticky) inside an overflow:auto container. \nhttps://rawgit.com/soenkekluth/sticky-state/master/examples/index.html\n\nso the native feature becomes statefull and the polyfill supports different viewports. browser support : >= IE9 no dependencies! jank free with animationFrame\n. and finally: polyfill behaves exactly like the native feature...\nhttps://rawgit.com/soenkekluth/sticky-state/master/examples/index.html\nutraperformant!\n. there is also a react component now \nhttps://github.com/soenkekluth/react-sticky-state\n. @zachleat of course i will add attribution to the demo.\nwhen i was using fixed-sticky not long ago in a project the dimensions of the fixedsticky-dummy were not recalculated when the window resized for example. in your update method you recalculate several values like dimensions of the sticky element and the parent offsets and so on. in my module i cache these values and only recalculate them if really needed. then your not using animationFrame... and well... jquery is not really needed\n. you could easily use https://github.com/soenkekluth/fastscroll\nI used it for https://github.com/soenkekluth/sticky-state\n. there is also a react component for that: \nhttps://github.com/soenkekluth/react-sticky-state\n. as you can see - i added support for polyfilled (fixed sticky) inside an overflow:auto container. \nhttps://rawgit.com/soenkekluth/sticky-state/master/examples/index.html\n\nso the native feature becomes statefull and the polyfill supports different viewports. browser support : >= IE9 no dependencies! jank free with animationFrame\n. and finally: polyfill behaves exactly like the native feature...\nhttps://rawgit.com/soenkekluth/sticky-state/master/examples/index.html\nutraperformant!\n. there is also a react component now \nhttps://github.com/soenkekluth/react-sticky-state\n. @zachleat of course i will add attribution to the demo.\nwhen i was using fixed-sticky not long ago in a project the dimensions of the fixedsticky-dummy were not recalculated when the window resized for example. in your update method you recalculate several values like dimensions of the sticky element and the parent offsets and so on. in my module i cache these values and only recalculate them if really needed. then your not using animationFrame... and well... jquery is not really needed\n. you could easily use https://github.com/soenkekluth/fastscroll\nI used it for https://github.com/soenkekluth/sticky-state\n. ",
    "zzarcon": "This issue must be a joke, @soenkekluth how can you open an issue in a repo that is not yours without having contributed to it at all and saying that the **code is a mess**?\r\n\r\nThe first thing you point in the issue is **better use mine**, latter you wrote 3 more comments just talking about how **utraperformant!** its your repo and pointing to the React version of it, which is not related at all with this.\r\n\r\nI mean im happy that you have created your own repository and you think it's better than this one, but you should learn how to respect code of other people and don't use it to SPAM them in [other](https://github.com/filamentgroup/fixed-sticky/issues/84) [issues](https://github.com/filamentgroup/fixed-sticky/issues/93). This stuff doesn't help anyone, not the maintainers, not the users and not you.\r\n\r\n. This issue must be a joke, @soenkekluth how can you open an issue in a repo that is not yours without having contributed to it at all and saying that the **code is a mess**?\r\n\r\nThe first thing you point in the issue is **better use mine**, latter you wrote 3 more comments just talking about how **utraperformant!** its your repo and pointing to the React version of it, which is not related at all with this.\r\n\r\nI mean im happy that you have created your own repository and you think it's better than this one, but you should learn how to respect code of other people and don't use it to SPAM them in [other](https://github.com/filamentgroup/fixed-sticky/issues/84) [issues](https://github.com/filamentgroup/fixed-sticky/issues/93). This stuff doesn't help anyone, not the maintainers, not the users and not you.\r\n\r\n. ",
    "macrozone": "ok, got a workaround:\n\nin https://github.com/filamentgroup/fixed-sticky/blob/master/fixedsticky.js#L100 it caches the position-object (with top/bottom true or false) as data-attribute, so it is possible to declare this data-attribute in the html:\n\n`<div class=\"fixedsticky\" data-fixed-sticky-position='{\"top\": true, \"bottom\":false}'>...`\n\nIf it is present, it will skip the computation of this values.\n. I am currently on chrome 52 beta and having this issue. position:sticky seems not to be supported yet on chrome 52 (OS X)\n. ok, got a workaround:\n\nin https://github.com/filamentgroup/fixed-sticky/blob/master/fixedsticky.js#L100 it caches the position-object (with top/bottom true or false) as data-attribute, so it is possible to declare this data-attribute in the html:\n\n`<div class=\"fixedsticky\" data-fixed-sticky-position='{\"top\": true, \"bottom\":false}'>...`\n\nIf it is present, it will skip the computation of this values.\n. I am currently on chrome 52 beta and having this issue. position:sticky seems not to be supported yet on chrome 52 (OS X)\n. ",
    "jorenvanhee": "Do you mean Chrome 51? That's where I'm having the issue. Chrome 52 should support position: sticky; (http://caniuse.com/#feat=css-sticky).\n. Do you mean Chrome 51? That's where I'm having the issue. Chrome 52 should support position: sticky; (http://caniuse.com/#feat=css-sticky).\n. ",
    "iainhenderson": "I can see the broken behaviour in Chrome 51, 52 (Beta) and 53 (Canary), but it is still working as intended in Chrome 50 (OS X). @macrozone workaround is currently resolving the issue.\n. I can see the broken behaviour in Chrome 51, 52 (Beta) and 53 (Canary), but it is still working as intended in Chrome 50 (OS X). @macrozone workaround is currently resolving the issue.\n. ",
    "ptim": "I'm looking too.. currently evaluating https://github.com/wilddeer/stickyfill. I'm looking too.. currently evaluating https://github.com/wilddeer/stickyfill. ",
    "anuj1987kr": "Not working for me too.\n. Not working for me too.\n. ",
    "goodguyry": "This does nobody any good without steps to reproduce, example code, a detailed description of the issue, etc.\n. I had that same issue. You can [force the polyfill](../#using-the-polyfill-instead-of-native), which worked for me.\r\n\r\n`FixedSticky.tests.sticky = false;`. This does nobody any good without steps to reproduce, example code, a detailed description of the issue, etc.\n. I had that same issue. You can [force the polyfill](../#using-the-polyfill-instead-of-native), which worked for me.\r\n\r\n`FixedSticky.tests.sticky = false;`. ",
    "robertosimoes": "What I could notice is that Chrome doesn't support position:sticky; while Safari and Firefox does.\r\nIn Chrome it falls to position:fixed; breaking the layout when you use it as sidebar sticky.\r\nThe div class=\"fixedsticky-dummy\" appears on Chrome's Inspector while in Safari and Firefox it doesn't.\r\nBrowsers tested:\r\nSafari Mac 10.0.2\r\nFirefox Mac 50.1.0\r\nChrome Mac 55.0.2883.95. What I could notice is that Chrome doesn't support position:sticky; while Safari and Firefox does.\r\nIn Chrome it falls to position:fixed; breaking the layout when you use it as sidebar sticky.\r\nThe div class=\"fixedsticky-dummy\" appears on Chrome's Inspector while in Safari and Firefox it doesn't.\r\nBrowsers tested:\r\nSafari Mac 10.0.2\r\nFirefox Mac 50.1.0\r\nChrome Mac 55.0.2883.95. ",
    "jacobdubail": "I should qualify this. If the sticky element has flex: auto, then it's fine, but if no value is supplied, it seems to flicker.\n. Okay, after more digging, it appears the issue is actually due to the use of vh units in the element's padding. \n. I should qualify this. If the sticky element has flex: auto, then it's fine, but if no value is supplied, it seems to flicker.\n. Okay, after more digging, it appears the issue is actually due to the use of vh units in the element's padding. \n. ",
    "jake": "I had this issue as well, but couldn't trace the issue to `vh` or fix with `flex: auto`. I was able to fix by adding `backface-visibility: hidden` to the sticky element and everything within it.. I had this issue as well, but couldn't trace the issue to `vh` or fix with `flex: auto`. I was able to fix by adding `backface-visibility: hidden` to the sticky element and everything within it.. ",
    "gqqnbig": "It also has problems when page resizes.. It also has problems when page resizes.. ",
    "flagster76": "Would love to see a solution to this.  Fixed-sticky elements \"jump\" to the top of the page too early with an implementation that's even simpler and more commonplace: asynchronously-loaded ads (for which a height is not known until the ad is loaded, which seems to happen after fixed-sticky has been initialized).  . Would love to see a solution to this.  Fixed-sticky elements \"jump\" to the top of the page too early with an implementation that's even simpler and more commonplace: asynchronously-loaded ads (for which a height is not known until the ad is loaded, which seems to happen after fixed-sticky has been initialized).  . ",
    "prospik": "not working. not working. ",
    "mwld": "FYI: Chrome 56 added support for `position: sticky` even for table elements. (https://developers.google.com/web/updates/2017/01/nic56). FYI: Chrome 56 added support for `position: sticky` even for table elements. (https://developers.google.com/web/updates/2017/01/nic56). "
}