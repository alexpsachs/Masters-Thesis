{
    "withremote": "happens for me in Chrome Version 28.0.1500.95 m\n. Running Windows 7\n\nOn Wednesday, August 21, 2013, Victor Bjelkholm wrote:\n\n> @withremote https://github.com/withremote, what OS are you running? I\n> can't reproduce on Chrome 28 Stable on OSX Mountain Lion.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/VictorBjelkholm/ngProgress/issues/1#issuecomment-23025681\n> .\n\n## \n\n---\n\nNate Nolting\nWeb:  http://withremote.com/withremote.com\n\n## Twitter: @withremote\n. happens for me in Chrome Version 28.0.1500.95 m\n. Running Windows 7\n\nOn Wednesday, August 21, 2013, Victor Bjelkholm wrote:\n\n> @withremote https://github.com/withremote, what OS are you running? I\n> can't reproduce on Chrome 28 Stable on OSX Mountain Lion.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/VictorBjelkholm/ngProgress/issues/1#issuecomment-23025681\n> .\n\n## \n\n---\n\nNate Nolting\nWeb:  http://withremote.com/withremote.com\n\n## Twitter: @withremote\n. ",
    "victorb": "@withremote, what OS are you running? I can't reproduce on Chrome 28 Stable on OSX Mountain Lion.\n. This is probably something that would be solved by PR #6 \n. Merged #6 so this is fixed.\n. Will be done when merging `refactoring`-branch (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring) into master\n. WOHO! Minified version of the whole component is now available in `build/ngProgress.min.js` thanks to the merge of PR #15 \n. Was just discussing this on Twitter with @joseph_carney, thank you so much for your contribution! :+1: \n. The reason for having inline styling is to avoid having to also include a stylesheet just to use the provider. There is always the option to add a stylesheet yourself and override the properties that are set. But let's keep the discussion in PR #6 instead.\n. All right, refactored the whole code basically in my `refactoring`-branch (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring) so please have a look there on how it will work. Should fix a bunch of issues, please let me know if that's not the case.\n. This is fixed by the merge of PR #15 \n. Nice stuff! Thanks @bcarrell :+1: \n. I'm not so sure about this one. It looks like this would require the developer to also include the stylesheets in the HTML head if this is changed and I don't think that's a good idea. However, if people feel that it's better to have it super readable than super easy to setup and use, it is a good idea.\n. Another way would be to have the syntax for styling in a external file but load in dynamically from the Javascript so it wouldn't require the developer to make one extra step for using it.\n. Thank you so much for the commit! I will merge this into master and fix some other stuff but I'm happy you contributed to the project.\nSorry for the delay..\n. No, this should clearly be a provider and not a directive since we need to provide an API for the developer to use. If we were to use directives, we would need some sort of provider anyways.\n\nQuestion and response from another place on the internet:\n\n> Generally it's not a good idea to manipulate the DOM from a controller, even via a service. In angular the idea is to set up the scope and let a directive do that work.\n\n|\n|\n\n> Yes, I know that very well. I got the idea after first seeing the Nprogress project[1] yesterday night and I figured I wanted it for Angular. I was unsure though on how I should implement it. A directive? Well, that would require the developer to do more to be able to change the progress-width/percentage. A provider manipulating a inserted directive? That would require more code.\n> This morning, I watched Misko talking about best practices regarding AngularJS[2] and he starts talking about that services often shouldn't contain dom manipulation but sometimes it's necessary. In this case, I thought it would be necessary. I think I made a good choice to make it as simple as possible.\n> [1] http://ricostacruz.com/nprogress/\n> [2] http://youtu.be/ZhfUv0spHCY?t=26m40s\n. Hello there @tmayr ! Tried your branch but couldn't things to work properly after merged other stuff. Integrated your changes though in my branch refactoring (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring). Please check it out and see if anything is missing.\n\nThanks for the help!\n. With #6, I don't think this is necessary and you also seemed to have done something with the indentation. I can't merge this.\n. I will have a look on how you can use ngProgress with $http interceptor but I have not used any interceptors yet so will probably take some time.\n. Hey @cxq ! I don't have any possibility to test on Internet Explorer but I think a better way would be to move the styles to outside the script itself and therefore this fix isn't needed. Please test the `refactoring`-branch (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring) and let me know if that one isn't working in Internet Explorer.\n. Hello all, please have a look at `refactoring`-branch (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring) that I've recently pushed, it contains tests where I'm using the progressbar in the specs. \n. This is fixed now when PR #15 have been merged.\n. In case a spinner would be added, I would like it to be optional and adjusted to the new code coming from this branch: https://github.com/VictorBjelkholm/ngProgress/tree/refactoring\n. This will be fixed when merging the branch `refactoring` (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring). Please let me know if I'm out on deep water when saying so.\n. Oh, thank you so much for the cleanup! A bit concerned regarding moving the index.html to the examples/ folder though because that will break the Github page that is setup at the moment and I don't want to maintain two different branches just for that. \n\nAlso, maintaining the version number in two different files isn't ideal either, any way you can make bower use the package.json or vice versa?\n. Thank you so much for the commits! The grunt version task is sure handy, will reuse that in other projects! :)\n. Nicely done! Thank you so much and thanks for the kind words as well!\n\nI would like to remake the whole page to actually show some better demo and some better styling but this is definitely better than before. The pre-styling I think is the best upgrade!\n\nThanks! \n. I think there is one too many this.updateCount() in the complete method, maybe it would be more appropriate to remove one of them instead of fixing the symptoms? \n. Well, let's merge this for now.\n. Thank you! :+1:  Stupid mistake done by me...\n. Thanks for the notice, I've merged PR #20 which fixes this issue.\n. Sorry for the merge-delay but thanks a lot for this! Will help many people.\n. Thanks a lot for this! I myself get angry when others include crap in their bower packages and then I do it myself... Bad Victor!\n. So small, yet a big difference. Thanks!\n. @QuantumInformation Yes, providing some more information would be helpful. This looks like it's coming from somewhere else. Unless we can re-produce it, it's really difficult to fix if there is a problem.\n\nSo unless some new information comes from you or someone else with the same problem, I'll close this one.\n. @moneytree-doug could you provide a test case? I haven't been able to reproduce this so far...\n. Closing this since I have no idea about how to reproduce. Please comment if you manage to come up with a test case.\n. Yeah, a solution where styles isn't hardcoded but still possible to change color via JavaScript would be acceptable.\n. This is something I would like to implement. Currently playing around but the directive with the scope counter is coming in the way for. Will share how far I come ASAP.\n. I've done some prototyping of having multiple progressbars in one page.\nWhat I don't like is to have styling stuff in the JS (like this: https://github.com/VictorBjelkholm/ngProgress/blob/7f3ac2889ef8d400161bd9f13f4ce57e66f4ff56/src/provider.js#L164-L166) but struggling with on how to make the CSS to work in just some cases.\n\nUsage would look like this:\n\n```\n$scope.contained_progressbar = ngProgressFactory.getInstance();\n$scope.contained_progressbar.setParent(document.getElementById('demo_contained'));\n$scope.contained_progressbar.setAbsolute();\n```\n\nSame if you don't have multiple progressbars. Basically, what I changed is that you'll need to construct the service manually via a ngProgressFactory.\n\nIf anyone have any other ideas on how to solve it, please share your thoughts :smile:  \n. This have now been implemented and pushed to version 1.1.0. Enjoy and please open up any issues if there is any.\n. Hey! Thanks for the added issue @dasois.\n\nSome more information regarding \"several misusages of the 'this'-function\" and \"some Angular module weirdness...\" would be helpful and I'll try looking into this.\n. I've just tried this out in latest Chrome (Version 37.0.2062.94 (64-bit))\nand latest Firefox (Version 32.0) on Ubuntu and it seems to be working fine.\n\nPlease note that `start()` and `complete()` are both called before\nthe first time you click on \"Start\" and \"Complete\" so the bug would appear\nalready after your first try.\n\nBut, there is known problems with calling `start()` twice without\ncalling `complete()` after the first one, but this is not the issue, if\nI understand you correctly.\n\nI'm not sure I understand how you get this issue. Can you provide the\nbrowser version you're using, if there is any cross-browser issue.\n\nEdit: Re-reading the initial issue comment you made, it seems like you're indeed are clicking start twice, or doing \"Start\" -> \"Complete\" -> \"Start\" very fast which is known to be a bit buggy.\n\nSincerely,\nVictor Bjelkholm\n(+34) 672 15 90 89\nvictorbjelkholm@gmail.com\n\nOn Wed, Sep 17, 2014 at 4:32 PM, Andrei notifications@github.com wrote:\n\n> Could you please reopen this issue, because I think you misread my\n> comment. I didn't talk about the calls, I know very well how the library\n> works. I was talking about two events that might trigger\n> ngProgress.start(), at which point the loading bar would never fully\n> complete.\n> \n> Again, you can test this strange behavior by going to\n> https://victorbjelkholm.github.io/ngProgress/ and clicking on Start ->\n> Complete. Wait for it to complete then click on Start again.\n> \n> CONCLUSION: The loading bar will never complete if two ngProgress.start()\n> are made without refreshing the page.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/VictorBjelkholm/ngProgress/issues/56#issuecomment-55902112\n> .\n. @dasois I have updated the `gh-pages` branch but I'm afraid this is not fixed by any other issues. This issue seems to be more about calling `Start` -> `Complete` -> `Start` very fast is buggy while #48 was more about `Start` -> `Start` -> `Complete` and never finishing\n. I have updated `gh-pages` branch now to include the latest fixes. However, this does not fix #56 \n. Yeah, there was a problem with how we do the releases. I'll add the information in the readme but in the meantime, 1.0.7 have been pushed to fix the issue.\n. Hey, thanks for reporting the issue!\n\nIs it possible for you to setup a demo plnkr.co where the issue is happening to make it a bit easier to debug?\n\nThanks.\n. Yes, this is a interesting feature that I will be looking into. If anyone have any ideas or want to try and implement it, let me know. Thanks!\n. Hey, thanks for this addition! Looks a lot nicer. I merged it but with a few changes, mainly the pink color I removed, the \"fork on github\" changed back and the small jQuery snippet you embedded I removed. Hope that's ok and thanks again for your contribution :+1: \n. Good point, I will look into stopping the `$watch`s\n. Since version 1.0.7 you are able to set the position to whatever element you feel like. Take a look at the demo in `index.html` about how to do just that.\n. Hm, I'm not sure about this but worth discussing. I feel like it would add more to the progress bar than what a progress bar really is, and it's probably more suited to provide in your own application, rather in this library.\n. Thanks a bunch! I'll make a new version with these changes once I get home!\n. Ay, seems like I forgotten to update the package in npm/bower. I'll push out the new version asap and write here once it's done. Thanks for reporting! \n. Thanks @alex-signature-it for having a good example of it breaking. Helpful!\n\nTried the newly pushed 1.1.2 with your example, now is working correctly: http://plnkr.co/edit/MTiqxyfQjQhE0qroULJA?p=preview\n. Hey, the latest version in bower is 1.1.2 according to `bower info ngprogress`. Please try updating the package and let me know if it still is out of sync.\n. Oh, good catch! Didn't see that.\n\nShould be fixed now, can you try again?\n. Thanks a lot for letting me know! :+1: \n. Hm, seems like some of the interface of the library have changed while the website doesn't reflect this. Thanks for checking it out, I'll take a look later today at it.\n\nAgain, thanks for reporting it!\n. Fixed in 99055a328fffea032d6b18d8ce5664f338594cfe, cd178d5927437f2d88ac65579f8c32d38a051928 and 1ebcd66727ba1e78e7adfedb285f8c4f4314668c\n\nThanks again for reporting!\n. Goodie, thanks a lot for this! I've updated the demo in `index.html` also.\n. Thanks a lot!\n. Hey guys, sorry for not updating you earlier. Been very busy lately... But this seems important, I'll merge this today.\n. Hm, tricky. Npm forced me recently to update my package to only have\nlowercase characters in my package name and seems like bower doesn't like\nthose changes. Not sure I can see a good solution to this. Anyone?\nOn Aug 13, 2015 17:02, \"Alex Andrienko\" notifications@github.com wrote:\n\n> Previous versions used to follow camel-case naming convention for the\n> files, e.g. ng_P_rogress/build/ng_P_rogress.js, and now it's\n> ng_p_rogress/build/ng_p_rogress.js.\n> \n> It gets rather confusing/broken if upgraded via bower on a case-sensitive\n> file system, since it'll keep the old camel-case-named files next to new\n> lowercase ones and you might assume you've got a new version while your\n> website will be actually using an old one.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/VictorBjelkholm/ngProgress/issues/78.\n. @withremote, what OS are you running? I can't reproduce on Chrome 28 Stable on OSX Mountain Lion.\n. This is probably something that would be solved by PR #6 \n. Merged #6 so this is fixed.\n. Will be done when merging `refactoring`-branch (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring) into master\n. WOHO! Minified version of the whole component is now available in `build/ngProgress.min.js` thanks to the merge of PR #15 \n. Was just discussing this on Twitter with @joseph_carney, thank you so much for your contribution! :+1: \n. The reason for having inline styling is to avoid having to also include a stylesheet just to use the provider. There is always the option to add a stylesheet yourself and override the properties that are set. But let's keep the discussion in PR #6 instead.\n. All right, refactored the whole code basically in my `refactoring`-branch (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring) so please have a look there on how it will work. Should fix a bunch of issues, please let me know if that's not the case.\n. This is fixed by the merge of PR #15 \n. Nice stuff! Thanks @bcarrell :+1: \n. I'm not so sure about this one. It looks like this would require the developer to also include the stylesheets in the HTML head if this is changed and I don't think that's a good idea. However, if people feel that it's better to have it super readable than super easy to setup and use, it is a good idea.\n. Another way would be to have the syntax for styling in a external file but load in dynamically from the Javascript so it wouldn't require the developer to make one extra step for using it.\n. Thank you so much for the commit! I will merge this into master and fix some other stuff but I'm happy you contributed to the project.\nSorry for the delay..\n. No, this should clearly be a provider and not a directive since we need to provide an API for the developer to use. If we were to use directives, we would need some sort of provider anyways.\n\nQuestion and response from another place on the internet:\n\n> Generally it's not a good idea to manipulate the DOM from a controller, even via a service. In angular the idea is to set up the scope and let a directive do that work.\n\n|\n|\n\n> Yes, I know that very well. I got the idea after first seeing the Nprogress project[1] yesterday night and I figured I wanted it for Angular. I was unsure though on how I should implement it. A directive? Well, that would require the developer to do more to be able to change the progress-width/percentage. A provider manipulating a inserted directive? That would require more code.\n> This morning, I watched Misko talking about best practices regarding AngularJS[2] and he starts talking about that services often shouldn't contain dom manipulation but sometimes it's necessary. In this case, I thought it would be necessary. I think I made a good choice to make it as simple as possible.\n> [1] http://ricostacruz.com/nprogress/\n> [2] http://youtu.be/ZhfUv0spHCY?t=26m40s\n. Hello there @tmayr ! Tried your branch but couldn't things to work properly after merged other stuff. Integrated your changes though in my branch refactoring (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring). Please check it out and see if anything is missing.\n\nThanks for the help!\n. With #6, I don't think this is necessary and you also seemed to have done something with the indentation. I can't merge this.\n. I will have a look on how you can use ngProgress with $http interceptor but I have not used any interceptors yet so will probably take some time.\n. Hey @cxq ! I don't have any possibility to test on Internet Explorer but I think a better way would be to move the styles to outside the script itself and therefore this fix isn't needed. Please test the `refactoring`-branch (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring) and let me know if that one isn't working in Internet Explorer.\n. Hello all, please have a look at `refactoring`-branch (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring) that I've recently pushed, it contains tests where I'm using the progressbar in the specs. \n. This is fixed now when PR #15 have been merged.\n. In case a spinner would be added, I would like it to be optional and adjusted to the new code coming from this branch: https://github.com/VictorBjelkholm/ngProgress/tree/refactoring\n. This will be fixed when merging the branch `refactoring` (https://github.com/VictorBjelkholm/ngProgress/tree/refactoring). Please let me know if I'm out on deep water when saying so.\n. Oh, thank you so much for the cleanup! A bit concerned regarding moving the index.html to the examples/ folder though because that will break the Github page that is setup at the moment and I don't want to maintain two different branches just for that. \n\nAlso, maintaining the version number in two different files isn't ideal either, any way you can make bower use the package.json or vice versa?\n. Thank you so much for the commits! The grunt version task is sure handy, will reuse that in other projects! :)\n. Nicely done! Thank you so much and thanks for the kind words as well!\n\nI would like to remake the whole page to actually show some better demo and some better styling but this is definitely better than before. The pre-styling I think is the best upgrade!\n\nThanks! \n. I think there is one too many this.updateCount() in the complete method, maybe it would be more appropriate to remove one of them instead of fixing the symptoms? \n. Well, let's merge this for now.\n. Thank you! :+1:  Stupid mistake done by me...\n. Thanks for the notice, I've merged PR #20 which fixes this issue.\n. Sorry for the merge-delay but thanks a lot for this! Will help many people.\n. Thanks a lot for this! I myself get angry when others include crap in their bower packages and then I do it myself... Bad Victor!\n. So small, yet a big difference. Thanks!\n. @QuantumInformation Yes, providing some more information would be helpful. This looks like it's coming from somewhere else. Unless we can re-produce it, it's really difficult to fix if there is a problem.\n\nSo unless some new information comes from you or someone else with the same problem, I'll close this one.\n. @moneytree-doug could you provide a test case? I haven't been able to reproduce this so far...\n. Closing this since I have no idea about how to reproduce. Please comment if you manage to come up with a test case.\n. Yeah, a solution where styles isn't hardcoded but still possible to change color via JavaScript would be acceptable.\n. This is something I would like to implement. Currently playing around but the directive with the scope counter is coming in the way for. Will share how far I come ASAP.\n. I've done some prototyping of having multiple progressbars in one page.\nWhat I don't like is to have styling stuff in the JS (like this: https://github.com/VictorBjelkholm/ngProgress/blob/7f3ac2889ef8d400161bd9f13f4ce57e66f4ff56/src/provider.js#L164-L166) but struggling with on how to make the CSS to work in just some cases.\n\nUsage would look like this:\n\n```\n$scope.contained_progressbar = ngProgressFactory.getInstance();\n$scope.contained_progressbar.setParent(document.getElementById('demo_contained'));\n$scope.contained_progressbar.setAbsolute();\n```\n\nSame if you don't have multiple progressbars. Basically, what I changed is that you'll need to construct the service manually via a ngProgressFactory.\n\nIf anyone have any other ideas on how to solve it, please share your thoughts :smile:  \n. This have now been implemented and pushed to version 1.1.0. Enjoy and please open up any issues if there is any.\n. Hey! Thanks for the added issue @dasois.\n\nSome more information regarding \"several misusages of the 'this'-function\" and \"some Angular module weirdness...\" would be helpful and I'll try looking into this.\n. I've just tried this out in latest Chrome (Version 37.0.2062.94 (64-bit))\nand latest Firefox (Version 32.0) on Ubuntu and it seems to be working fine.\n\nPlease note that `start()` and `complete()` are both called before\nthe first time you click on \"Start\" and \"Complete\" so the bug would appear\nalready after your first try.\n\nBut, there is known problems with calling `start()` twice without\ncalling `complete()` after the first one, but this is not the issue, if\nI understand you correctly.\n\nI'm not sure I understand how you get this issue. Can you provide the\nbrowser version you're using, if there is any cross-browser issue.\n\nEdit: Re-reading the initial issue comment you made, it seems like you're indeed are clicking start twice, or doing \"Start\" -> \"Complete\" -> \"Start\" very fast which is known to be a bit buggy.\n\nSincerely,\nVictor Bjelkholm\n(+34) 672 15 90 89\nvictorbjelkholm@gmail.com\n\nOn Wed, Sep 17, 2014 at 4:32 PM, Andrei notifications@github.com wrote:\n\n> Could you please reopen this issue, because I think you misread my\n> comment. I didn't talk about the calls, I know very well how the library\n> works. I was talking about two events that might trigger\n> ngProgress.start(), at which point the loading bar would never fully\n> complete.\n> \n> Again, you can test this strange behavior by going to\n> https://victorbjelkholm.github.io/ngProgress/ and clicking on Start ->\n> Complete. Wait for it to complete then click on Start again.\n> \n> CONCLUSION: The loading bar will never complete if two ngProgress.start()\n> are made without refreshing the page.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/VictorBjelkholm/ngProgress/issues/56#issuecomment-55902112\n> .\n. @dasois I have updated the `gh-pages` branch but I'm afraid this is not fixed by any other issues. This issue seems to be more about calling `Start` -> `Complete` -> `Start` very fast is buggy while #48 was more about `Start` -> `Start` -> `Complete` and never finishing\n. I have updated `gh-pages` branch now to include the latest fixes. However, this does not fix #56 \n. Yeah, there was a problem with how we do the releases. I'll add the information in the readme but in the meantime, 1.0.7 have been pushed to fix the issue.\n. Hey, thanks for reporting the issue!\n\nIs it possible for you to setup a demo plnkr.co where the issue is happening to make it a bit easier to debug?\n\nThanks.\n. Yes, this is a interesting feature that I will be looking into. If anyone have any ideas or want to try and implement it, let me know. Thanks!\n. Hey, thanks for this addition! Looks a lot nicer. I merged it but with a few changes, mainly the pink color I removed, the \"fork on github\" changed back and the small jQuery snippet you embedded I removed. Hope that's ok and thanks again for your contribution :+1: \n. Good point, I will look into stopping the `$watch`s\n. Since version 1.0.7 you are able to set the position to whatever element you feel like. Take a look at the demo in `index.html` about how to do just that.\n. Hm, I'm not sure about this but worth discussing. I feel like it would add more to the progress bar than what a progress bar really is, and it's probably more suited to provide in your own application, rather in this library.\n. Thanks a bunch! I'll make a new version with these changes once I get home!\n. Ay, seems like I forgotten to update the package in npm/bower. I'll push out the new version asap and write here once it's done. Thanks for reporting! \n. Thanks @alex-signature-it for having a good example of it breaking. Helpful!\n\nTried the newly pushed 1.1.2 with your example, now is working correctly: http://plnkr.co/edit/MTiqxyfQjQhE0qroULJA?p=preview\n. Hey, the latest version in bower is 1.1.2 according to `bower info ngprogress`. Please try updating the package and let me know if it still is out of sync.\n. Oh, good catch! Didn't see that.\n\nShould be fixed now, can you try again?\n. Thanks a lot for letting me know! :+1: \n. Hm, seems like some of the interface of the library have changed while the website doesn't reflect this. Thanks for checking it out, I'll take a look later today at it.\n\nAgain, thanks for reporting it!\n. Fixed in 99055a328fffea032d6b18d8ce5664f338594cfe, cd178d5927437f2d88ac65579f8c32d38a051928 and 1ebcd66727ba1e78e7adfedb285f8c4f4314668c\n\nThanks again for reporting!\n. Goodie, thanks a lot for this! I've updated the demo in `index.html` also.\n. Thanks a lot!\n. Hey guys, sorry for not updating you earlier. Been very busy lately... But this seems important, I'll merge this today.\n. Hm, tricky. Npm forced me recently to update my package to only have\nlowercase characters in my package name and seems like bower doesn't like\nthose changes. Not sure I can see a good solution to this. Anyone?\nOn Aug 13, 2015 17:02, \"Alex Andrienko\" notifications@github.com wrote:\n\n> Previous versions used to follow camel-case naming convention for the\n> files, e.g. ng_P_rogress/build/ng_P_rogress.js, and now it's\n> ng_p_rogress/build/ng_p_rogress.js.\n> \n> It gets rather confusing/broken if upgraded via bower on a case-sensitive\n> file system, since it'll keep the old camel-case-named files next to new\n> lowercase ones and you might assume you've got a new version while your\n> website will be actually using an old one.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/VictorBjelkholm/ngProgress/issues/78.\n. ",
    "chieffancypants": "@VictorBjelkholm, CSP is optionally set by HTTP headers, so unless you set them, you won't be able to reproduce.  I believe Chrome 25 was the first chrome version to implement.\n\nIndeed, #6 will solve this.\n. +1 to moving style-related content to CSS.  JS should only be for behavior. \n. @VictorBjelkholm, CSP is optionally set by HTTP headers, so unless you set them, you won't be able to reproduce.  I believe Chrome 25 was the first chrome version to implement.\n\nIndeed, #6 will solve this.\n. +1 to moving style-related content to CSS.  JS should only be for behavior. \n. ",
    "ghost": "you're welcome! thanks for the plugin\n. +1\n. you're welcome! thanks for the plugin\n. +1\n. ",
    "ProLoser": ":+1: \n\nDon't clutter JS with CSS. Just makes it harder for people to hack/customize/override.\n\nAlso, I wouldn't support JS-hooks just to change the CSS. It's silly and you are making more work for yourself to maintain.\n. :+1: \n\nDon't clutter JS with CSS. Just makes it harder for people to hack/customize/override.\n\nAlso, I wouldn't support JS-hooks just to change the CSS. It's silly and you are making more work for yourself to maintain.\n. ",
    "MrOrz": "As #4 requested.\n. I think we can move one step further.  The progressbar color and height should also be declared in CSS. `height()` and `color()` is considered unnecessary, since the progressbar API should focus on the \"progress\" logic and hand over its presentation to CSS.\n. I added some commits to read CSS styles in `$get`.\n. Yeah I would feel much more at ease if all the styles are defined in CSS.\n\nI am very used to the process of (1) add CSS, (2) add Javascript, (3) add bootstrap code, (4) play around the CSS when adopting a 3rd -party module.   Adding CSS is a familiar routine for me and it even makes me feel more comfortable because I can have full control over the appearance.\n\n`ngProgress` has a super simple and elegant HTML structure, which is perfect for any developers to drop in  CSS styles to meet their need.  However moving all styles to CSS would make some Javascript API pointless.  I decided to introduce fewer modifications in this pull request and go further only after a rough consensus has been reached.\n. @braco I couldn't get the idea of `stylePath` and `autoStyle`. I haven't done anything like javascript build scripts before :P \n. Usage:\n\n``` javascript\napp.config(function(progressbarProvider){\n  progressbarProvider.autoStyle = false; // Disables all inline styles. See ngProgress.css for sample CSS.\n});\n```\n. Excellent work @voronianski ! :+1: \n. As #4 requested.\n. I think we can move one step further.  The progressbar color and height should also be declared in CSS. `height()` and `color()` is considered unnecessary, since the progressbar API should focus on the \"progress\" logic and hand over its presentation to CSS.\n. I added some commits to read CSS styles in `$get`.\n. Yeah I would feel much more at ease if all the styles are defined in CSS.\n\nI am very used to the process of (1) add CSS, (2) add Javascript, (3) add bootstrap code, (4) play around the CSS when adopting a 3rd -party module.   Adding CSS is a familiar routine for me and it even makes me feel more comfortable because I can have full control over the appearance.\n\n`ngProgress` has a super simple and elegant HTML structure, which is perfect for any developers to drop in  CSS styles to meet their need.  However moving all styles to CSS would make some Javascript API pointless.  I decided to introduce fewer modifications in this pull request and go further only after a rough consensus has been reached.\n. @braco I couldn't get the idea of `stylePath` and `autoStyle`. I haven't done anything like javascript build scripts before :P \n. Usage:\n\n``` javascript\napp.config(function(progressbarProvider){\n  progressbarProvider.autoStyle = false; // Disables all inline styles. See ngProgress.css for sample CSS.\n});\n```\n. Excellent work @voronianski ! :+1: \n. ",
    "rhacker": "great commit :+1: \n. @VictorBjelkholm I once loved the idea of putting everything in one script file because it's so portable and easy to work with. But still, now I prefer separating things out because in many cases, this will be customized anyway. \n. great commit :+1: \n. @VictorBjelkholm I once loved the idea of putting everything in one script file because it's so portable and easy to work with. But still, now I prefer separating things out because in many cases, this will be customized anyway. \n. ",
    "voronianski": "@VictorBjelkholm as for me it's better to provide it as an option so developer will choose it by himself. \n\nit's much better to have full-control of styles in css file than to trying to override by `!important`'s\n. @MrOrz \"However moving all styles to CSS would make some Javascript API pointless.\" -\nI think those methods like `setHeight` can be still in source code but they will simply interact with styles inlining them directly.\n. @VictorBjelkholm @MrOrz guys, what's the progress on this?\n. @oblador @Grigorius @sthomp I developed an alternative angular.js provider (due to a lot of issues in this one), it's called **ngProgressLite** - http://labs.voronianski.com/ngprogress-lite.js/ \n\nIt's small and has same API as original jquery plugin. You can check it out and maybe it will suit you.\n. @Grigorius yeah, ngProgressLite is a port of it to angular.js with the same API, it's not a good practice to be dependant on jquery in angular app.\n. @bondaestudi thanks! spread a word about it to get users that are coping with troubles here to swtich to more stable solution\n. @fedesilvaponte @leog there is an alternative angular.js provider called **ngProgressLite** - http://labs.voronianski.com/ngprogress-lite.js/ \nit's small and has same API as original jquery plugin.\n. @leog thanks, spread a word about it, maybe someone is also coping with this one with no luck ;)\n. @VictorBjelkholm as for me it's better to provide it as an option so developer will choose it by himself. \n\nit's much better to have full-control of styles in css file than to trying to override by `!important`'s\n. @MrOrz \"However moving all styles to CSS would make some Javascript API pointless.\" -\nI think those methods like `setHeight` can be still in source code but they will simply interact with styles inlining them directly.\n. @VictorBjelkholm @MrOrz guys, what's the progress on this?\n. @oblador @Grigorius @sthomp I developed an alternative angular.js provider (due to a lot of issues in this one), it's called **ngProgressLite** - http://labs.voronianski.com/ngprogress-lite.js/ \n\nIt's small and has same API as original jquery plugin. You can check it out and maybe it will suit you.\n. @Grigorius yeah, ngProgressLite is a port of it to angular.js with the same API, it's not a good practice to be dependant on jquery in angular app.\n. @bondaestudi thanks! spread a word about it to get users that are coping with troubles here to swtich to more stable solution\n. @fedesilvaponte @leog there is an alternative angular.js provider called **ngProgressLite** - http://labs.voronianski.com/ngprogress-lite.js/ \nit's small and has same API as original jquery plugin.\n. @leog thanks, spread a word about it, maybe someone is also coping with this one with no luck ;)\n. ",
    "DefunctExodus": "I would also feel much more comfortable if everything was defined within a CSS file.\n. @braco  I like that idea.\n. I would also feel much more comfortable if everything was defined within a CSS file.\n. @braco  I like that idea.\n. ",
    "braco": "In the build script, push the css into the js and use that by default when no stylePath is defined\n\nand maybe an autoStyle: false to disable both\n. In the build script, push the css into the js and use that by default when no stylePath is defined\n\nand maybe an autoStyle: false to disable both\n. ",
    "ostera": "I think this should be a provider plus a directive.\n\nThe provider will allow the user to configure the service and interact with the API and the directive will listen to events and showing the progress bar or whatever other behavior it has.\n\n```\n// config block\n// interact with ngProgressProvider API\n// add an http interceptor or something\n\n// controller\n// ngProgress.start\n// or if hooked up to the interceptors just do your regular http calls\n\n// html\n<ng-progress-bar />\n```\n. I think this should be a provider plus a directive.\n\nThe provider will allow the user to configure the service and interact with the API and the directive will listen to events and showing the progress bar or whatever other behavior it has.\n\n```\n// config block\n// interact with ngProgressProvider API\n// add an http interceptor or something\n\n// controller\n// ngProgress.start\n// or if hooked up to the interceptors just do your regular http calls\n\n// html\n<ng-progress-bar />\n```\n. ",
    "tmayr": "There seems to be duplicated files (the ngProgress and the files in src), I assume that ngProgress is the \"build\" of the source, so I would move it there. Will open a pull request with the changes!\n. We can generate a Grunt task to update both and generate releases, what do you think?\n\nUpdated the mistakes you noticed, sorry about that! and moved examples out of the examples folder again, it's not worth it if it breaks github pages.\n. How about something like this? \nhttps://github.com/tmayr/ngProgress/commit/4d294f90c345e0c2ee5b3c931e915ae120acc49a\n. There seems to be duplicated files (the ngProgress and the files in src), I assume that ngProgress is the \"build\" of the source, so I would move it there. Will open a pull request with the changes!\n. We can generate a Grunt task to update both and generate releases, what do you think?\n\nUpdated the mistakes you noticed, sorry about that! and moved examples out of the examples folder again, it's not worth it if it breaks github pages.\n. How about something like this? \nhttps://github.com/tmayr/ngProgress/commit/4d294f90c345e0c2ee5b3c931e915ae120acc49a\n. ",
    "selfinterest": "Hey Alari,\n\nHere's how we did it in a project:\n\n(1) Create a separate service (call it progressService.)\n(2) Have the interceptor fire off a $rootScope event when the request goes out and another one when a response is received.\n(3) ProgressService has ngProgress as a dependency and listens for the events, starting or stopping the progress bar accordingly.\n(4) We also had to throw in a ngProgress.reset() call in the event handler that starts ngProgress to avoid certain issues when multiple requests go out in quick succession.\n\nSort of like this:\nhttp://plnkr.co/VQw2Ay3VinuVJvlX3lEw\n. @alari \n\nOkay, I went back and thought through the issue some more. The problem was, trying to inject ngProgress into the factory function was giving me a circular dependency error.\n\nI did some checking and found this:\n\nhttps://github.com/angular/angular.js/issues/2367\n\nUsing that as a model, I came up with this:\n\nhttp://plnkr.co/2CxGZ5fBg6BTfalpeBnb\n\nIt seems to do the job, without the extra service or using events.\n\nHope this helps!\n. @Rodeoclash \n\nWe've had some issues with that. It seems to occur when multiple http requests go out in quick succession (which can easily happen, especially in a single page app.) I've been thinking of a few ways to deal with that:\n\n(1) Simplest way: set a flag in the interceptor when the progress bar starts. Switch the flag off when the response comes in. If the flag is set, don't start the progress bar again.\n\n(2) Some kind of queue system, where you start progress bars sequentially as soon as one finishes. That seems like a bit of overkill to me, but could probably be done.\n\nI haven't dug too much into @VictorBjelkholm's  code. The circular reference problem in the interceptor happened to me a second time, using an unrelated module (the $modal from angular-ui-bootstrap, actually.) So it has less to do with ngProgress and more to do with the relationship between $http and $compile.\n\nI had to use the same solution in that case, lazily loading the $modal service. In that case, I went with option (1), because I didn't want multiple modal windows popping up for each failed request. It seemed to work okay in that case.\n. Hey Alari,\n\nHere's how we did it in a project:\n\n(1) Create a separate service (call it progressService.)\n(2) Have the interceptor fire off a $rootScope event when the request goes out and another one when a response is received.\n(3) ProgressService has ngProgress as a dependency and listens for the events, starting or stopping the progress bar accordingly.\n(4) We also had to throw in a ngProgress.reset() call in the event handler that starts ngProgress to avoid certain issues when multiple requests go out in quick succession.\n\nSort of like this:\nhttp://plnkr.co/VQw2Ay3VinuVJvlX3lEw\n. @alari \n\nOkay, I went back and thought through the issue some more. The problem was, trying to inject ngProgress into the factory function was giving me a circular dependency error.\n\nI did some checking and found this:\n\nhttps://github.com/angular/angular.js/issues/2367\n\nUsing that as a model, I came up with this:\n\nhttp://plnkr.co/2CxGZ5fBg6BTfalpeBnb\n\nIt seems to do the job, without the extra service or using events.\n\nHope this helps!\n. @Rodeoclash \n\nWe've had some issues with that. It seems to occur when multiple http requests go out in quick succession (which can easily happen, especially in a single page app.) I've been thinking of a few ways to deal with that:\n\n(1) Simplest way: set a flag in the interceptor when the progress bar starts. Switch the flag off when the response comes in. If the flag is set, don't start the progress bar again.\n\n(2) Some kind of queue system, where you start progress bars sequentially as soon as one finishes. That seems like a bit of overkill to me, but could probably be done.\n\nI haven't dug too much into @VictorBjelkholm's  code. The circular reference problem in the interceptor happened to me a second time, using an unrelated module (the $modal from angular-ui-bootstrap, actually.) So it has less to do with ngProgress and more to do with the relationship between $http and $compile.\n\nI had to use the same solution in that case, lazily loading the $modal service. In that case, I went with option (1), because I didn't want multiple modal windows popping up for each failed request. It seemed to work okay in that case.\n. ",
    "alari": "@selfinterest looks simple in implementation and fitting the need, but there's an overhead with emitting and catching events (well, not really heavy). Haven't you tried to pass `ngProgress` into $httpProvider interceptor?\nfunction($q, ngProgress) -> call ngProgress methods directly?\n\nI will play with your suggestion on our beta, thank you! :)\n. @selfinterest looks simple in implementation and fitting the need, but there's an overhead with emitting and catching events (well, not really heavy). Haven't you tried to pass `ngProgress` into $httpProvider interceptor?\nfunction($q, ngProgress) -> call ngProgress methods directly?\n\nI will play with your suggestion on our beta, thank you! :)\n. ",
    "Rodeoclash": "I just implemented. It sort of works but it seems that the ngProgress bar gets a bit confused sometimes and starts animating all over the place!\n\nMight be a few bugs to debug in it, I'll take a look.\n. Just added the flag system and it works great. This has actually been a good lesson on using the injector service in interceptors as I'd also tried to use the $modal service from AngularUI for error responses and given up.\n. I still had a few issues with the script above and it uses the depreciated reponseInterceptor instead of the generic http interceptor.\n\nThis updated code only displays the ngProgress for loading non templateUrl http requests too.\n\n```\n'use strict';\n\nangular.module('kumbyaApp')\n    .factory 'interceptorNgProgress', ($injector) ->\n\n        ng_progress = null\n        working = false\n\n        getNgProgress = () ->\n            ng_progress = ng_progress || $injector.get(\"ngProgress\")\n            ng_progress\n\n        complete_progress = () ->\n            if working\n                ngProgress = getNgProgress()\n                ngProgress.complete()\n                working = false\n\n        request: (request) ->\n            ngProgress = getNgProgress()\n\n            return request if request.url.indexOf('.html') > 0\n\n            if !working\n                ngProgress.reset()\n                ngProgress.start()\n                working = true\n\n            request\n\n        requestError: (request) ->\n            complete_progress()\n            request\n\n        response: (response) ->\n            complete_progress()\n            response\n\n        responseError: (response) ->\n            complete_progress()\n            response\n```\n. I just implemented. It sort of works but it seems that the ngProgress bar gets a bit confused sometimes and starts animating all over the place!\n\nMight be a few bugs to debug in it, I'll take a look.\n. Just added the flag system and it works great. This has actually been a good lesson on using the injector service in interceptors as I'd also tried to use the $modal service from AngularUI for error responses and given up.\n. I still had a few issues with the script above and it uses the depreciated reponseInterceptor instead of the generic http interceptor.\n\nThis updated code only displays the ngProgress for loading non templateUrl http requests too.\n\n```\n'use strict';\n\nangular.module('kumbyaApp')\n    .factory 'interceptorNgProgress', ($injector) ->\n\n        ng_progress = null\n        working = false\n\n        getNgProgress = () ->\n            ng_progress = ng_progress || $injector.get(\"ngProgress\")\n            ng_progress\n\n        complete_progress = () ->\n            if working\n                ngProgress = getNgProgress()\n                ngProgress.complete()\n                working = false\n\n        request: (request) ->\n            ngProgress = getNgProgress()\n\n            return request if request.url.indexOf('.html') > 0\n\n            if !working\n                ngProgress.reset()\n                ngProgress.start()\n                working = true\n\n            request\n\n        requestError: (request) ->\n            complete_progress()\n            request\n\n        response: (response) ->\n            complete_progress()\n            response\n\n        responseError: (response) ->\n            complete_progress()\n            response\n```\n. ",
    "pascalc": "Here's the above code snippet translated to JS:\n\n```\napp.factory('interceptorNgProgress', function ($injector) {\n  var complete_progress, getNgProgress, ng_progress, working;\n  ng_progress = null;\n  working = false;\n\n  getNgProgress = function() {\n    ng_progress = ng_progress || $injector.get(\"ngProgress\");\n    ng_progress.color(\"rgb(207,181,150)\");\n    return ng_progress;\n  };\n\n  complete_progress = function() {\n    var ngProgress;\n    if (working) {\n      ngProgress = getNgProgress();\n      ngProgress.complete();\n      return working = false;\n    }\n  };\n\n  return {\n    request: function(request) {\n      var ngProgress;\n      ngProgress = getNgProgress();\n      if (request.url.indexOf('.html') > 0) {\n        return request;\n      }\n      if (!working) {\n        ngProgress.reset();\n        ngProgress.start();\n        working = true;\n      }\n      return request;\n    },\n    requestError: function(request) {\n      complete_progress();\n      return request;\n    },\n    response: function(response) {\n      complete_progress();\n      return response;\n    },\n    responseError: function(response) {\n      complete_progress();\n      return response;\n    }\n  }\n});\n\napp.config(function ($httpProvider) {\n  $httpProvider.interceptors.push('interceptorNgProgress');\n});\n```\n. Here's the above code snippet translated to JS:\n\n```\napp.factory('interceptorNgProgress', function ($injector) {\n  var complete_progress, getNgProgress, ng_progress, working;\n  ng_progress = null;\n  working = false;\n\n  getNgProgress = function() {\n    ng_progress = ng_progress || $injector.get(\"ngProgress\");\n    ng_progress.color(\"rgb(207,181,150)\");\n    return ng_progress;\n  };\n\n  complete_progress = function() {\n    var ngProgress;\n    if (working) {\n      ngProgress = getNgProgress();\n      ngProgress.complete();\n      return working = false;\n    }\n  };\n\n  return {\n    request: function(request) {\n      var ngProgress;\n      ngProgress = getNgProgress();\n      if (request.url.indexOf('.html') > 0) {\n        return request;\n      }\n      if (!working) {\n        ngProgress.reset();\n        ngProgress.start();\n        working = true;\n      }\n      return request;\n    },\n    requestError: function(request) {\n      complete_progress();\n      return request;\n    },\n    response: function(response) {\n      complete_progress();\n      return response;\n    },\n    responseError: function(response) {\n      complete_progress();\n      return response;\n    }\n  }\n});\n\napp.config(function ($httpProvider) {\n  $httpProvider.interceptors.push('interceptorNgProgress');\n});\n```\n. ",
    "cxq": "Yes, there is a declaration of module variable and it creates conflict, it has to be renamed by another name than \"module\"\n\nexample :\nvar moduleProgress = angular.module('ngProgress', []);\n. Yes, there is a declaration of module variable and it creates conflict, it has to be renamed by another name than \"module\"\n\nexample :\nvar moduleProgress = angular.module('ngProgress', []);\n. ",
    "keithio": "I am experiencing a simliar error, and @cxq's solution does not work for me.\n. I am experiencing a simliar error, and @cxq's solution does not work for me.\n. ",
    "dasois": "Closing, since it does not relate to this code, but is an interesting IDE feature.\n. @avances123 no he currently does not have the time.\nI've taken over the development of this basically and planning to get this straight. Bugs/wishes/code are very welcome!\n. @sthomp @oblador @avances123 @Grigorius does this bug still affect you with the current version? If true, than please clarify.\n. The pull request has been integrated.\nPlease test if the issue is solved now.\n. this is fixed.\n. @QuantumInformation please use unminified js and provide the error-stack again. Also name the requested file.\n. +1\n. Actually you can set the value by \"word\", like for examle \"green\". ngProgress does this by itself on initialization.\nYour error must lie elsewhere...\n. @gabegorelick: how would you suggest addressing these multiple progress-bars in the css?\n. @dfsq: \n1. Im not sure how this issue would benefit from positioning in non-static containers?\n2. Why do you like to use `position: absolute`?\n. I'm not able to reproduce this with Chromium 35.\nPlease look for any console output.\n. closed, because no answers were given...\nI'm willing to reopen, if this issue still occurs to somebody evidently.\n. This has already been implemented and will be available with the next release\n. i guess then your suggestion is, that a call of start() should implicitly call stop()? Or should it throw an error if a timer is already started?\n. here you go!\n. already fixed with #47.\n. Why don't you do something like\n\n```\nngProgress.set(ngProgress.status() + 9);\n```\n\nas in the index.html?\n. closing since this does probably not need further investigation.\n. this will fix #28 and #33 \n. Im talking about changing the color property in the external css file.\n. I have thought about that for a while. I think another solution, which is maybe serving both purposes, would be to define a mandatory css-suffix attribute on the directive, which you'll have to apply to your css-class in order to get the styling.\nWhat do you think about that?\n. Yeah, that is indeed a valid concern. Thank you, go ahead! :)\n. `ngProgress.start()` does not complete the progress-bar. Why should it?\nCall `ngProgress.complete()` to complete it.\n. This was closed by #48.\nOn the website the new release has not yet being incorporated, see #57 \n. And produces confusion as in #56 \n. Was closed by f27ebbf4217c16a2fc34542500ae41520f47f20a\n. What about ngprogress.js?\n. Closing, since it does not relate to this code, but is an interesting IDE feature.\n. @avances123 no he currently does not have the time.\nI've taken over the development of this basically and planning to get this straight. Bugs/wishes/code are very welcome!\n. @sthomp @oblador @avances123 @Grigorius does this bug still affect you with the current version? If true, than please clarify.\n. The pull request has been integrated.\nPlease test if the issue is solved now.\n. this is fixed.\n. @QuantumInformation please use unminified js and provide the error-stack again. Also name the requested file.\n. +1\n. Actually you can set the value by \"word\", like for examle \"green\". ngProgress does this by itself on initialization.\nYour error must lie elsewhere...\n. @gabegorelick: how would you suggest addressing these multiple progress-bars in the css?\n. @dfsq: \n1. Im not sure how this issue would benefit from positioning in non-static containers?\n2. Why do you like to use `position: absolute`?\n. I'm not able to reproduce this with Chromium 35.\nPlease look for any console output.\n. closed, because no answers were given...\nI'm willing to reopen, if this issue still occurs to somebody evidently.\n. This has already been implemented and will be available with the next release\n. i guess then your suggestion is, that a call of start() should implicitly call stop()? Or should it throw an error if a timer is already started?\n. here you go!\n. already fixed with #47.\n. Why don't you do something like\n\n```\nngProgress.set(ngProgress.status() + 9);\n```\n\nas in the index.html?\n. closing since this does probably not need further investigation.\n. this will fix #28 and #33 \n. Im talking about changing the color property in the external css file.\n. I have thought about that for a while. I think another solution, which is maybe serving both purposes, would be to define a mandatory css-suffix attribute on the directive, which you'll have to apply to your css-class in order to get the styling.\nWhat do you think about that?\n. Yeah, that is indeed a valid concern. Thank you, go ahead! :)\n. `ngProgress.start()` does not complete the progress-bar. Why should it?\nCall `ngProgress.complete()` to complete it.\n. This was closed by #48.\nOn the website the new release has not yet being incorporated, see #57 \n. And produces confusion as in #56 \n. Was closed by f27ebbf4217c16a2fc34542500ae41520f47f20a\n. What about ngprogress.js?\n. ",
    "ksgy": "Not sure, but could be a solution to use the \"reset\" instead of the $timeouts. Works for me, but needs more use-case testing - since this bug only happens when using ngProgress with $http and for sure, not always comes up.\n. Not sure, but could be a solution to use the \"reset\" instead of the $timeouts. Works for me, but needs more use-case testing - since this bug only happens when using ngProgress with $http and for sure, not always comes up.\n. ",
    "purwandi": "Cool :+1: \n. Cool :+1: \n. ",
    "sthomp": "Looking forward to this commit. I've been seeing the '$digest already in progress' error a lot. Great work on this plugin so far!\n. Thanks, will take a look\n. Looking forward to this commit. I've been seeing the '$digest already in progress' error a lot. Great work on this plugin so far!\n. Thanks, will take a look\n. ",
    "SebastianM": "+1\n. +1\n. ",
    "oblador": "I've noticed this as well, looks like an issue with the interval not getting cleared properly to me. I'd suggest migrating to $timeout instead of setInterval to make it more angulary. \n. Haven't tried it, but it looks like you broke the faux progress functionality (which is the whole point of this directive). You will need to set the $timeout again and again if you want to mimic setInterval functionality. \n. It is, comment out ngProgress.complete(); and nothing happens.\n. I've noticed this as well, looks like an issue with the interval not getting cleared properly to me. I'd suggest migrating to $timeout instead of setInterval to make it more angulary. \n. Haven't tried it, but it looks like you broke the faux progress functionality (which is the whole point of this directive). You will need to set the $timeout again and again if you want to mimic setInterval functionality. \n. It is, comment out ngProgress.complete(); and nothing happens.\n. ",
    "Grigorius": "I have changed setInterval to $timeout and it appears to have solved this problem for me.\n\nhttp://plnkr.co/edit/XG9KIqje9eD13ms3l81N\n. the faux progress isn't broken - the loading is too fast ... (I think)\n. Ups, yes you are correct!\n. I'm currently using this: http://ricostacruz.com/nprogress/\n. I have changed setInterval to $timeout and it appears to have solved this problem for me.\n\nhttp://plnkr.co/edit/XG9KIqje9eD13ms3l81N\n. the faux progress isn't broken - the loading is too fast ... (I think)\n. Ups, yes you are correct!\n. I'm currently using this: http://ricostacruz.com/nprogress/\n. ",
    "gsabater": "Looks like due to the lack of updates and / or feedback, and several problems with this issue, i'm movin to ngprogress-lite too. Lets see how it works.\n. Looks like due to the lack of updates and / or feedback, and several problems with this issue, i'm movin to ngprogress-lite too. Lets see how it works.\n. ",
    "avances123": "this bug happens to me also, @VictorBjelkholm is not developing this anymore?\n. this bug happens to me also, @VictorBjelkholm is not developing this anymore?\n. ",
    "fedesilvaponte": "+1 on this, I'll like a solution for this issue too. \n. +1 on this, I'll like a solution for this issue too. \n. ",
    "leog": "Thanks @voronianski, I finally moved to other implementation.\n. Thanks @voronianski, I finally moved to other implementation.\n. ",
    "raitucarp": "summon @VictorBjelkholm and other\n. summon @VictorBjelkholm and other\n. ",
    "kodeinEU": "try \n\n$rootScope.$on('$routeChangeSuccess', function() { ngProgress.set(100); ngProgress.complete(); })\n\nworks for me\n. try \n\n$rootScope.$on('$routeChangeSuccess', function() { ngProgress.set(100); ngProgress.complete(); })\n\nworks for me\n. ",
    "morgoth": "I just found out, that overwriting CSS rule in custom file does not have any effect. Would be good to not be forced to call `ngProgress.color(\"blue\")`, but instead simply write in CSS: `#ngProgress {color: blue;}`\n. Just found out that this is solved in https://github.com/voronianski/ngprogress-lite - I recommend that one. Thanks @voronianski\n. I just found out, that overwriting CSS rule in custom file does not have any effect. Would be good to not be forced to call `ngProgress.color(\"blue\")`, but instead simply write in CSS: `#ngProgress {color: blue;}`\n. Just found out that this is solved in https://github.com/voronianski/ngprogress-lite - I recommend that one. Thanks @voronianski\n. ",
    "JDWardle": "I submitted a pull request that should resolve this issue.\n\nIn the meantime it looks like ngprogress-lite would be a great alternative.\n. I'll be submitting a pull request for this later. It seems to be as simple as removing the hard coded css values in the provider in order for overriding the css to actually work. The `height` and `color` functions will still be there but won't be necessary to use.\n. I submitted a pull request that should resolve this issue.\n\nIn the meantime it looks like ngprogress-lite would be a great alternative.\n. I'll be submitting a pull request for this later. It seems to be as simple as removing the hard coded css values in the provider in order for overriding the css to actually work. The `height` and `color` functions will still be there but won't be necessary to use.\n. ",
    "uo-lca": "I see a similar unit test error after adding ngProgress to a controller. I don't see any errors when running the app. I just get an error in the unit test which instantiates the controller. Stepping through the unit test in debugger, I see the error after the controller executes \n\n```\nngProgress.complete(); \n```\n\n```\nError: Unexpected request: GET components/resources/scenarios.json\nNo more request expected\n    at $httpBackend (http://localhost:9877/base/app/bower_components/angular-mocks/angular-mocks.js:1180:9)\n    at sendReq (http://localhost:9877/base/app/bower_components/angular/angular.js:8355:9)\n    at $get.serverRequest (http://localhost:9877/base/app/bower_components/angular/angular.js:8088:16)\n    at deferred.promise.then.wrappedCallback (http://localhost:9877/base/app/bower_components/angular/angular.js:11573:81)\n    at deferred.promise.then.wrappedCallback (http://localhost:9877/base/app/bower_components/angular/angular.js:11573:81)\n    at http://localhost:9877/base/app/bower_components/angular/angular.js:11659:26\n    at Scope.$get.Scope.$eval (http://localhost:9877/base/app/bower_components/angular/angular.js:12702:28)\n    at Scope.$get.Scope.$digest (http://localhost:9877/base/app/bower_components/angular/angular.js:12514:31)\n    at Scope.$get.Scope.$apply (http://localhost:9877/base/app/bower_components/angular/angular.js:12806:24)\n    at Object.updateCount (http://localhost:9877/base/app/bower_components/ngprogress/build/ngProgress.js:70:32)\nError: Declaration Location\n```\n. I see a similar unit test error after adding ngProgress to a controller. I don't see any errors when running the app. I just get an error in the unit test which instantiates the controller. Stepping through the unit test in debugger, I see the error after the controller executes \n\n```\nngProgress.complete(); \n```\n\n```\nError: Unexpected request: GET components/resources/scenarios.json\nNo more request expected\n    at $httpBackend (http://localhost:9877/base/app/bower_components/angular-mocks/angular-mocks.js:1180:9)\n    at sendReq (http://localhost:9877/base/app/bower_components/angular/angular.js:8355:9)\n    at $get.serverRequest (http://localhost:9877/base/app/bower_components/angular/angular.js:8088:16)\n    at deferred.promise.then.wrappedCallback (http://localhost:9877/base/app/bower_components/angular/angular.js:11573:81)\n    at deferred.promise.then.wrappedCallback (http://localhost:9877/base/app/bower_components/angular/angular.js:11573:81)\n    at http://localhost:9877/base/app/bower_components/angular/angular.js:11659:26\n    at Scope.$get.Scope.$eval (http://localhost:9877/base/app/bower_components/angular/angular.js:12702:28)\n    at Scope.$get.Scope.$digest (http://localhost:9877/base/app/bower_components/angular/angular.js:12514:31)\n    at Scope.$get.Scope.$apply (http://localhost:9877/base/app/bower_components/angular/angular.js:12806:24)\n    at Object.updateCount (http://localhost:9877/base/app/bower_components/ngprogress/build/ngProgress.js:70:32)\nError: Declaration Location\n```\n. ",
    "moneytree-doug": "@uo-lca I have the same issue, were you able to find a fix?\n. Here's how I produced this issue. As soon as I commented out the color statement, my Jasmine tests worked.\n\n```\nangular.module(\"myApp\", [\n  \"ngCookies\"\n  \"ngResource\"\n  \"ngRoute\"\n  \"ngIdle\"\n  \"ngProgress\"\n  \"ui.router\"\n  \"ui.bootstrap\"\n]).run(($state, $rootScope, $log, ngProgress) ->\n  ngProgress.color('#71C274')\n)\n\n```\n. @uo-lca I have the same issue, were you able to find a fix?\n. Here's how I produced this issue. As soon as I commented out the color statement, my Jasmine tests worked.\n\n```\nangular.module(\"myApp\", [\n  \"ngCookies\"\n  \"ngResource\"\n  \"ngRoute\"\n  \"ngIdle\"\n  \"ngProgress\"\n  \"ui.router\"\n  \"ui.bootstrap\"\n]).run(($state, $rootScope, $log, ngProgress) ->\n  ngProgress.color('#71C274')\n)\n\n```\n. ",
    "isRuslan": "If it is still important for you:\n\n```\n.run(['$location', '$rootScope', function($location, $rootScope) {\n  $rootScope.$on('$routeChangeStart', function(event, current, previous){\n    ngProgress.start();\n  });\n  $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {\n    ngProgress.complete();\n  });\n}]);\n```\n. If it is still important for you:\n\n```\n.run(['$location', '$rootScope', function($location, $rootScope) {\n  $rootScope.$on('$routeChangeStart', function(event, current, previous){\n    ngProgress.start();\n  });\n  $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {\n    ngProgress.complete();\n  });\n}]);\n```\n. ",
    "slavafomin": "@isRuslan your code snippet above is not quite correct. Looks like it's missing injection of `ngProgress`.\n\nHere's my extended working example:\n\n``` javascript\n.run(['$rootScope', 'ngProgress', function($rootScope, ngProgress) {\n    // You can customize progress bar here.\n    ngProgress.color('#F1C40F');\n\n    // When route started to change.\n    $rootScope.$on('$routeChangeStart', function() {\n        ngProgress.reset(); // Required to handle all edge cases.\n        ngProgress.start();\n    });\n\n    // When route successfully changed.\n    $rootScope.$on('$routeChangeSuccess', function() {\n        ngProgress.complete();\n    });\n\n    // When some error occured.\n    $rootScope.$on('$routeChangeError', function() {\n        ngProgress.reset();\n    });\n}])\n```\n. @isRuslan your code snippet above is not quite correct. Looks like it's missing injection of `ngProgress`.\n\nHere's my extended working example:\n\n``` javascript\n.run(['$rootScope', 'ngProgress', function($rootScope, ngProgress) {\n    // You can customize progress bar here.\n    ngProgress.color('#F1C40F');\n\n    // When route started to change.\n    $rootScope.$on('$routeChangeStart', function() {\n        ngProgress.reset(); // Required to handle all edge cases.\n        ngProgress.start();\n    });\n\n    // When route successfully changed.\n    $rootScope.$on('$routeChangeSuccess', function() {\n        ngProgress.complete();\n    });\n\n    // When some error occured.\n    $rootScope.$on('$routeChangeError', function() {\n        ngProgress.reset();\n    });\n}])\n```\n. ",
    "elvendor": "Thanks, @slavafomin ! It helped me.\n. Thanks, @slavafomin ! It helped me.\n. ",
    "daviesgeek": "@slavafomin Agreed.\n. @marionzualo I can't set a word value?\n. @dasois Ok, I'll have to go back and look at it. Thanks!\n. @slavafomin Agreed.\n. @marionzualo I can't set a word value?\n. @dasois Ok, I'll have to go back and look at it. Thanks!\n. ",
    "marionzualo": "You need to use the hex value of color like\n\n```\nngProgress.color('#ffcc99')\n```\n. I don't know. I did not test it like that. I only used the HEX value and it worked for me So, if it did not work for you with the word value, I'm assuming no.\n\nYet looking at the [source code](https://github.com/VictorBjelkholm/ngProgress/blob/master/src/provider.js) it should work in theory since this line seems to set the color:\n\n```\n            if (color !== undefined) {\n                progressbarEl.eq(0).children().css('background-color', color);\n                progressbarEl.eq(0).children().css('color', color);\n            }\n```\n\nand css('color','green') seems to be valid in [jQuery lite](http://api.jquery.com/css/).\n\nBut I'm no expert on this topic.\n. You need to use the hex value of color like\n\n```\nngProgress.color('#ffcc99')\n```\n. I don't know. I did not test it like that. I only used the HEX value and it worked for me So, if it did not work for you with the word value, I'm assuming no.\n\nYet looking at the [source code](https://github.com/VictorBjelkholm/ngProgress/blob/master/src/provider.js) it should work in theory since this line seems to set the color:\n\n```\n            if (color !== undefined) {\n                progressbarEl.eq(0).children().css('background-color', color);\n                progressbarEl.eq(0).children().css('color', color);\n            }\n```\n\nand css('color','green') seems to be valid in [jQuery lite](http://api.jquery.com/css/).\n\nBut I'm no expert on this topic.\n. ",
    "tsing": "+1\n. +1\n. ",
    "lemkepf": "+1\n. +1\n. ",
    "dfsq": "@dasois Maybe to make it a requirement that progress bar is used within not-statically positioned parent container. And also use `position: absolute` instead of fixed like it's now.\n. I just tested it and it works fine (however this is not native IE). Can you set up a failing demo maybe?\n\nhttp://embed.plnkr.co/E1OFOpSCravLITfh0PN9/preview\n. @dasois Maybe to make it a requirement that progress bar is used within not-statically positioned parent container. And also use `position: absolute` instead of fixed like it's now.\n. I just tested it and it works fine (however this is not native IE). Can you set up a failing demo maybe?\n\nhttp://embed.plnkr.co/E1OFOpSCravLITfh0PN9/preview\n. ",
    "gngeorgiev": "Take a look at #50. It is not exactly the same but will allow you to change the position of the progressbar by changing its parent, which can be positioned anywhere.\n. Are you referring to setting it with inline style(probably using the **color** method) or with external style?\n. Well since the colors are applied using inline styles, css ones will not work. It should be considered to use only one of both. I would go for inline styles only, this will also allow to implement multiple progressbars in future as per #37. I cannot agree with #33 since it conflicts with the other two.\n\nThat's just how I see it\n. Okay, here's an idea I just got out of the blue, it's just an idea, but we can use ShadowDom - https://github.com/Polymer/ShadowDOM. Every progress bar will have its own shadow dom, where the styles will use the same classes/ids (will be kept in a <style> tag) and whenever a value changes the shadowdom will be recompiled. Not sure whether this will work or not, but can be worth the try. Instead of including the stylesheet the user will include shadowdom.\n. Requesting the pull. Closing this.\n. Just in case you did not find a solution - you can use the setParent method: ngProgress.setParent(document.getElementById('container'));\n\nit is specified in the docs\n. My guess is that `element` is not yet added to the DOM.\n\nAlso if I recall correctly, this is not a correct usage of the method. You need to pass the `body` here, so that the parent of the progress bar becomes the `body`, not the progress bar itself.\n. Take a look at #50. It is not exactly the same but will allow you to change the position of the progressbar by changing its parent, which can be positioned anywhere.\n. Are you referring to setting it with inline style(probably using the **color** method) or with external style?\n. Well since the colors are applied using inline styles, css ones will not work. It should be considered to use only one of both. I would go for inline styles only, this will also allow to implement multiple progressbars in future as per #37. I cannot agree with #33 since it conflicts with the other two.\n\nThat's just how I see it\n. Okay, here's an idea I just got out of the blue, it's just an idea, but we can use ShadowDom - https://github.com/Polymer/ShadowDOM. Every progress bar will have its own shadow dom, where the styles will use the same classes/ids (will be kept in a <style> tag) and whenever a value changes the shadowdom will be recompiled. Not sure whether this will work or not, but can be worth the try. Instead of including the stylesheet the user will include shadowdom.\n. Requesting the pull. Closing this.\n. Just in case you did not find a solution - you can use the setParent method: ngProgress.setParent(document.getElementById('container'));\n\nit is specified in the docs\n. My guess is that `element` is not yet added to the DOM.\n\nAlso if I recall correctly, this is not a correct usage of the method. You need to pass the `body` here, so that the parent of the progress bar becomes the `body`, not the progress bar itself.\n. ",
    "brandonkboswell": "+1\n. +1\n. ",
    "kjakub": "sorry i overlooked that and forgot the Provider syntax\n\n``` javascript\n\napp.config(function(ngProgressProvider){\n    // Default color is firebrick\n    ngProgressProvider.setColor('firebrick');\n    // Default height is 2px\n    ngProgressProvider.setHeight('10px');\n});\n\n```\n. sorry i overlooked that and forgot the Provider syntax\n\n``` javascript\n\napp.config(function(ngProgressProvider){\n    // Default color is firebrick\n    ngProgressProvider.setColor('firebrick');\n    // Default height is 2px\n    ngProgressProvider.setHeight('10px');\n});\n\n```\n. ",
    "awendland": "This happens to me as well. Has a solution been found?\n. Just to provide closure on my commentary:\n\nThe issue has disappeared for me. I'm going to chalk it up to my implementation though I still can't figure out what changed that would have fixed it.\n\nAlso, there was no console output.\n. This happens to me as well. Has a solution been found?\n. Just to provide closure on my commentary:\n\nThe issue has disappeared for me. I'm going to chalk it up to my implementation though I still can't figure out what changed that would have fixed it.\n\nAlso, there was no console output.\n. ",
    "faidoc": "I was making it wrong in the controller. Should be:\n\n`app.controller('MenuController', ['$scope', 'ngProgress', function ($scope, ngProgress) {`\n. I was making it wrong in the controller. Should be:\n\n`app.controller('MenuController', ['$scope', 'ngProgress', function ($scope, ngProgress) {`\n. ",
    "martiro": "CHANGE1: In the start method I make a check of intervalCounterId variable:\n start: function () {\n                        // TODO Use requestAnimationFrame instead of setInterval\n                        // https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame\n                        this.show();\n                        var self = this;\n                       // RBM call setInterval only if it ha never been called\n                        if (intervalCounterId == undefined) {  \n                            intervalCounterId = setInterval(function () {\n                                if (isNaN(count)) {\n                                    clearInterval(intervalCounterId);\n                                    count = 0;\n                                    self.hide();\n                                } else {\n\nCHANGE2: in the reset function i reset the value of intervalCounterId  to undefined\n\n reset: function () {\n                        //logger.debug(\"ngProgress.reset() count=\" + count);\n                        clearInterval(intervalCounterId);\n                        intervalCounterId = undefined;\n                        count = 0;\n                        this.updateCount(count);\n                        return 0;\n                    },\n\nCHANGE3: in the nested timeout I simply call the reset method\n\ncomplete: function () {\n                        //logger.debug(\"ngProgress.complete() count=\" + count);\n                        count = 100;\n                        this.updateCount(count);\n                        var self = this;\n                        $timeout(function () {\n                            self.hide();\n                            $timeout(function () {\n                                //count = 0;\n                                //self.updateCount(count);\n                                self.reset(count);\n                            }, 500);\n                        }, 1000);\n                        return count;\n                    }\n\nBye\n. CHANGE1: In the start method I make a check of intervalCounterId variable:\n start: function () {\n                        // TODO Use requestAnimationFrame instead of setInterval\n                        // https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame\n                        this.show();\n                        var self = this;\n                       // RBM call setInterval only if it ha never been called\n                        if (intervalCounterId == undefined) {  \n                            intervalCounterId = setInterval(function () {\n                                if (isNaN(count)) {\n                                    clearInterval(intervalCounterId);\n                                    count = 0;\n                                    self.hide();\n                                } else {\n\nCHANGE2: in the reset function i reset the value of intervalCounterId  to undefined\n\n reset: function () {\n                        //logger.debug(\"ngProgress.reset() count=\" + count);\n                        clearInterval(intervalCounterId);\n                        intervalCounterId = undefined;\n                        count = 0;\n                        this.updateCount(count);\n                        return 0;\n                    },\n\nCHANGE3: in the nested timeout I simply call the reset method\n\ncomplete: function () {\n                        //logger.debug(\"ngProgress.complete() count=\" + count);\n                        count = 100;\n                        this.updateCount(count);\n                        var self = this;\n                        $timeout(function () {\n                            self.hide();\n                            $timeout(function () {\n                                //count = 0;\n                                //self.updateCount(count);\n                                self.reset(count);\n                            }, 500);\n                        }, 1000);\n                        return count;\n                    }\n\nBye\n. ",
    "zackarychapple": "+1 I would really like if this would be resolved. \n. Any chance we can get a version bump with this?\n. +1 I would really like if this would be resolved. \n. Any chance we can get a version bump with this?\n. ",
    "cetra3": "HI @dasois is this still required?\n. Hi @lukehorvat is this still valid?\n. Closing this off.  Can reopen if still needed.\n. Closing this as a duplicate of https://github.com/VictorBjelkholm/ngProgress/issues/33\n. Hi @philberesford,\n\nCan you update this to the latest version?\n. Hi @alex-signature-it is this still required?\n. Ok, I'll close this off.  Thanks!\n. Hi @emirdeliz,\n\nI would say you can manage this with another scope variable that would make the form read only upon submission:\n\nhttps://docs.angularjs.org/api/ng/directive/ngReadonly\n. Fixed by https://github.com/VictorBjelkholm/ngProgress/pull/77\n. @arlowhite Can you submit a PR for this\n. Hi @arlowhite is overriding the CSS not sufficient?\n. @MangeshPimpalkar Can you raise a PR for this?\n. @MangeshPimpalkar what will this add to the project?  Can you give us a rundown of why its necessary? \n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Fixed by https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Resolved by https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Hi @herpiko,\n\nI have a feeling this would break compatibility with non-browserify code, as `module` is not a defined function with vanilla javascript.  Is there a more compatible way of doing this?\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. @tiberiu80,\n\nYou can reuse the same progress bar by wrapping it in a service, so you don't need to create multiple progress bars.  This way you can inject the same instance in multiple controllers/directives.\n\nAn example service:\n\n```\napp.factory(\"progressBar\", ['ngProgressFactory', function(ngProgressFactory) {\n    var progressBar = ngProgressFactory.createInstance();\n    progressBar.setColor(\"#008cba\");\n    return progressBar;\n  }\n]);\n```\n\nThen you can inject this into a controller/directive:\n\n```\napp.controller(\"exampleController\", [\"$scope\", \"progressBar\", function(scope, progressBar) {\n    progressBar.start();\n    progressBar.complete();\n});\n```\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Duplicate of https://github.com/VictorBjelkholm/ngProgress/issues/83\n. Hi @jaganjan can you set up a plnkr example for this\n. Closing this off.  Can reopen if still needed.\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Hi @jamesjwarren can you submit a PR for this\n. I would say it should be configurable per instance, rather than a hardset value.  Then when changing the instance config, you have a chance to change it.\n\nOtherwise, you can use the [provide decorator](http://stackoverflow.com/questions/17660947/can-you-override-specific-templates-in-angularui-bootstrap) to do what you asked:\n\n```\nangular.module('myModule', ['ngProgress'])\n  .config(['$provide', function($provide) {\n    $provide.decorator('ngProgressDirective', function($delegate) {\n      var directive = $delegate[0];\n      directive.template = '<div id=\"ngProgress-container\"><div id=\"ngProgress\"></div></div>';\n      return $delegate;\n    });\n   }\n]);\n```\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Resolved by this PR: https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Hi @zehavibarak,\n\nCurrently Angular itself is not capable of displaying progress using the `$http` service.  You would need to wait for this PR to land:\n\nhttps://github.com/angular/angular.js/pull/11547\n\nAfter that, it would simply be a matter of implementing a callback, updating your ngprogress instance.\n. Hi @madhudskumar,\n\nCan I get you to create a pull request to resolve what was wrong in the documentation?\n. Hi @dasois,  yes it's deprecated.  There is a `setColor` function that can be used if you need to update the colour.\n. Hi @vogloblinsky,\n\nProbably needs and update, mind submitting a PR?\n. I've looked into this, but don't think I have the appropriate authority to publish this to NPM.  I'll keep investigating.\n. Can you open a PR For this?  Thanks\n. Solved by the PR\n. I'm not sure what you're trying to achieve with the sample code, so a bit more of an understanding around this may be better.\n\nYou can use setParent on an `element` that doesn't belong to the progressbar itself.  This is really only useful for attaching it to something else rather than the default.\n. You will need to adjust the CSS to adjust the position to be within an element: https://github.com/VictorBjelkholm/ngProgress/blob/master/ngProgress.css\n. Hi Zephyrus,\n\nCan you submit a PR to address this?\n\nThanks\n. I'd need to see your controller to find out what is going wrong\n\nYou should inject the ngProgressFactory:\n\n```\nvar MainCtrl = function($scope, $timeout, ngProgressFactory) {}\n```\n\nThen in your controller's function, create an instance of ngProgress:\n\n```\n$scope.progressbar = ngProgressFactory.createInstance();\n```\n. Yeah, it may be worthwhile as a note in the readme for upgrading.  I have a feeling it was changed to allow multiple instances of ngProgress at any given time.\n. Yep, agree.  This was before my time.  Glad to have solved the mystery though.\n. Should be `build/ngprogress.js` instead of `build/ngProgress.js`\n. HI @dasois is this still required?\n. Hi @lukehorvat is this still valid?\n. Closing this off.  Can reopen if still needed.\n. Closing this as a duplicate of https://github.com/VictorBjelkholm/ngProgress/issues/33\n. Hi @philberesford,\n\nCan you update this to the latest version?\n. Hi @alex-signature-it is this still required?\n. Ok, I'll close this off.  Thanks!\n. Hi @emirdeliz,\n\nI would say you can manage this with another scope variable that would make the form read only upon submission:\n\nhttps://docs.angularjs.org/api/ng/directive/ngReadonly\n. Fixed by https://github.com/VictorBjelkholm/ngProgress/pull/77\n. @arlowhite Can you submit a PR for this\n. Hi @arlowhite is overriding the CSS not sufficient?\n. @MangeshPimpalkar Can you raise a PR for this?\n. @MangeshPimpalkar what will this add to the project?  Can you give us a rundown of why its necessary? \n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Fixed by https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Resolved by https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Hi @herpiko,\n\nI have a feeling this would break compatibility with non-browserify code, as `module` is not a defined function with vanilla javascript.  Is there a more compatible way of doing this?\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. @tiberiu80,\n\nYou can reuse the same progress bar by wrapping it in a service, so you don't need to create multiple progress bars.  This way you can inject the same instance in multiple controllers/directives.\n\nAn example service:\n\n```\napp.factory(\"progressBar\", ['ngProgressFactory', function(ngProgressFactory) {\n    var progressBar = ngProgressFactory.createInstance();\n    progressBar.setColor(\"#008cba\");\n    return progressBar;\n  }\n]);\n```\n\nThen you can inject this into a controller/directive:\n\n```\napp.controller(\"exampleController\", [\"$scope\", \"progressBar\", function(scope, progressBar) {\n    progressBar.start();\n    progressBar.complete();\n});\n```\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Duplicate of https://github.com/VictorBjelkholm/ngProgress/issues/83\n. Hi @jaganjan can you set up a plnkr example for this\n. Closing this off.  Can reopen if still needed.\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Hi @jamesjwarren can you submit a PR for this\n. I would say it should be configurable per instance, rather than a hardset value.  Then when changing the instance config, you have a chance to change it.\n\nOtherwise, you can use the [provide decorator](http://stackoverflow.com/questions/17660947/can-you-override-specific-templates-in-angularui-bootstrap) to do what you asked:\n\n```\nangular.module('myModule', ['ngProgress'])\n  .config(['$provide', function($provide) {\n    $provide.decorator('ngProgressDirective', function($delegate) {\n      var directive = $delegate[0];\n      directive.template = '<div id=\"ngProgress-container\"><div id=\"ngProgress\"></div></div>';\n      return $delegate;\n    });\n   }\n]);\n```\n. Implemented in https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Resolved by this PR: https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Hi @zehavibarak,\n\nCurrently Angular itself is not capable of displaying progress using the `$http` service.  You would need to wait for this PR to land:\n\nhttps://github.com/angular/angular.js/pull/11547\n\nAfter that, it would simply be a matter of implementing a callback, updating your ngprogress instance.\n. Hi @madhudskumar,\n\nCan I get you to create a pull request to resolve what was wrong in the documentation?\n. Hi @dasois,  yes it's deprecated.  There is a `setColor` function that can be used if you need to update the colour.\n. Hi @vogloblinsky,\n\nProbably needs and update, mind submitting a PR?\n. I've looked into this, but don't think I have the appropriate authority to publish this to NPM.  I'll keep investigating.\n. Can you open a PR For this?  Thanks\n. Solved by the PR\n. I'm not sure what you're trying to achieve with the sample code, so a bit more of an understanding around this may be better.\n\nYou can use setParent on an `element` that doesn't belong to the progressbar itself.  This is really only useful for attaching it to something else rather than the default.\n. You will need to adjust the CSS to adjust the position to be within an element: https://github.com/VictorBjelkholm/ngProgress/blob/master/ngProgress.css\n. Hi Zephyrus,\n\nCan you submit a PR to address this?\n\nThanks\n. I'd need to see your controller to find out what is going wrong\n\nYou should inject the ngProgressFactory:\n\n```\nvar MainCtrl = function($scope, $timeout, ngProgressFactory) {}\n```\n\nThen in your controller's function, create an instance of ngProgress:\n\n```\n$scope.progressbar = ngProgressFactory.createInstance();\n```\n. Yeah, it may be worthwhile as a note in the readme for upgrading.  I have a feeling it was changed to allow multiple instances of ngProgress at any given time.\n. Yep, agree.  This was before my time.  Glad to have solved the mystery though.\n. Should be `build/ngprogress.js` instead of `build/ngProgress.js`\n. ",
    "deiu": "Could you please reopen this issue, because I think you misread my comment. I didn't talk about the calls, I know very well how the library works. I was talking about two events that might trigger ngProgress.start(), at which point the loading bar would never fully complete.\n\nAgain, you can test this strange behavior by going to https://victorbjelkholm.github.io/ngProgress/ and clicking on Start -> Complete. Wait for it to complete then click on Start again. \n\nCONCLUSION: The loading bar will never complete if two ngProgress.start() are made without refreshing the page. \n. Yes to your Edit: comment. My app often completes and starts new loading bars as data arrives, which triggers this issue. Is there any fix planned?\n. Could you please reopen this issue, because I think you misread my comment. I didn't talk about the calls, I know very well how the library works. I was talking about two events that might trigger ngProgress.start(), at which point the loading bar would never fully complete.\n\nAgain, you can test this strange behavior by going to https://victorbjelkholm.github.io/ngProgress/ and clicking on Start -> Complete. Wait for it to complete then click on Start again. \n\nCONCLUSION: The loading bar will never complete if two ngProgress.start() are made without refreshing the page. \n. Yes to your Edit: comment. My app often completes and starts new loading bars as data arrives, which triggers this issue. Is there any fix planned?\n. ",
    "tvararu": "Getting the same issue in pretty much the same conditions.\n\nI've traced the cause to inside the `color` method, to the `$scope.$$phase` and `$scope.$apply` calls. But after working on it for a good amount of time, we decided to just `!important` the `background-color` from CSS.\n. Getting the same issue in pretty much the same conditions.\n\nI've traced the cause to inside the `color` method, to the `$scope.$$phase` and `$scope.$apply` calls. But after working on it for a good amount of time, we decided to just `!important` the `background-color` from CSS.\n. ",
    "KannarFr": "Getting exactly the same issue, will use the `!important` ><.\n. Getting exactly the same issue, will use the `!important` ><.\n. ",
    "philberesford": "Hello @cetra3, I'll have to take a look as it's been a while since I made the original PR. Any problems and I'll give you a shout. Thanks.\n. Hello @cetra3, I'll have to take a look as it's been a while since I made the original PR. Any problems and I'll give you a shout. Thanks.\n. ",
    "felipesanches": "I need that as well, for the Metapolator web typography application: https://github.com/metapolator/metapolator/issues/496\n. Yes, I guess we could pass a DOM node to the constructor.\n. It seems that this commit already provides us a way to do it:\n\nhttps://github.com/VictorBjelkholm/ngProgress/commit/c9639c68de2c2a1fd64d2b3ac129078d72de4fb3\n\nby placing the <ng-progress> tag in our angular template. I'll try that.\n. hmmm... actually I was wrong about the way it enables it. It actually enables it by providing a new API method: setParent(DOMnode) :-)\n. I was able to find a solution that works, but I am not happy about the code style. I feel like this is a shortcoming of the ngProgress API implementation, so I leave this note here so that the developers can look at our code as a reference to what people have been trying to do with the library and ended up in hacky solutions like mine at https://github.com/felipesanches/metapolator/commit/b61e4816c0c78d5afe2d5b5a6fab72ffd73a2407\n. I need that as well, for the Metapolator web typography application: https://github.com/metapolator/metapolator/issues/496\n. Yes, I guess we could pass a DOM node to the constructor.\n. It seems that this commit already provides us a way to do it:\n\nhttps://github.com/VictorBjelkholm/ngProgress/commit/c9639c68de2c2a1fd64d2b3ac129078d72de4fb3\n\nby placing the <ng-progress> tag in our angular template. I'll try that.\n. hmmm... actually I was wrong about the way it enables it. It actually enables it by providing a new API method: setParent(DOMnode) :-)\n. I was able to find a solution that works, but I am not happy about the code style. I feel like this is a shortcoming of the ngProgress API implementation, so I leave this note here so that the developers can look at our code as a reference to what people have been trying to do with the library and ended up in hacky solutions like mine at https://github.com/felipesanches/metapolator/commit/b61e4816c0c78d5afe2d5b5a6fab72ffd73a2407\n. ",
    "davelab6": "At the moment its hard coded to the page body, at https://github.com/VictorBjelkholm/ngProgress/blob/master/src/provider.js#L20\n\nI hope making the target element configurable should be simple..?\n. Sounds good\n. At the moment its hard coded to the page body, at https://github.com/VictorBjelkholm/ngProgress/blob/master/src/provider.js#L20\n\nI hope making the target element configurable should be simple..?\n. Sounds good\n. ",
    "alex-signature-it": "Same here, I've prepared a couple of Plunks for reference:\n- Here's a [baseline ngProgress example](http://plnkr.co/Bq0SQeEMJFyeYwsRUNuJ), based on 1.0.6 version, it works.\n- And here's my [attempt to upgrade to version 1.1.1](http://plnkr.co/4oH6PBAER4qt5gUSHf2Z), forked from the previous example, and I cannot make it work due to \"Error: [$injector:unpr] Unknown provider: aProvider <- a <- ngProgressFactory\".\n\nI tested it with the following versions of AngularJS: 1.3.13 and 1.4.3, with similar results.\n\nActually it seems to be fixed on master, see the [following Plunk](http://plnkr.co/4dsAPABEanADGlns4A6x).\n. Thanks for such a prompt response!\n. Oh well, if that's intended or forced by the tools change I guess we'll have to live with it.\nThought it was just a typo of sorts.\n. Well, I guess anyone interested in the project have updated their code by now. I know I did.\n. Same here, I've prepared a couple of Plunks for reference:\n- Here's a [baseline ngProgress example](http://plnkr.co/Bq0SQeEMJFyeYwsRUNuJ), based on 1.0.6 version, it works.\n- And here's my [attempt to upgrade to version 1.1.1](http://plnkr.co/4oH6PBAER4qt5gUSHf2Z), forked from the previous example, and I cannot make it work due to \"Error: [$injector:unpr] Unknown provider: aProvider <- a <- ngProgressFactory\".\n\nI tested it with the following versions of AngularJS: 1.3.13 and 1.4.3, with similar results.\n\nActually it seems to be fixed on master, see the [following Plunk](http://plnkr.co/4dsAPABEanADGlns4A6x).\n. Thanks for such a prompt response!\n. Oh well, if that's intended or forced by the tools change I guess we'll have to live with it.\nThought it was just a typo of sorts.\n. Well, I guess anyone interested in the project have updated their code by now. I know I did.\n. ",
    "marcoT89": "@VictorBjelkholm did you update npm/bower to 1.1.2? Because I can't download that version via npm. And I still get this error. Waiting for that! \n\nThanks for this module!! That's simple and awesome!!\n. @VictorBjelkholm did you update npm/bower to 1.1.2? Because I can't download that version via npm. And I still get this error. Waiting for that! \n\nThanks for this module!! That's simple and awesome!!\n. ",
    "sgsvenkatesh": "1.1.2 is still not available on npm. It'll be good to have it there. \r\n![image](https://cloud.githubusercontent.com/assets/4642729/21492806/a8febd36-cc2d-11e6-892e-97e5638cc311.png)\r\n. 1.1.2 is still not available on npm. It'll be good to have it there. \r\n![image](https://cloud.githubusercontent.com/assets/4642729/21492806/a8febd36-cc2d-11e6-892e-97e5638cc311.png)\r\n. ",
    "ABeltramo": "[Yarn](https://yarnpkg.com/en/package/ngprogress) also is still on 1.1.1!\r\n<img width=\"376\" alt=\"schermata 2017-08-14 alle 11 10 22\" src=\"https://user-images.githubusercontent.com/1122217/29265404-3179c210-80e1-11e7-84bf-2f58dce342bb.png\">\r\n. [Yarn](https://yarnpkg.com/en/package/ngprogress) also is still on 1.1.1!\r\n<img width=\"376\" alt=\"schermata 2017-08-14 alle 11 10 22\" src=\"https://user-images.githubusercontent.com/1122217/29265404-3179c210-80e1-11e7-84bf-2f58dce342bb.png\">\r\n. ",
    "dciccale": "working :+1: \n. working :+1: \n. ",
    "paddingme": "https://github.com/VictorBjelkholm/ngProgress/pull/76\n. https://github.com/VictorBjelkholm/ngProgress/pull/76\n. ",
    "portus84": "+1\n. +1\n. ",
    "thiagofesta": "+1 i need that!\n\n@VictorBjelkholm could you please merge this one and release?\n\n@pauljohncleary i think you could keep the non minified file\n\nFor those who wants a quick fix to your CI, replace the bower version by: `https://raw.githubusercontent.com/VictorBjelkholm/ngProgress/v1.1.2/build/ngprogress.js`\n\n```\n\"ngprogress\": \"https://raw.githubusercontent.com/VictorBjelkholm/ngProgress/v1.1.2/build/ngprogress.js\"\n```\n. @pauljohncleary my idea was to keep as the author did, and also, usually people minify their code, so keeping the non minified means that on the dev time you are dealing with the full version of the file, which helps out in case there is some error related to, you can test easier.\n\nWhat are your thoughts?\n. Thanks @VictorBjelkholm :)\n. I don't see any problem with this PR... @VictorBjelkholm said he was going to merge it, but I don't know what happened.\n. I am not sure why @VictorBjelkholm does not approve it. It's all good.\n\nHe should approve that or add someone to manage his repository (if there is no time to verify, and release new versions), to approve and help the opensource community.\n\nHe won't spend more than 5 minutes to release a new version...\n\nFor now use one of these solutions: https://github.com/VictorBjelkholm/ngProgress/pull/77#issuecomment-137542198, https://github.com/VictorBjelkholm/ngProgress/pull/77#issuecomment-138737197\n. +1 i need that!\n\n@VictorBjelkholm could you please merge this one and release?\n\n@pauljohncleary i think you could keep the non minified file\n\nFor those who wants a quick fix to your CI, replace the bower version by: `https://raw.githubusercontent.com/VictorBjelkholm/ngProgress/v1.1.2/build/ngprogress.js`\n\n```\n\"ngprogress\": \"https://raw.githubusercontent.com/VictorBjelkholm/ngProgress/v1.1.2/build/ngprogress.js\"\n```\n. @pauljohncleary my idea was to keep as the author did, and also, usually people minify their code, so keeping the non minified means that on the dev time you are dealing with the full version of the file, which helps out in case there is some error related to, you can test easier.\n\nWhat are your thoughts?\n. Thanks @VictorBjelkholm :)\n. I don't see any problem with this PR... @VictorBjelkholm said he was going to merge it, but I don't know what happened.\n. I am not sure why @VictorBjelkholm does not approve it. It's all good.\n\nHe should approve that or add someone to manage his repository (if there is no time to verify, and release new versions), to approve and help the opensource community.\n\nHe won't spend more than 5 minutes to release a new version...\n\nFor now use one of these solutions: https://github.com/VictorBjelkholm/ngProgress/pull/77#issuecomment-137542198, https://github.com/VictorBjelkholm/ngProgress/pull/77#issuecomment-138737197\n. ",
    "pauljohncleary": "@thiagofesta I'm curious- any particular reason to keep the non minified available in the build?\n. @thiagofesta I'm curious- any particular reason to keep the non minified available in the build?\n. ",
    "fvezzoso": "Hi @VictorBjelkholm, thanks for your work and sorry to bother you... but can you please merge this?\n\nThanks in advance!\n. :+1: \n\nI was about to submit a pull request when I saw that @pauljohncleary already created one here https://github.com/VictorBjelkholm/ngProgress/pull/77\n\nThanks!\n. I think this is already reported here #82 \n. Hi @VictorBjelkholm, thanks for your work and sorry to bother you... but can you please merge this?\n\nThanks in advance!\n. :+1: \n\nI was about to submit a pull request when I saw that @pauljohncleary already created one here https://github.com/VictorBjelkholm/ngProgress/pull/77\n\nThanks!\n. I think this is already reported here #82 \n. ",
    "MangeshPimpalkar": "+1\n. I think the PR has been pending for long time.\nBecause of case sensitive  issues and delay in merging I have to fork it on my project and work on local copy.\n. @VictorBjelkholm  I see the last commit was August 2 2015.\nIt's been almost 3 months without commit and lots of pending PR to be merged it.\n\nIt will be nice if you delegate it to other contributors if you are too busy.\n. @cetra3 done\n. @VictorBjelkholm please review.\n. Hi @VictorBjelkholm \nThere are lots of PR waiting to be merged.\n. @VictorBjelkholm Whenever PR is created the code is formatted according to the editors they are using eg Webstrom/sublime/eclipse have they their own code formatters.\n.editorconfig makes the formatting consistent.Instead of using default editor formatters we use .editorconfig.\nAll the projects use it .angular/mean\n. @rodrix So many Pr's for the same issue.\n. @IanShoe There are multiple PRs created just for this issue.\nIt is pending merge.\n. +1\n. I think the PR has been pending for long time.\nBecause of case sensitive  issues and delay in merging I have to fork it on my project and work on local copy.\n. @VictorBjelkholm  I see the last commit was August 2 2015.\nIt's been almost 3 months without commit and lots of pending PR to be merged it.\n\nIt will be nice if you delegate it to other contributors if you are too busy.\n. @cetra3 done\n. @VictorBjelkholm please review.\n. Hi @VictorBjelkholm \nThere are lots of PR waiting to be merged.\n. @VictorBjelkholm Whenever PR is created the code is formatted according to the editors they are using eg Webstrom/sublime/eclipse have they their own code formatters.\n.editorconfig makes the formatting consistent.Instead of using default editor formatters we use .editorconfig.\nAll the projects use it .angular/mean\n. @rodrix So many Pr's for the same issue.\n. @IanShoe There are multiple PRs created just for this issue.\nIt is pending merge.\n. ",
    "pustun": "+1\n. +1\n. ",
    "IanShoe": "+1 in the hopes of this getting in soon!\n. Duplicate of https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Ahh I see that now. Sorry, I was in a rush and did not check other issues at all.\n. +1 in the hopes of this getting in soon!\n. Duplicate of https://github.com/VictorBjelkholm/ngProgress/pull/77\n. Ahh I see that now. Sorry, I was in a rush and did not check other issues at all.\n. ",
    "frankadrian": "+1\n. +1\n. ",
    "briboles": ":+1:  I would very much like this pulled into master and released. Having to call document to get element in the controller makes one more item I have to stub in unit tests.  :-)\n. :+1:  I would very much like this pulled into master and released. Having to call document to get element in the controller makes one more item I have to stub in unit tests.  :-)\n. ",
    "robwalkerco": "When installing with bower and using grunt wiredep to add bower dependencies into my index.html page, it injects using the wrong name for the js file, which still works fine in my mac Vagrant test environment, but not on the staging server due to stricter capitalisation file name rules.\n. When installing with bower and using grunt wiredep to add bower dependencies into my index.html page, it injects using the wrong name for the js file, which still works fine in my mac Vagrant test environment, but not on the staging server due to stricter capitalisation file name rules.\n. ",
    "darrenshrwd": "It is true that the progress bar is always fixed to top.  Would be nice for it to just flow below the div above.\n. It is true that the progress bar is always fixed to top.  Would be nice for it to just flow below the div above.\n. ",
    "athakral": "OOps closed \n. OOps closed \n. ",
    "ravishan110": "Is there any update on this enhancement?. Is there any update on this enhancement?. ",
    "victorbadic": "I was missing some css, it seems. S\n. I was missing some css, it seems. S\n. ",
    "schmod": "Indeed.  This seems to have changed in 1.1.12...\n. Indeed.  This seems to have changed in 1.1.12...\n. ",
    "Mihail-K": "We've also run into this issue (and it was very tricky to diagnose).\n\nAs a temporary workaround, you can add an override to your bower file,\n\n``` json\n\"overrides\": {\n  \"ngprogress\": {\n    \"main\": [\n      \"build/ngprogress.js\",\n      \"ngProgress.css\"\n    ]\n  }\n}\n```\n\nNote that you will have to remove it if the issue is resolved in a future version.\n. We've also run into this issue (and it was very tricky to diagnose).\n\nAs a temporary workaround, you can add an override to your bower file,\n\n``` json\n\"overrides\": {\n  \"ngprogress\": {\n    \"main\": [\n      \"build/ngprogress.js\",\n      \"ngProgress.css\"\n    ]\n  }\n}\n```\n\nNote that you will have to remove it if the issue is resolved in a future version.\n. ",
    "ttgraham": "Thank you @Mihail-K for the override. +1 to fixing this, spent my morning tracking down a gulp inconsistency in a new environment.\n. Thank you @Mihail-K for the override. +1 to fixing this, spent my morning tracking down a gulp inconsistency in a new environment.\n. ",
    "zakhenry": "@cetra3 I have implemented a more compatible export method in #115 which should close this PR\n. @cetra3 this wasn't resolved in that PR. The `\"main\"` entry in package.json has been `ngProgress.js` since first commit of `package.json`. See https://github.com/VictorBjelkholm/ngProgress/blame/master/package.json\n. @cetra3 I have implemented a more compatible export method in #115 which should close this PR\n. @cetra3 this wasn't resolved in that PR. The `\"main\"` entry in package.json has been `ngProgress.js` since first commit of `package.json`. See https://github.com/VictorBjelkholm/ngProgress/blame/master/package.json\n. ",
    "herpiko": "@xiphiaz Thank you. I'm sorry for this ugly PR. I'll close this.\n. @xiphiaz Thank you. I'm sorry for this ugly PR. I'll close this.\n. ",
    "psmarcin": "+1\n. +1\n. ",
    "meriadec": ":+1: \n. :+1: \n. ",
    "frippe75": "Made a small change adding a setter function. If you want me to do a PR please let me know a suiteable name of the function .. \n\nThis is what it looks like in my example have four fixed states to process. I think I will look into adding the css part to make some markers where the \"towards\"/states are on the progressbar.\n\nDid not play too much with my different states-procentages but it's a  pretty linear feel to the process \n[youtube example of a firmware upgrade](https://youtu.be/fMfK9nbbMQY)\n. Made a small change adding a setter function. If you want me to do a PR please let me know a suiteable name of the function .. \n\nThis is what it looks like in my example have four fixed states to process. I think I will look into adding the css part to make some markers where the \"towards\"/states are on the progressbar.\n\nDid not play too much with my different states-procentages but it's a  pretty linear feel to the process \n[youtube example of a firmware upgrade](https://youtu.be/fMfK9nbbMQY)\n. ",
    "kentingxu": "#77 didn't fix the problem in `package.json`, it only fixed `bower.json`.\n. #77 didn't fix the problem in `package.json`, it only fixed `bower.json`.\n. ",
    "BioPhoton": "Could you just change the template setting to templateUrl in the directive part?\nThen it would be easy to override the default template and implement custom once.\n\nI guess this change is too small for a PR but would help many people! :-)\n\nhttps://github.com/VictorBjelkholm/ngProgress/blob/master/src/directive.js#L35\n`\ntemplate: '<div id=\"ngProgress-container\"><div id=\"ngProgress\"></div></div>'\n`\nto\n`templateUrl:'ngProgress/template.html'`\n. Could you just change the template setting to templateUrl in the directive part?\nThen it would be easy to override the default template and implement custom once.\n\nI guess this change is too small for a PR but would help many people! :-)\n\nhttps://github.com/VictorBjelkholm/ngProgress/blob/master/src/directive.js#L35\n`\ntemplate: '<div id=\"ngProgress-container\"><div id=\"ngProgress\"></div></div>'\n`\nto\n`templateUrl:'ngProgress/template.html'`\n. ",
    "CarlAmbroselli": "now it references `\"main\": \"build/ngProgress.js\"`, but it should reference `\"main\": \"build/ngprogress.js\"`.\n. now it references `\"main\": \"build/ngProgress.js\"`, but it should reference `\"main\": \"build/ngprogress.js\"`.\n. ",
    "rgroten": "For consistency, maybe ngprogress.js should be renamed (back to) ngProgress.js.  That's how it's referenced everywhere else.\n. For consistency, maybe ngprogress.js should be renamed (back to) ngProgress.js.  That's how it's referenced everywhere else.\n. ",
    "amypellegrini": "The master repo docs are updated, only the website in gh-pages would need an update. 10-min is a good investment in a plugin that was already coded for you :)\n. BTW: I found a potential issue with the module name case in the main section of the bower.json. Since the main dist file name case is different than that in bower.json, task runners like gulp would not find the file in certain environments (Unix?).\n\nI'm still not 100% sure on this, but I'll send my pull request with the fix if it happens to be true.\n. The master repo docs are updated, only the website in gh-pages would need an update. 10-min is a good investment in a plugin that was already coded for you :)\n. BTW: I found a potential issue with the module name case in the main section of the bower.json. Since the main dist file name case is different than that in bower.json, task runners like gulp would not find the file in certain environments (Unix?).\n\nI'm still not 100% sure on this, but I'll send my pull request with the fix if it happens to be true.\n. ",
    "timestep": "\ud83d\udc4d I'd love to see this in\n. \ud83d\udc4d I'd love to see this in\n. ",
    "iainduff": "Change to package.json \"main\" in this pull allows ngProgress to work with browserify. Please merge.\n. Change to package.json \"main\" in this pull allows ngProgress to work with browserify. Please merge.\n. ",
    "pfgray": "As a workaround, in order to use the `1.1.2` version, I referenced the release tag on this repository: \n\n```\nnpm install VictorBjelkholm/ngProgress#v1.1.2 --save\n```\n\nThis still isn't preferred, as I'd like to install from npm directly, rather than github.\n. As a workaround, in order to use the `1.1.2` version, I referenced the release tag on this repository: \n\n```\nnpm install VictorBjelkholm/ngProgress#v1.1.2 --save\n```\n\nThis still isn't preferred, as I'd like to install from npm directly, rather than github.\n. ",
    "mkalish": "+1\n. +1\n. Solves issue #117 \n. Updated to ngprogress\n. +1\n. +1\n. Solves issue #117 \n. Updated to ngprogress\n. ",
    "Manningham": "+1\n. +1\n. +1\n. +1\n. ",
    "jwanglof": "+1\n. +1\n. ",
    "frame": "+1\n. +1\n. ",
    "kerv2150": "+1. +1. ",
    "gerardorn": "Ist not working for me either\nCode:\nHTML\n`<div id=\"container\">\n      <div id=\"pbar\"></div>\n      <div class=\"main-content container\" data-ng-view></div>\n    </div>`\n\nJavaScript\n`app.controller(\"MyCtrl\", function($scope, ngProgressFactory) {\n    $scope.progressbar = ngProgressFactory.createInstance();\n    $scope.progressbar.setParent(document.getElementById(\"pbar\"));\n    $scope.progressbar.setAbsolute();\n        $scope.progressbar.start();\n    $scope.progressbar.complete();\n});`\n\nStill shows the bar at the top instead of inside the container\n. Ist not working for me either\nCode:\nHTML\n`<div id=\"container\">\n      <div id=\"pbar\"></div>\n      <div class=\"main-content container\" data-ng-view></div>\n    </div>`\n\nJavaScript\n`app.controller(\"MyCtrl\", function($scope, ngProgressFactory) {\n    $scope.progressbar = ngProgressFactory.createInstance();\n    $scope.progressbar.setParent(document.getElementById(\"pbar\"));\n    $scope.progressbar.setAbsolute();\n        $scope.progressbar.start();\n    $scope.progressbar.complete();\n});`\n\nStill shows the bar at the top instead of inside the container\n. ",
    "djewel23": "Sadly, I can't provide a repo for this, but my search on the Internet revealed to me that Bower prefers packages submit un-minified versions of code to allow the end user to decide what to do with it.\n\nSee the thread [here](https://github.com/katspaugh/wavesurfer.js/issues/699).\n. Sadly, I can't provide a repo for this, but my search on the Internet revealed to me that Bower prefers packages submit un-minified versions of code to allow the end user to decide what to do with it.\n\nSee the thread [here](https://github.com/katspaugh/wavesurfer.js/issues/699).\n. ",
    "toutpt": "I think it's more a bug than a question because it works on 1.0.\n\nI have injected 'ngProgress' into the controller:\n\n```\nfunction msgService($uibModal, notificationService, ngProgress, errorMsgService, gettextCatalog) {\n    'ngInject';\n    ...\n    cf capture for the code\n```\n\nIf I look to the source: https://github.com/VictorBjelkholm/ngProgress/blob/master/src/provider.js#L3\n\n```\n.service('ngProgress', function () {\n```\n\nSo It should be possible to use 'ngProgress' but it's not.\nBecause it returns something that is not a service:\n\n```\nreturn ['$document', '$window', '$compile', '$rootScope', '$timeout', function($document, $window, $c\n```\n\nAnd as I said It works on the 1.0 but not on the 1.1\nand I have found the commit that broke my code:\n\nhttps://github.com/VictorBjelkholm/ngProgress/commit/f888e28b2f3dd8c917c1b2c7a416c4b7787db537\n\nSo it means 'ngProgress' is not a service anymore ?\n\nNow I need to change from 'ngProgress' to 'ngProgressFactory', create an instance and put it into the scope. You may add a note for this migration path from 1.0 to 1.1\nor fix it to be usable as a service.\n. A question, do that work on 1.0 ?\n\n```\n--- a/src/framework/messages.js\n+++ b/src/framework/messages.js\n@@ -106,9 +106,10 @@\n     * @name swif.framework.msgService\n     * @description this service provide an API to display feedback to the user.\n     **/\n-    function msgService($uibModal, notificationService, ngProgress, errorMsgService, gettextCatalog) {\n+    function msgService($uibModal, notificationService, ngProgressFactory, errorMsgService, gettextCatalog) {\n         'ngInject';\n         var messages = [];\n+        var ngProgress = ngProgressFactory.createInstance();\n```\n. I understand, adding features is always great but breaking changes are bad\n(at least 1.0 -> 1.1 should be minor changes).\n\nTo handle this I'm using https://github.com/semantic-release/semantic-release which pump major release depending on your commit message and that is great !\n. I think it's more a bug than a question because it works on 1.0.\n\nI have injected 'ngProgress' into the controller:\n\n```\nfunction msgService($uibModal, notificationService, ngProgress, errorMsgService, gettextCatalog) {\n    'ngInject';\n    ...\n    cf capture for the code\n```\n\nIf I look to the source: https://github.com/VictorBjelkholm/ngProgress/blob/master/src/provider.js#L3\n\n```\n.service('ngProgress', function () {\n```\n\nSo It should be possible to use 'ngProgress' but it's not.\nBecause it returns something that is not a service:\n\n```\nreturn ['$document', '$window', '$compile', '$rootScope', '$timeout', function($document, $window, $c\n```\n\nAnd as I said It works on the 1.0 but not on the 1.1\nand I have found the commit that broke my code:\n\nhttps://github.com/VictorBjelkholm/ngProgress/commit/f888e28b2f3dd8c917c1b2c7a416c4b7787db537\n\nSo it means 'ngProgress' is not a service anymore ?\n\nNow I need to change from 'ngProgress' to 'ngProgressFactory', create an instance and put it into the scope. You may add a note for this migration path from 1.0 to 1.1\nor fix it to be usable as a service.\n. A question, do that work on 1.0 ?\n\n```\n--- a/src/framework/messages.js\n+++ b/src/framework/messages.js\n@@ -106,9 +106,10 @@\n     * @name swif.framework.msgService\n     * @description this service provide an API to display feedback to the user.\n     **/\n-    function msgService($uibModal, notificationService, ngProgress, errorMsgService, gettextCatalog) {\n+    function msgService($uibModal, notificationService, ngProgressFactory, errorMsgService, gettextCatalog) {\n         'ngInject';\n         var messages = [];\n+        var ngProgress = ngProgressFactory.createInstance();\n```\n. I understand, adding features is always great but breaking changes are bad\n(at least 1.0 -> 1.1 should be minor changes).\n\nTo handle this I'm using https://github.com/semantic-release/semantic-release which pump major release depending on your commit message and that is great !\n. ",
    "ivanvoznyakovsky": "UPD: seems like it only the problem of the version in NPM. would you update NPM repo to latest version?\n. UPD: seems like it only the problem of the version in NPM. would you update NPM repo to latest version?\n. ",
    "reyraa": "Because of this issue I have to use your master branch instead of the tag release. Would be great if you have a minor release fixing this issue. Thank you. Because of this issue I have to use your master branch instead of the tag release. Would be great if you have a minor release fixing this issue. Thank you. ",
    "AllenBW": "@VictorBjelkholm gonna ditto on the above remarks, coulda ya pretty please update npm version, also \u2764\ufe0f \ud83c\udf2e \ud83d\udc83 \ud83d\ude47\u200d\u2640\ufe0f . @VictorBjelkholm gonna ditto on the above remarks, coulda ya pretty please update npm version, also \u2764\ufe0f \ud83c\udf2e \ud83d\udc83 \ud83d\ude47\u200d\u2640\ufe0f . "
}