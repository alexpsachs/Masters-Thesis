{
    "jwerle": "+1\n. +1\n. ",
    "kornelski": "Have you got a WP8 device? Does the mouse event fallback work?\n. It's a shame that it can't work with mouse events fallback.\n\nDo you want to try to add pointer events support? The code already supports a couple of different input methods, so it should handle a third one.\n\nI don't have WP device myself, so it might be a while before I have a chance to work on this.\n. OK, go for it. \n. Any progress?\n. Looks clear, I'll check that out soon.\n. Sorry, I don't have time to look at this.\n. Yes, please help out!\n. Thanks for the tip. That's a brilliant workaround, but it's also quite hacky. I'm a bit worried it could cause problems.\n. Please make a pull request :)\n. Thanks \n. Sorry, this will match \"notslip-swiping-container\".\n. Anyway, thanks for the PR. I agree that the regex is ugly. What do you think about replacing it with HTML5's shiny new `classList`?\n. Good idea. Thanks!\n. That's odd. `addMouseHandlers()` is called only in `onMouseDown` and only if `this.usingTouch` is false.\n\nTry adding:\n\n```\n        if (this.usingTouch || e.button !== 0) return;\n```\n\nafter         `onMouseUp: function(e) {`. Does this help?\n. I can't reproduce. I've added some defensive code just in case.\n. Looks good, thanks!\n. And just wait till I make an icon for the project! ;)\n. :)\n. :+1: \n. When you catch the event `e.detail` will contain the information. \n. Great writeup @y-lohse. \n\nI originally designed it for mobile phones where usually only one column is visible at a time, which is why it's not a generic draggable-anything-anywhere library.\n\nHowever, I'm all for extending the code to handle more cases, as long as the core use case isn't compromised (for example reordering within a _single_ list should keep behavior of \"locking\" element horizontally and only moving vertically).\n\nIn the code there's `states` object. You could add a new state for dragging across lists there, and where the state is set `this.setState(this.states.reorder)` enable the new state based on Slip's configuration.\n\nCan you describe your use-cases in more detail?\n\nI'm wondering whether dragging between lists should be modelled as connecting instances of `Slip` together, or whether it needs to be generic to allow dragging anywhere. If it's supposed to allow dragging anywhere, should it use HTML5 drag'n'drop APIs to communicate with drop targets?\n. The intention was to catch all current and near-future Chrome versions, so 30-40 was deliberate (although Chrome devs will hate me when they reach version 300 ;)\n\nHave you checked that workarounds are not needed any more?\n. Thanks!\n. Sorry, I'm still seeing z-index bugs in Chrome 37, so I've reverted the change. I'm afraid that flickering is the price to pay for it :(\n. Yes, I'm testing with Canary version (on Mac OS X). You can see the problem on http://pornel.net/slip \n1. Grab element to reorder\n2. Drag it down until it's more than half way below another element\n\nYou will see that the dragged element appears underneath the element in the list: \n\n![grab](https://cloud.githubusercontent.com/assets/72159/3242875/b94183dc-f150-11e3-8763-b84182508e69.png)\n\nbut the element that is being dragged should always be on top of other elements.\n. Try latest version 41928cf188134a6afb88544390242112f6372baa\n\nI suspect mouseup/touchend event of a tap was being \"eaten\" by the library unintentionally\n. I'm glad it works. The change is a bit risky though, will cause the bug you saw if somebody relied on slip:tap event's buggy behavior.\n. It was buggy. It should be OK now.\n\nIf somebody liked the buggy behavior, they'll need to change their code.\n. Good idea. Can you try adding it?\n\nOn 8 July 2014 14:07:36 Jonnas Fonini notifications@github.com wrote:\n\n> Hi,\n> \n> it would be nice if there was an event like 'cancelswipe', to be fired when \n> the user stops dragging the list item and the item returns to it's original \n> position.\n> \n> Thanks for the awesome lib!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/pornel/slip/issues/18\n. Yes, please make PR, but rename the event to slip:cancelswipe.\n. Thank you\n. Good catch, thanks!\n. Sorry, I don't support ES3.\n\nPlease add `--language_in ECMASCRIPT5` to Closure Compiler args instead.\n. https://github.com/pornel/slip/blob/master/slip.js#L84\n. Try attaching slip to `tbody` element. \n. No, sorry. I don't support ES3-only browsers and tools. The code is in ES5.\n\nI don't know why CC chooses to be outdated by default, but if you add `--language=ECMASCRIPT5` it will work.\n. @AnBauer as to why keep them: \n- adding new element to a list only changes one line. This makes merge conflicts less likely/problematic.\n- it's slightly easier to write and reorder list items,\n- consistency in comma placement reduces chance of forgetting them.\n\nI think it'd be better if CC updated their defaults to make it a non-issue. I've filed a bug: https://code.google.com/p/closure-compiler/issues/detail?id=1318\n. Sorry, I have no plans to support ie8. ie9 should support addEventListener, so the problem is probably elsewhere.\n\nslip is mainly for mobile, where these are irrelevant, and workarounds for crappy browsers may unnecessarily complicate the codebase, so I'd rather avoid that.\n\nIf you're targeting legacy desktop browsers, you'll need to use a different library.\n. Maybe a polyfill would help (try FT's https://cdn.polyfill.io/v1/). I don't have IE VMs installed currently, so I can't test.\n. Added info here https://github.com/pornel/slip/blob/master/README.md#old-browsers\n. Sorry, I think it's a bad style for libraries to polyfill random parts of the platform - you could get bind behaving slightly differently depending on order you include your libraries!\n\nI recommend to just include polyfills before including libraries. As a bonus you'll be including polyfills once and only when necessary.\n\nAlso have a look at http://labs.ft.com/2014/09/polyfills-as-a-service/\n. It's not possible out of the box. You would have to rewrite how slip.js finds elements before/after the current one.\n\nhttps://github.com/pornel/slip/blob/a4145da90803538c546136470140f9c280864c54/slip.js#L374 etc\n. Thanks. That's useful addition, but the code that finds the index looks like a duplicate from another function. Could you refactor both copies into a single function?\n. Great :)\n. Thanks\n. Thanks\n. Thanks for checking it. Could you investigate what is failing? Does it fire mouse events?\n. Thanks, I've added a note in the readme 49ea2fd1a40cd5b3963a7fc7a4d34640fe987846\n. It does seem hide the error rather than fix the root cause. If there's no target, then the library shouldn't be in state of dragging a target.\n. Sorry for late response.\n- Instead of detecting prefix by checking for ActiveXObject you can detect it by checking for the prefix, like it's done for WebKit.\n- I'm not sure if it's worth supporting IE, given that the library is meant for mobile, and doesn't support IE's PointerEvents.\n. There's no option for it out of the box. If you swap x/y width/height in the source it might work.\n. Try `user-select:none`. Thanks for sharing your solutions.\n. Yeah, sorry. It's likely an iOS issue.\n. This is a very bad idea \u2014 it will disable hardware acceleration (when too many elements are layers browsers give up and fall back to CPU rendering).\n. Add event listener for `slip:beforeswipe` event and call `preventDefault()`\n. Done 94f48f954ed9c5a29b41e5f882e63a9cbc7e1f6a\n. This was implemented in #12. If it's not complete, then it'd be great if you could fix it :)\n. This line is supposed to animate move of the element back to its original position.\n. when you reorder, call `preventDefault` to prevent that animation.\n. Cool! Thanks.\n. No. I hope it's simple enough that somebody else can wrap/adapt it if necessary.\n. Sorry, I don't have Windows, so I won't do it. See #2 \n. OK, I've created a tag\n. That's because IE9 and IE10 are not supported at all. IE11 only on mobile, but I haven't tested it. Please don't use this library if you need IE support.\n. Is there a solution that does not involve detecting a particular browser? Is that a timing issue? Can it be solved by setting a flag or deferring actions with setTimeout? \n. Listening for selection change event (and preventDefault on it) is to prevent mouse movement during reordering from being interpreted as text selection gesture. Without it drag may still work, but browsers will be selecting all text along the way, which is ugly and confusing.\n\nThe second problem is that on iOS you can't prevent selection this way (you can with CSS only), but you can at least react to it happening, so Slip tries to cooperate with iOS in that case, and aborts the drag.\n\nDoes this line run in your case? (i.e. if you delete that line, does it work for you?) https://github.com/pornel/slip/blob/4fa9d23063e5b88e31850ae57dc5303daa48ba65/slip.js#L583\n\nif so, it'd be better to add browser sniffing to this condition https://github.com/pornel/slip/blob/master/slip.js#L577\n. >  Do you have a reliable way to detect iOS?\n\nNo, unfortunately. Test for `iPhone|iPad|iPod` and not `Android|Windows` (to eliminate some everything-goes user-agents).\n. Thanks\n. Setting willChange informs the browser that the element will animate soon, so it should be using an accelerated layer. Without it you would have a delay/jerky animation when it starts moving.\n\nSetting transformProperty to an empty string like that would completely break all animations in all browsers that don't emulate WebKit.\n. the names of variables are not clear though, `transformPrefix` should be `JSTransformPropertyName` and `transformProperty` should be `CSSTransformPropertyName`.\n. Firefox has unprefixed `transform` in 2012 in v16. I don't think there's a need to support versions _that_ old.\n. That's weird. I've checked, and FF (v47) emulates webkit properties, so the unprefixed empty-string `transformProperty` _is not even used_. \n\nI've switched the logic around to prefer unprefixed now. \n\nPerhaps `willChange` exposes a browser bug. Promoting element to a layer could mess with z-index. However, checkboxes and select elements work on my demo page, so I can't reproduce the problem you're reporting. \n. Sorry, I don't understand. Are you saying you're using something like `<span onclick>` instead of `<input type=checkbox>`?\n. In that case, try disabling swipe-drag on the span:\n\n```\nol.addEventListener('slip:beforeswipe', function(e){\n// change that to detect your <span>\n        if (e.target.nodeName == 'INPUT' || /demo-no-swipe/.test(e.target.className)) {\n            e.preventDefault();\n        }\n    }, false);\n```\n. preventDefault is for the custom event, not the click.\n\nYou may also want to prevent `slip:beforereorder` to stop span from being used for dragging up/down.\n. If I remember correctly I was assuming that `insertBefore(\u2026, null)` is the same as `appendChild(\u2026)`\n. That's great. Thank you.\n. Makes sense. Thanks.\n. OK, let's try that.\n\nWhat do other libraries, like jQuery, do in such case?\n. Thank you very much. This is quite solid work!\n. Thank you. That's very useful indeed.\n. You're taking better care of this library than I do, so I've added you to project collaborators :)\n. OK\n. There's a [detach](https://github.com/pornel/slip/blob/f0c21539ef1ee63f7fcc2734e391e6ff021ddb61/slip.js#L533) method. Alternatively, you could use `preventDefault()` on slip's events to prevent it from taking actions.\n. LGTM\n. I agree, it is problematic. It probably should keep updating continuously. Updating on mousemove makes scrolling dependent also on the rate browser sends updates, so it can't be relied upon.\n\nCurrently there's no solution for this proposed.\n. I don't understand what do you mean.. I'm assuming your items are originally stored in some array.\r\n\r\n```js\r\nvar originalIndex = event.detail.originalIndex;\r\nvar spliceIndex = event.detail.spliceIndex\r\nvar movedItem = yourArray[originalIndex];\r\nyourArray.splice(originalIndex, 1); // Remove item from the previous position\r\nyourArray.splice(spliceIndex, 0, movedItem); // Insert item in the new position\r\n```. substitute it for the array you use to store the items you're reordering.. This library doesn't work the way you think. It doesn't manage any data at all. You use it to display your data. You're supposed to have the data in the first place.. The library does not hold the data. There is no data in slip. The example I've shown you was for your array of your data, that is never given to or taken from the library.. Yes, a fix is welcome.. contains doesn't return -1, so the >= 0 check is inappropriate. Thank you. I've used array notation deliberately as it's a hint for the Closure Compiler to preserve the global name.. There's no function for this. You could try to copy code of `reorder` state's `onEnd()`.. I can't reproduce it.\r\n\r\nWhich version of Firefox? Do you get a JS error in the console?. This is because you have `<a href=\"javascript:void(0)\"`. You should never use this for anything, ever.. `will-change` is needed, and it doesn't throw JS errors, so I don't want to remove it.\r\n\r\nThat might be a Firefox CSS bug. Removing `position: absolute;` from `.fli .btn-icon .pri` fixes the issue for me. Try using flexbox instead maybe?\r\n\r\n. You need to figure out CSS layout for this on your own. This library doesn't have any support for columns or anything like that.. You can prevent some elements from being moved by calling `preventDefault()` on all operations (see how the example page does it).\r\n\r\nThe library doesn't have a concept of empty space between elements, so if an element is removed, it has no choice but move other elements to fill the gap.. Ah, I see. That makes sense.\r\n\r\nThere's reordering state:\r\n\r\nhttps://github.com/pornel/slip/blob/master/slip.js#L371\r\n\r\nand other elements are visually moved here:\r\n\r\nhttps://github.com/pornel/slip/blob/master/slip.js#L416\r\n\r\nand final order is decided here:\r\n\r\nhttps://github.com/pornel/slip/blob/master/slip.js#L468\r\n\r\nSo in these places you'd have to figure out how to skip fixed-position elements.. The change seems simple enough. I'd recommend keeping elements movable by default (with no class) and using class only to make them unmovable.\r\n\r\nPerhaps the class could be `slip-fixed-header` or `slip-fixed-edge`, so that it's clear it won't work in the middle.. Have you got a WP8 device? Does the mouse event fallback work?\n. It's a shame that it can't work with mouse events fallback.\n\nDo you want to try to add pointer events support? The code already supports a couple of different input methods, so it should handle a third one.\n\nI don't have WP device myself, so it might be a while before I have a chance to work on this.\n. OK, go for it. \n. Any progress?\n. Looks clear, I'll check that out soon.\n. Sorry, I don't have time to look at this.\n. Yes, please help out!\n. Thanks for the tip. That's a brilliant workaround, but it's also quite hacky. I'm a bit worried it could cause problems.\n. Please make a pull request :)\n. Thanks \n. Sorry, this will match \"notslip-swiping-container\".\n. Anyway, thanks for the PR. I agree that the regex is ugly. What do you think about replacing it with HTML5's shiny new `classList`?\n. Good idea. Thanks!\n. That's odd. `addMouseHandlers()` is called only in `onMouseDown` and only if `this.usingTouch` is false.\n\nTry adding:\n\n```\n        if (this.usingTouch || e.button !== 0) return;\n```\n\nafter         `onMouseUp: function(e) {`. Does this help?\n. I can't reproduce. I've added some defensive code just in case.\n. Looks good, thanks!\n. And just wait till I make an icon for the project! ;)\n. :)\n. :+1: \n. When you catch the event `e.detail` will contain the information. \n. Great writeup @y-lohse. \n\nI originally designed it for mobile phones where usually only one column is visible at a time, which is why it's not a generic draggable-anything-anywhere library.\n\nHowever, I'm all for extending the code to handle more cases, as long as the core use case isn't compromised (for example reordering within a _single_ list should keep behavior of \"locking\" element horizontally and only moving vertically).\n\nIn the code there's `states` object. You could add a new state for dragging across lists there, and where the state is set `this.setState(this.states.reorder)` enable the new state based on Slip's configuration.\n\nCan you describe your use-cases in more detail?\n\nI'm wondering whether dragging between lists should be modelled as connecting instances of `Slip` together, or whether it needs to be generic to allow dragging anywhere. If it's supposed to allow dragging anywhere, should it use HTML5 drag'n'drop APIs to communicate with drop targets?\n. The intention was to catch all current and near-future Chrome versions, so 30-40 was deliberate (although Chrome devs will hate me when they reach version 300 ;)\n\nHave you checked that workarounds are not needed any more?\n. Thanks!\n. Sorry, I'm still seeing z-index bugs in Chrome 37, so I've reverted the change. I'm afraid that flickering is the price to pay for it :(\n. Yes, I'm testing with Canary version (on Mac OS X). You can see the problem on http://pornel.net/slip \n1. Grab element to reorder\n2. Drag it down until it's more than half way below another element\n\nYou will see that the dragged element appears underneath the element in the list: \n\n![grab](https://cloud.githubusercontent.com/assets/72159/3242875/b94183dc-f150-11e3-8763-b84182508e69.png)\n\nbut the element that is being dragged should always be on top of other elements.\n. Try latest version 41928cf188134a6afb88544390242112f6372baa\n\nI suspect mouseup/touchend event of a tap was being \"eaten\" by the library unintentionally\n. I'm glad it works. The change is a bit risky though, will cause the bug you saw if somebody relied on slip:tap event's buggy behavior.\n. It was buggy. It should be OK now.\n\nIf somebody liked the buggy behavior, they'll need to change their code.\n. Good idea. Can you try adding it?\n\nOn 8 July 2014 14:07:36 Jonnas Fonini notifications@github.com wrote:\n\n> Hi,\n> \n> it would be nice if there was an event like 'cancelswipe', to be fired when \n> the user stops dragging the list item and the item returns to it's original \n> position.\n> \n> Thanks for the awesome lib!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/pornel/slip/issues/18\n. Yes, please make PR, but rename the event to slip:cancelswipe.\n. Thank you\n. Good catch, thanks!\n. Sorry, I don't support ES3.\n\nPlease add `--language_in ECMASCRIPT5` to Closure Compiler args instead.\n. https://github.com/pornel/slip/blob/master/slip.js#L84\n. Try attaching slip to `tbody` element. \n. No, sorry. I don't support ES3-only browsers and tools. The code is in ES5.\n\nI don't know why CC chooses to be outdated by default, but if you add `--language=ECMASCRIPT5` it will work.\n. @AnBauer as to why keep them: \n- adding new element to a list only changes one line. This makes merge conflicts less likely/problematic.\n- it's slightly easier to write and reorder list items,\n- consistency in comma placement reduces chance of forgetting them.\n\nI think it'd be better if CC updated their defaults to make it a non-issue. I've filed a bug: https://code.google.com/p/closure-compiler/issues/detail?id=1318\n. Sorry, I have no plans to support ie8. ie9 should support addEventListener, so the problem is probably elsewhere.\n\nslip is mainly for mobile, where these are irrelevant, and workarounds for crappy browsers may unnecessarily complicate the codebase, so I'd rather avoid that.\n\nIf you're targeting legacy desktop browsers, you'll need to use a different library.\n. Maybe a polyfill would help (try FT's https://cdn.polyfill.io/v1/). I don't have IE VMs installed currently, so I can't test.\n. Added info here https://github.com/pornel/slip/blob/master/README.md#old-browsers\n. Sorry, I think it's a bad style for libraries to polyfill random parts of the platform - you could get bind behaving slightly differently depending on order you include your libraries!\n\nI recommend to just include polyfills before including libraries. As a bonus you'll be including polyfills once and only when necessary.\n\nAlso have a look at http://labs.ft.com/2014/09/polyfills-as-a-service/\n. It's not possible out of the box. You would have to rewrite how slip.js finds elements before/after the current one.\n\nhttps://github.com/pornel/slip/blob/a4145da90803538c546136470140f9c280864c54/slip.js#L374 etc\n. Thanks. That's useful addition, but the code that finds the index looks like a duplicate from another function. Could you refactor both copies into a single function?\n. Great :)\n. Thanks\n. Thanks\n. Thanks for checking it. Could you investigate what is failing? Does it fire mouse events?\n. Thanks, I've added a note in the readme 49ea2fd1a40cd5b3963a7fc7a4d34640fe987846\n. It does seem hide the error rather than fix the root cause. If there's no target, then the library shouldn't be in state of dragging a target.\n. Sorry for late response.\n- Instead of detecting prefix by checking for ActiveXObject you can detect it by checking for the prefix, like it's done for WebKit.\n- I'm not sure if it's worth supporting IE, given that the library is meant for mobile, and doesn't support IE's PointerEvents.\n. There's no option for it out of the box. If you swap x/y width/height in the source it might work.\n. Try `user-select:none`. Thanks for sharing your solutions.\n. Yeah, sorry. It's likely an iOS issue.\n. This is a very bad idea \u2014 it will disable hardware acceleration (when too many elements are layers browsers give up and fall back to CPU rendering).\n. Add event listener for `slip:beforeswipe` event and call `preventDefault()`\n. Done 94f48f954ed9c5a29b41e5f882e63a9cbc7e1f6a\n. This was implemented in #12. If it's not complete, then it'd be great if you could fix it :)\n. This line is supposed to animate move of the element back to its original position.\n. when you reorder, call `preventDefault` to prevent that animation.\n. Cool! Thanks.\n. No. I hope it's simple enough that somebody else can wrap/adapt it if necessary.\n. Sorry, I don't have Windows, so I won't do it. See #2 \n. OK, I've created a tag\n. That's because IE9 and IE10 are not supported at all. IE11 only on mobile, but I haven't tested it. Please don't use this library if you need IE support.\n. Is there a solution that does not involve detecting a particular browser? Is that a timing issue? Can it be solved by setting a flag or deferring actions with setTimeout? \n. Listening for selection change event (and preventDefault on it) is to prevent mouse movement during reordering from being interpreted as text selection gesture. Without it drag may still work, but browsers will be selecting all text along the way, which is ugly and confusing.\n\nThe second problem is that on iOS you can't prevent selection this way (you can with CSS only), but you can at least react to it happening, so Slip tries to cooperate with iOS in that case, and aborts the drag.\n\nDoes this line run in your case? (i.e. if you delete that line, does it work for you?) https://github.com/pornel/slip/blob/4fa9d23063e5b88e31850ae57dc5303daa48ba65/slip.js#L583\n\nif so, it'd be better to add browser sniffing to this condition https://github.com/pornel/slip/blob/master/slip.js#L577\n. >  Do you have a reliable way to detect iOS?\n\nNo, unfortunately. Test for `iPhone|iPad|iPod` and not `Android|Windows` (to eliminate some everything-goes user-agents).\n. Thanks\n. Setting willChange informs the browser that the element will animate soon, so it should be using an accelerated layer. Without it you would have a delay/jerky animation when it starts moving.\n\nSetting transformProperty to an empty string like that would completely break all animations in all browsers that don't emulate WebKit.\n. the names of variables are not clear though, `transformPrefix` should be `JSTransformPropertyName` and `transformProperty` should be `CSSTransformPropertyName`.\n. Firefox has unprefixed `transform` in 2012 in v16. I don't think there's a need to support versions _that_ old.\n. That's weird. I've checked, and FF (v47) emulates webkit properties, so the unprefixed empty-string `transformProperty` _is not even used_. \n\nI've switched the logic around to prefer unprefixed now. \n\nPerhaps `willChange` exposes a browser bug. Promoting element to a layer could mess with z-index. However, checkboxes and select elements work on my demo page, so I can't reproduce the problem you're reporting. \n. Sorry, I don't understand. Are you saying you're using something like `<span onclick>` instead of `<input type=checkbox>`?\n. In that case, try disabling swipe-drag on the span:\n\n```\nol.addEventListener('slip:beforeswipe', function(e){\n// change that to detect your <span>\n        if (e.target.nodeName == 'INPUT' || /demo-no-swipe/.test(e.target.className)) {\n            e.preventDefault();\n        }\n    }, false);\n```\n. preventDefault is for the custom event, not the click.\n\nYou may also want to prevent `slip:beforereorder` to stop span from being used for dragging up/down.\n. If I remember correctly I was assuming that `insertBefore(\u2026, null)` is the same as `appendChild(\u2026)`\n. That's great. Thank you.\n. Makes sense. Thanks.\n. OK, let's try that.\n\nWhat do other libraries, like jQuery, do in such case?\n. Thank you very much. This is quite solid work!\n. Thank you. That's very useful indeed.\n. You're taking better care of this library than I do, so I've added you to project collaborators :)\n. OK\n. There's a [detach](https://github.com/pornel/slip/blob/f0c21539ef1ee63f7fcc2734e391e6ff021ddb61/slip.js#L533) method. Alternatively, you could use `preventDefault()` on slip's events to prevent it from taking actions.\n. LGTM\n. I agree, it is problematic. It probably should keep updating continuously. Updating on mousemove makes scrolling dependent also on the rate browser sends updates, so it can't be relied upon.\n\nCurrently there's no solution for this proposed.\n. I don't understand what do you mean.. I'm assuming your items are originally stored in some array.\r\n\r\n```js\r\nvar originalIndex = event.detail.originalIndex;\r\nvar spliceIndex = event.detail.spliceIndex\r\nvar movedItem = yourArray[originalIndex];\r\nyourArray.splice(originalIndex, 1); // Remove item from the previous position\r\nyourArray.splice(spliceIndex, 0, movedItem); // Insert item in the new position\r\n```. substitute it for the array you use to store the items you're reordering.. This library doesn't work the way you think. It doesn't manage any data at all. You use it to display your data. You're supposed to have the data in the first place.. The library does not hold the data. There is no data in slip. The example I've shown you was for your array of your data, that is never given to or taken from the library.. Yes, a fix is welcome.. contains doesn't return -1, so the >= 0 check is inappropriate. Thank you. I've used array notation deliberately as it's a hint for the Closure Compiler to preserve the global name.. There's no function for this. You could try to copy code of `reorder` state's `onEnd()`.. I can't reproduce it.\r\n\r\nWhich version of Firefox? Do you get a JS error in the console?. This is because you have `<a href=\"javascript:void(0)\"`. You should never use this for anything, ever.. `will-change` is needed, and it doesn't throw JS errors, so I don't want to remove it.\r\n\r\nThat might be a Firefox CSS bug. Removing `position: absolute;` from `.fli .btn-icon .pri` fixes the issue for me. Try using flexbox instead maybe?\r\n\r\n. You need to figure out CSS layout for this on your own. This library doesn't have any support for columns or anything like that.. You can prevent some elements from being moved by calling `preventDefault()` on all operations (see how the example page does it).\r\n\r\nThe library doesn't have a concept of empty space between elements, so if an element is removed, it has no choice but move other elements to fill the gap.. Ah, I see. That makes sense.\r\n\r\nThere's reordering state:\r\n\r\nhttps://github.com/pornel/slip/blob/master/slip.js#L371\r\n\r\nand other elements are visually moved here:\r\n\r\nhttps://github.com/pornel/slip/blob/master/slip.js#L416\r\n\r\nand final order is decided here:\r\n\r\nhttps://github.com/pornel/slip/blob/master/slip.js#L468\r\n\r\nSo in these places you'd have to figure out how to skip fixed-position elements.. The change seems simple enough. I'd recommend keeping elements movable by default (with no class) and using class only to make them unmovable.\r\n\r\nPerhaps the class could be `slip-fixed-header` or `slip-fixed-edge`, so that it's clear it won't work in the middle.. ",
    "stowball": "Yes and no \u2639\n\nFrom: porneL\nSent: \u200eThursday\u200e, \u200e9\u200e \u200eJanuary\u200e \u200e2014 \u200e11\u200e:\u200e03\u200e \u200ePM\nTo: pornel/slip\nCc: Matt Stow\n\nHave you got a WP8 device? Does the mouse event fallback work?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes and no \u2639\n\nFrom: porneL\nSent: \u200eThursday\u200e, \u200e9\u200e \u200eJanuary\u200e \u200e2014 \u200e11\u200e:\u200e03\u200e \u200ePM\nTo: pornel/slip\nCc: Matt Stow\n\nHave you got a WP8 device? Does the mouse event fallback work?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "MikaelSoderstrom": "I have a Lumia 920 with IE 10 and can add support for Pointer Events as soon as I'm back at my laptop. \n\nPointer Events support both moyse and touch (as well as other kinds of input), so I will probably just use Pointer Events if supported, and Mouse/Touch events otherwise.\n. Sorry, totally forgot about this. :( On the other hand, Microsoft have added Touch Events support to the latest update of IE.\n. I have a Lumia 920 with IE 10 and can add support for Pointer Events as soon as I'm back at my laptop. \n\nPointer Events support both moyse and touch (as well as other kinds of input), so I will probably just use Pointer Events if supported, and Mouse/Touch events otherwise.\n. Sorry, totally forgot about this. :( On the other hand, Microsoft have added Touch Events support to the latest update of IE.\n. ",
    "plumpNation": "+1\n. +1\n. ",
    "henrikhermansen": "Works fine for my needs in IE Mobile 10 on WP 8.0.\n. I had issues with scrolling on mobile, the page kept skipping up and down. Substituting this line seems to have fixed it. Thanks!\n. @guillerodriguez this disables scrolling while holding an item, if your list is higher than the screen size. Thus this is rather undesirable for mobile.\n. Experiencing the same issue in the web view of a PhoneGap application on iOS. I tried to listen for 'slip:reorder', 'slip:tap' and 'click' on a list of links, each in their own li in a ul. When tapping an item I get slip:tap, then it redirects to the link, and then I get slip:tap, click. When I rearrange the list I get slip:reorder, slip:tap, click. Btw. this all works fine on Android: when tapping I get slip:tap and click, when rearranging I only get slip:reorder.\n. \"Most events, including mouse events, bubble up. That is, if the user triggers a mouseover on an element, the browser sees if that element has an onmouseover event handler, and if so executes it. Then it does the same with all the element\u2019s ancestors up to and including the document. This is standard behaviour that works everywhere \u2014 except in Safari iOS.\n\nWhen the user touches a touchscreen, the browser reacts by firing a cascade of events that includes the touchstart and touchend events, all mouse events, and click.\"\nhttp://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\nIt seems that slip is behaving like it should actually. But it would be really nice if @pornel or someone else managed to handle these crazy iOS events in a sensible way.\n. You're absolutely right, and I agree. As I just ~~mentioned in 32 and~~ explained slightly more in #33 this might be caused by some irrational iOS event firing. This certainly goes beyond my skills to mend properly.\n. On second thought, I saw this issue first on Android actually. And I know events are fired as they should there.\n. Works fine for my needs in IE Mobile 10 on WP 8.0.\n. I had issues with scrolling on mobile, the page kept skipping up and down. Substituting this line seems to have fixed it. Thanks!\n. @guillerodriguez this disables scrolling while holding an item, if your list is higher than the screen size. Thus this is rather undesirable for mobile.\n. Experiencing the same issue in the web view of a PhoneGap application on iOS. I tried to listen for 'slip:reorder', 'slip:tap' and 'click' on a list of links, each in their own li in a ul. When tapping an item I get slip:tap, then it redirects to the link, and then I get slip:tap, click. When I rearrange the list I get slip:reorder, slip:tap, click. Btw. this all works fine on Android: when tapping I get slip:tap and click, when rearranging I only get slip:reorder.\n. \"Most events, including mouse events, bubble up. That is, if the user triggers a mouseover on an element, the browser sees if that element has an onmouseover event handler, and if so executes it. Then it does the same with all the element\u2019s ancestors up to and including the document. This is standard behaviour that works everywhere \u2014 except in Safari iOS.\n\nWhen the user touches a touchscreen, the browser reacts by firing a cascade of events that includes the touchstart and touchend events, all mouse events, and click.\"\nhttp://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\nIt seems that slip is behaving like it should actually. But it would be really nice if @pornel or someone else managed to handle these crazy iOS events in a sensible way.\n. You're absolutely right, and I agree. As I just ~~mentioned in 32 and~~ explained slightly more in #33 this might be caused by some irrational iOS event firing. This certainly goes beyond my skills to mend properly.\n. On second thought, I saw this issue first on Android actually. And I know events are fired as they should there.\n. ",
    "ErikPettersson": "+1\n. +1\n. ",
    "jonkessler": "@pornel We're experiencing this same issue. Any chance you could look into it?\n. @pornel We're experiencing this same issue. Any chance you could look into it?\n. ",
    "Ahrengot": "Alright sounds good. I will take a stab at this later this week :+1: \n. Alright sounds good. I will take a stab at this later this week :+1: \n. ",
    "TNT-RoX": "workaround here https://github.com/TNT-RoX/android-swipe-shim\n. @pornel Not sure how useful this will be to you, but another method to try is to toggle pointer-events on your scrolling element instead of preventdefault which will stop sending touch events to webview. I think I should write a shim for this too :)  \"hacky\" code is more stable now.\n. workaround here https://github.com/TNT-RoX/android-swipe-shim\n. @pornel Not sure how useful this will be to you, but another method to try is to toggle pointer-events on your scrolling element instead of preventdefault which will stop sending touch events to webview. I think I should write a shim for this too :)  \"hacky\" code is more stable now.\n. ",
    "kylekellogg": "Fair point.\nClosing issue.\n. I was going to suggest classList earlier, but I know I saw it would have issues on IE <10 and opera mini. Perhaps a data-\\* attribute, since this is, essentially, just a bool flag?\n\nThe regex works, so no change is necessary really.\n. Fair point.\nClosing issue.\n. I was going to suggest classList earlier, but I know I saw it would have issues on IE <10 and opera mini. Perhaps a data-\\* attribute, since this is, essentially, just a bool flag?\n\nThe regex works, so no change is necessary really.\n. ",
    "zeroxme": "please read the versioning of bower http://bower.io/\n. please read the versioning of bower http://bower.io/\n. ",
    "Azd325": "Hey @lievenjanssen & @pornel ,\nhow I can access the swipe event details? Is there somewhere a documentation?\n. Thanks a lot. I found it.\n. Hey @lievenjanssen & @pornel ,\nhow I can access the swipe event details? Is there somewhere a documentation?\n. Thanks a lot. I found it.\n. ",
    "y-lohse": "Hi, I implemented cross list reordering on a local version of slip, not sure if this is something @pornel would like contributed to this repo. It would need some refinement anyway.\n\nI don't think it's possible without altering the core. I did it roughly in the following way:\n- inside the reordering part of slip, the position of the node that is being reordered is compared to a list of other nodes\n- normaly these other nodes are the siblings of the one that is being reordered \u2014 in case of a cross reorder however, you'll want to compare it against the child nodes of some other list\n- to detect a cross transfer, I enabled moving nodes on both x and y axis and the used `getBoundingClientRect()` to find which target I'm hovering\n- you need some sort of list of valid targets. FWIW, jQuery UI implements this via a css selector that you pass as an option to the constructor.\n\nOne of the trickiest part is that slip takes the position and size of the moving node into consideration to position sibling nodes while reordering\u2026 but in a cross list reorder, the target list doesn't have that original node space, so it has to be created in some other way.\n. > (for example reordering within a single list should keep behavior of \"locking\" element horizontally and only moving vertically).\n\nI used a treshold of 20 (I think) pixels before unlocking the horizontal movement, so the behavior is still the same with a single list.\n\n> Can you describe your use-cases in more detail?\n\nIn my case it was clearly connecting 2 `Slip` instances together \u2014 the moved node is dropped into another list at a certain position, not into a generic dropping area.\n. [There you go](https://gist.github.com/y-lohse/a195c9caa43c395faa01). I did this a while ago, so:\n- there might be some other difs from the original slip in there\n- I remember that I found my implementation too ugly to contribute upstream, but it works and I don't have time to rewrite it properly. At least it gives some sense of what has to be done :-)\n. No, but basically, each instance of slip has a `crossLists` property which is an array. You have to push any communicating instances into that list.\n\n``` js\nvar slipInstance1 = new Slip(myFirstList);\nvar slipInstance2 = new Slip(mySecondList);\n\nslipInstance1.crossLists.push(slipInstance2);\nslipInstance2.crossLists.push(slipInstance1);\n```\n\nLike I said, not very elegant. FWIW, jQueryUI uses [a css selector](http://api.jqueryui.com/sortable/#option-connectWith) to determine the lists that are connected.\n\nI _might_ have time in a couple of weeks to work on a cleaner implementation but it involves some serious API design decisions that I'd rather have @pornel approve beforehand :grinning: \n. Nope, sorry! I don't have the code anymore either.. Hi, I implemented cross list reordering on a local version of slip, not sure if this is something @pornel would like contributed to this repo. It would need some refinement anyway.\n\nI don't think it's possible without altering the core. I did it roughly in the following way:\n- inside the reordering part of slip, the position of the node that is being reordered is compared to a list of other nodes\n- normaly these other nodes are the siblings of the one that is being reordered \u2014 in case of a cross reorder however, you'll want to compare it against the child nodes of some other list\n- to detect a cross transfer, I enabled moving nodes on both x and y axis and the used `getBoundingClientRect()` to find which target I'm hovering\n- you need some sort of list of valid targets. FWIW, jQuery UI implements this via a css selector that you pass as an option to the constructor.\n\nOne of the trickiest part is that slip takes the position and size of the moving node into consideration to position sibling nodes while reordering\u2026 but in a cross list reorder, the target list doesn't have that original node space, so it has to be created in some other way.\n. > (for example reordering within a single list should keep behavior of \"locking\" element horizontally and only moving vertically).\n\nI used a treshold of 20 (I think) pixels before unlocking the horizontal movement, so the behavior is still the same with a single list.\n\n> Can you describe your use-cases in more detail?\n\nIn my case it was clearly connecting 2 `Slip` instances together \u2014 the moved node is dropped into another list at a certain position, not into a generic dropping area.\n. [There you go](https://gist.github.com/y-lohse/a195c9caa43c395faa01). I did this a while ago, so:\n- there might be some other difs from the original slip in there\n- I remember that I found my implementation too ugly to contribute upstream, but it works and I don't have time to rewrite it properly. At least it gives some sense of what has to be done :-)\n. No, but basically, each instance of slip has a `crossLists` property which is an array. You have to push any communicating instances into that list.\n\n``` js\nvar slipInstance1 = new Slip(myFirstList);\nvar slipInstance2 = new Slip(mySecondList);\n\nslipInstance1.crossLists.push(slipInstance2);\nslipInstance2.crossLists.push(slipInstance1);\n```\n\nLike I said, not very elegant. FWIW, jQueryUI uses [a css selector](http://api.jqueryui.com/sortable/#option-connectWith) to determine the lists that are connected.\n\nI _might_ have time in a couple of weeks to work on a cleaner implementation but it involves some serious API design decisions that I'd rather have @pornel approve beforehand :grinning: \n. Nope, sorry! I don't have the code anymore either.. ",
    "innersky1": "I think connected lists and custom drop targets would be very nice features for this library.\nI'd use drage and drop between multiplbe vertically stacked lists on the phone. Another case would be using tabs, and dropping items on them (as a generic dropping area, but it could be on any drop target?) like the example of jQuery UI: http://jqueryui.com/sortable/#connect-lists-through-tabs\n\nAbout using HTML5 drag'n'drop APIs: Does ios7 Safari already supports this?\n\nI do like the idea of the treshold for unlocking the horizontal movement.\n. I think connected lists and custom drop targets would be very nice features for this library.\nI'd use drage and drop between multiplbe vertically stacked lists on the phone. Another case would be using tabs, and dropping items on them (as a generic dropping area, but it could be on any drop target?) like the example of jQuery UI: http://jqueryui.com/sortable/#connect-lists-through-tabs\n\nAbout using HTML5 drag'n'drop APIs: Does ios7 Safari already supports this?\n\nI do like the idea of the treshold for unlocking the horizontal movement.\n. ",
    "aronduby": "My use case would definitely be connected lists. I have a list of just over 40 items which I need to do some slight reordering. The caveat in my case is everything needs to be in groups of 4. Swiping left/right would replace the item with a holder element, and when an item is moved into a group with a holder it would replace the holder element. \n. My use case would definitely be connected lists. I have a list of just over 40 items which I need to do some slight reordering. The caveat in my case is everything needs to be in groups of 4. Swiping left/right would replace the item with a holder element, and when an item is moved into a group with a holder it would replace the holder element. \n. ",
    "jenseralmeida": "@y-lohse,\n\nCan you share your changes? There is any fork or plan to apply it as official?\n. @y-lohse,\n\nCan you share your changes? There is any fork or plan to apply it as official?\n. ",
    "humphreybc": "@y-lohse This would be an awesome addition to Slip.js. Hopefully you get around to tidying it up and contributing it upstream. Do you have any further documentation on how to implement multiple lists with your forked implementation?\n. This might be relevant: http://stackoverflow.com/questions/29611680/chrome-incorrect-z-axis-order-with-translate3d\n. Not 100% sure, but it looks like it could be this bug in Chrome:\nhttps://code.google.com/p/chromium/issues/detail?id=565089\n. @y-lohse This would be an awesome addition to Slip.js. Hopefully you get around to tidying it up and contributing it upstream. Do you have any further documentation on how to implement multiple lists with your forked implementation?\n. This might be relevant: http://stackoverflow.com/questions/29611680/chrome-incorrect-z-axis-order-with-translate3d\n. Not 100% sure, but it looks like it could be this bug in Chrome:\nhttps://code.google.com/p/chromium/issues/detail?id=565089\n. ",
    "buggedcom": "@y-lohse Did you ever get round to porting your code over to the latest release?. @y-lohse Did you ever get round to porting your code over to the latest release?. ",
    "Pasvaz": "I'm using Chrome 35 and it works as expected, while when damnYouChrome is set to true it flickers a lot.\n\nBy the way, slip is great! thank you for sharing it.\n. Did you test it with the last non-dev version as well?\nAlso, do you have any fiddle, plunk or online website where I can test this behavior? I'd like to help to fix it.\n. gotcha! I'll play a bit with it, let's see if something useful come up.\n. I'm using Chrome 35 and it works as expected, while when damnYouChrome is set to true it flickers a lot.\n\nBy the way, slip is great! thank you for sharing it.\n. Did you test it with the last non-dev version as well?\nAlso, do you have any fiddle, plunk or online website where I can test this behavior? I'd like to help to fix it.\n. gotcha! I'll play a bit with it, let's see if something useful come up.\n. ",
    "howderek": "Could you create a [JSFiddle](http://jsfiddle.net/) that reproudces the problem?\n. I was able to reproduce the behavior. I believe it has to do with touch events being handled differently than mouseup/mousedown. I am not sure if this is a chrome issue or a slip issue.\n\nI won't be able to take a look at it in detail until I get back home in a few days.\n. Could you create a [JSFiddle](http://jsfiddle.net/) that reproudces the problem?\n. I was able to reproduce the behavior. I believe it has to do with touch events being handled differently than mouseup/mousedown. I am not sure if this is a chrome issue or a slip issue.\n\nI won't be able to take a look at it in detail until I get back home in a few days.\n. ",
    "hitesh-iksula": "Try this out: http://jsfiddle.net/k7jVv/\nIt will work on desktop but it is not working on my Android Chrome.\nLet me know if there's anything more I can help you out with.\n. Alright! Let me know if you get a solution for this.\nSlip is an awesome library btw. Cheers!\n. Awesome! Looks like it did the trick! I will play around with this a little more.\nI hope this change in code doesn't impact anything though?\nThanks for a quick resolution!\n. Oh. I'm not sure I understand correctly. Was the slip:tap event buggy as it was or it became buggy because of the change you just made?\n. Well, in that case I can use this without guilt!\nThanks a ton!\n. Try this out: http://jsfiddle.net/k7jVv/\nIt will work on desktop but it is not working on my Android Chrome.\nLet me know if there's anything more I can help you out with.\n. Alright! Let me know if you get a solution for this.\nSlip is an awesome library btw. Cheers!\n. Awesome! Looks like it did the trick! I will play around with this a little more.\nI hope this change in code doesn't impact anything though?\nThanks for a quick resolution!\n. Oh. I'm not sure I understand correctly. Was the slip:tap event buggy as it was or it became buggy because of the change you just made?\n. Well, in that case I can use this without guilt!\nThanks a ton!\n. ",
    "fonini": "My solution was adding the following line above this.animateToZero:\n\n```\nthis.animateToZero(removeClass);\nthis.dispatch(this.target.node, 'cancelswipe');\n```\n\nIf you want, I can submit a PR. You may change the event name.\n. My solution was adding the following line above this.animateToZero:\n\n```\nthis.animateToZero(removeClass);\nthis.dispatch(this.target.node, 'cancelswipe');\n```\n\nIf you want, I can submit a PR. You may change the event name.\n. ",
    "swalke16": "You\u2019re welcome! \u00a0I\u2019m happy it was a quick fix. :)\n\nOn September 5, 2014 at 10:26:43 AM, Kornel (notifications@github.com) wrote:\n\nGood catch, thanks!\n\n\u2014\nReply to this email directly or view it on GitHub.\n. You\u2019re welcome! \u00a0I\u2019m happy it was a quick fix. :)\n\nOn September 5, 2014 at 10:26:43 AM, Kornel (notifications@github.com) wrote:\n\nGood catch, thanks!\n\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "carter-thaxton": "Confirmed that attaching to `tbody` works.\n. I believe these issues were fixed in #72.  Please feel free to reopen if you discover otherwise.\n. I believe these issues were fixed in #71 and #72.  Please feel free to reopen if you find additional issues.\n. We love pull requests!\n. Can you be more specific where you've added this code?  Or just send a pull request?\n. I'm not seeing this issue anymore.  It may have been fixed in the last year.  Please feel free to reopen if you still see it occur.\n. Confirmed that this occurs in Chrome 43.  I've added `position: relative` to the list items in the example, and some documentation to recommend adding something similar for projects that use Slip.\n. I believe this was fixed by #71 and #72.  Feel free to reopen if you find more issues.\n. You're right.  I'll look into it.\n. @mahemoff Check out the latest commit.  Should fix your issue.  Note that the source now also contains the example code.\n\n@pornel I think you'll still need to update your [live demo](https://kornel.ski/slip/) with the latest `slip.js` as well as some changes I've made to `example.html`.  Just nice for those who find this library online.\n. I believe this was fixed by #72.\n. Looks like this is still an issue\n. I believe these issues were fixed by #72.  Please feel free to reopen if you find more issues.\n. I believe this was fixed by #72.  Please feel free to reopen if that's not the case.\n. I believe this was fixed by #69 and #72.\n. Just closing this so I can create a new pull request using a branch, rather than using master.\n. Hey thanks, @pornel.  I've already started closing and taking care of some old issues.\nWhen the time is right, I think you'll still need to update the repository on bower.\n\nAlso, you'll need to update your website at https://kornel.ski/slip/\nYou'll notice I went ahead and added the source of your online demo to the project as `example.html`.  Ideally, we can keep the demo in sync with the source.\n. It's probably a bug.  Want to fix it, and send a pull request?\n\nThough I love this library, it has needed quite a few fixes to be really ready to use.  Pull requests are the way to improve it...  Thanks.\n. Agreed.  Looks like we simply didn't close the issue.. Excellent.  Thanks!\n. According to [caniuse](http://caniuse.com/#feat=classlist), `classList` isn't supported by Opera Mini or IE9 and lower.  I don't think we care about either here, so I'm inclined to accept this patch.\n\nAny objections?\n. Also, seems like we should also use `classList.contains` instead of `regex.text` or `indexOf` on `className` for consistency, and also to avoid exact matching issues on classes, such as `matchThis` vs `matchThis-123`.  Appears we only do this in the example code, but still.\n. Is it even necessary to check for Firefox, or can we just always use documentElement?\r\n. @mstobin This seems like a great first pull request, if you're interested in getting involved.\r\n\r\nCheck out https://yangsu.github.io/pull-request-tutorial/ or https://help.github.com/articles/creating-a-pull-request/. Confirmed that attaching to `tbody` works.\n. I believe these issues were fixed in #72.  Please feel free to reopen if you discover otherwise.\n. I believe these issues were fixed in #71 and #72.  Please feel free to reopen if you find additional issues.\n. We love pull requests!\n. Can you be more specific where you've added this code?  Or just send a pull request?\n. I'm not seeing this issue anymore.  It may have been fixed in the last year.  Please feel free to reopen if you still see it occur.\n. Confirmed that this occurs in Chrome 43.  I've added `position: relative` to the list items in the example, and some documentation to recommend adding something similar for projects that use Slip.\n. I believe this was fixed by #71 and #72.  Feel free to reopen if you find more issues.\n. You're right.  I'll look into it.\n. @mahemoff Check out the latest commit.  Should fix your issue.  Note that the source now also contains the example code.\n\n@pornel I think you'll still need to update your [live demo](https://kornel.ski/slip/) with the latest `slip.js` as well as some changes I've made to `example.html`.  Just nice for those who find this library online.\n. I believe this was fixed by #72.\n. Looks like this is still an issue\n. I believe these issues were fixed by #72.  Please feel free to reopen if you find more issues.\n. I believe this was fixed by #72.  Please feel free to reopen if that's not the case.\n. I believe this was fixed by #69 and #72.\n. Just closing this so I can create a new pull request using a branch, rather than using master.\n. Hey thanks, @pornel.  I've already started closing and taking care of some old issues.\nWhen the time is right, I think you'll still need to update the repository on bower.\n\nAlso, you'll need to update your website at https://kornel.ski/slip/\nYou'll notice I went ahead and added the source of your online demo to the project as `example.html`.  Ideally, we can keep the demo in sync with the source.\n. It's probably a bug.  Want to fix it, and send a pull request?\n\nThough I love this library, it has needed quite a few fixes to be really ready to use.  Pull requests are the way to improve it...  Thanks.\n. Agreed.  Looks like we simply didn't close the issue.. Excellent.  Thanks!\n. According to [caniuse](http://caniuse.com/#feat=classlist), `classList` isn't supported by Opera Mini or IE9 and lower.  I don't think we care about either here, so I'm inclined to accept this patch.\n\nAny objections?\n. Also, seems like we should also use `classList.contains` instead of `regex.text` or `indexOf` on `className` for consistency, and also to avoid exact matching issues on classes, such as `matchThis` vs `matchThis-123`.  Appears we only do this in the example code, but still.\n. Is it even necessary to check for Firefox, or can we just always use documentElement?\r\n. @mstobin This seems like a great first pull request, if you're interested in getting involved.\r\n\r\nCheck out https://yangsu.github.io/pull-request-tutorial/ or https://help.github.com/articles/creating-a-pull-request/. ",
    "lluchs": "See #21. A minifier will remove these commas anyways and even without them the script won't work in a ES3 browser due to `[].forEach`.\n. See #21. A minifier will remove these commas anyways and even without them the script won't work in a ES3 browser due to `[].forEach`.\n. ",
    "AnBauer": "But if those minor changes make it possible to use the Google Closure Compiler (as the one from #21 pointed out), why keep them? \n. But if those minor changes make it possible to use the Google Closure Compiler (as the one from #21 pointed out), why keep them? \n. ",
    "jcdsr": "I totally agree with you, however the client request this support. You know clients.\n\nI wondering if a ie8 and ie9 shim could work with your code? \n. I totally agree with you, however the client request this support. You know clients.\n\nI wondering if a ie8 and ie9 shim could work with your code? \n. ",
    "guillerodriguez": "Males sense, think you!\n. @henrikhermansen -- thank you for letting me know. I am also using this myself with good results.\n. Males sense, think you!\n. @henrikhermansen -- thank you for letting me know. I am also using this myself with good results.\n. ",
    "oacnqqcom": "thanks!\n. thanks!\n. ",
    "Andrinoid": "Nice library!\n\nThis might be similar question but is it possible to change the axis to x?\nSimilar to jquery.ui where you can set axis: 'x'\n. Nice library!\n\nThis might be similar question but is it possible to change the axis to x?\nSimilar to jquery.ui where you can set axis: 'x'\n. ",
    "pandeiro": "Cheers!\n\nOn Fri, Nov 21, 2014 at 7:09 PM, Kornel notifications@github.com wrote:\n\n> Great :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/pornel/slip/pull/31#issuecomment-64037999.\n. Cheers!\n\nOn Fri, Nov 21, 2014 at 7:09 PM, Kornel notifications@github.com wrote:\n\n> Great :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/pornel/slip/pull/31#issuecomment-64037999.\n. ",
    "mauron85": "I can confirm that bug in Chrome for Android and also in Chrome Desktop when emulating touch events.\n. I have same problem in Chrome for Android. What is the status of this?\n. Thank you. Looks I like a big improvement. Will try it out.\n. Hi, definitely is doable :-)\n\nYour markup should look like this:\n\n```\n    <ul class=\"slip-container\">\n        <li class=\"li-item\">\n            <div class=\"slide slide-1\"></div>\n            <div class=\"slide slide-2\"><button class=\"btn-red\">RED</button></div>\n        </li>\n    </ul>\n```\n\nAnd css\n\n```\n    .slip-container {\n        width: 400px;\n        margin: 0;\n        padding: 0;\n        overflow: hidden;\n        background: silver;\n        list-style-type: none;\n    }\n\n    .li-item {\n      position: relative;\n      height: 50px;\n      width: 200%; /* because we have actually two divs slide-1 and slide-2 */\n    }\n\n    .li-item-slide-2 {\n        transform: translate(-50%,0);\n    }\n\n    .li-item-slide-2 .slide-2 {\n        /*text-align: right;*/\n    }\n\n    .slide {\n      position: relative;\n      float: left;\n      width: 50%;\n      height: 100%;\n    }\n\n    .btn-red {\n        margin-top: 15px;\n        background: red;\n    }\n```\n\nThen initialise slip normally:\n\n```\n        var li = document.querySelector('.li-item');\n        var list = document.querySelector('.slip-container');\n        new Slip(list);\n        list.addEventListener('slip:swipe', function(e) {\n            li.classList.toggle('li-item-slide-2');\n        });\n```\n\nHowever to get right feeling you need to modify slip source code bit (basically remove velocity)\nGo to line: var swiped = velocity > 0.6 && move.time > 110 and replace it with:\n\n```\n                        // var swiped = velocity > 0.6 && move.time > 110;\n                        var swiped = move.x > 175;\n\n```\n\nI've wrotten this from head, but it should work, as Iam using it like this in my project.\n. Hi,\n\nI believe that tables should by ok too as long you're using overfow: hidden on li item. The width of table will be 200% and each column will be 50% same as with divs.\n\nBut answer to second question is bit tricky. To achieve that you will have to modify slip.js a lot. Maybe it will be better to implement it on your own (not using slip.js at all)\n. Checkout this http://component.kitchen/components/tejitak/left-swipe-action\n. Looking great. +1\n. I can confirm that bug in Chrome for Android and also in Chrome Desktop when emulating touch events.\n. I have same problem in Chrome for Android. What is the status of this?\n. Thank you. Looks I like a big improvement. Will try it out.\n. Hi, definitely is doable :-)\n\nYour markup should look like this:\n\n```\n    <ul class=\"slip-container\">\n        <li class=\"li-item\">\n            <div class=\"slide slide-1\"></div>\n            <div class=\"slide slide-2\"><button class=\"btn-red\">RED</button></div>\n        </li>\n    </ul>\n```\n\nAnd css\n\n```\n    .slip-container {\n        width: 400px;\n        margin: 0;\n        padding: 0;\n        overflow: hidden;\n        background: silver;\n        list-style-type: none;\n    }\n\n    .li-item {\n      position: relative;\n      height: 50px;\n      width: 200%; /* because we have actually two divs slide-1 and slide-2 */\n    }\n\n    .li-item-slide-2 {\n        transform: translate(-50%,0);\n    }\n\n    .li-item-slide-2 .slide-2 {\n        /*text-align: right;*/\n    }\n\n    .slide {\n      position: relative;\n      float: left;\n      width: 50%;\n      height: 100%;\n    }\n\n    .btn-red {\n        margin-top: 15px;\n        background: red;\n    }\n```\n\nThen initialise slip normally:\n\n```\n        var li = document.querySelector('.li-item');\n        var list = document.querySelector('.slip-container');\n        new Slip(list);\n        list.addEventListener('slip:swipe', function(e) {\n            li.classList.toggle('li-item-slide-2');\n        });\n```\n\nHowever to get right feeling you need to modify slip source code bit (basically remove velocity)\nGo to line: var swiped = velocity > 0.6 && move.time > 110 and replace it with:\n\n```\n                        // var swiped = velocity > 0.6 && move.time > 110;\n                        var swiped = move.x > 175;\n\n```\n\nI've wrotten this from head, but it should work, as Iam using it like this in my project.\n. Hi,\n\nI believe that tables should by ok too as long you're using overfow: hidden on li item. The width of table will be 200% and each column will be 50% same as with divs.\n\nBut answer to second question is bit tricky. To achieve that you will have to modify slip.js a lot. Maybe it will be better to implement it on your own (not using slip.js at all)\n. Checkout this http://component.kitchen/components/tejitak/left-swipe-action\n. Looking great. +1\n. ",
    "lirbank": "Update: Tested with Slip.js 1.2.0 and Chrome on IOS.\n\nSlip.js 1.2.0:\nOS X Firefox - passed\nOS X Chrome - passed\nOS X Safari - passed\nIOS Chrome - passed\nIOS 8.1 Safari - FAILED\n\nI've only been able to reproduce the bug on Mobile Safari so far.\n. Here is a quick workaround I wrote back when I reported this issue. The example code is written in MeteorJS, but the same concept can be used for any framework. Would be great to implement the workaround in the slip.js lib at some point, but for now I hope this will help anyone who run into the same issue.\n\n``` javascript\n// TAP FIX: Var to know if Tap should fire or not.\nvar preventTap = false;\nTemplate.MyTemplate.events({\n\n  // The slip event:\n  'slip:reorder #slippylist': function (event, template) {\n\n    // TAP FIX: Detect if it's Safari on IOS\n    if(BrowserDetect.OS !== 'Mac' && BrowserDetect.browser === 'Safari') {\n      preventTap = true;\n    }\n\n    // Handle the Reorder event as usual\n  },\n\n  // Tap/click event\n  'click #slippylist': function (event, template) {\n\n    // FIX: Check if Tap should fire or not, and if so reset preventTap\n    if (preventTap) {\n      preventTap = false;\n      return;\n    }\n\n    // Handle Tap event as usual\n  }\n});\n```\n. Update: Tested with Slip.js 1.2.0 and Chrome on IOS.\n\nSlip.js 1.2.0:\nOS X Firefox - passed\nOS X Chrome - passed\nOS X Safari - passed\nIOS Chrome - passed\nIOS 8.1 Safari - FAILED\n\nI've only been able to reproduce the bug on Mobile Safari so far.\n. Here is a quick workaround I wrote back when I reported this issue. The example code is written in MeteorJS, but the same concept can be used for any framework. Would be great to implement the workaround in the slip.js lib at some point, but for now I hope this will help anyone who run into the same issue.\n\n``` javascript\n// TAP FIX: Var to know if Tap should fire or not.\nvar preventTap = false;\nTemplate.MyTemplate.events({\n\n  // The slip event:\n  'slip:reorder #slippylist': function (event, template) {\n\n    // TAP FIX: Detect if it's Safari on IOS\n    if(BrowserDetect.OS !== 'Mac' && BrowserDetect.browser === 'Safari') {\n      preventTap = true;\n    }\n\n    // Handle the Reorder event as usual\n  },\n\n  // Tap/click event\n  'click #slippylist': function (event, template) {\n\n    // FIX: Check if Tap should fire or not, and if so reset preventTap\n    if (preventTap) {\n      preventTap = false;\n      return;\n    }\n\n    // Handle Tap event as usual\n  }\n});\n```\n. ",
    "aarfing": "Ok, so I did some investigating and made it work. The problem is that while IE9 understands 'transform' as a CSS property, in JavaScript it needs the 'ms'-prefix like so: 'msTransform', so a simple test for that makes it work.\n. Actually IE9 needs a prefix on the CSS property as well, so a simple verbose proof of concept would be:\n\nvar transformPrefix = \"webkitTransform\" in testElement.style ? \"webkitTransform\" : \"transform\";\nif(transformPrefix === \"transform\"){\n    transformPrefix = \"msTransform\" in testElement.style ? \"msTransform\" : \"transform\";\n}\nvar transformProperty = transformPrefix === \"webkitTransform\" ? \"-webkit-transform\" : \"transform\";\nif(transformProperty === \"transform\"){\n    transformProperty = transformPrefix === \"msTransform\" ? \"-ms-transform\" : \"transform\";\n}\n. Ok, so I did some investigating and made it work. The problem is that while IE9 understands 'transform' as a CSS property, in JavaScript it needs the 'ms'-prefix like so: 'msTransform', so a simple test for that makes it work.\n. Actually IE9 needs a prefix on the CSS property as well, so a simple verbose proof of concept would be:\n\nvar transformPrefix = \"webkitTransform\" in testElement.style ? \"webkitTransform\" : \"transform\";\nif(transformPrefix === \"transform\"){\n    transformPrefix = \"msTransform\" in testElement.style ? \"msTransform\" : \"transform\";\n}\nvar transformProperty = transformPrefix === \"webkitTransform\" ? \"-webkit-transform\" : \"transform\";\nif(transformProperty === \"transform\"){\n    transformProperty = transformPrefix === \"msTransform\" ? \"-ms-transform\" : \"transform\";\n}\n. ",
    "sun449036002": "Hi,i get the same question now,\r\nare you fix it?. Hi,i get the same question now,\r\nare you fix it?. ",
    "slmjkdbtl": "+1 I'm also looking for this.\n. +1 I'm also looking for this.\n. ",
    "darrynten": "I've solved this issue in #56 (amongst other enhancements and features)\n\nYou'll get the direction in `e.details.directionX` and `e.details.directionY`\n. Resolves #42 \n. Happy to help. We may have some more improvements to submit in the future. Thanks for the great library.\n. I've solved this issue in #56 (amongst other enhancements and features)\n\nYou'll get the direction in `e.details.directionX` and `e.details.directionY`\n. Resolves #42 \n. Happy to help. We may have some more improvements to submit in the future. Thanks for the great library.\n. ",
    "srkleiman": "Thanks! Two questions:\n\nCan I do this with table rows? I prefer tables since they make vertical\nalignment easy.\n\nThe IOS delete buttons are a fixed size less than the column width. How can\nI limit the left slide to that?\n\nFrom:  Mari\u00e1n Hello notifications@github.com\nReply-To:  pornel/slip\n<reply+002cab2033526c426d96dd1220b72a87952cf1bc48415aa592cf000000011122936d9\n2a169ce03bf074b@reply.github.com>\nDate:  Thursday, March 19, 2015 at 6:38 AM\nTo:  pornel/slip slip@noreply.github.com\nCc:  Steven Kleiman steven.kleiman@ieee.org\nSubject:  Re: [slip] Simulating IOS swipe to delete (#44)\n\nHi, definitely is doable :-)\n\nYour markup should look like this:\n\n<ul class=\"slip-container\">\n<li class=\"li-item\">\n<div class=\"slide-wrapper\">\n<div class=\"slide slide-1\"></div>\n<div class=\"slide slide-2\"><!-- red button goes here --></div>\n</div>\n</li>\n</ul>\n\nAnd css\n.li-item {\n  position: relative;\n  width: 200%; /\\* because we have actually two divs slide-1 and slide-2 */\n  padding: 0;\n  border-top: none;\n  overflow: hidden;\n}\n\n.slide {\n  position: relative;\n  float: left;\n  width: 50%;\n}\nThen initialise slip normally:\nvar list = document.querySelector('slip-container');\nnew Slip(list);\nHowever to get right feeling you need to modify slip source code bit\n(basically remove velocity)\nGo to line: var swiped = velocity > 0.6 && move.time > 110 and replace it\nwith:\n                        // var swiped = velocity > 0.6 && move.time > 110;\n                        var swiped = move.x > 175;\n\nI've wrotten this from head, but it should work, as Iam using it like this\nin my project.\n\n\u2039\nReply to this email directly or view it on GitHub\nhttps://github.com/pornel/slip/issues/44#issuecomment-83581975 .\n. Thanks! Two questions:\n\nCan I do this with table rows? I prefer tables since they make vertical\nalignment easy.\n\nThe IOS delete buttons are a fixed size less than the column width. How can\nI limit the left slide to that?\n\nFrom:  Mari\u00e1n Hello notifications@github.com\nReply-To:  pornel/slip\n<reply+002cab2033526c426d96dd1220b72a87952cf1bc48415aa592cf000000011122936d9\n2a169ce03bf074b@reply.github.com>\nDate:  Thursday, March 19, 2015 at 6:38 AM\nTo:  pornel/slip slip@noreply.github.com\nCc:  Steven Kleiman steven.kleiman@ieee.org\nSubject:  Re: [slip] Simulating IOS swipe to delete (#44)\n\nHi, definitely is doable :-)\n\nYour markup should look like this:\n\n<ul class=\"slip-container\">\n<li class=\"li-item\">\n<div class=\"slide-wrapper\">\n<div class=\"slide slide-1\"></div>\n<div class=\"slide slide-2\"><!-- red button goes here --></div>\n</div>\n</li>\n</ul>\n\nAnd css\n.li-item {\n  position: relative;\n  width: 200%; /\\* because we have actually two divs slide-1 and slide-2 */\n  padding: 0;\n  border-top: none;\n  overflow: hidden;\n}\n\n.slide {\n  position: relative;\n  float: left;\n  width: 50%;\n}\nThen initialise slip normally:\nvar list = document.querySelector('slip-container');\nnew Slip(list);\nHowever to get right feeling you need to modify slip source code bit\n(basically remove velocity)\nGo to line: var swiped = velocity > 0.6 && move.time > 110 and replace it\nwith:\n                        // var swiped = velocity > 0.6 && move.time > 110;\n                        var swiped = move.x > 175;\n\nI've wrotten this from head, but it should work, as Iam using it like this\nin my project.\n\n\u2039\nReply to this email directly or view it on GitHub\nhttps://github.com/pornel/slip/issues/44#issuecomment-83581975 .\n. ",
    "senner007": "This solves it for my projects:\n\n*{\n -webkit-transform: translate3d(0, 0, 0);\n   -moz-transform: translate3d(0, 0, 0);\n   -ms-transform: translate3d(0, 0, 0);\n   transform: translate3d(0, 0, 0);  \n}\n\nAlthough, doing this might have an impact on load or memory. Don't know.\n. It works fine for me. It definately uses hardware acceleration and the animation smoothness is as good as it can ever get.\n. This solves it for my projects:\n\n*{\n -webkit-transform: translate3d(0, 0, 0);\n   -moz-transform: translate3d(0, 0, 0);\n   -ms-transform: translate3d(0, 0, 0);\n   transform: translate3d(0, 0, 0);  \n}\n\nAlthough, doing this might have an impact on load or memory. Don't know.\n. It works fine for me. It definately uses hardware acceleration and the animation smoothness is as good as it can ever get.\n. ",
    "ptbrowne": "+1\n. +1\n. ",
    "callum-spartan": "This problem seems to have been fixed in https://github.com/pornel/slip/commit/1524fdfd772c4ddbdb02c5b56b64a2188430ff35 but it wasn't in the slip.js file that I got when doing a bower install.\n. This problem seems to have been fixed in https://github.com/pornel/slip/commit/1524fdfd772c4ddbdb02c5b56b64a2188430ff35 but it wasn't in the slip.js file that I got when doing a bower install.\n. ",
    "salcott": "Having the same problem in cordova\n. Having the same problem in cordova\n. ",
    "mahemoff": "Strange, my integration's not working here on OSX Chrome. I'll check later what may be causing it.\n. Thanks, it's better now, but I'm still seeing an issue with scrolling to the bottom of the page, where the element can be dragged to the bottom, causing the whole page to stretch vertically.\n\nThis is visible in the [live demo](https://kornel.ski/slip/), which points to Slip 1.2, and I've also added it at https://github.com/mahemoff/slip pointing to the latest slip.js with same result.\n. Thanks @carter-thaxton, I'll need to re-integrate the library, will check it soon and let you know.\n. Strange, my integration's not working here on OSX Chrome. I'll check later what may be causing it.\n. Thanks, it's better now, but I'm still seeing an issue with scrolling to the bottom of the page, where the element can be dragged to the bottom, causing the whole page to stretch vertically.\n\nThis is visible in the [live demo](https://kornel.ski/slip/), which points to Slip 1.2, and I've also added it at https://github.com/mahemoff/slip pointing to the latest slip.js with same result.\n. Thanks @carter-thaxton, I'll need to re-integrate the library, will check it soon and let you know.\n. ",
    "chriscookz": "I'm also running into this on Firefox. It works great on Chrome.\n. I'm also running into this on Firefox. It works great on Chrome.\n. ",
    "jorjordandan": "Oddly enough, if I comment out [this line](https://github.com/pornel/slip/blob/master/slip.js#L744) of Slip.js there is no issue. What else does this line affect?\n. Oddly enough, if I comment out [this line](https://github.com/pornel/slip/blob/master/slip.js#L744) of Slip.js there is no issue. What else does this line affect?\n. ",
    "carlhu": "Understood. Thanks, @pornel. I'll update this ticket if I submit a PR.\n. Understood. Thanks, @pornel. I'll update this ticket if I submit a PR.\n. ",
    "rbiggs": "it also doesn't work on IE11 on Windows 10 nor on MS Edge on Windows 10. You need to look into using pointer events too.\n. it also doesn't work on IE11 on Windows 10 nor on MS Edge on Windows 10. You need to look into using pointer events too.\n. ",
    "JoeyAndres": "Pointer events? I'll try and look into this.\n. @mddenton Can you try reordering the list in http://slip-js-bug-1.meteor.com/lists/complex\n- Click the Reorder button on top-right first until the reorder handles shows up and start reordering.\n- There should be logging for (up, down, move) for either mouse/touch.\n\nBasically, my hunch is that this have something to do with touch/mouse events conflicting each other in some browsers.\n\nTell me what happens so I can make a PR.\n. @mddenton I installed windows 10 in vm, although (down, move, up) occurs in correct sequence, I don't see any movement. I'll fix this and make a PR request later (integrating PEP).\n. Pointer events? I'll try and look into this.\n. @mddenton Can you try reordering the list in http://slip-js-bug-1.meteor.com/lists/complex\n- Click the Reorder button on top-right first until the reorder handles shows up and start reordering.\n- There should be logging for (up, down, move) for either mouse/touch.\n\nBasically, my hunch is that this have something to do with touch/mouse events conflicting each other in some browsers.\n\nTell me what happens so I can make a PR.\n. @mddenton I installed windows 10 in vm, although (down, move, up) occurs in correct sequence, I don't see any movement. I'll fix this and make a PR request later (integrating PEP).\n. ",
    "swammeyjoe": "Any news on this?\n. Any news on this?\n. ",
    "Jenselme": "> Can it be solved by setting a flag or deferring actions with setTimeout? \n\nI think I could set a flag in `setTimeout` and use it not to execute the function associated with the `selectionchange` event. If I didn't use this solution, it was to interfere as little as possible with a function I don't fully understand the purpose. I tried to just remove the line, and everything looked fine (not tested on iOS though).\n\nDo you prefer the flag approach? I understand that checking the user agent is not really a reliable way to detect a browser.\n. > Listening for selection change event (and preventDefault on it) is to prevent mouse movement during reordering from being interpreted as text selection gesture. Without it drag may still work, but browsers will be selecting all text along the way, which is ugly and confusing.\n\nAgreed.\n\n> Does this line run in your case? (i.e. if you delete that line, does it work for you?) https://github.com/pornel/slip/blob/4fa9d23063e5b88e31850ae57dc5303daa48ba65/slip.js#L583\n\nIt does.\n\n> if so, it'd be better to add browser sniffing to this condition\n\nI'm fine with that since it will solve my problem. Do you have a reliable way to detect iOS?\n. Just updated the PR.\n. Maybe setting `transformProperty` to an empty string on non webkit browsers until the `transform` property is widely adopted could be a good compromise. This solves our bug on firefox:\n\n``` patch\ndiff --git i/src/lib/slip.js w/src/lib/slip.js\nindex 9c5e3aa..c3c5e67 100644\n--- i/slip.js\n+++ w/slip.js\n@@ -131,7 +131,7 @@ window['Slip'] = (function(){\n\n     var transitionPrefix = \"webkitTransition\" in testElement.style ? \"webkitTransition\" : \"transition\";\n     var transformPrefix = \"webkitTransform\" in testElement.style ? \"webkitTransform\" : \"transform\";\n-    var transformProperty = transformPrefix === \"webkitTransform\" ? \"-webkit-transform\" : \"transform\";\n+    var transformProperty = transformPrefix === \"webkitTransform\" ? \"-webkit-transform\" : \"\";\n     var userSelectPrefix = \"webkitUserSelect\" in testElement.style ? \"webkitUserSelect\" : \"userSelect\";\n\n     testElement.style[transformPrefix] = 'translateZ(0)';\n```\n\nWhat do you think?\n. > Setting willChange informs the browser that the element will animate soon, so it should be using an accelerated layer. Without it you would have a delay/jerky animation when it starts moving.\n\nOK. Maybe the detection of FF can be added then? With `'MozTransform' in testElement.style` we can detect if we are on FF and then we can set `transformProperty` to `\"-moz-transform\"` which solves our problem as well.\n\nDo you want me to work on a patch for that?\n. > Firefox has unprefixed transform in 2012 in v16.\n\nYet on FF 44, `transformProperty` must be either an empty string or `-moz-transform` for you bug to be fixed. Don't ask me why thought.\n. > However, checkboxes and select elements work on my demo page, so I can't reproduce the problem you're reporting. \n\nI think that part of the problem is that on non webkit browser, the `input` is actually a `span` so it can be styled correctly. However, it is a `span` on IE and everything works fine.\n. > Are you saying you're using something like <span onclick> instead of <input type=checkbox>?\n\nYes\n. Just tried that. But the `e.preventDefault()` seems to prevent the click to be taken into account. So the checkbox doesn't work.\n. We finally decided to remove `willChange` in SlipJS to solve our problem.\n\nAnyway, thanks for your help and you awesome lib!\n. > Can it be solved by setting a flag or deferring actions with setTimeout? \n\nI think I could set a flag in `setTimeout` and use it not to execute the function associated with the `selectionchange` event. If I didn't use this solution, it was to interfere as little as possible with a function I don't fully understand the purpose. I tried to just remove the line, and everything looked fine (not tested on iOS though).\n\nDo you prefer the flag approach? I understand that checking the user agent is not really a reliable way to detect a browser.\n. > Listening for selection change event (and preventDefault on it) is to prevent mouse movement during reordering from being interpreted as text selection gesture. Without it drag may still work, but browsers will be selecting all text along the way, which is ugly and confusing.\n\nAgreed.\n\n> Does this line run in your case? (i.e. if you delete that line, does it work for you?) https://github.com/pornel/slip/blob/4fa9d23063e5b88e31850ae57dc5303daa48ba65/slip.js#L583\n\nIt does.\n\n> if so, it'd be better to add browser sniffing to this condition\n\nI'm fine with that since it will solve my problem. Do you have a reliable way to detect iOS?\n. Just updated the PR.\n. Maybe setting `transformProperty` to an empty string on non webkit browsers until the `transform` property is widely adopted could be a good compromise. This solves our bug on firefox:\n\n``` patch\ndiff --git i/src/lib/slip.js w/src/lib/slip.js\nindex 9c5e3aa..c3c5e67 100644\n--- i/slip.js\n+++ w/slip.js\n@@ -131,7 +131,7 @@ window['Slip'] = (function(){\n\n     var transitionPrefix = \"webkitTransition\" in testElement.style ? \"webkitTransition\" : \"transition\";\n     var transformPrefix = \"webkitTransform\" in testElement.style ? \"webkitTransform\" : \"transform\";\n-    var transformProperty = transformPrefix === \"webkitTransform\" ? \"-webkit-transform\" : \"transform\";\n+    var transformProperty = transformPrefix === \"webkitTransform\" ? \"-webkit-transform\" : \"\";\n     var userSelectPrefix = \"webkitUserSelect\" in testElement.style ? \"webkitUserSelect\" : \"userSelect\";\n\n     testElement.style[transformPrefix] = 'translateZ(0)';\n```\n\nWhat do you think?\n. > Setting willChange informs the browser that the element will animate soon, so it should be using an accelerated layer. Without it you would have a delay/jerky animation when it starts moving.\n\nOK. Maybe the detection of FF can be added then? With `'MozTransform' in testElement.style` we can detect if we are on FF and then we can set `transformProperty` to `\"-moz-transform\"` which solves our problem as well.\n\nDo you want me to work on a patch for that?\n. > Firefox has unprefixed transform in 2012 in v16.\n\nYet on FF 44, `transformProperty` must be either an empty string or `-moz-transform` for you bug to be fixed. Don't ask me why thought.\n. > However, checkboxes and select elements work on my demo page, so I can't reproduce the problem you're reporting. \n\nI think that part of the problem is that on non webkit browser, the `input` is actually a `span` so it can be styled correctly. However, it is a `span` on IE and everything works fine.\n. > Are you saying you're using something like <span onclick> instead of <input type=checkbox>?\n\nYes\n. Just tried that. But the `e.preventDefault()` seems to prevent the click to be taken into account. So the checkbox doesn't work.\n. We finally decided to remove `willChange` in SlipJS to solve our problem.\n\nAnyway, thanks for your help and you awesome lib!\n. ",
    "Garito": "I read the attach and detach methods and I wonder why attach sets accesibility attributes and the tabindex but the detach doesn't remove them\n\nIn fact if I remove them manually, the styles are not setted anymore\n\nMust I considere this behaviour a bug or a normal one? (I think more in the 1st one, sorry :P)\nIn my opinion, the library will be better if no trace are left after using it, don't you think so?\nMust to be the developer's call to use this attributes or not after using the library\n\nWhat do you think?\n. Any idea when will be the next release?\n. I read the attach and detach methods and I wonder why attach sets accesibility attributes and the tabindex but the detach doesn't remove them\n\nIn fact if I remove them manually, the styles are not setted anymore\n\nMust I considere this behaviour a bug or a normal one? (I think more in the 1st one, sorry :P)\nIn my opinion, the library will be better if no trace are left after using it, don't you think so?\nMust to be the developer's call to use this attributes or not after using the library\n\nWhat do you think?\n. Any idea when will be the next release?\n. ",
    "francoismassart": "It looks like the accessibility attributes are removed by the [detach](https://github.com/pornel/slip/blob/master/slip.js#L537) method...\r\nMaybe this issue should be marked as resolved ?\r\n\r\nSee this commit: https://github.com/pornel/slip/commit/2cdb693e1c38191843ea5d8f9f0002bd574cb7d6. It looks like the accessibility attributes are removed by the [detach](https://github.com/pornel/slip/blob/master/slip.js#L537) method...\r\nMaybe this issue should be marked as resolved ?\r\n\r\nSee this commit: https://github.com/pornel/slip/commit/2cdb693e1c38191843ea5d8f9f0002bd574cb7d6. ",
    "MarkHill89": "Not sure if this is anything related or not, but when using Slip for a Cordova application that I am putting together, the android build has had some terrible interactions. In can only move down the screen and not up, when recording list items. The selecting of the list item is very picky. If you scroll down have more list items than what is on the screen, it goes straight to the bottom of the list, and not smoothly in any fashion. These are just a few of the problems. . Not sure if this is anything related or not, but when using Slip for a Cordova application that I am putting together, the android build has had some terrible interactions. In can only move down the screen and not up, when recording list items. The selecting of the list item is very picky. If you scroll down have more list items than what is on the screen, it goes straight to the bottom of the list, and not smoothly in any fashion. These are just a few of the problems. . ",
    "Sauvage9": "Here's a possible solution.\r\nIt works by dividing the triggerzone into 10 parts and use the offset within the zone as a multiplier for scroll animation duration. Currently animation is done using `requestAnimationFrame` but can be polyfilled using `setTimeout`. It still needs some fine-tuning but it will perform as it should.\r\n\r\nAdd following to prototype:\r\n`scrollEvt:{}, // object holding all required scroll params and scroll state`\r\n\r\nReplace following in prototype:\r\n```\r\nupdateScrolling: function() {\r\n\tif(!this.target || this.scrollEvt.scrolling){return};\r\n\r\n\tvar triggerOffset = 100,\r\n\t\tduration=100,\r\n\t\toffset = 0,\r\n\t\tthat=this;\r\n\r\n\tvar scrollable = this.target.scrollContainer,\r\n\t\tcontainerRect = scrollable.getBoundingClientRect(),\r\n\t\ttargetRect = this.target.node.getBoundingClientRect(),\r\n\t\tbottomOffset = Math.min(containerRect.bottom, window.innerHeight) - targetRect.bottom,\r\n\t\ttopOffset = targetRect.top - Math.max(containerRect.top, 0),\r\n\t\tmaxScrollTop = this.target.origScrollHeight - Math.min(scrollable.clientHeight, window.innerHeight);\r\n\r\n\tif (bottomOffset < triggerOffset) {\r\n\t  offset = Math.min(triggerOffset, triggerOffset - bottomOffset);\r\n\t}\r\n\telse if (topOffset < triggerOffset) {\r\n\t  offset = Math.max(-triggerOffset, topOffset - triggerOffset);\r\n\t}\r\n\r\n\tif(offset){\r\n\t\tthis.scrollEvt.scrolling=true;\r\n\t\tvar speed=Math.abs(Math.ceil((offset*10)/triggerOffset)),speedarray=[5,5,5,4,4,3,3,2,2,1,1];\r\n\t\tthis.animateScrolling(scrollable,this.target.node.offsetHeight,scrollable.scrollTop,duration*speedarray[speed],offset<0?-1:1);\r\n\t}\r\n},\r\n\r\nanimateScrolling:function(scrollable,height,ypos,duration,direction,starttime,timestamp){\r\n\tvar that=this,progress=0;\r\n\tif(timestamp){\r\n\t\tvar starttime=starttime||timestamp;progress=(timestamp-starttime)/duration;if(progress>1){progress=1};scrollable.scrollTop=(ypos+height*progress*direction);\r\n\t\tthis.state.onMove.call(this);\r\n\t}\r\n\tif(progress==1){this.cancelAnimateScrolling();this.updateScrolling();return};\r\n\tthis.scrollEvt.raf=requestAnimationFrame(function(timestamp){that.animateScrolling(scrollable,height,ypos,duration,direction,starttime,timestamp)});\r\n\r\n},\r\n\r\ncancelAnimateScrolling:function(){\r\n\tthis.scrollEvt.scrolling=false;\r\n\tcancelAnimationFrame(this.scrollEvt.raf);\r\n},\r\n\r\nupdatePosition: function(e, pos) {\r\n\tif (this.target == null) {\r\n\t\treturn;\r\n\t}\r\n\tthis.latestPosition = pos;\r\n\r\n\tif (this.state.onMove && !this.scrollEvt.scrolling) {\r\n\t\tif (this.state.onMove.call(this) === false) {\r\n\t\t\te&&e.preventDefault();\r\n\t\t}\r\n\t}\r\n\r\n\t//sample latestPosition 100ms for velocity\r\n\tif (this.latestPosition.time - this.previousPosition.time > 100) {\r\n\t\tthis.previousPosition = this.latestPosition;\r\n\t}\r\n},\r\n\r\nonMouseUp: function(e) {\r\n\tif (this.usingTouch || e.button !== 0) return;\r\n\tif (this.state.onEnd && false === this.state.onEnd.call(this)) {\r\n\t\te.preventDefault();\r\n\t}\r\n\tthis.cancelAnimateScrolling();\r\n},\r\n\r\nonTouchEnd: function(e) {\r\n\tif (e.touches.length > 1) {\r\n\t\tthis.cancel();\r\n\t} else if (this.state.onEnd && false === this.state.onEnd.call(this)) {\r\n\t\te.preventDefault();\r\n\t}\r\n\tthis.cancelAnimateScrolling();\r\n},\r\n```\r\n\r\nWhen scrolling, `scrollEvt.scrolling=true`. This is useful to block other events and avoid duplicate calls. animateScrolling will call onmove since scrolling with a steady mouse will not, resulting in jagged movement. \r\n\r\nTODO: \r\n- fix needed for FireFox\r\n- scroll delay needed for startMove instant items in the trigger zone \r\n. Update:\r\n- Changed triggerzone into 4 parts instead of 10 for smoother scrolling.\r\n- Added movement check on instant items in the triggerzone so scrolling won't begin until up/down movement was detected.\r\n\r\n```\r\nupdateScrolling: function() {\r\n\tif(!this.target || this.scrollEvt.scrolling){return};\r\n\t\r\n\tvar triggerOffset = 100,\r\n\t\tduration=100,\r\n\t\toffset = 0,\r\n\t\tthat=this;\r\n\r\n\tvar scrollable = this.target.scrollContainer,\r\n\t\tcontainerRect = scrollable.getBoundingClientRect(),\r\n\t\ttargetRect = this.target.node.getBoundingClientRect(),\r\n\t\tbottomOffset = Math.min(containerRect.bottom, window.innerHeight) - targetRect.bottom,\r\n\t\ttopOffset = targetRect.top - Math.max(containerRect.top, 0),\r\n\t\tmaxScrollTop = this.target.origScrollHeight - Math.min(scrollable.clientHeight, window.innerHeight);\r\n\t\t\r\n\tif (bottomOffset < triggerOffset) {\r\n\t  offset = Math.min(triggerOffset, triggerOffset - bottomOffset);\r\n\t}\r\n\telse if (topOffset < triggerOffset) {\r\n\t  offset = Math.max(-triggerOffset, topOffset - triggerOffset);\r\n\t}\r\n\t\r\n\tif(!offset){return}\r\n\tif(offset<0 && this.getTotalMovement().y>=-(triggerOffset/10)){return}\r\n\tif(offset>0 && this.getTotalMovement().y<=(triggerOffset/10)){return}\r\n\t\r\n\tthis.scrollEvt.scrolling=true;\r\n\tvar speed=Math.abs(Math.ceil((offset*4)/triggerOffset));\r\n\tthis.animateScrolling(scrollable,this.target.node.offsetHeight,scrollable.scrollTop,duration*[4,4,3,2,1][speed],offset<0?-1:1)\r\n},\r\n```\r\n\r\nTODO:\r\n- Firefox doesn't like `scrollTo` on `document.body`. Firefox autoscroll fix:\r\n\r\nAdd following after `damnYouChrome` declaration:\r\n`var damnYouFirefox = /Firefox/.test(navigator.userAgent);`\r\n\r\nAdd following after `scrollContainer = scrollContainer || document.body;`:\r\n`if(damnYouFirefox && scrollContainer==document.body) {scrollContainer=document.documentElement};`. Fixed\r\n\r\nApparently Safari suffers from the same `compositorDoesNotOrderLayers` bug as Chrome, although in a slightly different fashion. \r\n\r\nChanging\r\n`if (compositorDoesNotOrderLayers) {this.container.style.webkitTransformStyle = 'preserve-3d'}` \r\nto `this.container.style.webkitTransformStyle = 'preserve-3d';` does the trick and since it's vendor prefixed you don't need to worry about other browsers.. Here's a possible solution.\r\nIt works by dividing the triggerzone into 10 parts and use the offset within the zone as a multiplier for scroll animation duration. Currently animation is done using `requestAnimationFrame` but can be polyfilled using `setTimeout`. It still needs some fine-tuning but it will perform as it should.\r\n\r\nAdd following to prototype:\r\n`scrollEvt:{}, // object holding all required scroll params and scroll state`\r\n\r\nReplace following in prototype:\r\n```\r\nupdateScrolling: function() {\r\n\tif(!this.target || this.scrollEvt.scrolling){return};\r\n\r\n\tvar triggerOffset = 100,\r\n\t\tduration=100,\r\n\t\toffset = 0,\r\n\t\tthat=this;\r\n\r\n\tvar scrollable = this.target.scrollContainer,\r\n\t\tcontainerRect = scrollable.getBoundingClientRect(),\r\n\t\ttargetRect = this.target.node.getBoundingClientRect(),\r\n\t\tbottomOffset = Math.min(containerRect.bottom, window.innerHeight) - targetRect.bottom,\r\n\t\ttopOffset = targetRect.top - Math.max(containerRect.top, 0),\r\n\t\tmaxScrollTop = this.target.origScrollHeight - Math.min(scrollable.clientHeight, window.innerHeight);\r\n\r\n\tif (bottomOffset < triggerOffset) {\r\n\t  offset = Math.min(triggerOffset, triggerOffset - bottomOffset);\r\n\t}\r\n\telse if (topOffset < triggerOffset) {\r\n\t  offset = Math.max(-triggerOffset, topOffset - triggerOffset);\r\n\t}\r\n\r\n\tif(offset){\r\n\t\tthis.scrollEvt.scrolling=true;\r\n\t\tvar speed=Math.abs(Math.ceil((offset*10)/triggerOffset)),speedarray=[5,5,5,4,4,3,3,2,2,1,1];\r\n\t\tthis.animateScrolling(scrollable,this.target.node.offsetHeight,scrollable.scrollTop,duration*speedarray[speed],offset<0?-1:1);\r\n\t}\r\n},\r\n\r\nanimateScrolling:function(scrollable,height,ypos,duration,direction,starttime,timestamp){\r\n\tvar that=this,progress=0;\r\n\tif(timestamp){\r\n\t\tvar starttime=starttime||timestamp;progress=(timestamp-starttime)/duration;if(progress>1){progress=1};scrollable.scrollTop=(ypos+height*progress*direction);\r\n\t\tthis.state.onMove.call(this);\r\n\t}\r\n\tif(progress==1){this.cancelAnimateScrolling();this.updateScrolling();return};\r\n\tthis.scrollEvt.raf=requestAnimationFrame(function(timestamp){that.animateScrolling(scrollable,height,ypos,duration,direction,starttime,timestamp)});\r\n\r\n},\r\n\r\ncancelAnimateScrolling:function(){\r\n\tthis.scrollEvt.scrolling=false;\r\n\tcancelAnimationFrame(this.scrollEvt.raf);\r\n},\r\n\r\nupdatePosition: function(e, pos) {\r\n\tif (this.target == null) {\r\n\t\treturn;\r\n\t}\r\n\tthis.latestPosition = pos;\r\n\r\n\tif (this.state.onMove && !this.scrollEvt.scrolling) {\r\n\t\tif (this.state.onMove.call(this) === false) {\r\n\t\t\te&&e.preventDefault();\r\n\t\t}\r\n\t}\r\n\r\n\t//sample latestPosition 100ms for velocity\r\n\tif (this.latestPosition.time - this.previousPosition.time > 100) {\r\n\t\tthis.previousPosition = this.latestPosition;\r\n\t}\r\n},\r\n\r\nonMouseUp: function(e) {\r\n\tif (this.usingTouch || e.button !== 0) return;\r\n\tif (this.state.onEnd && false === this.state.onEnd.call(this)) {\r\n\t\te.preventDefault();\r\n\t}\r\n\tthis.cancelAnimateScrolling();\r\n},\r\n\r\nonTouchEnd: function(e) {\r\n\tif (e.touches.length > 1) {\r\n\t\tthis.cancel();\r\n\t} else if (this.state.onEnd && false === this.state.onEnd.call(this)) {\r\n\t\te.preventDefault();\r\n\t}\r\n\tthis.cancelAnimateScrolling();\r\n},\r\n```\r\n\r\nWhen scrolling, `scrollEvt.scrolling=true`. This is useful to block other events and avoid duplicate calls. animateScrolling will call onmove since scrolling with a steady mouse will not, resulting in jagged movement. \r\n\r\nTODO: \r\n- fix needed for FireFox\r\n- scroll delay needed for startMove instant items in the trigger zone \r\n. Update:\r\n- Changed triggerzone into 4 parts instead of 10 for smoother scrolling.\r\n- Added movement check on instant items in the triggerzone so scrolling won't begin until up/down movement was detected.\r\n\r\n```\r\nupdateScrolling: function() {\r\n\tif(!this.target || this.scrollEvt.scrolling){return};\r\n\t\r\n\tvar triggerOffset = 100,\r\n\t\tduration=100,\r\n\t\toffset = 0,\r\n\t\tthat=this;\r\n\r\n\tvar scrollable = this.target.scrollContainer,\r\n\t\tcontainerRect = scrollable.getBoundingClientRect(),\r\n\t\ttargetRect = this.target.node.getBoundingClientRect(),\r\n\t\tbottomOffset = Math.min(containerRect.bottom, window.innerHeight) - targetRect.bottom,\r\n\t\ttopOffset = targetRect.top - Math.max(containerRect.top, 0),\r\n\t\tmaxScrollTop = this.target.origScrollHeight - Math.min(scrollable.clientHeight, window.innerHeight);\r\n\t\t\r\n\tif (bottomOffset < triggerOffset) {\r\n\t  offset = Math.min(triggerOffset, triggerOffset - bottomOffset);\r\n\t}\r\n\telse if (topOffset < triggerOffset) {\r\n\t  offset = Math.max(-triggerOffset, topOffset - triggerOffset);\r\n\t}\r\n\t\r\n\tif(!offset){return}\r\n\tif(offset<0 && this.getTotalMovement().y>=-(triggerOffset/10)){return}\r\n\tif(offset>0 && this.getTotalMovement().y<=(triggerOffset/10)){return}\r\n\t\r\n\tthis.scrollEvt.scrolling=true;\r\n\tvar speed=Math.abs(Math.ceil((offset*4)/triggerOffset));\r\n\tthis.animateScrolling(scrollable,this.target.node.offsetHeight,scrollable.scrollTop,duration*[4,4,3,2,1][speed],offset<0?-1:1)\r\n},\r\n```\r\n\r\nTODO:\r\n- Firefox doesn't like `scrollTo` on `document.body`. Firefox autoscroll fix:\r\n\r\nAdd following after `damnYouChrome` declaration:\r\n`var damnYouFirefox = /Firefox/.test(navigator.userAgent);`\r\n\r\nAdd following after `scrollContainer = scrollContainer || document.body;`:\r\n`if(damnYouFirefox && scrollContainer==document.body) {scrollContainer=document.documentElement};`. Fixed\r\n\r\nApparently Safari suffers from the same `compositorDoesNotOrderLayers` bug as Chrome, although in a slightly different fashion. \r\n\r\nChanging\r\n`if (compositorDoesNotOrderLayers) {this.container.style.webkitTransformStyle = 'preserve-3d'}` \r\nto `this.container.style.webkitTransformStyle = 'preserve-3d';` does the trick and since it's vendor prefixed you don't need to worry about other browsers.. ",
    "Webifi": "@Snoturky \r\n\r\nCould you do a proper pull request for your changes?. @Snoturky \r\n\r\nCould you do a proper pull request for your changes?. ",
    "RemyyB": "Question, what's the variable yourArray (sorry, I'm a Javascript noob). I got the data, but the only thing I need is to put the data out. I saw the data is saved in an array, but I really don't know how to get the array.. Question, what's the variable yourArray (sorry, I'm a Javascript noob). I got the data, but the only thing I need is to put the data out. I saw the data is saved in an array, but I really don't know how to get the array.. ",
    "deqing": "@pornel thanks for the prompt reply, code updated.. @pornel thanks for the prompt reply, code updated.. ",
    "itaditya": "Ok. Ok. ",
    "Oleksa": "Pls take a look to http://jsfiddle.net/ASerbinenko/p264bavb/9/\r\nUnder 'Chrome' both sign 'X' and item text are clickable (You can see response in console)\r\nBut under Firefox only item text is clickable, not sign 'X'. \r\nI think the problem is relative to the ::before css attribute:\r\n.pri-delete::before {\r\n  content: \"x\";\r\n}\r\n\r\nThank you,\r\n-=A=-. Thank you for response.\r\nActually no changes in the behavior if you replace <a ...>  to <span... >\r\n(:-(\r\nPls take a look: http://jsfiddle.net/p264bavb/10/\r\n\r\nCould you add config parameter (for example) for disable optimization by property 'willChange'?\r\nthis.target.node.style.willChange = transformCSSPropertyName;. Pls take a look to http://jsfiddle.net/ASerbinenko/p264bavb/9/\r\nUnder 'Chrome' both sign 'X' and item text are clickable (You can see response in console)\r\nBut under Firefox only item text is clickable, not sign 'X'. \r\nI think the problem is relative to the ::before css attribute:\r\n.pri-delete::before {\r\n  content: \"x\";\r\n}\r\n\r\nThank you,\r\n-=A=-. Thank you for response.\r\nActually no changes in the behavior if you replace <a ...>  to <span... >\r\n(:-(\r\nPls take a look: http://jsfiddle.net/p264bavb/10/\r\n\r\nCould you add config parameter (for example) for disable optimization by property 'willChange'?\r\nthis.target.node.style.willChange = transformCSSPropertyName;. ",
    "MarioFagac": "Thanks.. Thanks.. ",
    "mstobin": "The suggested solution only solves part of the problem though, because it still allows items to move past an object.\r\n\r\nLet's say I have a list of 10 items, where the top and bottom item should be fixed in place, and the other 8 items moveable.\r\n\r\nWe can block the top and bottom item from being dragged, but nothing stops the user dragging item 5 to the top of the list, even though the top item itself cannot be dragged.\r\n\r\nIn the end, the outcome is the same - the list ends up in an invalid order.\r\n\r\nIt would be great if there was a way to mark items that should not participate in the drag and drop at all, and not allow them to be shuffled out of place. Ideally, when the user hits one such boundary, the item being dragged would \"stick\" to this boundary too rather than proceeding past it.\r\n\r\nThe Sortable.js library does this with an option to set a selector for which items are draggable, and only those items participate.\r\n\r\nUnfortunately, I ran into some bugs with that library on iOS 11, which is why I am looking to swap across to slip.js. This library was quick to implement and works perfectly, except for this one requirement.\r\n\r\nI can roll up my sleeves and get dirty in the code if required - but any pointers on where to look?. Ok, thanks. I have something that works for my purpose.\r\n\r\nI haven't really been involved in Open Source projects or Github, so I have no idea how to submit Pull Requests etc. if you want to add this into the main library.\r\n\r\nBut if you are interested in the changes, all I needed to do was the following:\r\n\r\n**CODE CHANGES**\r\n\r\n**Inside function Slip():**\r\nAdd the following underneath existing options handling:\r\n```javascript\r\nthis.options.moveableClass = options.moveableClass || null;\r\n```\r\n\r\n**Inside reorder function**:\r\nWhere otherNodes is first being created, add the moveable variable:\r\n```javascript\r\notherNodes.push({\r\n    // ... as before\r\n    moveable: this.options.moveableClass ? \r\n        nodes[i].classList.contains(this.options.moveableClass) : true\r\n});\r\n```\r\n**Inside both reorder: onMove(): and leaveState():** \r\n```javascript\r\notherNodes.forEach(function(o){\r\n    if (!o.moveable) { return; }\r\n    // ... as before\r\n});\r\n```\r\n\r\n**Inside onEnd():**\r\nChange the following line:\r\n```javascript\r\nif (otherNodes[i].pos > move.y) {\r\n```\r\n\r\nTo this (checks for moveable):\r\n```javascript\r\nif (otherNodes[i].moveable && otherNodes[i].pos > move.y) {\r\n```\r\n\r\nAnd likewise, for the next loop, change:\r\n```javascript\r\nif (otherNodes[i].pos < move.y) {\r\n```\r\n\r\nTo this:\r\n```javascript\r\nif (otherNodes[i].moveable && otherNodes[i].pos < move.y) {\r\n```\r\n\r\n\r\n**USAGE**\r\nWith those changes in place, usage is pretty straightforward.\r\n\r\nWhen creating the Slip instance, specify the class name that will be used for moveable elements:\r\n```javascript\r\nvar slipInstance = new Slip(domEl, { moveableClass: 'moveable' });\r\n```\r\n\r\nAnd then when creating your list (either in HTML or dynamically), make sure that moveable elements have that class:\r\n```html\r\n<ul>\r\n<li>Fixed at top</li>\r\n<li class=\"moveable\">Item 1</li>\r\n<li class=\"moveable\">Item 2</li>\r\n<li class=\"moveable\">Item 3</li>\r\n<li>Fixed at bottom</li>\r\n</ul>\r\n```\r\n\r\n**IMPROVEMENTS**\r\n\r\n**Tested on top and bottom only**\r\nI have tested this code on items that cannot be moved from the top and the bottom of the list, which was my use case.\r\n\r\nI have not tested what would happen with items that cannot be moved in the middle of the list... but then, I am not sure what logically *should* happen either in that case.\r\n\r\n**Before Reorder**\r\nI didn't bother, since I already handled it elsewhere in the existing callbacks, but it may make sense to adjust how/when `slip:beforereorder` is called to check for the moveable flag and automatically block movement rather than relying on the callback.\r\n\r\nRight now, I still have to handle it by calling `e.preventDefault()` in the `slip:beforereorder` callback, which seems like unnecessary double handling:\r\n\r\n```javascript\r\ndomEl.addEventListener('slip:beforereorder', function(e) {\r\n    if (!e.srcElement.classList.contains('moveable')) { e.preventDefault(); }\r\n}\r\n```\r\n\r\n**Compatibility**\r\nI am not 100% sure of the backwards compatibility of domEl.classList.contains(), and how far back you are trying to aim, so you may need to perform this check in a different way. I know there are more backwards-compatible options floating around the internet.. The suggested solution only solves part of the problem though, because it still allows items to move past an object.\r\n\r\nLet's say I have a list of 10 items, where the top and bottom item should be fixed in place, and the other 8 items moveable.\r\n\r\nWe can block the top and bottom item from being dragged, but nothing stops the user dragging item 5 to the top of the list, even though the top item itself cannot be dragged.\r\n\r\nIn the end, the outcome is the same - the list ends up in an invalid order.\r\n\r\nIt would be great if there was a way to mark items that should not participate in the drag and drop at all, and not allow them to be shuffled out of place. Ideally, when the user hits one such boundary, the item being dragged would \"stick\" to this boundary too rather than proceeding past it.\r\n\r\nThe Sortable.js library does this with an option to set a selector for which items are draggable, and only those items participate.\r\n\r\nUnfortunately, I ran into some bugs with that library on iOS 11, which is why I am looking to swap across to slip.js. This library was quick to implement and works perfectly, except for this one requirement.\r\n\r\nI can roll up my sleeves and get dirty in the code if required - but any pointers on where to look?. Ok, thanks. I have something that works for my purpose.\r\n\r\nI haven't really been involved in Open Source projects or Github, so I have no idea how to submit Pull Requests etc. if you want to add this into the main library.\r\n\r\nBut if you are interested in the changes, all I needed to do was the following:\r\n\r\n**CODE CHANGES**\r\n\r\n**Inside function Slip():**\r\nAdd the following underneath existing options handling:\r\n```javascript\r\nthis.options.moveableClass = options.moveableClass || null;\r\n```\r\n\r\n**Inside reorder function**:\r\nWhere otherNodes is first being created, add the moveable variable:\r\n```javascript\r\notherNodes.push({\r\n    // ... as before\r\n    moveable: this.options.moveableClass ? \r\n        nodes[i].classList.contains(this.options.moveableClass) : true\r\n});\r\n```\r\n**Inside both reorder: onMove(): and leaveState():** \r\n```javascript\r\notherNodes.forEach(function(o){\r\n    if (!o.moveable) { return; }\r\n    // ... as before\r\n});\r\n```\r\n\r\n**Inside onEnd():**\r\nChange the following line:\r\n```javascript\r\nif (otherNodes[i].pos > move.y) {\r\n```\r\n\r\nTo this (checks for moveable):\r\n```javascript\r\nif (otherNodes[i].moveable && otherNodes[i].pos > move.y) {\r\n```\r\n\r\nAnd likewise, for the next loop, change:\r\n```javascript\r\nif (otherNodes[i].pos < move.y) {\r\n```\r\n\r\nTo this:\r\n```javascript\r\nif (otherNodes[i].moveable && otherNodes[i].pos < move.y) {\r\n```\r\n\r\n\r\n**USAGE**\r\nWith those changes in place, usage is pretty straightforward.\r\n\r\nWhen creating the Slip instance, specify the class name that will be used for moveable elements:\r\n```javascript\r\nvar slipInstance = new Slip(domEl, { moveableClass: 'moveable' });\r\n```\r\n\r\nAnd then when creating your list (either in HTML or dynamically), make sure that moveable elements have that class:\r\n```html\r\n<ul>\r\n<li>Fixed at top</li>\r\n<li class=\"moveable\">Item 1</li>\r\n<li class=\"moveable\">Item 2</li>\r\n<li class=\"moveable\">Item 3</li>\r\n<li>Fixed at bottom</li>\r\n</ul>\r\n```\r\n\r\n**IMPROVEMENTS**\r\n\r\n**Tested on top and bottom only**\r\nI have tested this code on items that cannot be moved from the top and the bottom of the list, which was my use case.\r\n\r\nI have not tested what would happen with items that cannot be moved in the middle of the list... but then, I am not sure what logically *should* happen either in that case.\r\n\r\n**Before Reorder**\r\nI didn't bother, since I already handled it elsewhere in the existing callbacks, but it may make sense to adjust how/when `slip:beforereorder` is called to check for the moveable flag and automatically block movement rather than relying on the callback.\r\n\r\nRight now, I still have to handle it by calling `e.preventDefault()` in the `slip:beforereorder` callback, which seems like unnecessary double handling:\r\n\r\n```javascript\r\ndomEl.addEventListener('slip:beforereorder', function(e) {\r\n    if (!e.srcElement.classList.contains('moveable')) { e.preventDefault(); }\r\n}\r\n```\r\n\r\n**Compatibility**\r\nI am not 100% sure of the backwards compatibility of domEl.classList.contains(), and how far back you are trying to aim, so you may need to perform this check in a different way. I know there are more backwards-compatible options floating around the internet.. "
}