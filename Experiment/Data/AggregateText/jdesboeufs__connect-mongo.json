{
    "kcbanner": "Hm, is this access inside a request? If so, you can just do (for example):\n\n```\nexports.require_login = function (req, res, next) {\n  if(req.session.user) {\n    next();\n  } else {\n    res.redirect('/admin/login');\n  };\n};\n```\n\nIf it isn't inside a request, you will have to create a new MongoStore instance with the same dbOptions as you passed in to the instance you created inside your use() call.\n. Thanks! I'll merge this and release a new version on npm soon.\n. Correct, I still need to publish the update. I'll do that today.\n. Done.\n. This looks good! I'll merge it and upload to npm as soon as I can.\n\nThanks!\n. Published new version with these changes to npm.\n. This may be a race condition, if the connection hasn't finished connecting to mongodb and getting the collection. What are you doing when you get this error?\n. Just pushed version 0.1.5 with fixes to avoid race condition, please try it and let me know. I can't reproduce this issue on my end.\n. You shouldn't have to pass an actual DB instance in MongoStore options, it should just be the db name. Does it work for you with just the db name with the latest connect-mongo version?\n. I will investigate this ASAP, currently I am studying for finals so I apologize for any delays.\n. I'm going to close this since it has been open for so long and I believe this has been fixed. Please re-open if this occurs again!\n. What were your options when you weren't using url?\n. Ah, I see. Could you wait to call the MongoStore constructor until that is ready?\n. Will look into this, thanks\n. I can't seem to reproduce the CPU issue, I get 'Error connecting to database' immediately after trying to connect. What versions of node-mongodb-native and mongodb itself are you running?\n. Ah, I'm running mongo version 1.8.2, perhaps this issue was fixed since 1.4.4? I can't reproduce by connecting to a non-existant db.\n. Sorry, I thought you meant simply the wrong DB. Will check with mongo off.\n. I attempted to reproduce this and I can't seem to. I immediately get the `Error: Error connecting to database` when I run the test cases.\n\nSo to be clear, if you run the tests, for example `expresso --serial -I lib -t 10000`, you see a cpu spike and no exception throw?\n. Ok, will try to repro with an external  ip, have been testing with localhost\n. Ah! I was able to reproduce it just using the mongodb module: https://gist.github.com/1087969. Looks like this is a bug on that end.\n. Unfortunately, the node-mongodb-native driver is pretty tightly integrated with connect-mongo. However, if another implementation had the exact same API, then it would work.\n\nI will cross post.\n. Posted here, https://github.com/christkv/node-mongodb-native/issues/296. Is it safe to close this issue here and continue on the mongodb tracker?\n. No problem, thanks for the detailed reports!\n. Thanks!\n. Thanks! I'll merge this as soon as I have time.\n. We're looking into adding replica set support in #25.\n. This feature is being added in another pull request, thanks!\n. Thanks! \n. Sorry I've been so slow on this, will merge this and push to npm this week.\n. It is currently stored as JSON, I did this originally because I had problems with saving Date objects in the session when the Date object had been patched by some library. That problem may no longer be relevant though.\n. There is now a `stringify` option which you can set to false to store your sessions as native types.\n. I'll look into this, it should work as I have put 0.4.x in the package.json.\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Hi, is this resolved?\n. Hey guys, I'll integrate this soon. I've been busy with school, sorry for the delay on this.\n. I've integrated this, thanks!\n. I'll look into this, thanks!\n. Yea, passing `auto_reconnect` as true in the `options` dictionary will enable mongodb auto_reconnect. I've updated the Readme to reflect this.\n. New version pushed to npm. Sorry I was so slow on this guys, school makes you a bad maintainer!\n. Everything is updated now.\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Thanks!\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Thanks! Will push a new version to npm soon.\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. I'll look into this.\n. Have you tried the `auto_reconnect` option?\n. I'll be updating this soon! Thanks!\n. Hi, would you mind adding tests for this and then I'll integrate it. Thanks!\n. Is this a feature you still need @codeglot ?\n. @bharatmeda once pull request #43 gets unit tests, I'll merge it in. I haven't had time to do it myself yet, will get to it. If you would like to do it that would be great as well.\n. Hi, this exists with the `clear_interval` option;\n. Can you check the time on both your client and server computers? The deletion check is against the server time.\n. connect-mongo will ask MongoDB to remove all the sessions that have expired before the current date. Since that call doesn't return a list of removed items, currently this isn't trivial to add.\n\nHowever, this could be added as an option, where we run a find() to get all the expired sessions before removing them, and call your callback on the list of those sessions.\n. Thanks!\n. This is now fixed, there is no longer a connect dependency. Please see the readme to pass in either express or connect when creating the store.\n. This is now fixed in 0.1.8 which is in NPM.\n. Did the `auto_reconnect` option not work?\n. Closing this, please reopen if there is a similar issue still.\n. Thanks!\n. Due to all the updates I've done recently, I'd like to verify everything passes tests. I'm going to do that soon and will publish to NPM once I'm happy that everything is stable.\n. Done!\n. Hey, I'll look into adding that. Thanks!\n. Haha, wait, this exists. I use it for the tests.\n\n```\n/**\n* Initialize MongoStore with the given `options`.\n* Calls `callback` when db connection is ready (mainly for testing purposes).\n* \n* @param {Object} options\n* @param {Function} callback\n* @api public\n*/\n\nfunction MongoStore(options, callback) {\n   ...\n}\n```\n\nJust pass `callback` as the second argument to MongoStore.\n. I've updated the Readme to reflect this, it was undocumented before.\n. I have not tested it with express 3 yet, I will once it is out of alpha.\n. Should we force the upgrade to 1.x? Maybe a range from 0.9 to 1.x?\n. Looks good. I have some other changes to integrate and I'll make a release fairly soon.\n. Sorry guys I've just had exams, will be back to my regular maintaining duties very soon. Hoping to clean everything up next week and merge in all the pulls. Thanks!\n. Moved to 1.0.x!\n. Hi, would you mind adding some unit tests for this? Then I can integrate.\n. Thanks for this! I'll look at integrating this this weekend. Any ideas on how to avoid those who don't use mongoose needed the dependency?\n. Ah, right on. Thanks. Will integrate and make a release soon.\n. This is merged!\n. Thanks for this!\n. Thanks for this! Would you mind adding a quick unit test for this? I'll be glad to merge it in with a test.\n. Thanks for this, closing now but please reopen if there is a documentation issue still.\n. I'll look into this, that shouldn't be null.\n. @aroman clear_interval is the time between connect-mongo checking for expired sessions. It isn't related to the expiry of individual sessions, just when they get cleaned up. I added that to fix expired sessions from sticking around in the database.\n\nI agree that we should follow connect-redis' model using the TTL feature. A pull request would be very welcome, as I haven't had much time to maintain this recently. I hope to get back in to the swing of things in the new year.\n\nThanks for your insight on this!\n. I've published a new version with this change!\n. Looks like the only reason it failed was db connection issues. I'll look into merging this on the weekend!\n. Merged!\n. I have updated to 1.2, does this still occur?\n. Ok cool, I'll close this then\n. This looks good, I'm going to verify the Travis build system and I'll merge this ASAP. Thanks so much!\n. I'll publish a new version soon.\n. Thanks for this, I'll take a look soon.\n. Merged! Thanks again.\n. I've fixed this and pushed version 0.3.1 to npm, thanks!\n. require('connect-mongo'), not './lib/connect-mongo' should do the trick.\n. Ah, yea. I also didn't have a `directories` entry in my package.json. I've pushed 0.3.2 to npm.\n. Check the system clock of both your server and client, make sure they are the same. The client could be immediately expiring its cookies if it has a wrong time.\n. Check your system time on your server and client. If they are too far apart\ncookies will be instantly expiring.\nOn Apr 14, 2013 10:40 AM, \"Ethan\" notifications@github.com wrote:\n\n> app.use express.methodOverride()\n> app.use express.cookieParser()\n> app.use express.session\n>   secret:'pansafe_authserver@pansafe'\n>   store: new MongoStore\n>      db: 'pansafe_authserver'\n>   cookie: {\n>             maxAge: 24 \\* 360000 # 24 hours\n>         }\n> \n> i got the same question. here i have a client with 127.0.0.1:3000, and a\n> server with 127.0.0.1:8000, when second request, the session will be a\n> new one without user info. i'm very confused!!! help me. TX\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/57#issuecomment-16352047\n> .\n. Thanks for this!\n. I merged a request which logs these errors.\n. Hey, would you mind adding some tests for this? I'd be happy to merge once that code path has a test.\n. I'll be able to merge this when tests get added to the pull, I don't have time right now to do it\n. Thanks for this!\n. Hey guys, I'll get to this ASAP. \n. Glad to hear there wasn't an issue with connect-mongo. Mind if I close this out?\n. Thanks for this. I'll bump the version and publish soon.\n. What kind of objects are in your session\n. From the error it sounds like you have something set in your session that MongoDB can't serialize\n. Something in the `stringify: false` path must be off. That hasn't been tested as much. I'll have to look into this.\n. Will do tonight, thanks.\n\nOn Tue, Sep 17, 2013 at 10:17 AM, tommedema notifications@github.comwrote:\n\n> @kcbanner https://github.com/kcbanner in that case, maybe you can\n> update the NPM repo?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/83#issuecomment-24591392\n> .\n. Thanks!\n. Thanks! I'll take a look at this ASAP\n. This is a bad idea. What if both apps write to the session at the same time?\n. Consider this scenario:\n1. Server A reads the session data\n2. Server B reads the session data\n3. Server A adds key `foo`\n4. Server B adds key `bar`\n5. Server A writes the session data\n6. Server B writes the session data\n7. You have lost the `foo` key.\n. The same problem applies though, one can erase the addition of the other:\n1. Server A reads the session data\n2. Server B reads the session data\n3. Server A adds key `mydomain1`\n4. Server B adds key `mydomain2`\n5. Server A writes the session data\n6. Server B writes the session data\n7. You have lost the `mydomain1` key.\n. Sure, when you guarantee that you will never have more than one concurrent request for a particular user across all servers that would be sharing this session, then it works. However, you cannot guarantee that, and so it doesn't work. MongoDB does not have transactions, so you cannot even detect the failure case in a reliable way.\n. You would also have to make sure that the cookie secret was shared between the node apps, or else they won't be able to correctly read the data.\n\nI still wouldn't recommend going this, because inevitably a user will visit both sites at once and there will be data loss.\n. Try using the master version from github instead of from npm for now, I'll be able to push a release soon.\n. I'll look at updating NPM tonight, sorry for the delay on this guys, I have\nbeen busy with other things\n\nOn Thu, Apr 10, 2014 at 9:23 AM, Linus Unneb\u00e4ck notifications@github.comwrote:\n\n> Please don't submit the fork to npm. If you need to use a working version,\n> use the following syntax in your package.json:\n> \n> \"connect-mongo\": \"mrzepinski/connect-mongo#2135988\"\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/103#issuecomment-40080050\n> .\n. Sorry guys. My IRL job is quite buys lately. Hopefully I can look at this\nsoon.\n\nOn Thu, Apr 24, 2014 at 5:35 PM, Marc-Andr\u00e9 B\u00e9langer <\nnotifications@github.com> wrote:\n\n> Ping @kcbanner https://github.com/kcbanner .\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/103#issuecomment-41335525\n> .\n. Yep, will take care of this on the weekend. I'll finally have time to sit\ndown and maintain this project!\n\nOn Fri, Apr 11, 2014 at 3:53 AM, Steve Lorimer notifications@github.comwrote:\n\n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/109\n> .\n. New version has been published! Sorry for the long wait guys. I'll try to keep up with pull requests on this project. \n\n@outrightmental I'd be happy to pass the maintainer baton on to you for this project if you'd like!\n. Ideally something should run periodically and prune dead sessions from the database.\n. I would suggest looking at the user agent of the request and skipping the session middleware if you do not want to create a session for them. However, I highly recommend expiring sessions. If you do not expire them, then as time goes to infinity, your session storage also goes to infinity.\n. How is that so\n. To solve that I would suggest implementing a password reset feature, via email. The fact is that if you never expire sessions, they are going to accumulate.\n. Isn't the real problem here that ensureIndex can be called before the connection is established? Shouldn't the fix be to push `_get_collection` callbacks onto an array and then flush them once the connection is established?\n. My personal preference is that defaults would be immutable\n. Hi guys! I'm very much alive, but haven't had time to work on this as I have moved away from using node.js for my projects. If someone would like to take over as maintainer of this repo I'd be happy to consider that!\n. You've been added!\n. It was originally generated with github's generator, we can disable it now.\n\nOn Sun, Dec 28, 2014 at 8:42 AM, J\u00e9r\u00f4me Desboeufs notifications@github.com\nwrote:\n\n> I don't know how these pages are generated.\n> \n> I asked to @kcbanner https://github.com/kcbanner if we could avoid\n> gh-pages.\n> Having a dedicated website is not really useful, and not hype anymore ;)\n> Do you agree?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/144#issuecomment-68212104\n> .\n. Hm, is this access inside a request? If so, you can just do (for example):\n\n```\nexports.require_login = function (req, res, next) {\n  if(req.session.user) {\n    next();\n  } else {\n    res.redirect('/admin/login');\n  };\n};\n```\n\nIf it isn't inside a request, you will have to create a new MongoStore instance with the same dbOptions as you passed in to the instance you created inside your use() call.\n. Thanks! I'll merge this and release a new version on npm soon.\n. Correct, I still need to publish the update. I'll do that today.\n. Done.\n. This looks good! I'll merge it and upload to npm as soon as I can.\n\nThanks!\n. Published new version with these changes to npm.\n. This may be a race condition, if the connection hasn't finished connecting to mongodb and getting the collection. What are you doing when you get this error?\n. Just pushed version 0.1.5 with fixes to avoid race condition, please try it and let me know. I can't reproduce this issue on my end.\n. You shouldn't have to pass an actual DB instance in MongoStore options, it should just be the db name. Does it work for you with just the db name with the latest connect-mongo version?\n. I will investigate this ASAP, currently I am studying for finals so I apologize for any delays.\n. I'm going to close this since it has been open for so long and I believe this has been fixed. Please re-open if this occurs again!\n. What were your options when you weren't using url?\n. Ah, I see. Could you wait to call the MongoStore constructor until that is ready?\n. Will look into this, thanks\n. I can't seem to reproduce the CPU issue, I get 'Error connecting to database' immediately after trying to connect. What versions of node-mongodb-native and mongodb itself are you running?\n. Ah, I'm running mongo version 1.8.2, perhaps this issue was fixed since 1.4.4? I can't reproduce by connecting to a non-existant db.\n. Sorry, I thought you meant simply the wrong DB. Will check with mongo off.\n. I attempted to reproduce this and I can't seem to. I immediately get the `Error: Error connecting to database` when I run the test cases.\n\nSo to be clear, if you run the tests, for example `expresso --serial -I lib -t 10000`, you see a cpu spike and no exception throw?\n. Ok, will try to repro with an external  ip, have been testing with localhost\n. Ah! I was able to reproduce it just using the mongodb module: https://gist.github.com/1087969. Looks like this is a bug on that end.\n. Unfortunately, the node-mongodb-native driver is pretty tightly integrated with connect-mongo. However, if another implementation had the exact same API, then it would work.\n\nI will cross post.\n. Posted here, https://github.com/christkv/node-mongodb-native/issues/296. Is it safe to close this issue here and continue on the mongodb tracker?\n. No problem, thanks for the detailed reports!\n. Thanks!\n. Thanks! I'll merge this as soon as I have time.\n. We're looking into adding replica set support in #25.\n. This feature is being added in another pull request, thanks!\n. Thanks! \n. Sorry I've been so slow on this, will merge this and push to npm this week.\n. It is currently stored as JSON, I did this originally because I had problems with saving Date objects in the session when the Date object had been patched by some library. That problem may no longer be relevant though.\n. There is now a `stringify` option which you can set to false to store your sessions as native types.\n. I'll look into this, it should work as I have put 0.4.x in the package.json.\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Hi, is this resolved?\n. Hey guys, I'll integrate this soon. I've been busy with school, sorry for the delay on this.\n. I've integrated this, thanks!\n. I'll look into this, thanks!\n. Yea, passing `auto_reconnect` as true in the `options` dictionary will enable mongodb auto_reconnect. I've updated the Readme to reflect this.\n. New version pushed to npm. Sorry I was so slow on this guys, school makes you a bad maintainer!\n. Everything is updated now.\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Thanks!\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. Thanks! Will push a new version to npm soon.\n. Version with updated node version requirements has been pushed to npm. Sorry for the delay!\n. I'll look into this.\n. Have you tried the `auto_reconnect` option?\n. I'll be updating this soon! Thanks!\n. Hi, would you mind adding tests for this and then I'll integrate it. Thanks!\n. Is this a feature you still need @codeglot ?\n. @bharatmeda once pull request #43 gets unit tests, I'll merge it in. I haven't had time to do it myself yet, will get to it. If you would like to do it that would be great as well.\n. Hi, this exists with the `clear_interval` option;\n. Can you check the time on both your client and server computers? The deletion check is against the server time.\n. connect-mongo will ask MongoDB to remove all the sessions that have expired before the current date. Since that call doesn't return a list of removed items, currently this isn't trivial to add.\n\nHowever, this could be added as an option, where we run a find() to get all the expired sessions before removing them, and call your callback on the list of those sessions.\n. Thanks!\n. This is now fixed, there is no longer a connect dependency. Please see the readme to pass in either express or connect when creating the store.\n. This is now fixed in 0.1.8 which is in NPM.\n. Did the `auto_reconnect` option not work?\n. Closing this, please reopen if there is a similar issue still.\n. Thanks!\n. Due to all the updates I've done recently, I'd like to verify everything passes tests. I'm going to do that soon and will publish to NPM once I'm happy that everything is stable.\n. Done!\n. Hey, I'll look into adding that. Thanks!\n. Haha, wait, this exists. I use it for the tests.\n\n```\n/**\n* Initialize MongoStore with the given `options`.\n* Calls `callback` when db connection is ready (mainly for testing purposes).\n* \n* @param {Object} options\n* @param {Function} callback\n* @api public\n*/\n\nfunction MongoStore(options, callback) {\n   ...\n}\n```\n\nJust pass `callback` as the second argument to MongoStore.\n. I've updated the Readme to reflect this, it was undocumented before.\n. I have not tested it with express 3 yet, I will once it is out of alpha.\n. Should we force the upgrade to 1.x? Maybe a range from 0.9 to 1.x?\n. Looks good. I have some other changes to integrate and I'll make a release fairly soon.\n. Sorry guys I've just had exams, will be back to my regular maintaining duties very soon. Hoping to clean everything up next week and merge in all the pulls. Thanks!\n. Moved to 1.0.x!\n. Hi, would you mind adding some unit tests for this? Then I can integrate.\n. Thanks for this! I'll look at integrating this this weekend. Any ideas on how to avoid those who don't use mongoose needed the dependency?\n. Ah, right on. Thanks. Will integrate and make a release soon.\n. This is merged!\n. Thanks for this!\n. Thanks for this! Would you mind adding a quick unit test for this? I'll be glad to merge it in with a test.\n. Thanks for this, closing now but please reopen if there is a documentation issue still.\n. I'll look into this, that shouldn't be null.\n. @aroman clear_interval is the time between connect-mongo checking for expired sessions. It isn't related to the expiry of individual sessions, just when they get cleaned up. I added that to fix expired sessions from sticking around in the database.\n\nI agree that we should follow connect-redis' model using the TTL feature. A pull request would be very welcome, as I haven't had much time to maintain this recently. I hope to get back in to the swing of things in the new year.\n\nThanks for your insight on this!\n. I've published a new version with this change!\n. Looks like the only reason it failed was db connection issues. I'll look into merging this on the weekend!\n. Merged!\n. I have updated to 1.2, does this still occur?\n. Ok cool, I'll close this then\n. This looks good, I'm going to verify the Travis build system and I'll merge this ASAP. Thanks so much!\n. I'll publish a new version soon.\n. Thanks for this, I'll take a look soon.\n. Merged! Thanks again.\n. I've fixed this and pushed version 0.3.1 to npm, thanks!\n. require('connect-mongo'), not './lib/connect-mongo' should do the trick.\n. Ah, yea. I also didn't have a `directories` entry in my package.json. I've pushed 0.3.2 to npm.\n. Check the system clock of both your server and client, make sure they are the same. The client could be immediately expiring its cookies if it has a wrong time.\n. Check your system time on your server and client. If they are too far apart\ncookies will be instantly expiring.\nOn Apr 14, 2013 10:40 AM, \"Ethan\" notifications@github.com wrote:\n\n> app.use express.methodOverride()\n> app.use express.cookieParser()\n> app.use express.session\n>   secret:'pansafe_authserver@pansafe'\n>   store: new MongoStore\n>      db: 'pansafe_authserver'\n>   cookie: {\n>             maxAge: 24 \\* 360000 # 24 hours\n>         }\n> \n> i got the same question. here i have a client with 127.0.0.1:3000, and a\n> server with 127.0.0.1:8000, when second request, the session will be a\n> new one without user info. i'm very confused!!! help me. TX\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/57#issuecomment-16352047\n> .\n. Thanks for this!\n. I merged a request which logs these errors.\n. Hey, would you mind adding some tests for this? I'd be happy to merge once that code path has a test.\n. I'll be able to merge this when tests get added to the pull, I don't have time right now to do it\n. Thanks for this!\n. Hey guys, I'll get to this ASAP. \n. Glad to hear there wasn't an issue with connect-mongo. Mind if I close this out?\n. Thanks for this. I'll bump the version and publish soon.\n. What kind of objects are in your session\n. From the error it sounds like you have something set in your session that MongoDB can't serialize\n. Something in the `stringify: false` path must be off. That hasn't been tested as much. I'll have to look into this.\n. Will do tonight, thanks.\n\nOn Tue, Sep 17, 2013 at 10:17 AM, tommedema notifications@github.comwrote:\n\n> @kcbanner https://github.com/kcbanner in that case, maybe you can\n> update the NPM repo?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/83#issuecomment-24591392\n> .\n. Thanks!\n. Thanks! I'll take a look at this ASAP\n. This is a bad idea. What if both apps write to the session at the same time?\n. Consider this scenario:\n1. Server A reads the session data\n2. Server B reads the session data\n3. Server A adds key `foo`\n4. Server B adds key `bar`\n5. Server A writes the session data\n6. Server B writes the session data\n7. You have lost the `foo` key.\n. The same problem applies though, one can erase the addition of the other:\n1. Server A reads the session data\n2. Server B reads the session data\n3. Server A adds key `mydomain1`\n4. Server B adds key `mydomain2`\n5. Server A writes the session data\n6. Server B writes the session data\n7. You have lost the `mydomain1` key.\n. Sure, when you guarantee that you will never have more than one concurrent request for a particular user across all servers that would be sharing this session, then it works. However, you cannot guarantee that, and so it doesn't work. MongoDB does not have transactions, so you cannot even detect the failure case in a reliable way.\n. You would also have to make sure that the cookie secret was shared between the node apps, or else they won't be able to correctly read the data.\n\nI still wouldn't recommend going this, because inevitably a user will visit both sites at once and there will be data loss.\n. Try using the master version from github instead of from npm for now, I'll be able to push a release soon.\n. I'll look at updating NPM tonight, sorry for the delay on this guys, I have\nbeen busy with other things\n\nOn Thu, Apr 10, 2014 at 9:23 AM, Linus Unneb\u00e4ck notifications@github.comwrote:\n\n> Please don't submit the fork to npm. If you need to use a working version,\n> use the following syntax in your package.json:\n> \n> \"connect-mongo\": \"mrzepinski/connect-mongo#2135988\"\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/103#issuecomment-40080050\n> .\n. Sorry guys. My IRL job is quite buys lately. Hopefully I can look at this\nsoon.\n\nOn Thu, Apr 24, 2014 at 5:35 PM, Marc-Andr\u00e9 B\u00e9langer <\nnotifications@github.com> wrote:\n\n> Ping @kcbanner https://github.com/kcbanner .\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/103#issuecomment-41335525\n> .\n. Yep, will take care of this on the weekend. I'll finally have time to sit\ndown and maintain this project!\n\nOn Fri, Apr 11, 2014 at 3:53 AM, Steve Lorimer notifications@github.comwrote:\n\n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/109\n> .\n. New version has been published! Sorry for the long wait guys. I'll try to keep up with pull requests on this project. \n\n@outrightmental I'd be happy to pass the maintainer baton on to you for this project if you'd like!\n. Ideally something should run periodically and prune dead sessions from the database.\n. I would suggest looking at the user agent of the request and skipping the session middleware if you do not want to create a session for them. However, I highly recommend expiring sessions. If you do not expire them, then as time goes to infinity, your session storage also goes to infinity.\n. How is that so\n. To solve that I would suggest implementing a password reset feature, via email. The fact is that if you never expire sessions, they are going to accumulate.\n. Isn't the real problem here that ensureIndex can be called before the connection is established? Shouldn't the fix be to push `_get_collection` callbacks onto an array and then flush them once the connection is established?\n. My personal preference is that defaults would be immutable\n. Hi guys! I'm very much alive, but haven't had time to work on this as I have moved away from using node.js for my projects. If someone would like to take over as maintainer of this repo I'd be happy to consider that!\n. You've been added!\n. It was originally generated with github's generator, we can disable it now.\n\nOn Sun, Dec 28, 2014 at 8:42 AM, J\u00e9r\u00f4me Desboeufs notifications@github.com\nwrote:\n\n> I don't know how these pages are generated.\n> \n> I asked to @kcbanner https://github.com/kcbanner if we could avoid\n> gh-pages.\n> Having a dedicated website is not really useful, and not hype anymore ;)\n> Do you agree?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/144#issuecomment-68212104\n> .\n. ",
    "bantic": "great, thanks for merging! I think you need to bump your version number (or possibly notify the npm registry somehow?) for the change to take effect...I still get an older one if I do an npm install connect-mongo\n. great, thanks for merging! I think you need to bump your version number (or possibly notify the npm registry somehow?) for the change to take effect...I still get an older one if I do an npm install connect-mongo\n. ",
    "strathausen": "There are checks missing if you don't provide a full url it will throw an error... working on it now.\n. There are checks missing if you don't provide a full url it will throw an error... working on it now.\n. ",
    "dr3am3r": "have the same issue after upgrade. node ver 0.4.9\n. was due to the wrong initialization, now works after changing to:\napp.use(express.session({ secret: \"secret\", store: new MongoStore({db: new Db('mydb', server_config, {})})}));\n. have the same issue after upgrade. node ver 0.4.9\n. was due to the wrong initialization, now works after changing to:\napp.use(express.session({ secret: \"secret\", store: new MongoStore({db: new Db('mydb', server_config, {})})}));\n. ",
    "Philmod": "I have the same issue, any solution?\n. I have the same issue, any solution?\n. ",
    "liamdon": "I also have this issue - downgrading to version 0.4.0 makes it disappear but I haven't identified the cause.\n. No problem, thanks for a great project.\n. I also have this issue - downgrading to version 0.4.0 makes it disappear but I haven't identified the cause.\n. No problem, thanks for a great project.\n. ",
    "mnichols": "I am getting this on node 0.6.14 with connect-mongodb 1.1.3..I'll try to fix with different init code and report back\n. i changed my connection to use the `url` setup and it seems to work. I am on heroku => mongolab.\n. I tried to use the db, username, password, port and host opts that are\nparsed out from the heroku MONGOLAB_URI. The parsing worked fine, but on an\napp that had little middleware the 'sessions' collection would be invoked\nby connect-mongo before it existed.\n\nOn Thu, Apr 26, 2012 at 10:50 PM, Casey Banner <\nreply@reply.github.com\n\n> wrote:\n> \n> What were your options when you weren't using url?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/issues/5#issuecomment-5372995\n. I am getting this on node 0.6.14 with connect-mongodb 1.1.3..I'll try to fix with different init code and report back\n. i changed my connection to use the `url` setup and it seems to work. I am on heroku => mongolab.\n. I tried to use the db, username, password, port and host opts that are\nparsed out from the heroku MONGOLAB_URI. The parsing worked fine, but on an\napp that had little middleware the 'sessions' collection would be invoked\nby connect-mongo before it existed.\n\nOn Thu, Apr 26, 2012 at 10:50 PM, Casey Banner <\nreply@reply.github.com\n\n> wrote:\n> \n> What were your options when you weren't using url?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/issues/5#issuecomment-5372995\n. ",
    "jacky1122": "i try as dr3am3r say. it really works. thanks\napp.use(express.session({ secret: \"secret\", store: new MongoStore({db: new Db('mydb', server_config, {})})}));\n. i try as dr3am3r say. it really works. thanks\napp.use(express.session({ secret: \"secret\", store: new MongoStore({db: new Db('mydb', server_config, {})})}));\n. ",
    "chaffneue": "MongoDB is installed from aptitude on ubuntu 10.10 - MongoDB shell version: 1.4.4\n\njson package for node-mongodb-native is \n\n{ \"name\" :            \"mongodb\"\n, \"description\" :     \"A node.js driver for MongoDB\"\n, \"version\" :         \"0.9.6-4\"\n, \"author\" :          \"Christian Amor Kvalheim christkv@gmail.com\"\n, \"contributors\" :  [ \"Nathan White nw@nwhite.net\",\n                      \"Adam Wiggins adam@heroku.com\",\n                      \"Ian Millington idmillington@googlemail.com\",\n                      \"Aaron Heckmann <aaron.heckmann+github@gmail.com>\",\n                      \"Ciaran Jessup ciaranj@gmail.com\",\n                      \"Christoph Pojer\",\n                      \"Erik Abele\",\n                      \"Henrik Johansson dahankzter@gmail.com\" ]\n, \"repository\" :    { \"type\" :  \"git\"\n                    , \"url\" :   \"http://github.com/christkv/node-mongodb-native.git\" }\n, \"bugs\" :          { \"mail\" :  \"node-mongodb-native@googlegroups.com\"\n                    , \"web\" :   \"http://github.com/christkv/node-mongodb-native/issues\" }\n, \"os\" :            [ \"linux\"\n                    , \"darwin\"\n                    , \"freebsd\" ]\n, \"main\":             \"./lib/mongodb/index\"\n, \"directories\" :   { \"lib\" : \"./lib/mongodb\" }\n, \"engines\" :       { \"node\" : \">=0.4.0\" }\n, \"scripts\": { \"install\" : \"bash ./install.sh\" }\n, \"licenses\" :    [ { \"type\" :  \"Apache License, Version 2.0\"\n                    , \"url\" :   \"http://www.apache.org/licenses/LICENSE-2.0\" } ]\n}\n. I guess I should make it clearer though.. This is in the case where mongo itself is gone (in my case the VPN to my server shut down - there's no physical connection to it at all as the mongodb is remote to my dev environment). The mongo version shouldn't matter, just the node side stuff. \n. I have installed the module from NPM, which does not include unit tests. The code that makes it fail is listed above .. here's the exact steps to reproduce include server config  (I have managed to do it on 4 separate VMs and this one at home).:\n\nUbuntu 10.04 and 10.10 both show this behaviour (these are fresh - never seen node or mongo before and all libs are installed as locals)\n\nsudo apt-get install build-essential\nsudo apt-get install libssl-dev\nsudo apt-get install curl\ncd /tmp\nwget http://nodejs.org/dist/node-v0.4.9.tar.gz\ntar xzpf node-v0.4.9.tar.gz\ncd node-v0.4.9/\nsudo ./configure\nsudo make \nsudo make install\ncd ~\nsudo curl http://npmjs.org/install.sh | sudo sh\nmkdir -p /node/test\ncd /node/test\nnpm install connect-mongo\nnano Test.js\n\n## type:\n\nvar sys = require('sys'),\nMongoStore = require('connect-mongo'),\n\n## test = new MongoStore({ db: 'mydatabase', host: '10.20.101.160', port: 27017 });\n\nopen a top session in a new window then type \nnode Test.js \ntimeout seems to be about 10-20 seconds with very high cpu use in the meantime..  \n\nScreencast of how the bug behaves here: \n\nhttp://screencast.com/t/3E19b7dV\n. ...and just did the unit tests with the git repo and npm installed the mongodb package.. same problem occurs there too, though it times out a little quicker in the test harness. \n. also - I'm using the following vmware appliances for this testing- you just run them in vmware - that might help get to the bottom of the problem faster:\n\nhttp://sourceforge.net/projects/thoughtpolicevm/files/Ubuntu/ubuntu-server-10.04/ubuntu-server-10.04-amd64.zip/download\nhttp://sourceforge.net/projects/thoughtpolicevm/files/Ubuntu/ubuntu-server-10.10/ubuntu-server-10.10-amd64.zip/download\n\nvmware has free playback called VMware player on Windows and linux \nget vmware fusion for OSX, there's a demo of it you can use for a short time. \n. Alright.. so now I'm wondering a couple of things \n\nCan I use a replacement mongodb driver with connect-mongo to avoid this issue? I'd like to steer clear of out of channel code if possible as this is going to be part of a more formal build process. \n\nHave you cross posted this to mongoDB already or should I do it?\n. I think we can close it if this bug doesn't apply to this project as well.. I'll follow up with the mongodb-native project. I'll give you an update if the bug remains after patching the dep. Thanks for the help!\n. MongoDB is installed from aptitude on ubuntu 10.10 - MongoDB shell version: 1.4.4\n\njson package for node-mongodb-native is \n\n{ \"name\" :            \"mongodb\"\n, \"description\" :     \"A node.js driver for MongoDB\"\n, \"version\" :         \"0.9.6-4\"\n, \"author\" :          \"Christian Amor Kvalheim christkv@gmail.com\"\n, \"contributors\" :  [ \"Nathan White nw@nwhite.net\",\n                      \"Adam Wiggins adam@heroku.com\",\n                      \"Ian Millington idmillington@googlemail.com\",\n                      \"Aaron Heckmann <aaron.heckmann+github@gmail.com>\",\n                      \"Ciaran Jessup ciaranj@gmail.com\",\n                      \"Christoph Pojer\",\n                      \"Erik Abele\",\n                      \"Henrik Johansson dahankzter@gmail.com\" ]\n, \"repository\" :    { \"type\" :  \"git\"\n                    , \"url\" :   \"http://github.com/christkv/node-mongodb-native.git\" }\n, \"bugs\" :          { \"mail\" :  \"node-mongodb-native@googlegroups.com\"\n                    , \"web\" :   \"http://github.com/christkv/node-mongodb-native/issues\" }\n, \"os\" :            [ \"linux\"\n                    , \"darwin\"\n                    , \"freebsd\" ]\n, \"main\":             \"./lib/mongodb/index\"\n, \"directories\" :   { \"lib\" : \"./lib/mongodb\" }\n, \"engines\" :       { \"node\" : \">=0.4.0\" }\n, \"scripts\": { \"install\" : \"bash ./install.sh\" }\n, \"licenses\" :    [ { \"type\" :  \"Apache License, Version 2.0\"\n                    , \"url\" :   \"http://www.apache.org/licenses/LICENSE-2.0\" } ]\n}\n. I guess I should make it clearer though.. This is in the case where mongo itself is gone (in my case the VPN to my server shut down - there's no physical connection to it at all as the mongodb is remote to my dev environment). The mongo version shouldn't matter, just the node side stuff. \n. I have installed the module from NPM, which does not include unit tests. The code that makes it fail is listed above .. here's the exact steps to reproduce include server config  (I have managed to do it on 4 separate VMs and this one at home).:\n\nUbuntu 10.04 and 10.10 both show this behaviour (these are fresh - never seen node or mongo before and all libs are installed as locals)\n\nsudo apt-get install build-essential\nsudo apt-get install libssl-dev\nsudo apt-get install curl\ncd /tmp\nwget http://nodejs.org/dist/node-v0.4.9.tar.gz\ntar xzpf node-v0.4.9.tar.gz\ncd node-v0.4.9/\nsudo ./configure\nsudo make \nsudo make install\ncd ~\nsudo curl http://npmjs.org/install.sh | sudo sh\nmkdir -p /node/test\ncd /node/test\nnpm install connect-mongo\nnano Test.js\n\n## type:\n\nvar sys = require('sys'),\nMongoStore = require('connect-mongo'),\n\n## test = new MongoStore({ db: 'mydatabase', host: '10.20.101.160', port: 27017 });\n\nopen a top session in a new window then type \nnode Test.js \ntimeout seems to be about 10-20 seconds with very high cpu use in the meantime..  \n\nScreencast of how the bug behaves here: \n\nhttp://screencast.com/t/3E19b7dV\n. ...and just did the unit tests with the git repo and npm installed the mongodb package.. same problem occurs there too, though it times out a little quicker in the test harness. \n. also - I'm using the following vmware appliances for this testing- you just run them in vmware - that might help get to the bottom of the problem faster:\n\nhttp://sourceforge.net/projects/thoughtpolicevm/files/Ubuntu/ubuntu-server-10.04/ubuntu-server-10.04-amd64.zip/download\nhttp://sourceforge.net/projects/thoughtpolicevm/files/Ubuntu/ubuntu-server-10.10/ubuntu-server-10.10-amd64.zip/download\n\nvmware has free playback called VMware player on Windows and linux \nget vmware fusion for OSX, there's a demo of it you can use for a short time. \n. Alright.. so now I'm wondering a couple of things \n\nCan I use a replacement mongodb driver with connect-mongo to avoid this issue? I'd like to steer clear of out of channel code if possible as this is going to be part of a more formal build process. \n\nHave you cross posted this to mongoDB already or should I do it?\n. I think we can close it if this bug doesn't apply to this project as well.. I'll follow up with the mongodb-native project. I'll give you an update if the bug remains after patching the dep. Thanks for the help!\n. ",
    "dylang": "hi kcbanner - any chance these changes will be live on npm soon?  I have to constantly babysit [Doodle or Die](http://doodle.no.de) when it has more than ~300 simultaneous players because the errors raised.\n. hi kcbanner - any chance these changes will be live on npm soon?  I have to constantly babysit [Doodle or Die](http://doodle.no.de) when it has more than ~300 simultaneous players because the errors raised.\n. ",
    "jplock": "+1\n. +1\n. ",
    "Skinney": "+1\n. +1\n. ",
    "meritt": "With release Connect 2.0 it very important issue. Please merge this.\n. With release Connect 2.0 it very important issue. Please merge this.\n. ",
    "jesseditson": "+1 - Connect 2.0 breaks connect-mongo, and you have the connect dependency set to >=, so all fresh installs of connect-mongo are broken as of now. Please merge ASAP, I've either got to remove this package or check in my node_modules to get around this.\n. +1 - Connect 2.0 breaks connect-mongo, and you have the connect dependency set to >=, so all fresh installs of connect-mongo are broken as of now. Please merge ASAP, I've either got to remove this package or check in my node_modules to get around this.\n. ",
    "w33ble": "+1\n. +1\n. ",
    "josmas": "same problem here, when db is back running it never reconnects. Thought it was a problem with driver auto_reconnect option but I guess it is this.\n\nUPDATE: I have just realised that the default value for auto_connect is false, unlike that of mongoose which is true.\n\nCannot see it in the docs but if you pass the following it will work:\n\n<pre><code>\nvar conf = {\n  db: {\n    db: 'your_db'\n    auto_connect: true,\n    //....\n  }\n}\n</code>\n</pre>\n\n\n...nothing like reading the code! :)\n. same problem here, when db is back running it never reconnects. Thought it was a problem with driver auto_reconnect option but I guess it is this.\n\nUPDATE: I have just realised that the default value for auto_connect is false, unlike that of mongoose which is true.\n\nCannot see it in the docs but if you pass the following it will work:\n\n<pre><code>\nvar conf = {\n  db: {\n    db: 'your_db'\n    auto_connect: true,\n    //....\n  }\n}\n</code>\n</pre>\n\n\n...nothing like reading the code! :)\n. ",
    "wereHamster": "are you using node >= 0.5.0 ?\n. I tested with 0.4.12 and there url.parse() also returns the port as a string. So I think the tests have been failing for a long time and nobody noticed.\n. I can confirm that it works fine on 0.6.1 and 0.6.2. There is no need to restrict the engine version to node-0.4.x.\n. Duplicate of #15, #16, #17, #18, #20.\n. I don't use authentication and I'm seeing this error as well. I can trigger it reliably by trying to open the webpage very quickly after starting the server. If I wait two seconds before reloading the webpage everything works. The actual error is: no open connections at Db._executeQueryCommand (node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1705). I'm using connect-mongo version 0.3.2.\n. are you using node >= 0.5.0 ?\n. I tested with 0.4.12 and there url.parse() also returns the port as a string. So I think the tests have been failing for a long time and nobody noticed.\n. I can confirm that it works fine on 0.6.1 and 0.6.2. There is no need to restrict the engine version to node-0.4.x.\n. Duplicate of #15, #16, #17, #18, #20.\n. I don't use authentication and I'm seeing this error as well. I can trigger it reliably by trying to open the webpage very quickly after starting the server. If I wait two seconds before reloading the webpage everything works. The actual error is: no open connections at Db._executeQueryCommand (node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1705). I'm using connect-mongo version 0.3.2.\n. ",
    "jedwood": "No. I believe it's 0.4.11\n\nAnd maybe it's something else with our setup. \n\nThanks,\n-Jed\n\nOn Nov 12, 2011, at 10:07 AM, Tomas Carneckyreply@reply.github.com wrote:\n\n> are you using node >= 0.5.0 ?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/issues/15#issuecomment-2718025\n. Interesting. Maybe most people are using the parameter signature instead of a URL string.  \n\nThanks for following up.\n\n-Jed\n\nOn Nov 12, 2011, at 10:32 AM, Tomas Carneckyreply@reply.github.com wrote:\n\n> I tested with 0.4.12 and there url.parse() also returns the port as a string. So I think the tests have been failing for a long time and nobody noticed.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/issues/15#issuecomment-2718145\n. No. I believe it's 0.4.11\n\nAnd maybe it's something else with our setup. \n\nThanks,\n-Jed\n\nOn Nov 12, 2011, at 10:07 AM, Tomas Carneckyreply@reply.github.com wrote:\n\n> are you using node >= 0.5.0 ?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/issues/15#issuecomment-2718025\n. Interesting. Maybe most people are using the parameter signature instead of a URL string.  \n\nThanks for following up.\n\n-Jed\n\nOn Nov 12, 2011, at 10:32 AM, Tomas Carneckyreply@reply.github.com wrote:\n\n> I tested with 0.4.12 and there url.parse() also returns the port as a string. So I think the tests have been failing for a long time and nobody noticed.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/issues/15#issuecomment-2718145\n. ",
    "sylvinus": "same issue here with node 0.4.12\n. I have the same issue. Not sure if it's specific to connect-mongo though.\n. same issue here with node 0.4.12\n. I have the same issue. Not sure if it's specific to connect-mongo though.\n. ",
    "TertiumQuid": "Same issue here with node 0.6.2, and the parseInt trick fixed it.\n. Same issue here with node 0.6.2, and the parseInt trick fixed it.\n. ",
    "troygoode": "can we get a new npm rev pushed out with this fix?\n. kcbanner: I see npm has connect-mongo updated to 0.1.7, but package.json is still 0.1.6 here on github. did you forget to push?\n. any updates on this?\n. can we get a new npm rev pushed out with this fix?\n. kcbanner: I see npm has connect-mongo updated to 0.1.7, but package.json is still 0.1.6 here on github. did you forget to push?\n. any updates on this?\n. ",
    "deedubs": "@kcbanner you around for a push to NPM? \n. Haha no problems!  Thanks for connect-mongo and let me know if you need any co-maintainers.\n. @kcbanner you around for a push to NPM? \n. Haha no problems!  Thanks for connect-mongo and let me know if you need any co-maintainers.\n. ",
    "elspoono": "It looks like the package.json is specifically indicating the 0.4.x node engine, and that's what causes npm to reject installation of it.\n. Hm, yeah, I dunno why it's specific to the .4.x branch, couldn't find any comments on it.\n\nI went ahead and sent kcbanner a pull request.\n\nhttps://github.com/kcbanner/connect-mongo/pull/18\n. hah, I'm too slow.\n. It looks like the package.json is specifically indicating the 0.4.x node engine, and that's what causes npm to reject installation of it.\n. Hm, yeah, I dunno why it's specific to the .4.x branch, couldn't find any comments on it.\n\nI went ahead and sent kcbanner a pull request.\n\nhttps://github.com/kcbanner/connect-mongo/pull/18\n. hah, I'm too slow.\n. ",
    "wavded": "right, was hoping to get that updated, works fine with 0.4.x\n. added a pull request #17\n. nice, well at least the word is out :)\n. Thanks!\n. while waiting for this to be pulled in, you are welcome to include it as I am for now by linking directly to my repo.  haven't noticed any issues on 0.6:\n\n``` json\n\"connect-mongo\": \"https://github.com/wavded/connect-mongo/tarball/master\"\n```\n. right, was hoping to get that updated, works fine with 0.4.x\n. added a pull request #17\n. nice, well at least the word is out :)\n. Thanks!\n. while waiting for this to be pulled in, you are welcome to include it as I am for now by linking directly to my repo.  haven't noticed any issues on 0.6:\n\n``` json\n\"connect-mongo\": \"https://github.com/wavded/connect-mongo/tarball/master\"\n```\n. ",
    "niftylettuce": "+1\n. No problem, @wavded provided us with tmp package, thanks for the update.\n. +1\n. Nice thanks bro!\n. Thanks bro\n. +1\n. No problem, @wavded provided us with tmp package, thanks for the update.\n. +1\n. Nice thanks bro!\n. Thanks bro\n. ",
    "srirangan": "Many similar pull request already exist\n. Many similar pull request already exist\n. ",
    "shorrockin": "Just had this. The problem does appear to be auto_reconnect (and was how I resolved it). A while back the mongodb drivers used to default this to false, as of 0.9.X I believe - they now default it to true. This delta between the driver default and the connect-mongo default had me puzzled for some time.\n\nSo - if you then use this module, it'll set it back to false - and your app will be unable to reconnect when mongo is restarted. Perhaps a better strategy is to default it to undefined so that the driver itself can use whatever it thinks the best default is. Or just set it true, I'm not sure what scenario you wouldn't want to reconnect. \n. Just had this. The problem does appear to be auto_reconnect (and was how I resolved it). A while back the mongodb drivers used to default this to false, as of 0.9.X I believe - they now default it to true. This delta between the driver default and the connect-mongo default had me puzzled for some time.\n\nSo - if you then use this module, it'll set it back to false - and your app will be unable to reconnect when mongo is restarted. Perhaps a better strategy is to default it to undefined so that the driver itself can use whatever it thinks the best default is. Or just set it true, I'm not sure what scenario you wouldn't want to reconnect. \n. ",
    "AlonKaduri": "Same issue with, is it resolved? (and how?)\n. Never mind - I just saw that the auto_reconnect option is false by default, changing it to true solved the problem.\n. Same issue with, is it resolved? (and how?)\n. Never mind - I just saw that the auto_reconnect option is false by default, changing it to true solved the problem.\n. ",
    "lazd": "Just to add to the conversation: This doesn't seem to happen when using mongoose and the `mongoose_connection` option. I restart mongo, then on the next request, it opens the connections back up and things work as normal.\n. Is this still an issue in the latest connect-mongo? Please try to reproduce it and close this issue if you are unable. Thanks!\n. I cannot reproduce this issue with the following versions:\n\n```\nexpress: 3.1.0,\nconnect: 2.7.3,\nconnect-mongo: 0.3.2,\nmongoose: 3.5.3\n```\n\nWhen using connect-mongo with mongoose, **it does not open any additional connections**.\n\n``` javascript\nvar db = mongoose.createConnection(dblink);\n\n// ...\n\napp.use(express.session({\n    store: new MongoStore({\n        mongoose_connection: db,\n        stringify: false\n    })\n}));\n```\n\nAnd in my Mongo logs:\n\n```\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63850 #1203 (1 connection now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63851 #1204 (2 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63852 #1205 (3 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63853 #1206 (4 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63854 #1207 (5 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63855 #1208 (6 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63856 #1209 (7 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63857 #1210 (8 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63858 #1211 (9 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63859 #1212 (10 connections now open)\n```\n\nTrying to same thing with MemoryStore results in the same 10 connections, which shows that this issue is invalid.\n\nPlease provide some code and logs to support your claim. @kcbanner, I nominate this issue for closure as it is misleading.\n. No wonder I was confused -- I saw the _exact_ language you wrote in your issue \"Database name OR fully instantiated node-mongo-native object\" in kcbanner/connect-mongo's README (which has not been updated since 2 months before this issue was filed), so it sounded like you wanted to use `db` _in addition to_ `mongoose_connection`, and that, when you did use `mongoose_connection`, you saw it opening additional connections.\n\nGlad this is closed then :)\n. @fabriziomoscon: I assume it would use the `expires` field in the root of the document, as the stringified session would also contain an `expires` property which MongoDB wouldn't immediately have access to.\n\nSince connnect-mongo sets the `expires` property of the cookie object explicitly, we end up with all the data we need for it to function correctly. Because of that, I don't think this issue causing any critical failures, it's just throwing a little duplicate data in there.\n. @mmagi I can see how this would happen. We're modifying `session.cookie` itself, instead of copying it before changing that value. The `stringify`/`parse` solution works, but we could also copy its properties to a new object ala `_.extend`. I'll look into this.\n\n@fabriziomoscon Right, connect/cookie has a getter on `cookie.data`, and `toJSON()` essentially calls that getter by returning `this.data`. I don't think it would make sense to directly fetch `cookie.data` given there is an interface to it via `toJSON()` (what if it changed to `this.datax`?), if that's what you're suggesting.\n. @lukaszfiszer Yes, it fixes that bug (which one of my previous PRs introduced). See https://github.com/kcbanner/connect-mongo/issues/76 for more info.\n. @kcbanner, can you bump the version and publish this please?\n. @kcbanner, can we get this pushed please?\n. This was fixed last month when [connect-mongo 0.4.0](https://npmjs.org/package/connect-mongo/0.4.0) was pushed to npm. @tommedema, you can close this issue now.\n. Just to add to the conversation: This doesn't seem to happen when using mongoose and the `mongoose_connection` option. I restart mongo, then on the next request, it opens the connections back up and things work as normal.\n. Is this still an issue in the latest connect-mongo? Please try to reproduce it and close this issue if you are unable. Thanks!\n. I cannot reproduce this issue with the following versions:\n\n```\nexpress: 3.1.0,\nconnect: 2.7.3,\nconnect-mongo: 0.3.2,\nmongoose: 3.5.3\n```\n\nWhen using connect-mongo with mongoose, **it does not open any additional connections**.\n\n``` javascript\nvar db = mongoose.createConnection(dblink);\n\n// ...\n\napp.use(express.session({\n    store: new MongoStore({\n        mongoose_connection: db,\n        stringify: false\n    })\n}));\n```\n\nAnd in my Mongo logs:\n\n```\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63850 #1203 (1 connection now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63851 #1204 (2 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63852 #1205 (3 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63853 #1206 (4 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63854 #1207 (5 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63855 #1208 (6 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63856 #1209 (7 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63857 #1210 (8 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63858 #1211 (9 connections now open)\nThu Mar 28 11:05:50 [initandlisten] connection accepted from 127.0.0.1:63859 #1212 (10 connections now open)\n```\n\nTrying to same thing with MemoryStore results in the same 10 connections, which shows that this issue is invalid.\n\nPlease provide some code and logs to support your claim. @kcbanner, I nominate this issue for closure as it is misleading.\n. No wonder I was confused -- I saw the _exact_ language you wrote in your issue \"Database name OR fully instantiated node-mongo-native object\" in kcbanner/connect-mongo's README (which has not been updated since 2 months before this issue was filed), so it sounded like you wanted to use `db` _in addition to_ `mongoose_connection`, and that, when you did use `mongoose_connection`, you saw it opening additional connections.\n\nGlad this is closed then :)\n. @fabriziomoscon: I assume it would use the `expires` field in the root of the document, as the stringified session would also contain an `expires` property which MongoDB wouldn't immediately have access to.\n\nSince connnect-mongo sets the `expires` property of the cookie object explicitly, we end up with all the data we need for it to function correctly. Because of that, I don't think this issue causing any critical failures, it's just throwing a little duplicate data in there.\n. @mmagi I can see how this would happen. We're modifying `session.cookie` itself, instead of copying it before changing that value. The `stringify`/`parse` solution works, but we could also copy its properties to a new object ala `_.extend`. I'll look into this.\n\n@fabriziomoscon Right, connect/cookie has a getter on `cookie.data`, and `toJSON()` essentially calls that getter by returning `this.data`. I don't think it would make sense to directly fetch `cookie.data` given there is an interface to it via `toJSON()` (what if it changed to `this.datax`?), if that's what you're suggesting.\n. @lukaszfiszer Yes, it fixes that bug (which one of my previous PRs introduced). See https://github.com/kcbanner/connect-mongo/issues/76 for more info.\n. @kcbanner, can you bump the version and publish this please?\n. @kcbanner, can we get this pushed please?\n. This was fixed last month when [connect-mongo 0.4.0](https://npmjs.org/package/connect-mongo/0.4.0) was pushed to npm. @tommedema, you can close this issue now.\n. ",
    "wmhilton": "I _highly_ recommend changing the default value of auto_reconnect to true. My site was down when I showed it to a client (probably because OpenShift idled MongoDB); it was embarrassing.\n. :-)\n. I _highly_ recommend changing the default value of auto_reconnect to true. My site was down when I showed it to a client (probably because OpenShift idled MongoDB); it was embarrassing.\n. :-)\n. ",
    "pareshgehlot": "I have the same issue...\n\nMy node app suddenly is not able to connect to mongo db\n\nIt continuously gives \"no open connections\" error\n\nEven though my mongo db service is active.\n\nAm not facing this with mongoose, but am facing it with \"connect-mongo\"\n\nOnce this issue rises its ugly head, if I restart my node app, connect-mongo is again able to connect to mongo db again.\n1. I don't know the exact reason, why it is happening? want to know the root cause\n2. I don't know, why, only after restarting node app, connect-mongo is again able to connect to db? \n3. I tried \"auto_reconnect\" : \"true\", but in this case what happens is, my website continuously keeps on loading, as though the mongodb service is active, somehow connect-mongo looses db connection, and is unable to connect.\n\nThis is really causing a bad impact on my site.\n\nI request everyone to help.\n\nEvery help will be greatly appreciable.\n\nThanks in advance \n. I have the same issue...\n\nMy node app suddenly is not able to connect to mongo db\n\nIt continuously gives \"no open connections\" error\n\nEven though my mongo db service is active.\n\nAm not facing this with mongoose, but am facing it with \"connect-mongo\"\n\nOnce this issue rises its ugly head, if I restart my node app, connect-mongo is again able to connect to mongo db again.\n1. I don't know the exact reason, why it is happening? want to know the root cause\n2. I don't know, why, only after restarting node app, connect-mongo is again able to connect to db? \n3. I tried \"auto_reconnect\" : \"true\", but in this case what happens is, my website continuously keeps on loading, as though the mongodb service is active, somehow connect-mongo looses db connection, and is unable to connect.\n\nThis is really causing a bad impact on my site.\n\nI request everyone to help.\n\nEvery help will be greatly appreciable.\n\nThanks in advance \n. ",
    "ghost": "What's the status of this? Are you going to add this?\n. N:P\n. It happens when new sesssions were created. I try to make you a small example that reproduce the bug.\n. Works with 0.10.4\n. Try change uri in config file. I had same problem. Cos was \"mongodb://localhost/mydb\", needed \"mongodb://localhost/myDb\". Maybe you create two similar databeses, like me?\n  \"port\": 3000,\n  \"mongoose\": {\n    \"uri\": \"mongodb://localhost/myDb\"\n. What's the status of this? Are you going to add this?\n. N:P\n. It happens when new sesssions were created. I try to make you a small example that reproduce the bug.\n. Works with 0.10.4\n. Try change uri in config file. I had same problem. Cos was \"mongodb://localhost/mydb\", needed \"mongodb://localhost/myDb\". Maybe you create two similar databeses, like me?\n  \"port\": 3000,\n  \"mongoose\": {\n    \"uri\": \"mongodb://localhost/myDb\"\n. ",
    "blindsey": "Sorry man, I don't have time to add the tests and we have moved our session\ninto redis anyway.\n\nOn Mon, Jul 2, 2012 at 1:53 PM, samuelgilman <\nreply@reply.github.com\n\n> wrote:\n> \n> What's the status of this? Are you going to add this?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/pull/25#issuecomment-6719498\n\n## \n\nBen Lindsey | ben.lindsey@vungle.com | (415) 595-4325\n. Sorry man, I don't have time to add the tests and we have moved our session\ninto redis anyway.\n\nOn Mon, Jul 2, 2012 at 1:53 PM, samuelgilman <\nreply@reply.github.com\n\n> wrote:\n> \n> What's the status of this? Are you going to add this?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/pull/25#issuecomment-6719498\n\n## \n\nBen Lindsey | ben.lindsey@vungle.com | (415) 595-4325\n. ",
    "BharatMeda": "Hello @kcbanner, Can you please add this feature? We are trying replica set and currently stuck because session store only considers one host/port.\n. Thank you. For replica set, we used the snippet from bf7298f and our functionality worked fine (connect-mongo version 0.1.9; express version 2.5.9)\nFor testing, \n- logged in with a user\n- brought down primary server so that one of the secondary becomes primary\n- flow did not break as the session was available\n\nI am new to community development and am hesitant to do commits yet.\n. Hello @kcbanner, Can you please add this feature? We are trying replica set and currently stuck because session store only considers one host/port.\n. Thank you. For replica set, we used the snippet from bf7298f and our functionality worked fine (connect-mongo version 0.1.9; express version 2.5.9)\nFor testing, \n- logged in with a user\n- brought down primary server so that one of the secondary becomes primary\n- flow did not break as the session was available\n\nI am new to community development and am hesitant to do commits yet.\n. ",
    "msied": "Seconding the need for this feature. I am also new to much of this and would appreciate replica set support in master. Without it, my product's production-ready is in question.\n. Seconding the need for this feature. I am also new to much of this and would appreciate replica set support in master. Without it, my product's production-ready is in question.\n. ",
    "syzer": "+1\n. i did it, do u want to see pull request\ni have implemented using mongoose connection\n. +1, what a shame\n. i use #130 \n. @joaovieira  does work for both: sepl-set and single mongo instance?\nI have stating environment with replica set, and development with 1 mogo\n. Thanks!\nI looked to #100. I like it\nFirst i was shocked that `typeof ==object` but then I looked again\nand earlier it rules out `options.db=null`, \n\nbut since #130 works I will keep it.\n\nBTW: `interval: 120000`? whats that?\nDid you wanted to wait till connection is resolved?\n. @arimus I had to use google translate for #421 :)\n. i use something like\n#130 \non a production environment, works fine.\n. you really want me to take like hour to check out this ?\n. +1\n. i did it, do u want to see pull request\ni have implemented using mongoose connection\n. +1, what a shame\n. i use #130 \n. @joaovieira  does work for both: sepl-set and single mongo instance?\nI have stating environment with replica set, and development with 1 mogo\n. Thanks!\nI looked to #100. I like it\nFirst i was shocked that `typeof ==object` but then I looked again\nand earlier it rules out `options.db=null`, \n\nbut since #130 works I will keep it.\n\nBTW: `interval: 120000`? whats that?\nDid you wanted to wait till connection is resolved?\n. @arimus I had to use google translate for #421 :)\n. i use something like\n#130 \non a production environment, works fine.\n. you really want me to take like hour to check out this ?\n. ",
    "lukezheng": "Is this still being integrated?\n. Is this still being integrated?\n. ",
    "mariusa": "Thanks!\n. Note it doesn't work properly. I've set it to 604800 (on week), but it will delete all sessions when the node app restarts.\n. Thanks for your time. For now I removed this option, and will come back later to this potential issue with more debug info.\n. Thanks!\n. Note it doesn't work properly. I've set it to 604800 (on week), but it will delete all sessions when the node app restarts.\n. Thanks for your time. For now I removed this option, and will come back later to this potential issue with more debug info.\n. ",
    "superlou": "With more reading, I guess connect-mongo doesn't actually handle deleting of expired sessions, it just provides the variable to compare against.  It is up to the app to cull old sessions?\n. With more reading, I guess connect-mongo doesn't actually handle deleting of expired sessions, it just provides the variable to compare against.  It is up to the app to cull old sessions?\n. ",
    "nowherenearithaca": "Was this ever implemented?  thx!\n. Was this ever implemented?  thx!\n. ",
    "jdesboeufs": "Too specific.\nAnswer: re-implement your custom `clear` method.\n. Sorry but I'm cleaning old issues ;)\n. I close this issue.\nI can re-open it if needed.\n. Any news here?\n. I'm cleaning issues and PR.\nI can re-open this PR if needed.\n. Removed from package.json!\n. You should try again with last version.\nI can re-open this issue if needed.\n. Hello,\n\nYou should upgrade your connect-mongo version!\nLe lun. 29 ao\u00fbt 2016 \u00e0 05:07, my1GitHub notifications@github.com a \u00e9crit :\n\n> Hi, everyone.this error:\n> connect to mongo success\n> { [MongoError: driver is incompatible with this server version] name:\n> 'MongoError' }\n> \n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:242\n> throw message;\n> ^\n> Error: Error setting TTL index on collection : sessions\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\lib\\connect-mongo.js:162:23\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1430:36\n> at __executeInsertCommand\n> (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1829:12)\n> at Db._executeInsertCommand\n> (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1930:5)\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1427:14\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1560:7\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:162:16\n> at commandHandler\n> (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:706:16)\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1806:9\n> at Server.Base._callHandler\n> (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:442:41)\n> \n> and this is my package\n> \"body-parser\": \"^1.13.2\",\n> \"connect-mongo\": \"^0.4.1\",\n> \"cookie-parser\": \"^1.3.5\",\n> \"debug\": \"~2.2.0\",\n> \"ejs\": \"~2.4.1\",\n> \"express\": \"~4.13.4\",\n> \"express-session\": \"^1.13.0\",\n> \"mongodb\": \"^2.2.8\",\n> \"morgan\": \"~1.7.0\",\n> \"serve-favicon\": \"~2.3.0\"\n> How can i to sovle it?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jdesboeufs/connect-mongo/issues/65#issuecomment-243022742,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABLJgGDPEkgcG_lL_kQXVN1pRkk70usuks5qkkzTgaJpZM4AlvIe\n> .\n. Too complex behavior.\nAnswer: implement your own Store (it's easy!)\n. @techjeffharris Can you try with the upcoming version? (master)\n. I'm not able to reproduce your issue :(\n. Since `v0.5.0` MongoStore take care of that.\nAnd callback in constructor has been removed ;)\n. I don't know. @techjeffharris is using `~0.4.1` -> `0.4.2`.\nBut if you are right, this issue may have been fixed with `0.5.0`.\n. @malixsys Using a callback must now be avoided since `connect-mongo` will wait for the database connection.\n\n@techjeffharris You can upgrade to 0.5.3, mongoose support has been improved and I need feedback :)\n. Obsolete.\n. Client connection will be rewritten soon.\nI close this PR for now.\n. Your problem must be related to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native).\nI close this issue. I can re-open it if needed.\n. I can re-open this issue if needed.\n. No related to connect-mongo.\n. This feature should take place in express-session.\nI can re-open this PR if needed.\n. Is it really a problem?\nMongoDB doesn't persist those attributes and you can override the serialize function with `serialize` option, or set `stringify` option to `true`.\n. Fixed.\n. It's the way `connect-mongo` work yet!\nI can re-open this issue if needed.\n. I'll try to fix the problem in the proper way.\nLet's continue the discussion in #80.\n. Cookie must be signed.\nThis behavior is not related to `connect-mongo` but to `connect` and more recently to `express-session` => `cookie-signature`.\n. I think we can consider this project is abandonned.\nHope its author is alive!\n\nFork?\n. Maybe it's time for a kind of convergence with similar projects?\nIs connect-mongostore ahead of connect-mongo?\n. Sure, for those using mongoose and express ;)\nFor my projects using them, I use a basic mongoose model with a wrapper, very similar to mongoose-session.\n\nCurrent code is compatible with Express and Connect.\nThere is no perfect strategy but it seems acceptable to support both mongodb-native and mongoose.\n\nDay is over in France. Good night! ;)\n. Ok! @kcbanner can you add me as a collaborator of this repository?\nThere are many things to do if we want to keep this project alive.\n. @techjeffharris Can you develop your problem in an issue? :)\n@kcbanner Thanks! I'll do my best.\n. Obsolete.\n. I need more informations!\nYou should submit a new issue.\n. To support connect 3.x is clearly the next step.\nFor now, I'm trying to clean issues and PR.\n. A problem with TTL index?\n. This lib depends on [mongodb](https://github.com/mongodb/node-mongodb-native) which depends on components built with [node-gyp](https://github.com/TooTallNate/node-gyp).\nYour problem is not directly related to connect-mongo so you should get a ride on TooTallNate/node-gyp#168.\n\nGood luck!\n. I'm working on it! ;)\n. FYI : https://github.com/aheckmann/muri\n. I don't know. ;)\nBut I'm not planning to parse connection strings in `connect-mongo`. I prefer let this to `mongodb.MongoClient`.\n\nI will release a preview version before the weekend.\n. Yeah.\n- **options.url** [\\+ options.mongoOptions] => passthrough to `mongodb.MongoClient`\n- **options.mongoose_connection** => re-use existing connection\n- **options.db** (native `mongodb.Db`) => open new connection or re-use existing one\n- Sugar options to build **options.url** (host, port, ssl, username, password)\n. Ok it's just devDependencies ;)\n. `stringify` should be stronger than `serialize` and `unserialize` functions in my mind.\nCan you find a way to extract cookie behavior from defaultSerializer? I think it would be easier to implement its own serializer/unserializer couple without that.\nThanks.\n. I don't understand the improvement. Can you explain?\nA named function + a condition block + a try/catch block seems a hard way ;)\n. If I merge your other PR #136 you will be able to implement your own behavior?\nI understand we must choose between #136 et #137 ;)\n. Ok! We must rethink the way connect-mongo deals with errors...\nCan you try to trace the error which happen?\n. For now the job is to fix issues and clean code, without breaking things.\nAs `connect-mongo` is a very little component, we must be reasonable with dependencies.\n\nWe use `MongoClient` from `mongodb`, introduced in version 1.2, and some `Db` APIs which are stable since version 0.9.\n`debug` is a very stable library, particularly for the basic usage we have.\n. Your problem is not related to `connect-mongo`.\nYou should use a `passport` callback and call directly `MongoStore.destroy(sid, callback)`.\n. A session is set even if the user is not authenticated.\nWhile a user is logged in, `passport` put some data in the current session.\nWhen the user go out, `passport` cleans those data, but let the session.\n\nBut if needed, you can manually destroy the current session:\n- Add option `unset: 'destroy'` in [your session middleware constructor](https://github.com/SnowdreamCMS/nodejs-gulp-template/blob/master/app.js#L49)\n- Update your logout code:\n\n``` js\napp.get('/logout', function(req, res) {\n    req.logout();\n    req.session = null;\n    res.redirect('/');\n});\n```\n. `connect-mongo` accept `db` option as a `String` or as a `mongodb.Db` instance.\nIt's well documented in the Readme.\n\nFYI, mongoose expose a `mongodb.Db` instance through `mongoose.connection.db`.\n. Thanks ;)\n. I don't know how these pages are generated.\n\nI asked to @kcbanner if we could avoid gh-pages.\nHaving a dedicated website is not really useful, and not hype anymore ;)\nDo you agree?\n. gh-pages are now disabled!\nWe have now a sexy 404 error page ;)\n\n@ilanbiala Don't hesitate to make changes on the doc!\n\n@kcbanner We count on you to drop the url and update the description to:\n\n> MongoDB session store for Connect and Express\n\n:)\n. Next big improvements may be:\n- ~~Ensure we support Express 5.0~~\n- ~~Support upcoming native MongoDB driver 2.0~~\n- Support upcoming Mongoose 4.0\n- ~~Support Node.js 0.11~~\n- Support Node.js 0.12 and why not io.js\n- Support `koa/session`\n- Contribute to `expressjs/session`\n- Rewrite tests\n- Improve code quality\n- ...\n\nBut above all, we need to collect feedback from developers.\nDuring the last months, connect-mongo has been removed from many bootstraping / open-source projects, and the repository has now competitors.\nI think we don't want to write additional features \"just for fun\". We want users.\n. Yes!\n. Hi,\n\nWhat is your `connect-mongo` version?\nHave you an Exception for us?\n. First, you should upgrade to `connect-mongo` `0.5.2`.\n. `req.session` doesn't have a `destroy()` method.\nThe method you found is only exposed to the middleware `express-session`.\n\nYou should read my last comment in #140, it may be your answer ;)\n. There is a big mistake in my previous message:\n`req.session` has a `destroy()` method!\n\nNew version `0.5.3` fixes your problem ;)\n. `mongoose.connect()` return a `Mongoose` instance and not a `Connection` instance.\n\nYou must choose between **basic usage** and **advanced usage** in our Readme, but not mix them.\n. I need more informations.\n. What do you mean when you say that?\n\n> this code breaks my app and nothing after this middleware gets run\n. The middleware is waiting for the connection...\nMaybe there is an error to catch.\n. Can you submit a test which reproduce your problem?\n. As you want.\nYou describe a very basic usage, exactly the same I use in production, so I'm a bit confused.\n. Your code is complicated.\n`connect-mongo` is natively able to wait for the connection.\n\nBut if you still want to keep this logic, just replace `db.connection` by `mongoose.connection`.\nYour `db` variable must equal to `undefined`.\n. Can you `console.log()` the value of `db.connection.readyState`, inside your callback?\n. I'm not able to reproduce your problem.\nCan you write a regular test or submit a small codebase in a GitHub repo?\n. 4.0.0-rc1 is supported ;)\nI've updated all the things.\n. If you don't rely on mongoose, `connect-mongo` will throw an exception which may crash your app.\nIf the server connection is disrupted and `autoReconnect` is `true`, try again!\nOtherwise you have a problem :D\n\nI'll fix this _issue_ as soon as possible.\n. Yes!\n. Since v1.0.0 is upcoming, I close this issue.\nFeel free to create a new one if the problem stay.\n. The feature is already implemented!\nLe mer. 21 janv. 2015 \u00e0 18:43, Rafael Cardoso notifications@github.com a\n\u00e9crit :\n\n> There are plans to implement Session.touch() interface?\n> I'm really enjoying this middleware but I need to use this feature.\n> \n> Reference: https://github.com/expressjs/session#sessiontouch\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/149.\n. The feature you describe, `session.touch()`, already work if `resave: true`.\n\nBut yes, `express-session` 1.10.1 introduces a new API `store.touch()`, to force touching even if `resave` is set to `false`.\n\nSo let's go ;)\n. I can't add tests and release today.\nHave fun with `master` branch :)\n. Thx!\n. Thx ;)\nNew version published!\n. Interesting but very advanced feature!\nMaybe you should prefer `touchAfter` which seems more consistent.\n\nTo release I need tests and documentation ;)\n. Fixed by #154.\n. Your first middleware is useless since `connect-mongo` already waits for connection.\nAnd above all, it is badly designed.\n\nWhen you declare a middleware, it will be used on each request. But when you call `session()` which effectively returns a middleware, the content of your first middleware has not been called yet.\n. Each `connect-mongo` deals with one db connection.\nI think you should try another design, or another tool.\n. Some notes:\n- `touch()` method is no more a simple \"touch\", it resaves all the session\n- `lastModified` should not be included in the session object but at the document level, so we don't have to provide specific serialize/unserialize functions\n- As `touchAfter` is a very advanced feature, I think we don't want a large explanation in the README with is become too big since `0.5` and `0.6`.\n- Lint errors must be fixed before :)\n. Ok great!\n. I've just updated your code to set `touchAfter` option in seconds, which is consistent with the `ttl` option.\n. Published!\n\nLe mar. 24 mars 2015 \u00e0 21:56, Buu Nguyen notifications@github.com a\n\u00e9crit :\n\n> Please release this as the documentation has been updated. I've been\n> debugging as touchAfter doesn't work at all even though I followed the\n> documentation to the letter. Turn out it's not on NPM yet.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/pull/154#issuecomment-85687836\n> .\n. Dropping test support = Dropping support\nBe sure I will not break compatibility for my pleasure :)\n. And if a developer want to store a `lastModified` property in the session? :)\n. Can you give us some details? (MongoDB version, configuration, mongoose version, driver version, Node.js version...)\n. https://github.com/kcbanner/connect-mongo#remove-expired-sessions\nYou have the choice!\n. I need more informations: options used, versions...\n. Can you check if the TTL index has been set?\nIf yes, you have a problem with MongoDB.\n. ```\n$ mongo\n$ use yourDb\n$ db.sessions.getIndexes()\n```\n\nAnd copy/paste the result!\n. Most of the connection strategies are not tested yet :(\nI think the problem is related to `node-mongodb-native` 2.0.\n. I'm on it.\n. How can we detect the state of this existing Db instance in mongodb driver 2.0?\n. Your connect-mongo is too old!\n. You should use this:\n\n``` js\nvar mongoStore = new MongoStore({\n    mongooseConnection: mongoose.connection\n});\n```\n. ASAP!\nI want to fix these connection issues and release right after.\nMaybe tomorrow.\n. On my local mac it works too but not on a production environment.\nI looked into `mongodb` code, and it appears that the connection is not really established when we call `connectionReady`.\nWe have to find another way to detect these connection/connection states.\n. This warning is not related to connect-mongo but to express-session or early version of connect.\nSo I close this issue :)\n. Did you find a solution?\n. Probably an uncaught exception somewhere...\nDid you call `mongoose.connect()` before padding `mongoose.connection`?\n. You should test with upcoming v1.0.0, on master branch.\nI'm ready to re-open the issue if the problem occur again.\n. The `get` interface must be used with the identifier generated by connect-mongo, not by your custom one.\nI think your attribute `sessionid` duplicates internal `_id`.\n. You are free to submit a PR for that :)\nI've no time to investigate the problem for now, but `connect-mongo` has diverged since many months.\nCan you try to pass a TingoDB `Db` instance to `connect-mongo` `db` option?\n. The problem may have been fixed in upcoming version (1.0.0).\n. TingoDB is not officially supported by connect-mongo.\nIf someone want to fix that, I'll be happy to accept a PR.\n. @CodeLenny It will be fixed in `1.3.2`. I'm publishing it right now!\n. `connect-mongo` doesn't use mongoose abstraction layer.\nBut you can try something like this:\n\n``` js\nmongoose.connection.db.collection('sessions').find(...)\n```\n. What is `mongoDb.client` in your code?\n. Yes it is intended since the session id is initially created by `express-session`, which is independent from MongoDB.\nThis session id can also be hashed by `connect-mongo` (optional), so there is no way to turn back to an ObjectId, which is more predictable.\n. I think the `eventEmitters` option is too much.\nCan you quickly adapt your PR to directly emit events?\n\nI want to release a final version 0.9.0 asap, and start working on a 1.0.0, dropping mongodb 1.2, node.js 0.8 et old connect and express versions.\n. Ok I'll just drop your two last commits!\n. Merged!\n. Thx!\nI'm back ;)\n. It will break node.js 0.8 support ;)\n\nI can merge this in a \"next\" branch, which prefigure the upcoming v1.0.0, or you add a simple test to detect if `unref()` exists.\n. Yeah!\n. You can drop it!\nLe mar. 14 juil. 2015 \u00e0 23:31, Behcet notifications@github.com a \u00e9crit :\n\n> Not sure if this file is required anymore at all since package.json\n> defines main as \"./lib/connect-mongo\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/pull/190#issuecomment-121396446\n> .\n. Done.\n. Hi,\n\nYour problem concerns `express-session` above all.\n`connect-mongo` is completely unable to create a new session id.\n\nTry to set `saveUninitialized` to `false`.\n\nIn your use case you should also remove `db`, `autoReconnect` and `touchAfter` options.\n. Ok.\nTry to submit your problem [here](https://github.com/expressjs/session) and please reference this issue ;)\n. Hi,\n\nYou can enable the debug mode prefixing the node command with `DEBUG=connect-mongo`.\n\nThere is one big problem in your code: the callback has no chance to be called!\nThe second argument of MongoStore creation has been dropped since `v0.5.0`.\n\nBut you can emulate an equivalent behavior like that:\n\n``` js\n(new MongoStore({ ... })).on('connected', function () {});\n```\n\nCurrent versions of `connect-mongo` are able to manage their connection state internally, so this callback is completely optional today.\n\nHope it helps.\n. On which connection strategy?\n. Connection options must be passed into `mongoOptions` key.\n`server`, `username`, `password` and `auto_reconnect` aren't valid options for constructor.\n. And above all, the connection callback in the constructor doesn't exist anymore (since `0.5.0`).\n. All connection options available can be found here: https://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html\nContent of `mongoOptions` will be passed to the MongoClient constructor.\n. Can i close?\n. `kerberos` in an optional dependency.\n`connect-mongo` -> `mongodb` -> `mongodb-core` -> `kerberos`.\n\nThe problem is not related to `connect-mongo`. Are you sure the installation failed?\nMaybe it's just a warning.\n. Ok it's not related to `connect-mongo`.\n`connect-flash` should be fixed to ensure session has been saved (whatever the session store used).\n. I'm back!\nI need tests to accept this, and a README update.\n\nI'll release 0.9 right now and 1.0 in the following days so be patient and submit a new PR ;)\n. I need test. Sorry for that, and the delay.\n. See #194 \n. There is no concept of user in `connect-mongo`.\nBut if you save a property `user` in the session, you can easily write a _remove request_ through the MongoDB driver.\n\nExample:\n\n``` js\ndb.sessions.remove({ 'session.user': VALUE });\n```\n. You will need to set `stringify` option to `false`.\n. @jmcollin78: The `db` instance is accessible through `store.db`.\n\n@Madhu94: You can't set any default attribute in the constructor.\nYou have to execute your own request if you want to interact with an hypothetic `user` attribute.\n. Thank you!\nI will release `v1.0.0` before the end of the week.\n. No problem with code coverage ;)\n. Fixed in d09953c4a1ab8ee49c211b472fd9d03f0859932a.\nLanding ;)\n. Fixed in 1.0.0.\nGive me your feedback ;)\n. Fixed in `1.0.0`.\n. Maybe this?\nhttps://github.com/kcbanner/connect-mongo#remove-expired-sessions\n. Oops!\nI go home and I fix that...\nLe jeu. 17 d\u00e9c. 2015 \u00e0 19:43, Gregory Koberger notifications@github.com a\n\u00e9crit :\n\n> [image: :+1:] This took my site down when I deployed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/208#issuecomment-165544009\n> .\n. What is your node version?\nIf it's under 4.0 you must use `require('connect-mongo/es5')`.\nLe ven. 18 d\u00e9c. 2015 \u00e0 04:26, mosquito1994 notifications@github.com a\n\u00e9crit :\n\n> I'm sorry, I'm new in node I've got a problem said 'use of const in strict\n> mode' with connect-mongo when trying to support connect-flashI check my\n> code according to your readme guidance but it doesn't workHow can I solve\n> the problem please?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/209.\n. OK. Working on it!\n. I added a test to check ES5 version loading.\nAlso updated the way we deal with those versions + published 1.0.2.\n. @rogercastaneda You must use the ES5 version, and use a connection string.\n. You should try this:\n\n``` js\napp.use(session({\n    secret: 'foo',\n    store: new MongoStore(\n        {\n            mongooseConnection: mongoose.connection,\n            collection: 'session'\n        }\n    )\n}));\n```\n. :dancers: \n. No compatibility issue!\nIt's just a `mongodb` optional dependency which fail to build...\n\nAs it's not directly related to `connect-mongo`, if you want (and you should) to improve that output, please warn `mongodb` package maintainers.\n. Can you eventually add a small test for the existence of `this.db`?\n. Any idea?\n. Hi,\nThe `MongoStore` emits some events: at least `set`, `touch`, `destroy`. It's more appropriate than your workaround ;)\nBut it could be useful to know when a session ID is persisted for the first time.\nThe `rawResponse` returned by the `upsert` may help in this case. We must investigate.\n. @james-s-turner Session creation hook has been added.\n. `autoRemove: false`.\nThen you can define your own cleanup tasks.\nYou just have to query the session collection with `{ expires: { $lt: new Date() } }`.\n\nIf you find an elegant and efficient way to collect expiring session ids, I'll be happy to accept your PR.\n. Yes of course. I've updated the README.md.\n. ?\n. TingoDB is not officially supported by `connect-mongo`.\nIf someone want to fix that, I'll be happy to accept a PR.\n. Yes!\n. Ok thx!\n. Can you just explain why it produces a different behavior?\nThx!\n. Published as `v1.2.1`. Thx!!\n. `connect-mongo` just exposes some basic accessors to `express-session`.\nIf you have issues with `resave: false` you must investigate on the `express-session` side.\n. Fixed in upcoming `1.3.2`.\n. Feel free to add NeDB or TingoDB support :)\r\nI close this issue for now.. It had been fixed in `1.3.2`.\nSee #228 ;)\nLe jeu. 28 juil. 2016 \u00e0 23:51, nik mel-nik-ov notifications@github.com a\n\u00e9crit :\n\n> I am trying to store sessions, however I get the following Error:\n> \n> TypeError: Cannot read property 'upserted' of undefined\n> \n> The usage of connect-mongo looks as follows:\n> \n> import session from 'express-session';\n> const MongoStore = require('connect-mongo')(session);\n> \n> app.use(session({\n>   secret: 'SECRET',\n>   store: new MongoStore({ url: 'mongodb://mongo:27017/sessions' }),\n>   saveUninitialized: true,\n>   resave: false\n> }));\n> \n> I also tried using: mongooseConnection = mongoose.connections[0] and\n> still the same error.\n> \n> At the same time, I can see that session entries are being created on\n> every page reload with the following contents:\n> \n> {\n>   \"_id\": \"zO68C8OuARTUblw3EqHfUikR_IIHRaQq\",\n>   \"session\": \"{\\\"cookie\\\": \\\"originalMaxAge\\\":null,\\\"expires\\\":null,\\\"httpOnly\\\":true,\\\"path\\\":\\\"/\\\"    }}\",\n>   \"expires\": new Date(1470779765287)\n> }\n> \n> And the expiration date is set to 14 days from the creation timestamp\n> (default value)\n> \n> Package versions used:\n> \n> \"cookie-parser\": \"^1.4.3\",\n> \"connect-mongo\": \"^1.3.1\",\n> \"express\": \"~4.0.0\",\n> \"express-session\": \"^1.14.0\",\n> \n> Mongo v3.2.4\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/230, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABLJgO2T5H_rDfjucJM-yCr4cG-lY9sJks5qaSRKgaJpZM4JXrkT\n> .\n. This is already a \"devDependency\".\n. If your runtime is not ES6 compliant, you can refer to this:\nhttps://github.com/kcbanner/connect-mongo#old-nodejs-versions-compatibility\n. You can try something like this:\n\n``` js\nimport connectMongo from 'connect-mongo';\nimport session from 'express-session';\n\nconst MongoStore = connectMongo(session);\n```\n. Versions not supported anymore.\r\nPlease upgrade to 2.0.0!. Why not use a middleware for that? Or passport?\n\nSerialize/unserialize is related to session transformation.\nLe sam. 15 oct. 2016 \u00e0 19:18, breeswish notifications@github.com a \u00e9crit :\n\n> We want to store only uid in the session and populate the user object\n> every time session is read from the database (so that we only maintain\n> exactly one copy of User).\n> \n> To avoid unnecessary modifications, we plan to use serialize and\n> unserialize hook (in serialize, replace the user object with user id; in\n> unserialize, replace user id with user object). However currently\n> unserialize is sync, which means we cannot perform a query inside\n> unserialize.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jdesboeufs/connect-mongo/issues/243, or mute the\n> thread\n> https://github.com/notifications/unsubscribe-auth/ABLJgIfx8SAW-Lc5wPwMBPKjK8ZvLWoMks5q0QrsgaJpZM4KXwr2\n> .\n. `node@3.3.1` doesn't support ES6 syntax.\n\nPlease read:\nhttps://github.com/jdesboeufs/connect-mongo/blob/master/README.md#old-nodejs-versions-compatibility\nLe lun. 31 oct. 2016 \u00e0 08:35, Alireza Ghaffari notifications@github.com a\n\u00e9crit :\n\n> Hi I have the following error\n> \n> node_modules/connect-mongo/src/index.js:29\n> unserialize: options.unserialize || (x => x),\n> ^^\n> node@v3.3.1\n> express@4.14.0\n> mongoose@4.6.5\n> mongodb@2.2.11\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jdesboeufs/connect-mongo/issues/245, or mute the\n> thread\n> https://github.com/notifications/unsubscribe-auth/ABLJgNOe9wDOK8EGW0RRPFtabWpr-Lgiks5q5ZokgaJpZM4Kkvri\n> .\n. The `destroy` event is emitted when your session manager (`express-session`) call `destroy()` but not when the session expires.. Hello,\n\ndebug is no more used in connect-mongo.\nYou should upgrade your connect-mongo version ;)\nLe mer. 14 d\u00e9c. 2016 \u00e0 08:23, Abhishek Todmal <notifications@github.com> a\n\u00e9crit :\n\n> We are using \"connect-mongo\": \"~0.8\"\n> and suddenly it is throwing these error messages\n>\n> `node_modules/connect-mongo/node_modules/debug/debug.js:126\n> debug.color = selectColor(namespae);\n> ^\n> ReferenceError: namespae is not defined\n> at createDebug\n> (/home/ubuntu/workspace/lms/node_modules/connect-mongo/node_modules/debug/debug.js:126:29)\n> at Object.\n> (/home/ubuntu/workspace/lms/node_modules/connect-mongo/lib/connect-mongo.js:10:29)\n> at Module._compile (module.js:460:26)\n> at Object.Module._extensions..js (module.js:478:10)\n> at Module.load (module.js:355:32)\n> at Function.Module._load (module.js:310:12)\n> at Function.cls_wrapMethod\n> (/home/ubuntu/workspace/lms/node_modules/newrelic/lib/shimmer.js:256:38)\n> at Module.require (module.js:365:17)\n> at require (module.js:384:17)\n> at Object. (/home/ubuntu/workspace/lms/config/express.js:8:18)\n> at Module._compile (module.js:460:26)\n> at Object.Module._extensions..js (module.js:478:10)\n> at Module.load (module.js:355:32)\n> at Function.Module._load (module.js:310:12)\n> at Function.cls_wrapMethod\n> (/home/ubuntu/workspace/lms/node_modules/newrelic/lib/shimmer.js:256:38)\n> at Module.require (module.js:365:17)\n> at require (module.js:384:17)\n> at Object. (/home/ubuntu/workspace/lms/server.js:36:22)\n> at Module._compile (module.js:460:26)\n> at Object.Module._extensions..js (module.js:478:10)\n> at Module.load (module.js:355:32)\n> at Function.Module._load (module.js:310:12)\n> error: Forever detected script exited with code: 1\n> error: Script restart attempt #1\n> <https://github.com/jdesboeufs/connect-mongo/issues/1>``\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/jdesboeufs/connect-mongo/issues/249>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/ABLJgOhOIz8wZo7q8SYBcHPbpPxZS6Doks5rH5mKgaJpZM4LMnBp>\n> .\n>\n. Just use `.map()`. There is no difference between the two implementations. You just assign your instance reference to a scoped variable.. Very difficult to admit :/\nYou must have an unattended side-effect.\n\nCan you describe your environment?\nLe jeu. 5 janv. 2017 \u00e0 15:31, ragulka <notifications@github.com> a \u00e9crit :\n\n> There is no difference between the two implementations. You just assign\n> your instance reference to a scoped variable.\n>\n> You'd assume that's true. However, if you pass in the db url (not an\n> already existing DB connection), a new db connection is opened every time.\n> This is evidenced by my experience in making this small change in our\n> production app. We're down from 1500 db connections to 40, and a leaky\n> memory to a stable memory usage.\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/jdesboeufs/connect-mongo/issues/252#issuecomment-270656843>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABLJgLC8sMPuNcU6ElPG1Uokmjoraa04ks5rPP6wgaJpZM4Lbuns>\n> .\n>\n. Can you add some test?. Two unique indexes seems a bit expensive for basic session storage.\r\nI think this module has already too much advanced features but if there is other people interested, why not.. OK working on it. We already have two PR but it needs further investigation for prior-3.0 MongoDB versions.. Published `2.0.0`. Thx @ilarioengler @jeresig \r\nAre we OK if we are stuck with prior-3.0 MongoDB versions?. @jeresig I merged @ilarioengler PR \ud83e\udd47 . Too specific.\nAnswer: re-implement your custom `clear` method.\n. Sorry but I'm cleaning old issues ;)\n. I close this issue.\nI can re-open it if needed.\n. Any news here?\n. I'm cleaning issues and PR.\nI can re-open this PR if needed.\n. Removed from package.json!\n. You should try again with last version.\nI can re-open this issue if needed.\n. Hello,\n\nYou should upgrade your connect-mongo version!\nLe lun. 29 ao\u00fbt 2016 \u00e0 05:07, my1GitHub notifications@github.com a \u00e9crit :\n\n> Hi, everyone.this error:\n> connect to mongo success\n> { [MongoError: driver is incompatible with this server version] name:\n> 'MongoError' }\n> \n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:242\n> throw message;\n> ^\n> Error: Error setting TTL index on collection : sessions\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\lib\\connect-mongo.js:162:23\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1430:36\n> at __executeInsertCommand\n> (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1829:12)\n> at Db._executeInsertCommand\n> (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1930:5)\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1427:14\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1560:7\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:162:16\n> at commandHandler\n> (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:706:16)\n> at\n> E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1806:9\n> at Server.Base._callHandler\n> (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:442:41)\n> \n> and this is my package\n> \"body-parser\": \"^1.13.2\",\n> \"connect-mongo\": \"^0.4.1\",\n> \"cookie-parser\": \"^1.3.5\",\n> \"debug\": \"~2.2.0\",\n> \"ejs\": \"~2.4.1\",\n> \"express\": \"~4.13.4\",\n> \"express-session\": \"^1.13.0\",\n> \"mongodb\": \"^2.2.8\",\n> \"morgan\": \"~1.7.0\",\n> \"serve-favicon\": \"~2.3.0\"\n> How can i to sovle it?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jdesboeufs/connect-mongo/issues/65#issuecomment-243022742,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABLJgGDPEkgcG_lL_kQXVN1pRkk70usuks5qkkzTgaJpZM4AlvIe\n> .\n. Too complex behavior.\nAnswer: implement your own Store (it's easy!)\n. @techjeffharris Can you try with the upcoming version? (master)\n. I'm not able to reproduce your issue :(\n. Since `v0.5.0` MongoStore take care of that.\nAnd callback in constructor has been removed ;)\n. I don't know. @techjeffharris is using `~0.4.1` -> `0.4.2`.\nBut if you are right, this issue may have been fixed with `0.5.0`.\n. @malixsys Using a callback must now be avoided since `connect-mongo` will wait for the database connection.\n\n@techjeffharris You can upgrade to 0.5.3, mongoose support has been improved and I need feedback :)\n. Obsolete.\n. Client connection will be rewritten soon.\nI close this PR for now.\n. Your problem must be related to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native).\nI close this issue. I can re-open it if needed.\n. I can re-open this issue if needed.\n. No related to connect-mongo.\n. This feature should take place in express-session.\nI can re-open this PR if needed.\n. Is it really a problem?\nMongoDB doesn't persist those attributes and you can override the serialize function with `serialize` option, or set `stringify` option to `true`.\n. Fixed.\n. It's the way `connect-mongo` work yet!\nI can re-open this issue if needed.\n. I'll try to fix the problem in the proper way.\nLet's continue the discussion in #80.\n. Cookie must be signed.\nThis behavior is not related to `connect-mongo` but to `connect` and more recently to `express-session` => `cookie-signature`.\n. I think we can consider this project is abandonned.\nHope its author is alive!\n\nFork?\n. Maybe it's time for a kind of convergence with similar projects?\nIs connect-mongostore ahead of connect-mongo?\n. Sure, for those using mongoose and express ;)\nFor my projects using them, I use a basic mongoose model with a wrapper, very similar to mongoose-session.\n\nCurrent code is compatible with Express and Connect.\nThere is no perfect strategy but it seems acceptable to support both mongodb-native and mongoose.\n\nDay is over in France. Good night! ;)\n. Ok! @kcbanner can you add me as a collaborator of this repository?\nThere are many things to do if we want to keep this project alive.\n. @techjeffharris Can you develop your problem in an issue? :)\n@kcbanner Thanks! I'll do my best.\n. Obsolete.\n. I need more informations!\nYou should submit a new issue.\n. To support connect 3.x is clearly the next step.\nFor now, I'm trying to clean issues and PR.\n. A problem with TTL index?\n. This lib depends on [mongodb](https://github.com/mongodb/node-mongodb-native) which depends on components built with [node-gyp](https://github.com/TooTallNate/node-gyp).\nYour problem is not directly related to connect-mongo so you should get a ride on TooTallNate/node-gyp#168.\n\nGood luck!\n. I'm working on it! ;)\n. FYI : https://github.com/aheckmann/muri\n. I don't know. ;)\nBut I'm not planning to parse connection strings in `connect-mongo`. I prefer let this to `mongodb.MongoClient`.\n\nI will release a preview version before the weekend.\n. Yeah.\n- **options.url** [\\+ options.mongoOptions] => passthrough to `mongodb.MongoClient`\n- **options.mongoose_connection** => re-use existing connection\n- **options.db** (native `mongodb.Db`) => open new connection or re-use existing one\n- Sugar options to build **options.url** (host, port, ssl, username, password)\n. Ok it's just devDependencies ;)\n. `stringify` should be stronger than `serialize` and `unserialize` functions in my mind.\nCan you find a way to extract cookie behavior from defaultSerializer? I think it would be easier to implement its own serializer/unserializer couple without that.\nThanks.\n. I don't understand the improvement. Can you explain?\nA named function + a condition block + a try/catch block seems a hard way ;)\n. If I merge your other PR #136 you will be able to implement your own behavior?\nI understand we must choose between #136 et #137 ;)\n. Ok! We must rethink the way connect-mongo deals with errors...\nCan you try to trace the error which happen?\n. For now the job is to fix issues and clean code, without breaking things.\nAs `connect-mongo` is a very little component, we must be reasonable with dependencies.\n\nWe use `MongoClient` from `mongodb`, introduced in version 1.2, and some `Db` APIs which are stable since version 0.9.\n`debug` is a very stable library, particularly for the basic usage we have.\n. Your problem is not related to `connect-mongo`.\nYou should use a `passport` callback and call directly `MongoStore.destroy(sid, callback)`.\n. A session is set even if the user is not authenticated.\nWhile a user is logged in, `passport` put some data in the current session.\nWhen the user go out, `passport` cleans those data, but let the session.\n\nBut if needed, you can manually destroy the current session:\n- Add option `unset: 'destroy'` in [your session middleware constructor](https://github.com/SnowdreamCMS/nodejs-gulp-template/blob/master/app.js#L49)\n- Update your logout code:\n\n``` js\napp.get('/logout', function(req, res) {\n    req.logout();\n    req.session = null;\n    res.redirect('/');\n});\n```\n. `connect-mongo` accept `db` option as a `String` or as a `mongodb.Db` instance.\nIt's well documented in the Readme.\n\nFYI, mongoose expose a `mongodb.Db` instance through `mongoose.connection.db`.\n. Thanks ;)\n. I don't know how these pages are generated.\n\nI asked to @kcbanner if we could avoid gh-pages.\nHaving a dedicated website is not really useful, and not hype anymore ;)\nDo you agree?\n. gh-pages are now disabled!\nWe have now a sexy 404 error page ;)\n\n@ilanbiala Don't hesitate to make changes on the doc!\n\n@kcbanner We count on you to drop the url and update the description to:\n\n> MongoDB session store for Connect and Express\n\n:)\n. Next big improvements may be:\n- ~~Ensure we support Express 5.0~~\n- ~~Support upcoming native MongoDB driver 2.0~~\n- Support upcoming Mongoose 4.0\n- ~~Support Node.js 0.11~~\n- Support Node.js 0.12 and why not io.js\n- Support `koa/session`\n- Contribute to `expressjs/session`\n- Rewrite tests\n- Improve code quality\n- ...\n\nBut above all, we need to collect feedback from developers.\nDuring the last months, connect-mongo has been removed from many bootstraping / open-source projects, and the repository has now competitors.\nI think we don't want to write additional features \"just for fun\". We want users.\n. Yes!\n. Hi,\n\nWhat is your `connect-mongo` version?\nHave you an Exception for us?\n. First, you should upgrade to `connect-mongo` `0.5.2`.\n. `req.session` doesn't have a `destroy()` method.\nThe method you found is only exposed to the middleware `express-session`.\n\nYou should read my last comment in #140, it may be your answer ;)\n. There is a big mistake in my previous message:\n`req.session` has a `destroy()` method!\n\nNew version `0.5.3` fixes your problem ;)\n. `mongoose.connect()` return a `Mongoose` instance and not a `Connection` instance.\n\nYou must choose between **basic usage** and **advanced usage** in our Readme, but not mix them.\n. I need more informations.\n. What do you mean when you say that?\n\n> this code breaks my app and nothing after this middleware gets run\n. The middleware is waiting for the connection...\nMaybe there is an error to catch.\n. Can you submit a test which reproduce your problem?\n. As you want.\nYou describe a very basic usage, exactly the same I use in production, so I'm a bit confused.\n. Your code is complicated.\n`connect-mongo` is natively able to wait for the connection.\n\nBut if you still want to keep this logic, just replace `db.connection` by `mongoose.connection`.\nYour `db` variable must equal to `undefined`.\n. Can you `console.log()` the value of `db.connection.readyState`, inside your callback?\n. I'm not able to reproduce your problem.\nCan you write a regular test or submit a small codebase in a GitHub repo?\n. 4.0.0-rc1 is supported ;)\nI've updated all the things.\n. If you don't rely on mongoose, `connect-mongo` will throw an exception which may crash your app.\nIf the server connection is disrupted and `autoReconnect` is `true`, try again!\nOtherwise you have a problem :D\n\nI'll fix this _issue_ as soon as possible.\n. Yes!\n. Since v1.0.0 is upcoming, I close this issue.\nFeel free to create a new one if the problem stay.\n. The feature is already implemented!\nLe mer. 21 janv. 2015 \u00e0 18:43, Rafael Cardoso notifications@github.com a\n\u00e9crit :\n\n> There are plans to implement Session.touch() interface?\n> I'm really enjoying this middleware but I need to use this feature.\n> \n> Reference: https://github.com/expressjs/session#sessiontouch\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/149.\n. The feature you describe, `session.touch()`, already work if `resave: true`.\n\nBut yes, `express-session` 1.10.1 introduces a new API `store.touch()`, to force touching even if `resave` is set to `false`.\n\nSo let's go ;)\n. I can't add tests and release today.\nHave fun with `master` branch :)\n. Thx!\n. Thx ;)\nNew version published!\n. Interesting but very advanced feature!\nMaybe you should prefer `touchAfter` which seems more consistent.\n\nTo release I need tests and documentation ;)\n. Fixed by #154.\n. Your first middleware is useless since `connect-mongo` already waits for connection.\nAnd above all, it is badly designed.\n\nWhen you declare a middleware, it will be used on each request. But when you call `session()` which effectively returns a middleware, the content of your first middleware has not been called yet.\n. Each `connect-mongo` deals with one db connection.\nI think you should try another design, or another tool.\n. Some notes:\n- `touch()` method is no more a simple \"touch\", it resaves all the session\n- `lastModified` should not be included in the session object but at the document level, so we don't have to provide specific serialize/unserialize functions\n- As `touchAfter` is a very advanced feature, I think we don't want a large explanation in the README with is become too big since `0.5` and `0.6`.\n- Lint errors must be fixed before :)\n. Ok great!\n. I've just updated your code to set `touchAfter` option in seconds, which is consistent with the `ttl` option.\n. Published!\n\nLe mar. 24 mars 2015 \u00e0 21:56, Buu Nguyen notifications@github.com a\n\u00e9crit :\n\n> Please release this as the documentation has been updated. I've been\n> debugging as touchAfter doesn't work at all even though I followed the\n> documentation to the letter. Turn out it's not on NPM yet.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/pull/154#issuecomment-85687836\n> .\n. Dropping test support = Dropping support\nBe sure I will not break compatibility for my pleasure :)\n. And if a developer want to store a `lastModified` property in the session? :)\n. Can you give us some details? (MongoDB version, configuration, mongoose version, driver version, Node.js version...)\n. https://github.com/kcbanner/connect-mongo#remove-expired-sessions\nYou have the choice!\n. I need more informations: options used, versions...\n. Can you check if the TTL index has been set?\nIf yes, you have a problem with MongoDB.\n. ```\n$ mongo\n$ use yourDb\n$ db.sessions.getIndexes()\n```\n\nAnd copy/paste the result!\n. Most of the connection strategies are not tested yet :(\nI think the problem is related to `node-mongodb-native` 2.0.\n. I'm on it.\n. How can we detect the state of this existing Db instance in mongodb driver 2.0?\n. Your connect-mongo is too old!\n. You should use this:\n\n``` js\nvar mongoStore = new MongoStore({\n    mongooseConnection: mongoose.connection\n});\n```\n. ASAP!\nI want to fix these connection issues and release right after.\nMaybe tomorrow.\n. On my local mac it works too but not on a production environment.\nI looked into `mongodb` code, and it appears that the connection is not really established when we call `connectionReady`.\nWe have to find another way to detect these connection/connection states.\n. This warning is not related to connect-mongo but to express-session or early version of connect.\nSo I close this issue :)\n. Did you find a solution?\n. Probably an uncaught exception somewhere...\nDid you call `mongoose.connect()` before padding `mongoose.connection`?\n. You should test with upcoming v1.0.0, on master branch.\nI'm ready to re-open the issue if the problem occur again.\n. The `get` interface must be used with the identifier generated by connect-mongo, not by your custom one.\nI think your attribute `sessionid` duplicates internal `_id`.\n. You are free to submit a PR for that :)\nI've no time to investigate the problem for now, but `connect-mongo` has diverged since many months.\nCan you try to pass a TingoDB `Db` instance to `connect-mongo` `db` option?\n. The problem may have been fixed in upcoming version (1.0.0).\n. TingoDB is not officially supported by connect-mongo.\nIf someone want to fix that, I'll be happy to accept a PR.\n. @CodeLenny It will be fixed in `1.3.2`. I'm publishing it right now!\n. `connect-mongo` doesn't use mongoose abstraction layer.\nBut you can try something like this:\n\n``` js\nmongoose.connection.db.collection('sessions').find(...)\n```\n. What is `mongoDb.client` in your code?\n. Yes it is intended since the session id is initially created by `express-session`, which is independent from MongoDB.\nThis session id can also be hashed by `connect-mongo` (optional), so there is no way to turn back to an ObjectId, which is more predictable.\n. I think the `eventEmitters` option is too much.\nCan you quickly adapt your PR to directly emit events?\n\nI want to release a final version 0.9.0 asap, and start working on a 1.0.0, dropping mongodb 1.2, node.js 0.8 et old connect and express versions.\n. Ok I'll just drop your two last commits!\n. Merged!\n. Thx!\nI'm back ;)\n. It will break node.js 0.8 support ;)\n\nI can merge this in a \"next\" branch, which prefigure the upcoming v1.0.0, or you add a simple test to detect if `unref()` exists.\n. Yeah!\n. You can drop it!\nLe mar. 14 juil. 2015 \u00e0 23:31, Behcet notifications@github.com a \u00e9crit :\n\n> Not sure if this file is required anymore at all since package.json\n> defines main as \"./lib/connect-mongo\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/pull/190#issuecomment-121396446\n> .\n. Done.\n. Hi,\n\nYour problem concerns `express-session` above all.\n`connect-mongo` is completely unable to create a new session id.\n\nTry to set `saveUninitialized` to `false`.\n\nIn your use case you should also remove `db`, `autoReconnect` and `touchAfter` options.\n. Ok.\nTry to submit your problem [here](https://github.com/expressjs/session) and please reference this issue ;)\n. Hi,\n\nYou can enable the debug mode prefixing the node command with `DEBUG=connect-mongo`.\n\nThere is one big problem in your code: the callback has no chance to be called!\nThe second argument of MongoStore creation has been dropped since `v0.5.0`.\n\nBut you can emulate an equivalent behavior like that:\n\n``` js\n(new MongoStore({ ... })).on('connected', function () {});\n```\n\nCurrent versions of `connect-mongo` are able to manage their connection state internally, so this callback is completely optional today.\n\nHope it helps.\n. On which connection strategy?\n. Connection options must be passed into `mongoOptions` key.\n`server`, `username`, `password` and `auto_reconnect` aren't valid options for constructor.\n. And above all, the connection callback in the constructor doesn't exist anymore (since `0.5.0`).\n. All connection options available can be found here: https://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html\nContent of `mongoOptions` will be passed to the MongoClient constructor.\n. Can i close?\n. `kerberos` in an optional dependency.\n`connect-mongo` -> `mongodb` -> `mongodb-core` -> `kerberos`.\n\nThe problem is not related to `connect-mongo`. Are you sure the installation failed?\nMaybe it's just a warning.\n. Ok it's not related to `connect-mongo`.\n`connect-flash` should be fixed to ensure session has been saved (whatever the session store used).\n. I'm back!\nI need tests to accept this, and a README update.\n\nI'll release 0.9 right now and 1.0 in the following days so be patient and submit a new PR ;)\n. I need test. Sorry for that, and the delay.\n. See #194 \n. There is no concept of user in `connect-mongo`.\nBut if you save a property `user` in the session, you can easily write a _remove request_ through the MongoDB driver.\n\nExample:\n\n``` js\ndb.sessions.remove({ 'session.user': VALUE });\n```\n. You will need to set `stringify` option to `false`.\n. @jmcollin78: The `db` instance is accessible through `store.db`.\n\n@Madhu94: You can't set any default attribute in the constructor.\nYou have to execute your own request if you want to interact with an hypothetic `user` attribute.\n. Thank you!\nI will release `v1.0.0` before the end of the week.\n. No problem with code coverage ;)\n. Fixed in d09953c4a1ab8ee49c211b472fd9d03f0859932a.\nLanding ;)\n. Fixed in 1.0.0.\nGive me your feedback ;)\n. Fixed in `1.0.0`.\n. Maybe this?\nhttps://github.com/kcbanner/connect-mongo#remove-expired-sessions\n. Oops!\nI go home and I fix that...\nLe jeu. 17 d\u00e9c. 2015 \u00e0 19:43, Gregory Koberger notifications@github.com a\n\u00e9crit :\n\n> [image: :+1:] This took my site down when I deployed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/208#issuecomment-165544009\n> .\n. What is your node version?\nIf it's under 4.0 you must use `require('connect-mongo/es5')`.\nLe ven. 18 d\u00e9c. 2015 \u00e0 04:26, mosquito1994 notifications@github.com a\n\u00e9crit :\n\n> I'm sorry, I'm new in node I've got a problem said 'use of const in strict\n> mode' with connect-mongo when trying to support connect-flashI check my\n> code according to your readme guidance but it doesn't workHow can I solve\n> the problem please?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/209.\n. OK. Working on it!\n. I added a test to check ES5 version loading.\nAlso updated the way we deal with those versions + published 1.0.2.\n. @rogercastaneda You must use the ES5 version, and use a connection string.\n. You should try this:\n\n``` js\napp.use(session({\n    secret: 'foo',\n    store: new MongoStore(\n        {\n            mongooseConnection: mongoose.connection,\n            collection: 'session'\n        }\n    )\n}));\n```\n. :dancers: \n. No compatibility issue!\nIt's just a `mongodb` optional dependency which fail to build...\n\nAs it's not directly related to `connect-mongo`, if you want (and you should) to improve that output, please warn `mongodb` package maintainers.\n. Can you eventually add a small test for the existence of `this.db`?\n. Any idea?\n. Hi,\nThe `MongoStore` emits some events: at least `set`, `touch`, `destroy`. It's more appropriate than your workaround ;)\nBut it could be useful to know when a session ID is persisted for the first time.\nThe `rawResponse` returned by the `upsert` may help in this case. We must investigate.\n. @james-s-turner Session creation hook has been added.\n. `autoRemove: false`.\nThen you can define your own cleanup tasks.\nYou just have to query the session collection with `{ expires: { $lt: new Date() } }`.\n\nIf you find an elegant and efficient way to collect expiring session ids, I'll be happy to accept your PR.\n. Yes of course. I've updated the README.md.\n. ?\n. TingoDB is not officially supported by `connect-mongo`.\nIf someone want to fix that, I'll be happy to accept a PR.\n. Yes!\n. Ok thx!\n. Can you just explain why it produces a different behavior?\nThx!\n. Published as `v1.2.1`. Thx!!\n. `connect-mongo` just exposes some basic accessors to `express-session`.\nIf you have issues with `resave: false` you must investigate on the `express-session` side.\n. Fixed in upcoming `1.3.2`.\n. Feel free to add NeDB or TingoDB support :)\r\nI close this issue for now.. It had been fixed in `1.3.2`.\nSee #228 ;)\nLe jeu. 28 juil. 2016 \u00e0 23:51, nik mel-nik-ov notifications@github.com a\n\u00e9crit :\n\n> I am trying to store sessions, however I get the following Error:\n> \n> TypeError: Cannot read property 'upserted' of undefined\n> \n> The usage of connect-mongo looks as follows:\n> \n> import session from 'express-session';\n> const MongoStore = require('connect-mongo')(session);\n> \n> app.use(session({\n>   secret: 'SECRET',\n>   store: new MongoStore({ url: 'mongodb://mongo:27017/sessions' }),\n>   saveUninitialized: true,\n>   resave: false\n> }));\n> \n> I also tried using: mongooseConnection = mongoose.connections[0] and\n> still the same error.\n> \n> At the same time, I can see that session entries are being created on\n> every page reload with the following contents:\n> \n> {\n>   \"_id\": \"zO68C8OuARTUblw3EqHfUikR_IIHRaQq\",\n>   \"session\": \"{\\\"cookie\\\": \\\"originalMaxAge\\\":null,\\\"expires\\\":null,\\\"httpOnly\\\":true,\\\"path\\\":\\\"/\\\"    }}\",\n>   \"expires\": new Date(1470779765287)\n> }\n> \n> And the expiration date is set to 14 days from the creation timestamp\n> (default value)\n> \n> Package versions used:\n> \n> \"cookie-parser\": \"^1.4.3\",\n> \"connect-mongo\": \"^1.3.1\",\n> \"express\": \"~4.0.0\",\n> \"express-session\": \"^1.14.0\",\n> \n> Mongo v3.2.4\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/230, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABLJgO2T5H_rDfjucJM-yCr4cG-lY9sJks5qaSRKgaJpZM4JXrkT\n> .\n. This is already a \"devDependency\".\n. If your runtime is not ES6 compliant, you can refer to this:\nhttps://github.com/kcbanner/connect-mongo#old-nodejs-versions-compatibility\n. You can try something like this:\n\n``` js\nimport connectMongo from 'connect-mongo';\nimport session from 'express-session';\n\nconst MongoStore = connectMongo(session);\n```\n. Versions not supported anymore.\r\nPlease upgrade to 2.0.0!. Why not use a middleware for that? Or passport?\n\nSerialize/unserialize is related to session transformation.\nLe sam. 15 oct. 2016 \u00e0 19:18, breeswish notifications@github.com a \u00e9crit :\n\n> We want to store only uid in the session and populate the user object\n> every time session is read from the database (so that we only maintain\n> exactly one copy of User).\n> \n> To avoid unnecessary modifications, we plan to use serialize and\n> unserialize hook (in serialize, replace the user object with user id; in\n> unserialize, replace user id with user object). However currently\n> unserialize is sync, which means we cannot perform a query inside\n> unserialize.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jdesboeufs/connect-mongo/issues/243, or mute the\n> thread\n> https://github.com/notifications/unsubscribe-auth/ABLJgIfx8SAW-Lc5wPwMBPKjK8ZvLWoMks5q0QrsgaJpZM4KXwr2\n> .\n. `node@3.3.1` doesn't support ES6 syntax.\n\nPlease read:\nhttps://github.com/jdesboeufs/connect-mongo/blob/master/README.md#old-nodejs-versions-compatibility\nLe lun. 31 oct. 2016 \u00e0 08:35, Alireza Ghaffari notifications@github.com a\n\u00e9crit :\n\n> Hi I have the following error\n> \n> node_modules/connect-mongo/src/index.js:29\n> unserialize: options.unserialize || (x => x),\n> ^^\n> node@v3.3.1\n> express@4.14.0\n> mongoose@4.6.5\n> mongodb@2.2.11\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jdesboeufs/connect-mongo/issues/245, or mute the\n> thread\n> https://github.com/notifications/unsubscribe-auth/ABLJgNOe9wDOK8EGW0RRPFtabWpr-Lgiks5q5ZokgaJpZM4Kkvri\n> .\n. The `destroy` event is emitted when your session manager (`express-session`) call `destroy()` but not when the session expires.. Hello,\n\ndebug is no more used in connect-mongo.\nYou should upgrade your connect-mongo version ;)\nLe mer. 14 d\u00e9c. 2016 \u00e0 08:23, Abhishek Todmal <notifications@github.com> a\n\u00e9crit :\n\n> We are using \"connect-mongo\": \"~0.8\"\n> and suddenly it is throwing these error messages\n>\n> `node_modules/connect-mongo/node_modules/debug/debug.js:126\n> debug.color = selectColor(namespae);\n> ^\n> ReferenceError: namespae is not defined\n> at createDebug\n> (/home/ubuntu/workspace/lms/node_modules/connect-mongo/node_modules/debug/debug.js:126:29)\n> at Object.\n> (/home/ubuntu/workspace/lms/node_modules/connect-mongo/lib/connect-mongo.js:10:29)\n> at Module._compile (module.js:460:26)\n> at Object.Module._extensions..js (module.js:478:10)\n> at Module.load (module.js:355:32)\n> at Function.Module._load (module.js:310:12)\n> at Function.cls_wrapMethod\n> (/home/ubuntu/workspace/lms/node_modules/newrelic/lib/shimmer.js:256:38)\n> at Module.require (module.js:365:17)\n> at require (module.js:384:17)\n> at Object. (/home/ubuntu/workspace/lms/config/express.js:8:18)\n> at Module._compile (module.js:460:26)\n> at Object.Module._extensions..js (module.js:478:10)\n> at Module.load (module.js:355:32)\n> at Function.Module._load (module.js:310:12)\n> at Function.cls_wrapMethod\n> (/home/ubuntu/workspace/lms/node_modules/newrelic/lib/shimmer.js:256:38)\n> at Module.require (module.js:365:17)\n> at require (module.js:384:17)\n> at Object. (/home/ubuntu/workspace/lms/server.js:36:22)\n> at Module._compile (module.js:460:26)\n> at Object.Module._extensions..js (module.js:478:10)\n> at Module.load (module.js:355:32)\n> at Function.Module._load (module.js:310:12)\n> error: Forever detected script exited with code: 1\n> error: Script restart attempt #1\n> <https://github.com/jdesboeufs/connect-mongo/issues/1>``\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/jdesboeufs/connect-mongo/issues/249>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/ABLJgOhOIz8wZo7q8SYBcHPbpPxZS6Doks5rH5mKgaJpZM4LMnBp>\n> .\n>\n. Just use `.map()`. There is no difference between the two implementations. You just assign your instance reference to a scoped variable.. Very difficult to admit :/\nYou must have an unattended side-effect.\n\nCan you describe your environment?\nLe jeu. 5 janv. 2017 \u00e0 15:31, ragulka <notifications@github.com> a \u00e9crit :\n\n> There is no difference between the two implementations. You just assign\n> your instance reference to a scoped variable.\n>\n> You'd assume that's true. However, if you pass in the db url (not an\n> already existing DB connection), a new db connection is opened every time.\n> This is evidenced by my experience in making this small change in our\n> production app. We're down from 1500 db connections to 40, and a leaky\n> memory to a stable memory usage.\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/jdesboeufs/connect-mongo/issues/252#issuecomment-270656843>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABLJgLC8sMPuNcU6ElPG1Uokmjoraa04ks5rPP6wgaJpZM4Lbuns>\n> .\n>\n. Can you add some test?. Two unique indexes seems a bit expensive for basic session storage.\r\nI think this module has already too much advanced features but if there is other people interested, why not.. OK working on it. We already have two PR but it needs further investigation for prior-3.0 MongoDB versions.. Published `2.0.0`. Thx @ilarioengler @jeresig \r\nAre we OK if we are stuck with prior-3.0 MongoDB versions?. @jeresig I merged @ilarioengler PR \ud83e\udd47 . ",
    "jacobstr": "It's crashing (infinite loop is a misnomer). I tried to track this down for about 30 minutes to no avail. It seems that the req.secret is missing by the time it reaches cookie.js:115. Looking at npm, it appears that connect-mongo is using a different version of connect than the express framework (which you may also be using) - Perhaps this is causing the error.\n. Quick fix was changing the dependency inside package.json: see here:\n\nhttps://github.com/jacobstr/connect-mongo/blob/master/package.json\n\nYou can make the change locally inside node_modules/connect-mongo/package.json, then run `npm install -d` to re-download dependencies.\n\nI'm sure that soon enough, express js will be updated to 2.0 (though I still haven't verified that the problem is in fact between express and connect ). \n. It's crashing (infinite loop is a misnomer). I tried to track this down for about 30 minutes to no avail. It seems that the req.secret is missing by the time it reaches cookie.js:115. Looking at npm, it appears that connect-mongo is using a different version of connect than the express framework (which you may also be using) - Perhaps this is causing the error.\n. Quick fix was changing the dependency inside package.json: see here:\n\nhttps://github.com/jacobstr/connect-mongo/blob/master/package.json\n\nYou can make the change locally inside node_modules/connect-mongo/package.json, then run `npm install -d` to re-download dependencies.\n\nI'm sure that soon enough, express js will be updated to 2.0 (though I still haven't verified that the problem is in fact between express and connect ). \n. ",
    "murvinlai": "Thanks.  let me try that fix.  I almost going to purge my Mongo DB and\nstart everything fresh again.\n\nOn Tue, Feb 28, 2012 at 11:29 PM, jacobstr <\nreply@reply.github.com\n\n> wrote:\n> \n> Quick fix was changing the dependency inside package.json: see here:\n> \n> https://github.com/jacobstr/connect-mongo/blob/master/package.json\n> \n> You can make the change locally inside\n> node_modules/connect-mongo/package.json, then run `npm install -d` to\n> re-download dependencies.\n> \n> I'm sure that soon enough, express js will be updated to 2.0 (though I\n> still haven't verified that the problem is in fact between express and\n> connect ).\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/issues/29#issuecomment-4233108\n. Nice, the patch works.  :)\n\nOn Tue, Feb 28, 2012 at 11:40 PM, Murvin Lai murvinlai@gmail.com wrote:\n\n> Thanks.  let me try that fix.  I almost going to purge my Mongo DB and\n> start everything fresh again.\n> \n> On Tue, Feb 28, 2012 at 11:29 PM, jacobstr <\n> reply@reply.github.com\n> \n> > wrote:\n> > \n> > Quick fix was changing the dependency inside package.json: see here:\n> > \n> > https://github.com/jacobstr/connect-mongo/blob/master/package.json\n> > \n> > You can make the change locally inside\n> > node_modules/connect-mongo/package.json, then run `npm install -d` to\n> > re-download dependencies.\n> > \n> > I'm sure that soon enough, express js will be updated to 2.0 (though I\n> > still haven't verified that the problem is in fact between express and\n> > connect ).\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/kcbanner/connect-mongo/issues/29#issuecomment-4233108\n. Thanks. it works. :)\n. Thanks.  let me try that fix.  I almost going to purge my Mongo DB and\nstart everything fresh again.\n\nOn Tue, Feb 28, 2012 at 11:29 PM, jacobstr <\nreply@reply.github.com\n\n> wrote:\n> \n> Quick fix was changing the dependency inside package.json: see here:\n> \n> https://github.com/jacobstr/connect-mongo/blob/master/package.json\n> \n> You can make the change locally inside\n> node_modules/connect-mongo/package.json, then run `npm install -d` to\n> re-download dependencies.\n> \n> I'm sure that soon enough, express js will be updated to 2.0 (though I\n> still haven't verified that the problem is in fact between express and\n> connect ).\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/kcbanner/connect-mongo/issues/29#issuecomment-4233108\n. Nice, the patch works.  :)\n\nOn Tue, Feb 28, 2012 at 11:40 PM, Murvin Lai murvinlai@gmail.com wrote:\n\n> Thanks.  let me try that fix.  I almost going to purge my Mongo DB and\n> start everything fresh again.\n> \n> On Tue, Feb 28, 2012 at 11:29 PM, jacobstr <\n> reply@reply.github.com\n> \n> > wrote:\n> > \n> > Quick fix was changing the dependency inside package.json: see here:\n> > \n> > https://github.com/jacobstr/connect-mongo/blob/master/package.json\n> > \n> > You can make the change locally inside\n> > node_modules/connect-mongo/package.json, then run `npm install -d` to\n> > re-download dependencies.\n> > \n> > I'm sure that soon enough, express js will be updated to 2.0 (though I\n> > still haven't verified that the problem is in fact between express and\n> > connect ).\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/kcbanner/connect-mongo/issues/29#issuecomment-4233108\n. Thanks. it works. :)\n. ",
    "lancejpollard": "Ran into this problem as well, was able to push to Heroku if I forced the connect version to be 1.8.6.\n. Ran into this problem as well, was able to push to Heroku if I forced the connect version to be 1.8.6.\n. ",
    "hayesgm": "Second @viatropos.  Adding \"connect\": \"1.8.6\" to package.json's dependencies fixed the issue for me in Heroku\n. Second @viatropos.  Adding \"connect\": \"1.8.6\" to package.json's dependencies fixed the issue for me in Heroku\n. ",
    "jimwhitson": "I'm having the same problem, but fixing connect at 1.8.6 doesn't help. I'm definitely on 1.8.6:\n\n```\n> require('connect').version;\n'1.8.6'\n```\n\nbut the error persists. Any pointers that could help me track this down? \n. I'm having the same problem, but fixing connect at 1.8.6 doesn't help. I'm definitely on 1.8.6:\n\n```\n> require('connect').version;\n'1.8.6'\n```\n\nbut the error persists. Any pointers that could help me track this down? \n. ",
    "jupiter": "Yes, either that, or it needs compatibility with connect 2.  Fixed it temporarily by including `\"connect\": \"1.8.5\"` in the project's package.json.  connect-mongo would then use this version of connect, rather than installing its own.\n. Yes, either that, or it needs compatibility with connect 2.  Fixed it temporarily by including `\"connect\": \"1.8.5\"` in the project's package.json.  connect-mongo would then use this version of connect, rather than installing its own.\n. ",
    "Filirom1": "npm update please :)\n. Thanks !\n. npm update please :)\n. Thanks !\n. ",
    "KevinGrandon": "I'm also seeing something like this with connect 1.8.7, express 2.5.9, and ConnectMongo 0.1.9. Node just goes into a ridiculous infinite loop.\n\nWhat versions are you running? Did you find a solution?\n. I'm also seeing something like this with connect 1.8.7, express 2.5.9, and ConnectMongo 0.1.9. Node just goes into a ridiculous infinite loop.\n\nWhat versions are you running? Did you find a solution?\n. ",
    "jcteague": "Not yet.  I've only seen it twice (not a busy site)\n\nNode version is 0.6.14, Express is 2.5.8\n\nI'm also going to post this to heroku support and see what they say\n. Not yet.  I've only seen it twice (not a busy site)\n\nNode version is 0.6.14, Express is 2.5.8\n\nI'm also going to post this to heroku support and see what they say\n. ",
    "GotEmB": "Darn! My bad. I should have tried the obvious.\n. Darn! My bad. I should have tried the obvious.\n. ",
    "marfalkov": "i have it running with express3. the stacktrace above shows that you try to send something after the response ended. maybe your middlewares are not in the right order.\n. Hi & Thx, i'll open another pull request with tests included.\n. Thanks! The dependency are here for the tests only. If you aren't going to use mongoose you don't have to require.\n. Thanks!\n. i have it running with express3. the stacktrace above shows that you try to send something after the response ended. maybe your middlewares are not in the right order.\n. Hi & Thx, i'll open another pull request with tests included.\n. Thanks! The dependency are here for the tests only. If you aren't going to use mongoose you don't have to require.\n. Thanks!\n. ",
    "Charuru": "Yep me too I actually got this working. Thanks.\n. Yep me too I actually got this working. Thanks.\n. ",
    "cederigo": "hi\n\nsorry for the lag. ok like this? cheers\n. hi\n\nsorry for the lag. ok like this? cheers\n. ",
    "robertkowalski": "would be great, as in the currently used mongo-driver version mocha fails (global leak detected)\n. would be great, as in the currently used mongo-driver version mocha fails (global leak detected)\n. ",
    "Raynos": "Upgrade to 1.x is needed for 0.8 support.\n. Upgrade to 1.x is needed for 0.8 support.\n. ",
    "diversario": "So, no support for node 0.8.x currently?\n. @jamesallardice I ended up rewriting the module - https://github.com/diversario/connect-mongostore, but this PR is still valid, I think.\n. So, no support for node 0.8.x currently?\n. @jamesallardice I ended up rewriting the module - https://github.com/diversario/connect-mongostore, but this PR is still valid, I think.\n. ",
    "tharuna": "Hi, I recently played with connect-mongo and found this sorely missing, not wanting to have to create two db connections to mongodb, i modified connect-mongo.js to take an existing connection to mongo if configured so (dbConn: db) - Awaiting your fix to make it to the release, happy to share my changes with you. \n. Hi, I recently played with connect-mongo and found this sorely missing, not wanting to have to create two db connections to mongodb, i modified connect-mongo.js to take an existing connection to mongo if configured so (dbConn: db) - Awaiting your fix to make it to the release, happy to share my changes with you. \n. ",
    "sammy-SC": "hello, i have the most recent version connect-mongo@0.3.3 and i still get the error, try with try and catch fixed the problem.\n. hello, i have the most recent version connect-mongo@0.3.3 and i still get the error, try with try and catch fixed the problem.\n. ",
    "eschan": "any solution to this? im running into the same issue\n. any solution to this? im running into the same issue\n. ",
    "kevanstannard": "Got a solution to my problem on Stack Overflow:\n\nhttp://stackoverflow.com/questions/12081741/connect-mongo-sessions-not-being-deleted-automatically\n. Got a solution to my problem on Stack Overflow:\n\nhttp://stackoverflow.com/questions/12081741/connect-mongo-sessions-not-being-deleted-automatically\n. ",
    "travisbot": "This pull request [passes](http://travis-ci.org/kcbanner/connect-mongo/builds/2236222) (merged 36231c85 into bfc03e82).\n. This pull request [passes](http://travis-ci.org/kcbanner/connect-mongo/builds/2236222) (merged 36231c85 into bfc03e82).\n. ",
    "mihs": "I added a pull request with tests, see #47.\n. I added a pull request with tests, see #47.\n. ",
    "danmilon": "Oh, in fact it works both ways. NVM, no urge then.\n. Oh, in fact it works both ways. NVM, no urge then.\n. ",
    "porsager": "I am experiencing the same thing. Have you had time to look into this?\n\nDon't know if it is of importance, but I am using a mongoose connection with connect-mongo.\n\n*Edit - I just tried setting the maxAge in connect config, and that resolved the issue of null sessions being created.\n. I am experiencing the same thing. Have you had time to look into this?\n\nDon't know if it is of importance, but I am using a mongoose connection with connect-mongo.\n\n*Edit - I just tried setting the maxAge in connect config, and that resolved the issue of null sessions being created.\n. ",
    "cendrizzi": "Mine are all being created as null, too. This used to work for me...\n. I found that putting this in my config to express.session added it to the cookie:\ncookie  : {originalMaxAge: 60000 \\* 60};\n\nI'm not yet sure if it will be auto removed yet.  It seems like a lot of stuff references using maxAge instead, but that didn't do anything. Has something changed (by far the hardest part of the node.js ecosystem is how much stuff changes and breaks your code).\n\nI think this will be removed correctly because I think connect-mongo uses the expire entry which gets set correctly and has not changed. We'll see.\n. Mine are all being created as null, too. This used to work for me...\n. I found that putting this in my config to express.session added it to the cookie:\ncookie  : {originalMaxAge: 60000 \\* 60};\n\nI'm not yet sure if it will be auto removed yet.  It seems like a lot of stuff references using maxAge instead, but that didn't do anything. Has something changed (by far the hardest part of the node.js ecosystem is how much stuff changes and breaks your code).\n\nI think this will be removed correctly because I think connect-mongo uses the expire entry which gets set correctly and has not changed. We'll see.\n. ",
    "aroman": "Alright, I've just done my own fair bit of research into this issue. Here's where things stand, as I gather:\n- session.cookie._expires is by default null, however, because connect defaults cookie.maxAge (which in turn sets cookie._expires) to null. (See connect's session docs: http://www.senchalabs.org/connect/session.html)\n- connect-mongo only cares about session.expires (that is, session.cookie._expires) when identifying sessions to remove. This is the query: `self.collection.remove({expires: {$lte: new Date()}});`\n- this means that connect-mongo will simply IGNORE any sessions that have a null maxAge/expires. This is the _wrong_ behavior. null maxAge/expires cookies should be treated, according to the IETF and connect itself, as a  browser-session cookie. That is, when the user closes the browser the cookie (and session) will be removed.\n\nSo, why does connect-mongo have this problem? (Or, how do other session store implementations deal with this?)\n\nWell, connect-redis uses redis's built-in TTL option. So redis itself handles the deletion of old sessions. If they're null, connect-redis defaults to a one-day expiration. [(Source)](https://github.com/visionmedia/connect-redis/blob/master/lib/connect-redis.js#L123)\nConnect's internal (and default) MemoryStore only seems to delete expired sessions when the session is requested (i.e in `MemoryStore.prototype.get`). If they're null, MemoryStore will always return them and never return them. [(Source)](https://github.com/senchalabs/connect/blob/master/lib/middleware/session/memory.js#L49)\n\nBasically, there is no consistency between the major SessionStore implementations about what to do here. Additionally, I don't think it's clear in the readme that \"clear_interval\" only determines when things that are externally marked as expired are removed, rather than being the TTL for sessions themselves. Maybe that was just my understanding of it, though.\n\nI propose that we mirror connect-redis's implementation. Specfically, we should use mongodb 2.2's new TTL feature, which was designed for this sort of use case. I think it might also be sensible to set a one-day expiration if maxAge/expires is null, though frankly, I don't understand the rationale behind that fully.\n\nI'd appreciate some feedback about this, particularly to hear what your original intended behavior was, @kcbanner. I'd be happy to write up a pull-request if people are in favor.\n. Woohoo! Thanks!\n![XeTuYX2](https://f.cloud.github.com/assets/531504/81754/75015fda-6358-11e2-9c69-59a3695ac2d7.jpeg)\n. Just noticed the Travis build failed... it was running the test suite and tried to connect to a mongodb instance on the localhost, which obviously doesn't exist. How have you been running the test suite on travis such that it passes (as `master` does now?)\n. Great! I managed to fix the travis build -- looks like you need to explicitly add monogdb as a service in the travis config file. Build is passing happily now! :)\n. At what point in the lifecycle of your app are you seeing this? At startup? When new sessions are created? I can't seem to reproduce this on 10.0.1 over here.\n. ^ how is that true? You're saying the npm version of connect-mongo will work fine under express 4.0 if I just do `({session: session})` instead of `(express)`?\n. Oh wow you're totally right! I had tried your way and thought it didn't work at all -- it must have been another issue. Thanks so much for that :)\n. Alright, I've just done my own fair bit of research into this issue. Here's where things stand, as I gather:\n- session.cookie._expires is by default null, however, because connect defaults cookie.maxAge (which in turn sets cookie._expires) to null. (See connect's session docs: http://www.senchalabs.org/connect/session.html)\n- connect-mongo only cares about session.expires (that is, session.cookie._expires) when identifying sessions to remove. This is the query: `self.collection.remove({expires: {$lte: new Date()}});`\n- this means that connect-mongo will simply IGNORE any sessions that have a null maxAge/expires. This is the _wrong_ behavior. null maxAge/expires cookies should be treated, according to the IETF and connect itself, as a  browser-session cookie. That is, when the user closes the browser the cookie (and session) will be removed.\n\nSo, why does connect-mongo have this problem? (Or, how do other session store implementations deal with this?)\n\nWell, connect-redis uses redis's built-in TTL option. So redis itself handles the deletion of old sessions. If they're null, connect-redis defaults to a one-day expiration. [(Source)](https://github.com/visionmedia/connect-redis/blob/master/lib/connect-redis.js#L123)\nConnect's internal (and default) MemoryStore only seems to delete expired sessions when the session is requested (i.e in `MemoryStore.prototype.get`). If they're null, MemoryStore will always return them and never return them. [(Source)](https://github.com/senchalabs/connect/blob/master/lib/middleware/session/memory.js#L49)\n\nBasically, there is no consistency between the major SessionStore implementations about what to do here. Additionally, I don't think it's clear in the readme that \"clear_interval\" only determines when things that are externally marked as expired are removed, rather than being the TTL for sessions themselves. Maybe that was just my understanding of it, though.\n\nI propose that we mirror connect-redis's implementation. Specfically, we should use mongodb 2.2's new TTL feature, which was designed for this sort of use case. I think it might also be sensible to set a one-day expiration if maxAge/expires is null, though frankly, I don't understand the rationale behind that fully.\n\nI'd appreciate some feedback about this, particularly to hear what your original intended behavior was, @kcbanner. I'd be happy to write up a pull-request if people are in favor.\n. Woohoo! Thanks!\n![XeTuYX2](https://f.cloud.github.com/assets/531504/81754/75015fda-6358-11e2-9c69-59a3695ac2d7.jpeg)\n. Just noticed the Travis build failed... it was running the test suite and tried to connect to a mongodb instance on the localhost, which obviously doesn't exist. How have you been running the test suite on travis such that it passes (as `master` does now?)\n. Great! I managed to fix the travis build -- looks like you need to explicitly add monogdb as a service in the travis config file. Build is passing happily now! :)\n. At what point in the lifecycle of your app are you seeing this? At startup? When new sessions are created? I can't seem to reproduce this on 10.0.1 over here.\n. ^ how is that true? You're saying the npm version of connect-mongo will work fine under express 4.0 if I just do `({session: session})` instead of `(express)`?\n. Oh wow you're totally right! I had tried your way and thought it didn't work at all -- it must have been another issue. Thanks so much for that :)\n. ",
    "skeggse": "Any progress?  It would be nice to have this.\n. Any progress?  It would be nice to have this.\n. ",
    "kenpratt": "I applied this, fixed up the tests, and updated package.json to mongodb 1.2.x: https://github.com/kcbanner/connect-mongo/pull/53\n. I've merged #43 and #47 and got them working with 1.2.x and Write Concerns and fixed tests. Let me know if you'd like me to create a \"mega\" pull request, otherwise it's all merged in at https://github.com/kenpratt/connect-mongo.\n. I applied this, fixed up the tests, and updated package.json to mongodb 1.2.x: https://github.com/kcbanner/connect-mongo/pull/53\n. I've merged #43 and #47 and got them working with 1.2.x and Write Concerns and fixed tests. Let me know if you'd like me to create a \"mega\" pull request, otherwise it's all merged in at https://github.com/kenpratt/connect-mongo.\n. ",
    "machunter": "no.\n. no.\n. ",
    "Siyfion": "I too can see the added advantage of being able to pass in a pre-existing mongoose / mongo connection.\n. I too can see the added advantage of being able to pass in a pre-existing mongoose / mongo connection.\n. ",
    "azhang": "I think you are misunderstanding the request. kcbanner/connect-mongo only had support for Mongoose connections, and I was requesting support for \"fully instantiated node-mongo-native objects\", so that this package can work with node-mongodb-native.\n\nI just looked at the repo, and it seems that this feature has already been added.\n. > Wait for the mongodb connection before initializing middleware/ listening for requests\n. +1. However I just tried it and still get the middleware error from express4. Maybe I'm using it wrong - it'd be great if you could update the readme too. Thanks\n. I made a pull request with an example a while ago: https://github.com/aaronz8/connect-mongo/commit/74f1c50f91b05fc1c7986f37db7cbadffc65af82\n. +1\n. I think you are misunderstanding the request. kcbanner/connect-mongo only had support for Mongoose connections, and I was requesting support for \"fully instantiated node-mongo-native objects\", so that this package can work with node-mongodb-native.\n\nI just looked at the repo, and it seems that this feature has already been added.\n. > Wait for the mongodb connection before initializing middleware/ listening for requests\n. +1. However I just tried it and still get the middleware error from express4. Maybe I'm using it wrong - it'd be great if you could update the readme too. Thanks\n. I made a pull request with an example a while ago: https://github.com/aaronz8/connect-mongo/commit/74f1c50f91b05fc1c7986f37db7cbadffc65af82\n. +1\n. ",
    "LukevdPalen": "Got the same error on heroku\n. Got the same error on heroku\n. ",
    "talltorp": "This is because the index.js file is missing from the package in npm.\nI fixed it temporarily by creating an index.js file in my node_modules/connect-mongo\" folder and added this line to it:\nmodule.exports =  require('./lib/connect-mongo');\n\nSince I have node_modules in my .gitignore, I forcefully added the folder to the git repository using the -f flag:\ngit add -f node_modules/connect-mongo\n\nBy doing this, heroku will use the version you have in your repository rather than the one found in npm.\n. This is because the index.js file is missing from the package in npm.\nI fixed it temporarily by creating an index.js file in my node_modules/connect-mongo\" folder and added this line to it:\nmodule.exports =  require('./lib/connect-mongo');\n\nSince I have node_modules in my .gitignore, I forcefully added the folder to the git repository using the -f flag:\ngit add -f node_modules/connect-mongo\n\nBy doing this, heroku will use the version you have in your repository rather than the one found in npm.\n. ",
    "shauntrennery": "Sorry, getting this error now: Cannot find module './lib/connect-mongo'\n. The npm package seems to be missing the lib folder in 0.3.1.\n. Works like a charm, thank you.\n. Sorry, getting this error now: Cannot find module './lib/connect-mongo'\n. The npm package seems to be missing the lib folder in 0.3.1.\n. Works like a charm, thank you.\n. ",
    "talamaska": "can you share a bigger code snippet, where you are using this ensureIndex. I have noticed same issue even if I had set maxAge and expire to the session and to the cookie\n\n``` javascript\napp.use(express.session({\n      secret: 'mysalthere',\n      cookie: {httpOnly: false,  maxAge: 900000},\n      store: new mongoStore({\n        url: config.db,\n        collection : 'sessions'\n      }),\n      expires: new Date(Date.now() + (900000)),\n      maxAge: new Date(Date.now() + (900000))\n    }))\n```\n. yeah i noticed it's a mongo shell cmd,\nI jus tested the session is delted automatically with that configuration, normally if you don't set expire and max age the cookie can have different expiration to the session, you can check that in mongo shell, db.sessions.find()\n. can you share a bigger code snippet, where you are using this ensureIndex. I have noticed same issue even if I had set maxAge and expire to the session and to the cookie\n\n``` javascript\napp.use(express.session({\n      secret: 'mysalthere',\n      cookie: {httpOnly: false,  maxAge: 900000},\n      store: new mongoStore({\n        url: config.db,\n        collection : 'sessions'\n      }),\n      expires: new Date(Date.now() + (900000)),\n      maxAge: new Date(Date.now() + (900000))\n    }))\n```\n. yeah i noticed it's a mongo shell cmd,\nI jus tested the session is delted automatically with that configuration, normally if you don't set expire and max age the cookie can have different expiration to the session, you can check that in mongo shell, db.sessions.find()\n. ",
    "winduptoy": "I'm ran `db.collectionName.ensureIndex({expires: 1}, {expireAfterSeconds: 0});` directly in my Mongo console, not in Node.  There is no bigger code snippet.\n. @elmariachi111 I've been using Mongoose 3.5.X, which I thought _was_ the driver.  Is that something different?\n. Makes sense.  Then I guess we call this issue closed, since it relates to the driver and not to connect-mongo?\n. I'm ran `db.collectionName.ensureIndex({expires: 1}, {expireAfterSeconds: 0});` directly in my Mongo console, not in Node.  There is no bigger code snippet.\n. @elmariachi111 I've been using Mongoose 3.5.X, which I thought _was_ the driver.  Is that something different?\n. Makes sense.  Then I guess we call this issue closed, since it relates to the driver and not to connect-mongo?\n. ",
    "elmariachi111": "can repro this issue with Mongolab (hosted Mongo 2.2.sth). Created index manually. Ah, found the reason. Check your mongo driver version. I have accidentally been testing with one that used 1.0.3 or something -> with this one it didn't work. Now I'm using 1.2.x and it creates the index. \n. yep. Mongoose is your \"ODM\", an object to data mapper. More or less :) It's actually ActiveRecord for nodejs and nosql :) Under the hood Mongoose connects to Mongo as everyone else does: using the native mongodb driver (https://npmjs.org/package/mongodb) You easily can see that dependency in Mongoose's package.json https://github.com/LearnBoost/mongoose/blob/master/package.json \n\nPS: Mongoose has upgraded the driver to 1.2.x in November 2012:\nhttps://github.com/LearnBoost/mongoose/commit/70ea9ac89b37b551d3c11886a1645a8ae7776941\nNot sure if it did work with 1.1.x versions already, can only confirm it's not supported with 1.0.3\n. Yep, I'd say so :)\n. can repro this issue with Mongolab (hosted Mongo 2.2.sth). Created index manually. Ah, found the reason. Check your mongo driver version. I have accidentally been testing with one that used 1.0.3 or something -> with this one it didn't work. Now I'm using 1.2.x and it creates the index. \n. yep. Mongoose is your \"ODM\", an object to data mapper. More or less :) It's actually ActiveRecord for nodejs and nosql :) Under the hood Mongoose connects to Mongo as everyone else does: using the native mongodb driver (https://npmjs.org/package/mongodb) You easily can see that dependency in Mongoose's package.json https://github.com/LearnBoost/mongoose/blob/master/package.json \n\nPS: Mongoose has upgraded the driver to 1.2.x in November 2012:\nhttps://github.com/LearnBoost/mongoose/commit/70ea9ac89b37b551d3c11886a1645a8ae7776941\nNot sure if it did work with 1.1.x versions already, can only confirm it's not supported with 1.0.3\n. Yep, I'd say so :)\n. ",
    "QETHAN": "```\napp.use express.methodOverride()\napp.use express.cookieParser()\napp.use express.session\n  secret:'pansafe_authserver@pansafe'\n  store: new MongoStore\n     db: 'pansafe_authserver'\n  cookie: {\n            maxAge: 24 * 360000 # 24 hours\n        }\n```\n\ni got the same question. here i have a client with 127.0.0.1:3000, and a server with 127.0.0.1:8000, when second request, the session will be a new one without user info. i'm very confused!!! help me. TX\n. ```\napp.use express.cookieParser()\n  app.use express.session\n    secret:'pansafe_authserver111@pansafe'\n    store: new MongoStore\n       db: 'pansafe_authserver111'\n    cookie: {\n            maxAge: 24 * 360000 # 24 hours\n        }\n```\n\nthe client one, the above is server conf\n. client and server in the same mac, how the system time wil be not same. how to check system time. TX\n. work out. caused by the same ip '127.0.0.1' for both \n. the truth is cookie kept by chrome. the key is localhost for cookie when you have 2 web server with the same ip localhost. so i add a key param for express.session : key:'xxxxx', same cookie but different session every request. it works perfect!\n. ```\napp.use express.methodOverride()\napp.use express.cookieParser()\napp.use express.session\n  secret:'pansafe_authserver@pansafe'\n  store: new MongoStore\n     db: 'pansafe_authserver'\n  cookie: {\n            maxAge: 24 * 360000 # 24 hours\n        }\n```\n\ni got the same question. here i have a client with 127.0.0.1:3000, and a server with 127.0.0.1:8000, when second request, the session will be a new one without user info. i'm very confused!!! help me. TX\n. ```\napp.use express.cookieParser()\n  app.use express.session\n    secret:'pansafe_authserver111@pansafe'\n    store: new MongoStore\n       db: 'pansafe_authserver111'\n    cookie: {\n            maxAge: 24 * 360000 # 24 hours\n        }\n```\n\nthe client one, the above is server conf\n. client and server in the same mac, how the system time wil be not same. how to check system time. TX\n. work out. caused by the same ip '127.0.0.1' for both \n. the truth is cookie kept by chrome. the key is localhost for cookie when you have 2 web server with the same ip localhost. so i add a key param for express.session : key:'xxxxx', same cookie but different session every request. it works perfect!\n. ",
    "eranimo": "Please explain what you did. I am having the same issue.\n. Please explain what you did. I am having the same issue.\n. ",
    "marshallswain": "Check out the Express API docs here: http://expressjs.com/api.html#cookieSession\n\nThe default cookie name is connect.sess.  If you don't pass a custom key value to cookieSession(), it will use that name.  Do that on two servers and they will overwrite each others' cookies.  Very frustrating if you can't figure out what's happening!\n\n**_example:**_\napp.use(express.cookieSession({key:\"MyFancyKeyName\"}));\n. Check out the Express API docs here: http://expressjs.com/api.html#cookieSession\n\nThe default cookie name is connect.sess.  If you don't pass a custom key value to cookieSession(), it will use that name.  Do that on two servers and they will overwrite each others' cookies.  Very frustrating if you can't figure out what's happening!\n\n**_example:**_\napp.use(express.cookieSession({key:\"MyFancyKeyName\"}));\n. ",
    "Unitech": "YaY (dirty) solution found!\n\nhttps://github.com/wesleytodd/express-session-passport-cleanup\n\nhttps://github.com/jaredhanson/passport/issues/279#issuecomment-69839937\n. YaY (dirty) solution found!\n\nhttps://github.com/wesleytodd/express-session-passport-cleanup\n\nhttps://github.com/jaredhanson/passport/issues/279#issuecomment-69839937\n. ",
    "FusionAge": "I'm starting to see this error randomly, and have to restart to clear it. I'm using mongolab as my mongodb provider, and nodemon to restart the app when I save files.\n\n<pre>\nError: Error setting TTL index on collection : sessions\n    at /srv/node/chat/node_modules/connect-mongo/lib/connect-mongo.js:137:23\n    at /srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1227:28\n    at /srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1371:30\n    at /srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:156:22\n    at /srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:611:39\n    at Cursor.close (/srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:939:5)\n    at commandHandler (/srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:611:21)\n    at g (events.js:175:14)\n    at EventEmitter.emit (events.js:106:17)\n</pre>\n. Question: I'm connecting via standard URI: <pre>mongdob://[username]:[password]@[server]:[port]/[instance]</pre> -- since I'm reading/writing to the sessions collection, doesn't that mean the username/password I'm using is already auth'd?\n. I did the db.auth() as you instructed just to be safe...but it still appeared. I tested this by re-saving a file (so that nodemon would detect the change & restart the service) -- still get the TTL error, whether I run it via nodemon or manually.\n. I think this was related to MongoLab, I've been beating up on this with my local mongodb install and I haven't seen the issue reoccur. Sorry for any false alarms, but if anyone searches and they're using MongoLab, that was my issue.\n. I'm starting to see this error randomly, and have to restart to clear it. I'm using mongolab as my mongodb provider, and nodemon to restart the app when I save files.\n\n<pre>\nError: Error setting TTL index on collection : sessions\n    at /srv/node/chat/node_modules/connect-mongo/lib/connect-mongo.js:137:23\n    at /srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1227:28\n    at /srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1371:30\n    at /srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:156:22\n    at /srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:611:39\n    at Cursor.close (/srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:939:5)\n    at commandHandler (/srv/node/chat/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:611:21)\n    at g (events.js:175:14)\n    at EventEmitter.emit (events.js:106:17)\n</pre>\n. Question: I'm connecting via standard URI: <pre>mongdob://[username]:[password]@[server]:[port]/[instance]</pre> -- since I'm reading/writing to the sessions collection, doesn't that mean the username/password I'm using is already auth'd?\n. I did the db.auth() as you instructed just to be safe...but it still appeared. I tested this by re-saving a file (so that nodemon would detect the change & restart the service) -- still get the TTL error, whether I run it via nodemon or manually.\n. I think this was related to MongoLab, I've been beating up on this with my local mongodb install and I haven't seen the issue reoccur. Sorry for any false alarms, but if anyone searches and they're using MongoLab, that was my issue.\n. ",
    "eguvenc": "you need to add an auth user to your database.\nuse mongo shell\n\n$ mongo\n\n> use yourdatabasename \n> db.addUser(\"root\", \"12345\");\n\n// AUTH TEST\n\n> db.auth(\"root\",\"12345\");\n> // 1\n. you need to add an auth user to your database.\nuse mongo shell\n\n$ mongo\n\n> use yourdatabasename \n> db.addUser(\"root\", \"12345\");\n\n// AUTH TEST\n\n> db.auth(\"root\",\"12345\");\n> // 1\n. ",
    "renatoargh": "I am having this issue too. connect-mongo + mongolab\n. I am having this issue too. connect-mongo + mongolab\n. ",
    "skotchio": "+1 I have the same error connect-mongo + mongolab\n. Here is the solution of the issue: http://stackoverflow.com/questions/15748644/nodejs-expressjs-passportjs-sessions-on-cloud9-connecting-to-appfog-mongo\n. +1 I have the same error connect-mongo + mongolab\n. Here is the solution of the issue: http://stackoverflow.com/questions/15748644/nodejs-expressjs-passportjs-sessions-on-cloud9-connecting-to-appfog-mongo\n. ",
    "cryptoquick": "I'm also having this issue with MongoHQ & connect-mongo 0.3.2.\n\n```\nconnect-mongo.js:137 -- throw new Error('Error setting TTL index on collection : ' + s\n```\n. Ah yeah, I see what's happening-- at least, in my code. I'm feeding the wrong database object into my express session middleware. Thanks!\n. I'm also having this issue with MongoHQ & connect-mongo 0.3.2.\n\n```\nconnect-mongo.js:137 -- throw new Error('Error setting TTL index on collection : ' + s\n```\n. Ah yeah, I see what's happening-- at least, in my code. I'm feeding the wrong database object into my express session middleware. Thanks!\n. ",
    "truongsinh": "Solved by mongo-native-driver https://github.com/mongodb/node-mongodb-native/issues/966 @1.3.1\n. Auth error solved by mongo-native-driver https://github.com/mongodb/node-mongodb-native/issues/966 @1.3.1\n. Solved by mongo-native-driver https://github.com/mongodb/node-mongodb-native/issues/966 @1.3.1\n. Auth error solved by mongo-native-driver https://github.com/mongodb/node-mongodb-native/issues/966 @1.3.1\n. ",
    "acornejo": "+1 with latest version of mongodb driver and connect-mongo.\n. +1 \n\nIf the first request to express comes after some time (say 500ms) then the problem isn't there. However, if the first request comes right after express has been started, then connect-mongo hits this problem.\n\nThe fix suggested doesn't work for me, other ideas?\n. +1 with latest version of mongodb driver and connect-mongo.\n. +1 \n\nIf the first request to express comes after some time (say 500ms) then the problem isn't there. However, if the first request comes right after express has been started, then connect-mongo hits this problem.\n\nThe fix suggested doesn't work for me, other ideas?\n. ",
    "thepuzzlemaster": "I've been having this exact same problem using MongoLab.\n\nI've found a fix though!\n\nI add a callback to my express.session method, and then the TTL error goes away! I take the callback out, and it comes back every time I make my first call after firing up my node app.\n\nPerhaps this will resolve things for you too?\n\n```\napi.use(express.session({\n  store: new MongoStore({\n    url: config.mongo.url\n  }, function () {\n    console.log(\"db connection open\");\n  })\n}));\n```\n. For those of you still having this issue, take a look at my comment here and see if that gets you anywhere.\n\nhttps://github.com/kcbanner/connect-mongo/pull/58#issuecomment-32148111\n. I've been having this exact same problem using MongoLab.\n\nI've found a fix though!\n\nI add a callback to my express.session method, and then the TTL error goes away! I take the callback out, and it comes back every time I make my first call after firing up my node app.\n\nPerhaps this will resolve things for you too?\n\n```\napi.use(express.session({\n  store: new MongoStore({\n    url: config.mongo.url\n  }, function () {\n    console.log(\"db connection open\");\n  })\n}));\n```\n. For those of you still having this issue, take a look at my comment here and see if that gets you anywhere.\n\nhttps://github.com/kcbanner/connect-mongo/pull/58#issuecomment-32148111\n. ",
    "jtremback": "Worked for me, thanks.\n. I used this to fix the problem, but now it is cropping up again when I try to run the app from my tests.\n. That's really strange. I found the module `connect-mongo-store` does the same exact thing as this one, but works. I'll let you know if any problems come up with it as well.\n\nEDIT: So, I was getting a completely different error with that other module, switched back to this one, and everything works fine. I should probably just learn how these work myself at this point.\n. Worked for me, thanks.\n. I used this to fix the problem, but now it is cropping up again when I try to run the app from my tests.\n. That's really strange. I found the module `connect-mongo-store` does the same exact thing as this one, but works. I'll let you know if any problems come up with it as well.\n\nEDIT: So, I was getting a completely different error with that other module, switched back to this one, and everything works fine. I should probably just learn how these work myself at this point.\n. ",
    "hulufei": "Still have this error when I tried to run a test with supertest.\n\nI want to test a register process protected by csrf, here is the code:\n\n``` javascript\nvar request = require('supertest');\nvar agent = request.agent(app);\nvar user = { email: 'test@gmail.com', password: 'dummy' };\n\nagent\n  .get('/signup')\n  .end(function(err, res) {\n    // Get hidden _csrf value\n    var token = res.text.match(/_csrf.*?value=['\"](.*?)['\"]/)[1];\n    user._csrf = token;\n    agent.saveCookies(res);\n    agent\n      .post('/signup')\n      .send(user)\n      .end(done);\n```\n\nAny tips?\n. @jtremback this PR saved me.\nhttps://github.com/westonplatter/hackathon-starter/commit/dda2d90e61b960a77f17acdf52afe7a82f13eac1#commitcomment-5491762\n. Still have this error when I tried to run a test with supertest.\n\nI want to test a register process protected by csrf, here is the code:\n\n``` javascript\nvar request = require('supertest');\nvar agent = request.agent(app);\nvar user = { email: 'test@gmail.com', password: 'dummy' };\n\nagent\n  .get('/signup')\n  .end(function(err, res) {\n    // Get hidden _csrf value\n    var token = res.text.match(/_csrf.*?value=['\"](.*?)['\"]/)[1];\n    user._csrf = token;\n    agent.saveCookies(res);\n    agent\n      .post('/signup')\n      .send(user)\n      .end(done);\n```\n\nAny tips?\n. @jtremback this PR saved me.\nhttps://github.com/westonplatter/hackathon-starter/commit/dda2d90e61b960a77f17acdf52afe7a82f13eac1#commitcomment-5491762\n. ",
    "igorauad": "vovan22, thanks for pointing this solution. This one worked for me.\n. vovan22, thanks for pointing this solution. This one worked for me.\n. ",
    "lekhnath": "@thepuzzlemaster solution worked for me.\n. @thepuzzlemaster solution worked for me.\n. ",
    "rahulswimmer": "Following is my code for express web server and mongoose connection:\r\n\r\nvar express = require('express');\r\nvar bodyParser = require('body-parser');\r\nvar cookieParser = require('cookie-parser');\r\nvar expressSession = require('express-session');\r\nvar mongoStore = require('connect-mongo')({session:expressSession});\r\nvar mongoose = require('mongoose');\r\n\r\nrequire('./models/users_model.js');\r\n\r\nvar conn = mongoose.connect(\"mongodb://localhost:/myapp\");\r\nvar app = express();\r\n\r\napp.set(\"view engine\",\"html\");\r\napp.set('views','/views');\r\napp.engine('.html', require('ejs').__express);\r\n\r\napp.use(bodyParser.urlencoded({extended:true}));\r\napp.use(bodyParser.json());\r\napp.use(cookieParser());\r\napp.use(expressSession({\r\n  secret: 'SECRET',\r\n  cookie: {maxAge: 60*60*1000},\r\n  store: new mongoStore({\r\n      db: mongoose.connection.db,\r\n      collection: 'sessions',\r\n    })\r\n  }));\r\nrequire('./routes')(app);\r\n\r\napp.listen(9090);\r\n\r\nWhen i run this file, i get the following error:\r\n\r\nError: Error setting TTL index on collection : sessions\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\connect-mongo\\lib\r\n\\connect-mongo.js:161:23\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\db.js:1430:36\r\n    at __executeInsertCommand (C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_m\r\nodules\\mongoose\\node_modules\\mongodb\\lib\\mongodb\\db.js:1829:12)\r\n    at Db._executeInsertCommand (C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node\r\n_modules\\mongoose\\node_modules\\mongodb\\lib\\mongodb\\db.js:1930:5)\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\db.js:1427:14\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\db.js:1560:7\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\cursor.js:162:16\r\n    at commandHandler (C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\m\r\nongoose\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:706:16)\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\db.js:1806:9\r\n    at Server.Base._callHandler (C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node\r\n_modules\\mongoose\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:442:41)\r\n\r\nPlease help me!. Following is my code for express web server and mongoose connection:\r\n\r\nvar express = require('express');\r\nvar bodyParser = require('body-parser');\r\nvar cookieParser = require('cookie-parser');\r\nvar expressSession = require('express-session');\r\nvar mongoStore = require('connect-mongo')({session:expressSession});\r\nvar mongoose = require('mongoose');\r\n\r\nrequire('./models/users_model.js');\r\n\r\nvar conn = mongoose.connect(\"mongodb://localhost:/myapp\");\r\nvar app = express();\r\n\r\napp.set(\"view engine\",\"html\");\r\napp.set('views','/views');\r\napp.engine('.html', require('ejs').__express);\r\n\r\napp.use(bodyParser.urlencoded({extended:true}));\r\napp.use(bodyParser.json());\r\napp.use(cookieParser());\r\napp.use(expressSession({\r\n  secret: 'SECRET',\r\n  cookie: {maxAge: 60*60*1000},\r\n  store: new mongoStore({\r\n      db: mongoose.connection.db,\r\n      collection: 'sessions',\r\n    })\r\n  }));\r\nrequire('./routes')(app);\r\n\r\napp.listen(9090);\r\n\r\nWhen i run this file, i get the following error:\r\n\r\nError: Error setting TTL index on collection : sessions\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\connect-mongo\\lib\r\n\\connect-mongo.js:161:23\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\db.js:1430:36\r\n    at __executeInsertCommand (C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_m\r\nodules\\mongoose\\node_modules\\mongodb\\lib\\mongodb\\db.js:1829:12)\r\n    at Db._executeInsertCommand (C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node\r\n_modules\\mongoose\\node_modules\\mongodb\\lib\\mongodb\\db.js:1930:5)\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\db.js:1427:14\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\db.js:1560:7\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\cursor.js:162:16\r\n    at commandHandler (C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\m\r\nongoose\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:706:16)\r\n    at C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node_modules\\mongoose\\node_mod\r\nules\\mongodb\\lib\\mongodb\\db.js:1806:9\r\n    at Server.Base._callHandler (C:\\Rahul13615\\nodejseg\\Project\\UserAccount\\node\r\n_modules\\mongoose\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:442:41)\r\n\r\nPlease help me!. ",
    "rafaelfaria": "If you need more info of how i'm seeting up the middlewares, please check below\n\n``` javascript\n\napp.configure(function() {\n\n    app.set('port', process.env.PORT || config.port);\n\n    app.engine('html', require('consolidate').swig);\n    app.set('views', __dirname + '/views');\n    app.set('view engine', 'html');\n\n    app.use(express.favicon());\n    app.use(express.logger('dev'));\n    app.use(express.cookieParser());\n    app.use(express.session({\n        secret: 'fdb708866db78951baa3f5c8737d1cc6',\n        cookie: {\n            maxAge: new Date(Date.now() + (90 * 24 * 60 * 60 * 1000))\n        },\n        store: new MongoStore(\n            {\n                db: 'fbtesting',\n                host: 'localhost',\n                port: 27017,\n                collection: 'usersessions',\n                clear_interval: 360\n            },\n            function(err){\n                //console.log(err || 'connect-mongodb setup ok');\n            })\n    }));\n    app.use(express.bodyParser());\n\n    // Initialize Passport!  Also use passport.session() middleware, to support\n    // persistent login sessions (recommended).\n    app.use(passport.initialize());\n    app.use(passport.session());\n\n    app.use(express.methodOverride());\n\n    app.use(app.router);\n    app.use(require('stylus').middleware(__dirname + '/public'));\n    app.use(express.static(path.join(__dirname, 'public')));\n\n});\n```\n. If you need more info of how i'm seeting up the middlewares, please check below\n\n``` javascript\n\napp.configure(function() {\n\n    app.set('port', process.env.PORT || config.port);\n\n    app.engine('html', require('consolidate').swig);\n    app.set('views', __dirname + '/views');\n    app.set('view engine', 'html');\n\n    app.use(express.favicon());\n    app.use(express.logger('dev'));\n    app.use(express.cookieParser());\n    app.use(express.session({\n        secret: 'fdb708866db78951baa3f5c8737d1cc6',\n        cookie: {\n            maxAge: new Date(Date.now() + (90 * 24 * 60 * 60 * 1000))\n        },\n        store: new MongoStore(\n            {\n                db: 'fbtesting',\n                host: 'localhost',\n                port: 27017,\n                collection: 'usersessions',\n                clear_interval: 360\n            },\n            function(err){\n                //console.log(err || 'connect-mongodb setup ok');\n            })\n    }));\n    app.use(express.bodyParser());\n\n    // Initialize Passport!  Also use passport.session() middleware, to support\n    // persistent login sessions (recommended).\n    app.use(passport.initialize());\n    app.use(passport.session());\n\n    app.use(express.methodOverride());\n\n    app.use(app.router);\n    app.use(require('stylus').middleware(__dirname + '/public'));\n    app.use(express.static(path.join(__dirname, 'public')));\n\n});\n```\n. ",
    "NVRemoteDev": "app.configure(function(){\n  app.set('port', process.env.PORT || 3000);\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'ejs');\n  app.use(express.favicon());\n  app.use(express.logger('dev'));\n  app.use(express.bodyParser());\n  app.use(express.cookieParser());\n  app.use(express.session({\n    secret: 'dont be walmarting',\n    store: new MongoStore(sess_conf.db),\n    cookie: {\n      maxAge: new Date(Date.now() + 36000000)\n    }\n  }));\n  // Initialize Passport!  Also use passport.session() middleware, to support\n  // persistent login sessions (recommended).\n  app.use(passport.initialize());\n  app.use(passport.session());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use('/static', express.static(__dirname + '/public'));\n});\n\nI may be doing something incorrect... sessions are staying when I close the browser, but the login still says it will expire in roughly 24hours (per Chrome's dev tool).   Is there anyway I can fix this?  I can see the sessions in the database, but Passport or Connect don't seem to be interacting with it correctly when setting cookies.  The information in the database has the correct session expirations.\n. app.configure(function(){\n  app.set('port', process.env.PORT || 3000);\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'ejs');\n  app.use(express.favicon());\n  app.use(express.logger('dev'));\n  app.use(express.bodyParser());\n  app.use(express.cookieParser());\n  app.use(express.session({\n    secret: 'dont be walmarting',\n    store: new MongoStore(sess_conf.db),\n    cookie: {\n      maxAge: new Date(Date.now() + 36000000)\n    }\n  }));\n  // Initialize Passport!  Also use passport.session() middleware, to support\n  // persistent login sessions (recommended).\n  app.use(passport.initialize());\n  app.use(passport.session());\n  app.use(express.methodOverride());\n  app.use(app.router);\n  app.use('/static', express.static(__dirname + '/public'));\n});\n\nI may be doing something incorrect... sessions are staying when I close the browser, but the login still says it will expire in roughly 24hours (per Chrome's dev tool).   Is there anyway I can fix this?  I can see the sessions in the database, but Passport or Connect don't seem to be interacting with it correctly when setting cookies.  The information in the database has the correct session expirations.\n. ",
    "chrisbarran": "Is this going to make it to release any time soon?\n. Is this going to make it to release any time soon?\n. ",
    "atnstefan": "I revamped the pull-request to match the latest code changes. Please consider pulling my change as soon as possible.\n. Really good and needed change. But can you please add some unit tests?\n. Any chance of getting this merged and released?\n. Persistence discrimination should be done in the persistence layer. From a design perspective, the session has no knowledge how and where the session is persisted. A session persisted in memory will be more likely to store very little data, whereas one stored on disk could store all the data. The session does not need to know all these details.\n\nCan you please re-open and merge this PR into the project.\n. Please make the hashing optional because the operation can be computational intensive. Also please fix the failing tests and add additional tests specific to this change.\n. Please add unit tests for this new feature. Current tests only cover the case where hashing is not enabled.\n. -1 for the change; immutable default config is the way to go. You could keep an application level  default config that you override as needed. Exposing default config is just leaky abstraction. \n. I revamped the pull-request to match the latest code changes. Please consider pulling my change as soon as possible.\n. Really good and needed change. But can you please add some unit tests?\n. Any chance of getting this merged and released?\n. Persistence discrimination should be done in the persistence layer. From a design perspective, the session has no knowledge how and where the session is persisted. A session persisted in memory will be more likely to store very little data, whereas one stored on disk could store all the data. The session does not need to know all these details.\n\nCan you please re-open and merge this PR into the project.\n. Please make the hashing optional because the operation can be computational intensive. Also please fix the failing tests and add additional tests specific to this change.\n. Please add unit tests for this new feature. Current tests only cover the case where hashing is not enabled.\n. -1 for the change; immutable default config is the way to go. You could keep an application level  default config that you override as needed. Exposing default config is just leaky abstraction. \n. ",
    "temitope": "for those using mongoose for connecting to the database I am currently using this method call snippet to connect. still testing this out over the next couple days to see if the [ Error: No open DB connections ] error returns. Thanks for this snippet.\n\nmongoose.connect(CONN_STRING, {server: { autoReconnect: true, socketOptions:{ keepAlive: 1 } }})\n\nsee this link for more info on \"keepAlive\" and how to set it. not sure if it needs to be 60, or if the value is binary (0 or 1 e.g. off or on, respectively) http://mongoosejs.com/docs/connections.html\n. for those using mongoose for connecting to the database I am currently using this method call snippet to connect. still testing this out over the next couple days to see if the [ Error: No open DB connections ] error returns. Thanks for this snippet.\n\nmongoose.connect(CONN_STRING, {server: { autoReconnect: true, socketOptions:{ keepAlive: 1 } }})\n\nsee this link for more info on \"keepAlive\" and how to set it. not sure if it needs to be 60, or if the value is binary (0 or 1 e.g. off or on, respectively) http://mongoosejs.com/docs/connections.html\n. ",
    "mattcasey": "I think this issue is fixed, you can send your config into the \"server\" field. Line 103 in connect-mongo.js:\n\n```\n\n        var serverOptions = options.server || {};\n        serverOptions.auto_reconnect = serverOptions.auto_reconnect || options.auto_reconnect || defaultOptions.auto_reconnect;\n        serverOptions.ssl = serverOptions.ssl || options.ssl || defaultOptions.ssl;\n\n        this.db = new mongo.Db(options.db,\n                               new mongo.Server(options.host || defaultOptions.host,\n                                                options.port || defaultOptions.port,\n                                                serverOptions),\n                               { w: options.w || defaultOptions.w });\n```\n. I think this issue is fixed, you can send your config into the \"server\" field. Line 103 in connect-mongo.js:\n\n```\n\n        var serverOptions = options.server || {};\n        serverOptions.auto_reconnect = serverOptions.auto_reconnect || options.auto_reconnect || defaultOptions.auto_reconnect;\n        serverOptions.ssl = serverOptions.ssl || options.ssl || defaultOptions.ssl;\n\n        this.db = new mongo.Db(options.db,\n                               new mongo.Server(options.host || defaultOptions.host,\n                                                options.port || defaultOptions.port,\n                                                serverOptions),\n                               { w: options.w || defaultOptions.w });\n```\n. ",
    "fabriziomoscon": "+1\nI can confirm the same behavior \n. ``` Javascript\n\"_id\" : \"ZD_HqZo8uKHTU8SPeF5oBeaz\",\n    \"session\" : {\n        \"cookie\" : {\n            \"path\" : \"/\",\n            \"_expires\" : ISODate(\"2013-05-16T11:50:39.014Z\"),\n            \"originalMaxAge\" : 1209600,\n            \"httpOnly\" : false,\n            \"expires\" : ISODate(\"2013-05-16T11:50:39.014Z\"),\n            \"maxAge\" : 1209600,\n            \"data\" : {\n                \"originalMaxAge\" : 1209600,\n                \"expires\" : ISODate(\"2013-05-16T11:50:39.014Z\"),\n                \"secure\" : null,\n                \"httpOnly\" : false,\n                \"domain\" : null,\n                \"path\" : \"/\"\n            },\n            \"hasLongExpires\" : false\n        },\n        \"passport\" : {\n            \"user\" : \"my user id\"\n        }\n    },\n    \"expires\" : ISODate(\"2013-05-16T11:50:39.014Z\")\n```\n\nConsidering this session I wonder which expires field is taken into consideration from express to invalidate sessions and which field from MongoDB for the TTL auto expire every 60 seconds?\n. This needs to be implemented keeping in mind what the middleware cookie of `connect` does.\nhttps://github.com/senchalabs/connect/blob/master/lib/middleware/session/cookie.js#L96\n\nI don't use this module anymore since I adopted Redis for session so I can't really contribute to the fix.\n. +1\nI can confirm the same behavior \n. ``` Javascript\n\"_id\" : \"ZD_HqZo8uKHTU8SPeF5oBeaz\",\n    \"session\" : {\n        \"cookie\" : {\n            \"path\" : \"/\",\n            \"_expires\" : ISODate(\"2013-05-16T11:50:39.014Z\"),\n            \"originalMaxAge\" : 1209600,\n            \"httpOnly\" : false,\n            \"expires\" : ISODate(\"2013-05-16T11:50:39.014Z\"),\n            \"maxAge\" : 1209600,\n            \"data\" : {\n                \"originalMaxAge\" : 1209600,\n                \"expires\" : ISODate(\"2013-05-16T11:50:39.014Z\"),\n                \"secure\" : null,\n                \"httpOnly\" : false,\n                \"domain\" : null,\n                \"path\" : \"/\"\n            },\n            \"hasLongExpires\" : false\n        },\n        \"passport\" : {\n            \"user\" : \"my user id\"\n        }\n    },\n    \"expires\" : ISODate(\"2013-05-16T11:50:39.014Z\")\n```\n\nConsidering this session I wonder which expires field is taken into consideration from express to invalidate sessions and which field from MongoDB for the TTL auto expire every 60 seconds?\n. This needs to be implemented keeping in mind what the middleware cookie of `connect` does.\nhttps://github.com/senchalabs/connect/blob/master/lib/middleware/session/cookie.js#L96\n\nI don't use this module anymore since I adopted Redis for session so I can't really contribute to the fix.\n. ",
    "mmagi": "call toJSON() also removed functions on cookie obj,\nthis cause an fatal error, Object #<Object> has no method 'serialize'\n\n```\n    // Convert the cookie object to its JSON representation if possible\n    // This gets rid of the duplicate object under session.cookie.data property\n    s.session.cookie = session.cookie.toJSON ? session.cookie.toJSON() : session.cookie;\n```\n\n(line 270 of session.js  in express 3.3.4/express 3.2.6)\n\n```\n  var val = 's:' + signature.sign(req.sessionID, secret);\n  val = cookie.serialize(key, val);\n  debug('set-cookie %s', val);\n  res.setHeader('Set-Cookie', val);\n```\n\nchange the _serialize_session function from\n\n```\n  this._serialize_session = function(x) { return x; };\n```\n\nto\n\n```\n  this._serialize_session = function(x) { return JSON.parse(JSON.stringify(x)); };\n```\n\nmaybe a better solution that the following operation can't modify the origal session obj\n. call toJSON() also removed functions on cookie obj,\nthis cause an fatal error, Object #<Object> has no method 'serialize'\n\n```\n    // Convert the cookie object to its JSON representation if possible\n    // This gets rid of the duplicate object under session.cookie.data property\n    s.session.cookie = session.cookie.toJSON ? session.cookie.toJSON() : session.cookie;\n```\n\n(line 270 of session.js  in express 3.3.4/express 3.2.6)\n\n```\n  var val = 's:' + signature.sign(req.sessionID, secret);\n  val = cookie.serialize(key, val);\n  debug('set-cookie %s', val);\n  res.setHeader('Set-Cookie', val);\n```\n\nchange the _serialize_session function from\n\n```\n  this._serialize_session = function(x) { return x; };\n```\n\nto\n\n```\n  this._serialize_session = function(x) { return JSON.parse(JSON.stringify(x)); };\n```\n\nmaybe a better solution that the following operation can't modify the origal session obj\n. ",
    "droppedoncaprica": "I think it's funny, I was about to post something about this that I learned today, then I saw this issue be submitted.  \n\nA couple thoughts on this error.  I was running into this issue as well, it would sometimes breaking the app, other times it allowed the app to connect despite the error.  When this happened to me, I could restart the server and have it not die on me, however generally it would always die on the first start-up.\n\nLooking at the other issues opened featuring TTL, I figured it was because I was using an older version of Mongoose.js; the version of the Mongo native driver I was using was probably outdated. \n\nI was tinkering with my main application code today and I noticed something interesting.  If I connected to the DB with connect-mongo/ mongoose.js before I set express to use connect-mongo for sessions, it didn't give me those errors unless I was hammering the reload button on my webpage that was hosted by express (a _tiny_ bit more than that, I loaded an external config file and used it's return values to get the connection string).  After changing this, even when getting the error message, it wouldn't kill my express app.  Once mongo connects, web pages are served with no problem, just a couple error messages in console until it initializes.\n\nAs far as why this partially solved my error, all I can do is speculate.  It's possible the mongoose.connect(<connection_string>) line is blocking, not allowing code execution until it is finished.  I say this doing next to no research on how mongoose.connect() actually works, it's just a shot in the dark.\n\nAlso @ariporad, you should have more information than what you have here.  It's a little sad to be honest, you have literally no information other than an error message. \n. Well I take that back, those errors are still happening.\n\n![GreatSuccess](https://f.cloud.github.com/assets/1487206/399363/74d93472-a86f-11e2-8f77-dfe745899b28.jpg)\n. Sweet, good to see more information about the error.  Any chance of knowing when npm's version will be updated?\n. So far when using the master branch of the project seems to fix my start-up errors as well.  Do you want a pull request to update the version you can get through npm?\n. Yeah, it ends up 100% of the reason I had this issue arise was from using connect-mongo before it was actually connected to the DB.\n\nWaiting for the connection before initializing middleware/ listening for requests fixed it.\n. @maziyarpanahi By putting Express'es `app.use()` calls inside the callback.  \n\nConnect-Mongo gives you a CB that gets called when it is finished connecting in the `new mongoStore()` call.  [See here for examples.](http://stackoverflow.com/questions/22698661/mongodb-error-setting-ttl-index-on-collection-sessions)\n. Possibly, as long as Express doesn't try to do anything with the session middleware pre-listen (which I don't know if it does or not without testing).  This has just worked for me across several projects.\n. I think it's funny, I was about to post something about this that I learned today, then I saw this issue be submitted.  \n\nA couple thoughts on this error.  I was running into this issue as well, it would sometimes breaking the app, other times it allowed the app to connect despite the error.  When this happened to me, I could restart the server and have it not die on me, however generally it would always die on the first start-up.\n\nLooking at the other issues opened featuring TTL, I figured it was because I was using an older version of Mongoose.js; the version of the Mongo native driver I was using was probably outdated. \n\nI was tinkering with my main application code today and I noticed something interesting.  If I connected to the DB with connect-mongo/ mongoose.js before I set express to use connect-mongo for sessions, it didn't give me those errors unless I was hammering the reload button on my webpage that was hosted by express (a _tiny_ bit more than that, I loaded an external config file and used it's return values to get the connection string).  After changing this, even when getting the error message, it wouldn't kill my express app.  Once mongo connects, web pages are served with no problem, just a couple error messages in console until it initializes.\n\nAs far as why this partially solved my error, all I can do is speculate.  It's possible the mongoose.connect(<connection_string>) line is blocking, not allowing code execution until it is finished.  I say this doing next to no research on how mongoose.connect() actually works, it's just a shot in the dark.\n\nAlso @ariporad, you should have more information than what you have here.  It's a little sad to be honest, you have literally no information other than an error message. \n. Well I take that back, those errors are still happening.\n\n![GreatSuccess](https://f.cloud.github.com/assets/1487206/399363/74d93472-a86f-11e2-8f77-dfe745899b28.jpg)\n. Sweet, good to see more information about the error.  Any chance of knowing when npm's version will be updated?\n. So far when using the master branch of the project seems to fix my start-up errors as well.  Do you want a pull request to update the version you can get through npm?\n. Yeah, it ends up 100% of the reason I had this issue arise was from using connect-mongo before it was actually connected to the DB.\n\nWaiting for the connection before initializing middleware/ listening for requests fixed it.\n. @maziyarpanahi By putting Express'es `app.use()` calls inside the callback.  \n\nConnect-Mongo gives you a CB that gets called when it is finished connecting in the `new mongoStore()` call.  [See here for examples.](http://stackoverflow.com/questions/22698661/mongodb-error-setting-ttl-index-on-collection-sessions)\n. Possibly, as long as Express doesn't try to do anything with the session middleware pre-listen (which I don't know if it does or not without testing).  This has just worked for me across several projects.\n. ",
    "pushchris": "I'm getting the same errors:\n\n```\n/node_modules/connect-mongo/lib/connect-mongo.js:137\n                throw new Error('Error setting TTL index on collection : ' + s\n                      ^\nError: Error setting TTL index on collection : sessions\n    at /node_modules/connect-mongo/lib/connect-mongo.js:137:23\n    at /node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1227:28\n    at /node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1371:30\n    at /node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:156:22\n    at commandHandler (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:608:48)\n    at Db._executeQueryCommand (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1705:12)\n    at Cursor.nextObject (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:649:13)\n    at Cursor.toArray (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:155:10)\n    at /node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1370:65\n    at Db.collection (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:484:44)\n```\n. Solved it for me!\n. I'm getting the same errors:\n\n```\n/node_modules/connect-mongo/lib/connect-mongo.js:137\n                throw new Error('Error setting TTL index on collection : ' + s\n                      ^\nError: Error setting TTL index on collection : sessions\n    at /node_modules/connect-mongo/lib/connect-mongo.js:137:23\n    at /node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1227:28\n    at /node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1371:30\n    at /node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:156:22\n    at commandHandler (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:608:48)\n    at Db._executeQueryCommand (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1705:12)\n    at Cursor.nextObject (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:649:13)\n    at Cursor.toArray (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:155:10)\n    at /node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1370:65\n    at Db.collection (/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:484:44)\n```\n. Solved it for me!\n. ",
    "emgeee": "I just ran into this issue today and managed to solve it. Firstly, if you look at line 137 of the connect-mongo.js file, you'll see where exactly the code is throwing the error you're seeing. You'll also note that the module isn't actually outputting the MongoDB error. If inside of the \"self.collection.ensureIndex\" callback function you add a \n\n``` javascript\nconsole.log(err);\n```\n\nYou should be able to get a better idea of why things are breaking. In my case I was getting\n\n``` javascript\n [Error: no open connections]  \n```\n\nwhich I was able to fix by setting \n\n``` javascript\n{auto_reconnect: true}\n```\n\n for my mongoDB instance.\n\nHope this helps\n. I just ran into this issue today and managed to solve it. Firstly, if you look at line 137 of the connect-mongo.js file, you'll see where exactly the code is throwing the error you're seeing. You'll also note that the module isn't actually outputting the MongoDB error. If inside of the \"self.collection.ensureIndex\" callback function you add a \n\n``` javascript\nconsole.log(err);\n```\n\nYou should be able to get a better idea of why things are breaking. In my case I was getting\n\n``` javascript\n [Error: no open connections]  \n```\n\nwhich I was able to fix by setting \n\n``` javascript\n{auto_reconnect: true}\n```\n\n for my mongoDB instance.\n\nHope this helps\n. ",
    "dimaxweb": "Solved for me also on Windows\n. Solved for me also on Windows\n. ",
    "Gnnng": "Thanks a lot, {auto_reconnect: true} also worked for me.\n. Thanks a lot, {auto_reconnect: true} also worked for me.\n. ",
    "wprl": "For people coming here from Google, make sure you have a version of mongodb after 2.2 installed.  On Ubuntu/Debian you might need to add the 10gen repo.  Instructions here: http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/\n. For people coming here from Google, make sure you have a version of mongodb after 2.2 installed.  On Ubuntu/Debian you might need to add the 10gen repo.  Instructions here: http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/\n. ",
    "naxmefy": "mongo shell version: 2.4.8\nexpress version: 3.2.0\n(node_module) mongodb version: 1.3.23\nconnect-mongo version: 0.4.0\n\n```\n/var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:242\n        throw message;      \n              ^\nError: Error setting TTL index on collection : sessions\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/lib/connect-mongo.js:161:23\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1404:28\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1542:30\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:159:22\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:39\n    at Cursor.close (/var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:959:5)\n    at commandHandler (/var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:21)\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1806:9\n    at Server.Base._callHandler (/var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:442:41)\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:485:18\n```\n\n```\nauto_reconnect: true //don't work\n```\n\nexample:\n\n```\napp.use( express.cookieParser() );\napp.use(express.session({\n    secret: \"roflmao\",\n    store: new MongoStore({\n        url: 'mongodb://user:pass@127.0.0.1:20578/db?authSource=admin',\n        auto_reconnect: true\n    })\n}));\n```\n. Heyho, interesting workaround but my problem is that my mongoose connection goes over a admin Source Database like:\n\n```\nauth: \n  authSource: \"admin\"\n```\n\nHow can i pass these options over connect-mongo?\n\nMongoose Like:\n\n```\nmongodb: \n    host: \"localhost\"\n    db: \"myDatabase\"\n    port: \"27017\"\n    options: \n      user: \"mongodb_other_user\"\n      pass: \"my_impressive_mongodb_password\"\n      auth: \n        authSource: \"admin\"\n```\n. ```\nmongoose.connect('mongodb://user:pass@host:27017/db?authSource=databaseName')\n// or\nmongoose.connect(uri, { auth: { authSource: 'databaseName' }})\n```\n\n[3.6 Release Notes of Mongoose](https://github.com/LearnBoost/mongoose/wiki/3.6-Release-Notes#support-authsource)\n. mongo shell version: 2.4.8\nexpress version: 3.2.0\n(node_module) mongodb version: 1.3.23\nconnect-mongo version: 0.4.0\n\n```\n/var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:242\n        throw message;      \n              ^\nError: Error setting TTL index on collection : sessions\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/lib/connect-mongo.js:161:23\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1404:28\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1542:30\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:159:22\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:39\n    at Cursor.close (/var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:959:5)\n    at commandHandler (/var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:21)\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1806:9\n    at Server.Base._callHandler (/var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:442:41)\n    at /var/www/virtual/neundorf/html/mongotest/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:485:18\n```\n\n```\nauto_reconnect: true //don't work\n```\n\nexample:\n\n```\napp.use( express.cookieParser() );\napp.use(express.session({\n    secret: \"roflmao\",\n    store: new MongoStore({\n        url: 'mongodb://user:pass@127.0.0.1:20578/db?authSource=admin',\n        auto_reconnect: true\n    })\n}));\n```\n. Heyho, interesting workaround but my problem is that my mongoose connection goes over a admin Source Database like:\n\n```\nauth: \n  authSource: \"admin\"\n```\n\nHow can i pass these options over connect-mongo?\n\nMongoose Like:\n\n```\nmongodb: \n    host: \"localhost\"\n    db: \"myDatabase\"\n    port: \"27017\"\n    options: \n      user: \"mongodb_other_user\"\n      pass: \"my_impressive_mongodb_password\"\n      auth: \n        authSource: \"admin\"\n```\n. ```\nmongoose.connect('mongodb://user:pass@host:27017/db?authSource=databaseName')\n// or\nmongoose.connect(uri, { auth: { authSource: 'databaseName' }})\n```\n\n[3.6 Release Notes of Mongoose](https://github.com/LearnBoost/mongoose/wiki/3.6-Release-Notes#support-authsource)\n. ",
    "flockonus": "+1 on the issue\n\nI'm also using mongoose on the side\n\n```\n12:10:49 web.1    | Error: Error setting TTL index on collection : sessions\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/lib/connect-mongo.js:161:23\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1404:28\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1542:30\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:159:22\n12:10:49 web.1    |   at commandHandler (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:678:48)\n12:10:49 web.1    |   at Db._executeQueryCommand (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1802:12)\n12:10:49 web.1    |   at Cursor.nextObject (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:729:13)\n12:10:49 web.1    |   at Cursor.toArray (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:158:10)\n12:10:49 web.1    |   at Cursor.toArray (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/scope.js:10:20)\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1541:65\n12:10:49 web.1    |   at Db.collection (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:495:44)\n12:10:49 web.1    |   at Db.indexInformation (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1539:8)\n12:10:49 web.1    |   at Db.ensureIndex (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1403:8)\n12:10:49 web.1    |   at Collection.ensureIndex (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/collection/index.js:65:11)\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/lib/connect-mongo.js:159:29\n12:10:49 web.1    |   at Db.collection (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:495:44)\n```\n. couldn't you just put the [app.listen()](http://expressjs.com/api.html#app.listen) inside the callback?\n. +1 on the issue\n\nI'm also using mongoose on the side\n\n```\n12:10:49 web.1    | Error: Error setting TTL index on collection : sessions\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/lib/connect-mongo.js:161:23\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1404:28\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1542:30\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:159:22\n12:10:49 web.1    |   at commandHandler (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:678:48)\n12:10:49 web.1    |   at Db._executeQueryCommand (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1802:12)\n12:10:49 web.1    |   at Cursor.nextObject (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:729:13)\n12:10:49 web.1    |   at Cursor.toArray (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:158:10)\n12:10:49 web.1    |   at Cursor.toArray (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/scope.js:10:20)\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1541:65\n12:10:49 web.1    |   at Db.collection (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:495:44)\n12:10:49 web.1    |   at Db.indexInformation (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1539:8)\n12:10:49 web.1    |   at Db.ensureIndex (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1403:8)\n12:10:49 web.1    |   at Collection.ensureIndex (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/collection/index.js:65:11)\n12:10:49 web.1    |   at /Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/lib/connect-mongo.js:159:29\n12:10:49 web.1    |   at Db.collection (/Users/flockonus/workspace/az/elgouna-com/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:495:44)\n```\n. couldn't you just put the [app.listen()](http://expressjs.com/api.html#app.listen) inside the callback?\n. ",
    "outrightmental": "Hey y'all, this is the issue http://stackoverflow.com/questions/22698661/mongodb-error-setting-ttl-index-on-collection-sessions and (re: generator-angular-fullstack) I've submitted my fix in https://github.com/DaftMonk/generator-angular-fullstack/pull/272\n. Also, turns out **my real issue was specific to testing**.  Talk about deja vu, I found my own thread http://stackoverflow.com/questions/22582648/node-js-mocha-unit-testing-error-re-mongoose-mocks-with-mockgoose-error-setti\n. @chovy Thus far, all 3 times that this bug has come to haunt me on different projects, the solution has been related to the **order** in which modules are loaded.  It can take a little getting used to Node.js rigid single-thread architecture, but joy can be ours once we get the chain of events right.  Be especially attentive to the fact that simply because one module is called after another, depending on how each are constructed (e.g. callbacks, async) the module may be failing to wait for dependent states (e.g. mongodb connected and ready).\n. For sure!  That's how we keep these threads useful; open source is pure karma :)\n. Or, the fix is (as of 15 minutes ago when he published the fix to NPM) is: **switch to [connect-mongostore](https://www.npmjs.org/package/connect-mongostore)**. Their team is picking up more momentum for [Express 4.0 support](https://github.com/diversario/connect-mongostore/pull/8).  Thanks Casey for getting the ball rolling on this one and keeping it awesome for as long as you have!  Fork it back when you get a chance..\n. Please please please!\n. Thanks Casey in advance, whenever you are able to +1\n. Or, the fix is (as of 15 minutes ago when he published the fix to NPM) is: **switch to [connect-mongostore](https://www.npmjs.org/package/connect-mongostore)**. Their team is picking up more momentum for [Express 4.0 support](https://github.com/diversario/connect-mongostore/pull/8).  Thanks Casey for getting the ball rolling on this one and keeping it awesome for as long as you have!  Fork it back when you get a chance..\n. Hey y'all, this is the issue http://stackoverflow.com/questions/22698661/mongodb-error-setting-ttl-index-on-collection-sessions and (re: generator-angular-fullstack) I've submitted my fix in https://github.com/DaftMonk/generator-angular-fullstack/pull/272\n. Also, turns out **my real issue was specific to testing**.  Talk about deja vu, I found my own thread http://stackoverflow.com/questions/22582648/node-js-mocha-unit-testing-error-re-mongoose-mocks-with-mockgoose-error-setti\n. @chovy Thus far, all 3 times that this bug has come to haunt me on different projects, the solution has been related to the **order** in which modules are loaded.  It can take a little getting used to Node.js rigid single-thread architecture, but joy can be ours once we get the chain of events right.  Be especially attentive to the fact that simply because one module is called after another, depending on how each are constructed (e.g. callbacks, async) the module may be failing to wait for dependent states (e.g. mongodb connected and ready).\n. For sure!  That's how we keep these threads useful; open source is pure karma :)\n. Or, the fix is (as of 15 minutes ago when he published the fix to NPM) is: **switch to [connect-mongostore](https://www.npmjs.org/package/connect-mongostore)**. Their team is picking up more momentum for [Express 4.0 support](https://github.com/diversario/connect-mongostore/pull/8).  Thanks Casey for getting the ball rolling on this one and keeping it awesome for as long as you have!  Fork it back when you get a chance..\n. Please please please!\n. Thanks Casey in advance, whenever you are able to +1\n. Or, the fix is (as of 15 minutes ago when he published the fix to NPM) is: **switch to [connect-mongostore](https://www.npmjs.org/package/connect-mongostore)**. Their team is picking up more momentum for [Express 4.0 support](https://github.com/diversario/connect-mongostore/pull/8).  Thanks Casey for getting the ball rolling on this one and keeping it awesome for as long as you have!  Fork it back when you get a chance..\n. ",
    "chovy": "I have same problem. what is the solution? I tried `auto_reconnect: true` but that didn't solve it.\n. I'm still getting this.\n. I have same problem. what is the solution? I tried `auto_reconnect: true` but that didn't solve it.\n. I'm still getting this.\n. ",
    "asadhamza": "When i command node server.js . port is started but when i open browser it will not open and cli gives following error:\nD:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mo\nngodb\\connection\\base.js:242\n        throw message;\n              ^\nError: Error setting TTL index on collection : sessions\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\lib\\connect-mongo.js\n:161:23\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\db.js:1404:28\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\db.js:1542:30\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\cursor.js:159:22\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\cursor.js:685:39\n    at Cursor.close (D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_m\nodules\\mongodb\\lib\\mongodb\\cursor.js:959:5)\n    at commandHandler (D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node\n_modules\\mongodb\\lib\\mongodb\\cursor.js:685:21)\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\db.js:1806:9\n    at Server.Base._callHandler (D:\\MYPRJ\\myquiz\\node_modules\\connect-\nmongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:442:41)\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\connection\\server.js:485:18\n. When i command node server.js . port is started but when i open browser it will not open and cli gives following error:\nD:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mo\nngodb\\connection\\base.js:242\n        throw message;\n              ^\nError: Error setting TTL index on collection : sessions\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\lib\\connect-mongo.js\n:161:23\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\db.js:1404:28\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\db.js:1542:30\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\cursor.js:159:22\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\cursor.js:685:39\n    at Cursor.close (D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_m\nodules\\mongodb\\lib\\mongodb\\cursor.js:959:5)\n    at commandHandler (D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node\n_modules\\mongodb\\lib\\mongodb\\cursor.js:685:21)\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\db.js:1806:9\n    at Server.Base._callHandler (D:\\MYPRJ\\myquiz\\node_modules\\connect-\nmongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:442:41)\n    at D:\\MYPRJ\\myquiz\\node_modules\\connect-mongo\\node_modules\\mongodb\n\\lib\\mongodb\\connection\\server.js:485:18\n. ",
    "maziyarpanahi": "@aaronz8 how do you do that? I suppose you get the callback when the MongoDB connection is up and running, but is there a way to wait for this callback then set everything in middleware?\n. @lytespark just a suggestion but integrating social networks (FB, Twitter, Google+, etc.) would really help and even increase the sign up rate in both Web and mobile platforms. This way even someone face the login page instead of being logged in, it just one click on social buttons and they're in.\n\nYou have to expire that cookie sometime because the bigger your collection gets the MongoDB update gets more time.\n. Hi, @lytespark \n\nYou mind if I ask how did you skip some request by user agent? I have NewRelic monitoring agent that hits one URL every 30 seconds and every time it creates a new session. Everything else is working fine but this one for some reason creates a new session.\ntnx\n. Do you mean replica set? Because there are few posts about replica set and one pulling waiting for test to be merged in this matter. I think you pass the hosts as an array.\n. hi @ragulka have you tested to see when you stepDown a primary what happens to the sessions? thanks for the sharing\n. @aaronz8 how do you do that? I suppose you get the callback when the MongoDB connection is up and running, but is there a way to wait for this callback then set everything in middleware?\n. @lytespark just a suggestion but integrating social networks (FB, Twitter, Google+, etc.) would really help and even increase the sign up rate in both Web and mobile platforms. This way even someone face the login page instead of being logged in, it just one click on social buttons and they're in.\n\nYou have to expire that cookie sometime because the bigger your collection gets the MongoDB update gets more time.\n. Hi, @lytespark \n\nYou mind if I ask how did you skip some request by user agent? I have NewRelic monitoring agent that hits one URL every 30 seconds and every time it creates a new session. Everything else is working fine but this one for some reason creates a new session.\ntnx\n. Do you mean replica set? Because there are few posts about replica set and one pulling waiting for test to be merged in this matter. I think you pass the hosts as an array.\n. hi @ragulka have you tested to see when you stepDown a primary what happens to the sessions? thanks for the sharing\n. ",
    "domparise": "http://stackoverflow.com/a/22698992\n. http://stackoverflow.com/a/22698992\n. ",
    "htxuankhoa": "Hi everyone, I tried to install traider.io in my local machine and I also met this error: \n\n```\nError: Error setting TTL index on collection : sessions\n...\n```\n\nAfter searched, as I know because the version of connect-mongo & mongodb is not compatible. So, in my case, I re-installed mongodb with this version & it works:\n\n```\nnpm install mongodb@1.4.x\n```\n\nHope this help for someone like me :)\n. Hi everyone, I tried to install traider.io in my local machine and I also met this error: \n\n```\nError: Error setting TTL index on collection : sessions\n...\n```\n\nAfter searched, as I know because the version of connect-mongo & mongodb is not compatible. So, in my case, I re-installed mongodb with this version & it works:\n\n```\nnpm install mongodb@1.4.x\n```\n\nHope this help for someone like me :)\n. ",
    "xTpx": "@htxuankhoa It works, thank you!!!\n. @htxuankhoa It works, thank you!!!\n. ",
    "wangcuckoo": "Hi, everyone.this error:\nconnect to mongo success\n{ [MongoError: driver is incompatible with this server version] name: 'MongoError' }\nE:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:242\n        throw message;\n              ^\nError: Error setting TTL index on collection : sessions\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\lib\\connect-mongo.js:162:23\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1430:36\n    at __executeInsertCommand (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1829:12)\n    at Db._executeInsertCommand (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1930:5)\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1427:14\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1560:7\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:162:16\n    at commandHandler (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:706:16)\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1806:9\n    at Server.Base._callHandler (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:442:41)\n\nand this is my package\n    \"body-parser\": \"^1.13.2\",\n    \"connect-mongo\": \"^0.4.1\",\n    \"cookie-parser\": \"^1.3.5\",\n    \"debug\": \"~2.2.0\",\n    \"ejs\": \"~2.4.1\",\n    \"express\": \"~4.13.4\",\n    \"express-session\": \"^1.13.0\",\n    \"mongodb\": \"^2.2.8\",\n    \"morgan\": \"~1.7.0\",\n    \"serve-favicon\": \"~2.3.0\"\nHow can i to sovle it?\n. Hi, everyone.this error:\nconnect to mongo success\n{ [MongoError: driver is incompatible with this server version] name: 'MongoError' }\nE:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:242\n        throw message;\n              ^\nError: Error setting TTL index on collection : sessions\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\lib\\connect-mongo.js:162:23\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1430:36\n    at __executeInsertCommand (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1829:12)\n    at Db._executeInsertCommand (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1930:5)\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1427:14\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1560:7\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:162:16\n    at commandHandler (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\cursor.js:706:16)\n    at E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\db.js:1806:9\n    at Server.Base._callHandler (E:\\nodeProject\\testProjectEJS\\node_modules\\connect-mongo\\node_modules\\mongodb\\lib\\mongodb\\connection\\base.js:442:41)\n\nand this is my package\n    \"body-parser\": \"^1.13.2\",\n    \"connect-mongo\": \"^0.4.1\",\n    \"cookie-parser\": \"^1.3.5\",\n    \"debug\": \"~2.2.0\",\n    \"ejs\": \"~2.4.1\",\n    \"express\": \"~4.13.4\",\n    \"express-session\": \"^1.13.0\",\n    \"mongodb\": \"^2.2.8\",\n    \"morgan\": \"~1.7.0\",\n    \"serve-favicon\": \"~2.3.0\"\nHow can i to sovle it?\n. ",
    "tommedema": "Why do you need to create a new Db object anyway? Mongoose is already using node-mongodb-native, therefore you should be able to use the same instance. This would solve a lot of problems related to replica sets and custom configurations.\n. That doesn't answer my question because the pull request contains the same\nproblem.\n. This code is unnecessarily creating a new Db object. It should be possible to pass in an existing Db object, with replica set support.\n. This is probably not possible due to a security precaution in browsers, see http://stackoverflow.com/a/4759494/45974\n. I will perform more profiling tests, may be related to my datacenter too\n. Stringify: false should fix this, although that causes its own issues.\n. @kcbanner, first I drop the entire collection, then I start the server.\n\nThe store connects just fine. When I request the route `/` the error is thrown. When I then look in my database I see the following entry:\n\n```\n{\n    \"_id\": \"pLPujgL7IgCKdiOJ5cvoLqAF\",\n    \"session\": {\n        \"cookie\": {\n            \"originalMaxAge\": 1209600000,\n            \"expires\": {\n                \"$date\": \"2013-09-29T20:35:17.731Z\"\n            },\n            \"secure\": null,\n            \"httpOnly\": true,\n            \"domain\": null,\n            \"path\": \"/\"\n        }\n    },\n    \"expires\": {\n        \"$date\": \"2013-09-29T20:35:17.731Z\"\n    }\n}\n```\n\nThe `/` route does not create a session itself, so this is `connect-mongo`'s work.\n. @kcbanner, that's what I thought too. However, as mentioned the collection is empty when I run the server. The route `/` does not put anything into the session.\n. FYI, the following code is enough to replicate the problem with an empty collection:\n\n```\nvar\n  express     = require(\"express\"),\n  mongoose    = require(\"mongoose\"),\n  MongoStore  = require(\"connect-mongo\")(express),\n  config      = require(process.cwd() + \"/src/config\");\n\nexports.run = function() {\n\n  //create a new HTTP server\n  var server = express();\n\n  //sessions\n  server.use(express.cookieParser(config.sessions.secret));\n  server.use(express.session({\n    secret: config.sessions.secret,\n    key: config.sessions.key,\n    proxy: true,\n    cookie: {maxAge: config.sessions.maxAge, signed: true},\n    store: new MongoStore({\n      mongoose_connection: mongoose.connections[0],\n      stringify: false\n    }, onStoreSetup)})\n  );\n\n  server.get(\"/\", function(req, res) {\n    server.send(\"hi there.. you will never see me because I will throw and exit.. :( \");\n  });\n\n  //listen for incoming connections once session store is setup\n  function onStoreSetup() {\n    server.listen(config.http.port);\n  }\n\n};\n```\n. I'm glad you're looking into it. Tell me if you need more information.\n. @kcbanner  in that case, maybe you can update the NPM repo?\n. @kcbanner It's still on 0.3.3 :)\n. +1\n. Great, thanks for the update\n. @lukaszfiszer It's not :) When you pass that option, the driver will create a new `Db` object in the background. Instead I'm recommending for the driver to use the already established connection (see my original message).\n. I'll test it out later and re-open this issue if it doesn't work :)\n\nThank you\n. Why do you need to create a new Db object anyway? Mongoose is already using node-mongodb-native, therefore you should be able to use the same instance. This would solve a lot of problems related to replica sets and custom configurations.\n. That doesn't answer my question because the pull request contains the same\nproblem.\n. This code is unnecessarily creating a new Db object. It should be possible to pass in an existing Db object, with replica set support.\n. This is probably not possible due to a security precaution in browsers, see http://stackoverflow.com/a/4759494/45974\n. I will perform more profiling tests, may be related to my datacenter too\n. Stringify: false should fix this, although that causes its own issues.\n. @kcbanner, first I drop the entire collection, then I start the server.\n\nThe store connects just fine. When I request the route `/` the error is thrown. When I then look in my database I see the following entry:\n\n```\n{\n    \"_id\": \"pLPujgL7IgCKdiOJ5cvoLqAF\",\n    \"session\": {\n        \"cookie\": {\n            \"originalMaxAge\": 1209600000,\n            \"expires\": {\n                \"$date\": \"2013-09-29T20:35:17.731Z\"\n            },\n            \"secure\": null,\n            \"httpOnly\": true,\n            \"domain\": null,\n            \"path\": \"/\"\n        }\n    },\n    \"expires\": {\n        \"$date\": \"2013-09-29T20:35:17.731Z\"\n    }\n}\n```\n\nThe `/` route does not create a session itself, so this is `connect-mongo`'s work.\n. @kcbanner, that's what I thought too. However, as mentioned the collection is empty when I run the server. The route `/` does not put anything into the session.\n. FYI, the following code is enough to replicate the problem with an empty collection:\n\n```\nvar\n  express     = require(\"express\"),\n  mongoose    = require(\"mongoose\"),\n  MongoStore  = require(\"connect-mongo\")(express),\n  config      = require(process.cwd() + \"/src/config\");\n\nexports.run = function() {\n\n  //create a new HTTP server\n  var server = express();\n\n  //sessions\n  server.use(express.cookieParser(config.sessions.secret));\n  server.use(express.session({\n    secret: config.sessions.secret,\n    key: config.sessions.key,\n    proxy: true,\n    cookie: {maxAge: config.sessions.maxAge, signed: true},\n    store: new MongoStore({\n      mongoose_connection: mongoose.connections[0],\n      stringify: false\n    }, onStoreSetup)})\n  );\n\n  server.get(\"/\", function(req, res) {\n    server.send(\"hi there.. you will never see me because I will throw and exit.. :( \");\n  });\n\n  //listen for incoming connections once session store is setup\n  function onStoreSetup() {\n    server.listen(config.http.port);\n  }\n\n};\n```\n. I'm glad you're looking into it. Tell me if you need more information.\n. @kcbanner  in that case, maybe you can update the NPM repo?\n. @kcbanner It's still on 0.3.3 :)\n. +1\n. Great, thanks for the update\n. @lukaszfiszer It's not :) When you pass that option, the driver will create a new `Db` object in the background. Instead I'm recommending for the driver to use the already established connection (see my original message).\n. I'll test it out later and re-open this issue if it doesn't work :)\n\nThank you\n. ",
    "campbellanderson": "+1 for this. With session stores mostly 90% read operations, anyone who has replica sets for reads setup are missing out\n. +1 for this. With session stores mostly 90% read operations, anyone who has replica sets for reads setup are missing out\n. ",
    "c4milo": "+1 \n. +1 \n. ",
    "mvdwalle": "+1. Any time frame for this?\n. +1. Any time frame for this?\n. ",
    "Prestaul": "Also adding my +1. This is an important feature.\n. Also adding my +1. This is an important feature.\n. ",
    "sars": "+1\n. +1\n. ",
    "larafale": "hello guys, can you provide an example on how to use a replicaset set url ? with express\ni'm using 0.4.1\nthat's what i'm doing but i get an error\n\n```\nvar session = require('express-session')\n  , store = require('connect-mongo')({ session: session })\n\napp.use(session({ \n    secret: 'secret', \n    cookie: { maxAge: 60000 * 60 },\n    store: new store({ url: 'mongodb://set1url:port,mongodb://set2url/mydbname' })\n  }))\n```\n\nthank you\n. hello guys, can you provide an example on how to use a replicaset set url ? with express\ni'm using 0.4.1\nthat's what i'm doing but i get an error\n\n```\nvar session = require('express-session')\n  , store = require('connect-mongo')({ session: session })\n\napp.use(session({ \n    secret: 'secret', \n    cookie: { maxAge: 60000 * 60 },\n    store: new store({ url: 'mongodb://set1url:port,mongodb://set2url/mydbname' })\n  }))\n```\n\nthank you\n. ",
    "jamesallardice": ":+1: This will also allow code depending on this module to run with the `--use-strict` flag. Currently, that isn't possible as node-mongodb-native contains a strict mode syntax error.\n. :+1: This will also allow code depending on this module to run with the `--use-strict` flag. Currently, that isn't possible as node-mongodb-native contains a strict mode syntax error.\n. ",
    "jeffwilcox": "I really like this implementation - I did a minimal alternative by allowing an option called `connectionString` so that I could use replica sets with connect-mongo, have been using something similar to this in production for a while - but nice as clean as this implementation! https://github.com/jeffwilcox/connect-mongo/\n. I really like this implementation - I did a minimal alternative by allowing an option called `connectionString` so that I could use replica sets with connect-mongo, have been using something similar to this in production for a while - but nice as clean as this implementation! https://github.com/jeffwilcox/connect-mongo/\n. ",
    "alanjames1987": "This can also happen if you're using version 0.4.0. If anyone is still getting this error update to 0.4.1.\n. This can also happen if you're using version 0.4.0. If anyone is still getting this error update to 0.4.1.\n. ",
    "jhovgaard": "Same problem here. Any news regarding a fix?\n. Same problem here. Any news regarding a fix?\n. ",
    "korczis": "Same here.\n. Same here.\n. ",
    "antoinedesbois": "This happens when the connection to the database is not established and a client query for the session. A way to fix this would be to wait for the connection to be establish before doing any work.\n\nTo do this, wait for the callback when constructing the mongoStore\n`store: new MongoStore({url: databaseUrl, callback)`\n. This happens when the connection to the database is not established and a client query for the session. A way to fix this would be to wait for the connection to be establish before doing any work.\n\nTo do this, wait for the callback when constructing the mongoStore\n`store: new MongoStore({url: databaseUrl, callback)`\n. ",
    "iignatov": "This will fix issue #62. @kcbanner, could you please merge this before updating the NPM repo? Thanks in advance!\n. I was also having the same problem and I tracked it down to the fix for bug #63 - the submitted code was overwriting the cookie property of the Connect's session object. This is already fixed (bug #77), however the latest version (which includes this fix) is not available in the NPM repository. The solution is to manually update connect-mongo module with the latest version from [the GitHub repository](https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js).\n. This will fix issue #62. @kcbanner, could you please merge this before updating the NPM repo? Thanks in advance!\n. I was also having the same problem and I tracked it down to the fix for bug #63 - the submitted code was overwriting the cookie property of the Connect's session object. This is already fixed (bug #77), however the latest version (which includes this fix) is not available in the NPM repository. The solution is to manually update connect-mongo module with the latest version from [the GitHub repository](https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js).\n. ",
    "icflorescu": "I'm noticing the same issue - after just 4 days of production, there are more than 73,000 docs like this one:  \n\n```\n{\n    \"_id\" : \"ZpRVDKIXZdQZbaZ3I1TU_QEw\",\n    \"session\" : \"{\\\"cookie\\\":{\\\"originalMaxAge\\\":null,\\\"expires\\\":null,\\\"httpOnly\\\":true,\\\"path\\\":\\\"/\\\"},\\\"passport\\\":{}}\",\n    \"expires\" : ISODate(\"2013-08-22T22:30:16Z\")\n}\n```\n. Ok, I think I might be on to something and since I believe other people will bump into the same issue, I thought I should share it here. \n\nI've been investigating this last night on my application (we're using Heroku for production) and I believe there's nothing wrong with connect-mongo.\n\nIn fact, I tried everything on my app, including temporarily switching to connect-heroku-memcached (which, by the way, might be a bit faster, but it's not always a good idea for production enviroments). And I noticed the same thing was happening with memcached session storage.\n\nBut it **doesn't** happen on out test environment - so, @Fyrebox, in my case it's actually not happening **on every request** (but very often indeed).\n\nSo I figured I should check the access logs. Turned out Google was heavily reindexing our recently redesigned website, and guess what, their bots don't keep cookies, so practically every request from them triggers a new session.\n\n@Fyrebox - I believe you may be facing the same issue.\n\nIn my case, the quickest fix was to set the cookie maxAge to 72 hours. By default our sessions were created with a 2 weeks life span.\n. I'm fine with that, thanks for replying so quickly!\n. +1\n. I'm noticing the same issue - after just 4 days of production, there are more than 73,000 docs like this one:  \n\n```\n{\n    \"_id\" : \"ZpRVDKIXZdQZbaZ3I1TU_QEw\",\n    \"session\" : \"{\\\"cookie\\\":{\\\"originalMaxAge\\\":null,\\\"expires\\\":null,\\\"httpOnly\\\":true,\\\"path\\\":\\\"/\\\"},\\\"passport\\\":{}}\",\n    \"expires\" : ISODate(\"2013-08-22T22:30:16Z\")\n}\n```\n. Ok, I think I might be on to something and since I believe other people will bump into the same issue, I thought I should share it here. \n\nI've been investigating this last night on my application (we're using Heroku for production) and I believe there's nothing wrong with connect-mongo.\n\nIn fact, I tried everything on my app, including temporarily switching to connect-heroku-memcached (which, by the way, might be a bit faster, but it's not always a good idea for production enviroments). And I noticed the same thing was happening with memcached session storage.\n\nBut it **doesn't** happen on out test environment - so, @Fyrebox, in my case it's actually not happening **on every request** (but very often indeed).\n\nSo I figured I should check the access logs. Turned out Google was heavily reindexing our recently redesigned website, and guess what, their bots don't keep cookies, so practically every request from them triggers a new session.\n\n@Fyrebox - I believe you may be facing the same issue.\n\nIn my case, the quickest fix was to set the cookie maxAge to 72 hours. By default our sessions were created with a 2 weeks life span.\n. I'm fine with that, thanks for replying so quickly!\n. +1\n. ",
    "lukaszfiszer": "Does this fixed the bug mentioned by@mmagi in #63 (`TypeError: Object #<Object> has no method 'serialize'`)? If yes, :+1: for this PR. \n\nThe most current npm version (0.3.3) is broken, so I would love to see this merged and pushed to npm asap.\n. Great! Thank for info\n. It's already implemented, see \"mongoose_connection\" option in docs. You can use it like this:\n\n``` js\napp.use(express.session({\n    secret: config.session.secret,\n    store: new MongoStore({\n      mongoose_connection: mongoose.connection,\n    })\n  }));\n```\n. You're right. But then I tried:\n\n``` js\nnew MongoStore({\n  db: mongoose.connection.db\n})\n```\n\nwhich seems to work without creating new connection. \n. Does this fixed the bug mentioned by@mmagi in #63 (`TypeError: Object #<Object> has no method 'serialize'`)? If yes, :+1: for this PR. \n\nThe most current npm version (0.3.3) is broken, so I would love to see this merged and pushed to npm asap.\n. Great! Thank for info\n. It's already implemented, see \"mongoose_connection\" option in docs. You can use it like this:\n\n``` js\napp.use(express.session({\n    secret: config.session.secret,\n    store: new MongoStore({\n      mongoose_connection: mongoose.connection,\n    })\n  }));\n```\n. You're right. But then I tried:\n\n``` js\nnew MongoStore({\n  db: mongoose.connection.db\n})\n```\n\nwhich seems to work without creating new connection. \n. ",
    "micate": "I got the error too, here is the error stack:\n\n``` console\nMongoError: E11000 duplicate key error index: development.sessions.$sid_1  dup key: { : null }\n    at Object.exports.toError (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/utils.js:108:11)\n    at null.<anonymous> (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/collection.js:477:24)\n    at g (events.js:175:14)\n    at EventEmitter.emit (events.js:106:17)\n    at Server.Base._callHandler (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:130:25)\n    at /path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:522:20\n    at MongoReply.parseBody (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/responses/mongo_reply.js:132:5)\n    at null.<anonymous> (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:481:22)\n    at EventEmitter.emit (events.js:95:17)\n    at null.<anonymous> (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/connection_pool.js:190:13)\n    at EventEmitter.emit (events.js:98:17)\n    at Socket.<anonymous> (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/connection.js:382:22)\n    at Socket.EventEmitter.emit (events.js:95:17)\n    at Socket.<anonymous> (_stream_readable.js:736:14)\n    at Socket.EventEmitter.emit (events.js:92:17)\n    at emitReadable_ (_stream_readable.js:408:10)\n    at emitReadable (_stream_readable.js:404:5)\n    at readableAddChunk (_stream_readable.js:165:9)\n    at Socket.Readable.push (_stream_readable.js:127:10)\n    at TCP.onread (net.js:526:21)\n```\n\nAfter I removed all documents in the sessions collection, the problem was gone, but I knew this is not the correct solution.\n. @dhruvasagar I just solved my problem by execute `db.sessions.drop()` ... \nAfter test two users login and logout in different browsers, no error occurred.\n\nI tried two different session npm packages before use connect-mongo, the sessions collection was created by one of them. I am wondering if that's the problem, maybe they just created incorrect index on the collection.\n. @dhruvasagar :)\n\nI just confirmed that collection created by connect-mongo has only two indexes by default: `_id_` and `expires_1`. So the `sid_1` index mentioned by the error must be created by other session packages. \n. I got the error too, here is the error stack:\n\n``` console\nMongoError: E11000 duplicate key error index: development.sessions.$sid_1  dup key: { : null }\n    at Object.exports.toError (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/utils.js:108:11)\n    at null.<anonymous> (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/collection.js:477:24)\n    at g (events.js:175:14)\n    at EventEmitter.emit (events.js:106:17)\n    at Server.Base._callHandler (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:130:25)\n    at /path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:522:20\n    at MongoReply.parseBody (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/responses/mongo_reply.js:132:5)\n    at null.<anonymous> (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:481:22)\n    at EventEmitter.emit (events.js:95:17)\n    at null.<anonymous> (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/connection_pool.js:190:13)\n    at EventEmitter.emit (events.js:98:17)\n    at Socket.<anonymous> (/path/to/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/connection.js:382:22)\n    at Socket.EventEmitter.emit (events.js:95:17)\n    at Socket.<anonymous> (_stream_readable.js:736:14)\n    at Socket.EventEmitter.emit (events.js:92:17)\n    at emitReadable_ (_stream_readable.js:408:10)\n    at emitReadable (_stream_readable.js:404:5)\n    at readableAddChunk (_stream_readable.js:165:9)\n    at Socket.Readable.push (_stream_readable.js:127:10)\n    at TCP.onread (net.js:526:21)\n```\n\nAfter I removed all documents in the sessions collection, the problem was gone, but I knew this is not the correct solution.\n. @dhruvasagar I just solved my problem by execute `db.sessions.drop()` ... \nAfter test two users login and logout in different browsers, no error occurred.\n\nI tried two different session npm packages before use connect-mongo, the sessions collection was created by one of them. I am wondering if that's the problem, maybe they just created incorrect index on the collection.\n. @dhruvasagar :)\n\nI just confirmed that collection created by connect-mongo has only two indexes by default: `_id_` and `expires_1`. So the `sid_1` index mentioned by the error must be created by other session packages. \n. ",
    "dhruvasagar": "Yeap, removing data from the sessions collection fixes this, but then again it's temporary, as soon as you try to login twice, the same error pops up :/\n. interesting...i'll have to try this :)\n. @micate Thanks, dropping the collection fixes it :)\n. @micate cool\n. Yeap, removing data from the sessions collection fixes this, but then again it's temporary, as soon as you try to login twice, the same error pops up :/\n. interesting...i'll have to try this :)\n. @micate Thanks, dropping the collection fixes it :)\n. @micate cool\n. ",
    "gabrielstuff": "same here, `db.sessions.drop()` fixed it.\n. This is perfect ! It just helped me  out with a strugling configuration error. Thanks @mk-pmb \nBasically it just show where the error comes from. So instead of getting : \n\n`Error connecting to database:`\n\nwith no more information, you get a nice : \n\n`Error connecting to database: failed to connect to [foobar:27017]`\n\nWith the reason and the url of the db.\n. same here, `db.sessions.drop()` fixed it.\n. This is perfect ! It just helped me  out with a strugling configuration error. Thanks @mk-pmb \nBasically it just show where the error comes from. So instead of getting : \n\n`Error connecting to database:`\n\nwith no more information, you get a nice : \n\n`Error connecting to database: failed to connect to [foobar:27017]`\n\nWith the reason and the url of the db.\n. ",
    "kevinprotoss": "Hello, Did you find the solution?\n. Hello, Did you find the solution?\n. ",
    "gogson": "No I didn't find it and as tommedema said, it is probably a browser security feature.\n\nSince I dropped the idea of a mutualised session.\nNow I have a link on my first website, pointing to a protected page on the second one.\nI don't see the login status on my homepage, but as soon as I click \"Sign in\" I will be redirected to the protected page if I'm logged, or the login page If I'm not.\n\nMany websites uses this approach (MailChimp for example)\n. No I didn't find it and as tommedema said, it is probably a browser security feature.\n\nSince I dropped the idea of a mutualised session.\nNow I have a link on my first website, pointing to a protected page on the second one.\nI don't see the login status on my homepage, but as soon as I click \"Sign in\" I will be redirected to the protected page if I'm logged, or the login page If I'm not.\n\nMany websites uses this approach (MailChimp for example)\n. ",
    "hongkongkiwi": "I've noticed that this happens when I try to do use the session immediately after starting the script (e.g. I try to connect immediately). If I give it 5 seconds it never happens.\n\nIn my case it gives this error:\n\n```\nError: Error setting TTL index on collection : Sessions <Error: Cannot determine state of server>\n```\n\nI'm after a solution as I want to use this in a production environment.\n. I've noticed that this happens when I try to do use the session immediately after starting the script (e.g. I try to connect immediately). If I give it 5 seconds it never happens.\n\nIn my case it gives this error:\n\n```\nError: Error setting TTL index on collection : Sessions <Error: Cannot determine state of server>\n```\n\nI'm after a solution as I want to use this in a production environment.\n. ",
    "riston": "Anyway, the error occurs in this code and the ensureIndex function takes too much time and gives TTL.\n\n``` js\n        self.db.collection(self.db_collection_name, function(err, collection) {\n          if (err) {\n            throw new Error('Error getting collection: ' + self.db_collection_name  + ' <' + err + '>');\n          } else {\n            self.collection = collection;\n\n            // Make sure we have a TTL index on \"expires\", so mongod will automatically\n            // remove expired sessions. expireAfterSeconds is set to 0 because we want \n            // mongo to remove anything expired without any additional delay.\n            self.collection.ensureIndex({expires: 1}, {expireAfterSeconds: 0}, function(err, result) {\n              if (err) {\n                throw new Error('Error setting TTL index on collection : ' + self.db_collection_name + ' <' + err + '>');\n              }\n\n              callback && callback(self.collection);\n            });\n\n          } \n```\n. With Node v4.1.0 the installation seems throwing the only warning.\n. Anyway, the error occurs in this code and the ensureIndex function takes too much time and gives TTL.\n\n``` js\n        self.db.collection(self.db_collection_name, function(err, collection) {\n          if (err) {\n            throw new Error('Error getting collection: ' + self.db_collection_name  + ' <' + err + '>');\n          } else {\n            self.collection = collection;\n\n            // Make sure we have a TTL index on \"expires\", so mongod will automatically\n            // remove expired sessions. expireAfterSeconds is set to 0 because we want \n            // mongo to remove anything expired without any additional delay.\n            self.collection.ensureIndex({expires: 1}, {expireAfterSeconds: 0}, function(err, result) {\n              if (err) {\n                throw new Error('Error setting TTL index on collection : ' + self.db_collection_name + ' <' + err + '>');\n              }\n\n              callback && callback(self.collection);\n            });\n\n          } \n```\n. With Node v4.1.0 the installation seems throwing the only warning.\n. ",
    "AjmalSaid": "same here.. and I also automatically opened the browser immediately after running the app (using \"open\"). after hours of invesitigation (in many directions^^) the timeout trick solved this problem. thx@andysavage \n. same here.. and I also automatically opened the browser immediately after running the app (using \"open\"). after hours of invesitigation (in many directions^^) the timeout trick solved this problem. thx@andysavage \n. ",
    "jltwoo": "I had similar issues whilst using mongoose connections and I did a bit of tracing all the way into the [mongodb driver](https://github.com/mongodb/node-mongodb-native) module so I just want to give some input to this.\n\n**Original app.js setup:**\n\n``` javascript\nmongoose.connect(\"localhost\", \"test\");\n...\napp.configure(function(){\n  /* more config here...*/\n  app.use(express.session({ \n    secret: \"server_session_key\"\n    , store: new MongoStore({db: mongoose.connection.db })\n  }));\n})\n...\n// Start server\nhttp.createServer(app).listen(app.get('port'), function() {\n  console.log(\"Express server listening on port \" + app.get('port'));\n}); \n```\n\nProblem with that is when `MongoStore` tries to perform `ensureIndex` in its [constructor](https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js#L152), mongoose is still in opening state. Since `autoReconnect` is by default `true`, the `ensureIndex` command gets [queued up](https://github.com/mongodb/node-mongodb-native/blob/master/lib/mongodb/db.js#L1643) (more accurately it's the `getIndexes` command before `ensureIndex` that is used to prevent duplciates) and so it \"fails\" silently by design. \n\n**Core issue**\nIt seems that the reconnect is not working properly with mongoose queued commands so they ultimately aren't executed ([related issue](https://github.com/mongodb/node-mongodb-native/issues/1056),[mongoose side](https://github.com/LearnBoost/mongoose/issues/1479)) so we can randomly end up in a stale state depending on whether the mongoose connection was opened before `MongoStore` initializes (for most of my cases it's not).\n\n**First Workaround Attempt**\nSimply ensure mongoose is either connected first by using\n\n``` javascript\nmongoose.connect(\"localhost\", \"test\", function(err){\n /*initialize MongoStore here...*/\n});\n```\n\n**Final workaround**\nFirst attempt didn't work for me since in my setup the MongoStore is initialized in `app.configure` and I don't want `mongoose.connect` placed there so what I end up is just pass in static parameters for `MongoStore` to connect on its own\n\n``` javascript\nvar dbConfig = {\n \"db\": \"test\",\n \"host\": \"localhost\"\n}\n\napp.use(express.session({ \n secret: server_session_key\n , store: new MongoStore(dbConfig)\n}));\n```\n\nThere are probably better ways, but the root problem is more related to mongoose and mongodb driver which is already tracked by others. Need to move on now.\n\nHope this helps. \n. @malixsys & @LinusU \nI haven't had issues since 7 months from my last post about the workaround. But back then I observed that mongod startup does take a while <b>only on windows' system</b> after the system crashed and mongo was scanning through its journals, so this effect was observed more when I had pre-populated test data in my mongodb since the journals would be larger. Also I use replica sets so it takes a while for start up sometimes too. Therefore, creating the situation where it has to wait a bit longer, even just a few seconds. \n\nAnyways I realized my lines of code references in my previous post are outdated. I see in the updated code that it checks for db.openCalled before going into the ensureIndex region. <b>However, db.openCalled only indicates that db.open() is called but not state is connected ([source code from node-mongodb-native](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/db.js#L264)) </b>.\n\nI dont have the time to dive in this longer again, but perhaps it's better to check that the [connection object's connected property](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/connection/connection.js) is true instead. \n\n<b>Note:</b> this is based on my very initial read of the connect-mongo and node-mongodb-native code, haven't had time to test it out in runtime to see whether it is accessible. I just thought to give some input again since I realized how many others are interested in this issue.\n. I had similar issues whilst using mongoose connections and I did a bit of tracing all the way into the [mongodb driver](https://github.com/mongodb/node-mongodb-native) module so I just want to give some input to this.\n\n**Original app.js setup:**\n\n``` javascript\nmongoose.connect(\"localhost\", \"test\");\n...\napp.configure(function(){\n  /* more config here...*/\n  app.use(express.session({ \n    secret: \"server_session_key\"\n    , store: new MongoStore({db: mongoose.connection.db })\n  }));\n})\n...\n// Start server\nhttp.createServer(app).listen(app.get('port'), function() {\n  console.log(\"Express server listening on port \" + app.get('port'));\n}); \n```\n\nProblem with that is when `MongoStore` tries to perform `ensureIndex` in its [constructor](https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js#L152), mongoose is still in opening state. Since `autoReconnect` is by default `true`, the `ensureIndex` command gets [queued up](https://github.com/mongodb/node-mongodb-native/blob/master/lib/mongodb/db.js#L1643) (more accurately it's the `getIndexes` command before `ensureIndex` that is used to prevent duplciates) and so it \"fails\" silently by design. \n\n**Core issue**\nIt seems that the reconnect is not working properly with mongoose queued commands so they ultimately aren't executed ([related issue](https://github.com/mongodb/node-mongodb-native/issues/1056),[mongoose side](https://github.com/LearnBoost/mongoose/issues/1479)) so we can randomly end up in a stale state depending on whether the mongoose connection was opened before `MongoStore` initializes (for most of my cases it's not).\n\n**First Workaround Attempt**\nSimply ensure mongoose is either connected first by using\n\n``` javascript\nmongoose.connect(\"localhost\", \"test\", function(err){\n /*initialize MongoStore here...*/\n});\n```\n\n**Final workaround**\nFirst attempt didn't work for me since in my setup the MongoStore is initialized in `app.configure` and I don't want `mongoose.connect` placed there so what I end up is just pass in static parameters for `MongoStore` to connect on its own\n\n``` javascript\nvar dbConfig = {\n \"db\": \"test\",\n \"host\": \"localhost\"\n}\n\napp.use(express.session({ \n secret: server_session_key\n , store: new MongoStore(dbConfig)\n}));\n```\n\nThere are probably better ways, but the root problem is more related to mongoose and mongodb driver which is already tracked by others. Need to move on now.\n\nHope this helps. \n. @malixsys & @LinusU \nI haven't had issues since 7 months from my last post about the workaround. But back then I observed that mongod startup does take a while <b>only on windows' system</b> after the system crashed and mongo was scanning through its journals, so this effect was observed more when I had pre-populated test data in my mongodb since the journals would be larger. Also I use replica sets so it takes a while for start up sometimes too. Therefore, creating the situation where it has to wait a bit longer, even just a few seconds. \n\nAnyways I realized my lines of code references in my previous post are outdated. I see in the updated code that it checks for db.openCalled before going into the ensureIndex region. <b>However, db.openCalled only indicates that db.open() is called but not state is connected ([source code from node-mongodb-native](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/db.js#L264)) </b>.\n\nI dont have the time to dive in this longer again, but perhaps it's better to check that the [connection object's connected property](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/connection/connection.js) is true instead. \n\n<b>Note:</b> this is based on my very initial read of the connect-mongo and node-mongodb-native code, haven't had time to test it out in runtime to see whether it is accessible. I just thought to give some input again since I realized how many others are interested in this issue.\n. ",
    "OliverJAsh": "@hongkongkiwi Same issue here, `[Error: Cannot determine state of server]` (if I go into `connect-mongo/lib/connect-mongo.js:162:23` and observe the Mongo error there).\n. I'm not using this with Mongoose.\n. @hongkongkiwi Same issue here, `[Error: Cannot determine state of server]` (if I go into `connect-mongo/lib/connect-mongo.js:162:23` and observe the Mongo error there).\n. I'm not using this with Mongoose.\n. ",
    "chriswininger": "I am passing in the db options so that the store can connect on it's own as described above, but I still frequently get the error, especially if I attempt to start a session too soon after spinning up the server.\n. I am passing in the db options so that the store can connect on it's own as described above, but I still frequently get the error, especially if I attempt to start a session too soon after spinning up the server.\n. ",
    "LinusU": "This happens every time I hit the web server with a request before the connection to mongodb has been established.\n. Waiting with the `.listen` is a workaround but a quite bad one. The code in `connect-mongo` needs to be updated to wait for the connection to be established before trying to ensure indexes. Then this would be handled transparently and the server could start listening right away.\n. I'm not suggesting that the session should be skipped. I would like `connect-mongo` to wait for the connection to be available, then ensure the index, then call `next()`.\n\nIt wouldn't be a big difference from waiting to do `.listen()` but it doesn't require any special code from the user, and any request that dosen't need the session can go through. (e.g. static files, make sure to put `app.use(express.static())` before `app.use(session)`)\n\nThe biggest advantage is having the browser wait, instead of directly returning an error when you restart the server and then quickly reload the page. Very useful when developing.\n. I don't really have a problem with it for two reasons. 1) It only happens when I'm really, really quick at reloading. (using `nodemon` to monitor for changes and then `\u2318+S`, `ALT+TAB`, `\u2318+R`). and 2) I use `domain` to handle all my incoming connections so I just get a nice 500 error page back at me, reload the page again and it will work.\n\nAnyhow, it seems to be a problem for other people, and it should be an easy fix.\n. `expires` is not suppose to be a number, it's a date when the cookie should expire. You can't specify both `maxAge` and `expires`.\n\n`expires` is set to `new Date(Date.now() + maxAge)`.\n\nJust remove the line with `expires`.\n. Yes, please bump version to `0.4.1` and `npm publish`!\n. I don't think so, the api hasn't changed in any way and no backwards incompatible changes have been introduced. This is just PATCH not MINOR, http://semver.org/.\n\n> MINOR version when you add functionality in a backwards-compatible manner, and\n> PATCH version when you make backwards-compatible bug fixes.\n. @mrzepinski Thanks!\n\n@nevi-me This is only fixing an issue with Express 4.0. If you have downgraded then your issue is something else.\n\nYou can check if you are effected by looking at `express.session`. If it is undefined (as it is in `>= 4.0.0`) then you need this fix. If it exists, then your problem lies elsewhere.\n. Please don't submit the fork to npm. If you need to use a working version, use the following syntax in your package.json:\n\n``` json\n\"connect-mongo\": \"mrzepinski/connect-mongo#2135988\"\n```\n. This happens every time I hit the web server with a request before the connection to mongodb has been established.\n. Waiting with the `.listen` is a workaround but a quite bad one. The code in `connect-mongo` needs to be updated to wait for the connection to be established before trying to ensure indexes. Then this would be handled transparently and the server could start listening right away.\n. I'm not suggesting that the session should be skipped. I would like `connect-mongo` to wait for the connection to be available, then ensure the index, then call `next()`.\n\nIt wouldn't be a big difference from waiting to do `.listen()` but it doesn't require any special code from the user, and any request that dosen't need the session can go through. (e.g. static files, make sure to put `app.use(express.static())` before `app.use(session)`)\n\nThe biggest advantage is having the browser wait, instead of directly returning an error when you restart the server and then quickly reload the page. Very useful when developing.\n. I don't really have a problem with it for two reasons. 1) It only happens when I'm really, really quick at reloading. (using `nodemon` to monitor for changes and then `\u2318+S`, `ALT+TAB`, `\u2318+R`). and 2) I use `domain` to handle all my incoming connections so I just get a nice 500 error page back at me, reload the page again and it will work.\n\nAnyhow, it seems to be a problem for other people, and it should be an easy fix.\n. `expires` is not suppose to be a number, it's a date when the cookie should expire. You can't specify both `maxAge` and `expires`.\n\n`expires` is set to `new Date(Date.now() + maxAge)`.\n\nJust remove the line with `expires`.\n. Yes, please bump version to `0.4.1` and `npm publish`!\n. I don't think so, the api hasn't changed in any way and no backwards incompatible changes have been introduced. This is just PATCH not MINOR, http://semver.org/.\n\n> MINOR version when you add functionality in a backwards-compatible manner, and\n> PATCH version when you make backwards-compatible bug fixes.\n. @mrzepinski Thanks!\n\n@nevi-me This is only fixing an issue with Express 4.0. If you have downgraded then your issue is something else.\n\nYou can check if you are effected by looking at `express.session`. If it is undefined (as it is in `>= 4.0.0`) then you need this fix. If it exists, then your problem lies elsewhere.\n. Please don't submit the fork to npm. If you need to use a working version, use the following syntax in your package.json:\n\n``` json\n\"connect-mongo\": \"mrzepinski/connect-mongo#2135988\"\n```\n. ",
    "malixsys": "Wait for the DB connection before starting your Express server:\n\n```\nvar MongoStore = require('connect-mongo')(express);\nvar options = {url: ... };\nvar store = new MongoStore(options, function(ret) {\n  // app.listen() here\n});    \napp.use(express.session({\n  store: store\n}));\n```\n. I agree, @LinusU, but you cannot have Mongo based sessions until the connection is established. Plus, it takes < 2 seconds and only at start up.\nIf you don't expect any client connections for which you would need sessions go ahead and don't wait for the connection for listening, but if you are experiencing the bug we are talking about here then you most probably are getting sessions trying to start before the db connection is established\n. Good points, it would probably be a good thing for MC to handle that. However, I do wonder where your DB sits, if it takes that long to connect?\nWon't that pose a problem in dev productivity?\nIn any case, for me this is mostly rethorical as my DEV server restarts in ~200ms INCLUDING waiting for the connection. :)\n. Actually it's a bit longer now, but still no impediment to dev.\n. @outrightmental Maybe I missed something, but I don't see how that differs from my solution..\n. Sorry @outrightmental, did not mean it that way, thought something new had come out :)\n. @focusaurus do you wait for the connection before app.listen() ?\n. @focusaurus True! Although, that is just at start up and a few seconds, prior to which, your server WAS down...\n. @techjeffharris you are waiting for Mongoose's connection, not Mongostore, try:\n\nvar MongoStore = require('connect-mongo')(express);\nvar options = {url: ... };\nvar store = new MongoStore(options, function(ret) {\n  // app.listen() here\n});  \napp.use(express.session({\n  store: store\n}));\n. Ceci explique cela?\n. @techjeffharris I use a callback to wait for the DB connection before starting my server.listen() so that the store does not try to create indexes too soon...\n. Wait for the DB connection before starting your Express server:\n\n```\nvar MongoStore = require('connect-mongo')(express);\nvar options = {url: ... };\nvar store = new MongoStore(options, function(ret) {\n  // app.listen() here\n});    \napp.use(express.session({\n  store: store\n}));\n```\n. I agree, @LinusU, but you cannot have Mongo based sessions until the connection is established. Plus, it takes < 2 seconds and only at start up.\nIf you don't expect any client connections for which you would need sessions go ahead and don't wait for the connection for listening, but if you are experiencing the bug we are talking about here then you most probably are getting sessions trying to start before the db connection is established\n. Good points, it would probably be a good thing for MC to handle that. However, I do wonder where your DB sits, if it takes that long to connect?\nWon't that pose a problem in dev productivity?\nIn any case, for me this is mostly rethorical as my DEV server restarts in ~200ms INCLUDING waiting for the connection. :)\n. Actually it's a bit longer now, but still no impediment to dev.\n. @outrightmental Maybe I missed something, but I don't see how that differs from my solution..\n. Sorry @outrightmental, did not mean it that way, thought something new had come out :)\n. @focusaurus do you wait for the connection before app.listen() ?\n. @focusaurus True! Although, that is just at start up and a few seconds, prior to which, your server WAS down...\n. @techjeffharris you are waiting for Mongoose's connection, not Mongostore, try:\n\nvar MongoStore = require('connect-mongo')(express);\nvar options = {url: ... };\nvar store = new MongoStore(options, function(ret) {\n  // app.listen() here\n});  \napp.use(express.session({\n  store: store\n}));\n. Ceci explique cela?\n. @techjeffharris I use a callback to wait for the DB connection before starting my server.listen() so that the store does not try to create indexes too soon...\n. ",
    "ramseydsilva": "After breaking my head for ages the above did the trick for me!\n. After breaking my head for ages the above did the trick for me!\n. ",
    "mattdeluco": "I've been running into this issue recently while running unit tests in my project.  It's odd though, with one test suite it happens, with the other it doesn't.  I haven't been able to pinpoint the difference.\n. When setting up my express app to use express-session with a connect-mongo store, if I use \"mongoose_connection: db.connection\" (where db is an instance of Mongoose) instead of \"db: db.connection.db\", I don't get the TTL error.\n. Could the \"state\" property in the driver not be used?  Among other states, it seems it can be set with the value \"connecting\" or \"connected\".  In the [open()](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/db.js#L249) function the state is first set to [\"connecting\"](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/db.js#L267), it's not until the connect() callback is called that the state is set to [\"connected\"](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/db.js#L288).\n\nThe only check done before ensureIndex() is called is that [openCalled is true](https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js#L149) - but that doesn't guarantee the connection is established.\n\nI've been running up against issue #80 in unit testing.\n. I should have taken a second look at your fix before posting..\n. I've been running into this issue recently while running unit tests in my project.  It's odd though, with one test suite it happens, with the other it doesn't.  I haven't been able to pinpoint the difference.\n. When setting up my express app to use express-session with a connect-mongo store, if I use \"mongoose_connection: db.connection\" (where db is an instance of Mongoose) instead of \"db: db.connection.db\", I don't get the TTL error.\n. Could the \"state\" property in the driver not be used?  Among other states, it seems it can be set with the value \"connecting\" or \"connected\".  In the [open()](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/db.js#L249) function the state is first set to [\"connecting\"](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/db.js#L267), it's not until the connect() callback is called that the state is set to [\"connected\"](https://github.com/mongodb/node-mongodb-native/blob/1.4/lib/mongodb/db.js#L288).\n\nThe only check done before ensureIndex() is called is that [openCalled is true](https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js#L149) - but that doesn't guarantee the connection is established.\n\nI've been running up against issue #80 in unit testing.\n. I should have taken a second look at your fix before posting..\n. ",
    "focusaurus": ":+1: Also seeing this in a node-mongodb-native/express app. Getting a fix in place would be nice.\n. No, and honestly I'd rather not because I'd rather serve my users an error page saying \"down for maintenance\" or similar instead of them getting a refused connection and an unfriendly browser error page. It's not causing me real production problems though, but I've seen it in development.\n. :+1: Also seeing this in a node-mongodb-native/express app. Getting a fix in place would be nice.\n. No, and honestly I'd rather not because I'd rather serve my users an error page saying \"down for maintenance\" or similar instead of them getting a refused connection and an unfriendly browser error page. It's not causing me real production problems though, but I've seen it in development.\n. ",
    "techjeffharris": "@jdesboeufs, in response to your request in #119 I was able to recreate the error with code found [here](https://github.com/techjeffharris/connect-mongo-ttl-error-example).  \n\nCheck out error.log (my console history) \n\nI had debug running and was using nodemon, so there are some times listed.  let me know if you need any more info!\n. I have been really busy with my day-job, sorry!  \n\n@malixsys, I have been under the impression that MongoStore only needs a callback if the mongo/mongoose connection has not initialized.   You're saying that I need to use a callback for MongoStore even if my db connection is open?\n\n@jdesboeufs, if I upgrade to connect-mongo:master, this issue should theoretically be resolved? A lot has changed, so I want to get up-to-date instructions before I check resolution :)\n\nThanks for all your hard work!\n. @jdesboeufs Sorry, I have been busy with a side project.. I'll cross my fingers and open a new issue if I run into problems :)  Thanks again!\n. +1\n. This may be my naivety speaking, but connect-mongo feels a bit crufty for those using mongoose and express.  \n\nI did a bit of googling and found [mongoose-session](https://github.com/chncdcksn/mongoose-session) which is aimed at those using mongoose and express rather than connect and mongodb (which requires a user to go under the hoods of mongoose and express).\n\nReally simple, there's a reasonable following, and--most importantly--it works for me so far :P\n. @ilanbiala, they definitely work together, but I prefer fewer compatibility workarounds than less--though there are very few in this case\n\n@jdesboeufs, I'll help you out if I can!  I really only made the switch because of the TTL error on restart driving me crazy while developing on localhost with socket.io where clients reconnect very quickly :cry: lol\n\nThat, and my not understanding _exactly_ what causes the issue... :smile: \n. @jdesboeufs, I'll work on an example that recreates the situation, but its the end of my weekend, so It might be a few days. \n\nCheers!\n. @jdesboeufs, in response to your request in #119 I was able to recreate the error with code found [here](https://github.com/techjeffharris/connect-mongo-ttl-error-example).  \n\nCheck out error.log (my console history) \n\nI had debug running and was using nodemon, so there are some times listed.  let me know if you need any more info!\n. I have been really busy with my day-job, sorry!  \n\n@malixsys, I have been under the impression that MongoStore only needs a callback if the mongo/mongoose connection has not initialized.   You're saying that I need to use a callback for MongoStore even if my db connection is open?\n\n@jdesboeufs, if I upgrade to connect-mongo:master, this issue should theoretically be resolved? A lot has changed, so I want to get up-to-date instructions before I check resolution :)\n\nThanks for all your hard work!\n. @jdesboeufs Sorry, I have been busy with a side project.. I'll cross my fingers and open a new issue if I run into problems :)  Thanks again!\n. +1\n. This may be my naivety speaking, but connect-mongo feels a bit crufty for those using mongoose and express.  \n\nI did a bit of googling and found [mongoose-session](https://github.com/chncdcksn/mongoose-session) which is aimed at those using mongoose and express rather than connect and mongodb (which requires a user to go under the hoods of mongoose and express).\n\nReally simple, there's a reasonable following, and--most importantly--it works for me so far :P\n. @ilanbiala, they definitely work together, but I prefer fewer compatibility workarounds than less--though there are very few in this case\n\n@jdesboeufs, I'll help you out if I can!  I really only made the switch because of the TTL error on restart driving me crazy while developing on localhost with socket.io where clients reconnect very quickly :cry: lol\n\nThat, and my not understanding _exactly_ what causes the issue... :smile: \n. @jdesboeufs, I'll work on an example that recreates the situation, but its the end of my weekend, so It might be a few days. \n\nCheers!\n. ",
    "behrang": "It is still 0.3.3.\n. It is still 0.3.3.\n. ",
    "sourcec0de": "+1\n. +1\n. ",
    "frty2": "+1 authdb would be an awesome feature\n. +1 authdb would be an awesome feature\n. ",
    "jakeorr": "+1 authdb is what I'm looking for right now.\n\nI'm using an existing mongoose connection that is authenticated using the `auth: { authDb: 'admin'}` option. The mongoose connection works, but connect-mongo gets authentication errors from mongo. Here's what I'm seeing if it help:\n\nFirst:\n\n```\nerror: Server error\n{ message: 'Error setting TTL index on collection : sessions',\n  stack: 'Error: Error setting TTL index on collection : sessions\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/lib/connect-mongo.js:161:23\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1404:28\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1542:30\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:159:22\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:39\\n    at Cursor.close (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:959:5)\\n    at commandHandler (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:21)\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1806:9\\n    at Server.Base._callHandler (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:442:41)\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:485:18' }\n```\n\nAnd then on subsequent requests:\n\n```\nMongoError: not authorized for query on hashstreet.sessions\n    at Object.toError (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/utils.js:110:11)\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:54\n    at Cursor.close (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:959:5)\n    at commandHandler (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:21)\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1806:9\n    at Server.Base._callHandler (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:442:41)\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:485:18\n    at MongoReply.parseBody (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/responses/mongo_reply.js:68:5)\n    at null.<anonymous> (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:443:20)\n    at EventEmitter.emit (events.js:95:17)\n```\n. Just submitted a pull request with authdb support: https://github.com/kcbanner/connect-mongo/pull/96\n. I will take another look at this soon. I believe that when I submitted this I wasn't sure how to test for this functionality.\n. @paambaati If you wanted to take a crack at writing tests that's all it's waiting for. I didn't have a chance at the time and then switched onto a non-mongo environment which I've been in for a while.\n. +1 authdb is what I'm looking for right now.\n\nI'm using an existing mongoose connection that is authenticated using the `auth: { authDb: 'admin'}` option. The mongoose connection works, but connect-mongo gets authentication errors from mongo. Here's what I'm seeing if it help:\n\nFirst:\n\n```\nerror: Server error\n{ message: 'Error setting TTL index on collection : sessions',\n  stack: 'Error: Error setting TTL index on collection : sessions\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/lib/connect-mongo.js:161:23\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1404:28\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1542:30\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:159:22\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:39\\n    at Cursor.close (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:959:5)\\n    at commandHandler (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:21)\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1806:9\\n    at Server.Base._callHandler (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:442:41)\\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:485:18' }\n```\n\nAnd then on subsequent requests:\n\n```\nMongoError: not authorized for query on hashstreet.sessions\n    at Object.toError (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/utils.js:110:11)\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:54\n    at Cursor.close (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:959:5)\n    at commandHandler (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/cursor.js:685:21)\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/db.js:1806:9\n    at Server.Base._callHandler (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/base.js:442:41)\n    at /Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:485:18\n    at MongoReply.parseBody (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/responses/mongo_reply.js:68:5)\n    at null.<anonymous> (/Users/jakeorr/Predicative/Code/hashstreet/node_modules/connect-mongo/node_modules/mongodb/lib/mongodb/connection/server.js:443:20)\n    at EventEmitter.emit (events.js:95:17)\n```\n. Just submitted a pull request with authdb support: https://github.com/kcbanner/connect-mongo/pull/96\n. I will take another look at this soon. I believe that when I submitted this I wasn't sure how to test for this functionality.\n. @paambaati If you wanted to take a crack at writing tests that's all it's waiting for. I didn't have a chance at the time and then switched onto a non-mongo environment which I've been in for a while.\n. ",
    "darul75": "hi try this patch https://github.com/kcbanner/connect-mongo/pull/93\n. hi @Immuzov I have not checked what is going on for a while, but can you give some details, does it kill node process at the end ?\n. eheh noob we are ;) nice to get your feedback\n. Hi, thanks for feedback, I will check what I can do later ( after holidays now ;) ) but do not hesitate fork it.\n. I have not looked deeply but would say it depends of cookie domain, in your case it should be done with a \".mydomain.com\" cookie to match both:\n\nconnect.session({ cookie: { domain : \".mydomain.com\" }})\n\noh sorry 3 months later ;)\n. cookie is just used to store sessionId, isn'it ?\n. But in the case of Connect, maybe it could be relevant to check when dealing with the same session, with 2 different domains, we could play with nested object in this way :\n\nvar sess = req.session;\n\nsession.mydomain1 = {data:....}\n\nsession.mydomain2 = {data:....} \n\nand not erased anything ?\n. but in common cases, one user will make one request at a time (on each domain) and session will be flushed after all request ? or maybe I am wrong again, interesting subject ;)\n. 100% agree but if @kevinprotoss purpose is only to keep user connexion it could be fine, then if it is to store real state objects, maybe it could handle it on client side with a client storage solution, it really depends on context but your are right again, no guarantee.\n. hi try this patch https://github.com/kcbanner/connect-mongo/pull/93\n. hi @Immuzov I have not checked what is going on for a while, but can you give some details, does it kill node process at the end ?\n. eheh noob we are ;) nice to get your feedback\n. Hi, thanks for feedback, I will check what I can do later ( after holidays now ;) ) but do not hesitate fork it.\n. I have not looked deeply but would say it depends of cookie domain, in your case it should be done with a \".mydomain.com\" cookie to match both:\n\nconnect.session({ cookie: { domain : \".mydomain.com\" }})\n\noh sorry 3 months later ;)\n. cookie is just used to store sessionId, isn'it ?\n. But in the case of Connect, maybe it could be relevant to check when dealing with the same session, with 2 different domains, we could play with nested object in this way :\n\nvar sess = req.session;\n\nsession.mydomain1 = {data:....}\n\nsession.mydomain2 = {data:....} \n\nand not erased anything ?\n. but in common cases, one user will make one request at a time (on each domain) and session will be flushed after all request ? or maybe I am wrong again, interesting subject ;)\n. 100% agree but if @kevinprotoss purpose is only to keep user connexion it could be fine, then if it is to store real state objects, maybe it could handle it on client side with a client storage solution, it really depends on context but your are right again, no guarantee.\n. ",
    "immuzov": "It's doesn't work for me.\n. Sorry @darul75, I am noob :) I checked this solution again. It's worked!\n. It's doesn't work for me.\n. Sorry @darul75, I am noob :) I checked this solution again. It's worked!\n. ",
    "nikmartin": "This is a version dependency between mongo driver and node.  you have probably updated node past 10.22 or so.  mongo driver will fail to load native driver if that is the case.\n. This is a version dependency between mongo driver and node.  you have probably updated node past 10.22 or so.  mongo driver will fail to load native driver if that is the case.\n. ",
    "anghelalexandra": "I'm having the same issue with v0.4.0, works well with v0.3.3. I'm using node 0.10.24, express 3.4.8 and mongoose 3.8.3 (mongoose 3.8.4 shows the same warning). Any ideas on how to solve this so I can use v0.4.0?\n. I'm having the same issue with v0.4.0, works well with v0.3.3. I'm using node 0.10.24, express 3.4.8 and mongoose 3.8.3 (mongoose 3.8.4 shows the same warning). Any ideas on how to solve this so I can use v0.4.0?\n. ",
    "guruward": "I. think you need to go back to version 10.22 of node\n\nSent from my iPad\n\nOn Jan 25, 2014, at 6:39 AM, \"anghelalexandra\" <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nI'm having the same issue with v0.4.0, works well with v0.3.3. I'm using node 0.10.24, express 3.4.8 and mongoose 3.8.3 (mongoose 3.8.4 shows the same warning). Any ideas on how to solve this so I can use v0.4.0?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/91#issuecomment-33289142.\n. I. think you need to go back to version 10.22 of node\n\nSent from my iPad\n\nOn Jan 25, 2014, at 6:39 AM, \"anghelalexandra\" <notifications@github.com<mailto:notifications@github.com>> wrote:\n\nI'm having the same issue with v0.4.0, works well with v0.3.3. I'm using node 0.10.24, express 3.4.8 and mongoose 3.8.3 (mongoose 3.8.4 shows the same warning). Any ideas on how to solve this so I can use v0.4.0?\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/91#issuecomment-33289142.\n. ",
    "daslicht": "amy news on this? I am experiencing the same issue with and Mongo-Native\nNode v0.10.26\n. amy news on this? I am experiencing the same issue with and Mongo-Native\nNode v0.10.26\n. ",
    "PWani": "I only see this when connect-mongo is brought in.  The app uses mongoose elsewhere and has no issues with driver version.  Adding \"var MongoStore = require('connect-mongo')(session);\" immediately brings up the bson error.\n. I only see this when connect-mongo is brought in.  The app uses mongoose elsewhere and has no issues with driver version.  Adding \"var MongoStore = require('connect-mongo')(session);\" immediately brings up the bson error.\n. ",
    "kevinoid": "I was just about to work on a similar pull request.  Thanks for writing this!\n\nThe issue is both that connect-mongo generates unhandled exceptions and that anything which calls `_get_collection` will never call its callback if an error occurs, which can hang calling code waiting for a response.\n\nOne suggestion I'd make for the pull request (or for a separate related pull request) is to either include `err.message` in the message of the returned `Error` objects or add a property on them to get to the original error so that users can figure out why connect-mongo was unable to get the collection or ensure the TTL index.\n. I was just about to work on a similar pull request.  Thanks for writing this!\n\nThe issue is both that connect-mongo generates unhandled exceptions and that anything which calls `_get_collection` will never call its callback if an error occurs, which can hang calling code waiting for a response.\n\nOne suggestion I'd make for the pull request (or for a separate related pull request) is to either include `err.message` in the message of the returned `Error` objects or add a property on them to get to the original error so that users can figure out why connect-mongo was unable to get the collection or ensure the TTL index.\n. ",
    "NicolasPelletier": "+1 on this.\n\nI have an opened database already and I just want connect-mongo to use it as-is. My solution so far was not to pass any callback ( in which case `_open_database()` is not called ), but this is a trick I do because I saw in the code that it solved my problem. Using this patch is a much better approach.\n. +1 on this.\n\nI have an opened database already and I just want connect-mongo to use it as-is. My solution so far was not to pass any callback ( in which case `_open_database()` is not called ), but this is a trick I do because I saw in the code that it solved my problem. Using this patch is a much better approach.\n. ",
    "paambaati": "This is something I desperately need. Anyway I could help with expediting the PR merge @jakeorr, @snegrea, @jdesboeufs?\n. This is something I desperately need. Anyway I could help with expediting the PR merge @jakeorr, @snegrea, @jdesboeufs?\n. ",
    "pasupulaphani": "No luck even using this \n\"connect-mongo\": \"git+https://github.com/kcbanner/connect-mongo.git#master\",\n. My bad, this worked fine with master branch.\n\n```\nvar session    = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\n\napp.use(session({\n    secret: 'sdfasd sfdasfd',\n    store: new MongoStore({\n        db              : mongoose.connection.db,\n    })\n}));\n```\n. Kindly update the readme section for express4 \n. My bad, this worked fine with master branch.\n\n```\nvar session    = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\n\napp.use(session({\n    secret: 'sdfasd sfdasfd',\n    store: new MongoStore({\n        db              : mongoose.connection.db,\n    })\n}));\n```\n. Still failing!\n. No luck even using this \n\"connect-mongo\": \"git+https://github.com/kcbanner/connect-mongo.git#master\",\n. My bad, this worked fine with master branch.\n\n```\nvar session    = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\n\napp.use(session({\n    secret: 'sdfasd sfdasfd',\n    store: new MongoStore({\n        db              : mongoose.connection.db,\n    })\n}));\n```\n. Kindly update the readme section for express4 \n. My bad, this worked fine with master branch.\n\n```\nvar session    = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\n\napp.use(session({\n    secret: 'sdfasd sfdasfd',\n    store: new MongoStore({\n        db              : mongoose.connection.db,\n    })\n}));\n```\n. Still failing!\n. ",
    "themcguy": "I had this same problem, and after much head-scratching, I realized I was using the wrong session module. Make sure you're using \"express-session\" and not \"cookie-session\"!!!\n. I had this same problem, and after much head-scratching, I realized I was using the wrong session module. Make sure you're using \"express-session\" and not \"cookie-session\"!!!\n. ",
    "rknell": "For any other suckers out there who are banging their head against this, also remember that you need to add session after you require connect-mongo:\n\n``` javascript\nvar session = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\n\n```\n\nThis will cause the same error!\n. @Klkketer This isn't using mongoose, but if you are stuck and need to get on with it check out this working example from my seed project:\n\nhttps://github.com/rknell/snappyapps-seed/blob/master/engine/lib/express.js\n\nSuper tested and totally working.\n. For any other suckers out there who are banging their head against this, also remember that you need to add session after you require connect-mongo:\n\n``` javascript\nvar session = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\n\n```\n\nThis will cause the same error!\n. @Klkketer This isn't using mongoose, but if you are stuck and need to get on with it check out this working example from my seed project:\n\nhttps://github.com/rknell/snappyapps-seed/blob/master/engine/lib/express.js\n\nSuper tested and totally working.\n. ",
    "phsstory": "@rknell Thank you.\n\nI mistakenly used the docs example https://github.com/kcbanner/connect-mongo#re-use-a-mongoose-connection which dosn't use the require function call.\n. @rknell Thank you.\n\nI mistakenly used the docs example https://github.com/kcbanner/connect-mongo#re-use-a-mongoose-connection which dosn't use the require function call.\n. ",
    "Kikketer": "I assume this issue does not exist in the latest 0.8.2 version (which I got from NPM).  I'm getting this error when using Mongoose.\n\nI have the session set up correctly per above.  I've tried both `store: new MongoStore({db: mongoose.connection.db})` and the `store: new MongoStore({mongooseConnection: mongoose.connection})` variety.\n. @rknell Not sure what you are pointing at with that link.  Looking around the source code of that project, the session:\n\n```\napp.use(session({\n  secret: '1234890sdlkjfu02',\n  resave: false,\n  saveUninitialized: true\n}));\n```\n\nI don't see any use of mongo or mongoose with the session config.  Did I miss something?\n. I assume this issue does not exist in the latest 0.8.2 version (which I got from NPM).  I'm getting this error when using Mongoose.\n\nI have the session set up correctly per above.  I've tried both `store: new MongoStore({db: mongoose.connection.db})` and the `store: new MongoStore({mongooseConnection: mongoose.connection})` variety.\n. @rknell Not sure what you are pointing at with that link.  Looking around the source code of that project, the session:\n\n```\napp.use(session({\n  secret: '1234890sdlkjfu02',\n  resave: false,\n  saveUninitialized: true\n}));\n```\n\nI don't see any use of mongo or mongoose with the session config.  Did I miss something?\n. ",
    "mrzepinski": "@LinusU My update is here: https://github.com/kcbanner/connect-mongo/pull/104\n\nI thknk it should be `0.5.0` version. It's better to tell others about Express 4.x i compatible now.\n. @LinusU Ok, I closed #104 `pull-request` and here is a valid commit: https://github.com/kcbanner/connect-mongo/pull/105\n. @nevi-me Fix is here, commited to this repository, but version in `NPM` repositories is without it.\n. Do I have appropriate rights to do that? I have never published to NPM :)\n. @kcbanner Could you merge this and publish to `NPM` repositories?\n. @LinusU My update is here: https://github.com/kcbanner/connect-mongo/pull/104\n\nI thknk it should be `0.5.0` version. It's better to tell others about Express 4.x i compatible now.\n. @LinusU Ok, I closed #104 `pull-request` and here is a valid commit: https://github.com/kcbanner/connect-mongo/pull/105\n. @nevi-me Fix is here, commited to this repository, but version in `NPM` repositories is without it.\n. Do I have appropriate rights to do that? I have never published to NPM :)\n. @kcbanner Could you merge this and publish to `NPM` repositories?\n. ",
    "nevi-me": "Would this resolve issues where we're getting session errors? I upgraded to Express 4.0 by mistake, and even though I reverted back to 3.x I still get errors.\n. @LinusU yea my issue was with secure cookies, it worked prior to express 3.4.8 in my local machine, but I think something that changed that wasn't setting cookies, after disabling secure cookies in development that fixed the error, so it wasn't related to connect-mongo. I also seem to no longer get TTL index errors now\n. Would this resolve issues where we're getting session errors? I upgraded to Express 4.0 by mistake, and even though I reverted back to 3.x I still get errors.\n. @LinusU yea my issue was with secure cookies, it worked prior to express 3.4.8 in my local machine, but I think something that changed that wasn't setting cookies, after disabling secure cookies in development that fixed the error, so it wasn't related to connect-mongo. I also seem to no longer get TTL index errors now\n. ",
    "ScreenAware": "Would also vote for a version bump and npm publish\n. Would also vote for a version bump and npm publish\n. ",
    "kentcdodds": "+1 on this issue... @kcbanner where are you?\n. Sorry @mrzepinski, I mistakenly @ mentioned you when I meant to reference @kcbanner :)\n. +1 on this issue... @kcbanner where are you?\n. Sorry @mrzepinski, I mistakenly @ mentioned you when I meant to reference @kcbanner :)\n. ",
    "Myztiq": "+1\n. +1\n. ",
    "redaktor": "@kcbanner \n- npm version is not working with express4 - due to the new middleware concept. The fix is here:\n  https://github.com/mrzepinski/connect-mongo/commit/21359889c4c5b81db85183a7e0549500160cedf2\n\n@mrzepinski \n- if nothing happens, couldn't you submit your fork to npm, e.g. as connect-mongo-express4 -\n  at least until it is pulled here ?\n. :+1: \n. @kcbanner \n- npm version is not working with express4 - due to the new middleware concept. The fix is here:\n  https://github.com/mrzepinski/connect-mongo/commit/21359889c4c5b81db85183a7e0549500160cedf2\n\n@mrzepinski \n- if nothing happens, couldn't you submit your fork to npm, e.g. as connect-mongo-express4 -\n  at least until it is pulled here ?\n. :+1: \n. ",
    "Cengkaruk": "Hey @kcbanner, still version 0.4.0 on the NPM :(\n. Hey @kcbanner, still version 0.4.0 on the NPM :(\n. ",
    "belmarca": "Ping @kcbanner . Npm repos still cite\n\n`Version     0.4.0 last updated 6 months ago`. Should be changed, especially as its an extremely minor fix... with big consequences.\n. Ping @kcbanner . Npm repos still cite\n\n`Version     0.4.0 last updated 6 months ago`. Should be changed, especially as its an extremely minor fix... with big consequences.\n. ",
    "consense": "If it is blocking you in some way you could directly pull from the master branch using\n\n```\n\"connect-mongo\": \"git+https://github.com/kcbanner/connect-mongo.git\"\n```\n\ninside your package.json\n. If it is blocking you in some way you could directly pull from the master branch using\n\n```\n\"connect-mongo\": \"git+https://github.com/kcbanner/connect-mongo.git\"\n```\n\ninside your package.json\n. ",
    "brutalhonesty": "@consense Your change helped me with my project.\n\npackage.json\n\n```\n\"connect-mongo\": \"git+https://github.com/kcbanner/connect-mongo.git\"\n```\n\nserver.js (Express v4)\n\n``` javascript\nvar cookieParser = require('cookie-parser');\nvar session = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\n// ...\napp.use(cookieParser());\napp.use(session({\n    secret: config.session.secret,\n    store: new MongoStore({\n      url: config.mongodb.url + config.mongodb.db.sessions // mongodb://localhost/sessions\n    }),\n    proxy: false,\n    cookie: {\n      secure: false,\n      maxAge: cacheMaxAge, // 1 week\n      httpOnly: false\n    }\n  }));\n```\n\nThanks!\n. @consense Your change helped me with my project.\n\npackage.json\n\n```\n\"connect-mongo\": \"git+https://github.com/kcbanner/connect-mongo.git\"\n```\n\nserver.js (Express v4)\n\n``` javascript\nvar cookieParser = require('cookie-parser');\nvar session = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\n// ...\napp.use(cookieParser());\napp.use(session({\n    secret: config.session.secret,\n    store: new MongoStore({\n      url: config.mongodb.url + config.mongodb.db.sessions // mongodb://localhost/sessions\n    }),\n    proxy: false,\n    cookie: {\n      secure: false,\n      maxAge: cacheMaxAge, // 1 week\n      httpOnly: false\n    }\n  }));\n```\n\nThanks!\n. ",
    "boustanihani": "I got one question, shouldn't the secret be also passed to the cookieParser  like this: ???\n\n``` javascript\napp.use(cookieParser(config.session.secret));\n```\n\nor is this not needed when using a SessionStore (MongoStore) ???\n. I got one question, shouldn't the secret be also passed to the cookieParser  like this: ???\n\n``` javascript\napp.use(cookieParser(config.session.secret));\n```\n\nor is this not needed when using a SessionStore (MongoStore) ???\n. ",
    "ZheFeng": " It's optional now. Salt and algorithm are customisable. All test passed.\n.  It's optional now. Salt and algorithm are customisable. All test passed.\n. ",
    "skebanga": "Thanks Casey! :)\n\n> On 11 Apr 2014, at 11:14 pm, Casey Banner notifications@github.com wrote:\n> \n> Yep, will take care of this on the weekend. I'll finally have time to sit\n> down and maintain this project!\n> \n> On Fri, Apr 11, 2014 at 3:53 AM, Steve Lorimer notifications@github.comwrote:\n> \n> > ## \n> > \n> > Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/109\n> > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. Yes, if you look at the code, originally `connect` exposed the `session` as property `session` (ie: `connect.session`).\n\nNow because `connect` isn't used any more, we just have `session` itself.\n\n`session` exposes `Store`, therefore if you're using `express v3.x`, the code path will be `connect.session.Store`, and if you're using `express v4.x` the code pasth will be `connect.store` (connect being a bit of a misnomer in this case, but the code still works)\n\nSince `npm` hasn't been updated, we're getting the old code, which expects only `connect.session.Store`... so we create a _dummy_ `connect` object by passing `session` as **`{ session: session }`**\n. Thanks Casey! :)\n\n> On 11 Apr 2014, at 11:14 pm, Casey Banner notifications@github.com wrote:\n> \n> Yep, will take care of this on the weekend. I'll finally have time to sit\n> down and maintain this project!\n> \n> On Fri, Apr 11, 2014 at 3:53 AM, Steve Lorimer notifications@github.comwrote:\n> \n> > ## \n> > \n> > Reply to this email directly or view it on GitHubhttps://github.com/kcbanner/connect-mongo/issues/109\n> > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub.\n. Yes, if you look at the code, originally `connect` exposed the `session` as property `session` (ie: `connect.session`).\n\nNow because `connect` isn't used any more, we just have `session` itself.\n\n`session` exposes `Store`, therefore if you're using `express v3.x`, the code path will be `connect.session.Store`, and if you're using `express v4.x` the code pasth will be `connect.store` (connect being a bit of a misnomer in this case, but the code still works)\n\nSince `npm` hasn't been updated, we're getting the old code, which expects only `connect.session.Store`... so we create a _dummy_ `connect` object by passing `session` as **`{ session: session }`**\n. ",
    "feross": "Can we get an update on the express 4 fix being deployed to npm?\n\n(Awesome module, btw!)\n. 1. Open Terminal.\n2. `cd ~/code/connect-mongo`\n3. `npm publish`\n\nkthx bye.\n. Can we get an update on the express 4 fix being deployed to npm?\n\n(Awesome module, btw!)\n. 1. Open Terminal.\n2. `cd ~/code/connect-mongo`\n3. `npm publish`\n\nkthx bye.\n. ",
    "aliaksei-lithium": "Yeah, still wait after weekends )\n. Yeah, still wait after weekends )\n. ",
    "roylines": "pretty please!\n. pretty please!\n. ",
    "andrejewski": "If anyone is hung up on this in the meantime, just do:\n\n``` javascript\nvar session = require(\"express-session\"),\n    MongoStore = require(\"connect-mongo\")({session: session})\n```\n\nConnect-Mongo isn't dependent on any other part of Express. Express currently blocks you from rewriting express.session (I have submitted a fix for that), so the object literal is the next best thing.\n. I am using the npm version in the application I am writing right now. I ran the code and it works perfectly, no error. I checked the Connect-Mongo source before I commented, all MongoStore needs is session. Do a cmd-f on \"connect\" in the [source](https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js).\n. If anyone is hung up on this in the meantime, just do:\n\n``` javascript\nvar session = require(\"express-session\"),\n    MongoStore = require(\"connect-mongo\")({session: session})\n```\n\nConnect-Mongo isn't dependent on any other part of Express. Express currently blocks you from rewriting express.session (I have submitted a fix for that), so the object literal is the next best thing.\n. I am using the npm version in the application I am writing right now. I ran the code and it works perfectly, no error. I checked the Connect-Mongo source before I commented, all MongoStore needs is session. Do a cmd-f on \"connect\" in the [source](https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js).\n. ",
    "JuhQ": "+1 for npm\n. +1 for npm\n. ",
    "rick-redfall": "+1\n. +1\n. ",
    "timeinfeldt": "+1\n. +1\n. ",
    "haeusler": "+1\n. +1\n. ",
    "Thilo84": "+1\n. +1\n. ",
    "abi": "+1\n. +1\n. ",
    "lytespark": "I see the library checks for session and session.cookie before writing to database (line 222):\n\n```\nif (session && session.cookie) { /* ... */ }\n```\n\n. Is it possible to also check, for example, session.passport.user as well, so not registered users or CURL requests do not produce database entries?\n. I use session without expiration (would never like users to be logged out). So system never knows if session is actually dead (never be used by client anymore). I would like to prevent unwanted sessions to be created in database (for example, when I just CURL website). Am I actually right: if Google robot will try to access/index website and for that it needs 1000 requests, 1000 entries in database will be created?\n\nI had to modify currently stable connect-mongo module to make it work for me. If anybody is interested how, I will be glad to explain.\n. Everybody is highly recommend to expire sessions, but every session expiration is a potential threat to lose a customer.\n. People do tend to forget their emails / passwords.\n. I see the library checks for session and session.cookie before writing to database (line 222):\n\n```\nif (session && session.cookie) { /* ... */ }\n```\n\n. Is it possible to also check, for example, session.passport.user as well, so not registered users or CURL requests do not produce database entries?\n. I use session without expiration (would never like users to be logged out). So system never knows if session is actually dead (never be used by client anymore). I would like to prevent unwanted sessions to be created in database (for example, when I just CURL website). Am I actually right: if Google robot will try to access/index website and for that it needs 1000 requests, 1000 entries in database will be created?\n\nI had to modify currently stable connect-mongo module to make it work for me. If anybody is interested how, I will be glad to explain.\n. Everybody is highly recommend to expire sessions, but every session expiration is a potential threat to lose a customer.\n. People do tend to forget their emails / passwords.\n. ",
    "ataurrahim": "Thanks, skipping session middleware for certain request header did the job.\n. Thanks, skipping session middleware for certain request header did the job.\n. ",
    "igorpavlov": "Of course I don't mind, take a look at my modified module: http://jsfiddle.net/YPCzU/\n\nIgor Pavlov, Co-Founder LyteSpark\n. Of course I don't mind, take a look at my modified module: http://jsfiddle.net/YPCzU/\n\nIgor Pavlov, Co-Founder LyteSpark\n. ",
    "risseraka": "That is indeed the issue here.\n\n`db.openCalled` does not mean the connection has been successfully opened yet.\n\nI guess your solution would work too but how do you determine if the connection is up?\n\nWould this satisfy the requirement?\n`db.once('open', function callback () { ... }`\n. @mattdeluco I believe that's the correct solution and what I used in my dirty quick fix.\n\nThat being said, there still is an issue with calls while db driver has not connected. \n. No biggie.\n\n## Cheers!\n\nAdrien Risser,\nNode.js Consultant\n+33 6 59 60 32 58\nOn Jun 3, 2014 9:02 PM, \"Matt DeLuco\" notifications@github.com wrote:\n\n> I should have taken a second look at your fix before posting..\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/pull/112#issuecomment-45006405\n> .\n. That is indeed the issue here.\n\n`db.openCalled` does not mean the connection has been successfully opened yet.\n\nI guess your solution would work too but how do you determine if the connection is up?\n\nWould this satisfy the requirement?\n`db.once('open', function callback () { ... }`\n. @mattdeluco I believe that's the correct solution and what I used in my dirty quick fix.\n\nThat being said, there still is an issue with calls while db driver has not connected. \n. No biggie.\n\n## Cheers!\n\nAdrien Risser,\nNode.js Consultant\n+33 6 59 60 32 58\nOn Jun 3, 2014 9:02 PM, \"Matt DeLuco\" notifications@github.com wrote:\n\n> I should have taken a second look at your fix before posting..\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/pull/112#issuecomment-45006405\n> .\n. ",
    "stephenmathieson": "I suppose I should have opened an issue rather than a PR..\n\nMy use case: I need a few separate instances of this thing running on the same box (dev/qa/etc).  By having the ability to set default options in my (shared) config-loader, I don't have to pass the same options into the module over and over again.  I know this is a bit edge-casey, and it's not horrible to `new MongoStore({ ... })` in multiple places, but it'd be nice if I didn't have to.\n. I suppose I should have opened an issue rather than a PR..\n\nMy use case: I need a few separate instances of this thing running on the same box (dev/qa/etc).  By having the ability to set default options in my (shared) config-loader, I don't have to pass the same options into the module over and over again.  I know this is a bit edge-casey, and it's not horrible to `new MongoStore({ ... })` in multiple places, but it'd be nice if I didn't have to.\n. ",
    "dreyacosta": "Hi!\n\nI have the same problem. \n\nI think ReplicaSet is not covered by this module as I see here: https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js#L87\n. @danielflippance you can find one solution here: https://github.com/kcbanner/connect-mongo/pull/25/files\n\nAnyway I decided to make my own session store implementation for Express.\n. Hi!\n\nI have the same problem. \n\nI think ReplicaSet is not covered by this module as I see here: https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js#L87\n. @danielflippance you can find one solution here: https://github.com/kcbanner/connect-mongo/pull/25/files\n\nAnyway I decided to make my own session store implementation for Express.\n. ",
    "danielflippance": "I have the same problem hosting on Heroku using Compose.io (MongoHQ). @dreyacosta Did you find any solution?\n. Thanks @dreyacosta, I used connect-mongostore and it's working with ReplicaSets https://github.com/diversario/connect-mongostore\n. I have the same problem hosting on Heroku using Compose.io (MongoHQ). @dreyacosta Did you find any solution?\n. Thanks @dreyacosta, I used connect-mongostore and it's working with ReplicaSets https://github.com/diversario/connect-mongostore\n. ",
    "arimus": "There's also an open pull request that supposedly addresses this issue:\n\nhttps://github.com/kcbanner/connect-mongo/pull/120\n. Same issue here.  It looks like this pull request is supposed to address such things:\n\nhttps://github.com/kcbanner/connect-mongo/pull/120\n\nIt would be nice to see this or something equivalent get integrated in.  Replica support is rather important.\n. Looks like there is also a previous issue with more information too.\n\nhttps://github.com/kcbanner/connect-mongo/issues/115\n. There's also an open pull request that supposedly addresses this issue:\n\nhttps://github.com/kcbanner/connect-mongo/pull/120\n. Same issue here.  It looks like this pull request is supposed to address such things:\n\nhttps://github.com/kcbanner/connect-mongo/pull/120\n\nIt would be nice to see this or something equivalent get integrated in.  Replica support is rather important.\n. Looks like there is also a previous issue with more information too.\n\nhttps://github.com/kcbanner/connect-mongo/issues/115\n. ",
    "scarabele": "+up\n. +up\n. ",
    "joaovieira": "I worked around it by using the same Mongoose connection with MongoStore:\n\n``` javascript\nvar store = new MongoStore({\n  db: require('./db.js').connection.db\n});\n```\n. Yes, we have the same and we use the standard Mongo connection string (http://docs.mongodb.org/manual/reference/connection-string/#connections-standard-connection-string-format), with and without replica sets.\n\nAlso, if you check https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js#L100 , you see that if you provide a \"node-mongo-native\" DB object, it does not open a new connection and simply uses the one provided.\n. I worked around it by using the same Mongoose connection with MongoStore:\n\n``` javascript\nvar store = new MongoStore({\n  db: require('./db.js').connection.db\n});\n```\n. Yes, we have the same and we use the standard Mongo connection string (http://docs.mongodb.org/manual/reference/connection-string/#connections-standard-connection-string-format), with and without replica sets.\n\nAlso, if you check https://github.com/kcbanner/connect-mongo/blob/master/lib/connect-mongo.js#L100 , you see that if you provide a \"node-mongo-native\" DB object, it does not open a new connection and simply uses the one provided.\n. ",
    "the-AjK": "Same problem here, any news?\n. Same problem here, any news?\n. ",
    "ragulka": "I already found a solution - I'm creating a db connection instance with the native mongodb driver and passing that in in config - seems to work :)\n. > There is no difference between the two implementations. You just assign your instance reference to a scoped variable.\r\n\r\nYou'd assume that's true. However, if you pass in the db url (not an already existing DB connection), a new db connection is opened every time. This is evidenced by my experience in making this small change in our production app. We're down from 1500 db connections to 40, and a leaky memory to a stable memory usage. \r\n\r\nWhy it makes a difference: `app.use()` is used to queue middleware to each request. Whatever you instantiate inside the function that you `app.use()`, will be instantiated on every single request. However, if you pass in a reference, all the requests will share the same instance, all the time. There are valid use cases for both approaches, but a DB connection is definitely something that should always be re-used rather than re-instantiated.. I already found a solution - I'm creating a db connection instance with the native mongodb driver and passing that in in config - seems to work :)\n. > There is no difference between the two implementations. You just assign your instance reference to a scoped variable.\r\n\r\nYou'd assume that's true. However, if you pass in the db url (not an already existing DB connection), a new db connection is opened every time. This is evidenced by my experience in making this small change in our production app. We're down from 1500 db connections to 40, and a leaky memory to a stable memory usage. \r\n\r\nWhy it makes a difference: `app.use()` is used to queue middleware to each request. Whatever you instantiate inside the function that you `app.use()`, will be instantiated on every single request. However, if you pass in a reference, all the requests will share the same instance, all the time. There are valid use cases for both approaches, but a DB connection is definitely something that should always be re-used rather than re-instantiated.. ",
    "noducks": "+1 - But, in the mean time... this gets me 0.4.2\n\n`npm install git+https://git@github.com/kcbanner/connect-mongo`\n. +1 - But, in the mean time... this gets me 0.4.2\n\n`npm install git+https://git@github.com/kcbanner/connect-mongo`\n. ",
    "leider": "+1 Please\n. for me the issue is solved by migrating to https://github.com/diversario/connect-mongostore\n. +1 Please\n. for me the issue is solved by migrating to https://github.com/diversario/connect-mongostore\n. ",
    "ilanbiala": "+1 please.\n. @jdesboeufs Yes, please. Can someone take control of the fork?\n. @kcbanner please just add a collaborator who will bring this up to speed on everything. Cleanup of issues and PRs and prepare it for Express 5 if any changes need to be made.\n. Connect and Express should be compatible, so there shouldn't be much of a difference..\n. @jdesboeufs can't wait for some great new functionality and updates!\n. This is probably encapsulated in #131, no?\n. @jdesboeufs LGTM, I would say it's fine but you should just confirm that nothing anywhere else has changed.\n\n@vkarpov15 great addition by the way.\n. With a quick look at `connect-mongo.js`, it seems like the issue is here.\n\n```\nfunction buildUrlFromOptions() {\n      if(!options.db || typeof options.db !== 'string') {\n        throw new Error('Required MongoStore option `db` missing');\n      }\n```\n\nYou shouldn't be checking to see if it isn't a string, because I'm what if I'm passing a native db object like in the examples.\n. @jdesboeufs Also you should make a note in the Changelog that db when using Mongoose doesn't work, and it has to be mongooseConnection, because that seems to have changed. Still I think you have to avoid checking against a string.\n. Gotcha, sounds good. I would just improve the docs a little.\n. @jdesboeufs any plans for future versions? Maybe we should create a wiki page or .md or in the README.md file or something like that so people can see?\n. Can we make a tracking issue and milestone for 1.0.0?\n. Db is a mongoose instance, isn't db.connection the connection.\n. @jdesboeufs sorry I'm not using the advanced, I'm working off of the \"Reuse a mongoose connection - basic usage\"\n\nIn the Node REPL, I checked that `mongoose.connection === db.connection` where `db = mongoose.connect()`. So what could be wrong?\n. The app doesn't go past that line. I placed two middlewares, one before and one after, to see where it gets stuck, and only the first gets called. I can wait for 10 minutes and nothing will happen.\n. the `db` is already defined there, because the session code runs in a promise that is resolved by `mongoose.connect()`.\n. A minimal reproduction scenario or an actual test?\n. ```\nvar db = mongoose.connect(config.db, function(err) {\n  if (!err) {\n    var session = require('express-session');\n    var MongoStore = require('connect-mongo')(session);\n\n    // stops right here\n    app.use(session({\n      saveUninitialized: true,\n      resave: true,\n      secret: 'abc',\n      store: new MongoStore({\n        mongooseConnection: db.connection,\n        collection: 'sessions'\n      })\n    }));\n  }\n});\n```\n\nThere are some promises that wrap around this and go through different files, but I have `console.log()`ed to find where it stops, and it stops right when I use the session.\n. `db.connection` produces the same as `mongoose.connection`, so how can `db === undefined`? Also, waiting for the connection adds time and complexity, doesn't it? I can just give it the connection if I have it already..\n. `db.connection.readyState` = 1 right before I use the session middleware and ask connect-mongo to connect.\n. @jdesboeufs seems there were some remnants of an old version, I did some cache cleaning and installing and the problem doesn't come back.\n. @jdesboeufs 4.0.0-rc1 was just released a couple days ago, so it looks like we can start testing support for Mongoose 4.0 soon. :)\n. @jdesboeufs what does cleaning the API entail?\n. @jdesboeufs I'm also curious as to what issue can be fixed in connect-mongo.\n. @jdesboeufs is there anything that requires 0.10? I'm fine with dropping test support for it, but we shouldn't try to break compatibility, should we?\n. Is there any reason to actually not have code tested against it? It's free and it doesn't fail on 0.8 right? I don't see any disadvantages until 0.8 becomes a hassle to maintain.\n. @jdesboeufs any update on this PR?\n. @jdesboeufs any idea what I'm doing wrong?\n. @jdesboeufs I'm just using the default with 2.6, but my sessions keep building up.\n. connect-mongo ~0.7.0, options:\n\n```\napp.use(session({\n    saveUninitialized: true,\n    resave: false,\n    secret: config.sessionSecret,\n    store: new MongoStore({\n      mongooseConnection: db.connection,\n      collection: config.sessionCollection\n    })\n  }));\n```\n. How do I check?\n. What does wrapping it in `process.nextTick` do?\n. Use a more permanent store such as MongoDB.\n. Provide your options please (all the time).\n. +1 please.\n. @jdesboeufs Yes, please. Can someone take control of the fork?\n. @kcbanner please just add a collaborator who will bring this up to speed on everything. Cleanup of issues and PRs and prepare it for Express 5 if any changes need to be made.\n. Connect and Express should be compatible, so there shouldn't be much of a difference..\n. @jdesboeufs can't wait for some great new functionality and updates!\n. This is probably encapsulated in #131, no?\n. @jdesboeufs LGTM, I would say it's fine but you should just confirm that nothing anywhere else has changed.\n\n@vkarpov15 great addition by the way.\n. With a quick look at `connect-mongo.js`, it seems like the issue is here.\n\n```\nfunction buildUrlFromOptions() {\n      if(!options.db || typeof options.db !== 'string') {\n        throw new Error('Required MongoStore option `db` missing');\n      }\n```\n\nYou shouldn't be checking to see if it isn't a string, because I'm what if I'm passing a native db object like in the examples.\n. @jdesboeufs Also you should make a note in the Changelog that db when using Mongoose doesn't work, and it has to be mongooseConnection, because that seems to have changed. Still I think you have to avoid checking against a string.\n. Gotcha, sounds good. I would just improve the docs a little.\n. @jdesboeufs any plans for future versions? Maybe we should create a wiki page or .md or in the README.md file or something like that so people can see?\n. Can we make a tracking issue and milestone for 1.0.0?\n. Db is a mongoose instance, isn't db.connection the connection.\n. @jdesboeufs sorry I'm not using the advanced, I'm working off of the \"Reuse a mongoose connection - basic usage\"\n\nIn the Node REPL, I checked that `mongoose.connection === db.connection` where `db = mongoose.connect()`. So what could be wrong?\n. The app doesn't go past that line. I placed two middlewares, one before and one after, to see where it gets stuck, and only the first gets called. I can wait for 10 minutes and nothing will happen.\n. the `db` is already defined there, because the session code runs in a promise that is resolved by `mongoose.connect()`.\n. A minimal reproduction scenario or an actual test?\n. ```\nvar db = mongoose.connect(config.db, function(err) {\n  if (!err) {\n    var session = require('express-session');\n    var MongoStore = require('connect-mongo')(session);\n\n    // stops right here\n    app.use(session({\n      saveUninitialized: true,\n      resave: true,\n      secret: 'abc',\n      store: new MongoStore({\n        mongooseConnection: db.connection,\n        collection: 'sessions'\n      })\n    }));\n  }\n});\n```\n\nThere are some promises that wrap around this and go through different files, but I have `console.log()`ed to find where it stops, and it stops right when I use the session.\n. `db.connection` produces the same as `mongoose.connection`, so how can `db === undefined`? Also, waiting for the connection adds time and complexity, doesn't it? I can just give it the connection if I have it already..\n. `db.connection.readyState` = 1 right before I use the session middleware and ask connect-mongo to connect.\n. @jdesboeufs seems there were some remnants of an old version, I did some cache cleaning and installing and the problem doesn't come back.\n. @jdesboeufs 4.0.0-rc1 was just released a couple days ago, so it looks like we can start testing support for Mongoose 4.0 soon. :)\n. @jdesboeufs what does cleaning the API entail?\n. @jdesboeufs I'm also curious as to what issue can be fixed in connect-mongo.\n. @jdesboeufs is there anything that requires 0.10? I'm fine with dropping test support for it, but we shouldn't try to break compatibility, should we?\n. Is there any reason to actually not have code tested against it? It's free and it doesn't fail on 0.8 right? I don't see any disadvantages until 0.8 becomes a hassle to maintain.\n. @jdesboeufs any update on this PR?\n. @jdesboeufs any idea what I'm doing wrong?\n. @jdesboeufs I'm just using the default with 2.6, but my sessions keep building up.\n. connect-mongo ~0.7.0, options:\n\n```\napp.use(session({\n    saveUninitialized: true,\n    resave: false,\n    secret: config.sessionSecret,\n    store: new MongoStore({\n      mongooseConnection: db.connection,\n      collection: config.sessionCollection\n    })\n  }));\n```\n. How do I check?\n. What does wrapping it in `process.nextTick` do?\n. Use a more permanent store such as MongoDB.\n. Provide your options please (all the time).\n. ",
    "totty90": "+1\n. I don't think so... Can you say all the requirements needed for this lib to work properly?\n\nCan't see any in the readme\n. +1\n. I don't think so... Can you say all the requirements needed for this lib to work properly?\n\nCan't see any in the readme\n. ",
    "franckl": "+1 it would be nice if someone could take the lead of a fork\n\nOn Mon, Dec 15, 2014 at 3:40 PM, Ilan Biala notifications@github.com\nwrote:\n\n> Yes, please. Can someone take control of the fork?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/119#issuecomment-67070922\n> .\n. I have a similar issue, I upgraded to mongodb native 2.0.21 from 1.4.32 and it stopped working. My code is the same as @barisusakli \n\nEdit: I am using mongo 2.6.8\n. I had the same issue with openshift.\nHere is what I did to detect the proxy \n\n``` javascript\nif (production) {\n                    if (req.ips.length === 0 || req.headers['user-agent'] === 'Ruby') {\n                        req.session.destroy(function () {});\n                    } else {\n                        req.session.ips = req.ips;\n                        req.session.useragent = req.headers['user-agent'];\n                    }\n                    next();\n                }\n```\n. +1 it would be nice if someone could take the lead of a fork\n\nOn Mon, Dec 15, 2014 at 3:40 PM, Ilan Biala notifications@github.com\nwrote:\n\n> Yes, please. Can someone take control of the fork?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/kcbanner/connect-mongo/issues/119#issuecomment-67070922\n> .\n. I have a similar issue, I upgraded to mongodb native 2.0.21 from 1.4.32 and it stopped working. My code is the same as @barisusakli \n\nEdit: I am using mongo 2.6.8\n. I had the same issue with openshift.\nHere is what I did to detect the proxy \n\n``` javascript\nif (production) {\n                    if (req.ips.length === 0 || req.headers['user-agent'] === 'Ruby') {\n                        req.session.destroy(function () {});\n                    } else {\n                        req.session.ips = req.ips;\n                        req.session.useragent = req.headers['user-agent'];\n                    }\n                    next();\n                }\n```\n. ",
    "ofirzh": "Hi, \naccording to docs the maxAge should be without \"new Date\". Only duration of life.\nExpire should be with Date.\nYou also maybe need to set clearInterval. look on topic:\n\nhttp://stackoverflow.com/questions/12081741/connect-mongo-sessions-not-being-deleted-automatically\n. Hi, \naccording to docs the maxAge should be without \"new Date\". Only duration of life.\nExpire should be with Date.\nYou also maybe need to set clearInterval. look on topic:\n\nhttp://stackoverflow.com/questions/12081741/connect-mongo-sessions-not-being-deleted-automatically\n. ",
    "ksheedlo": "This evidently happened because connect split sessions out of core. You can change the tests to use `express-session` and it will work again. I'm working on a PR to that effect now but this repo looks like it hasn't been maintained in a while. @kcbanner are you still here?\n. @jdesboeufs The improvement is the ability to change between storing sessions as a string and storing sessions as an object without trashing the sessions that already exist in the DB. In our case, we were using the default options and added a feature that required the ability to query for a certain attribute in the session. We needed to perform this upgrade transparently without logging everyone out of the app.\n\nIf this feature isn't important to you, no worries! I'm already running the change in production from my fork. OTOH if it is, here's the code. Cheers!\n. This evidently happened because connect split sessions out of core. You can change the tests to use `express-session` and it will work again. I'm working on a PR to that effect now but this repo looks like it hasn't been maintained in a while. @kcbanner are you still here?\n. @jdesboeufs The improvement is the ability to change between storing sessions as a string and storing sessions as an object without trashing the sessions that already exist in the DB. In our case, we were using the default options and added a feature that required the ability to query for a certain attribute in the session. We needed to perform this upgrade transparently without logging everyone out of the app.\n\nIf this feature isn't important to you, no worries! I'm already running the change in production from my fork. OTOH if it is, here's the code. Cheers!\n. ",
    "robbiet480": "Look at that, fixed it all on my own. This was due to `res.end(500,err)`. It should have been `res.send(500,err)`\n. Look at that, fixed it all on my own. This was due to `res.end(500,err)`. It should have been `res.send(500,err)`\n. ",
    "neverfox": ":+1: \n. ``` javascript\nmodule.exports = function(conn) {\n  return session({\n    store: new MongoStore({ mongoose_connection: conn }),\n    secret: config.cookie_secret,\n    resave: true,\n    saveUninitialized: true\n  });\n}\n```\n. :+1: \n. ``` javascript\nmodule.exports = function(conn) {\n  return session({\n    store: new MongoStore({ mongoose_connection: conn }),\n    secret: config.cookie_secret,\n    resave: true,\n    saveUninitialized: true\n  });\n}\n```\n. ",
    "kfatehi": "@neverfox thank you\n. realizing this has to do with express-session, not connect-mongo (i'm using connect-redis right now in fact) and thus closing\n. @neverfox thank you\n. realizing this has to do with express-session, not connect-mongo (i'm using connect-redis right now in fact) and thus closing\n. ",
    "dwarburt": "Do you have a C/C++ compiler installed?\n. It has some native code, node-gyp is the C++ build system for node addons.  You can get Visual Studio Express 2013 with Update 4 for Windows Desktop for free from MS\n. Do you have a C/C++ compiler installed?\n. It has some native code, node-gyp is the C++ build system for node addons.  You can get Visual Studio Express 2013 with Update 4 for Windows Desktop for free from MS\n. ",
    "dlongley": "It might also be useful to print out the actual error that occurs when `ensureIndex` fails as we first thought this was related to the race condition described in other issues (#65, #70, #80).\n. It might also be useful to print out the actual error that occurs when `ensureIndex` fails as we first thought this was related to the race condition described in other issues (#65, #70, #80).\n. ",
    "jasonsims": "Awesome! What does [muri](https://github.com/aheckmann/muri) solve that [mongo-uri](https://github.com/supershabam/mongo-uri) does not?\n. Ah I get it. Since `mongodb.MongoClient` already has URI validation you'll just passthrough what ever the user provides. \n. Awesome! What does [muri](https://github.com/aheckmann/muri) solve that [mongo-uri](https://github.com/supershabam/mongo-uri) does not?\n. Ah I get it. Since `mongodb.MongoClient` already has URI validation you'll just passthrough what ever the user provides. \n. ",
    "umassthrower": "Good change, I had been using 0.4.2 with the call to validateDatabaseName commented out for this reason.\n. Good change, I had been using 0.4.2 with the call to validateDatabaseName commented out for this reason.\n. ",
    "snowdream": "@kcbanner  see https://github.com/jaredhanson/passport/issues/216\n. sorry , i am a newbie.  \nIt is my project:\nhttps://github.com/SnowdreamCMS/nodejs-gulp-template\n\n@jdesboeufs \nwhy the session can be created automacitally,but can not be removed when i logout.\n\n```\n  app.get('/logout', function(req, res) {\n      req.logout();\n      res.redirect('/');\n  });\n```\n. @jdesboeufs excellent, thank you ~\n. @kcbanner  see https://github.com/jaredhanson/passport/issues/216\n. sorry , i am a newbie.  \nIt is my project:\nhttps://github.com/SnowdreamCMS/nodejs-gulp-template\n\n@jdesboeufs \nwhy the session can be created automacitally,but can not be removed when i logout.\n\n```\n  app.get('/logout', function(req, res) {\n      req.logout();\n      res.redirect('/');\n  });\n```\n. @jdesboeufs excellent, thank you ~\n. ",
    "efkan": "Hi @jdesboeufs ,\n\nMy connect-mongo version seems '0.4.2'. It didn't return any exception. My MongoDB runs on a EC2. Sometimes I can login at two times, seldom three times. If I don't have connect-mongo (when I remove store: parameter) I can login at first try.\n. Thanks @jdesboeufs,\n\nAfter I've read your response now me too use 0.5.2 . But it works same incorrectly. At my first attempt, my authentication values ( username, pass etc. ) is recorded to session collection. But other routers don't know req.session information. They return \"undefined\" for session value. At my second attempt, the all routers know req.session.\n\nI couldn't figure out.\n. @jdesboeufs  I found! \n\nIt's my fault! :cry: \n\nI use two queries to authenticate a user. First query for user collection and second query for images collection to get **user picture** (base64 data). Actually two queries aren't problem. But user pic data is pretty big as a base64 (image/png 300x300 px) and **I had tried** store this pic into the session*\\* incorrectly**\n\nBy the way, at version 0.5.2 I cannot use `req.session.destroy();` The module specifies `connect-mongo.js:314:9` I think it need a _sid_ parameter.\nI try to give default express session key value ('connect.sid'). It doesn't work.\n\nMy codes;\n\n```\nsession.get('/logout', function(req, res){\n  req.session.destroy();\n  res.send(\"/\");\n});\n```\n\nThank you and forgive me I took your time. I'm sorry..\n. Actually I've read your last comment. However now, I understand :)\nBut I can destroy my session using same code with version 0.4.2. \nI'll try downgrade :)\nThank you again. Have a nice day...\n. I've tried immediately and it worked smoothly...\nThank you for taking action quickly.  \nHappy new year! :smiley:\n. Thanks @ilanbiala ,\nI'm already using MongoDB to store session or everything.\nWhat else?\n. I don't know why but now there is no _warning_ message.Thanks for now :)\n. Hi @jdesboeufs ,\n\nMy connect-mongo version seems '0.4.2'. It didn't return any exception. My MongoDB runs on a EC2. Sometimes I can login at two times, seldom three times. If I don't have connect-mongo (when I remove store: parameter) I can login at first try.\n. Thanks @jdesboeufs,\n\nAfter I've read your response now me too use 0.5.2 . But it works same incorrectly. At my first attempt, my authentication values ( username, pass etc. ) is recorded to session collection. But other routers don't know req.session information. They return \"undefined\" for session value. At my second attempt, the all routers know req.session.\n\nI couldn't figure out.\n. @jdesboeufs  I found! \n\nIt's my fault! :cry: \n\nI use two queries to authenticate a user. First query for user collection and second query for images collection to get **user picture** (base64 data). Actually two queries aren't problem. But user pic data is pretty big as a base64 (image/png 300x300 px) and **I had tried** store this pic into the session*\\* incorrectly**\n\nBy the way, at version 0.5.2 I cannot use `req.session.destroy();` The module specifies `connect-mongo.js:314:9` I think it need a _sid_ parameter.\nI try to give default express session key value ('connect.sid'). It doesn't work.\n\nMy codes;\n\n```\nsession.get('/logout', function(req, res){\n  req.session.destroy();\n  res.send(\"/\");\n});\n```\n\nThank you and forgive me I took your time. I'm sorry..\n. Actually I've read your last comment. However now, I understand :)\nBut I can destroy my session using same code with version 0.4.2. \nI'll try downgrade :)\nThank you again. Have a nice day...\n. I've tried immediately and it worked smoothly...\nThank you for taking action quickly.  \nHappy new year! :smiley:\n. Thanks @ilanbiala ,\nI'm already using MongoDB to store session or everything.\nWhat else?\n. I don't know why but now there is no _warning_ message.Thanks for now :)\n. ",
    "a00andos": "Thanks for your answer, but I require some clarifications =)\nI'm using Mongo Native 2.0.6. Server `autoReconnect` is `true` as default, and thats what I'm using. \nSo the answer are as follows? \n**Q1:** An exception is thrown, which may crash my app... Should I `catch` this exception in order not to crash? And in that case, where?\n**Q2:** The connection will try to auto reconnect if connection is disrupted... So this means that request that rely on connect-mongo will be stuck in loading until db is running again? Is there a way for me to tell connect-mongo to return an error page if the connection is down?.\n\nAnd some more questions:\n**Q3:** _-\"Otherwise you have a problem\"_... I'm not sure what _otherwise_ are refering to here=D\n\n**Q4** What exactly is the _issue_ you are going to fix ? =)\n\nThanks again for your help and module!\n. Thanks for your answer, but I require some clarifications =)\nI'm using Mongo Native 2.0.6. Server `autoReconnect` is `true` as default, and thats what I'm using. \nSo the answer are as follows? \n**Q1:** An exception is thrown, which may crash my app... Should I `catch` this exception in order not to crash? And in that case, where?\n**Q2:** The connection will try to auto reconnect if connection is disrupted... So this means that request that rely on connect-mongo will be stuck in loading until db is running again? Is there a way for me to tell connect-mongo to return an error page if the connection is down?.\n\nAnd some more questions:\n**Q3:** _-\"Otherwise you have a problem\"_... I'm not sure what _otherwise_ are refering to here=D\n\n**Q4** What exactly is the _issue_ you are going to fix ? =)\n\nThanks again for your help and module!\n. ",
    "cvillemure": "I would like to have an autoReconnect \"timeout\" callback to be able to send an error message to the client instead of being stuck in an infinite loop!\n. I would like to have an autoReconnect \"timeout\" callback to be able to send an error message to the client instead of being stuck in an infinite loop!\n. ",
    "teh0xqb": "@marcoslhc and me forked and added the error emitter. @jdesboeufs: Will probably submit a pull request soon for this issue.\n. @kcbanner ^\n. Need to make tests pass first.\n. Fixes #148 \n. Need to fix tests... :-)\n. @marcoslhc and me forked and added the error emitter. @jdesboeufs: Will probably submit a pull request soon for this issue.\n. @kcbanner ^\n. Need to make tests pass first.\n. Fixes #148 \n. Need to fix tests... :-)\n. ",
    "mfmendiola": "@quilesbaker Thanks for this fix!  Any idea when this will be released?\n. @quilesbaker Thanks for this fix!  Any idea when this will be released?\n. ",
    "rafaelcardoso": "Then, I guess i'm doing something wrong...\n\nI'm using connect-mongo 0.6.0, express 4.11.1, and express-session 1.10.1\n\nI just checked express-session code where it verify if the store module (connect-mongo) has the touch method implemented (on this line https://github.com/expressjs/session/blob/master/index.js#L132 )\n\nAnd this test is returning false for me.. Any Ideas?\n\nThank you..\n. Here is my config:\n\napp.use(session({\n secret: configAuth.sessionSecret,\n    cookie: {\n        maxAge: configAuth.cookieLifeTime\n    },\n    saveUninitialized: false,\n    resave: false,\n    rolling: false,\n    store: new mongoStore({\n        collection: 'guaxinim_session',\n        mongooseConnection: mongoose.connection,\n        autoRemove: 'interval',\n        autoRemoveInterval: 20, // In minutes\n        hash: {\n            salt: configAuth.sidSaltSecret,\n            algorithm: 'sha1'\n        }\n    })\n}));\n\nWhen I try to do this:\n\nrouter.get('/', function(req, res) {\n    req.session.touch();\n    res.render('index', {\n        partials: ['partials/main']\n    });\n});\n\nNothing happens on database :/\n. Here is my attempt to propose this at the express-session repo ):\nhttps://github.com/expressjs/session/issues/113\n. Here is how I implemented this feature https://github.com/rafaelcardoso/connect-mongo/commit/d07f5c88ae64e72acd6f9056c5cfaefc2cf4291b\n\nTo use this, you just need to pass an property called `updateAfter`, and pass a custom serialize function ( to add a field called lastModifed ), like this\n\n``` javascript\napp.use(session({\n    secret: 'keyboard cat'\n    cookie: {\n        maxAge: 3 * 24 * 3600000\n    },\n    saveUninitialized: false,\n    resave: false,\n    rolling: false,\n    store: new mongoStore({\n        updateAfter: 24 * 3600000, // update only once a day\n        serialize: function (session) {\n            var obj = {};\n            obj.passport = session.passport;\n            obj.lastModified = Date.now();\n            obj.cookie = session.cookie.toJSON ? session.cookie.toJSON() : session.cookie;\n            obj = JSON.stringify(obj);\n            return obj;\n        },\n        unserialize: function (session) {\n            return JSON.parse(session);\n        }\n    })\n}));\n```\n\nit's pretty simple, right?\nWhat do you think?\n. I noticed that Travis build failed due to lint errors, and I already solved it, after this PR be merged I can send a new one with the corrections.\n. I fully agree, putting the touchAfter property at the document level is much more convenient.\n. The `lastModified` property will be accessible at the document level, this bug was duplicating the property (at document level and inside the session prop).\n. If the developer want to store the `lastModified` property inside the session we will have this data duplicated :s\n. There is something wrong with this PR? It's been a few days which is open :disappointed: \n. Then, I guess i'm doing something wrong...\n\nI'm using connect-mongo 0.6.0, express 4.11.1, and express-session 1.10.1\n\nI just checked express-session code where it verify if the store module (connect-mongo) has the touch method implemented (on this line https://github.com/expressjs/session/blob/master/index.js#L132 )\n\nAnd this test is returning false for me.. Any Ideas?\n\nThank you..\n. Here is my config:\n\napp.use(session({\n secret: configAuth.sessionSecret,\n    cookie: {\n        maxAge: configAuth.cookieLifeTime\n    },\n    saveUninitialized: false,\n    resave: false,\n    rolling: false,\n    store: new mongoStore({\n        collection: 'guaxinim_session',\n        mongooseConnection: mongoose.connection,\n        autoRemove: 'interval',\n        autoRemoveInterval: 20, // In minutes\n        hash: {\n            salt: configAuth.sidSaltSecret,\n            algorithm: 'sha1'\n        }\n    })\n}));\n\nWhen I try to do this:\n\nrouter.get('/', function(req, res) {\n    req.session.touch();\n    res.render('index', {\n        partials: ['partials/main']\n    });\n});\n\nNothing happens on database :/\n. Here is my attempt to propose this at the express-session repo ):\nhttps://github.com/expressjs/session/issues/113\n. Here is how I implemented this feature https://github.com/rafaelcardoso/connect-mongo/commit/d07f5c88ae64e72acd6f9056c5cfaefc2cf4291b\n\nTo use this, you just need to pass an property called `updateAfter`, and pass a custom serialize function ( to add a field called lastModifed ), like this\n\n``` javascript\napp.use(session({\n    secret: 'keyboard cat'\n    cookie: {\n        maxAge: 3 * 24 * 3600000\n    },\n    saveUninitialized: false,\n    resave: false,\n    rolling: false,\n    store: new mongoStore({\n        updateAfter: 24 * 3600000, // update only once a day\n        serialize: function (session) {\n            var obj = {};\n            obj.passport = session.passport;\n            obj.lastModified = Date.now();\n            obj.cookie = session.cookie.toJSON ? session.cookie.toJSON() : session.cookie;\n            obj = JSON.stringify(obj);\n            return obj;\n        },\n        unserialize: function (session) {\n            return JSON.parse(session);\n        }\n    })\n}));\n```\n\nit's pretty simple, right?\nWhat do you think?\n. I noticed that Travis build failed due to lint errors, and I already solved it, after this PR be merged I can send a new one with the corrections.\n. I fully agree, putting the touchAfter property at the document level is much more convenient.\n. The `lastModified` property will be accessible at the document level, this bug was duplicating the property (at document level and inside the session prop).\n. If the developer want to store the `lastModified` property inside the session we will have this data duplicated :s\n. There is something wrong with this PR? It's been a few days which is open :disappointed: \n. ",
    "minmur": "Thanks. Understood why this error occurs.\n\nWhat i want to do is to connect do different database depending on subdomain, i.e. each of my customer will have it's own database. So i guess i need middleware which will be used on every request to detect which db to use.\nCode i wrote here is very simplified and just for testing and trying to understand how things work.\n. Thanks for info\n. Thanks. Understood why this error occurs.\n\nWhat i want to do is to connect do different database depending on subdomain, i.e. each of my customer will have it's own database. So i guess i need middleware which will be used on every request to detect which db to use.\nCode i wrote here is very simplified and just for testing and trying to understand how things work.\n. Thanks for info\n. ",
    "buunguyen": "Please release this as the documentation has been updated. I've been debugging as `touchAfter` doesn't work at all even though I followed the documentation to the letter. Turn out it's not on NPM yet.\n. Great, thank you!\n. Please release this as the documentation has been updated. I've been debugging as `touchAfter` doesn't work at all even though I followed the documentation to the letter. Turn out it's not on NPM yet.\n. Great, thank you!\n. ",
    "apitts": "@ilanbiala did you ever get to the bottom of this? I'm assuming you are using mean.js (like I am)...I'm having the same issue with similar code. \r\n\r\nHere is the output of db.sessions.getIndexes( ):\r\n```\r\n[\r\n\t{\r\n\t\t\"v\" : 1,\r\n\t\t\"key\" : {\r\n\t\t\t\"_id\" : 1\r\n\t\t},\r\n\t\t\"name\" : \"_id_\",\r\n\t\t\"ns\" : \"myDb.sessions\"\r\n\t},\r\n\t{\r\n\t\t\"v\" : 1,\r\n\t\t\"key\" : {\r\n\t\t\t\"expires\" : 1\r\n\t\t},\r\n\t\t\"name\" : \"expires_1\",\r\n\t\t\"ns\" : \"myDb.sessions\",\r\n\t\t\"expireAfterSeconds\" : 0\r\n\t}\r\n]\r\n\r\n```. @ilanbiala did you ever get to the bottom of this? I'm assuming you are using mean.js (like I am)...I'm having the same issue with similar code. \r\n\r\nHere is the output of db.sessions.getIndexes( ):\r\n```\r\n[\r\n\t{\r\n\t\t\"v\" : 1,\r\n\t\t\"key\" : {\r\n\t\t\t\"_id\" : 1\r\n\t\t},\r\n\t\t\"name\" : \"_id_\",\r\n\t\t\"ns\" : \"myDb.sessions\"\r\n\t},\r\n\t{\r\n\t\t\"v\" : 1,\r\n\t\t\"key\" : {\r\n\t\t\t\"expires\" : 1\r\n\t\t},\r\n\t\t\"name\" : \"expires_1\",\r\n\t\t\"ns\" : \"myDb.sessions\",\r\n\t\t\"expireAfterSeconds\" : 0\r\n\t}\r\n]\r\n\r\n```. ",
    "barisusakli": "Seems like `options.db.openCalled` is undefined no matter what. If I set it to true before I create the session store the queries work.\n. A temp work around that works for me \n\n```\nmongoClient.connect(connString, connOptions, function(err, db) {\n    db.openCalled = true\n    module.sessionStore = new sessionStore({\n       db: db\n    });\n    //rest of code\n```\n. Any feedback on this? This already got merged on connect-redis https://github.com/tj/connect-redis/pull/199/files. Seems like `options.db.openCalled` is undefined no matter what. If I set it to true before I create the session store the queries work.\n. A temp work around that works for me \n\n```\nmongoClient.connect(connString, connOptions, function(err, db) {\n    db.openCalled = true\n    module.sessionStore = new sessionStore({\n       db: db\n    });\n    //rest of code\n```\n. Any feedback on this? This already got merged on connect-redis https://github.com/tj/connect-redis/pull/199/files. ",
    "1999": "@barisusakli oh does it? I have this king of log:\n\n```\n  connect-mongo switched to state: init +0ms\n  connect-mongo use strategy: `native_db` +1ms\n  connect-mongo switched to state: connected +0ms\n  connect-mongo switched to state: connecting +0ms\n```\n\n`initWithNativeDb();` -> `process.nextTick(initWithNativeDb);` seems to fix the issue. Also it seems like db.open doesn't fire callback.\n. Made a little fix in #165 \n. > I still have to set db.openCalled = true (but only for external database hosted on compose, a database running on localhost works fine)\n\nyep, same thing.\n\n> How can we detect the state of this existing Db instance in mongodb driver 2.0?\n\nIt seems like \"fullsetup\" event can be used for that, I'll try to have a look\n. As far as I see, db.open() shouldn't be run directly now:\nhttps://github.com/mongodb/node-mongodb-native/blob/2771d2a34527a0783fbfc7bda0b7a5604f10c30a/lib/collection.js#L29-L44\n\nThe proof of this is that connect-mongo works nice when db.openCalled is set to true and db.collection() runs inside initWithNativeDb.\n\nAnd here are some links:\n\n1.4 has openCalled property set to true when open() has been called:\nhttps://github.com/mongodb/node-mongodb-native/blob/02bf8ece1227b0c35448fe16f5d0073de26106a7/lib/mongodb/db.js#L266\n\n2.0 doesn't have this property at all:\nhttps://github.com/mongodb/node-mongodb-native/blob/2771d2a34527a0783fbfc7bda0b7a5604f10c30a/lib/db.js#L188-L202\n. @chapati did v0.8.1 help you or not?\n. it also seems like checking against undocumented property `openCalled` is not so good.\n. @ilanbiala it postpones execution of initWithNativeDb, so connecting event occurs before connected.\n. @jdesboeufs could you take a look at ths pr?\n. @jdesboeufs tests fail due to strange maxWriteBatchSize. On my local mac `make test` runs without errors. Can you take a look at this PR?\n. :up: \n. @jdesboeufs this works in our production environment. Connection is definetely not established at that moment, but `options.db.collection(options.collection, connectionReady);` works nice. It establishes connection if it hasn't been established yet. What happens in your production env? Could you provide debug logs?\n. @barisusakli oh does it? I have this king of log:\n\n```\n  connect-mongo switched to state: init +0ms\n  connect-mongo use strategy: `native_db` +1ms\n  connect-mongo switched to state: connected +0ms\n  connect-mongo switched to state: connecting +0ms\n```\n\n`initWithNativeDb();` -> `process.nextTick(initWithNativeDb);` seems to fix the issue. Also it seems like db.open doesn't fire callback.\n. Made a little fix in #165 \n. > I still have to set db.openCalled = true (but only for external database hosted on compose, a database running on localhost works fine)\n\nyep, same thing.\n\n> How can we detect the state of this existing Db instance in mongodb driver 2.0?\n\nIt seems like \"fullsetup\" event can be used for that, I'll try to have a look\n. As far as I see, db.open() shouldn't be run directly now:\nhttps://github.com/mongodb/node-mongodb-native/blob/2771d2a34527a0783fbfc7bda0b7a5604f10c30a/lib/collection.js#L29-L44\n\nThe proof of this is that connect-mongo works nice when db.openCalled is set to true and db.collection() runs inside initWithNativeDb.\n\nAnd here are some links:\n\n1.4 has openCalled property set to true when open() has been called:\nhttps://github.com/mongodb/node-mongodb-native/blob/02bf8ece1227b0c35448fe16f5d0073de26106a7/lib/mongodb/db.js#L266\n\n2.0 doesn't have this property at all:\nhttps://github.com/mongodb/node-mongodb-native/blob/2771d2a34527a0783fbfc7bda0b7a5604f10c30a/lib/db.js#L188-L202\n. @chapati did v0.8.1 help you or not?\n. it also seems like checking against undocumented property `openCalled` is not so good.\n. @ilanbiala it postpones execution of initWithNativeDb, so connecting event occurs before connected.\n. @jdesboeufs could you take a look at ths pr?\n. @jdesboeufs tests fail due to strange maxWriteBatchSize. On my local mac `make test` runs without errors. Can you take a look at this PR?\n. :up: \n. @jdesboeufs this works in our production environment. Connection is definetely not established at that moment, but `options.db.collection(options.collection, connectionReady);` works nice. It establishes connection if it hasn't been established yet. What happens in your production env? Could you provide debug logs?\n. ",
    "mjmasn": "I'm passing an existing Db instance to connect-mongo. The fix in #165 doesn't work for me, I still have to set `db.openCalled = true` (but only for external database hosted on compose, a database running on localhost works fine)\n. Fixed by reinstalling my npm packages, not sure what the issue was...\n. I'm passing an existing Db instance to connect-mongo. The fix in #165 doesn't work for me, I still have to set `db.openCalled = true` (but only for external database hosted on compose, a database running on localhost works fine)\n. Fixed by reinstalling my npm packages, not sure what the issue was...\n. ",
    "chapati": "Huh, I killed the whole day for this issue. Why not to mention in docs? Your 5 minutes will save time for people.\n. @1999 Haven't checked yet. Figured out the same workaround with openCalled = true as suggested above. Will try v0.8.1 soon.\n. Huh, I killed the whole day for this issue. Why not to mention in docs? Your 5 minutes will save time for people.\n. @1999 Haven't checked yet. Figured out the same workaround with openCalled = true as suggested above. Will try v0.8.1 soon.\n. ",
    "whitecolor": "Thanks. My bad.\n. Thanks. My bad.\n. ",
    "julianlam": "Nice work, hope it gets merged in shortly :) \n. Nice work, hope it gets merged in shortly :) \n. ",
    "Kaushick": "Hello mjmasn,\n\nI'm getting exactly the same error. But didn't solved after reinstalling  npm package. Can you please guide me how you are generating the \"dbInstanse\". I'm new in mongo domain. So, could not getting the \"dbInstanse\" thing. \n. Hello mjmasn,\n\nI'm getting exactly the same error. But didn't solved after reinstalling  npm package. Can you please guide me how you are generating the \"dbInstanse\". I'm new in mongo domain. So, could not getting the \"dbInstanse\" thing. \n. ",
    "SEAPUNK": "No. The only way to make it work is to have `MongoStore` actually point to something.\n. I don't remember, likely not.\n. Sure, but it might take me a while; I got a few things to do beforehand.\n. No. The only way to make it work is to have `MongoStore` actually point to something.\n. I don't remember, likely not.\n. Sure, but it might take me a while; I got a few things to do beforehand.\n. ",
    "behcet": "I guess express session tries to write the session information to DB and fails. There was an issue with the previous version of connect-mongo where callbacks getting invoked twice - once with error and once with no errors. That probably was breaking express.\n\nCan you try to recreate this after upgrading to the latest version of connect-mongo ?\n. Not sure if this file is necessary anymore since package.json defines main as \"./lib/connect-mongo\"\n. I think you are not storing/parsing cookies correctly, so it attempts to create a new session every time.\n. Does your reverse proxy detect health of the application servers by pinging it on timed intervals ?\n. @winnemucca [aptitude](https://en.wikipedia.org/wiki/Aptitude_%28software%29) is a package manager specific to Debian systems. You need to install `libkrb5-dev` software preferably with something specific to your OS\n. It's a race condition. User gets redirected to new page before session gets saved on database.\n\nTry executing a `req.session.save(callback)` after calling `req.flash` and wait for save callback to redirect to user.\n. @franckl Any updates ?\n. Is there any way that we can test the expected behavior ?\n. I guess express session tries to write the session information to DB and fails. There was an issue with the previous version of connect-mongo where callbacks getting invoked twice - once with error and once with no errors. That probably was breaking express.\n\nCan you try to recreate this after upgrading to the latest version of connect-mongo ?\n. Not sure if this file is necessary anymore since package.json defines main as \"./lib/connect-mongo\"\n. I think you are not storing/parsing cookies correctly, so it attempts to create a new session every time.\n. Does your reverse proxy detect health of the application servers by pinging it on timed intervals ?\n. @winnemucca [aptitude](https://en.wikipedia.org/wiki/Aptitude_%28software%29) is a package manager specific to Debian systems. You need to install `libkrb5-dev` software preferably with something specific to your OS\n. It's a race condition. User gets redirected to new page before session gets saved on database.\n\nTry executing a `req.session.save(callback)` after calling `req.flash` and wait for save callback to redirect to user.\n. @franckl Any updates ?\n. Is there any way that we can test the expected behavior ?\n. ",
    "baskerville": "Not sure if it might help but it seems that `db.sessions.count()` constantly grows by about one item per second.\n. The problem seems to originate from `express-session`, sorry.\n. Sure : my problem was solved by setting the _saveUninitialized_ option to _false_.\n. Not sure if it might help but it seems that `db.sessions.count()` constantly grows by about one item per second.\n. The problem seems to originate from `express-session`, sorry.\n. Sure : my problem was solved by setting the _saveUninitialized_ option to _false_.\n. ",
    "dalelotts": "Can you provide any more information in case someone else encounters this error (I just did!)\n. Can you provide any more information in case someone else encounters this error (I just did!)\n. ",
    "muka": "The issue is at the check for `options.db.listCollections`  that tingodb does not have. It has a `_path` property instead (https://github.com/kcbanner/connect-mongo/blob/master/src/connect-mongo.js#L88)\n. The issue is at the check for `options.db.listCollections`  that tingodb does not have. It has a `_path` property instead (https://github.com/kcbanner/connect-mongo/blob/master/src/connect-mongo.js#L88)\n. ",
    "kgividen": "FYI This worked for me with tingodb so it would be nice if this PR was accepted.\n. FYI This worked for me with tingodb so it would be nice if this PR was accepted.\n. ",
    "CodeLenny": "@muka @jdesboeufs I'm getting a new error in 1.3.x (seen in both 1.3.0 and 1.3.1) even with the workaround.  1.2.1 was working well with the workaround in place.\n\n```\nTypeError: Cannot read property 'upserted' of undefined\n  at <PROJECT>/node_modules/connect-mongo/src/index.js:249:43\n  at tryCatcher (<PROJECT>/node_modules/bluebird/js/release/util.js:16:23)\n  at Promise._settlePromiseFromHandler (<PROJECT>/node_modules/bluebird/js/release/promise.js:504:31)\n  at Promise._settlePromise (<PROJECT>/node_modules/bluebird/js/release/promise.js:561:18)\n  at Promise._settlePromise0 (<PROJECT>/node_modules/bluebird/js/release/promise.js:606:10)\n  at Promise._settlePromises (<PROJECT>/node_modules/bluebird/js/release/promise.js:685:18)\n  at Promise._fulfill (<PROJECT>/node_modules/bluebird/js/release/promise.js:630:18)\n  at <PROJECT>/node_modules/bluebird/js/release/nodeback.js:42:21\n  at <PROJECT>/node_modules/tingodb/lib/wqueue.js:37:7\n  at <PROJECT>/node_modules/tingodb/lib/tcoll.js:752:6\n  at _fnApply (<PROJECT>/node_modules/safe/lib/safe.js:172:22)\n  at _catcher (<PROJECT>/node_modules/safe/lib/safe.js:349:11)\n  at <PROJECT>/node_modules/safe/lib/safe.js:462:4\n  at _wrapArgsSure (<PROJECT>/node_modules/safe/lib/safe.js:218:14)\n  at <PROJECT>/node_modules/safe/lib/safe.js:332:13\n  at task (<PROJECT>/node_modules/safe/lib/safe.js:642:8)\n  at <PROJECT>/node_modules/safe/lib/safe.js:656:8\n  at <PROJECT>/node_modules/safe/lib/safe.js:342:13\n  at <PROJECT>/node_modules/tingodb/lib/wqueue.js:37:7\n  at <PROJECT>/node_modules/tingodb/lib/tcoll.js:601:4\n  at <PROJECT>/node_modules/safe/lib/safe.js:342:13\n  at <PROJECT>/node_modules/tingodb/lib/tcoll.js:589:6\n  at _fnApply (<PROJECT>/node_modules/safe/lib/safe.js:174:22)\n  at _catcher (<PROJECT>/node_modules/safe/lib/safe.js:349:11)\n  at <PROJECT>/node_modules/safe/lib/safe.js:462:4\n  at _wrapArgsSure (<PROJECT>/node_modules/safe/lib/safe.js:218:14)\n  at FSReqWrap.wrapper [as oncomplete] (fs.js:667:5)\n```\n. @jdesboeufs Great, thanks so much!\n. @muka @jdesboeufs I'm getting a new error in 1.3.x (seen in both 1.3.0 and 1.3.1) even with the workaround.  1.2.1 was working well with the workaround in place.\n\n```\nTypeError: Cannot read property 'upserted' of undefined\n  at <PROJECT>/node_modules/connect-mongo/src/index.js:249:43\n  at tryCatcher (<PROJECT>/node_modules/bluebird/js/release/util.js:16:23)\n  at Promise._settlePromiseFromHandler (<PROJECT>/node_modules/bluebird/js/release/promise.js:504:31)\n  at Promise._settlePromise (<PROJECT>/node_modules/bluebird/js/release/promise.js:561:18)\n  at Promise._settlePromise0 (<PROJECT>/node_modules/bluebird/js/release/promise.js:606:10)\n  at Promise._settlePromises (<PROJECT>/node_modules/bluebird/js/release/promise.js:685:18)\n  at Promise._fulfill (<PROJECT>/node_modules/bluebird/js/release/promise.js:630:18)\n  at <PROJECT>/node_modules/bluebird/js/release/nodeback.js:42:21\n  at <PROJECT>/node_modules/tingodb/lib/wqueue.js:37:7\n  at <PROJECT>/node_modules/tingodb/lib/tcoll.js:752:6\n  at _fnApply (<PROJECT>/node_modules/safe/lib/safe.js:172:22)\n  at _catcher (<PROJECT>/node_modules/safe/lib/safe.js:349:11)\n  at <PROJECT>/node_modules/safe/lib/safe.js:462:4\n  at _wrapArgsSure (<PROJECT>/node_modules/safe/lib/safe.js:218:14)\n  at <PROJECT>/node_modules/safe/lib/safe.js:332:13\n  at task (<PROJECT>/node_modules/safe/lib/safe.js:642:8)\n  at <PROJECT>/node_modules/safe/lib/safe.js:656:8\n  at <PROJECT>/node_modules/safe/lib/safe.js:342:13\n  at <PROJECT>/node_modules/tingodb/lib/wqueue.js:37:7\n  at <PROJECT>/node_modules/tingodb/lib/tcoll.js:601:4\n  at <PROJECT>/node_modules/safe/lib/safe.js:342:13\n  at <PROJECT>/node_modules/tingodb/lib/tcoll.js:589:6\n  at _fnApply (<PROJECT>/node_modules/safe/lib/safe.js:174:22)\n  at _catcher (<PROJECT>/node_modules/safe/lib/safe.js:349:11)\n  at <PROJECT>/node_modules/safe/lib/safe.js:462:4\n  at _wrapArgsSure (<PROJECT>/node_modules/safe/lib/safe.js:218:14)\n  at FSReqWrap.wrapper [as oncomplete] (fs.js:667:5)\n```\n. @jdesboeufs Great, thanks so much!\n. ",
    "Redsandro": "@jdesboeufs I had no idea you replied, and then I forgot about it. The notification must have slipped past me 12 months ago. Client was probably a MongoDB connection or pool. I'm using `dbPromise` now.\n. This would be very much appreciated. In `node-mongodb-native` 2+ you connect without using a `db` instance and only have access to the db in a callback. So accepting a promise for the db would prevent us from having to beat around the bush. :+1: \n. @jdesboeufs I had no idea you replied, and then I forgot about it. The notification must have slipped past me 12 months ago. Client was probably a MongoDB connection or pool. I'm using `dbPromise` now.\n. This would be very much appreciated. In `node-mongodb-native` 2+ you connect without using a `db` instance and only have access to the db in a callback. So accepting a promise for the db would prevent us from having to beat around the bush. :+1: \n. ",
    "HarshitaS1712": "TypeError: Cannot read property 'indexOf' of undefined\n    at Function.handle (C:\\project\\TRY\\loginapp-master\\node_modules\\express\\lib\\\nrouter\\index.js:140:27)\n    at new router (C:\\project\\TRY\\loginapp-master\\node_modules\\express\\lib\\route\nr\\index.js:46:12)\n    at Object.<anonymous> (C:\\project\\TRY\\loginapp-master\\routes\\products.js:14:\n16)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Function.Module.runMain (module.js:441:10)\n    at startup (node.js:139:18)\n    at node.js:968:3\n\nwhy this error?\n. TypeError: Cannot read property 'indexOf' of undefined\n    at Function.handle (C:\\project\\TRY\\loginapp-master\\node_modules\\express\\lib\\\nrouter\\index.js:140:27)\n    at new router (C:\\project\\TRY\\loginapp-master\\node_modules\\express\\lib\\route\nr\\index.js:46:12)\n    at Object.<anonymous> (C:\\project\\TRY\\loginapp-master\\routes\\products.js:14:\n16)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Function.Module.runMain (module.js:441:10)\n    at startup (node.js:139:18)\n    at node.js:968:3\n\nwhy this error?\n. ",
    "joetm": "I found the solution myself by inspecting the req object. The session id is available as req.sessionID.\n. I found the solution myself by inspecting the req object. The session id is available as req.sessionID.\n. ",
    "pravin-mindstix": "Thanks for quick response,\n I have removed db, autoReconnect and touchAfter options also set saveUninitialized to false, but still its create records on every request.\n. Oh.. Ok\n. Thanks for quick response,\n I have removed db, autoReconnect and touchAfter options also set saveUninitialized to false, but still its create records on every request.\n. Oh.. Ok\n. ",
    "bonesoul": "@pravin-mindstix what was the cause of the issue?. @zilions i'm also having a similar issue (https://github.com/expressjs/session/issues/413), you found a fix for this?. @pravin-mindstix what was the cause of the issue?. @zilions i'm also having a similar issue (https://github.com/expressjs/session/issues/413), you found a fix for this?. ",
    "Stellaverse": "Bingo. That did the trick. Thanks @jdesboeufs!\n. Bingo. That did the trick. Thanks @jdesboeufs!\n. ",
    "sushilnagpal": "Hi,\n\nAuto-reconnect doesn't work if MongoStore connect to mongod via TLS/SSL. Any idea?\n. Here is my code - \n\n```\napp.use(session({\n    secret: 'angular-fullstack secret',\n    store: new mongoStore({\n        url: config.mongo.uri,\n        collection: 'sessions',\n        server: config.mongo.options.server,\n        username: config.mongo.options.user,\n        password: config.mongo.options.pass,\n        auto_reconnect:true\n    }, function () {\n        console.log('db connection open');\n    })\n}));\n```\n\nConfig.js - \n\n```\n mongo: {\n      uri: 'mongodb://localhost/fullstack-dev',\n      options: {\n           db: {\n               safe: true\n           },\n           server: {\n                auto_reconnect: true,\n                sslValidate: false,\n                ssl: true,\n                sslCert: cert,\n                socketOptions: { keepAlive: 1 }\n          },\n          user: '',\n          pass: ''\n      }\n}\n```\n. Thanks @jdesboeufs for your valuable time.. I was using 0.4.1 release. I upgraded connect-mongo in my application from 0.4.1 to 0.8.2 and even after upgrading and following examples available at https://github.com/kcbanner/connect-mongo, my application is unable to auto reconnect with MongoDB using SSL. I think it is an issue with mongoose as well because mongoose also behaving same. Although if I start mongod service without SSL, my application is able to reconnect with mongo is network connection lost or mongod service restarted. There is no example available at https://github.com/kcbanner/connect-mongo for connecting mongo db using SSL. \n. Thanks @jdesboeufs  appreciate your help! I was using old versions of mongoose and connect-mongo. Upgrading to latest versions of both resolved my issue. Definitely after making changes in constructor as well:\nWorking code:\n\n```\napp.use(session({\n    secret: 'angular-fullstack secret',\n    store: new mongoStore({\n        db: mongoose.connection.db,\n        collection: 'sessions',\n        autoReconnect:true,\n        autoRemove: 'interval',\n        autoRemoveInterval: 10\n    })\n}));  \n```\n. Hi,\n\nAuto-reconnect doesn't work if MongoStore connect to mongod via TLS/SSL. Any idea?\n. Here is my code - \n\n```\napp.use(session({\n    secret: 'angular-fullstack secret',\n    store: new mongoStore({\n        url: config.mongo.uri,\n        collection: 'sessions',\n        server: config.mongo.options.server,\n        username: config.mongo.options.user,\n        password: config.mongo.options.pass,\n        auto_reconnect:true\n    }, function () {\n        console.log('db connection open');\n    })\n}));\n```\n\nConfig.js - \n\n```\n mongo: {\n      uri: 'mongodb://localhost/fullstack-dev',\n      options: {\n           db: {\n               safe: true\n           },\n           server: {\n                auto_reconnect: true,\n                sslValidate: false,\n                ssl: true,\n                sslCert: cert,\n                socketOptions: { keepAlive: 1 }\n          },\n          user: '',\n          pass: ''\n      }\n}\n```\n. Thanks @jdesboeufs for your valuable time.. I was using 0.4.1 release. I upgraded connect-mongo in my application from 0.4.1 to 0.8.2 and even after upgrading and following examples available at https://github.com/kcbanner/connect-mongo, my application is unable to auto reconnect with MongoDB using SSL. I think it is an issue with mongoose as well because mongoose also behaving same. Although if I start mongod service without SSL, my application is able to reconnect with mongo is network connection lost or mongod service restarted. There is no example available at https://github.com/kcbanner/connect-mongo for connecting mongo db using SSL. \n. Thanks @jdesboeufs  appreciate your help! I was using old versions of mongoose and connect-mongo. Upgrading to latest versions of both resolved my issue. Definitely after making changes in constructor as well:\nWorking code:\n\n```\napp.use(session({\n    secret: 'angular-fullstack secret',\n    store: new mongoStore({\n        db: mongoose.connection.db,\n        collection: 'sessions',\n        autoReconnect:true,\n        autoRemove: 'interval',\n        autoRemoveInterval: 10\n    })\n}));  \n```\n. ",
    "juancarloscancela": "Just an update: Issue reproducible also with Node 4.1.0\n. Just an update: Issue reproducible also with Node 4.1.0\n. ",
    "zackiles": "@juancarloscancela This is coming from the mongodb package, not this repo. A recent update to the mongodb driver (or node-gyp) shows this error during node-gyp bindings, but it is only a warning and you can ignore it. If you'd like to be able to support Kerberos (or just stop this warning) you can install the missing Kerberos library with `apt-get install libkrb5-dev.`. Then remove and reinstall npm mongodb and this warning will be gone. \n\nThis ticket should be closed.\n. @juancarloscancela This is coming from the mongodb package, not this repo. A recent update to the mongodb driver (or node-gyp) shows this error during node-gyp bindings, but it is only a warning and you can ignore it. If you'd like to be able to support Kerberos (or just stop this warning) you can install the missing Kerberos library with `apt-get install libkrb5-dev.`. Then remove and reinstall npm mongodb and this warning will be gone. \n\nThis ticket should be closed.\n. ",
    "csotiriou": "Indeed, `apt-get install libkrb5-dev` fixed the problem for me. Thanks.\n. Indeed, `apt-get install libkrb5-dev` fixed the problem for me. Thanks.\n. ",
    "winnemucca": "Is there more to this command?  I am getting apt-get command not found\n. Is there more to this command?  I am getting apt-get command not found\n. ",
    "taoli-paypal": "Could anyone share some method to fix it on Mac OSx. Not able to find it with hombrew. Besides, seems mongoose still working without this ? \n. Could anyone share some method to fix it on Mac OSx. Not able to find it with hombrew. Besides, seems mongoose still working without this ? \n. ",
    "coty-crg": "taoli-paypal is right, I cannot get this on osx either\n. taoli-paypal is right, I cannot get this on osx either\n. ",
    "caoyang1024": "what if just ignore it? any problem in future?\n. what if just ignore it? any problem in future?\n. ",
    "kbariotis": "I've found this, haven't tested yet: http://stackoverflow.com/a/33140170/1955940\n. I've found this, haven't tested yet: http://stackoverflow.com/a/33140170/1955940\n. ",
    "josevillacreses": "In contrast, this is what I get when, in the route for the requests I invoke periodically, I include some update in the req.session object:\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:34 GMT-0500 (ECT)\nreq.session.cookie.maxAge 55784\n```\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:34 GMT-0500 (ECT)\nreq.session.cookie.maxAge 55775\n```\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:38 GMT-0500 (ECT)\nreq.session.cookie.maxAge 56646\n```\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:42 GMT-0500 (ECT)\nreq.session.cookie.maxAge 54922\n```\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:42 GMT-0500 (ECT)\nreq.session.cookie.maxAge 54917\n```\n\nAs you can see, `expires` and `maxAge` get updated.\n\nI think this should happen every 20 seconds, as specified in `touchAfter`.\nAgain, in the database it seems to work as expected. The problem is in the express/node application.\n. In contrast, this is what I get when, in the route for the requests I invoke periodically, I include some update in the req.session object:\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:34 GMT-0500 (ECT)\nreq.session.cookie.maxAge 55784\n```\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:34 GMT-0500 (ECT)\nreq.session.cookie.maxAge 55775\n```\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:38 GMT-0500 (ECT)\nreq.session.cookie.maxAge 56646\n```\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:42 GMT-0500 (ECT)\nreq.session.cookie.maxAge 54922\n```\n\n```\nreq.session.cookie.expires Wed Oct 07 2015 13:25:42 GMT-0500 (ECT)\nreq.session.cookie.maxAge 54917\n```\n\nAs you can see, `expires` and `maxAge` get updated.\n\nI think this should happen every 20 seconds, as specified in `touchAfter`.\nAgain, in the database it seems to work as expected. The problem is in the express/node application.\n. ",
    "ethelius": "Can corroborate when using the same session configuration with \n\nconnect-mongo 0.8.2\nexpress-session 1.11.3\nexpress 4.13.3\n\nThe mongo document:\n{\n    \"_id\" : [...],\n    \"session\" : \"{\\\"cookie\\\":{\\\"originalMaxAge\\\":60000,\\\"expires\\\":\\\"2015-10-29T07:38:36.394Z\\\",\\\"httpOnly\\\":true,\\\"path\\\":\\\"/\\\"},\\\"passport\\\":{\\\"user\\\":\\\"55a5e4884073204d9a0541cb\\\"}}\",\n    \"expires\" : ISODate(\"2015-10-29T07:39:04.484Z\"),\n    \"lastModified\" : ISODate(\"2015-10-29T07:38:04.484Z\")\n}\n\nFrom my understanding, the \"expires\" in the serialized session should match the expires in the document, but session.expires never gets updated when the main expires does.\n\nI was able to get the rolling window working by jamming \"updateFields.session = this.options.serialize(session);\" into the MongoStore.prototype.touch function.\n\nNot sure if it's a connect-mongo issue or if I'm using it incredibly wrong.\n. Can corroborate when using the same session configuration with \n\nconnect-mongo 0.8.2\nexpress-session 1.11.3\nexpress 4.13.3\n\nThe mongo document:\n{\n    \"_id\" : [...],\n    \"session\" : \"{\\\"cookie\\\":{\\\"originalMaxAge\\\":60000,\\\"expires\\\":\\\"2015-10-29T07:38:36.394Z\\\",\\\"httpOnly\\\":true,\\\"path\\\":\\\"/\\\"},\\\"passport\\\":{\\\"user\\\":\\\"55a5e4884073204d9a0541cb\\\"}}\",\n    \"expires\" : ISODate(\"2015-10-29T07:39:04.484Z\"),\n    \"lastModified\" : ISODate(\"2015-10-29T07:38:04.484Z\")\n}\n\nFrom my understanding, the \"expires\" in the serialized session should match the expires in the document, but session.expires never gets updated when the main expires does.\n\nI was able to get the rolling window working by jamming \"updateFields.session = this.options.serialize(session);\" into the MongoStore.prototype.touch function.\n\nNot sure if it's a connect-mongo issue or if I'm using it incredibly wrong.\n. ",
    "janbiasi": "@bruno12mota Well, according to the Build- & Test-script(s) it should support Node in version 4 :smile_cat: \n. @bruno12mota Well, according to the Build- & Test-script(s) it should support Node in version 4 :smile_cat: \n. ",
    "bruno12mota": "Sorry, fixed it already, was another dependency which was bugging it. Cheers!\n. Sorry, fixed it already, was another dependency which was bugging it. Cheers!\n. ",
    "aralroca": "Thank you!\n. Thank you!\n. ",
    "Madhu94": "How do you set the property \"user\" in the sessions? I'm using mongoose 4.x and node 0.10. I'm trying to set it like this : \napp.use(session(store:new MongoStore({\n      url: conn_string,\n      stringify:false\n    }),\n   //store :sessionStore,\n   secret: 'hello',\n    user:\"me\"});\nBut its not persisted in the sessions collection.\n. How do you set the property \"user\" in the sessions? I'm using mongoose 4.x and node 0.10. I'm trying to set it like this : \napp.use(session(store:new MongoStore({\n      url: conn_string,\n      stringify:false\n    }),\n   //store :sessionStore,\n   secret: 'hello',\n    user:\"me\"});\nBut its not persisted in the sessions collection.\n. ",
    "jmcollin78": "I'm also interested by this feature. What is the best way to access to the MongoDriver without instantiating a new one ?\nAnother question : is this an interesting feature you could add to the product in a future release ? I'm sure many people could be interested.\n. @jdesboeufs Many thank's for your answer. For those who can be interested, I've implemented this feature with ouathtoken and passport with this piece of code:\n\n```\nexports.requiresRemoveOldSession = function (req, res, next) {\n    log.info('Into requiresRemoveOldSession');\n    var userId = req.user ? req.user.id : undefined;\n    if (!userId) {\n        log.info('No user found in req. Exiting');\n        return next();\n    }\n    log.info('Remove all existing sessions of userId \"%s\" but not the session with id \"%s\"', userId, req.sessionID);\n    var store = req.sessionStore;\n    //    log.info('store.db is \"%s\"', dbg(store.db));\n    var sessionsColl = store.db.collection('sessions');\n    var oauthTokenColl = store.db.collection('oauthtokens');\n    //    log.info('collection is \"%s\"', dbg(sessionsColl));\n    // check all oauthtokens in the header to delete it\n    var authorization = req.headers.authorization;\n    if (authorization) {\n        var bearer = authorization.split(' ')[1];\n        log.info('Removes all oAuthTokens but not this one \"%s\"', bearer);\n        oauthTokenColl.remove({\n            'accountId': req.user.email,\n            'type': 'AccessToken',\n            'token': {\n                '$ne': bearer\n            }\n        }, function (err, nbDeleted) {\n            if (err) log.error('Cannot remove oAuthTokens cause \"%s\"', err);\n            else log.info('We have removed \"%d\" access tokens from oAuthTokens', nbDeleted);\n        });\n    } else {\n        log.info('Removes all oAuthTokens');\n        oauthTokenColl.remove({\n            'accountId': req.user.email,\n            'type': 'AccessToken'\n        }, function (err, nbDeleted) {\n            if (err) log.error('Cannot remove oAuthTokens cause \"%s\"', err);\n            else log.info('We have removed \"%d\" access tokens from oAuthTokens', nbDeleted);\n        });\n    }\n\n    log.info('Req.headers=\"%s\"', dbg(req.headers));\n    sessionsColl.find({\n        'session.passport.user': userId,\n        '_id': {\n            '$ne': req.sessionID\n        }\n    }, { _id : 1 }).toArray(function (err, userSessions) {\n        log.info('UserSessions to remove are \"%s\"', dbg(userSessions));\n        _.forEach(userSessions, function (userSession) {\n            log.info('We will remove session \"%s\"', dbg(userSession));\n            store.destroy(userSession._id, function (err) {\n                if (err) log.error('Cannot remove session \"%s\" cause \"%s\"', userSession._id, err);\n                else log.info('Session \"%s\" removed successfully', userSession._id);\n            });\n        });\n        next();\n    });\n};\n```\n\nOf course you will need to adapt this to your case.\nI hope this help !\n\nJM.\n. I'm also interested by this feature. What is the best way to access to the MongoDriver without instantiating a new one ?\nAnother question : is this an interesting feature you could add to the product in a future release ? I'm sure many people could be interested.\n. @jdesboeufs Many thank's for your answer. For those who can be interested, I've implemented this feature with ouathtoken and passport with this piece of code:\n\n```\nexports.requiresRemoveOldSession = function (req, res, next) {\n    log.info('Into requiresRemoveOldSession');\n    var userId = req.user ? req.user.id : undefined;\n    if (!userId) {\n        log.info('No user found in req. Exiting');\n        return next();\n    }\n    log.info('Remove all existing sessions of userId \"%s\" but not the session with id \"%s\"', userId, req.sessionID);\n    var store = req.sessionStore;\n    //    log.info('store.db is \"%s\"', dbg(store.db));\n    var sessionsColl = store.db.collection('sessions');\n    var oauthTokenColl = store.db.collection('oauthtokens');\n    //    log.info('collection is \"%s\"', dbg(sessionsColl));\n    // check all oauthtokens in the header to delete it\n    var authorization = req.headers.authorization;\n    if (authorization) {\n        var bearer = authorization.split(' ')[1];\n        log.info('Removes all oAuthTokens but not this one \"%s\"', bearer);\n        oauthTokenColl.remove({\n            'accountId': req.user.email,\n            'type': 'AccessToken',\n            'token': {\n                '$ne': bearer\n            }\n        }, function (err, nbDeleted) {\n            if (err) log.error('Cannot remove oAuthTokens cause \"%s\"', err);\n            else log.info('We have removed \"%d\" access tokens from oAuthTokens', nbDeleted);\n        });\n    } else {\n        log.info('Removes all oAuthTokens');\n        oauthTokenColl.remove({\n            'accountId': req.user.email,\n            'type': 'AccessToken'\n        }, function (err, nbDeleted) {\n            if (err) log.error('Cannot remove oAuthTokens cause \"%s\"', err);\n            else log.info('We have removed \"%d\" access tokens from oAuthTokens', nbDeleted);\n        });\n    }\n\n    log.info('Req.headers=\"%s\"', dbg(req.headers));\n    sessionsColl.find({\n        'session.passport.user': userId,\n        '_id': {\n            '$ne': req.sessionID\n        }\n    }, { _id : 1 }).toArray(function (err, userSessions) {\n        log.info('UserSessions to remove are \"%s\"', dbg(userSessions));\n        _.forEach(userSessions, function (userSession) {\n            log.info('We will remove session \"%s\"', dbg(userSession));\n            store.destroy(userSession._id, function (err) {\n                if (err) log.error('Cannot remove session \"%s\" cause \"%s\"', userSession._id, err);\n                else log.info('Session \"%s\" removed successfully', userSession._id);\n            });\n        });\n        next();\n    });\n};\n```\n\nOf course you will need to adapt this to your case.\nI hope this help !\n\nJM.\n. ",
    "OmgImAlexis": "Sounds good. :+1: I noticed it decreased the code coverage, I'm assuming that's just from adding extra lines as it was only 0.4%?\n. I completely overlooked this but you should probably add v5 to travis since it's been updated to work with it now.\n. Sounds good. :+1: I noticed it decreased the code coverage, I'm assuming that's just from adding extra lines as it was only 0.4%?\n. I completely overlooked this but you should probably add v5 to travis since it's been updated to work with it now.\n. ",
    "erebel55": "Thanks for the pull :)\n. Thanks for the pull :)\n. ",
    "vdust": "I just noticed that this issue would be fixed by merging the pull request #204.\n. I just noticed that this issue would be fixed by merging the pull request #204.\n. ",
    "gkoberger": ":+1: This took my site down when I deployed.\n. :+1: This took my site down when I deployed.\n. ",
    "nulliel": "Fixed in `1.0.1`\n. Fixed in `1.0.1`\n. ",
    "kostysh": "Ok, after npm update\nrequire('connect-mongo/es5') working fine\n. Ok, after npm update\nrequire('connect-mongo/es5') working fine\n. ",
    "connor11528": "Make sure your package.json reads `\"connect-mongo\": \"1.0.0\"` in \"dependencies\". Also your require statement must look like: `require('connect-mongo/es5')`\n\nThe newest version of connect-mongo uses a different version of javascript called ES6.\n. Make sure your package.json reads `\"connect-mongo\": \"1.0.0\"` in \"dependencies\". Also your require statement must look like: `require('connect-mongo/es5')`\n\nThe newest version of connect-mongo uses a different version of javascript called ES6.\n. ",
    "rogercastaneda": "I've the same problem\nI tried the following code\nvar express = require('express');\nvar expressSession = require('express-session');\n\nvar mongoStore = require('connect-mongo')(expressSession);\nvar sessionStore = new MongoStore({\n    host: '127.0.0.1',\n    port: '27017',\n    db: 'session',\n});\n\nbut i get the following error:\n\n/Users/alf/node_modules/connect-mongo/src/index.js:3\nconst Promise = require('bluebird');\n^^^^^\nSyntaxError: Use of const in strict mode.\n    at exports.runInThisContext (vm.js:73:16)\n    at Module._compile (module.js:443:25)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/Users/roger/node_modules/connect-mongo/index.js:1:80)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n. Thanks, it was my fault, i was using MongoStore instead of mongoStore. It works now :)\n. I've the same problem\nI tried the following code\nvar express = require('express');\nvar expressSession = require('express-session');\n\nvar mongoStore = require('connect-mongo')(expressSession);\nvar sessionStore = new MongoStore({\n    host: '127.0.0.1',\n    port: '27017',\n    db: 'session',\n});\n\nbut i get the following error:\n\n/Users/alf/node_modules/connect-mongo/src/index.js:3\nconst Promise = require('bluebird');\n^^^^^\nSyntaxError: Use of const in strict mode.\n    at exports.runInThisContext (vm.js:73:16)\n    at Module._compile (module.js:443:25)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/Users/roger/node_modules/connect-mongo/index.js:1:80)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n. Thanks, it was my fault, i was using MongoStore instead of mongoStore. It works now :)\n. ",
    "ducito": "`require('connect-mongo/es5')`\nThanks. It's work for me.\n. `require('connect-mongo/es5')`\nThanks. It's work for me.\n. ",
    "gaoerjun": "@jdesboeufs  Thank you very much . It`s ok now ! thanks again ~\n. @jdesboeufs  Thank you very much . It`s ok now ! thanks again ~\n. ",
    "steve-gray": "I assume you meant a check for the this.db not being undefined before dereferencing for the close? I've added in the check for that. If someone calls close() on something that never opened now, it should be silent.\n. _poke_ All good now?\n. I assume you meant a check for the this.db not being undefined before dereferencing for the close? I've added in the check for that. If someone calls close() on something that never opened now, it should be silent.\n. _poke_ All good now?\n. ",
    "jaecSolutions": "Same problem !\n. Same problem !\n. ",
    "zbigg": "Same problem. Quick analysis doesn't reveal any obvious bug in `connect-mongo` it may be bluebird issue.\n\nWorkaround, to disable this warning:\n\n```\nrequire('bluebird').config( { warnings: { wForgottenReturn: false } } );\n```\n. Same problem. Quick analysis doesn't reveal any obvious bug in `connect-mongo` it may be bluebird issue.\n\nWorkaround, to disable this warning:\n\n```\nrequire('bluebird').config( { warnings: { wForgottenReturn: false } } );\n```\n. ",
    "Awk34": "I believe this is also because of express-session: https://github.com/expressjs/session/blob/master/index.js#L332\n\nThere's nothing more to do with this module\n. To the best of my knowledge, it has to do with Bluebird making sure that your original reference to the created promise is also returned. When you conditionally set it the the property on `this`, it gets confused and thinks that you're not returning the original promise.\n. During my tests it seems to have fixed the issue.\n. Here's the relevent Bluebird code:\n\nhttps://github.com/petkaantonov/bluebird/blob/d62e20741eb759a50aa7af13c5dc7fb2bfbf2694/src/promise.js#L517-L549\n\n``` js\n\nPromise.prototype._settlePromiseFromHandler = function (\n    handler, receiver, value, promise\n) {\n    var bitField = promise._bitField;\n    if (BIT_FIELD_CHECK(IS_CANCELLED)) return;\n    promise._pushContext();\n    var x;\n    if (receiver === APPLY) {\n        if (!value || typeof value.length !== \"number\") {\n            x = errorObj;\n            x.e = new TypeError(\"cannot .spread() a non-array: \" +\n                                    util.classString(value));\n        } else {\n            x = tryCatch(handler).apply(this._boundValue(), value);\n        }\n    } else {\n        x = tryCatch(handler).call(receiver, value);\n    }\n    var promiseCreated = promise._popContext();\n    bitField = promise._bitField;\n    if (BIT_FIELD_CHECK(IS_CANCELLED)) return;\n\n    ASSERT(!promise._isFateSealed());\n\n    if (x === NEXT_FILTER) {\n        promise._reject(value);\n    } else if (x === errorObj) {\n        promise._rejectCallback(x.e, false);\n    } else {\n        debug.checkForgottenReturns(x, promiseCreated, \"\",  promise, this);\n        promise._resolveCallback(x);\n    }\n};\n```\n\nhttps://github.com/petkaantonov/bluebird/blob/5bffd55f20f1df5361603612867f286fa13e56e3/src/debuggability.js#L398-L410\n\n``` js\nfunction checkForgottenReturns(returnValue, promiseCreated, name, promise,\n                               parent) {\n    if (returnValue === undefined && promiseCreated !== null &&\n        wForgottenReturn) {\n        if (parent !== undefined && parent._returnedNonUndefined()) return;\n        if (BIT_FIELD_READ(LENGTH_MASK, promise._bitField) === 0) return;\n\n        if (name) name = name + \" \";\n        var msg = \"a promise was created in a \" + name +\n            \"handler but was not returned from it\";\n        promise._warn(msg, true, promiseCreated);\n    }\n}\n```\n. @jdesboeufs do you have any time to look at this? The bluebird warning is still annoying me and I don't want to have to fork this module XD\n. I believe this is also because of express-session: https://github.com/expressjs/session/blob/master/index.js#L332\n\nThere's nothing more to do with this module\n. To the best of my knowledge, it has to do with Bluebird making sure that your original reference to the created promise is also returned. When you conditionally set it the the property on `this`, it gets confused and thinks that you're not returning the original promise.\n. During my tests it seems to have fixed the issue.\n. Here's the relevent Bluebird code:\n\nhttps://github.com/petkaantonov/bluebird/blob/d62e20741eb759a50aa7af13c5dc7fb2bfbf2694/src/promise.js#L517-L549\n\n``` js\n\nPromise.prototype._settlePromiseFromHandler = function (\n    handler, receiver, value, promise\n) {\n    var bitField = promise._bitField;\n    if (BIT_FIELD_CHECK(IS_CANCELLED)) return;\n    promise._pushContext();\n    var x;\n    if (receiver === APPLY) {\n        if (!value || typeof value.length !== \"number\") {\n            x = errorObj;\n            x.e = new TypeError(\"cannot .spread() a non-array: \" +\n                                    util.classString(value));\n        } else {\n            x = tryCatch(handler).apply(this._boundValue(), value);\n        }\n    } else {\n        x = tryCatch(handler).call(receiver, value);\n    }\n    var promiseCreated = promise._popContext();\n    bitField = promise._bitField;\n    if (BIT_FIELD_CHECK(IS_CANCELLED)) return;\n\n    ASSERT(!promise._isFateSealed());\n\n    if (x === NEXT_FILTER) {\n        promise._reject(value);\n    } else if (x === errorObj) {\n        promise._rejectCallback(x.e, false);\n    } else {\n        debug.checkForgottenReturns(x, promiseCreated, \"\",  promise, this);\n        promise._resolveCallback(x);\n    }\n};\n```\n\nhttps://github.com/petkaantonov/bluebird/blob/5bffd55f20f1df5361603612867f286fa13e56e3/src/debuggability.js#L398-L410\n\n``` js\nfunction checkForgottenReturns(returnValue, promiseCreated, name, promise,\n                               parent) {\n    if (returnValue === undefined && promiseCreated !== null &&\n        wForgottenReturn) {\n        if (parent !== undefined && parent._returnedNonUndefined()) return;\n        if (BIT_FIELD_READ(LENGTH_MASK, promise._bitField) === 0) return;\n\n        if (name) name = name + \" \";\n        var msg = \"a promise was created in a \" + name +\n            \"handler but was not returned from it\";\n        promise._warn(msg, true, promiseCreated);\n    }\n}\n```\n. @jdesboeufs do you have any time to look at this? The bluebird warning is still annoying me and I don't want to have to fork this module XD\n. ",
    "avihebbar": "I figured it out. Sorry it was some issue with the version on mongodb \n. I figured it out. Sorry it was some issue with the version on mongodb \n. ",
    "daviwil2": "Hi gsikorski. I have a similar need. connect-mongo doesn't spontaneously emit an event when a session expires; the get(sid, callback) function in the public API is called to check the session validity. I've modified it as below (the else statement and this.emit('expired', sid) code) to emit that event when a session is checked and found to be expired.\n\n.then(session => {\n  if (session) {\n    var s = this.transformFunctions.unserialize(session.session);\n    if(this.options.touchAfter > 0 && session.lastModified){\n      s.lastModified = session.lastModified;\n    }\n    this.emit('touch', sid);\n    return s;\n  } else {\n    this.emit('expired', sid);\n  }\n})\n\nBut as I say this isn't generated spontaneously when a session expires.  Maybe use a setInterval function to periodically check the session (calling the get API) which in the modified code above would then trigger the event? Or query the table in the database for the user as, as soon as the session expires, it's removed from the collection (assuming the default of autoRemove: 'native'). Or see if Mongoose middleware (if you're using Mongoose...) or the connect-mongo code can be modified further to emit an event when it cleans the database. I'm looking into the latter, when and if I find a solution I'll post it here.\n. OK so to clean the database using 'native' autoRemove connect-mongo uses MongoDB's TTL function.  See https://docs.mongodb.org/manual/tutorial/expire-data/. And it doesn't fire a callback or emit and event or anything when it does it.  So to trap the removal event you need to not use autoRemove: native but instead use the interval option and then modify the setAutoRemoveAsync() function's setInterval timer to query for any matching documents, fire events, and then clean the matching docs. Ugh.\n. Hi gsikorski. I have a similar need. connect-mongo doesn't spontaneously emit an event when a session expires; the get(sid, callback) function in the public API is called to check the session validity. I've modified it as below (the else statement and this.emit('expired', sid) code) to emit that event when a session is checked and found to be expired.\n\n.then(session => {\n  if (session) {\n    var s = this.transformFunctions.unserialize(session.session);\n    if(this.options.touchAfter > 0 && session.lastModified){\n      s.lastModified = session.lastModified;\n    }\n    this.emit('touch', sid);\n    return s;\n  } else {\n    this.emit('expired', sid);\n  }\n})\n\nBut as I say this isn't generated spontaneously when a session expires.  Maybe use a setInterval function to periodically check the session (calling the get API) which in the modified code above would then trigger the event? Or query the table in the database for the user as, as soon as the session expires, it's removed from the collection (assuming the default of autoRemove: 'native'). Or see if Mongoose middleware (if you're using Mongoose...) or the connect-mongo code can be modified further to emit an event when it cleans the database. I'm looking into the latter, when and if I find a solution I'll post it here.\n. OK so to clean the database using 'native' autoRemove connect-mongo uses MongoDB's TTL function.  See https://docs.mongodb.org/manual/tutorial/expire-data/. And it doesn't fire a callback or emit and event or anything when it does it.  So to trap the removal event you need to not use autoRemove: native but instead use the interval option and then modify the setAutoRemoveAsync() function's setInterval timer to query for any matching documents, fire events, and then clean the matching docs. Ugh.\n. ",
    "gsikorski": "Yeah, I have already looked through it and found a better design to my application to work around the issue. Actually what am I doing is checking if the session still exists when I need to do something with my other data. That solved my problem without need to generate event in some custom way. It's a shame though `connect-mongo` does not support it...\n. Yeah, I have already looked through it and found a better design to my application to work around the issue. Actually what am I doing is checking if the session still exists when I need to do something with my other data. That solved my problem without need to generate event in some custom way. It's a shame though `connect-mongo` does not support it...\n. ",
    "jamesongithub": "Thanks!\n. Thanks!\n. ",
    "coveralls": "[![Coverage Status](https://coveralls.io/builds/6485350/badge)](https://coveralls.io/builds/6485350)\n\nCoverage decreased (-18.7%) to 63.504% when pulling **7a1b614b93b9274a423a1acc40eecfc5a6a08b32 on Awk34:patch-1** into **a613c1fa68fc3c74ab9244d70e3cca11c2de7101 on kcbanner:master**.\n. [![Coverage Status](https://coveralls.io/builds/6485372/badge)](https://coveralls.io/builds/6485372)\n\nCoverage increased (+0.3%) to 82.482% when pulling **7a1b614b93b9274a423a1acc40eecfc5a6a08b32 on Awk34:patch-1** into **a613c1fa68fc3c74ab9244d70e3cca11c2de7101 on kcbanner:master**.\n. [![Coverage Status](https://coveralls.io/builds/7236507/badge)](https://coveralls.io/builds/7236507)\n\nCoverage remained the same at 83.916% when pulling **b7babc8673140dbbe6f01b9409d41353fc0c965f on sweeneyapps:master** into **f4c8fa5d04777c0017f5123a10b71577de248d45 on kcbanner:master**.\n. \n[![Coverage Status](https://coveralls.io/builds/13624996/badge)](https://coveralls.io/builds/13624996)\n\nCoverage remained the same at 81.569% when pulling **a4a9384fac7ca027cfb22779642a6a2a3a280eeb on greenkeeper/initial** into **fea10942e96c20fb9f600fbc0235a7a88dee8f94 on master**.\n. [![Coverage Status](https://coveralls.io/builds/6485350/badge)](https://coveralls.io/builds/6485350)\n\nCoverage decreased (-18.7%) to 63.504% when pulling **7a1b614b93b9274a423a1acc40eecfc5a6a08b32 on Awk34:patch-1** into **a613c1fa68fc3c74ab9244d70e3cca11c2de7101 on kcbanner:master**.\n. [![Coverage Status](https://coveralls.io/builds/6485372/badge)](https://coveralls.io/builds/6485372)\n\nCoverage increased (+0.3%) to 82.482% when pulling **7a1b614b93b9274a423a1acc40eecfc5a6a08b32 on Awk34:patch-1** into **a613c1fa68fc3c74ab9244d70e3cca11c2de7101 on kcbanner:master**.\n. [![Coverage Status](https://coveralls.io/builds/7236507/badge)](https://coveralls.io/builds/7236507)\n\nCoverage remained the same at 83.916% when pulling **b7babc8673140dbbe6f01b9409d41353fc0c965f on sweeneyapps:master** into **f4c8fa5d04777c0017f5123a10b71577de248d45 on kcbanner:master**.\n. \n[![Coverage Status](https://coveralls.io/builds/13624996/badge)](https://coveralls.io/builds/13624996)\n\nCoverage remained the same at 81.569% when pulling **a4a9384fac7ca027cfb22779642a6a2a3a280eeb on greenkeeper/initial** into **fea10942e96c20fb9f600fbc0235a7a88dee8f94 on master**.\n. ",
    "thethakuri": "Nevermind. The problem was non connect-mongo related !\n. @romeboards The problem was with the load balancer architecture of Openshift, specifically HAProxy continuously pinging to check the backend server status. You can find more details [here](http://stackoverflow.com/a/37708742/2529191). \n. Nevermind. The problem was non connect-mongo related !\n. @romeboards The problem was with the load balancer architecture of Openshift, specifically HAProxy continuously pinging to check the backend server status. You can find more details [here](http://stackoverflow.com/a/37708742/2529191). \n. ",
    "romeboards": "@thethakuri Can you share how you resolved this issue/any reference material?\n. @thethakuri Can you share how you resolved this issue/any reference material?\n. ",
    "kutsokon": "I've resolved this issue, createConnection returns another instance, so you need to manage it differently. \n. ```\napp.use(session({\n        store: new mongoStore({\n            mongooseConnection: db\n        })\n    }));\n```\n\ndb is a mongoose instance\n. I've resolved this issue, createConnection returns another instance, so you need to manage it differently. \n. ```\napp.use(session({\n        store: new mongoStore({\n            mongooseConnection: db\n        })\n    }));\n```\n\ndb is a mongoose instance\n. ",
    "srajbr": "Hello @kutsokon can you share how you managed to convert the instance to desired type for MongoStore\n. Thanks @kutsokon :)\n. Hello @kutsokon can you share how you managed to convert the instance to desired type for MongoStore\n. Thanks @kutsokon :)\n. ",
    "wmertens": "I also noticed this bluebird warning:\n\n```\nWarning: a promise was created in a handler but was not returned from it\n    at MongoStore.touch (/myapp/node_modules/connect-mongo/src/index.js:279:18)\n    at ServerResponse.end (/myapp/node_modules/express-session/index.js:332:15)\n    at ServerResponse.send (/myapp/node_modules/express/lib/response.js:205:10)\n    at sendResObj (routes.js:77:7)\n    at routes.js:86:18\n    at promiseJson.js:18:8\n    at tryOnImmediate (timers.js:534:15)\n    at processImmediate [as _immediateCallback] (timers.js:514:5)\nFrom previous event:\n```\n\nMaybe something fails in that call and subsequent calls on the same connection hang?\n. I switched to reusing the Mongoose connection and that seems to have fixed it, but I'm not sure. I'll update tomorrow.\n. Indeed, using the mongoose connection I still don't have issues, and normally I would have had them by now.\n\nI will leave this issue open to make sure you know of it, perhaps the documentation should be adjusted to recommend using the Mongoose connection when using a Replica Set?\n. I also noticed this bluebird warning:\n\n```\nWarning: a promise was created in a handler but was not returned from it\n    at MongoStore.touch (/myapp/node_modules/connect-mongo/src/index.js:279:18)\n    at ServerResponse.end (/myapp/node_modules/express-session/index.js:332:15)\n    at ServerResponse.send (/myapp/node_modules/express/lib/response.js:205:10)\n    at sendResObj (routes.js:77:7)\n    at routes.js:86:18\n    at promiseJson.js:18:8\n    at tryOnImmediate (timers.js:534:15)\n    at processImmediate [as _immediateCallback] (timers.js:514:5)\nFrom previous event:\n```\n\nMaybe something fails in that call and subsequent calls on the same connection hang?\n. I switched to reusing the Mongoose connection and that seems to have fixed it, but I'm not sure. I'll update tomorrow.\n. Indeed, using the mongoose connection I still don't have issues, and normally I would have had them by now.\n\nI will leave this issue open to make sure you know of it, perhaps the documentation should be adjusted to recommend using the Mongoose connection when using a Replica Set?\n. ",
    "natiz": "I am still getting this issue in 1.3.2?\n\n```\nTypeError: Cannot read property 'upserted' of undefined\n    at .../node_modules/connect-mongo/src/index.js:252:36\n```\n\nThe content of **responseArray** seems to be: `[ { ok: 1, nModified: 1, n: 1 } ]`\n\n```\n    \"mongojs\": \"~2.4.0\",\n    \"connect-mongo\": \"~1.3.2\",\n```\n\n```\nbrew info mongodb\nmongodb: stable 3.2.0 (bottled)\n```\n. I am still getting this issue in 1.3.2?\n\n```\nTypeError: Cannot read property 'upserted' of undefined\n    at .../node_modules/connect-mongo/src/index.js:252:36\n```\n\nThe content of **responseArray** seems to be: `[ { ok: 1, nModified: 1, n: 1 } ]`\n\n```\n    \"mongojs\": \"~2.4.0\",\n    \"connect-mongo\": \"~1.3.2\",\n```\n\n```\nbrew info mongodb\nmongodb: stable 3.2.0 (bottled)\n```\n. ",
    "melnikovkolya": "Hey, thanks for an immediate reply. Just bumped it to 1.3.2 and voila! :)\n\nMuchas gracias!\n. Hey, thanks for an immediate reply. Just bumped it to 1.3.2 and voila! :)\n\nMuchas gracias!\n. ",
    "henfj": "dependencies for ant.design\r\n\r\n$ npm install babel-plugin-transform-object-assign --save\r\n$ npm install babel-plugin-transform-object-assign --save\r\n$ npm install babel-plugin-transform-object-rest-spread --save-dev\r\n\r\nand add the css:\r\n\r\n`<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/2.10.2/antd.css\">`. dependencies for ant.design\r\n\r\n$ npm install babel-plugin-transform-object-assign --save\r\n$ npm install babel-plugin-transform-object-assign --save\r\n$ npm install babel-plugin-transform-object-rest-spread --save-dev\r\n\r\nand add the css:\r\n\r\n`<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/2.10.2/antd.css\">`. ",
    "conor909": "I'm using the `require` method:\n`var MongoStore = require(\"connect-mongo\")(app);`\n\nI get the same error `TypeError: Cannot read property 'Store' of undefined`.\nIt looks like a bug the library?\n. Thanks!  I read a tutorial wrong.  This was also helpful https://github.com/jdesboeufs/connect-mongo#express-or-connect-integration\n. I'm using the `require` method:\n`var MongoStore = require(\"connect-mongo\")(app);`\n\nI get the same error `TypeError: Cannot read property 'Store' of undefined`.\nIt looks like a bug the library?\n. Thanks!  I read a tutorial wrong.  This was also helpful https://github.com/jdesboeufs/connect-mongo#express-or-connect-integration\n. ",
    "vko-online": "What's the solution @Arvin333 ?. What's the solution @Arvin333 ?. ",
    "rkrauskopf": "@shiwanlin Hi, I'm seeing the same issue intermittently on my project as well. Were you ever able to resolve this?  . @shiwanlin Hi, I'm seeing the same issue intermittently on my project as well. Were you ever able to resolve this?  . ",
    "shiwanlin": "@rkrauskopf No, no progress at this point, unfortunately.. @rkrauskopf No, no progress at this point, unfortunately.. ",
    "demsey2": "@rkrauskopf @shiwanlin any update on this, I am looking for something similar?. @rkrauskopf @shiwanlin any update on this, I am looking for something similar?. ",
    "goodfella1408": "What is the recommended way of handling this .Ideally R2 should fail because it is trying to update an old version of the document\n. What is the recommended way of handling this .Ideally R2 should fail because it is trying to update an old version of the document\n. ",
    "nikolai-derzhak-distillery": "Seems it is actually question to express devs: https://www.quora.com/How-can-we-disable-automatic-session-creation-of-expressjs\n. Seems it is actually question to express devs: https://www.quora.com/How-can-we-disable-automatic-session-creation-of-expressjs\n. ",
    "caub": "Any update? can it be merged?\n. The touch event is really practical for checking user's activity. So passing session avoid to have to make another get. Could we merge it? it's fully compatible. Any update? can it be merged?\n. The touch event is really practical for checking user's activity. So passing session avoid to have to make another get. Could we merge it? it's fully compatible. ",
    "brainthinks": "Is there a \"recommended\" way to get the session before it is destroyed?  For instance, I would like to do certain things with the id of the user that is part of my passport session, but all I have access to is the id of the session, which is at this point useless since I can't look that session up.  In looking through the source, the event is definitely emitted after the session is removed (after `collection.removeAsync`).  What about a pre-destroy event that passes the cached session?\r\n\r\n. Is there a \"recommended\" way to get the session before it is destroyed?  For instance, I would like to do certain things with the id of the user that is part of my passport session, but all I have access to is the id of the session, which is at this point useless since I can't look that session up.  In looking through the source, the event is definitely emitted after the session is removed (after `collection.removeAsync`).  What about a pre-destroy event that passes the cached session?\r\n\r\n. ",
    "MichaelBeier": "in case you haven't figured out a solution yet. Try passing express-session instead of express on require. I had a similiar issue.. in case you haven't figured out a solution yet. Try passing express-session instead of express on require. I had a similiar issue.. ",
    "leandroluk": "Reading the solution codes I saw that if I pass the \"collection\" parameter inside the options in the creation of the MongoStore instance, I can define the name of the collection that will be used for it.. Reading the solution codes I saw that if I pass the \"collection\" parameter inside the options in the creation of the MongoStore instance, I can define the name of the collection that will be used for it.. ",
    "chuangl": "Thank you very much. I am a newcomer to this. I have 2 problems when I modify this.One is the 'findAsync is not defined', solution: I add find string in setCollection like this ['find'...].forEach(method...;\r\nThe other is findAsync return mongodb cursor in my situation, my solution is use cursor.toArray(),then return a new Array.\r\nAny suggestion for me,Thanks. Thank you very much. I am a newcomer to this. I have 2 problems when I modify this.One is the 'findAsync is not defined', solution: I add find string in setCollection like this ['find'...].forEach(method...;\r\nThe other is findAsync return mongodb cursor in my situation, my solution is use cursor.toArray(),then return a new Array.\r\nAny suggestion for me,Thanks. ",
    "IRETD": "Yes, it's a really necessary feature!. Yes, it's a really necessary feature!. ",
    "djiordhan": "Hi I added test_all spec to legacy_test.js, it checks the newly inserted session under store.all function. It passed when I ran npm test in my machine but it failed in travis-ci 2 and 3rd tests. \r\n\r\nI even removed the spec but still its failing, it says it has something to do with mongoose version cannot see 'Server' of mongodb 1.4.40 version. . The connect-redis returns the session as array instead of cursor. I will implement this as well. .  \u2713 test_all\r\n\r\nThe test all passed in my machine and in travis-ci, but still theres an error about mongoose.. Hi I added test_all spec to legacy_test.js, it checks the newly inserted session under store.all function. It passed when I ran npm test in my machine but it failed in travis-ci 2 and 3rd tests. \r\n\r\nI even removed the spec but still its failing, it says it has something to do with mongoose version cannot see 'Server' of mongodb 1.4.40 version. . The connect-redis returns the session as array instead of cursor. I will implement this as well. .  \u2713 test_all\r\n\r\nThe test all passed in my machine and in travis-ci, but still theres an error about mongoose.. ",
    "jakubrpawlowski": "Temporary fix is to place all app.use middleware inside connect callback:\r\n```\r\nmongoclient.connect(mongourl, (error, database) => {\r\n   if (error) return console.log(error);`\r\n\r\n   db = database;\r\n\r\n   app.use...\r\n   app.use...\r\n   app.listen...\r\n}\r\n```\r\nBut I don't think that this is intended Express structure for production.. Another thing I am wondering is what if we have both `db` and `url` properties on object passed to `new mongostore()`? Are the checks executing in any particular order? It would make sense if connect-mongo was trying to first reuse the existing connection and in case of falsy value opening a new one (|| operator).. Temporary fix is to place all app.use middleware inside connect callback:\r\n```\r\nmongoclient.connect(mongourl, (error, database) => {\r\n   if (error) return console.log(error);`\r\n\r\n   db = database;\r\n\r\n   app.use...\r\n   app.use...\r\n   app.listen...\r\n}\r\n```\r\nBut I don't think that this is intended Express structure for production.. Another thing I am wondering is what if we have both `db` and `url` properties on object passed to `new mongostore()`? Are the checks executing in any particular order? It would make sense if connect-mongo was trying to first reuse the existing connection and in case of falsy value opening a new one (|| operator).. ",
    "lwhiteley": "no worries.. i found the issue. no worries.. i found the issue. ",
    "agoldis": "mongoose 4.11+ shows deprecation warning when using `open`, which causes users to switch to `useMongoClient` option (https://github.com/Automattic/mongoose/issues/5304)\r\n\r\nThat causes the returned value to be a Promise, and instead of `mongooseConnection`. `dbPromise` option should be used:\r\n```javascript\r\nconst connectionPromise = mongoose.createConnection(uri, { useMongoClient: true });\r\nconst MongoStore = require('connect-mongo')(session);\r\n    app.use(session({\r\n      resave: false,\r\n      saveUninitialized: false,\r\n      secret: 'xxx',\r\n      ttl: 14 * 24 * 60 * 60, // 14 days\r\n      store: new MongoStore({ dbPromise: connectionPromise })\r\n}));. mongoose 4.11+ shows deprecation warning when using `open`, which causes users to switch to `useMongoClient` option (https://github.com/Automattic/mongoose/issues/5304)\r\n\r\nThat causes the returned value to be a Promise, and instead of `mongooseConnection`. `dbPromise` option should be used:\r\n```javascript\r\nconst connectionPromise = mongoose.createConnection(uri, { useMongoClient: true });\r\nconst MongoStore = require('connect-mongo')(session);\r\n    app.use(session({\r\n      resave: false,\r\n      saveUninitialized: false,\r\n      secret: 'xxx',\r\n      ttl: 14 * 24 * 60 * 60, // 14 days\r\n      store: new MongoStore({ dbPromise: connectionPromise })\r\n}));. ",
    "nanom1t": "@agoldis Thanks for your example, but it does not work for me. Here is my app.js:\r\n```\r\n...\r\nvar express = require('express');\r\nvar session = require('express-session');\r\nvar MongoStore = require('connect-mongo')(session);\r\nvar mongoose = require('mongoose');\r\nmongoose.Promise = require('bluebird');\r\nvar mongoosePromise = mongoose.createConnection('mongodb://user:password@127.0.0.1:27017/MyDB', { useMongoClient: true });\r\n....\r\napp.use(session({\r\n    name: configs.SESSIONS_ID,\r\n    secret: configs.SESSIONS_SECRET,\r\n    store: new MongoStore({ dbPromise: mongoosePromise, ttl: configs.SESSIONS_TTL, autoRemove: 'native'}),\r\n    saveUninitialized: true,\r\n    resave: false,\r\n    proxy: true\r\n}));\r\n```\r\nIn this case my app is loading very long period of time (more than 1 minute) and then I get 502 gateway timeout. However, everything works good when I'm using deprecated connect method, but I get `DeprecationWarning: `open()` is deprecated in mongoose >= 4.11.0`:\r\n```\r\nvar mongoose = require('mongoose').connect('mongodb://user:password@127.0.0.1:27017/MyDB');\r\n...\r\napp.use(session({\r\n    name: configs.SESSIONS_ID,\r\n    secret: configs.SESSIONS_SECRET,\r\n    store: new MongoStore({ mongooseConnection: mongoose.connection, ttl: configs.SESSIONS_TTL, autoRemove: 'native'}),\r\n    saveUninitialized: true,\r\n    resave: false,\r\n    proxy: true\r\n}));\r\n``` \r\nCould you please help with this issue?\r\n\r\nThanks. @agoldis Thanks for your example, but it does not work for me. Here is my app.js:\r\n```\r\n...\r\nvar express = require('express');\r\nvar session = require('express-session');\r\nvar MongoStore = require('connect-mongo')(session);\r\nvar mongoose = require('mongoose');\r\nmongoose.Promise = require('bluebird');\r\nvar mongoosePromise = mongoose.createConnection('mongodb://user:password@127.0.0.1:27017/MyDB', { useMongoClient: true });\r\n....\r\napp.use(session({\r\n    name: configs.SESSIONS_ID,\r\n    secret: configs.SESSIONS_SECRET,\r\n    store: new MongoStore({ dbPromise: mongoosePromise, ttl: configs.SESSIONS_TTL, autoRemove: 'native'}),\r\n    saveUninitialized: true,\r\n    resave: false,\r\n    proxy: true\r\n}));\r\n```\r\nIn this case my app is loading very long period of time (more than 1 minute) and then I get 502 gateway timeout. However, everything works good when I'm using deprecated connect method, but I get `DeprecationWarning: `open()` is deprecated in mongoose >= 4.11.0`:\r\n```\r\nvar mongoose = require('mongoose').connect('mongodb://user:password@127.0.0.1:27017/MyDB');\r\n...\r\napp.use(session({\r\n    name: configs.SESSIONS_ID,\r\n    secret: configs.SESSIONS_SECRET,\r\n    store: new MongoStore({ mongooseConnection: mongoose.connection, ttl: configs.SESSIONS_TTL, autoRemove: 'native'}),\r\n    saveUninitialized: true,\r\n    resave: false,\r\n    proxy: true\r\n}));\r\n``` \r\nCould you please help with this issue?\r\n\r\nThanks. ",
    "ilarioengler": "@nanom1t \r\n\r\n> However, everything works good when I'm using deprecated connect method, but I get DeprecationWarning:open()is deprecated in mongoose >= 4.11.0:\r\n\r\nmongoose.connect() method is not deprecated.\r\n\r\nOpen connection like this..\r\n`let conn = mongoose.connect(uri, { useMongoClient: true });`\r\n\r\nSpecify store like this..\r\n`app.use(session({ store: new MongoStore({ mongooseConnection: mongoose.connection })}));`\r\n. I already created a pull request for this issue. See #269.. @nanom1t \r\n\r\n> However, everything works good when I'm using deprecated connect method, but I get DeprecationWarning:open()is deprecated in mongoose >= 4.11.0:\r\n\r\nmongoose.connect() method is not deprecated.\r\n\r\nOpen connection like this..\r\n`let conn = mongoose.connect(uri, { useMongoClient: true });`\r\n\r\nSpecify store like this..\r\n`app.use(session({ store: new MongoStore({ mongooseConnection: mongoose.connection })}));`\r\n. I already created a pull request for this issue. See #269.. ",
    "jjtortosa": "+1. +1. ",
    "xiao-xiansheng": "+1. +1. ",
    "ivancsicsmarkus": "+1. +1. ",
    "AdoneZ": "+1. +1. ",
    "CivFactions": "Other people reporting this problem.\r\nhttps://github.com/Automattic/mongoose/issues/5692\r\n\r\nAccording to docs, `createIndex()` is an alias, so it should just be a replacement.. Other people reporting this problem.\r\nhttps://github.com/Automattic/mongoose/issues/5692\r\n\r\nAccording to docs, `createIndex()` is an alias, so it should just be a replacement.. "
}