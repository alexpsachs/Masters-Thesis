{
    "jhnns": "Version bump and publish please :wink: :+1: \n. :dancers: \n. Does `node-sass` provide an api to intercept the compilation process? @sokra is using the Less-Parser in the [less-loader](https://github.com/webpack/less-loader/blob/master/index.js)\n. I've made some investigation and it seems like [libsass](https://github.com/hcatlin/libsass) (which node-sass is based on) is not providing a way to intercept the loading of files. This means that we can't resolve files by webpack's algorithm.\n\nAt least libsass is exposing an array of all imported files which can be marked as dependency. Unfortunately [node-sass isn't exposing this yet](https://github.com/andrew/node-sass/issues/279).\n. > @import will not use webpack's pipeline (unless it is a CSS import that gets passed to css-loader).\n\nExactly. You can raise your voice [here](https://github.com/hcatlin/libsass/issues/21), maybe they'll implement it.\n\n> What else?\n\nThe watch-mode won't work for sass-modules since webpack doesn't know about the dependencies. If node-sass exposed the array of all imported files, at least this could be fixed. Until then a third-party watcher which simply watches all `scss`-files can be used.\n\n> It would probably be nice to add a caveat to the documentation for this loader\n\nYep :+1: . Creating a pull-request of the readme is very easy on GitHub. Just click the edit-button :smile: \n. Cool!\n. Btw: I'm currently working on this at [node-sass](https://github.com/andrew/node-sass/pull/290). You can watch the progress there.\n. [`includedFiles`](https://github.com/andrew/node-sass#stats) landed in node-sass today, so marking dependencies is now possible.\n. It seems like there is an issue on [macs](https://github.com/andrew/node-sass/pull/290#issuecomment-42289919)...\n. Have you [initialized the submodule `libsass`](http://git-scm.com/book/en/Git-Tools-Submodules#Cloning-a-Project-with-Submodules)? It seems like it can't find the header files:\n\n```\n../sass_context_wrapper.h:1:36: fatal error: libsass/sass_interface.h: No such file or directory\n```\n. Yup!\n. Nice! :+1: \n. @sokra ?\n@lukebrooker This is completely handled by node-sass, but I assume that it is imported twice as this is sass' default behavior. However, [there are hacks](https://gist.github.com/courtsimas/1167053) to avoid it.\n. @ryanseddon This kind of modularity is currently not possible with any CSS preprocessor (LESS and SASS), because each compilation is self-contained and doesn't know about previous compilations. That's why every `require()` of a SASS or LESS file creates a complete standalone CSS file with all the duplicates.\n\nHowever, LESS provides [a way to import other LESS files without including the source](http://lesscss.org/features/#import-options-reference) which works quite well.\n. Yep https://github.com/jtangelder/sass-loader/pull/22 :grinning:\n. Ok thx :+1: \n. Cool, thx.\n. We should check if this is possible with the current beta version of node-sass.\n\nThe current master branch is [already using node-sass 2.0](https://github.com/jtangelder/sass-loader/blob/100f2a53c7fbbc8b19dde20f8a16c8c837049a8c/package.json#L23), so we can start playing with it now.\n. Has been published as `v0.4.1`. I've added [instructions](https://github.com/jtangelder/sass-loader#source-maps) to the README.\n. `inline-source-map` is the best option for development, because it requires no setup to retrieve the original source. However, it's not suitable for production, that's why we leave it up to the user to configure.\n. But a segmentation fault is not an issue of the sass-loader?\n. It's a tricky question. There are pro and cons for both sides. The less-loader decided to move it to `peerDependencies`...\n. I think we should move it to the `peerDependencies`. There is a greater benefit for most developers to specify the sass version directly (see recent pull-requests and issues regarding node-sass v2).\n\nNow that `peerDependencies` [will _not_ be deprecated](https://github.com/npm/npm/issues/6565#issuecomment-74971689).\n. done()\n. node-sass just implemented the api (sass/node-sass#530). Now we need to wait for v2 to be released.\n. > Is this now working?\n\nNope, we need to adjust the sass-loader for this. But I guess it's ready to be implemented :grimacing: \n. @akiran ok to merge?\n. I could do it. But currently I don't have a sass-project either, it's just personal interest :grinning:. Maybe both @akiran and me? \n. Most of the time I publish under the name of [peerigon](https://www.npmjs.org/~peerigon).\n. :+1: \n. Looks good to me!\n. Published as `0.3.1`\n. Mhmmm guessing from the comments it is an issue related to `node 0.11`. When I run `npm i sass-loader` on `node 0.10.33` there are no errors.\n\nSince `node 0.11` is not a stable release I don't think we need to lock the version number...\n. Damn!\n. Starting with 1.0.0, node-sass is now a `peerDependency`\n. Fixed with https://github.com/jtangelder/sass-loader/pull/113\n. This is more likely an issue with npm or your setup. I can't find any clue why this should be a problem with sass-loader itself.\n. Cool, thx! :+1: Could you also add some tests?\n. Synchronous compilation has been implemented, but there is no flag yet...\n. I don't know what the correct settings are, but you probably need to adjust the `$icon-font-path`-variable. Bootstrap provides the possibility to [configure the path to the icon fonts](https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_glyphicons.scss). Make sure that the url() is pointing from the imported file (probably `/assets/stylesheets/_bootstrap.scss` in your case) to the font-files.\n. You need to think from the css-loader's perspective. It gets a css-file with url() statements referencing files. Now you need to start from the css-file's location and walk the relative url to the file and look if the path is correct.\n. Related discussions: sass/sass#1015 sass/libsass#532\n\nYou could also try [this sass mixin](https://github.com/glebm/sass-rewrite-url) to achieve relative urls.\n. :+1: \n. `$bootstrap-sass-asset-helper` might also work. However, setting `$icon-font-path` relative to the _scss_ entry file does also work. I'm using this setting in my projects.\n. [There is a test for bootstrap](https://github.com/jtangelder/sass-loader/blob/c5f311f2614723129d1d1acbda8d7b136c3badda/test/bootstrapSass/webpack.config.js). It must be related to your local config.\n. There's a note about this problem at https://github.com/jtangelder/sass-loader#problems-with-url. Why was this not helpful? We have a test for bootstrap: https://github.com/jtangelder/sass-loader/blob/master/test/scss/bootstrap-sass.scss\n. First of all, thank you for your pull-request. I'm glad you noticed the new `includedFiles`-feature, [I've implemented it in node-sass](https://github.com/sass/node-sass/pull/290) :grinning:\n\nWe've [discussed about marking dependencies](https://github.com/jtangelder/sass-loader/pull/29). The problem is, that libsass is ignoring the whole module when there's a syntax error. Thus webpack's file watcher will not fire, even after you've fixed the error. This has probably been fixed with a new version of libsass (I recall a discussion about this at libsass). But before we're removing `sass-graph` we need to assert that all dependencies are marked (even those with a syntax error).\n\nHowever, I'm willing to publish a beta of the sass-loader which will use the new node-sass version. There will also be [custom importers](https://github.com/jtangelder/sass-loader/issues/31) which will integrate nicely with webpack's custom resolving engine.\n. That would be great :+1: \n. I'm getting an error on node 0.11.14\n\n```\nmodule.js:355\n  Module._extensions[extension](this, filename);\n                               ^\nError: Module did not self-register.\n    at Error (native)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/Users/jhnns/dev/jtangelder/sass-loader/node_modules/node-sass/lib/index.js:211:15)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n```\n\nThis is probably related to [a recent fix at node-sass](https://github.com/sass/node-sass/issues/627). I don't think that we can publish the current state because it would break all projects using node 0.11.x.\n. We should probably also bump our major version, because according to node-sass it _is_ a breaking change.\n. node-sass 2.0.0 has been released... sass/node-sass#157\n. Has been published as `0.4.0`\n. #41\n. Has been published as `0.4.0`.\n. Thx\n. LESS is handling these issues [way more elegantly](https://github.com/webpack/less-loader/issues/7#issuecomment-69595045)...\n. Afaik libsass doesn't touch urls(). This error is probably caused by the css-loader. \n\nThe webpack-way of doing this is to configure the [file-loader](https://github.com/webpack/file-loader) or [url-loader](https://github.com/webpack/url-loader) for these binary files.\n\nIf you're really sure that webpack shouldn't manage these assets, you can use [root urls](https://github.com/webpack/css-loader#root-relative-urls) (= urls starting with a `/`) to signalize the css-loader, that it shouldn't touch them.\n. Mhmm I'm not quite sure ... could be an issue with [sass-graph](https://github.com/xzyfer/sass-graph). Could you remove the [calls of `markDependencies()`](https://github.com/jtangelder/sass-loader/blob/master/index.js#L42) in your local installation of the sass-loader and check, if the problem still exists?\n. Fixed?\n. We don't depend on sass-graph anymore.\n. Donnu ... if our tests are passing, we should publish it. If our tests are passing while we _know_ that it doesn't work in actual projects, we should fix our tests :grin: \n. You mean because of https://github.com/jtangelder/sass-loader/pull/41#issuecomment-70372228?\n. Yep, I've published it.\n\nWe should consider using a major version bump and following semver...\n. Could you show an example how you'd expect things to work?\n\nI'm afraid that this is currently not possible (if I got it right). But with custom importers #31 it's probably possible. Then you can write a special loader, which generates scss code to import your dynamic vars.\n. Mhmmm your solution would probably work too.\n\nAnd when you need to access the variables also via client-side JavaScript:\n\n``` javascript\nwebpack.DefinePlugin(require(\"./styles/variables.js\"));\n```\n. Oh, there are use-cases where this is required... :)\n\nI'll check that!\n. @Kasu haha, nice!\n@nwhite89 no I don't think so. I don't want to extend the language itself...\n. Is @EdwardIrby 's solution working for you? I'd like to link the loader in our README, but I'm not sure about how safe that string replaces are :grin: ...\n\nDo you have any experience on this?\n. Thx @nightgrey \n\nThis issue can now also be solved with the `data`-option. Just [define any Sass code](https://github.com/jtangelder/sass-loader#environment-variables) which will be prepended to the actual entry file.\n. > It's a bit confusing where to options, query params or sassLoader\n\nI know... this will be simpler with webpack 2 where there is a dedicated way to set the options (query params didn't work so well with more complex use-cases).\n. Nope, looks good. There must be a different error in your setup.\n. @nagarajay Does [this](https://github.com/webpack/webpack/issues/2684#issuecomment-255155479) work for you?\n. When they're using [`!default`](https://robots.thoughtbot.com/sass-default), yes. Otherwise, no.\n. While this is true for webpack 1, this has been changed with webpack 2. See current README.. You're right, but [this will probably be fixed](https://github.com/jtangelder/sass-loader/pull/29#issuecomment-63221951) as soon as node-sass 2.0 is ready-to-use.\n. @akiran Should we publish it without `beta`?\n. #51\n. Sorry for not answering this.\n\nFirst of all: Thank you for work. I appreciate every contribution. Unfortunately this PR looks a bit over-complicated to me. Imho you're using too much internal stuff which can then break easily when @sokra changes something.\n\nWe can take the [less-loader](https://github.com/webpack/less-loader) as blueprint since it already has this feature for quite some time. The important code is [here](https://github.com/webpack/less-loader/blob/10279f468625bc31b62720f9da9847bebbcaab68/index.js#L86-L107). We can let webpack/enhanced-resolve do the resolving by calling\n\n``` javascript\n// loaderContext is `this` inside the loader\nloaderContext.resolve(context, moduleRequest, cb)\n```\n\nTake also a look at the [loader api](http://webpack.github.io/docs/loaders.html#resolve).\n\nI'll publish a branch which contains the refactoring for node-sass@2.0.0\n. Oh, ok... didn't know that you already tried the `less-loader` approach.\n\n@izaakschroeder what do you mean by \"module urls\"? Inlined loaders?\n@sokra is that true? Does `loaderContext.resolve` not apply inline loaders?\n\nI don't know what you mean by \"root directory\", but the described behavior should be done with [`loaderUtils.urlToRequest(url)`](https://github.com/webpack/loader-utils#urltorequest)\n. Check out [this chapter](https://github.com/webpack/loader-utils#urltorequest) of loader-utils.\n\nThe `~`-prefix points to module directories. This should be consistent across all loaders where the import/require syntax doesn't differentiate between local and module directories. The css-loader and less-loader are already using it.\n. I've implemented the custom importer with the less-loader approach.\n\nAnyway, thanks for your suggestions :+1: \n. Running `npm install sass-loader` and inspecting the `package.json` outputs:\n\n``` javascript\n  \"dependencies\": {\n    \"loader-utils\": \"^0.2.5\",\n    \"node-sass\": \"^2.0.1\",\n    \"sass-graph\": \"^1.0.3\"\n  },\n```\n. Try to run it in an empty folder. You've probably specified another version in your `package.json`.\n. No problem\n. The `sass-loader` just [returns a string containing css](https://github.com/jtangelder/sass-loader/blob/master/index.js#L43) so you should be free to do whatever you want. However, I do recommend that you use the css-loader, so that all referenced images are written to the output folder as well.\n\nI don't know anything about the css-loader returning arrays or something. I thought it would also just return a string (but I also haven't used the output directly yet).\n. Thx\n. Starting with 1.0.0, we don't depend on sass-graph anymore.\n. Thx.\n\nPublished as `0.4.2`\n. I'll take a look\n. Could you create a small test-case? I need to know more about your actual project structure, because source maps are working as expected in our repo.\n. No problem. :grinning: \n. #31 \n. > Just wanted to confirm my understanding after reading through the issues that a solution to this is still being worked on?\n\nYes\n. Thank you for your PR! But I'll favor #61, if that's ok for you :)\n. Published as `0.5.0`.\n\nJust wanted to point out that `node-sass` will be listed as `peerDependency` with sass-loader `1.0.0`\n. Thx :+1: \n. Not yet. You could [switch `isSync` to `true`](https://github.com/jtangelder/sass-loader/blob/19d01ab0db9e8066d250134a6080b780b3064ad9/index.js#L27) in your local installation to test it. I heard that sync compilation is awful slow in sufficient complex projects so this has no priority for me.\n. Stuck processes should be no issue with 2.0.0 anymore. So this flag is not necessary.\n. Yep, I was also getting these. You need to stick with sass-loader `0.x` until this is fixed. :unamused: \n. I've managed to write a version of sass-loader that provides the same features while depending on node-sass `2.1.1`. It's on a [separate branch](https://github.com/jtangelder/sass-loader/tree/release/v0.6.0) and can be installed via `npm i sass-loader@0.6.x`. Please note, that sass-loader `0.6.0` is listing node-sass as `peerDependency` as well.\n. I didn't expect `node-sass 3.0.0-beta` to be so unstable, but \u2013 well \u2013 it is a beta. @alexhawkins you can use old versions of `sass-loader` until the current ones are stable.\n. Afaik `sass-loader@0.4.2` is the last version that does not bother you with errors\n. @raphaelsaunier I've updated the README\n. @haustraliaer that are good news. Please let me know if everything works as expected. I'll remove the note in the README then.\n. @alexduan this does not happen in our tests, so please try to narrow it down and open a separate issue.\n. With `sass-loader 1.0.0` `node-sass` should now be a dependency of _your_ project.\n. `node-sass@3.0.0-alpha.0` is \u2013 as the name suggests \u2013 not stable :wink:. Probably the same issues as #65 \n. The files are now resolved by webpack, and webpack doesn't care about the `_` mechanism. However, since Sass users are expecting this feature to work (although it has nothing to with the language itself and should imho not be part of the specification, but that's another topic :wink:), I'm willing to implement this feature.\n\nIf you don't want to replace all your import statements, I recommend to stick with sass-loader `0.x` for now. There are also some issues on OSX afaik #65. \n. Should be fixed with `1.0.1`\n. Is that a wildcard or do you have a file called `*.scss`? Wildcards are not supported.\n. #151 \n\nAre globs supported by Rubysass? Why are people expecting this to work?\n. node-sass 3.0.0 is causing some trouble :cry:\n\n#71\n. I've managed to write a version of sass-loader that provides the same features while depending on node-sass `2.1.1`. It's on a [separate branch](https://github.com/jtangelder/sass-loader/tree/release/v0.6.0) and can be installed via `npm i sass-loader@0.6.x`. Please note, that sass-loader `0.6.0` is listing node-sass as `peerDependency` as well.\n. I suppose, this is a problem with node-sass/libsass itself, because sass-loader is just passing the input on.\n. Mhmm damn ... we can't just decrement the node-sass dependency because sass-loader 1.0.0 builds on the new API introduced with 3.0.0.\n\nMaybe I can publish a stable sass-loader version without the new features introduced with 1.0.0...\n. @am11 thx for the support! `3.0.0-beta.4` is working pretty reliable in our tests.\n. It's in `node-sass`: https://github.com/sass/node-sass/issues/713\n. I've managed to write a version of sass-loader that provides the same features while depending on node-sass `2.1.1`. It's on a [separate branch](https://github.com/jtangelder/sass-loader/tree/release/v0.6.0) and can be installed via `npm i sass-loader@0.6.x`. Please note, that sass-loader `0.6.0` is listing node-sass as `peerDependency` as well.\n. Yeah, [we've realized that too](https://github.com/sass/node-sass/issues/713#issuecomment-89814670) :disappointed:. It's a problem inside the custom importer code.\n. Awesome!\n. With sass-loader 2.0.0, you should have no problems with it anymore.\n. Thx for the feedback, but this error does not seem to be related to sass-loader...\n. Would it be possible if we didn't set the option? How is node-sass supposed to know, which syntax is used?\n. Shipped with `v1.0.2`.\n\nImporting a file with the other language style requires the extension to be set explicitly.\n. I don't think that this is a sass-loader issue, because we're just passing the input to [node-sass](https://github.com/sass/node-sass) which passes it on to [libsass](https://github.com/sass/libsass). \n\nYou could make a PR to [sass-spec](https://github.com/sass/sass-spec) to demonstrate the problem. Maybe @mgreter can help you.\n. [There are actually tests for error reporting](https://github.com/jtangelder/sass-loader/blob/05396a5d82f67dac5e4c8932da27212cb6df2aac/test/index.test.js#L39-L77), so I don't expect this issue to be a problem of sass-loader. Could you provide a minimal example of your project where the error occurs?\n. Thx, I'll take a look\n. Is this still an issue?\n. I'm glad to hear that :+1: \n. Thx for the report. Could you check if that is a node-sass or libsass issue? The sass-loader just passes the input on.\n. There is an working example with bootstrap-sass in our test-folder: https://github.com/jtangelder/sass-loader/tree/master/test/bootstrapSass\n. Is `notsass` a css file?\n. So is this a duplicate of #73?\n. Yep, that problem is vice versa, because the feature doesn't exist :grin: \n. Probably caused by #73\n. Does `v1.0.2` fix this issue?\n. I'm glad I could help :grinning: \n. Yep. We need to track that issue, it's not a sass-loader thing.\n. Is the URL wrong or is the map file just not generated?\n. You're right. It looks like this has changed in webpack somehow... need to investigate.\n. Thx for investigating this.... so maybe we just need to remove all the `sourceMappingURL` references added by libsass?\n. > Maybe there should be an option for libsass to generate a source map without adding a reference\n\nWell, that option doesn't make sense from libsass' point of view ^^\n. I'll try that out, thanks!\n. Yep. See #123 \n. No problem, that's a legitimate question :grin: \n\nWe had the experience that most of the time it's more useful when the app author is able to specify the exact module version. sass-loader is basically just calling `render()`, the actual language features are used by you, the app author.\n\nOtherwise we had to publish a new version for each `node-sass` version, which is a maintenance nightmare.\n\nIt's the same problem with the less-loader btw.\n. No problem. `0.6.0` _is_ actually the latest version that has been published. But that was a compatibility fix for an older version.\n. That's node-sass or libsass afaik. There is no `console.log()` in sass-loader.\n. Have you tried using `https://` urls?\n\nBtw: Could you please format your question decently. You're expecting us to help you, so please help us understanding you.\n. Ah interesting... thx.\n. 0.6.0 is the last published version, because it contains a fix for the `0` major release. However, the current version you should install is `v1.0.1`\n. How do you configure the sass-loader in your `webpack.config`?\n. @sokra How do the paths need to be escaped?\n. Is this still an issue?\n. Yes, honestly, using `encodeURIComponent` is counter-intuitive. On the other hand, the configuration writer is the only person who can escape it properly because they know where the characters belong to. Is `&` part of the config or is it used to distinguish different parameters?\n. That PR looks good! I'm definitely willing to merge that. :+1:\n\nJust add some tests :)\n. Shipped with `v1.0.2`\n. All url()s must be relative to the sass main entry file, because the css-loader resolves the url()s based on this location.\n\n[Less](http://lesscss.org/) has an option which rewrites the urls accordingly, but Sass has not afaik. Have you tried overriding the [`$icon-font-path`](https://github.com/twbs/bootstrap-sass/blob/e0ddfcdf288c23bd97b8511a290db7291ccf1860/assets/stylesheets/bootstrap/_variables.scss#L83) instead?\n. Oops, that's probably a bug introduced with `1.0.2`. We have to take care of `.css` file extensions\n. Should be fixed with 2.0.0\n. I know that issue, but afaik it is not restricted to the sass-loader, it's a webpack-dev-server issue. I've experienced this with javascript code as well @sokra\n. I'll investigate this as soon as I've found some time.\n. See https://github.com/jtangelder/sass-loader/pull/104#issuecomment-108525870\n. Fixed with 1.0.4\n. Remove the `sass-loader` entry in your `package.json` and run `npm i sass-loader@1.x --save`. This should (currently) pull `node-sass@3.1.1` \n. That's strange. The sass-loader doesn't modify any paths. Webpack should also be possible to work with these paths. Could you find out how these paths are messed up? What is actually wrong?\n. Should be fixed with 2.0.0\n. `^3.0.0-beta.4` should pull all versions up to `4.0.0` afaik.\n. Is it 5 times D or 6 times D? ^^ `#DDDDD` is no valid CSS color, `#DDDDDD` is.\n. Mhmm nope. That's a node-sass error so it should probably be reported in their repo. Can you isolate the error in a single file and compile that without webpack, just with node-sass?\n\nYou could try to not use protocol-relative URIs.\n. Is this still an issue with 2.0.0?\n. Since sass-loader 1.0.0 you don't need to set the `includePaths` manually. It should be resolved like a webpack module.\n\nThe error about not finding `_foundation.scss` is misleading, I have to admit. But the sass-loader always tries to resolve the module without a preceding underscore first, then _with_ underscore. So that's not the error (I probably have to rework the error messages).\n\nCould you post your `webpack.config.js`?\n. Mhmm it could be that `includePaths` is broken since `1.0.0` because webpack is responsible for resolving paths (I still need to confirm that in a test though). However, it _should_ work if you do it the webpack-way: Add `./src/main/resources/vendor/` to `resolve.root` and then write `@import \"~foundation/scss/foundation\"`\n. > I would prefer to write the scss (and really, all my code) webpack-agnostically\n\nThat's a valid argument...\n\nI'll have a look as soon as I found some time. Unfortunately I'm loaded with work... :unamused:. In the meantime, you can also take a look for yourself. The code is not complicated, but it requires some understanding about how to write loaders for webpack.\n. Should be fixed with 1.0.3\n. Probably also related to #100?\n. That's strange, thx for reporting this. Could you set up a small gist that reproduces the error?\n. @haustraliaer 's example shows the hangs.\n. I would be happy to provide a temporary fix, but #109 seems a bit risky to me...\n. If someone can publish a project that makes this reproducible, that would be a big help \ud83d\udc4d . Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. @jsg2021 When you add the `.css` extension, libsass does not include the file, it just turns it into `@import url(..)`. When this is passed to the css-loader, all urls must be relative to the file which imports them. When you omit `.css`, libsass includes the file just like it was a `.scss` file. In this situation, all urls must be relative to the entry sass/scss file which was passed to the sass compiler.\n\nThis is how libsass handles it, [the sass-loader is just imitating it](https://github.com/jtangelder/sass-loader/blob/089c52dc9bd02ec67fb5c65c2c226f43710f231c/index.js#L293-L348).\n. Mhmm I don't have a working Windows setup to reproduce the error. Would be great if you could give me some insight. The sass-loader is not a huge project, so it should be fairly understandable.\n\n[This is the line](https://github.com/jtangelder/sass-loader/blob/fff1c6857e2352f8cbc0230f8eae19ba30964b94/index.js#L249) that makes the included file known to webpack.\n. Do you use `npm link` or `bower link`?\n. Will be fixed with the next major version. You can already test the master branch.\n. Fixed with 2.0.0\n. Interesting @jeffling :+1: \n\nI think it's also possible to just do something like\n\n``` javascript\n#my-namespace {\n    @import \"all/that/stuff\";\n}\n```\n. Yep. To be honest, I haven't found a way the other way round without code duplication.\n. Thanks for the pull-request, but I'm not sure if I should merge it. It increases the size of the final css considerably and thus is not an option to use in production...\n\nAs long as your able to set `sourceMapContents=true` in your app, that's a fair workaround.\n. After fiddling around, I realized that webpack includes the sourceMapContents by default anyway. Thus I've finally merged this manually. Shipped with `1.0.4`.\n\nThx for your effort! :+1: \n. Yep, that's a known problem of preprocessors (both SASS and Less). I haven't found an easy way for SASS, though. Less introduced the [`import (reference)`](http://lesscss.org/features/#import-options-reference) mechanism for that use-case.\n. We can't solve this because each `require()` of a SASS file from a JS file will trigger a distinct compilation. This is how loaders work.. That's a confirmed concurrency issue of node-sass 3. See #100 \n. Thx for the sample project. With \"live reload\": Do you mean page reload on file change or do you actually mean Hot Module Replacement (HMR), which replaces the stylesheets on the fly (#37)?\n. There's currently an issue with the [style-loader](https://github.com/webpack/style-loader/issues/53) which makes HMR impossible.\n. HMR is not a concern of the sass-loader. Thx for reporting this. I'll have a look as soon as I found some time. Unfortunately I'm loaded with work... :unamused:.\n\nIn the meantime, you can also take a look for yourself. The code is not complicated, but it requires some understanding about how to write loaders for webpack.\n. Is this still an issue with the recent version of sass-loader?\n. Should be fixed with 2.0.0\n. Mhmmm ... do you know how deasync works? I'm a bit afraid to merge this when deasync is messing with node's event loop. It looks like black magic to me :grinning: \n\nCan more people try this PR locally? If it fixes the current issues (and deasync is \"harmless\"), I am willing to merge it.\n. Issue fixed by #132.\n\nBut thank you for your effort and your proposal :+1:. Although I did not merge it, I do think that these contributions help to improve the code.\n. @oopschen Thx for investigating this! See PR for discussion.\n. Should be fixed with 1.0.3\n. That's a nice feature I was [also already thinking about](https://github.com/peerigon/stylevar-loader/issues/1).\n\nThis should be doable with [node-sass' custom importer](https://github.com/sass/node-sass#importer--v200---experimental). The sass-loader [is already using it](https://github.com/jtangelder/sass-loader/blob/master/index.js#L137) to plug-in webpack's file resolver. Acoording to node-sass' README, you can also specify an array of functions for `importer`.\n\nYou could try to prepend a JSON custom importer, which generates a SASS map if encounters a JSON-file. In all the other cases, it should return `sass.NULL` (according to node-sass' README). If you're successful, we can change the sass-loader so that anyone can prepend own custom importers (currently, `importer` would just be overwritten).\n. Thx for the pull-request. Please add tests that demonstrate what kind of bug you were trying to fix, so that future code changes won't regress this feature.\n\nI'll review the PR as soon as I found some time.\n. That looks good! :+1: I'll merge (and refactor) and publish it in a few days.\n\nSorry, I was not aware that the tests were not running for people cloning a fresh copy of the repository. It _should_ work for everyone without extra work just by running `npm test`.\n. Shipped with 1.0.3\n. This probably requires a call of [`loadModule()`](https://github.com/jtangelder/sass-loader/blob/089c52dc9bd02ec67fb5c65c2c226f43710f231c/index.js#L167). I need to find out if there is a synchronous version of that method.\n. I talked to @sokra and he's planing to deprecate synchronous loaders, which means we could use `loadModule()`. It was initially introduced to allow synchronous `require()` in node without compiling. The `target: \"node\"` config, however, is more practical in most real world use-cases.\n\nThen I need to clean up the code as it currently contains a lot of duplication and branching because of sync support.\n. Close?\n. That looks good, thx. :+1:\n. Shipped with 1.0.3\n. Didn't know that git supports file modes ^^\n. Thx :+1: \n. Fixed with 2.0.0\n. I've followed these discussions in several repositories.\n\nI think it's a huge benefit for all these \"plugin modules\" like the sass-loader if you can specify the exact Sass/LESS/grunt/gulp/whatever version. These \"plugin modules\" are just a thin layer between your app and another big library. It does not feel right if they bring this dependency in. And it's very time-consuming to handle all the \"bump version\" PRs :)\n\nI'm open for further discussion, but we won't change this soon. That's why I'll close this for now.\n. I see, we need to omit the source maps because otherwise webpack's source map comment would be ignored. Without `.omitSourceMapUrl` it looks like this:\n\n``` css\nbody {\n  background: lightgrey; }\n\n/*# sourceMappingURL=test/output/sass.map */  <-- from node-sass\n/*# sourceMappingURL=data:application/json;base64,...*/  <-- from webpack\n```\n. Will be published soon. I just need to do some tests and I'll update the docs. Also related to #104.\n. Shipped with `1.0.4`\n. Thx for your effort @DawidJanczak. Does https://github.com/jtangelder/sass-loader/pull/113 solve the same thing?\n. Anyway, thx! :+1: \n. Yes, a public example would be helpful. Besides that: Which version of sass-loader do you use? We've fixed some bugs with 1.0.3 concerning the import system.\n. Ok, thx. Then we need a test to reproduce it, so we won't introduce the regression again.\n. A minimal test setup would be more helpful. After 5 minutes I'm still cloning the repo... ^^\n. I've checked it on my virtual machine. Your example passes the sass-loader without error, but the css file is imported with an absolute path. This behavior is not intended (see #138).\n\nHowever, it should be no problem for the css-loader, but it seems like the css-loader [is not able to recognize absolute Windows paths](https://github.com/webpack/loader-utils/blob/a8610120db7bcdde249cbf7bcaa5f8ce65aa318d/index.js#L118) @sokra.\n. Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. Thx for the feedback. I've found the problem and I'm working on it...\n. Sorry, I didn't see the PR :(\n\nIt's already fixed in the master branch: https://github.com/jtangelder/sass-loader/commit/3ae649b05dfbee2ca7d9d56cb8c130c1214d6196\n. Thx @jorrit. :+1: \n\nI've refactored the whole import stuff and tested it on windows, it works.\n. Does webpack recompile anything if you change a file? It could be that just HMR is not working.\n\nI don't know about a watcher bug... what is your OS? Are any Symlinks involved (like via `npm link` or `bower link`?\n. Is that a duplicate of #102?\n. Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. I have added a chapter to the README about `url()`:\nhttps://github.com/jtangelder/sass-loader#problems-with-url\n\nIt's way more complicated than in LESS which provides a mechanism that rewrites urls...\n. Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. Should be fixed with 2.0.0\n. Nice! :+1:\n\nThx @jorrit \n. This is not an issue specific to the sass-loader so I'll close it. @tappleby thanks for providing an example setup.. Thx for your effort @endaaman. :+1: \n\nThe current master branch should fix your problem. However, I've used another approach because your PR adds files as dependency that might not exist anymore. This might be no problem, but I don't think that it's good coding style (no offence). But your PR was inspiration for the current solution :grinning:.\n. Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. Thx. That's what I wanted to hear :+1: :grinning:.\n. Shipped with 2.0.0\n. Thx for your effort :+1: \n\nI've added it manually to the master branch because I've refactored it a lot.\n. Could you check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. Fixed with 2.0.0\n. There are tests for the indented syntax, so I expect it to work. Please provide a minimal example that demonstrates the problem.\n. Could you give me an example where the problem occurs? The paths are already normalized afaik.\n. Shipped with 2.0.1. Thanks! :+1: \n. Nice :grinning: \n. I did just skim through your source code and it looks good! :+1: You did even use `urlToRequest()`. Would you mind sending me a PR with the updated README? I would be happy to mention your loader.\n\nI was just wondering if this behavior could/should be part of the css-loader when source maps are present. In this case we could avoid parsing the CSS twice.\n. This is a problem of Sass in general afaik (see [here](http://inside.unbounce.com/product-dev/handling-code-duplication/) and [here](https://github.com/wilsonpage/sass-import-once)). Could you check if the problem is also present when you're using node-sass directly? If that's the case, this is the probably the wrong repo for that issue.\n. There are helper mixins like [sass-import-once](https://github.com/wilsonpage/sass-import-once/blob/master/examples/1/reset.scss) which prevents double imports. However, this requires you to wrap your whole code with curly braces and to find a unique id for your module (usually the file path within the project). Personally, I find that too annoying.\n\nAfter fiddling around with double imports I found out that it's not actually a big problem. Gziping your static assets eliminates code duplication very efficiently. You can try that out for your specific case by creating two versions: one with `sass-import-once` and a gzipped one. Sure, in the final result, the gzipped version contains duplicated style rules. However, I bet the performance penalty would still not be measurable.\n\n> but I had thought the sass-loader was intercepting @import statements in Sass and could do something clever.\n\nYes, that would be possible and I'm actually planing to do something. However, [rubysass is going to ship this with `4.0.0`](https://github.com/sass/sass/issues/139) and libsass will probably also follow. So I was hoping this would already be resolved by now :grin:.\n\nIf you are open to ditch Sass, I can also recommend LESS. I know, there are endless debates about Sass vs. LESS and in the end they are always pointless. However, there are two things LESS is actually handling better:\n- It's possible to import other files without including the actual CSS via `@import (reference)`\n- It's possible to rewrite `url()` statements thus enabling modules to just use the actual file path of an image or font without using some helper variable like `$font-path`.\n\nAnd in the end, Sass and LESS are _very_ familiar. Actually, I'm using both in different projects and it's not a big deal.\n. Thx for sharing @kenotron :+1: \n. @MatthewKosloski this issue is not about the ordering of rules, please don't change the topic. I assume that you are using the extract-text-webpack-plugin. In this case, the order of rules dependents on the order of `require()` calls inside your bundle. Follow-up discussion at: https://github.com/webpack/extract-text-webpack-plugin/issues/200#issuecomment-251261145\n. Related performance discussion: https://github.com/webpack-contrib/sass-loader/issues/296#issuecomment-288464857. Why do you prepend `.` before `button`? Just write `@import 'button'`  or `@import '_button.scss'`\n. Mhmm the latest should be fine. Can anyone confirm this?\n. @jcreamer898 you should not need to adjust `process.env.UV_THREADPOOL_SIZE`. The sass-loader is queuing its tasks so that node-sass is not blocking all threads (until node-sass has resolved this).\n. Anyone still having problems?\n. Could you guys check if the branch `fix/threadpool-issue` fixes this problem while using the default `process.env.UV_THREADPOOL_SIZE`?\n. That's nice :+1: \n\nCould anyone reading this issue also check out the branch? I would like to pull it on the master, but I don't have a test setup that demonstrates the problem.\n. Yep, I've messed up this release by forgetting to move `object-assign` from `devDependencies` to `dependencies`. Just to test it you need to install `object-assign` manually.\n\nThx for trying it out :+1: \n. @lencioni your assumptions are right. Everything starting with `~` should be read from your `modulesDirectories`, usually `node_modules`.\n\nHowever, if you just write\n\n``` javascript\n@import '~config';\n```\n\nwebpack will read `config`'s `package.json` to get the main entry point which is usually a JS-file. Have you tried importing specific stuff by writing\n\n``` javascript\n@import '~config/variables.scss';\n```\n\n?\n\n[There are tests](https://github.com/jtangelder/sass-loader/blob/38edd960b8ca2eb3421b24f40e77a1b96e16751a/test/scss/imports.scss#L6) for importing modules from paths starting with `~` which TravisCI also executes on Linux @mako-taco.\n\nCould you come up with a small test repository which demonstrates the actual problem?\n. @ceram1 Yep, I'm sorry. I was wrong. Travis CI is not activated because I'm not the owner of the repo. I use it in all my projects.\n\nConcerning your feedback:\n`'node_modules/react-toolbox/lib/_colors'` is another file than `'~react-toolbox/lib/commons'` :grin:. I'm pretty sure that this error is somehow related to your specific setup.\n. Could you provide an example?\n. [`resolve.modulesDirectories`](http://webpack.github.io/docs/configuration.html#resolve-modulesdirectories) should only contain folder names, no actual paths. Webpack applies node's resolving algorithm with these folder names. It walks up the directories and tries each folder name:\n\n```\na/b/node_modules\na/node_modules\nnode_modules\n```\n\nWhat you probably want is [`resolve.root`](http://webpack.github.io/docs/configuration.html#resolve-root) (which takes absolute paths!).\n\nBtw: That's why `bower_components` should be listed as `resolve.root` instead of `modulesDirectories`\n\nPlease set up a small example repo (using `resolve.root`) which demonstrates the problem. It makes debugging at lot of easier for me and it may help you pinning down the problem, if it's in your configuration.\n. You're welcome :grin: \n. The weird paths are created by the css-loader. Take a look at my [PR](webpack/css-loader#154) for further information.\n. https://github.com/webpack/css-loader/pull/154\n. @jezstephens \n\n> It screws up the line numbers in Webpack's error messages by inserting additional lines into the input.\n\nThis should be reported to the import-glob-loader\n\n> When used with no file extension it includes all files, so if you have Sass files mixed with other non-CSS files it's necessary to say foo/**/*.scss. This could be argued as a good thing, but I think it'd be more intuitive if foo/**/\\* was equivalent to foo/*_/_.scss\n\nYes, I think, it is a good thing to add the file extension explicitly.\n\n> So perhaps sass-loader could support Sass-specific globbing a bit better than import-glob-loader.\n\nI think the import-glob-loader is doing a pretty decent job here. I don't want to add this feature to the sass-loader because the import mechanism is [already pretty complicated](https://github.com/jtangelder/sass-loader/blob/a6cc46f3176499c013ee0d5b565f5392f338a8d9/index.js#L308-L363). Once we started to implement it here, we are responsible to maintain that feature.\n. I had this issue several times (webpack/less-loader#40 peerigon/markdown-loader#8). While passing the options via query parameters is cumbersome, I don't think that it would be a good idea to pass-in _all_ options via the webpack config. It seems straight-forward, but the full module path + query string is used as cache id afaik. Hence, two require calls with different loader configs are recognized to be different.\n\nWhat do you think about it @sokra?\n. @sanniassin anyway, thx for your PR. I'm willing to merge this, but could you also add tests please?\n. Nevermind... I'll do it, because we need a better setup for these kind of tests.\n. @dtothefp It is necessary for options that can not be stringified using `JSON.stringify`\n. Shipped with `3.1.0`. New preferred way for passing options is now via a property on your webpack config. See https://github.com/jtangelder/sass-loader#sass-options\n. Thank you.\n\nThe last paragraph is implied by using the extract-text-webpack-plugin, so I'll remove it.\n. Sass is not downloading files afaik. So when you import an http url you won't be able to extend classes that are defined in these remote files. These imports will be resolved on runtime inside the browser.\n. Yep, #152 solves it. I just merged the PR, but we need tests :grinning:.\n. #152 shipped with `3.1.0`. New preferred way for passing options is now via a property on your webpack config. See https://github.com/jtangelder/sass-loader#sass-options\n. @kgwinnup Your `webpack.config` has a dependency which depends on a `scss` file.\n@typpo Thanks for pointing that out. Probably a common problem when creating isomorphic/universaljs apps.\n. Makes sense. Thx for pointing it out!\n. Will be shipped with #152, I just need to write tests for it.\n. Webpack puts _all_ required files into one big js file by default. If you want to load code (like styles) on demand, you need to create a [code split point](http://webpack.github.io/docs/code-splitting.html) by using an async require (will be `System.import` in Webpack 2).\n\nThis issue is not a sass-loader thing, though. \n. I'm using node 4.1 on OSX and could not observe these kind of errors. Could you provide a minimal test setup that reproduces the error? Otherwise I doubt that this repository is the right location for this issue.\n. Closing this for now because there is no example and it's probably not the right repository.\n. Do you have `node-sass` as `dependency` of your project? Since npm@3, `peerDependencies` won't be installed automatically anymore.\n. Thx for sharing this!\n. Mhmm you should be \"allowed\" to install that beta... is this a npm issue?\n. @Phoenixmatrix Thx for informing me :+1: \n. It's not a bug, @jsg2021 is mostly right. Though webpack is doing the file resolving, the output is kind of monolithic. That means that once Sass is done, webpack just receives one big blob of CSS without any trace of modules.\n\nSo, there are basically three ways to structure your styles:\n\n## 1. Have one monolithic main.scss\n\nAll the imports are done inside the `main.scss`.\n\n### Pros:\n- No code duplication if done right\n- You have complete control about the order how things are initialized\n\n### Cons:\n- Can't be separated into vendor chunks or similiar\n- No incremental rebuilds because the whole stylesheet needs to be rebuild just for a single change\n\n## 2. Have on main.scss and on vendor.scss\n\nSimiliar to #1 but with manually separating vendor stuff from your application stuff.\n\n### Pros:\n- Two different chunks that can be cached separately\n- You have still complete control about the order how things are initialized\n\n### Cons:\n- Rebuilds are a bit faster, but still take some time\n- Referencing/importing stuff from vendor styles into main.scss may duplicate code\n\n## 3. Truely modular styles\n\nEvery component has its own, independent Sass build. In order to avoid code duplication, you need to separate your Sass modules between modules which produce CSS code and modules which just provide variables and functionality like mixins. But imho that's best practice anyway.\n\n### Pros:\n- Fast rebuilds\n- Styles are loaded \"on demand\"\n\n### Cons:\n- The initial build takes much longer because each component spawns its own Sass process\n- Potential code duplication (which is usually not problem when using gzip)\n- Using the ExtractTextWebpackPlugin is counterproductive\n. That sounds pretty impossible to me. It's also not clear what problem you're trying to solve. Why should it be faster? What is actually slow?\n. > using a single Sass process could theoretically improve that.\n\nYep, but when using a single Sass process, modules would influence each other, yielding to unexpected output.\n. Thx for informing us.\n\nBut I don't think that we should merge this. It forces all users, who are not using node 4, to update their `peerDependency`. On the other hand, node 4 users are able to specify `node-sass^3.3.3` as dependency and still use the current sass-loader, aren't they?\n. Shipped as breaking change with sass-loader `3.0.0`\n. Sorry, specifying `node-sass` as `peerDependency` is far more useful for most users.\n\nSince `node-sass`/`libsass` processes _your files_, _you_ should be able to specify the exact version you need. The sass-loader is just using an API which is not affected by most changes.\n\nIn other words: Your API surface to node-sass is much bigger than ours. Otherwise we would have tons of issues and PRs like \"Update node-sass to x.y.z plz\"\n. > I'm using npm3 now and it doesn't install node-sass automatically.\n\nI know and that's good. node-sass should be the dependency of _your_ project.\n\n> I could give you a ton of projects that do it.\n\nIt's true, people are handling this differently. And while there are projects where your suggested approach is very reasonable (like for the [phantomjs](https://www.npmjs.com/package/phantomjs)-package for example), I don't think that it fits here.\n\nThe sass-loader is a link between webpack and node-sass. Following node-sass versions would ignore the fact that we also have to stay up-to-date with webpack: So, which version number should we follow then? Imho, the most robust solution to this problem is to have an own version number and to specify both as `peerDependency`.\n\nBut you're right. I forgot to add `webpack` as `peerDependency`. :grin: \n. I would love to hear alternatives from @iarna or @othiym23, but I guess there no new insights than already discussed at npm/npm#5080 npm/npm#6565 npm/npm#7495...\n. Thx for reporting this. This is probably caused by the \"funny\" [file resolver](https://github.com/jtangelder/sass-loader/blob/a6cc46f3176499c013ee0d5b565f5392f338a8d9/index.js#L344-L350).\n. Shipped with `3.1.0`\n. Self-solving issues are the best :+1: \n. Thx. Since I've also changed the README, I added the change manually.\n. Thx for your PR :+1: \n\nI'm definitely planing to merge this, but it would be good if we'd follow the official recommendation for [programmable objects in query parameters](http://webpack.github.io/docs/how-to-write-a-loader.html#programmable-objects-as-query-option). The sass-loader should not try to `require()` the file, but just read it from the webpack config.\n\nThis is also related to #152 \n. Shipped with `3.1.0`. New preferred way for passing options is now via a property on your webpack config. See https://github.com/jtangelder/sass-loader#sass-options\n. Acccording to the [node-sass docs](https://github.com/sass/node-sass#importer--v200---experimental), you should return `sass.NULL` if your custom importer doesn't want to handle the file. This passes the file request on to the next importer in the array.\n. If you don't return `sass.NULL` in cases you don't want to resolve the file, all webpack specific resolving won't be applied.\n. Could you please create a minimal example that demonstrates the problem? I'm using these comments all the time and there are no problems.\n. I'd appreciate an example :grin:. Furthermore, it's likely not an issue with sass-loader itself, but with node-sass or libsass.\n. We're using these comments [in our tests](https://github.com/jtangelder/sass-loader/blob/fee3593e5f8658b4afd1f01bc8308718ca0fd439/test/scss/imports.scss#L5), so it's not a generic issue. Please provide examples.\n. @djfm thanks for informing me\n@geekingfrog @ajsharp does that solve your issue?\n. In your configuration, the postcss-loader is executed _before_ the sass-loader. Maybe PostCSS isn't able to parse SASS? :grin: \n. Ok, I think we can close this one?\n. `Header.scss` mixes CSS modules _and_ tries to import stuff from Sass. This is not possible. Every import from a CSS file will _not_ be compiled with the webpack loader pipeline. You can only import CSS files. Please stick to Sass _or_ CSS modules. \n. Just put `@import 'common/variables'` at the beginning of your `main.scss` and everything should be fine.\n\nHowever, I don't get why you would like to have implicit imports/globals. Modular,re-usable code declares its dependencies explicitly.\n. Thx for reporting this.\n\nCould you come up with a minimal test example that reproduces the error?\n. Just remove stuff step by step until it's working again :grin: \n. It looks like `GLOBBY.scss` is not consumed by the sass-loader. This error happens when webpack tries to parse the file as JavaScript. And `$white: \"white\";` is valid JavaScript :grin:\n\nHave you excluded the sass-loader for `GLOBBY.scss`?\n. The sass-loader does not resolve `url()` statements in your styles. You should chain the css-loader as described in the README.\n\nAlso take a look at the section about `url()` in the README.\n. I don't know. Why aren't you allowed to use the css-loader with Angular 2?\n. You could try to use the [extract-loader](https://github.com/peerigon/extract-loader), it evaluates a CommonJS module to generate a string. Chain the loaders like this:\n\n```\n  {\n    test: /\\.scss$/,\n    loaders: ['extract-loader', 'css-loader', 'sass-loader']\n  },\n```\n. That sounds like the sass-loader is not applied. The css-loader should not see any Sass imports.\n\nAlso, the error would be helpful.\n. Thx for sharing.\n. The build time heavily depends on how your styles are structured. I've described [three different ways how to structure your styles](https://github.com/jtangelder/sass-loader/issues/164#issuecomment-150947538).\n\n> I suspect that this is because I'm using the ExtractTextPlugin\n\nI don't think so. The ExtractTextPlugin just \"extracts\" the CSS from the bundle (which is stored in a JS string). I don't see why that should take so much time.\n\n> Can the sass-loader be configured to pre-fetch all scss and compile them async with node-sass while the rest of the compilation is working\n\nThe sass-loader is async, it does not block webpack. However, the sass-loader does not know your scss files until webpack encounters a `require()` and invokes the sass-loader.\n\nYou could modify the sass-loader in your project to track when the sass-loader is actually invoked and how much time it spends on waiting for node-sass to compile. Then you could compare these figures against \"vanilla\" node-sass compilations. If they're almost identical, it's node-sass which takes so much time...\n. Thx @Phoenixmatrix for your insights :+1:\n\nIf the new css-loader is so much slower, it should probably be addressed as issue. Though CSS modules are a nice feature, it should not degrade the performance of those who don't want to use it.\n\n> If you do not need url resolution (common in development)\n\nI don't get that... For me, url resolution is one of the reasons I would like to compile my styles via Webpack. And why would you like to have url resolution in production when you don't use it in development?\n. Closing this in favor of #296 \r\nI also did some profiling: https://github.com/webpack-contrib/sass-loader/issues/296#issuecomment-288464857. Thx for your PR.\n\nI understand your motivation, but the style- and css-loader are not essential to use the sass-loader. It depends on what you are trying to achieve. It may be perfectly fine for people to use the sass-loader just with the css-loader or even just with the raw-loader.\n\nSince most people will use it in conjunction with the style- and the css-loader, they are mentioned just a few lines below your changes.\n. I'm sorry. `object-assign` was in `devDependencies` :(. Fixed with `3.1.1`\n. Thx. It is already shipped with `3.1.1` :grin: \n. Thx for the pull-request. Have you executed the tests after updating it?\n\nI get \n\n```\nError: It's not clear which file to import for '@import \"../node_modules/order/1/module\"'.\nCandidates:\n  ../node_modules/order/1/_module.scss\n  ../node_modules/order/1/_module.sass\n  ../node_modules/order/1/_module.css\n  ../node_modules/order/1/module.scss\n  ../node_modules/order/1/module.sass\n  ../node_modules/order/1/module.css\nPlease delete or rename all but one of these files.\n```\n\nwhich is a good thing, because it seems like they have finally decided to throw an error in these cases.\n. Haha, that's exactly what I did yesterday evening :grinning:.\n\nAnyway, thx. I'll pull in your commits. But now I need to remove the \"funny resolving algorithm\".\n. Thx @chicoxyzzy. I'll merge it as soon as I've found some time.\n\n@ChrisCinelli `node-sass` is a `peerDependency`. You should be able to bump the version in your project independently (as long as it is not a major version bump). That's why we've made it a `peerDependency`\n. Shipped with `3.1.2`\n. I don't get the question but I doubt that this is actually a bug of sass-loader.\n. > But I noticed bundle files generated (not source map) are larger than bundle files generated without sourceMap like below. (40 to 50 percent larger, 500 KB becomes 900 KB)\n\nThat is correct, because the source map contains the original source code (stored in the `contents` property). This is because then you don't need to map source map paths to your file system in your developer tools. They just work.\n\nIf you do not want to include the original source code (e.g. because you want to use source maps in production), you should disable the [`sourceMapContents`](https://github.com/sass/node-sass#sourcemapcontents)-flag. In this case, the source map will only contain mapping information.\n\nWe should mention that in the README, though...\n. Starting with [sass-loader `3.2.0`](https://github.com/jtangelder/sass-loader/releases/tag/v3.2.0), you don't need to set it explicitly. It will derive it from the file name.\n. Do you use the `.sass` file extension? Can you please provide a small test case that demonstrates the problem?. Thx! Shipped with `3.1.2`\n. Thank you for your pull-request.\n\nCould you add a small paragraph to the README describing the feature (e.g. with a use-case)?\n. We could publish sass-loader's internal functions to the context so that you can use the same functions.\n. Mhmm I'm not sure about this feature anymore. It provides access to an API where things might break easily. I don't want to make a major version bump when I'm refactoring internal functions.\n. Thx for pointing out theo. It looks very interesting (although I'm a little disappointed that it's a gulp plugin \u2013 it could also be just a small module without gulp dependency).\n\nI totally see the benefit. Maybe we could provide the loaderContext to the custom importer, so that you can write your own logic...\n. @mrfr0g thank you for your pull request and sorry for the response time, I haven't found the time to review it yet.\n\nWhat problem does this PR actually solve? I think it's a good thing to declare dependencies explicitly. We had global variables in the browser for a long time and I don't want to go back to this anymore. I think that a component should be truly self-contained. It should not expect global variables to be defined.\n. > I believe that I can accomplish the same result using the data option resolved in #216, or as @jsg2021 suggested, the baggage loader.\n\nAwesome :+1:  :grinning: \n. Why are absolute paths in source maps useful?\n. Thx for your pull-request.\n\nHowever, I don't understand why this is necessary. We already have [a test case which covers this use-case](https://github.com/jtangelder/sass-loader/blob/b06b6be3fa0b61671448b5933d5df082f32672a6/test/scss/import-other-style.scss#L7). Why doesn't it work for you?\nCould you add a test that demonstrates the problem?\n. Any progress on this?\n. @jerrysu is `module` a dependency that is referenced in your `package.json`? See also https://github.com/nightgrey/web-boilerplate/pull/1\n. What is a pancake in this context? :grin:\n. Since it's unclear what this actually about, I'll close it for now. Could you create a small example project the demonstrates the problem? I assume that this is not related to the sass-loader, so it would be good to start with vanilla CSS.\n. Thx :+1: \n. Seems reasonable, thx :+1: \n. Shipped with `v3.2.0`\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. Thx for sharing this @timaschew \n. Seems to be a hot topic #215 #195 :grinning: \n\nAnyway, thx! :+1: \n. Thx for sharing\n. This seems like a limitation of node-sass. We're using node-sass' `data` option to pass Sass source code to node-sass. In this case, node-sass flags the data as `stdin`.\n\nWe would need to create a temporary file which we pass to node-sass. But this seems like an unnecessary detour to me.\n. Yes :grin: \n\nThat won't work, because the loader's `test` regex matches only scss-files. Why do you want to include that option in the README anyway? It's described in [node-sass's](https://github.com/sass/node-sass) readme.\n. Ok, now I do understand you.\n\nI used to have a small chapter about `.sass`-files, but then I read somewhere that it is deprecated (which is actually not true). I will re-add that small chapter.\n\nHowever, I encourage you to learn more about node-sass and the underlying dependencies of all webpack loaders. Because loaders are often just connectors between webpack and another tool. So it's not sufficient to just understand the loader.\n\nOne thing, for instance, what people need to know is that node-sass is build on libsass, which is a C-port of the famous ruby library. It is _not_ actually [Rubysass](http://sass-lang.com/). However, it tries to stick to it as close as possible.\n. I think, #196 solves this \"issue\" as well\n. Seems like you have `css` module inside your `node_modules`. In this case, you should not use the convenient way of just writing `loaders: [\"style\", \"css\", \"sass\"]` because in this case, webpack first tries to resolve `style`, `css`, `sass` inside `node_modules`. After that, it appends the `-loader` postfix. So in your case, it tries to use the `css` module as `css-loader`.\n\nI think it's best practice to always write the full name, like `style-loader`, `css-loader`, `sass-loader`\n. Sorry, for me it's not clear what you are trying to achieve... why should the sass-loader also output sass code?\n. I think, the [multi-loader](https://www.npmjs.com/package/multi-loader) was the missing piece :)\n. Please provide a small example project to demonstrate the issue. You can just commit the `node_modules` folder to simulate different packages.\n. @stigmat4j What language is this? Is `:local` legal in Sass?\n\n@storrdev @rickhanlonii @bipinshashi Looks like you were trying to import stylesheets in node. Maybe you're writing an isomorphic app? I would recommend to compile your node app with webpack too (using the [`node` target option](http://webpack.github.io/docs/configuration.html#target))\n. There are a lot of features from node-sass/libsass that one should take a look at. We just pipe all the options through, so I only added notes on options that might be webpack specific. If you feel like this is important, please create a PR.\n. > The child partial here would be able to access any variables exposed by the config file, but in sass-loader land, each stylesheet is treated as its own entity, meaning you can't do a global import.\n\nThis is not true. You can do global imports just like in regular sass. Please provide a _minimal_ test example if you think this is a bug.\n. Yep.\n\nHowever, I don't recommend this kind of project structure. In my experience, explicit dependencies are always better than implicit ones.\n. > but its also silly to repeat yourself in every file of your project\n\nI don't think so. We all agreed that it's not good to use globals in JavaScript, why don't we adhere to the same principle in our stylesheets? It's a good thing to be explicit about the dependencies you are using. This way you always only import stuff that you are actual using.\n. > As far as the discussion above about importing variables or mixins into every file, I'm finding that if I import a sass file in three different sass modules, webpack is bundling three copies of that imported file. Importing modules in this manner appears to me to be pretty detrimental.\r\n\r\nThat's how Sass works by design. It's a compiler and every module is a distinct compilation. Usually, I split up my Sass modules in modules that are like libraries (they don't produce CSS code when imported) and modules that are like entry files. These are the Sass files that actually produce CSS code.. Thx for also writing down the solution for your case. I don't think that we should add a note on isomorphic apps since this is not related to the sass-loader at all.\n. The sass-loader works with webpack 2. I've added it to `peerDepedencies` starting with `3.2.1`.\n. Thx :+1: \n. Sounds good :+1:\n@mrfr0g: Is this a solution for #191?\n. Shipped with `v3.2.0`\n. My advice:\r\n\r\nSeparate your Sass files into library files and application files. This means that you have Sass files that will output CSS (your application files) and you have Sass files that provide variables and mixins for them, but don't produce any output. Then you write your application files in a modular way without implicit dependencies, but explicit ones which means that you can compile any application file and it will work without producing duplicate CSS.. Using webpack 1: If you add the [`UglifyJsPlugin`](http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin) to your webpack config, it will switch all loaders into minimize mode.\nUsing webpack 2: Now you are able to switch only specific loaders into minimize mode by using the LoaderOptionsPlugin.\n\nRelated discussion: https://github.com/webpack/webpack/issues/283\n. @janjon @elektronik2k5 Please don't use the `modules_directories` option for this. `resolve.root` is better for this purpose. `module_directories` will traverse all folders up to `/` similar like node does with `node_modules`.\n. This sounds like an issue in node-sass. We just get the complete source map from node-sass.\n. Does [this PR](https://github.com/jtangelder/sass-loader/pull/250) fix your problem (install sass-loader `3.2.2`)?\n. Should be fixed with #374. I know that the paths inside the source-map may be broken depending on your setup. Haven't found the time to look into it so far.\n\nHowever, [I've merged a PR which resolved some issues with it](https://github.com/jtangelder/sass-loader/pull/250). Maybe you could try sass-loader `3.2.2` and check if the problem is still there.\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. I think it makes sense to add the `node_modules` folder to node-sass' `includePath` option. After that, this code should work.\n. Thx for pointing out :+1: \n. There is no hint that this is related to the sass-loader at all. Try to isolate it and create a small example project. This makes debugging a lot easier. I don't know react-simpletabs so I can't help you here.\n. What about writing a [custom importer](https://github.com/sass/node-sass#importer--v200---experimental)?\n. Sorry, but we won't implement this as the resolution logic is already complicated and slow enough. See also #307 . Shipped with `3.2.1`\n. Thx. Shipped with `3.2.1`\n. That looks like a good idea! Can you create a PR + a small test-case for it? Just mention me in my PR and I will merge it asap.\n. Node-sass is a peer dependency. You should be able to specify any version in the range of `^3.4.2`, so I don't really see the point in merging this.\n\nAnyway, I've updated the dev dependencies to the latest node-sass (`3.8.0`) and everything's working :+1: \n. Starting with npm@3, `peerDependencies` won't be installed automatically anymore, so it makes sense to list it as dev dependency.\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. What sass-loader folder are you talking about?\n. You can try webpack's [`resolve.root`](http://webpack.github.io/docs/configuration.html#resolve-root) option. Just set the dist folder as `resolve.root` and you should be able to just write `url(images/foo.jpg)`.\n\nI won't add any environment variables because this makes everything even a lot more hackier. The `data` option is already hacky enough.\n. Close?\n. If this a bug, please provide a small test example. I have too many requests so I won't prioritize this.\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. I've never seen an exclamation mark in a path my whole life ^^\n. If you want to provide an example, go ahead and create a PR\n. We are returning `file` instead of `contents` because of current source map file paths if I remember correctly. I'm not sure we can change that so easily.\n. Thx! :+1: \n\nI probably need to change this again because a loader [should not access webpack options](https://github.com/webpack/webpack/issues/2684#issuecomment-228266412)\n. Shipped as `3.2.2`\n. Ok, I'll flag this version as broken, publish a new major release and then we can sort it out. No stress! \ud83d\udc4d \n\n@bholloway would you be open to make a PR to the sass-loader so that we have tests to check against the resolve-url-loader? Seems like more people are using it, so it would be nice to ensure compatibility. It was not obvious for me that this could be breaking change at all. If you do the PR, please mention me so I can merge it asap.\n. Shipped as `4.0.0`\n. [I've already published `3.2.3` which is identical to `3.2.1`](https://github.com/jtangelder/sass-loader/issues/254#issuecomment-228737811).\n. Thx. Shipped as #233 with `3.2.1`\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. Yes, this was an unintentional breaking change with `3.2.2` (see #250). I've deprecated this version and published this change with `4.0.0`.\n\n@bholloway and I will sort it out, but he is currently on vacation, so that may take a while.\n. That's correct, `3.2.2` **and** `4.0.0` contain the breaking commit. However, `3.2.2` was deprecated so I would expect that npm won't install it when specifying `^3.2.0` (but I don't know that for sure).\n. @judewang thanks for pointing out.\n\nNow I've published `sass-loader@3.2.3` which is identical to `3.2.1`. However, when you run `npm i sass-loader`, you will get `4.0.0` because it's still tagged as `latest`.\n. `npm unpublish` does only work if there are no dependent packages. Furthermore, if people happened to install `3.2.2` with `--save-dev`, it won't be available anymore. So, this was most unobtrusive way imho.\n. I agree, but unpublish would have been too late for you anyway. So I think the current solution is the best in all cases.\n. When using the query syntax, you must stick to regular URL escaping. So the official way would be:\n\n``` javascript\n`sass-loader?includePaths[]=${encodeURIComponent(path.resolve(__dirname, './styles'))}`\n```\n\nSince this is stupid I always recommend to use `JSON.stringify()`\n\n``` javascript\n`sass-loader?${JSON.stringify({\n    compressed: true\n    includePaths: [ ... ]\n})}`\n```\n\nWe know that configuring loaders is very complicated \ud83d\ude1e . We're currently working on that.\n. ``` scss\n@import \"./other/file.scss\";\n```\n. Please don't file an issue for this kind of questions. Github issues are used to track bugs. If you need advice, please ask a question on stack overflow.\n. You can also take a look at [our tests](https://github.com/jtangelder/sass-loader/blob/master/test/scss/imports.scss). We have a lot of tests that check if importing files is working correctly.\n. I doubt that this is an issue of the sass-loader. Do you have a stack trace or anything? We also need a **minimal** example that demonstrates the error.\n. Thx for the PR. I currently have not sufficient rights to activate travis CI for this repo, but I've written @jtangelder a message.\n. I think @jtangelder 's PR is sufficient for us. Thx anyway @amilajack \ud83d\udc4d \n. This sounds very complicated and I don't think that it should be that way. My advice:\n- Don't serve your HTML over `file://`. There are a lot of cases where things behave differently and you will run in more issues than this. Do yourself a favor and serve your stuff over an HTTP server.\n- If you can't serve your stuff over HTTP by all means, you should **not** use the webpack-dev-server for development. Your development environment should be as close as possible to the production environment and `file://` vs `http://` is a **huge** difference.\n- If you **really really** need to use the `file://` protocol: Why are you using webpack? Just split your stuff and put it somewhere on the disk. Webpack is a bundler and bundler put a lot of stuff into a few files to serve it efficiently over **HTTP**. If you don't have a roundtrip, I doubt that you need webpack at all.\n- My last advice: Maybe the [`<base>`](https://developer.mozilla.org/en/docs/Web/HTML/Element/base) tag can help you.\n. Please file a question on stack overflow and include some example code. This way other developers may profit from the answer and we're actually able to answer it. There could be hundred of causes for this kind of error.\n. But I'm pretty sure that inside your folder `C:\\Users\\che\nnhao\\Desktop\\code\\mean\\src` there is no `css/master.scss` \ud83d\ude09 \n. Funnily, I've dealed with the same problem yesterday and that's how I tackled it. First you need a `export-once` function:\n\n``` sass\n$export-once-names: ();\n\n@function export-once($name) {\n    @if index($export-once-names, $name) {\n        @return false;\n    }\n    $export-once-names: append($export-once-names, $name) !global;\n    @return true;\n}\n```\n\nYou should use that function for all sass code that actually outputs CSS to ensure that no duplicates are added to the final stylesheet.\n\nThan you have a mixin to create the `font-face` declaration. I've removed some code that might be implementation dependent:\n\n``` sass\n@mixin font-face($family, $weight: regular, $style: normal, $stretch: normal) {\n\n    @if export-once(\"font-face-#{$family}-#{$weight}-#{$style}-#{$stretch}\") {\n        // make sure the declarations will not be nested\n        @at-root {\n            @font-face {\n                ...\n            }\n        }\n    }\n\n}\n```\n\nThen you have a mixin which applies a `font-family` and all its respective values to an element\n\n``` sass\n@mixin font-helvetica() {\n    @include font-face(\"Helvetica Neue\");\n\n    font-family: \"Helvetica Neue\", sans-serif;\n    font-weight: regular;\n    font-style: normal;\n    font-stretch: normal;\n}\n\n@mixin font-helvetica-bold() {\n    @include font-face(\"Helvetica Neue\", $weight: bold);\n\n    font-family: \"Helvetica Neue\", sans-serif;\n    font-weight: bold;\n    font-style: normal;\n    font-stretch: normal;\n}\n```\n\nNow everytime you want to use a font, you just have to include the given mixin and it will add the font-face declaration once to the stylesheet. This way you never include fonts that you don't use.\n. Sorry, I don't know. The sass-loader repository is definitely not the right place to discuss these things. But guessing from @xzyfer I think you do need to upgrade to 3.8 (which was never a problem in my projects).\n. It would be very helpful if you could setup a small example project which I can clone and run. Your description is still a bit vague.\n. Please provide a **minimal** test that demonstrates the problem. I'm using the webpack-dev-server in my setup and everything is working as expected.\n. Thx for your PR. I'm currently on vacation, so please be patient. I'll take a look in the end of August :)\n\n> Am 11.08.2016 um 00:13 schrieb Chris Fitzgerald notifications@github.com:\n> \n> @jhnns, this should fix custom sass importers by passing resourcePath instead of stdin into the prev argument.\n> \n> Fixes #234\n> \n> You can view, comment on, or merge this pull request online at:\n> \n>   https://github.com/jtangelder/sass-loader/pull/267\n> \n> Commit Summary\n> \n> Use resoucePath for custom importers\n> File Changes\n> \n> M index.js (8)\n> M test/tools/customImporter.js (3)\n> Patch Links:\n> \n> https://github.com/jtangelder/sass-loader/pull/267.patch\n> https://github.com/jtangelder/sass-loader/pull/267.diff\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n. Awesome, that looks good. Thanks :)\n. Shipped as `4.0.1`\n. Sorry, there is not enough information to reproduce this. Please provide a minimal test repository that demonstrates the problem so I can check that out. Try to remove as much stuff as possible since it helps tracking down the problem.. Is this problem still present with node-sass 4?. Since I can't reproduce it in our tests and it does not occur in my projects, I'll close it for now.. CSS source maps can only work if every loader in the loader chain passes them through. That's necessary because webpack, only supports JS source maps out of the box.\r\n\r\n@woohling Do you experience the same issue when you use this loader chain:\r\n`style-loader?sourceMap!css-loader?sourceMap!sass?sourceMap&outputStyle=expanded&sourceMapContents=true'`\r\n? . I can confirm the problem. You can test that with https://github.com/jtangelder/sass-loader/pull/374/commits/ce198d169d4a1066d214d40ba88fb0b5029c0536 and `npm run test-source-map`.\r\n\r\nUnfortunately, I don't know how to fix this since we don't actually mess with the source maps.. We [receive the source maps directly from node-sass](https://github.com/jtangelder/sass-loader/blob/5fe403017730d4d44c0a95d215af086dc6afac6c/lib/loader.js#L55-L66). But since the source maps are also processed by the css-loader and other loaders on the way, it's hard to say what's going on. Maybe they are incompatible?\r\n\r\nIt would be good if you could investigate this. Build the smallest project possible that reproduces the error and inspect the source maps in the sass-loader and then in the css-loader. You can use the style-loader to apply the styles to the DOM. The style-loader [uses a BLOB url](https://github.com/webpack-contrib/style-loader/blob/9dc45a6dee16553a64071031d18feb1562df86a2/addStyles.js#L151) to make the source maps available to the browser. It does not change the source maps anymore, so that should be fine.. Thx for pointing it out. I took the essential parts and created a new PR #281\n. The segmentation fault is because one of the assertions inside the custom importer did not work. Unfortunately, node-sass is not reporting these errors to node.\n. Thx for your contribution.\n\nThe style-loader was never part of webpack core and is not required to use this library. You could also import the CSS as JS string and do something else with it. Especially when using the sass-loader in conjunction with the [extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin), the style-loader **must not** be in your loader chain.\n. The `LoaderOptionsPlugin` can be used to override the webpack options that can be accessed inside the loader via `this.options`. If you do that, you need to provide all the information the loader is reading from this object.\r\n\r\nUsually, you don't need to do that. It is just for compatibility reasons to give you the full control. In all regular cases, you can just use loader options (they are also called loader queries) in your loader configuration. The loader will read these options from `this.query` (unfortunate naming).. @vteivans as previously pointed out: If you're using the `LoaderOptionsPlugin` you also need to specify a context:\r\n\r\n```js\r\n    new LoaderOptionsPlugin({\r\n       context: config.context\r\n    })\r\n```\r\n\r\nBut you should not need the `LoaderOptionsPlugin`.. Sorry, this issue is too vague. There are a lot of tests that demonstrate that imports are handled correctly.. Thanks for the PR, but I'll try to get rid of `context` entirely. See #313 . When you write\n\n```\n@import '~@technologyadvice/radiant';\n```\n\nwebpack will search at `./node_modules/@technologyadvice/radiant` for the module \u2013 exactly like dependencies in node are resolved. What were you expecting?\n. What does the `main` field of the radiant's `package.json` say?\n. I assume that this is a webpack problem because the sass-loader is not resolving it. Could you create a minimal example that reproduces the error? Just commit a small example node_modules folder with the folder structure. Try to remove as much as possible.. This has nothing to do with the sass-loader\n. Related to: #307 . Based on [this discussion](https://github.com/yibn2008/fast-sass-loader/issues/3), I started profiling [an example project](https://github.com/yibn2008/fast-sass-loader/tree/95f5051a37d49e326fa43b613730f807d743f979/perf) yesterday and had some interesting insights. First of all, the sass-loader performance (49.2s) is completely unacceptable compared to fast-sass-loader (5.29s) or even bare node-sass (2.25s) from the command line. All three toolchains compile the same source code and produce similar output. We can expect some overhead coming from webpack since we need to initialize it, set up the loader pipeline, etc., but even the fast-sass-loader is unacceptable slow compared to bare node-sass in my opinion.\r\n\r\n## Overview\r\n\r\nSo let's take a look at the flame graphs:\r\n\r\n![sass-loader-overview](https://cloud.githubusercontent.com/assets/781746/24209033/6c5178ca-0f25-11e7-9124-632aa632aaca.jpg)\r\n\r\nFirst of all, as you can see, **node-sass** is spending most of the time outside of Node.js which is what we expected, since the hard work is done by Libsass.\r\n\r\nNow, let's take a look at both sass-loaders. The execution can roughly be divided into five phases (indicated as black boxes in the graph) that I will discuss in detail later:\r\n\r\n1. webpack initialization\r\n2. first execution sass-loader\r\n3. first execution css-loader\r\n4. second execution sass-loader (this block is not visible in the fast-sass-loader graph, reasons below)\r\n5. second execution css-loader\r\n\r\nSo, the **first surprise** here is that we have two separate compilations going on. This is due to the extract-text-webpack-plugin which initiates a child compilation. Tbh, I'm not sure why this is necessary at all. @sokra can give us more insights here.\r\n\r\nThe **second surprise** is, that the second compilation doesn't use the cache from the first compilation. In the sass-loader graph, you can clearly see that the second pass takes almost exactly the same amount of time. This *could* be improved a little bit because the sass-loader is currently not using webpack's fs cache, but that would only reduce the second sass-loader execution time (4.), which is not where most of the time is spent.\r\n\r\nThe most time, however, is spent\u2014and that's the **third surprise**\u2014inside the *css-loader*. You can clearly see that in both graphs. It takes up half of the total time in the fast-sass-loader setup, and even more in the sass-loader setup.\r\n\r\nIt might also be surprising that node-sass and webpack + fast-sass-loader take almost the same amount of time to compile. In the flame graphs, you can clearly see that node-sass finishes almost at the same time where the 2. block of the fast-sass-loader graph ends. However, we need to remember that the fast-sass-loader is deduping all files before compilation, so there's far less to compile.\r\n\r\n---\r\n\r\nNow, let's take a look at all the phases in detail.\r\n\r\n### Phase 1: Webpack initialization & loader execution start\r\n\r\n![sass-loader-phase-1](https://cloud.githubusercontent.com/assets/781746/24209045/7679a5fc-0f25-11e7-9d59-1fb739a64cf2.jpg)\r\n\r\nNo big surprise here: The initialization of both setups takes almost the same amount of time. Differences here are probably due to I/O or general OS flakyness because there is no actual difference between both loaders here.\r\n\r\nYou can clearly see that during the first 1000ms, most of the time is spent requiring modules. That's why webpack almost always takes at least 1s to compile\u2014even with the simplest setup. Maybe we could win something here with lazy requiring ala [lazy-req](https://www.npmjs.com/package/lazy-req).\r\n\r\n### Phase 2: Import resolving & sass compilation (1. compilation)\r\n\r\n![sass-loader-phase-2](https://cloud.githubusercontent.com/assets/781746/24209066/81f20866-0f25-11e7-8260-d52b0859d8d9.jpg)\r\n\r\nNow that looks different!\r\n\r\nFirst, let's look at the **sass-loader**: The sass-loader registers a custom importer and kicks off the compilation. Now, we're essentially waiting for Libsass to call back. You can clearly see that there is a lot of back-and-forth going on with recurring breaks (grey bars) where the process is just sitting and waiting for Libsass. This graph led me to the assumption that Libsass might be doing sequential I/O. Concurrent I/O would look different, I suppose. After all the resolving is done, Libsass is performing the actual compilation and we're just waiting for Libsass to call back. Nothing to optimize here.\r\n\r\nNow, let's look at the **fast-sass-loader**: The fast-sass-loader preparses the source code with regexps for import statements and passes all imports to webpack's resolver. After the import paths have been resolved, the imported files are read from disk via node's `fs` module and then replaced with their import statements. Duplicated imports are simply omitted, only the first occurence gets included. This is way faster than the sass-loader, which shows that webpack's resolver is not the bottleneck. In fact, it's really fast and almost negligible in the graph.\r\n\r\nThe actual Sass compilation is also a lot faster since a lot of imports have been deduped. It's just that Libsass has less to parse.\r\n\r\n### Phase 3: css-loader (1. compilation)\r\n\r\n![sass-loader-phase-3](https://cloud.githubusercontent.com/assets/781746/24209087/8cab8912-0f25-11e7-85fc-36cc5e7a3134.jpg)\r\n\r\nThis phase is the most interesting one because:\r\n\r\n1. it takes up most of the time\r\n2. there is nothing the sass-loader or the fast-sass-loader can do\r\n\r\nThe only difference is that the amount of data is very different. The fast-sass-loader produces a string with `length` `627067`, the sass-loader with `6914854`. This is 11 times longer. And this translates roughly to the amount of time. The css-loader takes 11 times longer processing the output from the sass-loader.\r\n\r\nThere are two things that I found surprising:\r\n\r\n1. Why does the css-loader take so long? In this case, it is only required to translate the CSS into a CommonJS module while transforming all `url()` statements and remaining `@import` into `require()`. To me, this task seems a lot more trivial than the Sass compilation. The funny thing is: We're spending 9.6s just inside [postcss-modules-local-by-default](https://github.com/css-modules/postcss-modules-local-by-default) during the first compilation. In total, we're spending 16.29s there \u2013 and we didn't even ask for CSS modules... And that's just the first postcss plugin. The **thread is completely busy for 13s in the first compilation while processing postcss plugins** without any chance for other tasks. In total: **26s just inside postcss, hogging the CPU**.\r\n\r\n2. Why is postcss busy with generating source maps? We didn't ask for source maps... then I took a look at the css-loader: [This call](https://github.com/webpack-contrib/css-loader/blob/9999b2f69651c24f5cca34567892400d53735c49/lib/processCss.js#L194-L199) applies the `map` option irregardless of an `inputMap`. In fact, `inputMap` is undefined in this case, but we're still telling postcss to generate a map. As an experiment, I set `map: false` and was able to shave off 10s in total\u2014just by setting one flag. It's still crazy that source maps take up 10s. Switching source maps on and off with node-sass makes a difference of 150ms.\r\n\r\n### Phase 4: sass-loader & css-loader (2. compilation)\r\n\r\n![sass-loader-phase-4](https://cloud.githubusercontent.com/assets/781746/24209110/a2e0687e-0f25-11e7-9f55-4da0cd114ca1.jpg)\r\n\r\nThe **sass-loader** performs exactly the same compilation again. No results from the first compilation are re-used.\r\n\r\nThe **fast-sass-loader** skips the second Sass compilation because it uses its own cache. That's a nice shortcut, but this should be fixed in webpack.\r\n\r\nI don't understand why we need a second compilation. And if we need the second one, can't we just skip the first one? This seems redundant.\r\n\r\n---\r\n\r\n## Conclusion\r\n\r\n- We spend 1s just requiring webpack modules and loaders and initializing the loader pipeline. This could possibly be improved with a tool like [lazy-req](https://www.npmjs.com/package/lazy-req).\r\n- The **sass-loader** could be improved by:\r\n    - preparsing and resolving all dependencies. While this might seem like a good idea, there are also problems: 1. The source maps will be incorrect. 2. Errors won't be reported at the correct location. It all boils down to the fact that Libsass doesn't know the original location of the source anymore.\r\n    - using the webpack cache when resolving the file. A custom importer is also allowed to pass the actual source to Libsass. This way, we could use webpack's internal fs caching layer.\r\n    - deduping dependencies. This could be achieved by passing an empty string if the custom importer has resolved a resource for the second time. While this operation is not entirely safe, it will most likely do more good than bad in most cases. I'd say: if the specificity relies on the correct source order, there's a bigger problem.\r\n- The **css-loader** could be improved by:\r\n    - using a simpler pipeline for CSS files that are not CSS modules. This performance penalty is not acceptable.\r\n    - only generating source maps when they are actually requested\r\n    - \"somehow\" improving the postcss pipeline. Blocking the process for 13s is not acceptable, even for CSS modules. I don't know how we can improve that. Maybe postcss is applying the plugins in an unfortunate way?\r\n- The **extract-text-webpack-plugin** could be improved by:\r\n\t- getting rid of the second compilation\r\n\t- or using cached loader results where possible\r\n\r\nHere are both CPU profiles. Load them into your Chrome Developer Tools if you want to take a look for yourself.\r\n\r\n[cpuprofiles.zip](https://github.com/webpack-contrib/sass-loader/files/862130/cpuprofiles.zip)\r\n\r\n---\r\n\r\nThis was bothering me for a long time because I think we can do a lot better than that :grin:. As comparison, the sass-loader setup with css-loader@0.14 takes 10.1s and looks like this:\r\n\r\n![bildschirmfoto 2017-03-22 um 18 13 36](https://cloud.githubusercontent.com/assets/781746/24211211/a1a0fd92-0f2b-11e7-98c5-4a6b024f5302.jpg)\r\n[sass-loader-old-css-loader.cpuprofile.zip](https://github.com/webpack-contrib/sass-loader/files/862266/sass-loader-old-css-loader.cpuprofile.zip)\r\n. As @sokra pointed out: With the `allChunks: true` option...\r\n\r\n```js\r\n    new ExtractTextPlugin({\r\n      filename: '[name].css',\r\n      allChunks: true\r\n    })\r\n```\r\n\r\nthe second compilation can be skipped:\r\n\r\n![bildschirmfoto 2017-03-22 um 18 40 34](https://cloud.githubusercontent.com/assets/781746/24212297/36f6b640-0f2f-11e7-92c4-4ea62ee037af.jpg)\r\n\r\nthus reducing the built time to 23.9s\r\n. Run\r\n\r\n```bash\r\nnode --inspect-brk ./node_modules/.bin/webpack\r\n```\r\n\r\nto start the debugging process. The process will halt at the first line and print a debugger URL. Copy the debugger URL into the Chrome Browser and the developers tools will initialize.\r\n\r\nThen go to the JavaScript profiler tab and start profiling :)\r\nAfter you've pressed stop, the flame graph will be generated.\r\n\r\nIf you don't want to copy debugger URLs around, you can also use the [NIM chrome extension](https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj). It discovers debuggable node processes automatically.. Not directly related to this thread, but also interesting: Looks like the most recent v8 version (with their new optimizing compiler TurboFan) gives a startup performance boost of 160% (1150ms vs 720ms).\r\n\r\nUsing [v8/node](https://github.com/v8/node), phase 1 looks like this:\r\n\r\n![bildschirmfoto 2017-03-29 um 15 23 55](https://cloud.githubusercontent.com/assets/781746/24456741/46b126f0-1494-11e7-897c-6b81c9f8ec95.jpg)\r\n\r\nThe overall build time decreased from 49.2s to 41.35s (~119% faster).\r\n\r\nTurboFan doesn't bail out on try/catch which will probably improve the startup performance of all node applications because node is using try/catch to initialize the modules.. Afaik python is still a [dependency of Node.js' gyp](https://nodejs.org/en/docs/meta/topics/dependencies/#gyp). Why should we get rid of it?\n\nYou could create a PR for that and make some performance tests.\n. You don't need the `LoaderOptionsPlugin` with sass-loader 5.0.0 anymore. All options can be passed as object with the `options` property (see README).\r\n\r\nWe still do access the webpack options object to read the `context`. This will not be possible with webpack 3 anymore. But since there isn't a good alternative yet, we still need to do that. This is an ongoing discussion but shouldn't concern you. :). ```js\r\nmodule.exports = {\r\n    ...\r\n    module: {\r\n        rules: [{\r\n            test: /\\.scss$/,\r\n            use: [{\r\n                loader: \"style-loader\"\r\n            }, {\r\n                loader: \"css-loader\"\r\n            }, {\r\n                loader: \"sass-loader\",\r\n                options: { // <--- these options\r\n                    includePaths: [\"absolute/path/a\", \"absolute/path/b\"]\r\n                }\r\n            }]\r\n        }]\r\n    }\r\n};\r\n```. No. `LoaderOptionsPlugin`can be used to mock/replace the **webpack** options that can be accessed inside the loader via `this.options`. With sass-loader, you don't need to do that. This was designed to be compatible with webpack 1 loaders.\r\n\r\nJust pass your options where you configure your loader (like in the example above). `LoaderOptionsPlugin.output.path` is the `output.path` from the webpack options. It has nothing to do with the sass-loader.. Sorry, I don't understand this. Why can't people use node > 6.5 with the sass-loader? In fact, I'm using node 7.1.0 and everything is working fine (I've also tested it with node 6.9.0).\n\nBesides that: Changing the `peerDependencies` is an unnecessary breaking change imho.\n. Haha, they're not typos. It's German grammar applied on English :)\r\n\r\nAnyway, thx \ud83d\udc4d . Thanks for contributing \ud83d\udc4d \r\n\r\nHowever, I won't merge this change because it adds code to our code base that is not useful for every user. This should be provided by separate library. This way, our users are free to add these custom functions \u2013 or not.\r\n\r\nYou could publish this library for useful custom functions, write a good README about it and I can put a link to it in our README. You could also advertise this at the [node-sass](https://github.com/sass/node-sass) repository, because these functions are not restricted to webpack at all.. Thx for your feedback @anchann \r\n\r\nI'm considering this change, although I don't think it's right to pull this in. We should rather try to tackle the perf issues.\r\n\r\nUnfortunately, I can confirm that a lot of time can be spend on resolving. I've published a [resolve-perf-tests](https://github.com/jtangelder/sass-loader/tree/resolve-perf-tests) that uses `process.hrtime()` and `console.log()s` to get some numbers and it seems like the sass-loader is spending 35% up to 73% of the time just to resolve files. This is unacceptable and should be solved at webpack level. However, I tried to reproduce these numbers in a bigger project and I couldn't. So, that remains a little vague. Maybe it's related to sass' complicated resolving algorithm involving underscore file names (`_blahblah`)\r\n\r\n240 seconds to 3 seconds are extreme numbers. Can you give me some hints on your directory structure and how you import stuff?. > takes forever, no output to shed light onto what's happening, yet calling tsc on the command line builds the project in seconds. I'd love to be proven wrong, but until then, logging my findings for the next dev is the best I can hope for :)\r\n\r\nWe already heard of builds taking minutes to finish. Unfortunately, we don't have complex example projects to replicate these issues. My projects usually finish after max. 20 seconds in production mode, but they're medium sized.\r\n\r\n> webpack's resolution seems to add nothing in terms of functionality, though perhaps it does add something in terms of uniformity (that said, uniform opaqueness is not necessarily a good thing)\r\n\r\nSince webpack provides its own resolving algorithm, I felt that it would be consistent for the developer to configure all resolving stuff in your webpack.config. It's true that this uniformity is not acceptable at the current performance cost, so I understand your argument here.\r\n\r\n> Also, importers are labelled as experimental in node-sass' documentation. Would it not make sense to make the use of an experimental feature optional, specifically because the upstream library labels it as a \"use with caution\" feature? I would personally go as far as making it disabled by default, and only enabled when a user knows that they explicitly want the feature.\r\n\r\nOur importer is well-tested and works without errors, so I don't see the need to declare this as an experimental thing.\r\n\r\n> I don't think that's the case \u2014 disabling the webpack importer leaves sass' native underscore resolution intact, does it not?\r\n\r\nOnce we use our own importer, sass' native importing algorithm is not available. That's why we have to replicate it (and it's unnecessary complex \ud83d\ude22)\r\n\r\n> Or, if it's easier for you, you can give me a custom version of sass-loader with whatever instrumentation you want, and I'll send you the output data.\r\n\r\nCould you use the sass-loader from the [resolve-perf-tests](https://github.com/jtangelder/sass-loader/tree/resolve-perf-tests) branch and tell me the last output (it's accumulating all numbers)?. Could you check if the import is still slow when you change `UV_THREADPOOL_SIZE` to a big number (like 200)?\r\n\r\nJust set the environment variable before calling webpack.. Thx for your efforts. This helps me a lot! \ud83d\udc4d \r\n\r\n> To be honest, I didn't even want to do this test when I saw the variable name, since it sounded like a poor quality sledgehammer approach to the problem.\r\n\r\nNo worries! This won't be the final solution. I just wanted to check if it might be a problem that node-sass eats up almost all available threads for file IO. There was a problem in libsass that caused a deadlock (#100 #147) which was the reason why we had to use [async](https://github.com/caolan/async)'s job queue. This way, node-sass still leaves one thread available for node.js \u2013\u00a0which is also the only thread for webpack's file IO. Thus webpack can only resolve files sequentially. And I think your numbers confirm my assumption. For instance, take a look at `RaisedButton.scss`. In your original setup, it only takes 200ms. But with all the file IO going on it is delayed up to 9000ms.\r\n\r\n>  I still firmly believe that even if resolving the problem internally inside webpack is the philosophically correct thing to do, given that lib-sass has a working solution to accommodate aliasing via import paths, sass-loader should provide its users with an escape hatch in case they want one.\r\n\r\nwebpack's resolving engine is more powerful than node-sass' `includePaths`. For instance, you can also alias paths (you can't do that with node-sass). And hopefully with webpack 2 you will also be able to `@import` JS files in order to translate JS variables into Sass variables. But I agree that for most use-cases, node-sass' `includePaths` is totally sufficient.\r\n\r\nMy current approach is:\r\n\r\n1. Try to understand **why** we are currently slower\r\n2. Try to find a simple solution to make webpack almost as fast as node-sass. It will always be a little bit slower because there is more going on behind the scenes. But it should not make a big difference\r\n3. If I can find a simple and fast solution, I will provide a flag to disable webpack's resolving engine. I don't want to add too much options because it makes everything more complicated. But if we can't make sass-loader faster, we should definitely allow that option.. I did some profiling: https://github.com/webpack-contrib/sass-loader/issues/296#issuecomment-288464857. `includePaths` is only working for sass imports. `url()` statements are left untouched by the sass-loader. The css-loader will try to resolve `url()` statements, and a statement like `url('images/logo.svg');` will be translated to `url('./images/logo.svg');` because the CSS syntax does not distinguish between module imports and relative imports.\r\n\r\nIf you really want this behavior, you need to write `url('/images/logo.svg');` and use the `root` option of the css-loader like this:\r\n\r\n```\r\n module: {\r\n    loaders: [{\r\n      test: /\\.scss$/,\r\n      loader: ExtractTextPlugin.extract([\r\n        'css-loader?' + JSON.stringify({\r\n          root: path.join(__dirname, 'images')\r\n         }),\r\n        'sass-loader'].join('!'))\r\n    }]\r\n  }\r\n```\r\n\r\nHowever, I don't really recommend this because it defeats the purpose of using webpack for stylesheets. If you need to build it this way, maybe it's not a good idea to use webpack for the stylesheets.. @Nexxado the option is called `sourceMap` without `s`. Also for the css-loader.\r\n\r\nSee [example](https://github.com/jtangelder/sass-loader/blob/f8cc0680258cb7519db0b4243542776fb3308df9/test/sourceMap/webpack.config.js). Closing this one since it is not an actual bug description. We know that source maps do work with webpack 2 and sass-loader. However, there can be issues depending on the language features you are using, like #351. @clintonb cool thx.\r\n\r\nPlease also add `-loader` to `sass` and I will merge it. Webpack 2 removed this shorthand because it was a source of bugs for newcomers.. Awesome. Yeah, that makes sense. I didn't realize that you need the `sass` instance to access their types. Would you be open to do a PR? Please also write a small test and a note in the README for that.. Wait ... is this change really necessary? Why couldn't you just require `node-sass` in your project? It's a peer dependency and should return the exact same object.. I assume that this is somehow related to your setup. When using `--watch`, webpack will only rebuild the files that had an error. Can you try to provide a minimal example repository that demonstrates the problem?\r\n\r\nPlease note that we can only recompile starting from the *entry SASS file*. So, if you have one monolithic SASS file with a lot of imports, we need to rebuild that one \u2013\u00a0even when the syntax error was just in a little file that was imported. Unfortunately, that's the way how the SASS language was designed.. Thank you for your PR.\r\n\r\nTBH I don't know why we're overwriting `sourceRoot` here. Maybe it wasn't set to the time I tried the source maps. However, it seems like [there is an `sourceMapRoot` option in node-sass](https://github.com/sass/node-sass#sourcemaproot). We should use that one if its set.\r\n\r\nCould you check the following things:\r\n\r\n- What is the value of `sourceRoot` when the `sourceMapRoot` option is not set?\r\n- Is the value of `sourceRoot` correct when the `sourceMapRoot` option is set?. I won't add a new option to the sass-loader, because this should passed directly to node-sass as `sourceMapRoot` option. But I won't override `map.sourceRoot` anymore when it's defined.. Thanks for the suggestion, but this is clearly related to your setup. Your suggestion won't work with webpack 2.. I'm pretty confident that the sass-loader is not changing the order. We have a lot of tests for that. Please remove every other loader and try to remove as much code as possible while the error still occurs. This will help to track down the problem.. Thx. Shipped with `4.1.0`. Nice example of how \"fixing a bug can be a breaking change\".. \"Fixed\" since node-sass 4 was no valid peer dependency.. Sorry. [There are tests for nested imports](https://github.com/jtangelder/sass-loader/blob/fee3593e5f8658b4afd1f01bc8308718ca0fd439/test/sass/imports.sass) and I use them every day, so I doubt that this is related to the sass-loader.\r\n\r\nPlease create a minimal example and instructions on how to reproduce the error. I'll reopen this, if it's a confirmed problem with the sass-loader.\r\n\r\nSince this is an error in the C stack, I assume that you're using a custom importer which throws an error.. There's no entry point. Please take a look at our unit tests and examples to get a working example.. Sorry, this is no WebStorm support forum.\r\n\r\nBesides that, it works in my WebStorm:\r\n![bildschirmfoto 2016-12-23 um 12 38 37](https://cloud.githubusercontent.com/assets/781746/21453167/cf491dde-c90c-11e6-9fc6-eb59d814f20c.jpg)\r\n. Strange. I do have multiple entry points and I never experienced this `Stack level too deep` error. Would be nice to reproduce it reliably...\r\n\r\nI'm thinking of moving node-sass into a separate process. Do you think this might solve it?. For background information: node 0.12 maintenance support will end on 2016/12/31. Yes, it's a duplicate.. By prepending the string with exclamation mark, you can disable the loaders configured in the webpack.config.js.\r\n\r\nHowever, it is recommended to use the `webpack.config.js` anyway. The inline syntax should only be used in certain exceptions. That's why I removed it from the README.. You don't need to add a blob url. Please reference your fonts relatively and use the file-loader.. Sorry, there is not enough information to reproduce this. Please provide a minimal test repository that demonstrates the problem so I can check that out. Try to remove as much stuff as possible since it helps tracking down the problem.. No idea \ud83d\ude01 \r\nThx for submitting your patch.. Have you tried fiddling around with webpack's resolving options? The sass-loader uses webpack's resolving engine, so that should work (in theory). I haven't tests for that, though.. Please provide a small example repository that demonstrates the error. Could you also check if the error is still there without the sass-loader?. @maggo thanks for the example repo. The processed source map contains a negative column number. I don't know how we can fix that since these column numbers come from node-sass.\r\n\r\nI've tried to compile the `index.scss` with node-sass itself and it seems to work, so maybe that's an issue with webpack's source map consumer :(\r\n\r\nI think, this is also related to #272 . @albertogasparin awesome! This is a good starting point to locate the error. Unfortunately, I don't have time for that now, but I would be glad if someone of you could tackle it.\r\n\r\nCrazy, I've never seen mixins and `&` used together:\r\n\r\n```scss\r\n@mixin FormField {\r\n  position: relative;\r\n  display: flex;\r\n  line-height: $Pollicino-FormField-height;\r\n\r\n  &-label {     // <---- that's where the error is coming from\r\n```\r\n. @cj if you use `url()` in an import statement, node-sass won't touch this import anymore. It will be passed to the css-loader as it is. The css-loader, however, will try to resolve it, thus triggering another sass compilation with the `scss/mixin` as entry.\r\n\r\nAs a result, you might end up with a lot of duplicate css code in your bundle.\r\n\r\n@hiroshishu Since there is no stack trace, it seems like this error occurs somewhere between JS and native code. Do you use the [`importer`](https://github.com/sass/node-sass#importer--v200---experimental) or the [`function`](https://github.com/sass/node-sass#functions--v300---experimental) option?. This is definitely not a sass-loader problem.\r\n\r\nWhy are you using a mixin for the box-shadow anyway? It's supported in all major browsers.. Again, not a sass-loader issue. Check the transition mixin (you don't need a mixin for that too).. That would be awesome. Could you create a PR? \ud83d\udc4d \r\n\r\nJust create a directory called `examples` (thus it will be ignored by npm as configured in the `.npmignore`). Please also setup eslint for the examples directory.. I've added a test case for `animate.css`. It works fine.\r\n\r\nJust remove the `includePaths` option and use the tilde path to import stuff from `node_modules`, like this:\r\n\r\n```\r\n@import '~bootstrap/scss/bootstrap-flex';\r\n\r\n@import '~animatewithsass/animate.scss';\r\n@import '~animate.css/animate.css';\r\n```. > but with tilde (~) the imported file is not in webpack's chunk\r\n\r\nIt's just another way of referencing it. The CSS will definitely be in webpack's chunk (whatever that is).. The file must have the `sass` extension if it's written in sass syntax. Try to narrow down the exact file, that is causing the issue and try to compile it with `node-sass`. Does it work with `node-sass`?. You don't need to set the option explicitly anymore. The sass-loader derives it automatically for files ending on `.sass`. The `webpack.config.js` cannot use webpack features. It is executed in node and can only contain node compatible code.. You're importing a SCSS file in your webpack.config:\r\n\r\n```js\r\nvar sass = require(\"./sass/lifeleveler.scss\");\r\n```\r\n\r\nNode cannot import SCSS files. It does not support loaders.. Which docs? Which plugin?. This is a loader. Loaders are different than webpack plugins.\r\n\r\n> I'm using the exact code from the docs...\r\n\r\nThere is no part in the docs where a sass file is included into the webpack config. Why would you want to do that anyway? ^^. The `LoaderOptionsPlugin` should not be necessary, see my comment [here](https://github.com/jtangelder/sass-loader/issues/285#issuecomment-278010902).\r\n\r\nWe have a [test for `includePaths`](https://github.com/jtangelder/sass-loader/blob/3abb8870cb11c120fb31bad73f9de44b7c5f5ddf/test/index.test.js#L65). It should work the way you described it. Could you create a minimal example repo that reproduces the error?. @asolopovas with sass-loader 4.1.1 and webpack 2.2.1, both config examples work.\r\n\r\nWith sass-loader 5.0.1, `webpack.config.js` does not work because the sass-loader doesn't read the config from the webpack options object anymore. You don't need to use the `LoaderOptionsPlugin` with sass-loader 5.0.0 anymore. Just specify the loader options directly. Thus, `webpack.config.error.js` **does** work.. Also [check out our tests](https://github.com/jtangelder/sass-loader/blob/8d54166ff2e99d8e75af868028a1635313c64b6f/test/index.test.js#L62-L64).. Ok, now I can reproduce this error on Windows (doesn't happen on macOS):\r\n\r\n```\r\nERROR in E:/temp/sass-loader-test/~/css-loader?{\"sourceMap\":true}!E:/temp/sass-loader-test/~/sass-loader/lib/loader.js?{\"sourceMap\":true,\"includePaths\":[\"E://temp//sass-loader-test//~//foundation-sites//scss\",\"E://temp//sass-loader-test//~//motion-ui//src\",\"E://temp//sass-loader-test//resources//assets//sass\"]}!../sass/app.scss\r\nModule build failed: Error: \"../../node_modules/foundation-sites/scss/foundation.scss\" is not in the SourceMap.\r\n    at BasicSourceMapConsumer.SourceMapConsumer_sourceContentFor [as sourceContentFor] (E:\\temp\\sass-loader-test\\node_modules\\source-map\\lib\\source-map-consumer.js:704:13)\r\n    at SourceMapGenerator.<anonymous> (E:\\temp\\sass-loader-test\\node_modules\\source-map\\lib\\source-map-generator.js:235:40)\r\n    at Array.forEach (native)\r\n    at SourceMapGenerator_applySourceMap [as applySourceMap] (E:\\temp\\sass-loader-test\\node_modules\\source-map\\lib\\source-map-generator.js:234:32)\r\n    at MapGenerator.applyPrevMaps (E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\map-generator.js:146:22)\r\n    at MapGenerator.generateMap (E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\map-generator.js:194:46)\r\n    at MapGenerator.generate (E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\map-generator.js:297:25)\r\n    at LazyResult.stringify (E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\lazy-result.js:296:24)\r\n    at E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\lazy-result.js:233:27\r\n    at process._tickCallback (internal/process/next_tick.js:103:7)\r\n @ ../sass/app.scss 4:14-151\r\n @ ./app.js\r\n @ multi ./app\r\n```\r\n\r\nIt seems like node-sass is exporting source maps with forward slashes (which are also valid on Windows). Webpack's source map module, however, stores backslash paths. That's why the source maps can not be resolved.\r\n\r\nI can fix this in sass-loader by applying `path.normalize` on all source map paths.\r\n\r\nNext time, please always post the actual error message including the stack trace.. @janusch Could you try the latest sass-loader on master branch? If it's still not working, you can try to comment out [these lines](https://github.com/jtangelder/sass-loader/blob/master/lib/loader.js#L68-L69). Does it work then? How do the paths look like when they come from node-sass?. @asolopovas Running your example repo and `--config webpack.config.error.js` with sass-loader `6.0.2` does not produce any errors:\r\n\r\n```\r\nIEUser@IE11Win7 MINGW32 /E/temp/sass-loader-test (master)\r\n$ webpack --config webpack.config.error.js\r\n(node:2612) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\r\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\r\nHash: c868b04bdf3742bebc1b\r\nVersion: webpack 2.2.1\r\nTime: 6119ms\r\n Asset   Size  Chunks             Chunk Names\r\napp.js  44 kB       0  [emitted]  main\r\n   [0] ./app.js 43 bytes {0} [built]\r\n   [1] E:/temp/sass-loader-test/~/css-loader?{\"sourceMap\":true}!E:/temp/sass-loader-test/~/sass-loader/lib/loader.js?{\"sourceMap\":true,\"includePaths\":[\"E://temp//sass-loader-test//~//foundation-sites//scss\",\"E://temp//sass-loader-test//~//motion-ui//src\",\"E://temp//sass-loader-test//resources//assets//sass\"]}!../sass/app.scss 4.01 kB {0} [built]\r\n   [2] E:/temp/sass-loader-test/~/css-loader/lib/css-base.js 1.51 kB {0} [built]\r\n   [3] E:/temp/sass-loader-test/~/style-loader/addStyles.js 7.15 kB {0} [built]\r\n   [4] ../sass/app.scss 1.12 kB {0} [built]\r\n   [5] multi ./app 28 bytes {0} [built]\r\n\r\nIEUser@IE11Win7 MINGW32 /E/temp/sass-loader-test (master)\r\n$ npm ls sass-loader\r\nsass-loader@1.0.0 E:\\temp\\sass-loader-test\r\n`-- sass-loader@6.0.2\r\n```. I don't know what the vue-loader is doing, but if I remove the sass-loader and just try to compile `App.vue` the same error is still there. So this is not related to the sass-loader.. The sass-loader has its own loader pipeline. This configuration fixed the issue:\r\n\r\n```\r\n            {\r\n                test: /\\.vue$/,\r\n                loader: 'vue-loader',\r\n                options: {\r\n                    loaders: {\r\n                        scss: 'vue-style-loader!css-loader!sass-loader?' + JSON.stringify({\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'node_modules/foundation-sites/scss'),\r\n                            ]\r\n                        }), // <style lang=\"scss\">\r\n                        sass: 'vue-style-loader!css-loader!sass-loader?indentedSyntax' // <style lang=\"sass\">\r\n                    }\r\n                }\r\n            }\r\n```. > A hack solution is definitely better then no solution thanks\r\n\r\nOh, I don't think that this is a hack solution. Since a `vue` file can host a lot of file types, it makes sense to have a dedicated loader pipeline because webpack's loader `test` algorithm wouldn't work here.. If you have a `.babelrc` or a `tsconfig.json` inside your root folder, they are reading the config from these files. But this is loader specific since the tools behind these loaders (babel and typescript) have the same style of configuration. It doesn't apply to all loaders.. This is my config and it's working with your sass-loader-test repository\r\n\r\n```\r\nconst webpack = require('webpack')\r\nconst path = require('path')\r\n// noinspection JSUnresolvedFunction\r\nmodule.exports = {\r\n    entry: [\r\n        'babel-polyfill',\r\n        'webpack/hot/dev-server',\r\n        // ?reload=true enables full page reload on hmr failure\r\n        'webpack-hot-middleware/client?reload=true',\r\n        './app'\r\n    ],\r\n    context: path.resolve(__dirname, 'resources/assets/js'),\r\n    output: {\r\n        path: path.resolve(__dirname, 'public/js'),\r\n        filename: 'app.js',\r\n        publicPath: '/js/'\r\n    },\r\n    devtool: 'eval-source-map',\r\n    module: {\r\n        rules: [\r\n            {\r\n                enforce: 'pre',\r\n                test: /\\.tsx?$/,\r\n                loader: 'ts-loader',\r\n                exclude: /node_modules/\r\n            },\r\n            {\r\n                enforce: 'pre',\r\n                test: /\\.js$/,\r\n                exclude: /node_modules/,\r\n                loader: 'babel-loader',\r\n                query: {\r\n                    presets: ['es2015'],\r\n                    plugins: ['lodash']\r\n                }\r\n            },\r\n            {\r\n                test: /\\.vue$/,\r\n                loader: 'vue-loader',\r\n                options: {\r\n                    loaders: {\r\n                        scss: 'vue-style-loader!css-loader!sass-loader?' + JSON.stringify({\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'node_modules/foundation-sites/scss'),\r\n                            ]\r\n                        }), // <style lang=\"scss\">\r\n                        sass: 'vue-style-loader!css-loader!sass-loader?indentedSyntax' // <style lang=\"sass\">\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                test: /\\.scss$/,\r\n                use: [\r\n                    {loader: 'style-loader'},\r\n                    {\r\n                        loader: 'css-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    },\r\n                    {\r\n                        loader: 'sass-loader',\r\n                        options: {\r\n                            sourceMap: true,\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'node_modules/foundation-sites/scss'),\r\n                            ]\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    resolve: {\r\n        alias: {\r\n            'inputmask.dependencyLib': path.resolve(__dirname, 'node_modules/jquery.inputmask/extra/dependencyLibs/inputmask.dependencyLib/'),\r\n            'inputmask': path.resolve(__dirname, 'node_modules/jquery.inputmask/dist/inputmask/inputmask/')\r\n        },\r\n        extensions: ['.webpack.js', '.web.js', '.tsx', '.ts', '.js']\r\n    },\r\n    // watchOptions: {\r\n    //     poll: 1000 // <-- it's worth setting a timeout to prevent high CPU load\r\n    // },\r\n    plugins: [\r\n        new webpack.HotModuleReplacementPlugin(),\r\n        // new webpack.LoaderOptionsPlugin({\r\n        //     options: {\r\n        //         context: '/', // <- putting this line right under \"options\" did the trick\r\n        //         sassLoader: {\r\n        //             includePaths: [\r\n        //                 path.resolve(__dirname, 'vendor/zurb/foundation/scss'),\r\n        //                 path.resolve(__dirname, 'node_modules/motion-ui/src'),\r\n        //                 path.resolve(__dirname, 'resources/assets/sass')\r\n        //             ]\r\n        //         }\r\n        //     }\r\n        // })\r\n    ]\r\n}\r\n```\r\n\r\n```\r\nsass-loader-test master \u2717 5bbf397 6d \u25b3 \u279c webpack -v\r\n2.2.1\r\nsass-loader-test master \u2717 5bbf397 6d \u25b3 \u279c webpack \r\n(node:6034) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\r\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\r\nHash: b984fcd717d3b5867277\r\nVersion: webpack 2.2.1\r\nTime: 2794ms\r\n Asset     Size  Chunks                    Chunk Names\r\napp.js  1.62 MB       0  [emitted]  [big]  main\r\n  [87] (webpack)/buildin/global.js 509 bytes {0} [built]\r\n [120] /Users/jhnns/dev/temp/sass-loader-test/~/vue/dist/vue.runtime.esm.js 174 kB {0} [built]\r\n [121] ./app.js 305 bytes {0} [built]\r\n [122] /Users/jhnns/dev/temp/sass-loader-test/~/babel-polyfill/lib/index.js 833 bytes {0} [built]\r\n [123] (webpack)-hot-middleware/client.js?reload=true 6.68 kB {0} [built]\r\n [124] (webpack)/hot/dev-server.js 1.57 kB {0} [built]\r\n [127] /Users/jhnns/dev/temp/sass-loader-test/~/core-js/fn/regexp/escape.js 107 bytes {0} [built]\r\n [307] /Users/jhnns/dev/temp/sass-loader-test/~/core-js/shim.js 7.38 kB {0} [built]\r\n [314] /Users/jhnns/dev/temp/sass-loader-test/~/querystring-es3/index.js 127 bytes {0} [built]\r\n [316] /Users/jhnns/dev/temp/sass-loader-test/~/strip-ansi/index.js 161 bytes {0} [built]\r\n [318] ../sass/app.scss 1.12 kB {0} [built]\r\n [319] ./App.vue 1.57 kB {0} [built]\r\n [325] (webpack)-hot-middleware/client-overlay.js 1.82 kB {0} [built]\r\n [329] (webpack)/hot/log-apply-result.js 1.02 kB {0} [built]\r\n [330] multi babel-polyfill webpack/hot/dev-server webpack-hot-middleware/client?reload=true ./app 64 bytes {0} [built]\r\n    + 316 hidden modules\r\nsass-loader-test master \u2717 5bbf397 6d \u25b3 \u279c \r\n```. No problem. You're welcome :)\r\n\r\nI'm willing to help if the other side is providing a test repository. This makes spotting bugs/wrong configurations a lot easier.. Thx, I'll take a look.. Haha, nice one! Seems like you've encountered a bug/unexpected behavior of the [loader-utils](https://github.com/webpack/loader-utils). Starting with commit [e6dc9c1daa02b1c87d9431e77c7ae9771b22f80b](https://github.com/webpack/loader-utils/commit/e6dc9c1daa02b1c87d9431e77c7ae9771b22f80b), the loader utils will recognize loader options objects and just return them.\r\n\r\nHowever, inside the sass-loader, I expected to always get a new object when calling `parseQuery`. That's why I modify the received `options` object. Thus, `data` will accumulate all sass files if the loader is executed multiple times.. This will bloat a lot of CSS files... working on a quickfix.. A fix should ship with `5.0.1`. Are you using the css-loader and the file-loader? In that case, you don't need to configure anything. The file-loader will hash all files automatically.. If you're using the css-loader, have you enabled the `url` option (default is enabled, but maybe you've disabled it)?. https://github.com/webpack/webpack/tree/master/examples/css-bundle. Clone the repo, build the example running `build.js` and checkout the result in the `js` directory.\r\n\r\nThe final url will look like [this](https://github.com/webpack/webpack/tree/master/examples/css-bundle#jsstylecss). The referenced image will be copied to the output folder.. Apparently, the sass-loader is not applied to the file. Make sure, your loader configuration is valid. The pasted config looks ok, but maybe you've oversimplified it for this issue?\r\nPlease, also create a small example repository that demonstrates the problem with the sass-loader.. @wsfuller webpack only understands JavaScript. If there is no rule for a `scss` file, `scss` files will be treated as JavaScript.. I totally understand your frustration. I also think that the configuration is too complicated, but it's hard to have big changes without breaking a lot of code. However, we want to improve that, that's why we've started a discussion [here](https://github.com/webpack/webpack/issues/2797).\r\n\r\nWe're also working on [webpack-cli](https://github.com/webpack/webpack-cli) which will offer a convenient way to get things up running very quickly. We imagine things like `webpack-cli add css-modules` or `webpack-cli add sass`. The webpack configuration itself, however, will always be low-level because we believe that many developers also appreciate the flexibility to adjust things to their requirements.\r\n\r\nRegarding the documentation: If you're not satisfied with [our guides](https://webpack.js.org/guides/), you can simply edit them (click on \"Edit this page\"). This will bring you to Github where you can edit the file and create a PR with one click. We really appreciate every contribution to the [webpack.js.org repository](https://github.com/webpack/webpack.js.org). Contributions to our repositories are even refunded from our [OpenCollective account](https://opencollective.com/webpack) (in case you're legally allowed to create invoices).. Sorry, there is not enough information to reproduce this. Please provide a minimal test repository that demonstrates the problem so I can check that out. Try to remove as much stuff as possible since it helps tracking down the problem.. I assume you are using the `LoaderOptionsPlugin`? Could you paste the configuration of that?\r\n\r\nThis will probably be fixed with the next patch version.. @bholloway this will again be breaking for the resolve-url-loader. I've created a PR for this: https://github.com/bholloway/resolve-url-loader/pull/44. These source maps are truly driving me crazy ^^\r\n\r\nCould you review https://github.com/jtangelder/sass-loader/pull/377 and try it with your test setup? I think, now all paths should be correct.. @bholloway I've [written a test](https://github.com/jtangelder/sass-loader/pull/377/files#diff-0fd0e07cf6d02bf7cf00f18cebb8e6eaR195) that checks if all files in the source map can be resolved.. Thx for reviewing it.\r\n\r\n> I believe that node-sass@>=4 has a problem with the source map. There are negative original mappings. For example:\r\n\r\nThat is a [known problem](https://github.com/jtangelder/sass-loader/issues/272). I don't know enough about source maps, whether that is valid. But it seems like the source maps from node-sass itself are interpreted correctly (tested on chrome). I assume that webpack's `source-map` module has problems with this, but I'm not sure.\r\n\r\n> When content is not embedded then it will need to be served to the browser. So we should avoid ../ paths in the source-map. The shallowest common directory is usually process.cwd() (or close to it) so I think you are safe there.\r\n\r\nChrome allows to configure a [directory mapping for source maps](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0#.rcxg27txq). Thus, source maps don't need to be served.\r\n\r\nThe problem here is that we don't know anything about the final source map destination inside the loader. That's why I think it's better to use relative paths with a `sourceRoot`. This way, the browser should be able to locate the actual source file on disk (only exception: The file is on a different hard drive).. You're using webpack 1 and are trying to install the latest sass-loader. We [removed Webpack 1 support with sass-loader `5.0.0`](https://github.com/jtangelder/sass-loader/blob/master/CHANGELOG.md). You need to run `npm i sass-loader@4`.\r\n\r\nPlease also read about [peer dependencies](https://nodejs.org/en/blog/npm/peer-dependencies/). The error is quite clear if you know the concept of peer dependencies.. The error looks like the sass-loader is not active on that file. Please check that. If you still think, this is a sass-loader issue, please provide a minimal example that reproduces the error. Try to remove as much as possible.. I'll close it for now. When you're sure, it's a sass-loader problem, I'll re-open it.. That is hell of a stack trace! :). If you prepend `~` to the import statement, it will use webpack's usual module resolving engine: `@import \"~@barebone/var-z-index\"`. Awesome, thx :). Please provide more context. What is AoT? Do you have a code example that demonstrates the error?. This has been addressed with #398 and shipped with `6.0.3`.. Looks like you're trying to import a `scss` file but you've only configured the sass-loader for `sass` files. That's the only thing I can spot with the given information.\r\n\r\n---\r\n\r\nThings you should consider in the future before opening an issue:\r\n\r\n- Please format your issue with code blocks ```\r\n- Omit stuff that is probably not relevant\r\n- Don't omit stuff that could be helpful: Error message + stack trace for instance\r\n\r\nIf you want to help us to find the problem: Provide a small test repository that demonstrates the bug.\r\n\r\nIn case, you're not sure whether it's a bug or whether there's something wrong with your configuration, ask a [question on StackOverflow an tag them with `webpack`](http://stackoverflow.com/questions/tagged/webpack) or go to the [webpack gitter channel](https://github.com/webpack-contrib/sass-loader/issues/391).\r\n\r\nThank you :). The `sass` syntax is not compatible with css modules. You can escape the colon like this:\r\n\r\n```sass\r\n\\:local(.container)\r\n  padding-top: 20px\r\n```\r\n\r\nSee https://github.com/sass/libsass/issues/2245. Seems like your PR was based on a fork because there a lot of unrelated changes (see diff).\r\n\r\nI'm not sure about this, because our tests run against webpack 2, so we don't know when we introduce anything breaking. We also don't have the manpower to maintain compatibility for a long time. It's safer and less work if we only allow webpack 2.. Thanks for the work. This commit was pulled in with #398 \ud83d\udc4d . See #394 . Sorry. There is no explanation *what* you're trying to fix. Furthermore, your fix looks actually very broken:\r\n\r\n![bildschirmfoto 2017-03-08 um 00 22 08](https://cloud.githubusercontent.com/assets/781746/23682660/5893a600-0395-11e7-9e7a-0dea32535d35.jpg)\r\n. Thx for creating a detailed report. This has been addressed with #398 and shipped with `6.0.3`.. Awesome, that makes sense \ud83d\udc4d Didn't know the design was broken on the docs page.\r\n\r\nCould you do the same for the https://github.com/webpack-contrib/less-loader? \ud83d\ude01 . Why should we support writing code that does not work across platforms? Windows accepts `/` as valid path separator, OSX and Linux systems do not. Why don't they use regular slashes?. Furthermore: I assume that Sass interprets backslashes as escape character. This means that you need to use double backslashes if you want to have a single backslash (exactly like in JavaScript). Have you read the section about [problems with `url()`](https://github.com/webpack-contrib/sass-loader#problems-with-url)? Please also note that the README expects webpack 2.. To be honest, I'm not sure if aliases are supported. It *should* be supported afaik, but we have no test case for that.\r\n\r\nThx for reporting this. I will take a look.. @wsfuller does your setup have the same problem as @mortocks pointed out? If not, please provide a small test example that makes the error reproducible.\r\n\r\nYour config should probably also look like this:\r\n\r\n**webpack.config**\r\n\r\n    {\r\n        test: /\\.(s?)css$/,\r\n        use: ExtractTextPlugin.extract({\r\n            fallback: 'style-loader',\r\n            use: ['css-loader', 'postcss-loader', 'resolve-url-loader', 'sass-loader'],\r\n        })\r\n      },\r\n\r\nThe postcss-loader can't deal with Sass.\r\n. You should be able to use the sass-loader 4.x with webpack 1. We dropped official support with sass-loader 5.x which means that it *might* work, but there is no guarantee. [This is the sass-loader 4.x documentation](https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1).\r\n\r\nI recommend switching to webpack 2 as soon as possible since we don't have the manpower to maintain multiple versions. Additionally, I think the transition from webpack 1 to webpack 2 isn't as hard as it may seem. There were little breaking changes. Everything you need to know is documented in the [migration guide](https://webpack.js.org/guides/migrating/).. Thx \ud83d\udc4d \r\n\r\nI don't know how this could happen.... Good catch! \ud83d\udc4d . > However, this only works for top level files. It appears that @require statements are not resolved by webpack.\r\n\r\n> I've had a browse through the code base (very readable), but I don't have a full grasp of how this works now. Is it the case that files are piped through webpack when @required, or is this entirely handled by node-sass?\r\n\r\nWe register a [custom importer](https://github.com/webpack-contrib/sass-loader/blob/004807b4e5b13c4101b2c368a0ca5c9ee6dcf0cc/lib/webpackImporter.js#L63-L70) which will be invoked by Libsass as soon as an @import statement is encountered.\r\n\r\nThen, [we determine a list of file paths](https://github.com/webpack-contrib/sass-loader/blob/004807b4e5b13c4101b2c368a0ca5c9ee6dcf0cc/lib/importsToResolve.js) that we want to try. This is necessary in order to mimic the original Sass behavior of underscore imports.\r\n\r\nFor instance, this:\r\n\r\n```sass\r\n@require 'variables'\r\n```\r\n\r\nwill generate this list of possible imports to resolve:\r\n\r\n```js\r\n[\r\n'/path/to/_variables.scss', '/path/to/_variables.sass', '/path/to/_variables.css',\r\n'/path/to/variables.scss', '/path/to/variables.sass', '/path/to/variables.css'\r\n]\r\n```\r\n\r\nThese paths are then passed to webpack's resolver. In your setup, however, these paths won't be resolvable.\r\n\r\nThis can be fixed in two ways:\r\n\r\n### 1\r\n\r\nWe could add a check for `scss.erb` or `sass.erb` to the sass-loader. In this case, you would need to add the extension to your imports:\r\n\r\n```sass\r\n@require 'variables.scss.erb'\r\n```\r\n\r\n### 2\r\n\r\nYou could write [a resolver plugin](https://webpack.js.org/api/plugins/resolver/) which transforms requests that end on `.sass` or `.scss` to `sass.erb` or `scss.erb`. You can also limit this to a specific directory.\r\n\r\n---\r\n\r\nIf you choose option 1, I would like to learn a little bit about your use-case. What is the `erb` file extension about? Is it commonly used? What is this `@require` statement? This is not valid Sass afaik.\r\n\r\nIf you choose option 2, I can help you \ud83d\ude01 . That option looks good. It's not my most favorite solution, because ideally this could be handled by webpack's resolver itself, but since the sass-loader needs to mimic the original Sass' import behavior, we probably have to go this route. Configuring the `importExtensions` makes sense then.\r\n\r\nWaiting for your PR \ud83d\udc4d . Thx \ud83d\udc4d . Can you set up a small example repository that demonstrates the problem? Just ignoring the file doesn't really solve the issue, because then the watcher will not work at all.\r\n\r\nI want to understand why `addNormalizedDependency` is receiving a relative path. Is that a bug in Libsass?. Thanks for providing that example. I'll take a look.. @evilebottnawi Sorry for being unresponsive.\r\n\r\nI won't add any additional custom aliasing to the sass-loader since it is already complicated enough. If webpack's `module.alias` option would be more powerful, this could be solved by anyone.\r\n\r\nHowever, I think your use case should be solvable today by writing [a custom importer](https://github.com/sass/node-sass#importer--v200---experimental) for this particular file:\r\n\r\n```js\r\nconst nodeSass = require(\"node-sass\");\r\n\r\n// webpack.config.js\r\nmodule.exports = {\r\n    ...\r\n    {\r\n        loader: \"sass-loader\",\r\n        options: {\r\n            importer: [\r\n                // url will be the string passed to @import\r\n                // prev is the file where the import was encountered\r\n                (url, prev) => (\r\n                    shouldBeAliased(url) ?\r\n                        { file: require.resolve(\"path/to/alias.sass\") } :\r\n                        // pass file to the next importer\r\n                        // the last importer is the webpack importer inserted by the sass-loader\r\n                        nodeSass.types.Null()\r\n                )\r\n            ]\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nI haven't tested this, but this *should* work. Please let me know if it actually did \ud83d\ude01. Or try out the [node-sass-magic-importer](https://www.npmjs.com/package/node-sass-magic-importer) which may solve this for you already...\r\n\r\nYou can also write a custom resolver for webpack, but this is more complicated:\r\n\r\n```js\r\nclass ResolverPlugin {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n    apply(resolver) {\r\n        resolver.plugin(\"described-resolve\", (request, callback) => {\r\n            // request is an object that contains meta information about the resolve request\r\n            // request.request is a string that has been passed to the resolver, similar to url in the custom importer\r\n            // request.context.issuer is an absolute path to the file that wants to import the request\r\n\r\n            if (shouldBeAliased(request.request) === false) {\r\n                callback();\r\n\r\n                return;\r\n            }\r\n\r\n            resolver.doResolve(\r\n                \"resolve\",\r\n                Object.assign({}, request, {\r\n                    request: require.resolve(\"path/to/alias.sass\")\r\n                }),\r\n                \"aliased sass file\",\r\n                callback\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = class AliasSassFilePlugin {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n\r\n    apply(compiler) {\r\n        compiler.plugin(\"after-resolvers\", () => {\r\n            compiler.resolvers.normal.apply(new ResolverPlugin(this.options));\r\n        });\r\n    }\r\n}\r\n```. @smrq you're right, the current loader configuration does not insert a module for each sass file into webpack's dependency graph, it just uses webpack's resolver. The less-loader already uses `loadModule`, but only for non-Less files in order to allow `@import` of JS files for instance.\r\n\r\nHowever, I'm not sure if we *should* insert a module for each Sass file because there is no actual benefit besides the `NormalModuleReplacementPlugin`. It would just increase the memory usage...\r\n\r\nI think your use case can be solved with a resolver plugin, but unfortunately there is no easy (core-)plugin like the `NormalModuleReplacementPlugin`. @sokra what do you think? Should we add a resolver plugin to core?. Version bump and publish please :wink: :+1: \n. :dancers: \n. Does `node-sass` provide an api to intercept the compilation process? @sokra is using the Less-Parser in the [less-loader](https://github.com/webpack/less-loader/blob/master/index.js)\n. I've made some investigation and it seems like [libsass](https://github.com/hcatlin/libsass) (which node-sass is based on) is not providing a way to intercept the loading of files. This means that we can't resolve files by webpack's algorithm.\n\nAt least libsass is exposing an array of all imported files which can be marked as dependency. Unfortunately [node-sass isn't exposing this yet](https://github.com/andrew/node-sass/issues/279).\n. > @import will not use webpack's pipeline (unless it is a CSS import that gets passed to css-loader).\n\nExactly. You can raise your voice [here](https://github.com/hcatlin/libsass/issues/21), maybe they'll implement it.\n\n> What else?\n\nThe watch-mode won't work for sass-modules since webpack doesn't know about the dependencies. If node-sass exposed the array of all imported files, at least this could be fixed. Until then a third-party watcher which simply watches all `scss`-files can be used.\n\n> It would probably be nice to add a caveat to the documentation for this loader\n\nYep :+1: . Creating a pull-request of the readme is very easy on GitHub. Just click the edit-button :smile: \n. Cool!\n. Btw: I'm currently working on this at [node-sass](https://github.com/andrew/node-sass/pull/290). You can watch the progress there.\n. [`includedFiles`](https://github.com/andrew/node-sass#stats) landed in node-sass today, so marking dependencies is now possible.\n. It seems like there is an issue on [macs](https://github.com/andrew/node-sass/pull/290#issuecomment-42289919)...\n. Have you [initialized the submodule `libsass`](http://git-scm.com/book/en/Git-Tools-Submodules#Cloning-a-Project-with-Submodules)? It seems like it can't find the header files:\n\n```\n../sass_context_wrapper.h:1:36: fatal error: libsass/sass_interface.h: No such file or directory\n```\n. Yup!\n. Nice! :+1: \n. @sokra ?\n@lukebrooker This is completely handled by node-sass, but I assume that it is imported twice as this is sass' default behavior. However, [there are hacks](https://gist.github.com/courtsimas/1167053) to avoid it.\n. @ryanseddon This kind of modularity is currently not possible with any CSS preprocessor (LESS and SASS), because each compilation is self-contained and doesn't know about previous compilations. That's why every `require()` of a SASS or LESS file creates a complete standalone CSS file with all the duplicates.\n\nHowever, LESS provides [a way to import other LESS files without including the source](http://lesscss.org/features/#import-options-reference) which works quite well.\n. Yep https://github.com/jtangelder/sass-loader/pull/22 :grinning:\n. Ok thx :+1: \n. Cool, thx.\n. We should check if this is possible with the current beta version of node-sass.\n\nThe current master branch is [already using node-sass 2.0](https://github.com/jtangelder/sass-loader/blob/100f2a53c7fbbc8b19dde20f8a16c8c837049a8c/package.json#L23), so we can start playing with it now.\n. Has been published as `v0.4.1`. I've added [instructions](https://github.com/jtangelder/sass-loader#source-maps) to the README.\n. `inline-source-map` is the best option for development, because it requires no setup to retrieve the original source. However, it's not suitable for production, that's why we leave it up to the user to configure.\n. But a segmentation fault is not an issue of the sass-loader?\n. It's a tricky question. There are pro and cons for both sides. The less-loader decided to move it to `peerDependencies`...\n. I think we should move it to the `peerDependencies`. There is a greater benefit for most developers to specify the sass version directly (see recent pull-requests and issues regarding node-sass v2).\n\nNow that `peerDependencies` [will _not_ be deprecated](https://github.com/npm/npm/issues/6565#issuecomment-74971689).\n. done()\n. node-sass just implemented the api (sass/node-sass#530). Now we need to wait for v2 to be released.\n. > Is this now working?\n\nNope, we need to adjust the sass-loader for this. But I guess it's ready to be implemented :grimacing: \n. @akiran ok to merge?\n. I could do it. But currently I don't have a sass-project either, it's just personal interest :grinning:. Maybe both @akiran and me? \n. Most of the time I publish under the name of [peerigon](https://www.npmjs.org/~peerigon).\n. :+1: \n. Looks good to me!\n. Published as `0.3.1`\n. Mhmmm guessing from the comments it is an issue related to `node 0.11`. When I run `npm i sass-loader` on `node 0.10.33` there are no errors.\n\nSince `node 0.11` is not a stable release I don't think we need to lock the version number...\n. Damn!\n. Starting with 1.0.0, node-sass is now a `peerDependency`\n. Fixed with https://github.com/jtangelder/sass-loader/pull/113\n. This is more likely an issue with npm or your setup. I can't find any clue why this should be a problem with sass-loader itself.\n. Cool, thx! :+1: Could you also add some tests?\n. Synchronous compilation has been implemented, but there is no flag yet...\n. I don't know what the correct settings are, but you probably need to adjust the `$icon-font-path`-variable. Bootstrap provides the possibility to [configure the path to the icon fonts](https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_glyphicons.scss). Make sure that the url() is pointing from the imported file (probably `/assets/stylesheets/_bootstrap.scss` in your case) to the font-files.\n. You need to think from the css-loader's perspective. It gets a css-file with url() statements referencing files. Now you need to start from the css-file's location and walk the relative url to the file and look if the path is correct.\n. Related discussions: sass/sass#1015 sass/libsass#532\n\nYou could also try [this sass mixin](https://github.com/glebm/sass-rewrite-url) to achieve relative urls.\n. :+1: \n. `$bootstrap-sass-asset-helper` might also work. However, setting `$icon-font-path` relative to the _scss_ entry file does also work. I'm using this setting in my projects.\n. [There is a test for bootstrap](https://github.com/jtangelder/sass-loader/blob/c5f311f2614723129d1d1acbda8d7b136c3badda/test/bootstrapSass/webpack.config.js). It must be related to your local config.\n. There's a note about this problem at https://github.com/jtangelder/sass-loader#problems-with-url. Why was this not helpful? We have a test for bootstrap: https://github.com/jtangelder/sass-loader/blob/master/test/scss/bootstrap-sass.scss\n. First of all, thank you for your pull-request. I'm glad you noticed the new `includedFiles`-feature, [I've implemented it in node-sass](https://github.com/sass/node-sass/pull/290) :grinning:\n\nWe've [discussed about marking dependencies](https://github.com/jtangelder/sass-loader/pull/29). The problem is, that libsass is ignoring the whole module when there's a syntax error. Thus webpack's file watcher will not fire, even after you've fixed the error. This has probably been fixed with a new version of libsass (I recall a discussion about this at libsass). But before we're removing `sass-graph` we need to assert that all dependencies are marked (even those with a syntax error).\n\nHowever, I'm willing to publish a beta of the sass-loader which will use the new node-sass version. There will also be [custom importers](https://github.com/jtangelder/sass-loader/issues/31) which will integrate nicely with webpack's custom resolving engine.\n. That would be great :+1: \n. I'm getting an error on node 0.11.14\n\n```\nmodule.js:355\n  Module._extensions[extension](this, filename);\n                               ^\nError: Module did not self-register.\n    at Error (native)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/Users/jhnns/dev/jtangelder/sass-loader/node_modules/node-sass/lib/index.js:211:15)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n```\n\nThis is probably related to [a recent fix at node-sass](https://github.com/sass/node-sass/issues/627). I don't think that we can publish the current state because it would break all projects using node 0.11.x.\n. We should probably also bump our major version, because according to node-sass it _is_ a breaking change.\n. node-sass 2.0.0 has been released... sass/node-sass#157\n. Has been published as `0.4.0`\n. #41\n. Has been published as `0.4.0`.\n. Thx\n. LESS is handling these issues [way more elegantly](https://github.com/webpack/less-loader/issues/7#issuecomment-69595045)...\n. Afaik libsass doesn't touch urls(). This error is probably caused by the css-loader. \n\nThe webpack-way of doing this is to configure the [file-loader](https://github.com/webpack/file-loader) or [url-loader](https://github.com/webpack/url-loader) for these binary files.\n\nIf you're really sure that webpack shouldn't manage these assets, you can use [root urls](https://github.com/webpack/css-loader#root-relative-urls) (= urls starting with a `/`) to signalize the css-loader, that it shouldn't touch them.\n. Mhmm I'm not quite sure ... could be an issue with [sass-graph](https://github.com/xzyfer/sass-graph). Could you remove the [calls of `markDependencies()`](https://github.com/jtangelder/sass-loader/blob/master/index.js#L42) in your local installation of the sass-loader and check, if the problem still exists?\n. Fixed?\n. We don't depend on sass-graph anymore.\n. Donnu ... if our tests are passing, we should publish it. If our tests are passing while we _know_ that it doesn't work in actual projects, we should fix our tests :grin: \n. You mean because of https://github.com/jtangelder/sass-loader/pull/41#issuecomment-70372228?\n. Yep, I've published it.\n\nWe should consider using a major version bump and following semver...\n. Could you show an example how you'd expect things to work?\n\nI'm afraid that this is currently not possible (if I got it right). But with custom importers #31 it's probably possible. Then you can write a special loader, which generates scss code to import your dynamic vars.\n. Mhmmm your solution would probably work too.\n\nAnd when you need to access the variables also via client-side JavaScript:\n\n``` javascript\nwebpack.DefinePlugin(require(\"./styles/variables.js\"));\n```\n. Oh, there are use-cases where this is required... :)\n\nI'll check that!\n. @Kasu haha, nice!\n@nwhite89 no I don't think so. I don't want to extend the language itself...\n. Is @EdwardIrby 's solution working for you? I'd like to link the loader in our README, but I'm not sure about how safe that string replaces are :grin: ...\n\nDo you have any experience on this?\n. Thx @nightgrey \n\nThis issue can now also be solved with the `data`-option. Just [define any Sass code](https://github.com/jtangelder/sass-loader#environment-variables) which will be prepended to the actual entry file.\n. > It's a bit confusing where to options, query params or sassLoader\n\nI know... this will be simpler with webpack 2 where there is a dedicated way to set the options (query params didn't work so well with more complex use-cases).\n. Nope, looks good. There must be a different error in your setup.\n. @nagarajay Does [this](https://github.com/webpack/webpack/issues/2684#issuecomment-255155479) work for you?\n. When they're using [`!default`](https://robots.thoughtbot.com/sass-default), yes. Otherwise, no.\n. While this is true for webpack 1, this has been changed with webpack 2. See current README.. You're right, but [this will probably be fixed](https://github.com/jtangelder/sass-loader/pull/29#issuecomment-63221951) as soon as node-sass 2.0 is ready-to-use.\n. @akiran Should we publish it without `beta`?\n. #51\n. Sorry for not answering this.\n\nFirst of all: Thank you for work. I appreciate every contribution. Unfortunately this PR looks a bit over-complicated to me. Imho you're using too much internal stuff which can then break easily when @sokra changes something.\n\nWe can take the [less-loader](https://github.com/webpack/less-loader) as blueprint since it already has this feature for quite some time. The important code is [here](https://github.com/webpack/less-loader/blob/10279f468625bc31b62720f9da9847bebbcaab68/index.js#L86-L107). We can let webpack/enhanced-resolve do the resolving by calling\n\n``` javascript\n// loaderContext is `this` inside the loader\nloaderContext.resolve(context, moduleRequest, cb)\n```\n\nTake also a look at the [loader api](http://webpack.github.io/docs/loaders.html#resolve).\n\nI'll publish a branch which contains the refactoring for node-sass@2.0.0\n. Oh, ok... didn't know that you already tried the `less-loader` approach.\n\n@izaakschroeder what do you mean by \"module urls\"? Inlined loaders?\n@sokra is that true? Does `loaderContext.resolve` not apply inline loaders?\n\nI don't know what you mean by \"root directory\", but the described behavior should be done with [`loaderUtils.urlToRequest(url)`](https://github.com/webpack/loader-utils#urltorequest)\n. Check out [this chapter](https://github.com/webpack/loader-utils#urltorequest) of loader-utils.\n\nThe `~`-prefix points to module directories. This should be consistent across all loaders where the import/require syntax doesn't differentiate between local and module directories. The css-loader and less-loader are already using it.\n. I've implemented the custom importer with the less-loader approach.\n\nAnyway, thanks for your suggestions :+1: \n. Running `npm install sass-loader` and inspecting the `package.json` outputs:\n\n``` javascript\n  \"dependencies\": {\n    \"loader-utils\": \"^0.2.5\",\n    \"node-sass\": \"^2.0.1\",\n    \"sass-graph\": \"^1.0.3\"\n  },\n```\n. Try to run it in an empty folder. You've probably specified another version in your `package.json`.\n. No problem\n. The `sass-loader` just [returns a string containing css](https://github.com/jtangelder/sass-loader/blob/master/index.js#L43) so you should be free to do whatever you want. However, I do recommend that you use the css-loader, so that all referenced images are written to the output folder as well.\n\nI don't know anything about the css-loader returning arrays or something. I thought it would also just return a string (but I also haven't used the output directly yet).\n. Thx\n. Starting with 1.0.0, we don't depend on sass-graph anymore.\n. Thx.\n\nPublished as `0.4.2`\n. I'll take a look\n. Could you create a small test-case? I need to know more about your actual project structure, because source maps are working as expected in our repo.\n. No problem. :grinning: \n. #31 \n. > Just wanted to confirm my understanding after reading through the issues that a solution to this is still being worked on?\n\nYes\n. Thank you for your PR! But I'll favor #61, if that's ok for you :)\n. Published as `0.5.0`.\n\nJust wanted to point out that `node-sass` will be listed as `peerDependency` with sass-loader `1.0.0`\n. Thx :+1: \n. Not yet. You could [switch `isSync` to `true`](https://github.com/jtangelder/sass-loader/blob/19d01ab0db9e8066d250134a6080b780b3064ad9/index.js#L27) in your local installation to test it. I heard that sync compilation is awful slow in sufficient complex projects so this has no priority for me.\n. Stuck processes should be no issue with 2.0.0 anymore. So this flag is not necessary.\n. Yep, I was also getting these. You need to stick with sass-loader `0.x` until this is fixed. :unamused: \n. I've managed to write a version of sass-loader that provides the same features while depending on node-sass `2.1.1`. It's on a [separate branch](https://github.com/jtangelder/sass-loader/tree/release/v0.6.0) and can be installed via `npm i sass-loader@0.6.x`. Please note, that sass-loader `0.6.0` is listing node-sass as `peerDependency` as well.\n. I didn't expect `node-sass 3.0.0-beta` to be so unstable, but \u2013 well \u2013 it is a beta. @alexhawkins you can use old versions of `sass-loader` until the current ones are stable.\n. Afaik `sass-loader@0.4.2` is the last version that does not bother you with errors\n. @raphaelsaunier I've updated the README\n. @haustraliaer that are good news. Please let me know if everything works as expected. I'll remove the note in the README then.\n. @alexduan this does not happen in our tests, so please try to narrow it down and open a separate issue.\n. With `sass-loader 1.0.0` `node-sass` should now be a dependency of _your_ project.\n. `node-sass@3.0.0-alpha.0` is \u2013 as the name suggests \u2013 not stable :wink:. Probably the same issues as #65 \n. The files are now resolved by webpack, and webpack doesn't care about the `_` mechanism. However, since Sass users are expecting this feature to work (although it has nothing to with the language itself and should imho not be part of the specification, but that's another topic :wink:), I'm willing to implement this feature.\n\nIf you don't want to replace all your import statements, I recommend to stick with sass-loader `0.x` for now. There are also some issues on OSX afaik #65. \n. Should be fixed with `1.0.1`\n. Is that a wildcard or do you have a file called `*.scss`? Wildcards are not supported.\n. #151 \n\nAre globs supported by Rubysass? Why are people expecting this to work?\n. node-sass 3.0.0 is causing some trouble :cry:\n\n#71\n. I've managed to write a version of sass-loader that provides the same features while depending on node-sass `2.1.1`. It's on a [separate branch](https://github.com/jtangelder/sass-loader/tree/release/v0.6.0) and can be installed via `npm i sass-loader@0.6.x`. Please note, that sass-loader `0.6.0` is listing node-sass as `peerDependency` as well.\n. I suppose, this is a problem with node-sass/libsass itself, because sass-loader is just passing the input on.\n. Mhmm damn ... we can't just decrement the node-sass dependency because sass-loader 1.0.0 builds on the new API introduced with 3.0.0.\n\nMaybe I can publish a stable sass-loader version without the new features introduced with 1.0.0...\n. @am11 thx for the support! `3.0.0-beta.4` is working pretty reliable in our tests.\n. It's in `node-sass`: https://github.com/sass/node-sass/issues/713\n. I've managed to write a version of sass-loader that provides the same features while depending on node-sass `2.1.1`. It's on a [separate branch](https://github.com/jtangelder/sass-loader/tree/release/v0.6.0) and can be installed via `npm i sass-loader@0.6.x`. Please note, that sass-loader `0.6.0` is listing node-sass as `peerDependency` as well.\n. Yeah, [we've realized that too](https://github.com/sass/node-sass/issues/713#issuecomment-89814670) :disappointed:. It's a problem inside the custom importer code.\n. Awesome!\n. With sass-loader 2.0.0, you should have no problems with it anymore.\n. Thx for the feedback, but this error does not seem to be related to sass-loader...\n. Would it be possible if we didn't set the option? How is node-sass supposed to know, which syntax is used?\n. Shipped with `v1.0.2`.\n\nImporting a file with the other language style requires the extension to be set explicitly.\n. I don't think that this is a sass-loader issue, because we're just passing the input to [node-sass](https://github.com/sass/node-sass) which passes it on to [libsass](https://github.com/sass/libsass). \n\nYou could make a PR to [sass-spec](https://github.com/sass/sass-spec) to demonstrate the problem. Maybe @mgreter can help you.\n. [There are actually tests for error reporting](https://github.com/jtangelder/sass-loader/blob/05396a5d82f67dac5e4c8932da27212cb6df2aac/test/index.test.js#L39-L77), so I don't expect this issue to be a problem of sass-loader. Could you provide a minimal example of your project where the error occurs?\n. Thx, I'll take a look\n. Is this still an issue?\n. I'm glad to hear that :+1: \n. Thx for the report. Could you check if that is a node-sass or libsass issue? The sass-loader just passes the input on.\n. There is an working example with bootstrap-sass in our test-folder: https://github.com/jtangelder/sass-loader/tree/master/test/bootstrapSass\n. Is `notsass` a css file?\n. So is this a duplicate of #73?\n. Yep, that problem is vice versa, because the feature doesn't exist :grin: \n. Probably caused by #73\n. Does `v1.0.2` fix this issue?\n. I'm glad I could help :grinning: \n. Yep. We need to track that issue, it's not a sass-loader thing.\n. Is the URL wrong or is the map file just not generated?\n. You're right. It looks like this has changed in webpack somehow... need to investigate.\n. Thx for investigating this.... so maybe we just need to remove all the `sourceMappingURL` references added by libsass?\n. > Maybe there should be an option for libsass to generate a source map without adding a reference\n\nWell, that option doesn't make sense from libsass' point of view ^^\n. I'll try that out, thanks!\n. Yep. See #123 \n. No problem, that's a legitimate question :grin: \n\nWe had the experience that most of the time it's more useful when the app author is able to specify the exact module version. sass-loader is basically just calling `render()`, the actual language features are used by you, the app author.\n\nOtherwise we had to publish a new version for each `node-sass` version, which is a maintenance nightmare.\n\nIt's the same problem with the less-loader btw.\n. No problem. `0.6.0` _is_ actually the latest version that has been published. But that was a compatibility fix for an older version.\n. That's node-sass or libsass afaik. There is no `console.log()` in sass-loader.\n. Have you tried using `https://` urls?\n\nBtw: Could you please format your question decently. You're expecting us to help you, so please help us understanding you.\n. Ah interesting... thx.\n. 0.6.0 is the last published version, because it contains a fix for the `0` major release. However, the current version you should install is `v1.0.1`\n. How do you configure the sass-loader in your `webpack.config`?\n. @sokra How do the paths need to be escaped?\n. Is this still an issue?\n. Yes, honestly, using `encodeURIComponent` is counter-intuitive. On the other hand, the configuration writer is the only person who can escape it properly because they know where the characters belong to. Is `&` part of the config or is it used to distinguish different parameters?\n. That PR looks good! I'm definitely willing to merge that. :+1:\n\nJust add some tests :)\n. Shipped with `v1.0.2`\n. All url()s must be relative to the sass main entry file, because the css-loader resolves the url()s based on this location.\n\n[Less](http://lesscss.org/) has an option which rewrites the urls accordingly, but Sass has not afaik. Have you tried overriding the [`$icon-font-path`](https://github.com/twbs/bootstrap-sass/blob/e0ddfcdf288c23bd97b8511a290db7291ccf1860/assets/stylesheets/bootstrap/_variables.scss#L83) instead?\n. Oops, that's probably a bug introduced with `1.0.2`. We have to take care of `.css` file extensions\n. Should be fixed with 2.0.0\n. I know that issue, but afaik it is not restricted to the sass-loader, it's a webpack-dev-server issue. I've experienced this with javascript code as well @sokra\n. I'll investigate this as soon as I've found some time.\n. See https://github.com/jtangelder/sass-loader/pull/104#issuecomment-108525870\n. Fixed with 1.0.4\n. Remove the `sass-loader` entry in your `package.json` and run `npm i sass-loader@1.x --save`. This should (currently) pull `node-sass@3.1.1` \n. That's strange. The sass-loader doesn't modify any paths. Webpack should also be possible to work with these paths. Could you find out how these paths are messed up? What is actually wrong?\n. Should be fixed with 2.0.0\n. `^3.0.0-beta.4` should pull all versions up to `4.0.0` afaik.\n. Is it 5 times D or 6 times D? ^^ `#DDDDD` is no valid CSS color, `#DDDDDD` is.\n. Mhmm nope. That's a node-sass error so it should probably be reported in their repo. Can you isolate the error in a single file and compile that without webpack, just with node-sass?\n\nYou could try to not use protocol-relative URIs.\n. Is this still an issue with 2.0.0?\n. Since sass-loader 1.0.0 you don't need to set the `includePaths` manually. It should be resolved like a webpack module.\n\nThe error about not finding `_foundation.scss` is misleading, I have to admit. But the sass-loader always tries to resolve the module without a preceding underscore first, then _with_ underscore. So that's not the error (I probably have to rework the error messages).\n\nCould you post your `webpack.config.js`?\n. Mhmm it could be that `includePaths` is broken since `1.0.0` because webpack is responsible for resolving paths (I still need to confirm that in a test though). However, it _should_ work if you do it the webpack-way: Add `./src/main/resources/vendor/` to `resolve.root` and then write `@import \"~foundation/scss/foundation\"`\n. > I would prefer to write the scss (and really, all my code) webpack-agnostically\n\nThat's a valid argument...\n\nI'll have a look as soon as I found some time. Unfortunately I'm loaded with work... :unamused:. In the meantime, you can also take a look for yourself. The code is not complicated, but it requires some understanding about how to write loaders for webpack.\n. Should be fixed with 1.0.3\n. Probably also related to #100?\n. That's strange, thx for reporting this. Could you set up a small gist that reproduces the error?\n. @haustraliaer 's example shows the hangs.\n. I would be happy to provide a temporary fix, but #109 seems a bit risky to me...\n. If someone can publish a project that makes this reproducible, that would be a big help \ud83d\udc4d . Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. @jsg2021 When you add the `.css` extension, libsass does not include the file, it just turns it into `@import url(..)`. When this is passed to the css-loader, all urls must be relative to the file which imports them. When you omit `.css`, libsass includes the file just like it was a `.scss` file. In this situation, all urls must be relative to the entry sass/scss file which was passed to the sass compiler.\n\nThis is how libsass handles it, [the sass-loader is just imitating it](https://github.com/jtangelder/sass-loader/blob/089c52dc9bd02ec67fb5c65c2c226f43710f231c/index.js#L293-L348).\n. Mhmm I don't have a working Windows setup to reproduce the error. Would be great if you could give me some insight. The sass-loader is not a huge project, so it should be fairly understandable.\n\n[This is the line](https://github.com/jtangelder/sass-loader/blob/fff1c6857e2352f8cbc0230f8eae19ba30964b94/index.js#L249) that makes the included file known to webpack.\n. Do you use `npm link` or `bower link`?\n. Will be fixed with the next major version. You can already test the master branch.\n. Fixed with 2.0.0\n. Interesting @jeffling :+1: \n\nI think it's also possible to just do something like\n\n``` javascript\n#my-namespace {\n    @import \"all/that/stuff\";\n}\n```\n. Yep. To be honest, I haven't found a way the other way round without code duplication.\n. Thanks for the pull-request, but I'm not sure if I should merge it. It increases the size of the final css considerably and thus is not an option to use in production...\n\nAs long as your able to set `sourceMapContents=true` in your app, that's a fair workaround.\n. After fiddling around, I realized that webpack includes the sourceMapContents by default anyway. Thus I've finally merged this manually. Shipped with `1.0.4`.\n\nThx for your effort! :+1: \n. Yep, that's a known problem of preprocessors (both SASS and Less). I haven't found an easy way for SASS, though. Less introduced the [`import (reference)`](http://lesscss.org/features/#import-options-reference) mechanism for that use-case.\n. We can't solve this because each `require()` of a SASS file from a JS file will trigger a distinct compilation. This is how loaders work.. That's a confirmed concurrency issue of node-sass 3. See #100 \n. Thx for the sample project. With \"live reload\": Do you mean page reload on file change or do you actually mean Hot Module Replacement (HMR), which replaces the stylesheets on the fly (#37)?\n. There's currently an issue with the [style-loader](https://github.com/webpack/style-loader/issues/53) which makes HMR impossible.\n. HMR is not a concern of the sass-loader. Thx for reporting this. I'll have a look as soon as I found some time. Unfortunately I'm loaded with work... :unamused:.\n\nIn the meantime, you can also take a look for yourself. The code is not complicated, but it requires some understanding about how to write loaders for webpack.\n. Is this still an issue with the recent version of sass-loader?\n. Should be fixed with 2.0.0\n. Mhmmm ... do you know how deasync works? I'm a bit afraid to merge this when deasync is messing with node's event loop. It looks like black magic to me :grinning: \n\nCan more people try this PR locally? If it fixes the current issues (and deasync is \"harmless\"), I am willing to merge it.\n. Issue fixed by #132.\n\nBut thank you for your effort and your proposal :+1:. Although I did not merge it, I do think that these contributions help to improve the code.\n. @oopschen Thx for investigating this! See PR for discussion.\n. Should be fixed with 1.0.3\n. That's a nice feature I was [also already thinking about](https://github.com/peerigon/stylevar-loader/issues/1).\n\nThis should be doable with [node-sass' custom importer](https://github.com/sass/node-sass#importer--v200---experimental). The sass-loader [is already using it](https://github.com/jtangelder/sass-loader/blob/master/index.js#L137) to plug-in webpack's file resolver. Acoording to node-sass' README, you can also specify an array of functions for `importer`.\n\nYou could try to prepend a JSON custom importer, which generates a SASS map if encounters a JSON-file. In all the other cases, it should return `sass.NULL` (according to node-sass' README). If you're successful, we can change the sass-loader so that anyone can prepend own custom importers (currently, `importer` would just be overwritten).\n. Thx for the pull-request. Please add tests that demonstrate what kind of bug you were trying to fix, so that future code changes won't regress this feature.\n\nI'll review the PR as soon as I found some time.\n. That looks good! :+1: I'll merge (and refactor) and publish it in a few days.\n\nSorry, I was not aware that the tests were not running for people cloning a fresh copy of the repository. It _should_ work for everyone without extra work just by running `npm test`.\n. Shipped with 1.0.3\n. This probably requires a call of [`loadModule()`](https://github.com/jtangelder/sass-loader/blob/089c52dc9bd02ec67fb5c65c2c226f43710f231c/index.js#L167). I need to find out if there is a synchronous version of that method.\n. I talked to @sokra and he's planing to deprecate synchronous loaders, which means we could use `loadModule()`. It was initially introduced to allow synchronous `require()` in node without compiling. The `target: \"node\"` config, however, is more practical in most real world use-cases.\n\nThen I need to clean up the code as it currently contains a lot of duplication and branching because of sync support.\n. Close?\n. That looks good, thx. :+1:\n. Shipped with 1.0.3\n. Didn't know that git supports file modes ^^\n. Thx :+1: \n. Fixed with 2.0.0\n. I've followed these discussions in several repositories.\n\nI think it's a huge benefit for all these \"plugin modules\" like the sass-loader if you can specify the exact Sass/LESS/grunt/gulp/whatever version. These \"plugin modules\" are just a thin layer between your app and another big library. It does not feel right if they bring this dependency in. And it's very time-consuming to handle all the \"bump version\" PRs :)\n\nI'm open for further discussion, but we won't change this soon. That's why I'll close this for now.\n. I see, we need to omit the source maps because otherwise webpack's source map comment would be ignored. Without `.omitSourceMapUrl` it looks like this:\n\n``` css\nbody {\n  background: lightgrey; }\n\n/*# sourceMappingURL=test/output/sass.map */  <-- from node-sass\n/*# sourceMappingURL=data:application/json;base64,...*/  <-- from webpack\n```\n. Will be published soon. I just need to do some tests and I'll update the docs. Also related to #104.\n. Shipped with `1.0.4`\n. Thx for your effort @DawidJanczak. Does https://github.com/jtangelder/sass-loader/pull/113 solve the same thing?\n. Anyway, thx! :+1: \n. Yes, a public example would be helpful. Besides that: Which version of sass-loader do you use? We've fixed some bugs with 1.0.3 concerning the import system.\n. Ok, thx. Then we need a test to reproduce it, so we won't introduce the regression again.\n. A minimal test setup would be more helpful. After 5 minutes I'm still cloning the repo... ^^\n. I've checked it on my virtual machine. Your example passes the sass-loader without error, but the css file is imported with an absolute path. This behavior is not intended (see #138).\n\nHowever, it should be no problem for the css-loader, but it seems like the css-loader [is not able to recognize absolute Windows paths](https://github.com/webpack/loader-utils/blob/a8610120db7bcdde249cbf7bcaa5f8ce65aa318d/index.js#L118) @sokra.\n. Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. Thx for the feedback. I've found the problem and I'm working on it...\n. Sorry, I didn't see the PR :(\n\nIt's already fixed in the master branch: https://github.com/jtangelder/sass-loader/commit/3ae649b05dfbee2ca7d9d56cb8c130c1214d6196\n. Thx @jorrit. :+1: \n\nI've refactored the whole import stuff and tested it on windows, it works.\n. Does webpack recompile anything if you change a file? It could be that just HMR is not working.\n\nI don't know about a watcher bug... what is your OS? Are any Symlinks involved (like via `npm link` or `bower link`?\n. Is that a duplicate of #102?\n. Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. I have added a chapter to the README about `url()`:\nhttps://github.com/jtangelder/sass-loader#problems-with-url\n\nIt's way more complicated than in LESS which provides a mechanism that rewrites urls...\n. Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. Should be fixed with 2.0.0\n. Nice! :+1:\n\nThx @jorrit \n. This is not an issue specific to the sass-loader so I'll close it. @tappleby thanks for providing an example setup.. Thx for your effort @endaaman. :+1: \n\nThe current master branch should fix your problem. However, I've used another approach because your PR adds files as dependency that might not exist anymore. This might be no problem, but I don't think that it's good coding style (no offence). But your PR was inspiration for the current solution :grinning:.\n. Could you guys check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. Thx. That's what I wanted to hear :+1: :grinning:.\n. Shipped with 2.0.0\n. Thx for your effort :+1: \n\nI've added it manually to the master branch because I've refactored it a lot.\n. Could you check out the current master branch and check if it works for you? I've heavily refactored the import mechanism and need more tests.\n. Fixed with 2.0.0\n. There are tests for the indented syntax, so I expect it to work. Please provide a minimal example that demonstrates the problem.\n. Could you give me an example where the problem occurs? The paths are already normalized afaik.\n. Shipped with 2.0.1. Thanks! :+1: \n. Nice :grinning: \n. I did just skim through your source code and it looks good! :+1: You did even use `urlToRequest()`. Would you mind sending me a PR with the updated README? I would be happy to mention your loader.\n\nI was just wondering if this behavior could/should be part of the css-loader when source maps are present. In this case we could avoid parsing the CSS twice.\n. This is a problem of Sass in general afaik (see [here](http://inside.unbounce.com/product-dev/handling-code-duplication/) and [here](https://github.com/wilsonpage/sass-import-once)). Could you check if the problem is also present when you're using node-sass directly? If that's the case, this is the probably the wrong repo for that issue.\n. There are helper mixins like [sass-import-once](https://github.com/wilsonpage/sass-import-once/blob/master/examples/1/reset.scss) which prevents double imports. However, this requires you to wrap your whole code with curly braces and to find a unique id for your module (usually the file path within the project). Personally, I find that too annoying.\n\nAfter fiddling around with double imports I found out that it's not actually a big problem. Gziping your static assets eliminates code duplication very efficiently. You can try that out for your specific case by creating two versions: one with `sass-import-once` and a gzipped one. Sure, in the final result, the gzipped version contains duplicated style rules. However, I bet the performance penalty would still not be measurable.\n\n> but I had thought the sass-loader was intercepting @import statements in Sass and could do something clever.\n\nYes, that would be possible and I'm actually planing to do something. However, [rubysass is going to ship this with `4.0.0`](https://github.com/sass/sass/issues/139) and libsass will probably also follow. So I was hoping this would already be resolved by now :grin:.\n\nIf you are open to ditch Sass, I can also recommend LESS. I know, there are endless debates about Sass vs. LESS and in the end they are always pointless. However, there are two things LESS is actually handling better:\n- It's possible to import other files without including the actual CSS via `@import (reference)`\n- It's possible to rewrite `url()` statements thus enabling modules to just use the actual file path of an image or font without using some helper variable like `$font-path`.\n\nAnd in the end, Sass and LESS are _very_ familiar. Actually, I'm using both in different projects and it's not a big deal.\n. Thx for sharing @kenotron :+1: \n. @MatthewKosloski this issue is not about the ordering of rules, please don't change the topic. I assume that you are using the extract-text-webpack-plugin. In this case, the order of rules dependents on the order of `require()` calls inside your bundle. Follow-up discussion at: https://github.com/webpack/extract-text-webpack-plugin/issues/200#issuecomment-251261145\n. Related performance discussion: https://github.com/webpack-contrib/sass-loader/issues/296#issuecomment-288464857. Why do you prepend `.` before `button`? Just write `@import 'button'`  or `@import '_button.scss'`\n. Mhmm the latest should be fine. Can anyone confirm this?\n. @jcreamer898 you should not need to adjust `process.env.UV_THREADPOOL_SIZE`. The sass-loader is queuing its tasks so that node-sass is not blocking all threads (until node-sass has resolved this).\n. Anyone still having problems?\n. Could you guys check if the branch `fix/threadpool-issue` fixes this problem while using the default `process.env.UV_THREADPOOL_SIZE`?\n. That's nice :+1: \n\nCould anyone reading this issue also check out the branch? I would like to pull it on the master, but I don't have a test setup that demonstrates the problem.\n. Yep, I've messed up this release by forgetting to move `object-assign` from `devDependencies` to `dependencies`. Just to test it you need to install `object-assign` manually.\n\nThx for trying it out :+1: \n. @lencioni your assumptions are right. Everything starting with `~` should be read from your `modulesDirectories`, usually `node_modules`.\n\nHowever, if you just write\n\n``` javascript\n@import '~config';\n```\n\nwebpack will read `config`'s `package.json` to get the main entry point which is usually a JS-file. Have you tried importing specific stuff by writing\n\n``` javascript\n@import '~config/variables.scss';\n```\n\n?\n\n[There are tests](https://github.com/jtangelder/sass-loader/blob/38edd960b8ca2eb3421b24f40e77a1b96e16751a/test/scss/imports.scss#L6) for importing modules from paths starting with `~` which TravisCI also executes on Linux @mako-taco.\n\nCould you come up with a small test repository which demonstrates the actual problem?\n. @ceram1 Yep, I'm sorry. I was wrong. Travis CI is not activated because I'm not the owner of the repo. I use it in all my projects.\n\nConcerning your feedback:\n`'node_modules/react-toolbox/lib/_colors'` is another file than `'~react-toolbox/lib/commons'` :grin:. I'm pretty sure that this error is somehow related to your specific setup.\n. Could you provide an example?\n. [`resolve.modulesDirectories`](http://webpack.github.io/docs/configuration.html#resolve-modulesdirectories) should only contain folder names, no actual paths. Webpack applies node's resolving algorithm with these folder names. It walks up the directories and tries each folder name:\n\n```\na/b/node_modules\na/node_modules\nnode_modules\n```\n\nWhat you probably want is [`resolve.root`](http://webpack.github.io/docs/configuration.html#resolve-root) (which takes absolute paths!).\n\nBtw: That's why `bower_components` should be listed as `resolve.root` instead of `modulesDirectories`\n\nPlease set up a small example repo (using `resolve.root`) which demonstrates the problem. It makes debugging at lot of easier for me and it may help you pinning down the problem, if it's in your configuration.\n. You're welcome :grin: \n. The weird paths are created by the css-loader. Take a look at my [PR](webpack/css-loader#154) for further information.\n. https://github.com/webpack/css-loader/pull/154\n. @jezstephens \n\n> It screws up the line numbers in Webpack's error messages by inserting additional lines into the input.\n\nThis should be reported to the import-glob-loader\n\n> When used with no file extension it includes all files, so if you have Sass files mixed with other non-CSS files it's necessary to say foo/**/*.scss. This could be argued as a good thing, but I think it'd be more intuitive if foo/**/\\* was equivalent to foo/*_/_.scss\n\nYes, I think, it is a good thing to add the file extension explicitly.\n\n> So perhaps sass-loader could support Sass-specific globbing a bit better than import-glob-loader.\n\nI think the import-glob-loader is doing a pretty decent job here. I don't want to add this feature to the sass-loader because the import mechanism is [already pretty complicated](https://github.com/jtangelder/sass-loader/blob/a6cc46f3176499c013ee0d5b565f5392f338a8d9/index.js#L308-L363). Once we started to implement it here, we are responsible to maintain that feature.\n. I had this issue several times (webpack/less-loader#40 peerigon/markdown-loader#8). While passing the options via query parameters is cumbersome, I don't think that it would be a good idea to pass-in _all_ options via the webpack config. It seems straight-forward, but the full module path + query string is used as cache id afaik. Hence, two require calls with different loader configs are recognized to be different.\n\nWhat do you think about it @sokra?\n. @sanniassin anyway, thx for your PR. I'm willing to merge this, but could you also add tests please?\n. Nevermind... I'll do it, because we need a better setup for these kind of tests.\n. @dtothefp It is necessary for options that can not be stringified using `JSON.stringify`\n. Shipped with `3.1.0`. New preferred way for passing options is now via a property on your webpack config. See https://github.com/jtangelder/sass-loader#sass-options\n. Thank you.\n\nThe last paragraph is implied by using the extract-text-webpack-plugin, so I'll remove it.\n. Sass is not downloading files afaik. So when you import an http url you won't be able to extend classes that are defined in these remote files. These imports will be resolved on runtime inside the browser.\n. Yep, #152 solves it. I just merged the PR, but we need tests :grinning:.\n. #152 shipped with `3.1.0`. New preferred way for passing options is now via a property on your webpack config. See https://github.com/jtangelder/sass-loader#sass-options\n. @kgwinnup Your `webpack.config` has a dependency which depends on a `scss` file.\n@typpo Thanks for pointing that out. Probably a common problem when creating isomorphic/universaljs apps.\n. Makes sense. Thx for pointing it out!\n. Will be shipped with #152, I just need to write tests for it.\n. Webpack puts _all_ required files into one big js file by default. If you want to load code (like styles) on demand, you need to create a [code split point](http://webpack.github.io/docs/code-splitting.html) by using an async require (will be `System.import` in Webpack 2).\n\nThis issue is not a sass-loader thing, though. \n. I'm using node 4.1 on OSX and could not observe these kind of errors. Could you provide a minimal test setup that reproduces the error? Otherwise I doubt that this repository is the right location for this issue.\n. Closing this for now because there is no example and it's probably not the right repository.\n. Do you have `node-sass` as `dependency` of your project? Since npm@3, `peerDependencies` won't be installed automatically anymore.\n. Thx for sharing this!\n. Mhmm you should be \"allowed\" to install that beta... is this a npm issue?\n. @Phoenixmatrix Thx for informing me :+1: \n. It's not a bug, @jsg2021 is mostly right. Though webpack is doing the file resolving, the output is kind of monolithic. That means that once Sass is done, webpack just receives one big blob of CSS without any trace of modules.\n\nSo, there are basically three ways to structure your styles:\n\n## 1. Have one monolithic main.scss\n\nAll the imports are done inside the `main.scss`.\n\n### Pros:\n- No code duplication if done right\n- You have complete control about the order how things are initialized\n\n### Cons:\n- Can't be separated into vendor chunks or similiar\n- No incremental rebuilds because the whole stylesheet needs to be rebuild just for a single change\n\n## 2. Have on main.scss and on vendor.scss\n\nSimiliar to #1 but with manually separating vendor stuff from your application stuff.\n\n### Pros:\n- Two different chunks that can be cached separately\n- You have still complete control about the order how things are initialized\n\n### Cons:\n- Rebuilds are a bit faster, but still take some time\n- Referencing/importing stuff from vendor styles into main.scss may duplicate code\n\n## 3. Truely modular styles\n\nEvery component has its own, independent Sass build. In order to avoid code duplication, you need to separate your Sass modules between modules which produce CSS code and modules which just provide variables and functionality like mixins. But imho that's best practice anyway.\n\n### Pros:\n- Fast rebuilds\n- Styles are loaded \"on demand\"\n\n### Cons:\n- The initial build takes much longer because each component spawns its own Sass process\n- Potential code duplication (which is usually not problem when using gzip)\n- Using the ExtractTextWebpackPlugin is counterproductive\n. That sounds pretty impossible to me. It's also not clear what problem you're trying to solve. Why should it be faster? What is actually slow?\n. > using a single Sass process could theoretically improve that.\n\nYep, but when using a single Sass process, modules would influence each other, yielding to unexpected output.\n. Thx for informing us.\n\nBut I don't think that we should merge this. It forces all users, who are not using node 4, to update their `peerDependency`. On the other hand, node 4 users are able to specify `node-sass^3.3.3` as dependency and still use the current sass-loader, aren't they?\n. Shipped as breaking change with sass-loader `3.0.0`\n. Sorry, specifying `node-sass` as `peerDependency` is far more useful for most users.\n\nSince `node-sass`/`libsass` processes _your files_, _you_ should be able to specify the exact version you need. The sass-loader is just using an API which is not affected by most changes.\n\nIn other words: Your API surface to node-sass is much bigger than ours. Otherwise we would have tons of issues and PRs like \"Update node-sass to x.y.z plz\"\n. > I'm using npm3 now and it doesn't install node-sass automatically.\n\nI know and that's good. node-sass should be the dependency of _your_ project.\n\n> I could give you a ton of projects that do it.\n\nIt's true, people are handling this differently. And while there are projects where your suggested approach is very reasonable (like for the [phantomjs](https://www.npmjs.com/package/phantomjs)-package for example), I don't think that it fits here.\n\nThe sass-loader is a link between webpack and node-sass. Following node-sass versions would ignore the fact that we also have to stay up-to-date with webpack: So, which version number should we follow then? Imho, the most robust solution to this problem is to have an own version number and to specify both as `peerDependency`.\n\nBut you're right. I forgot to add `webpack` as `peerDependency`. :grin: \n. I would love to hear alternatives from @iarna or @othiym23, but I guess there no new insights than already discussed at npm/npm#5080 npm/npm#6565 npm/npm#7495...\n. Thx for reporting this. This is probably caused by the \"funny\" [file resolver](https://github.com/jtangelder/sass-loader/blob/a6cc46f3176499c013ee0d5b565f5392f338a8d9/index.js#L344-L350).\n. Shipped with `3.1.0`\n. Self-solving issues are the best :+1: \n. Thx. Since I've also changed the README, I added the change manually.\n. Thx for your PR :+1: \n\nI'm definitely planing to merge this, but it would be good if we'd follow the official recommendation for [programmable objects in query parameters](http://webpack.github.io/docs/how-to-write-a-loader.html#programmable-objects-as-query-option). The sass-loader should not try to `require()` the file, but just read it from the webpack config.\n\nThis is also related to #152 \n. Shipped with `3.1.0`. New preferred way for passing options is now via a property on your webpack config. See https://github.com/jtangelder/sass-loader#sass-options\n. Acccording to the [node-sass docs](https://github.com/sass/node-sass#importer--v200---experimental), you should return `sass.NULL` if your custom importer doesn't want to handle the file. This passes the file request on to the next importer in the array.\n. If you don't return `sass.NULL` in cases you don't want to resolve the file, all webpack specific resolving won't be applied.\n. Could you please create a minimal example that demonstrates the problem? I'm using these comments all the time and there are no problems.\n. I'd appreciate an example :grin:. Furthermore, it's likely not an issue with sass-loader itself, but with node-sass or libsass.\n. We're using these comments [in our tests](https://github.com/jtangelder/sass-loader/blob/fee3593e5f8658b4afd1f01bc8308718ca0fd439/test/scss/imports.scss#L5), so it's not a generic issue. Please provide examples.\n. @djfm thanks for informing me\n@geekingfrog @ajsharp does that solve your issue?\n. In your configuration, the postcss-loader is executed _before_ the sass-loader. Maybe PostCSS isn't able to parse SASS? :grin: \n. Ok, I think we can close this one?\n. `Header.scss` mixes CSS modules _and_ tries to import stuff from Sass. This is not possible. Every import from a CSS file will _not_ be compiled with the webpack loader pipeline. You can only import CSS files. Please stick to Sass _or_ CSS modules. \n. Just put `@import 'common/variables'` at the beginning of your `main.scss` and everything should be fine.\n\nHowever, I don't get why you would like to have implicit imports/globals. Modular,re-usable code declares its dependencies explicitly.\n. Thx for reporting this.\n\nCould you come up with a minimal test example that reproduces the error?\n. Just remove stuff step by step until it's working again :grin: \n. It looks like `GLOBBY.scss` is not consumed by the sass-loader. This error happens when webpack tries to parse the file as JavaScript. And `$white: \"white\";` is valid JavaScript :grin:\n\nHave you excluded the sass-loader for `GLOBBY.scss`?\n. The sass-loader does not resolve `url()` statements in your styles. You should chain the css-loader as described in the README.\n\nAlso take a look at the section about `url()` in the README.\n. I don't know. Why aren't you allowed to use the css-loader with Angular 2?\n. You could try to use the [extract-loader](https://github.com/peerigon/extract-loader), it evaluates a CommonJS module to generate a string. Chain the loaders like this:\n\n```\n  {\n    test: /\\.scss$/,\n    loaders: ['extract-loader', 'css-loader', 'sass-loader']\n  },\n```\n. That sounds like the sass-loader is not applied. The css-loader should not see any Sass imports.\n\nAlso, the error would be helpful.\n. Thx for sharing.\n. The build time heavily depends on how your styles are structured. I've described [three different ways how to structure your styles](https://github.com/jtangelder/sass-loader/issues/164#issuecomment-150947538).\n\n> I suspect that this is because I'm using the ExtractTextPlugin\n\nI don't think so. The ExtractTextPlugin just \"extracts\" the CSS from the bundle (which is stored in a JS string). I don't see why that should take so much time.\n\n> Can the sass-loader be configured to pre-fetch all scss and compile them async with node-sass while the rest of the compilation is working\n\nThe sass-loader is async, it does not block webpack. However, the sass-loader does not know your scss files until webpack encounters a `require()` and invokes the sass-loader.\n\nYou could modify the sass-loader in your project to track when the sass-loader is actually invoked and how much time it spends on waiting for node-sass to compile. Then you could compare these figures against \"vanilla\" node-sass compilations. If they're almost identical, it's node-sass which takes so much time...\n. Thx @Phoenixmatrix for your insights :+1:\n\nIf the new css-loader is so much slower, it should probably be addressed as issue. Though CSS modules are a nice feature, it should not degrade the performance of those who don't want to use it.\n\n> If you do not need url resolution (common in development)\n\nI don't get that... For me, url resolution is one of the reasons I would like to compile my styles via Webpack. And why would you like to have url resolution in production when you don't use it in development?\n. Closing this in favor of #296 \r\nI also did some profiling: https://github.com/webpack-contrib/sass-loader/issues/296#issuecomment-288464857. Thx for your PR.\n\nI understand your motivation, but the style- and css-loader are not essential to use the sass-loader. It depends on what you are trying to achieve. It may be perfectly fine for people to use the sass-loader just with the css-loader or even just with the raw-loader.\n\nSince most people will use it in conjunction with the style- and the css-loader, they are mentioned just a few lines below your changes.\n. I'm sorry. `object-assign` was in `devDependencies` :(. Fixed with `3.1.1`\n. Thx. It is already shipped with `3.1.1` :grin: \n. Thx for the pull-request. Have you executed the tests after updating it?\n\nI get \n\n```\nError: It's not clear which file to import for '@import \"../node_modules/order/1/module\"'.\nCandidates:\n  ../node_modules/order/1/_module.scss\n  ../node_modules/order/1/_module.sass\n  ../node_modules/order/1/_module.css\n  ../node_modules/order/1/module.scss\n  ../node_modules/order/1/module.sass\n  ../node_modules/order/1/module.css\nPlease delete or rename all but one of these files.\n```\n\nwhich is a good thing, because it seems like they have finally decided to throw an error in these cases.\n. Haha, that's exactly what I did yesterday evening :grinning:.\n\nAnyway, thx. I'll pull in your commits. But now I need to remove the \"funny resolving algorithm\".\n. Thx @chicoxyzzy. I'll merge it as soon as I've found some time.\n\n@ChrisCinelli `node-sass` is a `peerDependency`. You should be able to bump the version in your project independently (as long as it is not a major version bump). That's why we've made it a `peerDependency`\n. Shipped with `3.1.2`\n. I don't get the question but I doubt that this is actually a bug of sass-loader.\n. > But I noticed bundle files generated (not source map) are larger than bundle files generated without sourceMap like below. (40 to 50 percent larger, 500 KB becomes 900 KB)\n\nThat is correct, because the source map contains the original source code (stored in the `contents` property). This is because then you don't need to map source map paths to your file system in your developer tools. They just work.\n\nIf you do not want to include the original source code (e.g. because you want to use source maps in production), you should disable the [`sourceMapContents`](https://github.com/sass/node-sass#sourcemapcontents)-flag. In this case, the source map will only contain mapping information.\n\nWe should mention that in the README, though...\n. Starting with [sass-loader `3.2.0`](https://github.com/jtangelder/sass-loader/releases/tag/v3.2.0), you don't need to set it explicitly. It will derive it from the file name.\n. Do you use the `.sass` file extension? Can you please provide a small test case that demonstrates the problem?. Thx! Shipped with `3.1.2`\n. Thank you for your pull-request.\n\nCould you add a small paragraph to the README describing the feature (e.g. with a use-case)?\n. We could publish sass-loader's internal functions to the context so that you can use the same functions.\n. Mhmm I'm not sure about this feature anymore. It provides access to an API where things might break easily. I don't want to make a major version bump when I'm refactoring internal functions.\n. Thx for pointing out theo. It looks very interesting (although I'm a little disappointed that it's a gulp plugin \u2013 it could also be just a small module without gulp dependency).\n\nI totally see the benefit. Maybe we could provide the loaderContext to the custom importer, so that you can write your own logic...\n. @mrfr0g thank you for your pull request and sorry for the response time, I haven't found the time to review it yet.\n\nWhat problem does this PR actually solve? I think it's a good thing to declare dependencies explicitly. We had global variables in the browser for a long time and I don't want to go back to this anymore. I think that a component should be truly self-contained. It should not expect global variables to be defined.\n. > I believe that I can accomplish the same result using the data option resolved in #216, or as @jsg2021 suggested, the baggage loader.\n\nAwesome :+1:  :grinning: \n. Why are absolute paths in source maps useful?\n. Thx for your pull-request.\n\nHowever, I don't understand why this is necessary. We already have [a test case which covers this use-case](https://github.com/jtangelder/sass-loader/blob/b06b6be3fa0b61671448b5933d5df082f32672a6/test/scss/import-other-style.scss#L7). Why doesn't it work for you?\nCould you add a test that demonstrates the problem?\n. Any progress on this?\n. @jerrysu is `module` a dependency that is referenced in your `package.json`? See also https://github.com/nightgrey/web-boilerplate/pull/1\n. What is a pancake in this context? :grin:\n. Since it's unclear what this actually about, I'll close it for now. Could you create a small example project the demonstrates the problem? I assume that this is not related to the sass-loader, so it would be good to start with vanilla CSS.\n. Thx :+1: \n. Seems reasonable, thx :+1: \n. Shipped with `v3.2.0`\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. Thx for sharing this @timaschew \n. Seems to be a hot topic #215 #195 :grinning: \n\nAnyway, thx! :+1: \n. Thx for sharing\n. This seems like a limitation of node-sass. We're using node-sass' `data` option to pass Sass source code to node-sass. In this case, node-sass flags the data as `stdin`.\n\nWe would need to create a temporary file which we pass to node-sass. But this seems like an unnecessary detour to me.\n. Yes :grin: \n\nThat won't work, because the loader's `test` regex matches only scss-files. Why do you want to include that option in the README anyway? It's described in [node-sass's](https://github.com/sass/node-sass) readme.\n. Ok, now I do understand you.\n\nI used to have a small chapter about `.sass`-files, but then I read somewhere that it is deprecated (which is actually not true). I will re-add that small chapter.\n\nHowever, I encourage you to learn more about node-sass and the underlying dependencies of all webpack loaders. Because loaders are often just connectors between webpack and another tool. So it's not sufficient to just understand the loader.\n\nOne thing, for instance, what people need to know is that node-sass is build on libsass, which is a C-port of the famous ruby library. It is _not_ actually [Rubysass](http://sass-lang.com/). However, it tries to stick to it as close as possible.\n. I think, #196 solves this \"issue\" as well\n. Seems like you have `css` module inside your `node_modules`. In this case, you should not use the convenient way of just writing `loaders: [\"style\", \"css\", \"sass\"]` because in this case, webpack first tries to resolve `style`, `css`, `sass` inside `node_modules`. After that, it appends the `-loader` postfix. So in your case, it tries to use the `css` module as `css-loader`.\n\nI think it's best practice to always write the full name, like `style-loader`, `css-loader`, `sass-loader`\n. Sorry, for me it's not clear what you are trying to achieve... why should the sass-loader also output sass code?\n. I think, the [multi-loader](https://www.npmjs.com/package/multi-loader) was the missing piece :)\n. Please provide a small example project to demonstrate the issue. You can just commit the `node_modules` folder to simulate different packages.\n. @stigmat4j What language is this? Is `:local` legal in Sass?\n\n@storrdev @rickhanlonii @bipinshashi Looks like you were trying to import stylesheets in node. Maybe you're writing an isomorphic app? I would recommend to compile your node app with webpack too (using the [`node` target option](http://webpack.github.io/docs/configuration.html#target))\n. There are a lot of features from node-sass/libsass that one should take a look at. We just pipe all the options through, so I only added notes on options that might be webpack specific. If you feel like this is important, please create a PR.\n. > The child partial here would be able to access any variables exposed by the config file, but in sass-loader land, each stylesheet is treated as its own entity, meaning you can't do a global import.\n\nThis is not true. You can do global imports just like in regular sass. Please provide a _minimal_ test example if you think this is a bug.\n. Yep.\n\nHowever, I don't recommend this kind of project structure. In my experience, explicit dependencies are always better than implicit ones.\n. > but its also silly to repeat yourself in every file of your project\n\nI don't think so. We all agreed that it's not good to use globals in JavaScript, why don't we adhere to the same principle in our stylesheets? It's a good thing to be explicit about the dependencies you are using. This way you always only import stuff that you are actual using.\n. > As far as the discussion above about importing variables or mixins into every file, I'm finding that if I import a sass file in three different sass modules, webpack is bundling three copies of that imported file. Importing modules in this manner appears to me to be pretty detrimental.\r\n\r\nThat's how Sass works by design. It's a compiler and every module is a distinct compilation. Usually, I split up my Sass modules in modules that are like libraries (they don't produce CSS code when imported) and modules that are like entry files. These are the Sass files that actually produce CSS code.. Thx for also writing down the solution for your case. I don't think that we should add a note on isomorphic apps since this is not related to the sass-loader at all.\n. The sass-loader works with webpack 2. I've added it to `peerDepedencies` starting with `3.2.1`.\n. Thx :+1: \n. Sounds good :+1:\n@mrfr0g: Is this a solution for #191?\n. Shipped with `v3.2.0`\n. My advice:\r\n\r\nSeparate your Sass files into library files and application files. This means that you have Sass files that will output CSS (your application files) and you have Sass files that provide variables and mixins for them, but don't produce any output. Then you write your application files in a modular way without implicit dependencies, but explicit ones which means that you can compile any application file and it will work without producing duplicate CSS.. Using webpack 1: If you add the [`UglifyJsPlugin`](http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin) to your webpack config, it will switch all loaders into minimize mode.\nUsing webpack 2: Now you are able to switch only specific loaders into minimize mode by using the LoaderOptionsPlugin.\n\nRelated discussion: https://github.com/webpack/webpack/issues/283\n. @janjon @elektronik2k5 Please don't use the `modules_directories` option for this. `resolve.root` is better for this purpose. `module_directories` will traverse all folders up to `/` similar like node does with `node_modules`.\n. This sounds like an issue in node-sass. We just get the complete source map from node-sass.\n. Does [this PR](https://github.com/jtangelder/sass-loader/pull/250) fix your problem (install sass-loader `3.2.2`)?\n. Should be fixed with #374. I know that the paths inside the source-map may be broken depending on your setup. Haven't found the time to look into it so far.\n\nHowever, [I've merged a PR which resolved some issues with it](https://github.com/jtangelder/sass-loader/pull/250). Maybe you could try sass-loader `3.2.2` and check if the problem is still there.\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. I think it makes sense to add the `node_modules` folder to node-sass' `includePath` option. After that, this code should work.\n. Thx for pointing out :+1: \n. There is no hint that this is related to the sass-loader at all. Try to isolate it and create a small example project. This makes debugging a lot easier. I don't know react-simpletabs so I can't help you here.\n. What about writing a [custom importer](https://github.com/sass/node-sass#importer--v200---experimental)?\n. Sorry, but we won't implement this as the resolution logic is already complicated and slow enough. See also #307 . Shipped with `3.2.1`\n. Thx. Shipped with `3.2.1`\n. That looks like a good idea! Can you create a PR + a small test-case for it? Just mention me in my PR and I will merge it asap.\n. Node-sass is a peer dependency. You should be able to specify any version in the range of `^3.4.2`, so I don't really see the point in merging this.\n\nAnyway, I've updated the dev dependencies to the latest node-sass (`3.8.0`) and everything's working :+1: \n. Starting with npm@3, `peerDependencies` won't be installed automatically anymore, so it makes sense to list it as dev dependency.\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. What sass-loader folder are you talking about?\n. You can try webpack's [`resolve.root`](http://webpack.github.io/docs/configuration.html#resolve-root) option. Just set the dist folder as `resolve.root` and you should be able to just write `url(images/foo.jpg)`.\n\nI won't add any environment variables because this makes everything even a lot more hackier. The `data` option is already hacky enough.\n. Close?\n. If this a bug, please provide a small test example. I have too many requests so I won't prioritize this.\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. I've never seen an exclamation mark in a path my whole life ^^\n. If you want to provide an example, go ahead and create a PR\n. We are returning `file` instead of `contents` because of current source map file paths if I remember correctly. I'm not sure we can change that so easily.\n. Thx! :+1: \n\nI probably need to change this again because a loader [should not access webpack options](https://github.com/webpack/webpack/issues/2684#issuecomment-228266412)\n. Shipped as `3.2.2`\n. Ok, I'll flag this version as broken, publish a new major release and then we can sort it out. No stress! \ud83d\udc4d \n\n@bholloway would you be open to make a PR to the sass-loader so that we have tests to check against the resolve-url-loader? Seems like more people are using it, so it would be nice to ensure compatibility. It was not obvious for me that this could be breaking change at all. If you do the PR, please mention me so I can merge it asap.\n. Shipped as `4.0.0`\n. [I've already published `3.2.3` which is identical to `3.2.1`](https://github.com/jtangelder/sass-loader/issues/254#issuecomment-228737811).\n. Thx. Shipped as #233 with `3.2.1`\n. Please use Stackoverflow for questions using the webpack tag. This way, a much larger user-base is able to benefit from the answer and there are more people how actually answer it. If this is a bug report, please provide a small example project.\n. Yes, this was an unintentional breaking change with `3.2.2` (see #250). I've deprecated this version and published this change with `4.0.0`.\n\n@bholloway and I will sort it out, but he is currently on vacation, so that may take a while.\n. That's correct, `3.2.2` **and** `4.0.0` contain the breaking commit. However, `3.2.2` was deprecated so I would expect that npm won't install it when specifying `^3.2.0` (but I don't know that for sure).\n. @judewang thanks for pointing out.\n\nNow I've published `sass-loader@3.2.3` which is identical to `3.2.1`. However, when you run `npm i sass-loader`, you will get `4.0.0` because it's still tagged as `latest`.\n. `npm unpublish` does only work if there are no dependent packages. Furthermore, if people happened to install `3.2.2` with `--save-dev`, it won't be available anymore. So, this was most unobtrusive way imho.\n. I agree, but unpublish would have been too late for you anyway. So I think the current solution is the best in all cases.\n. When using the query syntax, you must stick to regular URL escaping. So the official way would be:\n\n``` javascript\n`sass-loader?includePaths[]=${encodeURIComponent(path.resolve(__dirname, './styles'))}`\n```\n\nSince this is stupid I always recommend to use `JSON.stringify()`\n\n``` javascript\n`sass-loader?${JSON.stringify({\n    compressed: true\n    includePaths: [ ... ]\n})}`\n```\n\nWe know that configuring loaders is very complicated \ud83d\ude1e . We're currently working on that.\n. ``` scss\n@import \"./other/file.scss\";\n```\n. Please don't file an issue for this kind of questions. Github issues are used to track bugs. If you need advice, please ask a question on stack overflow.\n. You can also take a look at [our tests](https://github.com/jtangelder/sass-loader/blob/master/test/scss/imports.scss). We have a lot of tests that check if importing files is working correctly.\n. I doubt that this is an issue of the sass-loader. Do you have a stack trace or anything? We also need a **minimal** example that demonstrates the error.\n. Thx for the PR. I currently have not sufficient rights to activate travis CI for this repo, but I've written @jtangelder a message.\n. I think @jtangelder 's PR is sufficient for us. Thx anyway @amilajack \ud83d\udc4d \n. This sounds very complicated and I don't think that it should be that way. My advice:\n- Don't serve your HTML over `file://`. There are a lot of cases where things behave differently and you will run in more issues than this. Do yourself a favor and serve your stuff over an HTTP server.\n- If you can't serve your stuff over HTTP by all means, you should **not** use the webpack-dev-server for development. Your development environment should be as close as possible to the production environment and `file://` vs `http://` is a **huge** difference.\n- If you **really really** need to use the `file://` protocol: Why are you using webpack? Just split your stuff and put it somewhere on the disk. Webpack is a bundler and bundler put a lot of stuff into a few files to serve it efficiently over **HTTP**. If you don't have a roundtrip, I doubt that you need webpack at all.\n- My last advice: Maybe the [`<base>`](https://developer.mozilla.org/en/docs/Web/HTML/Element/base) tag can help you.\n. Please file a question on stack overflow and include some example code. This way other developers may profit from the answer and we're actually able to answer it. There could be hundred of causes for this kind of error.\n. But I'm pretty sure that inside your folder `C:\\Users\\che\nnhao\\Desktop\\code\\mean\\src` there is no `css/master.scss` \ud83d\ude09 \n. Funnily, I've dealed with the same problem yesterday and that's how I tackled it. First you need a `export-once` function:\n\n``` sass\n$export-once-names: ();\n\n@function export-once($name) {\n    @if index($export-once-names, $name) {\n        @return false;\n    }\n    $export-once-names: append($export-once-names, $name) !global;\n    @return true;\n}\n```\n\nYou should use that function for all sass code that actually outputs CSS to ensure that no duplicates are added to the final stylesheet.\n\nThan you have a mixin to create the `font-face` declaration. I've removed some code that might be implementation dependent:\n\n``` sass\n@mixin font-face($family, $weight: regular, $style: normal, $stretch: normal) {\n\n    @if export-once(\"font-face-#{$family}-#{$weight}-#{$style}-#{$stretch}\") {\n        // make sure the declarations will not be nested\n        @at-root {\n            @font-face {\n                ...\n            }\n        }\n    }\n\n}\n```\n\nThen you have a mixin which applies a `font-family` and all its respective values to an element\n\n``` sass\n@mixin font-helvetica() {\n    @include font-face(\"Helvetica Neue\");\n\n    font-family: \"Helvetica Neue\", sans-serif;\n    font-weight: regular;\n    font-style: normal;\n    font-stretch: normal;\n}\n\n@mixin font-helvetica-bold() {\n    @include font-face(\"Helvetica Neue\", $weight: bold);\n\n    font-family: \"Helvetica Neue\", sans-serif;\n    font-weight: bold;\n    font-style: normal;\n    font-stretch: normal;\n}\n```\n\nNow everytime you want to use a font, you just have to include the given mixin and it will add the font-face declaration once to the stylesheet. This way you never include fonts that you don't use.\n. Sorry, I don't know. The sass-loader repository is definitely not the right place to discuss these things. But guessing from @xzyfer I think you do need to upgrade to 3.8 (which was never a problem in my projects).\n. It would be very helpful if you could setup a small example project which I can clone and run. Your description is still a bit vague.\n. Please provide a **minimal** test that demonstrates the problem. I'm using the webpack-dev-server in my setup and everything is working as expected.\n. Thx for your PR. I'm currently on vacation, so please be patient. I'll take a look in the end of August :)\n\n> Am 11.08.2016 um 00:13 schrieb Chris Fitzgerald notifications@github.com:\n> \n> @jhnns, this should fix custom sass importers by passing resourcePath instead of stdin into the prev argument.\n> \n> Fixes #234\n> \n> You can view, comment on, or merge this pull request online at:\n> \n>   https://github.com/jtangelder/sass-loader/pull/267\n> \n> Commit Summary\n> \n> Use resoucePath for custom importers\n> File Changes\n> \n> M index.js (8)\n> M test/tools/customImporter.js (3)\n> Patch Links:\n> \n> https://github.com/jtangelder/sass-loader/pull/267.patch\n> https://github.com/jtangelder/sass-loader/pull/267.diff\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n. Awesome, that looks good. Thanks :)\n. Shipped as `4.0.1`\n. Sorry, there is not enough information to reproduce this. Please provide a minimal test repository that demonstrates the problem so I can check that out. Try to remove as much stuff as possible since it helps tracking down the problem.. Is this problem still present with node-sass 4?. Since I can't reproduce it in our tests and it does not occur in my projects, I'll close it for now.. CSS source maps can only work if every loader in the loader chain passes them through. That's necessary because webpack, only supports JS source maps out of the box.\r\n\r\n@woohling Do you experience the same issue when you use this loader chain:\r\n`style-loader?sourceMap!css-loader?sourceMap!sass?sourceMap&outputStyle=expanded&sourceMapContents=true'`\r\n? . I can confirm the problem. You can test that with https://github.com/jtangelder/sass-loader/pull/374/commits/ce198d169d4a1066d214d40ba88fb0b5029c0536 and `npm run test-source-map`.\r\n\r\nUnfortunately, I don't know how to fix this since we don't actually mess with the source maps.. We [receive the source maps directly from node-sass](https://github.com/jtangelder/sass-loader/blob/5fe403017730d4d44c0a95d215af086dc6afac6c/lib/loader.js#L55-L66). But since the source maps are also processed by the css-loader and other loaders on the way, it's hard to say what's going on. Maybe they are incompatible?\r\n\r\nIt would be good if you could investigate this. Build the smallest project possible that reproduces the error and inspect the source maps in the sass-loader and then in the css-loader. You can use the style-loader to apply the styles to the DOM. The style-loader [uses a BLOB url](https://github.com/webpack-contrib/style-loader/blob/9dc45a6dee16553a64071031d18feb1562df86a2/addStyles.js#L151) to make the source maps available to the browser. It does not change the source maps anymore, so that should be fine.. Thx for pointing it out. I took the essential parts and created a new PR #281\n. The segmentation fault is because one of the assertions inside the custom importer did not work. Unfortunately, node-sass is not reporting these errors to node.\n. Thx for your contribution.\n\nThe style-loader was never part of webpack core and is not required to use this library. You could also import the CSS as JS string and do something else with it. Especially when using the sass-loader in conjunction with the [extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin), the style-loader **must not** be in your loader chain.\n. The `LoaderOptionsPlugin` can be used to override the webpack options that can be accessed inside the loader via `this.options`. If you do that, you need to provide all the information the loader is reading from this object.\r\n\r\nUsually, you don't need to do that. It is just for compatibility reasons to give you the full control. In all regular cases, you can just use loader options (they are also called loader queries) in your loader configuration. The loader will read these options from `this.query` (unfortunate naming).. @vteivans as previously pointed out: If you're using the `LoaderOptionsPlugin` you also need to specify a context:\r\n\r\n```js\r\n    new LoaderOptionsPlugin({\r\n       context: config.context\r\n    })\r\n```\r\n\r\nBut you should not need the `LoaderOptionsPlugin`.. Sorry, this issue is too vague. There are a lot of tests that demonstrate that imports are handled correctly.. Thanks for the PR, but I'll try to get rid of `context` entirely. See #313 . When you write\n\n```\n@import '~@technologyadvice/radiant';\n```\n\nwebpack will search at `./node_modules/@technologyadvice/radiant` for the module \u2013 exactly like dependencies in node are resolved. What were you expecting?\n. What does the `main` field of the radiant's `package.json` say?\n. I assume that this is a webpack problem because the sass-loader is not resolving it. Could you create a minimal example that reproduces the error? Just commit a small example node_modules folder with the folder structure. Try to remove as much as possible.. This has nothing to do with the sass-loader\n. Related to: #307 . Based on [this discussion](https://github.com/yibn2008/fast-sass-loader/issues/3), I started profiling [an example project](https://github.com/yibn2008/fast-sass-loader/tree/95f5051a37d49e326fa43b613730f807d743f979/perf) yesterday and had some interesting insights. First of all, the sass-loader performance (49.2s) is completely unacceptable compared to fast-sass-loader (5.29s) or even bare node-sass (2.25s) from the command line. All three toolchains compile the same source code and produce similar output. We can expect some overhead coming from webpack since we need to initialize it, set up the loader pipeline, etc., but even the fast-sass-loader is unacceptable slow compared to bare node-sass in my opinion.\r\n\r\n## Overview\r\n\r\nSo let's take a look at the flame graphs:\r\n\r\n![sass-loader-overview](https://cloud.githubusercontent.com/assets/781746/24209033/6c5178ca-0f25-11e7-9124-632aa632aaca.jpg)\r\n\r\nFirst of all, as you can see, **node-sass** is spending most of the time outside of Node.js which is what we expected, since the hard work is done by Libsass.\r\n\r\nNow, let's take a look at both sass-loaders. The execution can roughly be divided into five phases (indicated as black boxes in the graph) that I will discuss in detail later:\r\n\r\n1. webpack initialization\r\n2. first execution sass-loader\r\n3. first execution css-loader\r\n4. second execution sass-loader (this block is not visible in the fast-sass-loader graph, reasons below)\r\n5. second execution css-loader\r\n\r\nSo, the **first surprise** here is that we have two separate compilations going on. This is due to the extract-text-webpack-plugin which initiates a child compilation. Tbh, I'm not sure why this is necessary at all. @sokra can give us more insights here.\r\n\r\nThe **second surprise** is, that the second compilation doesn't use the cache from the first compilation. In the sass-loader graph, you can clearly see that the second pass takes almost exactly the same amount of time. This *could* be improved a little bit because the sass-loader is currently not using webpack's fs cache, but that would only reduce the second sass-loader execution time (4.), which is not where most of the time is spent.\r\n\r\nThe most time, however, is spent\u2014and that's the **third surprise**\u2014inside the *css-loader*. You can clearly see that in both graphs. It takes up half of the total time in the fast-sass-loader setup, and even more in the sass-loader setup.\r\n\r\nIt might also be surprising that node-sass and webpack + fast-sass-loader take almost the same amount of time to compile. In the flame graphs, you can clearly see that node-sass finishes almost at the same time where the 2. block of the fast-sass-loader graph ends. However, we need to remember that the fast-sass-loader is deduping all files before compilation, so there's far less to compile.\r\n\r\n---\r\n\r\nNow, let's take a look at all the phases in detail.\r\n\r\n### Phase 1: Webpack initialization & loader execution start\r\n\r\n![sass-loader-phase-1](https://cloud.githubusercontent.com/assets/781746/24209045/7679a5fc-0f25-11e7-9d59-1fb739a64cf2.jpg)\r\n\r\nNo big surprise here: The initialization of both setups takes almost the same amount of time. Differences here are probably due to I/O or general OS flakyness because there is no actual difference between both loaders here.\r\n\r\nYou can clearly see that during the first 1000ms, most of the time is spent requiring modules. That's why webpack almost always takes at least 1s to compile\u2014even with the simplest setup. Maybe we could win something here with lazy requiring ala [lazy-req](https://www.npmjs.com/package/lazy-req).\r\n\r\n### Phase 2: Import resolving & sass compilation (1. compilation)\r\n\r\n![sass-loader-phase-2](https://cloud.githubusercontent.com/assets/781746/24209066/81f20866-0f25-11e7-8260-d52b0859d8d9.jpg)\r\n\r\nNow that looks different!\r\n\r\nFirst, let's look at the **sass-loader**: The sass-loader registers a custom importer and kicks off the compilation. Now, we're essentially waiting for Libsass to call back. You can clearly see that there is a lot of back-and-forth going on with recurring breaks (grey bars) where the process is just sitting and waiting for Libsass. This graph led me to the assumption that Libsass might be doing sequential I/O. Concurrent I/O would look different, I suppose. After all the resolving is done, Libsass is performing the actual compilation and we're just waiting for Libsass to call back. Nothing to optimize here.\r\n\r\nNow, let's look at the **fast-sass-loader**: The fast-sass-loader preparses the source code with regexps for import statements and passes all imports to webpack's resolver. After the import paths have been resolved, the imported files are read from disk via node's `fs` module and then replaced with their import statements. Duplicated imports are simply omitted, only the first occurence gets included. This is way faster than the sass-loader, which shows that webpack's resolver is not the bottleneck. In fact, it's really fast and almost negligible in the graph.\r\n\r\nThe actual Sass compilation is also a lot faster since a lot of imports have been deduped. It's just that Libsass has less to parse.\r\n\r\n### Phase 3: css-loader (1. compilation)\r\n\r\n![sass-loader-phase-3](https://cloud.githubusercontent.com/assets/781746/24209087/8cab8912-0f25-11e7-85fc-36cc5e7a3134.jpg)\r\n\r\nThis phase is the most interesting one because:\r\n\r\n1. it takes up most of the time\r\n2. there is nothing the sass-loader or the fast-sass-loader can do\r\n\r\nThe only difference is that the amount of data is very different. The fast-sass-loader produces a string with `length` `627067`, the sass-loader with `6914854`. This is 11 times longer. And this translates roughly to the amount of time. The css-loader takes 11 times longer processing the output from the sass-loader.\r\n\r\nThere are two things that I found surprising:\r\n\r\n1. Why does the css-loader take so long? In this case, it is only required to translate the CSS into a CommonJS module while transforming all `url()` statements and remaining `@import` into `require()`. To me, this task seems a lot more trivial than the Sass compilation. The funny thing is: We're spending 9.6s just inside [postcss-modules-local-by-default](https://github.com/css-modules/postcss-modules-local-by-default) during the first compilation. In total, we're spending 16.29s there \u2013 and we didn't even ask for CSS modules... And that's just the first postcss plugin. The **thread is completely busy for 13s in the first compilation while processing postcss plugins** without any chance for other tasks. In total: **26s just inside postcss, hogging the CPU**.\r\n\r\n2. Why is postcss busy with generating source maps? We didn't ask for source maps... then I took a look at the css-loader: [This call](https://github.com/webpack-contrib/css-loader/blob/9999b2f69651c24f5cca34567892400d53735c49/lib/processCss.js#L194-L199) applies the `map` option irregardless of an `inputMap`. In fact, `inputMap` is undefined in this case, but we're still telling postcss to generate a map. As an experiment, I set `map: false` and was able to shave off 10s in total\u2014just by setting one flag. It's still crazy that source maps take up 10s. Switching source maps on and off with node-sass makes a difference of 150ms.\r\n\r\n### Phase 4: sass-loader & css-loader (2. compilation)\r\n\r\n![sass-loader-phase-4](https://cloud.githubusercontent.com/assets/781746/24209110/a2e0687e-0f25-11e7-9f55-4da0cd114ca1.jpg)\r\n\r\nThe **sass-loader** performs exactly the same compilation again. No results from the first compilation are re-used.\r\n\r\nThe **fast-sass-loader** skips the second Sass compilation because it uses its own cache. That's a nice shortcut, but this should be fixed in webpack.\r\n\r\nI don't understand why we need a second compilation. And if we need the second one, can't we just skip the first one? This seems redundant.\r\n\r\n---\r\n\r\n## Conclusion\r\n\r\n- We spend 1s just requiring webpack modules and loaders and initializing the loader pipeline. This could possibly be improved with a tool like [lazy-req](https://www.npmjs.com/package/lazy-req).\r\n- The **sass-loader** could be improved by:\r\n    - preparsing and resolving all dependencies. While this might seem like a good idea, there are also problems: 1. The source maps will be incorrect. 2. Errors won't be reported at the correct location. It all boils down to the fact that Libsass doesn't know the original location of the source anymore.\r\n    - using the webpack cache when resolving the file. A custom importer is also allowed to pass the actual source to Libsass. This way, we could use webpack's internal fs caching layer.\r\n    - deduping dependencies. This could be achieved by passing an empty string if the custom importer has resolved a resource for the second time. While this operation is not entirely safe, it will most likely do more good than bad in most cases. I'd say: if the specificity relies on the correct source order, there's a bigger problem.\r\n- The **css-loader** could be improved by:\r\n    - using a simpler pipeline for CSS files that are not CSS modules. This performance penalty is not acceptable.\r\n    - only generating source maps when they are actually requested\r\n    - \"somehow\" improving the postcss pipeline. Blocking the process for 13s is not acceptable, even for CSS modules. I don't know how we can improve that. Maybe postcss is applying the plugins in an unfortunate way?\r\n- The **extract-text-webpack-plugin** could be improved by:\r\n\t- getting rid of the second compilation\r\n\t- or using cached loader results where possible\r\n\r\nHere are both CPU profiles. Load them into your Chrome Developer Tools if you want to take a look for yourself.\r\n\r\n[cpuprofiles.zip](https://github.com/webpack-contrib/sass-loader/files/862130/cpuprofiles.zip)\r\n\r\n---\r\n\r\nThis was bothering me for a long time because I think we can do a lot better than that :grin:. As comparison, the sass-loader setup with css-loader@0.14 takes 10.1s and looks like this:\r\n\r\n![bildschirmfoto 2017-03-22 um 18 13 36](https://cloud.githubusercontent.com/assets/781746/24211211/a1a0fd92-0f2b-11e7-98c5-4a6b024f5302.jpg)\r\n[sass-loader-old-css-loader.cpuprofile.zip](https://github.com/webpack-contrib/sass-loader/files/862266/sass-loader-old-css-loader.cpuprofile.zip)\r\n. As @sokra pointed out: With the `allChunks: true` option...\r\n\r\n```js\r\n    new ExtractTextPlugin({\r\n      filename: '[name].css',\r\n      allChunks: true\r\n    })\r\n```\r\n\r\nthe second compilation can be skipped:\r\n\r\n![bildschirmfoto 2017-03-22 um 18 40 34](https://cloud.githubusercontent.com/assets/781746/24212297/36f6b640-0f2f-11e7-92c4-4ea62ee037af.jpg)\r\n\r\nthus reducing the built time to 23.9s\r\n. Run\r\n\r\n```bash\r\nnode --inspect-brk ./node_modules/.bin/webpack\r\n```\r\n\r\nto start the debugging process. The process will halt at the first line and print a debugger URL. Copy the debugger URL into the Chrome Browser and the developers tools will initialize.\r\n\r\nThen go to the JavaScript profiler tab and start profiling :)\r\nAfter you've pressed stop, the flame graph will be generated.\r\n\r\nIf you don't want to copy debugger URLs around, you can also use the [NIM chrome extension](https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj). It discovers debuggable node processes automatically.. Not directly related to this thread, but also interesting: Looks like the most recent v8 version (with their new optimizing compiler TurboFan) gives a startup performance boost of 160% (1150ms vs 720ms).\r\n\r\nUsing [v8/node](https://github.com/v8/node), phase 1 looks like this:\r\n\r\n![bildschirmfoto 2017-03-29 um 15 23 55](https://cloud.githubusercontent.com/assets/781746/24456741/46b126f0-1494-11e7-897c-6b81c9f8ec95.jpg)\r\n\r\nThe overall build time decreased from 49.2s to 41.35s (~119% faster).\r\n\r\nTurboFan doesn't bail out on try/catch which will probably improve the startup performance of all node applications because node is using try/catch to initialize the modules.. Afaik python is still a [dependency of Node.js' gyp](https://nodejs.org/en/docs/meta/topics/dependencies/#gyp). Why should we get rid of it?\n\nYou could create a PR for that and make some performance tests.\n. You don't need the `LoaderOptionsPlugin` with sass-loader 5.0.0 anymore. All options can be passed as object with the `options` property (see README).\r\n\r\nWe still do access the webpack options object to read the `context`. This will not be possible with webpack 3 anymore. But since there isn't a good alternative yet, we still need to do that. This is an ongoing discussion but shouldn't concern you. :). ```js\r\nmodule.exports = {\r\n    ...\r\n    module: {\r\n        rules: [{\r\n            test: /\\.scss$/,\r\n            use: [{\r\n                loader: \"style-loader\"\r\n            }, {\r\n                loader: \"css-loader\"\r\n            }, {\r\n                loader: \"sass-loader\",\r\n                options: { // <--- these options\r\n                    includePaths: [\"absolute/path/a\", \"absolute/path/b\"]\r\n                }\r\n            }]\r\n        }]\r\n    }\r\n};\r\n```. No. `LoaderOptionsPlugin`can be used to mock/replace the **webpack** options that can be accessed inside the loader via `this.options`. With sass-loader, you don't need to do that. This was designed to be compatible with webpack 1 loaders.\r\n\r\nJust pass your options where you configure your loader (like in the example above). `LoaderOptionsPlugin.output.path` is the `output.path` from the webpack options. It has nothing to do with the sass-loader.. Sorry, I don't understand this. Why can't people use node > 6.5 with the sass-loader? In fact, I'm using node 7.1.0 and everything is working fine (I've also tested it with node 6.9.0).\n\nBesides that: Changing the `peerDependencies` is an unnecessary breaking change imho.\n. Haha, they're not typos. It's German grammar applied on English :)\r\n\r\nAnyway, thx \ud83d\udc4d . Thanks for contributing \ud83d\udc4d \r\n\r\nHowever, I won't merge this change because it adds code to our code base that is not useful for every user. This should be provided by separate library. This way, our users are free to add these custom functions \u2013 or not.\r\n\r\nYou could publish this library for useful custom functions, write a good README about it and I can put a link to it in our README. You could also advertise this at the [node-sass](https://github.com/sass/node-sass) repository, because these functions are not restricted to webpack at all.. Thx for your feedback @anchann \r\n\r\nI'm considering this change, although I don't think it's right to pull this in. We should rather try to tackle the perf issues.\r\n\r\nUnfortunately, I can confirm that a lot of time can be spend on resolving. I've published a [resolve-perf-tests](https://github.com/jtangelder/sass-loader/tree/resolve-perf-tests) that uses `process.hrtime()` and `console.log()s` to get some numbers and it seems like the sass-loader is spending 35% up to 73% of the time just to resolve files. This is unacceptable and should be solved at webpack level. However, I tried to reproduce these numbers in a bigger project and I couldn't. So, that remains a little vague. Maybe it's related to sass' complicated resolving algorithm involving underscore file names (`_blahblah`)\r\n\r\n240 seconds to 3 seconds are extreme numbers. Can you give me some hints on your directory structure and how you import stuff?. > takes forever, no output to shed light onto what's happening, yet calling tsc on the command line builds the project in seconds. I'd love to be proven wrong, but until then, logging my findings for the next dev is the best I can hope for :)\r\n\r\nWe already heard of builds taking minutes to finish. Unfortunately, we don't have complex example projects to replicate these issues. My projects usually finish after max. 20 seconds in production mode, but they're medium sized.\r\n\r\n> webpack's resolution seems to add nothing in terms of functionality, though perhaps it does add something in terms of uniformity (that said, uniform opaqueness is not necessarily a good thing)\r\n\r\nSince webpack provides its own resolving algorithm, I felt that it would be consistent for the developer to configure all resolving stuff in your webpack.config. It's true that this uniformity is not acceptable at the current performance cost, so I understand your argument here.\r\n\r\n> Also, importers are labelled as experimental in node-sass' documentation. Would it not make sense to make the use of an experimental feature optional, specifically because the upstream library labels it as a \"use with caution\" feature? I would personally go as far as making it disabled by default, and only enabled when a user knows that they explicitly want the feature.\r\n\r\nOur importer is well-tested and works without errors, so I don't see the need to declare this as an experimental thing.\r\n\r\n> I don't think that's the case \u2014 disabling the webpack importer leaves sass' native underscore resolution intact, does it not?\r\n\r\nOnce we use our own importer, sass' native importing algorithm is not available. That's why we have to replicate it (and it's unnecessary complex \ud83d\ude22)\r\n\r\n> Or, if it's easier for you, you can give me a custom version of sass-loader with whatever instrumentation you want, and I'll send you the output data.\r\n\r\nCould you use the sass-loader from the [resolve-perf-tests](https://github.com/jtangelder/sass-loader/tree/resolve-perf-tests) branch and tell me the last output (it's accumulating all numbers)?. Could you check if the import is still slow when you change `UV_THREADPOOL_SIZE` to a big number (like 200)?\r\n\r\nJust set the environment variable before calling webpack.. Thx for your efforts. This helps me a lot! \ud83d\udc4d \r\n\r\n> To be honest, I didn't even want to do this test when I saw the variable name, since it sounded like a poor quality sledgehammer approach to the problem.\r\n\r\nNo worries! This won't be the final solution. I just wanted to check if it might be a problem that node-sass eats up almost all available threads for file IO. There was a problem in libsass that caused a deadlock (#100 #147) which was the reason why we had to use [async](https://github.com/caolan/async)'s job queue. This way, node-sass still leaves one thread available for node.js \u2013\u00a0which is also the only thread for webpack's file IO. Thus webpack can only resolve files sequentially. And I think your numbers confirm my assumption. For instance, take a look at `RaisedButton.scss`. In your original setup, it only takes 200ms. But with all the file IO going on it is delayed up to 9000ms.\r\n\r\n>  I still firmly believe that even if resolving the problem internally inside webpack is the philosophically correct thing to do, given that lib-sass has a working solution to accommodate aliasing via import paths, sass-loader should provide its users with an escape hatch in case they want one.\r\n\r\nwebpack's resolving engine is more powerful than node-sass' `includePaths`. For instance, you can also alias paths (you can't do that with node-sass). And hopefully with webpack 2 you will also be able to `@import` JS files in order to translate JS variables into Sass variables. But I agree that for most use-cases, node-sass' `includePaths` is totally sufficient.\r\n\r\nMy current approach is:\r\n\r\n1. Try to understand **why** we are currently slower\r\n2. Try to find a simple solution to make webpack almost as fast as node-sass. It will always be a little bit slower because there is more going on behind the scenes. But it should not make a big difference\r\n3. If I can find a simple and fast solution, I will provide a flag to disable webpack's resolving engine. I don't want to add too much options because it makes everything more complicated. But if we can't make sass-loader faster, we should definitely allow that option.. I did some profiling: https://github.com/webpack-contrib/sass-loader/issues/296#issuecomment-288464857. `includePaths` is only working for sass imports. `url()` statements are left untouched by the sass-loader. The css-loader will try to resolve `url()` statements, and a statement like `url('images/logo.svg');` will be translated to `url('./images/logo.svg');` because the CSS syntax does not distinguish between module imports and relative imports.\r\n\r\nIf you really want this behavior, you need to write `url('/images/logo.svg');` and use the `root` option of the css-loader like this:\r\n\r\n```\r\n module: {\r\n    loaders: [{\r\n      test: /\\.scss$/,\r\n      loader: ExtractTextPlugin.extract([\r\n        'css-loader?' + JSON.stringify({\r\n          root: path.join(__dirname, 'images')\r\n         }),\r\n        'sass-loader'].join('!'))\r\n    }]\r\n  }\r\n```\r\n\r\nHowever, I don't really recommend this because it defeats the purpose of using webpack for stylesheets. If you need to build it this way, maybe it's not a good idea to use webpack for the stylesheets.. @Nexxado the option is called `sourceMap` without `s`. Also for the css-loader.\r\n\r\nSee [example](https://github.com/jtangelder/sass-loader/blob/f8cc0680258cb7519db0b4243542776fb3308df9/test/sourceMap/webpack.config.js). Closing this one since it is not an actual bug description. We know that source maps do work with webpack 2 and sass-loader. However, there can be issues depending on the language features you are using, like #351. @clintonb cool thx.\r\n\r\nPlease also add `-loader` to `sass` and I will merge it. Webpack 2 removed this shorthand because it was a source of bugs for newcomers.. Awesome. Yeah, that makes sense. I didn't realize that you need the `sass` instance to access their types. Would you be open to do a PR? Please also write a small test and a note in the README for that.. Wait ... is this change really necessary? Why couldn't you just require `node-sass` in your project? It's a peer dependency and should return the exact same object.. I assume that this is somehow related to your setup. When using `--watch`, webpack will only rebuild the files that had an error. Can you try to provide a minimal example repository that demonstrates the problem?\r\n\r\nPlease note that we can only recompile starting from the *entry SASS file*. So, if you have one monolithic SASS file with a lot of imports, we need to rebuild that one \u2013\u00a0even when the syntax error was just in a little file that was imported. Unfortunately, that's the way how the SASS language was designed.. Thank you for your PR.\r\n\r\nTBH I don't know why we're overwriting `sourceRoot` here. Maybe it wasn't set to the time I tried the source maps. However, it seems like [there is an `sourceMapRoot` option in node-sass](https://github.com/sass/node-sass#sourcemaproot). We should use that one if its set.\r\n\r\nCould you check the following things:\r\n\r\n- What is the value of `sourceRoot` when the `sourceMapRoot` option is not set?\r\n- Is the value of `sourceRoot` correct when the `sourceMapRoot` option is set?. I won't add a new option to the sass-loader, because this should passed directly to node-sass as `sourceMapRoot` option. But I won't override `map.sourceRoot` anymore when it's defined.. Thanks for the suggestion, but this is clearly related to your setup. Your suggestion won't work with webpack 2.. I'm pretty confident that the sass-loader is not changing the order. We have a lot of tests for that. Please remove every other loader and try to remove as much code as possible while the error still occurs. This will help to track down the problem.. Thx. Shipped with `4.1.0`. Nice example of how \"fixing a bug can be a breaking change\".. \"Fixed\" since node-sass 4 was no valid peer dependency.. Sorry. [There are tests for nested imports](https://github.com/jtangelder/sass-loader/blob/fee3593e5f8658b4afd1f01bc8308718ca0fd439/test/sass/imports.sass) and I use them every day, so I doubt that this is related to the sass-loader.\r\n\r\nPlease create a minimal example and instructions on how to reproduce the error. I'll reopen this, if it's a confirmed problem with the sass-loader.\r\n\r\nSince this is an error in the C stack, I assume that you're using a custom importer which throws an error.. There's no entry point. Please take a look at our unit tests and examples to get a working example.. Sorry, this is no WebStorm support forum.\r\n\r\nBesides that, it works in my WebStorm:\r\n![bildschirmfoto 2016-12-23 um 12 38 37](https://cloud.githubusercontent.com/assets/781746/21453167/cf491dde-c90c-11e6-9fc6-eb59d814f20c.jpg)\r\n. Strange. I do have multiple entry points and I never experienced this `Stack level too deep` error. Would be nice to reproduce it reliably...\r\n\r\nI'm thinking of moving node-sass into a separate process. Do you think this might solve it?. For background information: node 0.12 maintenance support will end on 2016/12/31. Yes, it's a duplicate.. By prepending the string with exclamation mark, you can disable the loaders configured in the webpack.config.js.\r\n\r\nHowever, it is recommended to use the `webpack.config.js` anyway. The inline syntax should only be used in certain exceptions. That's why I removed it from the README.. You don't need to add a blob url. Please reference your fonts relatively and use the file-loader.. Sorry, there is not enough information to reproduce this. Please provide a minimal test repository that demonstrates the problem so I can check that out. Try to remove as much stuff as possible since it helps tracking down the problem.. No idea \ud83d\ude01 \r\nThx for submitting your patch.. Have you tried fiddling around with webpack's resolving options? The sass-loader uses webpack's resolving engine, so that should work (in theory). I haven't tests for that, though.. Please provide a small example repository that demonstrates the error. Could you also check if the error is still there without the sass-loader?. @maggo thanks for the example repo. The processed source map contains a negative column number. I don't know how we can fix that since these column numbers come from node-sass.\r\n\r\nI've tried to compile the `index.scss` with node-sass itself and it seems to work, so maybe that's an issue with webpack's source map consumer :(\r\n\r\nI think, this is also related to #272 . @albertogasparin awesome! This is a good starting point to locate the error. Unfortunately, I don't have time for that now, but I would be glad if someone of you could tackle it.\r\n\r\nCrazy, I've never seen mixins and `&` used together:\r\n\r\n```scss\r\n@mixin FormField {\r\n  position: relative;\r\n  display: flex;\r\n  line-height: $Pollicino-FormField-height;\r\n\r\n  &-label {     // <---- that's where the error is coming from\r\n```\r\n. @cj if you use `url()` in an import statement, node-sass won't touch this import anymore. It will be passed to the css-loader as it is. The css-loader, however, will try to resolve it, thus triggering another sass compilation with the `scss/mixin` as entry.\r\n\r\nAs a result, you might end up with a lot of duplicate css code in your bundle.\r\n\r\n@hiroshishu Since there is no stack trace, it seems like this error occurs somewhere between JS and native code. Do you use the [`importer`](https://github.com/sass/node-sass#importer--v200---experimental) or the [`function`](https://github.com/sass/node-sass#functions--v300---experimental) option?. This is definitely not a sass-loader problem.\r\n\r\nWhy are you using a mixin for the box-shadow anyway? It's supported in all major browsers.. Again, not a sass-loader issue. Check the transition mixin (you don't need a mixin for that too).. That would be awesome. Could you create a PR? \ud83d\udc4d \r\n\r\nJust create a directory called `examples` (thus it will be ignored by npm as configured in the `.npmignore`). Please also setup eslint for the examples directory.. I've added a test case for `animate.css`. It works fine.\r\n\r\nJust remove the `includePaths` option and use the tilde path to import stuff from `node_modules`, like this:\r\n\r\n```\r\n@import '~bootstrap/scss/bootstrap-flex';\r\n\r\n@import '~animatewithsass/animate.scss';\r\n@import '~animate.css/animate.css';\r\n```. > but with tilde (~) the imported file is not in webpack's chunk\r\n\r\nIt's just another way of referencing it. The CSS will definitely be in webpack's chunk (whatever that is).. The file must have the `sass` extension if it's written in sass syntax. Try to narrow down the exact file, that is causing the issue and try to compile it with `node-sass`. Does it work with `node-sass`?. You don't need to set the option explicitly anymore. The sass-loader derives it automatically for files ending on `.sass`. The `webpack.config.js` cannot use webpack features. It is executed in node and can only contain node compatible code.. You're importing a SCSS file in your webpack.config:\r\n\r\n```js\r\nvar sass = require(\"./sass/lifeleveler.scss\");\r\n```\r\n\r\nNode cannot import SCSS files. It does not support loaders.. Which docs? Which plugin?. This is a loader. Loaders are different than webpack plugins.\r\n\r\n> I'm using the exact code from the docs...\r\n\r\nThere is no part in the docs where a sass file is included into the webpack config. Why would you want to do that anyway? ^^. The `LoaderOptionsPlugin` should not be necessary, see my comment [here](https://github.com/jtangelder/sass-loader/issues/285#issuecomment-278010902).\r\n\r\nWe have a [test for `includePaths`](https://github.com/jtangelder/sass-loader/blob/3abb8870cb11c120fb31bad73f9de44b7c5f5ddf/test/index.test.js#L65). It should work the way you described it. Could you create a minimal example repo that reproduces the error?. @asolopovas with sass-loader 4.1.1 and webpack 2.2.1, both config examples work.\r\n\r\nWith sass-loader 5.0.1, `webpack.config.js` does not work because the sass-loader doesn't read the config from the webpack options object anymore. You don't need to use the `LoaderOptionsPlugin` with sass-loader 5.0.0 anymore. Just specify the loader options directly. Thus, `webpack.config.error.js` **does** work.. Also [check out our tests](https://github.com/jtangelder/sass-loader/blob/8d54166ff2e99d8e75af868028a1635313c64b6f/test/index.test.js#L62-L64).. Ok, now I can reproduce this error on Windows (doesn't happen on macOS):\r\n\r\n```\r\nERROR in E:/temp/sass-loader-test/~/css-loader?{\"sourceMap\":true}!E:/temp/sass-loader-test/~/sass-loader/lib/loader.js?{\"sourceMap\":true,\"includePaths\":[\"E://temp//sass-loader-test//~//foundation-sites//scss\",\"E://temp//sass-loader-test//~//motion-ui//src\",\"E://temp//sass-loader-test//resources//assets//sass\"]}!../sass/app.scss\r\nModule build failed: Error: \"../../node_modules/foundation-sites/scss/foundation.scss\" is not in the SourceMap.\r\n    at BasicSourceMapConsumer.SourceMapConsumer_sourceContentFor [as sourceContentFor] (E:\\temp\\sass-loader-test\\node_modules\\source-map\\lib\\source-map-consumer.js:704:13)\r\n    at SourceMapGenerator.<anonymous> (E:\\temp\\sass-loader-test\\node_modules\\source-map\\lib\\source-map-generator.js:235:40)\r\n    at Array.forEach (native)\r\n    at SourceMapGenerator_applySourceMap [as applySourceMap] (E:\\temp\\sass-loader-test\\node_modules\\source-map\\lib\\source-map-generator.js:234:32)\r\n    at MapGenerator.applyPrevMaps (E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\map-generator.js:146:22)\r\n    at MapGenerator.generateMap (E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\map-generator.js:194:46)\r\n    at MapGenerator.generate (E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\map-generator.js:297:25)\r\n    at LazyResult.stringify (E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\lazy-result.js:296:24)\r\n    at E:\\temp\\sass-loader-test\\node_modules\\postcss\\lib\\lazy-result.js:233:27\r\n    at process._tickCallback (internal/process/next_tick.js:103:7)\r\n @ ../sass/app.scss 4:14-151\r\n @ ./app.js\r\n @ multi ./app\r\n```\r\n\r\nIt seems like node-sass is exporting source maps with forward slashes (which are also valid on Windows). Webpack's source map module, however, stores backslash paths. That's why the source maps can not be resolved.\r\n\r\nI can fix this in sass-loader by applying `path.normalize` on all source map paths.\r\n\r\nNext time, please always post the actual error message including the stack trace.. @janusch Could you try the latest sass-loader on master branch? If it's still not working, you can try to comment out [these lines](https://github.com/jtangelder/sass-loader/blob/master/lib/loader.js#L68-L69). Does it work then? How do the paths look like when they come from node-sass?. @asolopovas Running your example repo and `--config webpack.config.error.js` with sass-loader `6.0.2` does not produce any errors:\r\n\r\n```\r\nIEUser@IE11Win7 MINGW32 /E/temp/sass-loader-test (master)\r\n$ webpack --config webpack.config.error.js\r\n(node:2612) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\r\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\r\nHash: c868b04bdf3742bebc1b\r\nVersion: webpack 2.2.1\r\nTime: 6119ms\r\n Asset   Size  Chunks             Chunk Names\r\napp.js  44 kB       0  [emitted]  main\r\n   [0] ./app.js 43 bytes {0} [built]\r\n   [1] E:/temp/sass-loader-test/~/css-loader?{\"sourceMap\":true}!E:/temp/sass-loader-test/~/sass-loader/lib/loader.js?{\"sourceMap\":true,\"includePaths\":[\"E://temp//sass-loader-test//~//foundation-sites//scss\",\"E://temp//sass-loader-test//~//motion-ui//src\",\"E://temp//sass-loader-test//resources//assets//sass\"]}!../sass/app.scss 4.01 kB {0} [built]\r\n   [2] E:/temp/sass-loader-test/~/css-loader/lib/css-base.js 1.51 kB {0} [built]\r\n   [3] E:/temp/sass-loader-test/~/style-loader/addStyles.js 7.15 kB {0} [built]\r\n   [4] ../sass/app.scss 1.12 kB {0} [built]\r\n   [5] multi ./app 28 bytes {0} [built]\r\n\r\nIEUser@IE11Win7 MINGW32 /E/temp/sass-loader-test (master)\r\n$ npm ls sass-loader\r\nsass-loader@1.0.0 E:\\temp\\sass-loader-test\r\n`-- sass-loader@6.0.2\r\n```. I don't know what the vue-loader is doing, but if I remove the sass-loader and just try to compile `App.vue` the same error is still there. So this is not related to the sass-loader.. The sass-loader has its own loader pipeline. This configuration fixed the issue:\r\n\r\n```\r\n            {\r\n                test: /\\.vue$/,\r\n                loader: 'vue-loader',\r\n                options: {\r\n                    loaders: {\r\n                        scss: 'vue-style-loader!css-loader!sass-loader?' + JSON.stringify({\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'node_modules/foundation-sites/scss'),\r\n                            ]\r\n                        }), // <style lang=\"scss\">\r\n                        sass: 'vue-style-loader!css-loader!sass-loader?indentedSyntax' // <style lang=\"sass\">\r\n                    }\r\n                }\r\n            }\r\n```. > A hack solution is definitely better then no solution thanks\r\n\r\nOh, I don't think that this is a hack solution. Since a `vue` file can host a lot of file types, it makes sense to have a dedicated loader pipeline because webpack's loader `test` algorithm wouldn't work here.. If you have a `.babelrc` or a `tsconfig.json` inside your root folder, they are reading the config from these files. But this is loader specific since the tools behind these loaders (babel and typescript) have the same style of configuration. It doesn't apply to all loaders.. This is my config and it's working with your sass-loader-test repository\r\n\r\n```\r\nconst webpack = require('webpack')\r\nconst path = require('path')\r\n// noinspection JSUnresolvedFunction\r\nmodule.exports = {\r\n    entry: [\r\n        'babel-polyfill',\r\n        'webpack/hot/dev-server',\r\n        // ?reload=true enables full page reload on hmr failure\r\n        'webpack-hot-middleware/client?reload=true',\r\n        './app'\r\n    ],\r\n    context: path.resolve(__dirname, 'resources/assets/js'),\r\n    output: {\r\n        path: path.resolve(__dirname, 'public/js'),\r\n        filename: 'app.js',\r\n        publicPath: '/js/'\r\n    },\r\n    devtool: 'eval-source-map',\r\n    module: {\r\n        rules: [\r\n            {\r\n                enforce: 'pre',\r\n                test: /\\.tsx?$/,\r\n                loader: 'ts-loader',\r\n                exclude: /node_modules/\r\n            },\r\n            {\r\n                enforce: 'pre',\r\n                test: /\\.js$/,\r\n                exclude: /node_modules/,\r\n                loader: 'babel-loader',\r\n                query: {\r\n                    presets: ['es2015'],\r\n                    plugins: ['lodash']\r\n                }\r\n            },\r\n            {\r\n                test: /\\.vue$/,\r\n                loader: 'vue-loader',\r\n                options: {\r\n                    loaders: {\r\n                        scss: 'vue-style-loader!css-loader!sass-loader?' + JSON.stringify({\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'node_modules/foundation-sites/scss'),\r\n                            ]\r\n                        }), // <style lang=\"scss\">\r\n                        sass: 'vue-style-loader!css-loader!sass-loader?indentedSyntax' // <style lang=\"sass\">\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                test: /\\.scss$/,\r\n                use: [\r\n                    {loader: 'style-loader'},\r\n                    {\r\n                        loader: 'css-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    },\r\n                    {\r\n                        loader: 'sass-loader',\r\n                        options: {\r\n                            sourceMap: true,\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'node_modules/foundation-sites/scss'),\r\n                            ]\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    resolve: {\r\n        alias: {\r\n            'inputmask.dependencyLib': path.resolve(__dirname, 'node_modules/jquery.inputmask/extra/dependencyLibs/inputmask.dependencyLib/'),\r\n            'inputmask': path.resolve(__dirname, 'node_modules/jquery.inputmask/dist/inputmask/inputmask/')\r\n        },\r\n        extensions: ['.webpack.js', '.web.js', '.tsx', '.ts', '.js']\r\n    },\r\n    // watchOptions: {\r\n    //     poll: 1000 // <-- it's worth setting a timeout to prevent high CPU load\r\n    // },\r\n    plugins: [\r\n        new webpack.HotModuleReplacementPlugin(),\r\n        // new webpack.LoaderOptionsPlugin({\r\n        //     options: {\r\n        //         context: '/', // <- putting this line right under \"options\" did the trick\r\n        //         sassLoader: {\r\n        //             includePaths: [\r\n        //                 path.resolve(__dirname, 'vendor/zurb/foundation/scss'),\r\n        //                 path.resolve(__dirname, 'node_modules/motion-ui/src'),\r\n        //                 path.resolve(__dirname, 'resources/assets/sass')\r\n        //             ]\r\n        //         }\r\n        //     }\r\n        // })\r\n    ]\r\n}\r\n```\r\n\r\n```\r\nsass-loader-test master \u2717 5bbf397 6d \u25b3 \u279c webpack -v\r\n2.2.1\r\nsass-loader-test master \u2717 5bbf397 6d \u25b3 \u279c webpack \r\n(node:6034) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\r\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\r\nHash: b984fcd717d3b5867277\r\nVersion: webpack 2.2.1\r\nTime: 2794ms\r\n Asset     Size  Chunks                    Chunk Names\r\napp.js  1.62 MB       0  [emitted]  [big]  main\r\n  [87] (webpack)/buildin/global.js 509 bytes {0} [built]\r\n [120] /Users/jhnns/dev/temp/sass-loader-test/~/vue/dist/vue.runtime.esm.js 174 kB {0} [built]\r\n [121] ./app.js 305 bytes {0} [built]\r\n [122] /Users/jhnns/dev/temp/sass-loader-test/~/babel-polyfill/lib/index.js 833 bytes {0} [built]\r\n [123] (webpack)-hot-middleware/client.js?reload=true 6.68 kB {0} [built]\r\n [124] (webpack)/hot/dev-server.js 1.57 kB {0} [built]\r\n [127] /Users/jhnns/dev/temp/sass-loader-test/~/core-js/fn/regexp/escape.js 107 bytes {0} [built]\r\n [307] /Users/jhnns/dev/temp/sass-loader-test/~/core-js/shim.js 7.38 kB {0} [built]\r\n [314] /Users/jhnns/dev/temp/sass-loader-test/~/querystring-es3/index.js 127 bytes {0} [built]\r\n [316] /Users/jhnns/dev/temp/sass-loader-test/~/strip-ansi/index.js 161 bytes {0} [built]\r\n [318] ../sass/app.scss 1.12 kB {0} [built]\r\n [319] ./App.vue 1.57 kB {0} [built]\r\n [325] (webpack)-hot-middleware/client-overlay.js 1.82 kB {0} [built]\r\n [329] (webpack)/hot/log-apply-result.js 1.02 kB {0} [built]\r\n [330] multi babel-polyfill webpack/hot/dev-server webpack-hot-middleware/client?reload=true ./app 64 bytes {0} [built]\r\n    + 316 hidden modules\r\nsass-loader-test master \u2717 5bbf397 6d \u25b3 \u279c \r\n```. No problem. You're welcome :)\r\n\r\nI'm willing to help if the other side is providing a test repository. This makes spotting bugs/wrong configurations a lot easier.. Thx, I'll take a look.. Haha, nice one! Seems like you've encountered a bug/unexpected behavior of the [loader-utils](https://github.com/webpack/loader-utils). Starting with commit [e6dc9c1daa02b1c87d9431e77c7ae9771b22f80b](https://github.com/webpack/loader-utils/commit/e6dc9c1daa02b1c87d9431e77c7ae9771b22f80b), the loader utils will recognize loader options objects and just return them.\r\n\r\nHowever, inside the sass-loader, I expected to always get a new object when calling `parseQuery`. That's why I modify the received `options` object. Thus, `data` will accumulate all sass files if the loader is executed multiple times.. This will bloat a lot of CSS files... working on a quickfix.. A fix should ship with `5.0.1`. Are you using the css-loader and the file-loader? In that case, you don't need to configure anything. The file-loader will hash all files automatically.. If you're using the css-loader, have you enabled the `url` option (default is enabled, but maybe you've disabled it)?. https://github.com/webpack/webpack/tree/master/examples/css-bundle. Clone the repo, build the example running `build.js` and checkout the result in the `js` directory.\r\n\r\nThe final url will look like [this](https://github.com/webpack/webpack/tree/master/examples/css-bundle#jsstylecss). The referenced image will be copied to the output folder.. Apparently, the sass-loader is not applied to the file. Make sure, your loader configuration is valid. The pasted config looks ok, but maybe you've oversimplified it for this issue?\r\nPlease, also create a small example repository that demonstrates the problem with the sass-loader.. @wsfuller webpack only understands JavaScript. If there is no rule for a `scss` file, `scss` files will be treated as JavaScript.. I totally understand your frustration. I also think that the configuration is too complicated, but it's hard to have big changes without breaking a lot of code. However, we want to improve that, that's why we've started a discussion [here](https://github.com/webpack/webpack/issues/2797).\r\n\r\nWe're also working on [webpack-cli](https://github.com/webpack/webpack-cli) which will offer a convenient way to get things up running very quickly. We imagine things like `webpack-cli add css-modules` or `webpack-cli add sass`. The webpack configuration itself, however, will always be low-level because we believe that many developers also appreciate the flexibility to adjust things to their requirements.\r\n\r\nRegarding the documentation: If you're not satisfied with [our guides](https://webpack.js.org/guides/), you can simply edit them (click on \"Edit this page\"). This will bring you to Github where you can edit the file and create a PR with one click. We really appreciate every contribution to the [webpack.js.org repository](https://github.com/webpack/webpack.js.org). Contributions to our repositories are even refunded from our [OpenCollective account](https://opencollective.com/webpack) (in case you're legally allowed to create invoices).. Sorry, there is not enough information to reproduce this. Please provide a minimal test repository that demonstrates the problem so I can check that out. Try to remove as much stuff as possible since it helps tracking down the problem.. I assume you are using the `LoaderOptionsPlugin`? Could you paste the configuration of that?\r\n\r\nThis will probably be fixed with the next patch version.. @bholloway this will again be breaking for the resolve-url-loader. I've created a PR for this: https://github.com/bholloway/resolve-url-loader/pull/44. These source maps are truly driving me crazy ^^\r\n\r\nCould you review https://github.com/jtangelder/sass-loader/pull/377 and try it with your test setup? I think, now all paths should be correct.. @bholloway I've [written a test](https://github.com/jtangelder/sass-loader/pull/377/files#diff-0fd0e07cf6d02bf7cf00f18cebb8e6eaR195) that checks if all files in the source map can be resolved.. Thx for reviewing it.\r\n\r\n> I believe that node-sass@>=4 has a problem with the source map. There are negative original mappings. For example:\r\n\r\nThat is a [known problem](https://github.com/jtangelder/sass-loader/issues/272). I don't know enough about source maps, whether that is valid. But it seems like the source maps from node-sass itself are interpreted correctly (tested on chrome). I assume that webpack's `source-map` module has problems with this, but I'm not sure.\r\n\r\n> When content is not embedded then it will need to be served to the browser. So we should avoid ../ paths in the source-map. The shallowest common directory is usually process.cwd() (or close to it) so I think you are safe there.\r\n\r\nChrome allows to configure a [directory mapping for source maps](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0#.rcxg27txq). Thus, source maps don't need to be served.\r\n\r\nThe problem here is that we don't know anything about the final source map destination inside the loader. That's why I think it's better to use relative paths with a `sourceRoot`. This way, the browser should be able to locate the actual source file on disk (only exception: The file is on a different hard drive).. You're using webpack 1 and are trying to install the latest sass-loader. We [removed Webpack 1 support with sass-loader `5.0.0`](https://github.com/jtangelder/sass-loader/blob/master/CHANGELOG.md). You need to run `npm i sass-loader@4`.\r\n\r\nPlease also read about [peer dependencies](https://nodejs.org/en/blog/npm/peer-dependencies/). The error is quite clear if you know the concept of peer dependencies.. The error looks like the sass-loader is not active on that file. Please check that. If you still think, this is a sass-loader issue, please provide a minimal example that reproduces the error. Try to remove as much as possible.. I'll close it for now. When you're sure, it's a sass-loader problem, I'll re-open it.. That is hell of a stack trace! :). If you prepend `~` to the import statement, it will use webpack's usual module resolving engine: `@import \"~@barebone/var-z-index\"`. Awesome, thx :). Please provide more context. What is AoT? Do you have a code example that demonstrates the error?. This has been addressed with #398 and shipped with `6.0.3`.. Looks like you're trying to import a `scss` file but you've only configured the sass-loader for `sass` files. That's the only thing I can spot with the given information.\r\n\r\n---\r\n\r\nThings you should consider in the future before opening an issue:\r\n\r\n- Please format your issue with code blocks ```\r\n- Omit stuff that is probably not relevant\r\n- Don't omit stuff that could be helpful: Error message + stack trace for instance\r\n\r\nIf you want to help us to find the problem: Provide a small test repository that demonstrates the bug.\r\n\r\nIn case, you're not sure whether it's a bug or whether there's something wrong with your configuration, ask a [question on StackOverflow an tag them with `webpack`](http://stackoverflow.com/questions/tagged/webpack) or go to the [webpack gitter channel](https://github.com/webpack-contrib/sass-loader/issues/391).\r\n\r\nThank you :). The `sass` syntax is not compatible with css modules. You can escape the colon like this:\r\n\r\n```sass\r\n\\:local(.container)\r\n  padding-top: 20px\r\n```\r\n\r\nSee https://github.com/sass/libsass/issues/2245. Seems like your PR was based on a fork because there a lot of unrelated changes (see diff).\r\n\r\nI'm not sure about this, because our tests run against webpack 2, so we don't know when we introduce anything breaking. We also don't have the manpower to maintain compatibility for a long time. It's safer and less work if we only allow webpack 2.. Thanks for the work. This commit was pulled in with #398 \ud83d\udc4d . See #394 . Sorry. There is no explanation *what* you're trying to fix. Furthermore, your fix looks actually very broken:\r\n\r\n![bildschirmfoto 2017-03-08 um 00 22 08](https://cloud.githubusercontent.com/assets/781746/23682660/5893a600-0395-11e7-9e7a-0dea32535d35.jpg)\r\n. Thx for creating a detailed report. This has been addressed with #398 and shipped with `6.0.3`.. Awesome, that makes sense \ud83d\udc4d Didn't know the design was broken on the docs page.\r\n\r\nCould you do the same for the https://github.com/webpack-contrib/less-loader? \ud83d\ude01 . Why should we support writing code that does not work across platforms? Windows accepts `/` as valid path separator, OSX and Linux systems do not. Why don't they use regular slashes?. Furthermore: I assume that Sass interprets backslashes as escape character. This means that you need to use double backslashes if you want to have a single backslash (exactly like in JavaScript). Have you read the section about [problems with `url()`](https://github.com/webpack-contrib/sass-loader#problems-with-url)? Please also note that the README expects webpack 2.. To be honest, I'm not sure if aliases are supported. It *should* be supported afaik, but we have no test case for that.\r\n\r\nThx for reporting this. I will take a look.. @wsfuller does your setup have the same problem as @mortocks pointed out? If not, please provide a small test example that makes the error reproducible.\r\n\r\nYour config should probably also look like this:\r\n\r\n**webpack.config**\r\n\r\n    {\r\n        test: /\\.(s?)css$/,\r\n        use: ExtractTextPlugin.extract({\r\n            fallback: 'style-loader',\r\n            use: ['css-loader', 'postcss-loader', 'resolve-url-loader', 'sass-loader'],\r\n        })\r\n      },\r\n\r\nThe postcss-loader can't deal with Sass.\r\n. You should be able to use the sass-loader 4.x with webpack 1. We dropped official support with sass-loader 5.x which means that it *might* work, but there is no guarantee. [This is the sass-loader 4.x documentation](https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1).\r\n\r\nI recommend switching to webpack 2 as soon as possible since we don't have the manpower to maintain multiple versions. Additionally, I think the transition from webpack 1 to webpack 2 isn't as hard as it may seem. There were little breaking changes. Everything you need to know is documented in the [migration guide](https://webpack.js.org/guides/migrating/).. Thx \ud83d\udc4d \r\n\r\nI don't know how this could happen.... Good catch! \ud83d\udc4d . > However, this only works for top level files. It appears that @require statements are not resolved by webpack.\r\n\r\n> I've had a browse through the code base (very readable), but I don't have a full grasp of how this works now. Is it the case that files are piped through webpack when @required, or is this entirely handled by node-sass?\r\n\r\nWe register a [custom importer](https://github.com/webpack-contrib/sass-loader/blob/004807b4e5b13c4101b2c368a0ca5c9ee6dcf0cc/lib/webpackImporter.js#L63-L70) which will be invoked by Libsass as soon as an @import statement is encountered.\r\n\r\nThen, [we determine a list of file paths](https://github.com/webpack-contrib/sass-loader/blob/004807b4e5b13c4101b2c368a0ca5c9ee6dcf0cc/lib/importsToResolve.js) that we want to try. This is necessary in order to mimic the original Sass behavior of underscore imports.\r\n\r\nFor instance, this:\r\n\r\n```sass\r\n@require 'variables'\r\n```\r\n\r\nwill generate this list of possible imports to resolve:\r\n\r\n```js\r\n[\r\n'/path/to/_variables.scss', '/path/to/_variables.sass', '/path/to/_variables.css',\r\n'/path/to/variables.scss', '/path/to/variables.sass', '/path/to/variables.css'\r\n]\r\n```\r\n\r\nThese paths are then passed to webpack's resolver. In your setup, however, these paths won't be resolvable.\r\n\r\nThis can be fixed in two ways:\r\n\r\n### 1\r\n\r\nWe could add a check for `scss.erb` or `sass.erb` to the sass-loader. In this case, you would need to add the extension to your imports:\r\n\r\n```sass\r\n@require 'variables.scss.erb'\r\n```\r\n\r\n### 2\r\n\r\nYou could write [a resolver plugin](https://webpack.js.org/api/plugins/resolver/) which transforms requests that end on `.sass` or `.scss` to `sass.erb` or `scss.erb`. You can also limit this to a specific directory.\r\n\r\n---\r\n\r\nIf you choose option 1, I would like to learn a little bit about your use-case. What is the `erb` file extension about? Is it commonly used? What is this `@require` statement? This is not valid Sass afaik.\r\n\r\nIf you choose option 2, I can help you \ud83d\ude01 . That option looks good. It's not my most favorite solution, because ideally this could be handled by webpack's resolver itself, but since the sass-loader needs to mimic the original Sass' import behavior, we probably have to go this route. Configuring the `importExtensions` makes sense then.\r\n\r\nWaiting for your PR \ud83d\udc4d . Thx \ud83d\udc4d . Can you set up a small example repository that demonstrates the problem? Just ignoring the file doesn't really solve the issue, because then the watcher will not work at all.\r\n\r\nI want to understand why `addNormalizedDependency` is receiving a relative path. Is that a bug in Libsass?. Thanks for providing that example. I'll take a look.. @evilebottnawi Sorry for being unresponsive.\r\n\r\nI won't add any additional custom aliasing to the sass-loader since it is already complicated enough. If webpack's `module.alias` option would be more powerful, this could be solved by anyone.\r\n\r\nHowever, I think your use case should be solvable today by writing [a custom importer](https://github.com/sass/node-sass#importer--v200---experimental) for this particular file:\r\n\r\n```js\r\nconst nodeSass = require(\"node-sass\");\r\n\r\n// webpack.config.js\r\nmodule.exports = {\r\n    ...\r\n    {\r\n        loader: \"sass-loader\",\r\n        options: {\r\n            importer: [\r\n                // url will be the string passed to @import\r\n                // prev is the file where the import was encountered\r\n                (url, prev) => (\r\n                    shouldBeAliased(url) ?\r\n                        { file: require.resolve(\"path/to/alias.sass\") } :\r\n                        // pass file to the next importer\r\n                        // the last importer is the webpack importer inserted by the sass-loader\r\n                        nodeSass.types.Null()\r\n                )\r\n            ]\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nI haven't tested this, but this *should* work. Please let me know if it actually did \ud83d\ude01. Or try out the [node-sass-magic-importer](https://www.npmjs.com/package/node-sass-magic-importer) which may solve this for you already...\r\n\r\nYou can also write a custom resolver for webpack, but this is more complicated:\r\n\r\n```js\r\nclass ResolverPlugin {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n    apply(resolver) {\r\n        resolver.plugin(\"described-resolve\", (request, callback) => {\r\n            // request is an object that contains meta information about the resolve request\r\n            // request.request is a string that has been passed to the resolver, similar to url in the custom importer\r\n            // request.context.issuer is an absolute path to the file that wants to import the request\r\n\r\n            if (shouldBeAliased(request.request) === false) {\r\n                callback();\r\n\r\n                return;\r\n            }\r\n\r\n            resolver.doResolve(\r\n                \"resolve\",\r\n                Object.assign({}, request, {\r\n                    request: require.resolve(\"path/to/alias.sass\")\r\n                }),\r\n                \"aliased sass file\",\r\n                callback\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = class AliasSassFilePlugin {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n\r\n    apply(compiler) {\r\n        compiler.plugin(\"after-resolvers\", () => {\r\n            compiler.resolvers.normal.apply(new ResolverPlugin(this.options));\r\n        });\r\n    }\r\n}\r\n```. @smrq you're right, the current loader configuration does not insert a module for each sass file into webpack's dependency graph, it just uses webpack's resolver. The less-loader already uses `loadModule`, but only for non-Less files in order to allow `@import` of JS files for instance.\r\n\r\nHowever, I'm not sure if we *should* insert a module for each Sass file because there is no actual benefit besides the `NormalModuleReplacementPlugin`. It would just increase the memory usage...\r\n\r\nI think your use case can be solved with a resolver plugin, but unfortunately there is no easy (core-)plugin like the `NormalModuleReplacementPlugin`. @sokra what do you think? Should we add a resolver plugin to core?. ",
    "jtangelder": ":coffee: done\n. ok! i'll take a look at it tomorrow! Hope i got some time left to add this...\n. Hm, i cant get your clone to work either on my Ubuntu laptop....\n\n```\n...........npm install output................\nnpm http ..............\n\n\n> node-sass@0.8.4 install /home/jorik/work/sass-loader/node_modules/node-sass\n> node build.js\n\nmake: Entering directory `/home/jorik/work/sass-loader/node_modules/node-sass/build'\n  CXX(target) Release/obj.target/binding/binding.o\nIn file included from ../binding.cpp:6:0:\n../sass_context_wrapper.h:1:36: fatal error: libsass/sass_interface.h: No such file or directory\n #include \"libsass/sass_interface.h\"\n                                    ^\ncompilation terminated.\nmake: *** [Release/obj.target/binding/binding.o] Error 1\nmake: Leaving directory `/home/jorik/work/sass-loader/node_modules/node-sass/build'\ngyp ERR! build error \ngyp ERR! stack Error: `make` failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:267:23)\ngyp ERR! stack     at ChildProcess.EventEmitter.emit (events.js:98:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:797:12)\ngyp ERR! System Linux 3.13.0-24-generic\ngyp ERR! command \"node\" \"/usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /home/jorik/work/sass-loader/node_modules/node-sass\ngyp ERR! node -v v0.10.26\ngyp ERR! node-gyp -v v0.12.2\ngyp ERR! not ok \nBuild failed\nnpm ERR! node-sass@0.8.4 install: `node build.js`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the node-sass@0.8.4 install script.\nnpm ERR! This is most likely a problem with the node-sass package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node build.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls node-sass\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! System Linux 3.13.0-24-generic\nnpm ERR! command \"/usr/bin/node\" \"/usr/bin/npm\" \"install\"\nnpm ERR! cwd /home/jorik/work/sass-loader\nnpm ERR! node -v v0.10.26\nnpm ERR! npm -v 1.4.3\nnpm ERR! code ELIFECYCLE\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/jorik/work/sass-loader/npm-debug.log\nnpm ERR! not ok code 0\n```\n. Yes that must be it. I only took a small look at it :-). I can try fix the issue, or give you some debug data, on my Mac at the office today.\n. I see that the issue is solved, could you give me a message when it is released? \n. i'm on it!\n. Released as 0.2.0, and on npm!\nhttps://www.npmjs.org/package/sass-loader\n. alright, i still have to fix #2, then i will release the next version. \n. Release it anyway, #2 might take a while...\nit will be released under 0.1.0, since it's a breaking change.\n. I guess this has something to do with libsass, the loader doesn't do anything with the CSS except passing it to libsass.\n. sure!\n. https://www.npmjs.org/package/sass-loader @ 0.1.1\n. I don't see an option in the node-sass api to inject vars, so for now this isn't possible. \n\nA way you could do this anyway is to create some var-files: `vars.dev.scss`, `vars.prod.scss` and depending on the type of build clone one named as `vars.scss` . \nThen just `@import \"vars\";` in your stylesheet and it should work...\n. The sass-loader doens't have this bug, maybe you didn't made a reference to the code?\n. looks like a problem with libsass!\n. https://github.com/sass/node-sass/issues/337\n. i guess so, the sass loader doesnt do anything with this...\n. Looks like libsass now returns a bit more clearer errors. The loader just passes these to webpack.\n. Great!\n. Merged it! Can you verify the workings? @Chrazy \n. Did you test it? I don't like publishing versions that could contain bugs :-)\n. Great, will release it in a moment.\n. This can be done by setting the option to the query like this;\n\n`sass-loader?indentedSyntax=sass`\n\nReal example; https://github.com/jtangelder/sass-loader/blob/master/test/src/entry.js#L2\n. sounds like an issue with libsass.\n. Fixed, see #21 \n. merged, will take some time this thursday to fix some issues and release the next version.\n\nthanks for the PR!\n. You should ask this at libsass/nodesass/compass. This loader just implements node-sass.\n. Cool, i've made you guys collabrators of the repo. I think i should add this to the NPM entry as well, can i have your user accounts for that?\n. Done! https://www.npmjs.org/package/sass-loader\n\nThanks :-)\n. I think this shouldn't be in this sass loader, but in a theme-loader. The sass loader only serves one goal; parse sass to css.\n. I've enabled travis! Small setup at https://github.com/jtangelder/sass-loader/pull/276\n. The caret (^) symbol already does this. https://docs.npmjs.com/misc/semver#caret-ranges-123-025-004\n. @mattlewis92 example of which loaders do this?. Sorry @harounb, I'm having some git issues on my machine, wasn't able to enrich this PR. Still thanks!. Thanks, but 4.1.1 just released with 2.2.0RC as a peerDep \ud83d\udc4d . :coffee: done\n. ok! i'll take a look at it tomorrow! Hope i got some time left to add this...\n. Hm, i cant get your clone to work either on my Ubuntu laptop....\n\n```\n...........npm install output................\nnpm http ..............\n\n\n> node-sass@0.8.4 install /home/jorik/work/sass-loader/node_modules/node-sass\n> node build.js\n\nmake: Entering directory `/home/jorik/work/sass-loader/node_modules/node-sass/build'\n  CXX(target) Release/obj.target/binding/binding.o\nIn file included from ../binding.cpp:6:0:\n../sass_context_wrapper.h:1:36: fatal error: libsass/sass_interface.h: No such file or directory\n #include \"libsass/sass_interface.h\"\n                                    ^\ncompilation terminated.\nmake: *** [Release/obj.target/binding/binding.o] Error 1\nmake: Leaving directory `/home/jorik/work/sass-loader/node_modules/node-sass/build'\ngyp ERR! build error \ngyp ERR! stack Error: `make` failed with exit code: 2\ngyp ERR! stack     at ChildProcess.onExit (/usr/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:267:23)\ngyp ERR! stack     at ChildProcess.EventEmitter.emit (events.js:98:17)\ngyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:797:12)\ngyp ERR! System Linux 3.13.0-24-generic\ngyp ERR! command \"node\" \"/usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\ngyp ERR! cwd /home/jorik/work/sass-loader/node_modules/node-sass\ngyp ERR! node -v v0.10.26\ngyp ERR! node-gyp -v v0.12.2\ngyp ERR! not ok \nBuild failed\nnpm ERR! node-sass@0.8.4 install: `node build.js`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the node-sass@0.8.4 install script.\nnpm ERR! This is most likely a problem with the node-sass package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node build.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls node-sass\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! System Linux 3.13.0-24-generic\nnpm ERR! command \"/usr/bin/node\" \"/usr/bin/npm\" \"install\"\nnpm ERR! cwd /home/jorik/work/sass-loader\nnpm ERR! node -v v0.10.26\nnpm ERR! npm -v 1.4.3\nnpm ERR! code ELIFECYCLE\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/jorik/work/sass-loader/npm-debug.log\nnpm ERR! not ok code 0\n```\n. Yes that must be it. I only took a small look at it :-). I can try fix the issue, or give you some debug data, on my Mac at the office today.\n. I see that the issue is solved, could you give me a message when it is released? \n. i'm on it!\n. Released as 0.2.0, and on npm!\nhttps://www.npmjs.org/package/sass-loader\n. alright, i still have to fix #2, then i will release the next version. \n. Release it anyway, #2 might take a while...\nit will be released under 0.1.0, since it's a breaking change.\n. I guess this has something to do with libsass, the loader doesn't do anything with the CSS except passing it to libsass.\n. sure!\n. https://www.npmjs.org/package/sass-loader @ 0.1.1\n. I don't see an option in the node-sass api to inject vars, so for now this isn't possible. \n\nA way you could do this anyway is to create some var-files: `vars.dev.scss`, `vars.prod.scss` and depending on the type of build clone one named as `vars.scss` . \nThen just `@import \"vars\";` in your stylesheet and it should work...\n. The sass-loader doens't have this bug, maybe you didn't made a reference to the code?\n. looks like a problem with libsass!\n. https://github.com/sass/node-sass/issues/337\n. i guess so, the sass loader doesnt do anything with this...\n. Looks like libsass now returns a bit more clearer errors. The loader just passes these to webpack.\n. Great!\n. Merged it! Can you verify the workings? @Chrazy \n. Did you test it? I don't like publishing versions that could contain bugs :-)\n. Great, will release it in a moment.\n. This can be done by setting the option to the query like this;\n\n`sass-loader?indentedSyntax=sass`\n\nReal example; https://github.com/jtangelder/sass-loader/blob/master/test/src/entry.js#L2\n. sounds like an issue with libsass.\n. Fixed, see #21 \n. merged, will take some time this thursday to fix some issues and release the next version.\n\nthanks for the PR!\n. You should ask this at libsass/nodesass/compass. This loader just implements node-sass.\n. Cool, i've made you guys collabrators of the repo. I think i should add this to the NPM entry as well, can i have your user accounts for that?\n. Done! https://www.npmjs.org/package/sass-loader\n\nThanks :-)\n. I think this shouldn't be in this sass loader, but in a theme-loader. The sass loader only serves one goal; parse sass to css.\n. I've enabled travis! Small setup at https://github.com/jtangelder/sass-loader/pull/276\n. The caret (^) symbol already does this. https://docs.npmjs.com/misc/semver#caret-ranges-123-025-004\n. @mattlewis92 example of which loaders do this?. Sorry @harounb, I'm having some git issues on my machine, wasn't able to enrich this PR. Still thanks!. Thanks, but 4.1.1 just released with 2.2.0RC as a peerDep \ud83d\udc4d . ",
    "maspwr": "Is this currently being worked on or is it blocked by something?\n. Thanks @jhnns.  So what does that mean practically for sass-loader?  `@import` will not use webpack's pipeline (unless it is a CSS import that gets passed to css-loader).  What else?\n\nIt would probably be nice to add a caveat to the documentation for this loader until something changes with libsass.\n. Thanks, @jhnns.  Check out https://github.com/jtangelder/sass-loader/pull/5 and add to it if you want.\n. @jhnns, awesome!\n. Awesome!\n. Hi @jtangelder.  Can you please publish a new version on npm?\n. Awesome, thanks!\n. @jhnns Wow! Awesome job!\n\nThanks @jhnns and @jtangelder for maintaining this loader so well!\n. A `0.5.1` might be appropriate. Would moving `node-sass` to `peerDependencies` and changing to the next closest version available in npm work?\n\nI also filed https://github.com/sass/node-sass/issues/820.\n. Is this currently being worked on or is it blocked by something?\n. Thanks @jhnns.  So what does that mean practically for sass-loader?  `@import` will not use webpack's pipeline (unless it is a CSS import that gets passed to css-loader).  What else?\n\nIt would probably be nice to add a caveat to the documentation for this loader until something changes with libsass.\n. Thanks, @jhnns.  Check out https://github.com/jtangelder/sass-loader/pull/5 and add to it if you want.\n. @jhnns, awesome!\n. Awesome!\n. Hi @jtangelder.  Can you please publish a new version on npm?\n. Awesome, thanks!\n. @jhnns Wow! Awesome job!\n\nThanks @jhnns and @jtangelder for maintaining this loader so well!\n. A `0.5.1` might be appropriate. Would moving `node-sass` to `peerDependencies` and changing to the next closest version available in npm work?\n\nI also filed https://github.com/sass/node-sass/issues/820.\n. ",
    "sokra": ":smile: yeah\n. yep, url encoding `%20`\n. What should be wrong with the webpack-dev-server?\n. awesome \ud83d\udc4d . :smile: yeah\n. yep, url encoding `%20`\n. What should be wrong with the webpack-dev-server?\n. awesome \ud83d\udc4d . ",
    "ryanseddon": "It got released today can we get this in.\n. Given this sass file:\n\n``` css\n@import \"Thing\";\n@import \"OtherThing\";\n```\n\nI import this css using the css-loader as I want it packaged up into my js file. \n\n``` js\nvar css = require('css!sass!file-above');\n```\n\nShould the sass-loader take each of those imports and create another module that the parent module should reference? It doesn't do this and creates a string, I have lots of components imported more than once. \n\n``` js\nmodule.exports = \"css{}\" + __webpack_require__('Thing') + __webpack_require__('OtherThing');\n```\n\nHow would I get sass-loader to do that? Is it possible?\n. It got released today can we get this in.\n. Given this sass file:\n\n``` css\n@import \"Thing\";\n@import \"OtherThing\";\n```\n\nI import this css using the css-loader as I want it packaged up into my js file. \n\n``` js\nvar css = require('css!sass!file-above');\n```\n\nShould the sass-loader take each of those imports and create another module that the parent module should reference? It doesn't do this and creates a string, I have lots of components imported more than once. \n\n``` js\nmodule.exports = \"css{}\" + __webpack_require__('Thing') + __webpack_require__('OtherThing');\n```\n\nHow would I get sass-loader to do that? Is it possible?\n. ",
    "lukebrooker": "I think the readme needs to be updated to represent this update?\n\nAlso, one other question, How does this handle imports if the same file is \"imported\" twice? Does it only include it once?\n. @ryanseddon This is one of the reasons I have started using rework & rework-npm instead of Sass.\n. I think the readme needs to be updated to represent this update?\n\nAlso, one other question, How does this handle imports if the same file is \"imported\" twice? Does it only include it once?\n. @ryanseddon This is one of the reasons I have started using rework & rework-npm instead of Sass.\n. ",
    "Chrazy": "I'm having problems with the loader when the build fails from an error in an import. When the imported file is saved (and the compile error is fixed) it won't build unless you save the main file (with all the imports). Something with the files not being resolved and just marking them as dependencies not being enough?\n. We went back to building our sass with gulp and requiring the built css file instead of using the loader because of this issue. I pretty much tried the same hack as you did but I couldn't get any further than that.\n. Can you publish a new version?\n. Not yet, it would be easier to test if I could download the new changes from npm :)\nI understand if you don't want to publish it as stable but add a beta flag to it.\n. Sorry, I forgot about this after my last comment. I did some initial testing and it seems to fix the issue we were struggling with.\n. I'm having problems with the loader when the build fails from an error in an import. When the imported file is saved (and the compile error is fixed) it won't build unless you save the main file (with all the imports). Something with the files not being resolved and just marking them as dependencies not being enough?\n. We went back to building our sass with gulp and requiring the built css file instead of using the loader because of this issue. I pretty much tried the same hack as you did but I couldn't get any further than that.\n. Can you publish a new version?\n. Not yet, it would be easier to test if I could download the new changes from npm :)\nI understand if you don't want to publish it as stable but add a beta flag to it.\n. Sorry, I forgot about this after my last comment. I did some initial testing and it seems to fix the issue we were struggling with.\n. ",
    "swordsreversed": "So is this issue fixed? I can't use @import from my node_modules folder.\n\n`@import \"twbs/sass/bootstrap.sass\";`\n\n```\n{ \n  test: /\\.scss$/, \n  loader: 'style!css!sass?outputStyle=expanded&includePaths[]=' + \n  (path.resolve(__dirname, './node_modules/')) },\n{\n```\n\nAlso tried with the ~ at the start of the @import path.\n\nThanks.\n. So is this issue fixed? I can't use @import from my node_modules folder.\n\n`@import \"twbs/sass/bootstrap.sass\";`\n\n```\n{ \n  test: /\\.scss$/, \n  loader: 'style!css!sass?outputStyle=expanded&includePaths[]=' + \n  (path.resolve(__dirname, './node_modules/')) },\n{\n```\n\nAlso tried with the ~ at the start of the @import path.\n\nThanks.\n. ",
    "mrmurphy": "as mentioned previously, if this issue is fixed, shouldn't the readme be updated to reflect that all is well now?\n. as mentioned previously, if this issue is fixed, shouldn't the readme be updated to reflect that all is well now?\n. ",
    "volkanunsal": "Looks like the issue the README references has been [merged into the main line branch.](https://github.com/sass/libsass/issues/21#issuecomment-63387229)\n. Sorry, my mistake, the master branch does not throw this error.\n. Here is an example of an import:\n\n``` scss\n@import \"components/mixins\";\n```\n. Adding `UV_THREADPOOL_SIZE=100` solved it for me.\n. I haven't tried that. This one seems to work, but I'd prefer if the package had that solution already.\n. Looks like the issue the README references has been [merged into the main line branch.](https://github.com/sass/libsass/issues/21#issuecomment-63387229)\n. Sorry, my mistake, the master branch does not throw this error.\n. Here is an example of an import:\n\n``` scss\n@import \"components/mixins\";\n```\n. Adding `UV_THREADPOOL_SIZE=100` solved it for me.\n. I haven't tried that. This one seems to work, but I'd prefer if the package had that solution already.\n. ",
    "davide": "Thanks! I'll continue troubleshooting on libsass.\n. libsass working perfectly, as is node-sass for the sass input I was feeding in.\nThe issue seems to be the result of chaining sass-loader and css-loader. This last one tries to parse the css content passed in but what sass-loader gives it is:\n\"module.exports = \" + JSON.stringify(css)\n\nAny hints? :)\n. The issue is already fixed on master with this commit:\nhttps://github.com/jtangelder/sass-loader/commit/6c9ccd52cdbbf82ed464b3c5b9576221d923a60b\n\nThanks!\n. Thanks! I'll continue troubleshooting on libsass.\n. libsass working perfectly, as is node-sass for the sass input I was feeding in.\nThe issue seems to be the result of chaining sass-loader and css-loader. This last one tries to parse the css content passed in but what sass-loader gives it is:\n\"module.exports = \" + JSON.stringify(css)\n\nAny hints? :)\n. The issue is already fixed on master with this commit:\nhttps://github.com/jtangelder/sass-loader/commit/6c9ccd52cdbbf82ed464b3c5b9576221d923a60b\n\nThanks!\n. ",
    "glebm": "I am [using](https://github.com/glebm/gulp-webpack-react-bootstrap-sass-template/blob/master/webpack.config.litcoffee#output-css-to-css-files) this together with [ExtractTextPlugin](https://github.com/webpack/extract-text-webpack-plugin) to output `.css` files. I cannot figure out how to enable source maps either.\n. I am [using](https://github.com/glebm/gulp-webpack-react-bootstrap-sass-template/blob/master/webpack.config.litcoffee#output-css-to-css-files) this together with [ExtractTextPlugin](https://github.com/webpack/extract-text-webpack-plugin) to output `.css` files. I cannot figure out how to enable source maps either.\n. ",
    "mllocs": "I'm trying node-sass `sourceComments` and `sourceMap` options but without success\nhttps://github.com/sass/node-sass\n. I'm trying node-sass `sourceComments` and `sourceMap` options but without success\nhttps://github.com/sass/node-sass\n. ",
    "jeffling": "I have it sort of working, with ExtractTextPlugin no less  @glebm \n\n1) use node-sass sourceMap option `sourceMap=map` in sass-loader (probably doesn't do anything)\n2) use css-loader sourceMap option `sourceMap` (this might be what you were missing)\n3) choose your favourite source map option in the `devtools` option. I've used it with `sourcemap` and `inline-source-map`\n. @nickdima you're right, it's basically just the compiled css. The original question asked for 'traced back to the source scss file', and so far I got the filename, not the actual sass code. It's helpful, but it would be nice to be able to use chrome workspaces to directly edit the file though.\n. @nickdima @Todilo what I've been doing is to just use webpack in watch mode instead of dev-server, and using http://livejs.com/ (or fb's flo or any other css reload plugin) to get live reloading. \n. @Todilo if you use inline source maps, it should be updated I think. \n. #31 would solve this but it's a ways off. I ended up making sure that only mixins and variables and other pure sass code are used for imports. \n. 1.2.3 fixes an annoying problem with compiling in CI some CI servers like travis and circle, so I would definitely prefer for it to be used. \n. Weird, I have the same problem and fixed it by downgrading to 0.5.0. Tried 0.6.0 and it didn't work. \n. @haustraliaer nice! :) i was going going to do it this weekend but ran out of time. Would really love to get this resolved so we can stop adding 30 sass include paths into our build. Let me know if you need any help! \n. I had this problem too, and I ended up having to do this: https://github.com/jeffling/namespace-css-loader \n\ncss-loader also has a way to do it that wasn't compatible with our project. \n. ^ That's probably the way if you load your sass from the top down :) \n. I have it sort of working, with ExtractTextPlugin no less  @glebm \n\n1) use node-sass sourceMap option `sourceMap=map` in sass-loader (probably doesn't do anything)\n2) use css-loader sourceMap option `sourceMap` (this might be what you were missing)\n3) choose your favourite source map option in the `devtools` option. I've used it with `sourcemap` and `inline-source-map`\n. @nickdima you're right, it's basically just the compiled css. The original question asked for 'traced back to the source scss file', and so far I got the filename, not the actual sass code. It's helpful, but it would be nice to be able to use chrome workspaces to directly edit the file though.\n. @nickdima @Todilo what I've been doing is to just use webpack in watch mode instead of dev-server, and using http://livejs.com/ (or fb's flo or any other css reload plugin) to get live reloading. \n. @Todilo if you use inline source maps, it should be updated I think. \n. #31 would solve this but it's a ways off. I ended up making sure that only mixins and variables and other pure sass code are used for imports. \n. 1.2.3 fixes an annoying problem with compiling in CI some CI servers like travis and circle, so I would definitely prefer for it to be used. \n. Weird, I have the same problem and fixed it by downgrading to 0.5.0. Tried 0.6.0 and it didn't work. \n. @haustraliaer nice! :) i was going going to do it this weekend but ran out of time. Would really love to get this resolved so we can stop adding 30 sass include paths into our build. Let me know if you need any help! \n. I had this problem too, and I ended up having to do this: https://github.com/jeffling/namespace-css-loader \n\ncss-loader also has a way to do it that wasn't compatible with our project. \n. ^ That's probably the way if you load your sass from the top down :) \n. ",
    "nickdima": "@jeffling are you sure sass source maps are supported?\nFrom looking at the code it doesn't seem so. cc @jtangelder \n. The reason source maps are not supported is that `sass-loader` passes the actual sass content to `libsass` and not a file, and it seems that `libsass` generates source maps only when a file is provided.\nI couldn't find this documented in the `libsass` wiki but there's a [comment](https://github.com/sass/libsass/issues/255#issuecomment-32755577) by @svnieuw that talks about this.\n\n> libsass currently only supports source maps with sass_file_context. The source file (input path) can only be specified as path and not as data string.\n\nMaybe we should specify this in the readme? cc @akiran @jhnns\n. I was also looking at this approach, I can try to make a PR.\n. OK, a quick update on this. The approach is doable the only barrier being that `node-sass` needs to support inlined file contents in the source maps. There's a discussion about it [here](https://github.com/sass/node-sass/issues/363).\n. How are you guys live reloading the css when using `ExtractTextPlugin` for having source maps support? I'm asking this since HMR doesn't work with `ExtractTextPlugin`.\n. But on dev you would want both source maps and hot/live reloading. How do you do that?\n. try like this:\n\n``` javascript\n{ test: /\\.scss$/, loader: \"style!css!sass?includePaths[]=\" + JSON.stringify(bourbon)},\n```\n. Ah, ok, the error is in your sass files. The import line should look like this: `@import 'bourbon';`\nAnd remove the `JSON.stringify`, it was ok in the first place, just fix the import. ;) \n. I investigated a bit trying various versions of `node-sass`.\nIt seems that the segmentation fault problem happens on `node-sass` > `1.1.0`. With the previous version, which is `1.0.3` seems to be working fine.\n\nThe import problem was resolved with an update to `foundation`, so ignore that.\n. It seems to be fixed with the latest `node-sass`.\nI'm closing this.\n. @jhnns I'm still seeing this problem even with `sass-loader@0.6.` and `node-sass@2.1.1`\nIs there some feature I shouldn't be using or something?\n. @jeffling are you sure sass source maps are supported?\nFrom looking at the code it doesn't seem so. cc @jtangelder \n. The reason source maps are not supported is that `sass-loader` passes the actual sass content to `libsass` and not a file, and it seems that `libsass` generates source maps only when a file is provided.\nI couldn't find this documented in the `libsass` wiki but there's a [comment](https://github.com/sass/libsass/issues/255#issuecomment-32755577) by @svnieuw that talks about this.\n\n> libsass currently only supports source maps with sass_file_context. The source file (input path) can only be specified as path and not as data string.\n\nMaybe we should specify this in the readme? cc @akiran @jhnns\n. I was also looking at this approach, I can try to make a PR.\n. OK, a quick update on this. The approach is doable the only barrier being that `node-sass` needs to support inlined file contents in the source maps. There's a discussion about it [here](https://github.com/sass/node-sass/issues/363).\n. How are you guys live reloading the css when using `ExtractTextPlugin` for having source maps support? I'm asking this since HMR doesn't work with `ExtractTextPlugin`.\n. But on dev you would want both source maps and hot/live reloading. How do you do that?\n. try like this:\n\n``` javascript\n{ test: /\\.scss$/, loader: \"style!css!sass?includePaths[]=\" + JSON.stringify(bourbon)},\n```\n. Ah, ok, the error is in your sass files. The import line should look like this: `@import 'bourbon';`\nAnd remove the `JSON.stringify`, it was ok in the first place, just fix the import. ;) \n. I investigated a bit trying various versions of `node-sass`.\nIt seems that the segmentation fault problem happens on `node-sass` > `1.1.0`. With the previous version, which is `1.0.3` seems to be working fine.\n\nThe import problem was resolved with an update to `foundation`, so ignore that.\n. It seems to be fixed with the latest `node-sass`.\nI'm closing this.\n. @jhnns I'm still seeing this problem even with `sass-loader@0.6.` and `node-sass@2.1.1`\nIs there some feature I shouldn't be using or something?\n. ",
    "akiran": "gulp-sass had a similar problem https://github.com/dlmanning/gulp-sass/issues/8\nAfter digging in to gulp-sass code and docs, \nI observed that file path is passed to node-sass instead of data if source maps is enabled.\ngulp-sass either inlines source maps or uses gulp-sourcemaps to create a separate file.\n\nCan we follow similar approach to sass-loader also ?\n. @nickdima Thanks\n. Hi,\n\nI added a git repo to show this problem\nhttps://github.com/akiran/sass-loader-debug.git\n\nAppreciate your help.\n\nThanks\nKiran\n. Hi,\n\nI went through the sass-loader source code found the reason for this issue.\nDependencies are added in the success handler but not added in error handler.\nSo, webpack-dev-server is stop tracking the dependencies if error ocurr.\n\nTo test this I added the dependency path manually in error handler. It is working perfectly.\n\nThis issue can be fixed by adding dependencies in error handler.\nBut opt.stats.includedFiles is empty in error handler.\n\nWhat is the best way to add dependencies ?\n. I fixed this issue in my fork and submitted a pull request\nhttps://github.com/akiran/sass-loader.git\n. @tomchentw,  some projects may use other packages like gulp-sass, grunt-sass along with sass-loader, which may depend on different node-sass version.  Making node-sass as a peerDependency may cause problem  to those projects.\n\nIf there is any problem with latest sass-loader  (in your case, particular node-sass version dependency ), you can always use previously working sass-loader version until the issues in new version are fixed. \n. yes\n. webpack-dev-server won't work if we mark dependencies only in success handler.\n\nIf sass-graph has problems, we have to find a better solution to mark dependencies in both success and error cases.\n. I tried to debug this issue and found that value of stats.includedFiles is incorrect with node-sass version 1.2.2.\nOne of the dependencies is missing and additional 'stdin'  is found in stats.includedFiles\nFiled an issue:  https://github.com/sass/node-sass/issues/522\n. @patrio  Issues with sass-graph are fixed in https://github.com/jtangelder/sass-loader/pull/35\nAs you mentioned, sass-graph dependency will be removed after this feature https://github.com/sass/libsass/issues/638 is supported in node-sass\n. @appsforartists \nI am trying to debug this issue\nCan you post the format of your import statements ?\n. I fixed sass-graph and sass-loader to support different formats of importing\nTry this https://github.com/akiran/sass-loader.git by installing from git and let me know if it works for you \n. @cody \nCan you point me the code snippet of your fix ?\n\nIn your first example, you are using absolute paths.  You have to add src directory in include paths of webpack config file or use relative paths.  \n  loader: \"style!css!sass?includePaths[]=\" + srcPath\n\nI tested with different formats of imports\nhttps://github.com/akiran/sass-graph/blob/master/test/test.parse-imports.js\nYou other examples are taken care in these testcases.\n. This issue is fixed in sass-loader 0.3.1\n. @jhnns,  Nice work on tests.\nWe can merge it.  \n. Yes, I would like to join\n. My npm account [akiran](https://www.npmjs.org/~akiran)\n. Cool\n. We can remove sass-graph if libsass with this feature is supported by node-sass\nhttps://github.com/sass/libsass/issues/638.\n\nI will test it and  see.\n. I recommend you use a file  _common.scss (or similar name)  and all common styles and imports in it.\n\nImport this common.scss in other scss files.\nThis will also make you scss more manageable. You can edit in one file instead of all the files. \n. @justin808, \nWe submitted a pull request to sass-graph to fix some of the issues with sass-loader.\nSince npm release was not made at that time, we tagged it to git commit.\n\nNow @xzyfer is maintaining sass-graph and an npm release was made recently.\nWe should test it with sass-loader and migrate to latest version of sass-graph.\n. Now sass-graph is maintained at\nhttps://github.com/xzyfer/sass-graph\n. Did latest version of sass-graph fixed your issues ?\n\nThen we can update sass-loader and make an npm release.\n. Thanks @justin808 \n. @justin808,\n\nI tested sass-loader with the fix\nI got below error\n\n```\n /home/kiran/node_modules/sass-loader/index.js:43\n        callback(null, result.css, result.map);\n        ^\nTypeError: object is not a function\n```\n\nAre you seeing any errors in your project ?\n. I just update sass-loader in my project.\n\nMay be something wrong in my setup. I will test it and let you know\n. @justin808, I tested with your tutorial. Its workiing fine.\n\nThe errors I am getting is because of server-side rendering stuff in my project.\nI thing we can make npm release with this.\n\n@jhnns  What do you think ?\n. Yes , Version number is marked beta. should we publish it ?\n. @jhnns Since node-sass is out of beta, we should also remove beta tag.\nIf there are issues we can release minor versions\n. gulp-sass had a similar problem https://github.com/dlmanning/gulp-sass/issues/8\nAfter digging in to gulp-sass code and docs, \nI observed that file path is passed to node-sass instead of data if source maps is enabled.\ngulp-sass either inlines source maps or uses gulp-sourcemaps to create a separate file.\n\nCan we follow similar approach to sass-loader also ?\n. @nickdima Thanks\n. Hi,\n\nI added a git repo to show this problem\nhttps://github.com/akiran/sass-loader-debug.git\n\nAppreciate your help.\n\nThanks\nKiran\n. Hi,\n\nI went through the sass-loader source code found the reason for this issue.\nDependencies are added in the success handler but not added in error handler.\nSo, webpack-dev-server is stop tracking the dependencies if error ocurr.\n\nTo test this I added the dependency path manually in error handler. It is working perfectly.\n\nThis issue can be fixed by adding dependencies in error handler.\nBut opt.stats.includedFiles is empty in error handler.\n\nWhat is the best way to add dependencies ?\n. I fixed this issue in my fork and submitted a pull request\nhttps://github.com/akiran/sass-loader.git\n. @tomchentw,  some projects may use other packages like gulp-sass, grunt-sass along with sass-loader, which may depend on different node-sass version.  Making node-sass as a peerDependency may cause problem  to those projects.\n\nIf there is any problem with latest sass-loader  (in your case, particular node-sass version dependency ), you can always use previously working sass-loader version until the issues in new version are fixed. \n. yes\n. webpack-dev-server won't work if we mark dependencies only in success handler.\n\nIf sass-graph has problems, we have to find a better solution to mark dependencies in both success and error cases.\n. I tried to debug this issue and found that value of stats.includedFiles is incorrect with node-sass version 1.2.2.\nOne of the dependencies is missing and additional 'stdin'  is found in stats.includedFiles\nFiled an issue:  https://github.com/sass/node-sass/issues/522\n. @patrio  Issues with sass-graph are fixed in https://github.com/jtangelder/sass-loader/pull/35\nAs you mentioned, sass-graph dependency will be removed after this feature https://github.com/sass/libsass/issues/638 is supported in node-sass\n. @appsforartists \nI am trying to debug this issue\nCan you post the format of your import statements ?\n. I fixed sass-graph and sass-loader to support different formats of importing\nTry this https://github.com/akiran/sass-loader.git by installing from git and let me know if it works for you \n. @cody \nCan you point me the code snippet of your fix ?\n\nIn your first example, you are using absolute paths.  You have to add src directory in include paths of webpack config file or use relative paths.  \n  loader: \"style!css!sass?includePaths[]=\" + srcPath\n\nI tested with different formats of imports\nhttps://github.com/akiran/sass-graph/blob/master/test/test.parse-imports.js\nYou other examples are taken care in these testcases.\n. This issue is fixed in sass-loader 0.3.1\n. @jhnns,  Nice work on tests.\nWe can merge it.  \n. Yes, I would like to join\n. My npm account [akiran](https://www.npmjs.org/~akiran)\n. Cool\n. We can remove sass-graph if libsass with this feature is supported by node-sass\nhttps://github.com/sass/libsass/issues/638.\n\nI will test it and  see.\n. I recommend you use a file  _common.scss (or similar name)  and all common styles and imports in it.\n\nImport this common.scss in other scss files.\nThis will also make you scss more manageable. You can edit in one file instead of all the files. \n. @justin808, \nWe submitted a pull request to sass-graph to fix some of the issues with sass-loader.\nSince npm release was not made at that time, we tagged it to git commit.\n\nNow @xzyfer is maintaining sass-graph and an npm release was made recently.\nWe should test it with sass-loader and migrate to latest version of sass-graph.\n. Now sass-graph is maintained at\nhttps://github.com/xzyfer/sass-graph\n. Did latest version of sass-graph fixed your issues ?\n\nThen we can update sass-loader and make an npm release.\n. Thanks @justin808 \n. @justin808,\n\nI tested sass-loader with the fix\nI got below error\n\n```\n /home/kiran/node_modules/sass-loader/index.js:43\n        callback(null, result.css, result.map);\n        ^\nTypeError: object is not a function\n```\n\nAre you seeing any errors in your project ?\n. I just update sass-loader in my project.\n\nMay be something wrong in my setup. I will test it and let you know\n. @justin808, I tested with your tutorial. Its workiing fine.\n\nThe errors I am getting is because of server-side rendering stuff in my project.\nI thing we can make npm release with this.\n\n@jhnns  What do you think ?\n. Yes , Version number is marked beta. should we publish it ?\n. @jhnns Since node-sass is out of beta, we should also remove beta tag.\nIf there are issues we can release minor versions\n. ",
    "offminded": "Work in progress [here](/sass/node-sass/commit/d58c303c3d149a8c6a58ff88e7318941c21fda74)\n. Work in progress [here](/sass/node-sass/commit/d58c303c3d149a8c6a58ff88e7318941c21fda74)\n. ",
    "cowwoc": "@nickdima @offminded Any updates?\n. @nickdima @offminded Any updates?\n. ",
    "kyle-johnson": "This works for me:\n\n```\n{ test: /\\.scss$/, loader: ExtractTextPlugin.extract('style-loader',\n 'css-loader?sourceMap!sass-loader?outputStyle=expanded&sourceMap=true&sourceMapContents=true') }\n```\n. This works for me:\n\n```\n{ test: /\\.scss$/, loader: ExtractTextPlugin.extract('style-loader',\n 'css-loader?sourceMap!sass-loader?outputStyle=expanded&sourceMap=true&sourceMapContents=true') }\n```\n. ",
    "schlaup": "It almost works...\n\nWith aboves config Chrome displays \"stdin\" as the source.\n\nFile name and path is missing. You need to change \"sass-loader/index.js\":\n\n```\n...\n\n    opt.success = function (result) {\n        markDependencies();\n        var sourceMap = {};\n        if (typeof result.map === 'string' && result.map !== '{}') {\n            var sourceFilename = utils.getRemainingRequest(this);\n            var current = utils.getCurrentRequest(this);\n            var sourceMap = JSON.parse(result.map);\n            sourceMap.sources = [sourceFilename];\n            sourceMap.file = current;\n        }\n        callback(null, result.css, sourceMap);\n    }.bind(this);\n\n...\n```\n\nAfter this change you can map the source in Chrome's workspace and edit / save the file in Chrome as well.\n\nCould you add this to the official NPM release?\n\nThanks!\n. It almost works...\n\nWith aboves config Chrome displays \"stdin\" as the source.\n\nFile name and path is missing. You need to change \"sass-loader/index.js\":\n\n```\n...\n\n    opt.success = function (result) {\n        markDependencies();\n        var sourceMap = {};\n        if (typeof result.map === 'string' && result.map !== '{}') {\n            var sourceFilename = utils.getRemainingRequest(this);\n            var current = utils.getCurrentRequest(this);\n            var sourceMap = JSON.parse(result.map);\n            sourceMap.sources = [sourceFilename];\n            sourceMap.file = current;\n        }\n        callback(null, result.css, sourceMap);\n    }.bind(this);\n\n...\n```\n\nAfter this change you can map the source in Chrome's workspace and edit / save the file in Chrome as well.\n\nCould you add this to the official NPM release?\n\nThanks!\n. ",
    "adri": "I can confirm the solution from @kyle-johnson. Thanks!\n. I use two different configurations (dev and prod). \n\n> On 03.04.2015, at 17:01, Nick Dima notifications@github.com wrote:\n> \n> How are you guys live reloading the css when using ExtractTextPlugin for having source maps support? I'm asking this since HMR doesn't work with ExtractTextPlugin.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. I can confirm the solution from @kyle-johnson. Thanks!\n. I use two different configurations (dev and prod). \n\n> On 03.04.2015, at 17:01, Nick Dima notifications@github.com wrote:\n> \n> How are you guys live reloading the css when using ExtractTextPlugin for having source maps support? I'm asking this since HMR doesn't work with ExtractTextPlugin.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "Todilo": "@nickdima did you ever find a solution to this? I would really like hot/live reloading if posible, it's such a nice feature.\n. @jeffling ok, I was thinking of look into if there was a tool for that instead since I do not use the dev-server atm (getting everything working isomorphic in mvc5 is no simple task). Thank you I will try livejs.com. Guess I only need the css changes updates as reloading entire page when working with SPA seems like a bad idea.\n\nOnly downside is that the scss sourcemap is not updated, any way to deal with that?\n. @jeffling  dont know how to set that up. However since I do most development in Chrome I setup a mapping from the the .scss from the server to the local location on the filesystem. Then I can both make changes in the browser(directly changin the scss files) as well as make changes in visual studio.\n\nStill if I make changes in VS I dont get updated .scss file but well, whatever :) (if you dont have an easy guide on how to set tha tup).\n\nEdit: Now I read the documentation again and saw the setting you were talking about:\n    // must be 'source-map' or 'inline-source-map'\n    devtool: 'source-map',\n\nNow it works perfectly. I can change the sourcecode from .scss / browser and everything is updated live as well as correctly! Perfect!\n. @nickdima did you ever find a solution to this? I would really like hot/live reloading if posible, it's such a nice feature.\n. @jeffling ok, I was thinking of look into if there was a tool for that instead since I do not use the dev-server atm (getting everything working isomorphic in mvc5 is no simple task). Thank you I will try livejs.com. Guess I only need the css changes updates as reloading entire page when working with SPA seems like a bad idea.\n\nOnly downside is that the scss sourcemap is not updated, any way to deal with that?\n. @jeffling  dont know how to set that up. However since I do most development in Chrome I setup a mapping from the the .scss from the server to the local location on the filesystem. Then I can both make changes in the browser(directly changin the scss files) as well as make changes in visual studio.\n\nStill if I make changes in VS I dont get updated .scss file but well, whatever :) (if you dont have an easy guide on how to set tha tup).\n\nEdit: Now I read the documentation again and saw the setting you were talking about:\n    // must be 'source-map' or 'inline-source-map'\n    devtool: 'source-map',\n\nNow it works perfectly. I can change the sourcecode from .scss / browser and everything is updated live as well as correctly! Perfect!\n. ",
    "teameh": "Thanks, this works indeed @kyle-johnson. But it doesn't if you would like to use React-Css-Modules. Any ideas? http://stackoverflow.com/questions/34434849/how-to-get-sourcemaps-working-for-react-css-modules\n. I've created a StackOverflow question (with 250 rep bounty \ud83d\ude05), maybe someone at SO knows the answer.. \n. Apparently my webpack config was not correct. I Used:\n\n`css?modules&importLoaders=1&localIdentName=[path]_[name]_[local]`\n\nbut `importLoaders` needs to be equal to the amount of loaders... \nI used both `sass` and `postcss`, so it should have been `2`:\n\n`css?modules&importLoaders=2&localIdentName=[path]_[name]_[local]`\n\nSee http://stackoverflow.com/a/40056496/672989\n. Thanks, this works indeed @kyle-johnson. But it doesn't if you would like to use React-Css-Modules. Any ideas? http://stackoverflow.com/questions/34434849/how-to-get-sourcemaps-working-for-react-css-modules\n. I've created a StackOverflow question (with 250 rep bounty \ud83d\ude05), maybe someone at SO knows the answer.. \n. Apparently my webpack config was not correct. I Used:\n\n`css?modules&importLoaders=1&localIdentName=[path]_[name]_[local]`\n\nbut `importLoaders` needs to be equal to the amount of loaders... \nI used both `sass` and `postcss`, so it should have been `2`:\n\n`css?modules&importLoaders=2&localIdentName=[path]_[name]_[local]`\n\nSee http://stackoverflow.com/a/40056496/672989\n. ",
    "JustMaier": "I started with what @kyle-johnson provided and then made it so it still had HMR in dev mode.\n\n``` js\nvar isDevelopment = process.env.ASPNETCORE_ENVIRONMENT === 'Development', //Replace with whatever you're using to determine if this is a dev env\n    extractCSS = new ExtractTextPlugin('site.css', {disable: isDevelopment}),\n    sassLoader = [\n        'css'+(isDevelopment? '?sourceMap=true': ''),\n        'postcss',\n        'sass'+(isDevelopment? '?outputStyle=expanded&sourceMap=true&sourceMapContents=true': '')\n    ];\n\nif(isDevelopment) sassLoader.unshift('style');\n\nvar config = {\n    module: {\n        loaders: [\n            { test: /\\.scss/, loader: extractCSS.extract(sassLoader) },\n        ]\n    },\n    plugins: [\n        extractCSS\n    ]\n};\n\nif(isDevelopment) config.devtool = 'inline-source-map';\n```\n. I started with what @kyle-johnson provided and then made it so it still had HMR in dev mode.\n\n``` js\nvar isDevelopment = process.env.ASPNETCORE_ENVIRONMENT === 'Development', //Replace with whatever you're using to determine if this is a dev env\n    extractCSS = new ExtractTextPlugin('site.css', {disable: isDevelopment}),\n    sassLoader = [\n        'css'+(isDevelopment? '?sourceMap=true': ''),\n        'postcss',\n        'sass'+(isDevelopment? '?outputStyle=expanded&sourceMap=true&sourceMapContents=true': '')\n    ];\n\nif(isDevelopment) sassLoader.unshift('style');\n\nvar config = {\n    module: {\n        loaders: [\n            { test: /\\.scss/, loader: extractCSS.extract(sassLoader) },\n        ]\n    },\n    plugins: [\n        extractCSS\n    ]\n};\n\nif(isDevelopment) config.devtool = 'inline-source-map';\n```\n. ",
    "pdee999": "Here's what I did:\r\n\r\n1) Make sure to include `devtool: \"source-map\",` before the module property.\r\n2)  Be sure to add the `?sourceMap` option to both the css-loader and sass-loader or pass a config property to the sass-loader.  \r\n\r\n`loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!sass-loader?sourceMap'),`\r\n\r\nor\r\n\r\n`loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!sass-loader?config=sassLoader'),\r\n\r\nsassLoader: {\r\n\r\n        outFile:        './httpdocs/wp-content/themes/PDFK/build/styles.bundle.css',\r\n\r\n        outputStyle:    'expanded',\r\n\r\n        sourceMap:      'true'\r\n\r\n    },`\r\n\r\nHere's what my webpack.config.js looks like: \r\n\r\n`var path = require('path');\r\n\r\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\r\n\r\nmodule.exports = {\r\n\r\n    entry: './httpdocs/wp-content/themes/PDFK/js/scripts.core.js',\r\n\r\n    output: {\r\n\r\n        path: './httpdocs/wp-content/themes/PDFK/build/',\r\n        filename: \"scripts.bundle.js\",\r\n\r\n    },\r\n\r\n    devtool: \"source-map\",\r\n\r\n    module: {\r\n\r\n        preLoaders: [\r\n\r\n            {\r\n\r\n                test: /.*\\.js$/,\r\n\r\n                exclude: [\r\n                    /(node_modules|vendor|wp-admin|wp-includes|plugins|twentyfifteen|twentysixteen|twentyseventeen|libs)/\r\n                ],\r\n\r\n                loader: 'jshint-loader'\r\n\r\n            }\r\n        ],\r\n\r\n        loaders: [\r\n            {\r\n\r\n                test: /.*\\.js$/,\r\n\r\n                exclude: [\r\n                    /(node_modules|vendor|wp-admin|wp-includes|plugins|twentyfifteen|twentysixteen|twentyseventeen|libs)/\r\n                ],\r\n\r\n                loader: 'babel-loader',\r\n\r\n                query: {\r\n\r\n                    presets: ['es2015']\r\n\r\n                }\r\n\r\n            },\r\n\r\n            {\r\n\r\n                test: /.*\\.js$/,\r\n\r\n                exclude: [\r\n                    /(node_modules|vendor|wp-admin|wp-includes|plugins|twentyfifteen|twentysixteen|twentyseventeen|libs)/\r\n                ],\r\n\r\n                loader: 'uglify'\r\n\r\n            },\r\n\r\n            {\r\n\r\n                test: /\\.(png|woff|woff2|eot|ttf|svg)(\\?[0-9].+)?$/,\r\n\r\n                exclude: [\r\n                    /(node_modules|vendor|wp-admin|wp-includes|plugins|twentyfifteen|twentysixteen|twentyseventeen|libs)/\r\n                ],\r\n\r\n                loader: 'url-loader?limit=100000'\r\n\r\n            },\r\n\r\n            {\r\n\r\n                test: /.*\\.scss$/,\r\n\r\n                loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!sass-loader?config=sassLoader'),\r\n\r\n                fallbackLoader: 'style-loader!css-loader!sass-loader'\r\n\r\n            }\r\n\r\n        ]\r\n\r\n    },\r\n\r\n    plugins: [\r\n        new ExtractTextPlugin('styles.bundle.css')\r\n    ],\r\n\r\n    sassLoader: {\r\n\r\n        outFile:        './httpdocs/wp-content/themes/PDFK/build/styles.bundle.css',\r\n\r\n        outputStyle:    'expanded',\r\n\r\n        sourceMap:      'true'\r\n\r\n    },\r\n\r\n    watch: false, \r\n\r\n    watchOptions: {\r\n\r\n        aggregateTimeout: 500,\r\n\r\n    },\r\n\r\n    keepalive: false,\r\n};`. Here's what I did:\r\n\r\n1) Make sure to include `devtool: \"source-map\",` before the module property.\r\n2)  Be sure to add the `?sourceMap` option to both the css-loader and sass-loader or pass a config property to the sass-loader.  \r\n\r\n`loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!sass-loader?sourceMap'),`\r\n\r\nor\r\n\r\n`loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!sass-loader?config=sassLoader'),\r\n\r\nsassLoader: {\r\n\r\n        outFile:        './httpdocs/wp-content/themes/PDFK/build/styles.bundle.css',\r\n\r\n        outputStyle:    'expanded',\r\n\r\n        sourceMap:      'true'\r\n\r\n    },`\r\n\r\nHere's what my webpack.config.js looks like: \r\n\r\n`var path = require('path');\r\n\r\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\r\n\r\nmodule.exports = {\r\n\r\n    entry: './httpdocs/wp-content/themes/PDFK/js/scripts.core.js',\r\n\r\n    output: {\r\n\r\n        path: './httpdocs/wp-content/themes/PDFK/build/',\r\n        filename: \"scripts.bundle.js\",\r\n\r\n    },\r\n\r\n    devtool: \"source-map\",\r\n\r\n    module: {\r\n\r\n        preLoaders: [\r\n\r\n            {\r\n\r\n                test: /.*\\.js$/,\r\n\r\n                exclude: [\r\n                    /(node_modules|vendor|wp-admin|wp-includes|plugins|twentyfifteen|twentysixteen|twentyseventeen|libs)/\r\n                ],\r\n\r\n                loader: 'jshint-loader'\r\n\r\n            }\r\n        ],\r\n\r\n        loaders: [\r\n            {\r\n\r\n                test: /.*\\.js$/,\r\n\r\n                exclude: [\r\n                    /(node_modules|vendor|wp-admin|wp-includes|plugins|twentyfifteen|twentysixteen|twentyseventeen|libs)/\r\n                ],\r\n\r\n                loader: 'babel-loader',\r\n\r\n                query: {\r\n\r\n                    presets: ['es2015']\r\n\r\n                }\r\n\r\n            },\r\n\r\n            {\r\n\r\n                test: /.*\\.js$/,\r\n\r\n                exclude: [\r\n                    /(node_modules|vendor|wp-admin|wp-includes|plugins|twentyfifteen|twentysixteen|twentyseventeen|libs)/\r\n                ],\r\n\r\n                loader: 'uglify'\r\n\r\n            },\r\n\r\n            {\r\n\r\n                test: /\\.(png|woff|woff2|eot|ttf|svg)(\\?[0-9].+)?$/,\r\n\r\n                exclude: [\r\n                    /(node_modules|vendor|wp-admin|wp-includes|plugins|twentyfifteen|twentysixteen|twentyseventeen|libs)/\r\n                ],\r\n\r\n                loader: 'url-loader?limit=100000'\r\n\r\n            },\r\n\r\n            {\r\n\r\n                test: /.*\\.scss$/,\r\n\r\n                loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!sass-loader?config=sassLoader'),\r\n\r\n                fallbackLoader: 'style-loader!css-loader!sass-loader'\r\n\r\n            }\r\n\r\n        ]\r\n\r\n    },\r\n\r\n    plugins: [\r\n        new ExtractTextPlugin('styles.bundle.css')\r\n    ],\r\n\r\n    sassLoader: {\r\n\r\n        outFile:        './httpdocs/wp-content/themes/PDFK/build/styles.bundle.css',\r\n\r\n        outputStyle:    'expanded',\r\n\r\n        sourceMap:      'true'\r\n\r\n    },\r\n\r\n    watch: false, \r\n\r\n    watchOptions: {\r\n\r\n        aggregateTimeout: 500,\r\n\r\n    },\r\n\r\n    keepalive: false,\r\n};`. ",
    "Quanthir": "      {\r\n        test: /\\.(scss|sass)$/,\r\n        loader: 'style!css?sourceMap!postcss!sass?sourceMap'\r\n      },\r\n\r\nthis is directly from my config. (ejected create-react-app) it works just fine for me. You need to add `?sourceMap` to css loader..       {\r\n        test: /\\.(scss|sass)$/,\r\n        loader: 'style!css?sourceMap!postcss!sass?sourceMap'\r\n      },\r\n\r\nthis is directly from my config. (ejected create-react-app) it works just fine for me. You need to add `?sourceMap` to css loader.. ",
    "shannonsumner": "**I was able to get it working by doing the following:**\r\n\r\n```\r\nconst path = require('path');\r\nconst webpack = require('webpack');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\n\r\nmodule.exports = {\r\n    entry: [\r\n        path.join(__dirname, 'src/index')\r\n    ],\r\n    output: {\r\n        path: path.join(__dirname, 'dist'),\r\n        publicPath: \"/dist\",\r\n        filename: 'js/bundle.js'\r\n    },\r\n    devtool: 'source-map',\r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: /\\.js$/,\r\n                exclude: /(node_modules|bower_components)/,\r\n                loader: 'babel-loader',\r\n                query: {\r\n                    presets: [ 'es2015' ],\r\n                    plugins: [ 'transform-runtime' ]\r\n                }\r\n            },\r\n            {\r\n                test: /(\\.scss|\\.css)$/,\r\n                use: ExtractTextPlugin.extract({\r\n                    fallback: 'style-loader',\r\n                    use: [\r\n                        {\r\n                            loader: 'css-loader',\r\n                            options: {\r\n                                sourceMap: true\r\n                            }\r\n                        },\r\n                        {\r\n                            loader: 'sass-loader',\r\n                            options: {\r\n                                sourceMap: true,\r\n                                outFile: 'css/bundle.css',\r\n                                outputStyle: 'expanded',\r\n                            }\r\n                        }\r\n                    ],\r\n                })\r\n            },\r\n            {\r\n                test: /\\.(png)$/,\r\n                use: {\r\n                    loader: 'url-loader',\r\n                    options: {\r\n                        limit: 100000,\r\n                        outputPath: '../images/',\r\n                        publicPath: '/dist/images/'\r\n                    }\r\n                },\r\n            }, {\r\n                test: /\\.jpg$/,\r\n                use: {\r\n                    loader: 'file-loader',\r\n                    options: {\r\n                        outputPath: '../images/',\r\n                        publicPath: '/dist/images/'\r\n                    }\r\n                }\r\n            }, {\r\n                test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\r\n                use: {\r\n                    loader: 'url-loader',\r\n                    options: {\r\n                        limit: 10000,\r\n                        outputPath: '../fonts/',\r\n                        publicPath: '/dist/fonts/',\r\n                        mimetype: 'application/font-woff'\r\n                    }\r\n                }\r\n            }, {\r\n                test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\r\n                use: {\r\n                    loader: \"file-loader\",\r\n                    options: {\r\n                        outputPath: '../fonts/',\r\n                        publicPath: '/dist/fonts/'\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n    },\r\n    resolve: {\r\n        modules: [ 'node_modules', './src' ]\r\n    },\r\n    plugins: [\r\n        new webpack.ProvidePlugin({\r\n            $: 'jquery',\r\n            jQuery: 'jquery'\r\n        }),\r\n        new ExtractTextPlugin({ filename: 'css/bundle.css', disable: false, allChunks: true }\r\n        )\r\n    ]\r\n};\r\n```. @xuyongli I don't think I tried with disable: true. **I was able to get it working by doing the following:**\r\n\r\n```\r\nconst path = require('path');\r\nconst webpack = require('webpack');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\n\r\nmodule.exports = {\r\n    entry: [\r\n        path.join(__dirname, 'src/index')\r\n    ],\r\n    output: {\r\n        path: path.join(__dirname, 'dist'),\r\n        publicPath: \"/dist\",\r\n        filename: 'js/bundle.js'\r\n    },\r\n    devtool: 'source-map',\r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: /\\.js$/,\r\n                exclude: /(node_modules|bower_components)/,\r\n                loader: 'babel-loader',\r\n                query: {\r\n                    presets: [ 'es2015' ],\r\n                    plugins: [ 'transform-runtime' ]\r\n                }\r\n            },\r\n            {\r\n                test: /(\\.scss|\\.css)$/,\r\n                use: ExtractTextPlugin.extract({\r\n                    fallback: 'style-loader',\r\n                    use: [\r\n                        {\r\n                            loader: 'css-loader',\r\n                            options: {\r\n                                sourceMap: true\r\n                            }\r\n                        },\r\n                        {\r\n                            loader: 'sass-loader',\r\n                            options: {\r\n                                sourceMap: true,\r\n                                outFile: 'css/bundle.css',\r\n                                outputStyle: 'expanded',\r\n                            }\r\n                        }\r\n                    ],\r\n                })\r\n            },\r\n            {\r\n                test: /\\.(png)$/,\r\n                use: {\r\n                    loader: 'url-loader',\r\n                    options: {\r\n                        limit: 100000,\r\n                        outputPath: '../images/',\r\n                        publicPath: '/dist/images/'\r\n                    }\r\n                },\r\n            }, {\r\n                test: /\\.jpg$/,\r\n                use: {\r\n                    loader: 'file-loader',\r\n                    options: {\r\n                        outputPath: '../images/',\r\n                        publicPath: '/dist/images/'\r\n                    }\r\n                }\r\n            }, {\r\n                test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\r\n                use: {\r\n                    loader: 'url-loader',\r\n                    options: {\r\n                        limit: 10000,\r\n                        outputPath: '../fonts/',\r\n                        publicPath: '/dist/fonts/',\r\n                        mimetype: 'application/font-woff'\r\n                    }\r\n                }\r\n            }, {\r\n                test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\r\n                use: {\r\n                    loader: \"file-loader\",\r\n                    options: {\r\n                        outputPath: '../fonts/',\r\n                        publicPath: '/dist/fonts/'\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n    },\r\n    resolve: {\r\n        modules: [ 'node_modules', './src' ]\r\n    },\r\n    plugins: [\r\n        new webpack.ProvidePlugin({\r\n            $: 'jquery',\r\n            jQuery: 'jquery'\r\n        }),\r\n        new ExtractTextPlugin({ filename: 'css/bundle.css', disable: false, allChunks: true }\r\n        )\r\n    ]\r\n};\r\n```. @xuyongli I don't think I tried with disable: true. ",
    "xuyongli": "@shannonsumner And do you find that your css was not compiled when you  use disable option in new ExtractTextPlugin?. @shannonsumner And do you find that your css was not compiled when you  use disable option in new ExtractTextPlugin?. ",
    "okonet": "I see... Thanks for your response!\n. I see... Thanks for your response!\n. ",
    "raypatterson": "@jtangelder oh? I'm not trying to do anything fancy, just testing @import. \n. Could be. I wish I had more insight, but as I said it happens even if there is no SASS in the project so it's difficult to identify what's breaking.\n. @jtangelder oh? I'm not trying to do anything fancy, just testing @import. \n. Could be. I wish I had more insight, but as I said it happens even if there is no SASS in the project so it's difficult to identify what's breaking.\n. ",
    "ryankask": "Is `./bower_components/bootstrap-sass-official` the actual path you used for your project?\n\nWhen I run webpack I get errors related to font paths:\n\n``` shell\nERROR in ./~/css-loader!./~/sass-loader?outputStyle=nested&includePaths[]=/Users/ryan/Projects/app/webapp/bower_components/bootstrap-sass-official/vendor/assets/stylesheets&includePaths[]=/Users/ryan/Projects/app/webapp/bower_components/bootstrap-sass-official/vendor/assets/fonts&includePaths[]=/Users/ryan/Projects/app/webapp/bower_components/bootswatch-scss!./frontend/scss/main.scss\nModule not found: Error: Cannot resolve file or directory ./bootstrap/glyphicons-halflings-regular.svg in /Users/ryan/Projects/app/webapp/frontend/scss\n```\n\nThese were the options I was using with node-sass before switching to this loader:\n\n``` javascript\nvar options = {\n  errLogToConsole: true,\n  outputStyle: outputStyle,\n  includePaths: [\n    './bower_components/bootstrap-sass-official/vendor/assets/stylesheets',\n    './bower_components/bootswatch-scss'\n  ]\n}\n```\n\nAnd it compiled, although the font paths were incorrect.\n\nThanks for your help.\n. Is `./bower_components/bootstrap-sass-official` the actual path you used for your project?\n\nWhen I run webpack I get errors related to font paths:\n\n``` shell\nERROR in ./~/css-loader!./~/sass-loader?outputStyle=nested&includePaths[]=/Users/ryan/Projects/app/webapp/bower_components/bootstrap-sass-official/vendor/assets/stylesheets&includePaths[]=/Users/ryan/Projects/app/webapp/bower_components/bootstrap-sass-official/vendor/assets/fonts&includePaths[]=/Users/ryan/Projects/app/webapp/bower_components/bootswatch-scss!./frontend/scss/main.scss\nModule not found: Error: Cannot resolve file or directory ./bootstrap/glyphicons-halflings-regular.svg in /Users/ryan/Projects/app/webapp/frontend/scss\n```\n\nThese were the options I was using with node-sass before switching to this loader:\n\n``` javascript\nvar options = {\n  errLogToConsole: true,\n  outputStyle: outputStyle,\n  includePaths: [\n    './bower_components/bootstrap-sass-official/vendor/assets/stylesheets',\n    './bower_components/bootswatch-scss'\n  ]\n}\n```\n\nAnd it compiled, although the font paths were incorrect.\n\nThanks for your help.\n. ",
    "avanderhoorn": "If it helps in the example it uses:\n\n```\n(path.resolve(__dirname, './bower_components/bootstrap-sass-official')\n```\n\nnote just:\n\n```\n'./bower_components/bootstrap-sass-official'\n```\n. If it helps in the example it uses:\n\n```\n(path.resolve(__dirname, './bower_components/bootstrap-sass-official')\n```\n\nnote just:\n\n```\n'./bower_components/bootstrap-sass-official'\n```\n. ",
    "ampedandwired": "Similar to [this css-loader issue](https://github.com/webpack/css-loader/issues/2) perhaps?\n. Similar to [this css-loader issue](https://github.com/webpack/css-loader/issues/2) perhaps?\n. ",
    "NullDivision": "Shouldn't this be an issue? I mean this is still happening after a year. \n. Shouldn't this be an issue? I mean this is still happening after a year. \n. ",
    "confiks": "+1\n\nIt's almost impossible to debug compilation errors in for example imported frameworks now.\n. I ran into the same issue today when upgrading to 1.0.0. All my import statements of partials yielded 'file to import not found' errors. If it is intentional that partials should now be referenced with an underscore, a note should be added to the readme.\n\nMy setup is roughly: create a webpack config with `config.entry = ['./entry.js']`. In `entry.js` use `require('scss/app')`. In `scss/app.scss` use `@import 'somepartial';`. Previously this would have loaded the file `scss/_somepartial.scss`, but it now fails with an error. `@import './somepartial';` fails as well. Using `@import '_somepartial';` works however.\n\nRelated question: Now issue #39 has been implemented, what is really the difference between a partial import and a regular file import?\n. +1\n\nIt's almost impossible to debug compilation errors in for example imported frameworks now.\n. I ran into the same issue today when upgrading to 1.0.0. All my import statements of partials yielded 'file to import not found' errors. If it is intentional that partials should now be referenced with an underscore, a note should be added to the readme.\n\nMy setup is roughly: create a webpack config with `config.entry = ['./entry.js']`. In `entry.js` use `require('scss/app')`. In `scss/app.scss` use `@import 'somepartial';`. Previously this would have loaded the file `scss/_somepartial.scss`, but it now fails with an error. `@import './somepartial';` fails as well. Using `@import '_somepartial';` works however.\n\nRelated question: Now issue #39 has been implemented, what is really the difference between a partial import and a regular file import?\n. ",
    "cdtinney": "I'm having this issue. Very difficult to debug compilation failures.\r\n\r\ne.g.\r\n```\r\nFailed to compile.\r\n\r\nError in ./src/App/shared/components/ObjectPropertyRowContents/styles.scss\r\nModule build failed:\r\n @ ./src/App/shared/components/ObjectPropertyRowContents/styles.scss 4:14-213 13:2-17:4 14:20-219\r\n\r\n```\r\n\r\nI'm using:\r\n```\r\nnode-sass v4.5.0\r\nsass-loader v4.1.0\r\nwebpack v1.14.0\r\n```\r\n\r\nAny suggestions?. I'm having this issue. Very difficult to debug compilation failures.\r\n\r\ne.g.\r\n```\r\nFailed to compile.\r\n\r\nError in ./src/App/shared/components/ObjectPropertyRowContents/styles.scss\r\nModule build failed:\r\n @ ./src/App/shared/components/ObjectPropertyRowContents/styles.scss 4:14-213 13:2-17:4 14:20-219\r\n\r\n```\r\n\r\nI'm using:\r\n```\r\nnode-sass v4.5.0\r\nsass-loader v4.1.0\r\nwebpack v1.14.0\r\n```\r\n\r\nAny suggestions?. ",
    "mhintz": "I was putting together a PR for exactly this feature just now, and then thought to check out the outstanding ones. Would very much like to see this merged into master. Until then, I'll be using my own version. A+ PR!\n\nEdit: For even more clarity, I would suggest something like:\n\n```\nthis.emit('\\nSass compilation error: ' + err);\n```\n. I was putting together a PR for exactly this feature just now, and then thought to check out the outstanding ones. Would very much like to see this merged into master. Until then, I'll be using my own version. A+ PR!\n\nEdit: For even more clarity, I would suggest something like:\n\n```\nthis.emit('\\nSass compilation error: ' + err);\n```\n. ",
    "cirocosta": "@Chrazy there's actually no need for publish to have something fetch by npm. See https://www.npmjs.org/doc/files/package.json.html#git-urls-as-dependencies\n. @Chrazy there's actually no need for publish to have something fetch by npm. See https://www.npmjs.org/doc/files/package.json.html#git-urls-as-dependencies\n. ",
    "fraserxu": "Hi @nickdima , thanks for your help.\n\nI changed the code but still didn't work. I created a repo to make it clear. https://github.com/fraserxu/webpack-bourbon-test\n\nCan you have a look?\n. w00t! Thanks @nickdima , it's working now.\n\nAlso, @jtangelder I'd suggest to add the code to use it with `node-bourbon` in the readme file as it may be a common use case. :)\n. Hi @nickdima , thanks for your help.\n\nI changed the code but still didn't work. I created a repo to make it clear. https://github.com/fraserxu/webpack-bourbon-test\n\nCan you have a look?\n. w00t! Thanks @nickdima , it's working now.\n\nAlso, @jtangelder I'd suggest to add the code to use it with `node-bourbon` in the readme file as it may be a common use case. :)\n. ",
    "aaronjensen": "I don't think this is allowed, but I think they only way to do this now is to set `opt.file = this.resourcePath` instead of setting `opt.data = content`. That way libsass will convert it. It currently only converts during file loads: https://github.com/sass/libsass/issues/488\n. [libsass has support for this now](https://github.com/sass/libsass/pull/518), [as does node-sass](https://github.com/sass/node-sass/pull/452) so `sass-loader` can implement it properly w/o the file hack.\n. Can't open a pull at the moment, but pseudo code would be `opt.indentedSyntax = extension(this.resourcePath) == 'sass'`\n. I don't think this is allowed, but I think they only way to do this now is to set `opt.file = this.resourcePath` instead of setting `opt.data = content`. That way libsass will convert it. It currently only converts during file loads: https://github.com/sass/libsass/issues/488\n. [libsass has support for this now](https://github.com/sass/libsass/pull/518), [as does node-sass](https://github.com/sass/node-sass/pull/452) so `sass-loader` can implement it properly w/o the file hack.\n. Can't open a pull at the moment, but pseudo code would be `opt.indentedSyntax = extension(this.resourcePath) == 'sass'`\n. ",
    "jraines": "@aaronjensen where are those settings?  I'm also trying to get this working with indented sass\n. Nm, saw it in index.js.  This change worked for me, thanks for pointing it out.  Can anyone comment on why this wouldn't be a good change?\n. @aaronjensen where are those settings?  I'm also trying to get this working with indented sass\n. Nm, saw it in index.js.  This change worked for me, thanks for pointing it out.  Can anyone comment on why this wouldn't be a good change?\n. ",
    "greypants": "+1\n. +1\n. ",
    "ai": "I very need this feature too.\n. I very need this feature too.\n. ",
    "arathunku": "I had that problem when I tried to use empty .scss file. \n. I had that problem when I tried to use empty .scss file. \n. ",
    "tomhicks-bsf": "I have a feeling that this might be total nonsense...\n. OK I'll keep an eye on that. I've seen that sass-graph has been in, out, in, out, shake it all about, and that seems to pertain to this issue.\n. I have a feeling that this might be total nonsense...\n. OK I'll keep an eye on that. I've seen that sass-graph has been in, out, in, out, shake it all about, and that seems to pertain to this issue.\n. ",
    "Couto": "It would be nice to have this PR merged.\nThere are some really valuable goodies in this new version of node-sass.\n. It would be nice to have this PR merged.\nThere are some really valuable goodies in this new version of node-sass.\n. ",
    "gavriguy": "As far as I understood the module is based on node-sass and node-sass doesn't support Compass - https://github.com/sass/node-sass/issues/54\n. As far as I understood the module is based on node-sass and node-sass doesn't support Compass - https://github.com/sass/node-sass/issues/54\n. ",
    "browniefed": "Just ran into this myself, luckily we only use basic compass and some sprite loaders.\nYou can npm install https://github.com/Igosuki/compass-mixins and add `node_modules/compass-mixins/lib` to your include paths of the sass-loader. It looks like you get most everything but sprite generation. Sounds like a compass sprite generator loader is in order.\n. This would be great to get in!\n. Just ran into this myself, luckily we only use basic compass and some sprite loaders.\nYou can npm install https://github.com/Igosuki/compass-mixins and add `node_modules/compass-mixins/lib` to your include paths of the sass-loader. It looks like you get most everything but sprite generation. Sounds like a compass sprite generator loader is in order.\n. This would be great to get in!\n. ",
    "cody": "@akiran had explained the reason for sass-graph in #17.\n\nThe biggest problem with sass-graph is that it supports only a subset of Sass. Also it throws errors on perfectly valid Sass input. I had to roll back to sass-loader 0.2.0. So I am in favour of this pull request.\n. In #32 @appsforartists reports problems with sass-graph too.\n\nThe real fix will probably take some time. For now maybe sass-loader could get an option for sass-graph? Then those who want to have the watch functionality can easily activate it.\n. I guess there are lots of imports that break.\n\nWe have in production a `src/_vars.scss` that gets included from `src/components/List.scss` \nwith the path from the project root:\n\n```\n@import \"src/vars.scss\";\n```\n\nAnother import that crashes in 0.3.0 is:\n\n```\n@import \"a.scss\", \"b.scss\";\n```\n\nThe last example compiles fine, but it won't get found by sass-graph, because of an extra space:\n\n```\n@import  \"a.scss\";\n```\n. @akiran That was fast. :smiley: I have only checked my first example, because this is what we actually use. But it still does not work. It seem like adding `this.options.context` to `loadPaths`fixes this case. I wonder why it works with node-sass?\n. @akiran That works. :+1: \n\nJust the error message that was given shoud be improved. I got this:\n\n```\n/app/node_modules/sass-loader/node_modules/sass-graph/sass-graph.js:26\n  throw \"Failed to resolve \" + path + \" in [\" + loadPaths + \"]\";\n                                                          ^\nFailed to resolve [object Object] in [/app/src,,/app/src]\n```\n\n@appsforartists Can you check if your bug is fixed too?\n. Not me, sorry. I work too little with sass. But the other people on that list would be a good choice.\n. @akiran had explained the reason for sass-graph in #17.\n\nThe biggest problem with sass-graph is that it supports only a subset of Sass. Also it throws errors on perfectly valid Sass input. I had to roll back to sass-loader 0.2.0. So I am in favour of this pull request.\n. In #32 @appsforartists reports problems with sass-graph too.\n\nThe real fix will probably take some time. For now maybe sass-loader could get an option for sass-graph? Then those who want to have the watch functionality can easily activate it.\n. I guess there are lots of imports that break.\n\nWe have in production a `src/_vars.scss` that gets included from `src/components/List.scss` \nwith the path from the project root:\n\n```\n@import \"src/vars.scss\";\n```\n\nAnother import that crashes in 0.3.0 is:\n\n```\n@import \"a.scss\", \"b.scss\";\n```\n\nThe last example compiles fine, but it won't get found by sass-graph, because of an extra space:\n\n```\n@import  \"a.scss\";\n```\n. @akiran That was fast. :smiley: I have only checked my first example, because this is what we actually use. But it still does not work. It seem like adding `this.options.context` to `loadPaths`fixes this case. I wonder why it works with node-sass?\n. @akiran That works. :+1: \n\nJust the error message that was given shoud be improved. I got this:\n\n```\n/app/node_modules/sass-loader/node_modules/sass-graph/sass-graph.js:26\n  throw \"Failed to resolve \" + path + \" in [\" + loadPaths + \"]\";\n                                                          ^\nFailed to resolve [object Object] in [/app/src,,/app/src]\n```\n\n@appsforartists Can you check if your bug is fixed too?\n. Not me, sorry. I work too little with sass. But the other people on that list would be a good choice.\n. ",
    "xzyfer": "FTR I'm perfectly happy to fix any issues with sass-graph if they're reported. We use sass-graph in node-sass so we're committed to making sure it works for everyone.\n. @akiran was this patch PR'd upstream by any chance?\n. Hey all, feel free to open issues and PR in sass-graph. I'm _actively_ maintaining it.\n\nThere's a lot a clean up work to be done, which is coming.\n. I've had a preliminary look at xzyfer/sass-graph#7. I have some feels about it.\n\nOne way or another expect a new npm release with this issue patched within 24hrs.\n. I've published sass-graph@1.0.2 that should address the issue raised by @justin808 .\n. I've just published a sass-graph@1.0.3 which passes the test case added by @justin808 .\n. Looks like the tests a failing due to some `@import` rewriting. I'm not familiar with webpacks internals.\n. Correct node 6 support was added in node-sass@3.8.0.\n\nOn 28 Jul 2016 10:04 PM, \"Johannes Ewald\" notifications@github.com wrote:\n\n> Closed #263 https://github.com/jtangelder/sass-loader/issues/263.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jtangelder/sass-loader/issues/263#event-737742818,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAjZWGlVIdm1AKkC9mFFn93Ow1Z-6asGks5qaJq6gaJpZM4JTzdN\n> .\n. Hallo, I'm the maintainer of LibSass and Node Sass.\r\n\r\nThis is actually a Sass feature. When CSS colors are unquoted they're treated as Color objects, not Strings as you might expect. This is why you can do things like color math on them.\r\n\r\nA feature of Color objects is that when they're output in compressed mode, Sass tries to output the shortest representation i.e. `#fff` is more \"compressed\" than `white`.\r\n\r\nIf you want CSS color names to act like strings you should quote them.. Taking the OPs example\r\n\r\n```diff\r\n$testMap: (\r\n-    white: (color: white) // white is a Color object\r\n+    \"white\": (color: white) // \"white\" is a String object\r\n);\r\n\r\n@each $key in map-keys($testMap) {\r\n    .test-btn-#{$key} {\r\n        $colors: map_get($testMap, $key);\r\n\r\n        color: map-get($colors, color);\r\n    }\r\n}\r\n```. FTR I'm perfectly happy to fix any issues with sass-graph if they're reported. We use sass-graph in node-sass so we're committed to making sure it works for everyone.\n. @akiran was this patch PR'd upstream by any chance?\n. Hey all, feel free to open issues and PR in sass-graph. I'm _actively_ maintaining it.\n\nThere's a lot a clean up work to be done, which is coming.\n. I've had a preliminary look at xzyfer/sass-graph#7. I have some feels about it.\n\nOne way or another expect a new npm release with this issue patched within 24hrs.\n. I've published sass-graph@1.0.2 that should address the issue raised by @justin808 .\n. I've just published a sass-graph@1.0.3 which passes the test case added by @justin808 .\n. Looks like the tests a failing due to some `@import` rewriting. I'm not familiar with webpacks internals.\n. Correct node 6 support was added in node-sass@3.8.0.\n\nOn 28 Jul 2016 10:04 PM, \"Johannes Ewald\" notifications@github.com wrote:\n\n> Closed #263 https://github.com/jtangelder/sass-loader/issues/263.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jtangelder/sass-loader/issues/263#event-737742818,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAjZWGlVIdm1AKkC9mFFn93Ow1Z-6asGks5qaJq6gaJpZM4JTzdN\n> .\n. Hallo, I'm the maintainer of LibSass and Node Sass.\r\n\r\nThis is actually a Sass feature. When CSS colors are unquoted they're treated as Color objects, not Strings as you might expect. This is why you can do things like color math on them.\r\n\r\nA feature of Color objects is that when they're output in compressed mode, Sass tries to output the shortest representation i.e. `#fff` is more \"compressed\" than `white`.\r\n\r\nIf you want CSS color names to act like strings you should quote them.. Taking the OPs example\r\n\r\n```diff\r\n$testMap: (\r\n-    white: (color: white) // white is a Color object\r\n+    \"white\": (color: white) // \"white\" is a String object\r\n);\r\n\r\n@each $key in map-keys($testMap) {\r\n    .test-btn-#{$key} {\r\n        $colors: map_get($testMap, $key);\r\n\r\n        color: map-get($colors, color);\r\n    }\r\n}\r\n```. ",
    "appsforartists": "I'll be excited to see a prototype of this.  I want to modularize my code into different node modules, but I can't do that if `@import` won't work across them.\n. I was able to upgrade to 0.3.1, though I also had to explicitly install node-sass 1.2.2.  [1.2.3 throws a \"module did not self-register\".](https://github.com/sass/node-sass/issues/550)\n. I'll be excited to see a prototype of this.  I want to modularize my code into different node modules, but I can't do that if `@import` won't work across them.\n. I was able to upgrade to 0.3.1, though I also had to explicitly install node-sass 1.2.2.  [1.2.3 throws a \"module did not self-register\".](https://github.com/sass/node-sass/issues/550)\n. ",
    "haustraliaer": "ohhhh great - was about to ask for this. \nWill be the final cherry on top for my current react / sass / webpack workflow.\n. Which currently is waiting for a lib-sass release (https://github.com/sass/libsass/issues/697) :P\n\nSounds like it'll all happen soon though, thank you!\n. Is this now working? Or is there more to do with setting up sass-loader to @import from node_modules etc. Would be keen to test it out (I could just depend on the repo, rather than npm, I guess) if it's ready.\n. :tada: Thanks everyone! Works like a dream.\n. So close! The brief 30 seconds of custom importers was bliss.\n. This seems totally stable for me now with the latest node-sass release - and pulling `\"sass-loader\": \"1.0.0\"` from npm gets the updated `node-sass@3.1.0`, despite sass-loader still specifying the beta.\n\nI haven't tested with a large codebase full of imports yet, but I will likely get to it over the weekend.\n. Yeah I'm on 1.0.0 so haven't seen that bug - you should log it separately.\n. We experienced this issue as well - multiple imports over different files of a global (`@import '~boilerplate';`) mixin/variable file completely stalled webpack.\n. @saper I'm literally doing that right now ;)\n. Hah, beat me to it... Here's my project anyway which shows pretty clearly where it breaks:\n\nhttps://github.com/haustraliaer/sass-webpack\n. @mmahalwy It seems like the node-sass guys are gonna take a while to update this issue - as it's not a simple problem to fix.\n\nI'm honestly about to bail on sass in favour of postcss.\n. ohhhh great - was about to ask for this. \nWill be the final cherry on top for my current react / sass / webpack workflow.\n. Which currently is waiting for a lib-sass release (https://github.com/sass/libsass/issues/697) :P\n\nSounds like it'll all happen soon though, thank you!\n. Is this now working? Or is there more to do with setting up sass-loader to @import from node_modules etc. Would be keen to test it out (I could just depend on the repo, rather than npm, I guess) if it's ready.\n. :tada: Thanks everyone! Works like a dream.\n. So close! The brief 30 seconds of custom importers was bliss.\n. This seems totally stable for me now with the latest node-sass release - and pulling `\"sass-loader\": \"1.0.0\"` from npm gets the updated `node-sass@3.1.0`, despite sass-loader still specifying the beta.\n\nI haven't tested with a large codebase full of imports yet, but I will likely get to it over the weekend.\n. Yeah I'm on 1.0.0 so haven't seen that bug - you should log it separately.\n. We experienced this issue as well - multiple imports over different files of a global (`@import '~boilerplate';`) mixin/variable file completely stalled webpack.\n. @saper I'm literally doing that right now ;)\n. Hah, beat me to it... Here's my project anyway which shows pretty clearly where it breaks:\n\nhttps://github.com/haustraliaer/sass-webpack\n. @mmahalwy It seems like the node-sass guys are gonna take a while to update this issue - as it's not a simple problem to fix.\n\nI'm honestly about to bail on sass in favour of postcss.\n. ",
    "izaakschroeder": "@jhnns @haustraliaer see above PR.\n. @tomhicks-bsf https://github.com/jtangelder/sass-loader/pull/53 probably maybe resolves this.\n. This is a good start on #31 and #50.\n. @jhnns A lot of this was indeed lifted from `less-loader`. However, one thing `less-loader` is missing (and this is not) is the ability to use module urls in imports.\n\n``` scss\n@import \"foo!/something\";\n```\n\nThe above is otherwise not possible. \n\nAlso, `loaderContext.resolve` has its own set of problems which I struggled at before arriving at the current solution (in particular only one context is allowed and imports require more than one: root directory + \"current directory\" which is exposed really poorly in `node-sass`). The custom resolver is pretty much ripped from the webpack config loader.\n\nIf you don't want to merge this please close the branch and I'll maintain a fork myself, as I need the module loading capability.\n. @jhnns the module loader allows you to do stupid things like `@import \"css!less!foo\";` where you can get a module to go through a precompile phase before being passed into `node-sass`. I use it for generating icon fonts, though I have not yet published the module. I could have sworn I tried every other approach, but they don't accept the `\"foo!bar\"` style.\n\nHow do you specify multiple paths to be searched? This approach allows you to feed the resolver multiple base paths and it will go through them in order, since SASS convention has no concept of `\"./foo\"` vs `\"foo\"` both have to be tried.\n. @jhnns @haustraliaer see above PR.\n. @tomhicks-bsf https://github.com/jtangelder/sass-loader/pull/53 probably maybe resolves this.\n. This is a good start on #31 and #50.\n. @jhnns A lot of this was indeed lifted from `less-loader`. However, one thing `less-loader` is missing (and this is not) is the ability to use module urls in imports.\n\n``` scss\n@import \"foo!/something\";\n```\n\nThe above is otherwise not possible. \n\nAlso, `loaderContext.resolve` has its own set of problems which I struggled at before arriving at the current solution (in particular only one context is allowed and imports require more than one: root directory + \"current directory\" which is exposed really poorly in `node-sass`). The custom resolver is pretty much ripped from the webpack config loader.\n\nIf you don't want to merge this please close the branch and I'll maintain a fork myself, as I need the module loading capability.\n. @jhnns the module loader allows you to do stupid things like `@import \"css!less!foo\";` where you can get a module to go through a precompile phase before being passed into `node-sass`. I use it for generating icon fonts, though I have not yet published the module. I could have sworn I tried every other approach, but they don't accept the `\"foo!bar\"` style.\n\nHow do you specify multiple paths to be searched? This approach allows you to feed the resolver multiple base paths and it will go through them in order, since SASS convention has no concept of `\"./foo\"` vs `\"foo\"` both have to be tried.\n. ",
    "gpbl": "The \"module did not self-register\" appears also with node 0.12 \n. Seems it's going to be fixed soon :) https://github.com/sass/node-sass/issues/627\n. The \"module did not self-register\" appears also with node 0.12 \n. Seems it's going to be fixed soon :) https://github.com/sass/node-sass/issues/627\n. ",
    "talwoolf": "I am getting a similar thing, except I dont get any errors but the file does not recompile or update the app. Anyone found a solution for this?\n. I am getting a similar thing, except I dont get any errors but the file does not recompile or update the app. Anyone found a solution for this?\n. ",
    "chrishowes": "+1\n. +1\n. ",
    "DawidJanczak": "+1 Same here. No errors, but also no recompile trigger on file save.\n. I just noticed that HMR seems to work again on `0.4.2`, but breaks on `1.x`.\n. I think the issue in general is that you require webpack modules with `require` and `@import` is a SCSS directive. I imagine you have a `require \"app\"` somewhere, do you also `require \"variables\"`? Then again `@import` used to work with HMR before `sass-graph` was removed.\n. Thanks @jacobp100, your example and mention of `includePath` got me a bit farther with this. It looks like if you use `includePath` and then have an `@import` with path relative to that included path, HMR breaks. If, on the other hand, you use a path relative to the required manifest file it works fine.\nIn your case you're probably saying `@import \"variables\"` and `@import \"style\"`. Try changing the latter to `@import \"../variants/a/style\"` and see if that works.\n@jhnns is this expected behaviour?\n. Thanks @jorrit, done.\n. It does and more elegantly too. I'll close this and I think we can also close #37 and #107.\n. +1 Same here. No errors, but also no recompile trigger on file save.\n. I just noticed that HMR seems to work again on `0.4.2`, but breaks on `1.x`.\n. I think the issue in general is that you require webpack modules with `require` and `@import` is a SCSS directive. I imagine you have a `require \"app\"` somewhere, do you also `require \"variables\"`? Then again `@import` used to work with HMR before `sass-graph` was removed.\n. Thanks @jacobp100, your example and mention of `includePath` got me a bit farther with this. It looks like if you use `includePath` and then have an `@import` with path relative to that included path, HMR breaks. If, on the other hand, you use a path relative to the required manifest file it works fine.\nIn your case you're probably saying `@import \"variables\"` and `@import \"style\"`. Try changing the latter to `@import \"../variants/a/style\"` and see if that works.\n@jhnns is this expected behaviour?\n. Thanks @jorrit, done.\n. It does and more elegantly too. I'll close this and I think we can also close #37 and #107.\n. ",
    "nerdgrass": "+1 same here. Everything else works fine, no sass recompile on saved file.\n. +1 same here. Everything else works fine, no sass recompile on saved file.\n. ",
    "bitplanets": "You are right, something with npm...\n. You are right, something with npm...\n. ",
    "kurtharriger": "As far as I can tell the relative path to the font files from _bootstrap.scss is correct. I didn't know the icon path could be specified before import, so Ill give that a try.  I was thinking that sass-loader would/should resolve the relative urls and it would just work?\n\nI don't intend to customize bootstrap at the moment so if I still have issues I'll just copy the precompiled in for now. I just figured using the sass-loader would simplify packaging.\n\nThanks\n. Ah okay now I get it.  Perhaps the sass loader could update the resulting css, but not entirely sure how easy that would be. Probably need to use the source map to determine original path or maybe it would be easier to update path prior to processing so output is correct? \n\nNow I understand why the relative path doesn't just work. Thanks\n. Setting icon path works, but you need to prefix the path with a ~:\n\n$icon-font-path: \"~bootstrap-sass/assets/fonts/bootstrap/\";\n@import \"bootstrap-sass/assets/stylesheets/_bootstrap.scss\";\n\nIf you don't add the ~ then it gets translated to ./bootstrap-sass/assets/fonts/bootstrap.  \nThanks!\n. As far as I can tell the relative path to the font files from _bootstrap.scss is correct. I didn't know the icon path could be specified before import, so Ill give that a try.  I was thinking that sass-loader would/should resolve the relative urls and it would just work?\n\nI don't intend to customize bootstrap at the moment so if I still have issues I'll just copy the precompiled in for now. I just figured using the sass-loader would simplify packaging.\n\nThanks\n. Ah okay now I get it.  Perhaps the sass loader could update the resulting css, but not entirely sure how easy that would be. Probably need to use the source map to determine original path or maybe it would be easier to update path prior to processing so output is correct? \n\nNow I understand why the relative path doesn't just work. Thanks\n. Setting icon path works, but you need to prefix the path with a ~:\n\n$icon-font-path: \"~bootstrap-sass/assets/fonts/bootstrap/\";\n@import \"bootstrap-sass/assets/stylesheets/_bootstrap.scss\";\n\nIf you don't add the ~ then it gets translated to ./bootstrap-sass/assets/fonts/bootstrap.  \nThanks!\n. ",
    "aguestuser": "hi all. i got the same error as @kurtharriger then tried the solution he presents, BUT... i then get the following error (filepaths specific to my system omitted via elipsis):\n\n``` shell\n... Module not found: Error: Cannot resolve module 'file' ....\n... Module not found: Error: Cannot resolve module 'url' in ...\n```\n\nthese are the import statements i'm using:\n\n``` scss\n$icon-font-path: '~bootstrap-sass/assets/fonts/bootstrap/';\n@import '~bootstrap-sass/assets/stylesheets/_bootstrap.scss';\n```\n\nand i have `bootstrap-sass` installed in my `node_modules` directory.\n\nanyone have any guesses as to what's going on or possible fixes?\n. answered my own question (which i'll leave here in case anyone else encounters the same problem:\n\n``` shell\n$ npm install file-loader --save\n$ npm install url-loader --save\n```\n. hi all. i got the same error as @kurtharriger then tried the solution he presents, BUT... i then get the following error (filepaths specific to my system omitted via elipsis):\n\n``` shell\n... Module not found: Error: Cannot resolve module 'file' ....\n... Module not found: Error: Cannot resolve module 'url' in ...\n```\n\nthese are the import statements i'm using:\n\n``` scss\n$icon-font-path: '~bootstrap-sass/assets/fonts/bootstrap/';\n@import '~bootstrap-sass/assets/stylesheets/_bootstrap.scss';\n```\n\nand i have `bootstrap-sass` installed in my `node_modules` directory.\n\nanyone have any guesses as to what's going on or possible fixes?\n. answered my own question (which i'll leave here in case anyone else encounters the same problem:\n\n``` shell\n$ npm install file-loader --save\n$ npm install url-loader --save\n```\n. ",
    "osasseville": "Thanks a lot!\n. Thanks a lot!\n. ",
    "sahil87": ":+1:\n. :+1:\n. ",
    "danpantry": "I found that setting `$bootstrap-sass-asset-helper: true` instead of using `$icon-font-path` solved the issue; `$icon-font-path` was not really helping.\n. @jhnns The note on that section specifically mentions `$icon-font-path`, which in this case is a red herring (I specifically noted that that _did not work_ in my original comment). I suspect many people had consulted that documentation before searching for this issue..\n. After some discussion I think this is just because I fundamentally misunderstood how class extension works in SASS in partials; placeholder elements, mixins and such will not be produced in the output, but any classes in those partials will, and after discovering how that works, it makes sense as to why that works the way it does.\n. I found that setting `$bootstrap-sass-asset-helper: true` instead of using `$icon-font-path` solved the issue; `$icon-font-path` was not really helping.\n. @jhnns The note on that section specifically mentions `$icon-font-path`, which in this case is a red herring (I specifically noted that that _did not work_ in my original comment). I suspect many people had consulted that documentation before searching for this issue..\n. After some discussion I think this is just because I fundamentally misunderstood how class extension works in SASS in partials; placeholder elements, mixins and such will not be produced in the output, but any classes in those partials will, and after discovering how that works, it makes sense as to why that works the way it does.\n. ",
    "albttx": "Thanks to @danpantry, `$bootstrap-sass-asset-helper` solve the problem, set the `$icon-font-path` wasn't working\n. Thanks to @danpantry, `$bootstrap-sass-asset-helper` solve the problem, set the `$icon-font-path` wasn't working\n. ",
    "akras14": "@danpantry answer is the best `$bootstrap-sass-asset-helper` option, if anybody else stumbles here. \n. @danpantry answer is the best `$bootstrap-sass-asset-helper` option, if anybody else stumbles here. \n. ",
    "seancheung": "@danpantry  Thanks man. You are a life-saver. \n. @danpantry  Thanks man. You are a life-saver. \n. ",
    "6zz": "@danpantry thank you!  I searched high and low.  only if this was in the README the search would not have been needed.  Can update the README?\n\n```\n$bootstrap-sass-asset-helper: true;\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap\";\n```\n. @danpantry thank you!  I searched high and low.  only if this was in the README the search would not have been needed.  Can update the README?\n\n```\n$bootstrap-sass-asset-helper: true;\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap\";\n```\n. ",
    "satyaprakash-k": "Thanks @danpantry . Saved my time :+1: . Thanks @danpantry . Saved my time :+1: . ",
    "Grievoushead": "This worked for me:\r\n```\r\n@import \"~bootstrap-sass/assets/stylesheets/_bootstrap-sprockets.scss\";\r\n@import \"~bootstrap-sass/assets/stylesheets/_bootstrap.scss\";\r\n```. This worked for me:\r\n```\r\n@import \"~bootstrap-sass/assets/stylesheets/_bootstrap-sprockets.scss\";\r\n@import \"~bootstrap-sass/assets/stylesheets/_bootstrap.scss\";\r\n```. ",
    "arvinsim": "Thanks @Grievoushead. Your solution worked for me.. Thanks @Grievoushead. Your solution worked for me.. ",
    "tsuz": "I had a `$icon-font-path: '../old/path !default'` in code which prevented from assigning any other values to `$icon-font-path`... I had a `$icon-font-path: '../old/path !default'` in code which prevented from assigning any other values to `$icon-font-path`... ",
    "moiguitarrock": "exists a variable that fix the problem with the relative/absolute path, all that you need is set the variable `$bootstrap-sass-asset-helper` in `true` and that's all.\r\n\r\nPS: do that before the importation of bootstrap: \r\n\r\n```\r\n$bootstrap-sass-asset-helper: true;\r\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap\";\r\n```. exists a variable that fix the problem with the relative/absolute path, all that you need is set the variable `$bootstrap-sass-asset-helper` in `true` and that's all.\r\n\r\nPS: do that before the importation of bootstrap: \r\n\r\n```\r\n$bootstrap-sass-asset-helper: true;\r\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap\";\r\n```. ",
    "calcazar": "but why doesn't @import \"bootstrap\" work? \r\n\r\nWould love an explanation for why we need the work around!. but why doesn't @import \"bootstrap\" work? \r\n\r\nWould love an explanation for why we need the work around!. ",
    "JohnGallego": "@moiguitarrock, looking at the network requests, it looks like this setting sets url to an outside server hosting the files instead of the local ones bundled in with webpack.. @moiguitarrock, looking at the network requests, it looks like this setting sets url to an outside server hosting the files instead of the local ones bundled in with webpack.. ",
    "monarchwadia": "@JohnGallego  I don't see this behaviour on my local. @JohnGallego  I don't see this behaviour on my local. ",
    "ChristianGalvez23": "I need to know the same answer as @teknicalissue wants to know.. I need to know the same answer as @teknicalissue wants to know.. ",
    "herrstucki": "Thanks @jhnns for the explanation. If I understand correctly it's possible to do this with libsass 3.1 but the list of files is not included on errors by node-sass yet?\n\nI could revert the removal of sass-graph for the time being, so it would work as expected until node-sass supports this.\n. Done :grinning: \n. Thanks @jhnns for the explanation. If I understand correctly it's possible to do this with libsass 3.1 but the list of files is not included on errors by node-sass yet?\n\nI could revert the removal of sass-graph for the time being, so it would work as expected until node-sass supports this.\n. Done :grinning: \n. ",
    "JamesHenry": "Very excited for this!\n. Very excited for this!\n. ",
    "wolfeidau": "Is this going to be released? \n\nWould be cool to not track master to use io.js\n. :+1: thanks a lot!\n. Is this going to be released? \n\nWould be cool to not track master to use io.js\n. :+1: thanks a lot!\n. ",
    "daniel-norman-sociomantic": "Same error here.\n. My bad.\n\u25b6 npm view sass-loader\n\n{ name: 'sass-loader',\n  description: 'Sass loader for webpack',\n  'dist-tags': { latest: '0.6.0' },\n  versions:\n   [ '0.0.1',\n     '0.0.2',\n     '0.1.0',\n     '0.1.1',\n     '0.2.0',\n     '0.3.0',\n     '0.3.1',\n     '0.4.0-beta.1',\n     '0.4.0',\n     '0.4.1',\n     '0.4.2',\n     '0.5.0',\n     '0.6.0',\n     '1.0.0',\n     '1.0.1' ],\n. My bad.\n\u25b6 npm view sass-loader\n\n{ name: 'sass-loader',\n  description: 'Sass loader for webpack',\n  'dist-tags': { latest: '0.6.0' },\n  versions:\n   [ '0.0.1',\n     '0.0.2',\n     '0.1.0',\n     '0.1.1',\n     '0.2.0',\n     '0.3.0',\n     '0.3.1',\n     '0.4.0-beta.1',\n     '0.4.0',\n     '0.4.1',\n     '0.4.2',\n     '0.5.0',\n     '0.6.0',\n     '1.0.0',\n     '1.0.1' ],\n. Same error here.\n. My bad.\n\u25b6 npm view sass-loader\n\n{ name: 'sass-loader',\n  description: 'Sass loader for webpack',\n  'dist-tags': { latest: '0.6.0' },\n  versions:\n   [ '0.0.1',\n     '0.0.2',\n     '0.1.0',\n     '0.1.1',\n     '0.2.0',\n     '0.3.0',\n     '0.3.1',\n     '0.4.0-beta.1',\n     '0.4.0',\n     '0.4.1',\n     '0.4.2',\n     '0.5.0',\n     '0.6.0',\n     '1.0.0',\n     '1.0.1' ],\n. My bad.\n\u25b6 npm view sass-loader\n\n{ name: 'sass-loader',\n  description: 'Sass loader for webpack',\n  'dist-tags': { latest: '0.6.0' },\n  versions:\n   [ '0.0.1',\n     '0.0.2',\n     '0.1.0',\n     '0.1.1',\n     '0.2.0',\n     '0.3.0',\n     '0.3.1',\n     '0.4.0-beta.1',\n     '0.4.0',\n     '0.4.1',\n     '0.4.2',\n     '0.5.0',\n     '0.6.0',\n     '1.0.0',\n     '1.0.1' ],\n. ",
    "andycmaj": "@pirelenito look into https://github.com/wilsonpage/sass-import-once and http://4waisenkinder.de/blog/2014/03/06/import-once-in-sass-the-foundation-way/\n\nthe duplicated imports is a problem with sass itself: https://github.com/sass/sass/issues/156\n. +1\n\nhad to back up to sass-loader@0.4.2 because 0.5.0 has a dependency on node-sass@3.0.0-pre which doesn't exist\n. @pirelenito look into https://github.com/wilsonpage/sass-import-once and http://4waisenkinder.de/blog/2014/03/06/import-once-in-sass-the-foundation-way/\n\nthe duplicated imports is a problem with sass itself: https://github.com/sass/sass/issues/156\n. +1\n\nhad to back up to sass-loader@0.4.2 because 0.5.0 has a dependency on node-sass@3.0.0-pre which doesn't exist\n. ",
    "pirelenito": "Hi @andycmaj, thanks for pointing me to the sass issue and the alternate solutions.\n\nBut I guess, for the moment, I'll keep just an `index.scss` with all the `@imports` for my project.\n. Hi @andycmaj, thanks for pointing me to the sass issue and the alternate solutions.\n\nBut I guess, for the moment, I'll keep just an `index.scss` with all the `@imports` for my project.\n. ",
    "justin808": "That does solve the error. What do you recommend next?\n. @jhnns I'm debugging your latest with the latest from sass-graph (1.0.1). Any reason you're locked in at an older version of sass-graph?\n. @jhnns I've tracked down the problem to sass-graph using for(var a in someArray) syntax and one of my dependencies must have added a method to array. Thus, crash, just as explained here: http://stackoverflow.com/a/3010848/1009332\n\nhttps://github.com/xzyfer/sass-graph/blob/master/sass-graph.js#L54\n\n``` javascript\n  for (var i in imports) {\n    [this.dir, cwd].forEach(function (path) {\n      if (path && this.loadPaths.indexOf(path) === -1) {\n        this.loadPaths.push(path);\n      }\n    }.bind(this));\n    var resolved = resolveSassPath(imports[i], _.uniq(this.loadPaths));\n    if (!resolved) return false;\n\n    // recurse into dependencies if not already enumerated\n    if(!_.contains(entry.imports, resolved)) {\n      entry.imports.push(resolved);\n      this.addFile(fs.realpathSync(resolved), filepath);\n    }\n  }\n```\n. @akiran is there a fork/branch I should pull? I'm going to check that just changing the array iteration fixes my issue.\n. This was blocking me: \n\nhttps://github.com/xzyfer/sass-graph/pull/7\n\nAny ETA on when we might be able to see this fix and an update to sass-loader? I'd rather use the official versions than my own fork. Thanks! And if you're interested, please check out my sample project on using rails with webpack and react: https://github.com/justin808/react-webpack-rails-tutorial/tree/update-to-latest.\n. I posted a fix to sass-loader to reference my own fork of sass-graph.\n\nHowever, sass-graph just fixed my reported issue.\n\n![commits_ _xzyfer_sass-graph](https://cloud.githubusercontent.com/assets/1118459/5996870/2374f5fe-aa56-11e4-8f1f-9dbba8181dcb.jpg)\n\nPlease comment in this issue when this version sass-loader is updated to this version of sass-graph.\n. @akiran Can we update sass-loader? I just submitted a PR, albeit a very simple one, to update the version dependency.\n. @akiran Give me 10 min. Let me try.\n. I ran `npm i` after updating and then ran `node server.js`.\n\nWorked just fine.\n\nThe below confirms that I got the new version. @akiran What is your test case that is failing?\n\nYou can see mine at https://github.com/justin808/react-webpack-rails-tutorial/.\n\n```\nnpm i\n-\n> node-sass@2.0.0-beta install /Users/justin/j/react/react-webpack-rails-tutorial/node_modules/sass-loader/node_modules/node-sass\n> node scripts/install.js\n\nBinary downloaded and installed at /Users/justin/j/react/react-webpack-rails-tutorial/node_modules/sass-loader/node_modules/node-sass/vendor/darwin-x64/binding.node\n\n> node-sass@2.0.0-beta postinstall /Users/justin/j/react/react-webpack-rails-tutorial/node_modules/sass-loader/node_modules/node-sass\n> node scripts/build.js\n\nsass-loader@0.4.0-beta.1 node_modules/sass-loader\n\u251c\u2500\u2500 sass-graph@1.0.3 (commander@2.6.0, lodash@2.4.1, glob@4.3.5)\n\u2514\u2500\u2500 node-sass@2.0.0-beta (get-stdin@3.0.2, object-assign@2.0.0, replace-ext@0.0.1, nan@1.6.1, shelljs@0.3.0, cross-spawn@0.2.3, chalk@0.5.1, mkdirp@0.5.0, meow@2.1.0, gaze@0.5.1, mocha@2.1.0, request@2.53.0)\n```\n. No issues if you do the explicit install of the node-sass.\n. @dtothefp @LiTiang @imtiazwazir Is this doc issue? Or should we have a code PR?\n. That does solve the error. What do you recommend next?\n. @jhnns I'm debugging your latest with the latest from sass-graph (1.0.1). Any reason you're locked in at an older version of sass-graph?\n. @jhnns I've tracked down the problem to sass-graph using for(var a in someArray) syntax and one of my dependencies must have added a method to array. Thus, crash, just as explained here: http://stackoverflow.com/a/3010848/1009332\n\nhttps://github.com/xzyfer/sass-graph/blob/master/sass-graph.js#L54\n\n``` javascript\n  for (var i in imports) {\n    [this.dir, cwd].forEach(function (path) {\n      if (path && this.loadPaths.indexOf(path) === -1) {\n        this.loadPaths.push(path);\n      }\n    }.bind(this));\n    var resolved = resolveSassPath(imports[i], _.uniq(this.loadPaths));\n    if (!resolved) return false;\n\n    // recurse into dependencies if not already enumerated\n    if(!_.contains(entry.imports, resolved)) {\n      entry.imports.push(resolved);\n      this.addFile(fs.realpathSync(resolved), filepath);\n    }\n  }\n```\n. @akiran is there a fork/branch I should pull? I'm going to check that just changing the array iteration fixes my issue.\n. This was blocking me: \n\nhttps://github.com/xzyfer/sass-graph/pull/7\n\nAny ETA on when we might be able to see this fix and an update to sass-loader? I'd rather use the official versions than my own fork. Thanks! And if you're interested, please check out my sample project on using rails with webpack and react: https://github.com/justin808/react-webpack-rails-tutorial/tree/update-to-latest.\n. I posted a fix to sass-loader to reference my own fork of sass-graph.\n\nHowever, sass-graph just fixed my reported issue.\n\n![commits_ _xzyfer_sass-graph](https://cloud.githubusercontent.com/assets/1118459/5996870/2374f5fe-aa56-11e4-8f1f-9dbba8181dcb.jpg)\n\nPlease comment in this issue when this version sass-loader is updated to this version of sass-graph.\n. @akiran Can we update sass-loader? I just submitted a PR, albeit a very simple one, to update the version dependency.\n. @akiran Give me 10 min. Let me try.\n. I ran `npm i` after updating and then ran `node server.js`.\n\nWorked just fine.\n\nThe below confirms that I got the new version. @akiran What is your test case that is failing?\n\nYou can see mine at https://github.com/justin808/react-webpack-rails-tutorial/.\n\n```\nnpm i\n-\n> node-sass@2.0.0-beta install /Users/justin/j/react/react-webpack-rails-tutorial/node_modules/sass-loader/node_modules/node-sass\n> node scripts/install.js\n\nBinary downloaded and installed at /Users/justin/j/react/react-webpack-rails-tutorial/node_modules/sass-loader/node_modules/node-sass/vendor/darwin-x64/binding.node\n\n> node-sass@2.0.0-beta postinstall /Users/justin/j/react/react-webpack-rails-tutorial/node_modules/sass-loader/node_modules/node-sass\n> node scripts/build.js\n\nsass-loader@0.4.0-beta.1 node_modules/sass-loader\n\u251c\u2500\u2500 sass-graph@1.0.3 (commander@2.6.0, lodash@2.4.1, glob@4.3.5)\n\u2514\u2500\u2500 node-sass@2.0.0-beta (get-stdin@3.0.2, object-assign@2.0.0, replace-ext@0.0.1, nan@1.6.1, shelljs@0.3.0, cross-spawn@0.2.3, chalk@0.5.1, mkdirp@0.5.0, meow@2.1.0, gaze@0.5.1, mocha@2.1.0, request@2.53.0)\n```\n. No issues if you do the explicit install of the node-sass.\n. @dtothefp @LiTiang @imtiazwazir Is this doc issue? Or should we have a code PR?\n. ",
    "nwhite89": "@jhnns thank you for your response I'm thinking of the `webpack.DefinePlugin` so perhaps something like\n\n``` js\nwebpack.DefinePlugin({\n  'SCSS_OPACITY': '0.4'\n});\n```\n\n``` scss\n$opacity: SCSS_OPACITY;\n@include opacity($opacity);\n```\n\nbut perhaps if it's easier for it to create a file with all of them and somehow matching `SCSS_OPACITY` to be `$SCSS_OPACITY` ?? and attaching the variables above of files when generating? what are your thoughts?\n. Yeah, using the `definePlugin` I think would be ideal because it would use the current inner workings of webpack but also allow for variables to be used across both the JS and SCSS files which I'm not entirely sure when you may need it but it would be more powerful I feel.\n. Using this perhaps? https://github.com/webpack/docs/wiki/list-of-plugins#dependency-injection\n\nWithout looking into it I would hazard a guess it should make it easier? (hopefully) :)\n. @kasu any chance of them being made Open Source?\n. @Kasu cheers :+1: although it would be nice to have this functionality baked into sass-loader\n. @EdwardIrby :+1: \n. :+1: yeah I'm having to set `node-sass: \"~2.0.0\"` within my package.json which isn't the nicest especially being unknown whether it will deff work\n. I'm still getting it with `1.2.2` I've cleared cache for npm\n. ah yes your right that's very odd but thanks :+1: \n. Yeah I think I will need to use `css-loader` come to think of it because of images etc. however, css-loader does do an array but I will take a look at `css-loader` when it comes to it thanks (feel free to close if you wish) thanks @jhnns\n. @jhnns thank you for your response I'm thinking of the `webpack.DefinePlugin` so perhaps something like\n\n``` js\nwebpack.DefinePlugin({\n  'SCSS_OPACITY': '0.4'\n});\n```\n\n``` scss\n$opacity: SCSS_OPACITY;\n@include opacity($opacity);\n```\n\nbut perhaps if it's easier for it to create a file with all of them and somehow matching `SCSS_OPACITY` to be `$SCSS_OPACITY` ?? and attaching the variables above of files when generating? what are your thoughts?\n. Yeah, using the `definePlugin` I think would be ideal because it would use the current inner workings of webpack but also allow for variables to be used across both the JS and SCSS files which I'm not entirely sure when you may need it but it would be more powerful I feel.\n. Using this perhaps? https://github.com/webpack/docs/wiki/list-of-plugins#dependency-injection\n\nWithout looking into it I would hazard a guess it should make it easier? (hopefully) :)\n. @kasu any chance of them being made Open Source?\n. @Kasu cheers :+1: although it would be nice to have this functionality baked into sass-loader\n. @EdwardIrby :+1: \n. :+1: yeah I'm having to set `node-sass: \"~2.0.0\"` within my package.json which isn't the nicest especially being unknown whether it will deff work\n. I'm still getting it with `1.2.2` I've cleared cache for npm\n. ah yes your right that's very odd but thanks :+1: \n. Yeah I think I will need to use `css-loader` come to think of it because of images etc. however, css-loader does do an array but I will take a look at `css-loader` when it comes to it thanks (feel free to close if you wish) thanks @jhnns\n. ",
    "ksandin": "Hi! I wanted the same feature a while back but realized this is already supported by webpack. My solution looks like this:\n\n``` javascript\nvar sass = encodeURIComponent(jsonToSassVars(sassGlobals));\nvar webpackConfig = {\n    module: {\n        loaders:[\n            {test: /.scss$/, loader: \"style!css!sass!prepend?data=\" + sass}\n        ]\n    },\n}\n```\n\nThe [prepend-loader](https://gist.github.com/Kasu/29452051023ff5337bd7) and [jsonToSassVars](https://gist.github.com/Kasu/ea4f4861a81e626ea308) are custom work of mine. \n. @nwhite89 Sure thing, here you go: [prependLoader.js](https://gist.github.com/Kasu/29452051023ff5337bd7) and [jsonToSassVars.js](https://gist.github.com/Kasu/ea4f4861a81e626ea308). \n. @EdwardIrby cool :)!\n. Hi! I wanted the same feature a while back but realized this is already supported by webpack. My solution looks like this:\n\n``` javascript\nvar sass = encodeURIComponent(jsonToSassVars(sassGlobals));\nvar webpackConfig = {\n    module: {\n        loaders:[\n            {test: /.scss$/, loader: \"style!css!sass!prepend?data=\" + sass}\n        ]\n    },\n}\n```\n\nThe [prepend-loader](https://gist.github.com/Kasu/29452051023ff5337bd7) and [jsonToSassVars](https://gist.github.com/Kasu/ea4f4861a81e626ea308) are custom work of mine. \n. @nwhite89 Sure thing, here you go: [prependLoader.js](https://gist.github.com/Kasu/29452051023ff5337bd7) and [jsonToSassVars.js](https://gist.github.com/Kasu/ea4f4861a81e626ea308). \n. @EdwardIrby cool :)!\n. ",
    "EdwardIrby": "@Kasu really liked your work so I went and forked it into a npm loader https://www.npmjs.com/package/jsontosass-loader\n. @Kasu really liked your work so I went and forked it into a npm loader https://www.npmjs.com/package/jsontosass-loader\n. ",
    "wendellmva": "@EdwardIrby I don't think you should return a json file but a js file that returns an json object. This way you can do custom calculations to darken or lighten a color for example or other caculations you might need.\n. @EdwardIrby I don't think you should return a json file but a js file that returns an json object. This way you can do custom calculations to darken or lighten a color for example or other caculations you might need.\n. ",
    "nightgrey": "@nwhite89 @EdwardIrby @jhnns I think this could be what you guys need: [Sassport](https://github.com/davidkpiano/sassport)\n\nI just found this myself and didn't use it yet, but it seems like it enables you to do what you want - sharing values between JavaScript and Sass. \n. @jhnns @jerrysu I think a problem I have is related to this - I'm not sure. Sorry if it's not - in that case, I'll probably delete this comment and open up a new issue. But I believe it has something to do with this and I didn't find another existing issue which sounds like it's related. \n\n# Example\n\n__inuitCss.scss_\n\n``` scss\n// Settings\n@import \"~inuit-defaults\";\n@import \"~inuit-responsive-settings\";\n\n// Tools\n@import \"~inuit-functions\";\n@import \"~inuit-mixins\";\n@import \"~inuit-responsive-tools\";\n```\n\n.. which is imported by another SCSS file. But.. it fails transpiling:\n\n``` bash\nModule build failed: ModuleBuildError: Module build failed: \n@import \"~inuit-defaults\";\n^\n      File to import not found or unreadable: ~inuit-defaults\nParent style sheet: /home/nico/workspace/web-boilerplate/src/components/app/_inuitCss.scss\n      in /home/nico/workspace/web-boilerplate/src/components/app/_inuitCss.scss (line 8, column 1)\n    at DependenciesBlock.onModuleBuildFailed (/home/nico/workspace/web-boilerplate/node_modules/webpack-core/lib/NormalModuleMixin.js:315:19)\n    at nextLoader (/home/nico/workspace/web-boilerplate/node_modules/webpack-core/lib/NormalModuleMixin.js:270:31)\n    at /home/nico/workspace/web-boilerplate/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at context.callback (/home/nico/workspace/web-boilerplate/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at Object.onRender (/home/nico/workspace/web-boilerplate/node_modules/sass-loader/index.js:272:13)\n    at /home/nico/workspace/web-boilerplate/node_modules/async/lib/async.js:906:35\n    at _arrayEach (/home/nico/workspace/web-boilerplate/node_modules/async/lib/async.js:85:13)\n    at Object.<anonymous> (/home/nico/workspace/web-boilerplate/node_modules/async/lib/async.js:898:17)\n    at Object.callback (/home/nico/workspace/web-boilerplate/node_modules/async/lib/async.js:44:16)\n    at options.error (/home/nico/workspace/web-boilerplate/node_modules/node-sass/lib/index.js:280:32)\n @ ./src/components/app/index.js 3:0-21\n```\n\n.. but as soon as I change line two in _inuitCss.scss from `@import \"~inuit-defaults\";` into `@import \"~inuit-defaults/_settings.defaults\";`, it works.\n\nNo matter what I do, I have to specify the module + the file I want to import on the **first** import in this file, otherwise it fails. It doesn't matter which imported node module is the first, it just fails if I do not specify the file directly.\n\nThe repository where you can test this yourself can be found here: https://github.com/nightgrey/web-boilerplate\n\nI'm using node version 5.9.1, npm version 3.7.3, sass loader 3.2.0 on Ubuntu 15.10.  I hope it's not just a webpack configuration problem or something.\n. @jerrysu God, that explains a lot - one of the things being that I'm an idiot. You even made a pull request - thank you very much!\n. @nwhite89 @EdwardIrby @jhnns I think this could be what you guys need: [Sassport](https://github.com/davidkpiano/sassport)\n\nI just found this myself and didn't use it yet, but it seems like it enables you to do what you want - sharing values between JavaScript and Sass. \n. @jhnns @jerrysu I think a problem I have is related to this - I'm not sure. Sorry if it's not - in that case, I'll probably delete this comment and open up a new issue. But I believe it has something to do with this and I didn't find another existing issue which sounds like it's related. \n\n# Example\n\n__inuitCss.scss_\n\n``` scss\n// Settings\n@import \"~inuit-defaults\";\n@import \"~inuit-responsive-settings\";\n\n// Tools\n@import \"~inuit-functions\";\n@import \"~inuit-mixins\";\n@import \"~inuit-responsive-tools\";\n```\n\n.. which is imported by another SCSS file. But.. it fails transpiling:\n\n``` bash\nModule build failed: ModuleBuildError: Module build failed: \n@import \"~inuit-defaults\";\n^\n      File to import not found or unreadable: ~inuit-defaults\nParent style sheet: /home/nico/workspace/web-boilerplate/src/components/app/_inuitCss.scss\n      in /home/nico/workspace/web-boilerplate/src/components/app/_inuitCss.scss (line 8, column 1)\n    at DependenciesBlock.onModuleBuildFailed (/home/nico/workspace/web-boilerplate/node_modules/webpack-core/lib/NormalModuleMixin.js:315:19)\n    at nextLoader (/home/nico/workspace/web-boilerplate/node_modules/webpack-core/lib/NormalModuleMixin.js:270:31)\n    at /home/nico/workspace/web-boilerplate/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at context.callback (/home/nico/workspace/web-boilerplate/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at Object.onRender (/home/nico/workspace/web-boilerplate/node_modules/sass-loader/index.js:272:13)\n    at /home/nico/workspace/web-boilerplate/node_modules/async/lib/async.js:906:35\n    at _arrayEach (/home/nico/workspace/web-boilerplate/node_modules/async/lib/async.js:85:13)\n    at Object.<anonymous> (/home/nico/workspace/web-boilerplate/node_modules/async/lib/async.js:898:17)\n    at Object.callback (/home/nico/workspace/web-boilerplate/node_modules/async/lib/async.js:44:16)\n    at options.error (/home/nico/workspace/web-boilerplate/node_modules/node-sass/lib/index.js:280:32)\n @ ./src/components/app/index.js 3:0-21\n```\n\n.. but as soon as I change line two in _inuitCss.scss from `@import \"~inuit-defaults\";` into `@import \"~inuit-defaults/_settings.defaults\";`, it works.\n\nNo matter what I do, I have to specify the module + the file I want to import on the **first** import in this file, otherwise it fails. It doesn't matter which imported node module is the first, it just fails if I do not specify the file directly.\n\nThe repository where you can test this yourself can be found here: https://github.com/nightgrey/web-boilerplate\n\nI'm using node version 5.9.1, npm version 3.7.3, sass loader 3.2.0 on Ubuntu 15.10.  I hope it's not just a webpack configuration problem or something.\n. @jerrysu God, that explains a lot - one of the things being that I'm an idiot. You even made a pull request - thank you very much!\n. ",
    "matt-newell": "@jhnns can we see a working example of the data option? Having issues getting it to work \n\nNever mind looking back at earlier PR's I found my query params were overriding my sassLoader. It's a bit confusing where to options, query params or sassLoader\n. @jhnns can we see a working example of the data option? Having issues getting it to work \n\nNever mind looking back at earlier PR's I found my query params were overriding my sassLoader. It's a bit confusing where to options, query params or sassLoader\n. ",
    "mjw56": "@jhnns I can get the environment variable to be passed in via `data`-option and I see that it is working in the app.\n\nI am doing something like:\n\n``` js\nsassLoader: {\n  data: '$myColor: green;',\n},\n```\n\nand then in a random .scss file I just use `color: $myColor`. It works, I can see the color appearing in the application, but I am also seeing errors at compile time: `Undefined variable: \"$myColor\"`. Is there a step that I am missing here to complete this so as to not get those errors?\n. @jhnns Yeah, the issue was that I wasn't including this option on the server bundle as well. It is working, thanks!\n. @jhnns I can get the environment variable to be passed in via `data`-option and I see that it is working in the app.\n\nI am doing something like:\n\n``` js\nsassLoader: {\n  data: '$myColor: green;',\n},\n```\n\nand then in a random .scss file I just use `color: $myColor`. It works, I can see the color appearing in the application, but I am also seeing errors at compile time: `Undefined variable: \"$myColor\"`. Is there a step that I am missing here to complete this so as to not get those errors?\n. @jhnns Yeah, the issue was that I wasn't including this option on the server bundle as well. It is working, thanks!\n. ",
    "epegzz": "Hey guys, had the same needs for passing vars to my sass files, so i also created a little webpack loader based on @Kasu's gist. It lets you import vars directly via webpack, or by specifying a JSON or JS file. [Check it out](https://www.npmjs.com/package/@epegzz/sass-vars-loader) :)\n. How is that easier than passing the vars directly in webpack config or by specifying paths to JS/JSON files?\nhttps://github.com/epegzz/sass-vars-loader does support exactly that:\n\n``` js\n// webpack.js\nsassVars: {\n  vars: {\n    someColor: red,\n    someOtherColor: blue,\n   }\n }\n```\n\n\u2026and you're ready to use them anywhere in your scss\n\n``` scss\n.foo {\n  color: $someColor;\n}\n```\n. @Cleod9 writing JS or JSON inside the webpack config which is JS itself feels way nicer to me. And the OP wanted to pass data potentially stored in a database. Chances are, those data already come as JSON or even JS object when he's loading them inside the webpack.js. But in the end, it's all a matter of personal preference and specific use case :)\n. @IAMtheIAM haven't tested yet, but no, probably not then, thx for pointing it out! :) \n\nThe following should work with webpack2 though, right?\n\n``` js\n// webpack.js\nvar sassVarsConfig = querystring.stringify({\n    files: [\n        path.resolve(__dirname, 'path/to/vars.js'),\n    ]\n});\n\nreturn {\n    loader: ExtractTextPlugin.extract(\n        'style',\n        'css!sass!@epegzz/sass-vars-loader?' + sassVarsConfig\n    ),\n  //...\n```\n. awesome @IAMtheIAM, merged and pushed to npm :)\n. @534N I answered in epegzz/sass-vars-loader#6 :)\n. Hey guys, had the same needs for passing vars to my sass files, so i also created a little webpack loader based on @Kasu's gist. It lets you import vars directly via webpack, or by specifying a JSON or JS file. [Check it out](https://www.npmjs.com/package/@epegzz/sass-vars-loader) :)\n. How is that easier than passing the vars directly in webpack config or by specifying paths to JS/JSON files?\nhttps://github.com/epegzz/sass-vars-loader does support exactly that:\n\n``` js\n// webpack.js\nsassVars: {\n  vars: {\n    someColor: red,\n    someOtherColor: blue,\n   }\n }\n```\n\n\u2026and you're ready to use them anywhere in your scss\n\n``` scss\n.foo {\n  color: $someColor;\n}\n```\n. @Cleod9 writing JS or JSON inside the webpack config which is JS itself feels way nicer to me. And the OP wanted to pass data potentially stored in a database. Chances are, those data already come as JSON or even JS object when he's loading them inside the webpack.js. But in the end, it's all a matter of personal preference and specific use case :)\n. @IAMtheIAM haven't tested yet, but no, probably not then, thx for pointing it out! :) \n\nThe following should work with webpack2 though, right?\n\n``` js\n// webpack.js\nvar sassVarsConfig = querystring.stringify({\n    files: [\n        path.resolve(__dirname, 'path/to/vars.js'),\n    ]\n});\n\nreturn {\n    loader: ExtractTextPlugin.extract(\n        'style',\n        'css!sass!@epegzz/sass-vars-loader?' + sassVarsConfig\n    ),\n  //...\n```\n. awesome @IAMtheIAM, merged and pushed to npm :)\n. @534N I answered in epegzz/sass-vars-loader#6 :)\n. ",
    "Cleod9": "After much digging around, I found an even easier solution:\n\nhttps://www.npmjs.com/package/webpack-append\n\nDespite its misleading name, this package does, in fact, prepend specified text to the beginning of each file. And unlike `prepend-loader`, it doesn't have any issues with `style-loader` \ud83d\ude04 \n. @epegzz This way you can basically just write Sass rather than JS. Also by prepending as a string you could theoretically just use `fs` to prepend a full .scss file if you wanted. To give you some context, the earlier answer of `prepend-loader` sufficed for me for a time, but broke after I had switched from `ExtractTextPlugin` to `style-loader`\n. @epegzz True, and I appreciate your plugin btw! I think for others who land in this thread will find that at least one of these solutions will work for them (this thread is like the number one search result for \"sass variables through webpack\" \ud83d\ude09  )\n. After much digging around, I found an even easier solution:\n\nhttps://www.npmjs.com/package/webpack-append\n\nDespite its misleading name, this package does, in fact, prepend specified text to the beginning of each file. And unlike `prepend-loader`, it doesn't have any issues with `style-loader` \ud83d\ude04 \n. @epegzz This way you can basically just write Sass rather than JS. Also by prepending as a string you could theoretically just use `fs` to prepend a full .scss file if you wanted. To give you some context, the earlier answer of `prepend-loader` sufficed for me for a time, but broke after I had switched from `ExtractTextPlugin` to `style-loader`\n. @epegzz True, and I appreciate your plugin btw! I think for others who land in this thread will find that at least one of these solutions will work for them (this thread is like the number one search result for \"sass variables through webpack\" \ud83d\ude09  )\n. ",
    "IAMtheIAM": "@epegzz is it webpack2 compatible? Webpack2 doesn't allow custom properties on the webpack config, must use the `LoaderOptionsPlugin` for any custom properties.\n. @epegzz Good job dude! That worked perfectly, thanks, I was struggling for hours to get any of these options to work with webpack 2, so that I can take a JS/JSON file and have it converted to sass, and appended before all scss files. Great!\n\nHere's my full setup:\n\n```\n// webpack.config.js\n\nvar sassVarsConfig = querystring.stringify({\n   files: [\n      path.resolve(helpers.paths.appRoot + '/assets/styles/sass-js-variables.js'),\n   ]\n});\n\n// loaders section\n         {\n            test: /\\.(scss)$/,\n            loaders: DEBUG ?\n               ['style', 'css?sourceMap', 'postcss', 'sass?sourceMap', 'sass-resources', '@epegzz/sass-vars-loader?' + sassVarsConfig] : // dev mode\n               ExtractTextPlugin.extract({\n                  fallbackLoader: \"sass-loader\",\n                  notExtractLoader: \"sass-loader\",\n                  loader: ['css?sourceMap', 'postcss', 'sass?sourceMap', 'sass-resources','@epegzz/sass-vars-loader?' + sassVarsConfig],\n                  publicPath: '/' // 'string' override the publicPath setting for this loader\n               })\n         },\n\n//plugins section\n\n      new webpack.LoaderOptionsPlugin({\n         options: {\n            sassResources: ['./src/assets/styles/variables.scss', './src/assets/styles/mixins.scss'],\n            context: helpers.paths.root\n         }\n      }),\n\n      new ExtractTextPlugin({\n         filename: '/css/[name].style.css?[hash]',\n         disable: false,\n         allChunks: true\n      }),\n```\n\n```\n// sass-js-variables.js\n\nmodule.exports = {\n   primary: '#C0FF33',\n   secondary: '#B4D455'\n};\n```\n\n```\n// home.scss\n\nticket {\n   color: $primary;\n   .card-panel {\n      background-color: $secondary;\n   }\n}\n```\n\nNow the only thing I'm wondering is it your `sass-vars-loader` can replace the functionality of the `sass-resources-loader`? Basically it just appends an array of .scss files to the beginning of each .scss file loaded, which I use for passing all my variables and mixins to my scss files. Can your loader do that, and if so, what's the proper way? It's not a big deal, since it works as is, I can use 2 loaders if necessary.\n. @epegzz  I made a pull request fixing your loader, to allow users to pass \"vars\" directly on the webpack config, rather than in an external file. So now both options work. Please review and approve it so others can use :-)\n\nYou just have to JSON.stringify anything in the vars property like this:\n\n```\nconst susyDebug = DEBUG ? 'show' : 'hide';\nconst sassVarsConfig = querystring.stringify({\n   files: [\n      path.resolve(helpers.paths.appRoot + '/styles/sass-js-variables.js')\n      // path.resolve(__dirname, '/path/to/breakpoints.js'), // JS\n      // path.resolve(__dirname, '/path/to/colors.json'), // JSON\n   ],\n   vars: [JSON.stringify({'susyDebug': susyDebug})],\n});\n```\n\nThen, your loader should look something like:\n\n```\nloaders: ['css?sourceMap', 'postcss', 'sass?sourceMap', '@epegzz/sass-vars-loader?' + sassVarsConfig],\n```\n. It is now possible to use angular2, webpack with hot module replacement, sass sourcemaps, and externally loaded css. It tooks me days of playing with it but I got it working!\n\nI figured out how to do it. [My post here explains it](https://github.com/webpack/extract-text-webpack-plugin/issues/30#issuecomment-220724110).\n. @epegzz is it webpack2 compatible? Webpack2 doesn't allow custom properties on the webpack config, must use the `LoaderOptionsPlugin` for any custom properties.\n. @epegzz Good job dude! That worked perfectly, thanks, I was struggling for hours to get any of these options to work with webpack 2, so that I can take a JS/JSON file and have it converted to sass, and appended before all scss files. Great!\n\nHere's my full setup:\n\n```\n// webpack.config.js\n\nvar sassVarsConfig = querystring.stringify({\n   files: [\n      path.resolve(helpers.paths.appRoot + '/assets/styles/sass-js-variables.js'),\n   ]\n});\n\n// loaders section\n         {\n            test: /\\.(scss)$/,\n            loaders: DEBUG ?\n               ['style', 'css?sourceMap', 'postcss', 'sass?sourceMap', 'sass-resources', '@epegzz/sass-vars-loader?' + sassVarsConfig] : // dev mode\n               ExtractTextPlugin.extract({\n                  fallbackLoader: \"sass-loader\",\n                  notExtractLoader: \"sass-loader\",\n                  loader: ['css?sourceMap', 'postcss', 'sass?sourceMap', 'sass-resources','@epegzz/sass-vars-loader?' + sassVarsConfig],\n                  publicPath: '/' // 'string' override the publicPath setting for this loader\n               })\n         },\n\n//plugins section\n\n      new webpack.LoaderOptionsPlugin({\n         options: {\n            sassResources: ['./src/assets/styles/variables.scss', './src/assets/styles/mixins.scss'],\n            context: helpers.paths.root\n         }\n      }),\n\n      new ExtractTextPlugin({\n         filename: '/css/[name].style.css?[hash]',\n         disable: false,\n         allChunks: true\n      }),\n```\n\n```\n// sass-js-variables.js\n\nmodule.exports = {\n   primary: '#C0FF33',\n   secondary: '#B4D455'\n};\n```\n\n```\n// home.scss\n\nticket {\n   color: $primary;\n   .card-panel {\n      background-color: $secondary;\n   }\n}\n```\n\nNow the only thing I'm wondering is it your `sass-vars-loader` can replace the functionality of the `sass-resources-loader`? Basically it just appends an array of .scss files to the beginning of each .scss file loaded, which I use for passing all my variables and mixins to my scss files. Can your loader do that, and if so, what's the proper way? It's not a big deal, since it works as is, I can use 2 loaders if necessary.\n. @epegzz  I made a pull request fixing your loader, to allow users to pass \"vars\" directly on the webpack config, rather than in an external file. So now both options work. Please review and approve it so others can use :-)\n\nYou just have to JSON.stringify anything in the vars property like this:\n\n```\nconst susyDebug = DEBUG ? 'show' : 'hide';\nconst sassVarsConfig = querystring.stringify({\n   files: [\n      path.resolve(helpers.paths.appRoot + '/styles/sass-js-variables.js')\n      // path.resolve(__dirname, '/path/to/breakpoints.js'), // JS\n      // path.resolve(__dirname, '/path/to/colors.json'), // JSON\n   ],\n   vars: [JSON.stringify({'susyDebug': susyDebug})],\n});\n```\n\nThen, your loader should look something like:\n\n```\nloaders: ['css?sourceMap', 'postcss', 'sass?sourceMap', '@epegzz/sass-vars-loader?' + sassVarsConfig],\n```\n. It is now possible to use angular2, webpack with hot module replacement, sass sourcemaps, and externally loaded css. It tooks me days of playing with it but I got it working!\n\nI figured out how to do it. [My post here explains it](https://github.com/webpack/extract-text-webpack-plugin/issues/30#issuecomment-220724110).\n. ",
    "534N": "@epegzz I can't install your module: \n\n```\nnpm ERR! Invalid name: \"@epegzz/sass-vars-loader\"\n```\n. @epegzz I can't install your module: \n\n```\nnpm ERR! Invalid name: \"@epegzz/sass-vars-loader\"\n```\n. ",
    "nagarajay": "@jhnns Is the data option working correctly for Webpack V2. @epegzz @IAMtheIAM  great solution. I will try to use it as stated.\n. @jhnns Is the data option working correctly for Webpack V2. @epegzz @IAMtheIAM  great solution. I will try to use it as stated.\n. ",
    "mkarajohn": "I understand that the solutions above allow us to define and use SASS variables in our `sass` files without actually touching them, but how about **overriding** existing variables? \n\nFor example, could we override the `$enable-flex` variable of Bootstrap 4 from `false` to `true` in order to [build the flexbox version of the grid](http://v4-alpha.getbootstrap.com/getting-started/flexbox/#how-it-works) ?\n. I think I am having a related issue, maybe someone could help me out? http://stackoverflow.com/questions/40095558/load-specific-component-from-mdl-using-webpack\n. I understand that the solutions above allow us to define and use SASS variables in our `sass` files without actually touching them, but how about **overriding** existing variables? \n\nFor example, could we override the `$enable-flex` variable of Bootstrap 4 from `false` to `true` in order to [build the flexbox version of the grid](http://v4-alpha.getbootstrap.com/getting-started/flexbox/#how-it-works) ?\n. I think I am having a related issue, maybe someone could help me out? http://stackoverflow.com/questions/40095558/load-specific-component-from-mdl-using-webpack\n. ",
    "CallMeXYZ": "With using ` \"sass-loader\": \"4.0.2\",\"webpack\": \"^1.13.2\",`, it comes to me that the environment variable function doesn't work.Compiling throws error  `Undefined variable`. @volodymyr-tsaryk  check above @jhnns answers. For simple varibles you may do sth like this  \r\n```\r\n{\r\n    loader: \"sass-loader\",\r\n    options: {\r\n        data: \"$var1: \" + yourVar1+ \";\"\r\n    }\r\n}\r\n```. With using ` \"sass-loader\": \"4.0.2\",\"webpack\": \"^1.13.2\",`, it comes to me that the environment variable function doesn't work.Compiling throws error  `Undefined variable`. @volodymyr-tsaryk  check above @jhnns answers. For simple varibles you may do sth like this  \r\n```\r\n{\r\n    loader: \"sass-loader\",\r\n    options: {\r\n        data: \"$var1: \" + yourVar1+ \";\"\r\n    }\r\n}\r\n```. ",
    "JasonEtco": "I think it's worth noting that @jhnns above solution is great, but the description on how to actually use it wasn't clear. The `sassLoader` object has to be in the root of your webpack's exported object, like this:\r\n\r\n```js\r\nmodule.exports = {\r\n  entry: [...],\r\n  module: {\r\n    loaders: [...],\r\n  },\r\n  sassLoader: {\r\n    data: '@import \"variables\";',\r\n    includePaths: [\r\n      path.resolve(__dirname, '../src/scss/tools'),\r\n    ],\r\n  },\r\n};\r\n```. I think it's worth noting that @jhnns above solution is great, but the description on how to actually use it wasn't clear. The `sassLoader` object has to be in the root of your webpack's exported object, like this:\r\n\r\n```js\r\nmodule.exports = {\r\n  entry: [...],\r\n  module: {\r\n    loaders: [...],\r\n  },\r\n  sassLoader: {\r\n    data: '@import \"variables\";',\r\n    includePaths: [\r\n      path.resolve(__dirname, '../src/scss/tools'),\r\n    ],\r\n  },\r\n};\r\n```. ",
    "volodymyr-tsaryk": "@CallMeXYZ did you resolve your issue ? I am having same. @CallMeXYZ that worked, thanks . @CallMeXYZ did you resolve your issue ? I am having same. @CallMeXYZ that worked, thanks . ",
    "jorrit": "Is this one fixed?\n. Is this bug still valid?\n. Is this still an issue?\n. The params are formatted like URI's. Have you tried URI encoding? It is just a guess.\n. I think webpack handles translating the input parameters so each plugin doesn't have to do that. It is the responsibility of the configuration writer to use the right syntax. Or maybe I am misunderstanding the thing you want to submit a PR about.\n. You can maybe try:\n\n```\n{\n  test: /\\.scss$/,\n  loader: 'style!css!sass',\n  query: {\n    outputStyle: 'expanded',\n    includePaths: [\n        path.resolve(process.cwd(), \"node_modules\")\n    ]\n  }\n}\n```\n. Does it work in 1.0.3?\n. Is this still an issue? Can you create a PR with just a test that fails because of this bug?\n. It looks like the maintainers are having a holiday. I hope they can review all PR's soon.\n. Either run your gulp command with `UV_THREADPOOL_SIZE=100 gulp` or execute `process.env.UV_THREADPOOL_SIZE=100` in your gulp file before executing webpack.\n. It is explained by saper in sass/node-sass#857. The 4 internal threads are occupied by node-sass and then sass-loader tries to import a file from the filesystem, which stalls until one of the threads becomes available. This never happens.\n. Mostly, yes. But maybe node-sass can work around it, but I am not certain.\n. Please see #132 for a possible fix.\n. Did you take a look at #132 ?\n. And thanks to you for testing!\n. Can you try the changes in PR #116 to see if it is fixed?\n. Does anyone know why there is a difference?\n. Which Windows version do you use @gabrielenosso?\n. I hope this fixes it.\n. It seems that this setup creates too many async operations, exhausting the internal libuv threads. For example, the following works:\n\n`UV_THREADPOOL_SIZE=10 npm start`\n\nNo idea how this can be fixed in `sass-loader`.\n. Seems the same as sass/node-sass#857.\n. Maybe sass-loader can limit the number of outstanding sass render calls to `UV_THREADPOOL_SIZE` - 1 via the `async` module or something (no idea if that makes sense).\nAt least let's write down this `UV_THREADPOOL_SIZE` workaround somewhere in the README.\n. This is also a duplicate of #100, by the way. Let's close this issue.\n\nCloses #119\n. Maybe you can add a comment to the line to explain why it is necessary, for future reference.\n. You can use this guide to dquash your commits into one so it is easier to review http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request\n. Can you create a repository with a complete test situation?\n. This was fixed in s-panferov/awesome-typescript-loader\n. I am sorry to hear that you spent so much time on this and thanks for the bug report. Is your code available publicly so I can get the situation you have? Or can you describe the steps to reproduce this problem?\n. In the referenced issue is mentioned that 1.0.3 actually introduced the bug... so this is a regression.\n. `urlToRequest` is called with an absolute path, like `/Users/mmahalwy/...`. `loader-utils`' `urlToRequest` prepends `./`. Because of change [1] `.//Users/...` is translated to `Users/`.\n\nIf bool `true` or string `~` are passed to urlToRequest instead of `opt.root`, it works. I don't know what `opt.root` is supposed to do.\n\n@jhnns: maybe change the code to `return utils.urlToRequest(url, opt.root || '~');` ?\n\n[1] https://github.com/jtangelder/sass-loader/commit/94d0bc857aa0ef14790926183e88602bab7c2506#diff-168726dbe96b3ce427e7fedce31bb0bcR234\n. This was fixed in justin808/bootstrap-sass-loader#25.\n. I have tried to find out what is wrong here, but I can't find it. Somewhere webpack prepends `./` to the file name.\n. @jhnns Can you take a look at this one?\n. Can you publish a small repository with this problem?\n. Have you looked at https://github.com/justin808/bootstrap-sass-loader ?\n. There is a `console.log(err)` in the second commit. Also, can you squash the commits?\n. Wouldn't it be easier to just do `addIncludedFilesToWebpack([err.file])` in both error handlers or am I overlooking something ?\n. I now see what you mean. It would definitely be easier with squashed commits :) it is not very hard to do, see https://github.com/ginatrapani/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit \n. I am assuming you have `scss` and `sass` in your `resolve.extensions` of the webpack.config.js file?\n. Just out of curiosity: does the change in PR #132 solve the issue too?\n. I am not sure yet if that is a solution, so I'd like for people to test it. I can help you try #132 if you want. You can always revert to the original package afterwards. If you change `\"sass-loader\": \"^1.0.3\"` to `\"sass-loader\": \"jorrit/sass-loader#async\"` in your `package.json` and do `npm update`, you should get the other version. You can change it back to get the regular version.\n. What is the webpack.config.js in your case? Does `extensions` contain the empty string?\n. The problem you're describing was fixed in sass-loader 2.0.0. According to your package.json you are still on 1.0.x (it was a good idea to post it in the bug report).\n. 19a54ce846d10194a3d0989a79d0be65c8d23ff0\n. It seems you're running webpack from within webpack. Probably some part of that causes yet another node fs-thread to block. Maybe the maximum parallellism of sass-loader should be configurable, so you can set it at `UV_THREADPOOL_SIZE - 2` instead of `UV_THREADPOOL_SIZE - 1`.\n. I'd say that sassLoader overwrites opts. The object-assign module could be used for this.\n. PR #152 would help in your case I think.\n. Would #158 be a fix?\n. Somehow it is still recognized as javascript. Can you post more config/code?\n. Can one of you publish a repository that exhibits this problem?\n. Are you `require`-ing the React component and not using it?\n. Can you post some of your code? Otherwise it can't be established if you're doing something wrong. Is the code in a public repository?\n. It is a large repository. Which file should not be included and in which files is it referenced? What command should I run to test it?\n. What's the output when you rebuild `node-sass`? Does it help when you remove your `node_modules` folder and run a fresh `npm install`?\n. The path is different: `darwin-x64-46` vs `darwin-x64-11`. Is anything in your code configuring this explicitly? Try searching for BINARY_PATH or binaryPath in your source code to find any instance.\nThe 11 or 46 is the value of `process.versions.modules`. This could also be a mismatch when you build `node-sass` with a different node version than you're running `sass-loader` with. You should check that too. It seems you're running it with a lower version than the one you're building it with.\n. Are you absolutely sure that your program runs on node 4.0.0 and not some other version using nvm?\n. That could be because you didn't use any modules that must be compiled before sass-loader/node-sass.\n. Is this one fixed?\n. Is this bug still valid?\n. Is this still an issue?\n. The params are formatted like URI's. Have you tried URI encoding? It is just a guess.\n. I think webpack handles translating the input parameters so each plugin doesn't have to do that. It is the responsibility of the configuration writer to use the right syntax. Or maybe I am misunderstanding the thing you want to submit a PR about.\n. You can maybe try:\n\n```\n{\n  test: /\\.scss$/,\n  loader: 'style!css!sass',\n  query: {\n    outputStyle: 'expanded',\n    includePaths: [\n        path.resolve(process.cwd(), \"node_modules\")\n    ]\n  }\n}\n```\n. Does it work in 1.0.3?\n. Is this still an issue? Can you create a PR with just a test that fails because of this bug?\n. It looks like the maintainers are having a holiday. I hope they can review all PR's soon.\n. Either run your gulp command with `UV_THREADPOOL_SIZE=100 gulp` or execute `process.env.UV_THREADPOOL_SIZE=100` in your gulp file before executing webpack.\n. It is explained by saper in sass/node-sass#857. The 4 internal threads are occupied by node-sass and then sass-loader tries to import a file from the filesystem, which stalls until one of the threads becomes available. This never happens.\n. Mostly, yes. But maybe node-sass can work around it, but I am not certain.\n. Please see #132 for a possible fix.\n. Did you take a look at #132 ?\n. And thanks to you for testing!\n. Can you try the changes in PR #116 to see if it is fixed?\n. Does anyone know why there is a difference?\n. Which Windows version do you use @gabrielenosso?\n. I hope this fixes it.\n. It seems that this setup creates too many async operations, exhausting the internal libuv threads. For example, the following works:\n\n`UV_THREADPOOL_SIZE=10 npm start`\n\nNo idea how this can be fixed in `sass-loader`.\n. Seems the same as sass/node-sass#857.\n. Maybe sass-loader can limit the number of outstanding sass render calls to `UV_THREADPOOL_SIZE` - 1 via the `async` module or something (no idea if that makes sense).\nAt least let's write down this `UV_THREADPOOL_SIZE` workaround somewhere in the README.\n. This is also a duplicate of #100, by the way. Let's close this issue.\n\nCloses #119\n. Maybe you can add a comment to the line to explain why it is necessary, for future reference.\n. You can use this guide to dquash your commits into one so it is easier to review http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request\n. Can you create a repository with a complete test situation?\n. This was fixed in s-panferov/awesome-typescript-loader\n. I am sorry to hear that you spent so much time on this and thanks for the bug report. Is your code available publicly so I can get the situation you have? Or can you describe the steps to reproduce this problem?\n. In the referenced issue is mentioned that 1.0.3 actually introduced the bug... so this is a regression.\n. `urlToRequest` is called with an absolute path, like `/Users/mmahalwy/...`. `loader-utils`' `urlToRequest` prepends `./`. Because of change [1] `.//Users/...` is translated to `Users/`.\n\nIf bool `true` or string `~` are passed to urlToRequest instead of `opt.root`, it works. I don't know what `opt.root` is supposed to do.\n\n@jhnns: maybe change the code to `return utils.urlToRequest(url, opt.root || '~');` ?\n\n[1] https://github.com/jtangelder/sass-loader/commit/94d0bc857aa0ef14790926183e88602bab7c2506#diff-168726dbe96b3ce427e7fedce31bb0bcR234\n. This was fixed in justin808/bootstrap-sass-loader#25.\n. I have tried to find out what is wrong here, but I can't find it. Somewhere webpack prepends `./` to the file name.\n. @jhnns Can you take a look at this one?\n. Can you publish a small repository with this problem?\n. Have you looked at https://github.com/justin808/bootstrap-sass-loader ?\n. There is a `console.log(err)` in the second commit. Also, can you squash the commits?\n. Wouldn't it be easier to just do `addIncludedFilesToWebpack([err.file])` in both error handlers or am I overlooking something ?\n. I now see what you mean. It would definitely be easier with squashed commits :) it is not very hard to do, see https://github.com/ginatrapani/todo.txt-android/wiki/Squash-All-Commits-Related-to-a-Single-Issue-into-a-Single-Commit \n. I am assuming you have `scss` and `sass` in your `resolve.extensions` of the webpack.config.js file?\n. Just out of curiosity: does the change in PR #132 solve the issue too?\n. I am not sure yet if that is a solution, so I'd like for people to test it. I can help you try #132 if you want. You can always revert to the original package afterwards. If you change `\"sass-loader\": \"^1.0.3\"` to `\"sass-loader\": \"jorrit/sass-loader#async\"` in your `package.json` and do `npm update`, you should get the other version. You can change it back to get the regular version.\n. What is the webpack.config.js in your case? Does `extensions` contain the empty string?\n. The problem you're describing was fixed in sass-loader 2.0.0. According to your package.json you are still on 1.0.x (it was a good idea to post it in the bug report).\n. 19a54ce846d10194a3d0989a79d0be65c8d23ff0\n. It seems you're running webpack from within webpack. Probably some part of that causes yet another node fs-thread to block. Maybe the maximum parallellism of sass-loader should be configurable, so you can set it at `UV_THREADPOOL_SIZE - 2` instead of `UV_THREADPOOL_SIZE - 1`.\n. I'd say that sassLoader overwrites opts. The object-assign module could be used for this.\n. PR #152 would help in your case I think.\n. Would #158 be a fix?\n. Somehow it is still recognized as javascript. Can you post more config/code?\n. Can one of you publish a repository that exhibits this problem?\n. Are you `require`-ing the React component and not using it?\n. Can you post some of your code? Otherwise it can't be established if you're doing something wrong. Is the code in a public repository?\n. It is a large repository. Which file should not be included and in which files is it referenced? What command should I run to test it?\n. What's the output when you rebuild `node-sass`? Does it help when you remove your `node_modules` folder and run a fresh `npm install`?\n. The path is different: `darwin-x64-46` vs `darwin-x64-11`. Is anything in your code configuring this explicitly? Try searching for BINARY_PATH or binaryPath in your source code to find any instance.\nThe 11 or 46 is the value of `process.versions.modules`. This could also be a mismatch when you build `node-sass` with a different node version than you're running `sass-loader` with. You should check that too. It seems you're running it with a lower version than the one you're building it with.\n. Are you absolutely sure that your program runs on node 4.0.0 and not some other version using nvm?\n. That could be because you didn't use any modules that must be compiled before sass-loader/node-sass.\n. ",
    "plaxdan": ":+1: was just about to do this.\n. :+1: was just about to do this.\n. ",
    "saki7": ":+1:\n. :+1: on this issue.\n. :+1:\n. :+1: on this issue.\n. ",
    "nkbt": "At the moment I am using     \n\n```\n\"sass-loader\": \"git://github.com/jtangelder/sass-loader#master\",\n```\n\nThat works but is creepy\n. At the moment I am using     \n\n```\n\"sass-loader\": \"git://github.com/jtangelder/sass-loader#master\",\n```\n\nThat works but is creepy\n. ",
    "mekwall": "@jhnns Any luck with this? I'd really love to get source maps to work, so if you have any pointers or want me to try something out I'm all ears :)\n. @jhnns I'll try to whip something together!\n. Doh! The devserver we use overrid the `devtool` setting to `eval`. Changing it to `source-map` solved everything! Thanks anyway and sorry for taking up your time...\n. @jhnns Any luck with this? I'd really love to get source maps to work, so if you have any pointers or want me to try something out I'm all ears :)\n. @jhnns I'll try to whip something together!\n. Doh! The devserver we use overrid the `devtool` setting to `eval`. Changing it to `source-map` solved everything! Thanks anyway and sorry for taking up your time...\n. ",
    "mikeyamadeo": "Hi. I've just begun configuring with webpack and for the life of me hadn't be able to get imports to resolve w/ a combination of webpack aliasing and modulesDirectories using sass-loader.  \n\n\"File to import not found or unreadable\" is my ever occurring error.\n\nAlas, I read the sass-loader caveat. Just wanted to confirm my understanding after reading through the issues that a solution to this is still being worked on? @jhnns\n\nThanks! \n. @grrowl Thank You! I appreciate you taking the time to help me out on this. This does just the trick.\n. Hi. I've just begun configuring with webpack and for the life of me hadn't be able to get imports to resolve w/ a combination of webpack aliasing and modulesDirectories using sass-loader.  \n\n\"File to import not found or unreadable\" is my ever occurring error.\n\nAlas, I read the sass-loader caveat. Just wanted to confirm my understanding after reading through the issues that a solution to this is still being worked on? @jhnns\n\nThanks! \n. @grrowl Thank You! I appreciate you taking the time to help me out on this. This does just the trick.\n. ",
    "grrowl": "@mikeyamadeo until sass-loader gets whatever resolution features they need from libsass, you'll have to do like this:\n\n`webpack.config.js`:\n\n``` js\n      {\n        test: /\\.s?css$/,\n        loaders: [\n          'css',\n          'sass?includePaths[]='+ path.resolve(__dirname, 'node_modules') +\n            '&includePaths[]='+ path.resolve(__dirname, 'bower_components')\n            // tells sass-loader to look in these dirs when resolving files\n        ]\n      }\n```\n\n`app.scss`:\n\n``` css\n// These files are in the same directory as app.scss\n@import \"variables\";\n@import \"breakpoints\";\n\n// These files are in the bower_components directory\n@import \"susy/sass/susy\"; // resolves to bower_components/susy/sass/_susy.scss\n@import \"compass-breakpoint/stylesheets/breakpoint\"; // resolves to bower_components/compass-breakpoint/stylesheets/breakpoint.scss\n```\n\nIf you use a lot of a library (such as pulling selective files from bootstrap), you could add that to your includePaths like `'&includePaths[]='+ path.resolve(__dirname, 'bower_components', 'bootstrap-sass', 'assets', 'stylesheets')`\n. but note your webpack `resolve.alias` settings won't never be taken into consideration for sass `@imports`, until https://github.com/jtangelder/sass-loader/pull/53\n. Same here (upgrading from 0.4.x), in my case I'm adding `require('node-bourbon').includePaths` to the `includePaths[]`, but `@import \"~bourbon\";` yields this error:\n\n```\n@import \"~bourbon\";\n       ^\n      File to import not found or unreadable: ~bourbon/Users/tom/Documents/project/src/css/\n```\n\nUsing `@import \"~node-bourbon/assets/stylesheets/bourbon\";` works though, so it's either not looking at `includePaths` any more in favour of the webpack loader, or won't resolve underscored scss files at module root.\n. @mikeyamadeo until sass-loader gets whatever resolution features they need from libsass, you'll have to do like this:\n\n`webpack.config.js`:\n\n``` js\n      {\n        test: /\\.s?css$/,\n        loaders: [\n          'css',\n          'sass?includePaths[]='+ path.resolve(__dirname, 'node_modules') +\n            '&includePaths[]='+ path.resolve(__dirname, 'bower_components')\n            // tells sass-loader to look in these dirs when resolving files\n        ]\n      }\n```\n\n`app.scss`:\n\n``` css\n// These files are in the same directory as app.scss\n@import \"variables\";\n@import \"breakpoints\";\n\n// These files are in the bower_components directory\n@import \"susy/sass/susy\"; // resolves to bower_components/susy/sass/_susy.scss\n@import \"compass-breakpoint/stylesheets/breakpoint\"; // resolves to bower_components/compass-breakpoint/stylesheets/breakpoint.scss\n```\n\nIf you use a lot of a library (such as pulling selective files from bootstrap), you could add that to your includePaths like `'&includePaths[]='+ path.resolve(__dirname, 'bower_components', 'bootstrap-sass', 'assets', 'stylesheets')`\n. but note your webpack `resolve.alias` settings won't never be taken into consideration for sass `@imports`, until https://github.com/jtangelder/sass-loader/pull/53\n. Same here (upgrading from 0.4.x), in my case I'm adding `require('node-bourbon').includePaths` to the `includePaths[]`, but `@import \"~bourbon\";` yields this error:\n\n```\n@import \"~bourbon\";\n       ^\n      File to import not found or unreadable: ~bourbon/Users/tom/Documents/project/src/css/\n```\n\nUsing `@import \"~node-bourbon/assets/stylesheets/bourbon\";` works though, so it's either not looking at `includePaths` any more in favour of the webpack loader, or won't resolve underscored scss files at module root.\n. ",
    "micahlmartin": "I agree. `peerDependency` would be the proper way to go. Thanks for getting this in so quickly.\n. I agree. `peerDependency` would be the proper way to go. Thanks for getting this in so quickly.\n. ",
    "nelix": "This is pretty great news!\n. This is pretty great news!\n. ",
    "kisenka": "Any ETA on this?\n. +1\n. Any ETA on this?\n. +1\n. ",
    "jenbennings": "I'm also getting this.\n. I'm also getting this.\n. ",
    "ryan1234": "+1 for this. =)\n. +1 for this. =)\n. ",
    "morethanfire": "+1 \n. +1 \n. ",
    "doylem": "Also seeing the same behaviour.\n. Also seeing the same behaviour.\n. ",
    "jcreamer898": "Thanks for the fix here @andycmaj, struggling with the same issue!\n. Had the same issue and the `UV_THREADPOOL_SIZE=100` variable solved it for now. \n. When someone says it's a threading issue...\n\n![](http://i41.tinypic.com/25rig5e.gif)\n. So I had to do `process.env.UV_THREADPOOL_SIZE = 20;` to get things working.\n\nIs that the permanent fix? Still feels more like a workaround.\n. Ok, I'll update to the latest and see if I can run it now without it. Thanks!\n. Yeah, I'll have a look.\n. @jhnns I still saw the issue in that branch unfortunately. The build I'm dealing with is quite large, so I'm not surprised. It hung at ~68% for me and just got stuck.\n. ![](http://d.pr/i/Kx49+)\n. Ha, I realized in my package.json I was on 2.0.1. Bumped to 3.1.1, removed the `env` thing, and it worked ok. \n. Thanks for the fix here @andycmaj, struggling with the same issue!\n. Had the same issue and the `UV_THREADPOOL_SIZE=100` variable solved it for now. \n. When someone says it's a threading issue...\n\n![](http://i41.tinypic.com/25rig5e.gif)\n. So I had to do `process.env.UV_THREADPOOL_SIZE = 20;` to get things working.\n\nIs that the permanent fix? Still feels more like a workaround.\n. Ok, I'll update to the latest and see if I can run it now without it. Thanks!\n. Yeah, I'll have a look.\n. @jhnns I still saw the issue in that branch unfortunately. The build I'm dealing with is quite large, so I'm not surprised. It hung at ~68% for me and just got stuck.\n. ![](http://d.pr/i/Kx49+)\n. Ha, I realized in my package.json I was on 2.0.1. Bumped to 3.1.1, removed the `env` thing, and it worked ok. \n. ",
    "alexhawkins": "Just wanted to iterate that this loader has been extremely troublesome for me. Slowing me down massively. Sometimes it works but mostly it crashes. At least i know what's causing it.\n. For those of you trying to get this to work, you need to use `sass/node-sass#v3.0.0-alpha.1`, with `sass-loader@0.4.2` . You can see a working version of it here in a project I was recently working on [https://github.com/alexhawkins/UberDoku](https://github.com/alexhawkins/UberDoku)  Look at my `package.json` and `webpack.config`\n. Just wanted to iterate that this loader has been extremely troublesome for me. Slowing me down massively. Sometimes it works but mostly it crashes. At least i know what's causing it.\n. For those of you trying to get this to work, you need to use `sass/node-sass#v3.0.0-alpha.1`, with `sass-loader@0.4.2` . You can see a working version of it here in a project I was recently working on [https://github.com/alexhawkins/UberDoku](https://github.com/alexhawkins/UberDoku)  Look at my `package.json` and `webpack.config`\n. ",
    "akloeber": "For those still looking for a workaround: `sass-loader@0.6.0` does not work neither as it depends on  `node-sass@2.1.1` which, according to the comments in https://github.com/sass/node-sass/issues/713, is also one of the versions that provoke these errors.\n\nThe latest working version seems to be `node-sass@2.0.1` but even explicitely depending on `node-sass@2.0.1` as a peer dependency is not a workaround because it does not satisfy `^2.1.1`.\n. Unfortunately `sass-loader@0.4.2` has dependency `\"node-sass\": \"^2.0.1\"` which means that the latest `node-sass@2.1.1` gets installed.\n. For those still looking for a workaround: `sass-loader@0.6.0` does not work neither as it depends on  `node-sass@2.1.1` which, according to the comments in https://github.com/sass/node-sass/issues/713, is also one of the versions that provoke these errors.\n\nThe latest working version seems to be `node-sass@2.0.1` but even explicitely depending on `node-sass@2.0.1` as a peer dependency is not a workaround because it does not satisfy `^2.1.1`.\n. Unfortunately `sass-loader@0.4.2` has dependency `\"node-sass\": \"^2.0.1\"` which means that the latest `node-sass@2.1.1` gets installed.\n. ",
    "raphaelsaunier": "Same here; I had to downgrade to `0.4.2` (\u2026and not `0.6.0`, as recommended in the README) to get rid of the errors.\n\nsass/node-sass@fce099346a0c6e6fc6b9c8d4543fbbf077025118 allegedly fixes this issue, however even when using it, I kept getting random crashes with both `sass-loader@0.6.0` and `1.0.1`.\n. Same here; I had to downgrade to `0.4.2` (\u2026and not `0.6.0`, as recommended in the README) to get rid of the errors.\n\nsass/node-sass@fce099346a0c6e6fc6b9c8d4543fbbf077025118 allegedly fixes this issue, however even when using it, I kept getting random crashes with both `sass-loader@0.6.0` and `1.0.1`.\n. ",
    "alexduan": "This should probably be a separate issue, but after upgrading to 1.0.2 webpack will just completely hang.\n. This should probably be a separate issue, but after upgrading to 1.0.2 webpack will just completely hang.\n. ",
    "marklundin": "What's the temp workaround for this? `npm install node-sass`?\n. What's the temp workaround for this? `npm install node-sass`?\n. ",
    "nub4life": "I'm getting the same error, with node-sass 3.0.0-alpha.0 in my project's dependencies. Any suggestions?\n. I'm getting the same error, with node-sass 3.0.0-alpha.0 in my project's dependencies. Any suggestions?\n. ",
    "mrsum": "``` sh\n@import 'blocks/*'; -> File to import not found or unreadable: ./blocks/_*.sass\n```\n\nI have:\n\"node-sass\": \"^3.0.0-beta.7\",\n\"sass-loader\": \"^1.0.1\",\n. ``` sh\n@import 'blocks/*'; -> File to import not found or unreadable: ./blocks/_*.sass\n```\n\nI have:\n\"node-sass\": \"^3.0.0-beta.7\",\n\"sass-loader\": \"^1.0.1\",\n. ",
    "hiroshi": "@mrsum FYI\nfor glob import, https://github.com/Aintaer/import-glob-loader seems to work for me.\n. @mrsum FYI\nfor glob import, https://github.com/Aintaer/import-glob-loader seems to work for me.\n. ",
    "Chandu": "I added a css-loader to the pipeline and the issue is now resolved.\n. I added a css-loader to the pipeline and the issue is now resolved.\n. ",
    "danazkari": "hey @Chandu I have the same issue right now and I do have installed the css-loader installed and it's in the pipeline.\n\n**webpack.config.js**\n\n``` javascript\n    loaders: [\n        {\n            test: /\\.scss$/,\n            loader: 'style!css!sass'\n        }\n    ]\n```\n\n**index.scss**\n\n``` scss\nbody, html {\n    margin: 0;\n    padding: 0;\n    font-family: 'Helvetica', 'Arial', sans-serif;\n    color: #666;\n}\n```\n\nWhat did you do different?\n. nm, I just fixed it, was missing the module object inside the webpack.config.js. Thanks!\n. hey @Chandu I have the same issue right now and I do have installed the css-loader installed and it's in the pipeline.\n\n**webpack.config.js**\n\n``` javascript\n    loaders: [\n        {\n            test: /\\.scss$/,\n            loader: 'style!css!sass'\n        }\n    ]\n```\n\n**index.scss**\n\n``` scss\nbody, html {\n    margin: 0;\n    padding: 0;\n    font-family: 'Helvetica', 'Arial', sans-serif;\n    color: #666;\n}\n```\n\nWhat did you do different?\n. nm, I just fixed it, was missing the module object inside the webpack.config.js. Thanks!\n. ",
    "seanwash": "@danazkari Strange, I'm having the same issue as well and I do have the module object like so:\n\n``` javascript\nvar BrowserSyncPlugin = require('browser-sync-webpack-plugin'),\n    ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  entry: './source/index.coffee',\n\n  output: {\n    filename: './app/bundle.js'\n  },\n\n  module: {\n    loaders: [\n      {test: /\\.coffee$/, loader: 'coffee'},\n      {test: /\\.scss$/, loader: ExtractTextPlugin.extract('css!sass'), include: './source/scss'}\n    ]\n  },\n\n  plugins: [\n    new BrowserSyncPlugin({\n      host: 'localhost',\n      port: 9000,\n      server: {baseDir: ['./app']}\n    }),\n\n    new ExtractTextPlugin('./app/bundle.css', {\n      allChunks: true\n    })\n  ]\n}\n```\n\n``` scss\nbody {\n  background: red;\n  color: #fff;\n}\n```\n. @raphaelparent wow I don't know how I missed your reply! Sorry about that.\n\nI also solved this problem with the extract text plugin, then I require the css file at the top of of main is file. I can post the code if anyone needs. \n. @danazkari Strange, I'm having the same issue as well and I do have the module object like so:\n\n``` javascript\nvar BrowserSyncPlugin = require('browser-sync-webpack-plugin'),\n    ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  entry: './source/index.coffee',\n\n  output: {\n    filename: './app/bundle.js'\n  },\n\n  module: {\n    loaders: [\n      {test: /\\.coffee$/, loader: 'coffee'},\n      {test: /\\.scss$/, loader: ExtractTextPlugin.extract('css!sass'), include: './source/scss'}\n    ]\n  },\n\n  plugins: [\n    new BrowserSyncPlugin({\n      host: 'localhost',\n      port: 9000,\n      server: {baseDir: ['./app']}\n    }),\n\n    new ExtractTextPlugin('./app/bundle.css', {\n      allChunks: true\n    })\n  ]\n}\n```\n\n``` scss\nbody {\n  background: red;\n  color: #fff;\n}\n```\n. @raphaelparent wow I don't know how I missed your reply! Sorry about that.\n\nI also solved this problem with the extract text plugin, then I require the css file at the top of of main is file. I can post the code if anyone needs. \n. ",
    "raphaelparent": "I have the same problem here.\n@seanwash Did you manage to make it work?\n\nThis works on the client though. But every time I refresh, there's a glitch before css is loaded because webpack is building the file, which is not exactly what I want.\n\n``` javascript\nconst config = {\n    devtool: \"source-map\",\n    entry: [\n        `webpack-dev-server/client?http://${host}:${port}`,\n        \"webpack/hot/only-dev-server\",\n        \"./src/client.js\"\n    ],\n    output: {\n        filename: \"bundle.js\",\n        chunkFilename: \"[name].bundle.js\",\n        path: dist,\n        publicPath: `http://${host}:${port}/dist/`\n    },\n    module: {\n    loaders: [\n            {\n                test: /\\.js$/,\n                exclude: /node_modules/,\n                loaders: [\"react-hot\", \"babel?cacheDirectory\"]\n            },\n            {\n                test: /\\.scss$/,\n                loaders: [\"style\", \"css\", \"sass\"]\n            },\n            {\n                test: /\\.(jpe?g|png|gif|svg)$/,\n                loader: \"file\"\n            }\n        ]\n    },\n    sassLoader: {\n        includePaths: [path.resolve(__dirname, \"../style\")]\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.DefinePlugin({\n            \"process.env\": {\n                NODE_ENV: JSON.stringify(\"development\"),\n                BROWSER: JSON.stringify(true)\n            }\n        }),\n        new WebpackErrorNotificationPlugin()\n    ]\n};\n```\n\nAnd I try to import it like that. \n\n``` javascript\nimport '../../style/utils/normalize.scss';\n```\n\nAnd I get that error.\n\n``` bash\nSyntaxError: /Users/rparent/Documents/CTSProjects/arsenal/cms/application/app/style/utils/normalize.scss: Unexpected token (9:5)\n   7 |  */\n   8 | \n>  9 | html {\n     |      ^\n  10 |   font-family: sans-serif; /* 1 */\n  11 |   -ms-text-size-adjust: 100%; /* 2 */\n  12 |   -webkit-text-size-adjust: 100%; /* 2 */\n```\n. I managed to make it work with the ExtractTextPlugin. It makes a big bundle of all required stylesheet (I think) and then makes it available for the server-side rendering.\n\nMight not be the best way but it definitely work. \n. I have the same problem here.\n@seanwash Did you manage to make it work?\n\nThis works on the client though. But every time I refresh, there's a glitch before css is loaded because webpack is building the file, which is not exactly what I want.\n\n``` javascript\nconst config = {\n    devtool: \"source-map\",\n    entry: [\n        `webpack-dev-server/client?http://${host}:${port}`,\n        \"webpack/hot/only-dev-server\",\n        \"./src/client.js\"\n    ],\n    output: {\n        filename: \"bundle.js\",\n        chunkFilename: \"[name].bundle.js\",\n        path: dist,\n        publicPath: `http://${host}:${port}/dist/`\n    },\n    module: {\n    loaders: [\n            {\n                test: /\\.js$/,\n                exclude: /node_modules/,\n                loaders: [\"react-hot\", \"babel?cacheDirectory\"]\n            },\n            {\n                test: /\\.scss$/,\n                loaders: [\"style\", \"css\", \"sass\"]\n            },\n            {\n                test: /\\.(jpe?g|png|gif|svg)$/,\n                loader: \"file\"\n            }\n        ]\n    },\n    sassLoader: {\n        includePaths: [path.resolve(__dirname, \"../style\")]\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.DefinePlugin({\n            \"process.env\": {\n                NODE_ENV: JSON.stringify(\"development\"),\n                BROWSER: JSON.stringify(true)\n            }\n        }),\n        new WebpackErrorNotificationPlugin()\n    ]\n};\n```\n\nAnd I try to import it like that. \n\n``` javascript\nimport '../../style/utils/normalize.scss';\n```\n\nAnd I get that error.\n\n``` bash\nSyntaxError: /Users/rparent/Documents/CTSProjects/arsenal/cms/application/app/style/utils/normalize.scss: Unexpected token (9:5)\n   7 |  */\n   8 | \n>  9 | html {\n     |      ^\n  10 |   font-family: sans-serif; /* 1 */\n  11 |   -ms-text-size-adjust: 100%; /* 2 */\n  12 |   -webkit-text-size-adjust: 100%; /* 2 */\n```\n. I managed to make it work with the ExtractTextPlugin. It makes a big bundle of all required stylesheet (I think) and then makes it available for the server-side rendering.\n\nMight not be the best way but it definitely work. \n. ",
    "rpmonteiro": "Would be great if you guys could post a solution once you found it \ud83d\udc4d \n. @seanwash Yes, please do show the code!! :)\n\nI fixed the error on the first post by adding `!css` to `require('css!./stylesheets/main.scss');`\nTook me about 4h to figure this out.. phew.\n\nIt compiles just fine to JS, but I still don't have the CSS file.\nSo I'm trying to setup the ExtractTextPlugin, and I've come across this:\n\n`ERROR in ./~/css-loader!./src/stylesheets/main.scss\nModule build failed: CssSyntaxError: /css-loader!/Users/...`\n\nAny ideas guys?\n. Would be great if you guys could post a solution once you found it \ud83d\udc4d \n. @seanwash Yes, please do show the code!! :)\n\nI fixed the error on the first post by adding `!css` to `require('css!./stylesheets/main.scss');`\nTook me about 4h to figure this out.. phew.\n\nIt compiles just fine to JS, but I still don't have the CSS file.\nSo I'm trying to setup the ExtractTextPlugin, and I've come across this:\n\n`ERROR in ./~/css-loader!./src/stylesheets/main.scss\nModule build failed: CssSyntaxError: /css-loader!/Users/...`\n\nAny ideas guys?\n. ",
    "sampeka": "Experiencing the same problem, not exactly sure what the problem is but it looks like the `scss` file is being treated like a javascript module even though there are loaders in place. \n\n```\nSyntaxError: /Users/sampeka/dev/sharestyle/app/styles/components/Logo.scss: Unexpected token (1:0)\n> 1 | .logo img {\n    | ^\n  2 |    width: 100%;\n  3 | }\n  4 | \n    at Parser.pp.raise (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:1378:13)\n    at Parser.pp.unexpected (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:2817:8)\n    at Parser.pp.parseExprAtom (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:749:12)\n    at Parser.parseExprAtom (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:4305:22)\n    at Parser.pp.parseExprSubscripts (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:504:19)\n    at Parser.pp.parseMaybeUnary (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:484:19)\n    at Parser.pp.parseExprOps (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:415:19)\n    at Parser.pp.parseMaybeConditional (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:397:19)\n    at Parser.pp.parseMaybeAssign (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:360:19)\n    at Parser.pp.parseExpression (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:324:19)\n```\n. Experiencing the same problem, not exactly sure what the problem is but it looks like the `scss` file is being treated like a javascript module even though there are loaders in place. \n\n```\nSyntaxError: /Users/sampeka/dev/sharestyle/app/styles/components/Logo.scss: Unexpected token (1:0)\n> 1 | .logo img {\n    | ^\n  2 |    width: 100%;\n  3 | }\n  4 | \n    at Parser.pp.raise (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:1378:13)\n    at Parser.pp.unexpected (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:2817:8)\n    at Parser.pp.parseExprAtom (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:749:12)\n    at Parser.parseExprAtom (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:4305:22)\n    at Parser.pp.parseExprSubscripts (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:504:19)\n    at Parser.pp.parseMaybeUnary (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:484:19)\n    at Parser.pp.parseExprOps (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:415:19)\n    at Parser.pp.parseMaybeConditional (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:397:19)\n    at Parser.pp.parseMaybeAssign (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:360:19)\n    at Parser.pp.parseExpression (/Users/sampeka/dev/sharestyle/node_modules/babylon/index.js:324:19)\n```\n. ",
    "fxlemire": "I had the same issue, and **somehow**... I insist on \"**somehow**\", I fixed it by changing my loader from `loader: 'style!css!sass'` to `loaders: [\"style\", \"css\", \"sass\"]`.\n\nAnd here comes the mesmerizing part: I changed it back to `loader: 'style!css!sass'` and it still worked... **somehow**...\n. I had the same issue, and **somehow**... I insist on \"**somehow**\", I fixed it by changing my loader from `loader: 'style!css!sass'` to `loaders: [\"style\", \"css\", \"sass\"]`.\n\nAnd here comes the mesmerizing part: I changed it back to `loader: 'style!css!sass'` and it still worked... **somehow**...\n. ",
    "ilearnio": "Had the same issue, it turned out that it was Node who was throwing error but not Webpack since I'm running my code on both server and client. And Node, of course, doesn't know what to do with `.scss` files\n\nSo I fixed it by putting this code into my server-only file\n\n```\nrequire.extensions['.scss'] = function () {}\n```\n. Had the same issue, it turned out that it was Node who was throwing error but not Webpack since I'm running my code on both server and client. And Node, of course, doesn't know what to do with `.scss` files\n\nSo I fixed it by putting this code into my server-only file\n\n```\nrequire.extensions['.scss'] = function () {}\n```\n. ",
    "erik-sn": "I'm not sure if everyone above was in the same situation, but I ran across this issue trying to do Isomorphic/Server Side rendering for React.\n\n @ilearnio's solution didn't work for me - however the problem is definitely Node. Basically the wrinkle is that Webpack does its magic by looking for require/imports. So you must require/import the .scss file - however if you are doing Isomorphic/Server Side rendering, Node does not know what these .scss or even .css files are and has no webpack to help it, and you end up with a lot of \"Unexpected Token\" errors.\n\nI followed the solution described [here:](http://stackoverflow.com/a/30355080/4396787) and it worked well. Basically you declare the process.env.BROWSER variable in webpack, and conditionally require your .scss files on the client side if this variable exists. You also delete it at the beginning of your server.js file so it does not exist - so the server side code will not try to import it.\n. I'm not sure if everyone above was in the same situation, but I ran across this issue trying to do Isomorphic/Server Side rendering for React.\n\n @ilearnio's solution didn't work for me - however the problem is definitely Node. Basically the wrinkle is that Webpack does its magic by looking for require/imports. So you must require/import the .scss file - however if you are doing Isomorphic/Server Side rendering, Node does not know what these .scss or even .css files are and has no webpack to help it, and you end up with a lot of \"Unexpected Token\" errors.\n\nI followed the solution described [here:](http://stackoverflow.com/a/30355080/4396787) and it worked well. Basically you declare the process.env.BROWSER variable in webpack, and conditionally require your .scss files on the client side if this variable exists. You also delete it at the beginning of your server.js file so it does not exist - so the server side code will not try to import it.\n. ",
    "vanekbr": "I had the same problem, and for me solution was pretty simple. Webpack using different conf file for tests and there was no loaders for css|scss files. Hope it helps somebody.\n. I had the same problem, and for me solution was pretty simple. Webpack using different conf file for tests and there was no loaders for css|scss files. Hope it helps somebody.\n. ",
    "ivanminutillo": "why. no one. shows. a solution with code. -_-\n. why. no one. shows. a solution with code. -_-\n. ",
    "bigopon": "This is what works for my `.less`\n\n``` javascript\nmodule: {\n    loaders: [\n        {\n            test: /\\.(less|css)$/,\n            include: /resources/,\n            loaders: [\n                'style?singleton',\n                ExtractTextPlugin.extract(`css?${JSON.stringify({\n                    // sourceMap: DEBUG,\n                    // CSS Modules https://github.com/css-modules/css-modules\n                    // modules: true,\n                    // camelCase: true,\n                    // localIdentName: DEBUG ? '[name]_[local]_[hash:base64:3]' : '[hash:base64:4]',\n                    // CSS Nano http://cssnano.co/options/\n                    minimize: !DEBUG,\n                    calc: false,\n                })}`),\n                'postcss',\n                'less',\n            ]\n        },\n    ]\n},\nplugins: [\n    new ExtractTextPlugin('style.min.css'),\n]\n```\n\n## **Note**\n\nI use `webpack@2.1.0-beta.21` and `extract-text-webpack-plugin@2.0.0-beta.4`\n. This is what works for my `.less`\n\n``` javascript\nmodule: {\n    loaders: [\n        {\n            test: /\\.(less|css)$/,\n            include: /resources/,\n            loaders: [\n                'style?singleton',\n                ExtractTextPlugin.extract(`css?${JSON.stringify({\n                    // sourceMap: DEBUG,\n                    // CSS Modules https://github.com/css-modules/css-modules\n                    // modules: true,\n                    // camelCase: true,\n                    // localIdentName: DEBUG ? '[name]_[local]_[hash:base64:3]' : '[hash:base64:4]',\n                    // CSS Nano http://cssnano.co/options/\n                    minimize: !DEBUG,\n                    calc: false,\n                })}`),\n                'postcss',\n                'less',\n            ]\n        },\n    ]\n},\nplugins: [\n    new ExtractTextPlugin('style.min.css'),\n]\n```\n\n## **Note**\n\nI use `webpack@2.1.0-beta.21` and `extract-text-webpack-plugin@2.0.0-beta.4`\n. ",
    "msuzoagu": "HI! I am having a bit of a problem getting sass-loader working properly.  Current structure of project (as it relates to sass configuration): \n\n```\n  - projectdir/\n    - src/ \n       - app.js (root component, which imports styles in stylesheets/main.scss) \n   - stylesheets/\n      - base/ \n      - components/\n      - vendors/\n      - main.scss\n```\n\nwebpack.config.dev.js \n\n```\n  {\n     // Load SCSS \n      test: /\\.scss$/,  \n     loaders: ['style', 'css', 'sass'],  \n     // tell webpack where to look for sass/css files?  \n     include:path.resolve(__dirname, 'stylesheets')  \n  }\n```\n\nnow in stylesheets/main.scss, I have the following:  \n\n```\n  // each component makes use of what it needs \n  .landingPage-nav-component {\n    @import 'base/all';\n    @import 'vendors/all';\n    @import 'components/header';\n  }\n```\n\nWhen I run `npm start` I expect the styles in `stylesheets/main.scss` to be available in app but rather I get the error:  \n\n```\n  Error in ./stylesheets/main.scss\nModule parse failed: /Users/comp1/Code/Javascript/React/nonAdmin_frontend/stylesheets/main.scss \nUnexpected token (14:0)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected token (14:0)\n @ ./src/app.js 17:0-35 \n```\n\nChrome dev has this error message: \n\n```\n./stylesheets/main.scss\nModule parse failed: /Users/comp1/Code/Javascript/React/nonAdmin_frontend/stylesheets/main.scss \nUnexpected character '@' (13:0)\nYou may need an appropriate loader to handle this file type. \n```\n\nAny tips on what I might be doing wrong?\n. @LoicUV and @Bosper: commenting out:\n\n```\n {\n     include:path.resolve(__dirname, 'stylesheets')  \n  }\n```\n\ngot everything working. Not sure why but thought it might be helpful for you both to know. \n. HI! I am having a bit of a problem getting sass-loader working properly.  Current structure of project (as it relates to sass configuration): \n\n```\n  - projectdir/\n    - src/ \n       - app.js (root component, which imports styles in stylesheets/main.scss) \n   - stylesheets/\n      - base/ \n      - components/\n      - vendors/\n      - main.scss\n```\n\nwebpack.config.dev.js \n\n```\n  {\n     // Load SCSS \n      test: /\\.scss$/,  \n     loaders: ['style', 'css', 'sass'],  \n     // tell webpack where to look for sass/css files?  \n     include:path.resolve(__dirname, 'stylesheets')  \n  }\n```\n\nnow in stylesheets/main.scss, I have the following:  \n\n```\n  // each component makes use of what it needs \n  .landingPage-nav-component {\n    @import 'base/all';\n    @import 'vendors/all';\n    @import 'components/header';\n  }\n```\n\nWhen I run `npm start` I expect the styles in `stylesheets/main.scss` to be available in app but rather I get the error:  \n\n```\n  Error in ./stylesheets/main.scss\nModule parse failed: /Users/comp1/Code/Javascript/React/nonAdmin_frontend/stylesheets/main.scss \nUnexpected token (14:0)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected token (14:0)\n @ ./src/app.js 17:0-35 \n```\n\nChrome dev has this error message: \n\n```\n./stylesheets/main.scss\nModule parse failed: /Users/comp1/Code/Javascript/React/nonAdmin_frontend/stylesheets/main.scss \nUnexpected character '@' (13:0)\nYou may need an appropriate loader to handle this file type. \n```\n\nAny tips on what I might be doing wrong?\n. @LoicUV and @Bosper: commenting out:\n\n```\n {\n     include:path.resolve(__dirname, 'stylesheets')  \n  }\n```\n\ngot everything working. Not sure why but thought it might be helpful for you both to know. \n. ",
    "LoicUV": "@MsUzoAgu I'm in the exact same situation.\n. @MsUzoAgu I'm in the exact same situation.\n. ",
    "Bosper": "Also I, Someone found solution?\n. Also I, Someone found solution?\n. ",
    "chellberg": "@fxlemire your solution **somehow** worked for me too. Thanks!\n. @fxlemire your solution **somehow** worked for me too. Thanks!\n. ",
    "toJanhonen": "as @MsUzoAgu stated, include and/or exclude statements break this loader. i do not understand why this issue is closed. what am i missing here?\n\nbeing able to include and exclude certain files is vital in my setup, so the workaround of removing the statement(s) is not really doing it for me.\njust to clarify, i would like to understand if this is a bug, or desired behaviour of this loader.\n. never mind. was completely my bad.\ninclude and exclude statements work as they should.\n. as @MsUzoAgu stated, include and/or exclude statements break this loader. i do not understand why this issue is closed. what am i missing here?\n\nbeing able to include and exclude certain files is vital in my setup, so the workaround of removing the statement(s) is not really doing it for me.\njust to clarify, i would like to understand if this is a bug, or desired behaviour of this loader.\n. never mind. was completely my bad.\ninclude and exclude statements work as they should.\n. ",
    "mcntsh": "I **fixed this issue** in `webpack@2.1.0-beta.25` by passing a value for `includePaths`...\n\n```\nExtractTextPlugin.extract({\n   fallbackLoader: 'style-loader',\n   loader: 'css-loader!sass-loader?includePaths[]=' + path.resolve(__dirname, './src')\n})\n```\n. I **fixed this issue** in `webpack@2.1.0-beta.25` by passing a value for `includePaths`...\n\n```\nExtractTextPlugin.extract({\n   fallbackLoader: 'style-loader',\n   loader: 'css-loader!sass-loader?includePaths[]=' + path.resolve(__dirname, './src')\n})\n```\n. ",
    "Natumsol": "I have met the same problem, and it is caused by passing wrong params to `ExtractTextPlugin`:\r\n```JS\r\nmodule: {\r\n        loaders: [{\r\n            test: /\\.scss$/,\r\n            loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\", \"sass-loader\")\r\n        }]\r\n}\r\n```\r\nand I have solved it by doing this:\r\n```JS\r\nmodule: {\r\n        loaders: [{\r\n            test: /\\.scss$/,\r\n            loader: ExtractTextPlugin.extract(\"style-loader\", \"css!sass\")\r\n        }]\r\n}\r\n```. I have met the same problem, and it is caused by passing wrong params to `ExtractTextPlugin`:\r\n```JS\r\nmodule: {\r\n        loaders: [{\r\n            test: /\\.scss$/,\r\n            loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\", \"sass-loader\")\r\n        }]\r\n}\r\n```\r\nand I have solved it by doing this:\r\n```JS\r\nmodule: {\r\n        loaders: [{\r\n            test: /\\.scss$/,\r\n            loader: ExtractTextPlugin.extract(\"style-loader\", \"css!sass\")\r\n        }]\r\n}\r\n```. ",
    "alex3t": "This config fixed problem with include path for me:\r\n\r\n```\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.(scss|css)$/,\r\n\t\t\t\tinclude: [path.resolve(__dirname, 'src/components')],\r\n\t\t\t\tloader: ExtractTextPlugin.extract('style?singleton', [\r\n\t\t\t\t\t`css-loader?modules&importLoaders=1`,\r\n\t\t\t\t\t'postcss-loader',\r\n\t\t\t\t\t`sass-loader`\r\n\t\t\t\t].join('!'))\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.(scss|css)$/,\r\n\t\t\t\texclude: [path.resolve(__dirname, 'src/components')],\r\n\t\t\t\tloader: ExtractTextPlugin.extract('style?singleton', [\r\n\t\t\t\t\t`css`,\r\n\t\t\t\t\t`postcss`,\r\n\t\t\t\t\t`sass`\r\n\t\t\t\t].join('!'))\r\n\t\t\t},\r\n```. This config fixed problem with include path for me:\r\n\r\n```\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.(scss|css)$/,\r\n\t\t\t\tinclude: [path.resolve(__dirname, 'src/components')],\r\n\t\t\t\tloader: ExtractTextPlugin.extract('style?singleton', [\r\n\t\t\t\t\t`css-loader?modules&importLoaders=1`,\r\n\t\t\t\t\t'postcss-loader',\r\n\t\t\t\t\t`sass-loader`\r\n\t\t\t\t].join('!'))\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.(scss|css)$/,\r\n\t\t\t\texclude: [path.resolve(__dirname, 'src/components')],\r\n\t\t\t\tloader: ExtractTextPlugin.extract('style?singleton', [\r\n\t\t\t\t\t`css`,\r\n\t\t\t\t\t`postcss`,\r\n\t\t\t\t\t`sass`\r\n\t\t\t\t].join('!'))\r\n\t\t\t},\r\n```. ",
    "jaimz22": "I just want to let you all know that I had this exact same problem. In my case it turns out that I had a typo. I had ```modules``` instead of ```module```\r\n\r\ndouble check ALL your keywords!. I just want to let you all know that I had this exact same problem. In my case it turns out that I had a typo. I had ```modules``` instead of ```module```\r\n\r\ndouble check ALL your keywords!. ",
    "andreyluiz": "@sampeka I have the exact same problem you had. Did you solve the problem?. @erik-sn solution solved for me. For the ones who are lazy and do not want to go to Stackoverflow, here follows.\r\n\r\nBasically, just set in your webpack config **for client side**:\r\n```javascript\r\nplugins: [\r\n  new webpack.DefinePlugin({\r\n    'process.env.BROWSER': JSON.stringify(true),\r\n  })\r\n],\r\n```\r\n\r\nThen, in the component that is being rendered on server side, just test:\r\n\r\n```javascript\r\nif (process.env.BROWSER) {\r\n  require('./MyStyle.scss');\r\n}\r\n```\r\n\r\nSolved for me. Hope it helps. :). @sampeka I have the exact same problem you had. Did you solve the problem?. @erik-sn solution solved for me. For the ones who are lazy and do not want to go to Stackoverflow, here follows.\r\n\r\nBasically, just set in your webpack config **for client side**:\r\n```javascript\r\nplugins: [\r\n  new webpack.DefinePlugin({\r\n    'process.env.BROWSER': JSON.stringify(true),\r\n  })\r\n],\r\n```\r\n\r\nThen, in the component that is being rendered on server side, just test:\r\n\r\n```javascript\r\nif (process.env.BROWSER) {\r\n  require('./MyStyle.scss');\r\n}\r\n```\r\n\r\nSolved for me. Hope it helps. :). ",
    "erikjohnsen6d": "I'm still not seeing a fix here that works for me.. Update: My issue was odd. It was actually a GitHub lost commit unrelated to the project, but with identical results.. I'm still not seeing a fix here that works for me.. Update: My issue was odd. It was actually a GitHub lost commit unrelated to the project, but with identical results.. ",
    "nrvarun": "`{ \r\n            test: /\\.scss$/, \r\n            loader: ETP.extract(\"style-loader\", \"css!postcss!sass!\")\r\n }`\r\n\r\nThis worked for me and ETP is ExtractTextPlugin. The issue i had was that the file name was wrong. Silly issue \ud83d\udc4d . `{ \r\n            test: /\\.scss$/, \r\n            loader: ETP.extract(\"style-loader\", \"css!postcss!sass!\")\r\n }`\r\n\r\nThis worked for me and ETP is ExtractTextPlugin. The issue i had was that the file name was wrong. Silly issue \ud83d\udc4d . ",
    "brettinternet": "Explicitly excluding `node_modules` was the solution for me.\r\n\r\n```\r\n{\r\n      test: /\\.scss$/,\r\n      exclude: /node_modules/,\r\n      loaders: ['style-loader', 'css-loader', 'sass-loader'],\r\n}\r\n```\r\n\r\nIf you have to include `node_modules` for specific css files like Bootstrap or Toastr, then either `@import` the css files into your `styles.scss` or create a separate loader with them specifically for `/\\.css$/` files that includes `node_modules`.. Explicitly excluding `node_modules` was the solution for me.\r\n\r\n```\r\n{\r\n      test: /\\.scss$/,\r\n      exclude: /node_modules/,\r\n      loaders: ['style-loader', 'css-loader', 'sass-loader'],\r\n}\r\n```\r\n\r\nIf you have to include `node_modules` for specific css files like Bootstrap or Toastr, then either `@import` the css files into your `styles.scss` or create a separate loader with them specifically for `/\\.css$/` files that includes `node_modules`.. ",
    "CharlieEscoboza": "If someone like me still needing this information this is my webpack.config file @Chandu gave the idea how to solve it. Thanks.\r\nI'm using webpack 2.2 and extract-text-plugin@beta (^2.0.0-rc.3)\r\n![image](https://cloud.githubusercontent.com/assets/6286558/22866198/70646378-f148-11e6-9b22-2553c5294bac.png)\r\n. If someone like me still needing this information this is my webpack.config file @Chandu gave the idea how to solve it. Thanks.\r\nI'm using webpack 2.2 and extract-text-plugin@beta (^2.0.0-rc.3)\r\n![image](https://cloud.githubusercontent.com/assets/6286558/22866198/70646378-f148-11e6-9b22-2553c5294bac.png)\r\n. ",
    "uoc1691": "Had the same issue. It was the path used for include. It was incorrect. Here's a working config.\r\n\r\n![image](https://user-images.githubusercontent.com/1751412/28968477-7bb19dce-7963-11e7-95f1-1897d7a36dc1.png)\r\n. Had the same issue. It was the path used for include. It was incorrect. Here's a working config.\r\n\r\n![image](https://user-images.githubusercontent.com/1751412/28968477-7bb19dce-7963-11e7-95f1-1897d7a36dc1.png)\r\n. ",
    "ParthBarot-BoTreeConsulting": "Setting up an existing codebase and facing the same issue, Tried everything but its not working.\r\n\r\nnode version - `v8.0.0`\r\nwebpack version - `1.15.0` \r\nsass-loader version - `3.2.3`\r\n\r\nFollowing is the webpack config snippet\r\n\r\n``` javascript\r\nconst cssLoader = !config.compiler_css_modules\r\n  ? 'css?sourceMap'\r\n  : [\r\n    'css?modules',\r\n    'sourceMap',\r\n    'importLoaders=1',\r\n    // 'localIdentName=[name]__[local]___[hash:base64:5]',\r\n    'localIdentName=[local]',\r\n    'outputStyle=expanded'\r\n    // includePaths[]= + encoreURIComponent(paths.base('app','styles')) ?\r\n  ].join('&');\r\n\r\nwebpackConfig.module.loaders.push({\r\n  test: /\\.scss$/,\r\n  include: /app/,\r\n  loaders: [\r\n    'style',\r\n    cssLoader,\r\n    'postcss',\r\n    'sass'\r\n  ]\r\n});\r\n\r\nwebpackConfig.module.loaders.push({\r\n  test: /\\.css$/,\r\n  include: /app/,\r\n  loaders: [\r\n    'style',\r\n    cssLoader,\r\n    'postcss'\r\n  ]\r\n});\r\n\r\n// Don't treat global SCSS as modules\r\nwebpackConfig.module.loaders.push({\r\n  test: /\\.scss$/,\r\n  exclude: /app/,\r\n  loaders: [\r\n    'style',\r\n    'css?sourceMap',\r\n    'postcss',\r\n    'sass'\r\n  ]\r\n});\r\n\r\n// Don't treat global, third-party CSS as modules\r\nwebpackConfig.module.loaders.push({\r\n  test: /\\.css$/,\r\n  exclude: /app/,\r\n  loaders: [\r\n    'style',\r\n    'css?sourceMap',\r\n    'postcss'\r\n  ]\r\n});\r\n\r\nwebpackConfig.sassLoader = {\r\n  includePaths: paths.client('styles'),\r\n  outputStyle: 'expanded'\r\n};\r\n\r\nwebpackConfig.postcss = [\r\n  cssnano({\r\n    sourcemap: true,\r\n    autoprefixer: {\r\n      add: true,\r\n      remove: true,\r\n      browsers: ['last 2 versions']\r\n    },\r\n    safe: true,\r\n    discardComments: {\r\n      removeAll: true\r\n    }\r\n  })\r\n];\r\n```. Setting up an existing codebase and facing the same issue, Tried everything but its not working.\r\n\r\nnode version - `v8.0.0`\r\nwebpack version - `1.15.0` \r\nsass-loader version - `3.2.3`\r\n\r\nFollowing is the webpack config snippet\r\n\r\n``` javascript\r\nconst cssLoader = !config.compiler_css_modules\r\n  ? 'css?sourceMap'\r\n  : [\r\n    'css?modules',\r\n    'sourceMap',\r\n    'importLoaders=1',\r\n    // 'localIdentName=[name]__[local]___[hash:base64:5]',\r\n    'localIdentName=[local]',\r\n    'outputStyle=expanded'\r\n    // includePaths[]= + encoreURIComponent(paths.base('app','styles')) ?\r\n  ].join('&');\r\n\r\nwebpackConfig.module.loaders.push({\r\n  test: /\\.scss$/,\r\n  include: /app/,\r\n  loaders: [\r\n    'style',\r\n    cssLoader,\r\n    'postcss',\r\n    'sass'\r\n  ]\r\n});\r\n\r\nwebpackConfig.module.loaders.push({\r\n  test: /\\.css$/,\r\n  include: /app/,\r\n  loaders: [\r\n    'style',\r\n    cssLoader,\r\n    'postcss'\r\n  ]\r\n});\r\n\r\n// Don't treat global SCSS as modules\r\nwebpackConfig.module.loaders.push({\r\n  test: /\\.scss$/,\r\n  exclude: /app/,\r\n  loaders: [\r\n    'style',\r\n    'css?sourceMap',\r\n    'postcss',\r\n    'sass'\r\n  ]\r\n});\r\n\r\n// Don't treat global, third-party CSS as modules\r\nwebpackConfig.module.loaders.push({\r\n  test: /\\.css$/,\r\n  exclude: /app/,\r\n  loaders: [\r\n    'style',\r\n    'css?sourceMap',\r\n    'postcss'\r\n  ]\r\n});\r\n\r\nwebpackConfig.sassLoader = {\r\n  includePaths: paths.client('styles'),\r\n  outputStyle: 'expanded'\r\n};\r\n\r\nwebpackConfig.postcss = [\r\n  cssnano({\r\n    sourcemap: true,\r\n    autoprefixer: {\r\n      add: true,\r\n      remove: true,\r\n      browsers: ['last 2 versions']\r\n    },\r\n    safe: true,\r\n    discardComments: {\r\n      removeAll: true\r\n    }\r\n  })\r\n];\r\n```. ",
    "jostw": "Having the same problem too.\n\nIt works fine for me when the node-sass version was 3.0.0-pre,\nbut it failed recently as the node-sass version become 3.0.0-beta.4\n\n@stevebluck simple workaround is replacing node-sass 3.0.0-beta.4 with version 3.0.0-alpha.0 manually, it works for me now.\n\nHope to fix this issue, thx.\n. Having the same problem too.\n\nIt works fine for me when the node-sass version was 3.0.0-pre,\nbut it failed recently as the node-sass version become 3.0.0-beta.4\n\n@stevebluck simple workaround is replacing node-sass 3.0.0-beta.4 with version 3.0.0-alpha.0 manually, it works for me now.\n\nHope to fix this issue, thx.\n. ",
    "stevebluck": "Sorry but I seem to be getting the exact same problem after installing sass-loader@0.6.x.\n\nAm I supposed to do anything else to get this working?\n. Sorry but I seem to be getting the exact same problem after installing sass-loader@0.6.x.\n\nAm I supposed to do anything else to get this working?\n. ",
    "jrunestone": "+1 on this - using 0.5.0 now references an invalid version of node-sass (pre) and upgrading to 1.0.0 gives me the assertion error above :(\n. If I declare `sass-loader@1.0.0` and `node-sass@3.0.0-beta.4` as separate dependencies, and then run `npm update node-sass` i can run webpack and it builds okay MOST of the time.. But it seems the original assertion error is some form of race condition that sadly still occurs from time to time.\n. @jhnns Is this an issue with sass-loader or node-sass? I'm still getting errors with sass-loader 1.0.1 and node-sass 3.0.0-beta.4 approx 70% of the times.\n. @jhnns Hmmm I'm sorry I'm getting the exact same behavior unfortunately.. Is it enough to remove the node-sass from node_modules and reinstall? I'm getting 2.1.1 but the errors remain. I'm using node 0.12.0 btw.. Did anyone else try 0.6.0?\n. +1 on this - using 0.5.0 now references an invalid version of node-sass (pre) and upgrading to 1.0.0 gives me the assertion error above :(\n. If I declare `sass-loader@1.0.0` and `node-sass@3.0.0-beta.4` as separate dependencies, and then run `npm update node-sass` i can run webpack and it builds okay MOST of the time.. But it seems the original assertion error is some form of race condition that sadly still occurs from time to time.\n. @jhnns Is this an issue with sass-loader or node-sass? I'm still getting errors with sass-loader 1.0.1 and node-sass 3.0.0-beta.4 approx 70% of the times.\n. @jhnns Hmmm I'm sorry I'm getting the exact same behavior unfortunately.. Is it enough to remove the node-sass from node_modules and reinstall? I'm getting 2.1.1 but the errors remain. I'm using node 0.12.0 btw.. Did anyone else try 0.6.0?\n. ",
    "alexeygolev": "Same here... had to go all the way down to sass-loader@0.4.2 and node-sass@2.0.1 with all the dancing of installing node-sass under iojs-v1.2 renaming the darwin folder and then switching back to iojs-v1.4... no luck with iojs-v1.6\n. Same here... had to go all the way down to sass-loader@0.4.2 and node-sass@2.0.1 with all the dancing of installing node-sass under iojs-v1.2 renaming the darwin folder and then switching back to iojs-v1.4... no luck with iojs-v1.6\n. ",
    "nahody": "Have the same issue. Fix it like alexeygolev described using sass-loader@0.4.2. \nHope this issue will be fixed as soon as possible.\n. Have the same issue. Fix it like alexeygolev described using sass-loader@0.4.2. \nHope this issue will be fixed as soon as possible.\n. ",
    "am11": "Or perhaps get the latest of pre-release with `\"node-sass\": \"^3.0.0-\"`. See https://github.com/sindresorhus/grunt-sass/pull/200/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2 (targeting latest beta).\n\n@jhnns, let me know if there is any confusion implementing v3-beta breaking changes. :)\n. @kebot, that specific error is _mitigated_ in beta, and v3 final, but not guaranteed to vanish for good. I still see it intermittently. It also depend on the _runtime_ and version. (runtime = node.js or io.js).\n. Or perhaps get the latest of pre-release with `\"node-sass\": \"^3.0.0-\"`. See https://github.com/sindresorhus/grunt-sass/pull/200/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2 (targeting latest beta).\n\n@jhnns, let me know if there is any confusion implementing v3-beta breaking changes. :)\n. @kebot, that specific error is _mitigated_ in beta, and v3 final, but not guaranteed to vanish for good. I still see it intermittently. It also depend on the _runtime_ and version. (runtime = node.js or io.js).\n. ",
    "lo1tuma": "The stable version of node-sass 3.0.0 was released today.\n. The stable version of node-sass 3.0.0 was released today.\n. ",
    "joostfarla": "This is caused by a bug in libsass which has been solved in the latest 3.2 beta versions. Sass-loader v1.0.0 is bound to node-sass version 3.0.0-alpha, which provides the older libsass version containing this bug. See https://github.com/sass/libsass/issues/943 for details.\n\n@jtangelder, could you upgrade the node-sass dependency to the latest 3.0 beta version?\n. I've tested with the latest libsass version, but the problem remains indeed. I guess we have to keep an eye on the related issue https://github.com/twbs/bootstrap-sass/issues/879.\n\nFor now I've created a workaround by adding a custom requirement to my `package.json`, which points to an older (working) version of `node-sass`:\n\n``` yaml\n...\n\"node-sass\": \"sass/node-sass#v3.0.0-pre\",\n...\n```\n. This is caused by a bug in libsass which has been solved in the latest 3.2 beta versions. Sass-loader v1.0.0 is bound to node-sass version 3.0.0-alpha, which provides the older libsass version containing this bug. See https://github.com/sass/libsass/issues/943 for details.\n\n@jtangelder, could you upgrade the node-sass dependency to the latest 3.0 beta version?\n. I've tested with the latest libsass version, but the problem remains indeed. I guess we have to keep an eye on the related issue https://github.com/twbs/bootstrap-sass/issues/879.\n\nFor now I've created a workaround by adding a custom requirement to my `package.json`, which points to an older (working) version of `node-sass`:\n\n``` yaml\n...\n\"node-sass\": \"sass/node-sass#v3.0.0-pre\",\n...\n```\n. ",
    "jongbeau": "It's actually using the 3.0.0-beta.4 version of node-sass.\n. It's actually using the 3.0.0-beta.4 version of node-sass.\n. ",
    "Awem": "@joostfarla the issue would be: sass/libsass#943 (as also linked in https://github.com/twbs/bootstrap-sass/issues/879#issuecomment-88172909)\nedit: just saw that you already mentioned that issue a few posts above. nevermind :-)\n. @jhnns that's correct. node-sass is already a peerDepency. Nothing more can be done.\n. @joostfarla the issue would be: sass/libsass#943 (as also linked in https://github.com/twbs/bootstrap-sass/issues/879#issuecomment-88172909)\nedit: just saw that you already mentioned that issue a few posts above. nevermind :-)\n. @jhnns that's correct. node-sass is already a peerDepency. Nothing more can be done.\n. ",
    "liuliangsir": "+1. +1. ",
    "fabyeah": "Weird. In another project, I use grunt-sass without a problem, and that also uses node-sass/lib-sass...??\n. Weird. In another project, I use grunt-sass without a problem, and that also uses node-sass/lib-sass...??\n. ",
    "richard-lopes": "@fabyeah Are you using `ccswring` by any chance ? We got the same issue. Removing it from postcss solved the problem for us.\n. @fabyeah Are you using `ccswring` by any chance ? We got the same issue. Removing it from postcss solved the problem for us.\n. ",
    "kjs3": "This was my mistake. Errors were indeed getting through webpack but I wasn't passing them through my gulp watch task. \n. This was my mistake. Errors were indeed getting through webpack but I wasn't passing them through my gulp watch task. \n. ",
    "jgerigmeyer": "I'm not sure if this is a bug in webpack (UglifyJsPlugin), or sass-loader, or css-loader. But I was having the same problem, and was able to fix it by adding `&-minimize` to my `css-loader` config:\n\n``` js\n{\n    test: /\\.scss$/,\n    loader: extractTextPlugin.extract(\n        'css?sourceMap&-minimize!' +\n        'sass?sourceMap&includePaths[]=' + bourbon + '&includePaths[]=' + neat[0] + '&includePaths[]=' + neat[1]\n    )\n},\n```\n. Just tested with v2.0.0, and it seems to be fixed. Thanks!\n. I'm not sure if this is a bug in webpack (UglifyJsPlugin), or sass-loader, or css-loader. But I was having the same problem, and was able to fix it by adding `&-minimize` to my `css-loader` config:\n\n``` js\n{\n    test: /\\.scss$/,\n    loader: extractTextPlugin.extract(\n        'css?sourceMap&-minimize!' +\n        'sass?sourceMap&includePaths[]=' + bourbon + '&includePaths[]=' + neat[0] + '&includePaths[]=' + neat[1]\n    )\n},\n```\n. Just tested with v2.0.0, and it seems to be fixed. Thanks!\n. ",
    "mking": "@jgerigmeyer Thank you. Was pulling my hair out trying to figure this out.\n. @jgerigmeyer Thank you. Was pulling my hair out trying to figure this out.\n. ",
    "elsigh": "PS - this looks like it is an ExtractTextPlugin issue. https://github.com/webpack/extract-text-webpack-plugin/issues/119\n. PS - this looks like it is an ExtractTextPlugin issue. https://github.com/webpack/extract-text-webpack-plugin/issues/119\n. ",
    "istarkov": "I've gave extension above source, `notsass.scss`\n\nI've rewrite locally sass-loader source to support scss includes in sass, (and sass in scss) and all works fine (it's really easy to implement after underscore check), \nexcept in 50% run i got this issue https://github.com/webpack/webpack/issues/904#issuecomment-89773866\n(I got this issue on naked sass-loader without my changes also)\n\nThere is my comment\n\n---\n\nThis issue is not reproducible \nif i use node-sass alone `node-sass -i ./pathto.sass`, \nit looks like the trouble is in node-sass custom importer which sass-loader uses.\n\n---\n\nSo i downgrade sass-loader to 0.4.2 version\n. Yes. \nWith small addition - Can't import a .sass module from an .scss module **and .scss module from .sass**.\n. I've gave extension above source, `notsass.scss`\n\nI've rewrite locally sass-loader source to support scss includes in sass, (and sass in scss) and all works fine (it's really easy to implement after underscore check), \nexcept in 50% run i got this issue https://github.com/webpack/webpack/issues/904#issuecomment-89773866\n(I got this issue on naked sass-loader without my changes also)\n\nThere is my comment\n\n---\n\nThis issue is not reproducible \nif i use node-sass alone `node-sass -i ./pathto.sass`, \nit looks like the trouble is in node-sass custom importer which sass-loader uses.\n\n---\n\nSo i downgrade sass-loader to 0.4.2 version\n. Yes. \nWith small addition - Can't import a .sass module from an .scss module **and .scss module from .sass**.\n. ",
    "mmahalwy": "Any solution on this?\n. Yeah I think so - after updating my modules things started to work again. I am good. \n. Any updates on this? Still not working and hangs :( \n. @haustraliaer great suggestion! PostCss looks amazing! \n. @jhnns I am using 1.0.3 and when downgrading to 1.0.2 it was fixed.\n\ncode is public here: https://github.com/quran/quran.com-frontend\n. Yeah, it's because the fonts are huge :( \n\nBut it shouldn't take longer than 5mins! :) \n. @jorrit closing! \n. Any solution on this?\n. Yeah I think so - after updating my modules things started to work again. I am good. \n. Any updates on this? Still not working and hangs :( \n. @haustraliaer great suggestion! PostCss looks amazing! \n. @jhnns I am using 1.0.3 and when downgrading to 1.0.2 it was fixed.\n\ncode is public here: https://github.com/quran/quran.com-frontend\n. Yeah, it's because the fonts are huge :( \n\nBut it shouldn't take longer than 5mins! :) \n. @jorrit closing! \n. ",
    "glifchits": "I suppose its related to this? https://github.com/sass/node-sass/issues/713\n. FWIW for anyone else who runs into this, I'm running `sass-loader: ^0.4.2` and its working great as far as I can tell.\n. I suppose its related to this? https://github.com/sass/node-sass/issues/713\n. FWIW for anyone else who runs into this, I'm running `sass-loader: ^0.4.2` and its working great as far as I can tell.\n. ",
    "frankrrr": "I think both, it should generate for example: styles.sourcemap.css.map (in stead of sass.map?)\n. I think both, it should generate for example: styles.sourcemap.css.map (in stead of sass.map?)\n. ",
    "Jeloi": "+1\n. +1\n. ",
    "jjeising": "With the current `webpack` 1.8.9 and `extract-text-plugin` the following will be outputted in the `.css` file:\n\n```\n\u2026\n/*# sourceMappingURL=js/sass.map */\n/*# sourceMappingURL=app.css.map*/\n```\n\nThe later `app.css.map` exists and contains the `.scss` content, while the first isn't generated (as before). Config is\n\n```\n        loader: ExtractTextPlugin.extract('css?sourceMap!sass?sourceMap&sourceMapContents')\n```\n\nWhen deleting the first line manually everything looks fine in the browser.\n. That could be a solution, though I haven't tested other configurations. Removing [this line](jtangelder/sass-loader/blob/master/index.js#L123) does not work, as the map from `libsass` is needed. Maybe there should be an option for `libsass` to generate a source map without adding a reference?\n. Adding\n\n``` javascript\n  if (opt.sourceMap) {\n    \u2026\n    opt.sourceMap = this.options.output.path + '/sass.map';\n+   opt.omitSourceMapUrl = true;\n  }\n```\n\nworks fine for me.\n. Will this be added to the official distribution at some point?\n. Thanks!\n. With the current `webpack` 1.8.9 and `extract-text-plugin` the following will be outputted in the `.css` file:\n\n```\n\u2026\n/*# sourceMappingURL=js/sass.map */\n/*# sourceMappingURL=app.css.map*/\n```\n\nThe later `app.css.map` exists and contains the `.scss` content, while the first isn't generated (as before). Config is\n\n```\n        loader: ExtractTextPlugin.extract('css?sourceMap!sass?sourceMap&sourceMapContents')\n```\n\nWhen deleting the first line manually everything looks fine in the browser.\n. That could be a solution, though I haven't tested other configurations. Removing [this line](jtangelder/sass-loader/blob/master/index.js#L123) does not work, as the map from `libsass` is needed. Maybe there should be an option for `libsass` to generate a source map without adding a reference?\n. Adding\n\n``` javascript\n  if (opt.sourceMap) {\n    \u2026\n    opt.sourceMap = this.options.output.path + '/sass.map';\n+   opt.omitSourceMapUrl = true;\n  }\n```\n\nworks fine for me.\n. Will this be added to the official distribution at some point?\n. Thanks!\n. ",
    "paddycarver": "Forgive me if I'm an idiot, but [isn't there already an option for that?](https://github.com/sass/node-sass/blob/b50533ae6862097d17711f15f99cad711808790c/README.md#omitsourcemapurl)\n. Forgive me if I'm an idiot, but [isn't there already an option for that?](https://github.com/sass/node-sass/blob/b50533ae6862097d17711f15f99cad711808790c/README.md#omitsourcemapurl)\n. ",
    "iamstarkov": "Thanks, got it\n. Thanks\n. Thanks, got it\n. Thanks\n. ",
    "jdlehman": "This is because there is work being done on another [branch](https://github.com/jtangelder/sass-loader/tree/release/v0.6.0) using node-sass `2.1.1` since `^3.0.0` is not stable.\n\nSee the discussion [here](https://github.com/jtangelder/sass-loader/issues/71#issuecomment-89267609)\n. This is because there is work being done on another [branch](https://github.com/jtangelder/sass-loader/tree/release/v0.6.0) using node-sass `2.1.1` since `^3.0.0` is not stable.\n\nSee the discussion [here](https://github.com/jtangelder/sass-loader/issues/71#issuecomment-89267609)\n. ",
    "rixrix": "Hi\n\nSince you have file loader defined in Webpack config, then might as well change the following line from\n\n`background-image: url(!file!../../assets/icon-forward.svg);`\n\nto\n\n`background-image: url(../../assets/icon-forward.svg);`\n\ncheers\n. @henriquea happy to help, you're welcome!\n. Hi\n\nSince you have file loader defined in Webpack config, then might as well change the following line from\n\n`background-image: url(!file!../../assets/icon-forward.svg);`\n\nto\n\n`background-image: url(../../assets/icon-forward.svg);`\n\ncheers\n. @henriquea happy to help, you're welcome!\n. ",
    "henriquea": "@rixrix duh! I haven't tried it and of course it does work. I'm closing this now, thanks!\n. @rixrix duh! I haven't tried it and of course it does work. I'm closing this now, thanks!\n. ",
    "jackp": "Closing, this is no longer happening after I upgraded to `v1.0.1`. Still a minor issue on `v0.6.0`\n. Closing, this is no longer happening after I upgraded to `v1.0.1`. Still a minor issue on `v0.6.0`\n. ",
    "KhoaSydney": "Hi jhnns,\n\nI fixed it by having two separate loaders: `url` and `file`.\n\nThe following is the settings for them:\n\n``` javascript\n           {\n                test: /\\.(otf|eot|png|svg|ttf|woff|woff2)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n                loader: 'url?limit=8192'\n            },    \n            // File loader\n              { test: /\\.jpe?g$|\\.gif$|\\.png$|\\.svg$|\\.woff$|\\.ttf$|\\.eot$/, loader: \"file\" }\n```\n\nThe only different is `(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,` at the end of url loader. Thanks for you times.\n\ncheers,\nKhoa\n. Hi jhnns,\n\nI fixed it by having two separate loaders: `url` and `file`.\n\nThe following is the settings for them:\n\n``` javascript\n           {\n                test: /\\.(otf|eot|png|svg|ttf|woff|woff2)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n                loader: 'url?limit=8192'\n            },    \n            // File loader\n              { test: /\\.jpe?g$|\\.gif$|\\.png$|\\.svg$|\\.woff$|\\.ttf$|\\.eot$/, loader: \"file\" }\n```\n\nThe only different is `(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,` at the end of url loader. Thanks for you times.\n\ncheers,\nKhoa\n. ",
    "alansouzati": "This is how I'm using the sass-loader inside webpack:\n\n``` javascript\nvar path = require('path');\n...\n{\n  test: /\\.scss$/,\n  loader: 'style!css!sass?outputStyle=expanded&'+\n        \"includePaths[]=\" +\n        (path.resolve(process.cwd(), \"node_modules\"))\n}\n```\n. I will try it again later today and get back to you guys.\n. Hi guys, doing URI encoding solves the problem. Thanks @jorrit for the tip!\n\nDo you think the encoding part could be inside `sass-loader`? If yes, I can send a PR!\n\nHere is my updated webpack config:\n\n```\nvar path = require('path');\n...\n{\n  test: /\\.scss$/,\n  loader: 'style!css!sass?outputStyle=expanded&'+\n        \"includePaths[]=\" +\n        (encodeURIComponent(path.resolve(process.cwd(), \"node_modules\")))\n}\n```\n. This is how I'm using the sass-loader inside webpack:\n\n``` javascript\nvar path = require('path');\n...\n{\n  test: /\\.scss$/,\n  loader: 'style!css!sass?outputStyle=expanded&'+\n        \"includePaths[]=\" +\n        (path.resolve(process.cwd(), \"node_modules\"))\n}\n```\n. I will try it again later today and get back to you guys.\n. Hi guys, doing URI encoding solves the problem. Thanks @jorrit for the tip!\n\nDo you think the encoding part could be inside `sass-loader`? If yes, I can send a PR!\n\nHere is my updated webpack config:\n\n```\nvar path = require('path');\n...\n{\n  test: /\\.scss$/,\n  loader: 'style!css!sass?outputStyle=expanded&'+\n        \"includePaths[]=\" +\n        (encodeURIComponent(path.resolve(process.cwd(), \"node_modules\")))\n}\n```\n. ",
    "jsg2021": "Something is strange with '..' paths.  I have a `_fonts.scss` as a sibling to my `app.scss` file, which imports that file.  In my fonts file, I import several fonts in a parent-sibling path.\n\n``` scss\n@import \"../fonts/droid-serif/index.css\";\n@import \"../fonts/open-sans/index.css\";\n...\n```\n\nonce i work around #98 , i get:\n\n``` bash\nERROR in ./~/css-loader!./~/sass-loader?includePaths[]=/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/vendor/foundation/scss!./src/main/resources/scss/app.scss\nModule build failed: \n@import \"../fonts/droid-serif/index.css\";\n       ^\n      File to import not found or unreadable: ../fonts/droid-serif/_index.css.scss/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss/\n      in /Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss/_fonts.scss (line 1, column 9)\nError: \n@import \"../fonts/droid-serif/index.css\";\n       ^\n      File to import not found or unreadable: ../fonts/droid-serif/_index.css.scss/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss/\n      in /Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss/_fonts.scss (line 1, column 9)\n    at options.error (/Users/jgrimes/Workspace/nti.web.mobile/node_modules/node-sass/lib/index.js:276:32)\n @ ./src/main/resources/scss/app.scss 4:14-229\n```\n\n(this works just fine in 0.4.x)\n. The things in the vendor directory are not things I expect WebPack to resolve? So for my case, I would expect I would need to set the includePaths.\n\nI've pared it down to the essentials:\n\n``` js\n'use strict';\n\nvar webpack = require('webpack');\nvar path = require('path');\n\nvar scssIncludes =\n    'includePaths[]=' + path.resolve(__dirname, './src/main/resources/vendor/foundation/scss');\n\nvar root = path.resolve(__dirname, './src/main/js');\n\n\nvar commonLoaders = [\n    { test: /\\.json$/, loader: 'json' },\n    { test: /\\.js(x?)$/,\n        loader: 'babel?optional=runtime'\n    },\n\n    { test: /\\.(ico|gif|png|jpg|svg)$/, loader: 'url?limit=100000&name=resources/images/[name].[ext]&mimeType=image/[ext]' },\n\n    {\n        test: /\\.(eot|ttf|woff)$/,\n        loader: 'file',\n        query: {\n            name: 'resources/fonts/[name].[ext]'\n        }\n    }\n\n];\n\n\n\nmodule.exports =\n    {\n        name: 'browser',\n        output: {\n            path: './stage/client/',\n            filename: 'js/[hash].js',\n            chunkFilename: 'js/[hash]-[id].js',\n            publicPath: '/'\n        },\n\n        cache: true,\n        debug: true,\n        devtool: 'source-map',\n\n        entry: './src/main/js/index.js',\n\n        target: 'web',\n\n        resolve: {\n            root: root,\n            extensions: ['', '.jsx', '.js', '.json', '.css', '.scss', '.html']\n        },\n\n        module: {\n            loaders: commonLoaders.concat([\n                { test: /\\.css$/, loader: 'style!css' },\n                { test: /\\.scss$/, loader: 'style!css!sass?' + scssIncludes }\n            ])\n        }\n    };\n\n```\n. I would prefer to write the scss (and really, all my code) webpack-agnostically. Any updates?\n. @jhnns Is #113 viable?\n. From what i can gather, it's really a cyclical import issue. I don't think there's anything to do for sass-loader other than to detect/report the problem for the user to fix.. @jhnns I think this issue needs reopening.\n\nin the example in #91 about my fonts.scss file... the compiled output does not include the contents of the `.css` files instead has a file-system absolute path in an `@import url(...);` statement. \n\nSee: (newlines added for readability) \n\n``` css\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/droid-serif/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/foundation-icons/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/open-sans/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/open-sans-condensed/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/stix/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/symbola/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/icomoon/style.css); \n...\n```\n\nThose file paths are correct (from the file system's perspective)... I would expect the contents of the css file to be inlined. ~~(as sass-loader did in 0.4.x)~~\n\n**Update:** I do not believe sass-loader inlined them before, I believe the loader offered the css files back to webpack to deal with them.\n. I think I understand some of this [more](https://github.com/sass/libsass/pull/754)... \n\nSass will compile `@import \"plain.css\"` into `@import url(plain.css);` and not inline it.\n\nWebPack may not be given the opportunity to re-resolve the css file and pack it in.\n. @jhnns @jorrit any thoughts?\n. So, CSS files are being imported. yay!\n\nHowever, the references in them to fonts and images are not respecting the CSS path. (relative urls in plain css are relative to the css file's path)\n. Disregard. :) leaving the `.css` extension on the import statement makes it work as expected! :)\n. @jorrit If my understanding is correct, not including an extension the loader looks for .sass, .scss and .css...but treats them as if they were sass.  With an extension, it seem to be passing it to webpack (as it should be)\n\nPerhaps, the css **_without**_ extension should log a warning letting the author know that this style of import is quirky. (And probably not what they intended)\n. @jhnns I think thats perfect.\n. Yep, this is what I was talking about in #101 \n\nJust a reminder, the css file cannot be just treated as scss... the url refs in the css file should be relative to that css file.\n. after looking into how sass does things, i actually am starting to think the behavior just needs to make sure the compiled sass has what the css/style loader needs to consume those references.  \n\nIn webpack, is it the loader's responsibility to offer new imports to webpack to consume? or should the piped output from the sass loader into css-loader be sufficient?\n. It looks like the CSS content is being interpreted as SCSS and using the same 'pwd' (for lack of a better term)  \n\nso a fonts css file with the content below looks at the main SCSS's path instead of the imported CSS's path and icomoon.woff/svg files get the lovely `Cannot resolve 'file' or 'directory' ./icomoon.woff in /Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss` ...when the file is actually not under that `scss` directory and is under `../fonts/icomoon/` which is where the css file is.\n\n```\n@font-face {\n    font-family: 'icomoon';\n    src: url(icomoon.woff) format('woff'),\n        url(icomoon.svg) format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n```\n. Oh, wait... leaving the .css extension on the import, webpack is now correctly handling them.  Sweet. :) looks good!\n. If you plan on doing StyleSheet-Per-Component (like @JoeStanton s example) Each sass file will compile to a self-contained entity. If you put anything that outputs in your common \"variables.scss\" it will duplicate.  variables, functions, mixins and placeholder selectors don't output.  However, placeholder selectors will not merge all extensions across components. \n\nWebpack isn't responsible for this... nor its loaders. Sass (in its current form) cannot handle this.  The only way to make this work without duplication is to add a pre-step that synthesises a fake \"main.scss\" that imports all the components as partials... which also has its issues.\n\nI'm using the sass-per-component model and love it. I use the baggage loader to auto-import sass with my component files. (and the extract text plugin to merge into one css file) I've basically come to accept the limitation, but take comfort in knowing that each component is self-sustaining and can just be stamped... so duplicated styles become less and less of an issue because I should be defining local-to-component styles.\n\nI like @jhnns recommendation. Sass isn't the end-all-be-all tool. Less may be better suited for your task.\n. @wzup I don't understand what you are asking? In the approach I mentioned, you would simply define your `@media <query> {}` blocks in your component's style file... and/or in the containing component's style file.\n. scss imports are processed by libsass, by design.  importing css from an alternate language does pop you out to webpack. you can also use module import syntax... I forget what that is, but it makes sass-loader look for the sass file in a node_module.  \n\nBasically, sass compiles to CSS.\nCSS references external sources... the css/style loader runs those through webpack loaders.\n. if you have placeholder selectors or @extend anything from a global dep, would it work as expected? (where the selector list that is extended gets appended and the body not duplicated?\n\nex: \n\nin _variables.scss:\n\n```\n%icon-foo { background-image: url(...) }\n```\n\nin some component:\n\n```\n.button.foo {\n  @extend %icon-foo;\n  ...\n}\n```\n\nand in some other component file:\n\n```\n.label.foo {\n  @extend %icon-foo;\n  ...\n}\n```\n\nI would expect the output css would only have one instance of the background-image rule...where `%icon-foo` becomes: `.button.foo,.label.foo`\n. I like the direction. :) I've been wanting to split my scss up like this for a while. I don't have write access to this project.  I'd be curious what @jtangelder thought of this.\n. I wonder if we can use the [baggage-loader](https://github.com/deepsweet/baggage-loader) to accomplish this... \n. If you override webpack's resolve directories, don't forget to add node_modules back.\n. ```\n...\nresolve: {\n            root: [root, modules],\n            extensions: ['', '.jsx', '.js', '.json', '.css', '.scss', '.html']\n},\n...\n```\n\nI had to make node_modules a root.\n. Though from the looks of your snippet, you really aren't using \"root\", try not setting it first\n. @limscoder you could have made a loader that was meant to pipe output from your loader to the sass-loader... leaving it to do the sass work, and your loader to replace/inject imports. (See baggage-loader)\n. Something is strange with '..' paths.  I have a `_fonts.scss` as a sibling to my `app.scss` file, which imports that file.  In my fonts file, I import several fonts in a parent-sibling path.\n\n``` scss\n@import \"../fonts/droid-serif/index.css\";\n@import \"../fonts/open-sans/index.css\";\n...\n```\n\nonce i work around #98 , i get:\n\n``` bash\nERROR in ./~/css-loader!./~/sass-loader?includePaths[]=/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/vendor/foundation/scss!./src/main/resources/scss/app.scss\nModule build failed: \n@import \"../fonts/droid-serif/index.css\";\n       ^\n      File to import not found or unreadable: ../fonts/droid-serif/_index.css.scss/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss/\n      in /Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss/_fonts.scss (line 1, column 9)\nError: \n@import \"../fonts/droid-serif/index.css\";\n       ^\n      File to import not found or unreadable: ../fonts/droid-serif/_index.css.scss/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss/\n      in /Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss/_fonts.scss (line 1, column 9)\n    at options.error (/Users/jgrimes/Workspace/nti.web.mobile/node_modules/node-sass/lib/index.js:276:32)\n @ ./src/main/resources/scss/app.scss 4:14-229\n```\n\n(this works just fine in 0.4.x)\n. The things in the vendor directory are not things I expect WebPack to resolve? So for my case, I would expect I would need to set the includePaths.\n\nI've pared it down to the essentials:\n\n``` js\n'use strict';\n\nvar webpack = require('webpack');\nvar path = require('path');\n\nvar scssIncludes =\n    'includePaths[]=' + path.resolve(__dirname, './src/main/resources/vendor/foundation/scss');\n\nvar root = path.resolve(__dirname, './src/main/js');\n\n\nvar commonLoaders = [\n    { test: /\\.json$/, loader: 'json' },\n    { test: /\\.js(x?)$/,\n        loader: 'babel?optional=runtime'\n    },\n\n    { test: /\\.(ico|gif|png|jpg|svg)$/, loader: 'url?limit=100000&name=resources/images/[name].[ext]&mimeType=image/[ext]' },\n\n    {\n        test: /\\.(eot|ttf|woff)$/,\n        loader: 'file',\n        query: {\n            name: 'resources/fonts/[name].[ext]'\n        }\n    }\n\n];\n\n\n\nmodule.exports =\n    {\n        name: 'browser',\n        output: {\n            path: './stage/client/',\n            filename: 'js/[hash].js',\n            chunkFilename: 'js/[hash]-[id].js',\n            publicPath: '/'\n        },\n\n        cache: true,\n        debug: true,\n        devtool: 'source-map',\n\n        entry: './src/main/js/index.js',\n\n        target: 'web',\n\n        resolve: {\n            root: root,\n            extensions: ['', '.jsx', '.js', '.json', '.css', '.scss', '.html']\n        },\n\n        module: {\n            loaders: commonLoaders.concat([\n                { test: /\\.css$/, loader: 'style!css' },\n                { test: /\\.scss$/, loader: 'style!css!sass?' + scssIncludes }\n            ])\n        }\n    };\n\n```\n. I would prefer to write the scss (and really, all my code) webpack-agnostically. Any updates?\n. @jhnns Is #113 viable?\n. From what i can gather, it's really a cyclical import issue. I don't think there's anything to do for sass-loader other than to detect/report the problem for the user to fix.. @jhnns I think this issue needs reopening.\n\nin the example in #91 about my fonts.scss file... the compiled output does not include the contents of the `.css` files instead has a file-system absolute path in an `@import url(...);` statement. \n\nSee: (newlines added for readability) \n\n``` css\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/droid-serif/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/foundation-icons/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/open-sans/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/open-sans-condensed/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/stix/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/symbola/index.css);\n@import url(/Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/fonts/icomoon/style.css); \n...\n```\n\nThose file paths are correct (from the file system's perspective)... I would expect the contents of the css file to be inlined. ~~(as sass-loader did in 0.4.x)~~\n\n**Update:** I do not believe sass-loader inlined them before, I believe the loader offered the css files back to webpack to deal with them.\n. I think I understand some of this [more](https://github.com/sass/libsass/pull/754)... \n\nSass will compile `@import \"plain.css\"` into `@import url(plain.css);` and not inline it.\n\nWebPack may not be given the opportunity to re-resolve the css file and pack it in.\n. @jhnns @jorrit any thoughts?\n. So, CSS files are being imported. yay!\n\nHowever, the references in them to fonts and images are not respecting the CSS path. (relative urls in plain css are relative to the css file's path)\n. Disregard. :) leaving the `.css` extension on the import statement makes it work as expected! :)\n. @jorrit If my understanding is correct, not including an extension the loader looks for .sass, .scss and .css...but treats them as if they were sass.  With an extension, it seem to be passing it to webpack (as it should be)\n\nPerhaps, the css **_without**_ extension should log a warning letting the author know that this style of import is quirky. (And probably not what they intended)\n. @jhnns I think thats perfect.\n. Yep, this is what I was talking about in #101 \n\nJust a reminder, the css file cannot be just treated as scss... the url refs in the css file should be relative to that css file.\n. after looking into how sass does things, i actually am starting to think the behavior just needs to make sure the compiled sass has what the css/style loader needs to consume those references.  \n\nIn webpack, is it the loader's responsibility to offer new imports to webpack to consume? or should the piped output from the sass loader into css-loader be sufficient?\n. It looks like the CSS content is being interpreted as SCSS and using the same 'pwd' (for lack of a better term)  \n\nso a fonts css file with the content below looks at the main SCSS's path instead of the imported CSS's path and icomoon.woff/svg files get the lovely `Cannot resolve 'file' or 'directory' ./icomoon.woff in /Users/jgrimes/Workspace/nti.web.mobile/src/main/resources/scss` ...when the file is actually not under that `scss` directory and is under `../fonts/icomoon/` which is where the css file is.\n\n```\n@font-face {\n    font-family: 'icomoon';\n    src: url(icomoon.woff) format('woff'),\n        url(icomoon.svg) format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n```\n. Oh, wait... leaving the .css extension on the import, webpack is now correctly handling them.  Sweet. :) looks good!\n. If you plan on doing StyleSheet-Per-Component (like @JoeStanton s example) Each sass file will compile to a self-contained entity. If you put anything that outputs in your common \"variables.scss\" it will duplicate.  variables, functions, mixins and placeholder selectors don't output.  However, placeholder selectors will not merge all extensions across components. \n\nWebpack isn't responsible for this... nor its loaders. Sass (in its current form) cannot handle this.  The only way to make this work without duplication is to add a pre-step that synthesises a fake \"main.scss\" that imports all the components as partials... which also has its issues.\n\nI'm using the sass-per-component model and love it. I use the baggage loader to auto-import sass with my component files. (and the extract text plugin to merge into one css file) I've basically come to accept the limitation, but take comfort in knowing that each component is self-sustaining and can just be stamped... so duplicated styles become less and less of an issue because I should be defining local-to-component styles.\n\nI like @jhnns recommendation. Sass isn't the end-all-be-all tool. Less may be better suited for your task.\n. @wzup I don't understand what you are asking? In the approach I mentioned, you would simply define your `@media <query> {}` blocks in your component's style file... and/or in the containing component's style file.\n. scss imports are processed by libsass, by design.  importing css from an alternate language does pop you out to webpack. you can also use module import syntax... I forget what that is, but it makes sass-loader look for the sass file in a node_module.  \n\nBasically, sass compiles to CSS.\nCSS references external sources... the css/style loader runs those through webpack loaders.\n. if you have placeholder selectors or @extend anything from a global dep, would it work as expected? (where the selector list that is extended gets appended and the body not duplicated?\n\nex: \n\nin _variables.scss:\n\n```\n%icon-foo { background-image: url(...) }\n```\n\nin some component:\n\n```\n.button.foo {\n  @extend %icon-foo;\n  ...\n}\n```\n\nand in some other component file:\n\n```\n.label.foo {\n  @extend %icon-foo;\n  ...\n}\n```\n\nI would expect the output css would only have one instance of the background-image rule...where `%icon-foo` becomes: `.button.foo,.label.foo`\n. I like the direction. :) I've been wanting to split my scss up like this for a while. I don't have write access to this project.  I'd be curious what @jtangelder thought of this.\n. I wonder if we can use the [baggage-loader](https://github.com/deepsweet/baggage-loader) to accomplish this... \n. If you override webpack's resolve directories, don't forget to add node_modules back.\n. ```\n...\nresolve: {\n            root: [root, modules],\n            extensions: ['', '.jsx', '.js', '.json', '.css', '.scss', '.html']\n},\n...\n```\n\nI had to make node_modules a root.\n. Though from the looks of your snippet, you really aren't using \"root\", try not setting it first\n. @limscoder you could have made a loader that was meant to pipe output from your loader to the sass-loader... leaving it to do the sass work, and your loader to replace/inject imports. (See baggage-loader)\n. ",
    "skovhus": "It works in `1.0.0`, but not in `1.0.1` and `1.0.2`.\n. It works in `1.0.0`, but not in `1.0.1` and `1.0.2`.\n. ",
    "at0g": "Thanks for the quick response.\nIt seems odd that the sourcemaps from less-loader do work as expected if\nthe issue lies with webpack-dev-server\n. Thanks @bestic - good workaround\n. Thanks for the quick response.\nIt seems odd that the sourcemaps from less-loader do work as expected if\nthe issue lies with webpack-dev-server\n. Thanks @bestic - good workaround\n. ",
    "sairion": "I am expriencing same issue, but `.js` sourceMaps are served fine.\n. I am expriencing same issue, but `.js` sourceMaps are served fine.\n. ",
    "atgillette": "I'm experiencing a similar problem without using webpack-dev-server.\n. I'm experiencing a similar problem without using webpack-dev-server.\n. ",
    "bestic": "I was able to turn on source map for sass by using \"sourceMapContents\" param:\n\n``` javascript\n{\n     test: /\\.scss$/,\n     loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!sass-loader?outputStyle=expanded&sourceMap=true&sourceMapContents=true')\n}\n```\n. I was able to turn on source map for sass by using \"sourceMapContents\" param:\n\n``` javascript\n{\n     test: /\\.scss$/,\n     loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!sass-loader?outputStyle=expanded&sourceMap=true&sourceMapContents=true')\n}\n```\n. ",
    "boopathi": "@bestic . Amazing ! Didn't know this option existed only. Damn.\n. @bestic . Amazing ! Didn't know this option existed only. Damn.\n. ",
    "oliverturner": "@bgannonPL I have the same issue. Am currently using @oliverturner/sass-loader as a quick fix while I get a PR together\n. @jhnns Much appreciated\n. @bgannonPL I have the same issue. Am currently using @oliverturner/sass-loader as a quick fix while I get a PR together\n. @jhnns Much appreciated\n. ",
    "bgannonPL": "@jhnns Great, thanks\n. @jhnns Great, thanks\n. ",
    "linkdesu": "Oh ! My apologize ...\n. Oh ! My apologize ...\n. ",
    "sogko": "I'm facing the same issue, watching this thread.\n. Hi guys,\n@oopschen faced this same issue #110 and has provided a PR #113 \n\nThe code seems sound but I don't have enough knowledge of the inner workings of the loader to say for sure that it would not have side effects.\n. Hi, I believe this is a duplicate of #98 \n\nSeems like a bug (but with an ugly workaround)\n. hi @oopschen, \n\nthat sounds plausible as a fix; you can try to post the suggested solution at #98 to gain more attention or simply create a pull request.\n. I'm facing the same issue, watching this thread.\n. Hi guys,\n@oopschen faced this same issue #110 and has provided a PR #113 \n\nThe code seems sound but I don't have enough knowledge of the inner workings of the loader to say for sure that it would not have side effects.\n. Hi, I believe this is a duplicate of #98 \n\nSeems like a bug (but with an ugly workaround)\n. hi @oopschen, \n\nthat sounds plausible as a fix; you can try to post the suggested solution at #98 to gain more attention or simply create a pull request.\n. ",
    "rbhalla": "I'm embarrassed to admit I spent the majority of my day making no progress with this bug. I couldn't replicate it with a simpler setup so I'm assuming it's an edge case bug to do with my dependency graph.\n\nRegardless, downgrading to `0.4.3` with node-sass `2.1.1` fixed it. If someone does figure out the mysterious cause of this bug please do let me know.\n. @jhnns Yes that's the exact behaviour I was experiencing.\n\n@eugene1g I haven't had a chance to confirm your findings but it does sound along the correct lines. Thanks for your writeup, I will test it out as soon as I can.\n. I'm embarrassed to admit I spent the majority of my day making no progress with this bug. I couldn't replicate it with a simpler setup so I'm assuming it's an edge case bug to do with my dependency graph.\n\nRegardless, downgrading to `0.4.3` with node-sass `2.1.1` fixed it. If someone does figure out the mysterious cause of this bug please do let me know.\n. @jhnns Yes that's the exact behaviour I was experiencing.\n\n@eugene1g I haven't had a chance to confirm your findings but it does sound along the correct lines. Thanks for your writeup, I will test it out as soon as I can.\n. ",
    "eugene1g": "@rbhalla I encountered a similar issue in a complicated project, and also could not replicate it with a simple example I could post here for debugging. Eventually I narrowed it down to an issue in node-sass that hangs the process if it has to compile more than 5 files simultaneously (see https://github.com/sass/node-sass/issues/857). In a multi-threaded model, including the same dependency in a complex graph triggered that problem for me.\n\nThe solution that worked for me was to temporarily override the limit in Node during the execution of webpack+sass loader. In my OSX pipeline it looks like this:\n\n```\n$ env UV_THREADPOOL_SIZE=55 webpack-dev-server --config webpack-devserver.config.js --colors --port 9020 --hot\n```\n\nTo make the process easier, I created a Makefile like so:\n\n```\nfront-server:\n    env UV_THREADPOOL_SIZE=55 webpack-dev-server --config webpack-devserver.config.js --colors --port 9020 --hot\n\nfront-build:\n    env UV_THREADPOOL_SIZE=55 webpack --config webpack-production.config.js\n```\n\nThen I can just run \"$ make front-server\" and it will launch the dev server, or \"$ make front-build\" to compile for production.\n\nIn your case it looks like you are using your own middleware (instead of webpack-dev-server), so perhaps \"$ env UV_THREADPOOL_SIZE=55 node myassetcomipler.js\" will work for you.\n\nedit: This worked with node-sass v3.\\* and sass-loader v1.*\n. @rbhalla I encountered a similar issue in a complicated project, and also could not replicate it with a simple example I could post here for debugging. Eventually I narrowed it down to an issue in node-sass that hangs the process if it has to compile more than 5 files simultaneously (see https://github.com/sass/node-sass/issues/857). In a multi-threaded model, including the same dependency in a complex graph triggered that problem for me.\n\nThe solution that worked for me was to temporarily override the limit in Node during the execution of webpack+sass loader. In my OSX pipeline it looks like this:\n\n```\n$ env UV_THREADPOOL_SIZE=55 webpack-dev-server --config webpack-devserver.config.js --colors --port 9020 --hot\n```\n\nTo make the process easier, I created a Makefile like so:\n\n```\nfront-server:\n    env UV_THREADPOOL_SIZE=55 webpack-dev-server --config webpack-devserver.config.js --colors --port 9020 --hot\n\nfront-build:\n    env UV_THREADPOOL_SIZE=55 webpack --config webpack-production.config.js\n```\n\nThen I can just run \"$ make front-server\" and it will launch the dev server, or \"$ make front-build\" to compile for production.\n\nIn your case it looks like you are using your own middleware (instead of webpack-dev-server), so perhaps \"$ env UV_THREADPOOL_SIZE=55 node myassetcomipler.js\" will work for you.\n\nedit: This worked with node-sass v3.\\* and sass-loader v1.*\n. ",
    "newtonianb": "Same problem, how exactly do you set UV_THREADPOOL_SIZE?\nI'm running gulp which runs webpack so where do I put this?\n. Just hit the exact same scernario/problem! Windows 8.1 definitely a bug\n@jhnns @gabrielenosso \n. This is a huge problem, it seems also when ran through webpack-dev-server it can't even do past one level imports, the changes in imports don't trigger a webpack-dev-server change, I'm assuming it's related. Could someone please find a way to fix this, right now it's just unusable \n. Hi, not that I know of no\n. Thank you @strayiker ! I do recall other gulp scripts having issues on windows due to paths. Where exactly do you put this function and make use of it?\n. Thanks alot! Just curiosity when is the next major version planned for?\n. Ok now I'm completely stuck\n\nI tried to switch all my imports to require them directly with webpack but now I'm hitting the second bug\nhttps://github.com/jtangelder/sass-loader/issues/100\n\nSo I can't use imports as they don't trigger webpack hot loader and I can't use require or node-sass craps out.\n\nHow are people dealing with this right now??\n. From my entry point I require my main styles.scss\nIf I my make changes to scss the dev server detects these and recompile but if make changes to any of these imports it does not.\n\nIt isn't exactly the same issue as the other one as here even the first level import doesn't work. \n. Thanks alot!\n. @jhnns just ran a quick test up to 3 level import, all looks good (win 8.1, npm 2.10.1) ! thanks alot\n. Actually there is something a bit dodgy although I can't confirm whether it's a new issue or from before \n\n```\nimages/\n--- my_file.png\n\nstyles/\n--- my_style.scss\n--- folder_a/\n------ _my_other_style.scss\n```\n\n**styles/my_style.scss**\n\n```\n@import 'folder_a/my_other_style'\n```\n\n**styles/folder_a/_my_other_style**\n\n```\n// this works\nbackground-image: url('../images/my_file.png');\n// this doesn't work\nbackground-image: url('../../images/my_file.png');\n// this doesn't work\nbackground-image: url('./../../images/my_file.png');\n```\n\nIt seems my path is relative to the place it's being imported from? Is that normal? \n\nI was expecting this to work `background-image: url('../../images/my_file.png');`\n. Same problem, how exactly do you set UV_THREADPOOL_SIZE?\nI'm running gulp which runs webpack so where do I put this?\n. Just hit the exact same scernario/problem! Windows 8.1 definitely a bug\n@jhnns @gabrielenosso \n. This is a huge problem, it seems also when ran through webpack-dev-server it can't even do past one level imports, the changes in imports don't trigger a webpack-dev-server change, I'm assuming it's related. Could someone please find a way to fix this, right now it's just unusable \n. Hi, not that I know of no\n. Thank you @strayiker ! I do recall other gulp scripts having issues on windows due to paths. Where exactly do you put this function and make use of it?\n. Thanks alot! Just curiosity when is the next major version planned for?\n. Ok now I'm completely stuck\n\nI tried to switch all my imports to require them directly with webpack but now I'm hitting the second bug\nhttps://github.com/jtangelder/sass-loader/issues/100\n\nSo I can't use imports as they don't trigger webpack hot loader and I can't use require or node-sass craps out.\n\nHow are people dealing with this right now??\n. From my entry point I require my main styles.scss\nIf I my make changes to scss the dev server detects these and recompile but if make changes to any of these imports it does not.\n\nIt isn't exactly the same issue as the other one as here even the first level import doesn't work. \n. Thanks alot!\n. @jhnns just ran a quick test up to 3 level import, all looks good (win 8.1, npm 2.10.1) ! thanks alot\n. Actually there is something a bit dodgy although I can't confirm whether it's a new issue or from before \n\n```\nimages/\n--- my_file.png\n\nstyles/\n--- my_style.scss\n--- folder_a/\n------ _my_other_style.scss\n```\n\n**styles/my_style.scss**\n\n```\n@import 'folder_a/my_other_style'\n```\n\n**styles/folder_a/_my_other_style**\n\n```\n// this works\nbackground-image: url('../images/my_file.png');\n// this doesn't work\nbackground-image: url('../../images/my_file.png');\n// this doesn't work\nbackground-image: url('./../../images/my_file.png');\n```\n\nIt seems my path is relative to the place it's being imported from? Is that normal? \n\nI was expecting this to work `background-image: url('../../images/my_file.png');`\n. ",
    "javivelasco": "Oh God! Been dealing with this the whole **\\* day until I've found out it's sass thing and came here. Thank u guys, `UV_THREADPOOL_SIZE=100` working nicely!\n. Oh God! Been dealing with this the whole **\\* day until I've found out it's sass thing and came here. Thank u guys, `UV_THREADPOOL_SIZE=100` working nicely!\n. ",
    "maman": "got this issue too.\n\nthe directory structure is something like this. \n\n```\n\u251c\u2500\u2500 moduleA\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleA.controller.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleA.style.scss\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleA.template.html\n\u251c\u2500\u2500 moduleB\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleB.controller.js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 moduleB.style.scss\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleB.template.html\n\u251c\u2500\u2500 moduleC\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleC.controller.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleC.style.scss\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 moduleC.template.html\n\u251c\u2500\u2500 styles\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 _settings.scss\n\u2502   \u2514\u2500\u2500 main.scss\n\u2514\u2500\u2500 app.js\n```\n1. the module-specific styles will be `require`\u2019d in the `controller`. \n2. all module-specific styles has `@import` syntax to `_settings.scss` file.\n3. the main.scss is the \u2018global\u2019 stylesheet which `require`\u2019d in the `app.js` file, and has `@import` syntax to `_settings.scss` file.\n\nalso I used `foundation-apps` library heavily, so `main.scss` file has `@import` to the `foundation-apps/foundation`, and the module-specific styles has `@import` to some foundation functions that I use for the module, such as `foundation-apps/components/grid`.\n\nthe build succeeds when I first remove the `require` on the `controller`, and add it again after the first build has succeed (I use webpack-dev-server with --hot).\n. @jhnns sorry I can't, still in the middle of a project :persevere:\ncurrently I'm using the `env UX_THREADPOOL_SIZE=100`, and it definitely helps. thanks @saper !\n. got this issue too.\n\nthe directory structure is something like this. \n\n```\n\u251c\u2500\u2500 moduleA\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleA.controller.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleA.style.scss\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleA.template.html\n\u251c\u2500\u2500 moduleB\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleB.controller.js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 moduleB.style.scss\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleB.template.html\n\u251c\u2500\u2500 moduleC\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleC.controller.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 moduleC.style.scss\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 moduleC.template.html\n\u251c\u2500\u2500 styles\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 _settings.scss\n\u2502   \u2514\u2500\u2500 main.scss\n\u2514\u2500\u2500 app.js\n```\n1. the module-specific styles will be `require`\u2019d in the `controller`. \n2. all module-specific styles has `@import` syntax to `_settings.scss` file.\n3. the main.scss is the \u2018global\u2019 stylesheet which `require`\u2019d in the `app.js` file, and has `@import` syntax to `_settings.scss` file.\n\nalso I used `foundation-apps` library heavily, so `main.scss` file has `@import` to the `foundation-apps/foundation`, and the module-specific styles has `@import` to some foundation functions that I use for the module, such as `foundation-apps/components/grid`.\n\nthe build succeeds when I first remove the `require` on the `controller`, and add it again after the first build has succeed (I use webpack-dev-server with --hot).\n. @jhnns sorry I can't, still in the middle of a project :persevere:\ncurrently I'm using the `env UX_THREADPOOL_SIZE=100`, and it definitely helps. thanks @saper !\n. ",
    "saper": "Does putting `env UV_THREADPOOL_SIZE=100` before `node` invocation help? If yes, then this is sass/node-sass#857\n. 3.1.1 also suffers from threading problem, so there must be some other, additional issue. @evandegr can you post somewhere a minimal but complete example to reproduce this issue?\n. I would really love if webpack community could produce a simple, self-contained setup to reproduce the issue.\n. Dzi\u0119ki, @piotrf \n\nRight now I am getting the same `Module not found: Error: Cannot resolve 'file' or 'directory' ./modules/TopBar/TopBar` error for 4 modules, no matter what :)\n\nWith https://github.com/saper/webpack-playground/tree/uncommenting@f547bb0 I get:\n\nhttps://gist.github.com/e0ec0e85bc048922ca27\n\nWith the master (https://github.com/saper/webpack-playground/commit/f547bb09dc7cd70ccc6b752fad13942fa506ba64) it gives\n\nhttps://gist.github.com/9255315d068b8edc36b\n\nNot a big difference, if any.... No hangs...\n. I can unfortunately confirm that https://github.com/haustraliaer/sass-webpack hangs due to sass/node-sass#857\n. This can be https://github.com/sass/node-sass/issues/1048 which is also not easy to solve. I have prepared a workaround in https://github.com/sass/node-sass/issues/1112 - if you install that, all scripts will timeout after 2000 ms and the errors will be shown.\n. > Well, if that will be merged, I guess it's ok.\n> How do I install specifically that?\n\nCheckout node-sass from git\n\nm> git clone https://github.com/sass/node-sass\nCloning into 'node-sass'...\nremote: Counting objects: 8241, done.\nremote: Total 8241 (delta 0), reused 0 (delta 0), pack-reused 8241\nReceiving objects: 100% (8241/8241), 14.48 MiB | 3.00 MiB/s, done.\nResolving deltas: 100% (4129/4129), done.\nChecking connectivity... done.\nm> cd node-sass\nm> git fetch origin pull/1112/head\nremote: Counting objects: 33, done.\nremote: Compressing objects: 100% (29/29), done.\nremote: Total 33 (delta 14), reused 0 (delta 0), pack-reused 4\nUnpacking objects: 100% (33/33), done.\nFrom https://github.com/sass/node-sass\n- branch            refs/pull/1112/head -> FETCH_HEAD\n  m> git merge FETCH_HEAD\n  Updating 9a46415..dbedf5f\n  Fast-forward\n  binding.gyp                         |   1 +\n  src/binding.cpp                     |  24 +++++++++++++++++--\n  src/callback_bridge.h               | 108 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-------------------\n  src/custom_function_bridge.cpp      |   3 +++\n  src/custom_function_bridge.h        |   1 +\n  src/custom_importer_bridge.h        |   1 +\n  src/debug.cpp                       |  29 ++++++++++++++++++++++\n  src/debug.h                         |  37 ++++++++++++++++++++++++++++\n  src/sass_types/sass_value_wrapper.h |  63 +++++++++++++++++++++++++++++++++++++++++++++++-\n  9 files changed, 240 insertions(+), 27 deletions(-)\n  create mode 100644 src/debug.cpp\n  create mode 100644 src/debug.h\n\nthen\n\n npm install \n\nand you need to compile the code yourself:\n\n node script/build.js -f\n\nThe last step requires that you have python 2.x and a recent C++11 compiler installed.\n. Nope, this patch does not fix it. So it's still probably something else. With my patch applied even the original problem is relieved by the time out. Maybe it's not node-sass issue at all.\n. Looking at the backtrace, this is definitely **not** a node-sass issue. Probably some callbacks got deadlocked in webpack.\n. I don't know, this bug is probably the right place to discuss this further.\n. Does putting `env UV_THREADPOOL_SIZE=100` before `node` invocation help? If yes, then this is sass/node-sass#857\n. 3.1.1 also suffers from threading problem, so there must be some other, additional issue. @evandegr can you post somewhere a minimal but complete example to reproduce this issue?\n. I would really love if webpack community could produce a simple, self-contained setup to reproduce the issue.\n. Dzi\u0119ki, @piotrf \n\nRight now I am getting the same `Module not found: Error: Cannot resolve 'file' or 'directory' ./modules/TopBar/TopBar` error for 4 modules, no matter what :)\n\nWith https://github.com/saper/webpack-playground/tree/uncommenting@f547bb0 I get:\n\nhttps://gist.github.com/e0ec0e85bc048922ca27\n\nWith the master (https://github.com/saper/webpack-playground/commit/f547bb09dc7cd70ccc6b752fad13942fa506ba64) it gives\n\nhttps://gist.github.com/9255315d068b8edc36b\n\nNot a big difference, if any.... No hangs...\n. I can unfortunately confirm that https://github.com/haustraliaer/sass-webpack hangs due to sass/node-sass#857\n. This can be https://github.com/sass/node-sass/issues/1048 which is also not easy to solve. I have prepared a workaround in https://github.com/sass/node-sass/issues/1112 - if you install that, all scripts will timeout after 2000 ms and the errors will be shown.\n. > Well, if that will be merged, I guess it's ok.\n> How do I install specifically that?\n\nCheckout node-sass from git\n\nm> git clone https://github.com/sass/node-sass\nCloning into 'node-sass'...\nremote: Counting objects: 8241, done.\nremote: Total 8241 (delta 0), reused 0 (delta 0), pack-reused 8241\nReceiving objects: 100% (8241/8241), 14.48 MiB | 3.00 MiB/s, done.\nResolving deltas: 100% (4129/4129), done.\nChecking connectivity... done.\nm> cd node-sass\nm> git fetch origin pull/1112/head\nremote: Counting objects: 33, done.\nremote: Compressing objects: 100% (29/29), done.\nremote: Total 33 (delta 14), reused 0 (delta 0), pack-reused 4\nUnpacking objects: 100% (33/33), done.\nFrom https://github.com/sass/node-sass\n- branch            refs/pull/1112/head -> FETCH_HEAD\n  m> git merge FETCH_HEAD\n  Updating 9a46415..dbedf5f\n  Fast-forward\n  binding.gyp                         |   1 +\n  src/binding.cpp                     |  24 +++++++++++++++++--\n  src/callback_bridge.h               | 108 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-------------------\n  src/custom_function_bridge.cpp      |   3 +++\n  src/custom_function_bridge.h        |   1 +\n  src/custom_importer_bridge.h        |   1 +\n  src/debug.cpp                       |  29 ++++++++++++++++++++++\n  src/debug.h                         |  37 ++++++++++++++++++++++++++++\n  src/sass_types/sass_value_wrapper.h |  63 +++++++++++++++++++++++++++++++++++++++++++++++-\n  9 files changed, 240 insertions(+), 27 deletions(-)\n  create mode 100644 src/debug.cpp\n  create mode 100644 src/debug.h\n\nthen\n\n npm install \n\nand you need to compile the code yourself:\n\n node script/build.js -f\n\nThe last step requires that you have python 2.x and a recent C++11 compiler installed.\n. Nope, this patch does not fix it. So it's still probably something else. With my patch applied even the original problem is relieved by the time out. Maybe it's not node-sass issue at all.\n. Looking at the backtrace, this is definitely **not** a node-sass issue. Probably some callbacks got deadlocked in webpack.\n. I don't know, this bug is probably the right place to discuss this further.\n. ",
    "Antontelesh": "I'm reporting the same issue.\nPutting `env UV_THREADPOOL_SIZE=100` before `webpack` invocation does not help.\n. Sorry, it helps but builds very slowly. I've been waiting for a couple of minutes and it have compiled after all :)\n. I'm reporting the same issue.\nPutting `env UV_THREADPOOL_SIZE=100` before `webpack` invocation does not help.\n. Sorry, it helps but builds very slowly. I've been waiting for a couple of minutes and it have compiled after all :)\n. ",
    "evandegr": "Also downgrading to 0.5.0 and using node-sass 3.1.1 fixed this for me.\n. Also downgrading to 0.5.0 and using node-sass 3.1.1 fixed this for me.\n. ",
    "ftorre104": "I had this same issue. It happens when I import a utility .scss file (it has mixins) into 2 or more other scss files. If I just import it into 1 scss file, webpack builds correctly.\n\nHowever, I have no problem with config .scss files that only define variables. I can include those into as many .scss files with no build problem.\n\n`env UV_THREADPOOL_SIZE=100` worked for me too.\n. I had this same issue. It happens when I import a utility .scss file (it has mixins) into 2 or more other scss files. If I just import it into 1 scss file, webpack builds correctly.\n\nHowever, I have no problem with config .scss files that only define variables. I can include those into as many .scss files with no build problem.\n\n`env UV_THREADPOOL_SIZE=100` worked for me too.\n. ",
    "piotrf": "I have a sample for you to fiddle with: https://github.com/piotrf/webpack-playground\n1. `npm install` and `npm start` \n2. terminal will throw SASS variables missing errors.\n3. uncomment `@import \"config\";` in those files:\n\n```\n/src/Modules/Footer/Footer.scss\n/src/Modules/Header/Header.scss\n/src/Modules/StatusBar/StatusBar.scss\n```\n1. bundle will recompile.\n2. restart server.\n3. bundle compilation will choke.\n\nHope that helps.\n. I have a sample for you to fiddle with: https://github.com/piotrf/webpack-playground\n1. `npm install` and `npm start` \n2. terminal will throw SASS variables missing errors.\n3. uncomment `@import \"config\";` in those files:\n\n```\n/src/Modules/Footer/Footer.scss\n/src/Modules/Header/Header.scss\n/src/Modules/StatusBar/StatusBar.scss\n```\n1. bundle will recompile.\n2. restart server.\n3. bundle compilation will choke.\n\nHope that helps.\n. ",
    "dexbol": "`process.env.UV_THREADPOOL_SIZE = 100;` works .\n. `process.env.UV_THREADPOOL_SIZE = 100;` works .\n. ",
    "ebordeau": "`UV_THREADPOOL_SIZE=100` also worked for me.\n. `UV_THREADPOOL_SIZE=100` also worked for me.\n. ",
    "dmitry": "I've checked versions `>= 0.5.0`. Only 0.5.0 is working, everything after `0.6.0` stalls somewhere in the middle of a build.\n. @karlnp hopefully someone who is more experienced with `sass-loader` will fix this issue soon and we (who stuck with this issue) will be able to use newer versions of it.\n. Does anyone understands what causes this issue, so it can be fixed?\n. @jorrit :+1:\n\nBasically it's not related to the sass-loader, but completely related to node-sass?\n. Great! Solved. :+1: \n. I guess it's related to this file: https://github.com/webpack/webpack/blob/7c5da6580733301295b30beca1aa0eb41b6881bf/lib/optimize/UglifyJsPlugin.js\n. Looks like the `sourceMap` option might be an issue.\n. Without this block of code it runs:\n\n```\n\n        compilation.plugin(\"normal-module-loader\", function(context) {\n            context.minimize = true;\n        });\n```\n. Looks like css-loader requests https://github.com/ben-eb/cssnano, and then it hangs.\n. The core issue is in the https://github.com/ben-eb/postcss-minify-selectors. If I comment this processor everything works again.\n. Finally, it's related to: https://github.com/postcss/postcss-selector-parser, please use https://github.com/postcss/postcss-selector-parser/tree/master/src/__tests__ for prooving your bug.\n. Hey guys, now it's solved with postcss-selector-parser 1.3.0\n. I believe so.\n. @ccorcos just upgrade to the latest `postcss-selector-parser` version. This issue should be marked as solved already.\n. I've checked versions `>= 0.5.0`. Only 0.5.0 is working, everything after `0.6.0` stalls somewhere in the middle of a build.\n. @karlnp hopefully someone who is more experienced with `sass-loader` will fix this issue soon and we (who stuck with this issue) will be able to use newer versions of it.\n. Does anyone understands what causes this issue, so it can be fixed?\n. @jorrit :+1:\n\nBasically it's not related to the sass-loader, but completely related to node-sass?\n. Great! Solved. :+1: \n. I guess it's related to this file: https://github.com/webpack/webpack/blob/7c5da6580733301295b30beca1aa0eb41b6881bf/lib/optimize/UglifyJsPlugin.js\n. Looks like the `sourceMap` option might be an issue.\n. Without this block of code it runs:\n\n```\n\n        compilation.plugin(\"normal-module-loader\", function(context) {\n            context.minimize = true;\n        });\n```\n. Looks like css-loader requests https://github.com/ben-eb/cssnano, and then it hangs.\n. The core issue is in the https://github.com/ben-eb/postcss-minify-selectors. If I comment this processor everything works again.\n. Finally, it's related to: https://github.com/postcss/postcss-selector-parser, please use https://github.com/postcss/postcss-selector-parser/tree/master/src/__tests__ for prooving your bug.\n. Hey guys, now it's solved with postcss-selector-parser 1.3.0\n. I believe so.\n. @ccorcos just upgrade to the latest `postcss-selector-parser` version. This issue should be marked as solved already.\n. ",
    "karlnp": "thanks, @dmitry - this lets me keep working. Appreciated.\n. @loopmode I thought you were commenting on what you were drinking - and googling it led to the discovery that neat/bitters neatly solves a problem we've been wrestling with. thank you!\n. thanks, @dmitry - this lets me keep working. Appreciated.\n. @loopmode I thought you were commenting on what you were drinking - and googling it led to the discovery that neat/bitters neatly solves a problem we've been wrestling with. thank you!\n. ",
    "mozmorris": "@dmitry thanks, this helped me.\n. @dmitry thanks, this helped me.\n. ",
    "loopmode": "@dmitry thanks, works for me too.\nUnfortunately, the release log jumps from v0.3.1 to v1.0.0, so it is not clear what features or changes we miss when using 0.5.0, but everything seems to work fine so far (using bourbon/neat/bitters)\n. @karlnp xD it's easy to forget you're using specific slang when you're deep in some development and libraries\n. @dmitry thanks, works for me too.\nUnfortunately, the release log jumps from v0.3.1 to v1.0.0, so it is not clear what features or changes we miss when using 0.5.0, but everything seems to work fine so far (using bourbon/neat/bitters)\n. @karlnp xD it's easy to forget you're using specific slang when you're deep in some development and libraries\n. ",
    "patrickhaug": "is there an update on this? webpack get's really slow with renderSync.\n. How and where in webpack should I use renderSync?\n. is there an update on this? webpack get's really slow with renderSync.\n. How and where in webpack should I use renderSync?\n. ",
    "laurentvd": "I'm having similar issues and UV_THREADPOOL_SIZE solves it (for now)\n. Ah great to have an understandable explanation! Thanks @jorrit and @saper \n. I'm having similar issues and UV_THREADPOOL_SIZE solves it (for now)\n. Ah great to have an understandable explanation! Thanks @jorrit and @saper \n. ",
    "pthorn": "I also have this problem. UV_THREADPOOL_SIZE=100 seems to help.\n. #132 seems to fix #100. Thanks for the hint.\n. This seems to fix #100 for me.\n. I also have this problem. UV_THREADPOOL_SIZE=100 seems to help.\n. #132 seems to fix #100. Thanks for the hint.\n. This seems to fix #100 for me.\n. ",
    "danistefanovic": "#132 works for me too.\n. I've tested it in the context of #100 and it works for me. :+1:\n. #132 works for me too.\n. I've tested it in the context of #100 and it works for me. :+1:\n. ",
    "jedwards1211": "So there's no single-threaded or pure JS Sass compiler, is there?  I would be all in favor of switching to one if it exists.  My trust in multi-threaded code only erodes as the years go by...\n. I wonder if it would be possible/faster for sass-loader to concat all sass modules being compiled/recompiled together, then compile them with a single Sass process, and then somehow split the CSS back apart?  (e.g. by inserting special comments for module boundaries)\n. I don't really know how slow it is (I know some of my big Webpack projects build slowly but I'm not sure if Sass has anything to do with it).  I was just thinking about how you said above that \"The initial build takes much longer because each component spawns its own Sass process.\"  If multiple Sass processes cause slowness, using a single Sass process could theoretically improve that.\n. Ahhhh, gotcha.\n. Hmmm...no luck reproducing in a minimal example yet :(  I even tried duplicating how I'm using `context` and `resolve.root` in the webpack config.\n. There's a lot to remove :)  So I can't guarantee when I'll come up with a minimal example\n. You know, this gives me an idea.  So this bridge of sorts between JS and Sass is cool.  But I'd have a hunch that a Webpack macro preprocessor type loader would solve a lot of the same problems -- and automatically enable one to use shared variables/functions between source files of _any type_.  Boom!\n. So there's no single-threaded or pure JS Sass compiler, is there?  I would be all in favor of switching to one if it exists.  My trust in multi-threaded code only erodes as the years go by...\n. I wonder if it would be possible/faster for sass-loader to concat all sass modules being compiled/recompiled together, then compile them with a single Sass process, and then somehow split the CSS back apart?  (e.g. by inserting special comments for module boundaries)\n. I don't really know how slow it is (I know some of my big Webpack projects build slowly but I'm not sure if Sass has anything to do with it).  I was just thinking about how you said above that \"The initial build takes much longer because each component spawns its own Sass process.\"  If multiple Sass processes cause slowness, using a single Sass process could theoretically improve that.\n. Ahhhh, gotcha.\n. Hmmm...no luck reproducing in a minimal example yet :(  I even tried duplicating how I'm using `context` and `resolve.root` in the webpack config.\n. There's a lot to remove :)  So I can't guarantee when I'll come up with a minimal example\n. You know, this gives me an idea.  So this bridge of sorts between JS and Sass is cool.  But I'd have a hunch that a Webpack macro preprocessor type loader would solve a lot of the same problems -- and automatically enable one to use shared variables/functions between source files of _any type_.  Boom!\n. ",
    "alexilyaev": "I'm still having this issue.\n\nI\"ve updated to `sass-loader` `2.0.1` and installed `node-sass` `3.3.3` and my WebPack build still hangs at `build modules` (around 68%).\nAlso tried with `node-sass` `3.2.0`, same result.\n\nAdding `UV_THREADPOOL_SIZE=100` before the command did not help.\nI even deleted the whole `node_modules` folder and installed again, still hangs.\n\nRemoving the loader from the Webpack config results in a successful build (albeit with errors related to my scss files).\n\nHow come it fails silently?\nCan't we have some errors shown?\n. After more digging, turns out I had a different issue altogether, created a new ticket for that #168.\nAfter dealing with that, the build passed correctly with the `sass-loader` `2.0.1`.\n. Well, if that will be merged, I guess it's ok.\nHow do I install specifically that?\n. Ahm... I think I'll pass :-).\n\nFor now, I fixed my issue due to the wrong syntax in my scss code, but it will sure bite someone else.\nPerhaps you can test it with my test-case repo above, and see if it actually throws the proper error after 2 seconds.\n. Should I repost somewhere?\n. Wow, quick catch :-).\n\nSo... we need to update the dependency in `postcss-minify-selectors` to `1.3.0`, then update in `cssnano` and then update here?\n. I'm still having this issue.\n\nI\"ve updated to `sass-loader` `2.0.1` and installed `node-sass` `3.3.3` and my WebPack build still hangs at `build modules` (around 68%).\nAlso tried with `node-sass` `3.2.0`, same result.\n\nAdding `UV_THREADPOOL_SIZE=100` before the command did not help.\nI even deleted the whole `node_modules` folder and installed again, still hangs.\n\nRemoving the loader from the Webpack config results in a successful build (albeit with errors related to my scss files).\n\nHow come it fails silently?\nCan't we have some errors shown?\n. After more digging, turns out I had a different issue altogether, created a new ticket for that #168.\nAfter dealing with that, the build passed correctly with the `sass-loader` `2.0.1`.\n. Well, if that will be merged, I guess it's ok.\nHow do I install specifically that?\n. Ahm... I think I'll pass :-).\n\nFor now, I fixed my issue due to the wrong syntax in my scss code, but it will sure bite someone else.\nPerhaps you can test it with my test-case repo above, and see if it actually throws the proper error after 2 seconds.\n. Should I repost somewhere?\n. Wow, quick catch :-).\n\nSo... we need to update the dependency in `postcss-minify-selectors` to `1.3.0`, then update in `cssnano` and then update here?\n. ",
    "mderrick": "Just in case this helps anybody I also had this precise issue with importing a partial just fine until I imported it again for the third time. Webpack would simply hang.\n\nUpgrading `sass-loader` from `1.0.1` to `3.1.2` solved it for me.\n. Just in case this helps anybody I also had this precise issue with importing a partial just fine until I imported it again for the third time. Webpack would simply hang.\n\nUpgrading `sass-loader` from `1.0.1` to `3.1.2` solved it for me.\n. ",
    "pavankumarkatakam": "yeah, upgrading the sass-loader version solved for me also, thanks @mderrick \n. yeah, upgrading the sass-loader version solved for me also, thanks @mderrick \n. ",
    "sebastiaanluca": "Running into the same issue using a simple mixin, but not sure of it's entirely the same or whether I should create a new issue. Using `\"sass-loader\": \"^3.1.2\"`\n\n``` sass\n@mixin font-sans($font: 'Lato') {\n    font-family: $font, sans-serif;\n    font-style: normal;\n}\n\n@mixin font-sans-light {\n    @include font-sans();\n    font-weight: 300;\n}\n```\n\nNote the `@include font-sans()` and its parenthesis. Passing something like `@include font-sans('Lato');` works. Not passing something just silently stops gulp/webpack watch after just showing `Begin compile at\u2026` and `Finished 'webpack'\u2026`.\n\n---\n\nKind of a \"nevermind\" here as I just found the culprit, though I'd expect it to throw some errors.\n\nAccidentally defined 2 mixins with the same name where one then referenced itself:\n\n``` sass\n@mixin font-sans($font: 'Lato') {\n    font-family: $font, sans-serif;\n    font-style: normal;\n}\n\n@mixin font-sans {\n    @include font-sans;\n    font-weight: 400;\n}\n```\n\nProbably stuck in an infinite loop or something and made it quit altogether.\n. Running into the same issue using a simple mixin, but not sure of it's entirely the same or whether I should create a new issue. Using `\"sass-loader\": \"^3.1.2\"`\n\n``` sass\n@mixin font-sans($font: 'Lato') {\n    font-family: $font, sans-serif;\n    font-style: normal;\n}\n\n@mixin font-sans-light {\n    @include font-sans();\n    font-weight: 300;\n}\n```\n\nNote the `@include font-sans()` and its parenthesis. Passing something like `@include font-sans('Lato');` works. Not passing something just silently stops gulp/webpack watch after just showing `Begin compile at\u2026` and `Finished 'webpack'\u2026`.\n\n---\n\nKind of a \"nevermind\" here as I just found the culprit, though I'd expect it to throw some errors.\n\nAccidentally defined 2 mixins with the same name where one then referenced itself:\n\n``` sass\n@mixin font-sans($font: 'Lato') {\n    font-family: $font, sans-serif;\n    font-style: normal;\n}\n\n@mixin font-sans {\n    @include font-sans;\n    font-weight: 400;\n}\n```\n\nProbably stuck in an infinite loop or something and made it quit altogether.\n. ",
    "bensampaio": "I just run into this exact same issue. I'm using `\"css-loader\": \"^0.23.1\"` in combination with `\"sass-loader\": \"^4.0.0\"`. Every CSS module file imports the same `vars.scss` file. At first, that was fine but the project continued growing so I got more and more .scss files and now all of a sudden `webpack` is no longer able to finish.\n\nMy webpack configuration looks like this:\n\n``` js\n{\n    devtool: 'eval',\n    entry: {\n        app: path.resolve(__dirname, 'start.js'),\n    },\n    module: {\n        loaders: [\n            {\n                loader: 'babel',\n                test: /\\.jsx?$/,\n            },\n            {\n                loader: ExtractTextPlugin.extract('css?modules&importLoaders=1&localIdentName=[name]--[local]___[hash:base64:5]!sass!postcss-loader'),\n                test: /\\.scss$/,\n            },\n        ],\n    },\n    plugins: [\n        new ExtractTextPlugin('styles.css', { allChunks: true }),\n    ],\n    postcss: [\n        Autoprefixer,\n    ],\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: '[name].js',\n    },\n    resolve: {\n        extensions: ['', '.js', '.jsx'],\n    },\n    watch: true,\n}\n```\n\nAm I doing anything wrong? Is this a known problem of using CSS modules with SASS? Is there anything I can try to fix this either temporarily or permanently? Help with this would be truly appreciated since I'm completely stuck with this issue. Thank you!\n. I am having this same problem. Any progress on this?\n. I just tried to remove `process.env.UV_THREADPOOL_SIZE = 100;` and it worked. So it's safe to assume it's fixed?. @jhnns could you show an example on how to do global imports then? I'm having this same issue. Thank you!\n. I agree with you @jhnns. I would prefer if I could do this somewhere in my scss files. If I have to hide it in my webpack configuration then other developers won't know it is there and won't even consider looking there I guess. Thanks!\n. I just run into this exact same issue. I'm using `\"css-loader\": \"^0.23.1\"` in combination with `\"sass-loader\": \"^4.0.0\"`. Every CSS module file imports the same `vars.scss` file. At first, that was fine but the project continued growing so I got more and more .scss files and now all of a sudden `webpack` is no longer able to finish.\n\nMy webpack configuration looks like this:\n\n``` js\n{\n    devtool: 'eval',\n    entry: {\n        app: path.resolve(__dirname, 'start.js'),\n    },\n    module: {\n        loaders: [\n            {\n                loader: 'babel',\n                test: /\\.jsx?$/,\n            },\n            {\n                loader: ExtractTextPlugin.extract('css?modules&importLoaders=1&localIdentName=[name]--[local]___[hash:base64:5]!sass!postcss-loader'),\n                test: /\\.scss$/,\n            },\n        ],\n    },\n    plugins: [\n        new ExtractTextPlugin('styles.css', { allChunks: true }),\n    ],\n    postcss: [\n        Autoprefixer,\n    ],\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: '[name].js',\n    },\n    resolve: {\n        extensions: ['', '.js', '.jsx'],\n    },\n    watch: true,\n}\n```\n\nAm I doing anything wrong? Is this a known problem of using CSS modules with SASS? Is there anything I can try to fix this either temporarily or permanently? Help with this would be truly appreciated since I'm completely stuck with this issue. Thank you!\n. I am having this same problem. Any progress on this?\n. I just tried to remove `process.env.UV_THREADPOOL_SIZE = 100;` and it worked. So it's safe to assume it's fixed?. @jhnns could you show an example on how to do global imports then? I'm having this same issue. Thank you!\n. I agree with you @jhnns. I would prefer if I could do this somewhere in my scss files. If I have to hide it in my webpack configuration then other developers won't know it is there and won't even consider looking there I guess. Thanks!\n. ",
    "feychou": "This still happens to me with `node-sass 3.8.0` and `sass-loader 4.0.0`. However increasing the threadpoll size works.\n. This still happens to me with `node-sass 3.8.0` and `sass-loader 4.0.0`. However increasing the threadpoll size works.\n. ",
    "seeden": "I have same error with latest sass-loader. I have same error with latest sass-loader. ",
    "theskillwithin": "happens     \"sass-loader\": \"^4.0.2\",. happens     \"sass-loader\": \"^4.0.2\",. ",
    "tomsarduy": "This is still happening, 2 years and there is no final resolution? I'm using `node-sass 4.5.0` and `sass-loader 6.0.1`. Although `UV_THREADPOOL_SIZE=100` seems to solve the issue, it makes the compilation time slower. I'm afraid what's gonna happen when the project keeps growing.. This is still happening, 2 years and there is no final resolution? I'm using `node-sass 4.5.0` and `sass-loader 6.0.1`. Although `UV_THREADPOOL_SIZE=100` seems to solve the issue, it makes the compilation time slower. I'm afraid what's gonna happen when the project keeps growing.. ",
    "mechanicious": "Webpack stalled at compiling Javascript files through babel. \r\n\r\nAdding the options below to `webpack.config.js` solved the issue for me. These options are described in [docs](https://webpack.js.org/configuration/watch/).\r\n```js\r\nwatchOption: {\r\n  aggregateTimeout: 1,\r\n  poll: 1000\r\n}\r\n```\r\n\r\nSo my Webpack config file looks now like this\r\n```js\r\nvar path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: [\"./js/index.js\"],\r\n  devtool: \"source-map\",\r\n  output: {\r\n    path: path.join(__dirname, 'public/dist'),\r\n    filename: \"bundle.js\"\r\n  },\r\n  module: {\r\n    loaders: [\r\n      {\r\n        test: /\\.js?$/,\r\n        loader: \"babel\",\r\n        query: {\r\n          presets: [\"es2015\"],\r\n          plugins: [\"transform-flow-strip-types\", \"transform-class-properties\"]\r\n        },\r\n        include: [\r\n          path.join(__dirname, 'js')\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        loaders: ['style', 'css']\r\n      },\r\n      {\r\n        test: /\\.json$/,\r\n        loaders: ['json'],\r\n        include: [\r\n          path.join(__dirname, 'js'),\r\n        ],\r\n      },\r\n\r\n    ]\r\n  },\r\n  resolve: {\r\n    extensions: ['','.js', '.jsx', '.json', '.css']\r\n  },\r\n  watchOptions: {\r\n    aggregateTimeout: 1,\r\n    poll: 1000\r\n  }\r\n};\r\n```. Webpack stalled at compiling Javascript files through babel. \r\n\r\nAdding the options below to `webpack.config.js` solved the issue for me. These options are described in [docs](https://webpack.js.org/configuration/watch/).\r\n```js\r\nwatchOption: {\r\n  aggregateTimeout: 1,\r\n  poll: 1000\r\n}\r\n```\r\n\r\nSo my Webpack config file looks now like this\r\n```js\r\nvar path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: [\"./js/index.js\"],\r\n  devtool: \"source-map\",\r\n  output: {\r\n    path: path.join(__dirname, 'public/dist'),\r\n    filename: \"bundle.js\"\r\n  },\r\n  module: {\r\n    loaders: [\r\n      {\r\n        test: /\\.js?$/,\r\n        loader: \"babel\",\r\n        query: {\r\n          presets: [\"es2015\"],\r\n          plugins: [\"transform-flow-strip-types\", \"transform-class-properties\"]\r\n        },\r\n        include: [\r\n          path.join(__dirname, 'js')\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        loaders: ['style', 'css']\r\n      },\r\n      {\r\n        test: /\\.json$/,\r\n        loaders: ['json'],\r\n        include: [\r\n          path.join(__dirname, 'js'),\r\n        ],\r\n      },\r\n\r\n    ]\r\n  },\r\n  resolve: {\r\n    extensions: ['','.js', '.jsx', '.json', '.css']\r\n  },\r\n  watchOptions: {\r\n    aggregateTimeout: 1,\r\n    poll: 1000\r\n  }\r\n};\r\n```. ",
    "adamalbrecht": "+1\n. +1\n. ",
    "elektronik2k5": "+1\n. @janjon you need to add `1.jpg`'s path to webpack's `module_directories` then use it like so `~1.jpg`.\n. @Jmeyering , I believe you need to remove the `style` loader from the prod config. `raw` loader isn't necessary in both configs too.\n. +1\n. @janjon you need to add `1.jpg`'s path to webpack's `module_directories` then use it like so `~1.jpg`.\n. @Jmeyering , I believe you need to remove the `style` loader from the prod config. `raw` loader isn't necessary in both configs too.\n. ",
    "cmnstmntmn": "+1\n. +1\n. ",
    "newtriks": "+1\n. +1\n. ",
    "Undistraction": "+1\n. +1\n. ",
    "malte-wessel": "+1\n. +1\n. ",
    "lasekio": "+1!\n. +1!\n. ",
    "zallek": "+1\n. I am using your fork in production, hope it will be merged soon :)\n. +1\n. I am using your fork in production, hope it will be merged soon :)\n. ",
    "jschlieber": "> When you add the .css extension, libsass does not include the file, it just turns it into @import url(..). When this is passed to the css-loader, all urls must be relative to the file which imports them. When you omit .css, libsass includes the file just like it was a .scss file. In this situation, all urls must be relative to the entry sass/scss file which was passed to the sass compiler.\r\n\r\n@jhnns Is this still the expected behavoir? Because if I omit `.css` in my import statement the file is completely ignored. It works if I add `.css` but then I have the problem with the relative urls. I'm on `sass-loader` version `6.0.3`.... > When you add the .css extension, libsass does not include the file, it just turns it into @import url(..). When this is passed to the css-loader, all urls must be relative to the file which imports them. When you omit .css, libsass includes the file just like it was a .scss file. In this situation, all urls must be relative to the entry sass/scss file which was passed to the sass compiler.\r\n\r\n@jhnns Is this still the expected behavoir? Because if I omit `.css` in my import statement the file is completely ignored. It works if I add `.css` but then I have the problem with the relative urls. I'm on `sass-loader` version `6.0.3`.... ",
    "gabrielenosso": "Windows 7, so it doesn't seem to be related to a particular version of Windows...\n. Windows 7, so it doesn't seem to be related to a particular version of Windows...\n. ",
    "strayiker": "```\n// When files have been imported via the includePaths-option, these files need to be\n// introduced to webpack in order to make them watchable.\nfunction addIncludedFilesToWebpack(includedFiles) {\n    includedFiles.forEach(function(filename) {\n        self.dependency(path.normalize(filename));\n    });\n}\n```\n\ni add path.normalize() for dependencies and it works )\nbefore: c:/repo/project\nafter: c:\\repo\\project\n\nI hope it will help in solving the problem\n. https://github.com/jtangelder/sass-loader/blob/master/index.js#L108-L112\nreplace it here\n. https://github.com/strayiker/sass-loader-dependencies-bug\n. ```\n// When files have been imported via the includePaths-option, these files need to be\n// introduced to webpack in order to make them watchable.\nfunction addIncludedFilesToWebpack(includedFiles) {\n    includedFiles.forEach(function(filename) {\n        self.dependency(path.normalize(filename));\n    });\n}\n```\n\ni add path.normalize() for dependencies and it works )\nbefore: c:/repo/project\nafter: c:\\repo\\project\n\nI hope it will help in solving the problem\n. https://github.com/jtangelder/sass-loader/blob/master/index.js#L108-L112\nreplace it here\n. https://github.com/strayiker/sass-loader-dependencies-bug\n. ",
    "f0def": "Thank you @strayiker, [it](https://github.com/jtangelder/sass-loader/issues/102#issuecomment-125273005) helped me\n. I met with the same problem, as described by the @newtonianb. I use windows 7, #102 is same issue\n. Thank you @strayiker, [it](https://github.com/jtangelder/sass-loader/issues/102#issuecomment-125273005) helped me\n. I met with the same problem, as described by the @newtonianb. I use windows 7, #102 is same issue\n. ",
    "davidgilbertson": "Nice one @strayiker\n. Nice one @strayiker\n. ",
    "ppalladino": "+1\n. +1\n. ",
    "rayshan": "@badsyntax if all you need are shared variables, why not have all of them in a file with only variables, that way it doesn't matter if it's imported multiple times? Like this:\nhttps://github.com/twbs/bootstrap/blob/v4-dev/scss/_variables.scss\n. @badsyntax if all you need are shared variables, why not have all of them in a file with only variables, that way it doesn't matter if it's imported multiple times? Like this:\nhttps://github.com/twbs/bootstrap/blob/v4-dev/scss/_variables.scss\n. ",
    "tony-kerz": "hi @jhnns, i was actually set up for HMR, but i tried with webpack-dev-server **without** using HMR and it still didn't update when i changed the imported scss file... \n. hi @jhnns, i was actually set up for HMR, but i tried with webpack-dev-server **without** using HMR and it still didn't update when i changed the imported scss file... \n. ",
    "jacobp100": "I am also finding this. If I have a setup:\n\n```\n/styles\n  _variables.scss\n  app.scss\n/variants\n  /a\n    _style.scss\n```\n\nWhere app imports variables, and variables imports styles, an update to styles has no effect, but an update to either app or variables does have an effect. FWIW, `/variants/a` is configured with an includePath (and is the only includePath).\n. The issue is that I can\u2019t import _variables or _style, as they contain nothing but variables. Importing in throws an error.\n. I'm sure that would work, although there's also variants/b that can be used in place, and whether it points to a or b is specified in the webpack config.\n. I am also finding this. If I have a setup:\n\n```\n/styles\n  _variables.scss\n  app.scss\n/variants\n  /a\n    _style.scss\n```\n\nWhere app imports variables, and variables imports styles, an update to styles has no effect, but an update to either app or variables does have an effect. FWIW, `/variants/a` is configured with an includePath (and is the only includePath).\n. The issue is that I can\u2019t import _variables or _style, as they contain nothing but variables. Importing in throws an error.\n. I'm sure that would work, although there's also variants/b that can be used in place, and whether it points to a or b is specified in the webpack config.\n. ",
    "richardbutler": "Possibly related to #102 and #107.\n. Possibly related to #102 and #107.\n. ",
    "hedgepigdaniel": "Fixes #100 #99\n. If you'd like to try my fork with these fixes, you can do `npm install github.com:OpenLearningNet/sass-loader.git --save`. That means instead of using the main branch of sass-loader you use my branch which is the source of this pull request. Otherwise if this or another fix gets merged you can go back to jtangelder's branch.\n. Fixes #100 #99\n. If you'd like to try my fork with these fixes, you can do `npm install github.com:OpenLearningNet/sass-loader.git --save`. That means instead of using the main branch of sass-loader you use my branch which is the source of this pull request. Otherwise if this or another fix gets merged you can go back to jtangelder's branch.\n. ",
    "matt-d-rat": "All be it a temporary solution, I definitely need this soon.\n. All be it a temporary solution, I definitely need this soon.\n. ",
    "snario": "@hedgepigdaniel tried your solution but it only delays the hanging from 40% to 61% for me, so not a complete fix unfortunately\n. @hedgepigdaniel tried your solution but it only delays the hanging from 40% to 61% for me, so not a complete fix unfortunately\n. ",
    "oopschen": "After 10 hours's digging, i find the solution:\n\n### libsass importer feature\n\n**importer** in node-sass is an experimental feature, so i do some test on it. I conclude that:\nWhen libsass encounter import directive, it first call the importer to resolve the file. \n- If any error happens, the importer must return Error or call done with an Error.\n- If the importer return absolute path, the libsass read the file content. \n- If the importer return an relative path, the libsass will search in the _includePaths_ if configured\n\n### sass-loader bug\n\nresolve process:\n- resolve module in webpack by the original name\n- resolve module in webpack by the name prefiexed by underline\n- done or return with file: _the name prefiexed by underline_\n\nthe last step cause the bug, _it must return the original name_. Thus, the libsass will complete the job in includePath.\n\nBTW, how can i commit the bugfix?\n. some bug in code\n. sorry for no tests.\nPlease tell me the way to run the tests.\nwhen i run _npm test_ with no modification, i get error:\n\n> sass-loader@1.0.2 pretest /home/work/workspace/sass-loader/sass-loader\n> node test/prepare.js\n\n/home/work/workspace/sass-loader/sass-loader/node_modules/node-sass/lib/index.js:409\n throw util._extend(new Error(), JSON.parse(result.error));\n             ^\nError: file to import not found or unreadable: ../node_modules/some-module\nCurrent dir: /home/work/workspace/sass-loader/sass-loader/test/scss/\n    at Object.module.exports.renderSync (/home/work/workspace/sass-loader/sass-loader/node_modules/node-sass/lib/index.js:409:22)\n    at /home/work/workspace/sass-loader/sass-loader/test/prepare.js:36:24\n    at Array.map (native)\n    at /home/work/workspace/sass-loader/sass-loader/test/prepare.js:20:10\n    at Array.forEach (native)\n    at Object.<anonymous> (/home/work/workspace/sass-loader/sass-loader/test/prepare.js:12:18)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\nnpm ERR! Test failed.  See above for more details.\n\nDoes it mean it has bugs in the master or i ran he wrong way\n. Update tests and feature demenstration.\nAdd contribution section to readme, thus newbies can run the tests correctly.\n. After 10 hours's digging, i find the solution:\n\n### libsass importer feature\n\n**importer** in node-sass is an experimental feature, so i do some test on it. I conclude that:\nWhen libsass encounter import directive, it first call the importer to resolve the file. \n- If any error happens, the importer must return Error or call done with an Error.\n- If the importer return absolute path, the libsass read the file content. \n- If the importer return an relative path, the libsass will search in the _includePaths_ if configured\n\n### sass-loader bug\n\nresolve process:\n- resolve module in webpack by the original name\n- resolve module in webpack by the name prefiexed by underline\n- done or return with file: _the name prefiexed by underline_\n\nthe last step cause the bug, _it must return the original name_. Thus, the libsass will complete the job in includePath.\n\nBTW, how can i commit the bugfix?\n. some bug in code\n. sorry for no tests.\nPlease tell me the way to run the tests.\nwhen i run _npm test_ with no modification, i get error:\n\n> sass-loader@1.0.2 pretest /home/work/workspace/sass-loader/sass-loader\n> node test/prepare.js\n\n/home/work/workspace/sass-loader/sass-loader/node_modules/node-sass/lib/index.js:409\n throw util._extend(new Error(), JSON.parse(result.error));\n             ^\nError: file to import not found or unreadable: ../node_modules/some-module\nCurrent dir: /home/work/workspace/sass-loader/sass-loader/test/scss/\n    at Object.module.exports.renderSync (/home/work/workspace/sass-loader/sass-loader/node_modules/node-sass/lib/index.js:409:22)\n    at /home/work/workspace/sass-loader/sass-loader/test/prepare.js:36:24\n    at Array.map (native)\n    at /home/work/workspace/sass-loader/sass-loader/test/prepare.js:20:10\n    at Array.forEach (native)\n    at Object.<anonymous> (/home/work/workspace/sass-loader/sass-loader/test/prepare.js:12:18)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\nnpm ERR! Test failed.  See above for more details.\n\nDoes it mean it has bugs in the master or i ran he wrong way\n. Update tests and feature demenstration.\nAdd contribution section to readme, thus newbies can run the tests correctly.\n. ",
    "lencioni": "Thanks for the response, that sounds like a reasonable plan. However, for now I just decided to go with [json-sass](https://github.com/acdlite/json-sass) which requires an extra step to generate the Sass, but works for now. Ideally this would happen automatically in the loader, but I won't be able to give it the time or attention it deserves for a while.\n. I've also switched to this branch in the context of #100 and this seems to resolve the problem. :shipit: \n. I'm digging into this a little more today. Here are some more details.\n\nMy `modulesDirectories` configuration looks something like this:\n\n``` js\nmodulesDirectories: [\n  'app/assets',\n  'app/assets/javascripts',\n  'app/assets/stylesheets',\n  'node_modules',\n  'spec/javascripts',\n],\n```\n\nThe only file I can find that I have named `config` is at `app/assets/stylesheets/_config.scss`. But anyway, to make sure that I am using a more unique name, I changed this to `app/assets/stylesheets/_joe_config.scss`.\n\nWith sass-loader 2.0.0+ (currently running 3.1.1) a .scss file with the following line:\n\n``` scss\n@import '~joe_config';\n```\n\nResults in the following error:\n\n> File to import not found or unreadable: ~joe_config\n\nSimilarly, the following don't work:\n\n``` scss\n@import '~_joe_config';\n```\n\n``` scss\n@import '~joe_config.scss';\n```\n\n``` scss\n@import '~stylesheets/joe_config.scss';\n```\n\n``` scss\n@import '~stylesheets/joe_config';\n```\n\nBut the following seem to work:\n\n``` scss\n@import '~_joe_config.scss';\n```\n\n``` scss\n@import '~stylesheets/_joe_config';\n```\n\n``` scss\n@import '~stylesheets/_joe_config.scss';\n```\n\nDoes this make sense to you? Any help to point me in the right direction would be really appreciated.\n. Thanks! That was very helpful. I took the opportunity to improve the [documentation for `resolve.root` a little](https://github.com/webpack/docs/wiki/configuration#resolveroot).\n\nI'm going to call this resolved. Thanks for the help and for the great work on this loader.\n. Thanks for the work on this. I'm trying to get this set up with node-sass-json-importer and am running into an issue. I'm wondering if someone here can help me out. Here's the configuration I added to my webpack config:\n\n``` js\nsassLoader: {\n  importer: require('node-sass-json-importer'),\n}\n```\n\nWith this configuration sass-loader seems to have a hard time resolving my `@import`s that use `~` and I get messages like the following:\n\n```\nERROR in ./~/css-loader?localIdentName=[path][name]--[local]--[hash:base64:10]!./~/autoprefixer-loader!./~/sass-loader!./app/assets/javascripts/components_loader.js!./app/assets/components/MyComponent/index.scss\nModule build failed:\n@import '~stylesheets/config';\n^\n      File to import not found or unreadable: ~stylesheets/config\nParent style sheet: stdin\n      in /Users/me/repo/app/assets/components/MyComponent/index.scss (line 1, column 1)\n @ ./app/assets/components/MyComponent/index.scss 4:14-286\n```\n\nI found [the bit of code where this is managed in sass-loader](https://github.com/jtangelder/sass-loader/blob/fd06c6c5cafac8792619b0181df2f0fe3faf82e9/index.js#L240-L242) and it seems to add the webpack importer so I'm not really sure why this is failing like this. Any thoughts?\n. I seem to have the same results with the following configuration, which from what I can tell shouldn't really do much of anything:\n\n``` js\nsassLoader: {\n  importer: (url) => ({ file: url })\n},\n```\n\nI also tried this, which seemed to work fine:\n\n``` js\nsassLoader: {\n  importer: (_, __, done) => done()\n},\n```\n\nDo you suppose there might be something else that's odd about my config?\n. Ah, thanks! It seems that this might be a bug in node-sass-json-importer then (https://github.com/Updater/node-sass-json-importer/blob/f203f2244d157ccce88194d31740d3b54e39128f/src/index.js#L24-L26). I'll move the discussion over there.\n. Thanks for the response, that sounds like a reasonable plan. However, for now I just decided to go with [json-sass](https://github.com/acdlite/json-sass) which requires an extra step to generate the Sass, but works for now. Ideally this would happen automatically in the loader, but I won't be able to give it the time or attention it deserves for a while.\n. I've also switched to this branch in the context of #100 and this seems to resolve the problem. :shipit: \n. I'm digging into this a little more today. Here are some more details.\n\nMy `modulesDirectories` configuration looks something like this:\n\n``` js\nmodulesDirectories: [\n  'app/assets',\n  'app/assets/javascripts',\n  'app/assets/stylesheets',\n  'node_modules',\n  'spec/javascripts',\n],\n```\n\nThe only file I can find that I have named `config` is at `app/assets/stylesheets/_config.scss`. But anyway, to make sure that I am using a more unique name, I changed this to `app/assets/stylesheets/_joe_config.scss`.\n\nWith sass-loader 2.0.0+ (currently running 3.1.1) a .scss file with the following line:\n\n``` scss\n@import '~joe_config';\n```\n\nResults in the following error:\n\n> File to import not found or unreadable: ~joe_config\n\nSimilarly, the following don't work:\n\n``` scss\n@import '~_joe_config';\n```\n\n``` scss\n@import '~joe_config.scss';\n```\n\n``` scss\n@import '~stylesheets/joe_config.scss';\n```\n\n``` scss\n@import '~stylesheets/joe_config';\n```\n\nBut the following seem to work:\n\n``` scss\n@import '~_joe_config.scss';\n```\n\n``` scss\n@import '~stylesheets/_joe_config';\n```\n\n``` scss\n@import '~stylesheets/_joe_config.scss';\n```\n\nDoes this make sense to you? Any help to point me in the right direction would be really appreciated.\n. Thanks! That was very helpful. I took the opportunity to improve the [documentation for `resolve.root` a little](https://github.com/webpack/docs/wiki/configuration#resolveroot).\n\nI'm going to call this resolved. Thanks for the help and for the great work on this loader.\n. Thanks for the work on this. I'm trying to get this set up with node-sass-json-importer and am running into an issue. I'm wondering if someone here can help me out. Here's the configuration I added to my webpack config:\n\n``` js\nsassLoader: {\n  importer: require('node-sass-json-importer'),\n}\n```\n\nWith this configuration sass-loader seems to have a hard time resolving my `@import`s that use `~` and I get messages like the following:\n\n```\nERROR in ./~/css-loader?localIdentName=[path][name]--[local]--[hash:base64:10]!./~/autoprefixer-loader!./~/sass-loader!./app/assets/javascripts/components_loader.js!./app/assets/components/MyComponent/index.scss\nModule build failed:\n@import '~stylesheets/config';\n^\n      File to import not found or unreadable: ~stylesheets/config\nParent style sheet: stdin\n      in /Users/me/repo/app/assets/components/MyComponent/index.scss (line 1, column 1)\n @ ./app/assets/components/MyComponent/index.scss 4:14-286\n```\n\nI found [the bit of code where this is managed in sass-loader](https://github.com/jtangelder/sass-loader/blob/fd06c6c5cafac8792619b0181df2f0fe3faf82e9/index.js#L240-L242) and it seems to add the webpack importer so I'm not really sure why this is failing like this. Any thoughts?\n. I seem to have the same results with the following configuration, which from what I can tell shouldn't really do much of anything:\n\n``` js\nsassLoader: {\n  importer: (url) => ({ file: url })\n},\n```\n\nI also tried this, which seemed to work fine:\n\n``` js\nsassLoader: {\n  importer: (_, __, done) => done()\n},\n```\n\nDo you suppose there might be something else that's odd about my config?\n. Ah, thanks! It seems that this might be a bug in node-sass-json-importer then (https://github.com/Updater/node-sass-json-importer/blob/f203f2244d157ccce88194d31740d3b54e39128f/src/index.js#L24-L26). I'll move the discussion over there.\n. ",
    "AlanFoster": ":+1: This would be a nice feature to make use of\n. :+1: This would be a nice feature to make use of\n. ",
    "pmowrer": "The `node-sass` importer you need is here: https://github.com/Updater/node-sass-json-importer\n\nI'm just getting started with `sass-loader`, but unless I'm mistaken it looks like it currently [doesn't support custom importers](https://github.com/jtangelder/sass-loader/blob/f90aacc262bb2e176e8cfd1a9d8c051079b8c603/index.js#L234). Should be a simple fix though. I'll probably put together a PR.\n. @jhnns Sounds good, thanks for the link (I'm pretty new to Webpack land). I'll make the update soon\n. @jhnns Updated per the docs. Let me know what you think.\n. The `node-sass` importer you need is here: https://github.com/Updater/node-sass-json-importer\n\nI'm just getting started with `sass-loader`, but unless I'm mistaken it looks like it currently [doesn't support custom importers](https://github.com/jtangelder/sass-loader/blob/f90aacc262bb2e176e8cfd1a9d8c051079b8c603/index.js#L234). Should be a simple fix though. I'll probably put together a PR.\n. @jhnns Sounds good, thanks for the link (I'm pretty new to Webpack land). I'll make the update soon\n. @jhnns Updated per the docs. Let me know what you think.\n. ",
    "SleepWalker": "@IngwiePhoenix, omg. I am currently trying to solve the same problem.\n\nI've tried your loader and it is super (sass-loader too, @jhnns  ;) ), but I want to be able to `@import` font styles to make use of css modules.\n\n@jhnns `loadModule()` can be used for the async version of importer. It seams, that the bigger part of users run webpack in async mode, so it can be implemented at least for that use case.\n\nAs for now I combined importer for `node-sass` to replace `@import '~icons.font.json';` with css from fontgen and created tiny plugin to be able to emit font files generated by fontgen logic (modified to run outside of loader context) while executing importer function.\nIt works, but it looks like a magic because of sharing the webpack reference from plugin via global vars.\n\nProbably it is also possible to swap file contents during `self.resolve` call from sass-loader, so that will be solved only by plugin without custom importer, but I'm not sure if webpack gives us an appropriate hooks for plugins (I have no experience writing webpack loaders/plugins).\n\nBut the `loadModule()` call will add much more flexibility and extendability.\n. @jhnns great news :+1: \n. As for now I'm achieving such thing using the combination of `postcss-scss` and `postcss-import`.\r\n\r\nHere is the part of my webpack config for `postcss` plugin:\r\n\r\n```js\r\ncssImport({\r\n    path: rootPath,\r\n    resolve: ((defaultResolve) =>\r\n        (url, basedir, importOptions) =>\r\n            defaultResolve(loaderUtils.urlToRequest(url), basedir, importOptions)\r\n    )(require('postcss-import/lib/resolve-id')),\r\n    load: ((defaultLoad) =>\r\n        (filename, importOptions) => {\r\n            if (/\\.font.(js|json)$/.test(filename)) {\r\n                if (!fileCache[filename] || !isProduction) {\r\n                    // do not execute loader on the same file twice\r\n                    // this is an overcome for a bug with ExtractTextPlugin, for isProduction === true\r\n                    // when @imported files may be processed mutiple times\r\n                    fileCache[filename] = new Promise((resolve, reject) =>\r\n                        this.loadModule(filename, (err, source) =>\r\n                            err ? reject(err) : resolve(this.exec(source, rootPath))\r\n                        )\r\n                    );\r\n                }\r\n                return fileCache[filename];\r\n            }\r\n            return defaultLoad(filename, importOptions);\r\n        }\r\n    )(require('postcss-import/lib/load-content'))\r\n})\r\n```. @evilebottnawi I've solved that problem by resolving all the imports and other urls before `sass-loader` runs. It works for my needs, but it may not cover all the needs that may occure.\r\n\r\nThe best possible solution is, when all imports and urls will be processed through webpack loading mechanism. This will enable all the power webpack provides and allow to use loader-chains that generate css/urls at the end.. @IngwiePhoenix, omg. I am currently trying to solve the same problem.\n\nI've tried your loader and it is super (sass-loader too, @jhnns  ;) ), but I want to be able to `@import` font styles to make use of css modules.\n\n@jhnns `loadModule()` can be used for the async version of importer. It seams, that the bigger part of users run webpack in async mode, so it can be implemented at least for that use case.\n\nAs for now I combined importer for `node-sass` to replace `@import '~icons.font.json';` with css from fontgen and created tiny plugin to be able to emit font files generated by fontgen logic (modified to run outside of loader context) while executing importer function.\nIt works, but it looks like a magic because of sharing the webpack reference from plugin via global vars.\n\nProbably it is also possible to swap file contents during `self.resolve` call from sass-loader, so that will be solved only by plugin without custom importer, but I'm not sure if webpack gives us an appropriate hooks for plugins (I have no experience writing webpack loaders/plugins).\n\nBut the `loadModule()` call will add much more flexibility and extendability.\n. @jhnns great news :+1: \n. As for now I'm achieving such thing using the combination of `postcss-scss` and `postcss-import`.\r\n\r\nHere is the part of my webpack config for `postcss` plugin:\r\n\r\n```js\r\ncssImport({\r\n    path: rootPath,\r\n    resolve: ((defaultResolve) =>\r\n        (url, basedir, importOptions) =>\r\n            defaultResolve(loaderUtils.urlToRequest(url), basedir, importOptions)\r\n    )(require('postcss-import/lib/resolve-id')),\r\n    load: ((defaultLoad) =>\r\n        (filename, importOptions) => {\r\n            if (/\\.font.(js|json)$/.test(filename)) {\r\n                if (!fileCache[filename] || !isProduction) {\r\n                    // do not execute loader on the same file twice\r\n                    // this is an overcome for a bug with ExtractTextPlugin, for isProduction === true\r\n                    // when @imported files may be processed mutiple times\r\n                    fileCache[filename] = new Promise((resolve, reject) =>\r\n                        this.loadModule(filename, (err, source) =>\r\n                            err ? reject(err) : resolve(this.exec(source, rootPath))\r\n                        )\r\n                    );\r\n                }\r\n                return fileCache[filename];\r\n            }\r\n            return defaultLoad(filename, importOptions);\r\n        }\r\n    )(require('postcss-import/lib/load-content'))\r\n})\r\n```. @evilebottnawi I've solved that problem by resolving all the imports and other urls before `sass-loader` runs. It works for my needs, but it may not cover all the needs that may occure.\r\n\r\nThe best possible solution is, when all imports and urls will be processed through webpack loading mechanism. This will enable all the power webpack provides and allow to use loader-chains that generate css/urls at the end.. ",
    "lourd": "I'm late to the party, but also interested in trying to do this. Is there no way to currently do this?\r\n\r\nI'm trying to make a loader that takes an object exported from a javascript file and turn it into a string of Sass variables\r\n\r\n```js\r\n// colors.js\r\nmodule.exports = {\r\n  aquamarine: '#62D9B5',\r\n  turquoise: '#2EB6C9',\r\n  blastoise: '#3B88CD',\r\n}\r\n```\r\n\r\n```scss\r\n// _colors.scss\r\n@import '!sassify-loader!./colors.js'\r\n```\r\n\r\n```scss\r\n// foo.scss\r\n@import './colors'\r\n\r\n.foo {\r\n  color: $blastoise;\r\n}\r\n```\r\n\r\nThe loader is pretty simple:\r\n\r\n```js\r\n// sassify-loader\r\nfunction sassify(obj, { prefix = '' } = {}) {\r\n  return Object.entries(obj).reduce((str, [key, value]) => {\r\n    return `${str}$${prefix}${key}: ${value};\\n`\r\n  }, '')\r\n}\r\n\r\nmodule.exports = function loader(content) {\r\n  this.cacheable()\r\n  const options = Object.assign({ prefix: '' }, loaderUtils.getOptions(this))\r\n  const obj = this.exec(content, this.resourcePath)\r\n  const res = sassify(obj, options)\r\n  console.log(res)\r\n  return res\r\n}\r\n```\r\n\r\nI'm currently getting this error: `File to import not found or unreadable: !sassify-loader!./colors.js.`, and it doesn't look like the loader function is ever being run.\r\n\r\nIf I do the import in a JS file, like \r\n\r\n```js\r\nimport colors from '!sassify-loader!./colors.js'\r\n```\r\n\r\nThe loader runs, I see the printout of `console.log(res)`, but then the build fails with `Module parse failed... Unexpected character '#'... You may need an appropriate loader to handle this file type.`, which is probably because the file is just a string, not a JS file\r\n\r\nIf I alter the loader to be ``return `module.exports = ${JSON.stringify(res)}` ``, then I can import the file as a string into JS without a problem, but still get the same error when `@import`ing in Sass.. From my understanding so far, it looks like the importer would have to detect if inline loaders are being used, have the specified loaders process the file, then give the result back to the `node-sass` [importer `done` callback](https://github.com/sass/node-sass#importer--v200---experimental) as `{ contents: result }`.. I'm late to the party, but also interested in trying to do this. Is there no way to currently do this?\r\n\r\nI'm trying to make a loader that takes an object exported from a javascript file and turn it into a string of Sass variables\r\n\r\n```js\r\n// colors.js\r\nmodule.exports = {\r\n  aquamarine: '#62D9B5',\r\n  turquoise: '#2EB6C9',\r\n  blastoise: '#3B88CD',\r\n}\r\n```\r\n\r\n```scss\r\n// _colors.scss\r\n@import '!sassify-loader!./colors.js'\r\n```\r\n\r\n```scss\r\n// foo.scss\r\n@import './colors'\r\n\r\n.foo {\r\n  color: $blastoise;\r\n}\r\n```\r\n\r\nThe loader is pretty simple:\r\n\r\n```js\r\n// sassify-loader\r\nfunction sassify(obj, { prefix = '' } = {}) {\r\n  return Object.entries(obj).reduce((str, [key, value]) => {\r\n    return `${str}$${prefix}${key}: ${value};\\n`\r\n  }, '')\r\n}\r\n\r\nmodule.exports = function loader(content) {\r\n  this.cacheable()\r\n  const options = Object.assign({ prefix: '' }, loaderUtils.getOptions(this))\r\n  const obj = this.exec(content, this.resourcePath)\r\n  const res = sassify(obj, options)\r\n  console.log(res)\r\n  return res\r\n}\r\n```\r\n\r\nI'm currently getting this error: `File to import not found or unreadable: !sassify-loader!./colors.js.`, and it doesn't look like the loader function is ever being run.\r\n\r\nIf I do the import in a JS file, like \r\n\r\n```js\r\nimport colors from '!sassify-loader!./colors.js'\r\n```\r\n\r\nThe loader runs, I see the printout of `console.log(res)`, but then the build fails with `Module parse failed... Unexpected character '#'... You may need an appropriate loader to handle this file type.`, which is probably because the file is just a string, not a JS file\r\n\r\nIf I alter the loader to be ``return `module.exports = ${JSON.stringify(res)}` ``, then I can import the file as a string into JS without a problem, but still get the same error when `@import`ing in Sass.. From my understanding so far, it looks like the importer would have to detect if inline loaders are being used, have the specified loaders process the file, then give the result back to the `node-sass` [importer `done` callback](https://github.com/sass/node-sass#importer--v200---experimental) as `{ contents: result }`.. ",
    "evilebottnawi": "@IngwiePhoenix @SleepWalker @lourd The problem is already solved? Sorry for the long time we don't answer :smile: . @SleepWalker `css-loader` account all `url`, Can your describe or provide repo where not happening?. Apparently there is no for this universal and good solution. If someone has an idea how we can to implementing this, i will be glad to see this here https://github.com/webpack-contrib/sass-loader/issues/296.. @rw3iss original `node-sass` works absolutely identical, to avoid double content use `minificator`. @bensampaio @adjavaherian Is there a problem so far?. @bensampaio where your can have `process.env.UV_THREADPOOL_SIZE` and why `100`? :smile:  . @adjavaherian now `v6.0.3` `sass-loader` :smile: . Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. Duplicate https://github.com/webpack-contrib/sass-loader/issues/410, If somebody don't agree please create a separate issue. Thanks for helping `sass-loader` doing better :+1: . No activity longer than 90 days. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @IngwiePhoenix thanks for interesting project, but it is not issue, use `reddit`, `medium`, `your blog` :smile:  or other platform for promotion this project :+1: . /cc @ChrisCinelli @DDaems friendly ping. Closing due to inactivity. Please test with latest `sass-loader` version and feel free to reopen if still regressions.\r\n\r\nIt will be great if someone shows use case for this. . All works good use above test repo (https://github.com/blogfoster/webpack-sass-loader-issue). Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. Duplicate https://github.com/webpack-contrib/sass-loader/issues/296. \r\n\r\nClosing this out, please feel free to reopen if your think what issue don't related to issue above. Thanks!. @Cammisuli @jameslnewell The problem still exists?. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. @SeeThruHead friendly ping, problems now exists?. Fell free to reopen issue if your problem not solved.. @thathurtabit yep, your should import `variables/mixin/etc staff` in each module, because it is module. To make it easier, you can create `shared.scss` (with variales, mixins, placeholders and etc) and include only one `shared.scss` file.. Two ways:\r\n1. Use common `variables.scss` file and include in every required file.\r\n2. Use https://github.com/shakacode/sass-resources-loader\r\n\r\nClose. If these solutions do not suit your, please write here about this and explain why.. @wzup use `options` property in loader. @cwagner22 can your create minimal reproducible test repo? Seems something is wrong in `style-loader` (or in webpack config)\r\n. /cc @donaldallen @cwagner22 friendly ping. I just tested this feature, it works fine. Closing due to inactivity. Please test with latest version and have correctly configuration. Thanks!. /cc @jhnns To be honest, I do not even represent a better solution than own `importer` for these projects, but maybe your have idea about this. Or we can just add example of such simple `importer` to `README`.. Seems duplicate https://github.com/webpack-contrib/sass-loader/issues/466. Feel free to reopen if it is different problem. Fast solution as said jhnns https://github.com/webpack-contrib/sass-loader/issues/227#issuecomment-228594718. @mikeifomin is problem actual?. Please update `sass-loader` to latest version :1st_place_medal: \r\n\r\nMore 90 days inactive. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. Yep, not related to `sass-loader`. Original issue https://github.com/webpack-contrib/css-loader/issues/233. If you still have error, please create minimal reproducible test repo and send comment in https://github.com/webpack-contrib/css-loader/issues/233.. @claudio4 all works good in your example.\r\n\r\nPlease update `webpack` to `v2` and `sass-loader` to latest version.\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. More than 90 days of inactivity. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @woohling @maximusnikulin @wayofspark @ggedde The problem still exists? If yes please create minimal reproducible test repo. @woohling just ping me when your do this :+1: . @ggedde can your create minimal reproducible test repo?. @ggedde seems bugs not in `sass-loader` or `css-loader` (it makes no difference what we work on `sass/scss/less` and etc.). I think `FF` have bug, just ping me when test repo was created.. @sandwich can your provide minimum reproducible test repo?. @aszmyd thanks, in near future i try to investigate this!. @aszmyd invalid configuration.\r\nFixed (invalid source map path):\r\n```\r\nconst webpack = require('webpack');\r\nconst path = require('path');\r\n\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\n\r\nmodule.exports = {\r\n    context: path.resolve('src'),\r\n    entry: './index.js',\r\n    output: {\r\n        filename: 'index.js',\r\n        path: __dirname + '/dist'\r\n    },\r\n    devtool: 'source-map',\r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: /\\.scss$/,\r\n                use: ExtractTextPlugin.extract({\r\n                    use: [{\r\n                        loader: 'css-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    }, {\r\n                        loader: 'sass-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                            // outputStyle: 'compressed'\r\n                        }\r\n                    }]\r\n                })\r\n            }\r\n        ]\r\n    },\r\n    plugins: [\r\n        new ExtractTextPlugin({\r\n            filename: 'styles/index.css'\r\n        }),\r\n        new HtmlWebpackPlugin(\r\n            {\r\n                filename: 'index.html',\r\n                template: './index.html'\r\n            })\r\n    ]\r\n};\r\n\r\n```\r\n\r\nIn your test repo i have correct position. Can your provide more information your node version, npm, OS and etc?. @sandwich your use `gulp` not `webpack`, how it is related to issue? Thanks!\r\n@woohling friendly ping\r\n@ggedde can your provide minimum reproducible test repo?. @aszmyd  reproduce, thanks, looking. Tomorrow I will write what was the problem. @sandwich @aszmyd thanks for helping!\r\n@sandwich I'm inclined to assume that you are right, since we do not make any modifications with the source maps in the `sass-loader`. @aszmyd doing at this moment :smile: . Btw seems bug did not located in `sass-loader` (https://github.com/sass/node-sass/issues/1206). @woohling @ggedde @folmert @wayofspark @sandwich @aszmyd won't fix in `sass-loader` :disappointed: \r\n\r\nInformation about why this happens: https://github.com/sass/libsass/issues/1747#issuecomment-159749530 and https://github.com/sass/libsass/issues/1747#issuecomment-160245200.\r\n\r\nIn short: browsers always show first selector in sequence nested selectors in source maps. I am closing this issue here because it is not related to `sass-loader` and we don't have time to fix this in other packages (`libsass`) which not related directly to `webpack`. Your can create new issue or write post in https://github.com/sass/libsass/issues/1747 if your think it is can be fixed. \r\n\r\nBtw your can click in dev tools on `property` to move in right position in source maps.. @aszmyd your can look loader code, we don't modify source map from `node-sass`.\r\nJust confirm:\r\n1. `console.log(result.map.toString())` in https://github.com/webpack-contrib/sass-loader/blob/master/lib/loader.js#L60\r\n2. Output:\r\n```shell\r\n{\r\n        \"version\": 3,\r\n        \"file\": \"stdin.css\",\r\n        \"sourceRoot\": \"/home/evilebottnawi/IdeaProjects/webpack-sass-loader-sourcemap-issue\",\r\n        \"sources\": [\r\n                \"stdin\"\r\n        ],\r\n        \"sourcesContent\": [\r\n                \"html {\\n    background: rgba(0, 0, 0, 0.7);\\n}\\n\\nbody {\\n\\n    h1 {\\n        color: white;\\n    }\\n}\\n\"\r\n        ],\r\n        \"names\": [],\r\n        \"mappings\": \"AAAA,AAAA,IAAI,CAAC;EACD,UAAU,EAAE,kBAAkB,GACjC;;AAED,AAEI,IAFA,CAEA,EAAE,CAAC;EACC,KAAK,EAAE,KAAK,GACf\"\r\n}\r\n```\r\n3. Open in chrome or mozilla http://127.0.0.1:8080/styles/index.css.map\r\n4. Output:\r\n```shell\r\n{\r\n\"version\":3,\r\n\"sources\":[\"webpack:///./src/src/index.scss\"],\r\n\"names\":[],\r\n\"mappings\":\"AAAA;EACI,+BAA8B,EACjC;;AAED;EAGQ,aAAY,EACf\",\r\n\"file\":\"styles/index.css\",\r\n\"sourcesContent\":[\"html {\\n    background: rgba(0, 0, 0, 0.7);\\n}\\n\\nbody {\\n\\n    h1 {\\n        color: white;\\n    }\\n}\\n\\n\\n\\n// WEBPACK FOOTER //\\n// ./src/src/index.scss\"],\"sourceRoot\":\"\"}\r\n```\r\nSeems something invalid in  `mappings`, but it is not `sass-loader`, let's investigate this, thanks!. @aszmyd something wrong in `css-loader` :disappointed: \r\n1. Add `style-loader` to `webpack.config.js`\r\n```shell\r\n loaders: [\r\n            {\r\n                test: /\\.scss$/,\r\n                /*use: ExtractTextPlugin.extract({*/\r\n                    use: [{\r\n                        loader: 'style-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    }, {\r\n                        loader: 'css-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    }, {\r\n                        loader: 'sass-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                            // outputStyle: 'compressed'\r\n                        }\r\n                    }]\r\n               /* })*/\r\n            }\r\n        ]\r\n```\r\n2. Open https://github.com/webpack-contrib/css-loader/blob/master/lib/loader.js#L114 (in `node_modules/css-loader`)\r\n3. Comment lines\r\n```shell\r\n/*map = result.map;\r\n\t\t\tif(map.sources) {\r\n\t\t\t\tmap.sources = map.sources.map(function(source) {\r\n\t\t\t\t\treturn source.split(\"!\").pop().replace(/\\\\/g, '/');\r\n\t\t\t\t}, this);\r\n\t\t\t\tmap.sourceRoot = \"\";\r\n\t\t\t}\r\n\t\t\tmap.file = map.file.split(\"!\").pop().replace(/\\\\/g, '/');*/\r\n```\r\n4. Run `npm run start` and your can see that source map is valid. Problem in `postcss`, which using in `css-loader`, I'll try to update `postcss` to the latest version in `css-loader` and see what happens. Closing issue, because not related, sorry, but i can't do anything here :disappointed: \r\nBased issue: https://github.com/postcss/postcss/issues/926\r\nWhy it is happens: https://github.com/postcss/postcss/issues/926#issuecomment-294062807\r\nWorkaround: implement own loader which correct this behavior (difficult).\r\n\r\nMaybe we can fix this in https://github.com/mozilla/source-map, your can create issue there with examples (prefer where only `node-sass` and `postcss` without `webpack` - easy debug), thanks!. @ggedde thanks!. @luchillo17 Thanks for using `webpack` and `sass-loader`!\r\nSome things:\r\n1. Don't use `'&includePaths[]' + helpers.root('node_modules')` and `@import '~primeui/themes/omega/theme';` after using `~` `webpack/sass-loader` already known `primeui` package locate in `resolve.modules` directories (for webpack 2) and `resolve.modulesDirectories` (for webpack 1).\r\n2. Also `to-string-loader` do not support `webpack 2` (We strongly recommend to update to `webpack` 2).\r\n3. Please update to latest `sass-loader` version.\r\n4. In provided screenshot seems bug not `sass-loader`, inside in `to-string-loader`.\r\n5. Also maybe your don't have `file-loader`.\r\n\r\nNot active more 90 days. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @adamchuan @thescientist13 seems using `relative` url, see docs about https://github.com/webpack-contrib/sass-loader#problems-with-url.\r\n\r\nNot active more 90 days. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @sgulseth please update to latest `sass-loader` version :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @lorenzomigliorero Is there a problem or has it been solved?. Please update to latest `webpack` version and `sass-loader` version :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @josepapaianni @rossthedevigner problems still exist? Can your create minimal test reproducible test repo?. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. @pedrotainha please provide your webpack config. @gpazo @tleunen @luchillo17 @leaves4j please update to latest `webpack` version :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. Close in favor https://github.com/webpack-contrib/sass-loader/issues/293 (duplicate) and already have PR https://github.com/webpack-contrib/sass-loader/pull/447.\r\n\r\nPlease feel free to reopen (or create new issue) if this doesn't related to your issue. Thanks!. @noyobo seems bug was in `css-loader` or maybe related to https://github.com/webpack-contrib/css-loader/pull/523/commits/3502cef3c7b1a55f370102c0c05601ab924ada73, but no in `sass-loader`, try to update to latest version `css/sass-loader`. PR with tests https://github.com/webpack-contrib/sass-loader/pull/446.\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. Postcss issue about source map: https://github.com/postcss/postcss-loader/issues/195. After disabling generation of source maps using my PR https://github.com/webpack-contrib/css-loader/issues/478 i get about `~1.5x-2x` speedup my build. @jvanderberg @silviogutierrez @chartinger Is there a problem or has it been solved? If not can your create minimal reproducible test repo?. @chartinger can you provide what do your done, it is help to other people :smile: . @jvanderberg `sass-loader` doesn't `minify` code, this do `css-loader` using `cssnano` or `postcss-loader` with `cssnano` plugin. We are trying to reduce the number of unanswered problems, since it is difficult where there is a bug and where not and where it related to the loader (here `sass-loader`) and where not. We should reproduce bug or close issue. If bug to happen again, we can reopen this issue or create a new with more relevant data. We just try to do `webpack` is better for you :smile: . @jvanderberg your use `webpack` `v2` and latest versions of loader?. @jvanderberg Closed the issue. if your will get this error after moving to `webpack` `v2` feel free to reopen. Thanks!. @thomasyimgit @AntiCZ without minimal test reproducible repo we don't help us. @jameslnewell can you provide minimal reproducible test repo?. Closing this out, please feel free to reopen or create new issue if this doesn't resolve your issue. Thanks!. @mrapogee can your provide minimal reproducible repo? And why use `sass` and `css-modules` together (maybe best exclude sass and use `postcss` plugin or `cssnext` for some cool things which exist in `sass`?). Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. @anchann friendly ping, what is status?. @hvalcourtSerdy The known problem, unfortunately it has not been solved for a long time. @kang-chen your config is invalid, why your use `sass-loader` for `css` extension? Your spent time on sass compilation for `css`, it is bad.. @niksy Is there a problem or has it been solved?. @deiga thanks for using `webpack` and `sass-loader`, but it is not issue, it is question, we don't have time to respond on all question here :sob: , please use `stackoverflow` for this, also you can read http://eng.localytics.com/faster-sass-builds-with-webpack/ about speedup build, also your can see on new loader https://github.com/webpack-contrib/cache-loader.\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @DaniGithub seems invalid `scss` (similar https://www.google.ru/search?q=expected+1+selector+or+at-rule&oq=expected+1+selector+or+at-rule&aqs=chrome..69i57j0l5.476j0j7&sourceid=chrome&ie=UTF-8), need minimal reproducible test repo :smile: . Closing due to inactivity. Please test with latest version (also test your sass style sheets in https://www.sassmeister.com/, maybe it is related to `node-sass/libsass`) and feel free to reopen if still regressions. Thanks!. /cc @jhnns . @Nexxado @Grace951 @lxalln can your provide minimal reproducible test repo (maybe related to `node-sass` or other package which generate source maps)? We need an example this `scss` file. @Nexxado great! :+1: \r\n\r\nClosing this out, please feel free to create new issue if the error will happen again. Thanks!. @markbrown4 can we close this issue? We have stable version `webpack@2` :+1: and `sass-loader` now support only `webpack@2` version https://github.com/webpack-contrib/sass-loader/blob/master/package.json#L36. @michael-ciniawsky what do you think about `docs/recipes` directory as in gulp https://github.com/gulpjs/gulp/tree/master/docs/recipes, maybe it is not bad idea?. @borela why just don't use `test: /\\.(mscss|scss)$/` and `test: /\\.(msass|sass)$/,`?. @borela what about add this extensions to `resolve.extensions` webpack option?. @borela If it does not help, just create minimal test repo and describer in readme what logic your can want. it is allow to helping :smile: . @modosc for `import` from `modules` please read https://github.com/webpack-contrib/sass-loader#imports\r\n\r\nMore 90 days inactive (no provided test repo :disappointed: ). Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @sharlayoub example https://github.com/ctrine/webpack-settings/blob/master/packages/shared/src/rules/sass-module.js how use `.module.scss`. Closing due to inactivity. Feel free to reopen if example above don't solve your problems. Thanks!. Confirmed, it is related to https://github.com/sass/libsass/issues/2312, need fix in `node-sass`. Close here, not related to `sass-loader`, we need to search `C++` superman and fix it in `libsass`. @hiroshishu @jrwebdev Is there a problem or has it been solved? If not can your create minimal reproducible test repo?. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. @gkhno Is there a problem or has it been solved? If problem not solved please create minimal reproducible test repo, thanks!. Fell free to reopen issue if your problem not solved.. @karptonite Can your update `webpack`, `sass-loader` and other related packages to `webpack` to latest version and try again. If the error persists, report this here :+1:  . @karptonite let's do it :+1: thanks for repo. @karptonite bug in `rework` in `resolve-url-loader` (parser). Seems `rework` is outdate today and best is use `postcss` for this purpose.\r\n\r\nMinimal code to reproduce:\r\n```scss\r\n@import \"~bootstrap/scss/variables\";\r\n@import \"~bootstrap/scss/mixins\";\r\n@import \"~bootstrap/scss/navbar\";\r\n\r\n.game-header-image {\r\n\t@include media-breakpoint-down(sm) {\r\n\t\tcontent: '';\r\n\t}\r\n}\r\n```\r\n\r\nSimple: `rework` don't add `}` to some block (`declaration block`).\r\n\r\nI created issue in `resolve-url-loader` and close issue here, because this issue not related to `sass-loader`.\r\n\r\nRelated issue: https://github.com/bholloway/resolve-url-loader/issues/56.\r\n\r\nThanks for helping to do `webpack` better!. @ramakrishnamundru thanks for issue, but `sass-loader` don't handle external resources, seems bug was https://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L51. Is there a problem or has it been solved? If not please create minimal reproducible test repo. @brunoravanhani seems your have wrong `sass` syntax, can your provide `sass` example file?. @brunoravanhani As I understand the problem is no more? Can we close this issue? . @halt-hammerzeit @matthieuh seems your have old `css-loader` (with bugs), just update to latest and try again. If problems still exist please report about this here (be good with minimal reproducible test repo). Thanks!. Fell free to reopen issue if your problem not solved.. @MrEfrem can your provide minimal reproducible test repo?. @LeG3nDz what is status problems?. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions, also seems your have invalid url, please read https://github.com/webpack-contrib/sass-loader#problems-with-url about how it solve. Thanks!. PR welcome :+1: . @xXanth0s can you create minimal reproduce test repo? it is allow to resolve issue more faster :smile: . @wsfuller @xXanth0s  thanks for answer and using `webpack` and `sass-loader` :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @zabojad Is there a problem or has it been solved? If not can your create minimal reproducible test repo?. @zabojad friendly ping. @dovidweisz please update to `latest` `sass-loader` version. @dovidweisz can your provide config or best minimal reproducible test repo?. @dovidweisz config is very unreadable.\r\nAlso `build` and `start` is working good for me.\r\nDon't recommend use options as query argument. Please refactor your webpack config.\r\n\r\nAlso `var sassOptions = getLoaderConfig(this); console.log(sassOptions);` inside `sass-loader` output:\r\n```\r\nincludePaths: [ '/paht/to/todomvc-angular-4/src/scss']\r\n```\r\nWhich mean all options are respected inside `sass-loader`, your can have invalid `@import 'something'` in your styles.\r\n. Sorry but not related to `sass-loader`, also we have tests on `includePaths` option. Also you can notice below config is not right way, just use `options` property for each loader in your rules.. @zabojad \r\n```\r\nloaders: [ \"style-loader\", \"css-loader?sourceMap\", 'sass-loader?{\"sourceMap\":true,\"includePaths\":[\"app/styles\"]}' ],\r\n            }\r\n\t\t],\r\n```\r\nRefactor to\r\n```\r\n{\r\n  test: /\\.s[ac]ss$/,\r\n  use: [\r\n    {\r\n        loader: \"style-loader\",\r\n        options: {} // your can avoid `options` if your don't have these\r\n    },\r\n    {\r\n        loader: \"css-loader\",\r\n        options: {} // your can avoid `options` if your don't have these\r\n    },\r\n    {\r\n        // Your also can avoid this loader if your don't need\r\n        loader: \"postcss-loader\",\r\n        options: {} // your can avoid `options` if your don't have these\r\n    },\r\n    {\r\n        loader: \"sass-loader\",\r\n        options: {} // your can avoid `options` if your don't have these\r\n    }\r\n  ]\r\n}. @dovidweisz already testing, just wait. @dovidweisz yep, I just wanted to write about this, just avoid to use `LoaderOptionsPlugin`, they still buggy and incompatibility with many thing.. @katiasmet please create new issue for this, don't write your problem(s) inside other problem(s), thanks!. @wsfuller in theory should work `['css-loader', 'postcss-loader', 'resolve-url-loader', 'sass-loader']`, if your provide minimal reproducible repo it give an opportunity to answer this question accurately (maybe something should be docs to avoid this issue). Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions.. @wsfuller Not entirely true, with this logic we must put this information in each `loader`, it is overloading docs, more right place information about this in https://webpack.js.org/concepts/loaders/#loader-features (where you indicated). Btw thanks for using `webpack` :1st_place_medal: . @wsfuller Then you should create `migration-from-gulp-and-grunt.md` and move this docs in `webpack-docs`, not here. @wsfuller your can do PR and if docs will be good we can merge this :+1: . @maffelbaffel About `-p` \r\n```shell\r\n  -p           shortcut for --optimize-minimize --define\r\n               process.env.NODE_ENV=\"production\"                       [boolean]\r\n```\r\nSeems your have `css-loader` and other `postcss-plugin` for minification css (`-p` enable their) and one of them does not work correctly. Can you provide minimal reproducible test repo?. Using only `--optimize-minimize` \u0441auses this problem, I investigate this. Problem in `node-sass/libsass`, just try to setup `outputStyle` to `compressed`.\r\n\r\nhttps://gist.github.com/evilebottnawi/c56515c6b4ef5238a714afaba9d626c7. @michael-ciniawsky I also think so, but the problem should be reported in any case. @michael-ciniawsky One good question:\r\n`minimize` === `compressed` or not. @michael-ciniawsky \r\n\r\n> :compressed\r\n\r\n> Compressed style takes up the minimum amount of space possible, having no whitespace except that necessary to separate selectors and a newline at the end of the file. It also includes some other minor compressions, such as choosing the smallest representation for colors. It\u2019s not meant to be human-readable.. @michael-ciniawsky seems yes. @michael-ciniawsky yep, `cssnano` handle colors, but maybe some people don't use `cssnano` and use only `compressed` style. @michael-ciniawsky yep, they can setup `outputStyle` directly using loader `options`.. Thanks all who helped clarify this problem. Close here because not related to `sass-loader`.. @rhys-vdw what status is now? It is worth waiting for pr or not?. @rhys-vdw great! btw i have same module for extract variables, just for information https://github.com/itgalaxy/get-sass-vars-sync. @rhys-vdw your can rewrite on async, it is repo for my internal use, feel free to rewrite or we can write common repo based on my work :smile: . @nsams friendly ping, what is status?. @gkohen your can use https://github.com/sass/node-sass#functions--v300---experimental as option in `loader`. Thanks for using `webpack` and `sass-loader` :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @vanesyan In your example (`https://github.com/vanesyan/webpack-npm-scope-css-import-issue`), `\"~@foo/bar.scss\"` don't exists use `\"~@foo/bar/index\"`. If your want to support `main` field in `package.json` please create separately issue.. @vanesyan `webpack` by default `support` `main` field in `package.json`.. @vanesyan your right bug in this line https://github.com/webpack-contrib/sass-loader/blob/master/lib/importsToResolve.js#L33 for `@import ~@foo/bar` it is false, but should be true. @vanesyan I'll try to find the time to fix it today, but first I need to scrape the issues not related to `sass-loader` :tired_face: . @asolopovas wip. @asolopovas hm, works fine for me, can your explain more information? What`browser` your are use?If your can create screenshots this bug?. @asolopovas oh really, tomorrow try to found solution \ud83d\udc4d . i hate `windows`, i spend about 4 hours just to build start to work :sob: . @asolopovas i don't use `mac` :smile: . Confirmed, start to searching solution. Seems related to https://github.com/mozilla/source-map/issues/91. Not related to `style-loader`, feel free to reopen if after merge https://github.com/webpack-contrib/css-loader/pull/532 error still exists. @rascio your can use https://github.com/sass/node-sass#importer--v200---experimental for this. THis is not related to `sass-loader`, some libraries add variable to define here search dependencies `package` or `assets` (your can create issue about this and do pr in `patternfly`). Sorry but seems won't fix in `sass-loader`.. @rascio seems duplicate https://github.com/webpack-contrib/sass-loader/issues/227.\r\n\r\nClosing this out, please feel free to reopen if this doesn't related to your issue. Thanks!. @BHouwens seems your use `postcss` after `sass-loader` with `postcss-scss` or have invalid config, can you provide your config? See similar issue https://github.com/webpack-contrib/css-loader/issues/295. @BHouwens use right syntax for `webpack` 2\r\n```shell\r\nuse: [\r\n       {\r\n           loader: 'css-loader',\r\n           options: { modules: true, importLoaders: 1, localIdentName: \"[name]__[local]___[hash:base64:5]\" }\r\n       },\r\n       'postcss-loader',\r\n       {\r\n              loader: 'sass-loader',\r\n       }\r\n ]\r\n```. @BHouwens good, I will bring this issue to the discussion. @r1005410078 i think it is not related to `sass-loader`, just `sass` syntax error, if your think your code should be works, but you still get an error maybe best create issue in `node-sass` (https://github.com/sass/node-sass) with example your code. @mooror Interesting! Why don't use `devtool: `source-map`` always (poor performance)? Also your can to try https://github.com/sass/node-sass#sourcecomments, https://github.com/sass/node-sass#sourcecomments and other option related to `source maps`. Also some notes about options in source code https://github.com/webpack-contrib/sass-loader/blob/master/lib/normalizeOptions.js#L34. \r\n\r\nIf nothing to help with this or something does not work properly let us know about it :+1: . @mooror friendly ping. @vifird Where did you find `relativeUrls` option for `sass-loader`?. /cc @vifird friendly ping. @vifird `sass-loader` build on top `node-sass` (see all options https://github.com/sass/node-sass#options), also original `sass` don't have this option too. Seems you are confused with `less` (http://lesscss.org/usage/).\r\n\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!\r\n. @danieladonna all works fine, just variables, functions and mixins in https://github.com/zurb/foundation-sites/blob/develop/scss/foundation.scss, what do you want see after import?. @alexanderknapstein all right, first use include all variables, mixins and etc (`foundation-sites/scss/foundation.scss`) then you use included mixin, just see examples http://foundation.zurb.com/building-blocks/\r\n\r\n/cc @michael-ciniawsky we can close this issue, because it is not related to `sass-loader`. @throoze A few wrong things :smile:\r\nWrong `sass` syntax.\r\n```sass\r\n$small: 480px\r\n$medium: 786px\r\n$large: 1140px\r\n\r\n\r\n@media only screen and (min-width: $small)\r\n    font-size: 14px; // Should don't be empty\r\n@media only screen and (min-width: $medium)\r\n    .some-selector\r\n        border: 1px solid #dedede\r\n        border-radius: 6px\r\n        bottom: 10px\r\n        box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.2)\r\n        height: 500px\r\n        position: absolute\r\n        right: 10px\r\n        width: 320px\r\n```\r\nSome note about indented syntax http://sass-lang.com/documentation/file.INDENTED_SYNTAX.html.\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @jethrolarson 'dart-sass' is cool project, but there are a lot of bugs with `sass` original compatibility :sob: . @lukepolo seems more related to `node-sass`, we should have `dart-sass` port on nodejs. Now we don't have this port and it is impossible.. @graingert can you explain why `dart-sass` is better (or not) than `node-sass`? Faster, better compatibility with orginal sass implementation or other feature. But main problem is `dart-sass` don't support custom importer, without this feature, it is impossibly to implement support `dart-sass` in `sass-loader`.. @gitsupersmecher can your provide use case for this and why your need this?. @gitsupersmecher what concretely `sass-loader` should logs, give example :smile: . Another loader don't have logs, seems it is not required.\r\n\r\nAlso we are gradually integrating validation options (example https://github.com/postcss/postcss-loader/blob/master/lib/options.json).. @michael-ciniawsky can you help with integrate validation option as in https://github.com/webpack-contrib/extract-text-webpack-plugin/tree/master/schema ? :smile: . Close. No feedback. Feel free to reopen and explain why we need log?. /cc @michael-ciniawsky friendly ping, let's finish it :smile: . @aprilandjan Thanks for feedback. Duplicate: https://github.com/webpack-contrib/sass-loader/issues/410\r\n\r\nClosing this out, please feel free to reopen if your think what your issue doesn't related above issue. Thanks!. @zhengxkq do your use `postcss` plugins like `cssnano`? also provide you `webpack` config. @dudesweet100 try `var myCss = require('css-loader!sass-loader!./index.scss');console.log(myCss)` for exporting styles\r\nor `require('style-loader!css-loader!sass-loader!./index.scss')` for including styles in dom immediately.. @vanesyan thanks :+1: . /cc @jhnns friendly ping. @jarindr `sass-loader` don't resolve `:global` and `:local` it is do `css-loader`. https://github.com/webpack-contrib/css-loader. @jarindr please create minimal reproducable test repo, we will not help you if you do not provide information, good issue - issue with detailed information, not empty :+1: . @jarindr and seems sass syntax don't allow using `:global` and `:local`. @jarindr seems works good in https://www.sassmeister.com/ and support. weird, all `sass` files should be `indentedSyntax` set to `true` https://github.com/webpack-contrib/sass-loader/blob/master/lib/normalizeOptions.js#L61, seems in your case `indentedSyntax` is `false`, try to set `indentedSyntax` in option. @jarindr Great! :+1: . @michael-ciniawsky just typo, `node-sass` -> `sass-loader`. `node-sass` is now only `4.5.2` :smile: . @DBosley close this issue, seems duplicate https://github.com/webpack-contrib/sass-loader/issues/425, also WIP.. @strarsis i am not familiar with `eyeglass`, best answer on this question is try to integrate this and if your got error put stack trace here. Btw, for question use `stackoverflow`, thanks!. @tangshuang using separate entries. Create `vendor` entry and include all vendor sass and create `app` entry and include all app sass. In front-end load first `vendor` entry then `app` entry.. @tangshuang your can create entry with `bootstrap` and place here only `sass/scss` files. After include this file before other css files. If you want real modularity your should use `css-modules`. Please study https://github.com/css-modules/postcss-modules. @tangshuang also your can do this automatically using `CommonsChunkPlugin` https://webpack.js.org/plugins/commons-chunk-plugin/ https://webpack.github.io/docs/stylesheets.html#styles-in-commons-chunk. Closing due to inactivity, code splitting not related to `sass-loader`. Please read for webpack `v2` https://webpack.js.org/guides/code-splitting-css/. @lukaswelinder please provide more information (better minimum reproducible test repo) about what do you want and what do you get, thanks!. @luchillo17 yep, latest `node-sass` and `libsass` not supporting `>>>`. \r\n\r\nUsing for testing - https://www.sassmeister.com/ \r\nInput:\r\n```\r\nul >>> li {\r\n  background: lightblue;\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\nul > > > li {\r\n  background: lightblue;\r\n}\r\n```\r\n\r\nAlso original `sass` (written on `ruby`) also not supporting `>>>`. Sad, but we can not do anything. Your can create issue https://github.com/sass/node-sass/issues about this.. @alxtz I advise using first point from https://github.com/webpack-contrib/sass-loader#problems-with-url. `sass-loader` don't handle `url` and seems it is related to `resolve-url-loader` (he using `rework`, it is bad because `rework` is deprecated). Closed, not related to `sass-loader`, feel free to reopen if your think problem in `sass-loader`.. @wzup yep, it is valid `css` and it should be valid as `scss` (working on original sass compiler v4).\r\nProblems in `libsass` (https://github.com/sass/libsass). We can not do anything here. Please create issue in `libsass`.\r\n\r\nhttps://www.sassmeister.com/\r\nInput:\r\n```\r\na {\r\n    font: normal normal 400 16px/calc(16px * 1.4) Roboto;\r\n}\r\n```\r\nOutput:\r\n```\r\n16px/calc isn't a valid CSS value. on line 2 at column 29\r\n```\r\n\r\nThanks for helping us to do webpack better!. Fixed: https://github.com/sass/libsass/pull/2392, let's  wait new version `node-sass` with new version `libsass`. Thanks!. @katzz0 no, seems your configuration invalid, can your show configuration?. @katzz0 seems `resolve-url-loader` not works as expected. I don't recommendation usage this loader.\r\nWhy?\r\n1. He seems abandoned.\r\n2. He use `rework` (abandoned).. @katzz0 At the time of writing it was not abandoned, now there is no alternative, so he stayed in README. I don't use `resolve-url-loader` loader in my projects and all works fine.. @idangozlan seems your use old version `sass-loader`, try to use `rm -r node_modules`, then `npm cache clear` (`yarn cache clean`) and `npm i` (`yarn install`). @idangozlan https://david-dm.org/webpack-contrib/sass-loader our deps status. It looks like you're using something other together `sass-loader`. Close. Feel free to reopen if your again get this warning. . @gizm0bill thanks in near future i investigate this. @gizm0bill using `@import '~@styles/main';` mean what `sass-loader` try to search file by `node_modules/@style/main` path. Alias should be working only if your use `@import '~@styles'`.\r\n\r\n`@import '~@styles/main';` - importing file from package.\r\n`@import '~@styles';` - importing module (respect browser field in `package.json` and etc).. @gizm0bill seems alias don't work now for all packages https://github.com/webpack-contrib/sass-loader/issues/410, it is related to this problem, right?. @solidevolution aliases works only with modules: `@import \"~something\"`, if your want own logic for loading please use custom `importer` (https://github.com/sass/node-sass#importer--v200---experimental), thanks!. @solidevolution `sass-loader` build on `importer` function, without `importer` `sass-loader` doesn't works, so it does not make sense not to support `experimental` `importer` function(s). No i don't have `postcss` solution, thanks!. @katiasmet \r\n```shell\r\n{\r\n  loader: \"sass-loader\",\r\n  options: {\r\n    includePaths: ['src/_scss']\r\n  }\r\n}\r\n```\r\nIf this don't help, please create minimum reproducible test repo, thanks!. @Guobacai can your show stack trace of error?. @Guobacai be good if your can create minimal test reproducible repo :+1: This will help us understand why it happens. @thescientist13 seems not related to `sass-loader`. Problems in `webpack/lib/Compilation.js:219:10`, maybe something wrong with `ts-loader` loader?. @marekpw @Yizhachok @borela can your provide minimal reproducible test repo?. @borela @marekpw bad solution, using `includePaths` option reduces performance.. @borela seems it is regression bug after https://github.com/webpack-contrib/sass-loader/pull/450 or https://github.com/webpack-contrib/sass-loader/pull/447. @borela I will try to solve this problem today or tomorrow, thanks!. Seems problems in `node-sass` (they don't support scoped import https://github.com/sass/node-sass/issues/1596).\r\nBut it is possibly to solve throw imported, working on this.. /cc @michael-ciniawsky what do your think about problems? It's hard for me to imagine a solution for her, we can't add `~` in vendor sass styles :disappointed: . @michael-ciniawsky yep, this is known, the question is whether we at the level `sass-loader` fix it or not. @michael-ciniawsky no new loader or something other stuff (options), just change logic in sass-loader which allow loading scoped importing in vendor sass/scss styles. @ddobson workaround, but it is increase build time, no solution for this right now, but PR welcome. @mischkl old and known issue, solutions https://github.com/webpack-contrib/sass-loader/pull/479#issuecomment-314701628. @mischkl it is not hack, it is correct solution.  I agree we need search build-in solution for this, but it is not easy. Any ideas? PR welcome :+1: . @mischkl it is breaking changes and can lead to a problem with performance and incompatibility, before think about this we should look how working `less/stylus/etc` loader with this problem (if they working with scoped packages). If I'm not mistaken `node-sass` don't work with scoped packages by default.\r\n. @mischkl maybe this solution is right, it is really not easy to fix and i don't have ideas about this, but i am glad to hear any opinion and solution. Maybe we can fix this in `node-sass` and all packages which use this can handle scoped packages. @mischkl in theory any `@package/style` import which located in `node_modules` files should be resolve `node-sass` from `node_modules` directory, on the other hand `node-sass` just port `sass` on `nodejs` platform and don't care about this. I don't known who should this do :disappointed: . @heikkimu `sass-loader` does't not have `config` option, see `options` in `README.md`.\r\nExample\r\n```js\r\n{\r\n    loader: \"sass-loader\",\r\n    options: {\r\n        includePaths: [\"absolute/path/a\", \"absolute/path/b\"]\r\n    }\r\n}\r\n```. @heikkimu Also your question on `stackoverflow` related to `webpack` v1, please update to `webpack` v1. @heikkimu current version of `sass-loader` doesn't support webpack v1 (https://github.com/webpack-contrib/sass-loader/blob/master/package.json#L36), your can update to v2 ( **Recomended** https://webpack.js.org/guides/migrating/) or use old version `sass-loader` (https://github.com/webpack-contrib/sass-loader/tree/v4.1.1, can contains errors and unexpected behavior).. @silverbackdan please provide more detailed webpack configuration. @silverbackdan feel free to reopen if issue will be related to `sass-loader`. @michael-ciniawsky can we merge and release patch, no access :smile: . This will done be in https://github.com/webpack-contrib/sass-loader/issues/429\r\nAll works fine, your got just a warning for an unmet peerDependency, it's not a critical.\r\n. @SirCameron `sass-loader` don't parse url. @SirCameron handling `url` do `css-loader` https://github.com/webpack-contrib/css-loader#options. @SirCameron maybe your should setup `file-loader` https://github.com/webpack-contrib/file-loader using `Filename template placeholders` where specify where your want save files.. @SirCameron Can i close issue here? Feel free to reopen if it is not solve your problem. Thanks!. @d3viant0ne Can we release path version today, after merge this?. @VaskaDogana can your provide more information what actually and what expected, better will be create minimal reproducible test repo. Closing due to inactivity. Thanks!. @SirCameron please, provide your minimal reproducible test repo. @SirCameron `sass-loader` don't related to Atom and Atom plugin. Can your provide example where your have unexpected behavior?. @SirCameron just close. Someone can use the search and find it. Thanks!. @marcinant already updated https://github.com/webpack-contrib/sass-loader/blob/master/package.json#L57\r\n\r\nJust update to 6.0.6 version (https://github.com/webpack-contrib/sass-loader/blob/master/package.json#L3). @michael-ciniawsky more fix, than feature, webpack by default support aliases, need sombody who know wepback and sass to be sure that all good. @jhnns big bad problem with aliases is nonsupporting this inside `node_modules`, because we can't add `~` inside other libraries/frameworks. To be honest, I do not know how to solve this, in theory we can add option where developers will add own aliases, anywhere here https://github.com/webpack-contrib/sass-loader/blob/master/lib/importsToResolve.js#L16. Example:\r\n```shell\r\n{\r\n                loader: \"sass-loader\",\r\n                options: {\r\n                    includePaths: [\"absolute/path/a\", \"absolute/path/b\"],\r\n                    aliases: { /regex/: 'path/to/something' } // as in webpack\r\n                }\r\n            }\r\n```\r\nI agree this look strange, but we can explain in `README` why we use this solution. I can rewrite this here if we will accept this. Thanks!. /cc @jhnns friendly ping, what do your think about `options.alias`?. @mischkl Be great if your do PR, @jhnns now is very busy and only do review PR, i am not familiar with `eyeglass` and for me difficult understand what need to add\r\n . @yogeshgadge can your create minimal reproducible test repo? I am use font-awesome in my projects with sass-loader and all works fine. @yogeshgadge aliases not working now for `sass-loader`, PR fixes this https://github.com/webpack-contrib/sass-loader/pull/479. @yogeshgadge hm, should be work with modules, can your provide minimum test repo?. Duplicate https://github.com/webpack-contrib/sass-loader/issues/410. @yantakus your can use https://github.com/webpack-contrib/sass-loader#environment-variables to setup own variables. @yantakus your can add `@import \"app/styles/settings/_settings.scss\"` to each file where your need variables or use `sass variables directly in webpack config`. @yantakus seems there is no solution for this purpose, your can create own loader for this (`css-loader` -> `postcss-loader` -> `sass-loader` -> `inject-sass-variables-loader`), but recommendation way is including `variables.scss` in each file. \r\n\r\nWhy? Because each file is module and if your module contain some data (in your case it is variables) which contain in other module, your can import this module (your are doing this for `js` modules).\r\n\r\nAlso your can use other way: use https://github.com/niksy/get-sass-vars or https://github.com/itgalaxy/get-sass-vars-sync/ for reading variables in JSON format and use\r\n```\r\noptions: {\r\n    data: JSON.stringify(variables)\r\n}\r\n```. @baunegaard your can set `sourceMapRoot` to `<Project root>/Assets`. If your provide minimal test repo it is help to solve problem.. @baunegaard\r\n > With a minimal test repo do you mean just an empty repo with a webpack.config to reproduce. @baunegaard Did not understand what expected behavior? `webpack` always story source maps in `webpack://`. Your want change this? If yes, why?. @baunegaard thanks for clarify, try to found solution in near future. We can fix it change `result.map.sources = result.map.sources.map(path.normalize)` to `result.map.sources = result.map.sources.map((source) => path.normalize(path.resolve(source)));`, but I'm not completely sure, I'm still looking for a solution.\r\n\r\nBut it is should be work with relative path, seems problems not in `sass-loader`, we return correct `sources`:\r\n```shell\r\n[ 'css/bundles/bundle.scss', 'css/modules/module.scss' ]\r\n[ 'node_modules/bootstrap/dist/css/bootstrap.css' ]\r\n```. Using (here https://github.com/webpack-contrib/sass-loader/blob/master/lib/loader.js#L73): \r\n```js\r\nconsole.log(result.map.sourceRoot)\r\nconsole.log(result.map.sources)\r\n```\r\nOutput:\r\n```shell\r\n/home/evilebottnawi/IdeaProjects/sass-loader-sourcemap-test\r\n[ 'css/bundles/bundle.scss', 'css/modules/module.scss' ]\r\n/home/evilebottnawi/IdeaProjects/sass-loader-sourcemap-test\r\n[ 'node_modules/bootstrap/dist/css/bootstrap.css' ]\r\n```\r\n\r\nAll fine, seems issue related to `css-loader`, i will try to found what is wrong and why it is happens in `css-loader`. @baunegaard related to `css-loader`, because `from` for `postcss` set as `/css-loader!/path/to/css/bundles/bundle.scss` (https://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L198) and all sources interpreted (when `postcss` build source maps) as `relative` to this path, but in your case `module.css` not relative. Close here because not related to `sass-loader`, thanks all!. @serheyShmyg can your provide link on documentation about this, but need tests for this anyway\r\n. @serheyShmyg we use programmatic api, not CLI, your can just use `require('path/to/importer')` without changed `sass-loader` code.. @serheyShmyg what query string? Please provide full example (case), it is difficult to understand. @julmot thanks for issue, known limitation for `compressed` style (https://github.com/webpack-contrib/sass-loader/issues/416#issuecomment-311931867), Sorry, but we can't fix this.\r\n\r\nBut your can use this example (https://github.com/webpack-contrib/sass-loader/issues/416#issuecomment-311932206) if your want to using colors as part of selector.. @sshmyg please provide minimum reproducible test repo and more information about your steps which output this, thanks!. @sshmyg friendly ping. @sshmyg with minimum test repo we can investigate this. @narthollis only `@import '~your_module'` should be works with `NormalModuleReplacementPlugin`, `@import`'s without `~` don't interpreted as module so `NormalModuleReplacementPlugin` doesn't works as expected (known limitation). But your can do this using own `importer` (https://github.com/sass/node-sass#importer--v200---experimental), it should be very easy implement. This solution suits you?. @henrahmagix tomorrow i investigate this. Thanks for issue!. @henrahmagix thanks for issue, seems problem not in `sass-loader`, because using `require('fs').writeFileSync('test.css', result.css.toString())` before https://github.com/webpack-contrib/sass-loader/blob/master/lib/loader.js#L79 , output:\r\n```css\r\n/* --- Copied from Mavo _defs.scss --- */\r\n/* Without inline-svg function */\r\n.rubbish-bin-copied-without-inline-svg-function::before, .rubbish-bin-copied-with-copied-inline-svg-function::before {\r\n  content: inline-svg('<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 100 125\" fill=\"rgb(200,0,0)\">\\a             <path d=\"M65,15.437V8c0-3.86-3.141-7-7-7H42c-3.86,0-7,3.14-7,7v7.437C14.017,16.816,14,21,14,21v10h72V21 C86,21,85.982,16.816,65,15.437z M43,9h14v6.086C54.828,15.032,52.51,15,50,15c-2.51,0-4.828,0.032-7,0.086V9z\"/>\\a             <path d=\"M19,37l6,62h50l6-62H19z M35.167,88.995C35.11,88.998,35.053,89,34.998,89c-1.581,0-2.904-1.236-2.993-2.834l-2-36  c-0.092-1.654,1.175-3.07,2.829-3.162c1.663-0.089,3.07,1.175,3.162,2.829l2,36C38.087,87.488,36.821,88.903,35.167,88.995z M53,86\\a                      c0,1.657-1.343,3-3,3c-1.657,0-3-1.343-3-3V50c0-1.657,1.343-3,3-3c1.657,0,3,1.343,3,3V86z M67.995,86.166  C67.906,87.764,66.583,89,65.003,89c-0.057,0-0.112-0.002-0.169-0.005c-1.654-0.092-2.921-1.507-2.829-3.161l2-36\\a                      c0.093-1.655,1.533-2.906,3.161-2.829c1.654,0.092,2.921,1.508,2.829,3.162L67.995,86.166z\"/>\\a         </svg>');\r\n  width: 1em;\r\n  height: 1em; }\r\n\r\n/* With inline-svg function */\r\n.rubbish-bin-copied-without-inline-svg-function::before, .rubbish-bin-copied-with-copied-inline-svg-function::before {\r\n  content: url(\"data:image/svg+xml,url-encode('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 100 125\\\" fill=\\\"rgb(200,0,0)\\\">\\\\a             <path d=\\\"M65,15.437V8c0-3.86-3.141-7-7-7H42c-3.86,0-7,3.14-7,7v7.437C14.017,16.816,14,21,14,21v10h72V21 C86,21,85.982,16.816,65,15.437z M43,9h14v6.086C54.828,15.032,52.51,15,50,15c-2.51,0-4.828,0.032-7,0.086V9z\\\"/>\\\\a             <path d=\\\"M19,37l6,62h50l6-62H19z M35.167,88.995C35.11,88.998,35.053,89,34.998,89c-1.581,0-2.904-1.236-2.993-2.834l-2-36  c-0.092-1.654,1.175-3.07,2.829-3.162c1.663-0.089,3.07,1.175,3.162,2.829l2,36C38.087,87.488,36.821,88.903,35.167,88.995z M53,86\\\\a                      c0,1.657-1.343,3-3,3c-1.657,0-3-1.343-3-3V50c0-1.657,1.343-3,3-3c1.657,0,3,1.343,3,3V86z M67.995,86.166  C67.906,87.764,66.583,89,65.003,89c-0.057,0-0.112-0.002-0.169-0.005c-1.654-0.092-2.921-1.507-2.829-3.161l2-36\\\\a                      c0.093-1.655,1.533-2.906,3.161-2.829c1.654,0.092,2.921,1.508,2.829,3.162L67.995,86.166z\\\"/>\\\\a         </svg>')\");\r\n  width: 1em;\r\n  height: 1em; }\r\n\r\n/* --- Direct from Mavo --- */\r\n/* Imported via sass-loader `~` import resolver */\r\n.via-import-resolver::before, .via-node-modules-path::before {\r\n  content: url(\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w33.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20viewBox%3D%220%200%20100%20125%22%20fill%3D%22rgb%28200%2C0%2C0%29%22%3E\\a \t\t\t%3Cpath%20d%3D%22M65%2C15.437V8c0-3.86-3.141-7-7-7H42c-3.86%2C0-7%2C3.14-7%2C7v7.437C14.017%2C16.816%2C14%2C21%2C14%2C21v10h72V21%20C86%2C21%2C85.982%2C16.816%2C65%2C15.437z%20M43%2C9h14v6.086C54.828%2C15.032%2C52.51%2C15%2C50%2C15c-2.51%2C0-4.828%2C0.032-7%2C0.086V9z%22%2F%3E\\a \t\t\t%3Cpath%20d%3D%22M19%2C37l6%2C62h50l6-62H19z%20M35.167%2C88.995C35.11%2C88.998%2C35.053%2C89%2C34.998%2C89c-1.581%2C0-2.904-1.236-2.993-2.834l-2-36%20%20c-0.092-1.654%2C1.175-3.07%2C2.829-3.162c1.663-0.089%2C3.07%2C1.175%2C3.162%2C2.829l2%2C36C38.087%2C87.488%2C36.821%2C88.903%2C35.167%2C88.995z%20M53%2C86\\a \t\t\t\t\t%20c0%2C1.657-1.343%2C3-3%2C3c-1.657%2C0-3-1.343-3-3V50c0-1.657%2C1.343-3%2C3-3c1.657%2C0%2C3%2C1.343%2C3%2C3V86z%20M67.995%2C86.166%20%20C67.906%2C87.764%2C66.583%2C89%2C65.003%2C89c-0.057%2C0-0.112-0.002-0.169-0.005c-1.654-0.092-2.921-1.507-2.829-3.161l2-36\\a \t\t\t\t\t%20c0.093-1.655%2C1.533-2.906%2C3.161-2.829c1.654%2C0.092%2C2.921%2C1.508%2C2.829%2C3.162L67.995%2C86.166z%22%2F%3E\\a \t\t%3C%2Fsvg%3E\");\r\n  width: 1em;\r\n  height: 1em; }\r\n\r\n/* Imported directly via full node_modules path */\r\n.via-import-resolver::before, .via-node-modules-path::before {\r\n  content: url(\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w33.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20viewBox%3D%220%200%20100%20125%22%20fill%3D%22rgb%28200%2C0%2C0%29%22%3E\\a \t\t\t%3Cpath%20d%3D%22M65%2C15.437V8c0-3.86-3.141-7-7-7H42c-3.86%2C0-7%2C3.14-7%2C7v7.437C14.017%2C16.816%2C14%2C21%2C14%2C21v10h72V21%20C86%2C21%2C85.982%2C16.816%2C65%2C15.437z%20M43%2C9h14v6.086C54.828%2C15.032%2C52.51%2C15%2C50%2C15c-2.51%2C0-4.828%2C0.032-7%2C0.086V9z%22%2F%3E\\a \t\t\t%3Cpath%20d%3D%22M19%2C37l6%2C62h50l6-62H19z%20M35.167%2C88.995C35.11%2C88.998%2C35.053%2C89%2C34.998%2C89c-1.581%2C0-2.904-1.236-2.993-2.834l-2-36%20%20c-0.092-1.654%2C1.175-3.07%2C2.829-3.162c1.663-0.089%2C3.07%2C1.175%2C3.162%2C2.829l2%2C36C38.087%2C87.488%2C36.821%2C88.903%2C35.167%2C88.995z%20M53%2C86\\a \t\t\t\t\t%20c0%2C1.657-1.343%2C3-3%2C3c-1.657%2C0-3-1.343-3-3V50c0-1.657%2C1.343-3%2C3-3c1.657%2C0%2C3%2C1.343%2C3%2C3V86z%20M67.995%2C86.166%20%20C67.906%2C87.764%2C66.583%2C89%2C65.003%2C89c-0.057%2C0-0.112-0.002-0.169-0.005c-1.654-0.092-2.921-1.507-2.829-3.161l2-36\\a \t\t\t\t\t%20c0.093-1.655%2C1.533-2.906%2C3.161-2.829c1.654%2C0.092%2C2.921%2C1.508%2C2.829%2C3.162L67.995%2C86.166z%22%2F%3E\\a \t\t%3C%2Fsvg%3E\");\r\n  width: 1em;\r\n  height: 1em; }\r\n```\r\nIt is valid css and all work fine. Problem located in `css-loader`, i can try to found problem and fix her in `css-loader`.. @TimoRuetten thanks for issue, duplicate https://github.com/webpack-contrib/sass-loader/issues/211\r\nShort answer\r\n1. Use common variables.scss file and include in every required file.\r\n2. Use https://github.com/shakacode/sass-resources-loader\r\n3. Implement own loader for this purpose\r\n4. Use `data` option with multiple variables (module for variables https://github.com/itgalaxy/get-sass-vars-sync)\r\n5. https://github.com/Updater/node-sass-json-importer\r\n. @jhnns friendly ping. @catamphetamine thank for issue, `node-sass` doing this?. @catamphetamine very strange in my projects all work fine, investigate. 1. Fine\r\n```css\r\n@media (max-width: 720px) {\r\n  a {\r\n    color: red;\r\n  }\r\n}\r\n```\r\n2. Fine\r\n```css\r\n@media (max-width: 720px) {\r\n  @import \"nested\";\r\n}\r\n```\r\n**_nested.scss**\r\n```css\r\na {\r\n  color: yellow;\r\n}\r\n```\r\n3. Not fine (module empty `exports.push([module.i, \"\", \"\"]);`)\r\n```css\r\n@media (max-width: 720px) {\r\n  @import \"~react-responsive-ui/small-screen.css\";\r\n}\r\n```\r\nI continue the investigation. @catamphetamine don't use `.css` extension.\r\nWorks fine.\r\n```css\r\n@media all and (max-width: 720px) {\r\n  @import \"~react-responsive-ui/small-screen\";\r\n}\r\n```. @catamphetamine http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_import__import\r\n```\r\n@import \"foo.css\";\r\n@import \"foo\" screen;\r\n@import \"http://foo.com/bar\";\r\n@import url(foo);\r\n```\r\nto\r\n```\r\n@import \"foo.css\";\r\n@import \"foo\" screen;\r\n@import \"http://foo.com/bar\";\r\n@import url(foo);\r\n```. @jhnns What do you think about this:\r\nShould we `@import \"~react-responsive-ui/small-screen.css\";` don't touch and output in result:\r\n```css\r\n@import \"~react-responsive-ui/small-screen.css\";\r\n```\r\nOr we should throw error about not resolved? Because resolve `modules` (`~`) is out of scope `node-sass`.\r\nNow we output empty content on this structure, i think it is misleading.. @catamphetamine agree, but need @jhnns answer, btw thank you for issue.. @megamindbrian problem still exists?. @spiral2k you manually install `node-sass`, which part need upgrade?. @spiral2k we use `^4.0.0` which mean also `4.5.3`. @spiral2k it is `devDependencies` only for tests, you should add `node-sass` manually in your `package.json`.. @pedrotainha please create **minimum** reproducible test repo, thank you. @pedrotainha no thanks. Btw seems something wrong with `happypack` setup. @kirbyfan64 Duplicate, please read https://github.com/webpack-contrib/sass-loader/issues/435#issuecomment-333260284. @wzup seems node-sass doesn't support long color, need investigation, thank for issue. @wzup `libsass` version `3.5.0.beta.2` don't support #rrggbbaa hex color notation, you can try this in https://www.sassmeister.com/. Please create issue in `libsass` about this, Thank you!. @artvader can you provide scss scripts, seems problem in you scss script, not in sass-loader. @joshuaaron why you use `~` for images? Also `sass` don't have url rewriting (https://github.com/webpack-contrib/sass-loader#problems-with-url). \r\n\r\n`importLoaders: 2` => `importLoaders: 1`. @joshuaaron `importLoaders` means:\r\n```scss\r\n@import \"test.css\";\r\n// if you use `importLoaders: 2`: `scss-loader` => `postcss-loader` run on this import\r\n// if you use `importLoaders: 1`: `postcss-loader` run on this import\r\n\r\n// Other scss code\r\n```\r\nAbout url, use `full` relative url - `../../img/my-img.png` (relative `root.scss`). @johnjacobkenny problem still exists? Can you create minimum reproducible test repo?. @joshuaaron in near future i investigate you problems, sorry for delay, many work :disappointed: . @chacbumbum can you provide config or minimum reproducible test repo?. @chacbumbum can you try escape `\\:global`? I am not familiar with css modules . @jainshravan123 what do you mean?. @jainshravan123 update `sass-loader` to `latest` version, if it is not solve you problem, please create minimum reproducible test repo. @jhnns friendly ping. @crazyx13th can you provide example?. @gaponenkodv which version `node-sass` and `libsass` you use?. @gaponenkodv can you create minimum reproducible test repo?. @gaponenkodv seems problem in configuration, i am not familiar with angular sass configuration, better create issue there, sorry. @d3viant0ne done. @IngwiePhoenix @SleepWalker @lourd The problem is already solved? Sorry for the long time we don't answer :smile: . @SleepWalker `css-loader` account all `url`, Can your describe or provide repo where not happening?. Apparently there is no for this universal and good solution. If someone has an idea how we can to implementing this, i will be glad to see this here https://github.com/webpack-contrib/sass-loader/issues/296.. @rw3iss original `node-sass` works absolutely identical, to avoid double content use `minificator`. @bensampaio @adjavaherian Is there a problem so far?. @bensampaio where your can have `process.env.UV_THREADPOOL_SIZE` and why `100`? :smile:  . @adjavaherian now `v6.0.3` `sass-loader` :smile: . Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. Duplicate https://github.com/webpack-contrib/sass-loader/issues/410, If somebody don't agree please create a separate issue. Thanks for helping `sass-loader` doing better :+1: . No activity longer than 90 days. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @IngwiePhoenix thanks for interesting project, but it is not issue, use `reddit`, `medium`, `your blog` :smile:  or other platform for promotion this project :+1: . /cc @ChrisCinelli @DDaems friendly ping. Closing due to inactivity. Please test with latest `sass-loader` version and feel free to reopen if still regressions.\r\n\r\nIt will be great if someone shows use case for this. . All works good use above test repo (https://github.com/blogfoster/webpack-sass-loader-issue). Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. Duplicate https://github.com/webpack-contrib/sass-loader/issues/296. \r\n\r\nClosing this out, please feel free to reopen if your think what issue don't related to issue above. Thanks!. @Cammisuli @jameslnewell The problem still exists?. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. @SeeThruHead friendly ping, problems now exists?. Fell free to reopen issue if your problem not solved.. @thathurtabit yep, your should import `variables/mixin/etc staff` in each module, because it is module. To make it easier, you can create `shared.scss` (with variales, mixins, placeholders and etc) and include only one `shared.scss` file.. Two ways:\r\n1. Use common `variables.scss` file and include in every required file.\r\n2. Use https://github.com/shakacode/sass-resources-loader\r\n\r\nClose. If these solutions do not suit your, please write here about this and explain why.. @wzup use `options` property in loader. @cwagner22 can your create minimal reproducible test repo? Seems something is wrong in `style-loader` (or in webpack config)\r\n. /cc @donaldallen @cwagner22 friendly ping. I just tested this feature, it works fine. Closing due to inactivity. Please test with latest version and have correctly configuration. Thanks!. /cc @jhnns To be honest, I do not even represent a better solution than own `importer` for these projects, but maybe your have idea about this. Or we can just add example of such simple `importer` to `README`.. Seems duplicate https://github.com/webpack-contrib/sass-loader/issues/466. Feel free to reopen if it is different problem. Fast solution as said jhnns https://github.com/webpack-contrib/sass-loader/issues/227#issuecomment-228594718. @mikeifomin is problem actual?. Please update `sass-loader` to latest version :1st_place_medal: \r\n\r\nMore 90 days inactive. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. Yep, not related to `sass-loader`. Original issue https://github.com/webpack-contrib/css-loader/issues/233. If you still have error, please create minimal reproducible test repo and send comment in https://github.com/webpack-contrib/css-loader/issues/233.. @claudio4 all works good in your example.\r\n\r\nPlease update `webpack` to `v2` and `sass-loader` to latest version.\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. More than 90 days of inactivity. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @woohling @maximusnikulin @wayofspark @ggedde The problem still exists? If yes please create minimal reproducible test repo. @woohling just ping me when your do this :+1: . @ggedde can your create minimal reproducible test repo?. @ggedde seems bugs not in `sass-loader` or `css-loader` (it makes no difference what we work on `sass/scss/less` and etc.). I think `FF` have bug, just ping me when test repo was created.. @sandwich can your provide minimum reproducible test repo?. @aszmyd thanks, in near future i try to investigate this!. @aszmyd invalid configuration.\r\nFixed (invalid source map path):\r\n```\r\nconst webpack = require('webpack');\r\nconst path = require('path');\r\n\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\n\r\nmodule.exports = {\r\n    context: path.resolve('src'),\r\n    entry: './index.js',\r\n    output: {\r\n        filename: 'index.js',\r\n        path: __dirname + '/dist'\r\n    },\r\n    devtool: 'source-map',\r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: /\\.scss$/,\r\n                use: ExtractTextPlugin.extract({\r\n                    use: [{\r\n                        loader: 'css-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    }, {\r\n                        loader: 'sass-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                            // outputStyle: 'compressed'\r\n                        }\r\n                    }]\r\n                })\r\n            }\r\n        ]\r\n    },\r\n    plugins: [\r\n        new ExtractTextPlugin({\r\n            filename: 'styles/index.css'\r\n        }),\r\n        new HtmlWebpackPlugin(\r\n            {\r\n                filename: 'index.html',\r\n                template: './index.html'\r\n            })\r\n    ]\r\n};\r\n\r\n```\r\n\r\nIn your test repo i have correct position. Can your provide more information your node version, npm, OS and etc?. @sandwich your use `gulp` not `webpack`, how it is related to issue? Thanks!\r\n@woohling friendly ping\r\n@ggedde can your provide minimum reproducible test repo?. @aszmyd  reproduce, thanks, looking. Tomorrow I will write what was the problem. @sandwich @aszmyd thanks for helping!\r\n@sandwich I'm inclined to assume that you are right, since we do not make any modifications with the source maps in the `sass-loader`. @aszmyd doing at this moment :smile: . Btw seems bug did not located in `sass-loader` (https://github.com/sass/node-sass/issues/1206). @woohling @ggedde @folmert @wayofspark @sandwich @aszmyd won't fix in `sass-loader` :disappointed: \r\n\r\nInformation about why this happens: https://github.com/sass/libsass/issues/1747#issuecomment-159749530 and https://github.com/sass/libsass/issues/1747#issuecomment-160245200.\r\n\r\nIn short: browsers always show first selector in sequence nested selectors in source maps. I am closing this issue here because it is not related to `sass-loader` and we don't have time to fix this in other packages (`libsass`) which not related directly to `webpack`. Your can create new issue or write post in https://github.com/sass/libsass/issues/1747 if your think it is can be fixed. \r\n\r\nBtw your can click in dev tools on `property` to move in right position in source maps.. @aszmyd your can look loader code, we don't modify source map from `node-sass`.\r\nJust confirm:\r\n1. `console.log(result.map.toString())` in https://github.com/webpack-contrib/sass-loader/blob/master/lib/loader.js#L60\r\n2. Output:\r\n```shell\r\n{\r\n        \"version\": 3,\r\n        \"file\": \"stdin.css\",\r\n        \"sourceRoot\": \"/home/evilebottnawi/IdeaProjects/webpack-sass-loader-sourcemap-issue\",\r\n        \"sources\": [\r\n                \"stdin\"\r\n        ],\r\n        \"sourcesContent\": [\r\n                \"html {\\n    background: rgba(0, 0, 0, 0.7);\\n}\\n\\nbody {\\n\\n    h1 {\\n        color: white;\\n    }\\n}\\n\"\r\n        ],\r\n        \"names\": [],\r\n        \"mappings\": \"AAAA,AAAA,IAAI,CAAC;EACD,UAAU,EAAE,kBAAkB,GACjC;;AAED,AAEI,IAFA,CAEA,EAAE,CAAC;EACC,KAAK,EAAE,KAAK,GACf\"\r\n}\r\n```\r\n3. Open in chrome or mozilla http://127.0.0.1:8080/styles/index.css.map\r\n4. Output:\r\n```shell\r\n{\r\n\"version\":3,\r\n\"sources\":[\"webpack:///./src/src/index.scss\"],\r\n\"names\":[],\r\n\"mappings\":\"AAAA;EACI,+BAA8B,EACjC;;AAED;EAGQ,aAAY,EACf\",\r\n\"file\":\"styles/index.css\",\r\n\"sourcesContent\":[\"html {\\n    background: rgba(0, 0, 0, 0.7);\\n}\\n\\nbody {\\n\\n    h1 {\\n        color: white;\\n    }\\n}\\n\\n\\n\\n// WEBPACK FOOTER //\\n// ./src/src/index.scss\"],\"sourceRoot\":\"\"}\r\n```\r\nSeems something invalid in  `mappings`, but it is not `sass-loader`, let's investigate this, thanks!. @aszmyd something wrong in `css-loader` :disappointed: \r\n1. Add `style-loader` to `webpack.config.js`\r\n```shell\r\n loaders: [\r\n            {\r\n                test: /\\.scss$/,\r\n                /*use: ExtractTextPlugin.extract({*/\r\n                    use: [{\r\n                        loader: 'style-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    }, {\r\n                        loader: 'css-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    }, {\r\n                        loader: 'sass-loader',\r\n                        options: {\r\n                            sourceMap: true\r\n                            // outputStyle: 'compressed'\r\n                        }\r\n                    }]\r\n               /* })*/\r\n            }\r\n        ]\r\n```\r\n2. Open https://github.com/webpack-contrib/css-loader/blob/master/lib/loader.js#L114 (in `node_modules/css-loader`)\r\n3. Comment lines\r\n```shell\r\n/*map = result.map;\r\n\t\t\tif(map.sources) {\r\n\t\t\t\tmap.sources = map.sources.map(function(source) {\r\n\t\t\t\t\treturn source.split(\"!\").pop().replace(/\\\\/g, '/');\r\n\t\t\t\t}, this);\r\n\t\t\t\tmap.sourceRoot = \"\";\r\n\t\t\t}\r\n\t\t\tmap.file = map.file.split(\"!\").pop().replace(/\\\\/g, '/');*/\r\n```\r\n4. Run `npm run start` and your can see that source map is valid. Problem in `postcss`, which using in `css-loader`, I'll try to update `postcss` to the latest version in `css-loader` and see what happens. Closing issue, because not related, sorry, but i can't do anything here :disappointed: \r\nBased issue: https://github.com/postcss/postcss/issues/926\r\nWhy it is happens: https://github.com/postcss/postcss/issues/926#issuecomment-294062807\r\nWorkaround: implement own loader which correct this behavior (difficult).\r\n\r\nMaybe we can fix this in https://github.com/mozilla/source-map, your can create issue there with examples (prefer where only `node-sass` and `postcss` without `webpack` - easy debug), thanks!. @ggedde thanks!. @luchillo17 Thanks for using `webpack` and `sass-loader`!\r\nSome things:\r\n1. Don't use `'&includePaths[]' + helpers.root('node_modules')` and `@import '~primeui/themes/omega/theme';` after using `~` `webpack/sass-loader` already known `primeui` package locate in `resolve.modules` directories (for webpack 2) and `resolve.modulesDirectories` (for webpack 1).\r\n2. Also `to-string-loader` do not support `webpack 2` (We strongly recommend to update to `webpack` 2).\r\n3. Please update to latest `sass-loader` version.\r\n4. In provided screenshot seems bug not `sass-loader`, inside in `to-string-loader`.\r\n5. Also maybe your don't have `file-loader`.\r\n\r\nNot active more 90 days. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @adamchuan @thescientist13 seems using `relative` url, see docs about https://github.com/webpack-contrib/sass-loader#problems-with-url.\r\n\r\nNot active more 90 days. Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @sgulseth please update to latest `sass-loader` version :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @lorenzomigliorero Is there a problem or has it been solved?. Please update to latest `webpack` version and `sass-loader` version :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @josepapaianni @rossthedevigner problems still exist? Can your create minimal test reproducible test repo?. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. @pedrotainha please provide your webpack config. @gpazo @tleunen @luchillo17 @leaves4j please update to latest `webpack` version :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. Close in favor https://github.com/webpack-contrib/sass-loader/issues/293 (duplicate) and already have PR https://github.com/webpack-contrib/sass-loader/pull/447.\r\n\r\nPlease feel free to reopen (or create new issue) if this doesn't related to your issue. Thanks!. @noyobo seems bug was in `css-loader` or maybe related to https://github.com/webpack-contrib/css-loader/pull/523/commits/3502cef3c7b1a55f370102c0c05601ab924ada73, but no in `sass-loader`, try to update to latest version `css/sass-loader`. PR with tests https://github.com/webpack-contrib/sass-loader/pull/446.\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. Postcss issue about source map: https://github.com/postcss/postcss-loader/issues/195. After disabling generation of source maps using my PR https://github.com/webpack-contrib/css-loader/issues/478 i get about `~1.5x-2x` speedup my build. @jvanderberg @silviogutierrez @chartinger Is there a problem or has it been solved? If not can your create minimal reproducible test repo?. @chartinger can you provide what do your done, it is help to other people :smile: . @jvanderberg `sass-loader` doesn't `minify` code, this do `css-loader` using `cssnano` or `postcss-loader` with `cssnano` plugin. We are trying to reduce the number of unanswered problems, since it is difficult where there is a bug and where not and where it related to the loader (here `sass-loader`) and where not. We should reproduce bug or close issue. If bug to happen again, we can reopen this issue or create a new with more relevant data. We just try to do `webpack` is better for you :smile: . @jvanderberg your use `webpack` `v2` and latest versions of loader?. @jvanderberg Closed the issue. if your will get this error after moving to `webpack` `v2` feel free to reopen. Thanks!. @thomasyimgit @AntiCZ without minimal test reproducible repo we don't help us. @jameslnewell can you provide minimal reproducible test repo?. Closing this out, please feel free to reopen or create new issue if this doesn't resolve your issue. Thanks!. @mrapogee can your provide minimal reproducible repo? And why use `sass` and `css-modules` together (maybe best exclude sass and use `postcss` plugin or `cssnext` for some cool things which exist in `sass`?). Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. @anchann friendly ping, what is status?. @hvalcourtSerdy The known problem, unfortunately it has not been solved for a long time. @kang-chen your config is invalid, why your use `sass-loader` for `css` extension? Your spent time on sass compilation for `css`, it is bad.. @niksy Is there a problem or has it been solved?. @deiga thanks for using `webpack` and `sass-loader`, but it is not issue, it is question, we don't have time to respond on all question here :sob: , please use `stackoverflow` for this, also you can read http://eng.localytics.com/faster-sass-builds-with-webpack/ about speedup build, also your can see on new loader https://github.com/webpack-contrib/cache-loader.\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @DaniGithub seems invalid `scss` (similar https://www.google.ru/search?q=expected+1+selector+or+at-rule&oq=expected+1+selector+or+at-rule&aqs=chrome..69i57j0l5.476j0j7&sourceid=chrome&ie=UTF-8), need minimal reproducible test repo :smile: . Closing due to inactivity. Please test with latest version (also test your sass style sheets in https://www.sassmeister.com/, maybe it is related to `node-sass/libsass`) and feel free to reopen if still regressions. Thanks!. /cc @jhnns . @Nexxado @Grace951 @lxalln can your provide minimal reproducible test repo (maybe related to `node-sass` or other package which generate source maps)? We need an example this `scss` file. @Nexxado great! :+1: \r\n\r\nClosing this out, please feel free to create new issue if the error will happen again. Thanks!. @markbrown4 can we close this issue? We have stable version `webpack@2` :+1: and `sass-loader` now support only `webpack@2` version https://github.com/webpack-contrib/sass-loader/blob/master/package.json#L36. @michael-ciniawsky what do you think about `docs/recipes` directory as in gulp https://github.com/gulpjs/gulp/tree/master/docs/recipes, maybe it is not bad idea?. @borela why just don't use `test: /\\.(mscss|scss)$/` and `test: /\\.(msass|sass)$/,`?. @borela what about add this extensions to `resolve.extensions` webpack option?. @borela If it does not help, just create minimal test repo and describer in readme what logic your can want. it is allow to helping :smile: . @modosc for `import` from `modules` please read https://github.com/webpack-contrib/sass-loader#imports\r\n\r\nMore 90 days inactive (no provided test repo :disappointed: ). Closing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @sharlayoub example https://github.com/ctrine/webpack-settings/blob/master/packages/shared/src/rules/sass-module.js how use `.module.scss`. Closing due to inactivity. Feel free to reopen if example above don't solve your problems. Thanks!. Confirmed, it is related to https://github.com/sass/libsass/issues/2312, need fix in `node-sass`. Close here, not related to `sass-loader`, we need to search `C++` superman and fix it in `libsass`. @hiroshishu @jrwebdev Is there a problem or has it been solved? If not can your create minimal reproducible test repo?. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. @gkhno Is there a problem or has it been solved? If problem not solved please create minimal reproducible test repo, thanks!. Fell free to reopen issue if your problem not solved.. @karptonite Can your update `webpack`, `sass-loader` and other related packages to `webpack` to latest version and try again. If the error persists, report this here :+1:  . @karptonite let's do it :+1: thanks for repo. @karptonite bug in `rework` in `resolve-url-loader` (parser). Seems `rework` is outdate today and best is use `postcss` for this purpose.\r\n\r\nMinimal code to reproduce:\r\n```scss\r\n@import \"~bootstrap/scss/variables\";\r\n@import \"~bootstrap/scss/mixins\";\r\n@import \"~bootstrap/scss/navbar\";\r\n\r\n.game-header-image {\r\n\t@include media-breakpoint-down(sm) {\r\n\t\tcontent: '';\r\n\t}\r\n}\r\n```\r\n\r\nSimple: `rework` don't add `}` to some block (`declaration block`).\r\n\r\nI created issue in `resolve-url-loader` and close issue here, because this issue not related to `sass-loader`.\r\n\r\nRelated issue: https://github.com/bholloway/resolve-url-loader/issues/56.\r\n\r\nThanks for helping to do `webpack` better!. @ramakrishnamundru thanks for issue, but `sass-loader` don't handle external resources, seems bug was https://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L51. Is there a problem or has it been solved? If not please create minimal reproducible test repo. @brunoravanhani seems your have wrong `sass` syntax, can your provide `sass` example file?. @brunoravanhani As I understand the problem is no more? Can we close this issue? . @halt-hammerzeit @matthieuh seems your have old `css-loader` (with bugs), just update to latest and try again. If problems still exist please report about this here (be good with minimal reproducible test repo). Thanks!. Fell free to reopen issue if your problem not solved.. @MrEfrem can your provide minimal reproducible test repo?. @LeG3nDz what is status problems?. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions, also seems your have invalid url, please read https://github.com/webpack-contrib/sass-loader#problems-with-url about how it solve. Thanks!. PR welcome :+1: . @xXanth0s can you create minimal reproduce test repo? it is allow to resolve issue more faster :smile: . @wsfuller @xXanth0s  thanks for answer and using `webpack` and `sass-loader` :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @zabojad Is there a problem or has it been solved? If not can your create minimal reproducible test repo?. @zabojad friendly ping. @dovidweisz please update to `latest` `sass-loader` version. @dovidweisz can your provide config or best minimal reproducible test repo?. @dovidweisz config is very unreadable.\r\nAlso `build` and `start` is working good for me.\r\nDon't recommend use options as query argument. Please refactor your webpack config.\r\n\r\nAlso `var sassOptions = getLoaderConfig(this); console.log(sassOptions);` inside `sass-loader` output:\r\n```\r\nincludePaths: [ '/paht/to/todomvc-angular-4/src/scss']\r\n```\r\nWhich mean all options are respected inside `sass-loader`, your can have invalid `@import 'something'` in your styles.\r\n. Sorry but not related to `sass-loader`, also we have tests on `includePaths` option. Also you can notice below config is not right way, just use `options` property for each loader in your rules.. @zabojad \r\n```\r\nloaders: [ \"style-loader\", \"css-loader?sourceMap\", 'sass-loader?{\"sourceMap\":true,\"includePaths\":[\"app/styles\"]}' ],\r\n            }\r\n\t\t],\r\n```\r\nRefactor to\r\n```\r\n{\r\n  test: /\\.s[ac]ss$/,\r\n  use: [\r\n    {\r\n        loader: \"style-loader\",\r\n        options: {} // your can avoid `options` if your don't have these\r\n    },\r\n    {\r\n        loader: \"css-loader\",\r\n        options: {} // your can avoid `options` if your don't have these\r\n    },\r\n    {\r\n        // Your also can avoid this loader if your don't need\r\n        loader: \"postcss-loader\",\r\n        options: {} // your can avoid `options` if your don't have these\r\n    },\r\n    {\r\n        loader: \"sass-loader\",\r\n        options: {} // your can avoid `options` if your don't have these\r\n    }\r\n  ]\r\n}. @dovidweisz already testing, just wait. @dovidweisz yep, I just wanted to write about this, just avoid to use `LoaderOptionsPlugin`, they still buggy and incompatibility with many thing.. @katiasmet please create new issue for this, don't write your problem(s) inside other problem(s), thanks!. @wsfuller in theory should work `['css-loader', 'postcss-loader', 'resolve-url-loader', 'sass-loader']`, if your provide minimal reproducible repo it give an opportunity to answer this question accurately (maybe something should be docs to avoid this issue). Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions.. @wsfuller Not entirely true, with this logic we must put this information in each `loader`, it is overloading docs, more right place information about this in https://webpack.js.org/concepts/loaders/#loader-features (where you indicated). Btw thanks for using `webpack` :1st_place_medal: . @wsfuller Then you should create `migration-from-gulp-and-grunt.md` and move this docs in `webpack-docs`, not here. @wsfuller your can do PR and if docs will be good we can merge this :+1: . @maffelbaffel About `-p` \r\n```shell\r\n  -p           shortcut for --optimize-minimize --define\r\n               process.env.NODE_ENV=\"production\"                       [boolean]\r\n```\r\nSeems your have `css-loader` and other `postcss-plugin` for minification css (`-p` enable their) and one of them does not work correctly. Can you provide minimal reproducible test repo?. Using only `--optimize-minimize` \u0441auses this problem, I investigate this. Problem in `node-sass/libsass`, just try to setup `outputStyle` to `compressed`.\r\n\r\nhttps://gist.github.com/evilebottnawi/c56515c6b4ef5238a714afaba9d626c7. @michael-ciniawsky I also think so, but the problem should be reported in any case. @michael-ciniawsky One good question:\r\n`minimize` === `compressed` or not. @michael-ciniawsky \r\n\r\n> :compressed\r\n\r\n> Compressed style takes up the minimum amount of space possible, having no whitespace except that necessary to separate selectors and a newline at the end of the file. It also includes some other minor compressions, such as choosing the smallest representation for colors. It\u2019s not meant to be human-readable.. @michael-ciniawsky seems yes. @michael-ciniawsky yep, `cssnano` handle colors, but maybe some people don't use `cssnano` and use only `compressed` style. @michael-ciniawsky yep, they can setup `outputStyle` directly using loader `options`.. Thanks all who helped clarify this problem. Close here because not related to `sass-loader`.. @rhys-vdw what status is now? It is worth waiting for pr or not?. @rhys-vdw great! btw i have same module for extract variables, just for information https://github.com/itgalaxy/get-sass-vars-sync. @rhys-vdw your can rewrite on async, it is repo for my internal use, feel free to rewrite or we can write common repo based on my work :smile: . @nsams friendly ping, what is status?. @gkohen your can use https://github.com/sass/node-sass#functions--v300---experimental as option in `loader`. Thanks for using `webpack` and `sass-loader` :+1: \r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @vanesyan In your example (`https://github.com/vanesyan/webpack-npm-scope-css-import-issue`), `\"~@foo/bar.scss\"` don't exists use `\"~@foo/bar/index\"`. If your want to support `main` field in `package.json` please create separately issue.. @vanesyan `webpack` by default `support` `main` field in `package.json`.. @vanesyan your right bug in this line https://github.com/webpack-contrib/sass-loader/blob/master/lib/importsToResolve.js#L33 for `@import ~@foo/bar` it is false, but should be true. @vanesyan I'll try to find the time to fix it today, but first I need to scrape the issues not related to `sass-loader` :tired_face: . @asolopovas wip. @asolopovas hm, works fine for me, can your explain more information? What`browser` your are use?If your can create screenshots this bug?. @asolopovas oh really, tomorrow try to found solution \ud83d\udc4d . i hate `windows`, i spend about 4 hours just to build start to work :sob: . @asolopovas i don't use `mac` :smile: . Confirmed, start to searching solution. Seems related to https://github.com/mozilla/source-map/issues/91. Not related to `style-loader`, feel free to reopen if after merge https://github.com/webpack-contrib/css-loader/pull/532 error still exists. @rascio your can use https://github.com/sass/node-sass#importer--v200---experimental for this. THis is not related to `sass-loader`, some libraries add variable to define here search dependencies `package` or `assets` (your can create issue about this and do pr in `patternfly`). Sorry but seems won't fix in `sass-loader`.. @rascio seems duplicate https://github.com/webpack-contrib/sass-loader/issues/227.\r\n\r\nClosing this out, please feel free to reopen if this doesn't related to your issue. Thanks!. @BHouwens seems your use `postcss` after `sass-loader` with `postcss-scss` or have invalid config, can you provide your config? See similar issue https://github.com/webpack-contrib/css-loader/issues/295. @BHouwens use right syntax for `webpack` 2\r\n```shell\r\nuse: [\r\n       {\r\n           loader: 'css-loader',\r\n           options: { modules: true, importLoaders: 1, localIdentName: \"[name]__[local]___[hash:base64:5]\" }\r\n       },\r\n       'postcss-loader',\r\n       {\r\n              loader: 'sass-loader',\r\n       }\r\n ]\r\n```. @BHouwens good, I will bring this issue to the discussion. @r1005410078 i think it is not related to `sass-loader`, just `sass` syntax error, if your think your code should be works, but you still get an error maybe best create issue in `node-sass` (https://github.com/sass/node-sass) with example your code. @mooror Interesting! Why don't use `devtool: `source-map`` always (poor performance)? Also your can to try https://github.com/sass/node-sass#sourcecomments, https://github.com/sass/node-sass#sourcecomments and other option related to `source maps`. Also some notes about options in source code https://github.com/webpack-contrib/sass-loader/blob/master/lib/normalizeOptions.js#L34. \r\n\r\nIf nothing to help with this or something does not work properly let us know about it :+1: . @mooror friendly ping. @vifird Where did you find `relativeUrls` option for `sass-loader`?. /cc @vifird friendly ping. @vifird `sass-loader` build on top `node-sass` (see all options https://github.com/sass/node-sass#options), also original `sass` don't have this option too. Seems you are confused with `less` (http://lesscss.org/usage/).\r\n\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!\r\n. @danieladonna all works fine, just variables, functions and mixins in https://github.com/zurb/foundation-sites/blob/develop/scss/foundation.scss, what do you want see after import?. @alexanderknapstein all right, first use include all variables, mixins and etc (`foundation-sites/scss/foundation.scss`) then you use included mixin, just see examples http://foundation.zurb.com/building-blocks/\r\n\r\n/cc @michael-ciniawsky we can close this issue, because it is not related to `sass-loader`. @throoze A few wrong things :smile:\r\nWrong `sass` syntax.\r\n```sass\r\n$small: 480px\r\n$medium: 786px\r\n$large: 1140px\r\n\r\n\r\n@media only screen and (min-width: $small)\r\n    font-size: 14px; // Should don't be empty\r\n@media only screen and (min-width: $medium)\r\n    .some-selector\r\n        border: 1px solid #dedede\r\n        border-radius: 6px\r\n        bottom: 10px\r\n        box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.2)\r\n        height: 500px\r\n        position: absolute\r\n        right: 10px\r\n        width: 320px\r\n```\r\nSome note about indented syntax http://sass-lang.com/documentation/file.INDENTED_SYNTAX.html.\r\n\r\nClosing this out, please feel free to reopen if this doesn't resolve your issue. Thanks!. @jethrolarson 'dart-sass' is cool project, but there are a lot of bugs with `sass` original compatibility :sob: . @lukepolo seems more related to `node-sass`, we should have `dart-sass` port on nodejs. Now we don't have this port and it is impossible.. @graingert can you explain why `dart-sass` is better (or not) than `node-sass`? Faster, better compatibility with orginal sass implementation or other feature. But main problem is `dart-sass` don't support custom importer, without this feature, it is impossibly to implement support `dart-sass` in `sass-loader`.. @gitsupersmecher can your provide use case for this and why your need this?. @gitsupersmecher what concretely `sass-loader` should logs, give example :smile: . Another loader don't have logs, seems it is not required.\r\n\r\nAlso we are gradually integrating validation options (example https://github.com/postcss/postcss-loader/blob/master/lib/options.json).. @michael-ciniawsky can you help with integrate validation option as in https://github.com/webpack-contrib/extract-text-webpack-plugin/tree/master/schema ? :smile: . Close. No feedback. Feel free to reopen and explain why we need log?. /cc @michael-ciniawsky friendly ping, let's finish it :smile: . @aprilandjan Thanks for feedback. Duplicate: https://github.com/webpack-contrib/sass-loader/issues/410\r\n\r\nClosing this out, please feel free to reopen if your think what your issue doesn't related above issue. Thanks!. @zhengxkq do your use `postcss` plugins like `cssnano`? also provide you `webpack` config. @dudesweet100 try `var myCss = require('css-loader!sass-loader!./index.scss');console.log(myCss)` for exporting styles\r\nor `require('style-loader!css-loader!sass-loader!./index.scss')` for including styles in dom immediately.. @vanesyan thanks :+1: . /cc @jhnns friendly ping. @jarindr `sass-loader` don't resolve `:global` and `:local` it is do `css-loader`. https://github.com/webpack-contrib/css-loader. @jarindr please create minimal reproducable test repo, we will not help you if you do not provide information, good issue - issue with detailed information, not empty :+1: . @jarindr and seems sass syntax don't allow using `:global` and `:local`. @jarindr seems works good in https://www.sassmeister.com/ and support. weird, all `sass` files should be `indentedSyntax` set to `true` https://github.com/webpack-contrib/sass-loader/blob/master/lib/normalizeOptions.js#L61, seems in your case `indentedSyntax` is `false`, try to set `indentedSyntax` in option. @jarindr Great! :+1: . @michael-ciniawsky just typo, `node-sass` -> `sass-loader`. `node-sass` is now only `4.5.2` :smile: . @DBosley close this issue, seems duplicate https://github.com/webpack-contrib/sass-loader/issues/425, also WIP.. @strarsis i am not familiar with `eyeglass`, best answer on this question is try to integrate this and if your got error put stack trace here. Btw, for question use `stackoverflow`, thanks!. @tangshuang using separate entries. Create `vendor` entry and include all vendor sass and create `app` entry and include all app sass. In front-end load first `vendor` entry then `app` entry.. @tangshuang your can create entry with `bootstrap` and place here only `sass/scss` files. After include this file before other css files. If you want real modularity your should use `css-modules`. Please study https://github.com/css-modules/postcss-modules. @tangshuang also your can do this automatically using `CommonsChunkPlugin` https://webpack.js.org/plugins/commons-chunk-plugin/ https://webpack.github.io/docs/stylesheets.html#styles-in-commons-chunk. Closing due to inactivity, code splitting not related to `sass-loader`. Please read for webpack `v2` https://webpack.js.org/guides/code-splitting-css/. @lukaswelinder please provide more information (better minimum reproducible test repo) about what do you want and what do you get, thanks!. @luchillo17 yep, latest `node-sass` and `libsass` not supporting `>>>`. \r\n\r\nUsing for testing - https://www.sassmeister.com/ \r\nInput:\r\n```\r\nul >>> li {\r\n  background: lightblue;\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\nul > > > li {\r\n  background: lightblue;\r\n}\r\n```\r\n\r\nAlso original `sass` (written on `ruby`) also not supporting `>>>`. Sad, but we can not do anything. Your can create issue https://github.com/sass/node-sass/issues about this.. @alxtz I advise using first point from https://github.com/webpack-contrib/sass-loader#problems-with-url. `sass-loader` don't handle `url` and seems it is related to `resolve-url-loader` (he using `rework`, it is bad because `rework` is deprecated). Closed, not related to `sass-loader`, feel free to reopen if your think problem in `sass-loader`.. @wzup yep, it is valid `css` and it should be valid as `scss` (working on original sass compiler v4).\r\nProblems in `libsass` (https://github.com/sass/libsass). We can not do anything here. Please create issue in `libsass`.\r\n\r\nhttps://www.sassmeister.com/\r\nInput:\r\n```\r\na {\r\n    font: normal normal 400 16px/calc(16px * 1.4) Roboto;\r\n}\r\n```\r\nOutput:\r\n```\r\n16px/calc isn't a valid CSS value. on line 2 at column 29\r\n```\r\n\r\nThanks for helping us to do webpack better!. Fixed: https://github.com/sass/libsass/pull/2392, let's  wait new version `node-sass` with new version `libsass`. Thanks!. @katzz0 no, seems your configuration invalid, can your show configuration?. @katzz0 seems `resolve-url-loader` not works as expected. I don't recommendation usage this loader.\r\nWhy?\r\n1. He seems abandoned.\r\n2. He use `rework` (abandoned).. @katzz0 At the time of writing it was not abandoned, now there is no alternative, so he stayed in README. I don't use `resolve-url-loader` loader in my projects and all works fine.. @idangozlan seems your use old version `sass-loader`, try to use `rm -r node_modules`, then `npm cache clear` (`yarn cache clean`) and `npm i` (`yarn install`). @idangozlan https://david-dm.org/webpack-contrib/sass-loader our deps status. It looks like you're using something other together `sass-loader`. Close. Feel free to reopen if your again get this warning. . @gizm0bill thanks in near future i investigate this. @gizm0bill using `@import '~@styles/main';` mean what `sass-loader` try to search file by `node_modules/@style/main` path. Alias should be working only if your use `@import '~@styles'`.\r\n\r\n`@import '~@styles/main';` - importing file from package.\r\n`@import '~@styles';` - importing module (respect browser field in `package.json` and etc).. @gizm0bill seems alias don't work now for all packages https://github.com/webpack-contrib/sass-loader/issues/410, it is related to this problem, right?. @solidevolution aliases works only with modules: `@import \"~something\"`, if your want own logic for loading please use custom `importer` (https://github.com/sass/node-sass#importer--v200---experimental), thanks!. @solidevolution `sass-loader` build on `importer` function, without `importer` `sass-loader` doesn't works, so it does not make sense not to support `experimental` `importer` function(s). No i don't have `postcss` solution, thanks!. @katiasmet \r\n```shell\r\n{\r\n  loader: \"sass-loader\",\r\n  options: {\r\n    includePaths: ['src/_scss']\r\n  }\r\n}\r\n```\r\nIf this don't help, please create minimum reproducible test repo, thanks!. @Guobacai can your show stack trace of error?. @Guobacai be good if your can create minimal test reproducible repo :+1: This will help us understand why it happens. @thescientist13 seems not related to `sass-loader`. Problems in `webpack/lib/Compilation.js:219:10`, maybe something wrong with `ts-loader` loader?. @marekpw @Yizhachok @borela can your provide minimal reproducible test repo?. @borela @marekpw bad solution, using `includePaths` option reduces performance.. @borela seems it is regression bug after https://github.com/webpack-contrib/sass-loader/pull/450 or https://github.com/webpack-contrib/sass-loader/pull/447. @borela I will try to solve this problem today or tomorrow, thanks!. Seems problems in `node-sass` (they don't support scoped import https://github.com/sass/node-sass/issues/1596).\r\nBut it is possibly to solve throw imported, working on this.. /cc @michael-ciniawsky what do your think about problems? It's hard for me to imagine a solution for her, we can't add `~` in vendor sass styles :disappointed: . @michael-ciniawsky yep, this is known, the question is whether we at the level `sass-loader` fix it or not. @michael-ciniawsky no new loader or something other stuff (options), just change logic in sass-loader which allow loading scoped importing in vendor sass/scss styles. @ddobson workaround, but it is increase build time, no solution for this right now, but PR welcome. @mischkl old and known issue, solutions https://github.com/webpack-contrib/sass-loader/pull/479#issuecomment-314701628. @mischkl it is not hack, it is correct solution.  I agree we need search build-in solution for this, but it is not easy. Any ideas? PR welcome :+1: . @mischkl it is breaking changes and can lead to a problem with performance and incompatibility, before think about this we should look how working `less/stylus/etc` loader with this problem (if they working with scoped packages). If I'm not mistaken `node-sass` don't work with scoped packages by default.\r\n. @mischkl maybe this solution is right, it is really not easy to fix and i don't have ideas about this, but i am glad to hear any opinion and solution. Maybe we can fix this in `node-sass` and all packages which use this can handle scoped packages. @mischkl in theory any `@package/style` import which located in `node_modules` files should be resolve `node-sass` from `node_modules` directory, on the other hand `node-sass` just port `sass` on `nodejs` platform and don't care about this. I don't known who should this do :disappointed: . @heikkimu `sass-loader` does't not have `config` option, see `options` in `README.md`.\r\nExample\r\n```js\r\n{\r\n    loader: \"sass-loader\",\r\n    options: {\r\n        includePaths: [\"absolute/path/a\", \"absolute/path/b\"]\r\n    }\r\n}\r\n```. @heikkimu Also your question on `stackoverflow` related to `webpack` v1, please update to `webpack` v1. @heikkimu current version of `sass-loader` doesn't support webpack v1 (https://github.com/webpack-contrib/sass-loader/blob/master/package.json#L36), your can update to v2 ( **Recomended** https://webpack.js.org/guides/migrating/) or use old version `sass-loader` (https://github.com/webpack-contrib/sass-loader/tree/v4.1.1, can contains errors and unexpected behavior).. @silverbackdan please provide more detailed webpack configuration. @silverbackdan feel free to reopen if issue will be related to `sass-loader`. @michael-ciniawsky can we merge and release patch, no access :smile: . This will done be in https://github.com/webpack-contrib/sass-loader/issues/429\r\nAll works fine, your got just a warning for an unmet peerDependency, it's not a critical.\r\n. @SirCameron `sass-loader` don't parse url. @SirCameron handling `url` do `css-loader` https://github.com/webpack-contrib/css-loader#options. @SirCameron maybe your should setup `file-loader` https://github.com/webpack-contrib/file-loader using `Filename template placeholders` where specify where your want save files.. @SirCameron Can i close issue here? Feel free to reopen if it is not solve your problem. Thanks!. @d3viant0ne Can we release path version today, after merge this?. @VaskaDogana can your provide more information what actually and what expected, better will be create minimal reproducible test repo. Closing due to inactivity. Thanks!. @SirCameron please, provide your minimal reproducible test repo. @SirCameron `sass-loader` don't related to Atom and Atom plugin. Can your provide example where your have unexpected behavior?. @SirCameron just close. Someone can use the search and find it. Thanks!. @marcinant already updated https://github.com/webpack-contrib/sass-loader/blob/master/package.json#L57\r\n\r\nJust update to 6.0.6 version (https://github.com/webpack-contrib/sass-loader/blob/master/package.json#L3). @michael-ciniawsky more fix, than feature, webpack by default support aliases, need sombody who know wepback and sass to be sure that all good. @jhnns big bad problem with aliases is nonsupporting this inside `node_modules`, because we can't add `~` inside other libraries/frameworks. To be honest, I do not know how to solve this, in theory we can add option where developers will add own aliases, anywhere here https://github.com/webpack-contrib/sass-loader/blob/master/lib/importsToResolve.js#L16. Example:\r\n```shell\r\n{\r\n                loader: \"sass-loader\",\r\n                options: {\r\n                    includePaths: [\"absolute/path/a\", \"absolute/path/b\"],\r\n                    aliases: { /regex/: 'path/to/something' } // as in webpack\r\n                }\r\n            }\r\n```\r\nI agree this look strange, but we can explain in `README` why we use this solution. I can rewrite this here if we will accept this. Thanks!. /cc @jhnns friendly ping, what do your think about `options.alias`?. @mischkl Be great if your do PR, @jhnns now is very busy and only do review PR, i am not familiar with `eyeglass` and for me difficult understand what need to add\r\n . @yogeshgadge can your create minimal reproducible test repo? I am use font-awesome in my projects with sass-loader and all works fine. @yogeshgadge aliases not working now for `sass-loader`, PR fixes this https://github.com/webpack-contrib/sass-loader/pull/479. @yogeshgadge hm, should be work with modules, can your provide minimum test repo?. Duplicate https://github.com/webpack-contrib/sass-loader/issues/410. @yantakus your can use https://github.com/webpack-contrib/sass-loader#environment-variables to setup own variables. @yantakus your can add `@import \"app/styles/settings/_settings.scss\"` to each file where your need variables or use `sass variables directly in webpack config`. @yantakus seems there is no solution for this purpose, your can create own loader for this (`css-loader` -> `postcss-loader` -> `sass-loader` -> `inject-sass-variables-loader`), but recommendation way is including `variables.scss` in each file. \r\n\r\nWhy? Because each file is module and if your module contain some data (in your case it is variables) which contain in other module, your can import this module (your are doing this for `js` modules).\r\n\r\nAlso your can use other way: use https://github.com/niksy/get-sass-vars or https://github.com/itgalaxy/get-sass-vars-sync/ for reading variables in JSON format and use\r\n```\r\noptions: {\r\n    data: JSON.stringify(variables)\r\n}\r\n```. @baunegaard your can set `sourceMapRoot` to `<Project root>/Assets`. If your provide minimal test repo it is help to solve problem.. @baunegaard\r\n > With a minimal test repo do you mean just an empty repo with a webpack.config to reproduce. @baunegaard Did not understand what expected behavior? `webpack` always story source maps in `webpack://`. Your want change this? If yes, why?. @baunegaard thanks for clarify, try to found solution in near future. We can fix it change `result.map.sources = result.map.sources.map(path.normalize)` to `result.map.sources = result.map.sources.map((source) => path.normalize(path.resolve(source)));`, but I'm not completely sure, I'm still looking for a solution.\r\n\r\nBut it is should be work with relative path, seems problems not in `sass-loader`, we return correct `sources`:\r\n```shell\r\n[ 'css/bundles/bundle.scss', 'css/modules/module.scss' ]\r\n[ 'node_modules/bootstrap/dist/css/bootstrap.css' ]\r\n```. Using (here https://github.com/webpack-contrib/sass-loader/blob/master/lib/loader.js#L73): \r\n```js\r\nconsole.log(result.map.sourceRoot)\r\nconsole.log(result.map.sources)\r\n```\r\nOutput:\r\n```shell\r\n/home/evilebottnawi/IdeaProjects/sass-loader-sourcemap-test\r\n[ 'css/bundles/bundle.scss', 'css/modules/module.scss' ]\r\n/home/evilebottnawi/IdeaProjects/sass-loader-sourcemap-test\r\n[ 'node_modules/bootstrap/dist/css/bootstrap.css' ]\r\n```\r\n\r\nAll fine, seems issue related to `css-loader`, i will try to found what is wrong and why it is happens in `css-loader`. @baunegaard related to `css-loader`, because `from` for `postcss` set as `/css-loader!/path/to/css/bundles/bundle.scss` (https://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L198) and all sources interpreted (when `postcss` build source maps) as `relative` to this path, but in your case `module.css` not relative. Close here because not related to `sass-loader`, thanks all!. @serheyShmyg can your provide link on documentation about this, but need tests for this anyway\r\n. @serheyShmyg we use programmatic api, not CLI, your can just use `require('path/to/importer')` without changed `sass-loader` code.. @serheyShmyg what query string? Please provide full example (case), it is difficult to understand. @julmot thanks for issue, known limitation for `compressed` style (https://github.com/webpack-contrib/sass-loader/issues/416#issuecomment-311931867), Sorry, but we can't fix this.\r\n\r\nBut your can use this example (https://github.com/webpack-contrib/sass-loader/issues/416#issuecomment-311932206) if your want to using colors as part of selector.. @sshmyg please provide minimum reproducible test repo and more information about your steps which output this, thanks!. @sshmyg friendly ping. @sshmyg with minimum test repo we can investigate this. @narthollis only `@import '~your_module'` should be works with `NormalModuleReplacementPlugin`, `@import`'s without `~` don't interpreted as module so `NormalModuleReplacementPlugin` doesn't works as expected (known limitation). But your can do this using own `importer` (https://github.com/sass/node-sass#importer--v200---experimental), it should be very easy implement. This solution suits you?. @henrahmagix tomorrow i investigate this. Thanks for issue!. @henrahmagix thanks for issue, seems problem not in `sass-loader`, because using `require('fs').writeFileSync('test.css', result.css.toString())` before https://github.com/webpack-contrib/sass-loader/blob/master/lib/loader.js#L79 , output:\r\n```css\r\n/* --- Copied from Mavo _defs.scss --- */\r\n/* Without inline-svg function */\r\n.rubbish-bin-copied-without-inline-svg-function::before, .rubbish-bin-copied-with-copied-inline-svg-function::before {\r\n  content: inline-svg('<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 100 125\" fill=\"rgb(200,0,0)\">\\a             <path d=\"M65,15.437V8c0-3.86-3.141-7-7-7H42c-3.86,0-7,3.14-7,7v7.437C14.017,16.816,14,21,14,21v10h72V21 C86,21,85.982,16.816,65,15.437z M43,9h14v6.086C54.828,15.032,52.51,15,50,15c-2.51,0-4.828,0.032-7,0.086V9z\"/>\\a             <path d=\"M19,37l6,62h50l6-62H19z M35.167,88.995C35.11,88.998,35.053,89,34.998,89c-1.581,0-2.904-1.236-2.993-2.834l-2-36  c-0.092-1.654,1.175-3.07,2.829-3.162c1.663-0.089,3.07,1.175,3.162,2.829l2,36C38.087,87.488,36.821,88.903,35.167,88.995z M53,86\\a                      c0,1.657-1.343,3-3,3c-1.657,0-3-1.343-3-3V50c0-1.657,1.343-3,3-3c1.657,0,3,1.343,3,3V86z M67.995,86.166  C67.906,87.764,66.583,89,65.003,89c-0.057,0-0.112-0.002-0.169-0.005c-1.654-0.092-2.921-1.507-2.829-3.161l2-36\\a                      c0.093-1.655,1.533-2.906,3.161-2.829c1.654,0.092,2.921,1.508,2.829,3.162L67.995,86.166z\"/>\\a         </svg>');\r\n  width: 1em;\r\n  height: 1em; }\r\n\r\n/* With inline-svg function */\r\n.rubbish-bin-copied-without-inline-svg-function::before, .rubbish-bin-copied-with-copied-inline-svg-function::before {\r\n  content: url(\"data:image/svg+xml,url-encode('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 100 125\\\" fill=\\\"rgb(200,0,0)\\\">\\\\a             <path d=\\\"M65,15.437V8c0-3.86-3.141-7-7-7H42c-3.86,0-7,3.14-7,7v7.437C14.017,16.816,14,21,14,21v10h72V21 C86,21,85.982,16.816,65,15.437z M43,9h14v6.086C54.828,15.032,52.51,15,50,15c-2.51,0-4.828,0.032-7,0.086V9z\\\"/>\\\\a             <path d=\\\"M19,37l6,62h50l6-62H19z M35.167,88.995C35.11,88.998,35.053,89,34.998,89c-1.581,0-2.904-1.236-2.993-2.834l-2-36  c-0.092-1.654,1.175-3.07,2.829-3.162c1.663-0.089,3.07,1.175,3.162,2.829l2,36C38.087,87.488,36.821,88.903,35.167,88.995z M53,86\\\\a                      c0,1.657-1.343,3-3,3c-1.657,0-3-1.343-3-3V50c0-1.657,1.343-3,3-3c1.657,0,3,1.343,3,3V86z M67.995,86.166  C67.906,87.764,66.583,89,65.003,89c-0.057,0-0.112-0.002-0.169-0.005c-1.654-0.092-2.921-1.507-2.829-3.161l2-36\\\\a                      c0.093-1.655,1.533-2.906,3.161-2.829c1.654,0.092,2.921,1.508,2.829,3.162L67.995,86.166z\\\"/>\\\\a         </svg>')\");\r\n  width: 1em;\r\n  height: 1em; }\r\n\r\n/* --- Direct from Mavo --- */\r\n/* Imported via sass-loader `~` import resolver */\r\n.via-import-resolver::before, .via-node-modules-path::before {\r\n  content: url(\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w33.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20viewBox%3D%220%200%20100%20125%22%20fill%3D%22rgb%28200%2C0%2C0%29%22%3E\\a \t\t\t%3Cpath%20d%3D%22M65%2C15.437V8c0-3.86-3.141-7-7-7H42c-3.86%2C0-7%2C3.14-7%2C7v7.437C14.017%2C16.816%2C14%2C21%2C14%2C21v10h72V21%20C86%2C21%2C85.982%2C16.816%2C65%2C15.437z%20M43%2C9h14v6.086C54.828%2C15.032%2C52.51%2C15%2C50%2C15c-2.51%2C0-4.828%2C0.032-7%2C0.086V9z%22%2F%3E\\a \t\t\t%3Cpath%20d%3D%22M19%2C37l6%2C62h50l6-62H19z%20M35.167%2C88.995C35.11%2C88.998%2C35.053%2C89%2C34.998%2C89c-1.581%2C0-2.904-1.236-2.993-2.834l-2-36%20%20c-0.092-1.654%2C1.175-3.07%2C2.829-3.162c1.663-0.089%2C3.07%2C1.175%2C3.162%2C2.829l2%2C36C38.087%2C87.488%2C36.821%2C88.903%2C35.167%2C88.995z%20M53%2C86\\a \t\t\t\t\t%20c0%2C1.657-1.343%2C3-3%2C3c-1.657%2C0-3-1.343-3-3V50c0-1.657%2C1.343-3%2C3-3c1.657%2C0%2C3%2C1.343%2C3%2C3V86z%20M67.995%2C86.166%20%20C67.906%2C87.764%2C66.583%2C89%2C65.003%2C89c-0.057%2C0-0.112-0.002-0.169-0.005c-1.654-0.092-2.921-1.507-2.829-3.161l2-36\\a \t\t\t\t\t%20c0.093-1.655%2C1.533-2.906%2C3.161-2.829c1.654%2C0.092%2C2.921%2C1.508%2C2.829%2C3.162L67.995%2C86.166z%22%2F%3E\\a \t\t%3C%2Fsvg%3E\");\r\n  width: 1em;\r\n  height: 1em; }\r\n\r\n/* Imported directly via full node_modules path */\r\n.via-import-resolver::before, .via-node-modules-path::before {\r\n  content: url(\"data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w33.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20viewBox%3D%220%200%20100%20125%22%20fill%3D%22rgb%28200%2C0%2C0%29%22%3E\\a \t\t\t%3Cpath%20d%3D%22M65%2C15.437V8c0-3.86-3.141-7-7-7H42c-3.86%2C0-7%2C3.14-7%2C7v7.437C14.017%2C16.816%2C14%2C21%2C14%2C21v10h72V21%20C86%2C21%2C85.982%2C16.816%2C65%2C15.437z%20M43%2C9h14v6.086C54.828%2C15.032%2C52.51%2C15%2C50%2C15c-2.51%2C0-4.828%2C0.032-7%2C0.086V9z%22%2F%3E\\a \t\t\t%3Cpath%20d%3D%22M19%2C37l6%2C62h50l6-62H19z%20M35.167%2C88.995C35.11%2C88.998%2C35.053%2C89%2C34.998%2C89c-1.581%2C0-2.904-1.236-2.993-2.834l-2-36%20%20c-0.092-1.654%2C1.175-3.07%2C2.829-3.162c1.663-0.089%2C3.07%2C1.175%2C3.162%2C2.829l2%2C36C38.087%2C87.488%2C36.821%2C88.903%2C35.167%2C88.995z%20M53%2C86\\a \t\t\t\t\t%20c0%2C1.657-1.343%2C3-3%2C3c-1.657%2C0-3-1.343-3-3V50c0-1.657%2C1.343-3%2C3-3c1.657%2C0%2C3%2C1.343%2C3%2C3V86z%20M67.995%2C86.166%20%20C67.906%2C87.764%2C66.583%2C89%2C65.003%2C89c-0.057%2C0-0.112-0.002-0.169-0.005c-1.654-0.092-2.921-1.507-2.829-3.161l2-36\\a \t\t\t\t\t%20c0.093-1.655%2C1.533-2.906%2C3.161-2.829c1.654%2C0.092%2C2.921%2C1.508%2C2.829%2C3.162L67.995%2C86.166z%22%2F%3E\\a \t\t%3C%2Fsvg%3E\");\r\n  width: 1em;\r\n  height: 1em; }\r\n```\r\nIt is valid css and all work fine. Problem located in `css-loader`, i can try to found problem and fix her in `css-loader`.. @TimoRuetten thanks for issue, duplicate https://github.com/webpack-contrib/sass-loader/issues/211\r\nShort answer\r\n1. Use common variables.scss file and include in every required file.\r\n2. Use https://github.com/shakacode/sass-resources-loader\r\n3. Implement own loader for this purpose\r\n4. Use `data` option with multiple variables (module for variables https://github.com/itgalaxy/get-sass-vars-sync)\r\n5. https://github.com/Updater/node-sass-json-importer\r\n. @jhnns friendly ping. @catamphetamine thank for issue, `node-sass` doing this?. @catamphetamine very strange in my projects all work fine, investigate. 1. Fine\r\n```css\r\n@media (max-width: 720px) {\r\n  a {\r\n    color: red;\r\n  }\r\n}\r\n```\r\n2. Fine\r\n```css\r\n@media (max-width: 720px) {\r\n  @import \"nested\";\r\n}\r\n```\r\n**_nested.scss**\r\n```css\r\na {\r\n  color: yellow;\r\n}\r\n```\r\n3. Not fine (module empty `exports.push([module.i, \"\", \"\"]);`)\r\n```css\r\n@media (max-width: 720px) {\r\n  @import \"~react-responsive-ui/small-screen.css\";\r\n}\r\n```\r\nI continue the investigation. @catamphetamine don't use `.css` extension.\r\nWorks fine.\r\n```css\r\n@media all and (max-width: 720px) {\r\n  @import \"~react-responsive-ui/small-screen\";\r\n}\r\n```. @catamphetamine http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_import__import\r\n```\r\n@import \"foo.css\";\r\n@import \"foo\" screen;\r\n@import \"http://foo.com/bar\";\r\n@import url(foo);\r\n```\r\nto\r\n```\r\n@import \"foo.css\";\r\n@import \"foo\" screen;\r\n@import \"http://foo.com/bar\";\r\n@import url(foo);\r\n```. @jhnns What do you think about this:\r\nShould we `@import \"~react-responsive-ui/small-screen.css\";` don't touch and output in result:\r\n```css\r\n@import \"~react-responsive-ui/small-screen.css\";\r\n```\r\nOr we should throw error about not resolved? Because resolve `modules` (`~`) is out of scope `node-sass`.\r\nNow we output empty content on this structure, i think it is misleading.. @catamphetamine agree, but need @jhnns answer, btw thank you for issue.. @megamindbrian problem still exists?. @spiral2k you manually install `node-sass`, which part need upgrade?. @spiral2k we use `^4.0.0` which mean also `4.5.3`. @spiral2k it is `devDependencies` only for tests, you should add `node-sass` manually in your `package.json`.. @pedrotainha please create **minimum** reproducible test repo, thank you. @pedrotainha no thanks. Btw seems something wrong with `happypack` setup. @kirbyfan64 Duplicate, please read https://github.com/webpack-contrib/sass-loader/issues/435#issuecomment-333260284. @wzup seems node-sass doesn't support long color, need investigation, thank for issue. @wzup `libsass` version `3.5.0.beta.2` don't support #rrggbbaa hex color notation, you can try this in https://www.sassmeister.com/. Please create issue in `libsass` about this, Thank you!. @artvader can you provide scss scripts, seems problem in you scss script, not in sass-loader. @joshuaaron why you use `~` for images? Also `sass` don't have url rewriting (https://github.com/webpack-contrib/sass-loader#problems-with-url). \r\n\r\n`importLoaders: 2` => `importLoaders: 1`. @joshuaaron `importLoaders` means:\r\n```scss\r\n@import \"test.css\";\r\n// if you use `importLoaders: 2`: `scss-loader` => `postcss-loader` run on this import\r\n// if you use `importLoaders: 1`: `postcss-loader` run on this import\r\n\r\n// Other scss code\r\n```\r\nAbout url, use `full` relative url - `../../img/my-img.png` (relative `root.scss`). @johnjacobkenny problem still exists? Can you create minimum reproducible test repo?. @joshuaaron in near future i investigate you problems, sorry for delay, many work :disappointed: . @chacbumbum can you provide config or minimum reproducible test repo?. @chacbumbum can you try escape `\\:global`? I am not familiar with css modules . @jainshravan123 what do you mean?. @jainshravan123 update `sass-loader` to `latest` version, if it is not solve you problem, please create minimum reproducible test repo. @jhnns friendly ping. @crazyx13th can you provide example?. @gaponenkodv which version `node-sass` and `libsass` you use?. @gaponenkodv can you create minimum reproducible test repo?. @gaponenkodv seems problem in configuration, i am not familiar with angular sass configuration, better create issue there, sorry. @d3viant0ne done. ",
    "pcvandamcb": "I get the exact same error...\n\nv0.12.3\n2.9.1\n. I've been testing around and downgrading css-loader to a version prior to 0.15 (0.14.5) fixed it for me.\n\nnpm i css-loader@0.14\n. I get the exact same error...\n\nv0.12.3\n2.9.1\n. I've been testing around and downgrading css-loader to a version prior to 0.15 (0.14.5) fixed it for me.\n\nnpm i css-loader@0.14\n. ",
    "namxam": "Me too. Any idea how to fix it?\n. Me too. Any idea how to fix it?\n. ",
    "hendrikswan": "@pcvandamcb that worked for me too! \n. @pcvandamcb that worked for me too! \n. ",
    "vectart": "Related issue https://github.com/webpack/css-loader/issues/84\n. CSS-loader v0.15.3 fixes **Ignore null source maps** by https://github.com/webpack/css-loader/pull/99\n. Related issue https://github.com/webpack/css-loader/issues/84\n. CSS-loader v0.15.3 fixes **Ignore null source maps** by https://github.com/webpack/css-loader/pull/99\n. ",
    "SunPeter": "@hendrikswan Me too.\n. @hendrikswan Me too.\n. ",
    "nathanjsharpe": "It's probably not ideal, but appending `?sourceMap` to `sass` in the loader at least fixes the error. I'm on css-loader 15.1.\n\n```\n        {\n            test: /\\.scss$/,\n            include: path.join(__dirname, 'src', 'scss'),\n            loader: \"style!css!sass?sourceMap\"\n        }\n```\n. It's probably not ideal, but appending `?sourceMap` to `sass` in the loader at least fixes the error. I'm on css-loader 15.1.\n\n```\n        {\n            test: /\\.scss$/,\n            include: path.join(__dirname, 'src', 'scss'),\n            loader: \"style!css!sass?sourceMap\"\n        }\n```\n. ",
    "lijunle": "@nathanjsharpe 's [solution](#issuecomment-119789198) resolve this problem.\n. @nathanjsharpe 's [solution](#issuecomment-119789198) resolve this problem.\n. ",
    "wmadden": ":+1: what's the ETA on this? It's been open for two weeks now?\n. :+1: what's the ETA on this? It's been open for two weeks now?\n. ",
    "otarim": "@jorrit tks bro~your solution works for me\u00a0\ud83d\ude04\n. @jorrit agree~i spend all day working on this issue,until i replace less-loader with sass and it works, Otherwise I would have thought it's my wrong way usage,hope the author write down this workaround into README that someone else will not make the same mistake\n. @jorrit tks bro~your solution works for me\u00a0\ud83d\ude04\n. @jorrit agree~i spend all day working on this issue,until i replace less-loader with sass and it works, Otherwise I would have thought it's my wrong way usage,hope the author write down this workaround into README that someone else will not make the same mistake\n. ",
    "hoosin": "@otarim tks\uff0cI'll never make the same mistake again.\n. @otarim tks\uff0cI'll never make the same mistake again.\n. ",
    "gajus": "It was an issue with the [css-loader](https://github.com/webpack/css-loader). `css-loader` is returning an `Array` object. I have written a small loader that casts object to a string, [to-string][https://github.com/gajus/to-string].\n\nIt is a simple loader that executes content like a module and casts output to a string:\n\n``` js\n/**\n * @see https://github.com/webpack/webpack/wiki/Loader-Specification\n */\nmodule.exports = function (content) {\n    return 'module.exports = ' + JSON.stringify(this.exec(content, this.resource).toString());\n};\n```\n\nFor reference http://stackoverflow.com/questions/31474515/how-to-cast-loader-output-to-a-string/31475687.\n. @jtangelder can this be published please?\n. @jtangelder If there is no technical limitation, can this be merged?\n\nCan you add me as a maintainer to the GitHub repository/ NPM?\n. It was an issue with the [css-loader](https://github.com/webpack/css-loader). `css-loader` is returning an `Array` object. I have written a small loader that casts object to a string, [to-string][https://github.com/gajus/to-string].\n\nIt is a simple loader that executes content like a module and casts output to a string:\n\n``` js\n/**\n * @see https://github.com/webpack/webpack/wiki/Loader-Specification\n */\nmodule.exports = function (content) {\n    return 'module.exports = ' + JSON.stringify(this.exec(content, this.resource).toString());\n};\n```\n\nFor reference http://stackoverflow.com/questions/31474515/how-to-cast-loader-output-to-a-string/31475687.\n. @jtangelder can this be published please?\n. @jtangelder If there is no technical limitation, can this be merged?\n\nCan you add me as a maintainer to the GitHub repository/ NPM?\n. ",
    "matthisk": "This was an issue with the CommonsChunkPlugin and setting the publicPath dynamically. See: https://github.com/webpack/webpack/issues/1268\n. This was an issue with the CommonsChunkPlugin and setting the publicPath dynamically. See: https://github.com/webpack/webpack/issues/1268\n. ",
    "aluxian": "From the README:\n\n> Starting with 1.0.0, the sass-loader requires node-sass as peerDependency. Thus you are able to specify the required version accurately.\n\nThis is so that you can choose by yourself what version of `node-sass` to use.\n. From the README:\n\n> Starting with 1.0.0, the sass-loader requires node-sass as peerDependency. Thus you are able to specify the required version accurately.\n\nThis is so that you can choose by yourself what version of `node-sass` to use.\n. ",
    "fongandrew": "Repro is here: https://github.com/fongandrew/webpack-extract-sass-test/tree/master\n\nWeirdly, it only occurs when awesome-typescript-loader is used. It might be their issue.\n. Yup, fix works. Closing this issue.\n. Repro is here: https://github.com/fongandrew/webpack-extract-sass-test/tree/master\n\nWeirdly, it only occurs when awesome-typescript-loader is used. It might be their issue.\n. Yup, fix works. Closing this issue.\n. ",
    "ALF-er": "```\nERROR in ./~/css-loader!./~/sass-loader?includePaths[]=C:/dev/projects/wp_test/node_modules!./src/app/entrypoints/main.scss\nModule not found: Error: Cannot resolve 'file' or 'directory' ./C:\u00devprojectswp_testnode_modulesbootstrapdistcssbootstrap.css in C:\\dev\\projects\\wp_test\\src\\app\\entrypoints\n @ ./~/css-loader!./~/sass-loader?includePaths[]=C:/dev/projects/wp_test/node_modules!./src/app/entrypoints/main.scss 3:10-129\n```\n\nfor me =(\n. ```\nERROR in ./~/css-loader!./~/sass-loader?includePaths[]=C:/dev/projects/wp_test/node_modules!./src/app/entrypoints/main.scss\nModule not found: Error: Cannot resolve 'file' or 'directory' ./C:\u00devprojectswp_testnode_modulesbootstrapdistcssbootstrap.css in C:\\dev\\projects\\wp_test\\src\\app\\entrypoints\n @ ./~/css-loader!./~/sass-loader?includePaths[]=C:/dev/projects/wp_test/node_modules!./src/app/entrypoints/main.scss 3:10-129\n```\n\nfor me =(\n. ",
    "janicduplessis": "I have the same issue. It seems to happen only on windows because on my mac it works fine.\n. I have the same issue. It seems to happen only on windows because on my mac it works fine.\n. ",
    "greaber": "Yeah, I was kind of shocked that it should be that complicated, but maybe I just need to get over that :)\n. @jhnns, I ran into the same issue.  No doubt it is a problem of Sass in general, but I had thought the sass-loader was intercepting `@import` statements in Sass and could do something clever.\n\nIn any case, what is the recommended practice?  Should I just be careful that no file is ever `@import`ed twice?  This would probably mean removing all `@import` statements from my per-component Sass files and just `@importing` every Sass file I use other than the per-component files in one big `main.scss` file.  Is this the right way to do it?\n\n(As an aside, I would also be OK with , and see possible benefits of, ditching Sass in favor of some JavaScript-based stylesheet language like JSS, but I am worried there might be issues that I haven't thought of converting a Sass codebase to JSS, and I am concerned that there are a million different proposals for styling React right now, and JSS doesn't seem to have particularly separated itself from the crowd.  Confusing times!)\n. Thanks, guys.  Maybe I should have known, but I didn't realize I could avoid the duplication by just being careful to avoid importing anything that outputs.  And gzip does seem like it can help out if something is still being duplicated.  I will keep on with Sass and sass-loader for the time being.\n. Yeah, I was kind of shocked that it should be that complicated, but maybe I just need to get over that :)\n. @jhnns, I ran into the same issue.  No doubt it is a problem of Sass in general, but I had thought the sass-loader was intercepting `@import` statements in Sass and could do something clever.\n\nIn any case, what is the recommended practice?  Should I just be careful that no file is ever `@import`ed twice?  This would probably mean removing all `@import` statements from my per-component Sass files and just `@importing` every Sass file I use other than the per-component files in one big `main.scss` file.  Is this the right way to do it?\n\n(As an aside, I would also be OK with , and see possible benefits of, ditching Sass in favor of some JavaScript-based stylesheet language like JSS, but I am worried there might be issues that I haven't thought of converting a Sass codebase to JSS, and I am concerned that there are a million different proposals for styling React right now, and JSS doesn't seem to have particularly separated itself from the crowd.  Confusing times!)\n. Thanks, guys.  Maybe I should have known, but I didn't realize I could avoid the duplication by just being careful to avoid importing anything that outputs.  And gzip does seem like it can help out if something is still being duplicated.  I will keep on with Sass and sass-loader for the time being.\n. ",
    "tappleby": "I use the following setup:\n\napp.scss:\n\n``` scss\n@import \"config/bootstrap\";\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap\";\n```\n\nconfig/_bootstrap.scss:\n\n``` scss\n$icon-font-path: '~bootstrap-sass/assets/fonts/bootstrap/';\n// ... other custom variables\n```\n\nThe issue I am running into with this setup is sass build times spike to ~2.3 seconds... havent been able to figure out why.\n. I use the following setup:\n\napp.scss:\n\n``` scss\n@import \"config/bootstrap\";\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap\";\n```\n\nconfig/_bootstrap.scss:\n\n``` scss\n$icon-font-path: '~bootstrap-sass/assets/fonts/bootstrap/';\n// ... other custom variables\n```\n\nThe issue I am running into with this setup is sass build times spike to ~2.3 seconds... havent been able to figure out why.\n. ",
    "endaaman": "I'm very sorry. Im just an amateur at coding.\nYou don't have to merge this PR. But please acknowledge the problem...\n. Do you mean it should be like this?\n\n```\n    // line: 165\n    sass.render(opt, function onRender(err, result) {\n        if (err) {\n            addIncludedFilesToWebpack([err.file]);\n            formatSassError(err);\n            callback(err);\n            return;\n        }\n```\n\nIf it is so, this does'nt work well. \n\n```\n// style.scss\n@import \"external\";\n```\n\n```\n//  _external.scss\n@import \"more-external\";\n```\n\n```\n// _more-external.scss (missing closing brace)\n.red {\n  color: red;\n```\n\nIf you build this, fail and comment out `@import \"more-external\";` in  `_external.scss`, Webpack will not recompile because Webpack is watching only `_more-external.scss` and can't detect `_external.scss` is modified.\n. I just confirmed this problem is fixed! Thanks ;)\n. I'm very sorry. Im just an amateur at coding.\nYou don't have to merge this PR. But please acknowledge the problem...\n. Do you mean it should be like this?\n\n```\n    // line: 165\n    sass.render(opt, function onRender(err, result) {\n        if (err) {\n            addIncludedFilesToWebpack([err.file]);\n            formatSassError(err);\n            callback(err);\n            return;\n        }\n```\n\nIf it is so, this does'nt work well. \n\n```\n// style.scss\n@import \"external\";\n```\n\n```\n//  _external.scss\n@import \"more-external\";\n```\n\n```\n// _more-external.scss (missing closing brace)\n.red {\n  color: red;\n```\n\nIf you build this, fail and comment out `@import \"more-external\";` in  `_external.scss`, Webpack will not recompile because Webpack is watching only `_more-external.scss` and can't detect `_external.scss` is modified.\n. I just confirmed this problem is fixed! Thanks ;)\n. ",
    "fraina": "+1, it would be awesome if I don't have to check extension before import module's stylesheets.\n\ne.g. \n\n``` sass\n@import './node_modules/susy/sass/susy'\n@import './node_modules/breakpoint-sass/stylesheets/breakpoint'\n@import 'foundation/susy_config'\n```\n\ninstead of\n\n``` sass\n@import './node_modules/susy/sass/susy.scss'\n@import './node_modules/breakpoint-sass/stylesheets/breakpoint.scss'\n@import 'foundation/susy_config'\n```\n. +1, it would be awesome if I don't have to check extension before import module's stylesheets.\n\ne.g. \n\n``` sass\n@import './node_modules/susy/sass/susy'\n@import './node_modules/breakpoint-sass/stylesheets/breakpoint'\n@import 'foundation/susy_config'\n```\n\ninstead of\n\n``` sass\n@import './node_modules/susy/sass/susy.scss'\n@import './node_modules/breakpoint-sass/stylesheets/breakpoint.scss'\n@import 'foundation/susy_config'\n```\n. ",
    "indigofeather": "Hello, @jorrit \nI just use `['', '.js']` in `resolve.extensions`, and `loaders` has:\n\n``` js\n  {\n    test: /\\.scss$|\\.sass$/,\n    loader: ExtractTextPlugin.extract('css-loader?sourceMap!autoprefixer-loader?{browsers:[\"last 2 version\"]}!sass-loader?indentedSyntax&sourceMap&sourceMapContents')\n  }\n```\n. Hello @jhnns \nI've tested the current master branch, it works!\n. Waiting for the next version :+1: \n. Hello, @jorrit \nI just use `['', '.js']` in `resolve.extensions`, and `loaders` has:\n\n``` js\n  {\n    test: /\\.scss$|\\.sass$/,\n    loader: ExtractTextPlugin.extract('css-loader?sourceMap!autoprefixer-loader?{browsers:[\"last 2 version\"]}!sass-loader?indentedSyntax&sourceMap&sourceMapContents')\n  }\n```\n. Hello @jhnns \nI've tested the current master branch, it works!\n. Waiting for the next version :+1: \n. ",
    "rlucha": "+1 same here\n. +1 same here\n. ",
    "Lordnibbler": "@lili21 i got this same error, any explanation of how you resolved it?\n. Ah, after a little more digging I found this: https://github.com/Aintaer/import-glob-loader\n\nSeems to work nicely but only for globbed imports that are relative to current path, ie. `@import \"foo/**/*\"` works fine, but `@import \"../foo/**/*\"` does not.\n. @lili21 i got this same error, any explanation of how you resolved it?\n. Ah, after a little more digging I found this: https://github.com/Aintaer/import-glob-loader\n\nSeems to work nicely but only for globbed imports that are relative to current path, ie. `@import \"foo/**/*\"` works fine, but `@import \"../foo/**/*\"` does not.\n. ",
    "lili21": "@Lordnibbler Actually, I just closed laptop, went home, and sleep. Then next day, It just works, like a magic.\n. @Andrey7287\r\n> setting the sourceMap option in css-loader to false. @Lordnibbler Actually, I just closed laptop, went home, and sleep. Then next day, It just works, like a magic.\n. @Andrey7287\r\n> setting the sourceMap option in css-loader to false. ",
    "xusiyuan841028": "@jorrit Could you tell me the referred commit for fixing this issue? Thanks.\n. Closed\n. @jorrit Could you tell me the referred commit for fixing this issue? Thanks.\n. Closed\n. ",
    "rtlong": "Also, checked that using `node-sass@3.2.0` and `sass-loader@2.0.0`\n. Huh... wouldn't you know it. I upgrade to Firefox 40.0 and now it's less picky. Well, nevermind, then...\n. Also, checked that using `node-sass@3.2.0` and `sass-loader@2.0.0`\n. Huh... wouldn't you know it. I upgrade to Firefox 40.0 and now it's less picky. Well, nevermind, then...\n. ",
    "bholloway": "Will get going on a PR.\n\nRegarding consolidation with the **css loader** - I think you are correct in your existing `readme.md` where you imply that the root of the problem is with Sass.\n\n**_<rant>**_\nFor **Sass** I believe the recommended practice is a root `scss` file and a set of library `scss` files prefixed with an underscore. The assets being specified relative to the output `css`, not any of the `scss` source files. This makes all _fully relative_ references _root-relative_ to the output folder. \n\nAs you point out, this is a deficit from **Sass** not managing the `url()`; all values must be final. However in the context of the `scss` file it is counter-intuitive: Conversely an equivalent `css` file will resolve assets relative to the `css` in which it is specified.\n\nIn particular it makes it difficult to cherry-pick files from different libraries. Given only the library file, we have no way of reliably detecting the intended output directory and so cannot resolve _relative_ references in the file. Frameworks such as **bootstrap-sass** are forced to compose `url()` with variables to allow users to work around their individual use case.\n**_</rant>**_\n\nGiven that we are 'fixing' this behaviour, my gut tells me it would be more correct to encapsulate this in the **sass loader** rather than address it in the **css** loader, regardless of where the efficiencies lie.\n\nThat said the [convention](http://webpack.github.io/docs/how-to-write-a-loader.html#do-only-a-single-task) is against being monolithic. And for those comfortable with the standard sass behaviour you would certainly want to save them the parsing and synchronous file-system operations involved in the 'fix'.\n\nBut I would say first see whether this solution proves to be successful and is the dominant use case for **sass loader**.\n. Thanks @jhnns!\n. Sorry I am not across this, I'm afk for at least a week. Just bad timing.\n\nThe source map base path isn't well standardised across loaders. I use\n[adjust-sourcemap-loader] bholloway/adjust-sourcemap-loader) myself.\n\nIs this change a done thing?\n\nI would leave this for a major release if it changes default behaviour of\nany kind. The output-relative had to be working for someone up until now\nand they will be annoyed.\n\nOr put it under an optional flag and call it a minor release.\n. @jhnns given that you can't unpublish `3.2.2`. Could you branch an orphan from tag `3.2.1` and re-release as `3.3.3`.\n\nIt would make it easier to specify to my users `sass-loader@<4` and it would definitely move the breaking change to `4.0.0`.\n. Ah yes. Sorry I thought I read that somewhere but I didn't see it in the tags. I should have checked with `npm`.\n\nAll good.\n. @jhnns Can you confirm that module imports (i.e. tilde `~`) are relative to the entry file? I am seeing otherwise.\r\n\r\nI will try to reproduce with your `/test` project.. @jhnns I have tweaked your `bootstrapSass` test to debug the source-maps.\r\n\r\nThe source code is in [this gist](https://gist.github.com/bholloway/68ac1225b633cfc79ca5572232ae2995). It requires you to install `adjust-sourcemap-loader`.\r\n\r\nThe overall output is of the form:\r\n```json\r\n{\r\n  \"sources\": [\r\n    \"webpack:///webpack:///test/scss/bootstrap-sass.scss\",\r\n    \"webpack:///webpack:///test/scss/~/bootstrap-sass/assets/stylesheets/_bootstrap.scss\"\r\n    ...\r\n  ]\r\n  ...,\r\n  \"sourceRoot\": \"\"\r\n}\r\n```\r\nWe can ignore the repeated `webpack:///` protocol for now. It has been a while since I debugged source-maps but the tilde in the path certainly feels wrong.\r\n\r\nI am less interested in the overall output and more interested in what goes into the `resolve-url-loader`.\r\n\r\nThe debug output from `adjust-sourcemap-loader` shows the source-map following `sass-loader` (i.e. at its input):\r\n\r\n```\r\nINPUT bootstrap-sass.scss\r\n      node_modules/bootstrap-sass/assets/stylesheets/_bootstrap.scss\r\n      node_modules/bootstrap-sass/assets/stylesheets/bootstrap/_variables.scss\r\n      ...\r\n```\r\n\r\nWhile this debug info does not include the `sourceRoot` I believe a `\"sourceRoot\": \"test/scss\"` would produce the overall output we see above. However you can see there is **no common source root possible for these paths**. \r\n\r\n(Please Note the `adjust-sourcemap-loader` will try to locate files using all the CODECs at its disposal. That is the ABSOLUTE path in the debug output. However that does not help us here.)\r\n. @jhnns There is good news and bad news. I will comment on #377 because it is still open.. @jhnns I wish there was some standard for this because every loader does it differently. Some are really broken on windows too.\r\n\r\nI think this will work. When content is not embedded then it will need to be **served** to the browser. So we should avoid `../` paths in the source-map. The shallowest common directory is usually `process.cwd()` (or close to it) so I think you are safe there.\r\n\r\nI learned of some users that have sources outside `process.cwd()`. And with `npm link` this can be easy to do. But I think these are the edge cases that maybe cannot (easily) be served anyway.\r\n\r\nInterestingly (in Webpack 1 at least) all of this is unlikely to influence the final source-map. That is done by [`devtoolModuleFilenameTemplate`](https://github.com/bholloway/adjust-sourcemap-loader#usage--module-filename-template).. @jhnns \r\n**The good news:**\r\n\r\nI believe this fixes the source-map sources inconsistency from the original comment.\r\n\r\nI have tested the hacked version of your Webpack 2 project that includes some `resolve-url-loader` processing.\r\n\r\nI say MERGE!\r\n\r\n**The bad news (not your problem):**\r\n\r\nI believe that `node-sass@>=4` has a problem with the source map. There are negative `original` mappings. For example:\r\n```\r\n\"original\":{\"line\":15,\"column\":-12}\r\n```\r\n\r\nWhen I made the [#374 comment](https://github.com/jtangelder/sass-loader/pull/374#issuecomment-279572238) I believed that it did not effect `resolve-url-loader`. \r\n\r\nHowever it seems like it is a problem for `resolve-url-loader`in in my Webpack 1 project. I have inserted some `resolve-url-loader` processing in your Webpack 2 tests and that is not a problem.\r\n\r\nHopefully there is some error in my Webpack 1 test methodology and `resolve-url-loader` is immune to this as I originally had hoped.\r\n\r\nHave you encountered this? I think this is not your problem, or at least, a different issue.. Will get going on a PR.\n\nRegarding consolidation with the **css loader** - I think you are correct in your existing `readme.md` where you imply that the root of the problem is with Sass.\n\n**_<rant>**_\nFor **Sass** I believe the recommended practice is a root `scss` file and a set of library `scss` files prefixed with an underscore. The assets being specified relative to the output `css`, not any of the `scss` source files. This makes all _fully relative_ references _root-relative_ to the output folder. \n\nAs you point out, this is a deficit from **Sass** not managing the `url()`; all values must be final. However in the context of the `scss` file it is counter-intuitive: Conversely an equivalent `css` file will resolve assets relative to the `css` in which it is specified.\n\nIn particular it makes it difficult to cherry-pick files from different libraries. Given only the library file, we have no way of reliably detecting the intended output directory and so cannot resolve _relative_ references in the file. Frameworks such as **bootstrap-sass** are forced to compose `url()` with variables to allow users to work around their individual use case.\n**_</rant>**_\n\nGiven that we are 'fixing' this behaviour, my gut tells me it would be more correct to encapsulate this in the **sass loader** rather than address it in the **css** loader, regardless of where the efficiencies lie.\n\nThat said the [convention](http://webpack.github.io/docs/how-to-write-a-loader.html#do-only-a-single-task) is against being monolithic. And for those comfortable with the standard sass behaviour you would certainly want to save them the parsing and synchronous file-system operations involved in the 'fix'.\n\nBut I would say first see whether this solution proves to be successful and is the dominant use case for **sass loader**.\n. Thanks @jhnns!\n. Sorry I am not across this, I'm afk for at least a week. Just bad timing.\n\nThe source map base path isn't well standardised across loaders. I use\n[adjust-sourcemap-loader] bholloway/adjust-sourcemap-loader) myself.\n\nIs this change a done thing?\n\nI would leave this for a major release if it changes default behaviour of\nany kind. The output-relative had to be working for someone up until now\nand they will be annoyed.\n\nOr put it under an optional flag and call it a minor release.\n. @jhnns given that you can't unpublish `3.2.2`. Could you branch an orphan from tag `3.2.1` and re-release as `3.3.3`.\n\nIt would make it easier to specify to my users `sass-loader@<4` and it would definitely move the breaking change to `4.0.0`.\n. Ah yes. Sorry I thought I read that somewhere but I didn't see it in the tags. I should have checked with `npm`.\n\nAll good.\n. @jhnns Can you confirm that module imports (i.e. tilde `~`) are relative to the entry file? I am seeing otherwise.\r\n\r\nI will try to reproduce with your `/test` project.. @jhnns I have tweaked your `bootstrapSass` test to debug the source-maps.\r\n\r\nThe source code is in [this gist](https://gist.github.com/bholloway/68ac1225b633cfc79ca5572232ae2995). It requires you to install `adjust-sourcemap-loader`.\r\n\r\nThe overall output is of the form:\r\n```json\r\n{\r\n  \"sources\": [\r\n    \"webpack:///webpack:///test/scss/bootstrap-sass.scss\",\r\n    \"webpack:///webpack:///test/scss/~/bootstrap-sass/assets/stylesheets/_bootstrap.scss\"\r\n    ...\r\n  ]\r\n  ...,\r\n  \"sourceRoot\": \"\"\r\n}\r\n```\r\nWe can ignore the repeated `webpack:///` protocol for now. It has been a while since I debugged source-maps but the tilde in the path certainly feels wrong.\r\n\r\nI am less interested in the overall output and more interested in what goes into the `resolve-url-loader`.\r\n\r\nThe debug output from `adjust-sourcemap-loader` shows the source-map following `sass-loader` (i.e. at its input):\r\n\r\n```\r\nINPUT bootstrap-sass.scss\r\n      node_modules/bootstrap-sass/assets/stylesheets/_bootstrap.scss\r\n      node_modules/bootstrap-sass/assets/stylesheets/bootstrap/_variables.scss\r\n      ...\r\n```\r\n\r\nWhile this debug info does not include the `sourceRoot` I believe a `\"sourceRoot\": \"test/scss\"` would produce the overall output we see above. However you can see there is **no common source root possible for these paths**. \r\n\r\n(Please Note the `adjust-sourcemap-loader` will try to locate files using all the CODECs at its disposal. That is the ABSOLUTE path in the debug output. However that does not help us here.)\r\n. @jhnns There is good news and bad news. I will comment on #377 because it is still open.. @jhnns I wish there was some standard for this because every loader does it differently. Some are really broken on windows too.\r\n\r\nI think this will work. When content is not embedded then it will need to be **served** to the browser. So we should avoid `../` paths in the source-map. The shallowest common directory is usually `process.cwd()` (or close to it) so I think you are safe there.\r\n\r\nI learned of some users that have sources outside `process.cwd()`. And with `npm link` this can be easy to do. But I think these are the edge cases that maybe cannot (easily) be served anyway.\r\n\r\nInterestingly (in Webpack 1 at least) all of this is unlikely to influence the final source-map. That is done by [`devtoolModuleFilenameTemplate`](https://github.com/bholloway/adjust-sourcemap-loader#usage--module-filename-template).. @jhnns \r\n**The good news:**\r\n\r\nI believe this fixes the source-map sources inconsistency from the original comment.\r\n\r\nI have tested the hacked version of your Webpack 2 project that includes some `resolve-url-loader` processing.\r\n\r\nI say MERGE!\r\n\r\n**The bad news (not your problem):**\r\n\r\nI believe that `node-sass@>=4` has a problem with the source map. There are negative `original` mappings. For example:\r\n```\r\n\"original\":{\"line\":15,\"column\":-12}\r\n```\r\n\r\nWhen I made the [#374 comment](https://github.com/jtangelder/sass-loader/pull/374#issuecomment-279572238) I believed that it did not effect `resolve-url-loader`. \r\n\r\nHowever it seems like it is a problem for `resolve-url-loader`in in my Webpack 1 project. I have inserted some `resolve-url-loader` processing in your Webpack 2 tests and that is not a problem.\r\n\r\nHopefully there is some error in my Webpack 1 test methodology and `resolve-url-loader` is immune to this as I originally had hoped.\r\n\r\nHave you encountered this? I think this is not your problem, or at least, a different issue.. ",
    "Shinobi881": "@bholloway You rock so freaking hard!!!!\n. @bholloway You rock so freaking hard!!!!\n. ",
    "kenotron": "You can overcome this with https://github.com/at-import/node-sass-import-once - maybe for now, it's a special case until 4.0 comes out!\n. I've had great success doing this:\n1. npm install node-sass-importer --save-dev\n2. in webpack config add:\n\n```\nvar importer = require(\"node-sass-importer\");\n\n...\n\n\nsassConfig: {\n    importer: importer\n}\n\n```\n1. Make sure your @import's all are relative to the webpack config file (hopefully in root where you run webpack)\n. You can overcome this with https://github.com/at-import/node-sass-import-once - maybe for now, it's a special case until 4.0 comes out!\n. I've had great success doing this:\n1. npm install node-sass-importer --save-dev\n2. in webpack config add:\n\n```\nvar importer = require(\"node-sass-importer\");\n\n...\n\n\nsassConfig: {\n    importer: importer\n}\n\n```\n1. Make sure your @import's all are relative to the webpack config file (hopefully in root where you run webpack)\n. ",
    "wzup": "@jsg2021 and how do you import `@media` queries with your approach?\n. @jhnns ,\r\n\r\nRegarding `LoaderOptionsPlugin`. Tutorial [says](https://webpack.js.org/plugins/loader-options-plugin/):\r\n\r\n> This plugin will be removed in the future as it only exists for migration.\r\n\r\nDo you have any info already about what to use instead?. Same here. Hey, when will you fix it?. Loader's `include` option solved the issue.\r\n\r\n```\r\nmodule: {\r\n    loaders: [\r\n        {\r\n            test: /\\.(scss|sass)$/i,\r\n            include: [\r\n                path.resolve(__dirname, 'node_modules'),\r\n                path.resolve(__dirname, 'path/to/imported/file/dir'), <== This solved the issue\r\n            ],\r\n            loaders: [\"css\", \"sass\"]\r\n        },\r\n    ]\r\n},\r\n```. @jsg2021 and how do you import `@media` queries with your approach?\n. @jhnns ,\r\n\r\nRegarding `LoaderOptionsPlugin`. Tutorial [says](https://webpack.js.org/plugins/loader-options-plugin/):\r\n\r\n> This plugin will be removed in the future as it only exists for migration.\r\n\r\nDo you have any info already about what to use instead?. Same here. Hey, when will you fix it?. Loader's `include` option solved the issue.\r\n\r\n```\r\nmodule: {\r\n    loaders: [\r\n        {\r\n            test: /\\.(scss|sass)$/i,\r\n            include: [\r\n                path.resolve(__dirname, 'node_modules'),\r\n                path.resolve(__dirname, 'path/to/imported/file/dir'), <== This solved the issue\r\n            ],\r\n            loaders: [\"css\", \"sass\"]\r\n        },\r\n    ]\r\n},\r\n```. ",
    "jogjayr": "@kenotron I've had trouble with resolving `url` font files in SCSS when I use node-sass-import-once. Posted a question on SO here: https://stackoverflow.com/questions/36926521/webpack-resolve-url-loader-cannot-resolve-font-url . Any idea what I'm doing wrong?\n. @kenotron I've had trouble with resolving `url` font files in SCSS when I use node-sass-import-once. Posted a question on SO here: https://stackoverflow.com/questions/36926521/webpack-resolve-url-loader-cannot-resolve-font-url . Any idea what I'm doing wrong?\n. ",
    "felixjung": "I've tried node-sass-importer as suggested by @kenotron. Unfortunately, it seems to have issues with relative imports. We use local styles in our angular project, locating component styles next to the component's javascript. Inside the javascript we import the styles `import './foo.scss`. This does not seem to work with node-sass-importer, although I thought files would still be resolved using webpack?\n\n**Some excerpts from the webpack config**\n\nThe sass loader should work in the scripts and styles directories:\n\n``` js\n      {\n        test: /\\.scss$/, loader: 'style!css?-minimize!sass',\n        include: [\n          path.resolve(__dirname, 'app/scripts'),\n          path.resolve(__dirname, 'app/styles')\n        ]\n      },\n```\n\nWe inject the node-sass-importer. From taking a brief look at the sass-loader code, I think the webpack importer is still pushed on top of this? I.e. the importer reaching node-sass is `[node-sass-importer, webpack-importer]` (using some pseudo code here...).\n\n``` js\n  sassConfig: {\n    importer: importer\n  },\n```\n\nWebpack should look in these places when resolving dependencies:\n\n``` js\nresolve: {\n    root: [\n      path.resolve(__dirname, 'app/scripts'),\n      path.resolve(__dirname, 'app/icons'),\n      path.resolve(__dirname, 'bower_components'),\n      path.resolve(__dirname, 'app/styles/sass'),\n      path.resolve(__dirname, 'test')\n    ],\n}\n```\n\nOur components all use some styles from our global brand stylesheets, so we need to import the global stylesheets for each component. This leads to a lot of style duplication and makes working with Safari's dev tools impossible. The browser just isn't able to handle all these duplicate rules.\n\nAny ideas on how to fix this?\n. Nevermind, I found the issues were related to what we exactly imported in those shared chunks. Fixed it by optimizing that and ensuring we only import mixins, variables, etc.\n\nThanks for this great loader!\n. I've tried node-sass-importer as suggested by @kenotron. Unfortunately, it seems to have issues with relative imports. We use local styles in our angular project, locating component styles next to the component's javascript. Inside the javascript we import the styles `import './foo.scss`. This does not seem to work with node-sass-importer, although I thought files would still be resolved using webpack?\n\n**Some excerpts from the webpack config**\n\nThe sass loader should work in the scripts and styles directories:\n\n``` js\n      {\n        test: /\\.scss$/, loader: 'style!css?-minimize!sass',\n        include: [\n          path.resolve(__dirname, 'app/scripts'),\n          path.resolve(__dirname, 'app/styles')\n        ]\n      },\n```\n\nWe inject the node-sass-importer. From taking a brief look at the sass-loader code, I think the webpack importer is still pushed on top of this? I.e. the importer reaching node-sass is `[node-sass-importer, webpack-importer]` (using some pseudo code here...).\n\n``` js\n  sassConfig: {\n    importer: importer\n  },\n```\n\nWebpack should look in these places when resolving dependencies:\n\n``` js\nresolve: {\n    root: [\n      path.resolve(__dirname, 'app/scripts'),\n      path.resolve(__dirname, 'app/icons'),\n      path.resolve(__dirname, 'bower_components'),\n      path.resolve(__dirname, 'app/styles/sass'),\n      path.resolve(__dirname, 'test')\n    ],\n}\n```\n\nOur components all use some styles from our global brand stylesheets, so we need to import the global stylesheets for each component. This leads to a lot of style duplication and makes working with Safari's dev tools impossible. The browser just isn't able to handle all these duplicate rules.\n\nAny ideas on how to fix this?\n. Nevermind, I found the issues were related to what we exactly imported in those shared chunks. Fixed it by optimizing that and ensuring we only import mixins, variables, etc.\n\nThanks for this great loader!\n. ",
    "lauterry": "Hi @felixjung\n\nHow did you exactly optimize that please ?\n. Thanks @mattaningram for the clarification !\n. Hi @felixjung\n\nHow did you exactly optimize that please ?\n. Thanks @mattaningram for the clarification !\n. ",
    "mattaningram": "@lauterry To clarify, he is insuring that SCSS files imported across multiple components only contain things like variables and mixins which don't actually turn into CSS output. Thus the final CSS output won't have duplicate styling in it.\n\nIf you want to import non-variable or non-mixin styles for more than one component, it's more efficient to import that just once at a higher level component or just in a standard CSS file to avoid duplication.\n. @MatthewKosloski This was the exact issue I was having in addition to the duplicates, I couldn't find any way to set the import order of SCSS files. This became such a frustration I eventually stopped importing SCSS files in React components and just did it the \"old fashioned\" way in a big style.scss file which solved all my duplication and order issues, however loses the benefit of only loading the CSS needed for particular components.\n\nThat being said the final CSS file gets cached, so it's not much of an impact to load times after the first time they load a page on your site. It also simplifies having to remember which SCSS files you need for each component.\n\nIt would be nice if there was some way of setting a universal order priority for component imports, but that would mean one more thing to keep track of and update as you add new .scss files, so for now I'm happy with the traditional approach.\n. @lauterry To clarify, he is insuring that SCSS files imported across multiple components only contain things like variables and mixins which don't actually turn into CSS output. Thus the final CSS output won't have duplicate styling in it.\n\nIf you want to import non-variable or non-mixin styles for more than one component, it's more efficient to import that just once at a higher level component or just in a standard CSS file to avoid duplication.\n. @MatthewKosloski This was the exact issue I was having in addition to the duplicates, I couldn't find any way to set the import order of SCSS files. This became such a frustration I eventually stopped importing SCSS files in React components and just did it the \"old fashioned\" way in a big style.scss file which solved all my duplication and order issues, however loses the benefit of only loading the CSS needed for particular components.\n\nThat being said the final CSS file gets cached, so it's not much of an impact to load times after the first time they load a page on your site. It also simplifies having to remember which SCSS files you need for each component.\n\nIt would be nice if there was some way of setting a universal order priority for component imports, but that would mean one more thing to keep track of and update as you add new .scss files, so for now I'm happy with the traditional approach.\n. ",
    "MatthewKosloski": "@mattaningram \n\n>  If you want to import non-variable or non-mixin styles for more than one component, it's more efficient to import that just once at a higher level component or just in a standard CSS file to avoid duplication.\n\nI'm trying to add Normalize.css to my stylesheet, and to avoid duplications.  I imported it in the high level component; however, it's at the bottom of the style cascade...\n\nI can't include a link to Normalize in my HTML because it's a node module.  Also, I really only want one, compressed CSS file.\n\n_Consider the following file structure:_\n\n```\ncomponents\n    Foo\n        foo.scss\n    Bar\n        bar.scss\napp.js\napp.scss\n```\n\n_App.js is an entry point like so:_\n\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport Foo from './components/Foo';\nimport Bar from './components/Bar';\nimport s from './app.scss';\n\nconst app = (\n    <div>\n        <Foo />\n        <Bar />\n    </div>\n);\n\nrender(app, document.getElementById('app'));\n```\n\n_Here is app.scss:_\n\n```\n@import '~normalize';\n```\n\n_Depiction of the outputted bundle, or the \"cascade.\"  (I need Normalize on top):_\n\n```\nFoo's rules (foo.scss)\nBar's rules (bar.scss)\nNormalize.css (app.scss)\n```\n. @mattaningram \n\n>  If you want to import non-variable or non-mixin styles for more than one component, it's more efficient to import that just once at a higher level component or just in a standard CSS file to avoid duplication.\n\nI'm trying to add Normalize.css to my stylesheet, and to avoid duplications.  I imported it in the high level component; however, it's at the bottom of the style cascade...\n\nI can't include a link to Normalize in my HTML because it's a node module.  Also, I really only want one, compressed CSS file.\n\n_Consider the following file structure:_\n\n```\ncomponents\n    Foo\n        foo.scss\n    Bar\n        bar.scss\napp.js\napp.scss\n```\n\n_App.js is an entry point like so:_\n\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport Foo from './components/Foo';\nimport Bar from './components/Bar';\nimport s from './app.scss';\n\nconst app = (\n    <div>\n        <Foo />\n        <Bar />\n    </div>\n);\n\nrender(app, document.getElementById('app'));\n```\n\n_Here is app.scss:_\n\n```\n@import '~normalize';\n```\n\n_Depiction of the outputted bundle, or the \"cascade.\"  (I need Normalize on top):_\n\n```\nFoo's rules (foo.scss)\nBar's rules (bar.scss)\nNormalize.css (app.scss)\n```\n. ",
    "dms1lva": "For the record, unless I messed something up, [sass-import-once](https://github.com/wilsonpage/sass-import-once/blob/master/examples/1/reset.scss) does not work with the sass loader. It makes sense because the mixin provided by sass-import-once can't keep track of the imports for the specified module since the sass-loader has isolated contexts.\r\n\r\n. For the record, unless I messed something up, [sass-import-once](https://github.com/wilsonpage/sass-import-once/blob/master/examples/1/reset.scss) does not work with the sass loader. It makes sense because the mixin provided by sass-import-once can't keep track of the imports for the specified module since the sass-loader has isolated contexts.\r\n\r\n. ",
    "alberto2000": "Any update on this? Can't seem to get rid of those duplicates.. Any update on this? Can't seem to get rid of those duplicates.. ",
    "phun-ky": "While the original issue here is related to sass/less/stylus, a fix/hack/patch for this is to use the `optimize-css-assets-webpack-plugin` in conjunction with `extract-text-webpack-plugin` to produce, like this: https://gist.github.com/phun-ky/766e5ec9f75eac61c945273a951f0c0b. \r\n\r\nIf you want to use this in dev, you will have to use a plugin like `write-file-webpack-plugin` to force webpack to write the file to disk in dev.. While the original issue here is related to sass/less/stylus, a fix/hack/patch for this is to use the `optimize-css-assets-webpack-plugin` in conjunction with `extract-text-webpack-plugin` to produce, like this: https://gist.github.com/phun-ky/766e5ec9f75eac61c945273a951f0c0b. \r\n\r\nIf you want to use this in dev, you will have to use a plugin like `write-file-webpack-plugin` to force webpack to write the file to disk in dev.. ",
    "powah": "@phun-ky You saved my day! I was encountering the same issue with my SCSS files included several times (9 in my case!) when components included their own dependencies and was really frustrated while searching for a solution to this. Then I tried `optimize-css-assets-webpack-plugin` as you suggested in the gist and - IT WORKS!. @phun-ky You saved my day! I was encountering the same issue with my SCSS files included several times (9 in my case!) when components included their own dependencies and was really frustrated while searching for a solution to this. Then I tried `optimize-css-assets-webpack-plugin` as you suggested in the gist and - IT WORKS!. ",
    "rw3iss": "Any ideas on how to get the node-sass-imported / sassConfig property to be recognized by Webpack 3?\r\n\r\nUPDATE:\r\n\r\nWebpack 3 entry should go within module.rules[X].loader.use[Y].options { importer: nodeSassImporter} \r\nie:\r\n\r\n```\r\n module: {\r\n        rules: [\r\n            {\r\n                test: /\\.scss$/,\r\n                include: APP_DIR,\r\n                exclude: /node_modules/,\r\n                loader: extractSass.extract({\r\n                    use: [\r\n                        { loader: 'css-loader?sourceMap' }, \r\n                        { \r\n                            loader: 'sass-loader?sourceMap',\r\n                            options: {\r\n                                importer: nodeSassImporter\r\n                            }\r\n                        }\r\n                    ],\r\n                    fallback: 'style-loader'\r\n                })\r\n            }\r\n        ]\r\n    },\r\n```\r\n\r\nHowever, it isn't ignoring duplicates, still including them :(. Any ideas on how to get the node-sass-imported / sassConfig property to be recognized by Webpack 3?\r\n\r\nUPDATE:\r\n\r\nWebpack 3 entry should go within module.rules[X].loader.use[Y].options { importer: nodeSassImporter} \r\nie:\r\n\r\n```\r\n module: {\r\n        rules: [\r\n            {\r\n                test: /\\.scss$/,\r\n                include: APP_DIR,\r\n                exclude: /node_modules/,\r\n                loader: extractSass.extract({\r\n                    use: [\r\n                        { loader: 'css-loader?sourceMap' }, \r\n                        { \r\n                            loader: 'sass-loader?sourceMap',\r\n                            options: {\r\n                                importer: nodeSassImporter\r\n                            }\r\n                        }\r\n                    ],\r\n                    fallback: 'style-loader'\r\n                })\r\n            }\r\n        ]\r\n    },\r\n```\r\n\r\nHowever, it isn't ignoring duplicates, still including them :(. ",
    "AndyOGo": "This should be supported by `sass-loader`.\r\n\r\nBecause the `node-sass` API is offering a custom [`importer`](https://github.com/sass/node-sass#importer--v200---experimental) option, which is implemented like [`node-sass-import-once`](https://github.com/at-import/node-sass-import-once).\r\n\r\nMeanwhile maybe `sass-loader-once` is usable.\r\n\r\nPlease **reopen** this issue.. This should be supported by `sass-loader`.\r\n\r\nBecause the `node-sass` API is offering a custom [`importer`](https://github.com/sass/node-sass#importer--v200---experimental) option, which is implemented like [`node-sass-import-once`](https://github.com/at-import/node-sass-import-once).\r\n\r\nMeanwhile maybe `sass-loader-once` is usable.\r\n\r\nPlease **reopen** this issue.. ",
    "valoricDe": "@evilebottnawi which `minificator`? Does it have advantages over `optimize-css-assets-webpack-plugin`?. @evilebottnawi which `minificator`? Does it have advantages over `optimize-css-assets-webpack-plugin`?. ",
    "NauxChen": "sorry,this is writing mistake\u3002\n_somename.scss  shouldn\u2019t be compiled to .css files,but base file can find it. It's work in gulp\n\nwebpack -p, get follow:\n\n``` bash\nModule build failed: \n@import 'button.scss';     #filename is \"_button.scss\n       ^\n      File to import not found or unreadable: button.scss\n      In core/core.scss \n```\n\nI modify core.scss, write `@import '_button.scss'` . Build success.\nTHX.           \n. sorry,this is writing mistake\u3002\n_somename.scss  shouldn\u2019t be compiled to .css files,but base file can find it. It's work in gulp\n\nwebpack -p, get follow:\n\n``` bash\nModule build failed: \n@import 'button.scss';     #filename is \"_button.scss\n       ^\n      File to import not found or unreadable: button.scss\n      In core/core.scss \n```\n\nI modify core.scss, write `@import '_button.scss'` . Build success.\nTHX.           \n. ",
    "adjavaherian": "I think I've been able to reproduce it on this branch.  https://github.com/adjavaherian/sass-lifter-loader/tree/node-sass-threadpool-issue  If you npm start the branch in the current state, the process ties up and just hangs, but if you go to index.js and change the threadpool size to 4, `process.env.UV_THREADPOOL_SIZE = 4;` it will compile.  Conversely, if you leave the threadpool size at 5 and remove `@import \"./base\";` from example/scss/Frontpage.scss and YetAnother.scss (there are 4 imports total), the thread will hang.\n\nIt's tricky and very well could be a something to do with the way I'm creating new webpack instances from within a webpack loader.\n. I dont seem to have this problem anymore and I'm pretty sure we're using the master branch, so not sure what happened exactly.  Hopefully this doesnt cause more confusion.  :) Lemme double check in a bit.\n\nSent from my iPony\n\n> On Oct 26, 2015, at 9:46 AM, Johannes Ewald notifications@github.com wrote:\n> \n> That's nice \n> \n> Could anyone reading this issue also check out the branch? I would like to pull it on the master, but I don't have a test setup that demonstrates the problem.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Ya, I've been using 2.0.1 for a while now and not had any issues with threadpool.  In fact, I don't even set the UV_THREADPOOL anymore and it seems to just work.  I just tried npm installing the fix branch and it looks like there's a problem with its package.json?\n\n``` javascript\n//package.json\n\"sass-loader\": \"git://github.com/jtangelder/sass-loader#fix/threadpool-issue\",\n```\n\n``` javascript\nnpm ls sass-loader\nweb@0.0.0 /home/adjavaherian/Desktop/web-off-master\n\u2514\u2500\u2500 sass-loader@3.1.0  invalid (git://github.com/jtangelder/sass-loader.git#d415f3fe1c8ad5e4c507fefa9f3734b4766d9d8f)\n\n```\n. I tried again with object-assign in my node_modules and noticed that my client config (which uses sass-loader) didn't even build.  no errors, but no output either.  hmm.\n. this is resolved in v2.x and higher, right?. I think I've been able to reproduce it on this branch.  https://github.com/adjavaherian/sass-lifter-loader/tree/node-sass-threadpool-issue  If you npm start the branch in the current state, the process ties up and just hangs, but if you go to index.js and change the threadpool size to 4, `process.env.UV_THREADPOOL_SIZE = 4;` it will compile.  Conversely, if you leave the threadpool size at 5 and remove `@import \"./base\";` from example/scss/Frontpage.scss and YetAnother.scss (there are 4 imports total), the thread will hang.\n\nIt's tricky and very well could be a something to do with the way I'm creating new webpack instances from within a webpack loader.\n. I dont seem to have this problem anymore and I'm pretty sure we're using the master branch, so not sure what happened exactly.  Hopefully this doesnt cause more confusion.  :) Lemme double check in a bit.\n\nSent from my iPony\n\n> On Oct 26, 2015, at 9:46 AM, Johannes Ewald notifications@github.com wrote:\n> \n> That's nice \n> \n> Could anyone reading this issue also check out the branch? I would like to pull it on the master, but I don't have a test setup that demonstrates the problem.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Ya, I've been using 2.0.1 for a while now and not had any issues with threadpool.  In fact, I don't even set the UV_THREADPOOL anymore and it seems to just work.  I just tried npm installing the fix branch and it looks like there's a problem with its package.json?\n\n``` javascript\n//package.json\n\"sass-loader\": \"git://github.com/jtangelder/sass-loader#fix/threadpool-issue\",\n```\n\n``` javascript\nnpm ls sass-loader\nweb@0.0.0 /home/adjavaherian/Desktop/web-off-master\n\u2514\u2500\u2500 sass-loader@3.1.0  invalid (git://github.com/jtangelder/sass-loader.git#d415f3fe1c8ad5e4c507fefa9f3734b4766d9d8f)\n\n```\n. I tried again with object-assign in my node_modules and noticed that my client config (which uses sass-loader) didn't even build.  no errors, but no output either.  hmm.\n. this is resolved in v2.x and higher, right?. ",
    "myme": "I'm experiencing this right now with `node-sass@4.5.3` and `sass-loader@6.0.6`. Setting `process.env.UV_THREADPOOL_SIZE = 25` in our `webpack.config.js` does consistently resolve the issue. Not sure what additional information I can provide if anybody wants to look further into this?. I'm experiencing this right now with `node-sass@4.5.3` and `sass-loader@6.0.6`. Setting `process.env.UV_THREADPOOL_SIZE = 25` in our `webpack.config.js` does consistently resolve the issue. Not sure what additional information I can provide if anybody wants to look further into this?. ",
    "thenanyu": "I'm also experiencing this with latest versions of node-sass and sass-loader, also working around by setting threadpool to 100. I'm also experiencing this with latest versions of node-sass and sass-loader, also working around by setting threadpool to 100. ",
    "jerrysu": "Same here. I am trying to upgrade from 0.4.2.\n. I'll see if I can put together a test to demonstrate this issue. Sorry if my original description of the problem was vague, I wasn't sure exactly how to explain it.\n\nThe difference between the test case you pointed out and my own case is that the module is being imported from a dependency of a file that I imported.\n\nWhile debugging the issue that I was having, I noticed that the output of `fileToDirContext` for the dependencies of imported files was returning the path under the root directory. So, for example, if my root directory was `./src` and I wanted the directory context of `./src/components/Button.scss`, `fileToDirContext` returned just `components`. If `Button.scss` tried to import a file from node_modules using `~`, it did not resolve correctly without the change that I made.\n. @jhnns: sorry, haven't had time to look into writing the test case. `module` is a dependency referenced in package.json. In many of the broken cases, they reference a pancake installed from a GitHub repo if that makes a difference.\n. Same here. I am trying to upgrade from 0.4.2.\n. I'll see if I can put together a test to demonstrate this issue. Sorry if my original description of the problem was vague, I wasn't sure exactly how to explain it.\n\nThe difference between the test case you pointed out and my own case is that the module is being imported from a dependency of a file that I imported.\n\nWhile debugging the issue that I was having, I noticed that the output of `fileToDirContext` for the dependencies of imported files was returning the path under the root directory. So, for example, if my root directory was `./src` and I wanted the directory context of `./src/components/Button.scss`, `fileToDirContext` returned just `components`. If `Button.scss` tried to import a file from node_modules using `~`, it did not resolve correctly without the change that I made.\n. @jhnns: sorry, haven't had time to look into writing the test case. `module` is a dependency referenced in package.json. In many of the broken cases, they reference a pancake installed from a GitHub repo if that makes a difference.\n. ",
    "tomatau": "Same here\n. Same issue here, same sass config. Running JS through babel stage 0.\n\n```\nimport './sheet.scss';\nand\nrequire('./sheet.scss');\n```\n. Fixed here - bug my end with WebpackIsomorphicTools.\n. Same here\n. Same issue here, same sass config. Running JS through babel stage 0.\n\n```\nimport './sheet.scss';\nand\nrequire('./sheet.scss');\n```\n. Fixed here - bug my end with WebpackIsomorphicTools.\n. ",
    "adriaanbalt": "Same\n. Same\n. ",
    "mako-taco": "This actually works for me on OSX, but fails on linux.\n. There were other (case insensitive) file system issues at play. Sorry for the false alarm.\n. This actually works for me on OSX, but fails on linux.\n. There were other (case insensitive) file system issues at play. Sorry for the false alarm.\n. ",
    "ceram1": "@jhnns But travis ci is not activated. \nhttps://travis-ci.org/jtangelder/sass-loader/builds\n. Additional note:\n\n`@import 'node_modules/react-toolbox/lib/_colors';`\nWorks fine, when `@import '~'` errors.\n\n```\n @import '~react-toolbox/lib/commons';\n           ^\n          File to import not found or unreadable: ~react-toolbox/lib/commons\n```\n. That's right.. maybe `resolve.alias`? I'm not sure what was it but react-toolbox-example runs well\n. @jhnns But travis ci is not activated. \nhttps://travis-ci.org/jtangelder/sass-loader/builds\n. Additional note:\n\n`@import 'node_modules/react-toolbox/lib/_colors';`\nWorks fine, when `@import '~'` errors.\n\n```\n @import '~react-toolbox/lib/commons';\n           ^\n          File to import not found or unreadable: ~react-toolbox/lib/commons\n```\n. That's right.. maybe `resolve.alias`? I'm not sure what was it but react-toolbox-example runs well\n. ",
    "NogsMPLS": "having the same issue with alias in webpack not connecting with `~moduleName` in sass-loader.\n. the easiest thing I can point to right now is just cloning down react-toolbox repo and npm install both the main repo and the docs folder. then npm build and npm run start inside the docs folder.\n\nI'm digging as much as I can, but I'm not too familiar with this kind of thing yet.\n. having the same issue with alias in webpack not connecting with `~moduleName` in sass-loader.\n. the easiest thing I can point to right now is just cloning down react-toolbox repo and npm install both the main repo and the docs folder. then npm build and npm run start inside the docs folder.\n\nI'm digging as much as I can, but I'm not too familiar with this kind of thing yet.\n. ",
    "yantakus": "When I use autoprefixer-loader it produces even more weird source path:\n\n![zsfjq6z](https://cloud.githubusercontent.com/assets/2179726/9487925/a5d2461c-4bde-11e5-9891-50426a6f42b7.png)\n\nHere is my webpack config:\n\n```\nvar AUTOPREFIXER_BROWSERS = '\"ie >= 10\",\"ie_mob >= 10\",\"ff >= 30\",\"chrome >= 34\",\"safari >= 7\",\"opera >= 23\",\"ios >= 7\",\"android >= 4.4\",\"bb >= 10\"';\n\nloaders: [\n  \"style-loader\",\n  \"css-loader?sourceMap\",\n  \"autoprefixer-loader?{browsers:[\" + AUTOPREFIXER_BROWSERS + \"]}\",\n  \"sass-loader?sourceMap\"\n]\n```\n. @jhnns, could you please explain what did you change to resolve the issue with source maps paths?\n. @jhnns, your link points to 404 page.\n. Thank you, it works perfectly for me!\n. @evilebottnawi thanks, I saw this in the README. This is exactly what I was using before. Do you mean I should use all my sass variables directly in webpack config, without importing them with `@import` from another file?. @evilebottnawi Thanks for the answers.\r\n\r\nAdding import to each file is not a desired way to do it as we already have dozens of components. And I suppose webpack will be bundling much longer if it has to import a file dozens of times instead of a single time as it was in my previous config.\r\n\r\nPlacing variables into webpack config is also not an ideal solution as we loose syntax highlighting and the config gets too long (we have 900+ lines of variables).\r\n\r\nIs there any way to import this file into webpack config? Of course we can't do it just as `const Variables = require('../blah/blah.scss)` as interpreter tries to evaluate the code and it's not javascript. Is there any way to require it as text and pass to `data` option? . Thanks a lot for describing all the options. Ended up with importing variables in each file.. When I use autoprefixer-loader it produces even more weird source path:\n\n![zsfjq6z](https://cloud.githubusercontent.com/assets/2179726/9487925/a5d2461c-4bde-11e5-9891-50426a6f42b7.png)\n\nHere is my webpack config:\n\n```\nvar AUTOPREFIXER_BROWSERS = '\"ie >= 10\",\"ie_mob >= 10\",\"ff >= 30\",\"chrome >= 34\",\"safari >= 7\",\"opera >= 23\",\"ios >= 7\",\"android >= 4.4\",\"bb >= 10\"';\n\nloaders: [\n  \"style-loader\",\n  \"css-loader?sourceMap\",\n  \"autoprefixer-loader?{browsers:[\" + AUTOPREFIXER_BROWSERS + \"]}\",\n  \"sass-loader?sourceMap\"\n]\n```\n. @jhnns, could you please explain what did you change to resolve the issue with source maps paths?\n. @jhnns, your link points to 404 page.\n. Thank you, it works perfectly for me!\n. @evilebottnawi thanks, I saw this in the README. This is exactly what I was using before. Do you mean I should use all my sass variables directly in webpack config, without importing them with `@import` from another file?. @evilebottnawi Thanks for the answers.\r\n\r\nAdding import to each file is not a desired way to do it as we already have dozens of components. And I suppose webpack will be bundling much longer if it has to import a file dozens of times instead of a single time as it was in my previous config.\r\n\r\nPlacing variables into webpack config is also not an ideal solution as we loose syntax highlighting and the config gets too long (we have 900+ lines of variables).\r\n\r\nIs there any way to import this file into webpack config? Of course we can't do it just as `const Variables = require('../blah/blah.scss)` as interpreter tries to evaluate the code and it's not javascript. Is there any way to require it as text and pass to `data` option? . Thanks a lot for describing all the options. Ended up with importing variables in each file.. ",
    "jezstephens": "import-glob-loader seems to have a couple of drawbacks.\n- It screws up the line numbers in Webpack's error messages by inserting additional lines into the input.\n- When used with no file extension it includes all files, so if you have Sass files mixed with other non-CSS files it's necessary to say `foo/**/*.scss`. This could be argued as a good thing, but I think it'd be more intuitive if `foo/**/*` was equivalent to `foo/**/*.scss`.\n\nSo perhaps sass-loader could support Sass-specific globbing a bit better than import-glob-loader.\n\nI found that \"../foo/*_/_\" worked with import-glob-loader, by the way.\n. import-glob-loader seems to have a couple of drawbacks.\n- It screws up the line numbers in Webpack's error messages by inserting additional lines into the input.\n- When used with no file extension it includes all files, so if you have Sass files mixed with other non-CSS files it's necessary to say `foo/**/*.scss`. This could be argued as a good thing, but I think it'd be more intuitive if `foo/**/*` was equivalent to `foo/**/*.scss`.\n\nSo perhaps sass-loader could support Sass-specific globbing a bit better than import-glob-loader.\n\nI found that \"../foo/*_/_\" worked with import-glob-loader, by the way.\n. ",
    "sanniassin": "Makes sense, but not sure about conflicts if same option present both in query and sassLoader.\n. I mean, that two points for setting same options could lead to undesirable behavior with hard to find overrides if you load options for sassLoader from external module or just forgot, that option already set in sassLoader. Anyway it's better to make another PR for this.\n. Thanks, as i've never used mocha before :)\n. Makes sense, but not sure about conflicts if same option present both in query and sassLoader.\n. I mean, that two points for setting same options could lead to undesirable behavior with hard to find overrides if you load options for sassLoader from external module or just forgot, that option already set in sassLoader. Anyway it's better to make another PR for this.\n. Thanks, as i've never used mocha before :)\n. ",
    "dtothefp": "This may be a moot point because from what I can tell the `loader-utils` module won't even allow the user to pass an object and have it parsed. I've tried many different methods with no luck https://github.com/webpack/loader-utils/issues/15.\n\n`eslint-loader` uses the `object-assign` pattern where the options passed from wepback config task presedence, i.e. matching keys passed from the query string are overwritten by those present in `this.options`. https://github.com/MoOx/eslint-loader/blob/master/index.js#L98 Although `eslint-loader` shows in the readme a way to pass rules as object `loader: \"eslint-loader?{rules:[{semi:0}]}\"` in the query string, I tried it out in `sass-loader` and didn't get it to work so not sure that the `loader-utils` API even supports this?\n\n![screen shot 2015-08-31 at 8 52 44 am](https://cloud.githubusercontent.com/assets/4656726/9579084/b7654a36-4fbd-11e5-8bff-08f557e4bd54.png)\n\n![screen shot 2015-08-31 at 8 52 49 am](https://cloud.githubusercontent.com/assets/4656726/9579086/bba76f2a-4fbd-11e5-8dbd-b66b9a251fcb.png)\n\n##### Update: got passing object as query param to work...duh\n\n![screen shot 2015-08-31 at 9 02 29 am](https://cloud.githubusercontent.com/assets/4656726/9579242/1fe1205c-4fbf-11e5-811b-72cd5a317ee9.png)\n\nI do agree with @jorrit that all keys should be merged, but I would say that those in `this.options` take precedence over those from parsing the query string as they are less prone to errors. It would also be great to have this behavior because it is currently a pain to iterate over all `includePaths` and create a query param for each. \n\nAnyhow, it would be great to have this functionality. Not sure if @jhnns would be open to having a dependency on `object-assign` added? Ultimately, I think there is a problem with @sokra `loader-utils` API if for somethings such as Objects a different API for passing options i.e. `this.options` vs parsing `this.query` to loaders must be used.\n. @jhnns thanks for the help on this. I know it sucks for caching but seems like for complex config this is necessary in webpack\n. @jhnns awesome...much appreciated\n. @jhnns thanks for the quick fix\n. @borysn this took me a bit to figure out because I had sourcemaps enabled in a chain from \n\n```\nsass-loader => postcss-loader => css-loader => style-loader\n```\n\nsome of these I use a mix between query params in the loader string, the `query` loader option and the config such as `sassLoader` or `postcss` on my webpack config. Checking out the changelog you can see the example PR for upgrading https://github.com/angular/angular-cli/pull/2237/files. One thing that isn't accounted for is that inside the SASS loader and CSS loader they use `this.options` to access not only options from the config such as `config.postcss` but also use it to access webpack config properties such as `output.path` and `context`. When I put these into my `options` with the `LoaderOptionsPlugin` all works. Seems scary because I'm unsure what other configs other loaders might use, if you want to be extra safe you could just merge your entire webpack config into your `options`. I made a little transform webpack1 to webpack2 script just in case the API changes further\n\n``` js\nimport {LoaderOptionsPlugin} from 'webpack';\n\nconst webpackConfigWhitelist = [\n  'amd',\n  'bail',\n  'cache',\n  'context',\n  'dependencies',\n  'devServer',\n  'devtool',\n  'entry',\n  'externals',\n  'loader',\n  'module',\n  'name',\n  'node',\n  'output',\n  'plugins',\n  'profile',\n  'recordsInputPath',\n  'recordsOutputPath',\n  'recordsPath',\n  'resolve',\n  'resolveLoader',\n  'stats',\n  'target',\n  'watch',\n  'watchOptions'\n];\nconst skip = ['methods', 'debug'];\n\n/**\n * Reduce over the loaders to transform `module.{preLoaders,loaders,postLoaders}` syntax\n * @param {Object} moduleConfig webpack config for `.module` property\n * @return {Array} match `module.rules` syntax https://github.com/TheLarkInn/angular-cli/blob/63801b48fa4ec0b48005ceed74bd0c03854b4c8e/packages/angular-cli/models/webpack-build-common.ts#L44\n */\nfunction loaderReducer(moduleConfig) {\n  return Object.keys(moduleConfig).reduce((list, name) => {\n    const loaderList = moduleConfig[name];\n    let enforce;\n\n    switch (name) {\n      case 'preLoaders':\n        enforce = 'pre';\n        break;\n      case 'postLoaders':\n        enforce = 'post';\n        break;\n    }\n\n    const rules = enforce ?\n      loaderList.map(loader => Object.assign(loader, {enforce})) :\n      loaderList;\n\n    list.push(...rules);\n\n    return list;\n  }, []);\n}\n\n/**\n * Utility to transform properties not accepted since `v2.1.0-beta.23`\n * @param {Object} webpackConfig config passed to the `webpack` compiler\n * @return {Object}\n */\nexport default function(webpackConfig) {\n  const keys = Object.keys(webpackConfig);\n  const options = {};\n\n  const webpack2Config = keys.reduce((acc, key) => {\n    if (skip.includes(key)) return acc;\n\n    const val = webpackConfig[key];\n\n    if (!webpackConfigWhitelist.includes(key)) {\n      options[key] = val;\n    } else if (key === 'module') {\n      acc[key] = {};\n    } else {\n      acc[key] = val;\n    }\n\n    if (key === 'context' || key === 'output') {\n      options[key] = val;\n    }\n\n    return acc;\n  }, {});\n\n  webpack2Config.module.rules = loaderReducer(webpackConfig.module);\n  webpack2Config.plugins.push(\n    new LoaderOptionsPlugin(\n      Object.assign({}, {options})\n    )\n  );\n\n  return webpack2Config;\n}\n```\n. @LiTiang as mentioned previously if you add `context` and `output` to your loader options this should fix your problem. If you look through source code for the sass loader it uses `context` if sourcemaps option is enabled, and I think the css loader uses something off of `output`.\n\n``` js\nplugins: [\n    new LoaderOptionsPlugin({\n       context: config.context,  // config is your webpack config object\n       output: config.output,\n       sassLoader: // your sass loader options\n    })\n]\n```\n. This may be a moot point because from what I can tell the `loader-utils` module won't even allow the user to pass an object and have it parsed. I've tried many different methods with no luck https://github.com/webpack/loader-utils/issues/15.\n\n`eslint-loader` uses the `object-assign` pattern where the options passed from wepback config task presedence, i.e. matching keys passed from the query string are overwritten by those present in `this.options`. https://github.com/MoOx/eslint-loader/blob/master/index.js#L98 Although `eslint-loader` shows in the readme a way to pass rules as object `loader: \"eslint-loader?{rules:[{semi:0}]}\"` in the query string, I tried it out in `sass-loader` and didn't get it to work so not sure that the `loader-utils` API even supports this?\n\n![screen shot 2015-08-31 at 8 52 44 am](https://cloud.githubusercontent.com/assets/4656726/9579084/b7654a36-4fbd-11e5-8bff-08f557e4bd54.png)\n\n![screen shot 2015-08-31 at 8 52 49 am](https://cloud.githubusercontent.com/assets/4656726/9579086/bba76f2a-4fbd-11e5-8dbd-b66b9a251fcb.png)\n\n##### Update: got passing object as query param to work...duh\n\n![screen shot 2015-08-31 at 9 02 29 am](https://cloud.githubusercontent.com/assets/4656726/9579242/1fe1205c-4fbf-11e5-811b-72cd5a317ee9.png)\n\nI do agree with @jorrit that all keys should be merged, but I would say that those in `this.options` take precedence over those from parsing the query string as they are less prone to errors. It would also be great to have this behavior because it is currently a pain to iterate over all `includePaths` and create a query param for each. \n\nAnyhow, it would be great to have this functionality. Not sure if @jhnns would be open to having a dependency on `object-assign` added? Ultimately, I think there is a problem with @sokra `loader-utils` API if for somethings such as Objects a different API for passing options i.e. `this.options` vs parsing `this.query` to loaders must be used.\n. @jhnns thanks for the help on this. I know it sucks for caching but seems like for complex config this is necessary in webpack\n. @jhnns awesome...much appreciated\n. @jhnns thanks for the quick fix\n. @borysn this took me a bit to figure out because I had sourcemaps enabled in a chain from \n\n```\nsass-loader => postcss-loader => css-loader => style-loader\n```\n\nsome of these I use a mix between query params in the loader string, the `query` loader option and the config such as `sassLoader` or `postcss` on my webpack config. Checking out the changelog you can see the example PR for upgrading https://github.com/angular/angular-cli/pull/2237/files. One thing that isn't accounted for is that inside the SASS loader and CSS loader they use `this.options` to access not only options from the config such as `config.postcss` but also use it to access webpack config properties such as `output.path` and `context`. When I put these into my `options` with the `LoaderOptionsPlugin` all works. Seems scary because I'm unsure what other configs other loaders might use, if you want to be extra safe you could just merge your entire webpack config into your `options`. I made a little transform webpack1 to webpack2 script just in case the API changes further\n\n``` js\nimport {LoaderOptionsPlugin} from 'webpack';\n\nconst webpackConfigWhitelist = [\n  'amd',\n  'bail',\n  'cache',\n  'context',\n  'dependencies',\n  'devServer',\n  'devtool',\n  'entry',\n  'externals',\n  'loader',\n  'module',\n  'name',\n  'node',\n  'output',\n  'plugins',\n  'profile',\n  'recordsInputPath',\n  'recordsOutputPath',\n  'recordsPath',\n  'resolve',\n  'resolveLoader',\n  'stats',\n  'target',\n  'watch',\n  'watchOptions'\n];\nconst skip = ['methods', 'debug'];\n\n/**\n * Reduce over the loaders to transform `module.{preLoaders,loaders,postLoaders}` syntax\n * @param {Object} moduleConfig webpack config for `.module` property\n * @return {Array} match `module.rules` syntax https://github.com/TheLarkInn/angular-cli/blob/63801b48fa4ec0b48005ceed74bd0c03854b4c8e/packages/angular-cli/models/webpack-build-common.ts#L44\n */\nfunction loaderReducer(moduleConfig) {\n  return Object.keys(moduleConfig).reduce((list, name) => {\n    const loaderList = moduleConfig[name];\n    let enforce;\n\n    switch (name) {\n      case 'preLoaders':\n        enforce = 'pre';\n        break;\n      case 'postLoaders':\n        enforce = 'post';\n        break;\n    }\n\n    const rules = enforce ?\n      loaderList.map(loader => Object.assign(loader, {enforce})) :\n      loaderList;\n\n    list.push(...rules);\n\n    return list;\n  }, []);\n}\n\n/**\n * Utility to transform properties not accepted since `v2.1.0-beta.23`\n * @param {Object} webpackConfig config passed to the `webpack` compiler\n * @return {Object}\n */\nexport default function(webpackConfig) {\n  const keys = Object.keys(webpackConfig);\n  const options = {};\n\n  const webpack2Config = keys.reduce((acc, key) => {\n    if (skip.includes(key)) return acc;\n\n    const val = webpackConfig[key];\n\n    if (!webpackConfigWhitelist.includes(key)) {\n      options[key] = val;\n    } else if (key === 'module') {\n      acc[key] = {};\n    } else {\n      acc[key] = val;\n    }\n\n    if (key === 'context' || key === 'output') {\n      options[key] = val;\n    }\n\n    return acc;\n  }, {});\n\n  webpack2Config.module.rules = loaderReducer(webpackConfig.module);\n  webpack2Config.plugins.push(\n    new LoaderOptionsPlugin(\n      Object.assign({}, {options})\n    )\n  );\n\n  return webpack2Config;\n}\n```\n. @LiTiang as mentioned previously if you add `context` and `output` to your loader options this should fix your problem. If you look through source code for the sass loader it uses `context` if sourcemaps option is enabled, and I think the css loader uses something off of `output`.\n\n``` js\nplugins: [\n    new LoaderOptionsPlugin({\n       context: config.context,  // config is your webpack config object\n       output: config.output,\n       sassLoader: // your sass loader options\n    })\n]\n```\n. ",
    "typpo": "I am having a similar problem.  I'm new to react/webpack/etc, clearly there is something wrong with my config.  Having trouble figuring it out.\n\n```\n(function (exports, require, module, __filename, __dirname) { body {\n                                                                         ^\nSyntaxError: Unexpected token {\nat exports.runInThisContext (vm.js:73:16)\nat Module._compile (module.js:443:25)\nat Object.Module._extensions..js (module.js:478:10)\nat Module.load (module.js:355:32)\nat Function.Module._load (module.js:310:12)\nat Module.require (module.js:365:17)\nat require (module.js:384:17)\nat Object.<anonymous> (/home/ian/code/react-isomorphic-boilerplate/lib/shared/components/App.js:31:1)\nat Module._compile (module.js:460:26)\nat Object.Module._extensions..js (module.js:478:10)\n```\n\nHere is my webpack config: https://github.com/typpo/react-isomorphic-boilerplate/blob/180daca533120b7065ba2f411eae9104002f1a57/webpack.config.dev.js\n\nHere is where I'm including the SCSS: https://github.com/typpo/react-isomorphic-boilerplate/blob/180daca533120b7065ba2f411eae9104002f1a57/src/shared/components/App.jsx#L7\n\nAny thoughts?\n. Nevermind.  My problem was that I was trying to run this on both the client and server for my isomorphic app.  It should only be on the client so I added an `if (typeof window !== 'undefined')` around the `require` in my js file.  Also, I made sure to install `css-loader` and `style-loader` in dev dependencies.\n\nThank you for creating this project!\n. I am having a similar problem.  I'm new to react/webpack/etc, clearly there is something wrong with my config.  Having trouble figuring it out.\n\n```\n(function (exports, require, module, __filename, __dirname) { body {\n                                                                         ^\nSyntaxError: Unexpected token {\nat exports.runInThisContext (vm.js:73:16)\nat Module._compile (module.js:443:25)\nat Object.Module._extensions..js (module.js:478:10)\nat Module.load (module.js:355:32)\nat Function.Module._load (module.js:310:12)\nat Module.require (module.js:365:17)\nat require (module.js:384:17)\nat Object.<anonymous> (/home/ian/code/react-isomorphic-boilerplate/lib/shared/components/App.js:31:1)\nat Module._compile (module.js:460:26)\nat Object.Module._extensions..js (module.js:478:10)\n```\n\nHere is my webpack config: https://github.com/typpo/react-isomorphic-boilerplate/blob/180daca533120b7065ba2f411eae9104002f1a57/webpack.config.dev.js\n\nHere is where I'm including the SCSS: https://github.com/typpo/react-isomorphic-boilerplate/blob/180daca533120b7065ba2f411eae9104002f1a57/src/shared/components/App.jsx#L7\n\nAny thoughts?\n. Nevermind.  My problem was that I was trying to run this on both the client and server for my isomorphic app.  It should only be on the client so I added an `if (typeof window !== 'undefined')` around the `require` in my js file.  Also, I made sure to install `css-loader` and `style-loader` in dev dependencies.\n\nThank you for creating this project!\n. ",
    "ryanmargheriti": "@typpo's fix, albeit a bit hacky, does the trick.\n. @typpo's fix, albeit a bit hacky, does the trick.\n. ",
    "MikaAK": "Removing the `UV_THREADPOOL_SIZE` solved this. I'm not entirely sure why\n. Removing the `UV_THREADPOOL_SIZE` solved this. I'm not entirely sure why\n. ",
    "tkiethanom": "I don't think so. The component should only be pulled in when a certain page is hit.\n\nSo the question is. Is this normal or I am doing something wrong? Should the .scss only be loaded for the page you are on?\n. https://github.com/tkiethanom/splice/tree/sp2_front_end?files=1\n\nThanks for the help\n. In the /front_end directory there are some directions in the readme. Basically `npm install` and `gulp serve`. \n. So for example if I put require('../../styles/accounts/accounts.scss'); in /src/pages/AccountsViewPage.js, The .scss still get loaded even if I'm on the home page. \n. I don't think so. The component should only be pulled in when a certain page is hit.\n\nSo the question is. Is this normal or I am doing something wrong? Should the .scss only be loaded for the page you are on?\n. https://github.com/tkiethanom/splice/tree/sp2_front_end?files=1\n\nThanks for the help\n. In the /front_end directory there are some directions in the readme. Basically `npm install` and `gulp serve`. \n. So for example if I put require('../../styles/accounts/accounts.scss'); in /src/pages/AccountsViewPage.js, The .scss still get loaded even if I'm on the home page. \n. ",
    "epitaphmike": "Output after running `npm rebuild node-sass`\n\n> node-sass@3.3.3 install ../node_modules/node-sass\n> node scripts/install.js\n> \n> node-sass@3.3.3 postinstall ../node_modules/node-sass\n> node scripts/build.js\n> \n> ../node_modules/node-sass/vendor/darwin-x64-46/binding.node exists. testing binary.\n> Binary is fine; exiting.\n> node-sass@3.3.3 ../node_modules/node-sass\n\nWiping the `node_modules` folder and running `npm install` yields the same results unfortunately.\n. There is nothing explicitly pointing to `darwin-x64-11`, I blew out any global `node_sass` instances. I also loaded in manually the `darwin-x64-11/binding.node` just to test and started getting other errors related to LazyResult.async.\n\n> ERROR in /meteor-webpack-react-kickstart/~/css-loader!/meteor-webpack-react-kickstart/~/sass-loader!/meteor-webpack-react-kickstart/react/todo/sass/Main.scss\n> ? Module build failed: ReferenceError: Promise is not defined\n> ? at LazyResult.async (/meteor-webpack-react-kickstart/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:152:31)\n\nI added this package to [meteor-webpack-react-kickstart](https://github.com/thereactivestack/meteor-webpack-react-kickstart) if that helps. I also posted an issue on their repo to test against the actual environment in which I am using webpack.\n\nI appreciate the help. Thank you.\n. Everything runs fine before I install sass-loader. \n. There is a cross thread going [here](https://github.com/thereactivestack/kickstart/issues/6) as well. Seems it is a mac issue. I do not own a PC to confirm.\n. Output after running `npm rebuild node-sass`\n\n> node-sass@3.3.3 install ../node_modules/node-sass\n> node scripts/install.js\n> \n> node-sass@3.3.3 postinstall ../node_modules/node-sass\n> node scripts/build.js\n> \n> ../node_modules/node-sass/vendor/darwin-x64-46/binding.node exists. testing binary.\n> Binary is fine; exiting.\n> node-sass@3.3.3 ../node_modules/node-sass\n\nWiping the `node_modules` folder and running `npm install` yields the same results unfortunately.\n. There is nothing explicitly pointing to `darwin-x64-11`, I blew out any global `node_sass` instances. I also loaded in manually the `darwin-x64-11/binding.node` just to test and started getting other errors related to LazyResult.async.\n\n> ERROR in /meteor-webpack-react-kickstart/~/css-loader!/meteor-webpack-react-kickstart/~/sass-loader!/meteor-webpack-react-kickstart/react/todo/sass/Main.scss\n> ? Module build failed: ReferenceError: Promise is not defined\n> ? at LazyResult.async (/meteor-webpack-react-kickstart/node_modules/css-loader/node_modules/postcss/lib/lazy-result.js:152:31)\n\nI added this package to [meteor-webpack-react-kickstart](https://github.com/thereactivestack/meteor-webpack-react-kickstart) if that helps. I also posted an issue on their repo to test against the actual environment in which I am using webpack.\n\nI appreciate the help. Thank you.\n. Everything runs fine before I install sass-loader. \n. There is a cross thread going [here](https://github.com/thereactivestack/kickstart/issues/6) as well. Seems it is a mac issue. I do not own a PC to confirm.\n. ",
    "sikanhe": "getting exactly same error here\n. getting exactly same error here\n. ",
    "xx0r": "+1\n. Just posted on the other thread. Can confirm this on PC win 8.1. Gonna try the win 10\n. same for win 10\n\nError: The `libsass` binding was not found in .....\\src\\EmptyWebApplication\\node_modules\\gulp-sass\\node_modules\\node-sass\\vendor\\win32-ia32-11\\binding.node\nThis usually happens because your node version has changed.\nRun `npm rebuild node-sass` to build the binding for your current node version.\n    at Object.sass.getBinaryPath (.....\\src\\EmptyWebApplication\\node_modules\\gulp-sass\\node_modules\\node-sass\\lib\\extensions.js:150:11)\n    at Object.<anonymous> (.....\\src\\EmptyWebApplication\\node_modules\\gulp-sass\\node_modules\\node-sass\\lib\\index.js:16:36)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.require (module.js:364:17)\n    at require (module.js:380:17)\n    at Object.<anonymous> (.....\\src\\EmptyWebApplication\\node_modules\\gulp-sass\\index.js:163:21)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n. I have checked out a clean version of the solution which lead to automated restore of the NPM packages to the latest version. Now the issue is happening no more... However, I tried to restore the packages before and it did not help.\n. +1\n. Just posted on the other thread. Can confirm this on PC win 8.1. Gonna try the win 10\n. same for win 10\n\nError: The `libsass` binding was not found in .....\\src\\EmptyWebApplication\\node_modules\\gulp-sass\\node_modules\\node-sass\\vendor\\win32-ia32-11\\binding.node\nThis usually happens because your node version has changed.\nRun `npm rebuild node-sass` to build the binding for your current node version.\n    at Object.sass.getBinaryPath (.....\\src\\EmptyWebApplication\\node_modules\\gulp-sass\\node_modules\\node-sass\\lib\\extensions.js:150:11)\n    at Object.<anonymous> (.....\\src\\EmptyWebApplication\\node_modules\\gulp-sass\\node_modules\\node-sass\\lib\\index.js:16:36)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.require (module.js:364:17)\n    at require (module.js:380:17)\n    at Object.<anonymous> (.....\\src\\EmptyWebApplication\\node_modules\\gulp-sass\\index.js:163:21)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n. I have checked out a clean version of the solution which lead to automated restore of the NPM packages to the latest version. Now the issue is happening no more... However, I tried to restore the packages before and it did not help.\n. ",
    "sapox": "Same situation on Ubuntu 14.04. :-/\n. Same situation on Ubuntu 14.04. :-/\n. ",
    "radotzki": "Quick fix: delete the node-sass folder from node_modules and run NPM install.\n(OSX node version 4.1.2)\n. Quick fix: delete the node-sass folder from node_modules and run NPM install.\n(OSX node version 4.1.2)\n. ",
    "natarajanmca11": "Thanks @radotzki \nIts working fine now. (Windows Node version 4.2.1 )\n. Thanks @radotzki \nIts working fine now. (Windows Node version 4.2.1 )\n. ",
    "haydenhancock": "Not sure if this should be closed as I am experiencing this same issue on Windows 10 and node 4.2.2.\n\nWhen I removed the node-sass folder from node_modules folder and ran npm install nothing happened. I had to run npm install gulp-sass --save-dev again in order for the node-sass folder to be reinstalled. Unfortunately, this still doesn't resolve the error as the win32-ia32-11 still doesn't exist. Mine only shows win32-x64-46.\n. In my devDependencies, I have:\n\n``` javascript\n  \"devDependencies\": {\n    \"gulp\": \"^3.9.0\",\n    \"gulp-sass\": \"^2.1.0\",\n    \"node-sass\": \"^3.4.1\"\n  }\n```\n. I resolved by issue with Visual Studio by moving the PATH variable higher in priority as found [here](http://blog.boro2g.co.uk/grunt-and-gulp-tasks-in-visual-studio-2015-libsass-error/).\n. @dontbesorry80,\n\nWhen you updated the path variable, did you sign out and back in? If not, try that. I'll send a screenshot of my setup when I can.\n. Awesome, Glad to hear!\n. Not sure if this should be closed as I am experiencing this same issue on Windows 10 and node 4.2.2.\n\nWhen I removed the node-sass folder from node_modules folder and ran npm install nothing happened. I had to run npm install gulp-sass --save-dev again in order for the node-sass folder to be reinstalled. Unfortunately, this still doesn't resolve the error as the win32-ia32-11 still doesn't exist. Mine only shows win32-x64-46.\n. In my devDependencies, I have:\n\n``` javascript\n  \"devDependencies\": {\n    \"gulp\": \"^3.9.0\",\n    \"gulp-sass\": \"^2.1.0\",\n    \"node-sass\": \"^3.4.1\"\n  }\n```\n. I resolved by issue with Visual Studio by moving the PATH variable higher in priority as found [here](http://blog.boro2g.co.uk/grunt-and-gulp-tasks-in-visual-studio-2015-libsass-error/).\n. @dontbesorry80,\n\nWhen you updated the path variable, did you sign out and back in? If not, try that. I'll send a screenshot of my setup when I can.\n. Awesome, Glad to hear!\n. ",
    "dontbesorry80": "Haydenhancock.\nI have the same problem as this. But moving the PATH variable higher didn't solve the issue. However, I think my PATH variable seems very short... What's supposed to be be in there which helps?\n. Never mind I got it sorted. I needed to add `C:\\Users\\robert\\AppData\\Roaming\\npm` to my Path. Once that had been added and moved up in the list of Visual Studio priorities it has now been sorted. \n. Haydenhancock.\nI have the same problem as this. But moving the PATH variable higher didn't solve the issue. However, I think my PATH variable seems very short... What's supposed to be be in there which helps?\n. Never mind I got it sorted. I needed to add `C:\\Users\\robert\\AppData\\Roaming\\npm` to my Path. Once that had been added and moved up in the list of Visual Studio priorities it has now been sorted. \n. ",
    "lusse": "@haydenhancock  this solved my issue. Thanx a lot!\n. @haydenhancock  this solved my issue. Thanx a lot!\n. ",
    "Avien": "+1 \n. Yep, tx!!\n\nOn Mon, Oct 26, 2015 at 6:41 PM, Johannes Ewald notifications@github.com\nwrote:\n\n> @Phoenixmatrix https://github.com/Phoenixmatrix Thx for informing me [image:\n> :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/jtangelder/sass-loader/issues/163#issuecomment-151203401\n> .\n. +1 \n. Yep, tx!!\n\nOn Mon, Oct 26, 2015 at 6:41 PM, Johannes Ewald notifications@github.com\nwrote:\n\n> @Phoenixmatrix https://github.com/Phoenixmatrix Thx for informing me [image:\n> :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/jtangelder/sass-loader/issues/163#issuecomment-151203401\n> .\n. ",
    "Phoenixmatrix": "Its no longer needed since node-sass 3.4 is now released.\n\nThat being said: no, you would not be able to install 3.4beta. You can't even force it really (without manually modifying sass-loader's package.json.\n\ncarret notations (or really, any of the wildcard versioning for NPM) will only work with numeric X.Y.Z versions. To allow betas, you have to specifically do something such as `\"^3.2.0 || 3.4.0-beta1\"` as the version.\n\nAnyhow, this no longer matters, so Ill close :)\n. First, make sure to upgrade to node-sass 3.4. The 3.X line had a major performance regression that was fixed. The actual time spent in node-sass will pretty much be cut by 80% by using node-sass 3.4, which was released recently.\n\nSecond, if you're using css-loader and not using CSS modules, -downgrade- to css-loader 0.14.5, which is about 4x faster. The introduction of css modules and postcss and whatsnot slowed css-loader like crazy. 0.14.5 works fine and is the version right before the regression. If you do not need url resolution (common in development), pass css-loader the `url=false` argument. That speeds things up too. \n\nIf you do not need url and do not use CSS sourcemaps (you can use node-sass'  sourceComments flag instead during development), you'll get another huge boost by using the raw-loader instead of css-loader.\n\nFinally, since the ExtractTextPlugin needs to find your CSS in the huge amount of javascript to extract it, you can gain a 5-15% performance boost by making the file smaller: if you're simply requiring your CSS from your javascript entry point (and no requiring CSS from all over your JS modules), create a second webpack configuration (webpack.config can be an array of configs), with the CSS as entry points, so extracting the CSS will be super quick as there won't be any JS. I think the css loader gets invoked in a different way with ExtractTextPlugin which makes things worse, too. The latest webpack seems to handle this better, so upgrade that too.\n\nDoing all of the above (especially the node-sass 3.4 upgrade, webpack 1.12.2, and not using css-loader > 0.14.5, brought our CSS compile time from 10-20s to <2s!!!.\n\nNote that for SASS, incremental compile only makes a difference if you have a lot of chunks (unlike JS, where it can incrementally compile a single file inside a chunk), so if you have 1 big sass file with @import, you gain almost nothing with incremental.\n. Yes, it should be fixed IMO. See https://github.com/webpack/css-loader/issues/124\n\nI also feel it breaks the philosophy behind webpack loaders. You should chain very task specific loaders...having a huge feature like CSS module be part of a basic loader like css-loader seems wrong. There should be a css-module-loader or something. css-loader should be about url resolution, sourcemaps, and thats about it.\n\nFor url resolution, maybe its because we migrated from rails and then gulp, but all our file paths work without url resolution for images, and for css files, we just use `includePaths`.\n\nWe use url resolution for hashed filenames for cache busting, rewriting to point to our CDN, as well as inlining small files as base64 urls. None of that matters anywhere except in production. Your millage may vary :) Webpack's sourcemaps support is fantastic (\"It just works\"), but our devs prefered seeing the compiled output with sourceComments, so we just ended up using raw-loader in dev, and css-loader for prod.\n. You probably don't have url-loader installed. \n\n`npm install url-loader`\n. What is your devtool setting? \n. Interesting. I would have expected it from inline-source-map (since the sourcemap is part of the output).\n\nNote that when they say \"production ready\", what they mean is \"can be used to debug minified code in production\".\n. It does, in a way. if you require('./foo') and require('./bar') where foo and bar are scss files, and you change foo, it will only recompile foo, not bar.\n\nWhere it doesn't (and can't really because of how node-sass works) is if bar @import baz, and you change baz, it will recompile bar (and everything bar imports).\n. Its no longer needed since node-sass 3.4 is now released.\n\nThat being said: no, you would not be able to install 3.4beta. You can't even force it really (without manually modifying sass-loader's package.json.\n\ncarret notations (or really, any of the wildcard versioning for NPM) will only work with numeric X.Y.Z versions. To allow betas, you have to specifically do something such as `\"^3.2.0 || 3.4.0-beta1\"` as the version.\n\nAnyhow, this no longer matters, so Ill close :)\n. First, make sure to upgrade to node-sass 3.4. The 3.X line had a major performance regression that was fixed. The actual time spent in node-sass will pretty much be cut by 80% by using node-sass 3.4, which was released recently.\n\nSecond, if you're using css-loader and not using CSS modules, -downgrade- to css-loader 0.14.5, which is about 4x faster. The introduction of css modules and postcss and whatsnot slowed css-loader like crazy. 0.14.5 works fine and is the version right before the regression. If you do not need url resolution (common in development), pass css-loader the `url=false` argument. That speeds things up too. \n\nIf you do not need url and do not use CSS sourcemaps (you can use node-sass'  sourceComments flag instead during development), you'll get another huge boost by using the raw-loader instead of css-loader.\n\nFinally, since the ExtractTextPlugin needs to find your CSS in the huge amount of javascript to extract it, you can gain a 5-15% performance boost by making the file smaller: if you're simply requiring your CSS from your javascript entry point (and no requiring CSS from all over your JS modules), create a second webpack configuration (webpack.config can be an array of configs), with the CSS as entry points, so extracting the CSS will be super quick as there won't be any JS. I think the css loader gets invoked in a different way with ExtractTextPlugin which makes things worse, too. The latest webpack seems to handle this better, so upgrade that too.\n\nDoing all of the above (especially the node-sass 3.4 upgrade, webpack 1.12.2, and not using css-loader > 0.14.5, brought our CSS compile time from 10-20s to <2s!!!.\n\nNote that for SASS, incremental compile only makes a difference if you have a lot of chunks (unlike JS, where it can incrementally compile a single file inside a chunk), so if you have 1 big sass file with @import, you gain almost nothing with incremental.\n. Yes, it should be fixed IMO. See https://github.com/webpack/css-loader/issues/124\n\nI also feel it breaks the philosophy behind webpack loaders. You should chain very task specific loaders...having a huge feature like CSS module be part of a basic loader like css-loader seems wrong. There should be a css-module-loader or something. css-loader should be about url resolution, sourcemaps, and thats about it.\n\nFor url resolution, maybe its because we migrated from rails and then gulp, but all our file paths work without url resolution for images, and for css files, we just use `includePaths`.\n\nWe use url resolution for hashed filenames for cache busting, rewriting to point to our CDN, as well as inlining small files as base64 urls. None of that matters anywhere except in production. Your millage may vary :) Webpack's sourcemaps support is fantastic (\"It just works\"), but our devs prefered seeing the compiled output with sourceComments, so we just ended up using raw-loader in dev, and css-loader for prod.\n. You probably don't have url-loader installed. \n\n`npm install url-loader`\n. What is your devtool setting? \n. Interesting. I would have expected it from inline-source-map (since the sourcemap is part of the output).\n\nNote that when they say \"production ready\", what they mean is \"can be used to debug minified code in production\".\n. It does, in a way. if you require('./foo') and require('./bar') where foo and bar are scss files, and you change foo, it will only recompile foo, not bar.\n\nWhere it doesn't (and can't really because of how node-sass works) is if bar @import baz, and you change baz, it will recompile bar (and everything bar imports).\n. ",
    "gitnik": "Sooo any news on this?\n. Ok that's what I thought. Then I will probably have to move my includes from my SCSS into my JS\n. Sooo any news on this?\n. Ok that's what I thought. Then I will probably have to move my includes from my SCSS into my JS\n. ",
    "stevemao": "I'm using npm3 now and it doesn't install node-sass automatically.\n. Also I think this is the same with any other wrappers. You could keep the same semver as `node-sass`, you could lock the version of it if there is any bug etc. If there is an API breaking change in `node-sass` your module would not break for people before you bump it and make the changes. I could give you a ton of projects that do it.\n. Hmm... I don't know if this is the recommended approach. @iarna and @othiym23 may know more details. :)\n. hm..alright..\n. Fix #166\n. What about https://github.com/nordnet/sass-variable-loader?. I'm using npm3 now and it doesn't install node-sass automatically.\n. Also I think this is the same with any other wrappers. You could keep the same semver as `node-sass`, you could lock the version of it if there is any bug etc. If there is an API breaking change in `node-sass` your module would not break for people before you bump it and make the changes. I could give you a ton of projects that do it.\n. Hmm... I don't know if this is the recommended approach. @iarna and @othiym23 may know more details. :)\n. hm..alright..\n. Fix #166\n. What about https://github.com/nordnet/sass-variable-loader?. ",
    "losogudok": "thanks!\n. thanks!\n. ",
    "ccorcos": "having this same issue using `compass-mixins`...\n. I see. a loader is a module\n. having this same issue using `compass-mixins`...\n. I see. a loader is a module\n. ",
    "lukasgeiter": ":+1: for this!\n. Awesome, thanks!\n. :+1: for this!\n. Awesome, thanks!\n. ",
    "ajsharp": "I'm seeing this issue as well.\n. I'm seeing this issue as well.\n. ",
    "djfm": "Same issue here!\n. @jhnns false alarm, sorry!\n\nWe were mis-using the `ExtractTextPlugin` plugin and `sass-loader` wasn't even invoked, hence the parse error when `css-loader` tried to parse the raw sass.\n\nFor reference, the corrected version of the loader that we now use is [as follows](https://github.com/PrestaShop/PrestaShop/blob/feat/classic/themes/classic/_dev/webpack.config.js#L40):\n\n``` javascript\n{\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\n                \"style\",\n                \"css?sourceMap!postcss!sass?sourceMap\"\n        )\n}\n```\n\nMaybe some of the other reported errors are also due to a misconfiguration of something other than `sass-loader` itself.\n. Same issue here!\n. @jhnns false alarm, sorry!\n\nWe were mis-using the `ExtractTextPlugin` plugin and `sass-loader` wasn't even invoked, hence the parse error when `css-loader` tried to parse the raw sass.\n\nFor reference, the corrected version of the loader that we now use is [as follows](https://github.com/PrestaShop/PrestaShop/blob/feat/classic/themes/classic/_dev/webpack.config.js#L40):\n\n``` javascript\n{\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\n                \"style\",\n                \"css?sourceMap!postcss!sass?sourceMap\"\n        )\n}\n```\n\nMaybe some of the other reported errors are also due to a misconfiguration of something other than `sass-loader` itself.\n. ",
    "geekingfrog": "I'm not using webpack anymore so I can't confirm but it's likely that would fix it.\n. I'm not using webpack anymore so I can't confirm but it's likely that would fix it.\n. ",
    "ianwalter": "I get the error:\n\n```\nERROR in ./boyscout-core.scss\n/Users/ian/boyscout/boyscout-core.scss:1:1: Unknown word\n// Layout\n^\n@import 'modules/layout/position';\n\nERROR in ./boyscout-core.scss\nModule build failed: TypeError: Cannot read property 'trim' of undefined\n    at Object.module.exports (/Users/ian/boyscout/node_modules/sass-loader/index.js:211:16)\n @ multi main\nChild extract-text-webpack-plugin:\n```\n\nHere is the webpack config:\nhttps://github.com/ianwalter/boyscout/blob/v0.4.0/tools/webpack.config.js\nAnd the .scss file is one directory up in `boyscout-core.scss`.\nI'm sure it's my fault, but it's strange that it compiles fine if I remove the comments.\n. Ah, I didn't realize it executes in reverse of the order in which its specified, thanks!\n. I get the error:\n\n```\nERROR in ./boyscout-core.scss\n/Users/ian/boyscout/boyscout-core.scss:1:1: Unknown word\n// Layout\n^\n@import 'modules/layout/position';\n\nERROR in ./boyscout-core.scss\nModule build failed: TypeError: Cannot read property 'trim' of undefined\n    at Object.module.exports (/Users/ian/boyscout/node_modules/sass-loader/index.js:211:16)\n @ multi main\nChild extract-text-webpack-plugin:\n```\n\nHere is the webpack config:\nhttps://github.com/ianwalter/boyscout/blob/v0.4.0/tools/webpack.config.js\nAnd the .scss file is one directory up in `boyscout-core.scss`.\nI'm sure it's my fault, but it's strange that it compiles fine if I remove the comments.\n. Ah, I didn't realize it executes in reverse of the order in which its specified, thanks!\n. ",
    "i4got10": "I had a similar problem - error with processing css. Fix it with @djfm config. \n\nConfig from sass-loader example that doesn't work for me.\n\n```\nmodule.exports = {\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css\", \"sass\"]\n      }\n    ]\n  }\n};\n```\n\nThere is a workaround that I used(set loaders at every import)\n\n```\nimport styles from '!style!css!sass!./codemirror.scss';\n```\n\nAnd finally, right solution\n\n```\nmodule.exports = {\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css?sourceMap!sass?sourceMap\"]\n      }\n    ]\n  }\n};\n```\n. I had a similar problem - error with processing css. Fix it with @djfm config. \n\nConfig from sass-loader example that doesn't work for me.\n\n```\nmodule.exports = {\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css\", \"sass\"]\n      }\n    ]\n  }\n};\n```\n\nThere is a workaround that I used(set loaders at every import)\n\n```\nimport styles from '!style!css!sass!./codemirror.scss';\n```\n\nAnd finally, right solution\n\n```\nmodule.exports = {\n  ...\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css?sourceMap!sass?sourceMap\"]\n      }\n    ]\n  }\n};\n```\n. ",
    "windsome": "@jhnns @i4got10 @djfm \n\nwhen I try to use bootstrap-scss, I got this error. missing sass-loader? ref: https://github.com/windsome/rrrsn/blob/master/webpack/webpack.config.prod.js\n\n```\nERROR in ./~/css-loader?sourceMap!./app/styles/assets/stylesheets/_bootstrap.scss\nModule build failed: CssSyntaxError: /css-loader!/home/dev/frontend/rrrsn/app/styles/assets/stylesheets/_bootstrap.scss:7:1: Unknown word\n    at Input.error (/home/dev/frontend/rrrsn/node_modules/postcss/lib/input.js:61:22)\n    at Parser.unknownWord (/home/dev/frontend/rrrsn/node_modules/postcss/lib/parser.js:457:26)\n    at Parser.word (/home/dev/frontend/rrrsn/node_modules/postcss/lib/parser.js:174:14)\n    at Parser.loop (/home/dev/frontend/rrrsn/node_modules/postcss/lib/parser.js:60:26)\n    at parse (/home/dev/frontend/rrrsn/node_modules/postcss/lib/parse.js:26:12)\n    at new LazyResult (/home/dev/frontend/rrrsn/node_modules/postcss/lib/lazy-result.js:61:24)\n    at Processor.process (/home/dev/frontend/rrrsn/node_modules/postcss/lib/processor.js:34:16)\n    at processCss (/home/dev/frontend/rrrsn/node_modules/css-loader/lib/processCss.js:188:11)\n    at Object.module.exports (/home/dev/frontend/rrrsn/node_modules/css-loader/lib/loader.js:24:2)\n @ ./~/css-loader?sourceMap!./app/styles/app.scss 4:10-105\n```\n\nI've tried the following:\n\n```\n{\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css?sourceMap!sass?sourceMap\"]\n}\n```\n\nor\n\n```\n{\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\n                \"style\",\n                \"css?sourceMap!postcss!sass?sourceMap\"\n        )\n}\n```\n\nBut, no use. can you help me?\n\n```\ngit clone https://github.com/windsome/rrrsn.git\ncd rrrsn\nnpm install\nnpm run build\n```\n. @geekingfrog @ajsharp @ianwalter , how do you solve the problem?\n. @jhnns @i4got10 @djfm \n\nwhen I try to use bootstrap-scss, I got this error. missing sass-loader? ref: https://github.com/windsome/rrrsn/blob/master/webpack/webpack.config.prod.js\n\n```\nERROR in ./~/css-loader?sourceMap!./app/styles/assets/stylesheets/_bootstrap.scss\nModule build failed: CssSyntaxError: /css-loader!/home/dev/frontend/rrrsn/app/styles/assets/stylesheets/_bootstrap.scss:7:1: Unknown word\n    at Input.error (/home/dev/frontend/rrrsn/node_modules/postcss/lib/input.js:61:22)\n    at Parser.unknownWord (/home/dev/frontend/rrrsn/node_modules/postcss/lib/parser.js:457:26)\n    at Parser.word (/home/dev/frontend/rrrsn/node_modules/postcss/lib/parser.js:174:14)\n    at Parser.loop (/home/dev/frontend/rrrsn/node_modules/postcss/lib/parser.js:60:26)\n    at parse (/home/dev/frontend/rrrsn/node_modules/postcss/lib/parse.js:26:12)\n    at new LazyResult (/home/dev/frontend/rrrsn/node_modules/postcss/lib/lazy-result.js:61:24)\n    at Processor.process (/home/dev/frontend/rrrsn/node_modules/postcss/lib/processor.js:34:16)\n    at processCss (/home/dev/frontend/rrrsn/node_modules/css-loader/lib/processCss.js:188:11)\n    at Object.module.exports (/home/dev/frontend/rrrsn/node_modules/css-loader/lib/loader.js:24:2)\n @ ./~/css-loader?sourceMap!./app/styles/app.scss 4:10-105\n```\n\nI've tried the following:\n\n```\n{\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css?sourceMap!sass?sourceMap\"]\n}\n```\n\nor\n\n```\n{\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\n                \"style\",\n                \"css?sourceMap!postcss!sass?sourceMap\"\n        )\n}\n```\n\nBut, no use. can you help me?\n\n```\ngit clone https://github.com/windsome/rrrsn.git\ncd rrrsn\nnpm install\nnpm run build\n```\n. @geekingfrog @ajsharp @ianwalter , how do you solve the problem?\n. ",
    "splurtcake": "Still having this issue. Where am I going wrong?\r\n\r\n```\r\nconst styleLoaders = [\r\n\t'css?sourceMap',\r\n\t'postcss?sourceMap',\r\n\t'sass?sourceMap'\r\n];\r\n\r\nconst paths = {\r\n\tsrc: {\r\n\t\troot: path.join(__dirname, 'src/'),\r\n\t\tstyles: 'app/assets/sass/',\r\n\t},\r\n\tdist: {\r\n\t\tstyles: 'css/',\r\n\t}\r\n};\r\n\r\n\r\nexport var clientConfig = {\r\n\ttarget: 'web',\r\n\tentry: {\r\n\t\t'polyfills': './src/polyfills.browser',\r\n\t\t'vendor': './src/vendor',\r\n\t\t'main': './src/client',\r\n\t\t'styles': './src/app/assets/sass/styles.scss'\r\n\t},\r\n\toutput: {\r\n\t\tpath: root('dist/client')\r\n\t},\r\n\tplugins: [\r\n\t\tnew ExtractTextPlugin({\r\n\t\t\tfilename: path.join(paths.dist.styles, 'styles.css'),\r\n\t\t\tdisable: false,\r\n\t\t\tallChunks: true\r\n\t\t})\r\n\t],\r\n\tmodule: {\r\n\t\tloaders: [\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.scss$/,\r\n\t\t\t\tinclude: path.join(paths.src.root, paths.src.styles),\r\n\t\t\t\tloader: ExtractTextPlugin.extract(styleLoaders.join('!'))\r\n\t\t\t},\r\n\t\t]\r\n\t}\r\n};\r\n```. Still having this issue. Where am I going wrong?\r\n\r\n```\r\nconst styleLoaders = [\r\n\t'css?sourceMap',\r\n\t'postcss?sourceMap',\r\n\t'sass?sourceMap'\r\n];\r\n\r\nconst paths = {\r\n\tsrc: {\r\n\t\troot: path.join(__dirname, 'src/'),\r\n\t\tstyles: 'app/assets/sass/',\r\n\t},\r\n\tdist: {\r\n\t\tstyles: 'css/',\r\n\t}\r\n};\r\n\r\n\r\nexport var clientConfig = {\r\n\ttarget: 'web',\r\n\tentry: {\r\n\t\t'polyfills': './src/polyfills.browser',\r\n\t\t'vendor': './src/vendor',\r\n\t\t'main': './src/client',\r\n\t\t'styles': './src/app/assets/sass/styles.scss'\r\n\t},\r\n\toutput: {\r\n\t\tpath: root('dist/client')\r\n\t},\r\n\tplugins: [\r\n\t\tnew ExtractTextPlugin({\r\n\t\t\tfilename: path.join(paths.dist.styles, 'styles.css'),\r\n\t\t\tdisable: false,\r\n\t\t\tallChunks: true\r\n\t\t})\r\n\t],\r\n\tmodule: {\r\n\t\tloaders: [\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.scss$/,\r\n\t\t\t\tinclude: path.join(paths.src.root, paths.src.styles),\r\n\t\t\t\tloader: ExtractTextPlugin.extract(styleLoaders.join('!'))\r\n\t\t\t},\r\n\t\t]\r\n\t}\r\n};\r\n```. ",
    "Tux1": "Same issue\n. The `~` was missing in the `@import` instruction\n. I don't think that it's the same issue.\nIn my case, I have to prepend the path with `~` when I use webpack alias.\nFor example, I have the alias : `assets: '/app/assets/'` so when I want to import a file in `assets` I have to do that : `@import \"~assets/toto.scss\"\n. Same issue\n. The `~` was missing in the `@import` instruction\n. I don't think that it's the same issue.\nIn my case, I have to prepend the path with `~` when I use webpack alias.\nFor example, I have the alias : `assets: '/app/assets/'` so when I want to import a file in `assets` I have to do that : `@import \"~assets/toto.scss\"\n. ",
    "Anahkiasen": "Same issue here as well, works fine during initial compilation but as soon as I change a file and HMR kicks in, my resolve.alias get ignored\n. Same issue here as well, works fine during initial compilation but as soon as I change a file and HMR kicks in, my resolve.alias get ignored\n. ",
    "e110c0": "it looks like a similar issue here with webpack 2:\r\n\r\n```\r\nalias: {\r\nStyles:     path.resolve(__dirname, 'styles')\r\n}\r\n```\r\n\r\nwhen I import in a sass file like this:\r\n\r\n`@import 'Styles/imports';\r\n`\r\ncompile works, but the file imports is not watched.\r\n\r\n`@import '../../../styles/imports';`\r\n\r\ncompile and watch works.\r\n\r\nIf found in webpack 1 configs that the import should use ~:\r\n\r\n`@import '~Styles/imports';`\r\n\r\nthis also works for compile and watch. \r\nIt looks like` @import 'Styles/imports';` is not adding the files to the dependency tree for some reason.. it looks like a similar issue here with webpack 2:\r\n\r\n```\r\nalias: {\r\nStyles:     path.resolve(__dirname, 'styles')\r\n}\r\n```\r\n\r\nwhen I import in a sass file like this:\r\n\r\n`@import 'Styles/imports';\r\n`\r\ncompile works, but the file imports is not watched.\r\n\r\n`@import '../../../styles/imports';`\r\n\r\ncompile and watch works.\r\n\r\nIf found in webpack 1 configs that the import should use ~:\r\n\r\n`@import '~Styles/imports';`\r\n\r\nthis also works for compile and watch. \r\nIt looks like` @import 'Styles/imports';` is not adding the files to the dependency tree for some reason.. ",
    "rudolfschmidt": "Ran into same issue.\r\nImport of css files not working.. Ran into same issue.\r\nImport of css files not working.. ",
    "austbot": "@jhnns What about a situation where you arent using the css-loader I.E. Angular 2 where you need to run. \n\n```\n  {test: /\\.(woff|eot|ttf|svg)$/, loader: 'file-loader?name=assets/[name].[ext]?[hash]'},\n\n  {\n    test: /\\.scss$/,\n    loaders: ['raw-loader', 'postcss-loader', 'resolve-url-loader', 'sass-loader?sourceMap']\n  },\n```\n. @jhnns What about a situation where you arent using the css-loader I.E. Angular 2 where you need to run. \n\n```\n  {test: /\\.(woff|eot|ttf|svg)$/, loader: 'file-loader?name=assets/[name].[ext]?[hash]'},\n\n  {\n    test: /\\.scss$/,\n    loaders: ['raw-loader', 'postcss-loader', 'resolve-url-loader', 'sass-loader?sourceMap']\n  },\n```\n. ",
    "sliker": "@jhnns I have the problem that @austbot mention; I can't use css-loader because angular styles receive an array of strings so it generates an error when try to render if you use it, and if you don't use it the sass loader don't handle the url images and assets of component styles.\n. @jhnns extract-loader fail's on line 1 of the first scss, I just have an import on that line `@import \"../../../sass/variables\";`\nI use the loaders exacts as you put it.\n. @jhnns I have the problem that @austbot mention; I can't use css-loader because angular styles receive an array of strings so it generates an error when try to render if you use it, and if you don't use it the sass loader don't handle the url images and assets of component styles.\n. @jhnns extract-loader fail's on line 1 of the first scss, I just have an import on that line `@import \"../../../sass/variables\";`\nI use the loaders exacts as you put it.\n. ",
    "Hufschmidt": "To use the css-loader with Angular2's @Component-Decorator styles use this loader-chain:\n`exports-loader?module.exports.toString()!css-loader!sass-loader`\nthis will allow you to do:\n\n```\n@Component({\n  selector:   'bar-foo',\n  template:   require('./foo.template.html'),\n  styles:     [ require('./foo.template.scss') ]\n})\nexport class FooComponent {\n    ...\n}\n```\n\nor this loader-chain for global styles, like ionic-angular or fonts-awesome:\n`style-loader!css-loader!resolve-url!sass-loader?sourceMap`\n(resolve-url and sass-loader?sourceMap are required if you don't want to set font-path's and such manually)\n\nThis is my current config working with Angular2 (RC1-3 tested) and Ionic2 (Beta 8-9 tested): https://gist.github.com/Hufschmidt/e06bdd5592f177c58ba7cad8a023d999\n(Sidenote: _Ionic Beta 9 is still on Angular2 RC1_)\n\n**EDIT:** Second loader does not work with 3.2.2, see #254.\n. As far as I understand, breaking changes where moved from 3.2.2 (marked deprecated) to 4.0.0, so you should still be able to do \"^3.2.0\" in your package.json without installing incompatible 3.2.2 release.\n\n**Sidenote:** `EACCES: permission denied, scandir '/lost+found'` indicates you might have another problem.\n. To use the css-loader with Angular2's @Component-Decorator styles use this loader-chain:\n`exports-loader?module.exports.toString()!css-loader!sass-loader`\nthis will allow you to do:\n\n```\n@Component({\n  selector:   'bar-foo',\n  template:   require('./foo.template.html'),\n  styles:     [ require('./foo.template.scss') ]\n})\nexport class FooComponent {\n    ...\n}\n```\n\nor this loader-chain for global styles, like ionic-angular or fonts-awesome:\n`style-loader!css-loader!resolve-url!sass-loader?sourceMap`\n(resolve-url and sass-loader?sourceMap are required if you don't want to set font-path's and such manually)\n\nThis is my current config working with Angular2 (RC1-3 tested) and Ionic2 (Beta 8-9 tested): https://gist.github.com/Hufschmidt/e06bdd5592f177c58ba7cad8a023d999\n(Sidenote: _Ionic Beta 9 is still on Angular2 RC1_)\n\n**EDIT:** Second loader does not work with 3.2.2, see #254.\n. As far as I understand, breaking changes where moved from 3.2.2 (marked deprecated) to 4.0.0, so you should still be able to do \"^3.2.0\" in your package.json without installing incompatible 3.2.2 release.\n\n**Sidenote:** `EACCES: permission denied, scandir '/lost+found'` indicates you might have another problem.\n. ",
    "brunoskonrad": "Ooooh! I get it. Thanks for the feedback @jhnns :smile: \n. Ooooh! I get it. Thanks for the feedback @jhnns :smile: \n. ",
    "aaron-tay": ":+1: would love to see this resolved soon\n. :+1: would love to see this resolved soon\n. ",
    "hdmchl": "+1 had a similar issue\n. +1 had a similar issue\n. ",
    "DanielHeath": "+1\n. +1\n. ",
    "shinygang": "you should npm install object-assign --save-dev\n. you should npm install object-assign --save-dev\n. ",
    "chicoxyzzy": "Not sure if I should remove those tests or change them somehow\n. updated:\n- remove order tests\n- fix understandable errors tests\n- disable jshint noempty for empty block in case of css file\n. updated\n- node-sass 3.4.2\n- other deps\n- test asserts\n. @jtangelder @jhnns sorry for mentioning you guys directly but this stops everyone to upgrade to node > 6.5.x so it may be a crucial issue.\n. Yes but `npm install` won't update dependancies. So if you use nvm, things will break.\n. This is also an issue when you use Nexus, Artifactory, etc. because they will cache deps and when you run `npm i` cached old deps will be installed (exactly because of caret)\n. Ok. we'll just clean Nexus' repo for now\n. Not sure if I should remove those tests or change them somehow\n. updated:\n- remove order tests\n- fix understandable errors tests\n- disable jshint noempty for empty block in case of css file\n. updated\n- node-sass 3.4.2\n- other deps\n- test asserts\n. @jtangelder @jhnns sorry for mentioning you guys directly but this stops everyone to upgrade to node > 6.5.x so it may be a crucial issue.\n. Yes but `npm install` won't update dependancies. So if you use nvm, things will break.\n. This is also an issue when you use Nexus, Artifactory, etc. because they will cache deps and when you run `npm i` cached old deps will be installed (exactly because of caret)\n. Ok. we'll just clean Nexus' repo for now\n. ",
    "ChrisCinelli": "Node-sass : 3.4.2 - Please and please merge and realese =)\n. @jhnns, what do you think? Can we merge and release? \nWe had a problem with syntax that is fixed in libsass v3.3.2 -> Node-sass  3.4.2\n. Node-sass : 3.4.2 - Please and please merge and realese =)\n. @jhnns, what do you think? Can we merge and release? \nWe had a problem with syntax that is fixed in libsass v3.3.2 -> Node-sass  3.4.2\n. ",
    "renaudtertrais": "same error.\n\n**UPDATE**\n\nI fix it with `process.env.UV_THREADPOOL_SIZE=100` in my gulpfile.\n. same error.\n\n**UPDATE**\n\nI fix it with `process.env.UV_THREADPOOL_SIZE=100` in my gulpfile.\n. ",
    "niluanxy": "I fix it by require has builded scss file,old: require(\"style.scss\"),now: require(\"style.css\"),and style.css file is build by other task of style.scss file.\n. I fix it by require has builded scss file,old: require(\"style.scss\"),now: require(\"style.css\"),and style.css file is build by other task of style.scss file.\n. ",
    "ghost": "Tried with 'source-map' and 'cheap-module-source-map' which supposedly mentioned as production ready at http://webpack.github.io/docs/configuration.html#devtool\n. The same for me, any ideas?\n. Using the latest version of `sass-loader`, version 5.0.1, I'm encountering the same issue reported by @GusCaplan.\r\n\r\nBy overriding the `options` object using `webpack.LoaderOptionsPlugin`, I'm wiping out the `context` property that `sass-loader` depends on here - https://github.com/jtangelder/sass-loader/blob/master/lib/loader.js#L60\r\n\r\nTo work around the issue I've set the context object to `__dirname` or `process.cwd()` depending on how I use Webpack 2.2.\r\n\r\nI'm using the `LoaderOptionsPlugin` plugin like so:\r\n\r\n```javascript\r\n    new webpack.LoaderOptionsPlugin({\r\n      options: {\r\n        context: process.cwd(),\r\n      },\r\n    }),\r\n```\r\n\r\nI eneded. The only way I have worked around this in to create a dummy directory in node modules, and symlink the path that you want.\r\nI do this in a git postinstall hook\r\n\r\n```\r\n#!/bin/bash\r\nROOT_DIR=\"$(dirname \"$(dirname \"$(readlink \"$0\")\")\")\"\r\nALIAS_DIR=\"node_modules/yourprojectname\"\r\nYOUR_FOLDER_TO_LINK = \"some/path/inside/root\"\r\n\r\ncd $ROOT_DIR\r\n// remove the folder if created previously\r\nif [ -d \"$ALIAS_DIR\" ]; then\r\n    rm -r \"$ALIAS_DIR\"\r\nfi\r\n// create the node_modules/directory you want\r\nmkdir \"$ALIAS_DIR\"\r\n\r\nif [ -d \"$YOUR_FOLDER_TO_LINK\" ]; then\r\n   cd \"$ALIAS_DIR\"\r\n   ln -s \"../../$YOUR_FOLDER_TO_LINK\" .\r\nfi\r\n```\r\n\r\nThen in scss land you can do:\r\n```\r\n// main.scss\r\n@import \"~yourprojectname/the-symlink-directory-you-have-created/whatever\";\r\n```. @evilebottnawi just tried that. Makes no difference. Paths are still mangled.\r\n\r\nWill try to put up a test repo.. @evilebottnawi \r\nCould solve this by just giving the user the opportunity to choose a path them self.\r\n\r\n```javascript\r\n// Dont override sourceMap option if a specific path is given.\r\nif (typeof options.sourceMap === \"boolean\") {\r\n\t// Deliberately overriding the sourceMap option here.\r\n\t// node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\r\n\t// In case it is a string, options.sourceMap should be a path where the source map is written.\r\n\t// But since we're using the data option, the source map will not actually be written, but\r\n\t// all paths in sourceMap.sources will be relative to that path.\r\n\t// Pretty complicated... :(\r\n\toptions.sourceMap = path.join(process.cwd(), \"/sass.map\");\r\n}\r\n```\r\n\r\nWith a minimal test repo do you mean just an empty repo with a webpack.config to reproduce? Or a pull request with tests inside the sass-loader repo? Sorry not that used to doing open source development :). @evilebottnawi I have reproduced the problem in the following repo:\r\nhttps://github.com/baunegaard/sass-loader-sourcemap-test\r\n\r\nThe mangled path looks like this in chrome:\r\n<img width=\"476\" alt=\"capture\" src=\"https://user-images.githubusercontent.com/6918669/28080164-377fcb36-666b-11e7-8fad-831baecbb140.PNG\">\r\n\r\nApply the fix from the OP and problem is gone.. @evilebottnawi  No look at the path to the sourcemap in the screenshot: \"./css/bundles/css/modules/module.scss\"  \r\n\r\nThis is not correct. The correct path should be \"./css/modules/module.scss\"\r\n\r\nIf you look at the repo, the directory structure is:\r\n* \\<Project Root\\>\r\n  * css\r\n    * bundles\r\n      * bundle.scss\r\n    * modules\r\n      * module.scss\r\n  * node_modules\r\n\r\nThe webpack entry point is \"\\<Project Root\\>/css/bundles/bundle.scss\" which has two imports:\r\n@import \"~bootstrap/dist/css/bootstrap.css\";\r\n@import \"../modules/module.scss\";\r\n\r\nnode_modules resolve correct.. @michael-ciniawsky Tried moving config to project root. Did not make a difference.\r\nI guess that is because i already run webpack from project root like this: \r\n```\r\n\"scripts\": {\r\n  \"dev\": \"./node_modules/.bin/webpack-dev-server --config ./Assets/webpack.development.js\",\r\n}\r\n```\r\nAs a temporary workaround i used adjust-sourcemap-loader to fix the paths.\r\n\r\nNow my only problem is that stars (*) gets appended to some of the source map sources somewhere in the chain. This does not break sourcemaps in general, but it does break Chrome DevTool Workspaces as it wont map to the original files.. @evilebottnawi I finally got source maps working!\r\nBy changing this line: https://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L198\r\nto:\r\n```javascript\r\nfrom: options.from,\r\n```\r\nthereby allowing path rewriting of sources in css-loader, all problems were fixed! \r\n\r\nI now have correct paths to all sourcemaps, even without my first change to sass-loader. So the problem definitely seems to be in css-loader.\r\n\r\nOnly thing was 2 extra duplicate source maps located in the root. \r\nBy using adjust-sourcemap-loader like this:\r\n```javascript\r\nvar templateFn = require(\"adjust-sourcemap-loader\")\r\n\t.moduleFilenameTemplate(\r\n\t{\r\n\t\tformat: \"webpackProtocol\"\r\n\t});\r\n```\r\nand changing webpack.config.js output to:\r\n```javascript\r\ndevtoolModuleFilenameTemplate: templateFn,\r\ndevtoolFallbackModuleFilenameTemplate: templateFn\r\n```\r\neveything now looks perfect! No duplicate sourcemaps and all sourcemap paths are correct.\r\nI even added an extra loader to the chain so it is now: css-loader -> postcss-loader -> sass-loader. Tried with 'source-map' and 'cheap-module-source-map' which supposedly mentioned as production ready at http://webpack.github.io/docs/configuration.html#devtool\n. The same for me, any ideas?\n. Using the latest version of `sass-loader`, version 5.0.1, I'm encountering the same issue reported by @GusCaplan.\r\n\r\nBy overriding the `options` object using `webpack.LoaderOptionsPlugin`, I'm wiping out the `context` property that `sass-loader` depends on here - https://github.com/jtangelder/sass-loader/blob/master/lib/loader.js#L60\r\n\r\nTo work around the issue I've set the context object to `__dirname` or `process.cwd()` depending on how I use Webpack 2.2.\r\n\r\nI'm using the `LoaderOptionsPlugin` plugin like so:\r\n\r\n```javascript\r\n    new webpack.LoaderOptionsPlugin({\r\n      options: {\r\n        context: process.cwd(),\r\n      },\r\n    }),\r\n```\r\n\r\nI eneded. The only way I have worked around this in to create a dummy directory in node modules, and symlink the path that you want.\r\nI do this in a git postinstall hook\r\n\r\n```\r\n#!/bin/bash\r\nROOT_DIR=\"$(dirname \"$(dirname \"$(readlink \"$0\")\")\")\"\r\nALIAS_DIR=\"node_modules/yourprojectname\"\r\nYOUR_FOLDER_TO_LINK = \"some/path/inside/root\"\r\n\r\ncd $ROOT_DIR\r\n// remove the folder if created previously\r\nif [ -d \"$ALIAS_DIR\" ]; then\r\n    rm -r \"$ALIAS_DIR\"\r\nfi\r\n// create the node_modules/directory you want\r\nmkdir \"$ALIAS_DIR\"\r\n\r\nif [ -d \"$YOUR_FOLDER_TO_LINK\" ]; then\r\n   cd \"$ALIAS_DIR\"\r\n   ln -s \"../../$YOUR_FOLDER_TO_LINK\" .\r\nfi\r\n```\r\n\r\nThen in scss land you can do:\r\n```\r\n// main.scss\r\n@import \"~yourprojectname/the-symlink-directory-you-have-created/whatever\";\r\n```. @evilebottnawi just tried that. Makes no difference. Paths are still mangled.\r\n\r\nWill try to put up a test repo.. @evilebottnawi \r\nCould solve this by just giving the user the opportunity to choose a path them self.\r\n\r\n```javascript\r\n// Dont override sourceMap option if a specific path is given.\r\nif (typeof options.sourceMap === \"boolean\") {\r\n\t// Deliberately overriding the sourceMap option here.\r\n\t// node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\r\n\t// In case it is a string, options.sourceMap should be a path where the source map is written.\r\n\t// But since we're using the data option, the source map will not actually be written, but\r\n\t// all paths in sourceMap.sources will be relative to that path.\r\n\t// Pretty complicated... :(\r\n\toptions.sourceMap = path.join(process.cwd(), \"/sass.map\");\r\n}\r\n```\r\n\r\nWith a minimal test repo do you mean just an empty repo with a webpack.config to reproduce? Or a pull request with tests inside the sass-loader repo? Sorry not that used to doing open source development :). @evilebottnawi I have reproduced the problem in the following repo:\r\nhttps://github.com/baunegaard/sass-loader-sourcemap-test\r\n\r\nThe mangled path looks like this in chrome:\r\n<img width=\"476\" alt=\"capture\" src=\"https://user-images.githubusercontent.com/6918669/28080164-377fcb36-666b-11e7-8fad-831baecbb140.PNG\">\r\n\r\nApply the fix from the OP and problem is gone.. @evilebottnawi  No look at the path to the sourcemap in the screenshot: \"./css/bundles/css/modules/module.scss\"  \r\n\r\nThis is not correct. The correct path should be \"./css/modules/module.scss\"\r\n\r\nIf you look at the repo, the directory structure is:\r\n* \\<Project Root\\>\r\n  * css\r\n    * bundles\r\n      * bundle.scss\r\n    * modules\r\n      * module.scss\r\n  * node_modules\r\n\r\nThe webpack entry point is \"\\<Project Root\\>/css/bundles/bundle.scss\" which has two imports:\r\n@import \"~bootstrap/dist/css/bootstrap.css\";\r\n@import \"../modules/module.scss\";\r\n\r\nnode_modules resolve correct.. @michael-ciniawsky Tried moving config to project root. Did not make a difference.\r\nI guess that is because i already run webpack from project root like this: \r\n```\r\n\"scripts\": {\r\n  \"dev\": \"./node_modules/.bin/webpack-dev-server --config ./Assets/webpack.development.js\",\r\n}\r\n```\r\nAs a temporary workaround i used adjust-sourcemap-loader to fix the paths.\r\n\r\nNow my only problem is that stars (*) gets appended to some of the source map sources somewhere in the chain. This does not break sourcemaps in general, but it does break Chrome DevTool Workspaces as it wont map to the original files.. @evilebottnawi I finally got source maps working!\r\nBy changing this line: https://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L198\r\nto:\r\n```javascript\r\nfrom: options.from,\r\n```\r\nthereby allowing path rewriting of sources in css-loader, all problems were fixed! \r\n\r\nI now have correct paths to all sourcemaps, even without my first change to sass-loader. So the problem definitely seems to be in css-loader.\r\n\r\nOnly thing was 2 extra duplicate source maps located in the root. \r\nBy using adjust-sourcemap-loader like this:\r\n```javascript\r\nvar templateFn = require(\"adjust-sourcemap-loader\")\r\n\t.moduleFilenameTemplate(\r\n\t{\r\n\t\tformat: \"webpackProtocol\"\r\n\t});\r\n```\r\nand changing webpack.config.js output to:\r\n```javascript\r\ndevtoolModuleFilenameTemplate: templateFn,\r\ndevtoolFallbackModuleFilenameTemplate: templateFn\r\n```\r\neveything now looks perfect! No duplicate sourcemaps and all sourcemap paths are correct.\r\nI even added an extra loader to the chain so it is now: css-loader -> postcss-loader -> sass-loader. ",
    "mr-wildcard": "+1\n. +1\n. ",
    "alannesta": "+1, I got the same error and this post saves my life\n. +1, I got the same error and this post saves my life\n. ",
    "alex88": "+1 Just had the same issue! A must have in the readme!\n. +1 Just had the same issue! A must have in the readme!\n. ",
    "iabdulin": "+1\n. +1\n. ",
    "mattma": "+1 works as magic.\n. +1 works as magic.\n. ",
    "2hu12": "+1 It saves me!\n. +1 It saves me!\n. ",
    "tiirex9": "I use sass-loader 4.0.2 but have the same error. I'm not sure what I should do now... :/\n. I use sass-loader 4.0.2 but have the same error. I'm not sure what I should do now... :/\n. ",
    "apieceofbart": "@tiiger \r\nI am using 5.0.0 but still had to add `indentedSyntax=true`. Check this line from `webpack.config.js` (webpack 1.14):\r\n`loaders: [\"style-loader\", \"css-loader\", \"sass-loader?indentedSyntax=true\"]`\r\n\r\nWithout this I still got \"Invalid CSS..\" error. I am using `.scss`. If I use `.sass` loader doesn't work: \r\n\r\n```\r\nERROR in ./app/components/ChangeOrderButton.sass\r\nModule parse failed: /some/path/here/app/components/ChangeOrderButton.sass \r\nUnexpected token (1:0)`You may need an appropriate loader to handle this file type.\r\n```\r\nMaybe it's a different issue. I will create small test case whenever I have time.. Ok, turns out it was my fault - I was testing for `.scss` not `.sass` files in webpack config. Sorry for the trouble!. @tiiger \r\nI am using 5.0.0 but still had to add `indentedSyntax=true`. Check this line from `webpack.config.js` (webpack 1.14):\r\n`loaders: [\"style-loader\", \"css-loader\", \"sass-loader?indentedSyntax=true\"]`\r\n\r\nWithout this I still got \"Invalid CSS..\" error. I am using `.scss`. If I use `.sass` loader doesn't work: \r\n\r\n```\r\nERROR in ./app/components/ChangeOrderButton.sass\r\nModule parse failed: /some/path/here/app/components/ChangeOrderButton.sass \r\nUnexpected token (1:0)`You may need an appropriate loader to handle this file type.\r\n```\r\nMaybe it's a different issue. I will create small test case whenever I have time.. Ok, turns out it was my fault - I was testing for `.scss` not `.sass` files in webpack config. Sorry for the trouble!. ",
    "dmachat": "Just stumbled across this issue. Definitely a bug in the linter, sorry (https://github.com/alleyinteractive/sasslint-loader/issues/4). We're actively working on it this week, so keep an eye out.\n. Just stumbled across this issue. Definitely a bug in the linter, sorry (https://github.com/alleyinteractive/sasslint-loader/issues/4). We're actively working on it this week, so keep an eye out.\n. ",
    "adamdicarlo": "I was making the change for #190 when I noticed this. Figured these are two separate changes, thus two PRs.\n. This is branched off of the change in #189.\n. Oh, looks like @jhnns has been maintaining sass-loader. Got a minute for these two one-liner (the same line, no less :grin:) PRs?\n. Here we go! It's... definitely an involved process. You asked for it... :grin: I'm not 100% sure the resolving logic is perfect but it's worked with all the cases I've thrown at it so far.\n. NB: There's an \"as of 3.1.3\" comment in the text, based on the assumption this would be included in the next release.\n. Rewrote it the documentation but I noticed a thing or two in sass-loader's path resolution logic that is different than mine (I need to path.normalize and use charAt(0), right?). And I realized it would be ideal to decouple the resolution from the actual processing. Hmmm. But you'd need to specify whether you want Sass-like (foo => _foo, foo.scss, etc.) logic for your importer, I guess. \n. I like the way you think. Gonna let that ruminate in my brain a bit...\n. I'm also not sure anymore about the thing I was using this feature for. It was a way to try to get some of the benefits of styles-in-JS via Sass, and it's a pain in a lot of ways.\n. I was making the change for #190 when I noticed this. Figured these are two separate changes, thus two PRs.\n. This is branched off of the change in #189.\n. Oh, looks like @jhnns has been maintaining sass-loader. Got a minute for these two one-liner (the same line, no less :grin:) PRs?\n. Here we go! It's... definitely an involved process. You asked for it... :grin: I'm not 100% sure the resolving logic is perfect but it's worked with all the cases I've thrown at it so far.\n. NB: There's an \"as of 3.1.3\" comment in the text, based on the assumption this would be included in the next release.\n. Rewrote it the documentation but I noticed a thing or two in sass-loader's path resolution logic that is different than mine (I need to path.normalize and use charAt(0), right?). And I realized it would be ideal to decouple the resolution from the actual processing. Hmmm. But you'd need to specify whether you want Sass-like (foo => _foo, foo.scss, etc.) logic for your importer, I guess. \n. I like the way you think. Gonna let that ruminate in my brain a bit...\n. I'm also not sure anymore about the thing I was using this feature for. It was a way to try to get some of the benefits of styles-in-JS via Sass, and it's a pain in a lot of ways.\n. ",
    "beauroberts": "Apologies for beating what's probably a very dead horse here, but I think this would be great. I've got a copy of @adamdicarlo's branch and an importer that uses the `loadModule` function on the loader context to import files into Sass using webpack. In combination with [theo](https://github.com/salesforce-ux/theo), this lets me share JSON design properties files between javascript and sass without any intermediate compilation steps, so I can write something like:\n\n``` js\nimport colors from 'theo?./colors.json'\n```\n\nin javascript, and in sass\n\n``` css\n@import 'theo?format=scss!./colors.json'\n```\n\nEven if this never goes anywhere, thanks for the inspiration @adamdicarlo! And for maintaining a great tool, @jhnns \n. @jhnns funny you should mention - theo-loader coming soon! just trying to get it through legal. meeting with them today\n. In case it's useful! https://www.npmjs.com/package/theo-loader\n. Apologies for beating what's probably a very dead horse here, but I think this would be great. I've got a copy of @adamdicarlo's branch and an importer that uses the `loadModule` function on the loader context to import files into Sass using webpack. In combination with [theo](https://github.com/salesforce-ux/theo), this lets me share JSON design properties files between javascript and sass without any intermediate compilation steps, so I can write something like:\n\n``` js\nimport colors from 'theo?./colors.json'\n```\n\nin javascript, and in sass\n\n``` css\n@import 'theo?format=scss!./colors.json'\n```\n\nEven if this never goes anywhere, thanks for the inspiration @adamdicarlo! And for maintaining a great tool, @jhnns \n. @jhnns funny you should mention - theo-loader coming soon! just trying to get it through legal. meeting with them today\n. In case it's useful! https://www.npmjs.com/package/theo-loader\n. ",
    "mrfr0g": "@jsg2021 No, this pass doesn't take care of deduping across files. I suspect that's because of the way the scss files are processed by webpack. In this structure they are processed (and scoped) on a per require basis.\n\nTaking your example;\n- component1\n  - component1.scss\n\n```\n.component1.icon {\n  @extend %icon-foo;\n}\n```\n- component2\n  - component2.scss\n\n```\n.component2.icon {\n  @extend %icon-foo;\n}\n```\n\nBecomes\n\n```\n.component1.icon {\n  background: url(...)\n}\n\n.component2.icon {\n  background: url(...)\n}\n```\n\nHowever if you included the @extend twice within the same file, it would behave as expected.\n- component2\n  - component2.scss\n\n```\n.component2.icon {\n  @extend %icon-foo;\n}\n\n...\n\n.some-other-component.icon {\n  @extend %icon-foo;\n}\n```\n\nBecomes\n\n```\n.component2.icon,.some-other-component.icon {\n  background: url(...)\n}\n```\n. @jsg2021 any more thoughts on this?\n. @jhnns @jsg2021 Thanks for responding. To answer your question, the PR was meant to solve the issue of having something like a theme variables file, have it be included at the application level, and have those variables exposed to the rest of the require tree. Here is a diagram;\n\nApplication.js\n--> variables.scss\n--> component.js\n----> component.scss\n\nIn this example since I'm including variables.scss within the application, I want them to be exposed to the rest of the child tree, specifically the component.scss scope. The PR solved this (poorly) by having a configuration option to include files like variables.scss automatically within components.scss. \n\nI believe that I can accomplish the same result using the `data` option resolved in #216, or as @jsg2021 suggested, the baggage loader.\n. @jsg2021 No, this pass doesn't take care of deduping across files. I suspect that's because of the way the scss files are processed by webpack. In this structure they are processed (and scoped) on a per require basis.\n\nTaking your example;\n- component1\n  - component1.scss\n\n```\n.component1.icon {\n  @extend %icon-foo;\n}\n```\n- component2\n  - component2.scss\n\n```\n.component2.icon {\n  @extend %icon-foo;\n}\n```\n\nBecomes\n\n```\n.component1.icon {\n  background: url(...)\n}\n\n.component2.icon {\n  background: url(...)\n}\n```\n\nHowever if you included the @extend twice within the same file, it would behave as expected.\n- component2\n  - component2.scss\n\n```\n.component2.icon {\n  @extend %icon-foo;\n}\n\n...\n\n.some-other-component.icon {\n  @extend %icon-foo;\n}\n```\n\nBecomes\n\n```\n.component2.icon,.some-other-component.icon {\n  background: url(...)\n}\n```\n. @jsg2021 any more thoughts on this?\n. @jhnns @jsg2021 Thanks for responding. To answer your question, the PR was meant to solve the issue of having something like a theme variables file, have it be included at the application level, and have those variables exposed to the rest of the require tree. Here is a diagram;\n\nApplication.js\n--> variables.scss\n--> component.js\n----> component.scss\n\nIn this example since I'm including variables.scss within the application, I want them to be exposed to the rest of the child tree, specifically the component.scss scope. The PR solved this (poorly) by having a configuration option to include files like variables.scss automatically within components.scss. \n\nI believe that I can accomplish the same result using the `data` option resolved in #216, or as @jsg2021 suggested, the baggage loader.\n. ",
    "DDaems": ":+1: \n. :+1: \n. ",
    "eladlevy": "+1\n. +1\n. ",
    "timaschew": "For me the url breaks if I enable source maps. When I'm using the ExtractTextPlugin and enable source maps, there is just no source map available.\n. Lol :scream_cat: , it took me also so much time to figure out that foundation 6 doesn't expose any modules by default anymore.\nYou need to include either `@include foundation-everything;` or all the modules like written here in the docs: http://foundation.zurb.com/sites/docs/sass.html#adjusting-css-output\n\nSo I just created this file and import it: https://github.com/timaschew/r3-foundation-boilerplate/blob/master/src/styles/foundation.scss\n\nI've created a boilerplate project, if you want to see the whole setup: https://github.com/timaschew/r3-foundation-boilerplate\n. For me the url breaks if I enable source maps. When I'm using the ExtractTextPlugin and enable source maps, there is just no source map available.\n. Lol :scream_cat: , it took me also so much time to figure out that foundation 6 doesn't expose any modules by default anymore.\nYou need to include either `@include foundation-everything;` or all the modules like written here in the docs: http://foundation.zurb.com/sites/docs/sass.html#adjusting-css-output\n\nSo I just created this file and import it: https://github.com/timaschew/r3-foundation-boilerplate/blob/master/src/styles/foundation.scss\n\nI've created a boilerplate project, if you want to see the whole setup: https://github.com/timaschew/r3-foundation-boilerplate\n. ",
    "NemoAlex": "Same here.\nUsing SVG file as background image makes it disappear in Chrome. But shows in Safari.\nIf I disable the source map, it backs to normal.\n\n---Edited---\nUpgrade to latest version, issue's gone.\n. Same here.\nUsing SVG file as background image makes it disappear in Chrome. But shows in Safari.\nIf I disable the source map, it backs to normal.\n\n---Edited---\nUpgrade to latest version, issue's gone.\n. ",
    "sgerace": "@NemoAlex I'm seeing the same exact behavior as you: any `url()` images that aren't inlined (i.e., are larger then the inline threshold I set on the url loader) don't appear in Chrome but do show up in Safari, however, I tried upgrading sass-loader to the latest version and I'm still having the issue. What version are you running?\n. @NemoAlex I'm seeing the same exact behavior as you: any `url()` images that aren't inlined (i.e., are larger then the inline threshold I set on the url loader) don't appear in Chrome but do show up in Safari, however, I tried upgrading sass-loader to the latest version and I'm still having the issue. What version are you running?\n. ",
    "davidbonnet": "@NemoAlex @sgerace Same here: it doesn't work with Chrome\u2026 Did you find a solution?\n. @NemoAlex @sgerace Same here: it doesn't work with Chrome\u2026 Did you find a solution?\n. ",
    "alexbeletsky": "Experiencing exactly same issue, doesn't work in Chrome and Firefox, works fine Safari.\n\nsass-loader: 3.1.2\n. Don't want to +1 here, but is this considered as issue and planned to fix? \n. @jhnns sure, here you are:\n\nhttps://github.com/blogfoster/webpack-sass-loader-issue\n\nPlease note, I'm not 100% sure that it's `sass-loader` issue, could be related to some other dependent project. But repo clearly demonstrates it, try to open it with Chrome and Safari.\n\nIf you disable source-maps, it works correctly both browsers. \n. Experiencing exactly same issue, doesn't work in Chrome and Firefox, works fine Safari.\n\nsass-loader: 3.1.2\n. Don't want to +1 here, but is this considered as issue and planned to fix? \n. @jhnns sure, here you are:\n\nhttps://github.com/blogfoster/webpack-sass-loader-issue\n\nPlease note, I'm not 100% sure that it's `sass-loader` issue, could be related to some other dependent project. But repo clearly demonstrates it, try to open it with Chrome and Safari.\n\nIf you disable source-maps, it works correctly both browsers. \n. ",
    "rhagigi": "I'm hitting this issue as well. I think it has something to do with the URLs being loaded from inside the `blob:` when using sourceMap mode\n. See https://bugs.chromium.org/p/chromium/issues/detail?id=591123  -- Is there a way to do sourcemaps without using blob objects?\n. See also https://github.com/webpack/style-loader/issues/55\n. I'm hitting this issue as well. I think it has something to do with the URLs being loaded from inside the `blob:` when using sourceMap mode\n. See https://bugs.chromium.org/p/chromium/issues/detail?id=591123  -- Is there a way to do sourcemaps without using blob objects?\n. See also https://github.com/webpack/style-loader/issues/55\n. ",
    "Kadrian": "Great change, thanks very much! :+1: \n. @jhnns 1) You're right, updated.\n2) The reason is that people usually start using webpack, They find out what loaders are, they figure out they need the sass-loader. Now if they want to configure to compile sass instead of scss, they naturally look at configuration options of the `sass-loader`. Then they don't find that option. They might even start wondering if sass-loader is actually capable of compiling sass and not only scss. #187 proves there are 6 other people who eventually found out about the option, and then actually took the time to search in the issues if there is something about the indentedSyntax. So I'm sure this is just a fraction of the people who are confused. So why make it any harder than it has to be?\n. Great change, thanks very much! :+1: \n. @jhnns 1) You're right, updated.\n2) The reason is that people usually start using webpack, They find out what loaders are, they figure out they need the sass-loader. Now if they want to configure to compile sass instead of scss, they naturally look at configuration options of the `sass-loader`. Then they don't find that option. They might even start wondering if sass-loader is actually capable of compiling sass and not only scss. #187 proves there are 6 other people who eventually found out about the option, and then actually took the time to search in the issues if there is something about the indentedSyntax. So I'm sure this is just a fraction of the people who are confused. So why make it any harder than it has to be?\n. ",
    "timmfin": ":dancer::dancer:, thanks for merging! \n. :dancer::dancer:, thanks for merging! \n. ",
    "aaugustin": "This is very cool. Thank you!\n. This is very cool. Thank you!\n. ",
    "brandonburkett": "I am having the same issue, but my sass file is simply doing:\n\n```\n// import foundation, see https://github.com/jtangelder/sass-loader for '~' details\n@import \"~foundation-sites/scss/foundation\";\n```\n\nand in my webpack conf:\n\n```\n      {\n            // handle sass when including scss files\n            test: /\\.scss$/,\n            loaders: ['style', 'css', 'postcss-loader', 'sass']\n        }\n```\n\nMy output looks like this:\n\n```\n/***/ 50:\n/***/ function(module, exports, __webpack_require__) {\n\n    exports = module.exports = __webpack_require__(210)();\n    // imports\n\n\n    // module\n    exports.push([module.id, \"/**\\n * Foundation for Sites by ZURB\\n * Version 6.1.1\\n * foundation.zurb.com\\n * Licensed under MIT Open Source\\n */\\n\", \"\"]);\n\n    // exports\n\n\n/***/ },\n```\n\nIt's like it only gets the initial comments and doesn't follow all of foundation's imports.  \n. I had node_modules are part of my resolve.\n\n```\nlet path = require('path'),\n    webpack = require('webpack'),\n    autoprefixer = require('autoprefixer'),\n    nodeModules = path.join(__dirname, 'node_modules'),\n    bowerComponents = path.join(__dirname, 'bower_components');\n\n...\nsassLoader: {\n        includePaths: [path.resolve(__dirname), path.resolve(__dirname, '/public'), nodeModules, bowerComponents]\n    },\n    resolve: {\n        root: path.resolve(__dirname),\n        modulesDirectories: ['node_modules', 'bower_components'],\n        extensions: ['', '.js', '.json', '.scss', '.html'],\n        alias: {}\n    }\n...\n```\n\nI ended up downgrading to foundation 5.5.x and it seems to work fine.  Maybe it is some issue with foundation 6 + sass loader specifically?\n. I am having the same issue, but my sass file is simply doing:\n\n```\n// import foundation, see https://github.com/jtangelder/sass-loader for '~' details\n@import \"~foundation-sites/scss/foundation\";\n```\n\nand in my webpack conf:\n\n```\n      {\n            // handle sass when including scss files\n            test: /\\.scss$/,\n            loaders: ['style', 'css', 'postcss-loader', 'sass']\n        }\n```\n\nMy output looks like this:\n\n```\n/***/ 50:\n/***/ function(module, exports, __webpack_require__) {\n\n    exports = module.exports = __webpack_require__(210)();\n    // imports\n\n\n    // module\n    exports.push([module.id, \"/**\\n * Foundation for Sites by ZURB\\n * Version 6.1.1\\n * foundation.zurb.com\\n * Licensed under MIT Open Source\\n */\\n\", \"\"]);\n\n    // exports\n\n\n/***/ },\n```\n\nIt's like it only gets the initial comments and doesn't follow all of foundation's imports.  \n. I had node_modules are part of my resolve.\n\n```\nlet path = require('path'),\n    webpack = require('webpack'),\n    autoprefixer = require('autoprefixer'),\n    nodeModules = path.join(__dirname, 'node_modules'),\n    bowerComponents = path.join(__dirname, 'bower_components');\n\n...\nsassLoader: {\n        includePaths: [path.resolve(__dirname), path.resolve(__dirname, '/public'), nodeModules, bowerComponents]\n    },\n    resolve: {\n        root: path.resolve(__dirname),\n        modulesDirectories: ['node_modules', 'bower_components'],\n        extensions: ['', '.js', '.json', '.scss', '.html'],\n        alias: {}\n    }\n...\n```\n\nI ended up downgrading to foundation 5.5.x and it seems to work fine.  Maybe it is some issue with foundation 6 + sass loader specifically?\n. ",
    "mica16": "Same issue here with Foundation 6's scss and WebPack. \nOnly initial comments are pushed.\n. Same issue here with Foundation 6's scss and WebPack. \nOnly initial comments are pushed.\n. ",
    "mattwhetton": "Ok, so just found this article which resolves my issue: http://blog.boro2g.co.uk/grunt-and-gulp-tasks-in-visual-studio-2015-libsass-error/\n. Ok, so just found this article which resolves my issue: http://blog.boro2g.co.uk/grunt-and-gulp-tasks-in-visual-studio-2015-libsass-error/\n. ",
    "jameslnewell": "Could we find/replace `stdin` in the error message with the name of the file?\n\n---\n\n**Edit:** Seems to already be happening [here](https://github.com/jtangelder/sass-loader/blob/master/index.js#L63) but I was still seeing `stdin` in error messages earlier today?\n. Sorry I'm not sure, I'm not using sass anymore.. I think using a custom importer and #234 would allow you to work around this issue\n. `return importer.call(this, url, prev === 'stdin' ? resourcePath : prev, done);` should fix that I think\n\n**EDIT:** too late https://github.com/jtangelder/sass-loader/pull/277/files#diff-168726dbe96b3ce427e7fedce31bb0bcR412\n. Not without breaking the current signature \ud83d\ude0c. As per my comments on another issue, I'm no longer actively using sass on any projects so you're welcome to close if no one else wants this.. Could we find/replace `stdin` in the error message with the name of the file?\n\n---\n\n**Edit:** Seems to already be happening [here](https://github.com/jtangelder/sass-loader/blob/master/index.js#L63) but I was still seeing `stdin` in error messages earlier today?\n. Sorry I'm not sure, I'm not using sass anymore.. I think using a custom importer and #234 would allow you to work around this issue\n. `return importer.call(this, url, prev === 'stdin' ? resourcePath : prev, done);` should fix that I think\n\n**EDIT:** too late https://github.com/jtangelder/sass-loader/pull/277/files#diff-168726dbe96b3ce427e7fedce31bb0bcR412\n. Not without breaking the current signature \ud83d\ude0c. As per my comments on another issue, I'm no longer actively using sass on any projects so you're welcome to close if no one else wants this.. ",
    "deadlyicon": "same problem here:\n\n``` js\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n  entry: __dirname+'/react-app/main.js',\n  output: { path: __dirname+'/public/assets', filename: 'react-app.js' },\n  devtool: \"source-map\", // or \"inline-source-map\"\n  module: {\n    loaders: [\n      {\n        test: /.jsx?$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/,\n        query: {\n          // presets: ['es2015', 'react']\n          presets: ['es2015', 'react', 'stage-0']\n        }\n      },\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css?sourceMap\", \"sass?sourceMap\"]\n      }\n    ],\n    sassLoader: {\n      includePaths: [path.resolve(__dirname, \"./some-folder\")],\n      data: \"$frog: frog;\"\n    }\n  },\n};\n```\n. same problem here:\n\n``` js\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n  entry: __dirname+'/react-app/main.js',\n  output: { path: __dirname+'/public/assets', filename: 'react-app.js' },\n  devtool: \"source-map\", // or \"inline-source-map\"\n  module: {\n    loaders: [\n      {\n        test: /.jsx?$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/,\n        query: {\n          // presets: ['es2015', 'react']\n          presets: ['es2015', 'react', 'stage-0']\n        }\n      },\n      {\n        test: /\\.scss$/,\n        loaders: [\"style\", \"css?sourceMap\", \"sass?sourceMap\"]\n      }\n    ],\n    sassLoader: {\n      includePaths: [path.resolve(__dirname, \"./some-folder\")],\n      data: \"$frog: frog;\"\n    }\n  },\n};\n```\n. ",
    "sdtsui": "Might be unrelated, but thought I'd add in case it's helpful.\n\nI had an identical similar error (`Error: Cannot resolve module 'css'`), but with vanilla css. My loader was `css?modules` in Webpack. I needed to flip an `importLoaders` flag to get it to work with postcss. If `sass-loader` has a similar flag, perhaps you could try that with `postcss`?  \n\n```\n{\n  test: /\\.css$/,\n  loader: 'style!css-loader?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]' \n}\n```\n\n[source](https://github.com/css-modules/webpack-demo)\nhope that helps or provides a hint!\n. Might be unrelated, but thought I'd add in case it's helpful.\n\nI had an identical similar error (`Error: Cannot resolve module 'css'`), but with vanilla css. My loader was `css?modules` in Webpack. I needed to flip an `importLoaders` flag to get it to work with postcss. If `sass-loader` has a similar flag, perhaps you could try that with `postcss`?  \n\n```\n{\n  test: /\\.css$/,\n  loader: 'style!css-loader?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]' \n}\n```\n\n[source](https://github.com/css-modules/webpack-demo)\nhope that helps or provides a hint!\n. ",
    "mkoryak": "a simple sass compilation will not transform your css image urls into the ones that webpack transformed and extracted. you still need to use webpack. \n\nif you are still having this problem, i can help you - i have done exactly this. \n. you should look into node-sass options, specifically `functions`.  if you dont mind specifying a function in js, then it will be globally available to all of your scss files. \n. @richard-flosi \nyou know that you dont need `functions` to do that, you could have implemented that exact thing as a sass function, though arguably with much more googling of syntax.\nYou should also return `sass.types.Color` there instead, otherwise you wont be able to use the result of that function in any function that requires a color\n. really? you can call `darken` and  `lighten` on the strings returned from those functions?\n. sure in sass:\n\n```\n.poop {\n   color: darken(get('colors.reports.blue'), 10%);\n}\n```\n. the latest version of sass-loader finally lets you do this very easily. see https://github.com/jtangelder/sass-loader/pull/216\n\nbasically you need to pass the `data` option which should contain something like \n\n``` scss\n@import '_my_global_stuffs.scss';\n```\n\nand put that file in an `includePaths` path so it can be found from anywhere.\n\ninside of `_my_global_stuffs.scss` you can @import all the things you want to always be available\n. even if every single scss file in your project is guaranteed to use some file you have to import? \n\nI agree that you should keep the number of global things to a minimum, but its also silly to repeat yourself in every file of your project\n. a simple sass compilation will not transform your css image urls into the ones that webpack transformed and extracted. you still need to use webpack. \n\nif you are still having this problem, i can help you - i have done exactly this. \n. you should look into node-sass options, specifically `functions`.  if you dont mind specifying a function in js, then it will be globally available to all of your scss files. \n. @richard-flosi \nyou know that you dont need `functions` to do that, you could have implemented that exact thing as a sass function, though arguably with much more googling of syntax.\nYou should also return `sass.types.Color` there instead, otherwise you wont be able to use the result of that function in any function that requires a color\n. really? you can call `darken` and  `lighten` on the strings returned from those functions?\n. sure in sass:\n\n```\n.poop {\n   color: darken(get('colors.reports.blue'), 10%);\n}\n```\n. the latest version of sass-loader finally lets you do this very easily. see https://github.com/jtangelder/sass-loader/pull/216\n\nbasically you need to pass the `data` option which should contain something like \n\n``` scss\n@import '_my_global_stuffs.scss';\n```\n\nand put that file in an `includePaths` path so it can be found from anywhere.\n\ninside of `_my_global_stuffs.scss` you can @import all the things you want to always be available\n. even if every single scss file in your project is guaranteed to use some file you have to import? \n\nI agree that you should keep the number of global things to a minimum, but its also silly to repeat yourself in every file of your project\n. ",
    "danhper": "@mkoryak Sorry for the late answer.\nI am still looking for a solution, so I would be really glad if you could help me, thank you very much!\n. @ivebencrazy That's exactly what I was looking for, thanks! :smile: \n. @mkoryak Sorry for the late answer.\nI am still looking for a solution, so I would be really glad if you could help me, thank you very much!\n. @ivebencrazy That's exactly what I was looking for, thanks! :smile: \n. ",
    "ivebencrazy": "Heyhey I know this is old-ish, but I was just playing with this recently, thought I should chime in, to help anyone else that runs into this issue.\n\nI ran into this problem while making a library, where I wanted a user to be able to import either the .css file OR the .scss file (in case the user wants to use my mixins, etc).  So I think what @tuvistavie  was looking to do is have a resulting .js file, .css file, and .scss file as his output.\n\n I think @tuvistavie is just using the wrong tool for the job.  What he really wants is something that will just follow the imports and append everything together without touching anything else.  I use [postcss](https://github.com/postcss/postcss) and [postcss-loader](https://github.com/postcss/postcss-loader) with the [postcss-scss](https://github.com/postcss/postcss-scss) plugin, so that it can handle the scss. I then extract this separately with [multi-loader](https://github.com/webpack/multi-loader). This has all my sass variables and things intact.\n\nI didn't really want to build a loader, and I stumbled upon this slightly hacky solution, so I'm just using that (or look at the full code [here](https://github.com/Blanket-Warriors/Zuck.js/blob/master/webpack/webpack.split-source.js)):\n\n**Example:**\n\n``` js\nvar multi = require(\"multi-loader\");\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\n// We're running two instances of ExtractTextPlugin, one for .css and one for .scss\nvar cssPlugin  = new ExtractTextPlugin(\"styles.css\",  { allChunks: true });\nvar scssPlugin = new ExtractTextPlugin(\"styles.scss\", { allChunks: true });\n\n// For .css file, compile the sass with sass-loader\nvar cssLoader  = cssPlugin.extract(\"style\",  [ \"css\", \"postcss\", \"sass\" ]);\n\n// For .scss, don't.\nvar scssLoader = scssPlugin.extract(\"style\", [ \"css\", \"postcss\" ]);\n\nmodule.exports = {\n\n  ...\n\n  module: {\n    loaders: [\n      {\n        test: /\\.(css|scss)$/,\n        loader: multi(cssLoader, scssLoader) // Use both loaders at the same time\n      }\n    ]\n  },\n  plugins: [ cssPlugin, scssPlugin ],\n  postcss: () => []\n}\n```\n\n**Dependencies:**\n\n``` js\n\"css-loader\": \"^0.25.*\",\n\"extract-text-webpack-plugin\": \"^1.0.1\",\n\"multi-loader\": \"^0.1.0\",\n\"node-sass\": \"^3.10.1\",\n\"postcss\": \"^5.2.5\",\n\"postcss-loader\": \"^1.0.0\",\n\"postcss-scss\": \"^0.3.1\",\n\"sass-loader\": \"^4.0.2\",\n\"style-loader\": \"^0.13.1\",\n\"webpack\": \"^1.13.2\",\n```\n\nI guess it seems like a lot of things to get this to work, but I was already using postcss, so worked for me.  Hope it helps!  And yey sass-loader.  \u2764\ufe0f \n. @delsvr  Sorrysorry, when I moved this project to webpack 2 was also when I moved away from using Sass, so I don't have a Webpack 2 example.\r\n\r\nBut no files are extracted at all?  That sounds like maybe the way you're using ExtractTextPlugin isn't working, maybe.  I think I remember the API changing for that sometime between Webpack 1 and Webpack 2, so maybe check the version you're using and if the API for that might have changed.. Heyhey I know this is old-ish, but I was just playing with this recently, thought I should chime in, to help anyone else that runs into this issue.\n\nI ran into this problem while making a library, where I wanted a user to be able to import either the .css file OR the .scss file (in case the user wants to use my mixins, etc).  So I think what @tuvistavie  was looking to do is have a resulting .js file, .css file, and .scss file as his output.\n\n I think @tuvistavie is just using the wrong tool for the job.  What he really wants is something that will just follow the imports and append everything together without touching anything else.  I use [postcss](https://github.com/postcss/postcss) and [postcss-loader](https://github.com/postcss/postcss-loader) with the [postcss-scss](https://github.com/postcss/postcss-scss) plugin, so that it can handle the scss. I then extract this separately with [multi-loader](https://github.com/webpack/multi-loader). This has all my sass variables and things intact.\n\nI didn't really want to build a loader, and I stumbled upon this slightly hacky solution, so I'm just using that (or look at the full code [here](https://github.com/Blanket-Warriors/Zuck.js/blob/master/webpack/webpack.split-source.js)):\n\n**Example:**\n\n``` js\nvar multi = require(\"multi-loader\");\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\n// We're running two instances of ExtractTextPlugin, one for .css and one for .scss\nvar cssPlugin  = new ExtractTextPlugin(\"styles.css\",  { allChunks: true });\nvar scssPlugin = new ExtractTextPlugin(\"styles.scss\", { allChunks: true });\n\n// For .css file, compile the sass with sass-loader\nvar cssLoader  = cssPlugin.extract(\"style\",  [ \"css\", \"postcss\", \"sass\" ]);\n\n// For .scss, don't.\nvar scssLoader = scssPlugin.extract(\"style\", [ \"css\", \"postcss\" ]);\n\nmodule.exports = {\n\n  ...\n\n  module: {\n    loaders: [\n      {\n        test: /\\.(css|scss)$/,\n        loader: multi(cssLoader, scssLoader) // Use both loaders at the same time\n      }\n    ]\n  },\n  plugins: [ cssPlugin, scssPlugin ],\n  postcss: () => []\n}\n```\n\n**Dependencies:**\n\n``` js\n\"css-loader\": \"^0.25.*\",\n\"extract-text-webpack-plugin\": \"^1.0.1\",\n\"multi-loader\": \"^0.1.0\",\n\"node-sass\": \"^3.10.1\",\n\"postcss\": \"^5.2.5\",\n\"postcss-loader\": \"^1.0.0\",\n\"postcss-scss\": \"^0.3.1\",\n\"sass-loader\": \"^4.0.2\",\n\"style-loader\": \"^0.13.1\",\n\"webpack\": \"^1.13.2\",\n```\n\nI guess it seems like a lot of things to get this to work, but I was already using postcss, so worked for me.  Hope it helps!  And yey sass-loader.  \u2764\ufe0f \n. @delsvr  Sorrysorry, when I moved this project to webpack 2 was also when I moved away from using Sass, so I don't have a Webpack 2 example.\r\n\r\nBut no files are extracted at all?  That sounds like maybe the way you're using ExtractTextPlugin isn't working, maybe.  I think I remember the API changing for that sometime between Webpack 1 and Webpack 2, so maybe check the version you're using and if the API for that might have changed.. ",
    "delsvr": "@ivebencrazy Are you able to get your particular example (i.e. multi-loader with ExtractTextPlugin) working in webpack 2/3? With your example, all of the initial loaders process the import (sass, css), but no file is extracted. If I add style-loader, the styles are just put into `<style>`, as expected. Any ideas?. @ivebencrazy Are you able to get your particular example (i.e. multi-loader with ExtractTextPlugin) working in webpack 2/3? With your example, all of the initial loaders process the import (sass, css), but no file is extracted. If I add style-loader, the styles are just put into `<style>`, as expected. Any ideas?. ",
    "Multiply": "I get the same thing. Styles actually do work if you reference the direct className from the scss file, but the object is empty, regardless.\n. If you configure it like this, it seems to work:\n\n``` js\n{\n    test: /\\.scss$/,\n    loader: 'style!css?modules!sass'\n}\n```\n. I get the same thing. Styles actually do work if you reference the direct className from the scss file, but the object is empty, regardless.\n. If you configure it like this, it seems to work:\n\n``` js\n{\n    test: /\\.scss$/,\n    loader: 'style!css?modules!sass'\n}\n```\n. ",
    "raphaguasta": "@Burhh It Worked for you? Same problem here. Does not work for me.\n. Im not sure what the problem was, but i remade the project and it worked. Thanks! :)\n. Thanks, @Burhh !\n. @Burhh It Worked for you? Same problem here. Does not work for me.\n. Im not sure what the problem was, but i remade the project and it worked. Thanks! :)\n. Thanks, @Burhh !\n. ",
    "Burhh": "@Multiply  thank u for your reply.Please forgive me for not timely reply,this config is work for me .thx\n. @raphaguasta hi, it's work for me . i think the problem lies in the loader config's arrangement order\n. @Multiply  thank u for your reply.Please forgive me for not timely reply,this config is work for me .thx\n. @raphaguasta hi, it's work for me . i think the problem lies in the loader config's arrangement order\n. ",
    "silvenon": "This is not a sass-loader issue, you just forgot to turn on CSS Modules in the css-loader.\n. Yes, this is the only way. It doesn't work because variables work only within `@import`ed Sass files. Just have a `_globals.scss` file with variables, functions etc. that you `@import` in each Sass file.\n\nThis is better anyway, because now each save won't cause all Sass files to recompile, just the file you changed.\n. You could perhaps set the [`includePath`](https://github.com/sass/node-sass#includepaths) to the directory where your stylesheet is, then import simply with `@import 'variables'`?\n. @evanjmg does [this](https://github.com/jtangelder/sass-loader#sass-options) help?. What is `SOURCE_MAP_STRING`? Are you sure that you're applying `options` [correctly](https://webpack.js.org/guides/migrating/#what-are-options-)?. This is not a sass-loader issue, you just forgot to turn on CSS Modules in the css-loader.\n. Yes, this is the only way. It doesn't work because variables work only within `@import`ed Sass files. Just have a `_globals.scss` file with variables, functions etc. that you `@import` in each Sass file.\n\nThis is better anyway, because now each save won't cause all Sass files to recompile, just the file you changed.\n. You could perhaps set the [`includePath`](https://github.com/sass/node-sass#includepaths) to the directory where your stylesheet is, then import simply with `@import 'variables'`?\n. @evanjmg does [this](https://github.com/jtangelder/sass-loader#sass-options) help?. What is `SOURCE_MAP_STRING`? Are you sure that you're applying `options` [correctly](https://webpack.js.org/guides/migrating/#what-are-options-)?. ",
    "owenyang0": "+1 same issue\n. +1 same issue\n. ",
    "MarkPieszak": "Same issue as well, it's basically just not working / handling .scss files.\n\n```\nmodule: {\n    loaders: [{\n        test: /\\.sass$/,\n        loader: 'style!css!sass?sourceMap'\n            }]\n}\n```\n\nI have all 3 loaders installed as well, and am simply doing a \n\n```\nimport './header.scss';\n```\n. Same issue as well, it's basically just not working / handling .scss files.\n\n```\nmodule: {\n    loaders: [{\n        test: /\\.sass$/,\n        loader: 'style!css!sass?sourceMap'\n            }]\n}\n```\n\nI have all 3 loaders installed as well, and am simply doing a \n\n```\nimport './header.scss';\n```\n. ",
    "storrdev": "I'm having this issue as well. Has anyone found a solution?\n\nFWIW It only happens when I start the server with the sass files imported. If I comment out the import and start the server, I don't get this error. I can then uncomment out the sass imports and everything works like it should.\n\nI'm using babel so I'm wondering if it's a babel issue.\n. @bipinshashi Adding this code near the top of my webpack config fixed it for me:\n\n`require.extensions['.scss'] = () => {\nreturn;\n};\nrequire.extensions['.css'] = () => {\n  return;\n};`\n\nHope that helps!\n. I'm having this issue as well. Has anyone found a solution?\n\nFWIW It only happens when I start the server with the sass files imported. If I comment out the import and start the server, I don't get this error. I can then uncomment out the sass imports and everything works like it should.\n\nI'm using babel so I'm wondering if it's a babel issue.\n. @bipinshashi Adding this code near the top of my webpack config fixed it for me:\n\n`require.extensions['.scss'] = () => {\nreturn;\n};\nrequire.extensions['.css'] = () => {\n  return;\n};`\n\nHope that helps!\n. ",
    "bipinshashi": "+1 @storrdev facing the same issue - works if commenting on server start and then uncommenting after..did you find a solution?\n. +1 @storrdev facing the same issue - works if commenting on server start and then uncommenting after..did you find a solution?\n. ",
    "rickhanlonii": "Thanks @storrdev that worked for me and so did:\n\n``` javascript\nimport * as styles from './header.scss'\n```\n. Thanks @storrdev that worked for me and so did:\n\n``` javascript\nimport * as styles from './header.scss'\n```\n. ",
    "danez": "I just saw there is already a PR for this #200.\n. I just saw there is already a PR for this #200.\n. ",
    "glebmachine": "I have found this feature right from `libsass`, sorry.\nBut still, can you describe sassLoader options object please?)\n. Yeah, thanks!\r\nBut, i have moved to stylus(. I have found this feature right from `libsass`, sorry.\nBut still, can you describe sassLoader options object please?)\n. Yeah, thanks!\r\nBut, i have moved to stylus(. ",
    "MichaelIT": "@glebmachine \r\nHi, this is not a problem on sass-loader, it was related to webpack options config.\r\nIf u want to pass custom functions to node-sass, u may want to define `ident ` in webpack config.\r\n https://webpack.js.org/guides/migrating/#complex-options\r\n\r\n```\r\n{\r\n      test: /\\.scss$/,\r\n      exclude: /node_modules/,\r\n      use: [{\r\n        loader: 'style-loader'\r\n      }, {\r\n        loader: 'css-loader'\r\n      }, {\r\n        loader: 'sass-loader',\r\n        options: {\r\n// ========add flowing line\r\n          ident: \"by-michael\",\r\n          functions: {\r\n            customfunction(color, index) {\r\n              return sassTypes.String(color.getValue());\r\n            },\r\n...\r\n```. @glebmachine \r\nHi, this is not a problem on sass-loader, it was related to webpack options config.\r\nIf u want to pass custom functions to node-sass, u may want to define `ident ` in webpack config.\r\n https://webpack.js.org/guides/migrating/#complex-options\r\n\r\n```\r\n{\r\n      test: /\\.scss$/,\r\n      exclude: /node_modules/,\r\n      use: [{\r\n        loader: 'style-loader'\r\n      }, {\r\n        loader: 'css-loader'\r\n      }, {\r\n        loader: 'sass-loader',\r\n        options: {\r\n// ========add flowing line\r\n          ident: \"by-michael\",\r\n          functions: {\r\n            customfunction(color, index) {\r\n              return sassTypes.String(color.getValue());\r\n            },\r\n...\r\n```. ",
    "richard-flosi": "Previously i was getting global variables using the jsontosass-loader and the prepend-loader to make them available to all sass files. I just refactored to use the `functions` feature from `node-sass` so I could create a custom sass function to access my variables and was able to move my sass variables from json to js.\n\nthe gist:\n\n```\nconst sass = require('node-sass');\nconst sassVars = require('./theme/vars.js');\n\n// ...\n  sassLoader: {\n    functions: {\n      'get($keys)': function(keys) {\n        var keys = keys.getValue().split('.');\n        var result = sassVars;\n        var i;\n        for (i = 0; i < keys.length; i++) {\n          result = result[keys[i]];\n        }\n        return new sass.types.String(result);\n      },\n    },\n  },\n// ...\n```\n\nThen in my sass files I can access variables via `get('colors.reports.blue')`. Part of the motivation for this change was removing code like `map-get(map-get($colors, reports), blue)`.\n. Yeah, I'm not sure what that would look like as a sass function, but I did consider going that route in which case I would have had to use the prepend-loader to make that available to all sass files.\nI was worried that returning `sass.types.Color` might be an issue, but using `String` for everything it working fine, colors, numbers, font families, etc.\nPlus, it allows me to move my sass variables to js which I previously had in JSON so I could share them between sass and js.\n. I'm not a sass expert, can you give me an example of the usage you are taking about and I'll test it out?\n. yup, you are correct, that doesn't work with `String` type.\n. Previously i was getting global variables using the jsontosass-loader and the prepend-loader to make them available to all sass files. I just refactored to use the `functions` feature from `node-sass` so I could create a custom sass function to access my variables and was able to move my sass variables from json to js.\n\nthe gist:\n\n```\nconst sass = require('node-sass');\nconst sassVars = require('./theme/vars.js');\n\n// ...\n  sassLoader: {\n    functions: {\n      'get($keys)': function(keys) {\n        var keys = keys.getValue().split('.');\n        var result = sassVars;\n        var i;\n        for (i = 0; i < keys.length; i++) {\n          result = result[keys[i]];\n        }\n        return new sass.types.String(result);\n      },\n    },\n  },\n// ...\n```\n\nThen in my sass files I can access variables via `get('colors.reports.blue')`. Part of the motivation for this change was removing code like `map-get(map-get($colors, reports), blue)`.\n. Yeah, I'm not sure what that would look like as a sass function, but I did consider going that route in which case I would have had to use the prepend-loader to make that available to all sass files.\nI was worried that returning `sass.types.Color` might be an issue, but using `String` for everything it working fine, colors, numbers, font families, etc.\nPlus, it allows me to move my sass variables to js which I previously had in JSON so I could share them between sass and js.\n. I'm not a sass expert, can you give me an example of the usage you are taking about and I'll test it out?\n. yup, you are correct, that doesn't work with `String` type.\n. ",
    "wjagodfrey": "Looking for a similar thing. Would love it if there were a way of defining global imports. For instance, I have this at the head of every sass file:\n\n```\n@import '../config/config';\n```\n\nWould be great to import it by default to every stylesheet.\n. Looking for a similar thing. Would love it if there were a way of defining global imports. For instance, I have this at the head of every sass file:\n\n```\n@import '../config/config';\n```\n\nWould be great to import it by default to every stylesheet.\n. ",
    "andrewmclagan": "  `+ 1,000,000,000,000...`\n. although the problme with that is we end up with nest head fuck...:\n\n`\"../../../../../src/_varibles.scss\"`\n\nif we restructure our directories.. BOOM!\n.   `+ 1,000,000,000,000...`\n. although the problme with that is we end up with nest head fuck...:\n\n`\"../../../../../src/_varibles.scss\"`\n\nif we restructure our directories.. BOOM!\n. ",
    "Kikobeats": "apparently doesn't work in the last version, I don't know if a regression or what happens.\n. Same problem using [material components web](https://github.com/material-components/material-components-web).\r\n\r\nLooks like the `@` char is not matching as condition for resolve the local module.\r\n\r\nThis remembered me that `~module` resolve a local module, but `~/` resolve $HOME path. \r\n\r\nso basically webpack is not contemplating `@` as part of the module name.\r\n\r\nA workaround for resolve that is include the scoped paths into `includePaths`:\r\n\r\n```js\r\nloader: 'sass-loader',\r\n        options: {\r\n          sourceMap: true,\r\n          includePaths: ['node_modules', 'node_modules/@material/*']\r\n                .map((d) => path.join(__dirname, d))\r\n                .map((g) => glob.sync(g))\r\n                .reduce((a, c) => a.concat(c), [])\r\n        }\r\n```\r\n\r\nand then you can do:\r\n\r\n```sass\r\nimport '@material/card/mdc-card'\r\n```\r\n\r\nbut ideally, avoid this specific configuration.. Same issue here: https://github.com/material-components/material-components-web/issues/351#issuecomment-293541360. apparently doesn't work in the last version, I don't know if a regression or what happens.\n. Same problem using [material components web](https://github.com/material-components/material-components-web).\r\n\r\nLooks like the `@` char is not matching as condition for resolve the local module.\r\n\r\nThis remembered me that `~module` resolve a local module, but `~/` resolve $HOME path. \r\n\r\nso basically webpack is not contemplating `@` as part of the module name.\r\n\r\nA workaround for resolve that is include the scoped paths into `includePaths`:\r\n\r\n```js\r\nloader: 'sass-loader',\r\n        options: {\r\n          sourceMap: true,\r\n          includePaths: ['node_modules', 'node_modules/@material/*']\r\n                .map((d) => path.join(__dirname, d))\r\n                .map((g) => glob.sync(g))\r\n                .reduce((a, c) => a.concat(c), [])\r\n        }\r\n```\r\n\r\nand then you can do:\r\n\r\n```sass\r\nimport '@material/card/mdc-card'\r\n```\r\n\r\nbut ideally, avoid this specific configuration.. Same issue here: https://github.com/material-components/material-components-web/issues/351#issuecomment-293541360. ",
    "shelldandy": "Yeah i'd like to know how to sort this out as well :) specially to have my mixins everywhere\n. Yeah i'd like to know how to sort this out as well :) specially to have my mixins everywhere\n. ",
    "webdingens": "Using data and includePaths worked for me on sass-loader v. 4.1.1. While I do see the point of not using the global space there is also not enough time to make third party libraries conform to that idea. Unless there is a way to @import_once for production or otherwise prevent the style definitions from repeating themselves the idea of not using global variables at all doesn't seem feasible to me (bandwidth and time wise). But that might depend on the projects you are working on.. Using data and includePaths worked for me on sass-loader v. 4.1.1. While I do see the point of not using the global space there is also not enough time to make third party libraries conform to that idea. Unless there is a way to @import_once for production or otherwise prevent the style definitions from repeating themselves the idea of not using global variables at all doesn't seem feasible to me (bandwidth and time wise). But that might depend on the projects you are working on.. ",
    "evanjmg": "anyone have a gist of their working code to share?. Any full examples on this? I can't get this working with the examples given.. No. I'm not given the file structure, @import statement, nor variable. This is only useful for node modules not including a global variables file like _variables.scss. I'm using webpack 2.1.0-beta.27 and sass loader 4.1.1 doing the following: \r\n\r\nwebpack.config.js \r\n```\r\n loader: 'sass-loader' + SOURCE_MAP_STRING,\r\n              options: {\r\n                data: '@import \"variables\";', // I tried _variables as well\r\n                includePaths: [path.resolve(__dirname, \"src\")],\r\n                outputStyle: 'compressed',\r\n                sourceMap: true,\r\n                outFile: 'style.css'\r\n              }\r\n```\r\nscss file in src/app/styles/partials/_variables.scss: \r\n`\r\n$white: #fff\r\n`\r\nand in other part of app in\r\nsrc/guests/component.scss:\r\n\r\n```\r\n@import 'variables'; // get error cannot find module variables \r\n.guest {\r\n   color: $white; // without @import 'variables' at the top of this file - I get $white is not defined\r\n}\r\n\r\n```\r\nImporting relatively works fine, but I can't get these globals to work.\r\n. anyone have a gist of their working code to share?. Any full examples on this? I can't get this working with the examples given.. No. I'm not given the file structure, @import statement, nor variable. This is only useful for node modules not including a global variables file like _variables.scss. I'm using webpack 2.1.0-beta.27 and sass loader 4.1.1 doing the following: \r\n\r\nwebpack.config.js \r\n```\r\n loader: 'sass-loader' + SOURCE_MAP_STRING,\r\n              options: {\r\n                data: '@import \"variables\";', // I tried _variables as well\r\n                includePaths: [path.resolve(__dirname, \"src\")],\r\n                outputStyle: 'compressed',\r\n                sourceMap: true,\r\n                outFile: 'style.css'\r\n              }\r\n```\r\nscss file in src/app/styles/partials/_variables.scss: \r\n`\r\n$white: #fff\r\n`\r\nand in other part of app in\r\nsrc/guests/component.scss:\r\n\r\n```\r\n@import 'variables'; // get error cannot find module variables \r\n.guest {\r\n   color: $white; // without @import 'variables' at the top of this file - I get $white is not defined\r\n}\r\n\r\n```\r\nImporting relatively works fine, but I can't get these globals to work.\r\n. ",
    "vdefranc": "As far as the discussion above about importing variables or mixins into every file, I'm finding that if I import a sass file in three different sass modules, webpack is bundling three copies of that imported file. Importing modules in this manner appears to me to be pretty detrimental. \r\n\r\nMaybe there's something I'm missing.. As far as the discussion above about importing variables or mixins into every file, I'm finding that if I import a sass file in three different sass modules, webpack is bundling three copies of that imported file. Importing modules in this manner appears to me to be pretty detrimental. \r\n\r\nMaybe there's something I'm missing.. ",
    "guillaumemolter": "A related discussion: https://github.com/vuejs/vue-loader/issues/328. If like me you use Vue.js with the Webpack vue-cli template, [Joan Mira's blog post](http://joanmira.com/a-few-more-vuejs-2-tweaks-for-the-beginners/) explains how to implement @natchiketa's solution with this stack.. A related discussion: https://github.com/vuejs/vue-loader/issues/328. If like me you use Vue.js with the Webpack vue-cli template, [Joan Mira's blog post](http://joanmira.com/a-few-more-vuejs-2-tweaks-for-the-beginners/) explains how to implement @natchiketa's solution with this stack.. ",
    "thathurtabit": "I'm just trying to get my head around this.\r\n\r\nSo, if I have one file which includes my variables / mixins:\r\n`app/variables.scss`\r\n\r\nAnd then other components that have their own stylesheets which require the variables in `app/variables.scss`\r\n\r\nSo:\r\n```\r\napp/components/header.scss\r\napp/components/page.scss\r\napp/components/footer.scss\r\n...\r\n```\r\n\r\nAnd they all need to reference and `@import variables.scss`... will all the variables be duplicated with each component when it reaches my compiled `.css`?. I'm just trying to get my head around this.\r\n\r\nSo, if I have one file which includes my variables / mixins:\r\n`app/variables.scss`\r\n\r\nAnd then other components that have their own stylesheets which require the variables in `app/variables.scss`\r\n\r\nSo:\r\n```\r\napp/components/header.scss\r\napp/components/page.scss\r\napp/components/footer.scss\r\n...\r\n```\r\n\r\nAnd they all need to reference and `@import variables.scss`... will all the variables be duplicated with each component when it reaches my compiled `.css`?. ",
    "shiroganee": "Ok I solved it by myself. The problem wasn't with the sass-loader nor with the webpack (sorry). It was all about \n`typeof window !== 'undefined.`\nI'm writing isomorphic app and the webpack nor the sass-loader was crashing. The crashing one was application during start. Odd thing that WebStorm didn't show that. I only observed that in Visual Studio Code (unexpected token in scss file).\n\n`if (typeof window !== 'undefined')`\nand require in that resolved problem and it is working like a charm right now.\n\nMaybe it is worth pointing out in Readme that in isomorphic apps it is important to check for window if you wish to include styles?\n. Ok I solved it by myself. The problem wasn't with the sass-loader nor with the webpack (sorry). It was all about \n`typeof window !== 'undefined.`\nI'm writing isomorphic app and the webpack nor the sass-loader was crashing. The crashing one was application during start. Odd thing that WebStorm didn't show that. I only observed that in Visual Studio Code (unexpected token in scss file).\n\n`if (typeof window !== 'undefined')`\nand require in that resolved problem and it is working like a charm right now.\n\nMaybe it is worth pointing out in Readme that in isomorphic apps it is important to check for window if you wish to include styles?\n. ",
    "thuringia": "@mike-engel Are you still using npm@2? With npm@3 this is not an issue anymore.\nSass-loader appears to be working fine with webpack 2, unfortunately I have not done any extensive testing yet.\n. @mike-engel Are you still using npm@2? With npm@3 this is not an issue anymore.\nSass-loader appears to be working fine with webpack 2, unfortunately I have not done any extensive testing yet.\n. ",
    "mike-engel": "@thuringia yeah, we're still using node v4.3, which defaults to npm v2 (and we need to support the default for now).\n. @zachrip I'm aware that this works with npm 3. I do, however, need to support npm 2 as I mentioned earlier.\n. @thuringia yeah, we're still using node v4.3, which defaults to npm v2 (and we need to support the default for now).\n. @zachrip I'm aware that this works with npm 3. I do, however, need to support npm 2 as I mentioned earlier.\n. ",
    "zachrip": "@mike-engel You can upgrade NPM independently of Node - I have the same constraint at work (staying on stable node branch). I use Webpack2 and Sass-Loader.\n. @axelson Can you please post your config? (Also, you've done a reinstall of your modules yeah?)\n. @mike-engel You can upgrade NPM independently of Node - I have the same constraint at work (staying on stable node branch). I use Webpack2 and Sass-Loader.\n. @axelson Can you please post your config? (Also, you've done a reinstall of your modules yeah?)\n. ",
    "xlc": "I am using npm3 but getting this error when running `npm shrinkwrap --dev`\nIf sass-loader is indeed compatible with webpack2, the dependency should be `webpack\": \"^1.12.6 || ^2.1.0-beta`\n\n> npm ERR! peer invalid: webpack@^1.12.6, required by sass-loader@3.2.0\n. I am using npm3 but getting this error when running `npm shrinkwrap --dev`\nIf sass-loader is indeed compatible with webpack2, the dependency should be `webpack\": \"^1.12.6 || ^2.1.0-beta`\n\n> npm ERR! peer invalid: webpack@^1.12.6, required by sass-loader@3.2.0\n. ",
    "axelson": "@zachrip what did you have to do to get this working? I'm running into problems getting the sass loader to load. Very possibly a configuration issue with upgrading to webpack2 though.\n. @zachrip what did you have to do to get this working? I'm running into problems getting the sass loader to load. Very possibly a configuration issue with upgrading to webpack2 though.\n. ",
    "michaelmelanson": "I'm getting a peer dependency error: `npm ERR! peer invalid: webpack@^1.12.6, required by sass-loader@3.2.0`\n\nWe have `webpack@2.1.0-beta.7` installed. It looks like the peer dependency for `sass-loader` needs to be updated to allow Webpack 2.0.\n\nI'm seeing this on node v6.0.0 and npm v3.8.6.\n. I'm getting a peer dependency error: `npm ERR! peer invalid: webpack@^1.12.6, required by sass-loader@3.2.0`\n\nWe have `webpack@2.1.0-beta.7` installed. It looks like the peer dependency for `sass-loader` needs to be updated to allow Webpack 2.0.\n\nI'm seeing this on node v6.0.0 and npm v3.8.6.\n. ",
    "Robinfr": "Never mind, I figured out you can simply use `:local` and `:global` in your SASS code and you can use it exactly the way as described in the `css-loader`.\n. Never mind, I figured out you can simply use `:local` and `:global` in your SASS code and you can use it exactly the way as described in the `css-loader`.\n. ",
    "fxck": "same problem, have you found any solution?\n. same problem, have you found any solution?\n. ",
    "NetanelBasal": "You need to require the file in every file you need him. \n. You need to require the file in every file you need him. \n. ",
    "Jerry-Lau": "ran into the same problem! this is so un-convenient!\n. ran into the same problem! this is so un-convenient!\n. ",
    "natchiketa": "I'm adding `@import 'variables'` using `data`:\r\n\r\n```\r\n  sassLoader: {\r\n    data: '@import \"variables\";',\r\n    includePaths: [\r\n      path.resolve(__dirname, \"./app\")\r\n    ]\r\n  }\r\n```. @evanjmg That's exactly what my example does\u2014add an import for every Sass file to a file called `_variables.scss`. As long as `_variables.scss` is in one of the paths in the `includePaths` array, it should work.\r\n\r\nBeyond that I'd need to know more about your setup, such as:\r\n* The contents of your webpack config file\r\n* Where that config file is located relative to the project root\r\n* Where your `_variables.scss` is located relative to the project root. @evanjmg Couple of things: first, although it shouldn't be an issue, since the docs say you can put the options there\u2014I am putting them in an object called `sassLoader`, at the _root_ of my webpack config's exports, like this:\r\n\r\n```\r\nmodule.exports = {\r\n  ...\r\n  module: {\r\n    loaders: [\r\n      {\r\n        test: /\\.scss$/,\r\n        loaders: [\"style-loader\", \"css-loader\", \"sass-loader\"]\r\n      }\r\n    ]\r\n  },\r\n  sassLoader: {\r\n    includePaths: [path.resolve(__dirname, \"./some-folder\")]\r\n  }\r\n};\r\n```\r\n\r\nThe second thing is what I think is causing it to not work for you. The `@import` statement needs to use a path relative to one of the `includePaths` paths. For example, if your `_variables.scss` is at `src/app/styles/partials/_variables.scss`, and your current `includePaths` only has `src`, then the `@import` has to be like this: `@import('./app/styles/partials/variables');`. It's not just going to automatically traverse the entire tree.\r\n\r\nTry something like this:\r\n\r\n```\r\nmodule.exports = {\r\n  ...\r\n  module: {\r\n    loaders: [\r\n      {\r\n        test: /\\.scss$/,\r\n        loaders: [\"style-loader\", \"css-loader\", \"sass-loader\"]\r\n      }\r\n    ]\r\n  },\r\n  sassLoader: {\r\n    data: '@import \"variables\";',\r\n    includePaths: [\r\n      path.resolve(__dirname, \"./src/app/styles/partials\")\r\n    ]\r\n  }\r\n};\r\n```. I'm adding `@import 'variables'` using `data`:\r\n\r\n```\r\n  sassLoader: {\r\n    data: '@import \"variables\";',\r\n    includePaths: [\r\n      path.resolve(__dirname, \"./app\")\r\n    ]\r\n  }\r\n```. @evanjmg That's exactly what my example does\u2014add an import for every Sass file to a file called `_variables.scss`. As long as `_variables.scss` is in one of the paths in the `includePaths` array, it should work.\r\n\r\nBeyond that I'd need to know more about your setup, such as:\r\n* The contents of your webpack config file\r\n* Where that config file is located relative to the project root\r\n* Where your `_variables.scss` is located relative to the project root. @evanjmg Couple of things: first, although it shouldn't be an issue, since the docs say you can put the options there\u2014I am putting them in an object called `sassLoader`, at the _root_ of my webpack config's exports, like this:\r\n\r\n```\r\nmodule.exports = {\r\n  ...\r\n  module: {\r\n    loaders: [\r\n      {\r\n        test: /\\.scss$/,\r\n        loaders: [\"style-loader\", \"css-loader\", \"sass-loader\"]\r\n      }\r\n    ]\r\n  },\r\n  sassLoader: {\r\n    includePaths: [path.resolve(__dirname, \"./some-folder\")]\r\n  }\r\n};\r\n```\r\n\r\nThe second thing is what I think is causing it to not work for you. The `@import` statement needs to use a path relative to one of the `includePaths` paths. For example, if your `_variables.scss` is at `src/app/styles/partials/_variables.scss`, and your current `includePaths` only has `src`, then the `@import` has to be like this: `@import('./app/styles/partials/variables');`. It's not just going to automatically traverse the entire tree.\r\n\r\nTry something like this:\r\n\r\n```\r\nmodule.exports = {\r\n  ...\r\n  module: {\r\n    loaders: [\r\n      {\r\n        test: /\\.scss$/,\r\n        loaders: [\"style-loader\", \"css-loader\", \"sass-loader\"]\r\n      }\r\n    ]\r\n  },\r\n  sassLoader: {\r\n    data: '@import \"variables\";',\r\n    includePaths: [\r\n      path.resolve(__dirname, \"./src/app/styles/partials\")\r\n    ]\r\n  }\r\n};\r\n```. ",
    "lorenzomigliorero": " data: `@import '${path.resolve(__dirname, 'src', 'scss', 'import').replace(/\\\\/g, '/')}/variables';`\r\nThis work for me, and resolve the absolute path question.... Sorry for the delay @evilebottnawi.\r\nI just forgot to add sass-loader in package.json... \r\n\r\nThanks for your answer..  data: `@import '${path.resolve(__dirname, 'src', 'scss', 'import').replace(/\\\\/g, '/')}/variables';`\r\nThis work for me, and resolve the absolute path question.... Sorry for the delay @evilebottnawi.\r\nI just forgot to add sass-loader in package.json... \r\n\r\nThanks for your answer.. ",
    "EEGL": "A note for webpack 2 and @natchiketa's solution:\r\n\r\n> For loader options: webpack 2 no longer allows custom properties in configuration.\r\n     Loaders should be updated to allow passing options via loader options in module.rules.\r\n\r\nSo I had to modify my webpack config like this to have global variables:\r\n\r\n```\r\nloaders: [\r\n      ...\r\n      {\r\n        test: /\\.scss/,\r\n        use: [{\r\n          loader: \"style-loader\"\r\n        }, {\r\n          loader: \"css-loader\", options: {\r\n            sourceMap: true\r\n          }\r\n        }, {\r\n          loader: \"sass-loader\", options: {\r\n            sourceMap: true,\r\n            data: '@import \"variables\";',\r\n            includePaths: [\r\n              path.join(__dirname, 'src')\r\n            ]\r\n          }\r\n        }],\r\n        include: path.join(__dirname, 'src')\r\n      }\r\n    ]\r\n```\r\n. A note for webpack 2 and @natchiketa's solution:\r\n\r\n> For loader options: webpack 2 no longer allows custom properties in configuration.\r\n     Loaders should be updated to allow passing options via loader options in module.rules.\r\n\r\nSo I had to modify my webpack config like this to have global variables:\r\n\r\n```\r\nloaders: [\r\n      ...\r\n      {\r\n        test: /\\.scss/,\r\n        use: [{\r\n          loader: \"style-loader\"\r\n        }, {\r\n          loader: \"css-loader\", options: {\r\n            sourceMap: true\r\n          }\r\n        }, {\r\n          loader: \"sass-loader\", options: {\r\n            sourceMap: true,\r\n            data: '@import \"variables\";',\r\n            includePaths: [\r\n              path.join(__dirname, 'src')\r\n            ]\r\n          }\r\n        }],\r\n        include: path.join(__dirname, 'src')\r\n      }\r\n    ]\r\n```\r\n. ",
    "intermundos": "@EEGL your solution works for me. Thank you.. With EEGL's solution I got variables, mixins and function work as needed. \r\n\r\nJust add data property to sass loader and specify path of the main sass config file. This way I get sass working with all of its functions.\r\n\r\nAfter that there is no need to import variables file in local was files. . @EEGL your solution works for me. Thank you.. With EEGL's solution I got variables, mixins and function work as needed. \r\n\r\nJust add data property to sass loader and specify path of the main sass config file. This way I get sass working with all of its functions.\r\n\r\nAfter that there is no need to import variables file in local was files. . ",
    "laurazenc": "@lorenzomigliorero's solution worked for me, except I had to go up one level to access the **_style_** folder which was inside the **_src_** folder\r\n\r\n`@import '${path.resolve(__dirname, '..', 'src', 'style').replace(/\\\\/g, '/')}/vars';`. @lorenzomigliorero's solution worked for me, except I had to go up one level to access the **_style_** folder which was inside the **_src_** folder\r\n\r\n`@import '${path.resolve(__dirname, '..', 'src', 'style').replace(/\\\\/g, '/')}/vars';`. ",
    "davidfurlong": "If my `variables.scss` is in `src/styles/variables.scss` how can I modify @EEGL 's solution to get it to work? Appreciate the help, webpack debugging is tough.. Additionally does that solution mean I still need to do an `import '~variables';` in my local scss files?. If my `variables.scss` is in `src/styles/variables.scss` how can I modify @EEGL 's solution to get it to work? Appreciate the help, webpack debugging is tough.. Additionally does that solution mean I still need to do an `import '~variables';` in my local scss files?. ",
    "th3fallen": "First of all thanks so much @EEGL, but has anyone found a way to do this that allows your variables or mixins you're adding to have access to native sass functions i.e. `darken`\r\n\r\nor for the variable's to use a var defined int he same file, something like \r\n\r\n```\r\n$color: #fff;\r\nlabel {\r\n   color: darken($color, 15%);\r\n}. derp i was missing a func that was being called to get the color. First of all thanks so much @EEGL, but has anyone found a way to do this that allows your variables or mixins you're adding to have access to native sass functions i.e. `darken`\r\n\r\nor for the variable's to use a var defined int he same file, something like \r\n\r\n```\r\n$color: #fff;\r\nlabel {\r\n   color: darken($color, 15%);\r\n}. derp i was missing a func that was being called to get the color. ",
    "Jmeyering": "I never got it to work at all. I switched to extract-loader\nhttps://github.com/peerigon/extract-loader\n. That's perfect! Thanks so much for the tip!\n. I never got it to work at all. I switched to extract-loader\nhttps://github.com/peerigon/extract-loader\n. That's perfect! Thanks so much for the tip!\n. ",
    "samjacoby": "I don't think is related to sass-loader. The issue is in how options are being passed to the plugin:\n\nSomething like any of the below should work: \n\n``` javascript\nExtractTextPlugin.extract(\"style\", \"!raw!sass\")\nExtractTextPlugin.extract(\"style\", [\"raw\", \"sass\"])\n```\n\nThe key is defining the initial loader separately. \n. I don't think is related to sass-loader. The issue is in how options are being passed to the plugin:\n\nSomething like any of the below should work: \n\n``` javascript\nExtractTextPlugin.extract(\"style\", \"!raw!sass\")\nExtractTextPlugin.extract(\"style\", [\"raw\", \"sass\"])\n```\n\nThe key is defining the initial loader separately. \n. ",
    "cwagner22": "Now I can indeed edit the scss files directly in Chrome.\n\nHowever I thought I could live edit the css properties using Devtools and have Chrome automatically update the scss source file. (And then I could simply hit Ctrl+S to save the file or use the history feature to see the changes).\nAny idea if it could be possible? For example I'm often making small styling changes using devtools and when I'm satisfied by the result I copy everything that I've changed to my IDE, which is a pain.\n. Sorry I'm not using webpack in my current project. If I get this issue again in the near future I'll try to make a test repo. (but the default config should be enough to reproduce it, if the issue is still not fixed). Now I can indeed edit the scss files directly in Chrome.\n\nHowever I thought I could live edit the css properties using Devtools and have Chrome automatically update the scss source file. (And then I could simply hit Ctrl+S to save the file or use the history feature to see the changes).\nAny idea if it could be possible? For example I'm often making small styling changes using devtools and when I'm satisfied by the result I copy everything that I've changed to my IDE, which is a pain.\n. Sorry I'm not using webpack in my current project. If I get this issue again in the near future I'll try to make a test repo. (but the default config should be enough to reproduce it, if the issue is still not fixed). ",
    "donaldallen": "@cwagner22 Wonder if you're still having this issue? I'm having the same problem. I swear I was able to update the .scss file via changes made to the Styles tab in Elements, like this:\r\n\r\n![](https://umaar.com/assets/images/dev-tips/live-sass.gif). @cwagner22 Wonder if you're still having this issue? I'm having the same problem. I swear I was able to update the .scss file via changes made to the Styles tab in Elements, like this:\r\n\r\n![](https://umaar.com/assets/images/dev-tips/live-sass.gif). ",
    "mattxo": "I'm having what appears to be a similar issue. Do you manage to fix it? @xiaoyunchen \n\n```\n Asset       Size  Chunks             Chunk Names\n9:07 PM -    js/app.12ffa852f5a419a52c5d.js    1.55 MB       0  [emitted]  app\n9:07 PM - js/vendor.12ffa852f5a419a52c5d.js     457 kB       1  [emitted]  vendor\n9:07 PM - js/common.12ffa852f5a419a52c5d.js     890 kB       2  [emitted]  common\n9:07 PM -                        index.html    1.33 kB          [emitted]  \n9:07 PM -                   img\\favicon.ico    5.43 kB          [emitted]  \n9:07 PM -          img\\shield-with-beta.png    21.3 kB          [emitted]  \n9:07 PM -                 service-worker.js   43 bytes          [emitted]  \n9:07 PM -                        stats.json  178 bytes          [emitted]  \n9:07 PM -  [673] ./src/shims/shims_for_IE.js 6.74 kB {1} [built]\n9:07 PM -        ... -> factory:157ms building:156ms\n9:07 PM -     + 715 hidden modules\n9:07 PM - ERROR in ./~/css-loader?sourceMap!./~/postcss-loader!./~/sass-loader!./~/raw-loader!./~/postcss-loader!./~/sass-loader!./src/[censored]/style.scss\n9:07 PM - Module build failed: \n9:07 PM - @import \"./../../../style/[censored].scss\";\n9:07 PM -              ^\n9:07 PM -       Invalid CSS after \"module.exports\": expected \"{\", was '= \".difficulty-sele'\n9:07 PM -       in c:\\src\\[censored]\\style.scss (line 1, column 15)\n9:07 PM -  @ ./src/[censored]/style.scss 4:14-341\n```\n. I did manage to resolve my issue... I was accidentally importing a Component in Angular2 from outside the root of the project.\n. I'm having what appears to be a similar issue. Do you manage to fix it? @xiaoyunchen \n\n```\n Asset       Size  Chunks             Chunk Names\n9:07 PM -    js/app.12ffa852f5a419a52c5d.js    1.55 MB       0  [emitted]  app\n9:07 PM - js/vendor.12ffa852f5a419a52c5d.js     457 kB       1  [emitted]  vendor\n9:07 PM - js/common.12ffa852f5a419a52c5d.js     890 kB       2  [emitted]  common\n9:07 PM -                        index.html    1.33 kB          [emitted]  \n9:07 PM -                   img\\favicon.ico    5.43 kB          [emitted]  \n9:07 PM -          img\\shield-with-beta.png    21.3 kB          [emitted]  \n9:07 PM -                 service-worker.js   43 bytes          [emitted]  \n9:07 PM -                        stats.json  178 bytes          [emitted]  \n9:07 PM -  [673] ./src/shims/shims_for_IE.js 6.74 kB {1} [built]\n9:07 PM -        ... -> factory:157ms building:156ms\n9:07 PM -     + 715 hidden modules\n9:07 PM - ERROR in ./~/css-loader?sourceMap!./~/postcss-loader!./~/sass-loader!./~/raw-loader!./~/postcss-loader!./~/sass-loader!./src/[censored]/style.scss\n9:07 PM - Module build failed: \n9:07 PM - @import \"./../../../style/[censored].scss\";\n9:07 PM -              ^\n9:07 PM -       Invalid CSS after \"module.exports\": expected \"{\", was '= \".difficulty-sele'\n9:07 PM -       in c:\\src\\[censored]\\style.scss (line 1, column 15)\n9:07 PM -  @ ./src/[censored]/style.scss 4:14-341\n```\n. I did manage to resolve my issue... I was accidentally importing a Component in Angular2 from outside the root of the project.\n. ",
    "xiaoyunchen": "Hi,I got the same problem #225 \ncould u please me a sample  of @import\n. so any suggestion about #225 ?\n. Hi,I got the same problem #225 \ncould u please me a sample  of @import\n. so any suggestion about #225 ?\n. ",
    "jcteague": "I'm having a similar problem.  I'm importing a scss file from an installed npm node module.  The imported file, in turn, has an import with coming from a node module but has the syntax\n `@import 'plugin'`\nsass loader is choking on the secondary import statement.\n\nI've tried adding node_modules to the includePath and using \n. I'm having a similar problem.  I'm importing a scss file from an installed npm node module.  The imported file, in turn, has an import with coming from a node module but has the syntax\n `@import 'plugin'`\nsass loader is choking on the secondary import statement.\n\nI've tried adding node_modules to the includePath and using \n. ",
    "limscoder": "@jtangelder thanks for taking a look. The difficulty is replicating sass's complicated import rules outside of sass-loader requires copying most of sass-loader.\n. Yeah, I would prefer that as well, but you need all the sass import rules to be able to replace the imports.\n. I'll take a look.\n. @jtangelder thanks for taking a look. The difficulty is replicating sass's complicated import rules outside of sass-loader requires copying most of sass-loader.\n. Yeah, I would prefer that as well, but you need all the sass import rules to be able to replace the imports.\n. I'll take a look.\n. ",
    "ellipticaldoor": "the same for me, how I can solve it?. the same for me, how I can solve it?. ",
    "mrcoles": "For anyone getting here from a google search\u2026 I think you just have to install node-sass yourself:\r\n\r\n```\r\nnpm install --save-dev node-sass\r\n```\r\n. For anyone getting here from a google search\u2026 I think you just have to install node-sass yourself:\r\n\r\n```\r\nnpm install --save-dev node-sass\r\n```\r\n. ",
    "sompylasar": "\ud83d\udc4d please?\n. It has even got a PR: #233\n. @jtangelder Any plans to merge this?\n. Yay!\n. \ud83d\udc4d please?\n. It has even got a PR: #233\n. @jtangelder Any plans to merge this?\n. Yay!\n. ",
    "aight8": "+1\n. +1\n. ",
    "Silviu-Marian": "+1\n. +1\n. ",
    "ljwagerfield": "+1\n. +1\n. ",
    "frenic": "+1\n. +1\n. ",
    "chrisdhanaraj": "pinging @jtangelder :)\n. pinging @jtangelder :)\n. ",
    "SEAPUNK": "You probably want to ping @jhnns instead, since he's the only active maintainer on this.\n. You probably want to ping @jhnns instead, since he's the only active maintainer on this.\n. ",
    "neverfox": "I can't be sure, but I think this breaks `this` inside of the custom importer. I'm not sure if that's a problem that can or should be solved in the importer or not, but see [here](https://github.com/Updater/node-sass-json-importer/issues/34) for context.\n. Okay, I'll need to see why tests are failing but it's late. I'll take a look tomorrow.\n. Oops, duplicate of #277. Sorry for the noise.\n. I can't be sure, but I think this breaks `this` inside of the custom importer. I'm not sure if that's a problem that can or should be solved in the importer or not, but see [here](https://github.com/Updater/node-sass-json-importer/issues/34) for context.\n. Okay, I'll need to see why tests are failing but it's late. I'll take a look tomorrow.\n. Oops, duplicate of #277. Sorry for the noise.\n. ",
    "Restuta": "maybe bump to 3.7.0 right away @mkoryak to support node v6?\n. maybe bump to 3.7.0 right away @mkoryak to support node v6?\n. ",
    "swyman": "Why not bump the version all the way to [node-sass@3.6.0](https://github.com/sass/node-sass/releases/tag/v3.6.0)?\n. Thanks @tcoopman. I'll find some time to test later today\n. Why not bump the version all the way to [node-sass@3.6.0](https://github.com/sass/node-sass/releases/tag/v3.6.0)?\n. Thanks @tcoopman. I'll find some time to test later today\n. ",
    "tcoopman": "@swyman done, for some reason, npm told me yesterday that 3.5.3 was the latest release.\n. @swyman done, for some reason, npm told me yesterday that 3.5.3 was the latest release.\n. ",
    "voroninman": "It seems that you copy-pasted extra 2 lines that are not SCSS. Try to delete them and rerun.\n\n```\n styles:  require('./home.scss') ,\nScss file looks like this:`\n```\n. It seems that you copy-pasted extra 2 lines that are not SCSS. Try to delete them and rerun.\n\n```\n styles:  require('./home.scss') ,\nScss file looks like this:`\n```\n. ",
    "ladvishal1985": "I figured out.Not an issue with the sass-loader.  \n. I figured out.Not an issue with the sass-loader.  \n. ",
    "plankguy": "Sweet thanks.\n. Sweet thanks.\n. ",
    "alexanderchan": "See sass/node-sass#1504 and nodejs/node#6500 for further details on this.  \n. For node6, upgrading to node-sass 3.7 resolved the problems I had (long error messages).\n. See sass/node-sass#1504 and nodejs/node#6500 for further details on this.  \n. For node6, upgrading to node-sass 3.7 resolved the problems I had (long error messages).\n. ",
    "viller239": "https://github.com/sass/node-sass/issues/1504 was resolved. Should bump node-sass version to 3.7\n. https://github.com/sass/node-sass/issues/1504 was resolved. Should bump node-sass version to 3.7\n. ",
    "crucialfelix": "Actually I can see that there are tests indicating that it should work already:\nhttps://github.com/jtangelder/sass-loader/blob/e81fa62974556049fc5063c11089fb97581d9410/test%2Fscss%2Fimport-include-paths.scss\n\nAnd my error message indicates that its css-loader throwing the error. Which means maybe sass-loader never ran ?\n\nProbably I have some configuration error. \n\n```\n\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loader'\n      },\n      {\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\n          'style',\n          'css',\n          // 'postcss',\n          'sass'\n        )\n      }\n    ]\n  },\n```\n. webpack sure wastes a lot of time when things go wrong.\r\n\r\nI think this is what solved it for me. I am on webpack 2.2.0\r\n\r\nIn plugins, add a LoaderOptionsPlugin.\r\nThis passes options to loaders, in this case postcss-loader and sass-loader\r\n\r\n```javascript\r\n    new webpack.LoaderOptionsPlugin({\r\n       options: {\r\n         context: __dirname,\r\n         postcss: [\r\n           require('postcss-minify-font-values'),\r\n           require('postcss-ordered-values'),\r\n           require('postcss-merge-longhand'),\r\n           require('autoprefixer'),\r\n           require('css-mqpacker'),\r\n           require('postcss-merge-rules')\r\n         ].concat(minify ?\r\n          [\r\n            require('postcss-discard-comments'),\r\n            require('cssnano')\r\n          ] : []),\r\n         sass: {\r\n           includePaths: [\r\n             path.resolve(__dirname, './sass/')\r\n           ]\r\n         }\r\n       }\r\n    }),\r\n```\r\n\r\n```javascript\r\n// in module: rules: [   ... ]\r\n      {\r\n        test: /\\.scss$/,\r\n        loader: ExtractTextPlugin.extract({\r\n          fallbackLoader: 'style-loader',  // when there is a compile error during development\r\n          loader: 'css-loader!postcss-loader!sass-loader' // loaders to use\r\n        })\r\n      },\r\n```\r\n\r\n`./sass` is where my `.scss` files are and they include things like:\r\n\r\n`@import \"ns-mixins\";`\r\n\r\nwhich resolves to\r\n\r\n`sass/_ns-mixins.scss`\r\n\r\nI think the loader issue we see isn't because it doesn't understand how the `_xxx.scss` works but that the cwd it is using is wrong. It is not relative to the file it is parsing.\r\n\r\nMaybe that is a bug: path should be resolved relative to the file.\r\n\r\nFor libraries I have no advice, sorry.  I have an old bootstrap copy that I have hacked to bits to reduce the size and remove unused code. So it is a local file, not a package.\r\n. Actually I can see that there are tests indicating that it should work already:\nhttps://github.com/jtangelder/sass-loader/blob/e81fa62974556049fc5063c11089fb97581d9410/test%2Fscss%2Fimport-include-paths.scss\n\nAnd my error message indicates that its css-loader throwing the error. Which means maybe sass-loader never ran ?\n\nProbably I have some configuration error. \n\n```\n\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loader'\n      },\n      {\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\n          'style',\n          'css',\n          // 'postcss',\n          'sass'\n        )\n      }\n    ]\n  },\n```\n. webpack sure wastes a lot of time when things go wrong.\r\n\r\nI think this is what solved it for me. I am on webpack 2.2.0\r\n\r\nIn plugins, add a LoaderOptionsPlugin.\r\nThis passes options to loaders, in this case postcss-loader and sass-loader\r\n\r\n```javascript\r\n    new webpack.LoaderOptionsPlugin({\r\n       options: {\r\n         context: __dirname,\r\n         postcss: [\r\n           require('postcss-minify-font-values'),\r\n           require('postcss-ordered-values'),\r\n           require('postcss-merge-longhand'),\r\n           require('autoprefixer'),\r\n           require('css-mqpacker'),\r\n           require('postcss-merge-rules')\r\n         ].concat(minify ?\r\n          [\r\n            require('postcss-discard-comments'),\r\n            require('cssnano')\r\n          ] : []),\r\n         sass: {\r\n           includePaths: [\r\n             path.resolve(__dirname, './sass/')\r\n           ]\r\n         }\r\n       }\r\n    }),\r\n```\r\n\r\n```javascript\r\n// in module: rules: [   ... ]\r\n      {\r\n        test: /\\.scss$/,\r\n        loader: ExtractTextPlugin.extract({\r\n          fallbackLoader: 'style-loader',  // when there is a compile error during development\r\n          loader: 'css-loader!postcss-loader!sass-loader' // loaders to use\r\n        })\r\n      },\r\n```\r\n\r\n`./sass` is where my `.scss` files are and they include things like:\r\n\r\n`@import \"ns-mixins\";`\r\n\r\nwhich resolves to\r\n\r\n`sass/_ns-mixins.scss`\r\n\r\nI think the loader issue we see isn't because it doesn't understand how the `_xxx.scss` works but that the cwd it is using is wrong. It is not relative to the file it is parsing.\r\n\r\nMaybe that is a bug: path should be resolved relative to the file.\r\n\r\nFor libraries I have no advice, sorry.  I have an old bootstrap copy that I have hacked to bits to reduce the size and remove unused code. So it is a local file, not a package.\r\n. ",
    "deini": "@crucialfelix  Sorry I bring this up again, did you manage to solve this? I'm having the same issue and also using `ExtractTextPlugin`. What am I missing?\n. @crucialfelix  Sorry I bring this up again, did you manage to solve this? I'm having the same issue and also using `ExtractTextPlugin`. What am I missing?\n. ",
    "jharris4": "I'm also running into this issue trying to get sass-loader to import a scss file from the loaders.css package (https://github.com/ConnorAtherton/loaders.css/blob/master/src/animations/ball-pulse.scss).\n\nI get an error saying it cannot resolve the file or directory 'variables' because it doesn't seem to be checking for the partial '../_variables.scss' when processing the import @import '../variables';\n. I was just about to create a pull request for this same change! Tests all passed for me as well, and was working fine when I integrated with a project.. I'm also running into this issue trying to get sass-loader to import a scss file from the loaders.css package (https://github.com/ConnorAtherton/loaders.css/blob/master/src/animations/ball-pulse.scss).\n\nI get an error saying it cannot resolve the file or directory 'variables' because it doesn't seem to be checking for the partial '../_variables.scss' when processing the import @import '../variables';\n. I was just about to create a pull request for this same change! Tests all passed for me as well, and was working fine when I integrated with a project.. ",
    "Huxpro": "Well...I found the problem is caused by `@import 'example.css'`. But `@import 'example'` works.\n\nClose.\n. Well...I found the problem is caused by `@import 'example.css'`. But `@import 'example'` works.\n\nClose.\n. ",
    "ClementParis016": "F*ck me, I've just forgot the `url()` part:\n\n``` scss\n@import url(\"https://code.getmdl.io/1.1.3/material.indigo-pink.min.css\");\n```\n\nworks fine\n. F*ck me, I've just forgot the `url()` part:\n\n``` scss\n@import url(\"https://code.getmdl.io/1.1.3/material.indigo-pink.min.css\");\n```\n\nworks fine\n. ",
    "mikeifomin": "@evilebottnawi I solved this with some magic. I do not remember how. Sorry. @evilebottnawi I solved this with some magic. I do not remember how. Sorry. ",
    "TheKodingKlingon": "Just wondering if it would be possible to retain the option of using output.path if present? I'm currently seeing a webpack build fail when loading font files...\n`ERROR in ./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/bootstrap-loader/\nno-op.js\n    Module not found: Error: Cannot resolve 'file' or 'directory' ./fonts/vlook/6dfa3ef5-ebc5-4d23-a631-b3d746c2ad39.woff2 in C:\\working\\{distPath}\\node_modules\\bootstrap-loader\n     @ ./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/bootstrap-loader/no-op.\njs 6:1131-1198`\n. Hi there, unfortunately I can't provide the exact configuration although it is essentially based on https://github.com/davezuko/react-redux-starter-kit.\n\nWith webpack.config here:\nhttps://github.com/davezuko/react-redux-starter-kit/blob/master/build/webpack.config.js\nConsts defined here:\nhttps://github.com/davezuko/react-redux-starter-kit/blob/master/config/index.js.\n\nI'd assume with this recent change that that project would have similar problems should custom fonts be loaded also.\n. Just wondering if it would be possible to retain the option of using output.path if present? I'm currently seeing a webpack build fail when loading font files...\n`ERROR in ./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/bootstrap-loader/\nno-op.js\n    Module not found: Error: Cannot resolve 'file' or 'directory' ./fonts/vlook/6dfa3ef5-ebc5-4d23-a631-b3d746c2ad39.woff2 in C:\\working\\{distPath}\\node_modules\\bootstrap-loader\n     @ ./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/bootstrap-loader/no-op.\njs 6:1131-1198`\n. Hi there, unfortunately I can't provide the exact configuration although it is essentially based on https://github.com/davezuko/react-redux-starter-kit.\n\nWith webpack.config here:\nhttps://github.com/davezuko/react-redux-starter-kit/blob/master/build/webpack.config.js\nConsts defined here:\nhttps://github.com/davezuko/react-redux-starter-kit/blob/master/config/index.js.\n\nI'd assume with this recent change that that project would have similar problems should custom fonts be loaded also.\n. ",
    "cevou": "Do you have a sample configuration file with which the error could be reproduced?\n. After some more investigation. This change indeed breaks the resolve-url-loader. As you can see in https://github.com/bholloway/resolve-url-loader/blob/master/index.js#L63 the loader assumes that the sass-loader outputs source maps relative to the output directory. This was changed with this pull request. So this pull request might be considered as a breaking change.\nThere are some changes needed in resolve-url-loader to fix this. First the outputPath needs to be changed to the context path. With this change it still doesn't work. The loader gets also confused by the sourceRoot property. I might check on this in the next couple of days.\n\nFor now this change breaks a lot of installations. Basically everyone who uses resolve-url-loader is effected. So we either need a quick fix in resolve-url-loader or need to revert this change for now and put it in a new version 4.0.\n\n// cc: @bholloway, @jhnns  \n. I created a pull request to resolve-url-loader to work again with the latest version. https://github.com/bholloway/resolve-url-loader/pull/23\n. Do you have a sample configuration file with which the error could be reproduced?\n. After some more investigation. This change indeed breaks the resolve-url-loader. As you can see in https://github.com/bholloway/resolve-url-loader/blob/master/index.js#L63 the loader assumes that the sass-loader outputs source maps relative to the output directory. This was changed with this pull request. So this pull request might be considered as a breaking change.\nThere are some changes needed in resolve-url-loader to fix this. First the outputPath needs to be changed to the context path. With this change it still doesn't work. The loader gets also confused by the sourceRoot property. I might check on this in the next couple of days.\n\nFor now this change breaks a lot of installations. Basically everyone who uses resolve-url-loader is effected. So we either need a quick fix in resolve-url-loader or need to revert this change for now and put it in a new version 4.0.\n\n// cc: @bholloway, @jhnns  \n. I created a pull request to resolve-url-loader to work again with the latest version. https://github.com/bholloway/resolve-url-loader/pull/23\n. ",
    "e-cloud": "yes, it should be breaking change. I am facing the same error.\n. yes, it should be breaking change. I am facing the same error.\n. ",
    "bel0v": "same here\n. same here\n. ",
    "mrdulin": "It seems `node-sass` did not compile correct~\n. @fengyuanzemin yes. you must be sure `node-sass` package compile correctly. keywords like `gcc`, `gyp` and something like that. \n. It seems `node-sass` did not compile correct~\n. @fengyuanzemin yes. you must be sure `node-sass` package compile correctly. keywords like `gcc`, `gyp` and something like that. \n. ",
    "fengyuanzemin": "``` shell\nrm -rf node_modules\nnpm install\n```\n\nThis will fix it.\n. ``` shell\nrm -rf node_modules\nnpm install\n```\n\nThis will fix it.\n. ",
    "toverux": "The 4.0.0 release didn't fixed the problem for me. With 3.2.1, the project builds, with 3.2.2 I get:\n\n```\nWARNING in ./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/source-map-loader!./~/source-map-loader!./~/bootstrap-loader/no-op.js\n  resolve-url-loader cannot operate: source-map error\n  EACCES: permission denied, scandir '/lost+found'\n```\n\nSame with 4.0.0.\n. The 4.0.0 release didn't fixed the problem for me. With 3.2.1, the project builds, with 3.2.2 I get:\n\n```\nWARNING in ./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/source-map-loader!./~/source-map-loader!./~/bootstrap-loader/no-op.js\n  resolve-url-loader cannot operate: source-map error\n  EACCES: permission denied, scandir '/lost+found'\n```\n\nSame with 4.0.0.\n. ",
    "judewang": "`npm install sass-loader@^3.2.0 --save-dev` will install v3.2.2 with a kindly warning lol.\n\n![](http://jude.d.pr/17UOh+)\n. `npm install sass-loader@^3.2.0 --save-dev` will install v3.2.2 with a kindly warning lol.\n\n![](http://jude.d.pr/17UOh+)\n. ",
    "mlegenhausen": "Why do you not unpublish 3.2.2? It had saved me some time.\n. I read you can contact the npm team if something like this happens (I think after 24 hours you can unpublish any package anymore).\n\nIMHO I am also not a fan of unpublish, cause I like the immutable nature of npm packages, but failing early on package installation is better than failing somewhere in your build process where it is harder to debug and everyone that uses exact versions (like me) wants this feedback, before they build their software with a broken version.\n. Sure and of course thank for the quick fix :)\n. Why do you not unpublish 3.2.2? It had saved me some time.\n. I read you can contact the npm team if something like this happens (I think after 24 hours you can unpublish any package anymore).\n\nIMHO I am also not a fan of unpublish, cause I like the immutable nature of npm packages, but failing early on package installation is better than failing somewhere in your build process where it is harder to debug and everyone that uses exact versions (like me) wants this feedback, before they build their software with a broken version.\n. Sure and of course thank for the quick fix :)\n. ",
    "sleepingevil": "I realised that the whole concept of accessing node modules like this is wrong, since I can just import them like so:\n\n`@import '~animate.css/animate.min.css'`\n\nThis one works even with the \".\" in the folder name. However, I still cannot import sass files through includePaths if the folder name has a \".\" in it.\n. Thanks for the JSON.stringify idea! ;)\n. I realised that the whole concept of accessing node modules like this is wrong, since I can just import them like so:\n\n`@import '~animate.css/animate.min.css'`\n\nThis one works even with the \".\" in the folder name. However, I still cannot import sass files through includePaths if the folder name has a \".\" in it.\n. Thanks for the JSON.stringify idea! ;)\n. ",
    "tquetano-r7": "Nvm, discovered the issue was actually unrelated, due to my own buffoonery. Closing.\n. Nvm, discovered the issue was actually unrelated, due to my own buffoonery. Closing.\n. ",
    "junjchen": "Hi @jhnns Thanks for the reply, as you said it was nothing to do on sassloader indeed =) , I got that solved some days after the issue report, somehow, but I forgot how =(\n\nSo I will just closing the issue now..\n. Hi @jhnns Thanks for the reply, as you said it was nothing to do on sassloader indeed =) , I got that solved some days after the issue report, somehow, but I forgot how =(\n\nSo I will just closing the issue now..\n. ",
    "rhysburnie": "I knew the reply would be \"dont use `file://`\"...\n\nWhy would I choose to use `file://`? this isn't the first time I've developed an app. The system I have to use for this network of distributed devices forces me to do so, I think its stupid also.\n\nI am using webpack because the app is huge and there is an entire ecosystem of tools that work great for building apps which work much better and easier via a build systems like webpack or gulp.\n\nIt's only this one little issue that didn't work and I have now resolved it.\n\nI tried various things but each solution would tend to mess with other parts of the app so finally I just ended up adding an additional script to run after build which uses the same app config settings to do a sed replacement on the css file. \n. I knew the reply would be \"dont use `file://`\"...\n\nWhy would I choose to use `file://`? this isn't the first time I've developed an app. The system I have to use for this network of distributed devices forces me to do so, I think its stupid also.\n\nI am using webpack because the app is huge and there is an entire ecosystem of tools that work great for building apps which work much better and easier via a build systems like webpack or gulp.\n\nIt's only this one little issue that didn't work and I have now resolved it.\n\nI tried various things but each solution would tend to mess with other parts of the app so finally I just ended up adding an additional script to run after build which uses the same app config settings to do a sed replacement on the css file. \n. ",
    "BerndWessels": "@jhnns Hi, thanks for the quick response.\n\nIn the little example project I built to make this issue reproducable for you the error didn't show up.\n\nSo I updated all other dependencies in my original project and did a fresh `npm install` which fixed the issue.\n\nSo the problem must have been an incompatibility between `sass-loader` v4 and one of my other `outdated` dependencies.\n\nIn case somebody has a similar error, this might help to fix it.\n\nClosing this now, all good, thanks.\n. @jhnns Hi, thanks for the quick response.\n\nIn the little example project I built to make this issue reproducable for you the error didn't show up.\n\nSo I updated all other dependencies in my original project and did a fresh `npm install` which fixed the issue.\n\nSo the problem must have been an incompatibility between `sass-loader` v4 and one of my other `outdated` dependencies.\n\nIn case somebody has a similar error, this might help to fix it.\n\nClosing this now, all good, thanks.\n. ",
    "chengzhuotc": "![image](https://cloud.githubusercontent.com/assets/9107399/17507579/fc854c1c-5e42-11e6-8b59-a6bbaf5562a5.png)\n. ![image](https://cloud.githubusercontent.com/assets/9107399/17507579/fc854c1c-5e42-11e6-8b59-a6bbaf5562a5.png)\n. ",
    "francesco-carrella": "same problem here\n. same problem here\n. ",
    "nindavidw": "I was having same problem and here's solution.\nhttps://github.com/webpack/css-loader/issues/233#issuecomment-247042470\n. I was having same problem and here's solution.\nhttps://github.com/webpack/css-loader/issues/233#issuecomment-247042470\n. ",
    "tvanro": "Same issue here.\nUsing webpack `1.13.3` and sass-loader `4.0.2`\n. Same issue here.\nUsing webpack `1.13.3` and sass-loader `4.0.2`\n. ",
    "claudio4": "Same here,\nI uploaded a video as a demostartion here https://cloud.byte-time.com/s/pIjPxewHdbf7HxL.\n\nThe video code is here https://github.com/nethruster/nethruster-website.\n. Same here,\nI uploaded a video as a demostartion here https://cloud.byte-time.com/s/pIjPxewHdbf7HxL.\n\nThe video code is here https://github.com/nethruster/nethruster-website.\n. ",
    "Awk34": "^ lol greenkeeper\n. ^ lol greenkeeper\n. ",
    "boennemann": "Hey all,\n\nGreenkeeper dev here. Got here via this tweet: https://twitter.com/Jhnnns/status/782528090186588160\n\nSorry for this \"referencing spam\". We trying to avoid this, by rewriting all links in our Pull Requests leading to GitHub to our own service (\"urls.greenkeeper.io\"), which redirects to GitHub again, but without triggering a reference.\n\nIt looks like you've used the `<user>/<repo>#<issue>` short form in one of your commit messages, which is causing the reference. It sure looks like we're not handling this case properly yet.\n\nI've opened an issue on that and I hope we can close it soon https://github.com/greenkeeperio/greenkeeper/issues/305\n\nSorry for the inconvenience.\n\nBest,\nStephan\n. Hey all,\n\nGreenkeeper dev here. Got here via this tweet: https://twitter.com/Jhnnns/status/782528090186588160\n\nSorry for this \"referencing spam\". We trying to avoid this, by rewriting all links in our Pull Requests leading to GitHub to our own service (\"urls.greenkeeper.io\"), which redirects to GitHub again, but without triggering a reference.\n\nIt looks like you've used the `<user>/<repo>#<issue>` short form in one of your commit messages, which is causing the reference. It sure looks like we're not handling this case properly yet.\n\nI've opened an issue on that and I hope we can close it soon https://github.com/greenkeeperio/greenkeeper/issues/305\n\nSorry for the inconvenience.\n\nBest,\nStephan\n. ",
    "tidus2102": "![screen shot 2016-08-17 at 12 47 56 am](https://cloud.githubusercontent.com/assets/7001637/17709659/46668cd4-6414-11e6-9fa5-39017ccecc13.png)\n\nThis line got problem, I don't know why. I try to install old version, event comment this code, but still got error.\n\nPlease help me on this! Thanks\n. Hi, I found the problem, because of autoprefixer loader. I fixed it. Sorry for reporting wrong issue.\n. Oh I miss your comment. http://d.pr/i/1aGkH => I used \"autoprefixer\", but didn't notice that this module was deprecated. I change to use this: https://github.com/postcss/postcss-loader and the issue is solved. Hope this help!\n. ![screen shot 2016-08-17 at 12 47 56 am](https://cloud.githubusercontent.com/assets/7001637/17709659/46668cd4-6414-11e6-9fa5-39017ccecc13.png)\n\nThis line got problem, I don't know why. I try to install old version, event comment this code, but still got error.\n\nPlease help me on this! Thanks\n. Hi, I found the problem, because of autoprefixer loader. I fixed it. Sorry for reporting wrong issue.\n. Oh I miss your comment. http://d.pr/i/1aGkH => I used \"autoprefixer\", but didn't notice that this module was deprecated. I change to use this: https://github.com/postcss/postcss-loader and the issue is solved. Hope this help!\n. ",
    "janwo": "I have the exact same error, how did you fix it?\n. \ud83d\udc4d  Thank you! I am still using the sass-loader. Additionally I added the postcss-loader to my config and added autoprefixer as a plugin for the postcss-loader.\n. I have the exact same error, how did you fix it?\n. \ud83d\udc4d  Thank you! I am still using the sass-loader. Additionally I added the postcss-loader to my config and added autoprefixer as a plugin for the postcss-loader.\n. ",
    "zg": "I no longer work on the project that uses sass so I cannot confirm nor deny this.. I no longer work on the project that uses sass so I cannot confirm nor deny this.. ",
    "aj0strow": "It works with the [`bail` option](https://webpack.github.io/docs/configuration.html#bail). \n\n``` js\n// webpack.config.js\n\n  config.bail = true\n```\n. It works with the [`bail` option](https://webpack.github.io/docs/configuration.html#bail). \n\n``` js\n// webpack.config.js\n\n  config.bail = true\n```\n. ",
    "ggedde": "Mac OSX (El Capitan?)\n\"sass-loader\": \"^4.0.2\",\n\"webpack\": \"^2.1.0-beta.25\",\n\"webpack-dev-server\": \"^2.1.0-beta.0\"\nnode: 6.7.0\n\nWhen running the SCSS SourceMaps only point to the Parent selector and not the correct selector.\n\n<img width=\"320\" alt=\"2016-10-22_0150\" src=\"https://cloud.githubusercontent.com/assets/3236909/19823806/bcf0f0a8-9d1f-11e6-9e2c-d788849de1e2.png\">\n\nBut as you can see it is not pointing to the correct selector. It should be pointing to line 13 not line 5.\n\n<img width=\"298\" alt=\"2016-10-22_0156\" src=\"https://cloud.githubusercontent.com/assets/3236909/19823810/c3190a9c-9d1f-11e6-8b7f-27a6db28d40d.png\">\n\nHowever,\nIf I run 'node-sass'  in the terminal then it works fine.  So it seems to be an issue with sass-loader and webpack.\n\nAny solutions to resolve this or is there any settings in node-modules/sass-loader that I can change to get different results.\n\nThanks\n. @jhnns Could you explain more on \"we don't actually mess with the source maps\".  Are you saying that sass-loader doesn't create the source maps.  If so then what does and how?\r\nAs mentioned running \"node-sass\" in the terminal the source maps are fine, but running it though sass-loader and webpack they are not.\r\n\r\nSorry I am not too familiar with sass-loader flow.  Could someone explain the difference that running sass-loader through webpack has as compared to running node-sass through the terminal.\r\n\r\nIt almost seems like the scss file is converted to (nested, expanded, or compact) prior to the source map is being applied then the css is compressed.\r\n\r\nIs there any way to test that sass-loader is getting the full un-compacted un-compressed scss files when creating the source mappings?. Sorry @jhnns @evilebottnawi,  I took a pause from this project.\r\nNope, the issue still exists for me.  I also just recently installed brand new ng-cli on a new laptop.\r\nAngular4.0 with CLI 1.0.2 which is using sass-loader 6.0.3\r\n\r\nI created a small project and just had a few lines of scss code.\r\nIt still pointed to the top parent node, but running node-sass works fine.\r\nNot sure what I can do to help further.. @evilebottnawi \r\nYes, I can.  I will let you know when I get that up.\r\n\r\nIn the meantime I did find that if I added \r\n`outputStyle: 'compressed'` to the sass-loader it now works for Chrome, but not FF.\r\n\r\nSo my guess is that css-loader is expecting the sass-loader to be compressed.  So if sass-loader is not then you need to specify it.  I am not sure how to have css-loader know what the format is.  That way you wouldn't have to specify it.  \r\n\r\nSo this may be an issue with css-loader and not sass-loader.\r\n\r\nI will look at it again later tonight.. Yes, FF has a bug, but Chrome doesn't work either unless you add outputStyle: 'compressed' to sass-loader.  There may not be a bug with either, but there is definitely a configuration issue that is not well documented anywhere.  Nor does anyone have a good grasp on how to configure css-loader with sass-loader to make the sourcemaps work properly.  It would be great for us to figure it out then either someone from the sass-loader team or css-loader team right a blog post about it explaining the reasons why and how to properly configure webpack to output the correct sourcemaps.  I will definitely do what I can to support it.. Hi @evilebottnawi ,\r\nThanks for all the hard work on this.  I know you wanted this sooner, but here is my repo:\r\nhttps://github.com/ggedde/ngtest\r\n\r\nIt just uses AngularCLI  (Requires Node and NPM)\r\n```\r\ngit clone https://github.com/ggedde/ngtest.git\r\ncd ngtest\r\nnpm install\r\nnpm run start\r\n```\r\nAfter NG finishes then Navigate your browser to http://localhost:4200\r\nYou will see that if you instead the &lt;h1&gt; that the color points to line 3 in the inspector, but is actually on line 9.  This issue is on both Chorme and Firefox.\r\n\r\nHowever, if you add:\r\n```\r\noutputStyle: 'compressed',\r\n```\r\nTo the sass-loader [options] in \"node_modules/@angular/cli/models/webpack-configs/styles.js\"\r\nThen it works fine in Chrome, but not Firefox.\r\n\r\nHope this helps others.\r\nThanks. Mac OSX (El Capitan?)\n\"sass-loader\": \"^4.0.2\",\n\"webpack\": \"^2.1.0-beta.25\",\n\"webpack-dev-server\": \"^2.1.0-beta.0\"\nnode: 6.7.0\n\nWhen running the SCSS SourceMaps only point to the Parent selector and not the correct selector.\n\n<img width=\"320\" alt=\"2016-10-22_0150\" src=\"https://cloud.githubusercontent.com/assets/3236909/19823806/bcf0f0a8-9d1f-11e6-9e2c-d788849de1e2.png\">\n\nBut as you can see it is not pointing to the correct selector. It should be pointing to line 13 not line 5.\n\n<img width=\"298\" alt=\"2016-10-22_0156\" src=\"https://cloud.githubusercontent.com/assets/3236909/19823810/c3190a9c-9d1f-11e6-8b7f-27a6db28d40d.png\">\n\nHowever,\nIf I run 'node-sass'  in the terminal then it works fine.  So it seems to be an issue with sass-loader and webpack.\n\nAny solutions to resolve this or is there any settings in node-modules/sass-loader that I can change to get different results.\n\nThanks\n. @jhnns Could you explain more on \"we don't actually mess with the source maps\".  Are you saying that sass-loader doesn't create the source maps.  If so then what does and how?\r\nAs mentioned running \"node-sass\" in the terminal the source maps are fine, but running it though sass-loader and webpack they are not.\r\n\r\nSorry I am not too familiar with sass-loader flow.  Could someone explain the difference that running sass-loader through webpack has as compared to running node-sass through the terminal.\r\n\r\nIt almost seems like the scss file is converted to (nested, expanded, or compact) prior to the source map is being applied then the css is compressed.\r\n\r\nIs there any way to test that sass-loader is getting the full un-compacted un-compressed scss files when creating the source mappings?. Sorry @jhnns @evilebottnawi,  I took a pause from this project.\r\nNope, the issue still exists for me.  I also just recently installed brand new ng-cli on a new laptop.\r\nAngular4.0 with CLI 1.0.2 which is using sass-loader 6.0.3\r\n\r\nI created a small project and just had a few lines of scss code.\r\nIt still pointed to the top parent node, but running node-sass works fine.\r\nNot sure what I can do to help further.. @evilebottnawi \r\nYes, I can.  I will let you know when I get that up.\r\n\r\nIn the meantime I did find that if I added \r\n`outputStyle: 'compressed'` to the sass-loader it now works for Chrome, but not FF.\r\n\r\nSo my guess is that css-loader is expecting the sass-loader to be compressed.  So if sass-loader is not then you need to specify it.  I am not sure how to have css-loader know what the format is.  That way you wouldn't have to specify it.  \r\n\r\nSo this may be an issue with css-loader and not sass-loader.\r\n\r\nI will look at it again later tonight.. Yes, FF has a bug, but Chrome doesn't work either unless you add outputStyle: 'compressed' to sass-loader.  There may not be a bug with either, but there is definitely a configuration issue that is not well documented anywhere.  Nor does anyone have a good grasp on how to configure css-loader with sass-loader to make the sourcemaps work properly.  It would be great for us to figure it out then either someone from the sass-loader team or css-loader team right a blog post about it explaining the reasons why and how to properly configure webpack to output the correct sourcemaps.  I will definitely do what I can to support it.. Hi @evilebottnawi ,\r\nThanks for all the hard work on this.  I know you wanted this sooner, but here is my repo:\r\nhttps://github.com/ggedde/ngtest\r\n\r\nIt just uses AngularCLI  (Requires Node and NPM)\r\n```\r\ngit clone https://github.com/ggedde/ngtest.git\r\ncd ngtest\r\nnpm install\r\nnpm run start\r\n```\r\nAfter NG finishes then Navigate your browser to http://localhost:4200\r\nYou will see that if you instead the &lt;h1&gt; that the color points to line 3 in the inspector, but is actually on line 9.  This issue is on both Chorme and Firefox.\r\n\r\nHowever, if you add:\r\n```\r\noutputStyle: 'compressed',\r\n```\r\nTo the sass-loader [options] in \"node_modules/@angular/cli/models/webpack-configs/styles.js\"\r\nThen it works fine in Chrome, but not Firefox.\r\n\r\nHope this helps others.\r\nThanks. ",
    "folmert": "Same [problem ](http://stackoverflow.com/questions/40784122/sass-loader-generates-broken-source-maps)here. Did anyone found a workaround for this?. I switched from sass-loader to postcss/precss and source maps are generated correctly now, so there must be something broken in sass-loader.. Same [problem ](http://stackoverflow.com/questions/40784122/sass-loader-generates-broken-source-maps)here. Did anyone found a workaround for this?. I switched from sass-loader to postcss/precss and source maps are generated correctly now, so there must be something broken in sass-loader.. ",
    "woohling": "Just tried, but still the same problem. \ud83d\ude25  @jhnns . No longer working on the project with this issue. \r\nBut I will find time to create a small demo to see if the problem still exists.\r\n. Just tried, but still the same problem. \ud83d\ude25  @jhnns . No longer working on the project with this issue. \r\nBut I will find time to create a small demo to see if the problem still exists.\r\n. ",
    "maximusnikulin": "Did anyone solve this problem?. Did anyone solve this problem?. ",
    "pgayvallet": "Same issue here. @import makes sourcemap point to the parent file.. Same issue here. @import makes sourcemap point to the parent file.. ",
    "sandwich": "I may be reading things incorrectly here, but I _think_ y'all might be barking up the wrong tree if you're looking for the origin of the problem to be in `sass-loader` (assuming `sass-loader` is a webpack-specific thing).\r\n\r\nSee,  I have this exact issue, of sourcemaps not referencing the right line if the `@import` is within a CSS selector. However, I'm using gulp\u2014`gulp-sass`, `gulp-sourcemaps`, etc\u2014not webpack.\r\n\r\nDoes this help any?. Here ya go (not precisely minimum; I wanted it to be self-explanatory, too). Once extracted, run `npm install`, and then just `gulp`.\r\n\r\nReproducible in Chrome, Firefox, IE11, and Edge (i.e. it's not a browser issue).\r\n\r\n[Sourcemap Import Issue.zip](https://github.com/webpack-contrib/sass-loader/files/1185644/Sourcemap.Import.Issue.zip)\r\n. @evilebottnawi Perhaps you missed [my earlier post](https://github.com/webpack-contrib/sass-loader/issues/272#issuecomment-317243440). I have the exact same issue, except I'm not using webpack, but gulp. Therefore, there's a decent chance that the issue is not in anything specifically related to webpack, but is rather in Sass or the Sass Sourcemaps code, since that's the only common denominator.. @aszmyd I have a test case as a zip up above, using `gulp-sass` and the like.. I may be reading things incorrectly here, but I _think_ y'all might be barking up the wrong tree if you're looking for the origin of the problem to be in `sass-loader` (assuming `sass-loader` is a webpack-specific thing).\r\n\r\nSee,  I have this exact issue, of sourcemaps not referencing the right line if the `@import` is within a CSS selector. However, I'm using gulp\u2014`gulp-sass`, `gulp-sourcemaps`, etc\u2014not webpack.\r\n\r\nDoes this help any?. Here ya go (not precisely minimum; I wanted it to be self-explanatory, too). Once extracted, run `npm install`, and then just `gulp`.\r\n\r\nReproducible in Chrome, Firefox, IE11, and Edge (i.e. it's not a browser issue).\r\n\r\n[Sourcemap Import Issue.zip](https://github.com/webpack-contrib/sass-loader/files/1185644/Sourcemap.Import.Issue.zip)\r\n. @evilebottnawi Perhaps you missed [my earlier post](https://github.com/webpack-contrib/sass-loader/issues/272#issuecomment-317243440). I have the exact same issue, except I'm not using webpack, but gulp. Therefore, there's a decent chance that the issue is not in anything specifically related to webpack, but is rather in Sass or the Sass Sourcemaps code, since that's the only common denominator.. @aszmyd I have a test case as a zip up above, using `gulp-sass` and the like.. ",
    "aszmyd": "I've made an reproducible test repo using `webpack` - https://github.com/aszmyd/webpack-sass-loader-sourcemap-issue \r\nJust clone it, `npm install`, `npm start` and open browser at http://localhost:8080/\r\n\r\nThe issue is present there:\r\n\r\n![image](https://user-images.githubusercontent.com/3050805/29204969-64c7cfd6-7e7a-11e7-9669-57bc5617a2ab.png)\r\n\r\n\r\nEven using `outputStyle: 'compressed'` its still broken.. @sandwich i get Your point. I've tried to reproduce the same issue with using just `node-sass` but with no luck - test [repo here](https://github.com/aszmyd/node-sass-sourcemap-test).\r\n. @sandwich  i've checked You'r code and figured out that the part that is messing around with things is `gulp-postcss` together with `autoprefixer`.  When i commented this one `.pipe(postcss([ autoprefixer() ]))` line in Your gulpfile, sourcemap points correctly to `_typography.scss` line `7`.\r\n\r\nSo changed sass task that works:\r\n\r\n```\r\ngulp.task('sass', function()\r\n{\r\n\tgutil.log(\"Now compiling all SCSS files...\");\r\n\treturn gulp.src('scss/**/*.scss')\r\n\t\t.pipe(plumber(plumberErrorHandler))\r\n\t\t.pipe(sourcemaps.init())\r\n\t\t.pipe(sass())\r\n\t\t// .pipe(postcss([ autoprefixer() ]))\r\n\t\t.pipe(sourcemaps.write('.').on('end', function()\r\n\t\t\t{\r\n\t\t\t\tgutil.log(\"\t...done generating sourcemaps.\");\r\n\t\t\t})\r\n\t\t)\r\n\t\t.pipe(\r\n\t\t\tgulp.dest('public_html/css')\r\n\t\t)\r\n\t\t.pipe(browserSync.reload({\r\n\t\t\tstream: true\r\n\t\t}));\r\n});\r\n```\r\n\r\nSo my guess is that its more `sass-loader`/`webpack` related. @evilebottnawi were You able to figure out something from my reproducable repo?. @evilebottnawi im not sure this is the right decision. `sass-loader` is using `node-sass`. `node-sass` is:\r\n\r\n> a library that provides binding for Node.js to LibSass\r\n\r\nAnd in one of my [earlier posts](https://github.com/webpack-contrib/sass-loader/issues/272#issuecomment-322671357) i've created small repo that uses only `node-sass` and it works perfectly fine. \r\n\r\nSo question is - why pure `node-sass` is working properly but `sass-loader` that is using it underneath, is not?. I've made an reproducible test repo using `webpack` - https://github.com/aszmyd/webpack-sass-loader-sourcemap-issue \r\nJust clone it, `npm install`, `npm start` and open browser at http://localhost:8080/\r\n\r\nThe issue is present there:\r\n\r\n![image](https://user-images.githubusercontent.com/3050805/29204969-64c7cfd6-7e7a-11e7-9669-57bc5617a2ab.png)\r\n\r\n\r\nEven using `outputStyle: 'compressed'` its still broken.. @sandwich i get Your point. I've tried to reproduce the same issue with using just `node-sass` but with no luck - test [repo here](https://github.com/aszmyd/node-sass-sourcemap-test).\r\n. @sandwich  i've checked You'r code and figured out that the part that is messing around with things is `gulp-postcss` together with `autoprefixer`.  When i commented this one `.pipe(postcss([ autoprefixer() ]))` line in Your gulpfile, sourcemap points correctly to `_typography.scss` line `7`.\r\n\r\nSo changed sass task that works:\r\n\r\n```\r\ngulp.task('sass', function()\r\n{\r\n\tgutil.log(\"Now compiling all SCSS files...\");\r\n\treturn gulp.src('scss/**/*.scss')\r\n\t\t.pipe(plumber(plumberErrorHandler))\r\n\t\t.pipe(sourcemaps.init())\r\n\t\t.pipe(sass())\r\n\t\t// .pipe(postcss([ autoprefixer() ]))\r\n\t\t.pipe(sourcemaps.write('.').on('end', function()\r\n\t\t\t{\r\n\t\t\t\tgutil.log(\"\t...done generating sourcemaps.\");\r\n\t\t\t})\r\n\t\t)\r\n\t\t.pipe(\r\n\t\t\tgulp.dest('public_html/css')\r\n\t\t)\r\n\t\t.pipe(browserSync.reload({\r\n\t\t\tstream: true\r\n\t\t}));\r\n});\r\n```\r\n\r\nSo my guess is that its more `sass-loader`/`webpack` related. @evilebottnawi were You able to figure out something from my reproducable repo?. @evilebottnawi im not sure this is the right decision. `sass-loader` is using `node-sass`. `node-sass` is:\r\n\r\n> a library that provides binding for Node.js to LibSass\r\n\r\nAnd in one of my [earlier posts](https://github.com/webpack-contrib/sass-loader/issues/272#issuecomment-322671357) i've created small repo that uses only `node-sass` and it works perfectly fine. \r\n\r\nSo question is - why pure `node-sass` is working properly but `sass-loader` that is using it underneath, is not?. ",
    "luchillo17": "Hehe sorry about this issue, it's very old, i end up fixing my issue one way or another, i just didn't remember i put this issue, after all has been like half a year since i put it.\r\n\r\nAnyway thanks for taking your time.. Hi, i'm using webpack 2.1.0-beta.25 and having this error still, what am i doing wrong?\n\nloader:\n\n``` ts\n      {\n          test: /\\.scss$/,\n          loaders: [\n            // ExtractTextPlugin.extract(\"style\", \"css?sourceMap\"),\n            'to-string-loader',\n            'css-loader',\n            'resolve-url-loader',\n            'sass-loader' +\n            '?sourceMap&' +\n            'outputStyle=expanded&' +\n            'root=' + helpers.root('src') + '&' +\n            '&includePaths[]' + helpers.root('node_modules') + '&' +\n            '&includePaths[]' + helpers.root('src')\n          ]\n        },\n```\n\nLoaderOptions plugin:\n\n``` ts\n      new LoaderOptionsPlugin({\n        options: {\n          context: helpers.root('src'),\n          outupt: {\n            path: helpers.root('www')\n          },\n          sassLoader: {\n            includePaths: [\n              'node_modules', 'bower_components', 'app', '.'\n            ]\n          }\n        }\n      }),\n```\n. @LiTiang, @borislemke I have this issue as well, using [Luchillo/angular2-webpack-starter](https://github.com/Luchillo/angular2-webpack-starter), a fork of [AngularClass/angular2-webpack-starter](https://github.com/AngularClass/angular2-webpack-starter).\r\n\r\nThe only thing working for me is to either disable source maps, or set the options plugin in the `webpack.dev.js` as stated by @borislemke.\r\n\r\nI suspect the one plugin from the `webpack.common.js` file is being overrided instead of merged, is there a way to set it in the common config so it works in prod without specifying it?\r\n\r\nAt the end i ended up putting the `includePaths` config in the `query` property of the loader in `webpack.common.js` and both context & output are duplicated in both `webpack.dev.js` & `webpack.prod.js` configs (should be in common to avoid duplication), for now at least.. @borislemke I'm not using sourcemaps in production, i only duplicated the `LoaderOptionsPlugin` config with the small difference on the debug option in production.. @tleunen So in the mean time we need to stick with webpack beta.22?\n. Yeah i saw that, however in my case it didn't work.\n. @pretentiousgit Seems only with cli, i don't get this issue any more with latest webpack.. Hehe sorry about this issue, it's very old, i end up fixing my issue one way or another, i just didn't remember i put this issue, after all has been like half a year since i put it.\r\n\r\nAnyway thanks for taking your time.. Hi, i'm using webpack 2.1.0-beta.25 and having this error still, what am i doing wrong?\n\nloader:\n\n``` ts\n      {\n          test: /\\.scss$/,\n          loaders: [\n            // ExtractTextPlugin.extract(\"style\", \"css?sourceMap\"),\n            'to-string-loader',\n            'css-loader',\n            'resolve-url-loader',\n            'sass-loader' +\n            '?sourceMap&' +\n            'outputStyle=expanded&' +\n            'root=' + helpers.root('src') + '&' +\n            '&includePaths[]' + helpers.root('node_modules') + '&' +\n            '&includePaths[]' + helpers.root('src')\n          ]\n        },\n```\n\nLoaderOptions plugin:\n\n``` ts\n      new LoaderOptionsPlugin({\n        options: {\n          context: helpers.root('src'),\n          outupt: {\n            path: helpers.root('www')\n          },\n          sassLoader: {\n            includePaths: [\n              'node_modules', 'bower_components', 'app', '.'\n            ]\n          }\n        }\n      }),\n```\n. @LiTiang, @borislemke I have this issue as well, using [Luchillo/angular2-webpack-starter](https://github.com/Luchillo/angular2-webpack-starter), a fork of [AngularClass/angular2-webpack-starter](https://github.com/AngularClass/angular2-webpack-starter).\r\n\r\nThe only thing working for me is to either disable source maps, or set the options plugin in the `webpack.dev.js` as stated by @borislemke.\r\n\r\nI suspect the one plugin from the `webpack.common.js` file is being overrided instead of merged, is there a way to set it in the common config so it works in prod without specifying it?\r\n\r\nAt the end i ended up putting the `includePaths` config in the `query` property of the loader in `webpack.common.js` and both context & output are duplicated in both `webpack.dev.js` & `webpack.prod.js` configs (should be in common to avoid duplication), for now at least.. @borislemke I'm not using sourcemaps in production, i only duplicated the `LoaderOptionsPlugin` config with the small difference on the debug option in production.. @tleunen So in the mean time we need to stick with webpack beta.22?\n. Yeah i saw that, however in my case it didn't work.\n. @pretentiousgit Seems only with cli, i don't get this issue any more with latest webpack.. ",
    "thescientist13": "@adamchuan \nThe SASS file with the background image, are you using `@import` to load that into another SASS file?  \n\nIf so, I think the issue is that the relative path of the background image cannot be resolved relative to the path of the SASS file `@import`ing the parent SASS file.\n. thanks @evilebottnawi !  will look into that.  thanks!. I am seeing this issue as well (not specifically using dev-server, however).  \r\n\r\nHere is the full output I am seeing\r\n```bash\r\n$ yarn run build\r\nyarn run v0.21.3\r\n$ eslint *.js **/**/*.spec.jsx && webpack --config ./webpack.config.prod.js -p --progress --profile --bail\r\n 10% building modules 0/2 modules 2 active ....com/repo/bc-webapp-2.0/src/vendor.tsWarning: Got empty options\r\nWarning: The 'no-use-before-declare' rule requires type checking\r\n\r\n[at-loader] Using typescript@2.3.2 from typescript and \"tsconfig.json\" from /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/tsconfig.json.\r\n\r\n6880ms building modules\r\n5ms sealing\r\n0ms optimizing\r\n0ms basic module optimization\r\n3ms module optimization\r\n1ms advanced module optimization\r\n11ms basic chunk optimization\r\n0ms chunk optimization\r\n8ms advanced chunk optimization\r\n 37% building modules 231/232 modules 1 active ...2.0/src/components/footer/footer.scss\r\n/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/Compilation.js:219\r\n\t\t\t\t_this.errors.push(err);\r\n         ^\r\nTypeError: Cannot read property 'errors' of null\r\n    at errorAndCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/Compilation.js:219:10)\r\n    at errorOrWarningAndCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/Compilation.js:251:14)\r\n    at factoryCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/Compilation.js:264:13)\r\n    at factory (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/NormalModuleFactory.js:247:20)\r\n    at resolver (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/NormalModuleFactory.js:65:21)\r\n    at asyncLib.parallel.e (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/NormalModuleFactory.js:138:21)\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:3838:9\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:421:16\r\n    at iteratorCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:996:13)\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:906:16\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:3835:13\r\n    at resolvers.normal.resolve (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/NormalModuleFactory.js:130:23)\r\n    at onResolved (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:70:11)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at afterInnerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:138:10)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at Resolver.applyPluginsAsyncSeriesBailResult1 (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/tapable/lib/Tapable.js:181:46)\r\n    at innerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:125:19)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/tapable/lib/Tapable.js:283:15\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/UnsafeCachePlugin.js:38:4\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at afterInnerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:138:10)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at Resolver.applyPluginsAsyncSeriesBailResult1 (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/tapable/lib/Tapable.js:181:46)\r\n    at innerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:125:19)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/tapable/lib/Tapable.js:283:15\r\n    at innerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:123:11)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\nerror Command failed with exit code 1.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n```\r\n\r\n- webpack: 2.5.1\r\n- sass-loader: 6.0.5\r\n- node-sass: 4.5.3. thanks @evilebottnawi , yeah I'm reviewing [another project](https://github.com/thegreenhouseio/react-webapp-seed) of mine that has this working and so just trying to diff the two.  A very barebones example with just `babel-loader` works, so yes, appears to be something not related to sass-loader specifically.  Will continue debugging a little bit more and post back if I can find anything.. It seemed in my case I was getting this error in regards to using `@fontface` in my _.scss_ file.  When adding them back in and using **url-resolve-loader**, there were no more errors.. @adamchuan \nThe SASS file with the background image, are you using `@import` to load that into another SASS file?  \n\nIf so, I think the issue is that the relative path of the background image cannot be resolved relative to the path of the SASS file `@import`ing the parent SASS file.\n. thanks @evilebottnawi !  will look into that.  thanks!. I am seeing this issue as well (not specifically using dev-server, however).  \r\n\r\nHere is the full output I am seeing\r\n```bash\r\n$ yarn run build\r\nyarn run v0.21.3\r\n$ eslint *.js **/**/*.spec.jsx && webpack --config ./webpack.config.prod.js -p --progress --profile --bail\r\n 10% building modules 0/2 modules 2 active ....com/repo/bc-webapp-2.0/src/vendor.tsWarning: Got empty options\r\nWarning: The 'no-use-before-declare' rule requires type checking\r\n\r\n[at-loader] Using typescript@2.3.2 from typescript and \"tsconfig.json\" from /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/tsconfig.json.\r\n\r\n6880ms building modules\r\n5ms sealing\r\n0ms optimizing\r\n0ms basic module optimization\r\n3ms module optimization\r\n1ms advanced module optimization\r\n11ms basic chunk optimization\r\n0ms chunk optimization\r\n8ms advanced chunk optimization\r\n 37% building modules 231/232 modules 1 active ...2.0/src/components/footer/footer.scss\r\n/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/Compilation.js:219\r\n\t\t\t\t_this.errors.push(err);\r\n         ^\r\nTypeError: Cannot read property 'errors' of null\r\n    at errorAndCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/Compilation.js:219:10)\r\n    at errorOrWarningAndCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/Compilation.js:251:14)\r\n    at factoryCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/Compilation.js:264:13)\r\n    at factory (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/NormalModuleFactory.js:247:20)\r\n    at resolver (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/NormalModuleFactory.js:65:21)\r\n    at asyncLib.parallel.e (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/NormalModuleFactory.js:138:21)\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:3838:9\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:421:16\r\n    at iteratorCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:996:13)\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:906:16\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/async/dist/async.js:3835:13\r\n    at resolvers.normal.resolve (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/webpack/lib/NormalModuleFactory.js:130:23)\r\n    at onResolved (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:70:11)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at afterInnerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:138:10)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at Resolver.applyPluginsAsyncSeriesBailResult1 (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/tapable/lib/Tapable.js:181:46)\r\n    at innerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:125:19)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/tapable/lib/Tapable.js:283:15\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/UnsafeCachePlugin.js:38:4\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at afterInnerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:138:10)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at Resolver.applyPluginsAsyncSeriesBailResult1 (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/tapable/lib/Tapable.js:181:46)\r\n    at innerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:125:19)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\n    at /Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/tapable/lib/Tapable.js:283:15\r\n    at innerCallback (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/Resolver.js:123:11)\r\n    at loggingCallbackWrapper (/Users/obuckley/Workspace/1000-bc.com/repo/bc-webapp-2.0/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\r\nerror Command failed with exit code 1.\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n```\r\n\r\n- webpack: 2.5.1\r\n- sass-loader: 6.0.5\r\n- node-sass: 4.5.3. thanks @evilebottnawi , yeah I'm reviewing [another project](https://github.com/thegreenhouseio/react-webapp-seed) of mine that has this working and so just trying to diff the two.  A very barebones example with just `babel-loader` works, so yes, appears to be something not related to sass-loader specifically.  Will continue debugging a little bit more and post back if I can find anything.. It seemed in my case I was getting this error in regards to using `@fontface` in my _.scss_ file.  When adding them back in and using **url-resolve-loader**, there were no more errors.. ",
    "webdesserts": "I'm going to go ahead and close this, thnx for the fix.\n. I tried adding a failing test to [this file](https://github.com/jtangelder/sass-loader/blob/master/test/tools/customImporter.js), but kept getting `Segmentation fault: 11`. Also jshint apparently didn't like me referencing `this` in a lone function when the test passes.\n. I went ahead and pushed the broken tests so you can take a look. At least when it fails, it fails hard ^_^\n. I'm going to go ahead and close this, thnx for the fix.\n. I tried adding a failing test to [this file](https://github.com/jtangelder/sass-loader/blob/master/test/tools/customImporter.js), but kept getting `Segmentation fault: 11`. Also jshint apparently didn't like me referencing `this` in a lone function when the test passes.\n. I went ahead and pushed the broken tests so you can take a look. At least when it fails, it fails hard ^_^\n. ",
    "jensvdh": "Hi,\n\nOur team is also using TravisCI. We're not seeing any issues with it. Are you running Travis in container mode? (sudo: false option).\n\nHere's the configuration for the loader on our end. We are using node version 5.8.0\n\n`test: /\\.scss$/, loader: ExtractTextPlugin.extract('style', 'css?sourceMap!sass?sourceMap')`\n. Hi,\n\nOur team is also using TravisCI. We're not seeing any issues with it. Are you running Travis in container mode? (sudo: false option).\n\nHere's the configuration for the loader on our end. We are using node version 5.8.0\n\n`test: /\\.scss$/, loader: ExtractTextPlugin.extract('style', 'css?sourceMap!sass?sourceMap')`\n. ",
    "wellyshen": "I have the same issue +1\n. I have the same issue +1\n. ",
    "phairoh": "Ignore my deleted comment. I was incorrect.\n. This seems to fix the issue:\n\n``` javascript\nnew webpack.LoaderOptionsPlugin({\n    options: {\n        sassLoader: {\n            includePaths: [path.resolve(__dirname, 'src', 'scss')]\n        },\n        context: '/'\n    }\n})\n```\n\nLooking at the code in the [DllReferencePlugin](https://github.com/webpack/webpack/blob/master/lib/DllReferencePlugin.js#L47) it looks like there is a new way to get the context.\n. @borysn I'm sorry, but I've never used bootstrap-loader. Taking a quick look, though, it appears that there are 2 versions available on npm: v1 and v2 for webpack v1 and v2, respectively, and v2 is still in beta (as is webpack v2). Just doing `npm install bootstrap-loader` installs v2 by default so make sure that all your versions match up.\n. Ignore my deleted comment. I was incorrect.\n. This seems to fix the issue:\n\n``` javascript\nnew webpack.LoaderOptionsPlugin({\n    options: {\n        sassLoader: {\n            includePaths: [path.resolve(__dirname, 'src', 'scss')]\n        },\n        context: '/'\n    }\n})\n```\n\nLooking at the code in the [DllReferencePlugin](https://github.com/webpack/webpack/blob/master/lib/DllReferencePlugin.js#L47) it looks like there is a new way to get the context.\n. @borysn I'm sorry, but I've never used bootstrap-loader. Taking a quick look, though, it appears that there are 2 versions available on npm: v1 and v2 for webpack v1 and v2, respectively, and v2 is still in beta (as is webpack v2). Just doing `npm install bootstrap-loader` installs v2 by default so make sure that all your versions match up.\n. ",
    "borysn": "@phairoh I'm running into a similar issue, I'd love to get your opinion, just not sure where to go from here. It could be a simple configuration issue, but maybe the loaders I'm using need updates.\n\nI'm loading bootstrap sass files using bootstrap-loader and sass-loader, which leads to an error...\n\n```\n 69% building modules 1180/1181 modules 1 active ...ode_modules/bootstrap-loader/no-op.jsTypeError: Path must be a string. Received undefined\n    at assertPath (path.js:8:11)\n    at Object.posix.relative (path.js:495:3)\n    at Object.onRender (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/index.js:282:42)\n    at /home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:2231:35\n    at arrayEach (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:1357:13)\n    at Object.<anonymous> (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:2223:17)\n    at Object.<anonymous> (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:338:31)\n    at Object.callback (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:847:20)\n    at options.success (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/node-sass/lib/index.js:309:32)\n```\n\nThe stack trace starts at bootstrap-loader, but most of it stems from sass-loader. Looking above at your solution, I tried adding something like...\n\n``` javascript\n...\n        new webpack.LoaderOptionsPlugin({\n          options: {\n            postcss: [autoprefixer],\n\n            sassLoader: {\n              includePaths: [helpers.root('node_modules/bootstrap/scss')]\n            },\n\n            context: __dirname,\n          }\n        })\n...\n```\n\nbut this did not resolve the issue for me. Again, not sure if the actual issue is bootstrap-loader, sass-loader, or just missing configuration options. Any feedback would be appreciated.\n. @phairoh I'm running into a similar issue, I'd love to get your opinion, just not sure where to go from here. It could be a simple configuration issue, but maybe the loaders I'm using need updates.\n\nI'm loading bootstrap sass files using bootstrap-loader and sass-loader, which leads to an error...\n\n```\n 69% building modules 1180/1181 modules 1 active ...ode_modules/bootstrap-loader/no-op.jsTypeError: Path must be a string. Received undefined\n    at assertPath (path.js:8:11)\n    at Object.posix.relative (path.js:495:3)\n    at Object.onRender (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/index.js:282:42)\n    at /home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:2231:35\n    at arrayEach (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:1357:13)\n    at Object.<anonymous> (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:2223:17)\n    at Object.<anonymous> (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:338:31)\n    at Object.callback (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/sass-loader/node_modules/async/dist/async.js:847:20)\n    at options.success (/home/p3pt/dev/java/projects/spring-boot-angular2/frontend/node_modules/node-sass/lib/index.js:309:32)\n```\n\nThe stack trace starts at bootstrap-loader, but most of it stems from sass-loader. Looking above at your solution, I tried adding something like...\n\n``` javascript\n...\n        new webpack.LoaderOptionsPlugin({\n          options: {\n            postcss: [autoprefixer],\n\n            sassLoader: {\n              includePaths: [helpers.root('node_modules/bootstrap/scss')]\n            },\n\n            context: __dirname,\n          }\n        })\n...\n```\n\nbut this did not resolve the issue for me. Again, not sure if the actual issue is bootstrap-loader, sass-loader, or just missing configuration options. Any feedback would be appreciated.\n. ",
    "binarious": "I had to add this workaround https://github.com/bholloway/resolve-url-loader/issues/33#issuecomment-249830601 to get rid of these errors:\n\n```\nERROR in ./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/bootstrap-loader/no-op.js\nModule build failed: TypeError: Cannot read property 'path' of undefined\n    at Object.resolveUrlLoader (/Users/MYUSER/projects/MYAPP/node_modules/resolve-url-loader/index.js:38:55)\n@ ./~/style-loader!./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/bootstrap-loader/no-op.js 4:14-164 13:2-17:4 14:20-170\n@ ./~/bootstrap-loader/lib/bootstrap.loader.js!./~/bootstrap-loader/no-op.js\n@ ./~/bootstrap-loader/loader.js\n@ ./src/app/app.module.ts\n@ ./src/app/index.ts\n@ ./src/main.browser.ts\n@ multi main\n```\n. I had to add this workaround https://github.com/bholloway/resolve-url-loader/issues/33#issuecomment-249830601 to get rid of these errors:\n\n```\nERROR in ./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/bootstrap-loader/no-op.js\nModule build failed: TypeError: Cannot read property 'path' of undefined\n    at Object.resolveUrlLoader (/Users/MYUSER/projects/MYAPP/node_modules/resolve-url-loader/index.js:38:55)\n@ ./~/style-loader!./~/css-loader!./~/resolve-url-loader!./~/sass-loader?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js!./~/bootstrap-loader/no-op.js 4:14-164 13:2-17:4 14:20-170\n@ ./~/bootstrap-loader/lib/bootstrap.loader.js!./~/bootstrap-loader/no-op.js\n@ ./~/bootstrap-loader/loader.js\n@ ./src/app/app.module.ts\n@ ./src/app/index.ts\n@ ./src/main.browser.ts\n@ multi main\n```\n. ",
    "LiTiang": "@phairoh, \n\ni spend over 10 hr to fight the bugs, \nbut i still have no idea how to fix that, please help \n\nMy project is based on [Angular2-webpack-starter](https://github.com/AngularClass/angular2-webpack-starter)\n\nAlmost all of my scss file located in `src/app/public/scss/`\n\nexcept one of the file called **app.style.scss** located in `app/`\n\nand the content of it(**app.style.scss**) is showing below\n\n``` scss\n@import \"~compass-mixins\"; \n@import \"~breakpoint-sass\";\n@import \"~susy\";\n@import \"~font-awesome/scss/font-awesome\";\n@import \"~normalize-scss\"; \n@import \"public/scss/abstracts/index\";\n@import \"public/scss/base/reset\";\n@import \"public/scss/CSSObjects/index\";\n@import \"public/scss/utilities/extend\";\n@import \"public/scss/page/index\";\n```\n\nThe following is partial content of **webpack.common.js** \n\n``` javascript\nmodule: {\n    rules: [\n        {\n              test: /\\.scss$/,\n              exclude: /node_modules/,\n              use: [ 'raw-loader', 'css-loader', 'resolve-url-loader', 'sass-loader?sourceMap']\n         }\n    ]\n}\n```\n- If i change `sass-loader?sourceMap` to `sass-loader`\n\ni get the ERROR : **Cannot read property 'path' of undefined at Object.resolveUrlLoader**\n\nthis is caused by `resolve-url-loader`\n\n---\n- If i change `sass-loader` to `sass-loader?sourceMap`\n\ni get the ERROR : **Path must be a string. Received undefined**\n\nthis is caused by `sourceMap` parameter\n. @phairoh, \n\ni spend over 10 hr to fight the bugs, \nbut i still have no idea how to fix that, please help \n\nMy project is based on [Angular2-webpack-starter](https://github.com/AngularClass/angular2-webpack-starter)\n\nAlmost all of my scss file located in `src/app/public/scss/`\n\nexcept one of the file called **app.style.scss** located in `app/`\n\nand the content of it(**app.style.scss**) is showing below\n\n``` scss\n@import \"~compass-mixins\"; \n@import \"~breakpoint-sass\";\n@import \"~susy\";\n@import \"~font-awesome/scss/font-awesome\";\n@import \"~normalize-scss\"; \n@import \"public/scss/abstracts/index\";\n@import \"public/scss/base/reset\";\n@import \"public/scss/CSSObjects/index\";\n@import \"public/scss/utilities/extend\";\n@import \"public/scss/page/index\";\n```\n\nThe following is partial content of **webpack.common.js** \n\n``` javascript\nmodule: {\n    rules: [\n        {\n              test: /\\.scss$/,\n              exclude: /node_modules/,\n              use: [ 'raw-loader', 'css-loader', 'resolve-url-loader', 'sass-loader?sourceMap']\n         }\n    ]\n}\n```\n- If i change `sass-loader?sourceMap` to `sass-loader`\n\ni get the ERROR : **Cannot read property 'path' of undefined at Object.resolveUrlLoader**\n\nthis is caused by `resolve-url-loader`\n\n---\n- If i change `sass-loader` to `sass-loader?sourceMap`\n\ni get the ERROR : **Path must be a string. Received undefined**\n\nthis is caused by `sourceMap` parameter\n. ",
    "imtiazwazir": "removing the ?sourceMap solved my problem\n. removing the ?sourceMap solved my problem\n. ",
    "Andrey-Pavlov": "@dtothefp Can you show how to use it for https://github.com/AngularClass/angular2-webpack-starter ?\n. @dtothefp Can you show how to use it for https://github.com/AngularClass/angular2-webpack-starter ?\n. ",
    "Bariyard": "following the wiki [How to use Bootstrap 3 and Sass and ng2 bootstrap](https://github.com/AngularClass/angular2-webpack-starter/wiki/How-to-use-Bootstrap-3-and-Sass-and-ng2-bootstrap)\n\nI modify config/webpack.common.js\n\n```\n        {\n                test: /\\.(sass|scss)$/,\n                loaders: ['css-to-string-loader', 'css-loader?sourceMap', 'resolve-url', 'sass-loader?sourceMap']\n        },\n        { \n                test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, \n                loader: \"url?limit=10000&minetype=application/font-woff\" \n        },\n        { \n                test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: \"file\" \n        },\n```\n\nto this\n\n```\n        {\n                 test: /\\.scss$/,\n                 loaders: ['raw-loader', 'sass-loader']\n        },\n        { \n                  test: /\\.(woff2?|ttf|eot|svg)$/, \n                  loader: 'url?limit=10000' \n        },\n```\n\nand it's work. Not sure what's going on though\n. following the wiki [How to use Bootstrap 3 and Sass and ng2 bootstrap](https://github.com/AngularClass/angular2-webpack-starter/wiki/How-to-use-Bootstrap-3-and-Sass-and-ng2-bootstrap)\n\nI modify config/webpack.common.js\n\n```\n        {\n                test: /\\.(sass|scss)$/,\n                loaders: ['css-to-string-loader', 'css-loader?sourceMap', 'resolve-url', 'sass-loader?sourceMap']\n        },\n        { \n                test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, \n                loader: \"url?limit=10000&minetype=application/font-woff\" \n        },\n        { \n                test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, loader: \"file\" \n        },\n```\n\nto this\n\n```\n        {\n                 test: /\\.scss$/,\n                 loaders: ['raw-loader', 'sass-loader']\n        },\n        { \n                  test: /\\.(woff2?|ttf|eot|svg)$/, \n                  loader: 'url?limit=10000' \n        },\n```\n\nand it's work. Not sure what's going on though\n. ",
    "YamiOdymel": "Changed `devtool: 'source-map'` to `devtool: 'eval'` solved my problem temporary.\n. Changed `devtool: 'source-map'` to `devtool: 'eval'` solved my problem temporary.\n. ",
    "borislemke": "@phairoh his answer has fixed my issue but I had to add it inside webpack.dev.js instead of webpack.common.js (if you are using Angular 2 Starter). @Luchillo depending on how much you value your code, it is not recommended to have source maps in production. But glad that you found a fix for your case!. @phairoh his answer has fixed my issue but I had to add it inside webpack.dev.js instead of webpack.common.js (if you are using Angular 2 Starter). @Luchillo depending on how much you value your code, it is not recommended to have source maps in production. But glad that you found a fix for your case!. ",
    "vteivans": "Having this same issue on webpack@2.2.1, when passing source map through query or options object, I get this error: `TypeError: Path must be a string. Received undefined`.\r\n. Having this same issue on webpack@2.2.1, when passing source map through query or options object, I get this error: `TypeError: Path must be a string. Received undefined`.\r\n. ",
    "rossthedevigner": "@josepapaianni Were you able to get this figured out?. @josepapaianni Were you able to get this figured out?. ",
    "gaterking": "get the same issue. some detail as below:\n\nERROR in ./~/css-loader!./www/scss/main.scss\nModule not found: Error: Cannot resolve 'file' or 'directory' ./_variables in C:\n\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\www\\scss\n @ ./~/css-loader!./www/scss/main.scss 3:10-76\n\nERROR in ./www/scss/main.scss\nModule build failed: ModuleNotFoundError: Module not found: Error: Cannot resolv\ne 'file' or 'directory' ./_variables in C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.pe\nrformance.fe\\www\\scss\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\lib\\Compilation.js:229:38\n    at onDoneResolving (C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\nod\ne_modules\\webpack\\lib\\NormalModuleFactory.js:29:20)\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\lib\\NormalModuleFactory.js:85:20\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:726:13\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:52:16\n    at done (C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\w\nebpack\\node_modules\\async\\lib\\async.js:241:17)\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:44:16\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:723:17\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:167:37\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\enhance\nd-resolve\\lib\\UnsafeCachePlugin.js:24:19\n    at onResolved (C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_mod\nules\\enhanced-resolve\\lib\\Resolver.js:38:18)\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\enhance\nd-resolve\\lib\\Resolver.js:127:10\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\enhance\nd-resolve\\lib\\Resolver.js:191:15\n    at applyPluginsParallelBailResult.createInnerCallback.log (C:\\Workspaces\\HRD\nev\\SourceCode\\vip.hr.performance.fe\\node_modules\\enhanced-resolve\\lib\\Resolver.j\ns:110:4)\n    at loggingCallbackWrapper (C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance\n.fe\\node_modules\\enhanced-resolve\\lib\\createInnerCallback.js:21:19)\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\tapable\n\\lib\\Tapable.js:134:6\nChild html-webpack-plugin for \"objectiveView.html\":\n                 Asset     Size  Chunks       Chunk Names\n    objectiveView.html  22.1 kB       0\n    chunk    {0} objectiveView.html 802 bytes\n        [0] ./~/html-webpack-plugin/lib/loader.js!./www/views/objectiveView/inde\n. I solved this issue\uff0c\n1. require('../scss/main.scss'); Fail\nit use webpack module loaders for file scss\n2. require(\"!style!css!sass!../scss/main.scss\"); Success\n. I don't think my solution is right. I can't work with ExtractTextPlugin well.\nThe new solution is change the ExtractTextPlugin config.\n`{\n        test: /\\.scss$/,\n        loader: extractTextPlugin.extract('style-loader', ['css-loader', 'sass-loader'])\n      }` \n\n**['css-loader', 'sass-loader']** as Array is the key\nand then  we can require as option 1 above.\n. @deju use the option 1 to check sass-loader work. It will inject the Css to html head.\nMaybe u can parse you config.\n. @szimek try this code. it works for me with \"webpack\": \"^2.1.0-beta.25\" and \"extract-text-webpack-plugin\": \"^2.0.0-beta.4\".\n`loader: extractTextPlugin.extract({\n          fallbackLoader: 'style-loader',\n          loader: ['css-loader', 'sass-loader']\n        })\n`\n. get the same issue. some detail as below:\n\nERROR in ./~/css-loader!./www/scss/main.scss\nModule not found: Error: Cannot resolve 'file' or 'directory' ./_variables in C:\n\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\www\\scss\n @ ./~/css-loader!./www/scss/main.scss 3:10-76\n\nERROR in ./www/scss/main.scss\nModule build failed: ModuleNotFoundError: Module not found: Error: Cannot resolv\ne 'file' or 'directory' ./_variables in C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.pe\nrformance.fe\\www\\scss\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\lib\\Compilation.js:229:38\n    at onDoneResolving (C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\nod\ne_modules\\webpack\\lib\\NormalModuleFactory.js:29:20)\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\lib\\NormalModuleFactory.js:85:20\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:726:13\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:52:16\n    at done (C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\w\nebpack\\node_modules\\async\\lib\\async.js:241:17)\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:44:16\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:723:17\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\webpack\n\\node_modules\\async\\lib\\async.js:167:37\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\enhance\nd-resolve\\lib\\UnsafeCachePlugin.js:24:19\n    at onResolved (C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_mod\nules\\enhanced-resolve\\lib\\Resolver.js:38:18)\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\enhance\nd-resolve\\lib\\Resolver.js:127:10\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\enhance\nd-resolve\\lib\\Resolver.js:191:15\n    at applyPluginsParallelBailResult.createInnerCallback.log (C:\\Workspaces\\HRD\nev\\SourceCode\\vip.hr.performance.fe\\node_modules\\enhanced-resolve\\lib\\Resolver.j\ns:110:4)\n    at loggingCallbackWrapper (C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance\n.fe\\node_modules\\enhanced-resolve\\lib\\createInnerCallback.js:21:19)\n    at C:\\Workspaces\\HRDev\\SourceCode\\vip.hr.performance.fe\\node_modules\\tapable\n\\lib\\Tapable.js:134:6\nChild html-webpack-plugin for \"objectiveView.html\":\n                 Asset     Size  Chunks       Chunk Names\n    objectiveView.html  22.1 kB       0\n    chunk    {0} objectiveView.html 802 bytes\n        [0] ./~/html-webpack-plugin/lib/loader.js!./www/views/objectiveView/inde\n. I solved this issue\uff0c\n1. require('../scss/main.scss'); Fail\nit use webpack module loaders for file scss\n2. require(\"!style!css!sass!../scss/main.scss\"); Success\n. I don't think my solution is right. I can't work with ExtractTextPlugin well.\nThe new solution is change the ExtractTextPlugin config.\n`{\n        test: /\\.scss$/,\n        loader: extractTextPlugin.extract('style-loader', ['css-loader', 'sass-loader'])\n      }` \n\n**['css-loader', 'sass-loader']** as Array is the key\nand then  we can require as option 1 above.\n. @deju use the option 1 to check sass-loader work. It will inject the Css to html head.\nMaybe u can parse you config.\n. @szimek try this code. it works for me with \"webpack\": \"^2.1.0-beta.25\" and \"extract-text-webpack-plugin\": \"^2.0.0-beta.4\".\n`loader: extractTextPlugin.extract({\n          fallbackLoader: 'style-loader',\n          loader: ['css-loader', 'sass-loader']\n        })\n`\n. ",
    "deju": "@gaterking  I got the error too. But still failed when following your solution.\n. @gaterking  I got the error too. But still failed when following your solution.\n. ",
    "szimek": "Any ideas how to solve it if I want to keep using ExtractText plugin? I'm using webpack 2.1.0-beta.25 and neither `ExtractTextPlugin.extract(['style-loader', ['css-loader', 'sass-loader'])` nor `ExtractTextPlugin.extract(['style-loader', 'css-loader!sass-loader'])` works for me :/ Is there an older version of sass-loader where it worked correctly?\n\nIt's also possible that it's an issue with ExtractText plugin (I'm using 2.0.0-beta.4), because without it, sass-loader works fine.\n\nEDIT: This seems to work:\n\n``` javascript\n{ \n  test: /\\.sass$/, \n  loader: ExtractTextPlugin.extract({\n    fallbackLoader: \"style-loader\",\n    loader: \"css-loader!sass-loader\",\n  }),\n}\n```\n. Any ideas how to solve it if I want to keep using ExtractText plugin? I'm using webpack 2.1.0-beta.25 and neither `ExtractTextPlugin.extract(['style-loader', ['css-loader', 'sass-loader'])` nor `ExtractTextPlugin.extract(['style-loader', 'css-loader!sass-loader'])` works for me :/ Is there an older version of sass-loader where it worked correctly?\n\nIt's also possible that it's an issue with ExtractText plugin (I'm using 2.0.0-beta.4), because without it, sass-loader works fine.\n\nEDIT: This seems to work:\n\n``` javascript\n{ \n  test: /\\.sass$/, \n  loader: ExtractTextPlugin.extract({\n    fallbackLoader: \"style-loader\",\n    loader: \"css-loader!sass-loader\",\n  }),\n}\n```\n. ",
    "Itagiba": "I am still having the same problem [here](https://github.com/Itagiba/webpack-test). Using the same code as suggested by @gaterking:\r\n\r\n`        loader: ExtractTextPlugin.extract({ fallbackLoader: 'style-loader', loader: ['css-loader', 'sass-loader'] })`\r\n\r\nAnd \r\n\r\n```\r\nplugins: [\r\n\r\n    new ExtractTextPlugin({ filename: './public/css/custom.css', disable: false, allChunks: true }),\r\n    //Add Bourbon dependency\r\n      new webpack.LoaderOptionsPlugin({\r\n        options: {\r\n          sassLoader: {\r\n            includePaths: require('bourbon').includePaths,\r\n            outputStyle: 'expanded',\r\n          },\r\n          context: '/src/sass',\r\n        }\r\n      }),\r\n\r\n ]\r\n\r\nI import my file in my index.jsx like so:\r\n\r\n`import '../src/sass/custom.scss'`\r\n\r\n```\r\nAnd the error persists:\r\n\r\n```\r\nnexpected token (2:0)\r\n\r\n@import 'bourbon';\r\n```\r\n\r\nWhat is wrong with the processing?. I am still having the same problem [here](https://github.com/Itagiba/webpack-test). Using the same code as suggested by @gaterking:\r\n\r\n`        loader: ExtractTextPlugin.extract({ fallbackLoader: 'style-loader', loader: ['css-loader', 'sass-loader'] })`\r\n\r\nAnd \r\n\r\n```\r\nplugins: [\r\n\r\n    new ExtractTextPlugin({ filename: './public/css/custom.css', disable: false, allChunks: true }),\r\n    //Add Bourbon dependency\r\n      new webpack.LoaderOptionsPlugin({\r\n        options: {\r\n          sassLoader: {\r\n            includePaths: require('bourbon').includePaths,\r\n            outputStyle: 'expanded',\r\n          },\r\n          context: '/src/sass',\r\n        }\r\n      }),\r\n\r\n ]\r\n\r\nI import my file in my index.jsx like so:\r\n\r\n`import '../src/sass/custom.scss'`\r\n\r\n```\r\nAnd the error persists:\r\n\r\n```\r\nnexpected token (2:0)\r\n\r\n@import 'bourbon';\r\n```\r\n\r\nWhat is wrong with the processing?. ",
    "pedrotainha": "Hi @Itagiba, i' m getting same issue as you and can' t find the solution. Were you able to find the problem? Thanks. Sorry for causing noise. In fact my issue is not the same. i created a new one here: https://github.com/webpack-contrib/sass-loader/issues/498. @evilebottnawi . I shared a zip with the mininum source code in the description. Do i really need to create a repo?\r\n\r\nThanks\r\n. ok, removed happyPack and it works. I will report this to them. \r\n\r\nBut then i get further on this minimum example and i'm not able to have a css file as output. Probably i'm not getting well how the sass loader works????\r\n\r\nagain a new zip with modified content:\r\n[issue reproduce.zip](https://github.com/webpack-contrib/sass-loader/files/1372046/issue.reproduce.zip)\r\n. Hi @Itagiba, i' m getting same issue as you and can' t find the solution. Were you able to find the problem? Thanks. Sorry for causing noise. In fact my issue is not the same. i created a new one here: https://github.com/webpack-contrib/sass-loader/issues/498. @evilebottnawi . I shared a zip with the mininum source code in the description. Do i really need to create a repo?\r\n\r\nThanks\r\n. ok, removed happyPack and it works. I will report this to them. \r\n\r\nBut then i get further on this minimum example and i'm not able to have a css file as output. Probably i'm not getting well how the sass loader works????\r\n\r\nagain a new zip with modified content:\r\n[issue reproduce.zip](https://github.com/webpack-contrib/sass-loader/files/1372046/issue.reproduce.zip)\r\n. ",
    "d3viant0ne": "@pedrotainha - No two issues are actually the same, regardless of similar end results.\r\n\r\nCreate a new issue outlining your problem & provide a minimal repo where the issue can reliably be reproduced. . Given this is performance related, @jhnns has the final say as to how & when this gets merged.. Please submit support requests and questions to StackOverflow using the tag [[webpack]](http://stackoverflow.com/tags/webpack). StackOverflow is better suited for this kind of support though you may also inquire in [Webpack Gitter](https://gitter.im/webpack/webpack). The issue tracker is for bug reports and feature discussions. See also our CONTRIBUTING guidelines.. @jhnns - AOT is Angular's Ahead of Time compilation\r\n\r\nIn short, AOT compiles HTML templates and components into JavaScript files before they are served.\r\n\r\nSee: https://angular.io/docs/ts/latest/cookbook/aot-compiler.html if you are curious\r\n\r\nAnd as far as a repo goes, he's using this - https://github.com/AngularClass/angular2-webpack-starter. And IMO, this should be closed in favor of #373 which actually provides error context of value. AOT will fail as soon as it can't resolve something, an undefined path would certainly do it.\r\n\r\n@jhnns A vague AOT compilation error isn't going to help you trace the problem, hence my personal preference of #373. @sirlancelot - contrib was created to allow Tobias and other core member focus on Webpack. If you need to get a hold of someone, try the lead maintainer ( for repos like sass-loader that have one )\r\n\r\nFor other libs in `webpack-contrib` that are maintained by the organization or if you can't get in contact with the lead maintainer ( real life happens ) tag `@webpack-contrib/org-maintainers ` or `@d3viant0ne @bebraw`.\r\n\r\nIf none of that works, DM me on gitter or twitter.. @michael-ciniawsky - I'm working on that now, i'll get this sorted shortly.. For reference, while Johannes is busy irl and i'm filling in, if you can't get me via github and it's time sensitive just ping me on Twitter ( same name ) which will ding my cell. . @evilebottnawi - We still support nodejs 4.3, where this would / does blow up the build.\r\n\r\nI'll add the peerDep and new Travis file in a smaller PR than defaults.. Thanks @benschac . That's the idea, just tidying up the package quick. @evilebottnawi - @jhnns has been busy but he's still available when needed. Just ping him on slack like you would Tobias if you need him to look at a PR.. @evilebottnawi - Rebase in 9e40b782f58b75ab7f2edaaead3fb0d10152632a from master to clear up that Travis error.. @pedrotainha - No two issues are actually the same, regardless of similar end results.\r\n\r\nCreate a new issue outlining your problem & provide a minimal repo where the issue can reliably be reproduced. . Given this is performance related, @jhnns has the final say as to how & when this gets merged.. Please submit support requests and questions to StackOverflow using the tag [[webpack]](http://stackoverflow.com/tags/webpack). StackOverflow is better suited for this kind of support though you may also inquire in [Webpack Gitter](https://gitter.im/webpack/webpack). The issue tracker is for bug reports and feature discussions. See also our CONTRIBUTING guidelines.. @jhnns - AOT is Angular's Ahead of Time compilation\r\n\r\nIn short, AOT compiles HTML templates and components into JavaScript files before they are served.\r\n\r\nSee: https://angular.io/docs/ts/latest/cookbook/aot-compiler.html if you are curious\r\n\r\nAnd as far as a repo goes, he's using this - https://github.com/AngularClass/angular2-webpack-starter. And IMO, this should be closed in favor of #373 which actually provides error context of value. AOT will fail as soon as it can't resolve something, an undefined path would certainly do it.\r\n\r\n@jhnns A vague AOT compilation error isn't going to help you trace the problem, hence my personal preference of #373. @sirlancelot - contrib was created to allow Tobias and other core member focus on Webpack. If you need to get a hold of someone, try the lead maintainer ( for repos like sass-loader that have one )\r\n\r\nFor other libs in `webpack-contrib` that are maintained by the organization or if you can't get in contact with the lead maintainer ( real life happens ) tag `@webpack-contrib/org-maintainers ` or `@d3viant0ne @bebraw`.\r\n\r\nIf none of that works, DM me on gitter or twitter.. @michael-ciniawsky - I'm working on that now, i'll get this sorted shortly.. For reference, while Johannes is busy irl and i'm filling in, if you can't get me via github and it's time sensitive just ping me on Twitter ( same name ) which will ding my cell. . @evilebottnawi - We still support nodejs 4.3, where this would / does blow up the build.\r\n\r\nI'll add the peerDep and new Travis file in a smaller PR than defaults.. Thanks @benschac . That's the idea, just tidying up the package quick. @evilebottnawi - @jhnns has been busy but he's still available when needed. Just ping him on slack like you would Tobias if you need him to look at a PR.. @evilebottnawi - Rebase in 9e40b782f58b75ab7f2edaaead3fb0d10152632a from master to clear up that Travis error.. ",
    "tleunen": "The sass loader should be updated to the new way of passing options instead of using the `LoaderOptionsPlugin`.\n. No not really.. there's a fix explained here for the context: https://github.com/webpack/webpack/issues/3018#issuecomment-248445176\n. The sass loader should be updated to the new way of passing options instead of using the `LoaderOptionsPlugin`.\n. No not really.. there's a fix explained here for the context: https://github.com/webpack/webpack/issues/3018#issuecomment-248445176\n. ",
    "leaves4j": "@gpazo TypeError: webpack.LoaderOptionsPlugin is not a constructor\nI got this error in webpack@2.1.0-beta.25\n. @gpazo TypeError: webpack.LoaderOptionsPlugin is not a constructor\nI got this error in webpack@2.1.0-beta.25\n. ",
    "cmckni3": "I switched to using the module.rules `use` syntax.\n\n```\n{\n  test: /\\.scss$/,\n  use: [\n    'style-loader',\n    'css-loader',\n    {\n      loader: 'sass-loader',\n      query: {\n        includePaths: [path.resolve(__dirname, \"./some-folder\")]\n      }\n    }\n  ]\n}\n```\n. I switched to using the module.rules `use` syntax.\n\n```\n{\n  test: /\\.scss$/,\n  use: [\n    'style-loader',\n    'css-loader',\n    {\n      loader: 'sass-loader',\n      query: {\n        includePaths: [path.resolve(__dirname, \"./some-folder\")]\n      }\n    }\n  ]\n}\n```\n. ",
    "pretentiousgit": "This is still a bug in webpack-cli with webpack 2.5.1, fresh install of everything.. This is still a bug in webpack-cli with webpack 2.5.1, fresh install of everything.. ",
    "jayvdb": ":-1: vandalism.\n. :-1: vandalism.\n. ",
    "levithomason": "That is exactly what I was expecting. The module is installed at the path you noted but it is not found. \n\nWhen installing scope modules, their package name is scoped and they are installed to the scope folder (@technologyadvice). The only way I could get this to work was to move the module up out of the scope folder into the root of node_modules. \n. `\"main\": \"dist/css/radiant.css\",`\n. Again, the curious thing here is that it works just fine when it is not in a `@technologyadvice` scoped folder.  No changes are required to the package nor the config in that case, it just works.  Only when the module is in the scoped folder does it fail to find it.\n. That is exactly what I was expecting. The module is installed at the path you noted but it is not found. \n\nWhen installing scope modules, their package name is scoped and they are installed to the scope folder (@technologyadvice). The only way I could get this to work was to move the module up out of the scope folder into the root of node_modules. \n. `\"main\": \"dist/css/radiant.css\",`\n. Again, the curious thing here is that it works just fine when it is not in a `@technologyadvice` scoped folder.  No changes are required to the package nor the config in that case, it just works.  Only when the module is in the scoped folder does it fail to find it.\n. ",
    "jacobgunnarsson": "@jhnns We are encountering this exact problem as of `6.0.0`. Can confirm all of @levithomason's observations. \r\n\r\nIn addition; the scoped node_module import syntax works when importing using a reference to a specific file, i.e. `@import \"~@styles/variables` is not found whereas `@import \"~@styles/variables/src/main\"` is. `@styles/variables/package.json` contains `\"main\": \"src/main.scss\"`.\r\n\r\nAny thoughts or updates? Thanks!. @jhnns We are encountering this exact problem as of `6.0.0`. Can confirm all of @levithomason's observations. \r\n\r\nIn addition; the scoped node_module import syntax works when importing using a reference to a specific file, i.e. `@import \"~@styles/variables` is not found whereas `@import \"~@styles/variables/src/main\"` is. `@styles/variables/package.json` contains `\"main\": \"src/main.scss\"`.\r\n\r\nAny thoughts or updates? Thanks!. ",
    "kirkstrobeck": "Lol too many tabs open\n. Lol too many tabs open\n. ",
    "khankuan": "I experienced great improvements after switching to node-sass. But doing that would go in opposite direction with component-based styling. @mmase do you have lots of variables and mixins that you import with `@import`? Also, are you importing .sass files multiple times, i.e, every component imports its own sass file?\n. @wildeyes i think so. I have 2 sass files, variables.sass and componentA.sass. The variables file is used by multiple components. Incremental rebuild speed for 700 components took 8 secs on a variable.sass change while 2 secs for componentA.sass.. I experienced great improvements after switching to node-sass. But doing that would go in opposite direction with component-based styling. @mmase do you have lots of variables and mixins that you import with `@import`? Also, are you importing .sass files multiple times, i.e, every component imports its own sass file?\n. @wildeyes i think so. I have 2 sass files, variables.sass and componentA.sass. The variables file is used by multiple components. Incremental rebuild speed for 700 components took 8 secs on a variable.sass change while 2 secs for componentA.sass.. ",
    "wildeyes": "\"Also, are you importing .sass files multiple times, i.e, every component imports its own sass file?\" would doing this improve or worsen the compiliation speed?. \"Also, are you importing .sass files multiple times, i.e, every component imports its own sass file?\" would doing this improve or worsen the compiliation speed?. ",
    "feng-xiao": "@jhnns Hi jhnns, may I ask what tools you were using to generate those profiling screenshots? I need to troubleshoot webpack issues as well, I need a tool to help me pinpoint the problem.. @jhnns thank you very much!!!. @jhnns Hi jhnns, may I ask what tools you were using to generate those profiling screenshots? I need to troubleshoot webpack issues as well, I need a tool to help me pinpoint the problem.. @jhnns thank you very much!!!. ",
    "mikesherov": "hello friends. Just as an FYI, I'm looking into this. With any luck, we'll see if there is any low hanging fruit to go after besides for the `allChunks` and `sourcemap: false` optimizations.. @levin-du, several of css-loaders dependencies are extremely slow but have been rewritten to be much much faster, but are semver major. css-loader is currently undergoing a rewrite along with the rest of the CSS module loading architecture, so I asked if a patch would be accepted. Due to the fact that it's a major bump, I was asked to wait for the rewrite to be completed instead. . hello friends. Just as an FYI, I'm looking into this. With any luck, we'll see if there is any low hanging fruit to go after besides for the `allChunks` and `sourcemap: false` optimizations.. @levin-du, several of css-loaders dependencies are extremely slow but have been rewritten to be much much faster, but are semver major. css-loader is currently undergoing a rewrite along with the rest of the CSS module loading architecture, so I asked if a patch would be accepted. Due to the fact that it's a major bump, I was asked to wait for the rewrite to be completed instead. . ",
    "levin-du": "any new updates? @mikesherov . any new updates? @mikesherov . ",
    "sentience": "That's a shame, @mikesherov, but thanks for the update!. That's a shame, @mikesherov, but thanks for the update!. ",
    "tycho01": "I see, fair enough. Thanks.\n\nOn Tue, Nov 8, 2016 at 12:51 AM, Johannes Ewald notifications@github.com\nwrote:\n\n> Afaik python is still a dependency of Node.js' gyp\n> https://nodejs.org/en/docs/meta/topics/dependencies/#gyp. Why should we\n> get rid of it?\n> \n> You could create a PR for that and make some performance tests.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jtangelder/sass-loader/issues/297#issuecomment-259001688,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AC6uxbxbFuHCCvW9SXOwMoEq1y9ZTDDxks5q77lvgaJpZM4KqNgi\n> .\n. I see, fair enough. Thanks.\n\nOn Tue, Nov 8, 2016 at 12:51 AM, Johannes Ewald notifications@github.com\nwrote:\n\n> Afaik python is still a dependency of Node.js' gyp\n> https://nodejs.org/en/docs/meta/topics/dependencies/#gyp. Why should we\n> get rid of it?\n> \n> You could create a PR for that and make some performance tests.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/jtangelder/sass-loader/issues/297#issuecomment-259001688,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AC6uxbxbFuHCCvW9SXOwMoEq1y9ZTDDxks5q77lvgaJpZM4KqNgi\n> .\n. ",
    "catamphetamine": "For the googling ones: my temporary workaround for this issue is\n\n``` js\n\n\nconfiguration.plugins.push\n(\n    new webpack.LoaderOptionsPlugin\n    ({\n        test: /\\.scss$/,\n        debug: true,\n        options:\n        {\n            // A temporary workaround for `scss-loader`\n            // https://github.com/jtangelder/sass-loader/issues/298\n            output:\n            {\n                path: configuration.output.path\n            },\n\n            postcss:\n            [\n                autoprefixer({ browsers: 'last 2 version' }),\n                css_custom_properties(),\n                postcss_calc()\n            ],\n\n            // A temporary workaround for `css-loader`.\n            // Can also supply `query.context` parameter.\n            context: configuration.context,\n\n            // output:\n            // {\n            //  path: path.join(__dirname, 'dist'),\n            // }\n        }\n    })\n)\n```\n. @daslicht Try this:\n\n``` js\n\nconfiguration.plugins.push\n(\n    new webpack.LoaderOptionsPlugin\n    ({\n        test: /\\.scss$/,\n        debug: true,\n        options:\n        {\n            // A temporary workaround for `scss-loader`\n            // https://github.com/jtangelder/sass-loader/issues/298\n            output:\n            {\n                path: configuration.output.path\n            }\n        }\n    })\n}\n```\n. @jhnns Which new option exactly are you talking about?. @jhnns So, what you're telling is that the new `options.includePaths` parameter is equal to the former `LoaderOptionsPlugin.output.path` parameter?. @jhnns Still not working. The error has changed though:\r\n\r\n```\r\npath.js:7\r\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\r\n    ^\r\n\r\nTypeError: Path must be a string. Received undefined\r\n    at assertPath (path.js:7:11)\r\n\r\n```. I'll create a new issue since this one is unable to be reopened. Ok, I won't provide a sample repo but other people coming from google can.\r\nThis issue is not just mine though, you can see at least 2 other people in the linked issue having the same error.. Yes, the usual Webpack + node-sass + sass-loader.\r\n```js\r\n{\r\n    test: /\\.(sass|css)$/,\r\n    use: [{\r\n      loader: 'style-loader'\r\n    }, {\r\n      loader : 'css-loader'\r\n    }, {\r\n      loader : 'sass-loader'\r\n    }]\r\n  }\r\n```. This is the repo illustrating the issue\r\nhttps://github.com/catamphetamine/sass-import-bug-illustration. Oh, true, it does work this way.\r\nThanks for helping \ud83d\udc4d.. I see...\r\n\r\n> @import takes a filename to import. By default, it looks for a Sass file to import directly, but there are a few circumstances under which it will compile to a CSS @import rule:\r\nIf the file's extension is .css.. My personal opinion on this: if the path starts with a tilde then it's certainly not meant for a usual CSS `@import` and an error should be thrown.\r\nStill filenames can start with a tilde so it's not a silver bullet. But I guess that would be > 99.999%.. For the googling ones: my temporary workaround for this issue is\n\n``` js\n\n\nconfiguration.plugins.push\n(\n    new webpack.LoaderOptionsPlugin\n    ({\n        test: /\\.scss$/,\n        debug: true,\n        options:\n        {\n            // A temporary workaround for `scss-loader`\n            // https://github.com/jtangelder/sass-loader/issues/298\n            output:\n            {\n                path: configuration.output.path\n            },\n\n            postcss:\n            [\n                autoprefixer({ browsers: 'last 2 version' }),\n                css_custom_properties(),\n                postcss_calc()\n            ],\n\n            // A temporary workaround for `css-loader`.\n            // Can also supply `query.context` parameter.\n            context: configuration.context,\n\n            // output:\n            // {\n            //  path: path.join(__dirname, 'dist'),\n            // }\n        }\n    })\n)\n```\n. @daslicht Try this:\n\n``` js\n\nconfiguration.plugins.push\n(\n    new webpack.LoaderOptionsPlugin\n    ({\n        test: /\\.scss$/,\n        debug: true,\n        options:\n        {\n            // A temporary workaround for `scss-loader`\n            // https://github.com/jtangelder/sass-loader/issues/298\n            output:\n            {\n                path: configuration.output.path\n            }\n        }\n    })\n}\n```\n. @jhnns Which new option exactly are you talking about?. @jhnns So, what you're telling is that the new `options.includePaths` parameter is equal to the former `LoaderOptionsPlugin.output.path` parameter?. @jhnns Still not working. The error has changed though:\r\n\r\n```\r\npath.js:7\r\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\r\n    ^\r\n\r\nTypeError: Path must be a string. Received undefined\r\n    at assertPath (path.js:7:11)\r\n\r\n```. I'll create a new issue since this one is unable to be reopened. Ok, I won't provide a sample repo but other people coming from google can.\r\nThis issue is not just mine though, you can see at least 2 other people in the linked issue having the same error.. Yes, the usual Webpack + node-sass + sass-loader.\r\n```js\r\n{\r\n    test: /\\.(sass|css)$/,\r\n    use: [{\r\n      loader: 'style-loader'\r\n    }, {\r\n      loader : 'css-loader'\r\n    }, {\r\n      loader : 'sass-loader'\r\n    }]\r\n  }\r\n```. This is the repo illustrating the issue\r\nhttps://github.com/catamphetamine/sass-import-bug-illustration. Oh, true, it does work this way.\r\nThanks for helping \ud83d\udc4d.. I see...\r\n\r\n> @import takes a filename to import. By default, it looks for a Sass file to import directly, but there are a few circumstances under which it will compile to a CSS @import rule:\r\nIf the file's extension is .css.. My personal opinion on this: if the path starts with a tilde then it's certainly not meant for a usual CSS `@import` and an error should be thrown.\r\nStill filenames can start with a tilde so it's not a silver bullet. But I guess that would be > 99.999%.. ",
    "daslicht": "is there somewhere an complete example how to use wepack 2 + sass ? please\n. is there somewhere an complete example how to use wepack 2 + sass ? please\n. ",
    "devsnek": "_EDIT: installing the latest hash from the \"webpack 2\" pr got me past this issue_\r\n\r\nHello all, i am having a similar issue here. \r\n\r\n![](https://i.gus.host/b3Ya83)\r\n\r\n```\r\nTypeError: Path must be a string. Received undefined\r\n    at assertPath (path.js:7:11)\r\n    at Object.relative (path.js:1226:5)\r\n    at Object.onRender [as callback] (node_modules/sass-loader/index.js:282:42)\r\n    at Object.<anonymous> (node_modules/async/dist/async.js:2234:31)\r\n    at apply (node_modules/async/dist/async.js:20:25)\r\n    at Object.<anonymous> (node_modules/async/dist/async.js:56:12)\r\n    at Object.callback (node_modules/async/dist/async.js:840:16)\r\n    at options.success (node_modules/node-sass/lib/index.js:303:32)\r\n```\r\n\r\ndoes anyone have any tips?. _EDIT: installing the latest hash from the \"webpack 2\" pr got me past this issue_\r\n\r\nHello all, i am having a similar issue here. \r\n\r\n![](https://i.gus.host/b3Ya83)\r\n\r\n```\r\nTypeError: Path must be a string. Received undefined\r\n    at assertPath (path.js:7:11)\r\n    at Object.relative (path.js:1226:5)\r\n    at Object.onRender [as callback] (node_modules/sass-loader/index.js:282:42)\r\n    at Object.<anonymous> (node_modules/async/dist/async.js:2234:31)\r\n    at apply (node_modules/async/dist/async.js:20:25)\r\n    at Object.<anonymous> (node_modules/async/dist/async.js:56:12)\r\n    at Object.callback (node_modules/async/dist/async.js:840:16)\r\n    at options.success (node_modules/node-sass/lib/index.js:303:32)\r\n```\r\n\r\ndoes anyone have any tips?. ",
    "silviogutierrez": "I had the same issue: odd pieces of my SASS files were being stripped out when building with `-p`. In webpack.\r\n\r\nIn my case, I fixed it by adding `-minimize` to the *css-loader*, not the SASS loader.\r\n\r\nLike so:\r\n\r\n```js\r\n            {\r\n                test: /\\.scss$/,\r\n                loaders: [\"style-loader\", \"css-loader?-minimize\", \"sass-loader\"],\r\n            },\r\n```\r\n\r\nVery odd.. I had the same issue: odd pieces of my SASS files were being stripped out when building with `-p`. In webpack.\r\n\r\nIn my case, I fixed it by adding `-minimize` to the *css-loader*, not the SASS loader.\r\n\r\nLike so:\r\n\r\n```js\r\n            {\r\n                test: /\\.scss$/,\r\n                loaders: [\"style-loader\", \"css-loader?-minimize\", \"sass-loader\"],\r\n            },\r\n```\r\n\r\nVery odd.. ",
    "chartinger": "@jvanderberg thank you so much. I spent half a day trying to figure out why the production css was messed up. Nearly all issues i found about this topic were about css-loader and cssnano but no configuration had any effect. Nor did -minimize on the sass-loader. Your outputStyle workaround did the trick.. For me the issue was solved with the output workaround back then. [I did not run into this issue in my recent projects]. Just like in the original post\r\n\r\n> But, there is a workaround, sass-loader?outputStyle=uncompressed does disable the sass-loader's compression and fixes our production build. 'uncompressed' probably isn't even a valid option, but it does effectively disable compression.\r\n\r\nI think this ticket is more about having an \"official\" way to do the same, but helped me solve the problem with the given \"unsupported\" method.. @jvanderberg thank you so much. I spent half a day trying to figure out why the production css was messed up. Nearly all issues i found about this topic were about css-loader and cssnano but no configuration had any effect. Nor did -minimize on the sass-loader. Your outputStyle workaround did the trick.. For me the issue was solved with the output workaround back then. [I did not run into this issue in my recent projects]. Just like in the original post\r\n\r\n> But, there is a workaround, sass-loader?outputStyle=uncompressed does disable the sass-loader's compression and fixes our production build. 'uncompressed' probably isn't even a valid option, but it does effectively disable compression.\r\n\r\nI think this ticket is more about having an \"official\" way to do the same, but helped me solve the problem with the given \"unsupported\" method.. ",
    "jvanderberg": "@silviogutierrez I'd thought we'd tried just about every combination of flag on every loader we could think of.  I may revisit and see, but most likely I think our next big change will be Webpack 2, and it will likely fix this by not putting loaders into minimize mode by default.. @evilebottnawi I think the underlying issue is that there's something broken in the minification when sassLoader.outputStyle == 'compressed'.  I don't know how to reproduce the issue as it's pretty difficult to debug minimized CSS output (at least for me).  But that's beside the point of this case really.  Even if the specific bug I am encountered were fixed, I imagine in future there are always going to be bugs or edge cases with minification, and it would be nice if there were an 'official' way to disable minification.  Maybe my outputStyle setting usage is official, but I fear that perhaps future releases will change/break this behavior.\r\n\r\nI don't think we've updated the versions we are using in awhile.  We should probably revisit this and see if any of the issues have resolved.. Yes, in my troubleshooting I assumed the minification issue lies lower in the stack.  But the piece of the stack turning on minification is the sass-loader, and it ignores the configuration flags that usually disable minification.\r\n\r\nThe following webpack config results in css minification, which breaks our build (yes, not your fault I know)\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.s?css$/,\r\n\t\t\t\tloaders: [\r\n\t\t\t\t\t'style-loader',\r\n\t\t\t\t\t'css-loader?-minimize',\r\n\t\t\t\t\t'postcss-loader',\r\n\t\t\t\t\t'sass-loader'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\r\nThis does not result in minification and allows our production build to function:\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.s?css$/,\r\n\t\t\t\tloaders: [\r\n\t\t\t\t\t'style-loader',\r\n\t\t\t\t\t'css-loader?-minimize',\r\n\t\t\t\t\t'postcss-loader',\r\n\t\t\t\t\t'sass-loader?outputStyle=uncompressed'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\r\nMy hope would be that sass-loader could make some simple changes to allow the standard flag css-loader uses to disable minification, or to somehow pick up on css-loaders configuration.  I had to read the source code to figure out the outputStyle flag, and I am not at all sure it's going to work in future versions.  Note, we are using 0.23.1\r\n. We have not moved to Webpack 2 yet, and are using the version listed in my previous comment.  I suspect webpack 2 will fix things because it does not automatically put plugins into minimize mode when UglifyJSPlugin is used.. @silviogutierrez I'd thought we'd tried just about every combination of flag on every loader we could think of.  I may revisit and see, but most likely I think our next big change will be Webpack 2, and it will likely fix this by not putting loaders into minimize mode by default.. @evilebottnawi I think the underlying issue is that there's something broken in the minification when sassLoader.outputStyle == 'compressed'.  I don't know how to reproduce the issue as it's pretty difficult to debug minimized CSS output (at least for me).  But that's beside the point of this case really.  Even if the specific bug I am encountered were fixed, I imagine in future there are always going to be bugs or edge cases with minification, and it would be nice if there were an 'official' way to disable minification.  Maybe my outputStyle setting usage is official, but I fear that perhaps future releases will change/break this behavior.\r\n\r\nI don't think we've updated the versions we are using in awhile.  We should probably revisit this and see if any of the issues have resolved.. Yes, in my troubleshooting I assumed the minification issue lies lower in the stack.  But the piece of the stack turning on minification is the sass-loader, and it ignores the configuration flags that usually disable minification.\r\n\r\nThe following webpack config results in css minification, which breaks our build (yes, not your fault I know)\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.s?css$/,\r\n\t\t\t\tloaders: [\r\n\t\t\t\t\t'style-loader',\r\n\t\t\t\t\t'css-loader?-minimize',\r\n\t\t\t\t\t'postcss-loader',\r\n\t\t\t\t\t'sass-loader'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\r\nThis does not result in minification and allows our production build to function:\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.s?css$/,\r\n\t\t\t\tloaders: [\r\n\t\t\t\t\t'style-loader',\r\n\t\t\t\t\t'css-loader?-minimize',\r\n\t\t\t\t\t'postcss-loader',\r\n\t\t\t\t\t'sass-loader?outputStyle=uncompressed'\r\n\t\t\t\t]\r\n\t\t\t},\r\n\r\nMy hope would be that sass-loader could make some simple changes to allow the standard flag css-loader uses to disable minification, or to somehow pick up on css-loaders configuration.  I had to read the source code to figure out the outputStyle flag, and I am not at all sure it's going to work in future versions.  Note, we are using 0.23.1\r\n. We have not moved to Webpack 2 yet, and are using the version listed in my previous comment.  I suspect webpack 2 will fix things because it does not automatically put plugins into minimize mode when UglifyJSPlugin is used.. ",
    "RickWong": "@louisnovick Were you able to find a fix for this problem?. @louisnovick Were you able to find a fix for this problem?. ",
    "louisnovick": "I was mistaken, I get errors in both terminal and in my browser.  I can't remember what I was seeing when I posted this, thanks.. I was mistaken, I get errors in both terminal and in my browser.  I can't remember what I was seeing when I posted this, thanks.. ",
    "thanhtrixx": "I found issue,\nfile `_roboto.scss` use relative url:\n\n```\n@font-face {\n    font-family: \"Roboto\";\n    src: local(Roboto Thin), url('#{$roboto-font-path}Roboto-Thin.eot');\n    src: url(\"#{$roboto-font-path}Roboto-Thin.eot?#iefix\") format('embedded-opentype'),\n        url(\"#{$roboto-font-path}Roboto-Thin.woff2\") format(\"woff2\"),\n        url(\"#{$roboto-font-path}Roboto-Thin.woff\") format(\"woff\"),\n        url(\"#{$roboto-font-path}Roboto-Thin.ttf\") format(\"truetype\");\n\n    font-weight: 200;\n}\n```\n\nwith `#{$roboto-font-path}` = `../fonts/roboto/`\n\nI had resloved it by install `resolve-url-loader` loader and change config to: \n\n```\n{\n    test: /\\.scss$/,\n    loaders: ['style', 'css', 'resolve-url', 'sass?sourceMap']\n}\n```\n. I found issue,\nfile `_roboto.scss` use relative url:\n\n```\n@font-face {\n    font-family: \"Roboto\";\n    src: local(Roboto Thin), url('#{$roboto-font-path}Roboto-Thin.eot');\n    src: url(\"#{$roboto-font-path}Roboto-Thin.eot?#iefix\") format('embedded-opentype'),\n        url(\"#{$roboto-font-path}Roboto-Thin.woff2\") format(\"woff2\"),\n        url(\"#{$roboto-font-path}Roboto-Thin.woff\") format(\"woff\"),\n        url(\"#{$roboto-font-path}Roboto-Thin.ttf\") format(\"truetype\");\n\n    font-weight: 200;\n}\n```\n\nwith `#{$roboto-font-path}` = `../fonts/roboto/`\n\nI had resloved it by install `resolve-url-loader` loader and change config to: \n\n```\n{\n    test: /\\.scss$/,\n    loaders: ['style', 'css', 'resolve-url', 'sass?sourceMap']\n}\n```\n. ",
    "AntiCZ": "But there is a problem if someone use angluar-cli. But there is a problem if someone use angluar-cli. ",
    "cyan33": "still getting the error regarding the font files. still getting the error regarding the font files. ",
    "x-yuri": "Indeed, it's debatable if this code should be part of this repo. Especially the way it is now. Anyways, I'd appreciate it if you gave me some more concrete advice on what I can do. I see the following options:\r\n\r\n1. Make `sass-loader` provide more context (particularly, path to the asset being compiled) to the functions. Is it not an option? That way people would be able to add functions like these ones themselves in `webpack` configuration file. Either as the last extra parameter, or by changing function execution context (adding property to `this`). Or maybe you've got better ideas.\r\n\r\n2. Create a separate `webpack` loader, which adds these two functions. But for that I need some kind of css parser. Can you recommend any? And probably update source map, if any.\r\n\r\n3. Create some wrapper around `node-sass`? Not sure if it's a good idea.\r\n\r\nWhat would you do if you were me? :) And maybe some recommendations on what to use for testing.\r\n\r\nThanks in advance.\r\n\r\nP.S. Isn't everybody `compass` addict like I am? :) (Mainly for these two functions.). Indeed, it's debatable if this code should be part of this repo. Especially the way it is now. Anyways, I'd appreciate it if you gave me some more concrete advice on what I can do. I see the following options:\r\n\r\n1. Make `sass-loader` provide more context (particularly, path to the asset being compiled) to the functions. Is it not an option? That way people would be able to add functions like these ones themselves in `webpack` configuration file. Either as the last extra parameter, or by changing function execution context (adding property to `this`). Or maybe you've got better ideas.\r\n\r\n2. Create a separate `webpack` loader, which adds these two functions. But for that I need some kind of css parser. Can you recommend any? And probably update source map, if any.\r\n\r\n3. Create some wrapper around `node-sass`? Not sure if it's a good idea.\r\n\r\nWhat would you do if you were me? :) And maybe some recommendations on what to use for testing.\r\n\r\nThanks in advance.\r\n\r\nP.S. Isn't everybody `compass` addict like I am? :) (Mainly for these two functions.). ",
    "anchann": "Thanks for taking a look, Johannes.\r\n\r\n> we should rather try to tackle the perf issues\r\n\r\nFair enough. The only thing I wanted was that if somebody faces this problem, my findings are shared and indexed in google. The last few weeks of working on converting a large project from a three-year-old grunt-based toolchain to a webpack one has taught me one thing \u2014\u00a0none of this stuff works like magic out of the box, at the end of the day, you have to dig inside node_modules to get it working. It was the same story with the typescript part of the toolchain \u2014 takes forever, no output to shed light onto what's happening, yet calling tsc on the command line builds the project in seconds. I'd love to be proven wrong, but until then, logging my findings for the next dev is the best I can hope for :)\r\n\r\n> should be resolved at the webpack level\r\n\r\nMy personal opinion (which, I realize, is worth little) is that too much magic is a bad thing. Sass has since inception supported an includePaths configuration option specifically to make imports more readable and flexible. From this perspective, webpack's resolution seems to add nothing in terms of functionality, though perhaps it does add something in terms of uniformity (that said, uniform opaqueness is not necessarily a good thing). I'm actually using importPaths specifically to be able to import scss files from other node_modules, having it set to `[\"src/styles\", \"node_modules\", \"node_modules/compass-mixins/lib\"]`\r\n\r\nAlso, importers are labelled as experimental in node-sass' documentation. Would it not make sense to make the use of an experimental feature optional, specifically because the upstream library labels it as a \"use with caution\" feature? I would personally go as far as making it disabled by default, and only enabled when a user knows that they explicitly want the feature.\r\n\r\n> maybe it's related to sass' complicated resolving algorithm involving underscore file names\r\n\r\nI don't think that's the case \u2014 disabling the webpack importer leaves sass' native underscore resolution intact, does it not?\r\n\r\n> directory structure\r\n\r\nWhen debugging, I had a single `.scss` file that was importing 130 or so individual components' `.scss` files (since then I've switched back to require'ing `.scss` files at the top of each react component's `.ts` file). Each of these would in turn import a `common_definitions.scss` file, which in turn imported 4 leaf files with a bunch of variable or mixin declarations, along with a `my-lib/styles/export_definitions.scss` file, which imports 3 leaf files, along with\r\n\r\n```\r\ncompass\r\ncompass/css3\r\ncompass/css3/images\r\n```\r\n\r\nThese are provided by the `compass-mixins` npm module, as a replacement for the original ruby-based compass library that I was originally using before starting the migration to webpack.\r\n\r\nThe compass directory has on the order of 50 files in it. So all in we're looking at around 60 imports per file, which presumably means 60 resolve calls for 130 files, or around 8000 calls. That would make it something like 300 ms per call, which I'm pretty sure isn't what's happening. Yesterday when debugging I was dumping timings for resolution calls, and most were in the low tens of milliseconds, though about one in twenty clocked in at low hundreds.\r\n\r\nLet me know if this is enough information for you to go off of. If not, and you think it's worth the time, I'll hack the loader to add some timers to give a more concrete picture. Or, if it's easier for you, you can give me a custom version of sass-loader with whatever instrumentation you want, and I'll send you the output data.. Apologies for the silence: after I finally finished the conversion work on my project, the pressure to work on user-facing features out-prioritized my feeble attempts at community involvement.\r\n\r\nTo be honest, I didn't even want to do this test when I saw the variable name, since it sounded like a poor quality sledgehammer approach to the problem. I still firmly believe that even if resolving the problem internally inside webpack is the philosophically correct thing to do, given that lib-sass has a working solution to accommodate aliasing via import paths, sass-loader should provide its users with an escape hatch in case they want one.\r\n\r\nEither way, I refactored my project a bit to get back to a setup about which I originally posted, one with a top level scss file that imports 133 component-specific scss files. There were some library-specific files that I didn't bother with, so they'll show up stand-alone in the output. I do not know why webpack builds the whole thing twice \u2014 I didn't even know that it does before I put the instrumentation in. Instrumentation is basically the following timer:\r\n\r\n```\r\n269     var startTime = new Date().getTime();\r\n270     asyncSassJobQueue.push(sassOptions, function onRender(err, result) {\r\n271         console.log(\"Took \" + (new Date().getTime() - startTime) + \" ms for \" + resourcePath);\r\n```\r\n\r\nHere's what the numbers look like (resourcePath stripped for ease of reading/privacy).\r\n\r\nFirst, with the importer disabled (which is how I run it normally).\r\n\r\n```\r\nTook 466 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 257 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 638 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 867 ms for lib/components/IconButton/IconButton.scss\r\nTook 1187 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 1210 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 1355 ms for lib/components/Spinner/Spinner.scss\r\nTook 1439 ms for lib/components/TextField/TextField.scss\r\nTook 1586 ms for lib/components/ListItem/ListItem.scss\r\nTook 4532 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\nTook 3095 ms for lib/components/Photos/Photos.scss\r\nTook 71 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 125 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 146 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 188 ms for lib/components/IconButton/IconButton.scss\r\nTook 221 ms for lib/components/Spinner/Spinner.scss\r\nTook 263 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 288 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 339 ms for lib/components/TextField/TextField.scss\r\nTook 379 ms for lib/components/Photos/Photos.scss\r\nTook 411 ms for lib/components/ListItem/ListItem.scss\r\nTook 1518 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\n```\r\n\r\nNext, with the latest sass-loader from npm. Even though the calls go through sass-loaders async functions, it looked as if something was serializing the calls along the way. Upon closer inspection, this seems to also be happening in the no-importer version, but because the times are lower, it's less obvious. CPU was sitting at around 95% (out of a total of 400% available) the entire time.\r\n\r\n```\r\nTook 430 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 5918 ms for lib/components/Spinner/Spinner.scss\r\nTook 9719 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 9735 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 12976 ms for lib/components/IconButton/IconButton.scss\r\nTook 13081 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 16249 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 16273 ms for lib/components/TextField/TextField.scss\r\nTook 20051 ms for lib/components/ListItem/ListItem.scss\r\nTook 19202 ms for lib/components/Photos/Photos.scss\r\nTook 270455 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\nTook 3999 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 4022 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 8159 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 8193 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 11526 ms for lib/components/Spinner/Spinner.scss\r\nTook 11545 ms for lib/components/IconButton/IconButton.scss\r\nTook 15196 ms for lib/components/ListItem/ListItem.scss\r\nTook 15216 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 19013 ms for lib/components/Photos/Photos.scss\r\nTook 19015 ms for lib/components/TextField/TextField.scss\r\nTook 233537 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\n```\r\n\r\nFinally, with the UV_THREADPOOL_SIZE set to 200, we do see a bunch of parallelization happening with the smaller files, but the big top level index of all components' scss still takes about the same amount of time.\r\n\r\n```\r\nTook 290 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 13724 ms for lib/components/Spinner/Spinner.scss\r\nTook 13752 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 13798 ms for lib/components/IconButton/IconButton.scss\r\nTook 13975 ms for lib/components/TextField/TextField.scss\r\nTook 14344 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 14343 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 13347 ms for lib/components/Photos/Photos.scss\r\nTook 14380 ms for lib/components/ListItem/ListItem.scss\r\nTook 16861 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 268432 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\nTook 26 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 11642 ms for lib/components/TextField/TextField.scss\r\nTook 11673 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 11715 ms for lib/components/Spinner/Spinner.scss\r\nTook 11920 ms for lib/components/IconButton/IconButton.scss\r\nTook 11950 ms for lib/components/ListItem/ListItem.scss\r\nTook 12097 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 12112 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 12144 ms for lib/components/Photos/Photos.scss\r\nTook 14632 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 245477 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\n```\r\n\r\n. > webpack's resolving engine is more powerful than node-sass' `includePaths`. For instance, you can also alias paths\r\n\r\nYou can make an aliases directory, symlink whatever you need into there, and add it to `includePaths`. Works great.\r\n\r\nThere is also another good reason to use each technology's native features, rather than something like webpack's resolver, that I recently ran into with TypeScript. There are various text editors that support things like code completion, display errors as you edit, let you jump to definition, etc. These tools typically don't know how to read webpack's config and tease out alias information, so as far as they are concerned, the import/require statements are broken and point to non-existing files. Much like sass, TypeScript happens to have its own system for managing aliases/includes, through a tsconf.json file, which most editors understand. So while webpack's goal of providing a resolving engine that works across the whole stack is admirable, it breaks other tooling.\r\n\r\nI think your argument would convince me in the case if webpack just worked, out of the box. But if for advanced use cases you need to dig into the code to get things working, it doesn't matter whether webpack provides advanced functionality, or whether you hack it yourself with symlinks or something \u2014\u00a0you spend the same amount of time. Now, I understand that your efforts are actually geared specifically at getting webpack to the point where everything just works out of the box. But I personally believe that this goal is impossible to achieve, because new versions of various technologies come out at about the same speed as it takes to polish off an out-of-the-box-working toolchain to support them. So by the time everything works great with webpack, there will be some new kid on the block, also as cool and must-switch-over-to, and as not-working-out-of-the-box for advanced use cases. This probably sounds cynical, but I've seen it happen enough times now to see a pattern. Though who knows, maybe we'll reach some kind of equilibrium point once a toolchain that satisfies most common use cases emerges.\r\n\r\nAnyway, sorry for rambling. It's a month since I finished the stack transition, and I got my momentum back, so now I can afford a few cycles here and there to at least give you metrics if you need them. So let me know if you need to test anything against my setup, whether the artificial one-big-file-with-many-imports, or the actual one that I use, where each components' .scss file is require'd at the top of the .ts file.. @evilebottnawi Is something blocked on me? Ever since I originally posted the question, I've been using my own hacked version with the webpack resolution disabled.. Thanks for taking a look, Johannes.\r\n\r\n> we should rather try to tackle the perf issues\r\n\r\nFair enough. The only thing I wanted was that if somebody faces this problem, my findings are shared and indexed in google. The last few weeks of working on converting a large project from a three-year-old grunt-based toolchain to a webpack one has taught me one thing \u2014\u00a0none of this stuff works like magic out of the box, at the end of the day, you have to dig inside node_modules to get it working. It was the same story with the typescript part of the toolchain \u2014 takes forever, no output to shed light onto what's happening, yet calling tsc on the command line builds the project in seconds. I'd love to be proven wrong, but until then, logging my findings for the next dev is the best I can hope for :)\r\n\r\n> should be resolved at the webpack level\r\n\r\nMy personal opinion (which, I realize, is worth little) is that too much magic is a bad thing. Sass has since inception supported an includePaths configuration option specifically to make imports more readable and flexible. From this perspective, webpack's resolution seems to add nothing in terms of functionality, though perhaps it does add something in terms of uniformity (that said, uniform opaqueness is not necessarily a good thing). I'm actually using importPaths specifically to be able to import scss files from other node_modules, having it set to `[\"src/styles\", \"node_modules\", \"node_modules/compass-mixins/lib\"]`\r\n\r\nAlso, importers are labelled as experimental in node-sass' documentation. Would it not make sense to make the use of an experimental feature optional, specifically because the upstream library labels it as a \"use with caution\" feature? I would personally go as far as making it disabled by default, and only enabled when a user knows that they explicitly want the feature.\r\n\r\n> maybe it's related to sass' complicated resolving algorithm involving underscore file names\r\n\r\nI don't think that's the case \u2014 disabling the webpack importer leaves sass' native underscore resolution intact, does it not?\r\n\r\n> directory structure\r\n\r\nWhen debugging, I had a single `.scss` file that was importing 130 or so individual components' `.scss` files (since then I've switched back to require'ing `.scss` files at the top of each react component's `.ts` file). Each of these would in turn import a `common_definitions.scss` file, which in turn imported 4 leaf files with a bunch of variable or mixin declarations, along with a `my-lib/styles/export_definitions.scss` file, which imports 3 leaf files, along with\r\n\r\n```\r\ncompass\r\ncompass/css3\r\ncompass/css3/images\r\n```\r\n\r\nThese are provided by the `compass-mixins` npm module, as a replacement for the original ruby-based compass library that I was originally using before starting the migration to webpack.\r\n\r\nThe compass directory has on the order of 50 files in it. So all in we're looking at around 60 imports per file, which presumably means 60 resolve calls for 130 files, or around 8000 calls. That would make it something like 300 ms per call, which I'm pretty sure isn't what's happening. Yesterday when debugging I was dumping timings for resolution calls, and most were in the low tens of milliseconds, though about one in twenty clocked in at low hundreds.\r\n\r\nLet me know if this is enough information for you to go off of. If not, and you think it's worth the time, I'll hack the loader to add some timers to give a more concrete picture. Or, if it's easier for you, you can give me a custom version of sass-loader with whatever instrumentation you want, and I'll send you the output data.. Apologies for the silence: after I finally finished the conversion work on my project, the pressure to work on user-facing features out-prioritized my feeble attempts at community involvement.\r\n\r\nTo be honest, I didn't even want to do this test when I saw the variable name, since it sounded like a poor quality sledgehammer approach to the problem. I still firmly believe that even if resolving the problem internally inside webpack is the philosophically correct thing to do, given that lib-sass has a working solution to accommodate aliasing via import paths, sass-loader should provide its users with an escape hatch in case they want one.\r\n\r\nEither way, I refactored my project a bit to get back to a setup about which I originally posted, one with a top level scss file that imports 133 component-specific scss files. There were some library-specific files that I didn't bother with, so they'll show up stand-alone in the output. I do not know why webpack builds the whole thing twice \u2014 I didn't even know that it does before I put the instrumentation in. Instrumentation is basically the following timer:\r\n\r\n```\r\n269     var startTime = new Date().getTime();\r\n270     asyncSassJobQueue.push(sassOptions, function onRender(err, result) {\r\n271         console.log(\"Took \" + (new Date().getTime() - startTime) + \" ms for \" + resourcePath);\r\n```\r\n\r\nHere's what the numbers look like (resourcePath stripped for ease of reading/privacy).\r\n\r\nFirst, with the importer disabled (which is how I run it normally).\r\n\r\n```\r\nTook 466 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 257 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 638 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 867 ms for lib/components/IconButton/IconButton.scss\r\nTook 1187 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 1210 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 1355 ms for lib/components/Spinner/Spinner.scss\r\nTook 1439 ms for lib/components/TextField/TextField.scss\r\nTook 1586 ms for lib/components/ListItem/ListItem.scss\r\nTook 4532 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\nTook 3095 ms for lib/components/Photos/Photos.scss\r\nTook 71 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 125 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 146 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 188 ms for lib/components/IconButton/IconButton.scss\r\nTook 221 ms for lib/components/Spinner/Spinner.scss\r\nTook 263 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 288 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 339 ms for lib/components/TextField/TextField.scss\r\nTook 379 ms for lib/components/Photos/Photos.scss\r\nTook 411 ms for lib/components/ListItem/ListItem.scss\r\nTook 1518 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\n```\r\n\r\nNext, with the latest sass-loader from npm. Even though the calls go through sass-loaders async functions, it looked as if something was serializing the calls along the way. Upon closer inspection, this seems to also be happening in the no-importer version, but because the times are lower, it's less obvious. CPU was sitting at around 95% (out of a total of 400% available) the entire time.\r\n\r\n```\r\nTook 430 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 5918 ms for lib/components/Spinner/Spinner.scss\r\nTook 9719 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 9735 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 12976 ms for lib/components/IconButton/IconButton.scss\r\nTook 13081 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 16249 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 16273 ms for lib/components/TextField/TextField.scss\r\nTook 20051 ms for lib/components/ListItem/ListItem.scss\r\nTook 19202 ms for lib/components/Photos/Photos.scss\r\nTook 270455 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\nTook 3999 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 4022 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 8159 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 8193 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 11526 ms for lib/components/Spinner/Spinner.scss\r\nTook 11545 ms for lib/components/IconButton/IconButton.scss\r\nTook 15196 ms for lib/components/ListItem/ListItem.scss\r\nTook 15216 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 19013 ms for lib/components/Photos/Photos.scss\r\nTook 19015 ms for lib/components/TextField/TextField.scss\r\nTook 233537 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\n```\r\n\r\nFinally, with the UV_THREADPOOL_SIZE set to 200, we do see a bunch of parallelization happening with the smaller files, but the big top level index of all components' scss still takes about the same amount of time.\r\n\r\n```\r\nTook 290 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 13724 ms for lib/components/Spinner/Spinner.scss\r\nTook 13752 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 13798 ms for lib/components/IconButton/IconButton.scss\r\nTook 13975 ms for lib/components/TextField/TextField.scss\r\nTook 14344 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 14343 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 13347 ms for lib/components/Photos/Photos.scss\r\nTook 14380 ms for lib/components/ListItem/ListItem.scss\r\nTook 16861 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 268432 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\nTook 26 ms for lib/components/ImageOrPlaceholder/ImageOrPlaceholder.scss\r\nTook 11642 ms for lib/components/TextField/TextField.scss\r\nTook 11673 ms for lib/components/CircularProgress/CircularProgress.scss\r\nTook 11715 ms for lib/components/Spinner/Spinner.scss\r\nTook 11920 ms for lib/components/IconButton/IconButton.scss\r\nTook 11950 ms for lib/components/ListItem/ListItem.scss\r\nTook 12097 ms for lib/components/TapCapture/TapCapture.scss\r\nTook 12112 ms for lib/components/FlatButton/FlatButton.scss\r\nTook 12144 ms for lib/components/Photos/Photos.scss\r\nTook 14632 ms for lib/components/RaisedButton/RaisedButton.scss\r\nTook 245477 ms for app/src/styles/top-level-everything-sass-loader-test.scss\r\n```\r\n\r\n. > webpack's resolving engine is more powerful than node-sass' `includePaths`. For instance, you can also alias paths\r\n\r\nYou can make an aliases directory, symlink whatever you need into there, and add it to `includePaths`. Works great.\r\n\r\nThere is also another good reason to use each technology's native features, rather than something like webpack's resolver, that I recently ran into with TypeScript. There are various text editors that support things like code completion, display errors as you edit, let you jump to definition, etc. These tools typically don't know how to read webpack's config and tease out alias information, so as far as they are concerned, the import/require statements are broken and point to non-existing files. Much like sass, TypeScript happens to have its own system for managing aliases/includes, through a tsconf.json file, which most editors understand. So while webpack's goal of providing a resolving engine that works across the whole stack is admirable, it breaks other tooling.\r\n\r\nI think your argument would convince me in the case if webpack just worked, out of the box. But if for advanced use cases you need to dig into the code to get things working, it doesn't matter whether webpack provides advanced functionality, or whether you hack it yourself with symlinks or something \u2014\u00a0you spend the same amount of time. Now, I understand that your efforts are actually geared specifically at getting webpack to the point where everything just works out of the box. But I personally believe that this goal is impossible to achieve, because new versions of various technologies come out at about the same speed as it takes to polish off an out-of-the-box-working toolchain to support them. So by the time everything works great with webpack, there will be some new kid on the block, also as cool and must-switch-over-to, and as not-working-out-of-the-box for advanced use cases. This probably sounds cynical, but I've seen it happen enough times now to see a pattern. Though who knows, maybe we'll reach some kind of equilibrium point once a toolchain that satisfies most common use cases emerges.\r\n\r\nAnyway, sorry for rambling. It's a month since I finished the stack transition, and I got my momentum back, so now I can afford a few cycles here and there to at least give you metrics if you need them. So let me know if you need to test anything against my setup, whether the artificial one-big-file-with-many-imports, or the actual one that I use, where each components' .scss file is require'd at the top of the .ts file.. @evilebottnawi Is something blocked on me? Ever since I originally posted the question, I've been using my own hacked version with the webpack resolution disabled.. ",
    "clydin": "Regardless of the performance concerns, there  is definite user need to allow standard sass resolution semantics instead of webpack specific resolution.\r\nThe feature I would prefer however would be more of a \"webpackResolution\" Boolean setting that would not add the webpack importer but still allow custom importers.. Regardless of the performance concerns, there  is definite user need to allow standard sass resolution semantics instead of webpack specific resolution.\r\nThe feature I would prefer however would be more of a \"webpackResolution\" Boolean setting that would not add the webpack importer but still allow custom importers.. ",
    "JimmyMultani": "I'm having this same issue. Any assistance in this matter would be greatly appreciated.\r\n\r\nHere's my config:\r\n\r\n```Javascript\r\ndevtool: (env === 'development') ? 'source-map' : false,\r\n...\r\n{\r\n  test: /\\.(sass|scss)$/,\r\n  include: path.join(__dirname, 'src/sass'),\r\n  loader: ExtractTextPlugin.extract({\r\n    fallbackLoader: 'style-loader',\r\n    loader: [\r\n      {\r\n        loader: 'css-loader',\r\n        query: {\r\n          minimize: (env === 'production'),\r\n          modules: true, // enables CSS Modules spec\r\n          sourceMap: (env === 'development'),\r\n          importLoaders: 2, // will import previous amount of loaders\r\n        },\r\n      },\r\n      'postcss-loader',\r\n      {\r\n        loader: 'sass-loader',\r\n        query: {\r\n          sourceMap: (env === 'development'),\r\n          sourceMapContents: (env === 'development'),\r\n        },\r\n      },\r\n    ],\r\n  }),\r\n},\r\n...\r\n```. I'm having this same issue. Any assistance in this matter would be greatly appreciated.\r\n\r\nHere's my config:\r\n\r\n```Javascript\r\ndevtool: (env === 'development') ? 'source-map' : false,\r\n...\r\n{\r\n  test: /\\.(sass|scss)$/,\r\n  include: path.join(__dirname, 'src/sass'),\r\n  loader: ExtractTextPlugin.extract({\r\n    fallbackLoader: 'style-loader',\r\n    loader: [\r\n      {\r\n        loader: 'css-loader',\r\n        query: {\r\n          minimize: (env === 'production'),\r\n          modules: true, // enables CSS Modules spec\r\n          sourceMap: (env === 'development'),\r\n          importLoaders: 2, // will import previous amount of loaders\r\n        },\r\n      },\r\n      'postcss-loader',\r\n      {\r\n        loader: 'sass-loader',\r\n        query: {\r\n          sourceMap: (env === 'development'),\r\n          sourceMapContents: (env === 'development'),\r\n        },\r\n      },\r\n    ],\r\n  }),\r\n},\r\n...\r\n```. ",
    "ssylvia": "@folmert This is the new syntax shown in Webpack 2 config file: https://webpack.js.org/configuration/.\r\n\r\nFWIW, I do get source maps to the compiled CSS file but not back to the original SCSS file. I tested without using the ExtractTextPlugin and have the same issue.. @folmert This is the new syntax shown in Webpack 2 config file: https://webpack.js.org/configuration/.\r\n\r\nFWIW, I do get source maps to the compiled CSS file but not back to the original SCSS file. I tested without using the ExtractTextPlugin and have the same issue.. ",
    "albohlabs": "Does somebody solved this issue for webpack2. . On [survivejs](http://survivejs.com/webpack/handling-styles/loading/#enabling-sourcemaps) the author advises to enable sourcemaps for every loader, which solved the issue for me.\r\n\r\n> If you have multiple loaders in a chain, you have to enable sourcemaps separately for each.. Do you also use the the css-loader?\r\nDo you have a reference to a sourcemap at the bottom of you compiled stylesheet?. Does somebody solved this issue for webpack2. . On [survivejs](http://survivejs.com/webpack/handling-styles/loading/#enabling-sourcemaps) the author advises to enable sourcemaps for every loader, which solved the issue for me.\r\n\r\n> If you have multiple loaders in a chain, you have to enable sourcemaps separately for each.. Do you also use the the css-loader?\r\nDo you have a reference to a sourcemap at the bottom of you compiled stylesheet?. ",
    "leyyinad": "Works for me using `LoaderOptionsPlugin` like this:\r\n\r\n    new webpack.LoaderOptionsPlugin({\r\n      options: {\r\n        context: '/', // <- putting this line right under \"options\" did the trick \r\n        postcss: [autoprefixer],\r\n        sassLoader: {\r\n          includePaths: [\r\n            resolve(join(baseDir, 'node_modules')),\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n. Works for me using `LoaderOptionsPlugin` like this:\r\n\r\n    new webpack.LoaderOptionsPlugin({\r\n      options: {\r\n        context: '/', // <- putting this line right under \"options\" did the trick \r\n        postcss: [autoprefixer],\r\n        sassLoader: {\r\n          includePaths: [\r\n            resolve(join(baseDir, 'node_modules')),\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n. ",
    "Mario-Eis": "+1 same issue here. Its configured directly for the sass loader. but no source maps are in the output. This is how i did it:\r\n```\r\n{\r\n    loader: 'sass-loader',\r\n    options: {\r\n       sourceMap: true\r\n    }\r\n}\r\n```. It seems to be working when using the ExtractTextPlugin. But not without. If used a loader directly.. +1 same issue here. Its configured directly for the sass loader. but no source maps are in the output. This is how i did it:\r\n```\r\n{\r\n    loader: 'sass-loader',\r\n    options: {\r\n       sourceMap: true\r\n    }\r\n}\r\n```. It seems to be working when using the ExtractTextPlugin. But not without. If used a loader directly.. ",
    "aeharding": "For me, I had to upgrade ExtractTextPlugin to the latest version (as of now, rc3).. For me, I had to upgrade ExtractTextPlugin to the latest version (as of now, rc3).. ",
    "Nexxado": "Same issue, none of the above suggested solutions worked for me.\r\n\r\n```javascript\r\n...\r\n{\r\n    test: /\\.scss$/,\r\n    exclude: [helpers.root('src', 'app')],\r\n    use: ExtractTextPlugin.extract({\r\n        fallback: 'style-loader',\r\n        use: [{\r\n            loader: 'css-loader',\r\n            query: {\r\n                modules: false,\r\n                sourceMap: true,\r\n                importLoaders: 2\r\n            }\r\n        }, {\r\n            loader: 'postcss-loader'\r\n        }, {\r\n            loader: 'sass-loader',\r\n            query: {\r\n                sourceMap: true,\r\n                sourceMapContents: true\r\n            }\r\n        }]\r\n    })\r\n},\r\n...\r\n```. @jhnns Thank you, rookie mistake, I've corrected my comment as well.\r\nthough the issue yet remains.. I tried reproducing the issue, but while using all the latest versions for `extract-text-webpack-plugin`, `sass-loader`, `webpack` etc, I was unable to reproduce it.\r\n\r\nI uploaded the [repo](https://github.com/Nexxado/sass-loader-issue-321) to github so others (@lxalln, @Grace951) can attempt to reproduce it as well.\r\n\r\nSo for me the issue is resolved,\r\nThank you @evilebottnawi.. Same issue, none of the above suggested solutions worked for me.\r\n\r\n```javascript\r\n...\r\n{\r\n    test: /\\.scss$/,\r\n    exclude: [helpers.root('src', 'app')],\r\n    use: ExtractTextPlugin.extract({\r\n        fallback: 'style-loader',\r\n        use: [{\r\n            loader: 'css-loader',\r\n            query: {\r\n                modules: false,\r\n                sourceMap: true,\r\n                importLoaders: 2\r\n            }\r\n        }, {\r\n            loader: 'postcss-loader'\r\n        }, {\r\n            loader: 'sass-loader',\r\n            query: {\r\n                sourceMap: true,\r\n                sourceMapContents: true\r\n            }\r\n        }]\r\n    })\r\n},\r\n...\r\n```. @jhnns Thank you, rookie mistake, I've corrected my comment as well.\r\nthough the issue yet remains.. I tried reproducing the issue, but while using all the latest versions for `extract-text-webpack-plugin`, `sass-loader`, `webpack` etc, I was unable to reproduce it.\r\n\r\nI uploaded the [repo](https://github.com/Nexxado/sass-loader-issue-321) to github so others (@lxalln, @Grace951) can attempt to reproduce it as well.\r\n\r\nSo for me the issue is resolved,\r\nThank you @evilebottnawi.. ",
    "gaiaz-iusipov": "Any progress on this?. Any progress on this?. ",
    "stevegibbings": "@aeharding could you provide your webpack config? Anyone using Bootstrap 4? I only get invalid entries in the sourcemap from Bootstrap scss I import.\r\n\r\n```\r\n/Users/steve.gibbings/WebstormProjects/wcp-core/wordpress/themes/node_modules/webpack-sources/node_modules/source-map/lib/source-map-generator.js:277\r\n      throw new Error('Invalid mapping: ' + JSON.stringify({\r\n      ^\r\n\r\nError: Invalid mapping: {\"generated\":{\"line\":1,\"column\":2788},\"source\":\"webpack:///src/node_modules/bootstrap/scss/mixins/_hover.scss\",\"original\":{\"line\":21,\"column\":-1},\"name\":null}\r\n```\r\n\r\n```\r\n/**\r\n * Created by steve.gibbings on 11/03/2016.\r\n */\r\n\r\n// What's the environment Kenneth? https://www.youtube.com/watch?v=jWkMhCLkVOg\r\n// Use the supported browser list defined in im-fabric.\r\nprocess.env.BROWSERSLIST_CONFIG = '.browserslist';\r\nconst ENV = process.env.NODE_ENV || 'production';\r\nconst isDevBuild = ENV === 'dev' || ENV === 'testing';\r\nconst isProdBuild = ENV === 'production';\r\n\r\nconsole.log(`${ENV} : Building ${isDevBuild ? 'dev' : isProdBuild ? 'production' : 'unknown'}`);\r\n\r\nconst path = require('path');\r\nconst webpack = require('webpack');\r\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\nconst extractCSS = new ExtractTextPlugin(\r\n  !isDevBuild ? './css/[name]-[contenthash].css' : './css/[name].css'\r\n);\r\n\r\nmodule.exports = {\r\n  entry: {\r\n    main: [\r\n      'modernizr',\r\n      'js/polyfills/polyfills',\r\n      'js/entry',\r\n    ],\r\n    style: [\r\n      'scss/style.scss',\r\n    ],\r\n  },\r\n  output: {\r\n    path: path.join(__dirname, 'dist'),\r\n    filename: !isDevBuild ? './js/[name]-[chunkhash].js' : '[name].js',\r\n  },\r\n  resolve: {\r\n    modules: [\r\n      path.resolve(__dirname, 'src'),\r\n      'node_modules'\r\n    ],\r\n    alias: {\r\n      modernizr$: path.resolve(__dirname, \".modernizrrc\"),\r\n    },\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        use: [\r\n          'babel-loader',\r\n          'eslint-loader',\r\n        ],\r\n        include: [\r\n          path.resolve(__dirname, 'src/js'),\r\n          path.resolve(__dirname, 'tests/js'),\r\n        ],\r\n        exclude: [\r\n          /(node_modules)/,\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.scss$/,\r\n        use: extractCSS.extract({\r\n          fallback: 'style-loader',\r\n          use: [\r\n            {\r\n              loader: 'css-loader',\r\n              options: {\r\n                sourceMap: true,\r\n                autoprefixer: {\r\n                  add: true,\r\n                  cascade: false,\r\n                },\r\n              },\r\n            },\r\n            {\r\n              loader: 'sass-loader',\r\n              options: {\r\n                includePaths: [\r\n                  path.resolve(__dirname, 'src/scss'),\r\n                ],\r\n                sourceMap: true,\r\n              },\r\n            },\r\n          ],\r\n        }),\r\n      },\r\n      {\r\n        test: /\\.(jpe?g|png|gif|svg)$/i,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: '[path][name]-[hash].[ext]',\r\n              context: './src/images',\r\n              outputPath: 'images/',\r\n              publicPath: '../images/'\r\n            },\r\n          },\r\n          {\r\n            loader: 'image-webpack-loader',\r\n            options: {\r\n              bypassOnDebug: true,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        test: /\\.modernizrrc.js$/,\r\n        use: \"modernizr-loader\"\r\n      },\r\n      {\r\n        test: /\\.modernizrrc(\\.json)?$/,\r\n        loader: \"modernizr-loader!json-loader\"\r\n      }\r\n    ],\r\n  },\r\n  plugins: [\r\n    // Clean the dist build folder\r\n    new CleanWebpackPlugin(['dist/js', 'dist/css']),\r\n    // Extract CSS\r\n    extractCSS,\r\n    // Avoid publishing files when compilation fails\r\n    new webpack.NoEmitOnErrorsPlugin(),\r\n    // new webpack.optimize.CommonsChunkPlugin('common.chunk.js'),\r\n    new webpack.DefinePlugin({\r\n      'process.env': {\r\n        'ENV': JSON.stringify(ENV),\r\n        'BROWSERSLIST_CONFIG': '.browserslist',\r\n      }\r\n    }),\r\n    !isDevBuild ? new webpack.optimize.UglifyJsPlugin({\r\n      sourceMap: true,\r\n    }) : null,\r\n    !isDevBuild ? new webpack.LoaderOptionsPlugin({\r\n      minimize: true,\r\n      debug: false,\r\n    }) : null,\r\n  ].filter(plugin => plugin !== null),\r\n  stats: {\r\n    // Nice colored output\r\n    colors: true,\r\n  },\r\n  // Create Sourcemaps for the bundle\r\n  devtool: 'source-map',\r\n  watch: isDevBuild,\r\n};\r\n```. @aeharding could you provide your webpack config? Anyone using Bootstrap 4? I only get invalid entries in the sourcemap from Bootstrap scss I import.\r\n\r\n```\r\n/Users/steve.gibbings/WebstormProjects/wcp-core/wordpress/themes/node_modules/webpack-sources/node_modules/source-map/lib/source-map-generator.js:277\r\n      throw new Error('Invalid mapping: ' + JSON.stringify({\r\n      ^\r\n\r\nError: Invalid mapping: {\"generated\":{\"line\":1,\"column\":2788},\"source\":\"webpack:///src/node_modules/bootstrap/scss/mixins/_hover.scss\",\"original\":{\"line\":21,\"column\":-1},\"name\":null}\r\n```\r\n\r\n```\r\n/**\r\n * Created by steve.gibbings on 11/03/2016.\r\n */\r\n\r\n// What's the environment Kenneth? https://www.youtube.com/watch?v=jWkMhCLkVOg\r\n// Use the supported browser list defined in im-fabric.\r\nprocess.env.BROWSERSLIST_CONFIG = '.browserslist';\r\nconst ENV = process.env.NODE_ENV || 'production';\r\nconst isDevBuild = ENV === 'dev' || ENV === 'testing';\r\nconst isProdBuild = ENV === 'production';\r\n\r\nconsole.log(`${ENV} : Building ${isDevBuild ? 'dev' : isProdBuild ? 'production' : 'unknown'}`);\r\n\r\nconst path = require('path');\r\nconst webpack = require('webpack');\r\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\nconst extractCSS = new ExtractTextPlugin(\r\n  !isDevBuild ? './css/[name]-[contenthash].css' : './css/[name].css'\r\n);\r\n\r\nmodule.exports = {\r\n  entry: {\r\n    main: [\r\n      'modernizr',\r\n      'js/polyfills/polyfills',\r\n      'js/entry',\r\n    ],\r\n    style: [\r\n      'scss/style.scss',\r\n    ],\r\n  },\r\n  output: {\r\n    path: path.join(__dirname, 'dist'),\r\n    filename: !isDevBuild ? './js/[name]-[chunkhash].js' : '[name].js',\r\n  },\r\n  resolve: {\r\n    modules: [\r\n      path.resolve(__dirname, 'src'),\r\n      'node_modules'\r\n    ],\r\n    alias: {\r\n      modernizr$: path.resolve(__dirname, \".modernizrrc\"),\r\n    },\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        use: [\r\n          'babel-loader',\r\n          'eslint-loader',\r\n        ],\r\n        include: [\r\n          path.resolve(__dirname, 'src/js'),\r\n          path.resolve(__dirname, 'tests/js'),\r\n        ],\r\n        exclude: [\r\n          /(node_modules)/,\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.scss$/,\r\n        use: extractCSS.extract({\r\n          fallback: 'style-loader',\r\n          use: [\r\n            {\r\n              loader: 'css-loader',\r\n              options: {\r\n                sourceMap: true,\r\n                autoprefixer: {\r\n                  add: true,\r\n                  cascade: false,\r\n                },\r\n              },\r\n            },\r\n            {\r\n              loader: 'sass-loader',\r\n              options: {\r\n                includePaths: [\r\n                  path.resolve(__dirname, 'src/scss'),\r\n                ],\r\n                sourceMap: true,\r\n              },\r\n            },\r\n          ],\r\n        }),\r\n      },\r\n      {\r\n        test: /\\.(jpe?g|png|gif|svg)$/i,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: '[path][name]-[hash].[ext]',\r\n              context: './src/images',\r\n              outputPath: 'images/',\r\n              publicPath: '../images/'\r\n            },\r\n          },\r\n          {\r\n            loader: 'image-webpack-loader',\r\n            options: {\r\n              bypassOnDebug: true,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        test: /\\.modernizrrc.js$/,\r\n        use: \"modernizr-loader\"\r\n      },\r\n      {\r\n        test: /\\.modernizrrc(\\.json)?$/,\r\n        loader: \"modernizr-loader!json-loader\"\r\n      }\r\n    ],\r\n  },\r\n  plugins: [\r\n    // Clean the dist build folder\r\n    new CleanWebpackPlugin(['dist/js', 'dist/css']),\r\n    // Extract CSS\r\n    extractCSS,\r\n    // Avoid publishing files when compilation fails\r\n    new webpack.NoEmitOnErrorsPlugin(),\r\n    // new webpack.optimize.CommonsChunkPlugin('common.chunk.js'),\r\n    new webpack.DefinePlugin({\r\n      'process.env': {\r\n        'ENV': JSON.stringify(ENV),\r\n        'BROWSERSLIST_CONFIG': '.browserslist',\r\n      }\r\n    }),\r\n    !isDevBuild ? new webpack.optimize.UglifyJsPlugin({\r\n      sourceMap: true,\r\n    }) : null,\r\n    !isDevBuild ? new webpack.LoaderOptionsPlugin({\r\n      minimize: true,\r\n      debug: false,\r\n    }) : null,\r\n  ].filter(plugin => plugin !== null),\r\n  stats: {\r\n    // Nice colored output\r\n    colors: true,\r\n  },\r\n  // Create Sourcemaps for the bundle\r\n  devtool: 'source-map',\r\n  watch: isDevBuild,\r\n};\r\n```. ",
    "antoniojunyor": "Try this: `devtool: 'inline-source-map'`. Try this: `devtool: 'inline-source-map'`. ",
    "hvalcourtSerdy": "For the \"throw new Error('Invalid mapping: ' + JSON.stringify\", it appears this may be related to https://github.com/sass/libsass/issues/2312. For the \"throw new Error('Invalid mapping: ' + JSON.stringify\", it appears this may be related to https://github.com/sass/libsass/issues/2312. ",
    "Nnxoxo": "I faced the same problem, but after reading this part of the post-css docs, I figured everything out...\r\nhttps://github.com/postcss/postcss-loader#sourcemap\r\n```js\r\nuse: [\r\n    {\r\n         loader: 'css-loader',\r\n         options: { sourceMap: true, importLoaders: true, }\r\n    },\r\n    {\r\n        loader: 'postcss-loader',\r\n        options: { \r\n             sourceMap: 'inline', \r\n             plugins: function() { \r\n                  return [ require('autoprefixer') ] \r\n             } \r\n        }\r\n    },\r\n    {\r\n         loader: 'sass-loader',\r\n         options: { sourceMap: true }\r\n     },\r\n],\r\n```\r\n. I faced the same problem, but after reading this part of the post-css docs, I figured everything out...\r\nhttps://github.com/postcss/postcss-loader#sourcemap\r\n```js\r\nuse: [\r\n    {\r\n         loader: 'css-loader',\r\n         options: { sourceMap: true, importLoaders: true, }\r\n    },\r\n    {\r\n        loader: 'postcss-loader',\r\n        options: { \r\n             sourceMap: 'inline', \r\n             plugins: function() { \r\n                  return [ require('autoprefixer') ] \r\n             } \r\n        }\r\n    },\r\n    {\r\n         loader: 'sass-loader',\r\n         options: { sourceMap: true }\r\n     },\r\n],\r\n```\r\n. ",
    "kang-chen": "I'm using `\"webpack\": \"^3.0.0\"`\r\n\r\nWebpack config devtool: `devtool: 'source-map'`\r\n\r\nThis is a working config without postCSS:\r\n\r\n```\r\n      {\r\n        test: /\\.scss$/,\r\n        loader: ExtractTextPlugin.extract({\r\n          fallback: 'style-loader',\r\n          use:  [\r\n            {\r\n              loader: 'css-loader',\r\n              options: {\r\n                sourceMap: true,\r\n                modules: true,\r\n                importLoaders: 1,\r\n                localIdentName: '[name]-[local]___[hash:base64:5]'\r\n              }\r\n            },\r\n            { loader: 'sass-loader', options: { sourceMap: true } }\r\n          ]\r\n        })\r\n      }\r\n```\r\nFound [here](https://stackoverflow.com/questions/42876604/configuring-css-modules-in-development-production-with-webpack-and-react). @evilebottnawi thanks for the recommendation, corrected with `test: /\\.scss$/`. I'm using `\"webpack\": \"^3.0.0\"`\r\n\r\nWebpack config devtool: `devtool: 'source-map'`\r\n\r\nThis is a working config without postCSS:\r\n\r\n```\r\n      {\r\n        test: /\\.scss$/,\r\n        loader: ExtractTextPlugin.extract({\r\n          fallback: 'style-loader',\r\n          use:  [\r\n            {\r\n              loader: 'css-loader',\r\n              options: {\r\n                sourceMap: true,\r\n                modules: true,\r\n                importLoaders: 1,\r\n                localIdentName: '[name]-[local]___[hash:base64:5]'\r\n              }\r\n            },\r\n            { loader: 'sass-loader', options: { sourceMap: true } }\r\n          ]\r\n        })\r\n      }\r\n```\r\nFound [here](https://stackoverflow.com/questions/42876604/configuring-css-modules-in-development-production-with-webpack-and-react). @evilebottnawi thanks for the recommendation, corrected with `test: /\\.scss$/`. ",
    "clintonb": "@jhnns @jtangelder please review. @jhnns done. @jhnns @jtangelder please review. @jhnns done. ",
    "niksy": "If you use `null`, from recent versions of node-sass it actually doesn\u2019t need it, but if you\u2019re using Sass types like numbers or strings as return values, you need those Sass types.\r\n\r\nI\u2019ve made a PR for this.. Hmmm, I guess you\u2019re right. I guess I thought node-sass is dependancy.. @evilebottnawi I think this can be closed, requiring `node-sass` in project is sufficient I suppose.. If you use `null`, from recent versions of node-sass it actually doesn\u2019t need it, but if you\u2019re using Sass types like numbers or strings as return values, you need those Sass types.\r\n\r\nI\u2019ve made a PR for this.. Hmmm, I guess you\u2019re right. I guess I thought node-sass is dependancy.. @evilebottnawi I think this can be closed, requiring `node-sass` in project is sufficient I suppose.. ",
    "deiga": "Ah, yes. My problem seems to be the monolithic entry. Is there any point in splitting one entry into multiple files or should I try and actually build multiple entries?. Ah, yes. My problem seems to be the monolithic entry. Is there any point in splitting one entry into multiple files or should I try and actually build multiple entries?. ",
    "also": "\ud83d\udc4d \r\n\r\nIt seems kind of weird to make the entries in `sources` relative to `context` but use a different path for `sourceRoot`.\r\n\r\nThe existing behavior means the result of sass-loader needs to be fixed before you can rely on its source maps. I have this loader which I run immediately after sass-loader to work around this issue:\r\n\r\n```javascript\r\nconst path = require('path');\r\n\r\n/** make sass sources absolute because nothing resolves the result against the sourceRoot...\r\n * https://github.com/jtangelder/sass-loader/pull/250\r\n * https://github.com/bholloway/resolve-url-loader/pull/23\r\n */\r\nmodule.exports = function(source, sourceMap) {\r\n  this.cacheable();\r\n\r\n  // sass-loader changed the root of the relative paths in 4.0.0 and added sourceRoot\r\n  const root = sourceMap.sourceRoot != null ? this.options.context : this.options.output.path;\r\n\r\n  this.callback(null, source, Object.assign({}, sourceMap, {\r\n    sources: sourceMap.sources.map((s) => path.join(root, s)),\r\n    sourceRoot: null\r\n  }));\r\n};\r\n```. \ud83d\udc4d \r\n\r\nIt seems kind of weird to make the entries in `sources` relative to `context` but use a different path for `sourceRoot`.\r\n\r\nThe existing behavior means the result of sass-loader needs to be fixed before you can rely on its source maps. I have this loader which I run immediately after sass-loader to work around this issue:\r\n\r\n```javascript\r\nconst path = require('path');\r\n\r\n/** make sass sources absolute because nothing resolves the result against the sourceRoot...\r\n * https://github.com/jtangelder/sass-loader/pull/250\r\n * https://github.com/bholloway/resolve-url-loader/pull/23\r\n */\r\nmodule.exports = function(source, sourceMap) {\r\n  this.cacheable();\r\n\r\n  // sass-loader changed the root of the relative paths in 4.0.0 and added sourceRoot\r\n  const root = sourceMap.sourceRoot != null ? this.options.context : this.options.output.path;\r\n\r\n  this.callback(null, source, Object.assign({}, sourceMap, {\r\n    sources: sourceMap.sources.map((s) => path.join(root, s)),\r\n    sourceRoot: null\r\n  }));\r\n};\r\n```. ",
    "dadooda": "Hey man, config suggestion `loaders: [\"style-loader\", \"css-loader\", \"sass-loader\"]` failed in my setup.\r\n\r\nAdded a commented other variant which worked for me and may well work for the others.\r\n\r\nwebpack@1.13.3\r\n\r\nCheers!. Why not at least mention it as a side note or something? Basically this Webpack version wasn't particularly my choice, I was tweaking a copy of another guy's open source project.. Hey man, config suggestion `loaders: [\"style-loader\", \"css-loader\", \"sass-loader\"]` failed in my setup.\r\n\r\nAdded a commented other variant which worked for me and may well work for the others.\r\n\r\nwebpack@1.13.3\r\n\r\nCheers!. Why not at least mention it as a side note or something? Basically this Webpack version wasn't particularly my choice, I was tweaking a copy of another guy's open source project.. ",
    "callumacrae": "```scss\r\n/**\r\n* a comment\r\n*/\r\n\r\n$icon-font-path: \"~bootstrap-sass/assets/fonts/bootstrap/\";\r\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap/_print.scss\";\r\n@import \"~bootstrap/dist/css/bootstrap.min.css\";\r\n```\r\n\r\noutput:\r\n\r\n```\r\nbootstrap\r\n/**\r\n* a comment\r\n*/\r\nbootstrap-sass\r\n```\r\n\r\nDefinitely an issue, probably not in sass-loader.. Yeah it was user error - it was one of my Vue modules being required first and adding bootstrap again. Wasn't a problem in this.. ```scss\r\n/**\r\n* a comment\r\n*/\r\n\r\n$icon-font-path: \"~bootstrap-sass/assets/fonts/bootstrap/\";\r\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap/_print.scss\";\r\n@import \"~bootstrap/dist/css/bootstrap.min.css\";\r\n```\r\n\r\noutput:\r\n\r\n```\r\nbootstrap\r\n/**\r\n* a comment\r\n*/\r\nbootstrap-sass\r\n```\r\n\r\nDefinitely an issue, probably not in sass-loader.. Yeah it was user error - it was one of my Vue modules being required first and adding bootstrap again. Wasn't a problem in this.. ",
    "jgornick": "@callumacrae Did you ever solve why the order is not right?\r\n\r\nAs far as I can tell it has to do with the style-loader and the way in which it inserts CSS into the header. However, I think that due to the nature of lazy loading imports, there's really not a good way to specify an order.\r\n\r\nhttps://github.com/webpack-contrib/style-loader/issues/17\r\n. @callumacrae Did you ever solve why the order is not right?\r\n\r\nAs far as I can tell it has to do with the style-loader and the way in which it inserts CSS into the header. However, I think that due to the nature of lazy loading imports, there's really not a good way to specify an order.\r\n\r\nhttps://github.com/webpack-contrib/style-loader/issues/17\r\n. ",
    "mattlewis92": "Nice one, thanks! \ud83d\ude00\n\n> On 14 Dec 2016, at 18:13, Johannes Ewald <notifications@github.com> wrote:\n> \n> Thx. Shipped with 4.1.0\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n. I think that `^2 || ^2.2.0-rc.0 || ^2.1.0-beta || ^1.12.6` might be even better, as this is the convention the webpack loaders / plugins on the webpack org seem to be doing.. @jtangelder there's a couple examples here as well:\r\nhttps://github.com/webpack/karma-webpack/blob/master/package.json#L73\r\nhttps://github.com/webpack/webpack-dev-server/blob/master/package.json#L7. LGTM!. Nice one, thanks! \ud83d\ude00\n\n> On 14 Dec 2016, at 18:13, Johannes Ewald <notifications@github.com> wrote:\n> \n> Thx. Shipped with 4.1.0\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n. I think that `^2 || ^2.2.0-rc.0 || ^2.1.0-beta || ^1.12.6` might be even better, as this is the convention the webpack loaders / plugins on the webpack org seem to be doing.. @jtangelder there's a couple examples here as well:\r\nhttps://github.com/webpack/karma-webpack/blob/master/package.json#L73\r\nhttps://github.com/webpack/webpack-dev-server/blob/master/package.json#L7. LGTM!. ",
    "tonyseek": "Unfortunely the node-sass 4.0 is not a backward compatible release as it declared :-(\r\n\r\n- https://github.com/sass/node-sass/issues/1831\r\n- https://github.com/sass/libsass/issues/2245. Unfortunely the node-sass 4.0 is not a backward compatible release as it declared :-(\r\n\r\n- https://github.com/sass/node-sass/issues/1831\r\n- https://github.com/sass/libsass/issues/2245. ",
    "shishir-srivastava": "I'm facing the same issue. \r\nI was able to get around it by installing version 3.4.2 of node-sass, like so:\r\n`npm install node-sass@3.4.2 --save-dev`\r\n\r\nI'm not sure if the installation was done properly. Here's a paste of the output I saw:\r\n[npm install output](http://pastebin.com/w7FD5bgH)\r\n\r\nI'll test the installation later today to check if it's working smoothly.. I'm facing the same issue. \r\nI was able to get around it by installing version 3.4.2 of node-sass, like so:\r\n`npm install node-sass@3.4.2 --save-dev`\r\n\r\nI'm not sure if the installation was done properly. Here's a paste of the output I saw:\r\n[npm install output](http://pastebin.com/w7FD5bgH)\r\n\r\nI'll test the installation later today to check if it's working smoothly.. ",
    "jbruni": "Yep.\r\n\r\nI have these current latest in my  `package.json`:\r\n\r\n```\r\n    \"gulp-sass\": \"^3.0.0\",\r\n    \"node-sass\": \"^4.0.0\",\r\n    \"sass-loader\": \"^4.0.2\"\r\n```\r\n\r\nUsing Yarn I got `warning Incorrect peer dependency \"node-sass@^3.4.2\".`. Yep.\r\n\r\nI have these current latest in my  `package.json`:\r\n\r\n```\r\n    \"gulp-sass\": \"^3.0.0\",\r\n    \"node-sass\": \"^4.0.0\",\r\n    \"sass-loader\": \"^4.0.2\"\r\n```\r\n\r\nUsing Yarn I got `warning Incorrect peer dependency \"node-sass@^3.4.2\".`. ",
    "shai32": "same problem. same problem. ",
    "cakeinpanic": "Moreover it fails on mac if node-sass 4.0.0 is installed in project by itself\r\nand i've got glorious\r\n`Fatal error: undefined is not a function`\r\nfrom webpack \r\n\r\nplease add node-sass as a dependency\r\n\r\n---\r\nupd: the problem was caused by grunt-sass, not sass-loader\r\n. Moreover it fails on mac if node-sass 4.0.0 is installed in project by itself\r\nand i've got glorious\r\n`Fatal error: undefined is not a function`\r\nfrom webpack \r\n\r\nplease add node-sass as a dependency\r\n\r\n---\r\nupd: the problem was caused by grunt-sass, not sass-loader\r\n. ",
    "skyrpex": "Related PR: https://github.com/jtangelder/sass-loader/pull/319. Related PR: https://github.com/jtangelder/sass-loader/pull/319. ",
    "Grace951": "I have the issue, too.. I have the issue, too.. ",
    "lxalln": "We are also seeing this problem. Completely wrong file and wrong line number.. We are also seeing this problem. Completely wrong file and wrong line number.. ",
    "kmontag": "@harounb I believe between pre-release versions, `^` treats minor version bumps as it would normally treat major ones.. @harounb I believe between pre-release versions, `^` treats minor version bumps as it would normally treat major ones.. ",
    "graingert": "@jtangelder can we get this merged?. @jtangelder I'd just copy babel-loader: https://github.com/babel/babel-loader/blob/master/package.json#L17. @Llorx duplicate of https://github.com/jtangelder/sass-loader/pull/323. niice. @evilebottnawi you can do [`npm install sass`](https://www.npmjs.com/package/sass) https://github.com/sass/dart-sass#from-npm . @evilebottnawi saves waiting for the compile step on npm install\r\n\r\nAlso it's the future of sass: http://sass.logdown.com/posts/1022316-announcing-dart-sass. @jtangelder can we get this merged?. @jtangelder I'd just copy babel-loader: https://github.com/babel/babel-loader/blob/master/package.json#L17. @Llorx duplicate of https://github.com/jtangelder/sass-loader/pull/323. niice. @evilebottnawi you can do [`npm install sass`](https://www.npmjs.com/package/sass) https://github.com/sass/dart-sass#from-npm . @evilebottnawi saves waiting for the compile step on npm install\r\n\r\nAlso it's the future of sass: http://sass.logdown.com/posts/1022316-announcing-dart-sass. ",
    "harounb": "@jtangelder No problem and great job :)\r\nApologies for vanishing after submitting this. . @jtangelder No problem and great job :)\r\nApologies for vanishing after submitting this. . ",
    "michael-ciniawsky": "@markbrown4 Feel free to reopen if still any problems. https://github.com/webpack-contrib/sass-loader/blob/master/lib/normalizeOptions.js#L27-L29\r\n\r\nMaybe ditch `loaderContext.minimize` . Does `compress` anything special in terms of SASS 'minification'?  I wonder why this is actually needed at all,  since `minimize`  in `css-loader` will minify the CSS anyways :). \ud83d\ude06 I wanted to post exactly this link right now :). Hmm... doesn't `cssnano` (`css-loader`) handle colors aswell (not sure) ? . If `webpack -p || webpack --optimize-minimize` is used css-loader's `loaderContext.minimize` will run `cssnano` :), `sass-loader` can't be used standalone atm. If folks want to use `compressed` mode, set `options.outputStyle` explicitly ?. @rhys-vdw Should be https://gitter.im/webpack/webpack instead, mind spinning up a quick PR ? \ud83d\ude1b . https://github.com/webpack-contrib/css-loader/pull/532. > The sass-loader requires node-sass and webpack as peerDependency. Thus you are able to control the versions accurately.\r\n\r\n@flimshaw If it isn't referenced as a peerDependency in `package.json` please add  it as such instead . Since `node-sass` (libsass) is a Node Native Module, it's better to leave it as a `peerDependency` for now (reconsider maybe, when N-API is a thing) so everyone can specify the version he/she needs/works. Thx \ud83d\ude1b . Agreeing with @evilebottnawi here, `dart-sass` is still under 'heavy' development and doesn't cover the whole SASS spec yet. @bebraw @d3viant0ne Does one of you have acces here? \ud83d\ude1b  It's seems @jhnns is busy atm. @avivshafir Can you please provide a bit more context, the fix here is a semver patch && node-sass is should normally be a `peerDependency` you as the user control the version. But I'm not \ud83d\udcaf sure I understood the `node-sass` part correctly \ud83d\ude1b . We have npm access problems atm (no one reachable) \ud83d\ude05 , but maybe we need another fix anyways \ud83d\ude1b . @avivshafir Does `v6.0.5` pulled from `master` `npm i -D webpack-contrib/sass-loader` fix the issue for you, could/did you test it ? \ud83d\ude43 . @avivshafir Thx appreciated. #450 . @someok @Maxouhell [v6.0.5](https://github.com/webpack-contrib/sass-loader/releases/tag/v6.0.5). Sry that's the responsibility of one of the core members, I will try to ping one in slack, tbh I thought it's up already with a release tagged \u00af\\_(\u30c4)_/\u00af. cc @jtangelder @akiran . @dwjft `sass-loader` version (`@latest`) ?. @Stephen2 https://github.com/webpack-contrib/css-loader/pull/532 \r\n\r\n\u26a0\ufe0f If you use `{ loader: 'postcss-loader', options: { sourceMap: 'inline' } }` the source map is inlined in the CSS as an annotation comment by `postcss-loader`, therefore `css-loader` doesn't have any effect on the map anymore. `{ loader: 'style-loader', options: { sourceMap: true } }` \r\n\r\nIt's on `master` (`css-loader`) now and a release should be underway, yes it's a known issue if you have a few minutes, you could try if it works for you by `npm i -D webpack-contrib/css-loader`\r\n\r\nFeedback would be appreciated \ud83d\ude1b . > remove postcss loader = paths good!\r\n\r\nJust to clearify, you mean with `sass-loader` applied? (`style-loader!css-loader!sass-loader`) \ud83d\ude1b \r\n\r\n> Don't know if that helps or has just confused everything...\r\n\r\nNo no the opposite \ud83d\ude43 , it's appreciated, could you post some info on what is off, when `postcss-loader` is used, so I can fix it there :). I see now, likely need to remove the `path.resolve()` part in `postcss-loader` I added in `v2.0.0` \ud83d\ude05. Thx I close the issue here and fix it in `postcss-loader` as soon as possible. @katzz0 The relevant lines are [here](https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L149-L152), could you comment them out in your local version of `postcss-loader` (`node_modules`) and please confirm that source map(pings) are still working correctly ?  I added these lines as it's recommended to have provide absolute paths to webpack for correct source mappings. `loader` => `use` in `config.rules[i]`\r\n`fallbackLoader`=> `fallback` && `loader` => `use` in `ExtractTextPlugin`\r\n\r\nThe CSS file should be emitted into your `output` directory, specified in `config.output` and you need to add a `<link rel=\"stylesheet\" href=\"extracted.css\">` yourself or maybe `HTMLPlugin` supports that via options or plugin hook (No idea, I don't use it \ud83d\ude1b ). \r\n\r\nClosing as unrelated to `sass-loader`. `config.output` ===\r\n**webpack.config.js**\r\n```js\r\nconst config = {\r\n  ...\r\n  output: {\r\n    path:  path.resolve.(__dirname, 'dist'),\r\n    filename: '[name].js'\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\nMaybe\r\n\r\n```\r\n{\r\n  test: /\\.scss$/\r\n  use: ExtractTextPlugin.extract({\r\n    fallback: 'style-loader',\r\n    use: [ { loader: 'css-loader', options: { importLoaders: 1 } }, 'sass-loader' ]\r\n  })\r\n}\r\n\r\n[\r\n  new ExtractTextPlugin({ \r\n    filename: '[name].js', // dist/${name}.js\r\n    allChunks: true // add this line\r\n  })\r\n]\r\n```\r\n\r\nPlease update the config syntax as stated above and what exactly is not working ? \r\nDo you get a CSS file ? \r\nDo you get an Error ?. ```diff\r\nnew webpack.optimize.CommonsChunkPlugin({\r\n-     name: ['app', 'vendor', 'polyfills']\r\n+     name: [ 'vendor', 'polyfills', 'runtime'  /* don't add this to entry, it will spilt the webpack runtime from app.js */ ],\r\n+     minChunks: Infinity\r\n    })\r\n]\r\n```\r\n\r\n`app` is **not** a `Common Chunk` like a lib, which is likely `imported` multiple times. `app.ts` => `bundle.js`\r\n\r\nIn regard to your CSS issue, try without `include/exclude` and see if you at least get a file emitted, also update your dependencies in `package.json` many of them are outdated. If it still doesn't work please open an issue in angular/angular-cli. See https://github.com/webpack-contrib/style-loader/issues/239. This seems to be resolved, closing for now, but feel free to reopen if still regressions related to `sass-loader` :). Besides the `includePaths` workaround there is no (clean) way to fix that atm, it would require `node-sass` to expose a hook to rewrite the `@import` paths before importing the contents\r\n\r\nhttps://www.npmjs.com/package/sass-graph\r\n\r\nhttps://www.npmjs.com/package/sass-module-importer\r\nhttps://www.npmjs.com/package/node-sass-package-importer\r\n\r\nOr writing our own :)\r\n. https://github.com/sass/node-sass#importer--v200---experimental. It will require changes to `sass-loader` I would say, for the webpack glue (pre-resolving). What do you exactly mean by _fix_ ? \ud83d\ude1b . If possible we should do it :), I'm not _too_ familiar with `sass-loader` internals and need to take a look myself first, if you have something in mind just propose it \ud83d\ude1b . It doesn't work at all or does it just displays a warning for an unmet `peerDependency`?. fix or better feature ? :). https://github.com/webpack-contrib/sass-loader#examples. @baunegaard Your issue is that `webpack.config.js` isn't in `<Project Root>` so  `process.cwd()` will resolve to `<Project Root>/Assets/path/to/webpack.config.js` which is appended internally by webpack, could you try by temporarily moving `webpack.config.js` in `<Project Root>` to verify please? I think your fix is correct, it should resolve to an absolute path and using `__dirname` instead of `process.cwd()`, but not \ud83d\udcaf tbh. `webpack.config.resolve = { extensions: [ '.js' '.scss' ... ] }` [`resolve.extensions`](https://webpack.js.org/configuration/resolve/#resolve-extensions) or `import 'scss/modules.container.scss'` :warning: Note the file extension in the `import` path. Please reopen this at `node-sass` (`libsass`) instead this looks like a bug in the `sass` itself without being affected by the way webpack integrates with `sass` . Not directly for SASS, but you could consider using `postcss-custom-properties` and enhance the PostCSS AST with the variables as long as browser support for CSS Custom Properties isn't mature enough. The plugin has a `fallback` option doing exactly what you're tying to achieve via a mixin atm. Otherwise your approach works just fine since it's nearly using the same logic. Closing as there is nothing we can do to fix this in the scope of `sass-loader` itself. @chacbumbum Please show the incorrect styles (output), nesting inside `:global` might be a problem. Yep sure, but `sass-loader` (nesting) runs before `css-loader` (CSS Modules), so maybe the sass compiler messes up on `:global` (unknown in `sass`) + nesting (producing incorrect styles). I need the actual output to verify that assumption :). @jainshravan123 Are you sure this warning comes from `sass-loader` (maybe invalid npm cache)? The loader is updated to use the new method for [`options` parsing](https://github.com/webpack-contrib/sass-loader/blob/master/lib/normalizeOptions.js#L21) for a while now. Where did you add them could you search for `loaderUtils.parseQuery`in `node_modules/sass-loader` ?  Did you delete `node_modules` && your  lockfile (maybe `npm cache clean --force`) and a tried a fresh install ?  . @crazyx13th Is `data` for e.g passing custom variables ? If so feel free to tackle this and send a PR I will assist if needed or do it when I have time. This is also needed to implement watching these . @markbrown4 Feel free to reopen if still any problems. https://github.com/webpack-contrib/sass-loader/blob/master/lib/normalizeOptions.js#L27-L29\r\n\r\nMaybe ditch `loaderContext.minimize` . Does `compress` anything special in terms of SASS 'minification'?  I wonder why this is actually needed at all,  since `minimize`  in `css-loader` will minify the CSS anyways :). \ud83d\ude06 I wanted to post exactly this link right now :). Hmm... doesn't `cssnano` (`css-loader`) handle colors aswell (not sure) ? . If `webpack -p || webpack --optimize-minimize` is used css-loader's `loaderContext.minimize` will run `cssnano` :), `sass-loader` can't be used standalone atm. If folks want to use `compressed` mode, set `options.outputStyle` explicitly ?. @rhys-vdw Should be https://gitter.im/webpack/webpack instead, mind spinning up a quick PR ? \ud83d\ude1b . https://github.com/webpack-contrib/css-loader/pull/532. > The sass-loader requires node-sass and webpack as peerDependency. Thus you are able to control the versions accurately.\r\n\r\n@flimshaw If it isn't referenced as a peerDependency in `package.json` please add  it as such instead . Since `node-sass` (libsass) is a Node Native Module, it's better to leave it as a `peerDependency` for now (reconsider maybe, when N-API is a thing) so everyone can specify the version he/she needs/works. Thx \ud83d\ude1b . Agreeing with @evilebottnawi here, `dart-sass` is still under 'heavy' development and doesn't cover the whole SASS spec yet. @bebraw @d3viant0ne Does one of you have acces here? \ud83d\ude1b  It's seems @jhnns is busy atm. @avivshafir Can you please provide a bit more context, the fix here is a semver patch && node-sass is should normally be a `peerDependency` you as the user control the version. But I'm not \ud83d\udcaf sure I understood the `node-sass` part correctly \ud83d\ude1b . We have npm access problems atm (no one reachable) \ud83d\ude05 , but maybe we need another fix anyways \ud83d\ude1b . @avivshafir Does `v6.0.5` pulled from `master` `npm i -D webpack-contrib/sass-loader` fix the issue for you, could/did you test it ? \ud83d\ude43 . @avivshafir Thx appreciated. #450 . @someok @Maxouhell [v6.0.5](https://github.com/webpack-contrib/sass-loader/releases/tag/v6.0.5). Sry that's the responsibility of one of the core members, I will try to ping one in slack, tbh I thought it's up already with a release tagged \u00af\\_(\u30c4)_/\u00af. cc @jtangelder @akiran . @dwjft `sass-loader` version (`@latest`) ?. @Stephen2 https://github.com/webpack-contrib/css-loader/pull/532 \r\n\r\n\u26a0\ufe0f If you use `{ loader: 'postcss-loader', options: { sourceMap: 'inline' } }` the source map is inlined in the CSS as an annotation comment by `postcss-loader`, therefore `css-loader` doesn't have any effect on the map anymore. `{ loader: 'style-loader', options: { sourceMap: true } }` \r\n\r\nIt's on `master` (`css-loader`) now and a release should be underway, yes it's a known issue if you have a few minutes, you could try if it works for you by `npm i -D webpack-contrib/css-loader`\r\n\r\nFeedback would be appreciated \ud83d\ude1b . > remove postcss loader = paths good!\r\n\r\nJust to clearify, you mean with `sass-loader` applied? (`style-loader!css-loader!sass-loader`) \ud83d\ude1b \r\n\r\n> Don't know if that helps or has just confused everything...\r\n\r\nNo no the opposite \ud83d\ude43 , it's appreciated, could you post some info on what is off, when `postcss-loader` is used, so I can fix it there :). I see now, likely need to remove the `path.resolve()` part in `postcss-loader` I added in `v2.0.0` \ud83d\ude05. Thx I close the issue here and fix it in `postcss-loader` as soon as possible. @katzz0 The relevant lines are [here](https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L149-L152), could you comment them out in your local version of `postcss-loader` (`node_modules`) and please confirm that source map(pings) are still working correctly ?  I added these lines as it's recommended to have provide absolute paths to webpack for correct source mappings. `loader` => `use` in `config.rules[i]`\r\n`fallbackLoader`=> `fallback` && `loader` => `use` in `ExtractTextPlugin`\r\n\r\nThe CSS file should be emitted into your `output` directory, specified in `config.output` and you need to add a `<link rel=\"stylesheet\" href=\"extracted.css\">` yourself or maybe `HTMLPlugin` supports that via options or plugin hook (No idea, I don't use it \ud83d\ude1b ). \r\n\r\nClosing as unrelated to `sass-loader`. `config.output` ===\r\n**webpack.config.js**\r\n```js\r\nconst config = {\r\n  ...\r\n  output: {\r\n    path:  path.resolve.(__dirname, 'dist'),\r\n    filename: '[name].js'\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\nMaybe\r\n\r\n```\r\n{\r\n  test: /\\.scss$/\r\n  use: ExtractTextPlugin.extract({\r\n    fallback: 'style-loader',\r\n    use: [ { loader: 'css-loader', options: { importLoaders: 1 } }, 'sass-loader' ]\r\n  })\r\n}\r\n\r\n[\r\n  new ExtractTextPlugin({ \r\n    filename: '[name].js', // dist/${name}.js\r\n    allChunks: true // add this line\r\n  })\r\n]\r\n```\r\n\r\nPlease update the config syntax as stated above and what exactly is not working ? \r\nDo you get a CSS file ? \r\nDo you get an Error ?. ```diff\r\nnew webpack.optimize.CommonsChunkPlugin({\r\n-     name: ['app', 'vendor', 'polyfills']\r\n+     name: [ 'vendor', 'polyfills', 'runtime'  /* don't add this to entry, it will spilt the webpack runtime from app.js */ ],\r\n+     minChunks: Infinity\r\n    })\r\n]\r\n```\r\n\r\n`app` is **not** a `Common Chunk` like a lib, which is likely `imported` multiple times. `app.ts` => `bundle.js`\r\n\r\nIn regard to your CSS issue, try without `include/exclude` and see if you at least get a file emitted, also update your dependencies in `package.json` many of them are outdated. If it still doesn't work please open an issue in angular/angular-cli. See https://github.com/webpack-contrib/style-loader/issues/239. This seems to be resolved, closing for now, but feel free to reopen if still regressions related to `sass-loader` :). Besides the `includePaths` workaround there is no (clean) way to fix that atm, it would require `node-sass` to expose a hook to rewrite the `@import` paths before importing the contents\r\n\r\nhttps://www.npmjs.com/package/sass-graph\r\n\r\nhttps://www.npmjs.com/package/sass-module-importer\r\nhttps://www.npmjs.com/package/node-sass-package-importer\r\n\r\nOr writing our own :)\r\n. https://github.com/sass/node-sass#importer--v200---experimental. It will require changes to `sass-loader` I would say, for the webpack glue (pre-resolving). What do you exactly mean by _fix_ ? \ud83d\ude1b . If possible we should do it :), I'm not _too_ familiar with `sass-loader` internals and need to take a look myself first, if you have something in mind just propose it \ud83d\ude1b . It doesn't work at all or does it just displays a warning for an unmet `peerDependency`?. fix or better feature ? :). https://github.com/webpack-contrib/sass-loader#examples. @baunegaard Your issue is that `webpack.config.js` isn't in `<Project Root>` so  `process.cwd()` will resolve to `<Project Root>/Assets/path/to/webpack.config.js` which is appended internally by webpack, could you try by temporarily moving `webpack.config.js` in `<Project Root>` to verify please? I think your fix is correct, it should resolve to an absolute path and using `__dirname` instead of `process.cwd()`, but not \ud83d\udcaf tbh. `webpack.config.resolve = { extensions: [ '.js' '.scss' ... ] }` [`resolve.extensions`](https://webpack.js.org/configuration/resolve/#resolve-extensions) or `import 'scss/modules.container.scss'` :warning: Note the file extension in the `import` path. Please reopen this at `node-sass` (`libsass`) instead this looks like a bug in the `sass` itself without being affected by the way webpack integrates with `sass` . Not directly for SASS, but you could consider using `postcss-custom-properties` and enhance the PostCSS AST with the variables as long as browser support for CSS Custom Properties isn't mature enough. The plugin has a `fallback` option doing exactly what you're tying to achieve via a mixin atm. Otherwise your approach works just fine since it's nearly using the same logic. Closing as there is nothing we can do to fix this in the scope of `sass-loader` itself. @chacbumbum Please show the incorrect styles (output), nesting inside `:global` might be a problem. Yep sure, but `sass-loader` (nesting) runs before `css-loader` (CSS Modules), so maybe the sass compiler messes up on `:global` (unknown in `sass`) + nesting (producing incorrect styles). I need the actual output to verify that assumption :). @jainshravan123 Are you sure this warning comes from `sass-loader` (maybe invalid npm cache)? The loader is updated to use the new method for [`options` parsing](https://github.com/webpack-contrib/sass-loader/blob/master/lib/normalizeOptions.js#L21) for a while now. Where did you add them could you search for `loaderUtils.parseQuery`in `node_modules/sass-loader` ?  Did you delete `node_modules` && your  lockfile (maybe `npm cache clean --force`) and a tried a fresh install ?  . @crazyx13th Is `data` for e.g passing custom variables ? If so feel free to tackle this and send a PR I will assist if needed or do it when I have time. This is also needed to implement watching these . ",
    "studioraygun": "Do you have any specific examples? I've already lost half a day to this. Thanks.. Do you have any specific examples? I've already lost half a day to this. Thanks.. ",
    "sai-prasanna": "I too have problems porting , Here is my webpack 2 conf\r\n\r\n``` javascript\r\nconst webpack = require('webpack');\r\nconst path = require('path');\r\n\r\nconst DashboardPlugin = require('webpack-dashboard/plugin');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\nconst autoprefixer = require('autoprefixer');\r\n\r\nconst nodeEnv = process.env.NODE_ENV || 'development';\r\nconst isProduction = nodeEnv === 'production';\r\n\r\nconst jsSourcePath = path.join(__dirname, './source/js');\r\nconst buildPath = path.join(__dirname, './build');\r\nconst imgPath = path.join(__dirname, './source/assets/img');\r\nconst sourcePath = path.join(__dirname, './source');\r\n\r\n// Common plugins\r\nconst plugins = [\r\n  new webpack.optimize.CommonsChunkPlugin({\r\n    name: 'vendor',\r\n    minChunks: Infinity,\r\n    filename: 'vendor-[hash].js',\r\n  }),\r\n  new webpack.DefinePlugin({\r\n    'process.env': {\r\n      NODE_ENV: JSON.stringify(nodeEnv),\r\n    },\r\n  }),\r\n  new webpack.NamedModulesPlugin(),\r\n  new HtmlWebpackPlugin({\r\n    template: path.join(sourcePath, 'index.html'),\r\n    path: buildPath,\r\n    filename: 'index.html',\r\n  }),\r\n  new webpack.LoaderOptionsPlugin({\r\n    options: {\r\n      postcss: [\r\n        autoprefixer({\r\n          browsers: [\r\n            'last 3 version',\r\n            'ie >= 10',\r\n          ],\r\n        }),\r\n      ],\r\n      context: sourcePath,\r\n    },\r\n  }),\r\n];\r\n\r\n// Common rules\r\nconst rules = [\r\n  {\r\n    test: /\\.(js|jsx)$/,\r\n    exclude: /node_modules/,\r\n    use: [\r\n      'babel-loader',\r\n    ],\r\n  },\r\n  {\r\n    test: /\\.(png|gif|jpg|svg)$/,\r\n    include: imgPath,\r\n    use: 'url-loader?limit=20480&name=assets/[name]-[hash].[ext]',\r\n  },\r\n];\r\n\r\nif (isProduction) {\r\n  // Production plugins\r\n  plugins.push(\r\n    new webpack.LoaderOptionsPlugin({\r\n      minimize: true,\r\n      debug: false,\r\n    }),\r\n    new webpack.optimize.UglifyJsPlugin({\r\n      compress: {\r\n        warnings: false,\r\n        screw_ie8: true,\r\n        conditionals: true,\r\n        unused: true,\r\n        comparisons: true,\r\n        sequences: true,\r\n        dead_code: true,\r\n        evaluate: true,\r\n        if_return: true,\r\n        join_vars: true,\r\n      },\r\n      output: {\r\n        comments: false,\r\n      },\r\n    }),\r\n    new ExtractTextPlugin('style-[hash].css')\r\n  );\r\n\r\n  // Production rules\r\n  rules.push(\r\n    {\r\n      test: /\\.scss$/,\r\n      loader: ExtractTextPlugin.extract({\r\n        fallbackLoader: 'style-loader',\r\n        loader: 'css-loader?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]!postcss-loader!sass-loader',\r\n      }),\r\n    }\r\n  );\r\n} else {\r\n  // Development plugins\r\n  plugins.push(\r\n    new webpack.HotModuleReplacementPlugin(),\r\n    new DashboardPlugin()\r\n  );\r\n\r\n  // Development rules\r\n  rules.push(\r\n    {\r\n      test: /\\.scss$/,\r\n      use: [\r\n        'style-loader',\r\n        // Using source maps breaks urls in the CSS loader\r\n        // https://github.com/webpack/css-loader/issues/232\r\n        // This comment solves it, but breaks testing from a local network\r\n        // https://github.com/webpack/css-loader/issues/232#issuecomment-240449998\r\n        // 'css-loader?sourceMap',\r\n        'css-loader?importLoaders=1&modules&localIdentName=[path]___[name]__[local]___[hash:base64:5]',\r\n        'postcss-loader',\r\n        'sass-loader',\r\n      ],\r\n    }\r\n  );\r\n}\r\n\r\nmodule.exports = {\r\n  devtool: isProduction ? 'eval' : 'source-map',\r\n  context: jsSourcePath,\r\n  entry: {\r\n    js: './index.js',\r\n    vendor: [\r\n      'babel-polyfill',\r\n      'es6-promise',\r\n      'immutable',\r\n      'isomorphic-fetch',\r\n      'react-dom',\r\n      'react-redux',\r\n      'react-router',\r\n      'react',\r\n      'redux-thunk',\r\n      'redux',\r\n    ],\r\n  },\r\n  output: {\r\n    path: buildPath,\r\n    publicPath: '/',\r\n    filename: 'app-[hash].js',\r\n  },\r\n  module: {\r\n    rules,\r\n  },\r\n  resolve: {\r\n    extensions: ['.webpack-loader.js', '.web-loader.js', '.loader.js', '.js', '.jsx'],\r\n    modules: [\r\n      path.resolve(__dirname, 'node_modules'),\r\n      jsSourcePath,\r\n    ],\r\n  },\r\n  plugins,\r\n  devServer: {\r\n    contentBase: isProduction ? './build' : './source',\r\n    historyApiFallback: true,\r\n    port: 3000,\r\n    compress: isProduction,\r\n    inline: !isProduction,\r\n    hot: !isProduction,\r\n    host: '0.0.0.0',\r\n    stats: {\r\n      assets: true,\r\n      children: false,\r\n      chunks: false,\r\n      hash: false,\r\n      modules: false,\r\n      publicPath: false,\r\n      timings: true,\r\n      version: false,\r\n      warnings: true,\r\n      colors: {\r\n        green: '\\u001b[32m',\r\n      },\r\n    },\r\n  },\r\n};\r\n```. I too have problems porting , Here is my webpack 2 conf\r\n\r\n``` javascript\r\nconst webpack = require('webpack');\r\nconst path = require('path');\r\n\r\nconst DashboardPlugin = require('webpack-dashboard/plugin');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\r\nconst autoprefixer = require('autoprefixer');\r\n\r\nconst nodeEnv = process.env.NODE_ENV || 'development';\r\nconst isProduction = nodeEnv === 'production';\r\n\r\nconst jsSourcePath = path.join(__dirname, './source/js');\r\nconst buildPath = path.join(__dirname, './build');\r\nconst imgPath = path.join(__dirname, './source/assets/img');\r\nconst sourcePath = path.join(__dirname, './source');\r\n\r\n// Common plugins\r\nconst plugins = [\r\n  new webpack.optimize.CommonsChunkPlugin({\r\n    name: 'vendor',\r\n    minChunks: Infinity,\r\n    filename: 'vendor-[hash].js',\r\n  }),\r\n  new webpack.DefinePlugin({\r\n    'process.env': {\r\n      NODE_ENV: JSON.stringify(nodeEnv),\r\n    },\r\n  }),\r\n  new webpack.NamedModulesPlugin(),\r\n  new HtmlWebpackPlugin({\r\n    template: path.join(sourcePath, 'index.html'),\r\n    path: buildPath,\r\n    filename: 'index.html',\r\n  }),\r\n  new webpack.LoaderOptionsPlugin({\r\n    options: {\r\n      postcss: [\r\n        autoprefixer({\r\n          browsers: [\r\n            'last 3 version',\r\n            'ie >= 10',\r\n          ],\r\n        }),\r\n      ],\r\n      context: sourcePath,\r\n    },\r\n  }),\r\n];\r\n\r\n// Common rules\r\nconst rules = [\r\n  {\r\n    test: /\\.(js|jsx)$/,\r\n    exclude: /node_modules/,\r\n    use: [\r\n      'babel-loader',\r\n    ],\r\n  },\r\n  {\r\n    test: /\\.(png|gif|jpg|svg)$/,\r\n    include: imgPath,\r\n    use: 'url-loader?limit=20480&name=assets/[name]-[hash].[ext]',\r\n  },\r\n];\r\n\r\nif (isProduction) {\r\n  // Production plugins\r\n  plugins.push(\r\n    new webpack.LoaderOptionsPlugin({\r\n      minimize: true,\r\n      debug: false,\r\n    }),\r\n    new webpack.optimize.UglifyJsPlugin({\r\n      compress: {\r\n        warnings: false,\r\n        screw_ie8: true,\r\n        conditionals: true,\r\n        unused: true,\r\n        comparisons: true,\r\n        sequences: true,\r\n        dead_code: true,\r\n        evaluate: true,\r\n        if_return: true,\r\n        join_vars: true,\r\n      },\r\n      output: {\r\n        comments: false,\r\n      },\r\n    }),\r\n    new ExtractTextPlugin('style-[hash].css')\r\n  );\r\n\r\n  // Production rules\r\n  rules.push(\r\n    {\r\n      test: /\\.scss$/,\r\n      loader: ExtractTextPlugin.extract({\r\n        fallbackLoader: 'style-loader',\r\n        loader: 'css-loader?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]!postcss-loader!sass-loader',\r\n      }),\r\n    }\r\n  );\r\n} else {\r\n  // Development plugins\r\n  plugins.push(\r\n    new webpack.HotModuleReplacementPlugin(),\r\n    new DashboardPlugin()\r\n  );\r\n\r\n  // Development rules\r\n  rules.push(\r\n    {\r\n      test: /\\.scss$/,\r\n      use: [\r\n        'style-loader',\r\n        // Using source maps breaks urls in the CSS loader\r\n        // https://github.com/webpack/css-loader/issues/232\r\n        // This comment solves it, but breaks testing from a local network\r\n        // https://github.com/webpack/css-loader/issues/232#issuecomment-240449998\r\n        // 'css-loader?sourceMap',\r\n        'css-loader?importLoaders=1&modules&localIdentName=[path]___[name]__[local]___[hash:base64:5]',\r\n        'postcss-loader',\r\n        'sass-loader',\r\n      ],\r\n    }\r\n  );\r\n}\r\n\r\nmodule.exports = {\r\n  devtool: isProduction ? 'eval' : 'source-map',\r\n  context: jsSourcePath,\r\n  entry: {\r\n    js: './index.js',\r\n    vendor: [\r\n      'babel-polyfill',\r\n      'es6-promise',\r\n      'immutable',\r\n      'isomorphic-fetch',\r\n      'react-dom',\r\n      'react-redux',\r\n      'react-router',\r\n      'react',\r\n      'redux-thunk',\r\n      'redux',\r\n    ],\r\n  },\r\n  output: {\r\n    path: buildPath,\r\n    publicPath: '/',\r\n    filename: 'app-[hash].js',\r\n  },\r\n  module: {\r\n    rules,\r\n  },\r\n  resolve: {\r\n    extensions: ['.webpack-loader.js', '.web-loader.js', '.loader.js', '.js', '.jsx'],\r\n    modules: [\r\n      path.resolve(__dirname, 'node_modules'),\r\n      jsSourcePath,\r\n    ],\r\n  },\r\n  plugins,\r\n  devServer: {\r\n    contentBase: isProduction ? './build' : './source',\r\n    historyApiFallback: true,\r\n    port: 3000,\r\n    compress: isProduction,\r\n    inline: !isProduction,\r\n    hot: !isProduction,\r\n    host: '0.0.0.0',\r\n    stats: {\r\n      assets: true,\r\n      children: false,\r\n      chunks: false,\r\n      hash: false,\r\n      modules: false,\r\n      publicPath: false,\r\n      timings: true,\r\n      version: false,\r\n      warnings: true,\r\n      colors: {\r\n        green: '\\u001b[32m',\r\n      },\r\n    },\r\n  },\r\n};\r\n```. ",
    "borela": "@DanielRamosAcosta \r\nhttps://github.com/ctrine/webpack-settings/blob/master/packages/shared/src/rules/sass-module.js. I do on webpack but when I use the `@import './someDir/someFile` command from sass with relative paths, it doesn't use webpack's resolver so I can't omit the extension `mscss`. Is there any setting to allow this?. Yeah, I'been using this [config](https://github.com/ctrine/webpack-settings/blob/master/src/main.js) and at the time of this issue, it wasn't adding the extensions from webpack's config but I see that there changes made to the repo.\r\n\r\n I'll check if the error still exists :D.. [The current behaviour is actually a bug as mentioned here](https://github.com/webpack-contrib/sass-loader/issues/466).. It's how [CSS modules work](https://github.com/css-modules/css-modules#exceptions) they are local by default, in your example you could also write as:\r\n\r\n```SASS\r\n.el1 {\r\n  // :global is a switch, everything after it becomes global.\r\n  :global .sub1 {\r\n  }\r\n}\r\n\r\n.el1 {\r\n  :global {\r\n    .sub1 {\r\n    }\r\n    .sub2 {\r\n    }\r\n  }\r\n}\r\n````\r\n\r\nPersonally I use different extensions, `.mscss` for files that contain modules and  `.scss` for files without modules, that way I can write global css without enveloping them in the `:global` switch.. I believe you need to add the directories to the `includePaths` to help resolve the files like so https://github.com/ctrine/webpack-settings/blob/master/packages/shared/src/rules/sass-module.js. `@import \"~@material/button/mdc-button/mdc-button.scss\";`\r\nOr ask the owner of the package to add a `main` field in the `package.json`. @marekpw got it, you need to add `includePaths` like so:\r\n\r\n```js\r\n\r\nconst { dirname, join, resolve } = require('path');\r\nconst webpack = require('webpack');\r\n\r\nmodule.exports = {\r\n    context: resolve('src'),\r\n    entry: {\r\n        app: './main.scss'\r\n    },\r\n    output: {\r\n        filename: '[name].[hash].js',\r\n        path: resolve('dist')\r\n    },\r\n\r\n    resolve: {\r\n        extensions: ['.js', '.scss']\r\n    },\r\n\r\n    module: {\r\n        rules: [\r\n            {\r\n                test: /\\.scss$/,\r\n                use: [{\r\n                    loader: \"style-loader\" // creates style nodes from JS strings\r\n                }, {\r\n                    loader: \"css-loader\" // translates CSS into CommonJS\r\n                }, {\r\n                    loader: \"sass-loader\", // compiles Sass to CSS\r\n                    options: {\r\n                      includePaths: [\r\n                        join(dirname(module.filename), 'node_modules')\r\n                      ]\r\n                    }\r\n                }]\r\n            }\r\n        ],\r\n    }\r\n};\r\n```\r\n\r\n[Here's a full package for compiling websites in you case you need hot reloading too.](https://github.com/ctrine/webpack-settings/tree/master/packages/web). @evilebottnawi What's the other option?. @evilebottnawi I believe this bug was introduced before then, I had been using the `includePath` even for non scoped packages for a long time because the loader isn't using webpack's resolver, which is why [I suggested custom extensions here](https://github.com/webpack-contrib/sass-loader/issues/339). \r\n\r\nIt did seam counter intuitive to me to have to duplicate the paths from webpack's `resolve.modules`.. @evilebottnawi Thank you, I wish I could offer better help but I am still learning how webpack loaders work. . @DanielRamosAcosta \r\nhttps://github.com/ctrine/webpack-settings/blob/master/packages/shared/src/rules/sass-module.js. I do on webpack but when I use the `@import './someDir/someFile` command from sass with relative paths, it doesn't use webpack's resolver so I can't omit the extension `mscss`. Is there any setting to allow this?. Yeah, I'been using this [config](https://github.com/ctrine/webpack-settings/blob/master/src/main.js) and at the time of this issue, it wasn't adding the extensions from webpack's config but I see that there changes made to the repo.\r\n\r\n I'll check if the error still exists :D.. [The current behaviour is actually a bug as mentioned here](https://github.com/webpack-contrib/sass-loader/issues/466).. It's how [CSS modules work](https://github.com/css-modules/css-modules#exceptions) they are local by default, in your example you could also write as:\r\n\r\n```SASS\r\n.el1 {\r\n  // :global is a switch, everything after it becomes global.\r\n  :global .sub1 {\r\n  }\r\n}\r\n\r\n.el1 {\r\n  :global {\r\n    .sub1 {\r\n    }\r\n    .sub2 {\r\n    }\r\n  }\r\n}\r\n````\r\n\r\nPersonally I use different extensions, `.mscss` for files that contain modules and  `.scss` for files without modules, that way I can write global css without enveloping them in the `:global` switch.. I believe you need to add the directories to the `includePaths` to help resolve the files like so https://github.com/ctrine/webpack-settings/blob/master/packages/shared/src/rules/sass-module.js. `@import \"~@material/button/mdc-button/mdc-button.scss\";`\r\nOr ask the owner of the package to add a `main` field in the `package.json`. @marekpw got it, you need to add `includePaths` like so:\r\n\r\n```js\r\n\r\nconst { dirname, join, resolve } = require('path');\r\nconst webpack = require('webpack');\r\n\r\nmodule.exports = {\r\n    context: resolve('src'),\r\n    entry: {\r\n        app: './main.scss'\r\n    },\r\n    output: {\r\n        filename: '[name].[hash].js',\r\n        path: resolve('dist')\r\n    },\r\n\r\n    resolve: {\r\n        extensions: ['.js', '.scss']\r\n    },\r\n\r\n    module: {\r\n        rules: [\r\n            {\r\n                test: /\\.scss$/,\r\n                use: [{\r\n                    loader: \"style-loader\" // creates style nodes from JS strings\r\n                }, {\r\n                    loader: \"css-loader\" // translates CSS into CommonJS\r\n                }, {\r\n                    loader: \"sass-loader\", // compiles Sass to CSS\r\n                    options: {\r\n                      includePaths: [\r\n                        join(dirname(module.filename), 'node_modules')\r\n                      ]\r\n                    }\r\n                }]\r\n            }\r\n        ],\r\n    }\r\n};\r\n```\r\n\r\n[Here's a full package for compiling websites in you case you need hot reloading too.](https://github.com/ctrine/webpack-settings/tree/master/packages/web). @evilebottnawi What's the other option?. @evilebottnawi I believe this bug was introduced before then, I had been using the `includePath` even for non scoped packages for a long time because the loader isn't using webpack's resolver, which is why [I suggested custom extensions here](https://github.com/webpack-contrib/sass-loader/issues/339). \r\n\r\nIt did seam counter intuitive to me to have to duplicate the paths from webpack's `resolve.modules`.. @evilebottnawi Thank you, I wish I could offer better help but I am still learning how webpack loaders work. . ",
    "RaphaelHadjadj": "I made a simple minimalist sample project.\r\nhttps://github.com/RaphaelHadjadj/webpack2-cssmodules-sass. I made a simple minimalist sample project.\r\nhttps://github.com/RaphaelHadjadj/webpack2-cssmodules-sass. ",
    "gcarothers": "Can I recommend NOT removing this feature just yet. There are clearly some bugs in node-sass/libsass when loading sass from more than one entry point (or even two webpack builds in a single process) using the async callback. With even moderately complex sass files (bootstrap-sass) trying to use two entry points results in random `Stack level too deep` errors. In these cases setting `isSync` to true does \"take longer\" but results in NOT erroring out at random. . https://github.com/sass/node-sass/issues/1669 seems to be the root cause (changes to how node sass did memory management) hopefully node-sass will resolve soon. Until then downgrading back to older node-sass solves the stack level too deep errors completely.. Can I recommend NOT removing this feature just yet. There are clearly some bugs in node-sass/libsass when loading sass from more than one entry point (or even two webpack builds in a single process) using the async callback. With even moderately complex sass files (bootstrap-sass) trying to use two entry points results in random `Stack level too deep` errors. In these cases setting `isSync` to true does \"take longer\" but results in NOT erroring out at random. . https://github.com/sass/node-sass/issues/1669 seems to be the root cause (changes to how node sass did memory management) hopefully node-sass will resolve soon. Until then downgrading back to older node-sass solves the stack level too deep errors completely.. ",
    "benallfree": "Can confirm @gcarothers `Stack level too deep`, I get this one too when compiling all the `bootswatch` themes async.. I'd be happy to test it, maybe a separate branch? In the mean time, I'm going to use a parallel shell script to compile all the SASS into intermediate CSS and then webpack those. I'll report back to see if that works better.. Using the `node-sass 4.x` CLI to build intermediate CSS files in parallel works while `sass-loader` fails in the same scenario. So it does seem that there is something `sass-loader` is doing differently than a bash script. Here is a code demo with YouTube walkthrough: https://github.com/benallfree/node-sass-1669\r\n\r\nPS thank you @gcarothers I'll probably just downgrade to 3.x for the time being.. Can confirm @gcarothers `Stack level too deep`, I get this one too when compiling all the `bootswatch` themes async.. I'd be happy to test it, maybe a separate branch? In the mean time, I'm going to use a parallel shell script to compile all the SASS into intermediate CSS and then webpack those. I'll report back to see if that works better.. Using the `node-sass 4.x` CLI to build intermediate CSS files in parallel works while `sass-loader` fails in the same scenario. So it does seem that there is something `sass-loader` is doing differently than a bash script. Here is a code demo with YouTube walkthrough: https://github.com/benallfree/node-sass-1669\r\n\r\nPS thank you @gcarothers I'll probably just downgrade to 3.x for the time being.. ",
    "thiagof": "Having issues with bootstrap 4 compilation.\r\nMultiple entry points load its scss, so `Stack level too deep` is raised. Seems random..\r\n\r\n`isSync` was removed.. how are you solving it @gcarothers ?. Having issues with bootstrap 4 compilation.\r\nMultiple entry points load its scss, so `Stack level too deep` is raised. Seems random..\r\n\r\n`isSync` was removed.. how are you solving it @gcarothers ?. ",
    "brutalhonesty": "Any updates on when this will be available for consumption?. Any updates on when this will be available for consumption?. ",
    "peterpme": ":wave: Awesome work! Any way I can help push this along? Thanks!. Accident. :wave: Awesome work! Any way I can help push this along? Thanks!. Accident. ",
    "strues": "Would just like to add this happens on MacOS as well.. Yeah, unfortunately.\r\n\r\n```\r\nERROR in ./src/shared/theme/styles/main.scss\r\nModule build failed:\r\n  @include border-radius($border-radius);\r\n          ^\r\n      Stack level too deep\r\n\r\n```. Would just like to add this happens on MacOS as well.. Yeah, unfortunately.\r\n\r\n```\r\nERROR in ./src/shared/theme/styles/main.scss\r\nModule build failed:\r\n  @include border-radius($border-radius);\r\n          ^\r\n      Stack level too deep\r\n\r\n```. ",
    "bdwain": "really? I haven't been able to make it happen there.. what version of OSX? i'm not getting it on sierra. and do you have the same versions of node and everything i mentioned above?. this seems to be fixed with node-sass 4.3. really? I haven't been able to make it happen there.. what version of OSX? i'm not getting it on sierra. and do you have the same versions of node and everything i mentioned above?. this seems to be fixed with node-sass 4.3. ",
    "torbjor": "Also seeing this today after updating sass-loader from 3.0.0 to 4.1.1. \r\nIt has to do with `@content` I think, or at least this answer suggests that might be true:\r\nhttp://stackoverflow.com/questions/26106699/error-stack-level-too-deep-when-compiling-sass-with-nested-susy-calls\r\nI'm on a Mac, El Capitan\r\n```\r\nModule build failed: \r\n  @include breakpoint(md) {\r\n          ^\r\n      Stack level too deep\r\n```. Also seeing this today after updating sass-loader from 3.0.0 to 4.1.1. \r\nIt has to do with `@content` I think, or at least this answer suggests that might be true:\r\nhttp://stackoverflow.com/questions/26106699/error-stack-level-too-deep-when-compiling-sass-with-nested-susy-calls\r\nI'm on a Mac, El Capitan\r\n```\r\nModule build failed: \r\n  @include breakpoint(md) {\r\n          ^\r\n      Stack level too deep\r\n```. ",
    "jermspeaks": "@torbjor I'm having similar issues without `@content`. Also started happening with an upgrade from 3.x to 4.1.1.\r\n\r\nOS: OSX 10.10.5 \r\nversion: 4.1.1\r\nnode-sass version: 4.1.1\r\nwebpack: 1.13\r\nNode version: 7.4\r\n\r\n```scss\r\n// file1.scss\r\n@mixin font-options($font-size, $font-family, $font-weight) {\r\n  font-size: $font-size;\r\n  font-family: $font-family;\r\n  font-weight: $font-weight;\r\n}\r\n\r\n// file2.scss\r\n@import \"./file1\";\r\n\r\n.common-type {\r\n  @include font-options(14px, \"Helvetica, Sans Serif\", 400);\r\n}\r\n```\r\n```bash\r\nERROR in ./~/css-loader!./~/postcss-loader!./~/sass-loader?outputStyle=expanded!./src/common/styles/file2.scss\r\nModule build failed:\r\n  @include font-options($font-size-12, $font-family-futura-pt-heavy, $font-weight-600);\r\n          ^\r\n    Stack level too deep\r\n    in /Users/jwong/inform/dme/src/common/styles/file1.scss (line 247, column 12)\r\n```. Also can confirm it's working for me with node-sass version 4.3.x. @torbjor I'm having similar issues without `@content`. Also started happening with an upgrade from 3.x to 4.1.1.\r\n\r\nOS: OSX 10.10.5 \r\nversion: 4.1.1\r\nnode-sass version: 4.1.1\r\nwebpack: 1.13\r\nNode version: 7.4\r\n\r\n```scss\r\n// file1.scss\r\n@mixin font-options($font-size, $font-family, $font-weight) {\r\n  font-size: $font-size;\r\n  font-family: $font-family;\r\n  font-weight: $font-weight;\r\n}\r\n\r\n// file2.scss\r\n@import \"./file1\";\r\n\r\n.common-type {\r\n  @include font-options(14px, \"Helvetica, Sans Serif\", 400);\r\n}\r\n```\r\n```bash\r\nERROR in ./~/css-loader!./~/postcss-loader!./~/sass-loader?outputStyle=expanded!./src/common/styles/file2.scss\r\nModule build failed:\r\n  @include font-options($font-size-12, $font-family-futura-pt-heavy, $font-weight-600);\r\n          ^\r\n    Stack level too deep\r\n    in /Users/jwong/inform/dme/src/common/styles/file1.scss (line 247, column 12)\r\n```. Also can confirm it's working for me with node-sass version 4.3.x. ",
    "OneRedOak": "I ran into a similar issue running `node-sass 4.1.1` and `sass-loader 4.1.1`.\r\n```\r\nWebpackError at /\r\n            ModuleBuildError in \r\n            Module build failed: \r\n    @include box-shadow(none);\r\n            ^\r\n      Stack level too deep\r\n      in /app/node_modules/bootstrap/scss/_buttons.scss (line 117, column 14)\r\n```\r\n\r\nKicked down to `node-sass ^3.8.0` and `sass-loader 4.0.1`, and am no longer receiving that error.. I ran into a similar issue running `node-sass 4.1.1` and `sass-loader 4.1.1`.\r\n```\r\nWebpackError at /\r\n            ModuleBuildError in \r\n            Module build failed: \r\n    @include box-shadow(none);\r\n            ^\r\n      Stack level too deep\r\n      in /app/node_modules/bootstrap/scss/_buttons.scss (line 117, column 14)\r\n```\r\n\r\nKicked down to `node-sass ^3.8.0` and `sass-loader 4.0.1`, and am no longer receiving that error.. ",
    "sschafft": "Ran into a similar issue. \r\n\r\nOSX: 10.12\r\nNode: 7.4\r\nWebpack: 2.2.0-rc.3\r\nNode-sass: 4.1.1\r\nSass-loader: 4.1.1\r\n\r\nDropped down to node-sass ^3.8.0 and sass-loader 4.0.1, and am no longer receiving that error as per @OneRedOak's comment.\r\n. Ran into a similar issue. \r\n\r\nOSX: 10.12\r\nNode: 7.4\r\nWebpack: 2.2.0-rc.3\r\nNode-sass: 4.1.1\r\nSass-loader: 4.1.1\r\n\r\nDropped down to node-sass ^3.8.0 and sass-loader 4.0.1, and am no longer receiving that error as per @OneRedOak's comment.\r\n. ",
    "minowu": "@stevemao Thank you. sass-variable-loader is very COOL.. @stevemao Thank you. sass-variable-loader is very COOL.. ",
    "burtyish": "This looks like a duplicate of #272 . This looks like a duplicate of #272 . ",
    "leongaban": "Hey I'm running into this same problem, however I added the `include` folder like you did above, yet still running into that error :( mind a look see here? https://github.com/jtangelder/sass-loader/issues/364. Hi, how did you get your config to recognize the @imports for .scss files? My config is still having problems there. Would you mind a quick look at my setup? http://stackoverflow.com/questions/42058357/webpack-not-understanding-import-statement-in-my-sass-files. Uhm more explanation please? I've used code directly from the docs and other examples.... Thanks, I removed that file... no errors, but nothing happens when I save my `.scss` file now. I guess I'll have to post another issue. This plugin is suppose to make Webpack 2 compile SASS, I'm using the exact code from the docs... . This plugin! :) All I got webpack2 to compile and build my final JS file, however my styles are all written in .Scss Sass modules. I need to compile those with webpack. Starting to think maybe npm scripts is the way to go. . Yeah that was my bad, sorry... I didn't realize this is how Webpack worked, finally got the bug fixed: http://stackoverflow.com/questions/42058357/webpack2-not-understanding-import-statement-in-my-sass-files-how-to-compile-sa/42102403#42102403\r\n\r\nNow I see that my styles are actually combined in the final JS app file now, interesting.. Hey I'm running into this same problem, however I added the `include` folder like you did above, yet still running into that error :( mind a look see here? https://github.com/jtangelder/sass-loader/issues/364. Hi, how did you get your config to recognize the @imports for .scss files? My config is still having problems there. Would you mind a quick look at my setup? http://stackoverflow.com/questions/42058357/webpack-not-understanding-import-statement-in-my-sass-files. Uhm more explanation please? I've used code directly from the docs and other examples.... Thanks, I removed that file... no errors, but nothing happens when I save my `.scss` file now. I guess I'll have to post another issue. This plugin is suppose to make Webpack 2 compile SASS, I'm using the exact code from the docs... . This plugin! :) All I got webpack2 to compile and build my final JS file, however my styles are all written in .Scss Sass modules. I need to compile those with webpack. Starting to think maybe npm scripts is the way to go. . Yeah that was my bad, sorry... I didn't realize this is how Webpack worked, finally got the bug fixed: http://stackoverflow.com/questions/42058357/webpack2-not-understanding-import-statement-in-my-sass-files-how-to-compile-sa/42102403#42102403\r\n\r\nNow I see that my styles are actually combined in the final JS app file now, interesting.. ",
    "yunda": "@wzup thanks a lot. That helped me too. @wzup thanks a lot. That helped me too. ",
    "gbhipolitoglyph": "yeah i also encounter the same issue, the include doesn't solve mine. yeah i also encounter the same issue, the include doesn't solve mine. ",
    "modosc": "i'm seeing this too with `\"node-sass\": \"^4.4.0\"` (and `4.5.0` as of today, just tested) - when i switch back to `node-sass@^3.13.1` it works again. i've also tried setting `includeDirectories` in my `sass-loader` query per comments [here](https://github.com/sass/node-sass/issues/1876) but it didn't help.. i'm seeing this too with `\"node-sass\": \"^4.4.0\"` (and `4.5.0` as of today, just tested) - when i switch back to `node-sass@^3.13.1` it works again. i've also tried setting `includeDirectories` in my `sass-loader` query per comments [here](https://github.com/sass/node-sass/issues/1876) but it didn't help.. ",
    "quinn": "ok, i'm gonna try installing from the webpack 2 branch. maybe that will fix :) . Ok, webpack converts the object into a string regardless. Sorry about the confusion. . ok, i'm gonna try installing from the webpack 2 branch. maybe that will fix :) . Ok, webpack converts the object into a string regardless. Sorry about the confusion. . ",
    "ujh": "There's this workaround, but it would be great if there were a better way:\r\n\r\n``` scss\r\n.el1 {\r\n  :global(.sub1) {\r\n  }\r\n}\r\n```. Thanks for your answer @borela! In the end that's what I started to do, use `:global` in a lot of places. I also started splitting up the CSS into smaller files so then this isn't as much of an issue anymore. We'll see with what I'll end up.. There's this workaround, but it would be great if there were a better way:\r\n\r\n``` scss\r\n.el1 {\r\n  :global(.sub1) {\r\n  }\r\n}\r\n```. Thanks for your answer @borela! In the end that's what I started to do, use `:global` in a lot of places. I also started splitting up the CSS into smaller files so then this isn't as much of an issue anymore. We'll see with what I'll end up.. ",
    "karol-f": "+1\r\n\r\n```\r\nError: Invalid mapping: {\"generated\":{\"line\":11,\"column\":21330},\"source\":\"webpack:///src/demo/styles/node_modules/foundation-sites/scss/util/_mixins.scss\",\"original\":{\"line\":139,\"column\":-1},\"name\":null}\r\n    at SourceMapGenerator_validateMapping [as _validateMapping] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-map-generator.js:277:13)\r\n    at SourceMapGenerator_addMapping [as addMapping] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-map-generator.js:101:12)\r\n    at /Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:345:13\r\n    at SourceNode_walk [as walk] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:224:9)\r\n    at SourceNode_walk [as walk] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:220:13)\r\n    at SourceNode_walk [as walk] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:220:13)\r\n    at SourceNode_walk [as walk] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:220:13)\r\n    at SourceNode_toStringWithSourceMap [as toStringWithSourceMap] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:336:8)\r\n    at ConcatSource.proto.sourceAndMap (/Users/Karol/www/projects/project/node_modules/webpack-sources/lib/SourceAndMapMixin.js:28:32)\r\n    at Compilation.<anonymous> (/Users/Karol/www/projects/project/node_modules/webpack/lib/SourceMapDevToolPlugin.js:57:32)\r\n    at Array.map (native)\r\n    at Compilation.<anonymous> (/Users/Karol/www/projects/project/node_modules/webpack/lib/SourceMapDevToolPlugin.js:43:84)\r\n    at Array.forEach (native)\r\n    at Compilation.<anonymous> (/Users/Karol/www/projects/project/node_modules/webpack/lib/SourceMapDevToolPlugin.js:42:11)\r\n    at Compilation.applyPlugins1 (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:75:14)\r\n    at self.applyPluginsAsync.err (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:605:11)\r\n    at next (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:138:11)\r\n    at Compilation.compilation.plugin (/Users/Karol/www/projects/project/node_modules/webpack/lib/BannerPlugin.js:45:5)\r\n    at next (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:140:14)\r\n    at Compilation.compilation.plugin (/Users/Karol/www/projects/project/node_modules/webpack/lib/optimize/UglifyJsPlugin.js:140:5)\r\n    at Compilation.applyPluginsAsyncSeries (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:142:13)\r\n    at self.applyPluginsAsync.err (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:601:10)\r\n    at next (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:138:11)\r\n    at ExtractTextPlugin.<anonymous> (/Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/index.js:314:4)\r\n    at Compilation.applyPluginsAsyncSeries (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:142:13)\r\n    at sealPart2 (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:597:9)\r\n    at next (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:138:11)\r\n    at ExtractTextPlugin.<anonymous> (/Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/index.js:290:5)\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:356:16\r\n    at iteratorCallback (/Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:936:13)\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:840:16\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/index.js:274:6\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:356:16\r\n    at iteratorCallback (/Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:936:13)\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:840:16\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/index.js:264:9\r\n    at rebuilding.forEach.cb (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:475:29)\r\n    at Array.forEach (native)\r\n    at callback (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:475:15)\r\n    at processModuleDependencies (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:494:5)\r\n    at _combinedTickCallback (internal/process/next_tick.js:67:7)\r\n    at process._tickCallback (internal/process/next_tick.js:98:9)\r\n```. @jhnns My other CSS files without `sass-loader` work fine with source maps (I use there `postcss-loader` and `css-loader`). Also this only happens when I build for production so I'm using `extractTextWebpackPlugin` and `css-loader`.. @jhnns It's pretty common. I've checked and I have error due to Foundation CSS mixins - they also have `&` in `_mixins.scss` - https://github.com/zurb/foundation-sites/blob/develop/scss/util/_mixins.scss.. +1\r\n\r\n```\r\nError: Invalid mapping: {\"generated\":{\"line\":11,\"column\":21330},\"source\":\"webpack:///src/demo/styles/node_modules/foundation-sites/scss/util/_mixins.scss\",\"original\":{\"line\":139,\"column\":-1},\"name\":null}\r\n    at SourceMapGenerator_validateMapping [as _validateMapping] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-map-generator.js:277:13)\r\n    at SourceMapGenerator_addMapping [as addMapping] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-map-generator.js:101:12)\r\n    at /Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:345:13\r\n    at SourceNode_walk [as walk] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:224:9)\r\n    at SourceNode_walk [as walk] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:220:13)\r\n    at SourceNode_walk [as walk] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:220:13)\r\n    at SourceNode_walk [as walk] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:220:13)\r\n    at SourceNode_toStringWithSourceMap [as toStringWithSourceMap] (/Users/Karol/www/projects/project/node_modules/webpack-sources/node_modules/source-map/lib/source-node.js:336:8)\r\n    at ConcatSource.proto.sourceAndMap (/Users/Karol/www/projects/project/node_modules/webpack-sources/lib/SourceAndMapMixin.js:28:32)\r\n    at Compilation.<anonymous> (/Users/Karol/www/projects/project/node_modules/webpack/lib/SourceMapDevToolPlugin.js:57:32)\r\n    at Array.map (native)\r\n    at Compilation.<anonymous> (/Users/Karol/www/projects/project/node_modules/webpack/lib/SourceMapDevToolPlugin.js:43:84)\r\n    at Array.forEach (native)\r\n    at Compilation.<anonymous> (/Users/Karol/www/projects/project/node_modules/webpack/lib/SourceMapDevToolPlugin.js:42:11)\r\n    at Compilation.applyPlugins1 (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:75:14)\r\n    at self.applyPluginsAsync.err (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:605:11)\r\n    at next (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:138:11)\r\n    at Compilation.compilation.plugin (/Users/Karol/www/projects/project/node_modules/webpack/lib/BannerPlugin.js:45:5)\r\n    at next (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:140:14)\r\n    at Compilation.compilation.plugin (/Users/Karol/www/projects/project/node_modules/webpack/lib/optimize/UglifyJsPlugin.js:140:5)\r\n    at Compilation.applyPluginsAsyncSeries (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:142:13)\r\n    at self.applyPluginsAsync.err (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:601:10)\r\n    at next (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:138:11)\r\n    at ExtractTextPlugin.<anonymous> (/Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/index.js:314:4)\r\n    at Compilation.applyPluginsAsyncSeries (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:142:13)\r\n    at sealPart2 (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:597:9)\r\n    at next (/Users/Karol/www/projects/project/node_modules/tapable/lib/Tapable.js:138:11)\r\n    at ExtractTextPlugin.<anonymous> (/Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/index.js:290:5)\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:356:16\r\n    at iteratorCallback (/Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:936:13)\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:840:16\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/index.js:274:6\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:356:16\r\n    at iteratorCallback (/Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:936:13)\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/node_modules/async/dist/async.js:840:16\r\n    at /Users/Karol/www/projects/project/node_modules/extract-text-webpack-plugin/index.js:264:9\r\n    at rebuilding.forEach.cb (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:475:29)\r\n    at Array.forEach (native)\r\n    at callback (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:475:15)\r\n    at processModuleDependencies (/Users/Karol/www/projects/project/node_modules/webpack/lib/Compilation.js:494:5)\r\n    at _combinedTickCallback (internal/process/next_tick.js:67:7)\r\n    at process._tickCallback (internal/process/next_tick.js:98:9)\r\n```. @jhnns My other CSS files without `sass-loader` work fine with source maps (I use there `postcss-loader` and `css-loader`). Also this only happens when I build for production so I'm using `extractTextWebpackPlugin` and `css-loader`.. @jhnns It's pretty common. I've checked and I have error due to Foundation CSS mixins - they also have `&` in `_mixins.scss` - https://github.com/zurb/foundation-sites/blob/develop/scss/util/_mixins.scss.. ",
    "maggo": "Can confirm, same error and stack trace. It's also fixed by setting the `sourceMap` option in css-loader to false. Hi @jhnns in my case the error seems to be `extract-text-webpack-plugin` in conjunction with the `minimize` setting from `LoaderOptionsPlugin` see my example repo: https://github.com/maggo/sass-loader-sourcemaps-bug. Can confirm, same error and stack trace. It's also fixed by setting the `sourceMap` option in css-loader to false. Hi @jhnns in my case the error seems to be `extract-text-webpack-plugin` in conjunction with the `minimize` setting from `LoaderOptionsPlugin` see my example repo: https://github.com/maggo/sass-loader-sourcemaps-bug. ",
    "ash14": "I'm having the same issue. If anyone's interested I have a simpler case reproduced in [this repo](https://github.com/ash14/sass-loader-bug)\r\n\r\nOne possible workaround is to use `outputStyle: 'compact'` instead of `compressed`. I'm having the same issue. If anyone's interested I have a simpler case reproduced in [this repo](https://github.com/ash14/sass-loader-bug)\r\n\r\nOne possible workaround is to use `outputStyle: 'compact'` instead of `compressed`. ",
    "kfbow": "+1\r\n\r\n```\r\nError: Invalid mapping: {\"generated\":{\"line\":1,\"column\":1670},\"source\":\"webpack:///source/scss/foundation/components/_global.scss\",\"original\":{\"line\":239,\"column\":-1},\"name\":null}\r\n```\r\n. +1\r\n\r\n```\r\nError: Invalid mapping: {\"generated\":{\"line\":1,\"column\":1670},\"source\":\"webpack:///source/scss/foundation/components/_global.scss\",\"original\":{\"line\":239,\"column\":-1},\"name\":null}\r\n```\r\n. ",
    "albertogasparin": "I'm also having this issue. @ash14 Changing the `outputStyle` does not make any difference (tried all options). The file causing the error is imported from the node_modules folder ([source here](https://github.com/albertogasparin/pollicino-ui/blob/master/scss/_mixins.scss))\r\n\r\n```\r\nError: Invalid mapping: {\"generated\":{\"line\":2233,\"column\":0},\"source\":\"/.../node_modules/pollicino-ui/scss/_mixins.scss\",\"original\":{\"line\":64,\"column\":-1},\"name\":null}\r\n    at SourceMapGenerator_validateMapping [as _validateMapping] (/.../node_modules/source-map/lib/source-map-generator.js:277:13)\r\n    at SourceMapGenerator_addMapping [as addMapping] (/.../node_modules/source-map/lib/source-map-generator.js:101:12)\r\n    ...\r\n```. I'm also having this issue. @ash14 Changing the `outputStyle` does not make any difference (tried all options). The file causing the error is imported from the node_modules folder ([source here](https://github.com/albertogasparin/pollicino-ui/blob/master/scss/_mixins.scss))\r\n\r\n```\r\nError: Invalid mapping: {\"generated\":{\"line\":2233,\"column\":0},\"source\":\"/.../node_modules/pollicino-ui/scss/_mixins.scss\",\"original\":{\"line\":64,\"column\":-1},\"name\":null}\r\n    at SourceMapGenerator_validateMapping [as _validateMapping] (/.../node_modules/source-map/lib/source-map-generator.js:277:13)\r\n    at SourceMapGenerator_addMapping [as addMapping] (/.../node_modules/source-map/lib/source-map-generator.js:101:12)\r\n    ...\r\n```. ",
    "b4cedev": "+1 \r\nJust ran into the same problem: with webpack 2 due to file foundation-si\r\n  tes/scss/components/_button.scss from bower install (v.6.2.4):\r\n\r\n`Invalid mapping: {\"generated\":{\"line\":2828,\"column\":2},\"source\":\"webpack:///bower_components/foundation-si\r\n  tes/scss/components/_button.scss\",\"original\":{\"line\":155,\"column\":-10},\"name\":null}`\r\n\r\nOnly \"compressed\" output triggered it, \"compact\" & \"verbose\" are working.. +1 \r\nJust ran into the same problem: with webpack 2 due to file foundation-si\r\n  tes/scss/components/_button.scss from bower install (v.6.2.4):\r\n\r\n`Invalid mapping: {\"generated\":{\"line\":2828,\"column\":2},\"source\":\"webpack:///bower_components/foundation-si\r\n  tes/scss/components/_button.scss\",\"original\":{\"line\":155,\"column\":-10},\"name\":null}`\r\n\r\nOnly \"compressed\" output triggered it, \"compact\" & \"verbose\" are working.. ",
    "zeusbangayan": "I have the same problem:\r\n\r\n{\r\n\t\t\t\t\t\t\tloader: \"sass-loader\",\r\n\t\t\t\t\t\t\toptions: {\r\n\t\t\t\t\t\t\t\tsourceMap: true,\r\n\t\t\t\t\t\t\t\toutputStyle: PROD ? \"compressed\" : \"nested\"\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\r\nCompressed is NOT working.\r\n\r\nI agree with @b4cedev, only Compact and verbose are working.. I have the same problem:\r\n\r\n{\r\n\t\t\t\t\t\t\tloader: \"sass-loader\",\r\n\t\t\t\t\t\t\toptions: {\r\n\t\t\t\t\t\t\t\tsourceMap: true,\r\n\t\t\t\t\t\t\t\toutputStyle: PROD ? \"compressed\" : \"nested\"\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\r\nCompressed is NOT working.\r\n\r\nI agree with @b4cedev, only Compact and verbose are working.. ",
    "Vinnl": "(I've hesitated posting this since two people already seem to have observed the same, but just in case, another confirmation with details...)\r\n\r\nI'm running into this too, and with a similar configuration: ExtractTextPlugin, Sass and PostCSS. Indeed adding an `outputStyle` of `compact` made the error go away. The error message points to a line containing only `&:focus {`, also located inside a mixin (in Foundations `_text.scss`).. (I've hesitated posting this since two people already seem to have observed the same, but just in case, another confirmation with details...)\r\n\r\nI'm running into this too, and with a similar configuration: ExtractTextPlugin, Sass and PostCSS. Indeed adding an `outputStyle` of `compact` made the error go away. The error message points to a line containing only `&:focus {`, also located inside a mixin (in Foundations `_text.scss`).. ",
    "Andrey7287": "Any solution ?\r\n\r\noutputStyle: 'compact' doesn`t work for me :( .. Try without quotes.. Any solution ?\r\n\r\noutputStyle: 'compact' doesn`t work for me :( .. Try without quotes.. ",
    "narthollis": "It appears this may be related to https://github.com/sass/libsass/issues/2312. Ah, cool thanks very much.\r\n\r\nI ended up working around this issue by using a webpack alias and `~theme/variables.scss` imports.\r\nDownside of this is that webstorm can't resolve the import anymore so no code completion for variable :(\r\n\r\nOhwell. Thanks for clarifying this.\r\n\r\nWhen I get some spare hours, I will probably take a look at implementing my own importer.. It appears this may be related to https://github.com/sass/libsass/issues/2312. Ah, cool thanks very much.\r\n\r\nI ended up working around this issue by using a webpack alias and `~theme/variables.scss` imports.\r\nDownside of this is that webstorm can't resolve the import anymore so no code completion for variable :(\r\n\r\nOhwell. Thanks for clarifying this.\r\n\r\nWhen I get some spare hours, I will probably take a look at implementing my own importer.. ",
    "iwinux": "Temp fix:\r\n\r\n```javascript\r\n{\r\n  test: /\\.scss$/,\r\n  use: [\r\n    'style-loader',\r\n    { loader: 'css-loader', options: { sourceMap: true } },\r\n    { loader: 'sass-loader', options: { sourceMap: false } },  // disable source map\r\n  ]\r\n}\r\n```\r\n\r\nAt least we can see the original filename of CSS styles.... Temp fix:\r\n\r\n```javascript\r\n{\r\n  test: /\\.scss$/,\r\n  use: [\r\n    'style-loader',\r\n    { loader: 'css-loader', options: { sourceMap: true } },\r\n    { loader: 'sass-loader', options: { sourceMap: false } },  // disable source map\r\n  ]\r\n}\r\n```\r\n\r\nAt least we can see the original filename of CSS styles.... ",
    "mishelen": "In my case value of column number is equal to length of mixin name. I use expanded outputStyle\r\n\r\n```\r\n\"source\":\"/app/node_modules/foundation-sites/scss/forms/_text.scss\",\r\n\"original\":{\"line\":111,\"column\":-12},\"name\":null}\r\n```\r\nAnd that mixin:\r\n\r\n```scss\r\n@mixin form-element {\r\n//....\r\n  &:focus {}\r\n}\r\n```\r\nMay be it occasion)) But logically, what we do with sass placeholder? Replace! even with mixin name, isnt it)) Also name includes hyphen (negative, minus), Foundation seems to be loving hyphens in names)) \r\n\r\n. Ok, part of related webpack config is:\r\n\r\n```js\r\n// ...\r\ndevtool: process.env.NODE_ENV === 'PRODUCTION' ? 'source-map' : 'inline-source-map',\r\n// ...\r\n{\r\n     test: /\\.scss$/, use: ExtractTextPlugin.extract({\r\n     fallback: 'style-loader',\r\n     use: [{\r\n     loader: 'css-loader', options: {\r\n          sourceMap: true\r\n     }\r\n}, {\r\n     loader: 'postcss-loader',\r\n     options: {\r\n     sourceMap: true,\r\n     plugins: function () {\r\n          return [\r\n               autoprefixer({\r\n                    cascade: false,\r\n                         browsers: ['last 2 versions']\r\n                    })\r\n               ];\r\n          }\r\n     }\r\n}, {\r\n     loader: 'sass-loader', options: {\r\n          sourceMap: true,\r\n          outputStyle: 'expanded',\r\n          includePaths: [\r\n               path.resolve(ROOT_PATH, 'node_modules/foundation-sites/scss')\r\n          ]\r\n     }\r\n}]\r\n```\r\n\r\nI'm have just noticed **that webpack without `-p` flag compiles styles nicely.** This flag launch webpack's  Uglify plugin, as all known.  And define `process.env.NODE_ENV=\"production\"`. But I by hand set this variable and remove flag `-p` and this says the problem is in UglifyJS but I dont know how it related to SCSS... and source maps\r\n\r\nStacktrace of error is repeated locally and on Heroku:\r\n\r\n```\r\n/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-map-generator.js:289\r\n      throw new Error('Invalid mapping: ' + JSON.stringify({\r\n      ^\r\n\r\nError: Invalid mapping: {\"generated\":{\"line\":1,\"column\":39305},\"source\":\"/home/mishelen/projects/nonameapp/node_modules/foundation-sites/scss/forms/_text.scss\",\"original\":{\"line\":111,\"column\":-12},\"name\":null}\r\n    at SourceMapGenerator_validateMapping [as _validateMapping] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-map-generator.js:289:13)\r\n    at SourceMapGenerator_addMapping [as addMapping] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-map-generator.js:101:12)\r\n    at /home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:351:13\r\n    at SourceNode_walk [as walk] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:230:9)\r\n    at SourceNode_walk [as walk] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:226:13)\r\n    at SourceNode_walk [as walk] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:226:13)\r\n    at SourceNode_toStringWithSourceMap [as toStringWithSourceMap] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:342:8)\r\n    at ConcatSource.proto.sourceAndMap (/home/mishelen/projects/nonameapp/node_modules/webpack-sources/lib/SourceAndMapMixin.js:30:32)\r\n    at getTaskForFile (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/SourceMapDevToolPlugin.js:33:30)\r\n    at chunk.files.forEach.file (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/SourceMapDevToolPlugin.js:91:21)\r\n    at Array.forEach (<anonymous>)\r\n    at /home/mishelen/projects/nonameapp/node_modules/webpack/lib/SourceMapDevToolPlugin.js:89:18\r\n    at Array.forEach (<anonymous>)\r\n    at Compilation.<anonymous> (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/SourceMapDevToolPlugin.js:88:12)\r\n    at Compilation.applyPlugins1 (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:75:14)\r\n    at self.applyPluginsAsync.err (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/Compilation.js:661:11)\r\n    at next (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:202:11)\r\n    at Compilation.<anonymous> (/home/mishelen/projects/nonameapp/node_modules/uglifyjs-webpack-plugin/dist/index.js:244:6)\r\n    at Compilation.applyPluginsAsyncSeries (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:206:13)\r\n    at self.applyPluginsAsync.err (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/Compilation.js:657:10)\r\n    at next (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:202:11)\r\n    at Compilation.<anonymous> (/home/mishelen/projects/nonameapp/node_modules/extract-text-webpack-plugin/dist/index.js:272:11)\r\n    at Compilation.applyPluginsAsyncSeries (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:206:13)\r\n    at sealPart2 (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/Compilation.js:653:9)\r\n    at next (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:202:11)\r\n    at /home/mishelen/projects/nonameapp/node_modules/extract-text-webpack-plugin/dist/index.js:241:13\r\n    at /home/mishelen/projects/nonameapp/node_modules/async/dist/async.js:421:16\r\n    at iteratorCallback (/home/mishelen/projects/nonameapp/node_modules/async/dist/async.js:998:13)\r\n    at /home/mishelen/projects/nonameapp/node_modules/async/dist/async.js:906:16\r\n    at /home/mishelen/projects/nonameapp/node_modules/extract-text-webpack-plugin/dist/index.js:224:15\r\n\r\n```\r\n. In my case value of column number is equal to length of mixin name. I use expanded outputStyle\r\n\r\n```\r\n\"source\":\"/app/node_modules/foundation-sites/scss/forms/_text.scss\",\r\n\"original\":{\"line\":111,\"column\":-12},\"name\":null}\r\n```\r\nAnd that mixin:\r\n\r\n```scss\r\n@mixin form-element {\r\n//....\r\n  &:focus {}\r\n}\r\n```\r\nMay be it occasion)) But logically, what we do with sass placeholder? Replace! even with mixin name, isnt it)) Also name includes hyphen (negative, minus), Foundation seems to be loving hyphens in names)) \r\n\r\n. Ok, part of related webpack config is:\r\n\r\n```js\r\n// ...\r\ndevtool: process.env.NODE_ENV === 'PRODUCTION' ? 'source-map' : 'inline-source-map',\r\n// ...\r\n{\r\n     test: /\\.scss$/, use: ExtractTextPlugin.extract({\r\n     fallback: 'style-loader',\r\n     use: [{\r\n     loader: 'css-loader', options: {\r\n          sourceMap: true\r\n     }\r\n}, {\r\n     loader: 'postcss-loader',\r\n     options: {\r\n     sourceMap: true,\r\n     plugins: function () {\r\n          return [\r\n               autoprefixer({\r\n                    cascade: false,\r\n                         browsers: ['last 2 versions']\r\n                    })\r\n               ];\r\n          }\r\n     }\r\n}, {\r\n     loader: 'sass-loader', options: {\r\n          sourceMap: true,\r\n          outputStyle: 'expanded',\r\n          includePaths: [\r\n               path.resolve(ROOT_PATH, 'node_modules/foundation-sites/scss')\r\n          ]\r\n     }\r\n}]\r\n```\r\n\r\nI'm have just noticed **that webpack without `-p` flag compiles styles nicely.** This flag launch webpack's  Uglify plugin, as all known.  And define `process.env.NODE_ENV=\"production\"`. But I by hand set this variable and remove flag `-p` and this says the problem is in UglifyJS but I dont know how it related to SCSS... and source maps\r\n\r\nStacktrace of error is repeated locally and on Heroku:\r\n\r\n```\r\n/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-map-generator.js:289\r\n      throw new Error('Invalid mapping: ' + JSON.stringify({\r\n      ^\r\n\r\nError: Invalid mapping: {\"generated\":{\"line\":1,\"column\":39305},\"source\":\"/home/mishelen/projects/nonameapp/node_modules/foundation-sites/scss/forms/_text.scss\",\"original\":{\"line\":111,\"column\":-12},\"name\":null}\r\n    at SourceMapGenerator_validateMapping [as _validateMapping] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-map-generator.js:289:13)\r\n    at SourceMapGenerator_addMapping [as addMapping] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-map-generator.js:101:12)\r\n    at /home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:351:13\r\n    at SourceNode_walk [as walk] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:230:9)\r\n    at SourceNode_walk [as walk] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:226:13)\r\n    at SourceNode_walk [as walk] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:226:13)\r\n    at SourceNode_toStringWithSourceMap [as toStringWithSourceMap] (/home/mishelen/projects/nonameapp/node_modules/source-map/lib/source-node.js:342:8)\r\n    at ConcatSource.proto.sourceAndMap (/home/mishelen/projects/nonameapp/node_modules/webpack-sources/lib/SourceAndMapMixin.js:30:32)\r\n    at getTaskForFile (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/SourceMapDevToolPlugin.js:33:30)\r\n    at chunk.files.forEach.file (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/SourceMapDevToolPlugin.js:91:21)\r\n    at Array.forEach (<anonymous>)\r\n    at /home/mishelen/projects/nonameapp/node_modules/webpack/lib/SourceMapDevToolPlugin.js:89:18\r\n    at Array.forEach (<anonymous>)\r\n    at Compilation.<anonymous> (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/SourceMapDevToolPlugin.js:88:12)\r\n    at Compilation.applyPlugins1 (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:75:14)\r\n    at self.applyPluginsAsync.err (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/Compilation.js:661:11)\r\n    at next (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:202:11)\r\n    at Compilation.<anonymous> (/home/mishelen/projects/nonameapp/node_modules/uglifyjs-webpack-plugin/dist/index.js:244:6)\r\n    at Compilation.applyPluginsAsyncSeries (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:206:13)\r\n    at self.applyPluginsAsync.err (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/Compilation.js:657:10)\r\n    at next (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:202:11)\r\n    at Compilation.<anonymous> (/home/mishelen/projects/nonameapp/node_modules/extract-text-webpack-plugin/dist/index.js:272:11)\r\n    at Compilation.applyPluginsAsyncSeries (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:206:13)\r\n    at sealPart2 (/home/mishelen/projects/nonameapp/node_modules/webpack/lib/Compilation.js:653:9)\r\n    at next (/home/mishelen/projects/nonameapp/node_modules/tapable/lib/Tapable.js:202:11)\r\n    at /home/mishelen/projects/nonameapp/node_modules/extract-text-webpack-plugin/dist/index.js:241:13\r\n    at /home/mishelen/projects/nonameapp/node_modules/async/dist/async.js:421:16\r\n    at iteratorCallback (/home/mishelen/projects/nonameapp/node_modules/async/dist/async.js:998:13)\r\n    at /home/mishelen/projects/nonameapp/node_modules/async/dist/async.js:906:16\r\n    at /home/mishelen/projects/nonameapp/node_modules/extract-text-webpack-plugin/dist/index.js:224:15\r\n\r\n```\r\n. ",
    "Slapbox": "Regarding, \"I used expanded outputStyle\"\r\n\r\n@mishelen Can you elaborate on what you mean by this? Is there a way to have it show additional details on failure? I've not been able to track down the source of my occurrence.. @mishelen Thank you. This is a hugely helpful reference point in trying to pin down my own instance of this issue.. Regarding, \"I used expanded outputStyle\"\r\n\r\n@mishelen Can you elaborate on what you mean by this? Is there a way to have it show additional details on failure? I've not been able to track down the source of my occurrence.. @mishelen Thank you. This is a hugely helpful reference point in trying to pin down my own instance of this issue.. ",
    "denyo": "Here is what I just figured out as a workaround.\r\nThe location where I had the error with `column: -1` looked like this:\r\n```\r\n@mixin flexWithCols {\r\n  display: flex;\r\n\r\n  &__col {\r\n    ... // more styles here\r\n  }\r\n}\r\n```\r\n\r\nThe error appeared on the line with `&__col {` which is intended by 2 spaces. \r\nNow simply by changing the indentation to 4 spaces fixes the error:\r\n```\r\n@mixin flexWithCols {\r\n  display: flex;\r\n\r\n    &__col {\r\n      ... // more styles here\r\n    }\r\n}\r\n```. Here is what I just figured out as a workaround.\r\nThe location where I had the error with `column: -1` looked like this:\r\n```\r\n@mixin flexWithCols {\r\n  display: flex;\r\n\r\n  &__col {\r\n    ... // more styles here\r\n  }\r\n}\r\n```\r\n\r\nThe error appeared on the line with `&__col {` which is intended by 2 spaces. \r\nNow simply by changing the indentation to 4 spaces fixes the error:\r\n```\r\n@mixin flexWithCols {\r\n  display: flex;\r\n\r\n    &__col {\r\n      ... // more styles here\r\n    }\r\n}\r\n```. ",
    "jotavejv": "If the problem is related to sass, it is probably due to \"compressed\" outputStyle. I figured it out just change compressed to \"compact\".. If the problem is related to sass, it is probably due to \"compressed\" outputStyle. I figured it out just change compressed to \"compact\".. ",
    "ingro": "Thanks @jotavejv , that fixed my error!. Thanks @jotavejv , that fixed my error!. ",
    "drewlustro": "+1 on this... anyone know how to keep `sourceMap: true` for both the `css-loader` and `sass-loader` ?. +1 on this... anyone know how to keep `sourceMap: true` for both the `css-loader` and `sass-loader` ?. ",
    "jcapozzi": "Google brought me here after searching for a solution for sass/libsass#2312 which is sadly locked so I can't comment there but maybe this will help someone else:\r\n\r\nBefore:\r\n`\r\n.parent {\r\n  &:hover {\r\n    color: red;\r\n  }\r\n}\r\n`\r\n\r\nAfter:\r\n`\r\n.parent {\r\n  @at-root #{&}:hover {\r\n    color: red;\r\n  }\r\n}\r\n`\r\n. Google brought me here after searching for a solution for sass/libsass#2312 which is sadly locked so I can't comment there but maybe this will help someone else:\r\n\r\nBefore:\r\n`\r\n.parent {\r\n  &:hover {\r\n    color: red;\r\n  }\r\n}\r\n`\r\n\r\nAfter:\r\n`\r\n.parent {\r\n  @at-root #{&}:hover {\r\n    color: red;\r\n  }\r\n}\r\n`\r\n. ",
    "cj": "@hiroshishu I'm getting the same error.  If you change `@import '../../../../../scss/mixin';` to `@import url('../../../../../scss/mixin');` it will work.  I'm not sure why without digging, I'd love to know if someone has the answer.. @hiroshishu I'm getting the same error.  If you change `@import '../../../../../scss/mixin';` to `@import url('../../../../../scss/mixin');` it will work.  I'm not sure why without digging, I'd love to know if someone has the answer.. ",
    "JosephBlythe": "Have same issue, adding 'url' in the import doesn't solve it for me either as it seems the css-loader can not resolve the relative paths in the imported sass file.\r\n\r\nVue component\r\n```\r\n<style lang=\"sass\">\r\n@import url('../../sass/_base.scss');\r\n...\r\n```\r\n\r\n_base.scss\r\n```\r\n@import 'bourbon';\r\n@import \"_variables\";\r\n@import \"mixins/_all.scss\";\r\n```. Have same issue, adding 'url' in the import doesn't solve it for me either as it seems the css-loader can not resolve the relative paths in the imported sass file.\r\n\r\nVue component\r\n```\r\n<style lang=\"sass\">\r\n@import url('../../sass/_base.scss');\r\n...\r\n```\r\n\r\n_base.scss\r\n```\r\n@import 'bourbon';\r\n@import \"_variables\";\r\n@import \"mixins/_all.scss\";\r\n```. ",
    "jrwebdev": "I had this issue with Webpack 2.2.1 and I tracked it down to [`sass-variable-loader`](https://github.com/nordnet/sass-variable-loader) causing the problem with an import that bypasses the other loaders (e.g. `import theme from '!!sass-variable-loader!../styles/_theme.scss';`). Weirdly though, it was working fine, and when I added a couple of more components that imported the same file through `sass-loader`, that's when the problems started happening. I was unable to figure out the root cause though - just switching from `sass-variable-loader` to `sass-variables-loader` fixed it for me in the end.. I had this issue with Webpack 2.2.1 and I tracked it down to [`sass-variable-loader`](https://github.com/nordnet/sass-variable-loader) causing the problem with an import that bypasses the other loaders (e.g. `import theme from '!!sass-variable-loader!../styles/_theme.scss';`). Weirdly though, it was working fine, and when I added a couple of more components that imported the same file through `sass-loader`, that's when the problems started happening. I was unable to figure out the root cause though - just switching from `sass-variable-loader` to `sass-variables-loader` fixed it for me in the end.. ",
    "jainshravan123": "I am also facing the same issue.. @evilebottnawi We are using sass-loader in our project. I was facing following issue.\r\n```\r\n(node:18807) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\r\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\r\n\r\nTypeError: undefined is not a function\r\n```\r\n\r\nSo i tried to put the console logs inside sass-loader node-module . Here i can see that the flow is going inside startResolving function which is inside webpackImporter.js of sass-loader file.\r\n\r\nIs there any quick solution for this?\r\n. @evilebottnawi I already updated `sass-loader` to it's latest version i.e. `6.0.6` but still i am facing the same issue.. @michael-ciniawsky I added some console logs in `sass-loader`. So It was getting stuck somewhere and all of the valid logs were not printing. So i came to know that it's happening because of `sass-loader` only. And i tried to run my project without `sass-loader` too so without that it's running absolutely fine. . I am also facing the same issue.. @evilebottnawi We are using sass-loader in our project. I was facing following issue.\r\n```\r\n(node:18807) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\r\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\r\n\r\nTypeError: undefined is not a function\r\n```\r\n\r\nSo i tried to put the console logs inside sass-loader node-module . Here i can see that the flow is going inside startResolving function which is inside webpackImporter.js of sass-loader file.\r\n\r\nIs there any quick solution for this?\r\n. @evilebottnawi I already updated `sass-loader` to it's latest version i.e. `6.0.6` but still i am facing the same issue.. @michael-ciniawsky I added some console logs in `sass-loader`. So It was getting stuck somewhere and all of the valid logs were not printing. So i came to know that it's happening because of `sass-loader` only. And i tried to run my project without `sass-loader` too so without that it's running absolutely fine. . ",
    "karptonite": "@evilebottnawi So while I can't replicate the error exactly, i can replicate it sort of. Here is an example:\r\nhttps://github.com/karptonite/angular2-webpack-starter/tree/updated-example\r\n\r\nIt now seems to be the case that ANY quotes (single or double) in a sass mixin are a problem, but only when resolve-url-loader is part of the chain.\r\nhttps://github.com/karptonite/angular2-webpack-starter/commit/afb24c1933669d5e62aac608f839c9d75b4c0cb8\r\n\r\nSorry I didn't have time to nail this down further, but if you check out the `updated-example` branch of that repo and follow the instructions in the README, you should see the error.\r\n\r\nI am no longer using webpack directly--I switched to angular-cli, but this was a frustrating issue, so I want to help make sure it doesn't hit anyone else!. @evilebottnawi So while I can't replicate the error exactly, i can replicate it sort of. Here is an example:\r\nhttps://github.com/karptonite/angular2-webpack-starter/tree/updated-example\r\n\r\nIt now seems to be the case that ANY quotes (single or double) in a sass mixin are a problem, but only when resolve-url-loader is part of the chain.\r\nhttps://github.com/karptonite/angular2-webpack-starter/commit/afb24c1933669d5e62aac608f839c9d75b4c0cb8\r\n\r\nSorry I didn't have time to nail this down further, but if you check out the `updated-example` branch of that repo and follow the instructions in the README, you should see the error.\r\n\r\nI am no longer using webpack directly--I switched to angular-cli, but this was a frustrating issue, so I want to help make sure it doesn't hit anyone else!. ",
    "patrickodacre": "@manuelro Did you solve this problem? I'm having the same issue.. @manuelro Did you solve this problem? I'm having the same issue.. ",
    "manuelro": "No, but i'll have to. I'm planning to create isolated environments to reproduce the failure and understand what's going on. I'm currently working on another project, but I will eventually get back to this (cause I have too.). No, but i'll have to. I'm planning to create isolated environments to reproduce the failure and understand what's going on. I'm currently working on another project, but I will eventually get back to this (cause I have too.). ",
    "dancrumb": "I think this is a `node-sass` issue. \r\n\r\nI hit this problem, found *this* issue and then tried to diagnose it. I was able to recreate the problem just using `node-sass` (which is the heart of the sass-loader).\r\n\r\nI'm continuing to investigate and will link to the relevant issue once I find it\r\n. Check out https://github.com/sass/node-sass/issues/1469\r\n\r\nLooks like this all stems from Sass behaviour and is considered working as designed.. While it makes sense that `sass-loader` require `webpack` as a peer dependency (since it's effectively a plugin to `webpack`), I don't think it's appropriate to call `node-sass` a peer dependency.\r\n\r\n`sass-loader` _requires_ `node-sass` in order to fundamentally function. That's not a peer dependency, that's a direct dependency.. I think this is a `node-sass` issue. \r\n\r\nI hit this problem, found *this* issue and then tried to diagnose it. I was able to recreate the problem just using `node-sass` (which is the heart of the sass-loader).\r\n\r\nI'm continuing to investigate and will link to the relevant issue once I find it\r\n. Check out https://github.com/sass/node-sass/issues/1469\r\n\r\nLooks like this all stems from Sass behaviour and is considered working as designed.. While it makes sense that `sass-loader` require `webpack` as a peer dependency (since it's effectively a plugin to `webpack`), I don't think it's appropriate to call `node-sass` a peer dependency.\r\n\r\n`sass-loader` _requires_ `node-sass` in order to fundamentally function. That's not a peer dependency, that's a direct dependency.. ",
    "cyb-prajaktac": "How did you solve the issue? I upgraded `node-sass` to `4.5.0` but still it is not working.. How did you solve the issue? I upgraded `node-sass` to `4.5.0` but still it is not working.. ",
    "ramakrishnamundru": "I have solved the problem by using the url() syntax to import external resources.\r\nso now I use\r\n```\r\n@import url('https://fonts.googleapis.com/css?family=Hind:600,400');\r\n```\r\nAnd I didn't face this problem again.\r\nThanks. I have solved the problem by using the url() syntax to import external resources.\r\nso now I use\r\n```\r\n@import url('https://fonts.googleapis.com/css?family=Hind:600,400');\r\n```\r\nAnd I didn't face this problem again.\r\nThanks. ",
    "morriq": "@leongaban seems like someone else resolve your problem. :)\r\n\r\n@jhnns thank you but with tilde (~) the imported file is not in webpack's chunk. It's separated and that way, there is requirement to keep node_modules/animate.css/animate.css in build package.. @leongaban seems like someone else resolve your problem. :)\r\n\r\n@jhnns thank you but with tilde (~) the imported file is not in webpack's chunk. It's separated and that way, there is requirement to keep node_modules/animate.css/animate.css in build package.. ",
    "thibmaek": "Seeing the same issue over here with .scss syntax. Seeing the same issue over here with .scss syntax. ",
    "emericmourot": "Did you try to compile your file in sass syntax with ?indentedSyntax parameter set ?\r\n`loader: [\"css-loader\", \"sass-loader?indentedSyntax\"]`\r\nSee http://stackoverflow.com/questions/33310216/scss-loader-with-webpack. Did you try to compile your file in sass syntax with ?indentedSyntax parameter set ?\r\n`loader: [\"css-loader\", \"sass-loader?indentedSyntax\"]`\r\nSee http://stackoverflow.com/questions/33310216/scss-loader-with-webpack. ",
    "brunoravanhani": "The code was in a framework called [bulma](http://bulma.io/), but i changed my framework in that project. The framework was write in `sass ` syntax and my code in `scss` syntax.. Yes, can close.. The code was in a framework called [bulma](http://bulma.io/), but i changed my framework in that project. The framework was write in `sass ` syntax and my code in `scss` syntax.. Yes, can close.. ",
    "pamtbaau": "@asolopovas  Same issue here after upgrading to 5.0.0. Your suggested solution did not fix mine elas... Rolled back to 4.1.1 and issue disappeared.. @asolopovas includePaths work fine for me in 4.1.1:\r\n    `new webpack.LoaderOptionsPlugin({\r\n          options: {\r\n                sassLoader: {\r\n                    includePaths: [\r\n                        path.resolve(__dirname, '../src/app/assets/sass'), \r\n                        path.resolve(__dirname, '../node_modules/bootstrap/scss')\r\n                    ]\r\n                }\r\n            }\r\n        })`. @asolopovas  Same issue here after upgrading to 5.0.0. Your suggested solution did not fix mine elas... Rolled back to 4.1.1 and issue disappeared.. @asolopovas includePaths work fine for me in 4.1.1:\r\n    `new webpack.LoaderOptionsPlugin({\r\n          options: {\r\n                sassLoader: {\r\n                    includePaths: [\r\n                        path.resolve(__dirname, '../src/app/assets/sass'), \r\n                        path.resolve(__dirname, '../node_modules/bootstrap/scss')\r\n                    ]\r\n                }\r\n            }\r\n        })`. ",
    "asolopovas": "@pamtbaau  solution works on 4.1.1,  I am not suggesting  that it does on 5.  But version 4.1.1 does not work with options.includePaths either. . @pamtbaau if you read through  documentation you will see that it should be working without LoaderOptionsPlugin,  that's the point I am trying to make. . I will tomorrow . @jhnns here you go I have created two webpack configs one that works second one that fails\r\nhttps://github.com/asolopovas/sass-loader-test. @jhnns I have tried webpack 2.2.1 with both sass-loader@5.0.0 and sass-loader@5.0.1 both throw an error if I place includePaths into options of sass loader like that: \r\n\r\n```\r\n                    {\r\n                        loader: 'sass-loader',\r\n                        options: {\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'vendor/zurb/foundation/scss'),\r\n                                path.resolve(__dirname, 'node_modules/motion-ui/src'),\r\n                                path.resolve(__dirname, 'resources/assets/sass')\r\n                            ],\r\n                            sourceMap: true\r\n                        }\r\n                    }\r\n```\r\nWhich has not worked in the [repository](https://github.com/asolopovas/sass-loader-test) provided in webpack.config.error.js, I tested it on windows 10 x64 machine so clearly something fails. . @jhnns next time I will. Thanks for reopening . Still does not work on my machine. \r\n\r\n```\r\nts-loader: Using typescript@2.2.1 and C:\\vhosts\\3oakdb\\tsconfig.json\r\nwebpack built 60ee2be6571715396cd7 in 13194ms\r\nHash: 60ee2be6571715396cd7\r\nVersion: webpack 2.2.1\r\nTime: 13194ms\r\n     Asset     Size  Chunks                    Chunk Names\r\n    app.js  3.82 MB       0  [emitted]  [big]  main\r\napp.js.map   4.8 MB       0  [emitted]         main\r\n\r\nERROR in ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?{\"id\":\"data-v-d6ecb70a\",\"scoped\":false,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js!./~/vue-loader/lib/selector.js?type=styles&index=0!./resources/assets/js/views/notifications/Notification.vue\r\nModule build failed: \r\n    @import \"libs/animate.scss/animate.scss\";\r\n^\r\n      File to import not found or unreadable: libs/animate.scss/animate.scss.\r\nParent style sheet: stdin\r\n      in C:\\vhosts\\3oakdb\\resources\\assets\\js\\views\\notifications\\Notification.vue (line 32, column 1)\r\n @ ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?{\"id\":\"data-v-d6ecb70a\",\"scoped\":false,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js!./~/vue-loader/lib/selector.js?type=styles&index=0!./resources/assets/js/views/notifications/Notification.vue 4:14-365 13:3-17:5 14:22-373\r\n @ ./resources/assets/js/views/notifications/Notification.vue\r\n @ ./~/babel-loader/lib!./~/vue-loader/lib/selector.js?type=script&index=0!./resources/assets/js/App.vue\r\n @ ./resources/assets/js/App.vue\r\n @ ./resources/assets/js/app.js\r\n @ multi babel-polyfill webpack/hot/dev-server webpack-hot-middleware/client?reload=true ./app\r\n\r\nERROR in ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?{\"id\":\"data-v-08536deb\",\"scoped\":false,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js!./resources/assets/js/views/modules/styles/search.scss\r\nModule build failed: \r\n@import \"foundation\";\r\n\r\n.pagination {\r\n  display: block;\r\n  text-align: center;\r\n  padding-left: 0;\r\n  margin-bottom: rem-calc(10);\r\n  margin-top: rem-calc(5);\r\n  border-radius: 4px;\r\n  font-size: 0;\r\n  li {\r\n    font-size: 16px;\r\n    position: relative;\r\n    display: inline-block;\r\n    border: 1px solid #ddd;\r\n    margin: -1px;\r\n    a {\r\n      display: block;\r\n      padding: 6px 12px;\r\n      line-height: 1.42857143;\r\n      color: #428bca;\r\n      text-decoration: none;\r\n      background-color: #fff;\r\n    }\r\n    &.disabled {\r\n      a {\r\n        color: #777;\r\n        cursor: not-allowed;\r\n        background-color: #fff;\r\n        border-color: #ddd;\r\n      }\r\n    }\r\n    &.active > a {\r\n      color: #fff;\r\n      cursor: default;\r\n      background-color: #428bca;\r\n      border-color: #428bca;\r\n    }\r\n  }\r\n}\r\n\r\n^\r\n      File to import not found or unreadable: foundation.\r\nParent style sheet: stdin\r\n      in C:\\vhosts\\3oakdb\\resources\\assets\\js\\views\\modules\\styles\\search.scss (line 1, column 1)\r\n @ ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?{\"id\":\"data-v-08536deb\",\"scoped\":false,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js!./resources/assets/js/views/modules/styles/search.scss 4:14-294 13:3-17:5 14:22-302\r\n @ ./resources/assets/js/views/modules/Pagination.vue\r\n @ ./resources/assets/js/views/mixins/indexView.js\r\n @ ./~/babel-loader/lib!./~/vue-loader/lib/selector.js?type=script&index=0!./resources/assets/js/views/Items.vue\r\n @ ./resources/assets/js/views/Items.vue\r\n @ ./resources/assets/js/router.js\r\n @ ./resources/assets/js/app.js\r\n @ multi babel-polyfill webpack/hot/dev-server webpack-hot-middleware/client?reload=true ./app\r\nwebpack: Failed to compile.\r\n```\r\n\r\nHere is my webpack config just in case \r\n\r\n```\r\nconst webpack = require('webpack')\r\nconst path = require('path')\r\n// noinspection JSUnresolvedFunction\r\nmodule.exports = {\r\n    entry: [\r\n        'babel-polyfill',\r\n        'webpack/hot/dev-server',\r\n        // ?reload=true enables full page reload on hmr failure\r\n        'webpack-hot-middleware/client?reload=true',\r\n        './app'\r\n    ],\r\n    context: path.resolve(__dirname, 'resources/assets/js'),\r\n    output: {\r\n        path: path.resolve(__dirname, 'public/js'),\r\n        filename: 'app.js',\r\n        publicPath: '/js/'\r\n    },\r\n    devtool: 'source-map',\r\n    module: {\r\n        rules: [\r\n            {\r\n                enforce: 'pre',\r\n                test: /\\.tsx?$/,\r\n                loader: 'ts-loader',\r\n                exclude: /node_modules/\r\n            },\r\n            {\r\n                enforce: 'pre',\r\n                test: /\\.js$/,\r\n                exclude: /node_modules/,\r\n                loader: 'babel',\r\n                query: {\r\n                    presets: ['es2015'],\r\n                    plugins: ['lodash']\r\n                }\r\n            },\r\n            {\r\n                test: /\\.vue$/,\r\n                use: ['vue']\r\n            },\r\n            {\r\n                test: /\\.scss$/,\r\n                use: [\r\n                    {loader: 'style'},\r\n                    {\r\n                        loader: 'css',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    },\r\n                    {\r\n                        loader: 'sass',\r\n                        options: {\r\n                            sourceMap: true,\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'vendor/zurb/foundation/scss'),\r\n                                path.resolve(__dirname, 'node_modules/motion-ui/src'),\r\n                                path.resolve(__dirname, 'resources/assets/sass')\r\n                            ]\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    resolve: {\r\n        alias: {\r\n            'inputmask.dependencyLib': path.resolve(__dirname, 'node_modules/jquery.inputmask/extra/dependencyLibs/inputmask.dependencyLib/'),\r\n            'inputmask': path.resolve(__dirname, 'node_modules/jquery.inputmask/dist/inputmask/inputmask/')\r\n        },\r\n        extensions: ['.webpack.js', '.web.js', '.tsx', '.ts', '.js']\r\n    },\r\n    resolveLoader: {\r\n        moduleExtensions: ['-loader']\r\n    },\r\n    // watchOptions: {\r\n    //     poll: 1000 // <-- it's worth setting a timeout to prevent high CPU load\r\n    // },\r\n    plugins: [\r\n        new webpack.HotModuleReplacementPlugin(),\r\n        // new webpack.LoaderOptionsPlugin({\r\n        //     options: {\r\n        //         context: '/', // <- putting this line right under \"options\" did the trick\r\n        //         sassLoader: {\r\n        //             includePaths: [\r\n        //                 path.resolve(__dirname, 'vendor/zurb/foundation/scss'),\r\n        //                 path.resolve(__dirname, 'node_modules/motion-ui/src'),\r\n        //                 path.resolve(__dirname, 'resources/assets/sass')\r\n        //             ]\r\n        //         }\r\n        //     }\r\n        // })\r\n    ]\r\n}\r\n```\r\n\r\nAnd my dependencies \r\n```\r\n  \"dependencies\": {\r\n    \"@types/elasticsearch\": \"^5.0.12\",\r\n    \"@types/es6-promise\": \"^0.0.32\",\r\n    \"autoprefixer\": \"^6.5.3\",\r\n    \"axios\": \"^0.15.3\",\r\n    \"babel-core\": \"^6.18.2\",\r\n    \"babel-eslint\": \"^7.1.1\",\r\n    \"babel-loader\": \"^6.2.8\",\r\n    \"babel-plugin-lodash\": \"^3.2.11\",\r\n    \"babel-plugin-transform-runtime\": \"^6.15.0\",\r\n    \"babel-polyfill\": \"^6.22.0\",\r\n    \"babel-preset-es2015\": \"^6.18.0\",\r\n    \"babel-preset-stage-3\": \"^6.22.0\",\r\n    \"babel-register\": \"^6.18.0\",\r\n    \"browser-sync\": \"^2.18.2\",\r\n    \"chai\": \"^3.5.0\",\r\n    \"css-loader\": \"^0.26.0\",\r\n    \"elasticsearch\": \"^12.1.3\",\r\n    \"eslint\": \"^3.10.2\",\r\n    \"eslint-config-vue\": \"^2.0.1\",\r\n    \"eslint-plugin-flowtype\": \"^2.25.0\",\r\n    \"eslint-plugin-html\": \"^2.0.0\",\r\n    \"eslint-plugin-vue\": \"^2.0.1\",\r\n    \"inject-loader\": \"^3.0.0-beta4\",\r\n    \"jasmine-core\": \"^2.5.2\",\r\n    \"jquery.inputmask\": \"^3.3.3\",\r\n    \"karma\": \"^1.4.0\",\r\n    \"karma-chrome-launcher\": \"^2.0.0\",\r\n    \"karma-jasmine\": \"^1.1.0\",\r\n    \"karma-phantomjs-launcher\": \"^1.0.2\",\r\n    \"karma-webpack\": \"^2.0.2\",\r\n    \"lodash\": \"^4.17.2\",\r\n    \"motion-ui\": \"^1.2.2\",\r\n    \"node-sass\": \"^4.0.0\",\r\n    \"phantomjs-prebuilt\": \"^2.1.14\",\r\n    \"sass-loader\": \"6.0.2\",\r\n    \"source-map-loader\": \"^0.1.6\",\r\n    \"string-mask\": \"^0.3.0\",\r\n    \"style-loader\": \"^0.13.1\",\r\n    \"ts-loader\": \"2\",\r\n    \"typescript\": \"^2.1.4\",\r\n    \"vue\": \"^2.1.3\",\r\n    \"vue-html-loader\": \"^1.2.3\",\r\n    \"vue-loader\": \"^11.1.0\",\r\n    \"vue-router\": \"^2.2.0\",\r\n    \"vue-style-loader\": \"^2.0.0\",\r\n    \"vue-template-compiler\": \"^2.1.4\",\r\n    \"vue-ts-loader\": \"^0.0.3\",\r\n    \"vuex\": \"^2.1.2\",\r\n    \"vuex-router-sync\": \"^4.1.1\",\r\n    \"webpack\": \"^2.2.1\",\r\n    \"webpack-dev-middleware\": \"^1.8.4\",\r\n    \"webpack-hot-middleware\": \"^2.13.2\"\r\n  }\r\n```. @jhnns I have updated my sass-loader-test and it confirms that something is not right, the problem seems to be with vue-loader or sass-loader as they don't seem to work together. If I import 'foundation' via app.js file things work fine, if I do import foundation from withing vue component things begin to break down. But most recent vue-loader still works fine with sass-loader@4.1.1 and LoaderOptionsPlugin with the same setup where I `@import 'foundation'` from within component. . A hack solution is definitely better then no solution thanks. Do you think it is the problem with vue-loader?. \nWell vue references the file format in style section and utilises sass-loader, so I do not see the reason why it can't read setting from inside sass-loader options, it's successfully does that from babel and typescript loaders. So it's either some adjustments could be done to sass-loader or to vue-loader and as I have noticed mac users do not complain about this issue. I might be wrong anyhow. It just feels wierd to concentrate includePaths inside vue loader pipeline. \n\nOn 28 Feb 2017, 12:55, at 12:55, Johannes Ewald <notifications@github.com> wrote:\n>> A hack solution is definitely better then no solution thanks\n>\n>Oh, I don't think that this is a hack solution. Since a `vue` file can\n>host a lot of file types, it makes sense to have a dedicated loader\n>pipeline because webpack's loader `test` algorithm wouldn't work here.\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-283031636\n. @jhnns Thank you a lot for this library, and your support. I understand your point, I think that vue-loader with their custom pipeline could added a feature that if no additional setting provided into the pipeline, vue-loader could use default options from sass loader config, that would be definitely convenient. . @jhnns disregard my previous comment, I did a mistake on my end so I deleted that comment everything works as you said. . I have updated my sass-loader-test repo https://github.com/asolopovas/sass-loader-test, to reflect the problem if you start index.html in public folder and inspect p.animate tag in inspect section the path will be shown as D:/path/sass-loader-test/resources/assets/sass/D:\\path\\sass-loader-test/resources\\assets\\sass\\app.scss. Tested it on windows ubuntu bash and sourcemaps path was fine.. Same happens if you do run npm run test-source-map on the package itself so clearly is something wrong about it. . Please respond someone its been a month since I created an issue. I have spent some time playing around and found that if I changeline 74 of loader.js,  to `result.map.sourceRoot = '';` problem goes away. @jhnns it may be related to https://github.com/webpack-contrib/sass-loader/issues/366 . @evilebottnawi Hi thanks for responding, here is the screenshots, I have tested it on different machines and few various projects everywhere I get the same problem, I eventually gave up and used gulp sass to generate my stylesheets along with browser-sync to inject them on fly it actually does it a bit faster. If you look at the repository provided above and generate it by simply running npm install + composer install + webpack, it will generate js script with source code in it and then if you open index.html you will see the error that I provided screenshots for. \r\n![screenshot 1](https://cloud.githubusercontent.com/assets/6893216/25682810/767b0bd4-3051-11e7-9522-d18315324ebf.jpg)\r\n![screenshot 2](https://cloud.githubusercontent.com/assets/6893216/25682811/768087ee-3051-11e7-977f-3becea6186f3.jpg)\r\n\r\n. @evilebottnawi I love windows, I hate their filesystem, they should have adopted it long time ago and nobody would be using mac right now. But if you fiddle a bit you can figure thing oit. @pamtbaau  solution works on 4.1.1,  I am not suggesting  that it does on 5.  But version 4.1.1 does not work with options.includePaths either. . @pamtbaau if you read through  documentation you will see that it should be working without LoaderOptionsPlugin,  that's the point I am trying to make. . I will tomorrow . @jhnns here you go I have created two webpack configs one that works second one that fails\r\nhttps://github.com/asolopovas/sass-loader-test. @jhnns I have tried webpack 2.2.1 with both sass-loader@5.0.0 and sass-loader@5.0.1 both throw an error if I place includePaths into options of sass loader like that: \r\n\r\n```\r\n                    {\r\n                        loader: 'sass-loader',\r\n                        options: {\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'vendor/zurb/foundation/scss'),\r\n                                path.resolve(__dirname, 'node_modules/motion-ui/src'),\r\n                                path.resolve(__dirname, 'resources/assets/sass')\r\n                            ],\r\n                            sourceMap: true\r\n                        }\r\n                    }\r\n```\r\nWhich has not worked in the [repository](https://github.com/asolopovas/sass-loader-test) provided in webpack.config.error.js, I tested it on windows 10 x64 machine so clearly something fails. . @jhnns next time I will. Thanks for reopening . Still does not work on my machine. \r\n\r\n```\r\nts-loader: Using typescript@2.2.1 and C:\\vhosts\\3oakdb\\tsconfig.json\r\nwebpack built 60ee2be6571715396cd7 in 13194ms\r\nHash: 60ee2be6571715396cd7\r\nVersion: webpack 2.2.1\r\nTime: 13194ms\r\n     Asset     Size  Chunks                    Chunk Names\r\n    app.js  3.82 MB       0  [emitted]  [big]  main\r\napp.js.map   4.8 MB       0  [emitted]         main\r\n\r\nERROR in ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?{\"id\":\"data-v-d6ecb70a\",\"scoped\":false,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js!./~/vue-loader/lib/selector.js?type=styles&index=0!./resources/assets/js/views/notifications/Notification.vue\r\nModule build failed: \r\n    @import \"libs/animate.scss/animate.scss\";\r\n^\r\n      File to import not found or unreadable: libs/animate.scss/animate.scss.\r\nParent style sheet: stdin\r\n      in C:\\vhosts\\3oakdb\\resources\\assets\\js\\views\\notifications\\Notification.vue (line 32, column 1)\r\n @ ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?{\"id\":\"data-v-d6ecb70a\",\"scoped\":false,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js!./~/vue-loader/lib/selector.js?type=styles&index=0!./resources/assets/js/views/notifications/Notification.vue 4:14-365 13:3-17:5 14:22-373\r\n @ ./resources/assets/js/views/notifications/Notification.vue\r\n @ ./~/babel-loader/lib!./~/vue-loader/lib/selector.js?type=script&index=0!./resources/assets/js/App.vue\r\n @ ./resources/assets/js/App.vue\r\n @ ./resources/assets/js/app.js\r\n @ multi babel-polyfill webpack/hot/dev-server webpack-hot-middleware/client?reload=true ./app\r\n\r\nERROR in ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?{\"id\":\"data-v-08536deb\",\"scoped\":false,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js!./resources/assets/js/views/modules/styles/search.scss\r\nModule build failed: \r\n@import \"foundation\";\r\n\r\n.pagination {\r\n  display: block;\r\n  text-align: center;\r\n  padding-left: 0;\r\n  margin-bottom: rem-calc(10);\r\n  margin-top: rem-calc(5);\r\n  border-radius: 4px;\r\n  font-size: 0;\r\n  li {\r\n    font-size: 16px;\r\n    position: relative;\r\n    display: inline-block;\r\n    border: 1px solid #ddd;\r\n    margin: -1px;\r\n    a {\r\n      display: block;\r\n      padding: 6px 12px;\r\n      line-height: 1.42857143;\r\n      color: #428bca;\r\n      text-decoration: none;\r\n      background-color: #fff;\r\n    }\r\n    &.disabled {\r\n      a {\r\n        color: #777;\r\n        cursor: not-allowed;\r\n        background-color: #fff;\r\n        border-color: #ddd;\r\n      }\r\n    }\r\n    &.active > a {\r\n      color: #fff;\r\n      cursor: default;\r\n      background-color: #428bca;\r\n      border-color: #428bca;\r\n    }\r\n  }\r\n}\r\n\r\n^\r\n      File to import not found or unreadable: foundation.\r\nParent style sheet: stdin\r\n      in C:\\vhosts\\3oakdb\\resources\\assets\\js\\views\\modules\\styles\\search.scss (line 1, column 1)\r\n @ ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?{\"id\":\"data-v-08536deb\",\"scoped\":false,\"hasInlineConfig\":false}!./~/sass-loader/lib/loader.js!./resources/assets/js/views/modules/styles/search.scss 4:14-294 13:3-17:5 14:22-302\r\n @ ./resources/assets/js/views/modules/Pagination.vue\r\n @ ./resources/assets/js/views/mixins/indexView.js\r\n @ ./~/babel-loader/lib!./~/vue-loader/lib/selector.js?type=script&index=0!./resources/assets/js/views/Items.vue\r\n @ ./resources/assets/js/views/Items.vue\r\n @ ./resources/assets/js/router.js\r\n @ ./resources/assets/js/app.js\r\n @ multi babel-polyfill webpack/hot/dev-server webpack-hot-middleware/client?reload=true ./app\r\nwebpack: Failed to compile.\r\n```\r\n\r\nHere is my webpack config just in case \r\n\r\n```\r\nconst webpack = require('webpack')\r\nconst path = require('path')\r\n// noinspection JSUnresolvedFunction\r\nmodule.exports = {\r\n    entry: [\r\n        'babel-polyfill',\r\n        'webpack/hot/dev-server',\r\n        // ?reload=true enables full page reload on hmr failure\r\n        'webpack-hot-middleware/client?reload=true',\r\n        './app'\r\n    ],\r\n    context: path.resolve(__dirname, 'resources/assets/js'),\r\n    output: {\r\n        path: path.resolve(__dirname, 'public/js'),\r\n        filename: 'app.js',\r\n        publicPath: '/js/'\r\n    },\r\n    devtool: 'source-map',\r\n    module: {\r\n        rules: [\r\n            {\r\n                enforce: 'pre',\r\n                test: /\\.tsx?$/,\r\n                loader: 'ts-loader',\r\n                exclude: /node_modules/\r\n            },\r\n            {\r\n                enforce: 'pre',\r\n                test: /\\.js$/,\r\n                exclude: /node_modules/,\r\n                loader: 'babel',\r\n                query: {\r\n                    presets: ['es2015'],\r\n                    plugins: ['lodash']\r\n                }\r\n            },\r\n            {\r\n                test: /\\.vue$/,\r\n                use: ['vue']\r\n            },\r\n            {\r\n                test: /\\.scss$/,\r\n                use: [\r\n                    {loader: 'style'},\r\n                    {\r\n                        loader: 'css',\r\n                        options: {\r\n                            sourceMap: true\r\n                        }\r\n                    },\r\n                    {\r\n                        loader: 'sass',\r\n                        options: {\r\n                            sourceMap: true,\r\n                            includePaths: [\r\n                                path.resolve(__dirname, 'vendor/zurb/foundation/scss'),\r\n                                path.resolve(__dirname, 'node_modules/motion-ui/src'),\r\n                                path.resolve(__dirname, 'resources/assets/sass')\r\n                            ]\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    resolve: {\r\n        alias: {\r\n            'inputmask.dependencyLib': path.resolve(__dirname, 'node_modules/jquery.inputmask/extra/dependencyLibs/inputmask.dependencyLib/'),\r\n            'inputmask': path.resolve(__dirname, 'node_modules/jquery.inputmask/dist/inputmask/inputmask/')\r\n        },\r\n        extensions: ['.webpack.js', '.web.js', '.tsx', '.ts', '.js']\r\n    },\r\n    resolveLoader: {\r\n        moduleExtensions: ['-loader']\r\n    },\r\n    // watchOptions: {\r\n    //     poll: 1000 // <-- it's worth setting a timeout to prevent high CPU load\r\n    // },\r\n    plugins: [\r\n        new webpack.HotModuleReplacementPlugin(),\r\n        // new webpack.LoaderOptionsPlugin({\r\n        //     options: {\r\n        //         context: '/', // <- putting this line right under \"options\" did the trick\r\n        //         sassLoader: {\r\n        //             includePaths: [\r\n        //                 path.resolve(__dirname, 'vendor/zurb/foundation/scss'),\r\n        //                 path.resolve(__dirname, 'node_modules/motion-ui/src'),\r\n        //                 path.resolve(__dirname, 'resources/assets/sass')\r\n        //             ]\r\n        //         }\r\n        //     }\r\n        // })\r\n    ]\r\n}\r\n```\r\n\r\nAnd my dependencies \r\n```\r\n  \"dependencies\": {\r\n    \"@types/elasticsearch\": \"^5.0.12\",\r\n    \"@types/es6-promise\": \"^0.0.32\",\r\n    \"autoprefixer\": \"^6.5.3\",\r\n    \"axios\": \"^0.15.3\",\r\n    \"babel-core\": \"^6.18.2\",\r\n    \"babel-eslint\": \"^7.1.1\",\r\n    \"babel-loader\": \"^6.2.8\",\r\n    \"babel-plugin-lodash\": \"^3.2.11\",\r\n    \"babel-plugin-transform-runtime\": \"^6.15.0\",\r\n    \"babel-polyfill\": \"^6.22.0\",\r\n    \"babel-preset-es2015\": \"^6.18.0\",\r\n    \"babel-preset-stage-3\": \"^6.22.0\",\r\n    \"babel-register\": \"^6.18.0\",\r\n    \"browser-sync\": \"^2.18.2\",\r\n    \"chai\": \"^3.5.0\",\r\n    \"css-loader\": \"^0.26.0\",\r\n    \"elasticsearch\": \"^12.1.3\",\r\n    \"eslint\": \"^3.10.2\",\r\n    \"eslint-config-vue\": \"^2.0.1\",\r\n    \"eslint-plugin-flowtype\": \"^2.25.0\",\r\n    \"eslint-plugin-html\": \"^2.0.0\",\r\n    \"eslint-plugin-vue\": \"^2.0.1\",\r\n    \"inject-loader\": \"^3.0.0-beta4\",\r\n    \"jasmine-core\": \"^2.5.2\",\r\n    \"jquery.inputmask\": \"^3.3.3\",\r\n    \"karma\": \"^1.4.0\",\r\n    \"karma-chrome-launcher\": \"^2.0.0\",\r\n    \"karma-jasmine\": \"^1.1.0\",\r\n    \"karma-phantomjs-launcher\": \"^1.0.2\",\r\n    \"karma-webpack\": \"^2.0.2\",\r\n    \"lodash\": \"^4.17.2\",\r\n    \"motion-ui\": \"^1.2.2\",\r\n    \"node-sass\": \"^4.0.0\",\r\n    \"phantomjs-prebuilt\": \"^2.1.14\",\r\n    \"sass-loader\": \"6.0.2\",\r\n    \"source-map-loader\": \"^0.1.6\",\r\n    \"string-mask\": \"^0.3.0\",\r\n    \"style-loader\": \"^0.13.1\",\r\n    \"ts-loader\": \"2\",\r\n    \"typescript\": \"^2.1.4\",\r\n    \"vue\": \"^2.1.3\",\r\n    \"vue-html-loader\": \"^1.2.3\",\r\n    \"vue-loader\": \"^11.1.0\",\r\n    \"vue-router\": \"^2.2.0\",\r\n    \"vue-style-loader\": \"^2.0.0\",\r\n    \"vue-template-compiler\": \"^2.1.4\",\r\n    \"vue-ts-loader\": \"^0.0.3\",\r\n    \"vuex\": \"^2.1.2\",\r\n    \"vuex-router-sync\": \"^4.1.1\",\r\n    \"webpack\": \"^2.2.1\",\r\n    \"webpack-dev-middleware\": \"^1.8.4\",\r\n    \"webpack-hot-middleware\": \"^2.13.2\"\r\n  }\r\n```. @jhnns I have updated my sass-loader-test and it confirms that something is not right, the problem seems to be with vue-loader or sass-loader as they don't seem to work together. If I import 'foundation' via app.js file things work fine, if I do import foundation from withing vue component things begin to break down. But most recent vue-loader still works fine with sass-loader@4.1.1 and LoaderOptionsPlugin with the same setup where I `@import 'foundation'` from within component. . A hack solution is definitely better then no solution thanks. Do you think it is the problem with vue-loader?. \nWell vue references the file format in style section and utilises sass-loader, so I do not see the reason why it can't read setting from inside sass-loader options, it's successfully does that from babel and typescript loaders. So it's either some adjustments could be done to sass-loader or to vue-loader and as I have noticed mac users do not complain about this issue. I might be wrong anyhow. It just feels wierd to concentrate includePaths inside vue loader pipeline. \n\nOn 28 Feb 2017, 12:55, at 12:55, Johannes Ewald <notifications@github.com> wrote:\n>> A hack solution is definitely better then no solution thanks\n>\n>Oh, I don't think that this is a hack solution. Since a `vue` file can\n>host a lot of file types, it makes sense to have a dedicated loader\n>pipeline because webpack's loader `test` algorithm wouldn't work here.\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-283031636\n. @jhnns Thank you a lot for this library, and your support. I understand your point, I think that vue-loader with their custom pipeline could added a feature that if no additional setting provided into the pipeline, vue-loader could use default options from sass loader config, that would be definitely convenient. . @jhnns disregard my previous comment, I did a mistake on my end so I deleted that comment everything works as you said. . I have updated my sass-loader-test repo https://github.com/asolopovas/sass-loader-test, to reflect the problem if you start index.html in public folder and inspect p.animate tag in inspect section the path will be shown as D:/path/sass-loader-test/resources/assets/sass/D:\\path\\sass-loader-test/resources\\assets\\sass\\app.scss. Tested it on windows ubuntu bash and sourcemaps path was fine.. Same happens if you do run npm run test-source-map on the package itself so clearly is something wrong about it. . Please respond someone its been a month since I created an issue. I have spent some time playing around and found that if I changeline 74 of loader.js,  to `result.map.sourceRoot = '';` problem goes away. @jhnns it may be related to https://github.com/webpack-contrib/sass-loader/issues/366 . @evilebottnawi Hi thanks for responding, here is the screenshots, I have tested it on different machines and few various projects everywhere I get the same problem, I eventually gave up and used gulp sass to generate my stylesheets along with browser-sync to inject them on fly it actually does it a bit faster. If you look at the repository provided above and generate it by simply running npm install + composer install + webpack, it will generate js script with source code in it and then if you open index.html you will see the error that I provided screenshots for. \r\n![screenshot 1](https://cloud.githubusercontent.com/assets/6893216/25682810/767b0bd4-3051-11e7-9522-d18315324ebf.jpg)\r\n![screenshot 2](https://cloud.githubusercontent.com/assets/6893216/25682811/768087ee-3051-11e7-977f-3becea6186f3.jpg)\r\n\r\n. @evilebottnawi I love windows, I hate their filesystem, they should have adopted it long time ago and nobody would be using mac right now. But if you fiddle a bit you can figure thing oit. ",
    "skipjack": "+1 I'm running into this as well -- on 5.0.0 even the suggested `webpack.LoaderOptionsPlugin` solution doesn't seem to be working.. @jhnns yea I'm not dependent on this issue anymore as our infrastructure changed, but, when I was, I tested v5.0.0 with both the `options` and using the `LoaderOptionsPlugin` (which I know you said doesn't work intentionally) and using just `options` failed as well iirc.. @jhnns hey just tested `options: { includePaths: [...] }` with `sass-loader@6.0.2` and it worked fine. I think this may be ok to close \ud83d\udc4d .. +1 I'm running into this as well -- on 5.0.0 even the suggested `webpack.LoaderOptionsPlugin` solution doesn't seem to be working.. @jhnns yea I'm not dependent on this issue anymore as our infrastructure changed, but, when I was, I tested v5.0.0 with both the `options` and using the `LoaderOptionsPlugin` (which I know you said doesn't work intentionally) and using just `options` failed as well iirc.. @jhnns hey just tested `options: { includePaths: [...] }` with `sass-loader@6.0.2` and it worked fine. I think this may be ok to close \ud83d\udc4d .. ",
    "coolhihi": "Thank you. I use `LoaderOptionsPlugin` and rollback sass-loader to 4.1.1. It work.. Thank you. I use `LoaderOptionsPlugin` and rollback sass-loader to 4.1.1. It work.. ",
    "janusch": "@jhnns Hey,\r\nThank you for maintaining this excellent and essential loader!\r\nAfter updating to the latest version `sass-loader@6` I recognized a regression.\r\nIn my project I am using a shared node_modules directory on a nfs file system. Now that you dropped `webpack context` npm packages using scss would throw an error:\r\n```\r\nERROR in ./style/scss/global_bundle.scss\r\nModule build failed: ModuleBuildError: Module build failed: Error: \"/nfs/node_modules/bootstrap/scss/_alert.scss\" is not in the SourceMap.\r\n    at SourceMapConsumer_sourceContentFor [as sourceContentFor] (/nfs/node_modules/source-map/lib/source-map-consumer.js:704:13)\r\n    at SourceMapGenerator.<anonymous> (/nfs/node_modules/source-map/lib/source-map-generator.js:235:40)\r\n    at Array.forEach (native)\r\n    at SourceMapGenerator_applySourceMap [as applySourceMap] (/nfs/node_modules/source-map/lib/source-map-generator.js:234:32)\r\n    at MapGenerator.applyPrevMaps (/nfs/node_modules/postcss/lib/map-generator.js:146:22)\r\n    at MapGenerator.generateMap (/nfs/node_modules/postcss/lib/map-generator.js:194:46)\r\n    at MapGenerator.generate (/nfs/node_modules/postcss/lib/map-generator.js:297:25)\r\n    at LazyResult.stringify (/nfs/node_modules/postcss/lib/lazy-result.js:294:24)\r\n    at /nfs/node_modules/postcss/lib/lazy-result.js:231:27\r\n    at /nfs/node_modules/webpack/lib/NormalModule.js:141:35\r\n    at /nfs/node_modules/loader-runner/lib/LoaderRunner.js:364:11\r\n    at /nfs/node_modules/loader-runner/lib/LoaderRunner.js:230:18\r\n    at context.callback (/nfs/node_modules/loader-runner/lib/LoaderRunner.js:111:13)\r\n    at /nfs/node_modules/postcss-loader/index.js:153:13\r\n```\r\n\r\nreverting back to `sass-loader@5.0.1` fixed the issue.\r\nI am using `resolve-url-loader@2.0.0` in the loader chain for sass.\r\n\r\nIf I can provide more information please let me know.\r\nIt would be very nice if this could get fixed, maybe by providing the context option in the options of sass-loader, so we can have a working sass-loader for both windows and nfs file systems? \r\n. @jhnns Hey,\r\nThank you for maintaining this excellent and essential loader!\r\nAfter updating to the latest version `sass-loader@6` I recognized a regression.\r\nIn my project I am using a shared node_modules directory on a nfs file system. Now that you dropped `webpack context` npm packages using scss would throw an error:\r\n```\r\nERROR in ./style/scss/global_bundle.scss\r\nModule build failed: ModuleBuildError: Module build failed: Error: \"/nfs/node_modules/bootstrap/scss/_alert.scss\" is not in the SourceMap.\r\n    at SourceMapConsumer_sourceContentFor [as sourceContentFor] (/nfs/node_modules/source-map/lib/source-map-consumer.js:704:13)\r\n    at SourceMapGenerator.<anonymous> (/nfs/node_modules/source-map/lib/source-map-generator.js:235:40)\r\n    at Array.forEach (native)\r\n    at SourceMapGenerator_applySourceMap [as applySourceMap] (/nfs/node_modules/source-map/lib/source-map-generator.js:234:32)\r\n    at MapGenerator.applyPrevMaps (/nfs/node_modules/postcss/lib/map-generator.js:146:22)\r\n    at MapGenerator.generateMap (/nfs/node_modules/postcss/lib/map-generator.js:194:46)\r\n    at MapGenerator.generate (/nfs/node_modules/postcss/lib/map-generator.js:297:25)\r\n    at LazyResult.stringify (/nfs/node_modules/postcss/lib/lazy-result.js:294:24)\r\n    at /nfs/node_modules/postcss/lib/lazy-result.js:231:27\r\n    at /nfs/node_modules/webpack/lib/NormalModule.js:141:35\r\n    at /nfs/node_modules/loader-runner/lib/LoaderRunner.js:364:11\r\n    at /nfs/node_modules/loader-runner/lib/LoaderRunner.js:230:18\r\n    at context.callback (/nfs/node_modules/loader-runner/lib/LoaderRunner.js:111:13)\r\n    at /nfs/node_modules/postcss-loader/index.js:153:13\r\n```\r\n\r\nreverting back to `sass-loader@5.0.1` fixed the issue.\r\nI am using `resolve-url-loader@2.0.0` in the loader chain for sass.\r\n\r\nIf I can provide more information please let me know.\r\nIt would be very nice if this could get fixed, maybe by providing the context option in the options of sass-loader, so we can have a working sass-loader for both windows and nfs file systems? \r\n. ",
    "phyllisstein": "This appears only to happen when using the `data` option. I've produced a working example at <https://github.com/phyllisstein/sass-loader-collisions-bug>.. Wow, that's super tricky! Thanks so much for the speedy response and fix---excited to upgrade.. This appears only to happen when using the `data` option. I've produced a working example at <https://github.com/phyllisstein/sass-loader-collisions-bug>.. Wow, that's super tricky! Thanks so much for the speedy response and fix---excited to upgrade.. ",
    "sontek": "I'm getting this:\r\n\r\n```\r\n(node:98695) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\r\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\r\n    at Object.parseQuery (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-utils/index.js:78:3)\r\n    at Object.module.exports (/Users/sontek/venvs/eventray/src/eventray/node_modules/babel-loader/lib/index.js:86:35)\r\n    at LOADER_EXECUTION (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:119:14)\r\n    at runSyncOrAsync (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:120:4)\r\n    at iterateNormalLoaders (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:229:2)\r\n    at iterateNormalLoaders (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:218:10)\r\n    at /Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:233:3\r\n    at Object.context.callback (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:111:13)\r\n    at Object.module.exports (/Users/sontek/venvs/eventray/src/eventray/node_modules/eslint-loader/index.js:198:8)\r\n    at LOADER_EXECUTION (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:119:14)\r\n    at runSyncOrAsync (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:120:4)\r\n    at iterateNormalLoaders (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:229:2)\r\n    at Array.<anonymous> (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:202:4)\r\n    at Storage.finished (/Users/sontek/venvs/eventray/src/eventray/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:38:15)\r\n    at /Users/sontek/venvs/eventray/src/eventray/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:69:9\r\n    at /Users/sontek/venvs/eventray/src/eventray/node_modules/graceful-fs/graceful-fs.js:78:16\r\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:416:3)\r\n```\r\n\r\nbut my babel-loader config is this:\r\n\r\n```\r\n        {\r\n            test: /\\.jsx?$/,\r\n            use: [\r\n                {\r\n                    loader: 'babel-loader',\r\n                    options: {\r\n                        presets: babelPresets,\r\n                        plugins: babelPlugins\r\n                    },\r\n                }\r\n            ],\r\n            exclude: /node_modules/\r\n        },\r\n```\r\n\r\nThe two variables inside options look like this:\r\n\r\n```\r\nconst getRules = (isDev, isTest) => {\r\n    let babelPlugins = [];\r\n\r\n    if (isTest === true) {\r\n        babelPlugins = [\r\n            ...babelPlugins,\r\n            'istanbul'\r\n        ];\r\n    }\r\n\r\n    if (isDev === true) {\r\n        babelPlugins = [\r\n            ...babelPlugins,\r\n            'react-hot-loader/babel'\r\n        ];\r\n    }\r\n\r\n    let babelPresets;\r\n\r\n    /* In dev we don't need slow es2015 preset */\r\n    if (isDev || isTest) {\r\n        babelPresets = ['react', 'modern-browsers', 'stage-0'];\r\n    }\r\n    else {\r\n        babelPresets = ['react', ['es2015', {\"modules\": false}], 'stage-0'];\r\n    }\r\n```\r\n\r\nSo I'm not seeing what is expected to be changed.  My `eslint-loader` looks like this:\r\n\r\n```\r\n        {\r\n            test: /\\.jsx?$/,\r\n            enforce: \"pre\",\r\n            loader: 'eslint-loader',\r\n            exclude: /node_modules/\r\n        }\r\n```. I'm getting this:\r\n\r\n```\r\n(node:98695) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\r\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\r\n    at Object.parseQuery (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-utils/index.js:78:3)\r\n    at Object.module.exports (/Users/sontek/venvs/eventray/src/eventray/node_modules/babel-loader/lib/index.js:86:35)\r\n    at LOADER_EXECUTION (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:119:14)\r\n    at runSyncOrAsync (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:120:4)\r\n    at iterateNormalLoaders (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:229:2)\r\n    at iterateNormalLoaders (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:218:10)\r\n    at /Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:233:3\r\n    at Object.context.callback (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:111:13)\r\n    at Object.module.exports (/Users/sontek/venvs/eventray/src/eventray/node_modules/eslint-loader/index.js:198:8)\r\n    at LOADER_EXECUTION (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:119:14)\r\n    at runSyncOrAsync (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:120:4)\r\n    at iterateNormalLoaders (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:229:2)\r\n    at Array.<anonymous> (/Users/sontek/venvs/eventray/src/eventray/node_modules/loader-runner/lib/LoaderRunner.js:202:4)\r\n    at Storage.finished (/Users/sontek/venvs/eventray/src/eventray/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:38:15)\r\n    at /Users/sontek/venvs/eventray/src/eventray/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:69:9\r\n    at /Users/sontek/venvs/eventray/src/eventray/node_modules/graceful-fs/graceful-fs.js:78:16\r\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:416:3)\r\n```\r\n\r\nbut my babel-loader config is this:\r\n\r\n```\r\n        {\r\n            test: /\\.jsx?$/,\r\n            use: [\r\n                {\r\n                    loader: 'babel-loader',\r\n                    options: {\r\n                        presets: babelPresets,\r\n                        plugins: babelPlugins\r\n                    },\r\n                }\r\n            ],\r\n            exclude: /node_modules/\r\n        },\r\n```\r\n\r\nThe two variables inside options look like this:\r\n\r\n```\r\nconst getRules = (isDev, isTest) => {\r\n    let babelPlugins = [];\r\n\r\n    if (isTest === true) {\r\n        babelPlugins = [\r\n            ...babelPlugins,\r\n            'istanbul'\r\n        ];\r\n    }\r\n\r\n    if (isDev === true) {\r\n        babelPlugins = [\r\n            ...babelPlugins,\r\n            'react-hot-loader/babel'\r\n        ];\r\n    }\r\n\r\n    let babelPresets;\r\n\r\n    /* In dev we don't need slow es2015 preset */\r\n    if (isDev || isTest) {\r\n        babelPresets = ['react', 'modern-browsers', 'stage-0'];\r\n    }\r\n    else {\r\n        babelPresets = ['react', ['es2015', {\"modules\": false}], 'stage-0'];\r\n    }\r\n```\r\n\r\nSo I'm not seeing what is expected to be changed.  My `eslint-loader` looks like this:\r\n\r\n```\r\n        {\r\n            test: /\\.jsx?$/,\r\n            enforce: \"pre\",\r\n            loader: 'eslint-loader',\r\n            exclude: /node_modules/\r\n        }\r\n```. ",
    "acostaf": "I am using css-loader since the css already contains the file name.. Do you have a quick sample on that ?. Sorry jhnns but that sample does not show the url.. I am using css-loader since the css already contains the file name.. Do you have a quick sample on that ?. Sorry jhnns but that sample does not show the url.. ",
    "httpete-ire": "I'm getting the same error\r\n\r\nversion numbers:\r\n```\r\n\"css-loader\": \"^0.26.1\",\r\n\"node-sass\": \"^4.5.0\",\r\n\"sass-loader\": \"^5.0.1\",\r\n\"style-loader\": \"^0.13.1\",\r\n\"webpack\": \"^2.2.1\"\r\n```. I'm getting the same error\r\n\r\nversion numbers:\r\n```\r\n\"css-loader\": \"^0.26.1\",\r\n\"node-sass\": \"^4.5.0\",\r\n\"sass-loader\": \"^5.0.1\",\r\n\"style-loader\": \"^0.13.1\",\r\n\"webpack\": \"^2.2.1\"\r\n```. ",
    "wsfuller": "I was having a similar issue, with Sass-Loader not working with a .scss file.\r\n\r\n**.scss file**\r\n\r\n`a{display: flex;}`\r\n\r\nMy solution was found here: [Webpack 2: How to extract Sass and convert to css file #263](https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/263)  \r\n\r\nJust added a new rule for .scss files and is working as expected so far\r\n   \r\n    ...\r\n    module: {\r\n        rules: [\r\n          {\r\n            test: /\\.css$/,\r\n            use: ExtractTextPlugin.extract({\r\n              fallback: \"style-loader\",\r\n              use: \"css-loader\"\r\n            })\r\n          },\r\n          {\r\n            test: /\\.scss$/,\r\n            loader: ExtractTextPlugin.extract({\r\n              fallback: \"style-loader\",\r\n              use: \"css-loader!sass-loader\",\r\n            }),\r\n          }\r\n        ]\r\n      },\r\n    .... @jhnns I understand fully that Webpack only understand JavaScript as well there needs to be a rule for Sass `.scss` files after going through a much better put together Introduction for v2.2. \r\n\r\nThe issue here is that on the [Extract Text Webpack Plugin documentation](https://webpack.js.org/plugins/extract-text-webpack-plugin/#extracting-sass-or-less) following that guide only produced errors in Sass compilation explicitly at `use: ['css-loader', 'sass-loader']`\r\n\r\nTo understand more of the issue you can look at the exact setup I was working with [Unable to parse Sass (.scss) #424](https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/424)\r\n\r\nThe solution was to replace `use: ['css-loader', 'sass-loader']` (that's written in the documentation) to `use: \"css-loader!sass-loader\"` that was found in the reference issue above.\r\n\r\nIn the end it feels like the Webpack documentation is still very confusing on getting setup. Most of the day was spent configuring and trying to get a development process in order as well jumping from Guides, Documentation, and Plugin pages working on piece by piece setup instead of some hand holding guide to get a new person up and running and then say \"ok here's a ton of advanced options to setup your specific environment for you specific needs\". I feel like a lot of people after reviewing my issues I was having yesterday may be feeling the same way. \r\n\r\nIMO having a Guide to the tune of something like: \r\n\r\n1. Webpack Installation \r\n2. CSS loader installation \r\n3. Optional Sass/Less loader installation + ExtractTextPlugin\r\n4. JSX/Babel loader installation \r\n5. HtmlWebpackPlugin installation\r\n6. HMR replacement installation\r\n7. Webpack Dev Server\r\n8. Set your `npm start` script\r\n9. Run your server have fun\r\n\r\nthat builds on itself, for me, that is all I need to get going just like using Grunt/Gulp from a starting standpoint. From there environment topics can be brought in and a myriad of other options can be opened up after having a working config. Again imo might make everything much more approachable and new people are following set standards in those Guides and getting everyone on the same page before opening the flood gates.  \r\n. @jhnns Thanks for the response. I'm going to hop over to that other conversation you sent and read through the discussion. \r\n\r\nI totally agree keep Webpack low level but adding in some type of command to add the desired modules so you can get going quickly. Would not like to see another Grunt Gulp battle ensue with Code over Configuration and everyone arguing back and forth. But, rather if you need to customize deeper you can, or from a very high level you can get your development environment running. \r\n\r\nI'll make a PR for the Extract Text Plugin so users hopefully aren't running into the same issue I was. . @xXanth0s \r\n\r\nTo fix this I did the following:\r\n\r\n1. Created Font Loader Variable (**before** `module.exports={...}`)\r\n    * `var fontLocal = 'file-loader?name=[name].[ext]`\r\n    * `var fontBundle = 'file-loader?name=assets/fonts/[name].[ext]`\r\n2. Created ternary operator (**before** `module.exports={...}`)\r\n    * `var fontConfig = isBundle ? fontBundle : fontLocal;`\r\n3. Update loader to use `fontConfig` (**inside** `module.exports={...}`)\r\n    * `test: /\\.(eot|ttf|woff|woff2)$/, loader: fontConfig`\r\n\r\n\r\nFor clarification, I use **\"Local\"** for **\"Development\" or \"Dev\"** and **\"Bundle\"**  for **\"Production\" or \"Prod\" or \"Build\"**. There're specific reasons for this, just so that's clear. \r\n\r\nThe other possibility (and this was another issue I had) was loader ordering. So in the documentation I never found where it said the order in which to place your loaders. Common sense would be left to right for first to last in a Western English speaking world. In UNIX it's the opposite for whatever reason there is for that (would love to know more about this). There's a SO article that I was trying to find discussing this but unable to turn it up, where I was able to get some high level answers. \r\n\r\nSo my new, working, ordering for my CSS loaders is `use: ['css-loader','resolve-url-loader','postcss-loader','sass-loader']`\r\n\r\n\r\nHopefully this answers the issue you were having as well or at least helps. . @jhnns So I've updated the config to what you suggested.\r\n\r\nHowever you're suggestion `use: ['css-loader', 'postcss-loader', 'resolve-url-loader', 'sass-loader'],` broke the `resolve-url-loader` for custom fonts that were needed (if only everything could be a Google Font).\r\n\r\nSo I updated to: use: `['css-loader','resolve-url-loader','postcss-loader','sass-loader'],`. \r\n\r\nNow comments are working as expected and fonts are loading in. My question now is this ordering doesn't make any sense. \r\n\r\n\r\nTo reconfirm the loaders are reading right to left? Trying to find a mention in the docs but not having any luck. . Looks like the loaders are in the incorrect order. Have updated to `use: ['css-loader','resolve-url-loader','postcss-loader','sass-loader']`. The one question I have remaining, where in the documentation does it state the ordering of loaders and the correct way to write them? \r\n\r\nFeel like [Loader Features](https://webpack.js.org/concepts/loaders/#loader-features) would be a logical place with the current setup. \r\n\r\n> Loaders can be chained. They are applied in a pipeline to the resource. A chain of loaders are compiled chronologically. The first loader in a chain of loaders returns a value to the next. At the end loader, webpack expects JavaScript to be returned.\r\n\r\nWondering if there should be a mention in here about this. @evilebottnawi This is still pretty confusing. If I'm coming from Gulp (which I did and to Gulp from Grunt), I'm going to write left to right or top down expecting that order, like any Western speaking person would do. If I do that with Webpack an error will occur. If written right to left order operations work as expected. This is why I was suggesting some type of mention in there. \r\n\r\nhttp://stackoverflow.com/questions/32234329/what-is-the-loader-order-for-webpack\r\n\r\nI don't think it's overloading docs I think it's making them more obtainable and lowers the learning curve a lot. Making more verbose docs (with clear examples) can alleviate a lot of simply questions and  understanding of concepts.. I'm going to put together some documentation so there's a more 1:1 comparison make things a bit easier. . I was having a similar issue, with Sass-Loader not working with a .scss file.\r\n\r\n**.scss file**\r\n\r\n`a{display: flex;}`\r\n\r\nMy solution was found here: [Webpack 2: How to extract Sass and convert to css file #263](https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/263)  \r\n\r\nJust added a new rule for .scss files and is working as expected so far\r\n   \r\n    ...\r\n    module: {\r\n        rules: [\r\n          {\r\n            test: /\\.css$/,\r\n            use: ExtractTextPlugin.extract({\r\n              fallback: \"style-loader\",\r\n              use: \"css-loader\"\r\n            })\r\n          },\r\n          {\r\n            test: /\\.scss$/,\r\n            loader: ExtractTextPlugin.extract({\r\n              fallback: \"style-loader\",\r\n              use: \"css-loader!sass-loader\",\r\n            }),\r\n          }\r\n        ]\r\n      },\r\n    .... @jhnns I understand fully that Webpack only understand JavaScript as well there needs to be a rule for Sass `.scss` files after going through a much better put together Introduction for v2.2. \r\n\r\nThe issue here is that on the [Extract Text Webpack Plugin documentation](https://webpack.js.org/plugins/extract-text-webpack-plugin/#extracting-sass-or-less) following that guide only produced errors in Sass compilation explicitly at `use: ['css-loader', 'sass-loader']`\r\n\r\nTo understand more of the issue you can look at the exact setup I was working with [Unable to parse Sass (.scss) #424](https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/424)\r\n\r\nThe solution was to replace `use: ['css-loader', 'sass-loader']` (that's written in the documentation) to `use: \"css-loader!sass-loader\"` that was found in the reference issue above.\r\n\r\nIn the end it feels like the Webpack documentation is still very confusing on getting setup. Most of the day was spent configuring and trying to get a development process in order as well jumping from Guides, Documentation, and Plugin pages working on piece by piece setup instead of some hand holding guide to get a new person up and running and then say \"ok here's a ton of advanced options to setup your specific environment for you specific needs\". I feel like a lot of people after reviewing my issues I was having yesterday may be feeling the same way. \r\n\r\nIMO having a Guide to the tune of something like: \r\n\r\n1. Webpack Installation \r\n2. CSS loader installation \r\n3. Optional Sass/Less loader installation + ExtractTextPlugin\r\n4. JSX/Babel loader installation \r\n5. HtmlWebpackPlugin installation\r\n6. HMR replacement installation\r\n7. Webpack Dev Server\r\n8. Set your `npm start` script\r\n9. Run your server have fun\r\n\r\nthat builds on itself, for me, that is all I need to get going just like using Grunt/Gulp from a starting standpoint. From there environment topics can be brought in and a myriad of other options can be opened up after having a working config. Again imo might make everything much more approachable and new people are following set standards in those Guides and getting everyone on the same page before opening the flood gates.  \r\n. @jhnns Thanks for the response. I'm going to hop over to that other conversation you sent and read through the discussion. \r\n\r\nI totally agree keep Webpack low level but adding in some type of command to add the desired modules so you can get going quickly. Would not like to see another Grunt Gulp battle ensue with Code over Configuration and everyone arguing back and forth. But, rather if you need to customize deeper you can, or from a very high level you can get your development environment running. \r\n\r\nI'll make a PR for the Extract Text Plugin so users hopefully aren't running into the same issue I was. . @xXanth0s \r\n\r\nTo fix this I did the following:\r\n\r\n1. Created Font Loader Variable (**before** `module.exports={...}`)\r\n    * `var fontLocal = 'file-loader?name=[name].[ext]`\r\n    * `var fontBundle = 'file-loader?name=assets/fonts/[name].[ext]`\r\n2. Created ternary operator (**before** `module.exports={...}`)\r\n    * `var fontConfig = isBundle ? fontBundle : fontLocal;`\r\n3. Update loader to use `fontConfig` (**inside** `module.exports={...}`)\r\n    * `test: /\\.(eot|ttf|woff|woff2)$/, loader: fontConfig`\r\n\r\n\r\nFor clarification, I use **\"Local\"** for **\"Development\" or \"Dev\"** and **\"Bundle\"**  for **\"Production\" or \"Prod\" or \"Build\"**. There're specific reasons for this, just so that's clear. \r\n\r\nThe other possibility (and this was another issue I had) was loader ordering. So in the documentation I never found where it said the order in which to place your loaders. Common sense would be left to right for first to last in a Western English speaking world. In UNIX it's the opposite for whatever reason there is for that (would love to know more about this). There's a SO article that I was trying to find discussing this but unable to turn it up, where I was able to get some high level answers. \r\n\r\nSo my new, working, ordering for my CSS loaders is `use: ['css-loader','resolve-url-loader','postcss-loader','sass-loader']`\r\n\r\n\r\nHopefully this answers the issue you were having as well or at least helps. . @jhnns So I've updated the config to what you suggested.\r\n\r\nHowever you're suggestion `use: ['css-loader', 'postcss-loader', 'resolve-url-loader', 'sass-loader'],` broke the `resolve-url-loader` for custom fonts that were needed (if only everything could be a Google Font).\r\n\r\nSo I updated to: use: `['css-loader','resolve-url-loader','postcss-loader','sass-loader'],`. \r\n\r\nNow comments are working as expected and fonts are loading in. My question now is this ordering doesn't make any sense. \r\n\r\n\r\nTo reconfirm the loaders are reading right to left? Trying to find a mention in the docs but not having any luck. . Looks like the loaders are in the incorrect order. Have updated to `use: ['css-loader','resolve-url-loader','postcss-loader','sass-loader']`. The one question I have remaining, where in the documentation does it state the ordering of loaders and the correct way to write them? \r\n\r\nFeel like [Loader Features](https://webpack.js.org/concepts/loaders/#loader-features) would be a logical place with the current setup. \r\n\r\n> Loaders can be chained. They are applied in a pipeline to the resource. A chain of loaders are compiled chronologically. The first loader in a chain of loaders returns a value to the next. At the end loader, webpack expects JavaScript to be returned.\r\n\r\nWondering if there should be a mention in here about this. @evilebottnawi This is still pretty confusing. If I'm coming from Gulp (which I did and to Gulp from Grunt), I'm going to write left to right or top down expecting that order, like any Western speaking person would do. If I do that with Webpack an error will occur. If written right to left order operations work as expected. This is why I was suggesting some type of mention in there. \r\n\r\nhttp://stackoverflow.com/questions/32234329/what-is-the-loader-order-for-webpack\r\n\r\nI don't think it's overloading docs I think it's making them more obtainable and lowers the learning curve a lot. Making more verbose docs (with clear examples) can alleviate a lot of simply questions and  understanding of concepts.. I'm going to put together some documentation so there's a more 1:1 comparison make things a bit easier. . ",
    "matthieuh": "I have this issue too using this config with webpack 2 :\r\n```\r\nuse: [\r\n  'style-loader',\r\n  {\r\n    loader: 'css-loader',\r\n    options: {\r\n      sourceMap: true\r\n    }\r\n  },\r\n  {\r\n    loader: 'sass-loader',\r\n    options: {\r\n      sourceMap: true\r\n    }\r\n  }\r\n]\r\n```\r\nBut using just this one it work : \r\n`use: ['style-loader', 'css-loader', 'sass-loader']`\r\nMaybe an issue linked to sourcemaps.. I get this error too trying to have sourcemap with webpack 2\r\n```\r\nuse: [\r\n  'style-loader',\r\n  {\r\n    loader: 'css-loader',\r\n    options: {\r\n      sourceMap: true\r\n    }\r\n  },\r\n  {\r\n    loader: 'sass-loader',\r\n    options: {\r\n      sourceMap: true\r\n    }\r\n  }\r\n]\r\n```\r\n\r\nbut using just `use: ['style-loader', 'css-loader', 'sass-loader']` it work\r\n\r\nEdit:\r\n\r\nerror :  69% building modules 881/882 modules 1 active ...rkspace/wingz-xxx/src/app/app.scsspath.js:7\r\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\r\n\r\napp.scss line 7 :\r\n```\r\n@font-face {\r\n  font-family: 'Galano Classic';\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  src: url('../assets/fonts/galano/Galano-Classic-Alt.eot');\r\n  src: url('../assets/fonts/galano/Galano-Classic-Alt.eot?#iefix') format('embedded-opentype'),\r\n       url('../assets/fonts/galano/Galano-Classic-Alt.ttf') format('truetype');\r\n}\r\n```. I have this issue too using this config with webpack 2 :\r\n```\r\nuse: [\r\n  'style-loader',\r\n  {\r\n    loader: 'css-loader',\r\n    options: {\r\n      sourceMap: true\r\n    }\r\n  },\r\n  {\r\n    loader: 'sass-loader',\r\n    options: {\r\n      sourceMap: true\r\n    }\r\n  }\r\n]\r\n```\r\nBut using just this one it work : \r\n`use: ['style-loader', 'css-loader', 'sass-loader']`\r\nMaybe an issue linked to sourcemaps.. I get this error too trying to have sourcemap with webpack 2\r\n```\r\nuse: [\r\n  'style-loader',\r\n  {\r\n    loader: 'css-loader',\r\n    options: {\r\n      sourceMap: true\r\n    }\r\n  },\r\n  {\r\n    loader: 'sass-loader',\r\n    options: {\r\n      sourceMap: true\r\n    }\r\n  }\r\n]\r\n```\r\n\r\nbut using just `use: ['style-loader', 'css-loader', 'sass-loader']` it work\r\n\r\nEdit:\r\n\r\nerror :  69% building modules 881/882 modules 1 active ...rkspace/wingz-xxx/src/app/app.scsspath.js:7\r\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\r\n\r\napp.scss line 7 :\r\n```\r\n@font-face {\r\n  font-family: 'Galano Classic';\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  src: url('../assets/fonts/galano/Galano-Classic-Alt.eot');\r\n  src: url('../assets/fonts/galano/Galano-Classic-Alt.eot?#iefix') format('embedded-opentype'),\r\n       url('../assets/fonts/galano/Galano-Classic-Alt.ttf') format('truetype');\r\n}\r\n```. ",
    "juanrbachiller": "Thanks a lot for your answer. You're right, it is not a sass-loader issue. The problem is in the runtime compilation process. I got to find the appropriate hook for it... . Thanks a lot for your answer. You're right, it is not a sass-loader issue. The problem is in the runtime compilation process. I got to find the appropriate hook for it... . ",
    "Rinat93": "Hello!\r\nI have the same problem.. . Hello!\r\nI have the same problem.. . ",
    "Judahmeek": "Completely and utterly solved by https://github.com/bholloway/resolve-url-loader/pull/45. I'm rather blown away. :D. Completely and utterly solved by https://github.com/bholloway/resolve-url-loader/pull/45. I'm rather blown away. :D. ",
    "vanesyan": "A bit late, but your solution doesn't work. Webpack still throw `File to import not found or unreadable: ...` error, when importing in the way of `@import \"~@barebone/var-z-index\"`, while `style` and `main` (tried both and separately) fields in `package.json` are set to existing `index.scss` file path. But when I import it like this `@import \"~@barebone/var-z-index/index.scss\"`, it works.\r\n. I found similar problem in #293. @demiters but issue persists also if I prefix import path with tilde `~`, see example repo. by the link above.. Any updates on the thread?. @chikamichi as you can see in example I've provided there's the second form (from which you showed) of importing statement is in use (i.e. `@import \"~@org/pkg\"`).. Issue specifically appears for resolving imports from npm organization packages. Inuitcss doesn't bundle any packages from organization (`~@org/pkg`), inside it. And itself it's named `inuitcss` on npm. . @westhechiang As workaround you can set the path to importing file directly in `@import` rule, e.g.:\r\n```css\r\n@import \"~@foo/bar.scss\";\r\n```\r\nNote the `bar.scss` at the end of the importing rule.. The issue exactly was subjected to the `main` field in `package.json`. Importing from general npm package honors it, but not from organization package.. Yes, I know, the behavior also can be customized in webpack 2 (to support any specific field in` package.json`). But as you can see in provided example by me, importing from org. package ignore the `main` field in `package.json` file. That the issue.. @evilebottnawi it's ok, thanks :). @evilebottnawi hey, I create a new pull request #447 for fixing the issue. Any updates on the thread?. Can you also, please, upstream fix on npm?! :). Yes, it seems that with landed pr sass-loader preventing from processing file formatting, (e.g. adding underscore and file extension on lines [42-47](https://github.com/vanesyan/sass-loader/blob/master/lib/importsToResolve.js#L42-L47)) Should be fixed.... Friendly /cc @d3viant0ne, as it is hotfix for issue introduce in #447 . 6.0.5 patch still is not landed on npm. Did you install it through referencing to direct GitHub release url?. A bit late, but your solution doesn't work. Webpack still throw `File to import not found or unreadable: ...` error, when importing in the way of `@import \"~@barebone/var-z-index\"`, while `style` and `main` (tried both and separately) fields in `package.json` are set to existing `index.scss` file path. But when I import it like this `@import \"~@barebone/var-z-index/index.scss\"`, it works.\r\n. I found similar problem in #293. @demiters but issue persists also if I prefix import path with tilde `~`, see example repo. by the link above.. Any updates on the thread?. @chikamichi as you can see in example I've provided there's the second form (from which you showed) of importing statement is in use (i.e. `@import \"~@org/pkg\"`).. Issue specifically appears for resolving imports from npm organization packages. Inuitcss doesn't bundle any packages from organization (`~@org/pkg`), inside it. And itself it's named `inuitcss` on npm. . @westhechiang As workaround you can set the path to importing file directly in `@import` rule, e.g.:\r\n```css\r\n@import \"~@foo/bar.scss\";\r\n```\r\nNote the `bar.scss` at the end of the importing rule.. The issue exactly was subjected to the `main` field in `package.json`. Importing from general npm package honors it, but not from organization package.. Yes, I know, the behavior also can be customized in webpack 2 (to support any specific field in` package.json`). But as you can see in provided example by me, importing from org. package ignore the `main` field in `package.json` file. That the issue.. @evilebottnawi it's ok, thanks :). @evilebottnawi hey, I create a new pull request #447 for fixing the issue. Any updates on the thread?. Can you also, please, upstream fix on npm?! :). Yes, it seems that with landed pr sass-loader preventing from processing file formatting, (e.g. adding underscore and file extension on lines [42-47](https://github.com/vanesyan/sass-loader/blob/master/lib/importsToResolve.js#L42-L47)) Should be fixed.... Friendly /cc @d3viant0ne, as it is hotfix for issue introduce in #447 . 6.0.5 patch still is not landed on npm. Did you install it through referencing to direct GitHub release url?. ",
    "coveralls": "\n[![Coverage Status](https://coveralls.io/builds/10258390/badge)](https://coveralls.io/builds/10258390)\n\nChanges Unknown when pulling **53a7817fc0eef00b4045534aafb71e38619558be on change/webpack-contrib** into ** on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10258390/badge)](https://coveralls.io/builds/10258390)\n\nChanges Unknown when pulling **53a7817fc0eef00b4045534aafb71e38619558be on change/webpack-contrib** into ** on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10258390/badge)](https://coveralls.io/builds/10258390)\n\nChanges Unknown when pulling **53a7817fc0eef00b4045534aafb71e38619558be on change/webpack-contrib** into ** on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10462616/badge)](https://coveralls.io/builds/10462616)\n\nChanges Unknown when pulling **911a7744cef1ce61a89b2910a14078ea63a3b909 on lukeed:patch-1** into ** on webpack-contrib:master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10474608/badge)](https://coveralls.io/builds/10474608)\n\nChanges Unknown when pulling **68bed8d0e685854219234f2c2fac9cb2f54dff7c on update/links** into ** on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10476076/badge)](https://coveralls.io/builds/10476076)\n\nCoverage decreased (-1.5%) to 92.778% when pulling **462ae5f49cdf8048833f7c159f1f9bf62b022b14 on pr/origin/395** into **e21b8f58c6f895bf175fa5582fdd54b04f338b9f on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10480613/badge)](https://coveralls.io/builds/10480613)\n\nCoverage remained the same at 94.286% when pulling **cbd09f9fae9f9ab8f256719ce77bb492a7855f9d on BANOnotIT:patch-1** into **e21b8f58c6f895bf175fa5582fdd54b04f338b9f on webpack-contrib:master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10482085/badge)](https://coveralls.io/builds/10482085)\n\nCoverage increased (+1.7%) to 94.444% when pulling **a17a3080f966ac032db1c05b05cdf25c232623d8 on add/test-395** into **f44289bc88244d1bb43035394d69df36e90bbd0d on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10258390/badge)](https://coveralls.io/builds/10258390)\n\nChanges Unknown when pulling **53a7817fc0eef00b4045534aafb71e38619558be on change/webpack-contrib** into ** on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10258390/badge)](https://coveralls.io/builds/10258390)\n\nChanges Unknown when pulling **53a7817fc0eef00b4045534aafb71e38619558be on change/webpack-contrib** into ** on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10258390/badge)](https://coveralls.io/builds/10258390)\n\nChanges Unknown when pulling **53a7817fc0eef00b4045534aafb71e38619558be on change/webpack-contrib** into ** on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10462616/badge)](https://coveralls.io/builds/10462616)\n\nChanges Unknown when pulling **911a7744cef1ce61a89b2910a14078ea63a3b909 on lukeed:patch-1** into ** on webpack-contrib:master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10474608/badge)](https://coveralls.io/builds/10474608)\n\nChanges Unknown when pulling **68bed8d0e685854219234f2c2fac9cb2f54dff7c on update/links** into ** on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10476076/badge)](https://coveralls.io/builds/10476076)\n\nCoverage decreased (-1.5%) to 92.778% when pulling **462ae5f49cdf8048833f7c159f1f9bf62b022b14 on pr/origin/395** into **e21b8f58c6f895bf175fa5582fdd54b04f338b9f on master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10480613/badge)](https://coveralls.io/builds/10480613)\n\nCoverage remained the same at 94.286% when pulling **cbd09f9fae9f9ab8f256719ce77bb492a7855f9d on BANOnotIT:patch-1** into **e21b8f58c6f895bf175fa5582fdd54b04f338b9f on webpack-contrib:master**.\n. \n[![Coverage Status](https://coveralls.io/builds/10482085/badge)](https://coveralls.io/builds/10482085)\n\nCoverage increased (+1.7%) to 94.444% when pulling **a17a3080f966ac032db1c05b05cdf25c232623d8 on add/test-395** into **f44289bc88244d1bb43035394d69df36e90bbd0d on master**.\n. ",
    "dpeek": "My bad, had an outdated version of ExtractTextPlugin (beta.4). My bad, had an outdated version of ExtractTextPlugin (beta.4). ",
    "jsf-clabot": "[![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=389) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=394) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=394) before we can accept your contribution.<br/><hr/>**Dave Thompson** seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please [add the email address used for this commit to your account](https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/#commits-are-not-linked-to-any-user).. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=395) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=396) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=396) before we can accept your contribution.<br/><hr/>**Dave Thompson** seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please [add the email address used for this commit to your account](https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/#commits-are-not-linked-to-any-user).. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=397) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=399) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=399) before we can accept your contribution.<br/>. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=405) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=408) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=408) before we can accept your contribution.<br/>. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=417) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=419) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=421) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=422) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=428) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=438) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=447) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=472) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=485) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=485) before we can accept your contribution.<br/>. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=389) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=394) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=394) before we can accept your contribution.<br/><hr/>**Dave Thompson** seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please [add the email address used for this commit to your account](https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/#commits-are-not-linked-to-any-user).. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=395) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=396) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=396) before we can accept your contribution.<br/><hr/>**Dave Thompson** seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please [add the email address used for this commit to your account](https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/#commits-are-not-linked-to-any-user).. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=397) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=399) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=399) before we can accept your contribution.<br/>. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=405) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=408) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=408) before we can accept your contribution.<br/>. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=417) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=419) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=421) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=422) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=428) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=438) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=447) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=472) <br/>All committers have signed the CLA.. [![CLA assistant check](https://cla.js.foundation/pull/badge/not_signed)](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=485) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.js.foundation/webpack-contrib/sass-loader?pullRequest=485) before we can accept your contribution.<br/>. ",
    "MangeshPimpalkar": "This is related to https://github.com/webpack-contrib/sass-loader/issues/373. This is related to https://github.com/webpack-contrib/sass-loader/issues/373. ",
    "rohmanhm": "sorry I think it's not sass-loader issue. sorry I think it's not sass-loader issue. ",
    "mllustosa": "With further debugging I realized that the problem is with **node-sass ^4.0.0**. I believe is something to do with the [:property_syntax](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#property_syntax-option) option from Sass. From the docs:\r\n\r\n> Forces indented-syntax documents to use one syntax for properties. If the correct syntax isn\u2019t used, an error is thrown. :new forces the use of a colon after the property name. For example: color: #0f3 or width: $main_width. :old forces the use of a colon before the property name. For example: :color #0f3 or :width $main_width. By default, either syntax is valid. This has no effect on SCSS documents.\r\n\r\nSo, as I'm using local scoped class names from css-loader `:local(.className)`, this syntax would be a valid property syntax if the property_syntax is set to `:old`. Node sass interprets it as something like local(.className): $value  --- in a `$prop_key: $prop_value` syntax.\r\n\r\n**Any ideas on how I can fix this? For now, I'm just keeping ^3.0.0 from node-sass, but its not a solution as I always get an** `UNMET PEER DEPENDENCY` **from sass-loader when I** `npm install` **my project.**\r\n\r\n**index.sass**\r\n```\r\n:local(.container)\r\n  padding-top: 20px\r\n```\r\n\r\n**node-sass ^3.0.0**\r\n``` javascript\r\nimport sass from 'node-sass';\r\nconst result = sass.renderSync({ file: './index.sass' });\r\nconsole.log(result);\r\n/*\r\n{\r\n  stats: \r\n  {\r\n    entry: './index.sass',\r\n    start: 1488802011040,\r\n    includedFiles: [ './index.sass' ],\r\n    end: 1488802011047,\r\n    duration: 7,\r\n  },\r\n  css: <Buffer 3a 6c 6f 63 61 6c 28 2e ... >\r\n}\r\n*/\r\n```\r\n\r\n**node-sass ^4.0.0**\r\n``` javascript\r\nimport sass from 'node-sass';\r\nconst result = sass.renderSync({ file: './index.sass' });\r\n/*\r\nError: Invalid CSS after \"l\": expected 1 selector or at-rule, was \"local(.container): \"\r\n    at Object.module.exports.renderSync (./node_modules/node-sass/lib/index.js:439:16)\r\n    at repl:1:19\r\n    at ContextifyScript.Script.runInThisContext (vm.js:23:33)\r\n    at REPLServer.defaultEval (repl.js:336:29)\r\n    at bound (domain.js:280:14)\r\n    at REPLServer.runBound [as eval] (domain.js:293:12)\r\n    at REPLServer.onLine (repl.js:533:10)\r\n    at emitOne (events.js:101:20)\r\n    at REPLServer.emit (events.js:191:7)\r\n    at REPLServer.Interface._onLine (readline.js:238:10)\r\n*/\r\n```. Thank you very much, @jhnns. Priceless help.. With further debugging I realized that the problem is with **node-sass ^4.0.0**. I believe is something to do with the [:property_syntax](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#property_syntax-option) option from Sass. From the docs:\r\n\r\n> Forces indented-syntax documents to use one syntax for properties. If the correct syntax isn\u2019t used, an error is thrown. :new forces the use of a colon after the property name. For example: color: #0f3 or width: $main_width. :old forces the use of a colon before the property name. For example: :color #0f3 or :width $main_width. By default, either syntax is valid. This has no effect on SCSS documents.\r\n\r\nSo, as I'm using local scoped class names from css-loader `:local(.className)`, this syntax would be a valid property syntax if the property_syntax is set to `:old`. Node sass interprets it as something like local(.className): $value  --- in a `$prop_key: $prop_value` syntax.\r\n\r\n**Any ideas on how I can fix this? For now, I'm just keeping ^3.0.0 from node-sass, but its not a solution as I always get an** `UNMET PEER DEPENDENCY` **from sass-loader when I** `npm install` **my project.**\r\n\r\n**index.sass**\r\n```\r\n:local(.container)\r\n  padding-top: 20px\r\n```\r\n\r\n**node-sass ^3.0.0**\r\n``` javascript\r\nimport sass from 'node-sass';\r\nconst result = sass.renderSync({ file: './index.sass' });\r\nconsole.log(result);\r\n/*\r\n{\r\n  stats: \r\n  {\r\n    entry: './index.sass',\r\n    start: 1488802011040,\r\n    includedFiles: [ './index.sass' ],\r\n    end: 1488802011047,\r\n    duration: 7,\r\n  },\r\n  css: <Buffer 3a 6c 6f 63 61 6c 28 2e ... >\r\n}\r\n*/\r\n```\r\n\r\n**node-sass ^4.0.0**\r\n``` javascript\r\nimport sass from 'node-sass';\r\nconst result = sass.renderSync({ file: './index.sass' });\r\n/*\r\nError: Invalid CSS after \"l\": expected 1 selector or at-rule, was \"local(.container): \"\r\n    at Object.module.exports.renderSync (./node_modules/node-sass/lib/index.js:439:16)\r\n    at repl:1:19\r\n    at ContextifyScript.Script.runInThisContext (vm.js:23:33)\r\n    at REPLServer.defaultEval (repl.js:336:29)\r\n    at bound (domain.js:280:14)\r\n    at REPLServer.runBound [as eval] (domain.js:293:12)\r\n    at REPLServer.onLine (repl.js:533:10)\r\n    at emitOne (events.js:101:20)\r\n    at REPLServer.emit (events.js:191:7)\r\n    at REPLServer.Interface._onLine (readline.js:238:10)\r\n*/\r\n```. Thank you very much, @jhnns. Priceless help.. ",
    "bartwitt": "Thanks @jhnns! Already spent a lot more time on this issue than I hoped, but I'm pretty sure your post saved me from spending a lot lot more ;). Thanks @jhnns! Already spent a lot more time on this issue than I hoped, but I'm pretty sure your post saved me from spending a lot lot more ;). ",
    "edlott": "Trying again with everything needed for github.. My mistake - I was confused with how Pull Request work on GitHub.  Sorry for the noise.. I signed the CLA,. Trying again with everything needed for github.. My mistake - I was confused with how Pull Request work on GitHub.  Sorry for the noise.. I signed the CLA,. ",
    "lukeed": "Thanks~. Thanks~. ",
    "BANOnotIT": "I tried to fix [this page](https://webpack.js.org/loaders/sass-loader/#in-production), but i agree, that webpack logo looks vary big.\r\n. I tried to fix [this page](https://webpack.js.org/loaders/sass-loader/#in-production), but i agree, that webpack logo looks vary big.\r\n. ",
    "jkinzel-r7": "This was a problem with ExtractTextPlugin. https://github.com/webpack-contrib/sass-loader/issues/388. This was a problem with ExtractTextPlugin. https://github.com/webpack-contrib/sass-loader/issues/388. ",
    "MrEfrem": "`Windows 10 (Edge)`:\r\n```\r\nCannot find module \"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C:\\\\web\\\\frontend-editor\\\\build\\\\tasks\\\\src-embed-toolbox.scss\";!./custom.scss\"\r\n\r\nCannot find module \"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C:\\web\\frontend-editor\\build\\tasks\\src-embed-toolbox.scss\";!./custom.scss\"\r\n\r\nCannot find module \"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C:/web/frontend-editor/build/tasks/src-embed-toolbox.scss\";!./custom.scss\"\r\n\r\nCannot find module \"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C://web//frontend-editor//build//tasks//src-embed-toolbox.scss\";!./custom.scss\"\r\n```\r\n\r\n`Windows 7 (IE11)`:\r\n```\r\nThis variant is works:\r\n\"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C:/web/frontend-editor/build/tasks/src-embed-toolbox.scss\";!./custom.scss\"\r\n```. Why?. I have updated `sass-loader` on the last version and no see more the errors.. @woshi82 ok, thanks. How will try again don't forget you example.. `Windows 10 (Edge)`:\r\n```\r\nCannot find module \"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C:\\\\web\\\\frontend-editor\\\\build\\\\tasks\\\\src-embed-toolbox.scss\";!./custom.scss\"\r\n\r\nCannot find module \"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C:\\web\\frontend-editor\\build\\tasks\\src-embed-toolbox.scss\";!./custom.scss\"\r\n\r\nCannot find module \"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C:/web/frontend-editor/build/tasks/src-embed-toolbox.scss\";!./custom.scss\"\r\n\r\nCannot find module \"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C://web//frontend-editor//build//tasks//src-embed-toolbox.scss\";!./custom.scss\"\r\n```\r\n\r\n`Windows 7 (IE11)`:\r\n```\r\nThis variant is works:\r\n\"!!../../../node_modules/css-loader/index.js?module&importLoaders=2&localIdentName=[name]__[local]___[hash:base64:5]!../../../node_modules/postcss/lib/postcss.js!../../../node_modules/sass-loader/index.js?data=@import \"C:/web/frontend-editor/build/tasks/src-embed-toolbox.scss\";!./custom.scss\"\r\n```. Why?. I have updated `sass-loader` on the last version and no see more the errors.. @woshi82 ok, thanks. How will try again don't forget you example.. ",
    "woshi82": "@MrEfrem It seems in v6.0.5, the problem still exist in windows, so i have to use following code to avoid the problem.\r\n``` javascript\r\ndata: `@import \"~${path.resolve('assets/scss/common.scss').replace(/\\\\/g, '/')}\";`\r\n. @MrEfrem It seems in v6.0.5, the problem still exist in windows, so i have to use following code to avoid the problem.\r\n``` javascript\r\ndata: `@import \"~${path.resolve('assets/scss/common.scss').replace(/\\\\/g, '/')}\";`\r\n. ",
    "stephane-r": "Hi @jhnns \r\n\r\nSo, i need to use Webpack 2 ?. Hi @jhnns \r\n\r\nSo, i need to use Webpack 2 ?. ",
    "trusktr": "Oh, I'm in Webpack 2 by the way. The config structure has changed, in case that might be related. Haven't tried in Webpack 1.. Oh, I'm in Webpack 2 by the way. The config structure has changed, in case that might be related. Haven't tried in Webpack 1.. ",
    "williamboman": "Having the exact same issue when migrating from webpack 1 to 2.. > These issues seem like the when you @import something, it doesn't properly go through the normal Webpack processing.\r\n\r\nHave you [read the docs regarding @imports](https://github.com/webpack-contrib/sass-loader#imports)? (you probably forgot to use `~`). Having the exact same issue when migrating from webpack 1 to 2.. > These issues seem like the when you @import something, it doesn't properly go through the normal Webpack processing.\r\n\r\nHave you [read the docs regarding @imports](https://github.com/webpack-contrib/sass-loader#imports)? (you probably forgot to use `~`). ",
    "adamscybot": "Im on Webpack 2 and have experienced this.\r\n\r\nIn a separate but possibly related issue (of webpack config seemingly not matering to `@import`),  I've also tried using a loader for a specific SASS file to load some web fonts via [webfonts-loader](https://github.com/jeerbl/webfonts-loader). This has no affect, even though my `test` is right.\r\n\r\nThese issues seem like the when you `@import` something, it doesn't properly go through the normal Webpack processing.\r\n\r\n.  @williamboman \r\n\r\nSo even if I use `@import` inline like this:\r\n\r\n```sass\r\n@import '~webfonts-loader!../js/alfa.font.js';\r\n```\r\n\r\nOr\r\n\r\n```sass\r\n@import 'webfonts-loader!../js/alfa.font.js';\r\n```\r\n\r\nI get `File to import not found or unreadable`. If instead of using inline loaders you specify it in the Webpack config then just import the file, I can see from the resulting error that it attempted to load the file directly instead of the result of passing the file through the loader I specified.\r\n\r\nI feel this could be related to this issue as it seems somewhere along the line the `@imported` file skips part of the webpack algorithm.. Im on Webpack 2 and have experienced this.\r\n\r\nIn a separate but possibly related issue (of webpack config seemingly not matering to `@import`),  I've also tried using a loader for a specific SASS file to load some web fonts via [webfonts-loader](https://github.com/jeerbl/webfonts-loader). This has no affect, even though my `test` is right.\r\n\r\nThese issues seem like the when you `@import` something, it doesn't properly go through the normal Webpack processing.\r\n\r\n.  @williamboman \r\n\r\nSo even if I use `@import` inline like this:\r\n\r\n```sass\r\n@import '~webfonts-loader!../js/alfa.font.js';\r\n```\r\n\r\nOr\r\n\r\n```sass\r\n@import 'webfonts-loader!../js/alfa.font.js';\r\n```\r\n\r\nI get `File to import not found or unreadable`. If instead of using inline loaders you specify it in the Webpack config then just import the file, I can see from the resulting error that it attempted to load the file directly instead of the result of passing the file through the loader I specified.\r\n\r\nI feel this could be related to this issue as it seems somewhere along the line the `@imported` file skips part of the webpack algorithm.. ",
    "satiewaltz": "@williamboman \r\nI'm having this issue as well. Aliases don't resolve on build and throw this even if I use `~`:\r\n```\r\nFile to import not found or unreadable: ~styles/mixins\r\n```\r\nEven stranger: this issue so far appeared on Ubuntu, and not in other operating systems.. @williamboman \r\nI'm having this issue as well. Aliases don't resolve on build and throw this even if I use `~`:\r\n```\r\nFile to import not found or unreadable: ~styles/mixins\r\n```\r\nEven stranger: this issue so far appeared on Ubuntu, and not in other operating systems.. ",
    "vorlov": "+1 same issue, webpack 2. +1 same issue, webpack 2. ",
    "fluffy-samurai": "I have the same issue in webpack 2.. I have the same issue in webpack 2.. ",
    "czpanda": "Any updates on this issue ? . Any updates on this issue ? . ",
    "vaughn-taylor": "I think I've resolved this for anyone who is still having this issue. I'll start with my directory/file layout:\r\n\r\n```\r\nnode_modules (folder)\r\n\tbootstrap (folder)\r\n\t\tscss (folder)\r\nmy-app (folder)\r\n\tapp.scss\r\n\tentry.js\r\nwebpack.config.js\r\n```\r\n\r\nThis is the relevant section of my webpack.config.js:\r\n\r\n```\r\nmodule.exports = {\r\n\tresolve: {\r\n\t\tmodules: ['node_modules'],\r\n\t\talias: {\r\n\t\t\t'BootstrapScss': path.join(__dirname, 'node_modules/bootstrap/scss/'),\r\n\t\t\t'BootstrapJs': path.join(__dirname, 'node_modules/bootstrap/js/dist/')\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThe key with the alias path above is that it must be relative to the location of my webpack.config.js file. \r\n\r\nIn my entry.js, the modules paths \"node_modules\" will be used to resolve paths to the .js files that live in NPM directory and the \"BootstrapJS\" alias will resolve to the Bootstrap JS directory:\r\n\r\n```\r\n// NPM JS IMPORTS - uses 'node_modules' to resolve\r\nimport 'jquery';\r\nimport 'jquery-ui';\r\n\r\n// BOOTSTRAP JS IMPORTS - uses 'BootstrapJS' alias to resolve\r\nimport 'BootstrapJs/util';\r\nimport 'BootstrapJs/alert';\r\nimport 'BootstrapJs/button';\r\n```\r\n\r\nWhen compiled, you should see this message in console:\r\n\r\n```\r\n[0] ./node_modules/jquery/dist/jquery.js 269 kB {0} [built]\r\n[1] ./my-app/entry.js 397 bytes {0} [built]\r\n[2] ./node_modules/jquery-ui/ui/widget.js 19.5 kB {0} [built]\r\n[3] ./node_modules/jquery-ui/ui/version.js 278 bytes {0} [built]\r\n[4] ./node_modules/bootstrap/js/dist/util.js 4.29 kB {0} [built]\r\n[5] ./node_modules/bootstrap/js/dist/alert.js 4.96 kB {0} [built]\r\n[6] ./node_modules/bootstrap/js/dist/button.js 5.24 kB {0} [built]\r\n```\r\n\r\nIn my app.scss file, I can import like this:\r\n\r\n```\r\n@import '~BootstrapScss/functions';\r\n@import '~BootstrapScss/mixins';\r\n@import '~BootstrapScss/root';\r\n...\r\n```\r\n\r\nThe \"~\" is required here because it indicates to Webpacks that this is not a relative import. You can find more information here: https://github.com/webpack-contrib/sass-loader#imports . I think I've resolved this for anyone who is still having this issue. I'll start with my directory/file layout:\r\n\r\n```\r\nnode_modules (folder)\r\n\tbootstrap (folder)\r\n\t\tscss (folder)\r\nmy-app (folder)\r\n\tapp.scss\r\n\tentry.js\r\nwebpack.config.js\r\n```\r\n\r\nThis is the relevant section of my webpack.config.js:\r\n\r\n```\r\nmodule.exports = {\r\n\tresolve: {\r\n\t\tmodules: ['node_modules'],\r\n\t\talias: {\r\n\t\t\t'BootstrapScss': path.join(__dirname, 'node_modules/bootstrap/scss/'),\r\n\t\t\t'BootstrapJs': path.join(__dirname, 'node_modules/bootstrap/js/dist/')\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThe key with the alias path above is that it must be relative to the location of my webpack.config.js file. \r\n\r\nIn my entry.js, the modules paths \"node_modules\" will be used to resolve paths to the .js files that live in NPM directory and the \"BootstrapJS\" alias will resolve to the Bootstrap JS directory:\r\n\r\n```\r\n// NPM JS IMPORTS - uses 'node_modules' to resolve\r\nimport 'jquery';\r\nimport 'jquery-ui';\r\n\r\n// BOOTSTRAP JS IMPORTS - uses 'BootstrapJS' alias to resolve\r\nimport 'BootstrapJs/util';\r\nimport 'BootstrapJs/alert';\r\nimport 'BootstrapJs/button';\r\n```\r\n\r\nWhen compiled, you should see this message in console:\r\n\r\n```\r\n[0] ./node_modules/jquery/dist/jquery.js 269 kB {0} [built]\r\n[1] ./my-app/entry.js 397 bytes {0} [built]\r\n[2] ./node_modules/jquery-ui/ui/widget.js 19.5 kB {0} [built]\r\n[3] ./node_modules/jquery-ui/ui/version.js 278 bytes {0} [built]\r\n[4] ./node_modules/bootstrap/js/dist/util.js 4.29 kB {0} [built]\r\n[5] ./node_modules/bootstrap/js/dist/alert.js 4.96 kB {0} [built]\r\n[6] ./node_modules/bootstrap/js/dist/button.js 5.24 kB {0} [built]\r\n```\r\n\r\nIn my app.scss file, I can import like this:\r\n\r\n```\r\n@import '~BootstrapScss/functions';\r\n@import '~BootstrapScss/mixins';\r\n@import '~BootstrapScss/root';\r\n...\r\n```\r\n\r\nThe \"~\" is required here because it indicates to Webpacks that this is not a relative import. You can find more information here: https://github.com/webpack-contrib/sass-loader#imports . ",
    "micolator": "@SteveOps\nIntellij does not recognize the imports, but it works with webpack. It's a\nbug in IntelliJ already fixed into phpStorm.\n\n\nCordialement,\nNicolas Trichet\n\n2017-11-11 23:51 GMT+01:00 Steve Ops <notifications@github.com>:\n\n> @vaughn-taylor <https://github.com/vaughn-taylor> Not working for me.\n> Webpack 3.6.0 and sass-loader 6.0.6. Was working yesterday then I\n> accidentally deleted node_modules, now am getting that error with sass\n> @imports <https://github.com/imports> and I dont know why.\n>\n> This is part of my webpack config, located one level into the project root.\n> [image: screen shot 2017-11-12 at 01 44 11]\n> <https://user-images.githubusercontent.com/12711215/32694196-20768d4e-c74b-11e7-95da-33f0a5ba51b4.png>\n>\n> And these are the failing imports File to import not found or unreadable:\n> ~bootstrap/scss/functions\n>\n> [image: screen shot 2017-11-12 at 01 44 38]\n> <https://user-images.githubusercontent.com/12711215/32694200-4362b512-c74b-11e7-9553-e5448a5e3b39.png>\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/webpack-contrib/sass-loader/issues/410#issuecomment-343699731>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ADqd1sCb5vRa_RdqN1W9VhR0Dm-J_ppvks5s1iTZgaJpZM4MgBoC>\n> .\n>\n. @SteveOps\nIntellij does not recognize the imports, but it works with webpack. It's a\nbug in IntelliJ already fixed into phpStorm.\n\n\nCordialement,\nNicolas Trichet\n\n2017-11-11 23:51 GMT+01:00 Steve Ops <notifications@github.com>:\n\n> @vaughn-taylor <https://github.com/vaughn-taylor> Not working for me.\n> Webpack 3.6.0 and sass-loader 6.0.6. Was working yesterday then I\n> accidentally deleted node_modules, now am getting that error with sass\n> @imports <https://github.com/imports> and I dont know why.\n>\n> This is part of my webpack config, located one level into the project root.\n> [image: screen shot 2017-11-12 at 01 44 11]\n> <https://user-images.githubusercontent.com/12711215/32694196-20768d4e-c74b-11e7-95da-33f0a5ba51b4.png>\n>\n> And these are the failing imports File to import not found or unreadable:\n> ~bootstrap/scss/functions\n>\n> [image: screen shot 2017-11-12 at 01 44 38]\n> <https://user-images.githubusercontent.com/12711215/32694200-4362b512-c74b-11e7-9553-e5448a5e3b39.png>\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/webpack-contrib/sass-loader/issues/410#issuecomment-343699731>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ADqd1sCb5vRa_RdqN1W9VhR0Dm-J_ppvks5s1iTZgaJpZM4MgBoC>\n> .\n>\n. ",
    "steveops": "@micolator I actually meant the `File not found or unreadable` error when you try to build, but I have since fixed it, it was a stupid mistake from my end :). @micolator I actually meant the `File not found or unreadable` error when you try to build, but I have since fixed it, it was a stupid mistake from my end :). ",
    "xXanth0s": "Have the same problem :(. Have the same problem :(. ",
    "zabojad": "I've observed very odd behaviors:\r\n\r\n* First, if I change my webpack config to the one proposed in the README (ie, via the `rules` node), sass will simply not work at all (parser error, no loader found for this...).\r\n\r\n* `@import` statements work with relative pathes.\r\n\r\nHere are the versions I'm using:\r\n\r\n```\r\n    \"css-loader\": \"0.27.3\",\r\n    \"json-loader\": \"0.5.4\",\r\n    \"node-sass\": \"4.5.0\",\r\n    \"sass-loader\": \"6.0.3\",\r\n    \"style-loader\": \"0.14.1\",\r\n    \"webpack\": \"2.2.1\"\r\n```. I've just succeeded in making it work with inline loader configuration (+ webpack 1 config style):\r\n```\r\nmodule: {\r\n\t\tloaders: [\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.js$/,\r\n\t\t\t\texclude: /node_modules/,\r\n\t\t\t\tloader: 'babel',\r\n\t\t\t\tquery: {\r\n\t\t\t\t\tpresets: ['es2015', 'react']\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.json$/,\r\n\t\t\t\texclude: /node_modules/,\r\n\t\t\t\tloader: 'json'\r\n\t\t\t},\r\n\t\t\t{\r\n                test: /\\.scss$/,\r\n                loaders: [ \"style-loader\", \"css-loader?sourceMap\", 'sass-loader?{\"sourceMap\":true,\"includePaths\":[\"app/styles\"]}' ],\r\n            }\r\n\t\t],\r\n\t},\r\n```\r\n\r\nWhy the hell the \"modern\" way to do this doesn't work ? ie, with the `rules` node?. I've observed very odd behaviors:\r\n\r\n* First, if I change my webpack config to the one proposed in the README (ie, via the `rules` node), sass will simply not work at all (parser error, no loader found for this...).\r\n\r\n* `@import` statements work with relative pathes.\r\n\r\nHere are the versions I'm using:\r\n\r\n```\r\n    \"css-loader\": \"0.27.3\",\r\n    \"json-loader\": \"0.5.4\",\r\n    \"node-sass\": \"4.5.0\",\r\n    \"sass-loader\": \"6.0.3\",\r\n    \"style-loader\": \"0.14.1\",\r\n    \"webpack\": \"2.2.1\"\r\n```. I've just succeeded in making it work with inline loader configuration (+ webpack 1 config style):\r\n```\r\nmodule: {\r\n\t\tloaders: [\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.js$/,\r\n\t\t\t\texclude: /node_modules/,\r\n\t\t\t\tloader: 'babel',\r\n\t\t\t\tquery: {\r\n\t\t\t\t\tpresets: ['es2015', 'react']\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttest: /\\.json$/,\r\n\t\t\t\texclude: /node_modules/,\r\n\t\t\t\tloader: 'json'\r\n\t\t\t},\r\n\t\t\t{\r\n                test: /\\.scss$/,\r\n                loaders: [ \"style-loader\", \"css-loader?sourceMap\", 'sass-loader?{\"sourceMap\":true,\"includePaths\":[\"app/styles\"]}' ],\r\n            }\r\n\t\t],\r\n\t},\r\n```\r\n\r\nWhy the hell the \"modern\" way to do this doesn't work ? ie, with the `rules` node?. ",
    "dovidweisz": "I am encountered the same issue when upgrading sass-loader from 4.1.1 to 5.0.0.\r\n\r\nI use `includePaths` to tell my modules where to find foundations mixins etc.\r\n\r\nWhen using the `LoaderOptionsPlugin` method to set my node-sass options, it could not find my dependencies. As @zabojad mentioned above, stringifying my options and passing them inline to the loader fixed this issue.\r\n```\r\n{\r\n\ttest: /\\.scss$/,\r\n\tloaders: [`sass-loader?${nodeSassOptions}`],\r\n}\r\n```\r\nI wonder if `includePaths` is the only option that doesn't work with `LoaderOptionsPlugin`, or are there other options (sassFunctions?) that are also broken.. @evilebottnawi i just did.\r\n\r\nI updated to 6.0.5 and am still experiencing the same issue. \u2639\ufe0f . @evilebottnawi Here you go:\r\n\r\nhttps://github.com/dovidweisz/todomvc-angular-4\r\n\r\nupgrade `sass-loader` to the latest version and watch it break \ud83d\ude04 . @evilebottnawi \r\n\r\nI created this repo (read as two hours of my employers time) specifically to show you this issue. Please don't close it because you could't reproduce the issue.\r\n\r\nIf you would look at the  package.json you would see that sass-loader is at version 4.1.1. \r\n\r\nThe idea was that you would:\r\n1. Build the project and see that its working\r\n2. modify package.json like so:\r\n```\r\n-    \"sass-loader\": \"^4.1.1\",\r\n+    \"sass-loader\": \"^6.0.5\",\r\n```\r\n3. run `npm install`\r\n4 re run the build and see that it's broken\r\n\r\nFor your convenience i created a branch with this change https://github.com/dovidweisz/todomvc-angular-4/tree/upgrade-sass-loader\r\n\r\n. to reproduce the issue run these commands:\r\n\r\n```\r\ngit fetch\r\ngit checkout upgrade-sass-loader\r\nnpm i\r\nnpm start\r\n```. Now is see [LoaderOptionsPlugin](https://webpack.js.org/plugins/loader-options-plugin/) is deprecated. I will attempt to fix it using the new recommended syntax.\r\n\r\nThank You. I am encountered the same issue when upgrading sass-loader from 4.1.1 to 5.0.0.\r\n\r\nI use `includePaths` to tell my modules where to find foundations mixins etc.\r\n\r\nWhen using the `LoaderOptionsPlugin` method to set my node-sass options, it could not find my dependencies. As @zabojad mentioned above, stringifying my options and passing them inline to the loader fixed this issue.\r\n```\r\n{\r\n\ttest: /\\.scss$/,\r\n\tloaders: [`sass-loader?${nodeSassOptions}`],\r\n}\r\n```\r\nI wonder if `includePaths` is the only option that doesn't work with `LoaderOptionsPlugin`, or are there other options (sassFunctions?) that are also broken.. @evilebottnawi i just did.\r\n\r\nI updated to 6.0.5 and am still experiencing the same issue. \u2639\ufe0f . @evilebottnawi Here you go:\r\n\r\nhttps://github.com/dovidweisz/todomvc-angular-4\r\n\r\nupgrade `sass-loader` to the latest version and watch it break \ud83d\ude04 . @evilebottnawi \r\n\r\nI created this repo (read as two hours of my employers time) specifically to show you this issue. Please don't close it because you could't reproduce the issue.\r\n\r\nIf you would look at the  package.json you would see that sass-loader is at version 4.1.1. \r\n\r\nThe idea was that you would:\r\n1. Build the project and see that its working\r\n2. modify package.json like so:\r\n```\r\n-    \"sass-loader\": \"^4.1.1\",\r\n+    \"sass-loader\": \"^6.0.5\",\r\n```\r\n3. run `npm install`\r\n4 re run the build and see that it's broken\r\n\r\nFor your convenience i created a branch with this change https://github.com/dovidweisz/todomvc-angular-4/tree/upgrade-sass-loader\r\n\r\n. to reproduce the issue run these commands:\r\n\r\n```\r\ngit fetch\r\ngit checkout upgrade-sass-loader\r\nnpm i\r\nnpm start\r\n```. Now is see [LoaderOptionsPlugin](https://webpack.js.org/plugins/loader-options-plugin/) is deprecated. I will attempt to fix it using the new recommended syntax.\r\n\r\nThank You. ",
    "katiasmet": "@evilebottnawi I'm still the same issue. I don't use the loaderOptionsPlugin. \r\n\r\nI've created a gist with the files : https://gist.github.com/katiasmet/86a71a51679159dda5430a699b749f3e . Hi,\r\n\r\nI think I have the same issue. I'm trying to @import files from a subdirectory. Importing files from the same directory works like a charm, but from a subdirectory I get the same error as the initial post.\r\n\r\nMy folder structure\r\n```\r\nwebpack.config.js\r\n./src\r\n./src/_scss\r\n./src/_scss/main.scss\r\n./src/_scss/subfolder\r\n./src/_scss/subfolder/subfile.scss\r\n./src/index.html\r\n```\r\n\r\nin main.scss\r\n@import 'subfolder/subfile'\r\n\r\nin webpack.config.js\r\n```javascript\r\nmodule: {\r\n    rules: removeEmpty([\r\n      {\r\n        test: /\\.scss$/,\r\n        loader: extractCSS.extract([\r\n          {\r\n            loader: `style-loader`,\r\n          },\r\n          {\r\n            loader: `css-loader`,\r\n          },\r\n          {\r\n            loader: `postcss-loader`,\r\n          },\r\n          {\r\n            loader: `sass-loader`,\r\n          },\r\n        ]),\r\n      },\r\n  ])\r\n}\r\n```\r\n. Ok that worked :D thanks a lot!. @evilebottnawi I'm still the same issue. I don't use the loaderOptionsPlugin. \r\n\r\nI've created a gist with the files : https://gist.github.com/katiasmet/86a71a51679159dda5430a699b749f3e . Hi,\r\n\r\nI think I have the same issue. I'm trying to @import files from a subdirectory. Importing files from the same directory works like a charm, but from a subdirectory I get the same error as the initial post.\r\n\r\nMy folder structure\r\n```\r\nwebpack.config.js\r\n./src\r\n./src/_scss\r\n./src/_scss/main.scss\r\n./src/_scss/subfolder\r\n./src/_scss/subfolder/subfile.scss\r\n./src/index.html\r\n```\r\n\r\nin main.scss\r\n@import 'subfolder/subfile'\r\n\r\nin webpack.config.js\r\n```javascript\r\nmodule: {\r\n    rules: removeEmpty([\r\n      {\r\n        test: /\\.scss$/,\r\n        loader: extractCSS.extract([\r\n          {\r\n            loader: `style-loader`,\r\n          },\r\n          {\r\n            loader: `css-loader`,\r\n          },\r\n          {\r\n            loader: `postcss-loader`,\r\n          },\r\n          {\r\n            loader: `sass-loader`,\r\n          },\r\n        ]),\r\n      },\r\n  ])\r\n}\r\n```\r\n. Ok that worked :D thanks a lot!. ",
    "mortocks": "+1\r\n\r\n```\r\nWebpack  (pretty much a clone of your Readme example\r\n...\r\n{\r\n  test: /\\.scss$/,\r\n  use: extractSass.extract({\r\n    use: [{\r\n      loader: \"css-loader\"\r\n    }, {\r\n      loader: \"sass-loader\"\r\n    }],\r\n    // use style-loader in development\r\n      fallback: \"style-loader\"\r\n    })\r\n},\r\n...\r\nplugins: [\r\n    extractSass\r\n]\r\n...\r\n```\r\n\r\nstyle.css\r\n```\r\n@import '../../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap.scss'\r\n```\r\n\r\n_bootstrap.scss\r\n```\r\n// Core variables and mixins\r\n@import \"bootstrap/variables\";\r\n@import \"bootstrap/mixins\";\r\n```\r\n\r\nError\r\n```\r\n error  in ./~/bootstrap-sass/assets/stylesheets/_bootstrap.scss\r\n\r\nModule build failed: Unknown word (7:1)\r\n\r\n   5 |  */\r\n   6 | \r\n>  7 | // Core variables and mixins\r\n     | ^\r\n   8 | @import \"bootstrap/variables\";\r\n   9 | @import \"bootstrap/mixins\";\r\n```\r\n\r\n\r\n. Ignore my comment - I was using it incorrectly\r\n\r\nWebpack\r\n```\r\n{\r\n        test: /\\.s(a|c)ss$/, // .sass || .scss\r\n        include: [path.resolve(__dirname, 'src/scss')],\r\n        loader: 'style!css!sass'   \r\n      },\r\n```\r\n\r\nApp.js\r\n```\r\n<script>\r\nimport './scss/index.scss' // was doing this in the style tag which caused the issues\r\nexport default {\r\n  name: 'app',\r\n}\r\n</script>\r\n```\r\n\r\nindex.scss\r\n```\r\n@import '_variables';\r\n@import '../../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap.scss';\r\n// Works fine - although have to set the $icon-font-path variable for bootstrap to work properly\r\n```. +1\r\n\r\n```\r\nWebpack  (pretty much a clone of your Readme example\r\n...\r\n{\r\n  test: /\\.scss$/,\r\n  use: extractSass.extract({\r\n    use: [{\r\n      loader: \"css-loader\"\r\n    }, {\r\n      loader: \"sass-loader\"\r\n    }],\r\n    // use style-loader in development\r\n      fallback: \"style-loader\"\r\n    })\r\n},\r\n...\r\nplugins: [\r\n    extractSass\r\n]\r\n...\r\n```\r\n\r\nstyle.css\r\n```\r\n@import '../../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap.scss'\r\n```\r\n\r\n_bootstrap.scss\r\n```\r\n// Core variables and mixins\r\n@import \"bootstrap/variables\";\r\n@import \"bootstrap/mixins\";\r\n```\r\n\r\nError\r\n```\r\n error  in ./~/bootstrap-sass/assets/stylesheets/_bootstrap.scss\r\n\r\nModule build failed: Unknown word (7:1)\r\n\r\n   5 |  */\r\n   6 | \r\n>  7 | // Core variables and mixins\r\n     | ^\r\n   8 | @import \"bootstrap/variables\";\r\n   9 | @import \"bootstrap/mixins\";\r\n```\r\n\r\n\r\n. Ignore my comment - I was using it incorrectly\r\n\r\nWebpack\r\n```\r\n{\r\n        test: /\\.s(a|c)ss$/, // .sass || .scss\r\n        include: [path.resolve(__dirname, 'src/scss')],\r\n        loader: 'style!css!sass'   \r\n      },\r\n```\r\n\r\nApp.js\r\n```\r\n<script>\r\nimport './scss/index.scss' // was doing this in the style tag which caused the issues\r\nexport default {\r\n  name: 'app',\r\n}\r\n</script>\r\n```\r\n\r\nindex.scss\r\n```\r\n@import '_variables';\r\n@import '../../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap.scss';\r\n// Works fine - although have to set the $icon-font-path variable for bootstrap to work properly\r\n```. ",
    "jeffijoe": "Libraries like [Bulma](http://bulma.io) rely heavily on this.. @xzyfer thank you for clarifying! That does make good sense, and the problem ultimately lies with library authors' lack of quotes.. Libraries like [Bulma](http://bulma.io) rely heavily on this.. @xzyfer thank you for clarifying! That does make good sense, and the problem ultimately lies with library authors' lack of quotes.. ",
    "maffelbaffel": "Sry for the late response, I've set up a small repo which shows the issue.\r\nhttps://github.com/maffelbaffel/sass-substitution\r\n\r\nNote:\r\nI tried using `raw-loader` and `css-loader`, both with the same result:\r\n````\r\n     use: [\r\n                {\r\n                    loader: \"raw-loader\"\r\n                }, {\r\n                // {\r\n                //     loader: \"css-loader\"\r\n                // }, {\r\n                    loader: \"sass-loader\"\r\n                }\r\n            ]\r\n````\r\n\r\nResults in `bin/styles.bundle.js`:\r\n````\r\n...\r\nt.exports = \".test-btn-#fff{color:white}\\n\"\r\n...\r\n````\r\n\r\nAgain, this only happens with `webpack -p`.. Sry for the late response, I've set up a small repo which shows the issue.\r\nhttps://github.com/maffelbaffel/sass-substitution\r\n\r\nNote:\r\nI tried using `raw-loader` and `css-loader`, both with the same result:\r\n````\r\n     use: [\r\n                {\r\n                    loader: \"raw-loader\"\r\n                }, {\r\n                // {\r\n                //     loader: \"css-loader\"\r\n                // }, {\r\n                    loader: \"sass-loader\"\r\n                }\r\n            ]\r\n````\r\n\r\nResults in `bin/styles.bundle.js`:\r\n````\r\n...\r\nt.exports = \".test-btn-#fff{color:white}\\n\"\r\n...\r\n````\r\n\r\nAgain, this only happens with `webpack -p`.. ",
    "rhys-vdw": "Thanks for the great explanation. :+1: It's all clear now.\r\n\r\n> What is this @require statement?\r\n\r\nOops, wrote the wrong command. Definitely mean `@import`. Edited my original post.\r\n\r\n> What is the erb file extension about?\r\n\r\nIt's a Ruby templating language that we precompile to share code from our main app with the stylesheets. Processed by [`rails-erb-loader`](https://github.com/usabilityhub/rails-erb-loader). \r\n\r\n```js\r\n      {\r\n        test: /\\.sass(\\.erb)?$/,\r\n        use: {\r\n          loaders: 'sass-loader',\r\n          options: {\r\n            indentedSyntax: true\r\n          }\r\n        }\r\n      },\r\n      {\r\n        test: /\\.scss(\\.erb)?$/,\r\n        loader: 'sass-loader'\r\n      },\r\n      // Compile ERB templated files in the 'pre' section.\r\n      {\r\n        test: /\\.erb$/,\r\n        enforce: 'pre',\r\n        loader: 'rails-erb-loader',\r\n      }\r\n```\r\n\r\n> Is it commonly used?\r\n\r\nIt's commonly used in Rails projects compiled via Sprockets. We're migrating away from Sprockets, but it's a useful tool to have.\r\n\r\nMy preferred solution would be like option 1, but permitting the user to supply a list of extensions to resolve in the options. There is nothing specific to Sass about erb (one could use handlebars-loader or lodash-template-loader similarly). Actually adding a reference to the `.erb` extension in the sass-loader would be inappropriate.\r\n\r\n```js\r\n{\r\n  test: /\\.scss(\\.erb)?/,\r\n  loader: 'sass-loader',\r\n  options: { importExtensions: ['.scss', '.scss.erb', '.css'] }\r\n}\r\n```\r\n\r\nThis would replace [`extPrecedence`](https://github.com/webpack-contrib/sass-loader/blob/004807b4e5b13c4101b2c368a0ca5c9ee6dcf0cc/lib/importsToResolve.js#L6) in the `importsToResolve` function.\r\n\r\nOne downside of this is that it would fail if given the extension. eg. `some-file.sass.erb`. This could be worked around by providing just a `resolveExtensions` option or similar, but is not essential for my purposes.\r\n\r\nI can supply a PR for this if you think it's appropriate.. @jhnns So I've got this running locally (I think), but it doesn't seem to address the issue.\r\n\r\nMight it be the case that `@import`ed files are not in fact run through webpack at all, but simply read by node-sass? ie. the `webpackImporter` seems to just [resolve](https://github.com/sass/node-sass/blob/f2b410b7ffecb8b48b11e59b2ce2aa9601367112/README.md#importer--v200---experimental) the filename and then pass that back as `done({ file: resolvedFileName })`.\r\n\r\nFor my purposes I actually need the resolved content of the file to be passed back to node-sass (so that the ERB files can be transpiled by webpack first!), this seems like a bigger change than was considered above.\r\n\r\nSo for this to work I think I'd need to do use [loader.loadModule](https://webpack.js.org/api/loaders/#this-loadmodule) to get the source and then pass it back to `node-sass`, so change the code [here](https://github.com/webpack-contrib/sass-loader/blob/43cec39/lib/webpackImporter.js#L48-L56):\r\n\r\n```js\r\nloadModule(dir, importsToResolve[0])\r\n    .then((source, sourceMap, module) => {\r\n        // Add the file name as dependency.\r\n        addNormalizedDependency(module.resource);\r\n\r\n        // Actually pass the file data to node-sass so that the `@import`ed file uses webpack loaders.\r\n        return {\r\n            content: source\r\n        };\r\n    }, () => startResolving(\r\n        dir,\r\n        tail(importsToResolve)\r\n    ));\r\n\r\n```\r\n\r\nThis suddenly seems like quite a dramatic change to how sass-loader functions, and also makes the task a bit larger than I can justify doing on work time.. @evilebottnawi I ran out of time for the task so we're using Sprockets for now. Ultimately we plan to use Sass via Webpack, and ideally we will be able to use templating (specifically [`rails-erb-loader`](https://github.com/usabilityhub/rails-erb-loader)).\r\n\r\nI expect to get a chance to revisit this in the next couple of weeks. We still have an open issue referencing this one.\r\n\r\n@evilebottnawi, are you able to confirm that I'm understanding the situation correctly based on above discussion?. Hey @evilebottnawi. Looks like we're going to try to tackle this another way - by defining the values in Sass and then using [a loader](https://github.com/monvillalon/sass-values-loader) to parse the file and convert any variable values to JS.\r\n\r\nThanks for the help. You can close this issue.. @evilebottnawi Ah, cool! This one was made by my coworker. He looked at four modules that do this work and found each to be flawed in some way, but I don't think he saw yours. Why sync? Surely an async loader is preferable, no?. Thanks for the great explanation. :+1: It's all clear now.\r\n\r\n> What is this @require statement?\r\n\r\nOops, wrote the wrong command. Definitely mean `@import`. Edited my original post.\r\n\r\n> What is the erb file extension about?\r\n\r\nIt's a Ruby templating language that we precompile to share code from our main app with the stylesheets. Processed by [`rails-erb-loader`](https://github.com/usabilityhub/rails-erb-loader). \r\n\r\n```js\r\n      {\r\n        test: /\\.sass(\\.erb)?$/,\r\n        use: {\r\n          loaders: 'sass-loader',\r\n          options: {\r\n            indentedSyntax: true\r\n          }\r\n        }\r\n      },\r\n      {\r\n        test: /\\.scss(\\.erb)?$/,\r\n        loader: 'sass-loader'\r\n      },\r\n      // Compile ERB templated files in the 'pre' section.\r\n      {\r\n        test: /\\.erb$/,\r\n        enforce: 'pre',\r\n        loader: 'rails-erb-loader',\r\n      }\r\n```\r\n\r\n> Is it commonly used?\r\n\r\nIt's commonly used in Rails projects compiled via Sprockets. We're migrating away from Sprockets, but it's a useful tool to have.\r\n\r\nMy preferred solution would be like option 1, but permitting the user to supply a list of extensions to resolve in the options. There is nothing specific to Sass about erb (one could use handlebars-loader or lodash-template-loader similarly). Actually adding a reference to the `.erb` extension in the sass-loader would be inappropriate.\r\n\r\n```js\r\n{\r\n  test: /\\.scss(\\.erb)?/,\r\n  loader: 'sass-loader',\r\n  options: { importExtensions: ['.scss', '.scss.erb', '.css'] }\r\n}\r\n```\r\n\r\nThis would replace [`extPrecedence`](https://github.com/webpack-contrib/sass-loader/blob/004807b4e5b13c4101b2c368a0ca5c9ee6dcf0cc/lib/importsToResolve.js#L6) in the `importsToResolve` function.\r\n\r\nOne downside of this is that it would fail if given the extension. eg. `some-file.sass.erb`. This could be worked around by providing just a `resolveExtensions` option or similar, but is not essential for my purposes.\r\n\r\nI can supply a PR for this if you think it's appropriate.. @jhnns So I've got this running locally (I think), but it doesn't seem to address the issue.\r\n\r\nMight it be the case that `@import`ed files are not in fact run through webpack at all, but simply read by node-sass? ie. the `webpackImporter` seems to just [resolve](https://github.com/sass/node-sass/blob/f2b410b7ffecb8b48b11e59b2ce2aa9601367112/README.md#importer--v200---experimental) the filename and then pass that back as `done({ file: resolvedFileName })`.\r\n\r\nFor my purposes I actually need the resolved content of the file to be passed back to node-sass (so that the ERB files can be transpiled by webpack first!), this seems like a bigger change than was considered above.\r\n\r\nSo for this to work I think I'd need to do use [loader.loadModule](https://webpack.js.org/api/loaders/#this-loadmodule) to get the source and then pass it back to `node-sass`, so change the code [here](https://github.com/webpack-contrib/sass-loader/blob/43cec39/lib/webpackImporter.js#L48-L56):\r\n\r\n```js\r\nloadModule(dir, importsToResolve[0])\r\n    .then((source, sourceMap, module) => {\r\n        // Add the file name as dependency.\r\n        addNormalizedDependency(module.resource);\r\n\r\n        // Actually pass the file data to node-sass so that the `@import`ed file uses webpack loaders.\r\n        return {\r\n            content: source\r\n        };\r\n    }, () => startResolving(\r\n        dir,\r\n        tail(importsToResolve)\r\n    ));\r\n\r\n```\r\n\r\nThis suddenly seems like quite a dramatic change to how sass-loader functions, and also makes the task a bit larger than I can justify doing on work time.. @evilebottnawi I ran out of time for the task so we're using Sprockets for now. Ultimately we plan to use Sass via Webpack, and ideally we will be able to use templating (specifically [`rails-erb-loader`](https://github.com/usabilityhub/rails-erb-loader)).\r\n\r\nI expect to get a chance to revisit this in the next couple of weeks. We still have an open issue referencing this one.\r\n\r\n@evilebottnawi, are you able to confirm that I'm understanding the situation correctly based on above discussion?. Hey @evilebottnawi. Looks like we're going to try to tackle this another way - by defining the values in Sass and then using [a loader](https://github.com/monvillalon/sass-values-loader) to parse the file and convert any variable values to JS.\r\n\r\nThanks for the help. You can close this issue.. @evilebottnawi Ah, cool! This one was made by my coworker. He looked at four modules that do this work and found each to be flawed in some way, but I don't think he saw yours. Why sync? Surely an async loader is preferable, no?. ",
    "nsams": "## Steps to reproduce:\r\n\r\ndownload [sass-loader-test.tar.gz](https://github.com/webpack-contrib/sass-loader/files/875376/sass-loader-test.tar.gz)\r\n\r\n    $ tar xf sass-loader-test.tar.gz\r\n    $ cd sass-loader-test\r\n    $ npm install\r\n    $ ./node_modules/.bin/webpack-dev-server\r\n\r\nin other console:\r\n    $ touch app.js\r\n\r\n**output from webpack-dev-server:**\r\n\r\n    webpack: Compiling...\r\n    Hash: 9a933c8111ab97ecb7b2\r\n    Version: webpack 2.3.2\r\n    Time: 34ms\r\n    chunk    {0} out.js (main) 369 kB [entry]\r\n       [35] ./app.js 23 bytes {0} [built]\r\n       [41] ./~/css-loader!./~/sass-loader/lib/loader.js?{\"importer\":[null]}!./app.scss 187 bytes {0} [built]\r\n         + 93 hidden modules\r\n    webpack: Compiled successfully.\r\n\r\n(notice [41] where app.scss is getting built)\r\n\r\n**output from webpack-dev-server with patch applied:**\r\n\r\n    webpack: Compiling...\r\n    Hash: 9a933c8111ab97ecb7b2\r\n    Version: webpack 2.3.2\r\n    Time: 49ms\r\n    chunk    {0} out.js (main) 369 kB [entry]\r\n       [35] ./app.js 23 bytes {0} [built]\r\n         + 94 hidden modules\r\n    webpack: Compiled successfully.\r\n\r\n(now only app.js is getting built). This fix doesn't work when the importer is returning a `{ file: ... }` as that file stays relative. Probably we could check if the file exists?. I don't need this anymore, I generate a file now on disk which is better anyway to support changes.. ## Steps to reproduce:\r\n\r\ndownload [sass-loader-test.tar.gz](https://github.com/webpack-contrib/sass-loader/files/875376/sass-loader-test.tar.gz)\r\n\r\n    $ tar xf sass-loader-test.tar.gz\r\n    $ cd sass-loader-test\r\n    $ npm install\r\n    $ ./node_modules/.bin/webpack-dev-server\r\n\r\nin other console:\r\n    $ touch app.js\r\n\r\n**output from webpack-dev-server:**\r\n\r\n    webpack: Compiling...\r\n    Hash: 9a933c8111ab97ecb7b2\r\n    Version: webpack 2.3.2\r\n    Time: 34ms\r\n    chunk    {0} out.js (main) 369 kB [entry]\r\n       [35] ./app.js 23 bytes {0} [built]\r\n       [41] ./~/css-loader!./~/sass-loader/lib/loader.js?{\"importer\":[null]}!./app.scss 187 bytes {0} [built]\r\n         + 93 hidden modules\r\n    webpack: Compiled successfully.\r\n\r\n(notice [41] where app.scss is getting built)\r\n\r\n**output from webpack-dev-server with patch applied:**\r\n\r\n    webpack: Compiling...\r\n    Hash: 9a933c8111ab97ecb7b2\r\n    Version: webpack 2.3.2\r\n    Time: 49ms\r\n    chunk    {0} out.js (main) 369 kB [entry]\r\n       [35] ./app.js 23 bytes {0} [built]\r\n         + 94 hidden modules\r\n    webpack: Compiled successfully.\r\n\r\n(now only app.js is getting built). This fix doesn't work when the importer is returning a `{ file: ... }` as that file stays relative. Probably we could check if the file exists?. I don't need this anymore, I generate a file now on disk which is better anyway to support changes.. ",
    "demiters": "I am having the same problem trying to `@import 'material-components-web'` which would work if the package name was prefixed with tilde (~), however the Sass file in the package also internally imports from its own `@material/...` packages without the tilde so I have no idea how to make Webpack/sass-loader deal with that?. I am having the same problem trying to `@import 'material-components-web'` which would work if the package name was prefixed with tilde (~), however the Sass file in the package also internally imports from its own `@material/...` packages without the tilde so I have no idea how to make Webpack/sass-loader deal with that?. ",
    "chikamichi": "Don't know if that could be the underlying issue, but it has to be just `~`, not `~/`:\r\n\r\n``` sass\r\n// NOK:\r\n@import '~/@org/pkg';\r\n\r\n// OK:\r\n@import '~@org/pkg/';\r\n```. I thought you had indeed, but wanted to make it explicit just for clarification.\r\n\r\nI'm using sass-loader to @import chunks of an npm-installed inuitcss build which bundles .scss files and it works flawlessly. Fixing the paths to abide by Webpack's `~` convention was all I needed to make it work. Therefore could something else beyond path scheme be wrong in your setup?. Don't know if that could be the underlying issue, but it has to be just `~`, not `~/`:\r\n\r\n``` sass\r\n// NOK:\r\n@import '~/@org/pkg';\r\n\r\n// OK:\r\n@import '~@org/pkg/';\r\n```. I thought you had indeed, but wanted to make it explicit just for clarification.\r\n\r\nI'm using sass-loader to @import chunks of an npm-installed inuitcss build which bundles .scss files and it works flawlessly. Fixing the paths to abide by Webpack's `~` convention was all I needed to make it work. Therefore could something else beyond path scheme be wrong in your setup?. ",
    "westhechiang": "This is exactly the problem that I am running into when trying to use sass-loader with eyeglass. We bundle our packages from our org. I get a compile error:\r\n```\r\nFile to import not found or unreadable:  @eg-modules-header\r\n```\r\n\r\nI've been banging my head against this for the better part of this week so any insights would be extremely helpful!. This is exactly the problem that I am running into when trying to use sass-loader with eyeglass. We bundle our packages from our org. I get a compile error:\r\n```\r\nFile to import not found or unreadable:  @eg-modules-header\r\n```\r\n\r\nI've been banging my head against this for the better part of this week so any insights would be extremely helpful!. ",
    "BHouwens": "Same result unfortunately. @evilebottnawi Sample of CSS config: \r\n```javascript\r\nuse: [\r\n       'css-loader?modules&importLoaders=1&localIdentName[name]__[local]___[hash:base64:5]!postcss-loader',\r\n       {\r\n              loader: 'sass-loader?modules',\r\n        },\r\n ]\r\n```. @evilebottnawi On the nose, that seems to fix it. Strange that webpack swallows the errors silently here but fixing the config works.. Same result unfortunately. @evilebottnawi Sample of CSS config: \r\n```javascript\r\nuse: [\r\n       'css-loader?modules&importLoaders=1&localIdentName[name]__[local]___[hash:base64:5]!postcss-loader',\r\n       {\r\n              loader: 'sass-loader?modules',\r\n        },\r\n ]\r\n```. @evilebottnawi On the nose, that seems to fix it. Strange that webpack swallows the errors silently here but fixing the config works.. ",
    "mooror": "Thanks for the ping @evilebottnawi, I had totally forgot about this issue. The company I work for switched over to a gulp setup and therefor I had no need to look any further into this. While I still think that this feature might still be useful to others, I will close it as I myself no longer have any need for it. \r\n\r\nThank you for your time,\r\nMooror. Thanks for the ping @evilebottnawi, I had totally forgot about this issue. The company I work for switched over to a gulp setup and therefor I had no need to look any further into this. While I still think that this feature might still be useful to others, I will close it as I myself no longer have any need for it. \r\n\r\nThank you for your time,\r\nMooror. ",
    "vifird": "@evilebottnawi In sass's document, as i remember. . @evilebottnawi Yeah, it's truely less' document. Thanks.. @evilebottnawi In sass's document, as i remember. . @evilebottnawi Yeah, it's truely less' document. Thanks.. ",
    "alexanderknapstein": "Hey Dani,\r\n\r\nI fixed the problem using the following configuration:\r\n```javascript\r\nloader: \"sass-loader\",\r\noptions: {\r\n  includePaths: [path.resolve(__dirname, 'node_modules/foundation-sites/scss')]\r\n}\r\n```\r\n\r\nAnd added this into the scss file:\r\n```scss\r\n@import \"../app/_settings.scss\";\r\n@import \"~foundation-sites/scss/foundation.scss\";\r\n@include foundation-everything;\r\n```\r\n\r\n@include foundation-everything has to be replaced with the modules that we want to use.\r\n\r\nCheers,\r\nAlex\r\n. Hey Dani,\r\n\r\nI fixed the problem using the following configuration:\r\n```javascript\r\nloader: \"sass-loader\",\r\noptions: {\r\n  includePaths: [path.resolve(__dirname, 'node_modules/foundation-sites/scss')]\r\n}\r\n```\r\n\r\nAnd added this into the scss file:\r\n```scss\r\n@import \"../app/_settings.scss\";\r\n@import \"~foundation-sites/scss/foundation.scss\";\r\n@include foundation-everything;\r\n```\r\n\r\n@include foundation-everything has to be replaced with the modules that we want to use.\r\n\r\nCheers,\r\nAlex\r\n. ",
    "lukepolo": "Just went into beta , may be with looking into now. Just went into beta , may be with looking into now. ",
    "nex3": "@evilebottnawi Importer support is a high-priority feature for Dart Sass; we consider it blocking a 1.0.0 stable release.. I just put out https://github.com/sass/dart-sass/pull/186 which adds support for synchronous importers. I hope to land it tomorrow. Asynchronous importers will take more work, but this is an important step.. @evilebottnawi Importer support is a high-priority feature for Dart Sass; we consider it blocking a 1.0.0 stable release.. I just put out https://github.com/sass/dart-sass/pull/186 which adds support for synchronous importers. I hope to land it tomorrow. Asynchronous importers will take more work, but this is an important step.. ",
    "rayfoss": "For those googling around on how to use dart-sass instead of libsass/SassC in Vue, the answer is you can't. Until it has webpack/vue-loader/sass-loader support. Which can't happen without importer support, even if you are willing to simplify your sass to work with dart-sass.\r\n\r\nYou can follow progress here https://github.com/sass/dart-sass/issues/12. For those googling around on how to use dart-sass instead of libsass/SassC in Vue, the answer is you can't. Until it has webpack/vue-loader/sass-loader support. Which can't happen without importer support, even if you are willing to simplify your sass to work with dart-sass.\r\n\r\nYou can follow progress here https://github.com/sass/dart-sass/issues/12. ",
    "gitsupersmecher": "@evilebottnawi - when the configurations are not properly set not all the errors are well describing the problem. So, considering that are engineers, and we are used  with debugging and investigations, then a logger solution is quite handy. Don't you think?. @evilebottnawi - when the configurations are not properly set not all the errors are well describing the problem. So, considering that are engineers, and we are used  with debugging and investigations, then a logger solution is quite handy. Don't you think?. ",
    "chukitow": "@michael-ciniawsky I just signed the CLA and all checks have passed :). @michael-ciniawsky I just signed the CLA and all checks have passed :). ",
    "Iliyass": "i found the solution here https://github.com/webpack-contrib/sass-loader/issues/221#issuecomment-214917853. i found the solution here https://github.com/webpack-contrib/sass-loader/issues/221#issuecomment-214917853. ",
    "zhengxkq": "sorry,I found my label wrongly written by form .\r\nForm was written as from\uff01. sorry,I found my label wrongly written by form .\r\nForm was written as from\uff01. ",
    "alexandernanberg": "Nevermind. The cause of my issue was that I running the post-css loader before the sass-loader!. Nevermind. The cause of my issue was that I running the post-css loader before the sass-loader!. ",
    "puppeteer701": "My mistake, got it to work. My mistake, got it to work. ",
    "GoranGjorgievski": "Could you please point out what was the solution?. Could you please point out what was the solution?. ",
    "tw-paraxial": "Can't say if it's the same originator, but this is the first hit for this error when googling.  In my case, the arguments for css-loader and sass-loader were reversed, and apparently that was enough to cause this.. Can't say if it's the same originator, but this is the first hit for this error when googling.  In my case, the arguments for css-loader and sass-loader were reversed, and apparently that was enough to cause this.. ",
    "sirlancelot": "Any chance someone could get this merged? This is actually going to be a growing issue as more people start trying to bundle `material-components-web` which uses scoped packages extensively.. Thanks @d3viant0ne, I hadn't realized others were maintaining this. Thanks so much for you contributions!. Any chance someone could get this merged? This is actually going to be a growing issue as more people start trying to bundle `material-components-web` which uses scoped packages extensively.. Thanks @d3viant0ne, I hadn't realized others were maintaining this. Thanks so much for you contributions!. ",
    "merofeev": "Hello @d3viant0ne, @bebraw, @vanesyan!\r\nThis seems to be breaking [recommended way](https://material.angular.io/guide/theming#defining-a-custom-theme) to import custom Angular Material theme (see [issue at Angular Material repo](https://github.com/angular/material2/issues/4449)).\r\n\r\nThis worked fine with sass-loader 6.0.3\r\n`@import '~@angular/material/theming';` \r\nWith sass-loader 6.0.4 this import leads to error:\r\n`File to import not found or unreadable: ~@angular/material/theming.`\r\n\r\nTo make it work with sass-loader 6.0.4 I had to write\r\n`@import \"~@angular/material/_theming.scss\";`. Hello @d3viant0ne, @bebraw, @vanesyan!\r\nThis seems to be breaking [recommended way](https://material.angular.io/guide/theming#defining-a-custom-theme) to import custom Angular Material theme (see [issue at Angular Material repo](https://github.com/angular/material2/issues/4449)).\r\n\r\nThis worked fine with sass-loader 6.0.3\r\n`@import '~@angular/material/theming';` \r\nWith sass-loader 6.0.4 this import leads to error:\r\n`File to import not found or unreadable: ~@angular/material/theming.`\r\n\r\nTo make it work with sass-loader 6.0.4 I had to write\r\n`@import \"~@angular/material/_theming.scss\";`. ",
    "pselden": "Also breaking my build for the same reason.. Also breaking my build for the same reason.. ",
    "jarindr": "@evilebottnawi Yes i get that, unfortunately It isn't working with sass-loader with .sass extension\r\nI tried to switch to less and stylus loader and it works perfectly. Not sure this is my fault in configuration or not.\r\n\r\n<img width=\"1275\" alt=\"screen shot 2017-05-08 at 2 40 31 am\" src=\"https://cloud.githubusercontent.com/assets/2189889/25784505/53e5d320-3398-11e7-9899-4ac85e7c9278.png\">\r\n<img width=\"381\" alt=\"screen shot 2017-05-08 at 2 40 46 am\" src=\"https://cloud.githubusercontent.com/assets/2189889/25784506/551f1e04-3398-11e7-85b1-40ea49f98ee8.png\">\r\n\r\n```javascript\r\n  {\r\n    test: /\\.sass$/,\r\n    use: [{\r\n      loader: 'style-loader'\r\n    }, {\r\n      loader: 'css-loader',\r\n      options: {\r\n        modules: true,\r\n        localIdentName: '[name]-[local]-[hash:base64]'\r\n      }\r\n    },\r\n    {\r\n      loader: 'postcss-loader'\r\n    }, {\r\n      loader: 'sass-loader'\r\n    }]\r\n  },\r\n```. @evilebottnawi you just answered too fast lol i'm editing and accidentally click submit. So, if that is the case, any solution for using sass with some global scope ?\r\n. @evilebottnawi Found the problem, for .sass you need to escape `/:global` to make it possible to compile with its syntax and pass to css-loader.\r\nthanks for the help btw!. @evilebottnawi Yes i get that, unfortunately It isn't working with sass-loader with .sass extension\r\nI tried to switch to less and stylus loader and it works perfectly. Not sure this is my fault in configuration or not.\r\n\r\n<img width=\"1275\" alt=\"screen shot 2017-05-08 at 2 40 31 am\" src=\"https://cloud.githubusercontent.com/assets/2189889/25784505/53e5d320-3398-11e7-9899-4ac85e7c9278.png\">\r\n<img width=\"381\" alt=\"screen shot 2017-05-08 at 2 40 46 am\" src=\"https://cloud.githubusercontent.com/assets/2189889/25784506/551f1e04-3398-11e7-85b1-40ea49f98ee8.png\">\r\n\r\n```javascript\r\n  {\r\n    test: /\\.sass$/,\r\n    use: [{\r\n      loader: 'style-loader'\r\n    }, {\r\n      loader: 'css-loader',\r\n      options: {\r\n        modules: true,\r\n        localIdentName: '[name]-[local]-[hash:base64]'\r\n      }\r\n    },\r\n    {\r\n      loader: 'postcss-loader'\r\n    }, {\r\n      loader: 'sass-loader'\r\n    }]\r\n  },\r\n```. @evilebottnawi you just answered too fast lol i'm editing and accidentally click submit. So, if that is the case, any solution for using sass with some global scope ?\r\n. @evilebottnawi Found the problem, for .sass you need to escape `/:global` to make it possible to compile with its syntax and pass to css-loader.\r\nthanks for the help btw!. ",
    "o-alexandrov": "**escaping is possible using** `\\:global`\r\nnot `/:global`. **escaping is possible using** `\\:global`\r\nnot `/:global`. ",
    "jpap": "Why is that we do not have to escape when using `.scss`, and only with `.sass`?. @thomashibbard what worked for me was something like:\r\n```\r\n:global(.nestedClassParent) {\r\n   color: blue;\r\n}\r\n:global(.nestedClassChild) {\r\n   color: red;\r\n}\r\n```. Why is that we do not have to escape when using `.scss`, and only with `.sass`?. @thomashibbard what worked for me was something like:\r\n```\r\n:global(.nestedClassParent) {\r\n   color: blue;\r\n}\r\n:global(.nestedClassChild) {\r\n   color: red;\r\n}\r\n```. ",
    "thomashibbard": "@jpap Are you able to get `:global` to work with .scss? Eg:\r\n\r\n```\r\n:global {\r\n  .nestedClassParent {\r\n    color: blue;\r\n\r\n    .nestedClassChild {\r\n      color: red;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis isn't working for me with or without the `\\`. @jpap Are you able to get `:global` to work with .scss? Eg:\r\n\r\n```\r\n:global {\r\n  .nestedClassParent {\r\n    color: blue;\r\n\r\n    .nestedClassChild {\r\n      color: red;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis isn't working for me with or without the `\\`. ",
    "netmikey": "@d3viant0ne It looks like 6.0.5 didn't make it to npm yet. As builds are still failing, could you please have a look? Thanks in advance! :-). 6.0.5 is out on npm and I can confirm that it fixes my build :) Thx guys!. @d3viant0ne It looks like 6.0.5 didn't make it to npm yet. As builds are still failing, could you please have a look? Thanks in advance! :-). 6.0.5 is out on npm and I can confirm that it fixes my build :) Thx guys!. ",
    "avivshafir": "I just got version 6.0.5 installed which broke my build.\r\nThe node-sass module was upgraded from version 6.0.4 just now and i get this error:\r\n```\r\nModule build failed: ModuleBuildError: Module build failed:\r\n@import '~@widgets/widgets-ui-core/styles/style';\r\nFile to import not found or unreadable\r\n```\r\nThe widgets module is an internal scoped module.\r\nIs this something you expected? \r\nIf it's a breaking change it should been released not as a patch version probably.\r\n. Sorry guys I had a mistake the sass-loader was upgraded from 6.0.3 to 6.0.4 and not 6.0.5. @michael-ciniawsky I am just confirming that 6.0.4 breakes my build and 6.0.5 is working as expected! \r\nThanks.. I just got version 6.0.5 installed which broke my build.\r\nThe node-sass module was upgraded from version 6.0.4 just now and i get this error:\r\n```\r\nModule build failed: ModuleBuildError: Module build failed:\r\n@import '~@widgets/widgets-ui-core/styles/style';\r\nFile to import not found or unreadable\r\n```\r\nThe widgets module is an internal scoped module.\r\nIs this something you expected? \r\nIf it's a breaking change it should been released not as a patch version probably.\r\n. Sorry guys I had a mistake the sass-loader was upgraded from 6.0.3 to 6.0.4 and not 6.0.5. @michael-ciniawsky I am just confirming that 6.0.4 breakes my build and 6.0.5 is working as expected! \r\nThanks.. ",
    "DBosley": "This issue seems to affect multiple loaders. Posted the same issue on all affected loaders:\r\nhttps://github.com/webpack-contrib/css-loader/issues/529\r\nhttps://github.com/webpack-contrib/sass-loader/issues/451\r\nhttps://github.com/webpack-contrib/style-loader/issues/231\r\nhttps://github.com/postcss/postcss-loader/issues/224. This issue seems to affect multiple loaders. Posted the same issue on all affected loaders:\r\nhttps://github.com/webpack-contrib/css-loader/issues/529\r\nhttps://github.com/webpack-contrib/sass-loader/issues/451\r\nhttps://github.com/webpack-contrib/style-loader/issues/231\r\nhttps://github.com/postcss/postcss-loader/issues/224. ",
    "Maxouhell": "Could you publish 6.0.5 on npm please ?. Could you publish 6.0.5 on npm please ?. ",
    "rtrompier": "Can you please upload to the npm repository too ? \r\n\r\nThanks ;) . Can you please upload to the npm repository too ? \r\n\r\nThanks ;) . ",
    "strarsis": "Solution for eyeglass with sass-loader in recent webpack: https://github.com/sass-eyeglass/eyeglass/issues/153#issuecomment-300895607. Solution for eyeglass with sass-loader in recent webpack: https://github.com/sass-eyeglass/eyeglass/issues/153#issuecomment-300895607. ",
    "tangshuang": "@evilebottnawi As you seen, I use `@include box-shadow($shadow);` which is defined in bootstrap-sass.\r\nAre you sure your solution will work?. @evilebottnawi As you seen, I use `@include box-shadow($shadow);` which is defined in bootstrap-sass.\r\nAre you sure your solution will work?. ",
    "lukaswelinder": "@evilebottnawi I don't think this should be closed; it is an issue with `sass-loader` specifically.\r\n\r\nIt seems that `sass-loader` is not providing webpack with any `module` information (context/resourcePath/etc) when using `@import` statements. Due to this issue, any plugin that handles and/or relies on the `module` API will not work; this includes the commons-chunk plugin.\r\n\r\nThere are a lot of reasons not to use css-modules, and dividing your sass/scss into different entrypoints is a problematic when your stylesheets are defined compositionally.. @evilebottnawi I don't think this should be closed; it is an issue with `sass-loader` specifically.\r\n\r\nIt seems that `sass-loader` is not providing webpack with any `module` information (context/resourcePath/etc) when using `@import` statements. Due to this issue, any plugin that handles and/or relies on the `module` API will not work; this includes the commons-chunk plugin.\r\n\r\nThere are a lot of reasons not to use css-modules, and dividing your sass/scss into different entrypoints is a problematic when your stylesheets are defined compositionally.. ",
    "Robula": "@lukaswelinder Thank you for that clarification regarding `@import` not working with `commons-chunk-plugin`, there seems to be an ongoing issue over here that is probably related. https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/58. @lukaswelinder Thank you for that clarification regarding `@import` not working with `commons-chunk-plugin`, there seems to be an ongoing issue over here that is probably related. https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/58. ",
    "dwjft": "Just did a complete wipe of my `package.json` and upgraded everything to latest.\r\n\r\nSeems some fragment of the `create-react-app` was keeping versions in the past.\r\n\r\nIt is fixed with a fresh, latest install.\r\n\r\nThanks.. Just did a complete wipe of my `package.json` and upgraded everything to latest.\r\n\r\nSeems some fragment of the `create-react-app` was keeping versions in the past.\r\n\r\nIt is fixed with a fresh, latest install.\r\n\r\nThanks.. ",
    "Stephen2": "Thanks @michael-ciniawsky, I've been playing with kinds of combinations, but the basic one that seems sensible is:\r\n```\r\ntest: /\\.scss$/,\r\n        use: [\r\n          { loader: 'style-loader' },\r\n          { loader: 'css-loader', options: { sourceMap: true } },\r\n          { loader: 'postcss-loader', options: { sourceMap: true } },\r\n          { loader: 'sass-loader', options: { sourceMap: true } }\r\n        ]\r\n``` \r\n\r\nSo if I understand this right, this is a known issue and the fix seems to be close to accepted.  If that's not correct, let me know, and thanks again for helping.\r\n\r\n. ```\r\ntest: /\\.scss$/,\r\n        use: [\r\n          { loader: 'style-loader', options: { sourceMap: true } },\r\n          { loader: 'css-loader', options: { sourceMap: true } },\r\n          { loader: 'postcss-loader', options: { sourceMap: true } },\r\n          { loader: 'sass-loader', options: { sourceMap: true } }\r\n        ]\r\n```\r\n\r\nInstalled css-loader 0.28.2 and now I'm getting different behaviour, but I'm not sure which combination of my initial testing being at 2AM, the new change, mistakes in my testing?? etc...\r\n\r\nHere's the behaviour:\r\n* Style Loader & css loader only = paths good\r\n* Add postcss loader = paths bad\r\n* Add sass-loader = paths still bad\r\n* Remove postcss loader = paths good!\r\n\r\nSo, now I'm suggesting that it's only the presence of postcss loader that is causing this problem to still be present.\r\n\r\nDon't know if that helps or has just confused everything...\r\n. Yes, style!css!sass is doing correct paths now.\r\n![image](https://cloud.githubusercontent.com/assets/4276422/26297377/e8c65a0e-3f15-11e7-9174-cd7f0d94e189.png)\r\n\r\n\r\nBut with postcss = paths no good\r\n```\r\n        test: /\\.scss$/,\r\n        use: [\r\n          { loader: 'style-loader', options: { sourceMap: true } },\r\n          { loader: 'css-loader', options: { sourceMap: true } },\r\n          { loader: 'postcss-loader', options: { sourceMap: true } },\r\n          { loader: 'sass-loader', options: { sourceMap: true } }\r\n        ]\r\n```\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4276422/26297327/be3dd4c4-3f15-11e7-8266-5fbb202ba9a8.png)\r\n\r\n\r\nInterestingly (or maybe expected behaviour?) testing this out (note post-css sourcemap: false):\r\n```\r\n        test: /\\.scss$/,\r\n        use: [\r\n          { loader: 'style-loader', options: { sourceMap: true } },\r\n          { loader: 'css-loader', options: { sourceMap: true } },\r\n          { loader: 'postcss-loader', options: { sourceMap: false } },\r\n          { loader: 'sass-loader', options: { sourceMap: true } }\r\n        ]\r\n```\r\n\r\nYields the expected warning, AND the sourcemap paths work??  But also the autoprefixer hasn't been run:\r\n![image](https://cloud.githubusercontent.com/assets/4276422/26297435/1fe94e38-3f16-11e7-87d4-ab424c60a734.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4276422/26297452/30e2cf2a-3f16-11e7-8c31-32b9d5e1221c.png)\r\n\r\n\r\n\r\n. Thanks @michael-ciniawsky, I've been playing with kinds of combinations, but the basic one that seems sensible is:\r\n```\r\ntest: /\\.scss$/,\r\n        use: [\r\n          { loader: 'style-loader' },\r\n          { loader: 'css-loader', options: { sourceMap: true } },\r\n          { loader: 'postcss-loader', options: { sourceMap: true } },\r\n          { loader: 'sass-loader', options: { sourceMap: true } }\r\n        ]\r\n``` \r\n\r\nSo if I understand this right, this is a known issue and the fix seems to be close to accepted.  If that's not correct, let me know, and thanks again for helping.\r\n\r\n. ```\r\ntest: /\\.scss$/,\r\n        use: [\r\n          { loader: 'style-loader', options: { sourceMap: true } },\r\n          { loader: 'css-loader', options: { sourceMap: true } },\r\n          { loader: 'postcss-loader', options: { sourceMap: true } },\r\n          { loader: 'sass-loader', options: { sourceMap: true } }\r\n        ]\r\n```\r\n\r\nInstalled css-loader 0.28.2 and now I'm getting different behaviour, but I'm not sure which combination of my initial testing being at 2AM, the new change, mistakes in my testing?? etc...\r\n\r\nHere's the behaviour:\r\n* Style Loader & css loader only = paths good\r\n* Add postcss loader = paths bad\r\n* Add sass-loader = paths still bad\r\n* Remove postcss loader = paths good!\r\n\r\nSo, now I'm suggesting that it's only the presence of postcss loader that is causing this problem to still be present.\r\n\r\nDon't know if that helps or has just confused everything...\r\n. Yes, style!css!sass is doing correct paths now.\r\n![image](https://cloud.githubusercontent.com/assets/4276422/26297377/e8c65a0e-3f15-11e7-9174-cd7f0d94e189.png)\r\n\r\n\r\nBut with postcss = paths no good\r\n```\r\n        test: /\\.scss$/,\r\n        use: [\r\n          { loader: 'style-loader', options: { sourceMap: true } },\r\n          { loader: 'css-loader', options: { sourceMap: true } },\r\n          { loader: 'postcss-loader', options: { sourceMap: true } },\r\n          { loader: 'sass-loader', options: { sourceMap: true } }\r\n        ]\r\n```\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4276422/26297327/be3dd4c4-3f15-11e7-8266-5fbb202ba9a8.png)\r\n\r\n\r\nInterestingly (or maybe expected behaviour?) testing this out (note post-css sourcemap: false):\r\n```\r\n        test: /\\.scss$/,\r\n        use: [\r\n          { loader: 'style-loader', options: { sourceMap: true } },\r\n          { loader: 'css-loader', options: { sourceMap: true } },\r\n          { loader: 'postcss-loader', options: { sourceMap: false } },\r\n          { loader: 'sass-loader', options: { sourceMap: true } }\r\n        ]\r\n```\r\n\r\nYields the expected warning, AND the sourcemap paths work??  But also the autoprefixer hasn't been run:\r\n![image](https://cloud.githubusercontent.com/assets/4276422/26297435/1fe94e38-3f16-11e7-87d4-ab424c60a734.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4276422/26297452/30e2cf2a-3f16-11e7-8c31-32b9d5e1221c.png)\r\n\r\n\r\n\r\n. ",
    "markthiessen": "@michael-ciniawsky any progress on this? I'm running into the same issue. @michael-ciniawsky any progress on this? I'm running into the same issue. ",
    "katzz0": "And me too. Why do we have absolute path not relative in the source map?. This is my configuration of loaders for scss:\r\n```\r\n{\r\n    test: /\\.scss$/,\r\n    exclude: [/\\.inline\\.scss$/],\r\n    loader: [\r\n        \"style-loader\",\r\n        {\r\n            loader: \"css-loader\",\r\n            options: {\r\n                sourceMap: true,\r\n                minimize: true\r\n            }\r\n        },\r\n        {\r\n            loader: \"postcss-loader\",\r\n            options: {\r\n                sourceMap: true,\r\n                plugins: function () {\r\n                    return [\r\n                        require(\"autoprefixer\")({\r\n                            browsers: [\"last 4 versions\"]\r\n                        })\r\n                    ];\r\n                }\r\n            }\r\n        },\r\n        \"resolve-url-loader\",\r\n        {\r\n            loader: \"sass-loader\",\r\n            options: {\r\n                sourceMap: true\r\n            }\r\n        },\r\n        \"sass-bulk-import-loader\"\r\n    ]\r\n},\r\n```\r\n\r\nAnd versions:\r\n\"style-loader\": \"^0.13.1\"\r\n\"css-loader\": \"^0.28.4\",\r\n\"postcss-loader\": \"^2.0.5\",\r\n\"autoprefixer\": \"^7.1.1\",\r\n\"node-sass\": \"^4.5.2\",\r\n\"sass-loader\": \"^6.0.5\",\r\n\"resolve-url-loader\": \"^2.0.2\",\r\n\r\nAnd as result I have files routes like C:\\\\...C:\\\\...C:\\\\... which seems wrong. I'd like to have relative paths.\r\n\r\nI also tried `{ loader: 'style-loader', options: { sourceMap: true } }` but it changes nothing.. But it's specified in the documentation for sass-loader that it properly processes url in styles and needed for sass loader. I'll try without it and let know about results.. I tested without `resolve-url-loader` and there are two parts only `C:\\...C:\\...` or one when I remove `postcss-loader`.\r\n\r\nWhat can I do to force using relative routes to my source files not absolute? It specifies relative paths like `src/app/some-file.ts` for my TypeScript files but for scss files I have absolute paths and it's really inconvenient to look at file names in the Chrom dev tool.. I tried to comment lines but it doesn't change anything. I tryed to walk through the process of modification source maps and it seems that css-loader adds additional part see [here](https://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L198).. `sourceMap: false` helps for routes but I get a lot of warning from postcss inthis case.. And me too. Why do we have absolute path not relative in the source map?. This is my configuration of loaders for scss:\r\n```\r\n{\r\n    test: /\\.scss$/,\r\n    exclude: [/\\.inline\\.scss$/],\r\n    loader: [\r\n        \"style-loader\",\r\n        {\r\n            loader: \"css-loader\",\r\n            options: {\r\n                sourceMap: true,\r\n                minimize: true\r\n            }\r\n        },\r\n        {\r\n            loader: \"postcss-loader\",\r\n            options: {\r\n                sourceMap: true,\r\n                plugins: function () {\r\n                    return [\r\n                        require(\"autoprefixer\")({\r\n                            browsers: [\"last 4 versions\"]\r\n                        })\r\n                    ];\r\n                }\r\n            }\r\n        },\r\n        \"resolve-url-loader\",\r\n        {\r\n            loader: \"sass-loader\",\r\n            options: {\r\n                sourceMap: true\r\n            }\r\n        },\r\n        \"sass-bulk-import-loader\"\r\n    ]\r\n},\r\n```\r\n\r\nAnd versions:\r\n\"style-loader\": \"^0.13.1\"\r\n\"css-loader\": \"^0.28.4\",\r\n\"postcss-loader\": \"^2.0.5\",\r\n\"autoprefixer\": \"^7.1.1\",\r\n\"node-sass\": \"^4.5.2\",\r\n\"sass-loader\": \"^6.0.5\",\r\n\"resolve-url-loader\": \"^2.0.2\",\r\n\r\nAnd as result I have files routes like C:\\\\...C:\\\\...C:\\\\... which seems wrong. I'd like to have relative paths.\r\n\r\nI also tried `{ loader: 'style-loader', options: { sourceMap: true } }` but it changes nothing.. But it's specified in the documentation for sass-loader that it properly processes url in styles and needed for sass loader. I'll try without it and let know about results.. I tested without `resolve-url-loader` and there are two parts only `C:\\...C:\\...` or one when I remove `postcss-loader`.\r\n\r\nWhat can I do to force using relative routes to my source files not absolute? It specifies relative paths like `src/app/some-file.ts` for my TypeScript files but for scss files I have absolute paths and it's really inconvenient to look at file names in the Chrom dev tool.. I tried to comment lines but it doesn't change anything. I tryed to walk through the process of modification source maps and it seems that css-loader adds additional part see [here](https://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L198).. `sourceMap: false` helps for routes but I get a lot of warning from postcss inthis case.. ",
    "kucukkanat": "I solved it like this : \r\n```\r\nrules: [\r\n      {\r\n        test: /\\.scss$/,\r\n        use: [\r\n          {\r\n            options: { sourceMap: true },\r\n            loader: \"style-loader\" // creates style nodes from JS strings\r\n          },\r\n          {\r\n            options: { sourceMap: true },\r\n            loader: \"css-loader\" // translates CSS into CommonJS\r\n          },\r\n          {\r\n            loader: \"resolve-url-loader\" // translates CSS into CommonJS\r\n          },\r\n          {\r\n            options: { sourceMap: true },\r\n            loader: \"sass-loader\" // compiles Sass to CSS\r\n          }\r\n        ]\r\n      },\r\n      ...\r\n```\r\n\r\nadded `resolve-url-loader` in between now my paths are not doubled. \r\nBut I dont have any idea how it solved the issue. I solved it like this : \r\n```\r\nrules: [\r\n      {\r\n        test: /\\.scss$/,\r\n        use: [\r\n          {\r\n            options: { sourceMap: true },\r\n            loader: \"style-loader\" // creates style nodes from JS strings\r\n          },\r\n          {\r\n            options: { sourceMap: true },\r\n            loader: \"css-loader\" // translates CSS into CommonJS\r\n          },\r\n          {\r\n            loader: \"resolve-url-loader\" // translates CSS into CommonJS\r\n          },\r\n          {\r\n            options: { sourceMap: true },\r\n            loader: \"sass-loader\" // compiles Sass to CSS\r\n          }\r\n        ]\r\n      },\r\n      ...\r\n```\r\n\r\nadded `resolve-url-loader` in between now my paths are not doubled. \r\nBut I dont have any idea how it solved the issue. ",
    "idangozlan": "Tried, still getting that.\nWhen i'm not using sass-loader it's not triggering that warning..\n\nOn Tue, May 23, 2017 at 1:16 PM, Evilebot Tnawi <notifications@github.com>\nwrote:\n\n> @idangozlan <https://github.com/idangozlan> seems your use old version\n> sass-loader, try to use rm -r node_modules, then npm cache clear (yarn\n> cache clean) and npm i (yarn install)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/webpack-contrib/sass-loader/issues/461#issuecomment-303354973>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AB5hbd7hM7HjgQXMN6GaRZWiSng80znWks5r8rHsgaJpZM4NjeGR>\n> .\n>\n\n\n\n-- \nBest Regards,\n  Idan Gozlan, +972542251188.\n\nP *Please consider the environment before printing this email.*\n. Tried, still getting that.\nWhen i'm not using sass-loader it's not triggering that warning..\n\nOn Tue, May 23, 2017 at 1:16 PM, Evilebot Tnawi <notifications@github.com>\nwrote:\n\n> @idangozlan <https://github.com/idangozlan> seems your use old version\n> sass-loader, try to use rm -r node_modules, then npm cache clear (yarn\n> cache clean) and npm i (yarn install)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/webpack-contrib/sass-loader/issues/461#issuecomment-303354973>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AB5hbd7hM7HjgQXMN6GaRZWiSng80znWks5r8rHsgaJpZM4NjeGR>\n> .\n>\n\n\n\n-- \nBest Regards,\n  Idan Gozlan, +972542251188.\n\nP *Please consider the environment before printing this email.*\n. ",
    "shafaqkazmi": "hey @michael-ciniawsky , can u please elaborate it more? I'm already using ExtractTextPlugin\r\n\r\n```\r\n{\r\n        test: /\\.scss$/,\r\n        exclude: helpers.root('src', 'app'),\r\n        loader: ExtractTextPlugin.extract({ \r\n             fallbackLoader: 'style-loader', \r\n             loader: 'css-loader!sass-loader?sourceMap' \r\n       })\r\n }\r\n```\r\n\r\nalso, I cant see config.output. Configuration files are uploaded on Github gist https://gist.github.com/shafaqkazmi/abbf5b07a70e6d23463d2de7d42f2a53. hey @michael-ciniawsky : there is no error in console but the only issue is I need the compiled CSS file. like my JS files are output in specific location\r\n\r\n```\r\nentry: {\r\n    'polyfills': './src/polyfills.ts',\r\n    'vendor': './src/vendor.ts',\r\n    'app': './src/main.ts'\r\n  }\r\n\r\nplugins: [\r\nnew webpack.optimize.CommonsChunkPlugin({\r\n      name: ['app', 'vendor', 'polyfills']\r\n    })\r\n]\r\n```. hey @michael-ciniawsky , can u please elaborate it more? I'm already using ExtractTextPlugin\r\n\r\n```\r\n{\r\n        test: /\\.scss$/,\r\n        exclude: helpers.root('src', 'app'),\r\n        loader: ExtractTextPlugin.extract({ \r\n             fallbackLoader: 'style-loader', \r\n             loader: 'css-loader!sass-loader?sourceMap' \r\n       })\r\n }\r\n```\r\n\r\nalso, I cant see config.output. Configuration files are uploaded on Github gist https://gist.github.com/shafaqkazmi/abbf5b07a70e6d23463d2de7d42f2a53. hey @michael-ciniawsky : there is no error in console but the only issue is I need the compiled CSS file. like my JS files are output in specific location\r\n\r\n```\r\nentry: {\r\n    'polyfills': './src/polyfills.ts',\r\n    'vendor': './src/vendor.ts',\r\n    'app': './src/main.ts'\r\n  }\r\n\r\nplugins: [\r\nnew webpack.optimize.CommonsChunkPlugin({\r\n      name: ['app', 'vendor', 'polyfills']\r\n    })\r\n]\r\n```. ",
    "gizm0bill": "@evilebottnawi aliases in webpack can be setup in various ways, and should resolve deep from the aliased path: https://webpack.github.io/docs/configuration.html#resolve-alias\r\nNow the `browser` field from `package.json` is not part of the official docs and specs, I only found this link: https://github.com/defunctzombie/package-browser-field-spec about it... is this what are you talking about?. Might be, need to check... @evilebottnawi aliases in webpack can be setup in various ways, and should resolve deep from the aliased path: https://webpack.github.io/docs/configuration.html#resolve-alias\r\nNow the `browser` field from `package.json` is not part of the official docs and specs, I only found this link: https://github.com/defunctzombie/package-browser-field-spec about it... is this what are you talking about?. Might be, need to check... ",
    "solidevolution": "We got this problem with a vue / postcss stack.\r\nWe wanted to define global custom properties and use them via the webpack alias in our vue components.\r\n\r\n@import \"css/vars.css\" (css alias) doesnt work\r\n@import \"realpath../../src/assets/css/vars.css\" works. @evilebottnawi we don't use sass/scss and experimental versions ;)\r\nDo you have an import solution for postcss?. We got this problem with a vue / postcss stack.\r\nWe wanted to define global custom properties and use them via the webpack alias in our vue components.\r\n\r\n@import \"css/vars.css\" (css alias) doesnt work\r\n@import \"realpath../../src/assets/css/vars.css\" works. @evilebottnawi we don't use sass/scss and experimental versions ;)\r\nDo you have an import solution for postcss?. ",
    "luckylooke": "You can try [this fix](https://github.com/ionic-team/ionic-app-scripts/pull/683#issuecomment-294078919). It makes my aliases work again. Maybe it will help to you too.. You can try [this fix](https://github.com/ionic-team/ionic-app-scripts/pull/683#issuecomment-294078919). It makes my aliases work again. Maybe it will help to you too.. ",
    "Guobacai": "@evilebottnawi I tried a few ways to print out the stack trace, but failed.\r\nThe webpack doesn't show any stack trace of error. I just show the above error and hang there (It doesn't even exist.)\r\n\r\nI found the same issue reported here: https://github.com/shama/webpack-stream/issues/135\r\n\r\nIf I missed anyway to show the stack trace of error, please advise me.\r\n\r\nThanks @evilebottnawi for your time.\r\n. @evilebottnawi I tried a few ways to print out the stack trace, but failed.\r\nThe webpack doesn't show any stack trace of error. I just show the above error and hang there (It doesn't even exist.)\r\n\r\nI found the same issue reported here: https://github.com/shama/webpack-stream/issues/135\r\n\r\nIf I missed anyway to show the stack trace of error, please advise me.\r\n\r\nThanks @evilebottnawi for your time.\r\n. ",
    "Yizhachok": "Have the same issue. Have the same issue. ",
    "marekpw": "@evilebottnawi sure, here you go: https://github.com/marekpw/sass-loader-mdc/\r\n\r\nAs expected, prefixing the first import with tilde in ```@material/button/mdc-button.scss``` works, but it breaks on the next import.. Cool, that works. Thanks a lot.. @borela as a workaround, it's still better than nothing for now :). @evilebottnawi sure, here you go: https://github.com/marekpw/sass-loader-mdc/\r\n\r\nAs expected, prefixing the first import with tilde in ```@material/button/mdc-button.scss``` works, but it breaks on the next import.. Cool, that works. Thanks a lot.. @borela as a workaround, it's still better than nothing for now :). ",
    "ddobson": "I'm also experiencing this issue. I am trying to use `primer-tooltips` from the [Primer CSS](https://github.com/primer/primer-css) library. The index.scss file in that directory requires another file in a separate `primer-support` directory. When trying to build I get this error:\r\n\r\n```\r\nFile to import not found or unreadable: primer-support/index.scss.\r\nParent style sheet: /Users/dale/Code/junk-drawer/node_modules/primer-tooltips/index.scss\r\n```\r\n\r\nIf I change the `@import` statement in the file I'm trying to import in my project to `@import \"~primer-support/index.scss\";` from `@import \"primer-support/index.scss\";`, it works.\r\n\r\nHere is my webpack sass-loader config:\r\n\r\n```\r\n      {\r\n        test: /\\.scss$/,\r\n        use: [\r\n          {\r\n            loader: 'style-loader', // creates style nodes from JS strings\r\n          },\r\n          {\r\n            loader: 'css-loader', // translates CSS into CommonJS\r\n          },\r\n          {\r\n            loader: 'sass-loader', // compiles Sass to CSS\r\n          },\r\n        ],\r\n        include: [paths.appSrc, paths.appNodeModules],\r\n      },\r\n```\r\n\r\nAdditionally, I know I can import styles without other dependancies from `node_modules` because the import of Bulma CSS I'm using in my project is fine.. I'm also experiencing this issue. I am trying to use `primer-tooltips` from the [Primer CSS](https://github.com/primer/primer-css) library. The index.scss file in that directory requires another file in a separate `primer-support` directory. When trying to build I get this error:\r\n\r\n```\r\nFile to import not found or unreadable: primer-support/index.scss.\r\nParent style sheet: /Users/dale/Code/junk-drawer/node_modules/primer-tooltips/index.scss\r\n```\r\n\r\nIf I change the `@import` statement in the file I'm trying to import in my project to `@import \"~primer-support/index.scss\";` from `@import \"primer-support/index.scss\";`, it works.\r\n\r\nHere is my webpack sass-loader config:\r\n\r\n```\r\n      {\r\n        test: /\\.scss$/,\r\n        use: [\r\n          {\r\n            loader: 'style-loader', // creates style nodes from JS strings\r\n          },\r\n          {\r\n            loader: 'css-loader', // translates CSS into CommonJS\r\n          },\r\n          {\r\n            loader: 'sass-loader', // compiles Sass to CSS\r\n          },\r\n        ],\r\n        include: [paths.appSrc, paths.appNodeModules],\r\n      },\r\n```\r\n\r\nAdditionally, I know I can import styles without other dependancies from `node_modules` because the import of Bulma CSS I'm using in my project is fine.. ",
    "mischkl": "Same problem here, I opened an issue with material components but looks like the issue is actually here.\r\n\r\nmaterial-components/material-components-web/issues/981. @evilebottnawi @jhnns So basically anyone who wants to use the material components with webpack needs to build in this hack? Seems kind of like a poor solution.\r\n\r\nWhat we really need IMHO is for sass-loader to process imports that occur within third-party modules differently than those that occur in the webpack project itself. For reference, everything that [https://github.com/sass-eyeglass/eyeglass](Eyeglass) supports should ideally be able to be resolved by sass-loader, for the purpose of long-term interoperability of the third-party scss module ecosystem.. @evilebottnawi well, my idea is stated right there: process `@imports` in third-party packages differently (could be as simple as pre-processing them to include a `~`). Of course the implementation is another thing, but I imagine that it should be somehow feasible.. > If I'm not mistaken node-sass don't work with scoped packages by default.\r\n\r\n@evilebottnawi you seem to be correct as judging by this issue: https://github.com/sass/node-sass/issues/1596\r\n\r\nAs stated there the solution is to \"use eyeglass\". Which appears to be something like webpack, just limited to SCSS support... In any case it seems eyeglass does support importing scoped packages without a `~` prefix, which is the reason I suggested we use it as a reference.\r\n\r\nThe odd thing is that `material-components` themselves provide a demo that uses webpack.  https://github.com/material-components/material-components-web/blob/master/webpack.config.js\r\nApparently they work around the issue by setting `includePaths` as follows:\r\n`includePaths: glob.sync('packages/*/node_modules').map((d) => path.join(__dirname, d))`. @evilebottnawi @jhnns As I mentioned in #466 this means webpack is essentially incompatible with a large segment of third-party scss modules on NPM, including [material components](http://github.com/material-components/material-components-web) from Google. For anyone who wants to use such packages to need to build in this kind of hack seems like a poor solution. Especially considering that users of e.g. `@angular/cli` have no such ability to configure their build in this way.\r\n\r\nWhat we really need IMHO is for sass-loader to process imports that occur within third-party modules differently than those that occur in the webpack project itself. For reference, everything that [https://github.com/sass-eyeglass/eyeglass](Eyeglass) supports should ideally be able to be resolved by sass-loader, for the purpose of long-term interoperability of the third-party scss module ecosystem.. Same problem here, I opened an issue with material components but looks like the issue is actually here.\r\n\r\nmaterial-components/material-components-web/issues/981. @evilebottnawi @jhnns So basically anyone who wants to use the material components with webpack needs to build in this hack? Seems kind of like a poor solution.\r\n\r\nWhat we really need IMHO is for sass-loader to process imports that occur within third-party modules differently than those that occur in the webpack project itself. For reference, everything that [https://github.com/sass-eyeglass/eyeglass](Eyeglass) supports should ideally be able to be resolved by sass-loader, for the purpose of long-term interoperability of the third-party scss module ecosystem.. @evilebottnawi well, my idea is stated right there: process `@imports` in third-party packages differently (could be as simple as pre-processing them to include a `~`). Of course the implementation is another thing, but I imagine that it should be somehow feasible.. > If I'm not mistaken node-sass don't work with scoped packages by default.\r\n\r\n@evilebottnawi you seem to be correct as judging by this issue: https://github.com/sass/node-sass/issues/1596\r\n\r\nAs stated there the solution is to \"use eyeglass\". Which appears to be something like webpack, just limited to SCSS support... In any case it seems eyeglass does support importing scoped packages without a `~` prefix, which is the reason I suggested we use it as a reference.\r\n\r\nThe odd thing is that `material-components` themselves provide a demo that uses webpack.  https://github.com/material-components/material-components-web/blob/master/webpack.config.js\r\nApparently they work around the issue by setting `includePaths` as follows:\r\n`includePaths: glob.sync('packages/*/node_modules').map((d) => path.join(__dirname, d))`. @evilebottnawi @jhnns As I mentioned in #466 this means webpack is essentially incompatible with a large segment of third-party scss modules on NPM, including [material components](http://github.com/material-components/material-components-web) from Google. For anyone who wants to use such packages to need to build in this kind of hack seems like a poor solution. Especially considering that users of e.g. `@angular/cli` have no such ability to configure their build in this way.\r\n\r\nWhat we really need IMHO is for sass-loader to process imports that occur within third-party modules differently than those that occur in the webpack project itself. For reference, everything that [https://github.com/sass-eyeglass/eyeglass](Eyeglass) supports should ideally be able to be resolved by sass-loader, for the purpose of long-term interoperability of the third-party scss module ecosystem.. ",
    "adityavohra7": "Say I have a project that deps two packages: `package-A` & `package-B`:\r\n```\r\n{\r\n  \"name\": \"nested-styles\",\r\n  \"version\": \"1.0.0\",\r\n  \"dependencies: {\r\n    \"package-A\": \"1.0.0\",\r\n    \"package-B\": \"1.0.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"css-loader\": \"^0.28.5\",\r\n    \"node-sass\": \"^4.5.3\",\r\n    \"sass-loader\": \"^6.0.6\",\r\n    \"style-loader\": \"^0.18.2\",\r\n    \"webpack\": \"^3.5.5\"\r\n  }\r\n}\r\n\r\n```\r\nAnd say `package-A@1.0.0` deps `package-B@2.0.0`. This will create the following install structure:\r\n```\r\n$ tree node_modules\r\n...\r\n\u251c\u2500\u2500 package-A (@1.0.0)\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 node_modules\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 package-B (@2.0.0)\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 sass\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 index.scss\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sass\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.scss\r\n\u251c\u2500\u2500 package-B (@1.0.0)\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sass\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.scss\r\n...\r\n```\r\n`nested-styles` has an `index.scss` that imports styles from `package-A`:\r\n```scss\r\n// nested-styles/index.scss\r\n@import \"package-A/sass/index.scss\";\r\n\r\nbody {\r\n    background: $background;\r\n}\r\n```\r\nwhere `package-A/sass/index.scss` is:\r\n```scss\r\n// node_modules/package-A/sass/index.scss\r\n@import \"package-B/sass/index.scss\";\r\n```\r\nThe following is my `webpack.config.js`:\r\n```js\r\nmodule.exports = {\r\n  entry: './index.js', // imports nested-styles/index.scss\r\n  output: {\r\n    filename: 'output.js',\r\n  },\r\n  module: {\r\n    rules: [{\r\n      test: /\\.scss$/,\r\n      use: ['style-loader', 'css-loader', {\r\n        loader: 'sass-loader',\r\n        options: {\r\n          includePaths: ['node_modules'],\r\n        },\r\n      }],\r\n    }],\r\n  },\r\n};\r\n```\r\nI'd like to get `node-modules/package-A/sass/index.js` to import styles from `node_modules/package-A/node_modules/package-B/sass/index.scss` (like how JS module resolution works). Is this something that's possible? With the current `webpack.config.js`, styles are imported from `node_modules/package-B/sass/index.scss`. Version conflicts, and therefore nested package structures, are pretty common IMO in node land, so I'd expect this to be solved problem, but I can't seem to figure out how \ud83d\ude22. @frederikprijck, I've [created a repo](https://github.com/adityavohra7/nested-styles) to repro the behavior I'm seeing. I also tried compiling my sass directly with `node-sass`. With the following files:\r\n```scss\r\n// index.scss\r\n@import \"package-A/scss/index.scss\";\r\n\r\nbody {\r\n    background: $background;\r\n}\r\n```\r\n```scss\r\n// node_modules/package-A/scss/index.scss\r\n@import \"package-B/scss/index.scss\";\r\n```\r\n```scss\r\n// node_modules/package-B/scss/index.scss\r\n$background: blue;\r\n```\r\n```scss\r\n// node_modules/package-A/node_modules/package-B/scss/index.scss\r\n$background: pink;\r\n```\r\nCalling `node-sass` yields:\r\n```\r\n~/nested-styles avohra$ ./node_modules/.bin/node-sass index.scss --include-path node_modules\r\nbody {\r\n  background: blue; }\r\n```\r\nI'd like for that ^ to be \"pink\" (`package-A` deps a different version of `package-B` than `nested-styles`).. Say I have a project that deps two packages: `package-A` & `package-B`:\r\n```\r\n{\r\n  \"name\": \"nested-styles\",\r\n  \"version\": \"1.0.0\",\r\n  \"dependencies: {\r\n    \"package-A\": \"1.0.0\",\r\n    \"package-B\": \"1.0.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"css-loader\": \"^0.28.5\",\r\n    \"node-sass\": \"^4.5.3\",\r\n    \"sass-loader\": \"^6.0.6\",\r\n    \"style-loader\": \"^0.18.2\",\r\n    \"webpack\": \"^3.5.5\"\r\n  }\r\n}\r\n\r\n```\r\nAnd say `package-A@1.0.0` deps `package-B@2.0.0`. This will create the following install structure:\r\n```\r\n$ tree node_modules\r\n...\r\n\u251c\u2500\u2500 package-A (@1.0.0)\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 node_modules\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 package-B (@2.0.0)\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 sass\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 index.scss\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sass\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.scss\r\n\u251c\u2500\u2500 package-B (@1.0.0)\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sass\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 index.scss\r\n...\r\n```\r\n`nested-styles` has an `index.scss` that imports styles from `package-A`:\r\n```scss\r\n// nested-styles/index.scss\r\n@import \"package-A/sass/index.scss\";\r\n\r\nbody {\r\n    background: $background;\r\n}\r\n```\r\nwhere `package-A/sass/index.scss` is:\r\n```scss\r\n// node_modules/package-A/sass/index.scss\r\n@import \"package-B/sass/index.scss\";\r\n```\r\nThe following is my `webpack.config.js`:\r\n```js\r\nmodule.exports = {\r\n  entry: './index.js', // imports nested-styles/index.scss\r\n  output: {\r\n    filename: 'output.js',\r\n  },\r\n  module: {\r\n    rules: [{\r\n      test: /\\.scss$/,\r\n      use: ['style-loader', 'css-loader', {\r\n        loader: 'sass-loader',\r\n        options: {\r\n          includePaths: ['node_modules'],\r\n        },\r\n      }],\r\n    }],\r\n  },\r\n};\r\n```\r\nI'd like to get `node-modules/package-A/sass/index.js` to import styles from `node_modules/package-A/node_modules/package-B/sass/index.scss` (like how JS module resolution works). Is this something that's possible? With the current `webpack.config.js`, styles are imported from `node_modules/package-B/sass/index.scss`. Version conflicts, and therefore nested package structures, are pretty common IMO in node land, so I'd expect this to be solved problem, but I can't seem to figure out how \ud83d\ude22. @frederikprijck, I've [created a repo](https://github.com/adityavohra7/nested-styles) to repro the behavior I'm seeing. I also tried compiling my sass directly with `node-sass`. With the following files:\r\n```scss\r\n// index.scss\r\n@import \"package-A/scss/index.scss\";\r\n\r\nbody {\r\n    background: $background;\r\n}\r\n```\r\n```scss\r\n// node_modules/package-A/scss/index.scss\r\n@import \"package-B/scss/index.scss\";\r\n```\r\n```scss\r\n// node_modules/package-B/scss/index.scss\r\n$background: blue;\r\n```\r\n```scss\r\n// node_modules/package-A/node_modules/package-B/scss/index.scss\r\n$background: pink;\r\n```\r\nCalling `node-sass` yields:\r\n```\r\n~/nested-styles avohra$ ./node_modules/.bin/node-sass index.scss --include-path node_modules\r\nbody {\r\n  background: blue; }\r\n```\r\nI'd like for that ^ to be \"pink\" (`package-A` deps a different version of `package-B` than `nested-styles`).. ",
    "frederikprijck": "@adityavohra7 This sound like how node-sass works, any chance you can try to reproduce the exact behavior without using webpack, but by compiling ur sass using `node-sass` ?\r\n\r\nYou probably need something like:\r\n\r\n```\r\nnode-sass --include-path scss scss/main.scss   public/css/main.css\r\n```\r\n\r\nMore info on how to use `node-sass`: https://medium.com/@brianhan/watch-compile-your-sass-with-npm-9ba2b878415b. @adityavohra7 So this looks like it's how node-sass is handling `scss` compilation, which isn't something `sass-loader` should deviate from.\r\n\r\nProbably a good idea to open an issue on node-sass to get more information from them.. @adityavohra7 This sound like how node-sass works, any chance you can try to reproduce the exact behavior without using webpack, but by compiling ur sass using `node-sass` ?\r\n\r\nYou probably need something like:\r\n\r\n```\r\nnode-sass --include-path scss scss/main.scss   public/css/main.css\r\n```\r\n\r\nMore info on how to use `node-sass`: https://medium.com/@brianhan/watch-compile-your-sass-with-npm-9ba2b878415b. @adityavohra7 So this looks like it's how node-sass is handling `scss` compilation, which isn't something `sass-loader` should deviate from.\r\n\r\nProbably a good idea to open an issue on node-sass to get more information from them.. ",
    "robertmain": "I'm having an issue that I think is related where I try to `@import 'material-design-colors/material-colors' [this package](https://github.com/mrmlnc/material-color/blob/master/material-color.scss) and I get the following error from webpack:\r\n\r\n\r\n    ERROR in ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./frontend/src/styles/main.scss\r\n    Module build failed:\r\n    @import 'material-design-colors/material-colors';\r\n    ^\r\n            File to import not found or unreadable: material-design-colors/material-colors.\r\n    Parent style sheet: <MY_PROJECT_DIR>/frontend/src/styles/utils/variables/_color_scheme.scss\r\n            in <MY_PROJECT_DIR>\\frontend\\src\\styles\\utils\\variables\\_color_scheme.scss (line 1, column 1)\r\n     @ ./frontend/src/styles/main.scss 4:14-128\r\n     @ ./frontend/src/main.ts\r\n\r\n\r\nIs this a related issue, or something else? I'm trying to `@import` the vendor style in my own sass sheets - rather than in `vendor.ts`. I'm having an issue that I think is related where I try to `@import 'material-design-colors/material-colors' [this package](https://github.com/mrmlnc/material-color/blob/master/material-color.scss) and I get the following error from webpack:\r\n\r\n\r\n    ERROR in ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./frontend/src/styles/main.scss\r\n    Module build failed:\r\n    @import 'material-design-colors/material-colors';\r\n    ^\r\n            File to import not found or unreadable: material-design-colors/material-colors.\r\n    Parent style sheet: <MY_PROJECT_DIR>/frontend/src/styles/utils/variables/_color_scheme.scss\r\n            in <MY_PROJECT_DIR>\\frontend\\src\\styles\\utils\\variables\\_color_scheme.scss (line 1, column 1)\r\n     @ ./frontend/src/styles/main.scss 4:14-128\r\n     @ ./frontend/src/main.ts\r\n\r\n\r\nIs this a related issue, or something else? I'm trying to `@import` the vendor style in my own sass sheets - rather than in `vendor.ts`. ",
    "heikkimu": "Source:\r\nhttps://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1\r\n\r\n![image](https://cloud.githubusercontent.com/assets/7942632/26677277/e1655a1a-46d3-11e7-84fd-0043a5f9abdd.png)\r\n\r\nSo, how we should proceed with this?\r\n. Source:\r\nhttps://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1\r\n\r\n![image](https://cloud.githubusercontent.com/assets/7942632/26677277/e1655a1a-46d3-11e7-84fd-0043a5f9abdd.png)\r\n\r\nSo, how we should proceed with this?\r\n. ",
    "FarhadG": "I guess int he new `create-react-app`, the `url-loader` was updated and you need to also exclude `.scss` files there:\r\n\r\n```js\r\n\r\n        exclude: [\r\n          /\\.html$/,\r\n          // We have to write /\\.(js|jsx)(\\?.*)?$/ rather than just /\\.(js|jsx)$/\r\n          // because you might change the hot reloading server from the custom one\r\n          // to Webpack's built-in webpack-dev-server/client?/, which would not\r\n          // get properly excluded by /\\.(js|jsx)$/ because of the query string.\r\n          // Webpack 2 fixes this, but for now we include this hack.\r\n          // https://github.com/facebookincubator/create-react-app/issues/1713\r\n          /\\.(js|jsx)(\\?.*)?$/,\r\n          /\\.(css|scss)$/,\r\n          /\\.json$/,\r\n          /\\.svg$/\r\n        ],\r\n        loader: 'url',\r\n        query: {\r\n          limit: 10000,\r\n          name: 'static/media/[name].[hash:8].[ext]'\r\n        }\r\n      },\r\n```. I guess int he new `create-react-app`, the `url-loader` was updated and you need to also exclude `.scss` files there:\r\n\r\n```js\r\n\r\n        exclude: [\r\n          /\\.html$/,\r\n          // We have to write /\\.(js|jsx)(\\?.*)?$/ rather than just /\\.(js|jsx)$/\r\n          // because you might change the hot reloading server from the custom one\r\n          // to Webpack's built-in webpack-dev-server/client?/, which would not\r\n          // get properly excluded by /\\.(js|jsx)$/ because of the query string.\r\n          // Webpack 2 fixes this, but for now we include this hack.\r\n          // https://github.com/facebookincubator/create-react-app/issues/1713\r\n          /\\.(js|jsx)(\\?.*)?$/,\r\n          /\\.(css|scss)$/,\r\n          /\\.json$/,\r\n          /\\.svg$/\r\n        ],\r\n        loader: 'url',\r\n        query: {\r\n          limit: 10000,\r\n          name: 'static/media/[name].[hash:8].[ext]'\r\n        }\r\n      },\r\n```. ",
    "silverbackdan": "Additionally, I've just looked in sass-loader and can confirm that the scss is being compiled to a css string, the string is being returned to the async callback, but I'm not sure where that is to continue trying to figuring it out any further.. @evilebottnawi I'm sorry for taking your time. I've created a stripped back config instead of using a Laravel install. The config works and creates a file. There is an issue that files are not watched still but I can raise an issue on the main webpack repo for that as they don't appear to be linked. (Although I'm just struggling through with this at the moment trying to work it out).. @evilebottnawi thank you, it appears it's related to this bug with webpack watch commands: https://github.com/webpack/webpack/issues/4250 but I've left this closed as I'm not sure if the root cause of the problem will be in the main webpack code or this loader.. Additionally, I've just looked in sass-loader and can confirm that the scss is being compiled to a css string, the string is being returned to the async callback, but I'm not sure where that is to continue trying to figuring it out any further.. @evilebottnawi I'm sorry for taking your time. I've created a stripped back config instead of using a Laravel install. The config works and creates a file. There is an issue that files are not watched still but I can raise an issue on the main webpack repo for that as they don't appear to be linked. (Although I'm just struggling through with this at the moment trying to work it out).. @evilebottnawi thank you, it appears it's related to this bug with webpack watch commands: https://github.com/webpack/webpack/issues/4250 but I've left this closed as I'm not sure if the root cause of the problem will be in the main webpack code or this loader.. ",
    "SirCameron": "Ok, so the resolve-url-loader that is grabbing and resolving the url specified in the css.\r\nSo not sass-loader's baby at all.\r\n\r\nThe problem is that it is retrieving the resource, but bundling it into the incorrect directory and so the final css can't find the file..  :/. @evilebottnawi I am.. Problem is that it's resolving the final url incorrectly.\r\nI'll create an issue there.\r\n\r\nThanks for your help \ud83d\udc4d . Yup, totally closable. Apologies for my confusion.. @evilebottnawi This was just meant as a small help for those using Atom and getting the expected rule error.. @evilebottnawi Dude, I know it's not related, but the error is a combination of the two. So I'd like to help others not pull their hair out.\r\n\r\nDon't worry. Forget it.\r\nPlease delete this.. Ok, so the resolve-url-loader that is grabbing and resolving the url specified in the css.\r\nSo not sass-loader's baby at all.\r\n\r\nThe problem is that it is retrieving the resource, but bundling it into the incorrect directory and so the final css can't find the file..  :/. @evilebottnawi I am.. Problem is that it's resolving the final url incorrectly.\r\nI'll create an issue there.\r\n\r\nThanks for your help \ud83d\udc4d . Yup, totally closable. Apologies for my confusion.. @evilebottnawi This was just meant as a small help for those using Atom and getting the expected rule error.. @evilebottnawi Dude, I know it's not related, but the error is a combination of the two. So I'd like to help others not pull their hair out.\r\n\r\nDon't worry. Forget it.\r\nPlease delete this.. ",
    "codecov[bot]": "# [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=h1) Report\n> :exclamation: No coverage uploaded for pull request base (`master@0d6d66d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475/graphs/tree.svg?width=650&src=pr&token=SlncKXUFac&height=150)](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##             master     #475   +/-   ##\n=========================================\n  Coverage          ?   97.43%           \n=========================================\n  Files             ?        6           \n  Lines             ?      117           \n  Branches          ?        0           \n=========================================\n  Hits              ?      114           \n  Misses            ?        3           \n  Partials          ?        0\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=footer). Last update [0d6d66d...a3dea51](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n. # [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=h1) Report\n> Merging [#479](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=desc) into [master](https://codecov.io/gh/webpack-contrib/sass-loader/commit/6439cef04b342be6787e6fe3182655af3abff877?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479/graphs/tree.svg?token=SlncKXUFac&src=pr&width=650&height=150)](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master     #479   +/-   ##\n=======================================\n  Coverage   97.58%   97.58%           \n=======================================\n  Files           6        6           \n  Lines         124      124           \n=======================================\n  Hits          121      121           \n  Misses          3        3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [lib/webpackImporter.js](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479/diff?src=pr&el=tree#diff-bGliL3dlYnBhY2tJbXBvcnRlci5qcw==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n| [lib/importsToResolve.js](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479/diff?src=pr&el=tree#diff-bGliL2ltcG9ydHNUb1Jlc29sdmUuanM=) | `100% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=footer). Last update [6439cef...44f1d8c](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n. # [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=h1) Report\n> Merging [#512](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=desc) into [master](https://codecov.io/gh/webpack-contrib/sass-loader/commit/9e40b782f58b75ab7f2edaaead3fb0d10152632a?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512/graphs/tree.svg?width=650&height=150&src=pr&token=SlncKXUFac)](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master     #512   +/-   ##\n=======================================\n  Coverage   97.43%   97.43%           \n=======================================\n  Files           6        6           \n  Lines         117      117           \n=======================================\n  Hits          114      114           \n  Misses          3        3\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=footer). Last update [9e40b78...084c7e0](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n. # [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=h1) Report\n> Merging [#513](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=desc) into [master](https://codecov.io/gh/webpack-contrib/sass-loader/commit/88b56d51e84445e5901d2b74f95f71851364391d?src=pr&el=desc) will **increase** coverage by `0.02%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513/graphs/tree.svg?width=650&token=SlncKXUFac&height=150&src=pr)](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master     #513      +/-   ##\n==========================================\n+ Coverage   97.43%   97.45%   +0.02%     \n==========================================\n  Files           6        6              \n  Lines         117      118       +1     \n==========================================\n+ Hits          114      115       +1     \n  Misses          3        3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [lib/proxyCustomImporters.js](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513/diff?src=pr&el=tree#diff-bGliL3Byb3h5Q3VzdG9tSW1wb3J0ZXJzLmpz) | `100% <100%> (\u00f8)` | :arrow_up: |\n| [lib/normalizeOptions.js](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513/diff?src=pr&el=tree#diff-bGliL25vcm1hbGl6ZU9wdGlvbnMuanM=) | `96.42% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=footer). Last update [88b56d5...435ebfd](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n. # [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=h1) Report\n> :exclamation: No coverage uploaded for pull request base (`master@0d6d66d`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475/graphs/tree.svg?width=650&src=pr&token=SlncKXUFac&height=150)](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##             master     #475   +/-   ##\n=========================================\n  Coverage          ?   97.43%           \n=========================================\n  Files             ?        6           \n  Lines             ?      117           \n  Branches          ?        0           \n=========================================\n  Hits              ?      114           \n  Misses            ?        3           \n  Partials          ?        0\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=footer). Last update [0d6d66d...a3dea51](https://codecov.io/gh/webpack-contrib/sass-loader/pull/475?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n. # [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=h1) Report\n> Merging [#479](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=desc) into [master](https://codecov.io/gh/webpack-contrib/sass-loader/commit/6439cef04b342be6787e6fe3182655af3abff877?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479/graphs/tree.svg?token=SlncKXUFac&src=pr&width=650&height=150)](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master     #479   +/-   ##\n=======================================\n  Coverage   97.58%   97.58%           \n=======================================\n  Files           6        6           \n  Lines         124      124           \n=======================================\n  Hits          121      121           \n  Misses          3        3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [lib/webpackImporter.js](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479/diff?src=pr&el=tree#diff-bGliL3dlYnBhY2tJbXBvcnRlci5qcw==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n| [lib/importsToResolve.js](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479/diff?src=pr&el=tree#diff-bGliL2ltcG9ydHNUb1Jlc29sdmUuanM=) | `100% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=footer). Last update [6439cef...44f1d8c](https://codecov.io/gh/webpack-contrib/sass-loader/pull/479?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n. # [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=h1) Report\n> Merging [#512](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=desc) into [master](https://codecov.io/gh/webpack-contrib/sass-loader/commit/9e40b782f58b75ab7f2edaaead3fb0d10152632a?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512/graphs/tree.svg?width=650&height=150&src=pr&token=SlncKXUFac)](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master     #512   +/-   ##\n=======================================\n  Coverage   97.43%   97.43%           \n=======================================\n  Files           6        6           \n  Lines         117      117           \n=======================================\n  Hits          114      114           \n  Misses          3        3\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=footer). Last update [9e40b78...084c7e0](https://codecov.io/gh/webpack-contrib/sass-loader/pull/512?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n. # [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=h1) Report\n> Merging [#513](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=desc) into [master](https://codecov.io/gh/webpack-contrib/sass-loader/commit/88b56d51e84445e5901d2b74f95f71851364391d?src=pr&el=desc) will **increase** coverage by `0.02%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513/graphs/tree.svg?width=650&token=SlncKXUFac&height=150&src=pr)](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master     #513      +/-   ##\n==========================================\n+ Coverage   97.43%   97.45%   +0.02%     \n==========================================\n  Files           6        6              \n  Lines         117      118       +1     \n==========================================\n+ Hits          114      115       +1     \n  Misses          3        3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [lib/proxyCustomImporters.js](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513/diff?src=pr&el=tree#diff-bGliL3Byb3h5Q3VzdG9tSW1wb3J0ZXJzLmpz) | `100% <100%> (\u00f8)` | :arrow_up: |\n| [lib/normalizeOptions.js](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513/diff?src=pr&el=tree#diff-bGliL25vcm1hbGl6ZU9wdGlvbnMuanM=) | `96.42% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=footer). Last update [88b56d5...435ebfd](https://codecov.io/gh/webpack-contrib/sass-loader/pull/513?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n. ",
    "yogeshgadge": "Figured out - I was using `fontawesome` as dependency instead of `font-awesome`. After inspecting node_modules I realized the mistake. It works fine.. Figured out - I was using `fontawesome` as dependency instead of `font-awesome`. After inspecting node_modules I realized the mistake. It works fine.. ",
    "julmot": "Why don't you add it to the installation section?\r\n\r\n`npm install sass-loader node-sass webpack --save-dev`. Why don't you add it to the installation section?\r\n\r\n`npm install sass-loader node-sass webpack --save-dev`. ",
    "sshmyg": "`node-sass cli` describe --importer as path to js file with handler.\r\nAnd also it's query string support. . https://github.com/sass/node-sass#command-line-interface\r\nI'll add tests\r\n`--importer                 Path to .js file containing custom importer`. it wouldn't work with query string options.. @evilebottnawi Sorry, have no time to investigate in details. But I thinks it's related to `node-sass => importer`. It returns wrong path in windows.. `node-sass cli` describe --importer as path to js file with handler.\r\nAnd also it's query string support. . https://github.com/sass/node-sass#command-line-interface\r\nI'll add tests\r\n`--importer                 Path to .js file containing custom importer`. it wouldn't work with query string options.. @evilebottnawi Sorry, have no time to investigate in details. But I thinks it's related to `node-sass => importer`. It returns wrong path in windows.. ",
    "miyi": "use resolve-url-loader before sass loader. use resolve-url-loader before sass loader. ",
    "henrahmagix": "Thanks @evilebottnawi! I've just updated the example repo with some extra node-sass compilations to compare against, and edited my comment to link to those files now.\r\n\r\nCheers!. Thanks @evilebottnawi! I've just updated the example repo with some extra node-sass compilations to compare against, and edited my comment to link to those files now.\r\n\r\nCheers!. ",
    "TimoRuetten": "Thanks for your fast response and sorry for duplicate. I will checkout your reference!. Thanks for your fast response and sorry for duplicate. I will checkout your reference!. ",
    "megamindbrian": "Yes, still not sure how to change output attributes. I just ended up reimporting material themes and adding the extra app element.. Yes, still not sure how to change output attributes. I just ended up reimporting material themes and adding the extra app element.. ",
    "spiral2k": "@evilebottnawi  in the package.json of the plugin the version of node-sass is 4.5.0, we can upgrade it to version 4.5.3 to support node 8. @evilebottnawi correct me if I'm wrong but in the package.json in the master branch the version of node-sass is (from the file):  \"node-sass\": \"^4.5.0\".. @evilebottnawi thanks man \ud83e\udd18. @evilebottnawi  in the package.json of the plugin the version of node-sass is 4.5.0, we can upgrade it to version 4.5.3 to support node 8. @evilebottnawi correct me if I'm wrong but in the package.json in the master branch the version of node-sass is (from the file):  \"node-sass\": \"^4.5.0\".. @evilebottnawi thanks man \ud83e\udd18. ",
    "greaveselliott": "I resolved this issue with the following configuraiton\r\n\r\n`{\r\n            test: /\\.scss$/,\r\n            use: [\r\n              require.resolve('style-loader'),\r\n              {\r\n                loader: require.resolve('css-loader'),\r\n                options: {\r\n                  importLoaders: 1,\r\n                },\r\n              },\r\n              {\r\n                loader: require.resolve('postcss-loader'),\r\n                options: {\r\n                  // Necessary for external CSS imports to work\r\n                  // https://github.com/facebookincubator/create-react-app/issues/2677\r\n                  ident: 'postcss',\r\n                  plugins: () => [\r\n                    require('postcss-flexbugs-fixes'),\r\n                    autoprefixer({\r\n                      browsers: [\r\n                        '>1%',\r\n                        'last 4 versions',\r\n                        'Firefox ESR',\r\n                        'not ie < 9', // React doesn't support IE8 anyway\r\n                      ],\r\n                      flexbox: 'no-2009',\r\n                    }),\r\n                  ],\r\n                },\r\n              }, \r\n              {\r\n                  loader: \"sass-loader\" // compiles Sass to CSS\r\n              }\r\n            ],\r\n          }`. I resolved this issue with the following configuraiton\r\n\r\n`{\r\n            test: /\\.scss$/,\r\n            use: [\r\n              require.resolve('style-loader'),\r\n              {\r\n                loader: require.resolve('css-loader'),\r\n                options: {\r\n                  importLoaders: 1,\r\n                },\r\n              },\r\n              {\r\n                loader: require.resolve('postcss-loader'),\r\n                options: {\r\n                  // Necessary for external CSS imports to work\r\n                  // https://github.com/facebookincubator/create-react-app/issues/2677\r\n                  ident: 'postcss',\r\n                  plugins: () => [\r\n                    require('postcss-flexbugs-fixes'),\r\n                    autoprefixer({\r\n                      browsers: [\r\n                        '>1%',\r\n                        'last 4 versions',\r\n                        'Firefox ESR',\r\n                        'not ie < 9', // React doesn't support IE8 anyway\r\n                      ],\r\n                      flexbox: 'no-2009',\r\n                    }),\r\n                  ],\r\n                },\r\n              }, \r\n              {\r\n                  loader: \"sass-loader\" // compiles Sass to CSS\r\n              }\r\n            ],\r\n          }`. ",
    "artvader": "Upon correcting the scss (missing closing bracket) found out it was caused by another plugin. Thank you.. Upon correcting the scss (missing closing bracket) found out it was caused by another plugin. Thank you.. ",
    "joshuaaron": "@evilebottnawi  In the midst of finding a solution was trying other methods I had seen on similar issues - Half the time that works for one and will load, the other half it won't load. I thought that resolved to the home directory.\r\n\r\nAlso I assumed I would need to importLoaders: 2 since I am using two loaders after css-loader? Apologies this is my first webpack setup for a site and struggling.. @evilebottnawi  thanks for the reply.\r\nUsing the full relative URL throws:\r\n```javascript\r\nModule not found: Error: Can't resolve '../../img/texture.png' in '/[local-directory]/src/scss'\r\n     @ ./node_modules/css-loader?{\"importLoaders\":1,\"sourceMap\":true}!./node_modules/postcss-loader/lib?{\"sourceMap\":true,\"plugins\":[null]}!./node_modules/sass-loader/lib/loader.js?{\"sourceMap\":true}!./src/scss/root.scss 6:12733-12765\r\n```. @evilebottnawi Will get one to you later today. @evilebottnawi  https://github.com/joshuaaron/test-repo\r\nemail me at josh_reynolds_@hotmail.com if you need to, first webpack setup ive done so theres probably a few places to optimise this. \r\nUsing the ~/img .. path in dev mode seems to work fine. When creating a prod build, that no longer works, and i cant get a path to work for it at all. This is only for images in scss files. img tags in index.html working fine. @evilebottnawi were you able to find any solution or have any tips on this?. @evilebottnawi  In the midst of finding a solution was trying other methods I had seen on similar issues - Half the time that works for one and will load, the other half it won't load. I thought that resolved to the home directory.\r\n\r\nAlso I assumed I would need to importLoaders: 2 since I am using two loaders after css-loader? Apologies this is my first webpack setup for a site and struggling.. @evilebottnawi  thanks for the reply.\r\nUsing the full relative URL throws:\r\n```javascript\r\nModule not found: Error: Can't resolve '../../img/texture.png' in '/[local-directory]/src/scss'\r\n     @ ./node_modules/css-loader?{\"importLoaders\":1,\"sourceMap\":true}!./node_modules/postcss-loader/lib?{\"sourceMap\":true,\"plugins\":[null]}!./node_modules/sass-loader/lib/loader.js?{\"sourceMap\":true}!./src/scss/root.scss 6:12733-12765\r\n```. @evilebottnawi Will get one to you later today. @evilebottnawi  https://github.com/joshuaaron/test-repo\r\nemail me at josh_reynolds_@hotmail.com if you need to, first webpack setup ive done so theres probably a few places to optimise this. \r\nUsing the ~/img .. path in dev mode seems to work fine. When creating a prod build, that no longer works, and i cant get a path to work for it at all. This is only for images in scss files. img tags in index.html working fine. @evilebottnawi were you able to find any solution or have any tips on this?. ",
    "aleen42": "I have found a solution through using CSS custom properties as followed, and any better ideas for a better compatibilites?\r\n\r\nAsume that I have a Sass for styling theme:\r\n\r\n```sass\r\n/** theme.scss */\r\n$custom-color: #a10000;\r\n```\r\n\r\nThen, convert it into custom CSS properties:\r\n\r\n```sass\r\n/** test some.scss */\r\n@function css-variable($name, $default) {\r\n    @return var(#{$name}, $default); \r\n}\r\n\r\n.test {\r\n    background-color: css-variable(--custom-color, $custom-color);\r\n}\r\n```\r\n\r\nSo , if there is another configuration for setting this color value, I can inject it before:\r\n\r\n```css\r\n/** inject this style during runtime */\r\n:root {\r\n  --custom-color: #0085cc;\r\n}\r\n```\r\n. @michael-ciniawsky Thanks for your suggestion, and I have worked around this by dynamically inject style at runtime with JavaScript, which can solve the compatibility problem:\r\n\r\n```js\r\n/** set custom properties for CSS */\r\nvar customCSSStyleText = '';\r\nvar customSkins = settings.skins;\r\nfor (var i = 0; i < document.styleSheets.length; i++) {\r\n    var stylesheet = document.styleSheets[i];\r\n    var rules = stylesheet.cssRules ? stylesheet.cssRules : stylesheet.rules;\r\n    for (var j = 0; j < rules.length; j++) {\r\n        /var\\(.*?\\)/gi.test(rules[j].cssText) && (\r\n            customCSSStyleText += rules[j].cssText\r\n                .replace(/var\\((.*?), (.*?)\\)/gi, function ($0, $1, $2) {\r\n                    return customSkins && customSkins[$1] ? customSkins[$1] : $2;\r\n                })\r\n        );\r\n    }\r\n}\r\n\r\ncustomCSSStyleText && document.body.appendChild('<style>' + customCSSStyleText + '</style>');\r\n```. I have found a solution through using CSS custom properties as followed, and any better ideas for a better compatibilites?\r\n\r\nAsume that I have a Sass for styling theme:\r\n\r\n```sass\r\n/** theme.scss */\r\n$custom-color: #a10000;\r\n```\r\n\r\nThen, convert it into custom CSS properties:\r\n\r\n```sass\r\n/** test some.scss */\r\n@function css-variable($name, $default) {\r\n    @return var(#{$name}, $default); \r\n}\r\n\r\n.test {\r\n    background-color: css-variable(--custom-color, $custom-color);\r\n}\r\n```\r\n\r\nSo , if there is another configuration for setting this color value, I can inject it before:\r\n\r\n```css\r\n/** inject this style during runtime */\r\n:root {\r\n  --custom-color: #0085cc;\r\n}\r\n```\r\n. @michael-ciniawsky Thanks for your suggestion, and I have worked around this by dynamically inject style at runtime with JavaScript, which can solve the compatibility problem:\r\n\r\n```js\r\n/** set custom properties for CSS */\r\nvar customCSSStyleText = '';\r\nvar customSkins = settings.skins;\r\nfor (var i = 0; i < document.styleSheets.length; i++) {\r\n    var stylesheet = document.styleSheets[i];\r\n    var rules = stylesheet.cssRules ? stylesheet.cssRules : stylesheet.rules;\r\n    for (var j = 0; j < rules.length; j++) {\r\n        /var\\(.*?\\)/gi.test(rules[j].cssText) && (\r\n            customCSSStyleText += rules[j].cssText\r\n                .replace(/var\\((.*?), (.*?)\\)/gi, function ($0, $1, $2) {\r\n                    return customSkins && customSkins[$1] ? customSkins[$1] : $2;\r\n                })\r\n        );\r\n    }\r\n}\r\n\r\ncustomCSSStyleText && document.body.appendChild('<style>' + customCSSStyleText + '</style>');\r\n```. ",
    "thedv91": "I use create-react-app.\r\nThis is config in `webpack.config.dev.js`\r\n```javascript\r\n....\r\n                   {\r\n                        test: /\\.s[ac]ss$/,\r\n                        use: [\r\n                            require.resolve('style-loader'),\r\n                            {\r\n                                loader: require.resolve('css-loader'),\r\n                                options: {\r\n                                    importLoaders: 2,\r\n                                    camelCase: true,\r\n                                    modules: true\r\n                                }\r\n                            },\r\n                            {\r\n                                loader: require.resolve('sass-loader'),\r\n                                options: {\r\n                                    includePaths: [paths.appSrc]\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n```. @evilebottnawi There is no error notification anymore while created style is incorrect. @michael-ciniawsky  I want integration with css-loader and enable modules options [https://github.com/webpack-contrib/css-loader#modules](https://github.com/webpack-contrib/css-loader#modules). I want complier from\r\n```javascript\r\n.wrap {\r\n    :global {\r\n        &.original-class {\r\n        // style\r\n        }\r\n    }\r\n}\r\n```\r\nto\r\n```javascript\r\n._2_aKvs-b8bW2Vg3fwHozO.original-class {\r\n  // style\r\n}\r\n```. I use create-react-app.\r\nThis is config in `webpack.config.dev.js`\r\n```javascript\r\n....\r\n                   {\r\n                        test: /\\.s[ac]ss$/,\r\n                        use: [\r\n                            require.resolve('style-loader'),\r\n                            {\r\n                                loader: require.resolve('css-loader'),\r\n                                options: {\r\n                                    importLoaders: 2,\r\n                                    camelCase: true,\r\n                                    modules: true\r\n                                }\r\n                            },\r\n                            {\r\n                                loader: require.resolve('sass-loader'),\r\n                                options: {\r\n                                    includePaths: [paths.appSrc]\r\n                                }\r\n                            }\r\n                        ]\r\n                    },\r\n```. @evilebottnawi There is no error notification anymore while created style is incorrect. @michael-ciniawsky  I want integration with css-loader and enable modules options [https://github.com/webpack-contrib/css-loader#modules](https://github.com/webpack-contrib/css-loader#modules). I want complier from\r\n```javascript\r\n.wrap {\r\n    :global {\r\n        &.original-class {\r\n        // style\r\n        }\r\n    }\r\n}\r\n```\r\nto\r\n```javascript\r\n._2_aKvs-b8bW2Vg3fwHozO.original-class {\r\n  // style\r\n}\r\n```. ",
    "crazyx13th": "```loader: \"sass-loader\",\r\noptions: {\r\n\tdata: ()=>{ return\r\n\t\t'$isDesktop:' + (this.resourcePath === 'desktop' ? 'true' : 'false') + ';' +\r\n\t\t'$isTablet:' + (this.resourcePath=== 'tablet' ? 'true' : 'false') + ';' +\r\n\t\t'$isMobile:' + (this.resourcePath=== 'mobile' ? 'true' : 'false') + ';' +\r\n\t\t'$isWide:' + (this.resourcePath!== 'mobile' ? 'true' : 'false') + ';'\r\n\t}\r\n}\r\n```\r\n\r\nsomething like this :-)\r\nsee also: https://webpack.github.io/docs/loaders.html#loader-context\r\n\r\nThx!. target is to get the current **entry-name** (e.g.` c2g-desktop`)\r\n![grafik](https://user-images.githubusercontent.com/8912561/32942255-c950ee00-cb88-11e7-99e2-13d1723732ab.png)\r\n\r\nsee also https://stackoverflow.com/questions/44970996/reactjs-getting-sperated-css-output-using-webpack-extracttextplugin\r\n. ```loader: \"sass-loader\",\r\noptions: {\r\n\tdata: ()=>{ return\r\n\t\t'$isDesktop:' + (this.resourcePath === 'desktop' ? 'true' : 'false') + ';' +\r\n\t\t'$isTablet:' + (this.resourcePath=== 'tablet' ? 'true' : 'false') + ';' +\r\n\t\t'$isMobile:' + (this.resourcePath=== 'mobile' ? 'true' : 'false') + ';' +\r\n\t\t'$isWide:' + (this.resourcePath!== 'mobile' ? 'true' : 'false') + ';'\r\n\t}\r\n}\r\n```\r\n\r\nsomething like this :-)\r\nsee also: https://webpack.github.io/docs/loaders.html#loader-context\r\n\r\nThx!. target is to get the current **entry-name** (e.g.` c2g-desktop`)\r\n![grafik](https://user-images.githubusercontent.com/8912561/32942255-c950ee00-cb88-11e7-99e2-13d1723732ab.png)\r\n\r\nsee also https://stackoverflow.com/questions/44970996/reactjs-getting-sperated-css-output-using-webpack-extracttextplugin\r\n. ",
    "gaponenkodv": "\"node-sass\": \"4.6.1\",\r\nlibsass i dont know, I thought that it living inside node-sass\r\n\r\n. @evilebottnawi https://github.com/gaponenkodv/sample\r\nthere dotnet created a lot of files in default angular project, but you need using files with webpack and ClientApp/styles. @evilebottnawi, do you know anithing about it?. \"node-sass\": \"4.6.1\",\r\nlibsass i dont know, I thought that it living inside node-sass\r\n\r\n. @evilebottnawi https://github.com/gaponenkodv/sample\r\nthere dotnet created a lot of files in default angular project, but you need using files with webpack and ClientApp/styles. @evilebottnawi, do you know anithing about it?. "
}