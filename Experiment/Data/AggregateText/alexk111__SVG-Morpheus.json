{
    "alexk111": "Done. 9d8412b0b8aed22248e769fc8fa4fad3e48f9406\n. @Emasoft Thank you for the question and the example. SVG Morpheus does interpolate shapes the same way as snap.svg . The only difference is the paths from the example above were specially prepared for morphing between each other. SVG Morpheus demo uses paths as-is from icons not optimized for that purpose. I'm going to make an optimized icon set soon, for a perfect morphing demo :)\n. @Emasoft thank you for contacting Uddipan!\n. @uddipan  Hi Uddipan. Thank you for joining!\nCurrently it normalizes all paths by turning them into Cubic Bezier and making the # of points equal between the 'from' and 'to' curves. After that it just simply interpolates the points'  x1, y1, x2, y2, x, y values. \nAlso a single path element may contain several sub-paths and it will render shapes depending on the fill-rule parameter (http://www.w3.org/TR/SVG/painting.html#FillRuleProperty). For example: http://jsfiddle.net/alexk111/f2ex69za/2/\n. Ah, It doesn't support inline styles. Is there an option to export styles as attributes in Inkscape?\n. @malps13 Try the latest version. Added basic support for the inline style attribute, so your example should work now.\n. @japrescott Thank you for the question. Sorry, but it will not work with icons placed as text elements via svg fonts. It does need SVG DOM object in order to be able to animate shapes. SVG DOM is only available for SVGs placed by <object> and <iframe> elements, or an inline <svg>.\n. @artrainbow you need to add `id=\"myIconSet\"` to the `<svg>`, init `var options={}` and `var callback=function() { }` before calling the `var myIcons = new SVGMorpheus('#myIconsSet' , options, callback);`\n. @zhangxinxu @romanran Please provide more details on your use cases. `<symbol>` only describes a svg object model, and then you render it with `<use>`, which means that if SVG Morpheus would morph the symbol, all the `<use>` linked with that symbol will morph with it. I'm not sure that this would be a nice idea. What do you think?\n. @PeterDaveHello Thank you for adding the lib to the cdn.\n. @urmilparikh Sorry for the delay :( Thank you for the fix!\n. @cyril94440 [Combine shapes](https://helpx.adobe.com/illustrator/using/combining-objects.html) before exporting to svg, to get (ideally) one `<path>` tag per icon.\n. @lakeebs Does that occur on Safari for Windows? That's a [dead browser](http://appleinsider.com/articles/12/07/25/apple_kills_windows_pc_support_in_safari_60). Please re-open the issue, if that appeared on iOS or OSX.\n. @johnhult You should embed the svg right into html, instead of calling an external svg via `<object>`. The `<object>` is sandboxed and can't be manipulated from scripts on the page.\n. @wollsale Works like a charm! Thank you for providing the example dude!\n. Thank you for the links!\n. Can't publish the library on npm, as the original name was taken by a squatter (nothing is hosted with that package name). Sent a message to npm support. Will publish it as soon as the issue will be resolved on the npm side.\n. Done! Published on NPM as svg-morpheus\n. @taxilian Thank you for the reply!\n. @dalisoft Thank you for the links! Will research that.\n. @BaoyangBob Yeah, you may put the console line before [that one](https://github.com/alexk111/SVG-Morpheus/blob/v0.1.8/source/js/svg-morpheus.js#L383) to get all the paths generated during the morph process.\n. Yup. Morpheus just sounds better :smiley: \n. @taxilian Thank you for the addition!\n. @df257 Thank you for finding this out! I've fixed it. The upcoming version will have the bugfix. Cheers!\n. @ahamo That should work ok now. Please get the `version 0.3.1` and try again.\n. Done. 9d8412b0b8aed22248e769fc8fa4fad3e48f9406\n. @Emasoft Thank you for the question and the example. SVG Morpheus does interpolate shapes the same way as snap.svg . The only difference is the paths from the example above were specially prepared for morphing between each other. SVG Morpheus demo uses paths as-is from icons not optimized for that purpose. I'm going to make an optimized icon set soon, for a perfect morphing demo :)\n. @Emasoft thank you for contacting Uddipan!\n. @uddipan  Hi Uddipan. Thank you for joining!\nCurrently it normalizes all paths by turning them into Cubic Bezier and making the # of points equal between the 'from' and 'to' curves. After that it just simply interpolates the points'  x1, y1, x2, y2, x, y values. \nAlso a single path element may contain several sub-paths and it will render shapes depending on the fill-rule parameter (http://www.w3.org/TR/SVG/painting.html#FillRuleProperty). For example: http://jsfiddle.net/alexk111/f2ex69za/2/\n. Ah, It doesn't support inline styles. Is there an option to export styles as attributes in Inkscape?\n. @malps13 Try the latest version. Added basic support for the inline style attribute, so your example should work now.\n. @japrescott Thank you for the question. Sorry, but it will not work with icons placed as text elements via svg fonts. It does need SVG DOM object in order to be able to animate shapes. SVG DOM is only available for SVGs placed by <object> and <iframe> elements, or an inline <svg>.\n. @artrainbow you need to add `id=\"myIconSet\"` to the `<svg>`, init `var options={}` and `var callback=function() { }` before calling the `var myIcons = new SVGMorpheus('#myIconsSet' , options, callback);`\n. @zhangxinxu @romanran Please provide more details on your use cases. `<symbol>` only describes a svg object model, and then you render it with `<use>`, which means that if SVG Morpheus would morph the symbol, all the `<use>` linked with that symbol will morph with it. I'm not sure that this would be a nice idea. What do you think?\n. @PeterDaveHello Thank you for adding the lib to the cdn.\n. @urmilparikh Sorry for the delay :( Thank you for the fix!\n. @cyril94440 [Combine shapes](https://helpx.adobe.com/illustrator/using/combining-objects.html) before exporting to svg, to get (ideally) one `<path>` tag per icon.\n. @lakeebs Does that occur on Safari for Windows? That's a [dead browser](http://appleinsider.com/articles/12/07/25/apple_kills_windows_pc_support_in_safari_60). Please re-open the issue, if that appeared on iOS or OSX.\n. @johnhult You should embed the svg right into html, instead of calling an external svg via `<object>`. The `<object>` is sandboxed and can't be manipulated from scripts on the page.\n. @wollsale Works like a charm! Thank you for providing the example dude!\n. Thank you for the links!\n. Can't publish the library on npm, as the original name was taken by a squatter (nothing is hosted with that package name). Sent a message to npm support. Will publish it as soon as the issue will be resolved on the npm side.\n. Done! Published on NPM as svg-morpheus\n. @taxilian Thank you for the reply!\n. @dalisoft Thank you for the links! Will research that.\n. @BaoyangBob Yeah, you may put the console line before [that one](https://github.com/alexk111/SVG-Morpheus/blob/v0.1.8/source/js/svg-morpheus.js#L383) to get all the paths generated during the morph process.\n. Yup. Morpheus just sounds better :smiley: \n. @taxilian Thank you for the addition!\n. @df257 Thank you for finding this out! I've fixed it. The upcoming version will have the bugfix. Cheers!\n. @ahamo That should work ok now. Please get the `version 0.3.1` and try again.\n. ",
    "Emasoft": "Please don't waste your time making icons. No developer would ever use those, anyway. We need to be able to use SVG-Morpheus library with our icons, created with a different unique style that matches the design of the web site. Using icons from standard libraries is really uncool.\nYou should use your time to implement a better morphing algorithm. There are much better algorithms than the one you used.\nFor example:\nhttp://www.cad.zju.edu.cn/home/jqfeng/papers/Structure%20Preserving%20Manipulation%20and%20Interpolation%20for%20Multi-element%202D%20Shapes.pdf\nhttp://www.cad.zju.edu.cn/home/jqfeng/papers/2D%20shape%20morphing%20via%20automatic%20feature%20matching%20and%20hierarchical%20interpolation.pdf\nhttp://www.math.zju.edu.cn/cagd/Seminar/2005_AutumnWinter/2005_Master_RSZ_ref.pdf\nhttp://www.math.zju.edu.cn/ligangliu/cagd/publications/2004_PG_Liu.pdf\nhttp://people.unica.it/riccardoscateni/files/2014/04/Saba2014CBC.pdf\nhttp://www.ics.uci.edu/~gopi/SamplePubs/Tweening.pdf\nhttp://www.aicit.org/JDCTA/ppl/JDCTA%20Vol6%20No5_part25.pdf\nhttp://www.cse.ust.hk/~psander/pg2012proc/pg/pdf/v31i7pp2249-2258.pdf\nhttp://www.cs.technion.ac.il/~tess/publications/TVC.pdf\nhttp://hci.iwr.uni-heidelberg.de/publications/dip/2002/ICPR2002/DATA/15_2_5.PDF\n. I've contacted an expert on the field of shape morphing, Uddipan Mukherjee.\n\nUddipan Mukherjee\nUniversity of California, Irvine, CA\nemail:  umukherj@ics.uci.edu\n\nHis paper presents one of the most advanced morphing algorithm, because it can morph even self-overlapping curves:\n\nhttp://www.ics.uci.edu/~gopi/SamplePubs/Tweening.pdf\n\nHere are some videos of the morphing algorithm at work: \nhttp://youtu.be/EHBdTD5EA6M\nhttp://youtu.be/0DDC3fbwtIw\n\nIf he answers my email maybe he will help us improve the algorithm.\n. Welcome Uddipan! Thank you for being here!\nThe svg paths can have a different number of points, and even being a different kind of bezier curves, specifically:\n- Cubic B\u00e9zier (C, c, S and s)\n- Quadratic B\u00e9zier (Q, q, T and t)\n- Elliptical Arc (A and a)\n- Straight Lines (The M indicates a moveto, the Ls indicate linetos, and the z indicates a closepath).\n  See: http://www.w3.org/TR/SVG/paths.html#PathData\n. @uddipan Sure it can be done if you help us with the algorithm. How can we triangulate a bezier curve into a piecewise linear and interpolate the triangles? Even if you quickly sketch us some lines of pseudocode it would be of great help.\n. @uddipan What triangulation algorithm you suggest for the best results? Results in your paper shows that your novel triangulation algorithm quantitatively produces a much better morph when compared to the those produced by an arbitrary triangulation. Can you sketch us your triangulation algorithm in pseudocode?\n. @uddipan What do you mean by \"constrained\"? What are our constrains? Consider that we need to morph not only closed paths, but also open paths. \n\nFor example: is the following a good implementation of the delaunay triangulation? \nhttps://github.com/ironwallaby/delaunay\nOr we need something different?\nHere is a svg triangulation js library with another implementation:\nhttps://github.com/mattdesl/svg-path-contours\nAre those two constrained or ear clipped?\nThe ones explicitly labeled as constrained are those:\nhttps://github.com/r3mi/poly2tri.js\nhttps://github.com/jahting/pnltri.js\nBut I can't tell if they use the ear clipping method.\n. This is still an issue. During the morphing the vertices should not intersect with the segments when moving to a new position.\n. @uddipan Is this triangulation algorithm the right one?\nhttps://github.com/mattdesl/svg-mesh-3d\nWatch the demo here: http://mattdesl.github.io/svg-mesh-3d/\n\nMorphing is going to be BIG very soon. Greensock has in beta a morphing plugin, but I don't think the algorithm is capable to avoid self-intersections of the shapes yet. \nVideo: https://t.co/ndOAjLLd82\n@alexk111 : You should take the lead with SVG-Morpheus! \n. I think you should stick to the SVG 1.1 specifications. You should be able to load all SVG 1.1 conformant files. Have you checked the parsing code of Snap.svg?\nhttps://github.com/adobe-webplatform/Snap.svg/tree/master/src\n. It is better to disable rotation for testing.\nThe morphing is still intersecting the vertices with the segments. This should never happen. Can you fix this with your algorithm?\n. Please don't waste your time making icons. No developer would ever use those, anyway. We need to be able to use SVG-Morpheus library with our icons, created with a different unique style that matches the design of the web site. Using icons from standard libraries is really uncool.\nYou should use your time to implement a better morphing algorithm. There are much better algorithms than the one you used.\nFor example:\nhttp://www.cad.zju.edu.cn/home/jqfeng/papers/Structure%20Preserving%20Manipulation%20and%20Interpolation%20for%20Multi-element%202D%20Shapes.pdf\nhttp://www.cad.zju.edu.cn/home/jqfeng/papers/2D%20shape%20morphing%20via%20automatic%20feature%20matching%20and%20hierarchical%20interpolation.pdf\nhttp://www.math.zju.edu.cn/cagd/Seminar/2005_AutumnWinter/2005_Master_RSZ_ref.pdf\nhttp://www.math.zju.edu.cn/ligangliu/cagd/publications/2004_PG_Liu.pdf\nhttp://people.unica.it/riccardoscateni/files/2014/04/Saba2014CBC.pdf\nhttp://www.ics.uci.edu/~gopi/SamplePubs/Tweening.pdf\nhttp://www.aicit.org/JDCTA/ppl/JDCTA%20Vol6%20No5_part25.pdf\nhttp://www.cse.ust.hk/~psander/pg2012proc/pg/pdf/v31i7pp2249-2258.pdf\nhttp://www.cs.technion.ac.il/~tess/publications/TVC.pdf\nhttp://hci.iwr.uni-heidelberg.de/publications/dip/2002/ICPR2002/DATA/15_2_5.PDF\n. I've contacted an expert on the field of shape morphing, Uddipan Mukherjee.\n\nUddipan Mukherjee\nUniversity of California, Irvine, CA\nemail:  umukherj@ics.uci.edu\n\nHis paper presents one of the most advanced morphing algorithm, because it can morph even self-overlapping curves:\n\nhttp://www.ics.uci.edu/~gopi/SamplePubs/Tweening.pdf\n\nHere are some videos of the morphing algorithm at work: \nhttp://youtu.be/EHBdTD5EA6M\nhttp://youtu.be/0DDC3fbwtIw\n\nIf he answers my email maybe he will help us improve the algorithm.\n. Welcome Uddipan! Thank you for being here!\nThe svg paths can have a different number of points, and even being a different kind of bezier curves, specifically:\n- Cubic B\u00e9zier (C, c, S and s)\n- Quadratic B\u00e9zier (Q, q, T and t)\n- Elliptical Arc (A and a)\n- Straight Lines (The M indicates a moveto, the Ls indicate linetos, and the z indicates a closepath).\n  See: http://www.w3.org/TR/SVG/paths.html#PathData\n. @uddipan Sure it can be done if you help us with the algorithm. How can we triangulate a bezier curve into a piecewise linear and interpolate the triangles? Even if you quickly sketch us some lines of pseudocode it would be of great help.\n. @uddipan What triangulation algorithm you suggest for the best results? Results in your paper shows that your novel triangulation algorithm quantitatively produces a much better morph when compared to the those produced by an arbitrary triangulation. Can you sketch us your triangulation algorithm in pseudocode?\n. @uddipan What do you mean by \"constrained\"? What are our constrains? Consider that we need to morph not only closed paths, but also open paths. \n\nFor example: is the following a good implementation of the delaunay triangulation? \nhttps://github.com/ironwallaby/delaunay\nOr we need something different?\nHere is a svg triangulation js library with another implementation:\nhttps://github.com/mattdesl/svg-path-contours\nAre those two constrained or ear clipped?\nThe ones explicitly labeled as constrained are those:\nhttps://github.com/r3mi/poly2tri.js\nhttps://github.com/jahting/pnltri.js\nBut I can't tell if they use the ear clipping method.\n. This is still an issue. During the morphing the vertices should not intersect with the segments when moving to a new position.\n. @uddipan Is this triangulation algorithm the right one?\nhttps://github.com/mattdesl/svg-mesh-3d\nWatch the demo here: http://mattdesl.github.io/svg-mesh-3d/\n\nMorphing is going to be BIG very soon. Greensock has in beta a morphing plugin, but I don't think the algorithm is capable to avoid self-intersections of the shapes yet. \nVideo: https://t.co/ndOAjLLd82\n@alexk111 : You should take the lead with SVG-Morpheus! \n. I think you should stick to the SVG 1.1 specifications. You should be able to load all SVG 1.1 conformant files. Have you checked the parsing code of Snap.svg?\nhttps://github.com/adobe-webplatform/Snap.svg/tree/master/src\n. It is better to disable rotation for testing.\nThe morphing is still intersecting the vertices with the segments. This should never happen. Can you fix this with your algorithm?\n. ",
    "HughIsaacs2": "I'd use the icons.\nI don't understand what's uncool about standard icon libraries, I see it done all of the time.\n. I'd use the icons.\nI don't understand what's uncool about standard icon libraries, I see it done all of the time.\n. ",
    "malps13": "@Emasoft I am sorry but I think your point of view does not represent everybody else's. Nevertheless, algorithms you've provided seems to work well with similarly formed shapes, but there is no information how well they perform if the shapes differ significantly. I think that every morphing algorithm has it's weaknesses.\n\n@alexk111 maybe it is a good idea though to provide users with multiple morphing algorithms? Or - even better - a convenient way to extend library with new ones? I believe it would involve moving morphing algorithm to separate function and providing config option to extend/change/overwrite it?\n. @Emasoft I am sorry but I think your point of view does not represent everybody else's. Nevertheless, algorithms you've provided seems to work well with similarly formed shapes, but there is no information how well they perform if the shapes differ significantly. I think that every morphing algorithm has it's weaknesses.\n\n@alexk111 maybe it is a good idea though to provide users with multiple morphing algorithms? Or - even better - a convenient way to extend library with new ones? I believe it would involve moving morphing algorithm to separate function and providing config option to extend/change/overwrite it?\n. ",
    "uddipan": "I am not very familiar with svg, but is there a1-1 correspondence between the 'from' and 'to' curves ?\nI understand, right now it is a simple interpolation between the two path specifications, but do these paths have same #points? \n. If you interpolate the curves only, it will give rise to unwanted intersections and produce an unintuitive tween for closed shapes. A better approach is to find a correspondence between the interiors of the shapes and interpolate that. e.g. if you consider the two shapes as piecewise linear, you can triangulate both and find a correspondence b/w the triangles and eventually interpolate the triangles. Can something similar be done here?\n. You can try adding points at close intervals on the curve to make it 'almost' piecewise linear. Then any standard triangulation algorithm can be applied to the enhanced set of points\n. for best results you can use Constrained Delaunay triangulation, or sorted ear clipping (details can be found here http://www.cosy.sbg.ac.at/~held/projects/triang/triang.html). The latter is faster and easier to implement. The idea is to choose the best possible triangle (the one whose angles are not differing much) at each step.\n. In simple terms constrained means not allowing certain edges as they intersect the original triangulation.\nThis may be helpful\nhttp://www.geom.uiuc.edu/~samuelp/del_project.html\nI am not sure what the links you provided do, some pictures would certainly help.\nAlso, note that for open paths, triangulation is not even defined, you may need to think of something else in those cases. \nThis paper may help your case too....you can go through this\nhttp://ftp.cs.arizona.edu/~kobourov/gmorph.pdf\n. looks correct. How is this different from shape tweening used in Adobe Flash ?\n. I am not very familiar with svg, but is there a1-1 correspondence between the 'from' and 'to' curves ?\nI understand, right now it is a simple interpolation between the two path specifications, but do these paths have same #points? \n. If you interpolate the curves only, it will give rise to unwanted intersections and produce an unintuitive tween for closed shapes. A better approach is to find a correspondence between the interiors of the shapes and interpolate that. e.g. if you consider the two shapes as piecewise linear, you can triangulate both and find a correspondence b/w the triangles and eventually interpolate the triangles. Can something similar be done here?\n. You can try adding points at close intervals on the curve to make it 'almost' piecewise linear. Then any standard triangulation algorithm can be applied to the enhanced set of points\n. for best results you can use Constrained Delaunay triangulation, or sorted ear clipping (details can be found here http://www.cosy.sbg.ac.at/~held/projects/triang/triang.html). The latter is faster and easier to implement. The idea is to choose the best possible triangle (the one whose angles are not differing much) at each step.\n. In simple terms constrained means not allowing certain edges as they intersect the original triangulation.\nThis may be helpful\nhttp://www.geom.uiuc.edu/~samuelp/del_project.html\nI am not sure what the links you provided do, some pictures would certainly help.\nAlso, note that for open paths, triangulation is not even defined, you may need to think of something else in those cases. \nThis paper may help your case too....you can go through this\nhttp://ftp.cs.arizona.edu/~kobourov/gmorph.pdf\n. looks correct. How is this different from shape tweening used in Adobe Flash ?\n. ",
    "thednp": "SVGMorpheus just as Snap SVG / Raphael works great if your paths are handmade prepared for tween animation, or else the animation seems 'unnatural'. \n\nHowever there is only one script to do that, and that is GSAP morphSVG plugin, it can even shift the bezier to your heart's desire with it's `shapeIndex` feature.\n\nI also managed to get the cross-path processing to the point where animation happens without any error, but I haven't found yet a way to eliminate the `ugly` factor.\n. Check out a [better way to morph SVG](http://thednp.github.io/kute.js/svg.html).\n. SVGMorpheus just as Snap SVG / Raphael works great if your paths are handmade prepared for tween animation, or else the animation seems 'unnatural'. \n\nHowever there is only one script to do that, and that is GSAP morphSVG plugin, it can even shift the bezier to your heart's desire with it's `shapeIndex` feature.\n\nI also managed to get the cross-path processing to the point where animation happens without any error, but I haven't found yet a way to eliminate the `ugly` factor.\n. Check out a [better way to morph SVG](http://thednp.github.io/kute.js/svg.html).\n. ",
    "romanran": "I have the same issue \n. I have the same issue \n. ",
    "dalisoft": "I sure, `<symbol>` not necessary for morphing as many web developers morphing `SVG` and most `path` tag. Thanks\n. Hi @urmilparikh and @Emasoft \nTry some suggestion, maybe helps:\n1. Convert your relative bezier values to Absolute.\n2. Use 'M, L, C, A' more as possible insteadof other h, v like values.\n3. You can checkout my javascript for paths <a href=\"https://github.com/dalisoft/Unim.js\">Unim.js Animation Engine</a>.\n\nRemember, SVG-Morpheus doesn't edit current path, it maked another tag. Maybe i wrong, correct if i'm wrong.\nThanks\n. Hi @alexk111.\nThanks for amazing morpheus code, i'm used it's on my code and works like charm, i did something wrong ( exactly something wrong with paths ). I credited you in my credits part. Thanks.\n\nEdit: SVG-Morpheus is for group morphing, converts, does anything. not a just path, so if users need more than this for paths, they can use my JS and has 2-way morphing code.\n\nhttps://github.com/dalisoft/Unim.js\nhttp://codepen.io/dalisoft/full/XdoVaK/\n. I sure, `<symbol>` not necessary for morphing as many web developers morphing `SVG` and most `path` tag. Thanks\n. Hi @urmilparikh and @Emasoft \nTry some suggestion, maybe helps:\n1. Convert your relative bezier values to Absolute.\n2. Use 'M, L, C, A' more as possible insteadof other h, v like values.\n3. You can checkout my javascript for paths <a href=\"https://github.com/dalisoft/Unim.js\">Unim.js Animation Engine</a>.\n\nRemember, SVG-Morpheus doesn't edit current path, it maked another tag. Maybe i wrong, correct if i'm wrong.\nThanks\n. Hi @alexk111.\nThanks for amazing morpheus code, i'm used it's on my code and works like charm, i did something wrong ( exactly something wrong with paths ). I credited you in my credits part. Thanks.\n\nEdit: SVG-Morpheus is for group morphing, converts, does anything. not a just path, so if users need more than this for paths, they can use my JS and has 2-way morphing code.\n\nhttps://github.com/dalisoft/Unim.js\nhttp://codepen.io/dalisoft/full/XdoVaK/\n. ",
    "PeterDaveHello": "You're welcome.\n. You're welcome.\n. ",
    "urmilparikh": "@uddipan, Is this effect of what you said in your [comment](https://github.com/alexk111/SVG-Morpheus/issues/2#issuecomment-65167732)?\n. @uddipan, Is this effect of what you said in your [comment](https://github.com/alexk111/SVG-Morpheus/issues/2#issuecomment-65167732)?\n. ",
    "ivopivo72": "+1\n. +1\n. ",
    "wollsale": "Yo !\n\nYou've probably resolve your problem since June, but I've just red your question and I'm currently using SVG-Morpheus on a \"button hover effect\".\n\nHere is my codepen : http://codepen.io/wollsale/pen/mepREp\n\nSVG\n\n> - g#see\n> - g#arrow\n\nJAVSCRIPT\n\n> - var myIcons\n> - 2 functions : morphIn & morphOut (250ms, no-rotation)\n> - OnMouseEnter = morphIn\n> - OnMouseLeave = morphOut\n\nIt's probably not the best way to use it, but it work perfectly for me,\n\nHope it will help you,\n\nAlexis.\n. Yo !\n\nYou've probably resolve your problem since June, but I've just red your question and I'm currently using SVG-Morpheus on a \"button hover effect\".\n\nHere is my codepen : http://codepen.io/wollsale/pen/mepREp\n\nSVG\n\n> - g#see\n> - g#arrow\n\nJAVSCRIPT\n\n> - var myIcons\n> - 2 functions : morphIn & morphOut (250ms, no-rotation)\n> - OnMouseEnter = morphIn\n> - OnMouseLeave = morphOut\n\nIt's probably not the best way to use it, but it work perfectly for me,\n\nHope it will help you,\n\nAlexis.\n. ",
    "hugihlynsson": "+1\n. +1\n. ",
    "zack9433": ":+1: \n. :+1: \n. ",
    "JobaDiniz": "+1\n. +1\n. ",
    "timroes": "+1, it's what currently prevents me form using it in a new project :(\n. +1, it's what currently prevents me form using it in a new project :(\n. ",
    "apertureless": "+1\n. why not simply switch the package name? morpheus-svg .\n. +1\n. why not simply switch the package name? morpheus-svg .\n. ",
    "eymengunay": "@timroes It may not be the best solution but for now you can use:\n\n```\nnpm install alexk111/SVG-Morpheus\n```\n\nyou can find out more about the install command on npm docs: \nhttps://docs.npmjs.com/cli/install\n. @timroes It may not be the best solution but for now you can use:\n\n```\nnpm install alexk111/SVG-Morpheus\n```\n\nyou can find out more about the install command on npm docs: \nhttps://docs.npmjs.com/cli/install\n. ",
    "thebergamo": "why not publish on npm?\n. why not publish on npm?\n. ",
    "parliament718": "+1\n. +1\n. ",
    "taxilian": "Read the LICENSE in the root of the project; it's licensed MIT, which basically means use it however you want but make sure the copyright and license remain intact.\n\nsee https://tldrlegal.com/license/mit-license\n. Read the LICENSE in the root of the project; it's licensed MIT, which basically means use it however you want but make sure the copyright and license remain intact.\n\nsee https://tldrlegal.com/license/mit-license\n. ",
    "df257": "@alexk111 \n. @alexk111 \n. ",
    "ahamo": "Thanks Alex, you're a champ @alexk111 \n. Thanks Alex, you're a champ @alexk111 \n. ",
    "chogarcia": "would you please upgrade `npm` module?\n. +1\n. would you please upgrade `npm` module?\n. +1\n. ",
    "darrentarrant": "+1\n. +1\n. ",
    "geertjansen": "+1\n. +1\n. ",
    "zepekenio": "+1 is it possible ? Its for npm/webpack commonjs. +1 is it possible ? Its for npm/webpack commonjs. ",
    "ssuess": "I am guessing this code does not work with rect. I converted to path and now it is working.\n. I am guessing this code does not work with rect. I converted to path and now it is working.\n. ",
    "nonobelong": "The clone method is in helpers.js.. The clone method is in helpers.js.. "
}