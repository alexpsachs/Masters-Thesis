{
    "kevinsawicki": "Hmm, not sure what was up but I was able to publish `0.0.1`\n\n```\n> apm publish\nnpm http PUT https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode\nnpm http 201 https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode\nnpm http GET https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode\nnpm http 200 https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode\nnpm http PUT https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode/-/vim-mode-0.0.1.tgz/-rev/1-bc326cacbec4ded47068f57abefe68bf\nnpm http 201 https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode/-/vim-mode-0.0.1.tgz/-rev/1-bc326cacbec4ded47068f57abefe68bf\nnpm http PUT https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode/0.0.1/-tag/latest\nnpm http 201 https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode/0.0.1/-tag/latest\n+ vim-mode@0.0.1\n```\n. :heart:\n. /cc @mcolyer \n. Closing this out since the doc has been removed, please comment if you know of places linking to it that still need to be updated.\n. /cc @bhuga \n. This got the specs :green_apple: for me locally, we'll see what travis says.\n. `0.99.0` is out now which includes version `0.23.0` of the keymap module\n. What version are you using? I believe this was fixed by #382 and released in 0.14\n. Would you mind merging/rebasing master into this branch so the specs run again on Travis with the fix from https://github.com/atom/vim-mode/commit/bc178f2356ea1d065128b69cba93a8233b61bac0 ?\n. Sorry for the delay in fixing this, the specs should be :green_apple:  again on master\n. :+1: \n. Thanks but I I believe this was fixed by #420 which will be included in the next release 0.16.0\n. Thanks for fixing this, I'll take a look at that spec and get it running on master.\n. Thanks, but this is intentional, see https://github.com/atom/vim-mode/issues/247 for more details.\n\nYou can remap this locally if you want `ctrl-c` to go into command-mode instead of copying by adding the following to your `~/.atom/keymap.cson` file:\n\n### Linux\n\n``` coffee\n'.platform-linux .editor.vim-mode:not(.command-mode)':\n   'ctrl-c': 'vim-mode:activate-command-mode'\n```\n\n### Windows\n\n``` coffee\n'.platform-win32 .editor.vim-mode:not(.command-mode)':\n   'ctrl-c': 'vim-mode:activate-command-mode'\n```\n. Can you elaborate a bit more which cases this fixes? And were those cases covered by new specs?\n\nIt looks like all the spec changes have `FIXME` comments so I just want to clarify whether this changed behavior is tested in the cases where it is working correctly in this PR, thanks\n. Thanks for this, apologies for the delay in merging it. :ship: :chart_with_upwards_trend: \n. @isaachess Just curious, would you be interested in becoming a maintainer of this package?\n. @isaachess Thanks for this, apologies again for the slow review.\n\nMyself and @maxbrunsfeld are reviewing the PRs on this repo today and afterwards will be cutting a new release.\n. Thanks for this but #427 had a more complete set of scrolling commands so it was merged.\n. I just published 0.16.0, can you confirm the issue on that version using Atom 0.145+?\n. Can you try upgrading your Atom version? I believe it will be fixed if you upgrade to Atom 0.174 or later.\n. Thanks!\n. Looks like this was fixed by https://github.com/atom/vim-mode/commit/534c31d21954813d60488df36cc2dd6f292ff651\n. Closing this out, deprecations are gone.\n. This pull request no longer merges cleanly, would you mind rebasing/merging the latest master branch into here? Thanks.\n. Nice, this caught some good stuff :+1: \n. > How does one add -1 to apm test in Travis tests?\n\nIt was added today for all packages using that standard `travis.yml` file from https://github.com/atom/ci/blob/master/.travis.yml via https://github.com/atom/ci/pull/13\n. Thanks for fixing these!\n. Hmm, not sure what was up but I was able to publish `0.0.1`\n\n```\n> apm publish\nnpm http PUT https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode\nnpm http 201 https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode\nnpm http GET https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode\nnpm http 200 https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode\nnpm http PUT https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode/-/vim-mode-0.0.1.tgz/-rev/1-bc326cacbec4ded47068f57abefe68bf\nnpm http 201 https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode/-/vim-mode-0.0.1.tgz/-rev/1-bc326cacbec4ded47068f57abefe68bf\nnpm http PUT https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode/0.0.1/-tag/latest\nnpm http 201 https://atom.iriscouch.com/registry/_design/app/_rewrite/vim-mode/0.0.1/-tag/latest\n+ vim-mode@0.0.1\n```\n. :heart:\n. /cc @mcolyer \n. Closing this out since the doc has been removed, please comment if you know of places linking to it that still need to be updated.\n. /cc @bhuga \n. This got the specs :green_apple: for me locally, we'll see what travis says.\n. `0.99.0` is out now which includes version `0.23.0` of the keymap module\n. What version are you using? I believe this was fixed by #382 and released in 0.14\n. Would you mind merging/rebasing master into this branch so the specs run again on Travis with the fix from https://github.com/atom/vim-mode/commit/bc178f2356ea1d065128b69cba93a8233b61bac0 ?\n. Sorry for the delay in fixing this, the specs should be :green_apple:  again on master\n. :+1: \n. Thanks but I I believe this was fixed by #420 which will be included in the next release 0.16.0\n. Thanks for fixing this, I'll take a look at that spec and get it running on master.\n. Thanks, but this is intentional, see https://github.com/atom/vim-mode/issues/247 for more details.\n\nYou can remap this locally if you want `ctrl-c` to go into command-mode instead of copying by adding the following to your `~/.atom/keymap.cson` file:\n\n### Linux\n\n``` coffee\n'.platform-linux .editor.vim-mode:not(.command-mode)':\n   'ctrl-c': 'vim-mode:activate-command-mode'\n```\n\n### Windows\n\n``` coffee\n'.platform-win32 .editor.vim-mode:not(.command-mode)':\n   'ctrl-c': 'vim-mode:activate-command-mode'\n```\n. Can you elaborate a bit more which cases this fixes? And were those cases covered by new specs?\n\nIt looks like all the spec changes have `FIXME` comments so I just want to clarify whether this changed behavior is tested in the cases where it is working correctly in this PR, thanks\n. Thanks for this, apologies for the delay in merging it. :ship: :chart_with_upwards_trend: \n. @isaachess Just curious, would you be interested in becoming a maintainer of this package?\n. @isaachess Thanks for this, apologies again for the slow review.\n\nMyself and @maxbrunsfeld are reviewing the PRs on this repo today and afterwards will be cutting a new release.\n. Thanks for this but #427 had a more complete set of scrolling commands so it was merged.\n. I just published 0.16.0, can you confirm the issue on that version using Atom 0.145+?\n. Can you try upgrading your Atom version? I believe it will be fixed if you upgrade to Atom 0.174 or later.\n. Thanks!\n. Looks like this was fixed by https://github.com/atom/vim-mode/commit/534c31d21954813d60488df36cc2dd6f292ff651\n. Closing this out, deprecations are gone.\n. This pull request no longer merges cleanly, would you mind rebasing/merging the latest master branch into here? Thanks.\n. Nice, this caught some good stuff :+1: \n. > How does one add -1 to apm test in Travis tests?\n\nIt was added today for all packages using that standard `travis.yml` file from https://github.com/atom/ci/blob/master/.travis.yml via https://github.com/atom/ci/pull/13\n. Thanks for fixing these!\n. ",
    "mcolyer": "So I dug a bit further into this, I think it would be good to handle this the same way we handle text input events, by selectively blocking events.\n\nIt looks like when a Cursor moves, it triggers a 'moved' event which the corresponding CursorView then watches. When the CursorView receives a move event it marks the CursorView as dirty. Finally the next time the editor calls updateDisplay it gets redrawn.\n\nIdeally there would be a way to preempt the Cursor event when the cursor is located on the last character of line. Does this approach make sense?\n\nI think this means extending EventEmitter with an additional method ('preempt') and creating a preempt queue for every event. It would then iterate over all preempt callbacks before calling the normal callbacks and if one of the preempt callbacks returns false it would stop otherwise all callbacks would be run.\n\nPS, when I read the source it looks like Cursor actually triggers 'moved' but CursorView listens for 'moved.cursor-view' how does that happen?\n. Yep you're correct, the `moved` event is fired afterwards which is why we need this extra machinery. I'd be okay with the `will-move` solution. I guess it depends if we want a more general solution or if a specific solution here will suffice.\n. You're correct. This appears to longer be an issue.\n. Sorry when you said specs failed I thought you meant inside VimState, I don't actually know if the entire test suite passes or not but I wouldn't worry about the rest of the tests for this pull.\n. Ah, now I see these errors, they definitely weren't you. I'll see about cleaning those up.\n. Okay those errors should be fixed up, see 51239da. \n\nOn my machine two other tests reliably fail in the unfocused group but those are due to my system scrollbar settings. I also receive a few intermittent failures around path watching but it only happens when my system load is too high.\n. No this issue is still relevant. It's currently a hack and works in simple cases (as you saw) but fails in more complex ones.\n\nThe relevant part of the code is here https://github.com/atom/vim-mode/blob/master/lib/vim-state.coffee#L58, unfortunately the correct answer requires some changes in core.\n. So this is passing in it's latest iteration and I approve so I'm going to rebase and merge.\n. @ymendel I'm happy with this now. If you're cool with it than I'll merge.\n. My preference would be to rebase off of master (rewriting is okay) and then use the merge button (or force no fast-forward). That way things are fairly linear but there are clear points which relate to the pull requests.\n. I'm going to go ahead and do it now that now, since I got a chance to review the changes.\n. Also this is purely a style thing but I prefer to have the first letter of the commit message capitalized.\n. So the reason I had stayed away from this for now is that @benogle is reworking the Atom search interface. However these changes look small and useful so I'll go ahead and pull this in for now and we can re-address it when @benogle's changes make it in.\n. :thumbsup: \n. Okay so all the tests pass and I've shifted to pulling mutation operations out of the iterator loops. @bhuga I think this is the approach you're suggesting in general for all operators.\n\n@ymendel are you cool with this?\n. Hi @bhuga and welcome to the party!\n\nI totally hear you on this but I was approaching this by hopefully getting the deleted content returned by atom's API, see #11. \n\nAlso deleting does currently copy things into the register for most operations, but it doesn't handle repeated operations see https://github.com/atom/vim-mode/blob/c647867e/lib/vim-state.coffee#L53-L58 this handler would be replaced once we got a proper Atom API in place.\n\nAs for the `dw` stuff, can you give a specific example of how the current implementation doesn't work correctly? I just tried your spec on the current master and it seems to work without your changes.\n. Closing this in favor of #25 \n. Another great change. I originally thought that it was important to capture whether the motion's select method returned false (if you're already at the end of the line and call .select on a MotionRight it will return false) but after experimenting a bit more with it that's not important here.\n. Great cleanup, this is much better than what I had.\n. Thanks for getting this started, I'll see if I can clear those errors up.\n. Turns out that the keydown helper didn't properly support the escape key, I've gone ahead and fixed that and will merge it now.\n. So are you referring to this? http://vimhelp.appspot.com/insert.txt.html#Replace-mode\n\nI think the answer here is to implement an entirely separate mode. If you notice at the top of the keymap file the keybindings have a css selector which cleverly only applies to editors which are in `.vim-mode.command-mode`. So I'm thinking we have another mode `.replace-mode` which then doesn't have any of the command mode bindings. We'll still have to do some cleverness with https://github.com/atom/vim-mode/blob/c647/lib/vim-state.coffee#L37-L45 so that the normal editor behavior doesn't interfer.\n\nLet me know if that helps, I'm happy to pair/answer more questions as the changes required to add replace mode will be helpful when implementing visual mode.\n. Sure, my gut says a mode will be cleanest but let's see what you wind up\nwith.\n. @dougblack yep, I like the operator pending mode approach.\n. For reference, #58 \n. Fixed by #35\n. I'm worried about switching everything over to buffer positions as softwrap lines won't behave correctly, right?\n. @nathansobo The right motion stops at the end of a line in vim. Therefore\nif you're on a softwrapped line it continues until the logical end of the\nline. However if we work in screen lines in atom that wouldn't be the case.\n. I think there's some abstraction here that needs to happen. I'm sure we could make something work but I feel like it would only work for a short while before it totally fell apart. Maybe let this marinate for a bit?\n. :+1: for waiting on this.\n. Just to clarify, I think we're on the same page. I was advocating for not\ndoing anything on this front in either vim-mode or core.\n\nHowever @probablycorey and I just chatted and he convinced me that the\nright short term solution is to ignore the softwrap vim users and switch\neverything to screen positions which should allow folds to function\nproperly.\n\nIn Atom 1.1 maybe can add a 3rd coordinate system which will then allow us\nto support the softwrap vim users, or maybe they don't exist and we don't\nend up ever adding it.\n. @ymendel so I've finished the other stuff I was working on in vim-mode, do you want to take a pass at implementing this now or shall I?\n. @wallace correct. If I recall correctly, I think the proper solution for this is that we need a third coordinate system that's somewhere between screenlines and bufferlines which would require some changes in core. We might be able to work around it but it would probably require a fair bit of work.\n. Cool. As for the repeat commands, I'm thinking when a set of operations forms a command that we append it to the end of a command log so that we can replay them for macros (`q` support) and `.` repeat last command. However I want to clean things up a bit before tackling that.\n. So `2ddp` should be fixed with #28, I'm going to put together another pull using your test as the basis and see if I can fix the Paste operator.\n. End of lines aren't currently handled properly, see #2\n. I'm closing this out in favor of #2 and #29.\n. This ended up having a massive impact test speed we went from 90s to ~6s. Also things are a lot more consistent/less repeated.\n. Okay, it looks like this is going to take a bit more work.\n. @bhuga okay the latest commit should work just as you described above (on any line in the file). If this works as I expected I'm going to merge this and close out your other pull.\n. Beautiful. The test suite refactor definitely makes the spec much more readable.\n. /cc @benogle, where did we wind up with that in atom-core?\n. Closing this in favor of #46\n. So my plans changed a little bit, I ended up doing characterwise submode first. Now that I've got that working I'll see if I can do linewise. If it's a bit of a bear I'll open up a new PR so I can atleast use this to build that.\n. So after exploring linewise mode, I need to discuss the `Cursor`/`Selection` model in Atom because it isn't clear how you can have an independent cursor within a selection (which is critical for linewise mode).\n. If you're using vim-mode by cloning, you'll want to pull again after updating atom to v27. Otherwise your vim-mode will break.\n. I've definitely wanted this functionality for a while, however I think there's a better approach here so we can reuse the functionality for `q`.\n\nSince we currently have an operator stack, I was thinking we should add the concept of a command log that gets appended to every time a command is completed. We could use this for more advanced undo/redo (because our current situation isn't entirely correct) and we could redirect commands to different stacks when recording macros via the `q` command.\n\nThe thing that was holding me back from going down this route was the issue that you brought up in https://github.com/atom/atom/issues/962. We need a way to capture the output in other modes and push that into the command log in order to be entirely correct.\n\nDoes that make sense? I'm happy to go into more detail.\n. `@history` is similar but operates at the operator level. I was thinking more along the lines that `@history` (maybe `@composedCommands`?) would contain a list of objects that represents both the operation and attached insert/delete information (maybe `ComposedCommand`?).\n\nThe reason I thinking of atom/atom#962 as tied to it is that it's necessary for `cw` followed by `.` to work properly.\n. I see where you're going now. There really isn't a need to wrap it into another object and inheritance should work for our purposes.\n\nI hesitate to merge this and tell people vim-mode supports `.` as it's broken for Substitute and Insert operations until we get those core changes done. Thoughts?\n. Okay you convinced me, I added a note about the status to the README to clarify for others.\n. This has been bugging me for a while thanks for getting it.\n. I think the best way to move this forward is for me to find time to make the modifications I was thinking about to status bar. However given the status of other things I can't make a commitment when that would be done. \n\nWhen I do get started I'm happy to do it in a branch so that we can work together on it though.\n. That's helpful to understand. I guess I'm approaching `vim-mode` as a way to move core forward (I do want vim functionality too) and if it takes longer to wait on core that was okay in my mind.\n\nI'm hesitant to add more things to be undone later but I also realize that there is a chicken and egg problem relating to core. So lets get this done and we'll implement it in core later.\n\nI'll see if I can work out the test situation regarding panes.\n. The status bar has not been implemented in core and as far as I know there aren't any plans to work on that currently but it's good to gauge the interest level here.\n. @bhuga Nice work pulling this up to date. \n\nYou're correct, I'm was concerned with the mini-editor aspect. If we stick with just the motion aspect (as it is in this pull) and leave any ex functionality as a separate plugin I think you've convinced me.\n\nI'd like to review the code a bit more. Is it okay if I merge this next week (I'm traveling today/this weekend)?\n. Rebase/merge and then :ship:. Amazing :fireworks: work :fireworks: @bhuga.\n\nAlso add a quick note to the `CHANGELOG.md` mentioning the new feature after merging.\n. Awesome thanks for updating this.\n. If you're running vim-mode, we released atom v39 yesterday so you should be sure to pull or otherwise your vim-mode will cease to function.\n. @kevinsawicki I'm still watching.\n\n@ctbarna looks good to me, merging.\n. @billyvg is correct. The issue is that some users chose a light ui theme but a dark syntax theme and we currently don't have a less variable that allows to know the user's syntax theme colors. We're tracking an issue internally but it's going to be a bit before we'd be able to take advantage of it.\n\nThat said @tarebyte your approach is correct we just need the variable that allows for it.\n. It's possible that this was fixed in atom 0.62 / vim-mode 0.7.2. @jordandcarter can you confirm if this is still an issue with the latest versions?\n. Thanks, I'll merge now.\n. @joefiorini can you take a look at #115?\n. This makes sense but I'd like to see a spec for it first before merging. \n\n@dysfunction can you work something up similar to https://github.com/atom/vim-mode/blob/master/spec/operators-spec.coffee#L388?\n. Opps, let me get that out of there right away.\n. Great work, merging now.\n\nI also forgot to mention adding a line to the docs but since that was my oversight I'll add it after merging.\n. I'm hesitant to add this as I think we want to carefully craft the mix of atomisms (`cmd+shift+p` and [find-and-replace](https://github.com/atom/find-and-replace)) and vimisms (`:`). I think there's a lot of great stuff in atom and we should try to leverage that as much as possible.\n. @zenhob both to some degree :grimacing:. I definitely want to ease the transition to Atom but not at the cost of possible long term wins. It's a fine line and something that's going to evolve over time. \n\nFor me the power of vim is the ability to quickly move around files and replace things in a succinct way and I definitely want to keep that part (so all of the awesome commands people have been asking for in command mode). However I'm not sure that I want to perpetuate `:w` over `cmd-s`. Instead I think a better approach would be for people to add `: to cmd+shift+p and w` to their local configuration and then peel that back (or not) as they become more comfortable with Atom.\n\nI've been thinking about @rogeriopvl's #89 as a possible middle road, the muscle memory being `:` but the Atomism being the command palette rather than ex. What do you think about that?\n. I'm :+1: on splitting `ex` related goodies into a separate package. I think we can find clever ways to integrate without requiring one or the other.\n. @blinks it doesn't exist yet, would you be interested in getting it started? I know @zenhob was pretty interested in it.\n. I've found PRs to be a better way to move things forward. Don't be shy about putting up a PR that isn't finished yet (but be sure to mention that in the description). The earlier you put it up the faster you can receive feedback from the community.\n\nI'll also add that we really want to encourage external contributors/maintainers of vim-mode. \n. Clever! I haven't seen an editor that does that but I can see why it's useful. As @jakebellacera mentioned we would need some changes in core to get this done.\n. @Tarrant thanks for the feedback. Unfortunately this will require changes in core but we've got an issue tracking that already.\n. Not sure if this will land but there is working going on around this in https://github.com/atom/vim-mode/pull/176\n. Closing this in favor of #57\n. @Tarrant awesome, thanks for catching that!\n. :+1: to the operator pending mode, also feel free to edit the issue description/title. Usually I shy away from editing issue descriptions and titles but I think it's fine in a case like this.\n. @jroes :+1: on a more correct operator pending mode and making things generally more correct.\n\nAs for the timeout stuff that's honestly what stopped the progress on these more complex commands. Atom's keybinding infrastructure was never really intended to have multiple separate key presses (ie keypresses are considered independently, not within a state machine). I think we can get it there but it just hasn't been a priority.\n. @colevoss @bashcoder there are limits to using multiple characters keybindings in Atom currently. \n\nIf you were to define `g t` as well as `g`, currently `g` will always be called as soon as you press g. I wrote up a bit more about it [here](https://github.com/atom/vim-mode/issues/58#issuecomment-36368485)\n. @JosephKu I'd be happy to merge this if you can rebase onto vim-mode master and also add a quick note about the new commands to `docs/motions.md`. \n. Moving the discussion to #81.\n. Closing this in favor of #77 or #79 (I haven't taken a look at either yet)\n. Yep visual mode needs quite a bit of work for this to happen and probably also core changes.\n. I'm going to close this out in favor of #71. I remember that I had a good reason to comment it out but I have to refresh my mind before I jump in on #71.\n. Resizing splits requires core changes (so not currently possible but probably in the future).\n\nI'm :+1: on adding mappings for the splits, @adamalbrecht can you put a PR together?\n. #104 is somewhat related.\n. I'm going to close this out in favor of #162.\n. Thanks! Honestly I haven't spent too much time thinking about the ordering of this file. However your spot seems as good as any for now.\n. @manlycode when you mean visual mode do you mean 'v' or 'V'?\n. Just wanted to be sure. You're totally correct that linewise (and blockwise for that matter) don't work. Unfortunately they are going to require some core changes to do correctly but I'll leave this here to track that.\n. Let's move the discussion over to #81.\n. Good catch.\n. Which version of atom and vim-mode are you using?\n. It looks like the package somehow rolled back (we're taking a closer look at that) however in the mean time I've released v0.7.1 so I'm going to close this out.\n. You'll want to upgrade to vim-mode 0.7.0, as 0.6.0 isn't compatible with\n0.60.0\n. Sorry about the confusion here, somehow 0.7.0 got unpublished but I've published 0.7.1 with a few other improvements now.\n. Fantastic work @jroes, you even got the docs :zap:.\n. Just saw the note about `e.abortKeyBinding()`. I'm not exactly sure how you were using it but if you explain more I should be able to determine if there's a bug there (I'm guessing it's a limitation of the current keybinding system).\n. Yep, good catch.\n. I agree that we should find a way to share registers across tabs.\n\nIt happens to be an architecture issue. We currently create a `VimState` instance for each tab which contains it's own set of registers. We would need to move the register storage to a window level. \n\nI'm actually unsure how you were able to yank/put across tabs using a named register as that shouldn't work either.\n. @dhiemstra the `*` register currently does.\n. @zenhob excellent work here. Can you rebase to master and add a quick note to `docs/motions.md`?\n. Merging, thanks!\n. @dougblack @zenhob wanted to let you know that I'm looking at this. I want to see if there's a better way to deal with the scrolloff stuff.\n. @dougblack nice work. I still haven't had a chance to figure out the offset stuff. Could you rebase just to keep things mergable?\n. @dougblack okay I left you a few small notes and once we get those taken care of we can get this merged in.\n. @dougblack sorry I somehow missed that there aren't specs on this. Can you add those using spies as we've been discussing on #100?\n. Great work, merging.\n. For now I'm encouraging people to give [find-and-replace](https://github.com/atom/find-and-replace) a try, I'm trying to strike a balance between implementing vim and using atom.\n\nSee https://github.com/atom/vim-mode/issues/50#issuecomment-36308691 for more on the philosophy side of things.\n. No worries, closing this out then.\n. @eoinkelly nice find. I can honestly say I didn't know it would be that easy. I didn't realize just selecting the whole line would cause the editor to continue to select lines.\n\nThe one thing that I noticed when playing around with this is that if you press `V` select several lines, press `esc`, press `v` and begin selecting again it remains in linewise rather than characterwise mode. Can you poke around and see if there's a way to avoid that?\n\nAlso if you could mark off the todo item for this in the README.md that'd be :cool:.\n. @chadkouse good catch. Using both together resolves the issue.\n. Yep I ran into this the other day.\n. @chadkouse can you turn that into a PR?\n. Sorry didn't see #86. Closing this in favor of that.\n. Can you add a spec for this?\n. @chadkouse I believe the spec runner does not load `~/.atom/keymap.cson` if that's what you mean.\n\nSpecs are :green_apple: on my machine so I'm going to go ahead and merge this fix, thanks for pulling it together.\n. Sorry about that it can be a bit confusing to find things. In this case these are public APIs but they weren't properly included in our generated documentation.\n\nSince `EditorView` extends [space-pen's](https://github.com/atom/space-pen) `View`, we get `::preempt` from [here](https://github.com/atom/space-pen/blob/4115d55f1afa994a37c82a62fb7cc41e223d7f07/src/jquery-extensions.coffee#L80).\n\nWe also get `::command` from space-pen as well, [see here](https://github.com/atom/space-pen/blob/4115d55f1afa994a37c82a62fb7cc41e223d7f07/src/jquery-extensions.coffee#L134).\n\nI'm going to close this out as I've created a ticket to include these functions in documentation on core.\n. We are actively working on fixing this, I'll post here when we've got a fix out.\n. Version 0.62.0 of Atom should fix this. You can either wait for the automatic update or grab it from atom.io.\n. @rogeriopvl do you mind if we close this in favor of #50?\n. Good call, we'll have to figure out how best to resolve that.\n\n/cc @benogle \n. Unfortunately escape in command mode indicates clearing the current opstack. I think the best approach here is to add this to your personal keymap in `~/.atom/keymap.cson`:\n\n```\n'.vim-mode.command-mode':\n  'escape': 'core:cancel'\n```\n\nThe other option would be to remove the vim-mode keybinding to [escape](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L94) and replace it with a [listener](https://github.com/atom/find-and-replace/blob/ae5bfdb9e47b7e880d1ea458c006beac0473dccb/lib/find.coffee#L48) for `core:cancel`, not sure how I feel about that though. @atom/vim-mode-maintainers thoughts?\n. I actually didn't want to merge that yet.\n. @zenhob yeah the auto-updating stuff isn't working for me either. I believe core is working on it.\n. @jcurtis this code looks solid to me. However can you rebase? Things are moving pretty quickly here.\n. No worries.\n. @cj see #22 and #152 \n. @dougblack the general structure of this looks good. A few minor changes with regards to the scrolloff and buffer/screen coordinates (the same as on #77)\n\nInstead of writing a test to check if the window scrolled, I would use jasmine's [spy](http://jasmine.github.io/1.3/introduction.html#section-Spies) behavior to ensure that the calls you make to `editor.setCursorBufferPosition` have values that are correct. We can assume that setCursorBufferPosition is properly tested by core. Let me know if that makes sense.\n\nIf you can add specs and fix that stuff up, it should be good to go.\n. @dougblack yeah I think stubbing those values using `spyOn` and `andReturn` here would probably be clearest.\n. @dougblack I think merging your other two branches caused a conflict. Mind rebasing?\n. Thanks for catching that.\n. @spyc3r good catch. Since it's already mentioned in the docs that's covered and since it's already tested I think we're covered there as well. I'll merge this in.\n. This looks good but can we get some specs using `spyOn`?\n. Fantastic, merging.\n. Yep the enabling/disabling use case needs to be more thought out (even doing what you suggest currently breaks in a variety of ways because I didn't spend too much time thinking about how it should work).\n. @ruedap thanks for the formatting improvements!\n. @ruedap thanks for submitting this. Merging now.\n. @ruedap can you add a quick note to `docs/operators.md` about `X`, when that's done I'll merge.\n. Nice work! Glad to see more and more functionality coming along.\n. Looking good. Can you add some specs for the new behavior?\n. :zap: :confetti_ball: :zap: \n. I've been looking at this and trying to ponder how best to fix this. Sorry I haven't communicated that. I feel like the spec is good but there might be a more clear way to fix it.\n\nSo I guess the summary is I'm still thinking about it but don't have an answer yet.\n. @ciarand okay so I pulled your latest update but when I comment out your code change the specs still pass. If you remove your code change do your specs fail?\n. Welcome!\n\nWe've got a few people interested in this. I think it's going to require an operator pending mode (which we don't have currently). The most recent discussion is happening over here https://github.com/atom/vim-mode/issues/22#issuecomment-36433986.\n\nIn order to minimize the number of places the discussion is happening would you mind closing this out?\n. @adrianolaru thanks for reporting this. I've referenced this on the PR that recently introduced this functionality.\n. @zenhob thanks for finding that (I forgot when I saw this issue).\n\nI'm going to mark this as a duplicate of #2 and so we can keep the discussion together.\n. @adrianolaru thanks for the quick fix here.\n. Combining this with #47 \n. Thanks for catching that.\n. @ciarand excellent work. If you rebase again and add a quick note to `docs/operators.md` I'll merge.\n. @cschneid thanks for contributing this. I left a few notes but I'd also like to see some additional specs around the new registers `%`, `+` and `_` before merging.\n\nSee https://github.com/atom/vim-mode/blob/master/spec/prefixes-spec.coffee#L52 for examples.\n. @cschneid so it's a simple data structure but the coffeescript shorthand might have been confusing:\n\n```\n{\n  text: \"string\",\n  type: utils.copyType(\"string\")\n}\n```\n\nYou'll want to append to the `text` property and then re-evaluate it's contents using the `utils.copyType` helper and set that to the `type` property.\n. @bhuga this change won't actually be affected by #134 because it's not saving anything into the shared state, so @cschneid you should be all set on that front.\n\nHowever can you take a look at the two notes I left on the specs?\n. Yep, this is a limitation of Atom's keybinding system (see this [comment](https://github.com/atom/vim-mode/issues/58#issuecomment-36368485) for more background).\n\nI've created #129 which more clearly describes the problem.\n. @nathansobo great writeup! \n\n> - If we type 'v' and wait N ms, it puts us in visual mode.\n> - If we type 'v i w' we enter visual mode and select inside the current word.\n> - If we type 'v i c e' we never enter visual mode and instead play the miami vice episode. If we wait too long to type the 'e' we enter visual mode.\n> - If we type 'v i a' we enter visual mode.\n\nYes.\n\nI think this algorithm is very close.\n\nWhat if we were to type `v i c` (and pretend `i c` was a motion in visual mode)? I think given the described it would wait until it receives another keystroke and it would not enter visual mode nor select the word which could be unintuitive. Maybe this won't happen in practice but I thought it would be worth bringing up now. Maybe we should have a maximum timeout for any single command and then follow the replay steps?\n. > - `v` is pressed. We go into a pending state and don't go into visual mode.\n> - `i` and `c` are pressed, putting us in a new pending mode due to the ambiguity with `v i c e`\n> - We time out, disabling the longest binding (`v i c e`) and replaying the queued keystrokes.\n> - `v` is replayed. It is now unambiguous so we go into visual mode.\n> - `i` and `c` are replayed, this time in visual mode, causing us to select your pretend text object.\n\nThis is what I was trying to describe but you did a better job explaining than I did. I'm :+1: on the implementation working this way.\n. > Is there a default vim keybinding that does this?\n\nAs far as I know, no. However the my depth of my vim trivia doesn't run very deep.\n. @nathansobo maybe another layer of abstraction?\n. I'm going to wave my hands a bit since I don't know this area of the code super well.  I was thinking whatever grabs the events ends up forwarding the request to a publicly visible method in the keymap manager.\n\n```\ndocument.addEventListener(\"input\", function(e){\nKeymapManager.receiveEvent(e)\n})\n```\n\nThat way other code could manipulate the keymap manager without having to create fake input events. This approach might be totally naive to the complexities involved here so please correct me.\n. >  internally, but this does not result in a textinput event on the input box. The event is essentially discarded once it is matched in the keymap with respect to textual input.\n\nThat was the key part I was missing. \n\nI wonder if a better approach isn't to throw the textinput event from inside the keymap manager using something like `textinput.dispatchEvent(...)`. Or are there issues with that approach as well?\n. :+1:, makes sense to me.\n. @trotter if you update to 0.65 does master still fail?\n. @trotter yeah the first couple of builds had issues updating. The easiest way is to go back to atom.io and download a new binary. The newer releases have an upgrade menu item to force the upgrade check.\n. @bhuga left a few inline comments to address your point, what do you think of that approach?\n. One minor nitpick but other than that I'm :+1: on :ship:ing.\n. @tony612 thanks for contributing that, I like it.\n\nSo the issue you're seeing isn't necessarily a bug in core but I think the best way to get around it is to actually leave the style rule as written but change `visibility:hidden` but then add a second style rule with your additional classes that changes that rule to `visibility:visible`.\n\nCan you make those changes here?\n. Yep, @tony612 exactly what I was thinking.\n. @rougeth which version of atom are you using?\n. Looks like it might be related to this https://github.com/TooTallNate/node-gyp/issues/222\n. @bhuga Nice clean code as always. I left a bunch of quick notes but they're all style based. Feel free to :ship:.\n. Thanks for the quick fixes, I've updated the document.\n. @bhuga It's funny @dougblack mentioned that as well, so we should probably add something there.\n\nI'm down with that approach but not sure how to word it. Mind pushing a commit with it?\n. I hereby decree this finished, :hammer: \n. @mattma adding these bindings to  `~/.atom/keymaps.cson` and just saving causes it to work for me locally. It's possible that you're on an older version of vim-mode, those commands were added in 0.8.0. Which version are you running?\n. I believe this is a duplicate of #24 and unfortunately the correct fix is somewhat involved. Do you mind if we keep the conversation over there?\n. @blinks our current plan is to move `ex` commands into a separate plugin. See #50 for additional context. \n\nAre you okay with closing this out and moving the conversation over there?\n. Going to close this in favor of #154\n. @jroes I think we're on the right track here. There's a bit more refactoring to do but nice work so far.\n. @jroes I still think this is useful.\n. @nathansobo @jroes are you cool with closing this out in favor of #183?\n. Looks good to me, I'll merge it straight away. Thanks for fixing this @dougblack.\n. I'm :+1: after adding docs as @zenhob mentioned.\n. @tony612 and @technicalpickles nice work, merging now.\n. I think buffer is what you want here (as `^` always moves to the start of the logical line in vim), ultimately buffer/screen is tricky because vim handles linewraps/folds differently than either buffer or screen coordinates in atom (see #24 for more detail).\n\nOtherwise this looks good to me, :ship: when ready.\n. @ciarand I think it makes things better so I'll merge this. Hopefully someone else will come along, notice and improve them.\n. :zap: :confetti_ball: :zap:\n. Looks good to me, :ship: when ready.\n. @zenhob the secret bit is here \nhttps://github.com/atom/vim-mode/blob/master/lib/vim-state.coffee#L365\n. The `esc` keypress in vim-mode indicates that you want to return to command mode. You could override it in your personal keymap, if you'd like to change the behavior.\n\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L2 (also lines 7 and 125)\n\nAs for the block cursor, it was changed in #136. Does it not show up in your focused editor?\n. :dart:\n. This is being worked on in #152 \n. I'm :+1: on this. @bhuga you want to do the honors?\n. Unfortunately vim doesn't treat lines strictly as either an Atom screen line or buffer line, see #24 for more the backstory. /cc @nathansobo.\n\nDo you mind if we move the discussion over there and close this?\n. I'm :+1: on this.\n\n![Nice](http://i.imgur.com/lVPnbhT.jpg)\n. @jroes :+1: on forging that path, someone familiar with core might need to spike the intercommunication stuff though.\n\n/cc @bhuga did you get anywhere with the vim-ex plugin you were thinking about?\n. In order to keep things tidy I'm going to close this and move the discussion over to #83.\n. Confirmed.\n. Yep, work has stared on this in #176\n. Yep you'll want to look at these two spots:\n\nhttps://atom.io/docs/v0.75.0/advanced/keymaps\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson\n. I'm going to close this out as its duplicate of several other issues that @willcosgrove pointed out.\n. I totally agree with all of this, thanks for putting it together @bhuga.\n. @d2fn did you mean `~/.atom/packages/`?\u200b\n. @bhuga has core switched to using jquery namespaces? Sorry I'm a bit out of the loop on this stuff.\n. Actually after re-reading this, would `vim-mode-internal:move-to-mark` be better? We tend to use `prefix:` as a convention through out atom and I'd like to stick to that if we can.\n\nI'm not sure when the `.vim-mode` postfix stuff got added but maybe there's a better way to communicate that.\n. @cadwallion thanks for pointing me to that PR. My preferred fix here would be to hold references to all of the handlers we bind and then iterate over that list when unbinding rather than using the jQuery namespace feature.\n\nI think that will address the aim of this PR while remaining inline with the rest of Atom's conventions. What do you think?\n. :heart: @atom/vim-mode-maintainers\n. So I dug a bit further into this, I think it would be good to handle this the same way we handle text input events, by selectively blocking events.\n\nIt looks like when a Cursor moves, it triggers a 'moved' event which the corresponding CursorView then watches. When the CursorView receives a move event it marks the CursorView as dirty. Finally the next time the editor calls updateDisplay it gets redrawn.\n\nIdeally there would be a way to preempt the Cursor event when the cursor is located on the last character of line. Does this approach make sense?\n\nI think this means extending EventEmitter with an additional method ('preempt') and creating a preempt queue for every event. It would then iterate over all preempt callbacks before calling the normal callbacks and if one of the preempt callbacks returns false it would stop otherwise all callbacks would be run.\n\nPS, when I read the source it looks like Cursor actually triggers 'moved' but CursorView listens for 'moved.cursor-view' how does that happen?\n. Yep you're correct, the `moved` event is fired afterwards which is why we need this extra machinery. I'd be okay with the `will-move` solution. I guess it depends if we want a more general solution or if a specific solution here will suffice.\n. You're correct. This appears to longer be an issue.\n. Sorry when you said specs failed I thought you meant inside VimState, I don't actually know if the entire test suite passes or not but I wouldn't worry about the rest of the tests for this pull.\n. Ah, now I see these errors, they definitely weren't you. I'll see about cleaning those up.\n. Okay those errors should be fixed up, see 51239da. \n\nOn my machine two other tests reliably fail in the unfocused group but those are due to my system scrollbar settings. I also receive a few intermittent failures around path watching but it only happens when my system load is too high.\n. No this issue is still relevant. It's currently a hack and works in simple cases (as you saw) but fails in more complex ones.\n\nThe relevant part of the code is here https://github.com/atom/vim-mode/blob/master/lib/vim-state.coffee#L58, unfortunately the correct answer requires some changes in core.\n. So this is passing in it's latest iteration and I approve so I'm going to rebase and merge.\n. @ymendel I'm happy with this now. If you're cool with it than I'll merge.\n. My preference would be to rebase off of master (rewriting is okay) and then use the merge button (or force no fast-forward). That way things are fairly linear but there are clear points which relate to the pull requests.\n. I'm going to go ahead and do it now that now, since I got a chance to review the changes.\n. Also this is purely a style thing but I prefer to have the first letter of the commit message capitalized.\n. So the reason I had stayed away from this for now is that @benogle is reworking the Atom search interface. However these changes look small and useful so I'll go ahead and pull this in for now and we can re-address it when @benogle's changes make it in.\n. :thumbsup: \n. Okay so all the tests pass and I've shifted to pulling mutation operations out of the iterator loops. @bhuga I think this is the approach you're suggesting in general for all operators.\n\n@ymendel are you cool with this?\n. Hi @bhuga and welcome to the party!\n\nI totally hear you on this but I was approaching this by hopefully getting the deleted content returned by atom's API, see #11. \n\nAlso deleting does currently copy things into the register for most operations, but it doesn't handle repeated operations see https://github.com/atom/vim-mode/blob/c647867e/lib/vim-state.coffee#L53-L58 this handler would be replaced once we got a proper Atom API in place.\n\nAs for the `dw` stuff, can you give a specific example of how the current implementation doesn't work correctly? I just tried your spec on the current master and it seems to work without your changes.\n. Closing this in favor of #25 \n. Another great change. I originally thought that it was important to capture whether the motion's select method returned false (if you're already at the end of the line and call .select on a MotionRight it will return false) but after experimenting a bit more with it that's not important here.\n. Great cleanup, this is much better than what I had.\n. Thanks for getting this started, I'll see if I can clear those errors up.\n. Turns out that the keydown helper didn't properly support the escape key, I've gone ahead and fixed that and will merge it now.\n. So are you referring to this? http://vimhelp.appspot.com/insert.txt.html#Replace-mode\n\nI think the answer here is to implement an entirely separate mode. If you notice at the top of the keymap file the keybindings have a css selector which cleverly only applies to editors which are in `.vim-mode.command-mode`. So I'm thinking we have another mode `.replace-mode` which then doesn't have any of the command mode bindings. We'll still have to do some cleverness with https://github.com/atom/vim-mode/blob/c647/lib/vim-state.coffee#L37-L45 so that the normal editor behavior doesn't interfer.\n\nLet me know if that helps, I'm happy to pair/answer more questions as the changes required to add replace mode will be helpful when implementing visual mode.\n. Sure, my gut says a mode will be cleanest but let's see what you wind up\nwith.\n. @dougblack yep, I like the operator pending mode approach.\n. For reference, #58 \n. Fixed by #35\n. I'm worried about switching everything over to buffer positions as softwrap lines won't behave correctly, right?\n. @nathansobo The right motion stops at the end of a line in vim. Therefore\nif you're on a softwrapped line it continues until the logical end of the\nline. However if we work in screen lines in atom that wouldn't be the case.\n. I think there's some abstraction here that needs to happen. I'm sure we could make something work but I feel like it would only work for a short while before it totally fell apart. Maybe let this marinate for a bit?\n. :+1: for waiting on this.\n. Just to clarify, I think we're on the same page. I was advocating for not\ndoing anything on this front in either vim-mode or core.\n\nHowever @probablycorey and I just chatted and he convinced me that the\nright short term solution is to ignore the softwrap vim users and switch\neverything to screen positions which should allow folds to function\nproperly.\n\nIn Atom 1.1 maybe can add a 3rd coordinate system which will then allow us\nto support the softwrap vim users, or maybe they don't exist and we don't\nend up ever adding it.\n. @ymendel so I've finished the other stuff I was working on in vim-mode, do you want to take a pass at implementing this now or shall I?\n. @wallace correct. If I recall correctly, I think the proper solution for this is that we need a third coordinate system that's somewhere between screenlines and bufferlines which would require some changes in core. We might be able to work around it but it would probably require a fair bit of work.\n. Cool. As for the repeat commands, I'm thinking when a set of operations forms a command that we append it to the end of a command log so that we can replay them for macros (`q` support) and `.` repeat last command. However I want to clean things up a bit before tackling that.\n. So `2ddp` should be fixed with #28, I'm going to put together another pull using your test as the basis and see if I can fix the Paste operator.\n. End of lines aren't currently handled properly, see #2\n. I'm closing this out in favor of #2 and #29.\n. This ended up having a massive impact test speed we went from 90s to ~6s. Also things are a lot more consistent/less repeated.\n. Okay, it looks like this is going to take a bit more work.\n. @bhuga okay the latest commit should work just as you described above (on any line in the file). If this works as I expected I'm going to merge this and close out your other pull.\n. Beautiful. The test suite refactor definitely makes the spec much more readable.\n. /cc @benogle, where did we wind up with that in atom-core?\n. Closing this in favor of #46\n. So my plans changed a little bit, I ended up doing characterwise submode first. Now that I've got that working I'll see if I can do linewise. If it's a bit of a bear I'll open up a new PR so I can atleast use this to build that.\n. So after exploring linewise mode, I need to discuss the `Cursor`/`Selection` model in Atom because it isn't clear how you can have an independent cursor within a selection (which is critical for linewise mode).\n. If you're using vim-mode by cloning, you'll want to pull again after updating atom to v27. Otherwise your vim-mode will break.\n. I've definitely wanted this functionality for a while, however I think there's a better approach here so we can reuse the functionality for `q`.\n\nSince we currently have an operator stack, I was thinking we should add the concept of a command log that gets appended to every time a command is completed. We could use this for more advanced undo/redo (because our current situation isn't entirely correct) and we could redirect commands to different stacks when recording macros via the `q` command.\n\nThe thing that was holding me back from going down this route was the issue that you brought up in https://github.com/atom/atom/issues/962. We need a way to capture the output in other modes and push that into the command log in order to be entirely correct.\n\nDoes that make sense? I'm happy to go into more detail.\n. `@history` is similar but operates at the operator level. I was thinking more along the lines that `@history` (maybe `@composedCommands`?) would contain a list of objects that represents both the operation and attached insert/delete information (maybe `ComposedCommand`?).\n\nThe reason I thinking of atom/atom#962 as tied to it is that it's necessary for `cw` followed by `.` to work properly.\n. I see where you're going now. There really isn't a need to wrap it into another object and inheritance should work for our purposes.\n\nI hesitate to merge this and tell people vim-mode supports `.` as it's broken for Substitute and Insert operations until we get those core changes done. Thoughts?\n. Okay you convinced me, I added a note about the status to the README to clarify for others.\n. This has been bugging me for a while thanks for getting it.\n. I think the best way to move this forward is for me to find time to make the modifications I was thinking about to status bar. However given the status of other things I can't make a commitment when that would be done. \n\nWhen I do get started I'm happy to do it in a branch so that we can work together on it though.\n. That's helpful to understand. I guess I'm approaching `vim-mode` as a way to move core forward (I do want vim functionality too) and if it takes longer to wait on core that was okay in my mind.\n\nI'm hesitant to add more things to be undone later but I also realize that there is a chicken and egg problem relating to core. So lets get this done and we'll implement it in core later.\n\nI'll see if I can work out the test situation regarding panes.\n. The status bar has not been implemented in core and as far as I know there aren't any plans to work on that currently but it's good to gauge the interest level here.\n. @bhuga Nice work pulling this up to date. \n\nYou're correct, I'm was concerned with the mini-editor aspect. If we stick with just the motion aspect (as it is in this pull) and leave any ex functionality as a separate plugin I think you've convinced me.\n\nI'd like to review the code a bit more. Is it okay if I merge this next week (I'm traveling today/this weekend)?\n. Rebase/merge and then :ship:. Amazing :fireworks: work :fireworks: @bhuga.\n\nAlso add a quick note to the `CHANGELOG.md` mentioning the new feature after merging.\n. Awesome thanks for updating this.\n. If you're running vim-mode, we released atom v39 yesterday so you should be sure to pull or otherwise your vim-mode will cease to function.\n. @kevinsawicki I'm still watching.\n\n@ctbarna looks good to me, merging.\n. @billyvg is correct. The issue is that some users chose a light ui theme but a dark syntax theme and we currently don't have a less variable that allows to know the user's syntax theme colors. We're tracking an issue internally but it's going to be a bit before we'd be able to take advantage of it.\n\nThat said @tarebyte your approach is correct we just need the variable that allows for it.\n. It's possible that this was fixed in atom 0.62 / vim-mode 0.7.2. @jordandcarter can you confirm if this is still an issue with the latest versions?\n. Thanks, I'll merge now.\n. @joefiorini can you take a look at #115?\n. This makes sense but I'd like to see a spec for it first before merging. \n\n@dysfunction can you work something up similar to https://github.com/atom/vim-mode/blob/master/spec/operators-spec.coffee#L388?\n. Opps, let me get that out of there right away.\n. Great work, merging now.\n\nI also forgot to mention adding a line to the docs but since that was my oversight I'll add it after merging.\n. I'm hesitant to add this as I think we want to carefully craft the mix of atomisms (`cmd+shift+p` and [find-and-replace](https://github.com/atom/find-and-replace)) and vimisms (`:`). I think there's a lot of great stuff in atom and we should try to leverage that as much as possible.\n. @zenhob both to some degree :grimacing:. I definitely want to ease the transition to Atom but not at the cost of possible long term wins. It's a fine line and something that's going to evolve over time. \n\nFor me the power of vim is the ability to quickly move around files and replace things in a succinct way and I definitely want to keep that part (so all of the awesome commands people have been asking for in command mode). However I'm not sure that I want to perpetuate `:w` over `cmd-s`. Instead I think a better approach would be for people to add `: to cmd+shift+p and w` to their local configuration and then peel that back (or not) as they become more comfortable with Atom.\n\nI've been thinking about @rogeriopvl's #89 as a possible middle road, the muscle memory being `:` but the Atomism being the command palette rather than ex. What do you think about that?\n. I'm :+1: on splitting `ex` related goodies into a separate package. I think we can find clever ways to integrate without requiring one or the other.\n. @blinks it doesn't exist yet, would you be interested in getting it started? I know @zenhob was pretty interested in it.\n. I've found PRs to be a better way to move things forward. Don't be shy about putting up a PR that isn't finished yet (but be sure to mention that in the description). The earlier you put it up the faster you can receive feedback from the community.\n\nI'll also add that we really want to encourage external contributors/maintainers of vim-mode. \n. Clever! I haven't seen an editor that does that but I can see why it's useful. As @jakebellacera mentioned we would need some changes in core to get this done.\n. @Tarrant thanks for the feedback. Unfortunately this will require changes in core but we've got an issue tracking that already.\n. Not sure if this will land but there is working going on around this in https://github.com/atom/vim-mode/pull/176\n. Closing this in favor of #57\n. @Tarrant awesome, thanks for catching that!\n. :+1: to the operator pending mode, also feel free to edit the issue description/title. Usually I shy away from editing issue descriptions and titles but I think it's fine in a case like this.\n. @jroes :+1: on a more correct operator pending mode and making things generally more correct.\n\nAs for the timeout stuff that's honestly what stopped the progress on these more complex commands. Atom's keybinding infrastructure was never really intended to have multiple separate key presses (ie keypresses are considered independently, not within a state machine). I think we can get it there but it just hasn't been a priority.\n. @colevoss @bashcoder there are limits to using multiple characters keybindings in Atom currently. \n\nIf you were to define `g t` as well as `g`, currently `g` will always be called as soon as you press g. I wrote up a bit more about it [here](https://github.com/atom/vim-mode/issues/58#issuecomment-36368485)\n. @JosephKu I'd be happy to merge this if you can rebase onto vim-mode master and also add a quick note about the new commands to `docs/motions.md`. \n. Moving the discussion to #81.\n. Closing this in favor of #77 or #79 (I haven't taken a look at either yet)\n. Yep visual mode needs quite a bit of work for this to happen and probably also core changes.\n. I'm going to close this out in favor of #71. I remember that I had a good reason to comment it out but I have to refresh my mind before I jump in on #71.\n. Resizing splits requires core changes (so not currently possible but probably in the future).\n\nI'm :+1: on adding mappings for the splits, @adamalbrecht can you put a PR together?\n. #104 is somewhat related.\n. I'm going to close this out in favor of #162.\n. Thanks! Honestly I haven't spent too much time thinking about the ordering of this file. However your spot seems as good as any for now.\n. @manlycode when you mean visual mode do you mean 'v' or 'V'?\n. Just wanted to be sure. You're totally correct that linewise (and blockwise for that matter) don't work. Unfortunately they are going to require some core changes to do correctly but I'll leave this here to track that.\n. Let's move the discussion over to #81.\n. Good catch.\n. Which version of atom and vim-mode are you using?\n. It looks like the package somehow rolled back (we're taking a closer look at that) however in the mean time I've released v0.7.1 so I'm going to close this out.\n. You'll want to upgrade to vim-mode 0.7.0, as 0.6.0 isn't compatible with\n0.60.0\n. Sorry about the confusion here, somehow 0.7.0 got unpublished but I've published 0.7.1 with a few other improvements now.\n. Fantastic work @jroes, you even got the docs :zap:.\n. Just saw the note about `e.abortKeyBinding()`. I'm not exactly sure how you were using it but if you explain more I should be able to determine if there's a bug there (I'm guessing it's a limitation of the current keybinding system).\n. Yep, good catch.\n. I agree that we should find a way to share registers across tabs.\n\nIt happens to be an architecture issue. We currently create a `VimState` instance for each tab which contains it's own set of registers. We would need to move the register storage to a window level. \n\nI'm actually unsure how you were able to yank/put across tabs using a named register as that shouldn't work either.\n. @dhiemstra the `*` register currently does.\n. @zenhob excellent work here. Can you rebase to master and add a quick note to `docs/motions.md`?\n. Merging, thanks!\n. @dougblack @zenhob wanted to let you know that I'm looking at this. I want to see if there's a better way to deal with the scrolloff stuff.\n. @dougblack nice work. I still haven't had a chance to figure out the offset stuff. Could you rebase just to keep things mergable?\n. @dougblack okay I left you a few small notes and once we get those taken care of we can get this merged in.\n. @dougblack sorry I somehow missed that there aren't specs on this. Can you add those using spies as we've been discussing on #100?\n. Great work, merging.\n. For now I'm encouraging people to give [find-and-replace](https://github.com/atom/find-and-replace) a try, I'm trying to strike a balance between implementing vim and using atom.\n\nSee https://github.com/atom/vim-mode/issues/50#issuecomment-36308691 for more on the philosophy side of things.\n. No worries, closing this out then.\n. @eoinkelly nice find. I can honestly say I didn't know it would be that easy. I didn't realize just selecting the whole line would cause the editor to continue to select lines.\n\nThe one thing that I noticed when playing around with this is that if you press `V` select several lines, press `esc`, press `v` and begin selecting again it remains in linewise rather than characterwise mode. Can you poke around and see if there's a way to avoid that?\n\nAlso if you could mark off the todo item for this in the README.md that'd be :cool:.\n. @chadkouse good catch. Using both together resolves the issue.\n. Yep I ran into this the other day.\n. @chadkouse can you turn that into a PR?\n. Sorry didn't see #86. Closing this in favor of that.\n. Can you add a spec for this?\n. @chadkouse I believe the spec runner does not load `~/.atom/keymap.cson` if that's what you mean.\n\nSpecs are :green_apple: on my machine so I'm going to go ahead and merge this fix, thanks for pulling it together.\n. Sorry about that it can be a bit confusing to find things. In this case these are public APIs but they weren't properly included in our generated documentation.\n\nSince `EditorView` extends [space-pen's](https://github.com/atom/space-pen) `View`, we get `::preempt` from [here](https://github.com/atom/space-pen/blob/4115d55f1afa994a37c82a62fb7cc41e223d7f07/src/jquery-extensions.coffee#L80).\n\nWe also get `::command` from space-pen as well, [see here](https://github.com/atom/space-pen/blob/4115d55f1afa994a37c82a62fb7cc41e223d7f07/src/jquery-extensions.coffee#L134).\n\nI'm going to close this out as I've created a ticket to include these functions in documentation on core.\n. We are actively working on fixing this, I'll post here when we've got a fix out.\n. Version 0.62.0 of Atom should fix this. You can either wait for the automatic update or grab it from atom.io.\n. @rogeriopvl do you mind if we close this in favor of #50?\n. Good call, we'll have to figure out how best to resolve that.\n\n/cc @benogle \n. Unfortunately escape in command mode indicates clearing the current opstack. I think the best approach here is to add this to your personal keymap in `~/.atom/keymap.cson`:\n\n```\n'.vim-mode.command-mode':\n  'escape': 'core:cancel'\n```\n\nThe other option would be to remove the vim-mode keybinding to [escape](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L94) and replace it with a [listener](https://github.com/atom/find-and-replace/blob/ae5bfdb9e47b7e880d1ea458c006beac0473dccb/lib/find.coffee#L48) for `core:cancel`, not sure how I feel about that though. @atom/vim-mode-maintainers thoughts?\n. I actually didn't want to merge that yet.\n. @zenhob yeah the auto-updating stuff isn't working for me either. I believe core is working on it.\n. @jcurtis this code looks solid to me. However can you rebase? Things are moving pretty quickly here.\n. No worries.\n. @cj see #22 and #152 \n. @dougblack the general structure of this looks good. A few minor changes with regards to the scrolloff and buffer/screen coordinates (the same as on #77)\n\nInstead of writing a test to check if the window scrolled, I would use jasmine's [spy](http://jasmine.github.io/1.3/introduction.html#section-Spies) behavior to ensure that the calls you make to `editor.setCursorBufferPosition` have values that are correct. We can assume that setCursorBufferPosition is properly tested by core. Let me know if that makes sense.\n\nIf you can add specs and fix that stuff up, it should be good to go.\n. @dougblack yeah I think stubbing those values using `spyOn` and `andReturn` here would probably be clearest.\n. @dougblack I think merging your other two branches caused a conflict. Mind rebasing?\n. Thanks for catching that.\n. @spyc3r good catch. Since it's already mentioned in the docs that's covered and since it's already tested I think we're covered there as well. I'll merge this in.\n. This looks good but can we get some specs using `spyOn`?\n. Fantastic, merging.\n. Yep the enabling/disabling use case needs to be more thought out (even doing what you suggest currently breaks in a variety of ways because I didn't spend too much time thinking about how it should work).\n. @ruedap thanks for the formatting improvements!\n. @ruedap thanks for submitting this. Merging now.\n. @ruedap can you add a quick note to `docs/operators.md` about `X`, when that's done I'll merge.\n. Nice work! Glad to see more and more functionality coming along.\n. Looking good. Can you add some specs for the new behavior?\n. :zap: :confetti_ball: :zap: \n. I've been looking at this and trying to ponder how best to fix this. Sorry I haven't communicated that. I feel like the spec is good but there might be a more clear way to fix it.\n\nSo I guess the summary is I'm still thinking about it but don't have an answer yet.\n. @ciarand okay so I pulled your latest update but when I comment out your code change the specs still pass. If you remove your code change do your specs fail?\n. Welcome!\n\nWe've got a few people interested in this. I think it's going to require an operator pending mode (which we don't have currently). The most recent discussion is happening over here https://github.com/atom/vim-mode/issues/22#issuecomment-36433986.\n\nIn order to minimize the number of places the discussion is happening would you mind closing this out?\n. @adrianolaru thanks for reporting this. I've referenced this on the PR that recently introduced this functionality.\n. @zenhob thanks for finding that (I forgot when I saw this issue).\n\nI'm going to mark this as a duplicate of #2 and so we can keep the discussion together.\n. @adrianolaru thanks for the quick fix here.\n. Combining this with #47 \n. Thanks for catching that.\n. @ciarand excellent work. If you rebase again and add a quick note to `docs/operators.md` I'll merge.\n. @cschneid thanks for contributing this. I left a few notes but I'd also like to see some additional specs around the new registers `%`, `+` and `_` before merging.\n\nSee https://github.com/atom/vim-mode/blob/master/spec/prefixes-spec.coffee#L52 for examples.\n. @cschneid so it's a simple data structure but the coffeescript shorthand might have been confusing:\n\n```\n{\n  text: \"string\",\n  type: utils.copyType(\"string\")\n}\n```\n\nYou'll want to append to the `text` property and then re-evaluate it's contents using the `utils.copyType` helper and set that to the `type` property.\n. @bhuga this change won't actually be affected by #134 because it's not saving anything into the shared state, so @cschneid you should be all set on that front.\n\nHowever can you take a look at the two notes I left on the specs?\n. Yep, this is a limitation of Atom's keybinding system (see this [comment](https://github.com/atom/vim-mode/issues/58#issuecomment-36368485) for more background).\n\nI've created #129 which more clearly describes the problem.\n. @nathansobo great writeup! \n\n> - If we type 'v' and wait N ms, it puts us in visual mode.\n> - If we type 'v i w' we enter visual mode and select inside the current word.\n> - If we type 'v i c e' we never enter visual mode and instead play the miami vice episode. If we wait too long to type the 'e' we enter visual mode.\n> - If we type 'v i a' we enter visual mode.\n\nYes.\n\nI think this algorithm is very close.\n\nWhat if we were to type `v i c` (and pretend `i c` was a motion in visual mode)? I think given the described it would wait until it receives another keystroke and it would not enter visual mode nor select the word which could be unintuitive. Maybe this won't happen in practice but I thought it would be worth bringing up now. Maybe we should have a maximum timeout for any single command and then follow the replay steps?\n. > - `v` is pressed. We go into a pending state and don't go into visual mode.\n> - `i` and `c` are pressed, putting us in a new pending mode due to the ambiguity with `v i c e`\n> - We time out, disabling the longest binding (`v i c e`) and replaying the queued keystrokes.\n> - `v` is replayed. It is now unambiguous so we go into visual mode.\n> - `i` and `c` are replayed, this time in visual mode, causing us to select your pretend text object.\n\nThis is what I was trying to describe but you did a better job explaining than I did. I'm :+1: on the implementation working this way.\n. > Is there a default vim keybinding that does this?\n\nAs far as I know, no. However the my depth of my vim trivia doesn't run very deep.\n. @nathansobo maybe another layer of abstraction?\n. I'm going to wave my hands a bit since I don't know this area of the code super well.  I was thinking whatever grabs the events ends up forwarding the request to a publicly visible method in the keymap manager.\n\n```\ndocument.addEventListener(\"input\", function(e){\nKeymapManager.receiveEvent(e)\n})\n```\n\nThat way other code could manipulate the keymap manager without having to create fake input events. This approach might be totally naive to the complexities involved here so please correct me.\n. >  internally, but this does not result in a textinput event on the input box. The event is essentially discarded once it is matched in the keymap with respect to textual input.\n\nThat was the key part I was missing. \n\nI wonder if a better approach isn't to throw the textinput event from inside the keymap manager using something like `textinput.dispatchEvent(...)`. Or are there issues with that approach as well?\n. :+1:, makes sense to me.\n. @trotter if you update to 0.65 does master still fail?\n. @trotter yeah the first couple of builds had issues updating. The easiest way is to go back to atom.io and download a new binary. The newer releases have an upgrade menu item to force the upgrade check.\n. @bhuga left a few inline comments to address your point, what do you think of that approach?\n. One minor nitpick but other than that I'm :+1: on :ship:ing.\n. @tony612 thanks for contributing that, I like it.\n\nSo the issue you're seeing isn't necessarily a bug in core but I think the best way to get around it is to actually leave the style rule as written but change `visibility:hidden` but then add a second style rule with your additional classes that changes that rule to `visibility:visible`.\n\nCan you make those changes here?\n. Yep, @tony612 exactly what I was thinking.\n. @rougeth which version of atom are you using?\n. Looks like it might be related to this https://github.com/TooTallNate/node-gyp/issues/222\n. @bhuga Nice clean code as always. I left a bunch of quick notes but they're all style based. Feel free to :ship:.\n. Thanks for the quick fixes, I've updated the document.\n. @bhuga It's funny @dougblack mentioned that as well, so we should probably add something there.\n\nI'm down with that approach but not sure how to word it. Mind pushing a commit with it?\n. I hereby decree this finished, :hammer: \n. @mattma adding these bindings to  `~/.atom/keymaps.cson` and just saving causes it to work for me locally. It's possible that you're on an older version of vim-mode, those commands were added in 0.8.0. Which version are you running?\n. I believe this is a duplicate of #24 and unfortunately the correct fix is somewhat involved. Do you mind if we keep the conversation over there?\n. @blinks our current plan is to move `ex` commands into a separate plugin. See #50 for additional context. \n\nAre you okay with closing this out and moving the conversation over there?\n. Going to close this in favor of #154\n. @jroes I think we're on the right track here. There's a bit more refactoring to do but nice work so far.\n. @jroes I still think this is useful.\n. @nathansobo @jroes are you cool with closing this out in favor of #183?\n. Looks good to me, I'll merge it straight away. Thanks for fixing this @dougblack.\n. I'm :+1: after adding docs as @zenhob mentioned.\n. @tony612 and @technicalpickles nice work, merging now.\n. I think buffer is what you want here (as `^` always moves to the start of the logical line in vim), ultimately buffer/screen is tricky because vim handles linewraps/folds differently than either buffer or screen coordinates in atom (see #24 for more detail).\n\nOtherwise this looks good to me, :ship: when ready.\n. @ciarand I think it makes things better so I'll merge this. Hopefully someone else will come along, notice and improve them.\n. :zap: :confetti_ball: :zap:\n. Looks good to me, :ship: when ready.\n. @zenhob the secret bit is here \nhttps://github.com/atom/vim-mode/blob/master/lib/vim-state.coffee#L365\n. The `esc` keypress in vim-mode indicates that you want to return to command mode. You could override it in your personal keymap, if you'd like to change the behavior.\n\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L2 (also lines 7 and 125)\n\nAs for the block cursor, it was changed in #136. Does it not show up in your focused editor?\n. :dart:\n. This is being worked on in #152 \n. I'm :+1: on this. @bhuga you want to do the honors?\n. Unfortunately vim doesn't treat lines strictly as either an Atom screen line or buffer line, see #24 for more the backstory. /cc @nathansobo.\n\nDo you mind if we move the discussion over there and close this?\n. I'm :+1: on this.\n\n![Nice](http://i.imgur.com/lVPnbhT.jpg)\n. @jroes :+1: on forging that path, someone familiar with core might need to spike the intercommunication stuff though.\n\n/cc @bhuga did you get anywhere with the vim-ex plugin you were thinking about?\n. In order to keep things tidy I'm going to close this and move the discussion over to #83.\n. Confirmed.\n. Yep, work has stared on this in #176\n. Yep you'll want to look at these two spots:\n\nhttps://atom.io/docs/v0.75.0/advanced/keymaps\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson\n. I'm going to close this out as its duplicate of several other issues that @willcosgrove pointed out.\n. I totally agree with all of this, thanks for putting it together @bhuga.\n. @d2fn did you mean `~/.atom/packages/`?\u200b\n. @bhuga has core switched to using jquery namespaces? Sorry I'm a bit out of the loop on this stuff.\n. Actually after re-reading this, would `vim-mode-internal:move-to-mark` be better? We tend to use `prefix:` as a convention through out atom and I'd like to stick to that if we can.\n\nI'm not sure when the `.vim-mode` postfix stuff got added but maybe there's a better way to communicate that.\n. @cadwallion thanks for pointing me to that PR. My preferred fix here would be to hold references to all of the handlers we bind and then iterate over that list when unbinding rather than using the jQuery namespace feature.\n\nI think that will address the aim of this PR while remaining inline with the rest of Atom's conventions. What do you think?\n. :heart: @atom/vim-mode-maintainers\n. ",
    "probablycorey": "I'll answer the PS real quick. In JQuery namespaced events are created with\nthe pattern \"name.namespace\". This way you can remove all namespaces events\nfrom an object. In this case, 'cursor-view' is the namespace and 'moved' is\nthe event name'\n\nOn Mon, Aug 5, 2013 at 1:20 PM, Matt Colyer notifications@github.comwrote:\n\n> So I dug a bit further into this, I think it would be good to handle this\n> the same way we handle text input events, by selectively blocking events.\n> \n> It looks like when a Cursor moves, it triggers a 'moved' event which the\n> corresponding CursorView then watches. When the CursorView receives a move\n> event it marks the CursorView as dirty. Finally the next time the editor\n> calls updateDisplay it gets redrawn.\n> \n> Ideally there would be a way to preempt the Cursor event when the cursor\n> is located on the last character of line. Does this approach make sense?\n> \n> I think this means extending EventEmitter with an additional method\n> ('preempt') and creating a preempt queue for every event. It would then\n> iterate over all preempt callbacks before calling the normal callbacks and\n> if one of the preempt callbacks returns false it would stop otherwise all\n> callbacks would be run.\n> \n> PS, when I read the source it looks like Cursor actually triggers 'moved'\n> but CursorView listens for 'moved.cursor-view' how does that happen?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/2#issuecomment-22138003\n> .\n. I think we should make word movement more flexible within the editor. Both you and @benogle have wanted to adjust the word movement, so it is worth spending some time on I think.\n. I also tried to do this, but some other command is grabbing this key\nbinding. If you dig into keymap.coffee's handle event method you can figure\nout which one.\n\nBut the real solution is to have a keybinding GUI that can surface these\nproblems.\n\nOn Saturday, August 10, 2013, Yossef Mendelssohn wrote:\n\n> @d2fn https://github.com/d2fn mentioned vim enters command mode with\n> ctrl-c, which I didn't even realize. This seems like a straightforward\n> change, but it's not working and I'm not sure right now why.\n> \n> Unlike some other stuff, it's not working at all. It's not like it's only\n> \n> ## failing tests.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/atom/vim-mode ctrl-c_enters_command_mode\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/atom/vim-mode/pull/14\n> Commit Summary\n> - add test for ctrl-c entering command mode\n> - add ctrl-c keybinding for entering command mode\n> \n> File Changes\n> - _M_ keymaps/vim-mode.csonhttps://github.com/atom/vim-mode/pull/14/files#diff-0(1)\n> - _M_ spec/vim-mode-spec.coffeehttps://github.com/atom/vim-mode/pull/14/files#diff-1(8)\n> \n> Patch Links:\n> - https://github.com/atom/vim-mode/pull/14.patch\n> - https://github.com/atom/vim-mode/pull/14.diff\n. I'd really like to hold off on adding logical lines until we all talk about\nit. It seems like it would add a lot of extra code and complexity, and I\nthink we should avoid that if we are focusing on shipping.\n\nOn Thu, Aug 15, 2013 at 8:02 AM, Nathan Sobo notifications@github.comwrote:\n\n> If you guys think logical lines are critical then let's go ahead and add\n> them.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/pull/24#issuecomment-22708645\n> .\n. Great idea, I'm going to close this and try to get it into atom core.\n. I'll answer the PS real quick. In JQuery namespaced events are created with\nthe pattern \"name.namespace\". This way you can remove all namespaces events\nfrom an object. In this case, 'cursor-view' is the namespace and 'moved' is\nthe event name'\n\nOn Mon, Aug 5, 2013 at 1:20 PM, Matt Colyer notifications@github.comwrote:\n\n> So I dug a bit further into this, I think it would be good to handle this\n> the same way we handle text input events, by selectively blocking events.\n> \n> It looks like when a Cursor moves, it triggers a 'moved' event which the\n> corresponding CursorView then watches. When the CursorView receives a move\n> event it marks the CursorView as dirty. Finally the next time the editor\n> calls updateDisplay it gets redrawn.\n> \n> Ideally there would be a way to preempt the Cursor event when the cursor\n> is located on the last character of line. Does this approach make sense?\n> \n> I think this means extending EventEmitter with an additional method\n> ('preempt') and creating a preempt queue for every event. It would then\n> iterate over all preempt callbacks before calling the normal callbacks and\n> if one of the preempt callbacks returns false it would stop otherwise all\n> callbacks would be run.\n> \n> PS, when I read the source it looks like Cursor actually triggers 'moved'\n> but CursorView listens for 'moved.cursor-view' how does that happen?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/2#issuecomment-22138003\n> .\n. I think we should make word movement more flexible within the editor. Both you and @benogle have wanted to adjust the word movement, so it is worth spending some time on I think.\n. I also tried to do this, but some other command is grabbing this key\nbinding. If you dig into keymap.coffee's handle event method you can figure\nout which one.\n\nBut the real solution is to have a keybinding GUI that can surface these\nproblems.\n\nOn Saturday, August 10, 2013, Yossef Mendelssohn wrote:\n\n> @d2fn https://github.com/d2fn mentioned vim enters command mode with\n> ctrl-c, which I didn't even realize. This seems like a straightforward\n> change, but it's not working and I'm not sure right now why.\n> \n> Unlike some other stuff, it's not working at all. It's not like it's only\n> \n> ## failing tests.\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/atom/vim-mode ctrl-c_enters_command_mode\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/atom/vim-mode/pull/14\n> Commit Summary\n> - add test for ctrl-c entering command mode\n> - add ctrl-c keybinding for entering command mode\n> \n> File Changes\n> - _M_ keymaps/vim-mode.csonhttps://github.com/atom/vim-mode/pull/14/files#diff-0(1)\n> - _M_ spec/vim-mode-spec.coffeehttps://github.com/atom/vim-mode/pull/14/files#diff-1(8)\n> \n> Patch Links:\n> - https://github.com/atom/vim-mode/pull/14.patch\n> - https://github.com/atom/vim-mode/pull/14.diff\n. I'd really like to hold off on adding logical lines until we all talk about\nit. It seems like it would add a lot of extra code and complexity, and I\nthink we should avoid that if we are focusing on shipping.\n\nOn Thu, Aug 15, 2013 at 8:02 AM, Nathan Sobo notifications@github.comwrote:\n\n> If you guys think logical lines are critical then let's go ahead and add\n> them.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/pull/24#issuecomment-22708645\n> .\n. Great idea, I'm going to close this and try to get it into atom core.\n. ",
    "nathansobo": "We added a `preempt` method to jQuery by just unshifting the handler onto the array instead of pushing it. Seems like it could work similarly in this case, rather than using an entirely different array?\n. After pondering this, I wonder if we want the cursor to emit a `will-move` event, which allows us to return `false` from an event handler to block the move from occurring. This will probably necessitate some enhancement to the `EventEmitter` system to allow us to determine if any event handlers returned `false`. By the time the `moved` event is fired, I'm assuming the cursor has already moved and it will be too late. Am I missing something here?\n. The generality won't cost us much in this case, I think. It's worth it.\n\nOn Wed, Aug 7, 2013 at 3:07 PM, Matt Colyer notifications@github.comwrote:\n\n> Yep you're correct, the moved event is fired afterwards which is why we\n> need this extra machinery. I'd be okay with the will-move solution. I\n> guess it depends if we want a more general solution or if a specific\n> solution here will suffice.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/2#issuecomment-22288149\n> .\n. :+1: Let's try to fix it here for now.\n. What do you mean by correctly with respect to soft wrap lines? What's the behavior we're trying to avoid?\n. @ymendel That makes sense, but could you describe an actual usability problem that this lack of distinction would cause? Like from the perspective of editing text, rather than on a conceptual level?\n. This is sorta sucky, but as a workaround, could some operations be in buffer lines and some in screen lines? Or is that super gross?\n. If you guys think logical lines are critical then let's go ahead and add them.\n. @mcolyer This statement is concerning to me:\n\n> I think there's some abstraction here that needs to happen. I'm sure we could make something work but I feel like it would only work for a short while before it totally fell apart. Maybe let this marinate for a bit?\n\nSo I'm down to wait but I think it would be a shame to introduce a bunch of complexity into the vim-mode package because we want to avoid complexity in core. I'd rather just not address it at all, then put the abstraction in the correct location when we feel it's needed, rather than creating this kind of debt in vim-mode.\n. Sounds good. I like short-term solutions a lot better when they don't create debt. Seems like a sane path until we get it working right, which I agree can wait.\n. I'd be interested in seeing how it looks to implement it entirely in vim-mode. If it's not too hacky I'd be open to doing it here instead of in core just to move things forward.\n. Thanks @bhuga!\n. A timeout seems like the only clear solution to me in the event of a conflict like this. Either that or some kind of universal binding terminator that says \"I'm done\". But what would that be? And then why not just bake that into the original `g` binding?\n\nSo I'm :+1: on a timeout in the keymap core code. Still seems like a pretty annoying experience to shadow like this.\n. > An idea occurred to me earlier - can we represent keypresses as nodes in an AST like programming languages are parsed into? And in that example, could we define terminal and non-terminal nodes?\n\nThat's essentially what we're trying to achieve with the `opStack` and compositional operators. We haven't defined a context-free grammar, but since context-free languages can be expressed with pushdown automata, this should essentially offer a similar level of power.\n. Yeah, I was envisioning using the keymap to describe the building blocks and then allowing the op-stack to compose them. So you'd bind `w` to `vim:word-motion` or something. I haven't actually looked at this package since the initial experimentation I did with it.\n. Yeah, so on further thinking, @mcolyer, it seems like the composition of multiple bindings should really be something that's expressed in vim mode. That would leave single bindings to emit commands based on the components of a fully-composed command.\n\n``` coffee\n'.vim-mode.command-mode:not(.mini)':\n  'd': 'vim-mode:delete'\n  'i': 'vim-mode:inside-text-object'\n  'w': 'pane:word'\n```\n\nThat's probably not quite right but sort of a sketch. The idea is that `d i w` wouldn't be expressed in the keymap but instead in the composition of multiple discrete commands within vim-mode.\n\nDoes this ring true for you? Does composing multiple commands in vim rather than relying on multi-stroke bindings remove the need for a timeout in core's `Keymap`?\n. Yeah. It's even worse with `j k` because that's in insert mode and gets handled by the editor.\n\nI feel like we're missing something here. I'm thinking there are multiple stroke bindings that still run a single command like escape, but there are also individual bindings that compose together. Is that true? Does vim offer a rebinding syntax for compositions like \"change to next word\", or is that emergent from the individual bindings?\n\nI wish I had time to do a deeper dive on this right now. We really need to carve these ideas at their joints and come up with a proposal that cleanly integrates with the default keymap with potentially a few key features added, without trying to cram all of vim into multi-stroke bindings.\n\nThanks for your thoughts!\n. In thinking about this problem more deeply today, I think I've come up with a solution. Imagine that we had commands bound to the following bindings:\n\n``` coffee\n'.command-mode':\n  'v': \"vim:visual-mode\"\n  'v i c e': \"vim:play-favorite-miami-vice-episode\"\n\n'.visual-mode':\n  'i w': \"vim:select-inside-word\"\n```\n\nWe want a solution that supports the following behavior:\n- If we type 'v' and wait N ms, it puts us in visual mode.\n- If we type 'v i w' we enter visual mode and select inside the current word.\n- If we type 'v i c e' we never enter visual mode and instead play the miami vice episode. If we wait too long to type the 'e' we enter visual mode.\n- If we type 'v i a' we enter visual mode.\n\nHere is a rough outline of how the algorithm could work in the keymap:\n- When we get a keystroke, we push it onto a queue.\n- Then we check what commands have a prefix matching the currently enqueued keystrokes.\n- When the queue unambiguously matches a command, we execute it and clear the queue.\n- When there is ambiguity between multiple commands for the current prefix, we put the keymap into a _pending state_.\n  - If the pending state times out, we temporarily disable the longest ambiguous bindings and replay the queue. See below for more info about the replay.\n- If the set of ambiguous bindings includes an exact match, we set a timeout for the pending state.\n- Otherwise, the next keystroke terminates the pending state. To terminate the state:\n  - We push the newest keystroke to the queue and look for matches again.\n  - If we are again ambiguous, we put the keymap back into a pending state.\n  - If we have a single match, we clear the queue and execute it.\n  - If we match nothing, we temporarily disable the longest of the ambiguous bindings that led to the current pending state, then replay the keystrokes\n  - If during the replay we again get into an ambiguous state, we disable the next-longest ambiguous bindings and replay again.\n  - If during the replay we don't find a matching binding, we abort the replay.\n. I added a clarifying point about what to do when we time out of a pending state. I think the case you're describing would play out as follows:\n- `v` is pressed. We go into a pending state and don't go into visual mode.\n- `i` and `c` are pressed, putting us in a new pending mode due to the ambiguity with `v i c e`\n- We time out, disabling the longest binding (`v i c e`) and replay the queued keystrokes.\n  - `v` is replayed. It is now unambiguous so we go into visual mode.\n  - `i` and `c` are replayed, this time in visual mode, causing us to select your pretend text object.\n\nTrue, we don't enter visual mode right away when there's ambiguity, but this is exactly how vim behaves. For quick keystrokes i think it will barely be noticeable.\n. @bhuga There's no default binding, but when I cooked up a contrived ambiguous binding, that's what happened in vim.\n. I'm going to implement this in the keymap. Started working on some cleanup yesterday and will continue today. Can't make any precise promises, but we should have this cleared up fairly soon.\n. This should be fixed with the next release of Atom now that the keymap has been rewritten. It's also been [open sourced](https://github.com/atom/atom-keymap) for those who are interested or find issues with it.\n. You're right. This is going to take further thought. Does vim basically undo the insertion of the `j` when it figures out you're triggering a binding?\n. That makes sense. We're really close with the replay behavior, but we're messed up by the fact that input events are handled separately from keydown events by the browser. So we need to be able to replay a keystroke in a way that also produces an input event. I'm not even sure that possible in a straightforward way, but we can probably figure out a workaround.\n. What do you have in mind? One possibility is to explore making the keymap manager more knowledgable about handling textual input. It's actually fairly nuanced, and other components may want to benefit from this facility. But handling the textinput events is somewhat entangled with the editor's update lifecycle, so I'm not 100% sure how easy it will be to extract. Worth exploring for sure.\n. Something like that might work, but there would be more to the story. Let me sketch out my mental model for handling an input event with a text editor focused:\n- The editor has a hidden input element that receives focus whenever the editor is focused.\n- When the user types `j` in the input, it first emits a keydown event that bubbles up the DOM.\n- The workspace captures the keydown event and sends it to the keymap manager with `atom.keymaps.handleKeyboardEvent`.\n- In insert mode with `j k` bound to escape, the keymap manager finds a partial binding for `j`.\n\n### Today's Behavior\n\nHere's where things get problematic. Today, when we find any sort of match, we call `preventDefault` on the event. This short-circuits any further action by the browser, halting insertion of input into the hidden text box.\n\nWhen the keymap manager exits the pending state by seeing another character or hitting the timeout, it replays the keydown event associated with the `j` keystroke _internally_, but this does not result in a `textinput` event on the input box. The event is essentially discarded once it is matched in the keymap with respect to textual input.\n\n### Hypothetical Future Behavior\n\nHere's one idea for a solution. There may be better ones.\n- The user expresses their intent to have the keymap handle textual input by setting a `data-` attribute on the input field, like `data-manage-textinput`.\n- When the keymap detects a non-modified keystroke on a field that opts into textual input handling, it does not match it and instead waits for a subsequent `textinput` event.\n- When handling a `textinput` event, the keymap matches the keystroke against plain-character bindings just as it did for keydown events.\n- When a `textinput` event fails to match any bindings, whether initially or during replay, we emit a custom `managed-textinput` event on the input field (perhaps there's a better name).\n\nThis would enable plain keystrokes to be replayed that correctly result in input in the editor. All the logic that currently exists in the editor for handling the accented character menu, IME input, etc would need to be moved from the editor into the keymap manager for us to get away with this. There's a full implementation in the current editor view, and a partial but cleaner implementation in the new React-based editor component. We would need to be careful to cleanly slot in with the editor's DOM update when clearing the contents input field between events.\n\nIf anyone is interested in taking a stab at implementing this, I could definitely use help. Needless to say, any implementation would need to be test-driven to be merged. Otherwise I'll try to get to it soonish.\n. Well, we need to allow the `textinput` event to occur \"naturally\" because the OS and Chromium do a lot of work to interpret the input corresponding to a given keystroke. I suppose we could manually hand the event to the keymap manager in the editor and then only continue to process it if the default isn't prevented...\n- Editor receives a text input event for a `j`\n- We call `atom.keymaps.handleTextInputEvent` with the event.\n- The keymap has an ambiguous binding, it prevents default on the event.\n- We note the default prevention in the editor and abort processing of the event.\n- The timeout occours, and the keymap manager \"replays\" the input event on the text field.\n- The editor calls `handleTextInputEvent` _again_, but this time the default is not prevented and we proceed as normal.\n\nMight be nice because we don't have to introduce the `data-` attribute and the special event name.\n. I think I may take a stab at reimplementing this rather than catching this up with master. I may change my mind. Either way I'll be sure to credit you in the change log and reference this PR.\n. Looking at this now. Sorry for the delay.\n. This is looking pretty good. Thanks for taking care of these special cases. A couple minor adjustments but the code is pretty much ready to go other than that.\n. Looks beautiful, thanks!\n. Checking my understanding here: The `.` command can repeat any previous change command, right? Some of these commands are logical in nature, like \"join lines\". Repeating the last insert mode excursion is just one of a category of commands that need to be repeatable.\n\nI'm thinking that `::commitTransaction` and `::transact` should return a transaction object that can be replayed at a different location in the buffer. So if the range of an operation in a replayed transaction is [[5, 10], [5, 13]], replaying the transaction at [7, 2] would run the same operation but change the range to [[7, 2], [7, 5]]. I'm not sure about marker positions. Perhaps we can treat them the same. What happens to cursors in vim when operations are replayed?\n\nSo I'm thinking of supporting this pseudocode:\n\n``` coffee\n@buffer.beginTransaction()\n# make changes\ntransaction = @buffer.commitTransaction()\n# later...\ntransaction.replay([7, 2]) # the position could be optional\n```\n. @bhuga Flag me down in chat any day this week and we can do some screen sharing. Thanks for working on this!\n. Okay, I added some comments in various places. Summary:\n- I'd like to see the facility for getting the most recent contiguous inserted text moved into `TextBuffer` so we don't rely on its implementation details. We should probably just have a method like `::getLastInsertedText` or something along those lines that behaves as desired.\n- I'd like to see the specs be a little more realistic than setting the text of the entire buffer. We want to exercise the transactions for example.\n. Thanks!\n. Shout out to @jroes for taking a stab at this in #152.\n. @danzimm I went ahead and merged master into your branch for you in [this PR](https://github.com/danzimm/vim-mode/pull/2).\n\nNow for your questions:\n\n> if I do dr it still waits to capture an extra character even though it's clear that r cannot be composed with d\n\nI think we're going to need to call `::canComposeWith` or something on the current top of the stack when pushing a new operation. We aren't always _ready_ to compose until we get additional input, such as composing `d` with a `t\"` motion, but we _can_ know if in principle it could be possible in the future. Operators that compose with motions can then disallow other operators from being pushed on top of themselves.\n\n> whether I should implement empty execute, select methods on it\n\nI don't think either of these methods belong on `Input`. It's inert, only designed to be composed with other smarter objects.\n\n> Personally I think we should have all operations pass through the opStack, thus keeping everything the way it is\n\nAgreed. The opstack is the backbone of our composition system. Using it may be more roundabout in certain cases, but it's easier to reason about as a single location for our essential state.\n. Sounds good.\n. It's just easier to find the file for a class if the name matches.\n\nAs for the idea of an operation needing a controller, I'm having a hard time understanding why the operation can't deal with the operational aspects of itself. Backing the view that gets input with a model makes more sense to me, but I just don't see why a \"find\" operation wouldn't do the actual finding once it determined what needed to be found. Is it just a file size issue? If that's the case I think we should split the file up. Are there other arguments for having a find operation not do the finding?\n. :tada:\n. I do think this is a core issue. I don't mind leaving this open for the time-being as a reminder.\n. I'm rewriting a lot of the editor rendering, so it's going to be a bit but I will take this into account. I'm concerned that doing this from the outside could impact performance.\n. Why'd you close it? Just in anticipation of the new React-based editor being ready for prime time or because we've implemented a fix in the Vim package itself?\n. I've created https://github.com/atom/atom-keymap/issues/16 to track the integration of `textinput` events with multi-keystroke bindings. Fixing that still won't allow for multi-key chords, but at least provides better support for the typical `j k` escape bindings.\n\nI've also created https://github.com/atom/atom-keymap/issues/17 to track support for chords, which is more sophisticated. In time, this is all reasonable, but I personally won't be able to get to it until our plans for the editor renderer are more stable.\n. We've had some other issues with keyboard event translation on Linux that @kevinsawicki addressed about a month ago in atom/atom-keymap#10. I'm wondering if this could be related. Perhaps there were other erroneous cases that weren't address in that PR?\n. @bhuga I'm planning on adding a marker view API into core that can be rendered by the new editor. Basically you'll add a marker associated with HTML attributes, and the editor will take care of rendering divs with the specified attributes for you based on the current position of the marker. I don't think we should add any more manual marker rendering before I finish that API.\n. /cc @maxbrunsfeld\n. Uninstalling and reinstalling makes sense because vim-mode probably doesn't properly implement `.deactivate`.\n. You'll probably need to put the editor in a wrapper div with the `.platform-x` class and attach that. It's normally on the workspace but it would be nice to avoid the overhead of attaching the entire workspace.\n. Looking.\n. I can't reproduce it either on master. How the heck is `Input` getting pushed onto the stack without anything beneath it?\n. I would like to just check the location of the cursor whenever it moves using the `cursors-moved` event emitted by the `Editor` model and the cursor it back one character if we're in insert mode and it reaches the end of the line. That would work with every possible way you can move the cursor, rather than addressing it on a case-by-case basis. We'll be switching editor renderers soon, so I'm reluctant to introduce explicit dependencies on view code.\n. It could be a few more days before we flip the default, but I'd like to merge this in sooner if that's okay so we can get people to use vim-mode with React before we switch.\n. Ping me ASAP if there's any issues.\n. This is a really tricky situation. The thing is that the keyboard events bubble, so we match selectors against every element on the path between the target of the keyboard event and the root of the document, looking for matching bindings. Because selectors are evaluated freshly on each element of the bubble path, there's no way to address this at the selector level.\n\nI've added the best feature I can think of to deal with this situation. It's a new `abort!` directive you can use in place of the command in bindings to stop the bubbling process. This combination should now work:\n\n```\n'.workspace':\n  ', t': 'fuzzy-finder:toggle-file-finder'\n\n'.editor.insert-mode':\n  ', t': 'abort!'\n```\n\nIf `', t'` is typed in insert mode, it just gets swallowed silently. But otherwise it bubbles to workspace and is handled. There may be unexpected emergent situations where this is too heavy handed an approach, but it should solve this one.\n. @jspahrsummers Feel free to merge at your discretion.\n. Thanks for the summary. This is next on my list after fixing a core issue.\n. Thanks @jspahrsummers! Pretty sure this is what vim does and it makes sense to me.\n. You could open a PR with a configuration option for it.\n. I would be open to adding this kind of feature to core, with a subword version of every word-oriented method. So there would be `moveCursorToNextWordBoundary` and `moveCursorToNextSubwordBoundary`.\n\nWe currently allow users to define `editor.nonWordCharacters`, which we use to build a word regex in `Cursor::wordRegex` (which should be renamed to `Cursor::getWordRegex`). We could allow users to define their own subword boundary regex. Presumably we'd use the end of the match, since JS regexes support lookahead but not lookbehind. We could also add the ability to fully customize the word regex for consistency. In both cases we'd provide a sane default.\n. @jspahrsummers Would you like to take a crack at it? It's probably easier to navigate than some of the vim-mode changes you've been looking at. I can't get to it with my full-time attention immediately because we have a long list of higher priority items.\n. Appreciate the ping.\n. Taking a look at this now.\n. Thanks for investigating this. I think all the problems stem from the original implementation using screen positions as if they were buffer positions. This caused problems with tab characters because they take up more space on screen than in the buffer. It also caused havoc when there were folds above the cursor. And of course soft wraps didn't work right because they cause screen rows to misalign with buffer rows. I created a simple PR referencing this one that switches the calculations to use buffer positions. Thanks for taking this on and bringing it to our attention and apologies for the delay in fixing it.\n. @DavidLGoldberg I didn't keep the specs because they were protecting against a regression that was only caused by using the totally incorrect approach for determining the cursor position. If you'd like to slot them in as extra cases in the existing specs for `l`, I'd be down to merge them. I don't want to add a whole new file though. I wouldn't have looked into this if you hadn't submitted the PR, so you still deserve credit for taking it on.\n. The build failure was caused by some trickiness I employed to end our reliance on jQuery for command registration. The code I added routes most jQuery event handlers through our custom command dispatcher but opts out of it for native event types. Unfortunately the `textInput` event wasn't included in the black list, and for some strange reason it's not being captured when dispatched programmatically. I added it to the black list in atom/atom@c0843d467d603566133c298ffe41b1541a9e45f8 so specs should be green again after 0.138.0 is released.\n. @isaachess I'm really sorry for the delay on reviewing this. I hear your feedback loud and clear. Vim-mode is a really important package, and we've not been giving it enough attention because we've been spread thin focusing on updating core APIs in order to get Atom ready for 1.0 status. The good news is that we're bringing on an additional team member on contract next week to help us with the workload, and this package will be one of the things we'll ask him to focus on.\n. @maxbrunsfeld For testing, you should probably just use `atom.workspace` and do a state based test, unless I'm missing something.\n\nI wonder if you could achieve this via normal API's by creating a new pane in the desired location, moving all the items, then destroying the old pane. Any reason that wouldn't work?\n. Ah, I see. You're right. This definitely expands the surface area of our panes API.\n\n@maxbrunsfeld I think we should think through how we could extend our official API to support this before merging this into an officially maintained package. Do you agree?\n\n@coolwanglu if you'd like to think through a more ideal official API for this we could entertain a PR on atom/atom. What if we exposed the axes as part of the API and provided `split|Up|Down|Left|Right` methods on the axis objects? That would enable you to create a pane relative to an axis without needing to construct the axis yourself.\n. @coolwanglu And if you call `splitRight` on a vertical axis, it would create a new containing horizontal axis automatically. The `split...` naming is starting to feel awkward when applied to axes however. Seems like `addPaneAbove`, `addPaneBelow`, `addPaneToLeft`, `addPaneToRight` might be clearer and apply better to both axes and panes. The `split...` method on axes would be a bit misleading since calling `splitUp` on a vertical axis wouldn't actually split anything... it would just add a new child at the top.\n\nWould you be interested in opening a PR on master with these changes? If you agree about the naming change, we would need to leave the old `split...` methods on pane but steer people toward the `addPane...` versions.\n. @coolwanglu Cool, thanks a lot!\n. This is fixed with 1.0.14.\n. @t9md Have you tried `Selection::expandOverLine`?\n. We could add an option to `selectLine`, but I found that behavior pretty surprising as a default and not matching the docs. What do you think? Sorry for the breakage I know it's frustrating.\n. Hi @franleplant, just bind `ctrl-w` to `tree-view:toggle-focus` in your keymap under the `atom-workspace` selector. You can learn more about keybindings here: https://atom.io/docs/latest/behind-atom-keymaps-in-depth.\n. We added a `preempt` method to jQuery by just unshifting the handler onto the array instead of pushing it. Seems like it could work similarly in this case, rather than using an entirely different array?\n. After pondering this, I wonder if we want the cursor to emit a `will-move` event, which allows us to return `false` from an event handler to block the move from occurring. This will probably necessitate some enhancement to the `EventEmitter` system to allow us to determine if any event handlers returned `false`. By the time the `moved` event is fired, I'm assuming the cursor has already moved and it will be too late. Am I missing something here?\n. The generality won't cost us much in this case, I think. It's worth it.\n\nOn Wed, Aug 7, 2013 at 3:07 PM, Matt Colyer notifications@github.comwrote:\n\n> Yep you're correct, the moved event is fired afterwards which is why we\n> need this extra machinery. I'd be okay with the will-move solution. I\n> guess it depends if we want a more general solution or if a specific\n> solution here will suffice.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/2#issuecomment-22288149\n> .\n. :+1: Let's try to fix it here for now.\n. What do you mean by correctly with respect to soft wrap lines? What's the behavior we're trying to avoid?\n. @ymendel That makes sense, but could you describe an actual usability problem that this lack of distinction would cause? Like from the perspective of editing text, rather than on a conceptual level?\n. This is sorta sucky, but as a workaround, could some operations be in buffer lines and some in screen lines? Or is that super gross?\n. If you guys think logical lines are critical then let's go ahead and add them.\n. @mcolyer This statement is concerning to me:\n\n> I think there's some abstraction here that needs to happen. I'm sure we could make something work but I feel like it would only work for a short while before it totally fell apart. Maybe let this marinate for a bit?\n\nSo I'm down to wait but I think it would be a shame to introduce a bunch of complexity into the vim-mode package because we want to avoid complexity in core. I'd rather just not address it at all, then put the abstraction in the correct location when we feel it's needed, rather than creating this kind of debt in vim-mode.\n. Sounds good. I like short-term solutions a lot better when they don't create debt. Seems like a sane path until we get it working right, which I agree can wait.\n. I'd be interested in seeing how it looks to implement it entirely in vim-mode. If it's not too hacky I'd be open to doing it here instead of in core just to move things forward.\n. Thanks @bhuga!\n. A timeout seems like the only clear solution to me in the event of a conflict like this. Either that or some kind of universal binding terminator that says \"I'm done\". But what would that be? And then why not just bake that into the original `g` binding?\n\nSo I'm :+1: on a timeout in the keymap core code. Still seems like a pretty annoying experience to shadow like this.\n. > An idea occurred to me earlier - can we represent keypresses as nodes in an AST like programming languages are parsed into? And in that example, could we define terminal and non-terminal nodes?\n\nThat's essentially what we're trying to achieve with the `opStack` and compositional operators. We haven't defined a context-free grammar, but since context-free languages can be expressed with pushdown automata, this should essentially offer a similar level of power.\n. Yeah, I was envisioning using the keymap to describe the building blocks and then allowing the op-stack to compose them. So you'd bind `w` to `vim:word-motion` or something. I haven't actually looked at this package since the initial experimentation I did with it.\n. Yeah, so on further thinking, @mcolyer, it seems like the composition of multiple bindings should really be something that's expressed in vim mode. That would leave single bindings to emit commands based on the components of a fully-composed command.\n\n``` coffee\n'.vim-mode.command-mode:not(.mini)':\n  'd': 'vim-mode:delete'\n  'i': 'vim-mode:inside-text-object'\n  'w': 'pane:word'\n```\n\nThat's probably not quite right but sort of a sketch. The idea is that `d i w` wouldn't be expressed in the keymap but instead in the composition of multiple discrete commands within vim-mode.\n\nDoes this ring true for you? Does composing multiple commands in vim rather than relying on multi-stroke bindings remove the need for a timeout in core's `Keymap`?\n. Yeah. It's even worse with `j k` because that's in insert mode and gets handled by the editor.\n\nI feel like we're missing something here. I'm thinking there are multiple stroke bindings that still run a single command like escape, but there are also individual bindings that compose together. Is that true? Does vim offer a rebinding syntax for compositions like \"change to next word\", or is that emergent from the individual bindings?\n\nI wish I had time to do a deeper dive on this right now. We really need to carve these ideas at their joints and come up with a proposal that cleanly integrates with the default keymap with potentially a few key features added, without trying to cram all of vim into multi-stroke bindings.\n\nThanks for your thoughts!\n. In thinking about this problem more deeply today, I think I've come up with a solution. Imagine that we had commands bound to the following bindings:\n\n``` coffee\n'.command-mode':\n  'v': \"vim:visual-mode\"\n  'v i c e': \"vim:play-favorite-miami-vice-episode\"\n\n'.visual-mode':\n  'i w': \"vim:select-inside-word\"\n```\n\nWe want a solution that supports the following behavior:\n- If we type 'v' and wait N ms, it puts us in visual mode.\n- If we type 'v i w' we enter visual mode and select inside the current word.\n- If we type 'v i c e' we never enter visual mode and instead play the miami vice episode. If we wait too long to type the 'e' we enter visual mode.\n- If we type 'v i a' we enter visual mode.\n\nHere is a rough outline of how the algorithm could work in the keymap:\n- When we get a keystroke, we push it onto a queue.\n- Then we check what commands have a prefix matching the currently enqueued keystrokes.\n- When the queue unambiguously matches a command, we execute it and clear the queue.\n- When there is ambiguity between multiple commands for the current prefix, we put the keymap into a _pending state_.\n  - If the pending state times out, we temporarily disable the longest ambiguous bindings and replay the queue. See below for more info about the replay.\n- If the set of ambiguous bindings includes an exact match, we set a timeout for the pending state.\n- Otherwise, the next keystroke terminates the pending state. To terminate the state:\n  - We push the newest keystroke to the queue and look for matches again.\n  - If we are again ambiguous, we put the keymap back into a pending state.\n  - If we have a single match, we clear the queue and execute it.\n  - If we match nothing, we temporarily disable the longest of the ambiguous bindings that led to the current pending state, then replay the keystrokes\n  - If during the replay we again get into an ambiguous state, we disable the next-longest ambiguous bindings and replay again.\n  - If during the replay we don't find a matching binding, we abort the replay.\n. I added a clarifying point about what to do when we time out of a pending state. I think the case you're describing would play out as follows:\n- `v` is pressed. We go into a pending state and don't go into visual mode.\n- `i` and `c` are pressed, putting us in a new pending mode due to the ambiguity with `v i c e`\n- We time out, disabling the longest binding (`v i c e`) and replay the queued keystrokes.\n  - `v` is replayed. It is now unambiguous so we go into visual mode.\n  - `i` and `c` are replayed, this time in visual mode, causing us to select your pretend text object.\n\nTrue, we don't enter visual mode right away when there's ambiguity, but this is exactly how vim behaves. For quick keystrokes i think it will barely be noticeable.\n. @bhuga There's no default binding, but when I cooked up a contrived ambiguous binding, that's what happened in vim.\n. I'm going to implement this in the keymap. Started working on some cleanup yesterday and will continue today. Can't make any precise promises, but we should have this cleared up fairly soon.\n. This should be fixed with the next release of Atom now that the keymap has been rewritten. It's also been [open sourced](https://github.com/atom/atom-keymap) for those who are interested or find issues with it.\n. You're right. This is going to take further thought. Does vim basically undo the insertion of the `j` when it figures out you're triggering a binding?\n. That makes sense. We're really close with the replay behavior, but we're messed up by the fact that input events are handled separately from keydown events by the browser. So we need to be able to replay a keystroke in a way that also produces an input event. I'm not even sure that possible in a straightforward way, but we can probably figure out a workaround.\n. What do you have in mind? One possibility is to explore making the keymap manager more knowledgable about handling textual input. It's actually fairly nuanced, and other components may want to benefit from this facility. But handling the textinput events is somewhat entangled with the editor's update lifecycle, so I'm not 100% sure how easy it will be to extract. Worth exploring for sure.\n. Something like that might work, but there would be more to the story. Let me sketch out my mental model for handling an input event with a text editor focused:\n- The editor has a hidden input element that receives focus whenever the editor is focused.\n- When the user types `j` in the input, it first emits a keydown event that bubbles up the DOM.\n- The workspace captures the keydown event and sends it to the keymap manager with `atom.keymaps.handleKeyboardEvent`.\n- In insert mode with `j k` bound to escape, the keymap manager finds a partial binding for `j`.\n\n### Today's Behavior\n\nHere's where things get problematic. Today, when we find any sort of match, we call `preventDefault` on the event. This short-circuits any further action by the browser, halting insertion of input into the hidden text box.\n\nWhen the keymap manager exits the pending state by seeing another character or hitting the timeout, it replays the keydown event associated with the `j` keystroke _internally_, but this does not result in a `textinput` event on the input box. The event is essentially discarded once it is matched in the keymap with respect to textual input.\n\n### Hypothetical Future Behavior\n\nHere's one idea for a solution. There may be better ones.\n- The user expresses their intent to have the keymap handle textual input by setting a `data-` attribute on the input field, like `data-manage-textinput`.\n- When the keymap detects a non-modified keystroke on a field that opts into textual input handling, it does not match it and instead waits for a subsequent `textinput` event.\n- When handling a `textinput` event, the keymap matches the keystroke against plain-character bindings just as it did for keydown events.\n- When a `textinput` event fails to match any bindings, whether initially or during replay, we emit a custom `managed-textinput` event on the input field (perhaps there's a better name).\n\nThis would enable plain keystrokes to be replayed that correctly result in input in the editor. All the logic that currently exists in the editor for handling the accented character menu, IME input, etc would need to be moved from the editor into the keymap manager for us to get away with this. There's a full implementation in the current editor view, and a partial but cleaner implementation in the new React-based editor component. We would need to be careful to cleanly slot in with the editor's DOM update when clearing the contents input field between events.\n\nIf anyone is interested in taking a stab at implementing this, I could definitely use help. Needless to say, any implementation would need to be test-driven to be merged. Otherwise I'll try to get to it soonish.\n. Well, we need to allow the `textinput` event to occur \"naturally\" because the OS and Chromium do a lot of work to interpret the input corresponding to a given keystroke. I suppose we could manually hand the event to the keymap manager in the editor and then only continue to process it if the default isn't prevented...\n- Editor receives a text input event for a `j`\n- We call `atom.keymaps.handleTextInputEvent` with the event.\n- The keymap has an ambiguous binding, it prevents default on the event.\n- We note the default prevention in the editor and abort processing of the event.\n- The timeout occours, and the keymap manager \"replays\" the input event on the text field.\n- The editor calls `handleTextInputEvent` _again_, but this time the default is not prevented and we proceed as normal.\n\nMight be nice because we don't have to introduce the `data-` attribute and the special event name.\n. I think I may take a stab at reimplementing this rather than catching this up with master. I may change my mind. Either way I'll be sure to credit you in the change log and reference this PR.\n. Looking at this now. Sorry for the delay.\n. This is looking pretty good. Thanks for taking care of these special cases. A couple minor adjustments but the code is pretty much ready to go other than that.\n. Looks beautiful, thanks!\n. Checking my understanding here: The `.` command can repeat any previous change command, right? Some of these commands are logical in nature, like \"join lines\". Repeating the last insert mode excursion is just one of a category of commands that need to be repeatable.\n\nI'm thinking that `::commitTransaction` and `::transact` should return a transaction object that can be replayed at a different location in the buffer. So if the range of an operation in a replayed transaction is [[5, 10], [5, 13]], replaying the transaction at [7, 2] would run the same operation but change the range to [[7, 2], [7, 5]]. I'm not sure about marker positions. Perhaps we can treat them the same. What happens to cursors in vim when operations are replayed?\n\nSo I'm thinking of supporting this pseudocode:\n\n``` coffee\n@buffer.beginTransaction()\n# make changes\ntransaction = @buffer.commitTransaction()\n# later...\ntransaction.replay([7, 2]) # the position could be optional\n```\n. @bhuga Flag me down in chat any day this week and we can do some screen sharing. Thanks for working on this!\n. Okay, I added some comments in various places. Summary:\n- I'd like to see the facility for getting the most recent contiguous inserted text moved into `TextBuffer` so we don't rely on its implementation details. We should probably just have a method like `::getLastInsertedText` or something along those lines that behaves as desired.\n- I'd like to see the specs be a little more realistic than setting the text of the entire buffer. We want to exercise the transactions for example.\n. Thanks!\n. Shout out to @jroes for taking a stab at this in #152.\n. @danzimm I went ahead and merged master into your branch for you in [this PR](https://github.com/danzimm/vim-mode/pull/2).\n\nNow for your questions:\n\n> if I do dr it still waits to capture an extra character even though it's clear that r cannot be composed with d\n\nI think we're going to need to call `::canComposeWith` or something on the current top of the stack when pushing a new operation. We aren't always _ready_ to compose until we get additional input, such as composing `d` with a `t\"` motion, but we _can_ know if in principle it could be possible in the future. Operators that compose with motions can then disallow other operators from being pushed on top of themselves.\n\n> whether I should implement empty execute, select methods on it\n\nI don't think either of these methods belong on `Input`. It's inert, only designed to be composed with other smarter objects.\n\n> Personally I think we should have all operations pass through the opStack, thus keeping everything the way it is\n\nAgreed. The opstack is the backbone of our composition system. Using it may be more roundabout in certain cases, but it's easier to reason about as a single location for our essential state.\n. Sounds good.\n. It's just easier to find the file for a class if the name matches.\n\nAs for the idea of an operation needing a controller, I'm having a hard time understanding why the operation can't deal with the operational aspects of itself. Backing the view that gets input with a model makes more sense to me, but I just don't see why a \"find\" operation wouldn't do the actual finding once it determined what needed to be found. Is it just a file size issue? If that's the case I think we should split the file up. Are there other arguments for having a find operation not do the finding?\n. :tada:\n. I do think this is a core issue. I don't mind leaving this open for the time-being as a reminder.\n. I'm rewriting a lot of the editor rendering, so it's going to be a bit but I will take this into account. I'm concerned that doing this from the outside could impact performance.\n. Why'd you close it? Just in anticipation of the new React-based editor being ready for prime time or because we've implemented a fix in the Vim package itself?\n. I've created https://github.com/atom/atom-keymap/issues/16 to track the integration of `textinput` events with multi-keystroke bindings. Fixing that still won't allow for multi-key chords, but at least provides better support for the typical `j k` escape bindings.\n\nI've also created https://github.com/atom/atom-keymap/issues/17 to track support for chords, which is more sophisticated. In time, this is all reasonable, but I personally won't be able to get to it until our plans for the editor renderer are more stable.\n. We've had some other issues with keyboard event translation on Linux that @kevinsawicki addressed about a month ago in atom/atom-keymap#10. I'm wondering if this could be related. Perhaps there were other erroneous cases that weren't address in that PR?\n. @bhuga I'm planning on adding a marker view API into core that can be rendered by the new editor. Basically you'll add a marker associated with HTML attributes, and the editor will take care of rendering divs with the specified attributes for you based on the current position of the marker. I don't think we should add any more manual marker rendering before I finish that API.\n. /cc @maxbrunsfeld\n. Uninstalling and reinstalling makes sense because vim-mode probably doesn't properly implement `.deactivate`.\n. You'll probably need to put the editor in a wrapper div with the `.platform-x` class and attach that. It's normally on the workspace but it would be nice to avoid the overhead of attaching the entire workspace.\n. Looking.\n. I can't reproduce it either on master. How the heck is `Input` getting pushed onto the stack without anything beneath it?\n. I would like to just check the location of the cursor whenever it moves using the `cursors-moved` event emitted by the `Editor` model and the cursor it back one character if we're in insert mode and it reaches the end of the line. That would work with every possible way you can move the cursor, rather than addressing it on a case-by-case basis. We'll be switching editor renderers soon, so I'm reluctant to introduce explicit dependencies on view code.\n. It could be a few more days before we flip the default, but I'd like to merge this in sooner if that's okay so we can get people to use vim-mode with React before we switch.\n. Ping me ASAP if there's any issues.\n. This is a really tricky situation. The thing is that the keyboard events bubble, so we match selectors against every element on the path between the target of the keyboard event and the root of the document, looking for matching bindings. Because selectors are evaluated freshly on each element of the bubble path, there's no way to address this at the selector level.\n\nI've added the best feature I can think of to deal with this situation. It's a new `abort!` directive you can use in place of the command in bindings to stop the bubbling process. This combination should now work:\n\n```\n'.workspace':\n  ', t': 'fuzzy-finder:toggle-file-finder'\n\n'.editor.insert-mode':\n  ', t': 'abort!'\n```\n\nIf `', t'` is typed in insert mode, it just gets swallowed silently. But otherwise it bubbles to workspace and is handled. There may be unexpected emergent situations where this is too heavy handed an approach, but it should solve this one.\n. @jspahrsummers Feel free to merge at your discretion.\n. Thanks for the summary. This is next on my list after fixing a core issue.\n. Thanks @jspahrsummers! Pretty sure this is what vim does and it makes sense to me.\n. You could open a PR with a configuration option for it.\n. I would be open to adding this kind of feature to core, with a subword version of every word-oriented method. So there would be `moveCursorToNextWordBoundary` and `moveCursorToNextSubwordBoundary`.\n\nWe currently allow users to define `editor.nonWordCharacters`, which we use to build a word regex in `Cursor::wordRegex` (which should be renamed to `Cursor::getWordRegex`). We could allow users to define their own subword boundary regex. Presumably we'd use the end of the match, since JS regexes support lookahead but not lookbehind. We could also add the ability to fully customize the word regex for consistency. In both cases we'd provide a sane default.\n. @jspahrsummers Would you like to take a crack at it? It's probably easier to navigate than some of the vim-mode changes you've been looking at. I can't get to it with my full-time attention immediately because we have a long list of higher priority items.\n. Appreciate the ping.\n. Taking a look at this now.\n. Thanks for investigating this. I think all the problems stem from the original implementation using screen positions as if they were buffer positions. This caused problems with tab characters because they take up more space on screen than in the buffer. It also caused havoc when there were folds above the cursor. And of course soft wraps didn't work right because they cause screen rows to misalign with buffer rows. I created a simple PR referencing this one that switches the calculations to use buffer positions. Thanks for taking this on and bringing it to our attention and apologies for the delay in fixing it.\n. @DavidLGoldberg I didn't keep the specs because they were protecting against a regression that was only caused by using the totally incorrect approach for determining the cursor position. If you'd like to slot them in as extra cases in the existing specs for `l`, I'd be down to merge them. I don't want to add a whole new file though. I wouldn't have looked into this if you hadn't submitted the PR, so you still deserve credit for taking it on.\n. The build failure was caused by some trickiness I employed to end our reliance on jQuery for command registration. The code I added routes most jQuery event handlers through our custom command dispatcher but opts out of it for native event types. Unfortunately the `textInput` event wasn't included in the black list, and for some strange reason it's not being captured when dispatched programmatically. I added it to the black list in atom/atom@c0843d467d603566133c298ffe41b1541a9e45f8 so specs should be green again after 0.138.0 is released.\n. @isaachess I'm really sorry for the delay on reviewing this. I hear your feedback loud and clear. Vim-mode is a really important package, and we've not been giving it enough attention because we've been spread thin focusing on updating core APIs in order to get Atom ready for 1.0 status. The good news is that we're bringing on an additional team member on contract next week to help us with the workload, and this package will be one of the things we'll ask him to focus on.\n. @maxbrunsfeld For testing, you should probably just use `atom.workspace` and do a state based test, unless I'm missing something.\n\nI wonder if you could achieve this via normal API's by creating a new pane in the desired location, moving all the items, then destroying the old pane. Any reason that wouldn't work?\n. Ah, I see. You're right. This definitely expands the surface area of our panes API.\n\n@maxbrunsfeld I think we should think through how we could extend our official API to support this before merging this into an officially maintained package. Do you agree?\n\n@coolwanglu if you'd like to think through a more ideal official API for this we could entertain a PR on atom/atom. What if we exposed the axes as part of the API and provided `split|Up|Down|Left|Right` methods on the axis objects? That would enable you to create a pane relative to an axis without needing to construct the axis yourself.\n. @coolwanglu And if you call `splitRight` on a vertical axis, it would create a new containing horizontal axis automatically. The `split...` naming is starting to feel awkward when applied to axes however. Seems like `addPaneAbove`, `addPaneBelow`, `addPaneToLeft`, `addPaneToRight` might be clearer and apply better to both axes and panes. The `split...` method on axes would be a bit misleading since calling `splitUp` on a vertical axis wouldn't actually split anything... it would just add a new child at the top.\n\nWould you be interested in opening a PR on master with these changes? If you agree about the naming change, we would need to leave the old `split...` methods on pane but steer people toward the `addPane...` versions.\n. @coolwanglu Cool, thanks a lot!\n. This is fixed with 1.0.14.\n. @t9md Have you tried `Selection::expandOverLine`?\n. We could add an option to `selectLine`, but I found that behavior pretty surprising as a default and not matching the docs. What do you think? Sorry for the breakage I know it's frustrating.\n. Hi @franleplant, just bind `ctrl-w` to `tree-view:toggle-focus` in your keymap under the `atom-workspace` selector. You can learn more about keybindings here: https://atom.io/docs/latest/behind-atom-keymaps-in-depth.\n. ",
    "bronson": "Does this issue need to be fixed?  It seems like vim-mode is currently doing a great job of not allowing the cursor to ever reach the newline.  Do we need another layer of defense?\n\n(if not, a search on `vim-mode#2` reveals a little unused code that can be removed)\n. aha, clicking can place the cursor over the newline.  Very few vimmers will notice.  :)  Anything else?\n. @flyingfisch you're too modest (: https://github.com/atom/vim-mode/commit/40e7f3d6fea306063e6249953954c0d873f345de\n\nDoes it make sense to close this in favor of opening bugs on ex-mode?  Or is there anything that still needs to be tracked here?\n. Agreed, is there anything left to implement?\n. Looks like g~~, gUU, and guu are the only remaining ones to be implemented.\n. For others who are bugged by this, hitting Cmd-F Esc works.  That focuses the Find window then dismisses it.  Not elegant but I can live with it.\n. I guess this is the sort of thing you invite when you format your changelog in markdown.  :)\n\n:+1: \n. Agreed, I can't reproduce this.\n. It does if focus is in the search box.  If you're hitting Esc and it's not going away, hit Cmd-F and then Esc.\n. Atom already does this, doesn't it?  Can you give some steps to show where Atom gets this wrong?\n. It already does.  To reproduce: cmd-n to create a new file, hit tab, then hit return.  Your new line is at the same indent as the previous.  I also see this working in JS and Ruby.\r\n\r\nCan you describe steps to reproduce a failure?. There was this issue, but it was quite a while ago: https://github.com/atom/atom/issues/8013\r\n\r\nAnd, I should mention: this feature is in Atom, not just vim-mode.. You're welcome, glad it was an easy answer.\r\n\r\nAnd, really, someone could close this issue.  :). vim just ignores tab in normal mode, right?  would the desired fix be to make vim-mode ignore tab too?\n\nI can't seem to reproduce moving too far when hitting tab in insert mode...  Does it happen when vim-mode is the only 3rd party package enabled?\n. It was replaced by windows.md: https://github.com/atom/vim-mode/commit/6166a4ceaa2e8d94667ab5cbbf78340b3af63353\n\nDoes anything link to splits.md anymore?  I don't see anything when grepping the repo.\n. This appears fixed?  0.200.0 and 0.48.0 work as described.\n. @hos, just curious, does it work now?\n. I agree 100%.  I think Vim got this wrong.  Would love to see vim-mode stay in visual mode.\n. I take back my comment.  While I _personally_ would like to see the visual selection stay, I also think that is too big a departure.  vim-mode is about providing a familiar finger-feel.\n\nSo, my opinion: would love to see it work like Vim.  Then, if anybody still cares, we can start discussing how to provide the alternative behavior in another issue.\n\n@masukomi \n\n> I had to go and figure out how to make it stop exiting visual mode every time I indented because it was driving me nuts.\n\nHow did you do that?\n. oop, sorry @flannelhead.  I was halfway done when you commented.\n. Happy to.  It's in vim-mode-next if anyone wants to try it out.\n. I can't reproduce either.  This is fixed?\n. #468, #516, and #645 have made the same observation.\n\nThere's been some effort to put block selection in Atom core.  When it happens, hopefully this issue will be closed: https://github.com/atom/atom/issues/2306\n. @probablycorey is this really an enhancement?  I thought the ehhancement label referred to vim-mode features, not other github issues labels.  :)\n\nThat said, there don't seem to be many platform-specific bugs with vim-mode.\n. Vim doesn't do this so I don't see why vim-mode should.  (edit: wrong!)\n. I'm wrong, default vim does exactly this.  Apparently one of my vim plugins changed it.  No desire to figure out which one, but a much stronger desire to lighten up my .vimrc....\n\nSo, I agree :+1: let's fix this :muscle:\n. Fix was easy, https://github.com/atom/vim-mode/pull/677 is ready to merge\n. Ha, very cool.  Luckily this isn't necessary anymore: https://github.com/lloeki/ex-mode\n\nWell, ex-mode doesn't currently support :n, :p, or :A...  But it's very new.  How hard could it be?  :)\n. Is this a dupe of #221?\n. Good catch.  Seems like there's enough demand to include this command in vim-mode directly?  (or one like it, where maybe lastChar can be parameterized?)\n. Looks like this is fixed?  Discussion is in #627\n. Personally, I wouldn't expect the Vim keys to work in the settings dialog anyway.  If they did, then I would expect the Vim cursor, navigation, visual selection, etc to work too.\n. Might be similar to https://github.com/atom/vim-mode/issues/403\n\nAs mentioned there, if this binding doesn't open the about box, then it's probably worth filing an issue on the [atom keymap](https://github.com/atom/atom-keymap) repo.\n\n``` cson\n'*':\n  '\u00f8': 'application:about'\n```\n. This appears fixed.  It works on my 0.199.0: ctrl-f, ctrl-b, ctrl-d, and ctrl-u all appear to work the same way as vim.\n. Looks like this issue has been completely fixed.\n\nIt's easier to see the changes if whitespace is ignored: https://github.com/atom/vim-mode/pull/386/files?w=1\n. This appears fixed.  Close perhaps?\n. This appears fixed.  versions 0.200.0 / 0.48.0.\n. It's too bad this issue never got any comments.\n\nJump mode (super necessary!) works great on my machine by installing the cursor-history package and sticking this in my keymap:\n\n``` cson\n'atom-text-editor.vim-mode.command-mode':\n  'ctrl-i': 'cursor-history:next'\n  'ctrl-o': 'cursor-history:prev'\n```\n\nNear as I can tell, it's working 100%.  It would be nice to integrate it into vim-mode but it probably needs a bit more cooking first.\n. yes!  closing would be good.  :)\n. This appears fixed...  worth closing?\n. Saving on focus lost isn't good enough for your needs?  (see the autosave core package)\n\nJust hoping to avoid adding another option.\n. Looks like the problems addressed by this PR are completely solved in 0.54.0.  At least, `viwy` and `yiw` jump to the beginning of the selection (even when selecting in reverse), and `yy` `yj` etc leave the cursor in place.  Linewise works like Vim too.\n. I think this is no longer an issue?\n\nThere is a problem where the new pane appears scrolled to the top so the cursor isn't initially onscreen, but a quick scroll shows that it's there.  This isn't specific to vim-mode (I don't think!).\n. Similar to discussion in #653, this is probably best implemented by adding a hook to vim-mode, then doing the highlighting in a separate plugin.\n. This sure looks fixed to me.  Are there any more differences from Vim?\n. You want :hlsearch.  Me too.  Anyone without :hlsearch in their .vimrc is really missing out.\n\nThis issue basically a dupe of https://github.com/atom/vim-mode/issues/493.  Once :incsearch is implemented (and I hope it is), :hlsearch is just an additional baby step.\n. Also related, https://github.com/atom/vim-mode/pull/224 is a pull request that implemented :hlsearch but it wasn't future-proof.  Hoping someone revisits it.\n. Things have gotten a fair bit faster since this PR was filed.  I figured I'd run this test again...\n\n#### Test\n- `git clone bronson/vim-mode` # (to get the rebased [lazy loading](https://github.com/bronson/vim-mode/commits/lazy-loading) branch)\n- `apm link vim-mode`\n\nNow, to perform the test, I launched Atom, opened timecop, and recorded vim-mode's startup time.  I ran the following commands alternately so each startup was very warm.\n- `git checkout lazy-loading; sleep 0.5; atom .`\n- `git checkout master; sleep 0.5; atom .`\n\n#### Results\n\n| Lazy | Master |\n| --- | --- |\n| 19ms | 30ms |\n| 18ms | 30ms |\n| 18ms | 31ms |\n\nStable and definitive: on my machine, this technique saves 10ms / ~30%.\n\n#### Conclusion\n\n18ms is worthy of a gold `highlight-warning` and 30ms is the red `highlight-error`.  This PR might get vim-mode out of the doghouse it shares with status-bar.\n\nThat said, I agree with @maxbrunsfeld: every time I open my editor, I'm going straight into a Vim window.  For me, all this patch does is reorder the load process.  It doesn't actually save any real-world time.  Doesn't seem worth it.\n. This functionality appears to be in vim-mode now.  `v` enters visual mode, `v` again exits and leaves the cursor at the last position.\n\nIn addition, @maxbrunsfeld's request appears to work too.  `v` starts plain visual, `V` converts to linewise, and `v` back to regular.  Cursor remains in the correct position at all times.\n\nThere's one minor bug that I can tell, probably worth opening a new issue for: put the cursor in the middle of the line, hit V to start linewise, then V to end.  The cursor ends up at the end of the line, but in Vim it doesn't move.\n\nBut I think this PR is completely addressed?\n. Yes, this is a big one.  I don't think there's a need to implement a new keybinding and behavior like the incremental-search package.  Just make / work like vim and highlight the search results as you type.  (vim with :insearch set of course)\n. Sounds like this isn't a problem anymore...  consider closing this issue?\n. This is an interesting problem.  `ctrl-shift-w`, `ctrl-shift-b`, `ctrl-shift-f`, `alt-shift-b`, `alt-shift-f`, `ctrl-shift-e`, `ctrl-shift-a` are some of the other selection key combinations that should clear the stored keystrokes.\n\nAlso, `c` `alt-b` `c` fails.  It should move to the beginning of the word and resume changing.  Also `alt-f`, `cmd-right`, `cmd-left`, `cmd-up`, `cmd-down`, and just about any Atom navigation key.\n\nalso `c` `cmd-j` `c`, and all the sublime edit commands, like `ctrl-T`, `alt-backspace`, `alt-delete`, etc.\n\nMaybe any non-vim-mode key needs to clear the stored keystrokes?\n. I don't understand.  Ctrl-R redoes an edit, the opposite of undo, and it seems to work fine.  (?)\n. this is in master, can be closed.  :fireworks: \n. I resurrected this branch to evaluate it: https://github.com/bronson/vim-mode/commits/prefix-char\n\nIt looks like https://github.com/atom/vim-mode/pull/582 has blown it away.  It would probably be easier to rewrite the patch than to resolve the merge conflicts.\n\nI don't understand why this was never reviewed.  :(\n. I don't quite get it...  Stock vim doesn't beep when you've exhausted search history (renamed my ~/.vim directory and launched with `vim -u /dev/null` so I think it's stock).\n\nAtom doesn't seem to either.  (hitting cmd-f, then up-arrow until it stops...  no beep)\n\nThe patch looks great but is there a precedent for this feature?\n. This appears fixed?  They behave the same for me with the latest 0.200.0 and 0.48.0.\n. Any hope on getting the calls into Atom?  If not, is there a downside to merging this as-is for now?  It can always be updated when Atom provides the calls.\n\nAlso, if I can get an answer on how to write tests for #723, I'd volunteer to write tests for this one too.  They look like they'd be pretty similar.\n. Yeah, not working well would be a pretty big downside!  I haven't tried this patch -- it didn't look like it was very mergeable yet.  I notice the lack of move-window operations every day... guess it's time to get off my butt and set up paner.  (edit: works great!  but this functionality still belongs in vim-mode).\n. This is a dupe of #468\n. The behavior with Picture 3, where line 5 is blank, seems OK to me.  Have you tried Vim on the same file?  You might find Vim's behavior even worse.  :)  (it needlessly moves the cursor to the end of the line)\n\nYour second observation is correct: vim-mode leaves the cursor in the wrong spot when hitting Esc.  (moves it to the end of the previous line instead of leaving it at the beginning of the current line)  That definitely feels like a bug and might merit its own issue.\n. Oh, I agree.  I'm just trying to finish up a patch that makes vim-mode behave like Vim with dj and dk.  Unfortunately, it requires special-cases depending on whether the cursor is on the first or last line, it requires more code to implement.  But, as you say, finger feel is important.\n\nIf you feel strongly about something in vim-mode, your duty might include writing a spec.  :)  It's not too hard once you get the hang of it, and that would greatly improve the chances of someone coming along later and implementing the functionality.\n\n(i think...  i've only been using vim-mode for a few days so i could also be very wrong.)\n. I disagree that dw should wrap if you're at the end of the line.  Vim doesn't.  It just deletes the last character on the line.\n\nI absolutely agree that this needs to be fixed.  It affects me many times during the day.\n. Looks like this was fixed by fc24df5be327b1ff7643f648c5f68910231cc7a4?\n. Hi, here's a fix for the deprecation errors: https://github.com/bronson/vim-mode-next/commit/ff112292534e7b9d2a4a5fb52db2ba7a6da7a273\n\nLooks good.  With the deprecations fixed, I vote for merging it.\n. This PR introduces a bug: https://github.com/bronson/vim-mode-next/issues/4\n\nAlso, even though it's more Vim-ish, I'm personally not enthused about right-arrow in insert mode no longer wrapping to the next line...  Maybe make it be a setting?  `wrapLeftRightInsertMotion`, different from `wrapLeftRightMotion`?\n. Yes, I said that, but I take it back.  Sorry.  :)\n\nThat's how my workstation's Vim works -- normal mode doesn't wrap, insert mode does.  But I'm on my laptop now, and neither mode wraps.  Since I haven't noticed the difference until now (we're talking years probably...), I guess I don't care much after all.\n\nI'll get used to whichever way vim-mode settles on.  And I definitely vote to NOT implement whichwrap!\n. Fix looks great!  Added this PR back to latest vim-mode-next, 0.54.15.\n. This PR conflicts with autocomplete-plus.\n\nWhen the completions are shown, I hit down arrow to move to the next completion.  Instead, vim-mode:move-down-insert fires, turns off the autocompletions, and moves one line down in the buffer.\n\nPutting this in keymap.cson makes it work again but obviously isn't a fix:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'up': 'unset!'\n  'down': 'unset!'\n```\n. Yeah, the `not(.autocomplete-active)` clause might turn into `not(.autocomplete-active|.doc-hints-active|.weatherbug-active|.j-random-plugin|.etc)`.  (And autocomplete might suddenly want to start using left/right...)\n\nThat said, hopefully there won't be a lot of plugins popping up distractions while typing.  This could be good enough.\n\nFix is in v-m-n 0.55.1, looking good.\n. Does it make sense to just fix #565 here and do the cursor motion fixes in another PR?\n\nAlso, mouse doesn't seem to interrupt insert mode either...  Just wondering if you thought about it and found the fix was too ugly.\n. I hear that, first things first.  I was just wondering if that would be an easy way to make this PR smaller / easier to merge?\n\nMy random thinking...   I care a lot about fixing giant undos, but not much about forcing the insert cursor to stay on the same line.  (Actually, once insert-mode cursor positioning lands, I'm going to figure out a way to turn it off on my machine...  Turns out I really do like insert mode feeling just like Atom.  I know, I'm waffling like crazy on this one!)\n. Sorry, let me back up...   This PR does two things, right?\n- ensures arrow key motion (and hopefully mouse clicks) interrupt insert mode keeping undos small\n- restricts the cursor to the current line using keymaps now, and hopefully onDidChangeCursor position in the future\n\nJust curious if it would help mergeability to split these two behaviors into separate PRs.  (ordered of course -- one would have to be applied before the other)\n. Sure, vim-mode undo working just like Atom undo sounds fine to me.  Atom's undo grouping used to be atrocious but seems pretty good now.  As long as the entire insert session doesn't get grouped into a single undo, I'd probably be happy with just about anything.\n. This is so freaking great.  I love it.  Would like to see it merged asap.\n\nAny chance of using an underline cursor like gvim?  (gvim's normal mode is block cursor, insert mode is vertical caret, and replace mode is underline cursor... pretty handy)\n. Underline cursor is easy: https://github.com/bronson/vim-mode-next/commit/0b581321621916abfa71122d912d2fb591490807\n. Ugh, I may have made a merge mistake...  A few tests are failing and replace-mode-backspace doesn't work very well in vim-mode-next.  (it's hard to describe... you can see it trying to work)  Any chance you could glance at https://github.com/bronson/vim-mode-next/commits/replace-undo and see if it's an easy fix?\n\nOtherwise I can look later next week.\n. You're right, dunno how I did that.  Works great, thanks!  Like the underline cursor.\n. I think you can remove \"first cut of\" from the PR's title.  This thing is pretty darned mature now.  :)\n. This can be closed?  It appears to work in 0.200.0 / 0.48.0.\n. Yep, this appears fixed (0.200.0 / 0.48.0).  Close?\n. This works great.  I hope it gets merged.\n\nAnd I hope you figure out gUU and friends.  (I don't know how you'd do it either.)\n. This bug is irritating and the PR looks great.  I really hope this gets merged.\n. You're right.  `ddO` should be an equivalent command, but it gets the indentation correct.\n\nAnyone know why O works with indentation while cc doesn't?\n. I can't reproduce this.  Does it only occur when inserting Korean?\n. Looks fixed on current Atom and vim-mode.  Time to close this issue?\n\nI only see one difference to Vim: when near the bottom of the page, Vim's Ctrl-F extends the selection to the exact EOF (and scrolls everything off the top of the screen) while vim-mode's doesn't do anything.\n\nHowever, Vim isn't consistent.  It doesn't extend the selection to the top of the page when hitting Ctrl-B, so it acts the same as vim-mode's Ctrl-F and Ctrl-B.  Personally, I'd rather see consistent behavior than have 100% bug-for-bug compatibility with Vim.\n. Get this, Atom doesn't support block select yet: https://github.com/atom/atom/issues/2306\n\nApparently there's been some work but nothing usable yet.  If Atom 1.0 ships without block select, that would be downright embarrassing.\n. Also, this is a dupe of https://github.com/atom/vim-mode/issues/516\n. Must be.  As far as I can tell, dd behaves the same as vim when in the middle of the file.\n\n@elclanrs your videos are 404ing\n. I love this.\n\nPersonally I'd like the highlight to be briefer.  Might be worth making it a configurable setting?  That would also offer and obvious way to turn it off.\n\n`2yy` draws a box around the following line, making it look like only one line got yanked.  Hitting `p` shows that the yank worked correctly and it's the highlight that was misleading.\n\nAlso `yiw`, `yy`, etc only show underline highlights, not boxes.\n\nI notice that highlighting multiple-line selections can look weird:\n\n![bug3](https://cloud.githubusercontent.com/assets/1776/8494090/5331c222-2116-11e5-9d67-9b8c90c3cea8.gif)\n\nIf there's a way to make all of these boxes, so it's clear exactly what got yanked, I think this feature would be phenomenal.\n. Also, I have a similar testing issue in https://github.com/atom/vim-mode/pull/723.  (Well, I'm switching tabs so our tests are different, but being unable to figure out how to write UI tests is the same.)\n\nHoping @maxbrunsfeld has some time to offer a hint or two on the right way to do it.\n. @t9md did you mention on slack that you were having similar issues with quick-highlight?  Any chance this is an an easy fix?\n. @t9md I had the same thought as you when I first looked at this patch.  I only merged it just to be complete.  *I* sure didn't want it.\n\n... but I've grown to really like it.  Maybe I'm losing my edge.\n\nFor example, I immediately see that I should have typed `yaw` instead of `yiw`.  The days of navigating to the new buffer, pasting, seeing I got the yank wrong, navigating back to the original buffer, and trying again are gone!  Immediate feedback is really nice.\n\nIn general, I agree that vim-mode should only include core vim stuff.  But this is 3 lines of code...  As long as it's turned off by default, I like the idea of including it.\n\nA hook would be much better of course.\n. I removed this patch from vim-mode-next...  A hook is the right way to do this.\n. And, to completely hijack this PR, I hope whoever investigates adding highlight hooks keeps #432 (highlighting find-previous and find-next jumps) in mind too.\n. That's strange, I can't reproduce this.  I split a pane (both using ex mode's :split and the menu), hit dd, and both panes had the correct text.  Tried a few other motions too.\n\nDoes it happen when you only have vim-mode enabled, no other 3rd party plugins?\n. You mean `Ctrl-W v` right?  (lower case v)\n\nI still can't reproduce this.  :-/\n\nMy full typing sequence (spaces are just for readability\n\n```\ncmd-shift-N i abc <cr> def <cr> ghi <esc> Ctrl-w v Ctrl-w h 1G dd\n```\n\nFirst line gets deleted in both panes, everything looks good so far (except the 1G left the cursor one position too far to the right, the ol' cursor-outside-the-line bug)\n\n```\nu cc <esc> u dd\n```\n\nEvery edit worked exactly as intended.  What platform are you on?  (me: OSX and sometimes Linux)\n. Ha!  I can reproduce the last one.  That's weird!\n\nI fire up Atom with a single editor pane.  Hit `ctrl-w v` to split, then `cw`.  The whole thing gets ignored.  Now `ctrl-w ctrl-w` to switch to the original pane and `cw`.  A 'w' gets inserted into the editor.\n\nThat's some suboptimal behavior.\n. Except I can't reproduce any of that when vim-surround is disabled and Atom restarted.  Works perfectly now.\n\nAre you using vim-surround?\n. I reproduced it a few times, restarting Atom each time...  And now all of a sudden I can't reproduce it at all.  Both with and without vim-surround, I don't see it anymore.  So weird!  Looking forward to #762.\n. Just curious, doesn't it make sense for Atom core to implement blockwise selection first?  It looks like your technique will handle the text pretty well all on its own, but the visual appearance will be pretty difficult to get right.  (pure speculation, tell me if I'm wrong).\n\nThat said, since blockwise select isn't on Atom's 1.0 punchlist (!!), maybe it does make sense just to do it here.  It's an absolute requriement for any serious text editor.\n. There's this too: https://atom.io/packages/vim-mode-visual-block\n\nNo yank or paste yet.\n. Hi, cursor-history is a great plugin.\n\nCurious why you want Atom work exactly like vim.  For my fingers, cursor-history works well enough that I haven't been able to tell a difference.  Hooking into vim-mode sounds like a big and thankless task.  I haven't looked closely at vim-mode's code though.\n\nPersonally, I'd like to see this functionality in vim-mode itself -- they're very popular keypresses.  So I vote for 2: write PR.\n. OMG, you're right.  Starting vim without plugins makes dd behave the way you describe.\n\nNo idea which plugin did that to me, no desire to find out.  :)  Sorry for the noise.\n. Cute, I've never heard of this.  `:help i_CTRL-O` shows the (minimal) docs in vim: `execute a single command and return to insert mode`\n. True, and for ctrl-i and ctrl-o, you'll want to look at t9md's cursor-history package.  Works great.. Ah, insert-mode ctrl-o.  Sorry, read too fast.\r\n\r\nvim-mode-plus has a partial implementation for insert mode ctrl-o.  If it doesn't work as well as you'd like, definitely file an issue.. @maxbrunsfeld I agree with everything you said so I rebased that other stuff away.  That was getting a little silly.\n\nAnything more I can do?\n. So, you're asking for a // text object?\n\nI agree that, if Atom doesn't recognize a text object, it should probably do nothing.  Like vim.\n. Have you seen https://atom.io/packages/vim-surround?\n\nIf it's not in core vim, does it belong in vim-mode?\n. People are working on atom-to-atom package dependencies: https://github.com/atom/atom/issues/2412\n\nYou wouldn't like this?  Personally, it sounds OK to me...  Better than packages duplicating each others' code anyway.\n. You mean typing <kbd>V</kbd> when the tree view is focused would open the selected file in a vertical split?  Same for H and horizontal split?\n. Ah, I thought you were asking for nerdtreeish functionality.  You'd just like Vim's regular bindings to apply there.  Makes sense.\n\nThat invites the question of \"how much monkeypatching of other packages is acceptable for vim-mode?\"\n. One way to solve it might be to create a `tree-view-vim-mode` package that layers vim's keybindings on top of tree-view.  That at least isolates the monkeypatching into a small, easy-to-disable package.  Hopefully it wouldn't explode into an 2*n problem where there's a _package_-vim-mode for every installed package.  :)\n. I'm a little worried about the precedent this sets...  Should tree-view support ctrl-w ctrl-l?  How about / to search?\n\nThat said, I think this is great.  There doesn't seem to be any real downside.  :+1: \n. After further thought, I've changed my mind...  This is the perfect use for `~/.atom/keymap.cson`.\n\nI do think it does make sense to collect these ideas into a docs file and include them with vim-mode.  For now, I added an _Interesting Ideas_ section to [v-m-n's readme](https://github.com/bronson/vim-mode-next#interesting-ideas).\n. Confirmed and, agreed, this is irritating.\n. Well, #786 needs a lot of work before it's ready.  Even then, it's only meant to make cursor navigation match Vim's, not to fix this visual line problem.  (but it would be nice if it did!)\n. I think it looks great.  Definitely works better now.\n\nI notice that hitting undo after 'dap' or 'dip' leaves the cursor at the end of the deleted region.  Vim leaves the cursor at the beginning of the deleted region.  Might be worth opening a new issue for this though, not sure how deep this problem runs.\n\nIdeally you'd combine some of these commits so the changes are more obvious.\n. Dupes: #703, https://github.com/lloeki/ex-mode/issues/57\n\nHopefully https://github.com/lloeki/ex-mode/pull/59 lands soon.\n. This is a dupe of #562.  And I really do wish #573 would be merged or commented on.\n. Just happened to me on 1.0 / 0.54 / 0.5.1.  Undoing an :s.\n. @fullofcaffeine Leader is just a convention.  If you want <kbd>space</kbd> to be the mapleader, then adding this to keymap.cson should work:\n\n``` cson\n'atom-text-editor.vim-mode.command-mode':\n  'space b': 'fuzzy-finder:toggle-buffer-finder'\n  'space f': 'fuzzy-finder:toggle-file-finder'\n```\n\n@lmartins I don't understand...  It sounds like you want to map leader+c to be the same as c+i... but that doesn't save any keystrokes!  What is the exact vim mapping you want to emulate?\n. `:ChangeInsideSurrounding` doesn't exist in vim...  I guess you're using this Vim plugin?\n\nhttps://github.com/briandoll/change-inside-surroundings.vim\n\nIf so then yes, that will require writing an Atom plugin.  Which, I'm happy to say, is actually not too hard.\n. Does G work when pressing <kbd>shift-g</kbd>?  It's just capslock that causes it to go wrong?\n. absolutely right, works great for me.\n. agreed.  bug is 100% reproducible, fix looks great.\n. You're right, looks 100% reproducible.\n\nMaybe this issue belongs on https://github.com/lloeki/ex-mode?\n. works great.  would love to see this merged, I miss this a lot.\n. Love it!  This is how Vim works.\n. This is not so easy because vim-mode doesn't support c-^, and that's because it doesn't have the concept of an alternate file yet.  (from vim docs: \"mostly the alternate file is the previously edited file\").\n\nEmulating _count_<kbd>c-^</kbd> should be pretty easy...  For example, <kbd>3</kbd><kbd>c-^</kbd> would just switch to the third tab.  But that doesn't help this issue.  :)\n. No, wait!  It was easier than I thought.  I'm about to submit a PR that implements ctrl-^.  The code works, just writing the tests now.\n\nCan you explain how ctrl-U and ctrl-D don't work?  They work great for me.\n. You're right, ctrl-u and ctrl-d (and ctrl-f and ctrl-b) always move the cursor to column 0.  That's a bug worth reporting!\n. Very cool.\n\nI agree, the ctrl-e conflict is worrisome.  I really like that normal mode feels like Vim and insert mode feels like Atom.\n\nWould it make sense to give vim-mode a configuration option: \"Vim-Flavored Insert Mode\" and \"Atom-Flavored Insert Mode\"?  When there's a conflict, this setting would tell whose keybindings to prefer.\n\nI'd set mine to Atom-flavored.\n. Oh heck, users can always bind ctrl-e back to editor:move-to-end-of-line if they care.  At least this way there's a choice.\n\nMerged it to vim-mode-next.  This PR looks great.\n. Getting strange errors when running this patch in vim-mode-next: https://travis-ci.org/bronson/vim-mode-next/builds/69569825\n\nLooks related to the activateResources/getEditorElement mocking...  Maybe a timing issue?\n\nTo reproduce locally:\n\n```\ngit clone https://github.com/bronson/vim-mode-next\ngit checkout 0ad53fb\ncd vim-mode-next\napm install\napm test\n```\n\nVery curious what's going on.\n\nSince your patch works fine in vim-mode, feel free to ignore.  :)\n. DOH!!  Like this?  https://github.com/bronson/vim-mode-next/commit/654a9c3a97eceba08aaa19f21f6218ff58be9c3e\n\nYou're right, how did I miss that?  Sorry.  :)\n. Yep, that was it.  vim-mode-next 0.54.11 has ctrl-e/ctrl-y support again.\n. FWIW, my terrible attempts at writing tests (first by mocking views, second by actually trying to instantiate TextEditors) are here: https://github.com/bronson/vim-mode/commits/tab-motion-bad-tests\n\nClearly I need help.  :)\n. 1) because it's about window/tab navigation, not editing.  You gotta draw the line somewhere.  Editing is reasonably discrete and easy to test and, even then, vim-mode is a beast.\n\n2 & 3) you could turn this PR into a plugin.  The switching works great (in Atom 1.0 anyway, in theory it should still be fine).  I got discouraged when I couldn't figure out how to test it.\n\nFeel free to ask questions.\n. oops, didn't realize this PR was still open.  closing!\n. You actually implemented <kbd>gD</kbd> (find starting at beginning of file), right?  Or am I misreading the code?\n\nI guess a sane <kbd>gd</kbd> implementation would lean heavily on the <kbd>[[</kbd> motion, which vim-mode doesn't have yet.\n. I have the same thought but no idea how doable it would be.\n\nMaybe vim-mode could lean on grammars to provide its motions?  Then every language would be supported.  I imagine this can't be as easy as it sounds.  :)\n\nFor now it might make sense to provide gD and leave gd unimplemented?  Merge the stuff that works!\n. Yeah, that makes sense.  Nothing is ever easy.  I hope the goto package can solve this (filing a ton of PRs that normalize names?  that would be huge!)\n\nGiven how simplistic stock Vim's [[ and [] keybindings are implemented (just searches for { or } in the first column), maybe do that for now?  Worry about hooking other languages once that works.\n\nAnd I definitely vote for ignoring nroff paragraph/sections when implementing these motions!\n. Well, Vim's docs say:\n\n```\n]]                      [count] sections forward or to the next '{' in the\n                        first column.  When used after an operator, then also\n                        stops below a '}' in the first column.  exclusive\n                        Note that exclusive-linewise often applies.\n```\n\n(and run [`:help section`](http://vimdoc.sourceforge.net/htmldoc/motion.html#section) to see why you want to ignore roff...)\n\nVim's language plugins [remap the motion key bindings to be more useful](https://github.com/vim-ruby/vim-ruby/blob/deb3490a0ecca3d2163863bb49e5a3adff875387/ftplugin/ruby.vim#L165-L181).\n\nIt might make sense to follow Vim's lead here: have vim-mode implement whatever core Vim does, then attach language-specific functionality using something like per-grammar keymaps (except that [might not be so easy](https://discuss.atom.io/t/how-do-i-scope-a-keymap-to-a-grammar/3842)).  Or figure out some other technique to isolate the language-specific features.  Scattering language knowledge through vim-mode's code will get out of hand pretty quick!\n. To be more clear, I 100% agree with supporting coffee/python/ruby/etc, but I'm not sure language knowledge belongs in vim-mode's core.  Maybe it would go in a new package (`vim-mode-ruby`), or a new directory in vim-mode (`vim-mode/lib/languages/ruby`)?  Something like that.\n. This works great.  If you change the name of the issue to 'implement gD' then I think this PR is ready to go.  (until the per-language stuff makes things interesting of course).\n\nI added it to vim-mode-next.\n. Hi, looks good.\n\nAny chance of reusing [getCurrentWord](https://github.com/atom/vim-mode/blob/master/lib/motions/search-motion.coffee#L94-L110) instead of re-implementing it here?\n\nThat might require some refactoring...  but it might be worth it since Vim seems to need the current word quite a bit.\n. Looks excellent!!  Now it just needs some testing.  :)\n\nI can try to help with that if you want.  Got a few things I need to tie down first though.\n. Thanks @tmm1, that makes sense.\n\nSince the user asked for vim-mode, wouldn't she expect ctrl-p to be fuzzy-finder and ctrl-t to be return-from-tag?\n\nAnd, if vim-mode's normal mode doesn't get to override ctrl-t, then why does it get to override ctrl-u, ctrl-b, ctrl-d, ctrl-f, ctrl-w, ctrl-e, etc?\n\nI _definitely_ agree with not stomping on Atom keybindings when in insert mode!\n. So it's just a natural side effect of using multi-key keybindings?  You know of any hope for fixing it?  (just curious)\n\nBinding every keypress would be a brute-force way of getting there but that might get out of hand.\n\n``` cson\n'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n  'i x': 'vim-mode:reset-command-mode'\n  'i X': 'vim-mode:reset-command-mode'\n  'i y': 'vim-mode:reset-command-mode'\n  'i Y': 'vim-mode:reset-command-mode'\n  'i z': 'vim-mode:reset-command-mode'\n  'i Z': 'vim-mode:reset-command-mode'\n  etc etc etc\n```\n\nSorta like you did with ctrl-r.  :)\n. Yep, this is happening for me 100% of the time.  Here's the description I just wrote up thinking I'd found a new bug:\n- `viw` to select a word\n- hit `s` or `c` and replace it with 4 characters (or whatever).  Hit `esc`.\n- move to another part of the file\n- hit `.` to repeat the replacement\n\nwhat should happen: the 4 characters starting at the cursor are replaced by the new text\n\nwhat does happen: the cursor jumps back to the last character of the replaced text and deletes 4 more characters after that character. If you keep hitting `.`, 4 more characters keep disappearing until you reach the end of the line.\n. Exactly right @jacekkopecky and @ssfrr, that's what I meant.  Yes, the deleted text appears to be the length of the original selection as long as it doesn't cross a line break (for each line in the selection).\n\nA fix would be incredible, I would merge it into vim-next in a heartbeat.\n. Not quite sure what the labels on this issue mean...  It's been reproduced by 3 people, and there was enough information to fix it (#740).\n. Thanks @ssfrr.  The bright colors of the labels made it impossible for me to see the gray <sub>added</sub> and <sub>removed</sub>  :)\n. Wow!  And you ran `apm install` again?  I'll look...\n. It looks like fail() was added to Jasmine 2.1: https://github.com/jasmine/jasmine/commit/b1344d5c73c5e01a07e1ea435be3ed980f6db9de\n. Agreed!  No, I haven't done anything that I'm aware of.  And the TravisCI build passes.\n\nDo your version numbers match?\n\n```\n$ apm --version\napm  1.0.1\nnpm  2.5.1\nnode 0.10.35\npython 2.7.9\ngit 2.2.1\n$ atom --version\n1.0.0\n```\n\nBy setting breakpoints, I'm certain that I'm using the vendor/jasmine.js file from Atom's app.asar.  And, at line 2325 there's this:\n\n``` js\njasmine.Spec.prototype.fail = function (e) {\n  var expectationResult = new jasmine.ExpectationResult({\n    passed: false,\n    message: e ? jasmine.util.formatException(e) : 'Exception',\n    trace: { stack: e.stack }\n  });\n  this.results_.addResult(expectationResult);\n};\n```\n\nSo I'm as baffled as anyone, both why it fails and why it works.\n. Well at least all that makes sense.  Updated, thanks!\n. Also updated packages.json  to specify grim version `\"^1.2.1\"` instead of `\"1.4.1\"`\n. I get that.  It would be trivial to change it to print warnings into the Travis logs.  That would make the problem visible before actually using the feature.  Care to have that change?\n\n(A better technique might be to print the warnings from the call sites, rather than collecting and printing them at the end of the test, but I'd have to learn how that code worked first...  Tell me if you'd prefer that.)\n. Thanks @lee-dohm, I agree: uncloseable issues _suck_.  I've reworded this issue to make it clearer how to address it and put a condition on closing it.  Hope that's better?\n. #740 belongs near the top of the patches to be merged.  It soundly fixes a bug that I'd guess is tripping up a number of people.\n. Beware, there's a fungus among us: https://github.com/bronson/vim-mode-next/issues/4\n\nI'll figure out which PR caused this regression and report back.\n. It's #568.  I put it on the 'looks promising but' stack and pulled it out of vim-mode-next 0.54.13.\n. Yes!  Sorry, forgot.  Also struck out the two merged PRs.\n. Updates: #573 is even cooler now.\n\nAnd we have 8 more PRs ready to merge: #763, #764, #765, #766, #767, #770, #774, #777, #778  I won't add them to this issue though.  First things first!\n\nI notice the conflicts are increasing...   A few of these PRs fix some pretty fundamental things in vim-mode.  I can break them out into their own list if desired.  It would make sense to get them in soon so patch authors don't have to spend as much time rebasing.\n. The list of eligible PRs has moved to https://docs.google.com/document/d/14eNyQl2UJ70N1eYurDlS-qA2TQUkjQrXZfcmBv8_2vo/edit?usp=sharing\n\nRather than making a big update this post, I'd say the requirements to close it have been met.  All further work will be in the google doc.\n\nLots of merges... This has been a great week!\n. Very very impressive.  I've banged on it, can't find anything wrong.  As promised, it's in vim-mode-next 0.54.12.\n\nVim's charwise multi-line behavior feels like a bug.  I definitely vote for your current behavior.\n. Wow.  I'm using 0.54.15 too and I don't see that.  Both lines indent every time I hit `.`.\n\nSilly question, you sure vim-mode didn't re-enable itself somehow?\n. Nice!!  Yes, the missing newline on the last line must be the culprit.  I'm seeing it too.\n\nI've noticed that files that don't end in newlines trip up some other vim-mode operations too.\n. Yep, it's true.  Might be related to https://github.com/atom/vim-mode/pull/740 (but don't hold up 740 for this!).\n\nI was pleasantly surprised that nothing happens...  I was expecting wild deletions.  :)\n. Hi, the fix (by @jacekkopecky) should be in the vim-mode-next package.  If you want to try it (disable vim-mode, install vim-mode-next, and restart Atom), I'd be curious to hear the result.  You can disable vim-mode-next any time of course.\n. Also: `V` and then `>` to indent leaves the cursor in the wrong position.  The cursor should not move (so, the line moves under the cursor, but the cursor remains in whatever column it started).\n\nFound in #747\n. Wow, you're right!  I disabled my plugins and now the cursor jumps to the first nonblank line when indenting.  Criminy.\n\n```\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Oct 25 2014 23:10:43)\nMacOS X (unix) version\nIncluded patches: 1-258\n```\n\nProbably one of these plugins changes that behavior on my machine.  :(\n\n```\n~$ ls ~/.vim-old/bundle/\nArduino-syntax-file          vim-instant-markdown\nIndexedSearch                vim-irblack\nYAIFA                        vim-javascript\na.vim                        vim-less\nag.vim                       vim-pathogen\nbase16-vim                   vim-rails\nclam.vim                     vim-railscasts\nctrlp.vim                    vim-rake\nctrlp_bdelete.vim            vim-repeat\neditorconfig-vim             vim-ruby\ngundo.vim                    vim-ruby-block-conv\njQuery                       vim-runtest\npuppet-vim                   vim-slim\nsyntastic                    vim-snippets\ntagbar                       vim-speeddating\ntwilight                     vim-surround\nultisnips                    vim-textobj-comment\nvim-airline                  vim-textobj-parameter\nvim-bundler                  vim-textobj-rubyblock\nvim-closebuffer              vim-textobj-syntax\nvim-coffee-script            vim-textobj-uri\nvim-colors-solarized         vim-textobj-user\nvim-commentary               vim-textobj-variable-segment\nvim-crosshairs               vim-toggle-wrap\nvim-dispatch                 vim-tomorrow-theme\nvim-easy-align               vim-trailing-whitespace\nvim-eco                      vim-unimpaired\nvim-endwise                  vim-vinegar\nvim-expand-region            vim-visual-star-search\nvim-fugitive                 vim-vividchalk\nvim-git                      vim-yankstack\nvim-indent-object\n```\n\nSo, agreed.  NOTABUG.\n. Right.  `VV` and `V Esc` are buggy in vim-mode (not for long!), `v>` and `V>` aren't.  Their behavior is exactly the same as stock.\n\nI _am_ curious which plugin fixes it on my machine but not curious enough to actually figure it out.  Maybe if Vim had package-cop...\n. OK fine, I found it binary-search style.  Turns out it's a vim option:\n\n```\nset nostartofline\n```\n\nWhich, since it's not even in [sensible.vim](https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim), probably shouldn't be in vim-mode.  Ah well.\n\nindent-object is a pretty useful text object that selects surrounding lines at the same indent.  One day I'll bring it to vim-mode.\n. But then how would you add a 'j' or 'k' to the search?\n\nIf you don't mind skipping Js and Ks, it might be just a matter of keybindings.  Fuzzy Finder uses a SelectList view from atom-space-pen-views, so you just need to bind [core:move-up and core:move-down](https://github.com/atom/atom-space-pen-views/blob/master/src/select-list-view.coffee#L40-L46).\n\nBut I don't know of a way to create a binding that only applies when a SelectList is active...  Maybe ask on the forums?\n. In vim-mode-next 0.54.15.  It appears to work great, including repeating.\n\nThere's one difference from Vim: the cursor moves to the beginning of the line instead of remaining where it is.  I can open another issue to address that if desired.\n. I've never heard of this.  Is it a Vim plugin?\n\nSo, you would select some text, type `y` and, instead of yanking, the selection would be replaced by a letter y?  That doesn't sound terribly useful to me...  How would you change case / indent / surround / etc?\n. Oh, first typing `c` (change) or `s` (substitute) will do what you want.\n. But MacVim doesn't work like that.  I just tried it -- select some text and hit 'y'.  The text gets yanked instead of getting replaced by a 'y'.  You must have configured it somehow.\n\nIf Vim worked like this, how would you change the case of the selection?  Or insert text before it, or any of the thousand other useful things Vim can do on selections?\n. It's OK, that happened to me earlier today: https://github.com/atom/vim-mode/pull/568#issuecomment-119359818\n\nSure, filing a feature request for 'mswin' makes sense.\n\nIf you feel adventurous, you might be able to reproduce that feature by mapping all keys in visual mode to `vim-mode:change`: https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L263-L272  That way you only have to play with your own keymap.\n. Hm, I can't reproduce this.\n\nWhat type of file?  And does line wrapping affect it?\n\nIt's true, showing the keys typed in the status bar while in operator pending mode would be very cool.  And it would be more Vim-like.  That probably merits its own issue.\n. Might be related to https://github.com/atom/vim-mode/issues/716? You have ex-mode installed?\n. Just screwing around with the inspector, this seems to work:\n\n``` css\natom-text-editor.vim-mode.command-mode::shadow .editor-contents--private {\n    cursor: default;\n}\n```\n\nDunno if that's anywhere near correct.\n. I say, create a pull request and find out.  :)\n. I'm guessing this is the idiomatic way to do this:\n\n``` less\natom-text-editor.vim-mode.command-mode\n{\n  &::shadow,\n  &\n  {\n    .is-focused {\n      cursor: default;\n    }\n  }\n}\n```\n\nThink you could create a pull request to add this to styles/vim-mode.less?\n. But that, of course, fails when hovering the cursor over an unfocused pane.\n\n`.editor-contents--private` is the only selector I can find that allows us to override the default.  So here's my most recent guess:\n\n``` less\natom-text-editor.vim-mode.command-mode\n{\n  &::shadow,\n  &\n  {\n    .editor-contents--private {\n      cursor: default;\n    }\n  }\n}\n```\n. Yep check out #811. :)\n. In other words, show the operator-pending text in the status bar while typing.  :)\n\nI'd like that.\n. Looks great.  Maybe update the title, something about showing more vim-mode status in the status bar?  Not just what mode you're in.\n. Is this issue inspiring #783?  Just curious.\n. Strange.  Is your insert cursor always a block, or is it just sometimes?  Can you give some hints on how to reproduce this?\n\nDo you have anything in your styles.less that's screwing it up?  Does it happen when starting in safe mode?\n. I can suggest how I would approach this.  FWIW...\n\nFirst, figure out how https://atom.io/packages/goto-last-edit knows where the last edit is.  Also, glance through [general-motions.coffee](https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee) to see how motions work and if there's anything that is close to this in functionality.\n\nSecond, now that you know everything, write the motion, write some tests, and bind it to `'.`.\n\nThird, fire off a pull request.  Profit!\n\nThen, figure out how https://atom.io/packages/last-cursor-position works, make a motion for `''` and profit 2X.\n\nSounds like fun.  Ask on Slack or follow up here if you have questions.\n. Doh, right!  Rebased.\n. I had a problem with this PR in vim-mode-next.  `dd` didn't work anymore (just ignored).  Might be an issue with the way I merged it?\n\nHere's the bad tree: https://github.com/bronson/vim-mode-next/commits/no-dd\n\nAnd here's the revert that fixes it: https://github.com/bronson/vim-mode-next/commit/6105cea8ff7c4f9dcee14b3258ff85acde17fb8d\n. No specs failing, I emptied my keymap.  I'll try disabling extensions...\n\nYep!  It only happens when vim-surround is installed.  That makes sense.  I should have tried disabling extensions before reporting.  Sorry, getting lazy.  :)\n. Hm, vim-surround is starting to look notorious: https://github.com/atom/vim-mode/issues/657#issuecomment-122571442\n\nI wish I could mark packages as conflicting...  I don't want to break people using both vim-mode-next and vim-surround, but I don't want vim-surround's nasty keymap handling to hold up progress either...  Dunno.\n\nedit: ok, maybe it's not so nasty.  :)\n. Yeah, too bad this can't just be pinned on vim-surround.  Would have made things easy!  :)\n\nYou don't think it makes sense to just rework vim-surround's mappings to allow this, even though what they're doing now is OK?  If it makes things work and keeps the code clean then that seems reasonable...\n. This is terrific!  It's nice when the fix also deletes code scattered all over the place.\n\nMinor conflicts with https://github.com/atom/vim-mode/pull/591.  Both should be merged.\n. Looks great, but I kinda miss the blue outline telling me it's waiting for a key.  :)  First merge this, then maybe someone can think of an unobtrusive way of making the modes more visible...?\n. I see you use a light colorscheme!\n\nI really like the rectangle operator-pending cursor.  Seems like it merits its own PR.  I couldn't manage to get it working with my dark colorscheme though, the cursor just disappears when going operator pending.  Gotta fiddle with it later.\n. Just opened a speculative operator-pending PR in #779.\n. Edit: updated this PR to use the same cursor style as Vim and Jacek's code.  Obviously!\n\nI'll leave the .gifs...  rectangle cursor on the left, vim cursor on the right:\n\n![bug3](https://cloud.githubusercontent.com/assets/1776/8759827/adef89ee-2cb3-11e5-8613-35cd73b67620.gif) ![bug3](https://cloud.githubusercontent.com/assets/1776/8759835/f738aa5e-2cb3-11e5-9b82-64ab7400a740.gif)\n. Now we just need an expecting-a-character cursor that can be used for `f`, `t`, and register commands.\n. Agreed, updated.\n. Rebased to master.\n. Let me see if I understand...  The problem with #764 was that vim-mode thinks that it knows all possible key combinations...  So, if vim-surround adds a new combination, vim-mode wouldn't recognize it and cancel it before it's complete?\n\nWouldn't this fix suffer the same issue...?  It would beep every time it sees the unrecognized combo, even though vim-surround would do the right thing?\n. When I comment out the new code in vim-mode.coffee, the spec still passes.\n\nDoes it fail on your machine?\n. Cool!  It would be great to remove the mealy \"Currently, vim-mode requires soft line wraps to be disabled\" excuse from vim-mode's readme.\n\nThat said, I run vim-mode always operating on screen lines: https://github.com/bronson/dotfiles/blob/master/.vimrc#L160-L178  So, while I'm happy to see a patch that improves Vim compatibility, I'd probably find a way to turn it off for myself.  :)\n\nThink this should include the gh, gj, gk, and gl bindings too?\n. Well, at least one goal of this patch has been merged.  :)  https://github.com/atom/vim-mode/pull/797/files\n. Agreed, inputEditor seems nice and readable.  Updated!\n\nI also agree with avoiding rebases until things settle down.  That said, I already did vim-mode-next...  everything seems OK.   https://github.com/bronson/vim-mode-next/commit/80ad67c8c67bdd9c92cfbdda2267c923c03baeee\n. Wow, on my OSX it's even worse.  I `R` above an e, hit `alt-e` and `e` and crash!  Of course, everything works in insert mode.\n\n**Atom Version**: 1.0.3\n**System**: Mac OS X 10.10.4\n**Thrown From**: Atom Core\n\n### Stack Trace\n\nUncaught TypeError: Cannot read property 'split' of null\n\n```\nAt /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:756\n\nTypeError: Cannot read property 'split' of null\n  at Selection.module.exports.Selection.insertText (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/selection.js:451:28)\n  at /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:736:29\n  at /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:778:29\n  at TextBuffer.module.exports.TextBuffer.transact (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:751:18)\n  at TextEditor.module.exports.TextEditor.transact (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:1151:26)\n  at /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:772:24\n  at TextEditor.module.exports.TextEditor.mergeSelections (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:2017:18)\n  at TextEditor.module.exports.TextEditor.mergeIntersectingSelections (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:1987:35)\n  at TextEditor.module.exports.TextEditor.mutateSelectedText (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:770:19)\n  at TextEditor.module.exports.TextEditor.insertText (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:733:19)\n  at TextEditor.object.(anonymous function) [as insertText] (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/underscore-plus/lib/underscore-plus.js:77:27)\n  at HTMLDivElement.<anonymous> (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor-component.js:363:24)\n\n```\n\n### Commands\n\n```\n     -9:54.7.0 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -9:54.7.0 core:cancel (atom-text-editor.editor.mini.is-focused)\n     -9:54.7.0 blur (atom-text-editor.editor.mini.is-focused)\n     -9:54.5.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  6x -9:51.9.0 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:08.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:06.0 vim-mode:replace (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:06.0 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"metrics\",\n      \"exception-reporting\",\n      \"wrap-guide\",\n      \"welcome\",\n      \"background-tips\",\n      \"linter-rubocop\",\n      \"package-cop\",\n      \"linter-haml\",\n      \"smart-tab-name\",\n      \"linter-eslint\",\n      \"linter-jscs\",\n      \"linter-jshint\",\n      \"vim-mode\"\n    ],\n    \"themes\": [\n      \"one-dark-ui\",\n      \"oceanic-reef-syntax\"\n    ],\n    \"destroyEmptyPanes\": false\n  },\n  \"editor\": {\n    \"invisibles\": {},\n    \"autoIndentOnPaste\": false\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-ternjs, v0.7.1\ncolor-picker, v2.0.11\ncursor-history, v0.4.15\nfile-icons, v1.6.2\ngit-log, v0.4.1\nhighlight-selected, v0.10.1\nlanguage-haml, v0.21.0\nlinter, v1.2.4\nlinter-coffeelint, v1.0.1\nlinter-csslint, v0.0.14\nlinter-erb, v0.1.1\nlinter-ruby, v0.1.6\noceanic-reef-syntax, v0.6.0\nproject-find-navigation, v0.0.9\nreact, v0.12.6\nvim-mode-next, v0.57.0\nvim-mode-visual-block, v0.2.13\nvim-surround, v0.8.0\nwhite-cursor, v0.6.0\n\n# Dev\nNo dev packages\n```\n. Note that this affects `r` too.  Might be a separate issue.  How would the replace operator know that it needs to wait for two characters to arrive?\n. Strange, after that crash, Atom seems to be mostly behaving.\n\nInitial text: Mexico\nActual result: M\u00e9ico\nExpected result: M\u00e9xico\n\nSo the only issue I'm seeing now is that replace mode replaced two characters with one.\n\n@Valve did you type the final `e`?  I see your result after hitting `alt-e` and before hitting `e`.\n. I had the same misconception as Jacek.  Just making sure, this PR:\n- implements and documents v2> so it works the same as Vim\n- it also documents 2>> and >2>, which currently work in vim-mode\n\nMerged to vim-mode-next, looking good.\n. This is true of a lot of the motion commands, and it shouldn't be.\n\n@50Wliu I'd actually label this a bug.\n. I'm not sure TextObject extends motion...  Personally, I'd like to tell Motion which text object it should use.  For example, the `w` motion would use the Word text object.\n\nAlso, motion's base class might be totally independent.  Seems like motions like `f`, `t`, `ctrl-u`, and `ctrl-d` wouldn't use text objects at all.\n\nA text object would accept an initial starting point and then tell you how far backward or forward it extends.  For example, if the cursor is in the middle of vi_|_per, the Word text object knows that its range starts two characters before the cursor and three characters beyond.\n\nSo:\n\n(obviously we'd do a smarter job of handling multiple cursors and specifying the editor...  just trying to keep the code readable)\n\n``` coffee\nclass TextObject\n  computeStart(editor, initialPosition) -> { ... }\n\n  computeEnd(editor, initialPosition) -> { ... }\n\n  getRange: (editor, initialPosition) ->\n    new Range(@computeStart(editor, initialPosition), @computeEnd(editor, initialPosition))\n\n\nclass TextObjectMotion extends Motion\n  constructor: (@textObject, @backward=false) ->\n\n  execute: (editor) ->\n    curpos = editor.getCursorPosition()\n    if @backward?\n      newpos = @textObject.computeStart(editor, curpos) \n    else\n      newpos = @textObject.computeEnd(editor, curpos)\n    editor.setCursorPosition(newpos)\n\n  getRange: (editor) ->\n    curpos = editor.getCursorPosition()\n    if @backward?\n      new Range(@textObject.computeStart(editor, curpos), curpos)\n    else\n      new Range(curpos, @textObject.computeEnd(editor, curpos))\n```\n\nOperator would accept any object that supplies a getRange() function, so it can work with text objects, motions, and selections:\n\n``` coffee\nclass Operator\n  constructor: (@ranger) ->\n\n  execute: (editor) ->\n    @operate @ranger.getRange()\n```\n. Actually, it might clean things up if _all_ motions were implemented by text objects.  For example, a CharacterTextObject could be used to implement `f`, `F`, `t`, and `T`.  The object would extend forward and backward until another character of that type is found.\n\n``` coffee\nclass CharacterTextObject extends TextObject\n    constructor(@character) ->\n\n    computeStart: (editor, initialPosition) ->\n      editor.scanBackwardUntil initialPosition, @character\n\n    computeEnd: (editor, initialPosition) ->\n      editor.scanForwardUntil initialPosition, @character\n```\n\nNot sure though, this one might get weird.  To implement ctrl-u and ctrl-d, a WindowHeight text object would know the height of the current viewport?  And HalfWindowHeight for ctrl-f and ctrl-b?\n. I didn't consider the difference between `viw` vs `vaw`...  Do you think that `a` text objects could just wrap `i` objects, then bounce the ranges further out as appropriate?\n\n``` coffee\nclass AroundTextObject extends TextObject\n  constructor(@textObject) ->\n\n  computeStart: (editor, initialPosition) ->\n    innerpos = @textObject.computeStart editor, initialPosition\n    editor.scanBackwardUntil innerpos, isNotWhitespace  # actually, I don't think Vim includes leading whitespace?\n\n  computeEnd: (editor, initialPosition) ->\n    innerpos = @textObject.computeEnd editor, initialPosition\n    editor.scanForwardUntil innerpos, isNotWhitespace\n```\n\nSo you'd write an inner text object and get the corresponding around text object basically for free.\n\nUsing a base class or helper or something to make multiple cursors easy sounds great to me.\n. @t9md your Motion class ignores @direction?  does the endpoint go before the startpoint if @direction is reversed?  and sorry if anyone has @direction as a username :)\n. yep, https://github.com/atom/vim-mode/issues/546\n\nI have a branch around here somewhere that tried to fix this but it ended up spiraling out of control.  I keep meaning to go back and try again.\n. Looks like https://github.com/atom/vim-mode/issues/681 is another dupe.\n. Vim has quite a few normal-mode bindings that conflict with Atom's bindings on Windows and Linux (Macs, thanks to the command key, don't have as many).\n\nOften the way to fix this is to just go to insert mode.  Insert mode should give you almost the full Atom experience.\n\nThat said, if you'd rather have Atom's binding than Vim's, you can unset it.  For example, throw this in your keymap.cson file to use atom's ctrl-d behavior:\n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-d': 'unset!'\n```\n\nThis should probably go in the readme or faq or something...  Feel free to issue a documentation PR if you can find a logical place for it.\n. cc @jacekkopecky\n. If you double-click the last word on a line, the last character in the word doesn't get selected either.\n. Also: cmd-a to select all misses the last character in the file.  (when the file doesn't end with a newline)\n. Agreed, I miss it too.\n\nTechnically base vim doesn't get shift+} right either...  it needs Ruby, Python, CoffeeScript, etc language files to override the binding and add some smarts.\n\nI'm not sure vim-mode has a plan on how to allow per-language customization yet.  It's time to start that discussion.\n. While I'm not a fan of this:\n\n``` diff\n-        @activateNormalMode() if @mode is 'visual'\n+        @activateNormalMode() if @isVisualMode()\n```\n\n(I think `@mode is 'visual'` is more expressive than `@isVisualMode()`.  Simple, direct, no chance of side effects)\n\nI am a HUGE fan of this:\n\n``` diff\n+isOperator   = (obj) -> obj instanceof Operators.Operator\n+isTextObject = (obj) -> obj instanceof TextObjects.TextObject\n+isMotion     = (obj) -> obj instanceof Motions.Motion\n+isRepeat     = (obj) -> obj instanceof Prefixes.Repeat\n\n-        if @mode is 'visual' and (operation instanceof Motions.Motion or operation instanceof TextObjects.TextObject)\n+        if @isVisualMode() and (isMotion(operation) or isTextObject(operation))\n```\n\nThat is great!\n. Why close?\n. Yep, I agree.  Closing.\n. Atom allows you to put the cursor after the last newline in the file and Vim doesn't.  So, maybe the correct fix is to have normal mode disallow moving the cursor below the last line in the file?  Not sure.\n\nI notice non-vim-mode Atom doesn't allow triple-clicking the last line in the file either.  It has no trouble at all triple-clicking blank lines everywhere else.  Maybe this issue isn't restricted to vim-mode?\n. Actually, Vim tries to leave the cursor in the same column it started in.\n. Damn it, Vim is inconsistent.  This behavior depends on the `startofline` setting.\n\nhttp://stackoverflow.com/questions/8292742/vim-cursor-jumps-to-begining-of-the-line-after-buffer-switch\n\nEveryone sets `nocompatible`, right (or uses a `~/.vimrc` which is the same thing)?  If so, then it seems like most people would expect `nostartofline`... it's in vim-sensible.  But I guess this is open to discussion.\n. Drat, you're right.  Hope vim-mode receives that fix.  :)\n. It's a different issue.  #2 prevented the cursor from moving past the last character in the line.  This issue is because linewise visual mode currently locks the cursor to whatever column it started on (so the `$` in `V$%` is ignored).\n. This is fixed in vim-mode-plus.  It doesn't appear that anyone's currently trying to fix it in vim-mode, alas.\n. I really hope this can be merged.  A number of issues people have filed against vim-mode in the past two months are already fixed in vim-mode-plus.\n\nEveryone should know to try vim-mode-plus before they spend much time tracking and filing vim-mode issues.\n. Is this the workaround you need?\n\nhttps://gist.github.com/rastasheep/bfc8266eeb58b899054c\n\nIf so, it's more a problem with Atom or Lion than vim-mode.\n. Ah, gotcha.  I didn't know that you opened this issue on vim-mode-plus too: https://github.com/t9md/atom-vim-mode-plus/issues/446\n\nToo bad the workarounds didn't work.  Hope the Atom team can get to this one day.\n. Install https://atom.io/packages/open-this and copy the example keymap into yours.\n\nvim-mode is meant to just handle text editing.  To get the full Vim experience you'll need a few more packages.  Right now I'm using cursor-history, paner, project-find-navigation, vim-mode-plus, and vim-mode-plus-ex-mode.  Much like vim, this list of plugins will probably be quite personal.  :)\n. Does this issue need to be fixed?  It seems like vim-mode is currently doing a great job of not allowing the cursor to ever reach the newline.  Do we need another layer of defense?\n\n(if not, a search on `vim-mode#2` reveals a little unused code that can be removed)\n. aha, clicking can place the cursor over the newline.  Very few vimmers will notice.  :)  Anything else?\n. @flyingfisch you're too modest (: https://github.com/atom/vim-mode/commit/40e7f3d6fea306063e6249953954c0d873f345de\n\nDoes it make sense to close this in favor of opening bugs on ex-mode?  Or is there anything that still needs to be tracked here?\n. Agreed, is there anything left to implement?\n. Looks like g~~, gUU, and guu are the only remaining ones to be implemented.\n. For others who are bugged by this, hitting Cmd-F Esc works.  That focuses the Find window then dismisses it.  Not elegant but I can live with it.\n. I guess this is the sort of thing you invite when you format your changelog in markdown.  :)\n\n:+1: \n. Agreed, I can't reproduce this.\n. It does if focus is in the search box.  If you're hitting Esc and it's not going away, hit Cmd-F and then Esc.\n. Atom already does this, doesn't it?  Can you give some steps to show where Atom gets this wrong?\n. It already does.  To reproduce: cmd-n to create a new file, hit tab, then hit return.  Your new line is at the same indent as the previous.  I also see this working in JS and Ruby.\r\n\r\nCan you describe steps to reproduce a failure?. There was this issue, but it was quite a while ago: https://github.com/atom/atom/issues/8013\r\n\r\nAnd, I should mention: this feature is in Atom, not just vim-mode.. You're welcome, glad it was an easy answer.\r\n\r\nAnd, really, someone could close this issue.  :). vim just ignores tab in normal mode, right?  would the desired fix be to make vim-mode ignore tab too?\n\nI can't seem to reproduce moving too far when hitting tab in insert mode...  Does it happen when vim-mode is the only 3rd party package enabled?\n. It was replaced by windows.md: https://github.com/atom/vim-mode/commit/6166a4ceaa2e8d94667ab5cbbf78340b3af63353\n\nDoes anything link to splits.md anymore?  I don't see anything when grepping the repo.\n. This appears fixed?  0.200.0 and 0.48.0 work as described.\n. @hos, just curious, does it work now?\n. I agree 100%.  I think Vim got this wrong.  Would love to see vim-mode stay in visual mode.\n. I take back my comment.  While I _personally_ would like to see the visual selection stay, I also think that is too big a departure.  vim-mode is about providing a familiar finger-feel.\n\nSo, my opinion: would love to see it work like Vim.  Then, if anybody still cares, we can start discussing how to provide the alternative behavior in another issue.\n\n@masukomi \n\n> I had to go and figure out how to make it stop exiting visual mode every time I indented because it was driving me nuts.\n\nHow did you do that?\n. oop, sorry @flannelhead.  I was halfway done when you commented.\n. Happy to.  It's in vim-mode-next if anyone wants to try it out.\n. I can't reproduce either.  This is fixed?\n. #468, #516, and #645 have made the same observation.\n\nThere's been some effort to put block selection in Atom core.  When it happens, hopefully this issue will be closed: https://github.com/atom/atom/issues/2306\n. @probablycorey is this really an enhancement?  I thought the ehhancement label referred to vim-mode features, not other github issues labels.  :)\n\nThat said, there don't seem to be many platform-specific bugs with vim-mode.\n. Vim doesn't do this so I don't see why vim-mode should.  (edit: wrong!)\n. I'm wrong, default vim does exactly this.  Apparently one of my vim plugins changed it.  No desire to figure out which one, but a much stronger desire to lighten up my .vimrc....\n\nSo, I agree :+1: let's fix this :muscle:\n. Fix was easy, https://github.com/atom/vim-mode/pull/677 is ready to merge\n. Ha, very cool.  Luckily this isn't necessary anymore: https://github.com/lloeki/ex-mode\n\nWell, ex-mode doesn't currently support :n, :p, or :A...  But it's very new.  How hard could it be?  :)\n. Is this a dupe of #221?\n. Good catch.  Seems like there's enough demand to include this command in vim-mode directly?  (or one like it, where maybe lastChar can be parameterized?)\n. Looks like this is fixed?  Discussion is in #627\n. Personally, I wouldn't expect the Vim keys to work in the settings dialog anyway.  If they did, then I would expect the Vim cursor, navigation, visual selection, etc to work too.\n. Might be similar to https://github.com/atom/vim-mode/issues/403\n\nAs mentioned there, if this binding doesn't open the about box, then it's probably worth filing an issue on the [atom keymap](https://github.com/atom/atom-keymap) repo.\n\n``` cson\n'*':\n  '\u00f8': 'application:about'\n```\n. This appears fixed.  It works on my 0.199.0: ctrl-f, ctrl-b, ctrl-d, and ctrl-u all appear to work the same way as vim.\n. Looks like this issue has been completely fixed.\n\nIt's easier to see the changes if whitespace is ignored: https://github.com/atom/vim-mode/pull/386/files?w=1\n. This appears fixed.  Close perhaps?\n. This appears fixed.  versions 0.200.0 / 0.48.0.\n. It's too bad this issue never got any comments.\n\nJump mode (super necessary!) works great on my machine by installing the cursor-history package and sticking this in my keymap:\n\n``` cson\n'atom-text-editor.vim-mode.command-mode':\n  'ctrl-i': 'cursor-history:next'\n  'ctrl-o': 'cursor-history:prev'\n```\n\nNear as I can tell, it's working 100%.  It would be nice to integrate it into vim-mode but it probably needs a bit more cooking first.\n. yes!  closing would be good.  :)\n. This appears fixed...  worth closing?\n. Saving on focus lost isn't good enough for your needs?  (see the autosave core package)\n\nJust hoping to avoid adding another option.\n. Looks like the problems addressed by this PR are completely solved in 0.54.0.  At least, `viwy` and `yiw` jump to the beginning of the selection (even when selecting in reverse), and `yy` `yj` etc leave the cursor in place.  Linewise works like Vim too.\n. I think this is no longer an issue?\n\nThere is a problem where the new pane appears scrolled to the top so the cursor isn't initially onscreen, but a quick scroll shows that it's there.  This isn't specific to vim-mode (I don't think!).\n. Similar to discussion in #653, this is probably best implemented by adding a hook to vim-mode, then doing the highlighting in a separate plugin.\n. This sure looks fixed to me.  Are there any more differences from Vim?\n. You want :hlsearch.  Me too.  Anyone without :hlsearch in their .vimrc is really missing out.\n\nThis issue basically a dupe of https://github.com/atom/vim-mode/issues/493.  Once :incsearch is implemented (and I hope it is), :hlsearch is just an additional baby step.\n. Also related, https://github.com/atom/vim-mode/pull/224 is a pull request that implemented :hlsearch but it wasn't future-proof.  Hoping someone revisits it.\n. Things have gotten a fair bit faster since this PR was filed.  I figured I'd run this test again...\n\n#### Test\n- `git clone bronson/vim-mode` # (to get the rebased [lazy loading](https://github.com/bronson/vim-mode/commits/lazy-loading) branch)\n- `apm link vim-mode`\n\nNow, to perform the test, I launched Atom, opened timecop, and recorded vim-mode's startup time.  I ran the following commands alternately so each startup was very warm.\n- `git checkout lazy-loading; sleep 0.5; atom .`\n- `git checkout master; sleep 0.5; atom .`\n\n#### Results\n\n| Lazy | Master |\n| --- | --- |\n| 19ms | 30ms |\n| 18ms | 30ms |\n| 18ms | 31ms |\n\nStable and definitive: on my machine, this technique saves 10ms / ~30%.\n\n#### Conclusion\n\n18ms is worthy of a gold `highlight-warning` and 30ms is the red `highlight-error`.  This PR might get vim-mode out of the doghouse it shares with status-bar.\n\nThat said, I agree with @maxbrunsfeld: every time I open my editor, I'm going straight into a Vim window.  For me, all this patch does is reorder the load process.  It doesn't actually save any real-world time.  Doesn't seem worth it.\n. This functionality appears to be in vim-mode now.  `v` enters visual mode, `v` again exits and leaves the cursor at the last position.\n\nIn addition, @maxbrunsfeld's request appears to work too.  `v` starts plain visual, `V` converts to linewise, and `v` back to regular.  Cursor remains in the correct position at all times.\n\nThere's one minor bug that I can tell, probably worth opening a new issue for: put the cursor in the middle of the line, hit V to start linewise, then V to end.  The cursor ends up at the end of the line, but in Vim it doesn't move.\n\nBut I think this PR is completely addressed?\n. Yes, this is a big one.  I don't think there's a need to implement a new keybinding and behavior like the incremental-search package.  Just make / work like vim and highlight the search results as you type.  (vim with :insearch set of course)\n. Sounds like this isn't a problem anymore...  consider closing this issue?\n. This is an interesting problem.  `ctrl-shift-w`, `ctrl-shift-b`, `ctrl-shift-f`, `alt-shift-b`, `alt-shift-f`, `ctrl-shift-e`, `ctrl-shift-a` are some of the other selection key combinations that should clear the stored keystrokes.\n\nAlso, `c` `alt-b` `c` fails.  It should move to the beginning of the word and resume changing.  Also `alt-f`, `cmd-right`, `cmd-left`, `cmd-up`, `cmd-down`, and just about any Atom navigation key.\n\nalso `c` `cmd-j` `c`, and all the sublime edit commands, like `ctrl-T`, `alt-backspace`, `alt-delete`, etc.\n\nMaybe any non-vim-mode key needs to clear the stored keystrokes?\n. I don't understand.  Ctrl-R redoes an edit, the opposite of undo, and it seems to work fine.  (?)\n. this is in master, can be closed.  :fireworks: \n. I resurrected this branch to evaluate it: https://github.com/bronson/vim-mode/commits/prefix-char\n\nIt looks like https://github.com/atom/vim-mode/pull/582 has blown it away.  It would probably be easier to rewrite the patch than to resolve the merge conflicts.\n\nI don't understand why this was never reviewed.  :(\n. I don't quite get it...  Stock vim doesn't beep when you've exhausted search history (renamed my ~/.vim directory and launched with `vim -u /dev/null` so I think it's stock).\n\nAtom doesn't seem to either.  (hitting cmd-f, then up-arrow until it stops...  no beep)\n\nThe patch looks great but is there a precedent for this feature?\n. This appears fixed?  They behave the same for me with the latest 0.200.0 and 0.48.0.\n. Any hope on getting the calls into Atom?  If not, is there a downside to merging this as-is for now?  It can always be updated when Atom provides the calls.\n\nAlso, if I can get an answer on how to write tests for #723, I'd volunteer to write tests for this one too.  They look like they'd be pretty similar.\n. Yeah, not working well would be a pretty big downside!  I haven't tried this patch -- it didn't look like it was very mergeable yet.  I notice the lack of move-window operations every day... guess it's time to get off my butt and set up paner.  (edit: works great!  but this functionality still belongs in vim-mode).\n. This is a dupe of #468\n. The behavior with Picture 3, where line 5 is blank, seems OK to me.  Have you tried Vim on the same file?  You might find Vim's behavior even worse.  :)  (it needlessly moves the cursor to the end of the line)\n\nYour second observation is correct: vim-mode leaves the cursor in the wrong spot when hitting Esc.  (moves it to the end of the previous line instead of leaving it at the beginning of the current line)  That definitely feels like a bug and might merit its own issue.\n. Oh, I agree.  I'm just trying to finish up a patch that makes vim-mode behave like Vim with dj and dk.  Unfortunately, it requires special-cases depending on whether the cursor is on the first or last line, it requires more code to implement.  But, as you say, finger feel is important.\n\nIf you feel strongly about something in vim-mode, your duty might include writing a spec.  :)  It's not too hard once you get the hang of it, and that would greatly improve the chances of someone coming along later and implementing the functionality.\n\n(i think...  i've only been using vim-mode for a few days so i could also be very wrong.)\n. I disagree that dw should wrap if you're at the end of the line.  Vim doesn't.  It just deletes the last character on the line.\n\nI absolutely agree that this needs to be fixed.  It affects me many times during the day.\n. Looks like this was fixed by fc24df5be327b1ff7643f648c5f68910231cc7a4?\n. Hi, here's a fix for the deprecation errors: https://github.com/bronson/vim-mode-next/commit/ff112292534e7b9d2a4a5fb52db2ba7a6da7a273\n\nLooks good.  With the deprecations fixed, I vote for merging it.\n. This PR introduces a bug: https://github.com/bronson/vim-mode-next/issues/4\n\nAlso, even though it's more Vim-ish, I'm personally not enthused about right-arrow in insert mode no longer wrapping to the next line...  Maybe make it be a setting?  `wrapLeftRightInsertMotion`, different from `wrapLeftRightMotion`?\n. Yes, I said that, but I take it back.  Sorry.  :)\n\nThat's how my workstation's Vim works -- normal mode doesn't wrap, insert mode does.  But I'm on my laptop now, and neither mode wraps.  Since I haven't noticed the difference until now (we're talking years probably...), I guess I don't care much after all.\n\nI'll get used to whichever way vim-mode settles on.  And I definitely vote to NOT implement whichwrap!\n. Fix looks great!  Added this PR back to latest vim-mode-next, 0.54.15.\n. This PR conflicts with autocomplete-plus.\n\nWhen the completions are shown, I hit down arrow to move to the next completion.  Instead, vim-mode:move-down-insert fires, turns off the autocompletions, and moves one line down in the buffer.\n\nPutting this in keymap.cson makes it work again but obviously isn't a fix:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'up': 'unset!'\n  'down': 'unset!'\n```\n. Yeah, the `not(.autocomplete-active)` clause might turn into `not(.autocomplete-active|.doc-hints-active|.weatherbug-active|.j-random-plugin|.etc)`.  (And autocomplete might suddenly want to start using left/right...)\n\nThat said, hopefully there won't be a lot of plugins popping up distractions while typing.  This could be good enough.\n\nFix is in v-m-n 0.55.1, looking good.\n. Does it make sense to just fix #565 here and do the cursor motion fixes in another PR?\n\nAlso, mouse doesn't seem to interrupt insert mode either...  Just wondering if you thought about it and found the fix was too ugly.\n. I hear that, first things first.  I was just wondering if that would be an easy way to make this PR smaller / easier to merge?\n\nMy random thinking...   I care a lot about fixing giant undos, but not much about forcing the insert cursor to stay on the same line.  (Actually, once insert-mode cursor positioning lands, I'm going to figure out a way to turn it off on my machine...  Turns out I really do like insert mode feeling just like Atom.  I know, I'm waffling like crazy on this one!)\n. Sorry, let me back up...   This PR does two things, right?\n- ensures arrow key motion (and hopefully mouse clicks) interrupt insert mode keeping undos small\n- restricts the cursor to the current line using keymaps now, and hopefully onDidChangeCursor position in the future\n\nJust curious if it would help mergeability to split these two behaviors into separate PRs.  (ordered of course -- one would have to be applied before the other)\n. Sure, vim-mode undo working just like Atom undo sounds fine to me.  Atom's undo grouping used to be atrocious but seems pretty good now.  As long as the entire insert session doesn't get grouped into a single undo, I'd probably be happy with just about anything.\n. This is so freaking great.  I love it.  Would like to see it merged asap.\n\nAny chance of using an underline cursor like gvim?  (gvim's normal mode is block cursor, insert mode is vertical caret, and replace mode is underline cursor... pretty handy)\n. Underline cursor is easy: https://github.com/bronson/vim-mode-next/commit/0b581321621916abfa71122d912d2fb591490807\n. Ugh, I may have made a merge mistake...  A few tests are failing and replace-mode-backspace doesn't work very well in vim-mode-next.  (it's hard to describe... you can see it trying to work)  Any chance you could glance at https://github.com/bronson/vim-mode-next/commits/replace-undo and see if it's an easy fix?\n\nOtherwise I can look later next week.\n. You're right, dunno how I did that.  Works great, thanks!  Like the underline cursor.\n. I think you can remove \"first cut of\" from the PR's title.  This thing is pretty darned mature now.  :)\n. This can be closed?  It appears to work in 0.200.0 / 0.48.0.\n. Yep, this appears fixed (0.200.0 / 0.48.0).  Close?\n. This works great.  I hope it gets merged.\n\nAnd I hope you figure out gUU and friends.  (I don't know how you'd do it either.)\n. This bug is irritating and the PR looks great.  I really hope this gets merged.\n. You're right.  `ddO` should be an equivalent command, but it gets the indentation correct.\n\nAnyone know why O works with indentation while cc doesn't?\n. I can't reproduce this.  Does it only occur when inserting Korean?\n. Looks fixed on current Atom and vim-mode.  Time to close this issue?\n\nI only see one difference to Vim: when near the bottom of the page, Vim's Ctrl-F extends the selection to the exact EOF (and scrolls everything off the top of the screen) while vim-mode's doesn't do anything.\n\nHowever, Vim isn't consistent.  It doesn't extend the selection to the top of the page when hitting Ctrl-B, so it acts the same as vim-mode's Ctrl-F and Ctrl-B.  Personally, I'd rather see consistent behavior than have 100% bug-for-bug compatibility with Vim.\n. Get this, Atom doesn't support block select yet: https://github.com/atom/atom/issues/2306\n\nApparently there's been some work but nothing usable yet.  If Atom 1.0 ships without block select, that would be downright embarrassing.\n. Also, this is a dupe of https://github.com/atom/vim-mode/issues/516\n. Must be.  As far as I can tell, dd behaves the same as vim when in the middle of the file.\n\n@elclanrs your videos are 404ing\n. I love this.\n\nPersonally I'd like the highlight to be briefer.  Might be worth making it a configurable setting?  That would also offer and obvious way to turn it off.\n\n`2yy` draws a box around the following line, making it look like only one line got yanked.  Hitting `p` shows that the yank worked correctly and it's the highlight that was misleading.\n\nAlso `yiw`, `yy`, etc only show underline highlights, not boxes.\n\nI notice that highlighting multiple-line selections can look weird:\n\n![bug3](https://cloud.githubusercontent.com/assets/1776/8494090/5331c222-2116-11e5-9d67-9b8c90c3cea8.gif)\n\nIf there's a way to make all of these boxes, so it's clear exactly what got yanked, I think this feature would be phenomenal.\n. Also, I have a similar testing issue in https://github.com/atom/vim-mode/pull/723.  (Well, I'm switching tabs so our tests are different, but being unable to figure out how to write UI tests is the same.)\n\nHoping @maxbrunsfeld has some time to offer a hint or two on the right way to do it.\n. @t9md did you mention on slack that you were having similar issues with quick-highlight?  Any chance this is an an easy fix?\n. @t9md I had the same thought as you when I first looked at this patch.  I only merged it just to be complete.  *I* sure didn't want it.\n\n... but I've grown to really like it.  Maybe I'm losing my edge.\n\nFor example, I immediately see that I should have typed `yaw` instead of `yiw`.  The days of navigating to the new buffer, pasting, seeing I got the yank wrong, navigating back to the original buffer, and trying again are gone!  Immediate feedback is really nice.\n\nIn general, I agree that vim-mode should only include core vim stuff.  But this is 3 lines of code...  As long as it's turned off by default, I like the idea of including it.\n\nA hook would be much better of course.\n. I removed this patch from vim-mode-next...  A hook is the right way to do this.\n. And, to completely hijack this PR, I hope whoever investigates adding highlight hooks keeps #432 (highlighting find-previous and find-next jumps) in mind too.\n. That's strange, I can't reproduce this.  I split a pane (both using ex mode's :split and the menu), hit dd, and both panes had the correct text.  Tried a few other motions too.\n\nDoes it happen when you only have vim-mode enabled, no other 3rd party plugins?\n. You mean `Ctrl-W v` right?  (lower case v)\n\nI still can't reproduce this.  :-/\n\nMy full typing sequence (spaces are just for readability\n\n```\ncmd-shift-N i abc <cr> def <cr> ghi <esc> Ctrl-w v Ctrl-w h 1G dd\n```\n\nFirst line gets deleted in both panes, everything looks good so far (except the 1G left the cursor one position too far to the right, the ol' cursor-outside-the-line bug)\n\n```\nu cc <esc> u dd\n```\n\nEvery edit worked exactly as intended.  What platform are you on?  (me: OSX and sometimes Linux)\n. Ha!  I can reproduce the last one.  That's weird!\n\nI fire up Atom with a single editor pane.  Hit `ctrl-w v` to split, then `cw`.  The whole thing gets ignored.  Now `ctrl-w ctrl-w` to switch to the original pane and `cw`.  A 'w' gets inserted into the editor.\n\nThat's some suboptimal behavior.\n. Except I can't reproduce any of that when vim-surround is disabled and Atom restarted.  Works perfectly now.\n\nAre you using vim-surround?\n. I reproduced it a few times, restarting Atom each time...  And now all of a sudden I can't reproduce it at all.  Both with and without vim-surround, I don't see it anymore.  So weird!  Looking forward to #762.\n. Just curious, doesn't it make sense for Atom core to implement blockwise selection first?  It looks like your technique will handle the text pretty well all on its own, but the visual appearance will be pretty difficult to get right.  (pure speculation, tell me if I'm wrong).\n\nThat said, since blockwise select isn't on Atom's 1.0 punchlist (!!), maybe it does make sense just to do it here.  It's an absolute requriement for any serious text editor.\n. There's this too: https://atom.io/packages/vim-mode-visual-block\n\nNo yank or paste yet.\n. Hi, cursor-history is a great plugin.\n\nCurious why you want Atom work exactly like vim.  For my fingers, cursor-history works well enough that I haven't been able to tell a difference.  Hooking into vim-mode sounds like a big and thankless task.  I haven't looked closely at vim-mode's code though.\n\nPersonally, I'd like to see this functionality in vim-mode itself -- they're very popular keypresses.  So I vote for 2: write PR.\n. OMG, you're right.  Starting vim without plugins makes dd behave the way you describe.\n\nNo idea which plugin did that to me, no desire to find out.  :)  Sorry for the noise.\n. Cute, I've never heard of this.  `:help i_CTRL-O` shows the (minimal) docs in vim: `execute a single command and return to insert mode`\n. True, and for ctrl-i and ctrl-o, you'll want to look at t9md's cursor-history package.  Works great.. Ah, insert-mode ctrl-o.  Sorry, read too fast.\r\n\r\nvim-mode-plus has a partial implementation for insert mode ctrl-o.  If it doesn't work as well as you'd like, definitely file an issue.. @maxbrunsfeld I agree with everything you said so I rebased that other stuff away.  That was getting a little silly.\n\nAnything more I can do?\n. So, you're asking for a // text object?\n\nI agree that, if Atom doesn't recognize a text object, it should probably do nothing.  Like vim.\n. Have you seen https://atom.io/packages/vim-surround?\n\nIf it's not in core vim, does it belong in vim-mode?\n. People are working on atom-to-atom package dependencies: https://github.com/atom/atom/issues/2412\n\nYou wouldn't like this?  Personally, it sounds OK to me...  Better than packages duplicating each others' code anyway.\n. You mean typing <kbd>V</kbd> when the tree view is focused would open the selected file in a vertical split?  Same for H and horizontal split?\n. Ah, I thought you were asking for nerdtreeish functionality.  You'd just like Vim's regular bindings to apply there.  Makes sense.\n\nThat invites the question of \"how much monkeypatching of other packages is acceptable for vim-mode?\"\n. One way to solve it might be to create a `tree-view-vim-mode` package that layers vim's keybindings on top of tree-view.  That at least isolates the monkeypatching into a small, easy-to-disable package.  Hopefully it wouldn't explode into an 2*n problem where there's a _package_-vim-mode for every installed package.  :)\n. I'm a little worried about the precedent this sets...  Should tree-view support ctrl-w ctrl-l?  How about / to search?\n\nThat said, I think this is great.  There doesn't seem to be any real downside.  :+1: \n. After further thought, I've changed my mind...  This is the perfect use for `~/.atom/keymap.cson`.\n\nI do think it does make sense to collect these ideas into a docs file and include them with vim-mode.  For now, I added an _Interesting Ideas_ section to [v-m-n's readme](https://github.com/bronson/vim-mode-next#interesting-ideas).\n. Confirmed and, agreed, this is irritating.\n. Well, #786 needs a lot of work before it's ready.  Even then, it's only meant to make cursor navigation match Vim's, not to fix this visual line problem.  (but it would be nice if it did!)\n. I think it looks great.  Definitely works better now.\n\nI notice that hitting undo after 'dap' or 'dip' leaves the cursor at the end of the deleted region.  Vim leaves the cursor at the beginning of the deleted region.  Might be worth opening a new issue for this though, not sure how deep this problem runs.\n\nIdeally you'd combine some of these commits so the changes are more obvious.\n. Dupes: #703, https://github.com/lloeki/ex-mode/issues/57\n\nHopefully https://github.com/lloeki/ex-mode/pull/59 lands soon.\n. This is a dupe of #562.  And I really do wish #573 would be merged or commented on.\n. Just happened to me on 1.0 / 0.54 / 0.5.1.  Undoing an :s.\n. @fullofcaffeine Leader is just a convention.  If you want <kbd>space</kbd> to be the mapleader, then adding this to keymap.cson should work:\n\n``` cson\n'atom-text-editor.vim-mode.command-mode':\n  'space b': 'fuzzy-finder:toggle-buffer-finder'\n  'space f': 'fuzzy-finder:toggle-file-finder'\n```\n\n@lmartins I don't understand...  It sounds like you want to map leader+c to be the same as c+i... but that doesn't save any keystrokes!  What is the exact vim mapping you want to emulate?\n. `:ChangeInsideSurrounding` doesn't exist in vim...  I guess you're using this Vim plugin?\n\nhttps://github.com/briandoll/change-inside-surroundings.vim\n\nIf so then yes, that will require writing an Atom plugin.  Which, I'm happy to say, is actually not too hard.\n. Does G work when pressing <kbd>shift-g</kbd>?  It's just capslock that causes it to go wrong?\n. absolutely right, works great for me.\n. agreed.  bug is 100% reproducible, fix looks great.\n. You're right, looks 100% reproducible.\n\nMaybe this issue belongs on https://github.com/lloeki/ex-mode?\n. works great.  would love to see this merged, I miss this a lot.\n. Love it!  This is how Vim works.\n. This is not so easy because vim-mode doesn't support c-^, and that's because it doesn't have the concept of an alternate file yet.  (from vim docs: \"mostly the alternate file is the previously edited file\").\n\nEmulating _count_<kbd>c-^</kbd> should be pretty easy...  For example, <kbd>3</kbd><kbd>c-^</kbd> would just switch to the third tab.  But that doesn't help this issue.  :)\n. No, wait!  It was easier than I thought.  I'm about to submit a PR that implements ctrl-^.  The code works, just writing the tests now.\n\nCan you explain how ctrl-U and ctrl-D don't work?  They work great for me.\n. You're right, ctrl-u and ctrl-d (and ctrl-f and ctrl-b) always move the cursor to column 0.  That's a bug worth reporting!\n. Very cool.\n\nI agree, the ctrl-e conflict is worrisome.  I really like that normal mode feels like Vim and insert mode feels like Atom.\n\nWould it make sense to give vim-mode a configuration option: \"Vim-Flavored Insert Mode\" and \"Atom-Flavored Insert Mode\"?  When there's a conflict, this setting would tell whose keybindings to prefer.\n\nI'd set mine to Atom-flavored.\n. Oh heck, users can always bind ctrl-e back to editor:move-to-end-of-line if they care.  At least this way there's a choice.\n\nMerged it to vim-mode-next.  This PR looks great.\n. Getting strange errors when running this patch in vim-mode-next: https://travis-ci.org/bronson/vim-mode-next/builds/69569825\n\nLooks related to the activateResources/getEditorElement mocking...  Maybe a timing issue?\n\nTo reproduce locally:\n\n```\ngit clone https://github.com/bronson/vim-mode-next\ngit checkout 0ad53fb\ncd vim-mode-next\napm install\napm test\n```\n\nVery curious what's going on.\n\nSince your patch works fine in vim-mode, feel free to ignore.  :)\n. DOH!!  Like this?  https://github.com/bronson/vim-mode-next/commit/654a9c3a97eceba08aaa19f21f6218ff58be9c3e\n\nYou're right, how did I miss that?  Sorry.  :)\n. Yep, that was it.  vim-mode-next 0.54.11 has ctrl-e/ctrl-y support again.\n. FWIW, my terrible attempts at writing tests (first by mocking views, second by actually trying to instantiate TextEditors) are here: https://github.com/bronson/vim-mode/commits/tab-motion-bad-tests\n\nClearly I need help.  :)\n. 1) because it's about window/tab navigation, not editing.  You gotta draw the line somewhere.  Editing is reasonably discrete and easy to test and, even then, vim-mode is a beast.\n\n2 & 3) you could turn this PR into a plugin.  The switching works great (in Atom 1.0 anyway, in theory it should still be fine).  I got discouraged when I couldn't figure out how to test it.\n\nFeel free to ask questions.\n. oops, didn't realize this PR was still open.  closing!\n. You actually implemented <kbd>gD</kbd> (find starting at beginning of file), right?  Or am I misreading the code?\n\nI guess a sane <kbd>gd</kbd> implementation would lean heavily on the <kbd>[[</kbd> motion, which vim-mode doesn't have yet.\n. I have the same thought but no idea how doable it would be.\n\nMaybe vim-mode could lean on grammars to provide its motions?  Then every language would be supported.  I imagine this can't be as easy as it sounds.  :)\n\nFor now it might make sense to provide gD and leave gd unimplemented?  Merge the stuff that works!\n. Yeah, that makes sense.  Nothing is ever easy.  I hope the goto package can solve this (filing a ton of PRs that normalize names?  that would be huge!)\n\nGiven how simplistic stock Vim's [[ and [] keybindings are implemented (just searches for { or } in the first column), maybe do that for now?  Worry about hooking other languages once that works.\n\nAnd I definitely vote for ignoring nroff paragraph/sections when implementing these motions!\n. Well, Vim's docs say:\n\n```\n]]                      [count] sections forward or to the next '{' in the\n                        first column.  When used after an operator, then also\n                        stops below a '}' in the first column.  exclusive\n                        Note that exclusive-linewise often applies.\n```\n\n(and run [`:help section`](http://vimdoc.sourceforge.net/htmldoc/motion.html#section) to see why you want to ignore roff...)\n\nVim's language plugins [remap the motion key bindings to be more useful](https://github.com/vim-ruby/vim-ruby/blob/deb3490a0ecca3d2163863bb49e5a3adff875387/ftplugin/ruby.vim#L165-L181).\n\nIt might make sense to follow Vim's lead here: have vim-mode implement whatever core Vim does, then attach language-specific functionality using something like per-grammar keymaps (except that [might not be so easy](https://discuss.atom.io/t/how-do-i-scope-a-keymap-to-a-grammar/3842)).  Or figure out some other technique to isolate the language-specific features.  Scattering language knowledge through vim-mode's code will get out of hand pretty quick!\n. To be more clear, I 100% agree with supporting coffee/python/ruby/etc, but I'm not sure language knowledge belongs in vim-mode's core.  Maybe it would go in a new package (`vim-mode-ruby`), or a new directory in vim-mode (`vim-mode/lib/languages/ruby`)?  Something like that.\n. This works great.  If you change the name of the issue to 'implement gD' then I think this PR is ready to go.  (until the per-language stuff makes things interesting of course).\n\nI added it to vim-mode-next.\n. Hi, looks good.\n\nAny chance of reusing [getCurrentWord](https://github.com/atom/vim-mode/blob/master/lib/motions/search-motion.coffee#L94-L110) instead of re-implementing it here?\n\nThat might require some refactoring...  but it might be worth it since Vim seems to need the current word quite a bit.\n. Looks excellent!!  Now it just needs some testing.  :)\n\nI can try to help with that if you want.  Got a few things I need to tie down first though.\n. Thanks @tmm1, that makes sense.\n\nSince the user asked for vim-mode, wouldn't she expect ctrl-p to be fuzzy-finder and ctrl-t to be return-from-tag?\n\nAnd, if vim-mode's normal mode doesn't get to override ctrl-t, then why does it get to override ctrl-u, ctrl-b, ctrl-d, ctrl-f, ctrl-w, ctrl-e, etc?\n\nI _definitely_ agree with not stomping on Atom keybindings when in insert mode!\n. So it's just a natural side effect of using multi-key keybindings?  You know of any hope for fixing it?  (just curious)\n\nBinding every keypress would be a brute-force way of getting there but that might get out of hand.\n\n``` cson\n'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n  'i x': 'vim-mode:reset-command-mode'\n  'i X': 'vim-mode:reset-command-mode'\n  'i y': 'vim-mode:reset-command-mode'\n  'i Y': 'vim-mode:reset-command-mode'\n  'i z': 'vim-mode:reset-command-mode'\n  'i Z': 'vim-mode:reset-command-mode'\n  etc etc etc\n```\n\nSorta like you did with ctrl-r.  :)\n. Yep, this is happening for me 100% of the time.  Here's the description I just wrote up thinking I'd found a new bug:\n- `viw` to select a word\n- hit `s` or `c` and replace it with 4 characters (or whatever).  Hit `esc`.\n- move to another part of the file\n- hit `.` to repeat the replacement\n\nwhat should happen: the 4 characters starting at the cursor are replaced by the new text\n\nwhat does happen: the cursor jumps back to the last character of the replaced text and deletes 4 more characters after that character. If you keep hitting `.`, 4 more characters keep disappearing until you reach the end of the line.\n. Exactly right @jacekkopecky and @ssfrr, that's what I meant.  Yes, the deleted text appears to be the length of the original selection as long as it doesn't cross a line break (for each line in the selection).\n\nA fix would be incredible, I would merge it into vim-next in a heartbeat.\n. Not quite sure what the labels on this issue mean...  It's been reproduced by 3 people, and there was enough information to fix it (#740).\n. Thanks @ssfrr.  The bright colors of the labels made it impossible for me to see the gray <sub>added</sub> and <sub>removed</sub>  :)\n. Wow!  And you ran `apm install` again?  I'll look...\n. It looks like fail() was added to Jasmine 2.1: https://github.com/jasmine/jasmine/commit/b1344d5c73c5e01a07e1ea435be3ed980f6db9de\n. Agreed!  No, I haven't done anything that I'm aware of.  And the TravisCI build passes.\n\nDo your version numbers match?\n\n```\n$ apm --version\napm  1.0.1\nnpm  2.5.1\nnode 0.10.35\npython 2.7.9\ngit 2.2.1\n$ atom --version\n1.0.0\n```\n\nBy setting breakpoints, I'm certain that I'm using the vendor/jasmine.js file from Atom's app.asar.  And, at line 2325 there's this:\n\n``` js\njasmine.Spec.prototype.fail = function (e) {\n  var expectationResult = new jasmine.ExpectationResult({\n    passed: false,\n    message: e ? jasmine.util.formatException(e) : 'Exception',\n    trace: { stack: e.stack }\n  });\n  this.results_.addResult(expectationResult);\n};\n```\n\nSo I'm as baffled as anyone, both why it fails and why it works.\n. Well at least all that makes sense.  Updated, thanks!\n. Also updated packages.json  to specify grim version `\"^1.2.1\"` instead of `\"1.4.1\"`\n. I get that.  It would be trivial to change it to print warnings into the Travis logs.  That would make the problem visible before actually using the feature.  Care to have that change?\n\n(A better technique might be to print the warnings from the call sites, rather than collecting and printing them at the end of the test, but I'd have to learn how that code worked first...  Tell me if you'd prefer that.)\n. Thanks @lee-dohm, I agree: uncloseable issues _suck_.  I've reworded this issue to make it clearer how to address it and put a condition on closing it.  Hope that's better?\n. #740 belongs near the top of the patches to be merged.  It soundly fixes a bug that I'd guess is tripping up a number of people.\n. Beware, there's a fungus among us: https://github.com/bronson/vim-mode-next/issues/4\n\nI'll figure out which PR caused this regression and report back.\n. It's #568.  I put it on the 'looks promising but' stack and pulled it out of vim-mode-next 0.54.13.\n. Yes!  Sorry, forgot.  Also struck out the two merged PRs.\n. Updates: #573 is even cooler now.\n\nAnd we have 8 more PRs ready to merge: #763, #764, #765, #766, #767, #770, #774, #777, #778  I won't add them to this issue though.  First things first!\n\nI notice the conflicts are increasing...   A few of these PRs fix some pretty fundamental things in vim-mode.  I can break them out into their own list if desired.  It would make sense to get them in soon so patch authors don't have to spend as much time rebasing.\n. The list of eligible PRs has moved to https://docs.google.com/document/d/14eNyQl2UJ70N1eYurDlS-qA2TQUkjQrXZfcmBv8_2vo/edit?usp=sharing\n\nRather than making a big update this post, I'd say the requirements to close it have been met.  All further work will be in the google doc.\n\nLots of merges... This has been a great week!\n. Very very impressive.  I've banged on it, can't find anything wrong.  As promised, it's in vim-mode-next 0.54.12.\n\nVim's charwise multi-line behavior feels like a bug.  I definitely vote for your current behavior.\n. Wow.  I'm using 0.54.15 too and I don't see that.  Both lines indent every time I hit `.`.\n\nSilly question, you sure vim-mode didn't re-enable itself somehow?\n. Nice!!  Yes, the missing newline on the last line must be the culprit.  I'm seeing it too.\n\nI've noticed that files that don't end in newlines trip up some other vim-mode operations too.\n. Yep, it's true.  Might be related to https://github.com/atom/vim-mode/pull/740 (but don't hold up 740 for this!).\n\nI was pleasantly surprised that nothing happens...  I was expecting wild deletions.  :)\n. Hi, the fix (by @jacekkopecky) should be in the vim-mode-next package.  If you want to try it (disable vim-mode, install vim-mode-next, and restart Atom), I'd be curious to hear the result.  You can disable vim-mode-next any time of course.\n. Also: `V` and then `>` to indent leaves the cursor in the wrong position.  The cursor should not move (so, the line moves under the cursor, but the cursor remains in whatever column it started).\n\nFound in #747\n. Wow, you're right!  I disabled my plugins and now the cursor jumps to the first nonblank line when indenting.  Criminy.\n\n```\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Oct 25 2014 23:10:43)\nMacOS X (unix) version\nIncluded patches: 1-258\n```\n\nProbably one of these plugins changes that behavior on my machine.  :(\n\n```\n~$ ls ~/.vim-old/bundle/\nArduino-syntax-file          vim-instant-markdown\nIndexedSearch                vim-irblack\nYAIFA                        vim-javascript\na.vim                        vim-less\nag.vim                       vim-pathogen\nbase16-vim                   vim-rails\nclam.vim                     vim-railscasts\nctrlp.vim                    vim-rake\nctrlp_bdelete.vim            vim-repeat\neditorconfig-vim             vim-ruby\ngundo.vim                    vim-ruby-block-conv\njQuery                       vim-runtest\npuppet-vim                   vim-slim\nsyntastic                    vim-snippets\ntagbar                       vim-speeddating\ntwilight                     vim-surround\nultisnips                    vim-textobj-comment\nvim-airline                  vim-textobj-parameter\nvim-bundler                  vim-textobj-rubyblock\nvim-closebuffer              vim-textobj-syntax\nvim-coffee-script            vim-textobj-uri\nvim-colors-solarized         vim-textobj-user\nvim-commentary               vim-textobj-variable-segment\nvim-crosshairs               vim-toggle-wrap\nvim-dispatch                 vim-tomorrow-theme\nvim-easy-align               vim-trailing-whitespace\nvim-eco                      vim-unimpaired\nvim-endwise                  vim-vinegar\nvim-expand-region            vim-visual-star-search\nvim-fugitive                 vim-vividchalk\nvim-git                      vim-yankstack\nvim-indent-object\n```\n\nSo, agreed.  NOTABUG.\n. Right.  `VV` and `V Esc` are buggy in vim-mode (not for long!), `v>` and `V>` aren't.  Their behavior is exactly the same as stock.\n\nI _am_ curious which plugin fixes it on my machine but not curious enough to actually figure it out.  Maybe if Vim had package-cop...\n. OK fine, I found it binary-search style.  Turns out it's a vim option:\n\n```\nset nostartofline\n```\n\nWhich, since it's not even in [sensible.vim](https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim), probably shouldn't be in vim-mode.  Ah well.\n\nindent-object is a pretty useful text object that selects surrounding lines at the same indent.  One day I'll bring it to vim-mode.\n. But then how would you add a 'j' or 'k' to the search?\n\nIf you don't mind skipping Js and Ks, it might be just a matter of keybindings.  Fuzzy Finder uses a SelectList view from atom-space-pen-views, so you just need to bind [core:move-up and core:move-down](https://github.com/atom/atom-space-pen-views/blob/master/src/select-list-view.coffee#L40-L46).\n\nBut I don't know of a way to create a binding that only applies when a SelectList is active...  Maybe ask on the forums?\n. In vim-mode-next 0.54.15.  It appears to work great, including repeating.\n\nThere's one difference from Vim: the cursor moves to the beginning of the line instead of remaining where it is.  I can open another issue to address that if desired.\n. I've never heard of this.  Is it a Vim plugin?\n\nSo, you would select some text, type `y` and, instead of yanking, the selection would be replaced by a letter y?  That doesn't sound terribly useful to me...  How would you change case / indent / surround / etc?\n. Oh, first typing `c` (change) or `s` (substitute) will do what you want.\n. But MacVim doesn't work like that.  I just tried it -- select some text and hit 'y'.  The text gets yanked instead of getting replaced by a 'y'.  You must have configured it somehow.\n\nIf Vim worked like this, how would you change the case of the selection?  Or insert text before it, or any of the thousand other useful things Vim can do on selections?\n. It's OK, that happened to me earlier today: https://github.com/atom/vim-mode/pull/568#issuecomment-119359818\n\nSure, filing a feature request for 'mswin' makes sense.\n\nIf you feel adventurous, you might be able to reproduce that feature by mapping all keys in visual mode to `vim-mode:change`: https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L263-L272  That way you only have to play with your own keymap.\n. Hm, I can't reproduce this.\n\nWhat type of file?  And does line wrapping affect it?\n\nIt's true, showing the keys typed in the status bar while in operator pending mode would be very cool.  And it would be more Vim-like.  That probably merits its own issue.\n. Might be related to https://github.com/atom/vim-mode/issues/716? You have ex-mode installed?\n. Just screwing around with the inspector, this seems to work:\n\n``` css\natom-text-editor.vim-mode.command-mode::shadow .editor-contents--private {\n    cursor: default;\n}\n```\n\nDunno if that's anywhere near correct.\n. I say, create a pull request and find out.  :)\n. I'm guessing this is the idiomatic way to do this:\n\n``` less\natom-text-editor.vim-mode.command-mode\n{\n  &::shadow,\n  &\n  {\n    .is-focused {\n      cursor: default;\n    }\n  }\n}\n```\n\nThink you could create a pull request to add this to styles/vim-mode.less?\n. But that, of course, fails when hovering the cursor over an unfocused pane.\n\n`.editor-contents--private` is the only selector I can find that allows us to override the default.  So here's my most recent guess:\n\n``` less\natom-text-editor.vim-mode.command-mode\n{\n  &::shadow,\n  &\n  {\n    .editor-contents--private {\n      cursor: default;\n    }\n  }\n}\n```\n. Yep check out #811. :)\n. In other words, show the operator-pending text in the status bar while typing.  :)\n\nI'd like that.\n. Looks great.  Maybe update the title, something about showing more vim-mode status in the status bar?  Not just what mode you're in.\n. Is this issue inspiring #783?  Just curious.\n. Strange.  Is your insert cursor always a block, or is it just sometimes?  Can you give some hints on how to reproduce this?\n\nDo you have anything in your styles.less that's screwing it up?  Does it happen when starting in safe mode?\n. I can suggest how I would approach this.  FWIW...\n\nFirst, figure out how https://atom.io/packages/goto-last-edit knows where the last edit is.  Also, glance through [general-motions.coffee](https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee) to see how motions work and if there's anything that is close to this in functionality.\n\nSecond, now that you know everything, write the motion, write some tests, and bind it to `'.`.\n\nThird, fire off a pull request.  Profit!\n\nThen, figure out how https://atom.io/packages/last-cursor-position works, make a motion for `''` and profit 2X.\n\nSounds like fun.  Ask on Slack or follow up here if you have questions.\n. Doh, right!  Rebased.\n. I had a problem with this PR in vim-mode-next.  `dd` didn't work anymore (just ignored).  Might be an issue with the way I merged it?\n\nHere's the bad tree: https://github.com/bronson/vim-mode-next/commits/no-dd\n\nAnd here's the revert that fixes it: https://github.com/bronson/vim-mode-next/commit/6105cea8ff7c4f9dcee14b3258ff85acde17fb8d\n. No specs failing, I emptied my keymap.  I'll try disabling extensions...\n\nYep!  It only happens when vim-surround is installed.  That makes sense.  I should have tried disabling extensions before reporting.  Sorry, getting lazy.  :)\n. Hm, vim-surround is starting to look notorious: https://github.com/atom/vim-mode/issues/657#issuecomment-122571442\n\nI wish I could mark packages as conflicting...  I don't want to break people using both vim-mode-next and vim-surround, but I don't want vim-surround's nasty keymap handling to hold up progress either...  Dunno.\n\nedit: ok, maybe it's not so nasty.  :)\n. Yeah, too bad this can't just be pinned on vim-surround.  Would have made things easy!  :)\n\nYou don't think it makes sense to just rework vim-surround's mappings to allow this, even though what they're doing now is OK?  If it makes things work and keeps the code clean then that seems reasonable...\n. This is terrific!  It's nice when the fix also deletes code scattered all over the place.\n\nMinor conflicts with https://github.com/atom/vim-mode/pull/591.  Both should be merged.\n. Looks great, but I kinda miss the blue outline telling me it's waiting for a key.  :)  First merge this, then maybe someone can think of an unobtrusive way of making the modes more visible...?\n. I see you use a light colorscheme!\n\nI really like the rectangle operator-pending cursor.  Seems like it merits its own PR.  I couldn't manage to get it working with my dark colorscheme though, the cursor just disappears when going operator pending.  Gotta fiddle with it later.\n. Just opened a speculative operator-pending PR in #779.\n. Edit: updated this PR to use the same cursor style as Vim and Jacek's code.  Obviously!\n\nI'll leave the .gifs...  rectangle cursor on the left, vim cursor on the right:\n\n![bug3](https://cloud.githubusercontent.com/assets/1776/8759827/adef89ee-2cb3-11e5-8613-35cd73b67620.gif) ![bug3](https://cloud.githubusercontent.com/assets/1776/8759835/f738aa5e-2cb3-11e5-9b82-64ab7400a740.gif)\n. Now we just need an expecting-a-character cursor that can be used for `f`, `t`, and register commands.\n. Agreed, updated.\n. Rebased to master.\n. Let me see if I understand...  The problem with #764 was that vim-mode thinks that it knows all possible key combinations...  So, if vim-surround adds a new combination, vim-mode wouldn't recognize it and cancel it before it's complete?\n\nWouldn't this fix suffer the same issue...?  It would beep every time it sees the unrecognized combo, even though vim-surround would do the right thing?\n. When I comment out the new code in vim-mode.coffee, the spec still passes.\n\nDoes it fail on your machine?\n. Cool!  It would be great to remove the mealy \"Currently, vim-mode requires soft line wraps to be disabled\" excuse from vim-mode's readme.\n\nThat said, I run vim-mode always operating on screen lines: https://github.com/bronson/dotfiles/blob/master/.vimrc#L160-L178  So, while I'm happy to see a patch that improves Vim compatibility, I'd probably find a way to turn it off for myself.  :)\n\nThink this should include the gh, gj, gk, and gl bindings too?\n. Well, at least one goal of this patch has been merged.  :)  https://github.com/atom/vim-mode/pull/797/files\n. Agreed, inputEditor seems nice and readable.  Updated!\n\nI also agree with avoiding rebases until things settle down.  That said, I already did vim-mode-next...  everything seems OK.   https://github.com/bronson/vim-mode-next/commit/80ad67c8c67bdd9c92cfbdda2267c923c03baeee\n. Wow, on my OSX it's even worse.  I `R` above an e, hit `alt-e` and `e` and crash!  Of course, everything works in insert mode.\n\n**Atom Version**: 1.0.3\n**System**: Mac OS X 10.10.4\n**Thrown From**: Atom Core\n\n### Stack Trace\n\nUncaught TypeError: Cannot read property 'split' of null\n\n```\nAt /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:756\n\nTypeError: Cannot read property 'split' of null\n  at Selection.module.exports.Selection.insertText (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/selection.js:451:28)\n  at /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:736:29\n  at /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:778:29\n  at TextBuffer.module.exports.TextBuffer.transact (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:751:18)\n  at TextEditor.module.exports.TextEditor.transact (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:1151:26)\n  at /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:772:24\n  at TextEditor.module.exports.TextEditor.mergeSelections (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:2017:18)\n  at TextEditor.module.exports.TextEditor.mergeIntersectingSelections (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:1987:35)\n  at TextEditor.module.exports.TextEditor.mutateSelectedText (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:770:19)\n  at TextEditor.module.exports.TextEditor.insertText (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor.js:733:19)\n  at TextEditor.object.(anonymous function) [as insertText] (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/underscore-plus/lib/underscore-plus.js:77:27)\n  at HTMLDivElement.<anonymous> (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/text-editor-component.js:363:24)\n\n```\n\n### Commands\n\n```\n     -9:54.7.0 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -9:54.7.0 core:cancel (atom-text-editor.editor.mini.is-focused)\n     -9:54.7.0 blur (atom-text-editor.editor.mini.is-focused)\n     -9:54.5.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  6x -9:51.9.0 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:08.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:06.0 vim-mode:replace (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:06.0 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"metrics\",\n      \"exception-reporting\",\n      \"wrap-guide\",\n      \"welcome\",\n      \"background-tips\",\n      \"linter-rubocop\",\n      \"package-cop\",\n      \"linter-haml\",\n      \"smart-tab-name\",\n      \"linter-eslint\",\n      \"linter-jscs\",\n      \"linter-jshint\",\n      \"vim-mode\"\n    ],\n    \"themes\": [\n      \"one-dark-ui\",\n      \"oceanic-reef-syntax\"\n    ],\n    \"destroyEmptyPanes\": false\n  },\n  \"editor\": {\n    \"invisibles\": {},\n    \"autoIndentOnPaste\": false\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-ternjs, v0.7.1\ncolor-picker, v2.0.11\ncursor-history, v0.4.15\nfile-icons, v1.6.2\ngit-log, v0.4.1\nhighlight-selected, v0.10.1\nlanguage-haml, v0.21.0\nlinter, v1.2.4\nlinter-coffeelint, v1.0.1\nlinter-csslint, v0.0.14\nlinter-erb, v0.1.1\nlinter-ruby, v0.1.6\noceanic-reef-syntax, v0.6.0\nproject-find-navigation, v0.0.9\nreact, v0.12.6\nvim-mode-next, v0.57.0\nvim-mode-visual-block, v0.2.13\nvim-surround, v0.8.0\nwhite-cursor, v0.6.0\n\n# Dev\nNo dev packages\n```\n. Note that this affects `r` too.  Might be a separate issue.  How would the replace operator know that it needs to wait for two characters to arrive?\n. Strange, after that crash, Atom seems to be mostly behaving.\n\nInitial text: Mexico\nActual result: M\u00e9ico\nExpected result: M\u00e9xico\n\nSo the only issue I'm seeing now is that replace mode replaced two characters with one.\n\n@Valve did you type the final `e`?  I see your result after hitting `alt-e` and before hitting `e`.\n. I had the same misconception as Jacek.  Just making sure, this PR:\n- implements and documents v2> so it works the same as Vim\n- it also documents 2>> and >2>, which currently work in vim-mode\n\nMerged to vim-mode-next, looking good.\n. This is true of a lot of the motion commands, and it shouldn't be.\n\n@50Wliu I'd actually label this a bug.\n. I'm not sure TextObject extends motion...  Personally, I'd like to tell Motion which text object it should use.  For example, the `w` motion would use the Word text object.\n\nAlso, motion's base class might be totally independent.  Seems like motions like `f`, `t`, `ctrl-u`, and `ctrl-d` wouldn't use text objects at all.\n\nA text object would accept an initial starting point and then tell you how far backward or forward it extends.  For example, if the cursor is in the middle of vi_|_per, the Word text object knows that its range starts two characters before the cursor and three characters beyond.\n\nSo:\n\n(obviously we'd do a smarter job of handling multiple cursors and specifying the editor...  just trying to keep the code readable)\n\n``` coffee\nclass TextObject\n  computeStart(editor, initialPosition) -> { ... }\n\n  computeEnd(editor, initialPosition) -> { ... }\n\n  getRange: (editor, initialPosition) ->\n    new Range(@computeStart(editor, initialPosition), @computeEnd(editor, initialPosition))\n\n\nclass TextObjectMotion extends Motion\n  constructor: (@textObject, @backward=false) ->\n\n  execute: (editor) ->\n    curpos = editor.getCursorPosition()\n    if @backward?\n      newpos = @textObject.computeStart(editor, curpos) \n    else\n      newpos = @textObject.computeEnd(editor, curpos)\n    editor.setCursorPosition(newpos)\n\n  getRange: (editor) ->\n    curpos = editor.getCursorPosition()\n    if @backward?\n      new Range(@textObject.computeStart(editor, curpos), curpos)\n    else\n      new Range(curpos, @textObject.computeEnd(editor, curpos))\n```\n\nOperator would accept any object that supplies a getRange() function, so it can work with text objects, motions, and selections:\n\n``` coffee\nclass Operator\n  constructor: (@ranger) ->\n\n  execute: (editor) ->\n    @operate @ranger.getRange()\n```\n. Actually, it might clean things up if _all_ motions were implemented by text objects.  For example, a CharacterTextObject could be used to implement `f`, `F`, `t`, and `T`.  The object would extend forward and backward until another character of that type is found.\n\n``` coffee\nclass CharacterTextObject extends TextObject\n    constructor(@character) ->\n\n    computeStart: (editor, initialPosition) ->\n      editor.scanBackwardUntil initialPosition, @character\n\n    computeEnd: (editor, initialPosition) ->\n      editor.scanForwardUntil initialPosition, @character\n```\n\nNot sure though, this one might get weird.  To implement ctrl-u and ctrl-d, a WindowHeight text object would know the height of the current viewport?  And HalfWindowHeight for ctrl-f and ctrl-b?\n. I didn't consider the difference between `viw` vs `vaw`...  Do you think that `a` text objects could just wrap `i` objects, then bounce the ranges further out as appropriate?\n\n``` coffee\nclass AroundTextObject extends TextObject\n  constructor(@textObject) ->\n\n  computeStart: (editor, initialPosition) ->\n    innerpos = @textObject.computeStart editor, initialPosition\n    editor.scanBackwardUntil innerpos, isNotWhitespace  # actually, I don't think Vim includes leading whitespace?\n\n  computeEnd: (editor, initialPosition) ->\n    innerpos = @textObject.computeEnd editor, initialPosition\n    editor.scanForwardUntil innerpos, isNotWhitespace\n```\n\nSo you'd write an inner text object and get the corresponding around text object basically for free.\n\nUsing a base class or helper or something to make multiple cursors easy sounds great to me.\n. @t9md your Motion class ignores @direction?  does the endpoint go before the startpoint if @direction is reversed?  and sorry if anyone has @direction as a username :)\n. yep, https://github.com/atom/vim-mode/issues/546\n\nI have a branch around here somewhere that tried to fix this but it ended up spiraling out of control.  I keep meaning to go back and try again.\n. Looks like https://github.com/atom/vim-mode/issues/681 is another dupe.\n. Vim has quite a few normal-mode bindings that conflict with Atom's bindings on Windows and Linux (Macs, thanks to the command key, don't have as many).\n\nOften the way to fix this is to just go to insert mode.  Insert mode should give you almost the full Atom experience.\n\nThat said, if you'd rather have Atom's binding than Vim's, you can unset it.  For example, throw this in your keymap.cson file to use atom's ctrl-d behavior:\n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-d': 'unset!'\n```\n\nThis should probably go in the readme or faq or something...  Feel free to issue a documentation PR if you can find a logical place for it.\n. cc @jacekkopecky\n. If you double-click the last word on a line, the last character in the word doesn't get selected either.\n. Also: cmd-a to select all misses the last character in the file.  (when the file doesn't end with a newline)\n. Agreed, I miss it too.\n\nTechnically base vim doesn't get shift+} right either...  it needs Ruby, Python, CoffeeScript, etc language files to override the binding and add some smarts.\n\nI'm not sure vim-mode has a plan on how to allow per-language customization yet.  It's time to start that discussion.\n. While I'm not a fan of this:\n\n``` diff\n-        @activateNormalMode() if @mode is 'visual'\n+        @activateNormalMode() if @isVisualMode()\n```\n\n(I think `@mode is 'visual'` is more expressive than `@isVisualMode()`.  Simple, direct, no chance of side effects)\n\nI am a HUGE fan of this:\n\n``` diff\n+isOperator   = (obj) -> obj instanceof Operators.Operator\n+isTextObject = (obj) -> obj instanceof TextObjects.TextObject\n+isMotion     = (obj) -> obj instanceof Motions.Motion\n+isRepeat     = (obj) -> obj instanceof Prefixes.Repeat\n\n-        if @mode is 'visual' and (operation instanceof Motions.Motion or operation instanceof TextObjects.TextObject)\n+        if @isVisualMode() and (isMotion(operation) or isTextObject(operation))\n```\n\nThat is great!\n. Why close?\n. Yep, I agree.  Closing.\n. Atom allows you to put the cursor after the last newline in the file and Vim doesn't.  So, maybe the correct fix is to have normal mode disallow moving the cursor below the last line in the file?  Not sure.\n\nI notice non-vim-mode Atom doesn't allow triple-clicking the last line in the file either.  It has no trouble at all triple-clicking blank lines everywhere else.  Maybe this issue isn't restricted to vim-mode?\n. Actually, Vim tries to leave the cursor in the same column it started in.\n. Damn it, Vim is inconsistent.  This behavior depends on the `startofline` setting.\n\nhttp://stackoverflow.com/questions/8292742/vim-cursor-jumps-to-begining-of-the-line-after-buffer-switch\n\nEveryone sets `nocompatible`, right (or uses a `~/.vimrc` which is the same thing)?  If so, then it seems like most people would expect `nostartofline`... it's in vim-sensible.  But I guess this is open to discussion.\n. Drat, you're right.  Hope vim-mode receives that fix.  :)\n. It's a different issue.  #2 prevented the cursor from moving past the last character in the line.  This issue is because linewise visual mode currently locks the cursor to whatever column it started on (so the `$` in `V$%` is ignored).\n. This is fixed in vim-mode-plus.  It doesn't appear that anyone's currently trying to fix it in vim-mode, alas.\n. I really hope this can be merged.  A number of issues people have filed against vim-mode in the past two months are already fixed in vim-mode-plus.\n\nEveryone should know to try vim-mode-plus before they spend much time tracking and filing vim-mode issues.\n. Is this the workaround you need?\n\nhttps://gist.github.com/rastasheep/bfc8266eeb58b899054c\n\nIf so, it's more a problem with Atom or Lion than vim-mode.\n. Ah, gotcha.  I didn't know that you opened this issue on vim-mode-plus too: https://github.com/t9md/atom-vim-mode-plus/issues/446\n\nToo bad the workarounds didn't work.  Hope the Atom team can get to this one day.\n. Install https://atom.io/packages/open-this and copy the example keymap into yours.\n\nvim-mode is meant to just handle text editing.  To get the full Vim experience you'll need a few more packages.  Right now I'm using cursor-history, paner, project-find-navigation, vim-mode-plus, and vim-mode-plus-ex-mode.  Much like vim, this list of plugins will probably be quite personal.  :)\n. ",
    "jacekkopecky": "I have noticed and it's annoying, it's on my list but nowhere near the top.\n. This seems resolved; could be closed? (just noticed)\n. @janbaykara can you please give an example?\n. I don't use either of these packages so I need a bit more - any chance you could write down some steps to reproduce the problematic behaviour, please?\n. Hi, some of this is addressed by #556 \n. @robru, in #561 I have some fixes for \\* and # \u2013 is this related?\n. Yes, I'd like to have a look, @romgrk ; can't promise to do anything quickly though. Is it in any way related to, or similar to, https://atom.io/packages/atom-macros (which I also have yet to look at)?\n. Oh, how mistaken I've been about that package! Yes, I'd like to have a look at yours.\n. Yes, macros should be more general, not specific to vim-mode. I can imagine that the recording and replay functionality would be quite generic; the only real ties between macros and vim-mode would be key bindings, and the fact that in vim-mode, the macro should be recorded in a register, while without vim-mode, it's possible a macro package would need to replicate some form of registers.\n\nOooh, cool, how about we spin off vim registers into a separate package? When, oh when, will we have package sets to make this possible? :grinning: \n. @PandaWhisperer, does it mean you have a team of ten, waiting for this\nfeature?\n. @arcseldon I don't know of anybody working on this, but I've been occuppied by my day job since October and can't spend any time on vim-mode at all, so I could easily have missed it. I expect to do more vim-mode work (which could include macros) in the spring and summer, so don't hold your breath. 8-)\n. You have `visibility: visible` both for .cursor and .cursor.blink-off - one of them should have `visibility: hidden` or some such, I suspect. \n. @ardrigh you may benefit from multiple cursors here - see my last comment in #468 \nExactly for what you describe above, I can now do `cmd-down` a bunch of times to create as many cursors as I need, and then `i#<esc><esc>` - the second `<esc>` will get rid of the multiple cursors.\n. is this bug still there?\n. Just a thought - I could imagine a configuration option, or a per-language option somehow, for `w` and `b` to mind camelCase. Additionally, this setting could somehow affect the `iw` and `aw` text objects. \n\nIt's about time (and this might be the place) that someone reinvents the principles of modal text editing in the modern setting of windows, panes, big screens, widespread camelCase, colours, highlights and so on.\n. #556 addresses this\n. should we close this issue?\n. Hi, should this issue be marked closed?\n. I can't replicate the bug - is it still there?\n. @learning is this still an issue now that #556 was merged?\n. You can try this, it works pretty well for me, most of the time:\n\n#### Remap cmd-up and cmd-down to add a cursor\n\ninit.coffee:\n\n```\natom.commands.add \"atom-text-editor\", \"my:add-cursor-down\", ->\n  addCursorInDirection(1)\n\natom.commands.add \"atom-text-editor\", \"my:add-cursor-up\", ->\n  addCursorInDirection(-1)\n\naddCursorInDirection = (dir) ->\n  editor = atom.workspace.getActiveTextEditor()\n  cursor = editor.getLastCursor()\n  coords = cursor.getBufferPosition()\n  newcoords = { column: cursor.goalColumn || coords.column, row: coords.row + dir }\n  newcursor = editor.addCursorAtBufferPosition(newcoords)\n  newcursor.goalColumn = cursor.goalColumn || coords.column\n```\n\nand in your keymap:\n\n```\n'atom-text-editor':\n  'cmd-down': 'my:add-cursor-down'\n  'cmd-up': 'my:add-cursor-up'\n```\n\nPress `esc` to remove all but the last cursor.\nCopy&paste will only select the last selection, not all of them, so it doesn't do block text manipulation, but it works well for some tasks with columns.\n. @wolftune can you please check for me what the Key binding resolver (toggled with `cmd-.` or in the Packages menu) shows when you press `alt-shift-up`? Thanks!\n. Thanks @wolftune, that helps - I didn't know these commands were there. Still, I find the _multi-cursor_ package enhances on the add selection functionality.\n. Yes, VIM block mode is different from multiple cursors in several ways. We want block selection mode even if many of its uses can be done with multiple cursors instead. To get a real vim-like block selection mode, we'd need changes in Atom I think because currently it doesn't allow us to put a cursor or selections after the end of the line.\n\nAnd then there's the fun of copy/paste with multiple cursors (likely in scope of #855) and copy/paste with block selections.\n\nYeah, if this isn't solved by next spring (when I'll next have a big chunk of free time), I just might take a stab. :smile:\n. seems to be working now, input field not showing for single-character-input commands, close the issue?\n. related to #597 - when that's fixed, this should be easy to implement\n. Interesting; I too thought that `:w` should really be mapped to save, but then I remembered that I added a mapping in my vim for `cmd-s` anyway, so I'll be happy to try and retrain my muscle memory on that bit. \n\nI have thought, however, that `:` could map to `cmd-shift-p` \u2013 open the command palette \u2013\u00a0that could be more in the spirit of what one does with `:` \u2013 what do you think?\n. Awesome; I'm quite late to the party, so thanks for the pointers. 8-)\n. Thanks, done\n. Sorry @maxbrunsfeld but I've never done rebasing before; is it now as it should be? Or should I maybe go create a new clean branch off of your master and PR that?\n. Thank you! All done.\n. Cool, no worries. This one was over before I even noticed.\n. #560 addresses this\n. Good to know, thanks @AsaAyers \u2013 I'm still new here. I edited the first commit, is that what you mean by body? \n. Great, I've been hoping to be able to reproduce this, now I can; let's see if I get some time to play with this before someone else fixes this. 8-)\n. Hmm, this one has fallen through the cracks. @dsandstrom do you have any spare cycles to update #581? If you don't, I can clone that PR and finish it.\n. Thanks for patiently explaining your thinking there! And for merging while I'm writing this comment, that was cool. 8-)\n. OK, I'm looking at making `gu`, `gU`, and `g~` work as operators; currently they don't.\n. Thanks for the thanks, I'm doing it for myself though, and happy that I can contribute. 8-)\nI think it behaves better now; I wasn't familiar with `g~` and the ilk so I missed that.\nAnd I understand a bit better how vim-mode operators work, that's good too.\n. I've rebased it to the current status, and finally added tests now; @maxbrunsfeld is there anything holding this one back?\n. @maxbrunsfeld I've rebased it to master (needed after PR #616), and replaced cursor.autoscroll with the public editor.scrollToCursorPosition, now hopefully it's OK?\n. @bronson how do you get deprecation errors, please? I can't seem to see any when I run tests in this PR's branch with the current vim-mode master merged in.\n. Ah, #738 \u2013 sorry, I went through my email in reverse order.\n. Please let me know if anyone is working on this; I may take a stab (unless marking takes precedence). I use `R` a lot.\n. Any thoughts on #573, anybody? 8-)\n. I've now added a test, no idea why I couldn't do it the first time around. I think this PR is now good.\n. @maxbrunsfeld is anything holding this PR back? (And a question of GitHub Etiquette which I don't know yet very well: is it all right for me to ask that?)\n. Super, thank you. 8-)\n. Thanks, I should soon get some time to rebase this to the newest state of\nthe code. @maxbrunsfeld any suggestions in case you don't quite like how it\nwas done?\n. Rebased to current state of the art, cleaned up.\n. Quite right, sorry about that. Working on a fix.\n\nAbout the wrapping, @bronson, do I understand correctly that you have wrapLeftRightMotion off, and yet want that motion to wrap in insert mode?\n. Fixed bronson/vim-mode-next#4 , but need to postpone rebasing to master for now. This PR is related to #609 and should be considered together, and that one needs maintainer guidance.\n. Thank you, good catch. If we find other similar interactions, we can start thinking about how to address this in a less case-by-case way.\n. Forgot to say explicitly: I added a fix for the autocomplete issue. 8-)\n. Yes @bronson, that's exactly the issue that one immediately imagines. I suspect, though, that due to life being how it is, interactions with _j-random-plugin_ would need some other workaround. Notice how only up/down is in `not(.autocomplete-active)` and not left/right; I'm sure _j-random-plugin_ will have a different conflicting set. As they say - one is an incident, two is a coincidence, and three's a pattern. I'd like to postpone trying to generalize until I see a pattern. If Atom provides one, I'd love to know about it.\n. I just realized this approach to fixing #565 isn't right - I've only taken into account arrow-key motions but not any other motions than can happen in insert mode (pgdn, end etc.). I'll redo this PR with `onDidChangeCursorPosition`.\n. @bronson fixing it with `onDidChangeCursorPosition` will be one fix for any motion, including mouse clicks. I have 30e4073c (a biggie) and #767 (a small one) in the queue before I can get to this one.\n. @bronson I'm not sure what you mean about cursor positioning there\n. Ah I see, I'd forgotten about restricting left/right motions in case wrapLeftRightMotion is off. \nI've been trying to do the interrupting of undo with `onDidChangeCursorPosition` but it's a huge pain - of course Atom will report a cursor position change on every input (at least it says the cursor motion was caused by text change, except backspace _doesn't_ report the motion was caused by text change); and bracket-matcher's insertion of `()` when the user types `(` also causes a cursor motion. \n\nAt the moment I'm thinking that some departure from VIM is warranted here - perhaps insert undo should work like normal, non-vim-mode, typing undo? \n\nMy littlest one has been keeping me busy these days but soon I should be able to make an alternate PR to show what I mean.\n. merge conflicts resolved\n. added handling of backspace as undo, added further tests, rebased to master, enjoy. 8-)\n. @bronson, I think just one line https://github.com/jacekkopecky/vim-mode/commit/2d06dc73d14e676a3724f295f3e0ff358af599b4#diff-6490a794da4d70296766233694896f7fR423 is missing.\n. @bronson regarding block cursor - I got inspiration from your commit, but I hope you don't mind if it ended up slightly different. Thanks for poking me about it.\n. :+1: \n. Sorry, I took the style from my own custom style and didn't realize I used `px` units. Relative units are more appropriate, hence the last commit.\n. rebased to master; and I can't seem to replicate that weird behaviour I used to see with multiple cursors, maybe it was something in Atom that got fixed... I'll remove that comment from the docs.\n. And I still can't get it as simple as you suggested, @maxbrunsfeld : \nSince multiple entries in `ContentsByMode` share the same class name, there was a risk that a later entry with the same class name but not a matching mode would remove the class set by a preceding entry with a matching mode. In other words, in visual.characterwise, the `@element` would not have the class `status-bar-vim-mode-visual` because visual.blockwise would remove it.\nSo 5490b33 does things differently still. Comments welcome.\n. Thanks! 8-)\n. that's now history (still true but not a big problem I think), can be closed?\n. Indeed, #609 addresses this but needs a bit more work.\n. @dsandstrom can you please clarify what you mean by `dw` deleting the preceding space in VIM? I can't seem to see such behaviour. I'm asking because this is related to #555 and related stuff I've had my eye on. 8-)\n. I also have this problem when using v.40\n. In my case, the problem has gone away after enabling \"use shadow DOM\" in the main settings - I can't remember why I disabled it.\n. My interpretation seems to differ: the option in Atom is described as \n\n**Use Shadow DOM**\n\n```\nDisable if you experience styling issues with packages or themes. Be sure to open an issue on the relevant package or theme, because this option is going away eventually.\n```\n\nI read that as meaning the option to _disable_ shadow DOM is going away, and it was _enabling_ shadow DOM that fixed the issue for me.\n. right, it may be obsolete, I'll check. If so, should I keep the PR with just the specs, or should we just drop it?\n. Done, indeed the change in #555 did fix this.\n. Just found #417 which led me to find a bug in my PR - a yank backwards now doesn't scroll to the newly positioned cursor (because a yank backwards moves the cursor - why should a yank backwards move the cursor when a yank forward doesn't?)\nBut interestingly `yk` doesn't move the cursor in vim-mode but does in VIM.\n. Hmmm, can't seem to be able to replicate the scrolling bug I was talking about, maybe df13c6b50abc73972da455e37f280bd82c4bb9a6 fixed it.\n. this one no longer works in the newest atom, I'm looking into fixing it\n. all new and improved:\nThis PR makes the following improvements to Yank:\n- cursor moves to the beginning of the yanked range\n- but if the motion was linewise, it stays on the same column as it was, so it only moves to the first yanked line\n- cursor doesn't move for forwards yanks\n- screen doesn't move if the cursor doesn't\n- all properly tested\n\nWithout this PR, `yG` scrolls the screen so the cursor is at the top (unless the end of the file is visible when doing the `yG`) because the `G` motion actually moves the cursor to the end of the file, then the cursor position is restored and the screen then autoscrolls from the bottom of the file to follow the cursor.\n. @maxbrunsfeld any thoughts on this new and improved version, please?\n. Thank you, all fixed.\n. #555 addresses this one\n. This is a great discussion to have.\n\nEx is old and powerful. I don't know that anybody has done an ergonomic comparison between ex-mode and atom ways of doing things that don't fit within the few keystrokes of vim-mode, and I dare not guess which way the comparison would favour. I for one haven't missed ex-mode yet.\n\nThe reasoning for having ex-mode outside of vim-mode is the size of the resulting package, correct? \n\nWould anybody be willing to measure the numbers? How much bigger would the memory footprint of a combined package be, in comparison to having just vim-mode installed, and also in comparison to having both? How much longer would Atom startup take in those three situations?\n\nWhile I haven't missed ex-mode yet, I don't think I would mind having it. I might even choose to disable it, just to see whether using more of the keyboard than ex-mode does would keep working well for me. But I suspect I wouldn't perceive the added bulk if ex-mode was integrated in vim-mode.\n\n@nnjpp raises a valid point, IMO. Please consider this a vote for bringing ex-mode into vim-mode.\n. The issue of ex `:` commands used as motions is bigger than vim-mode/ex-mode. If there's a package out there that provides extra motions (e.g. `cursor-history`, `jumpy`, and more) or when Atom provides more motions (e.g. camelCase motions), we would probably want vim-mode to integrate those seamlessly. And think about `c<click>` \u2013 change until the point where I click after pressing that `c`.\n\nI just discovered `TextEditor::onDidChangeCursorPosition`. I hope to be able to try itegrating that as support for arbitrary motions combined with vim-mode operators.\n. Guess what, MacVIM handles `c<click>` as described above. I never knew. 8-)\n. For moving all cursors and staying within the line, and not canceling visual mode, this may be better in your `init.coffee`: \n\n```\nPrefixes = require './packages/vim-mode/lib/prefixes'\nMotions = require './packages/vim-mode/lib/motions/index'\nVimMode = require './packages/vim-mode'\n\nMoveByLines = (num) ->\n  editor = atom.workspace.getActiveTextEditor()\n  vimState = VimMode.getEditorState(editor)\n  repeat = new Prefixes.Repeat(Math.abs(num))\n  if num > 0\n    move = new Motions.MoveDown(editor, vimState)\n  else\n    move = new Motions.MoveUp(editor, vimState)\n  vimState.pushOperations([repeat, move])\n\natom.commands.add 'atom-text-editor', 'custom:move-ten-up',   -> MoveByLines(-10)\natom.commands.add 'atom-text-editor', 'custom:move-ten-down', -> MoveByLines(10)\n```\n\nand of course, your `keymap.cson` then should contain something like this:\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'K': 'custom:move-ten-up'\n  'J': 'custom:move-ten-down'\n```\n. this PR is subsumed by #607 which does this and more.\n. #568 is WIP again so this PR will have to be delayed.\n. I can get back to this one when we're done with #849 or #568.\n. I'm pretty sure gUU and friends would be relatively easy - I'll be happy to help with that when this PR gets merged.\n. Seems to need rebasing please.\n. @daniloisr this PR changes the behavior of these commands - in VIM they scroll the screen so the cursor stays on the same line on the screen, here they don't. I think we'd want to keep the scrolling behavior as well as fixing how these motions don't affect the visual mode. (Yes, they do seem to be motions rather than scrolls.)\n. Hi @daniloisr, this looks interesting, I'm hoping to get enough time to focus on this in a few days, hope that's OK.\n. Coincidentally, I just looked at this today and it's a limitation in Atom -\ncursors with selections don't show up.\n\nI found a workaround though: see\nhttps://discuss.atom.io/t/show-text-cursor-while-selecting-text/5323/2\n\nThen I'm not sure what the cursor will look like because I've styled it for\nmyself a long time ago. You'll probably want a thin cursor between\ncharacters rather than a block cursor because if the cursor is at the end\nof a selection, it's after the character rather than before it, so a block\ncursor would be outside of the selection rather than part of the selection\nlike in VIM.\n\nI'm typing this on a tablet, ask me for my styles if things don't look\nright and I can post them when I'm on the computer again tomorrow.\n. Here's my cursor styles; no blinking, below text but above selection, bright green, same in visual mode as in insert mode. Hope it helps.\nThe last block of styles puts selection under the cursor so the cursor is always visible.\n\n```\natom-text-editor.vim-mode.command-mode,\natom-text-editor.vim-mode.visual-mode,\natom-text-editor.vim-mode.operator-pending-mode,\natom-text-editor.vim-mode.insert-mode\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: 2px solid #29ff2f;\n      opacity: 1;\n      z-index: -1;\n      visibility: visible;\n      background: none;\n    }\n  }\n}\n\natom-text-editor.vim-mode.command-mode.is-focused,\natom-text-editor.vim-mode.operator-pending-mode.is-focused,\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      background-color: #29ff2f;\n      opacity: 1;\n      z-index: -1;\n    }\n  }\n}\n\natom-text-editor.vim-mode.operator-pending-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      background: none;\n      border: none;\n      border-bottom: 10px solid #29ff2f;\n      opacity: 1;\n      z-index: -1;\n    }\n  }\n}\n\natom-text-editor.vim-mode.insert-mode.is-focused,\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: none;\n      border-left: 3px solid #29ff2f;\n      z-index: -1;\n      visibility: visible;\n      opacity: 1;\n      background: none;\n    }\n  }\n}\n\natom-text-editor.vim-mode.replace-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: none;\n      border-bottom: 4px solid #29ff2f;\n      background: none;\n      z-index: -1;\n      visibility: visible;\n      opacity: 1;\n    }\n  }\n}\n\natom-text-editor.vim-mode\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .highlights .highlight.selection .region {\n      z-index: -2;\n    }\n  }\n}\n```\n. Sure, go ahead. 8-)\n. Update of the above: giving the highlights a z-index of -2 doesn't work (for me anyway) - this means the cursor is shown at the end of a selection (because it's actually after it) but not at the beginning of a selection (because it's obscured by the selection).\nHere's code that offsets the cursor so it's extra thick - but it doesn't show up as extra thick because half of it is obscured by the selection:\n\n```\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: none;\n      border-left: 6px solid #29ff2f;\n      left: -3px;\n      z-index: -1;\n      visibility: visible;\n      opacity: 1;\n      background: none;\n    }\n  }\n}\n```\n\nFeel free to re-enable blinking. \n. @maxbrunsfeld any comments on this one please?\n. rebased, low-hanging fruit\n. `iW` has been there for a while, so has `i(`, but not `ib`\n. Thank you. 8-)\n. I've had the same issue before. However, I've also edited SVG where in a path, a negative number can easily follow an alphanumeric character (example: `<path style=\"stroke: #594\"  d='M390,270 v5 h5 v-5 h-5'/>`); and I can all too easily imagine editing program source code where `x-3` means subtraction, not an identifier.\n\nPerhaps we need extra commands for ignoring the `-`; how about `ctrl-shift-a` and `ctrl-shift-x`? Would this work for you?\n. @t9md without the fallback, the new specs were failing for me \u2013 it seems when running specs, `atom.config.get` doesn't return the proper defaults. I don't have the brain cycles now to look into that, so I've included a workaround in the specs now instead of in the main code.\n@maxbrunsfeld \u2013 is this better now?\n. Yes, and it also doesn't play nice with automatic matching of parentheses:\n`i(abc)<esc>` can replay as \"()abc\". I haven't yet had enough time to try\nand solve this one. I expect one fix can cover both problems, though.\n. Ah, same as #546 ?\n. Perfect!\n. I'd disagree about this not being a vim-mode issue. Atom in general plays\nnicely with this feature (holding a key for special characters, I'll just\ncall it \"the feature\").\n\nThe feature is a modern experiment in usability, and it assumes a-z keys\nare not often repeated by holding them. Vim-mode violates thar assumption,\nand only in \"command\" mode. It would make most sense if we managed to turn\nthe feature off in command mode.\n\nI have the feature disabled by default but would give it a try if it stops\ninterfering with vim-mode command mode.\n. Thanks @t9md, I installed cursor-history and I'm quite happy now.\n. keymap.cson is a data structure, basically a hash map. Your code \n\n```\n'atom-text-editor.vim-mode.command-mode':\n  'shift-O': 'exit-insert-mode-if-proceeded-by-shift-o'\n\n'atom-text-editor.vim-mode.command-mode':\n  'o': 'exit-insert-mode-if-proceeded-by-o'\n```\n\nbasically overrides the first declaration by the second one. Please try to combine it:\n\n```\n'atom-text-editor.vim-mode.command-mode':\n  'shift-O': 'exit-insert-mode-if-proceeded-by-shift-o'\n  'o': 'exit-insert-mode-if-proceeded-by-o'\n```\n. Seems to need rebasing please.\n. please remove `.swp` from the commit :sunglasses: \n. There's a PR #573 for this, but it got no comment from the maintainers.\n. Atom 1.0.2, vim-mode 0.55.0, I can't reproduce any of this. The original report by @Arsca lists many user packages - any chance any of you could try if any of your user packages might be causing this? In other words, try disabling them all except vim-mode and let's see if the error still occurs. And can you please post the stack trace and the exact atom and vim-mode version info, if the error does indeed still occur?\n. hmmm, and just to make sure - you have restarted Atom recently, right? I'll look at this at some point - it's hard because I can't reproduce it myself.\n. Hi, just to check - would shift+7 normally produce a slash (`/`) on your keyboard?\n. rebased, low-hanging fruit\n. It seems that both #392 and #650 are actually fixed by this PR (but then, I am tired, so @greg-hellings, @peterjeliot, @podgib please verify).\n. Right, now it's also handling autocomplete.\n. @yriveiro do you, by any chance, have a way of reproducing this, please?\n. Are these `ex-mode` commands \u2013\u00a0that is, an issue for the `ex-mode` package?\n. I just hit the 1.0.0 release rush and Travis couldn't get Atom - any way to try the build again when the seas are calmer?\n. Ah, I made cursor visible in visual mode so I've noticed that in visual-line selection mode, the cursor is placed _after_ the selection, so indeed the cursor is on line 78. This may need to be special-cased in ex-mode; anyway, the issue does seem to belong there.\n. rebased, relatively low-hanging fruit, merges cleanly with #573, #623 and #711\n. tests updated to actually use multiple editors (thanks for the suggestion @maxbrunsfeld); please review especially the changes in spec-helper - hope this is useful for other specs too.\n. thanks for the patience and attention to detail 8-)\n. Thanks, and no worries about the timing, I understand that getting Atom 1.0 out the door made everyone quite busy. 8-)\n. just guessing, but it seems like it needed a change of `'vim-mode'` to `'vim-mode-next'` in the spec file: https://github.com/bronson/vim-mode-next/blob/0ad53fbfa4b2c626e00d7e16c98e95fc6232e920/spec/insert-mode-spec.coffee#L7\n. No worries, done. I tend to use `ctrl-y` a lot, but I'm not sure I've ever used `ctrl-e` anyway.\n. I'm lightly reviewing vim-mode PRs and this one strikes me as having too\nlittle to do with vim-mode.\n. @petemill do you have a reliable way to trigger this, please? And what are the versions of your Atom and vim-mode?\n. This is a wider issue: vim-mode doesn't realize it's encountered an unrecognized key sequence, and cancel it. Above, it's `ix` in visual mode. In #760, it's `ci3`; therefore while in VIM `ci3w` behaves as `w`, having cancelled `ci3`, in vim-mode it behaves as `c3w`, ignoring the `i`. This is also part of #741.\n. Hopefully there's no need for brute force here, even though I enjoyed employing it with ctrl-r. 8-)\n. @bronson you wrote 4 characters should be replaced by the new text, and you only mention 4 characters as the size of the new text - do you mean that the length of text replaced by `.` should match the length of the new text? \n\nThe way I understand it, and checked in MacVIM now, is that `s` or `c` in visual mode that has selected `<x>` characters (e.g. 5) is repeated as `c<x>l`, e.g. `c5l`. The number of characters to disappear matches the length of the original selection, not the length of the new text. In linewise visual mode that selects `<y>` lines, a `c` is replayed as `c<y-1>j`.\n\nI'd be happy to look into this when the maintainers come back from holidays and reduce the queue of my other PRs. Or shall I just do that for the benefit of vim-mode-next? (Which is a laudable effort!)\n. Thanks @bronson, I was missing an interesting case: `c` of a characterwise visual selection that crosses `<x>` line breaks will, when replayed with `.`, delete like this: until the end of the current line (however long it is), any number of whole lines (`<x-1>`), and the exact number of characters originally selected on the last line, up to (and **including**) the `\\n` on the last affected line.\n\nWell, that's probably not clear, so here's how you can try it out:\nPut this in VIM:\n\n```\n123456789\nabcde\nfghijklmnopq\nuvwxyz\n```\n1. put cursor on `c`, \n2. visually select until (including) `m`\n3. `c` to change it to `foo` (now the second line in the window will be `abfoonopq`)\n4. `u` undo so we have four lines again\n5. move cursor to `b`\n6. `.` to redo the change (now the second line in the window will be `afoonopq`)\n7. `u` to undo again\n8. move cursor to `2` on the first line\n9. `.` to redo the change, now the first line will be `1foofghijklmnopq`\n\nThe last part is weird to me, I'd expect the last line break to stay there, ending with `1foo` on the first line, and `fghijklmnopq` on the second line. Any thoughts or preferences? It will affect the code. I'd be happy to stray away from accurate replication of VIM here.\n\nSo a question to everyone: how should vim-mode behave here?\n. I'm getting \n\n```\n      ReferenceError: fail is not defined\n        at [object Object].<anonymous> (/Users/jacek/prog/oss/vim-mode/spec/spec-helper.coffee:13:5)\n```\n\nIs it just my version of jasmine being somehow outdated? If so, how do I update the version of jasmine that is used by `apm test`? \n. Yes, but my quick search just now seems to show that `apm` testing still uses jasmine 1.3 (https://github.com/atom/atom/pull/6099 and https://github.com/atom/atom/pull/5393). Did you do anything to upgrade that? Or am I missing something?\n. I now found that `this.fail` works while simple `fail` doesn't, on my machine. I see the same code you see.\n\nThe failing `fail` will still fail the test because of that `ReferenceError`, and the logs will still show the right deprecation call, so that's not a problem.\n\nAlso, when I merged #738 into my own private version, `apm test` would fail every test after the first one that used a deprecated call. \n\nSo I ended up with this patch against #738:\n\n```\n--- a/spec/spec-helper.coffee\n+++ b/spec/spec-helper.coffee\n@@ -10,7 +10,8 @@ beforeEach ->\n afterEach ->\n   if Grim.getDeprecationsLength() > 0\n     Grim.logDeprecations()\n+    Grim.clearDeprecations()\n-    fail 'Deprecated APIs were called'\n+    this.fail 'Deprecated APIs were called'\n\n\n getEditorElement = (callback) ->\n```\n. Does #568 now belong back on the top list?\nThis is a great list, btw; if I was a maintainer, I'd love this kind of effort.\n. I've just reproduced it - the problem shows up as described on a file with only two lines. Try this in a new file:\n`ifoo<cr>bar<esc>kVj>.`\nStrangely enough, it works with `v` instead of `V`, and it also works with an extra `<cr>` after `bar` and an extra `k` before `V`. I'll have to look into it. But I hope a fix for this can be another PR if this one can otherwise be merged - it seems to work well enough in situations where I've tried it. If this PR is merged, an issue for the strange behaviour should be opened.\n. @50Wliu \u2013 I've reproduced it with a simple `d2ap` anywhere.\n. Yay!\n. In the situation like yours, I've been doing it like this:\n1. put cursor on `scanRange`\n2. press `cmd-d` three times\n3. press `<escape>` once - it will drop visual mode but it will keep the three cursors\n4. press `b` if you want to start inserting at the beginning of the word, nothing otherwise\n5. press `i` or `a` as appropriate to start editing\n\nMultiple cursors rock!\n\nI've also hacked together operations to add cursor below/above the current cursor, which has helped with some operations that in VIM I'd do with macros or visual selections. In `keymap.cson`:\n\n```\n'atom-text-editor':\n  'cmd-down': 'jacek:add-cursor-down'\n  'cmd-up': 'jacek:add-cursor-up'\n```\n\nIn `init.coffee`:\n\n```\natom.commands.add \"atom-text-editor\", \"jacek:add-cursor-down\", ->\n  addCursorInDirection(1)\n\natom.commands.add \"atom-text-editor\", \"jacek:add-cursor-up\", ->\n  addCursorInDirection(-1)\n\naddCursorInDirection = (dir) ->\n  editor = atom.workspace.getActiveTextEditor()\n  cursor = editor.getLastCursor()\n  coords = cursor.getBufferPosition()\n\n  newcoords = { column: cursor.goalColumn || coords.column, row: coords.row + dir }\n  newcursor = editor.addCursorAtBufferPosition(newcoords)\n\n  newcursor.goalColumn = cursor.goalColumn || coords.column\n```\n. Typing `:20` would be an ex-mode command, so possibly this could be an\nissue for that package, rather than vim-mode.\nOn 9 Jul 2015 02:33, \"Scott Bronson\" notifications@github.com wrote:\n\n> Probably related to #716 https://github.com/atom/vim-mode/issues/716\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/749#issuecomment-119778535.\n. I struggle to reproduce it. Are your multiple cursors on consecutive lines, by any chance? Vim-mode (or Atom, not sure) combines selections, and thus can remove cursors.\n. Yes, backwards deletions don't properly handle inclusive motions. If you want to have a go, you may want to start in `Motion::moveSelectionInclusively`, I think.\n. Ah, I had this issue on the list of things that bug me, and forgot someone else was working on it. Sorry @irrationalistic if you were also working on fixing it. If you already have the fix and it's better than mine, feel free to propose an alternative PR.\nI'm looking forward to your extensions of `%` to \"additional types for comments and functions\".\n. And thanks @bronson for spotting the connection.\n. It seems that the status bar is not updated when the user switches to a\ndifferent tab/pane etc. Should be an easy fix. Thanks for the very good\nissue report.\n. This should probably be closed (by #823).\n. Please rebase. 8-)\n. @bzx - do you have steps to reproduce this, by any chance? And what is your vim-mode version, please?\n. Confirmed reproduced, thank you, that'll make it much easier to fix.\n. Seems to be similar to #741, if not the same. I'd love to have a look, unless somebody beats me to it (feel free). 8-)\n. Are you sure `ci3w` works fine? In my tries it seems to work like `c3w` - and in VIM, `ci3` would be an error, the command would be cancelled, and `ci3w` ends up behaving like a simple `w`. This is all a consequence of two issues: **text objects do not know about prefixes/counts**, and vim-mode doesn't correctly cancel commands as soon as an unrecognized sequence is typed in (#734).\n. Thank you, yes, that's a known issue #737 with a fix in the queue #740.\n. @bronson I can't replicate it. Are specs failing, or is it interactive behaviour? Do you have anything with `d` in your own keymap, by any chance?\n. Oh boy, this complicates things. Vim-surround has a key binding for `d s`, so vim-mode's `d d` becomes a binding atom fails to match. Let's see if vim-surround's maintainers are receptive to rethinking their key binding approach.\n. No, I can't seem to formulate this as an issue against vim-surround - it's making a valid use of atom's key binding infrastructure, after all. The above commit addresses these particular interactions, but I'm no longer sure that this approach to handling unrecognised commands is appropriate in Atom vim-mode.\n\nHow about alternatively I work on showing the commands awaiting completion and if a user types `vix` or `ci3w` and gets bitten, they have `u` or `b` to help, and they'll learn that's not a valid combination. \n\nMaybe a debounced beep on unrecognized single-key bindings would help. I'll look into that too.\n. Thinking about your comments @bronson made me realize that perhaps #764 should only cancel on single-key unrecognized key bindings. 386e0c8 implements that.\n\nNow this PR implements the following behaviour:\n- `ci3w` behaves as `3w` after canceling `c` because of unrecognized `i` in operator-pending mode (replayed by Atom after matching unrecognized `i3`). `ci3` beeps and means `3`.\n- `cqw` behaves as `w` after canceling `c` because of unrecognized `q`. `cq` beeps and is a no-op.\n- `vix` behaves as `vx`, but it beeps on the unrecognized `ix` (because atom replays `i` which goes unrecognized, and then it replays `x`).\n\nI also plan to expand the specs to spy on beeping, so `apm test` doesn't beep and the specs verify that the beeps happen.\n\nThoughts welcome.\n. @bronson with the current #764, the interaction with vim-surround looks like this: \n1. you press `d`, Atom sees the possible `ds` from vim-surround so waits for a bit in case you press something. Vim-mode doesn't know yet that anything is happening.\n2. if you wait, Atom will time out waiting for `ds` and just play `d`, which puts us in the operator-pending mode. Vim-surround's complex key bindings cause a delay before the user sees operator-pending mode (and the associated cursor change).\n3. pressing `d` quickly after the first `d`, before Atom times out as described before, means Atom fails to find a multi-keystroke binding that starts with `dd` so it replays `d`, that's recognized by vim-mode which goes operator-pending, and then Atom replays the second `d` immediately and vim-mode deletes the line.\n\nIn short, waiting for complex key strokes delays user feedback, and that can be an issue for vim-surround. I'm tired now but will open it tomorrow if you don't do it first. 8-)\n. another low-hanging, clean-merging fruit here\n. This is a very low-hanging fruit (one line changed), merges cleanly with #573, #623, #711 and #717.\n. This is a guess: it seems to me that CI is complaining about the presence of focused specs. Please try changing `fdescribe` to `describe`. \n. I like the procedurally generated tests with `itMovesByWord` and `itMovesBySubWord`, by the way!\n. This PR also fixes #2, as far as I can tell. Yay for fixing the longest-outstanding issue of vim-mode. 8-)\n. fixes #579 \n. duplicate of #550?\n. I struggle to reproduce this. In step 3, by writing \"hold\", do you mean \"keep holding shift when you hit <up> step 4\", by any chance?\n. Ah, that explains it. When you hit `shift-v`, the whole line is selected, and the cursor is actually on the next line. You can try it by making the cursor in visual mode visible with this style in your `.atom/styles.less`: \n\n```\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: none;\n      border-left: 6px solid #29ff2f;\n      left: -3px;\n      z-index: -1;\n      visibility: visible;\n      opacity: 1;\n      background: none;\n    }\n  }\n}\n```\n\nAnd this in your `.atom/init.coffee`\n\n```\nCursor = require 'src/cursor'\nCursor.prototype.isVisible = -> true\n```\n\nWhen you then press `shift-up`, it's (at the moment) the normal Atom selection movement, not a vim-mode movement, so you move the cursor to the beginning of the selection and thus the selection is gone.\n\nThe issue might become: should vim-mode implement `shift-arrow` movements as { start visual mode if not there yet, perform normal vim movement } ?\n. Yes, vim-mode could handle shift-arrow movements. That's a valid issue, I'd say.\n\nI'm curious and hope you don't mind me asking - what makes you hold the shift for the `up` movement, after a `shift-v`? If you press the `up` arrow without shift, it behaves as expected in vim. Alternatively, in command mode, if you press `shift-cursor`, it's doing normal non-vim selection, moving vim-mode into visual (characterwise) automatically.\n. Ah, interesting, my MacVIM does not exit visual mode when I press `up` or any other arrow key without a `shift`. Would you then also want atom vim-mode to exit visual mode when `up` is pressed without `shift`?\n. Oh, I had no idea about this feature! Cool!\nBut I think it would be better in atom rather than in vim-mode. I don't know if a package could do it, or if it would need to go in the core.\n. This also removes the blue box from the search box, though. Also, what does it look like on your system when you press `m` for _create mark_? I've created an alternative, much more complicated take on this issue: #777\n. @t9md I see your point. My theme doesn't use such outline so it doesn't affect me, but I'd probably see such visual tweaks as the domain of themes rather than packages. I'd expect the blue outline to be useful for the search field, for consistency with the rest of the UI. But again, my theme doesn't use box-shadow there.\n. Hi, since #777 was merged, should this one be closed?\n. Tested to work with `atom` and `one` themes.\n. I'm thinking about that. Plus, I use a whole different set of cursors, with an empty rectangle cursor for inactive (which is triggered on `f` and such because the input line is the active editor then) which tends to be enough of an indication in the heat of coding.\nMy cursor styles:\n\n```\n@cursor: #29ff2f;\n@cursorhi: #00ff00;\n\natom-text-editor.vim-mode {\n  &.command-mode,\n  &.operator-pending-mode,\n  &.insert-mode\n  { &::shadow, & {\n      .cursors.blink-off .cursor, .cursors .cursor {\n        border: 2px solid @cursor;\n        background: none;\n        z-index: -1;\n        visibility: visible !important;\n        opacity: 1;\n      }\n\n      .tile {\n        background-color: rgba(0,0,0,0) !important;\n      }\n    }\n  }\n\n  &.visual-mode\n  { &::shadow, & {\n      .cursors.blink-off .cursor, .cursors .cursor {\n        border: 2px solid @cursorhi;\n        background: none;\n        visibility: visible !important;\n        opacity: .5;\n      }\n    }\n  }\n\n  &.is-focused {\n    &.command-mode,\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor {\n          border: none;\n          background: @cursor;\n        }\n      }\n    }\n\n    &.operator-pending-mode\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor {\n          border: none;\n          border-bottom: 10px solid @cursor;\n        }\n      }\n    }\n\n    &.insert-mode,\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor {\n          border: none;\n          border-left: 3px solid @cursor;\n        }\n      }\n    }\n\n    &.visual-mode\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor,\n         {\n          border: none;\n          border-left: 3px solid @cursorhi;\n          opacity: .5;\n        }\n      }\n    }\n\n    &.replace-mode\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor {\n          border: none;\n          border-bottom: 4px solid @cursor;\n        }\n      }\n    }\n  }\n}\n```\n. @maxbrunsfeld this new and updated version does that - for a hidden input, the editor is invisible, added to the main text editor's parent element. Do you like this better?\n. All done, thank you.\n. I suspect the reason is that composing vim-mode's commands can really only be done inside vim-mode; perhaps we need some kind of API for that? Time to look at what those _services_ are all about.\n. Oh, combining motions outside of vim-mode is possible: here's what I have in my `init.coffee` to combine `n` and `zz`:\n\n```\natom.commands.add 'atom-text-editor.vim-mode.command-mode', 'jacek:center-next', ->\n  editor = atom.workspace.getActiveTextEditor()\n  editorElement = atom.views.getView(editor)\n  vimState = VimMode.getEditorState(editor)\n  vimState.pushOperations new Motions.RepeatSearch(editor, vimState)\n  vimState.pushOperations new Scroll.ScrollCursorToMiddle(editorElement, {leaveCursor: true})\n```\n\nAnd then in the `keymap.cson`:\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  '\\\\': 'jacek:center-next'\n```\n\nThis could, however, be easier.\n. I think this should be possible in the author\u2019s own configuration by combining `y` and `$`. Currently there's a way outlined above; but should vim-mode provide an API akin to vim\u2019s `:map`?\n. This one only beeps when a single-key keystroke hasn't been matched. The problem with #764 is that it needs to react to multi-key keystrokes. Examples:\n\nIn `ci3w`, it sees `i3` as a key binding not recognized by Atom; and Atom only attempts to match `i3` because other two-key strokes starting with `i` exist. #764 cancels `i3` and cancels `c` as well, in order to prevent replaying `i` (not recognized so no-op) and `3` which then gets tied to `w`.\n\nWith vim-surround, the existence of the key strokes starting with `ds` mean that when the user types `dd`, Atom waits after the first `d` in case `s` comes, and when it doesn't, Atom shouts that `dd` was not recognized, #764 cancels the whole thing and the two `d`s don't get replayed, to be combined by vim-mode.\n\nIn here - #781 - there's no canceling, just beeping, and only on single-key unmatched bindings.\n\nWhich brings me to an idea that #764 could only cancel on single-key unmatched bindings. That should take care of interactions with vim-surround. We'll see momentarily.\n. I think I prefer this approach (beep on unrecognized key strokes, without canceling any) to the approach of #764 which tries to cancel pending commands but may delay user feedback.\n\nNeither of these two PRs can copy VIM's behaviour, but it's about handling erroneous input so there should be no consideration of muscle memory.\n. oh boy, tiny merge conflict with #827 - I'll be happy to rebase as soon as that one is merged\n. OK, this one is now ready; please see my [comment above](https://github.com/atom/vim-mode/pull/781#issuecomment-133180031) when considering this.\n. Ah, specs tripped by the command/normal rename; I'll fix that after #787 \n. all new and rebased now\n. Would it make sense, before merging, to combine all the commits into one? It ends up being a rather small and effective patch.\nIn think the specs for \"horizontal scroll cursor keybindings\" in `spec/scroll-spec.coffee` do something with editor width, maybe that can help with adding specs for behaviour with soft-wrapped lines.\n. @t9md I just found the screencount approach has a problem: if you go to the last line of a soft-wrapped long line and press `j`, you will go further down than expected.\nTo illustrate, let's imagine the first two lines below are a single soft-wrapped line:\n\n```\nthis is a very long line that is \nsoftwrapped in a very narrow window\nthis is a second line\nthis is a third line\n```\n\nNow put the cursor on \"w\" in \"softwrapped\", press 'j' and you'll end up on the third line because the cursor moves by 2 lines - the screencount of the line it's on.\n\nI suspect we should not use `moveDown` at all there, instead we should set the cursor's buffer position to its current column and its current row plus however many lines we want.\n\nThat should also put the goalColumn behaviour in line with VIM - the cursor in the example above, going down from \"w\" in \"softwrapped\", should end up at the end of the second line, not on the space after \"this\".\n. I'll wait with my rebases until this one gets merged, if that's all right. 8-)\n. Ah, first guess: the cursor needs a goal column there, and needs to heed it.\n. Oh, this one is of interest to me - I'll try to get to it when we're done merging the current back log.\n. It's an issue for the replace mode as well as for the `r` single replace\ncommand.\n. @50Wliu this one no longer needs reproduction, it's been reproduced. :smiley:\n. This is an issue in Atom: atom/atom#5414.\n. the replace mode problem will be (mostly?) solved by atom/atom#8526 when they :ship: the next version of Atom\n\nthe `r` issue also affects `f` and `m` and so on, users of the hidden variant of `VimNormalModeInputElement`, and is addressed in #846\n. Would this address #835?\n. Hmmm, very interesting indeed - I do see a lot of potential in this\nrefactoring experiment, incl. potential to break the outstanding PRs.\n:sunglasses:\n\nIn the current version in the issue description, if `execute` is taken out\nof Motion, it will have the same signature as TextObject. Maybe all motions\ncan be paired into some text objects? Then Motion can be replaced by the\ncode that's now in MoveByTextObject, and only TextObject would ever be\nextended.\n\nThe current logic for composing things is also highly opaque, and might be\nsimplified if VimState just took more responsibility, eg for minding the\ncounts and registers.\n\nThis feels like the type of effort that should be started when we have 1.0\nand would lead to 2.0, with minimal changes in existing specs. (Refactoring\nspecs would come after 2.0)\n\nSomeone please open an issue for 1.0 roadmap. :sunglasses:\n. I could see an alternative solution to #759, if you don't mind:\n\nText Objects are all called `select-<something>` \u2013 they could be applicable in any mode to simply select whatever their selection is. This would mean TextObject to have the following single extra line:\n\n```\n  execute: -> @select.apply(this, arguments)\n```\n\nThis way, Text Objects would be extra commands that vim-mode normal mode, and insert mode, doesn't have key bindings for, but they would still be meaningful.\n. I for one would leave it there. \n. @mattr- well, we can say the commands don't apply, or we can ask \"could they be useful?\" \n\nCurrently, all vim-mode commands are shown in the command palette, even if they don't have key bindings in the current mode (e.g. the text objects in normal mode). Some might genuinely not apply, but I can't see an argument against this particular PR, making text objects select when invoked in normal mode.\n. Interesting, thanks, definitely will look into it.\n. Yes, quite right, the problem is that vim-mode doesn't know the motion is\nfor selecting. I'm working on a solution.\n. yes, it's #827 \n. I'm very sorry indeed to have caused the regression.\n. @mcastilho the fix (#827) relies on functionality that will be released in Atom 1.0.8 which should be coming any day now, then vim-mode 0.59 should be released very briefly afterwards.\n. Yes, I was thinking that `hasChangesSinceCheckpoint(checkpoint)` could be on TextBuffer, but I haven't dared propose PRs on core just yet.\n\n`getChangesSinceCheckpoint(checkpoint)` would be even more useful \u2013 then we might proceed (maybe with `Patch`) to extract the last added character and undo only that somehow. Plus it might be useful further on, for handling undo and redo of insert operations.\n\nWould you be willing to merge this one until TextBuffer can provide anything like the above? The current behaviour of backspace in replace mode, without this PR, is too buggy.\n. In the specs I see that you expect `dj` on the last line to delete the last line - but that isn't how VIM behaves, and I don't find it intuitive. Is that an intended change?\n. Yes, but that's more of a display issue - VIM chooses not to show a line\nafter the last \\n, while Atom shows it. Both will, by default, save a \\n\nafter the last character.\n. Can you please add some specs that would demonstrate what's fixed here? Best specs that fail without your changes, and pass with them.\n. This would be an issue for the ex-mode package, you may want to open it\nthere please.\nOn 5 Aug 2015 19:20, \"Gary Furash\" notifications@github.com wrote:\n\n> running :%s/ - /\\t/ig\n> turns\n> PO_HDR Purchase Order Header- Header Record for Purchase Order\n> into\n> PO_HDR Purchase Order HeadertHeader Record for Purchase Order\n> instead of replacing the \"-\" with a tab character? Is this user error?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/816.\n. Cool! The generic reflection part feels like it could even be a separate\nNPM package.\n\nPlease add a date to the generated report, and vim-mode package version,\nand if possible also current git commit ID, so it's easy to see if the\nreport is up to date.\n\nWould it be possible/useful to output as the first part a subclass tree\nrather than an unordered list of subclass relationships?\n. Regarding hierarchy: currently, your output is \n- [Input](#input)\n- [OperatorError](#operatorerror)\n- [Operator](#operator)\n- [OperatorWithInput < Operator](#operatorwithinput--operator)\n- [Select < Operator](#select--operator)\n- [Delete < Operator](#delete--operator)\n\nand I think it would be useful to have it sorted alphabetically and nested by subclassing like this\n- [Input](#input)\n- [Operator](#operator)\n  - [Delete](#delete--operator)\n  - [Increase](#increase--operator)\n    - [Decrease](#decrease--increase--operator)\n  - [Join](#join--operator)\n  - [LowerCase](#lowercase--operator)\n  - [OperatorWithInput](#operatorwithinput--operator)\n    - [Mark](#mark--operatorwithinput--operator)\n  - [Repeat](#repeat--operator)\n. The more and more I'm looking at this, the more it looks like it could be an Atom package independent of vim-mode, which would take the current project's coffee files and run this type of introspection on their exports.\n\nAlso, instead of generating a file, how about opening a new text editor and putting the content there? Then the user can choose where to save it, if at all.\n. Yes, by default Atom hides the cursor when selecting; see #617 for tips on how to show the cursor.\n\nWhen you see the cursor, you'll see why `%` doesn't work as expected: in linewise visual mode, the cursor goes at the beginning of the **next** line - the end of the selection - so it's no longer where you expect it to be and `%` can't work.\n\nIt's a current limitation in Atom that it doesn't support linewise selection with a cursor elsewhere than at the beginning or the end of the selection. I have a few ideas for how this could be addressed.\n. Yes, undo in Atom currently puts the cursor in a different place than VIM\ndoes. It's on my radar because it's been bugging me too. I think it's not\njust undoing P.\n\nOoh, a quick thought that I cannot check right now - does vim-state fail to\nmove the cursor after undo to match the cursor move after other commands?\n. This is better, thank you. A little change remains in the status bar manager. Sorry about the failed build.\n. Yes, #806, working on it, sorry.\n. Here's what I think happens on mouse dragging in normal mode: \n1. `mouseDown` after the end of the line, cursor moves to the end of the line and there's no selection\n2. `mouseMove`, cursor moves and selection is started and grows\n   The issue is that without watching the mouse, we don't know in step 1 that we shouldn't move the cursor - hence the behaviour shown in the very helpful animated gif in #806.\n. @maxbrunsfeld yes, I've just verified it. \n\nThe `@processing` flag is there so that vim-mode can put the cursor immediately where it belongs after _vim-mode commands_, but it doesn't reposition the cursor while those commands are working. \n\nFor _non-vim-mode commands_, we notice something has happened with the `onDidChangeCursorPosition` handler, but we only do something about the cursor position after the current tick (that's the `_.debounce(..., 0)` so the foreign commands are done by then.\n. it means, though, that a command like `cmd-<right>` puts the cursor at the end of the line, then drawing happens, and only then the cursor is put where it belongs and redrawn. `$` doesn't suffer this issue, and vim-mode could very easily have `cmd-<right>` mapped to the same command as `$`.\n. @maxbrunsfeld the last comment removes the short cursor flicker on native commands such as `cmd-<right>`. Still uncertain?\n. Because we don't have a good `currentTarget` in the `did-dispatch` event (see https://github.com/atom/atom/pull/8496/files#diff-22aaebf7af3d31bbf37d33248ec7af1cR253) we won't know that the event was for our editor. We might run the cursor position and selection check for every editor on every command, but that doesn't feel right.\n. got it, that should work, thanks\n. I now got rid of all the cursor/selection change listeners (which required a few spec changes), but it works now (with my recent enough clone of Atom, anyway).\n. Thank you for your kind words!\n\nOops, just remembered that I have a check for existence of onDidDispatch\nthat shouldn't be there; can remove it in an hour.\n. Hmmm, I'll have to check the amount of breakage that causes in 1.0.7. If\nit's usable, you're right.\n. Yup, seems usable all right\n. Seems to be the same issue as #806, addressed in #827.\n. When the cursor is gone, do other things work? `hjkl` movement, `a` to append and so on? Does the cursor reappear? Do the commands behave as if the cursor was where expected, just invisible?\n. Thanks; to get `^`, do you press `shift-6` or some other key combination? There seem to be problems with Atom and international keyboards.\n. In case you haven't already, can you please try it with https://atom.io/packages/keyboard-localization installed? Cf #709\n. Maybe you can check Keybinding Resolver, it might tell you what Atom thinks you're pressing.\n. Yup, sorry, this seems to be an Atom issue. You could fix it in your `keymap.cson` with a custom binding or several.\n. It may be atom/atom-keymap#37, I think.\n. Good point, added appropriate expectations of not beeping. \nAs for the commented code - should I just move the spy on beeping to every test that uses it? This way, specs would start beeping again if we add beeps in other places and do not test for them.\n. OK, very good point. Removed.\n. duplicate of #791, I suspect.\n. The fix hasn't been released in a vim-mode release yet, I'm afraid.\n. No, the fix is merged, just waiting to be released\n. @brigand can you please describe how `=G` behaves differently from what you\nexpect, best on a simple test case?\n. I don't feel strongly either way, happy to close this in a week if nobody says otherwise.\n. Would this be a duplicate of #468?\n. @wolftune are you using a package to get the the alt-shift-arrow functionality? (I'm using `multi-cursor` with custom key mappings.)\n. You can always use the blackhole register `_` to prevent updating the clipboard. Would this help?\n\nAn Atom package for clipboard history might be quite interesting indeed.\n. @mushketyk can you please check what the Key Binding Resolver (toggled with `cmd-.` or in the Packages menu) shows when you've pressed `ci'`?\n. I'm especially interested in what the keybinding resolver shows when you\npress c and ' please.\n\nAlso, you are restarting Atom along with Sublime, right? :smiley:\n. @alexbooker can you reliably reproduce the condition? I tried `ci'` in various places of your test name and it worked properly. And if you can reproduce it, does it also show up when you disable packages other than vim-mode and restart Atom?\n\nIt could also be that the user sometimes, through a distraction, spends more than a second between typing `i` and `'` \u2013 that would cancel the Atom command.\n. @alexbooker in case you haven't already, can you please try it with https://atom.io/packages/keyboard-localization installed? Cf #709\nI don't have Windows so I can't reproduce it.\n. do you have anything specific in mind that doesn't work with multi-cursor-plus? I could imagine integration like this: motions like `w` could move only the last cursor while the other cursors stay put - is that what you had in mind? That could be cool, and shouldn't be terribly hard.\n\nOf course any vim-mode commands that don't work properly with multiple cursors should be reported.\n. My preference is for multi-cursor (not -plus) because the alt-x is an extra keystroke I find unnecessary. \n\nIn fact, the demo at multi-cursor-plus, where xe (she or he) puts the cursors after those apostrophes, has much too much cursor movement, from a vim perspective. With vim-mode, as is, do this: \n\n![atom](https://cloud.githubusercontent.com/assets/807315/9592977/19684ae8-5041-11e5-9501-b724e69530f4.gif)\n1. duplicate the cursor across all those lines (Atom's editor:add-selection-below) no matter what column you're in, \n2. then go `0f:;` to get the cursors all where you want them; \n3. then `imulti-cursor-plus<escape>` to add that text; (autocomplete should work the same)\n4. then `B` to get back to the space, then `i<20 spaces><escape` to get all the text past the longest first parth, (this diverges from how xe does it),\n5. `0<24 l>` to get all the cursors in a column where we want the second block to end up,\n6. `dw` to delete the unnecessary spaces.\n\nSee, maybe we don't so badly need to have vim-mode motions for _the last cursor_ when they normally affect all the cursors and usually, like in this case, that's quite exactly what's needed.\n. @wolftune sorry if I came across as meaning that _multi-cursor-plus_ isn't _needed_, not at all. The pointer to _vim-multiple-cursors_ above is also much appreciated, and it shows me how much I've fallen behind modern text editing by sticking to my comfortable old VIM without extensions for so long.\n\nI'm delighted how much of what used to be done with block selections and `q` macros can be done with multiple cursors in a more natural way. (Again, not to say that we no longer need macros and block selections.)\n\nAdding support in vim-mode to easily add multiple cursors is desirable, and this is a valuable issue. Please ping me if it's still open in April.\n. Yes, this is a conflict; more VIM/windows users could chime in on which key\nbinding they prefer.\n\nFor now, you can restore the desired mapping in your personal keymap by\nadding the default one there.\n. Duplicate of #580, addressed in #609 which is waiting on the resolution of #568 v #849.\n. try the `cursor-history` package, it seems to cover these\n. Hi, line 660 is the right one, did you add `or @mode is 'insert'` ?\n\nAlso related to #840.\n. Is this behaviour consistent with other text objects? Can't test it today,\ndon't want to forget.\n. Thank you for clarifying. Now I see Vim is similarly inconsistent. Is it\ndesirable that vim-mode should replicate this behaviour?\n. If you're not in visual mode, jumping to the nearest quoted string and selecting its contents is the default behaviour of the `vim-mode:select-inside-double-quotes` action. Since vim-mode doesn't support `gi` at the moment (nor have I seen any calls for it), perhaps we might bind `gi\"` to _go to inside of double quotes_? \nFor now, if your muscle memory doesn't terribly mind, you can put the following in your keymap:\n\n```\n'atom-text-editor.vim-mode.normal-mode':\n  'g i \"': 'vim-mode:select-inside-double-quotes'\n```\n. Hi, out of curiosity, why do you prefer to use vim-mode over vim-mode-plus? (I haven't tried vim-mode-plus myself, but I hope to try it one day.)\n. Thanks @stefanvlaski !\n. Have you tried the \"Use Clipboard As Default Register\" setting?\n\nIn VIM and in Atom, I often use `xp` to switch two characters, e.g. in a typo like \"foten\" for \"often\".\n. I have noticed and it's annoying, it's on my list but nowhere near the top.\n. This seems resolved; could be closed? (just noticed)\n. @janbaykara can you please give an example?\n. I don't use either of these packages so I need a bit more - any chance you could write down some steps to reproduce the problematic behaviour, please?\n. Hi, some of this is addressed by #556 \n. @robru, in #561 I have some fixes for \\* and # \u2013 is this related?\n. Yes, I'd like to have a look, @romgrk ; can't promise to do anything quickly though. Is it in any way related to, or similar to, https://atom.io/packages/atom-macros (which I also have yet to look at)?\n. Oh, how mistaken I've been about that package! Yes, I'd like to have a look at yours.\n. Yes, macros should be more general, not specific to vim-mode. I can imagine that the recording and replay functionality would be quite generic; the only real ties between macros and vim-mode would be key bindings, and the fact that in vim-mode, the macro should be recorded in a register, while without vim-mode, it's possible a macro package would need to replicate some form of registers.\n\nOooh, cool, how about we spin off vim registers into a separate package? When, oh when, will we have package sets to make this possible? :grinning: \n. @PandaWhisperer, does it mean you have a team of ten, waiting for this\nfeature?\n. @arcseldon I don't know of anybody working on this, but I've been occuppied by my day job since October and can't spend any time on vim-mode at all, so I could easily have missed it. I expect to do more vim-mode work (which could include macros) in the spring and summer, so don't hold your breath. 8-)\n. You have `visibility: visible` both for .cursor and .cursor.blink-off - one of them should have `visibility: hidden` or some such, I suspect. \n. @ardrigh you may benefit from multiple cursors here - see my last comment in #468 \nExactly for what you describe above, I can now do `cmd-down` a bunch of times to create as many cursors as I need, and then `i#<esc><esc>` - the second `<esc>` will get rid of the multiple cursors.\n. is this bug still there?\n. Just a thought - I could imagine a configuration option, or a per-language option somehow, for `w` and `b` to mind camelCase. Additionally, this setting could somehow affect the `iw` and `aw` text objects. \n\nIt's about time (and this might be the place) that someone reinvents the principles of modal text editing in the modern setting of windows, panes, big screens, widespread camelCase, colours, highlights and so on.\n. #556 addresses this\n. should we close this issue?\n. Hi, should this issue be marked closed?\n. I can't replicate the bug - is it still there?\n. @learning is this still an issue now that #556 was merged?\n. You can try this, it works pretty well for me, most of the time:\n\n#### Remap cmd-up and cmd-down to add a cursor\n\ninit.coffee:\n\n```\natom.commands.add \"atom-text-editor\", \"my:add-cursor-down\", ->\n  addCursorInDirection(1)\n\natom.commands.add \"atom-text-editor\", \"my:add-cursor-up\", ->\n  addCursorInDirection(-1)\n\naddCursorInDirection = (dir) ->\n  editor = atom.workspace.getActiveTextEditor()\n  cursor = editor.getLastCursor()\n  coords = cursor.getBufferPosition()\n  newcoords = { column: cursor.goalColumn || coords.column, row: coords.row + dir }\n  newcursor = editor.addCursorAtBufferPosition(newcoords)\n  newcursor.goalColumn = cursor.goalColumn || coords.column\n```\n\nand in your keymap:\n\n```\n'atom-text-editor':\n  'cmd-down': 'my:add-cursor-down'\n  'cmd-up': 'my:add-cursor-up'\n```\n\nPress `esc` to remove all but the last cursor.\nCopy&paste will only select the last selection, not all of them, so it doesn't do block text manipulation, but it works well for some tasks with columns.\n. @wolftune can you please check for me what the Key binding resolver (toggled with `cmd-.` or in the Packages menu) shows when you press `alt-shift-up`? Thanks!\n. Thanks @wolftune, that helps - I didn't know these commands were there. Still, I find the _multi-cursor_ package enhances on the add selection functionality.\n. Yes, VIM block mode is different from multiple cursors in several ways. We want block selection mode even if many of its uses can be done with multiple cursors instead. To get a real vim-like block selection mode, we'd need changes in Atom I think because currently it doesn't allow us to put a cursor or selections after the end of the line.\n\nAnd then there's the fun of copy/paste with multiple cursors (likely in scope of #855) and copy/paste with block selections.\n\nYeah, if this isn't solved by next spring (when I'll next have a big chunk of free time), I just might take a stab. :smile:\n. seems to be working now, input field not showing for single-character-input commands, close the issue?\n. related to #597 - when that's fixed, this should be easy to implement\n. Interesting; I too thought that `:w` should really be mapped to save, but then I remembered that I added a mapping in my vim for `cmd-s` anyway, so I'll be happy to try and retrain my muscle memory on that bit. \n\nI have thought, however, that `:` could map to `cmd-shift-p` \u2013 open the command palette \u2013\u00a0that could be more in the spirit of what one does with `:` \u2013 what do you think?\n. Awesome; I'm quite late to the party, so thanks for the pointers. 8-)\n. Thanks, done\n. Sorry @maxbrunsfeld but I've never done rebasing before; is it now as it should be? Or should I maybe go create a new clean branch off of your master and PR that?\n. Thank you! All done.\n. Cool, no worries. This one was over before I even noticed.\n. #560 addresses this\n. Good to know, thanks @AsaAyers \u2013 I'm still new here. I edited the first commit, is that what you mean by body? \n. Great, I've been hoping to be able to reproduce this, now I can; let's see if I get some time to play with this before someone else fixes this. 8-)\n. Hmm, this one has fallen through the cracks. @dsandstrom do you have any spare cycles to update #581? If you don't, I can clone that PR and finish it.\n. Thanks for patiently explaining your thinking there! And for merging while I'm writing this comment, that was cool. 8-)\n. OK, I'm looking at making `gu`, `gU`, and `g~` work as operators; currently they don't.\n. Thanks for the thanks, I'm doing it for myself though, and happy that I can contribute. 8-)\nI think it behaves better now; I wasn't familiar with `g~` and the ilk so I missed that.\nAnd I understand a bit better how vim-mode operators work, that's good too.\n. I've rebased it to the current status, and finally added tests now; @maxbrunsfeld is there anything holding this one back?\n. @maxbrunsfeld I've rebased it to master (needed after PR #616), and replaced cursor.autoscroll with the public editor.scrollToCursorPosition, now hopefully it's OK?\n. @bronson how do you get deprecation errors, please? I can't seem to see any when I run tests in this PR's branch with the current vim-mode master merged in.\n. Ah, #738 \u2013 sorry, I went through my email in reverse order.\n. Please let me know if anyone is working on this; I may take a stab (unless marking takes precedence). I use `R` a lot.\n. Any thoughts on #573, anybody? 8-)\n. I've now added a test, no idea why I couldn't do it the first time around. I think this PR is now good.\n. @maxbrunsfeld is anything holding this PR back? (And a question of GitHub Etiquette which I don't know yet very well: is it all right for me to ask that?)\n. Super, thank you. 8-)\n. Thanks, I should soon get some time to rebase this to the newest state of\nthe code. @maxbrunsfeld any suggestions in case you don't quite like how it\nwas done?\n. Rebased to current state of the art, cleaned up.\n. Quite right, sorry about that. Working on a fix.\n\nAbout the wrapping, @bronson, do I understand correctly that you have wrapLeftRightMotion off, and yet want that motion to wrap in insert mode?\n. Fixed bronson/vim-mode-next#4 , but need to postpone rebasing to master for now. This PR is related to #609 and should be considered together, and that one needs maintainer guidance.\n. Thank you, good catch. If we find other similar interactions, we can start thinking about how to address this in a less case-by-case way.\n. Forgot to say explicitly: I added a fix for the autocomplete issue. 8-)\n. Yes @bronson, that's exactly the issue that one immediately imagines. I suspect, though, that due to life being how it is, interactions with _j-random-plugin_ would need some other workaround. Notice how only up/down is in `not(.autocomplete-active)` and not left/right; I'm sure _j-random-plugin_ will have a different conflicting set. As they say - one is an incident, two is a coincidence, and three's a pattern. I'd like to postpone trying to generalize until I see a pattern. If Atom provides one, I'd love to know about it.\n. I just realized this approach to fixing #565 isn't right - I've only taken into account arrow-key motions but not any other motions than can happen in insert mode (pgdn, end etc.). I'll redo this PR with `onDidChangeCursorPosition`.\n. @bronson fixing it with `onDidChangeCursorPosition` will be one fix for any motion, including mouse clicks. I have 30e4073c (a biggie) and #767 (a small one) in the queue before I can get to this one.\n. @bronson I'm not sure what you mean about cursor positioning there\n. Ah I see, I'd forgotten about restricting left/right motions in case wrapLeftRightMotion is off. \nI've been trying to do the interrupting of undo with `onDidChangeCursorPosition` but it's a huge pain - of course Atom will report a cursor position change on every input (at least it says the cursor motion was caused by text change, except backspace _doesn't_ report the motion was caused by text change); and bracket-matcher's insertion of `()` when the user types `(` also causes a cursor motion. \n\nAt the moment I'm thinking that some departure from VIM is warranted here - perhaps insert undo should work like normal, non-vim-mode, typing undo? \n\nMy littlest one has been keeping me busy these days but soon I should be able to make an alternate PR to show what I mean.\n. merge conflicts resolved\n. added handling of backspace as undo, added further tests, rebased to master, enjoy. 8-)\n. @bronson, I think just one line https://github.com/jacekkopecky/vim-mode/commit/2d06dc73d14e676a3724f295f3e0ff358af599b4#diff-6490a794da4d70296766233694896f7fR423 is missing.\n. @bronson regarding block cursor - I got inspiration from your commit, but I hope you don't mind if it ended up slightly different. Thanks for poking me about it.\n. :+1: \n. Sorry, I took the style from my own custom style and didn't realize I used `px` units. Relative units are more appropriate, hence the last commit.\n. rebased to master; and I can't seem to replicate that weird behaviour I used to see with multiple cursors, maybe it was something in Atom that got fixed... I'll remove that comment from the docs.\n. And I still can't get it as simple as you suggested, @maxbrunsfeld : \nSince multiple entries in `ContentsByMode` share the same class name, there was a risk that a later entry with the same class name but not a matching mode would remove the class set by a preceding entry with a matching mode. In other words, in visual.characterwise, the `@element` would not have the class `status-bar-vim-mode-visual` because visual.blockwise would remove it.\nSo 5490b33 does things differently still. Comments welcome.\n. Thanks! 8-)\n. that's now history (still true but not a big problem I think), can be closed?\n. Indeed, #609 addresses this but needs a bit more work.\n. @dsandstrom can you please clarify what you mean by `dw` deleting the preceding space in VIM? I can't seem to see such behaviour. I'm asking because this is related to #555 and related stuff I've had my eye on. 8-)\n. I also have this problem when using v.40\n. In my case, the problem has gone away after enabling \"use shadow DOM\" in the main settings - I can't remember why I disabled it.\n. My interpretation seems to differ: the option in Atom is described as \n\n**Use Shadow DOM**\n\n```\nDisable if you experience styling issues with packages or themes. Be sure to open an issue on the relevant package or theme, because this option is going away eventually.\n```\n\nI read that as meaning the option to _disable_ shadow DOM is going away, and it was _enabling_ shadow DOM that fixed the issue for me.\n. right, it may be obsolete, I'll check. If so, should I keep the PR with just the specs, or should we just drop it?\n. Done, indeed the change in #555 did fix this.\n. Just found #417 which led me to find a bug in my PR - a yank backwards now doesn't scroll to the newly positioned cursor (because a yank backwards moves the cursor - why should a yank backwards move the cursor when a yank forward doesn't?)\nBut interestingly `yk` doesn't move the cursor in vim-mode but does in VIM.\n. Hmmm, can't seem to be able to replicate the scrolling bug I was talking about, maybe df13c6b50abc73972da455e37f280bd82c4bb9a6 fixed it.\n. this one no longer works in the newest atom, I'm looking into fixing it\n. all new and improved:\nThis PR makes the following improvements to Yank:\n- cursor moves to the beginning of the yanked range\n- but if the motion was linewise, it stays on the same column as it was, so it only moves to the first yanked line\n- cursor doesn't move for forwards yanks\n- screen doesn't move if the cursor doesn't\n- all properly tested\n\nWithout this PR, `yG` scrolls the screen so the cursor is at the top (unless the end of the file is visible when doing the `yG`) because the `G` motion actually moves the cursor to the end of the file, then the cursor position is restored and the screen then autoscrolls from the bottom of the file to follow the cursor.\n. @maxbrunsfeld any thoughts on this new and improved version, please?\n. Thank you, all fixed.\n. #555 addresses this one\n. This is a great discussion to have.\n\nEx is old and powerful. I don't know that anybody has done an ergonomic comparison between ex-mode and atom ways of doing things that don't fit within the few keystrokes of vim-mode, and I dare not guess which way the comparison would favour. I for one haven't missed ex-mode yet.\n\nThe reasoning for having ex-mode outside of vim-mode is the size of the resulting package, correct? \n\nWould anybody be willing to measure the numbers? How much bigger would the memory footprint of a combined package be, in comparison to having just vim-mode installed, and also in comparison to having both? How much longer would Atom startup take in those three situations?\n\nWhile I haven't missed ex-mode yet, I don't think I would mind having it. I might even choose to disable it, just to see whether using more of the keyboard than ex-mode does would keep working well for me. But I suspect I wouldn't perceive the added bulk if ex-mode was integrated in vim-mode.\n\n@nnjpp raises a valid point, IMO. Please consider this a vote for bringing ex-mode into vim-mode.\n. The issue of ex `:` commands used as motions is bigger than vim-mode/ex-mode. If there's a package out there that provides extra motions (e.g. `cursor-history`, `jumpy`, and more) or when Atom provides more motions (e.g. camelCase motions), we would probably want vim-mode to integrate those seamlessly. And think about `c<click>` \u2013 change until the point where I click after pressing that `c`.\n\nI just discovered `TextEditor::onDidChangeCursorPosition`. I hope to be able to try itegrating that as support for arbitrary motions combined with vim-mode operators.\n. Guess what, MacVIM handles `c<click>` as described above. I never knew. 8-)\n. For moving all cursors and staying within the line, and not canceling visual mode, this may be better in your `init.coffee`: \n\n```\nPrefixes = require './packages/vim-mode/lib/prefixes'\nMotions = require './packages/vim-mode/lib/motions/index'\nVimMode = require './packages/vim-mode'\n\nMoveByLines = (num) ->\n  editor = atom.workspace.getActiveTextEditor()\n  vimState = VimMode.getEditorState(editor)\n  repeat = new Prefixes.Repeat(Math.abs(num))\n  if num > 0\n    move = new Motions.MoveDown(editor, vimState)\n  else\n    move = new Motions.MoveUp(editor, vimState)\n  vimState.pushOperations([repeat, move])\n\natom.commands.add 'atom-text-editor', 'custom:move-ten-up',   -> MoveByLines(-10)\natom.commands.add 'atom-text-editor', 'custom:move-ten-down', -> MoveByLines(10)\n```\n\nand of course, your `keymap.cson` then should contain something like this:\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'K': 'custom:move-ten-up'\n  'J': 'custom:move-ten-down'\n```\n. this PR is subsumed by #607 which does this and more.\n. #568 is WIP again so this PR will have to be delayed.\n. I can get back to this one when we're done with #849 or #568.\n. I'm pretty sure gUU and friends would be relatively easy - I'll be happy to help with that when this PR gets merged.\n. Seems to need rebasing please.\n. @daniloisr this PR changes the behavior of these commands - in VIM they scroll the screen so the cursor stays on the same line on the screen, here they don't. I think we'd want to keep the scrolling behavior as well as fixing how these motions don't affect the visual mode. (Yes, they do seem to be motions rather than scrolls.)\n. Hi @daniloisr, this looks interesting, I'm hoping to get enough time to focus on this in a few days, hope that's OK.\n. Coincidentally, I just looked at this today and it's a limitation in Atom -\ncursors with selections don't show up.\n\nI found a workaround though: see\nhttps://discuss.atom.io/t/show-text-cursor-while-selecting-text/5323/2\n\nThen I'm not sure what the cursor will look like because I've styled it for\nmyself a long time ago. You'll probably want a thin cursor between\ncharacters rather than a block cursor because if the cursor is at the end\nof a selection, it's after the character rather than before it, so a block\ncursor would be outside of the selection rather than part of the selection\nlike in VIM.\n\nI'm typing this on a tablet, ask me for my styles if things don't look\nright and I can post them when I'm on the computer again tomorrow.\n. Here's my cursor styles; no blinking, below text but above selection, bright green, same in visual mode as in insert mode. Hope it helps.\nThe last block of styles puts selection under the cursor so the cursor is always visible.\n\n```\natom-text-editor.vim-mode.command-mode,\natom-text-editor.vim-mode.visual-mode,\natom-text-editor.vim-mode.operator-pending-mode,\natom-text-editor.vim-mode.insert-mode\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: 2px solid #29ff2f;\n      opacity: 1;\n      z-index: -1;\n      visibility: visible;\n      background: none;\n    }\n  }\n}\n\natom-text-editor.vim-mode.command-mode.is-focused,\natom-text-editor.vim-mode.operator-pending-mode.is-focused,\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      background-color: #29ff2f;\n      opacity: 1;\n      z-index: -1;\n    }\n  }\n}\n\natom-text-editor.vim-mode.operator-pending-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      background: none;\n      border: none;\n      border-bottom: 10px solid #29ff2f;\n      opacity: 1;\n      z-index: -1;\n    }\n  }\n}\n\natom-text-editor.vim-mode.insert-mode.is-focused,\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: none;\n      border-left: 3px solid #29ff2f;\n      z-index: -1;\n      visibility: visible;\n      opacity: 1;\n      background: none;\n    }\n  }\n}\n\natom-text-editor.vim-mode.replace-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: none;\n      border-bottom: 4px solid #29ff2f;\n      background: none;\n      z-index: -1;\n      visibility: visible;\n      opacity: 1;\n    }\n  }\n}\n\natom-text-editor.vim-mode\n{\n  &::shadow, // shadow-DOM enabled\n  &           // shadow-DOM disabled\n  {\n    .highlights .highlight.selection .region {\n      z-index: -2;\n    }\n  }\n}\n```\n. Sure, go ahead. 8-)\n. Update of the above: giving the highlights a z-index of -2 doesn't work (for me anyway) - this means the cursor is shown at the end of a selection (because it's actually after it) but not at the beginning of a selection (because it's obscured by the selection).\nHere's code that offsets the cursor so it's extra thick - but it doesn't show up as extra thick because half of it is obscured by the selection:\n\n```\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: none;\n      border-left: 6px solid #29ff2f;\n      left: -3px;\n      z-index: -1;\n      visibility: visible;\n      opacity: 1;\n      background: none;\n    }\n  }\n}\n```\n\nFeel free to re-enable blinking. \n. @maxbrunsfeld any comments on this one please?\n. rebased, low-hanging fruit\n. `iW` has been there for a while, so has `i(`, but not `ib`\n. Thank you. 8-)\n. I've had the same issue before. However, I've also edited SVG where in a path, a negative number can easily follow an alphanumeric character (example: `<path style=\"stroke: #594\"  d='M390,270 v5 h5 v-5 h-5'/>`); and I can all too easily imagine editing program source code where `x-3` means subtraction, not an identifier.\n\nPerhaps we need extra commands for ignoring the `-`; how about `ctrl-shift-a` and `ctrl-shift-x`? Would this work for you?\n. @t9md without the fallback, the new specs were failing for me \u2013 it seems when running specs, `atom.config.get` doesn't return the proper defaults. I don't have the brain cycles now to look into that, so I've included a workaround in the specs now instead of in the main code.\n@maxbrunsfeld \u2013 is this better now?\n. Yes, and it also doesn't play nice with automatic matching of parentheses:\n`i(abc)<esc>` can replay as \"()abc\". I haven't yet had enough time to try\nand solve this one. I expect one fix can cover both problems, though.\n. Ah, same as #546 ?\n. Perfect!\n. I'd disagree about this not being a vim-mode issue. Atom in general plays\nnicely with this feature (holding a key for special characters, I'll just\ncall it \"the feature\").\n\nThe feature is a modern experiment in usability, and it assumes a-z keys\nare not often repeated by holding them. Vim-mode violates thar assumption,\nand only in \"command\" mode. It would make most sense if we managed to turn\nthe feature off in command mode.\n\nI have the feature disabled by default but would give it a try if it stops\ninterfering with vim-mode command mode.\n. Thanks @t9md, I installed cursor-history and I'm quite happy now.\n. keymap.cson is a data structure, basically a hash map. Your code \n\n```\n'atom-text-editor.vim-mode.command-mode':\n  'shift-O': 'exit-insert-mode-if-proceeded-by-shift-o'\n\n'atom-text-editor.vim-mode.command-mode':\n  'o': 'exit-insert-mode-if-proceeded-by-o'\n```\n\nbasically overrides the first declaration by the second one. Please try to combine it:\n\n```\n'atom-text-editor.vim-mode.command-mode':\n  'shift-O': 'exit-insert-mode-if-proceeded-by-shift-o'\n  'o': 'exit-insert-mode-if-proceeded-by-o'\n```\n. Seems to need rebasing please.\n. please remove `.swp` from the commit :sunglasses: \n. There's a PR #573 for this, but it got no comment from the maintainers.\n. Atom 1.0.2, vim-mode 0.55.0, I can't reproduce any of this. The original report by @Arsca lists many user packages - any chance any of you could try if any of your user packages might be causing this? In other words, try disabling them all except vim-mode and let's see if the error still occurs. And can you please post the stack trace and the exact atom and vim-mode version info, if the error does indeed still occur?\n. hmmm, and just to make sure - you have restarted Atom recently, right? I'll look at this at some point - it's hard because I can't reproduce it myself.\n. Hi, just to check - would shift+7 normally produce a slash (`/`) on your keyboard?\n. rebased, low-hanging fruit\n. It seems that both #392 and #650 are actually fixed by this PR (but then, I am tired, so @greg-hellings, @peterjeliot, @podgib please verify).\n. Right, now it's also handling autocomplete.\n. @yriveiro do you, by any chance, have a way of reproducing this, please?\n. Are these `ex-mode` commands \u2013\u00a0that is, an issue for the `ex-mode` package?\n. I just hit the 1.0.0 release rush and Travis couldn't get Atom - any way to try the build again when the seas are calmer?\n. Ah, I made cursor visible in visual mode so I've noticed that in visual-line selection mode, the cursor is placed _after_ the selection, so indeed the cursor is on line 78. This may need to be special-cased in ex-mode; anyway, the issue does seem to belong there.\n. rebased, relatively low-hanging fruit, merges cleanly with #573, #623 and #711\n. tests updated to actually use multiple editors (thanks for the suggestion @maxbrunsfeld); please review especially the changes in spec-helper - hope this is useful for other specs too.\n. thanks for the patience and attention to detail 8-)\n. Thanks, and no worries about the timing, I understand that getting Atom 1.0 out the door made everyone quite busy. 8-)\n. just guessing, but it seems like it needed a change of `'vim-mode'` to `'vim-mode-next'` in the spec file: https://github.com/bronson/vim-mode-next/blob/0ad53fbfa4b2c626e00d7e16c98e95fc6232e920/spec/insert-mode-spec.coffee#L7\n. No worries, done. I tend to use `ctrl-y` a lot, but I'm not sure I've ever used `ctrl-e` anyway.\n. I'm lightly reviewing vim-mode PRs and this one strikes me as having too\nlittle to do with vim-mode.\n. @petemill do you have a reliable way to trigger this, please? And what are the versions of your Atom and vim-mode?\n. This is a wider issue: vim-mode doesn't realize it's encountered an unrecognized key sequence, and cancel it. Above, it's `ix` in visual mode. In #760, it's `ci3`; therefore while in VIM `ci3w` behaves as `w`, having cancelled `ci3`, in vim-mode it behaves as `c3w`, ignoring the `i`. This is also part of #741.\n. Hopefully there's no need for brute force here, even though I enjoyed employing it with ctrl-r. 8-)\n. @bronson you wrote 4 characters should be replaced by the new text, and you only mention 4 characters as the size of the new text - do you mean that the length of text replaced by `.` should match the length of the new text? \n\nThe way I understand it, and checked in MacVIM now, is that `s` or `c` in visual mode that has selected `<x>` characters (e.g. 5) is repeated as `c<x>l`, e.g. `c5l`. The number of characters to disappear matches the length of the original selection, not the length of the new text. In linewise visual mode that selects `<y>` lines, a `c` is replayed as `c<y-1>j`.\n\nI'd be happy to look into this when the maintainers come back from holidays and reduce the queue of my other PRs. Or shall I just do that for the benefit of vim-mode-next? (Which is a laudable effort!)\n. Thanks @bronson, I was missing an interesting case: `c` of a characterwise visual selection that crosses `<x>` line breaks will, when replayed with `.`, delete like this: until the end of the current line (however long it is), any number of whole lines (`<x-1>`), and the exact number of characters originally selected on the last line, up to (and **including**) the `\\n` on the last affected line.\n\nWell, that's probably not clear, so here's how you can try it out:\nPut this in VIM:\n\n```\n123456789\nabcde\nfghijklmnopq\nuvwxyz\n```\n1. put cursor on `c`, \n2. visually select until (including) `m`\n3. `c` to change it to `foo` (now the second line in the window will be `abfoonopq`)\n4. `u` undo so we have four lines again\n5. move cursor to `b`\n6. `.` to redo the change (now the second line in the window will be `afoonopq`)\n7. `u` to undo again\n8. move cursor to `2` on the first line\n9. `.` to redo the change, now the first line will be `1foofghijklmnopq`\n\nThe last part is weird to me, I'd expect the last line break to stay there, ending with `1foo` on the first line, and `fghijklmnopq` on the second line. Any thoughts or preferences? It will affect the code. I'd be happy to stray away from accurate replication of VIM here.\n\nSo a question to everyone: how should vim-mode behave here?\n. I'm getting \n\n```\n      ReferenceError: fail is not defined\n        at [object Object].<anonymous> (/Users/jacek/prog/oss/vim-mode/spec/spec-helper.coffee:13:5)\n```\n\nIs it just my version of jasmine being somehow outdated? If so, how do I update the version of jasmine that is used by `apm test`? \n. Yes, but my quick search just now seems to show that `apm` testing still uses jasmine 1.3 (https://github.com/atom/atom/pull/6099 and https://github.com/atom/atom/pull/5393). Did you do anything to upgrade that? Or am I missing something?\n. I now found that `this.fail` works while simple `fail` doesn't, on my machine. I see the same code you see.\n\nThe failing `fail` will still fail the test because of that `ReferenceError`, and the logs will still show the right deprecation call, so that's not a problem.\n\nAlso, when I merged #738 into my own private version, `apm test` would fail every test after the first one that used a deprecated call. \n\nSo I ended up with this patch against #738:\n\n```\n--- a/spec/spec-helper.coffee\n+++ b/spec/spec-helper.coffee\n@@ -10,7 +10,8 @@ beforeEach ->\n afterEach ->\n   if Grim.getDeprecationsLength() > 0\n     Grim.logDeprecations()\n+    Grim.clearDeprecations()\n-    fail 'Deprecated APIs were called'\n+    this.fail 'Deprecated APIs were called'\n\n\n getEditorElement = (callback) ->\n```\n. Does #568 now belong back on the top list?\nThis is a great list, btw; if I was a maintainer, I'd love this kind of effort.\n. I've just reproduced it - the problem shows up as described on a file with only two lines. Try this in a new file:\n`ifoo<cr>bar<esc>kVj>.`\nStrangely enough, it works with `v` instead of `V`, and it also works with an extra `<cr>` after `bar` and an extra `k` before `V`. I'll have to look into it. But I hope a fix for this can be another PR if this one can otherwise be merged - it seems to work well enough in situations where I've tried it. If this PR is merged, an issue for the strange behaviour should be opened.\n. @50Wliu \u2013 I've reproduced it with a simple `d2ap` anywhere.\n. Yay!\n. In the situation like yours, I've been doing it like this:\n1. put cursor on `scanRange`\n2. press `cmd-d` three times\n3. press `<escape>` once - it will drop visual mode but it will keep the three cursors\n4. press `b` if you want to start inserting at the beginning of the word, nothing otherwise\n5. press `i` or `a` as appropriate to start editing\n\nMultiple cursors rock!\n\nI've also hacked together operations to add cursor below/above the current cursor, which has helped with some operations that in VIM I'd do with macros or visual selections. In `keymap.cson`:\n\n```\n'atom-text-editor':\n  'cmd-down': 'jacek:add-cursor-down'\n  'cmd-up': 'jacek:add-cursor-up'\n```\n\nIn `init.coffee`:\n\n```\natom.commands.add \"atom-text-editor\", \"jacek:add-cursor-down\", ->\n  addCursorInDirection(1)\n\natom.commands.add \"atom-text-editor\", \"jacek:add-cursor-up\", ->\n  addCursorInDirection(-1)\n\naddCursorInDirection = (dir) ->\n  editor = atom.workspace.getActiveTextEditor()\n  cursor = editor.getLastCursor()\n  coords = cursor.getBufferPosition()\n\n  newcoords = { column: cursor.goalColumn || coords.column, row: coords.row + dir }\n  newcursor = editor.addCursorAtBufferPosition(newcoords)\n\n  newcursor.goalColumn = cursor.goalColumn || coords.column\n```\n. Typing `:20` would be an ex-mode command, so possibly this could be an\nissue for that package, rather than vim-mode.\nOn 9 Jul 2015 02:33, \"Scott Bronson\" notifications@github.com wrote:\n\n> Probably related to #716 https://github.com/atom/vim-mode/issues/716\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/749#issuecomment-119778535.\n. I struggle to reproduce it. Are your multiple cursors on consecutive lines, by any chance? Vim-mode (or Atom, not sure) combines selections, and thus can remove cursors.\n. Yes, backwards deletions don't properly handle inclusive motions. If you want to have a go, you may want to start in `Motion::moveSelectionInclusively`, I think.\n. Ah, I had this issue on the list of things that bug me, and forgot someone else was working on it. Sorry @irrationalistic if you were also working on fixing it. If you already have the fix and it's better than mine, feel free to propose an alternative PR.\nI'm looking forward to your extensions of `%` to \"additional types for comments and functions\".\n. And thanks @bronson for spotting the connection.\n. It seems that the status bar is not updated when the user switches to a\ndifferent tab/pane etc. Should be an easy fix. Thanks for the very good\nissue report.\n. This should probably be closed (by #823).\n. Please rebase. 8-)\n. @bzx - do you have steps to reproduce this, by any chance? And what is your vim-mode version, please?\n. Confirmed reproduced, thank you, that'll make it much easier to fix.\n. Seems to be similar to #741, if not the same. I'd love to have a look, unless somebody beats me to it (feel free). 8-)\n. Are you sure `ci3w` works fine? In my tries it seems to work like `c3w` - and in VIM, `ci3` would be an error, the command would be cancelled, and `ci3w` ends up behaving like a simple `w`. This is all a consequence of two issues: **text objects do not know about prefixes/counts**, and vim-mode doesn't correctly cancel commands as soon as an unrecognized sequence is typed in (#734).\n. Thank you, yes, that's a known issue #737 with a fix in the queue #740.\n. @bronson I can't replicate it. Are specs failing, or is it interactive behaviour? Do you have anything with `d` in your own keymap, by any chance?\n. Oh boy, this complicates things. Vim-surround has a key binding for `d s`, so vim-mode's `d d` becomes a binding atom fails to match. Let's see if vim-surround's maintainers are receptive to rethinking their key binding approach.\n. No, I can't seem to formulate this as an issue against vim-surround - it's making a valid use of atom's key binding infrastructure, after all. The above commit addresses these particular interactions, but I'm no longer sure that this approach to handling unrecognised commands is appropriate in Atom vim-mode.\n\nHow about alternatively I work on showing the commands awaiting completion and if a user types `vix` or `ci3w` and gets bitten, they have `u` or `b` to help, and they'll learn that's not a valid combination. \n\nMaybe a debounced beep on unrecognized single-key bindings would help. I'll look into that too.\n. Thinking about your comments @bronson made me realize that perhaps #764 should only cancel on single-key unrecognized key bindings. 386e0c8 implements that.\n\nNow this PR implements the following behaviour:\n- `ci3w` behaves as `3w` after canceling `c` because of unrecognized `i` in operator-pending mode (replayed by Atom after matching unrecognized `i3`). `ci3` beeps and means `3`.\n- `cqw` behaves as `w` after canceling `c` because of unrecognized `q`. `cq` beeps and is a no-op.\n- `vix` behaves as `vx`, but it beeps on the unrecognized `ix` (because atom replays `i` which goes unrecognized, and then it replays `x`).\n\nI also plan to expand the specs to spy on beeping, so `apm test` doesn't beep and the specs verify that the beeps happen.\n\nThoughts welcome.\n. @bronson with the current #764, the interaction with vim-surround looks like this: \n1. you press `d`, Atom sees the possible `ds` from vim-surround so waits for a bit in case you press something. Vim-mode doesn't know yet that anything is happening.\n2. if you wait, Atom will time out waiting for `ds` and just play `d`, which puts us in the operator-pending mode. Vim-surround's complex key bindings cause a delay before the user sees operator-pending mode (and the associated cursor change).\n3. pressing `d` quickly after the first `d`, before Atom times out as described before, means Atom fails to find a multi-keystroke binding that starts with `dd` so it replays `d`, that's recognized by vim-mode which goes operator-pending, and then Atom replays the second `d` immediately and vim-mode deletes the line.\n\nIn short, waiting for complex key strokes delays user feedback, and that can be an issue for vim-surround. I'm tired now but will open it tomorrow if you don't do it first. 8-)\n. another low-hanging, clean-merging fruit here\n. This is a very low-hanging fruit (one line changed), merges cleanly with #573, #623, #711 and #717.\n. This is a guess: it seems to me that CI is complaining about the presence of focused specs. Please try changing `fdescribe` to `describe`. \n. I like the procedurally generated tests with `itMovesByWord` and `itMovesBySubWord`, by the way!\n. This PR also fixes #2, as far as I can tell. Yay for fixing the longest-outstanding issue of vim-mode. 8-)\n. fixes #579 \n. duplicate of #550?\n. I struggle to reproduce this. In step 3, by writing \"hold\", do you mean \"keep holding shift when you hit <up> step 4\", by any chance?\n. Ah, that explains it. When you hit `shift-v`, the whole line is selected, and the cursor is actually on the next line. You can try it by making the cursor in visual mode visible with this style in your `.atom/styles.less`: \n\n```\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      border: none;\n      border-left: 6px solid #29ff2f;\n      left: -3px;\n      z-index: -1;\n      visibility: visible;\n      opacity: 1;\n      background: none;\n    }\n  }\n}\n```\n\nAnd this in your `.atom/init.coffee`\n\n```\nCursor = require 'src/cursor'\nCursor.prototype.isVisible = -> true\n```\n\nWhen you then press `shift-up`, it's (at the moment) the normal Atom selection movement, not a vim-mode movement, so you move the cursor to the beginning of the selection and thus the selection is gone.\n\nThe issue might become: should vim-mode implement `shift-arrow` movements as { start visual mode if not there yet, perform normal vim movement } ?\n. Yes, vim-mode could handle shift-arrow movements. That's a valid issue, I'd say.\n\nI'm curious and hope you don't mind me asking - what makes you hold the shift for the `up` movement, after a `shift-v`? If you press the `up` arrow without shift, it behaves as expected in vim. Alternatively, in command mode, if you press `shift-cursor`, it's doing normal non-vim selection, moving vim-mode into visual (characterwise) automatically.\n. Ah, interesting, my MacVIM does not exit visual mode when I press `up` or any other arrow key without a `shift`. Would you then also want atom vim-mode to exit visual mode when `up` is pressed without `shift`?\n. Oh, I had no idea about this feature! Cool!\nBut I think it would be better in atom rather than in vim-mode. I don't know if a package could do it, or if it would need to go in the core.\n. This also removes the blue box from the search box, though. Also, what does it look like on your system when you press `m` for _create mark_? I've created an alternative, much more complicated take on this issue: #777\n. @t9md I see your point. My theme doesn't use such outline so it doesn't affect me, but I'd probably see such visual tweaks as the domain of themes rather than packages. I'd expect the blue outline to be useful for the search field, for consistency with the rest of the UI. But again, my theme doesn't use box-shadow there.\n. Hi, since #777 was merged, should this one be closed?\n. Tested to work with `atom` and `one` themes.\n. I'm thinking about that. Plus, I use a whole different set of cursors, with an empty rectangle cursor for inactive (which is triggered on `f` and such because the input line is the active editor then) which tends to be enough of an indication in the heat of coding.\nMy cursor styles:\n\n```\n@cursor: #29ff2f;\n@cursorhi: #00ff00;\n\natom-text-editor.vim-mode {\n  &.command-mode,\n  &.operator-pending-mode,\n  &.insert-mode\n  { &::shadow, & {\n      .cursors.blink-off .cursor, .cursors .cursor {\n        border: 2px solid @cursor;\n        background: none;\n        z-index: -1;\n        visibility: visible !important;\n        opacity: 1;\n      }\n\n      .tile {\n        background-color: rgba(0,0,0,0) !important;\n      }\n    }\n  }\n\n  &.visual-mode\n  { &::shadow, & {\n      .cursors.blink-off .cursor, .cursors .cursor {\n        border: 2px solid @cursorhi;\n        background: none;\n        visibility: visible !important;\n        opacity: .5;\n      }\n    }\n  }\n\n  &.is-focused {\n    &.command-mode,\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor {\n          border: none;\n          background: @cursor;\n        }\n      }\n    }\n\n    &.operator-pending-mode\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor {\n          border: none;\n          border-bottom: 10px solid @cursor;\n        }\n      }\n    }\n\n    &.insert-mode,\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor {\n          border: none;\n          border-left: 3px solid @cursor;\n        }\n      }\n    }\n\n    &.visual-mode\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor,\n         {\n          border: none;\n          border-left: 3px solid @cursorhi;\n          opacity: .5;\n        }\n      }\n    }\n\n    &.replace-mode\n    { &::shadow, & {\n        .cursors.blink-off .cursor, .cursors .cursor {\n          border: none;\n          border-bottom: 4px solid @cursor;\n        }\n      }\n    }\n  }\n}\n```\n. @maxbrunsfeld this new and updated version does that - for a hidden input, the editor is invisible, added to the main text editor's parent element. Do you like this better?\n. All done, thank you.\n. I suspect the reason is that composing vim-mode's commands can really only be done inside vim-mode; perhaps we need some kind of API for that? Time to look at what those _services_ are all about.\n. Oh, combining motions outside of vim-mode is possible: here's what I have in my `init.coffee` to combine `n` and `zz`:\n\n```\natom.commands.add 'atom-text-editor.vim-mode.command-mode', 'jacek:center-next', ->\n  editor = atom.workspace.getActiveTextEditor()\n  editorElement = atom.views.getView(editor)\n  vimState = VimMode.getEditorState(editor)\n  vimState.pushOperations new Motions.RepeatSearch(editor, vimState)\n  vimState.pushOperations new Scroll.ScrollCursorToMiddle(editorElement, {leaveCursor: true})\n```\n\nAnd then in the `keymap.cson`:\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  '\\\\': 'jacek:center-next'\n```\n\nThis could, however, be easier.\n. I think this should be possible in the author\u2019s own configuration by combining `y` and `$`. Currently there's a way outlined above; but should vim-mode provide an API akin to vim\u2019s `:map`?\n. This one only beeps when a single-key keystroke hasn't been matched. The problem with #764 is that it needs to react to multi-key keystrokes. Examples:\n\nIn `ci3w`, it sees `i3` as a key binding not recognized by Atom; and Atom only attempts to match `i3` because other two-key strokes starting with `i` exist. #764 cancels `i3` and cancels `c` as well, in order to prevent replaying `i` (not recognized so no-op) and `3` which then gets tied to `w`.\n\nWith vim-surround, the existence of the key strokes starting with `ds` mean that when the user types `dd`, Atom waits after the first `d` in case `s` comes, and when it doesn't, Atom shouts that `dd` was not recognized, #764 cancels the whole thing and the two `d`s don't get replayed, to be combined by vim-mode.\n\nIn here - #781 - there's no canceling, just beeping, and only on single-key unmatched bindings.\n\nWhich brings me to an idea that #764 could only cancel on single-key unmatched bindings. That should take care of interactions with vim-surround. We'll see momentarily.\n. I think I prefer this approach (beep on unrecognized key strokes, without canceling any) to the approach of #764 which tries to cancel pending commands but may delay user feedback.\n\nNeither of these two PRs can copy VIM's behaviour, but it's about handling erroneous input so there should be no consideration of muscle memory.\n. oh boy, tiny merge conflict with #827 - I'll be happy to rebase as soon as that one is merged\n. OK, this one is now ready; please see my [comment above](https://github.com/atom/vim-mode/pull/781#issuecomment-133180031) when considering this.\n. Ah, specs tripped by the command/normal rename; I'll fix that after #787 \n. all new and rebased now\n. Would it make sense, before merging, to combine all the commits into one? It ends up being a rather small and effective patch.\nIn think the specs for \"horizontal scroll cursor keybindings\" in `spec/scroll-spec.coffee` do something with editor width, maybe that can help with adding specs for behaviour with soft-wrapped lines.\n. @t9md I just found the screencount approach has a problem: if you go to the last line of a soft-wrapped long line and press `j`, you will go further down than expected.\nTo illustrate, let's imagine the first two lines below are a single soft-wrapped line:\n\n```\nthis is a very long line that is \nsoftwrapped in a very narrow window\nthis is a second line\nthis is a third line\n```\n\nNow put the cursor on \"w\" in \"softwrapped\", press 'j' and you'll end up on the third line because the cursor moves by 2 lines - the screencount of the line it's on.\n\nI suspect we should not use `moveDown` at all there, instead we should set the cursor's buffer position to its current column and its current row plus however many lines we want.\n\nThat should also put the goalColumn behaviour in line with VIM - the cursor in the example above, going down from \"w\" in \"softwrapped\", should end up at the end of the second line, not on the space after \"this\".\n. I'll wait with my rebases until this one gets merged, if that's all right. 8-)\n. Ah, first guess: the cursor needs a goal column there, and needs to heed it.\n. Oh, this one is of interest to me - I'll try to get to it when we're done merging the current back log.\n. It's an issue for the replace mode as well as for the `r` single replace\ncommand.\n. @50Wliu this one no longer needs reproduction, it's been reproduced. :smiley:\n. This is an issue in Atom: atom/atom#5414.\n. the replace mode problem will be (mostly?) solved by atom/atom#8526 when they :ship: the next version of Atom\n\nthe `r` issue also affects `f` and `m` and so on, users of the hidden variant of `VimNormalModeInputElement`, and is addressed in #846\n. Would this address #835?\n. Hmmm, very interesting indeed - I do see a lot of potential in this\nrefactoring experiment, incl. potential to break the outstanding PRs.\n:sunglasses:\n\nIn the current version in the issue description, if `execute` is taken out\nof Motion, it will have the same signature as TextObject. Maybe all motions\ncan be paired into some text objects? Then Motion can be replaced by the\ncode that's now in MoveByTextObject, and only TextObject would ever be\nextended.\n\nThe current logic for composing things is also highly opaque, and might be\nsimplified if VimState just took more responsibility, eg for minding the\ncounts and registers.\n\nThis feels like the type of effort that should be started when we have 1.0\nand would lead to 2.0, with minimal changes in existing specs. (Refactoring\nspecs would come after 2.0)\n\nSomeone please open an issue for 1.0 roadmap. :sunglasses:\n. I could see an alternative solution to #759, if you don't mind:\n\nText Objects are all called `select-<something>` \u2013 they could be applicable in any mode to simply select whatever their selection is. This would mean TextObject to have the following single extra line:\n\n```\n  execute: -> @select.apply(this, arguments)\n```\n\nThis way, Text Objects would be extra commands that vim-mode normal mode, and insert mode, doesn't have key bindings for, but they would still be meaningful.\n. I for one would leave it there. \n. @mattr- well, we can say the commands don't apply, or we can ask \"could they be useful?\" \n\nCurrently, all vim-mode commands are shown in the command palette, even if they don't have key bindings in the current mode (e.g. the text objects in normal mode). Some might genuinely not apply, but I can't see an argument against this particular PR, making text objects select when invoked in normal mode.\n. Interesting, thanks, definitely will look into it.\n. Yes, quite right, the problem is that vim-mode doesn't know the motion is\nfor selecting. I'm working on a solution.\n. yes, it's #827 \n. I'm very sorry indeed to have caused the regression.\n. @mcastilho the fix (#827) relies on functionality that will be released in Atom 1.0.8 which should be coming any day now, then vim-mode 0.59 should be released very briefly afterwards.\n. Yes, I was thinking that `hasChangesSinceCheckpoint(checkpoint)` could be on TextBuffer, but I haven't dared propose PRs on core just yet.\n\n`getChangesSinceCheckpoint(checkpoint)` would be even more useful \u2013 then we might proceed (maybe with `Patch`) to extract the last added character and undo only that somehow. Plus it might be useful further on, for handling undo and redo of insert operations.\n\nWould you be willing to merge this one until TextBuffer can provide anything like the above? The current behaviour of backspace in replace mode, without this PR, is too buggy.\n. In the specs I see that you expect `dj` on the last line to delete the last line - but that isn't how VIM behaves, and I don't find it intuitive. Is that an intended change?\n. Yes, but that's more of a display issue - VIM chooses not to show a line\nafter the last \\n, while Atom shows it. Both will, by default, save a \\n\nafter the last character.\n. Can you please add some specs that would demonstrate what's fixed here? Best specs that fail without your changes, and pass with them.\n. This would be an issue for the ex-mode package, you may want to open it\nthere please.\nOn 5 Aug 2015 19:20, \"Gary Furash\" notifications@github.com wrote:\n\n> running :%s/ - /\\t/ig\n> turns\n> PO_HDR Purchase Order Header- Header Record for Purchase Order\n> into\n> PO_HDR Purchase Order HeadertHeader Record for Purchase Order\n> instead of replacing the \"-\" with a tab character? Is this user error?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/816.\n. Cool! The generic reflection part feels like it could even be a separate\nNPM package.\n\nPlease add a date to the generated report, and vim-mode package version,\nand if possible also current git commit ID, so it's easy to see if the\nreport is up to date.\n\nWould it be possible/useful to output as the first part a subclass tree\nrather than an unordered list of subclass relationships?\n. Regarding hierarchy: currently, your output is \n- [Input](#input)\n- [OperatorError](#operatorerror)\n- [Operator](#operator)\n- [OperatorWithInput < Operator](#operatorwithinput--operator)\n- [Select < Operator](#select--operator)\n- [Delete < Operator](#delete--operator)\n\nand I think it would be useful to have it sorted alphabetically and nested by subclassing like this\n- [Input](#input)\n- [Operator](#operator)\n  - [Delete](#delete--operator)\n  - [Increase](#increase--operator)\n    - [Decrease](#decrease--increase--operator)\n  - [Join](#join--operator)\n  - [LowerCase](#lowercase--operator)\n  - [OperatorWithInput](#operatorwithinput--operator)\n    - [Mark](#mark--operatorwithinput--operator)\n  - [Repeat](#repeat--operator)\n. The more and more I'm looking at this, the more it looks like it could be an Atom package independent of vim-mode, which would take the current project's coffee files and run this type of introspection on their exports.\n\nAlso, instead of generating a file, how about opening a new text editor and putting the content there? Then the user can choose where to save it, if at all.\n. Yes, by default Atom hides the cursor when selecting; see #617 for tips on how to show the cursor.\n\nWhen you see the cursor, you'll see why `%` doesn't work as expected: in linewise visual mode, the cursor goes at the beginning of the **next** line - the end of the selection - so it's no longer where you expect it to be and `%` can't work.\n\nIt's a current limitation in Atom that it doesn't support linewise selection with a cursor elsewhere than at the beginning or the end of the selection. I have a few ideas for how this could be addressed.\n. Yes, undo in Atom currently puts the cursor in a different place than VIM\ndoes. It's on my radar because it's been bugging me too. I think it's not\njust undoing P.\n\nOoh, a quick thought that I cannot check right now - does vim-state fail to\nmove the cursor after undo to match the cursor move after other commands?\n. This is better, thank you. A little change remains in the status bar manager. Sorry about the failed build.\n. Yes, #806, working on it, sorry.\n. Here's what I think happens on mouse dragging in normal mode: \n1. `mouseDown` after the end of the line, cursor moves to the end of the line and there's no selection\n2. `mouseMove`, cursor moves and selection is started and grows\n   The issue is that without watching the mouse, we don't know in step 1 that we shouldn't move the cursor - hence the behaviour shown in the very helpful animated gif in #806.\n. @maxbrunsfeld yes, I've just verified it. \n\nThe `@processing` flag is there so that vim-mode can put the cursor immediately where it belongs after _vim-mode commands_, but it doesn't reposition the cursor while those commands are working. \n\nFor _non-vim-mode commands_, we notice something has happened with the `onDidChangeCursorPosition` handler, but we only do something about the cursor position after the current tick (that's the `_.debounce(..., 0)` so the foreign commands are done by then.\n. it means, though, that a command like `cmd-<right>` puts the cursor at the end of the line, then drawing happens, and only then the cursor is put where it belongs and redrawn. `$` doesn't suffer this issue, and vim-mode could very easily have `cmd-<right>` mapped to the same command as `$`.\n. @maxbrunsfeld the last comment removes the short cursor flicker on native commands such as `cmd-<right>`. Still uncertain?\n. Because we don't have a good `currentTarget` in the `did-dispatch` event (see https://github.com/atom/atom/pull/8496/files#diff-22aaebf7af3d31bbf37d33248ec7af1cR253) we won't know that the event was for our editor. We might run the cursor position and selection check for every editor on every command, but that doesn't feel right.\n. got it, that should work, thanks\n. I now got rid of all the cursor/selection change listeners (which required a few spec changes), but it works now (with my recent enough clone of Atom, anyway).\n. Thank you for your kind words!\n\nOops, just remembered that I have a check for existence of onDidDispatch\nthat shouldn't be there; can remove it in an hour.\n. Hmmm, I'll have to check the amount of breakage that causes in 1.0.7. If\nit's usable, you're right.\n. Yup, seems usable all right\n. Seems to be the same issue as #806, addressed in #827.\n. When the cursor is gone, do other things work? `hjkl` movement, `a` to append and so on? Does the cursor reappear? Do the commands behave as if the cursor was where expected, just invisible?\n. Thanks; to get `^`, do you press `shift-6` or some other key combination? There seem to be problems with Atom and international keyboards.\n. In case you haven't already, can you please try it with https://atom.io/packages/keyboard-localization installed? Cf #709\n. Maybe you can check Keybinding Resolver, it might tell you what Atom thinks you're pressing.\n. Yup, sorry, this seems to be an Atom issue. You could fix it in your `keymap.cson` with a custom binding or several.\n. It may be atom/atom-keymap#37, I think.\n. Good point, added appropriate expectations of not beeping. \nAs for the commented code - should I just move the spy on beeping to every test that uses it? This way, specs would start beeping again if we add beeps in other places and do not test for them.\n. OK, very good point. Removed.\n. duplicate of #791, I suspect.\n. The fix hasn't been released in a vim-mode release yet, I'm afraid.\n. No, the fix is merged, just waiting to be released\n. @brigand can you please describe how `=G` behaves differently from what you\nexpect, best on a simple test case?\n. I don't feel strongly either way, happy to close this in a week if nobody says otherwise.\n. Would this be a duplicate of #468?\n. @wolftune are you using a package to get the the alt-shift-arrow functionality? (I'm using `multi-cursor` with custom key mappings.)\n. You can always use the blackhole register `_` to prevent updating the clipboard. Would this help?\n\nAn Atom package for clipboard history might be quite interesting indeed.\n. @mushketyk can you please check what the Key Binding Resolver (toggled with `cmd-.` or in the Packages menu) shows when you've pressed `ci'`?\n. I'm especially interested in what the keybinding resolver shows when you\npress c and ' please.\n\nAlso, you are restarting Atom along with Sublime, right? :smiley:\n. @alexbooker can you reliably reproduce the condition? I tried `ci'` in various places of your test name and it worked properly. And if you can reproduce it, does it also show up when you disable packages other than vim-mode and restart Atom?\n\nIt could also be that the user sometimes, through a distraction, spends more than a second between typing `i` and `'` \u2013 that would cancel the Atom command.\n. @alexbooker in case you haven't already, can you please try it with https://atom.io/packages/keyboard-localization installed? Cf #709\nI don't have Windows so I can't reproduce it.\n. do you have anything specific in mind that doesn't work with multi-cursor-plus? I could imagine integration like this: motions like `w` could move only the last cursor while the other cursors stay put - is that what you had in mind? That could be cool, and shouldn't be terribly hard.\n\nOf course any vim-mode commands that don't work properly with multiple cursors should be reported.\n. My preference is for multi-cursor (not -plus) because the alt-x is an extra keystroke I find unnecessary. \n\nIn fact, the demo at multi-cursor-plus, where xe (she or he) puts the cursors after those apostrophes, has much too much cursor movement, from a vim perspective. With vim-mode, as is, do this: \n\n![atom](https://cloud.githubusercontent.com/assets/807315/9592977/19684ae8-5041-11e5-9501-b724e69530f4.gif)\n1. duplicate the cursor across all those lines (Atom's editor:add-selection-below) no matter what column you're in, \n2. then go `0f:;` to get the cursors all where you want them; \n3. then `imulti-cursor-plus<escape>` to add that text; (autocomplete should work the same)\n4. then `B` to get back to the space, then `i<20 spaces><escape` to get all the text past the longest first parth, (this diverges from how xe does it),\n5. `0<24 l>` to get all the cursors in a column where we want the second block to end up,\n6. `dw` to delete the unnecessary spaces.\n\nSee, maybe we don't so badly need to have vim-mode motions for _the last cursor_ when they normally affect all the cursors and usually, like in this case, that's quite exactly what's needed.\n. @wolftune sorry if I came across as meaning that _multi-cursor-plus_ isn't _needed_, not at all. The pointer to _vim-multiple-cursors_ above is also much appreciated, and it shows me how much I've fallen behind modern text editing by sticking to my comfortable old VIM without extensions for so long.\n\nI'm delighted how much of what used to be done with block selections and `q` macros can be done with multiple cursors in a more natural way. (Again, not to say that we no longer need macros and block selections.)\n\nAdding support in vim-mode to easily add multiple cursors is desirable, and this is a valuable issue. Please ping me if it's still open in April.\n. Yes, this is a conflict; more VIM/windows users could chime in on which key\nbinding they prefer.\n\nFor now, you can restore the desired mapping in your personal keymap by\nadding the default one there.\n. Duplicate of #580, addressed in #609 which is waiting on the resolution of #568 v #849.\n. try the `cursor-history` package, it seems to cover these\n. Hi, line 660 is the right one, did you add `or @mode is 'insert'` ?\n\nAlso related to #840.\n. Is this behaviour consistent with other text objects? Can't test it today,\ndon't want to forget.\n. Thank you for clarifying. Now I see Vim is similarly inconsistent. Is it\ndesirable that vim-mode should replicate this behaviour?\n. If you're not in visual mode, jumping to the nearest quoted string and selecting its contents is the default behaviour of the `vim-mode:select-inside-double-quotes` action. Since vim-mode doesn't support `gi` at the moment (nor have I seen any calls for it), perhaps we might bind `gi\"` to _go to inside of double quotes_? \nFor now, if your muscle memory doesn't terribly mind, you can put the following in your keymap:\n\n```\n'atom-text-editor.vim-mode.normal-mode':\n  'g i \"': 'vim-mode:select-inside-double-quotes'\n```\n. Hi, out of curiosity, why do you prefer to use vim-mode over vim-mode-plus? (I haven't tried vim-mode-plus myself, but I hope to try it one day.)\n. Thanks @stefanvlaski !\n. Have you tried the \"Use Clipboard As Default Register\" setting?\n\nIn VIM and in Atom, I often use `xp` to switch two characters, e.g. in a typo like \"foten\" for \"often\".\n. ",
    "danzimm": "This issue was raised 8 months ago, is the core changing? Otherwise I think I could add a fix for this in vim-mode itself since the issue appears to be only when you're on an empty line.\n. Is this still an issue? It would appear in command mode neither the backspace works nor are you restricted from entering text in other widgets\n. As @bhuga raised his hand, so do I; however I use both line wrapping and folds, just to complicate things even further ;D\n\nI'm interested in the third coordinate system, but I can't exactly edit the atom core and I don't think the implementation of it belongs in the vim-mode package.\n\nI'm fine with this as a short term fix (turning off my soft wraps) but hopefully this doesn't turn into a long term solution 8)\n. So is the core changing for this (soon that is), or would it be ok for me to implement this in vim-mode now?\n. @zenhob are you still working on this issue?\n. This has to do with #24 . The issue has to do with the fact that vim treats a folded block as one line and a soft wrapped line as one line; but in Atom we have two options for working with lines:\n- using screen coordinates: a fold block is treated as one line, a soft wrap line is treated as 2 or more (depending on the number of wraps) lines\n- using buffer coordinates: a fold block is treated as multiple lines, a soft wrap line is treated as 1 line\n\nCurrently, I'm waiting on the cool atom dudes deciding where to fix this. I personally am interested in fixing this by moving everything over to using buffer coordinates and then adding fixes for folds.\n. Didn't realize I had this on my master branch, I'm going to close this and open a PR on a different branch\n. Pardon my naivet\u00e9, didn't realize there was such a nice system in place for operators like this! Switched over to the view-model system.\n\nThere's probably going to be a lot of these view-models, it might be best to move them into a file for themselves to keep the folder clean. Likewise instead of setting`@current*thing*` for each of the special operators it might be best to create a general object to hold them all to keep the code clean. Anywho those are my thoughts\n\nDan\n. I will get on the comments right away to try and get all of this sorted out. I totally forgot about limiting to the `[a-z][A-Z]`, I'll add that in. If you want I can create another PR afterwards for refactoring all this.\n. Right that's a good point, I will need to re-read the vim docs to get this exactly right. For now (in the last commit) I support `[a-z]`. Let me know what you think of this last commit, sorry if this has been like pulling teeth for you\n. @bhuga Hey, so I wanted to get started on commands like `f` and `i(` and the such so I went ahead and refactored over [here](https://github.com/danzimm/vim-mode/tree/refactor-vm). Let me know what you think (and if I should merge it with this branch maybe to tack onto this PR). Until then, I shall be implementing more commands :D \n. @bhuga so should I not merge in my refactoring into this branch, and instead should fix up this branch by itself (the few comments you left above)?\n\nThus far in the refactored branch I've also added the `f,F` commands\n. @bhuga sorry, did you mean merge in my `refactor-vm` branch or just finish the changes that need to be done for this branch alone (no refactoring, just implementing marks)?\n. @bhuga ok, I have merged master into this one, will merge master into `refactor-vm` and open a PR for that guy\n\nThanks for all the help!\n. @mcolyer yep no problem!\n. So I read more on the long discussion of operator pending mode and am starting to think this PR is still fairly valid.\n\nIt would appear the operators that @nathansobo is working with have only a few options (meaning `i-w` or `i-a`) where as these operators allow an entire array of keys, like `m[a-z]` where `[a-z]` denotes any lowercase alphabetical character. \n\nHowever we still run into the issue of if someone sets the keybinding of, for example, `'m a': 'vim-mode:do-something-cool'`, the behavior right now, I believe is that we ignore that keybinding, proceed to listen for key events on our hidden input view and then proceed. I suppose if you tapped 'a' right after you leave the hidden input view then you would end up firing off 'do-something-cool' but I'm not sure if this is the right behavior. Any thoughts?\n\nPersonally I think it would just be silly to set a keybinding like `'m a'`, but maybe someone doesn't use the `a` mark register and wants to remap `'m a'` it to something else, so we might want to support that.\n. I'll work on this tomorrow (or later today if you're in the right time zone), hopefully we can get this done by tomorrow!\n. So @bhuga and @nathansobo my latest commit does what we talked about above - I made all of these character-operations go onto the `opStack` and added an `Input` operation in order to collapse the opStack once input is received. Let me know what you think overall.\n\nIn general here are my concerns:\n- the character-input operations still begin asking for characters even if they cannot be composed with the command that was entered before them; for example if I do `dr` it still waits to capture an extra character even though it's clear that `r` cannot be composed with `d`\n- I'm not sure what to do about the `Input` operation, meaning I don't know what file to put it in, whether I should implement empty `execute, select` methods on it and if it's implemented ok (I can't think of anything wrong with it, but I feel like this is a little fishy for some reason)\n- it was a good idea to move the character commands over to the opStack, but right now I'm not sure if I'm passing around the text that was typed properly, it's pretty circuitous currently, for example:\n  - user presses '`'\n  - `MoveToMark` motion is put onto the opStack, whilst the `MoveToMarkViewModel` is initialized and begins capturing input\n  - Character is captured by the `VimCommandModeInputView` behind the `MoveToMarkViewModel` and the `MoveToMarkViewModel` creates an `Input` command that is sent to the `opStack` in `vim-state`\n  - `opStack` is collapsed executing the `MoveToMark` motion which in turn calls `execute` on the view model with a parameter of the character that was typed\n  - `MoveToMarkViewModel` uses that parameter to do the actual execution\n\nNow we could circumvent all of this by, once the `VimCommandModeInputView` returns a character, calling execute right in the `MoveToMarkViewModel` but that wouldn't collapse the `opStack`. Should we keep it the rather circuitous way (which from an abstract sense seems to make sense since we want _all_ operations to trickle through our `opStack`) or do we pass the character straight to `execute` on the view model and then force the `opStack` to clear itself (thus less function calls and some increased efficiency, but moving away from the model that _all_ operations pass through the `opStack`)? However there is one caveat, this would force the logic of these character-pending operations to be placed in the view model, even if they're simple executions (like the `Mark` operator), thus a function call would be added, possibly negating the increased efficiency we tried to gain by circumventing passing the `Input` into the `opStack`. Personally I think we should have all operations pass through the `opStack`, thus keeping everything the way it is, for, this way we have a convention to adhere to from here on out, namely:\n\n> Put _ALL_ the operations on the `opstack`\n> ![alltheoperationsontheopstackmeme](http://i.imgur.com/6PUZRGN.jpg)\n\nAnywho, hope this wasn't too much in one commit, toodaloo\n. also, I just checked out the merged branch and it appears that my changes will still work nicely with his.\n\nGive me the go ahead on these changes and I'll merge master in\n. @nathansobo thanks a bunch for merging all of that for me!\n. My game plan now is to implement the `::canComposeWith` method for different operations. From there I think we may be good to go (as long as my formatting holds up and y'all agree with my changes :D)\n. Aight sorry I didn't get this stuff done sooner (had a bunch to do in the past two days). Now key strokes like `'d-r'` don't go into any special mode, the commandMode is reset. I have a few questions:\n- With this new `canComposeWith` method, do we still need to throw errors and try to catch them in the `processOpStack`?\n- Should we replace the implementation of `resetCommandMode` with a call to `activateCommandMode` so that we ensure we're kicked out of 'operator-pending' mode?\n\nOther than that I tried to fix the cursor going to the end of the line but I'm unsure how this should be implemented/it caused specs to error up and I feel like dealing with that should be in a different PR, unless you guys have some quick advice now!\n\nThat is all.\n. @bhuga how about we emit a `vim-mode:op-stack-cleared` event when we call `clearOpStack` and when the opStack successfully collapses? Then that will alert the view model to remove any `VimCommandModeInputView` whenever we cancel or successfully input a sequence of operations.\n. @bhuga so it's horribly inefficient to send an event everytime the opStack is cleared (every time you tap a movement key you would get a slight lag before you could even move again) thus I went for a more minimal solution: I send an event `vim-mode:compose-failure` that view-models pick up on and automatically remove themselves with. I don't think we need to emit a clearOpStack notification, only once when the opStack is cleared prematurely (so for example the view-models force the opStack to be cleared when they push an Input event, so there they already know to remove themselves), so they only need to know when the opStack is cleared prematurely in order to remove their view.\n\nLet me know if you think this is the correct thing to do!\n\nP.S. thanks for being patient on this PR!\n. I personally think of these classes to be controllers, so maybe behind every operation we can have an optional controller to control the flow of the operation. On the renaming of the files to \"search-view-model\" I have no issue, but I'm curious as to why you preference that.\n. Sounds good, I will work on that tonight and hopefully have a nice commit by tomorrow morning.\n\nI plan to:\n- rename the view-model files\n- split out fat operations into their own files\n. @nathansobo and @bhuga I created directories for the operators and motions so the main lib/ directory doesn't get to bloated. Within those directories I created `index.coffee` files to easily import all the operators/motions from them. Is this ok or should I have `require`'d each of them separately? If it's ok is there any optimization I could have done within the `index.coffee` files to create the `module.exports` object (I ask because it would appears underscorejs has a bunch of goodies that I don't know about!)?\n\nLet me know what you think\n. @execjosh any chance this was fixed in Atom 0.79.0? The release notes claim that it `Fixed a cursor position problem with certain fonts`. Let us know!\n. @bhuga I'm curious what corner cases you found? I'm interested in fixing this bug!\n. All good, I'm going to look into this and a series of other bugs for another pull request.\n. This issue was raised 8 months ago, is the core changing? Otherwise I think I could add a fix for this in vim-mode itself since the issue appears to be only when you're on an empty line.\n. Is this still an issue? It would appear in command mode neither the backspace works nor are you restricted from entering text in other widgets\n. As @bhuga raised his hand, so do I; however I use both line wrapping and folds, just to complicate things even further ;D\n\nI'm interested in the third coordinate system, but I can't exactly edit the atom core and I don't think the implementation of it belongs in the vim-mode package.\n\nI'm fine with this as a short term fix (turning off my soft wraps) but hopefully this doesn't turn into a long term solution 8)\n. So is the core changing for this (soon that is), or would it be ok for me to implement this in vim-mode now?\n. @zenhob are you still working on this issue?\n. This has to do with #24 . The issue has to do with the fact that vim treats a folded block as one line and a soft wrapped line as one line; but in Atom we have two options for working with lines:\n- using screen coordinates: a fold block is treated as one line, a soft wrap line is treated as 2 or more (depending on the number of wraps) lines\n- using buffer coordinates: a fold block is treated as multiple lines, a soft wrap line is treated as 1 line\n\nCurrently, I'm waiting on the cool atom dudes deciding where to fix this. I personally am interested in fixing this by moving everything over to using buffer coordinates and then adding fixes for folds.\n. Didn't realize I had this on my master branch, I'm going to close this and open a PR on a different branch\n. Pardon my naivet\u00e9, didn't realize there was such a nice system in place for operators like this! Switched over to the view-model system.\n\nThere's probably going to be a lot of these view-models, it might be best to move them into a file for themselves to keep the folder clean. Likewise instead of setting`@current*thing*` for each of the special operators it might be best to create a general object to hold them all to keep the code clean. Anywho those are my thoughts\n\nDan\n. I will get on the comments right away to try and get all of this sorted out. I totally forgot about limiting to the `[a-z][A-Z]`, I'll add that in. If you want I can create another PR afterwards for refactoring all this.\n. Right that's a good point, I will need to re-read the vim docs to get this exactly right. For now (in the last commit) I support `[a-z]`. Let me know what you think of this last commit, sorry if this has been like pulling teeth for you\n. @bhuga Hey, so I wanted to get started on commands like `f` and `i(` and the such so I went ahead and refactored over [here](https://github.com/danzimm/vim-mode/tree/refactor-vm). Let me know what you think (and if I should merge it with this branch maybe to tack onto this PR). Until then, I shall be implementing more commands :D \n. @bhuga so should I not merge in my refactoring into this branch, and instead should fix up this branch by itself (the few comments you left above)?\n\nThus far in the refactored branch I've also added the `f,F` commands\n. @bhuga sorry, did you mean merge in my `refactor-vm` branch or just finish the changes that need to be done for this branch alone (no refactoring, just implementing marks)?\n. @bhuga ok, I have merged master into this one, will merge master into `refactor-vm` and open a PR for that guy\n\nThanks for all the help!\n. @mcolyer yep no problem!\n. So I read more on the long discussion of operator pending mode and am starting to think this PR is still fairly valid.\n\nIt would appear the operators that @nathansobo is working with have only a few options (meaning `i-w` or `i-a`) where as these operators allow an entire array of keys, like `m[a-z]` where `[a-z]` denotes any lowercase alphabetical character. \n\nHowever we still run into the issue of if someone sets the keybinding of, for example, `'m a': 'vim-mode:do-something-cool'`, the behavior right now, I believe is that we ignore that keybinding, proceed to listen for key events on our hidden input view and then proceed. I suppose if you tapped 'a' right after you leave the hidden input view then you would end up firing off 'do-something-cool' but I'm not sure if this is the right behavior. Any thoughts?\n\nPersonally I think it would just be silly to set a keybinding like `'m a'`, but maybe someone doesn't use the `a` mark register and wants to remap `'m a'` it to something else, so we might want to support that.\n. I'll work on this tomorrow (or later today if you're in the right time zone), hopefully we can get this done by tomorrow!\n. So @bhuga and @nathansobo my latest commit does what we talked about above - I made all of these character-operations go onto the `opStack` and added an `Input` operation in order to collapse the opStack once input is received. Let me know what you think overall.\n\nIn general here are my concerns:\n- the character-input operations still begin asking for characters even if they cannot be composed with the command that was entered before them; for example if I do `dr` it still waits to capture an extra character even though it's clear that `r` cannot be composed with `d`\n- I'm not sure what to do about the `Input` operation, meaning I don't know what file to put it in, whether I should implement empty `execute, select` methods on it and if it's implemented ok (I can't think of anything wrong with it, but I feel like this is a little fishy for some reason)\n- it was a good idea to move the character commands over to the opStack, but right now I'm not sure if I'm passing around the text that was typed properly, it's pretty circuitous currently, for example:\n  - user presses '`'\n  - `MoveToMark` motion is put onto the opStack, whilst the `MoveToMarkViewModel` is initialized and begins capturing input\n  - Character is captured by the `VimCommandModeInputView` behind the `MoveToMarkViewModel` and the `MoveToMarkViewModel` creates an `Input` command that is sent to the `opStack` in `vim-state`\n  - `opStack` is collapsed executing the `MoveToMark` motion which in turn calls `execute` on the view model with a parameter of the character that was typed\n  - `MoveToMarkViewModel` uses that parameter to do the actual execution\n\nNow we could circumvent all of this by, once the `VimCommandModeInputView` returns a character, calling execute right in the `MoveToMarkViewModel` but that wouldn't collapse the `opStack`. Should we keep it the rather circuitous way (which from an abstract sense seems to make sense since we want _all_ operations to trickle through our `opStack`) or do we pass the character straight to `execute` on the view model and then force the `opStack` to clear itself (thus less function calls and some increased efficiency, but moving away from the model that _all_ operations pass through the `opStack`)? However there is one caveat, this would force the logic of these character-pending operations to be placed in the view model, even if they're simple executions (like the `Mark` operator), thus a function call would be added, possibly negating the increased efficiency we tried to gain by circumventing passing the `Input` into the `opStack`. Personally I think we should have all operations pass through the `opStack`, thus keeping everything the way it is, for, this way we have a convention to adhere to from here on out, namely:\n\n> Put _ALL_ the operations on the `opstack`\n> ![alltheoperationsontheopstackmeme](http://i.imgur.com/6PUZRGN.jpg)\n\nAnywho, hope this wasn't too much in one commit, toodaloo\n. also, I just checked out the merged branch and it appears that my changes will still work nicely with his.\n\nGive me the go ahead on these changes and I'll merge master in\n. @nathansobo thanks a bunch for merging all of that for me!\n. My game plan now is to implement the `::canComposeWith` method for different operations. From there I think we may be good to go (as long as my formatting holds up and y'all agree with my changes :D)\n. Aight sorry I didn't get this stuff done sooner (had a bunch to do in the past two days). Now key strokes like `'d-r'` don't go into any special mode, the commandMode is reset. I have a few questions:\n- With this new `canComposeWith` method, do we still need to throw errors and try to catch them in the `processOpStack`?\n- Should we replace the implementation of `resetCommandMode` with a call to `activateCommandMode` so that we ensure we're kicked out of 'operator-pending' mode?\n\nOther than that I tried to fix the cursor going to the end of the line but I'm unsure how this should be implemented/it caused specs to error up and I feel like dealing with that should be in a different PR, unless you guys have some quick advice now!\n\nThat is all.\n. @bhuga how about we emit a `vim-mode:op-stack-cleared` event when we call `clearOpStack` and when the opStack successfully collapses? Then that will alert the view model to remove any `VimCommandModeInputView` whenever we cancel or successfully input a sequence of operations.\n. @bhuga so it's horribly inefficient to send an event everytime the opStack is cleared (every time you tap a movement key you would get a slight lag before you could even move again) thus I went for a more minimal solution: I send an event `vim-mode:compose-failure` that view-models pick up on and automatically remove themselves with. I don't think we need to emit a clearOpStack notification, only once when the opStack is cleared prematurely (so for example the view-models force the opStack to be cleared when they push an Input event, so there they already know to remove themselves), so they only need to know when the opStack is cleared prematurely in order to remove their view.\n\nLet me know if you think this is the correct thing to do!\n\nP.S. thanks for being patient on this PR!\n. I personally think of these classes to be controllers, so maybe behind every operation we can have an optional controller to control the flow of the operation. On the renaming of the files to \"search-view-model\" I have no issue, but I'm curious as to why you preference that.\n. Sounds good, I will work on that tonight and hopefully have a nice commit by tomorrow morning.\n\nI plan to:\n- rename the view-model files\n- split out fat operations into their own files\n. @nathansobo and @bhuga I created directories for the operators and motions so the main lib/ directory doesn't get to bloated. Within those directories I created `index.coffee` files to easily import all the operators/motions from them. Is this ok or should I have `require`'d each of them separately? If it's ok is there any optimization I could have done within the `index.coffee` files to create the `module.exports` object (I ask because it would appears underscorejs has a bunch of goodies that I don't know about!)?\n\nLet me know what you think\n. @execjosh any chance this was fixed in Atom 0.79.0? The release notes claim that it `Fixed a cursor position problem with certain fonts`. Let us know!\n. @bhuga I'm curious what corner cases you found? I'm interested in fixing this bug!\n. All good, I'm going to look into this and a series of other bugs for another pull request.\n. ",
    "abijr": "The 'w' movement is fixed by #256 \n. I think this is probably an atom bug. If you call the command `Editor: Move To End Of Line` from the command palette, you can replicate the behaviour. \n. If you are in insert mode the command works as expected. I stand corrected, vim-mode might have to implement its own version of the end of line function for vim normal mode.\n. You're welcome :smiley: \n. I've added a fix to the empty line bug. I'm trying to add the test for that, but I found this: 'FIXME: See atom/vim-mode#2' above a pending test and I'm not sure what to do about it. After reading that, I'm wondering if my solution is just a quick hack, and there is a complex underlying problem. \n\nIn any case, I'm working on the specs.\n. Tests are done and I believe the bug is fixed. \n. Some tests where failing, and when I inspected the stuff, I found the object with properties. So I thought that was the origin of the errors (it was my code, and forgot to change it back).\n. The requested changes are done :smile: \n. Thanks for your patience! Learned a lot of stuff from this.\n. I think this last commit should fix the loop bug.\n. This last commit solves the duplicated method (just reused the one you mentioned).\n. @bhuga I feel like this is ready to merge, waiting for comment :smile:.\n. Even if I try them right after restart it happens. I don't know if it might affect this, I'm running atom at the git tip.\n. I just installed v95, and I could not reproduce the bug in it. I guess it was introduced in a recent atom commit?\n. @bhuga it does occur on master vim-mode after restart. I could not find the double-movement bug you mentioned. \n. The 'w' movement is fixed by #256 \n. I think this is probably an atom bug. If you call the command `Editor: Move To End Of Line` from the command palette, you can replicate the behaviour. \n. If you are in insert mode the command works as expected. I stand corrected, vim-mode might have to implement its own version of the end of line function for vim normal mode.\n. You're welcome :smiley: \n. I've added a fix to the empty line bug. I'm trying to add the test for that, but I found this: 'FIXME: See atom/vim-mode#2' above a pending test and I'm not sure what to do about it. After reading that, I'm wondering if my solution is just a quick hack, and there is a complex underlying problem. \n\nIn any case, I'm working on the specs.\n. Tests are done and I believe the bug is fixed. \n. Some tests where failing, and when I inspected the stuff, I found the object with properties. So I thought that was the origin of the errors (it was my code, and forgot to change it back).\n. The requested changes are done :smile: \n. Thanks for your patience! Learned a lot of stuff from this.\n. I think this last commit should fix the loop bug.\n. This last commit solves the duplicated method (just reused the one you mentioned).\n. @bhuga I feel like this is ready to merge, waiting for comment :smile:.\n. Even if I try them right after restart it happens. I don't know if it might affect this, I'm running atom at the git tip.\n. I just installed v95, and I could not reproduce the bug in it. I guess it was introduced in a recent atom commit?\n. @bhuga it does occur on master vim-mode after restart. I could not find the double-movement bug you mentioned. \n. ",
    "bhuga": "Believe this is all fixed up :hammer:\n. Fixed months ago.\n. As an added bonus, undoing a deletion now undoes the whole thing, not one line at a time :cake:\n. The `dw` stuff is actually a `w` issue. Basically, pressing 'w' on whitespace should select whitespace up to the next word, not the whitespace and the next word. This test fails on master for me:\n\nhttps://github.com/atom/vim-mode/blob/master/spec/vim-mode-spec.coffee#L628\n\nAs for deleting into buffers, I saw that deleted stuff gets into registers, but only one line at a time. This simplifies it by making delete and yank code share code on how they yank...I don't see the need to rewrite the code that works with the motion, since they interact with all motions the same AFAIK. `Change` could probably also be a subclass.\n\nEven if you're not excited about extending `Yank` with `Delete`, the way it reworks using motion is what I originally set out to fix. Using `motion.select` and one big delete instead of adding to the clipboard text line-by-line means that 15ddu deletes and un-deletes 15 lines, which is a big thing for my workflow. I subclassed rather than repeat the fix.\n. Also, the motion rework allows you to get the deleted info from the API if you were to put it into `Delete` on its own, since the repeated deletes are no longer a thing. I'm just not sure why you'd do that, though, since we already have to have a version of that logic in `Yank`.\n. Freaking vim; I never even knew about capital-R. Lowercase r is capital R for one character, then you return to normal mode.\n\nWhether or not this should be a 'mode' is really what I was asking. Let me bang something out over the next day or two and we can maybe pair on cleaning it up if it's the right approach?\n. That's where I'll end up, just didn't want to write one and realize later you had a better idea. Lord knows I'd have never come up with motions that peek an op stack and call `compose` to create themselves, so I was checking first.\n\nThis is so much fun! My poor real work is going to suffer!\n. Added in #138 \n. This is me raising my hand as a softwrap vim user and voting against moving vim-mode to screen coordinates. I never use folds (or visual mode, or 100 other vim things).\n\nBut I understand that Things Happen. As long as I can turn off soft wrapping and everything works as expected with my linewise operators, I'll be okay while this shakes out. Soft-wrap is handy but not as important as correct behavior for me.\n. I have to close this pull as stale, but man would I like it if someone wants to tackle this in a more fundamental way. It trips up a ton of new users.\n. Copypasta aside this solves my immediate issues and could let my other pull :skull:. This is actually a much better way to do it, because I bet those transactions are a great way to implement `.`, right?\n. I've noticed a few weirdnesses for being end-of-line in command mode. Not\nsure if we can fix those.\n\nOn Saturday, August 17, 2013, Yossef Mendelssohn wrote:\n\n> I noticed you can put your cursor on the invisible newline character at\n> the end of the line and then d$ will delete that character and bring the\n> next line up, almost acting like J except not compressing whitespace.\n> \n> There's no vim equivalent of this because you can't put your cursor at\n> that position in command mode.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/pull/26#issuecomment-22819428\n> .\n. I'm still seeing incorrect behavior on this branch.\n\n```\n11\n22\n33\n44\n```\n\nPut the cursor on the first `2` and `2ddp`. With this branch, I get the exact same as the input with the cursor on the `2`. In Vim, I get this, with the cursor on the `2` as well:\n\n```\n11\n44\n22\n33\n```\n\nOne of the tests in #26 is for this. If you pull that in it ought to fail, but I'm not sure it'll still be right after the recent refactoring.\n. In the above example, the atom branch does work correctly if you're on the first line of the file.\n. mcolyer :+1: this is aweeeeeeeeeeeeeeesome\n. > concept of a command log that gets appended to every time a command is completed.\n\nHow is that different than my `@history`? Whenever a completed command executes, it knows whether or not it needs to be saved to the history.\n\nPerhaps the difference is that with `q`, things are serializable for the next time we reload? I admit I don't use `q` much.\n\n(Neither the log nor the history are quite correct, though. Vim history is actually a DAG: http://vim.wikia.com/wiki/Using_undo_branches)\n\nIt's interesting that you see atom/atom#962 as being related. When I found the need for that, I started by going to `commands.coffee` and making them `extend operators.Operator`. They are only special because they need to start a `beginTransaction` and listen for the `endTransaction` from re-entering command mode, as opposed to wrapping themselves in a transaction. They already take a count argument. I hadn't finished it, but it actually looked really, really easy if we could access the patches from the built-in undo history.\n. Right, I understand what you're saying now. In that sense, they are related.\n\nI had imagined that the various `Command`s would be just `Operators` and responsible for storing their own state. The imagined API I had, after atom/atom#962 hypothetically landed, was something like:\n\n```\nclass @Command extends Operation\nclass @Substitute extends Command\n  execute: (count=1) ->\n    @editor.beginTransaction\n\n  # This is called when we re-enter command mode\n  finish: ->\n    @patch = @editor.commitTransaction\n```\n\nThen they are just operators, maintain their own state, and as soon as they entered text atomically, they could be made to Just Work with a very small bit of inheritance.\n\nIf you want to see it, I have a branch that does this, but the net effect is zero without atomic text inserts.\n. I  think partial support is better than no support, especially if atom/atom#962 will be a long time in coming. I use the `7>>...` and `yyp..` incantations _all the time._ For my part, I would have to live on this branch.\n. Cool.\n\nThanks a ton! :confetti_ball: \n. More constructively, if you're up to pair on the status bar thing for a couple of hours this week, @mcolyer, that would be swell.\n. > The API documentation is something we know is lacking and is on our list to improve.\n\nI want to say that this isn't what trips me up. Atom is a high-quality project, and the code is actually quite readable and discoverable. Telepath is a library with a lot of computer science in it and I still figured out what's going on in about an hour of reading--I think that's actually really impressive for what it's doing. And I don't mind hacking against a moving API in pre-release software and fixing it as core changes.\n\nMy worry is that for this pull and the `.` pull the 'right' answer was 'we should fix something in core'. Not that core is a crazy difficult project; I'm sure I could figure it all out in a day. But it makes casual plugin contribution more troublesome if I need to think of _everything that could be_ instead of the _facilities available to me now._ And it helps to know that if I'm only in vim-mode, I'm only breaking vim.\n\nI guess I'm asking if we can just get it done in vim and make it use core facilities as they become available, rather than write them in core as we need them in vim. I'd like to be building up the test suite if nothing else.\n. I'm happy to get this up to date with master if we're okay merging it with the little extra bar as in the screenshot. I'm still on an old branch so i can use this.\n. Okay, I've updated this to work with current master and also added search history with up/down.\n\n@mcolyer any reason we can't merge this? I think your main concern was the status bar stuff, but that's been a long time. I want to use the same mini-editor to give me a place to type for `r`, and I think it will be useful for folks who want to implement ex commands as well.\n. It's Mardi Gras weekend here. **No** hurry from me until at least Thursday! :tada: :confetti_ball:\n. Great feedback as usual, @mcolyer, all adopted. I didn't find any prior art for the view model but I think I've got what you were looking for.\n\nThe tip on a config value for font size was a lot easier to implement than I suspected, @dougblack, also great.\n\nAlso fixed and tested a regression with reverse searching (core's search API changed to require a `=>` instead of a `->`).\n\nSee if this is what you're looking for now?\n. Thanks for keeping the quality bar high! :sparkles: I'll go update my register pull to have search history use the cross-buffer state too.\n. We now import syntax variables. This needs a rebase or merge, but it would probably take like 30 seconds to fix this one up correctly if you're down.\n. What about a second plugin, `ex`? It would be easy to make entering it be as simple as `:` in command mode. That could be as full-featured as one likes while letting vim-mode remain pretty simple; vim mode wouldn't even be required.\n. I think I'm going to take a stab at some shared state between editors here soon. It would be referenceable from other plugins. Javascript!\n. I've got an idea of how to start this: probably just something that talks correctly to vim mode and implements `w`. I'm hoping to have an embryonic ex package :soon:.\n. @jroes, can you make a pull request out of your branch? That will make it a little easier to talk about.\n. Added in #152\n. Fixed in #272 \n. This got fixed by #134 :tada:\n. >  a listener for core:cancel, not sure how I feel about that though. \n\nI think this actually makes sense.\n. And you can run tests with `apm test` in the `vim-mode` directory.\n. Added in #152 \n. This is probably just an off-by-one error somewhere. This is a good little fix if someone is looking for a place to get in to contributing.\n. There's support for scrolling in core, so this one would probably be an easy motion to implement if someone's interested in becoming a contributor.\n. Enable/disable now work correctly, though there is no hotkey for it. Closing this as an issue with atom core, because vim-mode won't be able to enable itself while disabled.\n. Closing this pull as stale. I'm not sure the original issue is still a thing, but if it is, would be happy to pick this up again.\n. @cschneid you'll want to rebase/merge since #134 landed.\n. >  but this is exactly how vim behaves. \n\nIs there a _default_ vim keybinding that does this?\n. Going to close this. There's already a tree explorer and I don't think I'd land a pull replicating NERDTree into vim-mode itself. It could be another plugin, though.\n. Cleaned up.\n. Nitpick has been picked. 2 in a day! :rocket:\n. If someone is interested in contributing, this issue would be an easy place to start. The till motion is almost exactly the same as the existing find motion.\n. Keeping it encapsulated would be ideal. One could probably be a subclass of the other.\n. Added in #225.\n. Still fighting tests. What I have here sends an event to the mini editor correctly, but the test structure is replacing original data with `U+278`. Not sure what's up yet.\n. Okay, fixed up the tests and fixed the line overflow. Will merge this tomorrow afternoon unless there's further comments from anyone. But @mcolyer can usually find something boneheaded I did :laughing:\n. :tada: \n. :heart:\n\n:heartpulse: that you have not specified merge vs rebase :trollface:\n. The only thing this doesn't cover is goals regarding Atom releases. Do we want to say we'll always tag something as the last working version for an incompatible atom core bump?\n. Done.\n. In the long term, `%` should be a native motion. I already miss `d%` and `y%`, and I don't think it's on bracket matcher's roadmap to match quotes, ruby `def...end` blocks, and that sort of thing. But I'd be :+1: on this in the meantime; it's a core module.\n. Fixed.\n. @cjbottaro we're dedicated to helping you help make vim-mode better. Both atom and vim-mode are meant to be easily hackable.\n\nIt sounds like a key mapping may well be all that's required. You can add them in `~/.atom/packages/vim-mode/keymaps/vim-mode.cson` or `~/.atom/keymap.cson` or `~/.atom/keymap.json`. If it works, definitely submit a pull!\n. @tony612 I see the issue too.  It's probably something silly in that motion...do you feel comfortable putting together a pull with a failing test case and fix?\n. Thanks for the bump @zenhob, this got away from me. Works for me too.\n. Works for me if @mcolyer likes it too! :metal:\n. This looks great. I'll merge if you'll just add a changelog entry. Thanks for the patch!\n. This was fixed in either #198 or #205, but we don't actually have tests for a single line file, so I'm going to go ahead and land this.\n. This was fixed at some point.\n. Sorry, thought this was for the `/` search box.\n. @tony612 looks good; add a changelog entry and I can merge this. Thanks!\n. This was fixed in https://github.com/atom/vim-mode/pull/184\n. @nathansobo we talked about this a little, but just writing this down:\n\n> I'm thinking that ::commitTransaction and ::transact should return a transaction object that can be replayed at a different location in the buffer.\n\nThis is exactly how I think it should work. It's a little bit weird, because transactions can encompass things like 'replace the current selection', and that's not a concept that's 'repeatable' in vim; there's no `.` operation in visual mode to repeat a previous `s<typing>` operation on a previous selection. But if we can just get at the concept of 'a chunk of typing', it opens up all the doors we need.\n. Brought this pull back from the dead, and things are going great. I still can't make the tests work, but I now think that might be related to our caching editors across tests.\n\nWhat works:\n`i`, and `.` on it, and undo and redo.\n`cw` and `.` on it, and undo and redo.\n\nWhat doesn't:\n- Other input mode enterers such as `a` and `s` (want tests first)\n- Correctly identifying backspaces in input transactions\n- Correctly re-starting input transactions when the cursor moves\n- **Tests** @nathansobo I would really love to pair with you for a few hours to see if we can't figure this out. I just can't make the tests duplicate the behavior that I see in the editor. Laborious manual testing after every fix is definitely slowing me down.\n\nBut _OHMGOSH_ it works in the base case, and it's glorious. Most of the TODO list is just busywork; as soon as I have tests to prevent regressions I can get them done pretty quickly.\n. I faked some tests with `editor.setText`, which I don't like but I like better than this not landing.\n. Okay. This is working. `i`, `a`, and `c` are moved over to a new setup which acts, near as I can tell, the same as vim. Backspacing and moving during input behave correctly.\n\nThere's a ton more paperwork to do moving everything in `commands.coffee` over to the new setup, work which will make the diff much more unwieldy but not much more interesting. Before I do that, @nathansobo, can I borrow your :eyes: for general sanity and feedback on my off-label use of the undo stack?\n. Fantastic review @nathansobo, thanks! I will clean up the easy stuff.\n. Okay, I'm about to merge this. `c`, `s`, `S`, `o`, `O`, `i`, and `a` are all now support undo and repeat. **Finally.**\n\nSpecific callout to a few recent contributors: would you please get master and see if repeat and undo on typing is not what you expect before I do a release?\n\n@carlosdcastillo @abijr @tony612  @tmm1 @jacobgardener @jcurtis @mcnicholls @mcolyer @nathansobo \n\nFuture cleanups include:\n- Getting the tests to support indentation for some newlines (it respects them in coffeescript files, but not the grammar-less test buffers).\n- Cleaner interface to undo history\n- Cleaner interface to transactions\n- Some movement commands in insert mode need to reset their transactions (does anyone page up/page down in insert mode?)\n\nThose are all pretty ugly but I am really tired of not having this when I'm on master.\n. Nice idea. Can you add a screenshot?\n. This is an **amazing** spike at a nontrivial feature. I left a lot of comments but don't let that detract from:\n\n![you re awesome](https://f.cloud.github.com/assets/12676/2433000/61d0db04-ad7e-11e3-986e-d30211fa7532.gif)\n\n> There's probably going to be a lot of these view-models, it might be best to move them into a file for themselves to keep the folder clean. Likewise instead of setting@current_thing_ for each of the special operators it might be best to create a general object to hold them all to keep the code clean. Anywho those are my thoughts\n\nI was going to refactor after I did a second operator, and you've beaten me to it. You're right that this needs cleaning up; I think you've done the right thing in this pull by straightforwardly copying the workflow for replace. Extraction/refactoring can be a pull by itself.\n\nOnly one thing I thought of: it doesn't seem like we're restricting marks to `[a-z]` here, and we should probably match vim and do that.\n. > I totally forgot about limiting to the [a-z][A-Z],\n\n`[A-Z]` can have a pretty different function (opening files that are not open, marks shared across buffers [and instances of vim?]). I would just limit it to `[a-z]` right now, since that's the behavior you're replicating.\n. Sorry, this got out from under me. Let me go over this again and we can probably get it landed tonight.\n. This is looking really good. Love the refactoring into the view model.\n. > Hey, so I wanted to get started on commands like f and i( and the such so I went ahead and refactored over here. \n\nFeel free to make a WIP pull request if you want to talk about it. It's the best way to talk about it.\n. > so should I not merge in my refactoring into this branch, and instead should fix up this branch by itself (the few comments you left above)?\n\nYeah, let's get this done. It's basically there. Can you merge/rebase?\n. @danzimm Sorry! I meant I need you to merge master into this (the merge button is disabled right now), and fix up the comments I've made here and we can get this landed. Then we can check out `refactor-vim` in another pull.\n. Great pull, sir.\n. Merging this. This is the hard part of the diff, and it will be impossible to keep it up to date with master. New text objects can be added cleanly in another pull.\n\n@nathansobo :heart:\n. #286 implements those. It will land :soon:\n. SO MUCH FOR MY WEEKEND PROJECT, everything will be done by then. This rocks.\n\n![kitty dj](https://f.cloud.github.com/assets/12676/2457172/1050c1d2-af30-11e3-919e-1a6b2979b9b8.gif)\n. > Should we replace the implementation of resetCommandMode with a call to activateCommandMode so that we ensure we're kicked out of 'operator-pending' mode?\n\nYes. You can't activate command mode and have operators already pending.\n. > Other than that I tried to fix the cursor going to the end of the line but I'm unsure how this should be implemented/it caused specs to error up and I feel like dealing with that should be in a different PR\n\nAbsolutely another PR.\n\n> With this new canComposeWith method, do we still need to throw errors and try to catch them in the processOpStack?\n\nI think probably yes. Imagine `g~3y`. Everything can compose with everything but it's invalid and needs to blow up the whole stack.\n. So here's a thought. It looks like this is getting messy because the input motions/operators have view models that need to know what to do when operations don't compose. Why don't we add a few events to vimstate itself? View models could trigger their own removal on `vim-mode:op-stack-cleared`, and when trigger it when we find a false `canComposeWith`.\n\nDoes that make sense?\n. :+1: exactly what I mean. I think the op stack stuff in VimState will get a lot cleaner.\n. >  Is it just a file size issue? If that's the case I think we should split the file up.\n\nI think you make a good point. The view models themselves, whether they're actually controllers or view models, provide a handy point of abstraction between the operations that need them. But I don't see what advantage a reified controller abstraction would bring.\n\nLet's split out fatter motions and operators into their own files and see if this still feels icky. I suspect it won't.\n. > Is this ok \n\nThis is perfect.\n. This diff is basically 100% code turnover and we need to get it merged. Testing it now.\n. Merging this so the project can move forward. Thanks @danzimm!\n. I think leaving this in your personal keymap is the way to go for right now. We've looked at other plugins to simulate more of ex, so I don't want to make that the default yet.\n. Clever hack. Need to think about it a tad.\n. @nathansobo what do you think? Is this a core issue?\n. No, haven't started on ex yet :frowning:\n. `a` at the end of a line did not append, but pushed the cursor back before the last character and then entered insert mode. There was another one too but I forget it. Sorry for not documenting this better.\n. Do the tests run with `apm test`?\n. Overall I think I like the refactoring, thanks for the patch! Search is getting clunky but that's mostly my fault for doing a bad job in the first place.\n\nI was going to have to break it down into a 'base' search and a non-base search for repeats that share state across buffers, so something like this was needed. But I suggest we do `Search.Base` instead of `Basic`. Base is now an abstract class, not a basic one. But this is good work that needed to happen.\n\nTesting, I also found a few corner cases. For example, with this code:\n\n```\ndaemon.error do |boom, timer|\n  Failbot.report(boom, :timer => timer.name)\nend\n```\n\nPutting the cursor on the `t` in `timer` in vim and cycling with `*` goes through the 3 `timers` in a loop. With this, one goes from the `boom, timer` to `:timer`, then to the `:` in `:timer`, from thence to nowhere, since we're now off timer. I think there's an off by one error somewhere that the tests are missing since we're always seeking to the beginning of a line.\n\nYou've marked off some corner cases in the tests but I'm not sure if this is the same thing. I wonder what vim's logic for 'word under cursor' is? Is that documented somewhere?\n. > When I execute apm test, it still says it is skipping them, no clear reason why\n\nI just played around with it and got them to run by removing the `#` character in the `describe` line on line 746. It works fine if one calls it 'the hash keybinding'. No idea why the tests would not run in that case, but...surprise, gotcha, computers!\n\n![surprise shark](https://cloud.githubusercontent.com/assets/12676/2640246/8a48e94a-bee1-11e3-8a1a-26d90cd227e7.gif)\n. Is it possible to keep changes to `/` in their own PR? That bulks this up a bit and it makes it hard to see what's being added.\n. This is really close to ready. Just a few nits left. Looking forward to having this in!\n. >  Can't work out what the intention behind removing the last character was,\n\nI can't either, and I can't replicate the problem anymore. Thanks for the patch!\n. Wish I could pin this or something. If we come up with a few more cool hacks I'll definitely make some examples.\n. I'm no longer able to reproduce this. Are you on at least atom 0.94 and vim-mode 0.9?\n. Is this still needed after #198 landed? Sorry it took me a few days to get to it.\n. Can merge master/rebase please?\n. Okay, I see the remaining issues. Taking this for a spin now.\n. I need to run out now, but after playing with this it looks like all the problems are fixed. If you can clean up the one or two nitpicks I had I'll get this merged tonight. Would be awesome to finally put this to bed.\n. Thanks for the fix!\n. This looks great, and more or less the way to do it. I don't want to add a new operator that doesn't compose properly, though, so a test for `4~` is all this is missing. Thanks for the patch!\n. > Would you prefer to have this be its own file?\n\nWe don't have a hard rule on this; it doesn't look like this operator will become huge, so it's fine.\n\n> but I'm finding it difficult to perform the move right operation without doing it in the operator as well.\n\nI think `Replace` operator will actually work very similarly in terms of how it composes, and be a good place to crib from. Just don't get tripped up on the view stuff it needs to accept a character as input.\n\nLooking forward to this!\n. Stumbled across a few :bug::\n- `4~` on a 3-character line will not upcase the last character on the line\n- Nothing happens at all in visual mode\n\nSeveral operators are buggy in visual mode, so I think we could get this merged and get that in a later pull if you'd prefer. But we need to get the behavior right when going past the end of line.\n. Woops, I missed your updates. This looks good now. More operators! More vim! :dancers:\n\n![dancing tyrion](https://cloud.githubusercontent.com/assets/12676/2759474/9a1aa9ec-c9a1-11e3-9489-0b93cb7a7219.gif)\n. This is looking much cleaner. Can you merge master into this?\n. Something's wrong here. The new motions aren't in the diff, just their tests (which of course fail).\n. ![and there was much rejoicing](https://cloud.githubusercontent.com/assets/12676/2714537/8156b6b0-c4f8-11e3-973a-00aaf4b02647.gif)\n. I can't replicate this. Do you have any other non-core packages installed? Do you have any custom keybindings?\n. Can you try the master branch? These are working for me.\n. There's some more discussion of this in #176, so closing this as a dupe. Thanks!\n. I can't reproduce either this or the `j` problem you have #218. I have a feeling this is some custom keybinding, or a conflict with another package. Do you have any custom keybindings?\n. I'd like to see the full DOM hierarchy for the active editor:\n\n![gistfile1 txt - _users_ben_github_heaven](https://cloud.githubusercontent.com/assets/12676/2885262/27e125f0-d4bd-11e3-9f49-2b7ebc6d6056.png)\n\nDo arrow keys work when `j` is broken?\n. @mwaskom `motions.coffee` doesn't even exist anymore...do you still have the problem on master? Same question for you on master, @d2fn.\n. @mcolyer maybe we should cut a release. There's a lot of unreleased stuff in head.\n. mwaskom to install the dev version of a package, just clone a copy of this repo to `~/.atom/packages/vim-mode`.\n. @mwaskom  @d2fn do you still have problems with atom 0.99 and vim-mode 10.1?\n\nIf so, what keyboard laying are you using?\n. @mwaskom do you have soft-wrap enabled?\n. Okay, that's the issue. There's a ton of problems with soft-wrap and vim mode right now, because we can't always identify the cursor location correctly, and because editor commands like `moveDown` and `moveRight` mean something else when in a soft wrap. It's listed as a caveat in the README (admittedly, that  note is a recent change).\n. @d2fn are you on 0.94 of atom and 0.9.0 of vim-mode?\n. Closing as stale. I think we're 4 versions of atom-keymap since this issue was filed.\n. These edge cases would probably be a good place to start if someone's interested in becoming a contributor.\n. This seems like a bug with `MoveUp` in visual mode, not a bug in `SelectLine`. \n. This looks like a dupe of #255. Thanks for reporting this.\n. This sounds like an issue with atom core. @nathansobo, has this come up before?\n. Unfortunately, there are absolutely issues with international/dvorak keyboard layouts right now. I'm not entirely sure how to fix them.\n\nHow does vim handle this? Is vim indent on a german keyboard `>` (lower left, if I recall correctly) or `shift-.` (`:`), two keys left of the right shift key?\n\nIf it's the latter, we'll probably have to come up with sample CSON files for international keyboard layouts. Chromium doesn't give us access to the actual keys being pressed (I think).\n. @guanlun, does this happen for you on master as opposed to the last release? I believe this has been fixed.\n. No worries, we should probably do a release.\n. This isn't working for me, and I don't see where in the code the highlighting would be set. Am I missing something? Can you provide a screenshot? Do I need to do something other than search for text that exists?\n. Oh, I see!\n\n(For future reference, you can embed pictures directly by dragging them to the text area, or with this markdown: `![](http://imgur.com/wapzQca.png)`)\n\n![](http://imgur.com/wapzQca.png)\n\nPlaying with this more now.\n. So I love this idea, and am suddenly wondering how I lived without it. But I'm not sure this is the right way to do it, because the text selection means that certain semantics would be different. For example, in your screenshot, `/printf<enter>i` _replaces_ `printf` rather than inserting before it. I'm poking around to see if there's another way to do it.\n. Unfortunately I don't think I feel too comfortable with this as a selection. https://github.com/atom/find-and-replace/issues/138 shows it's not a huge priority to fix, unfortunately. https://github.com/richrace/highlight-selected Has a setup for highlighting search terms, and I'd be amenable to doing what's required to work with that, if it's possible.\n. Hmm. I like the results, but lets see if there's not a cleaner way to do this. It would be better if there were a way to interact with the existing highlight-selected module than to copy it.\n\ncc @richrace for his state-of-the-art highlighting module at https://github.com/richrace/highlight-selected\n\ncc @nathansobo - How do you feel about some kind of highlighting module like this becoming a core module? One we could interact with by triggering events on the editor or something like that?\n. I chatted with @nathansobo today and I think we need to wait. Some of the changes coming down the pipe in the medium term are going to break any kind of manual rendering like this pretty badly. If we ship this today, there will be a bad upgrade experience when it breaks. The good news is that those changes should have a proper API for applying styles to buffer markers.\n\nSorry @carlosdcastillo! Please keep up the contributions :confounded:\n. This is looking really good when whatever is messing up the specs is fixed!\n\n![yeah pizza kitty](https://cloud.githubusercontent.com/assets/12676/2936999/d6e6c3ce-d87e-11e3-9595-6340c9b94108.gif)\n. `>>` is working fine for me. If it fails for you, do you get any console errors?\n. :fire: :hotsprings: :cat2: \n\nThanks for the patch!\n. Closing as a dupe of #176. Thanks!\n. I had to pull this out due to some bugs in #194. I would love to see this fixed.\n. Updated issue title. `$` should work fine; have you had issues with it?\n. Do you see any errors on the console when trying to use it? Does it not work standalone, or when composed with an operator like `d`?\n\nYou can enable the console with cmd-alt-i on mac, or whatever opens the developer console normally in Chrome on your system.\n. @nrs, you can test it manually like this:\n- Open the console\n- Set the cursor halfway through a line\n- Click on the console and type this: `atom.workspaceView.getActiveView().trigger('vim-mode:move-to-last-character-of-line')`\n- Click on the tab of the editor (not the text, as that would move the cursor).\n\nYou'll be able to see the cursor again. Is it at the end of the line?\n. In Atom's preferences page, there's a 'keybinding' entry on the left side. You can just put `$` in the search field and it should bring up any entries. I only have the vim-mode entry.\n. Interesting, it should just be one binding with a selector of `.vim-mode:not(.insert-mode)`. Can you try bumping vim-mode to master? To do that, check out a copy of the repository to `~/.atom/packages/vim-mode`.\n. Ahh, I have a feeling that `$` is a dupe of #222.\n\nUnfortunately I don't have an answer for that :frowning: I will definitely keep this issue open for `{}[]()` though.\n. @colinkeenan @nrs, there appear to be issues in atom-core with international keyboard layouts. Are either/both of you using a layout other than English (US)?\n. I'm excited about this too. It's painful to have `ciw` and not `ci\"`! Just needs some cleanup.\n. Closing in preference to #286\n. Having trouble reproducing. Are you on Linux?\n. I just updated and still can't replicate.\n\nWhen you go to Preferences -> Keybindings, and search for 'j', what comes up? Does it look like this?\n\n![settings - _users_ben_github_uxr](https://cloud.githubusercontent.com/assets/12676/2951211/8418c71c-da24-11e3-94ca-cc96a46fc1bb.png)\n. I managed to duplicate this behavior by disabling/re-enabling vim mode during a session, but it's always fixed on restart.\n. That's fair, but shouldn't restarting atom fix the problem entirely until one manually enables/disables vim mode? @floatingatoll, @bencaron, @Industrial: if you enable vim-mode and restart atom, does the problem persist?\n. Sorry, previous post was to the wrong thread.\n\nOkay, so the workaround for any future arrivals to this thread:\n- Don't disable and re-enable the plugin\n- If you do, restart atom\n\nThe cause is that we're not removing the event bindings in `VimState` when disabling. We need to implement `deactivate` to in `vim-mode.coffee` to fix this properly. This is a legitimate bug, but I have to admit that #176 and a few others are going to be a priority over it.\n. Good catch, thanks.\n. I'm not reproducing this with basic movement and inserting/typing. Can you tell me what triggers the error? Can you show me the stack trace of the error?\n. Played around with this a bit.\n\nAtom simply does soft wrapping differently. In vim, soft wraps are ignored when determining what to do with movement. Everything's still a logical line. But we reuse atoms primitives for movement, which take screen lines into account.\n\nUnfortunately, all I can say right now is that vim-mode is not going to play well with soft wrap enabled. To the point that we should probably put a message in the status bar or something.\n. Assuming you're on linux? Have to close this as a dupe of #222. Sorry :frowning:\n\n@atom/core this has bitten several people. Can someone please look into it?\n. ![yes cookie](https://cloud.githubusercontent.com/assets/12676/2971953/0b877ec2-db70-11e3-89be-3b65288f01dd.gif)\n. Nice catch, clean patch!\n![yes2](https://cloud.githubusercontent.com/assets/12676/2971869/5902ce64-db6f-11e3-9df9-f9002a50f454.gif)\n. Great catch and a clean patch.\n\nOne thing I noticed testing is that searching in visual mode replaces, rather than adds to, an existing selection. For example, try `vjj/text<enter>`. In vim, this will select two lines down, then add to the selection until the search term. With this branch, the lines selected by `jj` are deselected.\n\nIs that an easy fix?\n. ![high five 2](https://cloud.githubusercontent.com/assets/12676/2991529/2cd10e44-dc7f-11e3-9471-5df5c10aecd7.gif)\n. Need to look at this more carefully tomorrow, but:\n\n![yeah salute](https://cloud.githubusercontent.com/assets/12676/2966487/1f6f5278-db13-11e3-892e-0286b48aea2f.jpg)\n. Clean patch, just one nitpick.\n\nChanging all of the commands from `vim-mode:whatever` to `whatever.vim-mode` makes some sense, but I'm concerned because it will break custom keybindings. It's probably a good idea, though, and in the grand scheme of things atom is still young so now would be a good time.\n\nI think making that change is for another pull with more discussion. Willing to create such a pull?\n\nFixes #230.\n. :metal:\n. When atom does a release that includes your fix, I will merge this and make a release of vim-mode as well.\n\nRemind me when that happens if I miss it.\n. Looks great. Thanks!\n. 0.10.0 is hot off the presses!\n. Closing as dupe of #50. Thanks!\n. Closing as a dupe of #99. Thanks!\n. No apologies necessary. A few dupes are way better than a community afraid to get involved!\n\nAnd thanks!\n. In atom, the cursor is rendered in the `overlayer` div, which has a z-index above the lines. You could set `.lines` to have a z-index of 3, which would make the overlayer actually appear behind the lines, and a solid cursor color would work better.\n. Do you have soft line wraps enabled?\n. Can you try it without them? There have been problems reported with that in #231 that we don't have a fix for yet.\n. That command should be entered in the chrome Javascript console (cmd-ctrl-i on linux, I believe), not the terminal.\n. Sorry, maybe ctrl-alt-i? It's whatever brings up the console normally in Linux chrome, a key combination I'm unfortunately ignorant of :frowning:\n. If some other package comes up with an event like `move-up` without a namespace, will this conflict?\n. I'm not entirely sure I'm comfortable with that, unfortunately. We have a lot of generic-sounding events and surely some other package will eventually clobber them.\n\n@mcolyer any thoughts?\n. This has been a good discussion, and I think the best decision is to close this. Atom uses the prefixes everywhere, and I think rocking the boat is just not the right thing to do, especially when every linux user has custom keybindings for `$`. I agree with your last comment that we don't gain much by adding more overheard.\n\nThanks for the pull regardless @cadwallion, keep it up!\n. Closing as a dupe of #176. Thanks!\n. > (BTW, this is my fist PR ever!)\n\nNice! Welcome to the party!\n\n![applause 2](https://cloud.githubusercontent.com/assets/12676/2999299/3f342a2c-dd14-11e3-9bd0-9937f6aca0f8.gif)\n\nWe're glad you're here, but this pull still needs work. `$` on an empty line will move up a line, and we should have a test for this behavior.\n\nYou can run the tests by typing `apm test` in the directory with vim-mode. There's a ton of tests already that should help you see how to write them.\n. > I'm wondering if my solution is just a quick hack, and there is a complex underlying problem.\n\nThere _is_ a complex underlying problem, to be sure, one that's exceedingly difficult to solve elegantly. No reason not to merge stuff in the meantime.\n. Good stuff. Glad to be a part of your first pull!\n. I think we can remove the original length check and get this landed. :sparkles:\n. @jacobgardener do you think you'll get to this teensy super tiny cleanup?\n. Thanks for the patch!\n. Seems reasonable enough, but we need a way to get the specs passing in Travis, which seems to be firing them as copy instead of exit-command-mode. \n. I'm not sure we need tests for keybindings like this, but it's not really okay for the tests to only pass on one platform. @nathansobo any advice on how to make `simulateDomAttachment` editorViews behave as if they are on different platforms than they are?\n. Ctrl-c does leave command mode in macvim, so it's a reasonable default. I can't merge this with failing tests, but if you want to pick it up, I would be happy if we killed the bad test and cleaned up the newline.\n. Done with tests in #339 \n. Closing as a dupe of https://github.com/atom/vim-mode/issues/50. We've decided _not_ to make `:` open the command palette. It breaks muscle memory, and a lot of people are interested in a more full-featured ex replacement.\n\nWe do appreciate the patch and participation, though, keep it up!\n. Can you rebase this or merge master into your branch?\n. I've really been wanting this! Just one nitpick in the code.\n\nI am seeing an off-by-one error, though. n the text string `abc123 [text] abc123`, putting the cursor on the `x` in text, `%` goes to the `[`, correctly, then to the space after the `]`, then back to `[` and then reliably repeats. If I start on the `]`, `%` takes me to the first `t` in text`, then back to`]`, all correctly.\n\nThe tests pass and look fine to me, so I'm not sure why it's different.\n. Unfortunately I'm still getting some errors :frowning::\n\nFor `x(abc)y`:\n-  `%` on `x` brings me to the first bracket character after looping past the end of the file.\n- `%` on `(` brings me to `y` instead of `)`\n- `%` on `a` brings me to `)`, correctly, but\n- `%` on `b` or `c` brings me to `(`\n- `%` on `y` brings me to `(`\n\nI think there is some state getting leaked between multiple presses. While trying to make this list, I think some cases did not repeat every time.\n. How embarrassing, I had a user keymap for `%` for the bracket matcher module.\n\nThis code is kind of weird, but then again, so is vim's behavior. Great work.\n. Did you recently upgrade? This sounds like an object is missing that was added recently. Does the problem persist after restarting atom?\n. Hmm, okay. I can't reproduce so I'm a little confused. I see you're on OS X so I'm not sure what's going on.\n\nDoes the problem occur if you switch to master on vim-mode? To do that, remove `.atom/packages/vim-mode` and replace it with a git checkout of this repository.\n. > wondering whether it's an issue exist in Atom upgrading part.\n\nI'm wondering that too, especially if it happened twice. I'm pretty sure I saw it once too, but I spend so much time hopping branches in development that I assume that was the cause. Thanks for reporting this.\n. `r` and `/` can also trigger this.\n. This is awesome, and I'm looking forward to it. I did notice one bug. With this data (which cannot have a newline. `dd` the last line of the file if atom adds one when copy-pasting):\n\n```\nab cde1+-\nxyz\n\nzip\n```\n\nIf I `w` my way through it, everything is fine until the cursor is on the `z` in `zip`. Then I press `w` and go to the character after `p`, the non-existent newline. Then further presses bounce the cursor back and forth between the `z` and the character after the `p`. In Vim, I end up on the `p` and stay there.\n. Been a busy week. Thanks for the bump, will try to get to this :soon:\n. Works great. Thanks!\n. A few people have reported this with different motions, but I can't replicate it.\n\nDoes this happen for you if the `r` or `/` are the first things you do after a restart? I wonder if something is not messing up the stack, and these commands are just where it breaks.\n. Does it happen with the latest atom release as opposed to head?\n. Okay, so maybe we have a bug against atom head. @nathansobo can you take a look?\n. How is `Input` getting on the stack at all? It's not an operation or motion. \n\nhttps://github.com/atom/vim-mode/issues/255 fixed it by disabling `autocomplete-plus`, which is too bad because I've been meaning to try it out. I wonder if he didn't manage to disable/reenable vim-mode in that process and that was the real issue?\n. Going to close this as a dupe of #255 (issues with autocomplete-plus). Thanks for reporting this.\n. Correct, dupe. Thanks for reporting this, though.\n. This looks like a legit bug; marks are not correctly moving around when the buffer changes.\n. This has been implemented. Are you perhaps using linux? If so, see https://github.com/atom/vim-mode/issues/222#issuecomment-43760890\n. This has been implemented. Are you perhaps using linux? If so, see https://github.com/atom/vim-mode/issues/222#issuecomment-43760890\n. I bumped atom to the latest today and this isn't working for me anymore. Thanks for reporting this.\n. Atom 0.98.0 should fix this.\n. @abijr this looks like the double-movement bug that was fixed recently. Does this occur on master vim-mode after you quit and restart atom?\n. Closing as a dupe of #231. Soft wrap breaks a ton of stuff right now.\n. I'm not sure I want to overwrite the default win32 keybindings. Making a custom keybinding with a more specific CSS selector will do the trick. Something like `.workspace .editor.vim-mode:not(.command-mode)`.\n. After a little thought, you're probably right. If you wrap this change into a PR I would merge it.\n. Let's say yes.\n. Eeek, looks like the test suite doesn't like this :(\n. The tests pass on master again. Can you rebase or merge master and we can look at this again?\n. I'm going to guess the tests simply don't run inside a `.workspace` so none of the keybindings are firing. Not sure what to do about that.\n\nI don't know how to get to a breakpoint, but if you change a test's name from `it` to `fit`, that test will be focused and the only one to run, which usually makes things easier.\n. This looks like a similar problem that occurred during the last update cycle to several people. Does reinstalling atom and vim-mode fix it?\n. Atom 0.98.0 should fix this.\n. :+1: works for me too.\n. `vim-mode` stuff is mostly for command mode. I think binding `cmd-l` to `core:move-right` will do what you want here.\n. :cool:\n. Atom 0.98.0 should fix this.\n. @pengux is there anything in the console?\n\nCan you test if `$` is acting like `4`, i.e. does `$dd` behave like `4dd`?\n. What is your keyboard layout?\n. As an experiment, if you change your layout to English (US), does $ start to work? (shift-4)\n. It's problems in atom-keymap still, unfortunately.  https://github.com/atom/atom-keymap/pull/31 is probably the fix, but we'll need an atom release to get you going correctly.\n. Good catch. Standing by.\n. `0.10.1` has been released, which is the same as 0.10 but with a bumped atom req.\n. What do you mean by 'react editor'\n. I'm going to close this for now, as the react editor isn't really stable yet. We've got enough issues with keymaps and soft line wraps that I don't feel comfortable calling react 'supported'.\n. This is an improvement for characterwise selection, so I'm going to go ahead and merge it. Looks like we still have issues on linewise (`V`), but those issues are probably because it's broken for the simple case of up-down.\n\nThanks for the patch! Very clean.\n. Linewise visual mode should be fixed on master. I will probably wrap up a release in the next day or two; we have a lot of stuff in there but the improvements to `.` and undo around typing are big enough that I wanted them to get some testing before I shipped them out.\n. Yeah, that's a legit bug. We have an equivalent bug in linewise visual mode where the starting line doesn't seem to be selected either.\n\nGood candidate for someone wanting to get involved in development. Probably a simple fix somewhere.\n. Looking forward to a pull!\n. Is this still needed after #272?\n. Sorry for the delay getting to this. This code is super clean and the fix to going to the correct line is :sparkles: and a big improvement. But I'm not sure that the characterwise fix is the correct behavior. I'm wondering if my vim has a strange setup but I can't replicate it on any vim I can find. Where are you seeing that behavior?\n. Sorry I'm behind in some of the conversation here; I'm traveling this week. Just wanted to drop one quick note that things not passing in `vimState` is something we should consider a bug to be fixed.\n. Okay, not sure where in my frankenvim this is happening, but confirmed that this matches `:set nostartofline`. I think this may be a macvim default setting. In any case, nice patch. Thanks!\n. Unfortunately I think the real solution here is to fix the underlying problem: when entering visual mode, the character under the cursor should be selected, and then the cursor moved back to its original spot. I have a feeling that this will be unnecessary and/or broken when we fix that.\n. Sorry for the delay responding to this.\n\n> What should I do about these failing tests that rely on the fixing of a different part of the plugin that I don\u2019t want to bother with now?\n\nIs it not possible to write a test that avoids the behavior, i.e. picking columns for which it accidentally works? If the behavior of `j` and `k` is broken and this motion will require them, I'm pretty uncomfortable merging this. I'm definitely :-1: on failing tests. `xdescribe` and `xit` are okay for edge cases, but I'd feel pretty uncomfortable doing `xdescribe` on the entire set of tests for this motion.\n\nAll that said, if you can write tests that pass, even if they're 'lucky', we can merge and move forward. It's not on you to fix everything wrong with the project in order to get the fix you want landed.\n. Okay, thank you for more carefully pulling out the broken behaviors. We will need tests for `+` before merging, though, even if we copy skipped tests, and I will try to look at this this week. Thanks for this patch!\n. > The cursor column is still wrong, but the cursor row and the text in the editor are now correct.\n\nCan we pare the `xdescribe`s down to just a few commented-out assertions, then? The better tested, the better I feel.\n. Working great here. Thanks for the patch!\n. @lucasfeliciano 10.1 depends on the latest atom (0.99), released just a few days ago. Do you have that installed?\n. It's normal to have nothing there. We expose some settings in preferences, but no 'quick toggles'. I wouldn't be opposed to adding one in a PR if there's one you're missing.\n. I'm definitely :+1: on this in principle but there has to be a better way? I feel like this is rewriting a lot of stuff handled by buffer markers: https://github.com/atom/text-buffer/blob/e83cea949e9d34c8dcd82c93643af8d8913c00e2/src/marker-manager.coffee\n. > I'll update the PR when I have something.\n\nThanks, that sounds great!\n. That got lots cleaner. You're killing it @carlosdcastillo! \n![yes3](https://cloud.githubusercontent.com/assets/12676/3106727/95c4c130-e67e-11e3-9d5a-759cfc224717.gif)\n. This isn't a motion and can't compose, i.e. `d%` won't work. We're really close to adding a proper version of this in #254 and I should get around to landing that tonight.\n. Nice and clean.\n. Dupe of #191. Thanks!\n. Crazy: I duplicated this for `yyo<escape>p`, but only if there's no whitespace at the start of the line. `this is a line of text` works fine.\n. Looks really good. :sparkles: for picking this one back up, I miss `ci\"` all the time!\n. Sorry for the delay getting back to this.\n\nI tested using this line:\n\n```\n    Digest::SHA1.hexdigest(\"v7:#{schema_version}#{concurrency}#{IO.binread(schema_file)}\")\n```\n\nThings work great inside the quotes, and `di(` figures out which parens it's in, which is great. But I found a few bug cases:\n- `di(` and `di\"` both fail when not inside any quotes or parens on the line, such as in the word 'hexdigiest'. The correct behavior is to do nothing (probably best to represent this as not composing properly?), but we'll search lines away for a match.\n- `di{` works inside the `{}`, but `di}` in the same set of brackets deletes the rest of the line.\n. Okay, I can't repeat these anymore. I wonder if I broke it testing `)}`?\n\nIn any case, this is a huge improvement on where we were before. Thanks!\n. In the preferences pane for vim-mode, there's a checkbox to 'Start in insert mode' which will do what you want here.\n. Dupe of #219. Thanks for reporting this!\n. Sorry for the delay responding to this.\n\nCan we write a test case that reproduces the bug, or is that not even possible? Autocomplete plus will not be part of the suite, of course, so it's fine if creating the situation to test is very \"synthetic\".\n. Thanks for the updates here. Still a little nervous because the autocomplete plus issue is hard to reproduce exactly, but it doesn't seem to make the situation any worse!\n. Legit behavior issue, so I'd love to get this fixed. Thanks!\n\nI'd love to see tests for this, which is why I want @nathansobo to check if `mousedown` is where we want to be. I'll bet there's a way we can intercept the regular click handler, which might let us clean up  the weird little timeout and, much more importantly, give us a way to test this.\n. @iamjwc have you had a chance to test this with the react editor, or to take a look at `cursors-moved` as @nathansobo suggested?\n. We actually don't need the tests here; we don't write tests for keybindings as opposed to behavior. If we can remove those duplicates I can merge this right up.\n\nThanks!\n. Much cleaner now. Thanks for the patch!\n. I'd be okay with this, but I would want to put it behind a configuration option. Selecting text in atom is different than selecting text in vim.\n. @jspahrsummers selecting text is an event that packages other than vim-mode might want to use; I haven't considered all of the potential ramifications is all. Not saying I wouldn't merge it without a PR.\n. Vim-mode conquers all. Thanks for the patch!\n. I'm not able to replicate this. @Kazanz are you on windows as well?\n. Sounds like we have a legit bug in our mode disabling. We probably need to make each editor's vim state enter insert mode when disabling.\n. Replicated, legit bug. Shift-i needs to deselect after moving the cursor but before inserting. Probably an easy fix if anyone wants to get involved.\n. Looking back at my comment in June, not sure what I was thinking. I don't think we have column selection implemented yet, let alone typing before it.\n. Are you using a plugin theme?\n. Does this work on master?\n\nOn Wed, Jun 4, 2014 at 4:01 PM, Victor Prechtel notifications@github.com\nwrote:\n\n> I have tried it with numerous themes including the default and all seem to\n> yield the same results.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/300#issuecomment-45151012.\n. To get on master, just do a git checkout of master into ~/.atom/packages/vim-mode.\n\nUninstalling and re-installing vim-mode may require an atom restart.\n. :+1: overall. The tests are clear and demonstrate the issue.\n\nI'm :-1: on having to add the boilerplate to every motion. We need to find a way to do that somewhere else. I think it would be fine to do it by default in the superclass' constructor as opposed during execution.\n. @iamjwc no worries about squash and rebase; I'm much more worried about clean branches than clean commits. Will take a look :soon:\n. Fixed some merge commits, but this landed. Nice patch!\n. I think I like this, and I think I like that there's no CSS by default. It allows customization but doesn't get in to theming.\n\nWe do need some tests though.\n. > Should I write some tests? I do not know very well how to write test such a case.\n\nWe need to make sure the code paths run, but I'd be fine running this on the editor directly i.e. just `@editor.updateStatusBar()` . The editors in tests have differences and I'm not sure if the status bar is one of them, so I'm more concerned about not introducing failures than I am about making sure the status bar is right.\n. Thanks for the patch!\n. Every single one of these should work. Are you:\n- Using windows or Linux?\n- Using a non-US keyboard layout?\n. I'm not surprised, unfortunately. There are issues with both Linux keybindings and keymaps, unfortunately. Most of them can be solved with some custom keybindings. See https://github.com/atom/vim-mode/issues/242 for a lot of background.\n. The symbols view screenshot is crazy helpful!! You're not the first person to post with similar issues. A custom keybinding of `.platform-linnux .editor.vim-mode.command-mode` should take care of you.\n\n`:w` is not implemented. You're just seeing the binding for `w`.\n. Thanks for this! This annoying off-by-one has caught up a lot of people.\n\nBut won't this select too much in characterwise visual mode? I think this needs to check for linewise mode.\n\nIn either case, we'll have to have tests. @tony612 wrote some nice, well-done selection tests in #275; I'd ask you to copy that style.\n. I wonder if we still have linewise issues, but this is a huge improvement for something that trips up a lot of people and it's a very clean patch. Nice job, thanks!\n. The \" register is synced with the system clipboard. Just use that one and this already works.\n\nI would merge a pull that makes clipboard syncing with the default register a configuration option, but I wouldn't let it be enabled by default.\n. Sorry, but there's a ton of changes in master now. Can you rebase or merge master and let me know?\n. Sorry for the delay getting back to you on this.\n\nI think the situation on master has changed and I think this needs a little work now :blush:\n\nWhat I'm seeing when I test is that characterwise (lowercase-v) selection is fixed (selects to the first char of the last line), but linewise (capital-V) selection is now the same as characterwise, selecting to the beginning of the last line instead of the end. Can you take a look?\n. Dupe of https://github.com/atom/vim-mode/issues/190. Thanks for reporting this.\n. We are in a good place to cut a release, so we should probably merge this and cut a release the same time that atom makes the react editor the default.\n. /animate me trust fall\n. Vim's search can be used like a motion: `d/abc` to delete until the text 'abc'. There's no way to tie that functionality to the built-in search.\n\nIf you don't ever personally use `/`, a custom keybinding to open the built-in find and replace functionality instead will take care of you. You could similarly bind `n` and `N` to the find-and-replace next/previous functionality.\n. Dupe of #246. Thanks for reporting this.\n. There's a number of issues with soft wrap at the moment; they're unfortunately a caveat in the README right now. Atom core wants to treat soft wraps differently than vim does, and it's just a messy semantic bridge that a lot of motions don't yet account for.\n\nI hope you can work with that and give it a try for now, but if not, thanks for reminding us its an issue.\n. There's actually a built-in function for this that works well enough for markdown, but I miss soft wraps too, to be honest. But what's cool about atom is how easy it is to fix: this snippet will auto-wrap markdown files on save; just put it in your `init.coffee` (just use the menu option for 'Open your init script' to start editing it:)\n\n```\natom.workspaceView.eachEditorView (editorView) =>\n  if editorView.editor.getGrammar().name.match(/markdown/i)\n    editorView.editor.buffer.on 'saved', =>\n      editorView.editor.selectAll()\n      editorView.trigger 'autoflow:reflow-selection'\n      editorView.editor.clearSelections()\n```\n\nIf that helps you, vim-mode is not much harder to work with if you want to start working on soft wrap support :wink:\n. Do you have autocomplete-plus installed?\n. Yes, this is a dupe of #255. Does #290 work for you?\n. Using autocomplete-plus? Dupe of #255 if so.\n. Just pushes a fix for this in 0.11.1\n. Dupe of #255. \n. Just pushed a fix for this in 0.11.1.\n. This is an ex command, which vim mode doesn't support and won't soon. `30G` is a workaround in the meantime (plus, you can do things like `d30G`).\n. This is fixed by #344.\n. vim-mode 0.12 includes the fix.\n. This just isn't implemented yet. I'd be happy to merge a pull with an implementation. An atom setting that mirrors `set ignorecase` might also work well.\n. The test failures seem to be legitimate--why is it okay for them to be broken? Are you saying the broken tests test for broken behavior?\n. > I'm going to see if I can get an over-all fix for this and pull it.\n\n:metal: :metal: :metal:\n. This sounds like an issue we had in older versions disabling and reenabling the plugin. Does it persist after you start atom?\n. Geez, thanks for the link. You'd think people might open an issue on the repo that caused the problem. What a disaster.\n. Just check out the branch in `~/.atom/packages/vim-mode`:\n\n```\ncd ~/.atom/packages\nrm -rf vim-mode\ngit checkout https://github.com/atom/vim-mode\ncd vim-mode\ngit fetch\ngit checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n```\n\nThen just reload atom.\n. Do you have any errors on the console? cmd-shift-i.\n\nOn Tue, Jul 8, 2014 at 11:30 AM, Jordan Prince notifications@github.com\nwrote:\n\n> I did that, and it looks like vim mode, activated, does nothing. I can't\n> escape into non-insert mode or anything. Like a normal app.\n> \n> localhost:vim-mode arkavon$ git branch\n> - fix-undo-in-insert\n> \n> I'm on the right one, and I reloaded atom, and vim mode is not disabled on\n> my settings.\n> \n> On Tue, Jul 8, 2014 at 11:11 AM, Ben Lavender notifications@github.com\n> wrote:\n> \n> > Just check out the branch in ~/.atom/packages/vim-mode:\n> > \n> > cd ~/.atom/packages\n> > rm -rf vim-mode\n> > git checkout https://github.com/atom/vim-mode\n> > cd vim-mode\n> > git fetch\n> > git checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n> > \n> > Then just reload atom.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/atom/vim-mode/pull/344#issuecomment-48361523.\n> \n> ## \n> \n> Jordan Prince\n> \n> CTO - boardvitals.com\n> jordanmprince@gmail.com\n> [image: Facebook]\n> <\n> http://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=>\n> \n> [image: Twitter]\n> <\n> http://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=>\n> \n> [image: LinkedIn]\n> <\n> http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=>\n> \n> [image: WordPress]\n> <\n> http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=>\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48364164.\n. Sorry, alt-cmd-i.\n\nOn Tue, Jul 8, 2014 at 11:34 AM, Ben Lavender blavender@github.com wrote:\n\n> Do you have any errors on the console? cmd-shift-i.\n> \n> On Tue, Jul 8, 2014 at 11:30 AM, Jordan Prince notifications@github.com\n> wrote:\n> \n> > I did that, and it looks like vim mode, activated, does nothing. I can't\n> > escape into non-insert mode or anything. Like a normal app.\n> > \n> > localhost:vim-mode arkavon$ git branch\n> > - fix-undo-in-insert\n> > \n> > I'm on the right one, and I reloaded atom, and vim mode is not disabled\n> > on\n> > my settings.\n> > \n> > On Tue, Jul 8, 2014 at 11:11 AM, Ben Lavender notifications@github.com\n> > wrote:\n> > \n> > > Just check out the branch in ~/.atom/packages/vim-mode:\n> > > \n> > > cd ~/.atom/packages\n> > > rm -rf vim-mode\n> > > git checkout https://github.com/atom/vim-mode\n> > > cd vim-mode\n> > > git fetch\n> > > git checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n> > > \n> > > Then just reload atom.\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/atom/vim-mode/pull/344#issuecomment-48361523.\n> > \n> > ## \n> > \n> > Jordan Prince\n> > \n> > CTO - boardvitals.com\n> > jordanmprince@gmail.com\n> > [image: Facebook]\n> > <\n> > http://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=>\n> > \n> > [image: Twitter]\n> > <\n> > http://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=>\n> > \n> > [image: LinkedIn]\n> > <\n> > http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=>\n> > \n> > [image: WordPress]\n> > <\n> > http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=>\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/atom/vim-mode/pull/344#issuecomment-48364164.\n. Ahh, nuts, of course--run an `npm install` in that directory.\n. 0.12 includes this fix. Thanks guys.\n. Git checkouts wont auto-update. Just remove the directory and re-install vim-mode and you should be good to go.\n. This is intentional behavior; it matches vim. There was a bug with redo but yesterday's release fixed it.\n\nIs there a particular difference from vim that is bothering you?\n. Unfortunately, that's not really possible. We have to manage a ton of our own undo state to get `.` for typing to work correctly.\n\nIs there a vim that does ctrl-z for one character undo in insert mode?\n. @wayou what version of vim-mode are you using?\n. I'm not able to replicate this on the latest release of vim-mode and atom. Can either of you post an exact set of keystrokes to reproduce the issue, starting with `cmd-n` or `ctrl-n` for a new tab?\n. @wayou thanks for the detailed bug report. My setup does not replicate this. Can you please:\n- Post the stack trace from that error you're getting\n- Try this with an English(US) keyboard layout\n. You should be able to do this by broadening the scope of the keybinding selector to something outside of the editor, like `.platform-darwin`.\n. Can you bind it to both? I have to admit I'm not sure why it would not be inherited down to insert mode. cc @nathansobo.\n. Now I understand. I don't actually know how write the selector you want. It's an atom-core thing. Really sorry about that :frowning:\n. Sounds like a potential bug with our column-remembering or end-of-line checking, but I've never run in to this. Are you holding the l or right arrow key down when this happens, or tapping them quickly? Is there some characteristic to 'certain lines' that makes this reproducible?\n. That's exactly what's happening--vim-mode is getting confused by soft wrap. It's in the README as a caveat; soft-wrap needs to be disabled for a lot of features to work correctly.\n\nSorry about that!\n. Nice! Some nitpicks here but this is a very fine pull request.\n\n![yeah dinosaur rainbow vomit](https://cloud.githubusercontent.com/assets/12676/3660627/8848c9b4-11b9-11e4-970d-5cf6dab07e93.gif)\n. Does this happen with vim-mode disabled? Doesn't sound like a problem with the addon.\n. It sounds like you have a custom keybinding such as `ctrl-w q` or `ctrl-w <Anything>`, which is causing atom to wait. That shouldn't be part of vim-mode by default. Do you have any custom keybindings?\n. Do you have soft-wrap enabled?\n\nOn Wed, Jul 23, 2014 at 11:35 AM, harperic notifications@github.com wrote:\n\n> Misclick; it only seems to be happening in the right pane of a split\n> window. Did not mean to close the issue.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/355#issuecomment-49899640.\n. Soft-wrap has known issues, as noted in the README. Really sorry about that. Closing as dupe.\n. What version of vim-mode are you using? I can't replicate this issue.\n. How bizarre. Why doesn't the bug present itself on real code?\n. It should be possible, but will require custom keybindings. You can edit it with Atom -> Open your keymap, and make entries like the ones you find in `vim-mode.cson`.\n. Not being able to bind \u00f8 sounds more like an atom-core issue. cc @nathansobo\n. Don't think this is a problem with vim-mode. @nathansobo can you help me understand why this keybinding isn't getting unset?\n. Cool, glad it's working for you!\n. > I would use Cut not Delete...\n\nThese are the same thing in vim:\n\nhttp://vim.wikia.com/wiki/Copy,_cut_and_paste\n\n> C or X => to delete & add to the clipboard.\n\n`c` (change) is different; it enters insert mode after cutting.\n. > / is in fact a shortcut to :/. From vim's :help ::\n\nPerhaps `/` is an alias to an ex command, but vim doesn't treat it that way. `/foo` composes as a motion. `c/foo` and `yn` demonstrate how it's not just an ex command. `/` is and was correct to treat as vim instead of ex. Compare to `:r !ls`, which vim does not even repeat with `.`. It's a fundamentally different thing than a command-mode action. \n\n> The reasoning for having ex-mode outside of vim-mode is the size of the resulting package, correct?\n\nThis was not the reason I decided to draw a line between vim and ex in https://github.com/atom/vim-mode/issues/50.\n\nBecause vim treats them so differently, commands like `:r !ls` are a fundamentally different from a code perspective, not a memory and footprint perspective. After pressing `:`, a whole new language is parsed and evaluated, one that ignores and is completely separate from the vim motion/command composition stack. I made the initial decision to keep _concerns separated_ and _code clean._ Smaller, focused packages are idiomatic in Atom.\n\nI'm not the maintainer anymore, and perhaps the community is ready to try something else. But that's the historical color.\n. Believe this is all fixed up :hammer:\n. Fixed months ago.\n. As an added bonus, undoing a deletion now undoes the whole thing, not one line at a time :cake:\n. The `dw` stuff is actually a `w` issue. Basically, pressing 'w' on whitespace should select whitespace up to the next word, not the whitespace and the next word. This test fails on master for me:\n\nhttps://github.com/atom/vim-mode/blob/master/spec/vim-mode-spec.coffee#L628\n\nAs for deleting into buffers, I saw that deleted stuff gets into registers, but only one line at a time. This simplifies it by making delete and yank code share code on how they yank...I don't see the need to rewrite the code that works with the motion, since they interact with all motions the same AFAIK. `Change` could probably also be a subclass.\n\nEven if you're not excited about extending `Yank` with `Delete`, the way it reworks using motion is what I originally set out to fix. Using `motion.select` and one big delete instead of adding to the clipboard text line-by-line means that 15ddu deletes and un-deletes 15 lines, which is a big thing for my workflow. I subclassed rather than repeat the fix.\n. Also, the motion rework allows you to get the deleted info from the API if you were to put it into `Delete` on its own, since the repeated deletes are no longer a thing. I'm just not sure why you'd do that, though, since we already have to have a version of that logic in `Yank`.\n. Freaking vim; I never even knew about capital-R. Lowercase r is capital R for one character, then you return to normal mode.\n\nWhether or not this should be a 'mode' is really what I was asking. Let me bang something out over the next day or two and we can maybe pair on cleaning it up if it's the right approach?\n. That's where I'll end up, just didn't want to write one and realize later you had a better idea. Lord knows I'd have never come up with motions that peek an op stack and call `compose` to create themselves, so I was checking first.\n\nThis is so much fun! My poor real work is going to suffer!\n. Added in #138 \n. This is me raising my hand as a softwrap vim user and voting against moving vim-mode to screen coordinates. I never use folds (or visual mode, or 100 other vim things).\n\nBut I understand that Things Happen. As long as I can turn off soft wrapping and everything works as expected with my linewise operators, I'll be okay while this shakes out. Soft-wrap is handy but not as important as correct behavior for me.\n. I have to close this pull as stale, but man would I like it if someone wants to tackle this in a more fundamental way. It trips up a ton of new users.\n. Copypasta aside this solves my immediate issues and could let my other pull :skull:. This is actually a much better way to do it, because I bet those transactions are a great way to implement `.`, right?\n. I've noticed a few weirdnesses for being end-of-line in command mode. Not\nsure if we can fix those.\n\nOn Saturday, August 17, 2013, Yossef Mendelssohn wrote:\n\n> I noticed you can put your cursor on the invisible newline character at\n> the end of the line and then d$ will delete that character and bring the\n> next line up, almost acting like J except not compressing whitespace.\n> \n> There's no vim equivalent of this because you can't put your cursor at\n> that position in command mode.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/pull/26#issuecomment-22819428\n> .\n. I'm still seeing incorrect behavior on this branch.\n\n```\n11\n22\n33\n44\n```\n\nPut the cursor on the first `2` and `2ddp`. With this branch, I get the exact same as the input with the cursor on the `2`. In Vim, I get this, with the cursor on the `2` as well:\n\n```\n11\n44\n22\n33\n```\n\nOne of the tests in #26 is for this. If you pull that in it ought to fail, but I'm not sure it'll still be right after the recent refactoring.\n. In the above example, the atom branch does work correctly if you're on the first line of the file.\n. mcolyer :+1: this is aweeeeeeeeeeeeeeesome\n. > concept of a command log that gets appended to every time a command is completed.\n\nHow is that different than my `@history`? Whenever a completed command executes, it knows whether or not it needs to be saved to the history.\n\nPerhaps the difference is that with `q`, things are serializable for the next time we reload? I admit I don't use `q` much.\n\n(Neither the log nor the history are quite correct, though. Vim history is actually a DAG: http://vim.wikia.com/wiki/Using_undo_branches)\n\nIt's interesting that you see atom/atom#962 as being related. When I found the need for that, I started by going to `commands.coffee` and making them `extend operators.Operator`. They are only special because they need to start a `beginTransaction` and listen for the `endTransaction` from re-entering command mode, as opposed to wrapping themselves in a transaction. They already take a count argument. I hadn't finished it, but it actually looked really, really easy if we could access the patches from the built-in undo history.\n. Right, I understand what you're saying now. In that sense, they are related.\n\nI had imagined that the various `Command`s would be just `Operators` and responsible for storing their own state. The imagined API I had, after atom/atom#962 hypothetically landed, was something like:\n\n```\nclass @Command extends Operation\nclass @Substitute extends Command\n  execute: (count=1) ->\n    @editor.beginTransaction\n\n  # This is called when we re-enter command mode\n  finish: ->\n    @patch = @editor.commitTransaction\n```\n\nThen they are just operators, maintain their own state, and as soon as they entered text atomically, they could be made to Just Work with a very small bit of inheritance.\n\nIf you want to see it, I have a branch that does this, but the net effect is zero without atomic text inserts.\n. I  think partial support is better than no support, especially if atom/atom#962 will be a long time in coming. I use the `7>>...` and `yyp..` incantations _all the time._ For my part, I would have to live on this branch.\n. Cool.\n\nThanks a ton! :confetti_ball: \n. More constructively, if you're up to pair on the status bar thing for a couple of hours this week, @mcolyer, that would be swell.\n. > The API documentation is something we know is lacking and is on our list to improve.\n\nI want to say that this isn't what trips me up. Atom is a high-quality project, and the code is actually quite readable and discoverable. Telepath is a library with a lot of computer science in it and I still figured out what's going on in about an hour of reading--I think that's actually really impressive for what it's doing. And I don't mind hacking against a moving API in pre-release software and fixing it as core changes.\n\nMy worry is that for this pull and the `.` pull the 'right' answer was 'we should fix something in core'. Not that core is a crazy difficult project; I'm sure I could figure it all out in a day. But it makes casual plugin contribution more troublesome if I need to think of _everything that could be_ instead of the _facilities available to me now._ And it helps to know that if I'm only in vim-mode, I'm only breaking vim.\n\nI guess I'm asking if we can just get it done in vim and make it use core facilities as they become available, rather than write them in core as we need them in vim. I'd like to be building up the test suite if nothing else.\n. I'm happy to get this up to date with master if we're okay merging it with the little extra bar as in the screenshot. I'm still on an old branch so i can use this.\n. Okay, I've updated this to work with current master and also added search history with up/down.\n\n@mcolyer any reason we can't merge this? I think your main concern was the status bar stuff, but that's been a long time. I want to use the same mini-editor to give me a place to type for `r`, and I think it will be useful for folks who want to implement ex commands as well.\n. It's Mardi Gras weekend here. **No** hurry from me until at least Thursday! :tada: :confetti_ball:\n. Great feedback as usual, @mcolyer, all adopted. I didn't find any prior art for the view model but I think I've got what you were looking for.\n\nThe tip on a config value for font size was a lot easier to implement than I suspected, @dougblack, also great.\n\nAlso fixed and tested a regression with reverse searching (core's search API changed to require a `=>` instead of a `->`).\n\nSee if this is what you're looking for now?\n. Thanks for keeping the quality bar high! :sparkles: I'll go update my register pull to have search history use the cross-buffer state too.\n. We now import syntax variables. This needs a rebase or merge, but it would probably take like 30 seconds to fix this one up correctly if you're down.\n. What about a second plugin, `ex`? It would be easy to make entering it be as simple as `:` in command mode. That could be as full-featured as one likes while letting vim-mode remain pretty simple; vim mode wouldn't even be required.\n. I think I'm going to take a stab at some shared state between editors here soon. It would be referenceable from other plugins. Javascript!\n. I've got an idea of how to start this: probably just something that talks correctly to vim mode and implements `w`. I'm hoping to have an embryonic ex package :soon:.\n. @jroes, can you make a pull request out of your branch? That will make it a little easier to talk about.\n. Added in #152\n. Fixed in #272 \n. This got fixed by #134 :tada:\n. >  a listener for core:cancel, not sure how I feel about that though. \n\nI think this actually makes sense.\n. And you can run tests with `apm test` in the `vim-mode` directory.\n. Added in #152 \n. This is probably just an off-by-one error somewhere. This is a good little fix if someone is looking for a place to get in to contributing.\n. There's support for scrolling in core, so this one would probably be an easy motion to implement if someone's interested in becoming a contributor.\n. Enable/disable now work correctly, though there is no hotkey for it. Closing this as an issue with atom core, because vim-mode won't be able to enable itself while disabled.\n. Closing this pull as stale. I'm not sure the original issue is still a thing, but if it is, would be happy to pick this up again.\n. @cschneid you'll want to rebase/merge since #134 landed.\n. >  but this is exactly how vim behaves. \n\nIs there a _default_ vim keybinding that does this?\n. Going to close this. There's already a tree explorer and I don't think I'd land a pull replicating NERDTree into vim-mode itself. It could be another plugin, though.\n. Cleaned up.\n. Nitpick has been picked. 2 in a day! :rocket:\n. If someone is interested in contributing, this issue would be an easy place to start. The till motion is almost exactly the same as the existing find motion.\n. Keeping it encapsulated would be ideal. One could probably be a subclass of the other.\n. Added in #225.\n. Still fighting tests. What I have here sends an event to the mini editor correctly, but the test structure is replacing original data with `U+278`. Not sure what's up yet.\n. Okay, fixed up the tests and fixed the line overflow. Will merge this tomorrow afternoon unless there's further comments from anyone. But @mcolyer can usually find something boneheaded I did :laughing:\n. :tada: \n. :heart:\n\n:heartpulse: that you have not specified merge vs rebase :trollface:\n. The only thing this doesn't cover is goals regarding Atom releases. Do we want to say we'll always tag something as the last working version for an incompatible atom core bump?\n. Done.\n. In the long term, `%` should be a native motion. I already miss `d%` and `y%`, and I don't think it's on bracket matcher's roadmap to match quotes, ruby `def...end` blocks, and that sort of thing. But I'd be :+1: on this in the meantime; it's a core module.\n. Fixed.\n. @cjbottaro we're dedicated to helping you help make vim-mode better. Both atom and vim-mode are meant to be easily hackable.\n\nIt sounds like a key mapping may well be all that's required. You can add them in `~/.atom/packages/vim-mode/keymaps/vim-mode.cson` or `~/.atom/keymap.cson` or `~/.atom/keymap.json`. If it works, definitely submit a pull!\n. @tony612 I see the issue too.  It's probably something silly in that motion...do you feel comfortable putting together a pull with a failing test case and fix?\n. Thanks for the bump @zenhob, this got away from me. Works for me too.\n. Works for me if @mcolyer likes it too! :metal:\n. This looks great. I'll merge if you'll just add a changelog entry. Thanks for the patch!\n. This was fixed in either #198 or #205, but we don't actually have tests for a single line file, so I'm going to go ahead and land this.\n. This was fixed at some point.\n. Sorry, thought this was for the `/` search box.\n. @tony612 looks good; add a changelog entry and I can merge this. Thanks!\n. This was fixed in https://github.com/atom/vim-mode/pull/184\n. @nathansobo we talked about this a little, but just writing this down:\n\n> I'm thinking that ::commitTransaction and ::transact should return a transaction object that can be replayed at a different location in the buffer.\n\nThis is exactly how I think it should work. It's a little bit weird, because transactions can encompass things like 'replace the current selection', and that's not a concept that's 'repeatable' in vim; there's no `.` operation in visual mode to repeat a previous `s<typing>` operation on a previous selection. But if we can just get at the concept of 'a chunk of typing', it opens up all the doors we need.\n. Brought this pull back from the dead, and things are going great. I still can't make the tests work, but I now think that might be related to our caching editors across tests.\n\nWhat works:\n`i`, and `.` on it, and undo and redo.\n`cw` and `.` on it, and undo and redo.\n\nWhat doesn't:\n- Other input mode enterers such as `a` and `s` (want tests first)\n- Correctly identifying backspaces in input transactions\n- Correctly re-starting input transactions when the cursor moves\n- **Tests** @nathansobo I would really love to pair with you for a few hours to see if we can't figure this out. I just can't make the tests duplicate the behavior that I see in the editor. Laborious manual testing after every fix is definitely slowing me down.\n\nBut _OHMGOSH_ it works in the base case, and it's glorious. Most of the TODO list is just busywork; as soon as I have tests to prevent regressions I can get them done pretty quickly.\n. I faked some tests with `editor.setText`, which I don't like but I like better than this not landing.\n. Okay. This is working. `i`, `a`, and `c` are moved over to a new setup which acts, near as I can tell, the same as vim. Backspacing and moving during input behave correctly.\n\nThere's a ton more paperwork to do moving everything in `commands.coffee` over to the new setup, work which will make the diff much more unwieldy but not much more interesting. Before I do that, @nathansobo, can I borrow your :eyes: for general sanity and feedback on my off-label use of the undo stack?\n. Fantastic review @nathansobo, thanks! I will clean up the easy stuff.\n. Okay, I'm about to merge this. `c`, `s`, `S`, `o`, `O`, `i`, and `a` are all now support undo and repeat. **Finally.**\n\nSpecific callout to a few recent contributors: would you please get master and see if repeat and undo on typing is not what you expect before I do a release?\n\n@carlosdcastillo @abijr @tony612  @tmm1 @jacobgardener @jcurtis @mcnicholls @mcolyer @nathansobo \n\nFuture cleanups include:\n- Getting the tests to support indentation for some newlines (it respects them in coffeescript files, but not the grammar-less test buffers).\n- Cleaner interface to undo history\n- Cleaner interface to transactions\n- Some movement commands in insert mode need to reset their transactions (does anyone page up/page down in insert mode?)\n\nThose are all pretty ugly but I am really tired of not having this when I'm on master.\n. Nice idea. Can you add a screenshot?\n. This is an **amazing** spike at a nontrivial feature. I left a lot of comments but don't let that detract from:\n\n![you re awesome](https://f.cloud.github.com/assets/12676/2433000/61d0db04-ad7e-11e3-986e-d30211fa7532.gif)\n\n> There's probably going to be a lot of these view-models, it might be best to move them into a file for themselves to keep the folder clean. Likewise instead of setting@current_thing_ for each of the special operators it might be best to create a general object to hold them all to keep the code clean. Anywho those are my thoughts\n\nI was going to refactor after I did a second operator, and you've beaten me to it. You're right that this needs cleaning up; I think you've done the right thing in this pull by straightforwardly copying the workflow for replace. Extraction/refactoring can be a pull by itself.\n\nOnly one thing I thought of: it doesn't seem like we're restricting marks to `[a-z]` here, and we should probably match vim and do that.\n. > I totally forgot about limiting to the [a-z][A-Z],\n\n`[A-Z]` can have a pretty different function (opening files that are not open, marks shared across buffers [and instances of vim?]). I would just limit it to `[a-z]` right now, since that's the behavior you're replicating.\n. Sorry, this got out from under me. Let me go over this again and we can probably get it landed tonight.\n. This is looking really good. Love the refactoring into the view model.\n. > Hey, so I wanted to get started on commands like f and i( and the such so I went ahead and refactored over here. \n\nFeel free to make a WIP pull request if you want to talk about it. It's the best way to talk about it.\n. > so should I not merge in my refactoring into this branch, and instead should fix up this branch by itself (the few comments you left above)?\n\nYeah, let's get this done. It's basically there. Can you merge/rebase?\n. @danzimm Sorry! I meant I need you to merge master into this (the merge button is disabled right now), and fix up the comments I've made here and we can get this landed. Then we can check out `refactor-vim` in another pull.\n. Great pull, sir.\n. Merging this. This is the hard part of the diff, and it will be impossible to keep it up to date with master. New text objects can be added cleanly in another pull.\n\n@nathansobo :heart:\n. #286 implements those. It will land :soon:\n. SO MUCH FOR MY WEEKEND PROJECT, everything will be done by then. This rocks.\n\n![kitty dj](https://f.cloud.github.com/assets/12676/2457172/1050c1d2-af30-11e3-919e-1a6b2979b9b8.gif)\n. > Should we replace the implementation of resetCommandMode with a call to activateCommandMode so that we ensure we're kicked out of 'operator-pending' mode?\n\nYes. You can't activate command mode and have operators already pending.\n. > Other than that I tried to fix the cursor going to the end of the line but I'm unsure how this should be implemented/it caused specs to error up and I feel like dealing with that should be in a different PR\n\nAbsolutely another PR.\n\n> With this new canComposeWith method, do we still need to throw errors and try to catch them in the processOpStack?\n\nI think probably yes. Imagine `g~3y`. Everything can compose with everything but it's invalid and needs to blow up the whole stack.\n. So here's a thought. It looks like this is getting messy because the input motions/operators have view models that need to know what to do when operations don't compose. Why don't we add a few events to vimstate itself? View models could trigger their own removal on `vim-mode:op-stack-cleared`, and when trigger it when we find a false `canComposeWith`.\n\nDoes that make sense?\n. :+1: exactly what I mean. I think the op stack stuff in VimState will get a lot cleaner.\n. >  Is it just a file size issue? If that's the case I think we should split the file up.\n\nI think you make a good point. The view models themselves, whether they're actually controllers or view models, provide a handy point of abstraction between the operations that need them. But I don't see what advantage a reified controller abstraction would bring.\n\nLet's split out fatter motions and operators into their own files and see if this still feels icky. I suspect it won't.\n. > Is this ok \n\nThis is perfect.\n. This diff is basically 100% code turnover and we need to get it merged. Testing it now.\n. Merging this so the project can move forward. Thanks @danzimm!\n. I think leaving this in your personal keymap is the way to go for right now. We've looked at other plugins to simulate more of ex, so I don't want to make that the default yet.\n. Clever hack. Need to think about it a tad.\n. @nathansobo what do you think? Is this a core issue?\n. No, haven't started on ex yet :frowning:\n. `a` at the end of a line did not append, but pushed the cursor back before the last character and then entered insert mode. There was another one too but I forget it. Sorry for not documenting this better.\n. Do the tests run with `apm test`?\n. Overall I think I like the refactoring, thanks for the patch! Search is getting clunky but that's mostly my fault for doing a bad job in the first place.\n\nI was going to have to break it down into a 'base' search and a non-base search for repeats that share state across buffers, so something like this was needed. But I suggest we do `Search.Base` instead of `Basic`. Base is now an abstract class, not a basic one. But this is good work that needed to happen.\n\nTesting, I also found a few corner cases. For example, with this code:\n\n```\ndaemon.error do |boom, timer|\n  Failbot.report(boom, :timer => timer.name)\nend\n```\n\nPutting the cursor on the `t` in `timer` in vim and cycling with `*` goes through the 3 `timers` in a loop. With this, one goes from the `boom, timer` to `:timer`, then to the `:` in `:timer`, from thence to nowhere, since we're now off timer. I think there's an off by one error somewhere that the tests are missing since we're always seeking to the beginning of a line.\n\nYou've marked off some corner cases in the tests but I'm not sure if this is the same thing. I wonder what vim's logic for 'word under cursor' is? Is that documented somewhere?\n. > When I execute apm test, it still says it is skipping them, no clear reason why\n\nI just played around with it and got them to run by removing the `#` character in the `describe` line on line 746. It works fine if one calls it 'the hash keybinding'. No idea why the tests would not run in that case, but...surprise, gotcha, computers!\n\n![surprise shark](https://cloud.githubusercontent.com/assets/12676/2640246/8a48e94a-bee1-11e3-8a1a-26d90cd227e7.gif)\n. Is it possible to keep changes to `/` in their own PR? That bulks this up a bit and it makes it hard to see what's being added.\n. This is really close to ready. Just a few nits left. Looking forward to having this in!\n. >  Can't work out what the intention behind removing the last character was,\n\nI can't either, and I can't replicate the problem anymore. Thanks for the patch!\n. Wish I could pin this or something. If we come up with a few more cool hacks I'll definitely make some examples.\n. I'm no longer able to reproduce this. Are you on at least atom 0.94 and vim-mode 0.9?\n. Is this still needed after #198 landed? Sorry it took me a few days to get to it.\n. Can merge master/rebase please?\n. Okay, I see the remaining issues. Taking this for a spin now.\n. I need to run out now, but after playing with this it looks like all the problems are fixed. If you can clean up the one or two nitpicks I had I'll get this merged tonight. Would be awesome to finally put this to bed.\n. Thanks for the fix!\n. This looks great, and more or less the way to do it. I don't want to add a new operator that doesn't compose properly, though, so a test for `4~` is all this is missing. Thanks for the patch!\n. > Would you prefer to have this be its own file?\n\nWe don't have a hard rule on this; it doesn't look like this operator will become huge, so it's fine.\n\n> but I'm finding it difficult to perform the move right operation without doing it in the operator as well.\n\nI think `Replace` operator will actually work very similarly in terms of how it composes, and be a good place to crib from. Just don't get tripped up on the view stuff it needs to accept a character as input.\n\nLooking forward to this!\n. Stumbled across a few :bug::\n- `4~` on a 3-character line will not upcase the last character on the line\n- Nothing happens at all in visual mode\n\nSeveral operators are buggy in visual mode, so I think we could get this merged and get that in a later pull if you'd prefer. But we need to get the behavior right when going past the end of line.\n. Woops, I missed your updates. This looks good now. More operators! More vim! :dancers:\n\n![dancing tyrion](https://cloud.githubusercontent.com/assets/12676/2759474/9a1aa9ec-c9a1-11e3-9489-0b93cb7a7219.gif)\n. This is looking much cleaner. Can you merge master into this?\n. Something's wrong here. The new motions aren't in the diff, just their tests (which of course fail).\n. ![and there was much rejoicing](https://cloud.githubusercontent.com/assets/12676/2714537/8156b6b0-c4f8-11e3-973a-00aaf4b02647.gif)\n. I can't replicate this. Do you have any other non-core packages installed? Do you have any custom keybindings?\n. Can you try the master branch? These are working for me.\n. There's some more discussion of this in #176, so closing this as a dupe. Thanks!\n. I can't reproduce either this or the `j` problem you have #218. I have a feeling this is some custom keybinding, or a conflict with another package. Do you have any custom keybindings?\n. I'd like to see the full DOM hierarchy for the active editor:\n\n![gistfile1 txt - _users_ben_github_heaven](https://cloud.githubusercontent.com/assets/12676/2885262/27e125f0-d4bd-11e3-9f49-2b7ebc6d6056.png)\n\nDo arrow keys work when `j` is broken?\n. @mwaskom `motions.coffee` doesn't even exist anymore...do you still have the problem on master? Same question for you on master, @d2fn.\n. @mcolyer maybe we should cut a release. There's a lot of unreleased stuff in head.\n. mwaskom to install the dev version of a package, just clone a copy of this repo to `~/.atom/packages/vim-mode`.\n. @mwaskom  @d2fn do you still have problems with atom 0.99 and vim-mode 10.1?\n\nIf so, what keyboard laying are you using?\n. @mwaskom do you have soft-wrap enabled?\n. Okay, that's the issue. There's a ton of problems with soft-wrap and vim mode right now, because we can't always identify the cursor location correctly, and because editor commands like `moveDown` and `moveRight` mean something else when in a soft wrap. It's listed as a caveat in the README (admittedly, that  note is a recent change).\n. @d2fn are you on 0.94 of atom and 0.9.0 of vim-mode?\n. Closing as stale. I think we're 4 versions of atom-keymap since this issue was filed.\n. These edge cases would probably be a good place to start if someone's interested in becoming a contributor.\n. This seems like a bug with `MoveUp` in visual mode, not a bug in `SelectLine`. \n. This looks like a dupe of #255. Thanks for reporting this.\n. This sounds like an issue with atom core. @nathansobo, has this come up before?\n. Unfortunately, there are absolutely issues with international/dvorak keyboard layouts right now. I'm not entirely sure how to fix them.\n\nHow does vim handle this? Is vim indent on a german keyboard `>` (lower left, if I recall correctly) or `shift-.` (`:`), two keys left of the right shift key?\n\nIf it's the latter, we'll probably have to come up with sample CSON files for international keyboard layouts. Chromium doesn't give us access to the actual keys being pressed (I think).\n. @guanlun, does this happen for you on master as opposed to the last release? I believe this has been fixed.\n. No worries, we should probably do a release.\n. This isn't working for me, and I don't see where in the code the highlighting would be set. Am I missing something? Can you provide a screenshot? Do I need to do something other than search for text that exists?\n. Oh, I see!\n\n(For future reference, you can embed pictures directly by dragging them to the text area, or with this markdown: `![](http://imgur.com/wapzQca.png)`)\n\n![](http://imgur.com/wapzQca.png)\n\nPlaying with this more now.\n. So I love this idea, and am suddenly wondering how I lived without it. But I'm not sure this is the right way to do it, because the text selection means that certain semantics would be different. For example, in your screenshot, `/printf<enter>i` _replaces_ `printf` rather than inserting before it. I'm poking around to see if there's another way to do it.\n. Unfortunately I don't think I feel too comfortable with this as a selection. https://github.com/atom/find-and-replace/issues/138 shows it's not a huge priority to fix, unfortunately. https://github.com/richrace/highlight-selected Has a setup for highlighting search terms, and I'd be amenable to doing what's required to work with that, if it's possible.\n. Hmm. I like the results, but lets see if there's not a cleaner way to do this. It would be better if there were a way to interact with the existing highlight-selected module than to copy it.\n\ncc @richrace for his state-of-the-art highlighting module at https://github.com/richrace/highlight-selected\n\ncc @nathansobo - How do you feel about some kind of highlighting module like this becoming a core module? One we could interact with by triggering events on the editor or something like that?\n. I chatted with @nathansobo today and I think we need to wait. Some of the changes coming down the pipe in the medium term are going to break any kind of manual rendering like this pretty badly. If we ship this today, there will be a bad upgrade experience when it breaks. The good news is that those changes should have a proper API for applying styles to buffer markers.\n\nSorry @carlosdcastillo! Please keep up the contributions :confounded:\n. This is looking really good when whatever is messing up the specs is fixed!\n\n![yeah pizza kitty](https://cloud.githubusercontent.com/assets/12676/2936999/d6e6c3ce-d87e-11e3-9595-6340c9b94108.gif)\n. `>>` is working fine for me. If it fails for you, do you get any console errors?\n. :fire: :hotsprings: :cat2: \n\nThanks for the patch!\n. Closing as a dupe of #176. Thanks!\n. I had to pull this out due to some bugs in #194. I would love to see this fixed.\n. Updated issue title. `$` should work fine; have you had issues with it?\n. Do you see any errors on the console when trying to use it? Does it not work standalone, or when composed with an operator like `d`?\n\nYou can enable the console with cmd-alt-i on mac, or whatever opens the developer console normally in Chrome on your system.\n. @nrs, you can test it manually like this:\n- Open the console\n- Set the cursor halfway through a line\n- Click on the console and type this: `atom.workspaceView.getActiveView().trigger('vim-mode:move-to-last-character-of-line')`\n- Click on the tab of the editor (not the text, as that would move the cursor).\n\nYou'll be able to see the cursor again. Is it at the end of the line?\n. In Atom's preferences page, there's a 'keybinding' entry on the left side. You can just put `$` in the search field and it should bring up any entries. I only have the vim-mode entry.\n. Interesting, it should just be one binding with a selector of `.vim-mode:not(.insert-mode)`. Can you try bumping vim-mode to master? To do that, check out a copy of the repository to `~/.atom/packages/vim-mode`.\n. Ahh, I have a feeling that `$` is a dupe of #222.\n\nUnfortunately I don't have an answer for that :frowning: I will definitely keep this issue open for `{}[]()` though.\n. @colinkeenan @nrs, there appear to be issues in atom-core with international keyboard layouts. Are either/both of you using a layout other than English (US)?\n. I'm excited about this too. It's painful to have `ciw` and not `ci\"`! Just needs some cleanup.\n. Closing in preference to #286\n. Having trouble reproducing. Are you on Linux?\n. I just updated and still can't replicate.\n\nWhen you go to Preferences -> Keybindings, and search for 'j', what comes up? Does it look like this?\n\n![settings - _users_ben_github_uxr](https://cloud.githubusercontent.com/assets/12676/2951211/8418c71c-da24-11e3-94ca-cc96a46fc1bb.png)\n. I managed to duplicate this behavior by disabling/re-enabling vim mode during a session, but it's always fixed on restart.\n. That's fair, but shouldn't restarting atom fix the problem entirely until one manually enables/disables vim mode? @floatingatoll, @bencaron, @Industrial: if you enable vim-mode and restart atom, does the problem persist?\n. Sorry, previous post was to the wrong thread.\n\nOkay, so the workaround for any future arrivals to this thread:\n- Don't disable and re-enable the plugin\n- If you do, restart atom\n\nThe cause is that we're not removing the event bindings in `VimState` when disabling. We need to implement `deactivate` to in `vim-mode.coffee` to fix this properly. This is a legitimate bug, but I have to admit that #176 and a few others are going to be a priority over it.\n. Good catch, thanks.\n. I'm not reproducing this with basic movement and inserting/typing. Can you tell me what triggers the error? Can you show me the stack trace of the error?\n. Played around with this a bit.\n\nAtom simply does soft wrapping differently. In vim, soft wraps are ignored when determining what to do with movement. Everything's still a logical line. But we reuse atoms primitives for movement, which take screen lines into account.\n\nUnfortunately, all I can say right now is that vim-mode is not going to play well with soft wrap enabled. To the point that we should probably put a message in the status bar or something.\n. Assuming you're on linux? Have to close this as a dupe of #222. Sorry :frowning:\n\n@atom/core this has bitten several people. Can someone please look into it?\n. ![yes cookie](https://cloud.githubusercontent.com/assets/12676/2971953/0b877ec2-db70-11e3-89be-3b65288f01dd.gif)\n. Nice catch, clean patch!\n![yes2](https://cloud.githubusercontent.com/assets/12676/2971869/5902ce64-db6f-11e3-9df9-f9002a50f454.gif)\n. Great catch and a clean patch.\n\nOne thing I noticed testing is that searching in visual mode replaces, rather than adds to, an existing selection. For example, try `vjj/text<enter>`. In vim, this will select two lines down, then add to the selection until the search term. With this branch, the lines selected by `jj` are deselected.\n\nIs that an easy fix?\n. ![high five 2](https://cloud.githubusercontent.com/assets/12676/2991529/2cd10e44-dc7f-11e3-9471-5df5c10aecd7.gif)\n. Need to look at this more carefully tomorrow, but:\n\n![yeah salute](https://cloud.githubusercontent.com/assets/12676/2966487/1f6f5278-db13-11e3-892e-0286b48aea2f.jpg)\n. Clean patch, just one nitpick.\n\nChanging all of the commands from `vim-mode:whatever` to `whatever.vim-mode` makes some sense, but I'm concerned because it will break custom keybindings. It's probably a good idea, though, and in the grand scheme of things atom is still young so now would be a good time.\n\nI think making that change is for another pull with more discussion. Willing to create such a pull?\n\nFixes #230.\n. :metal:\n. When atom does a release that includes your fix, I will merge this and make a release of vim-mode as well.\n\nRemind me when that happens if I miss it.\n. Looks great. Thanks!\n. 0.10.0 is hot off the presses!\n. Closing as dupe of #50. Thanks!\n. Closing as a dupe of #99. Thanks!\n. No apologies necessary. A few dupes are way better than a community afraid to get involved!\n\nAnd thanks!\n. In atom, the cursor is rendered in the `overlayer` div, which has a z-index above the lines. You could set `.lines` to have a z-index of 3, which would make the overlayer actually appear behind the lines, and a solid cursor color would work better.\n. Do you have soft line wraps enabled?\n. Can you try it without them? There have been problems reported with that in #231 that we don't have a fix for yet.\n. That command should be entered in the chrome Javascript console (cmd-ctrl-i on linux, I believe), not the terminal.\n. Sorry, maybe ctrl-alt-i? It's whatever brings up the console normally in Linux chrome, a key combination I'm unfortunately ignorant of :frowning:\n. If some other package comes up with an event like `move-up` without a namespace, will this conflict?\n. I'm not entirely sure I'm comfortable with that, unfortunately. We have a lot of generic-sounding events and surely some other package will eventually clobber them.\n\n@mcolyer any thoughts?\n. This has been a good discussion, and I think the best decision is to close this. Atom uses the prefixes everywhere, and I think rocking the boat is just not the right thing to do, especially when every linux user has custom keybindings for `$`. I agree with your last comment that we don't gain much by adding more overheard.\n\nThanks for the pull regardless @cadwallion, keep it up!\n. Closing as a dupe of #176. Thanks!\n. > (BTW, this is my fist PR ever!)\n\nNice! Welcome to the party!\n\n![applause 2](https://cloud.githubusercontent.com/assets/12676/2999299/3f342a2c-dd14-11e3-9bd0-9937f6aca0f8.gif)\n\nWe're glad you're here, but this pull still needs work. `$` on an empty line will move up a line, and we should have a test for this behavior.\n\nYou can run the tests by typing `apm test` in the directory with vim-mode. There's a ton of tests already that should help you see how to write them.\n. > I'm wondering if my solution is just a quick hack, and there is a complex underlying problem.\n\nThere _is_ a complex underlying problem, to be sure, one that's exceedingly difficult to solve elegantly. No reason not to merge stuff in the meantime.\n. Good stuff. Glad to be a part of your first pull!\n. I think we can remove the original length check and get this landed. :sparkles:\n. @jacobgardener do you think you'll get to this teensy super tiny cleanup?\n. Thanks for the patch!\n. Seems reasonable enough, but we need a way to get the specs passing in Travis, which seems to be firing them as copy instead of exit-command-mode. \n. I'm not sure we need tests for keybindings like this, but it's not really okay for the tests to only pass on one platform. @nathansobo any advice on how to make `simulateDomAttachment` editorViews behave as if they are on different platforms than they are?\n. Ctrl-c does leave command mode in macvim, so it's a reasonable default. I can't merge this with failing tests, but if you want to pick it up, I would be happy if we killed the bad test and cleaned up the newline.\n. Done with tests in #339 \n. Closing as a dupe of https://github.com/atom/vim-mode/issues/50. We've decided _not_ to make `:` open the command palette. It breaks muscle memory, and a lot of people are interested in a more full-featured ex replacement.\n\nWe do appreciate the patch and participation, though, keep it up!\n. Can you rebase this or merge master into your branch?\n. I've really been wanting this! Just one nitpick in the code.\n\nI am seeing an off-by-one error, though. n the text string `abc123 [text] abc123`, putting the cursor on the `x` in text, `%` goes to the `[`, correctly, then to the space after the `]`, then back to `[` and then reliably repeats. If I start on the `]`, `%` takes me to the first `t` in text`, then back to`]`, all correctly.\n\nThe tests pass and look fine to me, so I'm not sure why it's different.\n. Unfortunately I'm still getting some errors :frowning::\n\nFor `x(abc)y`:\n-  `%` on `x` brings me to the first bracket character after looping past the end of the file.\n- `%` on `(` brings me to `y` instead of `)`\n- `%` on `a` brings me to `)`, correctly, but\n- `%` on `b` or `c` brings me to `(`\n- `%` on `y` brings me to `(`\n\nI think there is some state getting leaked between multiple presses. While trying to make this list, I think some cases did not repeat every time.\n. How embarrassing, I had a user keymap for `%` for the bracket matcher module.\n\nThis code is kind of weird, but then again, so is vim's behavior. Great work.\n. Did you recently upgrade? This sounds like an object is missing that was added recently. Does the problem persist after restarting atom?\n. Hmm, okay. I can't reproduce so I'm a little confused. I see you're on OS X so I'm not sure what's going on.\n\nDoes the problem occur if you switch to master on vim-mode? To do that, remove `.atom/packages/vim-mode` and replace it with a git checkout of this repository.\n. > wondering whether it's an issue exist in Atom upgrading part.\n\nI'm wondering that too, especially if it happened twice. I'm pretty sure I saw it once too, but I spend so much time hopping branches in development that I assume that was the cause. Thanks for reporting this.\n. `r` and `/` can also trigger this.\n. This is awesome, and I'm looking forward to it. I did notice one bug. With this data (which cannot have a newline. `dd` the last line of the file if atom adds one when copy-pasting):\n\n```\nab cde1+-\nxyz\n\nzip\n```\n\nIf I `w` my way through it, everything is fine until the cursor is on the `z` in `zip`. Then I press `w` and go to the character after `p`, the non-existent newline. Then further presses bounce the cursor back and forth between the `z` and the character after the `p`. In Vim, I end up on the `p` and stay there.\n. Been a busy week. Thanks for the bump, will try to get to this :soon:\n. Works great. Thanks!\n. A few people have reported this with different motions, but I can't replicate it.\n\nDoes this happen for you if the `r` or `/` are the first things you do after a restart? I wonder if something is not messing up the stack, and these commands are just where it breaks.\n. Does it happen with the latest atom release as opposed to head?\n. Okay, so maybe we have a bug against atom head. @nathansobo can you take a look?\n. How is `Input` getting on the stack at all? It's not an operation or motion. \n\nhttps://github.com/atom/vim-mode/issues/255 fixed it by disabling `autocomplete-plus`, which is too bad because I've been meaning to try it out. I wonder if he didn't manage to disable/reenable vim-mode in that process and that was the real issue?\n. Going to close this as a dupe of #255 (issues with autocomplete-plus). Thanks for reporting this.\n. Correct, dupe. Thanks for reporting this, though.\n. This looks like a legit bug; marks are not correctly moving around when the buffer changes.\n. This has been implemented. Are you perhaps using linux? If so, see https://github.com/atom/vim-mode/issues/222#issuecomment-43760890\n. This has been implemented. Are you perhaps using linux? If so, see https://github.com/atom/vim-mode/issues/222#issuecomment-43760890\n. I bumped atom to the latest today and this isn't working for me anymore. Thanks for reporting this.\n. Atom 0.98.0 should fix this.\n. @abijr this looks like the double-movement bug that was fixed recently. Does this occur on master vim-mode after you quit and restart atom?\n. Closing as a dupe of #231. Soft wrap breaks a ton of stuff right now.\n. I'm not sure I want to overwrite the default win32 keybindings. Making a custom keybinding with a more specific CSS selector will do the trick. Something like `.workspace .editor.vim-mode:not(.command-mode)`.\n. After a little thought, you're probably right. If you wrap this change into a PR I would merge it.\n. Let's say yes.\n. Eeek, looks like the test suite doesn't like this :(\n. The tests pass on master again. Can you rebase or merge master and we can look at this again?\n. I'm going to guess the tests simply don't run inside a `.workspace` so none of the keybindings are firing. Not sure what to do about that.\n\nI don't know how to get to a breakpoint, but if you change a test's name from `it` to `fit`, that test will be focused and the only one to run, which usually makes things easier.\n. This looks like a similar problem that occurred during the last update cycle to several people. Does reinstalling atom and vim-mode fix it?\n. Atom 0.98.0 should fix this.\n. :+1: works for me too.\n. `vim-mode` stuff is mostly for command mode. I think binding `cmd-l` to `core:move-right` will do what you want here.\n. :cool:\n. Atom 0.98.0 should fix this.\n. @pengux is there anything in the console?\n\nCan you test if `$` is acting like `4`, i.e. does `$dd` behave like `4dd`?\n. What is your keyboard layout?\n. As an experiment, if you change your layout to English (US), does $ start to work? (shift-4)\n. It's problems in atom-keymap still, unfortunately.  https://github.com/atom/atom-keymap/pull/31 is probably the fix, but we'll need an atom release to get you going correctly.\n. Good catch. Standing by.\n. `0.10.1` has been released, which is the same as 0.10 but with a bumped atom req.\n. What do you mean by 'react editor'\n. I'm going to close this for now, as the react editor isn't really stable yet. We've got enough issues with keymaps and soft line wraps that I don't feel comfortable calling react 'supported'.\n. This is an improvement for characterwise selection, so I'm going to go ahead and merge it. Looks like we still have issues on linewise (`V`), but those issues are probably because it's broken for the simple case of up-down.\n\nThanks for the patch! Very clean.\n. Linewise visual mode should be fixed on master. I will probably wrap up a release in the next day or two; we have a lot of stuff in there but the improvements to `.` and undo around typing are big enough that I wanted them to get some testing before I shipped them out.\n. Yeah, that's a legit bug. We have an equivalent bug in linewise visual mode where the starting line doesn't seem to be selected either.\n\nGood candidate for someone wanting to get involved in development. Probably a simple fix somewhere.\n. Looking forward to a pull!\n. Is this still needed after #272?\n. Sorry for the delay getting to this. This code is super clean and the fix to going to the correct line is :sparkles: and a big improvement. But I'm not sure that the characterwise fix is the correct behavior. I'm wondering if my vim has a strange setup but I can't replicate it on any vim I can find. Where are you seeing that behavior?\n. Sorry I'm behind in some of the conversation here; I'm traveling this week. Just wanted to drop one quick note that things not passing in `vimState` is something we should consider a bug to be fixed.\n. Okay, not sure where in my frankenvim this is happening, but confirmed that this matches `:set nostartofline`. I think this may be a macvim default setting. In any case, nice patch. Thanks!\n. Unfortunately I think the real solution here is to fix the underlying problem: when entering visual mode, the character under the cursor should be selected, and then the cursor moved back to its original spot. I have a feeling that this will be unnecessary and/or broken when we fix that.\n. Sorry for the delay responding to this.\n\n> What should I do about these failing tests that rely on the fixing of a different part of the plugin that I don\u2019t want to bother with now?\n\nIs it not possible to write a test that avoids the behavior, i.e. picking columns for which it accidentally works? If the behavior of `j` and `k` is broken and this motion will require them, I'm pretty uncomfortable merging this. I'm definitely :-1: on failing tests. `xdescribe` and `xit` are okay for edge cases, but I'd feel pretty uncomfortable doing `xdescribe` on the entire set of tests for this motion.\n\nAll that said, if you can write tests that pass, even if they're 'lucky', we can merge and move forward. It's not on you to fix everything wrong with the project in order to get the fix you want landed.\n. Okay, thank you for more carefully pulling out the broken behaviors. We will need tests for `+` before merging, though, even if we copy skipped tests, and I will try to look at this this week. Thanks for this patch!\n. > The cursor column is still wrong, but the cursor row and the text in the editor are now correct.\n\nCan we pare the `xdescribe`s down to just a few commented-out assertions, then? The better tested, the better I feel.\n. Working great here. Thanks for the patch!\n. @lucasfeliciano 10.1 depends on the latest atom (0.99), released just a few days ago. Do you have that installed?\n. It's normal to have nothing there. We expose some settings in preferences, but no 'quick toggles'. I wouldn't be opposed to adding one in a PR if there's one you're missing.\n. I'm definitely :+1: on this in principle but there has to be a better way? I feel like this is rewriting a lot of stuff handled by buffer markers: https://github.com/atom/text-buffer/blob/e83cea949e9d34c8dcd82c93643af8d8913c00e2/src/marker-manager.coffee\n. > I'll update the PR when I have something.\n\nThanks, that sounds great!\n. That got lots cleaner. You're killing it @carlosdcastillo! \n![yes3](https://cloud.githubusercontent.com/assets/12676/3106727/95c4c130-e67e-11e3-9d5a-759cfc224717.gif)\n. This isn't a motion and can't compose, i.e. `d%` won't work. We're really close to adding a proper version of this in #254 and I should get around to landing that tonight.\n. Nice and clean.\n. Dupe of #191. Thanks!\n. Crazy: I duplicated this for `yyo<escape>p`, but only if there's no whitespace at the start of the line. `this is a line of text` works fine.\n. Looks really good. :sparkles: for picking this one back up, I miss `ci\"` all the time!\n. Sorry for the delay getting back to this.\n\nI tested using this line:\n\n```\n    Digest::SHA1.hexdigest(\"v7:#{schema_version}#{concurrency}#{IO.binread(schema_file)}\")\n```\n\nThings work great inside the quotes, and `di(` figures out which parens it's in, which is great. But I found a few bug cases:\n- `di(` and `di\"` both fail when not inside any quotes or parens on the line, such as in the word 'hexdigiest'. The correct behavior is to do nothing (probably best to represent this as not composing properly?), but we'll search lines away for a match.\n- `di{` works inside the `{}`, but `di}` in the same set of brackets deletes the rest of the line.\n. Okay, I can't repeat these anymore. I wonder if I broke it testing `)}`?\n\nIn any case, this is a huge improvement on where we were before. Thanks!\n. In the preferences pane for vim-mode, there's a checkbox to 'Start in insert mode' which will do what you want here.\n. Dupe of #219. Thanks for reporting this!\n. Sorry for the delay responding to this.\n\nCan we write a test case that reproduces the bug, or is that not even possible? Autocomplete plus will not be part of the suite, of course, so it's fine if creating the situation to test is very \"synthetic\".\n. Thanks for the updates here. Still a little nervous because the autocomplete plus issue is hard to reproduce exactly, but it doesn't seem to make the situation any worse!\n. Legit behavior issue, so I'd love to get this fixed. Thanks!\n\nI'd love to see tests for this, which is why I want @nathansobo to check if `mousedown` is where we want to be. I'll bet there's a way we can intercept the regular click handler, which might let us clean up  the weird little timeout and, much more importantly, give us a way to test this.\n. @iamjwc have you had a chance to test this with the react editor, or to take a look at `cursors-moved` as @nathansobo suggested?\n. We actually don't need the tests here; we don't write tests for keybindings as opposed to behavior. If we can remove those duplicates I can merge this right up.\n\nThanks!\n. Much cleaner now. Thanks for the patch!\n. I'd be okay with this, but I would want to put it behind a configuration option. Selecting text in atom is different than selecting text in vim.\n. @jspahrsummers selecting text is an event that packages other than vim-mode might want to use; I haven't considered all of the potential ramifications is all. Not saying I wouldn't merge it without a PR.\n. Vim-mode conquers all. Thanks for the patch!\n. I'm not able to replicate this. @Kazanz are you on windows as well?\n. Sounds like we have a legit bug in our mode disabling. We probably need to make each editor's vim state enter insert mode when disabling.\n. Replicated, legit bug. Shift-i needs to deselect after moving the cursor but before inserting. Probably an easy fix if anyone wants to get involved.\n. Looking back at my comment in June, not sure what I was thinking. I don't think we have column selection implemented yet, let alone typing before it.\n. Are you using a plugin theme?\n. Does this work on master?\n\nOn Wed, Jun 4, 2014 at 4:01 PM, Victor Prechtel notifications@github.com\nwrote:\n\n> I have tried it with numerous themes including the default and all seem to\n> yield the same results.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/300#issuecomment-45151012.\n. To get on master, just do a git checkout of master into ~/.atom/packages/vim-mode.\n\nUninstalling and re-installing vim-mode may require an atom restart.\n. :+1: overall. The tests are clear and demonstrate the issue.\n\nI'm :-1: on having to add the boilerplate to every motion. We need to find a way to do that somewhere else. I think it would be fine to do it by default in the superclass' constructor as opposed during execution.\n. @iamjwc no worries about squash and rebase; I'm much more worried about clean branches than clean commits. Will take a look :soon:\n. Fixed some merge commits, but this landed. Nice patch!\n. I think I like this, and I think I like that there's no CSS by default. It allows customization but doesn't get in to theming.\n\nWe do need some tests though.\n. > Should I write some tests? I do not know very well how to write test such a case.\n\nWe need to make sure the code paths run, but I'd be fine running this on the editor directly i.e. just `@editor.updateStatusBar()` . The editors in tests have differences and I'm not sure if the status bar is one of them, so I'm more concerned about not introducing failures than I am about making sure the status bar is right.\n. Thanks for the patch!\n. Every single one of these should work. Are you:\n- Using windows or Linux?\n- Using a non-US keyboard layout?\n. I'm not surprised, unfortunately. There are issues with both Linux keybindings and keymaps, unfortunately. Most of them can be solved with some custom keybindings. See https://github.com/atom/vim-mode/issues/242 for a lot of background.\n. The symbols view screenshot is crazy helpful!! You're not the first person to post with similar issues. A custom keybinding of `.platform-linnux .editor.vim-mode.command-mode` should take care of you.\n\n`:w` is not implemented. You're just seeing the binding for `w`.\n. Thanks for this! This annoying off-by-one has caught up a lot of people.\n\nBut won't this select too much in characterwise visual mode? I think this needs to check for linewise mode.\n\nIn either case, we'll have to have tests. @tony612 wrote some nice, well-done selection tests in #275; I'd ask you to copy that style.\n. I wonder if we still have linewise issues, but this is a huge improvement for something that trips up a lot of people and it's a very clean patch. Nice job, thanks!\n. The \" register is synced with the system clipboard. Just use that one and this already works.\n\nI would merge a pull that makes clipboard syncing with the default register a configuration option, but I wouldn't let it be enabled by default.\n. Sorry, but there's a ton of changes in master now. Can you rebase or merge master and let me know?\n. Sorry for the delay getting back to you on this.\n\nI think the situation on master has changed and I think this needs a little work now :blush:\n\nWhat I'm seeing when I test is that characterwise (lowercase-v) selection is fixed (selects to the first char of the last line), but linewise (capital-V) selection is now the same as characterwise, selecting to the beginning of the last line instead of the end. Can you take a look?\n. Dupe of https://github.com/atom/vim-mode/issues/190. Thanks for reporting this.\n. We are in a good place to cut a release, so we should probably merge this and cut a release the same time that atom makes the react editor the default.\n. /animate me trust fall\n. Vim's search can be used like a motion: `d/abc` to delete until the text 'abc'. There's no way to tie that functionality to the built-in search.\n\nIf you don't ever personally use `/`, a custom keybinding to open the built-in find and replace functionality instead will take care of you. You could similarly bind `n` and `N` to the find-and-replace next/previous functionality.\n. Dupe of #246. Thanks for reporting this.\n. There's a number of issues with soft wrap at the moment; they're unfortunately a caveat in the README right now. Atom core wants to treat soft wraps differently than vim does, and it's just a messy semantic bridge that a lot of motions don't yet account for.\n\nI hope you can work with that and give it a try for now, but if not, thanks for reminding us its an issue.\n. There's actually a built-in function for this that works well enough for markdown, but I miss soft wraps too, to be honest. But what's cool about atom is how easy it is to fix: this snippet will auto-wrap markdown files on save; just put it in your `init.coffee` (just use the menu option for 'Open your init script' to start editing it:)\n\n```\natom.workspaceView.eachEditorView (editorView) =>\n  if editorView.editor.getGrammar().name.match(/markdown/i)\n    editorView.editor.buffer.on 'saved', =>\n      editorView.editor.selectAll()\n      editorView.trigger 'autoflow:reflow-selection'\n      editorView.editor.clearSelections()\n```\n\nIf that helps you, vim-mode is not much harder to work with if you want to start working on soft wrap support :wink:\n. Do you have autocomplete-plus installed?\n. Yes, this is a dupe of #255. Does #290 work for you?\n. Using autocomplete-plus? Dupe of #255 if so.\n. Just pushes a fix for this in 0.11.1\n. Dupe of #255. \n. Just pushed a fix for this in 0.11.1.\n. This is an ex command, which vim mode doesn't support and won't soon. `30G` is a workaround in the meantime (plus, you can do things like `d30G`).\n. This is fixed by #344.\n. vim-mode 0.12 includes the fix.\n. This just isn't implemented yet. I'd be happy to merge a pull with an implementation. An atom setting that mirrors `set ignorecase` might also work well.\n. The test failures seem to be legitimate--why is it okay for them to be broken? Are you saying the broken tests test for broken behavior?\n. > I'm going to see if I can get an over-all fix for this and pull it.\n\n:metal: :metal: :metal:\n. This sounds like an issue we had in older versions disabling and reenabling the plugin. Does it persist after you start atom?\n. Geez, thanks for the link. You'd think people might open an issue on the repo that caused the problem. What a disaster.\n. Just check out the branch in `~/.atom/packages/vim-mode`:\n\n```\ncd ~/.atom/packages\nrm -rf vim-mode\ngit checkout https://github.com/atom/vim-mode\ncd vim-mode\ngit fetch\ngit checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n```\n\nThen just reload atom.\n. Do you have any errors on the console? cmd-shift-i.\n\nOn Tue, Jul 8, 2014 at 11:30 AM, Jordan Prince notifications@github.com\nwrote:\n\n> I did that, and it looks like vim mode, activated, does nothing. I can't\n> escape into non-insert mode or anything. Like a normal app.\n> \n> localhost:vim-mode arkavon$ git branch\n> - fix-undo-in-insert\n> \n> I'm on the right one, and I reloaded atom, and vim mode is not disabled on\n> my settings.\n> \n> On Tue, Jul 8, 2014 at 11:11 AM, Ben Lavender notifications@github.com\n> wrote:\n> \n> > Just check out the branch in ~/.atom/packages/vim-mode:\n> > \n> > cd ~/.atom/packages\n> > rm -rf vim-mode\n> > git checkout https://github.com/atom/vim-mode\n> > cd vim-mode\n> > git fetch\n> > git checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n> > \n> > Then just reload atom.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/atom/vim-mode/pull/344#issuecomment-48361523.\n> \n> ## \n> \n> Jordan Prince\n> \n> CTO - boardvitals.com\n> jordanmprince@gmail.com\n> [image: Facebook]\n> <\n> http://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=>\n> \n> [image: Twitter]\n> <\n> http://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=>\n> \n> [image: LinkedIn]\n> <\n> http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=>\n> \n> [image: WordPress]\n> <\n> http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=>\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48364164.\n. Sorry, alt-cmd-i.\n\nOn Tue, Jul 8, 2014 at 11:34 AM, Ben Lavender blavender@github.com wrote:\n\n> Do you have any errors on the console? cmd-shift-i.\n> \n> On Tue, Jul 8, 2014 at 11:30 AM, Jordan Prince notifications@github.com\n> wrote:\n> \n> > I did that, and it looks like vim mode, activated, does nothing. I can't\n> > escape into non-insert mode or anything. Like a normal app.\n> > \n> > localhost:vim-mode arkavon$ git branch\n> > - fix-undo-in-insert\n> > \n> > I'm on the right one, and I reloaded atom, and vim mode is not disabled\n> > on\n> > my settings.\n> > \n> > On Tue, Jul 8, 2014 at 11:11 AM, Ben Lavender notifications@github.com\n> > wrote:\n> > \n> > > Just check out the branch in ~/.atom/packages/vim-mode:\n> > > \n> > > cd ~/.atom/packages\n> > > rm -rf vim-mode\n> > > git checkout https://github.com/atom/vim-mode\n> > > cd vim-mode\n> > > git fetch\n> > > git checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n> > > \n> > > Then just reload atom.\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/atom/vim-mode/pull/344#issuecomment-48361523.\n> > \n> > ## \n> > \n> > Jordan Prince\n> > \n> > CTO - boardvitals.com\n> > jordanmprince@gmail.com\n> > [image: Facebook]\n> > <\n> > http://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=>\n> > \n> > [image: Twitter]\n> > <\n> > http://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=>\n> > \n> > [image: LinkedIn]\n> > <\n> > http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=>\n> > \n> > [image: WordPress]\n> > <\n> > http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=>\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/atom/vim-mode/pull/344#issuecomment-48364164.\n. Ahh, nuts, of course--run an `npm install` in that directory.\n. 0.12 includes this fix. Thanks guys.\n. Git checkouts wont auto-update. Just remove the directory and re-install vim-mode and you should be good to go.\n. This is intentional behavior; it matches vim. There was a bug with redo but yesterday's release fixed it.\n\nIs there a particular difference from vim that is bothering you?\n. Unfortunately, that's not really possible. We have to manage a ton of our own undo state to get `.` for typing to work correctly.\n\nIs there a vim that does ctrl-z for one character undo in insert mode?\n. @wayou what version of vim-mode are you using?\n. I'm not able to replicate this on the latest release of vim-mode and atom. Can either of you post an exact set of keystrokes to reproduce the issue, starting with `cmd-n` or `ctrl-n` for a new tab?\n. @wayou thanks for the detailed bug report. My setup does not replicate this. Can you please:\n- Post the stack trace from that error you're getting\n- Try this with an English(US) keyboard layout\n. You should be able to do this by broadening the scope of the keybinding selector to something outside of the editor, like `.platform-darwin`.\n. Can you bind it to both? I have to admit I'm not sure why it would not be inherited down to insert mode. cc @nathansobo.\n. Now I understand. I don't actually know how write the selector you want. It's an atom-core thing. Really sorry about that :frowning:\n. Sounds like a potential bug with our column-remembering or end-of-line checking, but I've never run in to this. Are you holding the l or right arrow key down when this happens, or tapping them quickly? Is there some characteristic to 'certain lines' that makes this reproducible?\n. That's exactly what's happening--vim-mode is getting confused by soft wrap. It's in the README as a caveat; soft-wrap needs to be disabled for a lot of features to work correctly.\n\nSorry about that!\n. Nice! Some nitpicks here but this is a very fine pull request.\n\n![yeah dinosaur rainbow vomit](https://cloud.githubusercontent.com/assets/12676/3660627/8848c9b4-11b9-11e4-970d-5cf6dab07e93.gif)\n. Does this happen with vim-mode disabled? Doesn't sound like a problem with the addon.\n. It sounds like you have a custom keybinding such as `ctrl-w q` or `ctrl-w <Anything>`, which is causing atom to wait. That shouldn't be part of vim-mode by default. Do you have any custom keybindings?\n. Do you have soft-wrap enabled?\n\nOn Wed, Jul 23, 2014 at 11:35 AM, harperic notifications@github.com wrote:\n\n> Misclick; it only seems to be happening in the right pane of a split\n> window. Did not mean to close the issue.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/355#issuecomment-49899640.\n. Soft-wrap has known issues, as noted in the README. Really sorry about that. Closing as dupe.\n. What version of vim-mode are you using? I can't replicate this issue.\n. How bizarre. Why doesn't the bug present itself on real code?\n. It should be possible, but will require custom keybindings. You can edit it with Atom -> Open your keymap, and make entries like the ones you find in `vim-mode.cson`.\n. Not being able to bind \u00f8 sounds more like an atom-core issue. cc @nathansobo\n. Don't think this is a problem with vim-mode. @nathansobo can you help me understand why this keybinding isn't getting unset?\n. Cool, glad it's working for you!\n. > I would use Cut not Delete...\n\nThese are the same thing in vim:\n\nhttp://vim.wikia.com/wiki/Copy,_cut_and_paste\n\n> C or X => to delete & add to the clipboard.\n\n`c` (change) is different; it enters insert mode after cutting.\n. > / is in fact a shortcut to :/. From vim's :help ::\n\nPerhaps `/` is an alias to an ex command, but vim doesn't treat it that way. `/foo` composes as a motion. `c/foo` and `yn` demonstrate how it's not just an ex command. `/` is and was correct to treat as vim instead of ex. Compare to `:r !ls`, which vim does not even repeat with `.`. It's a fundamentally different thing than a command-mode action. \n\n> The reasoning for having ex-mode outside of vim-mode is the size of the resulting package, correct?\n\nThis was not the reason I decided to draw a line between vim and ex in https://github.com/atom/vim-mode/issues/50.\n\nBecause vim treats them so differently, commands like `:r !ls` are a fundamentally different from a code perspective, not a memory and footprint perspective. After pressing `:`, a whole new language is parsed and evaluated, one that ignores and is completely separate from the vim motion/command composition stack. I made the initial decision to keep _concerns separated_ and _code clean._ Smaller, focused packages are idiomatic in Atom.\n\nI'm not the maintainer anymore, and perhaps the community is ready to try something else. But that's the historical color.\n. ",
    "ymendel": "It's weird, though, because I think all the failures are inside VimState. They just only happen when I run the full suite.\n. @mcolyer : That should have the linewise stuff and not repeating all the delete logic inside changing. Tell me what you think.\n. So this actually works, but I'm not sure what I'm doing wrong in the tests. I copied them from the normal yank (`y`) section, but mine fail with `TypeError: Cannot read property 'text' of undefined`.\n. @mcolyer : Yeah, that `allowEOL` stuff is much nicer than checking the motion, especially the way I was doing it.\n. The problem was that I had the keybinding in the wrong place and doing the wrong thing (resetting command mode in command mode, instead of entering command mode from insert mode). Everything's okay now.\n. I mentioned this in Chat, but didn't see a response. I'm not sure of the general feeling of history and merge commits in this project. Since this can't be automatically merged, is it okay for me to merge in master and fix the conflicts?\n. :cool: Thanks!\n. @mcolyer: Looks good. I like how this stuff is coming together.\n. I was thinking of this. Nice one.\n. I'm having some failing tests, for `cw` and `cb` (don't think that's me) and escape entering command mode from insert mode (possibly me).\n. @mcolyer : Yeah, that was discussion in chat that meant we may need a third way of thinking about lines. Yay?\n. @nathansobo : In vim, a folded section is treated as one line, and a wrapped line is also treated as one line.\n\nWith the buffer lines, a folded section is treated as many lines, and a wrapped line is treated as one line.\n\nWith the screen lines, a folded section is treated as one line, but a wrapped line is treated as many lines, right?\n. @nathansobo : Not really sure how to answer that. I'm just really used to thinking of \"lines\" in this way. The editor in general doesn't have much in the way of line-based operations, does it? (like \"delete the line the cursor is on right now\")\n. It could be that operations work on buffer lines until a fold is reached, in which case it switches to screen lines (or selects the entire fold), but in general that seems more troublesome than finding the right abstraction.\n\nIt can wait until we find the right thing.\n\nI'll probably continue to poke at this just to get a better hang of using screen lines, how that works, how to test it, &c.\n. I'm more than happy to wait on it. The thing about the behavior is that my\nown personal use of folds and wrapped lines intersects not at all (or at\nleast hardly ever). Folds are for code, and wrapped lines are for text.\n\nI'm hoping after @mcolyer's refactor (cf.\nhttps://github.com/atom/vim-mode/pull/27) to be able to switch the linewise\nmotions to use screen lines instead of buffer lines because getting the\nfold behavior is important to me. And my vision for how this will work out\nis\n1. Atom ships\n2. either someone will notice that dd on a wrapped line doesn't do what\n   they want or we'll remember about this\n3. the \"logical line\" stuff will get landed in core\n4. atom/vim-mode will get one more test (or one more test per linewise\n   operation)\n5. somewhere in the code a `buffer = @editor.getDisplayBuffer()` will\n   turn into `buffer = @editor.getLogicalBuffer()`.\n\nLet dreams soar.\n\nOn Thu, Aug 15, 2013 at 10:39 AM, Nathan Sobo notifications@github.comwrote:\n\n> @mcolyer https://github.com/mcolyer This statement is concerning to me:\n> \n> I think there's some abstraction here that needs to happen. I'm sure we\n> could make something work but I feel like it would only work for a short\n> while before it totally fell apart. Maybe let this marinate for a bit?\n> \n> So I'm down to wait but I think it would be a shame to introduce a bunch\n> of complexity into the vim-mode package because we want to avoid complexity\n> in core. I'd rather just not address it at all, then put the abstraction in\n> the correct location when we feel it's needed, rather than creating this\n> kind of debt in vim-mode.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/pull/24#issuecomment-22716484\n> .\n\n## \n\n-yossef\n. I'm in the middle of the discussion hacking, so I don't really have time for anything else. If you want to go ahead and take it over, I'd be super happy.\n. God, I am so excited for `.` you have no idea.\n. > `d2dp` pastes the lines a line up from where they should be. In vim, this operation will end up pasting the lines a line down from where they once were, and in atom currently they end up exactly where they came from.\n\nI'm seeing the same output lines in atom and vim, but the cursor ends up in different places.\n. I noticed you can put your cursor on the invisible newline character at the end of the line and then `d$` will delete that character and bring the next line up, almost acting like `J` except not compressing whitespace.\n\nThere's no vim equivalent of this because you can't put your cursor at that position in command mode.\n. Something _really_ fun involving being on the newline character, deleting to end of line, and undoing, possibly only with wrapped text:\n\n![wrap deldollar undo](https://f.cloud.github.com/assets/597/983036/364fd7bc-083a-11e3-9598-22c67d862cfe.gif)\n\nThe keystrokes I'm using are `d$`, `u`, and `cmd-r`.\n. That GIF may be an instance of https://github.com/github/atom/issues/688.\n. :heart:\n. :heart:\n. Excellent. I was thinking of getting around to this myself, but this is even better. I didn't have to remember how testing Atom stuff works or anything.\n. It's weird, though, because I think all the failures are inside VimState. They just only happen when I run the full suite.\n. @mcolyer : That should have the linewise stuff and not repeating all the delete logic inside changing. Tell me what you think.\n. So this actually works, but I'm not sure what I'm doing wrong in the tests. I copied them from the normal yank (`y`) section, but mine fail with `TypeError: Cannot read property 'text' of undefined`.\n. @mcolyer : Yeah, that `allowEOL` stuff is much nicer than checking the motion, especially the way I was doing it.\n. The problem was that I had the keybinding in the wrong place and doing the wrong thing (resetting command mode in command mode, instead of entering command mode from insert mode). Everything's okay now.\n. I mentioned this in Chat, but didn't see a response. I'm not sure of the general feeling of history and merge commits in this project. Since this can't be automatically merged, is it okay for me to merge in master and fix the conflicts?\n. :cool: Thanks!\n. @mcolyer: Looks good. I like how this stuff is coming together.\n. I was thinking of this. Nice one.\n. I'm having some failing tests, for `cw` and `cb` (don't think that's me) and escape entering command mode from insert mode (possibly me).\n. @mcolyer : Yeah, that was discussion in chat that meant we may need a third way of thinking about lines. Yay?\n. @nathansobo : In vim, a folded section is treated as one line, and a wrapped line is also treated as one line.\n\nWith the buffer lines, a folded section is treated as many lines, and a wrapped line is treated as one line.\n\nWith the screen lines, a folded section is treated as one line, but a wrapped line is treated as many lines, right?\n. @nathansobo : Not really sure how to answer that. I'm just really used to thinking of \"lines\" in this way. The editor in general doesn't have much in the way of line-based operations, does it? (like \"delete the line the cursor is on right now\")\n. It could be that operations work on buffer lines until a fold is reached, in which case it switches to screen lines (or selects the entire fold), but in general that seems more troublesome than finding the right abstraction.\n\nIt can wait until we find the right thing.\n\nI'll probably continue to poke at this just to get a better hang of using screen lines, how that works, how to test it, &c.\n. I'm more than happy to wait on it. The thing about the behavior is that my\nown personal use of folds and wrapped lines intersects not at all (or at\nleast hardly ever). Folds are for code, and wrapped lines are for text.\n\nI'm hoping after @mcolyer's refactor (cf.\nhttps://github.com/atom/vim-mode/pull/27) to be able to switch the linewise\nmotions to use screen lines instead of buffer lines because getting the\nfold behavior is important to me. And my vision for how this will work out\nis\n1. Atom ships\n2. either someone will notice that dd on a wrapped line doesn't do what\n   they want or we'll remember about this\n3. the \"logical line\" stuff will get landed in core\n4. atom/vim-mode will get one more test (or one more test per linewise\n   operation)\n5. somewhere in the code a `buffer = @editor.getDisplayBuffer()` will\n   turn into `buffer = @editor.getLogicalBuffer()`.\n\nLet dreams soar.\n\nOn Thu, Aug 15, 2013 at 10:39 AM, Nathan Sobo notifications@github.comwrote:\n\n> @mcolyer https://github.com/mcolyer This statement is concerning to me:\n> \n> I think there's some abstraction here that needs to happen. I'm sure we\n> could make something work but I feel like it would only work for a short\n> while before it totally fell apart. Maybe let this marinate for a bit?\n> \n> So I'm down to wait but I think it would be a shame to introduce a bunch\n> of complexity into the vim-mode package because we want to avoid complexity\n> in core. I'd rather just not address it at all, then put the abstraction in\n> the correct location when we feel it's needed, rather than creating this\n> kind of debt in vim-mode.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/pull/24#issuecomment-22716484\n> .\n\n## \n\n-yossef\n. I'm in the middle of the discussion hacking, so I don't really have time for anything else. If you want to go ahead and take it over, I'd be super happy.\n. God, I am so excited for `.` you have no idea.\n. > `d2dp` pastes the lines a line up from where they should be. In vim, this operation will end up pasting the lines a line down from where they once were, and in atom currently they end up exactly where they came from.\n\nI'm seeing the same output lines in atom and vim, but the cursor ends up in different places.\n. I noticed you can put your cursor on the invisible newline character at the end of the line and then `d$` will delete that character and bring the next line up, almost acting like `J` except not compressing whitespace.\n\nThere's no vim equivalent of this because you can't put your cursor at that position in command mode.\n. Something _really_ fun involving being on the newline character, deleting to end of line, and undoing, possibly only with wrapped text:\n\n![wrap deldollar undo](https://f.cloud.github.com/assets/597/983036/364fd7bc-083a-11e3-9598-22c67d862cfe.gif)\n\nThe keystrokes I'm using are `d$`, `u`, and `cmd-r`.\n. That GIF may be an instance of https://github.com/github/atom/issues/688.\n. :heart:\n. :heart:\n. Excellent. I was thinking of getting around to this myself, but this is even better. I didn't have to remember how testing Atom stuff works or anything.\n. ",
    "wylieconlon": "On vim-mode 0.7.0, this appears to be fixed. When I delete and then put, it puts the text I just deleted (as expected). This issue may no longer be relevant.\n. You're right, I couldn't yank across tabs at all. I may have been confused in my testing. Thank you for clarifying.\n. On vim-mode 0.7.0, this appears to be fixed. When I delete and then put, it puts the text I just deleted (as expected). This issue may no longer be relevant.\n. You're right, I couldn't yank across tabs at all. I may have been confused in my testing. Thank you for clarifying.\n. ",
    "chadkouse": "+1\n. :+1: \n. @mcolyer pr #84 may fix the issue you are seeing..\n. Thanks, I appreciate #81 as well :)\n. @mcolyer took me a few min to figure out where and what to do.. but this should do it.. passes too.. :guitar: !\n. this may be a silly question, but specs are run with the default keybindings ?\n. @mcolyer yeah that's what I meant - makes sense.. \n. :whale: whoops my bad :)\n. +1\n. :+1: \n. @mcolyer pr #84 may fix the issue you are seeing..\n. Thanks, I appreciate #81 as well :)\n. @mcolyer took me a few min to figure out where and what to do.. but this should do it.. passes too.. :guitar: !\n. this may be a silly question, but specs are run with the default keybindings ?\n. @mcolyer yeah that's what I meant - makes sense.. \n. :whale: whoops my bad :)\n. ",
    "lodestone": "Hoping to see this get implemented. \n. Strange but true...\n. +1\n. I see. Well, :ok_hand: then. \n\n:thumbsdown: to a formal poll.\n:thumbsup: to doing it the github way.\n\n:octocat: is happy.\n. Nice catch. I noticed the absence of the cursor but didn't figure out why.\n. +1\n. Hoping to see this get implemented. \n. Strange but true...\n. +1\n. I see. Well, :ok_hand: then. \n\n:thumbsdown: to a formal poll.\n:thumbsup: to doing it the github way.\n\n:octocat: is happy.\n. Nice catch. I noticed the absence of the cursor but didn't figure out why.\n. +1\n. ",
    "jakebellacera": ":+1: \n. Typically people just reply to the suggestion/issue with \"+1\" or \":+1:\". If I'm looking for heavily active issues, I'll just sort them by \"most commented.\"\n\n![screen shot 2014-02-27 at 11 12 16 am](https://f.cloud.github.com/assets/391085/2286556/1c63ad38-9fe3-11e3-873e-92e58059592b.png)\n. This might be better suited as a global feature, no?\n. :+1: \n. Typically people just reply to the suggestion/issue with \"+1\" or \":+1:\". If I'm looking for heavily active issues, I'll just sort them by \"most commented.\"\n\n![screen shot 2014-02-27 at 11 12 16 am](https://f.cloud.github.com/assets/391085/2286556/1c63ad38-9fe3-11e3-873e-92e58059592b.png)\n. This might be better suited as a global feature, no?\n. ",
    "fuelingtheweb": "+1\n. I'm already able to move up and down through wrapped lines with j and k. Is that not working for you on the latest version?\n. You need to disable that feature in OS X.\n\nhttp://osxdaily.com/2011/08/04/enable-key-repeat-mac-os-x-lion/\n. +1\n. I'm already able to move up and down through wrapped lines with j and k. Is that not working for you on the latest version?\n. You need to disable that feature in OS X.\n\nhttp://osxdaily.com/2011/08/04/enable-key-repeat-mac-os-x-lion/\n. ",
    "dougblack": "@bhuga @mcolyer `f` and `t` are actually similar commands. They both follow the pattern of \n\n`start-command` -> `wait-for-one-character` -> `take-action`\n\nImplementing a generic mode that handles the above actions is probably the best way to support all of these commands together.\n. +1 this is a must-have.\n. @blinks I believe the plan is that `:` will open up a vim-style command window at the bottom. I don't know if the package exists yet.\n. @zenhob \n![friends](http://weknowmemes.com/wp-content/uploads/2011/12/did-we-just-become-best-friends-yep.gif)\n\nThe code really was spookily similar.\n. Update: I saw in IRC that the 2-line scrolloff value might be a chromium thing? Would be awesome if we could change/remove that at will.\n. @mcolyer awesome. I'll be interested to know what you hear back.\n. I am adding support for commands like `10H` right now.\n. @mcolyer Just added support for commands like `[count]H` which takes the cursor to the row `[count]` from the top, bringing the behavior of `H`, `L`, and `M` in atom to exactly match that of Vim.\n. @mcolyer rebased.\n. @mcolyer Thanks for the great feedback. This pull has been updated.\n. @mcolyer added specs.\n. @mcolyer Updated based on screen-coordinates.\n\nEven with spy, I'm still unsure how to test. These commands depend on the number of lines currently displayed on screen--a value I'm not sure how to set.\n\nI see there's an `editorView` object already set up in a few of the specs, but from searching through the API docs I'm not sure how to set the screen height on that `editorView`.\n\nAny ideas?\n. @mcolyer added specs.\n. @mcolyer rebased.\n. @mcolyer updated.\n. @mcolyer added specs.\n. @tony612 There are at least two--sometimes as high as four--keybindings for each windowing command. I held off on adding all of them for simplicity. We could add them in the future, but in the short term I think you're best off adding them yourself to your keymap.cson file. (`cmd-shift-p` then select \"Application: Open Your Keymap\")\n. I agree with @zenhob. vim-mode shouldn't try to replicate functionality supplied by vim plugins--only core vim. Part of what makes atom awesome is the ability to easily add your own bindings for existing commands. If you navigate to the Keybindings section of your Settings pane, you can search for \"tree-view\" to get a list of all mappable commands. You can then map those commands to whatever you see fit--in this case the bindings you're used to from NERDTree.\n. I miss it as well. I think we're looking at using the interface introduced by @bhuga in #138. Once that gets merged we can knock out things like `t` and `f`.\n. Awesome. This looks solid @tony612. Merging.\n. @bhuga I found a few edge cases this doesn't quite nail yet.\n1. In Vim if the cursor is on an empty line, `r` does nothing.\n2. In Vim if you give `r` a motion that would send it past the current line length, nothing happens.\n\nI'm unsure how difficult it will be to fix them, but thought I'd point them out so we know how much our `r` is going to match Vim's.\n. +1. Great guidelines. Thanks for putting this together.\n. Looks good.\n. Hey @tombell! We're actually working on this over at #46. Going to close this as duplicate.\n. Like @mcolyer, I added those keybindings to my `keymaps.cson` and everything worked fine. Let's see if we can debug.\n\nYou can add more than one binding to a section. So instead of\n\n```\n'.vim-mode.command-mode:not(.mini)':\n  'ctrl-a -': 'pane:split-down'\n# create vertical split\n'.vim-mode.command-mode:not(.mini)':\n  'ctrl-a |': 'pane:split-right'\n```\n\nyou can do\n\n```\n'.vim-mode.command-mode:not(.mini)':\n  'ctrl-a -': 'pane:split-down'\n  'ctrl-a |': 'pane:split-right'\n```\n\nAlso, I noticed you're using four spaces for indentation. Using four spaces in my `keymap.cson` resulted in my bindings being ignored. Try two spaces. Also, the first comment in your example looks like it has an errant space at the beginning.\n\nLet us know if making any of these changes fixes it for you.\n. Looks good. Went ahead and verified we do indeed support all of those commands.\n\nThanks @tednaleid! Merging.\n. Labeled as duplicate of #89.\n. The difference between `gg` and `jj` is the mode they're used in. We use `gg` in normal mode but `jj` from insert mode. We're working on fixing multi-key bindings to add a timeout.\n. We're already tracking this over at #129 so I'm going to go ahead and close this as duplicate. Thanks for the report!\n. Hey @raylillywhite I'm having trouble reproducing.\n\nThe cursor shouldn't blink during normal mode--only in insert mode. When I open two panes, enter insert mode in one of them, then switch focus to the other pane, the cursor doesn't blink.\n\nLikewise, when I open an editor in Atom and enter insert mode then focus a different application, the cursor still doesn't blink.\n\nDo you see different results when you do the same things? Are you on the latest version of atom and vim-mode?\n. @bhuga @mcolyer `f` and `t` are actually similar commands. They both follow the pattern of \n\n`start-command` -> `wait-for-one-character` -> `take-action`\n\nImplementing a generic mode that handles the above actions is probably the best way to support all of these commands together.\n. +1 this is a must-have.\n. @blinks I believe the plan is that `:` will open up a vim-style command window at the bottom. I don't know if the package exists yet.\n. @zenhob \n![friends](http://weknowmemes.com/wp-content/uploads/2011/12/did-we-just-become-best-friends-yep.gif)\n\nThe code really was spookily similar.\n. Update: I saw in IRC that the 2-line scrolloff value might be a chromium thing? Would be awesome if we could change/remove that at will.\n. @mcolyer awesome. I'll be interested to know what you hear back.\n. I am adding support for commands like `10H` right now.\n. @mcolyer Just added support for commands like `[count]H` which takes the cursor to the row `[count]` from the top, bringing the behavior of `H`, `L`, and `M` in atom to exactly match that of Vim.\n. @mcolyer rebased.\n. @mcolyer Thanks for the great feedback. This pull has been updated.\n. @mcolyer added specs.\n. @mcolyer Updated based on screen-coordinates.\n\nEven with spy, I'm still unsure how to test. These commands depend on the number of lines currently displayed on screen--a value I'm not sure how to set.\n\nI see there's an `editorView` object already set up in a few of the specs, but from searching through the API docs I'm not sure how to set the screen height on that `editorView`.\n\nAny ideas?\n. @mcolyer added specs.\n. @mcolyer rebased.\n. @mcolyer updated.\n. @mcolyer added specs.\n. @tony612 There are at least two--sometimes as high as four--keybindings for each windowing command. I held off on adding all of them for simplicity. We could add them in the future, but in the short term I think you're best off adding them yourself to your keymap.cson file. (`cmd-shift-p` then select \"Application: Open Your Keymap\")\n. I agree with @zenhob. vim-mode shouldn't try to replicate functionality supplied by vim plugins--only core vim. Part of what makes atom awesome is the ability to easily add your own bindings for existing commands. If you navigate to the Keybindings section of your Settings pane, you can search for \"tree-view\" to get a list of all mappable commands. You can then map those commands to whatever you see fit--in this case the bindings you're used to from NERDTree.\n. I miss it as well. I think we're looking at using the interface introduced by @bhuga in #138. Once that gets merged we can knock out things like `t` and `f`.\n. Awesome. This looks solid @tony612. Merging.\n. @bhuga I found a few edge cases this doesn't quite nail yet.\n1. In Vim if the cursor is on an empty line, `r` does nothing.\n2. In Vim if you give `r` a motion that would send it past the current line length, nothing happens.\n\nI'm unsure how difficult it will be to fix them, but thought I'd point them out so we know how much our `r` is going to match Vim's.\n. +1. Great guidelines. Thanks for putting this together.\n. Looks good.\n. Hey @tombell! We're actually working on this over at #46. Going to close this as duplicate.\n. Like @mcolyer, I added those keybindings to my `keymaps.cson` and everything worked fine. Let's see if we can debug.\n\nYou can add more than one binding to a section. So instead of\n\n```\n'.vim-mode.command-mode:not(.mini)':\n  'ctrl-a -': 'pane:split-down'\n# create vertical split\n'.vim-mode.command-mode:not(.mini)':\n  'ctrl-a |': 'pane:split-right'\n```\n\nyou can do\n\n```\n'.vim-mode.command-mode:not(.mini)':\n  'ctrl-a -': 'pane:split-down'\n  'ctrl-a |': 'pane:split-right'\n```\n\nAlso, I noticed you're using four spaces for indentation. Using four spaces in my `keymap.cson` resulted in my bindings being ignored. Try two spaces. Also, the first comment in your example looks like it has an errant space at the beginning.\n\nLet us know if making any of these changes fixes it for you.\n. Looks good. Went ahead and verified we do indeed support all of those commands.\n\nThanks @tednaleid! Merging.\n. Labeled as duplicate of #89.\n. The difference between `gg` and `jj` is the mode they're used in. We use `gg` in normal mode but `jj` from insert mode. We're working on fixing multi-key bindings to add a timeout.\n. We're already tracking this over at #129 so I'm going to go ahead and close this as duplicate. Thanks for the report!\n. Hey @raylillywhite I'm having trouble reproducing.\n\nThe cursor shouldn't blink during normal mode--only in insert mode. When I open two panes, enter insert mode in one of them, then switch focus to the other pane, the cursor doesn't blink.\n\nLikewise, when I open an editor in Atom and enter insert mode then focus a different application, the cursor still doesn't blink.\n\nDo you see different results when you do the same things? Are you on the latest version of atom and vim-mode?\n. ",
    "ksolo": "Is there a way to leverage some of JS functional nature here, specifically currying?\n\nThinking if the prefix is a number it partially applies the times to do something, then the command comes in and for commands that do not need additional information they execute (ex. 5j would execute because the j command would not need additional data to execute), but if it needs more data (like `f`) then it returns another function that takes the final keystroke and then executes.\n\nSadly I think this would change a lot and this approach maybe horrible, but thought I'd throw it out there.\n. Thanks for the thoughts here!\n\nI'm going to close this out and join the discussion on Issue #22  \n. Is there a way to leverage some of JS functional nature here, specifically currying?\n\nThinking if the prefix is a number it partially applies the times to do something, then the command comes in and for commands that do not need additional information they execute (ex. 5j would execute because the j command would not need additional data to execute), but if it needs more data (like `f`) then it returns another function that takes the final keystroke and then executes.\n\nSadly I think this would change a lot and this approach maybe horrible, but thought I'd throw it out there.\n. Thanks for the thoughts here!\n\nI'm going to close this out and join the discussion on Issue #22  \n. ",
    "Gaelan": "I don't know if this is related to this issue, but `r<enter>` doesn't work.\n. I don't know if this is related to this issue, but `r<enter>` doesn't work.\n. ",
    "docwhat": "It may be worth reading `:help inclusive` and `:help e` -- vim/vi has some interesting ideas about how the cursor position works.\n. It may be worth reading `:help inclusive` and `:help e` -- vim/vi has some interesting ideas about how the cursor position works.\n. ",
    "wallace": "As a new beta user, I'm not intimately familiar with the implementation context here. But, I'm guessing the fact that I'm unable to edit certain lines when using soft wrap with the vim-mode plugin is an artifact of this issue?\n\n![2014-02-27-url-rewriting-for-sub-uris-in-rails_markdown_-__users_jonathanwallace_documents_projects_wallace_github_com_source__posts-4](https://f.cloud.github.com/assets/11443/2303000/362ad5ea-a199-11e3-8513-655977758b27.png)\n. As a new beta user, I'm not intimately familiar with the implementation context here. But, I'm guessing the fact that I'm unable to edit certain lines when using soft wrap with the vim-mode plugin is an artifact of this issue?\n\n![2014-02-27-url-rewriting-for-sub-uris-in-rails_markdown_-__users_jonathanwallace_documents_projects_wallace_github_com_source__posts-4](https://f.cloud.github.com/assets/11443/2303000/362ad5ea-a199-11e3-8513-655977758b27.png)\n. ",
    "FunnyDewd": "I seem to be having the same issue @wallace mentioned previously regardless of whether soft-wrap is on or not.\n. I seem to be having the same issue @wallace mentioned previously regardless of whether soft-wrap is on or not.\n. ",
    "chancez": "In a PR for another issue there's an issue related to this problem. \n\nhttps://github.com/atom/vim-mode/pull/46#issuecomment-36256809\n. Ive got this same issue without softwrap, and with a single pane. It works, but only up until a single point on a line. The place at which it stops working is always a different location, but it stays the same for a given line.\n. I think this is a slightly different bug. This one seems to be related to soft wrap, the one I created it related to tabs.\n. In a PR for another issue there's an issue related to this problem. \n\nhttps://github.com/atom/vim-mode/pull/46#issuecomment-36256809\n. Ive got this same issue without softwrap, and with a single pane. It works, but only up until a single point on a line. The place at which it stops working is always a different location, but it stays the same for a given line.\n. I think this is a slightly different bug. This one seems to be related to soft wrap, the one I created it related to tabs.\n. ",
    "thedufer": "This hasn't been touched in awhile.  Any updates on the status bar in core?  I could really use search, and the same status bar would probably be necessary for making my :w muscle memory useful.\n. This is what I was seeing in those versions.  You need to `apm install vim-mode@0.7.0`\n\nWhy is 0.6.0 still default if it doesn't run on current Atom?\n. Too slow.  Closing as duplicate of #69 \n. Okay.  I wasn't familiar with space-pen and only looked on EditorView, View, and $ for methods.  That explains everything.  Thanks for the help!\n. This hasn't been touched in awhile.  Any updates on the status bar in core?  I could really use search, and the same status bar would probably be necessary for making my :w muscle memory useful.\n. This is what I was seeing in those versions.  You need to `apm install vim-mode@0.7.0`\n\nWhy is 0.6.0 still default if it doesn't run on current Atom?\n. Too slow.  Closing as duplicate of #69 \n. Okay.  I wasn't familiar with space-pen and only looked on EditorView, View, and $ for methods.  That explains everything.  Thanks for the help!\n. ",
    "zenhob": "I am definitely interested.\n. I dug into this a bit and there are definitely some odd issues with `yy` on single line buffers and `Y` in general. I have some failing tests for the former, the latter is still a bit confounding. `Y` _seems_ like it's leading into a motion key (that can't be right, can it?), whereas in Vim it's a standalone command.\n\nEDIT: it looks like the culprit is that line-mode yank `Y` is using the same implementation as character-mode yank `y`, but only the latter accepts motion commands.\n. @danzimm Haven't gotten to it, no. Feel free to jump in.\n. @mcolyer I agree that vim-mode should attempt to be as light a layer over Atom as practical, but I assume that respecting existing muscle memory is a log-term goal of vim-mode, correct? I can't tell if you're hesitant about the workaround, or the idea of completely supporting traditional ex commands along with the command palette.\n\nPersonally I'd prefer the keep the workarounds out of master (although I will probably be using some locally) and also support ex commands with `:` in the long term.\n. I think the rest of Atom itself already covers the \"Atom features\" side of things pretty well, while vim-mode is supposed to act like Vim. I do have to disagree that the only relevant Vim features worth porting are movement and editing commands. ex commands are an incredibly powerful Vim feature with a lot of collective memory behind them. It's not just so we can `:w`. Frankly I already use cmd-s  because I've been on macvim for years, but I'm not the only user here.\n\nvim-mode is by far the single most popular plugin for Atom so far. There are clearly a large number of potential users, probably very few of whom use the same subset of Vim commands. In the README this is acknowledged, with the hope that enough users can fill in their preferred Vim functionality as needed. However, just 2 days after release, the tune appears to be shifting to allowing users to add their preferred Vim functionality as long as it isn't something Atom already does? I am impressed by Atom's functionality, but that seems like an unnecessarily narrow interpretation.\n\nVim has a vast command set, and it's discouraging to see push back on implementing a core part of it just 2 days after the announcement.\n. I love the idea of an ex plugin, great thinking. \n\n> On Feb 28, 2014, at 13:36, Ben Lavender notifications@github.com wrote:\n> \n> What about a second plugin, ex? It would be easy to make entering it be as simple as : in command mode. That could be as full-featured as one likes while letting vim-mode remain pretty simple; vim mode wouldn't even be required.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. oops I just pushed #79, oh well\n. I ran into the same problem @fholgado, it would be good to know if there are specific upstream changes in the works to address this, or what. Any updates, @mcolyer?\n. I think #71 addresses this properly.\n. I have this in my personal keymap, it's not perfect but it matches a pretty good set of vim default bindings. It also behaves in the pretty much the same way as Vim except that it doesn't respect command count. One important binding that I use a lot but couldn't find a reasonable substitute for is `ctrl-w o` to close other panes. Apart from that this has served me well:\n\n```\n# work around missing window pane bindings in vim-mode\n'.vim-mode.command-mode:not(.mini)':\n  'ctrl-w h': 'window:focus-pane-on-left'\n  'ctrl-w left': 'window:focus-pane-on-left'\n  'ctrl-w j': 'window:focus-pane-below'\n  'ctrl-w down': 'window:focus-pane-below'\n  'ctrl-w k': 'window:focus-pane-above'\n  'ctrl-w up': 'window:focus-pane-above'\n  'ctrl-w l': 'window:focus-pane-on-right'\n  'ctrl-w right': 'window:focus-pane-on-right'\n  'ctrl-w ctrl-w': 'window:focus-next-pane'\n  'ctrl-w w': 'window:focus-next-pane'\n  'ctrl-w ctrl-p': 'window:focus-previous-pane'\n  'ctrl-w p': 'window:focus-previous-pane'\n  'ctrl-w ctrl-c': 'pane:close'\n  'ctrl-w c': 'pane:close'\n  'ctrl-w q': 'core:close'\n```\n\nAny objection to putting something like this in the vim-mode keymap?\n. I see there is already some overlap with #104, I am just going to whip up a patch with the missing bindings.\n. between #104 and #162 I think we've covered the suggested bindings and them some.\n\nEDIT: oh he mentioned resizing nvm.\n\nEDIT AGAIN: actually, now might be a good time to close this and open a new ticket for pane resizing\n. @astericky `cmd-k right` is a default Atom binding, it's not vim-mode specific. This issue is about vim-mode aliases to Atom pane commands. In any case, it doesn't look like vim-mode breaks the default binding. You might want to check Atom discussions http://discuss.atom.io for advice.\n. Oh, I also hooked up paragraph movement in visual mode.\n. I've rebased and added a note to `docs/motions.md`, thanks!\n. Almost identical pullreqs submitted less than an hour apart. Are we best friends now...?\n. :+1: works for me\n. This might be superseded by #77, not sure that one is farther along or not.\n. They're almost exactly the same, I guess #77 wins \\o/\n. At some point this got fixed, closing.\n. I am still getting failing tests because of this. I am using 0.6.1 and there is no option to upgrade. Is there anything I can do?\n. Okay, it turns out auto-updating from within the editor isn't working for me. Downloading the latest version from the web site fixed it.\n. My favorite part of working on this is learning about all the Vim commands I didn't know.\n. Oh also, `#` does the same thing only backwards.\n. As a workaround, I've mapped `*` to `find-and-replace:select-next` which isn't perfect but mostly does what I mean for now. From my personal keymap:\n\n```\n'.vim-mode.command-mode:not(.mini)':\n  '*': 'find-and-replace:select-next'\n```\n. Here is a mediocre workaround from my personal keymap, it works closest to default Vim if you enable completion from other buffers in the autocomplete plugin options:\n\n``` cson\n# work around missing vim completion\n'.vim-mode:not(.mini):not(.command-mode):not(visual-mode)':\n  'ctrl-n': 'autocomplete:attach'\n```\n. I just rebased this on the latest master and the only test failures in your branch are also failing on master. In my case the problem is an API mismatch between Atom 0.6.1 and 0.6.2, which version of Atom do you have installed?\n. @ciarand Once I update Atom (I had to redownload, it was not auto-updating) this passes for me. If you can please rebase it to the latest master, this can be merged.\n. So, this patch does avoid some specific problematic behavior of `D` but it still joins lines if you're on a blank line. Is there a chance this can be fixed as well? I feel like there are legit fixes here but the spec name is misleading.\n. I think this might be related to #2, it's called out with a FIXME in the spec for `$` movement.\n. @jroes The reason that Vim isn't maddening to use all the time is that Vim doesn't wait for a second key unless there is a multi-key binding that starts with the first one. That's why I can't understand why anyone would bind `j j`, lol.\n\n:+1: from me for the timeout. Too many important key bindings won't work without it. Let's just be mindful that we don't pause on every keystroke, just the ones with multi-key bindings.\n. > Is there a default vim keybinding that does this?\n\nThe defaults avoid bindings that insert delays. Also worth noting, and possibly related, you can use Vim with the `notimeout` option to disable this behavior.\n. There is currently no support for ex commands, and based on #50 it's looking like that functionality will go into another plugin.\n. Oh for what it's worth btw, `10G` or `10gg` both do more or less the same thing and work in vim-mode.\n. It looks like everyone's happy with this answer, I'm gonna close in favor of #50.\n. Just my $.02, I think that Vim plugin functionality and non-standard bindings should go into personal configuration or other plugins. I have a number of non-standard keymaps that I am used to from my personal Vim config so I sympathize, but even in the case of NERDTree I probably didn't use the same bindings you did. I think personal configuration is the answer here, just as it would be in Vim itself.\n. @eob Why not just bind your preferred key in your personal keymap to open the project tree?\n. Agreed! Closing as a dupe of #91, please suggest it there.\n. Clear and helpful, thanks for writing this.\n. @tony612 It looks like the motion of the default matching plugin isn't quite the same as `%` anyway, which makes me more inclined to leave this in personal config. However in general, I think it's okay to add vim-mode default bindings that utilize the default Atom packages, provided the behavior matches Vim's.\n. Looks like an oversight, good catch!\n. :shipit: tests pass, works for me interactively\n\nDon't wanna merge in case something else is up, so I'm pinging @bhuga instead. :)\n. :+1:  works for me and the tests pass\n. @tony612 Can you please add a doc entry for `E` to `motions.md`?\n. I'm not sure I am using screen vs buffer positions correctly here, if someone with a better grasp of the issue could take a look I'd appreciate it.\n. Okay, I'm using buffer positioning throughout, I think.\n. This looks like a dupe of #99, mind chiming in there? Thanks.\n. Dug into Vim help and found some more low-hanging fruit. Also renamed the docs to more closely match the Vim counterpart. I think this is ready to go.\n. Haha I can't even figure out how `yy` is implemented to fix this, help!\n. :+1: works for me\n. Good catch. Note for potential implementors: `_` is not only an effective alternative to `^`, but also does downward movement if you provide a count.\n. Kinda related to #135\n. Maybe I was mistaken, I can't reproduce this any more and the tests look correct. Closing for now, sorry.\n. Hah! Good catch. Mind if I close in favor of #171?\n. Possibly related Atom discussion thread: http://discuss.atom.io/t/soft-wrap-doesnt-work-on-wide-characters-e-g-chinese/5368\n. I am definitely interested.\n. I dug into this a bit and there are definitely some odd issues with `yy` on single line buffers and `Y` in general. I have some failing tests for the former, the latter is still a bit confounding. `Y` _seems_ like it's leading into a motion key (that can't be right, can it?), whereas in Vim it's a standalone command.\n\nEDIT: it looks like the culprit is that line-mode yank `Y` is using the same implementation as character-mode yank `y`, but only the latter accepts motion commands.\n. @danzimm Haven't gotten to it, no. Feel free to jump in.\n. @mcolyer I agree that vim-mode should attempt to be as light a layer over Atom as practical, but I assume that respecting existing muscle memory is a log-term goal of vim-mode, correct? I can't tell if you're hesitant about the workaround, or the idea of completely supporting traditional ex commands along with the command palette.\n\nPersonally I'd prefer the keep the workarounds out of master (although I will probably be using some locally) and also support ex commands with `:` in the long term.\n. I think the rest of Atom itself already covers the \"Atom features\" side of things pretty well, while vim-mode is supposed to act like Vim. I do have to disagree that the only relevant Vim features worth porting are movement and editing commands. ex commands are an incredibly powerful Vim feature with a lot of collective memory behind them. It's not just so we can `:w`. Frankly I already use cmd-s  because I've been on macvim for years, but I'm not the only user here.\n\nvim-mode is by far the single most popular plugin for Atom so far. There are clearly a large number of potential users, probably very few of whom use the same subset of Vim commands. In the README this is acknowledged, with the hope that enough users can fill in their preferred Vim functionality as needed. However, just 2 days after release, the tune appears to be shifting to allowing users to add their preferred Vim functionality as long as it isn't something Atom already does? I am impressed by Atom's functionality, but that seems like an unnecessarily narrow interpretation.\n\nVim has a vast command set, and it's discouraging to see push back on implementing a core part of it just 2 days after the announcement.\n. I love the idea of an ex plugin, great thinking. \n\n> On Feb 28, 2014, at 13:36, Ben Lavender notifications@github.com wrote:\n> \n> What about a second plugin, ex? It would be easy to make entering it be as simple as : in command mode. That could be as full-featured as one likes while letting vim-mode remain pretty simple; vim mode wouldn't even be required.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. oops I just pushed #79, oh well\n. I ran into the same problem @fholgado, it would be good to know if there are specific upstream changes in the works to address this, or what. Any updates, @mcolyer?\n. I think #71 addresses this properly.\n. I have this in my personal keymap, it's not perfect but it matches a pretty good set of vim default bindings. It also behaves in the pretty much the same way as Vim except that it doesn't respect command count. One important binding that I use a lot but couldn't find a reasonable substitute for is `ctrl-w o` to close other panes. Apart from that this has served me well:\n\n```\n# work around missing window pane bindings in vim-mode\n'.vim-mode.command-mode:not(.mini)':\n  'ctrl-w h': 'window:focus-pane-on-left'\n  'ctrl-w left': 'window:focus-pane-on-left'\n  'ctrl-w j': 'window:focus-pane-below'\n  'ctrl-w down': 'window:focus-pane-below'\n  'ctrl-w k': 'window:focus-pane-above'\n  'ctrl-w up': 'window:focus-pane-above'\n  'ctrl-w l': 'window:focus-pane-on-right'\n  'ctrl-w right': 'window:focus-pane-on-right'\n  'ctrl-w ctrl-w': 'window:focus-next-pane'\n  'ctrl-w w': 'window:focus-next-pane'\n  'ctrl-w ctrl-p': 'window:focus-previous-pane'\n  'ctrl-w p': 'window:focus-previous-pane'\n  'ctrl-w ctrl-c': 'pane:close'\n  'ctrl-w c': 'pane:close'\n  'ctrl-w q': 'core:close'\n```\n\nAny objection to putting something like this in the vim-mode keymap?\n. I see there is already some overlap with #104, I am just going to whip up a patch with the missing bindings.\n. between #104 and #162 I think we've covered the suggested bindings and them some.\n\nEDIT: oh he mentioned resizing nvm.\n\nEDIT AGAIN: actually, now might be a good time to close this and open a new ticket for pane resizing\n. @astericky `cmd-k right` is a default Atom binding, it's not vim-mode specific. This issue is about vim-mode aliases to Atom pane commands. In any case, it doesn't look like vim-mode breaks the default binding. You might want to check Atom discussions http://discuss.atom.io for advice.\n. Oh, I also hooked up paragraph movement in visual mode.\n. I've rebased and added a note to `docs/motions.md`, thanks!\n. Almost identical pullreqs submitted less than an hour apart. Are we best friends now...?\n. :+1: works for me\n. This might be superseded by #77, not sure that one is farther along or not.\n. They're almost exactly the same, I guess #77 wins \\o/\n. At some point this got fixed, closing.\n. I am still getting failing tests because of this. I am using 0.6.1 and there is no option to upgrade. Is there anything I can do?\n. Okay, it turns out auto-updating from within the editor isn't working for me. Downloading the latest version from the web site fixed it.\n. My favorite part of working on this is learning about all the Vim commands I didn't know.\n. Oh also, `#` does the same thing only backwards.\n. As a workaround, I've mapped `*` to `find-and-replace:select-next` which isn't perfect but mostly does what I mean for now. From my personal keymap:\n\n```\n'.vim-mode.command-mode:not(.mini)':\n  '*': 'find-and-replace:select-next'\n```\n. Here is a mediocre workaround from my personal keymap, it works closest to default Vim if you enable completion from other buffers in the autocomplete plugin options:\n\n``` cson\n# work around missing vim completion\n'.vim-mode:not(.mini):not(.command-mode):not(visual-mode)':\n  'ctrl-n': 'autocomplete:attach'\n```\n. I just rebased this on the latest master and the only test failures in your branch are also failing on master. In my case the problem is an API mismatch between Atom 0.6.1 and 0.6.2, which version of Atom do you have installed?\n. @ciarand Once I update Atom (I had to redownload, it was not auto-updating) this passes for me. If you can please rebase it to the latest master, this can be merged.\n. So, this patch does avoid some specific problematic behavior of `D` but it still joins lines if you're on a blank line. Is there a chance this can be fixed as well? I feel like there are legit fixes here but the spec name is misleading.\n. I think this might be related to #2, it's called out with a FIXME in the spec for `$` movement.\n. @jroes The reason that Vim isn't maddening to use all the time is that Vim doesn't wait for a second key unless there is a multi-key binding that starts with the first one. That's why I can't understand why anyone would bind `j j`, lol.\n\n:+1: from me for the timeout. Too many important key bindings won't work without it. Let's just be mindful that we don't pause on every keystroke, just the ones with multi-key bindings.\n. > Is there a default vim keybinding that does this?\n\nThe defaults avoid bindings that insert delays. Also worth noting, and possibly related, you can use Vim with the `notimeout` option to disable this behavior.\n. There is currently no support for ex commands, and based on #50 it's looking like that functionality will go into another plugin.\n. Oh for what it's worth btw, `10G` or `10gg` both do more or less the same thing and work in vim-mode.\n. It looks like everyone's happy with this answer, I'm gonna close in favor of #50.\n. Just my $.02, I think that Vim plugin functionality and non-standard bindings should go into personal configuration or other plugins. I have a number of non-standard keymaps that I am used to from my personal Vim config so I sympathize, but even in the case of NERDTree I probably didn't use the same bindings you did. I think personal configuration is the answer here, just as it would be in Vim itself.\n. @eob Why not just bind your preferred key in your personal keymap to open the project tree?\n. Agreed! Closing as a dupe of #91, please suggest it there.\n. Clear and helpful, thanks for writing this.\n. @tony612 It looks like the motion of the default matching plugin isn't quite the same as `%` anyway, which makes me more inclined to leave this in personal config. However in general, I think it's okay to add vim-mode default bindings that utilize the default Atom packages, provided the behavior matches Vim's.\n. Looks like an oversight, good catch!\n. :shipit: tests pass, works for me interactively\n\nDon't wanna merge in case something else is up, so I'm pinging @bhuga instead. :)\n. :+1:  works for me and the tests pass\n. @tony612 Can you please add a doc entry for `E` to `motions.md`?\n. I'm not sure I am using screen vs buffer positions correctly here, if someone with a better grasp of the issue could take a look I'd appreciate it.\n. Okay, I'm using buffer positioning throughout, I think.\n. This looks like a dupe of #99, mind chiming in there? Thanks.\n. Dug into Vim help and found some more low-hanging fruit. Also renamed the docs to more closely match the Vim counterpart. I think this is ready to go.\n. Haha I can't even figure out how `yy` is implemented to fix this, help!\n. :+1: works for me\n. Good catch. Note for potential implementors: `_` is not only an effective alternative to `^`, but also does downward movement if you provide a count.\n. Kinda related to #135\n. Maybe I was mistaken, I can't reproduce this any more and the tests look correct. Closing for now, sorry.\n. Hah! Good catch. Mind if I close in favor of #171?\n. Possibly related Atom discussion thread: http://discuss.atom.io/t/soft-wrap-doesnt-work-on-wide-characters-e-g-chinese/5368\n. ",
    "tarebyte": "For the cursor why not take the inverse of the background and lighten it? I seem to be having good luck with it so far and I have tried this method on both light and dark backgrounds.\n\nThis is my less file \n\n``` sass\n@import \"ui-variables\";\n\n.vim-mode.command-mode {\n  .cursor, .cursor.blink-off {\n    border: 0;\n    background-color: lighten(spin(@app-background-color, 180), 40%);\n    visibility: visible;\n    opacity: 0.5;\n  }\n}\n```\n. For the cursor why not take the inverse of the background and lighten it? I seem to be having good luck with it so far and I have tried this method on both light and dark backgrounds.\n\nThis is my less file \n\n``` sass\n@import \"ui-variables\";\n\n.vim-mode.command-mode {\n  .cursor, .cursor.blink-off {\n    border: 0;\n    background-color: lighten(spin(@app-background-color, 180), 40%);\n    visibility: visible;\n    opacity: 0.5;\n  }\n}\n```\n. ",
    "billyvg": "I think the problem with that is you're using the UI theme variable,\nwhereas syntax themes can have their own background (i.e. atom dark ui and\natom light syntax).\n\nSo some refactoring would need to be done with the syntax themes so things\nlike background color are less variables.\n\nOn Thu, Feb 27, 2014 at 7:58 AM, Mark Tareshawty\nnotifications@github.comwrote:\n\n> For the cursor why not take the inverse of the background and lighten it?\n> I seem to be having good luck with it so far and I have tried this method\n> on both light and dark backgrounds.\n> \n> This is my less file\n> \n> @import \"ui-variables\";\n> .vim-mode.command-mode {\n>   .cursor, .cursor.blink-off {\n>     border: 0;\n>     background-color: lighten(spin(@app-background-color, 180), 40%);\n>     visibility: visible;\n>     opacity: 0.5;\n>   }}\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/pull/46#issuecomment-36256809\n> .\n. I think the problem with that is you're using the UI theme variable,\nwhereas syntax themes can have their own background (i.e. atom dark ui and\natom light syntax).\n\nSo some refactoring would need to be done with the syntax themes so things\nlike background color are less variables.\n\nOn Thu, Feb 27, 2014 at 7:58 AM, Mark Tareshawty\nnotifications@github.comwrote:\n\n> For the cursor why not take the inverse of the background and lighten it?\n> I seem to be having good luck with it so far and I have tried this method\n> on both light and dark backgrounds.\n> \n> This is my less file\n> \n> @import \"ui-variables\";\n> .vim-mode.command-mode {\n>   .cursor, .cursor.blink-off {\n>     border: 0;\n>     background-color: lighten(spin(@app-background-color, 180), 40%);\n>     visibility: visible;\n>     opacity: 0.5;\n>   }}\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/pull/46#issuecomment-36256809\n> .\n. ",
    "benogle": "For the cursor color use the technique in #123.\n\nAtom 0.65.0 will have these syntax variables built in.\n. This has not been released yet. It will work on next vim-mode release (0.7.3 or 0.8.0).\n. Please give a specific example with specific lines to fold and specific lines where the behavior is incorrect. This will help the maintainers find this much faster.\n. vim-mode is likely the problem here. \n\nCan you upgrade to 0.155.0? When you trigger this again, the button will now link to the vim-mode issues. \n\nThey will need more information as well like: what were you doing when this happened? What are the steps to reproduce?\n. @peterjeliot when you get an error, can you pop open the dev tools and run \n\n```\ndocument.querySelector('atom-notification.fatal').getIssueUrl()\n```\n\nThat will output a collapsed string. Click on the string in the console, and paste it into this issue.\n\nDupe of https://github.com/atom/atom/issues/4933\n. That is unfortunately the truncated version. So the console apparently no longer expands the string on click. Try this:\n\n``` js\natom.notifications.addWarning(document.querySelector('atom-notification.fatal').getIssueUrl(), {dismissable: true})\n```\n\nThat will pop up a notification, and you can copy the url out of the notification.\n. Thanks for the link. Closing in favor of: https://github.com/atom/atom/issues/4933\n. For the cursor color use the technique in #123.\n\nAtom 0.65.0 will have these syntax variables built in.\n. This has not been released yet. It will work on next vim-mode release (0.7.3 or 0.8.0).\n. Please give a specific example with specific lines to fold and specific lines where the behavior is incorrect. This will help the maintainers find this much faster.\n. vim-mode is likely the problem here. \n\nCan you upgrade to 0.155.0? When you trigger this again, the button will now link to the vim-mode issues. \n\nThey will need more information as well like: what were you doing when this happened? What are the steps to reproduce?\n. @peterjeliot when you get an error, can you pop open the dev tools and run \n\n```\ndocument.querySelector('atom-notification.fatal').getIssueUrl()\n```\n\nThat will output a collapsed string. Click on the string in the console, and paste it into this issue.\n\nDupe of https://github.com/atom/atom/issues/4933\n. That is unfortunately the truncated version. So the console apparently no longer expands the string on click. Try this:\n\n``` js\natom.notifications.addWarning(document.querySelector('atom-notification.fatal').getIssueUrl(), {dismissable: true})\n```\n\nThat will pop up a notification, and you can copy the url out of the notification.\n. Thanks for the link. Closing in favor of: https://github.com/atom/atom/issues/4933\n. ",
    "jspahrsummers": "Closing for the time being due to inactivity.\n. Please follow https://github.com/atom/atom/issues/1612 instead of this issue.\n. This and #219 appear to be describing the same issue.\n. Closing due to inactivity.\n. /cc #362 \n. Sounds like the same issue as #2.\n. Closing for the time being due to inactivity.\n. > Selecting text in atom is different than selecting text in vim.\n\n@bhuga Why's that? MacVim automatically drops you into visual mode when you perform a mouse-based selection. Not sure why we would want to do differently.\n. Sounds like the same issue as #83.\n. Closing for the time being due to inactivity.\n. This and #219 appear to be describing the same issue.\n. @nicolas-dular Do you have soft wrapping enabled? There are some [known issues](https://github.com/atom/vim-mode/issues/231) with vim cursor movements and soft wrapping right now.\n. Possibly related to #219, but I can't reproduce this as described. Do you still see that specific issue?\n. Sorry this went unnoticed! Looks like #373 has addressed the same issue, but I really appreciate you opening this pull request. :sparkles: \n. @garcg Is this ready for another look? We don't get notifications about new commits (only comments), so it's hard to tell if this is still waiting on other changes. :flushed: \n. No worries! This looks good to me. :shipit:\n\nThanks!\n. Sorry, I'm a bit unclear on what the status is here. Is this waiting on a change in Atom proper, or should we be looking at #353 instead, or something else?\n. > Closing as dupe.\n. I was quoting @bhuga's comment above, where the issue was intended to be closed but that got missed. :wink:\n. Looks :sparkles:, thank you!\n. Sorry this went unnoticed! Looks like #373 has addressed the same issue, but I really appreciate you opening this pull request. :sparkles: \n. Thanks for the pull request! This looks great. :sparkles:\n. Thanks for the pull request! In addition to the above notes, could you please add tests for the new behavior?\n. Thanks for the pull request! This looks good\u2014I just have the one note above. :sparkles:\n. ![](http://www.ademiller.com/blogs/tech_pictures/2008/06/it-works-award1.png)\n. Since the diff here is kinda tricky to read, the main change is not performing any cursor movements _before_ putting if there's an active selection.\n. :white_check_mark: \n. :sparkling_heart: \n. Resolved in #373.\n. Already captured in #325.\n. Dupe of #219.\n. This change looks legit. :sparkles:\n\nCould you please merge from `master` and add tests for this behavior? :bow:\n. This looks awesome, and the added operators seem to work great in my testing. Thanks for the pull request! :sparkles: \n\nI have just a few notes:\n1. This doesn't appear to work with square brackets at all.\n2. Typing the ending character (instead of the starting character) doesn't work. Vim allows both.\n3. It'd be awesome to have support for `c` and `d` here as well.\n\nOf course, I think all of these apply to the existing \u201cselect inside\u201d operators too, so please tell me if this stuff would be better to tackle in a separate pull request.\n. > > It'd be awesome to have support for `c` and `d` here as well.\n> \n> Could you expand on this? I don't understand what you are referring to.\n\nSorry about that. I mean that, in Vim, `ca(` or `da(` will change or delete the contents inside of parentheses, but that's currently unsupported for `a` and `i` here (through no fault of this PR).\n. > `ci(` and `di(` are implemented though.\n\nHmm, indeed. Not sure what state I was in before that I didn't see it working when I tried. \u00af\\(\u00ba_o)/\u00af\n\nSorry about the trouble, and thanks for making those additional changes! I'm super excited for this. :zap:\n. @nathansobo That'd be awesome! Is there anything I can do to help?\n. I would\u2026 but I'm still struggling to find time for it. :stuck_out_tongue_winking_eye: \n. These are\u00a0completely separate plugins, so it's not surprising that they interact in weird ways. I'd recommend adding [custom behavior for Escape](https://github.com/jspahrsummers/dotfiles/blob/64fdd6cfe101b50178a34544b4d8fd8c24ce6217/.atom/keymap.cson#L39-L40) to your keymap to work around this issue.\n\nAlternatively, it may be more appropriate to file an issue against [atom/autocomplete](https://github.com/atom/autocomplete).\n. Thanks for the pull request, but I don't think this is suitable to include in the plugin project directly, as not everyone uses a linter (or even the same linter plugin). It seems more appropriate for a per-user configuration than a project-wide one.\n. :sparkling_heart: \n. Thanks for the pull request!\n\nIn Vim, this is controlled by the `ignorecase` and `smartcase` configuration settings, and isn't the default. Could we do something similar for Atom?\n. I'm not super familiar myself, but the `startInInsertMode` config option looks like a good example:\n- [vim-mode.coffee](https://github.com/atom/vim-mode/blob/2ec1119b2a34587aae44f774b84a35d9cb207a68/lib/vim-mode.coffee#L4-L6)\n- [vim-state.coffee](https://github.com/atom/vim-mode/blob/a0fa771a2f36feed8dfd0f57bcb84f5b1db2a534/lib/vim-state.coffee#L37)\n. @isaachess Thanks for adding the config option! I think a default of `false` is great.\n\nWould you mind adding a test or two as well? :pray:\n. Looks really good, thank you! :sparkles:\n\nJust a couple more notes, but I think this is ready to merge otherwise.\n. ![](http://media1.giphy.com/media/kS1aph1nPE1lm/giphy.gif)\n. I'll try to look if I get a moment, but my time for Atom is pretty limited (as it's not really my main work _or_ hobby project). :confused: \n. @nathansobo Thanks! :love_letter: \n. All of vim-mode's navigation is specified through a normal Atom [keymap](https://github.com/atom/vim-mode/blob/821af46d955c5cb60bac72b247dd96cc8b8161f0/keymaps/vim-mode.cson#L9-L18). You can map them for Dvorak by [defining your own keymap](https://atom.io/docs/v0.138.0/advanced/keymaps).\n. All of Atom's [keymaps](https://atom.io/docs/v0.139.0/advanced/keymaps) (including those from plugins) are rebindable. You should be able to just remove or rebind whichever ones are conflicting.\n. Er, I'm an idiot. I accidentally had a pinned dev version of vim-mode. :unamused: \n\nSorry for the noise!\n. Closing for the time being due to inactivity.\n. Please follow https://github.com/atom/atom/issues/1612 instead of this issue.\n. This and #219 appear to be describing the same issue.\n. Closing due to inactivity.\n. /cc #362 \n. Sounds like the same issue as #2.\n. Closing for the time being due to inactivity.\n. > Selecting text in atom is different than selecting text in vim.\n\n@bhuga Why's that? MacVim automatically drops you into visual mode when you perform a mouse-based selection. Not sure why we would want to do differently.\n. Sounds like the same issue as #83.\n. Closing for the time being due to inactivity.\n. This and #219 appear to be describing the same issue.\n. @nicolas-dular Do you have soft wrapping enabled? There are some [known issues](https://github.com/atom/vim-mode/issues/231) with vim cursor movements and soft wrapping right now.\n. Possibly related to #219, but I can't reproduce this as described. Do you still see that specific issue?\n. Sorry this went unnoticed! Looks like #373 has addressed the same issue, but I really appreciate you opening this pull request. :sparkles: \n. @garcg Is this ready for another look? We don't get notifications about new commits (only comments), so it's hard to tell if this is still waiting on other changes. :flushed: \n. No worries! This looks good to me. :shipit:\n\nThanks!\n. Sorry, I'm a bit unclear on what the status is here. Is this waiting on a change in Atom proper, or should we be looking at #353 instead, or something else?\n. > Closing as dupe.\n. I was quoting @bhuga's comment above, where the issue was intended to be closed but that got missed. :wink:\n. Looks :sparkles:, thank you!\n. Sorry this went unnoticed! Looks like #373 has addressed the same issue, but I really appreciate you opening this pull request. :sparkles: \n. Thanks for the pull request! This looks great. :sparkles:\n. Thanks for the pull request! In addition to the above notes, could you please add tests for the new behavior?\n. Thanks for the pull request! This looks good\u2014I just have the one note above. :sparkles:\n. ![](http://www.ademiller.com/blogs/tech_pictures/2008/06/it-works-award1.png)\n. Since the diff here is kinda tricky to read, the main change is not performing any cursor movements _before_ putting if there's an active selection.\n. :white_check_mark: \n. :sparkling_heart: \n. Resolved in #373.\n. Already captured in #325.\n. Dupe of #219.\n. This change looks legit. :sparkles:\n\nCould you please merge from `master` and add tests for this behavior? :bow:\n. This looks awesome, and the added operators seem to work great in my testing. Thanks for the pull request! :sparkles: \n\nI have just a few notes:\n1. This doesn't appear to work with square brackets at all.\n2. Typing the ending character (instead of the starting character) doesn't work. Vim allows both.\n3. It'd be awesome to have support for `c` and `d` here as well.\n\nOf course, I think all of these apply to the existing \u201cselect inside\u201d operators too, so please tell me if this stuff would be better to tackle in a separate pull request.\n. > > It'd be awesome to have support for `c` and `d` here as well.\n> \n> Could you expand on this? I don't understand what you are referring to.\n\nSorry about that. I mean that, in Vim, `ca(` or `da(` will change or delete the contents inside of parentheses, but that's currently unsupported for `a` and `i` here (through no fault of this PR).\n. > `ci(` and `di(` are implemented though.\n\nHmm, indeed. Not sure what state I was in before that I didn't see it working when I tried. \u00af\\(\u00ba_o)/\u00af\n\nSorry about the trouble, and thanks for making those additional changes! I'm super excited for this. :zap:\n. @nathansobo That'd be awesome! Is there anything I can do to help?\n. I would\u2026 but I'm still struggling to find time for it. :stuck_out_tongue_winking_eye: \n. These are\u00a0completely separate plugins, so it's not surprising that they interact in weird ways. I'd recommend adding [custom behavior for Escape](https://github.com/jspahrsummers/dotfiles/blob/64fdd6cfe101b50178a34544b4d8fd8c24ce6217/.atom/keymap.cson#L39-L40) to your keymap to work around this issue.\n\nAlternatively, it may be more appropriate to file an issue against [atom/autocomplete](https://github.com/atom/autocomplete).\n. Thanks for the pull request, but I don't think this is suitable to include in the plugin project directly, as not everyone uses a linter (or even the same linter plugin). It seems more appropriate for a per-user configuration than a project-wide one.\n. :sparkling_heart: \n. Thanks for the pull request!\n\nIn Vim, this is controlled by the `ignorecase` and `smartcase` configuration settings, and isn't the default. Could we do something similar for Atom?\n. I'm not super familiar myself, but the `startInInsertMode` config option looks like a good example:\n- [vim-mode.coffee](https://github.com/atom/vim-mode/blob/2ec1119b2a34587aae44f774b84a35d9cb207a68/lib/vim-mode.coffee#L4-L6)\n- [vim-state.coffee](https://github.com/atom/vim-mode/blob/a0fa771a2f36feed8dfd0f57bcb84f5b1db2a534/lib/vim-state.coffee#L37)\n. @isaachess Thanks for adding the config option! I think a default of `false` is great.\n\nWould you mind adding a test or two as well? :pray:\n. Looks really good, thank you! :sparkles:\n\nJust a couple more notes, but I think this is ready to merge otherwise.\n. ![](http://media1.giphy.com/media/kS1aph1nPE1lm/giphy.gif)\n. I'll try to look if I get a moment, but my time for Atom is pretty limited (as it's not really my main work _or_ hobby project). :confused: \n. @nathansobo Thanks! :love_letter: \n. All of vim-mode's navigation is specified through a normal Atom [keymap](https://github.com/atom/vim-mode/blob/821af46d955c5cb60bac72b247dd96cc8b8161f0/keymaps/vim-mode.cson#L9-L18). You can map them for Dvorak by [defining your own keymap](https://atom.io/docs/v0.138.0/advanced/keymaps).\n. All of Atom's [keymaps](https://atom.io/docs/v0.139.0/advanced/keymaps) (including those from plugins) are rebindable. You should be able to just remove or rebind whichever ones are conflicting.\n. Er, I'm an idiot. I accidentally had a pinned dev version of vim-mode. :unamused: \n\nSorry for the noise!\n. ",
    "christopherdumas": "I had that problem, but then I reinstalled vim-mode using `apm install vim-mode` and it was fine...\n. No. Sorry.\n\nOn Sat, Mar 29, 2014 at 1:54 AM, Zack Hobson notifications@github.comwrote:\n\n> @danzimm https://github.com/danzimm Haven't gotten to it, no. Feel free\n> to jump in.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/47#issuecomment-38990397\n> .\n. I have tested that in my vim on my mac (osx 10.8, normal vim not macvim) and it turns out that `dj` and `dk` only do one line, above the current one.\n. Currently, there is no Ex mode in atom's vim-mode, meaning that you cannot do an `:` commands. There is a discussion about whether to add one.\n. Yes! I was just having a problem with that!\n. I had that problem, but then I reinstalled vim-mode using `apm install vim-mode` and it was fine...\n. No. Sorry.\n\nOn Sat, Mar 29, 2014 at 1:54 AM, Zack Hobson notifications@github.comwrote:\n\n> @danzimm https://github.com/danzimm Haven't gotten to it, no. Feel free\n> to jump in.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/47#issuecomment-38990397\n> .\n. I have tested that in my vim on my mac (osx 10.8, normal vim not macvim) and it turns out that `dj` and `dk` only do one line, above the current one.\n. Currently, there is no Ex mode in atom's vim-mode, meaning that you cannot do an `:` commands. There is a discussion about whether to add one.\n. Yes! I was just having a problem with that!\n. ",
    "jordandcarter": "@mcolyer atom 0.64.0 / vim-mode 0.7.2 still an issue.\n\nI did `apm install vim-mode` as instructed to come up to version 0.7.2\n\nAlso, it is independent of line count, it is just the last line which is affected.\n. dd or D aren't affected by this bug, they properly fill the buffer when used on the last line.\n. Fixed in https://github.com/atom/vim-mode/pull/205\n. @mcolyer atom 0.64.0 / vim-mode 0.7.2 still an issue.\n\nI did `apm install vim-mode` as instructed to come up to version 0.7.2\n\nAlso, it is independent of line count, it is just the last line which is affected.\n. dd or D aren't affected by this bug, they properly fill the buffer when used on the last line.\n. Fixed in https://github.com/atom/vim-mode/pull/205\n. ",
    "joefiorini": "Realized I forgot to write a test for this. Are there any instructions for getting a custom build to run tests against?\n. Figured out testing. All I had to do was run `apm test` with my `vim-mode` fork as cwd. Tests are now included.\n. Whoops, yeah.\n. I mean, what blank line? :wink: \n. Realized I forgot to write a test for this. Are there any instructions for getting a custom build to run tests against?\n. Figured out testing. All I had to do was run `apm test` with my `vim-mode` fork as cwd. Tests are now included.\n. Whoops, yeah.\n. I mean, what blank line? :wink: \n. ",
    "jaymiejones86": "Big +1 on this one.\n. Big +1 on this one.\n. ",
    "adiospace": "+1\n. I've installed Atom on my second machine, maybe this is why I get this. Other packages worked fine except this one. \n\nUpdating Vim-Mode to 0.7.1 on my first Atom installation also worked.\n. Because it was an easy fix, I thought it was a good idea to get my hands in some Atom code.\n. +1\n. I've installed Atom on my second machine, maybe this is why I get this. Other packages worked fine except this one. \n\nUpdating Vim-Mode to 0.7.1 on my first Atom installation also worked.\n. Because it was an easy fix, I thought it was a good idea to get my hands in some Atom code.\n. ",
    "ruedap": "+1\n. @dougblack Perfect! I needed this. Thank you so much :tada:\n. @mcolyer Thanks for the code review :smile: Fixed and rebased.\n. +1\n. @dougblack Perfect! I needed this. Thank you so much :tada:\n. @mcolyer Thanks for the code review :smile: Fixed and rebased.\n. ",
    "svnlto": "+1\n. +1\n. :thumbsup: \n. +1\n. +1\n. :thumbsup: \n. ",
    "jessmartin": "First thing I noticed within 20 seconds of using Atom. Merge please! :smile:\n\nAtom is the :poop: btw!\n. First thing I noticed within 20 seconds of using Atom. Merge please! :smile:\n\nAtom is the :poop: btw!\n. ",
    "ejlangev": "+1\n. +1\n. ",
    "codingcampbell": "@mcolyer sure thing, please see the revised commits.\n\nFYI the wording in README made me think writing a spec wasn't possible for me (as someone who only has access to the binary download):\n\n> **Important** you'll need to be running a locally built version of Atom to run tests\n\nThanks!\n. @mcolyer sure thing, please see the revised commits.\n\nFYI the wording in README made me think writing a spec wasn't possible for me (as someone who only has access to the binary download):\n\n> **Important** you'll need to be running a locally built version of Atom to run tests\n\nThanks!\n. ",
    "aseba": ":+1: ! I was thinking that quickfix to this is mapping _:_ to `cmd+shift+p` and _w_ work as _save_\n. :+1: ! I was thinking that quickfix to this is mapping _:_ to `cmd+shift+p` and _w_ work as _save_\n. ",
    "rgbkrk": "Oh that's a decent idea @aseba.\n. :+1: on having an `ex` package. I'll change this issue to be about `ex`.\n. I'm happy to close the issue now that I know about [ex-mode](https://atom.io/packages/ex-mode). \n. Heh, I never closed this. I'll keep it open now that `ex-mode` is looking for maintainers: https://github.com/lloeki/ex-mode/issues/116\n\nPerhaps there are contributors here that would like to help there (or bring over some of it?)\n. I've tried to fix this by setting up a `deactivate` in `vim-mode.coffee`. My first attempt is to just activateInsertMode on each editorView:\n\n``` coffeescript\n  deactivate: ->\n    # Put the user back in insert mode before ending\n    atom.workspaceView.eachEditorView(editorView) ->\n      editorView.vimState.activateInsertMode()\n```\n\nThis crashes Atom completely though (no atom context, just Chromium?):\n\n![screen shot 2014-02-28 at 1 41 50 pm](https://f.cloud.github.com/assets/836375/2297920/9cdee884-a0b4-11e3-9ec1-a3288e816fba.png)\n. Looks great to me. I'm glad you're fostering such a great community here @mcolyer!\n. Oh that's a decent idea @aseba.\n. :+1: on having an `ex` package. I'll change this issue to be about `ex`.\n. I'm happy to close the issue now that I know about [ex-mode](https://atom.io/packages/ex-mode). \n. Heh, I never closed this. I'll keep it open now that `ex-mode` is looking for maintainers: https://github.com/lloeki/ex-mode/issues/116\n\nPerhaps there are contributors here that would like to help there (or bring over some of it?)\n. I've tried to fix this by setting up a `deactivate` in `vim-mode.coffee`. My first attempt is to just activateInsertMode on each editorView:\n\n``` coffeescript\n  deactivate: ->\n    # Put the user back in insert mode before ending\n    atom.workspaceView.eachEditorView(editorView) ->\n      editorView.vimState.activateInsertMode()\n```\n\nThis crashes Atom completely though (no atom context, just Chromium?):\n\n![screen shot 2014-02-28 at 1 41 50 pm](https://f.cloud.github.com/assets/836375/2297920/9cdee884-a0b4-11e3-9ec1-a3288e816fba.png)\n. Looks great to me. I'm glad you're fostering such a great community here @mcolyer!\n. ",
    "ciarand": "While some commands (esp. plugin commands like `:Test`, `:Gstatus`, etc.) can be mapped to `cmd+shift+p`, there are others that aren't as easily mapped. Substitutions are the first that come to mind, but there are others.\n\nCould a set of ex commands that populate the command palette be available prefixed with `:`? Then `:` could open the command palette prefilled with `:`. `:w` could be alias'd to save, and that gives us a framework to make the other commands work as well.\n\nWhat do you think?\n. That actually sounds like a nicer split. How do registers and other shared code get handled if the two are separate?\n. You're my hero :sparkles:\n. Afaik the decision was made to create an ex package instead. That reduces the complexity of this package and allows people to make the decision regarding whether they'd like to use the command palette or the more traditionally vim-esque ex palette.\n. There's a really good example of motion specs in #76: https://github.com/atom/vim-mode/pull/76/files#diff-88116f5805359a4559f1700a361e64b8R195\n. Sorry, should have posted a new update @zenhob. cf6bd5f1e7059f14718f65df41e1bc6f1c35d88b fixed the failing test, but I wasn't sure it's the best way of handling it. Like I said in the commit, the [line length](https://github.com/ciarand/vim-mode/blob/cf6bd5f1e7059f14718f65df41e1bc6f1c35d88b/lib/vim-state.coffee#L87) is kind of crazy.\n\nEither way, it's been rebased to master. :+1:\n. Sorry about that guys, I messed up the test. Should have been checking cursor position, not editor text.\n\nHere's a more detailed description of the problem. The D operator in master changes this (\u2592 is the cursor):\n\n```\n012345\n\u2592abcdef\n```\n\nInto this\n\n```\n012345\u2592\n\n```\n\nNote that the blank line still exists, but the cursor has been moved.\n\nI've fixed both tests and confirmed that they're testing the behavior I expect.\n\nThe first one (\"it does not join lines\") checks the behavior above. That's fixed by passing in the `allowEOL` option to the Delete constructor.\n\nUnfortunately passing that in stops the cursor moving backward at all, hence the need for the second test (\"it moves the cursor backward 1 character\"). The second test will pass without the vim-state changes, it only starts failing when the `allowEOL` option is passed in and no extra `MoveLeft` motion is included.\n\nI've rebased on master, so it should be ready to go. Let me know if you'd like me to squash the commits or anything.\n. Hey guys, I owe you an update here. Life got really crazy over the last two or so weeks and shows no immediate signs of letting up.\n\nIf anyone else wants to take this over, make a better request, etc. they have my blessing. Otherwise I'll see if I can get to it soon.\n. That helps a ton @mcolyer, thanks. I've started using the JS grammar and have added symmetrical tests to the indent / outdent features. This has been rebased against master and is ready for review.\n. @mcolyer rebased and added a note :+1:\n. While some commands (esp. plugin commands like `:Test`, `:Gstatus`, etc.) can be mapped to `cmd+shift+p`, there are others that aren't as easily mapped. Substitutions are the first that come to mind, but there are others.\n\nCould a set of ex commands that populate the command palette be available prefixed with `:`? Then `:` could open the command palette prefilled with `:`. `:w` could be alias'd to save, and that gives us a framework to make the other commands work as well.\n\nWhat do you think?\n. That actually sounds like a nicer split. How do registers and other shared code get handled if the two are separate?\n. You're my hero :sparkles:\n. Afaik the decision was made to create an ex package instead. That reduces the complexity of this package and allows people to make the decision regarding whether they'd like to use the command palette or the more traditionally vim-esque ex palette.\n. There's a really good example of motion specs in #76: https://github.com/atom/vim-mode/pull/76/files#diff-88116f5805359a4559f1700a361e64b8R195\n. Sorry, should have posted a new update @zenhob. cf6bd5f1e7059f14718f65df41e1bc6f1c35d88b fixed the failing test, but I wasn't sure it's the best way of handling it. Like I said in the commit, the [line length](https://github.com/ciarand/vim-mode/blob/cf6bd5f1e7059f14718f65df41e1bc6f1c35d88b/lib/vim-state.coffee#L87) is kind of crazy.\n\nEither way, it's been rebased to master. :+1:\n. Sorry about that guys, I messed up the test. Should have been checking cursor position, not editor text.\n\nHere's a more detailed description of the problem. The D operator in master changes this (\u2592 is the cursor):\n\n```\n012345\n\u2592abcdef\n```\n\nInto this\n\n```\n012345\u2592\n\n```\n\nNote that the blank line still exists, but the cursor has been moved.\n\nI've fixed both tests and confirmed that they're testing the behavior I expect.\n\nThe first one (\"it does not join lines\") checks the behavior above. That's fixed by passing in the `allowEOL` option to the Delete constructor.\n\nUnfortunately passing that in stops the cursor moving backward at all, hence the need for the second test (\"it moves the cursor backward 1 character\"). The second test will pass without the vim-state changes, it only starts failing when the `allowEOL` option is passed in and no extra `MoveLeft` motion is included.\n\nI've rebased on master, so it should be ready to go. Let me know if you'd like me to squash the commits or anything.\n. Hey guys, I owe you an update here. Life got really crazy over the last two or so weeks and shows no immediate signs of letting up.\n\nIf anyone else wants to take this over, make a better request, etc. they have my blessing. Otherwise I'll see if I can get to it soon.\n. That helps a ton @mcolyer, thanks. I've started using the JS grammar and have added symmetrical tests to the indent / outdent features. This has been rebased against master and is ready for review.\n. @mcolyer rebased and added a note :+1:\n. ",
    "blinks": "Does that `ex` package exist somewhere yet?  Even in a small form?  (Also, it seems like some of this discussion led to agreement that `:` would open the command-palette in prep for such a package; where did that end up?)\n. Ah, not planning on piggy-backing on top of the command panel?  That's what I gleaned from ciarand's comment (a package that added a bunch of ex commands that could be run from `cmd-shift-p`).\n. Absolutely fine; are you going to write a full `ex` replacement?\n\nEDIT: The context on that bug is awesome, thanks!\n. Does that `ex` package exist somewhere yet?  Even in a small form?  (Also, it seems like some of this discussion led to agreement that `:` would open the command-palette in prep for such a package; where did that end up?)\n. Ah, not planning on piggy-backing on top of the command panel?  That's what I gleaned from ciarand's comment (a package that added a bunch of ex commands that could be run from `cmd-shift-p`).\n. Absolutely fine; are you going to write a full `ex` replacement?\n\nEDIT: The context on that bug is awesome, thanks!\n. ",
    "lloeki": "I made a few suggestions regarding ex-mode in #185 that seem to trigger enjoyment.\n. To sum it up:\n\n> don't open the command palette at all and instead open a vim-only command palette, giving access to \"ex mode\" CoffeeScript (thus extendable) functions and get the best of vim and atom.\n. No one was stepping up so, ex-mode [here](https://atom.io/packages/ex-mode). While there's only `w` and `write`, groundwork is done, so adding new commands is easy.\n. This approach would leave `.vim-mode.insert-mode` on the `.editor` though, crippling things that would depend on it (such as LESS code)\n. Workaround, in one's `keymap.cson`:\n\n``` cson\n'.vim-mode:not(.insert-mode)':\n  '_': 'vim-mode:move-to-first-character-of-line'\n```\n. > and text objects\n\nThis is awesome and really important in order to make this vim-mode not merely a thin key binding shim. It does not have to be a full vim port but having real composability of verbs/adjectives/objects is the key.\n. Well, `:w` is hind of hardwired, so it should not only open the command palette but at least define a few short alias commands to save people from launching unintended commands.\n\nOr maybe not open the command palette at all and instead open a vim-only command palette, giving access to \"ex mode\" CoffeeScript (thus extendable) functions and get the best of vim and atom.\n\nI'd actually really prefer that last one because Sublime Text does the first one and it's kind of weird mix of two unrelated ways of operation.\n. If that's all you want, just add this to your `keymap.cson` file (but it's a bad idea if you use vim,  because of muscle memory):\n\n``` cson\n'.vim-mode:not(.insert-mode)'\n  ':': 'command-palette:toggle'\n```\n. Please move discussion to #50.\n. Indeed it's working on master. Thanks.\n. Got it, but you didn't close.\n. see #50 and #185 (incl. remarks about why, although tempting, it's not necessarily a good idea to open the command palette).\n. I'll be trying something soon in [lloeki/ex-mode](https://github.com/lloeki/ex-mode).\n. No one was stepping up so, ex-mode [here](https://atom.io/packages/ex-mode). While there's only `w` and `write`, groundwork is done, so adding new commands is easy.\n. There's no reason to merge as the functionality is really separate. Only the most advanced functions may require communicating with vim-mode, and there are methods and facilities to do that cleanly (see auto completed plus and its providers, or linter), ultimately making vim-mode extensible.\n\nIf you want to help, open an issue at ex-mode and list your most used ex commands, so that I can focus on implementing them.\n. Well, this matters somehow as a seasoned vim user will expect `5ggvkkd` to delete lines 3, 4 and 5. However weird, the non-visual line behaviour movement is very vimesque and those gritty details that get ingrained in muscle memory trip me up regularly enough I thought it warranted a report.\n\nBy the way, on the sample below, doing `4gglvkk` in vim is internally consistent with the reported behavior, as it selects the character under the cursor. Atom's vim-mode behaves similarly to vim in that case, so it is not internally consistent (as above reported, it does not select the newline invisible character under the cursor).\n\n```\nfoo\nbar\nbaz\nqux\n\ntop\npot\nglob\nnot\n```\n\nWhatever, my \"duty\" (so to speak) is done, and the rest lies not in my hands :-)\n. I'm on it.\n. > expose motions via a service\n\nThis was, at first, the intended plan, because for now there is hard-to-maintain (or at least, harder than needed) duplication of logic and views between vim-mode and ex-mode (the whole stuff around pushops/processopstack, the \"search/command-line\" view and history management...).\n\n> merge ex- and vim-mode\n\nAt the beginning I wanted things to be cleanly separated so as to be able to experiment and let the architecture emerge without impacting vim-mode, allowing to scratch an itch of my own and see if and how the community responded. This is in line with how @bhuga viewed things:\n\n> > I made the initial decision to keep concerns separated and code clean. Smaller, focused packages are idiomatic in Atom.\n\nAs ex-mode grew, it became gradually obvious that vim- and ex- modes are indeed separate conceptually, yet bridged in a number of key areas that require a relatively rich service interface exposing some innards of vim-mode (if one wants to guarantee some API stability) or that, all the while keeping the code clean and concerns separated by internal architecture, ex-mode be integrated into vim-mode.\n\nIn the end, I feel it'd be simpler and leaner to have the vim-mode package provide what is an essential part of the vim core experience instead of having to maintain (in vim-mode) and follow (in ex-mode) a humongous API. Also, defaults matter and I'm confident people expect ex-mode to be there but don't bother downloading it for a variety of reasons.\n\ntl;dr: for the sake of simplicity, cleaniness, and the user, I'm in favor of a merge.\n. > What about merging the PR to get it working again and then following up with a proper investigation? \r\n\r\nBecause that's how workarounds that end up not getting fixed get merged into the codebase, resulting into an unmaintainable mess. As maintainers we have the responsibility to think not just about ourselves but also the next developer and the future life of the project, and making the code a mess, while it looks like helping in the short term, does not on the long run: it's just driving the project into the ground. Such decisions are not lightly taken but if one wants the code to be taken over to new maintainership it has to be reasonably clean, else no one will step up. I know this may sound absurd as right now the thing is unusable but this is how pressure accretes into someone stepping up for either a proper PR or maintainership (which generally follows a proper PR, the latter serving as a sort of baton passing).. Thanks @jazzpi.\n. I made a few suggestions regarding ex-mode in #185 that seem to trigger enjoyment.\n. To sum it up:\n\n> don't open the command palette at all and instead open a vim-only command palette, giving access to \"ex mode\" CoffeeScript (thus extendable) functions and get the best of vim and atom.\n. No one was stepping up so, ex-mode [here](https://atom.io/packages/ex-mode). While there's only `w` and `write`, groundwork is done, so adding new commands is easy.\n. This approach would leave `.vim-mode.insert-mode` on the `.editor` though, crippling things that would depend on it (such as LESS code)\n. Workaround, in one's `keymap.cson`:\n\n``` cson\n'.vim-mode:not(.insert-mode)':\n  '_': 'vim-mode:move-to-first-character-of-line'\n```\n. > and text objects\n\nThis is awesome and really important in order to make this vim-mode not merely a thin key binding shim. It does not have to be a full vim port but having real composability of verbs/adjectives/objects is the key.\n. Well, `:w` is hind of hardwired, so it should not only open the command palette but at least define a few short alias commands to save people from launching unintended commands.\n\nOr maybe not open the command palette at all and instead open a vim-only command palette, giving access to \"ex mode\" CoffeeScript (thus extendable) functions and get the best of vim and atom.\n\nI'd actually really prefer that last one because Sublime Text does the first one and it's kind of weird mix of two unrelated ways of operation.\n. If that's all you want, just add this to your `keymap.cson` file (but it's a bad idea if you use vim,  because of muscle memory):\n\n``` cson\n'.vim-mode:not(.insert-mode)'\n  ':': 'command-palette:toggle'\n```\n. Please move discussion to #50.\n. Indeed it's working on master. Thanks.\n. Got it, but you didn't close.\n. see #50 and #185 (incl. remarks about why, although tempting, it's not necessarily a good idea to open the command palette).\n. I'll be trying something soon in [lloeki/ex-mode](https://github.com/lloeki/ex-mode).\n. No one was stepping up so, ex-mode [here](https://atom.io/packages/ex-mode). While there's only `w` and `write`, groundwork is done, so adding new commands is easy.\n. There's no reason to merge as the functionality is really separate. Only the most advanced functions may require communicating with vim-mode, and there are methods and facilities to do that cleanly (see auto completed plus and its providers, or linter), ultimately making vim-mode extensible.\n\nIf you want to help, open an issue at ex-mode and list your most used ex commands, so that I can focus on implementing them.\n. Well, this matters somehow as a seasoned vim user will expect `5ggvkkd` to delete lines 3, 4 and 5. However weird, the non-visual line behaviour movement is very vimesque and those gritty details that get ingrained in muscle memory trip me up regularly enough I thought it warranted a report.\n\nBy the way, on the sample below, doing `4gglvkk` in vim is internally consistent with the reported behavior, as it selects the character under the cursor. Atom's vim-mode behaves similarly to vim in that case, so it is not internally consistent (as above reported, it does not select the newline invisible character under the cursor).\n\n```\nfoo\nbar\nbaz\nqux\n\ntop\npot\nglob\nnot\n```\n\nWhatever, my \"duty\" (so to speak) is done, and the rest lies not in my hands :-)\n. I'm on it.\n. > expose motions via a service\n\nThis was, at first, the intended plan, because for now there is hard-to-maintain (or at least, harder than needed) duplication of logic and views between vim-mode and ex-mode (the whole stuff around pushops/processopstack, the \"search/command-line\" view and history management...).\n\n> merge ex- and vim-mode\n\nAt the beginning I wanted things to be cleanly separated so as to be able to experiment and let the architecture emerge without impacting vim-mode, allowing to scratch an itch of my own and see if and how the community responded. This is in line with how @bhuga viewed things:\n\n> > I made the initial decision to keep concerns separated and code clean. Smaller, focused packages are idiomatic in Atom.\n\nAs ex-mode grew, it became gradually obvious that vim- and ex- modes are indeed separate conceptually, yet bridged in a number of key areas that require a relatively rich service interface exposing some innards of vim-mode (if one wants to guarantee some API stability) or that, all the while keeping the code clean and concerns separated by internal architecture, ex-mode be integrated into vim-mode.\n\nIn the end, I feel it'd be simpler and leaner to have the vim-mode package provide what is an essential part of the vim core experience instead of having to maintain (in vim-mode) and follow (in ex-mode) a humongous API. Also, defaults matter and I'm confident people expect ex-mode to be there but don't bother downloading it for a variety of reasons.\n\ntl;dr: for the sake of simplicity, cleaniness, and the user, I'm in favor of a merge.\n. > What about merging the PR to get it working again and then following up with a proper investigation? \r\n\r\nBecause that's how workarounds that end up not getting fixed get merged into the codebase, resulting into an unmaintainable mess. As maintainers we have the responsibility to think not just about ourselves but also the next developer and the future life of the project, and making the code a mess, while it looks like helping in the short term, does not on the long run: it's just driving the project into the ground. Such decisions are not lightly taken but if one wants the code to be taken over to new maintainership it has to be reasonably clean, else no one will step up. I know this may sound absurd as right now the thing is unusable but this is how pressure accretes into someone stepping up for either a proper PR or maintainership (which generally follows a proper PR, the latter serving as a sort of baton passing).. Thanks @jazzpi.\n. ",
    "thousand": "Has there been any motion on this? I'd be more than happy to test or contribute if there's a need.\n. Has there been any motion on this? I'd be more than happy to test or contribute if there's a need.\n. ",
    "vamseekm": "Wow, this is the only issue that's preventing me from using atom. I have no idea how to add the ex-command support otherwise I would have added it myself. Without implementing ex-command at least save it's hard to use atom as it breaks the flow.\n. You guys are trying to reinvent how vim emulation should work ?. The whole point of vim emulation is to make it easy for vim users to work on atom. If there is no way to save a file using :w then it's not vim emulation. Why not just go ahead invent a novel alternative to pressing Escape ?.\n\nMean while I was waiting on this issue I went back to vim and have been playing around with spacemacs and tried other editors that have basic vim keybindings. Unsubscribing from this issue, I no longer want to get these +1 mails.\n. Wow, this is the only issue that's preventing me from using atom. I have no idea how to add the ex-command support otherwise I would have added it myself. Without implementing ex-command at least save it's hard to use atom as it breaks the flow.\n. You guys are trying to reinvent how vim emulation should work ?. The whole point of vim emulation is to make it easy for vim users to work on atom. If there is no way to save a file using :w then it's not vim emulation. Why not just go ahead invent a novel alternative to pressing Escape ?.\n\nMean while I was waiting on this issue I went back to vim and have been playing around with spacemacs and tried other editors that have basic vim keybindings. Unsubscribing from this issue, I no longer want to get these +1 mails.\n. ",
    "bibodha": "I would also love to have this feature. I'm a pure vim user and am giving atom a shot. This is literally the only thing keeping me from using atom full time. I'd rather user Sublime because it has some support for ex commands. There are few weirdness that I don't like about vim in ST3 and vim for Atom is very incomplete for me. Reason I use vim is because I don't want to do ctrl (cmd) - S. It breaks the work flow completely. Please consider making this part of Vim Mode.\n. I would also love to have this feature. I'm a pure vim user and am giving atom a shot. This is literally the only thing keeping me from using atom full time. I'd rather user Sublime because it has some support for ex commands. There are few weirdness that I don't like about vim in ST3 and vim for Atom is very incomplete for me. Reason I use vim is because I don't want to do ctrl (cmd) - S. It breaks the work flow completely. Please consider making this part of Vim Mode.\n. ",
    "veturi": "I'll bump this feature request, too. As bibodha said those missing ex commands are the one and only missing feature that prevents me from going Atom full time.\n. I'll bump this feature request, too. As bibodha said those missing ex commands are the one and only missing feature that prevents me from going Atom full time.\n. ",
    "verdywid": "I would definitely change from sublime to atom if it supports this essential feature\n. I would definitely change from sublime to atom if it supports this essential feature\n. ",
    "fentas": "I would like to see this enhancement realized in some way. Seperate package would work for me also.\n+1\n. +1\nubuntu 14.04..\nBut for me is it not only Backspace also tab (for autocompleten).\nThis Bug makes it kind of unusable.\n. I would like to see this enhancement realized in some way. Seperate package would work for me also.\n+1\n. +1\nubuntu 14.04..\nBut for me is it not only Backspace also tab (for autocompleten).\nThis Bug makes it kind of unusable.\n. ",
    "kristoiv": "+1 I def. want this! I keep hitting :w, and was sad not to be able to goto line using :<number>.\n. +1 I def. want this! I keep hitting :w, and was sad not to be able to goto line using :<number>.\n. ",
    "nkpz": "If it's in a different package, fine, but +1 on this being essential. This is muscle memory, and it's a misconception to think that many long-term vim users are interested in 'transitioning' their muscle memory to the atom way. \n. I view ex-mode's download count as a sign of a problem. I suspect that it has less downloads because not enough people are willing to dig into github issues to find out that it even exists. I would bet that abandonment comes first in many cases. I'm not buying the notion that only 2.5% of vim users value ex commands.\n. If it's in a different package, fine, but +1 on this being essential. This is muscle memory, and it's a misconception to think that many long-term vim users are interested in 'transitioning' their muscle memory to the atom way. \n. I view ex-mode's download count as a sign of a problem. I suspect that it has less downloads because not enough people are willing to dig into github issues to find out that it even exists. I would bet that abandonment comes first in many cases. I'm not buying the notion that only 2.5% of vim users value ex commands.\n. ",
    "joelmo": "Maybe the easiest would be to use the vim binary for this feature, just\nsend the command to it, let it execute and save. That way people can use\ncustom commands and use vimscripts.\n\nOn Wed, Feb 4, 2015 at 5:09 PM, Nick Perez notifications@github.com wrote:\n\n> If it's in a different package, fine, but +1 on this being essential. This\n> is muscle memory, and it's a misconception to think that many long-term vim\n> users are interested in 'transitioning' their muscle memory to the atom\n> way.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/50#issuecomment-72882591.\n. On Wed, Feb 4, 2015 at 5:20 PM, Jeff Schwartz notifications@github.com\nwrote:\n\n> @joelmo https://github.com/joelmo the problem seems to be that the vim\n> module currently doesn't support all the commands (someone please correct\n> me if I am mistaken about this). So acting as a delegate and calling into\n> the vim module won't work.\n> \n> The commands that vim-mode supports doesn't have to be delegated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/50#issuecomment-72884996.\n. I don't understand what you mean. If atom supports opening external processes, then it could just execute /usr/bin/vim /path/to/file +CustomCmd +w +qa!, CustomCmd could be %substitute or anything. If those commands have to show up in the command palette there probably is a way to query them, ':command' in vim will list all user commands.\n. I agree that not everything have to be emulated, but I believe the core commands people are asking for is  substitute, global, sort, bufdo. All those, except last accept a regex, and also supports operating on ranges. I think it would be hard work to implement an emulation for these. This feature was suggested one year ago, but I don't feel like doing that work so I'm just using vim and follow some progress on neovim.\n. Maybe the easiest would be to use the vim binary for this feature, just\nsend the command to it, let it execute and save. That way people can use\ncustom commands and use vimscripts.\n\nOn Wed, Feb 4, 2015 at 5:09 PM, Nick Perez notifications@github.com wrote:\n\n> If it's in a different package, fine, but +1 on this being essential. This\n> is muscle memory, and it's a misconception to think that many long-term vim\n> users are interested in 'transitioning' their muscle memory to the atom\n> way.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/50#issuecomment-72882591.\n. On Wed, Feb 4, 2015 at 5:20 PM, Jeff Schwartz notifications@github.com\nwrote:\n\n> @joelmo https://github.com/joelmo the problem seems to be that the vim\n> module currently doesn't support all the commands (someone please correct\n> me if I am mistaken about this). So acting as a delegate and calling into\n> the vim module won't work.\n> \n> The commands that vim-mode supports doesn't have to be delegated.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/50#issuecomment-72884996.\n. I don't understand what you mean. If atom supports opening external processes, then it could just execute /usr/bin/vim /path/to/file +CustomCmd +w +qa!, CustomCmd could be %substitute or anything. If those commands have to show up in the command palette there probably is a way to query them, ':command' in vim will list all user commands.\n. I agree that not everything have to be emulated, but I believe the core commands people are asking for is  substitute, global, sort, bufdo. All those, except last accept a regex, and also supports operating on ranges. I think it would be hard work to implement an emulation for these. This feature was suggested one year ago, but I don't feel like doing that work so I'm just using vim and follow some progress on neovim.\n. ",
    "jeffschwartz": "@joelmo the problem seems to be that the vim module currently doesn't support external commands (someone please correct me if I am mistaken about this). So acting as a delegate and calling into the vim module won't work.\n. @joelmo so how can you save a file now just using vim emulation? I don't see a \"save\" option in the command palette. I'd guess if \"save\" were implemented then it would be exposed as would other ex commands and would show in the command palette, right?\n. @joelmo that's my point, this isn't vim and currently vim emulation doesn't implement what the actions that external commands would need, like saving a file in response to :w - it doesn't do that now. I'm not saying it wouldn't be nice if it did. Either a separate ex command module will have to implement :w or the current vim module will have to implement it. Personally, I sort of like the idea of a separate ex command module but I'd be happy in either case. The bottom line for me is that I don't expect vim emulation to emulate every facet of Vim. If I wanted that then I'd just use Vim (and I do at times). Perhaps when Neovim is ready, then some enterprising UI person will craft a sweet GUI around it. Until then for me there's Atom with decent (but could be better) emulation and the real deal when I want it. \n. +1\n. +1\nOn Jan 27, 2015 8:58 PM, \"sangwoojoo\" notifications@github.com wrote:\n\n> +1\n> \n> ctrl+alt+l\n> 'Convert space to tabs'\n> 'Toogle soft tabs'\n> \n> This is what I want to.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/161#issuecomment-71767856.\n. +1\n. - 1\n. +1\n. Has this been looked at yet?\n. Yes!!! Most gratefully it has and thank you. It had been a major pita iynwim :)\n. +1\n. I've noticed that in general that the motion commands (e.g. i,a,...) are still somewhat kind of janky. \n. Will do.\n. I can confirm this.\n+1\n. I believe you are wrong about that. I've never seen that in vim. Here a pic of vim in the terminal with the same file:\n\n![vim](https://cloud.githubusercontent.com/assets/271288/5828356/1bebfc6c-a0d1-11e4-99a7-7fcea0ce2411.png)\n\nBig difference between real vim and atom. Atom extended the selection past the eol character, vim does not.\n. You are correct. I stand corrected. Perhaps it is the amount past the eol that is throwing me off in atom. In any case, I apologize for the false alarm. I'm really stoked by atom's vim emulation. Thank you for your support of this excellent plugin.\n. I don't see this on my Macs, latest versions of everything.\n. +1\n. I'd only like it if it is an option and I can turn it off via options. Otherwise I'd view it as intrusive. No offense intended of course :)\n. Now I'm forced to look at the bottom of the pane and it distracts me. So I'd love to see this hidden if possible.\n. \ud83d\udc4d\n. Restarting Atom seems to have cleared up the issue so I am going to close this. If it appears again I will reopen this.\n. Most excellent! Thank you.\n. @joelmo the problem seems to be that the vim module currently doesn't support external commands (someone please correct me if I am mistaken about this). So acting as a delegate and calling into the vim module won't work.\n. @joelmo so how can you save a file now just using vim emulation? I don't see a \"save\" option in the command palette. I'd guess if \"save\" were implemented then it would be exposed as would other ex commands and would show in the command palette, right?\n. @joelmo that's my point, this isn't vim and currently vim emulation doesn't implement what the actions that external commands would need, like saving a file in response to :w - it doesn't do that now. I'm not saying it wouldn't be nice if it did. Either a separate ex command module will have to implement :w or the current vim module will have to implement it. Personally, I sort of like the idea of a separate ex command module but I'd be happy in either case. The bottom line for me is that I don't expect vim emulation to emulate every facet of Vim. If I wanted that then I'd just use Vim (and I do at times). Perhaps when Neovim is ready, then some enterprising UI person will craft a sweet GUI around it. Until then for me there's Atom with decent (but could be better) emulation and the real deal when I want it. \n. +1\n. +1\nOn Jan 27, 2015 8:58 PM, \"sangwoojoo\" notifications@github.com wrote:\n\n> +1\n> \n> ctrl+alt+l\n> 'Convert space to tabs'\n> 'Toogle soft tabs'\n> \n> This is what I want to.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/161#issuecomment-71767856.\n. +1\n. - 1\n. +1\n. Has this been looked at yet?\n. Yes!!! Most gratefully it has and thank you. It had been a major pita iynwim :)\n. +1\n. I've noticed that in general that the motion commands (e.g. i,a,...) are still somewhat kind of janky. \n. Will do.\n. I can confirm this.\n+1\n. I believe you are wrong about that. I've never seen that in vim. Here a pic of vim in the terminal with the same file:\n\n![vim](https://cloud.githubusercontent.com/assets/271288/5828356/1bebfc6c-a0d1-11e4-99a7-7fcea0ce2411.png)\n\nBig difference between real vim and atom. Atom extended the selection past the eol character, vim does not.\n. You are correct. I stand corrected. Perhaps it is the amount past the eol that is throwing me off in atom. In any case, I apologize for the false alarm. I'm really stoked by atom's vim emulation. Thank you for your support of this excellent plugin.\n. I don't see this on my Macs, latest versions of everything.\n. +1\n. I'd only like it if it is an option and I can turn it off via options. Otherwise I'd view it as intrusive. No offense intended of course :)\n. Now I'm forced to look at the bottom of the pane and it distracts me. So I'd love to see this hidden if possible.\n. \ud83d\udc4d\n. Restarting Atom seems to have cleared up the issue so I am going to close this. If it appears again I will reopen this.\n. Most excellent! Thank you.\n. ",
    "gepoch": "FWIW, the key resolver is very awesome, and vim mode is quite happy to work with it.\n\nThis could be a good workaround for ya'll, if you weren't doing this already:\n\nIn your keymap.cson\n\n```\n'.editor.vim-mode:not(.insert-mode)':\n  ': w enter': 'core:save'\n```\n\nAnd that's `:w` taken care of.\n\nSome of the other commands may require more creativity, however. Not sure what to do for `:%s` You could launch atom's native find and replace though, as a productive step:\n\n```\n'.editor.vim-mode:not(.insert-mode)':\n  ': w enter': 'core:save'\n  ': % s enter': 'find-and-replace:show'\n```\n\nAgain, not truly vim emulation, but it might be helpful to some for the time being.\n. :+1: This would be fantastic. :)\n. Heads up. I've got an implementation started [here](https://github.com/gepoch/surround). Pull requests are welcome :smiley: \n. Hey, same versions of everything.\n\nI think this bug may be more overreaching than just breaking \"g g\".\n\nI think something has gone a little haywire with the ambiguous keybinding resolver.\n\nSuppose you have two commands defined for vim mode: gt (pane:show-next-item) and gg (vim-mode:move-to-start-of-file)\n\nAnd you want to enter \"g t\" in order to go to the next pane.\n\nOpening the key binding resolver (ctrl-.) and hitting \"g\" reveals this:\n\n![screenshot from 2014-09-02 11 25 11](https://cloud.githubusercontent.com/assets/967166/4121714/d25779ae-32bd-11e4-9f1e-d47e8d739a8a.png)\n\nThis enters the (partial) state. Basically, an ambiguous command that needs more information before being resolveable.  \n\nNext you hit the \"t\". Instead of seeing the pane change command selected in the resolver, you get this:\n\n![screenshot from 2014-09-02 11 28 11](https://cloud.githubusercontent.com/assets/967166/4121752/20e6d65a-32be-11e4-842b-3877cd78ce9e.png)\n\nWhich indicates that the vim-mode:till command has been triggered, a command bound to a single \"t\".\n\n Something seems to be going wrong with the resolver. Instead of resolving the ambiguity with additional information, it's dumping the stack and starting over. \n\nThe implication is that there are many commands which are now failing due to a malfunctioning resolver (like all of the commands that my [vim-surround](https://github.com/gepoch/vim-surround) package defines...)\n. gg is working! I suspect there are some other issues in the key resolver, but I'll make a seperate ticket with more specific details :)\n. Ah! That bug definitely seems to cover this behavior!\n. #221 might be interesting to you!\n. @TeardropInc yeah. I come from a tradition of emacs, where this functionality is implemented in something called \"key-chord-mode\"\n\nThere are many names for it, because it's a good idea :) It's pretty hard to beat these combos for ease of access. I've learned to live without them because Atom is an awesome platform, but I still miss 'em.\n. My two cents :D\n\nvim-mode is not a vim emulator. If people want to be able to use their vimscripts in a modern UI, there are some projects that are targeting this (such as [neovim](https://github.com/neovim/neovim)) vim-mode's scope is mostly around getting the user interface to use modal control targeting vim's operation method.\n\nRather than trying to rewrite vim in javascript (which has actually already been [done](https://github.com/coolwanglu/vim.js)) I think a better way forward is to bring our favorite things about vim into atom. [vim-mode] does a huge portion of the work, and enables a familiar vim workflow. Beyond that, the atom ecosystem provides more options.\n\n[vim-surround](https://github.com/gepoch/vim-surround) (for example/shameless plug)  attempts to reproduce the functionality of the old vim-surround plugin, but in a way that integrates into the Atom environment nicely. Atom's vim-mode was extended using Atom's ideas for what makes a plugin.\n\nI find coffeescript and the atom ecosystem to be a massive improvement over the various hacks that you need to get a working plugin in vim. Atom just brings the good parts forward :)\n. FWIW, the key resolver is very awesome, and vim mode is quite happy to work with it.\n\nThis could be a good workaround for ya'll, if you weren't doing this already:\n\nIn your keymap.cson\n\n```\n'.editor.vim-mode:not(.insert-mode)':\n  ': w enter': 'core:save'\n```\n\nAnd that's `:w` taken care of.\n\nSome of the other commands may require more creativity, however. Not sure what to do for `:%s` You could launch atom's native find and replace though, as a productive step:\n\n```\n'.editor.vim-mode:not(.insert-mode)':\n  ': w enter': 'core:save'\n  ': % s enter': 'find-and-replace:show'\n```\n\nAgain, not truly vim emulation, but it might be helpful to some for the time being.\n. :+1: This would be fantastic. :)\n. Heads up. I've got an implementation started [here](https://github.com/gepoch/surround). Pull requests are welcome :smiley: \n. Hey, same versions of everything.\n\nI think this bug may be more overreaching than just breaking \"g g\".\n\nI think something has gone a little haywire with the ambiguous keybinding resolver.\n\nSuppose you have two commands defined for vim mode: gt (pane:show-next-item) and gg (vim-mode:move-to-start-of-file)\n\nAnd you want to enter \"g t\" in order to go to the next pane.\n\nOpening the key binding resolver (ctrl-.) and hitting \"g\" reveals this:\n\n![screenshot from 2014-09-02 11 25 11](https://cloud.githubusercontent.com/assets/967166/4121714/d25779ae-32bd-11e4-9f1e-d47e8d739a8a.png)\n\nThis enters the (partial) state. Basically, an ambiguous command that needs more information before being resolveable.  \n\nNext you hit the \"t\". Instead of seeing the pane change command selected in the resolver, you get this:\n\n![screenshot from 2014-09-02 11 28 11](https://cloud.githubusercontent.com/assets/967166/4121752/20e6d65a-32be-11e4-842b-3877cd78ce9e.png)\n\nWhich indicates that the vim-mode:till command has been triggered, a command bound to a single \"t\".\n\n Something seems to be going wrong with the resolver. Instead of resolving the ambiguity with additional information, it's dumping the stack and starting over. \n\nThe implication is that there are many commands which are now failing due to a malfunctioning resolver (like all of the commands that my [vim-surround](https://github.com/gepoch/vim-surround) package defines...)\n. gg is working! I suspect there are some other issues in the key resolver, but I'll make a seperate ticket with more specific details :)\n. Ah! That bug definitely seems to cover this behavior!\n. #221 might be interesting to you!\n. @TeardropInc yeah. I come from a tradition of emacs, where this functionality is implemented in something called \"key-chord-mode\"\n\nThere are many names for it, because it's a good idea :) It's pretty hard to beat these combos for ease of access. I've learned to live without them because Atom is an awesome platform, but I still miss 'em.\n. My two cents :D\n\nvim-mode is not a vim emulator. If people want to be able to use their vimscripts in a modern UI, there are some projects that are targeting this (such as [neovim](https://github.com/neovim/neovim)) vim-mode's scope is mostly around getting the user interface to use modal control targeting vim's operation method.\n\nRather than trying to rewrite vim in javascript (which has actually already been [done](https://github.com/coolwanglu/vim.js)) I think a better way forward is to bring our favorite things about vim into atom. [vim-mode] does a huge portion of the work, and enables a familiar vim workflow. Beyond that, the atom ecosystem provides more options.\n\n[vim-surround](https://github.com/gepoch/vim-surround) (for example/shameless plug)  attempts to reproduce the functionality of the old vim-surround plugin, but in a way that integrates into the Atom environment nicely. Atom's vim-mode was extended using Atom's ideas for what makes a plugin.\n\nI find coffeescript and the atom ecosystem to be a massive improvement over the various hacks that you need to get a working plugin in vim. Atom just brings the good parts forward :)\n. ",
    "jameydeorio": "This is the only issue keeping me from using Atom\n. This is the only issue keeping me from using Atom\n. ",
    "Tsarpf": "+1 This is the main thing that makes me not want to use Atom. I want :commands.\n\n...But cool that finally someone has started working on the ex-mode.\n\nEDIT: ok this means finding with /this doesn't work either. Also the ctrl+f thingy is bugged when used with vim. This works really horribly :(  \n\nEDIT2: okay, this page https://github.com/atom/vim-mode/blob/master/docs/motions.md says / should work. Nothing happens for me from it though.\n\nEDIT3: okay even $ doesn't work for me (for moving to the end of a line). Maybe it's a keyboard layout issue. Dunno. I guess I'll just stop trying to use vim with this.\n. +1 This is the main thing that makes me not want to use Atom. I want :commands.\n\n...But cool that finally someone has started working on the ex-mode.\n\nEDIT: ok this means finding with /this doesn't work either. Also the ctrl+f thingy is bugged when used with vim. This works really horribly :(  \n\nEDIT2: okay, this page https://github.com/atom/vim-mode/blob/master/docs/motions.md says / should work. Nothing happens for me from it though.\n\nEDIT3: okay even $ doesn't work for me (for moving to the end of a line). Maybe it's a keyboard layout issue. Dunno. I guess I'll just stop trying to use vim with this.\n. ",
    "webduvet": ": commands are essential.\nSimply life is not possible without them.\nAtom is nice, fancy, great, has a lot of potential and I'm sure I could love it. (with :)\n. : commands are essential.\nSimply life is not possible without them.\nAtom is nice, fancy, great, has a lot of potential and I'm sure I could love it. (with :)\n. ",
    "flyingfisch": "ex-mode now supports `:s` as well. Could we add a link to ex-mode in the readme?\n. @bronson yeah after i posted here i thought i would just do it the github way ;)\n. Line breaks are gone. ;)\n. ex-mode now supports `:s` as well. Could we add a link to ex-mode in the readme?\n. @bronson yeah after i posted here i thought i would just do it the github way ;)\n. Line breaks are gone. ;)\n. ",
    "audreyt": "Interesting. Here `dj` and `dk` deletes the currently line in addition to the below/above line, hence 2 lines.\n\nhttp://guckes.net/vimberlin/small_commands.txt has:\n\n```\ndelete current and next/previous line:\n    dj dk\n```\n\nhttps://github.com/shawncplus/vim-classes/blob/master/expert-1.md has:\n\n```\n    dj  - delete current and next line (j = down)\n```\n\nIn the current Atom vim mode, it correctly deletes the line above/below but not the current one.\n. Interesting. Here `dj` and `dk` deletes the currently line in addition to the below/above line, hence 2 lines.\n\nhttp://guckes.net/vimberlin/small_commands.txt has:\n\n```\ndelete current and next/previous line:\n    dj dk\n```\n\nhttps://github.com/shawncplus/vim-classes/blob/master/expert-1.md has:\n\n```\n    dj  - delete current and next line (j = down)\n```\n\nIn the current Atom vim mode, it correctly deletes the line above/below but not the current one.\n. ",
    "jabagawee": "As of vim-mode v0.8.0, `dj` and `dk` do the equivalent of `vjd` and `vkd`, which are way off since that won't even delete an entire line.\n. Just to clarify #2 in @dougblack's comment, prepending `r` with the number of characters to replace fails when that number of characters would exceed the end of the line.\n. As of vim-mode v0.8.0, `dj` and `dk` do the equivalent of `vjd` and `vkd`, which are way off since that won't even delete an entire line.\n. Just to clarify #2 in @dougblack's comment, prepending `r` with the number of characters to replace fails when that number of characters would exceed the end of the line.\n. ",
    "fotanus": "Can we close this one?\n. I'm using Linux in a non-US keyboard :-D\n\nAs I said, I'm new to Atom, so if you need more info let me know.\nSince you are surprised, I'll try to find why this things are not working tomorrow after study a bit the vim mode code.\n. :+1: Thanks for the info! I'll see what I can do tomorrow and get back to you.\n. I was reading about debug keybindings and [found the tip](http://jbranchaud.github.io/splitting-atoms/TipsAndTricks.html#DebuggingKeybindings) to show the key binding resolver.\n\nit seems that my keys are resolved correctly, but sometimes the vim mode don't have enough precedence. For example, ctrl+r:\n\n![key bidings](http://i.imgur.com/E2nZ2iB.png)\n\n:w, by other hand, is handled as two key binds. That is why it not works. No matter how fast I press :w. You can see in this image:\n\n![key bidings](http://i.imgur.com/lnjfW7o.png)\n\nWhat is supposed to appear on the `:w` when working correctly?\n. Great! I'll try it to add the extra class soon.\n. Ok, so appending `.platform-linux .editor` did the trick.  The platform-linux class is set on body element for me.\n\nI think those classes were introduced to allow changing the keybindings and other behaviors to different platforms. You might want use this to have different keybindings for mac/windows/linux, or add a selector that matches with all platforms. \n\nI could do this to you, but I don't have a mac or windows to check if this works or not, and while I like unit testing, it is always better see it working as well.\n. @jamesgecko \n\nI have those alias on mine:\n\n```\n'.editor':\n  'ctrl-l': 'pane:show-next-item'\n  'ctrl-h': 'pane:show-previous-item'\n\n'.editor.vim-mode.command-mode:not(.insert-mode)':\n  ': A enter': 'rails-rspec:toggle-spec-file'\n  ': w enter': 'core:save'\n  ': q enter': 'core:close'\n\n  't r': 'rspec:run'\n  't e': 'rspec:run-for-line'\n  't l': 'rspec:run-last'\n  't a': 'rspec:run-all'\n```\n\nI didn't got what you need, but I think this might help you? :-)\n. Yeah, this post is way to old. If you say that isn't platform-specific bugs any longer, I'm happy closing it!\n. Cool, I'll write some tests and re-send this pull request.\nI think you are right about the visual mode, I'll have to check on this. \nI'm closing this one, send other soon.\n\n[]'s\n. And same thing for `*`\n. Hi there,\n\ncan you add a step-by-step on how to reproduce this bug? Thanks!\n. Right, lets close this\n. @isaachess thanks!\n. This is because gT needs the editor to be in command mode, however the settings tag don't have the class command-mode. Not sure if there is a problem of the element be a `div` instead of a 'atom-text-editor'?\n\n![image](http://i.imgur.com/MOYYrh2.png)\n\nSimply drop command-mode there is not an option, because there are writeable input fields there.\n. The redo is mapped as the core redo: [ 'ctrl-r': 'core:redo'](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L145)\n\nActually we also use the core:undo, as I pointed on #421. So the question here really is \"should we implement our own undo/redo system\"?\n. and if you are on insert mode, you can type the \">\" and \"<\" characters with the german keyboard?\n. So please close the bug, I can't :-)\n. That is weird. If you type <kbd>ctrl</kbd>+<kbd>.</kbd>, you can see what is being resolved in your keybindings. Can you take a look if is being resolved for vim-mode or for something else?\n. try <kbd>ctrl</kbd>+<kbd>w</kbd> and then <kbd>q</kbd>\n. @bhuga actually we have other `ctrl-w` keybinds, as you can read [on the keybinds file](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L64).\n\nThe delay also affects me, but I didn't complain because I thought it worked as expected. I defined a keybind `: q enter` and start closing this way.\n. I think this bug is related to the fact that on vim, after 'u' it ends on command mode, and on vim-mode it ends in visual mode with the text selected.\n\nOn vim:\n![on vim](http://i.imgur.com/e6CLWMz.gif)\n\nOn atom:\n![on atom](http://i.imgur.com/6Rhf4VX.gif)\n\nHowever, we are using the core undo to do this: ['u': 'core:undo'](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L144).\n\nShould we fix this by bringing the undo feature to vim-mode, or should we forget it?\n. This fixes it, but I don't know how to test?\n\n``` patch\ndiff --git a/lib/motions/general-motions.coffee b/lib/motions/general-motions.coffee\nindex 5e58879..e4b780d 100644\n--- a/lib/motions/general-motions.coffee\n+++ b/lib/motions/general-motions.coffee\n@@ -168,12 +168,16 @@ class MoveUp extends MoveVertically\n         range = selection.getBufferRange().copy()\n         if range.coversSameRows(@vimState.initialSelectedRange)\n           range.start.row--\n+          bufferPosition = {row: range.start.row, column: range.start.column}\n         else\n           if range.start.row < @vimState.initialSelectedRange.start.row\n             range.start.row--\n+            bufferPosition = {row: range.start.row, column: range.start.column}\n           else\n             range.end.row--\n+            bufferPosition = {row: range.end.row, column: range.end.column}\n\n+        @editor.scrollToBufferPosition(bufferPosition, {center: false})\n         selection.setBufferRange(range)\n       else\n         @editor.selectUp()\n@@ -196,10 +200,13 @@ class MoveDown extends MoveVertically\n         range = selection.getBufferRange().copy()\n         if range.start.row < @vimState.initialSelectedRange.start.row\n           range.start.row++\n+          bufferPosition = {row: range.start.row, column: range.start.column}\n         else\n           range.end.row++\n+          bufferPosition = {row: range.end.row, column: range.end.column}\n\n         selection.setBufferRange(range)\n+        @editor.scrollToBufferPosition(bufferPosition, {center: false})\n       else\n         @editor.selectDown()\n```\n\nThis patch is applied on [my branch](https://github.com/fotanus/vim-mode/tree/fix_scroll_on_visual_mode), if someone can help me to test it I much appreciate!\n. Can't reproduce. @Raynes, Can you please provide a step by step?\n\nOn vim:\n![on vim](http://i.imgur.com/Q9M6qH0.gif)\n\nOn atom:\n![on atom](http://i.imgur.com/rWOxDga.gif)\n. I'm actually using `V` [since it is already mapped](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L141). Of course it lacks many crucial features, but since it is there already at least to select code, I don't see why not merging this. It is helpful to select code line by line, and I wouldn't be surprise people would notice if we simply remove the current V mode support. What do you think?\n. Can we close this one?\n. I'm using Linux in a non-US keyboard :-D\n\nAs I said, I'm new to Atom, so if you need more info let me know.\nSince you are surprised, I'll try to find why this things are not working tomorrow after study a bit the vim mode code.\n. :+1: Thanks for the info! I'll see what I can do tomorrow and get back to you.\n. I was reading about debug keybindings and [found the tip](http://jbranchaud.github.io/splitting-atoms/TipsAndTricks.html#DebuggingKeybindings) to show the key binding resolver.\n\nit seems that my keys are resolved correctly, but sometimes the vim mode don't have enough precedence. For example, ctrl+r:\n\n![key bidings](http://i.imgur.com/E2nZ2iB.png)\n\n:w, by other hand, is handled as two key binds. That is why it not works. No matter how fast I press :w. You can see in this image:\n\n![key bidings](http://i.imgur.com/lnjfW7o.png)\n\nWhat is supposed to appear on the `:w` when working correctly?\n. Great! I'll try it to add the extra class soon.\n. Ok, so appending `.platform-linux .editor` did the trick.  The platform-linux class is set on body element for me.\n\nI think those classes were introduced to allow changing the keybindings and other behaviors to different platforms. You might want use this to have different keybindings for mac/windows/linux, or add a selector that matches with all platforms. \n\nI could do this to you, but I don't have a mac or windows to check if this works or not, and while I like unit testing, it is always better see it working as well.\n. @jamesgecko \n\nI have those alias on mine:\n\n```\n'.editor':\n  'ctrl-l': 'pane:show-next-item'\n  'ctrl-h': 'pane:show-previous-item'\n\n'.editor.vim-mode.command-mode:not(.insert-mode)':\n  ': A enter': 'rails-rspec:toggle-spec-file'\n  ': w enter': 'core:save'\n  ': q enter': 'core:close'\n\n  't r': 'rspec:run'\n  't e': 'rspec:run-for-line'\n  't l': 'rspec:run-last'\n  't a': 'rspec:run-all'\n```\n\nI didn't got what you need, but I think this might help you? :-)\n. Yeah, this post is way to old. If you say that isn't platform-specific bugs any longer, I'm happy closing it!\n. Cool, I'll write some tests and re-send this pull request.\nI think you are right about the visual mode, I'll have to check on this. \nI'm closing this one, send other soon.\n\n[]'s\n. And same thing for `*`\n. Hi there,\n\ncan you add a step-by-step on how to reproduce this bug? Thanks!\n. Right, lets close this\n. @isaachess thanks!\n. This is because gT needs the editor to be in command mode, however the settings tag don't have the class command-mode. Not sure if there is a problem of the element be a `div` instead of a 'atom-text-editor'?\n\n![image](http://i.imgur.com/MOYYrh2.png)\n\nSimply drop command-mode there is not an option, because there are writeable input fields there.\n. The redo is mapped as the core redo: [ 'ctrl-r': 'core:redo'](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L145)\n\nActually we also use the core:undo, as I pointed on #421. So the question here really is \"should we implement our own undo/redo system\"?\n. and if you are on insert mode, you can type the \">\" and \"<\" characters with the german keyboard?\n. So please close the bug, I can't :-)\n. That is weird. If you type <kbd>ctrl</kbd>+<kbd>.</kbd>, you can see what is being resolved in your keybindings. Can you take a look if is being resolved for vim-mode or for something else?\n. try <kbd>ctrl</kbd>+<kbd>w</kbd> and then <kbd>q</kbd>\n. @bhuga actually we have other `ctrl-w` keybinds, as you can read [on the keybinds file](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L64).\n\nThe delay also affects me, but I didn't complain because I thought it worked as expected. I defined a keybind `: q enter` and start closing this way.\n. I think this bug is related to the fact that on vim, after 'u' it ends on command mode, and on vim-mode it ends in visual mode with the text selected.\n\nOn vim:\n![on vim](http://i.imgur.com/e6CLWMz.gif)\n\nOn atom:\n![on atom](http://i.imgur.com/6Rhf4VX.gif)\n\nHowever, we are using the core undo to do this: ['u': 'core:undo'](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L144).\n\nShould we fix this by bringing the undo feature to vim-mode, or should we forget it?\n. This fixes it, but I don't know how to test?\n\n``` patch\ndiff --git a/lib/motions/general-motions.coffee b/lib/motions/general-motions.coffee\nindex 5e58879..e4b780d 100644\n--- a/lib/motions/general-motions.coffee\n+++ b/lib/motions/general-motions.coffee\n@@ -168,12 +168,16 @@ class MoveUp extends MoveVertically\n         range = selection.getBufferRange().copy()\n         if range.coversSameRows(@vimState.initialSelectedRange)\n           range.start.row--\n+          bufferPosition = {row: range.start.row, column: range.start.column}\n         else\n           if range.start.row < @vimState.initialSelectedRange.start.row\n             range.start.row--\n+            bufferPosition = {row: range.start.row, column: range.start.column}\n           else\n             range.end.row--\n+            bufferPosition = {row: range.end.row, column: range.end.column}\n\n+        @editor.scrollToBufferPosition(bufferPosition, {center: false})\n         selection.setBufferRange(range)\n       else\n         @editor.selectUp()\n@@ -196,10 +200,13 @@ class MoveDown extends MoveVertically\n         range = selection.getBufferRange().copy()\n         if range.start.row < @vimState.initialSelectedRange.start.row\n           range.start.row++\n+          bufferPosition = {row: range.start.row, column: range.start.column}\n         else\n           range.end.row++\n+          bufferPosition = {row: range.end.row, column: range.end.column}\n\n         selection.setBufferRange(range)\n+        @editor.scrollToBufferPosition(bufferPosition, {center: false})\n       else\n         @editor.selectDown()\n```\n\nThis patch is applied on [my branch](https://github.com/fotanus/vim-mode/tree/fix_scroll_on_visual_mode), if someone can help me to test it I much appreciate!\n. Can't reproduce. @Raynes, Can you please provide a step by step?\n\nOn vim:\n![on vim](http://i.imgur.com/Q9M6qH0.gif)\n\nOn atom:\n![on atom](http://i.imgur.com/rWOxDga.gif)\n. I'm actually using `V` [since it is already mapped](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L141). Of course it lacks many crucial features, but since it is there already at least to select code, I don't see why not merging this. It is helpful to select code line by line, and I wouldn't be surprise people would notice if we simply remove the current V mode support. What do you think?\n. ",
    "mythmon": "This seems fixed to me.\n. When this happens to me, clicking in the editor panel would bring the cursor back.\n. This seems fixed to me.\n. When this happens to me, clicking in the editor panel would bring the cursor back.\n. ",
    "watsoncj": "Verified this is fixed.\n. this fixes #365.\n\nany feedback or thoughts on the changes? \n. Verified this is fixed.\n. this fixes #365.\n\nany feedback or thoughts on the changes? \n. ",
    "shiftkey": ":thumbsup: \n. :thumbsup: \n. ",
    "nobuf": ":+1: \n. :+1: \n. ",
    "bashcoder": "I love this feature - so useful with vim motion commands.\n. Yes, that might allow for other vim compatibility fixes such as `daw`, `caw` and the like.\n. Another example is `ctX`, where \"X\" is the variable character marking the end of the change zone.\n. @colevoss - If I understand your question correctly, I think this very pull request shows a good example of how to do it: https://github.com/JosephKu/vim-mode/commit/26f607b24f8419ae12987e61734c375934eae746\n. Looks like this is addressed in PR #81, and is also addressed in issue #66.\n. Yes, this happens with capital 'V' in atom, where the selection starts at the cursor position. In other words, both 'v' and 'V' appear to operate identically in atom.\n\nThe correct vim behavior for 'V' would be visual line mode, where the entire line is selected.\n. Looks like it's addressed in PR #81\n. Have a look at #54 - they have a good strategy to put this into core.\n. Agreed - I love that command and use it all the time too. They are addressing this by working on the broader issue of implementing an operator-pending mode, which would allow for lots of these kinds of multi-letter commands. See #58.\n. I love this feature - so useful with vim motion commands.\n. Yes, that might allow for other vim compatibility fixes such as `daw`, `caw` and the like.\n. Another example is `ctX`, where \"X\" is the variable character marking the end of the change zone.\n. @colevoss - If I understand your question correctly, I think this very pull request shows a good example of how to do it: https://github.com/JosephKu/vim-mode/commit/26f607b24f8419ae12987e61734c375934eae746\n. Looks like this is addressed in PR #81, and is also addressed in issue #66.\n. Yes, this happens with capital 'V' in atom, where the selection starts at the cursor position. In other words, both 'v' and 'V' appear to operate identically in atom.\n\nThe correct vim behavior for 'V' would be visual line mode, where the entire line is selected.\n. Looks like it's addressed in PR #81\n. Have a look at #54 - they have a good strategy to put this into core.\n. Agreed - I love that command and use it all the time too. They are addressing this by working on the broader issue of implementing an operator-pending mode, which would allow for lots of these kinds of multi-letter commands. See #58.\n. ",
    "donut": "Lacking this is what is keeping me from giving Atom a proper try. I love my Sublime Text 3 and Vintageous. @probablycorey Is there anywhere we can track progress on this since it has moved to the core?\n\nEdit: I am crazy. The Atom issue was automatically linked to above.\n. Lacking this is what is keeping me from giving Atom a proper try. I love my Sublime Text 3 and Vintageous. @probablycorey Is there anywhere we can track progress on this since it has moved to the core?\n\nEdit: I am crazy. The Atom issue was automatically linked to above.\n. ",
    "TeffenEllis": "What is the status on this feature?\n. What is the status on this feature?\n. ",
    "brandonjmckay": ":+1:  Status?\n. :+1:  Status?\n. ",
    "janbaykara": "I've noticed that undo will often not group multiple changes by packages that are affected by a single command. Is this by design, or... ?\n. @jacekkopecky I remember https://atom.io/packages/autoclose-html + multiple cursors, then undoing, resulted in borks.\n\nAlso, https://atom.io/packages/atom-alignment cannot be undone - Undo simply ignores the fact that the plugin made changes.\n. I've noticed that undo will often not group multiple changes by packages that are affected by a single command. Is this by design, or... ?\n. @jacekkopecky I remember https://atom.io/packages/autoclose-html + multiple cursors, then undoing, resulted in borks.\n\nAlso, https://atom.io/packages/atom-alignment cannot be undone - Undo simply ignores the fact that the plugin made changes.\n. ",
    "graywh": "Sounds like Atom needs an operator-pending mode.\n. It's currently commented out\n\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L77\n\nin favor of using 0 as a count\n\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L47\n. Sounds like Atom needs an operator-pending mode.\n. It's currently commented out\n\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L77\n\nin favor of using 0 as a count\n\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L47\n. ",
    "keyneston": "In addition there is the `tX` and `fX` along with all of its variations: `dtX`, `yfX`, etc.\n. In addition there is the `tX` and `fX` along with all of its variations: `dtX`, `yfX`, etc.\n. ",
    "stuartmemo": "I'm happy to close this if someone wants to create a new ticket with a better description that incorporates all these things?\n. Have updated title to \"Implement operator-pending mode\".\n. Looks like there's a pull request in already for it - https://github.com/atom/vim-mode/pull/77\n. I'm happy to close this if someone wants to create a new ticket with a better description that incorporates all these things?\n. Have updated title to \"Implement operator-pending mode\".\n. Looks like there's a pull request in already for it - https://github.com/atom/vim-mode/pull/77\n. ",
    "jroes": "There is some semblance of operator pending going on with the `@complete` instance variable in operators.coffee, but I think an operator pending mode might make it more explicit and potentially simplify some code. [These](http://vimdoc.sourceforge.net/htmldoc/motion.html#operator) are the only operators vim officially considers operators - `c, d, y, ~, g~, gu, gU, !, =, gq, g?, >, <, zf, g@` I think operators.coffee has a few outliers that we might be able to move to commands.coffee.\n\nIf we ever want to implement those multi-character operators, I think we need to start doing [timeout](http://vimdoc.sourceforge.net/htmldoc/options.html#'timeout') stuff. It would actually be awesome if we had direct support for this in atom. For example, I've always bound `jk` to `Esc`, and binding `j k` in my local keymap causes issues in vim-mode :(.\n. I'm off to a slow start guys, this is a little challenging (but fun!) :)\n\nSo far what I've done:\n- I created a `TextObject` subclass of `Motion` for storing all of our new text objects, and an `InnerWord` subclass of `TextObject` that selects the current word under the cursor like vim's `iw`\n- I implemented an `operator-pending` mode that looks pretty much exactly like the other modes.\n- I copied a bunch of keymaps into the `operator-pending` mode map. This felt like a lot of duplication, maybe there is a better way to handle this.\n- I spent some time trying to see if I needed to make any changes to the meaty part of how the operator stack works. After a lot of toying around, I think I found that we are probably going to need this stack, but the name was confusing me a bit. I renamed several spots from `operator` to `operation` to better communicate that this is a stack of operations that are being performed, these operations may be operators, motions, text objects, or something else. The way I'm thinking of `opStack` is as an internal representation of something like \"d2w\". I documented this for future code spelunkers. I hope this is in line with the overall project vision.\n- I was able to bind `i w` on its own in `visual-mode` with no special help there since `i` isn't already bound. However, I noticed that in vim you can type `iw` a bunch of times in visual mode and it'll work like `w` after the first time. I was going to leave that as a future exercise outside of whatever pull request I make for `operator-mode`\n\nSo I think this is a small toe-dip in the waters. From here we should be able to implement `aw` and several other things simply because the mode has its own context for key bindings and won't interfere with the other bindings. I still think we are going to hit problems where we'll need timeouts though. Hopefully that gets into Atom sooner or later.\n\nHere's a compare for my current branch: https://github.com/jroes/vim-mode/compare/atom:master...jroes:operator-pending\n@mcolyer, everyone - what do you think, does this line up with your thinking? At this point all tests pass, so I could make a PR to stop this from turning into a really really big PR, and then we can all make some successive PRs for various text objects and things that should happen in `operator-pending` mode.\n. Oh, forgot to mention -- I'm actually not putting us into `operator-pending` mode for every valid operator yet. I thought it would be better to do that one at a time as we need it. Doing it all at once brings with it a ton of test failures that will take some time to dig through.\n. ping -- anyone have a chance to offer some feedback on my comments above?\n. Will do @bhuga. It has drifted a bit. I've rebased, but there are some test failures now that I'll have to look through and address.\n. Yep, we are working on text objects support! See #58\n. The more I work on operator-pending mode (#58) and compare to vim docs, the more I think that vim's implementation of the f and t motions is \u00a0based on a timeout-driven keybinding.\n\nI think we are approaching a point where we have to decide whether we want to diverge from the pure vim way and build our own pending modes or use other techniques to workaround timeout support in Atom.\n\nThat said, I think in this case the way vim implements this may also require some slightly more flexible keymapping abilities.\n\nI don't know if we particularly want to follow in every one of vim's footsteps, but I think if we don't try to emulate some of the overarching concepts we may be setting ourselves up for some tough challenges down the road. It's hard to tell.\n\nOn Sun, Mar 2, 2014 at 8:50 PM, Kevin Solorio notifications@github.com\nwrote:\n\n> I would really like to contribute to the f motion for vim-mode, since it is something I use often when coding.  I'm not sure the best way to get started.\n> I see there is the concept of prefix to capture an argument for the number of times something should occur, but this motion will require information that is trailing the command to work\n> \n> ## Any insights on how to approach this would be much appreciated.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/atom/vim-mode/issues/114\n. The timeout sounds imperfect, but honestly vim has been using this for ages and I never even realized it. I had _no_ idea and I always thought it was incredible, and fast. If someone would have first approached me with some sort of timeout concept without knowing vim already does it, I would have been like \"that sounds awful\" and I would just have vivid nightmares of hitting some keypresses and then waiting a few seconds for a timeout to expire so my command would execute.\n\nIn practice though, I've never had this problem in vim. Maybe others have a different experience.\n\nThat being said though, faced with the situation you mentioned, to play devil's advocate, `g` in the context of go to line is really `<prefix>g` where prefix is a number. `g` by itself does nothing. Is there something to be taken advantage of with that fact?\n\nAn idea occurred to me earlier - can we represent keypresses as nodes in an AST like programming languages are parsed into? And in that example, could we define terminal and non-terminal nodes? Maybe that's the holy grail solution?\n. @zenhob haha, I actually have always bound `jk` in vim now that I think of it. I may have tried `jj` first and realized the err of my ways.\n\n@nathansobo Ah nice! When I was working on operator-pending mode I started to realize that the mode abstraction may not even entirely be necessary given `opStack`. So I guess it wasn't a crazy idea after all. I think it's getting tldr'ed and/or lost in the mix, but you can see some progress over on #58.\n\nMy question for going full `opStack` is, would we then just want to handle all keypresses ourselves? I guess that would mean we'd have to sacrifice configurability/remapping, unless we use our own format.\n. @nathansobo I think from a purity of implementation standpoint that would be nearly ideal (I'm not even sure we'd need to restrict to .command-mode even). However, I think what we're going to end up with is a keybinding for every keypress, and potentially a lot of branching in each implementation. I don't necessarily think that's a problem.\n\nBut, I think this goes back to what I was mentioning earlier -- if we end up with a structure like that, does that mean that users can no longer map things themselves? They could certainly remap some individual key not in use by vim, but they wouldn't be able to bind very much on their own. A good example is the `jk` as escape thing. They'd have to fork vim-mode to implement `jk` because we'd take over handling `j` before they had the chance. Now, that doesn't mean they can't map things themselves, it just means they'd have to map things in some special vim-mode format that we'd have to expose a configuration for. I think.\n. I'm not a vim expert, but I think vim only lets you map keys to other keys:\n\nFor example, the way I map `jk` is `map jk <Esc>`. You can also do something like `map ab :echo 'hello'<CR>`\n\nI agree, I don't think we want to put ourselves in a position where we are implementing vim entirely through keymaps. And we certainly can't in core's current state. So if we don't implement vim that way, what are our options?\n\nThe first option that comes to mind is to simply overtake key mapping entirely within vim-mode's code. If we handle all keystrokes, we should be able to push things into the `opStack` and attempt to evaluate after each press. The downside will be that we need to provide a new keymap format in vim-mode if we want users to be able to change any mappings.\n\nIs there prior art in some other editor (Sublime Text) that might give us clues to another implementation option?\n. @nathansobo That was awesome, thanks for bringing some clarity to the situation!\n\nAre you suggesting that we implement the delay within vim-mode, or would there be some new functionality in Atom's keymap code itself?\n\nYou mentioned earlier that you thought we wouldn't want to put all of vim into keymaps, will this allow us to avoid that, or are you thinking it's pretty unavoidable?\n. @mcolyer @bhuga based on the discussion in #129 do you guys think it's worthwhile to see this through to its conclusion?\n. @nathansobo totally good with me. sorry I haven't had a chance to devote more time to it!\n. Loving the organized and refactored keybindings, btw.\n. Yeah! Lovin' it. Glad you decided to continue on the clarity train with `operation` btw.\n. I'm a big fan of this plugin too. Is there any reason we can't create a vim-surround analogue for atom's vim-mode in a separate plugin though?\n. There is some semblance of operator pending going on with the `@complete` instance variable in operators.coffee, but I think an operator pending mode might make it more explicit and potentially simplify some code. [These](http://vimdoc.sourceforge.net/htmldoc/motion.html#operator) are the only operators vim officially considers operators - `c, d, y, ~, g~, gu, gU, !, =, gq, g?, >, <, zf, g@` I think operators.coffee has a few outliers that we might be able to move to commands.coffee.\n\nIf we ever want to implement those multi-character operators, I think we need to start doing [timeout](http://vimdoc.sourceforge.net/htmldoc/options.html#'timeout') stuff. It would actually be awesome if we had direct support for this in atom. For example, I've always bound `jk` to `Esc`, and binding `j k` in my local keymap causes issues in vim-mode :(.\n. I'm off to a slow start guys, this is a little challenging (but fun!) :)\n\nSo far what I've done:\n- I created a `TextObject` subclass of `Motion` for storing all of our new text objects, and an `InnerWord` subclass of `TextObject` that selects the current word under the cursor like vim's `iw`\n- I implemented an `operator-pending` mode that looks pretty much exactly like the other modes.\n- I copied a bunch of keymaps into the `operator-pending` mode map. This felt like a lot of duplication, maybe there is a better way to handle this.\n- I spent some time trying to see if I needed to make any changes to the meaty part of how the operator stack works. After a lot of toying around, I think I found that we are probably going to need this stack, but the name was confusing me a bit. I renamed several spots from `operator` to `operation` to better communicate that this is a stack of operations that are being performed, these operations may be operators, motions, text objects, or something else. The way I'm thinking of `opStack` is as an internal representation of something like \"d2w\". I documented this for future code spelunkers. I hope this is in line with the overall project vision.\n- I was able to bind `i w` on its own in `visual-mode` with no special help there since `i` isn't already bound. However, I noticed that in vim you can type `iw` a bunch of times in visual mode and it'll work like `w` after the first time. I was going to leave that as a future exercise outside of whatever pull request I make for `operator-mode`\n\nSo I think this is a small toe-dip in the waters. From here we should be able to implement `aw` and several other things simply because the mode has its own context for key bindings and won't interfere with the other bindings. I still think we are going to hit problems where we'll need timeouts though. Hopefully that gets into Atom sooner or later.\n\nHere's a compare for my current branch: https://github.com/jroes/vim-mode/compare/atom:master...jroes:operator-pending\n@mcolyer, everyone - what do you think, does this line up with your thinking? At this point all tests pass, so I could make a PR to stop this from turning into a really really big PR, and then we can all make some successive PRs for various text objects and things that should happen in `operator-pending` mode.\n. Oh, forgot to mention -- I'm actually not putting us into `operator-pending` mode for every valid operator yet. I thought it would be better to do that one at a time as we need it. Doing it all at once brings with it a ton of test failures that will take some time to dig through.\n. ping -- anyone have a chance to offer some feedback on my comments above?\n. Will do @bhuga. It has drifted a bit. I've rebased, but there are some test failures now that I'll have to look through and address.\n. Yep, we are working on text objects support! See #58\n. The more I work on operator-pending mode (#58) and compare to vim docs, the more I think that vim's implementation of the f and t motions is \u00a0based on a timeout-driven keybinding.\n\nI think we are approaching a point where we have to decide whether we want to diverge from the pure vim way and build our own pending modes or use other techniques to workaround timeout support in Atom.\n\nThat said, I think in this case the way vim implements this may also require some slightly more flexible keymapping abilities.\n\nI don't know if we particularly want to follow in every one of vim's footsteps, but I think if we don't try to emulate some of the overarching concepts we may be setting ourselves up for some tough challenges down the road. It's hard to tell.\n\nOn Sun, Mar 2, 2014 at 8:50 PM, Kevin Solorio notifications@github.com\nwrote:\n\n> I would really like to contribute to the f motion for vim-mode, since it is something I use often when coding.  I'm not sure the best way to get started.\n> I see there is the concept of prefix to capture an argument for the number of times something should occur, but this motion will require information that is trailing the command to work\n> \n> ## Any insights on how to approach this would be much appreciated.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/atom/vim-mode/issues/114\n. The timeout sounds imperfect, but honestly vim has been using this for ages and I never even realized it. I had _no_ idea and I always thought it was incredible, and fast. If someone would have first approached me with some sort of timeout concept without knowing vim already does it, I would have been like \"that sounds awful\" and I would just have vivid nightmares of hitting some keypresses and then waiting a few seconds for a timeout to expire so my command would execute.\n\nIn practice though, I've never had this problem in vim. Maybe others have a different experience.\n\nThat being said though, faced with the situation you mentioned, to play devil's advocate, `g` in the context of go to line is really `<prefix>g` where prefix is a number. `g` by itself does nothing. Is there something to be taken advantage of with that fact?\n\nAn idea occurred to me earlier - can we represent keypresses as nodes in an AST like programming languages are parsed into? And in that example, could we define terminal and non-terminal nodes? Maybe that's the holy grail solution?\n. @zenhob haha, I actually have always bound `jk` in vim now that I think of it. I may have tried `jj` first and realized the err of my ways.\n\n@nathansobo Ah nice! When I was working on operator-pending mode I started to realize that the mode abstraction may not even entirely be necessary given `opStack`. So I guess it wasn't a crazy idea after all. I think it's getting tldr'ed and/or lost in the mix, but you can see some progress over on #58.\n\nMy question for going full `opStack` is, would we then just want to handle all keypresses ourselves? I guess that would mean we'd have to sacrifice configurability/remapping, unless we use our own format.\n. @nathansobo I think from a purity of implementation standpoint that would be nearly ideal (I'm not even sure we'd need to restrict to .command-mode even). However, I think what we're going to end up with is a keybinding for every keypress, and potentially a lot of branching in each implementation. I don't necessarily think that's a problem.\n\nBut, I think this goes back to what I was mentioning earlier -- if we end up with a structure like that, does that mean that users can no longer map things themselves? They could certainly remap some individual key not in use by vim, but they wouldn't be able to bind very much on their own. A good example is the `jk` as escape thing. They'd have to fork vim-mode to implement `jk` because we'd take over handling `j` before they had the chance. Now, that doesn't mean they can't map things themselves, it just means they'd have to map things in some special vim-mode format that we'd have to expose a configuration for. I think.\n. I'm not a vim expert, but I think vim only lets you map keys to other keys:\n\nFor example, the way I map `jk` is `map jk <Esc>`. You can also do something like `map ab :echo 'hello'<CR>`\n\nI agree, I don't think we want to put ourselves in a position where we are implementing vim entirely through keymaps. And we certainly can't in core's current state. So if we don't implement vim that way, what are our options?\n\nThe first option that comes to mind is to simply overtake key mapping entirely within vim-mode's code. If we handle all keystrokes, we should be able to push things into the `opStack` and attempt to evaluate after each press. The downside will be that we need to provide a new keymap format in vim-mode if we want users to be able to change any mappings.\n\nIs there prior art in some other editor (Sublime Text) that might give us clues to another implementation option?\n. @nathansobo That was awesome, thanks for bringing some clarity to the situation!\n\nAre you suggesting that we implement the delay within vim-mode, or would there be some new functionality in Atom's keymap code itself?\n\nYou mentioned earlier that you thought we wouldn't want to put all of vim into keymaps, will this allow us to avoid that, or are you thinking it's pretty unavoidable?\n. @mcolyer @bhuga based on the discussion in #129 do you guys think it's worthwhile to see this through to its conclusion?\n. @nathansobo totally good with me. sorry I haven't had a chance to devote more time to it!\n. Loving the organized and refactored keybindings, btw.\n. Yeah! Lovin' it. Glad you decided to continue on the clarity train with `operation` btw.\n. I'm a big fan of this plugin too. Is there any reason we can't create a vim-surround analogue for atom's vim-mode in a separate plugin though?\n. ",
    "ElDeveloper": "Just adding a note about `vip` see #111.\n. Great will close this in favor of #58. Thanks!\n. Just adding a note about `vip` see #111.\n. Great will close this in favor of #58. Thanks!\n. ",
    "rogeriopvl": ":+1: \n. :+1: \n. Sure no problem. I'll close it :)\n. :+1: \n. :+1: \n. Sure no problem. I'll close it :)\n. ",
    "aliou": ":+1: \n. :+1: \n. ",
    "colevoss": "Does anyone have a good idea as to how to implement key bindings like gt or zz (letter letter)? I'm working on one and settling for modifier-letter.\n. Ah. Good call @bashcoder \nThanks\n. :+1: \n. Is there something that can be done to load underscore.js?\n. I've tried installing vim-mode 0.7 with `apm install vim-mode@0.7.0` and it returned with a 400 error: \"Unable to download https://www.atom.io/api/packages/vim-mode/versions/0.7.0/tarball: 400 Bad Request Repository inaccessible\". \n. You nailed it, @bjtitus \nUninstalling through the command line with `apm uninstall vim-mode` and then intsalling v 0.7.0 worked for me. After restarting Atom I was able to use vim-mode. I look forward to working with this and hopefully contributing.\n\nThanks guys.\n. Just saw that this is a duplicate of #48 \nSorry.\n. Does anyone have a good idea as to how to implement key bindings like gt or zz (letter letter)? I'm working on one and settling for modifier-letter.\n. Ah. Good call @bashcoder \nThanks\n. :+1: \n. Is there something that can be done to load underscore.js?\n. I've tried installing vim-mode 0.7 with `apm install vim-mode@0.7.0` and it returned with a 400 error: \"Unable to download https://www.atom.io/api/packages/vim-mode/versions/0.7.0/tarball: 400 Bad Request Repository inaccessible\". \n. You nailed it, @bjtitus \nUninstalling through the command line with `apm uninstall vim-mode` and then intsalling v 0.7.0 worked for me. After restarting Atom I was able to use vim-mode. I look forward to working with this and hopefully contributing.\n\nThanks guys.\n. Just saw that this is a duplicate of #48 \nSorry.\n. ",
    "JosephKu": "@mcolyer I've rebased and updated the document. Thanks!\n. @mcolyer I've rebased and updated the document. Thanks!\n. ",
    "fholgado": "I tried setting the some keymaps as follows:\n\n```\n'.vim-mode.visual-mode:not(.mini)':\n  'g g': 'core:select-to-top'\n  'G': 'core:select-to-bottom'\n```\n\nIn normal visual mode, those keymaps work great.\n\nIn linewise visual mode, `g g` does not work properly. Selecting to the end of file with `G` works ok, but selecting to the top with `g g` inhibits the same behavior as #99 where the current line is not selected. I wonder if this is related? Otherwise, seems like a pretty straightforward change!\n. This is a frustrating one for sure. Not quite sure what to make of what `selectUp()` should do. Seems like it should function the same as `selectDown()`.\n\nEDIT: cross-referencing #62 here, since it may be related.\n. Now that it's open source we can actually fix it! I don't think it was anything on the plugin side.\u00a0\u2014\nFed\n\nOn Wed, May 14, 2014 at 8:43 AM, Ben Lavender notifications@github.com\nwrote:\n\n> ## This is probably just an off-by-one error somewhere. This is a good little fix if someone is looking for a place to get in to contributing.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/atom/vim-mode/issues/99#issuecomment-43075075\n. Trying to get up to speed hacking on Atom. Getting this fixed up and will send a pull request soon!\n. Done!\n. I tried setting the some keymaps as follows:\n\n```\n'.vim-mode.visual-mode:not(.mini)':\n  'g g': 'core:select-to-top'\n  'G': 'core:select-to-bottom'\n```\n\nIn normal visual mode, those keymaps work great.\n\nIn linewise visual mode, `g g` does not work properly. Selecting to the end of file with `G` works ok, but selecting to the top with `g g` inhibits the same behavior as #99 where the current line is not selected. I wonder if this is related? Otherwise, seems like a pretty straightforward change!\n. This is a frustrating one for sure. Not quite sure what to make of what `selectUp()` should do. Seems like it should function the same as `selectDown()`.\n\nEDIT: cross-referencing #62 here, since it may be related.\n. Now that it's open source we can actually fix it! I don't think it was anything on the plugin side.\u00a0\u2014\nFed\n\nOn Wed, May 14, 2014 at 8:43 AM, Ben Lavender notifications@github.com\nwrote:\n\n> ## This is probably just an off-by-one error somewhere. This is a good little fix if someone is looking for a place to get in to contributing.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/atom/vim-mode/issues/99#issuecomment-43075075\n. Trying to get up to speed hacking on Atom. Getting this fixed up and will send a pull request soon!\n. Done!\n. ",
    "j-hannes": "Same counts for `dG` (delete lines until end of file)  and `dgg` (delete lines until beginning of file) btw., neither works.\n. Hum, might atom [0.97.0](https://github.com/atom/atom/releases/tag/v0.97.0) have fixed it?\n- Key bindings now properly recognized in Dvorak-Qwerty mode.\n- Various bindings that weren't recognized properly in Linux are now fixed.\n. Same counts for `dG` (delete lines until end of file)  and `dgg` (delete lines until beginning of file) btw., neither works.\n. Hum, might atom [0.97.0](https://github.com/atom/atom/releases/tag/v0.97.0) have fixed it?\n- Key bindings now properly recognized in Dvorak-Qwerty mode.\n- Various bindings that weren't recognized properly in Linux are now fixed.\n. ",
    "adamalbrecht": "Yeah, I'll take a look\n. +1 This bugs me all the time.\n. Yeah, I'll take a look\n. +1 This bugs me all the time.\n. ",
    "astericky": "Nevermind. I finally got it to work but I had to click the buttons exactly at the same time or it didn't split up the screen and I had to do try several times in a row to get it to work. This is just and FYI... \n. Nevermind. I finally got it to work but I had to click the buttons exactly at the same time or it didn't split up the screen and I had to do try several times in a row to get it to work. This is just and FYI... \n. ",
    "manlycode": "'V'\n\nOn Thu, Feb 27, 2014 at 6:40 PM, Matt Colyer notifications@github.comwrote:\n\n> @manlycode https://github.com/manlycode when you mean visual mode do\n> you mean 'v' or 'V'?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/66#issuecomment-36305930\n> .\n. 'V'\n\nOn Thu, Feb 27, 2014 at 6:40 PM, Matt Colyer notifications@github.comwrote:\n\n> @manlycode https://github.com/manlycode when you mean visual mode do\n> you mean 'v' or 'V'?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/66#issuecomment-36305930\n> .\n. ",
    "gosukiwi": "Is blockwise mode currently implemented? I can't seem to get it to work. \n. Is blockwise mode currently implemented? I can't seem to get it to work. \n. ",
    "thoradam": "Atom 0.60.0\nvim-mode 0.6.0\n\nOn 27 Feb 2014, at 16:57, Matt Colyer notifications@github.com wrote:\n\n> Which version of atom and vim-mode are you using?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Atom 0.60.0\nvim-mode 0.6.0\n\nOn 27 Feb 2014, at 16:57, Matt Colyer notifications@github.com wrote:\n\n> Which version of atom and vim-mode are you using?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "jagthedrummer": "+1 for making 0.7.0 the default.\n. +1 for making 0.7.0 the default.\n. ",
    "srir": "how do we update apm's package cache to the latest versions of packages? apm is only showing me v0.6.0 as installable\n. i believe (from a cursory look) that underscore.js isn't loaded (and vim-mode depends on it)\n. `_` is _supposed_ to be included in the `atom` object (returned from `require atom`). it's not there. we _can_ get at it by using\n\n```\n_ = require 'underscore-plus'\n```\n\nso that'd be a temporary fix. but i'm hesitant to commit that (because i'm guessing the atom devs are not a huge fan of hacks)\n. i actually think this issue is related to (#70), and we just need to update our vim-mode to version 0.7\n. like @colevoss, that doesn't seem to work (i'm unable to actually install 0.7.0 because of a 400 bad request)\n. how do we update apm's package cache to the latest versions of packages? apm is only showing me v0.6.0 as installable\n. i believe (from a cursory look) that underscore.js isn't loaded (and vim-mode depends on it)\n. `_` is _supposed_ to be included in the `atom` object (returned from `require atom`). it's not there. we _can_ get at it by using\n\n```\n_ = require 'underscore-plus'\n```\n\nso that'd be a temporary fix. but i'm hesitant to commit that (because i'm guessing the atom devs are not a huge fan of hacks)\n. i actually think this issue is related to (#70), and we just need to update our vim-mode to version 0.7\n. like @colevoss, that doesn't seem to work (i'm unable to actually install 0.7.0 because of a 400 bad request)\n. ",
    "alessioalex": "@mcolyer it's not working for me also. where can I see the version for vim-mode and how can I update it in case it's an old version.. ? thanks\n. Ah I see it's 0.6.0 in settings > vim-mode. How can I update it? \n. Figured out how to do it:\n\n```\napm uninstall vim-mode\napm install vim-mode@0.7.0\n```\n. @mcolyer it's not working for me also. where can I see the version for vim-mode and how can I update it in case it's an old version.. ? thanks\n. Ah I see it's 0.6.0 in settings > vim-mode. How can I update it? \n. Figured out how to do it:\n\n```\napm uninstall vim-mode\napm install vim-mode@0.7.0\n```\n. ",
    "jcurtis": "+1 for feature\nstill new to implementation\n. I messed up the history pretty bad trying to rebase so I made a new pull request at #112 \n. :pineapple: \n. @zenhob he's looking for suggestions on how to fix it\n. My bad this is a duplicate of #118 \n. This made the block cursor virtually invisible on lighter themes such as Atom Light.\n![screen shot 2014-03-04 at 2 19 53 pm](https://f.cloud.github.com/assets/206295/2324477/9cbd8a46-a3c9-11e3-8406-7df233d03409.png)\n. Ah! It must have been a core atom change that did that then. Thanks for the info.\n. Any feedback on this? \n. @nathansobo how's that? \n. :pineapple: \n\nThis is driving me nuts on Linux. \n. Having the same issue for a few days now. Atom 0.187.0 and vim-mode 0.38.0.\n\nUsing Yeti UI and Syntax theme if that helps any. \n. +1 for feature\nstill new to implementation\n. I messed up the history pretty bad trying to rebase so I made a new pull request at #112 \n. :pineapple: \n. @zenhob he's looking for suggestions on how to fix it\n. My bad this is a duplicate of #118 \n. This made the block cursor virtually invisible on lighter themes such as Atom Light.\n![screen shot 2014-03-04 at 2 19 53 pm](https://f.cloud.github.com/assets/206295/2324477/9cbd8a46-a3c9-11e3-8406-7df233d03409.png)\n. Ah! It must have been a core atom change that did that then. Thanks for the info.\n. Any feedback on this? \n. @nathansobo how's that? \n. :pineapple: \n\nThis is driving me nuts on Linux. \n. Having the same issue for a few days now. Atom 0.187.0 and vim-mode 0.38.0.\n\nUsing Yeti UI and Syntax theme if that helps any. \n. ",
    "ctbarna": ":+1: \n. :+1: \n. ",
    "t9md": "As reference, my folked vim-mode now support this.\nhttps://github.com/t9md/vim-mode/commit/4b206accd1cae0f60ebf6aa1016d4c9f2a69d56f\nCurrent official vim-mode's have minor bug(gU, gu, g~ operator won't move cursor in Vim).\n. Sorry for this mess, I didn't noticed this mess, just wanted to fix my commit log, sorry I should learn git.\n. Here is dirty hack to emulate visual-block-mode using Atom's native multi-cursor.\nNot perfect solution, but this cover basic visual-block use case for me.\n\nhttps://gist.github.com/t9md/736291fd22260b5c7de0\n. After I put above gist, I just started developing package and just released now.\n\n[vim-mode-visual-block](https://atom.io/packages/vim-mode-visual-block)\n\nThis is quick hack for about 4 hours, there must be a lot of spaces to improve but now I'm sleepy...\nAnyway, I haven't checked or used `column-select`, will check afterward.\n. I'm the author of vim-mode-visual-block package, for the people who interest to built-in visual-block to vim-mode natively.\n\nI built-in this feature into my [vim-mode-plus](https://atom.io/packages/vim-mode-plus) (forked vim-mode) package released this week.\nNOTE: This package includes many experimental feature not natively supported in Vim and break some compatibility with vim-mode(e.g. command-name, selector-scope etc..).\n. #695 include fix , and at merged related issue was closed. Maybe @maxbrunsfeld forgot to close this one?\n. For me, I'm currently not using vim-mode's search feature, and I also want to control everything with keyboard but atom's find-and-replace lack some of keyboard control feature, so I created following two package to complement this.\n- [isearch](https://atom.io/packages/isearch) incremental search package. Support smart case and save search history to vim-mode's search history(this means you can repeat isearch's search with vim-mode's `n`, `N`.). I map `/` and `?` to this package.\n- [project-find-navigation](https://atom.io/packages/project-find-navigation), this provide keyboard control  to result of project-find result(feature provided by find-and-replace package), you can work around found result with `j`, `k`(whichever keymap you configure).\n\nFor vim-mode's native search motion feature, I feel it need to be improve so that user don't have to search and try another tools. It should be natively good(But currently not. So use/created different package).\n. For reference.\nI also implemented this feature `ctrl-w HJKL` with my [paner](https://atom.io/packages/paner) package.\nFirst I tried simply replace root PaneAxis like this PR do, but didn't work.\nIt seem to OK for visually when first moving pane to very-righ/top/bottom/left, but following split operation won't reflect view(I mean further split operation won't split Pane any more).\n\nAlthough I need to investigate further, the approach I finally succeeded to achieve this feature is to copy whole original root PaneAxis and its child and use this copied paneAxis as child of newPaneAxis.\n\nSo, as same reason, I don't think this PR work as-is, does someone tried this PR?\n\nHere is [memo](https://github.com/t9md/atom-paner/blob/master/lib/main.coffee#L93-L111) after struggling to implement this feature.\n\n[copying original Root paneAxis](https://github.com/t9md/atom-paner/blob/master/lib/main.coffee#L122-L125)\n\n[copyRoot using copyPaneAxis recursively](https://github.com/t9md/atom-paner/blob/master/lib/main.coffee#L193-L207).\n\nThis feature is one of top feature I used to use in Vim.\nHope this feature is implemented vim-mode somehow.\n. > Several APIs about Pane have been integrated into Atom\n\nWhat API are you saying integrated?\nI want to know since I also want to implement this better way.\n\nBy the way when you created this PR? Could you split pane for pane which is moved to `very` far position further.\nIn my experience, If I simply replace paneAxis without copying it, it wont reflect further split action to UI.\n. @coolwanglu Thanks.\nI agree Atom core to provide API or command to make this operation more simpler.\nCurrently core still lack of API to achieve this operation. So need to improve further.\n. Sorry for this mess, I didn't noticed this mess, just wanted to fix my commit log, sorry I should learn git.\n. Currently `ip` and `ap` both work as `ip`. \nSo to be precicely, `ap` is still not implemented yet. \nI rarely use ap in Vim.\nI don't have motivation to implement `ap` for now, since I'm very new to Atom itself(about 2 week), and need very basic understanding of Atom itself and vim-mode architecture.\n. I only add spec for `ip`(inside-paragraph).\nI'm not sure I should add spec for `ap`(around-paragraph), since currently identical behavior to `ip`.\n. I myself don't need any keymap, I will replace `c-a`, `c-x` to new one by myself.\nBTW. I haven't edited SVG yet, but I agree current behavior is better in such situation.\nThis is greatly depending on language type and also formatting convention( whether put extra space  or not between `-` operator).\nI prefer configuration option and want to change based on language scope.\nBut if this is implemented as another command I'm still happy for that.\n. Thanks @jacekkopecky , for me, I tested your code by copy&paste, as @maxbrunsfeld said, explicit fallback wasn't necessary.\nIt might test(spec) related issue(since I didn't run spec) or your environment issue.\n\nAnyway thanks for this, and I hope this PR will be merged.\n. @bronson This is not same issue I talked on slack.\nI think its because of decoration is line-wise?\nSimply use style other than box I mean style without border.\n. My package clip-history do similar decoration to highlight pasted area. See gif anime of clip-history to check how its like.\n. I myself dont want to include these type of fancy feature to vim-mode core.\nMaybe it could be disabled by configuration but it increase lines of code and config options.\nLet vim-mode provide consistent event hook like onDidYank(callback) and callback passed range and text just yanked.\nAnd user use these hook in external vim-mode add-on package.\n. I like this kind of immediate feedback decoration( I always try to implement this user assisting decoration in my packages).\nBut if the more we add vim-mode this kind of decoration, the more core code complicated.\nAnd these preference is greatly vary from person to person, it sometimes become difficult to reach conclusion.\nSo hook is better for\n- keep core code simple\n- extensible for other package.\n\nSo I think we should open new Issue to discuss what type of hook(or event) is required.\nFor this topic, `onDidYank(callback)` and callback's argument should `calback({text, range})` \nand its event is fired on `y` family operation.\n. @bronson \nThanks for kind feedback.\nMy cursor-history package grown from when I wrote above issue and I feel my package is too big to write PR.\nI myself happy to use vim-mode and cursor-history independent and separately.\nAnd writing test spec for this type of package is very tough for me.\nSo for now, I'm not much motivated to write PR by myself.\n. Oh! thanks, I'm happy to hear that.\n. Why CI failed was first two was linting, but 3rd one is not because of code I added(stopped when downloading Atom release).\nSo I kick CI by making update and success CI with same code as failed one.\n\nSo hope give a look to this PR.\n. Thanks!\nComments in my PR was a little verbose, please modify or delete if you want.\nI wanted describe my intention at first.\n. Great work @jazzpi.\r\nFrom the very first release of vmp(about 2 years ago), adding vmp support into ex-mode was not difficult.\r\nBut as everyone already mentioned I myself don't need ex-mode, and another reason is I'm already overwhelmed as maintainer of vim-mode-plus.\r\n\r\nMost of OSS developers spend their FREE time to do something fun, something good for other developer and their user.\r\n\r\nIMO who use ex-mode should give big applause to creator of ex-mode @lloeki.\r\nAnd current maintainer @jazzpi.\r\n\r\nFor vim-mode-plus,  I couldn't start vim-mode-plus from scratch, it's just fork of already great vim-mode.\r\nSomeone who is not happy with my vim-mode-plus, can start another vim-mode-plus-plus if they want \ud83d\ude09 . Fore reference, I also implemented similar feature with [open-this](https://atom.io/packages/open-this), the diff of this PR is.\n1. Try every possible ext name using grammar's FileTypes array(it include ext name list per language).\n2. Try to open the file with same base name if it can't find appropriate file in 1.\n\nhttps://github.com/t9md/atom-open-this/blob/master/lib/main.coffee#L18-L24\n\nAnd not include opening URL.\n. My PR don't cover `v` then `>` issue. I'm not sure its actually bug.\nMy MacVim.app don't keep original cursor column when doing `v>`.\nMaybe its useful feature, but its not bug, kind of enhancement?\n\n```\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Apr 29 2015 20:38:11)\nMacOS X (unix) version\nIncluded patches: 1-712 \n```\n. Btw my PR now can cover simply changing `restorColumn` argument for activateNormalMode  in Yank Motion.\nBut its better another PR and make it optional with config.\n. To be explicit NOBUG for `v>`. BUG for `VV` or `V Esc`( for original subject of this issue), its covered by #814.\n. Maybe indent-object as name implies.\n. Its worth to know it was native Vim option, so that we incorrectly claiming is original vim-mode feature :smile: , thanks for clarifying this.\n. My operation to change part of multi selection.\nput cursor to `scanRange` and cmd-d(`find-and-replace:select-next`)  three times select three instance of `scanRange`, but problem is when I type `I` to enter Insert mode, cursor position won't be put where I want.\n\n``` coffeescript\n    startOfTrailingWhitespace = [scanRange.end.row, scanRange.end.column - 1]\n    @editor.scanInBufferRange /[ \\t]+$/, scanRange, ({range}) ->\n```\n\nBy using [vim-mode-visual-block](https://atom.io/packages/vim-mode-visual-block).\nOperation for above case is `cmd-d` three times, then `ctrl-v` then `I` to put cursors to head of each selections.\nThis usage of visual-block mode is not there in original Vim( since its not natively support multi-cursor) but work perfectly.\n\nHope this solve some situation you have.\n. When pressing `m` , input area is still shown on bottom area( not completely hidden ).\nI'm happy if complete solution is there, my PR is simply modifying style its can be done on user's style.less.\n\nBut merging this PR is no harm since its original intent is hide margin and outline.\n. > I'd probably see such visual tweaks as the domain of themes rather than packages\n\nI agree, but for vim-mode specific field its kind of domain vim-mode allow to modify it.\nIf search field want to respect UI theme is should use  separate editor form than f command at first.\n\nAnyway vim-mode's these helper input field need to be improved further than this quick PR.\nI want your PR merged quickly.\n\nThanks for a lot of improving to vim-mode always.\n. I'm now investigating, `moveSelectionLinewise` have some bug..\n. Issue  is cursor movement(cursor. is screenPosition wise but `moveSelectionLinewise` is bufferPosition wise.\nSo even if screen position was changed by `@moveCursor()` of  MoveUp or MoveDown motion, \n[this line](https://github.com/atom/vim-mode/blob/12c7df663c337bb2894718000caa1e77fe4656fb/lib/motions/general-motions.coffee#L61) won't care screenRow change.\n\nI quickly implemented fix on `@moveSelectionLinewise` method(counting screenRows and adjust count argument passed to `@moveCursor()` argument, but supporting count argument is not easy since current screenRow count while moving.\n\nSo the solution I'll try next is to make `moveCursor()` aware of screenRowCount in linewise motion.\n. I sent PR for fix this, but this PR need discussion.\n\nFirst of all other motions are currently not aware of diff of screenRow and bufferRow, so having same issue when line is softwrapped. e.g. `MoveToFirstCharacterOfLineAndDown`.\n\nTheoretically all motion which do linewise motion and using simple `cursor.moveDown()` or `cursor.moveUp()` have same isssue.\n\nPassing screenRowCount to `cursor.moveUp(screenRowCount)`, `cursor.moveDown(screenRowCount)` fix this un-awareness.\nBy this fix, also fix `dj`, `dk` of soft-wrapped line(maybe other `jk` depending motion).\n\nBut this fix have side effect.\nThis fix making normal `j`, `k` motion bufferLineWise.\nCurrently `j`, `k` is screenLineWise which is atom's default and equivalent to Vim's `gj`  and `gk`.\n\nHow should we handle this screenRow and bufferRow diff.\n. Finished this PR. Not adding spec, currently there is no test to detect this big behavior change.. need discussion further.\n. > \"Currently, vim-mode requires soft line wraps to be disabled\"\n\nI read this sentence before, but completely have forgotten! Thanks for noting that.\n\nI think we only need to take care of `gj` and `gk`. No `gh`, `gl` on Vim.\n\nHere is my TODO or plan for this patch.\n- review all motion assuming bufferline motion and update to use screencount unit as necessary\n- introduce gk gj new motion which work on screenLine unit\n- update keymap\n- add spec for these.\n- remove readme's sentence to disable softwrap\n\nThis patch got unfit of issue title, this is for removing limitation 'softwrap disabled required for vim-mode'.\n. @jacekkopecky Yes, I've also noticed this PR include bug.\nWe need to put cursor to column which is counted by head of buffer line.\nThis is not feature Atom provide, Atom always move cursor  screenPosition-wise.\n\nI noticed this is not easy change as I expected at first glance.\n\n> I suspect we should not use moveDown at all there, instead we should set the cursor's buffer position to its current column and its current row plus however many lines we want.\n\nMaybe..\n\nAtom itself have only screen line movement motion. So we need to add independent bufferLine movement.\nI want to follow Atom's way as much as possible and keep vim-mode thin layer on top of Atom.\nBut this change is not that.\nSo need further experiment and consideration this new implementation's impact might have to other vim-mode features.\n\nSo I'm in mood to stop this PR for now, and feeling I need to understand how cursor and motion implemented in Atom and vim-mode world.\n. Close just because it's too old and I cannot remember.\n. I fixed on my folked vim-mode, by restoring `goalColumn` after `cursor.moveRight()`, `cursor.moveLeft()` which is happened within `Motion.select()` method to adjust cursor position.  \nThis adjustment is needed to achieve visual-mode selection but side movement automatically clear the goalColumn of cursor, so we need to manually restore goalColum in case side-movement is internally happened in vim-mode.\n\nThe fix approach would be same on official vim-mode, but code is very different I can't PR as-is and won't, but I put this note(and linked my commit) for someone try to fix this issue in future.\n. I believe this issue is only apparent in visual linewise interactive operation.\nI described what is happening and fixed in my forked version of vim-mode.\n\nHope this information helps also for official vim-mode.\n\nhttps://github.com/t9md/atom-vim-mode-plus/issues/8#issuecomment-144291851\n. Nice feedback, @bronson thanks. your code is more practical especially for `computeStart` and `computeEnd` takes starting point.\n\nBtw currently each motion and textobj taking care of multi-cursor situation, I want this task to be taken over by some executor and letting each motion, textobj focus on simple task, this change make vim-mode more bug free and make it easier to add extra textobj, operator, motion.\n. And yes, extending Motion for TextObject is bad!\nThere should be  better solution, My brain seems exhausted by long thinking conceptually...\n. Agree and I strongly wanting this :+1: \nIt should work on most TextObject.\nThis simplify implementation of each TextObject.\nWith making multi cursor handling and around TextObject externalize, amount of code on each TextObject would be greatly reduced.\n. Updated, merged what @bronson pointed out.\nI need to try&error with actual vim-mode's code-base next.\n\nOne thing still in my mind, if TextObject's `computeStart` was named `searchStartPosition` its get resembling to Motion,  I still not get rid of 'TextObject is superset of Motion' concept, its could be make sense if we come up with appropriate name(like renaming TextObject to RangedMotion).\nBut I personally don't want this :smile: \n. @MarkusSN Yes I want multi cursor handling abstraction but downside if we go this approach, we no longer directly depend on utility functions Atom core provides such as `editor.setSelectedBufferRanges(@selections)`(this is the function work on multiple selections, we currently use these utility functions to ease multi-cursor handling).\n\n> Using the text objects for movement might not be as simple as defining a single getRange() function though. Consider the paragraph text object, where different ranges are selected depending on whether the cursor is between or inside paragraphs.\n\nI think `getRange()` strategy works in the example you explained above,  `TextObject.Paragraph` can determine(=search) start and endpoint from its initialPoint.\n\nSo its all about how each getStartPoint and getEndPoint be implemented.\n\n@bronson You'd better to use back tick for `@direction` for him :smile: \nMy code is aiming to be simple to explain concept(want to detached from implementation), but I know its definitely need `@direction` for Motion.\n\nIf we start proof of concept implementation, it consequently reveal detailed requirement for each objects.\n\nBy the way this is just thinking experiment without actual implementation, if we try to prove this concept, its inevitable to face a lot of difficult situation where these concept cannot be simply applied.\n\nSo to investigate further and for letting me teach vim-mode internal further, I've started [refactoring-experiment](https://github.com/t9md/vim-mode).\n. @jacekkopecky Thanks for comment on this.\nCurrent my strategy in my personal [refactoring experiment](https://github.com/t9md/vim-mode) is\n1. Let each MOT(Motion, TextObject, Operator), to answer its class\n   This is done by extending(inheriting) Base class and [include utility methods on Base class](https://github.com/t9md/vim-mode/blob/refactor-experiment/lib/vim-state.coffee#L18-L24).\n2. Next, [Make opStack to independent](https://github.com/t9md/vim-mode/blob/refactor-experiment/lib/operation-stack.coffee).\n3. Then, add [ `isPure` on Base](https://github.com/t9md/vim-mode/blob/refactor-experiment/lib/base.coffee) so that every TMO can respond if its pure TMO.\n   Pure means pure TMO that only return Range or Point.\n4. Then differentiate OperationStack's `@process` behavior by asking `operation.isPure()`.\n   By this way, I can gradually migrate or evaluate this new concept of TMO for specific TMO.\n\nI'm on 2, just before 3. Since I wanted to some cleanup before I start big change that need to be modify spec.\n\nI agree with you, this change is too big to start current version of vim-mode.\nMy intent is experiment and evaluate this new concept and build robust blue print for future extensibility.\n\nMy motivation is I want TMO be exposed as service for community package so that user can easily add custom TMO by calling `vimService.registerTextObject()` like methods.\n\nBut before exposing TMO, I myself want to make TMO spec concrete and easy to treat so that user not experiencing pain to develop their custom TMO or migrate their TMO package in future big change.\n. Sorry, just I thought long pending PR was not good, so I close.\nSince I don't have much motivation to push this PR.\nAfter I accumulated lot of this kind of refactoring and have time, then I will re-send PR.\n. I overlooked to cover `V` and `Esc` scenario. will cover soon\n. To conform with Vim's convention and the spec based on that, I added `restoreColumn` argument for `Yank` motion and `Indent`.\nBy setting it `false`, original column could be restored after yank, I like this behavior than original Vim's one.\nBut need discussion, and topic for another PR.\n. I verified spec fail without this change, and pass with this change.\n. > Please add a date to the generated report, and vim-mode package version,\n> and if possible also current git commit ID, so it's easy to see if the\n> report is up to date.\n\nWill do, I'm not sure for git commit ID, will try.\nCurrently the generated file will written to under `~/github/vim-mode/docs`, which will convenient to update docs without moving file.  \nBut if we add time, version, and commit ID, we'd better to write generated file to temporary file.\n\n> Would it be possible/useful to output as the first part a subclass tree\n> rather than an unordered list of subclass relationships?\n\nI couldn't understand above, how does it like? I want some example.\n. Now removed TOM-report.md itself from docs/ dir. since its now written under tmpdir.\nIf maintainer need to include report, he need to manually move under docs.\n\nBy the way, if this reflection utility be merged, I can add realtime opStack observation feature.  \nIts also helpful to new developer understand how vim-mode works whey they try to add new TOM.  \n. Its good idea to save non-named buiffer and let user choose where to save.\nFor orders hiararchy its possible but I don't have such motivation currently.\n\nThe independend Package idea is good, maybe me or other person introduce in future.\n\nMy motivation is to introduce opStack ovservation   feature on top of this introspection helper utility function  to help developer.\n\nIts already very useful to understand where to be fixed while refactoring in my refactor ecoeriment. I can directly spot what class operator is operate on when some operator throw error.\n. Updated first comment to fit to current implementation.\n\nHere is the summary of change from first PR.\n- Change command name `generate-reflection-report` to  `generate-introspection-report`.\n- Now table of content reflect inheritance hierarchy.\n- Most of code moved from `vim-state.cofee` to `introspection.coffee`.\n. Your example seem that command is executed separate process to statically analyze coffee source.\nBut my code is for **dynamically** introspect within vim-mode.\n\nThe main purpose of this addition is to add `osStack` observation(=debugging) feature to vim-mode on top of this introspection function.\nHere is the example output of opStack observation and explanation of how operation stack works.  \n[How Operation Stack works(for current official vim-mode)](https://github.com/t9md/vim-mode#how-operation-stack-worksfor-current-official-vim-mode)\n\nIts very useful to developer adding or refactoring vim-mode.  \n\nAlso this introspection report can be used to explain overall change between large commit by comparing to past report.\nHere is example when I [removed MotionWithInput](https://github.com/t9md/vim-mode/commit/0c7a4185ff4974ffe316459d8a98d2764057198d) intermediate class in my vim-mode folk.\n. I strongly :smile:  agree with @maxbrunsfeld.\nSwitching another mode **automatically** from insert-mode is very counter intuitive.\n. Number prefix uses keyboard event. And this event seem to be undefined in some platform.\nI hit this issue when I run spec via travis-CI for my forked vim-mode. This even happen for commit in the past.\n@maxbrunsfeld Could you retry spec for newest commit in the past from travis-CI dahboard?\n. @nathansobo \n\nI know `expandOverLine()`.\nBut I want method to select line which takes startRow and endRow as arguments.\n\nI could workaround by using utility method like below\nhttps://github.com/t9md/atom-vim-mode-plus/blob/master/lib/utils.coffee#L20-L25\n\nBefore selection.selectLine() was changed, I used selection.selectLine() for this purpose like below\n\n``` coffeescript\nfor row in [startRow, endRow]\n  selection.selectLine(row)\n```\n\nSo now I already have workaround for this change, I don't have strong opinion to revert for now.\n\nThanks\n. I understand the motivation to change this, so I think `selection.selectLine()` is OK as current implementation.\n\nHow about providing new `selection.selectBufferRowRange([startRow, endRow])` utility method?\nSince when selecting whole line, atom put range [[startRow, 0], [startRow+1, 0]], so I frequently use getBufferRowRange to get startRow and endRow, Im happy if  I can pass rowRange to select  arbitrary row.\n\nHere is example use case.\n\n``` coffeescript\n[startRow, endRow] = selection.getBufferRowRange()\nselection.selectBufferRowRange(startRow, endRow+10)\n```\n. Hey isn't this about vim-mode-plus' feature?\nIf so, this is vim-mode's repo, close this issue and reopen in vim-mode-plus's repo.\n. FYI guys, [vim-mode-plus](https://atom.io/packages/vim-mode-plus) (forked version of vim-mode) already support `highlightSearch` and highlight as you type (if you enable `incrementalSearch` config option) and more.\nDon't ask me why I started forked project, I've asked hundred times and put note on README.md for that :smile: \n. @maxbrunsfeld Maybe same issue I tackled in my vim-mode-plus, hope this info helps.\n https://github.com/t9md/atom-vim-mode-plus/issues/23\n. @bronson as my understanding this issue is report for the behavior 'cursor past last newline'.\n\nIf this is for about startofline option behavior, cursor position report is whether start of line OR firstchar of line.\n. This is not because of Atom core broken, it's because of Atom core changed to improve(It's always happen).\nUnderlying text-buffer package was updated on Atom v1.7.0, specifically editor.buffer.history stack changed it's representation of changes.\n\nSo `item.confirmChages` no longer works as like before.\n\nhttps://github.com/atom/vim-mode/blob/master/lib/vim-state.coffee#L456-L460\n\nTo fix that, essentially `TransactionBundler` in `operators/input.coffee` must be updated to correctly bundle bunch of changes from checkpoint you start `insert-mode`.\n\nFor people who cannot wait someone pick to fix this issue, other option is to try vim-mode-plus(fork of vim-mode) which I'm maintaining actively, this issue is already fixed when Atom v1.7.0 was released.\n. Here is the commit I fixed this issue in vim-mode-plus.\n\nhttps://github.com/t9md/atom-vim-mode-plus/commit/76b710260bc795aceee7d3a32c7a02cc18320a3a\n\nBut this can't directly be applied to vim-mode.\nI removed TransactionBundler far long before since it seems unnecessary for me.\n\nCode base is completely different, but if you really want to fix vim-mode, there is many hint in vim-mode-plus.\nI once interested to contribute directly to vim-mode and I did some of contribution. But now I dont want to spend same fix iteration for the issue I've already fixed in vim-mode-plus.\n. As reference, my folked vim-mode now support this.\nhttps://github.com/t9md/vim-mode/commit/4b206accd1cae0f60ebf6aa1016d4c9f2a69d56f\nCurrent official vim-mode's have minor bug(gU, gu, g~ operator won't move cursor in Vim).\n. Sorry for this mess, I didn't noticed this mess, just wanted to fix my commit log, sorry I should learn git.\n. Here is dirty hack to emulate visual-block-mode using Atom's native multi-cursor.\nNot perfect solution, but this cover basic visual-block use case for me.\n\nhttps://gist.github.com/t9md/736291fd22260b5c7de0\n. After I put above gist, I just started developing package and just released now.\n\n[vim-mode-visual-block](https://atom.io/packages/vim-mode-visual-block)\n\nThis is quick hack for about 4 hours, there must be a lot of spaces to improve but now I'm sleepy...\nAnyway, I haven't checked or used `column-select`, will check afterward.\n. I'm the author of vim-mode-visual-block package, for the people who interest to built-in visual-block to vim-mode natively.\n\nI built-in this feature into my [vim-mode-plus](https://atom.io/packages/vim-mode-plus) (forked vim-mode) package released this week.\nNOTE: This package includes many experimental feature not natively supported in Vim and break some compatibility with vim-mode(e.g. command-name, selector-scope etc..).\n. #695 include fix , and at merged related issue was closed. Maybe @maxbrunsfeld forgot to close this one?\n. For me, I'm currently not using vim-mode's search feature, and I also want to control everything with keyboard but atom's find-and-replace lack some of keyboard control feature, so I created following two package to complement this.\n- [isearch](https://atom.io/packages/isearch) incremental search package. Support smart case and save search history to vim-mode's search history(this means you can repeat isearch's search with vim-mode's `n`, `N`.). I map `/` and `?` to this package.\n- [project-find-navigation](https://atom.io/packages/project-find-navigation), this provide keyboard control  to result of project-find result(feature provided by find-and-replace package), you can work around found result with `j`, `k`(whichever keymap you configure).\n\nFor vim-mode's native search motion feature, I feel it need to be improve so that user don't have to search and try another tools. It should be natively good(But currently not. So use/created different package).\n. For reference.\nI also implemented this feature `ctrl-w HJKL` with my [paner](https://atom.io/packages/paner) package.\nFirst I tried simply replace root PaneAxis like this PR do, but didn't work.\nIt seem to OK for visually when first moving pane to very-righ/top/bottom/left, but following split operation won't reflect view(I mean further split operation won't split Pane any more).\n\nAlthough I need to investigate further, the approach I finally succeeded to achieve this feature is to copy whole original root PaneAxis and its child and use this copied paneAxis as child of newPaneAxis.\n\nSo, as same reason, I don't think this PR work as-is, does someone tried this PR?\n\nHere is [memo](https://github.com/t9md/atom-paner/blob/master/lib/main.coffee#L93-L111) after struggling to implement this feature.\n\n[copying original Root paneAxis](https://github.com/t9md/atom-paner/blob/master/lib/main.coffee#L122-L125)\n\n[copyRoot using copyPaneAxis recursively](https://github.com/t9md/atom-paner/blob/master/lib/main.coffee#L193-L207).\n\nThis feature is one of top feature I used to use in Vim.\nHope this feature is implemented vim-mode somehow.\n. > Several APIs about Pane have been integrated into Atom\n\nWhat API are you saying integrated?\nI want to know since I also want to implement this better way.\n\nBy the way when you created this PR? Could you split pane for pane which is moved to `very` far position further.\nIn my experience, If I simply replace paneAxis without copying it, it wont reflect further split action to UI.\n. @coolwanglu Thanks.\nI agree Atom core to provide API or command to make this operation more simpler.\nCurrently core still lack of API to achieve this operation. So need to improve further.\n. Sorry for this mess, I didn't noticed this mess, just wanted to fix my commit log, sorry I should learn git.\n. Currently `ip` and `ap` both work as `ip`. \nSo to be precicely, `ap` is still not implemented yet. \nI rarely use ap in Vim.\nI don't have motivation to implement `ap` for now, since I'm very new to Atom itself(about 2 week), and need very basic understanding of Atom itself and vim-mode architecture.\n. I only add spec for `ip`(inside-paragraph).\nI'm not sure I should add spec for `ap`(around-paragraph), since currently identical behavior to `ip`.\n. I myself don't need any keymap, I will replace `c-a`, `c-x` to new one by myself.\nBTW. I haven't edited SVG yet, but I agree current behavior is better in such situation.\nThis is greatly depending on language type and also formatting convention( whether put extra space  or not between `-` operator).\nI prefer configuration option and want to change based on language scope.\nBut if this is implemented as another command I'm still happy for that.\n. Thanks @jacekkopecky , for me, I tested your code by copy&paste, as @maxbrunsfeld said, explicit fallback wasn't necessary.\nIt might test(spec) related issue(since I didn't run spec) or your environment issue.\n\nAnyway thanks for this, and I hope this PR will be merged.\n. @bronson This is not same issue I talked on slack.\nI think its because of decoration is line-wise?\nSimply use style other than box I mean style without border.\n. My package clip-history do similar decoration to highlight pasted area. See gif anime of clip-history to check how its like.\n. I myself dont want to include these type of fancy feature to vim-mode core.\nMaybe it could be disabled by configuration but it increase lines of code and config options.\nLet vim-mode provide consistent event hook like onDidYank(callback) and callback passed range and text just yanked.\nAnd user use these hook in external vim-mode add-on package.\n. I like this kind of immediate feedback decoration( I always try to implement this user assisting decoration in my packages).\nBut if the more we add vim-mode this kind of decoration, the more core code complicated.\nAnd these preference is greatly vary from person to person, it sometimes become difficult to reach conclusion.\nSo hook is better for\n- keep core code simple\n- extensible for other package.\n\nSo I think we should open new Issue to discuss what type of hook(or event) is required.\nFor this topic, `onDidYank(callback)` and callback's argument should `calback({text, range})` \nand its event is fired on `y` family operation.\n. @bronson \nThanks for kind feedback.\nMy cursor-history package grown from when I wrote above issue and I feel my package is too big to write PR.\nI myself happy to use vim-mode and cursor-history independent and separately.\nAnd writing test spec for this type of package is very tough for me.\nSo for now, I'm not much motivated to write PR by myself.\n. Oh! thanks, I'm happy to hear that.\n. Why CI failed was first two was linting, but 3rd one is not because of code I added(stopped when downloading Atom release).\nSo I kick CI by making update and success CI with same code as failed one.\n\nSo hope give a look to this PR.\n. Thanks!\nComments in my PR was a little verbose, please modify or delete if you want.\nI wanted describe my intention at first.\n. Great work @jazzpi.\r\nFrom the very first release of vmp(about 2 years ago), adding vmp support into ex-mode was not difficult.\r\nBut as everyone already mentioned I myself don't need ex-mode, and another reason is I'm already overwhelmed as maintainer of vim-mode-plus.\r\n\r\nMost of OSS developers spend their FREE time to do something fun, something good for other developer and their user.\r\n\r\nIMO who use ex-mode should give big applause to creator of ex-mode @lloeki.\r\nAnd current maintainer @jazzpi.\r\n\r\nFor vim-mode-plus,  I couldn't start vim-mode-plus from scratch, it's just fork of already great vim-mode.\r\nSomeone who is not happy with my vim-mode-plus, can start another vim-mode-plus-plus if they want \ud83d\ude09 . Fore reference, I also implemented similar feature with [open-this](https://atom.io/packages/open-this), the diff of this PR is.\n1. Try every possible ext name using grammar's FileTypes array(it include ext name list per language).\n2. Try to open the file with same base name if it can't find appropriate file in 1.\n\nhttps://github.com/t9md/atom-open-this/blob/master/lib/main.coffee#L18-L24\n\nAnd not include opening URL.\n. My PR don't cover `v` then `>` issue. I'm not sure its actually bug.\nMy MacVim.app don't keep original cursor column when doing `v>`.\nMaybe its useful feature, but its not bug, kind of enhancement?\n\n```\nVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Apr 29 2015 20:38:11)\nMacOS X (unix) version\nIncluded patches: 1-712 \n```\n. Btw my PR now can cover simply changing `restorColumn` argument for activateNormalMode  in Yank Motion.\nBut its better another PR and make it optional with config.\n. To be explicit NOBUG for `v>`. BUG for `VV` or `V Esc`( for original subject of this issue), its covered by #814.\n. Maybe indent-object as name implies.\n. Its worth to know it was native Vim option, so that we incorrectly claiming is original vim-mode feature :smile: , thanks for clarifying this.\n. My operation to change part of multi selection.\nput cursor to `scanRange` and cmd-d(`find-and-replace:select-next`)  three times select three instance of `scanRange`, but problem is when I type `I` to enter Insert mode, cursor position won't be put where I want.\n\n``` coffeescript\n    startOfTrailingWhitespace = [scanRange.end.row, scanRange.end.column - 1]\n    @editor.scanInBufferRange /[ \\t]+$/, scanRange, ({range}) ->\n```\n\nBy using [vim-mode-visual-block](https://atom.io/packages/vim-mode-visual-block).\nOperation for above case is `cmd-d` three times, then `ctrl-v` then `I` to put cursors to head of each selections.\nThis usage of visual-block mode is not there in original Vim( since its not natively support multi-cursor) but work perfectly.\n\nHope this solve some situation you have.\n. When pressing `m` , input area is still shown on bottom area( not completely hidden ).\nI'm happy if complete solution is there, my PR is simply modifying style its can be done on user's style.less.\n\nBut merging this PR is no harm since its original intent is hide margin and outline.\n. > I'd probably see such visual tweaks as the domain of themes rather than packages\n\nI agree, but for vim-mode specific field its kind of domain vim-mode allow to modify it.\nIf search field want to respect UI theme is should use  separate editor form than f command at first.\n\nAnyway vim-mode's these helper input field need to be improved further than this quick PR.\nI want your PR merged quickly.\n\nThanks for a lot of improving to vim-mode always.\n. I'm now investigating, `moveSelectionLinewise` have some bug..\n. Issue  is cursor movement(cursor. is screenPosition wise but `moveSelectionLinewise` is bufferPosition wise.\nSo even if screen position was changed by `@moveCursor()` of  MoveUp or MoveDown motion, \n[this line](https://github.com/atom/vim-mode/blob/12c7df663c337bb2894718000caa1e77fe4656fb/lib/motions/general-motions.coffee#L61) won't care screenRow change.\n\nI quickly implemented fix on `@moveSelectionLinewise` method(counting screenRows and adjust count argument passed to `@moveCursor()` argument, but supporting count argument is not easy since current screenRow count while moving.\n\nSo the solution I'll try next is to make `moveCursor()` aware of screenRowCount in linewise motion.\n. I sent PR for fix this, but this PR need discussion.\n\nFirst of all other motions are currently not aware of diff of screenRow and bufferRow, so having same issue when line is softwrapped. e.g. `MoveToFirstCharacterOfLineAndDown`.\n\nTheoretically all motion which do linewise motion and using simple `cursor.moveDown()` or `cursor.moveUp()` have same isssue.\n\nPassing screenRowCount to `cursor.moveUp(screenRowCount)`, `cursor.moveDown(screenRowCount)` fix this un-awareness.\nBy this fix, also fix `dj`, `dk` of soft-wrapped line(maybe other `jk` depending motion).\n\nBut this fix have side effect.\nThis fix making normal `j`, `k` motion bufferLineWise.\nCurrently `j`, `k` is screenLineWise which is atom's default and equivalent to Vim's `gj`  and `gk`.\n\nHow should we handle this screenRow and bufferRow diff.\n. Finished this PR. Not adding spec, currently there is no test to detect this big behavior change.. need discussion further.\n. > \"Currently, vim-mode requires soft line wraps to be disabled\"\n\nI read this sentence before, but completely have forgotten! Thanks for noting that.\n\nI think we only need to take care of `gj` and `gk`. No `gh`, `gl` on Vim.\n\nHere is my TODO or plan for this patch.\n- review all motion assuming bufferline motion and update to use screencount unit as necessary\n- introduce gk gj new motion which work on screenLine unit\n- update keymap\n- add spec for these.\n- remove readme's sentence to disable softwrap\n\nThis patch got unfit of issue title, this is for removing limitation 'softwrap disabled required for vim-mode'.\n. @jacekkopecky Yes, I've also noticed this PR include bug.\nWe need to put cursor to column which is counted by head of buffer line.\nThis is not feature Atom provide, Atom always move cursor  screenPosition-wise.\n\nI noticed this is not easy change as I expected at first glance.\n\n> I suspect we should not use moveDown at all there, instead we should set the cursor's buffer position to its current column and its current row plus however many lines we want.\n\nMaybe..\n\nAtom itself have only screen line movement motion. So we need to add independent bufferLine movement.\nI want to follow Atom's way as much as possible and keep vim-mode thin layer on top of Atom.\nBut this change is not that.\nSo need further experiment and consideration this new implementation's impact might have to other vim-mode features.\n\nSo I'm in mood to stop this PR for now, and feeling I need to understand how cursor and motion implemented in Atom and vim-mode world.\n. Close just because it's too old and I cannot remember.\n. I fixed on my folked vim-mode, by restoring `goalColumn` after `cursor.moveRight()`, `cursor.moveLeft()` which is happened within `Motion.select()` method to adjust cursor position.  \nThis adjustment is needed to achieve visual-mode selection but side movement automatically clear the goalColumn of cursor, so we need to manually restore goalColum in case side-movement is internally happened in vim-mode.\n\nThe fix approach would be same on official vim-mode, but code is very different I can't PR as-is and won't, but I put this note(and linked my commit) for someone try to fix this issue in future.\n. I believe this issue is only apparent in visual linewise interactive operation.\nI described what is happening and fixed in my forked version of vim-mode.\n\nHope this information helps also for official vim-mode.\n\nhttps://github.com/t9md/atom-vim-mode-plus/issues/8#issuecomment-144291851\n. Nice feedback, @bronson thanks. your code is more practical especially for `computeStart` and `computeEnd` takes starting point.\n\nBtw currently each motion and textobj taking care of multi-cursor situation, I want this task to be taken over by some executor and letting each motion, textobj focus on simple task, this change make vim-mode more bug free and make it easier to add extra textobj, operator, motion.\n. And yes, extending Motion for TextObject is bad!\nThere should be  better solution, My brain seems exhausted by long thinking conceptually...\n. Agree and I strongly wanting this :+1: \nIt should work on most TextObject.\nThis simplify implementation of each TextObject.\nWith making multi cursor handling and around TextObject externalize, amount of code on each TextObject would be greatly reduced.\n. Updated, merged what @bronson pointed out.\nI need to try&error with actual vim-mode's code-base next.\n\nOne thing still in my mind, if TextObject's `computeStart` was named `searchStartPosition` its get resembling to Motion,  I still not get rid of 'TextObject is superset of Motion' concept, its could be make sense if we come up with appropriate name(like renaming TextObject to RangedMotion).\nBut I personally don't want this :smile: \n. @MarkusSN Yes I want multi cursor handling abstraction but downside if we go this approach, we no longer directly depend on utility functions Atom core provides such as `editor.setSelectedBufferRanges(@selections)`(this is the function work on multiple selections, we currently use these utility functions to ease multi-cursor handling).\n\n> Using the text objects for movement might not be as simple as defining a single getRange() function though. Consider the paragraph text object, where different ranges are selected depending on whether the cursor is between or inside paragraphs.\n\nI think `getRange()` strategy works in the example you explained above,  `TextObject.Paragraph` can determine(=search) start and endpoint from its initialPoint.\n\nSo its all about how each getStartPoint and getEndPoint be implemented.\n\n@bronson You'd better to use back tick for `@direction` for him :smile: \nMy code is aiming to be simple to explain concept(want to detached from implementation), but I know its definitely need `@direction` for Motion.\n\nIf we start proof of concept implementation, it consequently reveal detailed requirement for each objects.\n\nBy the way this is just thinking experiment without actual implementation, if we try to prove this concept, its inevitable to face a lot of difficult situation where these concept cannot be simply applied.\n\nSo to investigate further and for letting me teach vim-mode internal further, I've started [refactoring-experiment](https://github.com/t9md/vim-mode).\n. @jacekkopecky Thanks for comment on this.\nCurrent my strategy in my personal [refactoring experiment](https://github.com/t9md/vim-mode) is\n1. Let each MOT(Motion, TextObject, Operator), to answer its class\n   This is done by extending(inheriting) Base class and [include utility methods on Base class](https://github.com/t9md/vim-mode/blob/refactor-experiment/lib/vim-state.coffee#L18-L24).\n2. Next, [Make opStack to independent](https://github.com/t9md/vim-mode/blob/refactor-experiment/lib/operation-stack.coffee).\n3. Then, add [ `isPure` on Base](https://github.com/t9md/vim-mode/blob/refactor-experiment/lib/base.coffee) so that every TMO can respond if its pure TMO.\n   Pure means pure TMO that only return Range or Point.\n4. Then differentiate OperationStack's `@process` behavior by asking `operation.isPure()`.\n   By this way, I can gradually migrate or evaluate this new concept of TMO for specific TMO.\n\nI'm on 2, just before 3. Since I wanted to some cleanup before I start big change that need to be modify spec.\n\nI agree with you, this change is too big to start current version of vim-mode.\nMy intent is experiment and evaluate this new concept and build robust blue print for future extensibility.\n\nMy motivation is I want TMO be exposed as service for community package so that user can easily add custom TMO by calling `vimService.registerTextObject()` like methods.\n\nBut before exposing TMO, I myself want to make TMO spec concrete and easy to treat so that user not experiencing pain to develop their custom TMO or migrate their TMO package in future big change.\n. Sorry, just I thought long pending PR was not good, so I close.\nSince I don't have much motivation to push this PR.\nAfter I accumulated lot of this kind of refactoring and have time, then I will re-send PR.\n. I overlooked to cover `V` and `Esc` scenario. will cover soon\n. To conform with Vim's convention and the spec based on that, I added `restoreColumn` argument for `Yank` motion and `Indent`.\nBy setting it `false`, original column could be restored after yank, I like this behavior than original Vim's one.\nBut need discussion, and topic for another PR.\n. I verified spec fail without this change, and pass with this change.\n. > Please add a date to the generated report, and vim-mode package version,\n> and if possible also current git commit ID, so it's easy to see if the\n> report is up to date.\n\nWill do, I'm not sure for git commit ID, will try.\nCurrently the generated file will written to under `~/github/vim-mode/docs`, which will convenient to update docs without moving file.  \nBut if we add time, version, and commit ID, we'd better to write generated file to temporary file.\n\n> Would it be possible/useful to output as the first part a subclass tree\n> rather than an unordered list of subclass relationships?\n\nI couldn't understand above, how does it like? I want some example.\n. Now removed TOM-report.md itself from docs/ dir. since its now written under tmpdir.\nIf maintainer need to include report, he need to manually move under docs.\n\nBy the way, if this reflection utility be merged, I can add realtime opStack observation feature.  \nIts also helpful to new developer understand how vim-mode works whey they try to add new TOM.  \n. Its good idea to save non-named buiffer and let user choose where to save.\nFor orders hiararchy its possible but I don't have such motivation currently.\n\nThe independend Package idea is good, maybe me or other person introduce in future.\n\nMy motivation is to introduce opStack ovservation   feature on top of this introspection helper utility function  to help developer.\n\nIts already very useful to understand where to be fixed while refactoring in my refactor ecoeriment. I can directly spot what class operator is operate on when some operator throw error.\n. Updated first comment to fit to current implementation.\n\nHere is the summary of change from first PR.\n- Change command name `generate-reflection-report` to  `generate-introspection-report`.\n- Now table of content reflect inheritance hierarchy.\n- Most of code moved from `vim-state.cofee` to `introspection.coffee`.\n. Your example seem that command is executed separate process to statically analyze coffee source.\nBut my code is for **dynamically** introspect within vim-mode.\n\nThe main purpose of this addition is to add `osStack` observation(=debugging) feature to vim-mode on top of this introspection function.\nHere is the example output of opStack observation and explanation of how operation stack works.  \n[How Operation Stack works(for current official vim-mode)](https://github.com/t9md/vim-mode#how-operation-stack-worksfor-current-official-vim-mode)\n\nIts very useful to developer adding or refactoring vim-mode.  \n\nAlso this introspection report can be used to explain overall change between large commit by comparing to past report.\nHere is example when I [removed MotionWithInput](https://github.com/t9md/vim-mode/commit/0c7a4185ff4974ffe316459d8a98d2764057198d) intermediate class in my vim-mode folk.\n. I strongly :smile:  agree with @maxbrunsfeld.\nSwitching another mode **automatically** from insert-mode is very counter intuitive.\n. Number prefix uses keyboard event. And this event seem to be undefined in some platform.\nI hit this issue when I run spec via travis-CI for my forked vim-mode. This even happen for commit in the past.\n@maxbrunsfeld Could you retry spec for newest commit in the past from travis-CI dahboard?\n. @nathansobo \n\nI know `expandOverLine()`.\nBut I want method to select line which takes startRow and endRow as arguments.\n\nI could workaround by using utility method like below\nhttps://github.com/t9md/atom-vim-mode-plus/blob/master/lib/utils.coffee#L20-L25\n\nBefore selection.selectLine() was changed, I used selection.selectLine() for this purpose like below\n\n``` coffeescript\nfor row in [startRow, endRow]\n  selection.selectLine(row)\n```\n\nSo now I already have workaround for this change, I don't have strong opinion to revert for now.\n\nThanks\n. I understand the motivation to change this, so I think `selection.selectLine()` is OK as current implementation.\n\nHow about providing new `selection.selectBufferRowRange([startRow, endRow])` utility method?\nSince when selecting whole line, atom put range [[startRow, 0], [startRow+1, 0]], so I frequently use getBufferRowRange to get startRow and endRow, Im happy if  I can pass rowRange to select  arbitrary row.\n\nHere is example use case.\n\n``` coffeescript\n[startRow, endRow] = selection.getBufferRowRange()\nselection.selectBufferRowRange(startRow, endRow+10)\n```\n. Hey isn't this about vim-mode-plus' feature?\nIf so, this is vim-mode's repo, close this issue and reopen in vim-mode-plus's repo.\n. FYI guys, [vim-mode-plus](https://atom.io/packages/vim-mode-plus) (forked version of vim-mode) already support `highlightSearch` and highlight as you type (if you enable `incrementalSearch` config option) and more.\nDon't ask me why I started forked project, I've asked hundred times and put note on README.md for that :smile: \n. @maxbrunsfeld Maybe same issue I tackled in my vim-mode-plus, hope this info helps.\n https://github.com/t9md/atom-vim-mode-plus/issues/23\n. @bronson as my understanding this issue is report for the behavior 'cursor past last newline'.\n\nIf this is for about startofline option behavior, cursor position report is whether start of line OR firstchar of line.\n. This is not because of Atom core broken, it's because of Atom core changed to improve(It's always happen).\nUnderlying text-buffer package was updated on Atom v1.7.0, specifically editor.buffer.history stack changed it's representation of changes.\n\nSo `item.confirmChages` no longer works as like before.\n\nhttps://github.com/atom/vim-mode/blob/master/lib/vim-state.coffee#L456-L460\n\nTo fix that, essentially `TransactionBundler` in `operators/input.coffee` must be updated to correctly bundle bunch of changes from checkpoint you start `insert-mode`.\n\nFor people who cannot wait someone pick to fix this issue, other option is to try vim-mode-plus(fork of vim-mode) which I'm maintaining actively, this issue is already fixed when Atom v1.7.0 was released.\n. Here is the commit I fixed this issue in vim-mode-plus.\n\nhttps://github.com/t9md/atom-vim-mode-plus/commit/76b710260bc795aceee7d3a32c7a02cc18320a3a\n\nBut this can't directly be applied to vim-mode.\nI removed TransactionBundler far long before since it seems unnecessary for me.\n\nCode base is completely different, but if you really want to fix vim-mode, there is many hint in vim-mode-plus.\nI once interested to contribute directly to vim-mode and I did some of contribution. But now I dont want to spend same fix iteration for the issue I've already fixed in vim-mode-plus.\n. ",
    "dhiemstra": "Not sure if it's desired behaviour but why not save yank's in the OS' clipboard instead?\n. I was hoping to help out implementing this in the weekend.\n#138 looks like a good way to build this on, i'll wait for that one, thanks!\n. Not sure if it's desired behaviour but why not save yank's in the OS' clipboard instead?\n. I was hoping to help out implementing this in the weekend.\n#138 looks like a good way to build this on, i'll wait for that one, thanks!\n. ",
    "bjtitus": "I can confirm that updating to 0.7.0 worked for me. Quick steps just in case:\n`apm uninstall vim-mode`\n`apm install vim-mode@0.7.0`\n\nThis can be closed but I want to make sure @colevoss is up and running as well.\n. There's definitely something weird going on with the package manager. The site shows 0.6.0 as the latest version and that it was updated very recently: http://atom.io/packages/vim-mode\n\nMight help for someone to re-publish 0.7.0 \n\nIt might be that atom.io is just having problems. I've noticed that I often can't login or pages will stop loading when navigating around the site.\n. This was also a duplicate of #69. My mistake\n. I can confirm that updating to 0.7.0 worked for me. Quick steps just in case:\n`apm uninstall vim-mode`\n`apm install vim-mode@0.7.0`\n\nThis can be closed but I want to make sure @colevoss is up and running as well.\n. There's definitely something weird going on with the package manager. The site shows 0.6.0 as the latest version and that it was updated very recently: http://atom.io/packages/vim-mode\n\nMight help for someone to re-publish 0.7.0 \n\nIt might be that atom.io is just having problems. I've noticed that I often can't login or pages will stop loading when navigating around the site.\n. This was also a duplicate of #69. My mistake\n. ",
    "abronte": ":thumbsup: \n. :thumbsup: \n. ",
    "tyrelsouza": "That makes sense.\n. That makes sense.\n. ",
    "alindeman": ":sparkles:\n. :sparkles:\n. ",
    "mrmurphy": "Thanks for fixing these issues and publishing the fixes so quickly! You all are amazing.\n. I haven't been able to get this to work. I'm running Atom 0.120.0 with vim-mode 0.12.0 on a Yosemite beta.\n\nI select a block of text in visual mode, and then I type `\"*`, and nothing gets added to the clipboard. I also tried `\"\"`. Is there a way to enable debug statements in the plugin to see what's going on?\n. @neiled Funny, I was just about to take another crack at this myself. I started a while back, but got all hung up on handling cases where `<` and `>` are used inside tags, but aren't tags themselves. But honestly, I'd much rather have the feature since it works in most cases than worry about that edge case.\n. Also, super great profile picture :+1: \n. Thanks for fixing these issues and publishing the fixes so quickly! You all are amazing.\n. I haven't been able to get this to work. I'm running Atom 0.120.0 with vim-mode 0.12.0 on a Yosemite beta.\n\nI select a block of text in visual mode, and then I type `\"*`, and nothing gets added to the clipboard. I also tried `\"\"`. Is there a way to enable debug statements in the plugin to see what's going on?\n. @neiled Funny, I was just about to take another crack at this myself. I started a while back, but got all hung up on handling cases where `<` and `>` are used inside tags, but aren't tags themselves. But honestly, I'd much rather have the feature since it works in most cases than worry about that edge case.\n. Also, super great profile picture :+1: \n. ",
    "maxbrunsfeld": "Sorry for leaving this be for so long, everybody.\n. You're right @trkoch; I'm sorry, not quite fixed yet!\n. @trkoch, can you try it with version 0.19.0? I believe it is now really fixed.\n. I don't know of a quick way, but it would be very easy to write a package that did so! To activate a package programmatically, you just need to do this:\n\n``` javascript\natom.packages.activatePackage(\"vim-mode\")\natom.packages.deactivatePackage(\"vim-mode\")\n```\n. Not that I know of, but it would be easy to write one. See the [PackageManager](https://atom.io/docs/api/latest/PackageManager#) docs.\n. @romgrk I would be open to a PR for this, but since it is a big change, I'd prefer that you maintain it as a separate package for a little while. Is your package published? If so, maybe some people participating in this thread would like to give it a try, or help you develop it!\n. This one gets a :+1: from me too.\n. Cosed via #450. :fireworks: :dancers:\n. We've fixed this bug. In the next Atom release (v1.0.3), you'll just have to do this:\n\n``` coffee\n'atom-text-editor.vim-mode.insert-mode':\n  'j j': 'vim-mode:activate-normal-mode'\n```\n. I think this works now. Let me know if you still have problems with it.\n. @techniq thanks, I see. So currently, `.` is not bound in visual mode. Do you all think that the proper solution would be to add a `.` binding in visual mode?\n. Yeah, I actually like the fact that it stays in visual mode right now; it's kind of convenient. That said, I'm open to changing it to be more like vim if it's the only way to make the repeating use case work.\n. > not adhering to vim's default behaviour here also breaks undoing block operations with 'u'.\n\nThanks for pointing that out @flannelhead. I can see how that sequence would be an important part of someone's muscle memory.\n\nI think we should make it work like vim. If you want to indent lines and stay in visual mode, you can always use Atom's built-in indentation bindings, `Tab` and `Shift-Tab`, or `cmd-]` and `cmd-[`. I'd definitely merge a PR changing this. It would basically amount to reverting this previous PR: https://github.com/atom/vim-mode/pull/368.\n. I believe this is fixed. Please report if it's still a problem.\n. I think this is fixed via #477.\n. I believe this has been fixed. Please let me know if you're still having issues with these commands. Thanks!\n. I can't reproduce this. Can you upgrade to the latest Atom and vim-mode release and try again? What OS are you on? Thanks!\n. I believe this is fixed via #477.\n. Hey all, I know there was some controversy on this. I implemented it because I feel like it's worth trying out for a while. Now that multiple cursors work properly, this behavior makes vim-mode compose really nicely with the `Find and Replace: Select Next` command. I'm thinking that this will allow for nice interplay with other packages that select text too. Previously, selecting text in command mode resulted in a strange experience in my opinion.\n. I believe this was fixed by #477.\n. Can you upgrade to the latest Atom and `vim-mode` and report whether or not this problem still occurs?\n. It sounds like the original question is answered, so I'm going to close this.\n. Sorry for leaving this unanswered for so long. Let me know if you find issues with the new behavior.\n. Can you upgrade to the latest Atom and vim-mode and try again? If there is still a problem, can you open a new issue describing it specifically. I'm going to close this since the original issue is fixed. Thanks!\n. Closing in favor of #468. Visual block mode is not yet implemented.\n. I think this is fixed via atom/atom#9937. It will be out in Atom versions 1.4.0 and 1.4.0-beta0.\n. We're planning on fixing this issue with the core key-mapping system (so that you can just do `j j: 'vim-mode:activate-normal-mode'`) as part of our big bug-fixing effort this month: https://github.com/atom/atom/issues/7995.\n. We've finally fixed this bug. In the next Atom release (v1.0.3), you'll just have to do this:\n\n``` coffee\n'atom-text-editor.vim-mode.insert-mode':\n  'j j': 'vim-mode:activate-normal-mode'\n```\n. I believe this was fixed via 33ec1f55a7e6f678ab059c8249e8197edbf7f736. There is still an issue on upgrading `vim-mode`, but this is captured in a more specific issue, #480.\n. Hey all, I'm going to close this, since some bugs in the undo behavior have been ironed out since it was opened. Please open a new issue if you find more problems with undo. Thanks!\n. I think this was fixed via #477.\n. Hey all, sorry for letting this languish. I believe that as of the next release, multi-cursor support will be pretty solid.\n. Closing this since it was fixed by @benmccormick's own PR, #419.\n. I believe this is fixed. Please let me know if there are still issues with it.\n. This deprecation has been removed.\n. Apologies for the late reply. I believe these are two separate issues. @txchen, I believe your criticism as the one raised in #346. @nicolaiskogheim - I believe the behavior describing is fixed as of bb0ccbefabc9906e09717fe0dcd60c21134686c1.\n. @sknoslo Thanks so much for noticing this; these tests were indeed totally broken. I've merged your fixes and then adapted most of the tests so that they pass now. We can always adjust the assertions if we want to change vim-mode's behavior to match vim's more exactly. One of the tests I had to mark pending because it checks for a vim behavior that we currently don't match at all (`dk` on the first line of the file).\n. I believe this currently works; I don't know when it was fixed though. Please let me know if there are still problems with it.\n. I believe this was fixed by #712.\n. Closing in favor of #586 because it was generated by the error notification system, so other users experiencing this error will be referred to that issue.\n. There's the status bar indicator that switches from `Insert` to `Command`. Would it help if this thing changed color?\n. @michaellenahan you're using a pretty old version of Atom. Try upgrading to 0.184.\n. Yeah, haven't heard back from @cocodrino or @bradleyflood. We can reopen if this is still a problem for you two.\n. All of these work now as far as I can tell. Can you upgrade to the latest Atom and the latest `vim-mode` and see if these problems still occur?\n. Does the pipe character represent the cursor? If so, yes all of these things work for me. Maybe post a gif?\n. @james147 what keyboard layout are you using? Maybe this is a keymap issue.\n. @james147, @javaguirre could you report what the keybinding-resolver shows for each keystroke of `ci(`?\n. Ok, I think this is a keymap problem. To reduce it further, could you try adding this to your `keymap.cson`?\n\n``` coffee\n'*':\n  '[': 'application:about'\n  ']': 'application:about'\n  '(': 'application:about'\n  ')': 'application:about'\n  '<': 'application:about'\n  '>': 'application:about'\n  '\"': 'application:about'\n  \"'\": 'application:about'\n```\n\nWith these mappings, all of these characters should cause the \"About\" dialog to appear. If it doesn't, could you open an issue on the [atom-keymap](https://github.com/atom/atom-keymap) repo?\n. @javaguirre, even the `(` key?\n. Does this key mapping work (with `vim-mode` disabled)?\n\n``` coffee\n'*':\n  'c i (': 'application:about'\n```\n. The key-map system _should_ handle perform matching on keydown events for modifier keys like `shift`, but there must be a bug. It could be specific to linux.\n. Hey all, sorry for the lack of attention to vim-mode. @johnhaley81, is the behavior still incorrect on the latest release? If so, can you describe the actual and expected behaviors again? The nature of the bug seems to have changed since this issue was first created. Thanks!\n. Ok, it seems like the original issue is resolved. Let's do a new issue if there are other problems with undo.\n. Fixed by #410.\n. Can you provide a more detailed explanation of the actual and expected behaviors?\n. I believe `ctrl-n` and `ctrl-p` work by default. You add `ctrl-j` and `ctrl-k` in your own personal config. Add this to your `keymap.cson`:\n\n``` coffee\n'.autocomplete atom-text-editor[mini]':\n  'ctrl-j': 'core:move-down'\n  'ctrl-k': 'core:move-up'\n```\n. @isaachess - as far as I can tell, your change fixes the cursor position for the following operations:\n- `y` in visual mode\n- `yiw` in normal mode\n\nand it breaks the cursor position for line-wise yanks.\n\nI'm ok with merging this and then re-fixing the behavior for line-wise yanks, but would you mind adding tests for the cases that you fixed? It looks like your only changes to the specs were adding `FIXMEs` for the cases that you broke. Thanks for surfacing these bugs.\n. Thanks @bronson. Closing this out.\n. This has been implemented in #547. It doesn't exactly match vim's behavior but it's pretty good.\n. @isaachess sounds great. Feel free to open an issue.\n. A pull request would be welcome!\n. Thanks!\n. @rstacruz can you upgrade to the latest Atom and `vim-mode` and report whether or not this still happens? Thanks.\n. I'm not sure what exactly caused this to regress, but the scroll commands are currently fragile because they're trying to scroll to an exact screen row by calling `editor.scrollToScreenPosition`, which is more for _revealing_ a given screen position, not specifying an exact scroll position. I'll update vim-mode to use the new `{get,set}FirstVisibleScreenRow` model APIs.\n. Thanks for catching this @dcalhoun. It should be fixed in vim-mode v0.64.\n. Thanks for catching this bug @theonlyulti!\n. Thanks!\n. Yeah, I agree that it's a great idea, but should probably be a different plugin. Atom's vim-mode interoperates with Atom's key-mapping and command systems, and can be customized through the same interface as the rest of Atom. @trusktr, it seems like you're talking about using Atom's UI as a front-end for Neovim. Also cool.\n. I'm going to close this; I think it could be interesting, but should definitely be a separate package.\n. Closing in favor of #441. Please help brainstorm about how we should ultimately solve this in that issue. Thanks!\n. @Xe this is an nice idea, but ultimately, if we implement any support for vim's command-mode, it will need to more like what @autochthe describes in #441. I'm closing this in favor of that issue for now. Thanks!\n. Closing, as @lloeki's [ex-mode](https://atom.io/packages/ex-mode) package fulfills this need.\n. I cannot reproduce this, but it sounds like it may be an issue with atom-core, not vim-mode. Possibly, linux-specific. Can you reproduce the behavior with other key mappings? Try this, for example:\n1. In the dev tools, run `atom.keymaps.add(\"test\", {\"body\": {\"ctrl-O ctrl-P\": \"core:confirm\" }})`\n2. Open the keybinding resolver\n3. Slowly type `ctrl`-`shift`-`o`, `ctrl`-`shift`-`p`\n4. Check whether `core:confirm` is resolved\n\nIf so, we should close this issue and re-open it in atom/atom.\n. Ok, I'm closing this since we've traced the problem to a bug in core, not this package. Thanks for catching this.\n. This is a duplicate of #412. I'll look into this one soon. Thanks!\n. Alright guys; I believe the changelog's up to date.\n. Duplicate of #219.\n. FYI, we're currently working on some changes in atom-core that will make it possible to fix this. Currently, autocomplete's use of transactions conflicts with vim-mode's.\n. Nice work!\n. Duplicate of #219. This is a really popular issue and annoys me too. It will be addressed soon. Thanks!\n. Thanks a lot @mdp and @kafunkajunk. A lot of people will be happy to see this fixed.\n. @xarsh, does this happen if you reload Atom after upgrading, or just the first time vim-mode is upgraded?\n. @xarsh, can you post the stack-trace when switching modes after reloading Atom? It looks like the one you posted above originates from uninstalling the old version of the package.\n. Ok, I'm going to close this issue. @falsandtru, if you are still having problems after upgrading Atom to the latest release, can you open another issue?\n. Reproduced.\n. I believe this is fixed as of 0.25. Let me know if there are still problems.\n. Closed by a55749e325f9fe4db88382cb7712b7cfb09702b7.\n. Thanks for pointing this out @dsandstrom. Let me know if you still see any issues with the styling after the latest release.\n. @dsandstrom, I believe that this is a bug in atom core. The problem appears to be intermittent. See atom/atom#4363. I'm going to close for now in favor of that issue.\n. I believe this is fixed as of 0.23. Let me know if you are still having issues.\n. @saidai-no, this is very cool. As  you mentioned, a package dependency mechanism has recently been introduced (atom/atom@99f91fac4864) and is currently in an experimental state. Over the next few weeks, we will be updating some of our core packages to use this new mechanism (see atom/status-bar#43 and atom/grammar-selector#12 for examples). We may make some adjustments to its API, but we intend to stabilize it soon.\n\nIf you are interested in adapting your PR to use the new API, we would love to hear feedback on it. If we do change the API in a way that breaks your code, I can even help you with updating the PR.\n\nThanks!\n. Most of this has been implemented in #540. Feel free to open new issues for adding to the API that has been introduced.\n. @urmyfaith - you should be able to `apm install vim-mode`.\n. Can you post the output of `apm install vim-mode`?\n. It looks like there was a problem with your internet connection. Can you retry, and if you get the same failure, run `GIT_CURL_VERBOSE=1 git clone https://github.com/Benvie/harmony-collections.git`?\n. How does this relate to `vim-mode`?\n. I just released 0.21.0, which should fix this. I'll repoen if there are still issues with this. Thanks!\n. :+1: I'll definitely merge if you add some specs.\n. Great work @ftwillms thanks a lot.\n. No, visual block mode is not currently implemented. It should be coming soon.\n. This ended up getting fixed via #477. Sorry for the slow response; see my comment on [your other PR](https://github.com/atom/vim-mode/pull/473).\n. In my opinion, since this won't help the common case of starting Atom with text editors open, it isn't worth lazy-loading in this case. I'm open to arguments in favor of doing it though.\n. Thanks @bronson. I think we'll need to use some different tactics for improving the package's load time. Closing this out.\n. Hey @brandonhorst, really sorry for the lack of communication here, and on #469. Both of these issues are fixed in the latest release, as part of a larger effort to make multiple cursors work across the board.\n\nI felt that a bigger refactoring was needed to support multiple cursors consistently for all motions and text-objects, and in command mode, visual mode and with operators. I regret not merging your PRs at the time though, because it took me a long time to get around to making this big change.\n\nAnyway, I'm sorry for letting this good work go un-merged, and I hope you're still interested in `vim-mode`. It could definitely use a lot of further contributions, and I'm hoping to spend more time maintaining it. Thanks!\n. @mishavetl what version of Atom are you using? Can you upgrade to the latest version and report whether this still happens?\n. I'd like to merge this, but with just `v`, not the `V` mapping. In regular visual mode, `V` should actually switch to _linewise_ visual mode. That behavior isn't implemented yet, but in the meantime I'd prefer not to add a mapping for `V`.\n. > Maybe @maxbrunsfeld forgot to close this one?\n\n:+1:\n. @QuillyT, I haven't seen this yet. Does it happen in insert mode, or only in command and visual modes? Also, is it just `h`, `j`, `k`, `l` and the arrow keys, or are other motions like `b`, `w` etc affected also?\n. Also, are you using the latest Atom and the latest vim-mode? If not, can you try upgrading and report whether you still see this?\n. @QuillyT thanks a lot for investigating. I see it now; I'll fix it asap.\n. @QuillyT this is fixed on master. I'll release again today. Thanks a lot for your help.\n. :+1:\n. @MrLeeh, I think this may be an issue with Atom-core, not this package. What happens if you add the following to your `keymap.cson` and then type a `>`? I would expect that you would see the 'about' dialog.\n\n``` coffee\n'*':\n  '>': 'application:about'\n```\n. Ok, sorry about this. Would you mind opening an issue on [atom-keymap](https://github.com/atom/atom-keymap), stating that you can't bind the `>` key on windows with your German keyboard layout? Thanks!\n. Is this still happening? I don't know why it happened originally, but I haven't seen it happen for the past few updates.\n. Ok, let's keep it open for now. I think it might be fixed though; can you try and see if anything strange happens on your next update?\n. Ah, I see it. It's because sometimes `vim-mode` fails to deactivate with an error like this:\n\n```\nError deactivating package 'vim-mode' TypeError: Cannot read property 'setInputEnabled' of null\n  at VimState.module.exports.VimState.destroy (/Users/maxbrunsfeld/.atom/packages/vim-mode/lib/vim-state.coffee:46:29)\n  at Disposable.disposalAction (/Users/maxbrunsfeld/.atom/packages/vim-mode/lib/vim-mode.coffee:31:20)\n  at Disposable.module.exports.Disposable.dispose (/Users/maxbrunsfeld/.atom/packages/vim-mode/node_modules/event-kit/lib/disposable.js:21:65)\n  at CompositeDisposable.module.exports.CompositeDisposable.dispose (/Users/maxbrunsfeld/.atom/packages/vim-mode/node_modules/event-kit/lib/composite-disposable.js:28:22)\n  at Object.module.exports.deactivate (/Users/maxbrunsfeld/.atom/packages/vim-mode/lib/vim-mode.coffee:34:18)\n  at Package.module.exports.Package.deactivate (/Applications/Atom.app/Contents/Resources/app/src/package.js:603:21)\n  at PackageManager.module.exports.PackageManager.deactivatePackage (/Applications/Atom.app/Contents/Resources/app/src/package-manager.js:501:12)\n  at PackageManager.module.exports.PackageManager.update (/Applications/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/package-manager.js:215:23)\n  at PackageUpdateView.module.exports.PackageUpdateView.upgrade (/Applications/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/package-update-view.js:175:34)\n  at HTMLButtonElement.<anonymous> (/Applications/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/package-update-view.js:78:24)\n  at HTMLButtonElement.jQuery.event.dispatch (/Applications/Atom.app/Contents/Resources/app/node_modules/jquery/dist/jquery.js:4430:9)\n  at HTMLButtonElement.elemData.handle (/Applications/Atom.app/Contents/Resources/app/node_modules/jquery/dist/jquery.js:4116:28)\n/Applications/Atom.app/Contents/Resources/app/src/package.js:608 module.exports.Package.deactivate\n```\n\nThat error prevents the command listeners from being unregistered.\n. I think this is a duplicate of #403. If you discover anything more about the problem, please post it there. Thanks!\n. Thanks @Fuffi, this is definitely a regression. @jeffschwartz, if you notice bugs in the other text-objects, could you post additional specific issues?\n. Can you open the key-binding resolver (`Key Binding Resolver: Toggle`) and report what it shows when    you are saving the file and the cursor is disappearing? Also, are you using the latest Atom? If not, can you update to the latest Atom and try again?\n. So the cursor disappears when you save the file with `ctrl-s` right? Is that screenshot what you see when you type `ctrl-s`? It looks from that like you are typing `escape` there.\n. Thanks guys. I didn't actually know that vim did this, and we were missing tests for this case. Let me know if there are still issues with that motion.\n. Thanks for catching this!\n. Almost all of the `Find and Replace` package's functionality is controllable via the keyboard. If you hover with your mouse over the buttons on the panel, it will show you the keyboard shortcuts. Do you mean that you would want vim-mode to add additional key-bindings for these actions to make them work like vim?\n. It is indeed possible to operate the search window with the keyboard entirely. I guess you'll need to add a new key mapping for `find-and-replace:show` command.\n. I agree with these suggestions. To make Atom's find-and-replace interoperate with vim's operators and with its repeat system will take some work however. @jacekkopecky and @t9md have some ideas about this, I believe.\n. This is the expected behavior. In vim's visual mode, the `$` motion moves the cursor beyond the end of the line, highlighting the newline. In Atom, selections that extend beyond the end of a line are displayed like this. To display them differently would require implementing an alternative selection system, which I don't think makes sense for this package. Functionally though, this behavior is the same as vim's. The difference is only cosmetic.\n. Let me know if you have any suggestions for how to improve this. Currently though, I don't see a good way.\n. I'm pretty sure that in your screenshot, the selection extends beyond the end of the line. To test this:\n1. Open a file with this text\n\n```\nline-1\nline-2\nline-3\n```\n1. Place cursor at the beginning of the `line-2`\n2. Type `v $`\n3. Type `d`\n4. See that the line-break between `line-2` and `line-3` was deleted, leaving only two lines.\n5. Conclusion: typing `$` in visual mode selects the newline after the text.\n. @jeffschwartz, no problem at all; thanks for participating in the issues on this project!\n. I can't reproduce this. Can you report the output of the keybinding resolver (`Key Binding Resolver: Toggle`) when you press backspace twice?\n. What version of Atom are you using? Can you upgrade to the latest version and report whether or not this still occurs?\n. Ok, thanks. Upgrading Atom to the latest version will fix this error.\n. Yeah I agree, `normal mode` is what I use most often. I'd merge said PR.\n. The root cause is some other package that is leaving an editor transaction open using [the deprecated open-ended transaction APIs](https://github.com/atom/text-buffer/blob/master/src/text-buffer.coffee#L836). The  `gocode` package's deprecated [uses these](https://github.com/typester/atom-gocode/blob/master/lib/autocomplete-view.coffee#L89). Can you disable that package and try again?\n. Thanks @coolwanglu. Sorry for the delay.\n. We don't use assertions in the code; we have a separate suite of specs that we use to verify the code's correctness; see the `spec` directory.\n. >  it might not be able to test all the situations in the test suites.\n\nWhy would you not be able to?\n\n> with an assertion in the function body, it will be auto breakpoint when something is wrong, which will allow us to find the caller\n\nIn _very_ rare cases where a bug has been reported and we cannot reproduce it, we might introduce an extra `throw` statement in the way that you're talking about. Most of the time though, we don't do that.\n. This used to work; I probably broke it in some refactoring. It shouldn't be a big deal to fix, I just haven't gotten around to it because I think the current behavior is ok too. I'd be really glad to merge a PR fixing it if you're interested.\n. You're right; thanks, @jacekkopecky.\n. @coolwanglu this is cool. I'd really like to have some specs for this before merging, but I'm not sure where to point you for examples. Stand by. @nathansobo do you have any advise for testing this? Also, is there any way to accomplish this without constructing a `PaneAxis` manually as @coolwanglu is doing here?\n. Yup, thanks @MarkusSN!\n. Yeah, we'd like to leave ex-mode up to other packages to implement. I believe @lloeki is doing a nice job with the `ex-mode` package mentioned above.\n. I don't think this package is ever going to interpret vimscript. Anyone else have any ideas on how to make it easier to switch from vim?\n. I agree, @gepoch. I think this kind of thing should be implemented in a separate package (if anywhere). It's now possible for other packages to interact with vim-mode through Atom's [services API](https://atom.io/docs/latest/creating-a-package#interacting-with-other-packages-via-services). See #540.\n. Awesome, thanks!\n. I absolutely agree; I've meant to add this for a while. Would you mind adding tests for this behavior? I think it would be sufficient to add one test to [the describe for 'y'](https://github.com/atom/vim-mode/blob/master/spec/operators-spec.coffee#L533) and one test to [the describe for 'p'](https://github.com/atom/vim-mode/blob/master/spec/operators-spec.coffee#L730), each of which says something like:\n\n``` coffee\ndescribe \"when the 'useClipboardAsDefaultRegister' setting is set to true\", ->\n  it \"copies to the clipboard\", ->\n   spyOn(atom.clipboard, \"write\")\n   keydown(\"y\")\n   expect(atom.clipboard.write).toHaveBeenCalledWith(\"something...\")\n```\n\nSee [the docs](https://atom.io/docs/api/latest/Clipboard) for `atom.clipboard`.\n. Perfect. Thanks a lot!\n. Yeah, it should appear in the settings view under the vim mode package.\n. Thanks!\n. Personally, I'd be ok with either behavior, or even a new setting for this. I'm going to give others some time to weigh in on this one.\n. Unanimous. Good enough for me. @jacekkopecky I'll merge if you want to rebase this branch onto master or merge master into it.\n. @jacekkopecky would you mind rebasing this onto master actually? Generally I don't mind a few extra merge commits, but your branch now has 5 merge commits on it.\n. @jacekkopecky no worries. You should keep your branch and this PR. Probably the simplest thing would be to reset your branch back to your original commit, and then merge master into your branch one final time:\n\n```\ngit checkout repeat-till-motions\n\n# Make a copy of this branch just in case anything goes wrong\ngit checkout -b tmp-backup\ngit checkout repeat-till-motions\n\ngit reset --hard 95350b176c5b27f9ffd40f9b1e724aef71951ef9\ngit fetch atom\ngit merge atom/master\n```\n\nYou'll then have to force-push your branch, since you're deleting some commits:\n\n```\ngit push -f origin repeat-till-motions\n```\n. Great. Thanks, @jacekkopecky.\n. I think this is fixed on the latest version of vim-mode. Can you upgrade Atom and vim-mode to the latest versions and report whether you still see this?\n. @jacekkopecky are you interested in looking into this?\n\nEDIT: Oh, nevermind, I was thinking that this related to your work w/ wrapping in `h` and `l`, but this is for the vertical motions.\n. Thanks for reporting this @geoffharcourt.\n. Thanks!\n. Yeah, we need to provide a versioned service. I'd be open to a PR that adds one if you're interested in working on that.\n. Closed via #540.\n. See #491. I believe what Atom does is correct, it just looks different than it looks in vim. I can reopen if you think it's really behaviorally different.\n. @nicolaiskogheim I'm all for adding every last visual and normal mode key-mapping that we can, but this package's approach is to make insert mode behave as much as possible like plain Atom, at least by default.\n\nI'm ok w/ adding settings to enable insert mode features that conflict w/ Atom's, but since these are just mappings, I'd prefer to let people add them in their own `keymap.cson`.\n. Left some minor comments. Otherwise, looks good :+1:.\n. > This may be too early though, as we may be too restrictive early on. I don't know what your versioning policy is, but this may be a worthy goal for vim-mode 1.0.\n\nSounds reasonable to me.\n. @Abukamel can you report your OS, Atom version and vim-mode version? Thanks!\n. So it sounds like we just need to remove the `ctrl-c` binding in insert mode on windows and linux.\n\nIn normal mode, `ctrl-v` is used to enter visual mode (specifically visual-block mode, which is currently a [work in progress](https://github.com/atom/vim-mode/pull/658)), so I don't think we should remove that binding. If you want to paste, you should either enter insert mode, use `p`, or edit your `keymap.cson` to override vim-mode's `ctrl-v` binding.\n\nIs everyone ok with that solution?\n. Oh, thanks for the heads up @morenoh149!\n. Hey @MattKunze, didn't mean to ignore this. @tmm1 and I ended up fixing this a different way with the added benefit of not relying on jQuery any more.\n. Closing this out in favor of #801 since that issue has more detail. Please subscribe to that one for updates.\n. Yeah, nice idea @neiled. It seems like this covers the majority of the use cases for `i t`. We can always make it fancier later.\n. :clap: Wow, that was some really nice debugging @deiwin. Thank you very much!\n. Yeah, I think I introduced this regression during the push to get multi-cursors working everywhere. The `w` motion behaves differently in visual and operator-pending modes, so we would need to differentiate between modes in [`MoveToNextWord::moveCursor`](https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee#L215). I'd love to merge a PR fixing this.\n. @dsandstrom right. Thanks for clarifying.\n. This is a duplicate of #480. It is a vim mode bug; sometimes vim-mode fails to deactivate.\n. There's already an issue for this one: #544.\n. Thanks for the PR! It looks like some of the tests are failing. I'll try to look into why when I get a chance.\n. Yeah, this has been taken care of now. Thanks for looking into it though, @lightsofapollo.\n. Closing as this functionality is implemented in a separate package, as @dsandstrom said.\n. Great. Thanks for sticking with this through the back and forth.\n. Yeah, I don't think we should need to check the mode in those commands. They can be used as operators (e.g. `gUiw` to uppercase the current word), but that shouldn't require any custom code; it should automatically work the same in visual mode and operator mode, as long as the command modifies the current selection.\n. The reason that `~` contained that `if`/`else` is because `~` isn't an operator when used in normal mode; it just changes the character under the cursor.\n. By the way it's awesome that you're implementing this; thanks.\n. @jacekkopecky is on :fire:!\n. :ok_hand: Looks great; sorry for not responding to this one.\n. Generally, the workflow for developing an Atom package is just:\n1. Clone the package wherever you want\n2. Either:\n   - Run `apm link --dev` from the package directory and test your changes in dev mode\n   - Run `apm link` from the package directory and test your changes in normal mode\n\nI recommend `apm link --dev` so that you don't accidentally mess up your normal editing environment.\n. :zap: This will be a big improvement.\n. Yup, replace mode would be nice. I would definitely merge a PR adding a replace mode if you or anyone else is interested in contributing this.\n. It's all yours @jacekkopecky!\n. No, I think I just didn't remember to check back once you added the test for it. And yeah, I think it's totally fine GitHub etiquette to ping a maintainer if nobody's responded your PR. Looking...\n. Great! Thanks for this fix.\n. Thanks for fixing this.\n. This is right.\n. :heart:\n. Thanks for the heads up @antoine1fr. We're trying to do a better job with the changelog.\n. @MattKunze the nice thing about this approach is that it uses the newer `TextEditorElement` class, which avoids having to use `atom-space-pen-views`. That module will work, but it depends on `space-pen` and jQuery, so it'd be nice to use `TextEditorElement` directly instead. It just means we need to do a little more work to update the tests to not use the jQuery interface.\n\n@tmm1 did you still want to work on this? If not, I can pick it up here. I don't think the `hidden-input` thing needs to change. That class is being applied to a `div` that _contains_ the text editor element, not the element itself, so I would think it would continue to work.\n\nIf you're not seeing it have any effect, it might already have been broken.\n. Fixes #544\n. Are you referring to the `d` operator? In vim, that operator writes to the default register (unless a register is specified using the `\"` prefix).\n. @ahmadseleem - this package emulates vim. It seems like you're suggesting a completely different behavior. Maybe you want a different package?\n. It looks like you installed `vim-mode` manually, by cloning this repo into `~/.atom/packages`, rather than using `apm` or the settings-view. That works, but you need to run `apm install` from the `vim-mode` directory first.\n. Closed as @jasper-fu's issue is resolved. @calebmeyer when you see this next, can you click the button to report the issue so I can see your details?\n. You should be able to apply styling to [these classes](https://github.com/atom/vim-mode/blob/master/lib/status-bar-manager.coffee#L4), (`status-bar-vim-mode-insert` etc) in your `styles.less`.\n\ne.g.\n\n``` less\n#status-bar-vim-mode {\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.status-bar-vim-mode-insert {\n  color: red;\n}\n\n.status-bar-vim-mode-visual {\n  color: green;\n}\n\n```\n\nI'm assuming you're talking about changing the whole status bar though? That would be more difficult.\n. I think this is a duplicate of #401; very large repeat counts (e.g. `1234123409875210574564`) currently cause errors. I'm actually going to leave this one open and close #401 so that other error notifications will point the user to this issue.\n. This is a duplicate of #554. This functionality is implemented in a separate package - [ex-mode](https://atom.io/packages/ex-mode).\n. Sweet.\n. I saw some similar code to this in #555. Does that cover this case too, or is this one different?\n. > If so, should I keep the PR with just the specs\n\nGood idea.\n. Great.\n. Other than some minor comments, looks great!\n. @daniloisr Yeah, your approach is good. I would love to merge a PR fixing this. Are you interested in fixing #614 too?\n. Thanks!\n. Thanks a lot for catching that!\n. > Because vim treats them so differently, commands like :r !ls are a fundamentally different from a code perspective, not a memory and footprint perspective. After pressing `:`, a whole new language is parsed and evaluated.\n> \n> Smaller, focused packages are idiomatic in Atom.\n\nI'm the current maintainer of this package, and I agree with @bhuga very strongly on this. Memory and performance-wise it's no big deal at all to add this code to `vim-mode`. But from a project-management/maintenance perspective, I really don't think it makes sense. Implementing `ex`-mode requires specific domain knowledge of an esoteric language. And we'll be able to ship improvements faster if we keep these packages separate.\n\nThat said, @jazzpi I definitely see your point that certain ex-commands _should_ compose properly with vim operators and motions. I think that solving that problem is a very high-priority item on this package's roadmap.\n\n> The issue of ex : commands used as motions is bigger than vim-mode/ex-mode. If there's a package out there that provides extra motions (e.g. cursor-history, jumpy, and more) or when Atom provides more motions (e.g. camelCase motions), we would probably want vim-mode to integrate those seamlessly.\n\n@jacekkopecky has some great ideas about making vim-mode's operators composable with motions from other packages. I'd really like us to pursue _this_ path.\n\n@jazzpi I really apologize for not weighing in earlier on this; I know you've now put some serious work into a PR to integrate these packages. If you're interested maybe you can help in this effort to make vim-mode more modular so that `ex-mode` can integrate with it more easily.\n. >  For the exposure problem, the pop-up is the best I can come up with, does anyone else have ideas?\n\nThere is a proposal, (https://github.com/atom/apm/pull/385) to add a new feature to `apm` called \"package sets\", which will be a one-step way to install a group of related packages. `ex-mode` is one of the examples that people are using in the design of the feature. I'm not sure exactly what it will look like, but I think that when people search for `vim` on atom.io, they could be shown some kind of `vim` package set that also includes `ex-mode`.\n\n> The duplicate codebase is a bit tougher, it might be possible to expose parts via a service though.\n\nI agree. Ultimately, I'd like to actually _remove_ the `/` command from `vim-mode`, and instead make the operators compose properly with motions caused by Atom's bundled `find-and-replace` package. For any other duplication, I'd really like to try to solve the problem by enriching the `vim-mode` service.\n. Fixed by https://github.com/atom/vim-mode/commit/197672907b652c1420b79a184eca021c41bd1913. Thanks!\n. Fixed by https://github.com/atom/vim-mode/commit/197672907b652c1420b79a184eca021c41bd1913. Thanks!\n. Fixed by https://github.com/atom/vim-mode/commit/197672907b652c1420b79a184eca021c41bd1913. Thanks!\n. Fixed by https://github.com/atom/vim-mode/commit/197672907b652c1420b79a184eca021c41bd1913. Thanks!\n. This has been updated already. Can you try updating to the latest Atom and the latest vim-mode? I'll reopen this if you're still experiencing this problem.\n. I think this has been fixed for some time. Can anyone reproduce this with Atom 1.1.0 and vim-mode 0.63?\n. @morenoh149 I think this has been fixed for a few releases; I actually meant to close this. Are you on the latest Atom and vim-mode?\n. I remember a bug like that being fixed... what version of Atom are you on?\n. :+1: Thanks for the update.\n. What versions of Atom and `vim-mode` are you using? As far as I can tell, `vim-mode` has exactly the behavior you want.\n. @daniloisr Thanks for working on this! Because these commands move the cursor and modify the selection, I would really prefer to implement them as subclasses of `Motion`. That way we wouldn't have to duplicate the logic for updating the selection.\n\nYou should be able to implement `Motion::moveCursor(cursor)` so that it positions the cursor correctly using `Cursor::setBufferPosition` or `::setScreenPosition`, and then override `Motion::select` and `Motion::execute` so that they update the `@editor`'s scroll position at the end.\n\nLet me know if that approach makes sense to you, I can give you more detailed guidance if it'd be helpful.\n. Do you still have your commits where you wrote it as a `Motion` subclass? I don't see them on this branch. You could just push them to a different branch if so; I'm curious what it looked like.\n\n> we have the Scroll class that defines some useful stuffs like @scrolloff and @rows\n\nThat's true. I just think the `Motion` class defines a lot _more_ useful stuff than the `Scroll` class, and I think `Motion` is a more correct way to think of these commands, since they can be composed with operators.\n. :+1: Sounds good. Sorry for not giving you feedback earlier. I definitely want to merge this fix.\n. Looks _really_ nice. Re-running the build now.\n. Looks great! Other than some minor comments, I'll merge.\n. Great catch. Thanks!\n. Awesome.\n. Yes! I'd definitely merge a PR adding this.\n. Yeah, we haven't implemented the `iW` text object yet (or `i(` or `ib`). I'd love to merge a PR adding this feature. Otherwise, it's on the roadmap!\n. Thanks @hitsmaxft. Could you either rebase this onto the latest master or merge master into this? Some changes have been made to some of the scroll commands recently, and they appear to conflict with your fix.\n. Thanks for sticking with this @hitsmaxft!\n. Fixed via #630.\n. Thanks for the report. I'm closing this in favor of #642 even though that issue is newer, because it has the default title, which allows the issue to be automatically shown to other people who experience the same issue.\n. So happy that this has finally come to pass.\n. :heart:\n. /cc @vito\n. @davejacobs might appreciate this one too.\n. > Why? Because macros.\n\nWhich vim-mode lacks right now... but multiple cursors somewhat fill that need.\n. You're using a very old version of `vim-mode`. Upgrading to the latest (`0.45.0`) should fix this problem.\n. This looks good. Could you add a test for this? Let me know if you have any questions about our tests.\n. > I'm not sure I should add spec for ap(around-paragraph), since currently identical behavior to ip.\n\nI agree. The spec you added looks good. Thanks for adding this!\n. I like the current behavior, but I'd be willing to merge a PR that added some kind of configuration option for controlling this. Maybe `vim-mode.numberRegex`, which could be set differently in different scopes?\n. :+1: Thanks!\n. Closed via #630.\n. :boom: Thanks!\n. I think this was fixed by #712.\n. Closed via #630.\n. I like this feature too, and I'd be ok with adding it similarly to how it's currently implemented (as opposed to adding some kind of hook) but just _without_ the css change. That way, users and theme authors could customize the look of the highlight just by tweaking CSS. We should also make the hard-coded timeout short so that the duration can be customized via css transitions.\n\nThere is some code in Atom core for doing things like this, but it is not yet documented. It's called 'flashing' a decoration. See [this code](https://github.com/atom/find-and-replace/blob/7c678111b948b442ba2fa7cdbd7882eb5b9422ab/lib/find-view.coffee#L368) in `find-and-replace` and [these private methods](https://github.com/atom/atom/blob/2e2fef0c476d55bf283abafb10bf53b8f6386e75/src/decoration.coffee#L171) on the `Decoration` class.\n\nIf anyone is interested in taking this further, I would suggest trying this:\n\n``` coffee\nfor selection in @editor.getSelections()\n  selection.setBufferRange(selection.getBufferRange(), flash: true)\n```\n\nYou could also try flashing a custom decoration:\n\n``` coffee\nmarker = @editor.markBufferRange(range)\ndecoration = @editor.decorateMarker(marker, type: 'highlight', class: 'yank-highlight')\ndecoration.flash('yank-flash', 50)\n```\n\nThen maybe tweaking the CSS to get the flash looking nice.\n. Yeah, I'd love to disable IME when _not_ in insert mode. Unfortunately, the [ime-mode CSS property](https://developer.mozilla.org/en-US/docs/Web/CSS/ime-mode) that can be used to selectively disable it is not yet implemented in chromium. I'm definitely open to suggestions.\n. > currently there's not a simple way to track the cursor when moving up and down.\n\n@pthrasher cursors have the notion of a 'goal column', similar to other text editors, such that when you move the cursor vertically from a long line onto a shorter one and back again, it will return to the original column. You shouldn't have to do anything special to make this work; the normal cursor movement commands should take care of it.\n\nEDIT: I think calling `TextEditor::setSelectedBufferRanges` clears and recreates the selections, which causes the goal column information to be lost. Thinking about what to do about this...\n. Fixed via #630.\n. Fixed via #630.\n. @benogle this seems like it might be an autocomplete-plus issue. Sorry for the double ping. Accidentally commented on the dup first.\n. Fixed via #630.\n. The slowness was due to lots of stack traces being created because deprecated APIs were being used. Fixed via #630.\n. Great idea. Looks good except for the minor feedback above.\n. Thanks!\n. This should be fixed if you upgrade to the latest Atom version (0.200) and the latest vim-mode version (0.48).\n. > Hitting dd in Vim leaves the cursor at its previous column position.\n\nI haven't seen this. Maybe there's a vim setting that you're using to make it do this? The behavior that I'm familiar with is that the cursor moves to the first non-whitespace character of the next line, as described in #315.\n. Also, what version of vim are you using? Could you record a gif of this happening after opening vim w/ the default configuration?\n\n``` sh\ntouch empty_vimrc\nvim -u empty_vimrc\n```\n. :ok_hand: Perfect; thanks!\n. Looks good except for the comments above.\n. Thanks!\n. @np what version of Atom are you using? The newest versions of vim-mode require a fairly new version of Atom. Can you check if the error persists after upgrading to 0.201?\n. @np have you created or found an issue on atom/atom for the crash that you're experiencing? I would like to take a look at it.\n. @gittyupagain are you using the latest version of `vim-mode` (0.52)?\n. @gittyupagain I see it now. In a certain case, we would fail to detect changes in the history. Fixing...\n. Can you try again with version 0.53?\n. Great. Thanks for checking in about this.\n. @scarolan this command has been implemented and working for a long time. What behavior are you seeing? Can you upgrade to the latest versions of Atom and vim-mode? Also, could you open the keybinding resolver (`Key Binding Resolver: Toggle` in the command pallette) and report its output when you enter `dd`?\n. Closing this in favor of #801 since that issue's description is more exact. Please subscribe to that issue for updates. Thanks!\n. Thanks for catching that @kWhittington.\n. Great work; thanks so much!\n. I think this was just fixed via #684.\n. Ok thanks for clarifying @MarkusSN.\n. Thanks for the report! Just ran into this one myself.\n. Thanks for catching that!\n. It does, but there's an Atom setting that you need to enable: `editor.scrollPastEnd` (or `Scroll Past End` in the settings view). Let me know if this setting does not fix the issue for you.\n. This is great! Thanks @t9md. :tada:\n. Great work @MarkusSN; thanks for fixing this!\n. Thanks for raising this issue; I'd really like to support this. You're right that it would take a fair amount of work. I think the best way to do it would be to add some new API to Atom core that would allow querying the history of commands that were run on an editor.\n\nOne thought that comes to mind is that we could extend the history API in `text-buffer` to allow storing arbitrary metadata on each history entry. We could use that in Atom to store the name of the command that was run.\n\nI think that if we do implement this, it should probably be part of `vim-mode`, not `ex-mode`, because the functionality for handling repeats and counts are in `vim-mode`.\n. /cc @nathansobo\n. ``` javascript\ntokenizedBuffer = atom.workspace.getActiveEditor().displayBuffer.tokenizedBuffer;\ntokenizedBuffer.tokenizedLines.length // 234\ntokenizedBuffer.tokenizedLines[164]   // undefined\n```\n\nIt looks like there are lines missing from the `TokenizedBuffer`. Maybe these lines were initially folded when I opened the file?\n. Is this still happening to you on Atom 0.210 and vim-mode 0.53?\n. @HarolddeBruijn what version of Atom are you using? It looks like you may be using an old one. Could you upgrade to the latest versions of Atom and vim-mode and report whether the problem persists?\n. Atom should be checking for updates automatically every few hours on Mac and Windows. Are you still seeing this error on the latest Atom?\n. > You should update atom itself, I see you have version 0.199.0.\n\n:+1:\n\n> Hi, Im running the latest versions for Atom and vim-mode and still getting this error. Anything else I can do?\n\n@lmartins Are you sure that it's _this same_ error (same stack trace)? It shouldn't happen with the latest Atom. I'm guessing that it's slightly different. Could you open another issue?\n. @itkovian could you share the version of `vim-mode` that  you're running and post the stack trace that appeared in your notification? Sometimes an error with the same message might have a totally different stack trace.\n. @codykrieger Thanks for the report. I think this is a new bug, which I haven't seen before. Have you seen it again? Can you open a separate issue for this?\n. @stormspirit By default `G` should move to the end of the file. What are you seeing it do? If it isn't working, could you share the output of the keybinding-resolver (`Key Binding Resolver: Toggle` from the command palette) when you type that key?\n. Yeah, it looks like upgrading Atom will fix this problem. Let us know what happens when you upgrade Atom, @AnuchitPrasertsang.\n. :+1:\n. Wonderful. Thanks so much.\n. @fritzherald I would go ahead and merge your PR, but our CI is failing, so I don't have a quick way to verify that it doesn't break anything.\r\n\r\nInstead of putting any effort into this codebase, please use vim-mode-plus instead. It is very solid and well maintained, and it should be very easy to switch over. This package is deprecated. I'm sorry that we don't have the resources to maintain it, but we're a small team, there's a lot to do, and it just doesn't make sense when there is a great replacement out there already.. > definitely not in keeping with the deprecation notice in the readme.\r\n\r\nGood point. I have updated the README to explain that we're not maintaining this package anymore.\r\n\r\n> so little regard is shown for the core experience for so many users.\r\n\r\nSorry for not communicating to you the extent to which we've abandoned this package. That was uncool. I get that you put in some work on this and so for you personally, it'd be nice to see it merged.\r\n\r\nBut we've been watching what has happened with `vim-mode-plus`. Overall, it's been great for us and our users that @t9md has taken the lead on maintaining Atom's vim mode. I don't think it's true what you are suggesting - that \"many users\" are severely impacted by having to `apm remove vim-mode && apm install vim-mode-plus`. I'm pretty confident that the vast majority of our users would prefer that I spend as much time as possible improving Atom's performance and building new features, not maintaining packages for which better replacements already exist.. Adding a deprecation notice is a good idea. I think we could just use `atom.notifications` inside of the `activate` hook.. :dragon: Awesome. Thanks so much for fixing this @jacekkopecky.\n. Awesome!\n. This is really well done. My apologies for not seeing this sooner.\n. I think I'd like to _not_ override the `ctrl-e` key-binding by default. I agree with @bronson that by default, insert mode should feel like Atom. It's great to have the command implemented though: anybody who wants this command can just add the keybinding to their `keymap.cson`.\n. Thanks!\n. That makes sense. Probably [toggling the fuzzy-finder](https://github.com/atom/fuzzy-finder/blob/master/keymaps/fuzzy-finder.cson#L8). While there is already an alternative keybinding for that command, `ctrl-p`, I think it's probably best not to override key-bindings that ship with Atom.\n\nIn my opinion, we should simply remove this `return-from-declaration` keybinding on linux and windows, and let users add it (or some modified version like `ctrl-shift-T`) themselves. @bronson @tmm1 thoughts?\n. > And, if vim-mode's normal mode doesn't get to override ctrl-t, then why does it get to override ctrl-u, ctrl-b, ctrl-d, ctrl-f, ctrl-e, etc?\n\nThat's a fair point; since this is only in normal mode, it's not such a big deal to override another binding.\n. Sorry for weighing in so late on this. I don't think tests should _fail_ because of deprecations, because the whole idea of deprecations is that we want to remove some functionality eventually, but we want to give packages some time to upgrade beforehand.\n\nIn general, to me, a CI build should only be red on the master branch if the authors have made a _mistake_. That way, a red build can always be treated to mean \"fix this before pushing any other code changes\". If we make the build go red for lower-priority problems like use of deprecated APIs, then red builds carry less weight.\n. That's a good point: we only surface the deprecations when running the specs in Atom, not at the command line. I think that's something we should fix in Atom core. Could you open an issue about this? If you're interested in fixing it, I think we'd need to do the same [thing that we do in Atom's graphical spec reporter](https://github.com/atom/atom/blob/8586a6f2dcd30dfb4c6595c46e529c819afb7829/spec/atom-reporter.coffee#L223), when we [run the tests in the terminal](https://github.com/atom/atom/blob/8586a6f2dcd30dfb4c6595c46e529c819afb7829/spec/jasmine-helper.coffee#L26). Maybe we could print the deprecation messages to stderr, colored yellow or something.\n. OOH, I just realized that there is _already_ code for doing that, but it only happens on our internal CI system, Janky. We could just change that `if process.env.JANKY_SHA1` to say `if process.env.JANKY_SHA1 or process.env.CI`.\n. @bronson thanks for doing this investigation. I've got some serious maintenance to do on this package. Following up on some of these contributions today...\n. :sparkles:\n. Thanks for doing this. \n\n> the cursor moves to the beginning of the line instead of remaining where it is. I can open another issue to address that if desired\n\nI also noticed that the existing code will not preserve multiple selections/cursors; it destroys all but one cursor afterward by calling `::setSelectedBufferRange()`. It'd be nice to fix both of these things in separate PRs. In the meantime, this looks good. Just waiting on Travis.\n. :tada:\n. Wow nice.\n. Very good idea.\n. Ok great! Congratulations on closing issue #2.\n. Thanks for :fire:ing those.\n. Great!\n. I'd like to just _not_ add the panel at all if the input is meant to be hidden. The problem is that the editor needs to be somewhere on the DOM in order to be focused. Maybe could just make it `1px x 1px` and add it to the body somewhere?\n. Really glad to see this fixed. I left some very minor feedback.\n. :ok_hand: Great!\n. :clap: Nice.\n. Great!\n. :eyes: Thanks!\n. It looks like you're using an old version of vim-mode (and probably an old version of Atom). Closing this out, but let me know if you're having issues after upgrading to Atom 1.0.3 and vim-mode 0.57.\n. Thanks @mattr-!\n. Vim-mode should support soft-wrap. We should remove that paragraph from the README. Have you found any cases where soft-wrapped lines are still treated incorrectly?\n\nRegarding your initial question, I don't think there is a way to do this. However, you can deactivate and activate the package repeatedly, so it should be easy to write a script that deactivates vim-mode while a markdown editor is focused. See the `atom.workspace.observeActivePaneItem()` method.\n. Thanks!\n. Could you add a small test for this, or modify an existing test so that it supplies a count?\n. Yeah, you can run the `Window: Run Package Specs` from Atom, or run `apm test` from the command line.\n. :+1: Thanks @mleeds95! Nice work.\n. @macgyver I believe that is fixed in 0.63.\n. Also, I think this original issue is fixed as of 0.63, so I'm closing this out. Everyone, please let me know if you're still experiencing this problem.\n. Thanks @bronson. Closing this out in favor of #546.\n. Actually, let's keep this issue around instead, since it has the clearest description.\n. Thanks!\n. Does this happen if you disabled `emmet`?\n. Thanks for taking the time to fix this! Could you add a spec in [text-objects-spec](https://github.com/atom/vim-mode/blob/master/spec/text-objects-spec.coffee) for this case?\n. That sounds good.\n\n@mleeds95 do you want to make this change on your branch?\n. Thanks @mleeds95; I don't feel strongly about the commands' behavior in normal mode, but it's great to stop this exception from happening to people.\n. Still thinking about this one. I think your solution with the transaction grouping interval is good, but I'd like to avoid adding more direct interrogation of the text-buffer's `undoStack` if at all possible, because that code is private, so its implementation is subject to change. Maybe what this is telling us is that we need a new public method on `TextBuffer`, like `::hasChangesSinceCheckpoint(checkpoint)` (or maybe just `::getChangesSinceCheckpoint(checkpoint)`). What do you think about that?\n. Thanks @t9md!\n. Interesting solution! Can you post screenshots or GIFs?\n. I love it. Thanks!\n. Great!\n. This is a really cool technique, but I don't think this code belongs inside of `vim-mode`. Maybe it should be a separate `npm` module, like @jacekkopecky said. It could be an executable, for example, that you run with any given node.js code, like this:\n\n``` sh\n$ generate-introspection-report ~/.atom/packages/vim-mode/lib/*.coffee\n```\n. Thanks for the report. Can you reproduce this consistently? Does it happen if you disable `emmet` and `minimap`?\n. I actually think it's ok not to test this.\n\nWould you mind moving this new code up into the package's main module? Specifically, I'd put the call to `atom.workspace.onDidChangeActivePaneItem` right [here](https://github.com/atom/vim-mode/blob/eb12ab4b1467d9370894c7d0ae9fc45bb4a2d508/lib/vim-mode.coffee#L30). I think it would be slightly simpler that way, because the dependency relationship between the package's main module and the `StatusBarManager` would remain unidirectional.\n. :+1:\n. @jacekkopecky Could you explain why we need specific code for handling mouse dragging, rather than treating it like any other means of updating selections?\n\nI thought the problem was just that we prevent cursors from moving to the end of the line, even if they have non-empty selections.\n. @jacekkopecky Can you verify that this fixes the `insert-newline-above` and `join-lines` commands in normal mode? I would think that there would still be problems, because other commands outside of `vim-mode` might need to move the cursor to the end of the line, but won't be able to set the `@processing` flag. I could be wrong though; let me know.\n. Hooking into the `TextEditorComponent's` rendering cycle is an interesting solution, but it's reaching pretty far into private code, and it creates a coupling between the `VimState` and the rendering layer that I'd like to avoid.\n\nI think that instead, we should hook into the lifecycle of Atom's commands. Basically, we'll only need to adjust the cursor position at two times: after mouse dragging ends (exactly the way you have it now), and after each command runs. Then I don't think we'll need to use `onDidChangeSelectionRange`, `onDidChangeCursorPosition`, or `onDidAddCursor` to adjust the cursor position, and I don't think we'll need the `@processing` variable on `VimState`.\n\nIn the above `atom/atom` pull request, I've added a method `atom.commands.onDidDispatch` that we can use for this. This will be available in Atom v1.0.8.\n. I did a little work on this, and it seemed like checking `event.target is @editorElement` was sufficient.\n\nEDIT: oops, `@editorElement`, not `@editor`\n. :heart: This is looking really good. Really excited to get this :ship:ed once Atom 1.0.8 is out.\n. Actually @jacekkopecky I would say leave that in there for a little while. Maybe put a TODO comment to remove it. That way, users w/ old versions of Atom won't get exceptions when they upgrade vim-mode; they just won't have the cursor adjusted.\n. :sparkles:\n. This is because you're using a pretty old version of Atom. Upgrading Atom should fix the problem.\n. /cc @jacekkopecky \n\nMaybe we need to move back to constraining the cursor position within the line explicitly, after each command, rather than doing it inside of an `onDidChangeCursorPosition` observer.\n. :point_up: What @jacekkopecky said.\n. Instead of having that commented-out code, I think it'd be better to explicitly assert `expect(atom.beep).not.toHaveBeenCalled()` when testing commands that _sometimes_ beep, like `n`, `ctrl-a`, etc.\n. No, I think the spy on beep in spec-helper is good. I would just remove the commented out code. I'd prefer to avoid this kind of auxiliary code in this repo; since it isn't automatically exercised by CI, it can tend to become invalid as the code changes.\n. :heart:\n. Oh, I'm sorry for delaying that when this is causing people pain. Pushing out v0.60 now.\n. Awesome thanks for spotting that.\n. I don't think so; I think it's good that insert mode feels like regular Atom. For example, it's kind of nice when inserting text to be able to quickly retype the current word by selecting it using `cmd-d`, and then to continue typing in insert mode.\n\nWhat are your thoughts? If you or other people feel strongly about it, we could make it configurable.\n. Ok, closing this out for now. Thanks!\n. Thanks for finding that existing issue :+1:.\n. Nice!\n. :+1:\n. Are you using the latest version of vim-mode?\n. Does this happen if you disable every package except for vim-mode? What about if run `atom --safe`?\n. Thanks for figuring this out @dnasseri. Could you add a test for this? You should add it somewhere in [this area](https://github.com/atom/vim-mode/blob/2ab86b2942efe6fee81e3d6492ba2020e64ee499/spec/motions-spec.coffee#L1832).\n. :+1: Thanks for this, @alexbooker.\n. Could you report what version of Atom you're using and your OS? Are you able to install `vim-mode` from the command-line?\n\n```\napm install vim-mode\n```\n. :+1: Makes sense. Does our key-mapping system handle `insert` properly?\n. Thanks!\n. I don't think this should be the default, because an important goal of `vim-mode` currently is that it feels like normal Atom when in insert mode. I think it would be great to have an option to enable this behavior though @skosch. I'd be glad to give feedback on and merge a PR adding such an option.\n. Thanks for the report, @tony612.\n\n/cc @benmccormick, in case you're interested in looking into that one as well, despite how long it took me to merge your last PR. :bow:\n. @benmccormick Thanks for figuring that out; sounds exactly right. Let's stay tuned for atom/atom#8906.\n. Yeah, there are probably other things in there that are out-of-date as well. If you're interested in contributing some prose, I'd love to merge a PR fixing up those docs.\n. Perfect. Thanks @tmunro\n. Yeah, `vim-mode` is built to work like Atom in insert mode. If you want to override Atom's own key-bindings in insert mode, everything is all set up for you to do so. The command is: `vim-mode:copy-from-line-below`.\n. Yeah @casimir the binding you mentioned is for normal mode. This issue is talking about [this one](http://vimdoc.sourceforge.net/htmldoc/scroll.html#CTRL-E), for insert mode.\n. Looks good to me. Let's merge and release this as soon as v1.1.0 is out.\n. Fixes https://github.com/atom/vim-mode/issues/903, I believe.\n. Ok, I was wrong about this fixing #903. Investigating...\n. :ok_hand: Thanks!\n. Ok well the code looks very nice. It seems like a paragraph breaks, or empty lines, should be considered sentence boundaries, but other than that, I'd love to :ship: this.\n. > How do we want things to work in \"code files\", where sentences do not occur as the normally would?\n\nI don't think you need to change the behavior based on the filetype or context.\n. Are you happy w/ this as is, for your use case? If so, I'm fine with merging this as long as the tests pass. We can always refine the behavior in a subsequent PR.\n. Thanks @jonasws!\n. Hi, this is nice, but I don't think it should be built into vim-mode itself. People can add this key-binding separately from installing this package.\n. Hey @benmccormick, sorry for the delay on this. Thanks for the fix!\n. This is in 0.62.\n. I think this is a general keymap issue. It was probably introduced by https://github.com/atom/atom-keymap/pull/94, which fixed the handling of multi-key printable character bindings like `j j`.\n\nBasically, when a multi-key binding like that fails to match after one or more characters, we attempt to figure out which characters would have been inserted, and fire text insertion events for those characters. Our [logic for determining the characters](https://github.com/atom/atom-keymap/blob/master/src/helpers.coffee#L224) must not work for these cyrillic characters.\n\n@denysdovhan Could you run this code in the Atom javascript console, and report its output after typing `\u043e` and `\u043b`? You'll need to click on the `KeyboardEvent` object to expand it.\n\n``` js\nwindow.addEventListener('keydown', function(event) {\n  console.log(event, atom.keymaps.keystrokeForKeyboardEvent(event));\n}, true);\n```\n. /cc @nathansobo, so these events' `keyCode` and `keyIdentifier` properties correspond to `j` and `k`, but @denysdovhan actually typed `\u043e` and `\u043b` on a cyrillic keyboard. Is this a symptom of the same underlying problem described in https://github.com/atom/atom-keymap/issues/37?\n. @Rykka could you update to the latest Atom and report whether or not this still happens?\n. I believe this is fixed via #906.\n. > Looks like the cursor no longer updates its position after #906.\n\nI think #906 fixed this problem. What version of Atom are you using?\n. Can maybe record a GIF of the problem you're seeing, and a GIF of what vim does on the same file? I'm not sure I'm understanding the problem you're describing.\n. Weird, that looks like the behavior of 0.62, prior to #906. For me, both the commands work perfectly now. Can you double check that you have the latest version? Not sure what could be going on here. Can you report the contents of your `config.cson`, and your list of installed packages?\n. Yeah, even though you can update a package with Atom running, we don't currently have a way of actually unloading the old code, so you often have to reload your window or restart Atom. Thanks for the update!\n. I'm seeing that the editor scrolls correctly, but the cursor doesn't move correctly as you scroll. Is that what you're seeing @damassi?\n. Hey everyone, sorry for not noticing this before we shipped v1.1.0. I believe this is fixed in vim-mode 0.63. Thanks for the reports.\n. Yeah, this is because there are [key bindings](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L159) for sequences like `ctrl-w h` and `ctrl-l` for moving between splits, so Atom is waiting to see if you're going to type an `h`, `l`, etc. I'm not sure what's the right thing to do here, because those bindings are an important part of vim, on all platforms. Do you have any thoughts, @easthing?\n. :+1:\n. Gonna :ship: this as is for a quick fix, but hopefully we can come up with something cleaner.\n. What version of vim-mode are you using? I thought I fixed this in 0.63.\n. Oh, I see; this is if you type `ctrl-f` while the cursor is offscreen. It sounds like that needs to be added as a special case. Thanks for the reports.\n. @vigneshm What version of Atom are you using? I believe the bug you're describing has been fixed.\n. And you're sure you're using `vim-mode@0.63`? I can't reproduce this.\n. @Valve Yeah, I changed the issue title to reflect your 2nd item. Does vim actually do that though? In my version of vim, it is impossible to scroll the editor such that the cursor goes offscreen; the cursor always follows the visible area. I'd be interested to see a GIF of the behavior you're describing in vim.\n. I'm not sure what could cause this. Does it happen if you disable all your packages except for vim-mode (`mv ~/.atom/packages ~/.atom/packages.bak && apm install vim-mode`)?\n. I think this is fixed via atom/atom#9937. It will be out in Atom versions 1.4.0 and 1.4.0-beta0.\n. For backwards compatibility, this uses the old code-path if if `TextEditor::setFirstVisibleScreenRow` is not defined.\n. I don't want to do this as part of vim-mode. As @jazzpi said, it's very complicated to parse vim-script correctly and convert between vim's configuration concepts and Atom's I think this would make a great separate package though, @xbeta, if you're interested in creating it!\n. Fixed by #917.\n. Thanks!\n. :ok_hand: Thanks for taking care of this @jonasws!\n. I'm not sure what you mean by 'put the file in vim mode'. When you enable this package it's enabled for all files, all of the time. Are you talking about Normal Mode vs Insert Mode? There is a setting that controls whether you start in insert mode or not: `vim-mode.startInInsertMode`.\n. :+1: Great! Thanks for the update.\n. Of course not! Good luck!\n. Thanks @ssfrr!\n. @kniteli Can you remove the `~/.atom/blob-store` and `~/.atom/compile-cache` and see if this still happens? If this workaround stops this exception from happening, I believe this issue will be fixed in the next release.\n. > fixes #541\n\nI don't think this fixes that issue. That issue is about the `ctrl-c` and `ctrl-v` key-bindings (which map to `copy` and `paste` on Linux and Windows) being overridden by this package. Still, I think this is a good change. Thanks @morenoh149.\n. @dcalhoun @gittyupagain Sorry for the poor experience continuing. I can't reproduce this on my master build of Atom, I'm wondering if it was fixed by either https://github.com/atom/atom/pull/9444 or https://github.com/atom/atom/pull/10062.\n\nIf you're interested, could you try Atom v1.4.0-beta3? The first PR mentioned above is included in that release. If that doesn't help, I believe the fix may be on master, and we're going to release _new_ beta and stable versions by Wednesday.\n. Really sorry for the wait on this one @dcalhoun. I thought I had back-ported the fix to an earlier release :grimacing:.\n. You should be in vim mode immediately, unless you set the `vim-mode. startInInsertMode` setting to `true`.\n. I believe this is the correct behavior. Vim also has folding, and `.` does not repeat folds; it repeats the last buffer change.\n. Yeah, see [the docs](https://atom.io/docs/latest/behind-atom-keymaps-in-depth) for defining key bindings. To find the name of a command that you want to add a keyboard shortcut for, you can search for it in the Command Palette (`cmd-p` on Mac) or use the Key-binding resolver (`cmd-.` on Mac).\n\nIn your case, I believe this is what you're looking for:\n\n``` coffee\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-j': 'window:focus-pane-above'\n  'ctrl-k': 'window:focus-pane-above'\n  'ctrl-h': 'window:focus-pane-on-left'\n  'ctrl-l': 'window:focus-pane-on-right'\n```\n\nLet me know if you have any further questions!\n. Could you report your Atom version, OS, and keyboard layout? Does this problem persist when restarting Atom?\n. Try something like this:\n\n``` less\n#status-bar-vim-mode {\n  &.status-bar-vim-mode-insert {\n    color: red;\n    font-weight: bold;\n  }\n\n  &.status-bar-vim-mode-visual {\n    color: green;\n    font-weight: bold;\n  }\n}\n```\n\nLet me know if you have any further questions!\n. I believe this is fixed in Atom 1.5.4, thanks to a PR by @b6pzeusbc54tvhw5jgpyw8pwz2x6gs.\n. This is something you can add yourself:\n\n`init.coffee`\n\n``` coffee\natom.commands.add 'atom-workspace', 'vim-mode:toggle-enabled', ->\n  disabledPackages = atom.config.get('core.disabledPackages')\n  disabledPackageIndex = disabledPackages.indexOf('vim-mode')\n  if disabledPackageIndex is -1\n    disabledPackages.push('vim-mode')\n  else\n    disabledPackages.splice(disabledPackageIndex, 1)\n  atom.config.set('core.disabledPackages', disabledPackages)\n```\n. Ok, I believed the atom/atom PR referenced above. Thanks @b6pzeusbc54tvhw5jgpyw8pwz2x6gs!\n. We're not developing new features on this package right now, though we still want to fix regressions and keep it working. A lot of people now use vim-mode-plus which is very well maintained.\n. Thanks @plbowers.\n. Thanks @50Wliu!. Sorry for leaving this be for so long, everybody.\n. You're right @trkoch; I'm sorry, not quite fixed yet!\n. @trkoch, can you try it with version 0.19.0? I believe it is now really fixed.\n. I don't know of a quick way, but it would be very easy to write a package that did so! To activate a package programmatically, you just need to do this:\n\n``` javascript\natom.packages.activatePackage(\"vim-mode\")\natom.packages.deactivatePackage(\"vim-mode\")\n```\n. Not that I know of, but it would be easy to write one. See the [PackageManager](https://atom.io/docs/api/latest/PackageManager#) docs.\n. @romgrk I would be open to a PR for this, but since it is a big change, I'd prefer that you maintain it as a separate package for a little while. Is your package published? If so, maybe some people participating in this thread would like to give it a try, or help you develop it!\n. This one gets a :+1: from me too.\n. Cosed via #450. :fireworks: :dancers:\n. We've fixed this bug. In the next Atom release (v1.0.3), you'll just have to do this:\n\n``` coffee\n'atom-text-editor.vim-mode.insert-mode':\n  'j j': 'vim-mode:activate-normal-mode'\n```\n. I think this works now. Let me know if you still have problems with it.\n. @techniq thanks, I see. So currently, `.` is not bound in visual mode. Do you all think that the proper solution would be to add a `.` binding in visual mode?\n. Yeah, I actually like the fact that it stays in visual mode right now; it's kind of convenient. That said, I'm open to changing it to be more like vim if it's the only way to make the repeating use case work.\n. > not adhering to vim's default behaviour here also breaks undoing block operations with 'u'.\n\nThanks for pointing that out @flannelhead. I can see how that sequence would be an important part of someone's muscle memory.\n\nI think we should make it work like vim. If you want to indent lines and stay in visual mode, you can always use Atom's built-in indentation bindings, `Tab` and `Shift-Tab`, or `cmd-]` and `cmd-[`. I'd definitely merge a PR changing this. It would basically amount to reverting this previous PR: https://github.com/atom/vim-mode/pull/368.\n. I believe this is fixed. Please report if it's still a problem.\n. I think this is fixed via #477.\n. I believe this has been fixed. Please let me know if you're still having issues with these commands. Thanks!\n. I can't reproduce this. Can you upgrade to the latest Atom and vim-mode release and try again? What OS are you on? Thanks!\n. I believe this is fixed via #477.\n. Hey all, I know there was some controversy on this. I implemented it because I feel like it's worth trying out for a while. Now that multiple cursors work properly, this behavior makes vim-mode compose really nicely with the `Find and Replace: Select Next` command. I'm thinking that this will allow for nice interplay with other packages that select text too. Previously, selecting text in command mode resulted in a strange experience in my opinion.\n. I believe this was fixed by #477.\n. Can you upgrade to the latest Atom and `vim-mode` and report whether or not this problem still occurs?\n. It sounds like the original question is answered, so I'm going to close this.\n. Sorry for leaving this unanswered for so long. Let me know if you find issues with the new behavior.\n. Can you upgrade to the latest Atom and vim-mode and try again? If there is still a problem, can you open a new issue describing it specifically. I'm going to close this since the original issue is fixed. Thanks!\n. Closing in favor of #468. Visual block mode is not yet implemented.\n. I think this is fixed via atom/atom#9937. It will be out in Atom versions 1.4.0 and 1.4.0-beta0.\n. We're planning on fixing this issue with the core key-mapping system (so that you can just do `j j: 'vim-mode:activate-normal-mode'`) as part of our big bug-fixing effort this month: https://github.com/atom/atom/issues/7995.\n. We've finally fixed this bug. In the next Atom release (v1.0.3), you'll just have to do this:\n\n``` coffee\n'atom-text-editor.vim-mode.insert-mode':\n  'j j': 'vim-mode:activate-normal-mode'\n```\n. I believe this was fixed via 33ec1f55a7e6f678ab059c8249e8197edbf7f736. There is still an issue on upgrading `vim-mode`, but this is captured in a more specific issue, #480.\n. Hey all, I'm going to close this, since some bugs in the undo behavior have been ironed out since it was opened. Please open a new issue if you find more problems with undo. Thanks!\n. I think this was fixed via #477.\n. Hey all, sorry for letting this languish. I believe that as of the next release, multi-cursor support will be pretty solid.\n. Closing this since it was fixed by @benmccormick's own PR, #419.\n. I believe this is fixed. Please let me know if there are still issues with it.\n. This deprecation has been removed.\n. Apologies for the late reply. I believe these are two separate issues. @txchen, I believe your criticism as the one raised in #346. @nicolaiskogheim - I believe the behavior describing is fixed as of bb0ccbefabc9906e09717fe0dcd60c21134686c1.\n. @sknoslo Thanks so much for noticing this; these tests were indeed totally broken. I've merged your fixes and then adapted most of the tests so that they pass now. We can always adjust the assertions if we want to change vim-mode's behavior to match vim's more exactly. One of the tests I had to mark pending because it checks for a vim behavior that we currently don't match at all (`dk` on the first line of the file).\n. I believe this currently works; I don't know when it was fixed though. Please let me know if there are still problems with it.\n. I believe this was fixed by #712.\n. Closing in favor of #586 because it was generated by the error notification system, so other users experiencing this error will be referred to that issue.\n. There's the status bar indicator that switches from `Insert` to `Command`. Would it help if this thing changed color?\n. @michaellenahan you're using a pretty old version of Atom. Try upgrading to 0.184.\n. Yeah, haven't heard back from @cocodrino or @bradleyflood. We can reopen if this is still a problem for you two.\n. All of these work now as far as I can tell. Can you upgrade to the latest Atom and the latest `vim-mode` and see if these problems still occur?\n. Does the pipe character represent the cursor? If so, yes all of these things work for me. Maybe post a gif?\n. @james147 what keyboard layout are you using? Maybe this is a keymap issue.\n. @james147, @javaguirre could you report what the keybinding-resolver shows for each keystroke of `ci(`?\n. Ok, I think this is a keymap problem. To reduce it further, could you try adding this to your `keymap.cson`?\n\n``` coffee\n'*':\n  '[': 'application:about'\n  ']': 'application:about'\n  '(': 'application:about'\n  ')': 'application:about'\n  '<': 'application:about'\n  '>': 'application:about'\n  '\"': 'application:about'\n  \"'\": 'application:about'\n```\n\nWith these mappings, all of these characters should cause the \"About\" dialog to appear. If it doesn't, could you open an issue on the [atom-keymap](https://github.com/atom/atom-keymap) repo?\n. @javaguirre, even the `(` key?\n. Does this key mapping work (with `vim-mode` disabled)?\n\n``` coffee\n'*':\n  'c i (': 'application:about'\n```\n. The key-map system _should_ handle perform matching on keydown events for modifier keys like `shift`, but there must be a bug. It could be specific to linux.\n. Hey all, sorry for the lack of attention to vim-mode. @johnhaley81, is the behavior still incorrect on the latest release? If so, can you describe the actual and expected behaviors again? The nature of the bug seems to have changed since this issue was first created. Thanks!\n. Ok, it seems like the original issue is resolved. Let's do a new issue if there are other problems with undo.\n. Fixed by #410.\n. Can you provide a more detailed explanation of the actual and expected behaviors?\n. I believe `ctrl-n` and `ctrl-p` work by default. You add `ctrl-j` and `ctrl-k` in your own personal config. Add this to your `keymap.cson`:\n\n``` coffee\n'.autocomplete atom-text-editor[mini]':\n  'ctrl-j': 'core:move-down'\n  'ctrl-k': 'core:move-up'\n```\n. @isaachess - as far as I can tell, your change fixes the cursor position for the following operations:\n- `y` in visual mode\n- `yiw` in normal mode\n\nand it breaks the cursor position for line-wise yanks.\n\nI'm ok with merging this and then re-fixing the behavior for line-wise yanks, but would you mind adding tests for the cases that you fixed? It looks like your only changes to the specs were adding `FIXMEs` for the cases that you broke. Thanks for surfacing these bugs.\n. Thanks @bronson. Closing this out.\n. This has been implemented in #547. It doesn't exactly match vim's behavior but it's pretty good.\n. @isaachess sounds great. Feel free to open an issue.\n. A pull request would be welcome!\n. Thanks!\n. @rstacruz can you upgrade to the latest Atom and `vim-mode` and report whether or not this still happens? Thanks.\n. I'm not sure what exactly caused this to regress, but the scroll commands are currently fragile because they're trying to scroll to an exact screen row by calling `editor.scrollToScreenPosition`, which is more for _revealing_ a given screen position, not specifying an exact scroll position. I'll update vim-mode to use the new `{get,set}FirstVisibleScreenRow` model APIs.\n. Thanks for catching this @dcalhoun. It should be fixed in vim-mode v0.64.\n. Thanks for catching this bug @theonlyulti!\n. Thanks!\n. Yeah, I agree that it's a great idea, but should probably be a different plugin. Atom's vim-mode interoperates with Atom's key-mapping and command systems, and can be customized through the same interface as the rest of Atom. @trusktr, it seems like you're talking about using Atom's UI as a front-end for Neovim. Also cool.\n. I'm going to close this; I think it could be interesting, but should definitely be a separate package.\n. Closing in favor of #441. Please help brainstorm about how we should ultimately solve this in that issue. Thanks!\n. @Xe this is an nice idea, but ultimately, if we implement any support for vim's command-mode, it will need to more like what @autochthe describes in #441. I'm closing this in favor of that issue for now. Thanks!\n. Closing, as @lloeki's [ex-mode](https://atom.io/packages/ex-mode) package fulfills this need.\n. I cannot reproduce this, but it sounds like it may be an issue with atom-core, not vim-mode. Possibly, linux-specific. Can you reproduce the behavior with other key mappings? Try this, for example:\n1. In the dev tools, run `atom.keymaps.add(\"test\", {\"body\": {\"ctrl-O ctrl-P\": \"core:confirm\" }})`\n2. Open the keybinding resolver\n3. Slowly type `ctrl`-`shift`-`o`, `ctrl`-`shift`-`p`\n4. Check whether `core:confirm` is resolved\n\nIf so, we should close this issue and re-open it in atom/atom.\n. Ok, I'm closing this since we've traced the problem to a bug in core, not this package. Thanks for catching this.\n. This is a duplicate of #412. I'll look into this one soon. Thanks!\n. Alright guys; I believe the changelog's up to date.\n. Duplicate of #219.\n. FYI, we're currently working on some changes in atom-core that will make it possible to fix this. Currently, autocomplete's use of transactions conflicts with vim-mode's.\n. Nice work!\n. Duplicate of #219. This is a really popular issue and annoys me too. It will be addressed soon. Thanks!\n. Thanks a lot @mdp and @kafunkajunk. A lot of people will be happy to see this fixed.\n. @xarsh, does this happen if you reload Atom after upgrading, or just the first time vim-mode is upgraded?\n. @xarsh, can you post the stack-trace when switching modes after reloading Atom? It looks like the one you posted above originates from uninstalling the old version of the package.\n. Ok, I'm going to close this issue. @falsandtru, if you are still having problems after upgrading Atom to the latest release, can you open another issue?\n. Reproduced.\n. I believe this is fixed as of 0.25. Let me know if there are still problems.\n. Closed by a55749e325f9fe4db88382cb7712b7cfb09702b7.\n. Thanks for pointing this out @dsandstrom. Let me know if you still see any issues with the styling after the latest release.\n. @dsandstrom, I believe that this is a bug in atom core. The problem appears to be intermittent. See atom/atom#4363. I'm going to close for now in favor of that issue.\n. I believe this is fixed as of 0.23. Let me know if you are still having issues.\n. @saidai-no, this is very cool. As  you mentioned, a package dependency mechanism has recently been introduced (atom/atom@99f91fac4864) and is currently in an experimental state. Over the next few weeks, we will be updating some of our core packages to use this new mechanism (see atom/status-bar#43 and atom/grammar-selector#12 for examples). We may make some adjustments to its API, but we intend to stabilize it soon.\n\nIf you are interested in adapting your PR to use the new API, we would love to hear feedback on it. If we do change the API in a way that breaks your code, I can even help you with updating the PR.\n\nThanks!\n. Most of this has been implemented in #540. Feel free to open new issues for adding to the API that has been introduced.\n. @urmyfaith - you should be able to `apm install vim-mode`.\n. Can you post the output of `apm install vim-mode`?\n. It looks like there was a problem with your internet connection. Can you retry, and if you get the same failure, run `GIT_CURL_VERBOSE=1 git clone https://github.com/Benvie/harmony-collections.git`?\n. How does this relate to `vim-mode`?\n. I just released 0.21.0, which should fix this. I'll repoen if there are still issues with this. Thanks!\n. :+1: I'll definitely merge if you add some specs.\n. Great work @ftwillms thanks a lot.\n. No, visual block mode is not currently implemented. It should be coming soon.\n. This ended up getting fixed via #477. Sorry for the slow response; see my comment on [your other PR](https://github.com/atom/vim-mode/pull/473).\n. In my opinion, since this won't help the common case of starting Atom with text editors open, it isn't worth lazy-loading in this case. I'm open to arguments in favor of doing it though.\n. Thanks @bronson. I think we'll need to use some different tactics for improving the package's load time. Closing this out.\n. Hey @brandonhorst, really sorry for the lack of communication here, and on #469. Both of these issues are fixed in the latest release, as part of a larger effort to make multiple cursors work across the board.\n\nI felt that a bigger refactoring was needed to support multiple cursors consistently for all motions and text-objects, and in command mode, visual mode and with operators. I regret not merging your PRs at the time though, because it took me a long time to get around to making this big change.\n\nAnyway, I'm sorry for letting this good work go un-merged, and I hope you're still interested in `vim-mode`. It could definitely use a lot of further contributions, and I'm hoping to spend more time maintaining it. Thanks!\n. @mishavetl what version of Atom are you using? Can you upgrade to the latest version and report whether this still happens?\n. I'd like to merge this, but with just `v`, not the `V` mapping. In regular visual mode, `V` should actually switch to _linewise_ visual mode. That behavior isn't implemented yet, but in the meantime I'd prefer not to add a mapping for `V`.\n. > Maybe @maxbrunsfeld forgot to close this one?\n\n:+1:\n. @QuillyT, I haven't seen this yet. Does it happen in insert mode, or only in command and visual modes? Also, is it just `h`, `j`, `k`, `l` and the arrow keys, or are other motions like `b`, `w` etc affected also?\n. Also, are you using the latest Atom and the latest vim-mode? If not, can you try upgrading and report whether you still see this?\n. @QuillyT thanks a lot for investigating. I see it now; I'll fix it asap.\n. @QuillyT this is fixed on master. I'll release again today. Thanks a lot for your help.\n. :+1:\n. @MrLeeh, I think this may be an issue with Atom-core, not this package. What happens if you add the following to your `keymap.cson` and then type a `>`? I would expect that you would see the 'about' dialog.\n\n``` coffee\n'*':\n  '>': 'application:about'\n```\n. Ok, sorry about this. Would you mind opening an issue on [atom-keymap](https://github.com/atom/atom-keymap), stating that you can't bind the `>` key on windows with your German keyboard layout? Thanks!\n. Is this still happening? I don't know why it happened originally, but I haven't seen it happen for the past few updates.\n. Ok, let's keep it open for now. I think it might be fixed though; can you try and see if anything strange happens on your next update?\n. Ah, I see it. It's because sometimes `vim-mode` fails to deactivate with an error like this:\n\n```\nError deactivating package 'vim-mode' TypeError: Cannot read property 'setInputEnabled' of null\n  at VimState.module.exports.VimState.destroy (/Users/maxbrunsfeld/.atom/packages/vim-mode/lib/vim-state.coffee:46:29)\n  at Disposable.disposalAction (/Users/maxbrunsfeld/.atom/packages/vim-mode/lib/vim-mode.coffee:31:20)\n  at Disposable.module.exports.Disposable.dispose (/Users/maxbrunsfeld/.atom/packages/vim-mode/node_modules/event-kit/lib/disposable.js:21:65)\n  at CompositeDisposable.module.exports.CompositeDisposable.dispose (/Users/maxbrunsfeld/.atom/packages/vim-mode/node_modules/event-kit/lib/composite-disposable.js:28:22)\n  at Object.module.exports.deactivate (/Users/maxbrunsfeld/.atom/packages/vim-mode/lib/vim-mode.coffee:34:18)\n  at Package.module.exports.Package.deactivate (/Applications/Atom.app/Contents/Resources/app/src/package.js:603:21)\n  at PackageManager.module.exports.PackageManager.deactivatePackage (/Applications/Atom.app/Contents/Resources/app/src/package-manager.js:501:12)\n  at PackageManager.module.exports.PackageManager.update (/Applications/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/package-manager.js:215:23)\n  at PackageUpdateView.module.exports.PackageUpdateView.upgrade (/Applications/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/package-update-view.js:175:34)\n  at HTMLButtonElement.<anonymous> (/Applications/Atom.app/Contents/Resources/app/node_modules/settings-view/lib/package-update-view.js:78:24)\n  at HTMLButtonElement.jQuery.event.dispatch (/Applications/Atom.app/Contents/Resources/app/node_modules/jquery/dist/jquery.js:4430:9)\n  at HTMLButtonElement.elemData.handle (/Applications/Atom.app/Contents/Resources/app/node_modules/jquery/dist/jquery.js:4116:28)\n/Applications/Atom.app/Contents/Resources/app/src/package.js:608 module.exports.Package.deactivate\n```\n\nThat error prevents the command listeners from being unregistered.\n. I think this is a duplicate of #403. If you discover anything more about the problem, please post it there. Thanks!\n. Thanks @Fuffi, this is definitely a regression. @jeffschwartz, if you notice bugs in the other text-objects, could you post additional specific issues?\n. Can you open the key-binding resolver (`Key Binding Resolver: Toggle`) and report what it shows when    you are saving the file and the cursor is disappearing? Also, are you using the latest Atom? If not, can you update to the latest Atom and try again?\n. So the cursor disappears when you save the file with `ctrl-s` right? Is that screenshot what you see when you type `ctrl-s`? It looks from that like you are typing `escape` there.\n. Thanks guys. I didn't actually know that vim did this, and we were missing tests for this case. Let me know if there are still issues with that motion.\n. Thanks for catching this!\n. Almost all of the `Find and Replace` package's functionality is controllable via the keyboard. If you hover with your mouse over the buttons on the panel, it will show you the keyboard shortcuts. Do you mean that you would want vim-mode to add additional key-bindings for these actions to make them work like vim?\n. It is indeed possible to operate the search window with the keyboard entirely. I guess you'll need to add a new key mapping for `find-and-replace:show` command.\n. I agree with these suggestions. To make Atom's find-and-replace interoperate with vim's operators and with its repeat system will take some work however. @jacekkopecky and @t9md have some ideas about this, I believe.\n. This is the expected behavior. In vim's visual mode, the `$` motion moves the cursor beyond the end of the line, highlighting the newline. In Atom, selections that extend beyond the end of a line are displayed like this. To display them differently would require implementing an alternative selection system, which I don't think makes sense for this package. Functionally though, this behavior is the same as vim's. The difference is only cosmetic.\n. Let me know if you have any suggestions for how to improve this. Currently though, I don't see a good way.\n. I'm pretty sure that in your screenshot, the selection extends beyond the end of the line. To test this:\n1. Open a file with this text\n\n```\nline-1\nline-2\nline-3\n```\n1. Place cursor at the beginning of the `line-2`\n2. Type `v $`\n3. Type `d`\n4. See that the line-break between `line-2` and `line-3` was deleted, leaving only two lines.\n5. Conclusion: typing `$` in visual mode selects the newline after the text.\n. @jeffschwartz, no problem at all; thanks for participating in the issues on this project!\n. I can't reproduce this. Can you report the output of the keybinding resolver (`Key Binding Resolver: Toggle`) when you press backspace twice?\n. What version of Atom are you using? Can you upgrade to the latest version and report whether or not this still occurs?\n. Ok, thanks. Upgrading Atom to the latest version will fix this error.\n. Yeah I agree, `normal mode` is what I use most often. I'd merge said PR.\n. The root cause is some other package that is leaving an editor transaction open using [the deprecated open-ended transaction APIs](https://github.com/atom/text-buffer/blob/master/src/text-buffer.coffee#L836). The  `gocode` package's deprecated [uses these](https://github.com/typester/atom-gocode/blob/master/lib/autocomplete-view.coffee#L89). Can you disable that package and try again?\n. Thanks @coolwanglu. Sorry for the delay.\n. We don't use assertions in the code; we have a separate suite of specs that we use to verify the code's correctness; see the `spec` directory.\n. >  it might not be able to test all the situations in the test suites.\n\nWhy would you not be able to?\n\n> with an assertion in the function body, it will be auto breakpoint when something is wrong, which will allow us to find the caller\n\nIn _very_ rare cases where a bug has been reported and we cannot reproduce it, we might introduce an extra `throw` statement in the way that you're talking about. Most of the time though, we don't do that.\n. This used to work; I probably broke it in some refactoring. It shouldn't be a big deal to fix, I just haven't gotten around to it because I think the current behavior is ok too. I'd be really glad to merge a PR fixing it if you're interested.\n. You're right; thanks, @jacekkopecky.\n. @coolwanglu this is cool. I'd really like to have some specs for this before merging, but I'm not sure where to point you for examples. Stand by. @nathansobo do you have any advise for testing this? Also, is there any way to accomplish this without constructing a `PaneAxis` manually as @coolwanglu is doing here?\n. Yup, thanks @MarkusSN!\n. Yeah, we'd like to leave ex-mode up to other packages to implement. I believe @lloeki is doing a nice job with the `ex-mode` package mentioned above.\n. I don't think this package is ever going to interpret vimscript. Anyone else have any ideas on how to make it easier to switch from vim?\n. I agree, @gepoch. I think this kind of thing should be implemented in a separate package (if anywhere). It's now possible for other packages to interact with vim-mode through Atom's [services API](https://atom.io/docs/latest/creating-a-package#interacting-with-other-packages-via-services). See #540.\n. Awesome, thanks!\n. I absolutely agree; I've meant to add this for a while. Would you mind adding tests for this behavior? I think it would be sufficient to add one test to [the describe for 'y'](https://github.com/atom/vim-mode/blob/master/spec/operators-spec.coffee#L533) and one test to [the describe for 'p'](https://github.com/atom/vim-mode/blob/master/spec/operators-spec.coffee#L730), each of which says something like:\n\n``` coffee\ndescribe \"when the 'useClipboardAsDefaultRegister' setting is set to true\", ->\n  it \"copies to the clipboard\", ->\n   spyOn(atom.clipboard, \"write\")\n   keydown(\"y\")\n   expect(atom.clipboard.write).toHaveBeenCalledWith(\"something...\")\n```\n\nSee [the docs](https://atom.io/docs/api/latest/Clipboard) for `atom.clipboard`.\n. Perfect. Thanks a lot!\n. Yeah, it should appear in the settings view under the vim mode package.\n. Thanks!\n. Personally, I'd be ok with either behavior, or even a new setting for this. I'm going to give others some time to weigh in on this one.\n. Unanimous. Good enough for me. @jacekkopecky I'll merge if you want to rebase this branch onto master or merge master into it.\n. @jacekkopecky would you mind rebasing this onto master actually? Generally I don't mind a few extra merge commits, but your branch now has 5 merge commits on it.\n. @jacekkopecky no worries. You should keep your branch and this PR. Probably the simplest thing would be to reset your branch back to your original commit, and then merge master into your branch one final time:\n\n```\ngit checkout repeat-till-motions\n\n# Make a copy of this branch just in case anything goes wrong\ngit checkout -b tmp-backup\ngit checkout repeat-till-motions\n\ngit reset --hard 95350b176c5b27f9ffd40f9b1e724aef71951ef9\ngit fetch atom\ngit merge atom/master\n```\n\nYou'll then have to force-push your branch, since you're deleting some commits:\n\n```\ngit push -f origin repeat-till-motions\n```\n. Great. Thanks, @jacekkopecky.\n. I think this is fixed on the latest version of vim-mode. Can you upgrade Atom and vim-mode to the latest versions and report whether you still see this?\n. @jacekkopecky are you interested in looking into this?\n\nEDIT: Oh, nevermind, I was thinking that this related to your work w/ wrapping in `h` and `l`, but this is for the vertical motions.\n. Thanks for reporting this @geoffharcourt.\n. Thanks!\n. Yeah, we need to provide a versioned service. I'd be open to a PR that adds one if you're interested in working on that.\n. Closed via #540.\n. See #491. I believe what Atom does is correct, it just looks different than it looks in vim. I can reopen if you think it's really behaviorally different.\n. @nicolaiskogheim I'm all for adding every last visual and normal mode key-mapping that we can, but this package's approach is to make insert mode behave as much as possible like plain Atom, at least by default.\n\nI'm ok w/ adding settings to enable insert mode features that conflict w/ Atom's, but since these are just mappings, I'd prefer to let people add them in their own `keymap.cson`.\n. Left some minor comments. Otherwise, looks good :+1:.\n. > This may be too early though, as we may be too restrictive early on. I don't know what your versioning policy is, but this may be a worthy goal for vim-mode 1.0.\n\nSounds reasonable to me.\n. @Abukamel can you report your OS, Atom version and vim-mode version? Thanks!\n. So it sounds like we just need to remove the `ctrl-c` binding in insert mode on windows and linux.\n\nIn normal mode, `ctrl-v` is used to enter visual mode (specifically visual-block mode, which is currently a [work in progress](https://github.com/atom/vim-mode/pull/658)), so I don't think we should remove that binding. If you want to paste, you should either enter insert mode, use `p`, or edit your `keymap.cson` to override vim-mode's `ctrl-v` binding.\n\nIs everyone ok with that solution?\n. Oh, thanks for the heads up @morenoh149!\n. Hey @MattKunze, didn't mean to ignore this. @tmm1 and I ended up fixing this a different way with the added benefit of not relying on jQuery any more.\n. Closing this out in favor of #801 since that issue has more detail. Please subscribe to that one for updates.\n. Yeah, nice idea @neiled. It seems like this covers the majority of the use cases for `i t`. We can always make it fancier later.\n. :clap: Wow, that was some really nice debugging @deiwin. Thank you very much!\n. Yeah, I think I introduced this regression during the push to get multi-cursors working everywhere. The `w` motion behaves differently in visual and operator-pending modes, so we would need to differentiate between modes in [`MoveToNextWord::moveCursor`](https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee#L215). I'd love to merge a PR fixing this.\n. @dsandstrom right. Thanks for clarifying.\n. This is a duplicate of #480. It is a vim mode bug; sometimes vim-mode fails to deactivate.\n. There's already an issue for this one: #544.\n. Thanks for the PR! It looks like some of the tests are failing. I'll try to look into why when I get a chance.\n. Yeah, this has been taken care of now. Thanks for looking into it though, @lightsofapollo.\n. Closing as this functionality is implemented in a separate package, as @dsandstrom said.\n. Great. Thanks for sticking with this through the back and forth.\n. Yeah, I don't think we should need to check the mode in those commands. They can be used as operators (e.g. `gUiw` to uppercase the current word), but that shouldn't require any custom code; it should automatically work the same in visual mode and operator mode, as long as the command modifies the current selection.\n. The reason that `~` contained that `if`/`else` is because `~` isn't an operator when used in normal mode; it just changes the character under the cursor.\n. By the way it's awesome that you're implementing this; thanks.\n. @jacekkopecky is on :fire:!\n. :ok_hand: Looks great; sorry for not responding to this one.\n. Generally, the workflow for developing an Atom package is just:\n1. Clone the package wherever you want\n2. Either:\n   - Run `apm link --dev` from the package directory and test your changes in dev mode\n   - Run `apm link` from the package directory and test your changes in normal mode\n\nI recommend `apm link --dev` so that you don't accidentally mess up your normal editing environment.\n. :zap: This will be a big improvement.\n. Yup, replace mode would be nice. I would definitely merge a PR adding a replace mode if you or anyone else is interested in contributing this.\n. It's all yours @jacekkopecky!\n. No, I think I just didn't remember to check back once you added the test for it. And yeah, I think it's totally fine GitHub etiquette to ping a maintainer if nobody's responded your PR. Looking...\n. Great! Thanks for this fix.\n. Thanks for fixing this.\n. This is right.\n. :heart:\n. Thanks for the heads up @antoine1fr. We're trying to do a better job with the changelog.\n. @MattKunze the nice thing about this approach is that it uses the newer `TextEditorElement` class, which avoids having to use `atom-space-pen-views`. That module will work, but it depends on `space-pen` and jQuery, so it'd be nice to use `TextEditorElement` directly instead. It just means we need to do a little more work to update the tests to not use the jQuery interface.\n\n@tmm1 did you still want to work on this? If not, I can pick it up here. I don't think the `hidden-input` thing needs to change. That class is being applied to a `div` that _contains_ the text editor element, not the element itself, so I would think it would continue to work.\n\nIf you're not seeing it have any effect, it might already have been broken.\n. Fixes #544\n. Are you referring to the `d` operator? In vim, that operator writes to the default register (unless a register is specified using the `\"` prefix).\n. @ahmadseleem - this package emulates vim. It seems like you're suggesting a completely different behavior. Maybe you want a different package?\n. It looks like you installed `vim-mode` manually, by cloning this repo into `~/.atom/packages`, rather than using `apm` or the settings-view. That works, but you need to run `apm install` from the `vim-mode` directory first.\n. Closed as @jasper-fu's issue is resolved. @calebmeyer when you see this next, can you click the button to report the issue so I can see your details?\n. You should be able to apply styling to [these classes](https://github.com/atom/vim-mode/blob/master/lib/status-bar-manager.coffee#L4), (`status-bar-vim-mode-insert` etc) in your `styles.less`.\n\ne.g.\n\n``` less\n#status-bar-vim-mode {\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.status-bar-vim-mode-insert {\n  color: red;\n}\n\n.status-bar-vim-mode-visual {\n  color: green;\n}\n\n```\n\nI'm assuming you're talking about changing the whole status bar though? That would be more difficult.\n. I think this is a duplicate of #401; very large repeat counts (e.g. `1234123409875210574564`) currently cause errors. I'm actually going to leave this one open and close #401 so that other error notifications will point the user to this issue.\n. This is a duplicate of #554. This functionality is implemented in a separate package - [ex-mode](https://atom.io/packages/ex-mode).\n. Sweet.\n. I saw some similar code to this in #555. Does that cover this case too, or is this one different?\n. > If so, should I keep the PR with just the specs\n\nGood idea.\n. Great.\n. Other than some minor comments, looks great!\n. @daniloisr Yeah, your approach is good. I would love to merge a PR fixing this. Are you interested in fixing #614 too?\n. Thanks!\n. Thanks a lot for catching that!\n. > Because vim treats them so differently, commands like :r !ls are a fundamentally different from a code perspective, not a memory and footprint perspective. After pressing `:`, a whole new language is parsed and evaluated.\n> \n> Smaller, focused packages are idiomatic in Atom.\n\nI'm the current maintainer of this package, and I agree with @bhuga very strongly on this. Memory and performance-wise it's no big deal at all to add this code to `vim-mode`. But from a project-management/maintenance perspective, I really don't think it makes sense. Implementing `ex`-mode requires specific domain knowledge of an esoteric language. And we'll be able to ship improvements faster if we keep these packages separate.\n\nThat said, @jazzpi I definitely see your point that certain ex-commands _should_ compose properly with vim operators and motions. I think that solving that problem is a very high-priority item on this package's roadmap.\n\n> The issue of ex : commands used as motions is bigger than vim-mode/ex-mode. If there's a package out there that provides extra motions (e.g. cursor-history, jumpy, and more) or when Atom provides more motions (e.g. camelCase motions), we would probably want vim-mode to integrate those seamlessly.\n\n@jacekkopecky has some great ideas about making vim-mode's operators composable with motions from other packages. I'd really like us to pursue _this_ path.\n\n@jazzpi I really apologize for not weighing in earlier on this; I know you've now put some serious work into a PR to integrate these packages. If you're interested maybe you can help in this effort to make vim-mode more modular so that `ex-mode` can integrate with it more easily.\n. >  For the exposure problem, the pop-up is the best I can come up with, does anyone else have ideas?\n\nThere is a proposal, (https://github.com/atom/apm/pull/385) to add a new feature to `apm` called \"package sets\", which will be a one-step way to install a group of related packages. `ex-mode` is one of the examples that people are using in the design of the feature. I'm not sure exactly what it will look like, but I think that when people search for `vim` on atom.io, they could be shown some kind of `vim` package set that also includes `ex-mode`.\n\n> The duplicate codebase is a bit tougher, it might be possible to expose parts via a service though.\n\nI agree. Ultimately, I'd like to actually _remove_ the `/` command from `vim-mode`, and instead make the operators compose properly with motions caused by Atom's bundled `find-and-replace` package. For any other duplication, I'd really like to try to solve the problem by enriching the `vim-mode` service.\n. Fixed by https://github.com/atom/vim-mode/commit/197672907b652c1420b79a184eca021c41bd1913. Thanks!\n. Fixed by https://github.com/atom/vim-mode/commit/197672907b652c1420b79a184eca021c41bd1913. Thanks!\n. Fixed by https://github.com/atom/vim-mode/commit/197672907b652c1420b79a184eca021c41bd1913. Thanks!\n. Fixed by https://github.com/atom/vim-mode/commit/197672907b652c1420b79a184eca021c41bd1913. Thanks!\n. This has been updated already. Can you try updating to the latest Atom and the latest vim-mode? I'll reopen this if you're still experiencing this problem.\n. I think this has been fixed for some time. Can anyone reproduce this with Atom 1.1.0 and vim-mode 0.63?\n. @morenoh149 I think this has been fixed for a few releases; I actually meant to close this. Are you on the latest Atom and vim-mode?\n. I remember a bug like that being fixed... what version of Atom are you on?\n. :+1: Thanks for the update.\n. What versions of Atom and `vim-mode` are you using? As far as I can tell, `vim-mode` has exactly the behavior you want.\n. @daniloisr Thanks for working on this! Because these commands move the cursor and modify the selection, I would really prefer to implement them as subclasses of `Motion`. That way we wouldn't have to duplicate the logic for updating the selection.\n\nYou should be able to implement `Motion::moveCursor(cursor)` so that it positions the cursor correctly using `Cursor::setBufferPosition` or `::setScreenPosition`, and then override `Motion::select` and `Motion::execute` so that they update the `@editor`'s scroll position at the end.\n\nLet me know if that approach makes sense to you, I can give you more detailed guidance if it'd be helpful.\n. Do you still have your commits where you wrote it as a `Motion` subclass? I don't see them on this branch. You could just push them to a different branch if so; I'm curious what it looked like.\n\n> we have the Scroll class that defines some useful stuffs like @scrolloff and @rows\n\nThat's true. I just think the `Motion` class defines a lot _more_ useful stuff than the `Scroll` class, and I think `Motion` is a more correct way to think of these commands, since they can be composed with operators.\n. :+1: Sounds good. Sorry for not giving you feedback earlier. I definitely want to merge this fix.\n. Looks _really_ nice. Re-running the build now.\n. Looks great! Other than some minor comments, I'll merge.\n. Great catch. Thanks!\n. Awesome.\n. Yes! I'd definitely merge a PR adding this.\n. Yeah, we haven't implemented the `iW` text object yet (or `i(` or `ib`). I'd love to merge a PR adding this feature. Otherwise, it's on the roadmap!\n. Thanks @hitsmaxft. Could you either rebase this onto the latest master or merge master into this? Some changes have been made to some of the scroll commands recently, and they appear to conflict with your fix.\n. Thanks for sticking with this @hitsmaxft!\n. Fixed via #630.\n. Thanks for the report. I'm closing this in favor of #642 even though that issue is newer, because it has the default title, which allows the issue to be automatically shown to other people who experience the same issue.\n. So happy that this has finally come to pass.\n. :heart:\n. /cc @vito\n. @davejacobs might appreciate this one too.\n. > Why? Because macros.\n\nWhich vim-mode lacks right now... but multiple cursors somewhat fill that need.\n. You're using a very old version of `vim-mode`. Upgrading to the latest (`0.45.0`) should fix this problem.\n. This looks good. Could you add a test for this? Let me know if you have any questions about our tests.\n. > I'm not sure I should add spec for ap(around-paragraph), since currently identical behavior to ip.\n\nI agree. The spec you added looks good. Thanks for adding this!\n. I like the current behavior, but I'd be willing to merge a PR that added some kind of configuration option for controlling this. Maybe `vim-mode.numberRegex`, which could be set differently in different scopes?\n. :+1: Thanks!\n. Closed via #630.\n. :boom: Thanks!\n. I think this was fixed by #712.\n. Closed via #630.\n. I like this feature too, and I'd be ok with adding it similarly to how it's currently implemented (as opposed to adding some kind of hook) but just _without_ the css change. That way, users and theme authors could customize the look of the highlight just by tweaking CSS. We should also make the hard-coded timeout short so that the duration can be customized via css transitions.\n\nThere is some code in Atom core for doing things like this, but it is not yet documented. It's called 'flashing' a decoration. See [this code](https://github.com/atom/find-and-replace/blob/7c678111b948b442ba2fa7cdbd7882eb5b9422ab/lib/find-view.coffee#L368) in `find-and-replace` and [these private methods](https://github.com/atom/atom/blob/2e2fef0c476d55bf283abafb10bf53b8f6386e75/src/decoration.coffee#L171) on the `Decoration` class.\n\nIf anyone is interested in taking this further, I would suggest trying this:\n\n``` coffee\nfor selection in @editor.getSelections()\n  selection.setBufferRange(selection.getBufferRange(), flash: true)\n```\n\nYou could also try flashing a custom decoration:\n\n``` coffee\nmarker = @editor.markBufferRange(range)\ndecoration = @editor.decorateMarker(marker, type: 'highlight', class: 'yank-highlight')\ndecoration.flash('yank-flash', 50)\n```\n\nThen maybe tweaking the CSS to get the flash looking nice.\n. Yeah, I'd love to disable IME when _not_ in insert mode. Unfortunately, the [ime-mode CSS property](https://developer.mozilla.org/en-US/docs/Web/CSS/ime-mode) that can be used to selectively disable it is not yet implemented in chromium. I'm definitely open to suggestions.\n. > currently there's not a simple way to track the cursor when moving up and down.\n\n@pthrasher cursors have the notion of a 'goal column', similar to other text editors, such that when you move the cursor vertically from a long line onto a shorter one and back again, it will return to the original column. You shouldn't have to do anything special to make this work; the normal cursor movement commands should take care of it.\n\nEDIT: I think calling `TextEditor::setSelectedBufferRanges` clears and recreates the selections, which causes the goal column information to be lost. Thinking about what to do about this...\n. Fixed via #630.\n. Fixed via #630.\n. @benogle this seems like it might be an autocomplete-plus issue. Sorry for the double ping. Accidentally commented on the dup first.\n. Fixed via #630.\n. The slowness was due to lots of stack traces being created because deprecated APIs were being used. Fixed via #630.\n. Great idea. Looks good except for the minor feedback above.\n. Thanks!\n. This should be fixed if you upgrade to the latest Atom version (0.200) and the latest vim-mode version (0.48).\n. > Hitting dd in Vim leaves the cursor at its previous column position.\n\nI haven't seen this. Maybe there's a vim setting that you're using to make it do this? The behavior that I'm familiar with is that the cursor moves to the first non-whitespace character of the next line, as described in #315.\n. Also, what version of vim are you using? Could you record a gif of this happening after opening vim w/ the default configuration?\n\n``` sh\ntouch empty_vimrc\nvim -u empty_vimrc\n```\n. :ok_hand: Perfect; thanks!\n. Looks good except for the comments above.\n. Thanks!\n. @np what version of Atom are you using? The newest versions of vim-mode require a fairly new version of Atom. Can you check if the error persists after upgrading to 0.201?\n. @np have you created or found an issue on atom/atom for the crash that you're experiencing? I would like to take a look at it.\n. @gittyupagain are you using the latest version of `vim-mode` (0.52)?\n. @gittyupagain I see it now. In a certain case, we would fail to detect changes in the history. Fixing...\n. Can you try again with version 0.53?\n. Great. Thanks for checking in about this.\n. @scarolan this command has been implemented and working for a long time. What behavior are you seeing? Can you upgrade to the latest versions of Atom and vim-mode? Also, could you open the keybinding resolver (`Key Binding Resolver: Toggle` in the command pallette) and report its output when you enter `dd`?\n. Closing this in favor of #801 since that issue's description is more exact. Please subscribe to that issue for updates. Thanks!\n. Thanks for catching that @kWhittington.\n. Great work; thanks so much!\n. I think this was just fixed via #684.\n. Ok thanks for clarifying @MarkusSN.\n. Thanks for the report! Just ran into this one myself.\n. Thanks for catching that!\n. It does, but there's an Atom setting that you need to enable: `editor.scrollPastEnd` (or `Scroll Past End` in the settings view). Let me know if this setting does not fix the issue for you.\n. This is great! Thanks @t9md. :tada:\n. Great work @MarkusSN; thanks for fixing this!\n. Thanks for raising this issue; I'd really like to support this. You're right that it would take a fair amount of work. I think the best way to do it would be to add some new API to Atom core that would allow querying the history of commands that were run on an editor.\n\nOne thought that comes to mind is that we could extend the history API in `text-buffer` to allow storing arbitrary metadata on each history entry. We could use that in Atom to store the name of the command that was run.\n\nI think that if we do implement this, it should probably be part of `vim-mode`, not `ex-mode`, because the functionality for handling repeats and counts are in `vim-mode`.\n. /cc @nathansobo\n. ``` javascript\ntokenizedBuffer = atom.workspace.getActiveEditor().displayBuffer.tokenizedBuffer;\ntokenizedBuffer.tokenizedLines.length // 234\ntokenizedBuffer.tokenizedLines[164]   // undefined\n```\n\nIt looks like there are lines missing from the `TokenizedBuffer`. Maybe these lines were initially folded when I opened the file?\n. Is this still happening to you on Atom 0.210 and vim-mode 0.53?\n. @HarolddeBruijn what version of Atom are you using? It looks like you may be using an old one. Could you upgrade to the latest versions of Atom and vim-mode and report whether the problem persists?\n. Atom should be checking for updates automatically every few hours on Mac and Windows. Are you still seeing this error on the latest Atom?\n. > You should update atom itself, I see you have version 0.199.0.\n\n:+1:\n\n> Hi, Im running the latest versions for Atom and vim-mode and still getting this error. Anything else I can do?\n\n@lmartins Are you sure that it's _this same_ error (same stack trace)? It shouldn't happen with the latest Atom. I'm guessing that it's slightly different. Could you open another issue?\n. @itkovian could you share the version of `vim-mode` that  you're running and post the stack trace that appeared in your notification? Sometimes an error with the same message might have a totally different stack trace.\n. @codykrieger Thanks for the report. I think this is a new bug, which I haven't seen before. Have you seen it again? Can you open a separate issue for this?\n. @stormspirit By default `G` should move to the end of the file. What are you seeing it do? If it isn't working, could you share the output of the keybinding-resolver (`Key Binding Resolver: Toggle` from the command palette) when you type that key?\n. Yeah, it looks like upgrading Atom will fix this problem. Let us know what happens when you upgrade Atom, @AnuchitPrasertsang.\n. :+1:\n. Wonderful. Thanks so much.\n. @fritzherald I would go ahead and merge your PR, but our CI is failing, so I don't have a quick way to verify that it doesn't break anything.\r\n\r\nInstead of putting any effort into this codebase, please use vim-mode-plus instead. It is very solid and well maintained, and it should be very easy to switch over. This package is deprecated. I'm sorry that we don't have the resources to maintain it, but we're a small team, there's a lot to do, and it just doesn't make sense when there is a great replacement out there already.. > definitely not in keeping with the deprecation notice in the readme.\r\n\r\nGood point. I have updated the README to explain that we're not maintaining this package anymore.\r\n\r\n> so little regard is shown for the core experience for so many users.\r\n\r\nSorry for not communicating to you the extent to which we've abandoned this package. That was uncool. I get that you put in some work on this and so for you personally, it'd be nice to see it merged.\r\n\r\nBut we've been watching what has happened with `vim-mode-plus`. Overall, it's been great for us and our users that @t9md has taken the lead on maintaining Atom's vim mode. I don't think it's true what you are suggesting - that \"many users\" are severely impacted by having to `apm remove vim-mode && apm install vim-mode-plus`. I'm pretty confident that the vast majority of our users would prefer that I spend as much time as possible improving Atom's performance and building new features, not maintaining packages for which better replacements already exist.. Adding a deprecation notice is a good idea. I think we could just use `atom.notifications` inside of the `activate` hook.. :dragon: Awesome. Thanks so much for fixing this @jacekkopecky.\n. Awesome!\n. This is really well done. My apologies for not seeing this sooner.\n. I think I'd like to _not_ override the `ctrl-e` key-binding by default. I agree with @bronson that by default, insert mode should feel like Atom. It's great to have the command implemented though: anybody who wants this command can just add the keybinding to their `keymap.cson`.\n. Thanks!\n. That makes sense. Probably [toggling the fuzzy-finder](https://github.com/atom/fuzzy-finder/blob/master/keymaps/fuzzy-finder.cson#L8). While there is already an alternative keybinding for that command, `ctrl-p`, I think it's probably best not to override key-bindings that ship with Atom.\n\nIn my opinion, we should simply remove this `return-from-declaration` keybinding on linux and windows, and let users add it (or some modified version like `ctrl-shift-T`) themselves. @bronson @tmm1 thoughts?\n. > And, if vim-mode's normal mode doesn't get to override ctrl-t, then why does it get to override ctrl-u, ctrl-b, ctrl-d, ctrl-f, ctrl-e, etc?\n\nThat's a fair point; since this is only in normal mode, it's not such a big deal to override another binding.\n. Sorry for weighing in so late on this. I don't think tests should _fail_ because of deprecations, because the whole idea of deprecations is that we want to remove some functionality eventually, but we want to give packages some time to upgrade beforehand.\n\nIn general, to me, a CI build should only be red on the master branch if the authors have made a _mistake_. That way, a red build can always be treated to mean \"fix this before pushing any other code changes\". If we make the build go red for lower-priority problems like use of deprecated APIs, then red builds carry less weight.\n. That's a good point: we only surface the deprecations when running the specs in Atom, not at the command line. I think that's something we should fix in Atom core. Could you open an issue about this? If you're interested in fixing it, I think we'd need to do the same [thing that we do in Atom's graphical spec reporter](https://github.com/atom/atom/blob/8586a6f2dcd30dfb4c6595c46e529c819afb7829/spec/atom-reporter.coffee#L223), when we [run the tests in the terminal](https://github.com/atom/atom/blob/8586a6f2dcd30dfb4c6595c46e529c819afb7829/spec/jasmine-helper.coffee#L26). Maybe we could print the deprecation messages to stderr, colored yellow or something.\n. OOH, I just realized that there is _already_ code for doing that, but it only happens on our internal CI system, Janky. We could just change that `if process.env.JANKY_SHA1` to say `if process.env.JANKY_SHA1 or process.env.CI`.\n. @bronson thanks for doing this investigation. I've got some serious maintenance to do on this package. Following up on some of these contributions today...\n. :sparkles:\n. Thanks for doing this. \n\n> the cursor moves to the beginning of the line instead of remaining where it is. I can open another issue to address that if desired\n\nI also noticed that the existing code will not preserve multiple selections/cursors; it destroys all but one cursor afterward by calling `::setSelectedBufferRange()`. It'd be nice to fix both of these things in separate PRs. In the meantime, this looks good. Just waiting on Travis.\n. :tada:\n. Wow nice.\n. Very good idea.\n. Ok great! Congratulations on closing issue #2.\n. Thanks for :fire:ing those.\n. Great!\n. I'd like to just _not_ add the panel at all if the input is meant to be hidden. The problem is that the editor needs to be somewhere on the DOM in order to be focused. Maybe could just make it `1px x 1px` and add it to the body somewhere?\n. Really glad to see this fixed. I left some very minor feedback.\n. :ok_hand: Great!\n. :clap: Nice.\n. Great!\n. :eyes: Thanks!\n. It looks like you're using an old version of vim-mode (and probably an old version of Atom). Closing this out, but let me know if you're having issues after upgrading to Atom 1.0.3 and vim-mode 0.57.\n. Thanks @mattr-!\n. Vim-mode should support soft-wrap. We should remove that paragraph from the README. Have you found any cases where soft-wrapped lines are still treated incorrectly?\n\nRegarding your initial question, I don't think there is a way to do this. However, you can deactivate and activate the package repeatedly, so it should be easy to write a script that deactivates vim-mode while a markdown editor is focused. See the `atom.workspace.observeActivePaneItem()` method.\n. Thanks!\n. Could you add a small test for this, or modify an existing test so that it supplies a count?\n. Yeah, you can run the `Window: Run Package Specs` from Atom, or run `apm test` from the command line.\n. :+1: Thanks @mleeds95! Nice work.\n. @macgyver I believe that is fixed in 0.63.\n. Also, I think this original issue is fixed as of 0.63, so I'm closing this out. Everyone, please let me know if you're still experiencing this problem.\n. Thanks @bronson. Closing this out in favor of #546.\n. Actually, let's keep this issue around instead, since it has the clearest description.\n. Thanks!\n. Does this happen if you disabled `emmet`?\n. Thanks for taking the time to fix this! Could you add a spec in [text-objects-spec](https://github.com/atom/vim-mode/blob/master/spec/text-objects-spec.coffee) for this case?\n. That sounds good.\n\n@mleeds95 do you want to make this change on your branch?\n. Thanks @mleeds95; I don't feel strongly about the commands' behavior in normal mode, but it's great to stop this exception from happening to people.\n. Still thinking about this one. I think your solution with the transaction grouping interval is good, but I'd like to avoid adding more direct interrogation of the text-buffer's `undoStack` if at all possible, because that code is private, so its implementation is subject to change. Maybe what this is telling us is that we need a new public method on `TextBuffer`, like `::hasChangesSinceCheckpoint(checkpoint)` (or maybe just `::getChangesSinceCheckpoint(checkpoint)`). What do you think about that?\n. Thanks @t9md!\n. Interesting solution! Can you post screenshots or GIFs?\n. I love it. Thanks!\n. Great!\n. This is a really cool technique, but I don't think this code belongs inside of `vim-mode`. Maybe it should be a separate `npm` module, like @jacekkopecky said. It could be an executable, for example, that you run with any given node.js code, like this:\n\n``` sh\n$ generate-introspection-report ~/.atom/packages/vim-mode/lib/*.coffee\n```\n. Thanks for the report. Can you reproduce this consistently? Does it happen if you disable `emmet` and `minimap`?\n. I actually think it's ok not to test this.\n\nWould you mind moving this new code up into the package's main module? Specifically, I'd put the call to `atom.workspace.onDidChangeActivePaneItem` right [here](https://github.com/atom/vim-mode/blob/eb12ab4b1467d9370894c7d0ae9fc45bb4a2d508/lib/vim-mode.coffee#L30). I think it would be slightly simpler that way, because the dependency relationship between the package's main module and the `StatusBarManager` would remain unidirectional.\n. :+1:\n. @jacekkopecky Could you explain why we need specific code for handling mouse dragging, rather than treating it like any other means of updating selections?\n\nI thought the problem was just that we prevent cursors from moving to the end of the line, even if they have non-empty selections.\n. @jacekkopecky Can you verify that this fixes the `insert-newline-above` and `join-lines` commands in normal mode? I would think that there would still be problems, because other commands outside of `vim-mode` might need to move the cursor to the end of the line, but won't be able to set the `@processing` flag. I could be wrong though; let me know.\n. Hooking into the `TextEditorComponent's` rendering cycle is an interesting solution, but it's reaching pretty far into private code, and it creates a coupling between the `VimState` and the rendering layer that I'd like to avoid.\n\nI think that instead, we should hook into the lifecycle of Atom's commands. Basically, we'll only need to adjust the cursor position at two times: after mouse dragging ends (exactly the way you have it now), and after each command runs. Then I don't think we'll need to use `onDidChangeSelectionRange`, `onDidChangeCursorPosition`, or `onDidAddCursor` to adjust the cursor position, and I don't think we'll need the `@processing` variable on `VimState`.\n\nIn the above `atom/atom` pull request, I've added a method `atom.commands.onDidDispatch` that we can use for this. This will be available in Atom v1.0.8.\n. I did a little work on this, and it seemed like checking `event.target is @editorElement` was sufficient.\n\nEDIT: oops, `@editorElement`, not `@editor`\n. :heart: This is looking really good. Really excited to get this :ship:ed once Atom 1.0.8 is out.\n. Actually @jacekkopecky I would say leave that in there for a little while. Maybe put a TODO comment to remove it. That way, users w/ old versions of Atom won't get exceptions when they upgrade vim-mode; they just won't have the cursor adjusted.\n. :sparkles:\n. This is because you're using a pretty old version of Atom. Upgrading Atom should fix the problem.\n. /cc @jacekkopecky \n\nMaybe we need to move back to constraining the cursor position within the line explicitly, after each command, rather than doing it inside of an `onDidChangeCursorPosition` observer.\n. :point_up: What @jacekkopecky said.\n. Instead of having that commented-out code, I think it'd be better to explicitly assert `expect(atom.beep).not.toHaveBeenCalled()` when testing commands that _sometimes_ beep, like `n`, `ctrl-a`, etc.\n. No, I think the spy on beep in spec-helper is good. I would just remove the commented out code. I'd prefer to avoid this kind of auxiliary code in this repo; since it isn't automatically exercised by CI, it can tend to become invalid as the code changes.\n. :heart:\n. Oh, I'm sorry for delaying that when this is causing people pain. Pushing out v0.60 now.\n. Awesome thanks for spotting that.\n. I don't think so; I think it's good that insert mode feels like regular Atom. For example, it's kind of nice when inserting text to be able to quickly retype the current word by selecting it using `cmd-d`, and then to continue typing in insert mode.\n\nWhat are your thoughts? If you or other people feel strongly about it, we could make it configurable.\n. Ok, closing this out for now. Thanks!\n. Thanks for finding that existing issue :+1:.\n. Nice!\n. :+1:\n. Are you using the latest version of vim-mode?\n. Does this happen if you disable every package except for vim-mode? What about if run `atom --safe`?\n. Thanks for figuring this out @dnasseri. Could you add a test for this? You should add it somewhere in [this area](https://github.com/atom/vim-mode/blob/2ab86b2942efe6fee81e3d6492ba2020e64ee499/spec/motions-spec.coffee#L1832).\n. :+1: Thanks for this, @alexbooker.\n. Could you report what version of Atom you're using and your OS? Are you able to install `vim-mode` from the command-line?\n\n```\napm install vim-mode\n```\n. :+1: Makes sense. Does our key-mapping system handle `insert` properly?\n. Thanks!\n. I don't think this should be the default, because an important goal of `vim-mode` currently is that it feels like normal Atom when in insert mode. I think it would be great to have an option to enable this behavior though @skosch. I'd be glad to give feedback on and merge a PR adding such an option.\n. Thanks for the report, @tony612.\n\n/cc @benmccormick, in case you're interested in looking into that one as well, despite how long it took me to merge your last PR. :bow:\n. @benmccormick Thanks for figuring that out; sounds exactly right. Let's stay tuned for atom/atom#8906.\n. Yeah, there are probably other things in there that are out-of-date as well. If you're interested in contributing some prose, I'd love to merge a PR fixing up those docs.\n. Perfect. Thanks @tmunro\n. Yeah, `vim-mode` is built to work like Atom in insert mode. If you want to override Atom's own key-bindings in insert mode, everything is all set up for you to do so. The command is: `vim-mode:copy-from-line-below`.\n. Yeah @casimir the binding you mentioned is for normal mode. This issue is talking about [this one](http://vimdoc.sourceforge.net/htmldoc/scroll.html#CTRL-E), for insert mode.\n. Looks good to me. Let's merge and release this as soon as v1.1.0 is out.\n. Fixes https://github.com/atom/vim-mode/issues/903, I believe.\n. Ok, I was wrong about this fixing #903. Investigating...\n. :ok_hand: Thanks!\n. Ok well the code looks very nice. It seems like a paragraph breaks, or empty lines, should be considered sentence boundaries, but other than that, I'd love to :ship: this.\n. > How do we want things to work in \"code files\", where sentences do not occur as the normally would?\n\nI don't think you need to change the behavior based on the filetype or context.\n. Are you happy w/ this as is, for your use case? If so, I'm fine with merging this as long as the tests pass. We can always refine the behavior in a subsequent PR.\n. Thanks @jonasws!\n. Hi, this is nice, but I don't think it should be built into vim-mode itself. People can add this key-binding separately from installing this package.\n. Hey @benmccormick, sorry for the delay on this. Thanks for the fix!\n. This is in 0.62.\n. I think this is a general keymap issue. It was probably introduced by https://github.com/atom/atom-keymap/pull/94, which fixed the handling of multi-key printable character bindings like `j j`.\n\nBasically, when a multi-key binding like that fails to match after one or more characters, we attempt to figure out which characters would have been inserted, and fire text insertion events for those characters. Our [logic for determining the characters](https://github.com/atom/atom-keymap/blob/master/src/helpers.coffee#L224) must not work for these cyrillic characters.\n\n@denysdovhan Could you run this code in the Atom javascript console, and report its output after typing `\u043e` and `\u043b`? You'll need to click on the `KeyboardEvent` object to expand it.\n\n``` js\nwindow.addEventListener('keydown', function(event) {\n  console.log(event, atom.keymaps.keystrokeForKeyboardEvent(event));\n}, true);\n```\n. /cc @nathansobo, so these events' `keyCode` and `keyIdentifier` properties correspond to `j` and `k`, but @denysdovhan actually typed `\u043e` and `\u043b` on a cyrillic keyboard. Is this a symptom of the same underlying problem described in https://github.com/atom/atom-keymap/issues/37?\n. @Rykka could you update to the latest Atom and report whether or not this still happens?\n. I believe this is fixed via #906.\n. > Looks like the cursor no longer updates its position after #906.\n\nI think #906 fixed this problem. What version of Atom are you using?\n. Can maybe record a GIF of the problem you're seeing, and a GIF of what vim does on the same file? I'm not sure I'm understanding the problem you're describing.\n. Weird, that looks like the behavior of 0.62, prior to #906. For me, both the commands work perfectly now. Can you double check that you have the latest version? Not sure what could be going on here. Can you report the contents of your `config.cson`, and your list of installed packages?\n. Yeah, even though you can update a package with Atom running, we don't currently have a way of actually unloading the old code, so you often have to reload your window or restart Atom. Thanks for the update!\n. I'm seeing that the editor scrolls correctly, but the cursor doesn't move correctly as you scroll. Is that what you're seeing @damassi?\n. Hey everyone, sorry for not noticing this before we shipped v1.1.0. I believe this is fixed in vim-mode 0.63. Thanks for the reports.\n. Yeah, this is because there are [key bindings](https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L159) for sequences like `ctrl-w h` and `ctrl-l` for moving between splits, so Atom is waiting to see if you're going to type an `h`, `l`, etc. I'm not sure what's the right thing to do here, because those bindings are an important part of vim, on all platforms. Do you have any thoughts, @easthing?\n. :+1:\n. Gonna :ship: this as is for a quick fix, but hopefully we can come up with something cleaner.\n. What version of vim-mode are you using? I thought I fixed this in 0.63.\n. Oh, I see; this is if you type `ctrl-f` while the cursor is offscreen. It sounds like that needs to be added as a special case. Thanks for the reports.\n. @vigneshm What version of Atom are you using? I believe the bug you're describing has been fixed.\n. And you're sure you're using `vim-mode@0.63`? I can't reproduce this.\n. @Valve Yeah, I changed the issue title to reflect your 2nd item. Does vim actually do that though? In my version of vim, it is impossible to scroll the editor such that the cursor goes offscreen; the cursor always follows the visible area. I'd be interested to see a GIF of the behavior you're describing in vim.\n. I'm not sure what could cause this. Does it happen if you disable all your packages except for vim-mode (`mv ~/.atom/packages ~/.atom/packages.bak && apm install vim-mode`)?\n. I think this is fixed via atom/atom#9937. It will be out in Atom versions 1.4.0 and 1.4.0-beta0.\n. For backwards compatibility, this uses the old code-path if if `TextEditor::setFirstVisibleScreenRow` is not defined.\n. I don't want to do this as part of vim-mode. As @jazzpi said, it's very complicated to parse vim-script correctly and convert between vim's configuration concepts and Atom's I think this would make a great separate package though, @xbeta, if you're interested in creating it!\n. Fixed by #917.\n. Thanks!\n. :ok_hand: Thanks for taking care of this @jonasws!\n. I'm not sure what you mean by 'put the file in vim mode'. When you enable this package it's enabled for all files, all of the time. Are you talking about Normal Mode vs Insert Mode? There is a setting that controls whether you start in insert mode or not: `vim-mode.startInInsertMode`.\n. :+1: Great! Thanks for the update.\n. Of course not! Good luck!\n. Thanks @ssfrr!\n. @kniteli Can you remove the `~/.atom/blob-store` and `~/.atom/compile-cache` and see if this still happens? If this workaround stops this exception from happening, I believe this issue will be fixed in the next release.\n. > fixes #541\n\nI don't think this fixes that issue. That issue is about the `ctrl-c` and `ctrl-v` key-bindings (which map to `copy` and `paste` on Linux and Windows) being overridden by this package. Still, I think this is a good change. Thanks @morenoh149.\n. @dcalhoun @gittyupagain Sorry for the poor experience continuing. I can't reproduce this on my master build of Atom, I'm wondering if it was fixed by either https://github.com/atom/atom/pull/9444 or https://github.com/atom/atom/pull/10062.\n\nIf you're interested, could you try Atom v1.4.0-beta3? The first PR mentioned above is included in that release. If that doesn't help, I believe the fix may be on master, and we're going to release _new_ beta and stable versions by Wednesday.\n. Really sorry for the wait on this one @dcalhoun. I thought I had back-ported the fix to an earlier release :grimacing:.\n. You should be in vim mode immediately, unless you set the `vim-mode. startInInsertMode` setting to `true`.\n. I believe this is the correct behavior. Vim also has folding, and `.` does not repeat folds; it repeats the last buffer change.\n. Yeah, see [the docs](https://atom.io/docs/latest/behind-atom-keymaps-in-depth) for defining key bindings. To find the name of a command that you want to add a keyboard shortcut for, you can search for it in the Command Palette (`cmd-p` on Mac) or use the Key-binding resolver (`cmd-.` on Mac).\n\nIn your case, I believe this is what you're looking for:\n\n``` coffee\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-j': 'window:focus-pane-above'\n  'ctrl-k': 'window:focus-pane-above'\n  'ctrl-h': 'window:focus-pane-on-left'\n  'ctrl-l': 'window:focus-pane-on-right'\n```\n\nLet me know if you have any further questions!\n. Could you report your Atom version, OS, and keyboard layout? Does this problem persist when restarting Atom?\n. Try something like this:\n\n``` less\n#status-bar-vim-mode {\n  &.status-bar-vim-mode-insert {\n    color: red;\n    font-weight: bold;\n  }\n\n  &.status-bar-vim-mode-visual {\n    color: green;\n    font-weight: bold;\n  }\n}\n```\n\nLet me know if you have any further questions!\n. I believe this is fixed in Atom 1.5.4, thanks to a PR by @b6pzeusbc54tvhw5jgpyw8pwz2x6gs.\n. This is something you can add yourself:\n\n`init.coffee`\n\n``` coffee\natom.commands.add 'atom-workspace', 'vim-mode:toggle-enabled', ->\n  disabledPackages = atom.config.get('core.disabledPackages')\n  disabledPackageIndex = disabledPackages.indexOf('vim-mode')\n  if disabledPackageIndex is -1\n    disabledPackages.push('vim-mode')\n  else\n    disabledPackages.splice(disabledPackageIndex, 1)\n  atom.config.set('core.disabledPackages', disabledPackages)\n```\n. Ok, I believed the atom/atom PR referenced above. Thanks @b6pzeusbc54tvhw5jgpyw8pwz2x6gs!\n. We're not developing new features on this package right now, though we still want to fix regressions and keep it working. A lot of people now use vim-mode-plus which is very well maintained.\n. Thanks @plbowers.\n. Thanks @50Wliu!. ",
    "trkoch": "Still disables input for me.\n. Fixed. Thanks! On a side note, do you happen to know if there is a quick way to toggle packages (from the keyboard, preferably)?\n. I can confirm this is still an issue in Atom 0.146.0 / vim-mode 0.17.0. It appears that the pull request never landed in master.\n\nI've been reading the comments on this and related issues and one question that was raised repeatedly is whether it is an issue in Atom or vim-mode itself. I wonder if we reached consensus on this question yet?\n. Thanks! :beers: Also a very readable diff to learn from.\n. Works for me in Atom 0.149.0.\n. :beers: \n. Fixed. Thanks for all your work!\n. Incremental search would be terrific! Is it feasible? Maybe some inspiration can be found in a standalone search plugin for Atom, called [mkleehammer/atom-incremental-search](https://github.com/mkleehammer/atom-incremental-search).\n. Still disables input for me.\n. Fixed. Thanks! On a side note, do you happen to know if there is a quick way to toggle packages (from the keyboard, preferably)?\n. I can confirm this is still an issue in Atom 0.146.0 / vim-mode 0.17.0. It appears that the pull request never landed in master.\n\nI've been reading the comments on this and related issues and one question that was raised repeatedly is whether it is an issue in Atom or vim-mode itself. I wonder if we reached consensus on this question yet?\n. Thanks! :beers: Also a very readable diff to learn from.\n. Works for me in Atom 0.149.0.\n. :beers: \n. Fixed. Thanks for all your work!\n. Incremental search would be terrific! Is it feasible? Maybe some inspiration can be found in a standalone search plugin for Atom, called [mkleehammer/atom-incremental-search](https://github.com/mkleehammer/atom-incremental-search).\n. ",
    "chapgaga": "@maxbrunsfeld is there any plugin which can activate and deactivate other plugins?\n. @maxbrunsfeld is there any plugin which can activate and deactivate other plugins?\n. ",
    "rishair": "I'm hitting the same error when trying to install vim-mode.\n\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm ERR! Error: SELF_SIGNED_CERT_IN_CHAIN\nnpm ERR!     at SecurePair.<anonymous> (tls.js:1362:32)\nnpm ERR!     at SecurePair.EventEmitter.emit (events.js:92:17)\nnpm ERR!     at SecurePair.maybeInitFinished (tls.js:974:10)\nnpm ERR!     at CleartextStream.read [as _read](tls.js:462:15)\nnpm ERR!     at CleartextStream.Readable.read (_stream_readable.js:320:10)\nnpm ERR!     at EncryptedStream.write [as _write](tls.js:366:25)\nnpm ERR!     at doWrite (_stream_writable.js:221:10)\nnpm ERR!     at writeOrBuffer (_stream_writable.js:211:5)\nnpm ERR!     at EncryptedStream.Writable.write (_stream_writable.js:180:11)\nnpm ERR!     at write (_stream_readable.js:583:24)\nnpm ERR! If you need help, you may report this _entire_ log,\nnpm ERR! including the npm and node versions, at:\nnpm ERR!     http://github.com/isaacs/npm/issues\n\nnpm ERR! System Darwin 13.1.0\nnpm ERR! command \"/opt/twitter/Cellar/node/0.10.22/bin/node\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/node_modules/npm/bin/npm-cli.js\" \"--userconfig\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/.apmrc\" \"install\" \"/Users/rishairzay/.atom/.node-gyp/.atom/.apm/vim-mode/0.7.1/package.tgz\" \"--target=0.11.10\" \"--arch=x64\"\nnpm ERR! cwd /private/var/folders/8v/gky3vqgd4234jwlphy8qpqch0000gn/T/apm-install-dir-114128-34645-1rpiwlv\nnpm ERR! node -v v0.10.22\nnpm ERR! npm -v 1.3.18\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /private/var/folders/8v/gky3vqgd4234jwlphy8qpqch0000gn/T/apm-install-dir-114128-34645-1rpiwlv/npm-debug.log\nnpm ERR! not ok code 0\n. Yep, fixed. Thanks!\n. I'm hitting the same error when trying to install vim-mode.\n\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm ERR! Error: SELF_SIGNED_CERT_IN_CHAIN\nnpm ERR!     at SecurePair.<anonymous> (tls.js:1362:32)\nnpm ERR!     at SecurePair.EventEmitter.emit (events.js:92:17)\nnpm ERR!     at SecurePair.maybeInitFinished (tls.js:974:10)\nnpm ERR!     at CleartextStream.read [as _read](tls.js:462:15)\nnpm ERR!     at CleartextStream.Readable.read (_stream_readable.js:320:10)\nnpm ERR!     at EncryptedStream.write [as _write](tls.js:366:25)\nnpm ERR!     at doWrite (_stream_writable.js:221:10)\nnpm ERR!     at writeOrBuffer (_stream_writable.js:211:5)\nnpm ERR!     at EncryptedStream.Writable.write (_stream_writable.js:180:11)\nnpm ERR!     at write (_stream_readable.js:583:24)\nnpm ERR! If you need help, you may report this _entire_ log,\nnpm ERR! including the npm and node versions, at:\nnpm ERR!     http://github.com/isaacs/npm/issues\n\nnpm ERR! System Darwin 13.1.0\nnpm ERR! command \"/opt/twitter/Cellar/node/0.10.22/bin/node\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/node_modules/npm/bin/npm-cli.js\" \"--userconfig\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/.apmrc\" \"install\" \"/Users/rishairzay/.atom/.node-gyp/.atom/.apm/vim-mode/0.7.1/package.tgz\" \"--target=0.11.10\" \"--arch=x64\"\nnpm ERR! cwd /private/var/folders/8v/gky3vqgd4234jwlphy8qpqch0000gn/T/apm-install-dir-114128-34645-1rpiwlv\nnpm ERR! node -v v0.10.22\nnpm ERR! npm -v 1.3.18\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /private/var/folders/8v/gky3vqgd4234jwlphy8qpqch0000gn/T/apm-install-dir-114128-34645-1rpiwlv/npm-debug.log\nnpm ERR! not ok code 0\n. Yep, fixed. Thanks!\n. ",
    "belike81": "This is a known issue with npm. Check this thread - http://discuss.atom.io/t/apm-npm-issue-installing-packages/1715/2\n. This is a known issue with npm. Check this thread - http://discuss.atom.io/t/apm-npm-issue-installing-packages/1715/2\n. ",
    "BrandonMathis": "See issue #88\n. See issue #88\n. ",
    "ashmckenzie": "Hi,\n\nWhen using vim-mode (which totally rocks!) and searching, the ESC problem does still exist :(  If you click 'Find Next' / CMD+G to find the next match (or even 'Find Prev' / CMD+SHIFT+G) the focus is switched out of the find window and ESC doesn't close it, sadly :(\n\nAsh.\n. Sounds like a good solution, I added the fragment above to my personal keymap but without success ?  Running 0.74.0..\n. Hi,\n\nWhen using vim-mode (which totally rocks!) and searching, the ESC problem does still exist :(  If you click 'Find Next' / CMD+G to find the next match (or even 'Find Prev' / CMD+SHIFT+G) the focus is switched out of the find window and ESC doesn't close it, sadly :(\n\nAsh.\n. Sounds like a good solution, I added the fragment above to my personal keymap but without success ?  Running 0.74.0..\n. ",
    "ip2k": "Just wanted to comment on this because none of the solutions out there were working for me, and escape still wasn't closing find. My issue was that I was using Karabiner to remap escape to eject. Once I sorted this, everything works as expected. Hope this helps someone else looking for the answer!\n. Just wanted to comment on this because none of the solutions out there were working for me, and escape still wasn't closing find. My issue was that I was using Karabiner to remap escape to eject. Once I sorted this, everything works as expected. Hope this helps someone else looking for the answer!\n. ",
    "smeggingsmegger": "For anyone else still struggling with this, the following keybinding actually seems to completely fix the issue for me:\n\n```\n'atom-text-editor.vim-mode:not(.normal-mode)':\n  'escape': 'vim-mode:reset-normal-mode'\n\n'atom-workspace':\n  'escape': 'core:cancel'\n```\n. For anyone else still struggling with this, the following keybinding actually seems to completely fix the issue for me:\n\n```\n'atom-text-editor.vim-mode:not(.normal-mode)':\n  'escape': 'vim-mode:reset-normal-mode'\n\n'atom-workspace':\n  'escape': 'core:cancel'\n```\n. ",
    "kundanvishen": "@smeggingsmegger Your solution worked for me. Thanks!\n. @smeggingsmegger Your solution worked for me. Thanks!\n. ",
    "technicalpickles": "This seems to be called 'text object selection' in vimland: http://vimdoc.sourceforge.net/htmldoc/motion.html#object-select . Updating title to reflect that.\n. Added the docs for E in https://github.com/tony612/vim-mode/pull/2\n. Came looking to report this, only to find it fixed already :heart_eyes: \n. This seems to be called 'text object selection' in vimland: http://vimdoc.sourceforge.net/htmldoc/motion.html#object-select . Updating title to reflect that.\n. Added the docs for E in https://github.com/tony612/vim-mode/pull/2\n. Came looking to report this, only to find it fixed already :heart_eyes: \n. ",
    "cj": "I think most motions to delete/change text are missing too like `dt`(some key), `vt`(some key), `ct`(some key).\n. I think most motions to delete/change text are missing too like `dt`(some key), `vt`(some key), `ct`(some key).\n. ",
    "eoinkelly": "I am seeing same behaviour. Will look into it.\n. It seems that calling `@editor.selectUp()` when there is already a selected line clears the selection.\n\n#### file being edited\n\n`_` indicates cursor position\n\n```\nline 1\nline 2_\n```\n\n#### console\n\n``` coffeescript\n@editor.selectLine() # highlights second line in buffer\n@editor.getSelectedText() # => \"line 2\"\n@editor.selectUp() # no line highlighted\n@editor.getSelectedText() #=>  \"\"\n@editor.selectUp() #=>  # highlights first line in buffer\n@editor.getSelectedText() #=>  \"line 1\"\n```\n\nWe can work around this behaviour but is this expected behaviour for `selectUp()`? If not we should probably raise it with them?\n. I am seeing same behaviour. Will look into it.\n. It seems that calling `@editor.selectUp()` when there is already a selected line clears the selection.\n\n#### file being edited\n\n`_` indicates cursor position\n\n```\nline 1\nline 2_\n```\n\n#### console\n\n``` coffeescript\n@editor.selectLine() # highlights second line in buffer\n@editor.getSelectedText() # => \"line 2\"\n@editor.selectUp() # no line highlighted\n@editor.getSelectedText() #=>  \"\"\n@editor.selectUp() #=>  # highlights first line in buffer\n@editor.getSelectedText() #=>  \"line 1\"\n```\n\nWe can work around this behaviour but is this expected behaviour for `selectUp()`? If not we should probably raise it with them?\n. ",
    "openjck": "This also happens with other movements. For example...\n\n**Steps to reproduce:**\n1. Start anywhere in the document\n2. `gg`\n3. `Shift-v`\n4. `Shift-g`\n\n**Expected result:**\nEntire document is selected\n\n**Actual result:**\nEntire document is selected, except for the first line\n. This looks like a duplicate of #161\n. Yep, seeing this here as well.\n. This also happens with other movements. For example...\n\n**Steps to reproduce:**\n1. Start anywhere in the document\n2. `gg`\n3. `Shift-v`\n4. `Shift-g`\n\n**Expected result:**\nEntire document is selected\n\n**Actual result:**\nEntire document is selected, except for the first line\n. This looks like a duplicate of #161\n. Yep, seeing this here as well.\n. ",
    "ndaversa": "+1\n. +1\n. ",
    "henryleacock": "+1\n. +1\n. ",
    "embedthis": "+1\n. Thank you !!\n. +1\n. Thank you !!\n. ",
    "dcalhoun": "I've been working on this and have an almost finished branch. I hope to finish writing specs and submit a PR after the weekend.\n. Would love to see this, as well as support for [CTRL-B](http://vimhelp.appspot.com/scroll.txt.html#CTRL-B) and [CTRL-D](http://vimhelp.appspot.com/scroll.txt.html#CTRL-D).\n. Works for me too. \n. This appears to be fixed via atom/atom#5951.\n. This bug is now back.\n\n**Environment**\n- Mac OS X 10.11.1 (15B42)\n- Atom v1.1.0\n- vim-mode v0.6.3\n. @as-cii any thoughts as to why this bug returned?\n. No, I'm running the latest Atom (1.3.1) currently and the bug still exists. Yes, this behavior has always been consistent. It was fixed briefly with atom/atom#5951, but came back in ~1.1.0 and happens consistently.\n. I've noticed this as well with the Atom 0.199.0 release. It was not like this with the previous release. \n. This bug appears for me when attempting to use registers. Commands like...\n- `\"ayy`\n- `\"ap`\n- `\"Bdw`\n. This bug appears to affect **all scroll commands** (e.g. \u2013 [half page down](http://vimhelp.appspot.com/scroll.txt.html#CTRL-D), [page down](http://vimhelp.appspot.com/scroll.txt.html#CTRL-F)).\n\nIf you use <kbd>ctrl</kbd> + <kbd>f</kbd> to scroll to the bottom of the document, you end up a few lines (~10) above the bottom with the cursor off the screen. After reaching the bottom of the document, if you press <kbd>k</kbd>, the window jumps to reveal the bottom of the document and the cursor.\n. I never tried Atom v1.4.0-beta, but this bug is definitely still a problem in the v1.4.0 release.\n. Both issues appear to be resolved in Atom v1.4.2.\n. @natesholland if you desire to implement this without the prompt, I'd recommend reviewing the [vim-mode-zz](https://github.com/sQu1rr/vim-mode-zz/blob/master/lib/vim-mode-zz.coffee) package. It currently does what you desire. You could attempt to port it's abilities into vim-mode package.\n. I've been working on this and have an almost finished branch. I hope to finish writing specs and submit a PR after the weekend.\n. Would love to see this, as well as support for [CTRL-B](http://vimhelp.appspot.com/scroll.txt.html#CTRL-B) and [CTRL-D](http://vimhelp.appspot.com/scroll.txt.html#CTRL-D).\n. Works for me too. \n. This appears to be fixed via atom/atom#5951.\n. This bug is now back.\n\n**Environment**\n- Mac OS X 10.11.1 (15B42)\n- Atom v1.1.0\n- vim-mode v0.6.3\n. @as-cii any thoughts as to why this bug returned?\n. No, I'm running the latest Atom (1.3.1) currently and the bug still exists. Yes, this behavior has always been consistent. It was fixed briefly with atom/atom#5951, but came back in ~1.1.0 and happens consistently.\n. I've noticed this as well with the Atom 0.199.0 release. It was not like this with the previous release. \n. This bug appears for me when attempting to use registers. Commands like...\n- `\"ayy`\n- `\"ap`\n- `\"Bdw`\n. This bug appears to affect **all scroll commands** (e.g. \u2013 [half page down](http://vimhelp.appspot.com/scroll.txt.html#CTRL-D), [page down](http://vimhelp.appspot.com/scroll.txt.html#CTRL-F)).\n\nIf you use <kbd>ctrl</kbd> + <kbd>f</kbd> to scroll to the bottom of the document, you end up a few lines (~10) above the bottom with the cursor off the screen. After reaching the bottom of the document, if you press <kbd>k</kbd>, the window jumps to reveal the bottom of the document and the cursor.\n. I never tried Atom v1.4.0-beta, but this bug is definitely still a problem in the v1.4.0 release.\n. Both issues appear to be resolved in Atom v1.4.2.\n. @natesholland if you desire to implement this without the prompt, I'd recommend reviewing the [vim-mode-zz](https://github.com/sQu1rr/vim-mode-zz/blob/master/lib/vim-mode-zz.coffee) package. It currently does what you desire. You could attempt to port it's abilities into vim-mode package.\n. ",
    "kikyous": "+!\n. +!\n. ",
    "tony612": "Why not adding some keymaps `ctrl-w ctrl-h[j,k,l]`(`ctrl-w h[j,k,l]`)?\n. @dougblack got it\n. @mcolyer I pushed the new code. Does this match your suggestion? And I refactored the code, but don't know if you guys like it :smiley: \n. @bhuga So.. should we try to make it a motion or just bind it to bracker-matcher?\n. @zenhob Yeah, I also use it in my personal config.Maybe we can do this until we find a better way.\n. @carlosdcastillo Thanks for that\n. @mcolyer Oh, sorry I didn't notice that issue. I don't mind it :)\n. I'm glad to.But it will be in a few hours cause I'm in China :D\n\nOn Monday, March 10, 2014, Ben Lavender notifications@github.com wrote:\n\n> @tony612 https://github.com/tony612 I see the issue too. It's probably\n> something silly in that motion...do you feel comfortable putting together a\n> pull with a failing test case and fix?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/151#issuecomment-37132778\n> .\n\n## \n\n*No track in the heavens *\n-                      but I have winged.*\n. @bhuga The tests all pass.Please review.\nbtw, should I add this fix to the CHANGELOG? Or you guys can do this?\n. @zenhob I've merged the PR by @technicalpickles , so the doc is there. Please merge\n. :+1: \n. @bhuga rebased and added the changelog, please merge\n. Looks good. Though it behaves a little differently with vim, but I think it's ok to publish.\n. well, it seems related to this PR https://github.com/atom/vim-mode/pull/275\n. @bhuga Well, I'm glad to look into this.Hope it's not difficult to solve them.\n. @bhuga It's different from #272 , which implement gg and G in visual(linewise) mode. But this implement n-gg in visual(linewise and characterwise) mode. Or in other words, this one expands #272 \n. Agree absolutely.\n\nOn Monday, June 2, 2014, Andrew Nordman notifications@github.com wrote:\n\n> As for issue #2 https://github.com/atom/vim-mode/issues/2, I think G\n> should be its own MoveToEndOfFile to handle the edge-cases that\n> differentiate from MoveToLine. Whether this is part of this PR or another\n> PR is another conversation, but much like MoveToStartOfFile, G motion has\n> edge-cases separate from MoveToLine that really make the case for its own\n> method.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/275#issuecomment-44794522.\n\n## \n\nBest\nTony Han\nhttp://tony612.com\n. +1\n. @maxbrunsfeld I found another bug for the latest version:\n\n`ab|c.def` \u2192 type ciw \u2192 `.def` (expected behaviour)\n`abc|.def` \u2192 type ciw \u2192 `def` (expected: .def)\n. Why not adding some keymaps `ctrl-w ctrl-h[j,k,l]`(`ctrl-w h[j,k,l]`)?\n. @dougblack got it\n. @mcolyer I pushed the new code. Does this match your suggestion? And I refactored the code, but don't know if you guys like it :smiley: \n. @bhuga So.. should we try to make it a motion or just bind it to bracker-matcher?\n. @zenhob Yeah, I also use it in my personal config.Maybe we can do this until we find a better way.\n. @carlosdcastillo Thanks for that\n. @mcolyer Oh, sorry I didn't notice that issue. I don't mind it :)\n. I'm glad to.But it will be in a few hours cause I'm in China :D\n\nOn Monday, March 10, 2014, Ben Lavender notifications@github.com wrote:\n\n> @tony612 https://github.com/tony612 I see the issue too. It's probably\n> something silly in that motion...do you feel comfortable putting together a\n> pull with a failing test case and fix?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/151#issuecomment-37132778\n> .\n\n## \n\n*No track in the heavens *\n-                      but I have winged.*\n. @bhuga The tests all pass.Please review.\nbtw, should I add this fix to the CHANGELOG? Or you guys can do this?\n. @zenhob I've merged the PR by @technicalpickles , so the doc is there. Please merge\n. :+1: \n. @bhuga rebased and added the changelog, please merge\n. Looks good. Though it behaves a little differently with vim, but I think it's ok to publish.\n. well, it seems related to this PR https://github.com/atom/vim-mode/pull/275\n. @bhuga Well, I'm glad to look into this.Hope it's not difficult to solve them.\n. @bhuga It's different from #272 , which implement gg and G in visual(linewise) mode. But this implement n-gg in visual(linewise and characterwise) mode. Or in other words, this one expands #272 \n. Agree absolutely.\n\nOn Monday, June 2, 2014, Andrew Nordman notifications@github.com wrote:\n\n> As for issue #2 https://github.com/atom/vim-mode/issues/2, I think G\n> should be its own MoveToEndOfFile to handle the edge-cases that\n> differentiate from MoveToLine. Whether this is part of this PR or another\n> PR is another conversation, but much like MoveToStartOfFile, G motion has\n> edge-cases separate from MoveToLine that really make the case for its own\n> method.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/275#issuecomment-44794522.\n\n## \n\nBest\nTony Han\nhttp://tony612.com\n. +1\n. @maxbrunsfeld I found another bug for the latest version:\n\n`ab|c.def` \u2192 type ciw \u2192 `.def` (expected behaviour)\n`abc|.def` \u2192 type ciw \u2192 `def` (expected: .def)\n. ",
    "fogine": "It would be really nice if it would be possible to focus `Tree view` if visible, from adjacent pane with `<c-w> h`.\n. possible solution already [here](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175)\n. It would be really nice if it would be possible to focus `Tree view` if visible, from adjacent pane with `<c-w> h`.\n. possible solution already [here](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175)\n. ",
    "benatkin": ":+1:\n. :+1:\n. ",
    "tmm1": "fixed in #197 \n. Cool, that PR looks much more comprehensive.\n. @bhuga If you point me at the code I'll take a stab here.\n. Yay, the previous behavior in soft-wrap mode was driving me nuts.\n. This was fixed in the latest release.\n. Issue is fixed on master.\n. Feel free to pick this up. I noticed the old deprecated class had some special handling for hidden-input, and I wasn't able to make the new view hidden.\n. > The input used to show up, but it was closed after the first character that was typed.\n\nIn my testing it never used to show up. There's code in the plugin to explicitly hide it in the singleChar case.\n\nOn this PR, it does show up and it goes away as soon as you type a character. But it's awkward to see it pop up briefly and definitely distracting.\n. Thanks @maxbrunsfeld, this is working great now!\n. There was some concern that this would affect windows users where CTRL-t is used for an existing atom feature\n. fixed in #197 \n. Cool, that PR looks much more comprehensive.\n. @bhuga If you point me at the code I'll take a stab here.\n. Yay, the previous behavior in soft-wrap mode was driving me nuts.\n. This was fixed in the latest release.\n. Issue is fixed on master.\n. Feel free to pick this up. I noticed the old deprecated class had some special handling for hidden-input, and I wasn't able to make the new view hidden.\n. > The input used to show up, but it was closed after the first character that was typed.\n\nIn my testing it never used to show up. There's code in the plugin to explicitly hide it in the singleChar case.\n\nOn this PR, it does show up and it goes away as soon as you type a character. But it's awkward to see it pop up briefly and definitely distracting.\n. Thanks @maxbrunsfeld, this is working great now!\n. There was some concern that this would affect windows users where CTRL-t is used for an existing atom feature\n. ",
    "ghost": "@zenhob using the `atom-macros` package I was able to define a couple macros that do exactly this:\n\n```\nfindWordUnderCursor = (direction) ->\n    if !getActiveTextEditor().getSelection().getText()\n        dispatchEditorCommand 'editor:select-word'\n        dispatchEditorCommand 'find-and-replace:use-selection-as-find-pattern'\n    dispatchEditorCommand direction\n\n@findNextWordUnderCursor = ->\n    findWordUnderCursor 'find-and-replace:find-next'\n\n@findPreviousWordUnderCursor = ->\n    findWordUnderCursor 'find-and-replace:find-previous'\n```\n\nI think this behavior is more true to vim's `*` than the `select-next` command.\n. @jacekkopecky eh, define \"related\" ;-)\n\nThe above code achieves the desired behavior only if you install another package to enable it. It's basically just a workaround, not really relevant to vim-mode directly, no.\n. +1\n. Getting errors also after updating\n\n**Atom Version**: 1.2.4\n**System**: elementary OS\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.64.0\n\n### Stack Trace\n\nFailed to load the vim-mode package\n\n```\nAt Cannot find module 'grim'\n\nError: Cannot find module 'grim'\n    at Module._resolveFilename (module.js:336:15)\n    at Function.Module._resolveFilename (/usr/share/atom/resources/app.asar/src/module-cache.js:383:52)\n    at Function.Module._load (module.js:286:25)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/home/herbert/.atom/packages/vim-mode/lib/vim-state.coffee:1:9)\n    at Object.<anonymous> (/home/herbert/.atom/packages/vim-mode/lib/vim-state.coffee:1:1)\n    at Module._compile (module.js:434:26)\n    at Object.defineProperty.value [as .coffee] (/usr/share/atom/resources/app.asar/src/compile-cache.js:190:21)\n    at Module.load (module.js:355:32)\n```\n\n### Commands\n\n```\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"projectHome\": \"/home/herbert/Projects\",\n    \"autoHideMenuBar\": true,\n    \"themes\": [\n      \"one-dark-ui\",\n      \"an-old-hope-syntax\"\n    ],\n    \"packagesWithKeymapsDisabled\": []\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nan-old-hope-syntax, v0.4.1\nlinter, v1.11.3\nlinter-flake8, v1.9.3\nlinter-js-standard, v3.2.1\nvim-mode, v0.64.0\nvim-surround, v0.8.1\n\n# Dev\nNo dev packages\n```\n. I've installed the [keyboard-localization](https://atom.io/packages/keyboard-localization) solved #1012 but the search feature I didn't get working.\n\nAtom 1.7.2 with vim-mode 0.65.0 too.\n. I solved the problem. My keyboard uses pt-BR layout, I had to update the file `%userprofile%\\.atom\\packages\\keyboard-localization\\lib\\keymaps\\pt_BR.json` with the following lines: `\"193\": {\"unshifted\": 47}`.\n\nSo simple...\n. The [keyboard-localization](https://atom.io/packages/keyboard-localization) solved the problem.\n. @zenhob using the `atom-macros` package I was able to define a couple macros that do exactly this:\n\n```\nfindWordUnderCursor = (direction) ->\n    if !getActiveTextEditor().getSelection().getText()\n        dispatchEditorCommand 'editor:select-word'\n        dispatchEditorCommand 'find-and-replace:use-selection-as-find-pattern'\n    dispatchEditorCommand direction\n\n@findNextWordUnderCursor = ->\n    findWordUnderCursor 'find-and-replace:find-next'\n\n@findPreviousWordUnderCursor = ->\n    findWordUnderCursor 'find-and-replace:find-previous'\n```\n\nI think this behavior is more true to vim's `*` than the `select-next` command.\n. @jacekkopecky eh, define \"related\" ;-)\n\nThe above code achieves the desired behavior only if you install another package to enable it. It's basically just a workaround, not really relevant to vim-mode directly, no.\n. +1\n. Getting errors also after updating\n\n**Atom Version**: 1.2.4\n**System**: elementary OS\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.64.0\n\n### Stack Trace\n\nFailed to load the vim-mode package\n\n```\nAt Cannot find module 'grim'\n\nError: Cannot find module 'grim'\n    at Module._resolveFilename (module.js:336:15)\n    at Function.Module._resolveFilename (/usr/share/atom/resources/app.asar/src/module-cache.js:383:52)\n    at Function.Module._load (module.js:286:25)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Object.<anonymous> (/home/herbert/.atom/packages/vim-mode/lib/vim-state.coffee:1:9)\n    at Object.<anonymous> (/home/herbert/.atom/packages/vim-mode/lib/vim-state.coffee:1:1)\n    at Module._compile (module.js:434:26)\n    at Object.defineProperty.value [as .coffee] (/usr/share/atom/resources/app.asar/src/compile-cache.js:190:21)\n    at Module.load (module.js:355:32)\n```\n\n### Commands\n\n```\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"projectHome\": \"/home/herbert/Projects\",\n    \"autoHideMenuBar\": true,\n    \"themes\": [\n      \"one-dark-ui\",\n      \"an-old-hope-syntax\"\n    ],\n    \"packagesWithKeymapsDisabled\": []\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nan-old-hope-syntax, v0.4.1\nlinter, v1.11.3\nlinter-flake8, v1.9.3\nlinter-js-standard, v3.2.1\nvim-mode, v0.64.0\nvim-surround, v0.8.1\n\n# Dev\nNo dev packages\n```\n. I've installed the [keyboard-localization](https://atom.io/packages/keyboard-localization) solved #1012 but the search feature I didn't get working.\n\nAtom 1.7.2 with vim-mode 0.65.0 too.\n. I solved the problem. My keyboard uses pt-BR layout, I had to update the file `%userprofile%\\.atom\\packages\\keyboard-localization\\lib\\keymaps\\pt_BR.json` with the following lines: `\"193\": {\"unshifted\": 47}`.\n\nSo simple...\n. The [keyboard-localization](https://atom.io/packages/keyboard-localization) solved the problem.\n. ",
    "ZuBB": "@zenhob your solution does not work for me. is it outdated?\n. thanks @trusktr! your solution does work. \n. @zenhob your solution does not work for me. is it outdated?\n. thanks @trusktr! your solution does work. \n. ",
    "dm-wyncode": "@zenhob I tried as well and did not achieve the expected result.\n. @zenhob I tried as well and did not achieve the expected result.\n. ",
    "daturkel": "Hmm, I just tried again and now it _does_ work. I'm not sure what was going on before (I could go up but not down) but it seems to be fine.\n. Hmm, I just tried again and now it _does_ work. I'm not sure what was going on before (I could go up but not down) but it seems to be fine.\n. ",
    "qdaxb": "I updated plugin to latest version and the bug has gone.\n. I updated plugin to latest version and the bug has gone.\n. ",
    "aymericbeaumet": "I think you mean `Shift + 4 = $` ?\n. I think you mean `Shift + 4 = $` ?\n. ",
    "blixt": "Sorry, yes. :)\n. Sorry, yes. :)\n. ",
    "cschneid": "Yep, will do, thanks for the feedback.\n. I had a question about the data structure actually stored in the `@registers` array - it's a several-field object.  Are there helper functions for working with that format?\n\nI'd like to implement the capital letter registers, which append to that letter (yanking into `A` appends to whatever is in `a`). I gave up when I couldn't do a simple `+` on what was there.  Is there a way to work with that structure?\n. Updated this, although I need a bit of help making the spec for `%` work. The `@editor` variable isn't responding to `getUri()` the way it does in the live editor.\n. Already did, afaik, this should merge into the current master.\n. Updated that spec, and enhanced docs on that linux FIXME. \n. Yep, will do, thanks for the feedback.\n. I had a question about the data structure actually stored in the `@registers` array - it's a several-field object.  Are there helper functions for working with that format?\n\nI'd like to implement the capital letter registers, which append to that letter (yanking into `A` appends to whatever is in `a`). I gave up when I couldn't do a simple `+` on what was there.  Is there a way to work with that structure?\n. Updated this, although I need a bit of help making the spec for `%` work. The `@editor` variable isn't responding to `getUri()` the way it does in the live editor.\n. Already did, afaik, this should merge into the current master.\n. Updated that spec, and enhanced docs on that linux FIXME. \n. ",
    "HangingClowns": "+1 killer feature if you have this\n. +1 killer feature if you have this\n. ",
    "liyaodong": "`init.coffee`\n\n```\natom.commands.add 'atom-text-editor', 'custom:wait-key-press', (e)->\n  oe = e.originalEvent\n  char = String.fromCharCode(oe.which)\n  char = char.toLowerCase() unless oe.shift\n  atom.workspace.getActivePaneItem().insertText(char)\n```\n\n`keymap.cson`\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'custom:wait-key-press'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nworked for me , atom version `0.207.0`\n. `init.coffee`\n\n```\natom.commands.add 'atom-text-editor', 'custom:wait-key-press', (e)->\n  oe = e.originalEvent\n  char = String.fromCharCode(oe.which)\n  char = char.toLowerCase() unless oe.shift\n  atom.workspace.getActivePaneItem().insertText(char)\n```\n\n`keymap.cson`\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'custom:wait-key-press'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nworked for me , atom version `0.207.0`\n. `init.coffee`\n\n``` coffee\natom.commands.add 'atom-text-editor', 'custom:wait-key-press', (e)->\n  oe = e.originalEvent\n  char = String.fromCharCode(oe.which)\n  char = char.toLowerCase() unless oe.shift\n  atom.workspace.getActivePaneItem().insertText(char)\n```\n\n`keymap.cson`\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'custom:wait-key-press'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nworked for me , atom version `0.207.0`\n. But it works for me , my atom version is `0.208.0` , I can type `j` and if I type `jasdfasdf` the `j`  will immediately appear . if I just type `j` wait 2s `j` will appear . \n\n@ahmadseleem \n. Sorry, I don't know how to control the delay , In fact I think it doesn't matter , because we usually type a `word` , A few cases we just type `j` . and the comma ... I can type it , Maybe because other reason : )\n. so clever , we can detect char code, if it's character like `abcd` then convert it \n. I got same problem , must hitting `escape` to exit visual mode .\n. `init.coffee`\n\n```\natom.commands.add 'atom-text-editor', 'custom:wait-key-press', (e)->\n  oe = e.originalEvent\n  char = String.fromCharCode(oe.which)\n  char = char.toLowerCase() unless oe.shift\n  atom.workspace.getActivePaneItem().insertText(char)\n```\n\n`keymap.cson`\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'custom:wait-key-press'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nworked for me , atom version `0.207.0`\n. `init.coffee`\n\n```\natom.commands.add 'atom-text-editor', 'custom:wait-key-press', (e)->\n  oe = e.originalEvent\n  char = String.fromCharCode(oe.which)\n  char = char.toLowerCase() unless oe.shift\n  atom.workspace.getActivePaneItem().insertText(char)\n```\n\n`keymap.cson`\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'custom:wait-key-press'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nworked for me , atom version `0.207.0`\n. `init.coffee`\n\n``` coffee\natom.commands.add 'atom-text-editor', 'custom:wait-key-press', (e)->\n  oe = e.originalEvent\n  char = String.fromCharCode(oe.which)\n  char = char.toLowerCase() unless oe.shift\n  atom.workspace.getActivePaneItem().insertText(char)\n```\n\n`keymap.cson`\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'custom:wait-key-press'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nworked for me , atom version `0.207.0`\n. But it works for me , my atom version is `0.208.0` , I can type `j` and if I type `jasdfasdf` the `j`  will immediately appear . if I just type `j` wait 2s `j` will appear . \n\n@ahmadseleem \n. Sorry, I don't know how to control the delay , In fact I think it doesn't matter , because we usually type a `word` , A few cases we just type `j` . and the comma ... I can type it , Maybe because other reason : )\n. so clever , we can detect char code, if it's character like `abcd` then convert it \n. I got same problem , must hitting `escape` to exit visual mode .\n. ",
    "eventualbuddha": "Works for me too! Doesn't work in version `0.206.0`, so make sure you're fully updated if you're trying this out.\n. Works for me too! Doesn't work in version `0.206.0`, so make sure you're fully updated if you're trying this out.\n. ",
    "adinapoli": "Worked for me as well! (Version `1.0.2`)\n. Worked for me as well! (Version `1.0.2`)\n. ",
    "vv13": "I'm 1.8.0, i use\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'custom:wait-key-press'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:reset-normal-mode'\n```\n. I'm 1.8.0, i use\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'custom:wait-key-press'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:reset-normal-mode'\n```\n. ",
    "importjake": "This still doesn't quite work for mapping something like `jk` to activate command mode. Sure it will work. But now in insert mode I have to press `j` twice to register one j character inside an insert buffer.\n. @nathansobo From what I have seen (say i have `jk` mapped to esc) vim won't place a j when insert mode until either 1. A timeout occurs, 2. A key other than k is pressed after `j` (then j and the next key will both appear at the same time) or 3. `k` is pressed after `j` triggering the escape binding \n. how would you go about the setTimeout in coffee script?\n. This still doesn't quite work for mapping something like `jk` to activate command mode. Sure it will work. But now in insert mode I have to press `j` twice to register one j character inside an insert buffer.\n. @nathansobo From what I have seen (say i have `jk` mapped to esc) vim won't place a j when insert mode until either 1. A timeout occurs, 2. A key other than k is pressed after `j` (then j and the next key will both appear at the same time) or 3. `k` is pressed after `j` triggering the escape binding \n. how would you go about the setTimeout in coffee script?\n. ",
    "drbraden": "@schmitzjake I have observed different behavior in vim on ubuntu 12.04.  In your case of \"jk\", when I type j the j appears immediately, but the cursor doesn't advance until either the timeout of one second is reached or I type another key that doesn't have a mapping starting with j.\n\nIf I type k before the timeout, the j is removed from the screen and the cursor moves one character to the left (unless already at column 0).\n. I always remap \"jj\" to escape and it works really well.  Super easy to type and I don't remember ever having to type a literal \"jj\".  Not the same as chords like Arpeggio enables, but I find it very useful.\n\nThis is how I did it in Atom's keymap file:\n\n```\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nI only enabled it for insert mode so it won't interfere with \"j\" as a movement key.\n. Oh, oops, you're right.  I guess I just haven't had to type a j in insert mode since I made the change.  It works fine in vim and sublime.\n\nIt looks like there is an \"operator-pending\" mode that **might** be used to get this functionality without discarding the first key when subsequent keys don't match a mapping.  It's in the master branch, but it's not in the current release, yet.\n\nIn master, they use operator-pending mode to implement \"d i w\" while in command mode, so I played around a bit trying to do something similar, but so far I haven't been able to get it to work.\n. Here is a currently working method (as of v1.0.0) of exiting insert mode with \"jj\" (or the more common \"jk\" with a minor edit to the keymap.cson change):\n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-proceeded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-command-mode')\n\n#keymap.cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'exit-insert-mode-if-proceeded-by-j'\n```\n\nCredit for this goes to @rdlugosz for his comment at https://github.com/atom/vim-mode/issues/334#issuecomment-85603175\n. @lambdaburrito Glad to hear it!  I've spent way too much time chasing down a solution for this, or finding a new one after a breaking upgrade, so I was hoping I could save others the time :smile:\n. @schmitzjake I have observed different behavior in vim on ubuntu 12.04.  In your case of \"jk\", when I type j the j appears immediately, but the cursor doesn't advance until either the timeout of one second is reached or I type another key that doesn't have a mapping starting with j.\n\nIf I type k before the timeout, the j is removed from the screen and the cursor moves one character to the left (unless already at column 0).\n. I always remap \"jj\" to escape and it works really well.  Super easy to type and I don't remember ever having to type a literal \"jj\".  Not the same as chords like Arpeggio enables, but I find it very useful.\n\nThis is how I did it in Atom's keymap file:\n\n```\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nI only enabled it for insert mode so it won't interfere with \"j\" as a movement key.\n. Oh, oops, you're right.  I guess I just haven't had to type a j in insert mode since I made the change.  It works fine in vim and sublime.\n\nIt looks like there is an \"operator-pending\" mode that **might** be used to get this functionality without discarding the first key when subsequent keys don't match a mapping.  It's in the master branch, but it's not in the current release, yet.\n\nIn master, they use operator-pending mode to implement \"d i w\" while in command mode, so I played around a bit trying to do something similar, but so far I haven't been able to get it to work.\n. Here is a currently working method (as of v1.0.0) of exiting insert mode with \"jj\" (or the more common \"jk\" with a minor edit to the keymap.cson change):\n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-proceeded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-command-mode')\n\n#keymap.cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'exit-insert-mode-if-proceeded-by-j'\n```\n\nCredit for this goes to @rdlugosz for his comment at https://github.com/atom/vim-mode/issues/334#issuecomment-85603175\n. @lambdaburrito Glad to hear it!  I've spent way too much time chasing down a solution for this, or finding a new one after a breaking upgrade, so I was hoping I could save others the time :smile:\n. ",
    "eob": ":thumbsup: :exclamation: \n. I agree with these sentiments -- with a bit of hesitation in the particular case of project tree manipulation because that is so fundamental to code editing that it's hard to ply apart from the editor itself. Impossible, in Atom's case, unlike vim. I realize that a rocket scientist might make the same claim about his vim-rocket-science plugin, however.\n. :thumbsup: :exclamation: \n. I agree with these sentiments -- with a bit of hesitation in the particular case of project tree manipulation because that is so fundamental to code editing that it's hard to ply apart from the editor itself. Impossible, in Atom's case, unlike vim. I realize that a rocket scientist might make the same claim about his vim-rocket-science plugin, however.\n. ",
    "pgericson": "_For all the people that get this thread as the top result when you search_\n\nHere is a whole thread of bind copy&paste snippets about toggle navigation:\nhttps://discuss.atom.io/t/only-allowing-keybind-to-be-triggered-when-in-command-mode-vim-mode/15496\n\nThe following snippet toggles focus between project tree and the editor\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode), .tree-view':\n  ', n': 'tree-view:toggle-focus'\n```\n. Here is a whole thread of bind copy&paste snippets (for does that got this as the first result on google):\nhttps://discuss.atom.io/t/only-allowing-keybind-to-be-triggered-when-in-command-mode-vim-mode/15496\n\nThe following snippet toggles focus between project tree and the editor\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode), .tree-view':\n  ', n': 'tree-view:toggle-focus'\n```\n. _For all the people that get this thread as the top result when you search_\n\nHere is a whole thread of bind copy&paste snippets about toggle navigation:\nhttps://discuss.atom.io/t/only-allowing-keybind-to-be-triggered-when-in-command-mode-vim-mode/15496\n\nThe following snippet toggles focus between project tree and the editor\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode), .tree-view':\n  ', n': 'tree-view:toggle-focus'\n```\n. Here is a whole thread of bind copy&paste snippets (for does that got this as the first result on google):\nhttps://discuss.atom.io/t/only-allowing-keybind-to-be-triggered-when-in-command-mode-vim-mode/15496\n\nThe following snippet toggles focus between project tree and the editor\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode), .tree-view':\n  ', n': 'tree-view:toggle-focus'\n```\n. ",
    "trotter": "You're gonna laugh at me, but I can't figure out how to upgrade this thing :smile:\n. Closing this pull request. Looks like the API got fixed in the most recent atom release.\n. You're gonna laugh at me, but I can't figure out how to upgrade this thing :smile:\n. Closing this pull request. Looks like the API got fixed in the most recent atom release.\n. ",
    "pengux": ":+1: \n. @bhuga No, I'm using Mac, when was it implemented? Atom.io version is 0.96.0 and vim-mode version is 0.9.0\n. @bhuga Atom 0.98.0 didn't fix this\n. @bhuga The console doesn't show anything, my keyboard layout is Swedish.\n. Yes it does, so something wrong with layout matching?\n. On Swedish keyboards, the dollar sign is Options+4. The Shift+4 is for the Euro sign instead.\n. @bhuga In Settings, you can choose to try the React Editor for Atom. It's also in the release notes (https://atom.io/releases)\n. Yes, probably a dupe thanks for the notice\n. It works, thank you\n. Yes, I've updated vim too and the problem disappeared\n. :+1: \n. @bhuga No, I'm using Mac, when was it implemented? Atom.io version is 0.96.0 and vim-mode version is 0.9.0\n. @bhuga Atom 0.98.0 didn't fix this\n. @bhuga The console doesn't show anything, my keyboard layout is Swedish.\n. Yes it does, so something wrong with layout matching?\n. On Swedish keyboards, the dollar sign is Options+4. The Shift+4 is for the Euro sign instead.\n. @bhuga In Settings, you can choose to try the React Editor for Atom. It's also in the release notes (https://atom.io/releases)\n. Yes, probably a dupe thanks for the notice\n. It works, thank you\n. Yes, I've updated vim too and the problem disappeared\n. ",
    "pauldruziak": ":+1: \n. :+1: \n. ",
    "nvaken": ":+1: \n. :+1: \n. ",
    "udp": "Would you recommend simply copying the find motion code, or finding a way to share the code between the two?  These motions really are almost identical.\n. Done something wrong with the spec here... looking into it now.\n. Spec fixed!  Turns out my spec wasn't indented because I tried to indent it with `>>`.  Maybe that's my next project...\n. Turns out it was because I was trying to select with the mouse and then `>>`, but selecting with the mouse doesn't do a visual mode selection in Atom.\n\nNo problem, thanks for accepting!\n. I don't have any time to work on this at the moment, but the code works fine.  If someone wants to update it to fix the style issues/whatever that'd be welcome.\n\nEDIT: Not sure why Travis is failing (there aren't any tests for these text objects), so I guess that needs investigating too.\n. :+1: \n\nLGTM\u2014thanks for finishing this off.\n. Would you recommend simply copying the find motion code, or finding a way to share the code between the two?  These motions really are almost identical.\n. Done something wrong with the spec here... looking into it now.\n. Spec fixed!  Turns out my spec wasn't indented because I tried to indent it with `>>`.  Maybe that's my next project...\n. Turns out it was because I was trying to select with the mouse and then `>>`, but selecting with the mouse doesn't do a visual mode selection in Atom.\n\nNo problem, thanks for accepting!\n. I don't have any time to work on this at the moment, but the code works fine.  If someone wants to update it to fix the style issues/whatever that'd be welcome.\n\nEDIT: Not sure why Travis is failing (there aren't any tests for these text objects), so I guess that needs investigating too.\n. :+1: \n\nLGTM\u2014thanks for finishing this off.\n. ",
    "rougeth": "@mcolyer 0.68.0\n. This https://github.com/atom/emmet/issues/32 works for me!\n. @mcolyer 0.68.0\n. This https://github.com/atom/emmet/issues/32 works for me!\n. ",
    "carlosdcastillo": "PR #254 implements the % bracket matching motion in a way that is functionally identical to vim's. With it you can do y% and d% if you miss that.\n. @bhuga: I coded today with what is in master as my vim-mode version. Everything is looking really good. I did find this obnoxious one:\n`abc(things here) abcdef ( more things here )`\n\nWhat works:\n-If you stand on the first ( and type c%qqq and then go to the next ( and type .\nWhat doesn't:\n-If you stand on the first ( and type c%qqq and then go to the closing final ) and type .\n\nI'll try to send a PR tomorrow to fix it.\n. It should highlight what you're searching for just like when you set hlsearch in vim: http://imgur.com/wapzQca\n. @bhuga: I agree. I think that there will be subtle oddities (the one you point out is one) as long as it is done with selections. I was not aware of that plugin you link, will look into it and try to use their approach. \n. Take a look: \n\n![](http://i.imgur.com/tlpna5W.png)\n. @bhuga I've merged master into my branch. Also added specs for the motion.\n. Yes. I just realized that in vim if you have `( abc )` and stand on the b and hit % it goes back to the (. If you do it this pr it won't do anything. I'm just learning that in vim if you hit % and it looks forward for a symbol is on the current line and is the next matching symbol. I have never used this behavior.\n\nMy use case is stand on the opening and hit % or d% to cut or something.\n\nI'll try to add this to the PR.\n. @bhuga I've commited some changes. Should work now. Hitting % with `( abc )` with the cursor on the `b` will take you to the `(`. More complex things like vim handles them are also supported: hitting % with `abc ( def )`, with cursor on the b will take you to the `)`\n. @bhuga I can't seem to reproduce any of those. In the example `x(abc)y`  at all locations it does the same as vim:\n% at `x` goes to `)`\n% at `(` goest to `)`\n% at `a` goes to `(`\n% at `b` goes to `(`\n% at `c` goes to `(`\n% at `)` goes to `(`\nexcept:\n% at `y` which should be a a no-op is going over to the next character.\n\nI want to fix the last one, but I want to make sure we're seeing the same behavior first.\n. @bhuga I wasn't aware of that functionality being in the API. Let me try to understand the buffer markers and work on it a little bit. I'll update the PR when I have something.\n. @bhuga: I think now this is looking better. Now it is: (a) working (b) clean (c) using the Marker API.\n. @bhuga: di( and di\" work for me on hexdigest and on SHA1 and on Digest (when I say work I mean no-op)\n\ndi} is not part of this commit and is broken in master, I don't know why.\n. PR #254 implements the % bracket matching motion in a way that is functionally identical to vim's. With it you can do y% and d% if you miss that.\n. @bhuga: I coded today with what is in master as my vim-mode version. Everything is looking really good. I did find this obnoxious one:\n`abc(things here) abcdef ( more things here )`\n\nWhat works:\n-If you stand on the first ( and type c%qqq and then go to the next ( and type .\nWhat doesn't:\n-If you stand on the first ( and type c%qqq and then go to the closing final ) and type .\n\nI'll try to send a PR tomorrow to fix it.\n. It should highlight what you're searching for just like when you set hlsearch in vim: http://imgur.com/wapzQca\n. @bhuga: I agree. I think that there will be subtle oddities (the one you point out is one) as long as it is done with selections. I was not aware of that plugin you link, will look into it and try to use their approach. \n. Take a look: \n\n![](http://i.imgur.com/tlpna5W.png)\n. @bhuga I've merged master into my branch. Also added specs for the motion.\n. Yes. I just realized that in vim if you have `( abc )` and stand on the b and hit % it goes back to the (. If you do it this pr it won't do anything. I'm just learning that in vim if you hit % and it looks forward for a symbol is on the current line and is the next matching symbol. I have never used this behavior.\n\nMy use case is stand on the opening and hit % or d% to cut or something.\n\nI'll try to add this to the PR.\n. @bhuga I've commited some changes. Should work now. Hitting % with `( abc )` with the cursor on the `b` will take you to the `(`. More complex things like vim handles them are also supported: hitting % with `abc ( def )`, with cursor on the b will take you to the `)`\n. @bhuga I can't seem to reproduce any of those. In the example `x(abc)y`  at all locations it does the same as vim:\n% at `x` goes to `)`\n% at `(` goest to `)`\n% at `a` goes to `(`\n% at `b` goes to `(`\n% at `c` goes to `(`\n% at `)` goes to `(`\nexcept:\n% at `y` which should be a a no-op is going over to the next character.\n\nI want to fix the last one, but I want to make sure we're seeing the same behavior first.\n. @bhuga I wasn't aware of that functionality being in the API. Let me try to understand the buffer markers and work on it a little bit. I'll update the PR when I have something.\n. @bhuga: I think now this is looking better. Now it is: (a) working (b) clean (c) using the Marker API.\n. @bhuga: di( and di\" work for me on hexdigest and on SHA1 and on Digest (when I say work I mean no-op)\n\ndi} is not part of this commit and is broken in master, I don't know why.\n. ",
    "mattma": "@mcolyer i am using the vim-mode@0.8.0 with atom@0.68.0. I saw the newest atom just released yesterday, by reading the changelog. there is nothing to do with what I am doing with vim-mode. Well, vertical split works, horizontal split does not, focus view on right works, focus view on left does not work. I guess it is very unstable. Sometimes even vertical split works, then the next try does not work. Am i the only one experience this problem?\n. @mcolyer i am using the vim-mode@0.8.0 with atom@0.68.0. I saw the newest atom just released yesterday, by reading the changelog. there is nothing to do with what I am doing with vim-mode. Well, vertical split works, horizontal split does not, focus view on right works, focus view on left does not work. I guess it is very unstable. Sometimes even vertical split works, then the next try does not work. Am i the only one experience this problem?\n. ",
    "agudulin": "Seems to be fixed now.\n. Seems to be fixed now.\n. ",
    "laughedelic": "I have the same bug when using `s` action, it always deletes 1 more character.\n. @masukomi \nEither I didn't understand you or something is wrong.. If you mean actions in normal mode like `y2y` (= `2yy`) or `d2d` (= `2dd`), then it should yank/delete exactly _two_ lines including the current one. See the [vim help on `dd`](http://vimdoc.sourceforge.net/htmldoc/change.html#dd) for example.\n. Oh, ok. \"followed by enter\" was not obvious for me.\n. I have the same bug when using `s` action, it always deletes 1 more character.\n. @masukomi \nEither I didn't understand you or something is wrong.. If you mean actions in normal mode like `y2y` (= `2yy`) or `d2d` (= `2dd`), then it should yank/delete exactly _two_ lines including the current one. See the [vim help on `dd`](http://vimdoc.sourceforge.net/htmldoc/change.html#dd) for example.\n. Oh, ok. \"followed by enter\" was not obvious for me.\n. ",
    "raylillywhite": "My mistake. I didn't realize that the cursor isn't supposed to blink during normal mode. It was only doing so because of customizations in my stylesheet.  I normally use vim via the IdeaVIM plugin for AppCode, where it does happen to blink (at least with my settings).\n\nThe customizations that caused it were as follows:\n\n``` css\n.vim-mode.command-mode:not(.mini) .cursor {\n  background-color: #FFFFFF;\n  opacity: 0.7;\n  border-style: solid;\n  border-color: #FFFFFF;\n  border-width: 1px;\n}\n\n.vim-mode.command-mode:not(.mini) .cursor.blink-off {\n  background-color: transparent;\n  border-style: solid;\n  border-color: #FFFFFF;\n  border-width: 1px;\n}\n```\n\nPresumably, this won't be a problem for other people, so I'll close this issue. If I find a solution that would solve this issue for anyone who does want the vim normal-mode cursor to blink, I'll report back here and open a PR if necessary. Thanks for looking into it @dougblack, and sorry for the false alarm.\n. My mistake. I didn't realize that the cursor isn't supposed to blink during normal mode. It was only doing so because of customizations in my stylesheet.  I normally use vim via the IdeaVIM plugin for AppCode, where it does happen to blink (at least with my settings).\n\nThe customizations that caused it were as follows:\n\n``` css\n.vim-mode.command-mode:not(.mini) .cursor {\n  background-color: #FFFFFF;\n  opacity: 0.7;\n  border-style: solid;\n  border-color: #FFFFFF;\n  border-width: 1px;\n}\n\n.vim-mode.command-mode:not(.mini) .cursor.blink-off {\n  background-color: transparent;\n  border-style: solid;\n  border-color: #FFFFFF;\n  border-width: 1px;\n}\n```\n\nPresumably, this won't be a problem for other people, so I'll close this issue. If I find a solution that would solve this issue for anyone who does want the vim normal-mode cursor to blink, I'll report back here and open a PR if necessary. Thanks for looking into it @dougblack, and sorry for the false alarm.\n. ",
    "EverettBerry": "I have encountered this problem as well.  Specifically the 'l' and 'j' keys seem to fail.\nHere is the traceback from dev tools:\n\n```\nUncaught TypeError: Cannot read property 'length' of undefined \n(anonymous function) \nMoveRight.execute \nmodule.exports.VimState.processOpStack \nmodule.exports.VimState.pushOperator \n(anonymous function) \njQuery.event.dispatch \nelemData.handle \nmodule.exports.Keymap.dispatchCommandEvent \nmodule.exports.Keymap.handleKeyboardEvent \nmodule.exports.Keymap.handleKeyEvent \n(anonymous function) \njQuery.event.dispatch \nelemData.handle \n```\n\nHere is the relevant code from motions.coffee.  The specific error occurs in line 58.\n\n```\nclass MoveRight extends Motion\n  execute: (count=1) ->\n    _.times count, =>\n      {row, column} = @editor.getCursorScreenPosition()\n      lastCharIndex = @editor.getBuffer().lineForRow(row).length - 1\n      unless column >= lastCharIndex\n        @editor.moveCursorRight()\n```\n. I have encountered this problem as well.  Specifically the 'l' and 'j' keys seem to fail.\nHere is the traceback from dev tools:\n\n```\nUncaught TypeError: Cannot read property 'length' of undefined \n(anonymous function) \nMoveRight.execute \nmodule.exports.VimState.processOpStack \nmodule.exports.VimState.pushOperator \n(anonymous function) \njQuery.event.dispatch \nelemData.handle \nmodule.exports.Keymap.dispatchCommandEvent \nmodule.exports.Keymap.handleKeyboardEvent \nmodule.exports.Keymap.handleKeyEvent \n(anonymous function) \njQuery.event.dispatch \nelemData.handle \n```\n\nHere is the relevant code from motions.coffee.  The specific error occurs in line 58.\n\n```\nclass MoveRight extends Motion\n  execute: (count=1) ->\n    _.times count, =>\n      {row, column} = @editor.getCursorScreenPosition()\n      lastCharIndex = @editor.getBuffer().lineForRow(row).length - 1\n      unless column >= lastCharIndex\n        @editor.moveCursorRight()\n```\n. ",
    "mekpro": "Still having issue in 0.9. When i press l the following error shown in the console\n\nUncaught TypeError: Cannot read property 'length' of undefined general-motions.coffee:58\nUncaught TypeError: Cannot read property 'length' of undefined general-motions.coffee:59\n. Still having issue in 0.9. When i press l the following error shown in the console\n\nUncaught TypeError: Cannot read property 'length' of undefined general-motions.coffee:58\nUncaught TypeError: Cannot read property 'length' of undefined general-motions.coffee:59\n. ",
    "gggritso": "Is there something happening in atom-core that's blocking this? Being able to hjkl-navigate is basically the _one_ thing that _has_ to work correctly.\n. In case this comes up for anyone else, please check the setting on autocomplete-plus. Sometimes it conflicts with another package (like autosave) and enters a strange limbo state which hides the cursor but doesn\u2019t show the autocomplete window.\n. I\u2019ve ran into the same issue. There\u2019s nothing in the console.\n. Is there something happening in atom-core that's blocking this? Being able to hjkl-navigate is basically the _one_ thing that _has_ to work correctly.\n. In case this comes up for anyone else, please check the setting on autocomplete-plus. Sometimes it conflicts with another package (like autosave) and enters a strange limbo state which hides the cursor but doesn\u2019t show the autocomplete window.\n. I\u2019ve ran into the same issue. There\u2019s nothing in the console.\n. ",
    "DavidLGoldberg": "I'm going to try to work on a fix for this this weekend.  I really don't see why this needs to be fixed in Core.  We should be able to simulate the cursor only at column 1 behavior (of folded line) that Atom uses throughout for folded behavior.  I don't see why we can't fix this for softwrapped lines by translating the position between screen and buffer.  If anyone wants to pair with me on this let me know.\n. I have made some good progress on this.  Not breaking any existing tests.  I'll have to add at least about 3 or more test cases to the mix, but of course I think that's worth it.  I haven't written the test cases, and there are 2 more cases I have to work out, although I have it to the point of \"do no harm\" improvement I believe.  I'll work on this tonight after work and submit a pull request.  Definitely doesn't need any changes to core luckily.  Should fix softwrap + folding.\n. Do you mean create spec tests? Or just pull and start using it. I have been _using_ it for about 2 weeks now at work / home etc.  I don't think I've introduced any issues, BUT of course no vimmer really uses all of the features of vim :)\n\nDo you know about the `apm develop <repo>` command? so in this case `apm develop vim-mode` and then in there you can set the git remote to my fork?  You have to run atom with atom -d to turn on the apm develop stuff.  I am working on spec tests at the moment.  No one's gotten back to me with any feedback on the PR... I am about 1/3 way through the spec tests building them the way I did for my jumpy package that is, opening a markdown file and code folding / and soft wrapping.  I'm a fan of opening a file in memory for atom tests, as opposed to just testing some feature on strings, slightly more integration test as opposed to unit.  They run fast enough IMO.\n. Yes.  The -d is what's going to make it use your new repo.  Checkout `apm list` to get an idea of what it's doing.  It's using apm link (really npm link) behind the scenes etc.  It's a really well done and awesome feature way cooler than the sublime stuff.\n. Trying to fix the later mentioned problems with: https://github.com/atom/vim-mode/pull/399\n. Please see this PR: https://github.com/atom/vim-mode/pull/399\n. This hasn't been pulled yet, I have a fix, but could use some help finishing the tests.\n. Kind of confused.  Does that mean you tried it and it's working / fixed now?\n. Awesome!  Maybe leave a comment on the PR saying it worked for you? https://github.com/atom/vim-mode/pull/399\n\nAlso, if you can figure out why the latest tests break a subset of the other tests.  I know it has to do with the activation of vim mode line OR the line that new's up the WorkspaceView, just not sure how to fix it. It'd be nice if these things were running in isolation :\\\n. Please see this pull request: https://github.com/atom/vim-mode/pull/399\n. This is definitely a dupe and I have a pull request in the works for this:\nhttps://github.com/atom/vim-mode/pull/399\n. This has long been fixed.  I submitted a pull request, and @nathansobo was ultimately the author of the fix, this should be closed to my knowledge.\n. :+1: \n. Is everyone seeing this?  Are there work arounds?  What are the plans?\n. Removing the caching would seem to be more standard Unit test behavior no?  Leaving it in, you're always testing the caching behavior as well.\n. Awesome!  Code is a lot simpler now :+1: \n. How about this, seems pretty harmless?\n. Thanks!\n. I think I was able to bundle a fix for https://github.com/atom/vim-mode/pull/353 as well.\n. Any suggestions for the tests for this?  Is opening an .md file viable?\n. I am I think about 1/3 the way through making the tests opening up the .md file as I mentioned.  I'm running into a little trouble activating vim properly.  Once I get that working the tests will be easy..\n. I'll rebase these commits when I'm done.  Also, I'll add the fix commit numbers for the other issues.  I'm currently not sure why my _tests_ seem to break the other tests.  Disabling my tests or running them solo fixes this.  If anyone spots the reason let me know, else I'll take a look tomorrow.  Kind of a scary thought that things aren't running in isolation.  I haven't seen this issue before.\n. @nathansobo Glad you're taking a look.  Let me know if you have any Issues.  Just to be clear, I need to finish making the tests work when they're all running as mentioned above.  They're not properly isolated.  Not sure how to fix this.\n. @nathansobo ,\n\nI decided to take another look.  Fixed it.  All of the old tests + my new ones pass now!  I rebased / squashed down to one commit and included all of the items it fixes that I could find in the issues when I looked last time.\n. @nathansobo \nAh, so I knew it was the whole screen pos vs  buffer pos thing, but I didn't find that slick fix.  Nice job!\n\nWhy not keep the test that I made though? I did a:\n\ngit checkout fix_folds_and_wraps spec/fixtures/fold-text.md\ngit checkout fix_folds_and_wraps spec/motions-folds-spec.coffee\n\nand the 3 new tests worked with master (your new code).\n\nThey're not so slow IMO?  I have a branch I'll turn into a pull request which takes the spec times from 52s on my mac to 36seconds by fixing a bunch of the deprecations.\n\nBTW, Really glad they fixed the deprecations in non dev mode, that really hurt my package's performance before I was able to upgrade them during one of the releases.\n. Heh, ok thanks.  Yeah it's funny in the past, I had the reverse issue switching to screen pos instead of buffer.  So I thought I tried something similar to that but must have totally goofed something up!\n\nYeah I agree at this point the regression isn't too easy to sneak in with basic review etc.\n\nThanks for doing this, the tab character issue was a _big_ deal (unfortunately) ;)\n\nFYI, I'm pretty sure the issues I mentioned above (all 6 of them) you can close:\n\n#156 \n#203 \n#231 \n#318 \n#363 \n#391 \n. about to create an issue in core\n. I'm going to try to work on a fix for this this weekend.  I really don't see why this needs to be fixed in Core.  We should be able to simulate the cursor only at column 1 behavior (of folded line) that Atom uses throughout for folded behavior.  I don't see why we can't fix this for softwrapped lines by translating the position between screen and buffer.  If anyone wants to pair with me on this let me know.\n. I have made some good progress on this.  Not breaking any existing tests.  I'll have to add at least about 3 or more test cases to the mix, but of course I think that's worth it.  I haven't written the test cases, and there are 2 more cases I have to work out, although I have it to the point of \"do no harm\" improvement I believe.  I'll work on this tonight after work and submit a pull request.  Definitely doesn't need any changes to core luckily.  Should fix softwrap + folding.\n. Do you mean create spec tests? Or just pull and start using it. I have been _using_ it for about 2 weeks now at work / home etc.  I don't think I've introduced any issues, BUT of course no vimmer really uses all of the features of vim :)\n\nDo you know about the `apm develop <repo>` command? so in this case `apm develop vim-mode` and then in there you can set the git remote to my fork?  You have to run atom with atom -d to turn on the apm develop stuff.  I am working on spec tests at the moment.  No one's gotten back to me with any feedback on the PR... I am about 1/3 way through the spec tests building them the way I did for my jumpy package that is, opening a markdown file and code folding / and soft wrapping.  I'm a fan of opening a file in memory for atom tests, as opposed to just testing some feature on strings, slightly more integration test as opposed to unit.  They run fast enough IMO.\n. Yes.  The -d is what's going to make it use your new repo.  Checkout `apm list` to get an idea of what it's doing.  It's using apm link (really npm link) behind the scenes etc.  It's a really well done and awesome feature way cooler than the sublime stuff.\n. Trying to fix the later mentioned problems with: https://github.com/atom/vim-mode/pull/399\n. Please see this PR: https://github.com/atom/vim-mode/pull/399\n. This hasn't been pulled yet, I have a fix, but could use some help finishing the tests.\n. Kind of confused.  Does that mean you tried it and it's working / fixed now?\n. Awesome!  Maybe leave a comment on the PR saying it worked for you? https://github.com/atom/vim-mode/pull/399\n\nAlso, if you can figure out why the latest tests break a subset of the other tests.  I know it has to do with the activation of vim mode line OR the line that new's up the WorkspaceView, just not sure how to fix it. It'd be nice if these things were running in isolation :\\\n. Please see this pull request: https://github.com/atom/vim-mode/pull/399\n. This is definitely a dupe and I have a pull request in the works for this:\nhttps://github.com/atom/vim-mode/pull/399\n. This has long been fixed.  I submitted a pull request, and @nathansobo was ultimately the author of the fix, this should be closed to my knowledge.\n. :+1: \n. Is everyone seeing this?  Are there work arounds?  What are the plans?\n. Removing the caching would seem to be more standard Unit test behavior no?  Leaving it in, you're always testing the caching behavior as well.\n. Awesome!  Code is a lot simpler now :+1: \n. How about this, seems pretty harmless?\n. Thanks!\n. I think I was able to bundle a fix for https://github.com/atom/vim-mode/pull/353 as well.\n. Any suggestions for the tests for this?  Is opening an .md file viable?\n. I am I think about 1/3 the way through making the tests opening up the .md file as I mentioned.  I'm running into a little trouble activating vim properly.  Once I get that working the tests will be easy..\n. I'll rebase these commits when I'm done.  Also, I'll add the fix commit numbers for the other issues.  I'm currently not sure why my _tests_ seem to break the other tests.  Disabling my tests or running them solo fixes this.  If anyone spots the reason let me know, else I'll take a look tomorrow.  Kind of a scary thought that things aren't running in isolation.  I haven't seen this issue before.\n. @nathansobo Glad you're taking a look.  Let me know if you have any Issues.  Just to be clear, I need to finish making the tests work when they're all running as mentioned above.  They're not properly isolated.  Not sure how to fix this.\n. @nathansobo ,\n\nI decided to take another look.  Fixed it.  All of the old tests + my new ones pass now!  I rebased / squashed down to one commit and included all of the items it fixes that I could find in the issues when I looked last time.\n. @nathansobo \nAh, so I knew it was the whole screen pos vs  buffer pos thing, but I didn't find that slick fix.  Nice job!\n\nWhy not keep the test that I made though? I did a:\n\ngit checkout fix_folds_and_wraps spec/fixtures/fold-text.md\ngit checkout fix_folds_and_wraps spec/motions-folds-spec.coffee\n\nand the 3 new tests worked with master (your new code).\n\nThey're not so slow IMO?  I have a branch I'll turn into a pull request which takes the spec times from 52s on my mac to 36seconds by fixing a bunch of the deprecations.\n\nBTW, Really glad they fixed the deprecations in non dev mode, that really hurt my package's performance before I was able to upgrade them during one of the releases.\n. Heh, ok thanks.  Yeah it's funny in the past, I had the reverse issue switching to screen pos instead of buffer.  So I thought I tried something similar to that but must have totally goofed something up!\n\nYeah I agree at this point the regression isn't too easy to sneak in with basic review etc.\n\nThanks for doing this, the tab character issue was a _big_ deal (unfortunately) ;)\n\nFYI, I'm pretty sure the issues I mentioned above (all 6 of them) you can close:\n\n#156 \n#203 \n#231 \n#318 \n#363 \n#391 \n. about to create an issue in core\n. ",
    "wizonesolutions": "@DavidLGoldberg What's the best way to test your PR in Atom? Would love to have soft wrap back.\n. @DavidLGoldberg Yeah, I just meant pulling it and using it. Sounds like I should use `apm develop vim-mode` and change the remote repo (and presumably switch to your feature branch or merge it into an integration branch).\n\nThen I have to run `atom -d` for that to actually work. (Does it just use my installed `vim-mode` if I don't run with `-d`?) Thanks!\n. @DavidLGoldberg What's the best way to test your PR in Atom? Would love to have soft wrap back.\n. @DavidLGoldberg Yeah, I just meant pulling it and using it. Sounds like I should use `apm develop vim-mode` and change the remote repo (and presumably switch to your feature branch or merge it into an integration branch).\n\nThen I have to run `atom -d` for that to actually work. (Does it just use my installed `vim-mode` if I don't run with `-d`?) Thanks!\n. ",
    "izuzak": "Just tried reproducing this with various examples using soft wrap and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example.\n. This issue has been open for quite a while, but there's actually an older issue on the core Atom repository asking for this as well: https://github.com/atom/atom/issues/1092 (also see https://github.com/atom/electron/issues/47 for more context). I'm going to close this issue in favor of that one since this isn't just about vim-mode and it's good to have one all the feedback in one place.\n\nI'll also add a comment to that issue about the the approach mentioned by @rastasheep in https://github.com/atom/vim-mode/issues/175#issuecomment-48708542 which allows users to disable the popup just for Atom -- thanks for that! :zap: \n. I just tried reproducing this with various examples using hard tabs, and wasn't able to. I believe this was fixed in https://github.com/atom/vim-mode/pull/406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example. :v: :doughnut: \n. Just tried reproducing this with various examples using soft wrap (including the file linked to in https://github.com/atom/vim-mode/issues/217#issue-32855351), and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example.\n. Just tried reproducing this with various examples using soft wrap and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example.\n. Just tried reproducing this and wasn't able to. Also, the autocomplete-plus package replaced the default autocomplete package and lots of issues were fixed, so I'm guessing this was fixed at some point. \n\nLet me know if anyone can still reproduce the problem and please provide an example. \n. Closing this because we're unable to reproduce and no other information was provided. Let us know if you can still reproduce this in the latest version of Atom.\n. I just tried reproducing this with various examples using soft wrap (including the one from https://github.com/atom/vim-mode/issues/318#issue-35765767), and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example. Thanks!\n. Just tried reproducing this and wasn't able to, and seems like other folks haven't seen this problem for a few months at least. Also, the autocomplete-plus package replaced the default autocomplete package and lots of issues were fixed, so I'm guessing this was fixed at some point.\n\nLet me know if anyone can still reproduce the problem and please provide an example.\n. I just tried reproducing this with various examples using folds (including the example given in https://github.com/atom/vim-mode/issues/363#issuecomment-50573672), and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example. Thanks!\n. Closing since this is super old, there were no reports from other users as far as I can tell, and no new information was provided in more than 6 months after we asked. \n\n@rstacruz Let us know if you can still reproduce this in Atom 1.0.11\n. Closing since no information was provided for over 6 months and it's not clear how this is related to vim-more. @urmyfaith -- please feel free to clarify.\n. Noticed another report for this in https://github.com/atom/vim-mode/issues/663.\n. Thanks for the report! This looks like a duplicate of https://github.com/atom/vim-mode/issues/646 -- please subscribe there for updates.\n. I think we can keep just https://github.com/atom/vim-mode/issues/665, this looks like a duplicate\n. Gonna close this one as fixed, /cc https://github.com/atom/vim-mode/issues/791. Thanks for spotting that, @jacekkopecky. \n\n@Protossoario let us know if you can reproduce this in the latest version of Atom.\n. @jacekkopecky Ahh, interesting. Should https://github.com/atom/vim-mode/issues/791 be reopened then? \n. Just tried reproducing this with various examples using soft wrap and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example.\n. This issue has been open for quite a while, but there's actually an older issue on the core Atom repository asking for this as well: https://github.com/atom/atom/issues/1092 (also see https://github.com/atom/electron/issues/47 for more context). I'm going to close this issue in favor of that one since this isn't just about vim-mode and it's good to have one all the feedback in one place.\n\nI'll also add a comment to that issue about the the approach mentioned by @rastasheep in https://github.com/atom/vim-mode/issues/175#issuecomment-48708542 which allows users to disable the popup just for Atom -- thanks for that! :zap: \n. I just tried reproducing this with various examples using hard tabs, and wasn't able to. I believe this was fixed in https://github.com/atom/vim-mode/pull/406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example. :v: :doughnut: \n. Just tried reproducing this with various examples using soft wrap (including the file linked to in https://github.com/atom/vim-mode/issues/217#issue-32855351), and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example.\n. Just tried reproducing this with various examples using soft wrap and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example.\n. Just tried reproducing this and wasn't able to. Also, the autocomplete-plus package replaced the default autocomplete package and lots of issues were fixed, so I'm guessing this was fixed at some point. \n\nLet me know if anyone can still reproduce the problem and please provide an example. \n. Closing this because we're unable to reproduce and no other information was provided. Let us know if you can still reproduce this in the latest version of Atom.\n. I just tried reproducing this with various examples using soft wrap (including the one from https://github.com/atom/vim-mode/issues/318#issue-35765767), and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example. Thanks!\n. Just tried reproducing this and wasn't able to, and seems like other folks haven't seen this problem for a few months at least. Also, the autocomplete-plus package replaced the default autocomplete package and lots of issues were fixed, so I'm guessing this was fixed at some point.\n\nLet me know if anyone can still reproduce the problem and please provide an example.\n. I just tried reproducing this with various examples using folds (including the example given in https://github.com/atom/vim-mode/issues/363#issuecomment-50573672), and wasn't able to. I believe this was fixed in #406, so I'm closing the issue. If anyone can still reproduce in Atom 1.0.11 -- let me know and please provide an example. Thanks!\n. Closing since this is super old, there were no reports from other users as far as I can tell, and no new information was provided in more than 6 months after we asked. \n\n@rstacruz Let us know if you can still reproduce this in Atom 1.0.11\n. Closing since no information was provided for over 6 months and it's not clear how this is related to vim-more. @urmyfaith -- please feel free to clarify.\n. Noticed another report for this in https://github.com/atom/vim-mode/issues/663.\n. Thanks for the report! This looks like a duplicate of https://github.com/atom/vim-mode/issues/646 -- please subscribe there for updates.\n. I think we can keep just https://github.com/atom/vim-mode/issues/665, this looks like a duplicate\n. Gonna close this one as fixed, /cc https://github.com/atom/vim-mode/issues/791. Thanks for spotting that, @jacekkopecky. \n\n@Protossoario let us know if you can reproduce this in the latest version of Atom.\n. @jacekkopecky Ahh, interesting. Should https://github.com/atom/vim-mode/issues/791 be reopened then? \n. ",
    "williamfu1989": "My atom version is 0.61.Aftering upgrading to 0.71 goes right\n. My atom version is 0.61.Aftering upgrading to 0.71 goes right\n. ",
    "caleb": "I think you mean: \"This PR currently only adds \u2303F and **\u2303B** bindings to core:page-down and core:page-up respectively.\"\n\nI've added this to my local version of vim-mode. I use these all the time. Thanks\n. This is great! This is probably the single feature I miss most from vim when using other editors.\nI would like to see square brackets added to this list, and maybe back ticks.\n\nI'd love to see this merged with vim-mode\n. I think this might be related, so I closed my issue: https://github.com/atom/vim-mode/issues/842\n\nIt's not exactly the same thing, but it sure seems like it might be in the same family :)\n. Looks like this was fixed by: https://github.com/atom/vim-mode/commit/67ce5cecd4ca2cde52e6d754126a9ea9a538d7a3\n\nThanks!\n. I think you mean: \"This PR currently only adds \u2303F and **\u2303B** bindings to core:page-down and core:page-up respectively.\"\n\nI've added this to my local version of vim-mode. I use these all the time. Thanks\n. This is great! This is probably the single feature I miss most from vim when using other editors.\nI would like to see square brackets added to this list, and maybe back ticks.\n\nI'd love to see this merged with vim-mode\n. I think this might be related, so I closed my issue: https://github.com/atom/vim-mode/issues/842\n\nIt's not exactly the same thing, but it sure seems like it might be in the same family :)\n. Looks like this was fixed by: https://github.com/atom/vim-mode/commit/67ce5cecd4ca2cde52e6d754126a9ea9a538d7a3\n\nThanks!\n. ",
    "KindleL": "@zenhob Sorry for this, did't do much search.\n. @zenhob Sorry for this, did't do much search.\n. ",
    "qguv": "I agree. We lose a lot of vim efficiency in Atom without macros.\n. I agree. We lose a lot of vim efficiency in Atom without macros.\n. ",
    "zackp30": "I too would like this.\n. Getting the same issue, also when at the bottom of the file, an error occurs (I know you shouldn't be able to move right at the bottom of the file, but it's still annoying for the dev tools to popup if you do it accidentally):\n\n```\nUncaught TypeError: Cannot read property 'length' of undefined /home/zack/.atom/packages/vim-mode/lib/motions/general-motions.coffee:166\n```\n. I too would like this.\n. Getting the same issue, also when at the bottom of the file, an error occurs (I know you shouldn't be able to move right at the bottom of the file, but it's still annoying for the dev tools to popup if you do it accidentally):\n\n```\nUncaught TypeError: Cannot read property 'length' of undefined /home/zack/.atom/packages/vim-mode/lib/motions/general-motions.coffee:166\n```\n. ",
    "haoyangnz": "This would be very helpful. Is there any plan for this? If not, I might implement it.\n. This would be very helpful. Is there any plan for this? If not, I might implement it.\n. ",
    "rbraley": "+1\n. +1\n. ",
    "danilomiranda": "+1\n. +1\n. ",
    "joowh85": "+1\n\nctrl+alt+l \n  'Convert space to tabs'\n  'Toogle soft tabs'\n\nThis is what I want to.\n. +1\n\nctrl+alt+l \n  'Convert space to tabs'\n  'Toogle soft tabs'\n\nThis is what I want to.\n. ",
    "DarrylD": "+1\n\nIn the process of making a few atom plugins which could easily be macros.\n. +1\n\nIn the process of making a few atom plugins which could easily be macros.\n. ",
    "andrewpcone": "+1\n. +1\n. ",
    "kebertx": "Not to pop in just to say \"+1,\" but...\n\n**+1!**\n. Looking at [atom-macros](https://atom.io/packages/atom-macros), it's definitely _not_ what any vim user is thinking about when you mention an editor macro. With vim, you start recording a sequence of actions, so you can repeat the same editor commands multiple times.\n\nWith the atom-macros package, you have to write coffeescript in `.atom/macros.coffee` ahead of time to be able to run a command from the command pallette. To be honest, I'm not sure how that's different than just defining a function in `init.coffee`, but whatever. It's not what we're looking for at all.\n. On the one hand, I can really see how macros are something that atom should support outside of vim-mode - it's useful to you even if vim isn't. On the other hand, it _doesn't_ have macros anywhere right now, so if vim-mode can make it happen it's still sort of a win.\n\nI can see a lot of far future-reorganization happening though - one day pulling `ex-mode` into this package (Insha'Allah), and another pulling `vim-macros` out :)\n\n@romgrk I'm really excited and curious. I cloned and installed your fork last night, and I'll be more than happy to help you test it out as the macro feature comes together (I might even relearn coffeescript)!\n. Not to pop in just to say \"+1,\" but...\n\n**+1!**\n. Looking at [atom-macros](https://atom.io/packages/atom-macros), it's definitely _not_ what any vim user is thinking about when you mention an editor macro. With vim, you start recording a sequence of actions, so you can repeat the same editor commands multiple times.\n\nWith the atom-macros package, you have to write coffeescript in `.atom/macros.coffee` ahead of time to be able to run a command from the command pallette. To be honest, I'm not sure how that's different than just defining a function in `init.coffee`, but whatever. It's not what we're looking for at all.\n. On the one hand, I can really see how macros are something that atom should support outside of vim-mode - it's useful to you even if vim isn't. On the other hand, it _doesn't_ have macros anywhere right now, so if vim-mode can make it happen it's still sort of a win.\n\nI can see a lot of far future-reorganization happening though - one day pulling `ex-mode` into this package (Insha'Allah), and another pulling `vim-macros` out :)\n\n@romgrk I'm really excited and curious. I cloned and installed your fork last night, and I'll be more than happy to help you test it out as the macro feature comes together (I might even relearn coffeescript)!\n. ",
    "boyvinall": "+1\n. +1\n. ",
    "DrBones": "Whohoo..umm..\n+1\n. @danquirk I had the same issue with the user keybinding not taking precedence but I believe that was because a keybinding with a more specific context that has the same hotkey takes precedence over a more general one.\n\nI think there is a better way - but since I am new to this - I kinda hacked my ctr-c with\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-c': 'core:copy'\n```\n\nAlthough I try to only use it as a crutch since @chrisvdb's hint is really how I think it should be done.\n. Whohoo..umm..\n+1\n. @danquirk I had the same issue with the user keybinding not taking precedence but I believe that was because a keybinding with a more specific context that has the same hotkey takes precedence over a more general one.\n\nI think there is a better way - but since I am new to this - I kinda hacked my ctr-c with\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-c': 'core:copy'\n```\n\nAlthough I try to only use it as a crutch since @chrisvdb's hint is really how I think it should be done.\n. ",
    "mverardo": "+1\n. +1\n. ",
    "cshanes": "+1\n. +1\n. ",
    "arcseldon": "+10 :D  Atom is already awesome, as is VIM. But without Macros support, still regularly need to switch between the two text editors. With macros support, Atom would reach a point where for most day to day needs Vim is no longer required.\n. It is evident this is a very popular feature request. I already voted back on 1st July :)\n\n@jacekkopecky - sorry, I didn't understood whether the comments you have made above are a commitment to providing this feature. Please may I ask directly - Are any contributors from atom/atom or atom/vim-mode actively working on providing macros / vim register support for a generic macros solution in Atom?\n\nIn any case, keep up the excellent work, and thanks for everything provided to date.\n. @jacekkopecky Thank you for your reply and clarifying status. Appreciate everyone is doing what they can and when they can afford the time etc. Wish I could offer to help out too, but just not possible right now either for much the same reasons  :(   Cheers.\n. +10 :D  Atom is already awesome, as is VIM. But without Macros support, still regularly need to switch between the two text editors. With macros support, Atom would reach a point where for most day to day needs Vim is no longer required.\n. It is evident this is a very popular feature request. I already voted back on 1st July :)\n\n@jacekkopecky - sorry, I didn't understood whether the comments you have made above are a commitment to providing this feature. Please may I ask directly - Are any contributors from atom/atom or atom/vim-mode actively working on providing macros / vim register support for a generic macros solution in Atom?\n\nIn any case, keep up the excellent work, and thanks for everything provided to date.\n. @jacekkopecky Thank you for your reply and clarifying status. Appreciate everyone is doing what they can and when they can afford the time etc. Wish I could offer to help out too, but just not possible right now either for much the same reasons  :(   Cheers.\n. ",
    "walterheck": "+1\n. +1\n. ",
    "mwleeds": "Based on [this](http://vim.wikia.com/wiki/Macros) I compiled a list of features that should be included in this fix:\n- ability to record command sequences to registers <a-z> using \n\n```\nq<letter><commands>q\n```\n- ability to replay macros using\n\n```\n<number>@<letter>\n```\n\nwhere number is optional\n- ability to execute the last used macro again using\n\n```\n@@\n```\n- ability to run a single-line macro on each line of a visual selection using\n\n```\n:normal @<letter>\n```\n- ability to view all 26 registers' contents using\n\n```\n:registers\n```\n\nor\n\n```\n:reg\n```\n- ability to view one or more registers' contents using\n\n```\n:reg <letter><letter>...\n```\n- ability to save macros for use in a subsequent vim session\n- ability to disable saving macros or control their length using\n\n```\n:set viminfo=...\n```\n- ability to read macros from a vimrc file in the format\n\n```\nlet @<letter>='<commands>'\n```\n\n(or using that syntax at runtime)\n- ability to append to an existing macro using\n\n```\nq<capital-letter><commands>q\n```\n- ability to insert the contents of a register using\n\n```\n<Ctrl-R><Ctrl-R><letter>\n```\n. However, I don't see how many of them would work if Atom doesn't let you see commands as you type them like Vim does. Are there any plans to include this feature?\n. I think I'm very close to fixing this issue. In vim, text object selection is only legal after an operator or in visual mode, but vim-mode never checks for those conditions. So I think in lib/vim-state.coffee in either `pushOperations()` or `processOpStack()` we should check if we're not in `visual` mode but have a `TextObject` not preceded by an operator. Without the check, the code attempts to call `.execute()` when there's only a `.select()` instead.\n. Sure. Do you have an automated way to run all the spec files?\n. Thanks for the help @jacekkopecky. Should be fixed now.\n. Right. I should have made that more clear.\n. I found one way to fix this but it's kinda messy: modify `MoveToRelativeLine.moveCursor` to go to the last character of the row above if it's on the last line and modify `Motion.moveSelectionLinewise` to set the buffer range columns, not just rows. However it would be cleaner to modify `Delete.execute` to use `Selection.deleteLine()` instead of `Selection.deleteSelectedText()` in this situation.\n. I agree, @jacekkopecky. I thought this project is trying to mimic vim's functionality, but if we're not bound to that I think that's a better solution.\n. Yeah I'll rebase and force push.\n. This makes the second `instanceof` check on [this line](https://github.com/atom/vim-mode/blob/master/lib/vim-state.coffee#L224) unnecessary. Should we take it out?\n. @mattr- You're right that because the text object commands all start with i or a you would enter insert mode if you use the keyboard shortcuts. But if you execute the commands via the command palette instead (Ctrl + Shift + P) you stay in normal mode and vim-mode currently throws an error. This PR selects the text as if you're in visual mode, although it's debatable if we should just ignore the command.\n. Actually maybe #801 isn't a bug we should fix at all. Atom renders a newline character at the end of a file as an empty row while Vim doesn't show the row at all, but I think the current behavior matches in terms of what gets written to the disk. If this PR were merged Atom would create files that end without newline characters.\n. You're right but as I said in my last comment this whole PR diverges from Vim's behavior in terms of what gets written to the disk.\n\n![Trailing Newline Behavior](http://i.imgur.com/8P0x0aY.png)\n. @jacekkopecky I think I was able to get Atom to write a file without a newline at the end yesterday but I can't reproduce that now so I guess you're right.\n. As for the behavior of `dj` it makes sense to me but I guess we should stick with Vim's behavior.\n. Feel free to copy the tests from https://github.com/mleeds95/vim-mode/commit/0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a. I never got around to fixing #813.\n. vim-mode should launch automatically in normal mode once the package is installed.\n. Based on [this](http://vim.wikia.com/wiki/Macros) I compiled a list of features that should be included in this fix:\n- ability to record command sequences to registers <a-z> using \n\n```\nq<letter><commands>q\n```\n- ability to replay macros using\n\n```\n<number>@<letter>\n```\n\nwhere number is optional\n- ability to execute the last used macro again using\n\n```\n@@\n```\n- ability to run a single-line macro on each line of a visual selection using\n\n```\n:normal @<letter>\n```\n- ability to view all 26 registers' contents using\n\n```\n:registers\n```\n\nor\n\n```\n:reg\n```\n- ability to view one or more registers' contents using\n\n```\n:reg <letter><letter>...\n```\n- ability to save macros for use in a subsequent vim session\n- ability to disable saving macros or control their length using\n\n```\n:set viminfo=...\n```\n- ability to read macros from a vimrc file in the format\n\n```\nlet @<letter>='<commands>'\n```\n\n(or using that syntax at runtime)\n- ability to append to an existing macro using\n\n```\nq<capital-letter><commands>q\n```\n- ability to insert the contents of a register using\n\n```\n<Ctrl-R><Ctrl-R><letter>\n```\n. However, I don't see how many of them would work if Atom doesn't let you see commands as you type them like Vim does. Are there any plans to include this feature?\n. I think I'm very close to fixing this issue. In vim, text object selection is only legal after an operator or in visual mode, but vim-mode never checks for those conditions. So I think in lib/vim-state.coffee in either `pushOperations()` or `processOpStack()` we should check if we're not in `visual` mode but have a `TextObject` not preceded by an operator. Without the check, the code attempts to call `.execute()` when there's only a `.select()` instead.\n. Sure. Do you have an automated way to run all the spec files?\n. Thanks for the help @jacekkopecky. Should be fixed now.\n. Right. I should have made that more clear.\n. I found one way to fix this but it's kinda messy: modify `MoveToRelativeLine.moveCursor` to go to the last character of the row above if it's on the last line and modify `Motion.moveSelectionLinewise` to set the buffer range columns, not just rows. However it would be cleaner to modify `Delete.execute` to use `Selection.deleteLine()` instead of `Selection.deleteSelectedText()` in this situation.\n. I agree, @jacekkopecky. I thought this project is trying to mimic vim's functionality, but if we're not bound to that I think that's a better solution.\n. Yeah I'll rebase and force push.\n. This makes the second `instanceof` check on [this line](https://github.com/atom/vim-mode/blob/master/lib/vim-state.coffee#L224) unnecessary. Should we take it out?\n. @mattr- You're right that because the text object commands all start with i or a you would enter insert mode if you use the keyboard shortcuts. But if you execute the commands via the command palette instead (Ctrl + Shift + P) you stay in normal mode and vim-mode currently throws an error. This PR selects the text as if you're in visual mode, although it's debatable if we should just ignore the command.\n. Actually maybe #801 isn't a bug we should fix at all. Atom renders a newline character at the end of a file as an empty row while Vim doesn't show the row at all, but I think the current behavior matches in terms of what gets written to the disk. If this PR were merged Atom would create files that end without newline characters.\n. You're right but as I said in my last comment this whole PR diverges from Vim's behavior in terms of what gets written to the disk.\n\n![Trailing Newline Behavior](http://i.imgur.com/8P0x0aY.png)\n. @jacekkopecky I think I was able to get Atom to write a file without a newline at the end yesterday but I can't reproduce that now so I guess you're right.\n. As for the behavior of `dj` it makes sense to me but I guess we should stick with Vim's behavior.\n. Feel free to copy the tests from https://github.com/mleeds95/vim-mode/commit/0c4d1ace56aa658b59573ea7eaf84ad3cb6e903a. I never got around to fixing #813.\n. vim-mode should launch automatically in normal mode once the package is installed.\n. ",
    "kzaher": "+1\n. +1\n. ",
    "Phylodome": "+:100: \n\nWithout macros atom vim-mode is severely hamstrung :(\n. +:100: \n\nWithout macros atom vim-mode is severely hamstrung :(\n. ",
    "gmondada": "+1\n. +1\n. ",
    "romgrk": "To package maintainers:\n\nI have written a personnal Macro package, not published because it is not production-level, but it still works as I expect it to work.\nI would like to know if you would be open to a PR on this.\nThe implementation consists of a KeyboardEvent listener, which is activated upon corresponding command; it listens for events on `<atom-workspace>`. Once command is called again, it removes the listener and transform the KeyboardEvents in a string of keys (vim-notation). The string is then stored for further usage. \n. Ok, it might take a week or two; it's not actually a package, but a set of files I require from my `init.coffee`. A real mess, but it works; I'll put some order in there first. \n\nOh, and nothing like `atom-macros`. It really records the keys typed on the spot, as Vim does.\n. Same here. Seems to be that <Tab> is catched by editor:indent. I think it should be disabled by vim-mode on startup, or maybe just in normal mode.\n. I would strongly suggest to fix this ASAP. As more code is written, it will take greater effort to correct this. `Command mode` should refer to the mode in the command bar.\n. @maxbrunsfeld up\n. No, not possible unless you have a command named `vim-mode:move-up(4)`, but no argument is transferred, it's all strings. I have a function `custom:move-ten-down`, which is the best possible option for the moment.\n\n```\nFn =\n    moveCursor: (c) ->\n        e = atom.workspace.getActiveEditor()\n        p = e.getCursorScreenPosition()\n        p.row += c\n        e.setCursorScreenPosition(p)\n```\n\nThen\n\n```\ncommands = \n    ...\n    'custom:move-ten-down': Fn.moveCursor.bind(@, 10)\n    'custom:move-ten-up': Fn.moveCursor.bind(@, -10)\n    ...\n\nfor target, list of commands\n    for name, args of list\n        atom.commands.add target, name, args\n```\n\nAnd then of course you map some key to `custom:move-ten-up/down`.\n. No, I'm wrong. Y has the correct but unintuitive behavior.\n. #623 \n. Up. Could someone merge this?\n. Never seen that in Vim. Are you sure it isn't set in your vimrc?\n. Still poping for me, with atom v0.204.0.\nHappens only when I'm working with split panes.\n. I do have a personnal `:map` command but it's not production level.\nIt allows to write mappings like:\n\n``` coffeescript\nmaps =\n    '<a-k>': '5k'\n    '<a-j>': '5j'\n    '<a-d>': '<c-d>'\n    '<a-u>': '<c-u>'\n\nnmaps =\n    '<CR>':   'o<esc>'\n    '<S-CR>': 'O<esc>'\n    'Y':    'y$'\n    'S':    'v$hs'\n```\n\nIf you're interested I could try to bundle something.\n. To package maintainers:\n\nI have written a personnal Macro package, not published because it is not production-level, but it still works as I expect it to work.\nI would like to know if you would be open to a PR on this.\nThe implementation consists of a KeyboardEvent listener, which is activated upon corresponding command; it listens for events on `<atom-workspace>`. Once command is called again, it removes the listener and transform the KeyboardEvents in a string of keys (vim-notation). The string is then stored for further usage. \n. Ok, it might take a week or two; it's not actually a package, but a set of files I require from my `init.coffee`. A real mess, but it works; I'll put some order in there first. \n\nOh, and nothing like `atom-macros`. It really records the keys typed on the spot, as Vim does.\n. Same here. Seems to be that <Tab> is catched by editor:indent. I think it should be disabled by vim-mode on startup, or maybe just in normal mode.\n. I would strongly suggest to fix this ASAP. As more code is written, it will take greater effort to correct this. `Command mode` should refer to the mode in the command bar.\n. @maxbrunsfeld up\n. No, not possible unless you have a command named `vim-mode:move-up(4)`, but no argument is transferred, it's all strings. I have a function `custom:move-ten-down`, which is the best possible option for the moment.\n\n```\nFn =\n    moveCursor: (c) ->\n        e = atom.workspace.getActiveEditor()\n        p = e.getCursorScreenPosition()\n        p.row += c\n        e.setCursorScreenPosition(p)\n```\n\nThen\n\n```\ncommands = \n    ...\n    'custom:move-ten-down': Fn.moveCursor.bind(@, 10)\n    'custom:move-ten-up': Fn.moveCursor.bind(@, -10)\n    ...\n\nfor target, list of commands\n    for name, args of list\n        atom.commands.add target, name, args\n```\n\nAnd then of course you map some key to `custom:move-ten-up/down`.\n. No, I'm wrong. Y has the correct but unintuitive behavior.\n. #623 \n. Up. Could someone merge this?\n. Never seen that in Vim. Are you sure it isn't set in your vimrc?\n. Still poping for me, with atom v0.204.0.\nHappens only when I'm working with split panes.\n. I do have a personnal `:map` command but it's not production level.\nIt allows to write mappings like:\n\n``` coffeescript\nmaps =\n    '<a-k>': '5k'\n    '<a-j>': '5j'\n    '<a-d>': '<c-d>'\n    '<a-u>': '<c-u>'\n\nnmaps =\n    '<CR>':   'o<esc>'\n    '<S-CR>': 'O<esc>'\n    'Y':    'y$'\n    'S':    'v$hs'\n```\n\nIf you're interested I could try to bundle something.\n. ",
    "PandaWhisperer": "+10 :smile: \n. ^^ This works.\n. +10 :smile: \n. ^^ This works.\n. ",
    "rhelsing": "Need this! +1\n. Need this! +1\n. ",
    "adamprescott": ":+1: \n. :+1: \n. ",
    "ringate": "+1\n. +1\n. ",
    "ntdef": "+1 \n. +1 \n. ",
    "kontrarian": "+1\n. +1\n. ",
    "cdpetty": "+1\n. +1\n. ",
    "markrichards": "+1\n. +1\n. ",
    "Ramblurr": "+1\n. +1\n. ",
    "Luisss": "+1\n. +1\n. ",
    "signalbug": "+1!\n. +1!\n. ",
    "RVMendoza": "+1  \n. +1  \n. ",
    "axelduch": "+1\n. +1\n. ",
    "caiocutrim": "+1\n. Great Idea, I almost open a new Issue about that :), but someone thinks first XD\n. +1\n. Great Idea, I almost open a new Issue about that :), but someone thinks first XD\n. ",
    "jtheoof": "Any progress on this?\n. Any progress on this?\n. ",
    "olivoil": "+1\n. +1\n. ",
    "masics": "+1\n. +1\n. ",
    "dantaeyoung": "+1\n. +1\n. ",
    "stavinopolis": "+1\n. +1\n. ",
    "HappyTepid": "+1\n. +1\n. ",
    "wild-ki-ll": "+1\n. +1\n. ",
    "jrpredes": "+1\n. +1\n. ",
    "Daxez": "+1\n. +1\n. ",
    "qiaomuf": "+1\n. +1\n. ",
    "crazy4groovy": "+1\n. +1\n. ",
    "brujo-rojas": "+1\n. +1\n. ",
    "sunjay": "+1\n. Thank you!\n. Any update on this? This is still happening. \n. Doesn't seem like it. Only vim-mode is acting on that key.\n\n![ss 2016-04-21 at 03 36 58](https://cloud.githubusercontent.com/assets/530939/14721904/fbfe1804-07d6-11e6-908d-7c84290bc7c5.png)\n. Maybe something in the core broke it?\n. +1\n. Thank you!\n. Any update on this? This is still happening. \n. Doesn't seem like it. Only vim-mode is acting on that key.\n\n![ss 2016-04-21 at 03 36 58](https://cloud.githubusercontent.com/assets/530939/14721904/fbfe1804-07d6-11e6-908d-7c84290bc7c5.png)\n. Maybe something in the core broke it?\n. ",
    "evandro777": "That would be awesome! I use notepad++ for macros when i need, but i use linux, so wine is needed.\n. That would be awesome! I use notepad++ for macros when i need, but i use linux, so wine is needed.\n. ",
    "igagen": "+1\n. +1\n. ",
    "karlfloersch": "+1\n. +1\n. ",
    "jeremiahkonkle": "+1\n. +1\n. ",
    "sayingandparsing": "+1\n. +1\n. ",
    "palatok": "+1\n. +1\n. +1\n. +1\n. ",
    "lime-green": "+1\n. +1\n. ",
    "JunSuzukiJapan": "Hi, all.\n\nI've tried to make keyboard macro package, but this is or become useless?\n\n[atom-keyboard-macros-vim](https://atom.io/packages/atom-keyboard-macros-vim)\n\nI usually use emacs key-bindings, so I'm not familiar about the vim.\n. Hi, all.\n\nI've tried to make keyboard macro package, but this is or become useless?\n\n[atom-keyboard-macros-vim](https://atom.io/packages/atom-keyboard-macros-vim)\n\nI usually use emacs key-bindings, so I'm not familiar about the vim.\n. ",
    "sarojkh": "+1\n. +1\n. ",
    "thomasjo": "As it stands, all the +1's are only adding noise and causes 62+ people to get notified. Therefore I'm locking this issue for the time being.\n. As mentioned by @bronson, this was resolved when https://github.com/atom/vim-mode/pull/508 got merged.\n. Please provide more details about your setup; OS, installed packages, etc.\n. I was going to propose the same, but vim-mode is not a core package, so it'll be disabled when running in safe mode.\n. As it stands, all the +1's are only adding noise and causes 62+ people to get notified. Therefore I'm locking this issue for the time being.\n. As mentioned by @bronson, this was resolved when https://github.com/atom/vim-mode/pull/508 got merged.\n. Please provide more details about your setup; OS, installed packages, etc.\n. I was going to propose the same, but vim-mode is not a core package, so it'll be disabled when running in safe mode.\n. ",
    "milyord": "I understand that escape needs to take you to command mode but if you are\nalready in command mode it should hide the search box.\nOn Mar 13, 2014 10:41 AM, \"Matt Colyer\" notifications@github.com wrote:\n\n> The esc keypress in vim-mode indicates that you want to return to command\n> mode. You could override it in your personal keymap, if you'd like to\n> change the behavior.\n> \n> https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L2(also lines 7 and 125)\n> \n> As for the block cursor, it was changed in #136https://github.com/atom/vim-mode/pull/136.\n> Does it not show up in your focused editor?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/165#issuecomment-37562846\n> .\n. Not really. It never got fixed.\n. I understand that escape needs to take you to command mode but if you are\nalready in command mode it should hide the search box.\nOn Mar 13, 2014 10:41 AM, \"Matt Colyer\" notifications@github.com wrote:\n\n> The esc keypress in vim-mode indicates that you want to return to command\n> mode. You could override it in your personal keymap, if you'd like to\n> change the behavior.\n> \n> https://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson#L2(also lines 7 and 125)\n> \n> As for the block cursor, it was changed in #136https://github.com/atom/vim-mode/pull/136.\n> Does it not show up in your focused editor?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/165#issuecomment-37562846\n> .\n. Not really. It never got fixed.\n. ",
    "bradleyflood": "Is there any chance `esc` in vim-mode could function in this logic as suggested above?\n1. `esc` from insert mode go to command mode\n2. `esc` again (already in command mode now) -> Close search box etc. (fall back to default Atom functionality)\n. +1\n. Same\n. +1 for `cit` and `dit` which I use very frequently as a front-end dev.\n. Excellent thank you\n. Likely related to #522 \nRemoving package, restarting Atom and re-installing package fixed it for me.\n. Looks to be related to #497 \nRemoving package, restarting Atom and reinstalling fixes the backspace issue.\n. Is there any chance `esc` in vim-mode could function in this logic as suggested above?\n1. `esc` from insert mode go to command mode\n2. `esc` again (already in command mode now) -> Close search box etc. (fall back to default Atom functionality)\n. +1\n. Same\n. +1 for `cit` and `dit` which I use very frequently as a front-end dev.\n. Excellent thank you\n. Likely related to #522 \nRemoving package, restarting Atom and re-installing package fixed it for me.\n. Looks to be related to #497 \nRemoving package, restarting Atom and reinstalling fixes the backspace issue.\n. ",
    "JeremyChase": "I have an [open PR](https://github.com/atom/vim-mode/pull/869) that addresses this issue.\n. As per [benogle's](https://github.com/benogle) [comment](https://github.com/atom/find-and-replace/pull/535#issuecomment-144876936) I have switched to using `core:cancel` from `vim-mode`. Any issues with this?\n. @maxbrunsfeld I saw you have recently made commits to `vim-mode`. What is the next step to have this PR reviewed?\n. I have an [open PR](https://github.com/atom/vim-mode/pull/869) that addresses this issue.\n. As per [benogle's](https://github.com/benogle) [comment](https://github.com/atom/find-and-replace/pull/535#issuecomment-144876936) I have switched to using `core:cancel` from `vim-mode`. Any issues with this?\n. @maxbrunsfeld I saw you have recently made commits to `vim-mode`. What is the next step to have this PR reviewed?\n. ",
    "stv8": "In the mean time here is a temp fix\n\n``` cson\n'atom-text-editor.vim-mode.normal-mode':\n  'escape': 'core:cancel'\n```\n. @rdlugosz solution works well, but do you know how you can stop it from backspacing? In other words is there a way I can press `jk` and still stay in place rather than move one character back?\n\nEDIT: I figured it out by adding `editor.moveRight()` \n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-proceded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    editor.moveRight()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-command-mode')\n```\n. @rdlugosz yeah it is a bit inconsistent but I kind of like it :) \n. @rufo thanks for the info! I had it as a class as well and was wondering why it wasn't working :+1: \n. +1 get this into Atom!\n. In the mean time here is a temp fix\n\n``` cson\n'atom-text-editor.vim-mode.normal-mode':\n  'escape': 'core:cancel'\n```\n. @rdlugosz solution works well, but do you know how you can stop it from backspacing? In other words is there a way I can press `jk` and still stay in place rather than move one character back?\n\nEDIT: I figured it out by adding `editor.moveRight()` \n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-proceded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    editor.moveRight()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-command-mode')\n```\n. @rdlugosz yeah it is a bit inconsistent but I kind of like it :) \n. @rufo thanks for the info! I had it as a class as well and was wondering why it wasn't working :+1: \n. +1 get this into Atom!\n. ",
    "lbergnehr": "Not at all :)\n. Not at all :)\n. ",
    "danielmurphy": "kk. Was hoping I wouldn't have to disable it system wide. Sublime doesn't do it, so there seems to be something an app can do to prevent it. I'll send some feedback to Atom and see what comes back.\n\nThanks for the link.\n. I'm way late to the party, but the workaround here is to edit your keymap. In `keymap.cson`, add these lines:\n\n```\n'atom-text-editor.vim-mode.normal-mode':\n  'x': 'core:delete'\n```\n\nWorks for me!\u2122\n. kk. Was hoping I wouldn't have to disable it system wide. Sublime doesn't do it, so there seems to be something an app can do to prevent it. I'll send some feedback to Atom and see what comes back.\n\nThanks for the link.\n. I'm way late to the party, but the workaround here is to edit your keymap. In `keymap.cson`, add these lines:\n\n```\n'atom-text-editor.vim-mode.normal-mode':\n  'x': 'core:delete'\n```\n\nWorks for me!\u2122\n. ",
    "msvbg": "The Emacs devs seem to have found a solution: https://github.com/tovbinm/emacs-24-mac/blob/master/lisp/term/ns-win.el#l925. Not sure how you'd implement it in Atom though.\n. The Emacs devs seem to have found a solution: https://github.com/tovbinm/emacs-24-mac/blob/master/lisp/term/ns-win.el#l925. Not sure how you'd implement it in Atom though.\n. ",
    "tma-isbx": "I have the same issue with 'u' but I have the IME dialog disabled systemwide.\n. I have the same issue with 'u' but I have the IME dialog disabled systemwide.\n. ",
    "opichals": "Perhaps this might help: http://www.lorrin.org/blog/2012/03/02/fixing-key-repeat-in-os-x-lion-and-restoring-sanity-for-vim-keybindings-on-a-per-application-basis/. It would be a nice config option directly in the Mac version of Atom editor.\n. Nice, thanks! :+1: \n. Perhaps this might help: http://www.lorrin.org/blog/2012/03/02/fixing-key-repeat-in-os-x-lion-and-restoring-sanity-for-vim-keybindings-on-a-per-application-basis/. It would be a nice config option directly in the Mac version of Atom editor.\n. Nice, thanks! :+1: \n. ",
    "rastasheep": "You can disable this per app basis or globaly, here is how : https://gist.github.com/rastasheep/bfc8266eeb58b899054c\n. You can disable this per app basis or globaly, here is how : https://gist.github.com/rastasheep/bfc8266eeb58b899054c\n. ",
    "gblock0": "![screenshot 2014-03-16 12 42 46](https://f.cloud.github.com/assets/1434705/2431505/707bbd82-ad32-11e3-8f75-4bbc366a7553.png)\n![screenshot 2014-03-16 12 42 53](https://f.cloud.github.com/assets/1434705/2431506/707ed71a-ad32-11e3-87bc-e1665bf2acb4.png)\n. ![screenshot 2014-03-16 12 42 46](https://f.cloud.github.com/assets/1434705/2431505/707bbd82-ad32-11e3-8f75-4bbc366a7553.png)\n![screenshot 2014-03-16 12 42 53](https://f.cloud.github.com/assets/1434705/2431506/707ed71a-ad32-11e3-87bc-e1665bf2acb4.png)\n. ",
    "clintberry": "so is this in a state now where we just need to add the keybindings manually for `i \"`, `i {`, etc? I see `i w` was added so that is awesome.\n. so sorry. I found a couple other tickets for this already. Should have looked harder the first time.\n. so is this in a state now where we just need to add the keybindings manually for `i \"`, `i {`, etc? I see `i w` was added so that is awesome.\n. so sorry. I found a couple other tickets for this already. Should have looked harder the first time.\n. ",
    "eric-wood": "I like that second option as well! I guess in the end all I really want is a way to access Atom commands via : \n. Awesome, thanks for the feedback, I'll maybe play with the keymap for now!\n. I like that second option as well! I guess in the end all I really want is a way to access Atom commands via : \n. Awesome, thanks for the feedback, I'll maybe play with the keymap for now!\n. ",
    "alexkolson": "Just +1'ing an `ex` type emulation here. Atom is awesome and even though its just in beta I've all but left all other editors in the dust for it, however I keep experiencing The Uncanny Valley with no `ex` type mode. I wouldn't even submit that the first iteration needs to support every possible vim command, just `:w` and `:q` would be a great addition. :)\n. Just +1'ing an `ex` type emulation here. Atom is awesome and even though its just in beta I've all but left all other editors in the dust for it, however I keep experiencing The Uncanny Valley with no `ex` type mode. I wouldn't even submit that the first iteration needs to support every possible vim command, just `:w` and `:q` would be a great addition. :)\n. ",
    "paulcsmith": "This would be so helpful\n. I also would love to see this :+1: \n. This would be so helpful\n. I also would love to see this :+1: \n. ",
    "wil93": ":+1: \n. Thanks @michaellenahan, I used a slightly different version of your keymap.cson:\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'ctrl-c': 'core:copy'\n```\n\nI think it's good to specify `.insert-mode` because:\n1. In insert mode there's already ctrl-v to paste, so it makes sense to also have ctrl-c to copy\n2. In visual mode I can already use `y`/`p`/`P`\n. :+1: \n. Thanks @michaellenahan, I used a slightly different version of your keymap.cson:\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'ctrl-c': 'core:copy'\n```\n\nI think it's good to specify `.insert-mode` because:\n1. In insert mode there's already ctrl-v to paste, so it makes sense to also have ctrl-c to copy\n2. In visual mode I can already use `y`/`p`/`P`\n. ",
    "piohhmy": "+1\n. +1\n. ",
    "AsaAyers": "How can we simply get `gq` to do the built in reflow for now? I tried but there's something I'm missing in the selector as I couldn't type words with `g`s.\n. This works\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'g q': 'autoflow:reflow-selection'\n\n'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n  'g q': 'autoflow:reflow-selection'\n```\n. I updated my comment above to the keymap that I'm using. I think I was wrong when I said it didn't work because I think it's the same.\n. The one problem I found with V g q is that the cursor is technically in the\nfirst column of the next line, so it gets included.\n\ng q seems to be smart enough on comments to reflow multi line comments\nwithout having to select all the lines\nOn Jun 30, 2015 11:12 AM, \"Cody Krieger\" notifications@github.com wrote:\n\n> @AsaAyers https://github.com/AsaAyers Thanks! That gets closer to the\n> behavior I'm used to\u2014one case that still doesn't work is v g q (i.e. with\n> a selection within a line), but I guess that's probably a problem with\n> autoflow https://github.com/atom/autoflow. V g q works as expected.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/186#issuecomment-117221959.\n. The keymap approach didn't work for me. Maybe I'm just not finding all of the combinations I need to `unset!`.\n\nhttps://atom.io/docs/api/v1.10.2/KeymapManager the `.keyBindings` property isn't documented here, so I assume it isn't intended to be part of the public API and I shouldn't be messing with it. And with that out of the way, I added this to my `init.coffee` and now `ctrl-w` closes the tab immediately.\n\n``` coffee\natom.keymaps.keyBindings = atom.keymaps.keyBindings.filter(\n  ({keystrokes}) -> not keystrokes.match(/ctrl-w\\s/)\n)\n```\n. Thanks! that worked.\n\nI'll leave the issue open though, I think it would be nice to include in `vim-mode` by default.\n\nI got :wa going too:\n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ': w': 'core:save'\n  ': w a': 'window:save-all'\n```\n. Because [`ex-mode`](https://atom.io/packages/ex-mode) already handles `:w` it doesn't make any sense to add `:w` to vim-mode no matter how many people +1 it. But I think it might be worth considering having `vim-mode` auto-install [`ex-mode`](https://atom.io/packages/ex-mode)\n\nThe `linter-*` plugins don't do anything without `linter` installed. [`linter-eslint`](https://github.com/AtomLinter/linter-eslint/blob/master/lib/main.js#L71) uses [`atom-package-deps`](https://www.npmjs.com/package/atom-package-deps) to auto-install `linter` when it loads.\n. Right, and I'm just saying that since there is an existing project that already handles it I think it makes more sense to pair them. `vim-mode` should bring in `ex-mode` when you install it. It doesn't make any sense for `vim-mode` to implement exactly 1 ex-command that conflicts with another package.\n. Yes, most of the `linter-*` packages will install `linter` if you don't have it.\n\n> The `linter-*` plugins don't do anything without `linter` installed. [`linter-eslint`](https://github.com/AtomLinter/linter-eslint/blob/master/lib/main.js#L71) uses [`atom-package-deps`](https://www.npmjs.com/package/atom-package-deps) to auto-install `linter` when it loads.\n. If you add `fixes # 538` (without the space) to the body of your pull request it'll close this issue when it gets merged. You can't add it as an extra comment, it has to be in the body, the subject, or one of the commit messages.\n. ![funny-gif-asian-guy-thumbs-up](https://cloud.githubusercontent.com/assets/324999/6573985/82d6c1be-c6f6-11e4-802f-83d9c9a728b9.gif)\n. How can we simply get `gq` to do the built in reflow for now? I tried but there's something I'm missing in the selector as I couldn't type words with `g`s.\n. This works\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'g q': 'autoflow:reflow-selection'\n\n'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n  'g q': 'autoflow:reflow-selection'\n```\n. I updated my comment above to the keymap that I'm using. I think I was wrong when I said it didn't work because I think it's the same.\n. The one problem I found with V g q is that the cursor is technically in the\nfirst column of the next line, so it gets included.\n\ng q seems to be smart enough on comments to reflow multi line comments\nwithout having to select all the lines\nOn Jun 30, 2015 11:12 AM, \"Cody Krieger\" notifications@github.com wrote:\n\n> @AsaAyers https://github.com/AsaAyers Thanks! That gets closer to the\n> behavior I'm used to\u2014one case that still doesn't work is v g q (i.e. with\n> a selection within a line), but I guess that's probably a problem with\n> autoflow https://github.com/atom/autoflow. V g q works as expected.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/186#issuecomment-117221959.\n. The keymap approach didn't work for me. Maybe I'm just not finding all of the combinations I need to `unset!`.\n\nhttps://atom.io/docs/api/v1.10.2/KeymapManager the `.keyBindings` property isn't documented here, so I assume it isn't intended to be part of the public API and I shouldn't be messing with it. And with that out of the way, I added this to my `init.coffee` and now `ctrl-w` closes the tab immediately.\n\n``` coffee\natom.keymaps.keyBindings = atom.keymaps.keyBindings.filter(\n  ({keystrokes}) -> not keystrokes.match(/ctrl-w\\s/)\n)\n```\n. Thanks! that worked.\n\nI'll leave the issue open though, I think it would be nice to include in `vim-mode` by default.\n\nI got :wa going too:\n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ': w': 'core:save'\n  ': w a': 'window:save-all'\n```\n. Because [`ex-mode`](https://atom.io/packages/ex-mode) already handles `:w` it doesn't make any sense to add `:w` to vim-mode no matter how many people +1 it. But I think it might be worth considering having `vim-mode` auto-install [`ex-mode`](https://atom.io/packages/ex-mode)\n\nThe `linter-*` plugins don't do anything without `linter` installed. [`linter-eslint`](https://github.com/AtomLinter/linter-eslint/blob/master/lib/main.js#L71) uses [`atom-package-deps`](https://www.npmjs.com/package/atom-package-deps) to auto-install `linter` when it loads.\n. Right, and I'm just saying that since there is an existing project that already handles it I think it makes more sense to pair them. `vim-mode` should bring in `ex-mode` when you install it. It doesn't make any sense for `vim-mode` to implement exactly 1 ex-command that conflicts with another package.\n. Yes, most of the `linter-*` packages will install `linter` if you don't have it.\n\n> The `linter-*` plugins don't do anything without `linter` installed. [`linter-eslint`](https://github.com/AtomLinter/linter-eslint/blob/master/lib/main.js#L71) uses [`atom-package-deps`](https://www.npmjs.com/package/atom-package-deps) to auto-install `linter` when it loads.\n. If you add `fixes # 538` (without the space) to the body of your pull request it'll close this issue when it gets merged. You can't add it as an extra comment, it has to be in the body, the subject, or one of the commit messages.\n. ![funny-gif-asian-guy-thumbs-up](https://cloud.githubusercontent.com/assets/324999/6573985/82d6c1be-c6f6-11e4-802f-83d9c9a728b9.gif)\n. ",
    "codykrieger": "+1\n. @AsaAyers Thanks! That gets closer to the behavior I'm used to\u2014one case that still doesn't work is `v g q` (i.e. with a selection within a line), but I guess that's probably a problem with [autoflow](https://github.com/atom/autoflow). `V g q` works as expected.\n. Yeah, that behavior is super annoying.\n. Not quite sure how I did it, but here's my stack trace with vim-mode 0.55.0 and Atom 1.0.1:\n\n```\nTypeError: undefined is not a function\n  at VimState.module.exports.VimState.processOpStack (/Users/cjk/.atom/packages/vim-mode/lib/vim-state.coffee:268:23)\n  at VimState.module.exports.VimState.pushOperations (/Users/cjk/.atom/packages/vim-mode/lib/vim-state.coffee:226:8)\n  at ViewModel.confirm (/Users/cjk/.atom/packages/vim-mode/lib/view-models/view-model.coffee:11:15)\n  at vim-command-mode-input.VimCommandModeInputElement.confirm (/Users/cjk/.atom/packages/vim-mode/lib/view-models/vim-command-mode-input-element.coffee:46:16)\n  at /Users/cjk/.atom/packages/vim-mode/lib/view-models/vim-command-mode-input-element.coffee:36:10\n  at Emitter.module.exports.Emitter.emit (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:82:11)\n  at TextBuffer.module.exports.TextBuffer.applyChange (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:626:20)\n  at TextBuffer.module.exports.TextBuffer.setTextInRange (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:534:12)\n  at Selection.module.exports.Selection.insertText (/Applications/Atom.app/Contents/Resources/app.asar/src/selection.js:468:43)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:736:29\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:778:29\n  at TextBuffer.module.exports.TextBuffer.transact (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:740:18)\n  at TextEditor.module.exports.TextEditor.transact (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:1151:26)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:772:24\n  at TextEditor.module.exports.TextEditor.mergeSelections (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:2017:18)\n  at TextEditor.module.exports.TextEditor.mergeIntersectingSelections (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:1987:35)\n  at TextEditor.module.exports.TextEditor.mutateSelectedText (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:770:19)\n  at TextEditor.module.exports.TextEditor.insertText (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:733:19)\n  at TextEditorComponent.module.exports.TextEditorComponent.onTextInput (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor-component.js:444:35)\n  at HTMLDivElement.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor-component.js:3:61)\n```\n. @maxbrunsfeld You bet; reported in #759.\n. +1\n. @AsaAyers Thanks! That gets closer to the behavior I'm used to\u2014one case that still doesn't work is `v g q` (i.e. with a selection within a line), but I guess that's probably a problem with [autoflow](https://github.com/atom/autoflow). `V g q` works as expected.\n. Yeah, that behavior is super annoying.\n. Not quite sure how I did it, but here's my stack trace with vim-mode 0.55.0 and Atom 1.0.1:\n\n```\nTypeError: undefined is not a function\n  at VimState.module.exports.VimState.processOpStack (/Users/cjk/.atom/packages/vim-mode/lib/vim-state.coffee:268:23)\n  at VimState.module.exports.VimState.pushOperations (/Users/cjk/.atom/packages/vim-mode/lib/vim-state.coffee:226:8)\n  at ViewModel.confirm (/Users/cjk/.atom/packages/vim-mode/lib/view-models/view-model.coffee:11:15)\n  at vim-command-mode-input.VimCommandModeInputElement.confirm (/Users/cjk/.atom/packages/vim-mode/lib/view-models/vim-command-mode-input-element.coffee:46:16)\n  at /Users/cjk/.atom/packages/vim-mode/lib/view-models/vim-command-mode-input-element.coffee:36:10\n  at Emitter.module.exports.Emitter.emit (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:82:11)\n  at TextBuffer.module.exports.TextBuffer.applyChange (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:626:20)\n  at TextBuffer.module.exports.TextBuffer.setTextInRange (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:534:12)\n  at Selection.module.exports.Selection.insertText (/Applications/Atom.app/Contents/Resources/app.asar/src/selection.js:468:43)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:736:29\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:778:29\n  at TextBuffer.module.exports.TextBuffer.transact (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:740:18)\n  at TextEditor.module.exports.TextEditor.transact (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:1151:26)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:772:24\n  at TextEditor.module.exports.TextEditor.mergeSelections (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:2017:18)\n  at TextEditor.module.exports.TextEditor.mergeIntersectingSelections (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:1987:35)\n  at TextEditor.module.exports.TextEditor.mutateSelectedText (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:770:19)\n  at TextEditor.module.exports.TextEditor.insertText (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor.js:733:19)\n  at TextEditorComponent.module.exports.TextEditorComponent.onTextInput (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor-component.js:444:35)\n  at HTMLDivElement.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/text-editor-component.js:3:61)\n```\n. @maxbrunsfeld You bet; reported in #759.\n. ",
    "wmayner": "+1\n. :+1:\n\nSelecting inside brackets, etc. still fails when the cursor is on either the closing bracket or the character immediately preceding it.\n\nIt looks like this is because of two things:\n1. With this implementation, \u201cinside\u201d brackets is taken to mean that the cursor is between the brackets; in Vim, the cursor can be _on_ a bracket and you can still select whats inside.\n2. Entering visual mode moves the cursor one position to the right, so that when you're on the character immediately to the left of the closing bracket and you press `v`, your cursor moves onto the bracket, which results in the above behavior.\n. +1\n. :+1:\n\nSelecting inside brackets, etc. still fails when the cursor is on either the closing bracket or the character immediately preceding it.\n\nIt looks like this is because of two things:\n1. With this implementation, \u201cinside\u201d brackets is taken to mean that the cursor is between the brackets; in Vim, the cursor can be _on_ a bracket and you can still select whats inside.\n2. Entering visual mode moves the cursor one position to the right, so that when you're on the character immediately to the left of the closing bracket and you press `v`, your cursor moves onto the bracket, which results in the above behavior.\n. ",
    "execjosh": "I think that soft wrapping is different from this issue.  `Editor{,View}` and `DisplayBuffer` handle soft wrapping.  The soft-wrapping functionality probably also needs to be updated to take non-uniform width (e.g., double-width CJK) characters into account.  However, this and the soft wrapping issues are different.\n\nThe `CursorView`'s element sits in the `overlayer` layer and initially just has an `\"&nbsp;\"` in it.  That's fine for mono-spaced Latin-1 fonts, where the width of a character is the same as a non-breaking space.  The cursor's upper left corner is also properly set by the editor view.  However, the problem is that the width of a non-breaking-space-sized block cursor can be different from that of the actual character it is supposed to be covering.  This becomes apparent when working with CJK files.  So, this fix puts that character inside the cursor so that it will autosize correctly.\n. @zenhob @bhuga \n\nThanks.\n\nMy initial reaction was \"i can haz block cursor with vim\".  However, after thinking a bit about it, I've come to the conclusion that this functionality would be better off in core because you can just fiddle with your stylesheet to get a block cursor anyway.  In fact, that's what vim-mode does, right?\n\nSo, in other words, it's not vim-mode's fault.  Really, the core should be providing a `CursorView` that is the same size as the character under it.\n\nIf you guys agree that it should rather be in core, or at least not in this package, then please feel free to close this PR and I'll try to make a \"block-cursor\" package to do the job instead.\n. I [patched](https://gist.github.com/execjosh/9679941) `cursor-view.js` and `editor-view.js` inside `/Applications/Atom.app/Contents/Resources/app/src` (Version 0.75.0) to support block cursor functionality for CJK chars and most whitespace chars.\n. I just tested it with v0.80.0 and it doesn't seem to be fixed.\n\n![image](https://cloud.githubusercontent.com/assets/189989/2557451/23af03ba-b705-11e3-99a5-cdfb9dc2c212.png)\n. The main problem is that the value of the cursor is always `&nbsp;`, which is only the width of a single half-width space.\n. I'm going to close this issue.\n. Ah, I made a pull request to the core editor (atom/atom#2119) and figured that this request is redundant...  Is the React-based editor going to cover the block-cursor issue?\n. I think that soft wrapping is different from this issue.  `Editor{,View}` and `DisplayBuffer` handle soft wrapping.  The soft-wrapping functionality probably also needs to be updated to take non-uniform width (e.g., double-width CJK) characters into account.  However, this and the soft wrapping issues are different.\n\nThe `CursorView`'s element sits in the `overlayer` layer and initially just has an `\"&nbsp;\"` in it.  That's fine for mono-spaced Latin-1 fonts, where the width of a character is the same as a non-breaking space.  The cursor's upper left corner is also properly set by the editor view.  However, the problem is that the width of a non-breaking-space-sized block cursor can be different from that of the actual character it is supposed to be covering.  This becomes apparent when working with CJK files.  So, this fix puts that character inside the cursor so that it will autosize correctly.\n. @zenhob @bhuga \n\nThanks.\n\nMy initial reaction was \"i can haz block cursor with vim\".  However, after thinking a bit about it, I've come to the conclusion that this functionality would be better off in core because you can just fiddle with your stylesheet to get a block cursor anyway.  In fact, that's what vim-mode does, right?\n\nSo, in other words, it's not vim-mode's fault.  Really, the core should be providing a `CursorView` that is the same size as the character under it.\n\nIf you guys agree that it should rather be in core, or at least not in this package, then please feel free to close this PR and I'll try to make a \"block-cursor\" package to do the job instead.\n. I [patched](https://gist.github.com/execjosh/9679941) `cursor-view.js` and `editor-view.js` inside `/Applications/Atom.app/Contents/Resources/app/src` (Version 0.75.0) to support block cursor functionality for CJK chars and most whitespace chars.\n. I just tested it with v0.80.0 and it doesn't seem to be fixed.\n\n![image](https://cloud.githubusercontent.com/assets/189989/2557451/23af03ba-b705-11e3-99a5-cdfb9dc2c212.png)\n. The main problem is that the value of the cursor is always `&nbsp;`, which is only the width of a single half-width space.\n. I'm going to close this issue.\n. Ah, I made a pull request to the core editor (atom/atom#2119) and figured that this request is redundant...  Is the React-based editor going to cover the block-cursor issue?\n. ",
    "sebastianvera": "plz :cry: \n. plz :cry: \n. ",
    "tangledhelix": "AFAICT in the past couple of years, vim-surround has matured and is \"done\" - I use it all the time in fact. Can this issue be closed?\n. So far as I can tell, it doesn't move \"too far,\" what it seems to be doing is matching whatever the current indent level is (based on the lines prior to it, and probably influenced by the indentation rules of the language you're editing).\n\nIn any case, I would agree Tab should be ignored. This is just doing shifts, the Vim way to do that is `>>` and `<<`, not Tab.\n. @dakotahp I use this, which lets me type \"just kidding\" without any aggravation:\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n    'j j': 'vim-mode:activate-normal-mode'\n    'j k': 'vim-mode:activate-normal-mode'\n```\n\nI also added a `kj` mapping to test, and it also had no issues. In the rare weird cases where for some reason I actually want to type a `jj` or `jk` of course, it's annoying, but that's pretty rare.\n. This can be closed, I think - `ZZ` works in the stock package now as far as I can tell.\n. Seems like this issue should be closed? This is merged to master a while ago and in the release...\n. Replace mode was merged some time ago - this issue can be closed, I think.\n. \ud83d\udc4d \n. I suppose this is a matter of opinion, but I have always viewed this behavior as a feature, not a bug. I often scroll around a file to look at something, but do not want the cursor to move from the current position. Then I can `zz` to get back where I was already working.\n\nIs the behavior you describe the way Vim behaves? Sure - but only because \"the cursor is always visible in the viewport\" is a limitation inherent in a terminal emulator.\n. This is not reliant on the `:` being typed. `5`<kbd>Enter</kbd> behaves exactly the same way. Since <kbd>Enter</kbd> alone moves down by one line, this is obviously being treated as a repeat-X-times command.\n. It can select inside the tag in some cases, but it doesn't behave the same way Vim does. As far as I can tell, using this sample tag:\n\n```\n<span class=\"foo\">Bar</span>\n```\n\nIf the cursor is over `B` or `a`, then `vit` selects `Bar` as you would expect.\n\nIf the cursor is over `r` (right-most character between the tag markup), then nothing is selected.\n\nIf the cursor is over the `>` at the end of the tag opener, then it wrongly selects `>Bar`.\n\nIf the cursor is anywhere else, nothing is selected.\n\nIn Vim, it seems anywhere you are positioned at all, `vit` will select `Bar` properly.\n. AFAICT in the past couple of years, vim-surround has matured and is \"done\" - I use it all the time in fact. Can this issue be closed?\n. So far as I can tell, it doesn't move \"too far,\" what it seems to be doing is matching whatever the current indent level is (based on the lines prior to it, and probably influenced by the indentation rules of the language you're editing).\n\nIn any case, I would agree Tab should be ignored. This is just doing shifts, the Vim way to do that is `>>` and `<<`, not Tab.\n. @dakotahp I use this, which lets me type \"just kidding\" without any aggravation:\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n    'j j': 'vim-mode:activate-normal-mode'\n    'j k': 'vim-mode:activate-normal-mode'\n```\n\nI also added a `kj` mapping to test, and it also had no issues. In the rare weird cases where for some reason I actually want to type a `jj` or `jk` of course, it's annoying, but that's pretty rare.\n. This can be closed, I think - `ZZ` works in the stock package now as far as I can tell.\n. Seems like this issue should be closed? This is merged to master a while ago and in the release...\n. Replace mode was merged some time ago - this issue can be closed, I think.\n. \ud83d\udc4d \n. I suppose this is a matter of opinion, but I have always viewed this behavior as a feature, not a bug. I often scroll around a file to look at something, but do not want the cursor to move from the current position. Then I can `zz` to get back where I was already working.\n\nIs the behavior you describe the way Vim behaves? Sure - but only because \"the cursor is always visible in the viewport\" is a limitation inherent in a terminal emulator.\n. This is not reliant on the `:` being typed. `5`<kbd>Enter</kbd> behaves exactly the same way. Since <kbd>Enter</kbd> alone moves down by one line, this is obviously being treated as a repeat-X-times command.\n. It can select inside the tag in some cases, but it doesn't behave the same way Vim does. As far as I can tell, using this sample tag:\n\n```\n<span class=\"foo\">Bar</span>\n```\n\nIf the cursor is over `B` or `a`, then `vit` selects `Bar` as you would expect.\n\nIf the cursor is over `r` (right-most character between the tag markup), then nothing is selected.\n\nIf the cursor is over the `>` at the end of the tag opener, then it wrongly selects `>Bar`.\n\nIf the cursor is anywhere else, nothing is selected.\n\nIn Vim, it seems anywhere you are positioned at all, `vit` will select `Bar` properly.\n. ",
    "masukomi": "@laughedelic  No. I meant exactly what I said. `y` followed by `2` followed by `enter` should yank 3 lines: the current line plus 2 more. I do NOT mean `y2y`, `2yy` or their `d` equivalents.\n. Personally i _hate_ vim's default behavior in this case. I had to go and figure out how to make it stop exiting visual mode every time I indented because it was driving me nuts. So, while I agree with folks about making vim's default behavior the default it'd be really, _really_ nice is you had the option to stay in visual mode after performing an operation in it.\n. I can't reproduce this functionality in Vim. When I select text, either via mouse in macvim or via visual mode `d` is what deletes the text (and puts it on a buffer). Not `dd`\n. Can't comment on the testing but the PR could be improved by rebasing all the commits into 1. Or maybe 2: one for the initial implementation, and one for implementing multiple file selections. \n. if \"Not by typing 'w'\", then how? What _are_ you doing that's causing a problem. I can jump to the next line without using w in multiple ways and all the ones I've tried work.\n. @laughedelic  No. I meant exactly what I said. `y` followed by `2` followed by `enter` should yank 3 lines: the current line plus 2 more. I do NOT mean `y2y`, `2yy` or their `d` equivalents.\n. Personally i _hate_ vim's default behavior in this case. I had to go and figure out how to make it stop exiting visual mode every time I indented because it was driving me nuts. So, while I agree with folks about making vim's default behavior the default it'd be really, _really_ nice is you had the option to stay in visual mode after performing an operation in it.\n. I can't reproduce this functionality in Vim. When I select text, either via mouse in macvim or via visual mode `d` is what deletes the text (and puts it on a buffer). Not `dd`\n. Can't comment on the testing but the PR could be improved by rebasing all the commits into 1. Or maybe 2: one for the initial implementation, and one for implementing multiple file selections. \n. if \"Not by typing 'w'\", then how? What _are_ you doing that's causing a problem. I can jump to the next line without using w in multiple ways and all the ones I've tried work.\n. ",
    "roman": "When I execute apm test, it still says it is skipping them, no clear reason why\n. Bummer! Good catch...\n\nVim documentation has a spec for the \\* operator, I guess it would be necessary to implement the `iskeyword` (maybe on a module of its own), and use that one instead of the atom core getCurrentWord function on cursor.\n\nIs it valid to extend the Cursor API (monkey-patch) from the vim-mode package? Don't know if that is frowned upon or not. \n\nI guess what we have so far is a good start. I'll see if I can add this spec to the test and implement it:\n\n```\n*           Search forward for the [count]'th occurrence of the\n            word nearest to the cursor.  The word used for the\n            search is the first of:\n                1. the keyword under the cursor |'iskeyword'|\n                2. the first keyword after the cursor, in the\n                   current line\n                3. the non-blank word under the cursor\n                4. the first non-blank word after the cursor,\n                   in the current line\n            Only whole keywords are searched for, like with the\n            command \"/\\<keyword\\>\".  |exclusive|  {not in Vi}\n            'ignorecase' is used, 'smartcase' is not.\n```\n. @bhuga I created two separate PR  that replace this one, closing it.\n. Done\n. Ups... missed some changes there, now it should work.\n. When I execute apm test, it still says it is skipping them, no clear reason why\n. Bummer! Good catch...\n\nVim documentation has a spec for the \\* operator, I guess it would be necessary to implement the `iskeyword` (maybe on a module of its own), and use that one instead of the atom core getCurrentWord function on cursor.\n\nIs it valid to extend the Cursor API (monkey-patch) from the vim-mode package? Don't know if that is frowned upon or not. \n\nI guess what we have so far is a good start. I'll see if I can add this spec to the test and implement it:\n\n```\n*           Search forward for the [count]'th occurrence of the\n            word nearest to the cursor.  The word used for the\n            search is the first of:\n                1. the keyword under the cursor |'iskeyword'|\n                2. the first keyword after the cursor, in the\n                   current line\n                3. the non-blank word under the cursor\n                4. the first non-blank word after the cursor,\n                   in the current line\n            Only whole keywords are searched for, like with the\n            command \"/\\<keyword\\>\".  |exclusive|  {not in Vi}\n            'ignorecase' is used, 'smartcase' is not.\n```\n. @bhuga I created two separate PR  that replace this one, closing it.\n. Done\n. Ups... missed some changes there, now it should work.\n. ",
    "guywald1": "Any news on this?. Apologies, a new user to this Package and the problem was on my end. Thanks for the quick reply, amazing work regardless.. Any news on this?. Apologies, a new user to this Package and the problem was on my end. Thanks for the quick reply, amazing work regardless.. ",
    "willcosgrove": "This topic is being covered over in #58 and #152 \n\nUpdate:  It looks like the most recent work is being done in #183 \n. This topic is being covered over in #58 and #152 \n\nUpdate:  It looks like the most recent work is being done in #183 \n. ",
    "jasonmerino": "Thanks guys! Sorry, I didn't see those in my issue searching.\n. Thanks guys! Sorry, I didn't see those in my issue searching.\n. ",
    "elec3647": "I'm having the same issue! I use the Monokai theme and I can't see the cursor at all! Help!\n. I'm having the same issue! I use the Monokai theme and I can't see the cursor at all! Help!\n. ",
    "jesseleite": "+1  ...Can't see a thing with Monokai.  Makes the package totally useless in it's current state for me :(\n. I think some of these kinds of things could be integrated as package settings (I see some packages have a settings option)... so for Vim Mode, maybe some sort of colour & opacity setting for cursor.  Of course, we always have the option of overriding styles via stylesheet.  However, a package setting would make it more accessible.  I also think that it is more necessary since the cursor colour conflicts with common themes like monokai.  So hard to find that cursor!\n. It should be as easy as:\n\n``` cson\n'atom-text-editor.vim-mode':\n  'j k': 'vim-mode:reset-command-mode'\n```\n\nUnfortunately, it's not.  Small things like this keep me using Sublime.  I'm excited about Atom's future though.\n. Not sure.  Some people like the simultaneous \"j+k\", other people like the slightly offset \"j\" then \"k\" in quick succession.  Either way, I'm not sure either is as well fleshed out as in other Vim emulators (Vintageous for Sublime Text, etc).\n. Nice!  Thank you @maxbrunsfeld ...This is so much better!\n\nIt's still slightly awkward because it causes the `j` key to hang for a second while it waits for a second input.  In Sublime, the first `j` is immediately printed to the buffer, then if a second input matches `j` within a second or two, the `j` is removed from the buffer and the command is executed.  Not sure if this is possible in Atom, but it'd make arpeggio keymappings feel much more natural in my opinion.  Is this possible in Atom?\n. As a followup, I'm going to use @rdlugosz's method, as it seems to feel much better.  I know it's harder to edit the key mapping, but it gets rid of that annoying delay.\n\nToo bad Atom doesn't handle multi key mappings this way, where a `'j k'` keymap holds off on execution until it reads the second key (the `k` in this case), then checks the preceeding key for a match (a `j` in this case).  This would stop the Atom from hanging when the first key is hit.\n. @pelachile, I'm using @rdlugosz solution, but set it up for `j k`.  I'm also in Atom 1.0.9 and it works fine here.\n\nKeymap:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n    'k': 'exit-insert-mode-if-preceded-by-j'\n```\n\nInit Script:\n\n``` coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-preceded-by-j': (e) ->\n    editor = @getModel()\n    pos = editor.getCursorBufferPosition()\n    range = [pos.traverse([0,-1]), pos]\n    console.log(range)\n    lastChar = editor.getTextInBufferRange(range)\n    if lastChar != \"j\"\n        e.abortKeyBinding()\n    else\n        editor.backspace()\n        atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-normal-mode')\n```\n\nIf those still don't work for you, maybe another script or something is interfering?\n. @chrisUsick It's working for me in 1.0.11 on OSX, exactly as pasted above.\n. Weird.  A backspace, but not switching back to normal model?  I can't replicate this.\n. @Robert-Wett Weird. I'm also Atom 1.1.0 for OSX, and `jk` works fine using the method described in my above comment from Aug 29th.\n. @ipstone: Great idea.  I'll look into packaging it up.  It's one of those things where I just pasted to init script and forgot about it.  Would be even easier for new users if there was package to implement the script though.\n. I won't have time to mess with this for a few weeks anyway.  If anyone else if up for packaging it out, by all means!  If not, it's on my list.\n\n@rdlugosz I agree about naming.  Hadn't thought that far.  I just like the idea of extracting this to a package instead of vim users having to stumble across threads like this for init script.\n\nNever know, maybe core vim-mode maintainers would be interested in adding this as option?  Maybe it's too specialized of a feature, idk.\n. @kylesezhi and @Yohanna that keymap always worked.  The issue is with the delay when typing anything like \"jam\" or \"jesse\".  There's a bad delay after hitting that `j` key while the keymap listener is waiting for a possible `k` to follow.\n\nOther vim emulators do their check after hitting the second `k` input.  The emulator then checks the previous key to see if it was a `j`, and if so enters vim mode.  This allows the vim emulator to handle the same `j k` key mapping without that delay.\n. Until then, you can add @rdlugosz's [solution above](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175) to your init script and keymap :)\n. @azoerb Check the settings view for vim-mode package, and disable this checkbox: \n\n<img width=\"306\" alt=\"screen shot 2016-03-17 at 11 02 31 pm\" src=\"https://cloud.githubusercontent.com/assets/5187394/13867339/69c1e234-ec94-11e5-9000-c2042d5a4308.png\">\n. Not sure, I think the option has always been there.  They did recently changed default behaviour though.\n. +1  ...Can't see a thing with Monokai.  Makes the package totally useless in it's current state for me :(\n. I think some of these kinds of things could be integrated as package settings (I see some packages have a settings option)... so for Vim Mode, maybe some sort of colour & opacity setting for cursor.  Of course, we always have the option of overriding styles via stylesheet.  However, a package setting would make it more accessible.  I also think that it is more necessary since the cursor colour conflicts with common themes like monokai.  So hard to find that cursor!\n. It should be as easy as:\n\n``` cson\n'atom-text-editor.vim-mode':\n  'j k': 'vim-mode:reset-command-mode'\n```\n\nUnfortunately, it's not.  Small things like this keep me using Sublime.  I'm excited about Atom's future though.\n. Not sure.  Some people like the simultaneous \"j+k\", other people like the slightly offset \"j\" then \"k\" in quick succession.  Either way, I'm not sure either is as well fleshed out as in other Vim emulators (Vintageous for Sublime Text, etc).\n. Nice!  Thank you @maxbrunsfeld ...This is so much better!\n\nIt's still slightly awkward because it causes the `j` key to hang for a second while it waits for a second input.  In Sublime, the first `j` is immediately printed to the buffer, then if a second input matches `j` within a second or two, the `j` is removed from the buffer and the command is executed.  Not sure if this is possible in Atom, but it'd make arpeggio keymappings feel much more natural in my opinion.  Is this possible in Atom?\n. As a followup, I'm going to use @rdlugosz's method, as it seems to feel much better.  I know it's harder to edit the key mapping, but it gets rid of that annoying delay.\n\nToo bad Atom doesn't handle multi key mappings this way, where a `'j k'` keymap holds off on execution until it reads the second key (the `k` in this case), then checks the preceeding key for a match (a `j` in this case).  This would stop the Atom from hanging when the first key is hit.\n. @pelachile, I'm using @rdlugosz solution, but set it up for `j k`.  I'm also in Atom 1.0.9 and it works fine here.\n\nKeymap:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n    'k': 'exit-insert-mode-if-preceded-by-j'\n```\n\nInit Script:\n\n``` coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-preceded-by-j': (e) ->\n    editor = @getModel()\n    pos = editor.getCursorBufferPosition()\n    range = [pos.traverse([0,-1]), pos]\n    console.log(range)\n    lastChar = editor.getTextInBufferRange(range)\n    if lastChar != \"j\"\n        e.abortKeyBinding()\n    else\n        editor.backspace()\n        atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-normal-mode')\n```\n\nIf those still don't work for you, maybe another script or something is interfering?\n. @chrisUsick It's working for me in 1.0.11 on OSX, exactly as pasted above.\n. Weird.  A backspace, but not switching back to normal model?  I can't replicate this.\n. @Robert-Wett Weird. I'm also Atom 1.1.0 for OSX, and `jk` works fine using the method described in my above comment from Aug 29th.\n. @ipstone: Great idea.  I'll look into packaging it up.  It's one of those things where I just pasted to init script and forgot about it.  Would be even easier for new users if there was package to implement the script though.\n. I won't have time to mess with this for a few weeks anyway.  If anyone else if up for packaging it out, by all means!  If not, it's on my list.\n\n@rdlugosz I agree about naming.  Hadn't thought that far.  I just like the idea of extracting this to a package instead of vim users having to stumble across threads like this for init script.\n\nNever know, maybe core vim-mode maintainers would be interested in adding this as option?  Maybe it's too specialized of a feature, idk.\n. @kylesezhi and @Yohanna that keymap always worked.  The issue is with the delay when typing anything like \"jam\" or \"jesse\".  There's a bad delay after hitting that `j` key while the keymap listener is waiting for a possible `k` to follow.\n\nOther vim emulators do their check after hitting the second `k` input.  The emulator then checks the previous key to see if it was a `j`, and if so enters vim mode.  This allows the vim emulator to handle the same `j k` key mapping without that delay.\n. Until then, you can add @rdlugosz's [solution above](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175) to your init script and keymap :)\n. @azoerb Check the settings view for vim-mode package, and disable this checkbox: \n\n<img width=\"306\" alt=\"screen shot 2016-03-17 at 11 02 31 pm\" src=\"https://cloud.githubusercontent.com/assets/5187394/13867339/69c1e234-ec94-11e5-9000-c2042d5a4308.png\">\n. Not sure, I think the option has always been there.  They did recently changed default behaviour though.\n. ",
    "cadwallion": "Here's the styling I've been able to put into my `~/.atom/styles.less`:\n\n``` css\n\n.vim-mode.command-mode .cursor {\n  background-color: #F00;\n  width: 7px !important;\n  visibility: visible;\n}\n\n.vim-mode.command-mode .cursor.blink-off {\n  visibility: hidden;\n  width: 7px !important;\n}\n```\n\nReplace the `#F00` with whatever your desired cursor color is.  The width setting is because it is being resized to width: 0 when not on a character, so I've hardcoded it at 7px.  I'm sure this will break if I change resolution or something, so I'll continue to look for something more permanent for a PR.\n. If you're preferring a traditional, non-blinking cursor in command-mode a la vim, this will do the trick:\n\n``` css\n.vim-mode.command-mode {\n  .cursor, .cursor.blink-off {\n    background-color: #F00;\n    width: 7px !important;\n    visibility: visible;\n  }\n}\n```\n\n![cursor-mode](https://cloud.githubusercontent.com/assets/28146/2963713/348c343a-dade-11e3-9f03-7d22a41993b2.gif)\n. Also a quick update.  Some themes were clashing when not specifying a `.editor.is-focused` style for cursor, so I refactored my snippet to:\n\n``` css\n.block-cursor {\n  background-color: #F00;\n  width: 7px !important;\n  visibility: visible;\n}\n\n.vim-mode.command-mode {\n  .cursor, .cursor.blink-off {\n    .block-cursor;\n  }\n\n  &.editor.is-focused {\n    .cursor, .cursor.blink-off {\n      .block-cursor;\n    }\n  }\n}\n```\n\nMonokai didn't need it, but testing with Twilight, Railscasts, etc resulted in it being needed.  It doesn't hurt to have it anyway.\n. Is there any chance of an ETA to update this, @udp ?  I'm itching for this functionality and resisting the urge to update this branch locally because it's so close to finished.\n. The Fixes keyword seems to have not automatically closed this issue, but PR #237 resolves this.\n. Removed extraneous newline.\n\nI am perfectly content making that a separate pull request.  I'll start in on it today.\n. Internally, this PR triggers events specifically on the .vim-mode namespace.  If package A bound to `move-up` on the editorView, and then triggered it, it would trigger the callback `move-up` from package A and `move-up.vim-mode` from vim-mode.  Triggering 'move-up.vim-mode' would only trigger the one from vim-mode.\n. @mcolyer The `.vim-mode` jQuery namespace was added in #237 earlier this week in order to facilitate unbinding all the vim-mode event handlers in `deactivate`.  Since it was backwards compatible with existing bindings and doesn't need to be explicitly called, there wasn't much of a fuss about it.\n\nIf it's standard convention across atom to stick with the prefixing, then the redundancy of having the jQuery namespace as well isn't a big deal and keeping `vim-mode:move-to-mark` makes more sense than changing the prefix.  No sense in breaking everyone's custom keybindings just for a name change, and  `@registerCommands` is handling 95% of the bindings that hit the namespace currently anyway.\n. Yes, `registerCommand` could be modified to store a reference to every callback bound, but it results in considerably more overhead than using the jQuery namespace that was introduced in #237.  Since it is backwards compatible with existing 'vim-mode:' prefixed calls via `registerCommand` and custom keybindings, I don't know what we would really gain by reverting #237 and adding in that overhead code when a jQuery namespace has already resolved it, other than Atom doesn't do it.  Choosing to close this PR makes sense, though.\n. No problem, looking forward to helping make the plugin even more useful.\n. I started looking into fixing linewise selection yesterday, I'm hoping to have a PR up within the next 24 hours.\n. This improves my work from #272 pretty significantly, in large part because I had no idea that linewise visual selection was a thing. :)\n. As for issue #2, I think `G` should be its own `MoveToEndOfFile` to handle the edge-cases that differentiate from `MoveToLine`.  Whether this is part of this PR or another PR is another conversation, but much like `MoveToStartOfFile`, `G` motion has edge-cases separate from `MoveToLine` that really make the case for its own method.\n. Here's the styling I've been able to put into my `~/.atom/styles.less`:\n\n``` css\n\n.vim-mode.command-mode .cursor {\n  background-color: #F00;\n  width: 7px !important;\n  visibility: visible;\n}\n\n.vim-mode.command-mode .cursor.blink-off {\n  visibility: hidden;\n  width: 7px !important;\n}\n```\n\nReplace the `#F00` with whatever your desired cursor color is.  The width setting is because it is being resized to width: 0 when not on a character, so I've hardcoded it at 7px.  I'm sure this will break if I change resolution or something, so I'll continue to look for something more permanent for a PR.\n. If you're preferring a traditional, non-blinking cursor in command-mode a la vim, this will do the trick:\n\n``` css\n.vim-mode.command-mode {\n  .cursor, .cursor.blink-off {\n    background-color: #F00;\n    width: 7px !important;\n    visibility: visible;\n  }\n}\n```\n\n![cursor-mode](https://cloud.githubusercontent.com/assets/28146/2963713/348c343a-dade-11e3-9f03-7d22a41993b2.gif)\n. Also a quick update.  Some themes were clashing when not specifying a `.editor.is-focused` style for cursor, so I refactored my snippet to:\n\n``` css\n.block-cursor {\n  background-color: #F00;\n  width: 7px !important;\n  visibility: visible;\n}\n\n.vim-mode.command-mode {\n  .cursor, .cursor.blink-off {\n    .block-cursor;\n  }\n\n  &.editor.is-focused {\n    .cursor, .cursor.blink-off {\n      .block-cursor;\n    }\n  }\n}\n```\n\nMonokai didn't need it, but testing with Twilight, Railscasts, etc resulted in it being needed.  It doesn't hurt to have it anyway.\n. Is there any chance of an ETA to update this, @udp ?  I'm itching for this functionality and resisting the urge to update this branch locally because it's so close to finished.\n. The Fixes keyword seems to have not automatically closed this issue, but PR #237 resolves this.\n. Removed extraneous newline.\n\nI am perfectly content making that a separate pull request.  I'll start in on it today.\n. Internally, this PR triggers events specifically on the .vim-mode namespace.  If package A bound to `move-up` on the editorView, and then triggered it, it would trigger the callback `move-up` from package A and `move-up.vim-mode` from vim-mode.  Triggering 'move-up.vim-mode' would only trigger the one from vim-mode.\n. @mcolyer The `.vim-mode` jQuery namespace was added in #237 earlier this week in order to facilitate unbinding all the vim-mode event handlers in `deactivate`.  Since it was backwards compatible with existing bindings and doesn't need to be explicitly called, there wasn't much of a fuss about it.\n\nIf it's standard convention across atom to stick with the prefixing, then the redundancy of having the jQuery namespace as well isn't a big deal and keeping `vim-mode:move-to-mark` makes more sense than changing the prefix.  No sense in breaking everyone's custom keybindings just for a name change, and  `@registerCommands` is handling 95% of the bindings that hit the namespace currently anyway.\n. Yes, `registerCommand` could be modified to store a reference to every callback bound, but it results in considerably more overhead than using the jQuery namespace that was introduced in #237.  Since it is backwards compatible with existing 'vim-mode:' prefixed calls via `registerCommand` and custom keybindings, I don't know what we would really gain by reverting #237 and adding in that overhead code when a jQuery namespace has already resolved it, other than Atom doesn't do it.  Choosing to close this PR makes sense, though.\n. No problem, looking forward to helping make the plugin even more useful.\n. I started looking into fixing linewise selection yesterday, I'm hoping to have a PR up within the next 24 hours.\n. This improves my work from #272 pretty significantly, in large part because I had no idea that linewise visual selection was a thing. :)\n. As for issue #2, I think `G` should be its own `MoveToEndOfFile` to handle the edge-cases that differentiate from `MoveToLine`.  Whether this is part of this PR or another PR is another conversation, but much like `MoveToStartOfFile`, `G` motion has edge-cases separate from `MoveToLine` that really make the case for its own method.\n. ",
    "noscripter": "thanks, @cadwallion , your patch in ~/.atom/style.less works\n\n``` css\n//fix cursor display problem\n.vim-mode.command-mode {\n  .cursor, .cursor.blink-off {\n    background-color: #F00;\n    width: 7px !important;\n    visibility: visible;\n  }\n}\n```\n. thanks, @cadwallion , your patch in ~/.atom/style.less works\n\n``` css\n//fix cursor display problem\n.vim-mode.command-mode {\n  .cursor, .cursor.blink-off {\n    background-color: #F00;\n    width: 7px !important;\n    visibility: visible;\n  }\n}\n```\n. ",
    "klorenz": "Hi all, the width of a fixed px size does not scale well so I rather use a withd of 0.63em.  I also prefer colors from color-scheme and finally there is a different cursor for visual mode.  Applying all these:\n\n``` css\n@import \"ui-variables\";\n\n.block-cursor() {\n  background-color: @base-background-color;\n  width: 0.63em !important;\n  visibility: visible;\n}\n\n\n.block-cursor-visible() {\n    & .cursor {\n      .block-cursor();\n    }\n    & .cursor.blink-off {\n      .block-cursor();\n    }\n}\n\n.block-cursor-hidden() {\n    & .cursor.hidden-cursor {\n      .block-cursor();\n      display: block;\n    }\n    & .cursor.hidden-cursor.blink-off {\n      .block-cursor();\n      display: block;\n    }\n}\n\n\n.vim-mode.command-mode {\n\n  .block-cursor-visible();\n  .block-cursor-hidden();\n\n  &.editor.is-focused {\n    .block-cursor-visible();\n    .block-cursor-hidden();\n  }\n}\n\n.vim-mode.visual-mode {\n\n  .block-cursor-visible();\n  .block-cursor-hidden();\n\n  &.editor.is-focused {\n    .block-cursor-visible();\n    .block-cursor-hidden();\n  }\n}\n\n```\n. I am not sure, I did not try.  I was just annoyed from that exception, which again and again popped up the console.  It is about the try of cancelling a pending operation, although there is none.  I can try to set up a test case for this.  It may take some days ... \n. Hi, I digged a bit deeper into this.  The cancel() method is called if core:cancel is raised.  This core:cancel command is raised from e.g. simple-select-list-view.coffee  There must be the reason for this issue.\n. Hi all, the width of a fixed px size does not scale well so I rather use a withd of 0.63em.  I also prefer colors from color-scheme and finally there is a different cursor for visual mode.  Applying all these:\n\n``` css\n@import \"ui-variables\";\n\n.block-cursor() {\n  background-color: @base-background-color;\n  width: 0.63em !important;\n  visibility: visible;\n}\n\n\n.block-cursor-visible() {\n    & .cursor {\n      .block-cursor();\n    }\n    & .cursor.blink-off {\n      .block-cursor();\n    }\n}\n\n.block-cursor-hidden() {\n    & .cursor.hidden-cursor {\n      .block-cursor();\n      display: block;\n    }\n    & .cursor.hidden-cursor.blink-off {\n      .block-cursor();\n      display: block;\n    }\n}\n\n\n.vim-mode.command-mode {\n\n  .block-cursor-visible();\n  .block-cursor-hidden();\n\n  &.editor.is-focused {\n    .block-cursor-visible();\n    .block-cursor-hidden();\n  }\n}\n\n.vim-mode.visual-mode {\n\n  .block-cursor-visible();\n  .block-cursor-hidden();\n\n  &.editor.is-focused {\n    .block-cursor-visible();\n    .block-cursor-hidden();\n  }\n}\n\n```\n. I am not sure, I did not try.  I was just annoyed from that exception, which again and again popped up the console.  It is about the try of cancelling a pending operation, although there is none.  I can try to set up a test case for this.  It may take some days ... \n. Hi, I digged a bit deeper into this.  The cancel() method is called if core:cancel is raised.  This core:cancel command is raised from e.g. simple-select-list-view.coffee  There must be the reason for this issue.\n. ",
    "mike-engel": "Anyone find that their cursor CSS fixed stopped working after atom switched to the shadow-dom? Anyone have a fix yet? I've tried the following to no avail:\n\n```\n.block-cursor {\n    background-color: rgba(0, 184, 255, 0.75);\n    width: 7px !important;\n    visibility: visible;\n}\n\natom-text-editor,\natom-text-editor::shadow {\n    background: #2B303B;\n\n    &.vim-mode {\n        .cursor,\n        .blink-off .cursor {\n            .block-cursor;\n        }\n    }\n}\n```\n. Thanks @pk-nb, worked for me.\n. Anyone find that their cursor CSS fixed stopped working after atom switched to the shadow-dom? Anyone have a fix yet? I've tried the following to no avail:\n\n```\n.block-cursor {\n    background-color: rgba(0, 184, 255, 0.75);\n    width: 7px !important;\n    visibility: visible;\n}\n\natom-text-editor,\natom-text-editor::shadow {\n    background: #2B303B;\n\n    &.vim-mode {\n        .cursor,\n        .blink-off .cursor {\n            .block-cursor;\n        }\n    }\n}\n```\n. Thanks @pk-nb, worked for me.\n. ",
    "pk-nb": "Fix for the shadow-dom changes @mike-engel. Looks like you'll need `.is-focused`.\n\nFollowing snippet (slightly modified from one in package) works for me.\n\n```\natom-text-editor.vim-mode.command-mode.is-focused,\natom-text-editor.vim-mode.operator-pending-mode.is-focused,\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      background-color: #fff;\n      opacity: 0.3;\n      visibility: visible;\n    }\n  }\n}\n\n```\n. Thank you @sgtpepper43! Works great.\n. Great to hear. Thanks\n. Fix for the shadow-dom changes @mike-engel. Looks like you'll need `.is-focused`.\n\nFollowing snippet (slightly modified from one in package) works for me.\n\n```\natom-text-editor.vim-mode.command-mode.is-focused,\natom-text-editor.vim-mode.operator-pending-mode.is-focused,\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    .cursor, .cursor.blink-off {\n      background-color: #fff;\n      opacity: 0.3;\n      visibility: visible;\n    }\n  }\n}\n\n```\n. Thank you @sgtpepper43! Works great.\n. Great to hear. Thanks\n. ",
    "rafa2000": "It worked for me too. Thanks @pk-nb.\n\nHere is my full `styles.less`. It includes additional styling for a red cursor and a red bracket matcher (which looks great using the `Lucario` syntax theme), and a more pleasant `tree-view` spacing. I included it here, because it took me some time to clean it up. I hope it saves someone a little time.\n\n``` less\n/*\n * Your Stylesheet\n *\n * This stylesheet is loaded when Atom starts up and is reloaded automatically\n * when it is changed.\n *\n * If you are unfamiliar with LESS, you can read more about it here:\n * http://www.lesscss.org\n */\n\n@import \"ui-variables\";\n\n/*\n pk-nb\n Jan 23, 2015\n same url\n\n rafa2000\n Feb 28, 2015\n mashed up with:\n   + Red Cursor in Vim mode\n   + Red Bracket Matcher\n   + Styled Tree-View\n*/\natom-text-editor.vim-mode.command-mode.is-focused,\natom-text-editor.vim-mode.operator-pending-mode.is-focused,\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    /* cursor color */\n    .cursor, .cursor.blink-off {\n      background-color: #f00;\n      opacity: 0.3;\n      visibility: visible;\n    }\n    /* special characters */\n    .invisible-character {\n      opacity: 0.2;\n    }\n    /* indent guide */\n    .indent-guide {\n      opacity: 1.0;\n    }\n    /* bracket matcher */\n    .bracket-matcher {\n      // border-bottom: 1px solid green;\n      background-color: red !important;\n      opacity: 0.6 !important;\n      width: 0.63em !important;\n    }\n  }\n}\n\n/* A more compact tree view */\n.tree-view {\n  font-size: 10px;\n  .list-item {\n    line-height: 18px !important;\n  }\n  .selected:before, .selected:before {\n    height: 16px !important;\n  }\n  .icon:before {\n    font-size: 9px;\n    width: 8px;\n    height: 9px;\n    opacity: 0.6;\n    position: relative;\n    top: 0px;\n    margin-right: 5px !important;\n  }\n  .header:before {\n    font-size: 9px !important;\n    opacity: 0.6;\n  }\n}\n```\n. It worked for me too. Thanks @pk-nb.\n\nHere is my full `styles.less`. It includes additional styling for a red cursor and a red bracket matcher (which looks great using the `Lucario` syntax theme), and a more pleasant `tree-view` spacing. I included it here, because it took me some time to clean it up. I hope it saves someone a little time.\n\n``` less\n/*\n * Your Stylesheet\n *\n * This stylesheet is loaded when Atom starts up and is reloaded automatically\n * when it is changed.\n *\n * If you are unfamiliar with LESS, you can read more about it here:\n * http://www.lesscss.org\n */\n\n@import \"ui-variables\";\n\n/*\n pk-nb\n Jan 23, 2015\n same url\n\n rafa2000\n Feb 28, 2015\n mashed up with:\n   + Red Cursor in Vim mode\n   + Red Bracket Matcher\n   + Styled Tree-View\n*/\natom-text-editor.vim-mode.command-mode.is-focused,\natom-text-editor.vim-mode.operator-pending-mode.is-focused,\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    /* cursor color */\n    .cursor, .cursor.blink-off {\n      background-color: #f00;\n      opacity: 0.3;\n      visibility: visible;\n    }\n    /* special characters */\n    .invisible-character {\n      opacity: 0.2;\n    }\n    /* indent guide */\n    .indent-guide {\n      opacity: 1.0;\n    }\n    /* bracket matcher */\n    .bracket-matcher {\n      // border-bottom: 1px solid green;\n      background-color: red !important;\n      opacity: 0.6 !important;\n      width: 0.63em !important;\n    }\n  }\n}\n\n/* A more compact tree view */\n.tree-view {\n  font-size: 10px;\n  .list-item {\n    line-height: 18px !important;\n  }\n  .selected:before, .selected:before {\n    height: 16px !important;\n  }\n  .icon:before {\n    font-size: 9px;\n    width: 8px;\n    height: 9px;\n    opacity: 0.6;\n    position: relative;\n    top: 0px;\n    margin-right: 5px !important;\n  }\n  .header:before {\n    font-size: 9px !important;\n    opacity: 0.6;\n  }\n}\n```\n. ",
    "blacksky86": "Hello, I have been able to change to the block cursor color to one that I like. But I am unable to get the cursor to blink, anyone know why? Isn't the visibility: visible; suppose to do that?\n\n![vim-cursor](https://cloud.githubusercontent.com/assets/3500392/7187437/4982d2c6-e425-11e4-88b2-8afa7041a85f.gif)\n\n``` less\n@import \"ui-variables\";\n\n.tree-view {\n\n}\n\n.editor {\n\n}\n\n.editor .cursor {\n\n}\n\natom-text-editor.vim-mode.command-mode.is-focused,\natom-text-editor.vim-mode.operator-pending-mode.is-focused,\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    /* cursor color */\n    .cursor, .cursor.blink-off {\n      background-color: rgba(59,117,140,1);\n      visibility: visible !important;\n    }\n    /* bracket matcher */\n    .bracket-matcher {\n      background-color: rgb(59,117,140) !important;\n      opacity: 0.6 !important;\n      width: 0.63em !important;\n    }\n  }\n}\n```\n. @jacekkopecky , nah that doesn't seem to solve it, I tried to do it with different combinations. \n. @sgtpepper43, Awesome, that works. Thanks a lot!!! :smile: \n. This is something that is used very often and one that really bugs me lol. I sometimes don't know if I am doing the correct word or not. But at least it does work :) . :+1: \n. I know the regular 'r' works for me, but I don't find myself using 'R' as much. But yes,  I would like this feature to be added as well. :+1: \n. Hello, I have been able to change to the block cursor color to one that I like. But I am unable to get the cursor to blink, anyone know why? Isn't the visibility: visible; suppose to do that?\n\n![vim-cursor](https://cloud.githubusercontent.com/assets/3500392/7187437/4982d2c6-e425-11e4-88b2-8afa7041a85f.gif)\n\n``` less\n@import \"ui-variables\";\n\n.tree-view {\n\n}\n\n.editor {\n\n}\n\n.editor .cursor {\n\n}\n\natom-text-editor.vim-mode.command-mode.is-focused,\natom-text-editor.vim-mode.operator-pending-mode.is-focused,\natom-text-editor.vim-mode.visual-mode.is-focused\n{\n  &::shadow, // shadow-DOM enabled\n  &          // shadow-DOM disabled\n  {\n    /* cursor color */\n    .cursor, .cursor.blink-off {\n      background-color: rgba(59,117,140,1);\n      visibility: visible !important;\n    }\n    /* bracket matcher */\n    .bracket-matcher {\n      background-color: rgb(59,117,140) !important;\n      opacity: 0.6 !important;\n      width: 0.63em !important;\n    }\n  }\n}\n```\n. @jacekkopecky , nah that doesn't seem to solve it, I tried to do it with different combinations. \n. @sgtpepper43, Awesome, that works. Thanks a lot!!! :smile: \n. This is something that is used very often and one that really bugs me lol. I sometimes don't know if I am doing the correct word or not. But at least it does work :) . :+1: \n. I know the regular 'r' works for me, but I don't find myself using 'R' as much. But yes,  I would like this feature to be added as well. :+1: \n. ",
    "sgtpepper43": "`.blink-off` is applied to the parent of `.cursor`. So put `visibility: hidden` in `.blink-off .cursor` instead.\n. An update apparently broke the currently posted css, so in case anyone else stumbles in here looking for that, you have to include `.is-focused` now\n\n``` less\natom-text-editor.vim-mode.normal-mode,\natom-text-editor.vim-mode.operator-pending-mode,\natom-text-editor.vim-mode.visual-mode\n{\n  &, // only keep this if you want to see the cursor on non-focused tabs\n  &.is-focused {\n    &::shadow, // shadow-DOM enabled\n    &          // shadow-DOM disabled\n    {\n      /* cursor color */\n      .cursor {\n        // cursor styles\n      }\n      .blink-off .cursor {\n        // cursor style while blinking (if you so desire)\n      }\n    }\n  }\n}\n```\n\nEdit:\nThough now that I look back up at the other posts I realize it was just me that took off `.is-focused` on my own css. Oh well.\n. Oh my goodness can we just merge this already, `Ctrl+C` should never have been command mode anyways, `Ctrl+C` _closes_ vim... or at least it attempts to, and vim prompts you to close it the right way.\n. I assume I had to make a new pull request, which is #339. I added a method to the helper that does what @nathansobo suggested that will wrap the editorView with a div with a platform class (or any class, really). The build is passing, so it should be good to go, unless I did some of that in a bad way or something.\n. Good call, I put all the case sensitive tests into one describe with a before each now, so it should be good to go.\n. `.blink-off` is applied to the parent of `.cursor`. So put `visibility: hidden` in `.blink-off .cursor` instead.\n. An update apparently broke the currently posted css, so in case anyone else stumbles in here looking for that, you have to include `.is-focused` now\n\n``` less\natom-text-editor.vim-mode.normal-mode,\natom-text-editor.vim-mode.operator-pending-mode,\natom-text-editor.vim-mode.visual-mode\n{\n  &, // only keep this if you want to see the cursor on non-focused tabs\n  &.is-focused {\n    &::shadow, // shadow-DOM enabled\n    &          // shadow-DOM disabled\n    {\n      /* cursor color */\n      .cursor {\n        // cursor styles\n      }\n      .blink-off .cursor {\n        // cursor style while blinking (if you so desire)\n      }\n    }\n  }\n}\n```\n\nEdit:\nThough now that I look back up at the other posts I realize it was just me that took off `.is-focused` on my own css. Oh well.\n. Oh my goodness can we just merge this already, `Ctrl+C` should never have been command mode anyways, `Ctrl+C` _closes_ vim... or at least it attempts to, and vim prompts you to close it the right way.\n. I assume I had to make a new pull request, which is #339. I added a method to the helper that does what @nathansobo suggested that will wrap the editorView with a div with a platform class (or any class, really). The build is passing, so it should be good to go, unless I did some of that in a bad way or something.\n. Good call, I put all the case sensitive tests into one describe with a before each now, so it should be good to go.\n. ",
    "crucialfelix": "Here's a bit of status bar:\n\n``` less\n.status-bar-vim-mode-normal,\n.status-bar-vim-mode-insert,\n.status-bar-vim-mode-visual {\n  font-weight: bold;\n  text-align: center;\n  font-size: 1.5em;\n  width: 18rem;\n  text-transform: uppercase;\n}\n\n@normal-bg: rgb(105, 238, 103);\n.status-bar-vim-mode-normal {\n  background: @normal-bg;\n  color: rgb(4, 111, 11);\n}\n\n.status-bar-vim-mode-insert {\n  background: rgb(7, 193, 242);\n  color: white;\n}\n\n.status-bar-vim-mode-visual {\n  background: rgb(255, 206, 98);\n  color: rgb(168, 117, 5);\n}\n```\n\nBest would be if vim-mode just sets a class on the workspace.\nThen we could write styles that change the whole status bar like powerline or just change the coloring of the active tab.\n\nI like the corner-of-my-eye effect of a strong color indicating what mode I'm in.\n\n![screen shot 2015-12-19 at 17 34 06](https://cloud.githubusercontent.com/assets/218738/11914103/d5b8e5c8-a676-11e5-943b-811a2de38d77.png)\n. Redo is working again with version 0.15.0\n\nI posted this yesterday about version 0.14.x\n\nI think its okay now, can you guys update and confirm ?\n\nthanks !\n. Redo is fixed now. \n\nIt is a bit strange that undo goes back to when you last entered insert mode, but it is understandable.  Its complex to maintain two undo systems. 'u' in vim mode does its own undo\n\nso I think the issue is closed now. if vim undo and atom undo should cooperate more, then I think that is a separate issue.\n\nclose ?\n. Yeah, it makes it kind of frightening. If I hit command-Z I say \"shit!\" and\nthen have to wait a few seconds while it processes, then I can redo.\n\nAlso it makes more cognitive load in that have to remember when you\nswitched modes.\n\nOn Tue, Sep 30, 2014 at 11:04 AM, Thomas Coopman notifications@github.com\nwrote:\n\n> It should at least be a separate issue, because this still makes undo\n> almost unusable in vim mode.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/405#issuecomment-57285786.\n. Undo and redo are again broken. Sorry, this makes it unusable. I just lost several minutes of work.\n. Simple reproducer:\r\n\r\n1. text is: `mv4` \r\n2. place cursor on the `4`\r\n3. Type `r` `5`  -- replace char with `5`\r\n4. The Error\r\n. Here's a bit of status bar:\n\n``` less\n.status-bar-vim-mode-normal,\n.status-bar-vim-mode-insert,\n.status-bar-vim-mode-visual {\n  font-weight: bold;\n  text-align: center;\n  font-size: 1.5em;\n  width: 18rem;\n  text-transform: uppercase;\n}\n\n@normal-bg: rgb(105, 238, 103);\n.status-bar-vim-mode-normal {\n  background: @normal-bg;\n  color: rgb(4, 111, 11);\n}\n\n.status-bar-vim-mode-insert {\n  background: rgb(7, 193, 242);\n  color: white;\n}\n\n.status-bar-vim-mode-visual {\n  background: rgb(255, 206, 98);\n  color: rgb(168, 117, 5);\n}\n```\n\nBest would be if vim-mode just sets a class on the workspace.\nThen we could write styles that change the whole status bar like powerline or just change the coloring of the active tab.\n\nI like the corner-of-my-eye effect of a strong color indicating what mode I'm in.\n\n![screen shot 2015-12-19 at 17 34 06](https://cloud.githubusercontent.com/assets/218738/11914103/d5b8e5c8-a676-11e5-943b-811a2de38d77.png)\n. Redo is working again with version 0.15.0\n\nI posted this yesterday about version 0.14.x\n\nI think its okay now, can you guys update and confirm ?\n\nthanks !\n. Redo is fixed now. \n\nIt is a bit strange that undo goes back to when you last entered insert mode, but it is understandable.  Its complex to maintain two undo systems. 'u' in vim mode does its own undo\n\nso I think the issue is closed now. if vim undo and atom undo should cooperate more, then I think that is a separate issue.\n\nclose ?\n. Yeah, it makes it kind of frightening. If I hit command-Z I say \"shit!\" and\nthen have to wait a few seconds while it processes, then I can redo.\n\nAlso it makes more cognitive load in that have to remember when you\nswitched modes.\n\nOn Tue, Sep 30, 2014 at 11:04 AM, Thomas Coopman notifications@github.com\nwrote:\n\n> It should at least be a separate issue, because this still makes undo\n> almost unusable in vim mode.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/405#issuecomment-57285786.\n. Undo and redo are again broken. Sorry, this makes it unusable. I just lost several minutes of work.\n. Simple reproducer:\r\n\r\n1. text is: `mv4` \r\n2. place cursor on the `4`\r\n3. Type `r` `5`  -- replace char with `5`\r\n4. The Error\r\n. ",
    "ktraff": "For those looking to modify the cursor with vim-mode-plus, you can use this snippet in your ~/.atom/styles.less:\r\n\r\n```less\r\natom-text-editor.vim-mode-plus.normal-mode,\r\natom-text-editor.vim-mode-plus.visual-mode,\r\n{\r\n  &.is-focused {\r\n    .cursor {\r\n      background-color: #FFF !important;\r\n      visibility: visible;\r\n    }\r\n  }\r\n}\r\n```. For those looking to modify the cursor with vim-mode-plus, you can use this snippet in your ~/.atom/styles.less:\r\n\r\n```less\r\natom-text-editor.vim-mode-plus.normal-mode,\r\natom-text-editor.vim-mode-plus.visual-mode,\r\n{\r\n  &.is-focused {\r\n    .cursor {\r\n      background-color: #FFF !important;\r\n      visibility: visible;\r\n    }\r\n  }\r\n}\r\n```. ",
    "alexanderjeurissen": "This extension aims to combine the best aspects of vim and atom. whats the use of adding vim's modularity if you start in insertmode. In vim you don't start in Insert mode so why should the vim-mode extension for atom do so..\nthis shouldn't be implemented IMO.\n. > Command mode is useful initially for moving around the file, but in a GUI editor like Atom I think people (like me) would just scroll and use the mouse instead of using command mode since the mouse is usually faster. I can implement this as an option and leave it off by default.\n\nIm sorry but that doesn't make sense.. the power of VIM's modularity and not having to use the mouse to navigate through the file because of better alternatives like the default motion keys `j k h l ( )  { } / f  t  * # %` is one of it's strong sides this applies to both GUI vim as terminal VIM.\nIf your using the mouse and want to be in insert mode most of the time inside VIM then your partially missing the point of the core concepts behind VIM.\n\nNot saying you are but using mouse and arrow keys in VIM is mostly done by newbies who aren't familiar with all VIM has to offer. And as you already mentioned this plugin will mostly be used by VIM \"veterans\" therefore IMO we shouldn't  reduce its power just to be more 'newbie friendly'\n\nat MOST this should be an option that is off by default\n. This extension aims to combine the best aspects of vim and atom. whats the use of adding vim's modularity if you start in insertmode. In vim you don't start in Insert mode so why should the vim-mode extension for atom do so..\nthis shouldn't be implemented IMO.\n. > Command mode is useful initially for moving around the file, but in a GUI editor like Atom I think people (like me) would just scroll and use the mouse instead of using command mode since the mouse is usually faster. I can implement this as an option and leave it off by default.\n\nIm sorry but that doesn't make sense.. the power of VIM's modularity and not having to use the mouse to navigate through the file because of better alternatives like the default motion keys `j k h l ( )  { } / f  t  * # %` is one of it's strong sides this applies to both GUI vim as terminal VIM.\nIf your using the mouse and want to be in insert mode most of the time inside VIM then your partially missing the point of the core concepts behind VIM.\n\nNot saying you are but using mouse and arrow keys in VIM is mostly done by newbies who aren't familiar with all VIM has to offer. And as you already mentioned this plugin will mostly be used by VIM \"veterans\" therefore IMO we shouldn't  reduce its power just to be more 'newbie friendly'\n\nat MOST this should be an option that is off by default\n. ",
    "viveksjain": "> whats the use of adding vim's modularity if you start in insertmode.\n\nYou would still have all the power of vim, just that if you want to switch to command mode you have to press `Esc` first. IMO even vim should start in insert mode by default, especially for new files since you usually just want to start typing. This is an aside, but there are so many people that get burned by vim when they start it, start typing, and then see that no text is being written and can't figure out why. So they say vim is hard to use and never try it again. That doesn't really apply here since I think most people using the vim-mode package in Atom will already be familiar with vim.\n\nCommand mode is useful initially for moving around the file, but in a GUI editor like Atom I think people (like me) would just scroll and use the mouse instead of using command mode since the mouse is usually faster. I can implement this as an option and leave it off by default.\n. > whats the use of adding vim's modularity if you start in insertmode.\n\nYou would still have all the power of vim, just that if you want to switch to command mode you have to press `Esc` first. IMO even vim should start in insert mode by default, especially for new files since you usually just want to start typing. This is an aside, but there are so many people that get burned by vim when they start it, start typing, and then see that no text is being written and can't figure out why. So they say vim is hard to use and never try it again. That doesn't really apply here since I think most people using the vim-mode package in Atom will already be familiar with vim.\n\nCommand mode is useful initially for moving around the file, but in a GUI editor like Atom I think people (like me) would just scroll and use the mouse instead of using command mode since the mouse is usually faster. I can implement this as an option and leave it off by default.\n. ",
    "dryfish": "I get this when the cursor enters an ordered list in a markdown file.  Also, `j` stops working before reaching the end of the file and I have to switch to using the cursor keys.\n\nIf I move the cursor a line below the line that `j` stops working and then press `l` the Developer Tools pane opens.\n. Ah. For me this is because I have Soft Wrap enabled and the row number coming back from `@editor.getCursorScreenPosition()` is the row is looks like and not the actual row.\n\nDeveloper Tools is opening because there is an exception due to `(undefined).length` being executed. (`undefined` being returned by `@editor.getBuffer().lineForRow(row)`).\n. Switching to using `{row, column} = @editor.getCursorBufferPosition()` does _appear_ to fix it.\n. #24 has quite a discussion on the use of screen or buffer coordinates.\n. I get this when the cursor enters an ordered list in a markdown file.  Also, `j` stops working before reaching the end of the file and I have to switch to using the cursor keys.\n\nIf I move the cursor a line below the line that `j` stops working and then press `l` the Developer Tools pane opens.\n. Ah. For me this is because I have Soft Wrap enabled and the row number coming back from `@editor.getCursorScreenPosition()` is the row is looks like and not the actual row.\n\nDeveloper Tools is opening because there is an exception due to `(undefined).length` being executed. (`undefined` being returned by `@editor.getBuffer().lineForRow(row)`).\n. Switching to using `{row, column} = @editor.getCursorBufferPosition()` does _appear_ to fix it.\n. #24 has quite a discussion on the use of screen or buffer coordinates.\n. ",
    "pacuna": "I'm having this problem at the end of lines.\nFor example I have\n\n```\nreturn Response::json(['content' => 'secret page']);\n```\n\nand \"l\" stop working in the \"]\", so I can't put the cursor on the last \")\" nor the \";\"\nis this the same bug?\n. Yes, Atom 0.94.0 and vim-mode 0.9.0.\nWorking on a php file.\n. Looks like a problem with tabs. If I replace the indentation with spaces instead of tabs the problem is fixed. It's difficult to reproduce\n. I'm having this problem at the end of lines.\nFor example I have\n\n```\nreturn Response::json(['content' => 'secret page']);\n```\n\nand \"l\" stop working in the \"]\", so I can't put the cursor on the last \")\" nor the \";\"\nis this the same bug?\n. Yes, Atom 0.94.0 and vim-mode 0.9.0.\nWorking on a php file.\n. Looks like a problem with tabs. If I replace the indentation with spaces instead of tabs the problem is fixed. It's difficult to reproduce\n. ",
    "kgonyon": "I am getting the problems with tabs. If there is a tab at the beginning of the line I cannot move the cursor all the way to the end of the line with l. I can reach the end with shift-a. \n. I am getting the problems with tabs. If there is a tab at the beginning of the line I cannot move the cursor all the way to the end of the line with l. I can reach the end with shift-a. \n. ",
    "mattsawyer77": "I'm not sure if this is exactly the same issue, but I've noticed that when entering insert mode, then hitting tab, the cursor advances too far (usually two tab stops but it can be more).\n. Any ETA on this? I'd argue that this is really a bug, not an enhancement. It's probably the most annoying aspect of working with vim-mode for me.\n. I'm not sure if this is exactly the same issue, but I've noticed that when entering insert mode, then hitting tab, the cursor advances too far (usually two tab stops but it can be more).\n. Any ETA on this? I'd argue that this is really a bug, not an enhancement. It's probably the most annoying aspect of working with vim-mode for me.\n. ",
    "blockloop": "This is a bug because normal mode tab does nothing in real vim. I fixed with this custom key map.\n\n``` cson\n'atom-text-editor.vim-mode.normal-mode':\n  'tab': 'noop'\n```\n\nI don't know of `noop` is an actual atom command, but `unset!` looked to gave a weird behavior and seemed to tab out of the editor altogether. `noop` didn't throw any errors and it does nothing. Works for me.\n. This is a bug because normal mode tab does nothing in real vim. I fixed with this custom key map.\n\n``` cson\n'atom-text-editor.vim-mode.normal-mode':\n  'tab': 'noop'\n```\n\nI don't know of `noop` is an actual atom command, but `unset!` looked to gave a weird behavior and seemed to tab out of the editor altogether. `noop` didn't throw any errors and it does nothing. Works for me.\n. ",
    "SKAhack": "Yes.\nPlease try below.\n\n`^` is cursor position\n\n```\n^12\n34\n56\n```\n\nkeydown: jjyyp\n\nresult:\n\n```\n12\n34\n56\n^5\n```\n\n---\n\n```\n^12\n34\n56\n```\n\nkeydown: yyjp\n\nresult:\n\n```\n12\n34\n^\n1256\n```\n. Ah,, Sorry, I did not notice in the merged #198 \n\nPlease try below.\n\n```\n^12\n34\n56\n```\n\nkeydown: jyyjp\n\nresult:\n\n```\n12\n34\n56\n^34\n\n```\n\n---\n\n```\n^12\n34\n56\n```\n\nkeydown: jyyp\n\nresult:\n\n```\n12\n34\n^\n34\n56\n```\n\n---\n\n```\n^12\n34\n56\n```\n\nkeydown: jjyyP\n\n```\n12\n34\n^5656\n```\n. ok, I rebased.\n. Thank you for your review.\nI fixed this branch.\n. Yes.\nPlease try below.\n\n`^` is cursor position\n\n```\n^12\n34\n56\n```\n\nkeydown: jjyyp\n\nresult:\n\n```\n12\n34\n56\n^5\n```\n\n---\n\n```\n^12\n34\n56\n```\n\nkeydown: yyjp\n\nresult:\n\n```\n12\n34\n^\n1256\n```\n. Ah,, Sorry, I did not notice in the merged #198 \n\nPlease try below.\n\n```\n^12\n34\n56\n```\n\nkeydown: jyyjp\n\nresult:\n\n```\n12\n34\n56\n^34\n\n```\n\n---\n\n```\n^12\n34\n56\n```\n\nkeydown: jyyp\n\nresult:\n\n```\n12\n34\n^\n34\n56\n```\n\n---\n\n```\n^12\n34\n56\n```\n\nkeydown: jjyyP\n\n```\n12\n34\n^5656\n```\n. ok, I rebased.\n. Thank you for your review.\nI fixed this branch.\n. ",
    "badunk": "Would you prefer to have this be its own file?  I suppose its not a \"general\" operator.\n\nI totally missed the `4~` case, but I'm finding it difficult to perform the move right operation without doing it in the operator as well.\n\nI'll also add the undo case, I think I figured out how that is achieved.\n. Thanks for the tips, just updated - it seems to undo properly as well\n. Thanks - missed that.  I adjusted the specs to expose the bug.\n\nI'll look into the visual mode as well.\n. Thanks, I'll follow up with a visual mode fix later as well.  The specs would stay, but the code would have to be rewritten from what I've seen to do the operations via selections.\n. @mcnicholls How about `debugger` in the source code?\n. Would you prefer to have this be its own file?  I suppose its not a \"general\" operator.\n\nI totally missed the `4~` case, but I'm finding it difficult to perform the move right operation without doing it in the operator as well.\n\nI'll also add the undo case, I think I figured out how that is achieved.\n. Thanks for the tips, just updated - it seems to undo properly as well\n. Thanks - missed that.  I adjusted the specs to expose the bug.\n\nI'll look into the visual mode as well.\n. Thanks, I'll follow up with a visual mode fix later as well.  The specs would stay, but the code would have to be rewritten from what I've seen to do the operations via selections.\n. @mcnicholls How about `debugger` in the source code?\n. ",
    "barrymoo": "+1, also will provide some visual aides to the bug. I was hoping I could figure out how to fix the code, but I am not sure where to start.\n\n![cursor](https://cloud.githubusercontent.com/assets/3086255/10942382/e63d6732-82dd-11e5-8241-725e37acf911.jpg)\n\nfollowed by `vggY`, move over pane, `P`\n\n![paste](https://cloud.githubusercontent.com/assets/3086255/10942483/5b30d10a-82de-11e5-93f4-efb6140a97a4.jpg)\n\nThe `y` and `Y` behave exactly similar in vim-visual-characterwise-mode. It is not how vim behaves. \n. +1, also will provide some visual aides to the bug. I was hoping I could figure out how to fix the code, but I am not sure where to start.\n\n![cursor](https://cloud.githubusercontent.com/assets/3086255/10942382/e63d6732-82dd-11e5-8241-725e37acf911.jpg)\n\nfollowed by `vggY`, move over pane, `P`\n\n![paste](https://cloud.githubusercontent.com/assets/3086255/10942483/5b30d10a-82de-11e5-93f4-efb6140a97a4.jpg)\n\nThe `y` and `Y` behave exactly similar in vim-visual-characterwise-mode. It is not how vim behaves. \n. ",
    "melting": "I expect this is no longer true on tip of tree.  On 0.8.1 it is broken.  I\nexpect this change fixed it:\nhttps://github.com/atom/vim-mode/commit/d925213c9f33a710f6e811197ed41d2c43c5b06f\n\nOn Thu, Apr 17, 2014 at 4:06 PM, Ben Lavender notifications@github.comwrote:\n\n> I can't replicate this. Do you have any other non-core packages installed?\n> Do you have any custom keybindings?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/213#issuecomment-40772516\n> .\n. I expect this is no longer true on tip of tree.  On 0.8.1 it is broken.  I\nexpect this change fixed it:\nhttps://github.com/atom/vim-mode/commit/d925213c9f33a710f6e811197ed41d2c43c5b06f\n\nOn Thu, Apr 17, 2014 at 4:06 PM, Ben Lavender notifications@github.comwrote:\n\n> I can't replicate this. Do you have any other non-core packages installed?\n> Do you have any custom keybindings?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/213#issuecomment-40772516\n> .\n. ",
    "mojodna": "@melting Applying that change to 0.8.1 does indeed fix it.\n. @melting Applying that change to 0.8.1 does indeed fix it.\n. ",
    "d2fn": "@bhuga No custom keybindings. This is as out-of-the-box as it gets. Both problems are sporadic enough that it's not surprising you wouldn't be able to reproduce immediately. Is there anything else I can send along to help debugging once I'm able to get the editor in this state again?\n. Yeah arrow keys work as do emacs style bindings for Ctrl n+p+a+e\n. Currently getting this to repro editing a markdown doc\n\n@bhuga anything I can grab for you that would be helpful for debugging?\n. @bhuga atom is at 0.94 but vim-mode is stuck on 0.8.0. tried cloning this repo into ~/.atom/projects. this showed the plugin as installed, but i was unable to enter command mode or otherwise get any indication that the plugin was actually running.\n. I did, sorry @mcolyer. I cloned into the same directory where the plugin was originally installed.\n. @bhuga No custom keybindings. This is as out-of-the-box as it gets. Both problems are sporadic enough that it's not surprising you wouldn't be able to reproduce immediately. Is there anything else I can send along to help debugging once I'm able to get the editor in this state again?\n. Yeah arrow keys work as do emacs style bindings for Ctrl n+p+a+e\n. Currently getting this to repro editing a markdown doc\n\n@bhuga anything I can grab for you that would be helpful for debugging?\n. @bhuga atom is at 0.94 but vim-mode is stuck on 0.8.0. tried cloning this repo into ~/.atom/projects. this showed the plugin as installed, but i was unable to enter command mode or otherwise get any indication that the plugin was actually running.\n. I did, sorry @mcolyer. I cloned into the same directory where the plugin was originally installed.\n. ",
    "mwaskom": "It looks like it's opening the console to report an exception?\n\n```\nUncaught TypeError: Cannot read property 'length' of undefined      /Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:392\n\nUncaught TypeError: Cannot read property 'length' of undefined      motions.coffee:57\n```\n. TBH I am just trying Atom out and it's not clear to me how to install dev versions of packages. I am apparently using 0.8.1.\n. Yes, I still have the issue after updating. Trying to move around with normal vim motions triggers two exceptions in the console:\n\n```\nUncaught TypeError: Cannot read property 'length' of undefined general-motions.coffee:58\nUncaught TypeError: Cannot read property 'length' of undefined /Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:395\n```\n\nI am using a USA keyboard.\n. yes\n\nOn Mon, May 26, 2014 at 10:29 AM, Ben Lavender notifications@github.comwrote:\n\n> @mwaskom https://github.com/mwaskom do you have soft-wrap enabled?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/217#issuecomment-44206288\n> .\n. And the issue seems to go away if I disable it\n. It looks like it's opening the console to report an exception?\n\n```\nUncaught TypeError: Cannot read property 'length' of undefined      /Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:392\n\nUncaught TypeError: Cannot read property 'length' of undefined      motions.coffee:57\n```\n. TBH I am just trying Atom out and it's not clear to me how to install dev versions of packages. I am apparently using 0.8.1.\n. Yes, I still have the issue after updating. Trying to move around with normal vim motions triggers two exceptions in the console:\n\n```\nUncaught TypeError: Cannot read property 'length' of undefined general-motions.coffee:58\nUncaught TypeError: Cannot read property 'length' of undefined /Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:395\n```\n\nI am using a USA keyboard.\n. yes\n\nOn Mon, May 26, 2014 at 10:29 AM, Ben Lavender notifications@github.comwrote:\n\n> @mwaskom https://github.com/mwaskom do you have soft-wrap enabled?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/217#issuecomment-44206288\n> .\n. And the issue seems to go away if I disable it\n. ",
    "chrissphinx": "It's interesting to note that by switching to visual mode this problem goes away.\n\nAtom v0.103.0, plugin v0.10.1\n. It's interesting to note that by switching to visual mode this problem goes away.\n\nAtom v0.103.0, plugin v0.10.1\n. ",
    "brandensilva": "Yeah the issue still persists with the latest versions of atom.io and vim-mode for Windows as of this comment. After going into Insert Mode, simply pressing a forward slash triggers the web inspector. If in Visual Mode, forward slash doesn't trigger it. That isn't the only key that triggers it however, but is one I noticed that consistently does it.\n\nI don't believe I'm using soft wrap as I usually indent my own stuff.\n. @ramikassab I'm starting to have this issue that you were seeing. Did you ever see this issue come back? I feel like it has something to do with visual block mode but I can't narrow it down. It's driving me insane though as I'll get random lock ups making it so I can't type anything. I even uninstalled vim-mode and tried out vim-mode-plus to see if maybe it was fixed but no avail.\n\nWhen I show the key bindings atom is triggering and my inputs are coming across but I can't actually insert any text anymore while in insert mode. I tried disabling vim-mode-plus while in this state and nothing.\n\nGetting a bit frustrated with it and I'm tempted to drop atom and go back to VIM myself :(\n. Yeah the issue still persists with the latest versions of atom.io and vim-mode for Windows as of this comment. After going into Insert Mode, simply pressing a forward slash triggers the web inspector. If in Visual Mode, forward slash doesn't trigger it. That isn't the only key that triggers it however, but is one I noticed that consistently does it.\n\nI don't believe I'm using soft wrap as I usually indent my own stuff.\n. @ramikassab I'm starting to have this issue that you were seeing. Did you ever see this issue come back? I feel like it has something to do with visual block mode but I can't narrow it down. It's driving me insane though as I'll get random lock ups making it so I can't type anything. I even uninstalled vim-mode and tried out vim-mode-plus to see if maybe it was fixed but no avail.\n\nWhen I show the key bindings atom is triggering and my inputs are coming across but I can't actually insert any text anymore while in insert mode. I tried disabling vim-mode-plus while in this state and nothing.\n\nGetting a bit frustrated with it and I'm tempted to drop atom and go back to VIM myself :(\n. ",
    "dyross": "I confirm this is still an issue in 0.9.0\n. I forked the repo and will give it a shot. No promises on eta.\n. This is ready for merge since code merged my other change. \n. Looks like they've made a release.\n. Ping @bhuga :)\n. I confirm this is still an issue in 0.9.0\n. I forked the repo and will give it a shot. No promises on eta.\n. This is ready for merge since code merged my other change. \n. Looks like they've made a release.\n. Ping @bhuga :)\n. ",
    "kafunkajunk": "I started investigating this bug and I'm unsure there is an easy fix. \nWithin the Vim-State.coffee file is this function.\n\n```\nactivateVisualMode: (type) ->\n  @deactivateInsertMode()\n  @mode = 'visual'\n  @submode = type\n  @changeModeClass('visual-mode')\nif @submode == 'linewise'\n    @editor.selectLine()\n```\n\nSo it is essentially calling an editor function after \"V\" is pressed. \nI checked out what the editor does when selecting a line and it seems that this problem is present within the select line implementation.\n\n![selectlines](https://cloud.githubusercontent.com/assets/5166904/3628529/39efdd2e-0e95-11e4-914c-be258ac5ef8b.gif)\n\nAs you can see, after selecting a line, holding down shift and pressing up, the initial line is deselected. \nI don't know why the cursor is being placed down one line but I'm now thinking it isn't completely related to the outcome.\n\nWhat do you guys think?\n. Created a pull request. \n. I never got this into master because my fix isn't generic enough. I don't know if a consensus  was reached on the root cause but I was able to solve this using the standard Atom APIs. I think this issue is worth revisiting.\n. In the keymap > vim-mode.cson \n\n```\n'ctrl-u': 'core:page-up'\n'ctrl-b': 'core:page-up'\n'ctrl-d': 'core:page-down'\n'ctrl-f': 'core:page-down'\n```\n\nIt seems that a new class within the general-motions.coffee file would need to be created to handle moving up and down a page in or out of visual mode. I'll see what I can do.\n. I started investigating this bug and I'm unsure there is an easy fix. \nWithin the Vim-State.coffee file is this function.\n\n```\nactivateVisualMode: (type) ->\n  @deactivateInsertMode()\n  @mode = 'visual'\n  @submode = type\n  @changeModeClass('visual-mode')\nif @submode == 'linewise'\n    @editor.selectLine()\n```\n\nSo it is essentially calling an editor function after \"V\" is pressed. \nI checked out what the editor does when selecting a line and it seems that this problem is present within the select line implementation.\n\n![selectlines](https://cloud.githubusercontent.com/assets/5166904/3628529/39efdd2e-0e95-11e4-914c-be258ac5ef8b.gif)\n\nAs you can see, after selecting a line, holding down shift and pressing up, the initial line is deselected. \nI don't know why the cursor is being placed down one line but I'm now thinking it isn't completely related to the outcome.\n\nWhat do you guys think?\n. Created a pull request. \n. I never got this into master because my fix isn't generic enough. I don't know if a consensus  was reached on the root cause but I was able to solve this using the standard Atom APIs. I think this issue is worth revisiting.\n. In the keymap > vim-mode.cson \n\n```\n'ctrl-u': 'core:page-up'\n'ctrl-b': 'core:page-up'\n'ctrl-d': 'core:page-down'\n'ctrl-f': 'core:page-down'\n```\n\nIt seems that a new class within the general-motions.coffee file would need to be created to handle moving up and down a page in or out of visual mode. I'll see what I can do.\n. ",
    "darkseas": "@drbraden How do you type a normal 'j' in insert mode?\n\nUsing the keymapping you have suggested, if i type `jump` I get `ump`, and of course a 'jj' escapes to command mode.\nI prefer a 'kj' mapping which means I can use a 'kk' for a single 'k'  in Atom, but this will get old very quickly.\nSo how can we avoid throwing away the first letter of the command?\nIs this likely to be a small task or delving into Atom internals?\n. @drbraden How do you type a normal 'j' in insert mode?\n\nUsing the keymapping you have suggested, if i type `jump` I get `ump`, and of course a 'jj' escapes to command mode.\nI prefer a 'kj' mapping which means I can use a 'kk' for a single 'k'  in Atom, but this will get old very quickly.\nSo how can we avoid throwing away the first letter of the command?\nIs this likely to be a small task or delving into Atom internals?\n. ",
    "jamperry": "@drbraden Thanks for the code snippet! I wanted to map 'jj' to escape in Atom and you've saved me a lot of time :+1: \n. @drbraden Thanks for the code snippet! I wanted to map 'jj' to escape in Atom and you've saved me a lot of time :+1: \n. ",
    "AriaMinaei": "Thanks @drbraden! Here is a one-line modification of your code snippet, using `editor.buffer.undo()` instead of `editor.backspace()` to preserve selections:\n\n``` coffeescript\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-proceeded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.buffer.undo()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-command-mode')\n\n#keymap.cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'exit-insert-mode-if-proceeded-by-j'\n```\n. Looks like `editor.buffer.undo()` undoes keystrokes in batch, so, ignore my last comment :)\n. Thanks @drbraden! Here is a one-line modification of your code snippet, using `editor.buffer.undo()` instead of `editor.backspace()` to preserve selections:\n\n``` coffeescript\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-proceeded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.buffer.undo()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-command-mode')\n\n#keymap.cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'exit-insert-mode-if-proceeded-by-j'\n```\n. Looks like `editor.buffer.undo()` undoes keystrokes in batch, so, ignore my last comment :)\n. ",
    "SurenderLohia": "@maxbrunsfeld +1\n. @maxbrunsfeld +1\n. ",
    "Mange": "Just changing it to the unshifted variant would not be a good solution\nbecause it would depend on the keyboard layout.\nDen 9 maj 2014 08:51 skrev \"Matt Windsor\" notifications@github.com:\n\n> Not sure if this is a problem with vim-mode or with atom itself, but I'll\n> file it here first.\n> \n> Any key-bindings vim-mode has that use shift don't seem to work on Linux,\n> or at least not on my installation. I haven't yet tried to reproduce on\n> other systems and it could be a peculiarity to my setup (Gentoo x64 with\n> xmonad).\n> \n> Looking at the key binding resolver, this is because they are being\n> unpacked as \u2018shift-(unshifted key)\u2019, whereas the bindings in vim-mode are\n> of the form \u2018(shifted key)\u2019. For example, vim-mode:outdent is bound to \u2018<\u2019,\n> but doesn't work because when I type < it gets interpreted as \u2018shift-,\u2019.\n> Manually rebinding it to \u2018shift-,\u2019 in the user keybindings works.\n> \n> I'm new to atom, so I'm not sure what the best way of fixing this would be\n> if it is indeed a vim-mode issue. Could there just be another set of\n> key-bindings in terms of \u2018shift-(unshifted key)\u2019 added alongside the\n> \u2018(shifted key)\u2019 ones?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/222\n> .\n. Just changing it to the unshifted variant would not be a good solution\nbecause it would depend on the keyboard layout.\nDen 9 maj 2014 08:51 skrev \"Matt Windsor\" notifications@github.com:\n\n> Not sure if this is a problem with vim-mode or with atom itself, but I'll\n> file it here first.\n> \n> Any key-bindings vim-mode has that use shift don't seem to work on Linux,\n> or at least not on my installation. I haven't yet tried to reproduce on\n> other systems and it could be a peculiarity to my setup (Gentoo x64 with\n> xmonad).\n> \n> Looking at the key binding resolver, this is because they are being\n> unpacked as \u2018shift-(unshifted key)\u2019, whereas the bindings in vim-mode are\n> of the form \u2018(shifted key)\u2019. For example, vim-mode:outdent is bound to \u2018<\u2019,\n> but doesn't work because when I type < it gets interpreted as \u2018shift-,\u2019.\n> Manually rebinding it to \u2018shift-,\u2019 in the user keybindings works.\n> \n> I'm new to atom, so I'm not sure what the best way of fixing this would be\n> if it is indeed a vim-mode issue. Could there just be another set of\n> key-bindings in terms of \u2018shift-(unshifted key)\u2019 added alongside the\n> \u2018(shifted key)\u2019 ones?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/222\n> .\n. ",
    "colinkeenan": "I tried the work-around suggested by https://github.com/CaptainHayashi, but it didn't work for me. Maybe I don't understand how to do it though. Here the contents of /home/colin/.atom/keymap.cson:\n\n```\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-3': 'vim-mode:reverse-search-current-word'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-6': 'vim-mode:outdent'\n\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-8': 'vim-mode:search-current-word'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-,': 'vim-mode:outdent'\n\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-/': 'vim-mode:reverse-search'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-]': 'vim-mode:move-to-previous-paragraph'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-[': 'vim-mode:move-to-next-paragraph'\n\n'.vim-mode.command-mode':\n  'shift-`': 'vim-mode:toggle-case'\n```\n\nI tried it both with and without the dash between _shift_ and whatever key.\n\nWhat am I doing wrong?\n. Thanks CaptainHayashi for your keymap.cson. It doesn't work for me though. \n\nMy entries shown in my previous post just came from the copy link on the Settings->Keybindings page in Atom, and I know nothing about it. Not only do none of the shift-symbol keybindings work for me, but neither does running the command from the console: \n\n```\natom.workspaceView.getActiveView().trigger('vim-mode:move-to-last-character-of-line')\n```\n\nI found that command in https://github.com/atom/vim-mode/issues/228 which worked for https://github.com/nrs, but doesn't work for me.\n\nI've upgraded to 0.95.0, but no improvement.\n. I tried the keybinding resolver for Atom which is ctrl-., and it just confirmed that, for example, $ is shift-4. Basically though, the command to move to the end of the line just does not work, not even from the console. \n. I deleted everything in my keymap.cson and decided to just make $ work. The following works by not using vim mode at all:\n\n```\n'.editor:not(.insert-mode)':\n  'shift-4': 'editor:move-to-end-of-screen-line'\n```\n\nOf course, this is a poor solution because you still can't use the extremely often used combination \n\n```\nd $\n```\n\nThe closest I can come to deleting to the last character is to delete to the next line and then re-insert the new-line. Not good.\n\nThe fact that 'editor:move-to-end-of-screen-line' works for me while 'vim-mode:move-to-last-character-of-line' fails means that there's something wrong with vim mode, not Atom.\n. I finally have this solved.\nHere's my final ~/.atom/keybindings.cson\n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'shift-6': 'vim-mode:move-to-first-character-of-line'\n  'shift-,': 'vim-mode:outdent'\n  'shift-.': 'vim-mode:indent'\n  'shift-]': 'vim-mode:move-to-previous-paragraph'\n  'shift-[': 'vim-mode:move-to-next-paragraph'\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-3': 'vim-mode:reverse-search-current-word'\n  'shift-8': 'vim-mode:search-current-word'\n  'shift-/': 'vim-mode:reverse-search'\n'.vim-mode.command-mode':\n  'shift-; w': 'core:save'\n  'shift-\u00c0': 'vim-mode:toggle-case'\n```\n. '>' (i.e. shift-.) works for me, but I have to do it twice for a single line, or if if I do >Enter it will do two lines. However, using it the usual way by first highlighting the lines I want to move using V works perfectly just hitting '>' one time.\n\nI was able to remove all the definitions in  ~/.atom/keybindings.cson except for saving which I just changed to \n\n```\n'.vim-mode.command-mode':\n  ': w': 'core:save'\n```\n\nSo, pretty much, vim mode is working for me out of the box except for save which is easily defined.\n. I tried \n\n```\natom.workspaceView.getActiveView().trigger('vim-mode:move-to-last-character-of-line')\n```\n\nfrom a terminal, then clicked the open tab of the editor, but it did not move the cursor to the end of the line or anywhere at all. I am also using Arch Linux and installed from AUR. I have version 0.94.0\n. OK - Yeah, I'm on Linux. From reading #222, I understand now why, for example, shift-W works fine but not shift-symbol. And, at least #222 explains a work-around.\n. Yes\n. I also just now tried to issue the following command from the terminal:\n\n```\natom.workspaceView.getActiveView().trigger('editor:move-to-end-of-screen-line')\n```\n\nBut, that doesn't work. Maybe I don't know how these commands are supposed to be issued. I use Guake on linux, which is a drop down terminal.\n\nI will try turning off soft line wraps.\n. Turning off soft line wraps works! I changed the keybinding to \n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n```\n\nand both $ and 'd $' work.\n\nAs for cmd-ctrl-i though, I don't have an apple computer, so how do I do cmd-ctrl when ctrl is cmd on my keyboard? I tried the windows key-ctrl-i but that was the same as ctrl-i and just asks me for a line#. Any other way to get the Chrome Javasctip console? I'll google it.\n. Well, for me using Google Chrome, F12 brings it up, but that doesn't work on Atom. I got the console by doing the following though: View->Developer->Toggle Developer Tools, and then clicking the console tab since it was on the elements tab. According to the menu, ctrl-alt-i should work, but it doesn't. The menu is easy enough though.\n. There's still a problem even with soft-wrap turned off. As soon as I try to add a 2nd keybinding, it fails again.\n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n'.vim-mode:not(.insert-mode)':\n  'shift-6': 'vim-mode:move-to-first-character-of-line'\n```\n\nWith both of these defined, neither one works.\n\nOK, but this fixes it\n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'shift-6': 'vim-mode:move-to-first-character-of-line'\n```\n\nSo, the instructions on the Settings page are not very clear. It just says to copy and paste and if you do that, you get my first attempt. In order to make it work, you have to delete the repeated categories that aren't indented.\n. Here's my final ~/.atom/keybindings.cson\n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'shift-6': 'vim-mode:move-to-first-character-of-line'\n  'shift-,': 'vim-mode:outdent'\n  'shift-.': 'vim-mode:indent'\n  'shift-]': 'vim-mode:move-to-previous-paragraph'\n  'shift-[': 'vim-mode:move-to-next-paragraph'\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-3': 'vim-mode:reverse-search-current-word'\n  'shift-8': 'vim-mode:search-current-word'\n  'shift-/': 'vim-mode:reverse-search'\n'.vim-mode.command-mode':\n  'shift-; w': 'core:save'\n  'shift-\u00c0': 'vim-mode:toggle-case'\n```\n. MY TROUBLE HAD NOTHING TO DO WITH SOFT WRAP\n\nHaving fixed the format of my keybindings.cson file and understanding how to open the console solves the trouble even with soft wrap turned back on.\n. I tried the work-around suggested by https://github.com/CaptainHayashi, but it didn't work for me. Maybe I don't understand how to do it though. Here the contents of /home/colin/.atom/keymap.cson:\n\n```\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-3': 'vim-mode:reverse-search-current-word'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-6': 'vim-mode:outdent'\n\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-8': 'vim-mode:search-current-word'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-,': 'vim-mode:outdent'\n\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-/': 'vim-mode:reverse-search'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-]': 'vim-mode:move-to-previous-paragraph'\n\n'.vim-mode:not(.insert-mode)':\n  'shift-[': 'vim-mode:move-to-next-paragraph'\n\n'.vim-mode.command-mode':\n  'shift-`': 'vim-mode:toggle-case'\n```\n\nI tried it both with and without the dash between _shift_ and whatever key.\n\nWhat am I doing wrong?\n. Thanks CaptainHayashi for your keymap.cson. It doesn't work for me though. \n\nMy entries shown in my previous post just came from the copy link on the Settings->Keybindings page in Atom, and I know nothing about it. Not only do none of the shift-symbol keybindings work for me, but neither does running the command from the console: \n\n```\natom.workspaceView.getActiveView().trigger('vim-mode:move-to-last-character-of-line')\n```\n\nI found that command in https://github.com/atom/vim-mode/issues/228 which worked for https://github.com/nrs, but doesn't work for me.\n\nI've upgraded to 0.95.0, but no improvement.\n. I tried the keybinding resolver for Atom which is ctrl-., and it just confirmed that, for example, $ is shift-4. Basically though, the command to move to the end of the line just does not work, not even from the console. \n. I deleted everything in my keymap.cson and decided to just make $ work. The following works by not using vim mode at all:\n\n```\n'.editor:not(.insert-mode)':\n  'shift-4': 'editor:move-to-end-of-screen-line'\n```\n\nOf course, this is a poor solution because you still can't use the extremely often used combination \n\n```\nd $\n```\n\nThe closest I can come to deleting to the last character is to delete to the next line and then re-insert the new-line. Not good.\n\nThe fact that 'editor:move-to-end-of-screen-line' works for me while 'vim-mode:move-to-last-character-of-line' fails means that there's something wrong with vim mode, not Atom.\n. I finally have this solved.\nHere's my final ~/.atom/keybindings.cson\n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'shift-6': 'vim-mode:move-to-first-character-of-line'\n  'shift-,': 'vim-mode:outdent'\n  'shift-.': 'vim-mode:indent'\n  'shift-]': 'vim-mode:move-to-previous-paragraph'\n  'shift-[': 'vim-mode:move-to-next-paragraph'\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-3': 'vim-mode:reverse-search-current-word'\n  'shift-8': 'vim-mode:search-current-word'\n  'shift-/': 'vim-mode:reverse-search'\n'.vim-mode.command-mode':\n  'shift-; w': 'core:save'\n  'shift-\u00c0': 'vim-mode:toggle-case'\n```\n. '>' (i.e. shift-.) works for me, but I have to do it twice for a single line, or if if I do >Enter it will do two lines. However, using it the usual way by first highlighting the lines I want to move using V works perfectly just hitting '>' one time.\n\nI was able to remove all the definitions in  ~/.atom/keybindings.cson except for saving which I just changed to \n\n```\n'.vim-mode.command-mode':\n  ': w': 'core:save'\n```\n\nSo, pretty much, vim mode is working for me out of the box except for save which is easily defined.\n. I tried \n\n```\natom.workspaceView.getActiveView().trigger('vim-mode:move-to-last-character-of-line')\n```\n\nfrom a terminal, then clicked the open tab of the editor, but it did not move the cursor to the end of the line or anywhere at all. I am also using Arch Linux and installed from AUR. I have version 0.94.0\n. OK - Yeah, I'm on Linux. From reading #222, I understand now why, for example, shift-W works fine but not shift-symbol. And, at least #222 explains a work-around.\n. Yes\n. I also just now tried to issue the following command from the terminal:\n\n```\natom.workspaceView.getActiveView().trigger('editor:move-to-end-of-screen-line')\n```\n\nBut, that doesn't work. Maybe I don't know how these commands are supposed to be issued. I use Guake on linux, which is a drop down terminal.\n\nI will try turning off soft line wraps.\n. Turning off soft line wraps works! I changed the keybinding to \n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n```\n\nand both $ and 'd $' work.\n\nAs for cmd-ctrl-i though, I don't have an apple computer, so how do I do cmd-ctrl when ctrl is cmd on my keyboard? I tried the windows key-ctrl-i but that was the same as ctrl-i and just asks me for a line#. Any other way to get the Chrome Javasctip console? I'll google it.\n. Well, for me using Google Chrome, F12 brings it up, but that doesn't work on Atom. I got the console by doing the following though: View->Developer->Toggle Developer Tools, and then clicking the console tab since it was on the elements tab. According to the menu, ctrl-alt-i should work, but it doesn't. The menu is easy enough though.\n. There's still a problem even with soft-wrap turned off. As soon as I try to add a 2nd keybinding, it fails again.\n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n'.vim-mode:not(.insert-mode)':\n  'shift-6': 'vim-mode:move-to-first-character-of-line'\n```\n\nWith both of these defined, neither one works.\n\nOK, but this fixes it\n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'shift-6': 'vim-mode:move-to-first-character-of-line'\n```\n\nSo, the instructions on the Settings page are not very clear. It just says to copy and paste and if you do that, you get my first attempt. In order to make it work, you have to delete the repeated categories that aren't indented.\n. Here's my final ~/.atom/keybindings.cson\n\n```\n'.vim-mode:not(.insert-mode)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'shift-6': 'vim-mode:move-to-first-character-of-line'\n  'shift-,': 'vim-mode:outdent'\n  'shift-.': 'vim-mode:indent'\n  'shift-]': 'vim-mode:move-to-previous-paragraph'\n  'shift-[': 'vim-mode:move-to-next-paragraph'\n'.vim-mode.command-mode, .vim-mode.operator-pending-mode':\n  'shift-3': 'vim-mode:reverse-search-current-word'\n  'shift-8': 'vim-mode:search-current-word'\n  'shift-/': 'vim-mode:reverse-search'\n'.vim-mode.command-mode':\n  'shift-; w': 'core:save'\n  'shift-\u00c0': 'vim-mode:toggle-case'\n```\n. MY TROUBLE HAD NOTHING TO DO WITH SOFT WRAP\n\nHaving fixed the format of my keybindings.cson file and understanding how to open the console solves the trouble even with soft wrap turned back on.\n. ",
    "MattWindsor91": "My keymap.cson looks like this at the moment (I've only really added bindings for vim-mode keys that haven't worked):\n\n```\n'.workspace':\n  'ctrl-alt-shift-Z': 'zen:toggle'\n'.vim-mode.visual-mode:not(.mini)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'shift-.': 'vim-mode:indent'\n  'shift-,': 'vim-mode:outdent'\n'.vim-mode.command-mode:not(.mini)':\n  'shift-; w': 'core:save'\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'ctrl-d': 'find-and-replace:select-next'\n  'shift-.': 'vim-mode:indent'\n  'shift-,': 'vim-mode:outdent'\n'body':\n  'shift-insert': 'core:paste'\n'.editor':\n  'ctrl-d': 'find-and-replace:select-next'\n```\n\nThings that might be different:\n- I'm not very clued up on keymap selectors yet, so my selectors are more redundant than yours.  I'd like to hope that your selectors work, as they seem a better idea than what I'm doing.\n- I'm using a UK keyboard/X keymap, not sure what that could be doing but that could have something to do with it.\n\nUsing the key binding resolver (ctrl-. on Linux) might help, that's what I used to figure out what atom was calling $ etc.\n. Weirdly, with the latest version of atom, the key binding resolver is now showing $ resolving as \u20184\u2019.  That is, when I hold shift, it registers as shift, but when I press 4 to get $, it overrides the shift.\n. Keys that aren't on the number line (shift-; \u2192 :, shift-. \u2192>) appear to work.  It's just shift-(any number).\n. Curiouser and curiouser: num lock does nothing for the number line.  For some reason, the keypad keys are getting mapped to letters: 1 is a, 2 is b, 3 c, etc. with num-lock on.  Flipping num-lock and holding shift produces the capital letters.  Unrelated to this problem, but still weird.\n. Had a quick go with the numbers fork for atom-keymap, works here, thanks & looking forward to this going into mainline!\n. Only problem now is that I can't seem to set a keybinding to bind :w to save.  Previously, I seem to remember \u2018shift-; w\u2019 worked fine, but trying to use \u2018: w\u2019 does not.  This is #50 though, so I imagine it working previously was a fluke.\n. It shows \u2018:\u2019 (empty) when I type :, \u2018w\u2019 for w (complete with the vi keybindings for moving to next word), and if I add the enter then that is also registered separately.\n. Things like g b and g f work.  g t switches to the next tab, which seems to be what vim-mode is set up to do in that situation according to the key binding resolver, but I'd have expected it to work as a motion command (go 'till/move to just before given character?)\n. :w enter now works fine for me (not sure why that was broken), leaving the numpad weirdness and 'g t' as the only things that seem a bit off.\n. My keymap.cson looks like this at the moment (I've only really added bindings for vim-mode keys that haven't worked):\n\n```\n'.workspace':\n  'ctrl-alt-shift-Z': 'zen:toggle'\n'.vim-mode.visual-mode:not(.mini)':\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'shift-.': 'vim-mode:indent'\n  'shift-,': 'vim-mode:outdent'\n'.vim-mode.command-mode:not(.mini)':\n  'shift-; w': 'core:save'\n  'shift-4': 'vim-mode:move-to-last-character-of-line'\n  'ctrl-d': 'find-and-replace:select-next'\n  'shift-.': 'vim-mode:indent'\n  'shift-,': 'vim-mode:outdent'\n'body':\n  'shift-insert': 'core:paste'\n'.editor':\n  'ctrl-d': 'find-and-replace:select-next'\n```\n\nThings that might be different:\n- I'm not very clued up on keymap selectors yet, so my selectors are more redundant than yours.  I'd like to hope that your selectors work, as they seem a better idea than what I'm doing.\n- I'm using a UK keyboard/X keymap, not sure what that could be doing but that could have something to do with it.\n\nUsing the key binding resolver (ctrl-. on Linux) might help, that's what I used to figure out what atom was calling $ etc.\n. Weirdly, with the latest version of atom, the key binding resolver is now showing $ resolving as \u20184\u2019.  That is, when I hold shift, it registers as shift, but when I press 4 to get $, it overrides the shift.\n. Keys that aren't on the number line (shift-; \u2192 :, shift-. \u2192>) appear to work.  It's just shift-(any number).\n. Curiouser and curiouser: num lock does nothing for the number line.  For some reason, the keypad keys are getting mapped to letters: 1 is a, 2 is b, 3 c, etc. with num-lock on.  Flipping num-lock and holding shift produces the capital letters.  Unrelated to this problem, but still weird.\n. Had a quick go with the numbers fork for atom-keymap, works here, thanks & looking forward to this going into mainline!\n. Only problem now is that I can't seem to set a keybinding to bind :w to save.  Previously, I seem to remember \u2018shift-; w\u2019 worked fine, but trying to use \u2018: w\u2019 does not.  This is #50 though, so I imagine it working previously was a fluke.\n. It shows \u2018:\u2019 (empty) when I type :, \u2018w\u2019 for w (complete with the vi keybindings for moving to next word), and if I add the enter then that is also registered separately.\n. Things like g b and g f work.  g t switches to the next tab, which seems to be what vim-mode is set up to do in that situation according to the key binding resolver, but I'd have expected it to work as a motion command (go 'till/move to just before given character?)\n. :w enter now works fine for me (not sure why that was broken), leaving the numpad weirdness and 'g t' as the only things that seem a bit off.\n. ",
    "jacobgardner": "I get the same or at least a similar issue in windows.  \n\nI had to do 'shift 4' instead of 'shift-4' though for instance.\nThe keybinding resolver says , and . map to 1/4 and 3/4, respectively.  Similar issues with a lot of symbol keys. \n. With the changes in atom/atom-keymap#19, the default keybindings appear to work for me.  I should note that I just tested this on windows and not linux.  I'm fairly certain it's the exact same issue so this should work for linux as well.\n. My PR just got merged.  If someone could build the latest atom and verify that it fixes this issue, we can probably close this.  \n\natom/atom@e29185ef112abe710230358f4e7c655635840aea\n. Are you on windows or linux?  shift-4 resolves to '$' for me.  \n\nI'll look into getting the right mappings for the numpad because I'm getting that too. \n. Ah, there was a conflict with another merge to atom-keymap.  I'm getting that first issue you described now.  I can fix that real quick.\n. Ok, I've got a PR for the numbers issue.\natom/atom-keymap#24\n. As for the numpad issue, I've created this issue: atom/atom-keymap#25.  I'll start working on it, once I get some feedback on it. \n. Interesting.  I just added \n\n```\n'.vim-mode:not(.insert-mode)':\n    ': w enter': 'core:save'\n```\n\non my local instance and it worked fine. \n\nWhat is the keybinding resolver showing for each keypress?\n. do other compound keybindings like 'g t'  still work for you?\n. Mainline should have that numbers fix. \n. I just built atom from scratch (from current master) on linux mint 16 and the \": w enter\" motion works for me there as well as on my windows box. \n\nI wonder if there's some conflict with another package you have installed or if there's something weird going on with your distro...  I don't have any other ideas at the moment. \n\n![resolver](https://cloud.githubusercontent.com/assets/245622/3041360/ed0c333c-e0f3-11e3-9557-8b1def36ab84.PNG)\n. @CaptainHayashi, 'g t' and 'g T' in vim switches tabs for me.  I believe that was the default.  'f t' for me was \"move to the first instance of t\".\n\n@j-hannes 0.97.0 should have everything fixed except the delete key is broken in that revision.  The delete key fix has been merged, but not released yet.  Since you're using vim-mode, though, it's not a huge bother as long as you use 'x' to delete.\n. @sagischwarz When you type `shift-.` does it show in the keymap resolver as `>` or `shift-.`\n\nYou should be looking for `>` in the keymap.\n\nIn real vim, the default behavior for me when you're not in visual mode is hitting `>` twice to indent once and so that behavior is a match for me. \n. Ah... apologies for being an arrogant, presumptuous American.  I'm assuming you're using a non-US keyboard layout, then.  `shift-.` should resolve to `>` whether you're on a US or non-US keyboard because atom doesn't have a way of determining locale.  \n\nCan you open the keybinding resolver (Command Palette->Key Binding Resolver: Toggle) and tell us what you see (or screenshot) when you do that keystroke.\n. There is no command-line mode currently.   So `:` is mapping correctly.  Nevertheless, I was expecting `shift-.` to map to `>`.  I just tried it locally with the German keyboard layout and that occurs for me.\n\nWhat OS are you using?  \n. No, Chromium doesn't, but they will soon, hopefully (https://github.com/atom/atom-keymap/pull/30#issuecomment-44050058).  You might want to wait until atom-keymap creates an API for supporting different layouts through key translation tables: https://github.com/atom/atom-keymap/pull/22#issuecomment-44306401\n. More information:\n\nvim-mode.coffee appears to create a new vimState for each editorView and in the constructor updateStatusBar is called before the 'activated' event is triggered.  So each view queues up this function for triggering after the activated event is called:\n\n```\n  atom.packages.once 'activated', ->\n    atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")\n```\n\nIt appears that just another check to see if #status-bar-vim-mode exists before adding that div. \n. Sorry I haven't had time to update the tests yet.  I looked at it a few days ago and was having a hard time figuring out how to make the tests think I was on mac.  I'll try to get to this tonight. \n\nIf anyone has any suggestions, I'd really appreciate it.  \n. With the current version of chromium, it's impossible to determine the keyboard locale and adjust the keymapping accordingly.  This will require further investigation and modification.  \n\nWith Atom 0.100.0, shift-4 will be detected as '$' on swedish keyboards (all keyboards actually) whether or not this is the desired behavior for now. \n. You might want to hold off on this.  Atom mainline just reverted back to atom-keymap 0.19 which doesn't include the 'fixes.'  There were some issues with different keyboard layouts and generally un-maintainable code across different platforms. atom/atom-keymap#31 was opened to try to find a better solution, I believe. \n. atom just got atom-keymap bumped to 0.23.  This contains everything but the numpad fixes.  I think it'll be in 0.100.0 if you want to update this for then.\n. I get the same or at least a similar issue in windows.  \n\nI had to do 'shift 4' instead of 'shift-4' though for instance.\nThe keybinding resolver says , and . map to 1/4 and 3/4, respectively.  Similar issues with a lot of symbol keys. \n. With the changes in atom/atom-keymap#19, the default keybindings appear to work for me.  I should note that I just tested this on windows and not linux.  I'm fairly certain it's the exact same issue so this should work for linux as well.\n. My PR just got merged.  If someone could build the latest atom and verify that it fixes this issue, we can probably close this.  \n\natom/atom@e29185ef112abe710230358f4e7c655635840aea\n. Are you on windows or linux?  shift-4 resolves to '$' for me.  \n\nI'll look into getting the right mappings for the numpad because I'm getting that too. \n. Ah, there was a conflict with another merge to atom-keymap.  I'm getting that first issue you described now.  I can fix that real quick.\n. Ok, I've got a PR for the numbers issue.\natom/atom-keymap#24\n. As for the numpad issue, I've created this issue: atom/atom-keymap#25.  I'll start working on it, once I get some feedback on it. \n. Interesting.  I just added \n\n```\n'.vim-mode:not(.insert-mode)':\n    ': w enter': 'core:save'\n```\n\non my local instance and it worked fine. \n\nWhat is the keybinding resolver showing for each keypress?\n. do other compound keybindings like 'g t'  still work for you?\n. Mainline should have that numbers fix. \n. I just built atom from scratch (from current master) on linux mint 16 and the \": w enter\" motion works for me there as well as on my windows box. \n\nI wonder if there's some conflict with another package you have installed or if there's something weird going on with your distro...  I don't have any other ideas at the moment. \n\n![resolver](https://cloud.githubusercontent.com/assets/245622/3041360/ed0c333c-e0f3-11e3-9557-8b1def36ab84.PNG)\n. @CaptainHayashi, 'g t' and 'g T' in vim switches tabs for me.  I believe that was the default.  'f t' for me was \"move to the first instance of t\".\n\n@j-hannes 0.97.0 should have everything fixed except the delete key is broken in that revision.  The delete key fix has been merged, but not released yet.  Since you're using vim-mode, though, it's not a huge bother as long as you use 'x' to delete.\n. @sagischwarz When you type `shift-.` does it show in the keymap resolver as `>` or `shift-.`\n\nYou should be looking for `>` in the keymap.\n\nIn real vim, the default behavior for me when you're not in visual mode is hitting `>` twice to indent once and so that behavior is a match for me. \n. Ah... apologies for being an arrogant, presumptuous American.  I'm assuming you're using a non-US keyboard layout, then.  `shift-.` should resolve to `>` whether you're on a US or non-US keyboard because atom doesn't have a way of determining locale.  \n\nCan you open the keybinding resolver (Command Palette->Key Binding Resolver: Toggle) and tell us what you see (or screenshot) when you do that keystroke.\n. There is no command-line mode currently.   So `:` is mapping correctly.  Nevertheless, I was expecting `shift-.` to map to `>`.  I just tried it locally with the German keyboard layout and that occurs for me.\n\nWhat OS are you using?  \n. No, Chromium doesn't, but they will soon, hopefully (https://github.com/atom/atom-keymap/pull/30#issuecomment-44050058).  You might want to wait until atom-keymap creates an API for supporting different layouts through key translation tables: https://github.com/atom/atom-keymap/pull/22#issuecomment-44306401\n. More information:\n\nvim-mode.coffee appears to create a new vimState for each editorView and in the constructor updateStatusBar is called before the 'activated' event is triggered.  So each view queues up this function for triggering after the activated event is called:\n\n```\n  atom.packages.once 'activated', ->\n    atom.workspaceView.statusBar?.prependRight(\"<div id='status-bar-vim-mode' class='inline-block'>Command</div>\")\n```\n\nIt appears that just another check to see if #status-bar-vim-mode exists before adding that div. \n. Sorry I haven't had time to update the tests yet.  I looked at it a few days ago and was having a hard time figuring out how to make the tests think I was on mac.  I'll try to get to this tonight. \n\nIf anyone has any suggestions, I'd really appreciate it.  \n. With the current version of chromium, it's impossible to determine the keyboard locale and adjust the keymapping accordingly.  This will require further investigation and modification.  \n\nWith Atom 0.100.0, shift-4 will be detected as '$' on swedish keyboards (all keyboards actually) whether or not this is the desired behavior for now. \n. You might want to hold off on this.  Atom mainline just reverted back to atom-keymap 0.19 which doesn't include the 'fixes.'  There were some issues with different keyboard layouts and generally un-maintainable code across different platforms. atom/atom-keymap#31 was opened to try to find a better solution, I believe. \n. atom just got atom-keymap bumped to 0.23.  This contains everything but the numpad fixes.  I think it'll be in 0.100.0 if you want to update this for then.\n. ",
    "sagischwarz": "Should this work out of the box now? I have compiled the latest master and installed it on Debian Testing, but shift-. does nothing and I also cannot find a mapping of shift-. in the keymap.\n. All the shift-related comands work for me, except shift-. (:) to get into command line mode. The key map resolver shows : when pressing shift-.\n. Oh, now I understand the confusion (I have unfortunately edited my post already). Sorry, I also did not think about the different keyboard layouts. I have a German layout, so when pressing pressing shift-. should get me a : and into command line mode. The resolver also shows a : as expected, but does not activate command mode.\n\n![asdf](https://cloud.githubusercontent.com/assets/6792072/3097296/b08331c4-e5dd-11e3-804c-f8d3c252ac6d.png)\n. @jacobgardner Ohh, that explains it all. I apologize for all the chaos. I'm using Debian Testing with Gnome 3 and the keyboard layout is set to plain \"Deutsch\" (\"German\"), while \"setxkbmap -print | awk -F\"+\" '/xkb_symbols/ {print $2}'\" returns \"de\".\n. @bhuga In vim, I can indent with the > key (shift-<), which is next to the left shift:\n\n![asdf](https://cloud.githubusercontent.com/assets/6792072/3097551/283a3332-e5e0-11e3-8938-a4a92a39decc.png)\n\nUsing this in atom with the vim plugin also works as expected (at least I think so, I usually don't use it).\n. Should this work out of the box now? I have compiled the latest master and installed it on Debian Testing, but shift-. does nothing and I also cannot find a mapping of shift-. in the keymap.\n. All the shift-related comands work for me, except shift-. (:) to get into command line mode. The key map resolver shows : when pressing shift-.\n. Oh, now I understand the confusion (I have unfortunately edited my post already). Sorry, I also did not think about the different keyboard layouts. I have a German layout, so when pressing pressing shift-. should get me a : and into command line mode. The resolver also shows a : as expected, but does not activate command mode.\n\n![asdf](https://cloud.githubusercontent.com/assets/6792072/3097296/b08331c4-e5dd-11e3-804c-f8d3c252ac6d.png)\n. @jacobgardner Ohh, that explains it all. I apologize for all the chaos. I'm using Debian Testing with Gnome 3 and the keyboard layout is set to plain \"Deutsch\" (\"German\"), while \"setxkbmap -print | awk -F\"+\" '/xkb_symbols/ {print $2}'\" returns \"de\".\n. @bhuga In vim, I can indent with the > key (shift-<), which is next to the left shift:\n\n![asdf](https://cloud.githubusercontent.com/assets/6792072/3097551/283a3332-e5e0-11e3-8938-a4a92a39decc.png)\n\nUsing this in atom with the vim plugin also works as expected (at least I think so, I usually don't use it).\n. ",
    "ipuustin": "I'm seeing this issue with Finnish keyboard layout (on Windows though). Some keys work properly with shift and some do not. It might have to on how they happen to match the keys on US keyboard layout. The indentation (less than, greater than) keys, star (*) and the braces are not working, while % is working. I think none of the keys that use AltGr (like AltGr-4 needed for $) are working. The Finnish keyboard layout looks like this: http://en.wikipedia.org/wiki/QWERTY#/media/File:KB_Finnish_Multilingual.svg\n. I'm seeing this issue with Finnish keyboard layout (on Windows though). Some keys work properly with shift and some do not. It might have to on how they happen to match the keys on US keyboard layout. The indentation (less than, greater than) keys, star (*) and the braces are not working, while % is working. I think none of the keys that use AltGr (like AltGr-4 needed for $) are working. The Finnish keyboard layout looks like this: http://en.wikipedia.org/wiki/QWERTY#/media/File:KB_Finnish_Multilingual.svg\n. ",
    "jduval": "Same issue on Ubuntu with a french keyboard layout.\n![kbd_french](https://cloud.githubusercontent.com/assets/1597299/7255501/03ca38cc-e84a-11e4-92e9-98871d21a034.gif)\n\nFor example, `$` doesn't work but `shift + 4` works to move to last character of line.\nIt seems that the issue is not related to the using of shift, but that vim's bindings work only with US keyboard layout.\n\nEDIT:\nthe behavior is more complex than what I thought.\ni.e.\nOn french keyboard, `shift + /` works to search something; If only US keyboard layout should works for bindings, `shift + \\` should be the US' `shift + >`.\n. Same issue on Ubuntu with a french keyboard layout.\n![kbd_french](https://cloud.githubusercontent.com/assets/1597299/7255501/03ca38cc-e84a-11e4-92e9-98871d21a034.gif)\n\nFor example, `$` doesn't work but `shift + 4` works to move to last character of line.\nIt seems that the issue is not related to the using of shift, but that vim's bindings work only with US keyboard layout.\n\nEDIT:\nthe behavior is more complex than what I thought.\ni.e.\nOn french keyboard, `shift + /` works to search something; If only US keyboard layout should works for bindings, `shift + \\` should be the US' `shift + >`.\n. ",
    "markrendle": "Just figured out that the reason pressing `~` to toggle case isn't working is that in vim normal mode, that key on my UK keyboard is resolving to `\"`. For some reason, in not-insert mode, all the keys are resolving using US layout.\n. Just figured out that the reason pressing `~` to toggle case isn't working is that in vim normal mode, that key on my UK keyboard is resolving to `\"`. For some reason, in not-insert mode, all the keys are resolving using US layout.\n. ",
    "Kannen": "@markrendle Try to install the package keyboard-localization. This is an atom bug.\n. @markrendle Try to install the package keyboard-localization. This is an atom bug.\n. ",
    "guanlun": "@bhuga oh indeed it's fixed, sorry for the issue\n. @bhuga oh indeed it's fixed, sorry for the issue\n. ",
    "slindberg": "@nathansobo, @bhuga: It looks like [this](https://atom.io/docs/api/v0.152.0/Marker) is the API you referred to in May, is that correct? I'm interested in getting this working.\n. omg thank you thank you thank you :beers: \n. @nathansobo, @bhuga: It looks like [this](https://atom.io/docs/api/v0.152.0/Marker) is the API you referred to in May, is that correct? I'm interested in getting this working.\n. omg thank you thank you thank you :beers: \n. ",
    "trusktr": "Daaaaang, nothing since 2014!\n\nI found a solution.\n- Install a package that lets you highlight the word under the cursor. For example, I installed `quick-highlight`.\n- In your `init.coffee` file, make your own commands that will call the vim-mode commands as well as the new package's highlight commands. For example, if using `quick-highlight`:\n  \n  ``` coffee\n  hlsearch = (editor) ->\n      atom.commands.dispatch(editor, 'quick-highlight:clear')\n      atom.commands.dispatch(editor, 'quick-highlight:toggle')\n  \n  atom.commands.add 'atom-text-editor', 'trusktr:search-current-word', (event) ->\n      hlsearch(this)\n      atom.commands.dispatch(this, 'vim-mode:search-current-word')\n  \n  atom.commands.add 'atom-text-editor', 'trusktr:reverse-search-current-word', (event) ->\n      hlsearch(this)\n      atom.commands.dispatch(this, 'vim-mode:reverse-search-current-word')\n  \n  atom.commands.add 'atom-text-editor', 'trusktr:reset-normal-mode', (event) ->\n      atom.commands.dispatch(this, 'quick-highlight:clear')\n      atom.commands.dispatch(this, 'vim-mode:reset-normal-mode')\n  ```\n- In your keymap.cson, use your new commands instead of the original vim-mode commands:\n  \n  ``` cson\n  'atom-text-editor.vim-mode:not(.insert-mode)':\n      '*': 'trusktr:search-current-word'\n      '#': 'trusktr:reverse-search-current-word'\n  \n  'atom-text-editor.vim-mode':\n      'cmd-c': 'trusktr:reset-normal-mode'\n  ```\n\nAnd that's it, a hack version of `hlsearch`. We could also do this with Atom's default find-replace search highlight (with the caveat that pressing `n` and `N` will behave like `cmd-g` and `cmd-shift-g` which means navigating between ocurrences would put you in VISUAL mode, but you could easily escape or ctrl-c out of it, good enough for me!).\n. P.S. Here's a [Node.js interface for NeoVim](https://github.com/ngroup/neovim.js), still in it's early stages. It shows what the future beholds...\n\nEDIT: Ah! Apparently there's already a proof of concept of [Atom+NeoVim](https://www.youtube.com/watch?v=lH_zb7X6mZw). :)\n. @maxbrunsfeld It's possible to intercept keystrokes before sending them to neovim, and that way they can be mapped to Atom actions before being sent to neovim. Atom keybindings would take precedence, then anything that isn't bound can be sent to neovim. There could be an option to choose which of Atom or NeoVim handles keystrokes first. Eclim has such an option (the wrapper for embedding vim in Eclipse).\n\nBut yeah, NeoVim's text manipulation specialty plus Atom's amazing GUI would be a super nice combo.\n. Once I have some extra cash from my new job...\n:D\n. Made a quick hack: https://github.com/atom/vim-mode/pull/224#issuecomment-229543372\n. As a vim user, I always felt like Atom/Sublime had advantages in their multi-cursor mode (and vice versa).\n\nIs anyone here a wizard in both Vim and Atom (I'm am brand new to Atom) that can describe or show what interesting things can be one with VISUAL BLOCK mode that can't be done with multi-cursor mode, and vice versa?\n. > that one is deprecated\n\nDeprecated, but still works! EDIT: well, not completely. Missing functionality compared to Vim.\n. Much needed!\n. This would allow, for example, to type things like `%` to move the cursor to a matching brace (and thus modifies the VISUAL selection).\n. Dupes: \n- https://github.com/atom/vim-mode/issues/1005\n- https://github.com/atom/vim-mode/issues/936\n- https://github.com/atom/vim-mode/issues/820\n\nInterestingly, all those related issues have my exact same issue: needing to select whole blocks using `%` and similar.\n. Even if not, pointing me in some direction to implementing it would be helpful. :]\n. Closing in favor of https://github.com/atom/vim-mode/issues/458, but would still like ideas on how to proceed.\n. Daaaaang, nothing since 2014!\n\nI found a solution.\n- Install a package that lets you highlight the word under the cursor. For example, I installed `quick-highlight`.\n- In your `init.coffee` file, make your own commands that will call the vim-mode commands as well as the new package's highlight commands. For example, if using `quick-highlight`:\n  \n  ``` coffee\n  hlsearch = (editor) ->\n      atom.commands.dispatch(editor, 'quick-highlight:clear')\n      atom.commands.dispatch(editor, 'quick-highlight:toggle')\n  \n  atom.commands.add 'atom-text-editor', 'trusktr:search-current-word', (event) ->\n      hlsearch(this)\n      atom.commands.dispatch(this, 'vim-mode:search-current-word')\n  \n  atom.commands.add 'atom-text-editor', 'trusktr:reverse-search-current-word', (event) ->\n      hlsearch(this)\n      atom.commands.dispatch(this, 'vim-mode:reverse-search-current-word')\n  \n  atom.commands.add 'atom-text-editor', 'trusktr:reset-normal-mode', (event) ->\n      atom.commands.dispatch(this, 'quick-highlight:clear')\n      atom.commands.dispatch(this, 'vim-mode:reset-normal-mode')\n  ```\n- In your keymap.cson, use your new commands instead of the original vim-mode commands:\n  \n  ``` cson\n  'atom-text-editor.vim-mode:not(.insert-mode)':\n      '*': 'trusktr:search-current-word'\n      '#': 'trusktr:reverse-search-current-word'\n  \n  'atom-text-editor.vim-mode':\n      'cmd-c': 'trusktr:reset-normal-mode'\n  ```\n\nAnd that's it, a hack version of `hlsearch`. We could also do this with Atom's default find-replace search highlight (with the caveat that pressing `n` and `N` will behave like `cmd-g` and `cmd-shift-g` which means navigating between ocurrences would put you in VISUAL mode, but you could easily escape or ctrl-c out of it, good enough for me!).\n. P.S. Here's a [Node.js interface for NeoVim](https://github.com/ngroup/neovim.js), still in it's early stages. It shows what the future beholds...\n\nEDIT: Ah! Apparently there's already a proof of concept of [Atom+NeoVim](https://www.youtube.com/watch?v=lH_zb7X6mZw). :)\n. @maxbrunsfeld It's possible to intercept keystrokes before sending them to neovim, and that way they can be mapped to Atom actions before being sent to neovim. Atom keybindings would take precedence, then anything that isn't bound can be sent to neovim. There could be an option to choose which of Atom or NeoVim handles keystrokes first. Eclim has such an option (the wrapper for embedding vim in Eclipse).\n\nBut yeah, NeoVim's text manipulation specialty plus Atom's amazing GUI would be a super nice combo.\n. Once I have some extra cash from my new job...\n:D\n. Made a quick hack: https://github.com/atom/vim-mode/pull/224#issuecomment-229543372\n. As a vim user, I always felt like Atom/Sublime had advantages in their multi-cursor mode (and vice versa).\n\nIs anyone here a wizard in both Vim and Atom (I'm am brand new to Atom) that can describe or show what interesting things can be one with VISUAL BLOCK mode that can't be done with multi-cursor mode, and vice versa?\n. > that one is deprecated\n\nDeprecated, but still works! EDIT: well, not completely. Missing functionality compared to Vim.\n. Much needed!\n. This would allow, for example, to type things like `%` to move the cursor to a matching brace (and thus modifies the VISUAL selection).\n. Dupes: \n- https://github.com/atom/vim-mode/issues/1005\n- https://github.com/atom/vim-mode/issues/936\n- https://github.com/atom/vim-mode/issues/820\n\nInterestingly, all those related issues have my exact same issue: needing to select whole blocks using `%` and similar.\n. Even if not, pointing me in some direction to implementing it would be helpful. :]\n. Closing in favor of https://github.com/atom/vim-mode/issues/458, but would still like ideas on how to proceed.\n. ",
    "hehe-wz": "Any way to make \"/\" work? Can keymap match \"/.\\* enter\"?\n. Any way to make \"/\" work? Can keymap match \"/.\\* enter\"?\n. ",
    "osolmaz": "Yeah `$` does not work for me. How can I debug it? I think my package is up to date.\n. It does not work in any case, and I don't see any error messages.\nI found this line in my vim-mode.cson:\n    '$': 'vim-mode:move-to-last-character-of-line'\nSo how do I run that command in the console? I am not very famililar with js, or coffeescript.\n. Typing in the console seems to work. I guess `$` might be overridden by another package? How can I list which keys are mapped to which commands?\n. These are the ones I have.\n'.vim-mode.visual-mode:not(.mini)':\n  '$': 'vim-mode:move-to-last-character-of-line'\n'.vim-mode.command-mode:not(.mini)':\n  '$': 'vim-mode:move-to-last-character-of-line'\nI will try to remove and reinstall the package now.\nEdit: Reinstalling didn't work\n. Curious, I uninstalled package, cloned the repository into packages. Now it is stuck in insert mode. I cannot esc out of it. But when I search for `$` in keybindings, now it shows only one entry. I removed the git version, installed the apm version again, and I am where I started.\n\nOther details that might be of interest: I use Arch Linux, installed atom-editory from the AUR. Atom is version 0.9.4, so the latest one I guess.\n. Yes, I now realize `^`, `<`, `>` also do not work. So the issue is not related to vim-mode.\n. I use US layout. I have version 0.98 now. It still does not work\nOn May 25, 2014 9:53 PM, \"Ben Lavender\" notifications@github.com wrote:\n\n> @colinkeenan https://github.com/colinkeenan @nrshttps://github.com/nrs,\n> there appear to be issues in atom-core with international keyboard layouts.\n> Are either/both of you using a layout other than English (US)?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/228#issuecomment-44143862\n> .\n. {} and $ work, [] and () do not. I have atom 0.205.0 and vim-mode 0.53.0.\n\nOn Thu, May 21, 2015 at 11:12 AM Scott Bronson notifications@github.com\nwrote:\n\n> @hos https://github.com/hos, just curious, does it work now?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/228#issuecomment-104189577.\n. Yeah `$` does not work for me. How can I debug it? I think my package is up to date.\n. It does not work in any case, and I don't see any error messages.\nI found this line in my vim-mode.cson:\n    '$': 'vim-mode:move-to-last-character-of-line'\nSo how do I run that command in the console? I am not very famililar with js, or coffeescript.\n. Typing in the console seems to work. I guess `$` might be overridden by another package? How can I list which keys are mapped to which commands?\n. These are the ones I have.\n'.vim-mode.visual-mode:not(.mini)':\n  '$': 'vim-mode:move-to-last-character-of-line'\n'.vim-mode.command-mode:not(.mini)':\n  '$': 'vim-mode:move-to-last-character-of-line'\nI will try to remove and reinstall the package now.\nEdit: Reinstalling didn't work\n. Curious, I uninstalled package, cloned the repository into packages. Now it is stuck in insert mode. I cannot esc out of it. But when I search for `$` in keybindings, now it shows only one entry. I removed the git version, installed the apm version again, and I am where I started.\n\nOther details that might be of interest: I use Arch Linux, installed atom-editory from the AUR. Atom is version 0.9.4, so the latest one I guess.\n. Yes, I now realize `^`, `<`, `>` also do not work. So the issue is not related to vim-mode.\n. I use US layout. I have version 0.98 now. It still does not work\nOn May 25, 2014 9:53 PM, \"Ben Lavender\" notifications@github.com wrote:\n\n> @colinkeenan https://github.com/colinkeenan @nrshttps://github.com/nrs,\n> there appear to be issues in atom-core with international keyboard layouts.\n> Are either/both of you using a layout other than English (US)?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/228#issuecomment-44143862\n> .\n. {} and $ work, [] and () do not. I have atom 0.205.0 and vim-mode 0.53.0.\n\nOn Thu, May 21, 2015 at 11:12 AM Scott Bronson notifications@github.com\nwrote:\n\n> @hos https://github.com/hos, just curious, does it work now?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/228#issuecomment-104189577.\n. ",
    "casimir": "By any chance do you plan to support the [% key](http://vim.wikia.com/wiki/Moving_to_matching_braces) and [tag blocks](http://vimdoc.sourceforge.net/htmldoc/motion.html#tag-blocks)?\n\nI have almost zero experience in coffee script and not much in atom API, would it be envisageable regarding the possibilities of the edition API?\n\nedit: I just saw that was disscussed here #141.\n. Actually `<C-E>` exists in Vim but for a completely different thing ([see help here](http://vimdoc.sourceforge.net/htmldoc/scroll.html#CTRL-E)). Not that `<C-Y>` is also the opposite.\n. By any chance do you plan to support the [% key](http://vim.wikia.com/wiki/Moving_to_matching_braces) and [tag blocks](http://vimdoc.sourceforge.net/htmldoc/motion.html#tag-blocks)?\n\nI have almost zero experience in coffee script and not much in atom API, would it be envisageable regarding the possibilities of the edition API?\n\nedit: I just saw that was disscussed here #141.\n. Actually `<C-E>` exists in Vim but for a completely different thing ([see help here](http://vimdoc.sourceforge.net/htmldoc/scroll.html#CTRL-E)). Not that `<C-Y>` is also the opposite.\n. ",
    "tonatiuh": "Excellent. I hope to see this functionality integrated soon.\n. Sorry, I didn't see it was already created. Btw thanks for the hard work on this package, it's really helpful.\n. Just as an addition: the bug stays present after you move to other line by using \"j\" or \"k\" and if you attempt to use \"x\" it doesn't work either (because of the wrong column position)\n. +1\n. You should check https://github.com/atom/vim-mode/issues/50 (this a dupe of it)\n. After updating, it\u2019s fixed for me.\n--\u00a0\nTonatiuh N\u00fa\u00f1ez\n\nOn May 23, 2014 at 2:06:01 PM, Ben Lavender (notifications@github.com) wrote:\n\nWhat is your keyboard layout?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. +1 for this.\n. Excellent. I hope to see this functionality integrated soon.\n. Sorry, I didn't see it was already created. Btw thanks for the hard work on this package, it's really helpful.\n. Just as an addition: the bug stays present after you move to other line by using \"j\" or \"k\" and if you attempt to use \"x\" it doesn't work either (because of the wrong column position)\n. +1\n. You should check https://github.com/atom/vim-mode/issues/50 (this a dupe of it)\n. After updating, it\u2019s fixed for me.\n--\u00a0\nTonatiuh N\u00fa\u00f1ez\n\nOn May 23, 2014 at 2:06:01 PM, Ben Lavender (notifications@github.com) wrote:\n\nWhat is your keyboard layout?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. +1 for this.\n. ",
    "floatingatoll": "OS X, 0.94.0. Completely bog standard defaults, except for the vim plugin.\n- R.\n\nOn Mon, May 12, 2014 at 2:45 PM, Ben Lavender notifications@github.comwrote:\n\n> Having trouble reproducing. Are you on Linux?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/230#issuecomment-42892558\n> .\n. OS X, 0.94.0. Completely bog standard defaults, except for the vim plugin.\n- R.\n\nOn Mon, May 12, 2014 at 2:45 PM, Ben Lavender notifications@github.comwrote:\n\n> Having trouble reproducing. Are you on Linux?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/atom/vim-mode/issues/230#issuecomment-42892558\n> .\n. ",
    "Industrial": "I'm getting the same behaviour as op. I have the same binds as you are showing, but the cursor is moving twice in each direction (HJKL).\n. Vim does it with CTRL+N/P\n\nI don't see how this conflicts with cursor moving, since that is regular HJKL\n. I would think that enabling vim mode would disable this other functionality :S\n\nI'm not sure I would want a mixture of behaviour of different other editors into one new editor\n. Thanks!\n\nOn Thu, Jan 8, 2015 at 6:08 AM, Max Brunsfeld notifications@github.com\nwrote:\n\n> Closed #415 https://github.com/atom/vim-mode/issues/415.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/415#event-215716851.\n. I am also having this issue, however it doesn't get triggered on save but rather when I focus another window and go back to atom the block cursor disappears. Clicking with the mouse in the document makes it appear again.\n. Right now ctrl+f is next page in vim-mode, so the atom search is not\ndirectly accessible with the keyboard. I'm also wondering if it's possible\nto operate the atom search window with the keyboard entirely.\n\nOn Tue, Jan 20, 2015, 19:59 Max Brunsfeld notifications@github.com wrote:\n\n> Almost all of the Find and Replace package's functionality is\n> controllable via the keyboard. If you hover with your mouse over the\n> buttons on the panel, it will show you the keyboard shortcuts. Do you mean\n> that you would want vim-mode to add additional key-bindings for these\n> actions to make them work like vim?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/490#issuecomment-70710918.\n. I'm getting the same behaviour as op. I have the same binds as you are showing, but the cursor is moving twice in each direction (HJKL).\n. Vim does it with CTRL+N/P\n\nI don't see how this conflicts with cursor moving, since that is regular HJKL\n. I would think that enabling vim mode would disable this other functionality :S\n\nI'm not sure I would want a mixture of behaviour of different other editors into one new editor\n. Thanks!\n\nOn Thu, Jan 8, 2015 at 6:08 AM, Max Brunsfeld notifications@github.com\nwrote:\n\n> Closed #415 https://github.com/atom/vim-mode/issues/415.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/415#event-215716851.\n. I am also having this issue, however it doesn't get triggered on save but rather when I focus another window and go back to atom the block cursor disappears. Clicking with the mouse in the document makes it appear again.\n. Right now ctrl+f is next page in vim-mode, so the atom search is not\ndirectly accessible with the keyboard. I'm also wondering if it's possible\nto operate the atom search window with the keyboard entirely.\n\nOn Tue, Jan 20, 2015, 19:59 Max Brunsfeld notifications@github.com wrote:\n\n> Almost all of the Find and Replace package's functionality is\n> controllable via the keyboard. If you hover with your mouse over the\n> buttons on the panel, it will show you the keyboard shortcuts. Do you mean\n> that you would want vim-mode to add additional key-bindings for these\n> actions to make them work like vim?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/490#issuecomment-70710918.\n. ",
    "bencaron": "Confirmed on OSX: restarting Atom fix it. Uninstalling/reinstalling vim-mode bring the behaviour back.\n\nMy keybindings look just like bhuga's:\n\n![capture decran 2014-05-13 a 10 43 44](https://cloud.githubusercontent.com/assets/157659/2958815/0a5dc3ee-daad-11e3-9010-382a6df0058f.png)\n. Simply disabling/re-enabling vim-mode is enough to re-trigger the problem, no uninstall/reinstall necessary.\n\nRestarting fix it.\n\nDisabling, restarting Atom, then enabling does not trigger the problem.\n. Confirmed on OSX: restarting Atom fix it. Uninstalling/reinstalling vim-mode bring the behaviour back.\n\nMy keybindings look just like bhuga's:\n\n![capture decran 2014-05-13 a 10 43 44](https://cloud.githubusercontent.com/assets/157659/2958815/0a5dc3ee-daad-11e3-9010-382a6df0058f.png)\n. Simply disabling/re-enabling vim-mode is enough to re-trigger the problem, no uninstall/reinstall necessary.\n\nRestarting fix it.\n\nDisabling, restarting Atom, then enabling does not trigger the problem.\n. ",
    "joshrendek": ":+1:\n. :+1:\n. ",
    "dark-lbp": "my system is OSX-10.9.2 with atom-0.94.0\uff0cand error vim-mode version 0.9.0\uff0cvim-mode version 0.8.1 didn't cause this problem.\n. ![image](https://cloud.githubusercontent.com/assets/3477662/2965989/627a2070-db04-11e3-96b5-a304da0745c2.png)\n\nwhen i  type right button or l to move cursor right\uff0ci got this error\u3002\n. OS: OSX 10.9.4\nAtom: 0.125.0\nVim Mode:0.14.0\n\nstill get error when i  type right button or l to move cursor right. should i patch some file?\n\nOn 2014\u5e749\u670814\u65e5, at \u4e0a\u53485:34, David L. Goldberg notifications@github.com wrote:\n\n> Please see this PR: #399\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. after patch  'lib/motions/general-motions.coffee\u2019 and 'spec/motions-folds-spec.coffee\u2019, #231 has been fixed.\nOn 2014\u5e749\u670814\u65e5, at \u4e0b\u53481:55, David L. Goldberg notifications@github.com wrote:\n\n> This hasn't been pulled yet, I have a fix, but could use some help finishing the tests.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. yes\uff0ci try your fix and it\u2019s working.\nOn 2014\u5e749\u670815\u65e5, at \u4e0a\u534811:09, David L. Goldberg notifications@github.com wrote:\n\n> Kind of confused. Does that mean you tried it and it's working / fixed now?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. this fix worked for #231, great job. Thank you!\n. my system is OSX-10.9.2 with atom-0.94.0\uff0cand error vim-mode version 0.9.0\uff0cvim-mode version 0.8.1 didn't cause this problem.\n. ![image](https://cloud.githubusercontent.com/assets/3477662/2965989/627a2070-db04-11e3-96b5-a304da0745c2.png)\n\nwhen i  type right button or l to move cursor right\uff0ci got this error\u3002\n. OS: OSX 10.9.4\nAtom: 0.125.0\nVim Mode:0.14.0\n\nstill get error when i  type right button or l to move cursor right. should i patch some file?\n\nOn 2014\u5e749\u670814\u65e5, at \u4e0a\u53485:34, David L. Goldberg notifications@github.com wrote:\n\n> Please see this PR: #399\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. after patch  'lib/motions/general-motions.coffee\u2019 and 'spec/motions-folds-spec.coffee\u2019, #231 has been fixed.\nOn 2014\u5e749\u670814\u65e5, at \u4e0b\u53481:55, David L. Goldberg notifications@github.com wrote:\n\n> This hasn't been pulled yet, I have a fix, but could use some help finishing the tests.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. yes\uff0ci try your fix and it\u2019s working.\nOn 2014\u5e749\u670815\u65e5, at \u4e0a\u534811:09, David L. Goldberg notifications@github.com wrote:\n\n> Kind of confused. Does that mean you tried it and it's working / fixed now?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. this fix worked for #231, great job. Thank you!\n. ",
    "stevenhauser": "Would it make sense to stick with the prefixed names and internally within `$.fn.command` or `View::command` in SpacePen grab the prefix and append it as a namespace? \n\nFor instance, you might have `vim-mode:move-up` but when you `$.fn.command` it, it becomes `vim-mode:move-up.vim-mode`. This way, the prefixing doesn't have to change at all but you also get the benefits of namespacing, especially unbinding all namespaced events. \n. Would it make sense to stick with the prefixed names and internally within `$.fn.command` or `View::command` in SpacePen grab the prefix and append it as a namespace? \n\nFor instance, you might have `vim-mode:move-up` but when you `$.fn.command` it, it becomes `vim-mode:move-up.vim-mode`. This way, the prefixing doesn't have to change at all but you also get the benefits of namespacing, especially unbinding all namespaced events. \n. ",
    "RudyLu": "@abijr, thanks for this fix, just tested #249 and it works great.\n. @abijr, thanks for this fix, just tested #249 and it works great.\n. ",
    "techniq": "@maxbrunsfeld - Doing the steps in the original report are still an issue (make a visual selection, indent, then press `.` to indent again).  If I escape visual mode after indenting, pressing `.` to repeat the indention works.\n. @maxbrunsfeld - I think adding the binding would be right, but others might be better to chime in.\n. I think adhering to Vim's default behavior would be best.  It's been a while since I've used Vim directly (used Sublime with vintage for a while before moving over to Atom).  Although staying in visual mode would allow repeated indenting with `>>` (or back with `<<`), instead of the initial `>>` or `<<` and then repeating the indention with `.`.  If you over indented with repeat, you'd have to restore your selection, and it currenlty looks like `gv` doesn't work with vim-mode to restore the last selection.\n. If adding the `.` binding in visual mode works for others, I say that would\nbe the way to go.\n\nOn Thu Jan 08 2015 at 4:08:09 PM Max Brunsfeld notifications@github.com\nwrote:\n\n> Yeah, I actually like the fact that it stays in visual mode right now;\n> it's kind of convenient. That said, I'm open to changing it to be more like\n> vim if it's the only way to make the repeating use case work.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/246#issuecomment-69249393.\n. @maxbrunsfeld - Doing the steps in the original report are still an issue (make a visual selection, indent, then press `.` to indent again).  If I escape visual mode after indenting, pressing `.` to repeat the indention works.\n. @maxbrunsfeld - I think adding the binding would be right, but others might be better to chime in.\n. I think adhering to Vim's default behavior would be best.  It's been a while since I've used Vim directly (used Sublime with vintage for a while before moving over to Atom).  Although staying in visual mode would allow repeated indenting with `>>` (or back with `<<`), instead of the initial `>>` or `<<` and then repeating the indention with `.`.  If you over indented with repeat, you'd have to restore your selection, and it currenlty looks like `gv` doesn't work with vim-mode to restore the last selection.\n. If adding the `.` binding in visual mode works for others, I say that would\nbe the way to go.\n\nOn Thu Jan 08 2015 at 4:08:09 PM Max Brunsfeld notifications@github.com\nwrote:\n\n> Yeah, I actually like the fact that it stays in visual mode right now;\n> it's kind of convenient. That said, I'm open to changing it to be more like\n> vim if it's the only way to make the repeating use case work.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/246#issuecomment-69249393.\n. ",
    "mdaffin": "Note that Vim's default behaviour for visual indent is to exit visual mode\nstraight away and . then repeats the indent for the number of lines that\nwhere selected starting at the cursor.\n\nOn Thu, 8 Jan 2015 19:04 Sean Lynch notifications@github.com wrote:\n\n> @maxbrunsfeld https://github.com/maxbrunsfeld - I think adding the\n> binding would be right, but others might be better to chime in.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/246#issuecomment-69230466.\n. This also affect shift-V and moving up, the line you are on when you hit shift-V is selected, then when you press up it is unselected press up again and the line above it is selected.\n. Working as expected here, thanks.\natom: 0.168.0 \nvim-mode: 0.25.0\n. Not seeing this in the latest version\n\nAtom: 0.138.0\nVim-mode: 0.15.0\n. I am seeing the same thing, any combination of `c`|`v`|`d`  `i`|`a` `\"`|`(`|`{` don't work. `\"` and `(` seem to just be ignored and `{` seems to delete everything from the cursor to the previous `{` (including the `{` and the rest of the line that `{` is on)\n\nFor example given the following\n\n```\nSome text\n\nSome more text { some other text }\n\nAnd some more\n```\n\nWith the cursor on the `o` in other and you press `di{` you end up with \n\n```\nSome text\nother text }\n\nAnd some more\n```\n\nrather then the expected\n\n```\nSome text\n\nSome more text {}\n\nAnd some more\n```\n\n`di\"` and `di(` seem to just ignore the `i\"` and `i(` so if you type `di\"w` is acts as though you hit `dw`\n. Still does not work here \natom: 0.168.0\nvim-mode: 0.25.0\n\n![snapshot1](https://cloud.githubusercontent.com/assets/171232/5661433/9264ca66-9723-11e4-9220-116e963fee45.png) `vi{` ![snapshot2](https://cloud.githubusercontent.com/assets/171232/5661435/9c639a7e-9723-11e4-8d1c-9e2569316b3c.png)\n\n![dq1](https://cloud.githubusercontent.com/assets/171232/5661436/9c6589e2-9723-11e4-92bc-e96dca2dd202.png) `vi\"` ![dq2](https://cloud.githubusercontent.com/assets/171232/5661434/9c616be6-9723-11e4-9357-6dd68d980e17.png)\n\n![ab1](https://cloud.githubusercontent.com/assets/171232/5661483/275d6e48-9724-11e4-9ce2-b0713ccc51d8.png) `vi<` ![ab2](https://cloud.githubusercontent.com/assets/171232/5661484/27628298-9724-11e4-9de1-b932883f0dc0.png)\n\n![br1](https://cloud.githubusercontent.com/assets/171232/5661513/8fbbf630-9724-11e4-9057-a723fa8c4e2d.png) `vi(` ![br2](https://cloud.githubusercontent.com/assets/171232/5661514/8fbc8fd2-9724-11e4-925a-8df551225448.png)\n\nThese two work as expected:\n![sq1](https://cloud.githubusercontent.com/assets/171232/5661437/9c684bc8-9723-11e4-83fe-6d623f039bb8.png) `vi'` ![sq2](https://cloud.githubusercontent.com/assets/171232/5661438/9c68dac0-9723-11e4-9256-8b5299370382.png)\n\n![sb1](https://cloud.githubusercontent.com/assets/171232/5661570/48a53dbe-9725-11e4-8376-23bd38c6f84e.png) `vi[` ![sb2](https://cloud.githubusercontent.com/assets/171232/5661571/48a98356-9725-11e4-9ca4-10d474df81b3.png)\n\nThe same thing happens for `[cdv][ia]X` but with the given action (ie d deletes the text rather then selecting it)\n\nThe expected output for all of these is to highlight the text within the bracket or quote like in the last two examples.\n. Note that outside characters also do not work ie `va\"` should do the same as `vi\"` but also select the `\"`s: \n\n![out1](https://cloud.githubusercontent.com/assets/171232/5661686/7b926796-9726-11e4-97a4-67491434966a.png) `va\"` actual: ![out2](https://cloud.githubusercontent.com/assets/171232/5661684/7b8e5e9e-9726-11e4-9268-5311ad702cf8.png) expected: ![out3](https://cloud.githubusercontent.com/assets/171232/5661685/7b915540-9726-11e4-8a36-cfe8d1998268.png)\n. The UK layout\n. You are right `v$d` deletes to the end of line including the line ending\nresulting in the line bellow on the current line.\n\nNote this is different from `d$` which does not delete the line ending.\nThis is inconsistent but it is also inconsistent in vim. So atom is showing\nthe correct yet annoying behaviour.\n\nOn Tue, 20 Jan 2015 23:29 Max Brunsfeld notifications@github.com wrote:\n\n> I'm pretty sure that in your screenshot, the selection extends beyond the\n> end of the line. To test this:\n> 1. Open a file with this text\n> \n> line-1\n> line-2\n> line-3\n> 1. Place cursor at the beginning of the line-2\n> 2. Type v $\n> 3. Type d\n> 4. See that the line-break between line-2 and line-3 was deleted,\n>    leaving only two lines.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/491#issuecomment-70756332.\n. This sounds like what we discovered in #403. It is not a bug with vim-mode, but one in atoms keymap see atom/atom-keymap#65 for more details.\n. Note that Vim's default behaviour for visual indent is to exit visual mode\nstraight away and . then repeats the indent for the number of lines that\nwhere selected starting at the cursor.\n\nOn Thu, 8 Jan 2015 19:04 Sean Lynch notifications@github.com wrote:\n\n> @maxbrunsfeld https://github.com/maxbrunsfeld - I think adding the\n> binding would be right, but others might be better to chime in.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/246#issuecomment-69230466.\n. This also affect shift-V and moving up, the line you are on when you hit shift-V is selected, then when you press up it is unselected press up again and the line above it is selected.\n. Working as expected here, thanks.\natom: 0.168.0 \nvim-mode: 0.25.0\n. Not seeing this in the latest version\n\nAtom: 0.138.0\nVim-mode: 0.15.0\n. I am seeing the same thing, any combination of `c`|`v`|`d`  `i`|`a` `\"`|`(`|`{` don't work. `\"` and `(` seem to just be ignored and `{` seems to delete everything from the cursor to the previous `{` (including the `{` and the rest of the line that `{` is on)\n\nFor example given the following\n\n```\nSome text\n\nSome more text { some other text }\n\nAnd some more\n```\n\nWith the cursor on the `o` in other and you press `di{` you end up with \n\n```\nSome text\nother text }\n\nAnd some more\n```\n\nrather then the expected\n\n```\nSome text\n\nSome more text {}\n\nAnd some more\n```\n\n`di\"` and `di(` seem to just ignore the `i\"` and `i(` so if you type `di\"w` is acts as though you hit `dw`\n. Still does not work here \natom: 0.168.0\nvim-mode: 0.25.0\n\n![snapshot1](https://cloud.githubusercontent.com/assets/171232/5661433/9264ca66-9723-11e4-9220-116e963fee45.png) `vi{` ![snapshot2](https://cloud.githubusercontent.com/assets/171232/5661435/9c639a7e-9723-11e4-8d1c-9e2569316b3c.png)\n\n![dq1](https://cloud.githubusercontent.com/assets/171232/5661436/9c6589e2-9723-11e4-92bc-e96dca2dd202.png) `vi\"` ![dq2](https://cloud.githubusercontent.com/assets/171232/5661434/9c616be6-9723-11e4-9357-6dd68d980e17.png)\n\n![ab1](https://cloud.githubusercontent.com/assets/171232/5661483/275d6e48-9724-11e4-9ce2-b0713ccc51d8.png) `vi<` ![ab2](https://cloud.githubusercontent.com/assets/171232/5661484/27628298-9724-11e4-9de1-b932883f0dc0.png)\n\n![br1](https://cloud.githubusercontent.com/assets/171232/5661513/8fbbf630-9724-11e4-9057-a723fa8c4e2d.png) `vi(` ![br2](https://cloud.githubusercontent.com/assets/171232/5661514/8fbc8fd2-9724-11e4-925a-8df551225448.png)\n\nThese two work as expected:\n![sq1](https://cloud.githubusercontent.com/assets/171232/5661437/9c684bc8-9723-11e4-83fe-6d623f039bb8.png) `vi'` ![sq2](https://cloud.githubusercontent.com/assets/171232/5661438/9c68dac0-9723-11e4-9256-8b5299370382.png)\n\n![sb1](https://cloud.githubusercontent.com/assets/171232/5661570/48a53dbe-9725-11e4-8376-23bd38c6f84e.png) `vi[` ![sb2](https://cloud.githubusercontent.com/assets/171232/5661571/48a98356-9725-11e4-9ca4-10d474df81b3.png)\n\nThe same thing happens for `[cdv][ia]X` but with the given action (ie d deletes the text rather then selecting it)\n\nThe expected output for all of these is to highlight the text within the bracket or quote like in the last two examples.\n. Note that outside characters also do not work ie `va\"` should do the same as `vi\"` but also select the `\"`s: \n\n![out1](https://cloud.githubusercontent.com/assets/171232/5661686/7b926796-9726-11e4-97a4-67491434966a.png) `va\"` actual: ![out2](https://cloud.githubusercontent.com/assets/171232/5661684/7b8e5e9e-9726-11e4-9268-5311ad702cf8.png) expected: ![out3](https://cloud.githubusercontent.com/assets/171232/5661685/7b915540-9726-11e4-8a36-cfe8d1998268.png)\n. The UK layout\n. You are right `v$d` deletes to the end of line including the line ending\nresulting in the line bellow on the current line.\n\nNote this is different from `d$` which does not delete the line ending.\nThis is inconsistent but it is also inconsistent in vim. So atom is showing\nthe correct yet annoying behaviour.\n\nOn Tue, 20 Jan 2015 23:29 Max Brunsfeld notifications@github.com wrote:\n\n> I'm pretty sure that in your screenshot, the selection extends beyond the\n> end of the line. To test this:\n> 1. Open a file with this text\n> \n> line-1\n> line-2\n> line-3\n> 1. Place cursor at the beginning of the line-2\n> 2. Type v $\n> 3. Type d\n> 4. See that the line-break between line-2 and line-3 was deleted,\n>    leaving only two lines.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/491#issuecomment-70756332.\n. This sounds like what we discovered in #403. It is not a bug with vim-mode, but one in atoms keymap see atom/atom-keymap#65 for more details.\n. ",
    "flannelhead": "It should be also noted that not adhering to vim's default behaviour here also breaks undoing block operations with 'u'. Steps to reproduce:\n- Mark some lines in visual mode\n- Indent with '>'\n- Press 'u'\n\n'u' is supposed to undo the indentation, which is what it does in vim. Personally, I'd prefer using '.' and 'u' for repeating and undoing operations on visual blocks. Ideally, the behaviour should be configurable as there are clearly two opinions about it.\n. @maxbrunsfeld I'd be happy to do it, I'll hopefully have time for that in the weekend!\n\nOverall, I think the way to go regarding almost any behaviour in vim-mode is to copy vim's default behaviour. If someone wants to change it, they can do it with a little script just as it would be done in vim (and especially those more familiar with JS/CS than Vimscript will be happy).\n. @bronson No problem, thank you for doing it!\n. I think this is because to type '(' the actual keypress is shift + 9 (on a regular US PC keyboard). On my Linux system, shift seems to generate a separate keydown event before the event for the key 9. The only-shift event doesn't match to any binding, so the following '9' with modifier shift gets ignored.\n. The problem is that the 'shift' key alone (before the actual key) generates an event. That interrupts matching the sequence 'i ('. I filed a bug about it to atom-keymap.\n. It should be also noted that not adhering to vim's default behaviour here also breaks undoing block operations with 'u'. Steps to reproduce:\n- Mark some lines in visual mode\n- Indent with '>'\n- Press 'u'\n\n'u' is supposed to undo the indentation, which is what it does in vim. Personally, I'd prefer using '.' and 'u' for repeating and undoing operations on visual blocks. Ideally, the behaviour should be configurable as there are clearly two opinions about it.\n. @maxbrunsfeld I'd be happy to do it, I'll hopefully have time for that in the weekend!\n\nOverall, I think the way to go regarding almost any behaviour in vim-mode is to copy vim's default behaviour. If someone wants to change it, they can do it with a little script just as it would be done in vim (and especially those more familiar with JS/CS than Vimscript will be happy).\n. @bronson No problem, thank you for doing it!\n. I think this is because to type '(' the actual keypress is shift + 9 (on a regular US PC keyboard). On my Linux system, shift seems to generate a separate keydown event before the event for the key 9. The only-shift event doesn't match to any binding, so the following '9' with modifier shift gets ignored.\n. The problem is that the 'shift' key alone (before the actual key) generates an event. That interrupts matching the sequence 'i ('. I filed a bug about it to atom-keymap.\n. ",
    "chibicode": "Adding to what @bronson said, anyone looking to repeat indenting in visual mode can add this their `keymap.cson`:\n\n``` cson\n'atom-text-editor.vim-mode.visual-mode':\n  '>': 'editor:indent-selected-rows'\n  '<': 'editor:outdent-selected-rows'\n```\n. Seems to be worked on at https://github.com/atom/vim-mode/pull/786\n. @maxbrunsfeld thanks! Right, after some testing the only issue I came across w/ soft wrap was this: https://github.com/atom/vim-mode/issues/785\n\nI made a README PR: https://github.com/atom/vim-mode/pull/797/files\n\n> See the atom.workspace.observeActivePaneItem() method.\n\nThanks for the pointer! I'll look into this.\n. @maxbrunsfeld @jacekkopecky I've been following this thread for a while. Thank you for your hard work!\n. Yay! Thank you!\n. Actually, just noting that `Newline Above` fails as well.\n\n```\nAAA\nBBB\n```\n\nIf I run `Newline Above` when the cursor is at any of the `B`'s, then this is the result:\n\n```\nAA\nA\u2190 cursor is here\nBBB\n```\n. Adding to what @bronson said, anyone looking to repeat indenting in visual mode can add this their `keymap.cson`:\n\n``` cson\n'atom-text-editor.vim-mode.visual-mode':\n  '>': 'editor:indent-selected-rows'\n  '<': 'editor:outdent-selected-rows'\n```\n. Seems to be worked on at https://github.com/atom/vim-mode/pull/786\n. @maxbrunsfeld thanks! Right, after some testing the only issue I came across w/ soft wrap was this: https://github.com/atom/vim-mode/issues/785\n\nI made a README PR: https://github.com/atom/vim-mode/pull/797/files\n\n> See the atom.workspace.observeActivePaneItem() method.\n\nThanks for the pointer! I'll look into this.\n. @maxbrunsfeld @jacekkopecky I've been following this thread for a while. Thank you for your hard work!\n. Yay! Thank you!\n. Actually, just noting that `Newline Above` fails as well.\n\n```\nAAA\nBBB\n```\n\nIf I run `Newline Above` when the cursor is at any of the `B`'s, then this is the result:\n\n```\nAA\nA\u2190 cursor is here\nBBB\n```\n. ",
    "edeustace": "+1\n. +1\n. ",
    "thedaniel": "this definitely isn't experimental any more - it even has THIRD PARTY MAINTAINERS! (hat tip @atom/vim-mode-maintainers \n. Thanks for the feature request! I believe this is a duplicate of #50 so I'm closing this one.\n. @maxbrunsfeld do you know if this is specific to vim-mode, or if it's likely to be a general keymap issue?\n. Closing for the same reason as #900 - reopen if you can reproduce with current stable Atom.\n. You're running a version of Atom that's almost a year old. I'm closing this, feel free to open it again if you can reproduce with the latest stable Atom release.\n. Closing, as this is from a very old version of Atom.\n. @damassi can you reproduce with safe mode? You can launch Atom in safe mode with `atom --safe` in the terminal or `Application: Open Safe` in the command panel.\n. Whoops!\n. this definitely isn't experimental any more - it even has THIRD PARTY MAINTAINERS! (hat tip @atom/vim-mode-maintainers \n. Thanks for the feature request! I believe this is a duplicate of #50 so I'm closing this one.\n. @maxbrunsfeld do you know if this is specific to vim-mode, or if it's likely to be a general keymap issue?\n. Closing for the same reason as #900 - reopen if you can reproduce with current stable Atom.\n. You're running a version of Atom that's almost a year old. I'm closing this, feel free to open it again if you can reproduce with the latest stable Atom release.\n. Closing, as this is from a very old version of Atom.\n. @damassi can you reproduce with safe mode? You can launch Atom in safe mode with `atom --safe` in the terminal or `Application: Open Safe` in the command panel.\n. Whoops!\n. ",
    "jasper-fu": "![screen shot 2014-05-17 at 11 04 26 pm](https://cloud.githubusercontent.com/assets/233379/3005221/adabb838-ddd4-11e3-868c-f71210d8b327.png)\n![screen shot 2014-05-17 at 11 05 02 pm](https://cloud.githubusercontent.com/assets/233379/3005222/adb06bda-ddd4-11e3-8851-ea11fbd94438.png)\n\nThis is the latest version,right? The bug is pretty stable, every time I click 'f', it will appear :P\n. After I delete the dir, clone the repo, and go back to atom, the plugin didn't work any more.\n\nThen I uninstall from GUI, and install it again, it works correctly now. Thanks.\n\nBTW, this issue happened on both my Mac mini and Macbook Pro, wondering whether it's an issue exist in Atom upgrading part.\n\nAnyway, thanks for you help. :+1: \n. I have dig it deeper, found this is caused by incompatible with 'Autocomplete Plus', if I install the two packages, it will caused many issues.\n. @calebmeyer I installed vim-mode using the packages too, maxbrunsfeld's solution fixed my issues though.\n. ![screen shot 2014-05-17 at 11 04 26 pm](https://cloud.githubusercontent.com/assets/233379/3005221/adabb838-ddd4-11e3-868c-f71210d8b327.png)\n![screen shot 2014-05-17 at 11 05 02 pm](https://cloud.githubusercontent.com/assets/233379/3005222/adb06bda-ddd4-11e3-8851-ea11fbd94438.png)\n\nThis is the latest version,right? The bug is pretty stable, every time I click 'f', it will appear :P\n. After I delete the dir, clone the repo, and go back to atom, the plugin didn't work any more.\n\nThen I uninstall from GUI, and install it again, it works correctly now. Thanks.\n\nBTW, this issue happened on both my Mac mini and Macbook Pro, wondering whether it's an issue exist in Atom upgrading part.\n\nAnyway, thanks for you help. :+1: \n. I have dig it deeper, found this is caused by incompatible with 'Autocomplete Plus', if I install the two packages, it will caused many issues.\n. @calebmeyer I installed vim-mode using the packages too, maxbrunsfeld's solution fixed my issues though.\n. ",
    "rstacruz": "this happens to me too, even without autocomplete-plus.\n\n```\n/Users/rsc/.atom/packages (13)\n\u251c\u2500\u2500 Zen@0.8.0\n\u251c\u2500\u2500 atom-color-highlight@2.0.4\n\u251c\u2500\u2500 editorconfig@0.2.0\n\u251c\u2500\u2500 emmet@2.1.3\n\u251c\u2500\u2500 file-type-icons@0.5.1\n\u251c\u2500\u2500 fizzy@0.15.0\n\u251c\u2500\u2500 git-grep@0.7.0\n\u251c\u2500\u2500 language-haml@0.10.0\n\u251c\u2500\u2500 monokai@0.8.0\n\u251c\u2500\u2500 unity-ui@1.0.1\n\u251c\u2500\u2500 vim-mode@0.15.0\n\u251c\u2500\u2500 web-view@0.3.0\n\u2514\u2500\u2500 zentabs@0.6.0\n```\n. this happens to me too, even without autocomplete-plus.\n\n```\n/Users/rsc/.atom/packages (13)\n\u251c\u2500\u2500 Zen@0.8.0\n\u251c\u2500\u2500 atom-color-highlight@2.0.4\n\u251c\u2500\u2500 editorconfig@0.2.0\n\u251c\u2500\u2500 emmet@2.1.3\n\u251c\u2500\u2500 file-type-icons@0.5.1\n\u251c\u2500\u2500 fizzy@0.15.0\n\u251c\u2500\u2500 git-grep@0.7.0\n\u251c\u2500\u2500 language-haml@0.10.0\n\u251c\u2500\u2500 monokai@0.8.0\n\u251c\u2500\u2500 unity-ui@1.0.1\n\u251c\u2500\u2500 vim-mode@0.15.0\n\u251c\u2500\u2500 web-view@0.3.0\n\u2514\u2500\u2500 zentabs@0.6.0\n```\n. ",
    "LudwikJaniuk": "Two years later, i'm having the same issue. Note that I'm on a sweish keyboard, so ($) is done by pressing (alt-4) if that's relevant. I tried disabling that defualt keybinging but it did not help. Pls fix.\n. Oh this is interesting. vim-mode-plus seems to be interpreting shift-4 as ($), and then is works. But this is not how I type ($)!\n. A solution for anyone who finds this in the future: install the [keyboard-localization](https://atom.io/packages/keyboard-localization) package. Fixed my problem completely. So this is all probably not vim-mode's fault.\n. Two years later, i'm having the same issue. Note that I'm on a sweish keyboard, so ($) is done by pressing (alt-4) if that's relevant. I tried disabling that defualt keybinging but it did not help. Pls fix.\n. Oh this is interesting. vim-mode-plus seems to be interpreting shift-4 as ($), and then is works. But this is not how I type ($)!\n. A solution for anyone who finds this in the future: install the [keyboard-localization](https://atom.io/packages/keyboard-localization) package. Fixed my problem completely. So this is all probably not vim-mode's fault.\n. ",
    "mcnicholls": "That does fix it for me.\nJust wondering what the long term fix will be for Windows users who aren't aware of this.\n. Sure.\n\nDo you think all the vim-mode commands be prefixed with `.workspace .editor.vim-mode`?\n. Damn. Totally forgot to run the tests :-(\n\nWill take a look when I get a moment.\n. I seem to get the same result running the tests on the commit before mine.\n\nDo the tests definitely pass correctly on master?\n. Tests run fine for me on master now, but fail after rebasing this branch on master.\n\nIs there any easy way to trigger a breakpoint in the tests so that I can try to work out what the problem is?\nI can set a breakpoint, but I need the dev tools to open as soon as the test suite opens so it will catch the breakpoint.\n. Sorry all, been away for the week.\n\n@badunk I tried that, but since the debugger isn't open initially it doesn't break.\n. Sorry, I'm not too sure what has happened with the commits here.\n\nLet me start this branch fresh and get the change in one clean commit.\n. That does fix it for me.\nJust wondering what the long term fix will be for Windows users who aren't aware of this.\n. Sure.\n\nDo you think all the vim-mode commands be prefixed with `.workspace .editor.vim-mode`?\n. Damn. Totally forgot to run the tests :-(\n\nWill take a look when I get a moment.\n. I seem to get the same result running the tests on the commit before mine.\n\nDo the tests definitely pass correctly on master?\n. Tests run fine for me on master now, but fail after rebasing this branch on master.\n\nIs there any easy way to trigger a breakpoint in the tests so that I can try to work out what the problem is?\nI can set a breakpoint, but I need the dev tools to open as soon as the test suite opens so it will catch the breakpoint.\n. Sorry all, been away for the week.\n\n@badunk I tried that, but since the debugger isn't open initially it doesn't break.\n. Sorry, I'm not too sure what has happened with the commits here.\n\nLet me start this branch fresh and get the change in one clean commit.\n. ",
    "dukedave": "I just installed Atom today for the first time, on Ubuntu, and I am having a similar issue:\n\n![selection_214](https://cloud.githubusercontent.com/assets/48232/14512701/32b3438e-0196-11e6-8b75-d6f7671767e7.png)\n\nCan someone confirm that these are related, before I open another issue? \n. I just installed Atom today for the first time, on Ubuntu, and I am having a similar issue:\n\n![selection_214](https://cloud.githubusercontent.com/assets/48232/14512701/32b3438e-0196-11e6-8b75-d6f7671767e7.png)\n\nCan someone confirm that these are related, before I open another issue? \n. ",
    "gambledor": "Doing as you suggest doesn't resolve the issue.\n. I'm sorry but I've upgraded Atom to 0.99.0 and this exception still happens.\n. Doing as you suggest doesn't resolve the issue.\n. I'm sorry but I've upgraded Atom to 0.99.0 and this exception still happens.\n. ",
    "badabam": "Same problem with same error message here! It still works, though. Is there a way to disable opening the console on error?\n. Same problem with same error message here! It still works, though. Is there a way to disable opening the console on error?\n. ",
    "irrationalistic": "Amazing! Thank you. I'm new to atom, so all these cool tricks are great to see.\n. Hey, thought I'd link to this other package that seems to be pretty close to this feature. Not sure if there's any collaboration that can happen! https://github.com/k-yamada/block-selection-mode\n. Bummer! That's pretty close though. Will have to disable it in some cases. Would love to see the styles you have if you have a chance!\n. That's great, thanks! Would be cool to put this into a plugin that could adjust the color of the cursor to match the syntax theme.\n. I'm not sure why the travis build errored out! All the tests passed when I ran them in-editor. Any thoughts?\n. I should also note that this implementation doesn't use ctags unlike the built-in \"go to declaration\"!\n. Thanks! Fixed!\n. Yeah, technically this is `gD`! I think the ideal would be to allow certain languages to register what scope looks like so that vim-mode knows where certain components can be found. Or we could just build out a set of pre-determined language scopes, which would lead into `[[` and `gd`. Does that seem doable?\n. I was actually going to work on some of the bracket motions next. Would love some thoughts on ideal implementation!\n. I actually explored grammars pretty heavily when i created the tasks plugin, but for the most part there isn't any normalization! You can name things whatever you want and class things however you like. We might be able to make use of indentation (which i believe is how the folds are detected), but that's about all we can rely on.\n\nI can agree with removing the `gd` keybinding and just merging in the bit that works! I'll add another commit to clear the binding out for now.\n. I found this bit from the atom [goto](https://github.com/v3ss0n/goto) package  [goto symbol generator](https://github.com/v3ss0n/goto/blob/master/lib/symbol-generator.coffee#L7) that essentially uses a big ol' list of grammar scope-name matches. This is another option, but still requires vim-mode to keep track of all the languages.\n. I'm not familiar with nroff! Hopefully that means I already ignore it :)\n\nEventually it would be nice to support languages like coffeescript or python where {} are hard to come by.\n. Totally with you! That makes complete sense. I think it makes sense to have additional packages that augment the core, but since vim-mode is essentially vim in atom, and if vim doesn't have the functionality, there's no need to interrupt the \"native\" experience.\n. Done! Thanks! Going to start exploring gd and the other bracket-style motions too.\n. I made some big changes to this pull request to re-use more code. I'm going to try to rebase it with the current code to fix up the conflicts.\n. Alright! Should be back on track :)\n. Awesome!\n. I imagine that would be doable. Probably move it into a base class or utilities somewhere? I'll take a look.\n. I've refactored it into the utils file. It can be used from any component now and supports any cursor(s) and word regular expressions!\n. That'd be awesome, thanks! I tried to get some stuff working, but no go. The problem is that it needs to have an actual file loaded since the relative path testing needs to be relative to the loaded file. Any thoughts you have would be great!\n. Further exploration, the same action using `v` instead does include the inclusive character: `v %` then hitting `d` will delete inclusively.\n. No worries! Haven't had time to work on it anyways! Thanks for catching it.\n. Amazing! Thank you. I'm new to atom, so all these cool tricks are great to see.\n. Hey, thought I'd link to this other package that seems to be pretty close to this feature. Not sure if there's any collaboration that can happen! https://github.com/k-yamada/block-selection-mode\n. Bummer! That's pretty close though. Will have to disable it in some cases. Would love to see the styles you have if you have a chance!\n. That's great, thanks! Would be cool to put this into a plugin that could adjust the color of the cursor to match the syntax theme.\n. I'm not sure why the travis build errored out! All the tests passed when I ran them in-editor. Any thoughts?\n. I should also note that this implementation doesn't use ctags unlike the built-in \"go to declaration\"!\n. Thanks! Fixed!\n. Yeah, technically this is `gD`! I think the ideal would be to allow certain languages to register what scope looks like so that vim-mode knows where certain components can be found. Or we could just build out a set of pre-determined language scopes, which would lead into `[[` and `gd`. Does that seem doable?\n. I was actually going to work on some of the bracket motions next. Would love some thoughts on ideal implementation!\n. I actually explored grammars pretty heavily when i created the tasks plugin, but for the most part there isn't any normalization! You can name things whatever you want and class things however you like. We might be able to make use of indentation (which i believe is how the folds are detected), but that's about all we can rely on.\n\nI can agree with removing the `gd` keybinding and just merging in the bit that works! I'll add another commit to clear the binding out for now.\n. I found this bit from the atom [goto](https://github.com/v3ss0n/goto) package  [goto symbol generator](https://github.com/v3ss0n/goto/blob/master/lib/symbol-generator.coffee#L7) that essentially uses a big ol' list of grammar scope-name matches. This is another option, but still requires vim-mode to keep track of all the languages.\n. I'm not familiar with nroff! Hopefully that means I already ignore it :)\n\nEventually it would be nice to support languages like coffeescript or python where {} are hard to come by.\n. Totally with you! That makes complete sense. I think it makes sense to have additional packages that augment the core, but since vim-mode is essentially vim in atom, and if vim doesn't have the functionality, there's no need to interrupt the \"native\" experience.\n. Done! Thanks! Going to start exploring gd and the other bracket-style motions too.\n. I made some big changes to this pull request to re-use more code. I'm going to try to rebase it with the current code to fix up the conflicts.\n. Alright! Should be back on track :)\n. Awesome!\n. I imagine that would be doable. Probably move it into a base class or utilities somewhere? I'll take a look.\n. I've refactored it into the utils file. It can be used from any component now and supports any cursor(s) and word regular expressions!\n. That'd be awesome, thanks! I tried to get some stuff working, but no go. The problem is that it needs to have an actual file loaded since the relative path testing needs to be relative to the loaded file. Any thoughts you have would be great!\n. Further exploration, the same action using `v` instead does include the inclusive character: `v %` then hitting `d` will delete inclusively.\n. No worries! Haven't had time to work on it anyways! Thanks for catching it.\n. ",
    "cbeams": "From https://github.com/atom/vim-mode/pull/272#issuecomment-44142973, **emphasis** mine:\n\n> This is an improvement for characterwise selection, so I'm going to go ahead and merge it. **Looks like we still have issues on linewise (V)**, but those issues are probably because it's broken for the simple case of up-down.\n\nIndeed. Is there already an issue open for this? I didn't see it. Anyway, here's my repro steps around visual mode and motion commands:\n\nUsing Atom 0.103.0 and Vim Mode 0.10.1, I am still unable to use select visually in conjunction with a motion command such as 'G'.\n\nRepro:\n1. In a multiline file, go to the beginning of the first line\n2. Press shift-v to enter visual selection mode\n3. Press 'G' with the intention of visually selecting everything up until the end of the file\n4. Notice that the cursor simply moves one line down, continuing to keep the line above it selected.\n\nWorkaround:\n1. Enter visual selection mode and press 'j' until the end of the file; impractical for anything other than short files.\n2. Enter insert mode and select lines as one would do in the absence of vim-style functionality, e.g. with arrow keys, mouse plus shift-selecting, etc.\n\nNote also that other motion commands fail in conjunction with visual selection mode, e.g. ctrl-d, ctrl-f.\n. Thanks for the quick response. I hadn't noticed the mention of this issue in the README. It's good to know that soft wraps are actually the source of the problem. I suppose that hard wraps in conjunction with the [wrap lines](https://atom.io/packages/wrap-lines) plugin may be a serviceable workaround in the meantime.\n\nI do hope something can be worked out here, however, as hard wraps are non-ideal, especially for prose.\n. From https://github.com/atom/vim-mode/pull/272#issuecomment-44142973, **emphasis** mine:\n\n> This is an improvement for characterwise selection, so I'm going to go ahead and merge it. **Looks like we still have issues on linewise (V)**, but those issues are probably because it's broken for the simple case of up-down.\n\nIndeed. Is there already an issue open for this? I didn't see it. Anyway, here's my repro steps around visual mode and motion commands:\n\nUsing Atom 0.103.0 and Vim Mode 0.10.1, I am still unable to use select visually in conjunction with a motion command such as 'G'.\n\nRepro:\n1. In a multiline file, go to the beginning of the first line\n2. Press shift-v to enter visual selection mode\n3. Press 'G' with the intention of visually selecting everything up until the end of the file\n4. Notice that the cursor simply moves one line down, continuing to keep the line above it selected.\n\nWorkaround:\n1. Enter visual selection mode and press 'j' until the end of the file; impractical for anything other than short files.\n2. Enter insert mode and select lines as one would do in the absence of vim-style functionality, e.g. with arrow keys, mouse plus shift-selecting, etc.\n\nNote also that other motion commands fail in conjunction with visual selection mode, e.g. ctrl-d, ctrl-f.\n. Thanks for the quick response. I hadn't noticed the mention of this issue in the README. It's good to know that soft wraps are actually the source of the problem. I suppose that hard wraps in conjunction with the [wrap lines](https://atom.io/packages/wrap-lines) plugin may be a serviceable workaround in the meantime.\n\nI do hope something can be worked out here, however, as hard wraps are non-ideal, especially for prose.\n. ",
    "erwinmombay": "i think the more underlying problem is that when you enter visual (characterwise) mode, it does not select the current character under the cursor. For example: you have to press `v` then press `e` twice if you are at the end of a word to select that character up to the end of the next word. This is not the behavior in vim where pressing `v` selects the char under the cursor and pressing the next `e` selects that character up to the end of the next word (meaning you only had to press `e` once after visual mode to get to the end of the next word from the end of another word).\n. this seems to be related to https://github.com/atom/vim-mode/issues/261.\n. ive got a solution for it but it needs ALOT of tests (and fix a couple of broken ones too).\n![](https://i.imgflip.com/95nkd.gif)\n. @bhuga completely agree. feel free to close this one out.\n. ugh, this change also breaks going backwards then going forward afterwards. (since we've moved the cursor). closing this out until i can figure how to fix both problems (going forward then back and selecting the item under cursor when starting visual mode).\n. related to https://github.com/atom/vim-mode/pull/275 #272 \n. nevermind, forgot to test this in \"vim -u NONE\" this feature isn't in vim by default. closing this out.\n. ![](http://content.screencast.com/users/erwinm9/folders/Jing/media/99079d16-0776-4dfd-bc86-6c28dc6cb275/00000193.png)\n. @bhuga agreed. they were pretty redundant lol. removed. thanks!\n. @bhuga rebased and tests are still all green :+1: \n. really weird that a build didnt run earlier. reran travis ci build\n. @bhuga thanks for the update. ill take a look and will get back with a fix!\n. i think the more underlying problem is that when you enter visual (characterwise) mode, it does not select the current character under the cursor. For example: you have to press `v` then press `e` twice if you are at the end of a word to select that character up to the end of the next word. This is not the behavior in vim where pressing `v` selects the char under the cursor and pressing the next `e` selects that character up to the end of the next word (meaning you only had to press `e` once after visual mode to get to the end of the next word from the end of another word).\n. this seems to be related to https://github.com/atom/vim-mode/issues/261.\n. ive got a solution for it but it needs ALOT of tests (and fix a couple of broken ones too).\n![](https://i.imgflip.com/95nkd.gif)\n. @bhuga completely agree. feel free to close this one out.\n. ugh, this change also breaks going backwards then going forward afterwards. (since we've moved the cursor). closing this out until i can figure how to fix both problems (going forward then back and selecting the item under cursor when starting visual mode).\n. related to https://github.com/atom/vim-mode/pull/275 #272 \n. nevermind, forgot to test this in \"vim -u NONE\" this feature isn't in vim by default. closing this out.\n. ![](http://content.screencast.com/users/erwinm9/folders/Jing/media/99079d16-0776-4dfd-bc86-6c28dc6cb275/00000193.png)\n. @bhuga agreed. they were pretty redundant lol. removed. thanks!\n. @bhuga rebased and tests are still all green :+1: \n. really weird that a build didnt run earlier. reran travis ci build\n. @bhuga thanks for the update. ill take a look and will get back with a fix!\n. ",
    "monokrome": "Does this fix an issue I've found where `ggVG` doesn't select the top line as well, or is that separate logic?\n. To simplify this a bit, the issue is that the `o` operator overwrites yanked buffer contents. You can simply paste anything and use o afterward to see the yank buffer being cleared.\n\nFor instance, you can paste 2 extra line copies with this:\n\n```\ndd3p\n```\n\nThen add a new line:\n\n```\no<ESC>\n```\n\nNow paste again:\n\n```\np\n```\n\nAny use of `o` is overwriting the default yank buffer's contents.\n. This seems to be due to vim-mode not having support for block selection, so the behavior from regular visual mode is being used. \n. @jasonong Sure, but the behavior seems to indicate otherwise.\n. Thanks for looking into this.\n\nI feel like these types of basic concerns are essential to the Vim experience, and are an expectation for a lot of common tasks performed by Vim users. Forgetting things like this would be a big let down for me, but writing a custom undo/redo system seems a bit messy.\n\nI wonder if Atom should (or maybe already does?) expose more flexible APIs for configuring the behavior of the undo/redo system?\n. @jacekkopecky Thanks for looking into this. It looks like this was fixed recently along with another issue. I'll close the issue for now. Thanks! :)\n. Does this fix an issue I've found where `ggVG` doesn't select the top line as well, or is that separate logic?\n. To simplify this a bit, the issue is that the `o` operator overwrites yanked buffer contents. You can simply paste anything and use o afterward to see the yank buffer being cleared.\n\nFor instance, you can paste 2 extra line copies with this:\n\n```\ndd3p\n```\n\nThen add a new line:\n\n```\no<ESC>\n```\n\nNow paste again:\n\n```\np\n```\n\nAny use of `o` is overwriting the default yank buffer's contents.\n. This seems to be due to vim-mode not having support for block selection, so the behavior from regular visual mode is being used. \n. @jasonong Sure, but the behavior seems to indicate otherwise.\n. Thanks for looking into this.\n\nI feel like these types of basic concerns are essential to the Vim experience, and are an expectation for a lot of common tasks performed by Vim users. Forgetting things like this would be a big let down for me, but writing a custom undo/redo system seems a bit messy.\n\nI wonder if Atom should (or maybe already does?) expose more flexible APIs for configuring the behavior of the undo/redo system?\n. @jacekkopecky Thanks for looking into this. It looks like this was fixed recently along with another issue. I'll close the issue for now. Thanks! :)\n. ",
    "chrissexton": "@erwinmombay Did your fix turn out to have serious issues? Any status on a PR?\n. FWIW: I've implemented a new command in my init script called 'vim-mode-ext:wq' which saves and closes the buffer. I then bound ':' to the command palette. Easy access to my command palette and 'wq' matches the correct command (for now).\n. Sure, try this out: https://gist.github.com/chrissexton/a1926159b304254d837f\n\nI'll note that it doesn't really solve `:w` unless your command palette has your extension at the top of its list for all things that start with w. `wq` seems to be pretty uncommon so it works well there.\n. @erwinmombay Did your fix turn out to have serious issues? Any status on a PR?\n. FWIW: I've implemented a new command in my init script called 'vim-mode-ext:wq' which saves and closes the buffer. I then bound ':' to the command palette. Easy access to my command palette and 'wq' matches the correct command (for now).\n. Sure, try this out: https://gist.github.com/chrissexton/a1926159b304254d837f\n\nI'll note that it doesn't really solve `:w` unless your command palette has your extension at the top of its list for all things that start with w. `wq` seems to be pretty uncommon so it works well there.\n. ",
    "roryokane": "I added tests, and found that my new tests fail. But the failure is mainly due to `Motions.MoveUp` that I call, not something I wrote. The `j` and `k` keybindings are currently not tested well enough to detect a certain bug in them, but my test for `-` is detecting that bug. Though I think after `j` and `k` are fixed, the cursor will still be in the wrong column in some cases with my implementation of `-` and `+`.\n\nThe problem with `j` and `k` is that they fail to select linewise. For example, with `\"1-a\\n2-b\\n3-c\\n4-d\\n5-e\\n\"` and the cursor position `[2, 1]`, `dk` should result in the text `\"1-a\\n4-d\\n5-e\\n\"` and the cursor position `[1, 1]`, but instead results in the text `\"1-a\\n2-c\\n4-d\\n5-e\\n\"` and the cursor position `[1, 1]`. (That would be a good test for someone to add for `k`.)\n\nWhat should I do about these failing tests that rely on the fixing of a different part of the plugin that I don\u2019t want to bother with now? Do you have a rule that failing tests, even accurate ones that suggest future work, can\u2019t be committed? Should I comment the tests out with `xdescribe` and write a comment \u201cFIXME re-enable these tests after \u2018j\u2019 and \u2018k\u2019 work properly\u201d?\n. I have used `xdescribe` to comment out the tests that are failing due to the implementation of another operator, while still keeping the many new tests that do work. My justification, as I wrote it in the commit message:\n\n> I don\u2019t want to delete these [failing] tests because they will be useful to have when `k` (and correspondingly `j`) is fixed. Otherwise, they would have to be rewritten at that time, or they would not get written and `-` and `+` would not be as well-tested.\n> \n> The comments explaining why these tests are commented out and saying when they can be re-enabled should protect these tests from being left disabled when they shouldn\u2019t be.\n\nI have also merged from the latest master commit so that this pull request can be merged without conflicts. This is now ready to be merged.\n. I have added tests for `+`, as requested. _Edit:_ and also some tests for <kbd>Enter</kbd>, just in case.\n\nBy the way, I tried the commented-out tests again, after noticing that the behavior of `j` and `k` has changed. The commented-out tests still fail, but not as badly. The cursor column is still wrong, but the cursor row and the text in the editor are now correct.\n. > Can we pare the `xdescribe`s down to just a few commented-out assertions, then?\n\nDone.\n. I added tests, and found that my new tests fail. But the failure is mainly due to `Motions.MoveUp` that I call, not something I wrote. The `j` and `k` keybindings are currently not tested well enough to detect a certain bug in them, but my test for `-` is detecting that bug. Though I think after `j` and `k` are fixed, the cursor will still be in the wrong column in some cases with my implementation of `-` and `+`.\n\nThe problem with `j` and `k` is that they fail to select linewise. For example, with `\"1-a\\n2-b\\n3-c\\n4-d\\n5-e\\n\"` and the cursor position `[2, 1]`, `dk` should result in the text `\"1-a\\n4-d\\n5-e\\n\"` and the cursor position `[1, 1]`, but instead results in the text `\"1-a\\n2-c\\n4-d\\n5-e\\n\"` and the cursor position `[1, 1]`. (That would be a good test for someone to add for `k`.)\n\nWhat should I do about these failing tests that rely on the fixing of a different part of the plugin that I don\u2019t want to bother with now? Do you have a rule that failing tests, even accurate ones that suggest future work, can\u2019t be committed? Should I comment the tests out with `xdescribe` and write a comment \u201cFIXME re-enable these tests after \u2018j\u2019 and \u2018k\u2019 work properly\u201d?\n. I have used `xdescribe` to comment out the tests that are failing due to the implementation of another operator, while still keeping the many new tests that do work. My justification, as I wrote it in the commit message:\n\n> I don\u2019t want to delete these [failing] tests because they will be useful to have when `k` (and correspondingly `j`) is fixed. Otherwise, they would have to be rewritten at that time, or they would not get written and `-` and `+` would not be as well-tested.\n> \n> The comments explaining why these tests are commented out and saying when they can be re-enabled should protect these tests from being left disabled when they shouldn\u2019t be.\n\nI have also merged from the latest master commit so that this pull request can be merged without conflicts. This is now ready to be merged.\n. I have added tests for `+`, as requested. _Edit:_ and also some tests for <kbd>Enter</kbd>, just in case.\n\nBy the way, I tried the commented-out tests again, after noticing that the behavior of `j` and `k` has changed. The commented-out tests still fail, but not as badly. The cursor column is still wrong, but the cursor row and the text in the editor are now correct.\n. > Can we pare the `xdescribe`s down to just a few commented-out assertions, then?\n\nDone.\n. ",
    "lucasfeliciano": "@bhuga I just fixed the \"problem\". It was my fault, I had disable the package some time ago and when I install it again the vim-mode is installed already disabled. So I enable it and it is all good.\n\nIs it normal don't show a vim-mode menu in the package menu?\n. It would be nice, it is a nice feature when doing a pair programming with a person who doesn't use vim.\n\nI'll get some knowledge about it and try to do it.\nDon't seems difficult.\n\n@bhuga Thank you for your help.\n. @bhuga I just fixed the \"problem\". It was my fault, I had disable the package some time ago and when I install it again the vim-mode is installed already disabled. So I enable it and it is all good.\n\nIs it normal don't show a vim-mode menu in the package menu?\n. It would be nice, it is a nice feature when doing a pair programming with a person who doesn't use vim.\n\nI'll get some knowledge about it and try to do it.\nDon't seems difficult.\n\n@bhuga Thank you for your help.\n. ",
    "paulholzdev": "Does not happen with self build atom.\n. Does not happen with self build atom.\n. ",
    "halfbaked": "I'm seeing almost the opposite scenario, where the cursor is technically at the end of the line, but visually appears to be one and half characters to the left. It's like typing half blind.\n. I just used the standard release available from within the Atom package manager. \nI was close to giving up on this plugin for atom, but your reply is encouragement not to give up on it.\nI'll try lice-cap.\nthanks for the reply \n. I'm seeing almost the opposite scenario, where the cursor is technically at the end of the line, but visually appears to be one and half characters to the left. It's like typing half blind.\n. I just used the standard release available from within the Atom package manager. \nI was close to giving up on this plugin for atom, but your reply is encouragement not to give up on it.\nI'll try lice-cap.\nthanks for the reply \n. ",
    "iamjwc": "hey @halfbaked could you use licecap and make a little screenshot video of what you're seeing? also, are you seeing this with my pull request or on master?\n. Great! I assumed this wasn't correct, but wanted to do something to get the ball rolling.\n. Great, and good calls all around. I'll look at this tonight and get back to you.\n. @bhuga I fixed the things you suggested. Let me know if you think this needs anything else. Do you guys squash and merge? I can make another PR if so.\n. Thanks! Hope to do more in the very near future!\n. hey @halfbaked could you use licecap and make a little screenshot video of what you're seeing? also, are you seeing this with my pull request or on master?\n. Great! I assumed this wasn't correct, but wanted to do something to get the ball rolling.\n. Great, and good calls all around. I'll look at this tonight and get back to you.\n. @bhuga I fixed the things you suggested. Let me know if you think this needs anything else. Do you guys squash and merge? I can make another PR if so.\n. Thanks! Hope to do more in the very near future!\n. ",
    "simonlindholm": "It is when `nocompatible` is set.\n. It is when `nocompatible` is set.\n. ",
    "tcoopman": "I have seen similar things (not being able to type), but I'm not sure if this was because of vim mode or not. I always needed to restart atom (this was on windows)\n. I have just tested this and I can reproduce this only when you are not in insert mode at the moment you disable vim-mode.\n\nExtra info: Atom Build 0.101.0-61ee1be using (http://atom.someguy123.com/), vim mode 0.10.1\n. I have the same issue.\n. I I'm on 0.15.0, atom 0.130 on windows and I still have the issue\n. It should at least be a separate issue, because this still makes undo almost unusable in vim mode.\n. I noticed this too. I have the feeling that vim mode is unreliable but I\njust cannot work without vim so I guess I'll endure it some more.\n\nOp di 28 okt. 2014 15:45 schreef Chris Sattinger notifications@github.com:\n\n> Undo and redo are again broken. Sorry, this makes it unusable. I just lost\n> several minutes of work.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/405#issuecomment-60766617.\n. This would be awesome, but I think this should be a different plugin?\n. I have seen similar things (not being able to type), but I'm not sure if this was because of vim mode or not. I always needed to restart atom (this was on windows)\n. I have just tested this and I can reproduce this only when you are not in insert mode at the moment you disable vim-mode.\n\nExtra info: Atom Build 0.101.0-61ee1be using (http://atom.someguy123.com/), vim mode 0.10.1\n. I have the same issue.\n. I I'm on 0.15.0, atom 0.130 on windows and I still have the issue\n. It should at least be a separate issue, because this still makes undo almost unusable in vim mode.\n. I noticed this too. I have the feeling that vim mode is unreliable but I\njust cannot work without vim so I guess I'll endure it some more.\n\nOp di 28 okt. 2014 15:45 schreef Chris Sattinger notifications@github.com:\n\n> Undo and redo are again broken. Sorry, this makes it unusable. I just lost\n> several minutes of work.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/405#issuecomment-60766617.\n. This would be awesome, but I think this should be a different plugin?\n. ",
    "Kazanz": "@tcoopman  Yes, that is how it happens.  Disable Vim mode while not in insert.  \n\nI am on Ubuntu\n. @tcoopman  Yes, that is how it happens.  Disable Vim mode while not in insert.  \n\nI am on Ubuntu\n. ",
    "smfoote": "I have the same issue. The only thing I am able to type is new lines (I am using Mac).\n. I have the same issue. The only thing I am able to type is new lines (I am using Mac).\n. ",
    "ddelrio1986": "That is correct. I've noticed that there is no visual block mode yet.\n. This is happening for me as well.\n. That is correct. I've noticed that there is no visual block mode yet.\n. This is happening for me as well.\n. ",
    "ardrigh": "It would be good to have this feature supported to allow block commenting in the same way it works with Vim.\n\ne.g.<kbd>Ctrl+v</kbd> select visual block <kbd>Shift+i</kbd> <kbd>#</kbd> <kbd>Esc</kbd>.\n\nIt's a feature I use a lot when editing code blocks.\n. It would be nice if these features could be reviewed along with what https://github.com/lloeki/ex-mode is doing with the commands. I added a similar request to that package (https://github.com/lloeki/ex-mode/pull/61) to add <kbd>:</kbd> to the start of the command input, as a visual indication of command input.\n\nIf vim-mode and ex-mode merged together, then these requests would be better handled IMO.\n\nVim uses <kbd>/</kbd> for search but <kbd>:%s</kbd> for search & replace, and both should ideally be handled together. It might also save a lot of work supporting things like search history commands.\n. I have to agree with @nnjpp  comment on the abandonware. If someone reviewed the comments around the vim mode and ex-mode and the long term issues, comments regarding going back to vim or giving up are there to see.\n\nFrom someone who is learning the workarounds of how vim-mode and ex-mode and Atom-mode collide, it's very jarring bad user experience to the point I think a lot of long-time Vim users will give up and try something else.\n\nI know I have thought about it a few times, but I am trying to get happy with using Atom.\n. I just installed vim mode, and noticed dd doesn't behave correctly either.\n\nThis is noticeable if you start a new file and you want to delete and go back up a few lines.\nIt seems to be something with the EOF not being handled by <kbd>dd</kbd>.\n\nTo replicate this, enable 'invisible characters' so you can see the EOL/CR markers.\n\nCreate a new file with a few lines of text\nAt the end of the file write a new line but stop so there is no EOL/CR marker.\nHit <kbd>dd</kbd> to delete the line \n\nVim behaviour: It deletes the entire line and moves you to the line above until you are at line 1.\nAtom vim mode behaviour: It clears the current line you are on, but leaves you to the start of that line\n\nIf you select any lines with an EOL/CR character, then it will successfully delete that line, and move the content below it up.\nIf you add a new line between existing lines where EOL is visible, that deletes correctly, but that new line will automatically have an EOL/CR marker when it is added.\n\nI hope that description helps.\n\nI see #546 which matches what I described here also.\n. Thanks for the work on this.\n\nPardon my ignorance, but what do I need to do to help test this as a package in Atom?\n. I tried the instructions to get the package, but it failed to load. I disabled my other 3rd party packages to try running this.\n\nI am using Windows 7, Atom 1.0.2\n\nDownload of git repo was OK.\nLink was set\n\napm link -d\nC:\\Users<user>.atom\\dev\\packages\\vim-mode -> c:\\Local\\git\\vim-mode\n\nStarted with 'atom -d'\n\nFailed to load the vim-mode package\nCannot find module 'event-kit'\nHide Stack Trace\nError: Cannot find module 'event-kit'\n    at Module._resolveFilename (module.js:328:15)\n    at Function.Module._resolveFilename (C:\\Users<user>\\AppData\\Local\\atom\\app-1.0.2\\resources\\app.asar\\src\\module-cache.js:383:52)\n    at Function.Module._load (module.js:270:25)\n    at Module.require (module.js:357:17)\n    at require (module.js:376:17)\n    at Object.<anonymous> (c:\\Local\\git\\vim-mode\\lib\\vim-mode.coffee:4:10)\n    at Object.<anonymous> (c:\\Local\\git\\vim-mode\\lib\\vim-mode.coffee:70:4)\n    at Module._compile (module.js:452:26)\n    at Object.requireCoffeeScript (C:\\Users<user>\\AppData\\Local\\atom\\app-1.0.2\\resources\\app.asar\\node_modules\\coffee-cash\\lib\\coffee-cash.js:85:19)\n    at Module.load (module.js:347:32)\n\nAny ideas?\n. It would be good to have this feature supported to allow block commenting in the same way it works with Vim.\n\ne.g.<kbd>Ctrl+v</kbd> select visual block <kbd>Shift+i</kbd> <kbd>#</kbd> <kbd>Esc</kbd>.\n\nIt's a feature I use a lot when editing code blocks.\n. It would be nice if these features could be reviewed along with what https://github.com/lloeki/ex-mode is doing with the commands. I added a similar request to that package (https://github.com/lloeki/ex-mode/pull/61) to add <kbd>:</kbd> to the start of the command input, as a visual indication of command input.\n\nIf vim-mode and ex-mode merged together, then these requests would be better handled IMO.\n\nVim uses <kbd>/</kbd> for search but <kbd>:%s</kbd> for search & replace, and both should ideally be handled together. It might also save a lot of work supporting things like search history commands.\n. I have to agree with @nnjpp  comment on the abandonware. If someone reviewed the comments around the vim mode and ex-mode and the long term issues, comments regarding going back to vim or giving up are there to see.\n\nFrom someone who is learning the workarounds of how vim-mode and ex-mode and Atom-mode collide, it's very jarring bad user experience to the point I think a lot of long-time Vim users will give up and try something else.\n\nI know I have thought about it a few times, but I am trying to get happy with using Atom.\n. I just installed vim mode, and noticed dd doesn't behave correctly either.\n\nThis is noticeable if you start a new file and you want to delete and go back up a few lines.\nIt seems to be something with the EOF not being handled by <kbd>dd</kbd>.\n\nTo replicate this, enable 'invisible characters' so you can see the EOL/CR markers.\n\nCreate a new file with a few lines of text\nAt the end of the file write a new line but stop so there is no EOL/CR marker.\nHit <kbd>dd</kbd> to delete the line \n\nVim behaviour: It deletes the entire line and moves you to the line above until you are at line 1.\nAtom vim mode behaviour: It clears the current line you are on, but leaves you to the start of that line\n\nIf you select any lines with an EOL/CR character, then it will successfully delete that line, and move the content below it up.\nIf you add a new line between existing lines where EOL is visible, that deletes correctly, but that new line will automatically have an EOL/CR marker when it is added.\n\nI hope that description helps.\n\nI see #546 which matches what I described here also.\n. Thanks for the work on this.\n\nPardon my ignorance, but what do I need to do to help test this as a package in Atom?\n. I tried the instructions to get the package, but it failed to load. I disabled my other 3rd party packages to try running this.\n\nI am using Windows 7, Atom 1.0.2\n\nDownload of git repo was OK.\nLink was set\n\napm link -d\nC:\\Users<user>.atom\\dev\\packages\\vim-mode -> c:\\Local\\git\\vim-mode\n\nStarted with 'atom -d'\n\nFailed to load the vim-mode package\nCannot find module 'event-kit'\nHide Stack Trace\nError: Cannot find module 'event-kit'\n    at Module._resolveFilename (module.js:328:15)\n    at Function.Module._resolveFilename (C:\\Users<user>\\AppData\\Local\\atom\\app-1.0.2\\resources\\app.asar\\src\\module-cache.js:383:52)\n    at Function.Module._load (module.js:270:25)\n    at Module.require (module.js:357:17)\n    at require (module.js:376:17)\n    at Object.<anonymous> (c:\\Local\\git\\vim-mode\\lib\\vim-mode.coffee:4:10)\n    at Object.<anonymous> (c:\\Local\\git\\vim-mode\\lib\\vim-mode.coffee:70:4)\n    at Module._compile (module.js:452:26)\n    at Object.requireCoffeeScript (C:\\Users<user>\\AppData\\Local\\atom\\app-1.0.2\\resources\\app.asar\\node_modules\\coffee-cash\\lib\\coffee-cash.js:85:19)\n    at Module.load (module.js:347:32)\n\nAny ideas?\n. ",
    "pretzelmaker": "I have tried it with numerous themes including the default and all seem to yield the same results.\n. I presume I'm on master when running 0.10.1, otherwise I'm going to need to read up on how to use APM to install master.  Attempting to uninstall and reinstall vim-mode leaves it unusable for me so I'm not sure if I can test any further.\n. I am no longer using Atom actively and I suspect that the issue has likely been remedied in subsequent releases. Sorry I couldn't provide more information.\n. I have tried it with numerous themes including the default and all seem to yield the same results.\n. I presume I'm on master when running 0.10.1, otherwise I'm going to need to read up on how to use APM to install master.  Attempting to uninstall and reinstall vim-mode leaves it unusable for me so I'm not sure if I can test any further.\n. I am no longer using Atom actively and I suspect that the issue has likely been remedied in subsequent releases. Sorry I couldn't provide more information.\n. ",
    "e-jigsaw": "@bhuga Should I write some tests? I do not know very well how to write test such a case.\n\nFor example, I feel like this?\n\n```\n    describe \"the i keybinding\", ->\n      beforeEach -> keydown('i')\n\n      it \"puts the editor into insert mode\", ->\n        expect(editorView).toHaveClass 'insert-mode'\n        expect($('#status-bar-vim-mode')).toHaveClass 'status-bar-vim-mode-insert' # <-\n        expect(editorView).not.toHaveClass 'command-mode'\n```\n. I understand your concerns. It's difficult problem...\n. I have also fixed #251 \n. This PR is already fixed. Thanks\n. @bhuga Should I write some tests? I do not know very well how to write test such a case.\n\nFor example, I feel like this?\n\n```\n    describe \"the i keybinding\", ->\n      beforeEach -> keydown('i')\n\n      it \"puts the editor into insert mode\", ->\n        expect(editorView).toHaveClass 'insert-mode'\n        expect($('#status-bar-vim-mode')).toHaveClass 'status-bar-vim-mode-insert' # <-\n        expect(editorView).not.toHaveClass 'command-mode'\n```\n. I understand your concerns. It's difficult problem...\n. I have also fixed #251 \n. This PR is already fixed. Thanks\n. ",
    "mkevins": "@clintberry would you mind adding a link to these tickets? I can't find them and would like to follow this issue as well.\n. @clintberry would you mind adding a link to these tickets? I can't find them and would like to follow this issue as well.\n. ",
    "nubs": "#200, #58, #152, #183, #379\n. #200, #58, #152, #183, #379\n. ",
    "jamesgecko": "I see the same output for `:``w` in the key binding resolver pane, although Vim Mode has prescedence for `ctrl``r`. OS X 10.9.4 with Atom Version 0.107.0 and Vim Mode 0.12.0.\n\nWhat should be in my `~/.atom/keymap.cson`? This doesn't seem to work.\n\n```\n'.editor.vim-mode.command-mode':\n  'shift-; w': 'core:save'\n```\n. That's very helpful. Thanks!\n. If I bind it to .platform-darwin, then I can no longer type `,``t` in insert mode. Binding it to `.platform-darwin:not(.insert-mode)` has the same effect.\n. It is inherited down to insert mode, that's the problem. This is what my config looks like right now.\n\n```\n'.editor.vim-mode.command-mode:not(.insert-mode)':\n  ', t': 'fuzzy-finder:toggle-file-finder'\n\n'.platform-darwin:not(.insert-mode)': # also tried .platform-darwin:not(.editor)\n  ', t': 'fuzzy-finder:toggle-file-finder'\n```\n\nThe ,t shortcut now works when no buffers are open. It also works in insert mode, which is not desired behavior.\n. Duplicate of #468.\n. Not right now; just the options available through this settings button.\n\n![screen shot 2016-04-19 at 4 23 36 pm](https://cloud.githubusercontent.com/assets/44252/14654324/222bb35c-064b-11e6-96f6-d131cd60d6b8.png)\n\nYou can also specify mode-specific keybindings in `keymap.cson`. Mine looks like this:\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ';': 'ex-mode:open'\n  ', t': 'fuzzy-finder:toggle-file-finder'\n  ', s': 'pane:split-up'\n  ', v': 'pane:split-left'\n```\n. I see the same output for `:``w` in the key binding resolver pane, although Vim Mode has prescedence for `ctrl``r`. OS X 10.9.4 with Atom Version 0.107.0 and Vim Mode 0.12.0.\n\nWhat should be in my `~/.atom/keymap.cson`? This doesn't seem to work.\n\n```\n'.editor.vim-mode.command-mode':\n  'shift-; w': 'core:save'\n```\n. That's very helpful. Thanks!\n. If I bind it to .platform-darwin, then I can no longer type `,``t` in insert mode. Binding it to `.platform-darwin:not(.insert-mode)` has the same effect.\n. It is inherited down to insert mode, that's the problem. This is what my config looks like right now.\n\n```\n'.editor.vim-mode.command-mode:not(.insert-mode)':\n  ', t': 'fuzzy-finder:toggle-file-finder'\n\n'.platform-darwin:not(.insert-mode)': # also tried .platform-darwin:not(.editor)\n  ', t': 'fuzzy-finder:toggle-file-finder'\n```\n\nThe ,t shortcut now works when no buffers are open. It also works in insert mode, which is not desired behavior.\n. Duplicate of #468.\n. Not right now; just the options available through this settings button.\n\n![screen shot 2016-04-19 at 4 23 36 pm](https://cloud.githubusercontent.com/assets/44252/14654324/222bb35c-064b-11e6-96f6-d131cd60d6b8.png)\n\nYou can also specify mode-specific keybindings in `keymap.cson`. Mine looks like this:\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ';': 'ex-mode:open'\n  ', t': 'fuzzy-finder:toggle-file-finder'\n  ', s': 'pane:split-up'\n  ', v': 'pane:split-left'\n```\n. ",
    "gglanzani": "For me `\"\"yy` does not does what it should (put current line in the system clipboard.\n\nHowever `\"*yy` does the trick. Atom 0.120.0, Mavericks.\n. For me `\"\"yy` does not does what it should (put current line in the system clipboard.\n\nHowever `\"*yy` does the trick. Atom 0.120.0, Mavericks.\n. ",
    "xcambar": "Very clear, thanks a lot.\n\nCool, I've just learnt a new vim trick: I didn't even know that `/` could be used as a motion :smile: \n. Very clear, thanks a lot.\n\nCool, I've just learnt a new vim trick: I didn't even know that `/` could be used as a motion :smile: \n. ",
    "rosshadden": "I actually have this issue with soft-wrap off.  In fact with soft-wrap on I can keep moving the cursor to the right, and it does what I would expect.\n. I actually have this issue with soft-wrap off.  In fact with soft-wrap on I can keep moving the cursor to the right, and it does what I would expect.\n. ",
    "kineticdial": "I do! It that the culprit?\n. I can't seem to get to command mode to test with #290. #290 appears in my settings as enabled but functions as if I did not have it installed at all.\n. I do! It that the culprit?\n. I can't seem to get to command mode to test with #290. #290 appears in my settings as enabled but functions as if I did not have it installed at all.\n. ",
    "nicolasdular": "I also get an error with `replace` , but I don't have any autocomplete package installed. Maybe this error helps?\n![screenshot 2014-08-13 22 02 53](https://cloud.githubusercontent.com/assets/890544/3911798/eec3f58e-2324-11e4-864c-0ac605c99cdf.png)\n. @jspahrsummers No,  I haven't enabled soft wrapping\n. no, haven't noticed it for the last 1-2 months :)\n\nOn 5 April 2015 at 20:55, Jacek Kopeck\u00fd notifications@github.com wrote:\n\n> is this bug still there?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/320#issuecomment-89831942.\n. I also get an error with `replace` , but I don't have any autocomplete package installed. Maybe this error helps?\n![screenshot 2014-08-13 22 02 53](https://cloud.githubusercontent.com/assets/890544/3911798/eec3f58e-2324-11e4-864c-0ac605c99cdf.png)\n. @jspahrsummers No,  I haven't enabled soft wrapping\n. no, haven't noticed it for the last 1-2 months :)\n\nOn 5 April 2015 at 20:55, Jacek Kopeck\u00fd notifications@github.com wrote:\n\n> is this bug still there?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/320#issuecomment-89831942.\n. ",
    "isaachess": "+1 I'm having this same issue, would love to see it fixed (looking into it, but can't find the problem yet)\n. Good call, I had forgotten about that. We certainly could. I just started using Atom, so I don't know how package-level settings are stored. Any thoughts?\n. Ok that was actually super easy. I added it as an option. I currently set it as \"false\" by default, although I think the case could be made to having it start \"true\" (since most people are used to case-insensitive search anyway, and probably most vimmers have this setting turned on).\n\nBut it's ready to be merged as-is. Let me know if you think the default should be \"true.\"\n. I shall add some tests.\n. OK, I have added tests to this, all is well, ready to merge.\n. Fixed those things. Good catch on the multiple 'i' mod.\n. Awesome! Let me know what you think about my other pull requests. Thanks so much.\n\n![2309365-johstewartboom](https://cloud.githubusercontent.com/assets/3473742/4669248/7324c64a-556c-11e4-8951-0c8c4dac0274.gif)\n. I see that the Travis CI build failed, but I can't find anything in the spec files that mention Yank. Can you point me in the right direction of where I need to update those?\n. I have updated the tests so this now passes.\n\nThis functionality still does not work exactly like vim, but I personally feel it is _close_ to vim, and a better \"not-like-vim\" than we had before.\n\nNow whenever you yank anything, the cursor moves to the very beginning of that selection. This is how vim works, except in the special cases of shift+Y, y y, y j, etc. In those cases, vim leaves the cursor in its original position, but my fix moves it to the start of the line (i.e., the start of the selection).\n\nHowever, while it used to work correctly in those special cases, it worked incorrectly in every other yank. So I personally this fix, while not perfect, is better than where we were.\n\nThoughts? I'll understand if you don't want to merge this in. But let's not let the \"perfect be the enemy of the good,\" right? :rocket: \n. Can I get a review/comment on this?\n. As for which cases it fixes, please see my bullet points on the pull request. The reason FIXME is there is because it does not yet work exactly like VIM, but works (in my opinion) _better_ than what we had before. But yes, the new functionality is all in the specs.\n. @maxbrunsfeld No offense, but I greatly disagree -- currently implementation of change-inner-tag is basically useless, doesn't work like vim at all. I would rather have it not implemented than its current state, where the behavior feels pretty unpredictable.\n\nEither way, I think we should still have an open issue for this, to get it to match vim's actual feature.\n. Can I get a review/comment on this?\n. So here's the thing: the reason I was excited to switch to Atom, and the reason I am using it now, is because of the hackability -- but if packages (especially the _most popular_ packages) aren't being supported, and community changes are going ignored, it kinda defeats the purpose.\n\nPerhaps someone else at GitHub would be a better manager of this package? Someone with more time/passion for support atom's vim-mode?\n. @kevinsawicki I would love to be a maintainer, but I hesitate because I am very inexperienced with coffeescript. (The only coffeescript I know is what I taught myself to update this and other packages in Atom.) I've been getting it as I go along, but I'm not an expert, so I hesitate to take on an official role.\n\nThat said, if I was one of many maintainers, I think that would be great. I love atom, love vim mode (in general -- Atom's still kinda sucks), and really want to see/help it improve.\n. +1 I'm having this same issue, would love to see it fixed (looking into it, but can't find the problem yet)\n. Good call, I had forgotten about that. We certainly could. I just started using Atom, so I don't know how package-level settings are stored. Any thoughts?\n. Ok that was actually super easy. I added it as an option. I currently set it as \"false\" by default, although I think the case could be made to having it start \"true\" (since most people are used to case-insensitive search anyway, and probably most vimmers have this setting turned on).\n\nBut it's ready to be merged as-is. Let me know if you think the default should be \"true.\"\n. I shall add some tests.\n. OK, I have added tests to this, all is well, ready to merge.\n. Fixed those things. Good catch on the multiple 'i' mod.\n. Awesome! Let me know what you think about my other pull requests. Thanks so much.\n\n![2309365-johstewartboom](https://cloud.githubusercontent.com/assets/3473742/4669248/7324c64a-556c-11e4-8951-0c8c4dac0274.gif)\n. I see that the Travis CI build failed, but I can't find anything in the spec files that mention Yank. Can you point me in the right direction of where I need to update those?\n. I have updated the tests so this now passes.\n\nThis functionality still does not work exactly like vim, but I personally feel it is _close_ to vim, and a better \"not-like-vim\" than we had before.\n\nNow whenever you yank anything, the cursor moves to the very beginning of that selection. This is how vim works, except in the special cases of shift+Y, y y, y j, etc. In those cases, vim leaves the cursor in its original position, but my fix moves it to the start of the line (i.e., the start of the selection).\n\nHowever, while it used to work correctly in those special cases, it worked incorrectly in every other yank. So I personally this fix, while not perfect, is better than where we were.\n\nThoughts? I'll understand if you don't want to merge this in. But let's not let the \"perfect be the enemy of the good,\" right? :rocket: \n. Can I get a review/comment on this?\n. As for which cases it fixes, please see my bullet points on the pull request. The reason FIXME is there is because it does not yet work exactly like VIM, but works (in my opinion) _better_ than what we had before. But yes, the new functionality is all in the specs.\n. @maxbrunsfeld No offense, but I greatly disagree -- currently implementation of change-inner-tag is basically useless, doesn't work like vim at all. I would rather have it not implemented than its current state, where the behavior feels pretty unpredictable.\n\nEither way, I think we should still have an open issue for this, to get it to match vim's actual feature.\n. Can I get a review/comment on this?\n. So here's the thing: the reason I was excited to switch to Atom, and the reason I am using it now, is because of the hackability -- but if packages (especially the _most popular_ packages) aren't being supported, and community changes are going ignored, it kinda defeats the purpose.\n\nPerhaps someone else at GitHub would be a better manager of this package? Someone with more time/passion for support atom's vim-mode?\n. @kevinsawicki I would love to be a maintainer, but I hesitate because I am very inexperienced with coffeescript. (The only coffeescript I know is what I taught myself to update this and other packages in Atom.) I've been getting it as I go along, but I'm not an expert, so I hesitate to take on an official role.\n\nThat said, if I was one of many maintainers, I think that would be great. I love atom, love vim mode (in general -- Atom's still kinda sucks), and really want to see/help it improve.\n. ",
    "daveenguyen": "changing [`row + (count - 1)`](https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee#L405) to `(count - 1)` fixes forward and same line.\n\nGoing backward is deleting the lines between the current line and the target line.\n\ntwo line back from current line\nd3G from line 5\n![twolineback-atom](https://cloud.githubusercontent.com/assets/2568174/3396557/528e56fc-fd11-11e3-90cd-d30a9de15b96.gif)\n\nWhen the target line is the one before the current line, it only deletes the first character of the current line.\nd4G from line 5\n![prevline-atom](https://cloud.githubusercontent.com/assets/2568174/3396737/c2fdfefe-fd13-11e3-8afe-e78ea6e800ca.gif)\n\ndG goes backwards\n![dg-2-atom](https://cloud.githubusercontent.com/assets/2568174/3396569/808f62b2-fd11-11e3-930b-5865a9bf433d.gif)\n. `dG` is executing with count=1 instead of [@editor.getLineCount()](https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee#L403) because it is getting the default from [delete](https://github.com/atom/vim-mode/blob/master/lib/operators/general-operators.coffee#L86).\n\nRemoving the default count from delete gets `dG` working, but I did not run specs to see how this might affect other things.\n. #431 fixed most of them. There's still a minor bug with the first case. \n\n![dg-vim](https://cloud.githubusercontent.com/assets/2568174/3396348/2c1c69f4-fd0d-11e3-914a-38e808a7d5e1.gif)\nWhile doing the same motion as this image, you end up on an empty line 4 instead of line 3.\n\n![screen shot 2014-11-16 at 7 30 24 pm](https://cloud.githubusercontent.com/assets/2568174/5064826/0751b630-6dc7-11e4-9fbb-2e0763881834.png)\n. I am just highlighting them in case someone else wants to take a stab\nbecause I am at a lost on how to move on.\nOn Jul 7, 2014 7:23 PM, \"Ben Lavender\" notifications@github.com wrote:\n\n> The test failures seem to be legitimate--why is it okay for them to be\n> broken? Are you saying the broken tests test for broken behavior?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/332#issuecomment-48265174.\n. @gittyupagain awesome :+1: \n. changing [`row + (count - 1)`](https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee#L405) to `(count - 1)` fixes forward and same line.\n\nGoing backward is deleting the lines between the current line and the target line.\n\ntwo line back from current line\nd3G from line 5\n![twolineback-atom](https://cloud.githubusercontent.com/assets/2568174/3396557/528e56fc-fd11-11e3-90cd-d30a9de15b96.gif)\n\nWhen the target line is the one before the current line, it only deletes the first character of the current line.\nd4G from line 5\n![prevline-atom](https://cloud.githubusercontent.com/assets/2568174/3396737/c2fdfefe-fd13-11e3-8afe-e78ea6e800ca.gif)\n\ndG goes backwards\n![dg-2-atom](https://cloud.githubusercontent.com/assets/2568174/3396569/808f62b2-fd11-11e3-930b-5865a9bf433d.gif)\n. `dG` is executing with count=1 instead of [@editor.getLineCount()](https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee#L403) because it is getting the default from [delete](https://github.com/atom/vim-mode/blob/master/lib/operators/general-operators.coffee#L86).\n\nRemoving the default count from delete gets `dG` working, but I did not run specs to see how this might affect other things.\n. #431 fixed most of them. There's still a minor bug with the first case. \n\n![dg-vim](https://cloud.githubusercontent.com/assets/2568174/3396348/2c1c69f4-fd0d-11e3-914a-38e808a7d5e1.gif)\nWhile doing the same motion as this image, you end up on an empty line 4 instead of line 3.\n\n![screen shot 2014-11-16 at 7 30 24 pm](https://cloud.githubusercontent.com/assets/2568174/5064826/0751b630-6dc7-11e4-9fbb-2e0763881834.png)\n. I am just highlighting them in case someone else wants to take a stab\nbecause I am at a lost on how to move on.\nOn Jul 7, 2014 7:23 PM, \"Ben Lavender\" notifications@github.com wrote:\n\n> The test failures seem to be legitimate--why is it okay for them to be\n> broken? Are you saying the broken tests test for broken behavior?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/332#issuecomment-48265174.\n. @gittyupagain awesome :+1: \n. ",
    "jasonong": "That erroneous behavior happens on my Atom as well.  Using latest vim-mode.\n. @monokrome The vim-mode keybindings seems to suggest support for block wise selection.\n\n![screen shot 2014-06-30 at 9 35 53 am](https://cloud.githubusercontent.com/assets/12675/3432449/d1841f6c-0074-11e4-9338-ec990b14fa36.png)\n. That erroneous behavior happens on my Atom as well.  Using latest vim-mode.\n. @monokrome The vim-mode keybindings seems to suggest support for block wise selection.\n\n![screen shot 2014-06-30 at 9 35 53 am](https://cloud.githubusercontent.com/assets/12675/3432449/d1841f6c-0074-11e4-9338-ec990b14fa36.png)\n. ",
    "sudostack": "any plans to implement this supremely useful feature?\n. +1\n. @trusktr I recently switched to Spacemacs (Emacs with EVIL mode and some niceties) which has complete Vim emulation sans the plugin ecosystem. When I was using ST3, I had the Vintageous plugin that combined the power of visual-block selection and insert-mode. It allowed me to do things a bit quicker than in Vim using visual-block selection and substitutions. \n. any plans to implement this supremely useful feature?\n. +1\n. @trusktr I recently switched to Spacemacs (Emacs with EVIL mode and some niceties) which has complete Vim emulation sans the plugin ecosystem. When I was using ST3, I had the Vintageous plugin that combined the power of visual-block selection and insert-mode. It allowed me to do things a bit quicker than in Vim using visual-block selection and substitutions. \n. ",
    "dakotahp": "This happens to me as well.\n. \u27951\ufe0f\u20e3 on this, I experience this all day long.\n. \ud83d\udc4c Fixed in current version now. Close the ticket.\n. I suppose I'd be irresponsible if I didn't add steps to reproduce:\n1. Enable the vim package\n2. Add the following to the user keymap (`keymap.cson`):\n\n``` cson\n'.editor.vim-mode:not(.mini)':\n  'k j': 'vim-mode:activate-command-mode'\n  'j k': 'vim-mode:activate-command-mode'\n```\n1. Go into a document and hit `i` to get into insert mode if it isn't already.\n2. Try to type `just kidding` without being infuriated.\n\nTo see how vim does it add the following to your `.vimrc` file:\n\n``` vim\ninoremap kj <Esc>\n```\n. @gepoch Thanks. I noticed that ticket before but thought the Arpeggio thing made it different but now that I've read it I think they're basically the same issue, the reporter just didn't write his description very well.\n. This happens to me as well.\n. \u27951\ufe0f\u20e3 on this, I experience this all day long.\n. \ud83d\udc4c Fixed in current version now. Close the ticket.\n. I suppose I'd be irresponsible if I didn't add steps to reproduce:\n1. Enable the vim package\n2. Add the following to the user keymap (`keymap.cson`):\n\n``` cson\n'.editor.vim-mode:not(.mini)':\n  'k j': 'vim-mode:activate-command-mode'\n  'j k': 'vim-mode:activate-command-mode'\n```\n1. Go into a document and hit `i` to get into insert mode if it isn't already.\n2. Try to type `just kidding` without being infuriated.\n\nTo see how vim does it add the following to your `.vimrc` file:\n\n``` vim\ninoremap kj <Esc>\n```\n. @gepoch Thanks. I noticed that ticket before but thought the Arpeggio thing made it different but now that I've read it I think they're basically the same issue, the reporter just didn't write his description very well.\n. ",
    "wangqin4377": "yes,when vim-mode enabled,undo/redo can't work ,only in insert mode of vim can work\n. yes,when vim-mode enabled,undo/redo can't work ,only in insert mode of vim can work\n. ",
    "gittyupagain": "I added a pull request (https://github.com/atom/vim-mode/pull/431) that, in addition to delete, also takes care of yank and change.\n. I've been hitting this for a while now too, and I'm using Atom 0.209. I've only seen the problem when a file has not yet been modified. That is, if the first modification is from 'cw', the '.' afterwards will eat the word instead of replacing it with the specified change. I just tried some more tests, and it isn't limited to 'cw'. You will likely see it when using '.' after most change or insertion commands (again, only when it is the first modification to the file). I didn't see the problem if the first action was a deletion.\n. Yes. Are you not seeing it?\n. Yes, that works. Thanks!\n. +1\n. Scrolling feedback is only shown in the main window when the cursor is on the 3rd or 4th line from the top (with <kbd>ctrl</kbd> + <kbd>e</kbd>) or bottom (with <kbd>ctrl</kbd> + <kbd>y</kbd>). When the problem is happening, the proper view isn't updated until another key is pressed, or the cursor reaches the 3rd or 4th line. The minimap window properly shows what _should_ be shown in the main window, regardless of cursor position.\n. I just tried Atom v1.4.0-beta3, and I still see the <kbd>ctrl</kbd>+<kbd>e</kbd> / <kbd>ctrl</kbd>+<kbd>y</kbd> problem. I don't see the problem with <kbd>ctrl</kbd>+<kbd>f</kbd> that @dcalhoun is seeing, but I didn't see that with Atom v1.3.3 either.\n\nTrying to isolate the problem, I removed my ~/.atom directory. After relaunching and installing just vim-mode, I still see the problem with Atom v1.4.0-beta3.\n. I added a pull request (https://github.com/atom/vim-mode/pull/431) that, in addition to delete, also takes care of yank and change.\n. I've been hitting this for a while now too, and I'm using Atom 0.209. I've only seen the problem when a file has not yet been modified. That is, if the first modification is from 'cw', the '.' afterwards will eat the word instead of replacing it with the specified change. I just tried some more tests, and it isn't limited to 'cw'. You will likely see it when using '.' after most change or insertion commands (again, only when it is the first modification to the file). I didn't see the problem if the first action was a deletion.\n. Yes. Are you not seeing it?\n. Yes, that works. Thanks!\n. +1\n. Scrolling feedback is only shown in the main window when the cursor is on the 3rd or 4th line from the top (with <kbd>ctrl</kbd> + <kbd>e</kbd>) or bottom (with <kbd>ctrl</kbd> + <kbd>y</kbd>). When the problem is happening, the proper view isn't updated until another key is pressed, or the cursor reaches the 3rd or 4th line. The minimap window properly shows what _should_ be shown in the main window, regardless of cursor position.\n. I just tried Atom v1.4.0-beta3, and I still see the <kbd>ctrl</kbd>+<kbd>e</kbd> / <kbd>ctrl</kbd>+<kbd>y</kbd> problem. I don't see the problem with <kbd>ctrl</kbd>+<kbd>f</kbd> that @dcalhoun is seeing, but I didn't see that with Atom v1.3.3 either.\n\nTrying to isolate the problem, I removed my ~/.atom directory. After relaunching and installing just vim-mode, I still see the problem with Atom v1.4.0-beta3.\n. ",
    "anaisbetts": "#394 is a dupe of this bug\n. @geoffharcourt This seems to be a regression on the latest vim-mode, where it's now happening on both Mac and Windows, but only sometimes. On my machine, if I close the file and reopen it, it works again\n. This bug kills me in the soul\n. Bless u @maxbrunsfeld, bless u \n. Dupe\n. #394 is a dupe of this bug\n. @geoffharcourt This seems to be a regression on the latest vim-mode, where it's now happening on both Mac and Windows, but only sometimes. On my machine, if I close the file and reopen it, it works again\n. This bug kills me in the soul\n. Bless u @maxbrunsfeld, bless u \n. Dupe\n. ",
    "geoffharcourt": "In files with non-dos line endings, I can't get the `{` to move up at all. '}` does move down by paragraph, but it behaves unpredictably (sometimes to the last character of the paragraph, sometimes to an empty line beneath. (Using 0.29)\n. @paulcbetts, I had the same problem on 0.27 yesterday, so I think the issue might be a less recent regression. Thanks for the heads-up.\n. :+1: \n. In files with non-dos line endings, I can't get the `{` to move up at all. '}` does move down by paragraph, but it behaves unpredictably (sometimes to the last character of the paragraph, sometimes to an empty line beneath. (Using 0.29)\n. @paulcbetts, I had the same problem on 0.27 yesterday, so I think the issue might be a less recent regression. Thanks for the heads-up.\n. :+1: \n. ",
    "blablatros": "Any update on this issue? I'm using vim-mode v.0.61 on Windows, and `}` motion moves to the end of the line. When I convert the file to LF line endings, `{` and `}` work as expected.\n. What about `)` motion? That moves te cursor to the end of the sentance.\n. Any update on this issue? I'm using vim-mode v.0.61 on Windows, and `}` motion moves to the end of the line. When I convert the file to LF line endings, `{` and `}` work as expected.\n. What about `)` motion? That moves te cursor to the end of the sentance.\n. ",
    "zephraph": "I've seen this as well. I usually map fj to escape in vim, however doing so in vim mode doesn't give the expected behavior. The first time 'f' is pressed, it always interprets it as a shortcut and waits on the rest to be entered. If something else is entered that isn't 'j' in this case then it just prints that out and continues on its marry way. In order to enter 'f' normally in my case I have to type it twice. \n\nThe vim style behavior is to have a short timeout in which, if the shortcut isn't completed the typed letters are printed. I have the feeling that this is more of an atom issue than a plugin issue though so I fear it'll be hard to change. \n. It's good to know that it's doable though. I might explore a bit and see if I can come up with a solution. \n. Hey @maxbrunsfeld, this is the issue I was talking to you about on the bus. \n. So wait, this issue is fixed now?\n. Ahh, I see. Well, it's getting there it seems. \n. @DanielAndreasen I kinda assumed that would be the case. I just `fj` for mine so it's not as big of a deal. It works well even in regular vim. \n\n**EDIT**: I just tested this, and it has the same problem as before. Sure typing `fj`(in my case) works to exit insert and visual mode, but it prevents me from using f in insert mode unless I press it twice. \n. Ah, thanks for this! This issue has been plaguing me for a while now. \n. I'm not sure what you mean by that. Do you have the package installed? \n. I've seen this as well. I usually map fj to escape in vim, however doing so in vim mode doesn't give the expected behavior. The first time 'f' is pressed, it always interprets it as a shortcut and waits on the rest to be entered. If something else is entered that isn't 'j' in this case then it just prints that out and continues on its marry way. In order to enter 'f' normally in my case I have to type it twice. \n\nThe vim style behavior is to have a short timeout in which, if the shortcut isn't completed the typed letters are printed. I have the feeling that this is more of an atom issue than a plugin issue though so I fear it'll be hard to change. \n. It's good to know that it's doable though. I might explore a bit and see if I can come up with a solution. \n. Hey @maxbrunsfeld, this is the issue I was talking to you about on the bus. \n. So wait, this issue is fixed now?\n. Ahh, I see. Well, it's getting there it seems. \n. @DanielAndreasen I kinda assumed that would be the case. I just `fj` for mine so it's not as big of a deal. It works well even in regular vim. \n\n**EDIT**: I just tested this, and it has the same problem as before. Sure typing `fj`(in my case) works to exit insert and visual mode, but it prevents me from using f in insert mode unless I press it twice. \n. Ah, thanks for this! This issue has been plaguing me for a while now. \n. I'm not sure what you mean by that. Do you have the package installed? \n. ",
    "garcg": "It seems the timeout after the first key press is there, it only needs a fallback to insert the text into the editor.\n\nI've found a workaround adding the following to the user config.\nThis is for mapping `j k` as escape:\n\n`~/.atom/keymap.cson`:\n\n``` cson\n'.editor.vim-mode:not(.command-mode)':\n  'j k': 'vim-mode:activate-command-mode'\n\n'.editor.vim-mode.insert-mode':\n  'j': 'insert-incomplete-keybinding'\n```\n\n`~/.atom/init.coffee`:\n\n``` coffee\natom.workspaceView.command 'insert-incomplete-keybinding', (e)->\n  if oe = e.originalEvent && e.originalEvent.originalEvent\n    char = String.fromCharCode(oe.which)\n    char = char.toLowerCase() unless oe.shift\n    atom.workspace.activePaneItem.insertText(char)\n```\n\nAlthough, I don't know how this could be fixed in the vim package.\n. Yes, it is. \n\nI answered to the notes in the diff, I thought you would get notified, sorry about that.\n. About the changes in the spec, the test cases are the same, just parametrized to run for each one the aliases.\n. Some more info,\n\nThe specs are trying to reuse the editVew by attaching a new editor to the existing editView:\nhttps://github.com/atom/vim-mode/blob/7635b1e560f54c1da18205a49259cd2ae00a8a41/spec/spec-helper.coffee#L19\n\nApparently `EditorView::edit()` does not longer exists in the new version of atom,  I guess has something to do with the migration to react-editor:\nhttps://github.com/atom/atom/commit/431fab1a43f9b45b6f5af434993336717b6db8c0#diff-f6c1849288cd05f1d3ef5208e2020bc5\nhttps://github.com/atom/atom/commit/3d2d8c491f8a341fa02d3c600670b46850436b12#diff-f6c1849288cd05f1d3ef5208e2020bc5\n\nCreating a new editView on each test seems to work.\n. @DavidLGoldberg As a quick workaround, just for running the tests, set `existingEditorView = null` at the beginning of the `cacheEditor` function, in `spec-helper.coffee`. That is to force a new EditorView every time.\n\nI guess the proper solution is either removing that caching behaviour, or having the missing method implemented in atom.\n. It seems the timeout after the first key press is there, it only needs a fallback to insert the text into the editor.\n\nI've found a workaround adding the following to the user config.\nThis is for mapping `j k` as escape:\n\n`~/.atom/keymap.cson`:\n\n``` cson\n'.editor.vim-mode:not(.command-mode)':\n  'j k': 'vim-mode:activate-command-mode'\n\n'.editor.vim-mode.insert-mode':\n  'j': 'insert-incomplete-keybinding'\n```\n\n`~/.atom/init.coffee`:\n\n``` coffee\natom.workspaceView.command 'insert-incomplete-keybinding', (e)->\n  if oe = e.originalEvent && e.originalEvent.originalEvent\n    char = String.fromCharCode(oe.which)\n    char = char.toLowerCase() unless oe.shift\n    atom.workspace.activePaneItem.insertText(char)\n```\n\nAlthough, I don't know how this could be fixed in the vim package.\n. Yes, it is. \n\nI answered to the notes in the diff, I thought you would get notified, sorry about that.\n. About the changes in the spec, the test cases are the same, just parametrized to run for each one the aliases.\n. Some more info,\n\nThe specs are trying to reuse the editVew by attaching a new editor to the existing editView:\nhttps://github.com/atom/vim-mode/blob/7635b1e560f54c1da18205a49259cd2ae00a8a41/spec/spec-helper.coffee#L19\n\nApparently `EditorView::edit()` does not longer exists in the new version of atom,  I guess has something to do with the migration to react-editor:\nhttps://github.com/atom/atom/commit/431fab1a43f9b45b6f5af434993336717b6db8c0#diff-f6c1849288cd05f1d3ef5208e2020bc5\nhttps://github.com/atom/atom/commit/3d2d8c491f8a341fa02d3c600670b46850436b12#diff-f6c1849288cd05f1d3ef5208e2020bc5\n\nCreating a new editView on each test seems to work.\n. @DavidLGoldberg As a quick workaround, just for running the tests, set `existingEditorView = null` at the beginning of the `cacheEditor` function, in `spec-helper.coffee`. That is to force a new EditorView every time.\n\nI guess the proper solution is either removing that caching behaviour, or having the missing method implemented in atom.\n. ",
    "philk": "This completely worked for me when I thought based on #129 that it was still impossible in Atom. Only caveat was hitting `jj` was canceling visual mode, not just insert mode, but that was an easy fix.\n\n``` cson\n'.editor.vim-mode.insert-mode':\n  'j': 'insert-incomplete-keybinding'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nThanks, now I can use Atom without having to change my habits :smiley: \n. This completely worked for me when I thought based on #129 that it was still impossible in Atom. Only caveat was hitting `jj` was canceling visual mode, not just insert mode, but that was an easy fix.\n\n``` cson\n'.editor.vim-mode.insert-mode':\n  'j': 'insert-incomplete-keybinding'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nThanks, now I can use Atom without having to change my habits :smiley: \n. ",
    "BallisticPain": "I have been unable to get jj to work for typing \"j\" and also using \"jj\" to get me out of command mode. :(\n\nI feel this shouldn't be so difficult. I have seen people reference a \"timeout\", but have been unable to find this anywhere in the settings for either Vim Mode nor Atom.\n\nEdit: I just re-checked the init.coffee and noticed a misspelling... works now! Woohoo...\n\nThanks!\nJ\n. @pelachile, I'll copy and paste below what I have that's working. I use jj constantly and it was imperative that I got it working as well so I fully understand your frustration.\n\nI personally mis-spelled a portion of the ~/.atom/init.coffee script. I didn't copy and paste, I just typed it in.\n\n``` coffee\n# Your init script\n#\n# Atom will evaluate this file each time a new window is opened. It is run\n# after packages are loaded/activated and after the previous editor state\n# has been restored.\n#\n# An example hack to make opened Markdown files always be soft wrapped:\n#\n# path = require 'path'\n#\n# atom.workspaceView.eachEditorView (editorView) ->\n#   editor = editorView.getEditor()\n#   if path.extname(editor.getPath()) is '.md'\n#     editor.setSoftWrap(true)\n#\n\natom.workspaceView.command 'insert-incomplete-keybinding', (e)->\n    if oe = e.originalEvent && e.originalEvent.originalEvent\n        char = String.fromCharCode(oe.which)\n        char = char.toLowerCase() unless oe.shift\n        atom.workspace.activePaneItem.insertText(char)\n```\n\nI misspelled the .workspace portion.\n\nHere's my ~/.atom/keymap.cson (I was originally modifying the one in the package directly, and this wasn't working as well as modifying my home directory version)...\n\n``` cson\n# Your keymap\n#\n# Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors\n# to apply styles to elements, Atom keymaps use selectors to associate\n# keystrokes with events in specific contexts.\n#\n# You can create a new keybinding in this file by typing \"key\" and then hitting\n# tab.\n#\n# Here's an example taken from Atom's built-in keymap:\n#\n# '.editor':\n#   'enter': 'editor:newline'\n#\n# '.workspace':\n#   'ctrl-P': 'core:move-up'\n#   'ctrl-p': 'core:move-down'\n#\n'.editor.vim-mode.insert-mode':\n    'j': 'insert-incomplete-keybinding'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nOne thing I will also note here is that I believe the order of these two insertions matters. The other note is that if you want to type a 'j' while in insert mode, type it and then the next letter and they'll both appear. Otherwise you must wait for the timeout to occur to see the 'j' appear.\n\nI hope this helps,\nJarvis\n. I have been unable to get jj to work for typing \"j\" and also using \"jj\" to get me out of command mode. :(\n\nI feel this shouldn't be so difficult. I have seen people reference a \"timeout\", but have been unable to find this anywhere in the settings for either Vim Mode nor Atom.\n\nEdit: I just re-checked the init.coffee and noticed a misspelling... works now! Woohoo...\n\nThanks!\nJ\n. @pelachile, I'll copy and paste below what I have that's working. I use jj constantly and it was imperative that I got it working as well so I fully understand your frustration.\n\nI personally mis-spelled a portion of the ~/.atom/init.coffee script. I didn't copy and paste, I just typed it in.\n\n``` coffee\n# Your init script\n#\n# Atom will evaluate this file each time a new window is opened. It is run\n# after packages are loaded/activated and after the previous editor state\n# has been restored.\n#\n# An example hack to make opened Markdown files always be soft wrapped:\n#\n# path = require 'path'\n#\n# atom.workspaceView.eachEditorView (editorView) ->\n#   editor = editorView.getEditor()\n#   if path.extname(editor.getPath()) is '.md'\n#     editor.setSoftWrap(true)\n#\n\natom.workspaceView.command 'insert-incomplete-keybinding', (e)->\n    if oe = e.originalEvent && e.originalEvent.originalEvent\n        char = String.fromCharCode(oe.which)\n        char = char.toLowerCase() unless oe.shift\n        atom.workspace.activePaneItem.insertText(char)\n```\n\nI misspelled the .workspace portion.\n\nHere's my ~/.atom/keymap.cson (I was originally modifying the one in the package directly, and this wasn't working as well as modifying my home directory version)...\n\n``` cson\n# Your keymap\n#\n# Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors\n# to apply styles to elements, Atom keymaps use selectors to associate\n# keystrokes with events in specific contexts.\n#\n# You can create a new keybinding in this file by typing \"key\" and then hitting\n# tab.\n#\n# Here's an example taken from Atom's built-in keymap:\n#\n# '.editor':\n#   'enter': 'editor:newline'\n#\n# '.workspace':\n#   'ctrl-P': 'core:move-up'\n#   'ctrl-p': 'core:move-down'\n#\n'.editor.vim-mode.insert-mode':\n    'j': 'insert-incomplete-keybinding'\n\n'.vim-mode.insert-mode:not(.mini)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nOne thing I will also note here is that I believe the order of these two insertions matters. The other note is that if you want to type a 'j' while in insert mode, type it and then the next letter and they'll both appear. Otherwise you must wait for the timeout to occur to see the 'j' appear.\n\nI hope this helps,\nJarvis\n. ",
    "pelachile": "@BallisticPain where did you find the misspelling? I have tried and tried and I can't get jj to work. It's the only thing that prevents me from using atom, I'm just to used to my vim settings. I'm on a OSX 10.10\n. Last solution is not working on Atom 0.209.0. J will not show up. \n. I don't think @rdlugosz solution works anymore after updating to 1.0.9. \n1. simply type j and the error appears. \n\n**Atom Version**: 1.0.9\n**System**: Mac OS X 10.10.5\n**Thrown From**: Atom Core\n\n### Stack Trace\n\nUncaught TypeError: Cannot read property 'getTextInBufferRange' of undefined\n\n```\nAt /Users/MacPro/.atom/init.coffee:17\n\nTypeError: Cannot read property 'getTextInBufferRange' of undefined\n  at atom-text-editor.atom.commands.add.exit-insert-mode-if-preceded-by-j (/Users/MacPro/.atom/init.coffee:17:27)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:245:29)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:177:20)\n\n```\n\n### Commands\n\n```\n     -4:34.8.0 vim-mode:activate-insert-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:32.7.0 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n  2x -4:32.4.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:31.7.0 vim-mode:delete-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:31.5.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:31.2.0 vim-mode:delete-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:30.1.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:29.3.0 ex-mode:open (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:29.3.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:29 core:confirm (atom-text-editor.editor.mini.is-focused)\n  2x -4:29 blur (atom-text-editor.editor.mini.is-focused)\n  2x -4:25.4.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -4:24.8.0 vim-mode:insert-below-with-newline (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -4:24 exit-insert-mode-if-preceded-by-j (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n 10x -4:18.5.0 blur (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n     -0:01.8.0 exit-insert-mode-if-preceded-by-j (atom-text-editor.editor.vim-mode.insert-mode.is-focused)\n```\n. @BallisticPain where did you find the misspelling? I have tried and tried and I can't get jj to work. It's the only thing that prevents me from using atom, I'm just to used to my vim settings. I'm on a OSX 10.10\n. Last solution is not working on Atom 0.209.0. J will not show up. \n. I don't think @rdlugosz solution works anymore after updating to 1.0.9. \n1. simply type j and the error appears. \n\n**Atom Version**: 1.0.9\n**System**: Mac OS X 10.10.5\n**Thrown From**: Atom Core\n\n### Stack Trace\n\nUncaught TypeError: Cannot read property 'getTextInBufferRange' of undefined\n\n```\nAt /Users/MacPro/.atom/init.coffee:17\n\nTypeError: Cannot read property 'getTextInBufferRange' of undefined\n  at atom-text-editor.atom.commands.add.exit-insert-mode-if-preceded-by-j (/Users/MacPro/.atom/init.coffee:17:27)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:245:29)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:177:20)\n\n```\n\n### Commands\n\n```\n     -4:34.8.0 vim-mode:activate-insert-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:32.7.0 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n  2x -4:32.4.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:31.7.0 vim-mode:delete-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:31.5.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:31.2.0 vim-mode:delete-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:30.1.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:29.3.0 ex-mode:open (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:29.3.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -4:29 core:confirm (atom-text-editor.editor.mini.is-focused)\n  2x -4:29 blur (atom-text-editor.editor.mini.is-focused)\n  2x -4:25.4.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -4:24.8.0 vim-mode:insert-below-with-newline (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -4:24 exit-insert-mode-if-preceded-by-j (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n 10x -4:18.5.0 blur (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n     -0:01.8.0 exit-insert-mode-if-preceded-by-j (atom-text-editor.editor.vim-mode.insert-mode.is-focused)\n```\n. ",
    "JacobHTran": "Atom seems to have a new process to add custom commands.  I have been playing with atom for all of 10 mins, but in order to achieve this functionality without using the deprecated atom.workspaceView.command I implement the insert-incomplete-keybinding as such: \n\n``` coffee\natom.commands.add 'atom-text-editor', 'insert-incomplete-keybinding', (e)->\n  oe = e.originalEvent\n  char = String.fromCharCode(oe.which)\n  char = char.toLowerCase() unless oe.shift\n  atom.workspace.activePaneItem.insertText(char)\n```\n. Atom seems to have a new process to add custom commands.  I have been playing with atom for all of 10 mins, but in order to achieve this functionality without using the deprecated atom.workspaceView.command I implement the insert-incomplete-keybinding as such: \n\n``` coffee\natom.commands.add 'atom-text-editor', 'insert-incomplete-keybinding', (e)->\n  oe = e.originalEvent\n  char = String.fromCharCode(oe.which)\n  char = char.toLowerCase() unless oe.shift\n  atom.workspace.activePaneItem.insertText(char)\n```\n. ",
    "rdlugosz": "I was still seeing odd delays with the methods described above and so I implemented things in a slightly different way. Note that I prefer to use `kj` to exit insert mode rather than `jk` or `jj`, but you should be able to modify this for your own approach.\n\n``` cson\n#keymap.cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'exit-insert-mode-if-preceded-by-k'\n```\n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-preceded-by-k': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"k\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-normal-mode')\n```\n\nWhile this isn't quite as flexible (in terms of being able to map different keys without changing the command that's executed), there are no \"timeout\" related issues or visual delays in not having the `j` (or in my case, `k`) char appear on the screen until the next keypress. This also avoids issues related to Atom \"eating\" the first char of your mapping, which can happen with other approaches.\n\nNote that using the `event.abortKeyBinding()` is the preferred way to jump out of your key bindings and let the keystroke pass through to the editor (see: https://atom.io/docs/api/v0.187.0/KeymapManager).\n\n_edit: the word should have been \"preceded\" not \"proceeded\"._\n_edit2: changed `.editor` to `atom-text-editor` to resolve Atom 1.0 deprecation warning_\n_edit3: 22July2015 - Changed `vim-mode:activate-command-mode` to `vim-mode:activate-normal-mode` for compatibility with v.56+_\n. @bronson It's possibly a dup, but since there's been a lot more discussion (and proposed workarounds) here I'd suggest closing that issue and keeping this one open. That issue may be tougher for folks to find since the subject is referencing a specific third-party app for remapping keys.\n. Just confirmed that [my solution](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175) to this is still working fine in version `0.211.0`.\n\nThere is not currently a clean way to map sequential keystrokes in Atom to escape insert mode like you can in Vim; they simply work differently. The approach I describe above requires that you add a (very simple) function in addition to the key mapping, but it achieves the desired results with no introduction of strange delays or similar issues described here.\n. Yes, `moveRight()` should work, but doesn't this give you behavior that is inconsistent with Vim? In Vim, if I type the word \"testing\" and hit `ESC` (or `kj`), the cursor is placed on the `g` character.\n. haha - that's cool, just making sure I wasn't missing something. :+1: \n. Thanks @rufo, I've made an edit to the original comment to fix the deprecation warning.\n. @DanielAndreasen Not sure why you're having trouble with the function in your init file. Just verified everything is still working correctly on my copy of Atom 1.0.0. You can try out my config files in place of your own; I keep them all in [my dotfiles repo](https://github.com/rdlugosz/dotfiles/tree/master/atom). If you still see problems let's figure out a way to troubleshoot with a fresh config; maybe you've got something else going on.\n\n@DanielAndreasen @ndland The problem with mapping multiple keys as you suggest gets back to the issue discussed much earlier in this thread: it can cause delays while Atom is waiting for input to see if you are going to trigger the keymap and with the snippets you each list above (mapping `j j`, etc), you cannot enter words beginning with the letter `j`! Try typing the word 'just' in insert mode with your mapping and I think you'll see `ust` appear in the buffer (at least, that's what I see).\n\nAs far as using these alternative `ESC` mappings for exiting Visual mode, I don't think that is a common use case. If you are in Visual mode, typically you would exit by performing an action on the selected text. Or, if you'd like to exit visual mode without an action, you can just press `v` again (or `ESC`, obviously). _BTW, here are some other tips on [Avoiding ESC](http://vim.wikia.com/wiki/Avoid_the_escape_key)._\n\n**For now, I believe [my solution presented above](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175) is the only way to escape out of insert mode via character key mappings like `jj` `jk` `kj` or `fd` without introducing bad side effects.**\n. np!\n. No worries, glad you got it figured out! Also, I think many of us started with your solution and thought we had it solved until trying to type a j-word (I know I did)... turns out there aren't a lot of those in most programming! :beers: \n. I've updated my code above to use the new mode name (which is a good rename, btw... much more descriptive!). Cool to see that the Atom team is looking at addressing this in a more holistic way soon!\n. @pelachile Just tried my existing solution and in current Atom (1.0.10) it works fine. Maybe there's a typo in your init script? Could you try starting with a fresh copy of the keymap and init script? :confused: \n\n@maxbrunsfeld Definitely a step in the right direction, but I agree with @JesseLeite \u2014 the first char in the map not appearing right away is a significant drawback that is avoided with the approach I've been using ([see above](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175)). Any thoughts as to whether generically implementing sequential-key mappings in a way similar to how I've done it would be possible in the Atom codebase?\n\n_(I will look into this myself, but it's a time/priority issue for me right now.)_\n. @JesseLeite @ipstone I think that's a great idea, but when I last looked at this it wasn't clear how you can pass a parameter to a function in a keymap. That's why I ended up hard coding the key into the function name, i.e., `exit-insert-mode-if-preceded-by-k`. \n\nIf it _is_ possible to do this, I'd propose naming the function `activate-normal-mode-if-preceded-by(char)` so that it's easy (easier) to understand what's going on when you look at someone's keymapping, e.g.:\n\n``` cson\n# User's keymap.cson:\n\n# To map 'kj' as ESC\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'activate-normal-mode-if-preceded-by(k)'\n\n# To map 'jk' as ESC\n'atom-text-editor.vim-mode.insert-mode':\n  'k': 'activate-normal-mode-if-preceded-by(j)'\n\n# To map 'jj' as ESC\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'activate-normal-mode-if-preceded-by(j)'\n```\n\nI think that makes it really clear what's going on, but again, can you actually pass a parameter this way? I suspect not, since the [vim-surround](https://github.com/gepoch/vim-surround) package would benefit from this approach but doesn't use it. In fact, the author of that package goes to the extent of [_dynamically building_](https://github.com/gepoch/vim-surround/blob/master/keymaps/surround.cson) individual commands and generating the keymaps. Maybe something like that could be done for our needs based on options the user can set in the package settings? Not sure how you'd go about this without it getting out of hand...\n\nAlternatively, maybe the best option is to document this keymap+init function approach right in the package readme. I'll set about creating a PR for that.\n. @tomesh @Robert-Wett Are you saying my snippet (the one documented in [the PR](https://github.com/atom/vim-mode/issues/946)) no longer works? Just tried it in Atom 1.5.3 (OS X) and it seems to work fine...\n. Exactly. Avoiding the delay is precisely what my post above (and PR to have\nthis added to the Readme) is all about.\n\nOne step further that i think is worth considering is to just add the code\nto the package itself and allow the user to specify their preferred two-key\nmapping to exit insert mode via the vim-mode config screens. It's debatable\nas to whether something like this belongs in the config gui, but mapping a\nsequence like this is such a common thing that it could be justified.\n(Assuming, of course, adding this to the config would allow users to skip\nthe business of adding the custom function to the init script.)\n\nTo be perfectly honest I'm not a daily Atom user so can't justify looking\ninto building this right now. When I do use Atom I'd like the mappings to\nwork properly, which is what my approach allows.\n\nOn Thursday, March 17, 2016, Jesse Leite notifications@github.com wrote:\n\n> @kylesezhi https://github.com/kylesezhi and @Yohanna\n> https://github.com/Yohanna that keymap always worked. The issue is with\n> the delay when typing anything like \"jam\" or \"jesse\". There's a bad delay\n> after hitting that j key while the keymap listener is waiting for a\n> possible k to follow.\n> \n> Other vim emulators do their check when you hit the second k input. When k\n> is hit, the emulator checks the previous key to see if it was a j, and if\n> so enters vim mode. This allows the vim emulator to handle the same key\n> mapping without delay.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/334#issuecomment-197869591\n. While that's true, it's also true in Vim proper. Probably why the \"official\" way to leave insert mode is `ESC` instead of some combination of letters you may want to type. :)\n\nSimple enough to add one additional check to the code to see if you might be typing something like 'sockjs' (look for a 'c' before the 'k') if this hits you a lot.\n\nI do have a PR open (https://github.com/atom/vim-mode/pull/946) to try and get some mention of this in the Readme. Anyone interested in reviewing it and merging and/or otherwise getting it documented? AFAIK, this is still the \"best\" method of remapping ESC in Atom.\n. I was still seeing odd delays with the methods described above and so I implemented things in a slightly different way. Note that I prefer to use `kj` to exit insert mode rather than `jk` or `jj`, but you should be able to modify this for your own approach.\n\n``` cson\n#keymap.cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'exit-insert-mode-if-preceded-by-k'\n```\n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-preceded-by-k': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"k\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-normal-mode')\n```\n\nWhile this isn't quite as flexible (in terms of being able to map different keys without changing the command that's executed), there are no \"timeout\" related issues or visual delays in not having the `j` (or in my case, `k`) char appear on the screen until the next keypress. This also avoids issues related to Atom \"eating\" the first char of your mapping, which can happen with other approaches.\n\nNote that using the `event.abortKeyBinding()` is the preferred way to jump out of your key bindings and let the keystroke pass through to the editor (see: https://atom.io/docs/api/v0.187.0/KeymapManager).\n\n_edit: the word should have been \"preceded\" not \"proceeded\"._\n_edit2: changed `.editor` to `atom-text-editor` to resolve Atom 1.0 deprecation warning_\n_edit3: 22July2015 - Changed `vim-mode:activate-command-mode` to `vim-mode:activate-normal-mode` for compatibility with v.56+_\n. @bronson It's possibly a dup, but since there's been a lot more discussion (and proposed workarounds) here I'd suggest closing that issue and keeping this one open. That issue may be tougher for folks to find since the subject is referencing a specific third-party app for remapping keys.\n. Just confirmed that [my solution](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175) to this is still working fine in version `0.211.0`.\n\nThere is not currently a clean way to map sequential keystrokes in Atom to escape insert mode like you can in Vim; they simply work differently. The approach I describe above requires that you add a (very simple) function in addition to the key mapping, but it achieves the desired results with no introduction of strange delays or similar issues described here.\n. Yes, `moveRight()` should work, but doesn't this give you behavior that is inconsistent with Vim? In Vim, if I type the word \"testing\" and hit `ESC` (or `kj`), the cursor is placed on the `g` character.\n. haha - that's cool, just making sure I wasn't missing something. :+1: \n. Thanks @rufo, I've made an edit to the original comment to fix the deprecation warning.\n. @DanielAndreasen Not sure why you're having trouble with the function in your init file. Just verified everything is still working correctly on my copy of Atom 1.0.0. You can try out my config files in place of your own; I keep them all in [my dotfiles repo](https://github.com/rdlugosz/dotfiles/tree/master/atom). If you still see problems let's figure out a way to troubleshoot with a fresh config; maybe you've got something else going on.\n\n@DanielAndreasen @ndland The problem with mapping multiple keys as you suggest gets back to the issue discussed much earlier in this thread: it can cause delays while Atom is waiting for input to see if you are going to trigger the keymap and with the snippets you each list above (mapping `j j`, etc), you cannot enter words beginning with the letter `j`! Try typing the word 'just' in insert mode with your mapping and I think you'll see `ust` appear in the buffer (at least, that's what I see).\n\nAs far as using these alternative `ESC` mappings for exiting Visual mode, I don't think that is a common use case. If you are in Visual mode, typically you would exit by performing an action on the selected text. Or, if you'd like to exit visual mode without an action, you can just press `v` again (or `ESC`, obviously). _BTW, here are some other tips on [Avoiding ESC](http://vim.wikia.com/wiki/Avoid_the_escape_key)._\n\n**For now, I believe [my solution presented above](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175) is the only way to escape out of insert mode via character key mappings like `jj` `jk` `kj` or `fd` without introducing bad side effects.**\n. np!\n. No worries, glad you got it figured out! Also, I think many of us started with your solution and thought we had it solved until trying to type a j-word (I know I did)... turns out there aren't a lot of those in most programming! :beers: \n. I've updated my code above to use the new mode name (which is a good rename, btw... much more descriptive!). Cool to see that the Atom team is looking at addressing this in a more holistic way soon!\n. @pelachile Just tried my existing solution and in current Atom (1.0.10) it works fine. Maybe there's a typo in your init script? Could you try starting with a fresh copy of the keymap and init script? :confused: \n\n@maxbrunsfeld Definitely a step in the right direction, but I agree with @JesseLeite \u2014 the first char in the map not appearing right away is a significant drawback that is avoided with the approach I've been using ([see above](https://github.com/atom/vim-mode/issues/334#issuecomment-85603175)). Any thoughts as to whether generically implementing sequential-key mappings in a way similar to how I've done it would be possible in the Atom codebase?\n\n_(I will look into this myself, but it's a time/priority issue for me right now.)_\n. @JesseLeite @ipstone I think that's a great idea, but when I last looked at this it wasn't clear how you can pass a parameter to a function in a keymap. That's why I ended up hard coding the key into the function name, i.e., `exit-insert-mode-if-preceded-by-k`. \n\nIf it _is_ possible to do this, I'd propose naming the function `activate-normal-mode-if-preceded-by(char)` so that it's easy (easier) to understand what's going on when you look at someone's keymapping, e.g.:\n\n``` cson\n# User's keymap.cson:\n\n# To map 'kj' as ESC\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'activate-normal-mode-if-preceded-by(k)'\n\n# To map 'jk' as ESC\n'atom-text-editor.vim-mode.insert-mode':\n  'k': 'activate-normal-mode-if-preceded-by(j)'\n\n# To map 'jj' as ESC\n'atom-text-editor.vim-mode.insert-mode':\n  'j': 'activate-normal-mode-if-preceded-by(j)'\n```\n\nI think that makes it really clear what's going on, but again, can you actually pass a parameter this way? I suspect not, since the [vim-surround](https://github.com/gepoch/vim-surround) package would benefit from this approach but doesn't use it. In fact, the author of that package goes to the extent of [_dynamically building_](https://github.com/gepoch/vim-surround/blob/master/keymaps/surround.cson) individual commands and generating the keymaps. Maybe something like that could be done for our needs based on options the user can set in the package settings? Not sure how you'd go about this without it getting out of hand...\n\nAlternatively, maybe the best option is to document this keymap+init function approach right in the package readme. I'll set about creating a PR for that.\n. @tomesh @Robert-Wett Are you saying my snippet (the one documented in [the PR](https://github.com/atom/vim-mode/issues/946)) no longer works? Just tried it in Atom 1.5.3 (OS X) and it seems to work fine...\n. Exactly. Avoiding the delay is precisely what my post above (and PR to have\nthis added to the Readme) is all about.\n\nOne step further that i think is worth considering is to just add the code\nto the package itself and allow the user to specify their preferred two-key\nmapping to exit insert mode via the vim-mode config screens. It's debatable\nas to whether something like this belongs in the config gui, but mapping a\nsequence like this is such a common thing that it could be justified.\n(Assuming, of course, adding this to the config would allow users to skip\nthe business of adding the custom function to the init script.)\n\nTo be perfectly honest I'm not a daily Atom user so can't justify looking\ninto building this right now. When I do use Atom I'd like the mappings to\nwork properly, which is what my approach allows.\n\nOn Thursday, March 17, 2016, Jesse Leite notifications@github.com wrote:\n\n> @kylesezhi https://github.com/kylesezhi and @Yohanna\n> https://github.com/Yohanna that keymap always worked. The issue is with\n> the delay when typing anything like \"jam\" or \"jesse\". There's a bad delay\n> after hitting that j key while the keymap listener is waiting for a\n> possible k to follow.\n> \n> Other vim emulators do their check when you hit the second k input. When k\n> is hit, the emulator checks the previous key to see if it was a j, and if\n> so enters vim mode. This allows the vim emulator to handle the same key\n> mapping without delay.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/334#issuecomment-197869591\n. While that's true, it's also true in Vim proper. Probably why the \"official\" way to leave insert mode is `ESC` instead of some combination of letters you may want to type. :)\n\nSimple enough to add one additional check to the code to see if you might be typing something like 'sockjs' (look for a 'c' before the 'k') if this hits you a lot.\n\nI do have a PR open (https://github.com/atom/vim-mode/pull/946) to try and get some mention of this in the Readme. Anyone interested in reviewing it and merging and/or otherwise getting it documented? AFAIK, this is still the \"best\" method of remapping ESC in Atom.\n. ",
    "Robert-Wett": "+1 @rdlugosz  - working great for me, using `jk` to exit insert mode. For the lazy:\n\n``` cson\n#keymap.cson\n'atom-text-editor.vim-mode.insert-mode':\n  'k': 'exit-insert-mode-if-proceeded-by-j'\n```\n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-proceeded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-normal-mode')\n```\n. I'm at 1.1.0 Atom on OSX, and I'm now getting the same behavior as @chrisUsick - the `jk` characters are deleted but it fails to escape insert mode\n\nedit: the issue was the change in `activate-command-mode` vs `activate-normal-mode`. In any case, with 1.1.0, this works for me as described above in the keymap:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j k': 'vim-mode:activate-normal-mode'\n```\n. +1 @rdlugosz  - working great for me, using `jk` to exit insert mode. For the lazy:\n\n``` cson\n#keymap.cson\n'atom-text-editor.vim-mode.insert-mode':\n  'k': 'exit-insert-mode-if-proceeded-by-j'\n```\n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-proceeded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-normal-mode')\n```\n. I'm at 1.1.0 Atom on OSX, and I'm now getting the same behavior as @chrisUsick - the `jk` characters are deleted but it fails to escape insert mode\n\nedit: the issue was the change in `activate-command-mode` vs `activate-normal-mode`. In any case, with 1.1.0, this works for me as described above in the keymap:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j k': 'vim-mode:activate-normal-mode'\n```\n. ",
    "ahmadseleem": "The best and simplest until this is supported natively by Atom:\nIs the one by: @Robert-Wett \nbecause the the one by @garcg doesn't work if yo wanna map escape to something like =>\n\n```\n , ,\n```\n\nSo, the final solution is as @Robert-Wett except he didn't add escape for visual mode in the mapping:\n\n``` cson\n#keymap.cson\n\n#................................................\n# Escape\n#................................................\n'atom-text-editor.editor.vim-mode.insert-mode':\n  ',': 'exit-insert-mode-if-proceeded-by-j'\n\n'atom-text-editor.vim-mode.visual-mode:not(.mini)':\n  ', ,': 'vim-mode:activate-command-mode'\n  'v': 'vim-mode:activate-command-mode'\n```\n\nIt's still not perfect because it just wait for the second letter for ever....!!!\nit should be just a half a second or so then inserts the char and return...\n. Like:\n\n``` js\n setTimeout(doStuff, 50); //wait 50 millisecnds then recheck\n return;\n```\n\nI know it's extremely rare that you would need to type jj or jk or ,, or whatever alike.\nBut, just incase\n. No, I don't think this works, completely.\nNow, you can't type _j_\n. Yes it does work now!\nI'm sorry, I didn't wait 2s :)\nAnyway to control the time ?\nSeriously, curious! Like 1 sec ?\n\nAlso, it doesn't insert comma in my case. It inserts:\n\u00bc\n. No, I think because the comma is not an alphabetic char.\nSo, for example you can't convert to lower case as in your solution. \n. @rdlugosz Yes, your solution is the one I use for a while.\n. @maxbrunsfeld Cool!\n. @maxbrunsfeld \ud83d\udc4d\n. +1\n. This is the best I found so far:\nhttps://atom.io/packages/column-select\n\nStill missing a toggle like your solution...\nhopefully this could be ported to vim-mode here...\n. Should that be the default behavior when choose clipboard as the default register?\nMost people when delete something they don't need it to override the last copy/cut object...\nSo, if I wanna remove a text object and save it to be used later I would use Cut not Delete...\n\nIn my opinion the best way to do so:\n- _Y_ => to add to the clipboard.\n- _C_ or _X_ => to delete & add to the clipboard.\n- _D_ => to delete. like to any other register.... blackhole register or whatever you call it.\n\nThanks!\n. @bhuga Yes, I see that _c_ enters insert mode after cutting.\nbut, I meant the point that it does add the changed text to the clipboard, I Think. Same as copy does in that regard.\nThat's all.\n\n@maxbrunsfeld  I like this Package, but just suggesting an idea to improve the default behavior as most vim users do when they install vim...\nIt's just an idea and a personal opinion. So, if you don't like it no problem at all...\n\nThanks guys for your efforts!\n. like here:\nhttp://osxdaily.com/2011/08/04/enable-key-repeat-mac-os-x-lion/\n\nI think Vim and emacs turn this off\n\nI don't wanna turn it off  system wide. just for Atom...\n. I used this to turn it off: \ndefaults write -g ApplePressAndHoldEnabled -bool false\n\nBut, it's off everywhere in the system...\n. For anyone who wanna know the default identifier for Atom it's:\n\n```\ncom.github.atom\n```\n\nYou can get it like that from the terminal:\n\n``` applescript\nosascript -e 'id of app \"Atom\"'\n```\n. @jacekkopecky Agreed...\nThat's what I meant briefly with this line:\n\n> I think Vim and emacs turn this off\n. I just fixed it:\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ',': 'exit-insert-mode-if-proceeded-by-same'\n. The best and simplest until this is supported natively by Atom:\nIs the one by: @Robert-Wett \nbecause the the one by @garcg doesn't work if yo wanna map escape to something like =>\n\n```\n , ,\n```\n\nSo, the final solution is as @Robert-Wett except he didn't add escape for visual mode in the mapping:\n\n``` cson\n#keymap.cson\n\n#................................................\n# Escape\n#................................................\n'atom-text-editor.editor.vim-mode.insert-mode':\n  ',': 'exit-insert-mode-if-proceeded-by-j'\n\n'atom-text-editor.vim-mode.visual-mode:not(.mini)':\n  ', ,': 'vim-mode:activate-command-mode'\n  'v': 'vim-mode:activate-command-mode'\n```\n\nIt's still not perfect because it just wait for the second letter for ever....!!!\nit should be just a half a second or so then inserts the char and return...\n. Like:\n\n``` js\n setTimeout(doStuff, 50); //wait 50 millisecnds then recheck\n return;\n```\n\nI know it's extremely rare that you would need to type jj or jk or ,, or whatever alike.\nBut, just incase\n. No, I don't think this works, completely.\nNow, you can't type _j_\n. Yes it does work now!\nI'm sorry, I didn't wait 2s :)\nAnyway to control the time ?\nSeriously, curious! Like 1 sec ?\n\nAlso, it doesn't insert comma in my case. It inserts:\n\u00bc\n. No, I think because the comma is not an alphabetic char.\nSo, for example you can't convert to lower case as in your solution. \n. @rdlugosz Yes, your solution is the one I use for a while.\n. @maxbrunsfeld Cool!\n. @maxbrunsfeld \ud83d\udc4d\n. +1\n. This is the best I found so far:\nhttps://atom.io/packages/column-select\n\nStill missing a toggle like your solution...\nhopefully this could be ported to vim-mode here...\n. Should that be the default behavior when choose clipboard as the default register?\nMost people when delete something they don't need it to override the last copy/cut object...\nSo, if I wanna remove a text object and save it to be used later I would use Cut not Delete...\n\nIn my opinion the best way to do so:\n- _Y_ => to add to the clipboard.\n- _C_ or _X_ => to delete & add to the clipboard.\n- _D_ => to delete. like to any other register.... blackhole register or whatever you call it.\n\nThanks!\n. @bhuga Yes, I see that _c_ enters insert mode after cutting.\nbut, I meant the point that it does add the changed text to the clipboard, I Think. Same as copy does in that regard.\nThat's all.\n\n@maxbrunsfeld  I like this Package, but just suggesting an idea to improve the default behavior as most vim users do when they install vim...\nIt's just an idea and a personal opinion. So, if you don't like it no problem at all...\n\nThanks guys for your efforts!\n. like here:\nhttp://osxdaily.com/2011/08/04/enable-key-repeat-mac-os-x-lion/\n\nI think Vim and emacs turn this off\n\nI don't wanna turn it off  system wide. just for Atom...\n. I used this to turn it off: \ndefaults write -g ApplePressAndHoldEnabled -bool false\n\nBut, it's off everywhere in the system...\n. For anyone who wanna know the default identifier for Atom it's:\n\n```\ncom.github.atom\n```\n\nYou can get it like that from the terminal:\n\n``` applescript\nosascript -e 'id of app \"Atom\"'\n```\n. @jacekkopecky Agreed...\nThat's what I meant briefly with this line:\n\n> I think Vim and emacs turn this off\n. I just fixed it:\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ',': 'exit-insert-mode-if-proceeded-by-same'\n. ",
    "lazybios": "@philk  Thank you ! It's works for me too! I can continue stay in the Atom with my habits. :grin: \n. @philk  Thank you ! It's works for me too! I can continue stay in the Atom with my habits. :grin: \n. ",
    "damassi": "Neither does it work for 0.211.0\n. @rdlugosz - Thanks so much!  You're right; works great AND fast.  Finally able to leave MacVim for the modern world!   \n. @dougblack's comment in that thread seems to be a nice work-around, though having first class support right out of the box would be nice.  \n. Rad!  Will give it a spin tomorrow.  \n. Searching via `/` would be fantastic.  \n. thanks @pgericson - just what i was looking for!\n. This just happened to me as well, most noticeably when I try something like `30G`. The only causal event that I can think of was updating XCode command line tools (and XCode) to the latest via the default OSX update process... Nothing new other than that.  This morning, all good - after update, broken. \n. Sure thing -- OSX El Capitan (pretty standard setup) and here's a dump of my plugins. Downgrading fixed the issue.\n\natom-alignment@0.12.1\natom-beautify@0.28.16\natom-jade@0.3.0\natom-pair@2.0.10\natom-runner@2.4.6\nautocomplete-php@0.3.7\nbase16-eighties-dark-syntax@0.1.0\nblack-and-white-ui@0.1.15\nbottom-dock@0.3.5\nclose-other-tabs@0.1.0\ncolor-picker@2.0.13\ncursor-history@0.5.5\ndocblockr@0.7.3\ngit-plus@5.4.7\nhighlight-selected@0.10.1\nide-flow@0.8.0\nindent-guide-improved@1.4.3\nlanguage-ejs@0.2.0\nlanguage-elm@1.2.0\nlanguage-haml@0.23.4\nlanguage-haskell@1.4.12\nlanguage-javascript-jsx@0.3.7\nlinter@1.9.1\nlinter-elm-make@0.3.0\nlinter-eslint@3.2.0\nlinter-php@1.0.5\nmarkdown-scroll-sync@0.4.2\nmerge-conflicts@1.3.6\nnuclide-click-to-symbol@0.0.22\none-dark-ui@1.1.5\nopen-terminal-here@2.1.0\npainless-panes@0.1.0\nreact-snippets@0.2.0\nscript@3.0.1\nsolo-one-dark-ui@0.1.1\nsymbol-gen@1.0.0\nsync-settings@0.6.0\ntabs-to-spaces@0.11.1\nterm2@0.9.21\ntodo-manager@0.2.6\ntodo-show@0.16.0\ntrailing-semicolon@1.1.0\nturbo-javascript@1.1.5\nvim-mode@0.62.0\nvim-mode-visual-block@0.2.13\nzentabs@0.8.6\n. Yeah, my setup is nothing special. Could someone with a mac please see if paging works with 1.1? If it does then i'll close and start debugging on my side\n. Exactly. Like if you page down or up the cursor will stay behind. Sorry for being unclear!\n. Neither does it work for 0.211.0\n. @rdlugosz - Thanks so much!  You're right; works great AND fast.  Finally able to leave MacVim for the modern world!   \n. @dougblack's comment in that thread seems to be a nice work-around, though having first class support right out of the box would be nice.  \n. Rad!  Will give it a spin tomorrow.  \n. Searching via `/` would be fantastic.  \n. thanks @pgericson - just what i was looking for!\n. This just happened to me as well, most noticeably when I try something like `30G`. The only causal event that I can think of was updating XCode command line tools (and XCode) to the latest via the default OSX update process... Nothing new other than that.  This morning, all good - after update, broken. \n. Sure thing -- OSX El Capitan (pretty standard setup) and here's a dump of my plugins. Downgrading fixed the issue.\n\natom-alignment@0.12.1\natom-beautify@0.28.16\natom-jade@0.3.0\natom-pair@2.0.10\natom-runner@2.4.6\nautocomplete-php@0.3.7\nbase16-eighties-dark-syntax@0.1.0\nblack-and-white-ui@0.1.15\nbottom-dock@0.3.5\nclose-other-tabs@0.1.0\ncolor-picker@2.0.13\ncursor-history@0.5.5\ndocblockr@0.7.3\ngit-plus@5.4.7\nhighlight-selected@0.10.1\nide-flow@0.8.0\nindent-guide-improved@1.4.3\nlanguage-ejs@0.2.0\nlanguage-elm@1.2.0\nlanguage-haml@0.23.4\nlanguage-haskell@1.4.12\nlanguage-javascript-jsx@0.3.7\nlinter@1.9.1\nlinter-elm-make@0.3.0\nlinter-eslint@3.2.0\nlinter-php@1.0.5\nmarkdown-scroll-sync@0.4.2\nmerge-conflicts@1.3.6\nnuclide-click-to-symbol@0.0.22\none-dark-ui@1.1.5\nopen-terminal-here@2.1.0\npainless-panes@0.1.0\nreact-snippets@0.2.0\nscript@3.0.1\nsolo-one-dark-ui@0.1.1\nsymbol-gen@1.0.0\nsync-settings@0.6.0\ntabs-to-spaces@0.11.1\nterm2@0.9.21\ntodo-manager@0.2.6\ntodo-show@0.16.0\ntrailing-semicolon@1.1.0\nturbo-javascript@1.1.5\nvim-mode@0.62.0\nvim-mode-visual-block@0.2.13\nzentabs@0.8.6\n. Yeah, my setup is nothing special. Could someone with a mac please see if paging works with 1.1? If it does then i'll close and start debugging on my side\n. Exactly. Like if you page down or up the cursor will stay behind. Sorry for being unclear!\n. ",
    "rufo": "@rdlugosz - works great, thanks!\n\nJust as a note for anyone else checking out Atom post-1.0, it looks like you need to change`'.editor.vim-mode.insert-mode'` to  `'atom-text-editor.vim-mode.insert-mode'` in `keymap.cson` to avoid a deprecation warning. (I kept accidentally leaving the period at the beginning and not having it work - turns out, just like it says it needs a _tag_ selector, not a _class_ selector :stuck_out_tongue:)\n. @stv8 yep, totally did the same thing. Cheers! :beers: \n. @DanielAndreasen Drop that in your `init.coffee` file - easiest way is to go to the main Atom menu and pick \"Open Your Init Script.\" (That's where it is on OS X; not sure where it is on Windows/Linux.)\n\nEDIT: GitHub didn't show me the edit before I submitted. D'oh. :stuck_out_tongue: \n. @DanielAndreasen: I didn't have that problem when I tested it real quick, but I did notice only one of them worked. I don't know the details as I'm only just prodding at Atom myself, but I could certainly see them interfering slightly. My gut says the best thing to do might be to map both J and K to the same function, then modify that function to figure out if the preceding character was the opposite, and then exit insert mode if that's the case.\n. @rdlugosz - works great, thanks!\n\nJust as a note for anyone else checking out Atom post-1.0, it looks like you need to change`'.editor.vim-mode.insert-mode'` to  `'atom-text-editor.vim-mode.insert-mode'` in `keymap.cson` to avoid a deprecation warning. (I kept accidentally leaving the period at the beginning and not having it work - turns out, just like it says it needs a _tag_ selector, not a _class_ selector :stuck_out_tongue:)\n. @stv8 yep, totally did the same thing. Cheers! :beers: \n. @DanielAndreasen Drop that in your `init.coffee` file - easiest way is to go to the main Atom menu and pick \"Open Your Init Script.\" (That's where it is on OS X; not sure where it is on Windows/Linux.)\n\nEDIT: GitHub didn't show me the edit before I submitted. D'oh. :stuck_out_tongue: \n. @DanielAndreasen: I didn't have that problem when I tested it real quick, but I did notice only one of them worked. I don't know the details as I'm only just prodding at Atom myself, but I could certainly see them interfering slightly. My gut says the best thing to do might be to map both J and K to the same function, then modify that function to figure out if the preceding character was the opposite, and then exit insert mode if that's the case.\n. ",
    "DanielAndreasen": "Noob here. Where should I save the second part of the solution of @rdlugosz, i.e. the function that checks if it is preceded by `k`? If I save it in `keymap.cson` after the first part, atom fails to load this file.\n\nEDIT: I found out. This should be saved in `~/.atom/init.coffee` :smile: \n. Thanks @rufo and @damassi. In vim I have mapped both `jk` and `kj` as smash escape. When I try to do this (making two functions in init.coffee) I end up not being able to type `k`... However, it works when I only have the functions first suggested (with preceding k).\n. I was about to give up, because the function in `init.coffee` screws up things for me. I try the first approach and it works for me (Atom 1.0.0)\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j k': 'vim-mode:reset-command-mode'\n  'k j': 'vim-mode:reset-command-mode'\n```\n\nWithout putting anything else, this works perfect. Remember the space between `j` and `k`.\n. You are both welcome! :+1: \n. @ndland: I had the same problem when I tried to use `jk` as `Esc` for normal vim, so I only use it now for insert mode. Also if you press down too much, and have to go back up, it is annoying it will escape visual mode, and go to normal mode. Just my opinion.\n. @rdlugosz I'm really not sure what is going on anymore. Now your solution works. However, I had to restart atom. Otherwise, I couldn't write either `j` or `k`. After the restart it works though.\nI also confirm the problem with my na\u00efve solution. I have to hit either `j` or `k` twice in order to write that character.\n. But when you write a paper in e.g. LaTeX, you quickly realize the limitations. :beers: \n. Noob here. Where should I save the second part of the solution of @rdlugosz, i.e. the function that checks if it is preceded by `k`? If I save it in `keymap.cson` after the first part, atom fails to load this file.\n\nEDIT: I found out. This should be saved in `~/.atom/init.coffee` :smile: \n. Thanks @rufo and @damassi. In vim I have mapped both `jk` and `kj` as smash escape. When I try to do this (making two functions in init.coffee) I end up not being able to type `k`... However, it works when I only have the functions first suggested (with preceding k).\n. I was about to give up, because the function in `init.coffee` screws up things for me. I try the first approach and it works for me (Atom 1.0.0)\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j k': 'vim-mode:reset-command-mode'\n  'k j': 'vim-mode:reset-command-mode'\n```\n\nWithout putting anything else, this works perfect. Remember the space between `j` and `k`.\n. You are both welcome! :+1: \n. @ndland: I had the same problem when I tried to use `jk` as `Esc` for normal vim, so I only use it now for insert mode. Also if you press down too much, and have to go back up, it is annoying it will escape visual mode, and go to normal mode. Just my opinion.\n. @rdlugosz I'm really not sure what is going on anymore. Now your solution works. However, I had to restart atom. Otherwise, I couldn't write either `j` or `k`. After the restart it works though.\nI also confirm the problem with my na\u00efve solution. I have to hit either `j` or `k` twice in order to write that character.\n. But when you write a paper in e.g. LaTeX, you quickly realize the limitations. :beers: \n. ",
    "cwonrails": "@DanielAndreasen's snippet worked for me; thanks! \n. @DanielAndreasen's snippet worked for me; thanks! \n. ",
    "ndland": "Thank you @DanielAndreasen, this was what I was looking for.\n. It doesn't fix anything for Visual mode, but it works perfectly if you're only using the remap for Insert mode. I was originally using\n\n``` cson\n'atom-text-editor.vim-mode:not(.command-mode)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nWhich works, but when visually selecting a line, and using j to scroll down, it was delayed because it was checking to see if we were trying to escape back to normal mode.\n\n**Edit**: corrected snippet.\n. @zephraph I see what you mean, I'm getting the same behavior. :confused: Because I am trying to use `jj`, I was unable to type j in insert mode at all.\n. @rdlugosz Thank you for clarifying. I missed that comment from above, I have tested your solution, and it is working as I expect it to :+1:.\n. Thank you @DanielAndreasen, this was what I was looking for.\n. It doesn't fix anything for Visual mode, but it works perfectly if you're only using the remap for Insert mode. I was originally using\n\n``` cson\n'atom-text-editor.vim-mode:not(.command-mode)':\n  'j j': 'vim-mode:activate-command-mode'\n```\n\nWhich works, but when visually selecting a line, and using j to scroll down, it was delayed because it was checking to see if we were trying to escape back to normal mode.\n\n**Edit**: corrected snippet.\n. @zephraph I see what you mean, I'm getting the same behavior. :confused: Because I am trying to use `jj`, I was unable to type j in insert mode at all.\n. @rdlugosz Thank you for clarifying. I missed that comment from above, I have tested your solution, and it is working as I expect it to :+1:.\n. ",
    "crharris": "With version 0.56, the atom dispatch command needs to be vim-mode:activate-normal-mode instead of activate-command-mode.\n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-preceded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-normal-mode')\n```\n. With version 0.56, the atom dispatch command needs to be vim-mode:activate-normal-mode instead of activate-command-mode.\n\n``` coffee\n#init.coffee\natom.commands.add 'atom-text-editor', 'exit-insert-mode-if-preceded-by-j': (e) ->\n  editor = @getModel()\n  pos = editor.getCursorBufferPosition()\n  range = [pos.traverse([0,-1]), pos]\n  lastChar = editor.getTextInBufferRange(range)\n  if lastChar != \"j\"\n    e.abortKeyBinding()\n  else\n    editor.backspace()\n    atom.commands.dispatch(e.currentTarget, 'vim-mode:activate-normal-mode')\n```\n. ",
    "babygau": "@maxbrunsfeld, thank you for that good news, really looking forward to it! :heart_eyes: \n. many thanks @jacekkopecky. Now it works perfectly!\n. @maxbrunsfeld, thank you for that good news, really looking forward to it! :heart_eyes: \n. many thanks @jacekkopecky. Now it works perfectly!\n. ",
    "kylesezhi": "Huzzah!\n. I have 1.5.3 and this keymap works for me:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n   'j k': 'vim-mode:activate-normal-mode'\n```\n\nNote that I have a linebreak after the first colon and the second line is tabbed in.\n. Thanks for that explanation, @JesseLeite !\n\nI agree - checking after the `k` in `jk` would be an improvement on the current way the system works. I'd love to see this in a future build of Atom.\n. Huzzah!\n. I have 1.5.3 and this keymap works for me:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n   'j k': 'vim-mode:activate-normal-mode'\n```\n\nNote that I have a linebreak after the first colon and the second line is tabbed in.\n. Thanks for that explanation, @JesseLeite !\n\nI agree - checking after the `k` in `jk` would be an improvement on the current way the system works. I'd love to see this in a future build of Atom.\n. ",
    "chrisUsick": "The solution mentioned by @JesseLeite is not working for me in a fresh install of atom version 1.0.10  with vim-mode. Is there anything else that needs to be done to make this work?\n. Okay, the command is performing the backspace, but it doesn't change the mode for me.\n. Okay, just wanted to post in case others experience the same error\n\nOn Tue, Sep 8, 2015 at 3:29 PM Jesse Leite notifications@github.com wrote:\n\n> Weird. A backspace, but not switching back to normal model? I can't\n> replicate this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/334#issuecomment-138690193.\n. The solution mentioned by @JesseLeite is not working for me in a fresh install of atom version 1.0.10  with vim-mode. Is there anything else that needs to be done to make this work?\n. Okay, the command is performing the backspace, but it doesn't change the mode for me.\n. Okay, just wanted to post in case others experience the same error\n\nOn Tue, Sep 8, 2015 at 3:29 PM Jesse Leite notifications@github.com wrote:\n\n> Weird. A backspace, but not switching back to normal model? I can't\n> replicate this.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/334#issuecomment-138690193.\n. ",
    "sarink": "Thanks @JesseLeite !\n\nWorks for me on atom 1.1 and osx (although I modified it to be `jj`)\n. I get this when I use \"f\" to jump to a character in a line. Thanks @JesseLeite !\n\nWorks for me on atom 1.1 and osx (although I modified it to be `jj`)\n. I get this when I use \"f\" to jump to a character in a line. ",
    "ipstone": "Thanks @JesseLeite , it works for me on atom 1.3.2, windows.\n\nI think we should package the solution as a function such as:\n \"reset-normal-mode-by-keycomb\",   or \"reset-normal-mode-keycomb\"\nso that people can just add in the keymap: k: 'vim-mode: reset-normal-mode-keycomb(j)'\n\nor something similar to that extent, so that 'jk' would becoming the remap of Esc.\n. Thanks @JesseLeite , it works for me on atom 1.3.2, windows.\n\nI think we should package the solution as a function such as:\n \"reset-normal-mode-by-keycomb\",   or \"reset-normal-mode-keycomb\"\nso that people can just add in the keymap: k: 'vim-mode: reset-normal-mode-keycomb(j)'\n\nor something similar to that extent, so that 'jk' would becoming the remap of Esc.\n. ",
    "RafaelCosman": "Thanks for your work on this! I've tried a bunch of the posts in this thread and haven't gotten any of them to work. Looking forward to a package that fixes this.\n. Thanks for your work on this! I've tried a bunch of the posts in this thread and haven't gotten any of them to work. Looking forward to a package that fixes this.\n. ",
    "ebylund": "@rdlugosz Great solution! I've used Macvim for the past year, all the while getting used to my 'jk' esc mapping. I'd been having a problem switching to Atom because of the lag it introduced. I'd tried other solutions, but none seemed to work, Thanks again! \n. @rdlugosz Great solution! I've used Macvim for the past year, all the while getting used to my 'jk' esc mapping. I'd been having a problem switching to Atom because of the lag it introduced. I'd tried other solutions, but none seemed to work, Thanks again! \n. ",
    "tomesm": "@Robert-Wett unfortunately it seems this snippet is not working anymore (Linux Debian, Atom v. 1.5.3) \n. @rdlugosz No, i mean this snippet:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j k': 'vim-mode:activate-normal-mode'\n```\n\nBut actually non of the snippets posted in this thread is working for me. Solutions with init script functions, solutions without it... no chance to make it operational.\n\nI have tried reinstallation, disabling the other plugins etc . without any success. An I dunno how to debug it.\n. @rdlugosz well... only solution which works for me is upgrade to beta version (1.6.0-beta4)\n. @Robert-Wett unfortunately it seems this snippet is not working anymore (Linux Debian, Atom v. 1.5.3) \n. @rdlugosz No, i mean this snippet:\n\n``` cson\n'atom-text-editor.vim-mode.insert-mode':\n  'j k': 'vim-mode:activate-normal-mode'\n```\n\nBut actually non of the snippets posted in this thread is working for me. Solutions with init script functions, solutions without it... no chance to make it operational.\n\nI have tried reinstallation, disabling the other plugins etc . without any success. An I dunno how to debug it.\n. @rdlugosz well... only solution which works for me is upgrade to beta version (1.6.0-beta4)\n. ",
    "Yohanna": "@kylesezhi Your kemap worked for me, thanks!\n\nFor the record, I'm using v. `1.5.4`\n. @kylesezhi Your kemap worked for me, thanks!\n\nFor the record, I'm using v. `1.5.4`\n. ",
    "vimniky": "haha  , this works now !  just two line , neat ! thanks @maxbrunsfeld\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j k': 'vim-mode:activate-normal-mode'\n```\n. haha  , this works now !  just two line , neat ! thanks @maxbrunsfeld\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j k': 'vim-mode:activate-normal-mode'\n```\n. ",
    "denysdovhan": "Yep, but it still doesn't work well for non-american keyboards.\n. @garethderioth I have no idea why. Now, I just use vim.\n. After typing `\u043e`:\n\n![image](https://cloud.githubusercontent.com/assets/3459374/10818851/4d9fc612-7e4d-11e5-86c0-ae2daf53ce73.png)\n\nAfter typing `\u043b`:\n\n![image](https://cloud.githubusercontent.com/assets/3459374/10818868/71388046-7e4d-11e5-9b6f-b179310df4e0.png)\n. So, will it be fixed?\n. Yep, but it still doesn't work well for non-american keyboards.\n. @garethderioth I have no idea why. Now, I just use vim.\n. After typing `\u043e`:\n\n![image](https://cloud.githubusercontent.com/assets/3459374/10818851/4d9fc612-7e4d-11e5-86c0-ae2daf53ce73.png)\n\nAfter typing `\u043b`:\n\n![image](https://cloud.githubusercontent.com/assets/3459374/10818868/71388046-7e4d-11e5-9b6f-b179310df4e0.png)\n. So, will it be fixed?\n. ",
    "Khangeldy": "After  remap to `k j` . It is hard to import  [sockjs](https://github.com/sockjs)\n. After  remap to `k j` . It is hard to import  [sockjs](https://github.com/sockjs)\n. ",
    "mugukamil": "@denysdovhan Yes it is... :(\n. @denysdovhan Yes it is... :(\n. ",
    "glrodasz": "@denysdovhan Why it is that? I have an non-american keyboard and works well.\n. @denysdovhan Why it is that? I have an non-american keyboard and works well.\n. ",
    "doublemarked": "I don't know the status of this, but it drives me crazy also. It makes it difficult to select blocks of text with the keyboard.\n. I have similar problems, but it's been unclear whether it's by design or not. ^C and ^V only work in insert mode. If I'm not in insert mode I can right click on content and select Copy to copy or right click and Paste (both work). However, Cut (^X) works in normal mode, but I can only paste in insert mode. Maybe a key binding issue?\n\nI would expect that all three (^C,^X,^V) would work in either mode. Currently I'm forced to select something with the mouse in insert mode so that I can cut, or I have to select in normal mode and use the mouse to right click and Copy. Either way is annoying.\n\nAlso, I would really prefer that pasting (^V) while in normal mode would put me into insert mode and paste the text. That seems like the logical functionality. \n- OS: Ubuntu 14.10\n- Atom: 0.177.0\n- vim-mode version: 0.34.0\n. I don't know the status of this, but it drives me crazy also. It makes it difficult to select blocks of text with the keyboard.\n. I have similar problems, but it's been unclear whether it's by design or not. ^C and ^V only work in insert mode. If I'm not in insert mode I can right click on content and select Copy to copy or right click and Paste (both work). However, Cut (^X) works in normal mode, but I can only paste in insert mode. Maybe a key binding issue?\n\nI would expect that all three (^C,^X,^V) would work in either mode. Currently I'm forced to select something with the mouse in insert mode so that I can cut, or I have to select in normal mode and use the mouse to right click and Copy. Either way is annoying.\n\nAlso, I would really prefer that pasting (^V) while in normal mode would put me into insert mode and paste the text. That seems like the logical functionality. \n- OS: Ubuntu 14.10\n- Atom: 0.177.0\n- vim-mode version: 0.34.0\n. ",
    "bmaple": "As a stop-gap, using the left character always seems to work, except for the square brackets. Square brackets don't work at all.\n\nedit: Got left square bracket working. I'm going to see if I can get an over-all fix for this and pull it.\n\nadded line \n 'i [': 'vim-mode:select-inside-square-brackets'\nwithin  vim-mode.cson under \n  '.editor.vim-mode.operator-pending-mode, .editor.vim-mode.visual-mode': \n\nand added line \n'select-inside-square-brackets': => new TextObjects.SelectInsideBrackets(@editor, '[', ']')\non line 164 in vim-state.coffee\n\nfurther progress:\ndi} seems to be giving erratic behavior because it is using the next paragraph function of }, and for some reason, it does not activate for { in reverse. \n\nEdit: Got it all fixed, I'll submit a pull request soon.\n. As a stop-gap, using the left character always seems to work, except for the square brackets. Square brackets don't work at all.\n\nedit: Got left square bracket working. I'm going to see if I can get an over-all fix for this and pull it.\n\nadded line \n 'i [': 'vim-mode:select-inside-square-brackets'\nwithin  vim-mode.cson under \n  '.editor.vim-mode.operator-pending-mode, .editor.vim-mode.visual-mode': \n\nand added line \n'select-inside-square-brackets': => new TextObjects.SelectInsideBrackets(@editor, '[', ']')\non line 164 in vim-state.coffee\n\nfurther progress:\ndi} seems to be giving erratic behavior because it is using the next paragraph function of }, and for some reason, it does not activate for { in reverse. \n\nEdit: Got it all fixed, I'll submit a pull request soon.\n. ",
    "nicolaiskogheim": "@bmaple Did you have a fix for this?\n. I have the same thing with everything being doubled. It only happens when using two panes, and it happens very, very rarely. I don't have the vim-mode package installed though.\n. +1\n\nThis happens when vim mode is disabled too for some reason.\nEvery time I undo something I have to enable vim mode, enter insert mode, go back and disable it to be able to continue working.  Strangely, I am allowed to insert tabs, and delete stuff with backspace.\nThe \"enter command mode\" behaviour is affecting every open file, while entering insertion mode is not. \n\nAfter uninstalling vim mode and refreshing atom, the problem is gone.\n\nThis may not be a big deal for hardcore vim'ers (I don't know). I use vim mode occasionally, and that makes this issue slightly more cumbersome.\n. Dupe of #404 \n. :+1:\n. No, this should probably not have a test.\nLike the `i_CTRL-W` binding (defined the line above my addition), this one just maps to a command defined on `editor`.\nThat is probably why @maxbrunsfeld didn't add a test for that either.\n. All good :+1: \n\nA setting would've been very nice, so that it would've been possible to chose between sort of atom-with-vim-mode and vim-with-atom-around-it-mode.\n. @bmaple Did you have a fix for this?\n. I have the same thing with everything being doubled. It only happens when using two panes, and it happens very, very rarely. I don't have the vim-mode package installed though.\n. +1\n\nThis happens when vim mode is disabled too for some reason.\nEvery time I undo something I have to enable vim mode, enter insert mode, go back and disable it to be able to continue working.  Strangely, I am allowed to insert tabs, and delete stuff with backspace.\nThe \"enter command mode\" behaviour is affecting every open file, while entering insertion mode is not. \n\nAfter uninstalling vim mode and refreshing atom, the problem is gone.\n\nThis may not be a big deal for hardcore vim'ers (I don't know). I use vim mode occasionally, and that makes this issue slightly more cumbersome.\n. Dupe of #404 \n. :+1:\n. No, this should probably not have a test.\nLike the `i_CTRL-W` binding (defined the line above my addition), this one just maps to a command defined on `editor`.\nThat is probably why @maxbrunsfeld didn't add a test for that either.\n. All good :+1: \n\nA setting would've been very nice, so that it would've been possible to chose between sort of atom-with-vim-mode and vim-with-atom-around-it-mode.\n. ",
    "bhgames": "Nope, it went away. I had to disable vim mode permanently though because\nthe undo/redo is busted. There is an open issue about it on the main atom\nrepo that someone else opened, but basically, you can undo entire pages of\ncode now in the new vim mode and it won't let you redo it. I lost enough\ncode and time I just had to disable the plugin entirely.\n\nhttps://github.com/atom/atom/issues/2689\n\nOn Mon, Jul 7, 2014 at 9:12 PM, Ben Lavender notifications@github.com\nwrote:\n\n> This sounds like an issue we had in older versions disabling and\n> reenabling the plugin. Does it persist after you start atom?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/338#issuecomment-48264508.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. I asked if someone had, but nobody replied. Sorry man! It's tough to\nreproduce. You're like coding along, and then you naturally hit esc and\nctrl z and then BOOM the last like forty things are gone. You hit ctrl Y or\nwhatever it is to redo(muscle memory) and it doesn't happen. Then you shit\nbricks. Let me know when Vim mode is back, I really liked it!\n\nOn Tue, Jul 8, 2014 at 8:51 AM, Ben Lavender notifications@github.com\nwrote:\n\n> Geez, thanks for the link. You'd think people might open an issue on the\n> repo that caused the problem. What a disaster.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/338#issuecomment-48338237.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. How do I try this branch in atom? I've never done that before.\n\nOn Tue, Jul 8, 2014 at 10:57 AM, Ben Lavender notifications@github.com\nwrote:\n\n> Should fix atom/atom#2689 https://github.com/atom/atom/issues/2689\n> \n> @cranesandcaff https://github.com/cranesandcaff @bhgames\n> https://github.com/bhgames can you try this branch out and make sure it\n> \n> ## solves the issue you're having?\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/atom/vim-mode fix-undo-in-insert\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/atom/vim-mode/pull/344\n> Commit Summary\n> - Drop to command mode before processing an undo in insert mode\n> \n> File Changes\n> - _M_ lib/vim-state.coffee\n>   https://github.com/atom/vim-mode/pull/344/files#diff-0 (13)\n> - _M_ spec/vim-state-spec.coffee\n>   https://github.com/atom/vim-mode/pull/344/files#diff-1 (8)\n> \n> Patch Links:\n> - https://github.com/atom/vim-mode/pull/344.patch\n> - https://github.com/atom/vim-mode/pull/344.diff\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. I did that, and it looks like vim mode, activated, does nothing. I can't\nescape into non-insert mode or anything. Like a normal app.\n\nlocalhost:vim-mode arkavon$ git branch\n- fix-undo-in-insert\n\nI'm on the right one, and I reloaded atom, and vim mode is not disabled on\nmy settings.\n\nOn Tue, Jul 8, 2014 at 11:11 AM, Ben Lavender notifications@github.com\nwrote:\n\n> Just check out the branch in ~/.atom/packages/vim-mode:\n> \n> cd ~/.atom/packages\n> rm -rf vim-mode\n> git checkout https://github.com/atom/vim-mode\n> cd vim-mode\n> git fetch\n> git checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n> \n> Then just reload atom.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48361523.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. Error activating package config for \u201cvim-mode\u201d\n Error\n1. code: \"MODULE_NOT_FOUND\"\n2. message: \"Cannot find module 'underscore-plus'\"\n3. stack: (...)\n4. get stack: function () { [native code] }\n5. set stack: function () { [native code] }\n6. **proto**: d\n\nOn Tue, Jul 8, 2014 at 11:35 AM, Ben Lavender notifications@github.com\nwrote:\n\n> Sorry, alt-cmd-i.\n> \n> On Tue, Jul 8, 2014 at 11:34 AM, Ben Lavender blavender@github.com\n> wrote:\n> \n> > Do you have any errors on the console? cmd-shift-i.\n> > \n> > On Tue, Jul 8, 2014 at 11:30 AM, Jordan Prince notifications@github.com\n> > \n> > wrote:\n> > \n> > > I did that, and it looks like vim mode, activated, does nothing. I\n> > > can't\n> > > escape into non-insert mode or anything. Like a normal app.\n> > > \n> > > localhost:vim-mode arkavon$ git branch\n> > > - fix-undo-in-insert\n> > > \n> > > I'm on the right one, and I reloaded atom, and vim mode is not disabled\n> > > on\n> > > my settings.\n> > > \n> > > On Tue, Jul 8, 2014 at 11:11 AM, Ben Lavender notifications@github.com\n> > > \n> > > wrote:\n> > > \n> > > > Just check out the branch in ~/.atom/packages/vim-mode:\n> > > > \n> > > > cd ~/.atom/packages\n> > > > rm -rf vim-mode\n> > > > git checkout https://github.com/atom/vim-mode\n> > > > cd vim-mode\n> > > > git fetch\n> > > > git checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n> > > > \n> > > > Then just reload atom.\n> > > > \n> > > > \u2014\n> > > > Reply to this email directly or view it on GitHub\n> > > > https://github.com/atom/vim-mode/pull/344#issuecomment-48361523.\n> > > \n> > > ## \n> > > \n> > > Jordan Prince\n> > > \n> > > CTO - boardvitals.com\n> > > jordanmprince@gmail.com\n> > > [image: Facebook]\n> > > <\n> > > \n> > > http://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=>\n> > > \n> > > [image: Twitter]\n> > > <\n> > > \n> > > http://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=>\n> > > \n> > > [image: LinkedIn]\n> > > <\n> > > \n> > > http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=>\n> > > \n> > > [image: WordPress]\n> > > <\n> > > \n> > > http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=>\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/atom/vim-mode/pull/344#issuecomment-48364164.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48364877.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. Ok seems good\n\nOn Tue, Jul 8, 2014 at 12:27 PM, Ben Lavender notifications@github.com\nwrote:\n\n> Ahh, nuts, of course--run an npm install in that directory.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48371843.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. Cool. Can I update normally or do I need to remove this repo first?\n\nOn Tue, Jul 8, 2014 at 1:53 PM, Ben Lavender notifications@github.com\nwrote:\n\n> 0.12 includes this fix. Thanks guys.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48383801.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. Nevermind. GOt it.\n\nOn Tue, Jul 8, 2014 at 1:54 PM, Jordan Prince jordanmprince@gmail.com\nwrote:\n\n> Cool. Can I update normally or do I need to remove this repo first?\n> \n> On Tue, Jul 8, 2014 at 1:53 PM, Ben Lavender notifications@github.com\n> wrote:\n> \n> > 0.12 includes this fix. Thanks guys.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/atom/vim-mode/pull/344#issuecomment-48383801.\n> \n> ## \n> \n> Jordan Prince\n> \n> CTO - boardvitals.com\n> jordanmprince@gmail.com\n> [image: Facebook]\n> http://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n>  [image: Twitter]\n> http://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n>  [image: LinkedIn]\n> http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n>  [image: WordPress]\n> http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. Nope, it went away. I had to disable vim mode permanently though because\nthe undo/redo is busted. There is an open issue about it on the main atom\nrepo that someone else opened, but basically, you can undo entire pages of\ncode now in the new vim mode and it won't let you redo it. I lost enough\ncode and time I just had to disable the plugin entirely.\n\nhttps://github.com/atom/atom/issues/2689\n\nOn Mon, Jul 7, 2014 at 9:12 PM, Ben Lavender notifications@github.com\nwrote:\n\n> This sounds like an issue we had in older versions disabling and\n> reenabling the plugin. Does it persist after you start atom?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/338#issuecomment-48264508.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. I asked if someone had, but nobody replied. Sorry man! It's tough to\nreproduce. You're like coding along, and then you naturally hit esc and\nctrl z and then BOOM the last like forty things are gone. You hit ctrl Y or\nwhatever it is to redo(muscle memory) and it doesn't happen. Then you shit\nbricks. Let me know when Vim mode is back, I really liked it!\n\nOn Tue, Jul 8, 2014 at 8:51 AM, Ben Lavender notifications@github.com\nwrote:\n\n> Geez, thanks for the link. You'd think people might open an issue on the\n> repo that caused the problem. What a disaster.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/338#issuecomment-48338237.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. How do I try this branch in atom? I've never done that before.\n\nOn Tue, Jul 8, 2014 at 10:57 AM, Ben Lavender notifications@github.com\nwrote:\n\n> Should fix atom/atom#2689 https://github.com/atom/atom/issues/2689\n> \n> @cranesandcaff https://github.com/cranesandcaff @bhgames\n> https://github.com/bhgames can you try this branch out and make sure it\n> \n> ## solves the issue you're having?\n> \n> You can merge this Pull Request by running\n> \n>   git pull https://github.com/atom/vim-mode fix-undo-in-insert\n> \n> Or view, comment on, or merge it at:\n> \n>   https://github.com/atom/vim-mode/pull/344\n> Commit Summary\n> - Drop to command mode before processing an undo in insert mode\n> \n> File Changes\n> - _M_ lib/vim-state.coffee\n>   https://github.com/atom/vim-mode/pull/344/files#diff-0 (13)\n> - _M_ spec/vim-state-spec.coffee\n>   https://github.com/atom/vim-mode/pull/344/files#diff-1 (8)\n> \n> Patch Links:\n> - https://github.com/atom/vim-mode/pull/344.patch\n> - https://github.com/atom/vim-mode/pull/344.diff\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. I did that, and it looks like vim mode, activated, does nothing. I can't\nescape into non-insert mode or anything. Like a normal app.\n\nlocalhost:vim-mode arkavon$ git branch\n- fix-undo-in-insert\n\nI'm on the right one, and I reloaded atom, and vim mode is not disabled on\nmy settings.\n\nOn Tue, Jul 8, 2014 at 11:11 AM, Ben Lavender notifications@github.com\nwrote:\n\n> Just check out the branch in ~/.atom/packages/vim-mode:\n> \n> cd ~/.atom/packages\n> rm -rf vim-mode\n> git checkout https://github.com/atom/vim-mode\n> cd vim-mode\n> git fetch\n> git checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n> \n> Then just reload atom.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48361523.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. Error activating package config for \u201cvim-mode\u201d\n Error\n1. code: \"MODULE_NOT_FOUND\"\n2. message: \"Cannot find module 'underscore-plus'\"\n3. stack: (...)\n4. get stack: function () { [native code] }\n5. set stack: function () { [native code] }\n6. **proto**: d\n\nOn Tue, Jul 8, 2014 at 11:35 AM, Ben Lavender notifications@github.com\nwrote:\n\n> Sorry, alt-cmd-i.\n> \n> On Tue, Jul 8, 2014 at 11:34 AM, Ben Lavender blavender@github.com\n> wrote:\n> \n> > Do you have any errors on the console? cmd-shift-i.\n> > \n> > On Tue, Jul 8, 2014 at 11:30 AM, Jordan Prince notifications@github.com\n> > \n> > wrote:\n> > \n> > > I did that, and it looks like vim mode, activated, does nothing. I\n> > > can't\n> > > escape into non-insert mode or anything. Like a normal app.\n> > > \n> > > localhost:vim-mode arkavon$ git branch\n> > > - fix-undo-in-insert\n> > > \n> > > I'm on the right one, and I reloaded atom, and vim mode is not disabled\n> > > on\n> > > my settings.\n> > > \n> > > On Tue, Jul 8, 2014 at 11:11 AM, Ben Lavender notifications@github.com\n> > > \n> > > wrote:\n> > > \n> > > > Just check out the branch in ~/.atom/packages/vim-mode:\n> > > > \n> > > > cd ~/.atom/packages\n> > > > rm -rf vim-mode\n> > > > git checkout https://github.com/atom/vim-mode\n> > > > cd vim-mode\n> > > > git fetch\n> > > > git checkout -b fix-undo-in-insert origin/fix-undo-in-insert\n> > > > \n> > > > Then just reload atom.\n> > > > \n> > > > \u2014\n> > > > Reply to this email directly or view it on GitHub\n> > > > https://github.com/atom/vim-mode/pull/344#issuecomment-48361523.\n> > > \n> > > ## \n> > > \n> > > Jordan Prince\n> > > \n> > > CTO - boardvitals.com\n> > > jordanmprince@gmail.com\n> > > [image: Facebook]\n> > > <\n> > > \n> > > http://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=>\n> > > \n> > > [image: Twitter]\n> > > <\n> > > \n> > > http://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=>\n> > > \n> > > [image: LinkedIn]\n> > > <\n> > > \n> > > http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=>\n> > > \n> > > [image: WordPress]\n> > > <\n> > > \n> > > http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=>\n> > > \n> > > \u2014\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/atom/vim-mode/pull/344#issuecomment-48364164.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48364877.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. Ok seems good\n\nOn Tue, Jul 8, 2014 at 12:27 PM, Ben Lavender notifications@github.com\nwrote:\n\n> Ahh, nuts, of course--run an npm install in that directory.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48371843.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. Cool. Can I update normally or do I need to remove this repo first?\n\nOn Tue, Jul 8, 2014 at 1:53 PM, Ben Lavender notifications@github.com\nwrote:\n\n> 0.12 includes this fix. Thanks guys.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/344#issuecomment-48383801.\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. Nevermind. GOt it.\n\nOn Tue, Jul 8, 2014 at 1:54 PM, Jordan Prince jordanmprince@gmail.com\nwrote:\n\n> Cool. Can I update normally or do I need to remove this repo first?\n> \n> On Tue, Jul 8, 2014 at 1:53 PM, Ben Lavender notifications@github.com\n> wrote:\n> \n> > 0.12 includes this fix. Thanks guys.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/atom/vim-mode/pull/344#issuecomment-48383801.\n> \n> ## \n> \n> Jordan Prince\n> \n> CTO - boardvitals.com\n> jordanmprince@gmail.com\n> [image: Facebook]\n> http://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n>  [image: Twitter]\n> http://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n>  [image: LinkedIn]\n> http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n>  [image: WordPress]\n> http://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n\n## \n\nJordan Prince\n\nCTO - boardvitals.com\njordanmprince@gmail.com\n[image: Facebook]\nhttp://s.wisestamp.com/links?url=https%3A%2F%2Fwww.facebook.com%2Fboardvitals&sn=\n [image: Twitter]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Ftwitter.com%2Fboardvitals&sn=\n [image: LinkedIn]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fboard-vitals-llc%3Ftrk%3Dcompany_name&sn=\n [image: WordPress]\nhttp://s.wisestamp.com/links?url=http%3A%2F%2Fwww.boardvitals.com%2Fboard-review-blog%2F&sn=\n. ",
    "JFAlexanderS": "Same issue with the two panes here. It's especially common when you move a tab on the left pane to the right pane. \n. Same issue with the two panes here. It's especially common when you move a tab on the left pane to the right pane. \n. ",
    "jordwalke": "Any update on this?\n. I think undo/redo is pretty critical to the Vim editing experience. Undo/redo is also a form of navigation in Vim, and as we all know, navigation is key to the Vim \"feel\".\n. Any update here?\n. Thank you!\n. Oh, I'm so sorry - I had both tabs open and I was comparing. I'll file an issue on the right repo. Apologies everyone!\n. Any update on this?\n. I think undo/redo is pretty critical to the Vim editing experience. Undo/redo is also a form of navigation in Vim, and as we all know, navigation is key to the Vim \"feel\".\n. Any update here?\n. Thank you!\n. Oh, I'm so sorry - I had both tabs open and I was comparing. I'll file an issue on the right repo. Apologies everyone!\n. ",
    "giodamelio": "I agree, this is pretty important. I have been trying to use vim-mode for a few hours, and this is one of the things that has been bothering me.\n. I agree, this is pretty important. I have been trying to use vim-mode for a few hours, and this is one of the things that has been bothering me.\n. ",
    "stlehmann": "in the meanwhile it is actually working :+1:  \n. I tried your proposed modification of _keymap.cson_. So when typing `>` the About dialog is not showing. Actually it is just writing `>`. If I use the _Key Binding Resolver_ and press `>` it shows me the key `\u00e2`. So this actuallly seems like a _Atom-Core_ problem to me now as well. Also it seems like no solution exists.\n. OK, anyway thanks for your help :)\n. in the meanwhile it is actually working :+1:  \n. I tried your proposed modification of _keymap.cson_. So when typing `>` the About dialog is not showing. Actually it is just writing `>`. If I use the _Key Binding Resolver_ and press `>` it shows me the key `\u00e2`. So this actuallly seems like a _Atom-Core_ problem to me now as well. Also it seems like no solution exists.\n. OK, anyway thanks for your help :)\n. ",
    "joewilliams": "@bhuga I suppose I just anticipated cmd+z retaining the normal behavior and `:u` cloning vim behavior.\n. I am coming from sublime which does this.\n. @bhuga I suppose I just anticipated cmd+z retaining the normal behavior and `:u` cloning vim behavior.\n. I am coming from sublime which does this.\n. ",
    "wayou": "undo(ctrl-z) will back to the state when I open the file when vim mode is on, no matter how many you have typed and saved..and the redo(ctrl-y) seems not working on Windows Atom 0.115\n. hi @bhuga , the latest version 0.12.0.\nsimply I think in vim mode it should apply the `u/ctrl-r` combo and when in insert mode should go back to the editor's default `ctrl-z/ctrl-y` combo, what do u think?\n. hi @bhuga, I made a gif to show you the issue.\n- `ctrl-n` to create a new file\n- type sth.\n- `ctrl-s` to save\n- type some more thing\n- `ctrl-z` to undo, as you can see, even I have saved before, but the undo make this document back to the empty state when is was created\n- and even more, now I press `ctrl-y` to redo, want my things back, but nothing happen and there's an error in the console\n  ![vimmode](https://cloud.githubusercontent.com/assets/3783096/3653282/ddbed624-114e-11e4-8e4c-5c4435417be8.gif)\n. in insert mode, `ctrl-z`  is resolved by `core:undo` and bring the editor from insert mode to vim mode, then just use `ctrl-r` to redo it. \nthis works for me.\n\n@bhuga, just for your information, following is the error when in vim mode `ctrl-y` pressed.\nand it's resolved by both `vim-mode:scroll-up` and `core:redo`\n`Uncaught TypeError: Cannot read property 'tokens' of undefined c:\\ProgramData\\chocolatey\\lib\\atom.0.117.0\\tools\\atom\\resources\\app\\src\\display-buffer.js:767\n28`\n. undo(ctrl-z) will back to the state when I open the file when vim mode is on, no matter how many you have typed and saved..and the redo(ctrl-y) seems not working on Windows Atom 0.115\n. hi @bhuga , the latest version 0.12.0.\nsimply I think in vim mode it should apply the `u/ctrl-r` combo and when in insert mode should go back to the editor's default `ctrl-z/ctrl-y` combo, what do u think?\n. hi @bhuga, I made a gif to show you the issue.\n- `ctrl-n` to create a new file\n- type sth.\n- `ctrl-s` to save\n- type some more thing\n- `ctrl-z` to undo, as you can see, even I have saved before, but the undo make this document back to the empty state when is was created\n- and even more, now I press `ctrl-y` to redo, want my things back, but nothing happen and there's an error in the console\n  ![vimmode](https://cloud.githubusercontent.com/assets/3783096/3653282/ddbed624-114e-11e4-8e4c-5c4435417be8.gif)\n. in insert mode, `ctrl-z`  is resolved by `core:undo` and bring the editor from insert mode to vim mode, then just use `ctrl-r` to redo it. \nthis works for me.\n\n@bhuga, just for your information, following is the error when in vim mode `ctrl-y` pressed.\nand it's resolved by both `vim-mode:scroll-up` and `core:redo`\n`Uncaught TypeError: Cannot read property 'tokens' of undefined c:\\ProgramData\\chocolatey\\lib\\atom.0.117.0\\tools\\atom\\resources\\app\\src\\display-buffer.js:767\n28`\n. ",
    "jordanboston": "I am having the same problem as wayou, it seems that once you go back (undo) which I have done on accident twice now --there is no way to redo and get back what you just \"undid\"  --am I missing something? I am  new to VIM and would love to use this, but don't want to lose my work again.\n. This actually seems to be fixed for me in the latest version.  I had it disabled because of that, but after the recent updates I have been able to go back Cmd-Y --so far.  Thanks.\n. Thanks!\n. I am having the same problem as wayou, it seems that once you go back (undo) which I have done on accident twice now --there is no way to redo and get back what you just \"undid\"  --am I missing something? I am  new to VIM and would love to use this, but don't want to lose my work again.\n. This actually seems to be fixed for me in the latest version.  I had it disabled because of that, but after the recent updates I have been able to go back Cmd-Y --so far.  Thanks.\n. Thanks!\n. ",
    "stephenmuss": "I have experienced exactly the same behaviour as @wayou. I'm using version 0.12.0.\n. I have experienced exactly the same behaviour as @wayou. I'm using version 0.12.0.\n. ",
    "ddengler": "I get the vim style undo. Sadly a lot vim-mode implementations across different editors (sublime, jetbrains, xcode ...) rely on the \"regular\" implementation of undo, which is what I (and probably many others looking at the comments here and in the core editor) are used to. Would it be possible to configure this?\n. I get the vim style undo. Sadly a lot vim-mode implementations across different editors (sublime, jetbrains, xcode ...) rely on the \"regular\" implementation of undo, which is what I (and probably many others looking at the comments here and in the core editor) are used to. Would it be possible to configure this?\n. ",
    "karlhorky": ":+1: for the standard vim-mode undo from other editors (the last block of text entered). Or at least a setting for it. \n\nThis more granular undo is a nice feature to have in an editor. It's also pretty deeply ingrained in muscle memory from the other editors too.\n. Awesome, looks like as of Vim Mode `0.20.3`, undoing with `cmd-z` in insert mode is working more like other editors.\n. :+1: for the standard vim-mode undo from other editors (the last block of text entered). Or at least a setting for it. \n\nThis more granular undo is a nice feature to have in an editor. It's also pretty deeply ingrained in muscle memory from the other editors too.\n. Awesome, looks like as of Vim Mode `0.20.3`, undoing with `cmd-z` in insert mode is working more like other editors.\n. ",
    "dsandstrom": "Easy solution, add vim key binding for word-jumper\n\n```\n'.editor.vim-mode.command-mode:not(.insert-mode)':\n  'g \\'': 'word-jumper:move-right'\n  'g ;': 'word-jumper:move-left'\n```\n. Atom 0.117.0\n\nI have softWrap disabled and experiencing this.  It happens when I have code folded above and command mode.\n. Confirm this happens to me.\n. What seems to happening is:  The cursor is on a line, but vim-mode is trying to move across a line that is folded up above.  I assume it is a problem with vim-mode using screen coordinates when it should be using buffer.\n. I'll start adding support for this.  However, what should the keymaps be?  I was using `q`, which works great, but that would conflict with macros if they are ever added.  I would like to use a single key, but there are no keys available that I know about.  \n. I tried clearing my _~/.atom/storage_ directory, but the problem occurs again.\n. It might not be insert mode only, it seems to do it with vim mode enabled, also.\n. This would be helpful.\n. @maxbrunsfeld Just to confirm, visual and command mode `w` should wrap.  However, operator-pending mode `w` should not wrap (eg. `dw` and `d1000w`).\n. If there is only one word left, `dw` should delete to the end of the line and not join the next line.  However, I think `dw` should wrap if you are at the end of the line.   That is probably what you wanted, but I just want to be clear.\n\nI wasn't able to spend a lot of time on this over the weekend, but I did get something working.  For my solution, I had to use a modified `Cursor::wordRegExp`.  I need to add `$` to the normal one.  Should I make a PR to add a optional end of line to Atom's cursor or use a custom `@wordRegExp` that this package uses?  I don't think you can add two RegExp's together (I might be able to split the Atom's wordRegExp and re-join, but probably not worth it).\n. @bronson I agree now, we should match vim as much as possible.  That is what I was referring to in #581, but you said it more succinctly.\n\n> In vim, I noticed that dw also deletes the preceding space, which this PR doesn't fix.\n. I should have some time this weekend.\n. I submitted a PR (atom/atom#8403) to make this change simpler in vim-mode.  If it's merged, I will update #581 or submit a new one.  If it's rejected, I will clean up #581.\n. There is, however, a ex-mode package available: https://atom.io/packages/ex-mode.  I'm not sure if `:21` is implemented, but `:w` works.  The readme doesn't list the available commands, but you can look at the source to see what is: https://github.com/lloeki/ex-mode/blob/master/lib/ex.coffee#L26.\n. Can this be merged?  Seems useful.\n. I guess I was mistaken.  I was thinking that if you entered `dw` when your cursor was before the second word (`first |second`), that vim was also deleting the space after the first word.  But it is not the case.\n. @chrisvdb No, it's more of a proof of concept.  I'm waiting to hear from @maxbrunsfeld or @kevinsawicki for some feedback.\n. Easy solution, add vim key binding for word-jumper\n\n```\n'.editor.vim-mode.command-mode:not(.insert-mode)':\n  'g \\'': 'word-jumper:move-right'\n  'g ;': 'word-jumper:move-left'\n```\n. Atom 0.117.0\n\nI have softWrap disabled and experiencing this.  It happens when I have code folded above and command mode.\n. Confirm this happens to me.\n. What seems to happening is:  The cursor is on a line, but vim-mode is trying to move across a line that is folded up above.  I assume it is a problem with vim-mode using screen coordinates when it should be using buffer.\n. I'll start adding support for this.  However, what should the keymaps be?  I was using `q`, which works great, but that would conflict with macros if they are ever added.  I would like to use a single key, but there are no keys available that I know about.  \n. I tried clearing my _~/.atom/storage_ directory, but the problem occurs again.\n. It might not be insert mode only, it seems to do it with vim mode enabled, also.\n. This would be helpful.\n. @maxbrunsfeld Just to confirm, visual and command mode `w` should wrap.  However, operator-pending mode `w` should not wrap (eg. `dw` and `d1000w`).\n. If there is only one word left, `dw` should delete to the end of the line and not join the next line.  However, I think `dw` should wrap if you are at the end of the line.   That is probably what you wanted, but I just want to be clear.\n\nI wasn't able to spend a lot of time on this over the weekend, but I did get something working.  For my solution, I had to use a modified `Cursor::wordRegExp`.  I need to add `$` to the normal one.  Should I make a PR to add a optional end of line to Atom's cursor or use a custom `@wordRegExp` that this package uses?  I don't think you can add two RegExp's together (I might be able to split the Atom's wordRegExp and re-join, but probably not worth it).\n. @bronson I agree now, we should match vim as much as possible.  That is what I was referring to in #581, but you said it more succinctly.\n\n> In vim, I noticed that dw also deletes the preceding space, which this PR doesn't fix.\n. I should have some time this weekend.\n. I submitted a PR (atom/atom#8403) to make this change simpler in vim-mode.  If it's merged, I will update #581 or submit a new one.  If it's rejected, I will clean up #581.\n. There is, however, a ex-mode package available: https://atom.io/packages/ex-mode.  I'm not sure if `:21` is implemented, but `:w` works.  The readme doesn't list the available commands, but you can look at the source to see what is: https://github.com/lloeki/ex-mode/blob/master/lib/ex.coffee#L26.\n. Can this be merged?  Seems useful.\n. I guess I was mistaken.  I was thinking that if you entered `dw` when your cursor was before the second word (`first |second`), that vim was also deleting the space after the first word.  But it is not the case.\n. @chrisvdb No, it's more of a proof of concept.  I'm waiting to hear from @maxbrunsfeld or @kevinsawicki for some feedback.\n. ",
    "ryanvm": "No, it's not just when holding the key down. No matter whether I'm tapping\nor holding it down this occurs. Note that the columns that the right motion\ngets stuck at is always the end-of-line of some subsequent line. Also, this\nonly seems to occur on files that have lines that get wrapped.\n\nIf I had to conjecture, I'd guess that the logic for figuring out the\ncolumn that the current line ends on is getting tripped up by previous\nlines that have been wrapped.\n\nOn Fri, Jul 18, 2014 at 2:43 PM, Ben Lavender notifications@github.com\nwrote:\n\n> Sounds like a potential bug with our column-remembering or end-of-line\n> checking, but I've never run in to this. Are you holding the l or right\n> arrow key down when this happens, or tapping them quickly? Is there some\n> characteristic to 'certain lines' that makes this reproducible?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/350#issuecomment-49465796.\n. No, it's not just when holding the key down. No matter whether I'm tapping\nor holding it down this occurs. Note that the columns that the right motion\ngets stuck at is always the end-of-line of some subsequent line. Also, this\nonly seems to occur on files that have lines that get wrapped.\n\nIf I had to conjecture, I'd guess that the logic for figuring out the\ncolumn that the current line ends on is getting tripped up by previous\nlines that have been wrapped.\n\nOn Fri, Jul 18, 2014 at 2:43 PM, Ben Lavender notifications@github.com\nwrote:\n\n> Sounds like a potential bug with our column-remembering or end-of-line\n> checking, but I've never run in to this. Are you holding the l or right\n> arrow key down when this happens, or tapping them quickly? Is there some\n> characteristic to 'certain lines' that makes this reproducible?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/350#issuecomment-49465796.\n. ",
    "shafreeck": "@bhuga It works well if vim-mode is disabled. In fact the `close tab` shortcut key is `ctrl-w q` as @fotanus  indicated. However , the new problem is the tab is indeed closed after a certain seconds \ndelay when using `ctrl-w`\n. @fotanus  Thank you , now I understand how it works. The vim-mode have key bindings `ctrl-w q` to close a tab.  When I press `ctrl-w`, there is a delay waiting me to press the combined key `q`, If I don't , then the default atom key binding takes effect. Maybe this is a problem of atom core. \n. @bhuga It works well if vim-mode is disabled. In fact the `close tab` shortcut key is `ctrl-w q` as @fotanus  indicated. However , the new problem is the tab is indeed closed after a certain seconds \ndelay when using `ctrl-w`\n. @fotanus  Thank you , now I understand how it works. The vim-mode have key bindings `ctrl-w q` to close a tab.  When I press `ctrl-w`, there is a delay waiting me to press the combined key `q`, If I don't , then the default atom key binding takes effect. Maybe this is a problem of atom core. \n. ",
    "langri-sha": "Thank you all for the clarification. The powerhouse behind `ctrl+w <key>` looks amazing. Unfortunately, the 3 second wait when pressing `ctrl+w` led me to believe something was broken with `atom/vim-mode`.\n. Thank you all for the clarification. The powerhouse behind `ctrl+w <key>` looks amazing. Unfortunately, the 3 second wait when pressing `ctrl+w` led me to believe something was broken with `atom/vim-mode`.\n. ",
    "ssfrr": "Seems like this can be closed, though I'm glad the discussion was here because I was wondering why it was happening as well, and now it makes sense.\n\nIt's funny because I also commonly use the ctrl-w <key> shortcuts for moving around in splits and my brain didn't even connect that they were related. :smile: \n. you'll need to disable any of the other keybinding sequences that start with `ctrl-w`\n. :+1: \n. It'd be great to see this merged. vim-mode has very impressive support for vim commands but I definitely get tripped up by the lack of `R` to replace multiple characters.\n. I'm seeing this as well, and actually originally attributed it to bronson/vim-mode-next#1. I can reliably trigger it by opening a vertical split, or closing a vertical split if I opened Atom with one. Closing the split again doesn't fix the problem. After I restart Atom the problem goes away though. I tried this with all other plugins disabled. It does seem to be reliably reproducible.\n\nStrangely doing `yy` to yank a line causes the line to disappear (and the letter `y` is prepended to the next line).\n\nYanking from the command palette does not delete the line though.\n. Atom 1.0.0, vim-mode 0.54.0, tested on Ubuntu Trusty and OSX Yosemite\n. I just tested with some other change commands include `cw` to change a word and `cf_` to change everything up to an underscore and they repeat correctly with `.`, so I think this issue is limited to visual mode.\n. Agreed. In @bronson's comment I think that \"the 4 characters starting at the cursor\" should be \"the N characters starting at the cursor, where N is the length of the original selected word\".\n\nFor my own selfish impatience I'd be grateful if this made it into vim-mode-next. :smile:\n. `more-information-needed` was removed 6 days ago and `needs-reproduction` was removed 4 days ago. Now the only label is `bug`. Agreed that the old labels look prominently displayed up top but that's just in the historical record.\n. Thanks @kcaze. I just submitted a PR that followed your advice and it seems to work for me\n. Seems like this can be closed, though I'm glad the discussion was here because I was wondering why it was happening as well, and now it makes sense.\n\nIt's funny because I also commonly use the ctrl-w <key> shortcuts for moving around in splits and my brain didn't even connect that they were related. :smile: \n. you'll need to disable any of the other keybinding sequences that start with `ctrl-w`\n. :+1: \n. It'd be great to see this merged. vim-mode has very impressive support for vim commands but I definitely get tripped up by the lack of `R` to replace multiple characters.\n. I'm seeing this as well, and actually originally attributed it to bronson/vim-mode-next#1. I can reliably trigger it by opening a vertical split, or closing a vertical split if I opened Atom with one. Closing the split again doesn't fix the problem. After I restart Atom the problem goes away though. I tried this with all other plugins disabled. It does seem to be reliably reproducible.\n\nStrangely doing `yy` to yank a line causes the line to disappear (and the letter `y` is prepended to the next line).\n\nYanking from the command palette does not delete the line though.\n. Atom 1.0.0, vim-mode 0.54.0, tested on Ubuntu Trusty and OSX Yosemite\n. I just tested with some other change commands include `cw` to change a word and `cf_` to change everything up to an underscore and they repeat correctly with `.`, so I think this issue is limited to visual mode.\n. Agreed. In @bronson's comment I think that \"the 4 characters starting at the cursor\" should be \"the N characters starting at the cursor, where N is the length of the original selected word\".\n\nFor my own selfish impatience I'd be grateful if this made it into vim-mode-next. :smile:\n. `more-information-needed` was removed 6 days ago and `needs-reproduction` was removed 4 days ago. Now the only label is `bug`. Agreed that the old labels look prominently displayed up top but that's just in the historical record.\n. Thanks @kcaze. I just submitted a PR that followed your advice and it seems to work for me\n. ",
    "Valve": "What if I still want the tab to be closed immediately with Ctrl-w? I cannot get it to work.\nHere is my bindings file: \n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-c': 'core:copy'\n  'ctrl-v': 'core:paste'\n  'ctrl-a': 'core:select-all'\n  'ctrl-w': 'core:close'\n```\n. Since #616 got merged, will this have a fix as well?\n. @bronson , yes, I did, alt+e, then e.\n. @jacekkopecky thanks!\n. OK, just woke up. So my Atom version is `1.1.0` and vim plugin version is `0.63`. OSX 10.10.5.\n\nI'm opening a large Ruby file (2000 lines of code). The cursor is on line 1. Then I press `Ctrl+F`.  The page is scrolled and the cursor jumps to the first line of the current screen on line 31. Then I press `Ctrl+F` again, the cursor jumps to the first line of the new page and becomes situated on line 61.\n _This works as expected_.\n\nWhat is not working as expected:\n1. When I did the scroll with `Ctrl+F` and the cursor is on the first line of the current page (line 31) and then I press `j` to move one line down, the page shifts up one line to reveal the line 30, while the cursor goes one line down simultaneously to line 32. This is not how Vim works. What it should do is to not shift the page up one line, but only move the cursor down.\n2.  When the cursor is off-screen and I do Ctrl+F, the cursor will not jump to the first line of the current page (same for Ctrl+B). It should, however.\n\nPlease let me know if I should create a GIF to demo the issue.\n. Yes, you're right. Closing it now, but we should implement the cursor following the scroll behavior then. Please let me know if there is no such ticket already.\n. sure, thanks\n. Wow, I've just opened the 1000th issue. Am I entitled to a free copy of Atom-Vim plugin?\n. What if I still want the tab to be closed immediately with Ctrl-w? I cannot get it to work.\nHere is my bindings file: \n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-c': 'core:copy'\n  'ctrl-v': 'core:paste'\n  'ctrl-a': 'core:select-all'\n  'ctrl-w': 'core:close'\n```\n. Since #616 got merged, will this have a fix as well?\n. @bronson , yes, I did, alt+e, then e.\n. @jacekkopecky thanks!\n. OK, just woke up. So my Atom version is `1.1.0` and vim plugin version is `0.63`. OSX 10.10.5.\n\nI'm opening a large Ruby file (2000 lines of code). The cursor is on line 1. Then I press `Ctrl+F`.  The page is scrolled and the cursor jumps to the first line of the current screen on line 31. Then I press `Ctrl+F` again, the cursor jumps to the first line of the new page and becomes situated on line 61.\n _This works as expected_.\n\nWhat is not working as expected:\n1. When I did the scroll with `Ctrl+F` and the cursor is on the first line of the current page (line 31) and then I press `j` to move one line down, the page shifts up one line to reveal the line 30, while the cursor goes one line down simultaneously to line 32. This is not how Vim works. What it should do is to not shift the page up one line, but only move the cursor down.\n2.  When the cursor is off-screen and I do Ctrl+F, the cursor will not jump to the first line of the current page (same for Ctrl+B). It should, however.\n\nPlease let me know if I should create a GIF to demo the issue.\n. Yes, you're right. Closing it now, but we should implement the cursor following the scroll behavior then. Please let me know if there is no such ticket already.\n. sure, thanks\n. Wow, I've just opened the 1000th issue. Am I entitled to a free copy of Atom-Vim plugin?\n. ",
    "lemongrassnginger": "Unsetting these bindings in my key map works for me:\n\n```\n# ctrl-w close vim-mode waiting for ctrl-w <key> before closing\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-w left': 'unset!' #'window:focus-pane-on-left'\n  'ctrl-w right': 'unset!' #'window:focus-pane-on-right'\n  'ctrl-w up': 'unset!' #'window:focus-pane-on-up'\n  'ctrl-w down': 'unset!' #'window:focus-pane-on-down'\n  'ctrl-w h': 'unset!' #'window:focus-pane-on-left'\n  'ctrl-w l': 'unset!' #'window:focus-pane-on-right'\n  'ctrl-w k': 'unset!' #'window:focus-pane-on-up'\n  'ctrl-w j': 'unset!' #'window:focus-pane-on-down'\n  'ctrl-w w': 'unset!' #window:focus-next-pane\n  'ctrl-w p': 'unset!' #window:focus-previous-pane\n  'ctrl-w v': 'unset!' #pane:split-right\n  'ctrl-w s': 'unset!' #pane:split-down\n  'ctrl-w c': 'unset!' #pane:close\n  'ctrl-w q': 'unset!' #pane:close\n  'ctrl-w ctrl-h': 'unset!' #'window:focus-pane-on-left'\n  'ctrl-w ctrl-l': 'unset!' #'window:focus-pane-on-right'\n  'ctrl-w ctrl-k': 'unset!' #'window:focus-pane-on-up'\n  'ctrl-w ctrl-j': 'unset!' #'window:focus-pane-on-down'\n  'ctrl-w ctrl-w': 'unset!' #window:focus-next-pane\n  'ctrl-w ctrl-p': 'unset!' #window:focus-previous-pane\n  'ctrl-w ctrl-v': 'unset!' #pane:split-right\n  'ctrl-w ctrl-s': 'unset!' #pane:split-down\n  'ctrl-w ctrl-c': 'unset!' #pane:close\n  'ctrl-w ctrl-q': 'unset!' #pane:close\n```\n. Yeah, that's a much neater way :)\n. Unsetting these bindings in my key map works for me:\n\n```\n# ctrl-w close vim-mode waiting for ctrl-w <key> before closing\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'ctrl-w left': 'unset!' #'window:focus-pane-on-left'\n  'ctrl-w right': 'unset!' #'window:focus-pane-on-right'\n  'ctrl-w up': 'unset!' #'window:focus-pane-on-up'\n  'ctrl-w down': 'unset!' #'window:focus-pane-on-down'\n  'ctrl-w h': 'unset!' #'window:focus-pane-on-left'\n  'ctrl-w l': 'unset!' #'window:focus-pane-on-right'\n  'ctrl-w k': 'unset!' #'window:focus-pane-on-up'\n  'ctrl-w j': 'unset!' #'window:focus-pane-on-down'\n  'ctrl-w w': 'unset!' #window:focus-next-pane\n  'ctrl-w p': 'unset!' #window:focus-previous-pane\n  'ctrl-w v': 'unset!' #pane:split-right\n  'ctrl-w s': 'unset!' #pane:split-down\n  'ctrl-w c': 'unset!' #pane:close\n  'ctrl-w q': 'unset!' #pane:close\n  'ctrl-w ctrl-h': 'unset!' #'window:focus-pane-on-left'\n  'ctrl-w ctrl-l': 'unset!' #'window:focus-pane-on-right'\n  'ctrl-w ctrl-k': 'unset!' #'window:focus-pane-on-up'\n  'ctrl-w ctrl-j': 'unset!' #'window:focus-pane-on-down'\n  'ctrl-w ctrl-w': 'unset!' #window:focus-next-pane\n  'ctrl-w ctrl-p': 'unset!' #window:focus-previous-pane\n  'ctrl-w ctrl-v': 'unset!' #pane:split-right\n  'ctrl-w ctrl-s': 'unset!' #pane:split-down\n  'ctrl-w ctrl-c': 'unset!' #pane:close\n  'ctrl-w ctrl-q': 'unset!' #pane:close\n```\n. Yeah, that's a much neater way :)\n. ",
    "webberwang": "@AsaAyers thanks been looking for this solution all over the web. @AsaAyers thanks been looking for this solution all over the web. ",
    "davidermined": "@samlambert \r\noh this finally makes sense! Thank you!\r\nIs there any reason, though, that this (or any) shortcut is shown for close tab,\r\nwhen searching for it in the command palette or is that a bug, I should report (and where should I report it)?. @samlambert \r\noh this finally makes sense! Thank you!\r\nIs there any reason, though, that this (or any) shortcut is shown for close tab,\r\nwhen searching for it in the command palette or is that a bug, I should report (and where should I report it)?. ",
    "rverton": "See #354\n. See #354\n. ",
    "Zren": "I just remembered about soft wraps. Which makes converting to ScreenRange as in #353 the more viable method. We need to make a `Editor.lineLengthForScreenRow(screenRow)`.\n\nEdit: \n\n``` coffeescript\nlineLengthForScreenRow = (editor, screenRow) ->\n  lineBufferRange = editor.bufferRangeForBufferRow(screenRow)\n  screenRowEndPosition = editor.clipScreenPosition(lineBufferRange.end)\n  screenRowLastColumn = screenRowEndPosition.column\n\n  return ?\n```\n\nWe can just use:\n\n``` coffeescript\nlastColumnForScreenRow = (editor, screenRow) ->\n  lineBufferRange = editor.bufferRangeForBufferRow(screenRow)\n  screenRowEndPosition = editor.clipScreenPosition(lineBufferRange.end)\n  return screenRowEndPosition.column\n```\n\nLike so:\n\n``` coffeescript\nclass MoveRight extends Motion\n  execute: (count=1) ->\n    _.times count, =>\n      {row, column} = @editor.getCursorScreenPosition()\n      screenRowLastColumn = lastColumnForScreenRow(@editor, row)\n      if column < screenRowLastColumn\n        @editor.moveCursorRight()\n```\n. I just remembered about soft wraps. Which makes converting to ScreenRange as in #353 the more viable method. We need to make a `Editor.lineLengthForScreenRow(screenRow)`.\n\nEdit: \n\n``` coffeescript\nlineLengthForScreenRow = (editor, screenRow) ->\n  lineBufferRange = editor.bufferRangeForBufferRow(screenRow)\n  screenRowEndPosition = editor.clipScreenPosition(lineBufferRange.end)\n  screenRowLastColumn = screenRowEndPosition.column\n\n  return ?\n```\n\nWe can just use:\n\n``` coffeescript\nlastColumnForScreenRow = (editor, screenRow) ->\n  lineBufferRange = editor.bufferRangeForBufferRow(screenRow)\n  screenRowEndPosition = editor.clipScreenPosition(lineBufferRange.end)\n  return screenRowEndPosition.column\n```\n\nLike so:\n\n``` coffeescript\nclass MoveRight extends Motion\n  execute: (count=1) ->\n    _.times count, =>\n      {row, column} = @editor.getCursorScreenPosition()\n      screenRowLastColumn = lastColumnForScreenRow(@editor, row)\n      if column < screenRowLastColumn\n        @editor.moveCursorRight()\n```\n. ",
    "harperic": "Misclick; it only seems to be happening in the right pane of a split window. Did not mean to close the issue.\n. yes\n. No problem. Thanks\n. Misclick; it only seems to be happening in the right pane of a split window. Did not mean to close the issue.\n. yes\n. No problem. Thanks\n. ",
    "tristil": "@bhuga I'm rebased off master. It's tricky to replicate, but if you run the test without the code change it should fail. Try this pattern:\n\n```\nabc\n\ndef\n\nabc\n```\n\nyank something, then from the d in def hit 'o' or 'O' then the register should be cleared.\n. It does for me, but only when I have two newlines in a row, which I don't totally understand from the code. I think that it has to do with https://github.com/atom/vim-mode/blob/master/lib/operators/input.coffee#L42 eating up all whitespace.\n. Closing this for now because this breaks the behavior of being able to delete a newline and have it in the register.\n. @bhuga I'm rebased off master. It's tricky to replicate, but if you run the test without the code change it should fail. Try this pattern:\n\n```\nabc\n\ndef\n\nabc\n```\n\nyank something, then from the d in def hit 'o' or 'O' then the register should be cleared.\n. It does for me, but only when I have two newlines in a row, which I don't totally understand from the code. I think that it has to do with https://github.com/atom/vim-mode/blob/master/lib/operators/input.coffee#L42 eating up all whitespace.\n. Closing this for now because this breaks the behavior of being able to delete a newline and have it in the register.\n. ",
    "Nohac": "Changing keybindings was not the issue, but \u00f8 does not work, pressing \u00f8 does nothing even if its set to use it as vim-mode:move-right!\n. Changing keybindings was not the issue, but \u00f8 does not work, pressing \u00f8 does nothing even if its set to use it as vim-mode:move-right!\n. ",
    "fbrundu": "Hi @bhuga,\nI think we can close this issue: I forgot to reload Atom. Now, after restarting Atom, the keybinding is unset.\nThanks and sorry for the inconvenience\n. Happens to me as well on Atom v0.116 on Ubuntu 14.04:\n\n![out](https://cloud.githubusercontent.com/assets/697622/3803118/c4fc5eb8-1c16-11e4-934d-e03674132b9d.gif)\n. Hi @bhuga,\nI think we can close this issue: I forgot to reload Atom. Now, after restarting Atom, the keybinding is unset.\nThanks and sorry for the inconvenience\n. Happens to me as well on Atom v0.116 on Ubuntu 14.04:\n\n![out](https://cloud.githubusercontent.com/assets/697622/3803118/c4fc5eb8-1c16-11e4-934d-e03674132b9d.gif)\n. ",
    "Rosseyn": "Fold line 118:\n\n``` javascript\n$scope.save = function(data, name) {\n```\n\nAnd attempt to hold right arrow or L key anywhere below that (I had success replicating this on lines 159 and 161, but not 160).\n\n``` javascript\n'use strict';\n/* create Controllers */\nvar createControllers = {};\ncreateControllers.SwellCreateCtrl = function($scope, $location, $timeout, Swell, Field, Task, Tag) {\n  $scope.browser = {placeholder : Modernizr.placeholder, history : Modernizr.history};\n  $scope.page = {number : $location.path().search('/swelldetails/') > -1 ? 2 : 1 };\n  $scope.page.page1valid = false;\n  $scope.page.page2valid = false;\n  $scope.page.validFields = {};\n  $scope.page.validField = true;\n  $scope.swellId = $('form#swell-create').data('swell-id');\n  $scope.savehide = true;\n  $scope.newTag= {};\n\n  $scope.swell = Swell.get({swellId: $scope.swellId}, function(s) {\n    $scope.save({field:'name', value:$scope.swell.name});\n    if( !s.extraFieldTitle ) s.extraFieldTitle = 'Area for adding more information. (optional)';\n\n    if( $scope.page.number == 1 ) {\n      // Load existing information\n      $scope.currentCategory = $scope.getCategoryName(s.category_id);\n\n      // Validate populated fields\n      var requiredFields = ['name', 'brief', 'problem', 'category_id'];\n    }\n\n    if( $scope.page.number == 2 ) {\n      s.ask_amount = parseInt(s.ask_amount);\n      s.days_of_work = parseInt(s.days_of_work);\n\n      // Load existing information\n      Tag.get({id: $scope.swell.id}, function(t) {\n        $scope.tags = t.tags;\n      });\n\n      Task.get({swellId: $scope.swell.id}, function(t) {\n        $scope.tasks = t.tasks;\n        $scope.page.validFields.tasks = {valid: $scope.tasks.length > 0};\n        $scope.tasks.push({});\n      });\n\n      // Show validation for populated fields\n      var requiredFields = ['solution', 'fixed', 'ask_amount', 'expires', 'days_of_work', 'solvers', 'solvable'];\n    }\n\n    requiredFields.forEach(function(el, i, arr) {\n      $scope.page.validFields[el] = {valid: !!s[el], errors: []}\n    });\n\n    if( !$scope.swellId ) {\n      s.knowSolution = '';\n      $scope.swell.id = s.id;\n      if ($scope.browser.history) {\n        $location.path('/swells/create/' + s.id);\n      } else {\n        window.location.href='' + baseUrl + 'swells/create/' + s.id;\n      }\n    }\n\n    $scope.$watch('swell.expires', function(newValue, oldValue) {\n      if( oldValue !== newValue ) {\n        $scope.save({field:'expires', value:$scope.swell.expires}, 'enter-days-funding');\n      }\n    });\n\n    $scope.$broadcast('swellUpdate', s);\n  });\n\n  $scope.isPage2Edited = function() {\n    return $scope.swell.solution || $scope.swell.finePrint || $scope.swell.daysWork;\n  };\n\n  $scope.page1CanLaunch = function() {\n    return $scope.page.page1valid && !$scope.fieldErrorCheck();\n  };\n\n  $scope.canLaunch = function() {\n    return $scope.page.page1valid && $scope.page.page2valid && !$scope.fieldErrorCheck();\n  };\n\n  $scope.fieldErrorCheck = function() {\n    // Spot check state of form after any changes are made, disallow continue\n    // or launch if local errors are found even if there are no remote errors\n    var keys = Object.keys($scope.page.validFields);\n    var errors = keys.filter(function(field) {\n      return !!$scope.page.validFields[field] &&\n              !!$scope.page.validFields[field].errors &&\n              Object.keys($scope.page.validFields[field].errors).length > 0;\n    });\n    return errors.length > 0;\n  };\n\n  $scope.onlyNumbers = function(e) {\n    // Allow numbers, arrows, backspace, delete, tab and function keys\n    if( (e.keyCode < 48 || e.keyCode > 57) &&\n        !((e.keyCode == 46  || e.keyCode == 8     || e.keyCode == 9 ||\n          (e.keyCode >= 37  && e.keyCode <= 40)   ||\n          (e.keyCode >= 96  && e.keyCode <= 105)  ||\n          (e.keyCode >= 112 && e.keyCode <= 123)  )) )\n      e.preventDefault();\n  };\n\n  var sendTimeout,\n      sendTimeoutDelay = 1000; // 1 second\n\n  $scope.saveTimeout = function(data, name) {\n    if( !!$scope.page.validFields[data.field] ) {\n      $scope.page.validFields[data.field].saved = false;\n    } else {\n      $scope.page.validFields[data.field] = {saved : false};\n    }\n    $timeout.cancel(sendTimeout);\n    sendTimeout = $timeout(function() {\n      $scope.save(data,name);\n    }, sendTimeoutDelay);\n  };\n\n  $scope.save = function(data, name) {\n    if( !$scope.page.validFields[data.field] ) $scope.page.validFields[data.field] = {};\n    if( !!$scope.page.validFields[data.field] && !!$scope.page.validFields[data.field].saved ) return;\n    $timeout.cancel(sendTimeout);\n    var field = Field.save({id: $scope.swell.id, field:data.field, value:data.value, page: $scope.page.number}, function(f) {\n      !!$scope.page.validFields[data.field] ?\n        $scope.page.validFields[data.field].saved = true :\n        $scope.page.validFields[data.field] = {saved : true};\n\n      $scope.page.validFields[data.field].valid = f.field_validity.valid;\n      $scope.page.validFields[data.field].errors = f.field_validity.errors;\n      $scope.page.page1valid = f.page1_validity.valid;\n      $scope.page.page2valid = f.page2_validity.valid;\n\n      if( !!name ) {\n        var el = $('[name='+ name +']');\n        if( f.field_validity.valid ) {\n          $scope.page.validField = true;\n          $scope.page.validFields[data.field].activeSaved = true;\n          $timeout(function() {\n            $scope.page.validFields[data.field].activeSaved = false;\n          }, 4000);\n        } else {\n          $scope.page.validField = false;\n          var fieldErrorText = f.field_validity.errors[f.field][0];\n          el.parent().siblings('span.field-error').children('span.message-text')\n            .text(fieldErrorText);\n          $scope.page.validFields[data.field].activeError = true;\n          $timeout(function() {\n            $scope.page.validFields[data.field].activeError = false;\n          }, 4000)\n        }\n      }\n    });\n  };\n\n  $scope.$on('destroy', function(e) {$timeout.cancel()});\n\n  /**\n   * Page 1 functions\n   */\n  if( $scope.page.number == 1 ) {\n    $scope.categories = {};\n    $scope.setCategories = function(cats) {\n      $scope.categories = cats;\n    };\n\n    $scope.currentCategory = false;\n    $scope.getCategoryName = function(id) {\n      var currentCat = $scope.categories.filter(function(cat) {\n        return cat.categoryId == id;\n      });\n      return currentCat.length > 0 ? currentCat[0].name : 'Pick one';\n    };\n\n    $scope.categoryFlags = function () {\n      return !!$scope.page.validFields.category_id && !!$scope.page.validFields.category_id.valid;\n    };\n\n    $scope.locationUpdate = function() {\n      $scope.swell.latitude = $('#searchLocation').data('latitude');\n      $scope.swell.longitude = $('#searchLocation').data('longitude');\n      $scope.swell.zip = !!$('#searchLocation').data('zip') ? $('#searchLocation').data('zip') : null;\n      $scope.swell.city = !!$('#searchLocation').data('city') ? $('#searchLocation').data('city') : null;\n      $scope.swell.state = !!$('#searchLocation').data('state') ? $('#searchLocation').data('state') : null;\n      Field.save({id: $scope.swell.id, field:'latitude', value:$scope.swell.latitude, page: $scope.page.number},\n        function(f) {\n          if( !!f.page1_validity ) $scope.page.page1valid = f.page1_validity.valid;\n          if( !!f.page2_validity ) $scope.page.page2valid = f.page2_validity.valid;\n          $scope.page.validFields[f.field] = f.field_validity;\n          Field.save({id: $scope.swell.id, field:'longitude', value:$scope.swell.longitude, page: $scope.page.number}, function(fi) {\n            if( !!fi.page1_validity ) $scope.page.page1valid = fi.page1_validity.valid;\n            if( !!fi.page2_validity ) $scope.page.page2valid = fi.page2_validity.valid;\n            $scope.page.validFields[fi.field] = fi.field_validity;\n\n            Field.save({id: $scope.swell.id, field:'city', value:$scope.swell.city, page: $scope.page.number}, function(fie) {\n              $scope.page.validFields[fie.field] = fie.field_validity;\n              Field.save({id: $scope.swell.id, field:'state', value:$scope.swell.state, page: $scope.page.number}, function(fiel) {\n                $scope.page.validFields[fiel.field] = fiel.field_validity;\n              });\n            });\n          });\n        }\n      );\n    };\n\n    $scope.continue = function() {\n      Swell.continue({id: $scope.swell.id}, function(s) {\n        if( s.errors ) {\n          // Report errors to user\n        } else {\n          if($scope.page1CanLaunch()) {\n            window.location = \"/swells/create/swelldetails/\" + $scope.swell.id;\n          }\n        }\n      })\n    };\n  }\n\n\n  $scope.launch = function(e) {\n    e.preventDefault();\n    Swell.launch({id: $scope.swell.id}, function(s) {\n      $scope.swell.slug = s.slug;\n      if( s.errors ) {\n        // Report errors to user\n      } else {\n        if($scope.page1CanLaunch()) { \n          window.location = \"/swells/\"+ s.slug;\n        }\n      }\n    })\n  };\n\n  /**\n   * Page 2 functions\n   */\n  $scope.addTask = function() {\n    $scope.tasks.push({});\n  };\n\n  var taskTimeoutDelay = 1000; // 1 second\n  $scope.taskSave = function(task) {\n    $timeout.cancel(task.timeout);\n    Task.save({id: task.id, swellId: $scope.swell.id, description: task.description}, function(t) {\n      task.id = t.taskId;\n      var validTaskCount = $scope.validTaskCount();\n      if( t.action == 'create' && $scope.tasks.length - validTaskCount < 1 )\n        $scope.addTask();\n    });\n  };\n\n  $scope.taskSaveTimeout = function(task) {\n    $timeout.cancel(task.timeout);\n    task.timeout = $timeout(function() {\n      $scope.taskSave(task);\n    }, taskTimeoutDelay)\n  };\n\n  $scope.taskDelete = function(task) {\n    $timeout.cancel(task.timeout);\n    if( !!task.id ) {\n      Task.delete({id: task.id, swellId: $scope.swell.id}, function(t) {\n        $scope.tasks.splice($scope.tasks.indexOf(task), 1);\n        $scope.validTaskCount();\n      });\n    } else {\n      $scope.tasks.splice($scope.tasks.indexOf(task), 1);\n    }\n  };\n\n  $scope.validTaskCount = function() {\n    var savedTasks = $scope.tasks.filter(function(task) {\n      return !!task.id;\n    })\n\n    $scope.page.validFields.tasks.valid = savedTasks.length > 0;\n    return savedTasks.length;\n  };\n\n  $scope.taskKeystroke = function(e, task) {\n    if( e.keyCode == 9 || e.keyCode == 13) {\n      e.preventDefault();\n      $scope.taskSave(task);\n    }\n  };\n\n  $scope.tagToggle = function(tag) {\n    if( !tag.isSwellTag ) {\n      Tag.add({swellId: $scope.swell.id, tagId: tag.tagId}, function(t) {\n        tag.isSwellTag = true;\n      });\n    } else {\n      Tag.delete({swellId: $scope.swell.id, tagId: tag.tagId}, function(t) {\n        tag.isSwellTag = false;\n      });\n    }\n  };\n\n  $scope.addDaysToDate = function() {\n    var days = $scope.swell.daysFunding;\n    var dat = new Date();\n    dat.setDate(dat.getDate() + days * 1.0);\n    var dateVal = dat.getUTCFullYear() + '-' + padDate(dat.getUTCMonth()+1) + '-' + padDate(dat.getUTCDate());\n    $scope.swell.expires = dateVal;\n  };\n\n  $scope.solverCheck = function() {\n    if( $scope.swell.fixed == 1 ) {\n      return  !!$scope.page.validFields.ask_amount    && !!$scope.page.validFields.ask_amount.valid &&\n              !!$scope.page.validFields.expires       && !!$scope.page.validFields.expires.valid;\n    } else {\n      return  !!$scope.page.validFields.days_of_work  && !!$scope.page.validFields.days_of_work.valid;\n    }\n  };\n\n  $scope.launchFull = function(e) {\n    e.preventDefault();\n    Swell.launchFull({id: $scope.swell.id}, function(s) {\n      $scope.swell.slug = s.slug;\n      if( s.errors ) {\n        // Report errors to user\n      } else {\n        if($scope.canLaunch()) {\n          window.location = \"/swells/\"+ s.slug;\n        }\n      }\n    });\n  };\n\n};\n\ncreate.controller(createControllers);\n```\n. Fold line 118:\n\n``` javascript\n$scope.save = function(data, name) {\n```\n\nAnd attempt to hold right arrow or L key anywhere below that (I had success replicating this on lines 159 and 161, but not 160).\n\n``` javascript\n'use strict';\n/* create Controllers */\nvar createControllers = {};\ncreateControllers.SwellCreateCtrl = function($scope, $location, $timeout, Swell, Field, Task, Tag) {\n  $scope.browser = {placeholder : Modernizr.placeholder, history : Modernizr.history};\n  $scope.page = {number : $location.path().search('/swelldetails/') > -1 ? 2 : 1 };\n  $scope.page.page1valid = false;\n  $scope.page.page2valid = false;\n  $scope.page.validFields = {};\n  $scope.page.validField = true;\n  $scope.swellId = $('form#swell-create').data('swell-id');\n  $scope.savehide = true;\n  $scope.newTag= {};\n\n  $scope.swell = Swell.get({swellId: $scope.swellId}, function(s) {\n    $scope.save({field:'name', value:$scope.swell.name});\n    if( !s.extraFieldTitle ) s.extraFieldTitle = 'Area for adding more information. (optional)';\n\n    if( $scope.page.number == 1 ) {\n      // Load existing information\n      $scope.currentCategory = $scope.getCategoryName(s.category_id);\n\n      // Validate populated fields\n      var requiredFields = ['name', 'brief', 'problem', 'category_id'];\n    }\n\n    if( $scope.page.number == 2 ) {\n      s.ask_amount = parseInt(s.ask_amount);\n      s.days_of_work = parseInt(s.days_of_work);\n\n      // Load existing information\n      Tag.get({id: $scope.swell.id}, function(t) {\n        $scope.tags = t.tags;\n      });\n\n      Task.get({swellId: $scope.swell.id}, function(t) {\n        $scope.tasks = t.tasks;\n        $scope.page.validFields.tasks = {valid: $scope.tasks.length > 0};\n        $scope.tasks.push({});\n      });\n\n      // Show validation for populated fields\n      var requiredFields = ['solution', 'fixed', 'ask_amount', 'expires', 'days_of_work', 'solvers', 'solvable'];\n    }\n\n    requiredFields.forEach(function(el, i, arr) {\n      $scope.page.validFields[el] = {valid: !!s[el], errors: []}\n    });\n\n    if( !$scope.swellId ) {\n      s.knowSolution = '';\n      $scope.swell.id = s.id;\n      if ($scope.browser.history) {\n        $location.path('/swells/create/' + s.id);\n      } else {\n        window.location.href='' + baseUrl + 'swells/create/' + s.id;\n      }\n    }\n\n    $scope.$watch('swell.expires', function(newValue, oldValue) {\n      if( oldValue !== newValue ) {\n        $scope.save({field:'expires', value:$scope.swell.expires}, 'enter-days-funding');\n      }\n    });\n\n    $scope.$broadcast('swellUpdate', s);\n  });\n\n  $scope.isPage2Edited = function() {\n    return $scope.swell.solution || $scope.swell.finePrint || $scope.swell.daysWork;\n  };\n\n  $scope.page1CanLaunch = function() {\n    return $scope.page.page1valid && !$scope.fieldErrorCheck();\n  };\n\n  $scope.canLaunch = function() {\n    return $scope.page.page1valid && $scope.page.page2valid && !$scope.fieldErrorCheck();\n  };\n\n  $scope.fieldErrorCheck = function() {\n    // Spot check state of form after any changes are made, disallow continue\n    // or launch if local errors are found even if there are no remote errors\n    var keys = Object.keys($scope.page.validFields);\n    var errors = keys.filter(function(field) {\n      return !!$scope.page.validFields[field] &&\n              !!$scope.page.validFields[field].errors &&\n              Object.keys($scope.page.validFields[field].errors).length > 0;\n    });\n    return errors.length > 0;\n  };\n\n  $scope.onlyNumbers = function(e) {\n    // Allow numbers, arrows, backspace, delete, tab and function keys\n    if( (e.keyCode < 48 || e.keyCode > 57) &&\n        !((e.keyCode == 46  || e.keyCode == 8     || e.keyCode == 9 ||\n          (e.keyCode >= 37  && e.keyCode <= 40)   ||\n          (e.keyCode >= 96  && e.keyCode <= 105)  ||\n          (e.keyCode >= 112 && e.keyCode <= 123)  )) )\n      e.preventDefault();\n  };\n\n  var sendTimeout,\n      sendTimeoutDelay = 1000; // 1 second\n\n  $scope.saveTimeout = function(data, name) {\n    if( !!$scope.page.validFields[data.field] ) {\n      $scope.page.validFields[data.field].saved = false;\n    } else {\n      $scope.page.validFields[data.field] = {saved : false};\n    }\n    $timeout.cancel(sendTimeout);\n    sendTimeout = $timeout(function() {\n      $scope.save(data,name);\n    }, sendTimeoutDelay);\n  };\n\n  $scope.save = function(data, name) {\n    if( !$scope.page.validFields[data.field] ) $scope.page.validFields[data.field] = {};\n    if( !!$scope.page.validFields[data.field] && !!$scope.page.validFields[data.field].saved ) return;\n    $timeout.cancel(sendTimeout);\n    var field = Field.save({id: $scope.swell.id, field:data.field, value:data.value, page: $scope.page.number}, function(f) {\n      !!$scope.page.validFields[data.field] ?\n        $scope.page.validFields[data.field].saved = true :\n        $scope.page.validFields[data.field] = {saved : true};\n\n      $scope.page.validFields[data.field].valid = f.field_validity.valid;\n      $scope.page.validFields[data.field].errors = f.field_validity.errors;\n      $scope.page.page1valid = f.page1_validity.valid;\n      $scope.page.page2valid = f.page2_validity.valid;\n\n      if( !!name ) {\n        var el = $('[name='+ name +']');\n        if( f.field_validity.valid ) {\n          $scope.page.validField = true;\n          $scope.page.validFields[data.field].activeSaved = true;\n          $timeout(function() {\n            $scope.page.validFields[data.field].activeSaved = false;\n          }, 4000);\n        } else {\n          $scope.page.validField = false;\n          var fieldErrorText = f.field_validity.errors[f.field][0];\n          el.parent().siblings('span.field-error').children('span.message-text')\n            .text(fieldErrorText);\n          $scope.page.validFields[data.field].activeError = true;\n          $timeout(function() {\n            $scope.page.validFields[data.field].activeError = false;\n          }, 4000)\n        }\n      }\n    });\n  };\n\n  $scope.$on('destroy', function(e) {$timeout.cancel()});\n\n  /**\n   * Page 1 functions\n   */\n  if( $scope.page.number == 1 ) {\n    $scope.categories = {};\n    $scope.setCategories = function(cats) {\n      $scope.categories = cats;\n    };\n\n    $scope.currentCategory = false;\n    $scope.getCategoryName = function(id) {\n      var currentCat = $scope.categories.filter(function(cat) {\n        return cat.categoryId == id;\n      });\n      return currentCat.length > 0 ? currentCat[0].name : 'Pick one';\n    };\n\n    $scope.categoryFlags = function () {\n      return !!$scope.page.validFields.category_id && !!$scope.page.validFields.category_id.valid;\n    };\n\n    $scope.locationUpdate = function() {\n      $scope.swell.latitude = $('#searchLocation').data('latitude');\n      $scope.swell.longitude = $('#searchLocation').data('longitude');\n      $scope.swell.zip = !!$('#searchLocation').data('zip') ? $('#searchLocation').data('zip') : null;\n      $scope.swell.city = !!$('#searchLocation').data('city') ? $('#searchLocation').data('city') : null;\n      $scope.swell.state = !!$('#searchLocation').data('state') ? $('#searchLocation').data('state') : null;\n      Field.save({id: $scope.swell.id, field:'latitude', value:$scope.swell.latitude, page: $scope.page.number},\n        function(f) {\n          if( !!f.page1_validity ) $scope.page.page1valid = f.page1_validity.valid;\n          if( !!f.page2_validity ) $scope.page.page2valid = f.page2_validity.valid;\n          $scope.page.validFields[f.field] = f.field_validity;\n          Field.save({id: $scope.swell.id, field:'longitude', value:$scope.swell.longitude, page: $scope.page.number}, function(fi) {\n            if( !!fi.page1_validity ) $scope.page.page1valid = fi.page1_validity.valid;\n            if( !!fi.page2_validity ) $scope.page.page2valid = fi.page2_validity.valid;\n            $scope.page.validFields[fi.field] = fi.field_validity;\n\n            Field.save({id: $scope.swell.id, field:'city', value:$scope.swell.city, page: $scope.page.number}, function(fie) {\n              $scope.page.validFields[fie.field] = fie.field_validity;\n              Field.save({id: $scope.swell.id, field:'state', value:$scope.swell.state, page: $scope.page.number}, function(fiel) {\n                $scope.page.validFields[fiel.field] = fiel.field_validity;\n              });\n            });\n          });\n        }\n      );\n    };\n\n    $scope.continue = function() {\n      Swell.continue({id: $scope.swell.id}, function(s) {\n        if( s.errors ) {\n          // Report errors to user\n        } else {\n          if($scope.page1CanLaunch()) {\n            window.location = \"/swells/create/swelldetails/\" + $scope.swell.id;\n          }\n        }\n      })\n    };\n  }\n\n\n  $scope.launch = function(e) {\n    e.preventDefault();\n    Swell.launch({id: $scope.swell.id}, function(s) {\n      $scope.swell.slug = s.slug;\n      if( s.errors ) {\n        // Report errors to user\n      } else {\n        if($scope.page1CanLaunch()) { \n          window.location = \"/swells/\"+ s.slug;\n        }\n      }\n    })\n  };\n\n  /**\n   * Page 2 functions\n   */\n  $scope.addTask = function() {\n    $scope.tasks.push({});\n  };\n\n  var taskTimeoutDelay = 1000; // 1 second\n  $scope.taskSave = function(task) {\n    $timeout.cancel(task.timeout);\n    Task.save({id: task.id, swellId: $scope.swell.id, description: task.description}, function(t) {\n      task.id = t.taskId;\n      var validTaskCount = $scope.validTaskCount();\n      if( t.action == 'create' && $scope.tasks.length - validTaskCount < 1 )\n        $scope.addTask();\n    });\n  };\n\n  $scope.taskSaveTimeout = function(task) {\n    $timeout.cancel(task.timeout);\n    task.timeout = $timeout(function() {\n      $scope.taskSave(task);\n    }, taskTimeoutDelay)\n  };\n\n  $scope.taskDelete = function(task) {\n    $timeout.cancel(task.timeout);\n    if( !!task.id ) {\n      Task.delete({id: task.id, swellId: $scope.swell.id}, function(t) {\n        $scope.tasks.splice($scope.tasks.indexOf(task), 1);\n        $scope.validTaskCount();\n      });\n    } else {\n      $scope.tasks.splice($scope.tasks.indexOf(task), 1);\n    }\n  };\n\n  $scope.validTaskCount = function() {\n    var savedTasks = $scope.tasks.filter(function(task) {\n      return !!task.id;\n    })\n\n    $scope.page.validFields.tasks.valid = savedTasks.length > 0;\n    return savedTasks.length;\n  };\n\n  $scope.taskKeystroke = function(e, task) {\n    if( e.keyCode == 9 || e.keyCode == 13) {\n      e.preventDefault();\n      $scope.taskSave(task);\n    }\n  };\n\n  $scope.tagToggle = function(tag) {\n    if( !tag.isSwellTag ) {\n      Tag.add({swellId: $scope.swell.id, tagId: tag.tagId}, function(t) {\n        tag.isSwellTag = true;\n      });\n    } else {\n      Tag.delete({swellId: $scope.swell.id, tagId: tag.tagId}, function(t) {\n        tag.isSwellTag = false;\n      });\n    }\n  };\n\n  $scope.addDaysToDate = function() {\n    var days = $scope.swell.daysFunding;\n    var dat = new Date();\n    dat.setDate(dat.getDate() + days * 1.0);\n    var dateVal = dat.getUTCFullYear() + '-' + padDate(dat.getUTCMonth()+1) + '-' + padDate(dat.getUTCDate());\n    $scope.swell.expires = dateVal;\n  };\n\n  $scope.solverCheck = function() {\n    if( $scope.swell.fixed == 1 ) {\n      return  !!$scope.page.validFields.ask_amount    && !!$scope.page.validFields.ask_amount.valid &&\n              !!$scope.page.validFields.expires       && !!$scope.page.validFields.expires.valid;\n    } else {\n      return  !!$scope.page.validFields.days_of_work  && !!$scope.page.validFields.days_of_work.valid;\n    }\n  };\n\n  $scope.launchFull = function(e) {\n    e.preventDefault();\n    Swell.launchFull({id: $scope.swell.id}, function(s) {\n      $scope.swell.slug = s.slug;\n      if( s.errors ) {\n        // Report errors to user\n      } else {\n        if($scope.canLaunch()) {\n          window.location = \"/swells/\"+ s.slug;\n        }\n      }\n    });\n  };\n\n};\n\ncreate.controller(createControllers);\n```\n. ",
    "Pythoner6": "Also, the cursor is moved to after the selection, instead of to the first character of the selection (after the indent)\n. I'd almost rather not stay in visual mode - subsequent indentation can be done (or rather, should be able to be done, I think there's a bug currently) with `.`, and `u` can undo indentation, and it is nice to not have to explicitly leave visual mode.\n. Also, the cursor is moved to after the selection, instead of to the first character of the selection (after the indent)\n. I'd almost rather not stay in visual mode - subsequent indentation can be done (or rather, should be able to be done, I think there's a bug currently) with `.`, and `u` can undo indentation, and it is nice to not have to explicitly leave visual mode.\n. ",
    "mattr-": ":flushed: :tada: :+1:\n\nAs a user, thanks for adding this!\n. Any reason you can't create a mapping to do this with the existing yank command and a motion like you would in vim? (`map Y y$`)\n. Vim doesn't provide one, so my vote (initially) is 'no'\n. Oh, wait, I misunderstood the question earlier. Initially, I said 'no' because I wasn't in agreement with providing a default mapping for `Y`. That being said, I'd love to see a `:map` command implemented in vim-mode, but Atom's already existing facilities are useful for this too, so \u00af\\_(\u30c4)_/\u00af\n. This can be closed. vim-mode has been updated to use the view method instead.\n. @icook Just so you know, I'm attempting to turn your quick fix into a\nproper fix with tests and everything, so hopefully this will be done and in\nvim-mode proper soon.\n\nOn Fri, Oct 9, 2015 at 11:33 AM, macgyver notifications@github.com wrote:\n\n> [image: :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/799#issuecomment-146923275.\n. I'm confused. It seems like this is fixing s bug in visual mode, but the description says that it allows text objects to select text in normal mode.\n\nHonestly, it doesn't make much sense for text objects to select text in normal mode. For example, if I type `iw` (The inner word text object) in normal mode in Vim, I enter insert mode and type a 'w'. Does this PR actually change that behavior?\n. I feel like we should just ignore the command, since it doesn't actually apply. Maybe the real fix is to set it up so that these are only applicable in operator-pending mode and therefore don't show up in the command palette for normal mode?\n. If the selection only happens when they're invoked from the command palette, then I can live with that. \n. I can't confirm this with the following:\n\nAtom: 1.0.19\nOS: Mac OS X 10.10.5\nvim-mode: 0.60.0\n\nPerhaps we're looking at an issue with line-ending style detection?\n. Great work @jonasws. There's still some behavior differences that we might want to look at addressing.\n\nFor example, in this repo, open `spec/motions-spec.coffee` in vim and go to line 1340. Now hit `)` to go to the next sentence. In vim, this moves you to line 1342. With this patch, Atom does nothing.\n\nWhile still on line 1340 in the same file, hit `(` to back a sentence and you're taken all the way back to line 1081 where there's a `?` with a space after it in a string. Doing the same thing in Vim only takes you back to the beginning of line 1339.\n\nThe larger conclusion to draw from this is that paragraph and section boundaries don't seem to count as sentence boundaries as the Vim docs say they should. From vim's `:help sentence`:\n\n> A sentence is defined as ending at a `.`, `!` or `?` followed by either the\n> end of a line, or by a space or tab.  Any number of closing `)`, `]`, `\"`\n> and `'` characters may appear after the `.`, `!` or `?` before the spaces,\n> tabs or end of line.  A paragraph and section boundary is also a sentence\n> boundary.\n\nJust my 2cents, as I'm not the actual maintainer of this plugin. :smiley:\n. :flushed: :tada: :+1:\n\nAs a user, thanks for adding this!\n. Any reason you can't create a mapping to do this with the existing yank command and a motion like you would in vim? (`map Y y$`)\n. Vim doesn't provide one, so my vote (initially) is 'no'\n. Oh, wait, I misunderstood the question earlier. Initially, I said 'no' because I wasn't in agreement with providing a default mapping for `Y`. That being said, I'd love to see a `:map` command implemented in vim-mode, but Atom's already existing facilities are useful for this too, so \u00af\\_(\u30c4)_/\u00af\n. This can be closed. vim-mode has been updated to use the view method instead.\n. @icook Just so you know, I'm attempting to turn your quick fix into a\nproper fix with tests and everything, so hopefully this will be done and in\nvim-mode proper soon.\n\nOn Fri, Oct 9, 2015 at 11:33 AM, macgyver notifications@github.com wrote:\n\n> [image: :+1:]\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/799#issuecomment-146923275.\n. I'm confused. It seems like this is fixing s bug in visual mode, but the description says that it allows text objects to select text in normal mode.\n\nHonestly, it doesn't make much sense for text objects to select text in normal mode. For example, if I type `iw` (The inner word text object) in normal mode in Vim, I enter insert mode and type a 'w'. Does this PR actually change that behavior?\n. I feel like we should just ignore the command, since it doesn't actually apply. Maybe the real fix is to set it up so that these are only applicable in operator-pending mode and therefore don't show up in the command palette for normal mode?\n. If the selection only happens when they're invoked from the command palette, then I can live with that. \n. I can't confirm this with the following:\n\nAtom: 1.0.19\nOS: Mac OS X 10.10.5\nvim-mode: 0.60.0\n\nPerhaps we're looking at an issue with line-ending style detection?\n. Great work @jonasws. There's still some behavior differences that we might want to look at addressing.\n\nFor example, in this repo, open `spec/motions-spec.coffee` in vim and go to line 1340. Now hit `)` to go to the next sentence. In vim, this moves you to line 1342. With this patch, Atom does nothing.\n\nWhile still on line 1340 in the same file, hit `(` to back a sentence and you're taken all the way back to line 1081 where there's a `?` with a space after it in a string. Doing the same thing in Vim only takes you back to the beginning of line 1339.\n\nThe larger conclusion to draw from this is that paragraph and section boundaries don't seem to count as sentence boundaries as the Vim docs say they should. From vim's `:help sentence`:\n\n> A sentence is defined as ending at a `.`, `!` or `?` followed by either the\n> end of a line, or by a space or tab.  Any number of closing `)`, `]`, `\"`\n> and `'` characters may appear after the `.`, `!` or `?` before the spaces,\n> tabs or end of line.  A paragraph and section boundary is also a sentence\n> boundary.\n\nJust my 2cents, as I'm not the actual maintainer of this plugin. :smiley:\n. ",
    "mmchaney": "vim does _not_ stay in visual mode after indent by default. Is there a way to disable the behavior introduced by this diff?\n. vim does _not_ stay in visual mode after indent by default. Is there a way to disable the behavior introduced by this diff?\n. ",
    "anthonysandrin": "None of the '`a`' operator-pending commands are implemented (`daw`, `da\"`, `da'`, etc.). They would probably be simple to implement using the '`i`' commands as a reference.\n. 1. Adding support for square brackets (both inner and around) wouldn't be too difficult. I'll also add support for back ticks.\n2. I'll look into the vim documentation and try to add all the appropriate aliases for both insert and around.\n3. Could you expand on this? I don't understand what you are referring to.\n\nAfter these changes, the only text objects that wouldn't be supported are:\n`at` / `it` select tag block\n`as` / `is` select sentence\n`ap` / `ip` select paragraph\n`aW` / `iW` select WORD\n\nParagraph and WORD movement is already provided by motions so they wouldn't be too difficult to implement. Sentences would require some extra parsing and I'm not sure about tags. These should probably be left to their own pull request though.\n. I've made all the changes that are within the scope of this PR.\n\n> Sorry about that. I mean that, in Vim, ca( or da( will change or delete the contents inside of parentheses, but that's currently unsupported for a and i here (through no fault of this PR).\n\n`ci(` and `di(` are implemented though. They work for me.\n. None of the '`a`' operator-pending commands are implemented (`daw`, `da\"`, `da'`, etc.). They would probably be simple to implement using the '`i`' commands as a reference.\n. 1. Adding support for square brackets (both inner and around) wouldn't be too difficult. I'll also add support for back ticks.\n2. I'll look into the vim documentation and try to add all the appropriate aliases for both insert and around.\n3. Could you expand on this? I don't understand what you are referring to.\n\nAfter these changes, the only text objects that wouldn't be supported are:\n`at` / `it` select tag block\n`as` / `is` select sentence\n`ap` / `ip` select paragraph\n`aW` / `iW` select WORD\n\nParagraph and WORD movement is already provided by motions so they wouldn't be too difficult to implement. Sentences would require some extra parsing and I'm not sure about tags. These should probably be left to their own pull request though.\n. I've made all the changes that are within the scope of this PR.\n\n> Sorry about that. I mean that, in Vim, ca( or da( will change or delete the contents inside of parentheses, but that's currently unsupported for a and i here (through no fault of this PR).\n\n`ci(` and `di(` are implemented though. They work for me.\n. ",
    "edrex": "Also, selection-expanding gestures like `vi\"` only work with the last cursor.\n. Also, selection-expanding gestures like `vi\"` only work with the last cursor.\n. ",
    "tgrrtt": "I also noticed that creating multiple cursors and then doing 'x' will delete the first letter of each line and then go back to just one cursor, on the last line. I'm thinking it should stay in multiple cursor mode, so you can keep doing things to multiple lines.\n\nalso doing 'de' on multiple cursors does something pretty strange as well, itll delete one character from each line with a cursor, and then actually do the 'de' command correctly on the very first line.\n. I also noticed that creating multiple cursors and then doing 'x' will delete the first letter of each line and then go back to just one cursor, on the last line. I'm thinking it should stay in multiple cursor mode, so you can keep doing things to multiple lines.\n\nalso doing 'de' on multiple cursors does something pretty strange as well, itll delete one character from each line with a cursor, and then actually do the 'de' command correctly on the very first line.\n. ",
    "brandonhorst": "The second paragraph of @sgtpepper43's report is addressed by https://github.com/atom/vim-mode/pull/469.\n. `j` and `k` report addressed by https://github.com/atom/vim-mode/pull/473\n. Atom packages can only be installed with `apm`.\n\nhttps://github.com/atom/apm\n. At this point, selection with the mouse does not bring you into visual mode, it keeps you in command mode. After selection with the mouse, you can tap `v` to bring you into visual mode. So `v d` and `v c` would do what you want.\n\nAs a workaround, if you do stay in command mode, you could tap `x`, which will delete the currently selected text (same as `v d`). You could also tap `i`, which would bring you into insert mode but keep your selection. You could then start typing (same as `v c`).\n\nThis should be fixed, though - selection via mouse or other means should bring you into visual mode.\n. FYI, that is addressed in https://github.com/atom/vim-mode/issues/295 and this issue could probably be closed.\n. Seems like that would be the expected behavior. That is how Sublime::Vintageous and MacVim both work.\n. The second paragraph of @sgtpepper43's report is addressed by https://github.com/atom/vim-mode/pull/469.\n. `j` and `k` report addressed by https://github.com/atom/vim-mode/pull/473\n. Atom packages can only be installed with `apm`.\n\nhttps://github.com/atom/apm\n. At this point, selection with the mouse does not bring you into visual mode, it keeps you in command mode. After selection with the mouse, you can tap `v` to bring you into visual mode. So `v d` and `v c` would do what you want.\n\nAs a workaround, if you do stay in command mode, you could tap `x`, which will delete the currently selected text (same as `v d`). You could also tap `i`, which would bring you into insert mode but keep your selection. You could then start typing (same as `v c`).\n\nThis should be fixed, though - selection via mouse or other means should bring you into visual mode.\n. FYI, that is addressed in https://github.com/atom/vim-mode/issues/295 and this issue could probably be closed.\n. Seems like that would be the expected behavior. That is how Sublime::Vintageous and MacVim both work.\n. ",
    "deiwin": "The vim plugin seems to sacrifice the comma. I don't know if that's the best idea, though.\n. The `\\` and `|` characters seem to be available.\n. This would probably mean that support for `iW` and `aW` should also be added to differentiate between the 2 possible meanings of _a word_. But I would probably like the uppercase versions to behave as the current lowercase versions do, instead of making them work as they currently do in _vim_ (using the WORD definition).\n\nOr maybe just have different bindings for all 3 cases. I mean, we have more modifier keys available than just shift.\n. Could be related to atom/atom#3622 (@Industrial's issue definitely is). There's also a [workaround for vim-mode](https://github.com/atom/atom/issues/3622#issuecomment-75369143) in that thread.\n. atom/atom@ba3ab41 from atom/atom#7612 makes the subword regex match line endings if there's any trailing whitespace and line beginnings if it's followed by any whitespace. I currently worked around it, but I think the regex should be changed.\n. Can someone please help me figure out why some of the tests fail when I use alt as a modifier? They seem to work just fine when actually used. I tried messing around with the way the spec-helper dispatches keyboard events, but to no avail.\n. I'd kept the focused specs because I hadn't really gotten them to pass on my own machine yet and wasn't worrying too much about the CI build. I added a commit to change that now, however, so that the CI logs would show the actual problem I'm facing.\n. Not working on this anymore\n. The vim plugin seems to sacrifice the comma. I don't know if that's the best idea, though.\n. The `\\` and `|` characters seem to be available.\n. This would probably mean that support for `iW` and `aW` should also be added to differentiate between the 2 possible meanings of _a word_. But I would probably like the uppercase versions to behave as the current lowercase versions do, instead of making them work as they currently do in _vim_ (using the WORD definition).\n\nOr maybe just have different bindings for all 3 cases. I mean, we have more modifier keys available than just shift.\n. Could be related to atom/atom#3622 (@Industrial's issue definitely is). There's also a [workaround for vim-mode](https://github.com/atom/atom/issues/3622#issuecomment-75369143) in that thread.\n. atom/atom@ba3ab41 from atom/atom#7612 makes the subword regex match line endings if there's any trailing whitespace and line beginnings if it's followed by any whitespace. I currently worked around it, but I think the regex should be changed.\n. Can someone please help me figure out why some of the tests fail when I use alt as a modifier? They seem to work just fine when actually used. I tried messing around with the way the spec-helper dispatches keyboard events, but to no avail.\n. I'd kept the focused specs because I hadn't really gotten them to pass on my own machine yet and wasn't worrying too much about the CI build. I added a commit to change that now, however, so that the CI logs would show the actual problem I'm facing.\n. Not working on this anymore\n. ",
    "taboularasa": ":+1: \n. :+1: \n. ",
    "sknoslo": "There seems to be an issue with the MoveToLine motion, in general, when following an operator.\n\nExamples:\n\ncommand: dG\nexpected: Delete to last line\nactual: Delete current line\n\ncommand: dgg\nexpected: Delete to first line\nactual: goes to first line but deletes nothing\n\ncommand: v10G\nexpected: Select from current line until line 10\nactual: Select to current line until current line + 10\n\nInterestingly, vgg and vG work as expected.\n. Okay, the branch has been rebased. Please note, the tests are _supposed_ to fail, as the functionality is broken. This pull request was just to fix the fact that the tests weren't running at all because of syntax errors.\n. There seems to be an issue with the MoveToLine motion, in general, when following an operator.\n\nExamples:\n\ncommand: dG\nexpected: Delete to last line\nactual: Delete current line\n\ncommand: dgg\nexpected: Delete to first line\nactual: goes to first line but deletes nothing\n\ncommand: v10G\nexpected: Select from current line until line 10\nactual: Select to current line until current line + 10\n\nInterestingly, vgg and vG work as expected.\n. Okay, the branch has been rebased. Please note, the tests are _supposed_ to fail, as the functionality is broken. This pull request was just to fix the fact that the tests weren't running at all because of syntax errors.\n. ",
    "Zeneixe": "Still not working properly\n. Still not working properly\n. ",
    "d6e": "I'm using 0.13, I can see that you released an update three days ago, but atom itself doesn't show any available updates.\n. I'm using 0.13, I can see that you released an update three days ago, but atom itself doesn't show any available updates.\n. ",
    "phoenixeliot": "I'm experiencing the same bug with quotation marks in ruby.\n. ![screen shot 2015-01-10 at 5 14 39 pm](https://cloud.githubusercontent.com/assets/491376/5693952/30d3c8f4-98ec-11e4-9c98-1032ac09ab1f.png)\n\nAny bug related to the vim plugin gives this same broken link, I believe.\n. Interestingly, the link to 'report issue' under the package preferences page correctly links to https://github.com/atom/vim-mode/issues/new\n. That URL is correct (if a little garbled with the chosen title):\n\nhttps://github.com/atom/bracket-matcher/issues/new?title=Uncaught%20TypeErr\u20266.0%0A%0A%23%20Dev%0ANo%20dev%20packages%0A%60%60%60%0A%0A/cc%20@atom/core\n. Yep, it's a long one.\n\n```\nhttps://github.com/atom/bracket-matcher/issues/new?title=Uncaught%20TypeError:%20Cannot%20read%20property%20%27getScreenPosition%27%20of%20undefined&body=%5BEnter%20steps%20to%20reproduce%20below:%5D%0A%0A1.%20...%0A2.%20...%0A%0A**Atom%20Version**:%200.170.0%0A**System**:%20Mac%20OS%20X%2010.10.1%0A**Thrown%20From**:%20%5Bbracket-matcher%5D(https://github.com/atom/bracket-matcher)%20package,%20v0.67.0%0A%0A%23%23%23%20Stack%20Trace%0A%0AUncaught%20TypeError:%20Cannot%20read%20property%20%27getScreenPosition%27%20of%20undefined%0A%0A%60%60%60%0AAt%20/Applications/Atom.app/Contents/Resources/app/src/text-editor.js:1325%0A%0ATypeError:%20Cannot%20read%20property%20%27getScreenPosition%27%20of%20undefined%0A%20%20at%20TextEditor.module.exports.TextEditor.getCursorScreenPosition%20(/Applications/Atom.app/Contents/Resources/app/src/text-editor.js:1325:34)%0A%20%20at%20TextEditor.module.exports.TextEditor.isFoldedAtCursorRow%20(/Applications/Atom.app/Contents/Resources/app/src/text-editor.js:2585:44)%0A%20%20at%20BracketMatcherView.module.exports.BracketMatcherView.updateMatch%20(/Applications/Atom.app/Contents/Resources/app/node_modules/bracket-matcher/lib/bracket-matcher-view.js:111:23)%0A%20%20at%20/Applications/Atom.app/Contents/Resources/app/node_modules/bracket-matcher/lib/bracket-matcher-view.js:94:26%0A%20%20at%20Emitter.module.exports.Emitter.emit%20(/Applications/Atom.app/Contents/Resources/app/node_modules/event-kit/lib/emitter.js:82:11)%0A%20%20at%20/Applications/Atom.app/Contents/Resources/app/src/cursor.js:70:25%0A%20%20at%20Emitter.module.exports.Emitter.emit%20(/Applications/Atom.app/Contents/Resources/app/node_modules/event-kit/lib/emitter.js:82:11)%0A%20%20at%20Marker.module.exports.Marker.destroyed%20(/Applications/Atom.app/Contents/Resources/app/src/marker.js:264:20)%0A%20%20at%20/Applications/Atom.app/Contents/Resources/app/src/marker.js:51:24%0A%20%20at%20Emitter.module.exports.Emitter.emit%20(/Applications/Atom.app/Contents/Resources/app/node_modules/text-buffer/node_modules/event-kit/lib/emitter.js:82:11)%0A%20%20at%20Marker.module.exports.Marker.destroy%20(/Applications/Atom.app/Contents/Resources/app/node_modules/text-buffer/lib/marker.js:318:20)%0A%20%20at%20Marker.module.exports.Marker.destroy%20(/Applications/Atom.app/Contents/Resources/app/src/marker.js:62:25)%0A%20%20at%20Selection.module.exports.Selection.destroy%20(/Applications/Atom.app/Contents/Resources/app/src/selection.js:62:26)%0A%20%20at%20SnippetExpansion.module.exports.SnippetExpansion.setTabStopIndex%20(/Applications/Atom.app/Contents/Resources/app/node_modules/snippets/lib/snippet-expansion.js:120:21)%0A%20%20at%20SnippetExpansion.module.exports.SnippetExpansion.goToNextTabStop%20(/Applications/Atom.app/Contents/Resources/app/node_modules/snippets/lib/snippet-expansion.js:86:18)%0A%20%20at%20Object.module.exports.goToNextTabStop%20(/Applications/Atom.app/Contents/Resources/app/node_modules/snippets/lib/snippets.js:397:43)%0A%20%20at%20atom-text-editor.subscriptions.add.atom.commands.add.snippets:next-tab-stop%20(/Applications/Atom.app/Contents/Resources/app/node_modules/snippets/lib/snippets.js:56:25)%0A%20%20at%20CommandRegistry.module.exports.CommandRegistry.handleCommandEvent%20(/Applications/Atom.app/Contents/Resources/app/src/command-registry.js:243:29)%0A%20%20at%20/Applications/Atom.app/Contents/Resources/app/src/command-registry.js:3:61%0A%20%20at%20KeymapManager.module.exports.KeymapManager.dispatchCommandEvent%20(/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:558:16)%0A%20%20at%20KeymapManager.module.exports.KeymapManager.handleKeyboardEvent%20(/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:396:22)%0A%20%20at%20HTMLDocument.module.exports.WindowEventHandler.onKeydown%20(/Applications/Atom.app/Contents/Resources/app/src/window-event-handler.js:167:20)%0A%0A%60%60%60%0A%0A%23%23%23%20Commands%0A%0A%60%60%60%0A%20%20%20%20%20-0:18.2%20core:save%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:16.4%20vim-mode:move-down%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:16.0%20vim-mode:insert-below-with-newline%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:15.6%20editor:newline%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:14.0%20snippets:next-tab-stop%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:14.0%20snippets:expand%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:09.9%20vim-mode:activate-command-mode%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:05.0%20vim-mode:reset-command-mode%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:04.5%20vim-mode:move-down%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:03.9%20vim-mode:activate-insert-mode%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:03.4%20core:move-right%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:03.1%20snippets:next-tab-stop%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:00.0%20window:toggle-dev-tools%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%60%60%60%0A%0A%23%23%23%20Config%0A%0A%60%60%60json%0A%7B%0A%20%20%22core%22:%20%7B%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Installed%20Packages%0A%0A%60%60%60coffee%0A%23%20User%0Aautocomplete-plus,%20v1.1.0%0Avim-mode,%20v0.26.0%0A%0A%23%20Dev%0ANo%20dev%20packages%0A%60%60%60%0A%0A/cc%20@atom/core\n```\n. Ah, this was a failure of understanding of package development things. You need to run \"apm install\" in the vim-mode directory first.\n. I'd like to emphasize the importance of this one \u2014\u00a0sometimes I'm in insert mode for a long time, and find that undo undoes WAY too much. Sometimes the last several minutes of edits. I find that this leaves me no meaningful way to only undo a little of it.\n\nIt also overrides the behavior of cmd-z (which makes sense, but leaves no alternative when `u` undoes too much)\n. Very nice! I couldn't break it.\n. I'm experiencing the same bug with quotation marks in ruby.\n. ![screen shot 2015-01-10 at 5 14 39 pm](https://cloud.githubusercontent.com/assets/491376/5693952/30d3c8f4-98ec-11e4-9c98-1032ac09ab1f.png)\n\nAny bug related to the vim plugin gives this same broken link, I believe.\n. Interestingly, the link to 'report issue' under the package preferences page correctly links to https://github.com/atom/vim-mode/issues/new\n. That URL is correct (if a little garbled with the chosen title):\n\nhttps://github.com/atom/bracket-matcher/issues/new?title=Uncaught%20TypeErr\u20266.0%0A%0A%23%20Dev%0ANo%20dev%20packages%0A%60%60%60%0A%0A/cc%20@atom/core\n. Yep, it's a long one.\n\n```\nhttps://github.com/atom/bracket-matcher/issues/new?title=Uncaught%20TypeError:%20Cannot%20read%20property%20%27getScreenPosition%27%20of%20undefined&body=%5BEnter%20steps%20to%20reproduce%20below:%5D%0A%0A1.%20...%0A2.%20...%0A%0A**Atom%20Version**:%200.170.0%0A**System**:%20Mac%20OS%20X%2010.10.1%0A**Thrown%20From**:%20%5Bbracket-matcher%5D(https://github.com/atom/bracket-matcher)%20package,%20v0.67.0%0A%0A%23%23%23%20Stack%20Trace%0A%0AUncaught%20TypeError:%20Cannot%20read%20property%20%27getScreenPosition%27%20of%20undefined%0A%0A%60%60%60%0AAt%20/Applications/Atom.app/Contents/Resources/app/src/text-editor.js:1325%0A%0ATypeError:%20Cannot%20read%20property%20%27getScreenPosition%27%20of%20undefined%0A%20%20at%20TextEditor.module.exports.TextEditor.getCursorScreenPosition%20(/Applications/Atom.app/Contents/Resources/app/src/text-editor.js:1325:34)%0A%20%20at%20TextEditor.module.exports.TextEditor.isFoldedAtCursorRow%20(/Applications/Atom.app/Contents/Resources/app/src/text-editor.js:2585:44)%0A%20%20at%20BracketMatcherView.module.exports.BracketMatcherView.updateMatch%20(/Applications/Atom.app/Contents/Resources/app/node_modules/bracket-matcher/lib/bracket-matcher-view.js:111:23)%0A%20%20at%20/Applications/Atom.app/Contents/Resources/app/node_modules/bracket-matcher/lib/bracket-matcher-view.js:94:26%0A%20%20at%20Emitter.module.exports.Emitter.emit%20(/Applications/Atom.app/Contents/Resources/app/node_modules/event-kit/lib/emitter.js:82:11)%0A%20%20at%20/Applications/Atom.app/Contents/Resources/app/src/cursor.js:70:25%0A%20%20at%20Emitter.module.exports.Emitter.emit%20(/Applications/Atom.app/Contents/Resources/app/node_modules/event-kit/lib/emitter.js:82:11)%0A%20%20at%20Marker.module.exports.Marker.destroyed%20(/Applications/Atom.app/Contents/Resources/app/src/marker.js:264:20)%0A%20%20at%20/Applications/Atom.app/Contents/Resources/app/src/marker.js:51:24%0A%20%20at%20Emitter.module.exports.Emitter.emit%20(/Applications/Atom.app/Contents/Resources/app/node_modules/text-buffer/node_modules/event-kit/lib/emitter.js:82:11)%0A%20%20at%20Marker.module.exports.Marker.destroy%20(/Applications/Atom.app/Contents/Resources/app/node_modules/text-buffer/lib/marker.js:318:20)%0A%20%20at%20Marker.module.exports.Marker.destroy%20(/Applications/Atom.app/Contents/Resources/app/src/marker.js:62:25)%0A%20%20at%20Selection.module.exports.Selection.destroy%20(/Applications/Atom.app/Contents/Resources/app/src/selection.js:62:26)%0A%20%20at%20SnippetExpansion.module.exports.SnippetExpansion.setTabStopIndex%20(/Applications/Atom.app/Contents/Resources/app/node_modules/snippets/lib/snippet-expansion.js:120:21)%0A%20%20at%20SnippetExpansion.module.exports.SnippetExpansion.goToNextTabStop%20(/Applications/Atom.app/Contents/Resources/app/node_modules/snippets/lib/snippet-expansion.js:86:18)%0A%20%20at%20Object.module.exports.goToNextTabStop%20(/Applications/Atom.app/Contents/Resources/app/node_modules/snippets/lib/snippets.js:397:43)%0A%20%20at%20atom-text-editor.subscriptions.add.atom.commands.add.snippets:next-tab-stop%20(/Applications/Atom.app/Contents/Resources/app/node_modules/snippets/lib/snippets.js:56:25)%0A%20%20at%20CommandRegistry.module.exports.CommandRegistry.handleCommandEvent%20(/Applications/Atom.app/Contents/Resources/app/src/command-registry.js:243:29)%0A%20%20at%20/Applications/Atom.app/Contents/Resources/app/src/command-registry.js:3:61%0A%20%20at%20KeymapManager.module.exports.KeymapManager.dispatchCommandEvent%20(/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:558:16)%0A%20%20at%20KeymapManager.module.exports.KeymapManager.handleKeyboardEvent%20(/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:396:22)%0A%20%20at%20HTMLDocument.module.exports.WindowEventHandler.onKeydown%20(/Applications/Atom.app/Contents/Resources/app/src/window-event-handler.js:167:20)%0A%0A%60%60%60%0A%0A%23%23%23%20Commands%0A%0A%60%60%60%0A%20%20%20%20%20-0:18.2%20core:save%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:16.4%20vim-mode:move-down%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:16.0%20vim-mode:insert-below-with-newline%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:15.6%20editor:newline%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:14.0%20snippets:next-tab-stop%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:14.0%20snippets:expand%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:09.9%20vim-mode:activate-command-mode%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:05.0%20vim-mode:reset-command-mode%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:04.5%20vim-mode:move-down%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:03.9%20vim-mode:activate-insert-mode%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:03.4%20core:move-right%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:03.1%20snippets:next-tab-stop%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%20%20%20%20%20-0:00.0%20window:toggle-dev-tools%20(atom-text-editor.editor.vim-mode.insert-mode)%0A%60%60%60%0A%0A%23%23%23%20Config%0A%0A%60%60%60json%0A%7B%0A%20%20%22core%22:%20%7B%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Installed%20Packages%0A%0A%60%60%60coffee%0A%23%20User%0Aautocomplete-plus,%20v1.1.0%0Avim-mode,%20v0.26.0%0A%0A%23%20Dev%0ANo%20dev%20packages%0A%60%60%60%0A%0A/cc%20@atom/core\n```\n. Ah, this was a failure of understanding of package development things. You need to run \"apm install\" in the vim-mode directory first.\n. I'd like to emphasize the importance of this one \u2014\u00a0sometimes I'm in insert mode for a long time, and find that undo undoes WAY too much. Sometimes the last several minutes of edits. I find that this leaves me no meaningful way to only undo a little of it.\n\nIt also overrides the behavior of cmd-z (which makes sense, but leaves no alternative when `u` undoes too much)\n. Very nice! I couldn't break it.\n. ",
    "valtido": "I still get it on v: 1.29.1 \n\n```\nTypeError: Cannot read property 'getBufferPosition' of undefined\n  at Editor.module.exports.Editor.getCursorBufferPosition (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\editor.js:1646:34)\n  at CursorPositionView.module.exports.CursorPositionView.updateCursorPositionText (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\status-bar\\lib\\cursor-position-view.js:46:46)\n  at HTMLDivElement.<anonymous> (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\status-bar\\lib\\cursor-position-view.js:3:61)\n  at HTMLDivElement.jQuery.event.dispatch (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4676:9)\n  at HTMLDivElement.elemData.handle (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4360:46)\n  at Object.jQuery.event.trigger (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4594:12)\n  at HTMLDivElement.<anonymous> (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:5119:17)\n  at Function.jQuery.extend.each (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:590:23)\n  at StatusBarView.jQuery.fn.jQuery.each (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:237:17)\n  at StatusBarView.jQuery.fn.extend.trigger (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:5118:15)\n  at StatusBarView.$.fn.trigger (c:\\Users\\vcaushi\\.atom\\packages\\command-logger\\lib\\main.coffee:35:15)\n  at HTMLDivElement.<anonymous> (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\status-bar\\lib\\status-bar-view.js:50:24)\n  at HTMLDivElement.jQuery.event.dispatch (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4676:9)\n  at HTMLDivElement.elemData.handle (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4360:46)\n  at Object.jQuery.event.trigger (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4594:12)\n  at HTMLDivElement.<anonymous> (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:5119:17)\n  at Function.jQuery.extend.each (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:590:23)\n  at PaneContainerView.jQuery.fn.jQuery.each (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:237:17)\n  at PaneContainerView.jQuery.fn.extend.trigger (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:5118:15)\n  at PaneContainerView.$.fn.trigger (c:\\Users\\vcaushi\\.atom\\packages\\command-logger\\lib\\main.coffee:35:15)\n  at PaneContainerView.module.exports.PaneContainerView.onActivePaneItemChanged (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane-container-view.js:90:19)\n  at c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane-container-view.js:3:61\n  at Emitter.module.exports.Emitter.emit (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\event-kit\\lib\\emitter.js:71:11)\n  at c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane-container.js:269:34\n  at Emitter.module.exports.Emitter.emit (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\event-kit\\lib\\emitter.js:71:11)\n  at Pane.module.exports.Pane.setActiveItem (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane.js:250:22)\n  at Pane.module.exports.Pane.activateItem (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane.js:296:21)\n  at c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\workspace.js:351:16\n  at _fulfilled (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:787:54)\n  at self.promiseDispatch.done (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:816:30)\n  at Promise.promise.promiseDispatch (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:749:13)\n  at c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:557:44\n  at flush (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:108:17)\n  at process._tickCallback (node.js:349:11)\n\nUncaught SyntaxError: Unexpected end of input \n```\n. I still get it on v: 1.29.1 \n\n```\nTypeError: Cannot read property 'getBufferPosition' of undefined\n  at Editor.module.exports.Editor.getCursorBufferPosition (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\editor.js:1646:34)\n  at CursorPositionView.module.exports.CursorPositionView.updateCursorPositionText (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\status-bar\\lib\\cursor-position-view.js:46:46)\n  at HTMLDivElement.<anonymous> (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\status-bar\\lib\\cursor-position-view.js:3:61)\n  at HTMLDivElement.jQuery.event.dispatch (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4676:9)\n  at HTMLDivElement.elemData.handle (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4360:46)\n  at Object.jQuery.event.trigger (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4594:12)\n  at HTMLDivElement.<anonymous> (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:5119:17)\n  at Function.jQuery.extend.each (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:590:23)\n  at StatusBarView.jQuery.fn.jQuery.each (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:237:17)\n  at StatusBarView.jQuery.fn.extend.trigger (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:5118:15)\n  at StatusBarView.$.fn.trigger (c:\\Users\\vcaushi\\.atom\\packages\\command-logger\\lib\\main.coffee:35:15)\n  at HTMLDivElement.<anonymous> (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\status-bar\\lib\\status-bar-view.js:50:24)\n  at HTMLDivElement.jQuery.event.dispatch (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4676:9)\n  at HTMLDivElement.elemData.handle (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4360:46)\n  at Object.jQuery.event.trigger (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:4594:12)\n  at HTMLDivElement.<anonymous> (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:5119:17)\n  at Function.jQuery.extend.each (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:590:23)\n  at PaneContainerView.jQuery.fn.jQuery.each (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:237:17)\n  at PaneContainerView.jQuery.fn.extend.trigger (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\space-pen\\vendor\\jquery.js:5118:15)\n  at PaneContainerView.$.fn.trigger (c:\\Users\\vcaushi\\.atom\\packages\\command-logger\\lib\\main.coffee:35:15)\n  at PaneContainerView.module.exports.PaneContainerView.onActivePaneItemChanged (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane-container-view.js:90:19)\n  at c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane-container-view.js:3:61\n  at Emitter.module.exports.Emitter.emit (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\event-kit\\lib\\emitter.js:71:11)\n  at c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane-container.js:269:34\n  at Emitter.module.exports.Emitter.emit (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\event-kit\\lib\\emitter.js:71:11)\n  at Pane.module.exports.Pane.setActiveItem (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane.js:250:22)\n  at Pane.module.exports.Pane.activateItem (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\pane.js:296:21)\n  at c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\src\\workspace.js:351:16\n  at _fulfilled (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:787:54)\n  at self.promiseDispatch.done (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:816:30)\n  at Promise.promise.promiseDispatch (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:749:13)\n  at c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:557:44\n  at flush (c:\\ProgramData\\chocolatey\\lib\\atom.0.129.1\\tools\\atom\\resources\\app\\node_modules\\q\\q.js:108:17)\n  at process._tickCallback (node.js:349:11)\n\nUncaught SyntaxError: Unexpected end of input \n```\n. ",
    "dubiousdavid": "This is what I had to put in my keymap file for this to work:\n\n``` cson\n'atom-text-editor.vim-mode.normal-mode':\n  'ctrl-i': 'cursor-history:next'\n  'ctrl-o': 'cursor-history:prev'\n```\n\nDifference being `normal-mode` instead of `command-mode`.\n. This is what I had to put in my keymap file for this to work:\n\n``` cson\n'atom-text-editor.vim-mode.normal-mode':\n  'ctrl-i': 'cursor-history:next'\n  'ctrl-o': 'cursor-history:prev'\n```\n\nDifference being `normal-mode` instead of `command-mode`.\n. ",
    "rgkirch": "Thank you for this solution. I'm glad that I have this feature now. I hope that it becomes a default feature soon.\n. Thank you for this solution. I'm glad that I have this feature now. I hope that it becomes a default feature soon.\n. ",
    "michaellenahan": "Hi, I'm using atom 0.166.0 with vim-mode 0.34 on Ubuntu Linux 14.04.\nI can't see any Insert or Command in the status bar.\nUnless I'm missing something, I can't see any indicator of the mode I am in.\nAnything would help! :) At the moment I usually just type 'j' and see what happens. :)\n\n![atom-vim-mode-no-indicator](https://cloud.githubusercontent.com/assets/219397/6430810/b5a50516-c01a-11e4-8af5-d1f2ed865d2a.png)\n. @maxbrunsfeld thanks, hadn't realised how out of date my Atom was. Upgraded it from https://github.com/atom/atom/releases.\n\nAs far as distinguishing insert and command mode, the fat cursor in command mode is all the help I, personally, need.\n\n![atom-vim-mode-fat-cursor](https://cloud.githubusercontent.com/assets/219397/6432361/a9b36e1c-c04e-11e4-8d2e-b5d1abfd2d07.png)\n\nSorry for diverting the thread.\n. - OS: Ubuntu 14.04\n- Atom: 0.166.0\n- vim-mode: 0.34\n\nI was able to override the vim-mode `ctrl-c` keybinding by doing this:\n- Go to your settings (`Edit > Preferences` or `ctrl-,`)\n- On the left, click `Keybindings`\n\nHere you can search for the keybindings, e.g. `ctrl-c`\n- At the top, click the link to go to `your keymap file`\n- Save the following to the keymap file (`~/.atom/keymap.cson`):\n\n```\n'atom-text-editor.vim-mode':\n  'ctrl-c': 'core:copy'\n```\n- Restart Atom.\n\nNow `ctrl-c` will copy text to clipboard in vim-mode.\n\nA kind-of-related side note: it is useful in vim-mode settings to check `Use Clipboard As Default Register` - this allows things like `yy` to copy directly to the system clipboard.\n. This is what I ended up using with vim-mode-plus:\r\n\r\n    'atom-text-editor.vim-mode-plus.insert-mode':\r\n      'ctrl-c': 'unset!'\r\n\r\nMy rationale is this: when I am in insert mode and I make a selection, I want ctrl-c to copy. In other words, I want to unset the vim-mode-plus setting for ctrl-c.\r\n\r\nThe keybinding resolver is very helpful when trying to figure out these settings:\r\nhttp://flight-manual.atom.io/hacking-atom/sections/debugging/#check-your-keybindings. Hi, I'm using atom 0.166.0 with vim-mode 0.34 on Ubuntu Linux 14.04.\nI can't see any Insert or Command in the status bar.\nUnless I'm missing something, I can't see any indicator of the mode I am in.\nAnything would help! :) At the moment I usually just type 'j' and see what happens. :)\n\n![atom-vim-mode-no-indicator](https://cloud.githubusercontent.com/assets/219397/6430810/b5a50516-c01a-11e4-8af5-d1f2ed865d2a.png)\n. @maxbrunsfeld thanks, hadn't realised how out of date my Atom was. Upgraded it from https://github.com/atom/atom/releases.\n\nAs far as distinguishing insert and command mode, the fat cursor in command mode is all the help I, personally, need.\n\n![atom-vim-mode-fat-cursor](https://cloud.githubusercontent.com/assets/219397/6432361/a9b36e1c-c04e-11e4-8d2e-b5d1abfd2d07.png)\n\nSorry for diverting the thread.\n. - OS: Ubuntu 14.04\n- Atom: 0.166.0\n- vim-mode: 0.34\n\nI was able to override the vim-mode `ctrl-c` keybinding by doing this:\n- Go to your settings (`Edit > Preferences` or `ctrl-,`)\n- On the left, click `Keybindings`\n\nHere you can search for the keybindings, e.g. `ctrl-c`\n- At the top, click the link to go to `your keymap file`\n- Save the following to the keymap file (`~/.atom/keymap.cson`):\n\n```\n'atom-text-editor.vim-mode':\n  'ctrl-c': 'core:copy'\n```\n- Restart Atom.\n\nNow `ctrl-c` will copy text to clipboard in vim-mode.\n\nA kind-of-related side note: it is useful in vim-mode settings to check `Use Clipboard As Default Register` - this allows things like `yy` to copy directly to the system clipboard.\n. This is what I ended up using with vim-mode-plus:\r\n\r\n    'atom-text-editor.vim-mode-plus.insert-mode':\r\n      'ctrl-c': 'unset!'\r\n\r\nMy rationale is this: when I am in insert mode and I make a selection, I want ctrl-c to copy. In other words, I want to unset the vim-mode-plus setting for ctrl-c.\r\n\r\nThe keybinding resolver is very helpful when trying to figure out these settings:\r\nhttp://flight-manual.atom.io/hacking-atom/sections/debugging/#check-your-keybindings. ",
    "neojski": "Interesting fact: both `ci'` and `ca'` work.\n. I updated the tests. They have now ascii art explaining what's going on in the test so it's clear why they behave like that.\n. See https://github.com/atom/atom/pull/5951\n. Interesting fact: both `ci'` and `ca'` work.\n. I updated the tests. They have now ascii art explaining what's going on in the test so it's clear why they behave like that.\n. See https://github.com/atom/atom/pull/5951\n. ",
    "javaguirre": "The problem is due to previous keymaps:\n\n```\n{\n```\n\nThat triggers\n\n```\nvim-mode:move-to-previous-paragraph\n```\n\nand then cancels\n\n```\nci{\n```\n\nIn case of\n\n```\nci<\n```\n\nIt triggers\n\n```\nvim-mode:outdent\n```\n\nand then cancels\n\n```\nvim-mode:select-around-angle-brackets\n```\n\nI think it might be necessary a timeout before some keybinding triggers, because even commenting out `vim-mode:outdent` and `vim-mode:move-to-previous-paragraph` won't solve the issue.\n. I have en_US, Atom 0.168, vim-mode 0.25 on GNU/Linux and `ci(` doesn't work nor `ci\"` and I guess neither the others we reported before, I didn't have time to do more tests though, might it be an OS issue? related to having another package installed?\n. when I press ci(\n\nWhile pressing `ci`\n\n![screenshot from 2015-01-08 18 32 32](https://cloud.githubusercontent.com/assets/488556/5667062/09119eb4-9765-11e4-97ab-ee5fce14b997.png)\n\nafter pressing `(`\n\n![screenshot from 2015-01-08 18 34 07](https://cloud.githubusercontent.com/assets/488556/5667070/15e0d2a4-9765-11e4-97ae-12e950722302.png)\n\nIt's not resolving anything after ci, just stops.\n\nAfter `ci(` if I press `j` It deletes two lines, as it didn't get the `(` key, It ends up in Insert mode.\n. Adding that to `keymaps.cson` triggers the about dialog command as you said.\n. Yes.\n\n![screenshot from 2015-01-08 19 32 59](https://cloud.githubusercontent.com/assets/488556/5668102/2ec564c6-976d-11e4-91f7-d2b5170850c9.png)\n. I think you are right, It's a keymap issue, If I disable the vim-mode and add only this new keymap, the keybinding-resolver stops at `ci` and treats the `(` as a new command without taking into account `ci`.\n\nThe command appears as option to be completed in the keybinding-resolver, but It doesn't work.\n\n![screenshot from 2015-01-08 19 46 12](https://cloud.githubusercontent.com/assets/488556/5668300/1ef9bbd0-976f-11e4-9e00-2aae8855cf72.png)\n. +1 I missed that too.\n. The problem is due to previous keymaps:\n\n```\n{\n```\n\nThat triggers\n\n```\nvim-mode:move-to-previous-paragraph\n```\n\nand then cancels\n\n```\nci{\n```\n\nIn case of\n\n```\nci<\n```\n\nIt triggers\n\n```\nvim-mode:outdent\n```\n\nand then cancels\n\n```\nvim-mode:select-around-angle-brackets\n```\n\nI think it might be necessary a timeout before some keybinding triggers, because even commenting out `vim-mode:outdent` and `vim-mode:move-to-previous-paragraph` won't solve the issue.\n. I have en_US, Atom 0.168, vim-mode 0.25 on GNU/Linux and `ci(` doesn't work nor `ci\"` and I guess neither the others we reported before, I didn't have time to do more tests though, might it be an OS issue? related to having another package installed?\n. when I press ci(\n\nWhile pressing `ci`\n\n![screenshot from 2015-01-08 18 32 32](https://cloud.githubusercontent.com/assets/488556/5667062/09119eb4-9765-11e4-97ab-ee5fce14b997.png)\n\nafter pressing `(`\n\n![screenshot from 2015-01-08 18 34 07](https://cloud.githubusercontent.com/assets/488556/5667070/15e0d2a4-9765-11e4-97ae-12e950722302.png)\n\nIt's not resolving anything after ci, just stops.\n\nAfter `ci(` if I press `j` It deletes two lines, as it didn't get the `(` key, It ends up in Insert mode.\n. Adding that to `keymaps.cson` triggers the about dialog command as you said.\n. Yes.\n\n![screenshot from 2015-01-08 19 32 59](https://cloud.githubusercontent.com/assets/488556/5668102/2ec564c6-976d-11e4-91f7-d2b5170850c9.png)\n. I think you are right, It's a keymap issue, If I disable the vim-mode and add only this new keymap, the keybinding-resolver stops at `ci` and treats the `(` as a new command without taking into account `ci`.\n\nThe command appears as option to be completed in the keybinding-resolver, but It doesn't work.\n\n![screenshot from 2015-01-08 19 46 12](https://cloud.githubusercontent.com/assets/488556/5668300/1ef9bbd0-976f-11e4-9e00-2aae8855cf72.png)\n. +1 I missed that too.\n. ",
    "cocodrino": "nope, seems not works,I've atom 0.165.0 and vim mode 0.25\n\ntest code\n{blah ( blah b|lah ) $%%$ }\n                     cursor here\n\nvi{  => {blah ( blah b\nvi(  => nothing selected\n\n\" asdasd|as\"\n\nva\"=>nothing selected\nvi\" => nothing selected\n\nplease let me know if it works with you...I can try reinstall the package again...\n. nope, it's not fixed yet (or at least I dunno the solution :D)\n. nope, seems not works,I've atom 0.165.0 and vim mode 0.25\n\ntest code\n{blah ( blah b|lah ) $%%$ }\n                     cursor here\n\nvi{  => {blah ( blah b\nvi(  => nothing selected\n\n\" asdasd|as\"\n\nva\"=>nothing selected\nvi\" => nothing selected\n\nplease let me know if it works with you...I can try reinstall the package again...\n. nope, it's not fixed yet (or at least I dunno the solution :D)\n. ",
    "binarious": "Any news on this? Running into this with `c i {` and `c i [` on a German Mac keyboard. `{` and `[` are typed via Alt + 8 or Alt + 5. The Key Binding Resolver only outputs `alt-8` after `c i {`. \nCharacters typed with the Shift key do work (like `c i (` or `c i '`).\nAny ideas?\n. Any news on this? Running into this with `c i {` and `c i [` on a German Mac keyboard. `{` and `[` are typed via Alt + 8 or Alt + 5. The Key Binding Resolver only outputs `alt-8` after `c i {`. \nCharacters typed with the Shift key do work (like `c i (` or `c i '`).\nAny ideas?\n. ",
    "learning": "+1 on this\n. +1 on this\n. ",
    "johnhaley81": "I'm having the same issue :(\n. I just updated to 0.18.0 and it seems to be good now and works pretty close to how I'd expect it to. At least much closer.\n\nThe undo/redo seem to work on a line-by-line basis instead of undoing character-by-character. Usually I'd expect it more of the char-by-char but with vim and insert mode line-by-line seems to make sense.\n\nI'll keep using it over the next few days and if I notice anything wonky I'll make sure to let you guys know.\n\nThanks for an awesome plugin!\n. I'm having the same issue :(\n. I just updated to 0.18.0 and it seems to be good now and works pretty close to how I'd expect it to. At least much closer.\n\nThe undo/redo seem to work on a line-by-line basis instead of undoing character-by-character. Usually I'd expect it more of the char-by-char but with vim and insert mode line-by-line seems to make sense.\n\nI'll keep using it over the next few days and if I notice anything wonky I'll make sure to let you guys know.\n\nThanks for an awesome plugin!\n. ",
    "ernsheong": "Cool. That's helpful enough. Thanks!\n. Cool. That's helpful enough. Thanks!\n. ",
    "ColdSauce": "Isn't 'y' in Vim copy anyways? It's very common for people to use Ctrl-C as\na way to get to command mode as 'Esc' is unnatural and far away.\n\nOn Mon, Nov 3, 2014 at 4:58 PM, Kevin Sawicki notifications@github.com\nwrote:\n\n> Thanks, but this is intentional, see #247\n> https://github.com/atom/vim-mode/issues/247 for more details.\n> \n> You can remap this locally if you want ctrl-c to go into command-mode\n> instead of copying by adding the following to your ~/.atom/keymap.cson\n> file:\n> Linux\n> \n> '.platform-linux .editor.vim-mode:not(.command-mode)':\n>    'ctrl-c': 'vim-mode:activate-command-mode'\n> \n> Windows\n> \n> '.platform-win32 .editor.vim-mode:not(.command-mode)':\n>    'ctrl-c': 'vim-mode:activate-command-mode'\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/414#issuecomment-61556871.\n. Isn't 'y' in Vim copy anyways? It's very common for people to use Ctrl-C as\na way to get to command mode as 'Esc' is unnatural and far away.\n\nOn Mon, Nov 3, 2014 at 4:58 PM, Kevin Sawicki notifications@github.com\nwrote:\n\n> Thanks, but this is intentional, see #247\n> https://github.com/atom/vim-mode/issues/247 for more details.\n> \n> You can remap this locally if you want ctrl-c to go into command-mode\n> instead of copying by adding the following to your ~/.atom/keymap.cson\n> file:\n> Linux\n> \n> '.platform-linux .editor.vim-mode:not(.command-mode)':\n>    'ctrl-c': 'vim-mode:activate-command-mode'\n> \n> Windows\n> \n> '.platform-win32 .editor.vim-mode:not(.command-mode)':\n>    'ctrl-c': 'vim-mode:activate-command-mode'\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/pull/414#issuecomment-61556871.\n. ",
    "anvyzhang": "Conflict with cursor moving.\n. Yeah, but CTRL+N/P in atom acts like emacs, moving cursor down and up.\nAnd CTRL K does its own job: remove everything in current line after the cursor.\n. Then, anybody merge this PR?!\n. Conflict with cursor moving.\n. Yeah, but CTRL+N/P in atom acts like emacs, moving cursor down and up.\nAnd CTRL K does its own job: remove everything in current line after the cursor.\n. Then, anybody merge this PR?!\n. ",
    "asfktz": "this one works with atom 1.8.0\n\n``` cson\n'.autocomplete-active':\n  'ctrl-j': 'core:move-down'\n  'ctrl-k': 'core:move-up\n```\n. steps to reproduce below:\n1. install vim-mode\n\n**Atom Version**: 1.7.1\n**System**: Mac OS X 10.11.4\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.65.1\n\n### Stack Trace\n\nFailed to activate the vim-mode package\n\n```\nAt this.editor.buffer.getChangesSinceCheckpoint is not a function\n\nTypeError: this.editor.buffer.getChangesSinceCheckpoint is not a function\n    at VimState.module.exports.VimState.deactivateInsertMode (/Users/asafkatz/.atom/packages/vim-mode/lib/vim-state.coffee:456:30)\n    at VimState.module.exports.VimState.activateNormalMode (/Users/asafkatz/.atom/packages/vim-mode/lib/vim-state.coffee:392:6)\n    at new VimState (/Users/asafkatz/.atom/packages/vim-mode/lib/vim-state.coffee:45:8)\n    at /Users/asafkatz/.atom/packages/vim-mode/lib/vim-mode.coffee:21:22\n    at Workspace.module.exports.Workspace.observeTextEditors (/Applications/Atom.app/Contents/Resources/app.asar/src/workspace.js:307:9)\n    at Object.module.exports.activate (/Users/asafkatz/.atom/packages/vim-mode/lib/vim-mode.coffee:18:37)\n    at Package.module.exports.Package.activateNow (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:183:20)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/package.js:156:32\n    at Package.module.exports.Package.measure (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:92:15)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/package.js:149:26\n    at Package.module.exports.Package.activate (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:146:34)\n    at PackageManager.module.exports.PackageManager.activatePackage (/Applications/Atom.app/Contents/Resources/app.asar/src/package-manager.js:538:21)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/package-manager.js:342:19\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/config.js:631:20\n    at Function.module.exports.Emitter.simpleDispatch (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:25:14)\n    at Emitter.module.exports.Emitter.emit (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:125:28)\n    at Config.module.exports.Config.emitChangeEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/config.js:816:29)\n    at Config.module.exports.Config.setRawValue (/Applications/Atom.app/Contents/Resources/app.asar/src/config.js:608:19)\n    at Config.module.exports.Config.set (/Applications/Atom.app/Contents/Resources/app.asar/src/config.js:227:14)\n    at Config.module.exports.Config.removeAtKeyPath (/Applications/Atom.app/Contents/Resources/app.asar/src/config.js:377:12)\n    at Package.module.exports.Package.enable (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:77:26)\n    at PackageManager.module.exports.PackageManager.enablePackage (/Applications/Atom.app/Contents/Resources/app.asar/src/package-manager.js:169:14)\n    at /Applications/Atom.app/Contents/Resources/app.asar/node_modules/settings-view/lib/package-card.js:693:36\n    at /Applications/Atom.app/Contents/Resources/app.asar/node_modules/settings-view/lib/package-manager.js:458:15\n    at exit (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/settings-view/lib/package-manager.js:73:16)\n    at triggerExitCallback (/Applications/Atom.app/Contents/Resources/app.asar/src/buffered-process.js:215:47)\n    at ChildProcess.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/buffered-process.js:237:18)\n    at emitTwo (events.js:87:13)\n    at ChildProcess.emit (events.js:172:7)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)\n```\n\n### Commands\n\n```\n     -0:12.3.0 core:confirm (atom-text-editor.editor.mini.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nautocomplete-clang, v0.9.3\nbuild, v0.62.0\nlanguage-ini, v1.16.0\nlinter, v1.11.4\nlinter-gcc, v0.6.14\nplatformio-ide, v1.2.1\nplatformio-ide-terminal, v2.0.9\ntool-bar, v0.4.0\nvim-mode, v0.65.1\n\n# Dev\nNo dev packages\n```\n. this one works with atom 1.8.0\n\n``` cson\n'.autocomplete-active':\n  'ctrl-j': 'core:move-down'\n  'ctrl-k': 'core:move-up\n```\n. steps to reproduce below:\n1. install vim-mode\n\n**Atom Version**: 1.7.1\n**System**: Mac OS X 10.11.4\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.65.1\n\n### Stack Trace\n\nFailed to activate the vim-mode package\n\n```\nAt this.editor.buffer.getChangesSinceCheckpoint is not a function\n\nTypeError: this.editor.buffer.getChangesSinceCheckpoint is not a function\n    at VimState.module.exports.VimState.deactivateInsertMode (/Users/asafkatz/.atom/packages/vim-mode/lib/vim-state.coffee:456:30)\n    at VimState.module.exports.VimState.activateNormalMode (/Users/asafkatz/.atom/packages/vim-mode/lib/vim-state.coffee:392:6)\n    at new VimState (/Users/asafkatz/.atom/packages/vim-mode/lib/vim-state.coffee:45:8)\n    at /Users/asafkatz/.atom/packages/vim-mode/lib/vim-mode.coffee:21:22\n    at Workspace.module.exports.Workspace.observeTextEditors (/Applications/Atom.app/Contents/Resources/app.asar/src/workspace.js:307:9)\n    at Object.module.exports.activate (/Users/asafkatz/.atom/packages/vim-mode/lib/vim-mode.coffee:18:37)\n    at Package.module.exports.Package.activateNow (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:183:20)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/package.js:156:32\n    at Package.module.exports.Package.measure (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:92:15)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/package.js:149:26\n    at Package.module.exports.Package.activate (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:146:34)\n    at PackageManager.module.exports.PackageManager.activatePackage (/Applications/Atom.app/Contents/Resources/app.asar/src/package-manager.js:538:21)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/package-manager.js:342:19\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/config.js:631:20\n    at Function.module.exports.Emitter.simpleDispatch (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:25:14)\n    at Emitter.module.exports.Emitter.emit (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:125:28)\n    at Config.module.exports.Config.emitChangeEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/config.js:816:29)\n    at Config.module.exports.Config.setRawValue (/Applications/Atom.app/Contents/Resources/app.asar/src/config.js:608:19)\n    at Config.module.exports.Config.set (/Applications/Atom.app/Contents/Resources/app.asar/src/config.js:227:14)\n    at Config.module.exports.Config.removeAtKeyPath (/Applications/Atom.app/Contents/Resources/app.asar/src/config.js:377:12)\n    at Package.module.exports.Package.enable (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:77:26)\n    at PackageManager.module.exports.PackageManager.enablePackage (/Applications/Atom.app/Contents/Resources/app.asar/src/package-manager.js:169:14)\n    at /Applications/Atom.app/Contents/Resources/app.asar/node_modules/settings-view/lib/package-card.js:693:36\n    at /Applications/Atom.app/Contents/Resources/app.asar/node_modules/settings-view/lib/package-manager.js:458:15\n    at exit (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/settings-view/lib/package-manager.js:73:16)\n    at triggerExitCallback (/Applications/Atom.app/Contents/Resources/app.asar/src/buffered-process.js:215:47)\n    at ChildProcess.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/buffered-process.js:237:18)\n    at emitTwo (events.js:87:13)\n    at ChildProcess.emit (events.js:172:7)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)\n```\n\n### Commands\n\n```\n     -0:12.3.0 core:confirm (atom-text-editor.editor.mini.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nautocomplete-clang, v0.9.3\nbuild, v0.62.0\nlanguage-ini, v1.16.0\nlinter, v1.11.4\nlinter-gcc, v0.6.14\nplatformio-ide, v1.2.1\nplatformio-ide-terminal, v2.0.9\ntool-bar, v0.4.0\nvim-mode, v0.65.1\n\n# Dev\nNo dev packages\n```\n. ",
    "morenoh149": "is the same as searching when pressing `/` ? when I search using the forward slash the search is case sensitive but I would like case insensitive.\n. It really should be the default. Is there any argument against it? Or does it simply need to be coded up?\n. @oshliaer have you seen https://github.com/atom/vim-mode/pull/940 ? the default is now different. However this issue still concerns a different issue.\n. dont' think this works\n. I just updated to 0.63. Maybe Im confused? I came here searching for why `ctrl-f` moves the screen down but not my cursor.\n\nSo I do `ctrl-f` then when I do `j` my screen jumps back to where the cursor stayed.\n. oh it's fixed now. I hadn't restarted.\n. I'd like to be assigned this. And also given some direction on where to start looking. It should be trivial to implement zC as well (the inverse).\n. https://atom.io/docs/v1.5.2/hacking-atom-the-init-file\n\n``` cson\n/*\n~/.atom/keymap.cson\n*/\n'atom-workspace':\n  'ctrl-alt-v': 'vim-mode:toggle-enabled'\n```\n. no clue. I tried to be as clear as possible.\n. seeing this as well. No recent commits here seem related https://github.com/atom/vim-mode/commits/master could it be an interaction between installed packages?\n\nvim-mode 0.64\natom 1.7.1\n. Don't get how the latest commit was on March 10th and this wasn't reported until April 14th though...\n. then maybe 1.7.0 or 1.7.1 broke it. Released April 13th and 14th respectively.\n\nhttps://github.com/atom/atom/releases/tag/v1.7.0\n\nhttps://github.com/atom/atom/releases/tag/v1.7.1\n. Please add to the discussion. Perform a little digging and surface your results. +1's aren't helping anyone.\n. k, so we change [TransactionBundler](https://github.com/atom/vim-mode/blob/a2464a8c434dfbe6db9b2ca99f6a49c50a4d8d31/lib/operators/input.coffee#L140) to _\"bundle bunch of changes from checkpoint you start `insert-mode`\"_. Which I'm not 100% sure what that means.\n. is the same as searching when pressing `/` ? when I search using the forward slash the search is case sensitive but I would like case insensitive.\n. It really should be the default. Is there any argument against it? Or does it simply need to be coded up?\n. @oshliaer have you seen https://github.com/atom/vim-mode/pull/940 ? the default is now different. However this issue still concerns a different issue.\n. dont' think this works\n. I just updated to 0.63. Maybe Im confused? I came here searching for why `ctrl-f` moves the screen down but not my cursor.\n\nSo I do `ctrl-f` then when I do `j` my screen jumps back to where the cursor stayed.\n. oh it's fixed now. I hadn't restarted.\n. I'd like to be assigned this. And also given some direction on where to start looking. It should be trivial to implement zC as well (the inverse).\n. https://atom.io/docs/v1.5.2/hacking-atom-the-init-file\n\n``` cson\n/*\n~/.atom/keymap.cson\n*/\n'atom-workspace':\n  'ctrl-alt-v': 'vim-mode:toggle-enabled'\n```\n. no clue. I tried to be as clear as possible.\n. seeing this as well. No recent commits here seem related https://github.com/atom/vim-mode/commits/master could it be an interaction between installed packages?\n\nvim-mode 0.64\natom 1.7.1\n. Don't get how the latest commit was on March 10th and this wasn't reported until April 14th though...\n. then maybe 1.7.0 or 1.7.1 broke it. Released April 13th and 14th respectively.\n\nhttps://github.com/atom/atom/releases/tag/v1.7.0\n\nhttps://github.com/atom/atom/releases/tag/v1.7.1\n. Please add to the discussion. Perform a little digging and surface your results. +1's aren't helping anyone.\n. k, so we change [TransactionBundler](https://github.com/atom/vim-mode/blob/a2464a8c434dfbe6db9b2ca99f6a49c50a4d8d31/lib/operators/input.coffee#L140) to _\"bundle bunch of changes from checkpoint you start `insert-mode`\"_. Which I'm not 100% sure what that means.\n. ",
    "mdpatrick": "+1 for editing between tag blocks. `dt<` isn't as convenient :)\n. Good catch! It is.\n. +1 for editing between tag blocks. `dt<` isn't as convenient :)\n. Good catch! It is.\n. ",
    "joshmedeski": "+1!\n. +1!\n. ",
    "neiled": ":+1: \n. Great! This might close #418 too perhaps @maxbrunsfeld? \n. And thanks @murphyrandle :wink: \n. :+1: \n. Great! This might close #418 too perhaps @maxbrunsfeld? \n. And thanks @murphyrandle :wink: \n. ",
    "collegeimprovements": ":+1:  for `cit` and `dit`. It would also be great if for `ruby` files, you can implement method navigation `]m` and selection `vim` bindings.\n. :+1:  for `cit` and `dit`. It would also be great if for `ruby` files, you can implement method navigation `]m` and selection `vim` bindings.\n. ",
    "benmccormick": "Is there any interest in using this pull request?  It fixes broken behavior, has tests, and performs well after the change I made.\n. Yeah I'll take a look.  Probably should have realized that would be a problem the first time.  For some reason I seem to delete/change from the start of words much more often than the end.\n. @maxbrunsfeld so as far as I can tell the root issue here is really this: https://github.com/atom/atom/issues/6538  It seems like getCurrentWordBufferRange has issues.  As far as I can tell its behavior is greedy to the right\n1. If the cursor is just selecting part of a word or has no selection but is inside a word, it just selects that word (this is why the ciw behavior used to work a good deal of the time)\n2. If the cursor/selection is adjacent to 2 \"words\" and there is no selection, it grabs both words. This is what was causing the original issue I fixed.  Unfortunately I thought this was because it wasn't able to tell which word to grab if there was no selection.  But in reality it seems that its a bit more complicated.  If its just a plain cursor it grabs both.  But if there is a selection that ends on a word boundary, it grabs the selected word and a word to the right.  \n\nSo thats a bug there.  I think working around that probably requires reimplementing at least some of the getCurrentWordBufferRange in vim-mode, or as a hack, calculating the range twice if the selector is empty (which it really always should be for text objects).  We could calculate it once with just the empty cursor, once with a selection of the character to the right of the cursor, and then take the smaller of the 2 selection.\n\nThats a horrifically hacky workaround to something that should probably be resolved upstream of this repo though.\n. @maxbrunsfeld looks like https://github.com/atom/atom/pull/8906 is headed in the right direction for vim-mode to be able to fix this cleanly without hacks, so I'll keep an eye on that and put out a PR here if necessary when that goes through (possibly the result of that PR will just fix this issue?  I'm not totally positive.  It will definitely make it clean to fix)\n. @drifkin you could pull request something?  I didn't see a good way to catch both ends of the bugs without getting much much hackier.  And I don't like doing that to other people's codebases :)  But if you see a better idea I'd be curious. \n. @maxbrunsfeld (or anyone else) is there anything I can do to get this moving? The behavior is pretty annoying to me.\n. @50Wliu @maxbrunsfeld is there anyone I can work with to move this along?\n. @maxbrunsfeld great!  No worries, I know you all have more important things in life :)  Glad it got in!  Thanks for your work to maintain this lib.\n. Is there any interest in using this pull request?  It fixes broken behavior, has tests, and performs well after the change I made.\n. Yeah I'll take a look.  Probably should have realized that would be a problem the first time.  For some reason I seem to delete/change from the start of words much more often than the end.\n. @maxbrunsfeld so as far as I can tell the root issue here is really this: https://github.com/atom/atom/issues/6538  It seems like getCurrentWordBufferRange has issues.  As far as I can tell its behavior is greedy to the right\n1. If the cursor is just selecting part of a word or has no selection but is inside a word, it just selects that word (this is why the ciw behavior used to work a good deal of the time)\n2. If the cursor/selection is adjacent to 2 \"words\" and there is no selection, it grabs both words. This is what was causing the original issue I fixed.  Unfortunately I thought this was because it wasn't able to tell which word to grab if there was no selection.  But in reality it seems that its a bit more complicated.  If its just a plain cursor it grabs both.  But if there is a selection that ends on a word boundary, it grabs the selected word and a word to the right.  \n\nSo thats a bug there.  I think working around that probably requires reimplementing at least some of the getCurrentWordBufferRange in vim-mode, or as a hack, calculating the range twice if the selector is empty (which it really always should be for text objects).  We could calculate it once with just the empty cursor, once with a selection of the character to the right of the cursor, and then take the smaller of the 2 selection.\n\nThats a horrifically hacky workaround to something that should probably be resolved upstream of this repo though.\n. @maxbrunsfeld looks like https://github.com/atom/atom/pull/8906 is headed in the right direction for vim-mode to be able to fix this cleanly without hacks, so I'll keep an eye on that and put out a PR here if necessary when that goes through (possibly the result of that PR will just fix this issue?  I'm not totally positive.  It will definitely make it clean to fix)\n. @drifkin you could pull request something?  I didn't see a good way to catch both ends of the bugs without getting much much hackier.  And I don't like doing that to other people's codebases :)  But if you see a better idea I'd be curious. \n. @maxbrunsfeld (or anyone else) is there anything I can do to get this moving? The behavior is pretty annoying to me.\n. @50Wliu @maxbrunsfeld is there anyone I can work with to move this along?\n. @maxbrunsfeld great!  No worries, I know you all have more important things in life :)  Glad it got in!  Thanks for your work to maintain this lib.\n. ",
    "erisdev": "I dunno, I haven't checked on or cared about this since last year. the patch is out of date and my copy of the repository is gone anyway.\n. I dunno, I haven't checked on or cared about this since last year. the patch is out of date and my copy of the repository is gone anyway.\n. ",
    "mpe": "Works for me, +1.\n. Works for me, +1.\n. ",
    "as-cii": "Interesting, does upgrading to the latest Atom version help somehow? We've recently changed that code path, so the new version might help fixing this. Also, could you tell if it happens consistently?\n\nThanks, @dcalhoun!\n\nAnyhow, I should be able to take a look later this week. /cc: @maxbrunsfeld \n. Thanks, @maxbrunsfeld! Please, note that I have bumped also the engine version in 6165b66.\n. I think the two failing specs are red because of subpixel font scaling: changing `20` to `19` should be okay there.\n. Thanks Max for addressing this, will take a better look at this tomorrow morning. \ud83d\ude4f\n. I have just merged a pull request that should make the deprecation go away in the next update. However, as mentioned in the README, we recommend switching to [vim-mode-plus](https://github.com/t9md/atom-vim-mode-plus) as this package is no longer maintained.. Specs are red because Atom stable still uses the shadow DOM. What do you think about merging this after rolling the railcars, @simurai?\n. Interesting, does upgrading to the latest Atom version help somehow? We've recently changed that code path, so the new version might help fixing this. Also, could you tell if it happens consistently?\n\nThanks, @dcalhoun!\n\nAnyhow, I should be able to take a look later this week. /cc: @maxbrunsfeld \n. Thanks, @maxbrunsfeld! Please, note that I have bumped also the engine version in 6165b66.\n. I think the two failing specs are red because of subpixel font scaling: changing `20` to `19` should be okay there.\n. Thanks Max for addressing this, will take a better look at this tomorrow morning. \ud83d\ude4f\n. I have just merged a pull request that should make the deprecation go away in the next update. However, as mentioned in the README, we recommend switching to [vim-mode-plus](https://github.com/t9md/atom-vim-mode-plus) as this package is no longer maintained.. Specs are red because Atom stable still uses the shadow DOM. What do you think about merging this after rolling the railcars, @simurai?\n. ",
    "octoyuz": "Anybody give some feedback ?\n. Anybody give some feedback ?\n. ",
    "mdp": "I believe this is a dupe of #219\n. I believe this is a dupe of #219\n. ",
    "k3vur": "glad to help and happy to see it fixed so quickly!\n. glad to help and happy to see it fixed so quickly!\n. ",
    "zcbenz": "@carlosdcastillo had made a package that demonstrated bridging Atom with Neovim: https://github.com/carlosdcastillo/vim-mode, it is still pre-alpha but looks promising.\n\nThere is also a similar discussion in Neovim: https://www.bountysource.com/issues/5826537-idea-atom-editor-as-a-front-end-for-neovim.\n. @carlosdcastillo had made a package that demonstrated bridging Atom with Neovim: https://github.com/carlosdcastillo/vim-mode, it is still pre-alpha but looks promising.\n\nThere is also a similar discussion in Neovim: https://www.bountysource.com/issues/5826537-idea-atom-editor-as-a-front-end-for-neovim.\n. ",
    "mikelyons": "Updating appears to have solved the issue (both to Atom 0.145.0 and to vim-mode 0.16.0)\n\nThanks!\n. Updating appears to have solved the issue (both to Atom 0.145.0 and to vim-mode 0.16.0)\n\nThanks!\n. ",
    "autochthe": "This looks good in the short term, but a long term solution would be binding `:` to an implementation of [command-line-mode](http://vimdoc.sourceforge.net/htmldoc/cmdline.html#Command-line) to serve as an entry point into the Command Palette `Shift+Ctrl+P` and Go To Line `Ctrl+G` depending on arguments (eg. `:git commit` vs. `:42`).  Vim commands could be added to the Command Palette, or input intercepted to invoke other dialogs, like the fuzzy file finder for `:e`.\n. Lol, so trying to do that kept starting the \"Open File Dialog\".  To see what was going on, I did `atom.keymaps.add(\"test\", {\"body\": {\"O P\": \"core:confirm\" }})`, which I think might get what you wanted?\n\nWhat I see with just `<shift>o`:\n![image](https://cloud.githubusercontent.com/assets/333673/5118972/be4c0164-702f-11e4-87e3-f2f55a9508dc.png)\n\nWhat I see with `<shift-down>op<shift-up>`:\n![image](https://cloud.githubusercontent.com/assets/333673/5118986/00b6c4e4-7030-11e4-9a52-ba627f86a887.png)\n\nWhat I see with `<shift-down>o<shift-up><shift-down>`:\n![image](https://cloud.githubusercontent.com/assets/333673/5119040/d387f64a-7030-11e4-98f7-cb5e73ecb744.png)\n\nWhat I see with `<shift-down>o<shift-up><shift-down>p`:\n![image](https://cloud.githubusercontent.com/assets/333673/5119030/9df04dd4-7030-11e4-9531-ea60d094ebec.png)\n. I noticed that somehow the find `f` and reverse-find `F` motions are unaffected by this bug when composed with delete and yank.  No matter how many times I `<shift-down><shift-up>` before pressing a letter, it always moves to the right letter.  This holds true for lowercase letters, uppercase letters, and all symbols.\n\nSeems likely to be due to the fact that the find motions don't rely on multikey bindings.  The solution may be to bind on `i` or `a` and switch into a `text-object` mode from the `operator-pending` mode.\n. This looks good in the short term, but a long term solution would be binding `:` to an implementation of [command-line-mode](http://vimdoc.sourceforge.net/htmldoc/cmdline.html#Command-line) to serve as an entry point into the Command Palette `Shift+Ctrl+P` and Go To Line `Ctrl+G` depending on arguments (eg. `:git commit` vs. `:42`).  Vim commands could be added to the Command Palette, or input intercepted to invoke other dialogs, like the fuzzy file finder for `:e`.\n. Lol, so trying to do that kept starting the \"Open File Dialog\".  To see what was going on, I did `atom.keymaps.add(\"test\", {\"body\": {\"O P\": \"core:confirm\" }})`, which I think might get what you wanted?\n\nWhat I see with just `<shift>o`:\n![image](https://cloud.githubusercontent.com/assets/333673/5118972/be4c0164-702f-11e4-87e3-f2f55a9508dc.png)\n\nWhat I see with `<shift-down>op<shift-up>`:\n![image](https://cloud.githubusercontent.com/assets/333673/5118986/00b6c4e4-7030-11e4-9a52-ba627f86a887.png)\n\nWhat I see with `<shift-down>o<shift-up><shift-down>`:\n![image](https://cloud.githubusercontent.com/assets/333673/5119040/d387f64a-7030-11e4-98f7-cb5e73ecb744.png)\n\nWhat I see with `<shift-down>o<shift-up><shift-down>p`:\n![image](https://cloud.githubusercontent.com/assets/333673/5119030/9df04dd4-7030-11e4-9531-ea60d094ebec.png)\n. I noticed that somehow the find `f` and reverse-find `F` motions are unaffected by this bug when composed with delete and yank.  No matter how many times I `<shift-down><shift-up>` before pressing a letter, it always moves to the right letter.  This holds true for lowercase letters, uppercase letters, and all symbols.\n\nSeems likely to be due to the fact that the find motions don't rely on multikey bindings.  The solution may be to bind on `i` or `a` and switch into a `text-object` mode from the `operator-pending` mode.\n. ",
    "Xe": "Maybe it would be better overall to add full-blown ex-command support.\n. can you pastebin that?\n. Maybe it would be better overall to add full-blown ex-command support.\n. can you pastebin that?\n. ",
    "mkhoeini": "It might be helpful to see how sublime solved the problem.[1](https://github.com/SublimeText/VintageEx)\n\nI think it might be a good idea to distinguish between strict mode and light mode. For example emacs' EVIL mode, which claims near full compatibility with vim has several different levels of strictness regarding how much you want to experience vim or emacs.[2](http://www.emacswiki.org/emacs/Evil)\n\nFor example in light mode we can bind `:` to `cmd+shift_P` and insert a `vim:` string in the begining of command palette. Then we can instruct the command palette to behave specially when the command starts with `vim:`.\n\nAnother thing which might come interesting is that neovim guys are developing a vimscript -> lua transpiler with the aim of 99% compatiblity. It might worth investigating if it can be easily enough separated from neovim and be used in atom. Also, some parts of it might come interesting, like the parser.[3](https://github.com/neovim/neovim/pull/243)\n\nAlso, as discussed in #436 neovim itself runs as a server and guis are external plugin processes which communicate with it through jsonrpc. With that we would have 100% and seemless integration with the vim world. As it is obviously a superior solution to the vim integration I would argue that that route should be pursued as the official `vim-mode` plugin for atom.[4](https://www.youtube.com/watch?v=yluIxQRjUCk)\n\nWhat's your thoughts on the matter?\n. It might be helpful to see how sublime solved the problem.[1](https://github.com/SublimeText/VintageEx)\n\nI think it might be a good idea to distinguish between strict mode and light mode. For example emacs' EVIL mode, which claims near full compatibility with vim has several different levels of strictness regarding how much you want to experience vim or emacs.[2](http://www.emacswiki.org/emacs/Evil)\n\nFor example in light mode we can bind `:` to `cmd+shift_P` and insert a `vim:` string in the begining of command palette. Then we can instruct the command palette to behave specially when the command starts with `vim:`.\n\nAnother thing which might come interesting is that neovim guys are developing a vimscript -> lua transpiler with the aim of 99% compatiblity. It might worth investigating if it can be easily enough separated from neovim and be used in atom. Also, some parts of it might come interesting, like the parser.[3](https://github.com/neovim/neovim/pull/243)\n\nAlso, as discussed in #436 neovim itself runs as a server and guis are external plugin processes which communicate with it through jsonrpc. With that we would have 100% and seemless integration with the vim world. As it is obviously a superior solution to the vim integration I would argue that that route should be pursued as the official `vim-mode` plugin for atom.[4](https://www.youtube.com/watch?v=yluIxQRjUCk)\n\nWhat's your thoughts on the matter?\n. ",
    "cpadilla": "Thanks for implementing this. Are you going to keep adding to ex-mode or can we add this functionality to vim-mode?\n\nI'd be more than happy to help, although I've never used coffee script. I can start looking into it though, since this was kind of a big reason I haven't really switched from gVim to Atom. That and Atom still hasn't released version 1.0, yet.\n. How soon is soon? Any updates?\n. Thanks for implementing this. Are you going to keep adding to ex-mode or can we add this functionality to vim-mode?\n\nI'd be more than happy to help, although I've never used coffee script. I can start looking into it though, since this was kind of a big reason I haven't really switched from gVim to Atom. That and Atom still hasn't released version 1.0, yet.\n. How soon is soon? Any updates?\n. ",
    "sullimander": "Great, thanks!\n. Great, thanks!\n. ",
    "falsandtru": "I also same error has occurred.\nI was tested by installing each version.\n\n0.19.0 <- work\n0.19.1 <- not work\n\nI think that because of this change.\n\nWindows7 64bit\nAtom 0.150.0\nVim Mode 0.20.3\n. I check and waiting for the update of the distribution version by Chocolatey.\nThank you.\n. I also same error has occurred.\nI was tested by installing each version.\n\n0.19.0 <- work\n0.19.1 <- not work\n\nI think that because of this change.\n\nWindows7 64bit\nAtom 0.150.0\nVim Mode 0.20.3\n. I check and waiting for the update of the distribution version by Chocolatey.\nThank you.\n. ",
    "xarsh": "@maxbrunsfeld, thank you for your reply.\nYes, it occurs every time when I press those keys even though Atom has already been reloaded.\n. Hi @maxbrunsfeld,\nNow I tried the plugin on newest Atom (0.152.0) and Vim Mode does work perfectly.\n@falsandtru, it might be good to try upgrading Atom If you have not done it yet.  \nThank you.\n. @maxbrunsfeld, thank you for your reply.\nYes, it occurs every time when I press those keys even though Atom has already been reloaded.\n. Hi @maxbrunsfeld,\nNow I tried the plugin on newest Atom (0.152.0) and Vim Mode does work perfectly.\n@falsandtru, it might be good to try upgrading Atom If you have not done it yet.  \nThank you.\n. ",
    "bedge": "Agreed, without :hlsearch, vim-mode is a non-starter.\n. Agreed, without :hlsearch, vim-mode is a non-starter.\n. ",
    "Raynes": "Okay, either way, that doesn't work either.\n. Alright, alright. I guess this is a feature of evil-mode then. It works in Emacs (and I believe macvim), but not in terminal vim.\n\nFINE.\n\nYOU WIN. GOSH.\n. Okay, either way, that doesn't work either.\n. Alright, alright. I guess this is a feature of evil-mode then. It works in Emacs (and I believe macvim), but not in terminal vim.\n\nFINE.\n\nYOU WIN. GOSH.\n. ",
    "maxxk": "@maxbrunsfeld, thank you, I\u2019ll update my PR soon.\n\nI have some feedback/suggestions mostly about service provider best practices:\n1. Service API version should probably be in sync with provider package version. Is it appropriate to use something like `require('../package.json').version as`version`in`service.provide` as in http://stackoverflow.com/a/10855054 ?\n2. Most packages will provide some existing methods in a service (\"entry points\"). Probably ServiceHub docs or some generic guide could provide some info on such topics as:\n   - using fat arrows in entry point definitions or `.bind(...)` in `service.provide`\n   - writing service specs \u2014 should developer write separate spec for public API (it is what service consumers will expect) or just make references to corresponding entry point specs and how not to duplicate them in first case?\n   - service documentation\n. Tests didn't catch [exception](https://travis-ci.org/atom/vim-mode/builds/43450128) at `mainModule.deactivate`\nFixed an exception in 7f0dccb. \n. @maxbrunsfeld, thank you, I\u2019ll update my PR soon.\n\nI have some feedback/suggestions mostly about service provider best practices:\n1. Service API version should probably be in sync with provider package version. Is it appropriate to use something like `require('../package.json').version as`version`in`service.provide` as in http://stackoverflow.com/a/10855054 ?\n2. Most packages will provide some existing methods in a service (\"entry points\"). Probably ServiceHub docs or some generic guide could provide some info on such topics as:\n   - using fat arrows in entry point definitions or `.bind(...)` in `service.provide`\n   - writing service specs \u2014 should developer write separate spec for public API (it is what service consumers will expect) or just make references to corresponding entry point specs and how not to duplicate them in first case?\n   - service documentation\n. Tests didn't catch [exception](https://travis-ci.org/atom/vim-mode/builds/43450128) at `mainModule.deactivate`\nFixed an exception in 7f0dccb. \n. ",
    "urmyfaith": "@maxbrunsfeld  yes,i do use the command line  **apm install vim-mode** ,but it does not work for me.\n\nit always can not download file.\n. @maxbrunsfeld \n\n# first output is\n\n```\nzx:~ zx$ apm install  vim-mode\nInstalling vim-mode to /Users/zx/.atom/packages \u2717\n\nnpm http GET https://registry.npmjs.org/event-kit\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm http 304 https://registry.npmjs.org/event-kit\nnpm http 200 https://registry.npmjs.org/underscore-plus\nnpm http GET https://registry.npmjs.org/underscore-plus/-/underscore-plus-1.6.3.tgz\nnpm http 200 https://registry.npmjs.org/underscore-plus/-/underscore-plus-1.6.3.tgz\nnpm http GET https://registry.npmjs.org/underscore\nnpm http GET https://registry.npmjs.org/grim\nnpm http 200 https://registry.npmjs.org/underscore\nnpm http 304 https://registry.npmjs.org/grim\nnpm http GET https://registry.npmjs.org/emissary\nnpm http 304 https://registry.npmjs.org/emissary\nnpm http GET https://registry.npmjs.org/mixto\nnpm http GET https://registry.npmjs.org/property-accessors\nnpm ERR! git clone https://github.com/Benvie/harmony-collections.git xcrun: error: active developer path (\"/Applications/Xcode.app/Contents/Developer\") does not exist, use `xcode-select --switch path/to/Xcode.app` to specify the Xcode that you wish to use for command line developer tools (or see `man xcode-select`)\nnpm ERR! Error: Command failed: xcrun: error: active developer path (\"/Applications/Xcode.app/Contents/Developer\") does not exist, use `xcode-select --switch path/to/Xcode.app` to specify the Xcode that you wish to use for command line developer tools (or see `man xcode-select`)\nnpm ERR! \nnpm ERR!     at ChildProcess.exithandler (child_process.js:648:15)\nnpm ERR!     at ChildProcess.emit (events.js:98:17)\nnpm ERR!     at maybeClose (child_process.js:756:16)\nnpm ERR!     at Socket.<anonymous> (child_process.js:969:11)\nnpm ERR!     at Socket.emit (events.js:95:17)\nnpm ERR!     at Pipe.close (net.js:465:12)\nnpm ERR! If you need help, you may report this *entire* log,\nnpm ERR! including the npm and node versions, at:\nnpm ERR!     <http://github.com/npm/npm/issues>\n\nnpm ERR! System Darwin 14.0.0\nnpm ERR! command \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/bin/node\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/node_modules/npm/bin/npm-cli.js\" \"--globalconfig\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/.apmrc\" \"--userconfig\" \"/Users/zx/.atom/.apmrc\" \"install\" \"/private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/d-1141116-443-1kejvjn/package.tgz\" \"--target=0.18.0\" \"--arch=x64\"\nnpm ERR! cwd /private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/apm-install-dir-1141116-443-53i6sw\nnpm ERR! node -v v0.10.33\nnpm ERR! npm -v 1.4.4\nnpm ERR! code 1\nnpm http 304 https://registry.npmjs.org/mixto\nnpm http 304 https://registry.npmjs.org/property-accessors\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/apm-install-dir-1141116-443-53i6sw/npm-debug.log\nnpm ERR! not ok code 0\n```\n\n# after reinstall Xcode(6.1-->5.1)\n\n```\nzx:~ zx$ apm install  vim-mode\nInstalling vim-mode to /Users/zx/.atom/packages \u2717\n\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm http GET https://registry.npmjs.org/event-kit\nnpm http 304 https://registry.npmjs.org/underscore-plus\nnpm http 304 https://registry.npmjs.org/event-kit\nnpm http GET https://registry.npmjs.org/underscore\nnpm http GET https://registry.npmjs.org/grim\nnpm http 304 https://registry.npmjs.org/grim\nnpm http GET https://registry.npmjs.org/emissary\nnpm http 304 https://registry.npmjs.org/underscore\nnpm http 304 https://registry.npmjs.org/emissary\nnpm http GET https://registry.npmjs.org/mixto\nnpm http GET https://registry.npmjs.org/property-accessors\nnpm WARN `git config --get remote.origin.url` returned wrong result (https://github.com/Benvie/harmony-collections.git) \nnpm http 304 https://registry.npmjs.org/property-accessors\nnpm http 304 https://registry.npmjs.org/mixto\nnpm ERR! git clone https://github.com/Benvie/harmony-collections.git Cloning into bare repository '/Users/zx/.atom/.node-gyp/.atom/.apm/_git-remotes/https-github-com-Benvie-harmony-collections-git-df214100'...\nnpm ERR! git clone https://github.com/Benvie/harmony-collections.git error: RPC failed; result=52, HTTP code = 0\nnpm ERR! git clone https://github.com/Benvie/harmony-collections.git fatal: The remote end hung up unexpectedly\nnpm ERR! Error: Command failed: Cloning into bare repository '/Users/zx/.atom/.node-gyp/.atom/.apm/_git-remotes/https-github-com-Benvie-harmony-collections-git-df214100'...\nnpm ERR! error: RPC failed; result=52, HTTP code = 0\nnpm ERR! fatal: The remote end hung up unexpectedly\nnpm ERR! \nnpm ERR!     at ChildProcess.exithandler (child_process.js:648:15)\nnpm ERR!     at ChildProcess.emit (events.js:98:17)\nnpm ERR!     at maybeClose (child_process.js:756:16)\nnpm ERR!     at Socket.<anonymous> (child_process.js:969:11)\nnpm ERR!     at Socket.emit (events.js:95:17)\nnpm ERR!     at Pipe.close (net.js:465:12)\nnpm ERR! If you need help, you may report this *entire* log,\nnpm ERR! including the npm and node versions, at:\nnpm ERR!     <http://github.com/npm/npm/issues>\n\nnpm ERR! System Darwin 14.0.0\nnpm ERR! command \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/bin/node\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/node_modules/npm/bin/npm-cli.js\" \"--globalconfig\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/.apmrc\" \"--userconfig\" \"/Users/zx/.atom/.apmrc\" \"install\" \"/Users/zx/.atom/.node-gyp/.atom/.apm/vim-mode/0.21.0/package.tgz\" \"--target=0.18.0\" \"--arch=x64\"\nnpm ERR! cwd /private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/apm-install-dir-1141116-557-j0ns72\nnpm ERR! node -v v0.10.33\nnpm ERR! npm -v 1.4.4\nnpm ERR! code 128\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/apm-install-dir-1141116-557-j0ns72/npm-debug.log\nnpm ERR! not ok code 0\n```\n\nthanks for your help.\n. @maxbrunsfeld  I can clone other git repository well, and git woks well under my mac.\n\nbut the connection is  failed every time.\n\n```\n\nzx:software zx$ git clone https://github.com/Benvie/harmony-collections.git\nCloning into 'harmony-collections'...\nerror: RPC failed; result=52, HTTP code = 0\nfatal: The remote end hung up unexpectedly\n```\n. @maxbrunsfeld  yes,i do use the command line  **apm install vim-mode** ,but it does not work for me.\n\nit always can not download file.\n. @maxbrunsfeld \n\n# first output is\n\n```\nzx:~ zx$ apm install  vim-mode\nInstalling vim-mode to /Users/zx/.atom/packages \u2717\n\nnpm http GET https://registry.npmjs.org/event-kit\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm http 304 https://registry.npmjs.org/event-kit\nnpm http 200 https://registry.npmjs.org/underscore-plus\nnpm http GET https://registry.npmjs.org/underscore-plus/-/underscore-plus-1.6.3.tgz\nnpm http 200 https://registry.npmjs.org/underscore-plus/-/underscore-plus-1.6.3.tgz\nnpm http GET https://registry.npmjs.org/underscore\nnpm http GET https://registry.npmjs.org/grim\nnpm http 200 https://registry.npmjs.org/underscore\nnpm http 304 https://registry.npmjs.org/grim\nnpm http GET https://registry.npmjs.org/emissary\nnpm http 304 https://registry.npmjs.org/emissary\nnpm http GET https://registry.npmjs.org/mixto\nnpm http GET https://registry.npmjs.org/property-accessors\nnpm ERR! git clone https://github.com/Benvie/harmony-collections.git xcrun: error: active developer path (\"/Applications/Xcode.app/Contents/Developer\") does not exist, use `xcode-select --switch path/to/Xcode.app` to specify the Xcode that you wish to use for command line developer tools (or see `man xcode-select`)\nnpm ERR! Error: Command failed: xcrun: error: active developer path (\"/Applications/Xcode.app/Contents/Developer\") does not exist, use `xcode-select --switch path/to/Xcode.app` to specify the Xcode that you wish to use for command line developer tools (or see `man xcode-select`)\nnpm ERR! \nnpm ERR!     at ChildProcess.exithandler (child_process.js:648:15)\nnpm ERR!     at ChildProcess.emit (events.js:98:17)\nnpm ERR!     at maybeClose (child_process.js:756:16)\nnpm ERR!     at Socket.<anonymous> (child_process.js:969:11)\nnpm ERR!     at Socket.emit (events.js:95:17)\nnpm ERR!     at Pipe.close (net.js:465:12)\nnpm ERR! If you need help, you may report this *entire* log,\nnpm ERR! including the npm and node versions, at:\nnpm ERR!     <http://github.com/npm/npm/issues>\n\nnpm ERR! System Darwin 14.0.0\nnpm ERR! command \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/bin/node\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/node_modules/npm/bin/npm-cli.js\" \"--globalconfig\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/.apmrc\" \"--userconfig\" \"/Users/zx/.atom/.apmrc\" \"install\" \"/private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/d-1141116-443-1kejvjn/package.tgz\" \"--target=0.18.0\" \"--arch=x64\"\nnpm ERR! cwd /private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/apm-install-dir-1141116-443-53i6sw\nnpm ERR! node -v v0.10.33\nnpm ERR! npm -v 1.4.4\nnpm ERR! code 1\nnpm http 304 https://registry.npmjs.org/mixto\nnpm http 304 https://registry.npmjs.org/property-accessors\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/apm-install-dir-1141116-443-53i6sw/npm-debug.log\nnpm ERR! not ok code 0\n```\n\n# after reinstall Xcode(6.1-->5.1)\n\n```\nzx:~ zx$ apm install  vim-mode\nInstalling vim-mode to /Users/zx/.atom/packages \u2717\n\nnpm http GET https://registry.npmjs.org/underscore-plus\nnpm http GET https://registry.npmjs.org/event-kit\nnpm http 304 https://registry.npmjs.org/underscore-plus\nnpm http 304 https://registry.npmjs.org/event-kit\nnpm http GET https://registry.npmjs.org/underscore\nnpm http GET https://registry.npmjs.org/grim\nnpm http 304 https://registry.npmjs.org/grim\nnpm http GET https://registry.npmjs.org/emissary\nnpm http 304 https://registry.npmjs.org/underscore\nnpm http 304 https://registry.npmjs.org/emissary\nnpm http GET https://registry.npmjs.org/mixto\nnpm http GET https://registry.npmjs.org/property-accessors\nnpm WARN `git config --get remote.origin.url` returned wrong result (https://github.com/Benvie/harmony-collections.git) \nnpm http 304 https://registry.npmjs.org/property-accessors\nnpm http 304 https://registry.npmjs.org/mixto\nnpm ERR! git clone https://github.com/Benvie/harmony-collections.git Cloning into bare repository '/Users/zx/.atom/.node-gyp/.atom/.apm/_git-remotes/https-github-com-Benvie-harmony-collections-git-df214100'...\nnpm ERR! git clone https://github.com/Benvie/harmony-collections.git error: RPC failed; result=52, HTTP code = 0\nnpm ERR! git clone https://github.com/Benvie/harmony-collections.git fatal: The remote end hung up unexpectedly\nnpm ERR! Error: Command failed: Cloning into bare repository '/Users/zx/.atom/.node-gyp/.atom/.apm/_git-remotes/https-github-com-Benvie-harmony-collections-git-df214100'...\nnpm ERR! error: RPC failed; result=52, HTTP code = 0\nnpm ERR! fatal: The remote end hung up unexpectedly\nnpm ERR! \nnpm ERR!     at ChildProcess.exithandler (child_process.js:648:15)\nnpm ERR!     at ChildProcess.emit (events.js:98:17)\nnpm ERR!     at maybeClose (child_process.js:756:16)\nnpm ERR!     at Socket.<anonymous> (child_process.js:969:11)\nnpm ERR!     at Socket.emit (events.js:95:17)\nnpm ERR!     at Pipe.close (net.js:465:12)\nnpm ERR! If you need help, you may report this *entire* log,\nnpm ERR! including the npm and node versions, at:\nnpm ERR!     <http://github.com/npm/npm/issues>\n\nnpm ERR! System Darwin 14.0.0\nnpm ERR! command \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/bin/node\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/node_modules/npm/bin/npm-cli.js\" \"--globalconfig\" \"/Applications/Atom.app/Contents/Resources/app/apm/node_modules/atom-package-manager/.apmrc\" \"--userconfig\" \"/Users/zx/.atom/.apmrc\" \"install\" \"/Users/zx/.atom/.node-gyp/.atom/.apm/vim-mode/0.21.0/package.tgz\" \"--target=0.18.0\" \"--arch=x64\"\nnpm ERR! cwd /private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/apm-install-dir-1141116-557-j0ns72\nnpm ERR! node -v v0.10.33\nnpm ERR! npm -v 1.4.4\nnpm ERR! code 128\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /private/var/folders/3d/94kfbznj2gq79qsp97qxzg3w0000gn/T/apm-install-dir-1141116-557-j0ns72/npm-debug.log\nnpm ERR! not ok code 0\n```\n\nthanks for your help.\n. @maxbrunsfeld  I can clone other git repository well, and git woks well under my mac.\n\nbut the connection is  failed every time.\n\n```\n\nzx:software zx$ git clone https://github.com/Benvie/harmony-collections.git\nCloning into 'harmony-collections'...\nerror: RPC failed; result=52, HTTP code = 0\nfatal: The remote end hung up unexpectedly\n```\n. ",
    "arthurhuangzh": "i don't know why but it works now... \n. i don't know why but it works now... \n. ",
    "ftwillms": "Added the spec and while I was at it I noticed other, similar motions have since been updated (I'm guessing due to the latest Atom API release) so I've mimicked this new style as well.\n. Added the spec and while I was at it I noticed other, similar motions have since been updated (I'm guessing due to the latest Atom API release) so I've mimicked this new style as well.\n. ",
    "fbob": "To me this is the killer feature which prevent me to switch full time to atom\nAnyway, great job guys :)\nThanks !\n. To me this is the killer feature which prevent me to switch full time to atom\nAnyway, great job guys :)\nThanks !\n. ",
    "femueller": "+1\n. Thanks a lot! @t9md \n[vim-mode-plus](https://atom.io/packages/vim-mode-plus) and [vim-mode-plus-ex-mode](https://atom.io/packages/vim-mode-plus-ex-mode) are super helpful and fixed for me personally this issue.\nYour contributions made Atom really valuable and for me it's now possible to replace vim with it.\n. +1\n. Thanks a lot! @t9md \n[vim-mode-plus](https://atom.io/packages/vim-mode-plus) and [vim-mode-plus-ex-mode](https://atom.io/packages/vim-mode-plus-ex-mode) are super helpful and fixed for me personally this issue.\nYour contributions made Atom really valuable and for me it's now possible to replace vim with it.\n. ",
    "rtsolv": ":+1: \n. :+1: \n. ",
    "pthrasher": "I've got a basic (read: incomplete) implementation started here: #658 \n\nI'd love to get some feedback / possible collaboration.\n. @bronson Yes, it does. First, atom/text-buffer will need to support out-of-bounds selections. (beyond line endings)\n\nAfter that, it should be easy to add the visual changes to atom proper. I opened an issue to begin discussing this a while back, but haven't heard anything. (atom/text-buffer#59)\n\nI've been swamped, and haven't come back to this, but I will hopefully clean up this version and fix some kinks this week. I think having _something_ in place is a good first start. After that, perhaps I can take a whack at adding out-of-bounds support to text-buffer and see what people think.\n. I've got a basic (read: incomplete) implementation started here: #658 \n\nI'd love to get some feedback / possible collaboration.\n. @bronson Yes, it does. First, atom/text-buffer will need to support out-of-bounds selections. (beyond line endings)\n\nAfter that, it should be easy to add the visual changes to atom proper. I opened an issue to begin discussing this a while back, but haven't heard anything. (atom/text-buffer#59)\n\nI've been swamped, and haven't come back to this, but I will hopefully clean up this version and fix some kinks this week. I think having _something_ in place is a good first start. After that, perhaps I can take a whack at adding out-of-bounds support to text-buffer and see what people think.\n. ",
    "rodmax": "\"\"\"\nTo me this is the killer feature which prevent me to switch full time to atom\nAnyway, great job guys :)\n\"\"\"\n nothing more to add\n+1\n. \"\"\"\nTo me this is the killer feature which prevent me to switch full time to atom\nAnyway, great job guys :)\n\"\"\"\n nothing more to add\n+1\n. ",
    "shemerey": "+1 for this feature\n. +1 for this feature\n. ",
    "coolicer": "+1 for this feature\n\nneed it\n. +1 for this feature\n\nneed it\n. ",
    "jackcasey": "+1\n. +1\n. +1\n. +1\n. ",
    "barockok": "+1\n. +1\n. ",
    "melevine": "+1 won't use atom without it\n. +1 won't use atom without it\n. ",
    "robertmaloney": "+1\n. +1\n. ",
    "wolftune": "For reference, though not identical, just do Alt-Shift with the up arrow or down arrow in Atom to get multiple cursors, and that will work as you want for the example you do above. In many ways the multi-cursor mode in Atom is superior to Vim's rectangle selection (although both have some value). The multi-cursor thing works alongside Vim-mode already.\n. @jacekkopecky `ctrl-.` (I'm not on OS X, left Apple a couple years ago after seeing their terrible iOS direction with walled-garden censorship / ads in basic software etc,)\n\nAnyway, here you go: editor-add-selection-above atom-workspace atom-text-editor:not([mini]) /usr/share/atom/resources/app.asar/keymaps/linux.json\n. I note that the operation we want is fully doable already, just do alt-shift up or down arrows to get all the lines, and then enter visual mode and move left and right.\n\nThe issue here that remains is basically the fact that visual block mode doesn't work as Vim users would expect because it fails to respond to normal up and down motions and create a rectangle. If Visual Block mode successfully added cursors, it would be, IMO, fine that only hard character-based movement commands keep true rectangles while other commands may end up with other shapes.\n\nSo, operations are doable without weird extra mapping. This request should be summarized as: make Visual Block mode actually work via adding extra cursors when moving up or down. (only note is that Block Mode _should_ behave like the multi-cursor package where down then up adds then removes rather than adds both above and below).\n\nSorry for the verbosity, but the point is: visual block mode should work like in vim but _stick_ to Atom's superior approach to moving that allows things not to be strictly rectangular. That means simply making the Ctrl-V visual block mode work in the exact way that we _already_ can do via the multi-cursor package combined with regular visual mode.\n. Oops, I realize my assertion that things matched up wasn't as accurate as I thought. In Visual Block mode in Vim, I can skip past an empty line or a shorter line to get to a later thing in the same column. That skipping only works for empty lines in _regular_ Atom multiple cursors and is glitchy for shorter lines, and such skipping doesn't work even for empty lines using the multi-cursor package operations.\n. I'm guessing you mean you want ctrl-V to work like it does in Vim, right?\n. @kenjimorita you can already do that because Atom just supports it directly. It's not _identical_ but it works in your case. The Ctrl-V option might still be nice (so this _could_ stay open as an issue) as it is specifically a rectangle selection. However, just do Alt-Shift with the up arrow or down arrow in Atom to have multiple cursors, and that will work as you want for the example you do above. In some ways the multi-cursor mode in Atom is greatly superior to Vim's rectangle selection. The multi-cursor thing works alongside Vim-mode\n\nCheers\n. @jacekkopecky Yes, this is a duplicate of #468 and can be closed, although maybe my notes about the alt-shift-arrow function should be added there. No, I am not using any package, the alt-shift-arrow function is built into Atom.\n. @jacekkopecky sure, but that's super tedious. I specify that register every time I hit `x`?\n\nSo, what I'm suggesting could simply be: an option to have `d`, `x`, `s`, and `c` (and related) commands use the blackhole register automatically, and have `m` be an exact synonym of `d` that behaves exactly as `d` does _currently_. This would be nice for lots of people and match the behavior expected by all users of vim-easyclip.\n. UPDATE: There's already a clipboard history option: https://atom.io/packages/clipboard-plus and a vim-mode support plugin: https://atom.io/packages/vim-mode-clipboard-plus\n\nSo, anyone who wants internal history can use that, anyone who wants to use system clipboard can use a system-clipboard history tool.\n\nSo, really the only thing this ticket is about is the option to use easyclip style non-copying delete, as I described succinctly [above](https://github.com/atom/vim-mode/issues/851#issuecomment-136063088)\n. @jacekkopecky yes, the issues are: (A) nobody has set up keybindings for multi-cursor-plus to work with vim-mode, so someone should do that and share them and (B) the ability to do vim movement commands of all sorts for the last cursor separately would indeed be very cool.\n\nThat's it. Otherwise, multi-cursor-plus seems awesome, the best of its ilk.\n. @jacekkopecky Clearly, vim-mode on its own with the built-in Atom multi-cursor functions is already powerful. Nothing more is _needed_. However, there can be cases where the lines you want to edit aren't anything like this example. What if there were interim lines between each of these? Then we'd not be able to do it. Or if the lines were not all the same sort of phrasing.\n\nFor Vim itself, there's https://github.com/terryma/vim-multiple-cursors which is nice. It's effectively the same as doing find and substitution type commands but is another approach that's more visual and allows picking out the items one by one. Another approach would be to take an action, then search, then repeat. So, vim-multiple-cursors isn't _needed_ but it's neat.\n\nI think multi-cursor-plus support would be _nice_ but should not be considered a priority at all. It isn't a matter of getting normal Vim operations working, it's an extra.\n. One more thought: whether it's connected to this other package or not, what I'm really suggesting is a way to use vim-mode and have a function comparable to the ctrl-click that adds a new cursor under the mouse position. In other words, I want to mark a spot for a cursor, use arbitrary vim moves or searches or whatever to get to a new location (while the old cursor stays) and hit some new-cursor command to then add a cursor there. etc. Which is basically like the ability to add a cursor and then move only the new cursor.\n\nThat might just be a new way to explain what I was saying before, or to describe what this is about. I.e. a vim-mode way of working with multi-cursor-plus functionality.\n. For reference, though not identical, just do Alt-Shift with the up arrow or down arrow in Atom to get multiple cursors, and that will work as you want for the example you do above. In many ways the multi-cursor mode in Atom is superior to Vim's rectangle selection (although both have some value). The multi-cursor thing works alongside Vim-mode already.\n. @jacekkopecky `ctrl-.` (I'm not on OS X, left Apple a couple years ago after seeing their terrible iOS direction with walled-garden censorship / ads in basic software etc,)\n\nAnyway, here you go: editor-add-selection-above atom-workspace atom-text-editor:not([mini]) /usr/share/atom/resources/app.asar/keymaps/linux.json\n. I note that the operation we want is fully doable already, just do alt-shift up or down arrows to get all the lines, and then enter visual mode and move left and right.\n\nThe issue here that remains is basically the fact that visual block mode doesn't work as Vim users would expect because it fails to respond to normal up and down motions and create a rectangle. If Visual Block mode successfully added cursors, it would be, IMO, fine that only hard character-based movement commands keep true rectangles while other commands may end up with other shapes.\n\nSo, operations are doable without weird extra mapping. This request should be summarized as: make Visual Block mode actually work via adding extra cursors when moving up or down. (only note is that Block Mode _should_ behave like the multi-cursor package where down then up adds then removes rather than adds both above and below).\n\nSorry for the verbosity, but the point is: visual block mode should work like in vim but _stick_ to Atom's superior approach to moving that allows things not to be strictly rectangular. That means simply making the Ctrl-V visual block mode work in the exact way that we _already_ can do via the multi-cursor package combined with regular visual mode.\n. Oops, I realize my assertion that things matched up wasn't as accurate as I thought. In Visual Block mode in Vim, I can skip past an empty line or a shorter line to get to a later thing in the same column. That skipping only works for empty lines in _regular_ Atom multiple cursors and is glitchy for shorter lines, and such skipping doesn't work even for empty lines using the multi-cursor package operations.\n. I'm guessing you mean you want ctrl-V to work like it does in Vim, right?\n. @kenjimorita you can already do that because Atom just supports it directly. It's not _identical_ but it works in your case. The Ctrl-V option might still be nice (so this _could_ stay open as an issue) as it is specifically a rectangle selection. However, just do Alt-Shift with the up arrow or down arrow in Atom to have multiple cursors, and that will work as you want for the example you do above. In some ways the multi-cursor mode in Atom is greatly superior to Vim's rectangle selection. The multi-cursor thing works alongside Vim-mode\n\nCheers\n. @jacekkopecky Yes, this is a duplicate of #468 and can be closed, although maybe my notes about the alt-shift-arrow function should be added there. No, I am not using any package, the alt-shift-arrow function is built into Atom.\n. @jacekkopecky sure, but that's super tedious. I specify that register every time I hit `x`?\n\nSo, what I'm suggesting could simply be: an option to have `d`, `x`, `s`, and `c` (and related) commands use the blackhole register automatically, and have `m` be an exact synonym of `d` that behaves exactly as `d` does _currently_. This would be nice for lots of people and match the behavior expected by all users of vim-easyclip.\n. UPDATE: There's already a clipboard history option: https://atom.io/packages/clipboard-plus and a vim-mode support plugin: https://atom.io/packages/vim-mode-clipboard-plus\n\nSo, anyone who wants internal history can use that, anyone who wants to use system clipboard can use a system-clipboard history tool.\n\nSo, really the only thing this ticket is about is the option to use easyclip style non-copying delete, as I described succinctly [above](https://github.com/atom/vim-mode/issues/851#issuecomment-136063088)\n. @jacekkopecky yes, the issues are: (A) nobody has set up keybindings for multi-cursor-plus to work with vim-mode, so someone should do that and share them and (B) the ability to do vim movement commands of all sorts for the last cursor separately would indeed be very cool.\n\nThat's it. Otherwise, multi-cursor-plus seems awesome, the best of its ilk.\n. @jacekkopecky Clearly, vim-mode on its own with the built-in Atom multi-cursor functions is already powerful. Nothing more is _needed_. However, there can be cases where the lines you want to edit aren't anything like this example. What if there were interim lines between each of these? Then we'd not be able to do it. Or if the lines were not all the same sort of phrasing.\n\nFor Vim itself, there's https://github.com/terryma/vim-multiple-cursors which is nice. It's effectively the same as doing find and substitution type commands but is another approach that's more visual and allows picking out the items one by one. Another approach would be to take an action, then search, then repeat. So, vim-multiple-cursors isn't _needed_ but it's neat.\n\nI think multi-cursor-plus support would be _nice_ but should not be considered a priority at all. It isn't a matter of getting normal Vim operations working, it's an extra.\n. One more thought: whether it's connected to this other package or not, what I'm really suggesting is a way to use vim-mode and have a function comparable to the ctrl-click that adds a new cursor under the mouse position. In other words, I want to mark a spot for a cursor, use arbitrary vim moves or searches or whatever to get to a new location (while the old cursor stays) and hit some new-cursor command to then add a cursor there. etc. Which is basically like the ability to add a cursor and then move only the new cursor.\n\nThat might just be a new way to explain what I was saying before, or to describe what this is about. I.e. a vim-mode way of working with multi-cursor-plus functionality.\n. ",
    "lexfrei": "+1\n. +1\n. ",
    "nic": "+1\n. +1\n. ",
    "rxmarbles": "+1\n. looks like this is a duplicate of #468\n. +1\n. looks like this is a duplicate of #468\n. ",
    "dragonxlwang": "wondering will vim-mode-plus and vim-mode-plus-ex-mode merged into atom's vim-mode any soon?\n. that one is deprecated \n. +1 too!\n\nIt seems that \"0 is not mapped to register:\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson\n\nNot sure if register 0 is implemented yet\n. anytime this PR would get merged soon?\n. I found there is an unwanted behavior: after using atom's generic find: cmd+f and use vim-mode's find again, the highlight no longer show up anymore... Is that supposed to be so?\n. yes, it is still a bug in v1.4.1. Hope it could get fixed soon.\n. wondering will vim-mode-plus and vim-mode-plus-ex-mode merged into atom's vim-mode any soon?\n. that one is deprecated \n. +1 too!\n\nIt seems that \"0 is not mapped to register:\nhttps://github.com/atom/vim-mode/blob/master/keymaps/vim-mode.cson\n\nNot sure if register 0 is implemented yet\n. anytime this PR would get merged soon?\n. I found there is an unwanted behavior: after using atom's generic find: cmd+f and use vim-mode's find again, the highlight no longer show up anymore... Is that supposed to be so?\n. yes, it is still a bug in v1.4.1. Hope it could get fixed soon.\n. ",
    "feluxe": "+1\n. +1\n. ",
    "lonre": "+1\n. +1\n. ",
    "martin-svk": "+1\n. +1\n. ",
    "zhangruiqian001": "https://atom.io/packages/vim-mode-visual-block\n. https://atom.io/packages/vim-mode-visual-block\n. ",
    "oddlyfunctional": "+1\n. +1\n. +1\n. +1\n. ",
    "Silox": "\ud83d\udc4d \n. \ud83d\udc4d \n. ",
    "dndln": "+1\n. +1\n. ",
    "hyacinthus": "+1\n. +1\n. ",
    "jeepkd": "Thank you @brandonhorst for the quick reply. I might try to bring it into visual mode when we select it with the mouse :) But not sure if this is okay for the package and others though\n. Thank you @brandonhorst for the quick reply. I might try to bring it into visual mode when we select it with the mouse :) But not sure if this is okay for the package and others though\n. ",
    "mishavetl": "Thanks, all works fine!\n. Thanks, all works fine!\n. ",
    "scanf": "+1\n. +1\n. ",
    "joshuata": "I have seen this bug as well. All commands are performed twice, such as `d`, `x` and all of the movement commands. Restarting atom fixes the problem. Each time I have seen it has been following a vim-mode update.\n. I have seen this bug as well. All commands are performed twice, such as `d`, `x` and all of the movement commands. Restarting atom fixes the problem. Each time I have seen it has been following a vim-mode update.\n. ",
    "QuillyT": "Oh whew, I got click happy and started updating before I could check on `b`, `w`, and other keys. Just updated both atom and vim-mode. Will continue to report when this happens.\n\n@joshuata when you say \"following a vim-mode update\" do you mean when you specifically go to update vim-mode from the settings/packages page? Or is vim-mode updating on it's own without me doing anything? If it's automatically happening how can I monitor that?\n. It just happened again. Still didn't catch exactly what I did immediately before though... \nBut this time it's only happening on one file (before it was every file that was open).\n\n`h`,`j`,`k`,`l` and arrow keys are messed up.\n`b`, `e`, `w`, `d`, `x` are all doubling\n`yw` then `p` posts 2 of the word that was yanked (doesn't yank 2 words... yanks the same word twice?)\n`yy` then `p` posts 2 of the same lines (doesn't tanke 2 lines)\n`/` brings up the search bar but any letters I enter just exist the search bar\n`r` brings up a search bar, also can't enter any letters (can enter `.` without making the bar go away).\n\nThis is all happening in \"Command\" mode (or whatever it displays in the footer to the left of UTF-8.\nI pressed `v` for Visual mode and it looked normal at first. But after pressing `esc` I pressed `v` again and now it highlights 2 lines with every vertical directional key that I press.\n\nClosing the file and opening it again fixed the problem.\n. I found what's doing it.\n\nWhen I move a file from one split pane window to another, it adds one \"repeat\" of each key. As in...\nMove file from one pane to another, `j` takes me from line 1 to line 3\nMove file back to original pane, `j` takes me from line 1 to line 4\nMove file to other pane again, `j` takes me from line 1 to line 5\n\nIt has a similar effect on all the other keys as well.\n\nLet me know if there is anything else I can do to help.\n. @maxbrunsfeld happy to help and thanks for the fix!\n. Wanted to note that @joshuata's point still happens.\nDuplicate VimStates are still being created when vim-mode is updated.\nIt happens for all files even after closing and re-opening them.\n\nI'll create another issue for this :)\n. hm, I haven't been looking for along with the updates that I've been doing... but that also means I haven't noticed it either. Can't verify that I haven't just missed it as I've been doing a decent amount of restarting lately.\n. yep, i'll let you know\n\nOn Fri, Feb 20, 2015 at 12:17 PM, Max Brunsfeld notifications@github.com\nwrote:\n\n> Ok, let's keep it open for now. I think it might be fixed though; can you\n> try and see if anything strange happens on your next update?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/480#issuecomment-75278778.\n\n## \n\nQuentin Tai\n\nCTO/Co-founder Lynxsy\nc: 240.994.6563\ne: quentin@lynxsy.com\nSign Up! Lynxsy http://lynxsy.com/\nFollow Us: Facebook https://www.facebook.com/Lynxsy | Twitter\nhttps://twitter.com/LynxsySays\n. Oh whew, I got click happy and started updating before I could check on `b`, `w`, and other keys. Just updated both atom and vim-mode. Will continue to report when this happens.\n\n@joshuata when you say \"following a vim-mode update\" do you mean when you specifically go to update vim-mode from the settings/packages page? Or is vim-mode updating on it's own without me doing anything? If it's automatically happening how can I monitor that?\n. It just happened again. Still didn't catch exactly what I did immediately before though... \nBut this time it's only happening on one file (before it was every file that was open).\n\n`h`,`j`,`k`,`l` and arrow keys are messed up.\n`b`, `e`, `w`, `d`, `x` are all doubling\n`yw` then `p` posts 2 of the word that was yanked (doesn't yank 2 words... yanks the same word twice?)\n`yy` then `p` posts 2 of the same lines (doesn't tanke 2 lines)\n`/` brings up the search bar but any letters I enter just exist the search bar\n`r` brings up a search bar, also can't enter any letters (can enter `.` without making the bar go away).\n\nThis is all happening in \"Command\" mode (or whatever it displays in the footer to the left of UTF-8.\nI pressed `v` for Visual mode and it looked normal at first. But after pressing `esc` I pressed `v` again and now it highlights 2 lines with every vertical directional key that I press.\n\nClosing the file and opening it again fixed the problem.\n. I found what's doing it.\n\nWhen I move a file from one split pane window to another, it adds one \"repeat\" of each key. As in...\nMove file from one pane to another, `j` takes me from line 1 to line 3\nMove file back to original pane, `j` takes me from line 1 to line 4\nMove file to other pane again, `j` takes me from line 1 to line 5\n\nIt has a similar effect on all the other keys as well.\n\nLet me know if there is anything else I can do to help.\n. @maxbrunsfeld happy to help and thanks for the fix!\n. Wanted to note that @joshuata's point still happens.\nDuplicate VimStates are still being created when vim-mode is updated.\nIt happens for all files even after closing and re-opening them.\n\nI'll create another issue for this :)\n. hm, I haven't been looking for along with the updates that I've been doing... but that also means I haven't noticed it either. Can't verify that I haven't just missed it as I've been doing a decent amount of restarting lately.\n. yep, i'll let you know\n\nOn Fri, Feb 20, 2015 at 12:17 PM, Max Brunsfeld notifications@github.com\nwrote:\n\n> Ok, let's keep it open for now. I think it might be fixed though; can you\n> try and see if anything strange happens on your next update?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/480#issuecomment-75278778.\n\n## \n\nQuentin Tai\n\nCTO/Co-founder Lynxsy\nc: 240.994.6563\ne: quentin@lynxsy.com\nSign Up! Lynxsy http://lynxsy.com/\nFollow Us: Facebook https://www.facebook.com/Lynxsy | Twitter\nhttps://twitter.com/LynxsySays\n. ",
    "wenlock": "update:  i've also tried this with all packages disabled, and just enabling vim-mode by itself.  Seems to give me the same behavior.\n. Using atom 0.172.0 from http://ppa.launchpad.net/webupd8team/atom/ubuntu ppa on trusty\n\nHere is what i see when i hit the toggle key binding\n\nhttp://goo.gl/BaaYBK\n\nI can probably figure out how to install 0.174.0 but that would require rebuilding atom and dropping the ppa, i was hoping to be able to keep that ppa.  Hoping it's not the ppa thats the issue.\nhttps://launchpad.net/~webupd8team/+archive/ubuntu/atom\n. @maxbrunsfeld The mouse cursor doesn't disappear.   Here is a short little web clip on what i see.\nhttp://goo.gl/e09cHy\n\nSteps im using\n\n1) hit i to go into insert mode, type some test\n2) hit escape, open another line, more text\n3) hit ctrl-s , and the file saves, but the blinking cursor does not return.\n. Here is another screen capture with keybinding toggled on.  http://goo.gl/HFRl8U\n. It came across a little hard to read on my side... trying it again with resized window http://goo.gl/e9LJAG\n. Today i've re-installed my OS , and thus also re-installed atom and all my plugins.   I'm no longer able to reproduce or see this issue using 0.174.0.    Unless someone else can provide some way to reproduce it, I think for me the issue is closed.\n. update:  i've also tried this with all packages disabled, and just enabling vim-mode by itself.  Seems to give me the same behavior.\n. Using atom 0.172.0 from http://ppa.launchpad.net/webupd8team/atom/ubuntu ppa on trusty\n\nHere is what i see when i hit the toggle key binding\n\nhttp://goo.gl/BaaYBK\n\nI can probably figure out how to install 0.174.0 but that would require rebuilding atom and dropping the ppa, i was hoping to be able to keep that ppa.  Hoping it's not the ppa thats the issue.\nhttps://launchpad.net/~webupd8team/+archive/ubuntu/atom\n. @maxbrunsfeld The mouse cursor doesn't disappear.   Here is a short little web clip on what i see.\nhttp://goo.gl/e09cHy\n\nSteps im using\n\n1) hit i to go into insert mode, type some test\n2) hit escape, open another line, more text\n3) hit ctrl-s , and the file saves, but the blinking cursor does not return.\n. Here is another screen capture with keybinding toggled on.  http://goo.gl/HFRl8U\n. It came across a little hard to read on my side... trying it again with resized window http://goo.gl/e9LJAG\n. Today i've re-installed my OS , and thus also re-installed atom and all my plugins.   I'm no longer able to reproduce or see this issue using 0.174.0.    Unless someone else can provide some way to reproduce it, I think for me the issue is closed.\n. ",
    "johngeorgewright": "Hmm. I don't seem to have any updates available. I may to build from source.\n. Oh wait... sorry, I thought I had installed atom through a software source. Looks like I have to upgrade manually. Sucky.\n. Yep. All is now well. Thanks.\n. Hmm. I don't seem to have any updates available. I may to build from source.\n. Oh wait... sorry, I thought I had installed atom through a software source. Looks like I have to upgrade manually. Sucky.\n. Yep. All is now well. Thanks.\n. ",
    "alem0lars": "@maxbrunsfeld it would be great to reuse the existing find and replace (from the package) instead of a custom functionality.\nFor example typing `/` should open the same window of `Meta+F`.\nIn my opinion, simply adding the hotkeys to the existing find and replace functionality is a lot better.\n. Are there any updates on this issue?\n. @maxbrunsfeld it would be great to reuse the existing find and replace (from the package) instead of a custom functionality.\nFor example typing `/` should open the same window of `Meta+F`.\nIn my opinion, simply adding the hotkeys to the existing find and replace functionality is a lot better.\n. Are there any updates on this issue?\n. ",
    "MrMattBusby": "While this issue can probably be closed (I ended up here frustrated by key bindings and wanting a hot-key to turn off/on `vim-mode` itself) +1 for @alem0lars suggestion. Hopefully `vim-mode` is kept super light and Atom'ic (and separate from `ex-mode`) and will more utilize `find-and-replace`, `fuzzy-finder`, etc.\n. While this issue can probably be closed (I ended up here frustrated by key bindings and wanting a hot-key to turn off/on `vim-mode` itself) +1 for @alem0lars suggestion. Hopefully `vim-mode` is kept super light and Atom'ic (and separate from `ex-mode`) and will more utilize `find-and-replace`, `fuzzy-finder`, etc.\n. ",
    "RootlessAgrarian": "Sorry if this is a necropost, but I am just dipping my toe into Atom/Platformio because working with point/click editors (Arduino IDE for one) feels like typing with gloves on to this ancient hacker :-)   I am _almost_ 100 pct delighted by Atom with the vim-plus extension, but am cruelly disappointed that s/foo/bar/g is not supported.  \r\n\r\nGoogling reveals that this appears to be a contentious issue, so I don't like to fuel discord... but 40 years of muscle memory is painful to contravene.   I realise that (as mentioned above) it is possible to control Atom's find/replace dialog with keyboard presses and chords, but they are all modifier-heavy and (for me) a strain on the hands.\r\n\r\nHas anyone got a plugin or patch or hack or *anything* that would provide :s/foo/bar/<scope> for vim-plus in Atom?  If not, I guess it's back to xterm and elaborate makefiles, etc. for me.  At a certain age it becomes hard for the leopard to change its spots :-). Sorry if this is a necropost, but I am just dipping my toe into Atom/Platformio because working with point/click editors (Arduino IDE for one) feels like typing with gloves on to this ancient hacker :-)   I am _almost_ 100 pct delighted by Atom with the vim-plus extension, but am cruelly disappointed that s/foo/bar/g is not supported.  \r\n\r\nGoogling reveals that this appears to be a contentious issue, so I don't like to fuel discord... but 40 years of muscle memory is painful to contravene.   I realise that (as mentioned above) it is possible to control Atom's find/replace dialog with keyboard presses and chords, but they are all modifier-heavy and (for me) a strain on the hands.\r\n\r\nHas anyone got a plugin or patch or hack or *anything* that would provide :s/foo/bar/<scope> for vim-plus in Atom?  If not, I guess it's back to xterm and elaborate makefiles, etc. for me.  At a certain age it becomes hard for the leopard to change its spots :-). ",
    "MewX": "Still wanting this feature :/. Oh, thanks, I was using `vim mode plus`!. Still wanting this feature :/. Oh, thanks, I was using `vim mode plus`!. ",
    "fredkingham": "not sure if it was due to stale code, its stopped happening, closing, (sorry!)\n. not sure if it was due to stale code, its stopped happening, closing, (sorry!)\n. ",
    "Samsinite": "This is happening to me right now and is really frustrating :/. Just updated to the latest release today. It is only happening in one tab FWIW, not sure how easy this will be to reproduce.\n\nHere is the output of the keybinding resolver\n\n![screen shot 2015-02-11 at 2 21 26 pm](https://cloud.githubusercontent.com/assets/166847/6157811/7047043a-b1f9-11e4-8bb9-a3d2dcb72a44.png)\n. Closing the tab/file and reopening the file makes the bug disappear.\n. This is happening to me right now and is really frustrating :/. Just updated to the latest release today. It is only happening in one tab FWIW, not sure how easy this will be to reproduce.\n\nHere is the output of the keybinding resolver\n\n![screen shot 2015-02-11 at 2 21 26 pm](https://cloud.githubusercontent.com/assets/166847/6157811/7047043a-b1f9-11e4-8bb9-a3d2dcb72a44.png)\n. Closing the tab/file and reopening the file makes the bug disappear.\n. ",
    "pencilcheck": "I'm missing this feature in vim as well, hopefully this will be implemented somehow. :+1: \n. / searching doesn't work in tree pane, also can't switch focus between the tree and file easily.\n. @TheAtomicGoose in vim you can switch focus between different pane, I don't know how to do that in Atom without closing the pane in the first place.\n. @TheAtomicGoose that did it, cool.\n. I'm missing this feature in vim as well, hopefully this will be implemented somehow. :+1: \n. / searching doesn't work in tree pane, also can't switch focus between the tree and file easily.\n. @TheAtomicGoose in vim you can switch focus between different pane, I don't know how to do that in Atom without closing the pane in the first place.\n. @TheAtomicGoose that did it, cool.\n. ",
    "haveanicedavid": "+1\n. +1\n. ",
    "iurev": "+1\n. +1\n. ",
    "nonelove": "+1\n. +1\n. +1\n. +1\n. ",
    "kenng": "+1\n. +1\n. ",
    "tmunro": "For all those leaving +1s, this might tide you over: https://atom.io/packages/isearch\n. For all those leaving +1s, this might tide you over: https://atom.io/packages/isearch\n. ",
    "hyouuu": "+1\n. +1\n. ",
    "mitchellwrosen": "+1\n. People commenting with just \"+1\": since a month or so ago, you may now instead add a thumbs-up reaction to the issue description. \n. +1, seeing this as well\n. +1\n. People commenting with just \"+1\": since a month or so ago, you may now instead add a thumbs-up reaction to the issue description. \n. +1, seeing this as well\n. ",
    "calebmeyer": "Could we steal the implementation of incremental search from here? https://atom.io/packages/vim-mode-plus\n. I installed vim-mode using the packages view in the settings, and I am getting this issue. I ran `apm-install` in ~/.atom/packages/vim-mode, but I still get the error mentioned above.\nAtom 0.190.0\nvim-mode 0.43.0\nMac OS X 10.10.3\n. @maxbrunsfeld Issue is magically fixed this morning. I wonder if rebooting my mac fixed it. I'll raise a new issue if I see it again.\n. Well, I'll be darned. Last I tried this, it didn't work. This morning I tried this, and it did work. Closing this issue.\n. Could we steal the implementation of incremental search from here? https://atom.io/packages/vim-mode-plus\n. I installed vim-mode using the packages view in the settings, and I am getting this issue. I ran `apm-install` in ~/.atom/packages/vim-mode, but I still get the error mentioned above.\nAtom 0.190.0\nvim-mode 0.43.0\nMac OS X 10.10.3\n. @maxbrunsfeld Issue is magically fixed this morning. I wonder if rebooting my mac fixed it. I'll raise a new issue if I see it again.\n. Well, I'll be darned. Last I tried this, it didn't work. This morning I tried this, and it did work. Closing this issue.\n. ",
    "LandonSchropp": "+1 I would love to see this added to vim-mode.\n. Yep, that seemed to solve it for me too. Thanks!\n. +1 I would love to see this added to vim-mode.\n. Yep, that seemed to solve it for me too. Thanks!\n. ",
    "InterStelios": "+1\n. +1\n. ",
    "dsifford": "@calebmeyer Good tip - Switching to vim-mode-plus until this issue gets resolved :+1: \n. What can I do to help get this merged? This is sorely needed! \n\n@jazzpi I'm assuming this PR adds result highlighting as you type (a la vim in the terminal)? If so, you are the man! (If not, you're probably still the man...). \n. @jazzpi Ah, bummer. That's the one feature that keeps dragging me back to the terminal. :disappointed: \n. @t9md I've been using your fork for a few weeks and can confirm that it's friggen' awesome. Nice work!\n. @calebmeyer Good tip - Switching to vim-mode-plus until this issue gets resolved :+1: \n. What can I do to help get this merged? This is sorely needed! \n\n@jazzpi I'm assuming this PR adds result highlighting as you type (a la vim in the terminal)? If so, you are the man! (If not, you're probably still the man...). \n. @jazzpi Ah, bummer. That's the one feature that keeps dragging me back to the terminal. :disappointed: \n. @t9md I've been using your fork for a few weeks and can confirm that it's friggen' awesome. Nice work!\n. ",
    "holzdev": "Same here.\n. Sorry for the missing details.\u00a0\nAtom 0.155.0 running on 64bit Windows 8.\u00a0\nThe error occurred after updating the plug-in.\n\n<div>-------- Urspr\u00fcngliche Nachricht --------</div><div>Von: Max Brunsfeld notifications@github.com </div><div>Datum:26.01.2015  21:52  (GMT+01:00) </div><div>An: atom/vim-mode vim-mode@noreply.github.com </div><div>Cc: holzdev paul.holz@posteo.de </div><div>Betreff: Re: [vim-mode] vim-mode fails to start (#494) </div><div>\n</div>What version of Atom are you using? Can you upgrade to the latest version and report whether or not this still occurs?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry for the false positive. \n. Same here.\n. Sorry for the missing details.\u00a0\nAtom 0.155.0 running on 64bit Windows 8.\u00a0\nThe error occurred after updating the plug-in.\n\n<div>-------- Urspr\u00fcngliche Nachricht --------</div><div>Von: Max Brunsfeld notifications@github.com </div><div>Datum:26.01.2015  21:52  (GMT+01:00) </div><div>An: atom/vim-mode vim-mode@noreply.github.com </div><div>Cc: holzdev paul.holz@posteo.de </div><div>Betreff: Re: [vim-mode] vim-mode fails to start (#494) </div><div>\n</div>What version of Atom are you using? Can you upgrade to the latest version and report whether or not this still occurs?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry for the false positive. \n. ",
    "aldovc": "+1 \nOSX 10.10.1 (14B25)\nAtom  0.176.0 (0.176.0)\nvim-mode 0.30.0\n. +1 \nOSX 10.10.1 (14B25)\nAtom  0.176.0 (0.176.0)\nvim-mode 0.30.0\n. ",
    "stobenski": "Didn't happen for me:\n\nLinux\nAtom 0.177.0-7add4af\nvim-mode 0.30.0\n. Didn't happen for me:\n\nLinux\nAtom 0.177.0-7add4af\nvim-mode 0.30.0\n. ",
    "ZiaBhatti": "+1\n\nOSX Yosemite.  Bad enough to make the entire thing unusable\n. +1\n\nOSX Yosemite.  Bad enough to make the entire thing unusable\n. ",
    "kmorey": "I had this problem (OSX Yosemite) and uninstalling and reinstalling the plugin fixed it for me.\n. I had this problem (OSX Yosemite) and uninstalling and reinstalling the plugin fixed it for me.\n. ",
    "christophberger": "Same issue seen with v0.31, and the fix works also for Windows. Uninstall vim-mode, reinstall, restart Atom -> issue vanished.\n(Still have to test this with my OSX and Lubuntu machines at home but I expect the solution to work there as well.)\nThanks kmorey for sharing your solution.\n. Same issue seen with v0.31, and the fix works also for Windows. Uninstall vim-mode, reinstall, restart Atom -> issue vanished.\n(Still have to test this with my OSX and Lubuntu machines at home but I expect the solution to work there as well.)\nThanks kmorey for sharing your solution.\n. ",
    "Sharpie": "+1 Just noticed this today after updating vim-mode from 0.36 to 0.37.\n\nAtom 0.187.0\nOS X 10.8.5\n. +1 Just noticed this today after updating vim-mode from 0.36 to 0.37.\n\nAtom 0.187.0\nOS X 10.8.5\n. ",
    "highb": "Found on Atom 0.187.0/OSX 10.10.2 after upgrading to 0.38.\nRemoving, restarting, and re-installing also fixed it for me.\n. Found on Atom 0.187.0/OSX 10.10.2 after upgrading to 0.38.\nRemoving, restarting, and re-installing also fixed it for me.\n. ",
    "liugangnhm": "sorry for my mistake, Ctrl-R is my own key-bind.\n. sorry for my mistake, Ctrl-R is my own key-bind.\n. ",
    "coolwanglu": "@maxbrunsfeld  how does #508 look like?\n. Oh this conflicts with search history.\nI'm not pretty sure about how histories are organized in native vim, but we may cache all the commands and search the history through prefixes. Which is also good for the future support for `:` commands.\n. Also we might want to prevent the cursor being moved to the beginning when prefixChar is presented.\n. Now all specs are passed.\nPlease review.\n. What I understand is that specs are test suites, but assertions might be better for debugging. I came into some situations like this:\n\n `function test(a,b)` where either `a` or `b` must be `null`, and it might not be able to test all the situations in the test suites. \n\nOn the other hand, with an assertion in the function body, it will be auto breakpoint when something is wrong, which will allow us to find the caller.\n. I think there are just too many combinations of user input, even if a specific keystroke sequence trigger the bug, say `a` and `b` are both null, the problem might appear in other places, then we need some time to pin point this function.\n\nBut it's ok if we don't do so in this project.\n. Do we want beeping in vim-mode? I could add lots more (moving up over the first line etc).\n. @jeejkang  There's an option for atom to turn of beeping globally. But of course we can make a vim-mode-only option.\n. Example: the `m` motion.\n. Or, how about implement singleChar mode separately, with just event handlers?\n. I found that `register-prefix` is implemented by register multiple keymaps but `m` is implemented by receiving the register from a singleChar input, shall we unify them?\n. Yes, I agree that `singleChar` works for the input. Yet the problem is I'm trying to implement the command-line stuffs, and `singleChar` might make the logic more complex. \n\nI hope I can remove the singleChar mode, and register the keystrokes through keymap, such that it will be easier to add features for the input line. I'm just not sure if this would be OK, what do you think?\n. Hmm I'm still thinking, maybe receiving the keystroke separately might be better, if we want to check the register key, we can `atom.beep()` if an invalid register is typed, and it also saves space in the keymap file.\n\nNot sure what is the best way of integrating atom's keymap API\n. I found that the `hidden-input` class is applied to the input, but it is not hidden. It is a built-in class in atom?\n. @maxbrunsfeld  Right, `PaneAxis` stuffs are really hacks. I didn't find them in the API doc, and I referred to Atom's source code.\n. @nathansobo The problem is exactly to create a pane at the desired position. Say the current layout is something like\n\n```\n{\n  PaneAxis : 'vertical'\n  children: [Pane1, Pane2, Pane3]\n}\n```\n\nand the result after moving should be\n\n```\n{\n  PaneAxis: 'horizontal'\n  children: [Pane2,\n    {\n       PaneAxis: vertical\n       children: [Pane1, Pane3]\n    }]\n}\n```\n\nIn this case I don't know how to create the new Pane which is a sliding of the old vertical PaneAxis.\nSeems that the normal API only allows us to create a new Pane as a sibing of an existing Pane.\n. @nathansobo Right, if `spiltUp` (and also other directions) is defined as `create a new child pane at the top (for vertical axis) or create a new sibling pane on top (for horizontal axis)`, the code will be much simpler.\n\nAlso we need functions to retrieve the root pane/paneaxis, and to check whether it is a pane or axis.\n. @nathansobo I'm afraid that I might not have enough time recently. I will come back later and implement this if nobody has done so.\n. I tried to tested if this patch still works for the latest version of `vim-mode`, and I found that:\n- I have accidentally removed my repo. Oops!\n- Several APIs about `Pane` have been integrated into Atom\n\nSo I guess the better way is to implement this in Atom as `window:move-pane-to-very-left` etc.\n\nMaybe this PR should be closed?\n. @t9md  For example, this one: https://github.com/coolwanglu/vim-mode/blob/4aba8f61eb768968fc7e74f767efa41cca63a757/keymaps/vim-mode.cson#L84\nThe file for pane operations in `vim-mode` has been removed due to this.\n\nI'm not sure about your question, I don't remember if I have tested that or not. Sorry.\n\nI guess it's best to implement this directly in Atom, we don't even need new APIs that way.\n. @maxbrunsfeld  how does #508 look like?\n. Oh this conflicts with search history.\nI'm not pretty sure about how histories are organized in native vim, but we may cache all the commands and search the history through prefixes. Which is also good for the future support for `:` commands.\n. Also we might want to prevent the cursor being moved to the beginning when prefixChar is presented.\n. Now all specs are passed.\nPlease review.\n. What I understand is that specs are test suites, but assertions might be better for debugging. I came into some situations like this:\n\n `function test(a,b)` where either `a` or `b` must be `null`, and it might not be able to test all the situations in the test suites. \n\nOn the other hand, with an assertion in the function body, it will be auto breakpoint when something is wrong, which will allow us to find the caller.\n. I think there are just too many combinations of user input, even if a specific keystroke sequence trigger the bug, say `a` and `b` are both null, the problem might appear in other places, then we need some time to pin point this function.\n\nBut it's ok if we don't do so in this project.\n. Do we want beeping in vim-mode? I could add lots more (moving up over the first line etc).\n. @jeejkang  There's an option for atom to turn of beeping globally. But of course we can make a vim-mode-only option.\n. Example: the `m` motion.\n. Or, how about implement singleChar mode separately, with just event handlers?\n. I found that `register-prefix` is implemented by register multiple keymaps but `m` is implemented by receiving the register from a singleChar input, shall we unify them?\n. Yes, I agree that `singleChar` works for the input. Yet the problem is I'm trying to implement the command-line stuffs, and `singleChar` might make the logic more complex. \n\nI hope I can remove the singleChar mode, and register the keystrokes through keymap, such that it will be easier to add features for the input line. I'm just not sure if this would be OK, what do you think?\n. Hmm I'm still thinking, maybe receiving the keystroke separately might be better, if we want to check the register key, we can `atom.beep()` if an invalid register is typed, and it also saves space in the keymap file.\n\nNot sure what is the best way of integrating atom's keymap API\n. I found that the `hidden-input` class is applied to the input, but it is not hidden. It is a built-in class in atom?\n. @maxbrunsfeld  Right, `PaneAxis` stuffs are really hacks. I didn't find them in the API doc, and I referred to Atom's source code.\n. @nathansobo The problem is exactly to create a pane at the desired position. Say the current layout is something like\n\n```\n{\n  PaneAxis : 'vertical'\n  children: [Pane1, Pane2, Pane3]\n}\n```\n\nand the result after moving should be\n\n```\n{\n  PaneAxis: 'horizontal'\n  children: [Pane2,\n    {\n       PaneAxis: vertical\n       children: [Pane1, Pane3]\n    }]\n}\n```\n\nIn this case I don't know how to create the new Pane which is a sliding of the old vertical PaneAxis.\nSeems that the normal API only allows us to create a new Pane as a sibing of an existing Pane.\n. @nathansobo Right, if `spiltUp` (and also other directions) is defined as `create a new child pane at the top (for vertical axis) or create a new sibling pane on top (for horizontal axis)`, the code will be much simpler.\n\nAlso we need functions to retrieve the root pane/paneaxis, and to check whether it is a pane or axis.\n. @nathansobo I'm afraid that I might not have enough time recently. I will come back later and implement this if nobody has done so.\n. I tried to tested if this patch still works for the latest version of `vim-mode`, and I found that:\n- I have accidentally removed my repo. Oops!\n- Several APIs about `Pane` have been integrated into Atom\n\nSo I guess the better way is to implement this in Atom as `window:move-pane-to-very-left` etc.\n\nMaybe this PR should be closed?\n. @t9md  For example, this one: https://github.com/coolwanglu/vim-mode/blob/4aba8f61eb768968fc7e74f767efa41cca63a757/keymaps/vim-mode.cson#L84\nThe file for pane operations in `vim-mode` has been removed due to this.\n\nI'm not sure about your question, I don't remember if I have tested that or not. Sorry.\n\nI guess it's best to implement this directly in Atom, we don't even need new APIs that way.\n. ",
    "yriveiro": "I closed and opened again the file and the error didn't reproduce.\n\nI will open a issue in `gocode` package alerting of the use of deprecated stuff.\n\nThanks.\n. [Enter steps to reproduce below:]\n1. ...\n2. ...\n\n**Atom Version**: 1.0.9\n**System**: Mac OS X 10.10.5\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.59.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/yriveiro/.atom/packages/vim-mode/lib/view-models/view-model.coffee:18\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n  at Error (native)\n  at /Users/yriveiro/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n  at Emitter.module.exports.Emitter.emit (/Users/yriveiro/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n  at VimState.module.exports.VimState.pushOperations (/Users/yriveiro/.atom/packages/vim-mode/lib/vim-state.coffee:225:18)\n  at atom-text-editor.commands.(anonymous function) (/Users/yriveiro/.atom/packages/vim-mode/lib/vim-state.coffee:207:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/command-registry.js:245:29)\n  at /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:177:20)\n\n```\n\n### Commands\n\n```\n     -0:34.8.0 core:paste (atom-text-editor.editor.vim-mode.insert-mode.is-focused)\n  2x -0:34.6.0 core:save (atom-text-editor.editor.vim-mode.insert-mode.is-focused)\n     -0:07.9.0 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.insert-mode.is-focused)\n  2x -0:07.5.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:06.9.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  2x -0:06.6.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  4x -0:06.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:05.2.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:05.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  2x -0:05.0 blur (atom-text-editor.editor.mini)\n     -0:04.4.0 snippets:next-tab-stop (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:04.4.0 snippets:expand (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:04.4.0 docblockr:parse-tab (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:04.4.0 editor:indent (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:01.3.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:00.5.0 vim-mode:activate-insert-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"autocomplete\",\n      \"meteor-api\",\n      \"meteor-helper\",\n      \"meteor-snippets\",\n      \"git-tab-status\",\n      \"color-tabs\",\n      \"hyperclick\",\n      \"sourcegraph-atom\",\n      \"racer\"\n    ],\n    \"themes\": [\n      \"atom-dark-ui\",\n      \"seti-syntax\"\n    ]\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-beautify, v0.28.11\natom-cli-diff, v1.1.0\natom-html-preview, v0.1.11\natom-jade, v0.3.0\nautocomplete-paths, v1.0.2\nautocomplete-php, v0.3.7\nautocomplete-phpunit, v1.0.2\ncolor-picker, v2.0.11\ncss-color-underline, v1.0.1\ndocblockr, v0.7.3\nfile-icons, v1.6.9\ngit-diff-details, v0.20.0\ngo-plus, v3.5.1\nhighlight-line, v0.11.0\ninline-messenger, v1.2.8\nlanguage-rust, v0.4.4\nlinter, v1.4.3\nlinter-jsonlint, v0.1.4\nlinter-php, v1.0.3\nlinter-rust, v0.2.8\nlinter-shellcheck, v1.0.1\nlocal-history, v3.2.3\nmarkdown-format, v2.5.1\nminimap, v4.13.2\nminimap-git-diff, v4.1.8\nphp-debug, v0.1.3\nphpunit, v1.1.1\npigments, v0.12.0\npretty-json, v0.4.1\nrust-api-docs-helper, v0.5.1\nseti-syntax, v0.4.0\nsort-lines, v0.11.0\nsynced-sidebar, v0.4.0\ntool-bar, v0.1.8\ntravis-ci-status, v0.17.0\nvim-mode, v0.59.0\nwakatime, v4.0.16\n\n# Dev\nNo dev packages\n```\n. I'm sorry but no :( , it was a random error when pasting code with [dd + p] combination.\n. I closed and opened again the file and the error didn't reproduce.\n\nI will open a issue in `gocode` package alerting of the use of deprecated stuff.\n\nThanks.\n. [Enter steps to reproduce below:]\n1. ...\n2. ...\n\n**Atom Version**: 1.0.9\n**System**: Mac OS X 10.10.5\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.59.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/yriveiro/.atom/packages/vim-mode/lib/view-models/view-model.coffee:18\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n  at Error (native)\n  at /Users/yriveiro/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n  at Emitter.module.exports.Emitter.emit (/Users/yriveiro/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n  at VimState.module.exports.VimState.pushOperations (/Users/yriveiro/.atom/packages/vim-mode/lib/vim-state.coffee:225:18)\n  at atom-text-editor.commands.(anonymous function) (/Users/yriveiro/.atom/packages/vim-mode/lib/vim-state.coffee:207:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/command-registry.js:245:29)\n  at /opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/opt/homebrew-cask/Caskroom/atom/latest/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:177:20)\n\n```\n\n### Commands\n\n```\n     -0:34.8.0 core:paste (atom-text-editor.editor.vim-mode.insert-mode.is-focused)\n  2x -0:34.6.0 core:save (atom-text-editor.editor.vim-mode.insert-mode.is-focused)\n     -0:07.9.0 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.insert-mode.is-focused)\n  2x -0:07.5.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:06.9.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  2x -0:06.6.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  4x -0:06.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:05.2.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:05.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  2x -0:05.0 blur (atom-text-editor.editor.mini)\n     -0:04.4.0 snippets:next-tab-stop (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:04.4.0 snippets:expand (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:04.4.0 docblockr:parse-tab (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:04.4.0 editor:indent (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:01.3.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:00.5.0 vim-mode:activate-insert-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"autocomplete\",\n      \"meteor-api\",\n      \"meteor-helper\",\n      \"meteor-snippets\",\n      \"git-tab-status\",\n      \"color-tabs\",\n      \"hyperclick\",\n      \"sourcegraph-atom\",\n      \"racer\"\n    ],\n    \"themes\": [\n      \"atom-dark-ui\",\n      \"seti-syntax\"\n    ]\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-beautify, v0.28.11\natom-cli-diff, v1.1.0\natom-html-preview, v0.1.11\natom-jade, v0.3.0\nautocomplete-paths, v1.0.2\nautocomplete-php, v0.3.7\nautocomplete-phpunit, v1.0.2\ncolor-picker, v2.0.11\ncss-color-underline, v1.0.1\ndocblockr, v0.7.3\nfile-icons, v1.6.9\ngit-diff-details, v0.20.0\ngo-plus, v3.5.1\nhighlight-line, v0.11.0\ninline-messenger, v1.2.8\nlanguage-rust, v0.4.4\nlinter, v1.4.3\nlinter-jsonlint, v0.1.4\nlinter-php, v1.0.3\nlinter-rust, v0.2.8\nlinter-shellcheck, v1.0.1\nlocal-history, v3.2.3\nmarkdown-format, v2.5.1\nminimap, v4.13.2\nminimap-git-diff, v4.1.8\nphp-debug, v0.1.3\nphpunit, v1.1.1\npigments, v0.12.0\npretty-json, v0.4.1\nrust-api-docs-helper, v0.5.1\nseti-syntax, v0.4.0\nsort-lines, v0.11.0\nsynced-sidebar, v0.4.0\ntool-bar, v0.1.8\ntravis-ci-status, v0.17.0\nvim-mode, v0.59.0\nwakatime, v4.0.16\n\n# Dev\nNo dev packages\n```\n. I'm sorry but no :( , it was a random error when pasting code with [dd + p] combination.\n. ",
    "nosami": "Just came here to report the same issue. Visual block mode doesn't work with ctrl-v\n. I just came here to report this issue then found this. I think I will make a custom command for now.\n. I have a workaround for now\n\nIn your init script:\n\n```\natom.commands.add 'atom-text-editor', 'custom:cc': (e) ->\n  editor = atom.workspace.getActiveTextEditor()\n  buffer = editor.getBuffer()\n  checkpoint = buffer.createCheckpoint()\n  atom.commands.dispatch(e.currentTarget, 'editor:delete-line')\n  atom.commands.dispatch(e.currentTarget, 'vim-mode:insert-above-with-newline')\n  buffer.groupChangesSinceCheckpoint(checkpoint)\n```\n\nKeymap:\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'c c': 'custom:cc'\n```\n. 'S' for 'vim-mode:substitute-line' works almost the same as 'cc' but I found it sometimes adds an extra indent.\n. Just came here to report the same issue. Visual block mode doesn't work with ctrl-v\n. I just came here to report this issue then found this. I think I will make a custom command for now.\n. I have a workaround for now\n\nIn your init script:\n\n```\natom.commands.add 'atom-text-editor', 'custom:cc': (e) ->\n  editor = atom.workspace.getActiveTextEditor()\n  buffer = editor.getBuffer()\n  checkpoint = buffer.createCheckpoint()\n  atom.commands.dispatch(e.currentTarget, 'editor:delete-line')\n  atom.commands.dispatch(e.currentTarget, 'vim-mode:insert-above-with-newline')\n  buffer.groupChangesSinceCheckpoint(checkpoint)\n```\n\nKeymap:\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'c c': 'custom:cc'\n```\n. 'S' for 'vim-mode:substitute-line' works almost the same as 'cc' but I found it sometimes adds an extra indent.\n. ",
    "modulitos": "`Visual block mode doesn't work with ctrl-v`\nSame here.\n. `Visual block mode doesn't work with ctrl-v`\nSame here.\n. ",
    "nesmyslny": ":sparkles: Thanks @t9md! :bow: \nIs this issue still open by purpose or should I close it?\n. Ok, I see. I didn't noticed, because me neither use `ap` :wink:\nMaybe someone has interest in it and finds this issue (so I don't close it).\n\nThanks again!\n. I'm not sure if it meets your needs, but as for `:w`, you can map it in your `keymap.cson`:\n\n``` coffee\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ': w': 'core:save'\n```\n\nI guess you could write a function in `init.coffee` that saves and quits and map it to `:wq` (see: http://jasonrudolph.com/blog/2014/03/02/defining-atom-commands-in-your-init-script/). I'm not an Atom expert, so try it on your own risk :wink: \n. Actually, that's how I use it: `:` mapped to the command palette. In vim I mapped save to `leader w` (and so in Atom now), so that setup with command palette works for me pretty well.\n\nThere's already a discussion about that in issue #50 (also #185, #441).\n. :sparkles: Thanks @t9md! :bow: \nIs this issue still open by purpose or should I close it?\n. Ok, I see. I didn't noticed, because me neither use `ap` :wink:\nMaybe someone has interest in it and finds this issue (so I don't close it).\n\nThanks again!\n. I'm not sure if it meets your needs, but as for `:w`, you can map it in your `keymap.cson`:\n\n``` coffee\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ': w': 'core:save'\n```\n\nI guess you could write a function in `init.coffee` that saves and quits and map it to `:wq` (see: http://jasonrudolph.com/blog/2014/03/02/defining-atom-commands-in-your-init-script/). I'm not an Atom expert, so try it on your own risk :wink: \n. Actually, that's how I use it: `:` mapped to the command palette. In vim I mapped save to `leader w` (and so in Atom now), so that setup with command palette works for me pretty well.\n\nThere's already a discussion about that in issue #50 (also #185, #441).\n. ",
    "MarkusSN": "I think this can closed :)\n. +1\n. No, the ip/ap is still delimited by comments. It should be a pretty easy fix, I will probably look into it :) \n. Any feedback on this?\n. Refactored and rebased.\n. Sneaky .swp removed :) \n. Added support for multiline tags.\n. #598\n.  Currently, the implementation assumes a correctly formatted xml structure. But it seems like unclosed tags are ignored in vim, so I am going to try to get that working.\n. Rebased.\nSeems to working pretty well now. It's a bit massive compared to some of the other text objects, so if anyone has any feedback, that would be great :)\n. Yes :)\n. I changed one of the existing tests to expect that \"it does _not expand_ an existing selection in visual mode\" instead of \"it expands an existing selection in visual mode\". This is more in line with how it works in vim.\n. I definitely think that abstracting away the multicursor support would be an improvement. It would also be great if the starting point for each text object was handled/defined in one place. Handling these things in each text object is error prone. \n\nUsing the text objects for movement might not be as simple as defining a single getRange() function though. Consider the paragraph text object, where different ranges are selected depending on whether the cursor is between or inside paragraphs. \n. @t9md Sorry if I wasn't clear, I really like the idea of each text object returning a range :)\n\nI just wanted to point out a small detail, but it doesn't really matter. It seems like your example will handle it. \n. Duplicate of #835?\n. No, this change will mean that invoking the quotes-text-object will replace the current selection instead of expanding it, unlike eg. the paragraph- or word-text-objects. \n. In my opinion, yes. Being able to jump to the nearest quoted string on the same line is very handy.\n. Thanks for suggestion! But I'm afraid this one is heavily ingrained in muscle memory :smile:\n\nAnother thing I realized while looking at the different text object implementations is that most of them do something along these lines, i.e. relying on selection._cursor_:\n\n```\nfor selection in @editor.getSelections()\n      [...] selection.cursor.getBufferPosition())\n```\n\nThe problem is that when we enter visual mode, the cursor is moved one character to the right. This means that there exists a few off-by-one bugs when selecting text objects.\n\nIf visual mode was changed so that we do not create a selection before the user actually moves the cursor, we might be able to keep the current merge logic and jump-to-nearest should start working. And also fix the off-by-one bugs.\n\nI don't know how much work such a change would be, but I might look into it if you think it makes sense,\n. I think this can closed :)\n. +1\n. No, the ip/ap is still delimited by comments. It should be a pretty easy fix, I will probably look into it :) \n. Any feedback on this?\n. Refactored and rebased.\n. Sneaky .swp removed :) \n. Added support for multiline tags.\n. #598\n.  Currently, the implementation assumes a correctly formatted xml structure. But it seems like unclosed tags are ignored in vim, so I am going to try to get that working.\n. Rebased.\nSeems to working pretty well now. It's a bit massive compared to some of the other text objects, so if anyone has any feedback, that would be great :)\n. Yes :)\n. I changed one of the existing tests to expect that \"it does _not expand_ an existing selection in visual mode\" instead of \"it expands an existing selection in visual mode\". This is more in line with how it works in vim.\n. I definitely think that abstracting away the multicursor support would be an improvement. It would also be great if the starting point for each text object was handled/defined in one place. Handling these things in each text object is error prone. \n\nUsing the text objects for movement might not be as simple as defining a single getRange() function though. Consider the paragraph text object, where different ranges are selected depending on whether the cursor is between or inside paragraphs. \n. @t9md Sorry if I wasn't clear, I really like the idea of each text object returning a range :)\n\nI just wanted to point out a small detail, but it doesn't really matter. It seems like your example will handle it. \n. Duplicate of #835?\n. No, this change will mean that invoking the quotes-text-object will replace the current selection instead of expanding it, unlike eg. the paragraph- or word-text-objects. \n. In my opinion, yes. Being able to jump to the nearest quoted string on the same line is very handy.\n. Thanks for suggestion! But I'm afraid this one is heavily ingrained in muscle memory :smile:\n\nAnother thing I realized while looking at the different text object implementations is that most of them do something along these lines, i.e. relying on selection._cursor_:\n\n```\nfor selection in @editor.getSelections()\n      [...] selection.cursor.getBufferPosition())\n```\n\nThe problem is that when we enter visual mode, the cursor is moved one character to the right. This means that there exists a few off-by-one bugs when selecting text objects.\n\nIf visual mode was changed so that we do not create a selection before the user actually moves the cursor, we might be able to keep the current merge logic and jump-to-nearest should start working. And also fix the off-by-one bugs.\n\nI don't know how much work such a change would be, but I might look into it if you think it makes sense,\n. ",
    "TheStealthReporter": "Code: https://github.com/t9md/atom-vim-mode-plus/issues/315\n. Code: https://github.com/t9md/atom-vim-mode-plus/issues/315\n. ",
    "willthemoor": "I didn't realize how often I hit `gv` in vim until trying to switch to atom. Missing it! Wish I could be useful on #597. So, a lame +1 anyway.\n. I didn't realize how often I hit `gv` in vim until trying to switch to atom. Missing it! Wish I could be useful on #597. So, a lame +1 anyway.\n. ",
    "ramongilmoreno": "Yet another vi user aching for his trusted gv command.. Yet another vi user aching for his trusted gv command.. ",
    "hobofan": "https://github.com/t9md/atom-vim-mode-plus has `gv` implemented, if that's a feature you can't live without.. https://github.com/t9md/atom-vim-mode-plus has `gv` implemented, if that's a feature you can't live without.. ",
    "danwoods": "+1\n. @nesmyslny Thanks!\n. +1\n. @nesmyslny Thanks!\n. ",
    "Germanika": "lloeki also started development on an ex-mode package to complement vim-mode, so I'd suggest checking that out: https://atom.io/packages/ex-mode\nPersonally, I think these should be incorporated into vim-mode by default, but it seems the overall sentiment is to leave them out, so an additional package is the next-best thing.\n. lloeki also started development on an ex-mode package to complement vim-mode, so I'd suggest checking that out: https://atom.io/packages/ex-mode\nPersonally, I think these should be incorporated into vim-mode by default, but it seems the overall sentiment is to leave them out, so an additional package is the next-best thing.\n. ",
    "gerrywastaken": "Wow, this was the one thing major thing holding me back from using atom. I can't believe I just had to install another package. I would have expected \"vim-mode\" to add :w \n. @AsaAyers I don't think most people who added a +1 really give much of a damn which way :w gets enabled when they install vim-mode, just that it gets enabled.\n. Is the most up to date changelog on master? Should there be a mention of this change and how it works?\n. Wow, this was the one thing major thing holding me back from using atom. I can't believe I just had to install another package. I would have expected \"vim-mode\" to add :w \n. @AsaAyers I don't think most people who added a +1 really give much of a damn which way :w gets enabled when they install vim-mode, just that it gets enabled.\n. Is the most up to date changelog on master? Should there be a mention of this change and how it works?\n. ",
    "Qix-": "Is `:w` really ex-mode? I thought ex-mode was something completely different...\n. > But I think it might be worth considering having vim-mode auto-install ex-mode\n\nAs someone who came from actual Vim and was confused as to why `:w` wasn't working, I completely agree.\n. Can packages bring in other packages @AsaAyers?\n. Then that is what should be happening here IMO; `vim-mode` should be pulling in `ex-mode`.\n. Is `:w` really ex-mode? I thought ex-mode was something completely different...\n. > But I think it might be worth considering having vim-mode auto-install ex-mode\n\nAs someone who came from actual Vim and was confused as to why `:w` wasn't working, I completely agree.\n. Can packages bring in other packages @AsaAyers?\n. Then that is what should be happening here IMO; `vim-mode` should be pulling in `ex-mode`.\n. ",
    "luxigo": "+1 for \"muscle memory\" and \"why another package ?\"\n\nMaybe you also need https://atom.io/packages/keyboard-localization ....\n. +1 for \"muscle memory\" and \"why another package ?\"\n\nMaybe you also need https://atom.io/packages/keyboard-localization ....\n. ",
    "ashah023": "+1\n. +1\n. ",
    "codeHatcher": "should be in vim mode by default +1\n. fair point, makes sense\n\n> On Apr 3, 2016, at 4:46 PM, Asa Ayers notifications@github.com wrote:\n> \n> Because ex-mode https://atom.io/packages/ex-mode already handles :w it doesn't make any sense to add :w to vim-mode no matter how many people +1 it. But I think it might be worth considering having vim-mode auto-install ex-mode https://atom.io/packages/ex-mode\n> The linter-\\* plugins don't do anything without linter installed. linter-eslint https://github.com/AtomLinter/linter-eslint/blob/master/lib/main.js#L71 uses atom-package-deps https://www.npmjs.com/package/atom-package-deps to auto-install linter when it loads.\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly or view it on GitHub https://github.com/atom/vim-mode/issues/520#issuecomment-205061002\n. should be in vim mode by default +1\n. fair point, makes sense\n\n> On Apr 3, 2016, at 4:46 PM, Asa Ayers notifications@github.com wrote:\n> \n> Because ex-mode https://atom.io/packages/ex-mode already handles :w it doesn't make any sense to add :w to vim-mode no matter how many people +1 it. But I think it might be worth considering having vim-mode auto-install ex-mode https://atom.io/packages/ex-mode\n> The linter-\\* plugins don't do anything without linter installed. linter-eslint https://github.com/AtomLinter/linter-eslint/blob/master/lib/main.js#L71 uses atom-package-deps https://www.npmjs.com/package/atom-package-deps to auto-install linter when it loads.\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly or view it on GitHub https://github.com/atom/vim-mode/issues/520#issuecomment-205061002\n. ",
    "michaelbpaulson": "This just seems like a disconnect from product dev to the end user.  The end user reads `vim-mode`.  Ok, i'll vim it up (as I did).  So of course, I try to save.  Takes me 10 minutes to get to this point reading that command mode is implemented, but in a completely separate package with features I may or may not want.\n\nThe linter example is bogus.  Its relation to vim would not be for the most quintessential vim feature (saving) but for adding vundles, or color themes, or other non-vim core related items.  \n\nOhh well, I guess users who install vim will have to tribal their knowledge to this forum and find out that ex-mode is how you can save!  \n\n+1\n. This just seems like a disconnect from product dev to the end user.  The end user reads `vim-mode`.  Ok, i'll vim it up (as I did).  So of course, I try to save.  Takes me 10 minutes to get to this point reading that command mode is implemented, but in a completely separate package with features I may or may not want.\n\nThe linter example is bogus.  Its relation to vim would not be for the most quintessential vim feature (saving) but for adding vundles, or color themes, or other non-vim core related items.  \n\nOhh well, I guess users who install vim will have to tribal their knowledge to this forum and find out that ex-mode is how you can save!  \n\n+1\n. ",
    "plbowers": "Fully agree - vim-mode should \"depend on\" ex-mode so that installing vim-mode automatically installs ex-mode. (Maybe vice versa too, but that's for a different boad)\n. This issue comes up when event-kit isn't available as well. \n\nFix it by going into your `~/.atom/packages/vim-mode` directory and executing `apm install` to install dependencies.\n\n(I get this error whenever I install vim-mode directly from git so that I can make changes to the source and submit them back as pull requests)\n. I, too, would like to know if this package is dead...\n\nI've been working hard on a few modifications/enhancements, but if there's low probability of them getting merged into the master trunk (it looks like the last merge happened in March?) then I'm not sure I want to keep working on them...\n. If this is the official status of this package then it REALLY needs to be made clear. From a quick read it looked like vim-mode-plus was a breakaway fork and this was still the standard-bearer for vim within atom. Now I've spent a few weeks learning the package and implementing some new features and now I find out that vim-mode-plus is not a \"rogue breakaway\" but the official new standard-bearer. Please make this clear (as in the top of the README in bold-face) as it will make a BIG difference to people deciding between the 2 packages...\n. It should also be notated at https://atom.io/packages/vim-mode unless the README automatically gets displayed there...\n. OK, I've implemented this in my own development side of things. I need authorization to submit this on a new branch.\n. In vim a delete within a line (`x`, `dw`, `2dw`, `d$`, etc.) does not update the numbered registers but instead goes into the `\"-` register (also called the \"small register\"). Maybe this (applied to the clipboard) should be an option if you have chosen \"Use Clipboard As Default Register\"...  Thus line-oriented deletes or changes would go into the clipboard but intra-line deletes or changes would not. Presumably any use of yank implies the desire to put it in a register and so `yw` and `y$` should probably update the clipboard.\n\nAnother alternative would be to not update the clipboard until the end of the change command, so `c2w^v<ESC>` would change the next 2 words to whatever was in the clipboard and then replace the clipboard with those 2 words _afterwards_.\n\nAnother alternative is to train people in the use of the `\"_` register -- if you don't want your deleted/changed text to be recorded in a register then prepend it with `\"_`. So if I wanted to replace the next 2 words with the clipboard I could type `_2c^v<ESC>`.\n. I have this working with the commits I have done. I am unfamiliar with the spec system, but I am trying to learn how it works. \n\nWhat is the next step? \n. I made the changes to the code and got it working, but I don't know what the process is to get my changes into the pipeline for whatever change management process you have before changes get actually implemented in the official vim-mode.\n. OK, I'm starting to realize I'm going about this wrong. This is my first github project (although I've used several other source-code-mgmt tools). When I couldn't create a new branch or upload a new file I went ahead and forked so I could contribute over on my system. I assumed that would allow others to do a code-review and a merge, but I'm starting to realize that's not right - it seems I've created a completely independent fork.\n\nSo I have a coded (and now spec'd) change with a feature request implemented. What do I need to do to contribute this to the project? Is there some documentation somewhere explaining the steps needed? Do I need to be authorized somehow? Is there a vetting process before being authorized?\n. Great - that was exactly what I needed to understand. I didn't realize I could generate a pull request between the primary repository (here) and my fork.\n\nNow I see that if there are no conflicts I can actually merge my PR back into the master myself (at least it looks like it - I haven't clicked on the \"merge\" button to test it). That's a little scary since I could be anybody - is there any type of peer review system that is used first?\n. You're right. I had closed the previous PR so I just created a new one and got to the point where before it allowed me to merge and it now tells me only people with write access can merge. So obviously I must have been doing it on my own fork.\n. check out ex-mode - it doesn't do all the vim ex-mode does, but it has a good start...\n. Test done - I can't merge it myself without write access. Closing.\n. Fully agree - vim-mode should \"depend on\" ex-mode so that installing vim-mode automatically installs ex-mode. (Maybe vice versa too, but that's for a different boad)\n. This issue comes up when event-kit isn't available as well. \n\nFix it by going into your `~/.atom/packages/vim-mode` directory and executing `apm install` to install dependencies.\n\n(I get this error whenever I install vim-mode directly from git so that I can make changes to the source and submit them back as pull requests)\n. I, too, would like to know if this package is dead...\n\nI've been working hard on a few modifications/enhancements, but if there's low probability of them getting merged into the master trunk (it looks like the last merge happened in March?) then I'm not sure I want to keep working on them...\n. If this is the official status of this package then it REALLY needs to be made clear. From a quick read it looked like vim-mode-plus was a breakaway fork and this was still the standard-bearer for vim within atom. Now I've spent a few weeks learning the package and implementing some new features and now I find out that vim-mode-plus is not a \"rogue breakaway\" but the official new standard-bearer. Please make this clear (as in the top of the README in bold-face) as it will make a BIG difference to people deciding between the 2 packages...\n. It should also be notated at https://atom.io/packages/vim-mode unless the README automatically gets displayed there...\n. OK, I've implemented this in my own development side of things. I need authorization to submit this on a new branch.\n. In vim a delete within a line (`x`, `dw`, `2dw`, `d$`, etc.) does not update the numbered registers but instead goes into the `\"-` register (also called the \"small register\"). Maybe this (applied to the clipboard) should be an option if you have chosen \"Use Clipboard As Default Register\"...  Thus line-oriented deletes or changes would go into the clipboard but intra-line deletes or changes would not. Presumably any use of yank implies the desire to put it in a register and so `yw` and `y$` should probably update the clipboard.\n\nAnother alternative would be to not update the clipboard until the end of the change command, so `c2w^v<ESC>` would change the next 2 words to whatever was in the clipboard and then replace the clipboard with those 2 words _afterwards_.\n\nAnother alternative is to train people in the use of the `\"_` register -- if you don't want your deleted/changed text to be recorded in a register then prepend it with `\"_`. So if I wanted to replace the next 2 words with the clipboard I could type `_2c^v<ESC>`.\n. I have this working with the commits I have done. I am unfamiliar with the spec system, but I am trying to learn how it works. \n\nWhat is the next step? \n. I made the changes to the code and got it working, but I don't know what the process is to get my changes into the pipeline for whatever change management process you have before changes get actually implemented in the official vim-mode.\n. OK, I'm starting to realize I'm going about this wrong. This is my first github project (although I've used several other source-code-mgmt tools). When I couldn't create a new branch or upload a new file I went ahead and forked so I could contribute over on my system. I assumed that would allow others to do a code-review and a merge, but I'm starting to realize that's not right - it seems I've created a completely independent fork.\n\nSo I have a coded (and now spec'd) change with a feature request implemented. What do I need to do to contribute this to the project? Is there some documentation somewhere explaining the steps needed? Do I need to be authorized somehow? Is there a vetting process before being authorized?\n. Great - that was exactly what I needed to understand. I didn't realize I could generate a pull request between the primary repository (here) and my fork.\n\nNow I see that if there are no conflicts I can actually merge my PR back into the master myself (at least it looks like it - I haven't clicked on the \"merge\" button to test it). That's a little scary since I could be anybody - is there any type of peer review system that is used first?\n. You're right. I had closed the previous PR so I just created a new one and got to the point where before it allowed me to merge and it now tells me only people with write access can merge. So obviously I must have been doing it on my own fork.\n. check out ex-mode - it doesn't do all the vim ex-mode does, but it has a good start...\n. Test done - I can't merge it myself without write access. Closing.\n. ",
    "dnasseri": "Hello. I am able to reproduce this error in the following way.\n\nOpen a new file.\nadd a new line.\nadd a new line. add a closing bracket or paren ) }\nmove key cursor to bracket/paren.\nenter normal mode.\nhit parentheses (bracket matcher).\nError occurs.\n\nSeems this error occurs only when there is an unmatched closing bracket and a new line at the beginning of the file.\n\nI have forked the repo and added a fix. Open for review here:\nhttps://github.com/atom/vim-mode/pull/848\n. @maxbrunsfeld absolutely!\n. @maxbrunsfeld I'm having a little bit of trouble with getting the spec to fail appropriately\n\nthis is the spec I wrote:\n\n```\nit 'stays put', ->\n  editor.setText(\"\\n)\")\n  editor.setCursorScreenPosition([1, 0])\n  expect(-> keydown('%')).not.toThrow();\n```\n\nWhen I comment out the fix and run `apm test` I see that the error is thrown in the console, but the test does not fail. A bit new to coffeescript. Am I missing something here? Thanks!\n. Closing until I fix the spec.\n. Hello. I am able to reproduce this error in the following way.\n\nOpen a new file.\nadd a new line.\nadd a new line. add a closing bracket or paren ) }\nmove key cursor to bracket/paren.\nenter normal mode.\nhit parentheses (bracket matcher).\nError occurs.\n\nSeems this error occurs only when there is an unmatched closing bracket and a new line at the beginning of the file.\n\nI have forked the repo and added a fix. Open for review here:\nhttps://github.com/atom/vim-mode/pull/848\n. @maxbrunsfeld absolutely!\n. @maxbrunsfeld I'm having a little bit of trouble with getting the spec to fail appropriately\n\nthis is the spec I wrote:\n\n```\nit 'stays put', ->\n  editor.setText(\"\\n)\")\n  editor.setCursorScreenPosition([1, 0])\n  expect(-> keydown('%')).not.toThrow();\n```\n\nWhen I comment out the fix and run `apm test` I see that the error is thrown in the console, but the test does not fail. A bit new to coffeescript. Am I missing something here? Thanks!\n. Closing until I fix the spec.\n. ",
    "wamoyo": "Hmm... that's interesting. I don't much enjoy vimscript, I wonder if there's a web standard solutions (javascript, or json config file)\n. Hmm... that's interesting. I don't much enjoy vimscript, I wonder if there's a web standard solutions (javascript, or json config file)\n. ",
    "chrisfarms": "np.... added tests and rebased against master.\n. np.... added tests and rebased against master.\n. ",
    "hanchang": "Is there a way to disable this via config? I guess I'm one of the weird ones that doesn't like my OS system clipboard to be the same as my default `vim` clipboard register. Thanks in advance!\n. Amazing, thanks!\n. Is there a way to disable this via config? I guess I'm one of the weird ones that doesn't like my OS system clipboard to be the same as my default `vim` clipboard register. Thanks in advance!\n. Amazing, thanks!\n. ",
    "sQu1rr": "+1\n\nCurrently use following workaround\nkeymap.cson\n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n    'Z Z': 'sq:saveAndClose'\n```\n\ninit.coffee\n\n``` coffeescript\natom.commands.add 'atom-text-editor', 'sq:saveAndClose', ->\n    pack = atom.packages.activePackages['tree-view']\n    treeView = pack?.mainModule.treeView\n\n    selected = treeView?.selectedEntry()\n\n    editor = atom.workspace.getActiveTextEditor()\n    editor.save() if editor.getPath()\n\n    atom.workspace.getActivePane().destroyActiveItem()\n\n    if treeView and !atom.workspace.getActivePane().getActiveItem()\n        treeView.selectEntry(selected)\n        treeView.show()\n```\n. +1\n\nCurrently use following workaround\nkeymap.cson\n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n    'Z Z': 'sq:saveAndClose'\n```\n\ninit.coffee\n\n``` coffeescript\natom.commands.add 'atom-text-editor', 'sq:saveAndClose', ->\n    pack = atom.packages.activePackages['tree-view']\n    treeView = pack?.mainModule.treeView\n\n    selected = treeView?.selectedEntry()\n\n    editor = atom.workspace.getActiveTextEditor()\n    editor.save() if editor.getPath()\n\n    atom.workspace.getActivePane().destroyActiveItem()\n\n    if treeView and !atom.workspace.getActivePane().getActiveItem()\n        treeView.selectEntry(selected)\n        treeView.show()\n```\n. ",
    "Abukamel": "@maxbrunsfeld \n- OS: manjaro linux\n- Atom version: 0.182.0\n- vim-mode version: 0.182.0\n. I agree with @chrisvdb :+1: That would be the least confusing option.\n. @maxbrunsfeld \n- OS: manjaro linux\n- Atom version: 0.182.0\n- vim-mode version: 0.182.0\n. I agree with @chrisvdb :+1: That would be the least confusing option.\n. ",
    "Good4m": "Thanks micaellenahan. This has been driving me nuts. There should be a checkbox for this imo.\n. Thanks micaellenahan. This has been driving me nuts. There should be a checkbox for this imo.\n. ",
    "steveoh": "i fixed this but instead of `core:copy` i used `unset!`\n. i fixed this but instead of `core:copy` i used `unset!`\n. ",
    "h-kaseya": "I am Windows user. And I want you to remove ctrl-c binding or enable to select it.\n. I am Windows user. And I want you to remove ctrl-c binding or enable to select it.\n. ",
    "danquirk": "I'm having this same issue on Windows with the latest vim-mode (0.54.0) on the latest Atom (1.0.2). Whatever solution is chosen it needs to be overrideable by keymap.cson. At the moment I can't even seem to override this myself whether in normal or insert mode. I'm not sure why the user keymap isn't given priority 1 by Atom for precisely this reason. You can see I tried to manually override ctrl-c in keymap.cson and vim-mode is overriding both the core copy command and my user defined one:\n\n![image](https://cloud.githubusercontent.com/assets/7121557/8584676/f02aa7d0-258d-11e5-83ec-2b3601eab7d7.png)\n\nIt's really annoying having to use the mouse to copy/paste any text out of Atom into something else.\n. @DrBones good tip, thanks, might come in handy for some other commands. Changing the setting @chrisvdb mentioned seems like the easiest approach here (although for some reason I don't have Vim Mode listed in my Packages menu). \n. I'm having this same issue on Windows with the latest vim-mode (0.54.0) on the latest Atom (1.0.2). Whatever solution is chosen it needs to be overrideable by keymap.cson. At the moment I can't even seem to override this myself whether in normal or insert mode. I'm not sure why the user keymap isn't given priority 1 by Atom for precisely this reason. You can see I tried to manually override ctrl-c in keymap.cson and vim-mode is overriding both the core copy command and my user defined one:\n\n![image](https://cloud.githubusercontent.com/assets/7121557/8584676/f02aa7d0-258d-11e5-83ec-2b3601eab7d7.png)\n\nIt's really annoying having to use the mouse to copy/paste any text out of Atom into something else.\n. @DrBones good tip, thanks, might come in handy for some other commands. Changing the setting @chrisvdb mentioned seems like the easiest approach here (although for some reason I don't have Vim Mode listed in my Packages menu). \n. ",
    "chrisvdb": "I use \"Packages -> Vim Mode -> Settings -> Use Clipboard As Default Register\" and just use the standard Vi copy/paste commands to copy in/out of Atom. I would argue that this should be the default setting for Vim Mode.\n. hi guys, is this fix production ready? If so, can this fix be included in the next release? Issue #550 hits me 10+ times per day.\n. I use \"Packages -> Vim Mode -> Settings -> Use Clipboard As Default Register\" and just use the standard Vi copy/paste commands to copy in/out of Atom. I would argue that this should be the default setting for Vim Mode.\n. hi guys, is this fix production ready? If so, can this fix be included in the next release? Issue #550 hits me 10+ times per day.\n. ",
    "miloszw": "I agree with @chrisvdb :+1: That would be the least confusing option.\n. I agree with @chrisvdb :+1: That would be the least confusing option.\n. ",
    "oshliaer": "@chrisvdb is right.\nI would argue that this should be the default setting for Vim Mode too.\n. @morenoh149 , I see now, thanks. \n. @chrisvdb is right.\nI would argue that this should be the default setting for Vim Mode too.\n. @morenoh149 , I see now, thanks. \n. ",
    "krokofant": "Looking at [this SO answer](http://stackoverflow.com/a/9166363/3951400) I now do this\n`Shift+V`\n_select all lines to copy_\n`y`\nand then use `p` to paste\n. Looking at [this SO answer](http://stackoverflow.com/a/9166363/3951400) I now do this\n`Shift+V`\n_select all lines to copy_\n`y`\nand then use `p` to paste\n. ",
    "kevincantu": "Thanks @DrBones, your tip particularly helped me over on the -plus project:\r\n```\r\n'atom-text-editor.vim-mode-plus:not(.insert-mode)':\r\n  'ctrl-c': 'core:copy'\r\n```. Thanks @DrBones, your tip particularly helped me over on the -plus project:\r\n```\r\n'atom-text-editor.vim-mode-plus:not(.insert-mode)':\r\n  'ctrl-c': 'core:copy'\r\n```. ",
    "chrisjones-brack3t": "Using Atom v0.184.0, vim-mode v0.34.0 on OS X 10.10.2 and can confirm the same issue. Thanks for figuring out how to consistently make this show up. It's been driving me nuts for a couple of weeks.\n. Using Atom v0.184.0, vim-mode v0.34.0 on OS X 10.10.2 and can confirm the same issue. Thanks for figuring out how to consistently make this show up. It's been driving me nuts for a couple of weeks.\n. ",
    "vokgist": "Same here: Atom 0.184, vim-mode 0.34, linux/ubuntu\n. Same here: Atom 0.184, vim-mode 0.34, linux/ubuntu\n. ",
    "erikweibust": "I just started using Atom today. First thing I did was install vim-mode. Then was disappointed not seeing my search text. Glad to see there is a bug to get this fixed and that it was working in prior versions.\n. I just started using Atom today. First thing I did was install vim-mode. Then was disappointed not seeing my search text. Glad to see there is a bug to get this fixed and that it was working in prior versions.\n. ",
    "arve0": "Does not seem to be a style issue, as setting background of search field to white doesn't show any characters. Anyone know of a quick fix?\n. Does not seem to be a style issue, as setting background of search field to white doesn't show any characters. Anyone know of a quick fix?\n. ",
    "MattKunze": "The problem is with the mini-editor used to prompt for additional movement and search input. It's not just search, but anything that accepts additional input.\n\nI took a stab at fixing it in #545, and that at least gets it working again on my end. A bunch of the unit tests are failing though, and I haven't had time to look into it any deeper. The behavior seems right, so I can't tell yet if the tests need to be updated to work with the view changes or something else is wrong\n. Doh, seems to fail a bunch of tests somehow. Not sure if it makes more sense to update the tests against the deprecated views, or update how the input editor view works\n. Most of the failing tests seem to stem from needing to change how events are bound to the text editor now that it uses shadow DOM. I can update the bindings with\n\n``` coffee\n  handleEvents: ->\n    input = $ @editor[0].rootElement.querySelector 'input'\n    if @singleChar?\n      input.on 'textInput', @autosubmit\n    @editor.on 'core:confirm', @confirm\n    @editor.on 'core:cancel', @cancel\n    input.on 'blur', @cancel\n```\n\nand single character motions are working again, but the specs still are failing\n. @maxbrunsfeld - I was able to return to this and get the tests to work, the specs had the same issue getting a reference to the text editor input through the shadow DOM mentioned above.\n\nIt seems like there has to be a better way to hook to the input, but I couldn't find it in the docs. I'd be happy to update if someone would point me in the right direction\n. No worries, just glad to see the issue fixed!\n. #545 has the same changes and I just got the tests to work FWIW. It seems a little ugly how it's traversing the text editor component though\n. fwiw I have this updated in #545\n. It didn't seem like the optimal approach, I was just following the bouncing balls of documentation regarding upgrading the internal views.\n. I think the motion regression is with handling single-character inputs. The input used to show up, but it was closed after the first character that was typed. That's what hung me up on the other PR was how to handle that with the updated internals.\n. The problem is with the mini-editor used to prompt for additional movement and search input. It's not just search, but anything that accepts additional input.\n\nI took a stab at fixing it in #545, and that at least gets it working again on my end. A bunch of the unit tests are failing though, and I haven't had time to look into it any deeper. The behavior seems right, so I can't tell yet if the tests need to be updated to work with the view changes or something else is wrong\n. Doh, seems to fail a bunch of tests somehow. Not sure if it makes more sense to update the tests against the deprecated views, or update how the input editor view works\n. Most of the failing tests seem to stem from needing to change how events are bound to the text editor now that it uses shadow DOM. I can update the bindings with\n\n``` coffee\n  handleEvents: ->\n    input = $ @editor[0].rootElement.querySelector 'input'\n    if @singleChar?\n      input.on 'textInput', @autosubmit\n    @editor.on 'core:confirm', @confirm\n    @editor.on 'core:cancel', @cancel\n    input.on 'blur', @cancel\n```\n\nand single character motions are working again, but the specs still are failing\n. @maxbrunsfeld - I was able to return to this and get the tests to work, the specs had the same issue getting a reference to the text editor input through the shadow DOM mentioned above.\n\nIt seems like there has to be a better way to hook to the input, but I couldn't find it in the docs. I'd be happy to update if someone would point me in the right direction\n. No worries, just glad to see the issue fixed!\n. #545 has the same changes and I just got the tests to work FWIW. It seems a little ugly how it's traversing the text editor component though\n. fwiw I have this updated in #545\n. It didn't seem like the optimal approach, I was just following the bouncing balls of documentation regarding upgrading the internal views.\n. I think the motion regression is with handling single-character inputs. The input used to show up, but it was closed after the first character that was typed. That's what hung me up on the other PR was how to handle that with the updated internals.\n. ",
    "axelbsa": "+1\nHaving the same issue.\nHaven't tried @MattKunze 's branch, but would be nice i could just apm install the branch\n. +1\nHaving the same issue.\nHaven't tried @MattKunze 's branch, but would be nice i could just apm install the branch\n. ",
    "octref": "+1\n\nDisabling `whitespace` package doesn't help either. \nI'll dig into this later today. \nI'm fairly new to this package so it'd be awesome if any maintainer could give me some pointers.\n. @jacekkopecky \nAtom says this option will eventually go away, so we can't rely on that.\n. @jacekkopecky \nYou're right. I should have looked at the option more closely. Thanks!\n. Haven't written test yet. Would like to know if this is the right approach before I go too deep.\n. I'll be busy for a while. I guess I'll come back when I have time and start a new PR from scratch.\n. +1\n\nDisabling `whitespace` package doesn't help either. \nI'll dig into this later today. \nI'm fairly new to this package so it'd be awesome if any maintainer could give me some pointers.\n. @jacekkopecky \nAtom says this option will eventually go away, so we can't rely on that.\n. @jacekkopecky \nYou're right. I should have looked at the option more closely. Thanks!\n. Haven't written test yet. Would like to know if this is the right approach before I go too deep.\n. I'll be busy for a while. I guess I'll come back when I have time and start a new PR from scratch.\n. ",
    "spirityy": "+1\n. +1\n. ",
    "huanzhang": "+1\n. +1\n. ",
    "brandall10": "Any movement on this?  Coming from VIM to Atom recently, this is probably my #1 gripe.  I've trained myself to do a d$ for the last word as a workaround, but still muscle memory gets the best of me at times.\n. @dsandstrom \n\nYou are my hero.  Much appreciated.  \n. Any movement on this?  Coming from VIM to Atom recently, this is probably my #1 gripe.  I've trained myself to do a d$ for the last word as a workaround, but still muscle memory gets the best of me at times.\n. @dsandstrom \n\nYou are my hero.  Much appreciated.  \n. ",
    "sanbornm": ":+1: \n. :+1: \n. ",
    "cswartzvi": "Any progress on this? It can be supremely frustrating at times.  \n. :+1: I would love to see this.\n. Any progress on this? It can be supremely frustrating at times.  \n. :+1: I would love to see this.\n. ",
    "soloradish": "any update?\n. any update?\n. ",
    "thefron": "Is there any progress here? This still annoys me.\n. @Wiebelt vim-mode-plus works fine to me. Thank you for letting me know!\n. Is there any progress here? This still annoys me.\n. @Wiebelt vim-mode-plus works fine to me. Thank you for letting me know!\n. ",
    "Wiebelt": "@thefron This is fixed in [vim-mode-plus](https://github.com/t9md/atom-vim-mode-plus). See also [the reference](https://github.com/t9md/atom-vim-mode-plus/issues/150) above your comment. \n. @thefron This is fixed in [vim-mode-plus](https://github.com/t9md/atom-vim-mode-plus). See also [the reference](https://github.com/t9md/atom-vim-mode-plus/issues/150) above your comment. \n. ",
    "jayd3e": "This also annoys me, just to chime in.  Downloading vim-mode-plus.\n. This also annoys me, just to chime in.  Downloading vim-mode-plus.\n. ",
    "pbrianmackey": "I found further instructions in the [contributing.md](https://atom.io/docs/latest/contributing-to-packages.html).  I ran through the steps in the order listed and had no luck.  Then I ran:\n\n`apm develop vim-mode`\n\nAnd I got a second clone of the repository sent to a new location on my computer.  I switched to this new location and ran:\n\n`apm install vim-mode`\n\nthen\n\n`atom --dev` and loaded up the project.  Now I can make changes and reload them with `ctrl+alt+r`.  It's a little weird, but I guess that works for now.\n. I found further instructions in the [contributing.md](https://atom.io/docs/latest/contributing-to-packages.html).  I ran through the steps in the order listed and had no luck.  Then I ran:\n\n`apm develop vim-mode`\n\nAnd I got a second clone of the repository sent to a new location on my computer.  I switched to this new location and ran:\n\n`apm install vim-mode`\n\nthen\n\n`atom --dev` and loaded up the project.  Now I can make changes and reload them with `ctrl+alt+r`.  It's a little weird, but I guess that works for now.\n. ",
    "andyearnshaw": "I started writing the spec for it on the train home last night but didn't get very far, so feel free @jacekkopecky.  I don't have much free time and I haven't done any work on atom before, so you'd probably get it done quicker than me and that's what I'd prefer :smiley:.\n. I started writing the spec for it on the train home last night but didn't get very far, so feel free @jacekkopecky.  I don't have much free time and I haven't done any work on atom before, so you'd probably get it done quicker than me and that's what I'd prefer :smiley:.\n. ",
    "maletor": ":dollar: \n. :100: Thanks!\n. :dollar: \n. :100: Thanks!\n. ",
    "jazzpi": "What does your keybinding for `,t` look like?\nI have some keybindings starting with a `,` in command mode and didn't even need to add a `insert-incomplete-keybinding` for the `,` key to normally use it in insert mode.\n. I think this could be combined with #458 since that bascially highlights the last regular expression.\n. I'm not quite sure about this. Since <kbd>/</kbd> is closely related to <kbd>n</kbd>, <kbd>N</kbd>, <kbd>*</kbd> and <kbd>#</kbd>, those should then probably also be handled by ex-mode as well as potential highlighting...\nSee also #458 and #493.\nAs well as that, forcing users to install `ex-mode` as a whole just to be able to use <kbd>/</kbd> seems a bit overkill.\n. Sure, but a lot of people are apparently fine with vim-mode without ex-mode (vim-mode has about 40x as many downloads as ex-mode). See #50 about the reasoning behind splitting ex into a different package. Following that philosophy, I don't think putting <kbd>/</kbd> into ex-mode is a good idea, although it would simplify some things.\n. After thinking about this again, I noticed that `vim` doesn't only treat <kbd>/</kbd> like a motion, it treats _all_ `ex` commands like a motion.\n\nSo I vote to either \n- merge `ex-` and `vim-mode` or\n- expose motions via a service and put the link to `ex-mode` in a more prominent position. (Maybe have a popup message that tells you to install `ex-mode` when you press <kbd>:</kbd> in command mode?)\n. It does on Linux too, probably one of the compilation options starting with `mouse` enables that.\n\nBut the other reasons of course still stand.\n. It isn't really a problem, I knew it wasn't a guaranteed merge and honestly it was interesting reading into the codebase. I've also got a good idea about how to implement search highlighting, but no time to do so at the moment.\n\nTwo problems remain however: `ex-mode`s little exposure and the large duplicate codebase. For the exposure problem, the pop-up is the best I can come up with, does anyone else have ideas? The duplicate codebase is a bit tougher, it might be possible to expose parts via a service though.\n. FWIW this has been implemented in lloeki/ex-mode#160, so it isn't needed for ex-mode anymore.\n. Oh yes, it works after updating - I think I may have simply overlooked it :flushed: \n. A quick google search brought up a comment on [this article](http://belchak.com/2011/07/23/re-enabling-key-repeat-in-osx-lion/):\n\n> You can also disable this per app by replacing \"-g\" with the app's defaults identifier.\n\nNow I don't own a Mac and can't find the identifier for Atom - but in general, this is not an  issue with `vim-mode` at all - I'd recommend asking this question on [Atom Discussion](https://discuss.atom.io/) or [Apple.SX](http://apple.stackexchange.com/).\n. I just noticed this seems to apply to any operator with motions - for example, going to the beginning of the document and then pressing `G` to yank the entire document does that - and replace the document with `G`. This basically makes pane splits unusable.\n. I think this fixed itself when I upgraded Atom, I'm unable to reproduce this now.\n. Strange, it happens again for me now. I don't know why, but I'm pretty sure it worked for a while - maybe I just worked in the new pane everytime?\n. Alright, here's something interesting:\n- Open a new window\n- Enter\n\n```\nabc\ndef\nghi\n```\n\ninto the `untitled` file\n- Press `Ctrl-W V`, then `Ctrl-W H`\n- Go to the first line, press `dd`. File now looks like\n\n```\nddef\nghi\n```\n- Press `u`, then press `cc`, then `Esc`. File now looks like\n\n```\nabc\nc\nghi\n```\n- Press `u`, then delete a line. It now works correctly again.\n. This happens too when I disable all packages but vim-mode.\nIf I do this on a clean install with only vim-mode installed, it works however.\n. Alright, I can't reproduce this on a fresh install (although I could with everything in `init.coffee`, `config.cson` and `keymap.cson` commented out and all packages but Core and `vim-mode` disabled...).\n\nOn the fresh install, I notice a similar issue however - the following sequence inserts a `:` into the file :confused:\n\n<kbd>ctrl-w</kbd> <kbd>v</kbd> <kbd>ctrl-w</kbd> <kbd>h</kbd> <kbd>:</kbd>\n\nI can only test on Linux.\n. Same thing happens when replacing <kbd>:</kbd> with <kbd>q</kbd>\n\nLooks like unbound keys simply insert, even in command mode (when used with pane splits).\n. And another one: <kbd>c</kbd><kbd>w</kbd> replaces the word with `w`.\n. No, I'm not using vim-surround.\n\nIt seems kind of random what sequences trigger this behavior. I'll look into this when I'm done with #762\n. Alright, it looks like in the pane where this bug occurs,\n\n``` coffeescript\natom.views.getView(atom.workspace.getActiveEditor()).component.isInputEnabled\n```\n\nis `true` in command mode for some reason. (This is `@editorElement.component.isInputEnabled` in the `VimState`)\n. ... And entering and exiting insert mode makes everything work alright. Looks like `isInputEnabled` is set to `true` when splitting panes.\n. Yes, it should probably do nothing - and not open search.\n. I just encountered the same error after undoing an ex-mode `:s` with `u`.\n. This also occurs if undoing that with `Ctrl-Z`. Might be related to atom/atom#7124, atom/atom#6982 and atom/atom#6757.\nI'll open an issue on ex-mode since it seems like that's the issue here.\n. This error still occurs when undoing an `ex-mode` `:s`, but that should be fixed when lloeki/ex-mode#59 gets merged. I don't know how @NixusCN encountered this error, but it looks like it happened after undoing a `:s` too.\n. It looks like you're using a non-US keyboard layout. Those do not play nicely with `vim-mode` (or Atom in general) unless you use the [keyboard localization](https://atom.io/packages/keyboard-localization) package.\n<kbd>Shift-7</kbd> gets registered as <kbd>&</kbd> since that's what it represents on a US keyboard layout.\n. This is a [bug in Chromium/Blink](https://code.google.com/p/chromium/issues/detail?id=263724), so unless you want to fix that, your best shot would be to use the keyboard-localization package I mentioned.\n. ex-mode should now work with vim-mode-plus, but I don't have the time to test extensively (and also not a lot of motivation... See lloeki/ex-mode#174). I'm not sure if a discussion on ex-mode is really on-topic in vim-mode though.. Yes, this should be handled by `ex-mode`. `vim-mode` doesn't provide full `vim`-support, only parts. And all `ex` commands (i.e. commands starting with `:`) are handled by `ex-mode`.\n. If you have the package installed and activated, you are by default in a `vim`-like command mode.\n. /cc @lloeki \n. Alright, this should be finished, finally :smile:  \n. Thanks for helping out :smile:\n\nWhat you'll want to do is opening a terminal and executing these commands:\n\n``` bash\ngit clone https://github.com/jazzpi/vim-mode\ncd vim-mode\ngit checkout ex-mode\napm link -d\n```\n\nThis will download the code, check out into the feature branch and then create a symlink in your dev packages so that when you start Atom in development mode (`atom -d`), it will use this version instead of the version published to atom.io\n\nIf you have the `ex-mode` package installed, you'll also want to disable that. After you're done testing, go to the directory where you downloaded the code to and execute `apm unlink -d` to remove  the symlink.\n. Try running `apm install .` in the `vim-mode` directory.\n\nAlso, did the `git checkout` run without errors? I just realized the command should be `git checkout origin/ex-mode` :flushed:\n. This isn't going to get merged, see https://github.com/atom/vim-mode/issues/596#issuecomment-125678155 for the reasons.\n. The `.vimrc` is written in vimscript, so reading that file would require being able to parse Vimscript, i.e. a fully-featured [ex-mode](https://github.com/lloeki/ex-mode). IdeaVIM [also has this issue](https://youtrack.jetbrains.com/issue/VIM-669), but it's probably possible to do a similar implementation (i.e. parse `map` through pattern matching). Still, some things simply work differently in vim and Atom though, so things like recursive mappings would probably be difficult to implement.\n. 1) If you're looking for that, check out https://github.com/carlosdcastillo/vim-mode\r\n2) That won't happen in this package since it's dead.. Also just popped up for me, but I think it's a core issue (atom/atom#9918)\n. @dsifford No, it doesn't do that sadly. This PR simply adds highlights to all results when vim-mode searches, but it only searches when you press <kbd>/</kbd>, <kbd>?</kbd>, <kbd>*</kbd> or <kbd>#</kbd>.\n. Looks like #657... Does it happen with those steps?\n. What does your keybinding for `,t` look like?\nI have some keybindings starting with a `,` in command mode and didn't even need to add a `insert-incomplete-keybinding` for the `,` key to normally use it in insert mode.\n. I think this could be combined with #458 since that bascially highlights the last regular expression.\n. I'm not quite sure about this. Since <kbd>/</kbd> is closely related to <kbd>n</kbd>, <kbd>N</kbd>, <kbd>*</kbd> and <kbd>#</kbd>, those should then probably also be handled by ex-mode as well as potential highlighting...\nSee also #458 and #493.\nAs well as that, forcing users to install `ex-mode` as a whole just to be able to use <kbd>/</kbd> seems a bit overkill.\n. Sure, but a lot of people are apparently fine with vim-mode without ex-mode (vim-mode has about 40x as many downloads as ex-mode). See #50 about the reasoning behind splitting ex into a different package. Following that philosophy, I don't think putting <kbd>/</kbd> into ex-mode is a good idea, although it would simplify some things.\n. After thinking about this again, I noticed that `vim` doesn't only treat <kbd>/</kbd> like a motion, it treats _all_ `ex` commands like a motion.\n\nSo I vote to either \n- merge `ex-` and `vim-mode` or\n- expose motions via a service and put the link to `ex-mode` in a more prominent position. (Maybe have a popup message that tells you to install `ex-mode` when you press <kbd>:</kbd> in command mode?)\n. It does on Linux too, probably one of the compilation options starting with `mouse` enables that.\n\nBut the other reasons of course still stand.\n. It isn't really a problem, I knew it wasn't a guaranteed merge and honestly it was interesting reading into the codebase. I've also got a good idea about how to implement search highlighting, but no time to do so at the moment.\n\nTwo problems remain however: `ex-mode`s little exposure and the large duplicate codebase. For the exposure problem, the pop-up is the best I can come up with, does anyone else have ideas? The duplicate codebase is a bit tougher, it might be possible to expose parts via a service though.\n. FWIW this has been implemented in lloeki/ex-mode#160, so it isn't needed for ex-mode anymore.\n. Oh yes, it works after updating - I think I may have simply overlooked it :flushed: \n. A quick google search brought up a comment on [this article](http://belchak.com/2011/07/23/re-enabling-key-repeat-in-osx-lion/):\n\n> You can also disable this per app by replacing \"-g\" with the app's defaults identifier.\n\nNow I don't own a Mac and can't find the identifier for Atom - but in general, this is not an  issue with `vim-mode` at all - I'd recommend asking this question on [Atom Discussion](https://discuss.atom.io/) or [Apple.SX](http://apple.stackexchange.com/).\n. I just noticed this seems to apply to any operator with motions - for example, going to the beginning of the document and then pressing `G` to yank the entire document does that - and replace the document with `G`. This basically makes pane splits unusable.\n. I think this fixed itself when I upgraded Atom, I'm unable to reproduce this now.\n. Strange, it happens again for me now. I don't know why, but I'm pretty sure it worked for a while - maybe I just worked in the new pane everytime?\n. Alright, here's something interesting:\n- Open a new window\n- Enter\n\n```\nabc\ndef\nghi\n```\n\ninto the `untitled` file\n- Press `Ctrl-W V`, then `Ctrl-W H`\n- Go to the first line, press `dd`. File now looks like\n\n```\nddef\nghi\n```\n- Press `u`, then press `cc`, then `Esc`. File now looks like\n\n```\nabc\nc\nghi\n```\n- Press `u`, then delete a line. It now works correctly again.\n. This happens too when I disable all packages but vim-mode.\nIf I do this on a clean install with only vim-mode installed, it works however.\n. Alright, I can't reproduce this on a fresh install (although I could with everything in `init.coffee`, `config.cson` and `keymap.cson` commented out and all packages but Core and `vim-mode` disabled...).\n\nOn the fresh install, I notice a similar issue however - the following sequence inserts a `:` into the file :confused:\n\n<kbd>ctrl-w</kbd> <kbd>v</kbd> <kbd>ctrl-w</kbd> <kbd>h</kbd> <kbd>:</kbd>\n\nI can only test on Linux.\n. Same thing happens when replacing <kbd>:</kbd> with <kbd>q</kbd>\n\nLooks like unbound keys simply insert, even in command mode (when used with pane splits).\n. And another one: <kbd>c</kbd><kbd>w</kbd> replaces the word with `w`.\n. No, I'm not using vim-surround.\n\nIt seems kind of random what sequences trigger this behavior. I'll look into this when I'm done with #762\n. Alright, it looks like in the pane where this bug occurs,\n\n``` coffeescript\natom.views.getView(atom.workspace.getActiveEditor()).component.isInputEnabled\n```\n\nis `true` in command mode for some reason. (This is `@editorElement.component.isInputEnabled` in the `VimState`)\n. ... And entering and exiting insert mode makes everything work alright. Looks like `isInputEnabled` is set to `true` when splitting panes.\n. Yes, it should probably do nothing - and not open search.\n. I just encountered the same error after undoing an ex-mode `:s` with `u`.\n. This also occurs if undoing that with `Ctrl-Z`. Might be related to atom/atom#7124, atom/atom#6982 and atom/atom#6757.\nI'll open an issue on ex-mode since it seems like that's the issue here.\n. This error still occurs when undoing an `ex-mode` `:s`, but that should be fixed when lloeki/ex-mode#59 gets merged. I don't know how @NixusCN encountered this error, but it looks like it happened after undoing a `:s` too.\n. It looks like you're using a non-US keyboard layout. Those do not play nicely with `vim-mode` (or Atom in general) unless you use the [keyboard localization](https://atom.io/packages/keyboard-localization) package.\n<kbd>Shift-7</kbd> gets registered as <kbd>&</kbd> since that's what it represents on a US keyboard layout.\n. This is a [bug in Chromium/Blink](https://code.google.com/p/chromium/issues/detail?id=263724), so unless you want to fix that, your best shot would be to use the keyboard-localization package I mentioned.\n. ex-mode should now work with vim-mode-plus, but I don't have the time to test extensively (and also not a lot of motivation... See lloeki/ex-mode#174). I'm not sure if a discussion on ex-mode is really on-topic in vim-mode though.. Yes, this should be handled by `ex-mode`. `vim-mode` doesn't provide full `vim`-support, only parts. And all `ex` commands (i.e. commands starting with `:`) are handled by `ex-mode`.\n. If you have the package installed and activated, you are by default in a `vim`-like command mode.\n. /cc @lloeki \n. Alright, this should be finished, finally :smile:  \n. Thanks for helping out :smile:\n\nWhat you'll want to do is opening a terminal and executing these commands:\n\n``` bash\ngit clone https://github.com/jazzpi/vim-mode\ncd vim-mode\ngit checkout ex-mode\napm link -d\n```\n\nThis will download the code, check out into the feature branch and then create a symlink in your dev packages so that when you start Atom in development mode (`atom -d`), it will use this version instead of the version published to atom.io\n\nIf you have the `ex-mode` package installed, you'll also want to disable that. After you're done testing, go to the directory where you downloaded the code to and execute `apm unlink -d` to remove  the symlink.\n. Try running `apm install .` in the `vim-mode` directory.\n\nAlso, did the `git checkout` run without errors? I just realized the command should be `git checkout origin/ex-mode` :flushed:\n. This isn't going to get merged, see https://github.com/atom/vim-mode/issues/596#issuecomment-125678155 for the reasons.\n. The `.vimrc` is written in vimscript, so reading that file would require being able to parse Vimscript, i.e. a fully-featured [ex-mode](https://github.com/lloeki/ex-mode). IdeaVIM [also has this issue](https://youtrack.jetbrains.com/issue/VIM-669), but it's probably possible to do a similar implementation (i.e. parse `map` through pattern matching). Still, some things simply work differently in vim and Atom though, so things like recursive mappings would probably be difficult to implement.\n. 1) If you're looking for that, check out https://github.com/carlosdcastillo/vim-mode\r\n2) That won't happen in this package since it's dead.. Also just popped up for me, but I think it's a core issue (atom/atom#9918)\n. @dsifford No, it doesn't do that sadly. This PR simply adds highlights to all results when vim-mode searches, but it only searches when you press <kbd>/</kbd>, <kbd>?</kbd>, <kbd>*</kbd> or <kbd>#</kbd>.\n. Looks like #657... Does it happen with those steps?\n. ",
    "jlevers": "Sorry, this was solved [here](https://discuss.atom.io/t/only-allowing-keybind-to-be-triggered-when-in-command-mode-vim-mode/15496). The solution was to put this in my `keybind.cson`:\n\n``` javascript\n'atom-text-editor.vim-mode:not(.insert-mode), .tree-view':\n  ', t': 'tree-view:toggle'\n```\n. If I'm understanding what you're looking for correctly, you want to be able to move around the file tree in the same manner that you do in NERDTree? If so, I have that most of the way working. Once the tree is open and focussed, you can use `hjkl` and `Enter` to navigate the pane.\n\nI bound `,t` to both toggle and focus the file tree pane, which works to do those two things, but creates another, seemingly unrelated issue ( #572 ). I think that if you used a different keybind, you could use the tree pane pretty much as if it was NERDTree.\n. Ah, yes, I haven't tried searching in the tree pane, so I didn't think to say that that didn't work. I'm not sure what you consider switching easily, but for me it's just a matter of doing `,t` to switch between tree and main window.\n. @pencilcheck: you can use `Ctrl-0` to focus the tree pane, so if you rebind that to something you like, you should be able to change the focus easily.\n. Sorry, this was solved [here](https://discuss.atom.io/t/only-allowing-keybind-to-be-triggered-when-in-command-mode-vim-mode/15496). The solution was to put this in my `keybind.cson`:\n\n``` javascript\n'atom-text-editor.vim-mode:not(.insert-mode), .tree-view':\n  ', t': 'tree-view:toggle'\n```\n. If I'm understanding what you're looking for correctly, you want to be able to move around the file tree in the same manner that you do in NERDTree? If so, I have that most of the way working. Once the tree is open and focussed, you can use `hjkl` and `Enter` to navigate the pane.\n\nI bound `,t` to both toggle and focus the file tree pane, which works to do those two things, but creates another, seemingly unrelated issue ( #572 ). I think that if you used a different keybind, you could use the tree pane pretty much as if it was NERDTree.\n. Ah, yes, I haven't tried searching in the tree pane, so I didn't think to say that that didn't work. I'm not sure what you consider switching easily, but for me it's just a matter of doing `,t` to switch between tree and main window.\n. @pencilcheck: you can use `Ctrl-0` to focus the tree pane, so if you rebind that to something you like, you should be able to change the focus easily.\n. ",
    "wvengen": "I don't think I'm able to give a good code-review, but thanks for starting this! :+1:\n. Safe mode doesn't show this behaviour (and vim-mode is absent). In normal mode, it happens with any file I've encountered.\n. I can confirm that it is fixed with 1.0.14. Thanks for fixing this!\n. I don't think I'm able to give a good code-review, but thanks for starting this! :+1:\n. Safe mode doesn't show this behaviour (and vim-mode is absent). In normal mode, it happens with any file I've encountered.\n. I can confirm that it is fixed with 1.0.14. Thanks for fixing this!\n. ",
    "antoine1fr": "You can close it of course ! :)\n. You can close it of course ! :)\n. ",
    "lettertwo": "I'd love to see this, too! I think the current stance is that it won't happen via this package, though (see #131).\n. I'd love to see this, too! I think the current stance is that it won't happen via this package, though (see #131).\n. ",
    "h12w": "+1\n. +1\n. ",
    "scottmessinger": "I can confirm.\n. I can confirm.\n. ",
    "Zaba999": ":+1: \n. Additional info is that it's connected with line endings as on file with Windows style line endings it works properly.\n. :+1: \n. Additional info is that it's connected with line endings as on file with Windows style line endings it works properly.\n. ",
    "integrii": "Found this in the vim-mode-plus settings!  Makes sense from CLI but not in a desktop window environment.. Found this in the vim-mode-plus settings!  Makes sense from CLI but not in a desktop window environment.. ",
    "airstrike": "```\nCannot find module 'event-kit'\nHide Stack Trace\nError: Cannot find module 'event-kit'\n    at Module._resolveFilename (module.js:334:15)\n    at Function.Module._resolveFilename (C:\\Users\\Andr\u00e9\\AppData\\Local\\atom\\app-1.0.15\\resources\\app.asar\\src\\module-cache.js:383:52)\n    at Function.Module._load (module.js:284:25)\n    at Module.require (module.js:363:17)\n    at require (module.js:382:17)\n    at Object.<anonymous> (C:\\Users\\Andr\u00e9\\.atom\\packages\\vim-mode\\lib\\vim-mode.coffee:1:37)\n    at Object.<anonymous> (C:\\Users\\Andr\u00e9\\.atom\\packages\\vim-mode\\lib\\vim-mode.coffee:1:1)\n    at Module._compile (module.js:428:26)\n    at Object.defineProperty.value [as .coffee] (C:\\Users\\Andr\u00e9\\AppData\\Local\\atom\\app-1.0.15\\resources\\app.asar\\src\\compile-cache.js:169:21)\n    at Module.load (module.js:353:32)\n```\n. ```\nCannot find module 'event-kit'\nHide Stack Trace\nError: Cannot find module 'event-kit'\n    at Module._resolveFilename (module.js:334:15)\n    at Function.Module._resolveFilename (C:\\Users\\Andr\u00e9\\AppData\\Local\\atom\\app-1.0.15\\resources\\app.asar\\src\\module-cache.js:383:52)\n    at Function.Module._load (module.js:284:25)\n    at Module.require (module.js:363:17)\n    at require (module.js:382:17)\n    at Object.<anonymous> (C:\\Users\\Andr\u00e9\\.atom\\packages\\vim-mode\\lib\\vim-mode.coffee:1:37)\n    at Object.<anonymous> (C:\\Users\\Andr\u00e9\\.atom\\packages\\vim-mode\\lib\\vim-mode.coffee:1:1)\n    at Module._compile (module.js:428:26)\n    at Object.defineProperty.value [as .coffee] (C:\\Users\\Andr\u00e9\\AppData\\Local\\atom\\app-1.0.15\\resources\\app.asar\\src\\compile-cache.js:169:21)\n    at Module.load (module.js:353:32)\n```\n. ",
    "lmartins": "Yeah, it would be nice to have something similar to Vim's [Powerline](https://github.com/powerline/powerline)\n\nBut that being said your suggestion helps too. Thanks.\n\n![screen shot 2015-03-19 at 09 26 08](https://cloud.githubusercontent.com/assets/151981/6727466/076abc30-ce1a-11e4-84d2-43d35477efd6.png)\n. Hi, Im running the latest versions for Atom and vim-mode and still getting this error. Anything else I can do?\n. @bronson Scott, thank you for your feedback on this. \n\nIn Vim I had the following mappings:\n\n```\n\" ChangeInside\nnnoremap <silent> <Leader>c :ChangeInsideSurrounding<CR>\nnnoremap <silent> <Leader>C :ChangeAroundSurrounding<CR>\n```\n\nThis is calling a function that I assume will work for any surroundings (single quote, quotes, brackets, etc).\n\nI was looking for a easier way to trigger the change inside quotes and/or single quotes with the same shortcut. Is this possible?\n\nThe other use case was what you already described to @fullofcaffeine , thanks :)\n. Thank for your feedback on this. Closing now.\n. Thanks @willopez that helped.\n. Hey Michael, I've spent a long time trying to move from Atom to Vim just for things like this. Im glad Atom Vim support is improving as I believe that merging Vim features with a modern UI like Atom is the way forward. \n\nMany thanks for your comments and useful resources. Cheers ;)\n. Yeah, it would be nice to have something similar to Vim's [Powerline](https://github.com/powerline/powerline)\n\nBut that being said your suggestion helps too. Thanks.\n\n![screen shot 2015-03-19 at 09 26 08](https://cloud.githubusercontent.com/assets/151981/6727466/076abc30-ce1a-11e4-84d2-43d35477efd6.png)\n. Hi, Im running the latest versions for Atom and vim-mode and still getting this error. Anything else I can do?\n. @bronson Scott, thank you for your feedback on this. \n\nIn Vim I had the following mappings:\n\n```\n\" ChangeInside\nnnoremap <silent> <Leader>c :ChangeInsideSurrounding<CR>\nnnoremap <silent> <Leader>C :ChangeAroundSurrounding<CR>\n```\n\nThis is calling a function that I assume will work for any surroundings (single quote, quotes, brackets, etc).\n\nI was looking for a easier way to trigger the change inside quotes and/or single quotes with the same shortcut. Is this possible?\n\nThe other use case was what you already described to @fullofcaffeine , thanks :)\n. Thank for your feedback on this. Closing now.\n. Thanks @willopez that helped.\n. Hey Michael, I've spent a long time trying to move from Atom to Vim just for things like this. Im glad Atom Vim support is improving as I believe that merging Vim features with a modern UI like Atom is the way forward. \n\nMany thanks for your comments and useful resources. Cheers ;)\n. ",
    "daniloisr": "nice! :+1: \n. I'm woking with it, and my idea is to switch the C-d behaviour from a `Scroll` subclass to a `MoveToLine` subclass. I write a sketch for it and apparently it's working https://github.com/daniloisr/vim-mode/commit/544f5dbd8e0e86d9fd0097a830624aebbb6ca88e.\n\nWhat do you guys think? Can I continue with this approach?\nThx\n. @maxbrunsfeld Nice! I will prepare a PR for both issues soon. Thx\n. @bronson I think it be closed\n. It's similar to this issue https://github.com/atom/vim-mode/issues/593\n. @jacekkopecky you are right friend, sorry about that, I have used ctrl-d and ctrl-u for a long time thinking that they are motions, but I read the docs right now and saw that they are scrolls.\n\nI could try to fix they as scrolls, but for now, what you think about I letting this PR only for ctrl-f and ctrl-b fix?\n. Ops, ctrl-f and ctrl-b are scroll too, :/\n\nI already started working on that, soon I will fix this PR\n. @jacekkopecky I have changed the code and added visual selection to `Scroll` class*, and before I move to `ctrl-f` and `ctrl-b` implementation I would like to know your opinion, did you think that this way is correct?\n\n\\* I used the `select` method from `Motion` class, so maybe its better to join these codes... I'm studying it now\n. Finished this PR.\n\nI think that after this PR I will work on other related problems like keeping selection when scrolling the whole screen with `ctrl-y`, because today we lose the selection.\n. Hi @maxbrunsfeld. My first approach was to create a `Motion` subclass, but these commands also scrolls the screen (like @jacekkopecky said) and we have the [`Scroll` class that defines some useful stuffs like `@scrolloff` and `@rows`](https://github.com/atom/vim-mode/blob/master/lib/scroll.coffee#L5), so if I create a `Motion` subclass I will need them too.\n\nI was thinking a lot about it, and my solution was extract the selection logic to a mixin because I think that `Motion` classes can use this mixin later (I can implement it next).\n\nDo you think that implementing a `Motion` subclasse still a better solution? :sweat_smile: \n. @maxbrunsfeld sorry, I deleted the branch =P. But dont worry, the solution was almost like [the class `MoveToBottomOfScreen`](MoveToBottomOfScreen), I just did the right math, when @jacekkopecky commented I had not implemented the scrolling yet.\n\nI liked your idea, soon I can write a new code doing the scroll in a `Motion` subclass. What you think?\n. @maxbrunsfeld done! Later I will try to improve the way the selection is made, I have some felling that it may be simpler.\n\nThe build has failed due module download problem, I tried to rerun the build but I dont know how.\n. @maxbrunsfeld I think it's ok now o/\n. @maxbrunsfeld thats it, thx for the review =)\n. I have already fixed this, it's on this PR https://github.com/atom/vim-mode/pull/616 :smiley: \n. @bronson yeah, there are still some stuffs missing, but I think that will be better if someone open a new issue for this, and close this one.\n. There is already a PR for it https://github.com/atom/vim-mode/pull/630 =)\n. Hi @lehresman, you can install https://atom.io/packages/ex-mode to have the `\":\"` command mode. :smile: \n. nice! :+1: \n. I'm woking with it, and my idea is to switch the C-d behaviour from a `Scroll` subclass to a `MoveToLine` subclass. I write a sketch for it and apparently it's working https://github.com/daniloisr/vim-mode/commit/544f5dbd8e0e86d9fd0097a830624aebbb6ca88e.\n\nWhat do you guys think? Can I continue with this approach?\nThx\n. @maxbrunsfeld Nice! I will prepare a PR for both issues soon. Thx\n. @bronson I think it be closed\n. It's similar to this issue https://github.com/atom/vim-mode/issues/593\n. @jacekkopecky you are right friend, sorry about that, I have used ctrl-d and ctrl-u for a long time thinking that they are motions, but I read the docs right now and saw that they are scrolls.\n\nI could try to fix they as scrolls, but for now, what you think about I letting this PR only for ctrl-f and ctrl-b fix?\n. Ops, ctrl-f and ctrl-b are scroll too, :/\n\nI already started working on that, soon I will fix this PR\n. @jacekkopecky I have changed the code and added visual selection to `Scroll` class*, and before I move to `ctrl-f` and `ctrl-b` implementation I would like to know your opinion, did you think that this way is correct?\n\n\\* I used the `select` method from `Motion` class, so maybe its better to join these codes... I'm studying it now\n. Finished this PR.\n\nI think that after this PR I will work on other related problems like keeping selection when scrolling the whole screen with `ctrl-y`, because today we lose the selection.\n. Hi @maxbrunsfeld. My first approach was to create a `Motion` subclass, but these commands also scrolls the screen (like @jacekkopecky said) and we have the [`Scroll` class that defines some useful stuffs like `@scrolloff` and `@rows`](https://github.com/atom/vim-mode/blob/master/lib/scroll.coffee#L5), so if I create a `Motion` subclass I will need them too.\n\nI was thinking a lot about it, and my solution was extract the selection logic to a mixin because I think that `Motion` classes can use this mixin later (I can implement it next).\n\nDo you think that implementing a `Motion` subclasse still a better solution? :sweat_smile: \n. @maxbrunsfeld sorry, I deleted the branch =P. But dont worry, the solution was almost like [the class `MoveToBottomOfScreen`](MoveToBottomOfScreen), I just did the right math, when @jacekkopecky commented I had not implemented the scrolling yet.\n\nI liked your idea, soon I can write a new code doing the scroll in a `Motion` subclass. What you think?\n. @maxbrunsfeld done! Later I will try to improve the way the selection is made, I have some felling that it may be simpler.\n\nThe build has failed due module download problem, I tried to rerun the build but I dont know how.\n. @maxbrunsfeld I think it's ok now o/\n. @maxbrunsfeld thats it, thx for the review =)\n. I have already fixed this, it's on this PR https://github.com/atom/vim-mode/pull/616 :smiley: \n. @bronson yeah, there are still some stuffs missing, but I think that will be better if someone open a new issue for this, and close this one.\n. There is already a PR for it https://github.com/atom/vim-mode/pull/630 =)\n. Hi @lehresman, you can install https://atom.io/packages/ex-mode to have the `\":\"` command mode. :smile: \n. ",
    "dimpase": "Historically, vi(m) is an add-on of ex, and as such it's only logical that ex-mode and vim-mode should be basically one mode. Vim-mode without ex-mode feels rather feature-poor for any advanced vi(m) user.\n. arguments in #50 are just childish; after 20+ years of using vi(m) I don't want to waste time learning yet another way to do complicated things like formatting paragraphs and complicated regex-based replacements, really, and surely I'm not alone.\n\nAnd measuring success by number of downloads makes little sense, either. You know, pr0n downloads surely beat Atom downloads by many orders of magnitude. ;-)\n. I might be saying obvious, but ex language is something that should be trivial to tackle using modern compilation techniques, however esoteric it, as a language, might look to you. \n. Historically, vi(m) is an add-on of ex, and as such it's only logical that ex-mode and vim-mode should be basically one mode. Vim-mode without ex-mode feels rather feature-poor for any advanced vi(m) user.\n. arguments in #50 are just childish; after 20+ years of using vi(m) I don't want to waste time learning yet another way to do complicated things like formatting paragraphs and complicated regex-based replacements, really, and surely I'm not alone.\n\nAnd measuring success by number of downloads makes little sense, either. You know, pr0n downloads surely beat Atom downloads by many orders of magnitude. ;-)\n. I might be saying obvious, but ex language is something that should be trivial to tackle using modern compilation techniques, however esoteric it, as a language, might look to you. \n. ",
    "l4u": "Thanks! it works!\n. Thanks! it works!\n. ",
    "chanshing": "@jacekkopecky How to change it so that it works for vim-mode-plus?\r\n\r\n. @jacekkopecky How to change it so that it works for vim-mode-plus?\r\n\r\n. ",
    "myrtleTree33": "Hmm seem to be getting that as well.\n\n`cc` should trigger identation + insert mode, however it just clears the line, goes into insert mode and does not indent at all.\n. `dd0` does not work for me correctly.\n. Hmm seem to be getting that as well.\n\n`cc` should trigger identation + insert mode, however it just clears the line, goes into insert mode and does not indent at all.\n. `dd0` does not work for me correctly.\n. ",
    "drifkin": "`cc` is clearing the line without properly indenting for me as well. However `ddO` does work as I'd expect `cc` to. @myrtleTree33 keep in mind the third character is the capital letter `O`, not the digit `0`.\n. @benmccormick thanks for fixing the first issue!\n\nI keep getting bitten by the issue described by @tony612 here: https://github.com/atom/vim-mode/issues/868#issuecomment-151733960\n\nIt looks like the atom issue is a bit stalled right now, maybe a horrific hacky workaround is okay in the meantime? @maxbrunsfeld I can open a new issue if that'd help with tracking.\n. `cc` is clearing the line without properly indenting for me as well. However `ddO` does work as I'd expect `cc` to. @myrtleTree33 keep in mind the third character is the capital letter `O`, not the digit `0`.\n. @benmccormick thanks for fixing the first issue!\n\nI keep getting bitten by the issue described by @tony612 here: https://github.com/atom/vim-mode/issues/868#issuecomment-151733960\n\nIt looks like the atom issue is a bit stalled right now, maybe a horrific hacky workaround is okay in the meantime? @maxbrunsfeld I can open a new issue if that'd help with tracking.\n. ",
    "jaemyoun": "Yes, only inserting Korean.\n. Yes, only inserting Korean.\n. ",
    "hitsmaxft": "@maxbrunsfeld  I have done rebase and migrate class `Motions` as either.\n. @maxbrunsfeld  I have done rebase and migrate class `Motions` as either.\n. ",
    "LukeMauldin": "Receive same error even if I just do a normal search using `/texthere`\n. Receive same error even if I just do a normal search using `/texthere`\n. ",
    "FXuZ": "Similarly `TextEditor.getFirstVisibleScreenRow` is also deprecated. The warning given by atom is as following:\n\nThis is now a view method. Call `TextEditorElement::getFirstVisibleScreenRow` instead.\n\n```\nTextEditor.getFirstVisibleScreenRow (/usr/local/share/atom/resources/app.asar/src/text-editor.js:2613:9)\nScrollHalfScreenDown.Scroll (/home/gfrank/.atom/packages/vim-mode/lib/scroll.coffee:7:21)\n```\n. Similarly `TextEditor.getFirstVisibleScreenRow` is also deprecated. The warning given by atom is as following:\n\nThis is now a view method. Call `TextEditorElement::getFirstVisibleScreenRow` instead.\n\n```\nTextEditor.getFirstVisibleScreenRow (/usr/local/share/atom/resources/app.asar/src/text-editor.js:2613:9)\nScrollHalfScreenDown.Scroll (/home/gfrank/.atom/packages/vim-mode/lib/scroll.coffee:7:21)\n```\n. ",
    "lehresman": "Wow, perfect!  That's much better than my solution.  Thanks for the tip!\n\nThis PR can probably be closed since it's irrelevant. \n. Wow, perfect!  That's much better than my solution.  Thanks for the tip!\n\nThis PR can probably be closed since it's irrelevant. \n. ",
    "vito": "omg\n\n:heart_eyes: \n. omg\n\n:heart_eyes: \n. ",
    "davejacobs": "Yes! (Why? Because macros.)\n. Ah interesting - I'll have to try it out\n. Yes! (Why? Because macros.)\n. Ah interesting - I'll have to try it out\n. ",
    "speric": "Thanks!\n. Thanks!\n. ",
    "reneklacan": "I probably had a very old version... my bad ;)\n. I probably had a very old version... my bad ;)\n. ",
    "djpowers": "Just encountered this error myself:\n\n[Enter steps to reproduce below:]\n1. I was using the \"Reveal Active File\" keyboard shortcut, but I'm not sure that that had anything to do with it. I didn't notice if it actually selected the file in the tree view when I noticed the error message.\n\n**Atom Version**: 0.194.0\n**System**: Mac OS X 10.10.3\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.45.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/dpowers/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n  at Error (native)\n  at /Users/dpowers/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n  at Emitter.module.exports.Emitter.emit (/Users/dpowers/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n  at VimState.module.exports.VimState.pushOperations (/Users/dpowers/.atom/packages/vim-mode/lib/vim-state.coffee:207:18)\n  at atom-text-editor.commands.(anonymous function) (/Users/dpowers/.atom/packages/vim-mode/lib/vim-state.coffee:190:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:238:29)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:519:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:354:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:178:20)\n\n```\n\n### Commands\n\n```\n     -9:27 core:copy (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n  4x -9:25.6.0 blur (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:08.4.0 tree-view:reveal-active-file (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:08.4.0 blur (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:07.7.0 tree-view:open-selected-entry (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n  2x -0:07.7.0 blur (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:06.5.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:04.5.0 tree-view:toggle-focus (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:04.5.0 blur (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:04.0 tree-view:reveal-active-file (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:03.5.0 core:move-down (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:03.2.0 core:move-up (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:02.7.0 tree-view:open-selected-entry (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n  2x -0:02.7.0 blur (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:01.3.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n  3x -0:01.3.0 blur (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"whitespace\",\n      \"linter-scss-lint\"\n    ]\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nautocomplete-plus, v2.12.1\ncolor-picker, v1.7.0\nlinter, v0.12.1\nlinter-coffeelint, v0.2.1\nlinter-erb, v0.1.0\nlinter-jshint, v0.1.2\nlinter-ruby, v0.1.4\nminimap, v4.8.0\nvim-mode, v0.45.0\n\n# Dev\nNo dev packages\n```\n. Just encountered this error myself:\n\n[Enter steps to reproduce below:]\n1. I was using the \"Reveal Active File\" keyboard shortcut, but I'm not sure that that had anything to do with it. I didn't notice if it actually selected the file in the tree view when I noticed the error message.\n\n**Atom Version**: 0.194.0\n**System**: Mac OS X 10.10.3\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.45.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/dpowers/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n  at Error (native)\n  at /Users/dpowers/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n  at Emitter.module.exports.Emitter.emit (/Users/dpowers/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n  at VimState.module.exports.VimState.pushOperations (/Users/dpowers/.atom/packages/vim-mode/lib/vim-state.coffee:207:18)\n  at atom-text-editor.commands.(anonymous function) (/Users/dpowers/.atom/packages/vim-mode/lib/vim-state.coffee:190:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:238:29)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:519:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:354:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:178:20)\n\n```\n\n### Commands\n\n```\n     -9:27 core:copy (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n  4x -9:25.6.0 blur (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:08.4.0 tree-view:reveal-active-file (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:08.4.0 blur (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:07.7.0 tree-view:open-selected-entry (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n  2x -0:07.7.0 blur (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:06.5.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:04.5.0 tree-view:toggle-focus (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:04.5.0 blur (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n     -0:04.0 tree-view:reveal-active-file (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:03.5.0 core:move-down (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:03.2.0 core:move-up (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:02.7.0 tree-view:open-selected-entry (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n  2x -0:02.7.0 blur (ol.tree-view.full-menu.list-tree.has-collapsable-children.focusable-panel)\n     -0:01.3.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n  3x -0:01.3.0 blur (atom-text-editor.editor.vim-mode.is-focused.command-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"whitespace\",\n      \"linter-scss-lint\"\n    ]\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nautocomplete-plus, v2.12.1\ncolor-picker, v1.7.0\nlinter, v0.12.1\nlinter-coffeelint, v0.2.1\nlinter-erb, v0.1.0\nlinter-jshint, v0.1.2\nlinter-ruby, v0.1.4\nminimap, v4.8.0\nvim-mode, v0.45.0\n\n# Dev\nNo dev packages\n```\n. ",
    "chrislovecnm": "Any work arounds for this?  Quite annoying :(. Any work arounds for this?  Quite annoying :(. ",
    "50Wliu": "@chrislovecnm this package has been deprecated.  I would recommend uninstalling this and installing the excellent [vim-mode-plus](https://atom.io/packages/vim-mode-plus) package instead.. This package is deprecated.  I would suggest looking at vim-mode-plus instead.. Hi @AnuchitPrasertsang, what Atom version is this?\n. Just a heads-up: this package has been deprecated.  I would recommend installing vim-mode-plus instead.. At the risk of drifting slightly off-topic, have you found https://atom.io/packages/vim-mode-plus-ex-mode?    It looks like it offers some ex mode support.. > Pull request #1092 catches the exception.\r\n\r\nI've looked at this PR and it doesn't look mergeable.  All it does is silently absorb the exception rather than fixing the root cause.\r\n\r\n> in the meantime, could we find a way to keep this repo at least somewhat healthy? Who's on point for keeping this repo working?\r\n\r\nIt was deprecated because we, the Atom team, realized that we were unable to dedicate enough time to maintaining this repository.  Rather than let it languish, we decided to deprecate it so that people could move to alternatives or fork it and improve on it.  Before deprecation, @maxbrunsfeld was mostly the sole maintainer.\r\n\r\n> From an implementation point-of-view, what would it take to bring real ex-mode to vim-mode-plus?\r\n\r\nI am unable to answer this, having no previous experience with Vim, `vim-mode`, or `vim-mode-plus`.  In fact, my only contributions to this repository were to make the deprecation notice more prominent when viewing the package.. I am :+1: on adding a notification.  However, we should probably only notify occasionally (maybe once per week?) so as to not annoy people :grinning:.. > I'm not sure why the travis build errored out!\n\nI've convinced it to reconsider :wink:.\nAll the tests are passing but you have 2 lint errors - mind fixing those? :smile:\n. What version of Atom is this, on what OS?\n. @zaz can you try to upgrade to Atom 1.0.0 and see if you can still reproduce this?  Thanks.\n. What versions of Atom and vim-mode are you using?  Also, does this still happen in safe mode (`atom --safe`)?\n. My apologies, totally forgot that this was on vim-mode (so safe mode would disable vim-mode).\nCan you then paste the output of `apm list --installed`?  Thanks.\n. This issue was moved to lloeki/ex-mode#67\n. Thanks @jacekkopecky!  @YukariyoRyu, if you're still experiencing this on the latest version of vim-mode, please comment here!\n. Hey @emsquared-inc, you're on an extremely outdated version of Atom.  Could you try updating to the latest version (currently 1.0.2) and see if you can still reproduce this?  Thanks.\n. Thanks a lot @jacekkopecky :).\n. Thanks @jacekkopecky and @wolftune!  @kenjimorita, please subscribe to #468 for updates.\n\n@wolftune, feel free to copy your comments to the other issue :)\n. @alexbooker can you also please paste the output of `apm list --installed` here (and/or try to disable all community packages except vim-mode)?  Thanks.\n. Do you need to press AltGr to get to '?\n. Thanks @jacekkopecky.\n. Please update Atom to 1.0.11.  Then, if you experience this exception again, please add some reproduction steps to the issue :).  Thanks.\n. Can you reproduce this in safe mode (`atom --safe`)?  In addition, if it only happens on one file, can you please share that file as a Gist and upload it here?  Thanks.\n. Ugh, I keep forgetting that safe mode also disables Vim Mode...sorry about that.\n. @mota57 can you try updating to Atom 1.0.19 (or even 1.1.0-beta1) and see if the error still happens?\n. Nice to hear! :sparkles:\n. Thanks @redbmk.\n. Duplicate of atom/atom#8891, please subscribe there for updates.\n. @shamrin Can you add some specs for this behavior?\n. This also happens whether or not vim-mode is installed - can you please re-open this on atom/atom?  Thanks.\n. Thanks @jamesgecko.\n. Duplicate of facebook/nuclide#246, please subscribe there for updates.\n. @polybuildr: For next time, please use `apm install` instead.  `npm` and `apm` have very subtle differences in how they install modules that could lead to conflicts with Atom.\n. @SchDen `apm install` and then `apm test` inside of the `tree-view` folder.\n. Hi @tttlkkkl, you're on a very outdated version of Atom that was released almost half a year ago.  I would suggest updating to the latest version, Atom 1.4.0, and also updating `vim-mode` and seeing if the error occurs again.  If it does, please comment here and I'll gladly re-open this issue.  Thanks!\n. Thanks @rkmarks.\n. Thanks for creating failing specs @rsommerard :).  That will help to get the behavior fixed.  /cc @maxbrunsfeld \n. Thanks for the update @tepf!  Closing this in favor of #657.\n. @b6pzeusbc54tvhw5jgpyw8pwz2x6gs it just means someone from the Atom team has to review this.\n. > Is there anything I can do to get this merged?\n\nSomeone needs to review this first.  The maintainer of vim-mode is on paternity leave though, so in addition to the long backlog of open PRs it may take some time to get to this one.\n. Glad to hear it @guiwp.\n. This is a duplicate of atom/atom#11464 - feel free to subscribe there for updates.\n. Closing until more information can be provided.\n. Closing in favor of #1006.\n. I don't believe auto-deploy is a vim-mode feature.  If I'm misunderstanding please comment here.\n. @atd please follow the instructions at the bottom of that issue.\n\n@shitou520 Can you still reproduce this on Atom 1.8.0?\n. /cc @maxbrunsfeld \n. This is a duplicate of atom/atom-keymap#35 and atom/atom-keymap#37 - feel free to subscribe there for updates and to check out the [keyboard-localization](https://atom.io/packages/keyboard-localization) package.\n. As mentioned in https://github.com/atom/vim-mode/issues/520#issuecomment-76037986, this isn't likely to happen.  But that might have changed now, I'm not sure.\n. Thanks @amfarrell.\n. > What is the next step?\n\nCan you elaborate on what you mean by this?\n. > So I have a coded (and now spec'd) change with a feature request implemented\n\nYou have to create a pull request: https://github.com/atom/vim-mode/pulls -> New Pull Request.  Or I think you can do that directly from your fork.\n. > That's a little scary since I could be anybody - is there any type of peer review system that is used first?\n\nI don't believe you can - make sure you didn't create the PR on your own fork.\n. > Electron Version: 1.4.0\n\nThis is an unsupported Electron version.  Please uninstall Atom and redownload it from https://atom.io.\n\nhttps://github.com/atom/design-decisions/blob/master/unofficial-atom-distributions.md\n. > This is the version that ships on Arch Linux and the latest on http://electron.atom.io/releases/\n\nThat does not matter: Atom does not currently support that Electron version.  Atom and Electron are two very different projects.  Please read the linked document for more information.\n\nAnd no, it is not the version that _officially_ ships on Arch Linux: the version that ships on Arch Linux is also (as of this writing) using Electron 0.37.8.  What you are using is an _unofficial_ version.\n. My point still stands - neither that Electron package nor the Atom package are maintained or supported by GitHub.\n. @maxbrunsfeld \n. This has already been fixed.  See atom/atom-keymap#150.\n. > Atom: 1.11.2\n\nAtom 1.11.x doesn't contain the keyboard layout fixes - you'll need to install Atom 1.12-beta for that.\n. vim-mode is deprecated.  Please install vim-mode-plus instead.. Check out [vim-mode-plus](https://atom.io/packages/vim-mode-plus) and [ex-mode](https://atom.io/packages/ex-mode).. vim-mode is deprecated.  Please try installing [vim-mode-plus](https://atom.io/packages/vim-mode-plus) instead.. This package is deprecated.  You may be interested in installing [vim-mode-plus](https://atom.io/packages/vim-mode-plus) instead.. Yes, please switch to vim-mode-plus which does not have this error.. @chrislovecnm this package has been deprecated.  I would recommend uninstalling this and installing the excellent [vim-mode-plus](https://atom.io/packages/vim-mode-plus) package instead.. This package is deprecated.  I would suggest looking at vim-mode-plus instead.. Hi @AnuchitPrasertsang, what Atom version is this?\n. Just a heads-up: this package has been deprecated.  I would recommend installing vim-mode-plus instead.. At the risk of drifting slightly off-topic, have you found https://atom.io/packages/vim-mode-plus-ex-mode?    It looks like it offers some ex mode support.. > Pull request #1092 catches the exception.\r\n\r\nI've looked at this PR and it doesn't look mergeable.  All it does is silently absorb the exception rather than fixing the root cause.\r\n\r\n> in the meantime, could we find a way to keep this repo at least somewhat healthy? Who's on point for keeping this repo working?\r\n\r\nIt was deprecated because we, the Atom team, realized that we were unable to dedicate enough time to maintaining this repository.  Rather than let it languish, we decided to deprecate it so that people could move to alternatives or fork it and improve on it.  Before deprecation, @maxbrunsfeld was mostly the sole maintainer.\r\n\r\n> From an implementation point-of-view, what would it take to bring real ex-mode to vim-mode-plus?\r\n\r\nI am unable to answer this, having no previous experience with Vim, `vim-mode`, or `vim-mode-plus`.  In fact, my only contributions to this repository were to make the deprecation notice more prominent when viewing the package.. I am :+1: on adding a notification.  However, we should probably only notify occasionally (maybe once per week?) so as to not annoy people :grinning:.. > I'm not sure why the travis build errored out!\n\nI've convinced it to reconsider :wink:.\nAll the tests are passing but you have 2 lint errors - mind fixing those? :smile:\n. What version of Atom is this, on what OS?\n. @zaz can you try to upgrade to Atom 1.0.0 and see if you can still reproduce this?  Thanks.\n. What versions of Atom and vim-mode are you using?  Also, does this still happen in safe mode (`atom --safe`)?\n. My apologies, totally forgot that this was on vim-mode (so safe mode would disable vim-mode).\nCan you then paste the output of `apm list --installed`?  Thanks.\n. This issue was moved to lloeki/ex-mode#67\n. Thanks @jacekkopecky!  @YukariyoRyu, if you're still experiencing this on the latest version of vim-mode, please comment here!\n. Hey @emsquared-inc, you're on an extremely outdated version of Atom.  Could you try updating to the latest version (currently 1.0.2) and see if you can still reproduce this?  Thanks.\n. Thanks a lot @jacekkopecky :).\n. Thanks @jacekkopecky and @wolftune!  @kenjimorita, please subscribe to #468 for updates.\n\n@wolftune, feel free to copy your comments to the other issue :)\n. @alexbooker can you also please paste the output of `apm list --installed` here (and/or try to disable all community packages except vim-mode)?  Thanks.\n. Do you need to press AltGr to get to '?\n. Thanks @jacekkopecky.\n. Please update Atom to 1.0.11.  Then, if you experience this exception again, please add some reproduction steps to the issue :).  Thanks.\n. Can you reproduce this in safe mode (`atom --safe`)?  In addition, if it only happens on one file, can you please share that file as a Gist and upload it here?  Thanks.\n. Ugh, I keep forgetting that safe mode also disables Vim Mode...sorry about that.\n. @mota57 can you try updating to Atom 1.0.19 (or even 1.1.0-beta1) and see if the error still happens?\n. Nice to hear! :sparkles:\n. Thanks @redbmk.\n. Duplicate of atom/atom#8891, please subscribe there for updates.\n. @shamrin Can you add some specs for this behavior?\n. This also happens whether or not vim-mode is installed - can you please re-open this on atom/atom?  Thanks.\n. Thanks @jamesgecko.\n. Duplicate of facebook/nuclide#246, please subscribe there for updates.\n. @polybuildr: For next time, please use `apm install` instead.  `npm` and `apm` have very subtle differences in how they install modules that could lead to conflicts with Atom.\n. @SchDen `apm install` and then `apm test` inside of the `tree-view` folder.\n. Hi @tttlkkkl, you're on a very outdated version of Atom that was released almost half a year ago.  I would suggest updating to the latest version, Atom 1.4.0, and also updating `vim-mode` and seeing if the error occurs again.  If it does, please comment here and I'll gladly re-open this issue.  Thanks!\n. Thanks @rkmarks.\n. Thanks for creating failing specs @rsommerard :).  That will help to get the behavior fixed.  /cc @maxbrunsfeld \n. Thanks for the update @tepf!  Closing this in favor of #657.\n. @b6pzeusbc54tvhw5jgpyw8pwz2x6gs it just means someone from the Atom team has to review this.\n. > Is there anything I can do to get this merged?\n\nSomeone needs to review this first.  The maintainer of vim-mode is on paternity leave though, so in addition to the long backlog of open PRs it may take some time to get to this one.\n. Glad to hear it @guiwp.\n. This is a duplicate of atom/atom#11464 - feel free to subscribe there for updates.\n. Closing until more information can be provided.\n. Closing in favor of #1006.\n. I don't believe auto-deploy is a vim-mode feature.  If I'm misunderstanding please comment here.\n. @atd please follow the instructions at the bottom of that issue.\n\n@shitou520 Can you still reproduce this on Atom 1.8.0?\n. /cc @maxbrunsfeld \n. This is a duplicate of atom/atom-keymap#35 and atom/atom-keymap#37 - feel free to subscribe there for updates and to check out the [keyboard-localization](https://atom.io/packages/keyboard-localization) package.\n. As mentioned in https://github.com/atom/vim-mode/issues/520#issuecomment-76037986, this isn't likely to happen.  But that might have changed now, I'm not sure.\n. Thanks @amfarrell.\n. > What is the next step?\n\nCan you elaborate on what you mean by this?\n. > So I have a coded (and now spec'd) change with a feature request implemented\n\nYou have to create a pull request: https://github.com/atom/vim-mode/pulls -> New Pull Request.  Or I think you can do that directly from your fork.\n. > That's a little scary since I could be anybody - is there any type of peer review system that is used first?\n\nI don't believe you can - make sure you didn't create the PR on your own fork.\n. > Electron Version: 1.4.0\n\nThis is an unsupported Electron version.  Please uninstall Atom and redownload it from https://atom.io.\n\nhttps://github.com/atom/design-decisions/blob/master/unofficial-atom-distributions.md\n. > This is the version that ships on Arch Linux and the latest on http://electron.atom.io/releases/\n\nThat does not matter: Atom does not currently support that Electron version.  Atom and Electron are two very different projects.  Please read the linked document for more information.\n\nAnd no, it is not the version that _officially_ ships on Arch Linux: the version that ships on Arch Linux is also (as of this writing) using Electron 0.37.8.  What you are using is an _unofficial_ version.\n. My point still stands - neither that Electron package nor the Atom package are maintained or supported by GitHub.\n. @maxbrunsfeld \n. This has already been fixed.  See atom/atom-keymap#150.\n. > Atom: 1.11.2\n\nAtom 1.11.x doesn't contain the keyboard layout fixes - you'll need to install Atom 1.12-beta for that.\n. vim-mode is deprecated.  Please install vim-mode-plus instead.. Check out [vim-mode-plus](https://atom.io/packages/vim-mode-plus) and [ex-mode](https://atom.io/packages/ex-mode).. vim-mode is deprecated.  Please try installing [vim-mode-plus](https://atom.io/packages/vim-mode-plus) instead.. This package is deprecated.  You may be interested in installing [vim-mode-plus](https://atom.io/packages/vim-mode-plus) instead.. Yes, please switch to vim-mode-plus which does not have this error.. ",
    "ozkar99": "I am removing this issue, since i cant re-produce it anymore (and was hoping i could actually fix it by myself), After a reboot of my computer realized the issue was gone...\n. i think this is related: https://github.com/atom/vim-mode/commit/793dfa2e10bc6b3fd33fbcedcd92d644499d6a19\n\nill update to atom 0.2 and test\n. No problems with atom 0.2.x\n\nClosing the issue.\n. I am removing this issue, since i cant re-produce it anymore (and was hoping i could actually fix it by myself), After a reboot of my computer realized the issue was gone...\n. i think this is related: https://github.com/atom/vim-mode/commit/793dfa2e10bc6b3fd33fbcedcd92d644499d6a19\n\nill update to atom 0.2 and test\n. No problems with atom 0.2.x\n\nClosing the issue.\n. ",
    "elclanrs": "I think I'm not explaining right, I recorded two little videos, with the same code in Atom and in Vim. I am pressing `dd` repeatedly. While in Vim the cursor moves up and I can delete another line, in Atom it just stays after deleting the last line, I keep pressing `dd` but nothing happens.\n\n**Vim:** http://webmshare.com/play/Qm1Xa\n**Atom:** http://webmshare.com/play/OnK5m\n. I think I'm not explaining right, I recorded two little videos, with the same code in Atom and in Vim. I am pressing `dd` repeatedly. While in Vim the cursor moves up and I can delete another line, in Atom it just stays after deleting the last line, I keep pressing `dd` but nothing happens.\n\n**Vim:** http://webmshare.com/play/Qm1Xa\n**Atom:** http://webmshare.com/play/OnK5m\n. ",
    "DaanDD": "@t9md: That seems like a good idea. I always found it really handy in Sublime Text's vim mode.\n. I've been trying this in vim-mode-next (currently 0.54.15) and repeating commands in line wise visual mode doesn't seem to work correctly. For example, take this file:\n\n```\nfoo\nbar\n```\n\nNow select both lines with `Vj` and indent with `>`\n\n```\n  foo\n  bar\n```\n\nWhen I try to repeat the command with `.` only the first line gets indented again.\n\n```\n    foo\n  bar\n```\n. I tried it again with a clean install on a different computer and it still behaves as I described.\n. @t9md: That seems like a good idea. I always found it really handy in Sublime Text's vim mode.\n. I've been trying this in vim-mode-next (currently 0.54.15) and repeating commands in line wise visual mode doesn't seem to work correctly. For example, take this file:\n\n```\nfoo\nbar\n```\n\nNow select both lines with `Vj` and indent with `>`\n\n```\n  foo\n  bar\n```\n\nWhen I try to repeat the command with `.` only the first line gets indented again.\n\n```\n    foo\n  bar\n```\n. I tried it again with a clean install on a different computer and it still behaves as I described.\n. ",
    "KarlPurk": "+1\n\nI'm also having an issue with this.  The following simple use case doesn't work:\n1. yank a line with yy\n2. delete a line with dd\n3. paste buffer with \"0p\n\nThis should paste the line yanked in step 1, but instead pastes the line deleted in step 2.\n. +1\n\nI'm also having an issue with this.  The following simple use case doesn't work:\n1. yank a line with yy\n2. delete a line with dd\n3. paste buffer with \"0p\n\nThis should paste the line yanked in step 1, but instead pastes the line deleted in step 2.\n. ",
    "cpetrov": "+1\n. +1\n. ",
    "jmacedoit": "+1\n. +1\n. ",
    "joel1st": "+1\n. +1\n. ",
    "vickiccole": "+1\n. +1\n. ",
    "Maushundb": "+1. +1. ",
    "codeluggage": "+1. +1. ",
    "FernandoBasso": "Yes, I confirm this on Arch Linux as well with Atom 0.199.9.\n. Yes, I confirm this on Arch Linux as well with Atom 0.199.9.\n. ",
    "westoque": ":+1: thank you so much @bronson @maxbrunsfeld \n. @bronson Thanks. I didn't see that.\n\nI agree. If it doesn't belong in core vim, then it shouldn't be in vim-mode.\n\nHowever, it would be weird having an atom plugin that depends on another atom plugin. They should be exclusive IMO.\n. @bronson I actually do like it since we only have to install one package.\n\nWe don't have to mimic \"core\" vim exactly since this is in atom.\n. :+1: thank you so much @bronson @maxbrunsfeld \n. @bronson Thanks. I didn't see that.\n\nI agree. If it doesn't belong in core vim, then it shouldn't be in vim-mode.\n\nHowever, it would be weird having an atom plugin that depends on another atom plugin. They should be exclusive IMO.\n. @bronson I actually do like it since we only have to install one package.\n\nWe don't have to mimic \"core\" vim exactly since this is in atom.\n. ",
    "geoffwild11": "It has been a while since this thread was opened. Is this going to be implemented?. It has been a while since this thread was opened. Is this going to be implemented?. ",
    "np": "Atom: 0.188.0\n\nCould you specify a lower bound in the package.\nI gave 0.201 a try but I'm hitting a crash at startup...\n. Atom: 0.188.0\n\nCould you specify a lower bound in the package.\nI gave 0.201 a try but I'm hitting a crash at startup...\n. ",
    "sheldonkwok": "ctrl-w v for vertical and ctrl-w s for horizontal\n. Ah that works too. Should've noticed that the modifications were for the editor only. Thanks!\n. Sounds good, thanks for the input\n. ctrl-w v for vertical and ctrl-w s for horizontal\n. Ah that works too. Should've noticed that the modifications were for the editor only. Thanks!\n. Sounds good, thanks for the input\n. ",
    "sorear": "The same error shows up after `10|h`.  I would expect `10|` to go to column 10.\n. The same error shows up after `10|h`.  I would expect `10|` to go to column 10.\n. ",
    "zaz": "Thanks guys. I really appreciate your work!\n. @50Wliu: Yes. The issue still occurs on Atom 1.0.0.\n\n**Atom Version**: 1.0.0\n**System**: \"Arch Linux\"\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.54.0\n\n### Stack Trace\n\nUncaught TypeError: undefined is not a function\n\n```\nAt /home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:263\n\nTypeError: undefined is not a function\n    at Repeat.Prefix.isLinewise (/home/zaz/.atom/packages/vim-mode/lib/prefixes.coffee:37:34)\n    at Delete.Operator.setTextRegister (/home/zaz/.atom/packages/vim-mode/lib/operators/general-operators.coffee:64:90)\n    at Delete.execute (/home/zaz/.atom/packages/vim-mode/lib/operators/general-operators.coffee:137:14)\n    at VimState.module.exports.VimState.processOpStack (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:775:32)\n    at VimState.module.exports.VimState.processOpStack (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:762:23)\n    at VimState.module.exports.VimState.processOpStack (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:762:23)\n    at VimState.module.exports.VimState.pushOperations (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:725:28)\n    at atom-text-editor.commands.(anonymous function) (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:691:26)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/usr/share/atom/resources/app.asar/src/command-registry.js:241:29)\n    at /usr/share/atom/resources/app.asar/src/command-registry.js:3:61\n```\n\n### Commands\n\n```\n     -0:02.0 vim-mode:delete (atom-text-editor.editor.vim-mode.command-mode.is-focused)\n     -0:02.0 vim-mode:repeat-prefix (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:01.5.0 vim-mode:select-around-paragraph (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n```\n\n**Config and installed packages same as above.**\n. Thanks guys. I really appreciate your work!\n. @50Wliu: Yes. The issue still occurs on Atom 1.0.0.\n\n**Atom Version**: 1.0.0\n**System**: \"Arch Linux\"\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.54.0\n\n### Stack Trace\n\nUncaught TypeError: undefined is not a function\n\n```\nAt /home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:263\n\nTypeError: undefined is not a function\n    at Repeat.Prefix.isLinewise (/home/zaz/.atom/packages/vim-mode/lib/prefixes.coffee:37:34)\n    at Delete.Operator.setTextRegister (/home/zaz/.atom/packages/vim-mode/lib/operators/general-operators.coffee:64:90)\n    at Delete.execute (/home/zaz/.atom/packages/vim-mode/lib/operators/general-operators.coffee:137:14)\n    at VimState.module.exports.VimState.processOpStack (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:775:32)\n    at VimState.module.exports.VimState.processOpStack (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:762:23)\n    at VimState.module.exports.VimState.processOpStack (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:762:23)\n    at VimState.module.exports.VimState.pushOperations (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:725:28)\n    at atom-text-editor.commands.(anonymous function) (/home/zaz/.atom/packages/vim-mode/lib/vim-state.coffee:691:26)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/usr/share/atom/resources/app.asar/src/command-registry.js:241:29)\n    at /usr/share/atom/resources/app.asar/src/command-registry.js:3:61\n```\n\n### Commands\n\n```\n     -0:02.0 vim-mode:delete (atom-text-editor.editor.vim-mode.command-mode.is-focused)\n     -0:02.0 vim-mode:repeat-prefix (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:01.5.0 vim-mode:select-around-paragraph (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n```\n\n**Config and installed packages same as above.**\n. ",
    "tawanda": "works like a charm, thanks :)\n. works like a charm, thanks :)\n. ",
    "fazlearefin": "Great! Hope the maintainers notice this and does something about your PR #573 \n. Great! Hope the maintainers notice this and does something about your PR #573 \n. ",
    "lurimendes": "+1\n. +1\n. ",
    "mrandre": "I also get this error if I use r. eg `r (some-character)`. Happens every time I do it.\nAtom: 1.0\nvim-mode: 0.55.0\nOS: OS X Yosemite\n. I also get this error if I use the 't' operator, like `ct;` (change 'til semicolon).\n. I also get this error if I use r. eg `r (some-character)`. Happens every time I do it.\nAtom: 1.0\nvim-mode: 0.55.0\nOS: OS X Yosemite\n. I also get this error if I use the 't' operator, like `ct;` (change 'til semicolon).\n. ",
    "shri3k": "I'm also affected by this when I do `f (some-character)` . \nvim-mode: 0.55.0\nAtom: 1.0\nOS: Ubuntu\n. @jacekkopecky, I gave it a shot with all the installed packages disabled except `vim-mode`. Following is the error that I get. \n\n### Stack Trace\n\nUncaught TypeError: Cannot read property 'hiddenInputComponent' of null\n\n```\nAt /usr/share/atom/resources/app.asar/src/text-editor-element.js:218\n\nTypeError: Cannot read property 'hiddenInputComponent' of null\n    at atom-text-editor.TextEditorElement.blurred (/usr/share/atom/resources/app.asar/src/text-editor-element.js:218:51)\n    at HTMLInputElement.<anonymous> (/usr/share/atom/resources/app.asar/src/text-editor-element.js:193:26)\n    at atom-pane.PaneElement.activated (/usr/share/atom/resources/app.asar/src/pane-element.js:125:19)\n    at Emitter.module.exports.Emitter.emit (/usr/share/atom/resources/app.asar/node_modules/event-kit/lib/emitter.js:82:11)\n    at Pane.module.exports.Pane.activate (/usr/share/atom/resources/app.asar/src/pane.js:627:27)\n    at vim-normal-mode-input.VimNormalModeInputElement.removePanel (/home/shrestyo/.atom/packages/vim-mode/lib/view-models/vim-normal-mode-input-element.coffee:81:38)\n    at vim-normal-mode-input.VimNormalModeInputElement.confirm (/home/shrestyo/.atom/packages/vim-mode/lib/view-models/vim-normal-mode-input-element.coffee:68:19)\n    at /home/shrestyo/.atom/packages/vim-mode/lib/view-models/vim-normal-mode-input-element.coffee:53:28\n    at Emitter.module.exports.Emitter.emit (/usr/share/atom/resources/app.asar/node_modules/event-kit/lib/emitter.js:82:11)\n    at TextBuffer.module.exports.TextBuffer.applyChange (/usr/share/atom/resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:626:20)\n```\n\n### Commands\n\n```\n     -0:00.9.0 vim-mode:find (input.hidden-input)\n  3x -0:00.8.0 blur (input.hidden-input)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"terminal-panel\",\n      \"emmet\",\n      \"open-in-browser\",\n      \"linter-jsxhint\",\n      \"block-comment\",\n      \"color-picker\",\n      \"editorconfig\",\n      \"git-tab-status\",\n      \"highlight-line\",\n      \"language-groovy\",\n      \"language-javascript-jsx\",\n      \"linter\",\n      \"sync-settings\",\n      \"save-session\",\n      \"restore-windows\",\n      \"pane-manager\",\n      \"minimap\",\n      \"linter-jscs\",\n      \"linter-eslint\"\n    ],\n    \"themes\": [\n      \"one-light-ui\",\n      \"atom-light-syntax\"\n    ],\n    \"ignoredNames\": [\n      \"*.class\",\n      \"*.*.bak\"\n    ]\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nvim-mode, v0.57.0\n\n# Dev\nNo dev packages\n```\n\nThis is in Atom 1.0.2. Ubuntu 14.04. What's funny is that it doesn't happen in my personal computer with Ubuntu 15.04. I'll try comparing the plugins installed in my work and personal computer when I get a chance. \n. Oh. I completely forgot to follow up on this one. @jacekkopecky, yes. Even with the restart it still throws the same error on my work computer which has Ubuntu 14.04 LTS. I'll try upgrading to Ubuntu 15.04 in my work computer and see if that fixes (long shot) because it's working in my personal computer with Ubuntu 15.04. \n. I had to wait to upgrade to 15.04 because I didn't wanted to disrupt my workspace but I recently did upgraded to latest one and the problem still exists. I'm going to completely uninstall Atom and try it one more time. \n. I'm also affected by this when I do `f (some-character)` . \nvim-mode: 0.55.0\nAtom: 1.0\nOS: Ubuntu\n. @jacekkopecky, I gave it a shot with all the installed packages disabled except `vim-mode`. Following is the error that I get. \n\n### Stack Trace\n\nUncaught TypeError: Cannot read property 'hiddenInputComponent' of null\n\n```\nAt /usr/share/atom/resources/app.asar/src/text-editor-element.js:218\n\nTypeError: Cannot read property 'hiddenInputComponent' of null\n    at atom-text-editor.TextEditorElement.blurred (/usr/share/atom/resources/app.asar/src/text-editor-element.js:218:51)\n    at HTMLInputElement.<anonymous> (/usr/share/atom/resources/app.asar/src/text-editor-element.js:193:26)\n    at atom-pane.PaneElement.activated (/usr/share/atom/resources/app.asar/src/pane-element.js:125:19)\n    at Emitter.module.exports.Emitter.emit (/usr/share/atom/resources/app.asar/node_modules/event-kit/lib/emitter.js:82:11)\n    at Pane.module.exports.Pane.activate (/usr/share/atom/resources/app.asar/src/pane.js:627:27)\n    at vim-normal-mode-input.VimNormalModeInputElement.removePanel (/home/shrestyo/.atom/packages/vim-mode/lib/view-models/vim-normal-mode-input-element.coffee:81:38)\n    at vim-normal-mode-input.VimNormalModeInputElement.confirm (/home/shrestyo/.atom/packages/vim-mode/lib/view-models/vim-normal-mode-input-element.coffee:68:19)\n    at /home/shrestyo/.atom/packages/vim-mode/lib/view-models/vim-normal-mode-input-element.coffee:53:28\n    at Emitter.module.exports.Emitter.emit (/usr/share/atom/resources/app.asar/node_modules/event-kit/lib/emitter.js:82:11)\n    at TextBuffer.module.exports.TextBuffer.applyChange (/usr/share/atom/resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:626:20)\n```\n\n### Commands\n\n```\n     -0:00.9.0 vim-mode:find (input.hidden-input)\n  3x -0:00.8.0 blur (input.hidden-input)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"terminal-panel\",\n      \"emmet\",\n      \"open-in-browser\",\n      \"linter-jsxhint\",\n      \"block-comment\",\n      \"color-picker\",\n      \"editorconfig\",\n      \"git-tab-status\",\n      \"highlight-line\",\n      \"language-groovy\",\n      \"language-javascript-jsx\",\n      \"linter\",\n      \"sync-settings\",\n      \"save-session\",\n      \"restore-windows\",\n      \"pane-manager\",\n      \"minimap\",\n      \"linter-jscs\",\n      \"linter-eslint\"\n    ],\n    \"themes\": [\n      \"one-light-ui\",\n      \"atom-light-syntax\"\n    ],\n    \"ignoredNames\": [\n      \"*.class\",\n      \"*.*.bak\"\n    ]\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nvim-mode, v0.57.0\n\n# Dev\nNo dev packages\n```\n\nThis is in Atom 1.0.2. Ubuntu 14.04. What's funny is that it doesn't happen in my personal computer with Ubuntu 15.04. I'll try comparing the plugins installed in my work and personal computer when I get a chance. \n. Oh. I completely forgot to follow up on this one. @jacekkopecky, yes. Even with the restart it still throws the same error on my work computer which has Ubuntu 14.04 LTS. I'll try upgrading to Ubuntu 15.04 in my work computer and see if that fixes (long shot) because it's working in my personal computer with Ubuntu 15.04. \n. I had to wait to upgrade to 15.04 because I didn't wanted to disrupt my workspace but I recently did upgraded to latest one and the problem still exists. I'm going to completely uninstall Atom and try it one more time. \n. ",
    "Arsca": "Follow up: I made a fresh installation of the Atom and with fewer packages (most essential for my job). It works ok now. I though I couldn't identify which package might have caused the problem.\nKind regards,\n. @RossBarnie I'm on OSX Yosemite. I backed up the ~/.atom elsewhere and installed again whole atom. The first package I installed was the node-vim after which I just installed the packages I need one by one.  After every package installed I checked that it won't generate the node-vim error. So far it works ok.\n. +1\n\n> On Nov 18, 2015, at 23:37, Jason <notifications@github.com <mailto:notifications@github.com>> wrote:\n> \n> I can confirm that @nomatteus https://github.com/nomatteus 's workaround works. I didn't have to reset Atom; all I did was enable \"Use Shadow DOM.\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/atom/vim-mode/issues/701#issuecomment-157957838.\n. Follow up: I made a fresh installation of the Atom and with fewer packages (most essential for my job). It works ok now. I though I couldn't identify which package might have caused the problem.\nKind regards,\n. @RossBarnie I'm on OSX Yosemite. I backed up the ~/.atom elsewhere and installed again whole atom. The first package I installed was the node-vim after which I just installed the packages I need one by one.  After every package installed I checked that it won't generate the node-vim error. So far it works ok.\n. +1\n\n> On Nov 18, 2015, at 23:37, Jason <notifications@github.com <mailto:notifications@github.com>> wrote:\n> \n> I can confirm that @nomatteus https://github.com/nomatteus 's workaround works. I didn't have to reset Atom; all I did was enable \"Use Shadow DOM.\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/atom/vim-mode/issues/701#issuecomment-157957838.\n. ",
    "RossBarnie": "I can consistently recreate this error on OS X Yosemite. Tried disabling all other user packages, did not fix. Also tried different Syntax and UI themes with no difference.\n. How did you install atom? I'm wondering if it has anything to do with the\nfact to installed mine via homebrew cask.\n\nOn Thu, 17 Sep 2015 23:43 Arsca notifications@github.com wrote:\n\n> @RossBarnie https://github.com/RossBarnie I'm on OSX Yosemite. I backed\n> up the ~/.atom elsewhere and installed again whole atom. The first package\n> I installed was the node-vim after which I just installed the packages I\n> need one by one. After every package installed I checked that it won't\n> generate the node-vim error. So far it works ok.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/701#issuecomment-141257922.\n. I can consistently recreate this error on OS X Yosemite. Tried disabling all other user packages, did not fix. Also tried different Syntax and UI themes with no difference.\n. How did you install atom? I'm wondering if it has anything to do with the\nfact to installed mine via homebrew cask.\n\nOn Thu, 17 Sep 2015 23:43 Arsca notifications@github.com wrote:\n\n> @RossBarnie https://github.com/RossBarnie I'm on OSX Yosemite. I backed\n> up the ~/.atom elsewhere and installed again whole atom. The first package\n> I installed was the node-vim after which I just installed the packages I\n> need one by one. After every package installed I checked that it won't\n> generate the node-vim error. So far it works ok.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/701#issuecomment-141257922.\n. ",
    "estrattonbailey": "+1 for `r (some-character)`\n\natom 1.0.11\nvim-mode 0.60.0\nOS X Yosemite 10.10.5\n. +1 for `r (some-character)`\n\natom 1.0.11\nvim-mode 0.60.0\nOS X Yosemite 10.10.5\n. ",
    "LeezQ": "+1 OS X Yosemite\n. +1 OS X Yosemite\n. ",
    "ourway": "+1 OSX El-Capitan, Atom 1.1.0\n. +1 OSX El-Capitan, Atom 1.1.0\n. ",
    "nomatteus": "I kept getting this error when using `r` (replace). I temporarily got rid of my `.atom` settings, and was able to reproduce the issue with the default settings. The fix was to enable the \"Use Shadow DOM\" setting.\n\nSteps to reproduce:\n1. Rename `~/.atom` directory to something like `~/.atom-bak`\n2. Open Atom, install `vim-mode` package.\n3. Edit a document, and notice that using `r e` replaces a character with no error.\n4. Uncheck: Settings > Use Shadow Dom\n5. Edit a document, and notice that using `r e` triggers an error.\n\nBringing back my old settings and checking option \"Use Shadow DOM\" seems to have fixed this. (Not sure why it was unchecked in the first place.)\n. I kept getting this error when using `r` (replace). I temporarily got rid of my `.atom` settings, and was able to reproduce the issue with the default settings. The fix was to enable the \"Use Shadow DOM\" setting.\n\nSteps to reproduce:\n1. Rename `~/.atom` directory to something like `~/.atom-bak`\n2. Open Atom, install `vim-mode` package.\n3. Edit a document, and notice that using `r e` replaces a character with no error.\n4. Uncheck: Settings > Use Shadow Dom\n5. Edit a document, and notice that using `r e` triggers an error.\n\nBringing back my old settings and checking option \"Use Shadow DOM\" seems to have fixed this. (Not sure why it was unchecked in the first place.)\n. ",
    "jasonszhao": "I can confirm that @nomatteus 's workaround works. I didn't have to reset Atom; all I did was enable \"Use Shadow DOM.\"\n. I can confirm that @nomatteus 's workaround works. I didn't have to reset Atom; all I did was enable \"Use Shadow DOM.\"\n. ",
    "motjuste": "+1\n\nEDIT: Confirm enabling `Use Shadow DOM` results in no more errors. Also, did not have to reset atom, just a restart.\n. +1\n\nEDIT: Confirm enabling `Use Shadow DOM` results in no more errors. Also, did not have to reset atom, just a restart.\n. ",
    "agektmr": "I have exact same issue re: `r` and `/`. Turning on Shadow DOM seems to have fixed it for now.\n. I have exact same issue re: `r` and `/`. Turning on Shadow DOM seems to have fixed it for now.\n. ",
    "rnh": "Just happened to me on 1.0.2 / 0.55 / 0.5.1 when undoing a `:s`. Looks like there hasn't been a release of ex-mode since https://github.com/lloeki/ex-mode/pull/59 was merged.\n. Just happened to me on 1.0.2 / 0.55 / 0.5.1 when undoing a `:s`. Looks like there hasn't been a release of ex-mode since https://github.com/lloeki/ex-mode/pull/59 was merged.\n. ",
    "HarolddeBruijn": "Indeed I was on 0.199.0\nJust downloaded latest, apparently only the plugins have an outdated\nmessage?\n\nMet vriendelijke groet,\n\nHarold de Bruijn\nWolfsmelkstraat 24\n5262 DN  Vught\n06 2222 1040\n\nOp 18 jun. 2015 18:31 schreef \"Max Brunsfeld\" notifications@github.com:\n\n> @HarolddeBruijn https://github.com/HarolddeBruijn what version of Atom\n> are you using? It looks like you may be using an old one. Could you upgrade\n> to the latest versions of Atom and vim-mode and report whether the problem\n> persists?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/705#issuecomment-113210440.\n. Hi Max,\n\nThe error was resolved with updating, I downloaded the new x64 .deb from\natom.io.\nThank you for your help.\n\n2015-06-18 19:57 GMT+02:00 Max Brunsfeld notifications@github.com:\n\n> Atom should be checking for updates automatically every few hours on Mac\n> and Windows. Are you still seeing this error on the latest Atom?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/705#issuecomment-113238695.\n\n## \n\nHarold de Bruijn\nWolfsmelkstraat 24\n5262 DN  Vught\n06-2222040\n. Tlesser,\n\nYou should update atom itself, I see you have version 0.199.0\n\nMet vriendelijke groet,\n\nHarold de Bruijn\nWolfsmelkstraat 24\n5262 DN  Vught\n06 2222 1040\n\nOp 19 jun. 2015 16:51 schreef \"tlester\" notifications@github.com:\n\n> [Enter steps to reproduce below:]\n> 1. ...\n> 2. ...\n> \n> _Atom Version_: 0.199.0\n> _System_: Mac OS X 10.10.3\n> _Thrown From_: vim-mode https://github.com/atom/vim-mode package,\n> v0.53.0\n> Stack Trace\n> \n> Uncaught TypeError: undefined is not a function\n> \n> At /Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:556\n> \n> TypeError: undefined is not a function\n>   at getChangesSinceCheckpoint (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:556:6)\n>   at VimState.module.exports.VimState.deactivateInsertMode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:409:15)\n>   at VimState.module.exports.VimState.activateCommandMode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:375:6)\n>   at atom-text-editor.registerCommands.activate-command-mode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:64:36)\n>   at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/command-registry.js:238:29)\n>   at /Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n>   at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:519:16)\n>   at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:354:22)\n>   at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:178:20)\n> \n> Commands\n> \n> ```\n>  -3:14.2.0 core:copy (atom-notification.fatal.icon.icon-bug.native-key-bindings.has-detail.has-close.has-stack)\n>  -0:41.9.0 window:update-available (atom-workspace.workspace.scrollbars-visible-always.theme-one-dark-syntax.theme-one-dark-ui)\n> ```\n> \n>  29x -0:13.3.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n>   5x -0:09.4.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:07.8.0 core:move-left (atom-text-editor.editor.vim-mode.is-focused)\n>   3x -0:06.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n>   3x -0:05.5.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:04.9.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:04.4.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:03.6.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:03.2.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.is-focused)\n>   7x -0:02.3.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n>   4x -0:00.6.0 vim-mode:activate-command-mode (atom-text-editor.editor.vim-mode.is-focused)\n> \n> Config\n> \n> {\n>   \"core\": {},\n>   \"vim-mode\": {}\n> }\n> \n> Installed Packages\n> \n> # User\n> \n> vim-mode, v0.53.0\n> \n> # Dev\n> \n> No dev packages\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/705#issuecomment-113536711.\n. Indeed I was on 0.199.0\nJust downloaded latest, apparently only the plugins have an outdated\nmessage?\n\nMet vriendelijke groet,\n\nHarold de Bruijn\nWolfsmelkstraat 24\n5262 DN  Vught\n06 2222 1040\n\nOp 18 jun. 2015 18:31 schreef \"Max Brunsfeld\" notifications@github.com:\n\n> @HarolddeBruijn https://github.com/HarolddeBruijn what version of Atom\n> are you using? It looks like you may be using an old one. Could you upgrade\n> to the latest versions of Atom and vim-mode and report whether the problem\n> persists?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/705#issuecomment-113210440.\n. Hi Max,\n\nThe error was resolved with updating, I downloaded the new x64 .deb from\natom.io.\nThank you for your help.\n\n2015-06-18 19:57 GMT+02:00 Max Brunsfeld notifications@github.com:\n\n> Atom should be checking for updates automatically every few hours on Mac\n> and Windows. Are you still seeing this error on the latest Atom?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/705#issuecomment-113238695.\n\n## \n\nHarold de Bruijn\nWolfsmelkstraat 24\n5262 DN  Vught\n06-2222040\n. Tlesser,\n\nYou should update atom itself, I see you have version 0.199.0\n\nMet vriendelijke groet,\n\nHarold de Bruijn\nWolfsmelkstraat 24\n5262 DN  Vught\n06 2222 1040\n\nOp 19 jun. 2015 16:51 schreef \"tlester\" notifications@github.com:\n\n> [Enter steps to reproduce below:]\n> 1. ...\n> 2. ...\n> \n> _Atom Version_: 0.199.0\n> _System_: Mac OS X 10.10.3\n> _Thrown From_: vim-mode https://github.com/atom/vim-mode package,\n> v0.53.0\n> Stack Trace\n> \n> Uncaught TypeError: undefined is not a function\n> \n> At /Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:556\n> \n> TypeError: undefined is not a function\n>   at getChangesSinceCheckpoint (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:556:6)\n>   at VimState.module.exports.VimState.deactivateInsertMode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:409:15)\n>   at VimState.module.exports.VimState.activateCommandMode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:375:6)\n>   at atom-text-editor.registerCommands.activate-command-mode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:64:36)\n>   at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/command-registry.js:238:29)\n>   at /Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n>   at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:519:16)\n>   at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:354:22)\n>   at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:178:20)\n> \n> Commands\n> \n> ```\n>  -3:14.2.0 core:copy (atom-notification.fatal.icon.icon-bug.native-key-bindings.has-detail.has-close.has-stack)\n>  -0:41.9.0 window:update-available (atom-workspace.workspace.scrollbars-visible-always.theme-one-dark-syntax.theme-one-dark-ui)\n> ```\n> \n>  29x -0:13.3.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n>   5x -0:09.4.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:07.8.0 core:move-left (atom-text-editor.editor.vim-mode.is-focused)\n>   3x -0:06.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n>   3x -0:05.5.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:04.9.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:04.4.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:03.6.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n>      -0:03.2.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.is-focused)\n>   7x -0:02.3.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n>   4x -0:00.6.0 vim-mode:activate-command-mode (atom-text-editor.editor.vim-mode.is-focused)\n> \n> Config\n> \n> {\n>   \"core\": {},\n>   \"vim-mode\": {}\n> }\n> \n> Installed Packages\n> \n> # User\n> \n> vim-mode, v0.53.0\n> \n> # Dev\n> \n> No dev packages\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/705#issuecomment-113536711.\n. ",
    "tlester": "I too am getting this error.  Just updated a few minutes ago (10:49 ET 6/19/15)\n. [Enter steps to reproduce below:]\n1. hit the escape key.\n\n**Atom Version**: 0.199.0\n**System**: Mac OS X 10.10.3\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.53.0\n\n### Stack Trace\n\nUncaught TypeError: undefined is not a function\n\n```\nAt /Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:556\n\nTypeError: undefined is not a function\n  at getChangesSinceCheckpoint (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:556:6)\n  at VimState.module.exports.VimState.deactivateInsertMode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:409:15)\n  at VimState.module.exports.VimState.activateCommandMode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:375:6)\n  at atom-text-editor.registerCommands.activate-command-mode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:64:36)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/command-registry.js:238:29)\n  at /Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:519:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:354:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:178:20)\n\n```\n\n### Commands\n\n```\n     -3:14.2.0 core:copy (atom-notification.fatal.icon.icon-bug.native-key-bindings.has-detail.has-close.has-stack)\n     -0:41.9.0 window:update-available (atom-workspace.workspace.scrollbars-visible-always.theme-one-dark-syntax.theme-one-dark-ui)\n 29x -0:13.3.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n  5x -0:09.4.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused)\n     -0:07.8.0 core:move-left (atom-text-editor.editor.vim-mode.is-focused)\n  3x -0:06.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n  3x -0:05.5.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n     -0:04.9.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused)\n     -0:04.4.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n     -0:03.6.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n     -0:03.2.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.is-focused)\n  7x -0:02.3.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n  4x -0:00.6.0 vim-mode:activate-command-mode (atom-text-editor.editor.vim-mode.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {},\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nvim-mode, v0.53.0\n\n# Dev\nNo dev packages\n```\n. I too am getting this error.  Just updated a few minutes ago (10:49 ET 6/19/15)\n. [Enter steps to reproduce below:]\n1. hit the escape key.\n\n**Atom Version**: 0.199.0\n**System**: Mac OS X 10.10.3\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.53.0\n\n### Stack Trace\n\nUncaught TypeError: undefined is not a function\n\n```\nAt /Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:556\n\nTypeError: undefined is not a function\n  at getChangesSinceCheckpoint (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:556:6)\n  at VimState.module.exports.VimState.deactivateInsertMode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:409:15)\n  at VimState.module.exports.VimState.activateCommandMode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:375:6)\n  at atom-text-editor.registerCommands.activate-command-mode (/Users/tlester/.atom/packages/vim-mode/lib/vim-state.coffee:64:36)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/command-registry.js:238:29)\n  at /Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:519:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:354:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Users/tlester/Downloads/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:178:20)\n\n```\n\n### Commands\n\n```\n     -3:14.2.0 core:copy (atom-notification.fatal.icon.icon-bug.native-key-bindings.has-detail.has-close.has-stack)\n     -0:41.9.0 window:update-available (atom-workspace.workspace.scrollbars-visible-always.theme-one-dark-syntax.theme-one-dark-ui)\n 29x -0:13.3.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n  5x -0:09.4.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused)\n     -0:07.8.0 core:move-left (atom-text-editor.editor.vim-mode.is-focused)\n  3x -0:06.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n  3x -0:05.5.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n     -0:04.9.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused)\n     -0:04.4.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused)\n     -0:03.6.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n     -0:03.2.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.is-focused)\n  7x -0:02.3.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused)\n  4x -0:00.6.0 vim-mode:activate-command-mode (atom-text-editor.editor.vim-mode.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {},\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nvim-mode, v0.53.0\n\n# Dev\nNo dev packages\n```\n. ",
    "itkovian": "I am running 1.0, and got directed here for the 'same' issue.\n. If I can reproduce it, I will.\n. I am running 1.0, and got directed here for the 'same' issue.\n. If I can reproduce it, I will.\n. ",
    "fullofcaffeine": "+1, I'd like to create a shortcut with leader,b to switch \"buffers\" and leader,f to find files (Atom's command+T). Any hints?\n. +1, I'd like to create a shortcut with leader,b to switch \"buffers\" and leader,f to find files (Atom's command+T). Any hints?\n. ",
    "willopez": "atom calls \"command\" mode  \"normal\" mode, so custom bindings will looks like this: \n\n``` cson\n'atom-text-editor.vim-mode.normal-mode':\n  'space b': 'fuzzy-finder:toggle-buffer-finder'\n  'space f': 'fuzzy-finder:toggle-file-finder'\n  'space p': 'core:save'\n```\n. atom calls \"command\" mode  \"normal\" mode, so custom bindings will looks like this: \n\n``` cson\n'atom-text-editor.vim-mode.normal-mode':\n  'space b': 'fuzzy-finder:toggle-buffer-finder'\n  'space f': 'fuzzy-finder:toggle-file-finder'\n  'space p': 'core:save'\n```\n. ",
    "karismatic-megafauna": "Hey @lmartins vim comes out of the box with the ability to change inside!\n\ngiven this line of javascript:\n\n``` js\nlet example = 'change-me';\n```\n\nyou can do the following\n\n```\nf'ci'changed!\n```\n\n^^ I usually misunderstand what this actually means so I will break it down for ya\n\n`f` finds the next character on the current line, in this case it is `'` (shift f, `F` searches backwards)\n`ci'` is the vim function that means `change inside the quote tag` (you can do most things that wrap)\n`changed!` is the string i chose to replace it with as you are now in insert mode\n\nand the fun doesn't stop there! Check this one out!\n\n``` js\n  {\n    form: 'observation',\n    fields: ['name', 'number', 'description', 'id'],\n    asyncValidate,\n  },\n```\n\nlet's say you have this structure ^^\n\nAs long as your cursor is anywhere inside of the braces`{}` you can just do `ci{` and you will see this:\n\n``` js\n{}\n```\n\nwith your cursor loaded and ready to fire in `insert` mode\n\nBecause of how awesome ViM is i bet you can guess what `di{` does!\n\nAnd since I am just going full blog post on this comment, here is a great stack overflow post with some great basic vim commands!\nhttp://stackoverflow.com/questions/1276403/simple-vim-commands-you-wish-youd-known-earlier\n\nCheers! :)\n. course! i completely agree, vim-mode is fantastic for pairing with my co-workers that don't know vim, which is what i think is the one downfall of only doing vim :(\n. Hey @lmartins vim comes out of the box with the ability to change inside!\n\ngiven this line of javascript:\n\n``` js\nlet example = 'change-me';\n```\n\nyou can do the following\n\n```\nf'ci'changed!\n```\n\n^^ I usually misunderstand what this actually means so I will break it down for ya\n\n`f` finds the next character on the current line, in this case it is `'` (shift f, `F` searches backwards)\n`ci'` is the vim function that means `change inside the quote tag` (you can do most things that wrap)\n`changed!` is the string i chose to replace it with as you are now in insert mode\n\nand the fun doesn't stop there! Check this one out!\n\n``` js\n  {\n    form: 'observation',\n    fields: ['name', 'number', 'description', 'id'],\n    asyncValidate,\n  },\n```\n\nlet's say you have this structure ^^\n\nAs long as your cursor is anywhere inside of the braces`{}` you can just do `ci{` and you will see this:\n\n``` js\n{}\n```\n\nwith your cursor loaded and ready to fire in `insert` mode\n\nBecause of how awesome ViM is i bet you can guess what `di{` does!\n\nAnd since I am just going full blog post on this comment, here is a great stack overflow post with some great basic vim commands!\nhttp://stackoverflow.com/questions/1276403/simple-vim-commands-you-wish-youd-known-earlier\n\nCheers! :)\n. course! i completely agree, vim-mode is fantastic for pairing with my co-workers that don't know vim, which is what i think is the one downfall of only doing vim :(\n. ",
    "dineshbhosale": "Thanks :+1: \n. Thanks :+1: \n. ",
    "ryanphuang": "This is the screenshot, it looks like it recognized it as lower-case 'g' instead of 'G' (The caps lock is on, I made sure that). Also, I see that caps lock is recognized first (\"Key Binding Resolver: capslock\"). \n\n![screen shot 2015-06-25 at 4 46 56 pm](https://cloud.githubusercontent.com/assets/2121412/8368038/fe6c1678-1b59-11e5-907e-0f58ac7eee7f.png)\n. The behavior is that pressing 'G' does nothing, (because it thinks it's a 'g' and waiting for next key?)\n. shift-g works!!\n. This is the screenshot, it looks like it recognized it as lower-case 'g' instead of 'G' (The caps lock is on, I made sure that). Also, I see that caps lock is recognized first (\"Key Binding Resolver: capslock\"). \n\n![screen shot 2015-06-25 at 4 46 56 pm](https://cloud.githubusercontent.com/assets/2121412/8368038/fe6c1678-1b59-11e5-907e-0f58ac7eee7f.png)\n. The behavior is that pressing 'G' does nothing, (because it thinks it's a 'g' and waiting for next key?)\n. shift-g works!!\n. ",
    "signothefish": "@stormspirit, how did you get shift-g to work?  I have this in my vim-mode.cson file:\n'g g': 'vim-mode:move-to-start-of-file'\n\nBut there is no key mapping for 'G'. In fact, my key binding resolver comes up empty for both 'g' and 'shift-G'.\n. @stormspirit, how did you get shift-g to work?  I have this in my vim-mode.cson file:\n'g g': 'vim-mode:move-to-start-of-file'\n\nBut there is no key mapping for 'G'. In fact, my key binding resolver comes up empty for both 'g' and 'shift-G'.\n. ",
    "matsilva": "@maxbrunsfeld confirming that does fix it.\nI was running into this issue using Atom 0.188.0\nOS is Ubuntu 14.0.4, I needed to manually install the latest version of Atom, which brought me out of the stone age to version 1.0.6. Everything works fine now.\n. @maxbrunsfeld confirming that does fix it.\nI was running into this issue using Atom 0.188.0\nOS is Ubuntu 14.0.4, I needed to manually install the latest version of Atom, which brought me out of the stone age to version 1.0.6. Everything works fine now.\n. ",
    "stefanvlaski": "Update your Atom version and you should be good to go. `Buffer.getChangesSinceCheckpoint` was only recently added to the core (it's in 1.7.3 for sure, don't know about 1.7.2). In vim-mode, this function was used to be replace a broken method and fix #1006 as well as #1010 through #1020, released in vim-mode 0.65.1.\n\nMaybe the appropriate version of Atom can be added as a dependency?\n. ### Update:\n\nAfter Travis threw some failed tests when repeating insertions with multiple cursors, I did some more digging. `buffer.getChangesSinceCheckpoint` already bundles changes in a reasonable manner, making the `TransactionBundlerClass` redundant. In fact, the way I had implemented it, `TransactionBundler` overbundled changes, which caused the issues with inserting with multiple cursors.\n\nCommit @e13e028 removes the `TransactionBundler` class completely and grabs the bundled changes directly from `buffer.getChangesSinceCheckpoint`. This resolves the failed Travis checks in relevant tests. The build is still not successful, but that is caused by three failures in unrelated tests, which are present in the master branch as well.\n\nThis change also has a side-effect on the previously mentioned funky behavior. I now get in Atom 1.7.3 + this fix:\n`world. One Hello world. .`\nThe `buffer.getChangesSinceCheckpoint` bundles the two insertions `Hello` and `world.<space>` separately, allowing us to fetch only the most recent bundle and executing `cwworld.<space>` on the `.` command. This is a step closer to the vim behavior (`iworld.<space>`). Fully emulating vim behavior here (if desired) should probably be a separate PR, since it is related to the operator history, not the text itself.\n. Update your Atom version and you should be good to go. `Buffer.getChangesSinceCheckpoint` was only recently added to the core (it's in 1.7.3 for sure, don't know about 1.7.2). In vim-mode, this function was used to be replace a broken method and fix #1006 as well as #1010 through #1020, released in vim-mode 0.65.1.\n\nMaybe the appropriate version of Atom can be added as a dependency?\n. ### Update:\n\nAfter Travis threw some failed tests when repeating insertions with multiple cursors, I did some more digging. `buffer.getChangesSinceCheckpoint` already bundles changes in a reasonable manner, making the `TransactionBundlerClass` redundant. In fact, the way I had implemented it, `TransactionBundler` overbundled changes, which caused the issues with inserting with multiple cursors.\n\nCommit @e13e028 removes the `TransactionBundler` class completely and grabs the bundled changes directly from `buffer.getChangesSinceCheckpoint`. This resolves the failed Travis checks in relevant tests. The build is still not successful, but that is caused by three failures in unrelated tests, which are present in the master branch as well.\n\nThis change also has a side-effect on the previously mentioned funky behavior. I now get in Atom 1.7.3 + this fix:\n`world. One Hello world. .`\nThe `buffer.getChangesSinceCheckpoint` bundles the two insertions `Hello` and `world.<space>` separately, allowing us to fetch only the most recent bundle and executing `cwworld.<space>` on the `.` command. This is a step closer to the vim behavior (`iworld.<space>`). Fully emulating vim behavior here (if desired) should probably be a separate PR, since it is related to the operator history, not the text itself.\n. ",
    "Vinnl": "Something like that would probably be a good idea. Since it's often easier to update plugins than the entire application, this probably breaks for relatively many people.\n. I just upgraded to vim-mode 0.65, and the issue no longer seems to appear. @Habu-Kagumba I'm closing this, could you check whether it still happens for you with a recent version of Atom and vim-mode, and if so, re-open it? (Or let me know, if you can't re-open it.)\n. Something like that would probably be a good idea. Since it's often easier to update plugins than the entire application, this probably breaks for relatively many people.\n. I just upgraded to vim-mode 0.65, and the issue no longer seems to appear. @Habu-Kagumba I'm closing this, could you check whether it still happens for you with a recent version of Atom and vim-mode, and if so, re-open it? (Or let me know, if you can't re-open it.)\n. ",
    "scottpoulton": "<p>\nBreaks for anyone who hasn't installed 1.7.3 I presume?\n</p>\n. <p>\nBreaks for anyone who hasn't installed 1.7.3 I presume?\n</p>\n. ",
    "zwarag": "I use german layout with no dead keys. Running on a lenovo x1 3rd gen.\nYes a shift+7 does produce a `/`.\n\nTo test, I changed my keyboard layout to english (US) layout.\nSo then I pressed the `/` button that would be `-` on my keyboard.\nThat worked very well.\nBut I don't intend to use english keyboard for every day use.\n\nCan I somehow help you guys with this task? \n. Installing https://atom.io/packages/keyboard-localization actually solves the problem.\nThank you @jazzpi \n. I use german layout with no dead keys. Running on a lenovo x1 3rd gen.\nYes a shift+7 does produce a `/`.\n\nTo test, I changed my keyboard layout to english (US) layout.\nSo then I pressed the `/` button that would be `-` on my keyboard.\nThat worked very well.\nBut I don't intend to use english keyboard for every day use.\n\nCan I somehow help you guys with this task? \n. Installing https://atom.io/packages/keyboard-localization actually solves the problem.\nThank you @jazzpi \n. ",
    "Ben3eeE": "Looks solved closing.. https://github.com/atom/vim-mode/issues/1045#issuecomment-250221562\n\n[We're trying to control the amount of Issues that we have to triage and track](http://blog.atom.io/2016/04/19/managing-the-deluge-of-atom-issues.html). For general questions, [the Atom message board](https://discuss.atom.io) is where you'll be able to find answers faster.\n. > Electron Version: 1.4.4\n\nThis is [an unoffical Atom distribution](https://github.com/atom/design-decisions/blob/master/unofficial-atom-distributions.md). Please uninstall and reinstall from https://atom.io or file this issue to the ones that package your version of Atom.\n. /cc: @as-cii \n. Looks solved closing.. https://github.com/atom/vim-mode/issues/1045#issuecomment-250221562\n\n[We're trying to control the amount of Issues that we have to triage and track](http://blog.atom.io/2016/04/19/managing-the-deluge-of-atom-issues.html). For general questions, [the Atom message board](https://discuss.atom.io) is where you'll be able to find answers faster.\n. > Electron Version: 1.4.4\n\nThis is [an unoffical Atom distribution](https://github.com/atom/design-decisions/blob/master/unofficial-atom-distributions.md). Please uninstall and reinstall from https://atom.io or file this issue to the ones that package your version of Atom.\n. /cc: @as-cii \n. ",
    "rinkpijpker": "[Enter steps to reproduce below:]\n1. ...\n2. ...\n\n**Atom Version**: 1.0.19\n**System**: Mac OS X 10.11.1\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.62.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/rinkpijpker/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n  at Error (native)\n  at /Users/rinkpijpker/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n  at Emitter.module.exports.Emitter.emit (/Users/rinkpijpker/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n  at VimState.module.exports.VimState.pushOperations (/Users/rinkpijpker/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n  at atom-text-editor.commands.(anonymous function) (/Users/rinkpijpker/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:245:29)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:184:20)\n\n```\n\n### Commands\n\n```\n     -2:31.4.0 command-palette:toggle (atom-text-editor.editor.mini.is-focused)\n     -2:30 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -2:30 core:cancel (atom-text-editor.editor.mini.is-focused)\n     -2:28.5.0 core:confirm (atom-text-editor.editor.mini.is-focused)\n  2x -1:59.1.0 core:select-all (atom-text-editor.editor.mini.is-focused)\n     -0:17.2.0 fuzzy-finder:toggle-file-finder (div.settings-view.pane-item)\n     -0:15.8.0 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -0:15.8.0 core:cancel (atom-text-editor.editor.mini.is-focused)\n     -0:12 core:close (div.settings-view.pane-item)\n     -0:04.6.0 vim-mode:find (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:03.6.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:03.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:02.2.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:02.2.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:01.7.0 vim-mode:till (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:01.6.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"themes\": [\n      \"nucleus-dark-ui\",\n      \"batman-syntax\"\n    ]\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nbatman-syntax, v1.0.1\nemmet, v2.3.13\nfile-type-icons, v0.7.3\nlinter, v1.9.1\nminimap, v4.15.0\nnucleus-dark-ui, v0.6.6\npigments, v0.18.1\nvim-mode, v0.62.0\n\n# Dev\nNo dev packages\n```\n. [Enter steps to reproduce below:]\n1. ...\n2. ...\n\n**Atom Version**: 1.0.19\n**System**: Mac OS X 10.11.1\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.62.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/rinkpijpker/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n  at Error (native)\n  at /Users/rinkpijpker/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n  at Emitter.module.exports.Emitter.emit (/Users/rinkpijpker/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n  at VimState.module.exports.VimState.pushOperations (/Users/rinkpijpker/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n  at atom-text-editor.commands.(anonymous function) (/Users/rinkpijpker/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:245:29)\n  at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:184:20)\n\n```\n\n### Commands\n\n```\n     -2:31.4.0 command-palette:toggle (atom-text-editor.editor.mini.is-focused)\n     -2:30 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -2:30 core:cancel (atom-text-editor.editor.mini.is-focused)\n     -2:28.5.0 core:confirm (atom-text-editor.editor.mini.is-focused)\n  2x -1:59.1.0 core:select-all (atom-text-editor.editor.mini.is-focused)\n     -0:17.2.0 fuzzy-finder:toggle-file-finder (div.settings-view.pane-item)\n     -0:15.8.0 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -0:15.8.0 core:cancel (atom-text-editor.editor.mini.is-focused)\n     -0:12 core:close (div.settings-view.pane-item)\n     -0:04.6.0 vim-mode:find (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:03.6.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:03.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:02.2.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:02.2.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:01.7.0 vim-mode:till (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:01.6.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"themes\": [\n      \"nucleus-dark-ui\",\n      \"batman-syntax\"\n    ]\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nbatman-syntax, v1.0.1\nemmet, v2.3.13\nfile-type-icons, v0.7.3\nlinter, v1.9.1\nminimap, v4.15.0\nnucleus-dark-ui, v0.6.6\npigments, v0.18.1\nvim-mode, v0.62.0\n\n# Dev\nNo dev packages\n```\n. ",
    "skandl": "Sorry, no new info except that it occurs on the current version.\n\n**Atom Version**: 1.2.4\n**System**: Mac OS X 10.10.5\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.63.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/kandls1/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/kandls1/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/Users/kandls1/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/kandls1/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/kandls1/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:533:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:356:22)\n    at KeymapManager.module.exports.KeymapManager.terminatePendingState (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:507:14)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:383:23)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:99:36)\n    at HTMLDocument.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n  8x -0:18.9.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:17.4.0 vim-mode:insert-after-end-of-line (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:14 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n  2x -0:13.8.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:13.4.0 vim-mode:activate-linewise-visual-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:12.8.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:12.6.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  2x -0:12.2.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:11.8.0 core:save (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:04.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:02.8.0 vim-mode:replace (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:02.8.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:02.6.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.5.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:01.5.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:01.3.0 vim-mode:activate-insert-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"whitespace\"\n    ],\n    \"themes\": [\n      \"atom-dark-ui\",\n      \"atom-dark-syntax\"\n    ],\n    \"openEmptyEditorOnStart\": false\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-beautify, v0.28.19\nbuild, v0.50.0\nclose-other-tabs, v0.1.0\nfloobits, v0.29.3\nvim-mode, v0.63.0\n\n# Dev\nNo dev packages\n```\n. Sorry, no new info except that it occurs on the current version.\n\n**Atom Version**: 1.2.4\n**System**: Mac OS X 10.10.5\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.63.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/kandls1/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/kandls1/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/Users/kandls1/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/kandls1/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/kandls1/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:533:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:356:22)\n    at KeymapManager.module.exports.KeymapManager.terminatePendingState (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:507:14)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:383:23)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:99:36)\n    at HTMLDocument.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n  8x -0:18.9.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:17.4.0 vim-mode:insert-after-end-of-line (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:14 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n  2x -0:13.8.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:13.4.0 vim-mode:activate-linewise-visual-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:12.8.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:12.6.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  2x -0:12.2.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:11.8.0 core:save (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:04.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:02.8.0 vim-mode:replace (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:02.8.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:02.6.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.5.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:01.5.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:01.3.0 vim-mode:activate-insert-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"whitespace\"\n    ],\n    \"themes\": [\n      \"atom-dark-ui\",\n      \"atom-dark-syntax\"\n    ],\n    \"openEmptyEditorOnStart\": false\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-beautify, v0.28.19\nbuild, v0.50.0\nclose-other-tabs, v0.1.0\nfloobits, v0.29.3\nvim-mode, v0.63.0\n\n# Dev\nNo dev packages\n```\n. ",
    "kennbrodhagen": "This happened to me during the following sequence of operations on Mac OSX 10.11.3:\n1. I had another program with focus and Cmd-Tabbed over to atom.\n2. executed typed <kbd>,</kbd><kbd>t</kbd> which is bound to the following:\n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ', t': 'fuzzy-finder:toggle-file-finder'\n```\n1. The error appeared.  \n2.  Executing the command again afterward now continues to display the error and does not open the fuzzy finder.\n\nI restarted atom and now when I try the keybinding it doesn't do anything the first few times and then results in the error.  When I first set the binding up and tested it was working.  I'm not sure what might have changed in between.\n. This happened to me during the following sequence of operations on Mac OSX 10.11.3:\n1. I had another program with focus and Cmd-Tabbed over to atom.\n2. executed typed <kbd>,</kbd><kbd>t</kbd> which is bound to the following:\n\n``` cson\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  ', t': 'fuzzy-finder:toggle-file-finder'\n```\n1. The error appeared.  \n2.  Executing the command again afterward now continues to display the error and does not open the fuzzy finder.\n\nI restarted atom and now when I try the keybinding it doesn't do anything the first few times and then results in the error.  When I first set the binding up and tested it was working.  I'm not sure what might have changed in between.\n. ",
    "davideg": "I am able to reproduce this error by moving my cursor onto a letter and typing <kbd>g</kbd>, <kbd>Shift</kbd> + <kbd>u</kbd>, <kbd>m</kbd>.\n\nI restarted Atom and created a new document to try to reproduce this. I wrote some text, moved my cursor around, and then tried the key sequence. No problem the first two times, but the third time I get the exception.\n\n## Error with new document\n\n**Atom Version**: 1.3.2\n**System**: Mac OS X 10.11.2\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.64.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/dginsburg/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/dginsburg/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/Users/dginsburg/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/dginsburg/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/dginsburg/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:536:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:359:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n     -0:14 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  2x -0:12.9.0 blur (atom-text-editor.editor.mini.is-focused)\n  3x -0:12.4.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:10.7.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:09.8.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:09.3.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:08.4.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:08.1.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:07.4.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.9.0 vim-mode:mark (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:04.9.0 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:04.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:03.4.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.3.0 vim-mode:upper-case (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.9.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:00.9.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"themes\": [\n      \"atom-light-ui\",\n      \"atom-light-syntax\"\n    ]\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nautocomplete-emojis, v2.2.2\nlinter-write-good, v0.6.1\nvim-mode, v0.64.0\n\n# Dev\nNo dev packages\n```\n\n## Error with existing document\n\n**Atom Version**: 1.3.2\n**System**: Mac OS X 10.11.2\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.64.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/dginsburg/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/dginsburg/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/Users/dginsburg/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/dginsburg/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/dginsburg/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:536:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:359:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n  4x -0:38.7.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  2x -0:37.4.0 vim-mode:move-to-next-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:35.7.0 vim-mode:change-to-last-character-of-line (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:23.5.0 core:backspace (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n     -0:23 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n     -0:22.7.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  6x -0:22.1.0 vim-mode:move-to-next-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  4x -0:20.7.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:19.7.0 vim-mode:change-to-last-character-of-line (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:11.9.0 autocomplete-plus:confirm (atom-text-editor.editor.vim-mode.is-focused.insert-mode.autocomplete-active)\n     -0:10.2.0 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n  2x -0:09.6.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  3x -0:09.1.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:01.6.0 vim-mode:upper-case (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:01.1.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:01.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"themes\": [\n      \"atom-light-ui\",\n      \"atom-light-syntax\"\n    ]\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nautocomplete-emojis, v2.2.2\nlinter-write-good, v0.6.1\nvim-mode, v0.64.0\n\n# Dev\nNo dev packages\n```\n. I am able to reproduce this error by moving my cursor onto a letter and typing <kbd>g</kbd>, <kbd>Shift</kbd> + <kbd>u</kbd>, <kbd>m</kbd>.\n\nI restarted Atom and created a new document to try to reproduce this. I wrote some text, moved my cursor around, and then tried the key sequence. No problem the first two times, but the third time I get the exception.\n\n## Error with new document\n\n**Atom Version**: 1.3.2\n**System**: Mac OS X 10.11.2\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.64.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/dginsburg/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/dginsburg/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/Users/dginsburg/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/dginsburg/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/dginsburg/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:536:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:359:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n     -0:14 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  2x -0:12.9.0 blur (atom-text-editor.editor.mini.is-focused)\n  3x -0:12.4.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:10.7.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:09.8.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:09.3.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:08.4.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:08.1.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:07.4.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.9.0 vim-mode:mark (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:04.9.0 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:04.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:03.4.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.3.0 vim-mode:upper-case (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.9.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:00.9.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"themes\": [\n      \"atom-light-ui\",\n      \"atom-light-syntax\"\n    ]\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nautocomplete-emojis, v2.2.2\nlinter-write-good, v0.6.1\nvim-mode, v0.64.0\n\n# Dev\nNo dev packages\n```\n\n## Error with existing document\n\n**Atom Version**: 1.3.2\n**System**: Mac OS X 10.11.2\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.64.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/dginsburg/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/dginsburg/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/Users/dginsburg/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/dginsburg/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/dginsburg/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:536:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:359:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n  4x -0:38.7.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  2x -0:37.4.0 vim-mode:move-to-next-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:35.7.0 vim-mode:change-to-last-character-of-line (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:23.5.0 core:backspace (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n     -0:23 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n     -0:22.7.0 vim-mode:move-up (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  6x -0:22.1.0 vim-mode:move-to-next-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  4x -0:20.7.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:19.7.0 vim-mode:change-to-last-character-of-line (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:11.9.0 autocomplete-plus:confirm (atom-text-editor.editor.vim-mode.is-focused.insert-mode.autocomplete-active)\n     -0:10.2.0 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.is-focused.insert-mode)\n  2x -0:09.6.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  3x -0:09.1.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:01.6.0 vim-mode:upper-case (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:01.1.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:01.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"themes\": [\n      \"atom-light-ui\",\n      \"atom-light-syntax\"\n    ]\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nautocomplete-emojis, v2.2.2\nlinter-write-good, v0.6.1\nvim-mode, v0.64.0\n\n# Dev\nNo dev packages\n```\n. ",
    "noseglid": "[Enter steps to reproduce below:]\n\nNothing new here either.. thought I'd paste it on the off chance it helps anyway.\n\n**Atom Version**: 1.5.3\n**System**: Mac OS X 10.11.3\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.64.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/noseglid/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/noseglid/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/Users/noseglid/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/noseglid/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/noseglid/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:536:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:359:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n     -1:00.9.0 core:confirm (atom-text-editor.editor.mini.is-focused)\n 28x -1:00.9.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:07.9.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:06.7.0 vim-mode:delete-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:06.1.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:05.7.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  3x -0:05.7.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  7x -0:05.1.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.1.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:03.9.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:03.9.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:03.3.0 vim-mode:till (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  3x -0:03.3.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  3x -0:02.9.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  9x -0:02.1.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  4x -0:00.3.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"audioBeep\": false,\n    \"closeEmptyWindows\": false,\n    \"disabledPackages\": [\n      \"linter-checkstyle\"\n    ],\n    \"openEmptyEditorOnStart\": false,\n    \"themes\": [\n      \"atom-material-ui\",\n      \"one-dark-syntax\"\n    ]\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true,\n    \"useSmartcaseForSearch\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nangularjs, v0.3.4\natom-material-ui, v1.2.0\natom-ternjs, v0.13.2\nbuild, v0.54.1\nbuild-cargo, v0.12.0\nbuild-gradle, v0.6.0\nbuild-gulp, v0.7.0\nbuild-npm-apm, v0.8.0\neditorconfig, v1.2.4\nex-mode, v0.8.0\nfile-icons, v1.6.15\nhighlight-selected, v0.11.2\nlanguage-salt, v0.4.0\nlinter, v1.11.3\nlinter-eslint, v7.0.0\nlinter-javac, v1.5.0\nminimap, v4.19.0\nminimap-git-diff, v4.1.8\nminimap-highlight-selected, v4.3.1\nreact, v0.14.1\ntrailing-spaces, v0.3.2\nvim-mode, v0.64.0\n\n# Dev\nNo dev packages\n```\n. [Enter steps to reproduce below:]\n\nNothing new here either.. thought I'd paste it on the off chance it helps anyway.\n\n**Atom Version**: 1.5.3\n**System**: Mac OS X 10.11.3\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.64.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/noseglid/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/noseglid/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/Users/noseglid/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/noseglid/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/noseglid/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:536:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:359:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (/opt/homebrew-cask/Caskroom/atom/1.0.5/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n     -1:00.9.0 core:confirm (atom-text-editor.editor.mini.is-focused)\n 28x -1:00.9.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:07.9.0 vim-mode:delete (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:06.7.0 vim-mode:delete-right (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:06.1.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:05.7.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  3x -0:05.7.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  7x -0:05.1.0 vim-mode:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.1.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:03.9.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:03.9.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:03.3.0 vim-mode:till (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  3x -0:03.3.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  3x -0:02.9.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  9x -0:02.1.0 vim-mode:move-left (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  4x -0:00.3.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"audioBeep\": false,\n    \"closeEmptyWindows\": false,\n    \"disabledPackages\": [\n      \"linter-checkstyle\"\n    ],\n    \"openEmptyEditorOnStart\": false,\n    \"themes\": [\n      \"atom-material-ui\",\n      \"one-dark-syntax\"\n    ]\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true,\n    \"useSmartcaseForSearch\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nangularjs, v0.3.4\natom-material-ui, v1.2.0\natom-ternjs, v0.13.2\nbuild, v0.54.1\nbuild-cargo, v0.12.0\nbuild-gradle, v0.6.0\nbuild-gulp, v0.7.0\nbuild-npm-apm, v0.8.0\neditorconfig, v1.2.4\nex-mode, v0.8.0\nfile-icons, v1.6.15\nhighlight-selected, v0.11.2\nlanguage-salt, v0.4.0\nlinter, v1.11.3\nlinter-eslint, v7.0.0\nlinter-javac, v1.5.0\nminimap, v4.19.0\nminimap-git-diff, v4.1.8\nminimap-highlight-selected, v4.3.1\nreact, v0.14.1\ntrailing-spaces, v0.3.2\nvim-mode, v0.64.0\n\n# Dev\nNo dev packages\n```\n. ",
    "fasterthanlime": "I'm experiencing this too, I can reliably reproduce it by just trying to use `delete till X` command in vim, for example placing myself in an function call's arguments and hitting `dt)` to remove every argument to the right of the cursor.\n\n**Atom Version**: 1.5.4\n**System**: Debian GNU/Linux\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.65.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /home/amos/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /home/amos/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/home/amos/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/home/amos/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/home/amos/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/usr/share/atom/resources/app.asar/src/command-registry.js:260:29)\n    at /usr/share/atom/resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:570:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:378:22)\n    at KeymapManager.module.exports.KeymapManager.terminatePendingState (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:551:14)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:422:21)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/usr/share/atom/resources/app.asar/src/window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (/usr/share/atom/resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n     -0:03.9.0 vim-mode:move-down (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:03.9.0 vim-mode:move-up (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n  2x -0:03.6.0 vim-mode:bracket-matching-motion (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:02.9.0 vim-mode:move-down (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:02.3.0 vim-mode:move-to-beginning-of-line (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n  3x -0:02.2.0 vim-mode:move-to-end-of-word (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:01.7.0 vim-mode:move-right (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:01.5.0 vim-mode:delete (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:01.3.0 vim-mode:till (atom-text-editor.editor.is-focused.vim-mode.operator-pending-mode)\n     -0:01.3.0 vim-mode:move-to-next-sentence (atom-text-editor.editor.is-focused.vim-mode.operator-pending-mode)\n  2x -0:01.3.0 blur (atom-text-editor.editor.mini)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"autoHideMenuBar\": true,\n    \"themes\": [\n      \"light-bint-ui\",\n      \"nothrill-light-syntax\"\n    ]\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nchange-case, v0.6.0\ncolor-picker, v2.1.1\ncolornamer, v0.3.1\nfonts, v1.2.0\ngo-plus, v3.5.4\nlight-bint-ui, v1.0.4\nlinter, v1.11.3\nlinter-js-standard, v3.2.1\nnothrill-light-syntax, v0.8.0\nvim-mode, v0.65.0\nwebbox-color, v0.5.9\n\n# Dev\nNo dev packages\n```\n. I'm experiencing this too, I can reliably reproduce it by just trying to use `delete till X` command in vim, for example placing myself in an function call's arguments and hitting `dt)` to remove every argument to the right of the cursor.\n\n**Atom Version**: 1.5.4\n**System**: Debian GNU/Linux\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.65.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /home/amos/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /home/amos/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (/home/amos/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/home/amos/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/home/amos/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/usr/share/atom/resources/app.asar/src/command-registry.js:260:29)\n    at /usr/share/atom/resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:570:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:378:22)\n    at KeymapManager.module.exports.KeymapManager.terminatePendingState (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:551:14)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:422:21)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (/usr/share/atom/resources/app.asar/src/window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (/usr/share/atom/resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n     -0:03.9.0 vim-mode:move-down (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:03.9.0 vim-mode:move-up (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n  2x -0:03.6.0 vim-mode:bracket-matching-motion (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:02.9.0 vim-mode:move-down (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:02.3.0 vim-mode:move-to-beginning-of-line (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n  3x -0:02.2.0 vim-mode:move-to-end-of-word (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:01.7.0 vim-mode:move-right (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:01.5.0 vim-mode:delete (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n     -0:01.3.0 vim-mode:till (atom-text-editor.editor.is-focused.vim-mode.operator-pending-mode)\n     -0:01.3.0 vim-mode:move-to-next-sentence (atom-text-editor.editor.is-focused.vim-mode.operator-pending-mode)\n  2x -0:01.3.0 blur (atom-text-editor.editor.mini)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"autoHideMenuBar\": true,\n    \"themes\": [\n      \"light-bint-ui\",\n      \"nothrill-light-syntax\"\n    ]\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nchange-case, v0.6.0\ncolor-picker, v2.1.1\ncolornamer, v0.3.1\nfonts, v1.2.0\ngo-plus, v3.5.4\nlight-bint-ui, v1.0.4\nlinter, v1.11.3\nlinter-js-standard, v3.2.1\nnothrill-light-syntax, v0.8.0\nvim-mode, v0.65.0\nwebbox-color, v0.5.9\n\n# Dev\nNo dev packages\n```\n. ",
    "hipo78": "Hello,\nI also encountered this error. For me, it happened when I attempted to use the find functionality (I pressed ctrl + f) within my html document. I re-launched atom but could not reproduce the error. \n\n**Atom Version**: 1.6.0\n**System**: Microsoft Windows 10 Pro\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.65.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /C:/Users/Mexx/.atom/packages/vim-mode/lib/view-models/view-model.coffee:18\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at file:///C:/Users/Mexx/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (C:\\Users\\Mexx\\.atom\\packages\\vim-mode\\node_modules\\event-kit\\lib\\emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (file:///C:/Users/Mexx/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (file:///C:/Users/Mexx/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\src\\command-registry.js:260:29)\n    at C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\src\\command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\node_modules\\atom-keymap\\lib\\keymap-manager.js:570:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\node_modules\\atom-keymap\\lib\\keymap-manager.js:378:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\src\\window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\src\\window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n     -0:09.5.0 vim-mode:scroll-full-screen-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:05.5.0 vim-mode:change (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.7.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  2x -0:04.7.0 blur (atom-text-editor.editor.mini)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"themes\": [\n      \"seti-ui\",\n      \"monokai-seti\"\n    ]\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-html-preview, v0.1.18\nauto-detect-indentation, v1.0.0\nautoclose-html, v0.23.0\ncolor-picker, v2.1.1\nfile-icons, v1.6.18\nhighlight-selected, v0.11.2\nindent-guide-improved, v1.4.5\nlinter, v1.11.4\nlinter-csslint, v1.3.2\nlinter-htmlhint, v1.1.0\nlinter-jshint, v2.0.3\nminimap, v4.21.0\nminimap-highlight-selected, v4.4.0\nmonokai-seti, v0.7.0\nopen-recent, v5.0.0\npigments, v0.24.5\nseti-ui, v0.9.1\nsync-settings, v0.7.2\nvim-mode, v0.65.0\n\n# Dev\nNo dev packages\n```\n. Hello,\nI also encountered this error. For me, it happened when I attempted to use the find functionality (I pressed ctrl + f) within my html document. I re-launched atom but could not reproduce the error. \n\n**Atom Version**: 1.6.0\n**System**: Microsoft Windows 10 Pro\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.65.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /C:/Users/Mexx/.atom/packages/vim-mode/lib/view-models/view-model.coffee:18\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at file:///C:/Users/Mexx/.atom/packages/vim-mode/lib/view-models/view-model.coffee:8:43\n    at Emitter.module.exports.Emitter.emit (C:\\Users\\Mexx\\.atom\\packages\\vim-mode\\node_modules\\event-kit\\lib\\emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (file:///C:/Users/Mexx/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (file:///C:/Users/Mexx/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\src\\command-registry.js:260:29)\n    at C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\src\\command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\node_modules\\atom-keymap\\lib\\keymap-manager.js:570:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\node_modules\\atom-keymap\\lib\\keymap-manager.js:378:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeydown (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\src\\window-event-handler.js:97:36)\n    at HTMLDocument.<anonymous> (C:\\Users\\Mexx\\AppData\\Local\\atom\\app-1.6.0\\resources\\app.asar\\src\\window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n     -0:09.5.0 vim-mode:scroll-full-screen-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:05.5.0 vim-mode:change (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.7.0 vim-mode:mark (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  2x -0:04.7.0 blur (atom-text-editor.editor.mini)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"themes\": [\n      \"seti-ui\",\n      \"monokai-seti\"\n    ]\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-html-preview, v0.1.18\nauto-detect-indentation, v1.0.0\nautoclose-html, v0.23.0\ncolor-picker, v2.1.1\nfile-icons, v1.6.18\nhighlight-selected, v0.11.2\nindent-guide-improved, v1.4.5\nlinter, v1.11.4\nlinter-csslint, v1.3.2\nlinter-htmlhint, v1.1.0\nlinter-jshint, v2.0.3\nminimap, v4.21.0\nminimap-highlight-selected, v4.4.0\nmonokai-seti, v0.7.0\nopen-recent, v5.0.0\npigments, v0.24.5\nseti-ui, v0.9.1\nsync-settings, v0.7.2\nvim-mode, v0.65.0\n\n# Dev\nNo dev packages\n```\n. ",
    "pwnall": "[Enter steps to reproduce below:]\n\nNot sure what I was doing, but I think the command history here does. FWIW, I was issuing a flurry of commands in pretty quick succession.\n\n**Atom Version**: 1.7.2\n**System**: Mac OS X 10.11.5\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.65.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/pwnall/.atom/packages/vim-mode/lib/view-models/view-model.coffee:18\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/pwnall/.atom/packages/vim-mode/lib/view-models/view-model.coffee:18:29\n    at Emitter.module.exports.Emitter.emit (/Users/pwnall/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/pwnall/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/pwnall/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:580:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:388:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeyEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:98:36)\n    at HTMLDocument.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n  2x -1:01.7.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -1:01.4.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -1:01.2.0 ex-mode:open (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -1:01.2.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -1:01.1.0 core:confirm (atom-text-editor.editor.mini.is-focused)\n  4x -1:01.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:02.4.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.6.0 vim-mode:search (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.6.0 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.2.0 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -0:01.2.0 core:cancel (atom-text-editor.editor.mini.is-focused)\n  2x -0:01.2.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:00.9.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.7.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:00.7.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:00.5.0 vim-mode:insert-below-with-newline (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"ignoredNames\": [\n      \".git\",\n      \".hg\",\n      \".svn\",\n      \".Ds_Store\",\n      \"._*\",\n      \"Thumbs.db\",\n      \"node_modules\",\n      \"bower_modules\"\n    ],\n    \"projectHome\": \"/Users/pwnall/workspace\",\n    \"themes\": [\n      \"one-light-ui\",\n      \"solarized-light-syntax\"\n    ]\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-typescript, v8.8.1\nex-mode, v0.8.0\nfonts, v1.2.0\nlanguage-latex, v0.6.1\nlanguage-rust, v0.4.6\nlinter, v1.11.4\nvim-mode, v0.65.0\n\n# Dev\nNo dev packages\n```\n. [Enter steps to reproduce below:]\n\nNot sure what I was doing, but I think the command history here does. FWIW, I was issuing a flurry of commands in pretty quick succession.\n\n**Atom Version**: 1.7.2\n**System**: Mac OS X 10.11.5\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.65.0\n\n### Stack Trace\n\nUncaught NotFoundError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n\n```\nAt /Users/pwnall/.atom/packages/vim-mode/lib/view-models/view-model.coffee:18\n\nError: Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?\n    at Error (native)\n    at /Users/pwnall/.atom/packages/vim-mode/lib/view-models/view-model.coffee:18:29\n    at Emitter.module.exports.Emitter.emit (/Users/pwnall/.atom/packages/vim-mode/node_modules/event-kit/lib/emitter.js:71:11)\n    at VimState.module.exports.VimState.pushOperations (/Users/pwnall/.atom/packages/vim-mode/lib/vim-state.coffee:227:18)\n    at atom-text-editor.commands.(anonymous function) (/Users/pwnall/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:580:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:388:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeyEvent (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:98:36)\n    at HTMLDocument.<anonymous> (/Applications/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)\n```\n\n### Commands\n\n```\n  2x -1:01.7.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -1:01.4.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -1:01.2.0 ex-mode:open (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -1:01.2.0 blur (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -1:01.1.0 core:confirm (atom-text-editor.editor.mini.is-focused)\n  4x -1:01.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:02.4.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.6.0 vim-mode:search (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.6.0 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:01.2.0 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -0:01.2.0 core:cancel (atom-text-editor.editor.mini.is-focused)\n  2x -0:01.2.0 blur (atom-text-editor.editor.mini.is-focused)\n     -0:00.9.0 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.7.0 vim-mode:replace (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n  3x -0:00.7.0 blur (atom-text-editor.editor.vim-mode.is-focused.operator-pending-mode)\n     -0:00.5.0 vim-mode:insert-below-with-newline (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"ignoredNames\": [\n      \".git\",\n      \".hg\",\n      \".svn\",\n      \".Ds_Store\",\n      \"._*\",\n      \"Thumbs.db\",\n      \"node_modules\",\n      \"bower_modules\"\n    ],\n    \"projectHome\": \"/Users/pwnall/workspace\",\n    \"themes\": [\n      \"one-light-ui\",\n      \"solarized-light-syntax\"\n    ]\n  },\n  \"vim-mode\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\natom-typescript, v8.8.1\nex-mode, v0.8.0\nfonts, v1.2.0\nlanguage-latex, v0.6.1\nlanguage-rust, v0.4.6\nlinter, v1.11.4\nvim-mode, v0.65.0\n\n# Dev\nNo dev packages\n```\n. ",
    "passy": "I'm pretty sure I got this by setting a bookmark with `m a` when this happened. Issuing the same command again afterwards worked just fine.\n. I'm pretty sure I got this by setting a bookmark with `m a` when this happened. Issuing the same command again afterwards worked just fine.\n. ",
    "smably": "I keep accidentally hitting <kbd>c</kbd><kbd>m</kbd> and getting this error.\n. I keep accidentally hitting <kbd>c</kbd><kbd>m</kbd> and getting this error.\n. ",
    "averyvery": "Hmm, suddenly getting this when hitting `r` and any key to replace a character. Might be a conflict with another package..... oh, thanks, I wondered about why there were two! Will do.. Hmm, suddenly getting this when hitting `r` and any key to replace a character. Might be a conflict with another package..... oh, thanks, I wondered about why there were two! Will do.. ",
    "robbprescott": "I also just started getting this with `r` to replace, or `m` to mark a bookmark. Surprisingly everything still seems to work, just getting an error. . I also just started getting this with `r` to replace, or `m` to mark a bookmark. Surprisingly everything still seems to work, just getting an error. . ",
    "fritzherald": "Started getting this today, tried switching to *vim-mode-plus* but the lack of support for `:'<,'>s/foo/bar/g` makes it a non-viable solution for me. I'm also pretty non-plussed about using the command palette for ex-mode functionality \u2014 even if it had support for substitutions, the palette obscures the code I'm trying to act on.\r\n\r\nSo I found the exceptions and wrapped them in a try/catch. Made the above PR, though based on the existing PRs it looks like this may be an exercise in futility. Here's hoping \u2014 long live ex-mode!. @as-cii @50Wliu @maxbrunsfeld @plbowers @t9md @jazzpi @lloeki Pinging you all because you authored the last few commits in master either here, in vim-mode-plus, or in ex-mode. Vim in atom is awesome, thank you all for your work.\r\n\r\n1. This thread's exception recently started occurring **very frequently** (as in, every time you try to replace a character). Pull request #1092 catches the exception. Can we figure out how to get it reviewed and merged? We know, we know, \"deprecated\", but this is a clear regression, and according to the readme \"we still want to fix regressions and keep it working.\"\r\n\r\n2. Can we talk about this whole deprecation thing? To many of us, **ex-mode** is absolutely core to how we work. There are plenty of things to admire about **vim-mode-plus**, but for us they don't come anywhere close to compensating for the loss of ex-mode. From t9md/atom-vim-mode-plus#52 it seems that true ex-mode is not on the near horizon for vim-mode-plus (the existing vim-mode-plus-ex-mode is a very limited command-palette hack). I'd be happy to start or join an effort to bring real ex-mode to vim-mode-plus (see 3.), but in the meantime, could we find a way to keep this repo at least somewhat healthy? Who's on point for keeping this repo working?\r\n\r\n3. From an implementation point-of-view, what would it take to bring real ex-mode to vim-mode-plus? What are the incompatibilities between t9md/vim-mode-plus and lloeki/ex-mode? \r\n\r\nThanks!\r\n<ESC>ZZ. I tried **vim-mode-plus** again with the latest version of **ex-mode** and can confirm that it is working. I haven't tested extensively, but substitutions are functional. Which means I (and other ex-mode holdouts) can switch over to vim-mode-plus. Thanks @jazzpi!\r\n\r\nAs for the mergability of my obviously crude PR... We're all busy, this package is currently broken. This is going to come out more harsh and less appreciative than I mean it, but it seems a little weird for the repo owners to maintain nothing here but the coding standards. What about merging the PR to get it working again and then following up with a proper investigation? Or somebody knowlegeable taking a look and explaining what \"the root cause\" might be and how to fix it?. @lloeki Just to keep things in perspective:\r\n\r\n<img width=\"469\" alt=\"screenshot 2017-05-25 00 11 29\" src=\"https://cloud.githubusercontent.com/assets/1905049/26439876/c02bcfbe-40de-11e7-83e1-71cf540a8074.png\">\r\n\r\nYes, my PR is a troll. I think it should be merged. I'm happy to learn the ways and dig into how to do this correctly over the weekend, but seriously.\r\n\r\nhttps://increment.com/on-call/when-the-pager-goes-off/. @50Wliu @maxbrunsfeld I believe my PR is up to standards at this point (see commit ^^^). Please take another look.. @maxbrunsfeld I don't see how my PR could break it any more than it's already broken \u2014 this is very easy to verify by using the current master version and then my version. I understand not wanting to put energy into maintaining a deprecated repo, but ***this is more like actively keeping a bug that breaks everything in order to force hundreds of thousands of installs to have to migrate whenever they happen to upgrade Atom***, which could be in the middle of an insane work week as it was for me. Leaving this broken ***on purpose*** is not so cool, and definitely not in keeping with the deprecation notice in the readme.\r\n\r\nThe handling of this issue has given me serious questions about the future of Atom in general when so little regard is shown for the core experience for so many users. Please reconsider bringing down my changes, testing them, and merging my PR. Please also consider implementing a migration process that doesn't rely on breaking the editor.. Thanks for your response. I can see two solutions that are both far superior in my mind to letting thousands of users figure it out when everything breaks:\r\n\r\n1. Fix the immediate issue and add an alert when the plugin loads that includes a deprecation notice and the migration command\r\n2. Make this repo a mirror of vim-mode-plus (possibly combined with a deprecation notice)\r\n\r\nThis is not about me personally feeling good about getting a PR merged, it's about giving users a tangible heads-up and at least a token amount of consideration for the effect that finding your editor completely broken can have on a work day. Issues like this can seriously erode faith in the platform.. Started getting this today, tried switching to *vim-mode-plus* but the lack of support for `:'<,'>s/foo/bar/g` makes it a non-viable solution for me. I'm also pretty non-plussed about using the command palette for ex-mode functionality \u2014 even if it had support for substitutions, the palette obscures the code I'm trying to act on.\r\n\r\nSo I found the exceptions and wrapped them in a try/catch. Made the above PR, though based on the existing PRs it looks like this may be an exercise in futility. Here's hoping \u2014 long live ex-mode!. @as-cii @50Wliu @maxbrunsfeld @plbowers @t9md @jazzpi @lloeki Pinging you all because you authored the last few commits in master either here, in vim-mode-plus, or in ex-mode. Vim in atom is awesome, thank you all for your work.\r\n\r\n1. This thread's exception recently started occurring **very frequently** (as in, every time you try to replace a character). Pull request #1092 catches the exception. Can we figure out how to get it reviewed and merged? We know, we know, \"deprecated\", but this is a clear regression, and according to the readme \"we still want to fix regressions and keep it working.\"\r\n\r\n2. Can we talk about this whole deprecation thing? To many of us, **ex-mode** is absolutely core to how we work. There are plenty of things to admire about **vim-mode-plus**, but for us they don't come anywhere close to compensating for the loss of ex-mode. From t9md/atom-vim-mode-plus#52 it seems that true ex-mode is not on the near horizon for vim-mode-plus (the existing vim-mode-plus-ex-mode is a very limited command-palette hack). I'd be happy to start or join an effort to bring real ex-mode to vim-mode-plus (see 3.), but in the meantime, could we find a way to keep this repo at least somewhat healthy? Who's on point for keeping this repo working?\r\n\r\n3. From an implementation point-of-view, what would it take to bring real ex-mode to vim-mode-plus? What are the incompatibilities between t9md/vim-mode-plus and lloeki/ex-mode? \r\n\r\nThanks!\r\n<ESC>ZZ. I tried **vim-mode-plus** again with the latest version of **ex-mode** and can confirm that it is working. I haven't tested extensively, but substitutions are functional. Which means I (and other ex-mode holdouts) can switch over to vim-mode-plus. Thanks @jazzpi!\r\n\r\nAs for the mergability of my obviously crude PR... We're all busy, this package is currently broken. This is going to come out more harsh and less appreciative than I mean it, but it seems a little weird for the repo owners to maintain nothing here but the coding standards. What about merging the PR to get it working again and then following up with a proper investigation? Or somebody knowlegeable taking a look and explaining what \"the root cause\" might be and how to fix it?. @lloeki Just to keep things in perspective:\r\n\r\n<img width=\"469\" alt=\"screenshot 2017-05-25 00 11 29\" src=\"https://cloud.githubusercontent.com/assets/1905049/26439876/c02bcfbe-40de-11e7-83e1-71cf540a8074.png\">\r\n\r\nYes, my PR is a troll. I think it should be merged. I'm happy to learn the ways and dig into how to do this correctly over the weekend, but seriously.\r\n\r\nhttps://increment.com/on-call/when-the-pager-goes-off/. @50Wliu @maxbrunsfeld I believe my PR is up to standards at this point (see commit ^^^). Please take another look.. @maxbrunsfeld I don't see how my PR could break it any more than it's already broken \u2014 this is very easy to verify by using the current master version and then my version. I understand not wanting to put energy into maintaining a deprecated repo, but ***this is more like actively keeping a bug that breaks everything in order to force hundreds of thousands of installs to have to migrate whenever they happen to upgrade Atom***, which could be in the middle of an insane work week as it was for me. Leaving this broken ***on purpose*** is not so cool, and definitely not in keeping with the deprecation notice in the readme.\r\n\r\nThe handling of this issue has given me serious questions about the future of Atom in general when so little regard is shown for the core experience for so many users. Please reconsider bringing down my changes, testing them, and merging my PR. Please also consider implementing a migration process that doesn't rely on breaking the editor.. Thanks for your response. I can see two solutions that are both far superior in my mind to letting thousands of users figure it out when everything breaks:\r\n\r\n1. Fix the immediate issue and add an alert when the plugin loads that includes a deprecation notice and the migration command\r\n2. Make this repo a mirror of vim-mode-plus (possibly combined with a deprecation notice)\r\n\r\nThis is not about me personally feeling good about getting a PR merged, it's about giving users a tangible heads-up and at least a token amount of consideration for the effect that finding your editor completely broken can have on a work day. Issues like this can seriously erode faith in the platform.. ",
    "mmagnuski": "I get this error whenever I try to go to specified character with vim mode, for example: `fw` or `Fw`.. Oh, sorry, didn't know it was deprecated, installing vim-mode-plus now.. I get this error whenever I try to go to specified character with vim mode, for example: `fw` or `Fw`.. Oh, sorry, didn't know it was deprecated, installing vim-mode-plus now.. ",
    "rcrelia": "vim-mode-plus is not a viable alternative, unfortunately. I'm bummed that we're losing the native vim-mode support from Atom. The lack of ex mode syntax support makes vim-mode-plus pretty useless IMHO.. @50Wliu I did try out vim-mode-plus-ex-mode, it doesn't offer full ex mode functionality like the native vim-mode of Atom and the author, who is also the author of vim-mode-plus, clearly states he is not motivated to provide that full functionality. That's entirely his prerogative, but it leaves a major gap in his work as a replacement for vim-mode in Atom.\r\n\r\n@Byron-TW that's cool, I'm not denigrating anyone. But I will reiterate: vim-mode-plus along with  vim-mode-plus-ex-mode are NOT a complete replacement for the native vim-mode in Atom (and the [ex-mode plugin](https://github.com/lloeki/ex-mode). There is a huge gap and the author, who I'm sure is a great person and I applaud his effort, clearly states in the vim-mode-plus-ex-mode [README](https://atom.io/packages/vim-mode-plus-ex-mode) that he does not care if the ex mode support is complete and to not bother asking him to provide that support. That attitude is unfortunate for those users like myself who count on full ex mode capabilities. \r\n\r\nIf vim-mode support ever goes missing from Atom altogether, we'll either be forced to give up a significant level of productivity or have to switch to another editor completely. That's a pretty crappy situation, IMHO. . Just looping back, I installed vim-mode-plus along with the updated version of ex-mode and I'm seeing full ex command capabilities that I didn't before... so thanks for that and the integration work. Cheers!\r\n. @fritzherald I can understand your frustration. I was initially just as frustrated because I knew that ex-mode didn't work with vim-mode-plus. However, I recently did re-try using vim-mode-plus with the updated ex-mode and have been pleasantly surprised and have not experienced any loss of functionality. I made the switch a couple of weeks ago and it's been seamless. So, maybe that's the path of least resistance. Good luck!. vim-mode-plus is not a viable alternative, unfortunately. I'm bummed that we're losing the native vim-mode support from Atom. The lack of ex mode syntax support makes vim-mode-plus pretty useless IMHO.. @50Wliu I did try out vim-mode-plus-ex-mode, it doesn't offer full ex mode functionality like the native vim-mode of Atom and the author, who is also the author of vim-mode-plus, clearly states he is not motivated to provide that full functionality. That's entirely his prerogative, but it leaves a major gap in his work as a replacement for vim-mode in Atom.\r\n\r\n@Byron-TW that's cool, I'm not denigrating anyone. But I will reiterate: vim-mode-plus along with  vim-mode-plus-ex-mode are NOT a complete replacement for the native vim-mode in Atom (and the [ex-mode plugin](https://github.com/lloeki/ex-mode). There is a huge gap and the author, who I'm sure is a great person and I applaud his effort, clearly states in the vim-mode-plus-ex-mode [README](https://atom.io/packages/vim-mode-plus-ex-mode) that he does not care if the ex mode support is complete and to not bother asking him to provide that support. That attitude is unfortunate for those users like myself who count on full ex mode capabilities. \r\n\r\nIf vim-mode support ever goes missing from Atom altogether, we'll either be forced to give up a significant level of productivity or have to switch to another editor completely. That's a pretty crappy situation, IMHO. . Just looping back, I installed vim-mode-plus along with the updated version of ex-mode and I'm seeing full ex command capabilities that I didn't before... so thanks for that and the integration work. Cheers!\r\n. @fritzherald I can understand your frustration. I was initially just as frustrated because I knew that ex-mode didn't work with vim-mode-plus. However, I recently did re-try using vim-mode-plus with the updated ex-mode and have been pleasantly surprised and have not experienced any loss of functionality. I made the switch a couple of weeks ago and it's been seamless. So, maybe that's the path of least resistance. Good luck!. ",
    "Byron-TW": "@rcelia To me vim-mode-plus is one of the (if not 'the') most useful vim emulation that I know, while adding useful smart features that I miss whenever I am back in the original vim. Even though I believe to understand how frustrating it is to see a feature like ex-mode missing in the only alternative, calling it useless doesn't seem factually justified. Maybe it's also because I see the work and dedication the author puts into it, which makes me choke on a work like this.. @rcelia To me vim-mode-plus is one of the (if not 'the') most useful vim emulation that I know, while adding useful smart features that I miss whenever I am back in the original vim. Even though I believe to understand how frustrating it is to see a feature like ex-mode missing in the only alternative, calling it useless doesn't seem factually justified. Maybe it's also because I see the work and dedication the author puts into it, which makes me choke on a work like this.. ",
    "mickenorlen": "i get this error whenever i use \"r\" to replace any single character. . i get this error whenever i use \"r\" to replace any single character. . ",
    "alk-jerber": "@maxbrunsfeld really good idea. I didn't even know vim-mode it is deprecated until I ran into this error and read the issue here. The package description is probably going be missed out easily. A notification (popup) would be better.. @maxbrunsfeld really good idea. I didn't even know vim-mode it is deprecated until I ran into this error and read the issue here. The package description is probably going be missed out easily. A notification (popup) would be better.. ",
    "jimmyhchan": "For those who just scrolled to the bottom:\r\n\r\n- `vim-mode` is dead\r\n- use `vim-mode-plus` instead\r\n- `apm remove vim-mode && apm install vim-mode-plus`. For those who just scrolled to the bottom:\r\n\r\n- `vim-mode` is dead\r\n- use `vim-mode-plus` instead\r\n- `apm remove vim-mode && apm install vim-mode-plus`. ",
    "andianderson522": "I belive :10,50y a is a vi command as it is a yank into a named buffer. I will ask the ex guys if its in their domain.\n. Thanks Ill report it there\n. yes looks that way. I have tried vim-mode-plus but with a lack of the ex commands its a no go for me\n. I belive :10,50y a is a vi command as it is a yank into a named buffer. I will ask the ex guys if its in their domain.\n. Thanks Ill report it there\n. yes looks that way. I have tried vim-mode-plus but with a lack of the ex commands its a no go for me\n. ",
    "yunake": "i use `:b#<CR>` for similar effect in real vim (go to previous buffer). i don't have Atom right now, would this work for you?\n. i use `:b#<CR>` for similar effect in real vim (go to previous buffer). i don't have Atom right now, would this work for you?\n. ",
    "dathinaios": "Thanks guys,\n\n@yunake I'm afraid that did not work...\n\nAlso ctrl-u and d is not working for me so... my exploration patience has run out.\n\nBack to Viiiiiiiim... :)\n. Thanks!\n\nNot sure what is going on with the ctrl-d ctrl-u\n\nI am using karabiner but I quit it and tried again so not sure what it is...\nI also tried to disable all packages.\n\nIf it persists I will post another issue.\n\nEDIT: I just realised that both shortcuts take me to the start of the line instead.\n. Thanks guys,\n\n@yunake I'm afraid that did not work...\n\nAlso ctrl-u and d is not working for me so... my exploration patience has run out.\n\nBack to Viiiiiiiim... :)\n. Thanks!\n\nNot sure what is going on with the ctrl-d ctrl-u\n\nI am using karabiner but I quit it and tried again so not sure what it is...\nI also tried to disable all packages.\n\nIf it persists I will post another issue.\n\nEDIT: I just realised that both shortcuts take me to the start of the line instead.\n. ",
    "floscr": "This is a bit late, but I'm now using this package to solve this issue\r\nhttps://github.com/xream/atom-last-buffer\r\n. This is a bit late, but I'm now using this package to solve this issue\r\nhttps://github.com/xream/atom-last-buffer\r\n. ",
    "jraines": "Apologies in advance for this being little more than a :+1:  -- but I'm in the camp that considers CTRL-^ (move to alternate buffer) essential in my vim usage.  Since I don't know much about the goals of this plugin or the best practices for Atom package modularity, I'm wondering if someone could point out:\n\n1)  Why it has too little to do with vim-mode?\n2)  If it is, in fact, relevant to this repo -- how can I help contribute to getting this merged?\n3)  If it should be a different plugin, in which case I'll do some research on contributing that.\n. Apologies in advance for this being little more than a :+1:  -- but I'm in the camp that considers CTRL-^ (move to alternate buffer) essential in my vim usage.  Since I don't know much about the goals of this plugin or the best practices for Atom package modularity, I'm wondering if someone could point out:\n\n1)  Why it has too little to do with vim-mode?\n2)  If it is, in fact, relevant to this repo -- how can I help contribute to getting this merged?\n3)  If it should be a different plugin, in which case I'll do some research on contributing that.\n. ",
    "Zundrium": "Installed this PR and it works perfectly for me with the last master-branch, thanks @irrationalistic!\n. Installed this PR and it works perfectly for me with the last master-branch, thanks @irrationalistic!\n. ",
    "petemill": "This is happening for me on many (non-insert) operations in vim-mode, usually when you get to the end of a file\n. This is happening for me on many (non-insert) operations in vim-mode, usually when you get to the end of a file\n. ",
    "georgeaf99": "After investigating for the way _MoveToNextWord_ and _Delete_ work I think I've found the source of the issue. In Vim _w_ moves the cursor to the next line if the word is at the end of a line; however, _dw_ keeps the cursor on the end of the line if the last word of a line is deleted. Thus, it seems that the cursor behavior when using _dw_ must override that of _w_.\n\nNOTE: not sure if _d_ in Vim always overrides this end-of-line behavior or only when chained with _w_\n. After investigating for the way _MoveToNextWord_ and _Delete_ work I think I've found the source of the issue. In Vim _w_ moves the cursor to the next line if the word is at the end of a line; however, _dw_ keeps the cursor on the end of the line if the last word of a line is deleted. Thus, it seems that the cursor behavior when using _dw_ must override that of _w_.\n\nNOTE: not sure if _d_ in Vim always overrides this end-of-line behavior or only when chained with _w_\n. ",
    "hitchcockwill": "Any progress on this issue? This is a particularly annoying bug.\n. Any progress on this issue? This is a particularly annoying bug.\n. ",
    "paween1980": "I will be waiting for this issue.\n. I will be waiting for this issue.\n. ",
    "lee-dohm": "The general rule for Issues is that they be actionable. If the Issue describes a bug, the action desired is to fix it. If the Issue describes a question, the action desired is to answer it. And so on.\n\nFrom reading this Issue, I'm not clear on what it is you expect or hope to happen other than discussion? If discussion is the goal, perhaps Discuss would be better suited for the purpose. If there is another goal other than gathering general thoughts, could you help clarify it for me?\n. This is a duplicate of #929. Please subscribe there for updates. Sorry to leave this open for so long, we're still trying to get caught up after a number of people were out for the holidays :grinning:\n. @Habu-Kagumba you should probably update to the latest version of Atom (v1.3.2) and see if it occurs again.\n. @donokuda Can you take a quick look at this and let me know what you think?\n. @SchDen Can you investigate the build break and see if it has anything to do with your change?\n. Thanks for the ping @jontonsoup (great username by the way :grinning:) I completely lost track of this. Can you test this out and see if it works as you expect?\n. Yes, it is possible with <kbd>Ctrl+0</kbd> on OS X or <kbd>Alt+\\</kbd> on other platforms by default. Not sure if there is a vim-mode way to do it though.\n. Thanks @SchDen for your hard work on this ... sorry it took so long!\n. Yes, a new issue would be appreciated. Please @mention me there :grinning:\n. The general rule for Issues is that they be actionable. If the Issue describes a bug, the action desired is to fix it. If the Issue describes a question, the action desired is to answer it. And so on.\n\nFrom reading this Issue, I'm not clear on what it is you expect or hope to happen other than discussion? If discussion is the goal, perhaps Discuss would be better suited for the purpose. If there is another goal other than gathering general thoughts, could you help clarify it for me?\n. This is a duplicate of #929. Please subscribe there for updates. Sorry to leave this open for so long, we're still trying to get caught up after a number of people were out for the holidays :grinning:\n. @Habu-Kagumba you should probably update to the latest version of Atom (v1.3.2) and see if it occurs again.\n. @donokuda Can you take a quick look at this and let me know what you think?\n. @SchDen Can you investigate the build break and see if it has anything to do with your change?\n. Thanks for the ping @jontonsoup (great username by the way :grinning:) I completely lost track of this. Can you test this out and see if it works as you expect?\n. Yes, it is possible with <kbd>Ctrl+0</kbd> on OS X or <kbd>Alt+\\</kbd> on other platforms by default. Not sure if there is a vim-mode way to do it though.\n. Thanks @SchDen for your hard work on this ... sorry it took so long!\n. Yes, a new issue would be appreciated. Please @mention me there :grinning:\n. ",
    "gingray": "@bronson Thanks for response yup i've configured in my keymap.cson here the config (i also add same navigation to search)\n\n```\n'.select-list.fuzzy-finder .editor':\n  'ctrl-j': 'core:move-down'\n  'ctrl-k': 'core:move-up'\n\n'.preview-pane.pane-item':\n  'ctrl-j': 'core:move-down'\n  'ctrl-k': 'core:move-up'\n```\n. @bronson Thanks for response yup i've configured in my keymap.cson here the config (i also add same navigation to search)\n\n```\n'.select-list.fuzzy-finder .editor':\n  'ctrl-j': 'core:move-down'\n  'ctrl-k': 'core:move-up'\n\n'.preview-pane.pane-item':\n  'ctrl-j': 'core:move-down'\n  'ctrl-k': 'core:move-up'\n```\n. ",
    "sammahfoud": "I'm using Atom 1.0.0 and vim-mode 0.54.0\nIn safe mode, vim-mode seems to be enabled in the Settings, but it doesn't work at all\n. Thank you for your help, here is the output :\n\n/home/mahfoud/.atom/packages (3)\n\u251c\u2500\u2500 desert@0.2.0\n\u251c\u2500\u2500 dracula-theme@0.7.6\n\u2514\u2500\u2500 vim-mode@0.54.0\n\nOn Thu, Jul 9, 2015 at 12:44 AM, Wliu notifications@github.com wrote:\n\n> My apologies, totally forgot that this was on vim-mode (so safe mode would\n> disable vim-mode).\n> Can you then paste the output of apm list --installed? Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/746#issuecomment-119760553.\n\n## \n\nMahfoud Sidi Ali Mebarek\n+213 555 88 39 61\n. I'm using Atom 1.0.0 and vim-mode 0.54.0\nIn safe mode, vim-mode seems to be enabled in the Settings, but it doesn't work at all\n. Thank you for your help, here is the output :\n\n/home/mahfoud/.atom/packages (3)\n\u251c\u2500\u2500 desert@0.2.0\n\u251c\u2500\u2500 dracula-theme@0.7.6\n\u2514\u2500\u2500 vim-mode@0.54.0\n\nOn Thu, Jul 9, 2015 at 12:44 AM, Wliu notifications@github.com wrote:\n\n> My apologies, totally forgot that this was on vim-mode (so safe mode would\n> disable vim-mode).\n> Can you then paste the output of apm list --installed? Thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/746#issuecomment-119760553.\n\n## \n\nMahfoud Sidi Ali Mebarek\n+213 555 88 39 61\n. ",
    "smaili": "You'd be surprised how useful it is :)\n\nI'm pretty sure it's not a plugin, it's the default behavior for MacVim.  Many times I find myself refactoring or pasting in text with only parts to replace, and the most intuitive way is to just select and start typing away.\n\nI wasn't aware of the change/substitute but I'd still like to have this functionality because I'm sure I'm not the only Atom user coming from MacVim.  But if you don't feel it's worth having as the default functionality, what about having it be a configuration setting?  Maybe label it something along the lines of `Auto insert mode on selection typing`?  Kind of lengthy but gets the point across :)\n. Ahh, yes you're completely right Scott!  I didn't realize I had this in my vimrc file\n\n```\nsource $VIMRUNTIME/mswin.vim\nbehave mswin\n```\n\nTo be honest, I haven't yet run into a case I needed it.  May just be because I've grown so used to using the `mswin` behavior :)\n. But as I said, I would be okay with having it be a configuration setting rather than default behavior.  Since I now understand it's part of the `mswin` behavior, maybe that would be a more appropriate setting name?  That way, it also goes more inline with how it's done on MacVim, and any other behaviors from it that people would like to add, you can add it under this same setting rather than having to create a different setting name for it.  What do you think?\n. To be honest, all files.  I'm pretty sure I have line wrapping completely disabled but if you tell me what the setting name is I can check to make sure.\n\nI'll go ahead and open a new issue regarding the bar.\n. Thanks for the clarification, I didn't realize ex-mode may be the package.\n\nIs there a way to transfer issues between projects or should we just close this and open a new there?\n. You're absolutely right, it does seem to work.  Although I do agree the selector isn't the most pretty :)\n\nIs there a chance to push this as default behavior?  I think intuitively, when the editor is in command mode, it doesn't really make sense to show the cursor as text.  There's been a few times I first look to the mouse cursor and not the blinking cursor, and because it shows the text cursor I think I'm in insert mode.\n. Just updated and it seems that `command-mode` has been renamed to `normal-mode`.\n. In addition, when searching for a pattern, if none could be found, show a message, such as:\n\n![not-found](https://cloud.githubusercontent.com/assets/4451986/8597603/5df66efc-260b-11e5-8c7c-1c938677c61c.png)\n\nAlso, if you reach the end of the file while searching and go back to the top, also show a message:\n![back-to-top](https://cloud.githubusercontent.com/assets/4451986/8597701/d2203b82-260b-11e5-8bc1-2c174a6b9f23.png)\n\nI hope you don't mind Scott that I've added these here as well since they all are related to search status.  If you'd rather break them into multiple let me know.\n. Yes that's exactly what I mean.\n. But here's the thing, once you go into visual mode, shouldn't `shift+up` be treated as a vim-mode movement?  It feels strange that if I'm on a line, select it in visual mode, and go up, suddenly it's gone, but if I'm on that same line, select it in visual mode, and go down, both the initial line and next line are selected.\n. Don't mind at all :)\n\nThat's how visual selection works in MacVim.  In MacVim, if you press `up` without `shift` once in visual mode it will exit out, it only selects if you hold `shift` while you press `up`.  Which to me is more intuitive because we're usually accustomed to holding shift whenever you want to select text.  It also gives the nice benefit of quickly getting out of visual mode without having to reach for the `esc` key :)\n. For me personally, it'd be nice, but if it's something others would protest then I'm okay with it :+1: \n. You'd be surprised how useful it is :)\n\nI'm pretty sure it's not a plugin, it's the default behavior for MacVim.  Many times I find myself refactoring or pasting in text with only parts to replace, and the most intuitive way is to just select and start typing away.\n\nI wasn't aware of the change/substitute but I'd still like to have this functionality because I'm sure I'm not the only Atom user coming from MacVim.  But if you don't feel it's worth having as the default functionality, what about having it be a configuration setting?  Maybe label it something along the lines of `Auto insert mode on selection typing`?  Kind of lengthy but gets the point across :)\n. Ahh, yes you're completely right Scott!  I didn't realize I had this in my vimrc file\n\n```\nsource $VIMRUNTIME/mswin.vim\nbehave mswin\n```\n\nTo be honest, I haven't yet run into a case I needed it.  May just be because I've grown so used to using the `mswin` behavior :)\n. But as I said, I would be okay with having it be a configuration setting rather than default behavior.  Since I now understand it's part of the `mswin` behavior, maybe that would be a more appropriate setting name?  That way, it also goes more inline with how it's done on MacVim, and any other behaviors from it that people would like to add, you can add it under this same setting rather than having to create a different setting name for it.  What do you think?\n. To be honest, all files.  I'm pretty sure I have line wrapping completely disabled but if you tell me what the setting name is I can check to make sure.\n\nI'll go ahead and open a new issue regarding the bar.\n. Thanks for the clarification, I didn't realize ex-mode may be the package.\n\nIs there a way to transfer issues between projects or should we just close this and open a new there?\n. You're absolutely right, it does seem to work.  Although I do agree the selector isn't the most pretty :)\n\nIs there a chance to push this as default behavior?  I think intuitively, when the editor is in command mode, it doesn't really make sense to show the cursor as text.  There's been a few times I first look to the mouse cursor and not the blinking cursor, and because it shows the text cursor I think I'm in insert mode.\n. Just updated and it seems that `command-mode` has been renamed to `normal-mode`.\n. In addition, when searching for a pattern, if none could be found, show a message, such as:\n\n![not-found](https://cloud.githubusercontent.com/assets/4451986/8597603/5df66efc-260b-11e5-8c7c-1c938677c61c.png)\n\nAlso, if you reach the end of the file while searching and go back to the top, also show a message:\n![back-to-top](https://cloud.githubusercontent.com/assets/4451986/8597701/d2203b82-260b-11e5-8bc1-2c174a6b9f23.png)\n\nI hope you don't mind Scott that I've added these here as well since they all are related to search status.  If you'd rather break them into multiple let me know.\n. Yes that's exactly what I mean.\n. But here's the thing, once you go into visual mode, shouldn't `shift+up` be treated as a vim-mode movement?  It feels strange that if I'm on a line, select it in visual mode, and go up, suddenly it's gone, but if I'm on that same line, select it in visual mode, and go down, both the initial line and next line are selected.\n. Don't mind at all :)\n\nThat's how visual selection works in MacVim.  In MacVim, if you press `up` without `shift` once in visual mode it will exit out, it only selects if you hold `shift` while you press `up`.  Which to me is more intuitive because we're usually accustomed to holding shift whenever you want to select text.  It also gives the nice benefit of quickly getting out of visual mode without having to reach for the `esc` key :)\n. For me personally, it'd be nice, but if it's something others would protest then I'm okay with it :+1: \n. ",
    "yukariyoryu": "The status is that while I open a file firstly in view mode. Then I insert \"i\" to change to the edit mode. And so on I open another file which also in edit mode as the icon views on right bottom. But the cursor is a block not a insert-line. It appears every time when I open more than one file. I just install vim mode. I didn't install any theme .Ah my OS is Mac OS X 10.10.4 .\nThank you.\n\n> \u5728 2015\u5e747\u670818\u65e5\uff0c07:45\uff0cScott Bronson notifications@github.com \u5199\u9053\uff1a\n> \n> Strange. Is your insert cursor always a block, or is it just sometimes? Can you give some hints on how to reproduce this?\n> \n> Do you have anything in your styles.less that's screwing it up?  Does it happen when starting in safe mode?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. The status is that while I open a file firstly in view mode. Then I insert \"i\" to change to the edit mode. And so on I open another file which also in edit mode as the icon views on right bottom. But the cursor is a block not a insert-line. It appears every time when I open more than one file. I just install vim mode. I didn't install any theme .Ah my OS is Mac OS X 10.10.4 .\nThank you.\n\n> \u5728 2015\u5e747\u670818\u65e5\uff0c07:45\uff0cScott Bronson notifications@github.com \u5199\u9053\uff1a\n> \n> Strange. Is your insert cursor always a block, or is it just sometimes? Can you give some hints on how to reproduce this?\n> \n> Do you have anything in your styles.less that's screwing it up?  Does it happen when starting in safe mode?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "evanjbowling": "I was able to reproduce this issue in _two_ different scenarios:\n\n### Scenario A\n\n_file in 'Normal' mode is labeled as 'Insert' mode_\n1. Open file 1\n2. Open file 2\n3. Tab to file 1\n4. Press 'i' for insert mode on file 1\n5. Tab to file 2\n\n#### Observation\n\nMode displayed incorrectly as 'Insert' on file 2. Block cursor still displayed as shown in screenshot above. Interactions (e.g. press 'i') prove that file is still in 'Normal' mode. Entering 'Insert' mode corrects the issue.\n\n### Scenario B\n\n_file in 'Insert' mode labeled as 'Normal' mode_\n1. Open file 1\n2. Press 'i' for insert mode on file 1\n3. Open file 2\n4. Press 'i' for insert mode on file 2\n5. Tab to file 1\n6. Press 'ESC' for normal mode on file 1\n7. Tab to file 2\n\n#### Observation\n\nMode displayed incorrectly as 'Normal' on file 2. Insert cursor still displayed.\n\n#### Best Guess\n\nThese scenarios seem to apply to all other text files opened. Perhaps on the mode change of a single file, the entire array of text files currently open is being processed by mistake.\n. I was able to reproduce this issue in _two_ different scenarios:\n\n### Scenario A\n\n_file in 'Normal' mode is labeled as 'Insert' mode_\n1. Open file 1\n2. Open file 2\n3. Tab to file 1\n4. Press 'i' for insert mode on file 1\n5. Tab to file 2\n\n#### Observation\n\nMode displayed incorrectly as 'Insert' on file 2. Block cursor still displayed as shown in screenshot above. Interactions (e.g. press 'i') prove that file is still in 'Normal' mode. Entering 'Insert' mode corrects the issue.\n\n### Scenario B\n\n_file in 'Insert' mode labeled as 'Normal' mode_\n1. Open file 1\n2. Press 'i' for insert mode on file 1\n3. Open file 2\n4. Press 'i' for insert mode on file 2\n5. Tab to file 1\n6. Press 'ESC' for normal mode on file 1\n7. Tab to file 2\n\n#### Observation\n\nMode displayed incorrectly as 'Normal' on file 2. Insert cursor still displayed.\n\n#### Best Guess\n\nThese scenarios seem to apply to all other text files opened. Perhaps on the mode change of a single file, the entire array of text files currently open is being processed by mistake.\n. ",
    "motiko": "Wow thanks a bunch. \nLooks like i have some work to do :octocat:  \n. Wow thanks a bunch. \nLooks like i have some work to do :octocat:  \n. ",
    "bzx": "+1 on latest Atom & OSX\n. @jacekkopecky \n\nvim-mode latest, which is: 0.57.0\n\nrepro steps:\n- open HTML document, with some code in it\n- focus cursor on any tag that has some text inside, for example:\n\n```\n<p class=\"something\">i want to select text inside tags</p>\n```\n- toggle command console (cmd+P)\n- find and select this option \"Vim Mode: Select inside tags\" \n- the error appears and it tells me that it was already filed, which points me to #705, which points me to this bug.\n\nthanks!\n. radose ;) zdravim, ahoj!\n. +1 on latest Atom & OSX\n. @jacekkopecky \n\nvim-mode latest, which is: 0.57.0\n\nrepro steps:\n- open HTML document, with some code in it\n- focus cursor on any tag that has some text inside, for example:\n\n```\n<p class=\"something\">i want to select text inside tags</p>\n```\n- toggle command console (cmd+P)\n- find and select this option \"Vim Mode: Select inside tags\" \n- the error appears and it tells me that it was already filed, which points me to #705, which points me to this bug.\n\nthanks!\n. radose ;) zdravim, ahoj!\n. ",
    "ragunr": "Ah I see now, got thrown off by the discussion of multi-line details in that issue.\n. Ah I see now, got thrown off by the discussion of multi-line details in that issue.\n. ",
    "ceres629": "Also having an issue with this!\n. Also having an issue with this!\n. ",
    "mrthebob": "Yeah, it's a great feature.\n\nI was wondering the same thing - if it's something that would be better in Core...\n. Opened a ticket there.  Will have to see what they say: https://github.com/atom/atom/issues/7917\n. Yeah, it's a great feature.\n\nI was wondering the same thing - if it's something that would be better in Core...\n. Opened a ticket there.  Will have to see what they say: https://github.com/atom/atom/issues/7917\n. ",
    "GabeIsman": "Ran into this issue. I can move down past a wrapped line, but never up.\n. Ran into this issue. I can move down past a wrapped line, but never up.\n. ",
    "passabilities": "Never mind, I just had to quit Atom and restart. \n. Never mind, I just had to quit Atom and restart. \n. ",
    "s-taylor": "If the intention is to mimic vims functionality, it's definitely a bug and not a feature.\n. @icook thanks for this.\n. If the intention is to mimic vims functionality, it's definitely a bug and not a feature.\n. @icook thanks for this.\n. ",
    "icook": "I just did a simple fix for this, but no tests and it doesn't perfectly mirror vim functionality. In my patch, if the new top of window or bottom of window is present then the cursor moves there. Not very elegant, but figured I mention it as a resource.\n\nhttps://github.com/icook/vim-mode/tree/fix-scroll-top\n. I just did a simple fix for this, but no tests and it doesn't perfectly mirror vim functionality. In my patch, if the new top of window or bottom of window is present then the cursor moves there. Not very elegant, but figured I mention it as a resource.\n\nhttps://github.com/icook/vim-mode/tree/fix-scroll-top\n. ",
    "seokgyo": "+1\n. +1\n. ",
    "macgyver": ":+1: \n. Slightly related: pressing ctrl+u and ctrl+d in vim moves the page down and also moves the cursor. In atom vim-mode the cursor remains where it was. \n. Ah, so it is, thanks! I had upgraded but it seems like I needed to restart\nAtom for it to take effect.\n\nOn Thu, Nov 5, 2015 at 3:08 PM, Max Brunsfeld notifications@github.com\nwrote:\n\n> @macgyver https://github.com/macgyver I believe that is fixed in 0.63.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/799#issuecomment-154175559.\n. :+1: \n. Slightly related: pressing ctrl+u and ctrl+d in vim moves the page down and also moves the cursor. In atom vim-mode the cursor remains where it was. \n. Ah, so it is, thanks! I had upgraded but it seems like I needed to restart\nAtom for it to take effect.\n\nOn Thu, Nov 5, 2015 at 3:08 PM, Max Brunsfeld notifications@github.com\nwrote:\n\n> @macgyver https://github.com/macgyver I believe that is fixed in 0.63.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/799#issuecomment-154175559.\n. ",
    "redbmk": "Even without vim-mode enabled, I've noticed that when you save a file in atom, if the last line is not blank, it adds a blank line.\n\nSo, even with this fix in place, it looks like once you save the file you might get a new line anyway... Is that a bug or on purpose?\n. This should probably be closed in favor of #801 \n. Even without vim-mode enabled, I've noticed that when you save a file in atom, if the last line is not blank, it adds a blank line.\n\nSo, even with this fix in place, it looks like once you save the file you might get a new line anyway... Is that a bug or on purpose?\n. This should probably be closed in favor of #801 \n. ",
    "j127": "There seems to be a related problem with `cc`. Both `cc` and `dd` don't work on the last line, if it's blank. Sometimes I use `cc` in Vim to enter insert mode in a new, blank file, but it doesn't work in Atom, because that first blank line is also the last.\n\n> it looks like once you save the file you might get a new line anyway... Is that a bug or on purpose\n\nYou should be able to override that with [this package](https://atom.io/packages/editorconfig) and a [.editorconfig file](http://editorconfig.org/):\n\n```\ninsert_final_newline = false\n```\n. There seems to be a related problem with `cc`. Both `cc` and `dd` don't work on the last line, if it's blank. Sometimes I use `cc` in Vim to enter insert mode in a new, blank file, but it doesn't work in Atom, because that first blank line is also the last.\n\n> it looks like once you save the file you might get a new line anyway... Is that a bug or on purpose\n\nYou should be able to override that with [this package](https://atom.io/packages/editorconfig) and a [.editorconfig file](http://editorconfig.org/):\n\n```\ninsert_final_newline = false\n```\n. ",
    "pirminis": "+1 this is definately fresh new bug\n. spacebar is definately not working in keymaps file anymore.\n\nsnippet that was working in atom-beta < 1.12\n\n```\n\"atom-text-editor.vim-mode.normal-mode\":\n  \"space a\": \"vim-mode:insert-after-end-of-line\"\n```\n. +1 this is definately fresh new bug\n. spacebar is definately not working in keymaps file anymore.\n\nsnippet that was working in atom-beta < 1.12\n\n```\n\"atom-text-editor.vim-mode.normal-mode\":\n  \"space a\": \"vim-mode:insert-after-end-of-line\"\n```\n. ",
    "mcastilho": "Do we have a fix for this ? It's driving me insane\n. @jacekkopecky Thanks.  How can I get this fix? Still doesn't show an update in Atom. Are you waiting for more changes to do a release? 0.58 still have this issue.\n. Do we have a fix for this ? It's driving me insane\n. @jacekkopecky Thanks.  How can I get this fix? Still doesn't show an update in Atom. Are you waiting for more changes to do a release? 0.58 still have this issue.\n. ",
    "claudiodsf": "But text can still be selected when in normal mode, so the text cursor should be used.\nThis is, for instance, the case for any web browser: web pages are (normally) read-only, yet there is a text cursor when text can be selected.\n. But text can still be selected when in normal mode, so the text cursor should be used.\nThis is, for instance, the case for any web browser: web pages are (normally) read-only, yet there is a text cursor when text can be selected.\n. ",
    "po1o": "![vim-mode](https://cloud.githubusercontent.com/assets/5702825/9288311/01d0fc98-4341-11e5-9be9-69d20bbe7ec2.gif)\n. Argh... I made a mistake :(\nSorry\n. ![vim-mode](https://cloud.githubusercontent.com/assets/5702825/9288311/01d0fc98-4341-11e5-9be9-69d20bbe7ec2.gif)\n. Argh... I made a mistake :(\nSorry\n. ",
    "thaldyron": "Something like this should work, but it only works for g$ and neither for g^ nor g0: \n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'g^': 'editor:move-to-beginning-of-screen-line'\n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'g0': 'editor:move-to-beginning-of-screen-line'\n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'g$': 'editor:move-to-end-of-screen-line'\n. Something like this should work, but it only works for g$ and neither for g^ nor g0: \n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'g^': 'editor:move-to-beginning-of-screen-line'\n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'g0': 'editor:move-to-beginning-of-screen-line'\n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'g$': 'editor:move-to-end-of-screen-line'\n. ",
    "voltrevo": "Interesting. Thanks for getting back to me.\n. Interesting. Thanks for getting back to me.\n. ",
    "sejjiin": "Happens consistently for me if I `ctrl-y` at the top of a new empty file. Key Binding Resolver has `vim-mode:scroll-up` and `core:redo` checked. I don't have `emmet` or `minimap`.\n. Happens consistently for me if I `ctrl-y` at the top of a new empty file. Key Binding Resolver has `vim-mode:scroll-up` and `core:redo` checked. I don't have `emmet` or `minimap`.\n. ",
    "DylanBruzenak": "Duplicate of https://github.com/atom/vim-mode/issues/806\n. Duplicate of https://github.com/atom/vim-mode/issues/806\n. ",
    "RongxinZhang": "@maxbrunsfeld yea. that. solved. it. lol\n. same issue here! lol :dart: \nosx: 10,10.5\nvim mode: 0.58.0\natom: 1.0.13\n. @maxbrunsfeld yea. that. solved. it. lol\n. same issue here! lol :dart: \nosx: 10,10.5\nvim mode: 0.58.0\natom: 1.0.13\n. ",
    "rumpelsepp": "> When the cursor is gone, do other things work?\n\nThe cursor reappears but stays on the same position when I press, e.g. h. After that it works as it did before.\n. I use a german keyboard layout; so I just press `^`.\n. ```\n$ localectl\n   System Locale: LANG=en_US.UTF-8\n                  LC_NUMERIC=de_DE.UTF-8\n                  LC_TIME=de_DE.UTF-8\n                  LC_MONETARY=de_DE.UTF-8\n                  LC_PAPER=de_DE.UTF-8\n                  LC_MEASUREMENT=de_DE.UTF-8\n       VC Keymap: de-latin1-nodeadkeys\n      X11 Layout: de\n     X11 Variant: nodeadkeys\n```\n. The cursor does not disappear any more. But it also does not jump to the intended position; it just stays where it is (when pressing `^`).\n. Clearly a keyboard layout issue. I just switched to US layout and it works.\n. ![screenshot from 2015-08-19 15-49-56](https://cloud.githubusercontent.com/assets/1961699/9357950/f47ea17a-4689-11e5-9b22-b845e90e7b3c.png)\n\nThat's clearly wrong.\n. To which of these ~1k atom packages should this be reported to?\n. > When the cursor is gone, do other things work?\n\nThe cursor reappears but stays on the same position when I press, e.g. h. After that it works as it did before.\n. I use a german keyboard layout; so I just press `^`.\n. ```\n$ localectl\n   System Locale: LANG=en_US.UTF-8\n                  LC_NUMERIC=de_DE.UTF-8\n                  LC_TIME=de_DE.UTF-8\n                  LC_MONETARY=de_DE.UTF-8\n                  LC_PAPER=de_DE.UTF-8\n                  LC_MEASUREMENT=de_DE.UTF-8\n       VC Keymap: de-latin1-nodeadkeys\n      X11 Layout: de\n     X11 Variant: nodeadkeys\n```\n. The cursor does not disappear any more. But it also does not jump to the intended position; it just stays where it is (when pressing `^`).\n. Clearly a keyboard layout issue. I just switched to US layout and it works.\n. ![screenshot from 2015-08-19 15-49-56](https://cloud.githubusercontent.com/assets/1961699/9357950/f47ea17a-4689-11e5-9b22-b845e90e7b3c.png)\n\nThat's clearly wrong.\n. To which of these ~1k atom packages should this be reported to?\n. ",
    "brigand": "``` js\n// javascript\nfunction f(){\nvar a = 1;\n}\n```\n\nCursor at start of file, `=G`\n- vim: reindents\n- atom: nothing\n\nCursor at end of file, `=G`\n- vim: nothing\n- atom: reindents\n\nIn both vim and atom G alone moves the cursor to the end of the file. Atom behaves like vim in other cases, e.g dG deletes from cursor to end of file, but =G formats from cursor to top of file.\n\n---\n\nI looked at `:help G` in vim.\n\n```\nG                       Goto line [count], default last line, on the first\n                        non-blank character linewise.  If 'startofline' not\n                        set, keep the same column.\n                        G is a one of jump-motions.\n```\n\nSo with this and the cursor at the start of the file, \n\n``` js\nfunction f(){\nvar a = 1;\nvar a = 1;\nvar a = 1;\n}\n```\n\nIn both atom and vim =3G gives the following. It's as-if atom ignores the \"default last line\" part just for the `=` command.\n\n``` js\nfunction f(){\n  var a = 1;\n  var a = 1;\nvar a = 1;\n}\n```\n. ``` js\n// javascript\nfunction f(){\nvar a = 1;\n}\n```\n\nCursor at start of file, `=G`\n- vim: reindents\n- atom: nothing\n\nCursor at end of file, `=G`\n- vim: nothing\n- atom: reindents\n\nIn both vim and atom G alone moves the cursor to the end of the file. Atom behaves like vim in other cases, e.g dG deletes from cursor to end of file, but =G formats from cursor to top of file.\n\n---\n\nI looked at `:help G` in vim.\n\n```\nG                       Goto line [count], default last line, on the first\n                        non-blank character linewise.  If 'startofline' not\n                        set, keep the same column.\n                        G is a one of jump-motions.\n```\n\nSo with this and the cursor at the start of the file, \n\n``` js\nfunction f(){\nvar a = 1;\nvar a = 1;\nvar a = 1;\n}\n```\n\nIn both atom and vim =3G gives the following. It's as-if atom ignores the \"default last line\" part just for the `=` command.\n\n``` js\nfunction f(){\n  var a = 1;\n  var a = 1;\nvar a = 1;\n}\n```\n. ",
    "dentarg": "thanks @DylanBruzenak :) your snippet helped me get the same behavior I have [in Sublime Text](https://github.com/dentarg/gists/blob/master/gists/sublime-text/stop_insert_on_save.py)\n. thanks @DylanBruzenak :) your snippet helped me get the same behavior I have [in Sublime Text](https://github.com/dentarg/gists/blob/master/gists/sublime-text/stop_insert_on_save.py)\n. ",
    "despairblue": "@DylanBruzenak awesome. I wonder if there is an event that is triggered when a pane loses focus. I tend to switch to another pane thinking I'm in normal mode.  \n. I gathered some info using the `bug-report` package (the comand history specifically):\n\n``` md\n## Did not work\n\n* -0:05.3 vim-mode:change (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:05.3 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:05.2 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* 3x -0:05.2 blur (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n\n* -0:04.2 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:04.2 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:04.1 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* 3x -0:04.1 blur (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n\n\n## Worked\n* -0:02.9 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode)\n* -0:02.9 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode)\n* 3x -0:02.9 blur (atom-text-editor.editor.vim-mode.normal-mode)\n\n* -0:06.4 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:06.4 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* 3x -0:06.4 blur (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n```\n\nFirst I though it's because of the hyperclick package (from nuclide). Though it worked in some cases even though it was active :confused: \n\nAny other ideas on how to debug this?   \n. Ok, I deactivated `hyperclick` and it still happens: \n\n``` md\n     -0:40.8 vim-mode:activate-insert-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  5x -0:39.3 core:backspace (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:21.7 core:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:21.3 autocomplete-plus:confirm (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:15.3 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:15.2 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:06.7 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:06.7 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:06.6 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:06.6 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.4 command-palette:toggle (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.1 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.0 core:confirm (atom-text-editor.editor.mini)\n     -0:00.0 blur (atom-text-editor.editor.mini)\n     -0:00.0 bug-report:open (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n```\n. @50Wliu I found a way to reproduce it:\n1. Deactivate all packages but vim-mode\n2. create this file:\n\n``` js\nconst foo = require('/eins/zwei/drei/vier/fuenf/sechs/sieben/acht/neun.js')\n```\n1. place cursor on the first slash and keep pressing `d-t-/` (it'l only work every second time)\n\n![vim-mode](https://cloud.githubusercontent.com/assets/927609/14561543/434fb0ba-0317-11e6-9e8b-d3a4c7f74410.gif)\n. @DylanBruzenak awesome. I wonder if there is an event that is triggered when a pane loses focus. I tend to switch to another pane thinking I'm in normal mode.  \n. I gathered some info using the `bug-report` package (the comand history specifically):\n\n``` md\n## Did not work\n\n* -0:05.3 vim-mode:change (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:05.3 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:05.2 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* 3x -0:05.2 blur (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n\n* -0:04.2 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:04.2 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:04.1 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* 3x -0:04.1 blur (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n\n\n## Worked\n* -0:02.9 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode)\n* -0:02.9 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode)\n* 3x -0:02.9 blur (atom-text-editor.editor.vim-mode.normal-mode)\n\n* -0:06.4 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* -0:06.4 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n* 3x -0:06.4 blur (atom-text-editor.editor.vim-mode.normal-mode.hyperclick.is-focused)\n```\n\nFirst I though it's because of the hyperclick package (from nuclide). Though it worked in some cases even though it was active :confused: \n\nAny other ideas on how to debug this?   \n. Ok, I deactivated `hyperclick` and it still happens: \n\n``` md\n     -0:40.8 vim-mode:activate-insert-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  5x -0:39.3 core:backspace (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:21.7 core:move-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:21.3 autocomplete-plus:confirm (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:15.3 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  2x -0:15.2 vim-mode:move-right (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:06.7 vim-mode:delete (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:06.7 vim-mode:till (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:06.6 vim-mode:activate-normal-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n  3x -0:06.6 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.4 command-palette:toggle (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:04.1 blur (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.0 core:confirm (atom-text-editor.editor.mini)\n     -0:00.0 blur (atom-text-editor.editor.mini)\n     -0:00.0 bug-report:open (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n```\n. @50Wliu I found a way to reproduce it:\n1. Deactivate all packages but vim-mode\n2. create this file:\n\n``` js\nconst foo = require('/eins/zwei/drei/vier/fuenf/sechs/sieben/acht/neun.js')\n```\n1. place cursor on the first slash and keep pressing `d-t-/` (it'l only work every second time)\n\n![vim-mode](https://cloud.githubusercontent.com/assets/927609/14561543/434fb0ba-0317-11e6-9e8b-d3a4c7f74410.gif)\n. ",
    "ramikassab": "Yup, the first place I turned to whenever this occurred were the updates.\n. I haven't tried disabling every single package but I did disable many of the ones I felt could be responsible such as any linters, autocompletions, git, terminal, beautifiers, etc. I disabled them one by one in hopes of trying to pinpoint the culprit. I'd open Atom, reproduce the editor locking issue (select some or a full line text visually with 'v', hit 'c' to change and put me in insert mode, type without results, go to Atom's prefs and only use my mouse since my keyboard wouldn't even work there, disable the next perceived most likely culprit plugin, quit.... rinse and repeated.\n\nI hit a point where the issue stopping occurring while editing Django html templates in my dedicated template Atom window, which had me thinking I had figured it out. However, when I went to my LESS/CSS window of tabs and began working there, the window's editor locked. After that I quite and have since returned to my pretty beefed up terminal VIM setup.\n\nI just opened ATOM while posting and saw both an update for vim-mode and ATOM and ran both. I've for my terminal VIM setup goin and I've been knee deep it a project for the past few weeks so just haven't had the nerve to spend more time on the ATOM issue and certainly can't use it without VIM. I've switch back today to use it for a while. I'll let you know if the issue creeps up again. Thanks \n. Yup, the first place I turned to whenever this occurred were the updates.\n. I haven't tried disabling every single package but I did disable many of the ones I felt could be responsible such as any linters, autocompletions, git, terminal, beautifiers, etc. I disabled them one by one in hopes of trying to pinpoint the culprit. I'd open Atom, reproduce the editor locking issue (select some or a full line text visually with 'v', hit 'c' to change and put me in insert mode, type without results, go to Atom's prefs and only use my mouse since my keyboard wouldn't even work there, disable the next perceived most likely culprit plugin, quit.... rinse and repeated.\n\nI hit a point where the issue stopping occurring while editing Django html templates in my dedicated template Atom window, which had me thinking I had figured it out. However, when I went to my LESS/CSS window of tabs and began working there, the window's editor locked. After that I quite and have since returned to my pretty beefed up terminal VIM setup.\n\nI just opened ATOM while posting and saw both an update for vim-mode and ATOM and ran both. I've for my terminal VIM setup goin and I've been knee deep it a project for the past few weeks so just haven't had the nerve to spend more time on the ATOM issue and certainly can't use it without VIM. I've switch back today to use it for a while. I'll let you know if the issue creeps up again. Thanks \n. ",
    "kenmori": "other account this, thank you @wolftune \nyes, this like picture \nnow ctrV is..\n![2015-08-31 6 28 45](https://cloud.githubusercontent.com/assets/9529003/9569543/91009fb2-4fa9-11e5-9cab-b5ee93944e42.png)\n\nI want to know how to this like\n![2015-08-31 6 24 51](https://cloud.githubusercontent.com/assets/9529003/9569524/309b202a-4fa9-11e5-8852-b586521f11bc.png)\n\nOne character only\n. other account this, thank you @wolftune \nyes, this like picture \nnow ctrV is..\n![2015-08-31 6 28 45](https://cloud.githubusercontent.com/assets/9529003/9569543/91009fb2-4fa9-11e5-9cab-b5ee93944e42.png)\n\nI want to know how to this like\n![2015-08-31 6 24 51](https://cloud.githubusercontent.com/assets/9529003/9569524/309b202a-4fa9-11e5-8852-b586521f11bc.png)\n\nOne character only\n. ",
    "mushketyk": "@jacekkopecky Hi, I could only find bindings for \"c\" in Packages -> Settings View -> Show Keybindings:\nc   vim-mode:change Vim Mode    atom-text-editor.vim-mode:not(.insert-mode)\n. I also noticed that I can reproduce this bug only from time to time and if I restart Sublime everything works fine again.\n. @jacekkopecky Hi, I could only find bindings for \"c\" in Packages -> Settings View -> Show Keybindings:\nc   vim-mode:change Vim Mode    atom-text-editor.vim-mode:not(.insert-mode)\n. I also noticed that I can reproduce this bug only from time to time and if I restart Sublime everything works fine again.\n. ",
    "bookercodes": "I am a new `vim-mode` user and this is a limitation I have encountered as well.\n\nThe _Key Binding Resolver_ shows `i'`.\n\nAnd here is the code I am trying to perform the operation on:\n\n``` elixir\nExUnit.start\n\ndefmodule MyTest do\n  use ExUnit.Case\n    test 'i wanna replace text in here pls' do\n      assert 1 + 1 == 2\n    end\nend\n```\n. Is there any more information you would like from me?\n\nI noticed that `ci{` etc. works fine.\n. > Can you reliably reproduce the condition?\n\n@jacekkopecky Yes, I can.\n\n> And if you can reproduce it, does it also show up when you disable packages other than vim-mode and restart Atom?\n\nYes.\n\n> It could also be that the user sometimes, through a distraction, spends more than a second between typing i and ' \u2013 that would cancel the Atom command.\n\nIt _does_ work with `ci{` etc. so I do not think this is the problem.\n\nI am running Atom 1.0.11 on Windows 10 64bit. I'll try reinstalling Atom now. \n\nAny other questions I can answer to help solve this? Thanks.\n. _Eureka!_\n\nThis issue stems from using _English (United Kingdom)_ keyboard layout. It works if I use _English (United States)_.\n\nMakes sense because @mushketyk and I are both in the United Kingdom.\n\n**How to reproduce:** \n\n(On Windows 10) \n1. Change keyboard layout to _English (United Kingdom)_ ([_tutorial_](https://acer.custhelp.com/app/answers/detail/a_id/37408/~/windows-10%3A-changing-keyboard-layout)).\n2. Follow steps in OP\n\n**Other:**\n\nI dunno if this is a problem with _vim-mode_ or _Atom_ in general because [_vim-surround_](https://github.com/gepoch/vim-surround) commands that involve `'` or `\"` do not work with _English (United Kingdom)_ either... //cc @gepoch\n. @50Wliu No I do not - I _never_ use AltGr.\n. Is there any more information I can provide? I _really_ miss this feature :cry: \n. @jacekkopecky That definitely helped - now I can use `ci\"` but `ci'` still does not work. Thanks.\n\nUnfortunately, I adopted a single-quote convention in my app (i.e. I use `'` instead of `\"`). Any other thoughts?\n. Upon further inspection [_keyboard-localization_](https://atom.io/packages/keyboard-localization) works very well for me and it _should_ for @mushketyk, too.\n\nI generated a custom keymap using [these instructions](https://github.com/andischerer/atom-keyboard-localization#generate-your-own-keymap):\n\n``` json\n{\n    \"50\": {\n        \"shifted\": 34\n    },\n    \"192\": {\n        \"unshifted\": 39\n    }\n}\n```\n\nAnd now `ci\"` and `ci'` work fine. [_vim-surround_](https://github.com/gepoch/vim-surround) commands involving `'` and `\"` work fine now as well.\n. I am a new `vim-mode` user and this is a limitation I have encountered as well.\n\nThe _Key Binding Resolver_ shows `i'`.\n\nAnd here is the code I am trying to perform the operation on:\n\n``` elixir\nExUnit.start\n\ndefmodule MyTest do\n  use ExUnit.Case\n    test 'i wanna replace text in here pls' do\n      assert 1 + 1 == 2\n    end\nend\n```\n. Is there any more information you would like from me?\n\nI noticed that `ci{` etc. works fine.\n. > Can you reliably reproduce the condition?\n\n@jacekkopecky Yes, I can.\n\n> And if you can reproduce it, does it also show up when you disable packages other than vim-mode and restart Atom?\n\nYes.\n\n> It could also be that the user sometimes, through a distraction, spends more than a second between typing i and ' \u2013 that would cancel the Atom command.\n\nIt _does_ work with `ci{` etc. so I do not think this is the problem.\n\nI am running Atom 1.0.11 on Windows 10 64bit. I'll try reinstalling Atom now. \n\nAny other questions I can answer to help solve this? Thanks.\n. _Eureka!_\n\nThis issue stems from using _English (United Kingdom)_ keyboard layout. It works if I use _English (United States)_.\n\nMakes sense because @mushketyk and I are both in the United Kingdom.\n\n**How to reproduce:** \n\n(On Windows 10) \n1. Change keyboard layout to _English (United Kingdom)_ ([_tutorial_](https://acer.custhelp.com/app/answers/detail/a_id/37408/~/windows-10%3A-changing-keyboard-layout)).\n2. Follow steps in OP\n\n**Other:**\n\nI dunno if this is a problem with _vim-mode_ or _Atom_ in general because [_vim-surround_](https://github.com/gepoch/vim-surround) commands that involve `'` or `\"` do not work with _English (United Kingdom)_ either... //cc @gepoch\n. @50Wliu No I do not - I _never_ use AltGr.\n. Is there any more information I can provide? I _really_ miss this feature :cry: \n. @jacekkopecky That definitely helped - now I can use `ci\"` but `ci'` still does not work. Thanks.\n\nUnfortunately, I adopted a single-quote convention in my app (i.e. I use `'` instead of `\"`). Any other thoughts?\n. Upon further inspection [_keyboard-localization_](https://atom.io/packages/keyboard-localization) works very well for me and it _should_ for @mushketyk, too.\n\nI generated a custom keymap using [these instructions](https://github.com/andischerer/atom-keyboard-localization#generate-your-own-keymap):\n\n``` json\n{\n    \"50\": {\n        \"shifted\": 34\n    },\n    \"192\": {\n        \"unshifted\": 39\n    }\n}\n```\n\nAnd now `ci\"` and `ci'` work fine. [_vim-surround_](https://github.com/gepoch/vim-surround) commands involving `'` and `\"` work fine now as well.\n. ",
    "erf": "I'm using this now with `multi-cursor` - all i need !\n\n```\n'.platform-darwin atom-text-editor:not(mini)':\n  'ctrl-j': 'multi-cursor:expandDown'\n  'ctrl-k': 'multi-cursor:expandUp'\n```\n\n..but if i yank word with multiple cursor, only the word under the initial cursor is remembered.\n. I'm using this now with `multi-cursor` - all i need !\n\n```\n'.platform-darwin atom-text-editor:not(mini)':\n  'ctrl-j': 'multi-cursor:expandDown'\n  'ctrl-k': 'multi-cursor:expandUp'\n```\n\n..but if i yank word with multiple cursor, only the word under the initial cursor is remembered.\n. ",
    "pcasaretto": ":+1: \n. :+1: \n. ",
    "kyleholzinger": "Uhh I'm still getting this error. For example, if I have:\n\n``` javascript\nvar a = \"none\";\n```\n\nand do `ciw` when my cursor is over e, it results in:\n\n``` javascript\nvar a = \"\n```\n\nAs you can tell, it removes the word, closing quote, as well as the semicolon\n. Uhh I'm still getting this error. For example, if I have:\n\n``` javascript\nvar a = \"none\";\n```\n\nand do `ciw` when my cursor is over e, it results in:\n\n``` javascript\nvar a = \"\n```\n\nAs you can tell, it removes the word, closing quote, as well as the semicolon\n. ",
    "mertzt89": "For what its worth, if you use GVim on windows, the Ctrl-C binding is configured to return to normal mode. So the binding that vim-mode uses reflects the same behavior. I use Ctrl+Insert for the copy operation.\n. For what its worth, if you use GVim on windows, the Ctrl-C binding is configured to return to normal mode. So the binding that vim-mode uses reflects the same behavior. I use Ctrl+Insert for the copy operation.\n. ",
    "robrez": "On windows, I usually configure a vimrc file to get gvim to play nice.\n\nThe rules on windows seem a bit odd... instead of `.vimrc` gvim looks for a `_vimrc`. I suppose its `%HOMEPATH%` (or something wierd like that) instead of `~` or `$HOME`.\n\nWould be cool vim-mode could read the same _vimrc file as gvim. Is a vimrc file currently supported?\n. On windows, I usually configure a vimrc file to get gvim to play nice.\n\nThe rules on windows seem a bit odd... instead of `.vimrc` gvim looks for a `_vimrc`. I suppose its `%HOMEPATH%` (or something wierd like that) instead of `~` or `$HOME`.\n\nWould be cool vim-mode could read the same _vimrc file as gvim. Is a vimrc file currently supported?\n. ",
    "jvtrudel": "Same bug for me... Is it planned to fix this by setting the default ctrl-c to !native for windows?\n\nAlso, I am quite new (and enthousiat!) as atom user and I do not fully master (yet) the keymap synthax and possibilities. I tried:\n\n``` cson\n '.workspace .editor:not(.mini)':\n    'ctrl-c' :'native!'\n```\n\nBut it doesn't work. What should I do? thx\n. I also tried to restore the core's default:\n\n``` cson\n 'body':\n   'ctrl-c':'core:copy'\n\n 'body .native-key-bindings':\n    'ctrl-c' :'native!'\n```\n\nbut it doesn't work either...\n. Same bug for me... Is it planned to fix this by setting the default ctrl-c to !native for windows?\n\nAlso, I am quite new (and enthousiat!) as atom user and I do not fully master (yet) the keymap synthax and possibilities. I tried:\n\n``` cson\n '.workspace .editor:not(.mini)':\n    'ctrl-c' :'native!'\n```\n\nBut it doesn't work. What should I do? thx\n. I also tried to restore the core's default:\n\n``` cson\n 'body':\n   'ctrl-c':'core:copy'\n\n 'body .native-key-bindings':\n    'ctrl-c' :'native!'\n```\n\nbut it doesn't work either...\n. ",
    "AmethystCat": "Here may be the solution for you [#541](https://github.com/atom/vim-mode/issues/541).\n. Here may be the solution for you [#541](https://github.com/atom/vim-mode/issues/541).\n. ",
    "guanghwang": "It works. Thank you\n. It works. Thank you\n. ",
    "LegNeato": "Just hit this too, let me know if you need any help debugging.\n. Appears to happen when pressing a number (for example, `:1 yy`)\n. Just hit this too, let me know if you need any help debugging.\n. Appears to happen when pressing a number (for example, `:1 yy`)\n. ",
    "kirkonrails": "+1\n. +1\n. ",
    "rbvea": "+1\n. +1\n. ",
    "medifle": "Atom@1.0.13\nOSX@10.10.5\n\nSame bug.\nEvery time I hit a number like `3j`, it throws this error.\n. Atom@1.0.13\nOSX@10.10.5\n\nSame bug.\nEvery time I hit a number like `3j`, it throws this error.\n. ",
    "ianlofs": "+1 \nAtom@1.0.12\nOSX@10.10.4\n. +1 \nAtom@1.0.12\nOSX@10.10.4\n. ",
    "lyweiwei": "+1\nAtom@1.0.13\nWindows Server 2012 R2\n\nRepros when I hit \"+ trying to copy a word to clipboard.\n. Just did some investigation, this seems to be a bug introduced by commit https://github.com/atom/atom/commit/e3f9074f4a98f15a4436a79a2209e2fdece85dd4\n\nAs Atom no longer using the originalEvent as prototype of the CustomEvent, the originalEvent member is lost.\n. +1\nAtom@1.0.13\nWindows Server 2012 R2\n\nRepros when I hit \"+ trying to copy a word to clipboard.\n. Just did some investigation, this seems to be a bug introduced by commit https://github.com/atom/atom/commit/e3f9074f4a98f15a4436a79a2209e2fdece85dd4\n\nAs Atom no longer using the originalEvent as prototype of the CustomEvent, the originalEvent member is lost.\n. ",
    "davepies": "+1\n\nAtom@1.0.13\nOSX@10.11\n. +1\n\nAtom@1.0.13\nOSX@10.11\n. ",
    "stefan-moraru": "+1\n\natom: 1.0.13\nvim-mode: 0.60.0\nosx: 10.10\n\nPlease fix this, as it makes vim-mode unusable.\n. +1\n\natom: 1.0.13\nvim-mode: 0.60.0\nosx: 10.10\n\nPlease fix this, as it makes vim-mode unusable.\n. ",
    "seven-dev": "Same here\n\nWIndows 7 64bits\nvim mode: 0.60.0\nAtom: 1.0.13\n. Same here\n\nWIndows 7 64bits\nvim mode: 0.60.0\nAtom: 1.0.13\n. ",
    "ismk": ":+1: \n\nSame Issue, can't use vim mode without this\n\nOSX: 10.10.5\nVim-Mode: 0.60.0\nAtom: 1.0.13\n. :+1: \n\nSame Issue, can't use vim mode without this\n\nOSX: 10.10.5\nVim-Mode: 0.60.0\nAtom: 1.0.13\n. ",
    "maxArturo": "Thanks! Awesome turnaround for the bug fix.\n. Thanks! Awesome turnaround for the bug fix.\n. ",
    "thetizzo": ":+1: Awesome that this was fixed so quickly.  Kudos to all involved.\n. :+1: Awesome that this was fixed so quickly.  Kudos to all involved.\n. ",
    "skosch": "If this isn't easily fixable in master right now (which I understand; thanks a million for your amazing work anyway!), would one of you mind explaining how to set up a local workaround in the meantime? \"Completing the lines\" by hitting Shift-V after making a rough selection is pretty common behaviour (at least for me it is) and so this regression is a bit annoying.\n. Amazing! Thanks @jimmyye :)\n. That is what I tried. You can select with the mouse, and when the selection changes (i.e. on mouseup), vim-mode switches to visual mode, but it loses the selection immediately. The code would have express `if @mode is insert then store the atom-selection, switch to visual, then create an equivalent vim-mode-selection`.\n. (Also, I don't feel as strongly about #840 as I do about this one, but I don't see why there couldn't be one option to enable both behaviours. In vim, selection == visual mode, so when I see any selected text in atom, I instinctively assume I can manipulate it with vim commands. I'm sure there are others who feel the same?)\n. Doing this properly is trickier than I thought (and Coffeescript isn't helping the matter ;-).\n\nI'd be very grateful if someone could give me some pointers how to tweak `activateVisualMode` so that it recovers the existing selection! :)\n. If this isn't easily fixable in master right now (which I understand; thanks a million for your amazing work anyway!), would one of you mind explaining how to set up a local workaround in the meantime? \"Completing the lines\" by hitting Shift-V after making a rough selection is pretty common behaviour (at least for me it is) and so this regression is a bit annoying.\n. Amazing! Thanks @jimmyye :)\n. That is what I tried. You can select with the mouse, and when the selection changes (i.e. on mouseup), vim-mode switches to visual mode, but it loses the selection immediately. The code would have express `if @mode is insert then store the atom-selection, switch to visual, then create an equivalent vim-mode-selection`.\n. (Also, I don't feel as strongly about #840 as I do about this one, but I don't see why there couldn't be one option to enable both behaviours. In vim, selection == visual mode, so when I see any selected text in atom, I instinctively assume I can manipulate it with vim commands. I'm sure there are others who feel the same?)\n. Doing this properly is trickier than I thought (and Coffeescript isn't helping the matter ;-).\n\nI'd be very grateful if someone could give me some pointers how to tweak `activateVisualMode` so that it recovers the existing selection! :)\n. ",
    "jimmyye": "Select Line (cmd-L) will do the job, see menu - Selection - Select Line\nSo I think binding Shift-V to this works:\n\nmenu - Atom - Open Your Keymap, add:\n\n```\natom-text-editor.vim-mode.visual-mode':\n  'shift-V': 'editor:select-line'\n```\n. Select Line (cmd-L) will do the job, see menu - Selection - Select Line\nSo I think binding Shift-V to this works:\n\nmenu - Atom - Open Your Keymap, add:\n\n```\natom-text-editor.vim-mode.visual-mode':\n  'shift-V': 'editor:select-line'\n```\n. ",
    "mota57": ":/\n. Os: Ubuntu 14.04\nAtom version : 1.0.15\nI tried to install from command line and give me the same error.\n\nOn Fri, Sep 25, 2015 at 5:05 PM, Max Brunsfeld notifications@github.com\nwrote:\n\n> Could you report what version of Atom you're using and your OS? Are you\n> able to install vim-mode from the command-line?\n> \n> apm install vim-mode\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/865#issuecomment-143354628.\n. well thanks for ask at least xD\n. @50Wliu thanks man now its working after installed Atom 1.0.19 :+1: \n. :/\n. Os: Ubuntu 14.04\nAtom version : 1.0.15\nI tried to install from command line and give me the same error.\n\nOn Fri, Sep 25, 2015 at 5:05 PM, Max Brunsfeld notifications@github.com\nwrote:\n\n> Could you report what version of Atom you're using and your OS? Are you\n> able to install vim-mode from the command-line?\n> \n> apm install vim-mode\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/vim-mode/issues/865#issuecomment-143354628.\n. well thanks for ask at least xD\n. @50Wliu thanks man now its working after installed Atom 1.0.19 :+1: \n. ",
    "naw": "Yes. At least, pressing insert on the keyboard _does_ activate this action as expected as a result of adding the 'insert' mapping.\n. Yes. At least, pressing insert on the keyboard _does_ activate this action as expected as a result of adding the 'insert' mapping.\n. ",
    "vansoest": "What's about this topic? @skosch have you find an acceptable workaround? \u263a\ufe0f . What's about this topic? @skosch have you find an acceptable workaround? \u263a\ufe0f . ",
    "azoerb": "+1 this seems to be a newly added bug.\n. Awesome, thanks!  Was this a new addition?  I just realized this happening a few days ago.\n. +1 this seems to be a newly added bug.\n. Awesome, thanks!  Was this a new addition?  I just realized this happening a few days ago.\n. ",
    "hdemon": "+1\n. +1\n. ",
    "geo7": "I was thinking about using Atom because I thought it was _more_ complete, not less ;) \n. I was thinking about using Atom because I thought it was _more_ complete, not less ;) \n. ",
    "developertenzin": "Yes, same here! I would like this to be solved ASAP. :+1: \n. Yes, same here! I would like this to be solved ASAP. :+1: \n. ",
    "amzaf": "The same bug also applies to the \"gE\" command. I see commits mentioned here but still no fix in the official package.\n. The same bug also applies to the \"gE\" command. I see commits mentioned here but still no fix in the official package.\n. ",
    "jdshatz": "Are there ways to make the command regardless of case?  There are different permutations: gE, ge, Ge, GE.. Are there ways to make the command regardless of case?  There are different permutations: gE, ge, Ge, GE.. ",
    "wbolster": "it looks like this has deliberately been disabled in 3e556fb648263a9b7dab62dcc2e951d85a1df791, stating \"disabled for compatibility with the common binding for going to the end of the line\" somewhere in a code comment. i'm not sure where \"common binding\" comes from, but this is certainly not normal vim behaviour, and i expect vim-mode to work like vim itself.\n. the whole point of `vim-mode` is that it acts like vim! using `ctrl-e` for jumping to the end of the line is actually an emacs binding (and atom apparently), but the point is, well, it's kinda obvious, vim is not emacs...\n. i still fail to understand the reason for deviating from normal vim behaviour. why is ctrl-e special in insert mode?\n. it looks like this has deliberately been disabled in 3e556fb648263a9b7dab62dcc2e951d85a1df791, stating \"disabled for compatibility with the common binding for going to the end of the line\" somewhere in a code comment. i'm not sure where \"common binding\" comes from, but this is certainly not normal vim behaviour, and i expect vim-mode to work like vim itself.\n. the whole point of `vim-mode` is that it acts like vim! using `ctrl-e` for jumping to the end of the line is actually an emacs binding (and atom apparently), but the point is, well, it's kinda obvious, vim is not emacs...\n. i still fail to understand the reason for deviating from normal vim behaviour. why is ctrl-e special in insert mode?\n. ",
    "denqxotl": "Is it about an empty line?\n. Same trouble. Mac OS (but I think this problem is not depend on OS)\n. +1\n. @bronson gotcha. thanks\n. Is it about an empty line?\n. Same trouble. Mac OS (but I think this problem is not depend on OS)\n. +1\n. @bronson gotcha. thanks\n. ",
    "marcindomanski": "I think it is. If there are any characters in the last line, `dd` just removes them, but does not remove the last line. If the last line is empty, well, `dd` doesn't do anything.\n\nI think this has already been reported (#801), but it isn't fixed yet. I would love to see this fixed, I've been waiting for it for quite some time now..\n. I think it is. If there are any characters in the last line, `dd` just removes them, but does not remove the last line. If the last line is empty, well, `dd` doesn't do anything.\n\nI think this has already been reported (#801), but it isn't fixed yet. I would love to see this fixed, I've been waiting for it for quite some time now..\n. ",
    "ciwolsey": "Put this in your keymap.cson (Edit -> Open your Keymap)\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j j': 'vim-mode:activate-normal-mode'\n```\n. Put this in your keymap.cson (Edit -> Open your Keymap)\n\n```\n'atom-text-editor.vim-mode.insert-mode':\n  'j j': 'vim-mode:activate-normal-mode'\n```\n. ",
    "Camru": "Works, thanks!\n. Works, thanks!\n. ",
    "jonasws": "Closing as this has been implemented in #886 \n. @mattr That is great feedback! I am not an expert vim user myself, so I figured someone had something to comment on that I completely missed. I also implemented this with the purpose of it to work on files consisting of mainly text (such as Markdown and LaTex), as I didn't think it was defined by vim what would happen when pressing those keys in a code file. I'll look into what vim says to try to make it compliant.\n. @maxbrunsfeld I have implemented sentence boundaries as we discussed. I have another question that we might want to address. How do we want things to work in \"code files\", where sentences do not occur as the normally would? I haven't been able to think of anything clever on that account.\n. I am happy with it as it is. As you said, making it work exactly like vim, is quite complex, and should probably be done in another PR, to keep the review work simpler.\n. Note that this feature adds no specs, so it does pass all the checks currently passing on the master branch at the time of this PR.\n. Closing as this has been implemented in #886 \n. @mattr That is great feedback! I am not an expert vim user myself, so I figured someone had something to comment on that I completely missed. I also implemented this with the purpose of it to work on files consisting of mainly text (such as Markdown and LaTex), as I didn't think it was defined by vim what would happen when pressing those keys in a code file. I'll look into what vim says to try to make it compliant.\n. @maxbrunsfeld I have implemented sentence boundaries as we discussed. I have another question that we might want to address. How do we want things to work in \"code files\", where sentences do not occur as the normally would? I haven't been able to think of anything clever on that account.\n. I am happy with it as it is. As you said, making it work exactly like vim, is quite complex, and should probably be done in another PR, to keep the review work simpler.\n. Note that this feature adds no specs, so it does pass all the checks currently passing on the master branch at the time of this PR.\n. ",
    "sgronblo": "I just updated to the latest version (0.61.0) and have the same problem today, I feel like maybe it was working before though. Atom 1.0.19 and OSX 10.10.5.\n. Ah actually this was a file that I had created on Windows, so changing the line endings from CRLF to LF made it work.\n. I just updated to the latest version (0.61.0) and have the same problem today, I feel like maybe it was working before though. Atom 1.0.19 and OSX 10.10.5.\n. Ah actually this was a file that I had created on Windows, so changing the line endings from CRLF to LF made it work.\n. ",
    "cheniel": "Issue on atom core: atom/atom#9270\n. Perhaps it's the same issue as #885?\n. Issue on atom core: atom/atom#9270\n. Perhaps it's the same issue as #885?\n. ",
    "rluiten": "The 1.40 beta fixed the problems I had, this might be addressed to worth checking.\n. The 1.40 beta fixed the problems I had, this might be addressed to worth checking.\n. ",
    "darkmushroom": "Nevermind - this was a misinterpretation of how Atom handles indentation. vim-mode inserts soft-tabs as expected. Great work! :smile: \n. Nevermind - this was a misinterpretation of how Atom handles indentation. vim-mode inserts soft-tabs as expected. Great work! :smile: \n. ",
    "franleplant": "Thanks! Ill try!\n. Thanks! Ill try!\n. ",
    "josebalius": "I had to go into my `.atom/config.cson` and remove `vim-mode` from `packagesWithKeymapDisabled`\n. I had to go into my `.atom/config.cson` and remove `vim-mode` from `packagesWithKeymapDisabled`\n. ",
    "kamek-pf": "This happens when I try to `dt<`.\nIt works as expected, but the alert shows up.\n. This happens when I try to `dt<`.\nIt works as expected, but the alert shows up.\n. ",
    "uiii": "**vim-mode 0.65.0** the issue is happening again when I delete text using `dt'` or `dt<`\n\n```\nUncaught TypeError: poppedOperation.execute is not a function\n/usr/share/atom-beta/resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:816\n```\n\nHowever, the deletion works but the error notification is really annoying.\n. I don't have this issue anymore with **Vim-mode 0.65.1** and **Atom 1.7.4**\n. **vim-mode 0.65.0** the issue is happening again when I delete text using `dt'` or `dt<`\n\n```\nUncaught TypeError: poppedOperation.execute is not a function\n/usr/share/atom-beta/resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:816\n```\n\nHowever, the deletion works but the error notification is really annoying.\n. I don't have this issue anymore with **Vim-mode 0.65.1** and **Atom 1.7.4**\n. ",
    "eric-burel": "I reproduced the same issue with `df}`, same as @uiii it actually deletes the text but throw an error notification.\n**Vim-mode 0.65.0\nAtom 1.6.0**\n. I reproduced the same issue with `df}`, same as @uiii it actually deletes the text but throw an error notification.\n**Vim-mode 0.65.0\nAtom 1.6.0**\n. ",
    "lbeeon": "I have the same problem. Reproduced the issue with 'r' in visual mode.\nAtom 1.12.2\nVim-mode 0.65.1\nOS macOS Sierra 10.12.1\n. I have the same problem. Reproduced the issue with 'r' in visual mode.\nAtom 1.12.2\nVim-mode 0.65.1\nOS macOS Sierra 10.12.1\n. ",
    "gu-fan": "[Enter steps to reproduce below:]\n1. ...\n2. ...\n\n**Atom Version**: 1.0.11\n**System**: Win 10 64\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.63.0\n\n### Stack Trace\n\nUncaught TypeError: undefined is not a function\n\n```\nAt /C:/Users/gufan/.atom/packages/vim-mode/lib/motions/general-motions.coffee:1059\n\nTypeError: undefined is not a function\n    at ScrollHalfDownKeepCursor.ScrollKeepingCursor.scrollScreen (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\motions\\general-motions.coffee:478:93)\n    at ScrollHalfDownKeepCursor.ScrollKeepingCursor.execute (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\motions\\general-motions.coffee:467:18)\n    at VimState.module.exports.VimState.processOpStack (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\vim-state.coffee:279:23)\n    at VimState.module.exports.VimState.pushOperations (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\vim-state.coffee:237:8)\n    at atom-text-editor.commands.(anonymous function) (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\src\\command-registry.js:245:29)\n    at C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\src\\command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\node_modules\\atom-keymap\\lib\\keymap-manager.js:524:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\node_modules\\atom-keymap\\lib\\keymap-manager.js:347:22)\n    at HTMLDocument.module.exports.WindowEventHandler.onKeydown (C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\src\\window-event-handler.js:184:20)\n```\n\n### Commands\n\n```\n  2x -0:12.3.0 vim-mode:scroll-half-screen-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:05.9.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.normal-mode)\n     -0:03.2.0 vim-mode:scroll-half-screen-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nmota, v0.0.2\nvim-mode, v0.63.0\n\n# Dev\nNo dev packages\n```\n. update to latest seems ok.\n. [Enter steps to reproduce below:]\n1. ...\n2. ...\n\n**Atom Version**: 1.0.11\n**System**: Win 10 64\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.63.0\n\n### Stack Trace\n\nUncaught TypeError: undefined is not a function\n\n```\nAt /C:/Users/gufan/.atom/packages/vim-mode/lib/motions/general-motions.coffee:1059\n\nTypeError: undefined is not a function\n    at ScrollHalfDownKeepCursor.ScrollKeepingCursor.scrollScreen (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\motions\\general-motions.coffee:478:93)\n    at ScrollHalfDownKeepCursor.ScrollKeepingCursor.execute (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\motions\\general-motions.coffee:467:18)\n    at VimState.module.exports.VimState.processOpStack (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\vim-state.coffee:279:23)\n    at VimState.module.exports.VimState.pushOperations (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\vim-state.coffee:237:8)\n    at atom-text-editor.commands.(anonymous function) (C:\\Users\\gufan\\.atom\\packages\\vim-mode\\lib\\vim-state.coffee:209:45)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\src\\command-registry.js:245:29)\n    at C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\src\\command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\node_modules\\atom-keymap\\lib\\keymap-manager.js:524:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\node_modules\\atom-keymap\\lib\\keymap-manager.js:347:22)\n    at HTMLDocument.module.exports.WindowEventHandler.onKeydown (C:\\Users\\gufan\\AppData\\Local\\atom\\app-1.0.11\\resources\\app.asar\\src\\window-event-handler.js:184:20)\n```\n\n### Commands\n\n```\n  2x -0:12.3.0 vim-mode:scroll-half-screen-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:05.9.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.normal-mode)\n     -0:03.2.0 vim-mode:scroll-half-screen-down (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {}\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nmota, v0.0.2\nvim-mode, v0.63.0\n\n# Dev\nNo dev packages\n```\n. update to latest seems ok.\n. ",
    "averrin": "+1\n. +1\n. ",
    "jonopray": "Looks like the cursor no longer updates its position after #906.\n. 1.1.0\n. http://recordit.co/g1SuNRwOLh\nIn this recording of vi, using ctrl-d and ctrl-u moves the cursor half a page up, keeping the position on the viewport the same, except when it hits the top or bottom. When the cursor hits the top or bottom, it still moves up half a page, but moves position in the viewport.\n\nhttp://recordit.co/kwFEAjflxn\nIn vim-mode, the cursor is now left behind while the screen scrolls half a screen. Once any navigation commands are used (hjkl or arrow keys), the screen position hops back to the cursor. In 0.62.0, the cursor at least would change its position when it could jump without changing the location in the viewport, but failed to move once it hit the top or bottom.\n. ```\n\"*\":\n  \"exception-reporting\":\n    userId: \"e3b7043b-3200-7d2a-51cd-5685a1a7378f\"\n  welcome:\n    showOnStartup: false\n  core:\n    audioBeep: false\n  \"vim-mode\": {}\n  editor:\n    invisibles: {}\n    fontSize: 13\n  react: {}\n  linter: {}\n  \"linter-eslint\": {}\n  \"linter-rubocop\": {}\n```\n. Ok, I've got it working now--restarted again and it works perfectly. Sorry for the trouble, and thank you for the fix! It's much appreciated.\n. (definitely feels a lot more like vim to me now, since jumping up and down pages was one of my favorite features)\n. Looks like the cursor no longer updates its position after #906.\n. 1.1.0\n. http://recordit.co/g1SuNRwOLh\nIn this recording of vi, using ctrl-d and ctrl-u moves the cursor half a page up, keeping the position on the viewport the same, except when it hits the top or bottom. When the cursor hits the top or bottom, it still moves up half a page, but moves position in the viewport.\n\nhttp://recordit.co/kwFEAjflxn\nIn vim-mode, the cursor is now left behind while the screen scrolls half a screen. Once any navigation commands are used (hjkl or arrow keys), the screen position hops back to the cursor. In 0.62.0, the cursor at least would change its position when it could jump without changing the location in the viewport, but failed to move once it hit the top or bottom.\n. ```\n\"*\":\n  \"exception-reporting\":\n    userId: \"e3b7043b-3200-7d2a-51cd-5685a1a7378f\"\n  welcome:\n    showOnStartup: false\n  core:\n    audioBeep: false\n  \"vim-mode\": {}\n  editor:\n    invisibles: {}\n    fontSize: 13\n  react: {}\n  linter: {}\n  \"linter-eslint\": {}\n  \"linter-rubocop\": {}\n```\n. Ok, I've got it working now--restarted again and it works perfectly. Sorry for the trouble, and thank you for the fix! It's much appreciated.\n. (definitely feels a lot more like vim to me now, since jumping up and down pages was one of my favorite features)\n. ",
    "ingshtrom": "+1\n. +1\n. ",
    "mlynch": "Also seeing this with Ctrl+D, Ctrl+U on Atom 1.1.0 and atom-vim 0.62.0. The cursor doesn't follow the paging which it should.\n. Thanks for the fix!\n. Also seeing this with Ctrl+D, Ctrl+U on Atom 1.1.0 and atom-vim 0.62.0. The cursor doesn't follow the paging which it should.\n. Thanks for the fix!\n. ",
    "nbellowe": "I like it nice. \n. I like it nice. \n. ",
    "shamrin": "Yeah, I was hurt by my Vim habit to cancel search (and ex mode) with backspace. This fixes my pain! What can I do to help merge this PR?\n. Yeah, I was hurt by my Vim habit to cancel search (and ex mode) with backspace. This fixes my pain! What can I do to help merge this PR?\n. ",
    "Samcfuchs": "Could it be switched to `ctrl-shift-w [h, l]`? Or switch the close tab binding to that?\n. Could it be switched to `ctrl-shift-w [h, l]`? Or switch the close tab binding to that?\n. ",
    "easthing": "@maxbrunsfeld understood thinks\n. @maxbrunsfeld understood thinks\n. ",
    "vigneshm": "I can repro this issue with version 0.63. Let me know if you need more info.\n. Just to be clear, when the cursor is **on-screen** and you do `ctrl+f`, the page scrolls forward but the cursor remains in its previous position (which becomes off-screen now).\n. v1.1.0\n. Yep that is the version. Not sure what messed it up. Let me try re-installing vim-mode.\n. I can repro this issue with version 0.63. Let me know if you need more info.\n. Just to be clear, when the cursor is **on-screen** and you do `ctrl+f`, the page scrolls forward but the cursor remains in its previous position (which becomes off-screen now).\n. v1.1.0\n. Yep that is the version. Not sure what messed it up. Let me try re-installing vim-mode.\n. ",
    "erktime": "I too think i had this issue, but a full quit and relaunch of atom fixed.\n. I too think i had this issue, but a full quit and relaunch of atom fixed.\n. ",
    "danhper": "Hi,\n\nI have the same issue here, it happens when I try to yank (`yy` or any other yank command gives the same issue).\nThe issue occurs only with vim-mode 0.63.0 and when other packages are installed.\nI am not sure which package is causing the issue though.\nReverting to 0.62.0 fixes the issue. Disabling all packages except for vim-mode also does.\n\nHere is what atom gives me.\n\n**Atom Version**: 1.0.19\n**System**: \"Arch Linux\"\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.63.0\n\n### Stack Trace\n\nUncaught TypeError: this.editorElement.getScrollTop is not a function\n\n```\nAt /home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:276\n\nTypeError: this.editorElement.getScrollTop is not a function\n  at Yank.execute (/home/daniel/.atom/packages/vim-mode/lib/operators/general-operators.coffee:182:29)\n  at VimState.module.exports.VimState.processOpStack (/home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:279:23)\n  at VimState.module.exports.VimState.processOpStack (/home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:271:10)\n  at VimState.module.exports.VimState.pushOperations (/home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:237:8)\n  at atom-text-editor.commands.(anonymous function) (/home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/usr/share/atom/resources/app.asar/src/command-registry.js:245:29)\n  at /usr/share/atom/resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/usr/share/atom/resources/app.asar/src/window-event-handler.js:184:20)\n\n```\n\n### Commands\n\n```\n  2x -0:01.2.0 vim-mode:yank (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"audioBeep\": false,\n    \"themes\": [\n      \"one-dark-ui\",\n      \"base16-tomorrow-dark-theme\"\n    ],\n    \"packagesWithKeymapsDisabled\": [\n      \"rspec\",\n      \"terminal-plus\",\n      \"ruby-block\",\n      \"rails-rspec\"\n    ]\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true,\n    \"useSmartcaseForSearch\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nStylus, v1.2.1\natom-alignment, v0.12.1\natom-jade, v0.3.0\natom-ternjs, v0.8.4\nautocomplete-elixir, v1.4.2\nautocomplete-paths, v1.0.2\ncolor-picker, v2.0.13\ndocblockr, v0.7.3\neditorconfig, v1.2.2\nemmet, v2.3.14\nhaskell-ghc-mod, v1.1.1\njshint, v1.8.3\nkeyboard-localization, v1.4.10\nlanguage-elixir, v0.5.2\nlanguage-fish-shell, v1.0.2\nlanguage-haskell, v1.4.12\nlinter, v1.10.0\nlinter-elixirc, v1.1.0\nlinter-hlint, v0.4.2\nlinter-jscs, v3.2.0\nlinter-rubocop, v0.4.4\nminimap, v4.16.0\npretty-json, v0.4.1\nrspec-snippets, v0.4.0\nruby-block, v0.3.5\nterminal-plus, v0.13.0\nvim-mode, v0.63.0\n\n# Dev\nNo dev packages\n```\n\n```\n$ apm list\n...\n/home/daniel/.atom/packages (38)\n\u251c\u2500\u2500 Stylus@1.2.1\n\u251c\u2500\u2500 advanced-open-file@0.11.0\n\u251c\u2500\u2500 atom-alignment@0.12.1\n\u251c\u2500\u2500 atom-beautify@0.28.16\n\u251c\u2500\u2500 atom-jade@0.3.0\n\u251c\u2500\u2500 atom-ternjs@0.8.4\n\u251c\u2500\u2500 atom-wakatime@5.0.0\n\u251c\u2500\u2500 atomic-emacs@0.7.4\n\u251c\u2500\u2500 autocomplete-elixir@1.4.2\n\u251c\u2500\u2500 autocomplete-paths@1.0.2\n\u251c\u2500\u2500 color-picker@2.0.13\n\u251c\u2500\u2500 docblockr@0.7.3\n\u251c\u2500\u2500 editorconfig@1.2.2\n\u251c\u2500\u2500 emmet@2.3.14\n\u251c\u2500\u2500 es6-javascript@0.5.0\n\u251c\u2500\u2500 ex-mode@0.7.0\n\u251c\u2500\u2500 haskell-ghc-mod@1.1.1\n\u251c\u2500\u2500 ide-haskell@1.3.0\n\u251c\u2500\u2500 jshint@1.8.3\n\u251c\u2500\u2500 keyboard-localization@1.4.10\n\u251c\u2500\u2500 language-elixir@0.5.2\n\u251c\u2500\u2500 language-fish-shell@1.0.2\n\u251c\u2500\u2500 language-haskell@1.4.12\n\u251c\u2500\u2500 linter@1.10.0\n\u251c\u2500\u2500 linter-elixirc@1.1.0\n\u251c\u2500\u2500 linter-hlint@0.4.2\n\u251c\u2500\u2500 linter-jscs@3.2.0\n\u251c\u2500\u2500 linter-rubocop@0.4.4\n\u251c\u2500\u2500 minimap@4.16.0\n\u251c\u2500\u2500 pretty-json@0.4.1\n\u251c\u2500\u2500 rails-rspec@0.3.2\n\u251c\u2500\u2500 rspec@0.3.2\n\u251c\u2500\u2500 rspec-snippets@0.4.0\n\u251c\u2500\u2500 ruby-block@0.3.5\n\u251c\u2500\u2500 script@3.0.1\n\u251c\u2500\u2500 terminal-plus@0.13.0\n\u251c\u2500\u2500 turbo-javascript@1.2.0\n\u2514\u2500\u2500 vim-mode@0.63.0\n```\n. Hi,\n\nI have the same issue here, it happens when I try to yank (`yy` or any other yank command gives the same issue).\nThe issue occurs only with vim-mode 0.63.0 and when other packages are installed.\nI am not sure which package is causing the issue though.\nReverting to 0.62.0 fixes the issue. Disabling all packages except for vim-mode also does.\n\nHere is what atom gives me.\n\n**Atom Version**: 1.0.19\n**System**: \"Arch Linux\"\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.63.0\n\n### Stack Trace\n\nUncaught TypeError: this.editorElement.getScrollTop is not a function\n\n```\nAt /home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:276\n\nTypeError: this.editorElement.getScrollTop is not a function\n  at Yank.execute (/home/daniel/.atom/packages/vim-mode/lib/operators/general-operators.coffee:182:29)\n  at VimState.module.exports.VimState.processOpStack (/home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:279:23)\n  at VimState.module.exports.VimState.processOpStack (/home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:271:10)\n  at VimState.module.exports.VimState.pushOperations (/home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:237:8)\n  at atom-text-editor.commands.(anonymous function) (/home/daniel/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/usr/share/atom/resources/app.asar/src/command-registry.js:245:29)\n  at /usr/share/atom/resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/usr/share/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/usr/share/atom/resources/app.asar/src/window-event-handler.js:184:20)\n\n```\n\n### Commands\n\n```\n  2x -0:01.2.0 vim-mode:yank (atom-text-editor.editor.is-focused.vim-mode.normal-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"audioBeep\": false,\n    \"themes\": [\n      \"one-dark-ui\",\n      \"base16-tomorrow-dark-theme\"\n    ],\n    \"packagesWithKeymapsDisabled\": [\n      \"rspec\",\n      \"terminal-plus\",\n      \"ruby-block\",\n      \"rails-rspec\"\n    ]\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true,\n    \"useSmartcaseForSearch\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nStylus, v1.2.1\natom-alignment, v0.12.1\natom-jade, v0.3.0\natom-ternjs, v0.8.4\nautocomplete-elixir, v1.4.2\nautocomplete-paths, v1.0.2\ncolor-picker, v2.0.13\ndocblockr, v0.7.3\neditorconfig, v1.2.2\nemmet, v2.3.14\nhaskell-ghc-mod, v1.1.1\njshint, v1.8.3\nkeyboard-localization, v1.4.10\nlanguage-elixir, v0.5.2\nlanguage-fish-shell, v1.0.2\nlanguage-haskell, v1.4.12\nlinter, v1.10.0\nlinter-elixirc, v1.1.0\nlinter-hlint, v0.4.2\nlinter-jscs, v3.2.0\nlinter-rubocop, v0.4.4\nminimap, v4.16.0\npretty-json, v0.4.1\nrspec-snippets, v0.4.0\nruby-block, v0.3.5\nterminal-plus, v0.13.0\nvim-mode, v0.63.0\n\n# Dev\nNo dev packages\n```\n\n```\n$ apm list\n...\n/home/daniel/.atom/packages (38)\n\u251c\u2500\u2500 Stylus@1.2.1\n\u251c\u2500\u2500 advanced-open-file@0.11.0\n\u251c\u2500\u2500 atom-alignment@0.12.1\n\u251c\u2500\u2500 atom-beautify@0.28.16\n\u251c\u2500\u2500 atom-jade@0.3.0\n\u251c\u2500\u2500 atom-ternjs@0.8.4\n\u251c\u2500\u2500 atom-wakatime@5.0.0\n\u251c\u2500\u2500 atomic-emacs@0.7.4\n\u251c\u2500\u2500 autocomplete-elixir@1.4.2\n\u251c\u2500\u2500 autocomplete-paths@1.0.2\n\u251c\u2500\u2500 color-picker@2.0.13\n\u251c\u2500\u2500 docblockr@0.7.3\n\u251c\u2500\u2500 editorconfig@1.2.2\n\u251c\u2500\u2500 emmet@2.3.14\n\u251c\u2500\u2500 es6-javascript@0.5.0\n\u251c\u2500\u2500 ex-mode@0.7.0\n\u251c\u2500\u2500 haskell-ghc-mod@1.1.1\n\u251c\u2500\u2500 ide-haskell@1.3.0\n\u251c\u2500\u2500 jshint@1.8.3\n\u251c\u2500\u2500 keyboard-localization@1.4.10\n\u251c\u2500\u2500 language-elixir@0.5.2\n\u251c\u2500\u2500 language-fish-shell@1.0.2\n\u251c\u2500\u2500 language-haskell@1.4.12\n\u251c\u2500\u2500 linter@1.10.0\n\u251c\u2500\u2500 linter-elixirc@1.1.0\n\u251c\u2500\u2500 linter-hlint@0.4.2\n\u251c\u2500\u2500 linter-jscs@3.2.0\n\u251c\u2500\u2500 linter-rubocop@0.4.4\n\u251c\u2500\u2500 minimap@4.16.0\n\u251c\u2500\u2500 pretty-json@0.4.1\n\u251c\u2500\u2500 rails-rspec@0.3.2\n\u251c\u2500\u2500 rspec@0.3.2\n\u251c\u2500\u2500 rspec-snippets@0.4.0\n\u251c\u2500\u2500 ruby-block@0.3.5\n\u251c\u2500\u2500 script@3.0.1\n\u251c\u2500\u2500 terminal-plus@0.13.0\n\u251c\u2500\u2500 turbo-javascript@1.2.0\n\u2514\u2500\u2500 vim-mode@0.63.0\n```\n. ",
    "iofjuupasli": "[Enter steps to reproduce below:]\n1. yank (any, always)\n\n**Atom Version**: 1.0.19\n**System**: Ubuntu 14.04.3\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.63.0\n\n### Stack Trace\n\nUncaught TypeError: this.editorElement.getScrollTop is not a function\n\n```\nAt /home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:276\n\nTypeError: this.editorElement.getScrollTop is not a function\n  at Yank.execute (/home/iofjuupasli/.atom/packages/vim-mode/lib/operators/general-operators.coffee:182:29)\n  at VimState.module.exports.VimState.processOpStack (/home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:279:23)\n  at VimState.module.exports.VimState.processOpStack (/home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:271:10)\n  at VimState.module.exports.VimState.pushOperations (/home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:237:8)\n  at atom-text-editor.commands.(anonymous function) (/home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/opt/atom/resources/app.asar/src/command-registry.js:245:29)\n  at /opt/atom/resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/opt/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/opt/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/opt/atom/resources/app.asar/src/window-event-handler.js:184:20)\n\n```\n\n### Commands\n\n```\n     -0:10.8.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n  5x -0:10.6.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:09.7.0 vim-mode:activate-characterwise-visual-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  5x -0:09.6.0 vim-mode:move-to-end-of-word (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n  2x -0:08.7.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:08.3.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n  2x -0:08.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:07.6.0 vim-mode:activate-characterwise-visual-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:07.6.0 vim-mode:move-to-end-of-word (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n  2x -0:07.2.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:03.2.0 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -0:03.2.0 core:cancel (atom-text-editor.editor.mini.is-focused)\n     -0:01.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.8.0 vim-mode:activate-characterwise-visual-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.8.0 vim-mode:move-to-end-of-word (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:00.7.0 vim-mode:yank (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"autocomplete\",\n      \"deprecation-cop\",\n      \"styleguide\",\n      \"wakatime\",\n      \"archive-view\",\n      \"background-tips\",\n      \"dev-live-reload\",\n      \"feedback\",\n      \"incompatible-packages\",\n      \"keybinding-resolver\",\n      \"welcome\",\n      \"open-on-github\",\n      \"release-notes\",\n      \"atom-pair\",\n      \"smalls\"\n    ],\n    \"destroyEmptyPanes\": false,\n    \"autoHideMenuBar\": true\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nStylus, v1.2.1\natom-beautify, v0.28.17\natom-ternjs, v0.8.4\ncolor-picker, v2.0.13\neditorconfig, v1.2.2\nemmet, v2.3.14\nfile-icons, v1.6.11\nhighlight-selected, v0.10.1\nlanguage-docker, v1.1.3\nlinter, v1.11.0\nlinter-eslint, v4.0.0\nlinter-jscs, v3.2.0\nlinter-jshint, v1.2.1\nlive-archive, v0.1.15\nsmart-tab-name, v1.0.4\ntab-numbers, v0.3.0\ntasks, v2.5.1\nvim-mode, v0.63.0\nvim-surround, v0.8.1\nwebbox-color, v0.5.9\n\n# Dev\nNo dev packages\n```\n. I can't reproduce it after update to atom 1.2.0 !\n. [Enter steps to reproduce below:]\n1. yank (any, always)\n\n**Atom Version**: 1.0.19\n**System**: Ubuntu 14.04.3\n**Thrown From**: [vim-mode](https://github.com/atom/vim-mode) package, v0.63.0\n\n### Stack Trace\n\nUncaught TypeError: this.editorElement.getScrollTop is not a function\n\n```\nAt /home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:276\n\nTypeError: this.editorElement.getScrollTop is not a function\n  at Yank.execute (/home/iofjuupasli/.atom/packages/vim-mode/lib/operators/general-operators.coffee:182:29)\n  at VimState.module.exports.VimState.processOpStack (/home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:279:23)\n  at VimState.module.exports.VimState.processOpStack (/home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:271:10)\n  at VimState.module.exports.VimState.pushOperations (/home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:237:8)\n  at atom-text-editor.commands.(anonymous function) (/home/iofjuupasli/.atom/packages/vim-mode/lib/vim-state.coffee:209:45)\n  at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/opt/atom/resources/app.asar/src/command-registry.js:245:29)\n  at /opt/atom/resources/app.asar/src/command-registry.js:3:61\n  at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/opt/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:524:16)\n  at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/opt/atom/resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:347:22)\n  at HTMLDocument.module.exports.WindowEventHandler.onKeydown (/opt/atom/resources/app.asar/src/window-event-handler.js:184:20)\n\n```\n\n### Commands\n\n```\n     -0:10.8.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n  5x -0:10.6.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:09.7.0 vim-mode:activate-characterwise-visual-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n  5x -0:09.6.0 vim-mode:move-to-end-of-word (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n  2x -0:08.7.0 vim-mode:move-right (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:08.3.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n  2x -0:08.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:07.6.0 vim-mode:activate-characterwise-visual-mode (atom-text-editor.editor.vim-mode.is-focused.normal-mode)\n     -0:07.6.0 vim-mode:move-to-end-of-word (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n  2x -0:07.2.0 vim-mode:reset-normal-mode (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:03.2.0 editor:consolidate-selections (atom-text-editor.editor.mini.is-focused)\n     -0:03.2.0 core:cancel (atom-text-editor.editor.mini.is-focused)\n     -0:01.0 vim-mode:move-to-previous-word (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.8.0 vim-mode:activate-characterwise-visual-mode (atom-text-editor.editor.vim-mode.normal-mode.is-focused)\n     -0:00.8.0 vim-mode:move-to-end-of-word (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n     -0:00.7.0 vim-mode:yank (atom-text-editor.editor.vim-mode.is-focused.visual-mode)\n```\n\n### Config\n\n``` json\n{\n  \"core\": {\n    \"disabledPackages\": [\n      \"autocomplete\",\n      \"deprecation-cop\",\n      \"styleguide\",\n      \"wakatime\",\n      \"archive-view\",\n      \"background-tips\",\n      \"dev-live-reload\",\n      \"feedback\",\n      \"incompatible-packages\",\n      \"keybinding-resolver\",\n      \"welcome\",\n      \"open-on-github\",\n      \"release-notes\",\n      \"atom-pair\",\n      \"smalls\"\n    ],\n    \"destroyEmptyPanes\": false,\n    \"autoHideMenuBar\": true\n  },\n  \"vim-mode\": {\n    \"useClipboardAsDefaultRegister\": true\n  }\n}\n```\n\n### Installed Packages\n\n``` coffee\n# User\nStylus, v1.2.1\natom-beautify, v0.28.17\natom-ternjs, v0.8.4\ncolor-picker, v2.0.13\neditorconfig, v1.2.2\nemmet, v2.3.14\nfile-icons, v1.6.11\nhighlight-selected, v0.10.1\nlanguage-docker, v1.1.3\nlinter, v1.11.0\nlinter-eslint, v4.0.0\nlinter-jscs, v3.2.0\nlinter-jshint, v1.2.1\nlive-archive, v0.1.15\nsmart-tab-name, v1.0.4\ntab-numbers, v0.3.0\ntasks, v2.5.1\nvim-mode, v0.63.0\nvim-surround, v0.8.1\nwebbox-color, v0.5.9\n\n# Dev\nNo dev packages\n```\n. I can't reproduce it after update to atom 1.2.0 !\n. ",
    "dusenberrymw": "+1 This would be really useful.\n. +1 This would be really useful.\n. ",
    "hurkatolto": "Why don't you run a vim or nvim server in the background? With that you just need to communicate with the server instance then you don't need to simulate vim's behaviour.... Why don't you run a vim or nvim server in the background? With that you just need to communicate with the server instance then you don't need to simulate vim's behaviour.... ",
    "Bob131": "I'm not sure whether I was seeing one particular edge case previously or otherwise, but after upgrading to Atom v1.2.0 the issue appears resolved. I'll close this issue for the time being\n. I'm not sure whether I was seeing one particular edge case previously or otherwise, but after upgrading to Atom v1.2.0 the issue appears resolved. I'll close this issue for the time being\n. ",
    "shadowwalkersb": "Confirmed on Mac, Windows and Linux. \n. Confirmed on Mac, Windows and Linux. \n. ",
    "carlisia": "That's exactly what I meant. And looking at the settings (again) I now see the checkbox starring at me. Perfect, thanks.\n. That's exactly what I meant. And looking at the settings (again) I now see the checkbox starring at me. Perfect, thanks.\n. ",
    "johnelliott": "+1 :heart: \n. +1 :heart: \n. ",
    "amiorin": "+1\n. +1\n. ",
    "alextes": "Same, if there's anything I can do to help the merge along.. Seems this has been lying in wait for quite a while.\n. Same, if there's anything I can do to help the merge along.. Seems this has been lying in wait for quite a while.\n. ",
    "b6pzeusbc54tvhw5jgpyw8pwz2x6gs": "+1\n. +1\nI'm also suffering from the same problem.\n\nMy Environment:\n- Mac OS X 10.11.2\n- Atom 1.5.0 ( Also I did test 1.5.3, the problem still occurs )\n- vim-mode 0.64.0\n\nand it is my settings:\n- Preferred Line Length (80)\n- Soft Wrap (enabled)\n- Soft Wrap At Preferred Line Length (enabled)\n\nWithout softwrap, all thing is ok.\nBut with softwrap, if my document has wrapped part as a long column,\n `ctrl-e`, `ctrl-d` and `ctrl-f` can not reach to the end of document.\n\nI think it is the one of most big problem in vim-mode.\n. I figured out a bit.\n\n`@editor.setFirstVisibleScreenRow()` use `getLineCount()` not `getScreenLineCount()`.\nThat method return a real line count not based on screen.\n\nTo avoid, I change `setFirstVisibleScreenRow()` to `@editorElement.setScrollTop()`,\nand change `getLastVisibleScreenRow()` (also use `getLineCount()`) to a other way.\n\nI will PR soon.\n. I think that the issue #961 is the critical UI problem in vim-mode.\nWhen I work markdown using vim-mode, that bug makes me unhappy.\n. I have a question. What do you mean by a `needs-review` label? What can i do for reviewing this issue?\n. Thanks for answer. I plan to pull-request again.\nThe new PR will have more details and a better code. So I closed this PR.\n. +1\n. I have the same issue.\n\nAtom 1.7.1\nvim-mode 0.65.0\nubuntu 14.04\n. +1\n. +1\nI'm also suffering from the same problem.\n\nMy Environment:\n- Mac OS X 10.11.2\n- Atom 1.5.0 ( Also I did test 1.5.3, the problem still occurs )\n- vim-mode 0.64.0\n\nand it is my settings:\n- Preferred Line Length (80)\n- Soft Wrap (enabled)\n- Soft Wrap At Preferred Line Length (enabled)\n\nWithout softwrap, all thing is ok.\nBut with softwrap, if my document has wrapped part as a long column,\n `ctrl-e`, `ctrl-d` and `ctrl-f` can not reach to the end of document.\n\nI think it is the one of most big problem in vim-mode.\n. I figured out a bit.\n\n`@editor.setFirstVisibleScreenRow()` use `getLineCount()` not `getScreenLineCount()`.\nThat method return a real line count not based on screen.\n\nTo avoid, I change `setFirstVisibleScreenRow()` to `@editorElement.setScrollTop()`,\nand change `getLastVisibleScreenRow()` (also use `getLineCount()`) to a other way.\n\nI will PR soon.\n. I think that the issue #961 is the critical UI problem in vim-mode.\nWhen I work markdown using vim-mode, that bug makes me unhappy.\n. I have a question. What do you mean by a `needs-review` label? What can i do for reviewing this issue?\n. Thanks for answer. I plan to pull-request again.\nThe new PR will have more details and a better code. So I closed this PR.\n. +1\n. I have the same issue.\n\nAtom 1.7.1\nvim-mode 0.65.0\nubuntu 14.04\n. ",
    "falm": "Same error at 0.65.1\n. Same error at 0.65.1\n. ",
    "tyleo": "+1\n\nSame issue found with Programmer Dvorak on Windows 10 (1511) / Atom (1.4.1).\n. I am working around this with the following in my keymap.json for now:\n\n```\n# Support for Programmer Dvorak (Template)\n\n# # Key: $\n# # Atom: `\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '`': 'vim-mode:move-to-last-character-of-line'\n#\n# # Key: ~\n# # Atom: ~\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   'g ~': 'vim-mode:toggle-case'\n#   '~': 'vim-mode:toggle-case-now'\n#\n# # Key: &\n# # Atom: [\n#\n# # Key: %\n# # Atom: {\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '{': 'vim-mode:bracket-matching-motion'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" {': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" {': 'vim-mode:register-prefix'\n#\n# # Key: [\n# # Atom: 7\n# 'atom-text-editor.vim-mode':\n#   'ctrl-7': 'vim-mode:reset-normal-mode'\n#\n# 'atom-text-editor.vim-mode:not(.normal-mode)':\n#   'ctrl-7': 'vim-mode:activate-normal-mode'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 7': 'vim-mode:select-inside-square-brackets'\n#   'a 7': 'vim-mode:select-around-square-brackets'\n#\n# # Key: 7\n# # Atom: &\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '&': 'vim-mode:repeat-prefix'\n#\n# # Key: {\n# # Atom: 5\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '5': 'vim-mode:move-to-previous-paragraph'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 5': 'vim-mode:select-inside-curly-brackets'\n#   'a 5': 'vim-mode:select-around-curly-brackets'\n#\n# # Key: 5\n# # Atom: %\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '%': 'vim-mode:repeat-prefix'\n#\n# # Key: }\n# # Atom: 3\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '3': 'vim-mode:move-to-next-paragraph'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 3': 'vim-mode:select-inside-curly-brackets'\n#   'a 3': 'vim-mode:select-around-curly-brackets'\n#\n# # Key: 3\n# # Atom: #\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '#': 'vim-mode:repeat-prefix'\n#\n# # Key: (\n# # Atom: 1\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '1': 'vim-mode:move-to-previous-sentence'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 1': 'vim-mode:select-inside-parentheses'\n#   'a 1': 'vim-mode:select-around-parentheses'\n#\n# # Key: 1\n# # Atom: !\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '!': 'vim-mode:repeat-prefix'\n#\n# # Key: =\n# # Atom: 9\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '9': 'vim-mode:auto-indent'\n#\n# # Key: 9\n# # Atom: (\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '(': 'vim-mode:repeat-prefix'\n#\n# # Key: *\n# # Atom: 0\n# # 'atom-text-editor.vim-mode.insert-mode':\n# #   'ctrl-r 0': 'vim-mode:insert-mode-put'\n#\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '0': 'vim-mode:search-current-word'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" 0': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" 0': 'vim-mode:register-prefix'\n#\n# # Key: 0\n# # Atom: )\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   ')': 'vim-mode:repeat-prefix'\n#\n# # Key: )\n# # Atom: 2\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '2': 'vim-mode:move-to-next-sentence'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 2': 'vim-mode:select-inside-parentheses'\n#   'a 2': 'vim-mode:select-around-parentheses'\n#\n# # Key: 2\n# # Atom: @\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '@': 'vim-mode:repeat-prefix'\n#\n# # Key: +\n# # Atom: 4\n# # 'atom-text-editor.vim-mode.insert-mode':\n# #   'ctrl-r 4': 'vim-mode:insert-mode-put'\n#\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '4': 'vim-mode:move-to-first-character-of-line-down'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" 4': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" 4': 'vim-mode:register-prefix'\n#\n# # Key: 4\n# # Atom: $\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '$': 'vim-mode:repeat-prefix'\n#\n# # Key: ]\n# # Atom: 6\n# 'atom-text-editor.vim-mode.normal-mode':\n#   'ctrl-6': 'symbols-view:go-to-declaration'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 6': 'vim-mode:select-inside-square-brackets'\n#   'a 6': 'vim-mode:select-around-square-brackets'\n#\n# # Key: 6\n# # Atom: ^\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '^': 'vim-mode:repeat-prefix'\n#\n# # Key: !\n# # Atom: 8\n#\n# # Key: 8\n# # Atom: *\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '*': 'vim-mode:repeat-prefix'\n#\n# # Key: #\n# # Atom: \u00df\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '\u00df': 'vim-mode:reverse-search-current-word'\n#\n# # Key: `\n# # Atom: \u00df\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '\u00df': 'vim-mode:move-to-mark-literal'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i \u00df': 'vim-mode:select-inside-back-ticks'\n#   'a \u00df': 'vim-mode:select-around-back-ticks'\n#\n# # Key: @\n# # Atom: ]\n#\n# # Key: ^\n# # Atom: }\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '}': 'vim-mode:move-to-first-character-of-line'\n\n# Support for Programmer Dvorak (Actual)\n'atom-text-editor.vim-mode':\n  'ctrl-7': 'vim-mode:reset-normal-mode'\n\n'atom-text-editor.vim-mode:not(.normal-mode)':\n  'ctrl-7': 'vim-mode:activate-normal-mode'\n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  '`': 'vim-mode:move-to-last-character-of-line'\n  'g ~': 'vim-mode:toggle-case'\n  '~': 'vim-mode:toggle-case-now'\n  '{': 'vim-mode:bracket-matching-motion'\n  '5': 'vim-mode:move-to-previous-paragraph'\n  '3': 'vim-mode:move-to-next-paragraph'\n  '1': 'vim-mode:move-to-previous-sentence'\n  '9': 'vim-mode:auto-indent'\n  '0': 'vim-mode:search-current-word'\n  '2': 'vim-mode:move-to-next-sentence'\n  '4': 'vim-mode:move-to-first-character-of-line-down'\n  '\u00df': 'vim-mode:move-to-mark-literal'\n\n'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n  'i 7': 'vim-mode:select-inside-square-brackets'\n  'a 7': 'vim-mode:select-around-square-brackets'\n  'i 5': 'vim-mode:select-inside-curly-brackets'\n  'a 5': 'vim-mode:select-around-curly-brackets'\n  'i 3': 'vim-mode:select-inside-curly-brackets'\n  'a 3': 'vim-mode:select-around-curly-brackets'\n  'i 1': 'vim-mode:select-inside-parentheses'\n  'a 1': 'vim-mode:select-around-parentheses'\n  'i 2': 'vim-mode:select-inside-parentheses'\n  'a 2': 'vim-mode:select-around-parentheses'\n  'i 6': 'vim-mode:select-inside-square-brackets'\n  'a 6': 'vim-mode:select-around-square-brackets'\n  'i \u00df': 'vim-mode:select-inside-back-ticks'\n  'a \u00df': 'vim-mode:select-around-back-ticks'\n```\n. +1\n\nSame issue found with Programmer Dvorak on Windows 10 (1511) / Atom (1.4.1).\n. I am working around this with the following in my keymap.json for now:\n\n```\n# Support for Programmer Dvorak (Template)\n\n# # Key: $\n# # Atom: `\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '`': 'vim-mode:move-to-last-character-of-line'\n#\n# # Key: ~\n# # Atom: ~\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   'g ~': 'vim-mode:toggle-case'\n#   '~': 'vim-mode:toggle-case-now'\n#\n# # Key: &\n# # Atom: [\n#\n# # Key: %\n# # Atom: {\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '{': 'vim-mode:bracket-matching-motion'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" {': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" {': 'vim-mode:register-prefix'\n#\n# # Key: [\n# # Atom: 7\n# 'atom-text-editor.vim-mode':\n#   'ctrl-7': 'vim-mode:reset-normal-mode'\n#\n# 'atom-text-editor.vim-mode:not(.normal-mode)':\n#   'ctrl-7': 'vim-mode:activate-normal-mode'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 7': 'vim-mode:select-inside-square-brackets'\n#   'a 7': 'vim-mode:select-around-square-brackets'\n#\n# # Key: 7\n# # Atom: &\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '&': 'vim-mode:repeat-prefix'\n#\n# # Key: {\n# # Atom: 5\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '5': 'vim-mode:move-to-previous-paragraph'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 5': 'vim-mode:select-inside-curly-brackets'\n#   'a 5': 'vim-mode:select-around-curly-brackets'\n#\n# # Key: 5\n# # Atom: %\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '%': 'vim-mode:repeat-prefix'\n#\n# # Key: }\n# # Atom: 3\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '3': 'vim-mode:move-to-next-paragraph'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 3': 'vim-mode:select-inside-curly-brackets'\n#   'a 3': 'vim-mode:select-around-curly-brackets'\n#\n# # Key: 3\n# # Atom: #\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '#': 'vim-mode:repeat-prefix'\n#\n# # Key: (\n# # Atom: 1\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '1': 'vim-mode:move-to-previous-sentence'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 1': 'vim-mode:select-inside-parentheses'\n#   'a 1': 'vim-mode:select-around-parentheses'\n#\n# # Key: 1\n# # Atom: !\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '!': 'vim-mode:repeat-prefix'\n#\n# # Key: =\n# # Atom: 9\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '9': 'vim-mode:auto-indent'\n#\n# # Key: 9\n# # Atom: (\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '(': 'vim-mode:repeat-prefix'\n#\n# # Key: *\n# # Atom: 0\n# # 'atom-text-editor.vim-mode.insert-mode':\n# #   'ctrl-r 0': 'vim-mode:insert-mode-put'\n#\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '0': 'vim-mode:search-current-word'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" 0': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" 0': 'vim-mode:register-prefix'\n#\n# # Key: 0\n# # Atom: )\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   ')': 'vim-mode:repeat-prefix'\n#\n# # Key: )\n# # Atom: 2\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '2': 'vim-mode:move-to-next-sentence'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 2': 'vim-mode:select-inside-parentheses'\n#   'a 2': 'vim-mode:select-around-parentheses'\n#\n# # Key: 2\n# # Atom: @\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '@': 'vim-mode:repeat-prefix'\n#\n# # Key: +\n# # Atom: 4\n# # 'atom-text-editor.vim-mode.insert-mode':\n# #   'ctrl-r 4': 'vim-mode:insert-mode-put'\n#\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '4': 'vim-mode:move-to-first-character-of-line-down'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" 4': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" 4': 'vim-mode:register-prefix'\n#\n# # Key: 4\n# # Atom: $\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '$': 'vim-mode:repeat-prefix'\n#\n# # Key: ]\n# # Atom: 6\n# 'atom-text-editor.vim-mode.normal-mode':\n#   'ctrl-6': 'symbols-view:go-to-declaration'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 6': 'vim-mode:select-inside-square-brackets'\n#   'a 6': 'vim-mode:select-around-square-brackets'\n#\n# # Key: 6\n# # Atom: ^\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '^': 'vim-mode:repeat-prefix'\n#\n# # Key: !\n# # Atom: 8\n#\n# # Key: 8\n# # Atom: *\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '*': 'vim-mode:repeat-prefix'\n#\n# # Key: #\n# # Atom: \u00df\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '\u00df': 'vim-mode:reverse-search-current-word'\n#\n# # Key: `\n# # Atom: \u00df\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '\u00df': 'vim-mode:move-to-mark-literal'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i \u00df': 'vim-mode:select-inside-back-ticks'\n#   'a \u00df': 'vim-mode:select-around-back-ticks'\n#\n# # Key: @\n# # Atom: ]\n#\n# # Key: ^\n# # Atom: }\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '}': 'vim-mode:move-to-first-character-of-line'\n\n# Support for Programmer Dvorak (Actual)\n'atom-text-editor.vim-mode':\n  'ctrl-7': 'vim-mode:reset-normal-mode'\n\n'atom-text-editor.vim-mode:not(.normal-mode)':\n  'ctrl-7': 'vim-mode:activate-normal-mode'\n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  '`': 'vim-mode:move-to-last-character-of-line'\n  'g ~': 'vim-mode:toggle-case'\n  '~': 'vim-mode:toggle-case-now'\n  '{': 'vim-mode:bracket-matching-motion'\n  '5': 'vim-mode:move-to-previous-paragraph'\n  '3': 'vim-mode:move-to-next-paragraph'\n  '1': 'vim-mode:move-to-previous-sentence'\n  '9': 'vim-mode:auto-indent'\n  '0': 'vim-mode:search-current-word'\n  '2': 'vim-mode:move-to-next-sentence'\n  '4': 'vim-mode:move-to-first-character-of-line-down'\n  '\u00df': 'vim-mode:move-to-mark-literal'\n\n'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n  'i 7': 'vim-mode:select-inside-square-brackets'\n  'a 7': 'vim-mode:select-around-square-brackets'\n  'i 5': 'vim-mode:select-inside-curly-brackets'\n  'a 5': 'vim-mode:select-around-curly-brackets'\n  'i 3': 'vim-mode:select-inside-curly-brackets'\n  'a 3': 'vim-mode:select-around-curly-brackets'\n  'i 1': 'vim-mode:select-inside-parentheses'\n  'a 1': 'vim-mode:select-around-parentheses'\n  'i 2': 'vim-mode:select-inside-parentheses'\n  'a 2': 'vim-mode:select-around-parentheses'\n  'i 6': 'vim-mode:select-inside-square-brackets'\n  'a 6': 'vim-mode:select-around-square-brackets'\n  'i \u00df': 'vim-mode:select-inside-back-ticks'\n  'a \u00df': 'vim-mode:select-around-back-ticks'\n```\n. +1\n\nSame issue found with Programmer Dvorak on Windows 10 (1511) / Atom (1.4.1).\n. I am working around this with the following in my keymap.json for now:\n\n```\n# Support for Programmer Dvorak (Template)\n\n# # Key: $\n# # Atom: `\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '`': 'vim-mode:move-to-last-character-of-line'\n#\n# # Key: ~\n# # Atom: ~\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   'g ~': 'vim-mode:toggle-case'\n#   '~': 'vim-mode:toggle-case-now'\n#\n# # Key: &\n# # Atom: [\n#\n# # Key: %\n# # Atom: {\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '{': 'vim-mode:bracket-matching-motion'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" {': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" {': 'vim-mode:register-prefix'\n#\n# # Key: [\n# # Atom: 7\n# 'atom-text-editor.vim-mode':\n#   'ctrl-7': 'vim-mode:reset-normal-mode'\n#\n# 'atom-text-editor.vim-mode:not(.normal-mode)':\n#   'ctrl-7': 'vim-mode:activate-normal-mode'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 7': 'vim-mode:select-inside-square-brackets'\n#   'a 7': 'vim-mode:select-around-square-brackets'\n#\n# # Key: 7\n# # Atom: &\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '&': 'vim-mode:repeat-prefix'\n#\n# # Key: {\n# # Atom: 5\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '5': 'vim-mode:move-to-previous-paragraph'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 5': 'vim-mode:select-inside-curly-brackets'\n#   'a 5': 'vim-mode:select-around-curly-brackets'\n#\n# # Key: 5\n# # Atom: %\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '%': 'vim-mode:repeat-prefix'\n#\n# # Key: }\n# # Atom: 3\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '3': 'vim-mode:move-to-next-paragraph'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 3': 'vim-mode:select-inside-curly-brackets'\n#   'a 3': 'vim-mode:select-around-curly-brackets'\n#\n# # Key: 3\n# # Atom: #\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '#': 'vim-mode:repeat-prefix'\n#\n# # Key: (\n# # Atom: 1\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '1': 'vim-mode:move-to-previous-sentence'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 1': 'vim-mode:select-inside-parentheses'\n#   'a 1': 'vim-mode:select-around-parentheses'\n#\n# # Key: 1\n# # Atom: !\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '!': 'vim-mode:repeat-prefix'\n#\n# # Key: =\n# # Atom: 9\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '9': 'vim-mode:auto-indent'\n#\n# # Key: 9\n# # Atom: (\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '(': 'vim-mode:repeat-prefix'\n#\n# # Key: *\n# # Atom: 0\n# # 'atom-text-editor.vim-mode.insert-mode':\n# #   'ctrl-r 0': 'vim-mode:insert-mode-put'\n#\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '0': 'vim-mode:search-current-word'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" 0': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" 0': 'vim-mode:register-prefix'\n#\n# # Key: 0\n# # Atom: )\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   ')': 'vim-mode:repeat-prefix'\n#\n# # Key: )\n# # Atom: 2\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '2': 'vim-mode:move-to-next-sentence'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 2': 'vim-mode:select-inside-parentheses'\n#   'a 2': 'vim-mode:select-around-parentheses'\n#\n# # Key: 2\n# # Atom: @\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '@': 'vim-mode:repeat-prefix'\n#\n# # Key: +\n# # Atom: 4\n# # 'atom-text-editor.vim-mode.insert-mode':\n# #   'ctrl-r 4': 'vim-mode:insert-mode-put'\n#\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '4': 'vim-mode:move-to-first-character-of-line-down'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" 4': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" 4': 'vim-mode:register-prefix'\n#\n# # Key: 4\n# # Atom: $\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '$': 'vim-mode:repeat-prefix'\n#\n# # Key: ]\n# # Atom: 6\n# 'atom-text-editor.vim-mode.normal-mode':\n#   'ctrl-6': 'symbols-view:go-to-declaration'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 6': 'vim-mode:select-inside-square-brackets'\n#   'a 6': 'vim-mode:select-around-square-brackets'\n#\n# # Key: 6\n# # Atom: ^\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '^': 'vim-mode:repeat-prefix'\n#\n# # Key: !\n# # Atom: 8\n#\n# # Key: 8\n# # Atom: *\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '*': 'vim-mode:repeat-prefix'\n#\n# # Key: #\n# # Atom: \u00df\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '\u00df': 'vim-mode:reverse-search-current-word'\n#\n# # Key: `\n# # Atom: \u00df\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '\u00df': 'vim-mode:move-to-mark-literal'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i \u00df': 'vim-mode:select-inside-back-ticks'\n#   'a \u00df': 'vim-mode:select-around-back-ticks'\n#\n# # Key: @\n# # Atom: ]\n#\n# # Key: ^\n# # Atom: }\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '}': 'vim-mode:move-to-first-character-of-line'\n\n# Support for Programmer Dvorak (Actual)\n'atom-text-editor.vim-mode':\n  'ctrl-7': 'vim-mode:reset-normal-mode'\n\n'atom-text-editor.vim-mode:not(.normal-mode)':\n  'ctrl-7': 'vim-mode:activate-normal-mode'\n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  '`': 'vim-mode:move-to-last-character-of-line'\n  'g ~': 'vim-mode:toggle-case'\n  '~': 'vim-mode:toggle-case-now'\n  '{': 'vim-mode:bracket-matching-motion'\n  '5': 'vim-mode:move-to-previous-paragraph'\n  '3': 'vim-mode:move-to-next-paragraph'\n  '1': 'vim-mode:move-to-previous-sentence'\n  '9': 'vim-mode:auto-indent'\n  '0': 'vim-mode:search-current-word'\n  '2': 'vim-mode:move-to-next-sentence'\n  '4': 'vim-mode:move-to-first-character-of-line-down'\n  '\u00df': 'vim-mode:move-to-mark-literal'\n\n'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n  'i 7': 'vim-mode:select-inside-square-brackets'\n  'a 7': 'vim-mode:select-around-square-brackets'\n  'i 5': 'vim-mode:select-inside-curly-brackets'\n  'a 5': 'vim-mode:select-around-curly-brackets'\n  'i 3': 'vim-mode:select-inside-curly-brackets'\n  'a 3': 'vim-mode:select-around-curly-brackets'\n  'i 1': 'vim-mode:select-inside-parentheses'\n  'a 1': 'vim-mode:select-around-parentheses'\n  'i 2': 'vim-mode:select-inside-parentheses'\n  'a 2': 'vim-mode:select-around-parentheses'\n  'i 6': 'vim-mode:select-inside-square-brackets'\n  'a 6': 'vim-mode:select-around-square-brackets'\n  'i \u00df': 'vim-mode:select-inside-back-ticks'\n  'a \u00df': 'vim-mode:select-around-back-ticks'\n```\n. +1\n\nSame issue found with Programmer Dvorak on Windows 10 (1511) / Atom (1.4.1).\n. I am working around this with the following in my keymap.json for now:\n\n```\n# Support for Programmer Dvorak (Template)\n\n# # Key: $\n# # Atom: `\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '`': 'vim-mode:move-to-last-character-of-line'\n#\n# # Key: ~\n# # Atom: ~\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   'g ~': 'vim-mode:toggle-case'\n#   '~': 'vim-mode:toggle-case-now'\n#\n# # Key: &\n# # Atom: [\n#\n# # Key: %\n# # Atom: {\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '{': 'vim-mode:bracket-matching-motion'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" {': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" {': 'vim-mode:register-prefix'\n#\n# # Key: [\n# # Atom: 7\n# 'atom-text-editor.vim-mode':\n#   'ctrl-7': 'vim-mode:reset-normal-mode'\n#\n# 'atom-text-editor.vim-mode:not(.normal-mode)':\n#   'ctrl-7': 'vim-mode:activate-normal-mode'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 7': 'vim-mode:select-inside-square-brackets'\n#   'a 7': 'vim-mode:select-around-square-brackets'\n#\n# # Key: 7\n# # Atom: &\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '&': 'vim-mode:repeat-prefix'\n#\n# # Key: {\n# # Atom: 5\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '5': 'vim-mode:move-to-previous-paragraph'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 5': 'vim-mode:select-inside-curly-brackets'\n#   'a 5': 'vim-mode:select-around-curly-brackets'\n#\n# # Key: 5\n# # Atom: %\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '%': 'vim-mode:repeat-prefix'\n#\n# # Key: }\n# # Atom: 3\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '3': 'vim-mode:move-to-next-paragraph'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 3': 'vim-mode:select-inside-curly-brackets'\n#   'a 3': 'vim-mode:select-around-curly-brackets'\n#\n# # Key: 3\n# # Atom: #\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '#': 'vim-mode:repeat-prefix'\n#\n# # Key: (\n# # Atom: 1\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '1': 'vim-mode:move-to-previous-sentence'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 1': 'vim-mode:select-inside-parentheses'\n#   'a 1': 'vim-mode:select-around-parentheses'\n#\n# # Key: 1\n# # Atom: !\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '!': 'vim-mode:repeat-prefix'\n#\n# # Key: =\n# # Atom: 9\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '9': 'vim-mode:auto-indent'\n#\n# # Key: 9\n# # Atom: (\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '(': 'vim-mode:repeat-prefix'\n#\n# # Key: *\n# # Atom: 0\n# # 'atom-text-editor.vim-mode.insert-mode':\n# #   'ctrl-r 0': 'vim-mode:insert-mode-put'\n#\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '0': 'vim-mode:search-current-word'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" 0': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" 0': 'vim-mode:register-prefix'\n#\n# # Key: 0\n# # Atom: )\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   ')': 'vim-mode:repeat-prefix'\n#\n# # Key: )\n# # Atom: 2\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '2': 'vim-mode:move-to-next-sentence'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 2': 'vim-mode:select-inside-parentheses'\n#   'a 2': 'vim-mode:select-around-parentheses'\n#\n# # Key: 2\n# # Atom: @\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '@': 'vim-mode:repeat-prefix'\n#\n# # Key: +\n# # Atom: 4\n# # 'atom-text-editor.vim-mode.insert-mode':\n# #   'ctrl-r 4': 'vim-mode:insert-mode-put'\n#\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '4': 'vim-mode:move-to-first-character-of-line-down'\n#\n# # 'atom-text-editor.vim-mode.normal-mode':\n# #   '\" 4': 'vim-mode:register-prefix'\n#\n# # 'atom-text-editor.vim-mode.visual-mode':\n# #   '\" 4': 'vim-mode:register-prefix'\n#\n# # Key: 4\n# # Atom: $\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '$': 'vim-mode:repeat-prefix'\n#\n# # Key: ]\n# # Atom: 6\n# 'atom-text-editor.vim-mode.normal-mode':\n#   'ctrl-6': 'symbols-view:go-to-declaration'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i 6': 'vim-mode:select-inside-square-brackets'\n#   'a 6': 'vim-mode:select-around-square-brackets'\n#\n# # Key: 6\n# # Atom: ^\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '^': 'vim-mode:repeat-prefix'\n#\n# # Key: !\n# # Atom: 8\n#\n# # Key: 8\n# # Atom: *\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '*': 'vim-mode:repeat-prefix'\n#\n# # Key: #\n# # Atom: \u00df\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '\u00df': 'vim-mode:reverse-search-current-word'\n#\n# # Key: `\n# # Atom: \u00df\n# 'atom-text-editor.vim-mode:not(.insert-mode)':\n#   '\u00df': 'vim-mode:move-to-mark-literal'\n#\n# 'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n#   'i \u00df': 'vim-mode:select-inside-back-ticks'\n#   'a \u00df': 'vim-mode:select-around-back-ticks'\n#\n# # Key: @\n# # Atom: ]\n#\n# # Key: ^\n# # Atom: }\n# # 'atom-text-editor.vim-mode:not(.insert-mode)':\n# #   '}': 'vim-mode:move-to-first-character-of-line'\n\n# Support for Programmer Dvorak (Actual)\n'atom-text-editor.vim-mode':\n  'ctrl-7': 'vim-mode:reset-normal-mode'\n\n'atom-text-editor.vim-mode:not(.normal-mode)':\n  'ctrl-7': 'vim-mode:activate-normal-mode'\n\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  '`': 'vim-mode:move-to-last-character-of-line'\n  'g ~': 'vim-mode:toggle-case'\n  '~': 'vim-mode:toggle-case-now'\n  '{': 'vim-mode:bracket-matching-motion'\n  '5': 'vim-mode:move-to-previous-paragraph'\n  '3': 'vim-mode:move-to-next-paragraph'\n  '1': 'vim-mode:move-to-previous-sentence'\n  '9': 'vim-mode:auto-indent'\n  '0': 'vim-mode:search-current-word'\n  '2': 'vim-mode:move-to-next-sentence'\n  '4': 'vim-mode:move-to-first-character-of-line-down'\n  '\u00df': 'vim-mode:move-to-mark-literal'\n\n'atom-text-editor.vim-mode.operator-pending-mode, atom-text-editor.vim-mode.visual-mode':\n  'i 7': 'vim-mode:select-inside-square-brackets'\n  'a 7': 'vim-mode:select-around-square-brackets'\n  'i 5': 'vim-mode:select-inside-curly-brackets'\n  'a 5': 'vim-mode:select-around-curly-brackets'\n  'i 3': 'vim-mode:select-inside-curly-brackets'\n  'a 3': 'vim-mode:select-around-curly-brackets'\n  'i 1': 'vim-mode:select-inside-parentheses'\n  'a 1': 'vim-mode:select-around-parentheses'\n  'i 2': 'vim-mode:select-inside-parentheses'\n  'a 2': 'vim-mode:select-around-parentheses'\n  'i 6': 'vim-mode:select-inside-square-brackets'\n  'a 6': 'vim-mode:select-around-square-brackets'\n  'i \u00df': 'vim-mode:select-inside-back-ticks'\n  'a \u00df': 'vim-mode:select-around-back-ticks'\n```\n. ",
    "bengotow": "I think the issue is described here: https://googlechrome.github.io/samples/keyboardevent-code-attribute/, and could be fixed by making the keymaps use the new Chrome API.\n. I think the issue is described here: https://googlechrome.github.io/samples/keyboardevent-code-attribute/, and could be fixed by making the keymaps use the new Chrome API.\n. ",
    "kcaze": "The offending line is here: https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee#L63\n\nAtom now has an `autoscroll` option that defaults to `true` for `setBufferRange()`. Setting the `autoscroll` option to `false` fixes this.\n. The offending line is here: https://github.com/atom/vim-mode/blob/master/lib/motions/general-motions.coffee#L63\n\nAtom now has an `autoscroll` option that defaults to `true` for `setBufferRange()`. Setting the `autoscroll` option to `false` fixes this.\n. ",
    "jinCN": "Me too\n. Me too\n. ",
    "rdbell": "Atom: 1.3.1\n\nOS X: 10.11.1 (15B42)\n\nvim-mode: 0.63.0\n. Atom: 1.3.1\n\nOS X: 10.11.1 (15B42)\n\nvim-mode: 0.63.0\n. Atom: 1.3.1\n\nOS X: 10.11.1 (15B42)\n\nvim-mode: 0.63.0\n. Atom: 1.3.1\n\nOS X: 10.11.1 (15B42)\n\nvim-mode: 0.63.0\n. ",
    "vignesh-m": "v$ stops at last character in vim, but extends to whole line in vim-mode.\nWas this supposed to be fixed in [#2](https://github.com/atom/vim-mode/issues/2) ?\n. v$ stops at last character in vim, but extends to whole line in vim-mode.\nWas this supposed to be fixed in [#2](https://github.com/atom/vim-mode/issues/2) ?\n. ",
    "narychen": "+1\n. +1\n. ",
    "polybuildr": "+1, issue occurring for me too. Running on Ubuntu 14.04. Atom version is 1.5.3\n. For me, the module was `event-kit`.\n. Sorry! This was an issue on my end. I installed the package using `git` and so I didn't have any of the packages it required. An `npm install` seems to have fixed it. :)\n. @50Wliu, thanks for the advice - will keep that in mind. I generally refrain from using `apm` due to some annoying proxy server issues that I seem to have fixed with `npm` but haven't managed to resolve for `apm`.\n. +1, issue occurring for me too. Running on Ubuntu 14.04. Atom version is 1.5.3\n. For me, the module was `event-kit`.\n. Sorry! This was an issue on my end. I installed the package using `git` and so I didn't have any of the packages it required. An `npm install` seems to have fixed it. :)\n. @50Wliu, thanks for the advice - will keep that in mind. I generally refrain from using `apm` due to some annoying proxy server issues that I seem to have fixed with `npm` but haven't managed to resolve for `apm`.\n. ",
    "MaskedBandit1": "Like how do you enter vim mode in atom once the package has been installed?\n. Like how do you enter vim mode in atom once the package has been installed?\n. ",
    "donokuda": "@lee-dohm Just tried out @SchDen's patch and it works as I would expect it to :raised_hands:\n. @lee-dohm Just tried out @SchDen's patch and it works as I would expect it to :raised_hands:\n. ",
    "SchDen": "Ok. I try it\n. @lee-dohm  please prompt to me.. How i can run tests for test my changes?\n. @50Wliu oh yep, thanks!\n. Hi gays!\n\nI make 4 steps for tests it\n- Clone tree-view form [atom/tree-view](https://github.com/atom/tree-view)\n- Make `apm install`\n- Make `apm test` (Tests passed)\n- Add hotkeys to `keymaps/tree-view.cson`\n- Make `apm install`\n- Make `apm test` (Tests passed)\n\nFist start tests\n![step1](https://cloud.githubusercontent.com/assets/1484977/12687830/5081f876-c6e3-11e5-95f4-0d9d94303a67.png)\n\nSecond start tests \n![step2](https://cloud.githubusercontent.com/assets/1484977/12687838/5d5fa228-c6e3-11e5-8fb8-e972e772ce0b.png)\n. @lee-dohm thanks!\nI saw it just)))\n. Ok. I try it\n. @lee-dohm  please prompt to me.. How i can run tests for test my changes?\n. @50Wliu oh yep, thanks!\n. Hi gays!\n\nI make 4 steps for tests it\n- Clone tree-view form [atom/tree-view](https://github.com/atom/tree-view)\n- Make `apm install`\n- Make `apm test` (Tests passed)\n- Add hotkeys to `keymaps/tree-view.cson`\n- Make `apm install`\n- Make `apm test` (Tests passed)\n\nFist start tests\n![step1](https://cloud.githubusercontent.com/assets/1484977/12687830/5081f876-c6e3-11e5-95f4-0d9d94303a67.png)\n\nSecond start tests \n![step2](https://cloud.githubusercontent.com/assets/1484977/12687838/5d5fa228-c6e3-11e5-8fb8-e972e772ce0b.png)\n. @lee-dohm thanks!\nI saw it just)))\n. ",
    "jontonsoup": "any update on this? I'd love to help -- great feature :)\n. @lee-dohm haha thanks -- will do\n. @lee-dohm works perfectly for me. Not sure why the tests are broken, though.\n\nI was actually confused and thought the feature was navigation between panes and between the tree without clicking (Similar to how nerd tree works with real vim). Do you know if this is possible?\n. @lee-dohm Should i move this convo to a new issue? I'd like to map this to `Ctrl+H` and `Ctrl+L`\n\nThe square vim distro is an example of this: https://github.com/square/maximum-awesome \n. @BinaryMuse thanks for the suggestion -- I just realized that I meant HJKL to work between all window panes, including the tree view. I now realize this is a default in maximum awesome, and not in nerd-tree.\n\nAs to whether it should come with the built in is up to the maintainers -- I would support it :).  \n. That would be awesome!\n. any update on this? I'd love to help -- great feature :)\n. @lee-dohm haha thanks -- will do\n. @lee-dohm works perfectly for me. Not sure why the tests are broken, though.\n\nI was actually confused and thought the feature was navigation between panes and between the tree without clicking (Similar to how nerd tree works with real vim). Do you know if this is possible?\n. @lee-dohm Should i move this convo to a new issue? I'd like to map this to `Ctrl+H` and `Ctrl+L`\n\nThe square vim distro is an example of this: https://github.com/square/maximum-awesome \n. @BinaryMuse thanks for the suggestion -- I just realized that I meant HJKL to work between all window panes, including the tree view. I now realize this is a default in maximum awesome, and not in nerd-tree.\n\nAs to whether it should come with the built in is up to the maintainers -- I would support it :).  \n. That would be awesome!\n. ",
    "jsolack": "One big reason is it doesn't support ex-mode, I can't use :w to write a file...\n. One big reason is it doesn't support ex-mode, I can't use :w to write a file...\n. ",
    "tttlkkkl": "This error occurred when I pressed the number and capital G button.\n. Okay,thanks!\n. This error occurred when I pressed the number and capital G button.\n. Okay,thanks!\n. ",
    "chocolatekitkat": "Hi Max,\n\nI restarted Atom and vim works now. I was installing new themes at the time.\nI should have thought of that.  Always restart... ;) I just started using Atom.\n\nThanks!\n. Hi Max,\n\nI restarted Atom and vim works now. I was installing new themes at the time.\nI should have thought of that.  Always restart... ;) I just started using Atom.\n\nThanks!\n. ",
    "rsommerard": "Hi, \n\nMy pull request concerns this issue #937.\n\nI know that Travis will failed so what is the way for spec that doesn't have fix. My goal is just to provide you spec and not to fix the bug.\n\n-- Romain\n. Hi, \n\nMy pull request concerns this issue #937.\n\nI know that Travis will failed so what is the way for spec that doesn't have fix. My goal is just to provide you spec and not to fix the bug.\n\n-- Romain\n. ",
    "sho-87": "@maxbrunsfeld That works nicely, thanks!\n\nIs there a way to change the colour of the entire status bar to make it extremely obvious? And/or to change the colour of the cursor depending on mode?\n. @maxbrunsfeld That works nicely, thanks!\n\nIs there a way to change the colour of the entire status bar to make it extremely obvious? And/or to change the colour of the cursor depending on mode?\n. ",
    "andrewdc": "@sho-87 where did you put this code? I am using the material-ui theme, and I put it in there, and also in my base stylesheet to no effect. Thanks!. @sho-87 where did you put this code? I am using the material-ui theme, and I put it in there, and also in my base stylesheet to no effect. Thanks!. ",
    "yukitoto": "I have same issue\n. I have same issue\n. ",
    "aviau": "I was using an outdated version of vim-mode. My bad!\n. I was using an outdated version of vim-mode. My bad!\n. ",
    "oldratlee": ":+1:  \nLike and need this feature badly :smile: \n. :+1:  \nLike and need this feature badly :smile: \n. ",
    "yubaoquan": "Same need. Is atom team still maintaining this package?. Same need. Is atom team still maintaining this package?. ",
    "sheegl": "> Looks like #657... Does it happen with those steps?\n\nIndeed, it does.\n. > Looks like #657... Does it happen with those steps?\n\nIndeed, it does.\n. ",
    "elrob": "Hi @morenoh149 and @maxbrunsfeld, I added those two snippets to the respective files and restarted atom but it doesn't seem to work. 'ctrl-alt-v' does nothing. I also tried a different key combination 'ctrl-shift-F12' and that didn't work either. I'm new to atom, any ideas what I'm missing or how to debug it?\nThanks\n. No worries, I got the following to work fine. \ncredit goes to [chibicode](http://chibicode.com/useful-atom-vim-mode-snippets/)\n\n``` coffeescript\n# init.coffee\n\natom.commands.add 'atom-text-editor',\n  'user:toggle-vim-mode': (event) ->\n    if atom.packages.isPackageDisabled(\"vim-mode\")\n      atom.packages.enablePackage(\"vim-mode\")\n    else\n      atom.packages.disablePackage(\"vim-mode\")\n\n\n# keymap.cson\n\n'atom-workspace':\n  'ctrl-shift-f12': 'user:toggle-vim-mode'\n```\n. Hi @morenoh149 and @maxbrunsfeld, I added those two snippets to the respective files and restarted atom but it doesn't seem to work. 'ctrl-alt-v' does nothing. I also tried a different key combination 'ctrl-shift-F12' and that didn't work either. I'm new to atom, any ideas what I'm missing or how to debug it?\nThanks\n. No worries, I got the following to work fine. \ncredit goes to [chibicode](http://chibicode.com/useful-atom-vim-mode-snippets/)\n\n``` coffeescript\n# init.coffee\n\natom.commands.add 'atom-text-editor',\n  'user:toggle-vim-mode': (event) ->\n    if atom.packages.isPackageDisabled(\"vim-mode\")\n      atom.packages.enablePackage(\"vim-mode\")\n    else\n      atom.packages.disablePackage(\"vim-mode\")\n\n\n# keymap.cson\n\n'atom-workspace':\n  'ctrl-shift-f12': 'user:toggle-vim-mode'\n```\n. ",
    "wmassa": "This is because of an issue in Atom: https://github.com/atom/atom/issues/9851\n. This is because of an issue in Atom: https://github.com/atom/atom/issues/9851\n. ",
    "agrossfield": "I too would like to see this behavior.  As I convert from vim, I constantly make this mistake, and I'd love to be able to paste at the insert cursor.. I too would like to see this behavior.  As I convert from vim, I constantly make this mistake, and I'd love to be able to paste at the insert cursor.. ",
    "GitJer": "As do I!. As do I!. ",
    "koorgoo": "`:5<Enter>` must set the current line to the 5th one just like Vim does it.\n. `:5<Enter>` must set the current line to the 5th one just like Vim does it.\n. ",
    "aminroosta": "My solution:\n\n`init.coffee`\n\n```\natom.commands.add 'atom-text-editor',\n  'editor:toggle-folding': (event) ->\n    editor = @getModel()\n    bufferRow = editor.bufferPositionForScreenPosition(editor.getCursorScreenPosition()).row\n    if editor.isFoldedAtBufferRow(bufferRow)\n      editor.unfoldBufferRow(bufferRow)\n    else\n      editor.foldBufferRow(bufferRow)\n```\n\n& in `keymap.cson`\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'z a': 'editor:toggle-folding'\n```\n. My solution:\n\n`init.coffee`\n\n```\natom.commands.add 'atom-text-editor',\n  'editor:toggle-folding': (event) ->\n    editor = @getModel()\n    bufferRow = editor.bufferPositionForScreenPosition(editor.getCursorScreenPosition()).row\n    if editor.isFoldedAtBufferRow(bufferRow)\n      editor.unfoldBufferRow(bufferRow)\n    else\n      editor.foldBufferRow(bufferRow)\n```\n\n& in `keymap.cson`\n\n```\n'atom-text-editor.vim-mode:not(.insert-mode)':\n  'z a': 'editor:toggle-folding'\n```\n. ",
    "mauskin": "As of Atom 1.9.9 and vim-mode 0.65.1 `ci'` works fine for me and `ci/` doesn't.\n. As of Atom 1.9.9 and vim-mode 0.65.1 `ci'` works fine for me and `ci/` doesn't.\n. ",
    "johndangerstorey": "Yeah, we need html tag matching pretty please with sugar on top?\n. Yeah, we need html tag matching pretty please with sugar on top?\n. ",
    "BinaryMuse": "Hey @jontonsoup, would you be happy with some custom keymaps for this functionality or do you think it should come built-in with the package?\n\nFor the custom functionality, you could add something like the following to your [Keymap](https://atom.io/docs/latest/behind-atom-keymaps-in-depth):\n\n``` cson\n'atom-text-editor.vim-mode':\n  'ctrl-h': 'tree-view:toggle-focus'\n'.tree-view':\n  'ctrl-l': 'tree-view:toggle-focus'\n```\n. Ah, got it. Yeah, it looks like they have `Ctrl+[hjkl]` as an alias for `Ctrl-W [hjkl]`, so it'd probably be preferable to have that part of it in custom keybindings if you like the shorter versions. However, there _is_ the part where the tree in normal vim is simply a buffer, and so you can move to it using the same keyboard shortcuts as any other buffers; perhaps vim-mode could offer a version of the `window.focus-pane-on-left` command that moves to the tree view if the left-most pane is already focused.\n. Fixed by #1020. Thanks very much for your patience!\n. Fixed by #1020 \n. @stefanvlaski Thanks very much for taking this on!\n. Hey @jontonsoup, would you be happy with some custom keymaps for this functionality or do you think it should come built-in with the package?\n\nFor the custom functionality, you could add something like the following to your [Keymap](https://atom.io/docs/latest/behind-atom-keymaps-in-depth):\n\n``` cson\n'atom-text-editor.vim-mode':\n  'ctrl-h': 'tree-view:toggle-focus'\n'.tree-view':\n  'ctrl-l': 'tree-view:toggle-focus'\n```\n. Ah, got it. Yeah, it looks like they have `Ctrl+[hjkl]` as an alias for `Ctrl-W [hjkl]`, so it'd probably be preferable to have that part of it in custom keybindings if you like the shorter versions. However, there _is_ the part where the tree in normal vim is simply a buffer, and so you can move to it using the same keyboard shortcuts as any other buffers; perhaps vim-mode could offer a version of the `window.focus-pane-on-left` command that moves to the tree view if the left-most pane is already focused.\n. Fixed by #1020. Thanks very much for your patience!\n. Fixed by #1020 \n. @stefanvlaski Thanks very much for taking this on!\n. ",
    "zcstarr": "I'm getting the same issue with 1.6.2 any thoughts ?\n. I'm getting the same issue with 1.6.2 any thoughts ?\n. ",
    "chriscasola": "@nabsiddiqui I think you need the surround plugin for vim to get that behavior. There is another atom package that seems to add surround support: https://atom.io/packages/vim-surround\n. Is there anything I can do to get this merged?\n. @nabsiddiqui I think you need the surround plugin for vim to get that behavior. There is another atom package that seems to add surround support: https://atom.io/packages/vim-surround\n. Is there anything I can do to get this merged?\n. ",
    "nabsiddiqui": "Thanks for the help.  I didn't know that package existed.  It only does some of the things that vim does though.  For instance, in a Markdown document heavy with prose, typing in 'das' would usually delete the current sentence.  The vim-surround package, on the other hand, seems to only delete a couple of markers surrounding quotes, parenthesis, etc.  \n. Thanks for the help.  I didn't know that package existed.  It only does some of the things that vim does though.  For instance, in a Markdown document heavy with prose, typing in 'das' would usually delete the current sentence.  The vim-surround package, on the other hand, seems to only delete a couple of markers surrounding quotes, parenthesis, etc.  \n. ",
    "amfarrell": "'a', which is supposed to start insert move with the cursor just after the current character fails at the end of the line. At the end of the line, it inserts the cursor before the current character. It works properly on all characters except the last one. Therefore, I suspect the issue is some code shared between these two bindings.\n. 'a', which is supposed to start insert move with the cursor just after the current character fails at the end of the line. At the end of the line, it inserts the cursor before the current character. It works properly on all characters except the last one. Therefore, I suspect the issue is some code shared between these two bindings.\n. This is a duplicate of #995 . Note that going to Atom > Preferences > Packages, searching vim-mode and hitting Disable, then hitting Enable causes this to work properly.\n. 'a', which is supposed to start insert move with the cursor just after the current character fails at the end of the line. At the end of the line, it inserts the cursor before the current character. It works properly on all characters except the last one. Therefore, I suspect the issue is some code shared between these two bindings.\n. 'a', which is supposed to start insert move with the cursor just after the current character fails at the end of the line. At the end of the line, it inserts the cursor before the current character. It works properly on all characters except the last one. Therefore, I suspect the issue is some code shared between these two bindings.\n. This is a duplicate of #995 . Note that going to Atom > Preferences > Packages, searching vim-mode and hitting Disable, then hitting Enable causes this to work properly.\n. ",
    "sandman21dan": "I've git this same issue, and didn't have it originally.\n\nUsing Windows 10.\n. +1 using command CIW then repeating with \".\" doesn't re-add the word, just deletes.\n. I've git this same issue, and didn't have it originally.\n\nUsing Windows 10.\n. +1 using command CIW then repeating with \".\" doesn't re-add the word, just deletes.\n. ",
    "codelogicws": "This issue has been driving me nuts lol.\n. Using Linux Mint\n. This has been fixed in my environment over night. So unless this is an intermittent problem I'm guessing its been fixed.\n. This issue has been driving me nuts lol.\n. Using Linux Mint\n. This has been fixed in my environment over night. So unless this is an intermittent problem I'm guessing its been fixed.\n. ",
    "scotte": "Same issue here - \".\" is a pretty fundamental and important vi binding...\n. Maybe I'm just lucky, but seems to be working for me on Atom 1.7.2 with vim-mode 0.65.0.\n. Same issue here - \".\" is a pretty fundamental and important vi binding...\n. Maybe I'm just lucky, but seems to be working for me on Atom 1.7.2 with vim-mode 0.65.0.\n. ",
    "horiuchi": "I have same issue too.\n\nAtom 1.7.2\nvim-mode 0.65.0\nMacOSX\n. I have same issue too.\n\nAtom 1.7.2\nvim-mode 0.65.0\nMacOSX\n. ",
    "jessejanderson": "Same issue here, as @scotte said this is a pretty fundamental binding...\n\nAtom 1.7.1\nvim-mode 0.65.0\nMac OS X El Capitan\n. Co-worker exhibits the same issue with Atom 1.7.0 and vim-mode 0.63.0\n. I think I've been experiencing it for a few weeks now...\n. Same issue here, as @scotte said this is a pretty fundamental binding...\n\nAtom 1.7.1\nvim-mode 0.65.0\nMac OS X El Capitan\n. Co-worker exhibits the same issue with Atom 1.7.0 and vim-mode 0.63.0\n. I think I've been experiencing it for a few weeks now...\n. ",
    "ctbarrett": "+1\n. +1\n. ",
    "tylerthehaas": "+1\n. +1\n. +1\n. +1\n. ",
    "jskopek": "+1. Didn't realize how important this key was until I no longer had access to it.\n. Looks like you're seeing the same issue as #1006 \n. +1. Didn't realize how important this key was until I no longer had access to it.\n. Looks like you're seeing the same issue as #1006 \n. ",
    "Jakeah": "+1 bump to high heaven\n. @t9md has already stated the issue and what the fix needs to be.  The +1's are hopefully bringing attention to the issue and that it needs to be pushed sooner than later.  \n. +1 bump to high heaven\n. @t9md has already stated the issue and what the fix needs to be.  The +1's are hopefully bringing attention to the issue and that it needs to be pushed sooner than later.  \n. ",
    "jeffballard": "+1 for repeating goodness\n. +1 for repeating goodness\n. ",
    "gnebehay": "+1 same here\n. +1 same here\n. ",
    "ggeldenhuis": "+1 \n. +1\n. +1 \n. +1\n. ",
    "psifertex": "@Jakeah Now that github supports adding reaction emoji to comments and bugs, just add your vote to the original issue with a thumbs up. They are sortable in issue lists so others can see what has interest, but it doesn't spam other people who have subscribed to this thread and want actual updates. \n. Looks like a dupe of #1006 \n. @Jakeah Now that github supports adding reaction emoji to comments and bugs, just add your vote to the original issue with a thumbs up. They are sortable in issue lists so others can see what has interest, but it doesn't spam other people who have subscribed to this thread and want actual updates. \n. Looks like a dupe of #1006 \n. ",
    "criztovyl": "<s>Search also does not work for me.\nDebian Testing\nAtom 1.7.1\nvim-mode 0.65.0</s>\nkeyboard-localization solved it for me, too.\n. <s>Search also does not work for me.\nDebian Testing\nAtom 1.7.1\nvim-mode 0.65.0</s>\nkeyboard-localization solved it for me, too.\n. ",
    "AnilRedshift": "Or being able to ingest a .vimrc into the new world...\n. Or being able to ingest a .vimrc into the new world...\n. ",
    "movestill": "I have the same issue.\n\nAlso, probably related, trying to repeat a change word command (cw) only deletes the current word but does not do the subsequent insert of text.\n\nAtom 1.7.1\nvim-mode 0.65.0\nWindows 7\n. I have the same issue.\n\nAlso, probably related, trying to repeat a change word command (cw) only deletes the current word but does not do the subsequent insert of text.\n\nAtom 1.7.1\nvim-mode 0.65.0\nWindows 7\n. ",
    "snkutlu": "Have the same issue for \"Insert\" and for \"change-word\". \n\nAtom 1.7.3\nvim-mode 0.65.0 \nMacOS ElCapitan 10.11.4\n. +1 to have a seperate buffer for VI mode buffer and system clipboard. \n. Have the same issue for \"Insert\" and for \"change-word\". \n\nAtom 1.7.3\nvim-mode 0.65.0 \nMacOS ElCapitan 10.11.4\n. +1 to have a seperate buffer for VI mode buffer and system clipboard. \n. ",
    "gregz67": "+1\n\nSame atom and vim-mode versions. Mac Yosemite.\n. +1\n\nSame atom and vim-mode versions. Mac Yosemite.\n. ",
    "styx": "Not an expert, but it seems to be a general Atom issue of large files.\nTake a look at: https://github.com/atom/vim-mode/blob/a2464a8c434dfbe6db9b2ca99f6a49c50a4d8d31/lib/operators/general-operators.coffee#L226\n. Not an expert, but it seems to be a general Atom issue of large files.\nTake a look at: https://github.com/atom/vim-mode/blob/a2464a8c434dfbe6db9b2ca99f6a49c50a4d8d31/lib/operators/general-operators.coffee#L226\n. ",
    "wind13": "And uninstall then reinstall the v0.65.0 got this error:\n\nFailed to activate the vim-mode package\nundefined is not a function\nHide Stack Trace\nTypeError: undefined is not a function\n    at getChangesSinceCheckpoint (/Users/samliu/.atom/packages/vim-mode/lib/vim-state.coffee:1290:26)\n    at VimState.module.exports.VimState.deactivateInsertMode (/Users/samliu/.atom/packages/vim-mode/lib/vim-state.coffee:1026:17)\n    at VimState.module.exports.VimState.activateNormalMode (/Users/samliu/.atom/packages/vim-mode/lib/vim-state.coffee:939:12)\n    at new VimState (/Users/samliu/.atom/packages/vim-mode/lib/vim-state.coffee:76:14)\n    at /Users/samliu/.atom/packages/vim-mode/lib/vim-mode.coffee:28:22\n    at Workspace.module.exports.Workspace.observeTextEditors (/Applications/Atom.app/Contents/Resources/app.asar/src/workspace.js:266:9)\n    at Object.module.exports.activate (/Users/samliu/.atom/packages/vim-mode/lib/vim-mode.coffee:22:43)\n    at Package.module.exports.Package.activateNow (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:222:19)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/package.js:203:30\n    at Package.module.exports.Package.measure (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:147:15)\n. Yes, it solved. Thanks!\n. And uninstall then reinstall the v0.65.0 got this error:\n\nFailed to activate the vim-mode package\nundefined is not a function\nHide Stack Trace\nTypeError: undefined is not a function\n    at getChangesSinceCheckpoint (/Users/samliu/.atom/packages/vim-mode/lib/vim-state.coffee:1290:26)\n    at VimState.module.exports.VimState.deactivateInsertMode (/Users/samliu/.atom/packages/vim-mode/lib/vim-state.coffee:1026:17)\n    at VimState.module.exports.VimState.activateNormalMode (/Users/samliu/.atom/packages/vim-mode/lib/vim-state.coffee:939:12)\n    at new VimState (/Users/samliu/.atom/packages/vim-mode/lib/vim-state.coffee:76:14)\n    at /Users/samliu/.atom/packages/vim-mode/lib/vim-mode.coffee:28:22\n    at Workspace.module.exports.Workspace.observeTextEditors (/Applications/Atom.app/Contents/Resources/app.asar/src/workspace.js:266:9)\n    at Object.module.exports.activate (/Users/samliu/.atom/packages/vim-mode/lib/vim-mode.coffee:22:43)\n    at Package.module.exports.Package.activateNow (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:222:19)\n    at /Applications/Atom.app/Contents/Resources/app.asar/src/package.js:203:30\n    at Package.module.exports.Package.measure (/Applications/Atom.app/Contents/Resources/app.asar/src/package.js:147:15)\n. Yes, it solved. Thanks!\n. ",
    "AlexNPavel": "Update your Atom version. I was just having this issue as the atom-editor-bin package in the Arch Linux AUR is still on version 1.6.2, due to library compatibility issues. I installed the atom-editor package instead which builds atom locally and is on version 1.7.3 and that fixed the issue.\n\nTL;DR: Update to Atom Editor 1.7.3\n. Update your Atom version. I was just having this issue as the atom-editor-bin package in the Arch Linux AUR is still on version 1.6.2, due to library compatibility issues. I installed the atom-editor package instead which builds atom locally and is on version 1.7.3 and that fixed the issue.\n\nTL;DR: Update to Atom Editor 1.7.3\n. ",
    "brianpmaher": "I'd agree this issue is pretty annoying and is one of a few issues remaining with `vim-mode` that make it difficult for me to 100% switch from vim.. I'd agree this issue is pretty annoying and is one of a few issues remaining with `vim-mode` that make it difficult for me to 100% switch from vim.. ",
    "v3ss0n": "no activity for many months now it seems to be dead.\n. total of 39 PRs.. would be a shame if this package is dead  , someone should take over.\n. ok then checking out vim-mode-plus\n. no activity for many months now it seems to be dead.\n. total of 39 PRs.. would be a shame if this package is dead  , someone should take over.\n. ok then checking out vim-mode-plus\n. ",
    "gregmacfarlane": "Exactly the same issue over here.\n. Exactly the same issue over here.\n. ",
    "atd": "Upgrading to atom 1.8.0 solves the issue, but raises https://github.com/atom/status-bar/issues/143\n. Thank you @50Wliu I already did.  Last issue disappears after reinstalling \n. Upgrading to atom 1.8.0 solves the issue, but raises https://github.com/atom/status-bar/issues/143\n. Thank you @50Wliu I already did.  Last issue disappears after reinstalling \n. ",
    "sagar2009kumar": "Error: Bad argument\r\n    at TypeError (native)\r\n    at ChildProcess.spawn (internal/child_process.js:289:26)\r\n    at Object.exports.spawn (child_process.js:392:9)\r\n    at compile (C:\\Users\\Sagar\\.atom\\packages\\gpp-compiler\\index.js:274:31)\r\n    at tree-view-file.treeCompile (C:\\Users\\Sagar\\.atom\\packages\\gpp-compiler\\index.js:251:3)\r\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\command-registry.js:259:29)\r\n    at CommandRegistry.handleCommandEvent (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\command-registry.js:3:59)\r\n    at CommandRegistry.module.exports.CommandRegistry.dispatch (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\command-registry.js:160:19)\r\n    at AtomEnvironment.module.exports.AtomEnvironment.dispatchContextMenuCommand (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\atom-environment.js:1181:28)\r\n    at EventEmitter.outerCallback (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\application-delegate.js:332:25)\r\n    at emitThree (events.js:116:13)\r\n    at EventEmitter.emit (events.js:194:7)\r\n\r\nWhat to do with it ... Error: Bad argument\r\n    at TypeError (native)\r\n    at ChildProcess.spawn (internal/child_process.js:289:26)\r\n    at Object.exports.spawn (child_process.js:392:9)\r\n    at compile (C:\\Users\\Sagar\\.atom\\packages\\gpp-compiler\\index.js:274:31)\r\n    at tree-view-file.treeCompile (C:\\Users\\Sagar\\.atom\\packages\\gpp-compiler\\index.js:251:3)\r\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\command-registry.js:259:29)\r\n    at CommandRegistry.handleCommandEvent (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\command-registry.js:3:59)\r\n    at CommandRegistry.module.exports.CommandRegistry.dispatch (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\command-registry.js:160:19)\r\n    at AtomEnvironment.module.exports.AtomEnvironment.dispatchContextMenuCommand (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\atom-environment.js:1181:28)\r\n    at EventEmitter.outerCallback (C:\\Users\\Sagar\\AppData\\Local\\atom\\app-1.13.0\\resources\\app.asar\\src\\application-delegate.js:332:25)\r\n    at emitThree (events.js:116:13)\r\n    at EventEmitter.emit (events.js:194:7)\r\n\r\nWhat to do with it ... ",
    "DrakeXiang": "+1\n. +1\n. ",
    "elitan": "+1\n. +1\n. ",
    "iawia002": "+1\n. +1\n. ",
    "sergiouve": "Is **_this_** package even alive?\n#1045 \n. Is **_this_** package even alive?\n#1045 \n. ",
    "ewannema": "I updated the regular expression to handle \\r\\n line endings. I temporarily modified the test on my machine to validate it, but I am not sure how the project wants to handle these tests.\n. I updated the regular expression to handle \\r\\n line endings. I temporarily modified the test on my machine to validate it, but I am not sure how the project wants to handle these tests.\n. ",
    "zombiezen": "I'm getting this by trying to use the '|' motion.\n. I'm getting this by trying to use the '|' motion.\n. ",
    "reouno": "I got the same error by using '|'.\r\nsierra 10.12.4\r\nAtom 1.16.0\r\nvim-mode 0.66.0. I got the same error by using '|'.\r\nsierra 10.12.4\r\nAtom 1.16.0\r\nvim-mode 0.66.0. ",
    "rsese": "@reouno - as mentioned in the project README:\r\n\r\nhttps://github.com/atom/vim-mode/blob/master/README.md#current-status---deprecated-in-favor-of-vim-mode-plus\r\n\r\nThe vim-mode package has been deprecated in favor of vim-mode-plus:\r\n\r\nhttps://github.com/t9md/atom-vim-mode-plus\r\n\r\nI'd recommend uninstalling vim-mode and installing vim-mode-plus.. Thanks for the report!  Closing since this package has been deprecated in favor of [vim-mode-plus](https://atom.io/packages/vim-mode-plus):\r\n\r\nhttps://github.com/atom/vim-mode#current-status---deprecated-in-favor-of-vim-mode-plus\r\n\r\nYou may want to give that package a try.. Thanks for the report!  Closing since this package has been deprecated in favor of [vim-mode-plus](https://atom.io/packages/vim-mode-plus):\r\n\r\nhttps://github.com/atom/vim-mode#current-status---deprecated-in-favor-of-vim-mode-plus\r\n\r\nYou may want to give that package a try.. @reouno - as mentioned in the project README:\r\n\r\nhttps://github.com/atom/vim-mode/blob/master/README.md#current-status---deprecated-in-favor-of-vim-mode-plus\r\n\r\nThe vim-mode package has been deprecated in favor of vim-mode-plus:\r\n\r\nhttps://github.com/t9md/atom-vim-mode-plus\r\n\r\nI'd recommend uninstalling vim-mode and installing vim-mode-plus.. Thanks for the report!  Closing since this package has been deprecated in favor of [vim-mode-plus](https://atom.io/packages/vim-mode-plus):\r\n\r\nhttps://github.com/atom/vim-mode#current-status---deprecated-in-favor-of-vim-mode-plus\r\n\r\nYou may want to give that package a try.. Thanks for the report!  Closing since this package has been deprecated in favor of [vim-mode-plus](https://atom.io/packages/vim-mode-plus):\r\n\r\nhttps://github.com/atom/vim-mode#current-status---deprecated-in-favor-of-vim-mode-plus\r\n\r\nYou may want to give that package a try.. ",
    "discobean": "+1 `cw` should not copy what is removed into the clipboard, this is not how existing gvim works.  Having said that changing \"Use Clipboard As Default Register\" resolves this specific problem, thanks @jacekkopecky . +1 `cw` should not copy what is removed into the clipboard, this is not how existing gvim works.  Having said that changing \"Use Clipboard As Default Register\" resolves this specific problem, thanks @jacekkopecky . ",
    "nadim": "`Don't update register on change or substitute` is the setting I had to enable for this to stop happening. `Use clipboard as default register` was checked by default I believe, and not doing it for me. . `Don't update register on change or substitute` is the setting I had to enable for this to stop happening. `Use clipboard as default register` was checked by default I believe, and not doing it for me. . ",
    "Fine217": "sorry, I went the wrong place :cry: \n. sorry, I went the wrong place :cry: \n. ",
    "mahmoudhossam": "This is the version that ships on Arch Linux and the latest on http://electron.atom.io/releases/\n\nI think the latest version should be supported.\n. Arch Linux ships Electron 1.4.0 https://www.archlinux.org/packages/community/x86_64/electron/ and you can also see on this page that arch ships a version of atom that depends on it.\n. This is the version that ships on Arch Linux and the latest on http://electron.atom.io/releases/\n\nI think the latest version should be supported.\n. Arch Linux ships Electron 1.4.0 https://www.archlinux.org/packages/community/x86_64/electron/ and you can also see on this page that arch ships a version of atom that depends on it.\n. ",
    "AirrBear": "So I managed to re-create the issue several times and figured out what's going on\nThe issue is if you have a parentheses like (stuff here()).\nIt goes something like this ($ representing the cursor that is deleting stuff)\n(stuff here()$)\n(stuff here($)\n(stuff here$\nThe issue is if you delete an inner parentheses next to an outer, it will delete both of them instead of just the inner.\n. So I managed to re-create the issue several times and figured out what's going on\nThe issue is if you have a parentheses like (stuff here()).\nIt goes something like this ($ representing the cursor that is deleting stuff)\n(stuff here()$)\n(stuff here($)\n(stuff here$\nThe issue is if you delete an inner parentheses next to an outer, it will delete both of them instead of just the inner.\n. ",
    "Atry": "No.\n\nThis issue is related to https://github.com/atom/atom/issues/1092\n. No.\n\nThis issue is related to https://github.com/atom/atom/issues/1092\n. ",
    "biffster": "Seeing this issue on Atom 1.13.0 x64 on OS X El Capitan.. Seeing this issue on Atom 1.13.0 x64 on OS X El Capitan.. ",
    "simurai": "> merging this after rolling the railcars\n\nYa, I think it's ok to wait and suffer through the deprecation warning. \ud83d\ude09  I saw you updated `engines`, but that also makes it more complicated in case there are other things to fix in the meantime.\n. > merging this after rolling the railcars\n\nYa, I think it's ok to wait and suffer through the deprecation warning. \ud83d\ude09  I saw you updated `engines`, but that also makes it more complicated in case there are other things to fix in the meantime.\n. ",
    "classLfz": "@50Wliu Oh, THX!. @50Wliu Oh, THX!. ",
    "kblee152": "See below contents.\r\n---\r\n[Readme](https://github.com/atom/vim-mode/blob/master/README.md)\r\nCurrent Status - DEPRECATED in favor of vim-mode-plus\r\nWe're not maintaining this package anymore, because vim-mode-plus has more features and is very well maintained.. See below contents.\r\n---\r\n[Readme](https://github.com/atom/vim-mode/blob/master/README.md)\r\nCurrent Status - DEPRECATED in favor of vim-mode-plus\r\nWe're not maintaining this package anymore, because vim-mode-plus has more features and is very well maintained.. ",
    "rizowski": "Duplicate issue?\r\nhttps://github.com/atom/vim-mode/issues/642. Duplicate issue?\r\nhttps://github.com/atom/vim-mode/issues/642. "
}