{
    "ProLoser": "Meh, actually I think my hard-coded solution was perfectly adequate, and fairly trivial to maintain. However creating a concatenated file that has all modules (and utils.js) in one file (order doesn't matter) is still incomplete.\n. @douglasduteil I'm assuming you took out my `modules/utils.js` for your generator. We should probably put this back somewhere if possible.\n. It was one module that conveniently includes all other modules in THIS\npackage. A generated file could also be a concatenation of all the other\nfiles in addition to the master module.\nOn May 8, 2013 8:20 AM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> We can publish it in the `gh-pages` branch with the other built files if\n> you want.\n> However I don't know what you want from it...\n> Le 8 mai 2013 07:59, \"Dean Sofer\" notifications@github.com a \u00e9crit :\n> \n> > @douglasduteil https://github.com/douglasduteil I'm assuming you took\n> > out my modules/utils.js for your generator. We should probably put this\n> > back somewhere if possible.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/angular-ui/ui-utils/issues/1#issuecomment-17588010>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/1#issuecomment-17612612\n> .\n. Good point, forgot about bower not using branches. I need to ask them how\nfar away they are from doing snapshots as we currently have Travis\ngenerating the build for us.\nOn May 9, 2013 12:47 PM, \"adam bezemek\" notifications@github.com wrote:\n\n> @ProLoser https://github.com/ProLoser @douglasduteilhttps://github.com/douglasduteilI'm a little confused by the conversation here, but looking at the commits\n> and running the code locally it looks like if you run grunt build that\n> the modules get bundled up into out/build/angular-ui-utils-*.js correctly\n> and that the modules/utils.js file is generated. Can we include these\n> outputs in the repository so that if you install the project via bower that\n> you don't have to run that build locally?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/1#issuecomment-17685466\n> .\n. The problem is telling bower how to use them. You can actually just have\nTravis tag the gh-pages branch every time the version changes with\nsomething like v0.0.1build\nOn May 9, 2013 1:22 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> Right. I didn't hear about bower changing from tags to snapshots.\n> For now, if needed, we can ask Travis to create a new branch only for\n> bower where all sources and builds are copied.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/1#issuecomment-17687458\n> .\n. Be my guest\n\n## \n\nDean Sofer\nDeanSofer.com\n714.900.2254\n\nOn Thursday, May 2, 2013 at 3:54 PM, Douglas Duteil wrote:\n\n> I'm going to help here too, if you don't mind.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/angular-ui/ui-utils/issues/4#issuecomment-17369886).\n. What do you mean jquery suppression?\n\nAlso as a side-note, keep in mind that angular-ui.github.com will no longer contain demos. The demos for the parts of the old AngularUI that are not inside of ui-utils can be put onto github.com/angular-ui/angular-ui (aka angular-ui.github.io/angular-ui)\n. It is. jQuery is only used for tests to create events.\nOn May 2, 2013 11:24 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> By no dependencies. Didn't you mean that you want jQuery out of there? So\n> ui.utils is in pure angular?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/4#issuecomment-17380157\n> .\n. I mean I might very well be wrong, but yes we ultimately would like to no longer have jQuery-specific code in this project. I've already taken some time to remove it from the src as much as I can, and if you encounter more, feel free to remove it. However, it is very tedious to create event objects without jQuery (which is done in tests) so we made it a development dependency (and not a production-dependency).\n. @douglasduteil take a look at the `demos` branch I just pushed. I had a friend help us out by breaking apart the demo page for us but I haven't had time to properly integrate it. Perhaps it will help you move the doc-generator process along?\n. I think one per repo is the best thing for right now, but I have been\ntoying with the idea of having a redundant unified demo on angular-ui.\nOn May 3, 2013 2:46 AM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> And for you where must be the doc-generator process?\n> Do we generate a doc for each repo (with a gh-page branch per repo). Or we\n> have a one repo \u00ab to rule them all \u00bb?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/4#issuecomment-17386407\n> .\n. As for docs vs demos, I don't know (or care) right now so do what you think\nis best or is more convenient.\nOn May 3, 2013 2:13 AM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> Hum...\n> And you want the demos to be in the doc ? Or to BE the doc ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/4#issuecomment-17385178\n> .\n. I'm a little confused. Travis is going to create a commit?\n\nAnything on gh-pages should have docs in the root of the repo, if you check out how `angular-ui/bootstrap` does it they relocate the docs subfolder to the root using grunt.\n. Don't create any tags on the build or demo branch. Also, this will for the\ntime being be the only repo from AngularUI that needs a build file.\n\nThe bower team is going to switch to using snapshots that developers\npublish to their servers so tagging a build branch will be unnecessary.\nOn May 4, 2013 12:35 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> I made it.\n> \n> I make grunt concat all the demos index.html\n> https://github.com/douglasduteil/ui-utils/blob/ft-doc-generator/gruntFile.js#L52\n> And I ask Angular to include that file to the site. And with a little\n> magic it works.\n> \n> To build the Git Page, I just followed this articlehttp://sleepycoders.blogspot.se/2013/03/sharing-travis-ci-generated-files.html\n> Look at the end of the Travis build :\n> https://travis-ci.org/douglasduteil/ui-utils/builds/6885097#L738\n> \n> Here is a demo : http://douglasduteil.github.io/ui-utils/\n> angular-ui-utils.js and others are available like sohttp://douglasduteil.github.io/ui-utils/build/angular-ui-utils.js\n> .\n> \n> For Bower, like we generally don't need all the repo, I propose to make\n> Travis commit the build on a separated branch and add tags there (not on\n> the master branch )\n> \n> What you think ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/4#issuecomment-17440193\n> .\n. I think you could just whitelist the travis server's ssh id_rsa.pub or something.  \n\n## \n\nDean Sofer\nDeanSofer.com\n714.900.2254\n\nOn Monday, May 6, 2013 at 1:45 AM, Douglas Duteil wrote:\n\n> K.\n> PS : I'm still looking for a way to have an OAuth token accessible to the team through the GitHub API (http://developer.github.com/v3/oauth/)...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/angular-ui/ui-utils/issues/4#issuecomment-17471650).\n. Looks good. I don't see any secure information that needs to be suppressed.\n. I think 'show-off' is a synonym for 'demo'. That said, we probably don't need the full `angular-ui-` prefix (except in the bower component if we ever register it).\n\nWhy not just rename the repo to demos or demo-generator or something more concise? This _specific_ discussion should also probably be on that repo lol\n. Just making jQuery a development dependency for now.\n. We ported over testing so if you'd like you can re-run tests as I think the travis status was before these were ported. You will have to merge from this repo to run your tests\n. What are the problems you're having?\n. do this:\n1. Run in terminal: `karma start --single-run=false test/karma.conf.js`\n2. Open browser(s) and visit URL shown\n3. In a second terminal: `karma run test/karma.conf.js`\n. I am trying to figure out how to remove the jquery event code. As for\nbrowsers I have been using the param --browsers=Chrome\nOn Apr 17, 2013 12:03 PM, \"Arnaud BRETON\" notifications@github.com wrote:\n\n> Hi,\n> \n> I've just started to backport my patch related to this issue\n> angular-ui/angular-ui#536https://github.com/angular-ui/angular-ui/issues/536\n> \n> If I have well understood, angular-ui will progressively move here, for\n> all directives with no external deps.\n> \n> I've met some issues to start developping on it:\n> - No gruntfile (=> no server, watch target)\n> - No browser specified in Karma conf\n> - Bower modules not included in the repo (maybe it's wanted?)\n> - Keypress directive specs are still related to jQuery (in\n>   createKeyEvent: var keyEvent = jQuery.Event(\"keydown\");)\n> \n> Am I missing something?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/7\n> .\n. I will not be accepting any more patches to AngularUI as there is no point to maintain both projects. Most of the issues you mentioned are fairly easy to bypass, and I don't see a reason why adding more parameters to your karma command is a big deal.\n\nIf you want to make changes to the repo nothing is stopping you from opening a PR. Anything you push to AngularUI doesn't really help us move forwards.  \n\n## \n\nDean Sofer\nDeanSofer.com\n714.900.2254\n\nOn Wednesday, April 17, 2013 at 12:27 PM, Arnaud BRETON wrote:\n\n> I think these kind of issues are requirements for people to actively develop on this project right?\n> I think I will start to backport my patch on angular-ui first and do it when ui-utils will be more mature.  \n> Yes I used this param too for Karma, but it's not a big deal to precise a default one, mainly for the future grunt task.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/angular-ui/ui-utils/issues/7#issuecomment-16528615).\n. I updated the README.md so you should not have too much difficulty hacking on this project. I have been busy running around that I have not had time to update the instructions as they may be subject to change.\n. After a little poking around it looks like jQuery is only a dependency for the spec files. I decided that for _now_ I'm going to make jQuery a development dependency and will try to eventually remove it from the specs too, however this _should not_ affect the actual source files. I may be wrong though as I need to confirm.\n\nGood news is that all tests pass now!\n. Are you aware that TravisCI does not support chrome?\n\nYou need to remove your last commit for me to merge this in.\n. This will be resolved by #12\n. @shaungrady may need to chime in on this, but I believe this directive is now completely rewritten without the plugin dependency. @arturgspb perhaps you should try the latest version?\n\nAfter a quick search of https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js I don't see that specific line of code.\n. Do you want to help us out by grabbing the source for `jQuery.fn.offset()`?\n. Take a look at #21.\n\nYou bring up a valid point and what I consider to be a much better route. I think we should (mainly) support regex, with a simpler alternative syntax. I think the ui-options or ui-on or ui-switch, etc is too much bloat.\n\nInstead, it should be similar to `ui-route`, which allows you to use plaintext, regex (I think), and curly braces. By leveraging braces, you can insert methods or variables or switches or whatever you want to modify the pattern.\n\n``` html\n<input ui-mask=\"(999) 999-9999\">\n<input ui-mask=\"/\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}/\">\n<input ui-mask=\"{{ isRegex && '/\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}/' || '(999) 999-9999' }}\">\n<input ui-mask=\"{{ myMask(isPhone) }}\">\n...\n<script>\n$scope.myMask = function(isPhone) {\n  if (isPhone)\n    return '/\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}/'\n  else\n    return '(999) 999-9999'\n}\n</script>\n```\n. @pocesar help us out by making a pull request :smile: \n. Have you tested this with the latest version of ui-event?\n. After some review there appears to be a flaw with how `.triggerHandler()` is called in uiMap. Closing this bug and adressing on angular-ui/ui-map#3\n. Very cool. I'm merging this in since we need to get docs back up and running quickly. I very much like the solution of having Travis building the docs automatically every time a successful build occurs. I think we need to standardize the docs across all projects however, so it would be cool if we could centralize any redundant code so that it can be easily reused across projects.\n\nFeel free to take a crack at using angular-ui/angular-ui-docs or angular-ui/builder for these purposes\n. @shaungrady think you could review this?\n. Why is this not REGEXP?\n\nAnyway, do you think you could add some tests? I can merge it immediately as soon as those are done.\n. I think it may be better to focus on the discussion in #16 instead\n. @jpap Would you be willing to add tests to this Pull Request?\n. This is a very difficult problem to address. I remember seeing somewhere that angular would track the index position of the DOM element (I think such as in an `ng-switch` or something) and re-inject the node back into the indexed position (if it wasn't 0). The PROBLEM is that almost everything could go wrong.\n\n```\na, b, c\na, [b], c // b is removed and index 1 is cached\na, [b], [c] // c is removed at index 1 is cached\na, b, [c] // b is returned to cached index 1\na, c, b // c is returned to cached index 1\n```\n\nAnd other such variations.\n. I didn't know that either lol. Yeah we can go ahead and remove it.\n. @michaelglass Experimental for us? Or merged into the experimental branch of angular?\n\nRegardless, Angular v1.1.x is a branch with all the patches and fixes of the stable branch + experimental features. Since it's likely to be far more stable than AngularUI itself, I am opting to remove it so that we do not end up creating a redundant amount of work.\n. What changes are that? \n. 34ba5a885fbe37cada1ca72522643203d5baa448\n. When a field is invalid, the ngModel does not update. This is normal across all angular validation. \n\nPerhaps what we should do is remove the value when ui-validate-watch rechecks an input, because it's leaving what was previously a valid value behind. Of course this may make an unpredictable (and annoying) behavior where inputs are cleared as they are invalidated, so perhaps it's better left as-is.\n. Hmm... actually I'm noticing an annoying behavior when angular CLEARS the input. I am curious if this is normal for angular and perhaps we need to start caching the last updated value, or if this abnormal and needs to be corrected\n. This is a bug. I have been trying to tackle it but got distracted. You should add the source code for the directive directly into your plunker. One thing I have been doing was setting the $viewValue instead of the $modelValue, but I get new bugginess.\n. I don't get why leveraging $viewValue uses the invalid model value?\n. Since we're working on this issue, I've been contemplating looking at how `ng-class` works and switching over to their approach. They essentially evaluate everything every single time the view is updated (less efficient) and this enables them to drop the string-encapsulation that we are doing around our expressions (more elegant). Thoughts?\n. You're going to have to be more specific than angular-ui.js ln 271. Can you link to the line and create a fiddle that reproduces the problem?\n. Don't use type=number?\n\nIn all seriousness, I think this has to do with invalid values not updating the model, therefore the mask may not be seeing the changes. What may need to be done is that the mask may have to work with the viewValue so as to completely ignore the validity of the input\n. Based on https://github.com/plentz/jquery-maskmoney/issues/80 and https://github.com/igorescobar/jQuery-Mask-Plugin/issues/25 the general consensus seems to be to not use `type=number` for fields you wish to mask. If your concern is accessibility then perhaps using @rayshan's solution is better?\n\nI'm on the fence about re-opening this issue because I don't know how to solve it.\n. 1. I thought you added this to `unique`?\n2. What other modules should handle expressions?\n. We ended up dropping it because it got merged into the core! https://github.com/angular/angular.js/blob/4179f62cc270b9614075095e1e4931736cff30a7/src/ng/directive/ngIf.js\n. Yes, I understand we should have put up some notification or something somewhere. I'm still running around trying to put out fires across the board.\n. There is no built-in way to do this. You can either build a custom directive and do it yourself, or you can mix non-passthru directives in (such as bs-tooltip from UI-Bootstrap), or you could put the plugins on differing DOM elements (such as placing the tooltip on a wrapper element)\n\nHowever, if your goal is to make tooltips appear over the slider handles created by noUiSlider, I am afraid it will probably not work as the noUiSlider probably creates new DOM elements. Instead I would recommend looking for a slider that has built-in support (or examples) on creating tooltips for each handle.\n\nIf you are simply trying to give a tooltip on the entire slider altogether, then using a wrapper DOM element would be my recommendation.\n. You can't. I considered it briefly but opted to drop it. I'm not sure it's worth supporting as I can only imagine it exponentially increases the complexity, but if you'd like to create a Pull Request with the enhancement feel free.\n. Try putting it on the `<body>` tag.\n. Can you add a unit test?\n. Duplicate of #25 \n. @ultrawebsites ui-if has been dropped as it's now part of the AngularJS v1.1.x core. \n. Yeah. I know. Feel free to open a PR, I don't like the way it's now either.\n. To keep in line with changes across all projects lets stick with the new changes. Do you mind making a PR for the changes to the README to correct the instructions?\n. @shaungrady do you want to review/merge this one?\n. @pocesar does this address #27?\n. @pocesar also maybe you can throw in one more unit test to confirm that this PR fixes #31\n. Actually @pocesar i might have to agree with @shaungrady on that. I don't really see the added benefit of having 1-8 masks. It seems oddly specific and only caters to unusual edge-cases. Why should you be allowed any number between 0 and 5? Why not only 5? Why not 5 to 9? What about 4 or 5 or 6?\n\nI'd rather us not causing regressions on more common use-cases (as @shaungrady points out) until we have a solid implementation or fix.\n. Does your PR support dynamic masks? Is it possible to do `ui-mask=\"{{someMaskString}}\"`?\n. @shaungrady I will defer the decision to merge or moderate this directive to you. I can't look into the nuances of this atm so I am not going to merge this in myself. If you think this PR as-is cannot be merged in but perhaps a subset of fixes can, maybe you can outline them so that @pocesar might create a PR we can readily merge in while we review the other more contentious issues.\n. So this lib is supposed to have 0 external dependencies outside of jQuery. For instance, `element.offset()` is not available, but can be accessed by doing `element[0].offsetTop` and `element[0].offsetLeft`. Do you think you could go through and try to remove any jQuery-specific code?\n\nYou should also make sure that the Travis build passes https://travis-ci.org/angular-ui/ui-utils/builds/8100215\n. This repo is designed to **not** have any external dependencies, whatsoever. All of the methods (except for maybe `outerHeight()`) are actually available on the native DOM element.\n\nFor instance:\nhttps://developer.mozilla.org/en-US/docs/Web/API/element.offsetLeft\nhttps://developer.mozilla.org/en-US/docs/Web/API/element.offsetTop\nhttps://developer.mozilla.org/en-US/docs/Web/API/element.clientHeight\n\netc\n\nYou don't actually need jQuery to easily access this information.\n. Pinging @angular-ui/bootstrap team. What do you guys think about having a dedicated 'jqlite+' repo? How many of the methods @mfeingold stubbed out do you guys use, and what is he missing?\n. @mfeingold I added you to the UI team. I'll let you do it :)\n. Duplicate of #25\n. Yeah... it's kind of a mess atm\n\nHere's the bottom line:\n\nAngularJS 1.1.x = AngularJS 1.0.x + new features\n\nThere will **not** be any regressions in the 1.1.x branch. Only the _new features_ are unstable. However, in that vein, utils is essentially just as unstable (if not more-so) and you're better off using the `ng-if` found in the core instead. It will also reduce the need to address bugs with an vestigial feature. If you want `ui-if` you will have to stick with an older version of utils.\n\nSorry, I realize this is a huge inconvenience but it's getting difficult to keep things beurocratic and run things without enough people.\n. Yeah I know. Sorry I've been more inclined to take more... destructive (?) measures just to keep things up to date rather than to sit on things. I REALLY need help maintaining the projects. Everyone has moved over to bootstrap lol.\n. @zhon @msalahz this is not going to be addressed, @skivvies issue is referencing our broken docs. Use `ngIf` which can be found in `>=1.1.x`\n. @msalahz 1.1.x is not 'unstable' despite the title. It's an inaccurate label. It's a 'prototype' branch where they are trying new features that may be subject to change. This is essentially the equivalent to using this lib, which is far more unstable and slower to maintain. If you don't use any of these new features (excluding ngIf) there will be no difference in the codebase.\n\n`ngIf` is here to stay however (or at least to my knowledge). Again, 1.1.x contains all the same bug-fixes and stability of 1.0.x, it just _also_ has additional features.\n\nIn the end, you're much better off getting `ngIf` since it has proper integrated support for things like animation, is actively maintained and fixed (unlike this module) and is probably as far along if not farther than this module.\n. @apneadiving wrong repository. Please open an issue on angular-ui/bootstrap\n. @vinniefranco theoretically you could just leverage the vanilla placeholder. Make it `'require: '?uiMask'` and if uiMask isn't present then just return silently. I don't think it's necessary to use a `ui-mask-` prefix if we prevent it from firing without the mask.\n. @vinniefranco you make a good point about the disconnect, but I actually think it's a valid case (and not really your problem). For example: someone who enters `1234` would see `1234/-M/__`\n\nIt may seem stupid, but people might want weird characters as placeholders.\n\n_ANYWAY_, the **original** point I was trying to make is you might as well drop the `ui-mask-` prefix for `placeholder`\n. @bjarkehs you are right, jQLite in angular does not support namespaced bindings.\n. Yeah we need to bump the bower version.\n. Just pushed v0.0.4\n. Instead of converting to a string, you should simply detect the case of when it's not a string and abort. If it's not a string, why would you need the comparison to begin with?\n. I think you're finding an issue with how our demos render. @douglasduteil i think we might have to go to a non client-side approach as the demos are generally causing problems.\n. Don't worry about design too much, @nateabele has been cool enough to hire\na designer\nOn Jul 28, 2013 7:35 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> I made a first version http://douglasduteil.github.io/ui-codemirror/\n> It only lacks the drawer in top bar ...\n> Using :\n> - https://github.com/douglasduteil/angular-ui-docs\n> - https://github.com/douglasduteil/ui-codemirror\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/67#issuecomment-21696773\n> .\n. Looks good to me. Thanks for helping out with this.\n. @mithun-daa the Nuget version may be out of date. We have broken AngularUI into several smaller projects now.\n. `ui-mask` has this functionality already\n. Looks good. Go ahead and merge. @dhbaird you should add a demo \n. I'm confused. Which module isn't installing?\n. Works for me. I'm having trouble reproducing your problem. Have you tried\nhitting up #node.js or something to see if there's something wrong with\nthose modules?\n\nOn Fri, Jul 26, 2013 at 1:12 AM, perqa notifications@github.com wrote:\n\n> Sorry. This is not a problem with angular-ui, only with the installation\n> instructions in your README section. The command\n> npm -g install grunt-cli karma bower\n> fails due to some dependencies related to karma and its plugins. The\n> installation of these is never completed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/78#issuecomment-21607262\n> .\n\n## \n\nDean J Sofer\nDeanSofer@gmail.com\n\nBS Computer Information Systems\nCalifornia State Polytechnic University, Pomona\nTelephone: 714-900-2254\nWebsite: www.DeanSofer.com\nGithub: github.com/ProLoser\n. Can you create a demo or test or code-sample of the use-case you are addressing?\n. Really need some unit tests.\n. I don't get the purpose of this PR. You should not be doing `eval()` anyway.\n. If you want to be able to pass multiple arguments, you could just do this:\n\n`$scope.$eval( '[' + $attrs.uiOptions + ']' );`\n. Nevermind, I already have that in there. `ui-jq` already does what you want. No string encapsulation needed. Just do\n\n```\n<div ui-jq=\"foobar\" ui-options=\"arg1, arg2, 'arg3', {arg4:true}\">\n```\n. This is a weird edge case to begin with. A different approach altogether\nshould be devised like using a different attribute, otherwise I don't see a\nbig enough priority to merge this.\nOn Aug 8, 2013 1:46 AM, \"raykin\" notifications@github.com wrote:\n\n> direct write in ui-options attribute may not always fine, sometime we may\n> wanna attach the options value to scope.\n> But $scope.opts = \"arg1, arg2, 'arg3', {arg4: true}\" will be failed. In\n> this case the linkOptions = [\"arg1, arg2, 'arg3', {arg4: true}\"] ,not as\n> expected [arg1, arg2, 'arg3' , {arg4: true}]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/91#issuecomment-22310329\n> .\n. The plugin is not designed for heavy lifting. It has the ability to rerun a\nfunction multiple times (such as elm.focus()) but any more complex and you\nare better off writing a directive.\nOn Aug 8, 2013 2:35 AM, \"raykin\" notifications@github.com wrote:\n\n> my usage is dynamic invoke jquery-ui effect depending on the $scope\n> changes.\n> before I read the source, I consider the ui-options can be binding to the\n> $scope attributes,\n> after read source I realize the ui-options is an init option, never\n> changed after init.\n> I think it's a common requirement to invoke effect jquery fn in a dynamic\n> way, ex: dynamic effect style and dynamic run the effect function.\n> But maybe for such a requirement, a new module which stand on jq will be\n> good chooice.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/91#issuecomment-22312580\n> .\n. Want to help me out and open a pull-request?\n. @solidspark yeah that should be fine.\n. @dymk I think we can make `ui-route` detect if you have a `ui-sref` attribute and use that accordingly.\n\nAlternatively, you can specify a pattern and pass it directly to `ui-route` instead of having it auto-detect from the href attribute.\n. Ui router has its own directive for this \n. Make sure the npm install is using the right version of karma.\n. @dymk i think you have to go to angular-ui/angular-ui-docs repo and update all project versions of karma across the board. @douglasduteil perhaps you can chime in.\n. Perhaps it should be `1.0.*`\n. Or `~1.0`, I have no idea what the syntax should be.\n. This might be a viable directive. Feel free to open a PR. I'd like to learn more about how much demand there is for such a directive. I prefer not to code 1-off utilities (if that makes sense). If there way a way to support [whatever]-intent, etc, it would be cool. Or like a deferred evaluation directive.\n. @marklagendijk one thing I'm discovering is that the post-linking order has now been reversed. What this means is that increasing a priority of a directive might fix things in some situations (such as assigning the `ngModelController.$render` property)\n. @schwiet I've noticed this issue too, but I honestly have no idea how to tackle it. That being said, I've done 0 research into the issue.\n. @dpiccone you committed all of your components into the repo. You also have a dependency on jQuery which is not one of the points of ui-utils. Isn't this module roughly the same as doing this: http://jsfiddle.net/ProLoser/mxv2z/\n. Sorry, I think we'll have to pass on this one as it's more CSS-centric than anything else. Don't let that dissuade you from any other submissions though!\n. @rainboxx me too! You should build it!\n. Unfortunately this package does not have a distribution file. You need to add the specific event.js file manually.\n. This might need to be a configuration option since you might have an element with `overflow:auto`. \n. Technically the one listed on cdnjs should be taken down and angular-ui-utils should be added instead, but we don't have a distribution file in this repo.\n. Also, you're able to submit pull requests to cdnjs yourself.\n. Wrong repo\n. @mhworth do you think you could merge scrollfix or waypoints together so that we have 1 module capable of doing both features?\n. I'd like to delete the scrollfix module if yours does everything it did. No\nreason to have both. I'd also like a super minimalist API. I will probably\nwant to inspect your proposed API if you don't mind the feedback (I'm super\nbusy so haven't had a chance to peruse your GH fork yet unfortunately).\n\nOn Tue, Oct 22, 2013 at 5:10 PM, Matt Hollingsworth <\nnotifications@github.com> wrote:\n\n> Okay, so I made it so that ui-waypoints will behave like ui-scrollfix in\n> the case where you pass it similar arguments. I.e., it will add the class\n> 'ui-scrollfix' when you scroll pass the element if you just do\n> ,\n> behaves the same way as ui-scrollfix, etc.\n> \n> Let me know if you'd like any other changes\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/123#issuecomment-26868532\n> .\n\n## \n\nDean J Sofer\nDeanSofer@gmail.com\n\nBS Computer Information Systems\nCalifornia State Polytechnic University, Pomona\nTelephone: 714-900-2254\nWebsite: www.DeanSofer.com\nGithub: github.com/ProLoser\n. Finally had a chance to look at it.\n\nSo here's my thoughts:\n\nMaybe it should be called <del>`ui-scroll`</del> <del>`ui-scrolled`</del> `ui-scrollpoint` instead of waypoints, since that's more accurately what you're paying attention to inside the directive.\n\nDon't use a super confusing and complicated API. I totally applaud your efforts to be simple and minimal, but if anything, I would strip out functionality and just provide building blocks that people can use to mix and match and reach their original goal. Don't handle strings and ints and objects and functions and ints with special string characters differently, etc. What if I wanted to specify a custom class, AND a function, AND an offset? You're just making more work and maintenance for yourself in the long run.\n\nFirst, one thing I think most of the team has learned is don't ask people to provide functions by name that you pass hard-coded parameters to. Instead provide scope variables like we do `$event` and let people execute whatever expression they want.\nSo instead of `ui-waypoint=\"someCallback\"` we would do `ui-waypoint=\"someCallback($direction, $element)\"`. Of course, I'm not saying this is what I think the final API should be...\n\n### CONTINUING!\n\nI don't think providing `$element` (or a handle to a DOM element in a controller/scope callback function) is a good idea. You're blurring the lines that angular spent so much effort to create. If someone wants to fuck with the original DOM element, then have them write their own directive (that possibly wraps yours). Ask yourself what they would REALLY want with it? I'm guessing you were trying to provide the coordinates of the DOM element, because everything else could be stored on the scope. If that's the case, maybe just provide a `$position` object or something, although this is something I believe needs more thought and is an issue on several other directives too.\n\nSIMPLIFY!\n\nInstead of trying to explicitly support `ui-scrollfix`, which is an archaic and oddly specific directive, provide people with building blocks and examples of how they go together. For instance...\n\nInstead of `ui-waypoint` or `ui-waypoint=\"'someClass'\"` demo something like this: `<div ui-waypoint=\"fixed=($direction=='up')\" ng-class=\"{fixed:fixed}\">`\n\nKeep in mind, people can even create alias directives that are essentially what I just typed in ^ (checkout [ui-alias](126)).\n\nAnyway, perhaps what we want is a simple way to hook into scroll events, but the question becomes what is the criteria? Is it when the DOM element touches the top of the screen? or is it when it exits the screen? Does direction matter? Should we calculate offset? ETC.\n\nIf you can provide a concise API that tackles 80% of what waypoints does AND allow me to roll my own ui-scrollfix directive, then we all win.\n\nI reviewed the base jquery plugin and had a few thoughts:\n1. $direction is cool, but do you really use it? Maybe it's an unnecessary amount of bloat to bother calculating?\n2. What if we just had an 'in' function and 'out' function? Similar to 'up' or 'down'? Again, this might not be as good as your approach with $direction, or maybe bothering to support more than 1 event isn't even worth it?\n3. We probably should just let people specify an offset as an additional attribute.\n\nPerhaps `ui-scrolled` or `ui-waypoint` isn't a good description... maybe `ui-scrollpoint`? Since it's about when you scroll to/past this point? I just think that people won't get where `waypoint` originated from if they weren't familiar with the plugin (like I was).\n. Also, you should review any outstanding issues or PRs regarding the current uiScrollfix implementation. You are not binding to $destroy events and I think someone is looking at binding to window scroll events instead of the specific dom element or something.\n. ### New Feedback\n- I changed my mind about `$direction` and `$position`. What are you using `$position` FOR exactly? Do we really need it? I think we should keep `$direction` but drop `$position`\n- To improve performance, lets lazy-bind a maximum of 1 scroll event to $window. Make a collection of 'bindings' and have 1 actual DOM binding to $window that iterates through the collection to see if there's logic that needs to be executed. The collection and window binding can be built up on first instance and torn down when the collection is empty.\n- To allow scoping to scrollable DOM elements, we can have an optional parent `ui-scrollpoint-container` directive that overrides the binding from `$window` to whatever the DOM element is. This needs testing, as I'm not sure if this necessary, do overflow:auto/scroll containers have/need their own isolated scroll events?\n- The only 'option' I think we need to really support is offset. This could be similar to the current scrollfix accepted values. \n\n### Examples\n\nHow to recreate 3rd party plugins using this as a tool.\n\n#### ui-scrollfix\n\n``` html\n<div ui-scrollpoint=\"fixed=($direction=='down')\" ng-class=\"{fixed:fixed}\">\n```\n\n#### Scrollspy (bootstrap)\n\nThis may take a bit more boilerplate, but by applying the scrollpoints to the DOM you want to spy on you don't have to worry about timing issues and race conditions like having the spied DOM being created late (such as putting the nav in the header vs the sidebar and supporting 1 page per primary nav item and still spying on children).\n\nKeep in mind in this demo, `$direction` is not as useful since `active` can only have 1 value at a time, so there is no need to have a `remove()` expression.\n\n``` html\n<ul>\n  <li ng-class=\"{active:active=='item1'}\">Item 1</li>\n  ...\n</ul>\n\n...\n\n<h1 ui-scrollpoint=\"active='item1'>Item 1</h1>\n```\n\nCombine scrollspy demo with scrollfix demo and you have the full Bootstrap implementation.\n. I think you're sorely confused.\n\nMy proposal was to have 2 (or more) scroll bindings:\n\nfirst binding is to the nav list, that controls pos:fixed of the nav, and nothing else\nsecond (or more) is bound to the headings or DOM elements that represent active items inside the navigation. This code is identical to scrollfix, except that the behavior is NOT to change to pos:fixed but instead to simply change the value of a scope variable.\n\nIn other words:\n\n``` html\n<!-- The nav list has a binding to handle floating -->\n<ul class=\"navigation\" ui-scrollpoint=\"fixed=($direction=='down')\" ng-class=\"{fixed:fixed}\">\n  <li ng-class=\"{active:active=='item1'}\">Item 1</li>\n  <li ng-class=\"{active:active=='item2'}\">Item 2</li>\n  ...\n</ul>\n\n...\n\n<!-- Each nav item on the page has it's own binding to change the active nav item -->\n<h1 ui-scrollpoint=\"active='item1'\">Item 1</h1>\n...\n<h1 ui-scrollpoint=\"active='item2'\">Item 2</h1>\n```\n\nAll calculations for the nav and the items are identical, whatever they may be.\n\nHowever, a new issue has just occurred to me. If you set the nav to pos:fixed when the $direction is down, how will you set it back when $direction is up\n. Awesome, that's way more reliable then. I don't think AngularJS bindings support namespacing events anyway so that's a nifty trick. I just learned (or re-learned, cuz I'm sure I knew that already) something lol.\n\nOnly note is try to refactor your tests so that they don't rely on jQuery as this repo is supposed to have 0 dependencies on it.\n\nI realize certain positional calculations of the other modules could benefit from jQuery's `offset()` method but this code has been reproduced inside _ui-bootstrap_ so we should follow their example.\n. @kadamwhite I would checkout the discussion on #123\n. Might as well, but you may want to read [my newest comment](https://github.com/angular-ui/ui-utils/pull/123#issuecomment-27025322) as it proposes an even MORE efficient approach than the one used here.\n\nAlternatively, if you don't want to waste the effort (which is fine too) we can just collaborate on the other issue if it looks promising to you.\n. @nateabele it needs tests, but I finally got around to it lol.\n. @dmitryevseev a simple fix for this would be to inject $location and see if it can give us the hashPrefix for use in the directive.\n. That is ridiculously weird. Why would it try to put them there?\n. @zakdances \n1: what you describe isn't really going to happen\n2: You can remove most of your clutter by simply doing `return myObject.load()` since it IS a promise (probably).\n3: You may want to look at `ui-router` and resolves. This lets you prevent a page (or state) from loading until a resource has been retrieved, and you can nest chunks of your application and load assets at every chunk level. It's quite awesome and inspirational as far as architectural possibilities go.\n. Perhaps you should use `ngKeypress` instead? `uiKeypress` is primarily a convenience solution now as it simply makes it easier for you to bind to specific keys or key combinations. `ngKeypress` gives you access to the event being triggered by ANY key and as such you are free to inspect and perform responses as you see fit.\n. Sorry @flea89, it's just that this directive may eventually disappear in the long run honestly because they added it to the core. It's only a convenience directive nowadays so adding more features to it to make it more complex is not something I'm keen on doing (when we have so many other critical features needing bug fixes).\n. @soupdiver `ng-if` is now in the core, which is why we removed it.\n. Actually I think you should merge underscore and dash and make a 'separator' mode (and argument).  All 3 modes would also take a new secondary parameter called 'separator' which by default for 'separator' mode would be `_`, for 'humanize' would be ` `and for variable would be``.\n\nMaximum versatility!\n. The reason I didn't JUST merge this in is because I could have sworn that the documentation says you should NOT return anything if your validation fails.\n. Oh yeah, and if you looked at the code and decided to ALWAYS return it then a proper fix would be merging the 3 return statements together.\n. According to the docs:\n\n> $parsers\n> \n> Array of functions to execute, as a pipeline, whenever the control reads value from the DOM. Each function is called, in turn, passing the value through to the next. Used to sanitize / convert the value as well as validation. For validation, the parsers should update the validity state using $setValidity(), **and return undefined for invalid values**.\n\nhttp://docs.angularjs.org/api/ng.directive:ngModel.NgModelController#properties_$parsers\n\nSo technically, I should not have merged this in as it's current behavior is correct.\n. I don't really think this is adding a whole lot. It's similar to the relationship between ui-keypress vs ng-keypress, leading to us probably dropping ui-keypress in the near future.\n\nSince you can do `$window.bind('blur', function(){})` anywhere in the app you're not gaining anything by `using`$broadcast()`.\n. Don't make two forks. Just make the file available if people don't use\njquery. I am not knowledgeable about the latest updates so I have no\nopinion about merging the code into the directive or not.\nOn Apr 30, 2014 4:30 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> Yo @mfeingold https://github.com/mfeingold it feels legit for me to\n> drop jqliteExtra out of UI.Scroll. It's defiantly an external dependency\n> for the directive. I actually did start a little pop with my jqLitePlushttps://github.com/douglasduteil/jqLitePlusI told you about 3 mouths ago...\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/162#issuecomment-41864095\n> .\n. I'm confused, why is Karsten Sperling just randomly added there?\n. I'm a little bit confused what you're describing. I believe we added support for promises so AJAX should be fairly simple to tackle, and if you use the object syntax you can namespace multiple validation rules:\n\n`<input ui-validate=\"{rule1:'1>2',rule2:'2>3',rule3:'somePromise()'}\" name=\"myVal\">`\n\nshould give you things like `myForm.myVal.$errors.rule1` etc.\n. That doesn't make sense. Are you sure you know the proper way to retrieve validation flags? It sounds like you are complicating things.\n. This is not how ui-validate works. You are supposed to be putting validation expressions in there.\n. Need to see some code. This is a fairly uninformative question as-is.\n. Yeah... honestly it was a garbage directive and I think we're going to remove it. Same goes for ui-show/hide. Sorry. They're too easy for people to just code manually.\n. I would rename this to something more concise, like `ui-mask-raw` (needs to be inverted) or something that makes more sense. Also you should probably add global config support so people don't have to put this on every single html attribute.\n\nI suppose ui-mask-raw=true or false would be good since if it's set to true globally or false globally you'd want a one-off option to inverse it.\n. Is there a reason that the diff has 0 files changed?\n. Are any of our other modules GNU? I think this entire repo is MIT so I'm not sure if it's a bad idea or not to have this specific module GNU.\n. Shouldn't the cursor jump to the next input on tab?\n. Essentially what I'm guess is happening is that the last value BEFORE minlength failed is the value being used, because when a value becomes invalid, the model _shouldn't_ be getting updated. In other words the value is either null OR it's the last valid value you typed in for that specific rule.\n\nAnyway, for `null` you can put a check in your compare function to return true or the original value or  something if one of the values is null. Although I'm not sure about the other edge-case. Long story short, it's sort of a convention with the angular core you may want to take up with them.\n. Do you mind checking out what the docs suggest? We could switch to view value I suppose.\n\nOn Fri, May 16, 2014 at 7:41 AM, Raman Gupta notifications@github.com\nwrote:\n\n> > Essentially what I'm guess is happening is that the last value BEFORE minlength failed is the value being used, because when a value becomes invalid, the model shouldn't be getting updated. In other words the value is either null OR it's the last valid value you typed in for that specific rule.\n> > This is something that has always bugged me about ui-validate, and now I understand where my discomfort was coming from. Why would ui-validate be using the model value to do the validation rather than the value of the input control itself, like the regular angular validation?\n> > There is a simple, but ugly, work-around, which is to make the ng-show take into account the other validation e.g.:\n> > \n> > ```\n> > <div ng-show='myForm.confirm_password.$error.validator && ! myForm.password.$error.minlength' class=\"text-danger\">\n> > ```\n> > \n> > ## But shouldn't ui-validate be using the input value rather than the model value?\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/angular-ui/ui-utils/issues/241#issuecomment-43339024\n. @rocketraman if you're talking about `confirm_pass` looking at the model of `pass` in YOUR comparison function then there's nothing that can be done because we don't have access to sibling model controllers (aka: their view values). In other words, make the other input valid before worrying about matching em up?\n\nAlso, I don't put all the validation on both inputs. I put all of my validation on ONE input and then just put a match validation on the second.\n. You should be using a pre-linking function instead of the post-linking (the execution of post-linking goes from bottom to top, pre-linking goes from top to bottom).\n. I will let you take care of it as I have not been following very closely.\n\nOn Sun, May 18, 2014 at 1:23 PM, Stephen Barker notifications@github.com\nwrote:\n\n> ## Thanks @shaungrady!\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/angular-ui/ui-utils/pull/245#issuecomment-43450472\n. `ng-submit` (oddly) does not check for validity before allowing it to execute. Add `novalidate` to `<form>` tag like you are supposed to according to the angular docs and you'll find the required attribute doesn't prevent it either.\n. Honestly I've been slightly toying with the idea of splitting this repo up.\n\nTheoretically, you could still have an 'umbrella' repo that simply is 1 bower file with a bunch of bower dependencies on the other repos, and it just contains `ui.utils` module and depends on all the other modules. This would be closer to Angular today, and feels less chaotic than bower branches, but may end up cluttering the AngularUI namespace(?).\n\nThoughts?\n. Also, specifically curious about @douglasduteil's thoughts on this proposal since he put such an awesome amount of work into the existing build system ^\n. It's been renamed, I forgot the new name. Something like ng-bind-html\nOn Dec 17, 2014 1:15 PM, \"Alistair G MacDonald\" notifications@github.com\nwrote:\n\n> The documentation on gh-pages still reflects ng-bind-html-unsafe.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/pull/277#issuecomment-67395452.\n. @F1LT3R sorry we're sort of tied up with our own projects, want to help us out and submit a pull request? maybe @realtica can take a look at it?\n. I'm also thinking of adding a new directive. A way to give controllers access to directive-controllers:\n\n`ui-require=\"uiSelect as $parent.$uiSelect\"`\n\nWhat this would do is give you (albeit async) scope access to a directive's controller, so that you can call API methods on the controller without writing your own directive. For instance in this example you could then do things like `$scope.$uiSelect.open()` to programmatically open the dropdown. I'm not sure if I like this as opposed to just forcing people to write sibling directives instead though...\n. @mbielski I don't understand what you're talking about. I think you can do that already though.\n. It's just been renamed to bind-html\nOn Sep 20, 2014 11:09 AM, \"Sirajuddin Choudhary\" notifications@github.com\nwrote:\n\n> Since html-bind-unsafe is no longer available, highlight is useless, but I\n> have created a newer one, can contribute if allowed, will provide details\n> if required\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/297#issuecomment-56275523.\n. @sirajc merged since it's just a version update (thanks). However I'm still considering removing the feature amongst the others.\n. @pocesar I would be for keeping / implementing ui-scrollpoint which would essentially be the same thing, just more versatile.\n. That would probably mean throttling\n. @RimvydasUrbonas I would look into `_.throttle` or some sort of equivalent solution. It doesn't need to be a feature of this module.\n. @PowerKiKi the other repos don't have the code yet.\n. @PowerKiKi honestly I didn't figure we need special 'builds' or 'releases' quite as much anymore since I wanted the modules to be kept separate, even while deployed. Most people with decent build systems bundle up all the vendor files together anyway. I just wanted to move the code of the still-relevant modules into their respective repos. I consigned a volunteer to help but he seems to have dropped off the map. I stubbed out blank repos for all the ones I felt were still relevant today (I also renamed ui-scroll to ui-virtualize as I felt it was more accurate and `scroll` might get reused too much elsewhere).\n\nAs for allocation of work? Uh... the sub-repos are not being used, so feel free to just dump code into them as you see fit. I would keep their build processes minimal however.\n. New repos:\n\n```\n+    \"ui-virtualize\": \"angular-ui/ui-virtualize\",\n+    \"ui-scrollpoint\": \"angular-ui/ui-scrollpoint\",\n+    \"ui-event\": \"angular-ui/ui-event\",\n+    \"ui-mask\": \"angular-ui/ui-mask\",\n+    \"ui-validate\": \"angular-ui/ui-validate\",\n+    \"ui-indeterminate\": \"angular-ui/ui-indeterminate\",\n+    \"ui-uploader\": \"angular-ui/ui-uploader\"\n```\n. @PowerKiKi if you'd like to do it you're more than welcome, or wrangle up some other people and add them to the utils team. I'm super swamped atm so I just wanted to stub out some stuff of what I'd like to see.\n. That is awesome! I know there might be some complaints about having to\ninclude multiple files but I think this is so commonly automated and just a\nfew of many libraries people use that I wouldn't even worry about it.\n\nOn Tue, Jun 30, 2015, 3:03 AM Adrien Crivelli notifications@github.com\nwrote:\n\n> i'm working on that ui-event, ui-indeterminate and ui-mask done. The rest\n> is on the way...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/pull/406#issuecomment-117106953.\n. I would still prefer the name change to SOMETHING else because scroll is a far more impacted \"nebulous\" term than virtualize. I felt they both have the same degree of specificity. Utils alone has had a few other scrolling related directives. \n\nI suggested virtualize because I felt it describes more what the module _does_ and less about what causes it to happen (as I prefer to keep implementation specific grammar out of code as it's always subject to change). That said whatever name you land on I am (personally) fine with. \n\nAs for how you run your project, I have always tried to allow all projects to be fully autonomous and free to run themselves how they see fit while I have seen my role to be more of a consulting capacity where I give advice. Coffeescript is fine, it would be nice to drop it or pick up es6 instead as this is a standard,but not mandatory. \n\nThat said, I speak only for myself personally on all  these points , and others are free to disagree. \n. Keep the old name, you have my 2c.\n\nOn Tue, Jul 7, 2015, 6:24 AM Michael Feingold notifications@github.com\nwrote:\n\n> Alright. We (the team) took a vote on the name. Here is our list starting\n> from what we like best:\n> - ui-vrepeat and ui-vrepeat-viewport (v stands for virtual)\n> - ui-virtual-repeat and ui-virtual-repeat-viewport (too verbose)\n> - ui-repeat and ui-repeat-viewport (is it too bold?) It goes downhill\n>   from here to 'dynamic-listvirtual-array` and somesuch I am still not\n>   too happy about going through another round of renaming. I would like to\n>   find a way to keep the old name at least for a while as an alias.\n> \n> What do you think guys?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/pull/406#issuecomment-119201695.\n. Btw, wanted to say thanks for totally helping out and doing all the heavy lifting @PowerKiKi, after re-reading this thread I realized I misinterpreted your suggestion of splitting the work and ended up dumping it all on your shoulders lol.\n. I would like to keep this repo around at least for a short period to allow people to make the transition. Even https://github.com/angular-ui/angular-ui-OLDREPO is still online (for archive purposes). I would still like to just point the bower dependencies to the right place since that will make it fairly forward-compatible.\n. `ui-keypress` has been removed in favor of `ng-keypress`\n. Meh, actually I think my hard-coded solution was perfectly adequate, and fairly trivial to maintain. However creating a concatenated file that has all modules (and utils.js) in one file (order doesn't matter) is still incomplete.\n. @douglasduteil I'm assuming you took out my `modules/utils.js` for your generator. We should probably put this back somewhere if possible.\n. It was one module that conveniently includes all other modules in THIS\npackage. A generated file could also be a concatenation of all the other\nfiles in addition to the master module.\nOn May 8, 2013 8:20 AM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> We can publish it in the `gh-pages` branch with the other built files if\n> you want.\n> However I don't know what you want from it...\n> Le 8 mai 2013 07:59, \"Dean Sofer\" notifications@github.com a \u00e9crit :\n> \n> > @douglasduteil https://github.com/douglasduteil I'm assuming you took\n> > out my modules/utils.js for your generator. We should probably put this\n> > back somewhere if possible.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub<\n> > https://github.com/angular-ui/ui-utils/issues/1#issuecomment-17588010>\n> > .\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/1#issuecomment-17612612\n> .\n. Good point, forgot about bower not using branches. I need to ask them how\nfar away they are from doing snapshots as we currently have Travis\ngenerating the build for us.\nOn May 9, 2013 12:47 PM, \"adam bezemek\" notifications@github.com wrote:\n\n> @ProLoser https://github.com/ProLoser @douglasduteilhttps://github.com/douglasduteilI'm a little confused by the conversation here, but looking at the commits\n> and running the code locally it looks like if you run grunt build that\n> the modules get bundled up into out/build/angular-ui-utils-*.js correctly\n> and that the modules/utils.js file is generated. Can we include these\n> outputs in the repository so that if you install the project via bower that\n> you don't have to run that build locally?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/1#issuecomment-17685466\n> .\n. The problem is telling bower how to use them. You can actually just have\nTravis tag the gh-pages branch every time the version changes with\nsomething like v0.0.1build\nOn May 9, 2013 1:22 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> Right. I didn't hear about bower changing from tags to snapshots.\n> For now, if needed, we can ask Travis to create a new branch only for\n> bower where all sources and builds are copied.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/1#issuecomment-17687458\n> .\n. Be my guest\n\n## \n\nDean Sofer\nDeanSofer.com\n714.900.2254\n\nOn Thursday, May 2, 2013 at 3:54 PM, Douglas Duteil wrote:\n\n> I'm going to help here too, if you don't mind.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/angular-ui/ui-utils/issues/4#issuecomment-17369886).\n. What do you mean jquery suppression?\n\nAlso as a side-note, keep in mind that angular-ui.github.com will no longer contain demos. The demos for the parts of the old AngularUI that are not inside of ui-utils can be put onto github.com/angular-ui/angular-ui (aka angular-ui.github.io/angular-ui)\n. It is. jQuery is only used for tests to create events.\nOn May 2, 2013 11:24 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> By no dependencies. Didn't you mean that you want jQuery out of there? So\n> ui.utils is in pure angular?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/4#issuecomment-17380157\n> .\n. I mean I might very well be wrong, but yes we ultimately would like to no longer have jQuery-specific code in this project. I've already taken some time to remove it from the src as much as I can, and if you encounter more, feel free to remove it. However, it is very tedious to create event objects without jQuery (which is done in tests) so we made it a development dependency (and not a production-dependency).\n. @douglasduteil take a look at the `demos` branch I just pushed. I had a friend help us out by breaking apart the demo page for us but I haven't had time to properly integrate it. Perhaps it will help you move the doc-generator process along?\n. I think one per repo is the best thing for right now, but I have been\ntoying with the idea of having a redundant unified demo on angular-ui.\nOn May 3, 2013 2:46 AM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> And for you where must be the doc-generator process?\n> Do we generate a doc for each repo (with a gh-page branch per repo). Or we\n> have a one repo \u00ab to rule them all \u00bb?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/4#issuecomment-17386407\n> .\n. As for docs vs demos, I don't know (or care) right now so do what you think\nis best or is more convenient.\nOn May 3, 2013 2:13 AM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> Hum...\n> And you want the demos to be in the doc ? Or to BE the doc ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/4#issuecomment-17385178\n> .\n. I'm a little confused. Travis is going to create a commit?\n\nAnything on gh-pages should have docs in the root of the repo, if you check out how `angular-ui/bootstrap` does it they relocate the docs subfolder to the root using grunt.\n. Don't create any tags on the build or demo branch. Also, this will for the\ntime being be the only repo from AngularUI that needs a build file.\n\nThe bower team is going to switch to using snapshots that developers\npublish to their servers so tagging a build branch will be unnecessary.\nOn May 4, 2013 12:35 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> I made it.\n> \n> I make grunt concat all the demos index.html\n> https://github.com/douglasduteil/ui-utils/blob/ft-doc-generator/gruntFile.js#L52\n> And I ask Angular to include that file to the site. And with a little\n> magic it works.\n> \n> To build the Git Page, I just followed this articlehttp://sleepycoders.blogspot.se/2013/03/sharing-travis-ci-generated-files.html\n> Look at the end of the Travis build :\n> https://travis-ci.org/douglasduteil/ui-utils/builds/6885097#L738\n> \n> Here is a demo : http://douglasduteil.github.io/ui-utils/\n> angular-ui-utils.js and others are available like sohttp://douglasduteil.github.io/ui-utils/build/angular-ui-utils.js\n> .\n> \n> For Bower, like we generally don't need all the repo, I propose to make\n> Travis commit the build on a separated branch and add tags there (not on\n> the master branch )\n> \n> What you think ?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/4#issuecomment-17440193\n> .\n. I think you could just whitelist the travis server's ssh id_rsa.pub or something.  \n\n## \n\nDean Sofer\nDeanSofer.com\n714.900.2254\n\nOn Monday, May 6, 2013 at 1:45 AM, Douglas Duteil wrote:\n\n> K.\n> PS : I'm still looking for a way to have an OAuth token accessible to the team through the GitHub API (http://developer.github.com/v3/oauth/)...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/angular-ui/ui-utils/issues/4#issuecomment-17471650).\n. Looks good. I don't see any secure information that needs to be suppressed.\n. I think 'show-off' is a synonym for 'demo'. That said, we probably don't need the full `angular-ui-` prefix (except in the bower component if we ever register it).\n\nWhy not just rename the repo to demos or demo-generator or something more concise? This _specific_ discussion should also probably be on that repo lol\n. Just making jQuery a development dependency for now.\n. We ported over testing so if you'd like you can re-run tests as I think the travis status was before these were ported. You will have to merge from this repo to run your tests\n. What are the problems you're having?\n. do this:\n1. Run in terminal: `karma start --single-run=false test/karma.conf.js`\n2. Open browser(s) and visit URL shown\n3. In a second terminal: `karma run test/karma.conf.js`\n. I am trying to figure out how to remove the jquery event code. As for\nbrowsers I have been using the param --browsers=Chrome\nOn Apr 17, 2013 12:03 PM, \"Arnaud BRETON\" notifications@github.com wrote:\n\n> Hi,\n> \n> I've just started to backport my patch related to this issue\n> angular-ui/angular-ui#536https://github.com/angular-ui/angular-ui/issues/536\n> \n> If I have well understood, angular-ui will progressively move here, for\n> all directives with no external deps.\n> \n> I've met some issues to start developping on it:\n> - No gruntfile (=> no server, watch target)\n> - No browser specified in Karma conf\n> - Bower modules not included in the repo (maybe it's wanted?)\n> - Keypress directive specs are still related to jQuery (in\n>   createKeyEvent: var keyEvent = jQuery.Event(\"keydown\");)\n> \n> Am I missing something?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/7\n> .\n. I will not be accepting any more patches to AngularUI as there is no point to maintain both projects. Most of the issues you mentioned are fairly easy to bypass, and I don't see a reason why adding more parameters to your karma command is a big deal.\n\nIf you want to make changes to the repo nothing is stopping you from opening a PR. Anything you push to AngularUI doesn't really help us move forwards.  \n\n## \n\nDean Sofer\nDeanSofer.com\n714.900.2254\n\nOn Wednesday, April 17, 2013 at 12:27 PM, Arnaud BRETON wrote:\n\n> I think these kind of issues are requirements for people to actively develop on this project right?\n> I think I will start to backport my patch on angular-ui first and do it when ui-utils will be more mature.  \n> Yes I used this param too for Karma, but it's not a big deal to precise a default one, mainly for the future grunt task.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/angular-ui/ui-utils/issues/7#issuecomment-16528615).\n. I updated the README.md so you should not have too much difficulty hacking on this project. I have been busy running around that I have not had time to update the instructions as they may be subject to change.\n. After a little poking around it looks like jQuery is only a dependency for the spec files. I decided that for _now_ I'm going to make jQuery a development dependency and will try to eventually remove it from the specs too, however this _should not_ affect the actual source files. I may be wrong though as I need to confirm.\n\nGood news is that all tests pass now!\n. Are you aware that TravisCI does not support chrome?\n\nYou need to remove your last commit for me to merge this in.\n. This will be resolved by #12\n. @shaungrady may need to chime in on this, but I believe this directive is now completely rewritten without the plugin dependency. @arturgspb perhaps you should try the latest version?\n\nAfter a quick search of https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js I don't see that specific line of code.\n. Do you want to help us out by grabbing the source for `jQuery.fn.offset()`?\n. Take a look at #21.\n\nYou bring up a valid point and what I consider to be a much better route. I think we should (mainly) support regex, with a simpler alternative syntax. I think the ui-options or ui-on or ui-switch, etc is too much bloat.\n\nInstead, it should be similar to `ui-route`, which allows you to use plaintext, regex (I think), and curly braces. By leveraging braces, you can insert methods or variables or switches or whatever you want to modify the pattern.\n\n``` html\n<input ui-mask=\"(999) 999-9999\">\n<input ui-mask=\"/\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}/\">\n<input ui-mask=\"{{ isRegex && '/\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}/' || '(999) 999-9999' }}\">\n<input ui-mask=\"{{ myMask(isPhone) }}\">\n...\n<script>\n$scope.myMask = function(isPhone) {\n  if (isPhone)\n    return '/\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}/'\n  else\n    return '(999) 999-9999'\n}\n</script>\n```\n. @pocesar help us out by making a pull request :smile: \n. Have you tested this with the latest version of ui-event?\n. After some review there appears to be a flaw with how `.triggerHandler()` is called in uiMap. Closing this bug and adressing on angular-ui/ui-map#3\n. Very cool. I'm merging this in since we need to get docs back up and running quickly. I very much like the solution of having Travis building the docs automatically every time a successful build occurs. I think we need to standardize the docs across all projects however, so it would be cool if we could centralize any redundant code so that it can be easily reused across projects.\n\nFeel free to take a crack at using angular-ui/angular-ui-docs or angular-ui/builder for these purposes\n. @shaungrady think you could review this?\n. Why is this not REGEXP?\n\nAnyway, do you think you could add some tests? I can merge it immediately as soon as those are done.\n. I think it may be better to focus on the discussion in #16 instead\n. @jpap Would you be willing to add tests to this Pull Request?\n. This is a very difficult problem to address. I remember seeing somewhere that angular would track the index position of the DOM element (I think such as in an `ng-switch` or something) and re-inject the node back into the indexed position (if it wasn't 0). The PROBLEM is that almost everything could go wrong.\n\n```\na, b, c\na, [b], c // b is removed and index 1 is cached\na, [b], [c] // c is removed at index 1 is cached\na, b, [c] // b is returned to cached index 1\na, c, b // c is returned to cached index 1\n```\n\nAnd other such variations.\n. I didn't know that either lol. Yeah we can go ahead and remove it.\n. @michaelglass Experimental for us? Or merged into the experimental branch of angular?\n\nRegardless, Angular v1.1.x is a branch with all the patches and fixes of the stable branch + experimental features. Since it's likely to be far more stable than AngularUI itself, I am opting to remove it so that we do not end up creating a redundant amount of work.\n. What changes are that? \n. 34ba5a885fbe37cada1ca72522643203d5baa448\n. When a field is invalid, the ngModel does not update. This is normal across all angular validation. \n\nPerhaps what we should do is remove the value when ui-validate-watch rechecks an input, because it's leaving what was previously a valid value behind. Of course this may make an unpredictable (and annoying) behavior where inputs are cleared as they are invalidated, so perhaps it's better left as-is.\n. Hmm... actually I'm noticing an annoying behavior when angular CLEARS the input. I am curious if this is normal for angular and perhaps we need to start caching the last updated value, or if this abnormal and needs to be corrected\n. This is a bug. I have been trying to tackle it but got distracted. You should add the source code for the directive directly into your plunker. One thing I have been doing was setting the $viewValue instead of the $modelValue, but I get new bugginess.\n. I don't get why leveraging $viewValue uses the invalid model value?\n. Since we're working on this issue, I've been contemplating looking at how `ng-class` works and switching over to their approach. They essentially evaluate everything every single time the view is updated (less efficient) and this enables them to drop the string-encapsulation that we are doing around our expressions (more elegant). Thoughts?\n. You're going to have to be more specific than angular-ui.js ln 271. Can you link to the line and create a fiddle that reproduces the problem?\n. Don't use type=number?\n\nIn all seriousness, I think this has to do with invalid values not updating the model, therefore the mask may not be seeing the changes. What may need to be done is that the mask may have to work with the viewValue so as to completely ignore the validity of the input\n. Based on https://github.com/plentz/jquery-maskmoney/issues/80 and https://github.com/igorescobar/jQuery-Mask-Plugin/issues/25 the general consensus seems to be to not use `type=number` for fields you wish to mask. If your concern is accessibility then perhaps using @rayshan's solution is better?\n\nI'm on the fence about re-opening this issue because I don't know how to solve it.\n. 1. I thought you added this to `unique`?\n2. What other modules should handle expressions?\n. We ended up dropping it because it got merged into the core! https://github.com/angular/angular.js/blob/4179f62cc270b9614075095e1e4931736cff30a7/src/ng/directive/ngIf.js\n. Yes, I understand we should have put up some notification or something somewhere. I'm still running around trying to put out fires across the board.\n. There is no built-in way to do this. You can either build a custom directive and do it yourself, or you can mix non-passthru directives in (such as bs-tooltip from UI-Bootstrap), or you could put the plugins on differing DOM elements (such as placing the tooltip on a wrapper element)\n\nHowever, if your goal is to make tooltips appear over the slider handles created by noUiSlider, I am afraid it will probably not work as the noUiSlider probably creates new DOM elements. Instead I would recommend looking for a slider that has built-in support (or examples) on creating tooltips for each handle.\n\nIf you are simply trying to give a tooltip on the entire slider altogether, then using a wrapper DOM element would be my recommendation.\n. You can't. I considered it briefly but opted to drop it. I'm not sure it's worth supporting as I can only imagine it exponentially increases the complexity, but if you'd like to create a Pull Request with the enhancement feel free.\n. Try putting it on the `<body>` tag.\n. Can you add a unit test?\n. Duplicate of #25 \n. @ultrawebsites ui-if has been dropped as it's now part of the AngularJS v1.1.x core. \n. Yeah. I know. Feel free to open a PR, I don't like the way it's now either.\n. To keep in line with changes across all projects lets stick with the new changes. Do you mind making a PR for the changes to the README to correct the instructions?\n. @shaungrady do you want to review/merge this one?\n. @pocesar does this address #27?\n. @pocesar also maybe you can throw in one more unit test to confirm that this PR fixes #31\n. Actually @pocesar i might have to agree with @shaungrady on that. I don't really see the added benefit of having 1-8 masks. It seems oddly specific and only caters to unusual edge-cases. Why should you be allowed any number between 0 and 5? Why not only 5? Why not 5 to 9? What about 4 or 5 or 6?\n\nI'd rather us not causing regressions on more common use-cases (as @shaungrady points out) until we have a solid implementation or fix.\n. Does your PR support dynamic masks? Is it possible to do `ui-mask=\"{{someMaskString}}\"`?\n. @shaungrady I will defer the decision to merge or moderate this directive to you. I can't look into the nuances of this atm so I am not going to merge this in myself. If you think this PR as-is cannot be merged in but perhaps a subset of fixes can, maybe you can outline them so that @pocesar might create a PR we can readily merge in while we review the other more contentious issues.\n. So this lib is supposed to have 0 external dependencies outside of jQuery. For instance, `element.offset()` is not available, but can be accessed by doing `element[0].offsetTop` and `element[0].offsetLeft`. Do you think you could go through and try to remove any jQuery-specific code?\n\nYou should also make sure that the Travis build passes https://travis-ci.org/angular-ui/ui-utils/builds/8100215\n. This repo is designed to **not** have any external dependencies, whatsoever. All of the methods (except for maybe `outerHeight()`) are actually available on the native DOM element.\n\nFor instance:\nhttps://developer.mozilla.org/en-US/docs/Web/API/element.offsetLeft\nhttps://developer.mozilla.org/en-US/docs/Web/API/element.offsetTop\nhttps://developer.mozilla.org/en-US/docs/Web/API/element.clientHeight\n\netc\n\nYou don't actually need jQuery to easily access this information.\n. Pinging @angular-ui/bootstrap team. What do you guys think about having a dedicated 'jqlite+' repo? How many of the methods @mfeingold stubbed out do you guys use, and what is he missing?\n. @mfeingold I added you to the UI team. I'll let you do it :)\n. Duplicate of #25\n. Yeah... it's kind of a mess atm\n\nHere's the bottom line:\n\nAngularJS 1.1.x = AngularJS 1.0.x + new features\n\nThere will **not** be any regressions in the 1.1.x branch. Only the _new features_ are unstable. However, in that vein, utils is essentially just as unstable (if not more-so) and you're better off using the `ng-if` found in the core instead. It will also reduce the need to address bugs with an vestigial feature. If you want `ui-if` you will have to stick with an older version of utils.\n\nSorry, I realize this is a huge inconvenience but it's getting difficult to keep things beurocratic and run things without enough people.\n. Yeah I know. Sorry I've been more inclined to take more... destructive (?) measures just to keep things up to date rather than to sit on things. I REALLY need help maintaining the projects. Everyone has moved over to bootstrap lol.\n. @zhon @msalahz this is not going to be addressed, @skivvies issue is referencing our broken docs. Use `ngIf` which can be found in `>=1.1.x`\n. @msalahz 1.1.x is not 'unstable' despite the title. It's an inaccurate label. It's a 'prototype' branch where they are trying new features that may be subject to change. This is essentially the equivalent to using this lib, which is far more unstable and slower to maintain. If you don't use any of these new features (excluding ngIf) there will be no difference in the codebase.\n\n`ngIf` is here to stay however (or at least to my knowledge). Again, 1.1.x contains all the same bug-fixes and stability of 1.0.x, it just _also_ has additional features.\n\nIn the end, you're much better off getting `ngIf` since it has proper integrated support for things like animation, is actively maintained and fixed (unlike this module) and is probably as far along if not farther than this module.\n. @apneadiving wrong repository. Please open an issue on angular-ui/bootstrap\n. @vinniefranco theoretically you could just leverage the vanilla placeholder. Make it `'require: '?uiMask'` and if uiMask isn't present then just return silently. I don't think it's necessary to use a `ui-mask-` prefix if we prevent it from firing without the mask.\n. @vinniefranco you make a good point about the disconnect, but I actually think it's a valid case (and not really your problem). For example: someone who enters `1234` would see `1234/-M/__`\n\nIt may seem stupid, but people might want weird characters as placeholders.\n\n_ANYWAY_, the **original** point I was trying to make is you might as well drop the `ui-mask-` prefix for `placeholder`\n. @bjarkehs you are right, jQLite in angular does not support namespaced bindings.\n. Yeah we need to bump the bower version.\n. Just pushed v0.0.4\n. Instead of converting to a string, you should simply detect the case of when it's not a string and abort. If it's not a string, why would you need the comparison to begin with?\n. I think you're finding an issue with how our demos render. @douglasduteil i think we might have to go to a non client-side approach as the demos are generally causing problems.\n. Don't worry about design too much, @nateabele has been cool enough to hire\na designer\nOn Jul 28, 2013 7:35 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> I made a first version http://douglasduteil.github.io/ui-codemirror/\n> It only lacks the drawer in top bar ...\n> Using :\n> - https://github.com/douglasduteil/angular-ui-docs\n> - https://github.com/douglasduteil/ui-codemirror\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/67#issuecomment-21696773\n> .\n. Looks good to me. Thanks for helping out with this.\n. @mithun-daa the Nuget version may be out of date. We have broken AngularUI into several smaller projects now.\n. `ui-mask` has this functionality already\n. Looks good. Go ahead and merge. @dhbaird you should add a demo \n. I'm confused. Which module isn't installing?\n. Works for me. I'm having trouble reproducing your problem. Have you tried\nhitting up #node.js or something to see if there's something wrong with\nthose modules?\n\nOn Fri, Jul 26, 2013 at 1:12 AM, perqa notifications@github.com wrote:\n\n> Sorry. This is not a problem with angular-ui, only with the installation\n> instructions in your README section. The command\n> npm -g install grunt-cli karma bower\n> fails due to some dependencies related to karma and its plugins. The\n> installation of these is never completed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/78#issuecomment-21607262\n> .\n\n## \n\nDean J Sofer\nDeanSofer@gmail.com\n\nBS Computer Information Systems\nCalifornia State Polytechnic University, Pomona\nTelephone: 714-900-2254\nWebsite: www.DeanSofer.com\nGithub: github.com/ProLoser\n. Can you create a demo or test or code-sample of the use-case you are addressing?\n. Really need some unit tests.\n. I don't get the purpose of this PR. You should not be doing `eval()` anyway.\n. If you want to be able to pass multiple arguments, you could just do this:\n\n`$scope.$eval( '[' + $attrs.uiOptions + ']' );`\n. Nevermind, I already have that in there. `ui-jq` already does what you want. No string encapsulation needed. Just do\n\n```\n<div ui-jq=\"foobar\" ui-options=\"arg1, arg2, 'arg3', {arg4:true}\">\n```\n. This is a weird edge case to begin with. A different approach altogether\nshould be devised like using a different attribute, otherwise I don't see a\nbig enough priority to merge this.\nOn Aug 8, 2013 1:46 AM, \"raykin\" notifications@github.com wrote:\n\n> direct write in ui-options attribute may not always fine, sometime we may\n> wanna attach the options value to scope.\n> But $scope.opts = \"arg1, arg2, 'arg3', {arg4: true}\" will be failed. In\n> this case the linkOptions = [\"arg1, arg2, 'arg3', {arg4: true}\"] ,not as\n> expected [arg1, arg2, 'arg3' , {arg4: true}]\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/91#issuecomment-22310329\n> .\n. The plugin is not designed for heavy lifting. It has the ability to rerun a\nfunction multiple times (such as elm.focus()) but any more complex and you\nare better off writing a directive.\nOn Aug 8, 2013 2:35 AM, \"raykin\" notifications@github.com wrote:\n\n> my usage is dynamic invoke jquery-ui effect depending on the $scope\n> changes.\n> before I read the source, I consider the ui-options can be binding to the\n> $scope attributes,\n> after read source I realize the ui-options is an init option, never\n> changed after init.\n> I think it's a common requirement to invoke effect jquery fn in a dynamic\n> way, ex: dynamic effect style and dynamic run the effect function.\n> But maybe for such a requirement, a new module which stand on jq will be\n> good chooice.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/91#issuecomment-22312580\n> .\n. Want to help me out and open a pull-request?\n. @solidspark yeah that should be fine.\n. @dymk I think we can make `ui-route` detect if you have a `ui-sref` attribute and use that accordingly.\n\nAlternatively, you can specify a pattern and pass it directly to `ui-route` instead of having it auto-detect from the href attribute.\n. Ui router has its own directive for this \n. Make sure the npm install is using the right version of karma.\n. @dymk i think you have to go to angular-ui/angular-ui-docs repo and update all project versions of karma across the board. @douglasduteil perhaps you can chime in.\n. Perhaps it should be `1.0.*`\n. Or `~1.0`, I have no idea what the syntax should be.\n. This might be a viable directive. Feel free to open a PR. I'd like to learn more about how much demand there is for such a directive. I prefer not to code 1-off utilities (if that makes sense). If there way a way to support [whatever]-intent, etc, it would be cool. Or like a deferred evaluation directive.\n. @marklagendijk one thing I'm discovering is that the post-linking order has now been reversed. What this means is that increasing a priority of a directive might fix things in some situations (such as assigning the `ngModelController.$render` property)\n. @schwiet I've noticed this issue too, but I honestly have no idea how to tackle it. That being said, I've done 0 research into the issue.\n. @dpiccone you committed all of your components into the repo. You also have a dependency on jQuery which is not one of the points of ui-utils. Isn't this module roughly the same as doing this: http://jsfiddle.net/ProLoser/mxv2z/\n. Sorry, I think we'll have to pass on this one as it's more CSS-centric than anything else. Don't let that dissuade you from any other submissions though!\n. @rainboxx me too! You should build it!\n. Unfortunately this package does not have a distribution file. You need to add the specific event.js file manually.\n. This might need to be a configuration option since you might have an element with `overflow:auto`. \n. Technically the one listed on cdnjs should be taken down and angular-ui-utils should be added instead, but we don't have a distribution file in this repo.\n. Also, you're able to submit pull requests to cdnjs yourself.\n. Wrong repo\n. @mhworth do you think you could merge scrollfix or waypoints together so that we have 1 module capable of doing both features?\n. I'd like to delete the scrollfix module if yours does everything it did. No\nreason to have both. I'd also like a super minimalist API. I will probably\nwant to inspect your proposed API if you don't mind the feedback (I'm super\nbusy so haven't had a chance to peruse your GH fork yet unfortunately).\n\nOn Tue, Oct 22, 2013 at 5:10 PM, Matt Hollingsworth <\nnotifications@github.com> wrote:\n\n> Okay, so I made it so that ui-waypoints will behave like ui-scrollfix in\n> the case where you pass it similar arguments. I.e., it will add the class\n> 'ui-scrollfix' when you scroll pass the element if you just do\n> ,\n> behaves the same way as ui-scrollfix, etc.\n> \n> Let me know if you'd like any other changes\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/123#issuecomment-26868532\n> .\n\n## \n\nDean J Sofer\nDeanSofer@gmail.com\n\nBS Computer Information Systems\nCalifornia State Polytechnic University, Pomona\nTelephone: 714-900-2254\nWebsite: www.DeanSofer.com\nGithub: github.com/ProLoser\n. Finally had a chance to look at it.\n\nSo here's my thoughts:\n\nMaybe it should be called <del>`ui-scroll`</del> <del>`ui-scrolled`</del> `ui-scrollpoint` instead of waypoints, since that's more accurately what you're paying attention to inside the directive.\n\nDon't use a super confusing and complicated API. I totally applaud your efforts to be simple and minimal, but if anything, I would strip out functionality and just provide building blocks that people can use to mix and match and reach their original goal. Don't handle strings and ints and objects and functions and ints with special string characters differently, etc. What if I wanted to specify a custom class, AND a function, AND an offset? You're just making more work and maintenance for yourself in the long run.\n\nFirst, one thing I think most of the team has learned is don't ask people to provide functions by name that you pass hard-coded parameters to. Instead provide scope variables like we do `$event` and let people execute whatever expression they want.\nSo instead of `ui-waypoint=\"someCallback\"` we would do `ui-waypoint=\"someCallback($direction, $element)\"`. Of course, I'm not saying this is what I think the final API should be...\n\n### CONTINUING!\n\nI don't think providing `$element` (or a handle to a DOM element in a controller/scope callback function) is a good idea. You're blurring the lines that angular spent so much effort to create. If someone wants to fuck with the original DOM element, then have them write their own directive (that possibly wraps yours). Ask yourself what they would REALLY want with it? I'm guessing you were trying to provide the coordinates of the DOM element, because everything else could be stored on the scope. If that's the case, maybe just provide a `$position` object or something, although this is something I believe needs more thought and is an issue on several other directives too.\n\nSIMPLIFY!\n\nInstead of trying to explicitly support `ui-scrollfix`, which is an archaic and oddly specific directive, provide people with building blocks and examples of how they go together. For instance...\n\nInstead of `ui-waypoint` or `ui-waypoint=\"'someClass'\"` demo something like this: `<div ui-waypoint=\"fixed=($direction=='up')\" ng-class=\"{fixed:fixed}\">`\n\nKeep in mind, people can even create alias directives that are essentially what I just typed in ^ (checkout [ui-alias](126)).\n\nAnyway, perhaps what we want is a simple way to hook into scroll events, but the question becomes what is the criteria? Is it when the DOM element touches the top of the screen? or is it when it exits the screen? Does direction matter? Should we calculate offset? ETC.\n\nIf you can provide a concise API that tackles 80% of what waypoints does AND allow me to roll my own ui-scrollfix directive, then we all win.\n\nI reviewed the base jquery plugin and had a few thoughts:\n1. $direction is cool, but do you really use it? Maybe it's an unnecessary amount of bloat to bother calculating?\n2. What if we just had an 'in' function and 'out' function? Similar to 'up' or 'down'? Again, this might not be as good as your approach with $direction, or maybe bothering to support more than 1 event isn't even worth it?\n3. We probably should just let people specify an offset as an additional attribute.\n\nPerhaps `ui-scrolled` or `ui-waypoint` isn't a good description... maybe `ui-scrollpoint`? Since it's about when you scroll to/past this point? I just think that people won't get where `waypoint` originated from if they weren't familiar with the plugin (like I was).\n. Also, you should review any outstanding issues or PRs regarding the current uiScrollfix implementation. You are not binding to $destroy events and I think someone is looking at binding to window scroll events instead of the specific dom element or something.\n. ### New Feedback\n- I changed my mind about `$direction` and `$position`. What are you using `$position` FOR exactly? Do we really need it? I think we should keep `$direction` but drop `$position`\n- To improve performance, lets lazy-bind a maximum of 1 scroll event to $window. Make a collection of 'bindings' and have 1 actual DOM binding to $window that iterates through the collection to see if there's logic that needs to be executed. The collection and window binding can be built up on first instance and torn down when the collection is empty.\n- To allow scoping to scrollable DOM elements, we can have an optional parent `ui-scrollpoint-container` directive that overrides the binding from `$window` to whatever the DOM element is. This needs testing, as I'm not sure if this necessary, do overflow:auto/scroll containers have/need their own isolated scroll events?\n- The only 'option' I think we need to really support is offset. This could be similar to the current scrollfix accepted values. \n\n### Examples\n\nHow to recreate 3rd party plugins using this as a tool.\n\n#### ui-scrollfix\n\n``` html\n<div ui-scrollpoint=\"fixed=($direction=='down')\" ng-class=\"{fixed:fixed}\">\n```\n\n#### Scrollspy (bootstrap)\n\nThis may take a bit more boilerplate, but by applying the scrollpoints to the DOM you want to spy on you don't have to worry about timing issues and race conditions like having the spied DOM being created late (such as putting the nav in the header vs the sidebar and supporting 1 page per primary nav item and still spying on children).\n\nKeep in mind in this demo, `$direction` is not as useful since `active` can only have 1 value at a time, so there is no need to have a `remove()` expression.\n\n``` html\n<ul>\n  <li ng-class=\"{active:active=='item1'}\">Item 1</li>\n  ...\n</ul>\n\n...\n\n<h1 ui-scrollpoint=\"active='item1'>Item 1</h1>\n```\n\nCombine scrollspy demo with scrollfix demo and you have the full Bootstrap implementation.\n. I think you're sorely confused.\n\nMy proposal was to have 2 (or more) scroll bindings:\n\nfirst binding is to the nav list, that controls pos:fixed of the nav, and nothing else\nsecond (or more) is bound to the headings or DOM elements that represent active items inside the navigation. This code is identical to scrollfix, except that the behavior is NOT to change to pos:fixed but instead to simply change the value of a scope variable.\n\nIn other words:\n\n``` html\n<!-- The nav list has a binding to handle floating -->\n<ul class=\"navigation\" ui-scrollpoint=\"fixed=($direction=='down')\" ng-class=\"{fixed:fixed}\">\n  <li ng-class=\"{active:active=='item1'}\">Item 1</li>\n  <li ng-class=\"{active:active=='item2'}\">Item 2</li>\n  ...\n</ul>\n\n...\n\n<!-- Each nav item on the page has it's own binding to change the active nav item -->\n<h1 ui-scrollpoint=\"active='item1'\">Item 1</h1>\n...\n<h1 ui-scrollpoint=\"active='item2'\">Item 2</h1>\n```\n\nAll calculations for the nav and the items are identical, whatever they may be.\n\nHowever, a new issue has just occurred to me. If you set the nav to pos:fixed when the $direction is down, how will you set it back when $direction is up\n. Awesome, that's way more reliable then. I don't think AngularJS bindings support namespacing events anyway so that's a nifty trick. I just learned (or re-learned, cuz I'm sure I knew that already) something lol.\n\nOnly note is try to refactor your tests so that they don't rely on jQuery as this repo is supposed to have 0 dependencies on it.\n\nI realize certain positional calculations of the other modules could benefit from jQuery's `offset()` method but this code has been reproduced inside _ui-bootstrap_ so we should follow their example.\n. @kadamwhite I would checkout the discussion on #123\n. Might as well, but you may want to read [my newest comment](https://github.com/angular-ui/ui-utils/pull/123#issuecomment-27025322) as it proposes an even MORE efficient approach than the one used here.\n\nAlternatively, if you don't want to waste the effort (which is fine too) we can just collaborate on the other issue if it looks promising to you.\n. @nateabele it needs tests, but I finally got around to it lol.\n. @dmitryevseev a simple fix for this would be to inject $location and see if it can give us the hashPrefix for use in the directive.\n. That is ridiculously weird. Why would it try to put them there?\n. @zakdances \n1: what you describe isn't really going to happen\n2: You can remove most of your clutter by simply doing `return myObject.load()` since it IS a promise (probably).\n3: You may want to look at `ui-router` and resolves. This lets you prevent a page (or state) from loading until a resource has been retrieved, and you can nest chunks of your application and load assets at every chunk level. It's quite awesome and inspirational as far as architectural possibilities go.\n. Perhaps you should use `ngKeypress` instead? `uiKeypress` is primarily a convenience solution now as it simply makes it easier for you to bind to specific keys or key combinations. `ngKeypress` gives you access to the event being triggered by ANY key and as such you are free to inspect and perform responses as you see fit.\n. Sorry @flea89, it's just that this directive may eventually disappear in the long run honestly because they added it to the core. It's only a convenience directive nowadays so adding more features to it to make it more complex is not something I'm keen on doing (when we have so many other critical features needing bug fixes).\n. @soupdiver `ng-if` is now in the core, which is why we removed it.\n. Actually I think you should merge underscore and dash and make a 'separator' mode (and argument).  All 3 modes would also take a new secondary parameter called 'separator' which by default for 'separator' mode would be `_`, for 'humanize' would be ` `and for variable would be``.\n\nMaximum versatility!\n. The reason I didn't JUST merge this in is because I could have sworn that the documentation says you should NOT return anything if your validation fails.\n. Oh yeah, and if you looked at the code and decided to ALWAYS return it then a proper fix would be merging the 3 return statements together.\n. According to the docs:\n\n> $parsers\n> \n> Array of functions to execute, as a pipeline, whenever the control reads value from the DOM. Each function is called, in turn, passing the value through to the next. Used to sanitize / convert the value as well as validation. For validation, the parsers should update the validity state using $setValidity(), **and return undefined for invalid values**.\n\nhttp://docs.angularjs.org/api/ng.directive:ngModel.NgModelController#properties_$parsers\n\nSo technically, I should not have merged this in as it's current behavior is correct.\n. I don't really think this is adding a whole lot. It's similar to the relationship between ui-keypress vs ng-keypress, leading to us probably dropping ui-keypress in the near future.\n\nSince you can do `$window.bind('blur', function(){})` anywhere in the app you're not gaining anything by `using`$broadcast()`.\n. Don't make two forks. Just make the file available if people don't use\njquery. I am not knowledgeable about the latest updates so I have no\nopinion about merging the code into the directive or not.\nOn Apr 30, 2014 4:30 PM, \"Douglas Duteil\" notifications@github.com wrote:\n\n> Yo @mfeingold https://github.com/mfeingold it feels legit for me to\n> drop jqliteExtra out of UI.Scroll. It's defiantly an external dependency\n> for the directive. I actually did start a little pop with my jqLitePlushttps://github.com/douglasduteil/jqLitePlusI told you about 3 mouths ago...\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/162#issuecomment-41864095\n> .\n. I'm confused, why is Karsten Sperling just randomly added there?\n. I'm a little bit confused what you're describing. I believe we added support for promises so AJAX should be fairly simple to tackle, and if you use the object syntax you can namespace multiple validation rules:\n\n`<input ui-validate=\"{rule1:'1>2',rule2:'2>3',rule3:'somePromise()'}\" name=\"myVal\">`\n\nshould give you things like `myForm.myVal.$errors.rule1` etc.\n. That doesn't make sense. Are you sure you know the proper way to retrieve validation flags? It sounds like you are complicating things.\n. This is not how ui-validate works. You are supposed to be putting validation expressions in there.\n. Need to see some code. This is a fairly uninformative question as-is.\n. Yeah... honestly it was a garbage directive and I think we're going to remove it. Same goes for ui-show/hide. Sorry. They're too easy for people to just code manually.\n. I would rename this to something more concise, like `ui-mask-raw` (needs to be inverted) or something that makes more sense. Also you should probably add global config support so people don't have to put this on every single html attribute.\n\nI suppose ui-mask-raw=true or false would be good since if it's set to true globally or false globally you'd want a one-off option to inverse it.\n. Is there a reason that the diff has 0 files changed?\n. Are any of our other modules GNU? I think this entire repo is MIT so I'm not sure if it's a bad idea or not to have this specific module GNU.\n. Shouldn't the cursor jump to the next input on tab?\n. Essentially what I'm guess is happening is that the last value BEFORE minlength failed is the value being used, because when a value becomes invalid, the model _shouldn't_ be getting updated. In other words the value is either null OR it's the last valid value you typed in for that specific rule.\n\nAnyway, for `null` you can put a check in your compare function to return true or the original value or  something if one of the values is null. Although I'm not sure about the other edge-case. Long story short, it's sort of a convention with the angular core you may want to take up with them.\n. Do you mind checking out what the docs suggest? We could switch to view value I suppose.\n\nOn Fri, May 16, 2014 at 7:41 AM, Raman Gupta notifications@github.com\nwrote:\n\n> > Essentially what I'm guess is happening is that the last value BEFORE minlength failed is the value being used, because when a value becomes invalid, the model shouldn't be getting updated. In other words the value is either null OR it's the last valid value you typed in for that specific rule.\n> > This is something that has always bugged me about ui-validate, and now I understand where my discomfort was coming from. Why would ui-validate be using the model value to do the validation rather than the value of the input control itself, like the regular angular validation?\n> > There is a simple, but ugly, work-around, which is to make the ng-show take into account the other validation e.g.:\n> > \n> > ```\n> > <div ng-show='myForm.confirm_password.$error.validator && ! myForm.password.$error.minlength' class=\"text-danger\">\n> > ```\n> > \n> > ## But shouldn't ui-validate be using the input value rather than the model value?\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/angular-ui/ui-utils/issues/241#issuecomment-43339024\n. @rocketraman if you're talking about `confirm_pass` looking at the model of `pass` in YOUR comparison function then there's nothing that can be done because we don't have access to sibling model controllers (aka: their view values). In other words, make the other input valid before worrying about matching em up?\n\nAlso, I don't put all the validation on both inputs. I put all of my validation on ONE input and then just put a match validation on the second.\n. You should be using a pre-linking function instead of the post-linking (the execution of post-linking goes from bottom to top, pre-linking goes from top to bottom).\n. I will let you take care of it as I have not been following very closely.\n\nOn Sun, May 18, 2014 at 1:23 PM, Stephen Barker notifications@github.com\nwrote:\n\n> ## Thanks @shaungrady!\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/angular-ui/ui-utils/pull/245#issuecomment-43450472\n. `ng-submit` (oddly) does not check for validity before allowing it to execute. Add `novalidate` to `<form>` tag like you are supposed to according to the angular docs and you'll find the required attribute doesn't prevent it either.\n. Honestly I've been slightly toying with the idea of splitting this repo up.\n\nTheoretically, you could still have an 'umbrella' repo that simply is 1 bower file with a bunch of bower dependencies on the other repos, and it just contains `ui.utils` module and depends on all the other modules. This would be closer to Angular today, and feels less chaotic than bower branches, but may end up cluttering the AngularUI namespace(?).\n\nThoughts?\n. Also, specifically curious about @douglasduteil's thoughts on this proposal since he put such an awesome amount of work into the existing build system ^\n. It's been renamed, I forgot the new name. Something like ng-bind-html\nOn Dec 17, 2014 1:15 PM, \"Alistair G MacDonald\" notifications@github.com\nwrote:\n\n> The documentation on gh-pages still reflects ng-bind-html-unsafe.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/pull/277#issuecomment-67395452.\n. @F1LT3R sorry we're sort of tied up with our own projects, want to help us out and submit a pull request? maybe @realtica can take a look at it?\n. I'm also thinking of adding a new directive. A way to give controllers access to directive-controllers:\n\n`ui-require=\"uiSelect as $parent.$uiSelect\"`\n\nWhat this would do is give you (albeit async) scope access to a directive's controller, so that you can call API methods on the controller without writing your own directive. For instance in this example you could then do things like `$scope.$uiSelect.open()` to programmatically open the dropdown. I'm not sure if I like this as opposed to just forcing people to write sibling directives instead though...\n. @mbielski I don't understand what you're talking about. I think you can do that already though.\n. It's just been renamed to bind-html\nOn Sep 20, 2014 11:09 AM, \"Sirajuddin Choudhary\" notifications@github.com\nwrote:\n\n> Since html-bind-unsafe is no longer available, highlight is useless, but I\n> have created a newer one, can contribute if allowed, will provide details\n> if required\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/297#issuecomment-56275523.\n. @sirajc merged since it's just a version update (thanks). However I'm still considering removing the feature amongst the others.\n. @pocesar I would be for keeping / implementing ui-scrollpoint which would essentially be the same thing, just more versatile.\n. That would probably mean throttling\n. @RimvydasUrbonas I would look into `_.throttle` or some sort of equivalent solution. It doesn't need to be a feature of this module.\n. @PowerKiKi the other repos don't have the code yet.\n. @PowerKiKi honestly I didn't figure we need special 'builds' or 'releases' quite as much anymore since I wanted the modules to be kept separate, even while deployed. Most people with decent build systems bundle up all the vendor files together anyway. I just wanted to move the code of the still-relevant modules into their respective repos. I consigned a volunteer to help but he seems to have dropped off the map. I stubbed out blank repos for all the ones I felt were still relevant today (I also renamed ui-scroll to ui-virtualize as I felt it was more accurate and `scroll` might get reused too much elsewhere).\n\nAs for allocation of work? Uh... the sub-repos are not being used, so feel free to just dump code into them as you see fit. I would keep their build processes minimal however.\n. New repos:\n\n```\n+    \"ui-virtualize\": \"angular-ui/ui-virtualize\",\n+    \"ui-scrollpoint\": \"angular-ui/ui-scrollpoint\",\n+    \"ui-event\": \"angular-ui/ui-event\",\n+    \"ui-mask\": \"angular-ui/ui-mask\",\n+    \"ui-validate\": \"angular-ui/ui-validate\",\n+    \"ui-indeterminate\": \"angular-ui/ui-indeterminate\",\n+    \"ui-uploader\": \"angular-ui/ui-uploader\"\n```\n. @PowerKiKi if you'd like to do it you're more than welcome, or wrangle up some other people and add them to the utils team. I'm super swamped atm so I just wanted to stub out some stuff of what I'd like to see.\n. That is awesome! I know there might be some complaints about having to\ninclude multiple files but I think this is so commonly automated and just a\nfew of many libraries people use that I wouldn't even worry about it.\n\nOn Tue, Jun 30, 2015, 3:03 AM Adrien Crivelli notifications@github.com\nwrote:\n\n> i'm working on that ui-event, ui-indeterminate and ui-mask done. The rest\n> is on the way...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/pull/406#issuecomment-117106953.\n. I would still prefer the name change to SOMETHING else because scroll is a far more impacted \"nebulous\" term than virtualize. I felt they both have the same degree of specificity. Utils alone has had a few other scrolling related directives. \n\nI suggested virtualize because I felt it describes more what the module _does_ and less about what causes it to happen (as I prefer to keep implementation specific grammar out of code as it's always subject to change). That said whatever name you land on I am (personally) fine with. \n\nAs for how you run your project, I have always tried to allow all projects to be fully autonomous and free to run themselves how they see fit while I have seen my role to be more of a consulting capacity where I give advice. Coffeescript is fine, it would be nice to drop it or pick up es6 instead as this is a standard,but not mandatory. \n\nThat said, I speak only for myself personally on all  these points , and others are free to disagree. \n. Keep the old name, you have my 2c.\n\nOn Tue, Jul 7, 2015, 6:24 AM Michael Feingold notifications@github.com\nwrote:\n\n> Alright. We (the team) took a vote on the name. Here is our list starting\n> from what we like best:\n> - ui-vrepeat and ui-vrepeat-viewport (v stands for virtual)\n> - ui-virtual-repeat and ui-virtual-repeat-viewport (too verbose)\n> - ui-repeat and ui-repeat-viewport (is it too bold?) It goes downhill\n>   from here to 'dynamic-listvirtual-array` and somesuch I am still not\n>   too happy about going through another round of renaming. I would like to\n>   find a way to keep the old name at least for a while as an alias.\n> \n> What do you think guys?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/pull/406#issuecomment-119201695.\n. Btw, wanted to say thanks for totally helping out and doing all the heavy lifting @PowerKiKi, after re-reading this thread I realized I misinterpreted your suggestion of splitting the work and ended up dumping it all on your shoulders lol.\n. I would like to keep this repo around at least for a short period to allow people to make the transition. Even https://github.com/angular-ui/angular-ui-OLDREPO is still online (for archive purposes). I would still like to just point the bower dependencies to the right place since that will make it fairly forward-compatible.\n. `ui-keypress` has been removed in favor of `ng-keypress`\n. ",
    "douglasduteil": "We can publish it in the `gh-pages` branch with the other built files if\nyou want.\nHowever I don't know what you want from it...\nLe 8 mai 2013 07:59, \"Dean Sofer\" notifications@github.com a \u00e9crit :\n\n> @douglasduteil https://github.com/douglasduteil I'm assuming you took\n> out my modules/utils.js for your generator. We should probably put this\n> back somewhere if possible.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/1#issuecomment-17588010\n> .\n. Right. I didn't hear about bower changing from tags to snapshots.\nFor now, if needed, we can ask Travis to create a new branch for bower where all sources and builds are copied. And we can just tag there...\n. I'm going to help here too, if you don't mind.\n. Hum... I'm stuck :) \n\nI manage to do a lot.\n- Some clean up and unifications of Karma and Travis\n- I made a [tiny task to concat all the dependances](https://github.com/douglasduteil/ui-utils/blob/Tons_of_Damage/tasks/x_concat.js) the main module `ui.utils` \n- I hierarchized the concatenation tasks to always have the main module `ui.utils` defined at the end in the builded files.\n- I fixed the banner of the builded files.\n- And I add a _jsHint_ task... \n\nrepo : https://github.com/douglasduteil/ui-utils/tree/Tons_of_Damage\ncurrent travis : https://travis-ci.org/douglasduteil/ui-utils/builds/6837205\n\nIt is all we needed to do before dealing with the jQuery suppression here ? \n. By no dependencies. Didn't you mean that you want jQuery out of there? So `ui.utils` is in pure angular? \n. Ok my bad. \n. Hum...\nAnd you want the demos to be in the doc ? Or to BE the doc ?\n. And for you where must be the doc-generator process?\nDo we generate a doc for each repo (with a gh-page branch per repo). Or we have a one repo \u00ab to rule them all \u00bb?\n. K. I fork my last test.\nI'll try to make Travis commit on the `gh-page` branch, no opposition ? \n. Yep Travis can commit on GitHub \n. I made it.\n\nI make grunt concat all the demos `index.html` https://github.com/douglasduteil/ui-utils/blob/demos/gruntFile.js#L62\nAnd I ask Angular to include that file to the site. And with a little magic it works.\n\nTo build the Git Page, I just followed [this article](http://sleepycoders.blogspot.se/2013/03/sharing-travis-ci-generated-files.html)\nLook at the end of the Travis build : https://travis-ci.org/douglasduteil/ui-utils/builds/6885097#L738\n\nHere is a demo : http://douglasduteil.github.io/ui-utils/\n`angular-ui-utils.js` and others are available [like so](http://douglasduteil.github.io/ui-utils/build/angular-ui-utils.js).\n\nFor Bower, like we generally don't need all the repo, I propose to make Travis commit the build on a separated branch and add tags there (not on the `master` branch )\n\nWhat you think ?\n. K.\n\nPS : I'm still looking for a way to have an OAuth token accessible to the team through the [GitHub API](http://developer.github.com/v3/oauth/)...\n. Yep... Seems like it not supported yet... \nhttps://twitter.com/fernandezpablo/status/312389762017263617\n. K good news I succeed in using Git SSH authentication in Travis without divulging the deploy key...\nFollowing [this article](http://phatograph.github.io/blog/posts/2013/04/26/travis-to-the-rescue/).\n\nBefore connecting Travis to the `gh-page` branch I will try out my system on a `ft-travis-ssh` branch.\n\nStay tuned.\n. K I don't know if it's saying too much...\n[Here is the Travis build](https://travis-ci.org/douglasduteil/test-TravisSSH/builds/6923559#L46) \n[And the result branch...](https://github.com/douglasduteil/test-TravisSSH/tree/build)\n\nI don't know if it's useful to have git saying so much things...\nIf it's not I can add a `--quiet` option.\n. Yep. At the end I feel like only ui-utils needs this kind of treatment...\nThe other modules haven't  much content in fact...\n. I feel like renaming the `angular-ui-docs` repo into a `angular-ui-show-off` cause we just want to say :: \n\"See that, it works with Angular, go get the doc and use it !\"\nWhat you think ?\n. Alright.\n. Normally the branch you \u00ab pull-request \u00bb with in your fork is synchronized with your pull request here.\nSo you just have to remove the commit locally in that branch and `git push --force` for example.\n\nHowever, isn't it better to unify the coding style across our repos ?\nLike every repo will pass from _Textacular_ to _Karma_, we should have nearly the same code for this everywhere.\n\nFor the last two repos that I updated ( _ui-ace_ and _ui-codemirror_ ), I directly used _Karma_ following @petebacondarwin's code : https://github.com/angular-ui/ui-date/commit/716edcafebf05b78710dcf7ce662700d64752fc9\n. Thanks.\n\nI'll go on and find out how to get a OAuth token for the organization Angular-UI now.\n. Yep the bower `angular-ui-utils` will change. (see  https://github.com/angular-ui/ui-utils/issues/1 )\n. Wow here comes the forks problem  https://github.com/angular-ui/angular-ui-docs/issues/5\n. K forks problem fixed.\n. You opened a PR from your master branch...  (read [this](https://github.com/angular-ui/ui-utils/blob/master/CONTRIBUTING.md))\n\nCan you rebase your work ?\n. > As part of the 'break up' of AngularUI in to sub-projects, the documentation for 'ui-if' seems to have become lost\n\nsee https://github.com/angular-ui/ui-utils/issues/36\n\n> Also, I note that the links on http://angular-ui.github.io/ for each of the UI-Utils modules seem to be broken now.\n\nYes. Actually even if we link to http://angular-ui.github.io/ui-utils/#/scrollfix it wouldn't work as expected because of the deferred loading. We have to improve the [angular-ui-docs](https://github.com/angular-ui/angular-ui-docs).\n. ?\nIt's still working for me...\nI'll end up changing the all site...\n. Maybe with more grunt generation and less front-end hacks...\n. The demo page had been updated (https://github.com/angular-ui/ui-utils/pull/82 ) but there are still a lot of things to  fix...\n. K I'm working on it...\n. I made a first version http://douglasduteil.github.io/ui-codemirror/\nIt only lacks the drawer in the top bar ...\nUsing :\n- https://github.com/douglasduteil/angular-ui-docs\n- https://github.com/douglasduteil/ui-codemirror\n. Cool I'm going to upgrade everything...\n. Alright all done.\nGive me feedback !\n. Can you directly send an example that illustrate the problem (using ng-required maybe) ? \n. Thanks\n. > When fragment is falsey (empty string, undefined, etc.), it turns into an infinite loop, right?\n\nNo I don't think so (I didn't test it). The infinite loop comes when you are including a file that includes itself.\n\n> what should happen when fragment is specified, but its value is falsey or invalid (not a string)?\n\nFor my you have to raise a kind of _InvalidArgumentException_\n. I already made a fix on the master branch https://github.com/angular-ui/ui-utils/commit/0898dbb76b2d16317a20e1c548c7fe91789a9f04.\nCan you pull it, fix the conflicts and push again ? \n. Oops GitHub doesn't like git-rebase....\nHere is the previous comments https://github.com/angular-ui/ui-utils/commit/38a6150505f0462111a0bd74895d1be44fbe7b90#commitcomment-3763904\n. Alright actually there is not benefit from it...\nI was really curious about the last infinite loop that it makes so I started playing around with the module...\nI'm deleting this branch now... \n. Yeah it's using karma@0.8.8 due to [grunt-karma@0.4.5 line 938](https://travis-ci.org/angular-ui/ui-utils/builds/9749897#L938)\n. Hi\nNo need to go to the angular-ui/angular-ui-docs for a karma problem. angular-ui/angular-ui-docs is just there for the doc no testing there.\n\nIf you want to update the karma version of the repo:\n\n``` sh\n# Remove the previous installation\nnpm uninstall grunt-karma --save-dev\n\n# Install the new one\nnpm install grunt-karma --save-dev\n\n# Make a new \"test/karma.conf.js\"\n./node_modules/.bin/karma init test/karma.conf.js\n```\n\nThen add the needed files in `karma.conf.js`. For example for _UI.Utils_\n\n``` js\n[...]\nfiles: [\n  'bower_components/jquery/jquery.js',\n  'bower_components/angular/angular.js',\n  'bower_components/angular-mocks/angular-mocks.js',\n  'modules/*/*.js',\n  'modules/*/test/*Spec.js'\n],\n[...]\n```\n\nThen run the good old `grunt` if it works, update your PR\n. Hi @mhworth \nDid you make any progress with your scrollpoint ?\n. No news @mhworth. I end up making [a custom version](http://plnkr.co/6XUAgJ)\n. > Is this intended behavior? If so, isn't that not good for critical bugfixes that need to be pushed to peoples bower components?\n> If it's unintended behavior, I presume it's because bower's version probably just looks for the first commit of a version it is looking for.\n\nYes but you can ask bower to directly follow the master. So if you want the last version use \n\n```\nbower install angular-ui-utils\\#master\n```\n. Normal versioning still works like :\n\n``` sh\nbower install angular-ui-utils\\#~0.1.0\n```\n. Merged in 1836b40d8d0ead48d0d553567caa1b0f7270f75f :)\n. @theothermattm Sure. Seems like a bug fix.\nI could directly merge it if there were tests with it...  I'm just running out of time these days...\n. Yeah thanks ! I'll update the publisher system so it links to the bower branch or the last release version.\nI'm not a nuget user and I don't know if I can publish in there from my linux machine. \n. Thanks @xt0rted \n@baad the broken link is fixed in d575856\n. Where did you find this https://github.com/angular-ui/ui-utils#highlight liink ?\n. Yep the hack might be to add a **#** like [http://angular-ui.github.io/ui-utils/#/**#**highlight](http://angular-ui.github.io/ui-utils/#/#highlight)\n\nCan you reopen this issue on https://github.com/angular-ui/angular-ui.github.com/issues  ?\nI'll take care of it\n. It's because the `scroll` module sources aren't named like the other... so the `grunt dist` doesn't find it. I might just rename them from : `ui-scroll.js` to `scroll.js`\nNo problem with that ? @ProLoser @mfeingold \n. Awesome !\nNow that the releases are automatically built you just need to make sure that your tests pass.\nBriefly\n- `grunt serve` is your friend.\n- `grunt dist` must ngmin and uglify your sources to the `dist/sub/<module_name>` directory\n\nIt would be great if you can merge your _ui-scroll.js_ and _ui-scroll-jqlite.js_.\n\nI'll create a angular-1.2.x branch\nPull it and make your PR to it. Let me know if you have any question/suggestion. \n. Yeah no problem merging it was a bad idea.\n\nI'm just thinking about making a separate \"jqlite-extra\" repo. I might call it `jqLite Plus` so we can access to more util functions of jquery. Still it has to be modulable so you can add only the extra functions that you need like : \n\n``` js\nangular.module('yourModule', ['jqLite+find', 'jqLite+before']);\n```\n\nWhat you think @mfeingold ?\n. Yo @mfeingold it feels legit for me to drop jqliteExtra out of UI.Scroll. It's defiantly an external dependency for the directive. I actually did start a little pop with my [jqLitePlus](https://github.com/douglasduteil/jqLitePlus) I told you about 3 mouths ago...\n. Thanks\nFixed in d575856e9ce575d40015d532d8a3684521f5d26d\n. Sorry but this problem is due to the global [angular ui publisher system](https://github.com/angular-ui/angular-ui-publisher)\n. I'm updating it \n. Yah ok I'm merging it. BTW It would be better to rethink the way it is. I want to push forward some kind of waypoint approach. See this issue https://github.com/angular-ui/ui-utils/pull/123 \nSadly I can't go on for now so it will wait for me... \n\n@just-boris > Sorry for the long wait.\n. Actually the very best is using a `bower.json` file like :\n\n``` json\n{\n  \"name\": \"myBowerModule\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"angular-ui-utils-mask\": \"angular-ui-utils#bower-mask\",\n    \"angular-ui-utils-format\": \"angular-ui-utils#bower-format\"\n  }\n}\n```\n\nYou get no conflict form that cause each module is namespaced :+1: \nWhat you think ?\n. Sorry guys ! My fault... Seems like the publishing fails a bit due to the git version on Travis.\n. ### K The demo page is back\n. Thanks\n. True we might remove the global 'use strict' rule in the jshint and use the concatenation task to add a closure and a 'use strict' for each generated file in the dist folder. \n\nFeel free to do it if you have the time for it\n. @kkataev Yeah this can be a temporary solution.\nI'm still waiting for @mfeingold to take a decision about the `ui-scroll-jqlite.js` file.\nAnyway I still feel like renaming the `ui-scroll.js` to `scroll.js` will be necessary at least to promote cohesion in the sources.\n. @mfeingold yeap I'll be on it tonight ;)\n. K it's cool I'm merging it\n. Duplicate #236 \n. Woops sorry @mfeingold I didn't see the notification. I'm definitely agree with @joshkurz it's needed and we have to move forward !  @dukehoops I guess that we can publish a path with a big breaking change warning if the code, the tests and the docs are up to date...\n. :+1:  Good catch.Thanks\n. # ?\n\n> I get an error that there is no package.json.\n\nnpm problem maybe ? try `npm init`\n\n> I added the package.json file from the repo.\n\nYou're not suppose to use our package.json if it's not to work on this project.\n\n> Then after running \"grunt\" I get an error that there is no grunt file.\n\nYou're not supporse to use our grunt tasks in yours projects  if it's not to work on this project.\n\n> \"bower install angular-ui-utils#bower-mask\"\n\nWill install the last production version of UI.Mask in your bower_components/angular-ui-utils folder\n. Sorry my zsh globbing is to blame... I'll be patching this now...\n. DONE https://github.com/angular-ui/ui-utils/commit/95697b60ddb7f27dccb8cd3019a20bb72047a78a\nThanks @fauverism @getsetbro \n. Hi @PowerKiKi  good to see that you're still active on this repo.\nThe current build system is the most flexible in my opinion.\n\n<br>\n\n@NickTomlin Adding two modules is farly easy with manual namespacing on the bower.json\n\n``` js\n{\n  \"name\": \"myBowerModule\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"angular-ui-utils-mask\": \"angular-ui-utils#bower-mask\",\n    \"angular-ui-utils-format\": \"angular-ui-utils#bower-format\"\n  }\n}\n```\n\nFollowing https://github.com/angular-ui/ui-utils/issues/180#issuecomment-34321874\n\n<br>\n\n@chrisnicola @csmosx Using all the ui-utils sub-modules at ones is the rare case for me. But you cab use the default release for it. `bower install angular-ui-utils`\n\n<br>\n\nPS: @PowerKiKi It might be good to add those info to the README.md what you think ?\nPS: @PowerKiKi To work correctly when you want to release a new version you're suppose to tag the actual sources on the master with a tag `srcX.Y.Z` (see https://github.com/angular-ui/ui-utils/releases/tag/src0.1.1) then Travis it doing the rest (see https://github.com/angular-ui/ui-utils/releases/tag/v0.1.1) ?\n. Yeap @mfeingold I'm the one.\n\n> it still shows up as ng-scroll rather than ui-scroll\n\nStrange 'cause the [gh-pages builded index.html](https://github.com/angular-ui/ui-utils/blob/9c3fa1a431a057be20707c627bb4026fb94a3b79/index.html#L763) is correct.\n. K @mfeingold @cedriclombardot \nFixed with a [brute force commit on the gh-pages github branch](https://github.com/angular-ui/ui-utils/commit/2267950d265594a2042de942cd87cfad90e64f54)\n. @ProLoser I'm agreed with this. It's a real step forward for the future of this repo. \n\nIt's would be great to have a `ui-scrollfix` or `ui-scrollpoint` #123. I still have a poke somewhere on the internet. I might publish it someday....\n\nLet me know if you need me for the major version publishing things.\n. @PowerKiKi Do it ! :)\nAngular 2.x gonna drop one day, and we gonna need some UI.Utils.Next (or this repo will be UI.Utils.Old) !\nI think it's better to depend of `angular@^1.3` for all the directive we plan to keep on supporting in the future (see #297).\n. It's working for me\n\n``` sh\n$ zsh --version\nzsh 5.0.2 (x86_64-pc-linux-gnu)\n\n$ bower --version\n1.4.1\n\n$ bower info angular-ui-utils#bower\nbower not-cached    git://github.com/angular-ui/ui-utils.git#bower\nbower resolve       git://github.com/angular-ui/ui-utils.git#bower\nbower checkout      angular-ui-utils#bower\nbower invalid-meta  angular-ui-utils is missing \"ignore\" entry in bower.json\nbower resolved      git://github.com/angular-ui/ui-utils.git#ad95bf5ed8\n\n{\n  name: 'angular-ui-utils',\n  main: './ui-utils.js',\n  dependencies: {\n    angular: '>= 1.0.2'\n  },\n  homepage: 'https://github.com/angular-ui/ui-utils'\n}\n```\n. I think it's a zsh problem.\nTry with a `\\` before the `#`\n\n``` sh\nbower info angular-ui-utils\\#bower\n```\n. @ProLoser :tada: \n@PowerKiKi Pick me for automatic releases and Travis integration I will help ;)\n. We can publish it in the `gh-pages` branch with the other built files if\nyou want.\nHowever I don't know what you want from it...\nLe 8 mai 2013 07:59, \"Dean Sofer\" notifications@github.com a \u00e9crit :\n\n> @douglasduteil https://github.com/douglasduteil I'm assuming you took\n> out my modules/utils.js for your generator. We should probably put this\n> back somewhere if possible.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/1#issuecomment-17588010\n> .\n. Right. I didn't hear about bower changing from tags to snapshots.\nFor now, if needed, we can ask Travis to create a new branch for bower where all sources and builds are copied. And we can just tag there...\n. I'm going to help here too, if you don't mind.\n. Hum... I'm stuck :) \n\nI manage to do a lot.\n- Some clean up and unifications of Karma and Travis\n- I made a [tiny task to concat all the dependances](https://github.com/douglasduteil/ui-utils/blob/Tons_of_Damage/tasks/x_concat.js) the main module `ui.utils` \n- I hierarchized the concatenation tasks to always have the main module `ui.utils` defined at the end in the builded files.\n- I fixed the banner of the builded files.\n- And I add a _jsHint_ task... \n\nrepo : https://github.com/douglasduteil/ui-utils/tree/Tons_of_Damage\ncurrent travis : https://travis-ci.org/douglasduteil/ui-utils/builds/6837205\n\nIt is all we needed to do before dealing with the jQuery suppression here ? \n. By no dependencies. Didn't you mean that you want jQuery out of there? So `ui.utils` is in pure angular? \n. Ok my bad. \n. Hum...\nAnd you want the demos to be in the doc ? Or to BE the doc ?\n. And for you where must be the doc-generator process?\nDo we generate a doc for each repo (with a gh-page branch per repo). Or we have a one repo \u00ab to rule them all \u00bb?\n. K. I fork my last test.\nI'll try to make Travis commit on the `gh-page` branch, no opposition ? \n. Yep Travis can commit on GitHub \n. I made it.\n\nI make grunt concat all the demos `index.html` https://github.com/douglasduteil/ui-utils/blob/demos/gruntFile.js#L62\nAnd I ask Angular to include that file to the site. And with a little magic it works.\n\nTo build the Git Page, I just followed [this article](http://sleepycoders.blogspot.se/2013/03/sharing-travis-ci-generated-files.html)\nLook at the end of the Travis build : https://travis-ci.org/douglasduteil/ui-utils/builds/6885097#L738\n\nHere is a demo : http://douglasduteil.github.io/ui-utils/\n`angular-ui-utils.js` and others are available [like so](http://douglasduteil.github.io/ui-utils/build/angular-ui-utils.js).\n\nFor Bower, like we generally don't need all the repo, I propose to make Travis commit the build on a separated branch and add tags there (not on the `master` branch )\n\nWhat you think ?\n. K.\n\nPS : I'm still looking for a way to have an OAuth token accessible to the team through the [GitHub API](http://developer.github.com/v3/oauth/)...\n. Yep... Seems like it not supported yet... \nhttps://twitter.com/fernandezpablo/status/312389762017263617\n. K good news I succeed in using Git SSH authentication in Travis without divulging the deploy key...\nFollowing [this article](http://phatograph.github.io/blog/posts/2013/04/26/travis-to-the-rescue/).\n\nBefore connecting Travis to the `gh-page` branch I will try out my system on a `ft-travis-ssh` branch.\n\nStay tuned.\n. K I don't know if it's saying too much...\n[Here is the Travis build](https://travis-ci.org/douglasduteil/test-TravisSSH/builds/6923559#L46) \n[And the result branch...](https://github.com/douglasduteil/test-TravisSSH/tree/build)\n\nI don't know if it's useful to have git saying so much things...\nIf it's not I can add a `--quiet` option.\n. Yep. At the end I feel like only ui-utils needs this kind of treatment...\nThe other modules haven't  much content in fact...\n. I feel like renaming the `angular-ui-docs` repo into a `angular-ui-show-off` cause we just want to say :: \n\"See that, it works with Angular, go get the doc and use it !\"\nWhat you think ?\n. Alright.\n. Normally the branch you \u00ab pull-request \u00bb with in your fork is synchronized with your pull request here.\nSo you just have to remove the commit locally in that branch and `git push --force` for example.\n\nHowever, isn't it better to unify the coding style across our repos ?\nLike every repo will pass from _Textacular_ to _Karma_, we should have nearly the same code for this everywhere.\n\nFor the last two repos that I updated ( _ui-ace_ and _ui-codemirror_ ), I directly used _Karma_ following @petebacondarwin's code : https://github.com/angular-ui/ui-date/commit/716edcafebf05b78710dcf7ce662700d64752fc9\n. Thanks.\n\nI'll go on and find out how to get a OAuth token for the organization Angular-UI now.\n. Yep the bower `angular-ui-utils` will change. (see  https://github.com/angular-ui/ui-utils/issues/1 )\n. Wow here comes the forks problem  https://github.com/angular-ui/angular-ui-docs/issues/5\n. K forks problem fixed.\n. You opened a PR from your master branch...  (read [this](https://github.com/angular-ui/ui-utils/blob/master/CONTRIBUTING.md))\n\nCan you rebase your work ?\n. > As part of the 'break up' of AngularUI in to sub-projects, the documentation for 'ui-if' seems to have become lost\n\nsee https://github.com/angular-ui/ui-utils/issues/36\n\n> Also, I note that the links on http://angular-ui.github.io/ for each of the UI-Utils modules seem to be broken now.\n\nYes. Actually even if we link to http://angular-ui.github.io/ui-utils/#/scrollfix it wouldn't work as expected because of the deferred loading. We have to improve the [angular-ui-docs](https://github.com/angular-ui/angular-ui-docs).\n. ?\nIt's still working for me...\nI'll end up changing the all site...\n. Maybe with more grunt generation and less front-end hacks...\n. The demo page had been updated (https://github.com/angular-ui/ui-utils/pull/82 ) but there are still a lot of things to  fix...\n. K I'm working on it...\n. I made a first version http://douglasduteil.github.io/ui-codemirror/\nIt only lacks the drawer in the top bar ...\nUsing :\n- https://github.com/douglasduteil/angular-ui-docs\n- https://github.com/douglasduteil/ui-codemirror\n. Cool I'm going to upgrade everything...\n. Alright all done.\nGive me feedback !\n. Can you directly send an example that illustrate the problem (using ng-required maybe) ? \n. Thanks\n. > When fragment is falsey (empty string, undefined, etc.), it turns into an infinite loop, right?\n\nNo I don't think so (I didn't test it). The infinite loop comes when you are including a file that includes itself.\n\n> what should happen when fragment is specified, but its value is falsey or invalid (not a string)?\n\nFor my you have to raise a kind of _InvalidArgumentException_\n. I already made a fix on the master branch https://github.com/angular-ui/ui-utils/commit/0898dbb76b2d16317a20e1c548c7fe91789a9f04.\nCan you pull it, fix the conflicts and push again ? \n. Oops GitHub doesn't like git-rebase....\nHere is the previous comments https://github.com/angular-ui/ui-utils/commit/38a6150505f0462111a0bd74895d1be44fbe7b90#commitcomment-3763904\n. Alright actually there is not benefit from it...\nI was really curious about the last infinite loop that it makes so I started playing around with the module...\nI'm deleting this branch now... \n. Yeah it's using karma@0.8.8 due to [grunt-karma@0.4.5 line 938](https://travis-ci.org/angular-ui/ui-utils/builds/9749897#L938)\n. Hi\nNo need to go to the angular-ui/angular-ui-docs for a karma problem. angular-ui/angular-ui-docs is just there for the doc no testing there.\n\nIf you want to update the karma version of the repo:\n\n``` sh\n# Remove the previous installation\nnpm uninstall grunt-karma --save-dev\n\n# Install the new one\nnpm install grunt-karma --save-dev\n\n# Make a new \"test/karma.conf.js\"\n./node_modules/.bin/karma init test/karma.conf.js\n```\n\nThen add the needed files in `karma.conf.js`. For example for _UI.Utils_\n\n``` js\n[...]\nfiles: [\n  'bower_components/jquery/jquery.js',\n  'bower_components/angular/angular.js',\n  'bower_components/angular-mocks/angular-mocks.js',\n  'modules/*/*.js',\n  'modules/*/test/*Spec.js'\n],\n[...]\n```\n\nThen run the good old `grunt` if it works, update your PR\n. Hi @mhworth \nDid you make any progress with your scrollpoint ?\n. No news @mhworth. I end up making [a custom version](http://plnkr.co/6XUAgJ)\n. > Is this intended behavior? If so, isn't that not good for critical bugfixes that need to be pushed to peoples bower components?\n> If it's unintended behavior, I presume it's because bower's version probably just looks for the first commit of a version it is looking for.\n\nYes but you can ask bower to directly follow the master. So if you want the last version use \n\n```\nbower install angular-ui-utils\\#master\n```\n. Normal versioning still works like :\n\n``` sh\nbower install angular-ui-utils\\#~0.1.0\n```\n. Merged in 1836b40d8d0ead48d0d553567caa1b0f7270f75f :)\n. @theothermattm Sure. Seems like a bug fix.\nI could directly merge it if there were tests with it...  I'm just running out of time these days...\n. Yeah thanks ! I'll update the publisher system so it links to the bower branch or the last release version.\nI'm not a nuget user and I don't know if I can publish in there from my linux machine. \n. Thanks @xt0rted \n@baad the broken link is fixed in d575856\n. Where did you find this https://github.com/angular-ui/ui-utils#highlight liink ?\n. Yep the hack might be to add a **#** like [http://angular-ui.github.io/ui-utils/#/**#**highlight](http://angular-ui.github.io/ui-utils/#/#highlight)\n\nCan you reopen this issue on https://github.com/angular-ui/angular-ui.github.com/issues  ?\nI'll take care of it\n. It's because the `scroll` module sources aren't named like the other... so the `grunt dist` doesn't find it. I might just rename them from : `ui-scroll.js` to `scroll.js`\nNo problem with that ? @ProLoser @mfeingold \n. Awesome !\nNow that the releases are automatically built you just need to make sure that your tests pass.\nBriefly\n- `grunt serve` is your friend.\n- `grunt dist` must ngmin and uglify your sources to the `dist/sub/<module_name>` directory\n\nIt would be great if you can merge your _ui-scroll.js_ and _ui-scroll-jqlite.js_.\n\nI'll create a angular-1.2.x branch\nPull it and make your PR to it. Let me know if you have any question/suggestion. \n. Yeah no problem merging it was a bad idea.\n\nI'm just thinking about making a separate \"jqlite-extra\" repo. I might call it `jqLite Plus` so we can access to more util functions of jquery. Still it has to be modulable so you can add only the extra functions that you need like : \n\n``` js\nangular.module('yourModule', ['jqLite+find', 'jqLite+before']);\n```\n\nWhat you think @mfeingold ?\n. Yo @mfeingold it feels legit for me to drop jqliteExtra out of UI.Scroll. It's defiantly an external dependency for the directive. I actually did start a little pop with my [jqLitePlus](https://github.com/douglasduteil/jqLitePlus) I told you about 3 mouths ago...\n. Thanks\nFixed in d575856e9ce575d40015d532d8a3684521f5d26d\n. Sorry but this problem is due to the global [angular ui publisher system](https://github.com/angular-ui/angular-ui-publisher)\n. I'm updating it \n. Yah ok I'm merging it. BTW It would be better to rethink the way it is. I want to push forward some kind of waypoint approach. See this issue https://github.com/angular-ui/ui-utils/pull/123 \nSadly I can't go on for now so it will wait for me... \n\n@just-boris > Sorry for the long wait.\n. Actually the very best is using a `bower.json` file like :\n\n``` json\n{\n  \"name\": \"myBowerModule\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"angular-ui-utils-mask\": \"angular-ui-utils#bower-mask\",\n    \"angular-ui-utils-format\": \"angular-ui-utils#bower-format\"\n  }\n}\n```\n\nYou get no conflict form that cause each module is namespaced :+1: \nWhat you think ?\n. Sorry guys ! My fault... Seems like the publishing fails a bit due to the git version on Travis.\n. ### K The demo page is back\n. Thanks\n. True we might remove the global 'use strict' rule in the jshint and use the concatenation task to add a closure and a 'use strict' for each generated file in the dist folder. \n\nFeel free to do it if you have the time for it\n. @kkataev Yeah this can be a temporary solution.\nI'm still waiting for @mfeingold to take a decision about the `ui-scroll-jqlite.js` file.\nAnyway I still feel like renaming the `ui-scroll.js` to `scroll.js` will be necessary at least to promote cohesion in the sources.\n. @mfeingold yeap I'll be on it tonight ;)\n. K it's cool I'm merging it\n. Duplicate #236 \n. Woops sorry @mfeingold I didn't see the notification. I'm definitely agree with @joshkurz it's needed and we have to move forward !  @dukehoops I guess that we can publish a path with a big breaking change warning if the code, the tests and the docs are up to date...\n. :+1:  Good catch.Thanks\n. # ?\n\n> I get an error that there is no package.json.\n\nnpm problem maybe ? try `npm init`\n\n> I added the package.json file from the repo.\n\nYou're not suppose to use our package.json if it's not to work on this project.\n\n> Then after running \"grunt\" I get an error that there is no grunt file.\n\nYou're not supporse to use our grunt tasks in yours projects  if it's not to work on this project.\n\n> \"bower install angular-ui-utils#bower-mask\"\n\nWill install the last production version of UI.Mask in your bower_components/angular-ui-utils folder\n. Sorry my zsh globbing is to blame... I'll be patching this now...\n. DONE https://github.com/angular-ui/ui-utils/commit/95697b60ddb7f27dccb8cd3019a20bb72047a78a\nThanks @fauverism @getsetbro \n. Hi @PowerKiKi  good to see that you're still active on this repo.\nThe current build system is the most flexible in my opinion.\n\n<br>\n\n@NickTomlin Adding two modules is farly easy with manual namespacing on the bower.json\n\n``` js\n{\n  \"name\": \"myBowerModule\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"angular-ui-utils-mask\": \"angular-ui-utils#bower-mask\",\n    \"angular-ui-utils-format\": \"angular-ui-utils#bower-format\"\n  }\n}\n```\n\nFollowing https://github.com/angular-ui/ui-utils/issues/180#issuecomment-34321874\n\n<br>\n\n@chrisnicola @csmosx Using all the ui-utils sub-modules at ones is the rare case for me. But you cab use the default release for it. `bower install angular-ui-utils`\n\n<br>\n\nPS: @PowerKiKi It might be good to add those info to the README.md what you think ?\nPS: @PowerKiKi To work correctly when you want to release a new version you're suppose to tag the actual sources on the master with a tag `srcX.Y.Z` (see https://github.com/angular-ui/ui-utils/releases/tag/src0.1.1) then Travis it doing the rest (see https://github.com/angular-ui/ui-utils/releases/tag/v0.1.1) ?\n. Yeap @mfeingold I'm the one.\n\n> it still shows up as ng-scroll rather than ui-scroll\n\nStrange 'cause the [gh-pages builded index.html](https://github.com/angular-ui/ui-utils/blob/9c3fa1a431a057be20707c627bb4026fb94a3b79/index.html#L763) is correct.\n. K @mfeingold @cedriclombardot \nFixed with a [brute force commit on the gh-pages github branch](https://github.com/angular-ui/ui-utils/commit/2267950d265594a2042de942cd87cfad90e64f54)\n. @ProLoser I'm agreed with this. It's a real step forward for the future of this repo. \n\nIt's would be great to have a `ui-scrollfix` or `ui-scrollpoint` #123. I still have a poke somewhere on the internet. I might publish it someday....\n\nLet me know if you need me for the major version publishing things.\n. @PowerKiKi Do it ! :)\nAngular 2.x gonna drop one day, and we gonna need some UI.Utils.Next (or this repo will be UI.Utils.Old) !\nI think it's better to depend of `angular@^1.3` for all the directive we plan to keep on supporting in the future (see #297).\n. It's working for me\n\n``` sh\n$ zsh --version\nzsh 5.0.2 (x86_64-pc-linux-gnu)\n\n$ bower --version\n1.4.1\n\n$ bower info angular-ui-utils#bower\nbower not-cached    git://github.com/angular-ui/ui-utils.git#bower\nbower resolve       git://github.com/angular-ui/ui-utils.git#bower\nbower checkout      angular-ui-utils#bower\nbower invalid-meta  angular-ui-utils is missing \"ignore\" entry in bower.json\nbower resolved      git://github.com/angular-ui/ui-utils.git#ad95bf5ed8\n\n{\n  name: 'angular-ui-utils',\n  main: './ui-utils.js',\n  dependencies: {\n    angular: '>= 1.0.2'\n  },\n  homepage: 'https://github.com/angular-ui/ui-utils'\n}\n```\n. I think it's a zsh problem.\nTry with a `\\` before the `#`\n\n``` sh\nbower info angular-ui-utils\\#bower\n```\n. @ProLoser :tada: \n@PowerKiKi Pick me for automatic releases and Travis integration I will help ;)\n. ",
    "adambezemek": "@ProLoser @douglasduteil I'm a little confused by the conversation here, but looking at the commits and running the code locally it looks like if you run <code>grunt build</code> that the modules get bundled up into <code>out/build/angular-ui-utils-*.js</code> correctly and that the <code>modules/utils.js</code> file is generated. Can we include these outputs in the repository so that if you install the project via bower that you don't have to run that build locally?\n. @ProLoser @douglasduteil I'm a little confused by the conversation here, but looking at the commits and running the code locally it looks like if you run <code>grunt build</code> that the modules get bundled up into <code>out/build/angular-ui-utils-*.js</code> correctly and that the <code>modules/utils.js</code> file is generated. Can we include these outputs in the repository so that if you install the project via bower that you don't have to run that build locally?\n. ",
    "shaungrady": "I agree. This directive seems to no longer be very useful.\n. Sounds good. And yes, no more dependencies.\n. #### Using RegExp as a Mask\n\nThere are a couple more key components than just the placeholder that have to be processed from the mask.\n- `maskCaretMap` - An array of integers of positions within the input that the user is permitted to place the caret\u2014if the caret is placed in an invalid position, the caret gets moved to the closest valid position (moved backwards if clicking into the input or deleting characters, moved forward if typing or otherwise adding content to the input).\n- `maskPatterns` - An array of single-character-matching RegExp patterns. This is the backbone of the directive that does all the work. It's easiest to explain by referencing the line number of the forEach that unmasks the value: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L144\n\nGiven a mask of `(999) 999-9999`, `maskCaretMap` looks like `[1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14]` and  `maskPatterns` looks like `[/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]`.\n\nWhat `maskPatterns` really powers is stripping out characters that don't fit the mask. When a user types a character, the directive unmasks the input value to get the raw value and strip out any chars that don't match the mask, then remasks it to put back in the placeholder components. So if a user types a character that doesn't get matched by one of the RegExp patterns in `maskPatterns`, it gets stripped out before the user ever sees it appear in the input (except older IEs).\n\nNow, the biggest hurdle is allowing a user to specify a RegExp-based mask is preserving that as-you-type masking and stripping of invalid chars. You still need some way to check on a character-by-character basis if that char is valid or not. Parsing a RegExp pattern, I'm sure you'll agree, would be... unfeasible.\n\nI did a lot of thinking about this when I was in the process of rewriting the directive, and the closest I got to a solution was this: http://plnkr.co/edit/qKCgHmJqOg7iXczmup5i?p=preview Click on the `MM: __ DD: __ YYYY: ____` mask and try entering a month or day of 44 or 99 or something else that's invalid. The mask being passed to the plugin looks like `[\"MM: \", /[01]/, /\\d/, \" DD: \", /[0-3]/, /\\d/, \" YYYY: \", /[12]/, /[90]/, /\\d/, /\\d/]`, and you can see the code to support that style of mask (commented out) here: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L174\n\nHowever, as I further considered this options, I began to ask myself, \"at what point does this begin to overreach it's intended purpose?\" Masking is not intended to be input validation\u2014there are plenty of ways to validate inputs, and shoehorning that into a masking directive feels wrong. There isn't a clear line between the two, but I think the real intent behind input masking is to assist the user in entering the correct information the first time without confusion, possibly before a proper validator tells them it's wrong. I think this is the right decision, but I think there will always be those who will want the masking directive to do comprehensive validation on top of basic masking.\n\n#### Optional Character Groups\n\nThis is interesting and I had never thought of that type of functionality. My first blush impression is that allowing that in the middle of a mask would result is some strange and undesirable UX behavior. I can see it being more appropriate for the end of a mask, such as for a phone extension. But, the big question is, how do you communicate to a user that one portion of the mask is optional and the other is not? In the case of phone extensions, I think you'd be better served by breaking it into two input fields, one for the phone, the other for the extension.\n\nAre there any solid use cases for optional character groups out there? I'd like to think about this more, but I can't think of when using two inputs or swapping the mask wouldn't be a better solution.\n\n#### Switch Case Functionality\n\nThis would be better accomplished in the controller. Set the mask in the scope, put a `$watch` on the `NgModelController.$viewValue` property of the input and change the mask based on the `$viewValue`.\n\n#### Func-Based Mask\n\nI don't understand, can you clarify this please?\n. Ah, option character group makes sense in the context of https://github.com/angular-ui/ui-utils/pull/21#issuecomment-17588271\n. It's not possible, no. That's not how the directive functions, at a fundamental level.\n. Looks good to me\n. Only comment I have is about the additional maskDefinitions\u2014I can see it being common for someone to have a phone mask of \"+1 (999) 999-9999\". Adding 1 as a definition forces you to specify your own definition. Granted, this is an issue with American bias. Perhaps, though, this calls for the functionality to be added to escape a definition character.\n. There's a fine line that exists between masking and validation. When you start talking about dates, that's when it starts to cross over to validation\u2014something this directive isn't designed to handle. When you start offering those kinds of rudimentary validation use-cases to users, they're going to wonder why it's not more sophisticated (e.g., why it only works on individual characters). There are many better, purpose-built solutions for doing client-side validation of input data.\n\nThat aside, I agree that it would be nice to allow the user to specify that the model reflect the formatted view value. As for \"fixed\" non-mask characters, I think \"escaping\" is a term more would be familiar with, and I'd advocate for a simpler, more familiar backslash (\\) escaping of a mask character.\n. You can access the viewValue of any form input by doing the following:\n\nHTML:\n\n``` HTML\n<form name=\"demo\">\n  <input name=\"i_am_masked\" ng-model=\"phoneNumber\" ui-mask=\"(999) 999-9999\">\n</form>\n```\n\nController:\n\n``` javascript\n$scope.$watch('phoneNumber', function() {\n  // Whenever i_am_masked has a valid value that satisfies the mask definition, uiMask\n  // will set the value of \"phoneNumber\" to the unmasked (unformatted) value of the input.\n  // So that's the best time to get the $viewValue of the input from the ngModelController.\n  $scope.formattedPhoneNumber = $scope.demo.i_am_masked.$viewValue;\n})\n```\n. Broadcasting allows listening throughout the app without worrying about unbinding on scope destruction or unbinding another scope's listener due to lack of event bind namespacing in jqLite. But I agree, easy enough to DIY. Window visibility events less so, but also less likely to be needed. \n. This looks good to me, thanks for contributing! @ProLoser do you want to do the merge or shall I?\n. Almost forgot, could you also write a test for this, please, @sjbarker ?\n. Great, thank you @sjbarker !\n. Yes, please open an issue detailing your thoughts and concerns; starting the discussion in a closed PR won't get it much visibility.\n. I agree. This directive seems to no longer be very useful.\n. Sounds good. And yes, no more dependencies.\n. #### Using RegExp as a Mask\n\nThere are a couple more key components than just the placeholder that have to be processed from the mask.\n- `maskCaretMap` - An array of integers of positions within the input that the user is permitted to place the caret\u2014if the caret is placed in an invalid position, the caret gets moved to the closest valid position (moved backwards if clicking into the input or deleting characters, moved forward if typing or otherwise adding content to the input).\n- `maskPatterns` - An array of single-character-matching RegExp patterns. This is the backbone of the directive that does all the work. It's easiest to explain by referencing the line number of the forEach that unmasks the value: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L144\n\nGiven a mask of `(999) 999-9999`, `maskCaretMap` looks like `[1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14]` and  `maskPatterns` looks like `[/\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/, /\\d/]`.\n\nWhat `maskPatterns` really powers is stripping out characters that don't fit the mask. When a user types a character, the directive unmasks the input value to get the raw value and strip out any chars that don't match the mask, then remasks it to put back in the placeholder components. So if a user types a character that doesn't get matched by one of the RegExp patterns in `maskPatterns`, it gets stripped out before the user ever sees it appear in the input (except older IEs).\n\nNow, the biggest hurdle is allowing a user to specify a RegExp-based mask is preserving that as-you-type masking and stripping of invalid chars. You still need some way to check on a character-by-character basis if that char is valid or not. Parsing a RegExp pattern, I'm sure you'll agree, would be... unfeasible.\n\nI did a lot of thinking about this when I was in the process of rewriting the directive, and the closest I got to a solution was this: http://plnkr.co/edit/qKCgHmJqOg7iXczmup5i?p=preview Click on the `MM: __ DD: __ YYYY: ____` mask and try entering a month or day of 44 or 99 or something else that's invalid. The mask being passed to the plugin looks like `[\"MM: \", /[01]/, /\\d/, \" DD: \", /[0-3]/, /\\d/, \" YYYY: \", /[12]/, /[90]/, /\\d/, /\\d/]`, and you can see the code to support that style of mask (commented out) here: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L174\n\nHowever, as I further considered this options, I began to ask myself, \"at what point does this begin to overreach it's intended purpose?\" Masking is not intended to be input validation\u2014there are plenty of ways to validate inputs, and shoehorning that into a masking directive feels wrong. There isn't a clear line between the two, but I think the real intent behind input masking is to assist the user in entering the correct information the first time without confusion, possibly before a proper validator tells them it's wrong. I think this is the right decision, but I think there will always be those who will want the masking directive to do comprehensive validation on top of basic masking.\n\n#### Optional Character Groups\n\nThis is interesting and I had never thought of that type of functionality. My first blush impression is that allowing that in the middle of a mask would result is some strange and undesirable UX behavior. I can see it being more appropriate for the end of a mask, such as for a phone extension. But, the big question is, how do you communicate to a user that one portion of the mask is optional and the other is not? In the case of phone extensions, I think you'd be better served by breaking it into two input fields, one for the phone, the other for the extension.\n\nAre there any solid use cases for optional character groups out there? I'd like to think about this more, but I can't think of when using two inputs or swapping the mask wouldn't be a better solution.\n\n#### Switch Case Functionality\n\nThis would be better accomplished in the controller. Set the mask in the scope, put a `$watch` on the `NgModelController.$viewValue` property of the input and change the mask based on the `$viewValue`.\n\n#### Func-Based Mask\n\nI don't understand, can you clarify this please?\n. Ah, option character group makes sense in the context of https://github.com/angular-ui/ui-utils/pull/21#issuecomment-17588271\n. It's not possible, no. That's not how the directive functions, at a fundamental level.\n. Looks good to me\n. Only comment I have is about the additional maskDefinitions\u2014I can see it being common for someone to have a phone mask of \"+1 (999) 999-9999\". Adding 1 as a definition forces you to specify your own definition. Granted, this is an issue with American bias. Perhaps, though, this calls for the functionality to be added to escape a definition character.\n. There's a fine line that exists between masking and validation. When you start talking about dates, that's when it starts to cross over to validation\u2014something this directive isn't designed to handle. When you start offering those kinds of rudimentary validation use-cases to users, they're going to wonder why it's not more sophisticated (e.g., why it only works on individual characters). There are many better, purpose-built solutions for doing client-side validation of input data.\n\nThat aside, I agree that it would be nice to allow the user to specify that the model reflect the formatted view value. As for \"fixed\" non-mask characters, I think \"escaping\" is a term more would be familiar with, and I'd advocate for a simpler, more familiar backslash (\\) escaping of a mask character.\n. You can access the viewValue of any form input by doing the following:\n\nHTML:\n\n``` HTML\n<form name=\"demo\">\n  <input name=\"i_am_masked\" ng-model=\"phoneNumber\" ui-mask=\"(999) 999-9999\">\n</form>\n```\n\nController:\n\n``` javascript\n$scope.$watch('phoneNumber', function() {\n  // Whenever i_am_masked has a valid value that satisfies the mask definition, uiMask\n  // will set the value of \"phoneNumber\" to the unmasked (unformatted) value of the input.\n  // So that's the best time to get the $viewValue of the input from the ngModelController.\n  $scope.formattedPhoneNumber = $scope.demo.i_am_masked.$viewValue;\n})\n```\n. Broadcasting allows listening throughout the app without worrying about unbinding on scope destruction or unbinding another scope's listener due to lack of event bind namespacing in jqLite. But I agree, easy enough to DIY. Window visibility events less so, but also less likely to be needed. \n. This looks good to me, thanks for contributing! @ProLoser do you want to do the merge or shall I?\n. Almost forgot, could you also write a test for this, please, @sjbarker ?\n. Great, thank you @sjbarker !\n. Yes, please open an issue detailing your thoughts and concerns; starting the discussion in a closed PR won't get it much visibility.\n. ",
    "dturkenk": "There's no grunt setup for testing, so the port is untested. If someone doesn't get around to it first, I'll try to port the test setup from the angular-ui over the next few days.\n. Just letting you know I'm still working on this. Having issues with Karma on Windows.\n. It's not launching the browsers - which seems to be a known issue [https://github.com/karma-runner/karma/issues/369]\n\nThe workarounds in that issue didn't seem to solve the problem on first attempt, but I haven't had time to dig into it yet. Possibly will tonight.\n. Sorry for the delay again.. Been way too busy lately.\n\nThe tests are working now so I'm progressing. Making sure the most recent tests match how the browser handles key codes.\n. OK, I see the issue now. There are some missing test cases around supporting the numeric keycodes for the letters. \n\nI'll add those and then normalize the registrations.\n. I apologize for the crappy use of git - I'm still learning the intricacies and it's just different enough from Mercurial to cause me issues.\n. There's no grunt setup for testing, so the port is untested. If someone doesn't get around to it first, I'll try to port the test setup from the angular-ui over the next few days.\n. Just letting you know I'm still working on this. Having issues with Karma on Windows.\n. It's not launching the browsers - which seems to be a known issue [https://github.com/karma-runner/karma/issues/369]\n\nThe workarounds in that issue didn't seem to solve the problem on first attempt, but I haven't had time to dig into it yet. Possibly will tonight.\n. Sorry for the delay again.. Been way too busy lately.\n\nThe tests are working now so I'm progressing. Making sure the most recent tests match how the browser handles key codes.\n. OK, I see the issue now. There are some missing test cases around supporting the numeric keycodes for the letters. \n\nI'll add those and then normalize the registrations.\n. I apologize for the crappy use of git - I'm still learning the intricacies and it's just different enough from Mercurial to cause me issues.\n. ",
    "PowerKiKi": "This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing since there is a workaround\n. This is project is now obsolete, please continue the discussion, if need be, over there: https://github.com/angular-ui/ui-mask so that the project maintainer can pitch in too.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Fixed in #164\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @Voxelot please submit a PR with the documentation that would fit your need. I will merge it.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. If you rebase it on master, I'll merge it\n. Solved in #331\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @marklagendijk if you rebase this on master, i'll merge it\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. PR #353 is trying to solve this issue\n. @AndrewEastwood when somebody care enough to take time to write tests and documentation for #353 \n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. Closing since @inolasco gave a solution\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Hey @mfeingold, @dhilt. What is the relationship between ui-scroll in this repository and https://github.com/Hill30/NGScroller ? are they some kind of mirrors ? or is one of them outdated ?\n\nShould issues from here moved over there ?\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This lacks tests and documentation to be merged.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing as duplicates of https://github.com/angular-ui/ui-utils/issues/181\n. If we were to change that, what would happen for existing project using the current structure ?\n. I am not sure who could decide on this, since it could impact a lot of people...\n\nBut it would take some work to adapt build system (Travis does most of the work). So I guess this definitely won't happen unless one of you submit a PR.\n\n@ProLoser, @douglasduteil you seem the be the two with the most contributions in this repository. Any opinion on this subject ?\n. I wouldn't oppose splitting project (and dropping obsolete one). ui-scroll is already [half splitted](https://github.com/angular-ui/ui-utils/issues/232#issuecomment-77638569). And I have to agree that while the automated build system is awesome, the branches generated are quite confusing for newcomers.\n. UI.Utils modules was split in individuals repositories. Those repositories are now published on npm and bower. However not all modules were considered interesting enough to be kept. See the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @cranesandcaff if you are able to create a plunkr to demonstrate the issue, you'll have more change to get somebody involved to fix it.\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. I am not 100% sure what you mean with angular versions. But since we do have a [separate repository](https://github.com/angular-ui/ui-mask) now, there is no problem to change requirement for ui-mask. Say if we need angular 1.2, that would be easy as pie. But we should be sure of what needs to be done first...\n. @jwebcat, yes [v0.2.2](https://github.com/angular-ui/ui-utils/releases/tag/v0.2.2) was just released.\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing for now, re-open if it happens again\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing because reported as working\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @terite, if you are able to rebase, I'll merge this\n. Thanks !\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @alexgoroshko this issue is closed and the repository deprecated. Please consider contributing to https://github.com/angular-ui/ui-mask instead, ideally with a PR.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Dupes of #142\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Dupes of #142\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. closed by #415\n. Would any of you be willing to create a PR to update the CHANGELOG ? That would be a nice step toward a release...\n. Nevermind, I realised that `grunt changelog` was all I needed. v0.2.0 is out !\n\nHappy New Year !\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing as duplicates\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing as suggested\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Thanks !\n. Duplicated by #333\n. Fixed in #164\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. I have zero experience with publishing to npm, but if somebody submit a PR, or at least concise explanation, I would merge it.\n. UI.Utils modules was split in individuals repositories. Those repositories are now published on npm and bower. However not all modules were considered interesting enough to be kept. See the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @franky-continu see that post and following: https://github.com/angular-ui/ui-utils/pull/406#issuecomment-117404004\n. @franky-continu https://github.com/angular-ui/ui-scroll\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Hey, could you update `modules/mask/demo/index.html` to demonstrate how this work please ? then I will merge\n. @xtreemrage, when somebody provide documentation and tests for it, it will be much more likely to be merged\n. Please consider re-submitting to https://github.com/angular-ui/ui-mask with valid tests\n. @lstone this solution is officially implemented in latest version of ui-mask available on https://github.com/angular-ui/ui-mask\n. According to source code, you can't: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L6-L9\n\nYou better use a `<input type=\"email\">`\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Solved in #361\n. \uac10\uc0ac\ud569\ub2c8\ub2e4~\n. Already implemented in https://github.com/angular-ui/ui-utils/commit/25be316144593e00a7d897633d43be25c0f2b189\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. With current code it is not possible. Maybe you could try to surround everything with `ng-if` or `ng-switch` and select the carde type beforehand\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. https://github.com/angular-ui/ui-utils/blob/master/modules/uploader/README.md\n\nIf you think more documentation would be appropriate, please open a PR.\n. @realtica as far as I know it was never part of http://angular-ui.github.io/ui-utils/, because it does not have a `demo/index.html` but `demo/demo.html` instead.\n\nBut I just changed that, it should appear soon...\n. When creating an issue, please provide more details. Most importantly what breaks when, and what you would expect.\n\nIn this specific case, you should probably at least mention the module concerned.\n. Submit a PR with tests and docs, then it will get a chance to get merged\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. True, looks like the changelog generation process misbehaved. Have a look at https://github.com/angular-ui/ui-utils/compare/029b428cf0bed3349750d86f2a42a2b7a5ed8c70...e913d1798e2e5b853cc366eba8cc0244bd26d30f\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Yes, see demo: http://angular-ui.github.io/ui-utils\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. We barely have enough resources to merge PR. I unfortunately don't think it is realistic to add one more thing to do.\n\nEspecially since this repository will be split very soon in multiple repositories. So the build system will change.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. This should not happen. I just tried from scratch and everything builds fine with the following tools:\n\n```\nuser@machine:/tmp/ui-utils$ npm --version\n1.4.28\nuser@machine:/tmp/ui-utils$ bower --version\n1.3.12\nuser@machine:/tmp/ui-utils$ grunt --version\ngrunt-cli v0.1.13\ngrunt v0.4.5\n```\n\nAlso see the entire log there http://pastebin.com/0E50xXSa\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Wouldn't it be best to break compatibility and replace with this new directive is if it is indeed superior to currently implemented directive ? that would probably imply raising ui-utils dependency to Angular 1.3+...\n\nI am not familiar with ui-validate... what would you recommend ?\n. @ejmarino Travis build is broken, if you fix the errors (unused variables), I'll merge this PR\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Please provide more context of what is broken, why, and especially how to fix it (via a PR)\n. Thanks a lot\n. I believe what you experience is the expected behavior. If you want to clone the repository, use git, not bower.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. Anything blocking this PR ? I think it's a good initiative and should be completed as soon as we can\n. Will you be able to work on that ? or should we split the work somehow ? How did you plan things like automatic releases and Travis integration ?\n. i'm working on that ui-event, ui-indeterminate and ui-mask done. The rest is on the way...\n. @mfeingold, @dhilt, we are in the process of splitting modules into their own repositories. Since ui-scroll/NGScroller already has its own repository on https://github.com/Hill30/NGScroller, I was wondering if you would be willing to move your existing repository under angular-ui organisation ? or if you'd rather keep the current way of working with two repositories ?\n\nIf you do, then maybe you could also consider @ProLoser suggestion to rename ui-scroll into ui-virtualize ?\n. IMHO the last thing to do to close this ticket is to split/move/rename ui-scroll/ng-scroll/ui-virtualize. So I'm waiting to get some kind of answer from ng-scroll team.\n\nhttp://angular-ui.github.io/ was also updated to reflect the new organization of things.\n. I have no opinion regarding the name. That's entirely up to you guys, but I just wanted to mention the existence of https://github.com/kamilkp/angular-vs-repeat.\n\nAs for coffeescript, I don't mind either, as long as your build system is able to produce and publish something in JS, then that's good enough for me. I would try however to avoid two repositories. I feel if you could have everything in a single repository, that would avoid a lot of confusion (eg: useless PR against JS)\n. So @mfeingold will you be able to move repositories by yourself, or would you need help for something ? If possible it would be best to do it \"quickly\" since `ui-scroll` is not really available anymore (or at least it looks like it's not available anymore).\n. That's fine, yes. If you need help for anything, ping me.\n. I would tend to agree with @compact, you could transfer ownership and rename the existing repository if you care enough about issues. But that's entirely up to you.\n\nMeanwhile I [added ui-scroll to Angular UI](https://github.com/angular-ui/angular-ui.github.com/commit/38b5348284fa3c5e6fd2e5624e7dd686b3a3ca1e) listing (doesn't matter if you destroy/recreate repository).\n\nAlso, I consider this issue closed.\n. lol :)\n\nNevermind, glad I was able to help. I am not able to contribute much to actual code, but I since I benefited from Angular UI efforts for my own projects, it's only fair that I give something back.\n. Use of jQuery is a big no-no, resubmit a PR without jQuery if you want to merge this\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @iamdeadman see the [README for details](https://github.com/angular-ui/ui-utils#readme). ui-jq was not \"forked\" because it was not worth the effort, because of general lack of interest (from maintainers and users). Latest version is still available here via `bower install angular-ui-utils#jq-0.2.3`, but I am afraid the issue is still not solved. \n. It is not defined as mandatory in official spec: https://github.com/bower/bower.json-spec, but if you create a PR, you'll get a chance to get it merged. However beware that ui-utils was just split in independent repositories. See README for details.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. This seems to be wrong: http://stackoverflow.com/questions/23147196/is-it-angular-http-defaults-usexdomain-really-neccessary-in-cors\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Please report bug/PR to https://github.com/Hill30/NGScroller\n. I would actually try to get rid of ui-utils altogether and convince people to user dedicated repositories instead. So I wouldn't put much time in that IMHO\n. you can find the code over there: https://github.com/angular-ui/angular-ui.github.com. Beware that it just have been updated to reflect new organization (and remove deprecated things).\n- `scrollfix` was renamed as [scrollpoint](https://github.com/angular-ui/ui-scrollpoint)\n- `scroll` was suggested to be renamed as `virtualize` but since the project actually live out of AngularUI organization, we are waiting for @mfeingold and @dhilt opinion on that matter\n\nEverything else was judged not much relevant anymore. And they will be left as is unless there is a clear interest from many people. So you can still access their \"old\" version from this repository, but it is likely that they will not evolve anymore. At least not in this repository anymore.\n\nAs for demo page of each modules, they are unfortunately not directly available online anymore. But you can use a service like http://htmlpreview.github.io to view them. Please refer to http://angular-ui.github.io/\n. `ui-jq` module is still available from this repository as it used to be. If there are new patches/version of `ui-jq`, then we might be thinking about splitting it. But if there is not a strong demand, it will be left as is.\n. My last comment wasn't very clear. `ui-jq` is not maintained anymore, but you can still get the latest version available via:\n\n```\nbower install angular-ui-utils#jq-0.2.3\n```\n. Not directly related to your issue, but it made me realize that v1.0.0 and v2.0.0 were messed up. `angular-ui-utils` were split in individual modules and thus modules will be installed as dependencies from now on. This is now correctly reflected in the brand new v3.0.0.\n\nAlso I suggest you only install the required individuals modules, rather than `angular-ui-utils`. This package will become obsolete in the future and will end up being destroyed in the far future.\n. It is strongly advised to use individual modules instead of this legacy package. While we are not in a hurry to destroy this package, it will not be around foerever\n. Nothing specific to recommend, but you can still use the \"old\" one (`bower install angular-ui-utils#unique-0.2.3`). It will not disappear anytime soon. And if you realize that it actually needs some modification later one, then you can consider forking, and/or contribute to angular-ui as a standalone module.\n\nThe reason we didn't split it in a standalone module is not because the code is of poor quality, but rather because it _seems_ that it is not used by enough people to be worth the time to maintain. If there is a strong interest, it could be revived.\n. Use `bower install angular-ui-utils#keypress-0.2.3`\n. Public package was not deleted. Use `bower install angular-ui-utils#highlight-0.2.3` to get latest version release.\n. Please report issue to https://github.com/angular-ui/ui-mask\n. This project is dead. It's very unlikely that anything new will be ever released. Please migrate to [independent projects](https://github.com/angular-ui/ui-utils#includes) instead.\n. @tbranyen, you published this project to npm 2 years ago. Could you please either deprecate it, or give access to the following maintainers:\n- https://www.npmjs.com/~proloser\n- https://www.npmjs.com/~powerkik\n- https://www.npmjs.com/~nmccready\n. This project is dead, instead install directly what you need [from the list](https://github.com/angular-ui/ui-utils#includes).. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing since there is a workaround\n. This is project is now obsolete, please continue the discussion, if need be, over there: https://github.com/angular-ui/ui-mask so that the project maintainer can pitch in too.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Fixed in #164\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @Voxelot please submit a PR with the documentation that would fit your need. I will merge it.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. If you rebase it on master, I'll merge it\n. Solved in #331\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @marklagendijk if you rebase this on master, i'll merge it\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. PR #353 is trying to solve this issue\n. @AndrewEastwood when somebody care enough to take time to write tests and documentation for #353 \n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. Closing since @inolasco gave a solution\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Hey @mfeingold, @dhilt. What is the relationship between ui-scroll in this repository and https://github.com/Hill30/NGScroller ? are they some kind of mirrors ? or is one of them outdated ?\n\nShould issues from here moved over there ?\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This lacks tests and documentation to be merged.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing as duplicates of https://github.com/angular-ui/ui-utils/issues/181\n. If we were to change that, what would happen for existing project using the current structure ?\n. I am not sure who could decide on this, since it could impact a lot of people...\n\nBut it would take some work to adapt build system (Travis does most of the work). So I guess this definitely won't happen unless one of you submit a PR.\n\n@ProLoser, @douglasduteil you seem the be the two with the most contributions in this repository. Any opinion on this subject ?\n. I wouldn't oppose splitting project (and dropping obsolete one). ui-scroll is already [half splitted](https://github.com/angular-ui/ui-utils/issues/232#issuecomment-77638569). And I have to agree that while the automated build system is awesome, the branches generated are quite confusing for newcomers.\n. UI.Utils modules was split in individuals repositories. Those repositories are now published on npm and bower. However not all modules were considered interesting enough to be kept. See the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @cranesandcaff if you are able to create a plunkr to demonstrate the issue, you'll have more change to get somebody involved to fix it.\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. I am not 100% sure what you mean with angular versions. But since we do have a [separate repository](https://github.com/angular-ui/ui-mask) now, there is no problem to change requirement for ui-mask. Say if we need angular 1.2, that would be easy as pie. But we should be sure of what needs to be done first...\n. @jwebcat, yes [v0.2.2](https://github.com/angular-ui/ui-utils/releases/tag/v0.2.2) was just released.\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing for now, re-open if it happens again\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing because reported as working\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @terite, if you are able to rebase, I'll merge this\n. Thanks !\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @alexgoroshko this issue is closed and the repository deprecated. Please consider contributing to https://github.com/angular-ui/ui-mask instead, ideally with a PR.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Dupes of #142\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Dupes of #142\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. closed by #415\n. Would any of you be willing to create a PR to update the CHANGELOG ? That would be a nice step toward a release...\n. Nevermind, I realised that `grunt changelog` was all I needed. v0.2.0 is out !\n\nHappy New Year !\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing as duplicates\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Closing as suggested\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. This PR seems to be obsolete. Moreover UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on the dedicated repository.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Thanks !\n. Duplicated by #333\n. Fixed in #164\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. I have zero experience with publishing to npm, but if somebody submit a PR, or at least concise explanation, I would merge it.\n. UI.Utils modules was split in individuals repositories. Those repositories are now published on npm and bower. However not all modules were considered interesting enough to be kept. See the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @franky-continu see that post and following: https://github.com/angular-ui/ui-utils/pull/406#issuecomment-117404004\n. @franky-continu https://github.com/angular-ui/ui-scroll\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Hey, could you update `modules/mask/demo/index.html` to demonstrate how this work please ? then I will merge\n. @xtreemrage, when somebody provide documentation and tests for it, it will be much more likely to be merged\n. Please consider re-submitting to https://github.com/angular-ui/ui-mask with valid tests\n. @lstone this solution is officially implemented in latest version of ui-mask available on https://github.com/angular-ui/ui-mask\n. According to source code, you can't: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L6-L9\n\nYou better use a `<input type=\"email\">`\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Solved in #361\n. \uac10\uc0ac\ud569\ub2c8\ub2e4~\n. Already implemented in https://github.com/angular-ui/ui-utils/commit/25be316144593e00a7d897633d43be25c0f2b189\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. With current code it is not possible. Maybe you could try to surround everything with `ng-if` or `ng-switch` and select the carde type beforehand\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. https://github.com/angular-ui/ui-utils/blob/master/modules/uploader/README.md\n\nIf you think more documentation would be appropriate, please open a PR.\n. @realtica as far as I know it was never part of http://angular-ui.github.io/ui-utils/, because it does not have a `demo/index.html` but `demo/demo.html` instead.\n\nBut I just changed that, it should appear soon...\n. When creating an issue, please provide more details. Most importantly what breaks when, and what you would expect.\n\nIn this specific case, you should probably at least mention the module concerned.\n. Submit a PR with tests and docs, then it will get a chance to get merged\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. True, looks like the changelog generation process misbehaved. Have a look at https://github.com/angular-ui/ui-utils/compare/029b428cf0bed3349750d86f2a42a2b7a5ed8c70...e913d1798e2e5b853cc366eba8cc0244bd26d30f\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Yes, see demo: http://angular-ui.github.io/ui-utils\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated repository: https://github.com/angular-ui/ui-scrollpoint\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. We barely have enough resources to merge PR. I unfortunately don't think it is realistic to add one more thing to do.\n\nEspecially since this repository will be split very soon in multiple repositories. So the build system will change.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. This should not happen. I just tried from scratch and everything builds fine with the following tools:\n\n```\nuser@machine:/tmp/ui-utils$ npm --version\n1.4.28\nuser@machine:/tmp/ui-utils$ bower --version\n1.3.12\nuser@machine:/tmp/ui-utils$ grunt --version\ngrunt-cli v0.1.13\ngrunt v0.4.5\n```\n\nAlso see the entire log there http://pastebin.com/0E50xXSa\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Wouldn't it be best to break compatibility and replace with this new directive is if it is indeed superior to currently implemented directive ? that would probably imply raising ui-utils dependency to Angular 1.3+...\n\nI am not familiar with ui-validate... what would you recommend ?\n. @ejmarino Travis build is broken, if you fix the errors (unused variables), I'll merge this PR\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-validate\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Please provide more context of what is broken, why, and especially how to fix it (via a PR)\n. Thanks a lot\n. I believe what you experience is the expected behavior. If you want to clone the repository, use git, not bower.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. Anything blocking this PR ? I think it's a good initiative and should be completed as soon as we can\n. Will you be able to work on that ? or should we split the work somehow ? How did you plan things like automatic releases and Travis integration ?\n. i'm working on that ui-event, ui-indeterminate and ui-mask done. The rest is on the way...\n. @mfeingold, @dhilt, we are in the process of splitting modules into their own repositories. Since ui-scroll/NGScroller already has its own repository on https://github.com/Hill30/NGScroller, I was wondering if you would be willing to move your existing repository under angular-ui organisation ? or if you'd rather keep the current way of working with two repositories ?\n\nIf you do, then maybe you could also consider @ProLoser suggestion to rename ui-scroll into ui-virtualize ?\n. IMHO the last thing to do to close this ticket is to split/move/rename ui-scroll/ng-scroll/ui-virtualize. So I'm waiting to get some kind of answer from ng-scroll team.\n\nhttp://angular-ui.github.io/ was also updated to reflect the new organization of things.\n. I have no opinion regarding the name. That's entirely up to you guys, but I just wanted to mention the existence of https://github.com/kamilkp/angular-vs-repeat.\n\nAs for coffeescript, I don't mind either, as long as your build system is able to produce and publish something in JS, then that's good enough for me. I would try however to avoid two repositories. I feel if you could have everything in a single repository, that would avoid a lot of confusion (eg: useless PR against JS)\n. So @mfeingold will you be able to move repositories by yourself, or would you need help for something ? If possible it would be best to do it \"quickly\" since `ui-scroll` is not really available anymore (or at least it looks like it's not available anymore).\n. That's fine, yes. If you need help for anything, ping me.\n. I would tend to agree with @compact, you could transfer ownership and rename the existing repository if you care enough about issues. But that's entirely up to you.\n\nMeanwhile I [added ui-scroll to Angular UI](https://github.com/angular-ui/angular-ui.github.com/commit/38b5348284fa3c5e6fd2e5624e7dd686b3a3ca1e) listing (doesn't matter if you destroy/recreate repository).\n\nAlso, I consider this issue closed.\n. lol :)\n\nNevermind, glad I was able to help. I am not able to contribute much to actual code, but I since I benefited from Angular UI efforts for my own projects, it's only fair that I give something back.\n. Use of jQuery is a big no-no, resubmit a PR without jQuery if you want to merge this\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting the issue on its dedicated issue tracker.\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. @iamdeadman see the [README for details](https://github.com/angular-ui/ui-utils#readme). ui-jq was not \"forked\" because it was not worth the effort, because of general lack of interest (from maintainers and users). Latest version is still available here via `bower install angular-ui-utils#jq-0.2.3`, but I am afraid the issue is still not solved. \n. It is not defined as mandatory in official spec: https://github.com/bower/bower.json-spec, but if you create a PR, you'll get a chance to get it merged. However beware that ui-utils was just split in independent repositories. See README for details.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. This seems to be wrong: http://stackoverflow.com/questions/23147196/is-it-angular-http-defaults-usexdomain-really-neccessary-in-cors\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. Actual code base of ui-scroll is in https://github.com/Hill30/NGScroller. Please re-submit your issue over there if needed.\n. UI.Utils modules was split in individuals repositories. If still valid, please consider re-submitting on its dedicated repository: https://github.com/angular-ui/ui-mask\n\nSee the [README for details](https://github.com/angular-ui/ui-utils#readme).\n. Please report bug/PR to https://github.com/Hill30/NGScroller\n. I would actually try to get rid of ui-utils altogether and convince people to user dedicated repositories instead. So I wouldn't put much time in that IMHO\n. you can find the code over there: https://github.com/angular-ui/angular-ui.github.com. Beware that it just have been updated to reflect new organization (and remove deprecated things).\n- `scrollfix` was renamed as [scrollpoint](https://github.com/angular-ui/ui-scrollpoint)\n- `scroll` was suggested to be renamed as `virtualize` but since the project actually live out of AngularUI organization, we are waiting for @mfeingold and @dhilt opinion on that matter\n\nEverything else was judged not much relevant anymore. And they will be left as is unless there is a clear interest from many people. So you can still access their \"old\" version from this repository, but it is likely that they will not evolve anymore. At least not in this repository anymore.\n\nAs for demo page of each modules, they are unfortunately not directly available online anymore. But you can use a service like http://htmlpreview.github.io to view them. Please refer to http://angular-ui.github.io/\n. `ui-jq` module is still available from this repository as it used to be. If there are new patches/version of `ui-jq`, then we might be thinking about splitting it. But if there is not a strong demand, it will be left as is.\n. My last comment wasn't very clear. `ui-jq` is not maintained anymore, but you can still get the latest version available via:\n\n```\nbower install angular-ui-utils#jq-0.2.3\n```\n. Not directly related to your issue, but it made me realize that v1.0.0 and v2.0.0 were messed up. `angular-ui-utils` were split in individual modules and thus modules will be installed as dependencies from now on. This is now correctly reflected in the brand new v3.0.0.\n\nAlso I suggest you only install the required individuals modules, rather than `angular-ui-utils`. This package will become obsolete in the future and will end up being destroyed in the far future.\n. It is strongly advised to use individual modules instead of this legacy package. While we are not in a hurry to destroy this package, it will not be around foerever\n. Nothing specific to recommend, but you can still use the \"old\" one (`bower install angular-ui-utils#unique-0.2.3`). It will not disappear anytime soon. And if you realize that it actually needs some modification later one, then you can consider forking, and/or contribute to angular-ui as a standalone module.\n\nThe reason we didn't split it in a standalone module is not because the code is of poor quality, but rather because it _seems_ that it is not used by enough people to be worth the time to maintain. If there is a strong interest, it could be revived.\n. Use `bower install angular-ui-utils#keypress-0.2.3`\n. Public package was not deleted. Use `bower install angular-ui-utils#highlight-0.2.3` to get latest version release.\n. Please report issue to https://github.com/angular-ui/ui-mask\n. This project is dead. It's very unlikely that anything new will be ever released. Please migrate to [independent projects](https://github.com/angular-ui/ui-utils#includes) instead.\n. @tbranyen, you published this project to npm 2 years ago. Could you please either deprecate it, or give access to the following maintainers:\n- https://www.npmjs.com/~proloser\n- https://www.npmjs.com/~powerkik\n- https://www.npmjs.com/~nmccready\n. This project is dead, instead install directly what you need [from the list](https://github.com/angular-ui/ui-utils#includes).. ",
    "arnaudbreton": "I think these kind of issues are requirements for people to actively develop on this project right?\nI think I will start to backport my patch on angular-ui first and do it when ui-utils will be more mature.\n\nYes I used this param too for Karma, but it's not a big deal to precise a default one, mainly for the future grunt task.\n. I'm agree with you that most of the issues can be easily bypass but they require some setup time that I can't dedicate to this project for the moment (but I would like!).\nThe one about the jQuery dependency has to be solved quickly and like you I haven't any idea on how to create an event without jQuery API (I have seen not straightforward examples to do that with pure JS implementation, I can find them back I guess).\n\nIn my opinion to attract people to develop actively on the project, write specs, etc, initial environment has to be \"plug&play\".\nFor example, the doc is a little bit outdated: \n- Grunt should not be globally installed (http://gruntjs.com/getting-started),\n- Why coffee script is required? I haven't seen coffee files so far, \n- Testacular is now known as Karma.\n\nIt's definitely not a big deal but it have to be done for the Grunt task, isn't it?\n\nI will be glad to contribute to this project but just considering the small amount of time that I can spend on it.\n\nLet me know how I can help.\n. Awesome! Glad to hear. It thought about it, it sounds reasonable for test needs.\nThe Web is still not fully ready to go over jQuery :).\n\nI am on a critical issue on our app right now but I will go back to the backport ASAP.\n\nBest.\n. Bad formatted, creating a new clean one.\n. Not I was not, I've never used TravisCI in my projects so far.\n\nHow can I remove a commit from a pull-request? Thanks!\n. README.md should be updated to integrate grunt targets.\n. I think these kind of issues are requirements for people to actively develop on this project right?\nI think I will start to backport my patch on angular-ui first and do it when ui-utils will be more mature.\n\nYes I used this param too for Karma, but it's not a big deal to precise a default one, mainly for the future grunt task.\n. I'm agree with you that most of the issues can be easily bypass but they require some setup time that I can't dedicate to this project for the moment (but I would like!).\nThe one about the jQuery dependency has to be solved quickly and like you I haven't any idea on how to create an event without jQuery API (I have seen not straightforward examples to do that with pure JS implementation, I can find them back I guess).\n\nIn my opinion to attract people to develop actively on the project, write specs, etc, initial environment has to be \"plug&play\".\nFor example, the doc is a little bit outdated: \n- Grunt should not be globally installed (http://gruntjs.com/getting-started),\n- Why coffee script is required? I haven't seen coffee files so far, \n- Testacular is now known as Karma.\n\nIt's definitely not a big deal but it have to be done for the Grunt task, isn't it?\n\nI will be glad to contribute to this project but just considering the small amount of time that I can spend on it.\n\nLet me know how I can help.\n. Awesome! Glad to hear. It thought about it, it sounds reasonable for test needs.\nThe Web is still not fully ready to go over jQuery :).\n\nI am on a critical issue on our app right now but I will go back to the backport ASAP.\n\nBest.\n. Bad formatted, creating a new clean one.\n. Not I was not, I've never used TravisCI in my projects so far.\n\nHow can I remove a commit from a pull-request? Thanks!\n. README.md should be updated to integrate grunt targets.\n. ",
    "arturgspb": "Opps.. I used file http://angular-ui.github.io/lib/maskedinput/jquery.maskedinput.js\n\nSorry\n. Opps.. I used file http://angular-ui.github.io/lib/maskedinput/jquery.maskedinput.js\n\nSorry\n. ",
    "pocesar": "I guess even returning an object with the regex pattern itself and the mask, to make it easier to display to the user. parsing a regex for the possible. so the `$myMask` would be:\n\n``` js\n$scope.myMask = function(isPhone) {\n  if (isPhone)\n    return {'(___) ___-____': '/\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}/'}\n  else\n    return '(999) 999-9999'\n}\n```\n\nthis way, there will be no need to parse the regex for the placeholders, I guess, but only in this instance (when using functions instead of string/regex masks)\n. @shaungrady you shed a light on my understanding of the mask directive. \n\nwell, the function based return a function that can adapt depending on the input. it would merely be a shortcut for a key down event I guess, I was just brainstorming, trying to make a concise idea out of it. It would regenerate the mask as the user types. since the user can't \"skip\" the carret, would make sense to make it _realtime_ as it types. For example, the phone example I used, S\u00e3o Paulo area code is 11, so as soon the user fills the mask (11) the mask changes to (11) 99999-9999, if its (19), it changes back to (19) 9999-9999\n\nand btw, that regexp mask using an array of regex is really clever! that solves a lot of problems with complicated patterns and still make the mask functional.\n. The new mask module is really nice, just a couple of \"out the box\" functionality, since the maskDefinitions can't be changed without patching the source:\n\n``` js\n      var maskDefinitions = {\n          '9': /\\d/,\n          '1': /[0-1]/,\n          '2': /[0-2]/,\n          '3': /[0-3]/,\n          '4': /[0-4]/,\n          '5': /[0-5]/,\n          '6': /[0-6]/,\n          '7': /[0-7]/,\n          '8': /[0-8]/,\n          '0': /0/,\n          'a': /[a-z]/,\n          'A': /[a-zA-Z]/,\n          '*': /[a-zA-Z0-9]/\n      };\n```\n\nwould be nice to have a way to add `maskDefinitions` too, either by a global setting, or a setting on the parent `ui` module\n. will do, but first I got a question, how can I add \"configs\" to angular directives? (without HTML attrs, classes, etc)\n\nthis way I can add some stuff that I got in mind, that you guys can see if have it's way to the master branch\n\nand how can I make the ui-mask directive use the `viewValue` instead of the `modelValue`? I want to submit my form with my data formatted \n. @wesleycoder get the mask from a scope/controller variable, check the input and change the mask as needed like \n\n``` html\n<input type=\"text\" ui-mask=\"{{mask}}\" ng-keyup=\"onKeyUp()\" ng-model=\"myinput\">\n```\n\n``` js\n$scope.myinput = '';\nvar defaultMask  = '(99) 9999-9999';\n$scope.mask = defaultMask;\n$scope.onKeyUp = function(){\n  if ($scope.myinput.slice(0,3) == '119') { // (11) 9 means mobile, or instead, you could use a regex\n   $scope.mask = '(99) 99999-9999';\n  } else {\n    $scope.mask = defaultMask;\n  }\n};\n```\n\nOf course, you could just wrap everything in a directive. I'm just being verbose here (done the above code from my head, didn't test it tho).\n. you need to put how many chars you want after it `<input name=\"masked\" ui-mask=\"9?999999\">`\n. I'm going to propose a pull request that you can set how you want the data from ui-mask, right now, it uses the raw, unmasked value, but most of the time, you'd want to use the $viewValue of the input. the $viewValue will only be available if you have a form, otherwise, too bad.\n. AFAIK the ui-mask removed all jQuery dependency and it's a complete rewrite from masked input. But the 'lag' in input could fix it (maybe internally, the field tries immediatelly to validate the input as being a phone number, and there's a racing condition between the two events)\n. the biggest use is for dates: 19/39/2999 or 39/19/2999 (that I usually use)\n\nAnyone can easily remove the mask that they want using `delete maskConfig.maskDefinitions['1']` for example. I've even added more tests, including tests that were missing to the optional `?` char. But of course, it can come without any of those extra masks, and I'll just add mines. \n\nOne thing that I didn't include in this commit is the ability to set the model to the $viewValue. I always want my data to be formatted, let the server deal with the 'unformatting', I shall make another push if this get merged depending on how it goes.\n\nThat's why I also wanted a \"fixed\" non mask character modifier that could signal to the directive to skip that number of mask. It could be quoted, like `+'1' (999) 999-9999`, that would make the 1 'fixed' and make the directive ignore/skip it. there's also another library for jQuery called meiomask, it has some default mask values, like credit cards, phone numbers, dates, etc are a bit different from masked.input\n. I agree. And yes, escaping is the correct term. I'll remove the extra masks from the commit, and commit just the exposed configuration part.\n. nothing in that matter has changed @ProLoser it still support dynamic stuff, including the new configuration\n. @gustavohenke no, for that, you might want to apply another directive that returns the viewValue instead of modelValue, as per (my) question on stackoverflow: http://stackoverflow.com/questions/17116730/how-to-access-the-ngmodelcontroller-from-inside-the-controller-without-a-form-a\n. wrong repo, my bad\n. this is a good addition, but why not use `ui-mask-placeholder` directive as a helper for the `ui-mask` directive, and match each char-per-char?\n\n``` html\n<input ui-mask=\"99/99\" ui-mask-placeholder=\"MM/YY\">\n```\n\nThat would make things simpler and more flexible (you could change the placeholder using a scope variable without needing to change the ui-mask and vice-versa, for example, non english dates, would be `DD/MM/YYYY` and english dates `MM/DD/YYYY`, iso date `YYYY-MM-DD`, etc)\n. it's not an external dependency, it's a helper directive that you'd be using as an attribute (using the `ui-mask`  namespace, hence the name `ui-mask-placeholder`). External dependencies are everything that isn't \"angular\", like jQuery, underscore, Backbone, etc\n. yup, you are free to add it. it's not actually a directive, but a configuration attribute. it should become a directive if it needs to take precedence over ui-mask to deliver transformations or parsers.\n. just make sure that, if the attribute `ui-mask-placeholder` isn't present, the mask would work like the usual\n. @ChrSorensen not working for me ;/\n. this need to be addressed, not working properly with any new Angular RCs\n. I use ui-scrollfix :P\n. @ProLoser works for me :)\n. btw, that's old code, if you check the master version of ui-mask, it already uses `value === '' && iAttrs.required`\n. it doesn't, ui-validate was written long time ago, and for angular 1.2 only. happily some parts still work, but async validators doesn't\n. I guess even returning an object with the regex pattern itself and the mask, to make it easier to display to the user. parsing a regex for the possible. so the `$myMask` would be:\n\n``` js\n$scope.myMask = function(isPhone) {\n  if (isPhone)\n    return {'(___) ___-____': '/\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}/'}\n  else\n    return '(999) 999-9999'\n}\n```\n\nthis way, there will be no need to parse the regex for the placeholders, I guess, but only in this instance (when using functions instead of string/regex masks)\n. @shaungrady you shed a light on my understanding of the mask directive. \n\nwell, the function based return a function that can adapt depending on the input. it would merely be a shortcut for a key down event I guess, I was just brainstorming, trying to make a concise idea out of it. It would regenerate the mask as the user types. since the user can't \"skip\" the carret, would make sense to make it _realtime_ as it types. For example, the phone example I used, S\u00e3o Paulo area code is 11, so as soon the user fills the mask (11) the mask changes to (11) 99999-9999, if its (19), it changes back to (19) 9999-9999\n\nand btw, that regexp mask using an array of regex is really clever! that solves a lot of problems with complicated patterns and still make the mask functional.\n. The new mask module is really nice, just a couple of \"out the box\" functionality, since the maskDefinitions can't be changed without patching the source:\n\n``` js\n      var maskDefinitions = {\n          '9': /\\d/,\n          '1': /[0-1]/,\n          '2': /[0-2]/,\n          '3': /[0-3]/,\n          '4': /[0-4]/,\n          '5': /[0-5]/,\n          '6': /[0-6]/,\n          '7': /[0-7]/,\n          '8': /[0-8]/,\n          '0': /0/,\n          'a': /[a-z]/,\n          'A': /[a-zA-Z]/,\n          '*': /[a-zA-Z0-9]/\n      };\n```\n\nwould be nice to have a way to add `maskDefinitions` too, either by a global setting, or a setting on the parent `ui` module\n. will do, but first I got a question, how can I add \"configs\" to angular directives? (without HTML attrs, classes, etc)\n\nthis way I can add some stuff that I got in mind, that you guys can see if have it's way to the master branch\n\nand how can I make the ui-mask directive use the `viewValue` instead of the `modelValue`? I want to submit my form with my data formatted \n. @wesleycoder get the mask from a scope/controller variable, check the input and change the mask as needed like \n\n``` html\n<input type=\"text\" ui-mask=\"{{mask}}\" ng-keyup=\"onKeyUp()\" ng-model=\"myinput\">\n```\n\n``` js\n$scope.myinput = '';\nvar defaultMask  = '(99) 9999-9999';\n$scope.mask = defaultMask;\n$scope.onKeyUp = function(){\n  if ($scope.myinput.slice(0,3) == '119') { // (11) 9 means mobile, or instead, you could use a regex\n   $scope.mask = '(99) 99999-9999';\n  } else {\n    $scope.mask = defaultMask;\n  }\n};\n```\n\nOf course, you could just wrap everything in a directive. I'm just being verbose here (done the above code from my head, didn't test it tho).\n. you need to put how many chars you want after it `<input name=\"masked\" ui-mask=\"9?999999\">`\n. I'm going to propose a pull request that you can set how you want the data from ui-mask, right now, it uses the raw, unmasked value, but most of the time, you'd want to use the $viewValue of the input. the $viewValue will only be available if you have a form, otherwise, too bad.\n. AFAIK the ui-mask removed all jQuery dependency and it's a complete rewrite from masked input. But the 'lag' in input could fix it (maybe internally, the field tries immediatelly to validate the input as being a phone number, and there's a racing condition between the two events)\n. the biggest use is for dates: 19/39/2999 or 39/19/2999 (that I usually use)\n\nAnyone can easily remove the mask that they want using `delete maskConfig.maskDefinitions['1']` for example. I've even added more tests, including tests that were missing to the optional `?` char. But of course, it can come without any of those extra masks, and I'll just add mines. \n\nOne thing that I didn't include in this commit is the ability to set the model to the $viewValue. I always want my data to be formatted, let the server deal with the 'unformatting', I shall make another push if this get merged depending on how it goes.\n\nThat's why I also wanted a \"fixed\" non mask character modifier that could signal to the directive to skip that number of mask. It could be quoted, like `+'1' (999) 999-9999`, that would make the 1 'fixed' and make the directive ignore/skip it. there's also another library for jQuery called meiomask, it has some default mask values, like credit cards, phone numbers, dates, etc are a bit different from masked.input\n. I agree. And yes, escaping is the correct term. I'll remove the extra masks from the commit, and commit just the exposed configuration part.\n. nothing in that matter has changed @ProLoser it still support dynamic stuff, including the new configuration\n. @gustavohenke no, for that, you might want to apply another directive that returns the viewValue instead of modelValue, as per (my) question on stackoverflow: http://stackoverflow.com/questions/17116730/how-to-access-the-ngmodelcontroller-from-inside-the-controller-without-a-form-a\n. wrong repo, my bad\n. this is a good addition, but why not use `ui-mask-placeholder` directive as a helper for the `ui-mask` directive, and match each char-per-char?\n\n``` html\n<input ui-mask=\"99/99\" ui-mask-placeholder=\"MM/YY\">\n```\n\nThat would make things simpler and more flexible (you could change the placeholder using a scope variable without needing to change the ui-mask and vice-versa, for example, non english dates, would be `DD/MM/YYYY` and english dates `MM/DD/YYYY`, iso date `YYYY-MM-DD`, etc)\n. it's not an external dependency, it's a helper directive that you'd be using as an attribute (using the `ui-mask`  namespace, hence the name `ui-mask-placeholder`). External dependencies are everything that isn't \"angular\", like jQuery, underscore, Backbone, etc\n. yup, you are free to add it. it's not actually a directive, but a configuration attribute. it should become a directive if it needs to take precedence over ui-mask to deliver transformations or parsers.\n. just make sure that, if the attribute `ui-mask-placeholder` isn't present, the mask would work like the usual\n. @ChrSorensen not working for me ;/\n. this need to be addressed, not working properly with any new Angular RCs\n. I use ui-scrollfix :P\n. @ProLoser works for me :)\n. btw, that's old code, if you check the master version of ui-mask, it already uses `value === '' && iAttrs.required`\n. it doesn't, ui-validate was written long time ago, and for angular 1.2 only. happily some parts still work, but async validators doesn't\n. ",
    "wesleycoder-zz": "> well, the function based return a function that can adapt depending on the input. it would merely be a shortcut for a key down event I guess, I was just brainstorming, trying to make a concise idea out of it. It would regenerate the mask as the user types. since the user can't \"skip\" the carret, would make sense to make it realtime as it types. For example, the phone example I used, S\u00e3o Paulo area code is 11, so as soon the user fills the mask (11) the mask changes to (11) 99999-9999, if its (19), it changes back to (19) 9999-9999\n> \n> and btw, that regexp mask using an array of regex is really clever! that solves a lot of problems with complicated patterns and still make the mask functional.\n\nAnyone has an alternative to use for the exampe case of S\u00e3o Paulo phones?\nI can't figure out a solution for this...\n. > well, the function based return a function that can adapt depending on the input. it would merely be a shortcut for a key down event I guess, I was just brainstorming, trying to make a concise idea out of it. It would regenerate the mask as the user types. since the user can't \"skip\" the carret, would make sense to make it realtime as it types. For example, the phone example I used, S\u00e3o Paulo area code is 11, so as soon the user fills the mask (11) the mask changes to (11) 99999-9999, if its (19), it changes back to (19) 9999-9999\n> \n> and btw, that regexp mask using an array of regex is really clever! that solves a lot of problems with complicated patterns and still make the mask functional.\n\nAnyone has an alternative to use for the exampe case of S\u00e3o Paulo phones?\nI can't figure out a solution for this...\n. ",
    "saulovenancio": "are these improvement ready or just possible to be created on future?\ntks.\n. are these improvement ready or just possible to be created on future?\ntks.\n. ",
    "javierpavon2000": "any news about regular expression for ui-mask?\nThanks\n. any news about regular expression for ui-mask?\nThanks\n. ",
    "manar-mk": "Hi, there a question about using regexp instead of your maskDefinitions. I know it is possible, but don't know how. `<input ui-mask=\"^\\d{0,7}$\">` for 7 digits to input. Is there another tag or option?\n. Hi, there a question about using regexp instead of your maskDefinitions. I know it is possible, but don't know how. `<input ui-mask=\"^\\d{0,7}$\">` for 7 digits to input. Is there another tag or option?\n. ",
    "dmitryevseev": "Yes, I used the latest version from ui-utils master branch\n. Here it is: http://plnkr.co/edit/jGqXcMIiwUkqrpg0IBWm?p=preview\nI had to place both angular-ui and app code to one js file, plunker didn't want to keep 'em separate\n. Solved by https://github.com/angular-ui/ui-map/commit/410951b960babcc2c6ab90ff78ce235eab90833a\n. Yes, I used the latest version from ui-utils master branch\n. Here it is: http://plnkr.co/edit/jGqXcMIiwUkqrpg0IBWm?p=preview\nI had to place both angular-ui and app code to one js file, plunker didn't want to keep 'em separate\n. Solved by https://github.com/angular-ui/ui-map/commit/410951b960babcc2c6ab90ff78ce235eab90833a\n. ",
    "artjomzab": "not working for me \n\n```\n<input name=\"masked\" ui-mask=\"9?\">\n```\n\nexcepts only one character\n. I want to except input like A**-A**-9**\\* (\\* is like optional)\n\nExample: BI - PM - 9542 or COH - X - 123\n\nis this possible with this commit?\n. Just tested it, 9?99999 however when I have a pattern like 9?99 - 99?99 it does not work, I cannot skip the '-'\n. Why this is not working for me?\n\n```\n <input type=\"text\" name=\"masked\" ui-mask=\"A?AA\"  placeholder=\"HH\">\n```\n\nI still get __ as placeholder.\n. not working for me \n\n```\n<input name=\"masked\" ui-mask=\"9?\">\n```\n\nexcepts only one character\n. I want to except input like A**-A**-9**\\* (\\* is like optional)\n\nExample: BI - PM - 9542 or COH - X - 123\n\nis this possible with this commit?\n. Just tested it, 9?99999 however when I have a pattern like 9?99 - 99?99 it does not work, I cannot skip the '-'\n. Why this is not working for me?\n\n```\n <input type=\"text\" name=\"masked\" ui-mask=\"A?AA\"  placeholder=\"HH\">\n```\n\nI still get __ as placeholder.\n. ",
    "montlebalm": "I can appreciate the difficulty of the task, but we still need a solution. It isn't as big of a deal if you're just creating something for yourself, but it's a pain when you're building to a fixed prototype and everything has to be perfect.\n\nCan you think of a way to work _with_ the craziness of this index tracking? I'd prefer to avoid a hacky solution, but I'm willing to experiment if it will preserve the original order.\n. I had no idea \"if\" made it to core. Thanks for the heads up. I'll definitely do some isolated tests. \n\nAre you planning on removing \"if\" from this utils project?\n. I can appreciate the difficulty of the task, but we still need a solution. It isn't as big of a deal if you're just creating something for yourself, but it's a pain when you're building to a fixed prototype and everything has to be perfect.\n\nCan you think of a way to work _with_ the craziness of this index tracking? I'd prefer to avoid a hacky solution, but I'm willing to experiment if it will preserve the original order.\n. I had no idea \"if\" made it to core. Thanks for the heads up. I'll definitely do some isolated tests. \n\nAre you planning on removing \"if\" from this utils project?\n. ",
    "petebacondarwin": "Is this really a problem with ui-if or actually a problem with tab /\nng-repeat?\nIf it really a ui-if problem then can you create a plunk/fiddle that\ndemonstrates it without tab and ng-repeat.  If you can then you should now\nbe aware that ui-if is now part of core AngularJS:\nhttps://github.com/angular/angular.js/commit/2f96fbd17577685bc013a4f7ced06664af253944\n\nOn 12 May 2013 16:36, Chris Montrois notifications@github.com wrote:\n\n> I can appreciate the difficulty of the task, but we still need a solution.\n> It isn't as big of a deal if you're just creating something for yourself,\n> but it's a pain when you're building to a fixed prototype and everything\n> has to be perfect.\n> \n> Can you think of a way to work _with_ the craziness of this index\n> tracking? I'd prefer to avoid a hacky solution, but I'm willing to\n> experiment if it will preserve the original order.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/22#issuecomment-17779726\n> .\n. That seems like a good idea.\n\nOn 12 May 2013 16:49, Chris Montrois notifications@github.com wrote:\n\n> I had no idea \"if\" made it to core. Thanks for the heads up. I'll\n> definitely do some isolated tests.\n> \n> Are you planning on removing \"if\" from this utils project?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/22#issuecomment-17779924\n> .\n. You may be able to do something by updating the maskDefinitions: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L6\nBut the mask does not support variable length masks out of the box, I don't believe...\n. Is this really a problem with ui-if or actually a problem with tab /\nng-repeat?\nIf it really a ui-if problem then can you create a plunk/fiddle that\ndemonstrates it without tab and ng-repeat.  If you can then you should now\nbe aware that ui-if is now part of core AngularJS:\nhttps://github.com/angular/angular.js/commit/2f96fbd17577685bc013a4f7ced06664af253944\n\nOn 12 May 2013 16:36, Chris Montrois notifications@github.com wrote:\n\n> I can appreciate the difficulty of the task, but we still need a solution.\n> It isn't as big of a deal if you're just creating something for yourself,\n> but it's a pain when you're building to a fixed prototype and everything\n> has to be perfect.\n> \n> Can you think of a way to work _with_ the craziness of this index\n> tracking? I'd prefer to avoid a hacky solution, but I'm willing to\n> experiment if it will preserve the original order.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/22#issuecomment-17779726\n> .\n. That seems like a good idea.\n\nOn 12 May 2013 16:49, Chris Montrois notifications@github.com wrote:\n\n> I had no idea \"if\" made it to core. Thanks for the heads up. I'll\n> definitely do some isolated tests.\n> \n> Are you planning on removing \"if\" from this utils project?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/22#issuecomment-17779924\n> .\n. You may be able to do something by updating the maskDefinitions: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L6\nBut the mask does not support variable length masks out of the box, I don't believe...\n. ",
    "michaelglass": "curious: is the policy to remove features when they're merged into angular experimental?\n. curious: is the policy to remove features when they're merged into angular experimental?\n. ",
    "paullryan": "There are two breaking issues with the current version on bower. First there are invalid characters in the $setValidity function calls. Second the expression variable is being overwritten. These have already been fixed in the current master here but have not been propagated to bower yet.\n. Thank you much.\n. There are two breaking issues with the current version on bower. First there are invalid characters in the $setValidity function calls. Second the expression variable is being overwritten. These have already been fixed in the current master here but have not been propagated to bower yet.\n. Thank you much.\n. ",
    "ffesseler": "Indeed, I've never noticed this is normal behaviour. \n\nI'm having troubles finding how I can resolve this issue then : http://stackoverflow.com/questions/16419495/angularjs-validating-against-multiple-datepickers/16430792. Can you have a look at it ?\n. Indeed, I've never noticed this is normal behaviour. \n\nI'm having troubles finding how I can resolve this issue then : http://stackoverflow.com/questions/16419495/angularjs-validating-against-multiple-datepickers/16430792. Can you have a look at it ?\n. ",
    "thetrevdev": "Re-evaluating as if the $viewValue had changed sounds like a good idea.  However $setViewValue has the side effects of changing the dirty/pristine state as well as triggering ngChange would should only be fired off of changes to the view/input made by the user which would not be the case off of the watch.  Also all parsers should be reevaluated as they may depend on the others.\n\n``` javascript\nfunction evaluateParsers(){\n  var value=ctrl.$viewValue;\n  angular.forEach(ctrl.$parsers, function(fn) {\n    value = fn(value);\n  });\n\n  if (ctrl.$modelValue !== value) {\n    ctrl.$modelValue = value;\n    ngModelSet(scope,value);\n  }\n}\n```\n\nhttp://plnkr.co/edit/tvYLI35yuEnWio3mfHjj?p=preview\n\nThoughts?\n\nHonestly though this validation in general can act pretty odd.  if I have two separate validators such as > 5 and < 10.  if I put in 11, > 5 is valid but < 10 is not and model is left as undefined.  But if I put in 4 then > 5 is invalid but < 10 is also invalid because undefined from the previous validator / parser is used as its input.  \n. Re-evaluating as if the $viewValue had changed sounds like a good idea.  However $setViewValue has the side effects of changing the dirty/pristine state as well as triggering ngChange would should only be fired off of changes to the view/input made by the user which would not be the case off of the watch.  Also all parsers should be reevaluated as they may depend on the others.\n\n``` javascript\nfunction evaluateParsers(){\n  var value=ctrl.$viewValue;\n  angular.forEach(ctrl.$parsers, function(fn) {\n    value = fn(value);\n  });\n\n  if (ctrl.$modelValue !== value) {\n    ctrl.$modelValue = value;\n    ngModelSet(scope,value);\n  }\n}\n```\n\nhttp://plnkr.co/edit/tvYLI35yuEnWio3mfHjj?p=preview\n\nThoughts?\n\nHonestly though this validation in general can act pretty odd.  if I have two separate validators such as > 5 and < 10.  if I put in 11, > 5 is valid but < 10 is not and model is left as undefined.  But if I put in 4 then > 5 is invalid but < 10 is also invalid because undefined from the previous validator / parser is used as its input.  \n. ",
    "dmitry-dedukhin": "Are there any news on this?\n. What is a drawback of using ctrl.$viewValue instead of ctrl.$modelValue in uiValidateWatch?\n. Are there any news on this?\n. What is a drawback of using ctrl.$viewValue instead of ctrl.$modelValue in uiValidateWatch?\n. ",
    "adrienlo": "Curious, what the downfalls are for just passing back `valueToValidate` instead of `undefined`?\n\nhttps://github.com/angular-ui/ui-utils/blob/master/modules/validate/validate.js#L50\n\n`\n...\n// expression is false\nctrl.$setValidity(key, false);\nreturn valueToValidate;\n...\n`\n. Curious, what the downfalls are for just passing back `valueToValidate` instead of `undefined`?\n\nhttps://github.com/angular-ui/ui-utils/blob/master/modules/validate/validate.js#L50\n\n`\n...\n// expression is false\nctrl.$setValidity(key, false);\nreturn valueToValidate;\n...\n`\n. ",
    "rlrhett": "I am still confused.  If the model won't update unless it passes the validators first, how am I supposed to build a custom validation function?  If a field begins invalid (an that is almost always the case, especially if the field is required), how am I supposed to pass whatever is entered into the input to a validation function?\n\nHere is the required plnkr of what I am talking about:\n\nhttp://plnkr.co/edit/nQD6JHliuBGOIhUzl7v3?p=preview\n\nPlease note that I have the modified validate.js file that updates on viewValue.  That helps get passed the frozen view that didn't want to update, but still doesn't update the model for the validation function.  It seems that one would want the model to update at the very least in some temporary way so that the custom validator can go to work on it.  Am I missing something?\n. I am still confused.  If the model won't update unless it passes the validators first, how am I supposed to build a custom validation function?  If a field begins invalid (an that is almost always the case, especially if the field is required), how am I supposed to pass whatever is entered into the input to a validation function?\n\nHere is the required plnkr of what I am talking about:\n\nhttp://plnkr.co/edit/nQD6JHliuBGOIhUzl7v3?p=preview\n\nPlease note that I have the modified validate.js file that updates on viewValue.  That helps get passed the frozen view that didn't want to update, but still doesn't update the model for the validation function.  It seems that one would want the model to update at the very least in some temporary way so that the custom validator can go to work on it.  Am I missing something?\n. ",
    "danday74": "You need to add ng-model-options=\"{allowInvalid:true}\" to your form input elements to stop this happening - the problem is that when a promise is rejected (e.g. using $q or $http) the model, by default, is not updated. Crazy huh! Cost me a day working this out. \n. You need to add ng-model-options=\"{allowInvalid:true}\" to your form input elements to stop this happening - the problem is that when a promise is rejected (e.g. using $q or $http) the model, by default, is not updated. Crazy huh! Cost me a day working this out. \n. ",
    "mc00lidge": "We have experienced a similar error.  In our specific case the error seems to be related to creating a custom directive that has an <input> tag inside of it that makes use of the ui-date directive and ui-event directive to capture blur events.  \n\nWhen you chose a date the code in ui-utils-event.js (https://github.com/angular-ui/ui-utils/blob/master/modules/event/event.js) will execute and the error will occur.  It looks like the reason for the error is line 22 which is doing a check of !$scope.$$phase before calling $scope.$apply().  However it seems that $scope.$$phase is not being kept up to date with $rootScope.$$phase as the error then occurs because the ui-utils-event.js code will check $scope.$$phase and not see that the $apply phase has already started and will call $scope.$apply(), then in the $apply function a second check is made but this time the code checks $rootScope.$$phase (done in function beginPhase called from function $apply) and will see that an $apply phase is already started and will throw an error.\n\nWe think the issue could be solved by changing the check in ui-utils-event.js to !$rootScope.$$phase.\n\nHere is a jsfiddle with the issue.  You will need to have your console open to see the error:\nhttp://jsfiddle.net/PLM8v/6/\n. We have experienced a similar error.  In our specific case the error seems to be related to creating a custom directive that has an <input> tag inside of it that makes use of the ui-date directive and ui-event directive to capture blur events.  \n\nWhen you chose a date the code in ui-utils-event.js (https://github.com/angular-ui/ui-utils/blob/master/modules/event/event.js) will execute and the error will occur.  It looks like the reason for the error is line 22 which is doing a check of !$scope.$$phase before calling $scope.$apply().  However it seems that $scope.$$phase is not being kept up to date with $rootScope.$$phase as the error then occurs because the ui-utils-event.js code will check $scope.$$phase and not see that the $apply phase has already started and will call $scope.$apply(), then in the $apply function a second check is made but this time the code checks $rootScope.$$phase (done in function beginPhase called from function $apply) and will see that an $apply phase is already started and will throw an error.\n\nWe think the issue could be solved by changing the check in ui-utils-event.js to !$rootScope.$$phase.\n\nHere is a jsfiddle with the issue.  You will need to have your console open to see the error:\nhttp://jsfiddle.net/PLM8v/6/\n. ",
    "rayshan": "Thanks for getting back, it's certainly optional but nice to have. I used bootstrap appended input as a workaround for now. When I have time I'll dig a little deeper for a proper fix and send a pull request.\n![screenshot_060313_023422_pm](https://f.cloud.github.com/assets/3760840/601616/a4e23de2-cc84-11e2-858d-2080b00d3c6b.jpg)\n. Thanks for getting back, it's certainly optional but nice to have. I used bootstrap appended input as a workaround for now. When I have time I'll dig a little deeper for a proper fix and send a pull request.\n![screenshot_060313_023422_pm](https://f.cloud.github.com/assets/3760840/601616/a4e23de2-cc84-11e2-858d-2080b00d3c6b.jpg)\n. ",
    "lowe0292": "I'm running into a similar issue with a responsive web app. I'd like to use `type=\"number\"` with ui-mask so smartphones will display the correct keyboard.\n. I'm running into a similar issue with a responsive web app. I'd like to use `type=\"number\"` with ui-mask so smartphones will display the correct keyboard.\n. ",
    "armyofda12mnkeys": "I'd be interested in a fix for this as well. We use (999) 999-9999 ui-mask for phone #'s on our contact pages and they don't work correctly on mobile if its a type=\"number\" field.\n. anyone try type=tel? i think that helped my masking on phones, esp Android which uses keyboard autocomplete as you type in the field, messing up masking. \nand type=number shows up kinda ugly for desktop (while tel gives the numberpad on mobile, and on desktop doesn't do that number field whose browser UI 'number-incrementer' may not work with textfield masking)\n. +1 as well. \nWe would like to keep phone and date formatting in the model. \nSo when a user fills out DOB/phone info on our contact form, we can store that in our DB as it was formatted in the field.\nEDIT: Whoops I saw the other issue was merged into this one because its a 'duplicate'... But i think its not since there is a solution for using model-view-value/ui-mask-use-viewvalue to keep the masked value in the model.\n. I'd be interested in a fix for this as well. We use (999) 999-9999 ui-mask for phone #'s on our contact pages and they don't work correctly on mobile if its a type=\"number\" field.\n. anyone try type=tel? i think that helped my masking on phones, esp Android which uses keyboard autocomplete as you type in the field, messing up masking. \nand type=number shows up kinda ugly for desktop (while tel gives the numberpad on mobile, and on desktop doesn't do that number field whose browser UI 'number-incrementer' may not work with textfield masking)\n. +1 as well. \nWe would like to keep phone and date formatting in the model. \nSo when a user fills out DOB/phone info on our contact form, we can store that in our DB as it was formatted in the field.\nEDIT: Whoops I saw the other issue was merged into this one because its a 'duplicate'... But i think its not since there is a solution for using model-view-value/ui-mask-use-viewvalue to keep the masked value in the model.\n. ",
    "zachcarroll": "has anyone found a solution for setting up a mask for input type=number?\n. has anyone found a solution for setting up a mask for input type=number?\n. ",
    "cleiton-tavares": "It is using tel on the input type, worked well and the way I would if usase number, thank @armyofda12mnkeys \n. It is using tel on the input type, worked well and the way I would if usase number, thank @armyofda12mnkeys \n. ",
    "lstone": "I'd like to recommend this be reopened. Using type 'tel' is inappropriate for accessibility users. \n. I broke this into a gist and documented it if anyone is interested. Description and link here: http://stackoverflow.com/questions/32973660/angular-ui-mask-empty-placeholder\n. Nice @PowerKiKi, thanks for letting me know!\n. I'd like to recommend this be reopened. Using type 'tel' is inappropriate for accessibility users. \n. I broke this into a gist and documented it if anyone is interested. Description and link here: http://stackoverflow.com/questions/32973660/angular-ui-mask-empty-placeholder\n. Nice @PowerKiKi, thanks for letting me know!\n. ",
    "ingoncalves": "I agree with Istone and suggest that this Issue be reopened, since the workaround is not appropriate.\n. I agree with Istone and suggest that this Issue be reopened, since the workaround is not appropriate.\n. ",
    "aidanhs": "This may also magically make other things intermittently work (it won't where list items are not objects), as unique will now accept angular expressions.\n\nPossible future work would be to make it always accept angular expressions. Potentially this would mean completely ripping out the `angular.isObject` check and always using the function returned by $parse. Didn't want to do this here though.\n. 1.\nNot quite, I added the specific case of subkeys of an object. This issue handles the less common case of functions on a list of primitives, e.g.\n\n``` html\n<div ng-repeat=\"chr in ['b','a','A'] | unique:upper\">\n    {{chr}}\n</div>\n...\n\n```\n\n(where `$scope.upper = $filter('uppercase');`...I don't know how to pass an built in filter in the html, I'm a beginner with angular)\n\nI would expect this to print 'a' and 'b', it doesn't.\n\nI think I just need to remove the isObject check, but first I want to check why it even exists - https://github.com/angular-ui/ui-utils/blob/c8c298da336ae7fc84b1289337f5ed5e69863361/modules/unique/unique.js#L21?\n\n2.\nUnsure, just something I figured I'd look at. It may be that it's not appropriate for any of them, I'm just working with unique at the moment.\n. This may also magically make other things intermittently work (it won't where list items are not objects), as unique will now accept angular expressions.\n\nPossible future work would be to make it always accept angular expressions. Potentially this would mean completely ripping out the `angular.isObject` check and always using the function returned by $parse. Didn't want to do this here though.\n. 1.\nNot quite, I added the specific case of subkeys of an object. This issue handles the less common case of functions on a list of primitives, e.g.\n\n``` html\n<div ng-repeat=\"chr in ['b','a','A'] | unique:upper\">\n    {{chr}}\n</div>\n...\n\n```\n\n(where `$scope.upper = $filter('uppercase');`...I don't know how to pass an built in filter in the html, I'm a beginner with angular)\n\nI would expect this to print 'a' and 'b', it doesn't.\n\nI think I just need to remove the isObject check, but first I want to check why it even exists - https://github.com/angular-ui/ui-utils/blob/c8c298da336ae7fc84b1289337f5ed5e69863361/modules/unique/unique.js#L21?\n\n2.\nUnsure, just something I figured I'd look at. It may be that it's not appropriate for any of them, I'm just working with unique at the moment.\n. ",
    "NathanWalker": "No worries, you guys effort is incredible. Thank you! I just noticed this is now in the new release. \n. Sure thing. I'll handle at some point Wednesday.\n. So goes it for Wednesday. I actually am not happy with these changes I've proposed. The ignore pattern doesn't work like I had hoped. Lemme make some more adjustments to get this solid and then I'll squash em' down and open another. Closing this PR and will open a new one with the solidity.\n. No worries, you guys effort is incredible. Thank you! I just noticed this is now in the new release. \n. Sure thing. I'll handle at some point Wednesday.\n. So goes it for Wednesday. I actually am not happy with these changes I've proposed. The ignore pattern doesn't work like I had hoped. Lemme make some more adjustments to get this solid and then I'll squash em' down and open another. Closing this PR and will open a new one with the solidity.\n. ",
    "devmondo": "thanks for reply, \nthe Tool Tip and Slider was a mere example and not specific, what i wanted to know is how to handle multiple jquery  plugins using the pass through syntax \n. thanks for reply, \n\ni agree it increases complexity, i think creating directives is better, but i will try to experiment as i am new to angular and see if it is worth a pull request and not waste your time \n. thanks for reply, \nthe Tool Tip and Slider was a mere example and not specific, what i wanted to know is how to handle multiple jquery  plugins using the pass through syntax \n. thanks for reply, \n\ni agree it increases complexity, i think creating directives is better, but i will try to experiment as i am new to angular and see if it is worth a pull request and not waste your time \n. ",
    "clakech": "Hi,\n\nThanks for your answer.\n\nI can't do this because I don't wan't those shortcuts to be activated on every view of my app, only in a specific view, so I would like the directive to be inside this specific view, on a div for instance or any other tag on this view.\n\nSince I didn't manage to use ui-keypress, I move to mousetrap.js\n\nIf I found a way to use ui-keypress for my need, I will use it because mousetrap.js is not angular 'ready', so I need to add a few $scope.$apply() in my code and I prefer to avoid this.\n\nRegards,\n. Hi,\n\nThanks for your answer.\n\nI can't do this because I don't wan't those shortcuts to be activated on every view of my app, only in a specific view, so I would like the directive to be inside this specific view, on a div for instance or any other tag on this view.\n\nSince I didn't manage to use ui-keypress, I move to mousetrap.js\n\nIf I found a way to use ui-keypress for my need, I will use it because mousetrap.js is not angular 'ready', so I need to add a few $scope.$apply() in my code and I prefer to avoid this.\n\nRegards,\n. ",
    "yaru22": "@clakech You can use ui-keypress on div element by having tabindex=\"0\" attribute on that div. Checkout http://stackoverflow.com/questions/148361/how-can-i-give-keyboard-focus-to-a-div-and-attach-keyboard-event-handlers-to-it and http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-TECHS/SCR29.html for more information on tabindex.\n\ne.g.\n\n```\n<div style=\"outline: 0; border: 1px solid red;\" tabindex=\"0\" ui-keypress=\"{13:'keypressCallback($event)'}\">\n  Click inside this div and hit [Enter]. You can make any element accept keyboard event by adding tabindex=\"0\" attribute to the element.\n</div>\n```\n\nI'll create a PR with this updated example.\n. PR for #39.\n. @clakech You can use ui-keypress on div element by having tabindex=\"0\" attribute on that div. Checkout http://stackoverflow.com/questions/148361/how-can-i-give-keyboard-focus-to-a-div-and-attach-keyboard-event-handlers-to-it and http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-TECHS/SCR29.html for more information on tabindex.\n\ne.g.\n\n```\n<div style=\"outline: 0; border: 1px solid red;\" tabindex=\"0\" ui-keypress=\"{13:'keypressCallback($event)'}\">\n  Click inside this div and hit [Enter]. You can make any element accept keyboard event by adding tabindex=\"0\" attribute to the element.\n</div>\n```\n\nI'll create a PR with this updated example.\n. PR for #39.\n. ",
    "JimAllanson": "I think that should do it, I'll double check tomorrow when I'm at a machine set up with a test runner.\n. Ahh right, sorry - it's my first pull request. It looks like I have to open a new pull request if I want to use a different branch, so I'll do that.\n. I think that should do it, I'll double check tomorrow when I'm at a machine set up with a test runner.\n. Ahh right, sorry - it's my first pull request. It looks like I have to open a new pull request if I want to use a different branch, so I'll do that.\n. ",
    "hiconversion": "that was fast- thanks!\n. that was fast- thanks!\n. ",
    "gustavohenke": "@pocesar \nThis PR fixed passing formatted values to the server? If yes, how to..?\n. That would work for simple scope properties; however, I have `filters[ filter.id ]`.\nI know I could use `$parser(...).assign(...)` or `$scope.$apply()`, but they trigger the digest cycle and that breaks the value.\n. @pocesar \nThis PR fixed passing formatted values to the server? If yes, how to..?\n. That would work for simple scope properties; however, I have `filters[ filter.id ]`.\nI know I could use `$parser(...).assign(...)` or `$scope.$apply()`, but they trigger the digest cycle and that breaks the value.\n. ",
    "mfeingold": "Hmm... I thought I left a comment yesterday, somehow it is not here. Anyway....\n\nI fixed all (I hope) problems in the travis build. The one with unreachable break in the switch is weird, it seems that jshint on one hand and my ide (webStorm) and coffee compiler on another have a difference in opinions as to what's the right way to do it here. Anyway, jshint seems to be happy now.\n\nThe external dependencies - yes, there is a dependency on JQuery. A list of what's needed of JQuery is in the comments in the header to the source code. Other than that there is no external dependencies.\n\nThe refactoring to eliminate the JQuery dependency - the thought occurred to me and I definitely want to do it. My question in regards to this is - what is the recommended way to do it? I was thinking of providing my own version of the necessary functions ONLY if there isn't one already available. In other words if the full JQuery is loaded I would like to use the JQuery version - is this how you plan to do it for the rest of the ui components?\n. Well I finally got around to getting rid of those dependencies. As I expected this is not as easy as it sounds primarily of the cross browser compatibility problems. I reverse engineered the jQuery code to implement what I needed. I also put some tests to make sure that I did it right, I ran the tests successfully on IE8, IE9, Firefox 20 and Chrome 28. \n\nI am not sure how sure I can (or should be) about other platforms, because of this I implemented my own versions of necessary methods in a separate file and in such a way that they will only kick in if the implementations are not already there (i.e. because the jQuery is already there).\n\nBefore I port this to javascript can you please have a look at the way I did it in my [repo](https://github.com/Hill30/NGScroller) just to see if you agree with the approach. Read the [dependencies](https://github.com/Hill30/NGScroller#dependencies) section I just added. in the Let me know\n\nWhich brings one more question. Does it make sense to turn the jqLite extras in a component of its own? Just a thought\n. Ok. I just dropped the updated javascript files in the scroller repo see above. Unfortunately I am flying completely blind here - for some reason I cannot get Travis to run the build for me on this repo. I am not sure what happened and will try to figure it out.\n. Hmm... It looks like my tests somehow broke the scrollfix tests. Apparently I do not do cleanup correctly - scroll events generated during my tests mess up scrollfix's. Or is it the scrollfix's responsibility to do the startup properly?\n. All is well. Found and fixed the bugs. Please do the merge\n. Can you give me a little more details? If I understand the stackoverflow issue correctly it is about forcing the scrollbar on the viewport  event though there is no items - well, this can be done with proper styling. Are having the same problem?\n. Hmm... It looks like a problem with height calculation of invisible (disabled) items. Can you throw together a quick repro? I will have a look \n. Thank you for the repro. \nA quick look at what's going on makes me think that the problem is that instead of operating on the html in the page, scroller messes with the html inside of the tab template which does not have a parent because it is pulled out of the page by the tab directive.\nTo fix it I will have to dig a little deeper.\n. Just patched it up. Please have a look and close the issue if you feel so. \n. No problem at all. Please do it. I am still learning the ropes of all this distribution collaboration process. Speaking of which is there a release process I should follow - I am ready to release a new version with a few impovements. Or should I just check it into the master? \n. Well, the separation between scroll and scroll-jqlite is intentional. jqlite does not have anything specific to scroll - it is an implementation of additional jquery methods necessary for scroll. If somebody uses angular over jquery, jqlite is just a bloat. \n\nI can certainly merge them, but if some other component (scrollfix?) would need a method (element.scrollTop?) an implementation will have to be provided by this component, multiplying the bloat. May be it makes sense to turn the jqlite into an extension library of jquery free implementations of some jquery methods to be used across angular ui components. \n\nSee also some discussion at the end of this thread: https://github.com/angular-ui/ui-utils/pull/51\n\nWhat do you think?\n. In other words - may be instead of merging jqlite into scroll split it apart one per method and list them in bower dependencies\n. @douglasduteil Any thoughts?\n. @douglasduteil I was thinking about something more transparent for the user of the top level component.. Something that would allow a user of scroll (or anything similar) to include (or not include if jQuery is present) the entire jqlitePlus module. What extras would go into the module though can be determined by the dependencies defined in bower.json of the components. This way the bloat would be minimized while the use would be real simple \nUnfortunately I got pulled in a different direction at the moment, but I will play a bit with this approach and let you know \n. working on it\n. I keep pushing this back - I am just pulled in too many directions. To follow your lead in using bower I was thinking about creating 2 separate branches - scroll-jquery and scroll-nojquery. The scroll-jquery branch would be for use in combination with jquery and would include only the scroll.js file. the scroll-nojquery would include both the scroll.js and jqliteExtra.js file. Unfortunately it does not solve the problem in its entirety. Also this introduces a new pattern to the repo structure which would be really beneficial only if the rest of the components would also follow it and I do not see it happening any time soon. \n\nIn other words I think of giving up on this nice idea and folding the jqliteExtra file into the scroll. At least for now. @douglasduteil @ProLoser - what do you guys think\n. resolved by [this commit](https://github.com/angular-ui/ui-utils/commit/9dbb1b185ac51bdce834405f7b43e514ad29d978)\n. Hmm... I am not sure... This certainly useful functionality can be easily implemented based on the information available in the your datasource.\n. Silly me. It is a problem with the merge to my fork. \n. The height of the viewport should be always constrained in your plunk it is not. Look at the note at the bottom of the [Description](https://github.com/Hill30/NGScroller#description) paragraph for more details\n. Thank you for your feedback. I agree, this paragraph deserves some editing. \n\nAs to the obscure exception - you also have a point. I can easily improve diagnostics for this particular case. Unfortunately, to make it really useful I would need to find a way to detect that its computed style height is 'auto'. There is no way to do that other than manually traverse hierarchy of both the elements and the css styles. At least I did not find any.\n\nIn other words if for instance you put some text inside the viewport div, the error will go away, but the scroller will still be useless - if you need full content, no need for scroller, use ng-repeat\n. Keep in mind I am about to deploy to the angular-ui a new version of the scroller. It will override your changes to the code. I plan to keep the readme though.\n. duplicate request\n. this pull request is messed up. Rather than try to fix it I will create a new one\n. currently it is not supported, but I have it on my list\n. @dhilt : can you give me an update on this one?\n. @PowerKiKi: We do development in our own repository. One of the reasons is that we prefer to do it in coffescript. As soon as we are happy with the stability we transpile the code to JS and publish it here. I just merged  the scroller v 1.1.0 here from the https://github.com/angular-ui/ui-utils/pull/372.\n\nThe version in NGScroller repo is a little more bleeding edge for the price of a little less stability. \n\nAnd to answer the original question inline block/floated are supported since v 1.0.0\n. A few things:\n1. Your code relies on the JQuery position() method, which is not available in JQLite. To keep the 'no external dependencies' promise you need either add an independent implementation of the position() method to ui-scroll-jqlite.js, or change implementation to relay on the methods already implemented there - would offset() work?\n2. My language of choice for writing the code is coffeescript. The coffescript scroller code is located [here](https://github.com/Hill30/NGScroller). If possible I would like to make changes there and then grunt build it and roll it over to angular-ui\n3. I was thinking about implementing this feature and I was thinking along the same lines you are. I just thought there should be a cleaner, more concise way to implement it - with no newRow flags, just some tweaking of the formulas in the ***clip methods\n. At this time the scroller relays on the height of the elements to stay the same as they are removed and recreated. As the element is removed its height is added to the top (or bottom) padding. As it is re-added the height is subtracted. \n\nObviously it will create problems as the item configuration changes - if the change affects the item height. I was thinking how this can be addressed and so far could not come up with anything palatable. If you can think of an approach - drop me a note\n. A thought just occurred to me. What if I preserve the height of the item as of the moment it was created and use it instead of the actual height in padding calculation. This would address the use case when the item height can change after it was created (as a result of the user expanding/collapsing something). It will not address the use case when the item will be re-created with the height different from the one it was created with though. But if the content of your datasource changes as you scroll up and down, all bets are off anyway. What do you think?\n. That sounds strange. Can you share a repro?\n. Well, it is not a bug it is a feature :). Working with the negative values of the index is a little tricky and your version of the datasource get method does not do it properly. I updated your [fiddle](http://jsfiddle.net/K2e4q/2/) to fix it. You can also have a look at an [example](http://rawgit.com/Hill30/NGScroller/master/src/examples/persistentScroll.html)\n. It is bidirectional infinite scroll. infinite in both directions. Negative indexes provide a way to make infinite scroll up (given you have data in this direction). Why would you want it? Check out an [example](http://rawgit.com/Hill30/NGScroller/master/src/examples/positionedList.html) I added recently   \n. I do not mind renaming it. One concern is backwards compatibility though. Although the component is pretty young so may be we just ignore it.\nAlso @douglasduteil can you think of a way to test the proposed changes before merging them into master?\n. @douglasduteil this is not a dup - #236 talks about .js files and it is happily closed now. @dukehoops is talking about the name of the directive(s). I see his point, naming consistency is important and I am leaning towards re-naming too. The concern, again is backwards compatibility. So should we just go ahead and rename it? \n. For logging ui-scroll uses $log.debug if available, otherwise it is using $log.log. The $log.debug method was introduced in angular v1.1.2. If your project uses this version (or later), you can disable logging by setting the debugEnabled property of the $logProvider to false\n. I am not sure I follow, what do you mean \u2018circular\u2019. Can you provide more details, may be a repro?\n\nFrom: Karan Batra-Daitch [mailto:notifications@github.com] \nSent: Friday, August 01, 2014 3:27 PM\nTo: angular-ui/ui-utils\nSubject: [ui-utils] ui.scroll stops for beginning and end (#275)\n\nI am returning arrays in dataSource.get methods. Is there a way to enforce start and stop positions so the list is not circular in nature?\n\nOtherwise, the module is working great.\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/angular-ui/ui-utils/issues/275 .  https://github.com/notifications/beacon/135903__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcyMjU0NDAyMiwiZGF0YSI6eyJpZCI6Mzg2MzI1NDd9fQ==--a5141af6a4af8caf184d769c7699a48c9807c70f.gif \n. get function is supposed to feed data in frames. The index of the first record in the overall dataset for the frame and the expected size is passed to the call as parameters. You are ignoring the get function parameters and pass this array as a result to each call, which means that your overall dataset consists of your array concatenated with itself unlimited number of times. Check the [samples page](http://rawgit.com/Hill30/NGScroller/master/src/index.html) for more details \n. The whole point of the viewport directive is to constrain the height of the area to fill out. If have more than one scroll in the viewport how this constrain would be divided between the two? on the other hand why would you need them to share the viewport? \n. You are correct. The directive was renamed recently and apparently not all references are fixed. Thank you for pointing it out\n. @douglasduteil I am not sure if I am asking the right person, but... it looks like the problem above is a aproblem with the site build process. The https://github.com/angular-ui/ui-utils/tree/master/modules/scroll/demo/index.html file where the text is supposed to come from has the directive  name fixed, but somehow in the deployed site it still shows up as ng-scroll rather than ui-scroll. Any idea?\n. thank you\n\nOn Thu, Sep 4, 2014 at 7:12 PM, Douglas Duteil notifications@github.com\nwrote:\n\n> K @mfeingold https://github.com/mfeingold\n> Fixed with a brute force commit on the gh-pages github branch\n> https://github.com/angular-ui/ui-utils/commit/2267950d265594a2042de942cd87cfad90e64f54\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/281#issuecomment-54563149.\n. Can you post a repro?\n. Can you provide a repro. Based on the info you provided it is difficult to\nsay what's wrong\n\nOn Tue, Feb 17, 2015 at 8:34 PM, Adrien Crivelli notifications@github.com\nwrote:\n\n> @cranesandcaff https://github.com/cranesandcaff if you are able to\n> create a plunkr to demonstrate the issue, you'll have more change to get\n> somebody involved to fix it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/282#issuecomment-74800560.\n. no repro forthcoming\n. The event based scroller update functionality was never documented because I hate the API. It seems to be a clunky kludge. I believe I have a better alternative now and I will publish it within a week. The event based API will stay for the sake folks like myself who already use it, but it will stay unpublished and unloved. Stay tuned.\n. fixed in pull request https://github.com/angular-ui/ui-utils/pull/372\n. Well, did you check the examples section of the [readme](https://github.com/angular-ui/ui-utils/blob/master/modules/scroll/README.md#examples) \n. can you post a repro?\n. Will include javascript examples in the next release\n. The event based API for scroll updates was never documented and will be removed in the future. For now you can use the revision method on the datasource, or you can wait another couple of days for the new API to be published. See also #291  \n. @kkataev can you have a look?\n. @kkataev please have a look\n. This issue is fixed in the [ngscroll repo](https://github.com/Hill30/NGScroller/issues/53). I will deploy it to ui-utils shortly\n. The fix merged in on Oct 1st\n. The math involved in deciding what items to return is a bit confusing. Unfortunately there is not much to be done to simplify it because it is the direct result of how unpredictable the scrollbars can be. \n\nTo make life easier I would suggest to follow the pattern published in the examples i.e. [here](https://github.com/Hill30/NGScroller/blob/master/src/examples/persistentScroll.coffee)\n. the bug is fixed in see pull request https://github.com/angular-ui/ui-utils/pull/372\n. Nope. These elements are added to make sure the scroll bar can be used to scroll up (down) even if currently there is no elements. This will initiate a request to the server to (may be) pull more elements. Initially these elements are styled to have 0 height, but as the elements are removed as they are scrolled out of view, the height of the removed elements is added to the height of the appropriate filler elements. It is up to you to style them so that they do not confuse the user \n. can you provide a repro?\n. Before we move everything under your roof we need to understand a few things. The major part is that we do development in coffeescript and publish the transpiled javascript to ui-utils. With the new structure will it be acceptable to continue to do so?\n\nAs to the name - I understand @ProLoser reservations on the name, but virtualize feels so nebulous and generic that it does not really explain anything. virtual-repeat? sliding repeat? not sure. Any other ideas? between what I can come up with I still like scroll better. May be it is just a habit :) \n. Alright. We (the team) took a vote on the name. Here is our list starting from what we like best:\n- `ui-vrepeat` and `ui-vrepeat-viewport` (`v` stands for virtual)\n- `ui-virtual-repeat` and `ui-virtual-repeat-viewport` (too verbose) \n- `ui-repeat` and `ui-repeat-viewport` (is it too bold?)\n\nIt goes downhill from here to `dynamic-list` `virtual-array` and somesuch\nI am still not too happy about going through another round of renaming. I would like to find a way to keep the old name at least for a while as an alias.\n\nWhat do you think guys?\n. Just created the ui-scroll repo. The code to be placed there is pretty much what we have now in the [Hill30 repo](https://github.com/Hill30/NGScroller) We will copy it to the new repo shortly. In the meantime you can review it in the Hill30 repo and tell us if there is anything you would like to be changed\n. @PowerKiKi How can I update the http://angular-ui.github.io/ page with the reference to the ui-scroll?\n. Hmm... I thought I left a comment yesterday, somehow it is not here. Anyway....\n\nI fixed all (I hope) problems in the travis build. The one with unreachable break in the switch is weird, it seems that jshint on one hand and my ide (webStorm) and coffee compiler on another have a difference in opinions as to what's the right way to do it here. Anyway, jshint seems to be happy now.\n\nThe external dependencies - yes, there is a dependency on JQuery. A list of what's needed of JQuery is in the comments in the header to the source code. Other than that there is no external dependencies.\n\nThe refactoring to eliminate the JQuery dependency - the thought occurred to me and I definitely want to do it. My question in regards to this is - what is the recommended way to do it? I was thinking of providing my own version of the necessary functions ONLY if there isn't one already available. In other words if the full JQuery is loaded I would like to use the JQuery version - is this how you plan to do it for the rest of the ui components?\n. Well I finally got around to getting rid of those dependencies. As I expected this is not as easy as it sounds primarily of the cross browser compatibility problems. I reverse engineered the jQuery code to implement what I needed. I also put some tests to make sure that I did it right, I ran the tests successfully on IE8, IE9, Firefox 20 and Chrome 28. \n\nI am not sure how sure I can (or should be) about other platforms, because of this I implemented my own versions of necessary methods in a separate file and in such a way that they will only kick in if the implementations are not already there (i.e. because the jQuery is already there).\n\nBefore I port this to javascript can you please have a look at the way I did it in my [repo](https://github.com/Hill30/NGScroller) just to see if you agree with the approach. Read the [dependencies](https://github.com/Hill30/NGScroller#dependencies) section I just added. in the Let me know\n\nWhich brings one more question. Does it make sense to turn the jqLite extras in a component of its own? Just a thought\n. Ok. I just dropped the updated javascript files in the scroller repo see above. Unfortunately I am flying completely blind here - for some reason I cannot get Travis to run the build for me on this repo. I am not sure what happened and will try to figure it out.\n. Hmm... It looks like my tests somehow broke the scrollfix tests. Apparently I do not do cleanup correctly - scroll events generated during my tests mess up scrollfix's. Or is it the scrollfix's responsibility to do the startup properly?\n. All is well. Found and fixed the bugs. Please do the merge\n. Can you give me a little more details? If I understand the stackoverflow issue correctly it is about forcing the scrollbar on the viewport  event though there is no items - well, this can be done with proper styling. Are having the same problem?\n. Hmm... It looks like a problem with height calculation of invisible (disabled) items. Can you throw together a quick repro? I will have a look \n. Thank you for the repro. \nA quick look at what's going on makes me think that the problem is that instead of operating on the html in the page, scroller messes with the html inside of the tab template which does not have a parent because it is pulled out of the page by the tab directive.\nTo fix it I will have to dig a little deeper.\n. Just patched it up. Please have a look and close the issue if you feel so. \n. No problem at all. Please do it. I am still learning the ropes of all this distribution collaboration process. Speaking of which is there a release process I should follow - I am ready to release a new version with a few impovements. Or should I just check it into the master? \n. Well, the separation between scroll and scroll-jqlite is intentional. jqlite does not have anything specific to scroll - it is an implementation of additional jquery methods necessary for scroll. If somebody uses angular over jquery, jqlite is just a bloat. \n\nI can certainly merge them, but if some other component (scrollfix?) would need a method (element.scrollTop?) an implementation will have to be provided by this component, multiplying the bloat. May be it makes sense to turn the jqlite into an extension library of jquery free implementations of some jquery methods to be used across angular ui components. \n\nSee also some discussion at the end of this thread: https://github.com/angular-ui/ui-utils/pull/51\n\nWhat do you think?\n. In other words - may be instead of merging jqlite into scroll split it apart one per method and list them in bower dependencies\n. @douglasduteil Any thoughts?\n. @douglasduteil I was thinking about something more transparent for the user of the top level component.. Something that would allow a user of scroll (or anything similar) to include (or not include if jQuery is present) the entire jqlitePlus module. What extras would go into the module though can be determined by the dependencies defined in bower.json of the components. This way the bloat would be minimized while the use would be real simple \nUnfortunately I got pulled in a different direction at the moment, but I will play a bit with this approach and let you know \n. working on it\n. I keep pushing this back - I am just pulled in too many directions. To follow your lead in using bower I was thinking about creating 2 separate branches - scroll-jquery and scroll-nojquery. The scroll-jquery branch would be for use in combination with jquery and would include only the scroll.js file. the scroll-nojquery would include both the scroll.js and jqliteExtra.js file. Unfortunately it does not solve the problem in its entirety. Also this introduces a new pattern to the repo structure which would be really beneficial only if the rest of the components would also follow it and I do not see it happening any time soon. \n\nIn other words I think of giving up on this nice idea and folding the jqliteExtra file into the scroll. At least for now. @douglasduteil @ProLoser - what do you guys think\n. resolved by [this commit](https://github.com/angular-ui/ui-utils/commit/9dbb1b185ac51bdce834405f7b43e514ad29d978)\n. Hmm... I am not sure... This certainly useful functionality can be easily implemented based on the information available in the your datasource.\n. Silly me. It is a problem with the merge to my fork. \n. The height of the viewport should be always constrained in your plunk it is not. Look at the note at the bottom of the [Description](https://github.com/Hill30/NGScroller#description) paragraph for more details\n. Thank you for your feedback. I agree, this paragraph deserves some editing. \n\nAs to the obscure exception - you also have a point. I can easily improve diagnostics for this particular case. Unfortunately, to make it really useful I would need to find a way to detect that its computed style height is 'auto'. There is no way to do that other than manually traverse hierarchy of both the elements and the css styles. At least I did not find any.\n\nIn other words if for instance you put some text inside the viewport div, the error will go away, but the scroller will still be useless - if you need full content, no need for scroller, use ng-repeat\n. Keep in mind I am about to deploy to the angular-ui a new version of the scroller. It will override your changes to the code. I plan to keep the readme though.\n. duplicate request\n. this pull request is messed up. Rather than try to fix it I will create a new one\n. currently it is not supported, but I have it on my list\n. @dhilt : can you give me an update on this one?\n. @PowerKiKi: We do development in our own repository. One of the reasons is that we prefer to do it in coffescript. As soon as we are happy with the stability we transpile the code to JS and publish it here. I just merged  the scroller v 1.1.0 here from the https://github.com/angular-ui/ui-utils/pull/372.\n\nThe version in NGScroller repo is a little more bleeding edge for the price of a little less stability. \n\nAnd to answer the original question inline block/floated are supported since v 1.0.0\n. A few things:\n1. Your code relies on the JQuery position() method, which is not available in JQLite. To keep the 'no external dependencies' promise you need either add an independent implementation of the position() method to ui-scroll-jqlite.js, or change implementation to relay on the methods already implemented there - would offset() work?\n2. My language of choice for writing the code is coffeescript. The coffescript scroller code is located [here](https://github.com/Hill30/NGScroller). If possible I would like to make changes there and then grunt build it and roll it over to angular-ui\n3. I was thinking about implementing this feature and I was thinking along the same lines you are. I just thought there should be a cleaner, more concise way to implement it - with no newRow flags, just some tweaking of the formulas in the ***clip methods\n. At this time the scroller relays on the height of the elements to stay the same as they are removed and recreated. As the element is removed its height is added to the top (or bottom) padding. As it is re-added the height is subtracted. \n\nObviously it will create problems as the item configuration changes - if the change affects the item height. I was thinking how this can be addressed and so far could not come up with anything palatable. If you can think of an approach - drop me a note\n. A thought just occurred to me. What if I preserve the height of the item as of the moment it was created and use it instead of the actual height in padding calculation. This would address the use case when the item height can change after it was created (as a result of the user expanding/collapsing something). It will not address the use case when the item will be re-created with the height different from the one it was created with though. But if the content of your datasource changes as you scroll up and down, all bets are off anyway. What do you think?\n. That sounds strange. Can you share a repro?\n. Well, it is not a bug it is a feature :). Working with the negative values of the index is a little tricky and your version of the datasource get method does not do it properly. I updated your [fiddle](http://jsfiddle.net/K2e4q/2/) to fix it. You can also have a look at an [example](http://rawgit.com/Hill30/NGScroller/master/src/examples/persistentScroll.html)\n. It is bidirectional infinite scroll. infinite in both directions. Negative indexes provide a way to make infinite scroll up (given you have data in this direction). Why would you want it? Check out an [example](http://rawgit.com/Hill30/NGScroller/master/src/examples/positionedList.html) I added recently   \n. I do not mind renaming it. One concern is backwards compatibility though. Although the component is pretty young so may be we just ignore it.\nAlso @douglasduteil can you think of a way to test the proposed changes before merging them into master?\n. @douglasduteil this is not a dup - #236 talks about .js files and it is happily closed now. @dukehoops is talking about the name of the directive(s). I see his point, naming consistency is important and I am leaning towards re-naming too. The concern, again is backwards compatibility. So should we just go ahead and rename it? \n. For logging ui-scroll uses $log.debug if available, otherwise it is using $log.log. The $log.debug method was introduced in angular v1.1.2. If your project uses this version (or later), you can disable logging by setting the debugEnabled property of the $logProvider to false\n. I am not sure I follow, what do you mean \u2018circular\u2019. Can you provide more details, may be a repro?\n\nFrom: Karan Batra-Daitch [mailto:notifications@github.com] \nSent: Friday, August 01, 2014 3:27 PM\nTo: angular-ui/ui-utils\nSubject: [ui-utils] ui.scroll stops for beginning and end (#275)\n\nI am returning arrays in dataSource.get methods. Is there a way to enforce start and stop positions so the list is not circular in nature?\n\nOtherwise, the module is working great.\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/angular-ui/ui-utils/issues/275 .  https://github.com/notifications/beacon/135903__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcyMjU0NDAyMiwiZGF0YSI6eyJpZCI6Mzg2MzI1NDd9fQ==--a5141af6a4af8caf184d769c7699a48c9807c70f.gif \n. get function is supposed to feed data in frames. The index of the first record in the overall dataset for the frame and the expected size is passed to the call as parameters. You are ignoring the get function parameters and pass this array as a result to each call, which means that your overall dataset consists of your array concatenated with itself unlimited number of times. Check the [samples page](http://rawgit.com/Hill30/NGScroller/master/src/index.html) for more details \n. The whole point of the viewport directive is to constrain the height of the area to fill out. If have more than one scroll in the viewport how this constrain would be divided between the two? on the other hand why would you need them to share the viewport? \n. You are correct. The directive was renamed recently and apparently not all references are fixed. Thank you for pointing it out\n. @douglasduteil I am not sure if I am asking the right person, but... it looks like the problem above is a aproblem with the site build process. The https://github.com/angular-ui/ui-utils/tree/master/modules/scroll/demo/index.html file where the text is supposed to come from has the directive  name fixed, but somehow in the deployed site it still shows up as ng-scroll rather than ui-scroll. Any idea?\n. thank you\n\nOn Thu, Sep 4, 2014 at 7:12 PM, Douglas Duteil notifications@github.com\nwrote:\n\n> K @mfeingold https://github.com/mfeingold\n> Fixed with a brute force commit on the gh-pages github branch\n> https://github.com/angular-ui/ui-utils/commit/2267950d265594a2042de942cd87cfad90e64f54\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/281#issuecomment-54563149.\n. Can you post a repro?\n. Can you provide a repro. Based on the info you provided it is difficult to\nsay what's wrong\n\nOn Tue, Feb 17, 2015 at 8:34 PM, Adrien Crivelli notifications@github.com\nwrote:\n\n> @cranesandcaff https://github.com/cranesandcaff if you are able to\n> create a plunkr to demonstrate the issue, you'll have more change to get\n> somebody involved to fix it.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/282#issuecomment-74800560.\n. no repro forthcoming\n. The event based scroller update functionality was never documented because I hate the API. It seems to be a clunky kludge. I believe I have a better alternative now and I will publish it within a week. The event based API will stay for the sake folks like myself who already use it, but it will stay unpublished and unloved. Stay tuned.\n. fixed in pull request https://github.com/angular-ui/ui-utils/pull/372\n. Well, did you check the examples section of the [readme](https://github.com/angular-ui/ui-utils/blob/master/modules/scroll/README.md#examples) \n. can you post a repro?\n. Will include javascript examples in the next release\n. The event based API for scroll updates was never documented and will be removed in the future. For now you can use the revision method on the datasource, or you can wait another couple of days for the new API to be published. See also #291  \n. @kkataev can you have a look?\n. @kkataev please have a look\n. This issue is fixed in the [ngscroll repo](https://github.com/Hill30/NGScroller/issues/53). I will deploy it to ui-utils shortly\n. The fix merged in on Oct 1st\n. The math involved in deciding what items to return is a bit confusing. Unfortunately there is not much to be done to simplify it because it is the direct result of how unpredictable the scrollbars can be. \n\nTo make life easier I would suggest to follow the pattern published in the examples i.e. [here](https://github.com/Hill30/NGScroller/blob/master/src/examples/persistentScroll.coffee)\n. the bug is fixed in see pull request https://github.com/angular-ui/ui-utils/pull/372\n. Nope. These elements are added to make sure the scroll bar can be used to scroll up (down) even if currently there is no elements. This will initiate a request to the server to (may be) pull more elements. Initially these elements are styled to have 0 height, but as the elements are removed as they are scrolled out of view, the height of the removed elements is added to the height of the appropriate filler elements. It is up to you to style them so that they do not confuse the user \n. can you provide a repro?\n. Before we move everything under your roof we need to understand a few things. The major part is that we do development in coffeescript and publish the transpiled javascript to ui-utils. With the new structure will it be acceptable to continue to do so?\n\nAs to the name - I understand @ProLoser reservations on the name, but virtualize feels so nebulous and generic that it does not really explain anything. virtual-repeat? sliding repeat? not sure. Any other ideas? between what I can come up with I still like scroll better. May be it is just a habit :) \n. Alright. We (the team) took a vote on the name. Here is our list starting from what we like best:\n- `ui-vrepeat` and `ui-vrepeat-viewport` (`v` stands for virtual)\n- `ui-virtual-repeat` and `ui-virtual-repeat-viewport` (too verbose) \n- `ui-repeat` and `ui-repeat-viewport` (is it too bold?)\n\nIt goes downhill from here to `dynamic-list` `virtual-array` and somesuch\nI am still not too happy about going through another round of renaming. I would like to find a way to keep the old name at least for a while as an alias.\n\nWhat do you think guys?\n. Just created the ui-scroll repo. The code to be placed there is pretty much what we have now in the [Hill30 repo](https://github.com/Hill30/NGScroller) We will copy it to the new repo shortly. In the meantime you can review it in the Hill30 repo and tell us if there is anything you would like to be changed\n. @PowerKiKi How can I update the http://angular-ui.github.io/ page with the reference to the ui-scroll?\n. ",
    "dweidner": "Oh... I see ... this fix will be of no use, if the module is changed for the suggestions in pull request #6\n. Oh... I see ... this fix will be of no use, if the module is changed for the suggestions in pull request #6\n. ",
    "jrabbe": "Not sure this works, the elements get added, but IE8 still says 'Error: Unknown runtime errorundefined', if I remove the element in question it runs fine (it was the alert element in my case).\n\nInput welcome.\n. Not sure this works, the elements get added, but IE8 still says 'Error: Unknown runtime errorundefined', if I remove the element in question it runs fine (it was the alert element in my case).\n\nInput welcome.\n. ",
    "lanterndev": "That's too bad, the packages you maintain are super valuable too. I'll look out for more ways I can help as much as  possible.\n. That's too bad, the packages you maintain are super valuable too. I'll look out for more ways I can help as much as  possible.\n. ",
    "zhon": "I am in that exact position. I am on angularjs 1.0.8 and using the latest version of angular-ui. I need ngIf or uiIf.\n. I am in that exact position. I am on angularjs 1.0.8 and using the latest version of angular-ui. I need ngIf or uiIf.\n. ",
    "msalahz": "any updates on this ? I have the same problem and i need ng-if or ui-if.\nPlease this is important.\n. @ProLoser  please this is important for any developer using AngularJS stable version for production and want to have the last version from AngularUI and I don't think this will be very hard to include ngif in the next release for the stable version because no one will include unstable versions in production.\nThanks for you concern about this important matter \n. @ProLoser Thank you for the clarification.\n. any updates on this ? I have the same problem and i need ng-if or ui-if.\nPlease this is important.\n. @ProLoser  please this is important for any developer using AngularJS stable version for production and want to have the last version from AngularUI and I don't think this will be very hard to include ngif in the next release for the stable version because no one will include unstable versions in production.\nThanks for you concern about this important matter \n. @ProLoser Thank you for the clarification.\n. ",
    "joseym": "@msalahz it's easy enough to extend Angular UI:\n\n```\nangular.module('ui.directives', []);\n```\n\nthen include this source: https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/directives/if/if.js\n\n```\nvar app = angular.module('MyApp', [\n  'ui.utils',\n  'ui.directives'\n]);\n```\n\n@ProLoser is right, tho - 1.1.x is solid.\n. [jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload) already has an angular module: https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload-angular.js\n. yeah, this is boss. Well done.\n. @msalahz it's easy enough to extend Angular UI:\n\n```\nangular.module('ui.directives', []);\n```\n\nthen include this source: https://github.com/angular-ui/angular-ui-OLDREPO/blob/master/modules/directives/if/if.js\n\n```\nvar app = angular.module('MyApp', [\n  'ui.utils',\n  'ui.directives'\n]);\n```\n\n@ProLoser is right, tho - 1.1.x is solid.\n. [jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload) already has an angular module: https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload-angular.js\n. yeah, this is boss. Well done.\n. ",
    "mcamiano": "AFAICT, the validate demo on angular-ui.github.io/ui-utils is not working properly. In fact, it frequently Aw Snap!s in Chrome with the dev console is open. \n\nWhat might be an improvement is one-off, isolated demos, instead of so many on one page. \n. AFAICT, the validate demo on angular-ui.github.io/ui-utils is not working properly. In fact, it frequently Aw Snap!s in Chrome with the dev console is open. \n\nWhat might be an improvement is one-off, isolated demos, instead of so many on one page. \n. ",
    "smajl": "E.g. reset demo is definitely NOT working in FF neither Chrome.\n\n2 problems:\n1) Seems like Angular sometimes does not even load on demo page at all.\n2) The reset CSS is wrong. The clearing element has no content, no dimensions - it can't be seen then.\n. E.g. reset demo is definitely NOT working in FF neither Chrome.\n\n2 problems:\n1) Seems like Angular sometimes does not even load on demo page at all.\n2) The reset CSS is wrong. The clearing element has no content, no dimensions - it can't be seen then.\n. ",
    "apneadiving": "sorry!\nand thanks for redirect\n. sorry!\nand thanks for redirect\n. ",
    "vinniefranco": "@pocesar Thanks, mainly because ui-mask-placeholder is not in ui-utils and I thought there was no external dependencies? \n. Thanks for clarifying, I do not see that helper directive in ui-mask. Adding tests with ui-mask-placeholder fails. Are you asking me to build a new directive? Thanks\n. Excellent. Thanks\n. Will do. As in previous code this will not break existing functionality. It's just sugar on top.\n. @ProLoser Isn't ui-mask always present? example:\n\n```\n<input ui-mask=\"99/99\">\n```\n\nWithout ui-mask present you are effectively not masking anything. Since the key chars are either A or 9 for alpha or numeric. Leveraging ui-mask substitutions without the placeholder would not work. Unless I am missing something. \n\n@pocesar I also thought about something in regards to using ui-mask-placeholder. Since there is two entry points for:\n1. The placeholder\n2.  It's substitutions\n\nYou can run into a scenario where a substitution placeholder does not match the actual placeholder itself. Example:\n\n```\n<input ui-mask=\"9999/99/99\" ui-mask-placholder=\"Y-Y-M-M\">\n```\n\nClearly not ideal. But you if think this is still better than the tokenized value within the ui-mask attribute(Impossible to be out of alignment) then I will plunge ahead.\n. @ProLoser gotcha. Thanks for clarifying, and true.. you never know what they are going to want as far as masks.\n. Tests for new functionality added. Doesn't break existing functionality. Ship it?\n. @solidspark You are correct. ui-mask before this patch was added, overrode the placeholder. https://github.com/angular-ui/ui-utils/pull/62#issuecomment-20254904 it being the vanilla attribute was discussed. What am I missing?\n. @pocesar Thanks, mainly because ui-mask-placeholder is not in ui-utils and I thought there was no external dependencies? \n. Thanks for clarifying, I do not see that helper directive in ui-mask. Adding tests with ui-mask-placeholder fails. Are you asking me to build a new directive? Thanks\n. Excellent. Thanks\n. Will do. As in previous code this will not break existing functionality. It's just sugar on top.\n. @ProLoser Isn't ui-mask always present? example:\n\n```\n<input ui-mask=\"99/99\">\n```\n\nWithout ui-mask present you are effectively not masking anything. Since the key chars are either A or 9 for alpha or numeric. Leveraging ui-mask substitutions without the placeholder would not work. Unless I am missing something. \n\n@pocesar I also thought about something in regards to using ui-mask-placeholder. Since there is two entry points for:\n1. The placeholder\n2.  It's substitutions\n\nYou can run into a scenario where a substitution placeholder does not match the actual placeholder itself. Example:\n\n```\n<input ui-mask=\"9999/99/99\" ui-mask-placholder=\"Y-Y-M-M\">\n```\n\nClearly not ideal. But you if think this is still better than the tokenized value within the ui-mask attribute(Impossible to be out of alignment) then I will plunge ahead.\n. @ProLoser gotcha. Thanks for clarifying, and true.. you never know what they are going to want as far as masks.\n. Tests for new functionality added. Doesn't break existing functionality. Ship it?\n. @solidspark You are correct. ui-mask before this patch was added, overrode the placeholder. https://github.com/angular-ui/ui-utils/pull/62#issuecomment-20254904 it being the vanilla attribute was discussed. What am I missing?\n. ",
    "solidspark": "`<input type=\"text\" placeholder=\"foo\">` is actually a valid HTML attribute, and is used as a \"placeholder\" hinting text for input fields. See: http://www.w3schools.com/tags/att_input_placeholder.asp\n. No idea. It invalidates my use case. Let us say that we have a phone number input field:\n\n```\n<input type=\"tel\" placeholder=\"888-123-4567\" ui-mask=\"{{tel}}\" ng-model=\"form.phone\">\n```\n\nIt does not allow me to use a custom placeholder AND the html placeholder.\n. Can you clean up this PR and rebase so we only have 292ada2?\n. Can you open a new PR and squash the commits to just 3175806? Then I'll merge.\n. Do you mean angular-mocks? Currently the AngularJS dependency in  bower.json is defined as >=1.0.2, but angular-mocks is ~1.0.5\n. Looks good! Thanks for that.\n. Hit the wrong button, oops.\n. Hmm. The CI fails, the tests need to be rewritten for 1.2.0RC1.\n. Looks OK, except...\n\nIn event.js:\n\n```\nif (!$scope.$$phase) {\n  $scope.$apply();\n}\n```\n\nThis is considered to be a  and may be prone to race conditions. You should think about refactoring so you don't have to rely on $scope.$apply() to trigger a digest cycle.\n. Looks good - thank you.\n. Clean commit and clean message makes for quick merges :)\n. Looks good to me!\n. @andyvr I'll be glad to merge this if you can squash the commits into one and open a new PR.\n. `<input type=\"text\" placeholder=\"foo\">` is actually a valid HTML attribute, and is used as a \"placeholder\" hinting text for input fields. See: http://www.w3schools.com/tags/att_input_placeholder.asp\n. No idea. It invalidates my use case. Let us say that we have a phone number input field:\n\n```\n<input type=\"tel\" placeholder=\"888-123-4567\" ui-mask=\"{{tel}}\" ng-model=\"form.phone\">\n```\n\nIt does not allow me to use a custom placeholder AND the html placeholder.\n. Can you clean up this PR and rebase so we only have 292ada2?\n. Can you open a new PR and squash the commits to just 3175806? Then I'll merge.\n. Do you mean angular-mocks? Currently the AngularJS dependency in  bower.json is defined as >=1.0.2, but angular-mocks is ~1.0.5\n. Looks good! Thanks for that.\n. Hit the wrong button, oops.\n. Hmm. The CI fails, the tests need to be rewritten for 1.2.0RC1.\n. Looks OK, except...\n\nIn event.js:\n\n```\nif (!$scope.$$phase) {\n  $scope.$apply();\n}\n```\n\nThis is considered to be a  and may be prone to race conditions. You should think about refactoring so you don't have to rely on $scope.$apply() to trigger a digest cycle.\n. Looks good - thank you.\n. Clean commit and clean message makes for quick merges :)\n. Looks good to me!\n. @andyvr I'll be glad to merge this if you can squash the commits into one and open a new PR.\n. ",
    "glauberramos": "is this working on the current version v0.1.1? I tried but looks like it's not working.\n. actually it works using \"placeholder\" but it adds _ after the placeholder you provided. I want a way to set a empty placeholder without the _. Any idea how to do that?\n. is this working on the current version v0.1.1? I tried but looks like it's not working.\n. actually it works using \"placeholder\" but it adds _ after the placeholder you provided. I want a way to set a empty placeholder without the _. Any idea how to do that?\n. ",
    "aleksihakli": "Right you are, added type detection and got rid of string conversion.\n. Right you are, added type detection and got rid of string conversion.\n. ",
    "mithun-daa": "I am seeing some inconsistent behaviour with Chrome - works sometimes and doesn't at times.\n. I am seeing some inconsistent behaviour with Chrome - works sometimes and doesn't at times.\n. ",
    "tobowers": ":+1: \n. :+1: \n. ",
    "rmfruit": "I agree with this 100%. It's pretty bad UX to blank the field out if it's invalid - the user can't even see what they had typed or go back and correct a simple missed keystroke.\n\nI actually commented out this single line to stop this and it works great since it's the 'blurHandler' that's doing the blank out:\n\n```\niElement.bind('blur', blurHandler);\n```\n\nI'd rather not maintain my own fork though :/\n. I agree with this 100%. It's pretty bad UX to blank the field out if it's invalid - the user can't even see what they had typed or go back and correct a simple missed keystroke.\n\nI actually commented out this single line to stop this and it works great since it's the 'blurHandler' that's doing the blank out:\n\n```\niElement.bind('blur', blurHandler);\n```\n\nI'd rather not maintain my own fork though :/\n. ",
    "benbenwilde": "if you look at the plunker (for some reason you need to hit stop and then run and then try it) then you can see what happens. if you edit the code where it says \"ng-required\" to just be \"required,\" then run it again, the problem goes away.\n. if you look at the plunker (for some reason you need to hit stop and then run and then try it) then you can see what happens. if you edit the code where it says \"ng-required\" to just be \"required,\" then run it again, the problem goes away.\n. ",
    "dhbaird": "Closing this PR due to jshint fixes applied in this new PR: https://github.com/angular-ui/ui-utils/pull/73\n. The usage of uiIncludeFragment is like this (suggested by @petebacondarwin in angular/angular.js#3151):\n\n``` html\n<ui-include-fragment src=\"'my/url/to/partial/file'\" fragment=\"'#id-to-fragment'\"></ui-include-fragment>\n```\n\nNote - the fragment is limited to whatever angular.element().find() can do, and therefore can only support full selectors if jQuery is included. Without jQuery, it will be limited to simple element-name selectors only.\n\nEDIT: the \"fragment\" attribute is an angular expression, and so must be quoted if to be taken as a string, as also is the \"src\" attribute.\n. Agreed - the only reasoning I see for the long name is to distinguish it from `ng-include`. I'll throw in a patch to shorten the name. Let me know if it is desirable for me to squash the patches and I'll do so.\n. Squashed PR here: #77.\n. Super, you guys are terrific. I'll get a demo added soon!\n. @douglasduteil - Good catch! When fragment is falsey (empty string, undefined, etc.), it turns into an infinite loop, right? That make sense to me. But the weird thing is that when I actually test this code in Firefox and Chrome, it only includes the partial content once (no infinite loop). Why it does not recurse has me pretty confused, and that's how this issue slipped right past me.\n\n#85 should resolve this, by refactoring the partials into a separate file 'include-partials.html'.\n\nAnother question is raised here: what should happen when fragment is specified, but its value is falsey or invalid (not a string)? I'm inclined that it should include nothing (unlike what it does now, which is to include the whole document).\n. Wow, our fixes are basically the same. I'm just going to close my PR because your's looks great.\n. What is the benefit of splitting the watch function into two watch functions (ngIncludeWatchSourceAction() and ngIncludeWatchFragmentAction())? It looks like you are wanting to avoid calling $http.get() on fragment changes, but what if the user cleared the $templateCache? Then a $http.get() will be necessary. Is there a good reason really to separate the watcher into two functions like this? Already it is causing more complexity and has a few bug regressions. I'm just guessing here what your goal is, so let me know if I'm missing the point.\n\nI'm just taking this one piece at a time. I haven't reviewed the additional unit tests yet.\n. Closing this PR due to jshint fixes applied in this new PR: https://github.com/angular-ui/ui-utils/pull/73\n. The usage of uiIncludeFragment is like this (suggested by @petebacondarwin in angular/angular.js#3151):\n\n``` html\n<ui-include-fragment src=\"'my/url/to/partial/file'\" fragment=\"'#id-to-fragment'\"></ui-include-fragment>\n```\n\nNote - the fragment is limited to whatever angular.element().find() can do, and therefore can only support full selectors if jQuery is included. Without jQuery, it will be limited to simple element-name selectors only.\n\nEDIT: the \"fragment\" attribute is an angular expression, and so must be quoted if to be taken as a string, as also is the \"src\" attribute.\n. Agreed - the only reasoning I see for the long name is to distinguish it from `ng-include`. I'll throw in a patch to shorten the name. Let me know if it is desirable for me to squash the patches and I'll do so.\n. Squashed PR here: #77.\n. Super, you guys are terrific. I'll get a demo added soon!\n. @douglasduteil - Good catch! When fragment is falsey (empty string, undefined, etc.), it turns into an infinite loop, right? That make sense to me. But the weird thing is that when I actually test this code in Firefox and Chrome, it only includes the partial content once (no infinite loop). Why it does not recurse has me pretty confused, and that's how this issue slipped right past me.\n\n#85 should resolve this, by refactoring the partials into a separate file 'include-partials.html'.\n\nAnother question is raised here: what should happen when fragment is specified, but its value is falsey or invalid (not a string)? I'm inclined that it should include nothing (unlike what it does now, which is to include the whole document).\n. Wow, our fixes are basically the same. I'm just going to close my PR because your's looks great.\n. What is the benefit of splitting the watch function into two watch functions (ngIncludeWatchSourceAction() and ngIncludeWatchFragmentAction())? It looks like you are wanting to avoid calling $http.get() on fragment changes, but what if the user cleared the $templateCache? Then a $http.get() will be necessary. Is there a good reason really to separate the watcher into two functions like this? Already it is causing more complexity and has a few bug regressions. I'm just guessing here what your goal is, so let me know if I'm missing the point.\n\nI'm just taking this one piece at a time. I haven't reviewed the additional unit tests yet.\n. ",
    "nateabele": "The naming seems a bit redundant. Why not just:\n\n``` html\n<ui-include src=\"'my/url/to/partial/file'\" fragment=\"'#id-to-fragment'\"></ui-include>\n```\n\n?\n. @dhbaird Yeah, please do. Thanks.\n. @ProLoser Ping. This looks good to me but could use your review.\n. Hah, nice.\n. The naming seems a bit redundant. Why not just:\n\n``` html\n<ui-include src=\"'my/url/to/partial/file'\" fragment=\"'#id-to-fragment'\"></ui-include>\n```\n\n?\n. @dhbaird Yeah, please do. Thanks.\n. @ProLoser Ping. This looks good to me but could use your review.\n. Hah, nice.\n. ",
    "pkozlowski-opensource": "http://stackoverflow.com/a/16046254/1418796\n. This issue belongs here: https://github.com/angular-ui/bootstrap\n. http://stackoverflow.com/a/16046254/1418796\n. This issue belongs here: https://github.com/angular-ui/bootstrap\n. ",
    "arkadiuszputko": "This allows to filter only through one specific attribute, but it is not possible to listed more than one in filter:{}.\nSo when You want to filter through all properties except one, or two is impossible.\n\nhttp://plnkr.co/edit/kTgxwb1Mx9eoSqBmvoE3?p=preview - this still filter only through name, not through name and desc\n. This allows to filter only through one specific attribute, but it is not possible to listed more than one in filter:{}.\nSo when You want to filter through all properties except one, or two is impossible.\n\nhttp://plnkr.co/edit/kTgxwb1Mx9eoSqBmvoE3?p=preview - this still filter only through name, not through name and desc\n. ",
    "Voxelot": "This issue is a top ranked result by Google when searching for variable length numbers. Please include a reference to documentation that describes this behaviour for future users of this library.\n. This issue is a top ranked result by Google when searching for variable length numbers. Please include a reference to documentation that describes this behaviour for future users of this library.\n. ",
    "perqa": "Sorry. This is not a problem with angular-ui, only with the installation instructions in your README section. The command \nnpm -g install grunt-cli karma bower\nfails due to some dependencies related to karma and its plugins. The installation of these is never completed. \n. Sorry. This is not a problem with angular-ui, only with the installation instructions in your README section. The command \nnpm -g install grunt-cli karma bower\nfails due to some dependencies related to karma and its plugins. The installation of these is never completed. \n. ",
    "jcampbell1": "Here is a demo:\n\nGo to this page:\n\nhttp://angular-ui.github.io/ui-utils/\n\n1) Go to the highlight section.\n2) type a . (period) into the search box.\n\nWatch as the error console goes haywire, and causes angular to crash in\nsome cases.\n\nOn Tue, Jul 30, 2013 at 5:47 PM, Dean Sofer notifications@github.comwrote:\n\n> Can you create a demo or test or code-sample of the use-case you are\n> addressing?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/83#issuecomment-21825533\n> .\n. I am not sure how you guys handle the testing, but I suppose you need\nsomething like:\n\nit('should be safe to highlight regex chars', function () {\n      expect(highlightFilter('match a period . is fine',\n'.')).toEqual('match a period <span class=\"ui-match\">.</span> is fine');\n});\n\nOn Tue, Jul 30, 2013 at 7:18 PM, John Campbell jcampbell1@gmail.com wrote:\n\n> Here is a demo:\n> \n> Go to this page:\n> \n> http://angular-ui.github.io/ui-utils/\n> \n> 1) Go to the highlight section.\n> 2) type a . (period) into the search box.\n> \n> Watch as the error console goes haywire, and causes angular to crash in\n> some cases.\n> \n> On Tue, Jul 30, 2013 at 5:47 PM, Dean Sofer notifications@github.comwrote:\n> \n> > Can you create a demo or test or code-sample of the use-case you are\n> > addressing?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/83#issuecomment-21825533\n> > .\n. Here is a demo:\n\nGo to this page:\n\nhttp://angular-ui.github.io/ui-utils/\n\n1) Go to the highlight section.\n2) type a . (period) into the search box.\n\nWatch as the error console goes haywire, and causes angular to crash in\nsome cases.\n\nOn Tue, Jul 30, 2013 at 5:47 PM, Dean Sofer notifications@github.comwrote:\n\n> Can you create a demo or test or code-sample of the use-case you are\n> addressing?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/83#issuecomment-21825533\n> .\n. I am not sure how you guys handle the testing, but I suppose you need\nsomething like:\n\nit('should be safe to highlight regex chars', function () {\n      expect(highlightFilter('match a period . is fine',\n'.')).toEqual('match a period <span class=\"ui-match\">.</span> is fine');\n});\n\nOn Tue, Jul 30, 2013 at 7:18 PM, John Campbell jcampbell1@gmail.com wrote:\n\n> Here is a demo:\n> \n> Go to this page:\n> \n> http://angular-ui.github.io/ui-utils/\n> \n> 1) Go to the highlight section.\n> 2) type a . (period) into the search box.\n> \n> Watch as the error console goes haywire, and causes angular to crash in\n> some cases.\n> \n> On Tue, Jul 30, 2013 at 5:47 PM, Dean Sofer notifications@github.comwrote:\n> \n> > Can you create a demo or test or code-sample of the use-case you are\n> > addressing?\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/83#issuecomment-21825533\n> > .\n. ",
    "heliodor": "Ok, done. https://github.com/angular-ui/ui-scrollpoint/issues/1\n. Ok, done. https://github.com/angular-ui/ui-scrollpoint/issues/1\n. ",
    "krozestwinski": "Seems like a good solution for now - I am going to use it for my local version of ui-validate. Thx luke88jones. \n\nIt would be nice if all the validators could run all first using the view value and then directive would accumulate all results, set validity for certain keys and at the end return viewValue only if all validators pass. \n\nAlso the watch validator should always trigger validators with the actual viewValue rather than the value from model which could be undefined.\n. Seems like a good solution for now - I am going to use it for my local version of ui-validate. Thx luke88jones. \n\nIt would be nice if all the validators could run all first using the view value and then directive would accumulate all results, set validity for certain keys and at the end return viewValue only if all validators pass. \n\nAlso the watch validator should always trigger validators with the actual viewValue rather than the value from model which could be undefined.\n. ",
    "raykin": "create a new clean one\n. eval was prevent by Travis, any solutions to replace eval? I'm not sure about it\n. direct write in ui-options attribute may not always fine, sometime we may wanna attach the options value to scope.\nBut  $scope.opts = \"arg1, arg2, 'arg3', {arg4: true}\" will be failed. In this case the linkOptions = [\"arg1, arg2, 'arg3', {arg4: true}\"] ,not as expected [arg1, arg2, 'arg3' , {arg4: true}]\n. my usage is dynamic invoke jquery-ui effect depending on the $scope changes.\nbefore I read the source, I consider the ui-options can be binding to the $scope attributes, \nafter read source I realize the ui-options is an init option, never changed after init.\nI think it's a common requirement to invoke effect jquery fn in a dynamic way, ex: dynamic effect style and dynamic run the effect function. \nBut maybe for such a requirement, a new module which stand on jq will be good chooice.  \n. create a new clean one\n. eval was prevent by Travis, any solutions to replace eval? I'm not sure about it\n. direct write in ui-options attribute may not always fine, sometime we may wanna attach the options value to scope.\nBut  $scope.opts = \"arg1, arg2, 'arg3', {arg4: true}\" will be failed. In this case the linkOptions = [\"arg1, arg2, 'arg3', {arg4: true}\"] ,not as expected [arg1, arg2, 'arg3' , {arg4: true}]\n. my usage is dynamic invoke jquery-ui effect depending on the $scope changes.\nbefore I read the source, I consider the ui-options can be binding to the $scope attributes, \nafter read source I realize the ui-options is an init option, never changed after init.\nI think it's a common requirement to invoke effect jquery fn in a dynamic way, ex: dynamic effect style and dynamic run the effect function. \nBut maybe for such a requirement, a new module which stand on jq will be good chooice.  \n. ",
    "stevenao": "The problem still exists in IE11. See http://jsfiddle.net/9Rqp7/. It is getting focus and then blur in IE11. \n. The problem still exists in IE11. See http://jsfiddle.net/9Rqp7/. It is getting focus and then blur in IE11. \n. ",
    "coquin": "Sorry, wrong solution of this problem. Can't fix this properly without bugs in other browsers. Still working on it.\n. Sorry, wrong solution of this problem. Can't fix this properly without bugs in other browsers. Still working on it.\n. ",
    "colinmutter": "Squashed under new branch @ PR: https://github.com/angular-ui/ui-utils/pull/103\n. Squashed under new branch @ PR: https://github.com/angular-ui/ui-utils/pull/103\n. ",
    "tarjei": "I guess I want to be able to install it alongside 1.2rc - which might be impossible :)\n\nIt sounds like @solidspark had a good suggestion. \n. I guess I want to be able to install it alongside 1.2rc - which might be impossible :)\n\nIt sounds like @solidspark had a good suggestion. \n. ",
    "dymk": "And should this be an issue opened on ui-utils or ui-router? I'm not 100% on it, but I put it here because my gut says it's related more to ui-utils. \n. Suggested behavior change, which will technically break specs (`routeSpec.js:90`): Allow ui-route to be used on an element with no href yet, watch for changes to the element, and when an href or equivalent is added to the route, determine if $uiRoute is true or false. \n\nI'd implement this myself and submit a PR, however I do not know enough about angular quite yet to figure out how to achieve this. \n. Attempt at a fix here: https://github.com/angular-ui/ui-utils/pull/102\n\nHowever it seems the CI is running an old version of Karma? \n. I see the CI fails. Perhaps the version of Karma it uses should be updated to an up-to-date distribution? \n. And should this be an issue opened on ui-utils or ui-router? I'm not 100% on it, but I put it here because my gut says it's related more to ui-utils. \n. Suggested behavior change, which will technically break specs (`routeSpec.js:90`): Allow ui-route to be used on an element with no href yet, watch for changes to the element, and when an href or equivalent is added to the route, determine if $uiRoute is true or false. \n\nI'd implement this myself and submit a PR, however I do not know enough about angular quite yet to figure out how to achieve this. \n. Attempt at a fix here: https://github.com/angular-ui/ui-utils/pull/102\n\nHowever it seems the CI is running an old version of Karma? \n. I see the CI fails. Perhaps the version of Karma it uses should be updated to an up-to-date distribution? \n. ",
    "SailingYYC": "+1\n. +1\n. ",
    "aledelgo": "+1 for implementing autodetect of ui-sref\n. +1 for implementing autodetect of ui-sref\n. ",
    "goncalvesjoao": "+1 please ^^\n. +1 please ^^\n. ",
    "leesei": "[Official documentation](https://npmjs.org/doc/misc/semver.html) from npm.\nHope that helps.\n. [Official documentation](https://npmjs.org/doc/misc/semver.html) from npm.\nHope that helps.\n. ",
    "thebravedave": "I think this is a great idea. Anything farther on this?\n. I think this is a great idea. Anything farther on this?\n. ",
    "marklagendijk": "The reason that I didn't commit this yet, was that my tests rely on a newer version of angular-mocks (1.2.x) than which ui-utils currently uses.\nNow that 1.2 has been officially released (and is at 1.2.2 already) it would make sense to upgrade the AngularJs version of this repo. I will look into this, and see if it can be upgraded easily.\n. Wow, that was quick!\n. @ccnokes I am glad you like it. The reason I created is that I needed it myself, and it didn't exist yet.\nI know and have used the jQuery plugin, it is also where I got the name from.\n\nHowever, Angular is not jQuery, and that is why things work slightly different. For example the menu use case (which is actualy the usecase I needed hoverIntent for) can be solved as follows:\n\n``` html\n<nav ui-hoverintent=\"menuOpen=true\" ng-mouseleave=\"menuOpen = false\">\n<!-- Menu Content -->\n</nav>\n```\n\nIf you have any more questions, let me know.\n. The reason that I didn't commit this yet, was that my tests rely on a newer version of angular-mocks (1.2.x) than which ui-utils currently uses.\nNow that 1.2 has been officially released (and is at 1.2.2 already) it would make sense to upgrade the AngularJs version of this repo. I will look into this, and see if it can be upgraded easily.\n. Wow, that was quick!\n. @ccnokes I am glad you like it. The reason I created is that I needed it myself, and it didn't exist yet.\nI know and have used the jQuery plugin, it is also where I got the name from.\n\nHowever, Angular is not jQuery, and that is why things work slightly different. For example the menu use case (which is actualy the usecase I needed hoverIntent for) can be solved as follows:\n\n``` html\n<nav ui-hoverintent=\"menuOpen=true\" ng-mouseleave=\"menuOpen = false\">\n<!-- Menu Content -->\n</nav>\n```\n\nIf you have any more questions, let me know.\n. ",
    "olsonpm": "Just for future readers - the above may be exactly what you're looking for, but if you feel comfortable using jquery plugins with angular then I suggest taking a look at a more comprehensive \"hover intent\" library:\n\nhttps://github.com/tristen/hoverintent\n. Just for future readers - the above may be exactly what you're looking for, but if you feel comfortable using jquery plugins with angular then I suggest taking a look at a more comprehensive \"hover intent\" library:\n\nhttps://github.com/tristen/hoverintent\n. ",
    "drubino": "When using this directive, I include the following lines in the appropriate places:\nelement.addClass('hover') \nelement.removeClass('hover')\n\nIt allows elements to be easily styled in CSS using the hoverIntent directive:\n.class:hover { } becomes\n.class.hover { }\n. When using this directive, I include the following lines in the appropriate places:\nelement.addClass('hover') \nelement.removeClass('hover')\n\nIt allows elements to be easily styled in CSS using the hoverIntent directive:\n.class:hover { } becomes\n.class.hover { }\n. ",
    "schwiet": "Fair enough. If you do come up with a better way, let me know! \n. Fair enough. If you do come up with a better way, let me know! \n. ",
    "danielepiccone": "Yes, but the directive is supposed to make it easier and reusable.\n\nHowever, the directive does not depend on jQuery, the components are old piece of code, just forgot to delete them. I just sent all the package to see if that could be of your interest. Thanks\n. Yes, but the directive is supposed to make it easier and reusable.\n\nHowever, the directive does not depend on jQuery, the components are old piece of code, just forgot to delete them. I just sent all the package to see if that could be of your interest. Thanks\n. ",
    "rainboxx": "The description of ui-utils is \"Swiss-Army-Knife of AngularJS tools (with no external dependencies!)\". I'd love to see a drag and drop file upload widget from AngularUI without the need of jQuery.\n. The description of ui-utils is \"Swiss-Army-Knife of AngularJS tools (with no external dependencies!)\". I'd love to see a drag and drop file upload widget from AngularUI without the need of jQuery.\n. ",
    "SQiShER": ":+1: This is exactly what I needed!\n. +1 this would be very useful!\n. :+1: This is exactly what I needed!\n. +1 this would be very useful!\n. ",
    "victorb": "This could be fixed with something like debounce. I think it's about all the code that gets executed each time you scroll.\n\n```\n      $target.bind('scroll', function () {\n        // if pageYOffset is defined use it, otherwise use other crap for IE\n        var offset;\n        if (angular.isDefined($window.pageYOffset)) {\n          offset = $window.pageYOffset;\n        } else {\n          var iebody = (document.compatMode && document.compatMode !== \"BackCompat\") ? document.documentElement : document.body;\n          offset = iebody.scrollTop;\n        }\n        if (!elm.hasClass('ui-scrollfix') && offset > attrs.uiScrollfix) {\n          elm.addClass('ui-scrollfix');\n        } else if (elm.hasClass('ui-scrollfix') && offset < attrs.uiScrollfix) {\n          elm.removeClass('ui-scrollfix');\n        }\n      });\n```\n\nMaybe stealing some functionality from underscore.js would help\n\n```\n_.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = new Date();\n      var later = function() {\n        var last = (new Date()) - timestamp;\n        if (last < wait) {\n          timeout = setTimeout(later, wait - last);\n        } else {\n          timeout = null;\n          if (!immediate) result = func.apply(context, args);\n        }\n      };\n      var callNow = immediate && !timeout;\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      if (callNow) result = func.apply(context, args);\n      return result;\n    };\n  };\n```\n\nIt would be a shame to put it in the scrollfix.js though.\n. Oh, didn't actually tried it out. Was the first reaction when I saw\nsomething binded to scroll.\n\nOn Thu, Oct 17, 2013 at 11:00 PM, K.Adam White notifications@github.comwrote:\n\n> It sounds like the issue isn't about performance, but about cleaning up\n> after ourselves? Looks like doing something like the below in the\n> directive's link fn would resolve the issue @btiernayhttps://github.com/btiernayis describing:\n> \n> var scrollHandler = function () {\n>   // if pageYOffset is defined use it, otherwise use other crap for IE\n>   var offset;\n>   if (angular.isDefined($window.pageYOffset)) {\n>     offset = $window.pageYOffset;\n>   } else {\n>     var iebody = (document.compatMode && document.compatMode !== \"BackCompat\") ? document.documentElement : document.body;\n>     offset = iebody.scrollTop;\n>   }\n>   if (!elm.hasClass('ui-scrollfix') && offset > attrs.uiScrollfix) {\n>     elm.addClass('ui-scrollfix');\n>   } else if (elm.hasClass('ui-scrollfix') && offset < attrs.uiScrollfix) {\n>     elm.removeClass('ui-scrollfix');\n>   }});\n> $target.on('scroll', scrollHandler);\n> // Clean up the bound event handler when this scope is removedscope.$on('$destroy', function() {\n>   $target.off('scroll', scrollHandler);}\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/119#issuecomment-26552463\n> .\n. This could be fixed with something like debounce. I think it's about all the code that gets executed each time you scroll.\n\n```\n      $target.bind('scroll', function () {\n        // if pageYOffset is defined use it, otherwise use other crap for IE\n        var offset;\n        if (angular.isDefined($window.pageYOffset)) {\n          offset = $window.pageYOffset;\n        } else {\n          var iebody = (document.compatMode && document.compatMode !== \"BackCompat\") ? document.documentElement : document.body;\n          offset = iebody.scrollTop;\n        }\n        if (!elm.hasClass('ui-scrollfix') && offset > attrs.uiScrollfix) {\n          elm.addClass('ui-scrollfix');\n        } else if (elm.hasClass('ui-scrollfix') && offset < attrs.uiScrollfix) {\n          elm.removeClass('ui-scrollfix');\n        }\n      });\n```\n\nMaybe stealing some functionality from underscore.js would help\n\n```\n_.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = new Date();\n      var later = function() {\n        var last = (new Date()) - timestamp;\n        if (last < wait) {\n          timeout = setTimeout(later, wait - last);\n        } else {\n          timeout = null;\n          if (!immediate) result = func.apply(context, args);\n        }\n      };\n      var callNow = immediate && !timeout;\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      if (callNow) result = func.apply(context, args);\n      return result;\n    };\n  };\n```\n\nIt would be a shame to put it in the scrollfix.js though.\n. Oh, didn't actually tried it out. Was the first reaction when I saw\nsomething binded to scroll.\n\nOn Thu, Oct 17, 2013 at 11:00 PM, K.Adam White notifications@github.comwrote:\n\n> It sounds like the issue isn't about performance, but about cleaning up\n> after ourselves? Looks like doing something like the below in the\n> directive's link fn would resolve the issue @btiernayhttps://github.com/btiernayis describing:\n> \n> var scrollHandler = function () {\n>   // if pageYOffset is defined use it, otherwise use other crap for IE\n>   var offset;\n>   if (angular.isDefined($window.pageYOffset)) {\n>     offset = $window.pageYOffset;\n>   } else {\n>     var iebody = (document.compatMode && document.compatMode !== \"BackCompat\") ? document.documentElement : document.body;\n>     offset = iebody.scrollTop;\n>   }\n>   if (!elm.hasClass('ui-scrollfix') && offset > attrs.uiScrollfix) {\n>     elm.addClass('ui-scrollfix');\n>   } else if (elm.hasClass('ui-scrollfix') && offset < attrs.uiScrollfix) {\n>     elm.removeClass('ui-scrollfix');\n>   }});\n> $target.on('scroll', scrollHandler);\n> // Clean up the bound event handler when this scope is removedscope.$on('$destroy', function() {\n>   $target.off('scroll', scrollHandler);}\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/119#issuecomment-26552463\n> .\n. ",
    "kadamwhite": "It sounds like the issue isn't about performance, but about cleaning up after ourselves? Looks like doing something like the below in the directive's link fn would resolve the issue @btiernay is describing:\n\n``` javascript\nvar scrollHandler = function () {\n  // if pageYOffset is defined use it, otherwise use other crap for IE\n  var offset;\n  if (angular.isDefined($window.pageYOffset)) {\n    offset = $window.pageYOffset;\n  } else {\n    var iebody = (document.compatMode && document.compatMode !== \"BackCompat\") ? document.documentElement : document.body;\n    offset = iebody.scrollTop;\n  }\n  if (!elm.hasClass('ui-scrollfix') && offset > attrs.uiScrollfix) {\n    elm.addClass('ui-scrollfix');\n  } else if (elm.hasClass('ui-scrollfix') && offset < attrs.uiScrollfix) {\n    elm.removeClass('ui-scrollfix');\n  }\n});\n\n$target.on('scroll', scrollHandler);\n\n// Clean up the bound event handler when this scope is removed\nscope.$on('$destroy', function() {\n  $target.off('scroll', scrollHandler);\n}\n```\n. Today i learned that Github will pick every instance of a commit referencing an issue, even if you force-push to a branch to overwrite that commit. That said, #124 has a proposed fix for this. I'd rather not merge without another pair of eyes, so input from @ProLoser or others is welcome!\n. My laptop died so I didn't get a chance to revisit those tests. Will try to work on that soon and submit a new PR to remove the dependence on `$._data`.\n. Interesting! @ProLoser noted, I'll catch up on the discussion. In the meantime, I did find a way to test this without _data: https://github.com/kadamwhite/ui-utils/compare/issue;119-scrollfix-memory-leak\n\nLooks like a PR wouldn't be useful since this may be going away, but I can send if desired.\n. It sounds like the issue isn't about performance, but about cleaning up after ourselves? Looks like doing something like the below in the directive's link fn would resolve the issue @btiernay is describing:\n\n``` javascript\nvar scrollHandler = function () {\n  // if pageYOffset is defined use it, otherwise use other crap for IE\n  var offset;\n  if (angular.isDefined($window.pageYOffset)) {\n    offset = $window.pageYOffset;\n  } else {\n    var iebody = (document.compatMode && document.compatMode !== \"BackCompat\") ? document.documentElement : document.body;\n    offset = iebody.scrollTop;\n  }\n  if (!elm.hasClass('ui-scrollfix') && offset > attrs.uiScrollfix) {\n    elm.addClass('ui-scrollfix');\n  } else if (elm.hasClass('ui-scrollfix') && offset < attrs.uiScrollfix) {\n    elm.removeClass('ui-scrollfix');\n  }\n});\n\n$target.on('scroll', scrollHandler);\n\n// Clean up the bound event handler when this scope is removed\nscope.$on('$destroy', function() {\n  $target.off('scroll', scrollHandler);\n}\n```\n. Today i learned that Github will pick every instance of a commit referencing an issue, even if you force-push to a branch to overwrite that commit. That said, #124 has a proposed fix for this. I'd rather not merge without another pair of eyes, so input from @ProLoser or others is welcome!\n. My laptop died so I didn't get a chance to revisit those tests. Will try to work on that soon and submit a new PR to remove the dependence on `$._data`.\n. Interesting! @ProLoser noted, I'll catch up on the discussion. In the meantime, I did find a way to test this without _data: https://github.com/kadamwhite/ui-utils/compare/issue;119-scrollfix-memory-leak\n\nLooks like a PR wouldn't be useful since this may be going away, but I can send if desired.\n. ",
    "btiernay": "Ya, cleanup was the problem I was trying to report.\n. Ya, cleanup was the problem I was trying to report.\n. ",
    "mhworth": "I just noticed the Travis CI build failed when using PhantomJS; I looked into it on my machine, and apparently setting the scroll position of the window doesn't work in PhantomJS. It just always stays at zero. Unfortunately, my unit tests require that since I need to simulate scrolling past elements...\n\nHappy to make changes if anyone has suggestions!\n. Sure, no problem. I'll get to work on it.\n. Okay, so I made it so that ui-waypoints will behave like ui-scrollfix in the case where you pass it similar arguments. I.e., it will add the class 'ui-scrollfix' when you scroll pass the element if you just add ui-waypoints to an element, ui-waypoints=\"+300\" behaves the same way as ui-scrollfix, etc.\n\nLet me know if you'd like any other changes\n. No problem, take your time. Feedback on the API is welcome/encouraged. \n. Thanks for the review! Here's a proposal for some changes, what do you think?\n\n### Summary\n- Rename ui-waypoints to ui-scrollpoint\n- Make an API that looks like `<div ui-scrollpoint=\"<expression>\" [ui-scrollpoint-options=\"<object expression>\"]/>`\n- Pass $direction and $position as scope elements while evaluating the expression (no more $element)\n- I'll review the pull requests and integrate the fixes\n\n### Rationale\n\nI'll start off describing the particular use case I have for this module and then respond to your comments. I had a customer who wanted a fixed navigation that fixes itself to the top of the screen when you scroll past it, and highlights each link in the navigation as you scroll past it on the page. So I wanted something that would fire a callback whenever the appropriate points were passed on the page so that I could add/remove classes from the navigation.\n\nNow onto your comments. Agree about the name being not very descriptive. I picked waypoints so people could find this module if they are looking for functionality similar to the jquery waypoints module. Happy to change the name though, as I agree ui-waypoints doesn't describe what it actually does very well.\n\nI really like the idea of having syntax such as `<div ui-waypoint=\"fixed=($direction=='up')\" ng-class=\"{fixed:fixed}\">`. That is nicely concise and general. The tricky part for that is establishing the best way to pass options like the offsets and whether or not to dynamically update the position of the dom element. Maybe attributes are the best way? That's what I would lean toward at least, but it seems like `<div ui-waypoint=\"expr\" ui-waypoint-someattr=\"otherExpr\" />` feels a little bit ugly. I can't think of anything better though, at least nothing that would keep the simplicity of just providing an expression to evaluate as the primary interface.\n\nI think we need $direction (or equivalent) because it lets you do things like remove a class when you scroll up past it and add one when you scroll down past it (my use case). \n\nGetting rid of $element and replacing it with $position is a good idea (you were right about the reason I was passing it).\n. All sounds good to me. \n\nOne last concern. There is a slight mismatch of semantics for when the event is fired between scrollspy and ui-scrollfix. ui-scrollfix checks where the position is on compile, while scrollspy checks it each time a scroll event occurs. What this means is that if you assign position: fixed to an element, if you're using the scrollspy method, you'll never get another trigger because the position no longer has a fixed offset. There are three ways to deal with this that I can think of:\n- Rely on the user to set a static offset for this situation\n- Provide an option to set which way it triggers\n- Introspect the element to figure out when it's fixed position and automatically adjust (this sounds brittle)\n\nAny preference?\n\nI'll start working on the other changes in the meantime.\n. I got what you meant about the API, and think that's a good way to do it. I'm talking about the issue you mentioned at the end.\n\nui-scrollfix remembers the offset that the element has at compile time and never touches it again, so even if you add pos:fixed to it, it will remove the class whenever you pass the original point that the div was when the page rendered. scrollspy updates the element offset on every scroll event, so if we use that approach, it'll either never get another event once it's assigned pos:fixed (which for our example means $direction will never be up, so fixed will never be false), or it will thrash back and forth, unless the user explicitly sets the offset to fire on. I.e., if the nav is at offsetTop = 100, the user scrolls past it, and assigns `position: fixed; top:0px`, then offsetTop = 0, so the event will not fire again at pageYOffset = 100, as the user probably would expect.\n\nAlso, I think the expression would need to be a little more complicated to get exactly the behavior the scrollspy provides. Scrollspy would essentially assign \"active='item1'\" immediately when you scroll up past item two, so we'd need something more like\n\n``` html\n<h1 ui-scrollpoint=\"active='item1'\">Item 1</h1>\n...\n<h1 ui-scrollpoint=\"active=$direction=='down' ? 'item2' : 'item1'\">Item 2</h1>\n```\n. I'm planning on working on it early next year, no time until then to work on it. Plan is to put out a second version in the first couple of weeks of January.\n. I just noticed the Travis CI build failed when using PhantomJS; I looked into it on my machine, and apparently setting the scroll position of the window doesn't work in PhantomJS. It just always stays at zero. Unfortunately, my unit tests require that since I need to simulate scrolling past elements...\n\nHappy to make changes if anyone has suggestions!\n. Sure, no problem. I'll get to work on it.\n. Okay, so I made it so that ui-waypoints will behave like ui-scrollfix in the case where you pass it similar arguments. I.e., it will add the class 'ui-scrollfix' when you scroll pass the element if you just add ui-waypoints to an element, ui-waypoints=\"+300\" behaves the same way as ui-scrollfix, etc.\n\nLet me know if you'd like any other changes\n. No problem, take your time. Feedback on the API is welcome/encouraged. \n. Thanks for the review! Here's a proposal for some changes, what do you think?\n\n### Summary\n- Rename ui-waypoints to ui-scrollpoint\n- Make an API that looks like `<div ui-scrollpoint=\"<expression>\" [ui-scrollpoint-options=\"<object expression>\"]/>`\n- Pass $direction and $position as scope elements while evaluating the expression (no more $element)\n- I'll review the pull requests and integrate the fixes\n\n### Rationale\n\nI'll start off describing the particular use case I have for this module and then respond to your comments. I had a customer who wanted a fixed navigation that fixes itself to the top of the screen when you scroll past it, and highlights each link in the navigation as you scroll past it on the page. So I wanted something that would fire a callback whenever the appropriate points were passed on the page so that I could add/remove classes from the navigation.\n\nNow onto your comments. Agree about the name being not very descriptive. I picked waypoints so people could find this module if they are looking for functionality similar to the jquery waypoints module. Happy to change the name though, as I agree ui-waypoints doesn't describe what it actually does very well.\n\nI really like the idea of having syntax such as `<div ui-waypoint=\"fixed=($direction=='up')\" ng-class=\"{fixed:fixed}\">`. That is nicely concise and general. The tricky part for that is establishing the best way to pass options like the offsets and whether or not to dynamically update the position of the dom element. Maybe attributes are the best way? That's what I would lean toward at least, but it seems like `<div ui-waypoint=\"expr\" ui-waypoint-someattr=\"otherExpr\" />` feels a little bit ugly. I can't think of anything better though, at least nothing that would keep the simplicity of just providing an expression to evaluate as the primary interface.\n\nI think we need $direction (or equivalent) because it lets you do things like remove a class when you scroll up past it and add one when you scroll down past it (my use case). \n\nGetting rid of $element and replacing it with $position is a good idea (you were right about the reason I was passing it).\n. All sounds good to me. \n\nOne last concern. There is a slight mismatch of semantics for when the event is fired between scrollspy and ui-scrollfix. ui-scrollfix checks where the position is on compile, while scrollspy checks it each time a scroll event occurs. What this means is that if you assign position: fixed to an element, if you're using the scrollspy method, you'll never get another trigger because the position no longer has a fixed offset. There are three ways to deal with this that I can think of:\n- Rely on the user to set a static offset for this situation\n- Provide an option to set which way it triggers\n- Introspect the element to figure out when it's fixed position and automatically adjust (this sounds brittle)\n\nAny preference?\n\nI'll start working on the other changes in the meantime.\n. I got what you meant about the API, and think that's a good way to do it. I'm talking about the issue you mentioned at the end.\n\nui-scrollfix remembers the offset that the element has at compile time and never touches it again, so even if you add pos:fixed to it, it will remove the class whenever you pass the original point that the div was when the page rendered. scrollspy updates the element offset on every scroll event, so if we use that approach, it'll either never get another event once it's assigned pos:fixed (which for our example means $direction will never be up, so fixed will never be false), or it will thrash back and forth, unless the user explicitly sets the offset to fire on. I.e., if the nav is at offsetTop = 100, the user scrolls past it, and assigns `position: fixed; top:0px`, then offsetTop = 0, so the event will not fire again at pageYOffset = 100, as the user probably would expect.\n\nAlso, I think the expression would need to be a little more complicated to get exactly the behavior the scrollspy provides. Scrollspy would essentially assign \"active='item1'\" immediately when you scroll up past item two, so we'd need something more like\n\n``` html\n<h1 ui-scrollpoint=\"active='item1'\">Item 1</h1>\n...\n<h1 ui-scrollpoint=\"active=$direction=='down' ? 'item2' : 'item1'\">Item 2</h1>\n```\n. I'm planning on working on it early next year, no time until then to work on it. Plan is to put out a second version in the first couple of weeks of January.\n. ",
    "ianwalter": "Yea, a lot of modules are missing from the version installed with bower.\n. Whoa, how is not using versioning a solution to this problem? Following master means that users on the same project can have different versions if they `bower install` at different times. Not to mention, this opens the possibility that there can be an update that you **don't** want which will be installed the next time you or someone else on your project does a `bower install`\n. Ok, it looks like new tags were created. Thank you.\n. Yea, a lot of modules are missing from the version installed with bower.\n. Whoa, how is not using versioning a solution to this problem? Following master means that users on the same project can have different versions if they `bower install` at different times. Not to mention, this opens the possibility that there can be an update that you **don't** want which will be installed the next time you or someone else on your project does a `bower install`\n. Ok, it looks like new tags were created. Thank you.\n. ",
    "dimirc": "You want to inject previously resolved promises to avoid loading/resolving them again each time?\n. You want to inject previously resolved promises to avoid loading/resolving them again each time?\n. ",
    "zakdances": "No, I just want to avoid doing having to nest all my code inside `then()` functions like\n\n```\nmyObject.then (myObject) ->\n    # do stuff\n```\n\nThe `$route` module already provides a way to resolve some promises before they're injected in a controller. I just want that same functionality to be available to services, filters, directives, etc, not just controllers.\n. @dimirc Now that I think about it, I think you and I are talking about the same thing. If the returned object of a promises 'then' callback could be injected instead of the promise itself, it would avoid loading/resolving them again each time as you said.\n\nHow difficult do you think this would be to implement as an Angular-ui utility?\n. No, I just want to avoid doing having to nest all my code inside `then()` functions like\n\n```\nmyObject.then (myObject) ->\n    # do stuff\n```\n\nThe `$route` module already provides a way to resolve some promises before they're injected in a controller. I just want that same functionality to be available to services, filters, directives, etc, not just controllers.\n. @dimirc Now that I think about it, I think you and I are talking about the same thing. If the returned object of a promises 'then' callback could be injected instead of the promise itself, it would avoid loading/resolving them again each time as you said.\n\nHow difficult do you think this would be to implement as an Angular-ui utility?\n. ",
    "sn0rcha": "Hmm i'm not sure this is working correctly, or I'm mis-understanding..\n\nI have this input:\n\n`<input type='text' ng-model=\"model.order_date\" ui-mask=\"99/99/9999\" model-view-value=\"true\" rel='tooltip' title='Order date' class='form-control' data-placement='bottom' required>`\n\nWhen I alert the value in the controller after change, it doesn't include the \"/\". Is that right?\n. That fiddle is working, many thanks!\n. Hmm i'm not sure this is working correctly, or I'm mis-understanding..\n\nI have this input:\n\n`<input type='text' ng-model=\"model.order_date\" ui-mask=\"99/99/9999\" model-view-value=\"true\" rel='tooltip' title='Order date' class='form-control' data-placement='bottom' required>`\n\nWhen I alert the value in the controller after change, it doesn't include the \"/\". Is that right?\n. That fiddle is working, many thanks!\n. ",
    "andyvr": "For some weird reason the directive was working fine in my project, I'll have to investigate it further. But you're absolutely right, I was applying changes to the parent scope, forgetting that mask directive does not create new scope, but uses whatever the parent is. Here is the updated jsfiddler: http://jsfiddle.net/C5esG/\n. Done: https://github.com/angular-ui/ui-utils/pull/137\n\nOn Sun, Nov 10, 2013 at 11:26 PM, Ryan Katkov notifications@github.comwrote:\n\n> @andyvr https://github.com/andyvr I'll be glad to merge this if you can\n> squash the commits into one and open a new PR.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/134#issuecomment-28173471\n> .\n. Everything was done correctly from my side, I believe. The pull request #137. Now its totally up to repo administrators to merge or reject my changes.\n. For some weird reason the directive was working fine in my project, I'll have to investigate it further. But you're absolutely right, I was applying changes to the parent scope, forgetting that mask directive does not create new scope, but uses whatever the parent is. Here is the updated jsfiddler: http://jsfiddle.net/C5esG/\n. Done: https://github.com/angular-ui/ui-utils/pull/137\n\nOn Sun, Nov 10, 2013 at 11:26 PM, Ryan Katkov notifications@github.comwrote:\n\n> @andyvr https://github.com/andyvr I'll be glad to merge this if you can\n> squash the commits into one and open a new PR.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/pull/134#issuecomment-28173471\n> .\n. Everything was done correctly from my side, I believe. The pull request #137. Now its totally up to repo administrators to merge or reject my changes.\n. ",
    "Yankovsky": "so?\n. so?\n. ",
    "gil": "+1 for this one... ;)\n. +1 for this one... ;)\n. ",
    "cirdes": "+1, very useful!\n. +1, very useful!\n. ",
    "basslagter": "Would be nice to add!\n. Why is this still not in the current version? \n. Would be nice to add!\n. Why is this still not in the current version? \n. ",
    "flea89": "I wrote my solution but my suggestion was to give some more flexibility to ui-utils.\nBut it doesn't matter if you think is not worthy.\n. I wrote my solution but my suggestion was to give some more flexibility to ui-utils.\nBut it doesn't matter if you think is not worthy.\n. ",
    "MAbdulHalim": "just add \"?\" like `ui-mask=\"(?9?9?9) ?9?9?9?9-?9?9?9?9\" `. just add \"?\" like `ui-mask=\"(?9?9?9) ?9?9?9?9-?9?9?9?9\" `. ",
    "soupdiver": "@ProLoser ah ok thanks :)\n. @ProLoser ah ok thanks :)\n. ",
    "hnordt": "+1\n. +1\n. ",
    "petelopez": "We had a bug due to this issue.  It should be merged.  Thanks @inaiat \n. I think it's a dupe of #142\n. We had a bug due to this issue.  It should be merged.  Thanks @inaiat \n. I think it's a dupe of #142\n. ",
    "blowsie": "This would be a great feature for masking numbers, perhaps it could use min-length and max-length.\n\nId suggest simplifying this \n\n9.99\n99.99\n999.99\n9,999.99\netc.\n. @theothermattm Could you describe what wrong with not returning undefined? the other statements in the `if/else` also return `valueToValidate`\n. Also, where can I find the other modules, have they been removed from the new version??\n\n> ~~alias~~\n> event\n> ~~format~~\n> ~~highlight~~\n> ~~ie-shiv~~\n> ~~include~~\n> indeterminate\n> ~~inflector~~\n> ~~jq~~\n> ~~keypress~~\n> mask\n> ~~reset~~\n> ~~route~~\n> ~~scroll~~\n> ~~scrollfix~~\n> ~~showhide~~\n> ~~unique~~\n> validate\n. @PowerKiKi Thanks for the info. Whilst I can see the need to clean up, I personally feel this is a bit of a loss to the community.\n\nI hope enough people can encourage you to bring them back :+1: \n. This would be a great feature for masking numbers, perhaps it could use min-length and max-length.\n\nId suggest simplifying this \n\n9.99\n99.99\n999.99\n9,999.99\netc.\n. @theothermattm Could you describe what wrong with not returning undefined? the other statements in the `if/else` also return `valueToValidate`\n. Also, where can I find the other modules, have they been removed from the new version??\n\n> ~~alias~~\n> event\n> ~~format~~\n> ~~highlight~~\n> ~~ie-shiv~~\n> ~~include~~\n> indeterminate\n> ~~inflector~~\n> ~~jq~~\n> ~~keypress~~\n> mask\n> ~~reset~~\n> ~~route~~\n> ~~scroll~~\n> ~~scrollfix~~\n> ~~showhide~~\n> ~~unique~~\n> validate\n. @PowerKiKi Thanks for the info. Whilst I can see the need to clean up, I personally feel this is a bit of a loss to the community.\n\nI hope enough people can encourage you to bring them back :+1: \n. ",
    "agvalente": "It would be great to have it!\n. It would be great to have it!\n. ",
    "PascalPrecht": "great!\n. Would love to see some benchmarks here :)\n. great!\n. Would love to see some benchmarks here :)\n. ",
    "vkelman": "Among other things, is there any way to call a method of underlying's jQuery plugin through jQuery Passthrough?\n. Among other things, is there any way to call a method of underlying's jQuery plugin through jQuery Passthrough?\n. ",
    "deeg": "+1\n\nI would like to see this change too, is there any indication you guys would accept this?\n. This has been open for a couple months now, just curious why it is not being accepted?\n\nWould anyone else like to see this?\n. +1\n\nI would like to see this change too, is there any indication you guys would accept this?\n. This has been open for a couple months now, just curious why it is not being accepted?\n\nWould anyone else like to see this?\n. ",
    "theothermattm": "+1  I would like it as well.  Seems to make sense.  @douglasduteil any chance that this might get in in the near future?\n. I started writing some tests and in the process of learning a bit more about the internals came across this blog post http://blog.jdriven.com/2013/09/how-angularjs-directives-renders-model-value-and-parses-user-input/ which seems to indicate that a parser function _should_ be undefined if it is invalid.    There's also a related issue: https://github.com/angular/angular.js/issues/1412 Though, I can't find any other documentation on that.\n\nI'm wondering if perhaps the return of undefined needs to stay put then?  Is there any harm in changing it in the ui-validate library?  Thoughts?\n. My only thought is that if there is a contract to return undefined when something validates as false onto the parser function array, then there could be other consequences I'm not aware of in other directives or areas of Angular.  However, you're right, the one which deals with promises does return false when the function validates to false. So I was really just throwing the info out there to see what people thought.\n\nAlso, @blowsie could you elaborate on the test case you gave in this PR?  The example you gave doesn't fail with what's in master right now, I'm not sure if perhaps there was just a typo.  We actually picked up on this PR because we had to make the exact same change to get validation functions to return the invalid value after being validated as false.\n. I went ahead and created a PR for this change along with tests and a slightly different description of the issue: https://github.com/angular-ui/ui-utils/pull/172\n\n@douglasduteil I'm new to contributing, so let me know if this looks alright and also if this is the proper etiquette for this type of thing - I can't modify @blowsie's fork so I went ahead and created another with a separate PR.\n. @ProLoser If you want some tests for this they are in my PR https://github.com/angular-ui/ui-utils/pull/172.  Also, regarding the behavior, the link you gave to the docs is what I was looking for.  Even though it's technically correct based on that, it sounds like many want the functionality of returning the invalid value (see the previous issue I linked).\n. +1  I would like it as well.  Seems to make sense.  @douglasduteil any chance that this might get in in the near future?\n. I started writing some tests and in the process of learning a bit more about the internals came across this blog post http://blog.jdriven.com/2013/09/how-angularjs-directives-renders-model-value-and-parses-user-input/ which seems to indicate that a parser function _should_ be undefined if it is invalid.    There's also a related issue: https://github.com/angular/angular.js/issues/1412 Though, I can't find any other documentation on that.\n\nI'm wondering if perhaps the return of undefined needs to stay put then?  Is there any harm in changing it in the ui-validate library?  Thoughts?\n. My only thought is that if there is a contract to return undefined when something validates as false onto the parser function array, then there could be other consequences I'm not aware of in other directives or areas of Angular.  However, you're right, the one which deals with promises does return false when the function validates to false. So I was really just throwing the info out there to see what people thought.\n\nAlso, @blowsie could you elaborate on the test case you gave in this PR?  The example you gave doesn't fail with what's in master right now, I'm not sure if perhaps there was just a typo.  We actually picked up on this PR because we had to make the exact same change to get validation functions to return the invalid value after being validated as false.\n. I went ahead and created a PR for this change along with tests and a slightly different description of the issue: https://github.com/angular-ui/ui-utils/pull/172\n\n@douglasduteil I'm new to contributing, so let me know if this looks alright and also if this is the proper etiquette for this type of thing - I can't modify @blowsie's fork so I went ahead and created another with a separate PR.\n. @ProLoser If you want some tests for this they are in my PR https://github.com/angular-ui/ui-utils/pull/172.  Also, regarding the behavior, the link you gave to the docs is what I was looking for.  Even though it's technically correct based on that, it sounds like many want the functionality of returning the invalid value (see the previous issue I linked).\n. ",
    "duncanbeevers": "In general, I think semantically-meaningful key names are preferable to character codes.\n\nI know that supporting named mappings for all keys is infeasible, and expecting an operational named mapping for `1` precludes keyCodes as first-class citizens. Instead, if people want to map by keyCodes explicitly, perhaps a dedicated syntax such as `{ '!74': 'event=true' }` could be provided.\n. To be clear, this PR is a non-breaking change.\n. In general, I think semantically-meaningful key names are preferable to character codes.\n\nI know that supporting named mappings for all keys is infeasible, and expecting an operational named mapping for `1` precludes keyCodes as first-class citizens. Instead, if people want to map by keyCodes explicitly, perhaps a dedicated syntax such as `{ '!74': 'event=true' }` could be provided.\n. To be clear, this PR is a non-breaking change.\n. ",
    "ccnokes": "I was excited to see this directive added to the Angular-UI project, which in my experience has been really helpful. I added this directive to a project today and have some questions/feedback:\n\nIf I use this on a dropdown menu (a popular use-case for hover intent behavior), I don't see a way currently to make the menu disappear on mouseout. Maybe I'm missing something. \n\nI thought this would be an Angular implementation of the popular jQuery hoverIntent plugin (https://github.com/briancherne/jquery-hoverIntent). If that's not ever the plan, that's okay, but maybe a name change would prevent some confusion? \n. I was excited to see this directive added to the Angular-UI project, which in my experience has been really helpful. I added this directive to a project today and have some questions/feedback:\n\nIf I use this on a dropdown menu (a popular use-case for hover intent behavior), I don't see a way currently to make the menu disappear on mouseout. Maybe I'm missing something. \n\nI thought this would be an Angular implementation of the popular jQuery hoverIntent plugin (https://github.com/briancherne/jquery-hoverIntent). If that's not ever the plan, that's okay, but maybe a name change would prevent some confusion? \n. ",
    "mrmattwright": "Awesome directive! Have just used it for a Google-Card style hover over. Looks great. Thanks a lot. \n. Awesome directive! Have just used it for a Google-Card style hover over. Looks great. Thanks a lot. \n. ",
    "pratikmallya": "Why hasn't this been merged yet? This is really really useful!\n. Why hasn't this been merged yet? This is really really useful!\n. ",
    "crshumate": "Just copied it. Very cool. Thanks a bunch.\n. Just copied it. Very cool. Thanks a bunch.\n. ",
    "Poltuu": "+1 for merging this\n. +1 for merging this\n. ",
    "rickhuizinga": "Same problem.\n. This problem happened to me when the ng-scroll directive was inside of a ng-switch block.  The result is that the height of each item is calculated to be zero.\n. The problem is that when the scroll item height is calculated to be zero, the following problems occur:\n\n1) ng-scroll attempts to fetch all scrollable items.  I.e. if the height is zero, it can fit them all.\n2) Even though all items have been fetched, the scroll list DOM contains zero items, exactly as shown in the stackoverflow.\n\nIn my case, I had a valid datastore with around 100 elements.  My ng-scroll-viewport and ng-scroll directives were within an ng-switch directive.  This caused a problem during page load, when the ng-scroll directive attempts to determine the calculated height of the scroll items:  the ng-scroll directive forced them to be non-visible with a resulting height of zero.\n\nIf I moved the ng-scroll outside of the ng-switch, it works properly.\n. The same problem applies when ng-scroll is inside an ng-if block or within an Angular Bootstrap accordian.\n\nIt works fine when using ng-show.\n\nCould this be a directive priority issue?\n. @mfeingold Here is a Plunker with a reproduction of the error:\n\nhttp://plnkr.co/edit/QmugOwohDmG1ojXBea1E\n\nThe instance of ng-scroll inside the tabset is not visible because the directive adds no elements to the DOM, despite fetching all items from the datasource.  It is a result of the zero height problem\n. Yes, that fixed it.  Thanks!\n\nIt looks like I don't have permissions to close this issue, as I'm not the original poster.\n. True, I currently have my datasource setup to track whether the datasource is empty during calls to its `get` function and keeping track of the empty state within the datasource.  It just adds extra state-tracking code when the ngScroll directive already knows if it is displaying any items.\n. Same problem.\n. This problem happened to me when the ng-scroll directive was inside of a ng-switch block.  The result is that the height of each item is calculated to be zero.\n. The problem is that when the scroll item height is calculated to be zero, the following problems occur:\n\n1) ng-scroll attempts to fetch all scrollable items.  I.e. if the height is zero, it can fit them all.\n2) Even though all items have been fetched, the scroll list DOM contains zero items, exactly as shown in the stackoverflow.\n\nIn my case, I had a valid datastore with around 100 elements.  My ng-scroll-viewport and ng-scroll directives were within an ng-switch directive.  This caused a problem during page load, when the ng-scroll directive attempts to determine the calculated height of the scroll items:  the ng-scroll directive forced them to be non-visible with a resulting height of zero.\n\nIf I moved the ng-scroll outside of the ng-switch, it works properly.\n. The same problem applies when ng-scroll is inside an ng-if block or within an Angular Bootstrap accordian.\n\nIt works fine when using ng-show.\n\nCould this be a directive priority issue?\n. @mfeingold Here is a Plunker with a reproduction of the error:\n\nhttp://plnkr.co/edit/QmugOwohDmG1ojXBea1E\n\nThe instance of ng-scroll inside the tabset is not visible because the directive adds no elements to the DOM, despite fetching all items from the datasource.  It is a result of the zero height problem\n. Yes, that fixed it.  Thanks!\n\nIt looks like I don't have permissions to close this issue, as I'm not the original poster.\n. True, I currently have my datasource setup to track whether the datasource is empty during calls to its `get` function and keeping track of the empty state within the datasource.  It just adds extra state-tracking code when the ngScroll directive already knows if it is displaying any items.\n. ",
    "xt0rted": "This is on NuGet now as [Angular.UI.Utils](https://www.nuget.org/packages/Angular.UI.Utils/)\n. I found this while prepping the release for [NuGet](https://www.nuget.org/packages/Angular.UI.Utils/) so for now I'm holding off releasing this version.\n. This is on NuGet now as [Angular.UI.Utils](https://www.nuget.org/packages/Angular.UI.Utils/)\n. I found this while prepping the release for [NuGet](https://www.nuget.org/packages/Angular.UI.Utils/) so for now I'm holding off releasing this version.\n. ",
    "baad": "Thank you guys\n. Thank you guys\n. ",
    "emgeee": "I'm not sure this is the best approach. According to this: http://www.kirupa.com/html5/get_element_position_using_javascript.htm the `elm[0].getBoundingClientRect()` is the better approach.\n\nI've modified scrollfix to use this approach and it seems to work nicely.\n\nJust my 2 cents, I'd love to get a fix for this merged!\n. I'm not sure this is the best approach. According to this: http://www.kirupa.com/html5/get_element_position_using_javascript.htm the `elm[0].getBoundingClientRect()` is the better approach.\n\nI've modified scrollfix to use this approach and it seems to work nicely.\n\nJust my 2 cents, I'd love to get a fix for this merged!\n. ",
    "zapnap": "+1 would love to see this fixed (updated).\n. +1 would love to see this fixed (updated).\n. ",
    "ashaffer": "+1\n. +1  It's broken behavior that it isn't already doing this.  There's really no other reasonable interpretation of scrollfix-target.\n. Sweet thx.\n. +1\n. +1  It's broken behavior that it isn't already doing this.  There's really no other reasonable interpretation of scrollfix-target.\n. Sweet thx.\n. ",
    "twinssbc": "+1\nAlso in the README file, why there's a backslash in each bower install command? to escape the hash sign?\n. +1\nAlso in the README file, why there's a backslash in each bower install command? to escape the hash sign?\n. ",
    "sartaj": "I also recently [opened an issue](https://github.com/angular-ui/ui-utils/issues/131) related to Bower.\n\nThere seems to be a [few](https://github.com/angular-ui/ui-utils/issues/161) fixes necessary related to Angular-UI  with Bower. I think they should be on a higher priority considering Yeoman uses `bower install angular-ui` as one of it's examples on it's [homepage](http://yeoman.io/).\n\nWhile I think I can fix most of these issues, given that it's package manager related, I think we really need approval from the repo/package owners before any of us can make pull requests.\n. I also recently [opened an issue](https://github.com/angular-ui/ui-utils/issues/131) related to Bower.\n\nThere seems to be a [few](https://github.com/angular-ui/ui-utils/issues/161) fixes necessary related to Angular-UI  with Bower. I think they should be on a higher priority considering Yeoman uses `bower install angular-ui` as one of it's examples on it's [homepage](http://yeoman.io/).\n\nWhile I think I can fix most of these issues, given that it's package manager related, I think we really need approval from the repo/package owners before any of us can make pull requests.\n. ",
    "ThiagoMiranda": "+1 wish to see it fixed\n. +1 wish to see it fixed\n. ",
    "adrianboimvaser": "+1\n. +1\n. ",
    "mpiacenza": "+1\n. +1\n. ",
    "markgardner": "+1\n. +1\n. ",
    "marigan": "+42\n. +42\n. ",
    "rajish": "The workaround for this is to install the master branch with:\n\n```\nbower install angular-ui-utils\\#master\n```\n. The workaround for this is to install the master branch with:\n\n```\nbower install angular-ui-utils\\#master\n```\n. ",
    "clkao": "On angular-ui.github.io home page.  Apparently this has been fixed now.  However the anchor scroll doesn't seem to work?  the url is turned in http://angular-ui.github.io/ui-utils/#/highlight\n. On angular-ui.github.io home page.  Apparently this has been fixed now.  However the anchor scroll doesn't seem to work?  the url is turned in http://angular-ui.github.io/ui-utils/#/highlight\n. ",
    "DeepAnchor": "+1\n. @douglasduteil awesome, thanks!\n. +1\n. @douglasduteil awesome, thanks!\n. ",
    "blittle": ":+1: \n. :+1: \n. ",
    "ryanmargheriti": "Any resolution on this? Possible to pull in ui-scroll (or, scroll) as a dependency via bower? \n. Any resolution on this? Possible to pull in ui-scroll (or, scroll) as a dependency via bower? \n. ",
    "doodirock": "Came here looking for the same.  Any way to pull ui-scroll or scroll via bower yet?\n. Came here looking for the same.  Any way to pull ui-scroll or scroll via bower yet?\n. ",
    "SirMaster": "+1 \n\nThis would be a great enhancement, specifically for mobile devices (which is where we are currently having issues).\n. +1 \n\nThis would be a great enhancement, specifically for mobile devices (which is where we are currently having issues).\n. ",
    "collinpeters": "+1\n. +1\n. ",
    "muratcorlu": "+1\n. +1\n. ",
    "cenkingunlugu": "+1\n. +1\n. ",
    "sercaneraslan": "+1\n. +1\n. ",
    "fatihhayri": "+1\n. +1\n. ",
    "brtn": "+1\n. +1\n. ",
    "eceylan": "+1\n. +1\n. ",
    "mlenser": "This is a much needed fix, thanks!\n\n+1\n. +1\n. So here is my analysis:\nIt seems the goal was for placeholder to act as the default format to show upon edit. However it doesn't allow for a normal placeholder that does not match the mask.\n\nI've hacked my way around this to make the default placeholder work. Using the most recent version from https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js I've commented out line 157:\n\n``` javascript\niElement.attr('placeholder', maskPlaceholder);\n```\n\nThis makes the normal placeholder appear on load, but it still messes up as soon as you focus. To fix this edit line 228-234. Change this:\n\n``` javascript\nfunction getPlaceholderChar(i) {\n    var placeholder = iAttrs.placeholder;\n\n    if (typeof placeholder !== 'undefined' && placeholder[i]) {\n        return placeholder[i];\n    } else {\n        return '_';\n    }\n}\n```\n\nTo this:\n\n``` javascript\nfunction getPlaceholderChar(i) {\n    return '_';\n}\n```\n\nObviously this removes the functionality to format the text according to the placeholder, but imo that should be done in an entirely different way.\nI'd like to see a real fix here by moving all the placeholder stuff to some ng- attribute and using that if it exists.\n. I've created a fork that handles moving the formatting from the placeholder to it's own attribute.\nI don't have time to update the tests right now, but if anyone else want to tackle it here is my fork: https://github.com/Kryx/ui-utils/blob/mask-format/modules/mask/mask.js\n. Can be used as such:\n<input type=\"tel\" name=\"phone\" ng-model=\"phone\" ui-mask=\"999 99 999\" ui-mask-format=\"### ## ###\" />\n\nThough ui-options may be a better place for this.\n. Closing and opening a new one as I accidentally pushed from master.\n. This is a much needed fix, thanks!\n\n+1\n. +1\n. So here is my analysis:\nIt seems the goal was for placeholder to act as the default format to show upon edit. However it doesn't allow for a normal placeholder that does not match the mask.\n\nI've hacked my way around this to make the default placeholder work. Using the most recent version from https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js I've commented out line 157:\n\n``` javascript\niElement.attr('placeholder', maskPlaceholder);\n```\n\nThis makes the normal placeholder appear on load, but it still messes up as soon as you focus. To fix this edit line 228-234. Change this:\n\n``` javascript\nfunction getPlaceholderChar(i) {\n    var placeholder = iAttrs.placeholder;\n\n    if (typeof placeholder !== 'undefined' && placeholder[i]) {\n        return placeholder[i];\n    } else {\n        return '_';\n    }\n}\n```\n\nTo this:\n\n``` javascript\nfunction getPlaceholderChar(i) {\n    return '_';\n}\n```\n\nObviously this removes the functionality to format the text according to the placeholder, but imo that should be done in an entirely different way.\nI'd like to see a real fix here by moving all the placeholder stuff to some ng- attribute and using that if it exists.\n. I've created a fork that handles moving the formatting from the placeholder to it's own attribute.\nI don't have time to update the tests right now, but if anyone else want to tackle it here is my fork: https://github.com/Kryx/ui-utils/blob/mask-format/modules/mask/mask.js\n. Can be used as such:\n<input type=\"tel\" name=\"phone\" ng-model=\"phone\" ui-mask=\"999 99 999\" ui-mask-format=\"### ## ###\" />\n\nThough ui-options may be a better place for this.\n. Closing and opening a new one as I accidentally pushed from master.\n. ",
    "rodrigodealer": "+1\n. +1\n. ",
    "viniciusffj": "+1\n. +1\n. ",
    "NateRedding": "+1\n. +1\n. ",
    "thetom88": "I have the same problem too! Have you managed to fix it? How?\n. I tried your solution, but I forgot to use angular's $timeout, so it wasn't working correctly. Now it's working, thank you so much!!!\n. I have the same problem too! Have you managed to fix it? How?\n. I tried your solution, but I forgot to use angular's $timeout, so it wasn't working correctly. Now it's working, thank you so much!!!\n. ",
    "jlouthan": "I am having the same issue as well.\n\nEdit: I fixed my issue by adding a  `$timeout` function in which I get the value of `elm[0].offsetTop` and set `attrs.uiScrollfix`. I'm not using any offsets, so if you are you will want to check them before setting the attribute.\n\n```\n    var timer = $timeout(function(){\n      top = elm[0].offsetTop;\n      attrs.uiScrollfix = top;\n    });\n```\n\nI'm not sure if this is a great solution, but it is working for me. \n. I am having the same issue as well.\n\nEdit: I fixed my issue by adding a  `$timeout` function in which I get the value of `elm[0].offsetTop` and set `attrs.uiScrollfix`. I'm not using any offsets, so if you are you will want to check them before setting the attribute.\n\n```\n    var timer = $timeout(function(){\n      top = elm[0].offsetTop;\n      attrs.uiScrollfix = top;\n    });\n```\n\nI'm not sure if this is a great solution, but it is working for me. \n. ",
    "MillenniumFalconMechanic": "+1\n. +1\n. ",
    "thomasbertet": "+1\n. +1\n. ",
    "k-italy": "+1\n. +1\n. ",
    "brandly": "@joegaudet I'm modifying my local file to support this right now and could submit a pull request. Are you in favor of `command-a` or `cmd-a`?\n\nI'm leaning towards the latter, since it's more like `ctrl`.\n. Unfortunately, adding this is more involved than I hoped. http://stackoverflow.com/a/3922353\n\nI'll report back if I get something working.\n. To fix my personal issue, I went from trying to bind like `ui-keypress=\"{'cmd-enter': ...` to `ui-keydown=\"{'meta-enter': ...\"`, which works without modifying the library at all. :+1: \n\nApparently, at least in Chrome, `keypress` doesn't fire when holding `command`. `keydown` does, however. [Mousetrap is somehow handling this.](https://github.com/ccampbell/mousetrap/blob/master/mousetrap.js#L354)\n\n`keydown` events do fire, however, and `event.metaKey` is set, if you're holding down `command`. Sounds like `event.metaKey` also applies to the `windows` key for Windows.\n. Yeah, they only have [a pretty short list of characters that can be referenced by name](https://github.com/angular-ui/ui-utils/blob/master/modules/keypress/keypress.js#L5), instead of key code.\n\nI don't know if they want to grow this to a larger, full-featured keyboard library, but you could add your own characters to that list, if you want the readability of `meta-a` over `meta-65`.\n\nAlso, if you wanted to alias `meta` as `cmd`, you could change [this line](https://github.com/angular-ui/ui-utils/blob/master/modules/keypress/keypress.js#L67) to\n\n``` javascript\nvar metaRequired = !!combination.keys.meta || !!combination.keys.cmd;\n```\n\nand I think that'll work.\n. @joegaudet I'm modifying my local file to support this right now and could submit a pull request. Are you in favor of `command-a` or `cmd-a`?\n\nI'm leaning towards the latter, since it's more like `ctrl`.\n. Unfortunately, adding this is more involved than I hoped. http://stackoverflow.com/a/3922353\n\nI'll report back if I get something working.\n. To fix my personal issue, I went from trying to bind like `ui-keypress=\"{'cmd-enter': ...` to `ui-keydown=\"{'meta-enter': ...\"`, which works without modifying the library at all. :+1: \n\nApparently, at least in Chrome, `keypress` doesn't fire when holding `command`. `keydown` does, however. [Mousetrap is somehow handling this.](https://github.com/ccampbell/mousetrap/blob/master/mousetrap.js#L354)\n\n`keydown` events do fire, however, and `event.metaKey` is set, if you're holding down `command`. Sounds like `event.metaKey` also applies to the `windows` key for Windows.\n. Yeah, they only have [a pretty short list of characters that can be referenced by name](https://github.com/angular-ui/ui-utils/blob/master/modules/keypress/keypress.js#L5), instead of key code.\n\nI don't know if they want to grow this to a larger, full-featured keyboard library, but you could add your own characters to that list, if you want the readability of `meta-a` over `meta-65`.\n\nAlso, if you wanted to alias `meta` as `cmd`, you could change [this line](https://github.com/angular-ui/ui-utils/blob/master/modules/keypress/keypress.js#L67) to\n\n``` javascript\nvar metaRequired = !!combination.keys.meta || !!combination.keys.cmd;\n```\n\nand I think that'll work.\n. ",
    "joegaudet": "cmd-a would be better I think, for consistency and brevity.\n\n.joe\n\nOn Thu, Jan 30, 2014 at 4:17 PM, Matthew Brandly\nnotifications@github.comwrote:\n\n> @joegaudet https://github.com/joegaudet I'm modifying my local file to\n> support this right now and could submit a pull request. Are you in favor of\n> command-a or cmd-a?\n> \n> I'm leaning towards the latter, since it's more like ctrl.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/167#issuecomment-33750106\n> .\n\n## \n\n.joe out.\n\n+1.778.994.4846\n. Yeah I saw that in my research.\n\nIt's handled in SproutCore somehow - the iCloud apps all intercept command\ncodes.\n\nI couldn't really figure it out, I'd imagine you'd somehow have to\nintercept the keydown/keyup of the command key and tie it to the keys\npressed afterward - and prevent default if there's a handler.\n\n.joe\n. does appear to work for command + enter.\n\nHow might I intercept command + a ?\n\n.joe\n\nOn Thu, Jan 30, 2014 at 6:04 PM, Matthew Brandly\nnotifications@github.comwrote:\n\n> To fix my personal issue, I went from trying to bind like ui-keypress=\"{'cmd-enter':\n> ... to ui-keydown=\"{'meta-enter': ...\", which works without modifying the\n> library at all. [image: :+1:]\n> \n> Apparently, at least in Chrome, keypress doesn't fire when holding command.\n> keydown does, however. Mousetrap is somehow handling this.https://github.com/ccampbell/mousetrap/blob/master/mousetrap.js#L354\n> \n> keydown events do fire, however, and event.metaKey is set, if you're\n> holding down command. Sounds like event.metaKey also applies to the\n> windows key for Windows.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/167#issuecomment-33755955\n> .\n\n## \n\n.joe out.\n\n+1.778.994.4846\n. Appears to work with the key code... meta-65\n\nOn Thu, Jan 30, 2014 at 8:16 PM, Joe Gaudet joe@joegaudet.com wrote:\n\n> does appear to work for command + enter.\n> \n> How might I intercept command + a ?\n> \n> .joe\n> \n> On Thu, Jan 30, 2014 at 6:04 PM, Matthew Brandly <notifications@github.com\n> \n> > wrote:\n> > \n> > To fix my personal issue, I went from trying to bind like ui-keypress=\"{'cmd-enter':\n> > ... to ui-keydown=\"{'meta-enter': ...\", which works without modifying\n> > the library at all. [image: :+1:]\n> > \n> > Apparently, at least in Chrome, keypress doesn't fire when holding\n> > command. keydown does, however. Mousetrap is somehow handling this.https://github.com/ccampbell/mousetrap/blob/master/mousetrap.js#L354\n> > \n> > keydown events do fire, however, and event.metaKey is set, if you're\n> > holding down command. Sounds like event.metaKey also applies to the\n> > windows key for Windows.\n> > \n> > ## \n> > \n> > Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/167#issuecomment-33755955\n> > .\n> \n> ## \n> \n> .joe out.\n> \n> +1.778.994.4846\n\n## \n\n.joe out.\n\n+1.778.994.4846\n. cmd-a would be better I think, for consistency and brevity.\n\n.joe\n\nOn Thu, Jan 30, 2014 at 4:17 PM, Matthew Brandly\nnotifications@github.comwrote:\n\n> @joegaudet https://github.com/joegaudet I'm modifying my local file to\n> support this right now and could submit a pull request. Are you in favor of\n> command-a or cmd-a?\n> \n> I'm leaning towards the latter, since it's more like ctrl.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/167#issuecomment-33750106\n> .\n\n## \n\n.joe out.\n\n+1.778.994.4846\n. Yeah I saw that in my research.\n\nIt's handled in SproutCore somehow - the iCloud apps all intercept command\ncodes.\n\nI couldn't really figure it out, I'd imagine you'd somehow have to\nintercept the keydown/keyup of the command key and tie it to the keys\npressed afterward - and prevent default if there's a handler.\n\n.joe\n. does appear to work for command + enter.\n\nHow might I intercept command + a ?\n\n.joe\n\nOn Thu, Jan 30, 2014 at 6:04 PM, Matthew Brandly\nnotifications@github.comwrote:\n\n> To fix my personal issue, I went from trying to bind like ui-keypress=\"{'cmd-enter':\n> ... to ui-keydown=\"{'meta-enter': ...\", which works without modifying the\n> library at all. [image: :+1:]\n> \n> Apparently, at least in Chrome, keypress doesn't fire when holding command.\n> keydown does, however. Mousetrap is somehow handling this.https://github.com/ccampbell/mousetrap/blob/master/mousetrap.js#L354\n> \n> keydown events do fire, however, and event.metaKey is set, if you're\n> holding down command. Sounds like event.metaKey also applies to the\n> windows key for Windows.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/167#issuecomment-33755955\n> .\n\n## \n\n.joe out.\n\n+1.778.994.4846\n. Appears to work with the key code... meta-65\n\nOn Thu, Jan 30, 2014 at 8:16 PM, Joe Gaudet joe@joegaudet.com wrote:\n\n> does appear to work for command + enter.\n> \n> How might I intercept command + a ?\n> \n> .joe\n> \n> On Thu, Jan 30, 2014 at 6:04 PM, Matthew Brandly <notifications@github.com\n> \n> > wrote:\n> > \n> > To fix my personal issue, I went from trying to bind like ui-keypress=\"{'cmd-enter':\n> > ... to ui-keydown=\"{'meta-enter': ...\", which works without modifying\n> > the library at all. [image: :+1:]\n> > \n> > Apparently, at least in Chrome, keypress doesn't fire when holding\n> > command. keydown does, however. Mousetrap is somehow handling this.https://github.com/ccampbell/mousetrap/blob/master/mousetrap.js#L354\n> > \n> > keydown events do fire, however, and event.metaKey is set, if you're\n> > holding down command. Sounds like event.metaKey also applies to the\n> > windows key for Windows.\n> > \n> > ## \n> > \n> > Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/167#issuecomment-33755955\n> > .\n> \n> ## \n> \n> .joe out.\n> \n> +1.778.994.4846\n\n## \n\n.joe out.\n\n+1.778.994.4846\n. ",
    "jeverden": "Fixes issue https://github.com/angular-ui/ui-utils/issues/168\n. Fixes issue https://github.com/angular-ui/ui-utils/issues/168\n. ",
    "c0bra": "Tim, can the ui.i18n module expose a service for doing all these things, rather than having properties that dangle off the module object? That would let us leverage DI, and would prevent issues with the module not existing when the language packs try to use it, depending on file execution order.\n. Tim, can the ui.i18n module expose a service for doing all these things, rather than having properties that dangle off the module object? That would let us leverage DI, and would prevent issues with the module not existing when the language packs try to use it, depending on file execution order.\n. ",
    "waltersurf": "This looks really nice. Any plans on parameter support? I mean something like \"You have %1 credits left\".\n. Timothy, you're right it works fine like that. Having to use another filter adds some length to the syntax, but then again this is the more rare use case. Also this way the parameter markup is not dictated by the translation library, which is nice.\n. This looks really nice. Any plans on parameter support? I mean something like \"You have %1 credits left\".\n. Timothy, you're right it works fine like that. Having to use another filter adds some length to the syntax, but then again this is the more rare use case. Also this way the parameter markup is not dictated by the translation library, which is nice.\n. ",
    "orneryd": "@c0bra I added a service wrapper for the module syntax is the exact same except for a new method getCache() which returns the module _cache\n. @waltersurf, right now if you want to format a string you can pipe it to a filter or use angular's builtin formatting for the result of the string. there shouldn't be anything preventing that. Can you play with it and see if you find any issues?\n. If someone wants to throw together a JSPerf comparison that would be cool. I don't have the time at the moment. This also focuses on being as lightweight as possible, such as not dictating any syntax for string formatting or pluralization since those are already features of angular.\n. I updated this to work with Angular 1.3 + and also made it a provider to inject into .config blocks\n\nI also registered it as \"angular-ui-i18n\" on bower.\n\nhttps://github.com/timothyswt/ui-i18n\n. @c0bra I added a service wrapper for the module syntax is the exact same except for a new method getCache() which returns the module _cache\n. @waltersurf, right now if you want to format a string you can pipe it to a filter or use angular's builtin formatting for the result of the string. there shouldn't be anything preventing that. Can you play with it and see if you find any issues?\n. If someone wants to throw together a JSPerf comparison that would be cool. I don't have the time at the moment. This also focuses on being as lightweight as possible, such as not dictating any syntax for string formatting or pluralization since those are already features of angular.\n. I updated this to work with Angular 1.3 + and also made it a provider to inject into .config blocks\n\nI also registered it as \"angular-ui-i18n\" on bower.\n\nhttps://github.com/timothyswt/ui-i18n\n. ",
    "knalli": "fyi: I've rebased the angular-translate demo on the current 2.0.1: http://jsfiddle.net/knalli/f9fe8/1/\n. fyi: I've rebased the angular-translate demo on the current 2.0.1: http://jsfiddle.net/knalli/f9fe8/1/\n. ",
    "blueimp": "I'm the author of [angular-localize](https://github.com/blueimp/angular-localize), a localization implementation for AngularJS which focuses on the best possible performance.\nYou might wanna have a look and see if it would be a good fit.\n. ng-pluralize falls short if you want to combine pluralization with gender selection.\n\nBoth [angular-translate](https://github.com/angular-translate/angular-translate) and [angular-localize](https://github.com/blueimp/angular-localize) make use of [MessageFormat.js](https://github.com/SlexAxton/messageformat.js), which is based on a standard, allows precompilcation of the translation functions and is - based on my research looking at implementations of Gettext and various custom string replacement libraries - the best available solution for a flexible JavaScript localization implementation.\n\nI've created a console timed test for [angular-localize](https://github.com/blueimp/angular-localize) here:\nhttp://jsfiddle.net/blueimp/LQxX4/\n\nThe code used in the JSFiddle is also suitable for JSPerf, I've created one with a duplicate here:\nhttp://jsperf.com/angularjs-localization\nThis would of course be much more interesting to run against a different localization library.\nThe JSPerf test includes a check for each node that is run after each sample to make sure the localization was correct, which makes the test run a little bit slow.\n\nGenerally though, I'm not sure if the JSPerf setup is the best way to analyze the performance.\nIn my own research, I've used the Chrome developer tools and the Batarang extension to check the performance on a real world website.\n\nBtw., although I really recommend Messageformat, [angular-localize](https://github.com/blueimp/angular-localize) is independent of this format, as it simply uses the provided translation functions.\nIt's also independent of [grunt-locales](https://github.com/blueimp/grunt-locales), although I also recommend to use it combined.\n. I'm the author of [angular-localize](https://github.com/blueimp/angular-localize), a localization implementation for AngularJS which focuses on the best possible performance.\nYou might wanna have a look and see if it would be a good fit.\n. ng-pluralize falls short if you want to combine pluralization with gender selection.\n\nBoth [angular-translate](https://github.com/angular-translate/angular-translate) and [angular-localize](https://github.com/blueimp/angular-localize) make use of [MessageFormat.js](https://github.com/SlexAxton/messageformat.js), which is based on a standard, allows precompilcation of the translation functions and is - based on my research looking at implementations of Gettext and various custom string replacement libraries - the best available solution for a flexible JavaScript localization implementation.\n\nI've created a console timed test for [angular-localize](https://github.com/blueimp/angular-localize) here:\nhttp://jsfiddle.net/blueimp/LQxX4/\n\nThe code used in the JSFiddle is also suitable for JSPerf, I've created one with a duplicate here:\nhttp://jsperf.com/angularjs-localization\nThis would of course be much more interesting to run against a different localization library.\nThe JSPerf test includes a check for each node that is run after each sample to make sure the localization was correct, which makes the test run a little bit slow.\n\nGenerally though, I'm not sure if the JSPerf setup is the best way to analyze the performance.\nIn my own research, I've used the Chrome developer tools and the Batarang extension to check the performance on a real world website.\n\nBtw., although I really recommend Messageformat, [angular-localize](https://github.com/blueimp/angular-localize) is independent of this format, as it simply uses the provided translation functions.\nIt's also independent of [grunt-locales](https://github.com/blueimp/grunt-locales), although I also recommend to use it combined.\n. ",
    "LeleDev": "Can't this be merged still? impatiently waiting for that\n. It's really annoying that you can't install multiple modules instead of the complete library. Please fix this soon...\n. Can't this be merged still? impatiently waiting for that\n. It's really annoying that you can't install multiple modules instead of the complete library. Please fix this soon...\n. ",
    "alecha": "any update?\n. any update?\n. ",
    "F1LT3R": "I did this just now and created a pull request: https://github.com/angular-ui/ui-utils/pull/334\n\n![angular ui-util highlight ng-bind-html-unsafe now safe](https://cloud.githubusercontent.com/assets/1218446/5494269/9f5a237e-86c0-11e4-943e-6ca1559c5ce1.png)\n\nCan you play around with it here and let me know if that's what you mean @xiaogwu? \nhttp://f1lt3r.github.io/ui-utils/\n. The documentation on gh-pages still reflects ng-bind-html-unsafe.\n. Yeah that's it.\n. When I...\n\n```\nnpm install && bower install\n```\n\nAnd I'm asked...\n\n```\nUnable to find a suitable version for angular, please choose one:\n    1) angular#1.0.8 which resolved to 1.0.8 and is required by angular-mocks#1.0.8\n    2) angular#1.3.7 which resolved to 1.3.7 and is required by angular-mocks#1.3.7\n    3) angular#>= 1.0.2 which resolved to 1.3.7 and is required by angular-ui-utilsPrefix the choice with ! to persist it to bower.json\n```\n\nWhich should I be choosing? \"3\" ?\n. Hmmm, that's weird, I don't get that choice when I check out fresh and install npm/bower.\n. I did this just now and created a pull request: https://github.com/angular-ui/ui-utils/pull/334\n\n![angular ui-util highlight ng-bind-html-unsafe now safe](https://cloud.githubusercontent.com/assets/1218446/5494269/9f5a237e-86c0-11e4-943e-6ca1559c5ce1.png)\n\nCan you play around with it here and let me know if that's what you mean @xiaogwu? \nhttp://f1lt3r.github.io/ui-utils/\n. The documentation on gh-pages still reflects ng-bind-html-unsafe.\n. Yeah that's it.\n. When I...\n\n```\nnpm install && bower install\n```\n\nAnd I'm asked...\n\n```\nUnable to find a suitable version for angular, please choose one:\n    1) angular#1.0.8 which resolved to 1.0.8 and is required by angular-mocks#1.0.8\n    2) angular#1.3.7 which resolved to 1.3.7 and is required by angular-mocks#1.3.7\n    3) angular#>= 1.0.2 which resolved to 1.3.7 and is required by angular-ui-utilsPrefix the choice with ! to persist it to bower.json\n```\n\nWhich should I be choosing? \"3\" ?\n. Hmmm, that's weird, I don't get that choice when I check out fresh and install npm/bower.\n. ",
    "jrencz": "+1\nrefs: #240 \n. +1\nrefs: #240 \n. ",
    "just-boris": "@douglasduteil  will you merge it? It is useful fix, but now I have to use patched version\n. @douglasduteil  will you merge it? It is useful fix, but now I have to use patched version\n. ",
    "terebentina": "Got it! #src0.1.1\n. HA! I had no idea you could do that. That's excellent, thank you very much.\n. Got it! #src0.1.1\n. HA! I had no idea you could do that. That's excellent, thank you very much.\n. ",
    "hdubugras": "I'm having the same problem\n. I'm having the same problem\n. ",
    "axelfontaine": "+1\n. +1\n. ",
    "mshneider": "++\n. ++\n. ",
    "felipecm": "+1\n. +1\n. ",
    "ed1nh0": "+1\n. +1\n. ",
    "Darmikon": "+1\n. +1\n. ",
    "kaumac": "+1\n. +1\n. ",
    "brantleyr": "+1\n. +1\n. ",
    "andreoav": ":+1: \n. :+1: \n. ",
    "sos0": "+1\n. +1\n. ",
    "t3chnoboy": ":+1: \n. :+1: \n. ",
    "grushikhin": "+1\n. +1\n. ",
    "mrniko": "+1\n. +1\n. ",
    "kontrollanten": "+1\n. +1\n. ",
    "xtreemrage": "+1\n. When will this be in it?\n. +1\n. When will this be in it?\n. ",
    "iclems": "+1 ;)\n. +1 ;)\n. ",
    "jlubeck": "+1\n. This is a big problem and I see it's been a year since this was bugged... no one else is having an issue with this odd behaviour?\n. +1\n. This is a big problem and I see it's been a year since this was bugged... no one else is having an issue with this odd behaviour?\n. ",
    "AndrewEastwood": "+1\n. when it's gonna be fixed?\n. +1\n. when it's gonna be fixed?\n. ",
    "geoidesic": "Ditto. And the demo included in the repository is just a js file, so can't actually try anything out there either. It would also be really handy if the README file described what any of these things actually do rather than just providing installation instructions.\n. Ditto. And the demo included in the repository is just a js file, so can't actually try anything out there either. It would also be really handy if the README file described what any of these things actually do rather than just providing installation instructions.\n. ",
    "developeron29": "Yeah same problem, should add the usage of each module in the readme.md file.\n. Yeah same problem, should add the usage of each module in the readme.md file.\n. ",
    "sturobo": "Hi Dean,\n\nsorry I'll clarify.\n\nAt the moment, I think somePromise() is interpreted as a boolean value and so the value held on the element is either true or false.\nWhat I'd really like is for somePromise() to be able to return a string and this value to be held of the element. \n\nThat way we could use the code to return a message as to what validation it has failed. Again, this would be most useful if your validation requires a call to the server - reduces the 'chattyness' of the system.\n\nThanks for getting back to me.\n. I probably don't know the proper way! I've had a look and can't find a way to do this in the documentation.\n\nTaking from http://angular-ui.github.io/ui-utils/#/validate I've tried this:\n\n```\n<input name=\"test\" ng-model=\"test\" ui-validate=\"{isValid : '\\'My Error Message\\'' }\">\n```\n\nand\n\n```\n<input name=\"test\" ng-model=\"test\" ui-validate=\"{isValid : 'return \\'My Error Message\\'' }\">\n```\n\nbut both seem to set the $error.isValid attribute to 'true'. What we'd really like is $error.isValid to equal \"My Error Message\".\n\nIf this this is already possible that'd be great, please could you point me in the direction of an example?\n. Hi Dean,\n\nsorry I'll clarify.\n\nAt the moment, I think somePromise() is interpreted as a boolean value and so the value held on the element is either true or false.\nWhat I'd really like is for somePromise() to be able to return a string and this value to be held of the element. \n\nThat way we could use the code to return a message as to what validation it has failed. Again, this would be most useful if your validation requires a call to the server - reduces the 'chattyness' of the system.\n\nThanks for getting back to me.\n. I probably don't know the proper way! I've had a look and can't find a way to do this in the documentation.\n\nTaking from http://angular-ui.github.io/ui-utils/#/validate I've tried this:\n\n```\n<input name=\"test\" ng-model=\"test\" ui-validate=\"{isValid : '\\'My Error Message\\'' }\">\n```\n\nand\n\n```\n<input name=\"test\" ng-model=\"test\" ui-validate=\"{isValid : 'return \\'My Error Message\\'' }\">\n```\n\nbut both seem to set the $error.isValid attribute to 'true'. What we'd really like is $error.isValid to equal \"My Error Message\".\n\nIf this this is already possible that'd be great, please could you point me in the direction of an example?\n. ",
    "mnazwan": "Please ignore. Found that it's do-able through directive. See sample below.\nThanks.\n\nhttp://jsfiddle.net/kevinj/TAeNF/2/\n. Please ignore. Found that it's do-able through directive. See sample below.\nThanks.\n\nhttp://jsfiddle.net/kevinj/TAeNF/2/\n. ",
    "DmitryEfimenko": "Had the same problem. Adding `priority: 1000` to the `uiValidate` directive solves the issue.\n. Had the same problem. Adding `priority: 1000` to the `uiValidate` directive solves the issue.\n. ",
    "isaacosment": "I get a similar issue when trying to use ui-mask on an android tablet. Every time the cursor crosses a mask symbol (while typing) its position is reset to just after the symbol instead of after the character which was typed.\n\nSo entering 0123456789 with a mask of 9999-999-999 goes:\n\n0123|-**_-**_\n0123-|4__-___\n0123-5|4_-___\n0123-564|-___\n0123-567-|4__\n0123-567-8|4_\n0123-567-|84_\n0123-567-984\n\nThis happens consistently and appears to be related to the order of events triggered. I haven't spent much time looking into it but if I call setCaretPosition a second time using setTimeout with a 50ms delay it makes it work 99% of the time, which is fine for the minimal usage it will get in my case. I should mention the issue happens consistently on 2 different android tablets in both the stock android browser and firefox on both.\n. I get a similar issue when trying to use ui-mask on an android tablet. Every time the cursor crosses a mask symbol (while typing) its position is reset to just after the symbol instead of after the character which was typed.\n\nSo entering 0123456789 with a mask of 9999-999-999 goes:\n\n0123|-**_-**_\n0123-|4__-___\n0123-5|4_-___\n0123-564|-___\n0123-567-|4__\n0123-567-8|4_\n0123-567-|84_\n0123-567-984\n\nThis happens consistently and appears to be related to the order of events triggered. I haven't spent much time looking into it but if I call setCaretPosition a second time using setTimeout with a 50ms delay it makes it work 99% of the time, which is fine for the minimal usage it will get in my case. I should mention the issue happens consistently on 2 different android tablets in both the stock android browser and firefox on both.\n. ",
    "linagee": "Similar issues. To duplicate, you can even just pull up http://angular-ui.github.io/ui-utils/ on your mobile device (this seems to affect mobile Webkit, not mobile Firefox - so Android Browser or Mobile Chrome to test)\nFind the \"Mask - uiMask Directive Demo\", click Set to (999) 999-9999 and try typing a phone number into the Masked Input dialog.\n(rit) a m-sk o\nafter typing 0 becomes:\n(00t) a m-sk o\nafter typing 1 becomes:\n(010) 10m-sk o\nafter typing 2 becomes:\n(012) 012-010o\nafter typing 3 becomes:\n(012) 301-2010\n. In the ui-mask code, there is a iElement that .binds a keyup event. For some reason, keyup events are being received twice. (Inside of the eventHandler function, put a console.log(e) and you see keyup twice for every key on the Android. It helps to be debugging remotely with Chrome and a console on your desktop while doing this so you can inspect the event object.)\n\nRepeat with the desktop and you only get keyup once as expected.\n\nI've also tried a regular jQuery .bind keyup example and it works fine on mobile. (fires once not twice) So it has to do with this code...\n. I was using the Samsung Keyboard (in settings)\nI guess if you use a different keyboard or turn off Predictive Text, it works fine.\nI'm not sure how to work around this \"Predictive Text\" nastyness. (don't use ui-mask? tell users to turn it off?)\n. Similar issues. To duplicate, you can even just pull up http://angular-ui.github.io/ui-utils/ on your mobile device (this seems to affect mobile Webkit, not mobile Firefox - so Android Browser or Mobile Chrome to test)\nFind the \"Mask - uiMask Directive Demo\", click Set to (999) 999-9999 and try typing a phone number into the Masked Input dialog.\n(rit) a m-sk o\nafter typing 0 becomes:\n(00t) a m-sk o\nafter typing 1 becomes:\n(010) 10m-sk o\nafter typing 2 becomes:\n(012) 012-010o\nafter typing 3 becomes:\n(012) 301-2010\n. In the ui-mask code, there is a iElement that .binds a keyup event. For some reason, keyup events are being received twice. (Inside of the eventHandler function, put a console.log(e) and you see keyup twice for every key on the Android. It helps to be debugging remotely with Chrome and a console on your desktop while doing this so you can inspect the event object.)\n\nRepeat with the desktop and you only get keyup once as expected.\n\nI've also tried a regular jQuery .bind keyup example and it works fine on mobile. (fires once not twice) So it has to do with this code...\n. I was using the Samsung Keyboard (in settings)\nI guess if you use a different keyboard or turn off Predictive Text, it works fine.\nI'm not sure how to work around this \"Predictive Text\" nastyness. (don't use ui-mask? tell users to turn it off?)\n. ",
    "hgfischer": "Do some lightened soul have an idea on how to fix this? Maybe some markup to disable the buggy feature in these devices?\n. I've replaced ui-mask with https://github.com/assisrafael/angular-input-masks and it works well, despite the restrictions it have. Maybe you can see how it works to fix ui-mask.\n. Do some lightened soul have an idea on how to fix this? Maybe some markup to disable the buggy feature in these devices?\n. I've replaced ui-mask with https://github.com/assisrafael/angular-input-masks and it works well, despite the restrictions it have. Maybe you can see how it works to fix ui-mask.\n. ",
    "shanealsingh": "I've implemented my own mask and faced this same issue. I do not think that there is an actual problem with ui-mask. There is a know bug with key events getting fired twice on Android. The problem is with Android returning the incorrect cursor position. If you log the value that `getCaretPosition(input)` is returning, it is very inconstant and incorrect. Sometimes it will return 0, other times it will return 5 (for a caret position of 2). I haven't found a workaround or solution to this and ripped my hair out for days :(\n. @hgfischer This implementation is different than the ui-mask one.  angular-input-masks kind of works. If you set your cursor position anywhere in the middle of the input field and hit backspace it will automatically put the cursor position to the end. Likewise, if you enter any alpha characters it will put the cursor position to the end as well. This is because it always assumes the cursor position is at the end of the input. ui-mask counters this by setting the cursor position back to where the user had it. Hopefully that makes sense.\n. I've implemented my own mask and faced this same issue. I do not think that there is an actual problem with ui-mask. There is a know bug with key events getting fired twice on Android. The problem is with Android returning the incorrect cursor position. If you log the value that `getCaretPosition(input)` is returning, it is very inconstant and incorrect. Sometimes it will return 0, other times it will return 5 (for a caret position of 2). I haven't found a workaround or solution to this and ripped my hair out for days :(\n. @hgfischer This implementation is different than the ui-mask one.  angular-input-masks kind of works. If you set your cursor position anywhere in the middle of the input field and hit backspace it will automatically put the cursor position to the end. Likewise, if you enter any alpha characters it will put the cursor position to the end as well. This is because it always assumes the cursor position is at the end of the input. ui-mask counters this by setting the cursor position back to where the user had it. Hopefully that makes sense.\n. ",
    "dainbrain": "Same deal, testers reporting ui-mask cursor weirdness on certain android devices (in our case a samsung galaxy), unfortunately it is now a blocker since it has to do with a check-out process that has to work in android. Tested on an HTC, Project Tango, and in a few different emulator configurations, but still can't replicate. Considering doing the bad thing and disabling ui-mask for specific UAs. @accolver @isaacosment @linagee @shanealsingh  Does anyone have the specs/UA string of the devices they got the error on?\n. Same deal, testers reporting ui-mask cursor weirdness on certain android devices (in our case a samsung galaxy), unfortunately it is now a blocker since it has to do with a check-out process that has to work in android. Tested on an HTC, Project Tango, and in a few different emulator configurations, but still can't replicate. Considering doing the bad thing and disabling ui-mask for specific UAs. @accolver @isaacosment @linagee @shanealsingh  Does anyone have the specs/UA string of the devices they got the error on?\n. ",
    "newenegue": "I have this same issue with inputs masks on a Galaxy S3.  I am using backbone.js and creating my own input masks for phone numbers in this format: XXX-XXX-XXXX\n\nMy solution was to use the backbone \"keyup\" event to call my input formatting function.  Previously, the event was listing to \"input\".  I'm not really sure how the \"input\" event works, but changing that solved my issues.\n. @mtotheikle \n\nOriginally, I used the follow:\n\n```\nBackbone.View.extend({\n  ...\n  events: {\n    \"input #phoneInput\": \"onPhoneChange\"\n  },\n  ...\n});\n```\n\nChanging `input` to `keyup` fixed my cursor placement on the Galaxy S3 (native browser):\n\n```\nBackbone.View.extend({\n  ...\n  events: {\n    \"keyup #phoneInput\": \"onPhoneChange\"\n  },\n  ...\n});\n```\n\nI hope this helps!\n. I have this same issue with inputs masks on a Galaxy S3.  I am using backbone.js and creating my own input masks for phone numbers in this format: XXX-XXX-XXXX\n\nMy solution was to use the backbone \"keyup\" event to call my input formatting function.  Previously, the event was listing to \"input\".  I'm not really sure how the \"input\" event works, but changing that solved my issues.\n. @mtotheikle \n\nOriginally, I used the follow:\n\n```\nBackbone.View.extend({\n  ...\n  events: {\n    \"input #phoneInput\": \"onPhoneChange\"\n  },\n  ...\n});\n```\n\nChanging `input` to `keyup` fixed my cursor placement on the Galaxy S3 (native browser):\n\n```\nBackbone.View.extend({\n  ...\n  events: {\n    \"keyup #phoneInput\": \"onPhoneChange\"\n  },\n  ...\n});\n```\n\nI hope this helps!\n. ",
    "mtotheikle": "@newenegue you care to share a gist of what you did?\n. @newenegue you care to share a gist of what you did?\n. ",
    "ralfius": "```\nconst uiMaskConfigProvider = $injector.get('uiMask.ConfigProvider');\nuiMaskConfigProvider.eventsToHandle(['keypress', 'keyup', 'click', 'focus']);\n```\n\nhelped for me within app run block\n. ```\nconst uiMaskConfigProvider = $injector.get('uiMask.ConfigProvider');\nuiMaskConfigProvider.eventsToHandle(['keypress', 'keyup', 'click', 'focus']);\n```\n\nhelped for me within app run block\n. ",
    "Mathou54": "I have the same problem. It does not work when $compile is called.\nhttp://plnkr.co/edit/BrhoiSh7j5tLYqAJb1cb?p=preview\n. I have the same problem. It does not work when $compile is called.\nhttp://plnkr.co/edit/BrhoiSh7j5tLYqAJb1cb?p=preview\n. ",
    "kornalius": "Same here\n. Same here\n. ",
    "jamesbrink": "I was able to confirm this as well, good catch\n. Could anyone review this issue and commit for resolution?\n. Any chance we can get this merged in?\n. I was able to confirm this as well, good catch\n. Could anyone review this issue and commit for resolution?\n. Any chance we can get this merged in?\n. ",
    "ghost": "Can confirm this issue is still present.\n\nJust opened a pull request to fix this at https://github.com/angular-ui/ui-utils/pull/278.\n. Still not working in Angular 1.3.0 rc2. \n. Made a temporary hack to fix the problem. Add this line to row 821 in ui-utils.js:\n<code>valAltered = valUnmasked !== oldValueUnmasked;</code>\n. +1 on merge\n. ui-uploader not supported additional parameters to the upload POST request.\n\nVariable named \"data\" is declared in the beginning og \"ajaxUpload\" function.\n\n``` javascript\nfunction ajaxUpload(file, url) {\n        var xhr, formData, prop, data = '',\n            key = '' || 'file';\n```\n\nLater on in this function, there is a code that check if data not empty, to add all its properties to the formData object as request parameters (POST variables...)\n\n``` javascript\n        // Append additional data if provided:\n        if (data) {\n            for (prop in data) {\n                if (data.hasOwnProperty(prop)) {\n                    formData.append(prop, data[prop]);\n                }\n            }\n        }\n```\n\nBut there is no way to populate this variable with data (the if statement in the previous example will never evaluate as \"true\").\n\nAs a result, the only way to add parameters to the upload request is using the query string (changing the URL) instead of using request body.\n\nPull request created.\n. Can confirm this issue is still present.\n\nJust opened a pull request to fix this at https://github.com/angular-ui/ui-utils/pull/278.\n. Still not working in Angular 1.3.0 rc2. \n. Made a temporary hack to fix the problem. Add this line to row 821 in ui-utils.js:\n<code>valAltered = valUnmasked !== oldValueUnmasked;</code>\n. +1 on merge\n. ui-uploader not supported additional parameters to the upload POST request.\n\nVariable named \"data\" is declared in the beginning og \"ajaxUpload\" function.\n\n``` javascript\nfunction ajaxUpload(file, url) {\n        var xhr, formData, prop, data = '',\n            key = '' || 'file';\n```\n\nLater on in this function, there is a code that check if data not empty, to add all its properties to the formData object as request parameters (POST variables...)\n\n``` javascript\n        // Append additional data if provided:\n        if (data) {\n            for (prop in data) {\n                if (data.hasOwnProperty(prop)) {\n                    formData.append(prop, data[prop]);\n                }\n            }\n        }\n```\n\nBut there is no way to populate this variable with data (the if statement in the previous example will never evaluate as \"true\").\n\nAs a result, the only way to add parameters to the upload request is using the query string (changing the URL) instead of using request body.\n\nPull request created.\n. ",
    "Snede": "Very nice input.\n\nI won't have time to make the change and properly test it anytime soon.\nFeel free to commit the changes to my branch, to show how you would put it together.\n\nAm I correct in assuming you would like the 'global' value to be put in via the anguar.module... .value(key, value) function?\nhttps://github.com/SA-ASH/ui-utils/blob/master/modules/mask/mask.js#L7\n. I would like you to notice that I ALSO removed that ui.mask sets the required validity, as I don't think it is its responsibility, and it caused a bug in my own code.\n\nEverything was valid, and the field was not required, but ui.mask sets it so when it is empty.\nAnd ngModel already covers this perfectly.\n. [After the bug with mask setting the required validity has been fixed](https://github.com/angular-ui/ui-utils/issues/198), only the view value of this pull-request is valid.\n. I would still argue that this has no place in a masking directive. ngModel is reponsible for this logic already.\n\nIn my own projects I have removed this code completely, and it runs flawlessly. Who would ever expect a masking diretive to be responsible for the required validation logic?\n\nAs a minimum it should be possible to enable this with a setting, rather than it being the default behavior.\n. @sjbarker I think your concern is valid, and I agree that some real tests other than my single usecase is needed, but I would like to see the option to disable the feature.\n. Well done @renatorroliveira, I'm glad someone took the time to implement this obvious feature fully.\nThis should certainly be added to the project!\n. Very nice input.\n\nI won't have time to make the change and properly test it anytime soon.\nFeel free to commit the changes to my branch, to show how you would put it together.\n\nAm I correct in assuming you would like the 'global' value to be put in via the anguar.module... .value(key, value) function?\nhttps://github.com/SA-ASH/ui-utils/blob/master/modules/mask/mask.js#L7\n. I would like you to notice that I ALSO removed that ui.mask sets the required validity, as I don't think it is its responsibility, and it caused a bug in my own code.\n\nEverything was valid, and the field was not required, but ui.mask sets it so when it is empty.\nAnd ngModel already covers this perfectly.\n. [After the bug with mask setting the required validity has been fixed](https://github.com/angular-ui/ui-utils/issues/198), only the view value of this pull-request is valid.\n. I would still argue that this has no place in a masking directive. ngModel is reponsible for this logic already.\n\nIn my own projects I have removed this code completely, and it runs flawlessly. Who would ever expect a masking diretive to be responsible for the required validation logic?\n\nAs a minimum it should be possible to enable this with a setting, rather than it being the default behavior.\n. @sjbarker I think your concern is valid, and I agree that some real tests other than my single usecase is needed, but I would like to see the option to disable the feature.\n. Well done @renatorroliveira, I'm glad someone took the time to implement this obvious feature fully.\nThis should certainly be added to the project!\n. ",
    "michael-wirth": "That's what I'm looking for. Would be nice if it makes it into one of the future releases. Thanks!\n. That's what I'm looking for. Would be nice if it makes it into one of the future releases. Thanks!\n. ",
    "danimt": "This is extremely helpful. :+1: \n. This is extremely helpful. :+1: \n. ",
    "inolasco": "+1 to include this as part of the library\n. For people looking into a way to have the model use the view value, the latest version has the option model-view-value, which does the same thing as the here proposed ui-mask-use-viewvalue\n. Like this:\n\n```\n<input name=\"phone\" type=\"text\" ng-model=\"phoneNumber\" ui-mask=\"(999) 999-9999\" model-view-value=\"true\">\n```\n. Make sure you're using the latest or recent version. I copied that almost verbatim from an app where it works fine. If it helps, here's how I have the dependency in my bower.json, although in my case I only require the mask module, hence the 'bower-mask':\n\n```\n\"angular-ui-utils\": \"bower-mask\"\n```\n. +1 to include this as part of the library\n. For people looking into a way to have the model use the view value, the latest version has the option model-view-value, which does the same thing as the here proposed ui-mask-use-viewvalue\n. Like this:\n\n```\n<input name=\"phone\" type=\"text\" ng-model=\"phoneNumber\" ui-mask=\"(999) 999-9999\" model-view-value=\"true\">\n```\n. Make sure you're using the latest or recent version. I copied that almost verbatim from an app where it works fine. If it helps, here's how I have the dependency in my bower.json, although in my case I only require the mask module, hence the 'bower-mask':\n\n```\n\"angular-ui-utils\": \"bower-mask\"\n```\n. ",
    "wannado": "+1\n. +1\n. ",
    "michas84": "+1\n. +1\n. ",
    "renatorroliveira": "I am VERY surprised that this feature was not included yet.\nIf i was the manager of this lib, i would release a version just to include this feature.\nThe mask module in the version 0.1.1 is very buggy and lacks lots of features to be used properly in real world applications\n. I am VERY surprised that this feature was not included yet.\nIf i was the manager of this lib, i would release a version just to include this feature.\nThe mask module in the version 0.1.1 is very buggy and lacks lots of features to be used properly in real world applications\n. ",
    "bernardolm": "+1\n. @inolasco thanks for helps! but this doesn't works for me, I try\n. +1\n. @inolasco thanks for helps! but this doesn't works for me, I try\n. ",
    "shamoons": "How can I use the `model-view-value`?\n. How can I use the `model-view-value`?\n. ",
    "nfroidure": ":+1: really annoying\n\nWhy not just move 'use strict' in the function block of angular module declarations ?\n\n``` js\nangular.module('ui.alias', []).config(['$compileProvider', 'uiAliasConfig', function($compileProvider, uiAliasConfig){\n  'use strict';\n  // (....)\n}]);\n```\n. :+1: really annoying\n\nWhy not just move 'use strict' in the function block of angular module declarations ?\n\n``` js\nangular.module('ui.alias', []).config(['$compileProvider', 'uiAliasConfig', function($compileProvider, uiAliasConfig){\n  'use strict';\n  // (....)\n}]);\n```\n. ",
    "katowulf": "@mfeingold Thanks for that! It looks like the css has `.ng-scroll-viewport` instead of `[ng-scroll-viewport]`, which did fix the error. Cheers for that.\n\nTo offer a bit of feedback from a green user who actually bothered to read that document, and not for the sake of discrediting that great find, the documentation does not say it _must_ be constrained. It states:\n\n> Important: The viewport height has to be constrained because the directive will stop asking the datasource for more elements only when it has enough to fill out the viewport. If the height of the viewport is not constrained (style=\"height:auto\") this will never happen and the directive will try to pull the entire content of the datasource.\n\nIn summary, it says if it's not constrained, it pulls the entire contents of the data source (nothing about an error). This is also untrue in the case of the body, which works fine with or without a height constraint, which makes this paragraph even less credible.\n\nAnd last but not least, I'll just go ahead and suggest that `Cannot read property 'documentElement' of undefined` could be improved upon greatly, and doesn't give any impression of a missing height attribute.\n\nHave a great day!\n. @mfeingold Thanks for that! It looks like the css has `.ng-scroll-viewport` instead of `[ng-scroll-viewport]`, which did fix the error. Cheers for that.\n\nTo offer a bit of feedback from a green user who actually bothered to read that document, and not for the sake of discrediting that great find, the documentation does not say it _must_ be constrained. It states:\n\n> Important: The viewport height has to be constrained because the directive will stop asking the datasource for more elements only when it has enough to fill out the viewport. If the height of the viewport is not constrained (style=\"height:auto\") this will never happen and the directive will try to pull the entire content of the datasource.\n\nIn summary, it says if it's not constrained, it pulls the entire contents of the data source (nothing about an error). This is also untrue in the case of the body, which works fine with or without a height constraint, which makes this paragraph even less credible.\n\nAnd last but not least, I'll just go ahead and suggest that `Cannot read property 'documentElement' of undefined` could be improved upon greatly, and doesn't give any impression of a missing height attribute.\n\nHave a great day!\n. ",
    "callado4": "I'd also like to know if this can be done using ui-route\n. I'd also like to know if this can be done using ui-route\n. ",
    "dardub": "Will this pr be merged?\n\nAlso, what are thoughts about using ngSanitize on search strings?\n. Will this pr be merged?\n\nAlso, what are thoughts about using ngSanitize on search strings?\n. ",
    "jdlaroche": "+1. This is a very easy fix to prevent an hard to find issue when using IE8.\n\nIf you face this bug until this is merged, you might want to look how to override splice to accept only 1 parameter on IE 8.\n. +1. This is a very easy fix to prevent an hard to find issue when using IE8.\n\nIf you face this bug until this is merged, you might want to look how to override splice to accept only 1 parameter on IE 8.\n. ",
    "mcalthrop": "Found the solution: use a parameter called `$event`, like this:\n\n``` html\n<div data-ui-event=\"{ scroll: 'scrollHandler($event)' }\">\n  lots of lines\n  that can be scrolled\n  when viewed\n  ...\n</div>\n```\n\nAnd in the controller, the parameter supplied is a `jQuery` event:\n\n``` javascript\n$scope.scrollHandler = function (evt) {\n    console.log('evt.target:', evt.target);\n};\n```\n\nBut beware: when `$scope.scrollHandler` is called, it is in a child scope.\n\nSo if you want to reference a variable that is in the main controller, you will have to put it on the controller's `$scope` variable, and within `$scope.scrollHandler`, refer to it via `$scope.$parent`. \n\nSomething like this within the controller code, in conjunction with view HTML as above:\n\n``` javascript\n$scope.someBooleanVar = false;\n\n$scope.scrollHandler = function (evt) {\n    if (someCondition(evt.target)) {\n        $scope.$parent.someBooleanVar = true;    // <-- refer to parent scope here\n    }\n};\n\n```\n. Found the solution: use a parameter called `$event`, like this:\n\n``` html\n<div data-ui-event=\"{ scroll: 'scrollHandler($event)' }\">\n  lots of lines\n  that can be scrolled\n  when viewed\n  ...\n</div>\n```\n\nAnd in the controller, the parameter supplied is a `jQuery` event:\n\n``` javascript\n$scope.scrollHandler = function (evt) {\n    console.log('evt.target:', evt.target);\n};\n```\n\nBut beware: when `$scope.scrollHandler` is called, it is in a child scope.\n\nSo if you want to reference a variable that is in the main controller, you will have to put it on the controller's `$scope` variable, and within `$scope.scrollHandler`, refer to it via `$scope.$parent`. \n\nSomething like this within the controller code, in conjunction with view HTML as above:\n\n``` javascript\n$scope.someBooleanVar = false;\n\n$scope.scrollHandler = function (evt) {\n    if (someCondition(evt.target)) {\n        $scope.$parent.someBooleanVar = true;    // <-- refer to parent scope here\n    }\n};\n\n```\n. ",
    "maxbates": "for reference here is my code (havent looked at it in a while, but there are only a few changes necessary to do this:\n\n``` javascript\nangular.module('ui.keypress',[]).\n    factory('keypressHelper', function keypress($parse, $document){\n        var keysByCode = {\n            8: 'backspace',\n            9: 'tab',\n            13: 'enter',\n            27: 'esc',\n            32: 'space',\n            33: 'pageup',\n            34: 'pagedown',\n            35: 'end',\n            36: 'home',\n            37: 'left',\n            38: 'up',\n            39: 'right',\n            40: 'down',\n            45: 'insert',\n            46: 'delete'\n        };\n\n        var capitaliseFirstLetter = function (string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        };\n\n        return function(mode, scope, elm, attrs) {\n            var params, combinations = [];\n            params = scope.$eval(attrs['ui'+capitaliseFirstLetter(mode)]);\n\n            //CUSTOM\n            if (elm == $document) {\n                params = attrs;\n            }\n\n            // Prepare combinations for simple checking\n            angular.forEach(params, function (v, k) {\n                var combination, expression;\n                expression = $parse(v);\n\n                angular.forEach(k.split(' '), function(variation) {\n                    combination = {\n                        expression: expression,\n                        keys: {}\n                    };\n                    angular.forEach(variation.split('-'), function (value) {\n                        combination.keys[value] = true;\n                    });\n                    combinations.push(combination);\n                });\n            });\n\n            // Check only matching of pressed keys one of the conditions\n            //custom - assign to handler so can also use in $scope.$destroy\n            var handler = function (event) {\n                // No need to do that inside the cycle\n                var metaPressed = !!(event.metaKey && !event.ctrlKey);\n                var altPressed = !!event.altKey;\n                var ctrlPressed = !!event.ctrlKey;\n                var shiftPressed = !!event.shiftKey;\n                var keyCode = event.keyCode;\n\n                // normalize keycodes\n                if (mode === 'keypress' && !shiftPressed && keyCode >= 97 && keyCode <= 122) {\n                    keyCode = keyCode - 32;\n                }\n\n                // Iterate over prepared combinations\n                angular.forEach(combinations, function (combination) {\n\n                    var mainKeyPressed = combination.keys[keysByCode[keyCode]] || combination.keys[keyCode.toString()];\n\n                    var metaRequired = !!combination.keys.meta;\n                    var altRequired = !!combination.keys.alt;\n                    var ctrlRequired = !!combination.keys.ctrl;\n                    var shiftRequired = !!combination.keys.shift;\n\n                    if (\n                        mainKeyPressed &&\n                            ( metaRequired === metaPressed ) &&\n                            ( altRequired === altPressed ) &&\n                            ( ctrlRequired === ctrlPressed ) &&\n                            ( shiftRequired === shiftPressed )\n                        ) {\n                        // Run the function\n                        scope.$apply(function () {\n                            combination.expression(scope, { '$event': event });\n                        });\n                    }\n                });\n            };\n\n            elm.bind(mode, handler);\n\n            //custom\n            //kill on scope desctruction, if pass in scope\n            scope.$on('$destroy', function() {\n                elm.unbind(mode, handler);\n            });\n        };\n    });\n\n/**\n * Bind one or more handlers to particular keys or their combination\n * @param hash {mixed} keyBindings Can be an object or string where keybinding expression of keys or keys combinations and AngularJS Exspressions are set. Object syntax: \"{ keys1: expression1 [, keys2: expression2 [ , ... ]]}\". String syntax: \"\"expression1 on keys1 [ and expression2 on keys2 [ and ... ]]\"\". Expression is an AngularJS Expression, and key(s) are dash-separated combinations of keys and modifiers (one or many, if any. Order does not matter). Supported modifiers are 'ctrl', 'shift', 'alt' and key can be used either via its keyCode (13 for Return) or name. Named keys are 'backspace', 'tab', 'enter', 'esc', 'space', 'pageup', 'pagedown', 'end', 'home', 'left', 'up', 'right', 'down', 'insert', 'delete'.\n * @example <input ui-keypress=\"{enter:'x = 1', 'ctrl-shift-space':'foo()', 'shift-13':'bar()'}\" /> <input ui-keypress=\"foo = 2 on ctrl-13 and bar('hello') on shift-esc\" />\n **/\nangular.module('ui.keypress').directive('uiKeydown', function(keypressHelper){\n    return {\n        link: function (scope, elm, attrs) {\n            keypressHelper('keydown', scope, elm, attrs);\n        }\n    };\n});\n\nangular.module('ui.keypress').directive('uiKeypress', function(keypressHelper){\n    return {\n        link: function (scope, elm, attrs) {\n            keypressHelper('keypress', scope, elm, attrs);\n        }\n    };\n});\n\nangular.module('ui.keypress').directive('uiKeyup', function(keypressHelper){\n    return {\n        link: function (scope, elm, attrs) {\n            keypressHelper('keyup', scope, elm, attrs);\n        }\n    };\n});\n\n\n/**\n * @note CUSTOM\n * @example\n * var x = $keypress.on('keypress', {'enter' : 'foo()'}, $scope);\n * ...\n * $keypress.off(x);\n * @note\n * you can't do keypress with alt, control, option, up, down, left, right -- use keydown or keyup\n */\nangular.module('ui.keypress').service('$keypress', function(keypressHelper, $document){\n    return {\n        on : function(mode, actions, scope) {\n            return keypressHelper(mode, scope, $document, actions);\n        },\n        //note - should be handled automatically on $scope.$destroy (so use controllers), this is for manual use\n        //format: [elm, mode, handler, combinations];\n        off:function(handle) {\n            handle[0].unbind(handle[1], handle[2]);\n        }\n    }\n});\n```\n. for reference here is my code (havent looked at it in a while, but there are only a few changes necessary to do this:\n\n``` javascript\nangular.module('ui.keypress',[]).\n    factory('keypressHelper', function keypress($parse, $document){\n        var keysByCode = {\n            8: 'backspace',\n            9: 'tab',\n            13: 'enter',\n            27: 'esc',\n            32: 'space',\n            33: 'pageup',\n            34: 'pagedown',\n            35: 'end',\n            36: 'home',\n            37: 'left',\n            38: 'up',\n            39: 'right',\n            40: 'down',\n            45: 'insert',\n            46: 'delete'\n        };\n\n        var capitaliseFirstLetter = function (string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        };\n\n        return function(mode, scope, elm, attrs) {\n            var params, combinations = [];\n            params = scope.$eval(attrs['ui'+capitaliseFirstLetter(mode)]);\n\n            //CUSTOM\n            if (elm == $document) {\n                params = attrs;\n            }\n\n            // Prepare combinations for simple checking\n            angular.forEach(params, function (v, k) {\n                var combination, expression;\n                expression = $parse(v);\n\n                angular.forEach(k.split(' '), function(variation) {\n                    combination = {\n                        expression: expression,\n                        keys: {}\n                    };\n                    angular.forEach(variation.split('-'), function (value) {\n                        combination.keys[value] = true;\n                    });\n                    combinations.push(combination);\n                });\n            });\n\n            // Check only matching of pressed keys one of the conditions\n            //custom - assign to handler so can also use in $scope.$destroy\n            var handler = function (event) {\n                // No need to do that inside the cycle\n                var metaPressed = !!(event.metaKey && !event.ctrlKey);\n                var altPressed = !!event.altKey;\n                var ctrlPressed = !!event.ctrlKey;\n                var shiftPressed = !!event.shiftKey;\n                var keyCode = event.keyCode;\n\n                // normalize keycodes\n                if (mode === 'keypress' && !shiftPressed && keyCode >= 97 && keyCode <= 122) {\n                    keyCode = keyCode - 32;\n                }\n\n                // Iterate over prepared combinations\n                angular.forEach(combinations, function (combination) {\n\n                    var mainKeyPressed = combination.keys[keysByCode[keyCode]] || combination.keys[keyCode.toString()];\n\n                    var metaRequired = !!combination.keys.meta;\n                    var altRequired = !!combination.keys.alt;\n                    var ctrlRequired = !!combination.keys.ctrl;\n                    var shiftRequired = !!combination.keys.shift;\n\n                    if (\n                        mainKeyPressed &&\n                            ( metaRequired === metaPressed ) &&\n                            ( altRequired === altPressed ) &&\n                            ( ctrlRequired === ctrlPressed ) &&\n                            ( shiftRequired === shiftPressed )\n                        ) {\n                        // Run the function\n                        scope.$apply(function () {\n                            combination.expression(scope, { '$event': event });\n                        });\n                    }\n                });\n            };\n\n            elm.bind(mode, handler);\n\n            //custom\n            //kill on scope desctruction, if pass in scope\n            scope.$on('$destroy', function() {\n                elm.unbind(mode, handler);\n            });\n        };\n    });\n\n/**\n * Bind one or more handlers to particular keys or their combination\n * @param hash {mixed} keyBindings Can be an object or string where keybinding expression of keys or keys combinations and AngularJS Exspressions are set. Object syntax: \"{ keys1: expression1 [, keys2: expression2 [ , ... ]]}\". String syntax: \"\"expression1 on keys1 [ and expression2 on keys2 [ and ... ]]\"\". Expression is an AngularJS Expression, and key(s) are dash-separated combinations of keys and modifiers (one or many, if any. Order does not matter). Supported modifiers are 'ctrl', 'shift', 'alt' and key can be used either via its keyCode (13 for Return) or name. Named keys are 'backspace', 'tab', 'enter', 'esc', 'space', 'pageup', 'pagedown', 'end', 'home', 'left', 'up', 'right', 'down', 'insert', 'delete'.\n * @example <input ui-keypress=\"{enter:'x = 1', 'ctrl-shift-space':'foo()', 'shift-13':'bar()'}\" /> <input ui-keypress=\"foo = 2 on ctrl-13 and bar('hello') on shift-esc\" />\n **/\nangular.module('ui.keypress').directive('uiKeydown', function(keypressHelper){\n    return {\n        link: function (scope, elm, attrs) {\n            keypressHelper('keydown', scope, elm, attrs);\n        }\n    };\n});\n\nangular.module('ui.keypress').directive('uiKeypress', function(keypressHelper){\n    return {\n        link: function (scope, elm, attrs) {\n            keypressHelper('keypress', scope, elm, attrs);\n        }\n    };\n});\n\nangular.module('ui.keypress').directive('uiKeyup', function(keypressHelper){\n    return {\n        link: function (scope, elm, attrs) {\n            keypressHelper('keyup', scope, elm, attrs);\n        }\n    };\n});\n\n\n/**\n * @note CUSTOM\n * @example\n * var x = $keypress.on('keypress', {'enter' : 'foo()'}, $scope);\n * ...\n * $keypress.off(x);\n * @note\n * you can't do keypress with alt, control, option, up, down, left, right -- use keydown or keyup\n */\nangular.module('ui.keypress').service('$keypress', function(keypressHelper, $document){\n    return {\n        on : function(mode, actions, scope) {\n            return keypressHelper(mode, scope, $document, actions);\n        },\n        //note - should be handled automatically on $scope.$destroy (so use controllers), this is for manual use\n        //format: [elm, mode, handler, combinations];\n        off:function(handle) {\n            handle[0].unbind(handle[1], handle[2]);\n        }\n    }\n});\n```\n. ",
    "wmbutler": "&lt;p ng-bind-html=\"result.doc.COMMENT | highlight:term\"&gt;&lt;/p&gt;\n\nThe fix for this was to use a different syntax to display the result. use ng-bind-html instead of {{ }}\n. &lt;p ng-bind-html=\"result.doc.COMMENT | highlight:term\"&gt;&lt;/p&gt;\n\nThe fix for this was to use a different syntax to display the result. use ng-bind-html instead of {{ }}\n. ",
    "SlyNet": "It is probably fixed in https://github.com/angular-ui/ui-utils/commit/e53fc31aedbe47b9d2acc1d0edfa7b03a30fcc80 commit, but looks like not published to bower\n. It is probably fixed in https://github.com/angular-ui/ui-utils/commit/e53fc31aedbe47b9d2acc1d0edfa7b03a30fcc80 commit, but looks like not published to bower\n. ",
    "miticv": "If Tab get pressed while current input is already in focus - it still jumps to the next one. That was working and is still working fine after this change.\n\nThis fix is when the input (with mask) gets focus on Tab (so you are tabbing into it). \nAll other browsers correctly select the whole text inside the input box when input receives focus on Tab. Only IE does not do that - instead it just positions the cursor inside the input. This line fixes that and select the text inside the input box.\n. This is what the line is fixing in more visual way:\n![Image](https://github.com/miticv/ui-utils/blob/images/Tab.png?raw=true)\n. I just added another commit that is related to TAB functionality:\nIf mask does not starts with first character such as phone for example (___) ___-___\nthen when you tab into the input field and start typing - your character will be 1 off:\n\n![Image](https://github.com/miticv/ui-utils/blob/images/TabCursor.png?raw=true)\n. I found an issue with latest push cf00e11, I am looking into it...\n. If Tab get pressed while current input is already in focus - it still jumps to the next one. That was working and is still working fine after this change.\n\nThis fix is when the input (with mask) gets focus on Tab (so you are tabbing into it). \nAll other browsers correctly select the whole text inside the input box when input receives focus on Tab. Only IE does not do that - instead it just positions the cursor inside the input. This line fixes that and select the text inside the input box.\n. This is what the line is fixing in more visual way:\n![Image](https://github.com/miticv/ui-utils/blob/images/Tab.png?raw=true)\n. I just added another commit that is related to TAB functionality:\nIf mask does not starts with first character such as phone for example (___) ___-___\nthen when you tab into the input field and start typing - your character will be 1 off:\n\n![Image](https://github.com/miticv/ui-utils/blob/images/TabCursor.png?raw=true)\n. I found an issue with latest push cf00e11, I am looking into it...\n. ",
    "jamesmosier": "I'd still like to know the answer to this in regards to jq Passthrough, but I got a response on [Stackoverflow](http://stackoverflow.com/questions/23313322/fire-angularjs-directive-on-view-load) on how to achieve this with a regular directive.\n. I'd still like to know the answer to this in regards to jq Passthrough, but I got a response on [Stackoverflow](http://stackoverflow.com/questions/23313322/fire-angularjs-directive-on-view-load) on how to achieve this with a regular directive.\n. ",
    "david-hollifield": "How close to the **top** of your list would it be? :)\n\nI may take a crack at it. From looking at the code, the key areas would be clipTop, clipBottom, and adjustBuffer. These would need updating to determine when a \"row\" changes by looking at the top position of each element. Does that sound like a good place to start?\n\nThanks!\n. 1) I'll take a look at using offset(). That might work for what I'm doing. Thanks.\n2) I'm not a CoffeeScript guy.\n3) I'm not so sure that the clip methods are enough. I found that you really needed to be able to handle/detect a complete row change so when items are clipped/added the existing items didn't bounce around and you never had to handle any items \"left over\" in a row. I also found that handling newRow was very important in adjustBuffer. I'm open to any ideas, but that's what I came up with and it's working pretty well in my project so far.\n. I updated to use offset() instead of position(). Did what I needed. Thanks!\n. Thanks for converting my code to CoffeeScript. Not a big fan. The reason for the jumping is because you have multi-height floated items in your sample. The current code only uses the height of the first item in each row as the height to adjust the scroll offset buffer. To resolve the jumping the max height of each row would need to be tracked and that's what would need to be used as the offset adjustment. Notice how your sample smooths out after the multi-height items are scrolled away.\n. How close to the **top** of your list would it be? :)\n\nI may take a crack at it. From looking at the code, the key areas would be clipTop, clipBottom, and adjustBuffer. These would need updating to determine when a \"row\" changes by looking at the top position of each element. Does that sound like a good place to start?\n\nThanks!\n. 1) I'll take a look at using offset(). That might work for what I'm doing. Thanks.\n2) I'm not a CoffeeScript guy.\n3) I'm not so sure that the clip methods are enough. I found that you really needed to be able to handle/detect a complete row change so when items are clipped/added the existing items didn't bounce around and you never had to handle any items \"left over\" in a row. I also found that handling newRow was very important in adjustBuffer. I'm open to any ideas, but that's what I came up with and it's working pretty well in my project so far.\n. I updated to use offset() instead of position(). Did what I needed. Thanks!\n. Thanks for converting my code to CoffeeScript. Not a big fan. The reason for the jumping is because you have multi-height floated items in your sample. The current code only uses the height of the first item in each row as the height to adjust the scroll offset buffer. To resolve the jumping the max height of each row would need to be tracked and that's what would need to be used as the offset adjustment. Notice how your sample smooths out after the multi-height items are scrolled away.\n. ",
    "dhilt": "It was a great story right after this issue was published -- https://github.com/angular-ui/ui-utils/pull/234. \nAnd it was resolved with this PR: https://github.com/Hill30/NGScroller/pull/43.\nSo this one can be surely closed too.\n. i've done david's code on coffee and create test stand within my fork:\nhttp://rawgit.com/dhilt/NGScroller/inline/src/examples/windowviewportInline.html\n-- is it what we wanted?..\n-- so let's think how to improve that's jumping behaviour...\n. i can't get any positive result by row height recalculating... but i tried to hide new blocks before DOM-appending (through display-none) and show again after data-binding is occured. The result is close to amazing imho:\nhttp://rawgit.com/dhilt/NGScroller/inline/src/examples/windowviewportInlineDisplayTrick.html\n. thanks for report!\n-- this issue fixed in <a href=\"https://github.com/Hill30/NGScroller\">Hill30/NGScroller</a>\n-- you may try <a href=\"http://rawgit.com/Hill30/NGScroller/master/src/examples/scrollBubblingPrevent.html\">demo</a>\n-- and just wait for next release\n. - please look at our [usage-examples](http://rawgit.com/Hill30/NGScroller/master/src/index.html) (\"datasource on scope (not as a service)\")\n- may be you have lost somthing important, see [scopeDatasource.html](https://github.com/Hill30/NGScroller/blob/master/src/examples/scopeDatasource.html) and [scopeDatasource.coffee](https://github.com/Hill30/NGScroller/blob/master/src/examples/scopeDatasource.coffee) sources (there are five things: application, mainController, datasource, $scope and .get)\n- or you may give a repro of your trouble (via jsfiddle etc)...\n. @jfuehner I have a draft of wiki-documentation on the ui.scroll component and there are two links which can help you:\n- [a description of \"Datasource on scope\" sample](https://github.com/dhilt/NGScroller/wiki/ui.scroll-samples-wiki#sample4)\n- [some page with datasource implementation samples](https://github.com/dhilt/NGScroller/wiki/Datasource)\n\nI understand that there is some difference between ctrl's scope and directives's scope but in my projects I have no problems in both cases, and without a living demo of your problem (jsfiddle etc) this is all I can do for you...\n. - this is a common task of dynamic angular directive rendering, i suppose\n- please look at answers of http://stackoverflow.com/questions/18157305/angularjs-compiling-dynamic-html-strings-from-database or seek for another one\n- also you may use simple ng-show/ng-hide and ui-scroll revision update technique (depends on your challenge)\n. 1) what about \n\n``` html\njqLiteExtras.registerFor angular.element unless window.jQuery\n```\n\n? so you haven't to get jqLiteExtras's .css() after jQuery was included in project\n\n2) css.call(self, name, value) executing within jqLiteExtras-service leads to angular-JQLite .css(), which provides a get-set difference based on undefined value\n\n...by the way i tried to get an error but i can't; and it would be nice to see a repro\n. thanks! but this issue has done in our main repo:\nhttps://github.com/Hill30/NGScroller/commit/3e402d09584d1257efccd19fc619b8224d363ed5\n- so you can check that your changes are not enough because of 1) !match-exception 2) $scope['object.items'] fail\n- and just wait for next release\n. There is revision mechanism which is usefull for scroller-data reloading. So when you get your styles you may force scroll-updating via revision incrementing.\n\nLook at http://jsfiddle.net/kLdvt6q0/14/. Here is at line 596 2-sec delay for style injecting ($scope.style for ng-class). And you can see your problem.\n\nLook at http://jsfiddle.net/kLdvt6q0/15/. Here is at line 599 resivision dirty update after 0.5 sec after style injecting. And this solves your problem.\n\nPS Thanks to @kkataev for jsfiddle-samples.\n. This issue is a duplicate for https://github.com/Hill30/NGScroller/issues/61. So I see no problem and suppose that this one can be closed too.\n. The 1st issue is truly a bug. We have created an issue within our main repo: https://github.com/Hill30/NGScroller/issues/64.\nThe temporary solution I can suggest is to block UI until the requested data has been loaded and rows have been rendered. This can be done via \"is-loading\" attribute.\n\nThe behaviour that was described in the 2nd issue is surely inefficient, but it is supposed to be that. If your app use cases are so that the scrolling (up + down) events are pretty often then I can recommend you to make a scroller data cache layer to reduce time needed for server responding. Here is the [demo of scroller data cache implementation](http://rawgit.com/Hill30/NGScroller/master/src/examples/cache.html). In current version there is no possibility to reduce time needed for rows rendering.\n. About your 2nd issue. It seems that you have a problem with ti-autocomplete-match directive usage. And ui-scroll is in your error stack just because of nesting ti-autocomplete-match into ui-scroll. This is a [typical error](https://docs.angularjs.org/error/$compile/ctreq), but the reason is not obvious.\n\nBy the way with your 1st issue, it looks like some kind of race conditions over sources loading. The main question is does it necessary to use require.js? I'm sure that if you choose not to use this thing, the problem will disappear... Anyway you should deal with require.js I guess.\n. Okey, it seems that _ti-autocomplete-match_ doesn't have time to init all necessary high-level bindings in given configuration. As a proof I added _ng-if_ into _ti-autocomplete-match_ within your _ngTagsInput/auto-complete.html_ template:\n\n`<ti-autocomplete-match ng-if=\\\"item\\\" data=\\\"item\\\"></ti-autocomplete-match>`\n\nThis binding-pause trick resolves \"Controller can't be found\" issue and the view is ok. It is just an idea... and I'm still not sure that this is _ui-scroll_ issue. The problem with JQLite (Can't read prop length og null) is still happening but the error stack (with async section) leads us to _tags-input_'s kitchen and its blur event triggering.\n. @Alhuck It would be very nice if you could privide us with a demo of your issue (via [jsfiddle](https://jsfiddle.net/) or something else). Cause we are using jQuery+ui.scroll combination in more than one projects and have no problems with it. May be jQuery is being loaded too late?\n\nBtw, actual code base of ui-scroll is in https://github.com/angular-ui/ui-scroll, so if you are going to provide a demo, please resubmit your issue over there.\n. @Alhuck hope it helps\nhttps://github.com/angular-ui/ui-scroll/issues/28#issuecomment-148398889\n. I plan to prepare our base repository (https://github.com/Hill30/NGScroller) to the transfer to the angular-ui during this day. Is it correct that we can leave the old name of the component? So the name of the module remains the same (\"ui.scroll\"), the name of the bower package will be \"angular-ui-scroll\" and the homepage will be \"https://github.com/angular-ui/ui-scroll\", right?\n. It was a great story right after this issue was published -- https://github.com/angular-ui/ui-utils/pull/234. \nAnd it was resolved with this PR: https://github.com/Hill30/NGScroller/pull/43.\nSo this one can be surely closed too.\n. i've done david's code on coffee and create test stand within my fork:\nhttp://rawgit.com/dhilt/NGScroller/inline/src/examples/windowviewportInline.html\n-- is it what we wanted?..\n-- so let's think how to improve that's jumping behaviour...\n. i can't get any positive result by row height recalculating... but i tried to hide new blocks before DOM-appending (through display-none) and show again after data-binding is occured. The result is close to amazing imho:\nhttp://rawgit.com/dhilt/NGScroller/inline/src/examples/windowviewportInlineDisplayTrick.html\n. thanks for report!\n-- this issue fixed in <a href=\"https://github.com/Hill30/NGScroller\">Hill30/NGScroller</a>\n-- you may try <a href=\"http://rawgit.com/Hill30/NGScroller/master/src/examples/scrollBubblingPrevent.html\">demo</a>\n-- and just wait for next release\n. - please look at our [usage-examples](http://rawgit.com/Hill30/NGScroller/master/src/index.html) (\"datasource on scope (not as a service)\")\n- may be you have lost somthing important, see [scopeDatasource.html](https://github.com/Hill30/NGScroller/blob/master/src/examples/scopeDatasource.html) and [scopeDatasource.coffee](https://github.com/Hill30/NGScroller/blob/master/src/examples/scopeDatasource.coffee) sources (there are five things: application, mainController, datasource, $scope and .get)\n- or you may give a repro of your trouble (via jsfiddle etc)...\n. @jfuehner I have a draft of wiki-documentation on the ui.scroll component and there are two links which can help you:\n- [a description of \"Datasource on scope\" sample](https://github.com/dhilt/NGScroller/wiki/ui.scroll-samples-wiki#sample4)\n- [some page with datasource implementation samples](https://github.com/dhilt/NGScroller/wiki/Datasource)\n\nI understand that there is some difference between ctrl's scope and directives's scope but in my projects I have no problems in both cases, and without a living demo of your problem (jsfiddle etc) this is all I can do for you...\n. - this is a common task of dynamic angular directive rendering, i suppose\n- please look at answers of http://stackoverflow.com/questions/18157305/angularjs-compiling-dynamic-html-strings-from-database or seek for another one\n- also you may use simple ng-show/ng-hide and ui-scroll revision update technique (depends on your challenge)\n. 1) what about \n\n``` html\njqLiteExtras.registerFor angular.element unless window.jQuery\n```\n\n? so you haven't to get jqLiteExtras's .css() after jQuery was included in project\n\n2) css.call(self, name, value) executing within jqLiteExtras-service leads to angular-JQLite .css(), which provides a get-set difference based on undefined value\n\n...by the way i tried to get an error but i can't; and it would be nice to see a repro\n. thanks! but this issue has done in our main repo:\nhttps://github.com/Hill30/NGScroller/commit/3e402d09584d1257efccd19fc619b8224d363ed5\n- so you can check that your changes are not enough because of 1) !match-exception 2) $scope['object.items'] fail\n- and just wait for next release\n. There is revision mechanism which is usefull for scroller-data reloading. So when you get your styles you may force scroll-updating via revision incrementing.\n\nLook at http://jsfiddle.net/kLdvt6q0/14/. Here is at line 596 2-sec delay for style injecting ($scope.style for ng-class). And you can see your problem.\n\nLook at http://jsfiddle.net/kLdvt6q0/15/. Here is at line 599 resivision dirty update after 0.5 sec after style injecting. And this solves your problem.\n\nPS Thanks to @kkataev for jsfiddle-samples.\n. This issue is a duplicate for https://github.com/Hill30/NGScroller/issues/61. So I see no problem and suppose that this one can be closed too.\n. The 1st issue is truly a bug. We have created an issue within our main repo: https://github.com/Hill30/NGScroller/issues/64.\nThe temporary solution I can suggest is to block UI until the requested data has been loaded and rows have been rendered. This can be done via \"is-loading\" attribute.\n\nThe behaviour that was described in the 2nd issue is surely inefficient, but it is supposed to be that. If your app use cases are so that the scrolling (up + down) events are pretty often then I can recommend you to make a scroller data cache layer to reduce time needed for server responding. Here is the [demo of scroller data cache implementation](http://rawgit.com/Hill30/NGScroller/master/src/examples/cache.html). In current version there is no possibility to reduce time needed for rows rendering.\n. About your 2nd issue. It seems that you have a problem with ti-autocomplete-match directive usage. And ui-scroll is in your error stack just because of nesting ti-autocomplete-match into ui-scroll. This is a [typical error](https://docs.angularjs.org/error/$compile/ctreq), but the reason is not obvious.\n\nBy the way with your 1st issue, it looks like some kind of race conditions over sources loading. The main question is does it necessary to use require.js? I'm sure that if you choose not to use this thing, the problem will disappear... Anyway you should deal with require.js I guess.\n. Okey, it seems that _ti-autocomplete-match_ doesn't have time to init all necessary high-level bindings in given configuration. As a proof I added _ng-if_ into _ti-autocomplete-match_ within your _ngTagsInput/auto-complete.html_ template:\n\n`<ti-autocomplete-match ng-if=\\\"item\\\" data=\\\"item\\\"></ti-autocomplete-match>`\n\nThis binding-pause trick resolves \"Controller can't be found\" issue and the view is ok. It is just an idea... and I'm still not sure that this is _ui-scroll_ issue. The problem with JQLite (Can't read prop length og null) is still happening but the error stack (with async section) leads us to _tags-input_'s kitchen and its blur event triggering.\n. @Alhuck It would be very nice if you could privide us with a demo of your issue (via [jsfiddle](https://jsfiddle.net/) or something else). Cause we are using jQuery+ui.scroll combination in more than one projects and have no problems with it. May be jQuery is being loaded too late?\n\nBtw, actual code base of ui-scroll is in https://github.com/angular-ui/ui-scroll, so if you are going to provide a demo, please resubmit your issue over there.\n. @Alhuck hope it helps\nhttps://github.com/angular-ui/ui-scroll/issues/28#issuecomment-148398889\n. I plan to prepare our base repository (https://github.com/Hill30/NGScroller) to the transfer to the angular-ui during this day. Is it correct that we can leave the old name of the component? So the name of the module remains the same (\"ui.scroll\"), the name of the bower package will be \"angular-ui-scroll\" and the homepage will be \"https://github.com/angular-ui/ui-scroll\", right?\n. ",
    "cameronbraid": "So are you saying that the element's height is calculated immediately before it is destroyed ?\n\nIf that is the case then what I am trying to do should work.  In my case the height only changes for created/visible elements since only those ones can be interacted with.  The behaviour I am experiencing is that once the initial items are shown, if I expand the first item, scroll down to cause the next batch to load, then scroll back to the top, the first item is not showing and I can't scroll any higher to make it show.\n. I made a fiddle, and it looks like there may be a bug in ng-scroll since even if I don't change the height of the items when scrolling to the top some items still don't show.\n\nOpen http://jsfiddle.net/cameronbraid/HB7LU/3533/ then with the mouse, scroll down to the bottom of the ng-scroll example, then scroll back to the top, often I end up with 'item 5' at the top even if I don't play with the checkbox to open items.\n. Ok, thanks for that.\n\nI saw you had this : \n\nstart = Math.max(0, index);  \n\nshouldn't it rather be : \n\nstart = Math.max(0, index-1);\n\notherwise it never shows item at array index 0 ?\n\nI don't understand why the datasource.get method should be called with an index value < 1.  You docs state \"index indicates the first data row requested\"  the idea of a -ve data row sounds strange to me.  So why can't the code that calls the datasource.get method normalise index like this each time so you never have to deal with -ve indexes.  I can understand that it can't know the number of items in the list, so it can't do the end calculation, but why not the start ?\n. Ahh. Thanks for your patience and explanation.\n. So are you saying that the element's height is calculated immediately before it is destroyed ?\n\nIf that is the case then what I am trying to do should work.  In my case the height only changes for created/visible elements since only those ones can be interacted with.  The behaviour I am experiencing is that once the initial items are shown, if I expand the first item, scroll down to cause the next batch to load, then scroll back to the top, the first item is not showing and I can't scroll any higher to make it show.\n. I made a fiddle, and it looks like there may be a bug in ng-scroll since even if I don't change the height of the items when scrolling to the top some items still don't show.\n\nOpen http://jsfiddle.net/cameronbraid/HB7LU/3533/ then with the mouse, scroll down to the bottom of the ng-scroll example, then scroll back to the top, often I end up with 'item 5' at the top even if I don't play with the checkbox to open items.\n. Ok, thanks for that.\n\nI saw you had this : \n\nstart = Math.max(0, index);  \n\nshouldn't it rather be : \n\nstart = Math.max(0, index-1);\n\notherwise it never shows item at array index 0 ?\n\nI don't understand why the datasource.get method should be called with an index value < 1.  You docs state \"index indicates the first data row requested\"  the idea of a -ve data row sounds strange to me.  So why can't the code that calls the datasource.get method normalise index like this each time so you never have to deal with -ve indexes.  I can understand that it can't know the number of items in the list, so it can't do the end calculation, but why not the start ?\n. Ahh. Thanks for your patience and explanation.\n. ",
    "joshvillbrandt": ":thumbsup: \n. :thumbsup: \n. ",
    "joshkurz": "+1\nOn May 11, 2014 11:33 AM, \"Nikita Tovstoles\" notifications@github.com\nwrote:\n\n> I think 'ng-' is (unofficially) reserved for core AngularJS directives and\n> other directives in Angular-ui appear to use 'ui-' prefix.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/238\n> .\n. there will be no way to not have a breaking change with this, but I believe\nit is needed.  So yes I think we should just rename it and move forward.\n\nOn Wed, May 14, 2014 at 2:09 PM, Michael Feingold\nnotifications@github.comwrote:\n\n> @douglasduteil https://github.com/douglasduteil this is not a dup - #236https://github.com/angular-ui/ui-utils/pull/236talks about .js files and it is happily closed now.\n> @dukehoops https://github.com/dukehoops is talking about the name of\n> the directive(s). I see his point, naming consistency is important and I am\n> leaning towards re-naming too. The concern, again is backwards\n> compatibility. So should we just go ahead and rename it?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/238#issuecomment-43116400\n> .\n\n## \n\n_Josh Kurz_\nwww.joshkurz.net\n. +1\nOn May 11, 2014 11:33 AM, \"Nikita Tovstoles\" notifications@github.com\nwrote:\n\n> I think 'ng-' is (unofficially) reserved for core AngularJS directives and\n> other directives in Angular-ui appear to use 'ui-' prefix.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/238\n> .\n. there will be no way to not have a breaking change with this, but I believe\nit is needed.  So yes I think we should just rename it and move forward.\n\nOn Wed, May 14, 2014 at 2:09 PM, Michael Feingold\nnotifications@github.comwrote:\n\n> @douglasduteil https://github.com/douglasduteil this is not a dup - #236https://github.com/angular-ui/ui-utils/pull/236talks about .js files and it is happily closed now.\n> @dukehoops https://github.com/dukehoops is talking about the name of\n> the directive(s). I see his point, naming consistency is important and I am\n> leaning towards re-naming too. The concern, again is backwards\n> compatibility. So should we just go ahead and rename it?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/angular-ui/ui-utils/issues/238#issuecomment-43116400\n> .\n\n## \n\n_Josh Kurz_\nwww.joshkurz.net\n. ",
    "dukehoops": "Thanks for doing the work, @kkataev. Could you please clarify - this fix won't be available in version 0.1.1 (on bower), correct? If so, is the an ETA for next release? (I am debating whether to wait for that release or switch from using a bower package to GIT repo). Thanks.\n. updated description to point out that likely cause is that `$scope.datasource` is evaluated outside of a `$watch()` expression\n. workaround: declare `$scope.datasource` in a controller rather than linking fn.\n. Thanks for doing the work, @kkataev. Could you please clarify - this fix won't be available in version 0.1.1 (on bower), correct? If so, is the an ETA for next release? (I am debating whether to wait for that release or switch from using a bower package to GIT repo). Thanks.\n. updated description to point out that likely cause is that `$scope.datasource` is evaluated outside of a `$watch()` expression\n. workaround: declare `$scope.datasource` in a controller rather than linking fn.\n. ",
    "rocketraman": "> Essentially what I'm guess is happening is that the last value BEFORE minlength failed is the value being used, because when a value becomes invalid, the model shouldn't be getting updated. In other words the value is either null OR it's the last valid value you typed in for that specific rule.\n\nThis is something that has always bugged me about ui-validate, and now I understand where my discomfort was coming from. Why would ui-validate be using the model value to do the validation rather than the value of the input control itself, like the regular angular validation?\n\nThere is a simple, but ugly, work-around, which is to make the ng-show take into account the other validation e.g.:\n\n```\n<div ng-show='myForm.confirm_password.$error.validator && ! myForm.password.$error.minlength' class=\"text-danger\">\n```\n\nBut shouldn't ui-validate be using the input value rather than the model value?\n. > Do you mind checking out what the docs suggest? We could switch to view value I suppose.\n\nThe docs (https://docs.angularjs.org/guide/forms, see section \"Custom Validation\") suggest using the view value (as far as I understand). See, for example, this snippet under the referenced section:\n\n```\napp.directive('integer', function() {\n  return {\n    require: 'ngModel',\n    link: function(scope, elm, attrs, ctrl) {\n      ctrl.$parsers.unshift(function(viewValue) {\n        if (INTEGER_REGEXP.test(viewValue)) {\n          // it is valid\n          ctrl.$setValidity('integer', true);\n          return viewValue;\n        } else {\n          // it is invalid, return undefined (no model update)\n          ctrl.$setValidity('integer', false);\n          return undefined;\n        }\n      });\n    }\n  };\n});\n```\n\nspecifically, this: `ctrl.$parsers.unshift(function(viewValue)`.\n. This is getting beyond my meager Angular knowledge, but it appears that angular-ui validation is doing essentially the same thing. Perhaps the problem is that angular-ui is not returning \"undefined\" after a validation failure, which causes angular to continue on to the other validations rather than stopping?\n. Ah no, I see --> angular-ui is doing a mix: it is validating the view value on one side, but the expression needs a model value on the other. So yes, as long as another validation stops the model from being updated, angular-ui validate will always return false. So, it is the expression that should allow comparison with a view value, not the model (or not just the model).\n. >  In other words, make the other input valid before worrying about matching em up?\n\nThat is what I'm trying to do.\n\n> Also, I don't put all the validation on both inputs. I put all of my validation on ONE input and then just put a match validation on the second.\n\nYes, that is what I'm doing as well.\n\nI think I figured it another approach that seems to work well i.e. it makes the ui-validation functionality work in all cases. Simply access the view value of the first `password` control in the ui-validate expression e.g.:\n\n`<input id=\"confirm_password\" ui-validate=\" '$value == myForm.password.$viewValue' \"` ...`\n\ninstead of the model value of it:\n\n`<input id=\"confirm_password\" ui-validate=\" '$value == password' \"` ...`\n\nThis solves the problem as it compares the view value of the password confirm field with the view value of the password field, which is a lot more intuitive and understandable than comparing the view value of `confirm_password` with the _model_ value of `password`.\n\nThen, if one wishes to display this only when the password field validates, one can add the additional check on the ng-show e.g.:\n\n`<div ng-show='myForm.confirm_password.$error.validator && ! myForm.password.$error.minlength' class=\"text-danger\">`\n\n(What I originally thought was a hack on the `ng-show` to take into account the errors status of the password field actually makes sense now)\n. > Essentially what I'm guess is happening is that the last value BEFORE minlength failed is the value being used, because when a value becomes invalid, the model shouldn't be getting updated. In other words the value is either null OR it's the last valid value you typed in for that specific rule.\n\nThis is something that has always bugged me about ui-validate, and now I understand where my discomfort was coming from. Why would ui-validate be using the model value to do the validation rather than the value of the input control itself, like the regular angular validation?\n\nThere is a simple, but ugly, work-around, which is to make the ng-show take into account the other validation e.g.:\n\n```\n<div ng-show='myForm.confirm_password.$error.validator && ! myForm.password.$error.minlength' class=\"text-danger\">\n```\n\nBut shouldn't ui-validate be using the input value rather than the model value?\n. > Do you mind checking out what the docs suggest? We could switch to view value I suppose.\n\nThe docs (https://docs.angularjs.org/guide/forms, see section \"Custom Validation\") suggest using the view value (as far as I understand). See, for example, this snippet under the referenced section:\n\n```\napp.directive('integer', function() {\n  return {\n    require: 'ngModel',\n    link: function(scope, elm, attrs, ctrl) {\n      ctrl.$parsers.unshift(function(viewValue) {\n        if (INTEGER_REGEXP.test(viewValue)) {\n          // it is valid\n          ctrl.$setValidity('integer', true);\n          return viewValue;\n        } else {\n          // it is invalid, return undefined (no model update)\n          ctrl.$setValidity('integer', false);\n          return undefined;\n        }\n      });\n    }\n  };\n});\n```\n\nspecifically, this: `ctrl.$parsers.unshift(function(viewValue)`.\n. This is getting beyond my meager Angular knowledge, but it appears that angular-ui validation is doing essentially the same thing. Perhaps the problem is that angular-ui is not returning \"undefined\" after a validation failure, which causes angular to continue on to the other validations rather than stopping?\n. Ah no, I see --> angular-ui is doing a mix: it is validating the view value on one side, but the expression needs a model value on the other. So yes, as long as another validation stops the model from being updated, angular-ui validate will always return false. So, it is the expression that should allow comparison with a view value, not the model (or not just the model).\n. >  In other words, make the other input valid before worrying about matching em up?\n\nThat is what I'm trying to do.\n\n> Also, I don't put all the validation on both inputs. I put all of my validation on ONE input and then just put a match validation on the second.\n\nYes, that is what I'm doing as well.\n\nI think I figured it another approach that seems to work well i.e. it makes the ui-validation functionality work in all cases. Simply access the view value of the first `password` control in the ui-validate expression e.g.:\n\n`<input id=\"confirm_password\" ui-validate=\" '$value == myForm.password.$viewValue' \"` ...`\n\ninstead of the model value of it:\n\n`<input id=\"confirm_password\" ui-validate=\" '$value == password' \"` ...`\n\nThis solves the problem as it compares the view value of the password confirm field with the view value of the password field, which is a lot more intuitive and understandable than comparing the view value of `confirm_password` with the _model_ value of `password`.\n\nThen, if one wishes to display this only when the password field validates, one can add the additional check on the ng-show e.g.:\n\n`<div ng-show='myForm.confirm_password.$error.validator && ! myForm.password.$error.minlength' class=\"text-danger\">`\n\n(What I originally thought was a hack on the `ng-show` to take into account the errors status of the password field actually makes sense now)\n. ",
    "sjbarker": "@douglasduteil @shaungrady - would one of you mind giving some feedback on this? You seem to be the main `mask.js` refactor contributors. Reproduction link is in the first comment. Thanks!\n. Thanks @shaungrady!\n. Absolutely @shaungrady. Will amend shortly.\n. @shaungrady I have added the test.\n. @Snede - I'd have to run some test to be sure, but the logic I see behind it is as follows:\n- masking characters might get confused as input\n- the required directive parser runs before the other parsers\n\nWith a mask you have to tell the required directive: \"hey, even though there is stuff in the viewValue there isn't any actual data. This prevents masking characters from tricking the required directive into thinking there is user input in the control.\n\nThe second is the required directive parses first, then the rest of the parsers follow. This is, by design, the case with ui.mask. The required parser may run with the user input there and after the ui.mask parser runs the mask directive may remove the user input. But since the required directive parser has already ran, the required directive has no clue that the input has changed.\n\nAgain I would have to write and run some tests to be sure exactly what happens but that's how I see the logic.\n. @Snede - I believe this commit actually fixes the problems that most were having before (from what my research showed) but I see your point. Do you want to open an issue so we can get everyone's input and move forward investigating? Then you can link to a fiddle or plunker that demonstrates the bug and we can fix it from there. Sound good?\n. @douglasduteil @shaungrady - would one of you mind giving some feedback on this? You seem to be the main `mask.js` refactor contributors. Reproduction link is in the first comment. Thanks!\n. Thanks @shaungrady!\n. Absolutely @shaungrady. Will amend shortly.\n. @shaungrady I have added the test.\n. @Snede - I'd have to run some test to be sure, but the logic I see behind it is as follows:\n- masking characters might get confused as input\n- the required directive parser runs before the other parsers\n\nWith a mask you have to tell the required directive: \"hey, even though there is stuff in the viewValue there isn't any actual data. This prevents masking characters from tricking the required directive into thinking there is user input in the control.\n\nThe second is the required directive parses first, then the rest of the parsers follow. This is, by design, the case with ui.mask. The required parser may run with the user input there and after the ui.mask parser runs the mask directive may remove the user input. But since the required directive parser has already ran, the required directive has no clue that the input has changed.\n\nAgain I would have to write and run some tests to be sure exactly what happens but that's how I see the logic.\n. @Snede - I believe this commit actually fixes the problems that most were having before (from what my research showed) but I see your point. Do you want to open an issue so we can get everyone's input and move forward investigating? Then you can link to a fiddle or plunker that demonstrates the bug and we can fix it from there. Sound good?\n. ",
    "mdedetrich": "This has been updated, instead of automatically trying to detect whether or not functions collide, the user has to supply two attrs, one being `ui-mask-suppress-formatter` and the other being `ui-mask-suppress-parser`\n\nThese attrs are fairly verbose, however at the same time I don't believe there is an `options` object for mask, so I can easily implement it by passing an object\n. This has been updated, instead of automatically trying to detect whether or not functions collide, the user has to supply two attrs, one being `ui-mask-suppress-formatter` and the other being `ui-mask-suppress-parser`\n\nThese attrs are fairly verbose, however at the same time I don't believe there is an `options` object for mask, so I can easily implement it by passing an object\n. ",
    "pulkitsinghal": "+1 ... moderators, please merge it.\n. +1 ... moderators, please merge it.\n. ",
    "Josh68": "+1, but also might be worth considering an option to specify formatter or parser operations done by ui-mask.\n. +1, but also might be worth considering an option to specify formatter or parser operations done by ui-mask.\n. ",
    "jfuehner": "@dhilt I get this same error when trying to use ui-scroll within a directive declaring the datasource on the directives scope. Any thoughts or workarounds?\n. @dhilt I get this same error when trying to use ui-scroll within a directive declaring the datasource on the directives scope. Any thoughts or workarounds?\n. ",
    "CGowdy": "Also i'm using jQuery 1.11.0.  Here is the plunkr showing the issue: http://plnkr.co/edit/k4dOCW2qBxuIc5EhjeVm?p=preview\n. Also i'm using jQuery 1.11.0.  Here is the plunkr showing the issue: http://plnkr.co/edit/k4dOCW2qBxuIc5EhjeVm?p=preview\n. ",
    "anpieber": "Applying this fix would be kind of valuable, since it avoids continuous race conditions during building a project depending on this one.\n. Applying this fix would be kind of valuable, since it avoids continuous race conditions during building a project depending on this one.\n. ",
    "idmarjr": "No news about this pull request? :confused:\n. :smile:  \n. No news about this pull request? :confused:\n. :smile:  \n. ",
    "redgeoff": "Thanks, that was very helpful!.\n\nHere is a link with some example code: http://stackoverflow.com/questions/15561853/how-to-turn-on-off-log-debug-in-angularjs\n. Thanks, that was very helpful!.\n\nHere is a link with some example code: http://stackoverflow.com/questions/15561853/how-to-turn-on-off-log-debug-in-angularjs\n. ",
    "olegmdev": "please update bower-scroll branch for bower, bc in the current versions it's impossible\n. please update bower-scroll branch for bower, bc in the current versions it's impossible\n. ",
    "akarelas": "This has been fixed in Angular 1.3 rc4 or before. Therefore, I'm closing this issue.\n. This has been fixed in Angular 1.3 rc4 or before. Therefore, I'm closing this issue.\n. ",
    "syymza": "+1\n. +1\n. ",
    "jaawerth": "This fix works perfectly - I actually came here to suggest the exact same thing!\n\nCan we get this merged? It'll really enhance the usability of ui-scrollfix. It appears that ui-scrollfix-target was actually written with that in mind, which would make the lack of this functionality a bug.\n\nThanks!\n. This fix works perfectly - I actually came here to suggest the exact same thing!\n\nCan we get this merged? It'll really enhance the usability of ui-scrollfix. It appears that ui-scrollfix-target was actually written with that in mind, which would make the lack of this functionality a bug.\n\nThanks!\n. ",
    "chrisnicola": "I've noticed that it works fine without a placeholder or, in the case of numbers it works if the placeholder is letters:\n\n```\ntype=\"text\" name=\"dob\" ui-mask=\"9999-99-99\" placeholder=\"YYYY-MM-DD\" ng-model=\"clientProfile.dateOfBirth\"\n```\n\nThis is a bit odd. So for the date example that works, but for a telephone number I had to go with blanks.\n. I would suggest keeping the branches in their current state and deprecating them.\n. I've noticed that it works fine without a placeholder or, in the case of numbers it works if the placeholder is letters:\n\n```\ntype=\"text\" name=\"dob\" ui-mask=\"9999-99-99\" placeholder=\"YYYY-MM-DD\" ng-model=\"clientProfile.dateOfBirth\"\n```\n\nThis is a bit odd. So for the date example that works, but for a telephone number I had to go with blanks.\n. I would suggest keeping the branches in their current state and deprecating them.\n. ",
    "fauverism": "Is it possible that you entered the \\ when running your bower command _bower install angular-ui-utils#\\bower-mask_ instead of _bower install angular-ui-utils#bower-mask_ if so this can be closed\n. Is it possible that you entered the \\ when running your bower command _bower install angular-ui-utils#\\bower-mask_ instead of _bower install angular-ui-utils#bower-mask_ if so this can be closed\n. ",
    "getsetbro": "Yes probably I copied \"bower install angular-ui-utils\\#bower-event\" from the usage section and changed it to \"bower install angular-ui-utils\\#bower-mask\" and ran it.\n. Yes probably I copied \"bower install angular-ui-utils\\#bower-event\" from the usage section and changed it to \"bower install angular-ui-utils\\#bower-mask\" and ran it.\n. ",
    "nanego": "Thanks for the explanation.\nI will use the main repo.\n. Thanks for the explanation.\nI will use the main repo.\n. ",
    "bfricka": "What's your  placeholder look like?\n. What's your  placeholder look like?\n. ",
    "unruledboy": "sorry, I should have provided it, it's Australian mobile phone format:\n\n0499-999-999\n\nby the time you backspace all the way and reach \"4\", it will start to look like this if you keep pressing backspace:\n\n040_-**_-**_\n0400-**_-**_\n0400-0__-___\n0400-00_-___\n......\n. sorry, I should have provided it, it's Australian mobile phone format:\n\n0499-999-999\n\nby the time you backspace all the way and reach \"4\", it will start to look like this if you keep pressing backspace:\n\n040_-**_-**_\n0400-**_-**_\n0400-0__-___\n0400-00_-___\n......\n. ",
    "jtreuting": "I have the same issue.  My ui-mask=\"1 (999) 999-9999\" for US phone numbers.  When I hit backspace it starts filling in the numbers with 1's.  Looks like it is taking the \"non-wildcard\" data and using that when a backspace is entered.\n\nAlso, it appears to only happen when there is a digit as the first character.  When I change to ui-mask=\"x 999) 999-9999\" or ui-mask=\"(999) 999-9999\" it works fine.\n. I have the same issue.  My ui-mask=\"1 (999) 999-9999\" for US phone numbers.  When I hit backspace it starts filling in the numbers with 1's.  Looks like it is taking the \"non-wildcard\" data and using that when a backspace is entered.\n\nAlso, it appears to only happen when there is a digit as the first character.  When I change to ui-mask=\"x 999) 999-9999\" or ui-mask=\"(999) 999-9999\" it works fine.\n. ",
    "AntonVodyanoy": "\u0422\u043e\u0436\u0435 \u0441 \u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0441\u044f \u0441 \u0442\u0430\u043a\u043e\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043c\u0430\u0441\u043a\u0438 ui-mask=\"FSAAAAAAAA\" and ui-mask=\"+7(999)999-99-99\" \u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 backspace \u0432 \u0441\u0430\u043c\u043e\u043c \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u043b\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438\u0437 \u043c\u0430\u0441\u043a\u0438, \n\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0432 \u0432\u043e\u0442 \u0442\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044e:\n\n``` javascript\nfunction unmaskValue(value){\n            var valueUnmasked = '',\n              maskPatternsCopy = maskPatterns.slice();\n            // Preprocess by stripping mask components from value\n            value = value.toString();\n            value=value.replace(/_/g,'');\n            angular.forEach(maskComponents, function (component){\n                if(value.length<component.length){\n                    value='';\n                }\n              value = value.replace(component, '');\n            });\n            angular.forEach(value.split(''), function (chr){\n              if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {\n                valueUnmasked += chr;\n                maskPatternsCopy.shift();\n              }\n            });\n            return valueUnmasked;\n          }\n```\n. \u0422\u043e\u0436\u0435 \u0441 \u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0441\u044f \u0441 \u0442\u0430\u043a\u043e\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043c\u0430\u0441\u043a\u0438 ui-mask=\"FSAAAAAAAA\" and ui-mask=\"+7(999)999-99-99\" \u0438 \u043f\u0440\u0438 \u043d\u0430\u0436\u0430\u0442\u0438\u0438 backspace \u0432 \u0441\u0430\u043c\u043e\u043c \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u043b\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438\u0437 \u043c\u0430\u0441\u043a\u0438, \n\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0432 \u0432\u043e\u0442 \u0442\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044e:\n\n``` javascript\nfunction unmaskValue(value){\n            var valueUnmasked = '',\n              maskPatternsCopy = maskPatterns.slice();\n            // Preprocess by stripping mask components from value\n            value = value.toString();\n            value=value.replace(/_/g,'');\n            angular.forEach(maskComponents, function (component){\n                if(value.length<component.length){\n                    value='';\n                }\n              value = value.replace(component, '');\n            });\n            angular.forEach(value.split(''), function (chr){\n              if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {\n                valueUnmasked += chr;\n                maskPatternsCopy.shift();\n              }\n            });\n            return valueUnmasked;\n          }\n```\n. ",
    "victorkurauchi": "Commenting the line\n\n```\niAttrs.$observe('placeholder', initPlaceholder);\n```\n\nthe mask works with placeholder but still have problems with the text displayed.\n. Commenting the line\n\n```\niAttrs.$observe('placeholder', initPlaceholder);\n```\n\nthe mask works with placeholder but still have problems with the text displayed.\n. ",
    "csmosx": "+1 considering I thought that's what you meant in the docs about installing from the #bower branch... that it would install all the individual modules. Not real sure what that line is instructing then...\n\nAlso, you can't really easily --save multiple individual module installs into your bower.json, creating an all, one, or nothing choice.\n. Yes, freeze the module branches, perhaps after adding a DEPRECATED file with instructions to move to a non-branched install for latest.\n\nContinue the bower branch (and version tags derived from it) as is structured, just add all the module js files to it.\n\nThis way you are only adding to and not subtracting from existing projects who update.\n\nThe instructions for install should be:\n\n```\nbower install angular-ui-utils\n```\n\nAnd only for those who want the latest (unstable):\n\n```\nbower install angular-ui-utils#bower\n```\n. +1 considering I thought that's what you meant in the docs about installing from the #bower branch... that it would install all the individual modules. Not real sure what that line is instructing then...\n\nAlso, you can't really easily --save multiple individual module installs into your bower.json, creating an all, one, or nothing choice.\n. Yes, freeze the module branches, perhaps after adding a DEPRECATED file with instructions to move to a non-branched install for latest.\n\nContinue the bower branch (and version tags derived from it) as is structured, just add all the module js files to it.\n\nThis way you are only adding to and not subtracting from existing projects who update.\n\nThe instructions for install should be:\n\n```\nbower install angular-ui-utils\n```\n\nAnd only for those who want the latest (unstable):\n\n```\nbower install angular-ui-utils#bower\n```\n. ",
    "NickTomlin": "I am :+1: on this. I currently using just one module, which works great with the `bower-<modulename>` branch, but I want to include another. My only options right now are to include _all_ the modules, or point to `#master` and manually include a module.\n. @leachjustin18 is this still an issue for you? I'm able to install via `bower install angular-ui-utils` without problems.\n. I am :+1: on this. I currently using just one module, which works great with the `bower-<modulename>` branch, but I want to include another. My only options right now are to include _all_ the modules, or point to `#master` and manually include a module.\n. @leachjustin18 is this still an issue for you? I'm able to install via `bower install angular-ui-utils` without problems.\n. ",
    "charandas": "@mfeingold Basically, assuming I am returning in my `get` method:\n\n``` js\ndataSource.get  = function() {\n  success([1, 2, 3, 4, 5]);\n};\n```\n\nIf I scroll up from 1, I start seeing the list descending from 5 to 1 again; and if I scroll down from 5, I see the list ascending from 1 to 5 again. Can I make it so I have a stop in scroll when going to 1 and 5?\n\nI don't think there is anything necessarily wrong but I want to have stops on scrolling from extremities.\n. Thanks @mfeingold.\n\nI didn't do a great job in my example above my not using parameters - my pseudo code was too pseudo.\n\nYour example link answered my question in scroll bubbling prevent example. In that case, you break in the get function for -50 and +50 indices. That's what I need to do for my extremities. Closing this now.\n\n:thumbsup:\n. @mfeingold Basically, assuming I am returning in my `get` method:\n\n``` js\ndataSource.get  = function() {\n  success([1, 2, 3, 4, 5]);\n};\n```\n\nIf I scroll up from 1, I start seeing the list descending from 5 to 1 again; and if I scroll down from 5, I see the list ascending from 1 to 5 again. Can I make it so I have a stop in scroll when going to 1 and 5?\n\nI don't think there is anything necessarily wrong but I want to have stops on scrolling from extremities.\n. Thanks @mfeingold.\n\nI didn't do a great job in my example above my not using parameters - my pseudo code was too pseudo.\n\nYour example link answered my question in scroll bubbling prevent example. In that case, you break in the get function for -50 and +50 indices. That's what I need to do for my extremities. Closing this now.\n\n:thumbsup:\n. ",
    "Armaklan": "+1\n. +1\n. ",
    "GaryLengkong": "I would expect the second ul to appear only after the first one has reached the end has all of its elements loaded.\n. I would expect the second ul to appear only after the first one has reached the end has all of its elements loaded.\n. ",
    "tjwallace": "@smcardle add an arbitrary `ng-model` value to the input, ie `ng-model=\"confirm_password\"`. This will not effect the `credentials` model, and allow `ui-validate` to watch a value to validate.\n. Actually if the expression passed to `ui-validate` returns a promise, it will set the validity to `true` if the promise resolves, and `false` if the promise is rejected ([source](https://github.com/angular-ui/ui-utils/blob/master/modules/validate/validate.js#L37-L44)).\n\n@emadd does `UserSvc.isValidEmail` reject if the email is invalid, or only if the request failed? If it is the later you need to `deferred.resolve`/`deferred.reject` based on `result`.\n. @smcardle add an arbitrary `ng-model` value to the input, ie `ng-model=\"confirm_password\"`. This will not effect the `credentials` model, and allow `ui-validate` to watch a value to validate.\n. Actually if the expression passed to `ui-validate` returns a promise, it will set the validity to `true` if the promise resolves, and `false` if the promise is rejected ([source](https://github.com/angular-ui/ui-utils/blob/master/modules/validate/validate.js#L37-L44)).\n\n@emadd does `UserSvc.isValidEmail` reject if the email is invalid, or only if the request failed? If it is the later you need to `deferred.resolve`/`deferred.reject` based on `result`.\n. ",
    "cranesandcaff": "I am also getting the same error. \n. I am also getting the same error. \n. ",
    "dprothero": "I'm experiencing this issue today. Will this get pulled in?\n. I'm experiencing this issue today. Will this get pulled in?\n. ",
    "enriquein": "Seeing as it's been so long since this was PR'ed, I guess you'd be better off just making the change by hand. It's literally 2 lines of code.\n. The reason this was PR'ed into this repository is that, as far as I can remember, the latest version of angular-ui isn't compatible with angular 1.1.5. My memory is very murky in this respect, but I think I remember needing this specific version of angular-ui in order to make it work on a project that had been started 3 years ago and where we have no budget to do an upgrade of angular or any of its dependencies.\n\nI understand the reason for closing it, though. In this case, I encourage any people who are facing this problem to just edit the only two affected lines of code. It's a very simple change, and has been used in production for almost a year now without issues.\n. Seeing as it's been so long since this was PR'ed, I guess you'd be better off just making the change by hand. It's literally 2 lines of code.\n. The reason this was PR'ed into this repository is that, as far as I can remember, the latest version of angular-ui isn't compatible with angular 1.1.5. My memory is very murky in this respect, but I think I remember needing this specific version of angular-ui in order to make it work on a project that had been started 3 years ago and where we have no budget to do an upgrade of angular or any of its dependencies.\n\nI understand the reason for closing it, though. In this case, I encourage any people who are facing this problem to just edit the only two affected lines of code. It's a very simple change, and has been used in production for almost a year now without issues.\n. ",
    "zaggino": "cc @PowerKiKi please review\n. cc @PowerKiKi please review\n. ",
    "ygotthilf": "PR #289 with a fix. Demo here : http://codepen.io/ygotthilf/pen/vijxG\n. PR #289 with a fix. Demo here : http://codepen.io/ygotthilf/pen/vijxG\n. ",
    "brutto": "+1 Very helpful fix\n. +1 Very helpful fix\n. ",
    "yarhouse": "+1 as well, this is exactly what I needed. \nI'm loading partials dynamically as tabs with a uiscrollfix in each partial mark up. The main landing page uiscrollfix triggered on initial load, but no other uiscrollfixes get triggered in other views and returning to the landing page also rendered that uiscrollfix broken. The js behind ygotthilf's codepen was as easy as copy/paste\n. +1 as well, this is exactly what I needed. \nI'm loading partials dynamically as tabs with a uiscrollfix in each partial mark up. The main landing page uiscrollfix triggered on initial load, but no other uiscrollfixes get triggered in other views and returning to the landing page also rendered that uiscrollfix broken. The js behind ygotthilf's codepen was as easy as copy/paste\n. ",
    "stephennancekivell": "+1, thanks @ygotthilf thats how I expect it to work.\n. +1, thanks @ygotthilf thats how I expect it to work.\n. ",
    "jwebcat": "is this fix merged in currently to stable release?\n. is this fix merged in currently to stable release?\n. ",
    "kunal999": "+1\n. +1\n. ",
    "gonzoyumo": ":+1: \n. :+1: \n. ",
    "pelizza": "This was merged on branch bower-scroll? I couldn't find that working...\n. This fix doesn't worked for me. I'm just able to add items after the second position, as mentioned above.\nHow about you @char0n?\n. This was merged on branch bower-scroll? I couldn't find that working...\n. This fix doesn't worked for me. I'm just able to add items after the second position, as mentioned above.\nHow about you @char0n?\n. ",
    "westonganger": "Okay ive seen that now, should show one that loads data from an existing\narray. Anyways for example following the datasrouce in scope example it\nalways complains about the success function being undefined\n\nOn Fri, Sep 5, 2014 at 5:10 PM, Michael Feingold notifications@github.com\nwrote:\n\n> Well, did you check the examples section of the readme\n> https://github.com/angular-ui/ui-utils/blob/master/modules/scroll/README.md#examples\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/292#issuecomment-54695871.\n. Okay ive seen that now, should show one that loads data from an existing\narray. Anyways for example following the datasrouce in scope example it\nalways complains about the success function being undefined\n\nOn Fri, Sep 5, 2014 at 5:10 PM, Michael Feingold notifications@github.com\nwrote:\n\n> Well, did you check the examples section of the readme\n> https://github.com/angular-ui/ui-utils/blob/master/modules/scroll/README.md#examples\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/292#issuecomment-54695871.\n. ",
    "timothywisdom": "a \"non-coffee\" script example would be helpful too.\n. Oh - found this to convert JS to Coffee and back\n\nhttp://js2coffee.org/\n. a \"non-coffee\" script example would be helpful too.\n. Oh - found this to convert JS to Coffee and back\n\nhttp://js2coffee.org/\n. ",
    "GeoffreyEmery": "I would like to vote with Timothy.. It would be so much more powerful to have newbies be able to pick this up if the examples were not in coffee script\n. I would like to vote with Timothy.. It would be so much more powerful to have newbies be able to pick this up if the examples were not in coffee script\n. ",
    "willjk": "I have it working in 1.3.1\n. I have it working in 1.3.1\n. ",
    "levbrie": "I'm also not having this issue in 1.3.1.\n. I'm also not having this issue in 1.3.1.\n. ",
    "fallXone": "I have this same issue, any chance of this getting accepted?\n. I have a similar issue where the UI-Masked field in my form is being focused automatically. This only happens in IE.\n. I have this same issue, any chance of this getting accepted?\n. I have a similar issue where the UI-Masked field in my form is being focused automatically. This only happens in IE.\n. ",
    "char0n": "@pelizza I completly switched to http://binarymuse.github.io/ngInfiniteScroll/. Sorry cannot help you now ;]\n. @pelizza I completly switched to http://binarymuse.github.io/ngInfiniteScroll/. Sorry cannot help you now ;]\n. ",
    "capgeti": "never used one of these\n. never used one of these\n. ",
    "mbielski": "I can't say as I've ever used those. What I would use, though, is a way to have the ui-modal be configured to come in from other directions.\n. I can't say as I've ever used those. What I would use, though, is a way to have the ui-modal be configured to come in from other directions.\n. ",
    "sirajc": "Since html-bind-unsafe is no longer available, highlight is useless, but I have created a newer one, can contribute if allowed, will provide details if required  \n. Submitted a PR for this earlier https://github.com/angular-ui/ui-utils/pull/277\nHere is the issue details I posted there\nng-bind-html-unsafe is not available in 1.2+ so we have to use ng-bind-html, but these need trusted data\n. Since html-bind-unsafe is no longer available, highlight is useless, but I have created a newer one, can contribute if allowed, will provide details if required  \n. Submitted a PR for this earlier https://github.com/angular-ui/ui-utils/pull/277\nHere is the issue details I posted there\nng-bind-html-unsafe is not available in 1.2+ so we have to use ng-bind-html, but these need trusted data\n. ",
    "Drewskee": "I use Highlight quite a bit. looking for an updated  version not using ng-bind-html-unsafe now. any updates ?\n. I use Highlight quite a bit. looking for an updated  version not using ng-bind-html-unsafe now. any updates ?\n. ",
    "RopoMen": "Hi,\natm. I'm not using any of these, but in one project I have been doing replacement of \"bootstrap.js\" jquery based features into AngularUI Bootstrap directives which are pure Angular. But it is missing replacement for Bootstrap affix, atleast what I have been looking...\n\nSo this \"scrollfix\" would be almost the replacement for \"affix\" if it would provide a service with callbacks. And or, it would provide a way to add certain css class for element when scrolling has passed it.\n\nExample:\n&lt;div class=\"navbar navbar-default\" ui-scrollfix=\"200\" ui-scrollfix-class=\"navbar-fixed-top\"></div>\n. Hi,\natm. I'm not using any of these, but in one project I have been doing replacement of \"bootstrap.js\" jquery based features into AngularUI Bootstrap directives which are pure Angular. But it is missing replacement for Bootstrap affix, atleast what I have been looking...\n\nSo this \"scrollfix\" would be almost the replacement for \"affix\" if it would provide a service with callbacks. And or, it would provide a way to add certain css class for element when scrolling has passed it.\n\nExample:\n&lt;div class=\"navbar navbar-default\" ui-scrollfix=\"200\" ui-scrollfix-class=\"navbar-fixed-top\"></div>\n. ",
    "kkataev": "@mfeingold In my opinion it will be better to change condition into\n`if (-1 <= (_ref = locator - first - 1) && _ref < buffer.length)`\nbecause that condition limit us not to insert element to negative position\n. @mfeingold In my opinion it will be better to change condition into\n`if (-1 <= (_ref = locator - first - 1) && _ref < buffer.length)`\nbecause that condition limit us not to insert element to negative position\n. ",
    "benquarmby": "Thank you! Can't wait until this is merged in.\n\nCurrently have to strip 'use strict' off the top manually before building for release.\n. Thank you! Can't wait until this is merged in.\n\nCurrently have to strip 'use strict' off the top manually before building for release.\n. ",
    "terite": "@PowerKiKi that should do it\n. @PowerKiKi that should do it\n. ",
    "andrealbinop": "+1\n. +1\n. ",
    "martijnve": "+1\n. +1\nDuplicate of  https://github.com/angular-ui/ui-utils/issues/301\n. +1\n. +1\nDuplicate of  https://github.com/angular-ui/ui-utils/issues/301\n. ",
    "fernandosouza": "+1\n. +1\n. ",
    "genu": "+1\n. +1\n. ",
    "jancel": "+1\n. Does anyone have a current solution or workaround for specifying this type of behavior?\n. +1\n. Does anyone have a current solution or workaround for specifying this type of behavior?\n. ",
    "alexgoroshko": "I don't have an input for phone number and need just show to user masked phone number. Is there any solution? As far as I see you use model property to show it. Have anybody implemented a filter like: {{1234567899 | mask: '(999) 999-9999'}} // -> (123) 456-7899\n. I don't have an input for phone number and need just show to user masked phone number. Is there any solution? As far as I see you use model property to show it. Have anybody implemented a filter like: {{1234567899 | mask: '(999) 999-9999'}} // -> (123) 456-7899\n. ",
    "vinyoliver": "+1\n. +1\n. ",
    "jeffsheets": "It feels like this previous pull request was trying to address the same issue. But it appears it was closed and never merged in.\nhttps://github.com/angular-ui/ui-utils/pull/224\n\nI'm having the same issue where IE9 does not select all the text when the field is tabbed into.\n. It feels like this previous pull request was trying to address the same issue. But it appears it was closed and never merged in.\nhttps://github.com/angular-ui/ui-utils/pull/224\n\nI'm having the same issue where IE9 does not select all the text when the field is tabbed into.\n. ",
    "eiladin": "I corrected this locally by changing the code\n\nif (value === '' && controller.$error.required !== undefined) {\ncontroller.$setValidity('required', false);\n}\n\nto\n\nif (value === '' && controller.$error.required !== undefined && iAttrs.required === true) {\ncontroller.$setValidity('required', false);\n}\n\nIn my limited testing, this seems to handle setting validity correctly when the element is conditionally required.\n. I corrected this locally by changing the code\n\nif (value === '' && controller.$error.required !== undefined) {\ncontroller.$setValidity('required', false);\n}\n\nto\n\nif (value === '' && controller.$error.required !== undefined && iAttrs.required === true) {\ncontroller.$setValidity('required', false);\n}\n\nIn my limited testing, this seems to handle setting validity correctly when the element is conditionally required.\n. ",
    "Alexsey": "Cool, thanks! Till this is not merged I will write here solution from <a href='https://github.com/Hill30/NGScroller/issues/53'>ngscroll repo</a> if someone else meet this problem\n\nline 20\n\n```\nreturn element;\n```\n\nto\n\n```\nthis.viewport = element\nreturn this\n```\n\nand line 70\n\n```\nviewport = controllers[0] || angular.element(window);\n```\n\nto\n\n```\nviewport = controllers[0] && controllers[0].viewport || angular.element(window)\n```\n\nBoth should work the same since rc.0, but this one is a little bit prettier \n. Cool, thanks! Till this is not merged I will write here solution from <a href='https://github.com/Hill30/NGScroller/issues/53'>ngscroll repo</a> if someone else meet this problem\n\nline 20\n\n```\nreturn element;\n```\n\nto\n\n```\nthis.viewport = element\nreturn this\n```\n\nand line 70\n\n```\nviewport = controllers[0] || angular.element(window);\n```\n\nto\n\n```\nviewport = controllers[0] && controllers[0].viewport || angular.element(window)\n```\n\nBoth should work the same since rc.0, but this one is a little bit prettier \n. ",
    "cabdesigns": "Do we have an ETA on when this is going to be brought across into ui-scroll?\n. Do we have an ETA on when this is going to be brought across into ui-scroll?\n. ",
    "sroe": "duplicate #303 ? \n. Okay if I delete the ui-validate directive then it works... how weird.\n. duplicate #303 ? \n. Okay if I delete the ui-validate directive then it works... how weird.\n. ",
    "surjikal": "Any chance this can get merged?\n. Any chance this can get merged?\n. ",
    "julienmartin": "Any news about this ? I got the same issue.\n. Any news about this ? I got the same issue.\n. ",
    "uttarap": "No, I found no resolution to this. So I am just going to let it be for now.\n. No, I found no resolution to this. So I am just going to let it be for now.\n. ",
    "k-makarov": "+1 happens in IE11\n. +1 happens in IE11\n. ",
    "mveenstra": "Same issue here! \n. Same issue here! \n. ",
    "gvlekke": "Same issue here :(\n. Same issue here :(\n. ",
    "asadighi": "Same happens to me IE 10 and IE 11\n. I fixed this issue by changing the source code in the following manner. I don't have time at the moment if nobody fixes it by then, I will send a pull request:\n\n```\n   function getCaretPosition(input){\n        if (!input) return 0;\n        if (input.selectionStart !== undefined) {\n          return input.selectionStart;\n        } else if (document.selection) {\n            if ($(input).is(':focus')) {\n                // Curse you IE\n                input.focus();\n                var selection = document.selection.createRange();\n                selection.moveStart('character', input.value ? -input.value.length : 0);\n                return selection.text.length;\n            }\n            return 0;\n        }\n        return 0;\n      }\n\n      function setCaretPosition(input, pos){\n        if (!input) return 0;\n        if (input.offsetWidth === 0 || input.offsetHeight === 0) {\n          return; // Input's hidden\n        }\n        if (input.setSelectionRange) {\n            if ($(input).is(':focus')) {\n                input.focus();\n                input.setSelectionRange(pos, pos);\n            }\n        }\n        else if (input.createTextRange) {\n            // Curse you IE\n            if ($(input).is(':focus')) {\n                var range = input.createTextRange();\n                range.collapse(true);\n                range.moveEnd('character', pos);\n                range.moveStart('character', pos);\n                range.select();\n            }\n        }\n      }\n```\n\n![capture](https://cloud.githubusercontent.com/assets/6472655/8044033/c1800770-0dde-11e5-813a-b94e69fcea7b.PNG)\n. Same happens to me IE 10 and IE 11\n. I fixed this issue by changing the source code in the following manner. I don't have time at the moment if nobody fixes it by then, I will send a pull request:\n\n```\n   function getCaretPosition(input){\n        if (!input) return 0;\n        if (input.selectionStart !== undefined) {\n          return input.selectionStart;\n        } else if (document.selection) {\n            if ($(input).is(':focus')) {\n                // Curse you IE\n                input.focus();\n                var selection = document.selection.createRange();\n                selection.moveStart('character', input.value ? -input.value.length : 0);\n                return selection.text.length;\n            }\n            return 0;\n        }\n        return 0;\n      }\n\n      function setCaretPosition(input, pos){\n        if (!input) return 0;\n        if (input.offsetWidth === 0 || input.offsetHeight === 0) {\n          return; // Input's hidden\n        }\n        if (input.setSelectionRange) {\n            if ($(input).is(':focus')) {\n                input.focus();\n                input.setSelectionRange(pos, pos);\n            }\n        }\n        else if (input.createTextRange) {\n            // Curse you IE\n            if ($(input).is(':focus')) {\n                var range = input.createTextRange();\n                range.collapse(true);\n                range.moveEnd('character', pos);\n                range.moveStart('character', pos);\n                range.select();\n            }\n        }\n      }\n```\n\n![capture](https://cloud.githubusercontent.com/assets/6472655/8044033/c1800770-0dde-11e5-813a-b94e69fcea7b.PNG)\n. ",
    "kellyprankin": "I am having this same problem. Please send that pull request :)\n. What is the process to get this merged?\n. I am having this same problem. Please send that pull request :)\n. What is the process to get this merged?\n. ",
    "megion": "I am having this is problem too.\nI tested this fix [Applying ui-mask on multiple fields on a form sets focus \u2026 ](https://github.com/asadighi/ui-utils/commit/4615f8e2449d95badf280a9820b8e6429ebb99ab) on IE 11. Fix is working OK.\n. I am having this is problem too.\nI tested this fix [Applying ui-mask on multiple fields on a form sets focus \u2026 ](https://github.com/asadighi/ui-utils/commit/4615f8e2449d95badf280a9820b8e6429ebb99ab) on IE 11. Fix is working OK.\n. ",
    "bhushangahire": "This fix does not work on Chrome it randomly lose focus while typing. Maybe if you have another directive attached with ui-mask. \n. This fix does not work on Chrome it randomly lose focus while typing. Maybe if you have another directive attached with ui-mask. \n. ",
    "LiamK": "+1\n. Hi, rajatrocks, thanks for responding!  I finally figured it out myself, and did the same thing you are doing, but on the server side:\n\n```\n        # Strangely, the ui-scroll control index is 1-relative,\n        # adjust for that here.\n        page_index -= 1;\n\n        # Slice based on index and size.\n        # Apparently, it's important to handle the negative indexes by\n        # pretending that the negative index exists.\n        if page_index >= 0:\n            queryset = queryset[page_index:page_index+page_size]\n        elif page_index + page_size > 0:\n            queryset = queryset[0:page_index+page_size]\n        else:\n            queryset = Rideshare.objects.none()\n```\n. Thanks!  Appreciate it.\n. +1\n. Hi, rajatrocks, thanks for responding!  I finally figured it out myself, and did the same thing you are doing, but on the server side:\n\n```\n        # Strangely, the ui-scroll control index is 1-relative,\n        # adjust for that here.\n        page_index -= 1;\n\n        # Slice based on index and size.\n        # Apparently, it's important to handle the negative indexes by\n        # pretending that the negative index exists.\n        if page_index >= 0:\n            queryset = queryset[page_index:page_index+page_size]\n        elif page_index + page_size > 0:\n            queryset = queryset[0:page_index+page_size]\n        else:\n            queryset = Rideshare.objects.none()\n```\n. Thanks!  Appreciate it.\n. ",
    "mightypenguin": "+1\nI love ui-utils but the last release was 8+ months ago.\nIf you are looking for help or automated testers please ask in main README.\nThis is the only good angular <-> jqueryui bridge I know of and I really do not want to switch all of my widgets to another library.\n. +1\nI love ui-utils but the last release was 8+ months ago.\nIf you are looking for help or automated testers please ask in main README.\nThis is the only good angular <-> jqueryui bridge I know of and I really do not want to switch all of my widgets to another library.\n. ",
    "eikaramba": "+1 why is no one caring?\n. +1 why is no one caring?\n. ",
    "ofairfoul": "+1 and angular 1.3 support\n. +1 and angular 1.3 support\n. ",
    "Dollab": "+1\n. +1\n. ",
    "VJ1243": "+1\n. +1\n. ",
    "letmein": "+1 please please please\n. I've come up with a dirty jquery workaround for this issue/feature:\n\n``` coffeescript\napp.directive 'uiMask', ->\n  priority: 1000\n  link: (scope, element, attrs) ->\n    element.one 'focus', ->\n      listeners = $._data(element[0], 'events').blur\n      $.each listeners, (index, listener) ->\n        handler = listener.handler\n        # detect and unbind the uiMask blur hanlder\n        if handler.name == 'blurHandler'\n          element.unbind('blur', handler)\n```\n\nWould be cool to have an option to disable the blur handler.\n. +1 please please please\n. I've come up with a dirty jquery workaround for this issue/feature:\n\n``` coffeescript\napp.directive 'uiMask', ->\n  priority: 1000\n  link: (scope, element, attrs) ->\n    element.one 'focus', ->\n      listeners = $._data(element[0], 'events').blur\n      $.each listeners, (index, listener) ->\n        handler = listener.handler\n        # detect and unbind the uiMask blur hanlder\n        if handler.name == 'blurHandler'\n          element.unbind('blur', handler)\n```\n\nWould be cool to have an option to disable the blur handler.\n. ",
    "jabas06": "+1\n. +1\n. ",
    "rajatrocks": "I just started using this library as well and have it mostly working. \nIt does start with 1, so decrementing the index before using it makes it easier to deal with zero-based lists. It also does get called with negative numbers, which some of the time you want to prevent, but some of the time you need to modify - otherwise you'll encounter the problem where you can't get back to the initial items in the list. It seems to stop requesting items when you return less items than were requested (as specified in the buffer), which is what you want to do when the list gets back to the top.  Here's the code I'm using: \n\n``` javascript\n                // make it zero-based instead of 1-based.\n                index--;\n\n                // If a negative, reset to start of list. \n                if (index < 0) {\n                    count = count + index;\n                    index = 0;\n\n                    if (count <= 0) {\n                        success([]);\n                        return;\n                    }\n                }\n```\n\nI think the way it works is that if you have a list with 17 items and a buffer size of 10, when you're scrolling down it will load the first 10, then the next 7 to get you to 17. It will then stop because you've returned < 10. Then when you're scrolling back up it's going to go from 17 to 7 and then -3. The code above handles the -3 by returning the 7 items starting at 0. It then stops again because you've returned < 10.\n\nHope that helps. \n. Great!\n. I just started using this library as well and have it mostly working. \nIt does start with 1, so decrementing the index before using it makes it easier to deal with zero-based lists. It also does get called with negative numbers, which some of the time you want to prevent, but some of the time you need to modify - otherwise you'll encounter the problem where you can't get back to the initial items in the list. It seems to stop requesting items when you return less items than were requested (as specified in the buffer), which is what you want to do when the list gets back to the top.  Here's the code I'm using: \n\n``` javascript\n                // make it zero-based instead of 1-based.\n                index--;\n\n                // If a negative, reset to start of list. \n                if (index < 0) {\n                    count = count + index;\n                    index = 0;\n\n                    if (count <= 0) {\n                        success([]);\n                        return;\n                    }\n                }\n```\n\nI think the way it works is that if you have a list with 17 items and a buffer size of 10, when you're scrolling down it will load the first 10, then the next 7 to get you to 17. It will then stop because you've returned < 10. Then when you're scrolling back up it's going to go from 17 to 7 and then -3. The code above handles the -3 by returning the 7 items starting at 0. It then stops again because you've returned < 10.\n\nHope that helps. \n. Great!\n. ",
    "flekschas": "And what about added the possibility to start counting at zero? I mean that makes more sense since when you want to get the first element in JS (or any other programming language) you access it with index zero, e.g. `[1, 2, 3][0]`. Sure people can work around that but this behaviour is very unintuitive (I just notice it by accident) and why not allow an attribute that simple defines the index of the first value?\n. See my pull request https://github.com/angular-ui/ui-utils/pull/419\n. Interesting. Exactly the same changes have been included 20 days ago. https://github.com/Hill30/NGScroller/commit/bddf8de9fe84225e374db5427cfc38399904f826 So I was late a week.\n. And what about added the possibility to start counting at zero? I mean that makes more sense since when you want to get the first element in JS (or any other programming language) you access it with index zero, e.g. `[1, 2, 3][0]`. Sure people can work around that but this behaviour is very unintuitive (I just notice it by accident) and why not allow an attribute that simple defines the index of the first value?\n. See my pull request https://github.com/angular-ui/ui-utils/pull/419\n. Interesting. Exactly the same changes have been included 20 days ago. https://github.com/Hill30/NGScroller/commit/bddf8de9fe84225e374db5427cfc38399904f826 So I was late a week.\n. ",
    "kavinho": "Add a function to escape those characters. function escapeRegExp(string)\n. If search contains regular expression specific  characters(&&**&), highlight will fail. \n. escape search string from regular expression specific characters.\nAdd function escapeRegExp(string).\n. Add a function to escape those characters. function escapeRegExp(string)\n. If search contains regular expression specific  characters(&&**&), highlight will fail. \n. escape search string from regular expression specific characters.\nAdd function escapeRegExp(string).\n. ",
    "naku": "Fix for #322\n. Fix for #322\n. ",
    "vaaction": "+1\n. +1\n. ",
    "Kiougar": "I don't know if it's needed in this example but the previous `for` loop could handle negative `count` numbers for reverse order (started from `index` and declined `count` number of times). It is generally useful in `get` functions to be bidirectional but in this particular case maybe it is not needed.\n\nHave a look at this [jsfiddle](http://jsfiddle.net/n5jr51cc/) to see how both functions work.\n. I don't know if it's needed in this example but the previous `for` loop could handle negative `count` numbers for reverse order (started from `index` and declined `count` number of times). It is generally useful in `get` functions to be bidirectional but in this particular case maybe it is not needed.\n\nHave a look at this [jsfiddle](http://jsfiddle.net/n5jr51cc/) to see how both functions work.\n. ",
    "marcdexet-cnrs": "IMHO I think this diff\u00e9rence is easy to understand with debugger help: ui-validate are recorded as **parsers** and built-in (ie. _required_, _ng-minlength_, ...) are recorded as **validators**.\n\n**Validators** can prevent to write to model.\n\nSee ngModel.NgModelController#$$parseAndValidate\n\n```\n  this.$$parseAndValidate = function() {\n    var viewValue = ctrl.$$lastCommittedViewValue;\n    var modelValue = viewValue;\n    var parserValid = isUndefined(modelValue) ? undefined : true;\n\n    if (parserValid) {\n      for (var i = 0; i < ctrl.$parsers.length; i++) {\n//***********************************************************************************************************\n// ui-validate is called HERE\n//***********************************************************************************************************\n        modelValue = ctrl.$parsers[i](modelValue);\n        if (isUndefined(modelValue)) {\n          parserValid = false;\n          break;\n        }\n      }\n    }\n    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {\n      // ctrl.$modelValue has not been touched yet...\n      ctrl.$modelValue = ngModelGet($scope);\n    }\n    var prevModelValue = ctrl.$modelValue;\n    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;\n    ctrl.$$rawModelValue = modelValue;\n\n    if (allowInvalid) {\n      ctrl.$modelValue = modelValue;\n      writeToModelIfNeeded();\n    }\n\n    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.\n    // This can happen if e.g. $setViewValue is called from inside a parser\n//***********************************************************************************************************\n// built-in are called in runValidators\n//***********************************************************************************************************\n    ctrl.$$runValidators(parserValid, modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {\n      if (!allowInvalid) {\n        // Note: Don't check ctrl.$valid here, as we could have\n        // external validators (e.g. calculated on the server),\n        // that just call $setValidity and need the model value\n        // to calculate their validity.\n        ctrl.$modelValue = allValid ? modelValue : undefined;\n        writeToModelIfNeeded();\n      }\n    });\n\n    function writeToModelIfNeeded() {\n      if (ctrl.$modelValue !== prevModelValue) {\n        ctrl.$$writeModelToScope();\n      }\n    }\n  };\n```\n. IMHO I think this diff\u00e9rence is easy to understand with debugger help: ui-validate are recorded as **parsers** and built-in (ie. _required_, _ng-minlength_, ...) are recorded as **validators**.\n\n**Validators** can prevent to write to model.\n\nSee ngModel.NgModelController#$$parseAndValidate\n\n```\n  this.$$parseAndValidate = function() {\n    var viewValue = ctrl.$$lastCommittedViewValue;\n    var modelValue = viewValue;\n    var parserValid = isUndefined(modelValue) ? undefined : true;\n\n    if (parserValid) {\n      for (var i = 0; i < ctrl.$parsers.length; i++) {\n//***********************************************************************************************************\n// ui-validate is called HERE\n//***********************************************************************************************************\n        modelValue = ctrl.$parsers[i](modelValue);\n        if (isUndefined(modelValue)) {\n          parserValid = false;\n          break;\n        }\n      }\n    }\n    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {\n      // ctrl.$modelValue has not been touched yet...\n      ctrl.$modelValue = ngModelGet($scope);\n    }\n    var prevModelValue = ctrl.$modelValue;\n    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;\n    ctrl.$$rawModelValue = modelValue;\n\n    if (allowInvalid) {\n      ctrl.$modelValue = modelValue;\n      writeToModelIfNeeded();\n    }\n\n    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.\n    // This can happen if e.g. $setViewValue is called from inside a parser\n//***********************************************************************************************************\n// built-in are called in runValidators\n//***********************************************************************************************************\n    ctrl.$$runValidators(parserValid, modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {\n      if (!allowInvalid) {\n        // Note: Don't check ctrl.$valid here, as we could have\n        // external validators (e.g. calculated on the server),\n        // that just call $setValidity and need the model value\n        // to calculate their validity.\n        ctrl.$modelValue = allValid ? modelValue : undefined;\n        writeToModelIfNeeded();\n      }\n    });\n\n    function writeToModelIfNeeded() {\n      if (ctrl.$modelValue !== prevModelValue) {\n        ctrl.$$writeModelToScope();\n      }\n    }\n  };\n```\n. ",
    "andersennl": "Nevermind, forgot to inject the Indeterminate module into the Angular app.\n. Nevermind, forgot to inject the Indeterminate module into the Angular app.\n. ",
    "sndp-vrma": "In your uploader.js file, search for below code:\n\nself.options.onCompleted(file);\n\nWe need to add response parameter, so replace above code with:\n\nself.options.onCompleted(file, xhr.responseText);\n\nNow, you can get this response in your upload.js by replacing\n\nonCompleted: function(file) {\n\nWith: \n\nonCompleted: function(file, res) {\n\nFurther, you can use server response by accessing this \"res\" variable.\n\nThanks,\nSandeep\n. I will provide few more enhancement to this plugin very soon. I am making it to deal with promises also.\n. In your uploader.js file, search for below code:\n\nself.options.onCompleted(file);\n\nWe need to add response parameter, so replace above code with:\n\nself.options.onCompleted(file, xhr.responseText);\n\nNow, you can get this response in your upload.js by replacing\n\nonCompleted: function(file) {\n\nWith: \n\nonCompleted: function(file, res) {\n\nFurther, you can use server response by accessing this \"res\" variable.\n\nThanks,\nSandeep\n. I will provide few more enhancement to this plugin very soon. I am making it to deal with promises also.\n. ",
    "realtica": "@dackyD Could you test the new commit?, thanks to @sndp-vrma for the solution.\n. @PowerKiKi do you know why the ui-uploader was removed from ui-utils page?\nhttp://angular-ui.github.io/ui-utils/\n. @dackyD Could you test the new commit?, thanks to @sndp-vrma for the solution.\n. @PowerKiKi do you know why the ui-uploader was removed from ui-utils page?\nhttp://angular-ui.github.io/ui-utils/\n. ",
    "DSpeichert": "+1 on that\nIt will also make it possible to include ui-utils on cdnjs.com, as they have only the ancient 0.1.1 version.\n. +1 on that\nIt will also make it possible to include ui-utils on cdnjs.com, as they have only the ancient 0.1.1 version.\n. ",
    "dansomething": "+1 Right now I'm having to do some ugly workarounds in order to use ui-utils on a project that only has NPM managed dependencies. We removed Bower a while ago in order to avoid managing deps in two different places on a Browserified project.\n. +1 Right now I'm having to do some ugly workarounds in order to use ui-utils on a project that only has NPM managed dependencies. We removed Bower a while ago in order to avoid managing deps in two different places on a Browserified project.\n. ",
    "austinpray": "+1 you can also have travis automatically publish it when there is a tagged release https://github.com/austinpray/asset-builder/blob/8e2f6c3560901ad5a312e405403f4d7b374ba96a/.travis.yml#L33\n. \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f\n. +1 you can also have travis automatically publish it when there is a tagged release https://github.com/austinpray/asset-builder/blob/8e2f6c3560901ad5a312e405403f4d7b374ba96a/.travis.yml#L33\n. \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f\n. ",
    "kentcdodds": "I'm not sure how your build stuff works, but you'll likely want to do your `npm release` as part of your build script after you've moved all the files around. See [this simple explination](https://gist.github.com/coolaj86/1318304) for how to do the actual publishing :-)\n. Yay! Splitting it into smaller modules and publishing them to npm are both\nawesome things! Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 1, 2015 1:35 AM, \"Adrien Crivelli\" notifications@github.com wrote:\n\n> UI.Utils modules was split in individuals repositories. Those repositories\n> are now published on npm and bower. However not all modules were considered\n> interesting enough to be kept. See the README for details\n> https://github.com/angular-ui/ui-utils#readme.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/347#issuecomment-117508106\n> .\n. I'm not sure how your build stuff works, but you'll likely want to do your `npm release` as part of your build script after you've moved all the files around. See [this simple explination](https://gist.github.com/coolaj86/1318304) for how to do the actual publishing :-)\n. Yay! Splitting it into smaller modules and publishing them to npm are both\nawesome things! Thanks!\n- Kent C. Dodds\n\n(Sent from my mobile device, please forgive typos or brevity)\nOn Jul 1, 2015 1:35 AM, \"Adrien Crivelli\" notifications@github.com wrote:\n\n> UI.Utils modules was split in individuals repositories. Those repositories\n> are now published on npm and bower. However not all modules were considered\n> interesting enough to be kept. See the README for details\n> https://github.com/angular-ui/ui-utils#readme.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/issues/347#issuecomment-117508106\n> .\n. ",
    "robsimpkins": "Another +1 for publishing the latest version to NPM, please.\n. Another +1 for publishing the latest version to NPM, please.\n. ",
    "suevalov": "+1. this dependency is the last one in our bower.json.\n. +1. this dependency is the last one in our bower.json.\n. ",
    "sricc": "+1\n. +1\n. ",
    "franky-continu": "+1 (We only use npm as builder and we don't like to install bower nor gulp nor grunt nor anything)\n. You can install from the git repo with npm but of course is not a requirejs :-) module \nFranky Diaz-Trepat\nFull Stack Engineer\n+1 (720) 295-0592 / 401-1276\nskype: franky.diaz.trepat\nfranky@continu.co\n\n> On Jun 12, 2015, at 1:31 AM, Christopher Svanefalk notifications@github.com wrote:\n> \n> +1, there currently is an NPM release, but it is not being maintained.\n> \n> https://www.npmjs.com/package/angular-ui-utils https://www.npmjs.com/package/angular-ui-utils\n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/angular-ui/ui-utils/issues/347#issuecomment-111392591.\n. Amazing News Guys, thank you so much for all the awesome work\nFranky Diaz-Trepat\nFull Stack Engineer\n+1 (720) 295-0592 / 401-1276\nskype: franky.diaz.trepat\nfranky@continu.co\n\n> On Jul 1, 2015, at 6:25 AM, Kent C. Dodds notifications@github.com wrote:\n> \n> Yay! Splitting it into smaller modules and publishing them to npm are both\n> awesome things! Thanks!\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On Jul 1, 2015 1:35 AM, \"Adrien Crivelli\" notifications@github.com wrote:\n> \n> > UI.Utils modules was split in individuals repositories. Those repositories\n> > are now published on npm and bower. However not all modules were considered\n> > interesting enough to be kept. See the README for details\n> > https://github.com/angular-ui/ui-utils#readme.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/angular-ui/ui-utils/issues/347#issuecomment-117508106\n> > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub https://github.com/angular-ui/ui-utils/issues/347#issuecomment-117639738.\n. What happened with ui-scroll\n. Sweet I\u2019m there now :-)\nFranky Diaz-Trepat\nFull Stack Engineer\n+1 (720) 295-0592 / 401-1276\nskype: franky.diaz.trepat\nfranky@continu.co\n\n> On Jul 13, 2015, at 1:50 AM, Adrien Crivelli notifications@github.com wrote:\n> \n> @franky-continu https://github.com/franky-continu https://github.com/angular-ui/ui-scroll https://github.com/angular-ui/ui-scroll\n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/angular-ui/ui-utils/issues/347#issuecomment-120841214.\n. I solved this issue by just adding 'ui.scroll' and 'ui.scroll.jqlite' as the module dependency instead of 'ui.utils'. \n. +1 (We only use npm as builder and we don't like to install bower nor gulp nor grunt nor anything)\n. You can install from the git repo with npm but of course is not a requirejs :-) module \nFranky Diaz-Trepat\nFull Stack Engineer\n+1 (720) 295-0592 / 401-1276\nskype: franky.diaz.trepat\nfranky@continu.co\n\n> On Jun 12, 2015, at 1:31 AM, Christopher Svanefalk notifications@github.com wrote:\n> \n> +1, there currently is an NPM release, but it is not being maintained.\n> \n> https://www.npmjs.com/package/angular-ui-utils https://www.npmjs.com/package/angular-ui-utils\n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/angular-ui/ui-utils/issues/347#issuecomment-111392591.\n. Amazing News Guys, thank you so much for all the awesome work\nFranky Diaz-Trepat\nFull Stack Engineer\n+1 (720) 295-0592 / 401-1276\nskype: franky.diaz.trepat\nfranky@continu.co\n\n> On Jul 1, 2015, at 6:25 AM, Kent C. Dodds notifications@github.com wrote:\n> \n> Yay! Splitting it into smaller modules and publishing them to npm are both\n> awesome things! Thanks!\n> - Kent C. Dodds\n> \n> (Sent from my mobile device, please forgive typos or brevity)\n> On Jul 1, 2015 1:35 AM, \"Adrien Crivelli\" notifications@github.com wrote:\n> \n> > UI.Utils modules was split in individuals repositories. Those repositories\n> > are now published on npm and bower. However not all modules were considered\n> > interesting enough to be kept. See the README for details\n> > https://github.com/angular-ui/ui-utils#readme.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/angular-ui/ui-utils/issues/347#issuecomment-117508106\n> > .\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub https://github.com/angular-ui/ui-utils/issues/347#issuecomment-117639738.\n. What happened with ui-scroll\n. Sweet I\u2019m there now :-)\nFranky Diaz-Trepat\nFull Stack Engineer\n+1 (720) 295-0592 / 401-1276\nskype: franky.diaz.trepat\nfranky@continu.co\n\n> On Jul 13, 2015, at 1:50 AM, Adrien Crivelli notifications@github.com wrote:\n> \n> @franky-continu https://github.com/franky-continu https://github.com/angular-ui/ui-scroll https://github.com/angular-ui/ui-scroll\n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/angular-ui/ui-utils/issues/347#issuecomment-120841214.\n. I solved this issue by just adding 'ui.scroll' and 'ui.scroll.jqlite' as the module dependency instead of 'ui.utils'. \n. ",
    "csvan": "+1, there currently is an NPM release, but it is not being maintained.\n\nhttps://www.npmjs.com/package/angular-ui-utils\n. +1, there currently is an NPM release, but it is not being maintained.\n\nhttps://www.npmjs.com/package/angular-ui-utils\n. ",
    "sammy-tam": "+1 for NPM+Browsify project\n. +1 for NPM+Browsify project\n. ",
    "alexandernst": "You already have the `package.json` file. The only thing you need to do is run `npm publish`.\n. You already have the `package.json` file. The only thing you need to do is run `npm publish`.\n. ",
    "mshwery": "aw not up-to-date on npm. major sadness. :frowning: \n. aw not up-to-date on npm. major sadness. :frowning: \n. ",
    "donnycrash": "The changes in this pull request work like a charm\n. The changes in this pull request work like a charm\n. ",
    "qwyzyx": "Sorry, been a bit busy with work.\n\nI'll add in docs and tests soon. Thanks!\n\nOn Wed, Apr 1, 2015 at 11:04 PM, Adrien Crivelli notifications@github.com\nwrote:\n\n> @xtreemrage https://github.com/xtreemrage, when somebody provide\n> documentation and tests for it, it will be much more likely to be merged\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/pull/353#issuecomment-88754874.\n. Sorry, been a bit busy with work.\n\nI'll add in docs and tests soon. Thanks!\n\nOn Wed, Apr 1, 2015 at 11:04 PM, Adrien Crivelli notifications@github.com\nwrote:\n\n> @xtreemrage https://github.com/xtreemrage, when somebody provide\n> documentation and tests for it, it will be much more likely to be merged\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/angular-ui/ui-utils/pull/353#issuecomment-88754874.\n. ",
    "itsmichaeldiego": "@qwyzyx Very good work Evan! Actually I am using it and its working very good! Thanks. \n\nActually I am working with a custom file of ui-mask, it will be very nice if this pull request is accepted.\n\nIf you need any help please let me know and I will help you ! \n. @qwyzyx Very good work Evan! Actually I am using it and its working very good! Thanks. \n\nActually I am working with a custom file of ui-mask, it will be very nice if this pull request is accepted.\n\nIf you need any help please let me know and I will help you ! \n. ",
    "DanEEStar": "I have the exact same question and would be interested in a possible answer\n. I have the exact same question and would be interested in a possible answer\n. ",
    "qpitlove": "@PowerKiKi oh~ can you speak korean?\nI suprise that reply on korea charecter !!\nIf I find some bug or imprve point, I share with you,,\n\nGood job~ ^^\n. @PowerKiKi oh~ can you speak korean?\nI suprise that reply on korea charecter !!\nIf I find some bug or imprve point, I share with you,,\n\nGood job~ ^^\n. ",
    "bogacg": "SOLVED:\nI am using UI-Router and put clearOnBlur option to a scope variable which gets assigned in route view template like this (as described in pull request #164 ):\n\n```\n                <input class=\"form-control\"\n                       id=\"inputPhone\"\n                       name=\"inputPhone\"\n                       type=\"text\"\n                       required\n                       ui-mask=\"(999) 999 9999\"\n                       ui-options=\"vm.uiOptions\"\n                       ng-model=\"vm.order.phoneNumber\" />\n\n```\n\nWhich is not so good practice because that ui-router view doesn't get loaded  before user gets to that view...so I fixed it by defining that option globally instead of in view. (again as described in second part of #164 )\n\n```\napp.config([\"$provide\", function($provide) {\n    $provide.decorator(\"uiMaskConfig\", [\"$delegate\", function($delegate) {\n        $delegate.clearOnBlur = false;\n        return $delegate;\n    }]);\n}]);\n```\n. SOLVED:\nI am using UI-Router and put clearOnBlur option to a scope variable which gets assigned in route view template like this (as described in pull request #164 ):\n\n```\n                <input class=\"form-control\"\n                       id=\"inputPhone\"\n                       name=\"inputPhone\"\n                       type=\"text\"\n                       required\n                       ui-mask=\"(999) 999 9999\"\n                       ui-options=\"vm.uiOptions\"\n                       ng-model=\"vm.order.phoneNumber\" />\n\n```\n\nWhich is not so good practice because that ui-router view doesn't get loaded  before user gets to that view...so I fixed it by defining that option globally instead of in view. (again as described in second part of #164 )\n\n```\napp.config([\"$provide\", function($provide) {\n    $provide.decorator(\"uiMaskConfig\", [\"$delegate\", function($delegate) {\n        $delegate.clearOnBlur = false;\n        return $delegate;\n    }]);\n}]);\n```\n. ",
    "cdroulers": "I'm experiencing this problem in IE11 as well. I've identified the problem here: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L94\n\nIt seems to be merging the default options with the specified options manually instead of trusting angular.extend. I've just tested quickly and angular.extend works just fine in Angular 1.3.14.\n\nI'm guessing this might be for backwards compatibility? I'll use @bogacg's workaround for now!\n. I'm experiencing this problem in IE11 as well. I've identified the problem here: https://github.com/angular-ui/ui-utils/blob/master/modules/mask/mask.js#L94\n\nIt seems to be merging the default options with the specified options manually instead of trusting angular.extend. I've just tested quickly and angular.extend works just fine in Angular 1.3.14.\n\nI'm guessing this might be for backwards compatibility? I'll use @bogacg's workaround for now!\n. ",
    "hokkaido": "I got the same problem in IE11.\n. I got the same problem in IE11.\n. ",
    "workino": "Solved.\nit is a jQuery conflict\n. Solved.\nit is a jQuery conflict\n. ",
    "cnickless": "So my issue ended up being related to my <b>buffer size</b>.\n\nMy grid has rows of 4.  My buffer was set to 8  (default value is 10).\n\nI'm not sure why exactly that was causing major issues, but as I scroll up it pops 4 off the bottom of the grid so I bumped my buffer down to 4 and viola.  Works like a charm.\n\nAlso, the documentation states that the <b>default padding</b> is 0.5, but when I actually set it as 0.5, I seem to get the appropriate performance that I was looking for (removal of blank space at top/bottom as you scroll).\n\nSo I'm a happy camper.  I would chalk this one up as purely a user error, and hopefully I can add any extra inspiration for documentation updates to elaborate more for future users.\n. So my issue ended up being related to my <b>buffer size</b>.\n\nMy grid has rows of 4.  My buffer was set to 8  (default value is 10).\n\nI'm not sure why exactly that was causing major issues, but as I scroll up it pops 4 off the bottom of the grid so I bumped my buffer down to 4 and viola.  Works like a charm.\n\nAlso, the documentation states that the <b>default padding</b> is 0.5, but when I actually set it as 0.5, I seem to get the appropriate performance that I was looking for (removal of blank space at top/bottom as you scroll).\n\nSo I'm a happy camper.  I would chalk this one up as purely a user error, and hopefully I can add any extra inspiration for documentation updates to elaborate more for future users.\n. ",
    "trickpattyFH20": "+1\n\nid love to have this option\n. +1\n\nid love to have this option\n. ",
    "Bana0615": "I know they have it on the site as a demo but there is no code on how to do it. I have tried using a model and that doesnt update it so that is why i asked the question\n. I know they have it on the site as a demo but there is no code on how to do it. I have tried using a model and that doesnt update it so that is why i asked the question\n. ",
    "catsbergers": "I had exactly the same issue.  Wrap in a $timeout to make the event asynchronous - that way it will play nice with the digest cycle. (You'll need to inject $timeout into your controller).\n\n```\n$scope.destroyPopover = function(event){\n    $timeout(function () {\n        angular.element(event.target).trigger('hide');\n    }, 0);\n};\n```\n. I had exactly the same issue.  Wrap in a $timeout to make the event asynchronous - that way it will play nice with the digest cycle. (You'll need to inject $timeout into your controller).\n\n```\n$scope.destroyPopover = function(event){\n    $timeout(function () {\n        angular.element(event.target).trigger('hide');\n    }, 0);\n};\n```\n. ",
    "jacobscarter": "Thanks so much for the advice!\n. Thanks so much for the advice!\n. ",
    "HeavenGoGo": "I just create a new web application to replicate it. but have a another issue, because there is an directive named ngTagsInput, it have several directives. it will use ng-repeat load data. because the speed is slow so I use ui-scroll to speed it up. Here is the url http://1drv.ms/1QyAFr9 . \nplease download and  check it. \n![ui-scroll -operation](https://cloud.githubusercontent.com/assets/11848559/7342761/33568384-eceb-11e4-99f6-0e51d0e35f52.png)\n![ui-scroll -error](https://cloud.githubusercontent.com/assets/11848559/7342785/83d93482-eceb-11e4-9bf4-1193fa8f647a.png)\n\nthe error image said it can't get directive controller, if we remove the ui-scroll directive ,it can get again. \n\nI find the reason why it happen. it is that the ng-tagInput module have a \"autocomplete\" directive , every li element contains a \"tiAutocompleteMatch\" directive.  the \"tiAutocompleteMatch\" directive require the \"autocompleteController\", but when we use ui-scroll, the li element can't find the parent node in html. so throw this error.\n\nI make a test, module A, module B, module A have an directive \"aArea\", module B have another directive \"bSpan\", they can communicate normally with require:\"^aArea\" in \"bSpan\" directive, I don't know why here the parentNode is null.\n. @dhilt , actually  I think this error have nothing to do with the requireJS and jquery.\n\nAbout the second error, it is because there is an ng-if directive, when the li element destroyed it will throw  this error.\n\nAbout the first error, I have not found the reason of it yet. I know this is a typical error, but it is odd because we add li element to ul element, but can't find the parent of it, why ? we should create a simple directive to get a new conclusion about this.\n. @dhilt , thank you paying attention to  this question. I will use ng-if  as a temporary solution. I am not sure this is because tags-input, because I can't find the reason. Thanks again.\n. I just create a new web application to replicate it. but have a another issue, because there is an directive named ngTagsInput, it have several directives. it will use ng-repeat load data. because the speed is slow so I use ui-scroll to speed it up. Here is the url http://1drv.ms/1QyAFr9 . \nplease download and  check it. \n![ui-scroll -operation](https://cloud.githubusercontent.com/assets/11848559/7342761/33568384-eceb-11e4-99f6-0e51d0e35f52.png)\n![ui-scroll -error](https://cloud.githubusercontent.com/assets/11848559/7342785/83d93482-eceb-11e4-9bf4-1193fa8f647a.png)\n\nthe error image said it can't get directive controller, if we remove the ui-scroll directive ,it can get again. \n\nI find the reason why it happen. it is that the ng-tagInput module have a \"autocomplete\" directive , every li element contains a \"tiAutocompleteMatch\" directive.  the \"tiAutocompleteMatch\" directive require the \"autocompleteController\", but when we use ui-scroll, the li element can't find the parent node in html. so throw this error.\n\nI make a test, module A, module B, module A have an directive \"aArea\", module B have another directive \"bSpan\", they can communicate normally with require:\"^aArea\" in \"bSpan\" directive, I don't know why here the parentNode is null.\n. @dhilt , actually  I think this error have nothing to do with the requireJS and jquery.\n\nAbout the second error, it is because there is an ng-if directive, when the li element destroyed it will throw  this error.\n\nAbout the first error, I have not found the reason of it yet. I know this is a typical error, but it is odd because we add li element to ul element, but can't find the parent of it, why ? we should create a simple directive to get a new conclusion about this.\n. @dhilt , thank you paying attention to  this question. I will use ng-if  as a temporary solution. I am not sure this is because tags-input, because I can't find the reason. Thanks again.\n. ",
    "Alhuck": "I am using jquery-1.11.2 and not using ui-scroll-jqlite, the problem what i am facing while implementing ui-scroll is,\n![ui-scroll-error](https://cloud.githubusercontent.com/assets/11574492/10488609/1be99a0e-72b7-11e5-8a52-c582e7122bb0.jpg)\n\nif i use ui-scroll-jqlite along with jquery means also the same error exists, i can't remove jquery in my project. Why this error is happening \n. @dhilt see to the plunker link for the further details,\n\nhttp://embed.plnkr.co/TjlzuAg5Pbmf8WVdN27V/preview\n\nwhy this error is happening with ui-scroll with jquery?\n. Thank you @dhilt it works\n. I am using jquery-1.11.2 and not using ui-scroll-jqlite, the problem what i am facing while implementing ui-scroll is,\n![ui-scroll-error](https://cloud.githubusercontent.com/assets/11574492/10488609/1be99a0e-72b7-11e5-8a52-c582e7122bb0.jpg)\n\nif i use ui-scroll-jqlite along with jquery means also the same error exists, i can't remove jquery in my project. Why this error is happening \n. @dhilt see to the plunker link for the further details,\n\nhttp://embed.plnkr.co/TjlzuAg5Pbmf8WVdN27V/preview\n\nwhy this error is happening with ui-scroll with jquery?\n. Thank you @dhilt it works\n. ",
    "ejmarino": "Older SPA's must keep its original ui-utils version to work, new ones will use angular 1.3+ for sure. I think is reasonable. \nIt's not a big change anyway, Even keeping the retrocompatibility is not a little \"if\" in the code so it's no so bad keeping it :wink: \n. Older SPA's must keep its original ui-utils version to work, new ones will use angular 1.3+ for sure. I think is reasonable. \nIt's not a big change anyway, Even keeping the retrocompatibility is not a little \"if\" in the code so it's no so bad keeping it :wink: \n. ",
    "YogurtShen": "very helpful,thanks\n. very helpful,thanks\n. ",
    "RimvydasUrbonas": "Yes, can we adjust throttling some how?\n. No this is not a throttle issue. Because even i put _.throttle on viewport.bind('scroll', _.throttle(resizeAndScrollHandler, 500)) on scroll.js, it comes back step by step from end to begining. It's a problem when I am e.x. at 900 to 1000 items range and I drag scrollbar at the beggining, so I expect jump directly to 0 to 100 range, but unfortunately scroll goes to 800 - 900 then 700-800 then 600-700 and when request takes few seconds to retrieve data it takes plenty of time to return to 0 - 100.\n. Yes, can we adjust throttling some how?\n. No this is not a throttle issue. Because even i put _.throttle on viewport.bind('scroll', _.throttle(resizeAndScrollHandler, 500)) on scroll.js, it comes back step by step from end to begining. It's a problem when I am e.x. at 900 to 1000 items range and I drag scrollbar at the beggining, so I expect jump directly to 0 to 100 range, but unfortunately scroll goes to 800 - 900 then 700-800 then 600-700 and when request takes few seconds to retrieve data it takes plenty of time to return to 0 - 100.\n. ",
    "compact": "If angular-ui/ui-scroll is the new location, I think the Hill30/NGScroller repo should be directly moved there in place of the current copy, so that the commits and issues will all be in one place.\n. If angular-ui/ui-scroll is the new location, I think the Hill30/NGScroller repo should be directly moved there in place of the current copy, so that the commits and issues will all be in one place.\n. ",
    "iamdeadman": "So how to fix this error, how do I check which individual repo i have to use ?\n. So how to fix this error, how do I check which individual repo i have to use ?\n. ",
    "oreenge": "https://github.com/angular-ui/ui-utils/issues/154#issuecomment-33994569 answers my question. I put image inside the div and it triggered the right height calculation I assume.\n. https://github.com/angular-ui/ui-utils/issues/154#issuecomment-33994569 answers my question. I put image inside the div and it triggered the right height calculation I assume.\n. ",
    "johnsto": "I, too, am wondering where they've gone...\n. I, too, am wondering where they've gone...\n. ",
    "hmillet": "I can't find \"ui-jq\" module in the new release 3.0...\nWhich is the correct way to get it using bower ?\n. This is clear now ;-)\n\nThanks\n. I can't find \"ui-jq\" module in the new release 3.0...\nWhich is the correct way to get it using bower ?\n. This is clear now ;-)\n\nThanks\n. ",
    "SamMorrowDrums": "OK, I apologise, it seems need to install it with the bower tag. Perhaps this should be on the Readme.MD here.\n. OK, I apologise, it seems need to install it with the bower tag. Perhaps this should be on the Readme.MD here.\n. ",
    "r00tat": "never mind, angular-ui-utils is only index.js. \n. never mind, angular-ui-utils is only index.js. \n. ",
    "Tudumanu": "@PowerKiKi What happened with ui-utils ? version was 0.2.3, suddenly version 1.0.0 then now 3.0.0 and no keypress anymore... why ?\n. @PowerKiKi What happened with ui-utils ? version was 0.2.3, suddenly version 1.0.0 then now 3.0.0 and no keypress anymore... why ?\n. ",
    "oliversalzburg": "Ah, awesome. Thanks! :)\n. Ah, awesome. Thanks! :)\n. "
}