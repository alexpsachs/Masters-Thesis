{
    "benjaminoakes": "Thanks so much for this patch!  I didn't know that adding log rotation was so easy\n\nThis looks like your changes will apply very cleanly, but in thinking towards future releases of Maid, I'm wondering if there should be a spec backing it up so I don't break it by accident.\n\nIt would seem that something like https://github.com/defunkt/fakefs could make this really easy.  Would you be willing to take a stab at this?  If it isn't feasible, please let me know, and I'll be happy to complete the pull request without.\n\nThanks again!\n\nBen\n. I would agree that it's out of scope; whether rotation actually works is part of the contract with the logger library, not something for us to test.\n\nIn general though, this does need some sort of QA so we know it works as intended.  I'll be looking at testing the change as a part of the \"bugfixes\" milestone (next release).\n. I'm working on merging this; again, it's being held up by failing specs.  I think this will be an appreciated change, however.\n. Got some specs written.  I also manually acceptance-tested that `Logger` actually rotates close to how I expected.\n\nThis is now merged into the `bugfixes` branch for inclusion in the next point release.\n. Although I can see why this might be helpful, this pull request is being replaced by having better instructions in the [README](https://github.com/benjaminoakes/maid) and some better packaging (#3).\n. I've started on this, but have run into some problems reconciling gems with Debian packages.  I've written up a question on StackOverflow:  [How do I package a Ruby application for Ubuntu, including its gem dependencies?](http://stackoverflow.com/questions/12233350/how-do-i-package-a-ruby-application-for-ubuntu-including-its-gem-dependencies)\n\nPlease share a link to that question, if you'd like.  :smile:\n. @jrgifford It's at a standstill for now.  The benefits to having an Ubuntu package are pretty minimal at the moment, especially if it's just scripting installing the `ruby1.9.1` dependency and then running `gem install maid`.  I do like that a PPA would make software updates easier to distribute, though.\n\nRight now, I'm spending the time I have to work on Maid fixing bugs and implementing new features.  I may come back to the Ubuntu package, especially if enough users would find it useful.  In the immediate-term, I can package up a \"gem installer `deb`\" and put it under the GitHub downloads -- I've gotten that working before.\n\nI see you responded to [my question on StackOverflow](http://stackoverflow.com/questions/12233350/how-do-i-package-a-ruby-application-for-ubuntu-including-its-gem-dependencies) and have a related GitHub repo.  Any help is appreciated, as always.  There's a good chance you know more about this topic than I do.  :smile:\n. @Linux-cpp-lisp Your answer is definitely helpful.  Thanks for your help!\n\nFor what it's worth, Maid does officially support Ubuntu as of v0.1.3.  I use it on my personal Ubuntu laptop.  This issue is just about providing a package for Ruby newbies. :smile:\n. @Linux-cpp-lisp Glad you like it.  :smile:\n\nUbuntu-derived distributions like Mint _should_ work, but I only really have the resources to support Ubuntu proper.  Community support of other distros is welcome.  If you'd like, you can document your experiences [in the wiki](https://github.com/benjaminoakes/maid/wiki/Linux-compatibility).\n\nI can understand what you say about `apt-get` and definitely want oblige at some point.  I got a little burned out on Ubuntu packaging earlier.  Right now, I'm more likely to implement [other new features](https://github.com/benjaminoakes/maid/issues).  :smile:\n\nIf you want to experiment with making a package that can be accepted into a PPA, that would be very helpful!  Please let me know if you'd like to coordinate.  (I still have [a PPA](https://launchpad.net/~benjaminoakes/+archive/maid) -- it just doesn't have any packages yet.)\n. I agree with both points:\n- Auto updating would be nice.  It's too hard to know when new versions of Maid are available right now.  (If there's a pure Ruby solution, that might be good too.)\n- A package might not be the most useful for RVM users, etc... but for someone who is new to Ruby, it's a much easier way to get started.\n\nHowever, neither are critical right now.  Like I've said before, my current focus is on new features and bugfixes.  Contributions are always appreciated, though.  :smile:\n. Thanks for sharing, @wjbuys.  I remember trying fpm, but it wasn't doing quite what I was hoping for.\n\nLike `heroku`, `vagrant` seems to be embedding Ruby, gems, and other dependencies in the package, and ignoring the system `ruby`.  It's less pure than I would like, but that might be the way to go...\n. Related:\n- https://packagecloud.io/ \n- https://bintray.com/\n. Hi @macfidelity,\n\nThanks for posting this issue; I'm happy you find Maid interesting.  The issue you mentioned is something I'd definitely like to improve, as I'm gradually switching from using Mac OS X to using Ubuntu.\n\nThe methods that are specific to OS X are listed [in the documentation](http://rubydoc.info/gems/maid/0.1.0/Maid/Tools).  They are tagged with \"Mac OS X\".  For the time being, it would be best to avoid them.\n\nThere's [some code to detect whether the host OS supports a given command](https://github.com/benjaminoakes/maid/blob/master/lib/maid/maid.rb#L92), but clearly it's less than foolproof.  As a longer term strategy, I'd like to have feature parity between OS X and Ubuntu (if possible).\n\nI'm open to alternatives, as well of course.  :smile:\n\nBest wishes,\n\nBen\n. I like that idea.  I might do a point release with just that.\n. I've released Maid v0.1.1 with the suggestion you mentioned, plus other various minor changes.\n. :)\n. I think this has been completed on https://github.com/benjaminoakes/maid/tree/update-deps but it may need more testing.  I'll be merging it soon.\n. I've updated and tested this.  It's now part of the simple-tools branch.\n. Thanks for your contribution, @macfidelity.\n\nThat's true, but I'm wondering if we should look at how `trash-put` works (see the `trash-cli` package and code https://github.com/andreafrancia/trash-cli).\n\nIf moving to the dir you mentioned works the same as `trash-put`, then we're good, I think.\n. Since Maid essentially does a `mv` call, I'm interested in how well that actually works...\n\nThis is basically what Maid will do after the bugfix:\n\n``` bash\nmv foo.txt \"$HOME/.local/share/Trash\"\n```\n\nI'd want to know if:\n- ...you can see the file in Nautilus' Trash\n- ...you can restore the file in Nautilus' Trash\n- ...you can see the file in `trash-list`\n- ...you can restore the file via `restore-trash`\n- ...things always work in the way you'd expect?  (E.g., does it act differently with folders?)\n- ...duplicate names are handled differently.  (E.g., do the commands above again... do you have two `foo.txt` or just one?)\n\nIf you'd like to check that out, that'd would be very helpful!  Otherwise, I'll come back to it sometime... maybe even next week.\n\n**Sidebar:** Since we're trashing things to `~/.Trash` on Ubuntu, there will probably be a migration step where they all get moved to the right place when `v0.1.3` (\"trash-bugfixes\" milestone) comes out.  That would probably be easy to do, but I'm not sure of all the implications yet.  It would be something like this:\n\n``` bash\nmv ~/.Trash/* \"$HOME/.local/share/Trash\"\nrmdir ~/.Trash\n```\n. @macfidelity Thank you for looking at that!  It's a great help.\n\nI'm a little uncomfortable writing something to modify `.trashinfo`.  That seems to go farther into OS details than Maid probably should.\n\nWhat might get implemented is:\n- If you have `trash-put` available, delegate to it.\n- If not, move to `$XDG_DATA_HOME/Trash/files` (see [Why Is There No More `~/.Trash`?](http://www.faqoverflow.com/askubuntu/13779.html)).  The user will have access to the file, but no \"restore\" functionality.\n\nThe former case could be made easier with an Ubuntu package (#3) -- it could just install `trash-cli` as a dependency.\n\nI'm still thinking about it, but the above steps would be easier to write than anything else I'm thinking of... \n\n**Bare minimum,** we'll at least move to `$XDG_DATA_HOME/Trash/files` to get the bug fixed.\n. I tried some ideas out last night.  It turns out you can't depend on XDG_DATA_HOME or the trash directory to exist, at least on the VM I tried.  The trash directory works on my normal desktop though...\n\nAt any rate, I think it will work like this:\n\n``` ruby\n# Pseudo-code\nif Platform.osx?\n  '~/.Trash'\nelsif Platform.ubuntu?  # or linux? -- we only support Ubuntu right now\n  XDG_DATA_HOME ? XDG_DATA_HOME + trash_dir : HOME + default data home + trash_dir\nelse\n  fail #?\nend\n```\n\nThen we need the migration step, which would use the platform checks as well...\n. I spent quite a bit of time researching how to fix this and migrate the files.  The results are in https://github.com/benjaminoakes/maid/tree/incorrect-trash which should get merged soon.\n\nI'm using the XDG standard, along with its implementation in Ruby.  However, there's a minor bug that causes this to spit out a warning:\n\n```\n /var/lib/gems/1.9.1/gems/xdg-2.2.2/lib/xdg/base_dir.rb:9: Use RbConfig instead of obsolete and deprecated Config.\n```\n\nIt has already been fixed in a pull request.  https://github.com/rubyworks/xdg/pull/3\n\nIf anyone wants to +1 that issue, that might be helpful in getting the changes merged.  Otherwise, I might implement a workaround, etc.\n. I've tested this, and it works as a I expect.  I've merged it into `simple-tools`, but the known issue about the warning (fixed in rubyworks/xdg#3) remains.\n\nRegardless, this is going to be included in the beta.  The non-beta version will have a workaround or a fixed `xdg` gem.\n. That would be useful for Ruby newbies; I'll add it.\n\nHowever, I'm hoping to have a PPA at some point (possibly part of #3) so at least Ubuntu users are notified of updates, etc.\n. Hey guys,\n\nSorry about that; this confusion came up because I decided to change the default command from `clean` to `help`.\n\nWhy?  It's better to be safe than sorry:  I found that I was running rules accidentally far too many times.  I really didn't want that to affect someone that didn't know the default behavior (and was just trying to see if `maid` was still installed, etc).  I considered that a bug that needed to be fixed, especially as running the sample rules could have unintended consequences.\n\nBack to this issue:  any time that you used `maid` to start cleaning before, you'll need to do `maid clean` now.  It's a change, but I think a change for the better, given the above problem.  However, I hadn't run through the examples in the README; I just updated them.\n\n(In retrospect, Maid 0.1.2 might have been better named 0.2.0 according to [semantic versioning](http://semver.org/).  I'm going to try to adhere to that more closely in the future.)\n\nGiven the amount of people that have recently started using Maid, I'd like to start making beta releases before making stable releases.  Please see issue #10 for more info.\n\nThanks again for using Maid!  It's great to see that so many people are interested in it.\n\nBen\n. Closing, as I think the question has been answered.  Please feel free to reopen if needed.\n. I like this idea a lot, but I'm not sure about its implementation just yet.  The last time I tried to create `man` pages in a Ruby project, it was more complex than I originally thought...\n\nRelated to #3.\n. That's definitely on my list of things to try, thanks!  The last time I tried this was a couple years ago, so I hope it's a better situation now.\n. Great.  :smile:\n. @macfidelity I'd love to do something like that.  Like I said, since I'm using Ubuntu more and more, I'd really like Maid to be a first class citizen, if possible.\n\nThanks for sharing your idea!  I think it could work well with the RubyGems approach too...\n. Great.  I think the roadmap will be:\n1. `bugfixes` (maybe combined with `update-deps`), probably to be called v0.1.3\n2. `simple-tools`, probably called v0.1.4, unless there are interface changes, then v0.2.0\n\nThe timeframe is roughly \"when they're done\".  :smile:\n. First beta test: #52\n. @gsiener Thanks!  You can check out v0.2.0 at https://github.com/benjaminoakes/maid/issues/71\n. Great!  You're volunteering at a great time as beta testing of v0.2.0 is underway.  Please see #71 for more details.\n. New beta: v0.2.2.beta.1 (mostly bugfixes).\n\nSee #95 for details.\n. @nicoritschel Are you interested in the betas as well?\n. New beta: v0.3.0.beta.1.  See #101 for details.\n\nOn a related note, work is progressing what's currently being called [v0.4.0](https://github.com/benjaminoakes/maid/issues?milestone=6&state=open).  Thanks to everyone who's made pull requests!  I'm hoping another beta will be right around the corner.  :smile:\n. After much adieu, a new beta is out: [v0.4.0.beta.1](http://rubygems.org/gems/maid/versions/0.4.0.beta.1)\n\nThanks everyone for your help on this!  Now that we're settling into our new house, I'm hoping to have more time to devote to open source.\n. Maid [v0.6.0.beta.2](http://rubygems.org/gems/maid/versions/0.6.0.beta.2) is out!  Lots of exciting changes, such as new daemon support.\n. They're actually all the same.  I'll update the README to make that clearer.\n\nFrom `help`:\n\n```\n$ maid help clean\nUsage:\n  maid clean\n\nOptions:\n  -r, [--rules=RULES]      \n  -n, --dry-run, [--noop]  \n  -s, [--silent]           \n\nClean based on rules\n```\n. I think it would make sense to abstract this.  Perhaps a method like:\n\n``` ruby\ndef spotlight_attribute(attr_name)\n  # ...\nend\n```\n\nThe other Spotlight-related methods could make it easier to use, but if you needed to refer to an uncommon Spotlight attribute, it would still be possible by having this method.\n\nHaving this method would make it possible to refer to uncommon Spotlight attributes.  The other Spotlight-related methods would still be good to make it a little easier (but could still call `spotlight_attribute` internally).\n\nThe above may not be possible, but something along those lines.\n\nHow does that idea sound?\n. Yep, that would need more consideration.  I would think that there might be a Ruby Spotlight library out there too...\n\n**Update:**  Maybe [ruby-spotlight](https://github.com/youpy/ruby-spotlight)\n. There's some partial implementation in #89.  It might be changed over to using `ruby-spotlight` and generalized so users can query any Spotlight attribute that they'd like.\n. Hi @MacDude,\n\nI like that idea.\n\nI think there's actually a simpler way to implement it that would work on Ubuntu as well.  (It would seem to be the same concept as `File.mtime`).\n\nBen\n. Dropped in favor of `mkdir` (#10) and `trash` (existing).\n. https://gist.github.com/4321983\n. @gsiener I've [done that in my rules](https://github.com/benjaminoakes/maid-example/blob/master/rules.rb#L82), but there can be false positives.  Having a method that can confirm that the two files have the same content would be helpful, like in the code that @bobthecow [implemented](https://gist.github.com/4321983).\n. @bobthecow Thanks for the offer of making a pull request!  That would be great.  :smile:\n\nI really like how `dupes_in` and `trash all_but_the_oldest dupes` reads... but I've been wondering if there's another way to express this filtering logic in a more reusable way.  I don't have a fully formed idea about that yet, however.\n\nRather than having additional purpose-built methods for this, could we take advantage of what `Array` and `Enumerable` give us?\n\nSome pseudo-code variations on that idea:\n\n``` ruby\ntrash dir('*.png').select(&file?) # Or `trash dir('*.png').select(&files)`\ntrash dir('*.png').select(&directory?)\ntrash dir('*.png').reject(&oldest) # Same as all_but_the_oldest\ntrash dir('*.png').reject(&newest) # Same as all_but_the_newest\ntrash dir('*.png').map(&modified_at).max\ntrash dir('*.png').grep(/foo/).reject(&shortest_name)\n\ntrash dupes.reject(&oldest)\ntrash dupes.reject(&shortest_name)\n```\n\nInclude `all_but_the_oldest` and friends would definitely **not** hold up any pull request, but filtering arrays of filenames a serious thing to consider if we want code to be reusable in interesting ways.  I'd appreciate your opinion on this.  Food for thought if nothing else.  :smile:\n\nAt any rate, thank you very much for your offer to contribute!  I look forward to seeing the pull request.\n\n(Related: https://github.com/benjaminoakes/maid/issues/51)\n. @bobthecow \n\nI've decided to make a new issue for what I brought up... I think the functionality of detecting dupes is more useful right now.  :smile:\n. @bobthecow No worries, I totally understand!  Any contributions are appreciated, whenever they happen.  :smile:\n\nIf you make a pull request with all of it, I'll definitely merge it all.  Specs are appreciated, too.\n\nI've made a branch called \"feature/dupes\" for this pull request, as there are some bugfixes that are going to be released before this.\n. This has been merged into `features/dupes`.\n. Completed by @phoolish .  Thanks again!\n. I can see this being useful.  Are you using this right now?  I'd be interested in hearing more.\n\nI think this would be a good addition to Maid, but I have a couple of comments for the diff that we should resolve before this gets merged.\n. That's all I have to comment on.\n\nThanks again for your work on this!\n. Looks a lot better... but I ran into an issue testing...  (see diff comment)\n. I think the issue should be taken care of...  it's on the `sync` branch:\n\nhttps://github.com/benjaminoakes/maid/tree/sync\n\nI'll be merging pretty soon; I'd like to do a little more testing first.\n. See also: #19\n. Superseded by #19.\n. Taking this since I just did the other deprecation thing...\n. Thanks for this.\n\nI hadn't thought of the branch change making a difference (I probably could have still pulled from your `master`).  Anyway, sorry about that.\n\nThis will most likely be going out in [an upcoming release](https://github.com/benjaminoakes/maid/issues?labels=&milestone=1&page=1&state=open), along with some other [low difficulty issues](https://github.com/benjaminoakes/maid/issues?labels=difficulty-1&page=1&state=open) (any contributions are appreciated).\n\nAlso, if you'd like to help test the beta version of the gem that has `sync`, please drop a comment in #10.\n. Thanks!  I'm merging this into `simple-tools` shortly...\n. I could do a similar refactoring with `Array()` here too...  it went from 9 to 3 lines.  :smile:\n\nhttps://github.com/benjaminoakes/maid/commit/3780eefa0594f578818a220357e81fcd7009bdf1\n\nMerging into `simple-tools`.\n. Yep, should be similar in either case.  Just a matter of getting the logic right. \n. Example in practice: https://github.com/elliotboney/DotFiles/blob/2d6f8e58b01a5597d49ce79b4b22f55290cb3752/misc/maid.symlink/rules.rb#L188\n. For now, it seems like `remove` would handle a lot of the cases...\n\nAre you thinking that `trash` would work something like this?\n\n``` ruby\n# Psuedo-code:\ndef trash(path, opts = {})\n  if opts[:removal_threshold] && disk_usage(path) > opts[:removal_threshold]\n    remove(path)\n  else\n    # normal trash logic\n  end\nend\n```\n\nThen it could be called like so:\n\n``` ruby\ntrash('~/Downloads/*.m4v', removal_threshold: 2.gigabytes)\n```\n\nWe'd need to be somewhat careful with this; a bug in the implementation could be bad news (e.g. a lot more files get deleted than you think...).\n. Great, thank you for your work on this!  I've found some places where it might be useful as well;  look for `delete` in the issues (the name `remove` is fine by me, btw).\n\nI'll be merging this into the just-pushed `simple-tools` branch, which is the milestone this will go under.  (I want to get some bugfixes out first.)  Could you choose that as the target if you make more pull requests, please?  I just added a note to that effect to the wiki; I should have done that last night.  :smile:\n\nThanks again!  It's very appreciated.\n. This looks great, thanks!  I'm merging.\n\nI'm going to refactor it a little.\n\n``` ruby\npaths = [paths] unless paths.kind_of?(Array)\npaths.each # ...\n```\n\nRuby provides an \"arrayification operator\", which [Avdi Grimm introduced me to at RubyConf](http://avdi.org/talks/confident-code-railsconf-2011/) (slide 23).  It does basically the same thing as the above, but more compactly:\n\n``` ruby\nArray(paths).each # ...\n```\n. This has been merged into `simple-tools`.\n. Gotcha.  You're writing good Ruby so far, for what it's worth.  :smile:\n. Looks great; thanks for the specs.\n\nAs you might have guessed... I'm going to refactor with `Array()` here too.  :smile:\n\nThanks again for all your work on this, @phoolish.  It's been a pleasure collaborating with you so far!\n. After a quick glance, this seems good, but I'd like to think about it a little longer.  It's getting a little late over here.  :smile:\n\nIn the meantime:\n- I would prefer the C-style operators (`&&` and `!`) vs `and`/`not`.  (See also https://github.com/bbatsov/ruby-style-guide)  Could you change them please?\n- `trash('foo.zip', remove: 1.gigabyte)` doesn't read quite as well as I'd like (although I like the brevity).  How about...  `trash('foo.zip', remove_over: 1.gigabyte)`?  I'm open to alternatives.\n- Especially since `disk_usage` shells out and then parses the result, I'm a little nervous about files getting removed accidentally.  (I'm not sure how realistic that is, but Maid is automatically handling people's files, after all.)  Perhaps [a pure-Ruby solution](http://stackoverflow.com/questions/3632074/what-is-the-fastest-way-to-calculate-disk-usage-per-customer)?  I'm still on the fence here.\n. Sounds great.  I'll wait to merge until then.\n\nI'm looking at some options for `disk_usage` but haven't gotten too far yet.  If you find a good option, please feel free to run with it.  :smile:\n. @phoolish Merge commits don't really bother me that much, although I know some people don't like them at all.  You can certainly leave it as is.  You're doing me a favor by implementing this, after all.  :smile:\n\nI won't have a chance to try this out until later.  Unfortunately, our ISP was down last night.  :disappointed:\n. Merged.\n\nI added a check to `disk_usage`... just in case, basically.\n\nThanks again for contributing!\n. Hi Larry,\n\nThanks for your contribution.  It's very appreciated!\n\nHowever, this implementation isn't entirely what I had in mind.  My apologies; the description of #27 is a little misleading.  The idea here isn't to just make `find` give the same output as `dir`, but rather _act like_ `dir` in that it gives back an `Array`.  (The calls `dir('~/Downloads')` and `find('~/Downloads')` should give quite different results.  :smile:)\n\nMy thought was that `find` could be modified to have a default block that collects the names of the files (and then that is used as the result).\n\nAlso, if possible, please make this a pull request for the `simple-tools` branch, as that's going to be used for the future release.  If it's easier to leave it on `master`, that's fine too.  I'll be happy to merge it.  :smile:\n\nThanks again for your work on this.  I'm sorry the intent was miscommunicated!\n\nBest wishes,\n\nBen\n. Sounds great. Please let me know if you need any help.\n. I can only take a quick look now, but what I see looks great!  Thanks for adding `FakeFS` too.\n\nI'm going to be trying it out on a VM this evening, and if it all checks out, I'll merge.\n\nThanks again for your contribution!  It's _very_ appreciated.\n. Merged!  Thanks again.\n. Interesting.  This would seem related to how Ruby 1.9.x handles string encodings.  (If so, we might be able to force the encoding to fix this.)\n\nI assume you're using a Mac.  I have a few questions:\n- What version of Ruby is being used?  (`ruby --version`)\n- Did you install Ruby via MacPorts?\n- Can you switch from the MacPorts Ruby to the system Ruby (1.8.7) and see if the problem still exists?  If it works fine, using 1.8.7 might be a workaround for now.\n- Can you share the zipfile that caused this problem?  (Is it something that could be downloaded for testing?)\n\nThanks for your help, and for your interest in Maid!\n\nBen\n. Ah, so both when the zipfile contains a file that has UTF-8 in its filename, and when the name of the zipfile itself contains UTF-8.  I think that would be easy enough to reproduce.  We'll see.\n\nThe current implementation of `zipfile_contents` is less than elegant, but it has certainly worked for most of my use cases (all English-language text).  This bug might be a great reason to switch over to `rubyzip`, which shouldn't have the same problem.\n- https://github.com/aussiegeek/rubyzip\n- http://rubygems.org/gems/rubyzip\n\nHowever, #6 has my attention first.  Any further contributions you can make would be appreciated.  :smile:\n\nThanks again for your report!\n\nBen\n. @gsiener Great, thank you!\n\nI did some initial research on this.  What I'd like to do is use a Ruby based solution (rather than shelling out in an ugly way).  I'm not sure what option is best yet.\n- [Zip::ZipFileSystem](http://rubyzip.sourceforge.net/classes/Zip/ZipFileSystem.html)\n- https://rubygems.org/gems/libarchive-ruby\n- https://rubygems.org/gems/libarchive\n- Possibly others\n\nIf we can pick something that would allow easier support of `tar`, etc that might beneficial... but the first concern has to be fixing this bug, I think.\n. I'd be fine with that.  (I do recommend developing in a VM, for what it's worth.  See [contributing](https://github.com/benjaminoakes/maid/wiki/Contributing).)\n\nAnother option might be adding an example zip file in this repo (e.g. `spec/fixtures/utf8.zip`) rather than creating it in the spec.\n. No worries, the effort is appreciated!  Do you think you'll have time to come back to this later, or should someone else take this on?\n. Sounds great, thanks again!\n. :thumbsup:\n\nWe probably need to update the README too.\n. I just updated the README; I think it's in pretty good shape now. \n. Closing in favor of #36 (duplicate), as it's already labelled, etc.\n\nThanks for your help on this!\n. No worries about #39.  Everyone makes duplicate issues from time to time.  :smile:\n\nFrom a quick glance, it looks good... but I think I'd prefer to keep `:fakefs => true` where it was, just so people unfamiliar with the code can easily discover that `FakeFS` is being used.\n\nLike last time, I'll be taking a closer look at this during an evening this week.  \n. Great, thank you.  :smile:\n. Regarding how soon this will be merged...\n\n> I won't have a chance to try this out until later.  Unfortunately, our ISP was down last night.  :disappointed:\n\nI might do it over lunch if I have time, though.\n\nThanks again for your work, guys!\n. Merged.  I saw `dir` hadn't been modified to use `FakeFS` (partially because it wasn't that good of a spec to begin with -- my bad), so I rewrote it.\n\nI also made some style changes to match up with the \"Ruby Style Guide\".  There are some notes in the [Contributing](https://github.com/benjaminoakes/maid/wiki/Contributing) wiki page if you're interested.\n\nThanks again!\n. @gsiener Thanks for pointing that out.  I missed it when skimming before.\n\nI might be interested in donating.  They run a great service!\n. Nice!  Thanks for doing that.\n\nThe logger situation is getting a little weird.  This is the 2nd comment in that `before` block, which isn't a good sign... We'll have to fix that later.  :smile:\n. Post-merge, I can confirm that this fixed the build:  http://travis-ci.org/#!/benjaminoakes/maid/builds/2513121\n. That might make sense.  Right now, I'm thinking `Maid.new` should take a `Logger` as an argument, rather than the `log_device`.  That way, you can test with a \"null logger\", etc.\n. This looks great.  Per usual, I'll take a closer look this evening...\n\nI'd like to deprecate `last_accessed` too, if possible.  (I can maybe take care of that later -- we need a deprecation solution for `git_piston` too.)  I'm adding a comment...\n. @larrylv It's great, right?  But yet another reason it's important to say \"I'm working on this one\".  :smile:  A good problem to have, for sure.\n. Hey @larrylv read my mind too... :smile:\n. I think setting the `deprecated` gem to `warn` would get us what we want.\n\nI won't have a chance to do that until tonight at the earliest, however.  Feel free to play with it if you'd like.  (Just let me know if you do.  :smile: )\n\nBasically:\n- Add `deprecated` as a dependency in `maid.gemspec`\n\n``` ruby\n# Pseudo-code; just a guess based on their README\n\n# lib/maid.rb (maybe?)\nDeprecated.set_action(:warn)\n\n# lib/maid/tools.rb\nalias :last_accessed :accessed_at\ndeprecated :last_accessed, :accessed_at\n```\n. I'm taking a stab at the `deprecated` change.  Either way, this should get merged soon.\n. Sounds good.  I'm thinking just passing a logger might get us what we need:\n\n``` ruby\n# Example\nMaid.new(:logger => Logger.new)\n```\n. Thanks!  I'll take a look...\n\nI'd like to get at least the Ubuntu trash bugfix (#6) as a part of the next release too.  I was hoping to release **bugfixes** next, but there have been so many PRs for **simple-tools**, it's gotten done first.\n. It might be a couple days until this gets merged; I have a busy weekend planned. :smile:\n\nNo worries, though -- it will get merged soon.\n. No worries about the omission. That's why we have pull requests/code review, after all.  :smile:\n. Merging now; it's almost certainly right.  :)  We can try it out more during the beta test.\n. This looks great in concept; I'll be merging it soon.\n\nAlso adding a comment in the diff...\n. Merged.  Thanks again!\n. Interesting... but it still functions correctly, right?\n. Got it... this is necessary to be able to say:\n\n```\nLogging actions to \"/home/vagrant/.maid/maid.log\"\n```\n\nThat might deserve another set of changes, but in the meantime this is getting merged.\n. Yup, I only found that out after looking through the backtrace that `maid clean` gave.\n\nThe specific failure I got was from when `log_device` is called here https://github.com/benjaminoakes/maid/blob/simple-tools/lib/maid/app.rb#L21\n\nThanks again for reporting this!  I'm still trying to find time to fix that Ubuntu bug (#6), but I think I might make an alpha release so we can find out if there are any other bugs like this one.\n. Not sure yet.  :smile:  I think it's an interesting idea, but I'm not sure of the implementation yet, so I've tagged it as \"incubate\".\n\nIt might be easiest to use gems.  Or just files under ~/.maid/ with some sort of naming convention.  Still thinking about it.\n. It looks like @JohnColvin may be working on something similar.  (Thanks for forking and starting to commit!)\n\nI'm interested in the same idea, but rather than using Spotlight metadata, I was thinking it would be preferable to use something like a mimetype library so that it would also work on Linux.\n\nThoughts?\n. We were writing at the same time... interesting.  :smile:\n. I haven't done a ton of research yet... but I was thinking that using [the mime-types gem](https://rubygems.org/gems/mime-types) (or some variation on that) would be an idea.\n\nThanks again for your help!  It's very appreciated by both me and the user community.\n\nBen\n. I could certainly see including both solutions.  People have requested having more Spotlight attributes (e.g., #12) before, and I can definitely understand the usefulness of that.  (Note: [`ruby-spotlight`](https://github.com/youpy/ruby-spotlight) might be a big help, but may not be necessary right now.)\n\nHowever, if  we generalize that Spotlight feature, it might be a big win.  For example, instead of only adding `content_types()`, we could do something like:\n\n``` ruby\n# Get the kMDItemContentType for the path, converting to camel case like I do in Vertigo:\n#\n#     # something like this:\n#     name.to_s.gsub(/_([a-z])/) { $1.upcase }\n#\n# https://github.com/benjaminoakes/vertigo/blob/develop/lib/vertigo/client.rb#L78\nspotlight_attribute(path, :item_content_type)\n\n# It's general, so you could get other attributes like kMDItemAuthors:\nspotlight_attribute(path, :item_authors)\n```\n\nRegarding mime types, I'd like to avoid shelling out to use more system commands (e.g. `file`).  If we can use `MIME::Types.type_for('citydesk.xml')` to the same effect with a well tested `Ruby` library, that has less room for error in my experience.  But like I said, I don't know a lot of what the `mime-types` gem has in its API.\n\nThanks again for your help on this!  I was honestly thinking mime types were the way to go before this conversation, but I can certainly see how the Spotlight metadata would be useful now.\n\nHappy holidays,\n\nBen\n. Looks really nice!  I'll be happy to change over to using the gem; it doesn't look like that'll be hard at all.\n\nWould you be willing to add specs for the output of these new methods?  (Testing in a VM is recommended.  See [contributing](https://github.com/benjaminoakes/maid/wiki/Contributing).)  I'll be using those specs when changing over to the gem.  If not, I'll be able to put some specs together.\n\nThanks again and happy holidays!\n\nBen\n. That's perfectly fine.  This won't be officially released until v0.3.0, but specs will be needed before that release.  :smile:\n\nCurrent [milestones](https://github.com/benjaminoakes/maid/issues/milestones):\n- v0.2.0: Released on Christmas (hopefully).  It's been in beta testing for a while, and seems ready.  (Help testing is appreciated.)\n- v0.2.1: Released as soon as we finish fixing some pre-existing bugs.\n- v0.3.0: No set date yet.  Includes new backwards compatible features, like what you've implemented.\n\n(I'm versioning by [SemVer](http://semver.org/) standards, at least for now).\n. Work is happening on the `feature/types` branch.\n. Hi guys,\n\n@phoolish and @macfidelity mentioned they'd be interested in helping beta test.  I appreciate any and all contributions you can make in doing this!\n\nAlso, @larrylv and @phoolish have contributed code.  If you can help by testing that your changes still work as intended in `v0.1.3.beta.1`, that would be very appreciated as well.\n\nThanks for your help!\n\nBen\n. Hi @macfidelity,\n\nThanks for helping out!  General impressions are a great thing to report here, but if we identify a bug, we should make a new issue for that.\n\nRegarding http://rubydoc.info/gems/maid/Maid/Tools, it will be updated automatically when Maid 0.1.3 is released; this prerelease doesn't update the documentation.  Thanks for reporting it; I should have noted that would be the case.\n\nThanks for the wiki page too.  It's a great supplement to the \"sample\" that Maid comes with, and is a great option so people can share ways they use Maid.  I'll be adding to that page myself sometime soon.  :smile:\n\nBen\n. @phoolish Thank you, it's very appreciated.  The next release won't come until `xdg` v2.2.3 is out (includes bugfix) and we can test using it.  That should be soon, but will probably be a few days.\n. Thanks @larrylv :smile: \n. @phoolish No problem!  As always, any help you can provide is very appreciated.\n\nI haven't heard any bad feedback from beta testers as of yet, and I've been using the beta every day.  I'm about ready to stop waiting on a bugfix for XDG, so I might just release my own version of the gem to rubygems.org (e.g., `xdg-maid`) so we can get Maid v0.1.3 released.\n\nAt any rate, any feedback you can give is appreciated.  There will still be one more beta release before this is called \"stable\".\n. Hi all,\n\nI got tired of waiting for a new release of `XDG` with the Linux bugfix, so I released a custom build (called `maid-xdg`) which includes the bugfix.  It's unfortunate that we had to go through that, but it means we can release the next version of Maid (finally).  :smile:\n\nMaid v0.1.3.beta.2 has just been released to RubyGems. Along with the dependency on the fixed version of `xdg`, Beta 2 has a tiny fix for a bug in `trash()` that I discovered.\n\nI'm planning to release Maid v0.1.3 (final) after giving a few days so others can try it out.  However, I've only heard positive feedback thus far (and several users are using Beta 1 every day), so I plan on releasing it pretty soon.  :)\n\nBest wishes,\n\nBen\n. I've released v0.1.3.  You can update using:\n\n```\nsudo gem update maid\n```\n. This is part of the beta test effort (#52).\n. After a month of waiting, I released a custom build of `xdg` called [`maid-xdg`](https://rubygems.org/gems/maid-xdg) that includes the bugfix.\n. Work on this feature is happening on the `feature/import_music` branch.  I'm not actively working on it yet (bugfixes are taking priority), but any help implementing is appreciated!\n. I like that idea.\n. **[acceptance]** Saw correct license at https://rubygems.org/gems/maid/versions/0.1.4.alpha.2\n\n> Licenses\n> \n> GPLv2\n. Thanks for your note, Brad.  That's a good observation.\n\nRight now, I don't really find myself using `locate` in my rules, so I'm holding off on making it work on Ubuntu.  (When I do have time to work on Maid, I'm prioritizing bugfixes, and a release with contributions people have made.)\n\nI like the `find` solution because of what you mentioned, but it would seem like the existing `find` method would be very similar.  Because of that, Maid's `locate` might still end up using the system `locate`, but maybe with a disclaimer in the documentation, or a printed warning.\n\nThat's my current thought process at least.  :smile:  Thanks again for writing, and for using Maid of course.\n\nBen\n. That sounds reasonable.  If you run into trouble, let me know!\n. Agreed.  This is definitely something to fix for a future version.  (Any help is appreciated, of course.)\n. I'm working on this.  It will either be a part of v0.2.0 or a bugfix release (e.g. v0.2.1).\n\nIf someone wants to drop in and help, just leave a comment.  I won't have a chance until at least this weekend.\n. Some implementation has started on branch `feature/shellwords`.  I think it's actually done now, but I want to refactor and do more testing before it gets released.\n. I came back to the refactoring I started, and came to the conclusion that it's not going to be any help at all.  (It actually made things more complicated.)  I'm releasing a version with the simple change I made earlier.  `feature/shellwords` is being replaced with `feature/escape`.\n. @loddy1234 just fixed the last bug that I'm aware of, so another beta release will be happening soon. I'll be updating this issue when that happens.\n. @gsiener @ge @jprice\n\nMentioning you guys here since you said you were interested in beta testing.  This is the issue where the v0.2.0 effort is coordinated.\n. I've released the next beta (v0.2.0.beta.2).  Please see the changes in [the ChangeLog](https://github.com/benjaminoakes/maid/blob/master/ChangeLog).\n\nYou can update to the latest pre-release using:\n\n```\ngem install maid --pre \n```\n. I've release the first Release Candidate (v0.2.0.rc.1).  I'd like to release it as stable v0.2.0 this weekend so we can focus on new features.  :smile:\n\nIf you have a chance to test it out, please do.  I've been using the v0.2.0 releases for a few weeks now without any problems, but I appreciate second opinions.  Maid's handling people's files after all, so having a good release and testing process is important.\n. Unless I hear something tonight, this is being released as \"stable\" tomorrow.  Happy holidays everyone!\n. That's an interesting point:  `sync` might fit many people's needs.  However, if the underlying `rsync` binary doesn't exist, it wouldn't work.  In contrast, `copy` would be implemented in terms of `FileUtils.cp`.\n. :smile: Thanks, Nico. \n. @nicosuave still have your code?  If there was a PR for this, I must have missed it.\n. Got a request for this [on Twitter](https://twitter.com/SiegelJosh/status/514264080144928768), assigning to v0.6.0, since this is pretty easy.\n. Hi @SteenJobs, I'm not sure what you mean by \"if you create a pull\"\n. Hi @choupachupss,\n\nThanks for writing in!  `find` does need some better documentation.  Better documentation is a goal for Maid v0.2.0 (hopefully released this coming weekend), so I'll be keeping this in mind.  You can check out the new docs here:  https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L196.  Additionally, you're very welcome to contribute tips and tricks to [the wiki](https://github.com/benjaminoakes/maid/wiki).\n\nHowever, `find` is kind of odd in that it's been less useful to me than I would have originally thought... and it tends to confuse things.  In fact, it's actually not necessary in the rule you brought up.  I would write it slightly differently, since `dir` just gives back an `Array`:\n\n``` ruby\nrule 'facebookPhoto' do\n  paths = dir('~/Downloads/*.jpg').select { |p| p.match(/[a-zA-Z]*/) }\n  move(paths, '~/Images/')\nend\n```\n\nBut that's a pretty common pattern, so Ruby actually gives you `Array#grep` to make it simpler:\n\n``` ruby\nrule 'facebookPhoto' do\n  move(dir('~/Downloads/*.jpg').grep(/[a-zA-Z]*/), '~/Images/')\nend\n```\n\n(Note: if I'm interpreting the intention of your rule correctly, that regexp may need a little tweaking.)\n\nI hope that helps!  Thanks again for using Maid.\n\nBen\n. It might be your version of RubyGems.  What does `gem --version` say?\n. I've reproduced this on a friend's machine running 10.7.4.  This is from a bug in v0.1.3 which has already been fixed in v0.2.0 (now in beta).\n. Yep, it's [available right now](https://rubygems.org/gems/maid).  Please find details about installing at https://github.com/benjaminoakes/maid/issues/71.\n. Thanks!  This is very appreciated.  There are other low difficulty issues too, if you'd ever like to help out.  :smile:\n. Thanks for the catch.  That also seems to be a bug in `activesupport` as well:  https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/numeric/time.rb\n\nActiveSupport isn't being used directly right now because it overwrites the interface to Ruby's `Logger`.  If a workaround is available, it might be a better choice to use ActiveSupport as a dependency.\n. Makes sense; that could be a problem because the calculations are in seconds.  :smile:\n\nRegardless, preferred way of fixing this is still probably to let the ActiveSupport guys sweat the details, and let Maid focus on its core functionality.  I'd love to use their methods for size calculations also (which will require breaking some interfaces in Maid, unfortunately).\n. Thanks!\n. Nice, that makes a lot of sense to have.  :smile:\n\nThanks for the contribution!\n. Thanks!  I'll be merging this soon.\n\nWould you feel comfortable adding a spec showing that `dir( '~/{Documents,Desktop}/*.sh')` works as intended?  I'd just like to make sure it always works before documenting it.\n\nThanks again for your contribution,\n\nBen\n. Fair enough.  Should you change your mind, the offer stands.  :smile:\n. Thanks for the pull request!  This is very related to #55.  What you note about `.localized` will be included when that feature is added.\n\nAlso, the behavior you describe with `move` doesn't seem like it should be happening since there's [a check to see if the file exists](https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L37).  I've made a separate issue (#87) to see if we can reproduce that, and if we can, a bugfix release will be coming out shortly.\n. I've merged this into the newly created `feature/import_music` branch.  Depending on what happens with #87, these comments might get included in the next release regardless of #55.\n. Update: I think I've narrowed down the circumstance that causes this to happen.  I have a test Maid script and I'm working on creating a spec that describes the problem.  The fix is simple, but getting the spec right is harder.\n. (We've been putting some discussion in #51, too.  Future discussion can go in #89  -- this issue -- if you'd like.)\n. For the time being, this is merged into branch `feature/types`.\n. This was recently merged (with a rebase, so it wasn't automatically closed).\n\nThanks again for doing this; just took a while to find some time to work on the specs and native mimetypes.\n. Thanks!  :smile:  I honestly don't know if there will be anything to fix, but it's always worth a check.\n\nAlso, as a reminder both 1.8.7 and 1.9.3 are officially supported Ruby versions.\n. Hrm... you could maybe run the specs with `ruby -w`.  Otherwise, [here](https://github.com/benjaminoakes/maid/blob/master/bin/maid#L1).\n\nThanks again for your help!\n. It sounds like [the `find` method](http://rubydoc.info/gems/maid/Maid/Tools#find-instance_method) will do what you want.  Perhaps something like this?\n\n``` ruby\nmove(find('~/Music/').grep(/\\.m4a$/), other_location)\n```\n. If this helps you, it might make sense for us [to add an example like this in the docs](https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L201) so others can benefit.\n. Good point.  We should probably document that in [`dir`](https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L168).\n. Added:  https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L168\n\nI'm closing this issue as well, as it seems to be resolved.\n. This is great, thanks!  Very good docs, implementation, and specs.\n. Looks like this has a problem on Ruby 1.8.7:  https://travis-ci.org/benjaminoakes/maid/jobs/4132895\n\nJust syntax, I would guess.\n. Great, thank you.  I'll be happy to release any bugfixes along with the others in the next release.\n. Thanks!\n\nWe're in the process of changing from `inspect` to Shellwords, but I'll take care of that change -- there are still some questions about how it will be done.\n. It looks like these changes broke a spec:\n\nhttps://travis-ci.org/benjaminoakes/maid/builds/4270742\n\nWould you have a chance to fix this?\n. Sounds good, thanks for doing this!\n. I've been using this version without issue; planning to release a stable version shortly.\n. Released as v0.2.2\n\nhttps://rubygems.org/gems/maid/versions/0.2.2\n. I like the approach, thanks for doing that.  I've been thinking something similar.\n\nThis isn't quite ready to merge into master yet -- there's one more bugfix to release first.  I'll definitely include it in the alpha of v0.3.0 though.  I'm hoping to find some time to release that soon.\n\nAlso, what's your full name?  I'd like to include it under \"authors\".\n\nThanks again!\n\nBen\n. Hi Mu Ye,\n\nThanks for this.  It's close, but I don't think this is actually going to test the way you might expect... I think it needs to use one of [the \"capture\" helpers I wrote](https://github.com/benjaminoakes/maid/blob/master/spec/lib/maid/app_spec.rb#L6).  Basically, the spec should fail if [the `say` lines in `version`](https://github.com/benjaminoakes/maid/blob/master/lib/maid/app.rb#L35) are removed.\n\nIf you're interested, I've labelled some other [\"low difficulty\" issues](https://github.com/benjaminoakes/maid/issues?labels=difficulty-1&milestone=&page=1&state=open).\n\nThanks again for your work on this!  It's very appreciated.\n\nBen\n. That would also probably catch it... regardless, it would be nice to know that `--version` actually prints the version.  :smile:\n\nIf your spec catches the missing `map`, that's great -- I'll be happy to merge.  My apologies if I led you astray; I haven't touched that code in a while.\n\nBen\n. My mistake.  I had a chance to test this locally, and it does catch the problem.  Thanks!\n. Hi Mu,\n\nThis is great!  Thanks for spending time on this.  I'll try to find some time this weekend to try this out and get it merged.  (For what it's worth, I like feature branches -- I saw you had made one in #98.)\n\nRegarding your question, I believe the answer is that we always `follow_rules`, but the rules will respect the `noop` option if `--noop` is specified.  That allows us to see what a dry run would accomplish.\n\nI've only taken a quick glance through the code so far.  One thing that occurs to me is that we should add another alias called `-f` for people who are familiar with `git clean` (which takes `-n` or `-f`).  That might be a reason to prefer `--force` over `--execute`, but allowing `--execute`, `-e`, and `-f` could make sense too.  I might tinker with that idea if you don't have a chance to. \n\nThanks again!\n\nBen\n. Merged, with a couple tweaks.\n\nThanks again for your help!  You've been making excellent contributions so far.\n. Thanks for your work on this!  I saw your fork and was wondering if I'd see a pull request.  :smile:\n\nI'll be trying this out and merging it hopefully in the next few days.\n\nThanks again,\n\nBen\n. Merged!  I ended up simplifying the spec a little.  See 4eeb1069f405cbcac1bafd333729b2e25283ac1b if you're interested.\n\nThanks for your work on this; it's nice to have a working solution.  You're now listed in the ChangeLog and AUTHORS files. :smile:\n\nBen\n. No problem.  Contributions are always welcome.  :smile:\n. I've been using v0.3.0.beta.1 for over a week.  Besides the expected changes to `rename`, I haven't run into any issues, so this is getting released.\n\nEnjoy!  :smile:\n. Rendered, read through.  Looks fine.  :)\n. My first guess would be an environment problem.  Maid, RubyGems, or Ruby might not be available to the cronjob.\n\nDoes `~/.maid/maid.log` get updated?  If so, could you please share any error messages?\n\nAnother thing to try would be logging any cronjob output to a file like so:\n\n```\n*/1 * * * * /bin/bash -li -c \"maid clean --silent &>maid_cronjob.log\"\n```\n\nThat should make a file in your home directory called `maid_cronjob.log`, possibly with an error message.\n\nHopefully this helps shed some light on the issue!\n. Glad to hear you got it working.  :smile:\n\nWhile your solution works, `bash -li -c` should have handled that issue.  Your `PATH` might not be set up in the way it should be.  Sometimes that's because `~/.bashrc` and `~/.bash_profile` are slightly misconfigured.  Of course, if you are using something other than `bash`, it might not be configured at all.  :smile:\n\nIt's hard to debug things like that remotely, but could be worth looking into your configuration if you'd like to.  Otherwise, you should be set.\n\nI use Ubuntu as well, so if you run into any other issues, please let me know!\n. Great.  I just took a minute to look through my config, and I have this in my `~/.bashrc`:\n\n``` bash\nsource \"$HOME/.bash_profile\"\n```\n\nIf you'd like to see more about how I have things set up, I have [my dotfiles](https://github.com/benjaminoakes/dotfiles) as a public repo on GitHub.\n\nHappy we got Maid working for you.  :smile:\n\nBest wishes,\n\nBen\n. Thanks!\n. Yep, that will be a part of Maid v0.4.0.\n\nI've released some [alpha builds](http://rubygems.org/gems/maid/versions/0.4.0.alpha.2) (which are probably closer to beta quality), if you'd like to start playing with that functionality.  I'd like to do some more testing to make sure everything works as expected, has a nice syntax, etc.  Unfortunately, we're in the middle of moving to a new place, so my time is limited right now.\n\nBeta testing is always **very** appreciated, so if you have comments on how this feature works, please share!  The method you want is probably `where_content_type()`.  There are [some examples in the documentation](https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L563).\n. Still some dependencies to update, but this is done.\n. Still an issue on fakefs 0.5.3\n. Hi @jurriaan,\n\nThanks for your enthusiasm!  I think a daemon makes sense.  I don't have time at the moment to review your solution, but I'll take a look soon.\n\nBest wishes,\n\nBen\n. @MoritzFago I think acting on the rules when a file system event happens makes sense.\n\nI haven't yet had the time to sit down and understand this changeset -- but if you feel like the behavior isn't very user friendly, I'd be interested in seeing your suggestions.\n\nAlso, @jurriaan, if you could modify the README with a tutorial on how to use the notification support, that would help me immensely.  (Sorry if it's there and I'm just missing it.)\n. Indeed it was.  Unless I'm missing something, it looks like this issue can be closed.\n. Thanks, seems like a reasonable change.  :smile:\n. This seems interesting.  I'm wondering if there's an issue with how `move` works; I'd have to review the specs and code.\n\nAt any rate, does `rename` not behave the way you expect?  It seems like there's some overlap with the idea you present.\n\nThanks for using Maid,\n\nBen\n. Gotcha, I see what you're going for now.  I like the idea.  I'd take a pull request, but maybe with a slightly more descriptive name like `automatic_rename`, `numbered_rename`, etc.\n\nThere's some other \"automatic naming\" features that I'd like to implement someday (e.g. looking inside a file for a date and then naming that file based on the date that was found, which would be really helpful for bank receipts).  I have some basic code for that now, but not anything worth sharing.\n\nThanks for the kind words.  Glad it helps you, and that it works on Arch.\n\nRegarding inotify, I agree.  That's being worked on too... https://github.com/benjaminoakes/maid/issues/116\n. That's not currently supported, but I'd be interested in having that as a feature.  Pull requests welcome, as I have a lot on my plate at the moment.\n. Interesting, thanks for letting me know.\n. Sweet, thanks!\n. Sounds interesting!  I've been thinking it would be nice to have something to make usage by non-Rubyists a little easier, and this could definitely be a part of it.  Any help in this is definitely appreciated!\n. This is awesome work!  Thank you for your contribution!\n. This is closer to something users would share in the wiki (which I encourage people to do).  Additionally, I answered a relevant question about this on StackOverflow:\n\nhttp://stackoverflow.com/questions/25988567/how-do-i-copy-specific-file-types-with-maid\n. Sounds useful.  Looks like there's [some Ruby interfaces out there, too](https://rubygems.org/gems/findercolor/versions/0.5.0).\n\nI'd be happy to take a pull request for this, but I'm unlikely to implement it myself.\n. @songchenwen That looks really interesting...\n\nI have a few guidelines:\n- Any solution must work on Linux.  By that, I mean `maid` can't fail to install just because of OSX specific code existing to support the OSX-only tagging feature.  To be clear, we **don't** need to have the exact same featureset on Linux.\n- From looking at [jdberry/tag](https://github.com/jdberry/tag/), it seems like a Ruby gem that wraps it could be a very good idea.  I don't know much about taking that approach, but looking at `rb-fsevent` could be a good starting point.\n. @songchenwen I was thinking about this recently... how about we just assume they have `tag` installed?  If they don't, we'll give them a download link.\n\nI'll have some time to do a release on Sunday if you have a chance to make a pull request with the code from your config file.  I'd like to have you receive the recognition you deserve!  (vs. me copying and pasting, in which case it would look like I wrote it)\n. Awesome, thank you!\n\nAdding to `tools.rb` is the only requirement, but specs would be appreciated of course if you have time.  Also, there's a lot of great stuff in your `rules.rb` besides the \"tag\" code.  All of the utility methods you wrote would be welcome.\n\nAs for Linux users, I think we can just report that tagging isn't available since it's an OSX-only feature.  The `Maid::Platform.osx?` command is available to check what platform `maid` is running on.\n\nIn pseudo code:\n\n```\nif Maid::Platform.osx?\n  if has_tag_available?\n    cmd(...)\n  else\n    print \"To use this feature, you need `tag` installed.  Run `brew install tag`\"\n  end\nelse\n  print \"sorry, tagging is unavailable on your platform\"\nend\n```\n. @jurriaan I've merged this, but I think it could be useful to have an example of how to start the daemon on login -- probably for Ubuntu and OSX.  Have any input?\n. Nice.  It feels like we should include a Launch Agent with the project.  In the meantime, I'll add a link to your post in the README.\n. Interesting, must be because of Spotlight changes or something.  I'm not sure how to do what you suggest for OSX 10.10 compatibility, but I'd be interested in a pull request if anyone can figure this out.  (At the time of this writing, I don't have access to a Mac for development with OSX 10.10 -- my primary machine is Ubuntu.)\n. There's a link to [the wiki](https://github.com/benjaminoakes/maid/wiki) in the sample rules file, but I'm interested in any other ideas users might have.\n. I'm okay with that for now.  If something good comes of this, let's try to integrate it in the sample rules.\n. Thanks!\n. I'll be looking at this a little more before merging.  By the way, the plan is to release a new version around Christmas.\n. Good catch, thanks!\n. I'd be interested in seeing a pull request with this if anyone is interested in putting it together.. I'd be for this (pull requests welcome).\n\nBack when I first made the CLI, Thor didn't make its support of this style of help obvious to me (if it did exist). If they've added it since then, it would be very helpful to new users.\n\nMoving away from Thor isn't out of the question, but it does make many things easier.\n. I'd be for this (pull requests welcome), but it needs to play nicely with logging and other non-interactive contexts.\n. While what you say about convention is true, `--force` was chosen for Maid to act more like `git clean`.  Check out this thread on Hacker News for context: https://news.ycombinator.com/item?id=4929243\n\nThat said, what you suggest could be a good compromise if others agree. However, since it changes the meaning of a command, this behavior wouldn't become default until a major version change (e.g. v1.0, per semver conventions).\n\nIf this were added as a new command such as `maid ask` or `maid prompt`, we could try out the idea before making it default.\n. I'd be for this (pull requests welcome).\n. I'd be for this (pull requests welcome). Some people have suggested a menu bar icon as well. \n\nOn Ubuntu, this would probably use libnotify. More info: https://github.com/guard/guard/wiki/System-notifications\n. I'd be for this (pull requests welcome), though I might prefer printing the path so it could be opened by any program.\n. Interesting!  Please make a pull request for this; I think it could be useful to more people.\n. This is great stuff!  Thank you so much for taking the effort to do this.  Merging now...\n. I've released an alpha build based on this pull request.  I'd appreciate any help with testing!\n\nhttps://rubygems.org/gems/maid/versions/0.8.0.alpha.1\n. It looks like you want to use a regexp but are using a string instead.  Try changing `'.*iPhone.*'` to `/.*iPhone.*/`.\n. Also, the `rule` block doesn't take an argument.\n. Could you make this a question on StackOverflow, please?  It'd be more likely to get attention.  I'd recommend using the \"maid\" tag when you post it.\n\n[Here's an example of another Maid user posting to StackOverflow.](http://stackoverflow.com/questions/25988567/how-do-i-copy-specific-file-types-with-maid/25989377)\n. Interesting.  Maybe we should include this by default for `watch` since it seems like sensible default behavior that could be overridden.\n. I think lazy as default is better than killing someone's battery.  Being able to override the behavior is good if someone does end up caring.\n. Thanks!  I'll merge this and try it out before the next release.\n. By the way, thanks for all your hard work on this!  It's _very_ appreciated.\n. Thanks!\n. I'd be for this feature, but I'm unlikely to implement it myself.\n. Interesting.  Thanks for taking a stab at this!\n\nAre you using this yourself?\n\nA few things:\n- Looks like [the build failed](https://travis-ci.org/benjaminoakes/maid/jobs/138082013#L207).  (Note: there's a problem with the test suite on Ruby 2.3 that I've yet to fix that's unrelated to your change.  I'd appreciate it if you want to take a stab at that though!)  That said, what I linked seems to be a real problem.\n- I'd like to see some kind of tests, even if it's just ensuring the files would be installed correctly.\n- The `install_launch_agent` method is pretty long.  Can we break it apart somehow?  (E.g. move the heredocs elsewhere.)\n. No problem!  Kind of the norm for a hobby open source project, sometimes.\n. This could maybe use better messaging... The `watch` command takes a path, not a description. See the README for an example.\n\nI'd happily accept a PR that gives a more obvious warning, assuming that's the root cause. \n\nOn July 12, 2016 8:27:35 AM CDT, \"Micha\u00ebl Fortin\" notifications@github.com wrote:\n\n> Somehow the Maid daemon crashes at startup when I use the move tool in\n> a simple watch rule. Any idea why this occurs and what I could do to\n> work around this?\n> \n> **Conditions:**\n> \n> Ruby 2.3.1 (installed with Homebrew)\n> \n> ``` ruby\n> watch \"Move screenshots\" do\n>    destination = \"~/Pictures/Screen Shots/\"\n>    dir(\"~/Desktop/Screen Shot *\").each do |path|\n>      move(path, destination)\n>    end\n> end\n> ```\n> \n> **Stack trace:**\n> \n> ``` shell\n> ~ maid daemon\n> Logging actions to \"/Users/Michael/.maid/maid.log\"\n> /usr/local/Cellar/ruby/2.3.1/lib/ruby/2.3.0/fileutils.rb:1599:in `dup':\n> can't dup NilClass (TypeError)\n>   from /usr/local/Cellar/ruby/2.3.1/lib/ruby/2.3.0/fileutils.rb:1599:in\n> `fu_check_options'\n>   from /usr/local/Cellar/ruby/2.3.1/lib/ruby/2.3.0/fileutils.rb:514:in\n> `mv'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/tools.rb:45:in\n> `block in move'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/tools.rb:43:in\n> `each'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/tools.rb:43:in\n> `move'\n>   from /Users/Michael/.maid/rules.rb:14:in `block (3 levels) in <top\n> (required)>'\n>   from /Users/Michael/.maid/rules.rb:13:in `each'\n>   from /Users/Michael/.maid/rules.rb:13:in `block (2 levels) in <top\n> (required)>'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/rule_container.rb:8:in\n> `instance_exec'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/rule_container.rb:8:in\n> `initialize_rules'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/watch.rb:12:in\n> `initialize'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:89:in\n> `new'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:89:in\n> `watch'\n>   from /Users/Michael/.maid/rules.rb:11:in `block in <top (required)>'\n>   from /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid.rb:35:in\n> `instance_exec'\n>   from /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid.rb:35:in\n> `rules'\n>   from /Users/Michael/.maid/rules.rb:10:in `<top (required)>'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:82:in\n> `load'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:82:in\n> `block in load_rules'\n>   from /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid.rb:28:in\n> `with_instance'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:78:in\n> `load_rules'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/app.rb:92:in\n> `daemon'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/command.rb:27:in\n> `run'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/invocation.rb:126:in\n> `invoke_command'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor.rb:359:in\n> `dispatch'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/base.rb:440:in\n> `start'\n>   from /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/bin/maid:5:in\n> `<top (required)>'\n>   from /usr/local/bin/maid:23:in `load'\n>   from /usr/local/bin/maid:23:in `<main>'\n> ```\n> \n> ---\n> \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/benjaminoakes/maid/issues/159\n. > Maybe the watch tool could make sure the string is a path, that it exists on the filesystem, and throw with a helpful message otherwise?\n\nYup, that's what I was thinking.  Something like:\n\n``` ruby\nif !File.exist?(expand(path_that_watch_received))\n  raise 'helpful error message'\nend\n```\n. I've personally never done it, but if RubyZip supports it, Maid could too. (Pull requests welcome!)\n\nOn September 24, 2016 3:32:34 PM CDT, Alexandre Vazquez notifications@github.com wrote:\n\n> Is it possible to unzip password protected files? \n> \n> ## \n> \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/benjaminoakes/maid/issues/160\n. @torrottum Thanks from me too! I was going to say the same thing. \n\nOn October 3, 2016 11:12:03 AM EDT, Canor notifications@github.com wrote:\n\n> @torrottum Thanks! Didn't know gems are stored elsewhere. That solved\n> my problem :)\n> \n> ## \n> \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/benjaminoakes/maid/issues/161#issuecomment-251133505\n. Does this happen on macOS prior to 10.12?  (I'm still on 10.11 for a variety of reasons.). Thanks so much for this patch!  I didn't know that adding log rotation was so easy\n\nThis looks like your changes will apply very cleanly, but in thinking towards future releases of Maid, I'm wondering if there should be a spec backing it up so I don't break it by accident.\n\nIt would seem that something like https://github.com/defunkt/fakefs could make this really easy.  Would you be willing to take a stab at this?  If it isn't feasible, please let me know, and I'll be happy to complete the pull request without.\n\nThanks again!\n\nBen\n. I would agree that it's out of scope; whether rotation actually works is part of the contract with the logger library, not something for us to test.\n\nIn general though, this does need some sort of QA so we know it works as intended.  I'll be looking at testing the change as a part of the \"bugfixes\" milestone (next release).\n. I'm working on merging this; again, it's being held up by failing specs.  I think this will be an appreciated change, however.\n. Got some specs written.  I also manually acceptance-tested that `Logger` actually rotates close to how I expected.\n\nThis is now merged into the `bugfixes` branch for inclusion in the next point release.\n. Although I can see why this might be helpful, this pull request is being replaced by having better instructions in the [README](https://github.com/benjaminoakes/maid) and some better packaging (#3).\n. I've started on this, but have run into some problems reconciling gems with Debian packages.  I've written up a question on StackOverflow:  [How do I package a Ruby application for Ubuntu, including its gem dependencies?](http://stackoverflow.com/questions/12233350/how-do-i-package-a-ruby-application-for-ubuntu-including-its-gem-dependencies)\n\nPlease share a link to that question, if you'd like.  :smile:\n. @jrgifford It's at a standstill for now.  The benefits to having an Ubuntu package are pretty minimal at the moment, especially if it's just scripting installing the `ruby1.9.1` dependency and then running `gem install maid`.  I do like that a PPA would make software updates easier to distribute, though.\n\nRight now, I'm spending the time I have to work on Maid fixing bugs and implementing new features.  I may come back to the Ubuntu package, especially if enough users would find it useful.  In the immediate-term, I can package up a \"gem installer `deb`\" and put it under the GitHub downloads -- I've gotten that working before.\n\nI see you responded to [my question on StackOverflow](http://stackoverflow.com/questions/12233350/how-do-i-package-a-ruby-application-for-ubuntu-including-its-gem-dependencies) and have a related GitHub repo.  Any help is appreciated, as always.  There's a good chance you know more about this topic than I do.  :smile:\n. @Linux-cpp-lisp Your answer is definitely helpful.  Thanks for your help!\n\nFor what it's worth, Maid does officially support Ubuntu as of v0.1.3.  I use it on my personal Ubuntu laptop.  This issue is just about providing a package for Ruby newbies. :smile:\n. @Linux-cpp-lisp Glad you like it.  :smile:\n\nUbuntu-derived distributions like Mint _should_ work, but I only really have the resources to support Ubuntu proper.  Community support of other distros is welcome.  If you'd like, you can document your experiences [in the wiki](https://github.com/benjaminoakes/maid/wiki/Linux-compatibility).\n\nI can understand what you say about `apt-get` and definitely want oblige at some point.  I got a little burned out on Ubuntu packaging earlier.  Right now, I'm more likely to implement [other new features](https://github.com/benjaminoakes/maid/issues).  :smile:\n\nIf you want to experiment with making a package that can be accepted into a PPA, that would be very helpful!  Please let me know if you'd like to coordinate.  (I still have [a PPA](https://launchpad.net/~benjaminoakes/+archive/maid) -- it just doesn't have any packages yet.)\n. I agree with both points:\n- Auto updating would be nice.  It's too hard to know when new versions of Maid are available right now.  (If there's a pure Ruby solution, that might be good too.)\n- A package might not be the most useful for RVM users, etc... but for someone who is new to Ruby, it's a much easier way to get started.\n\nHowever, neither are critical right now.  Like I've said before, my current focus is on new features and bugfixes.  Contributions are always appreciated, though.  :smile:\n. Thanks for sharing, @wjbuys.  I remember trying fpm, but it wasn't doing quite what I was hoping for.\n\nLike `heroku`, `vagrant` seems to be embedding Ruby, gems, and other dependencies in the package, and ignoring the system `ruby`.  It's less pure than I would like, but that might be the way to go...\n. Related:\n- https://packagecloud.io/ \n- https://bintray.com/\n. Hi @macfidelity,\n\nThanks for posting this issue; I'm happy you find Maid interesting.  The issue you mentioned is something I'd definitely like to improve, as I'm gradually switching from using Mac OS X to using Ubuntu.\n\nThe methods that are specific to OS X are listed [in the documentation](http://rubydoc.info/gems/maid/0.1.0/Maid/Tools).  They are tagged with \"Mac OS X\".  For the time being, it would be best to avoid them.\n\nThere's [some code to detect whether the host OS supports a given command](https://github.com/benjaminoakes/maid/blob/master/lib/maid/maid.rb#L92), but clearly it's less than foolproof.  As a longer term strategy, I'd like to have feature parity between OS X and Ubuntu (if possible).\n\nI'm open to alternatives, as well of course.  :smile:\n\nBest wishes,\n\nBen\n. I like that idea.  I might do a point release with just that.\n. I've released Maid v0.1.1 with the suggestion you mentioned, plus other various minor changes.\n. :)\n. I think this has been completed on https://github.com/benjaminoakes/maid/tree/update-deps but it may need more testing.  I'll be merging it soon.\n. I've updated and tested this.  It's now part of the simple-tools branch.\n. Thanks for your contribution, @macfidelity.\n\nThat's true, but I'm wondering if we should look at how `trash-put` works (see the `trash-cli` package and code https://github.com/andreafrancia/trash-cli).\n\nIf moving to the dir you mentioned works the same as `trash-put`, then we're good, I think.\n. Since Maid essentially does a `mv` call, I'm interested in how well that actually works...\n\nThis is basically what Maid will do after the bugfix:\n\n``` bash\nmv foo.txt \"$HOME/.local/share/Trash\"\n```\n\nI'd want to know if:\n- ...you can see the file in Nautilus' Trash\n- ...you can restore the file in Nautilus' Trash\n- ...you can see the file in `trash-list`\n- ...you can restore the file via `restore-trash`\n- ...things always work in the way you'd expect?  (E.g., does it act differently with folders?)\n- ...duplicate names are handled differently.  (E.g., do the commands above again... do you have two `foo.txt` or just one?)\n\nIf you'd like to check that out, that'd would be very helpful!  Otherwise, I'll come back to it sometime... maybe even next week.\n\n**Sidebar:** Since we're trashing things to `~/.Trash` on Ubuntu, there will probably be a migration step where they all get moved to the right place when `v0.1.3` (\"trash-bugfixes\" milestone) comes out.  That would probably be easy to do, but I'm not sure of all the implications yet.  It would be something like this:\n\n``` bash\nmv ~/.Trash/* \"$HOME/.local/share/Trash\"\nrmdir ~/.Trash\n```\n. @macfidelity Thank you for looking at that!  It's a great help.\n\nI'm a little uncomfortable writing something to modify `.trashinfo`.  That seems to go farther into OS details than Maid probably should.\n\nWhat might get implemented is:\n- If you have `trash-put` available, delegate to it.\n- If not, move to `$XDG_DATA_HOME/Trash/files` (see [Why Is There No More `~/.Trash`?](http://www.faqoverflow.com/askubuntu/13779.html)).  The user will have access to the file, but no \"restore\" functionality.\n\nThe former case could be made easier with an Ubuntu package (#3) -- it could just install `trash-cli` as a dependency.\n\nI'm still thinking about it, but the above steps would be easier to write than anything else I'm thinking of... \n\n**Bare minimum,** we'll at least move to `$XDG_DATA_HOME/Trash/files` to get the bug fixed.\n. I tried some ideas out last night.  It turns out you can't depend on XDG_DATA_HOME or the trash directory to exist, at least on the VM I tried.  The trash directory works on my normal desktop though...\n\nAt any rate, I think it will work like this:\n\n``` ruby\n# Pseudo-code\nif Platform.osx?\n  '~/.Trash'\nelsif Platform.ubuntu?  # or linux? -- we only support Ubuntu right now\n  XDG_DATA_HOME ? XDG_DATA_HOME + trash_dir : HOME + default data home + trash_dir\nelse\n  fail #?\nend\n```\n\nThen we need the migration step, which would use the platform checks as well...\n. I spent quite a bit of time researching how to fix this and migrate the files.  The results are in https://github.com/benjaminoakes/maid/tree/incorrect-trash which should get merged soon.\n\nI'm using the XDG standard, along with its implementation in Ruby.  However, there's a minor bug that causes this to spit out a warning:\n\n```\n /var/lib/gems/1.9.1/gems/xdg-2.2.2/lib/xdg/base_dir.rb:9: Use RbConfig instead of obsolete and deprecated Config.\n```\n\nIt has already been fixed in a pull request.  https://github.com/rubyworks/xdg/pull/3\n\nIf anyone wants to +1 that issue, that might be helpful in getting the changes merged.  Otherwise, I might implement a workaround, etc.\n. I've tested this, and it works as a I expect.  I've merged it into `simple-tools`, but the known issue about the warning (fixed in rubyworks/xdg#3) remains.\n\nRegardless, this is going to be included in the beta.  The non-beta version will have a workaround or a fixed `xdg` gem.\n. That would be useful for Ruby newbies; I'll add it.\n\nHowever, I'm hoping to have a PPA at some point (possibly part of #3) so at least Ubuntu users are notified of updates, etc.\n. Hey guys,\n\nSorry about that; this confusion came up because I decided to change the default command from `clean` to `help`.\n\nWhy?  It's better to be safe than sorry:  I found that I was running rules accidentally far too many times.  I really didn't want that to affect someone that didn't know the default behavior (and was just trying to see if `maid` was still installed, etc).  I considered that a bug that needed to be fixed, especially as running the sample rules could have unintended consequences.\n\nBack to this issue:  any time that you used `maid` to start cleaning before, you'll need to do `maid clean` now.  It's a change, but I think a change for the better, given the above problem.  However, I hadn't run through the examples in the README; I just updated them.\n\n(In retrospect, Maid 0.1.2 might have been better named 0.2.0 according to [semantic versioning](http://semver.org/).  I'm going to try to adhere to that more closely in the future.)\n\nGiven the amount of people that have recently started using Maid, I'd like to start making beta releases before making stable releases.  Please see issue #10 for more info.\n\nThanks again for using Maid!  It's great to see that so many people are interested in it.\n\nBen\n. Closing, as I think the question has been answered.  Please feel free to reopen if needed.\n. I like this idea a lot, but I'm not sure about its implementation just yet.  The last time I tried to create `man` pages in a Ruby project, it was more complex than I originally thought...\n\nRelated to #3.\n. That's definitely on my list of things to try, thanks!  The last time I tried this was a couple years ago, so I hope it's a better situation now.\n. Great.  :smile:\n. @macfidelity I'd love to do something like that.  Like I said, since I'm using Ubuntu more and more, I'd really like Maid to be a first class citizen, if possible.\n\nThanks for sharing your idea!  I think it could work well with the RubyGems approach too...\n. Great.  I think the roadmap will be:\n1. `bugfixes` (maybe combined with `update-deps`), probably to be called v0.1.3\n2. `simple-tools`, probably called v0.1.4, unless there are interface changes, then v0.2.0\n\nThe timeframe is roughly \"when they're done\".  :smile:\n. First beta test: #52\n. @gsiener Thanks!  You can check out v0.2.0 at https://github.com/benjaminoakes/maid/issues/71\n. Great!  You're volunteering at a great time as beta testing of v0.2.0 is underway.  Please see #71 for more details.\n. New beta: v0.2.2.beta.1 (mostly bugfixes).\n\nSee #95 for details.\n. @nicoritschel Are you interested in the betas as well?\n. New beta: v0.3.0.beta.1.  See #101 for details.\n\nOn a related note, work is progressing what's currently being called [v0.4.0](https://github.com/benjaminoakes/maid/issues?milestone=6&state=open).  Thanks to everyone who's made pull requests!  I'm hoping another beta will be right around the corner.  :smile:\n. After much adieu, a new beta is out: [v0.4.0.beta.1](http://rubygems.org/gems/maid/versions/0.4.0.beta.1)\n\nThanks everyone for your help on this!  Now that we're settling into our new house, I'm hoping to have more time to devote to open source.\n. Maid [v0.6.0.beta.2](http://rubygems.org/gems/maid/versions/0.6.0.beta.2) is out!  Lots of exciting changes, such as new daemon support.\n. They're actually all the same.  I'll update the README to make that clearer.\n\nFrom `help`:\n\n```\n$ maid help clean\nUsage:\n  maid clean\n\nOptions:\n  -r, [--rules=RULES]      \n  -n, --dry-run, [--noop]  \n  -s, [--silent]           \n\nClean based on rules\n```\n. I think it would make sense to abstract this.  Perhaps a method like:\n\n``` ruby\ndef spotlight_attribute(attr_name)\n  # ...\nend\n```\n\nThe other Spotlight-related methods could make it easier to use, but if you needed to refer to an uncommon Spotlight attribute, it would still be possible by having this method.\n\nHaving this method would make it possible to refer to uncommon Spotlight attributes.  The other Spotlight-related methods would still be good to make it a little easier (but could still call `spotlight_attribute` internally).\n\nThe above may not be possible, but something along those lines.\n\nHow does that idea sound?\n. Yep, that would need more consideration.  I would think that there might be a Ruby Spotlight library out there too...\n\n**Update:**  Maybe [ruby-spotlight](https://github.com/youpy/ruby-spotlight)\n. There's some partial implementation in #89.  It might be changed over to using `ruby-spotlight` and generalized so users can query any Spotlight attribute that they'd like.\n. Hi @MacDude,\n\nI like that idea.\n\nI think there's actually a simpler way to implement it that would work on Ubuntu as well.  (It would seem to be the same concept as `File.mtime`).\n\nBen\n. Dropped in favor of `mkdir` (#10) and `trash` (existing).\n. https://gist.github.com/4321983\n. @gsiener I've [done that in my rules](https://github.com/benjaminoakes/maid-example/blob/master/rules.rb#L82), but there can be false positives.  Having a method that can confirm that the two files have the same content would be helpful, like in the code that @bobthecow [implemented](https://gist.github.com/4321983).\n. @bobthecow Thanks for the offer of making a pull request!  That would be great.  :smile:\n\nI really like how `dupes_in` and `trash all_but_the_oldest dupes` reads... but I've been wondering if there's another way to express this filtering logic in a more reusable way.  I don't have a fully formed idea about that yet, however.\n\nRather than having additional purpose-built methods for this, could we take advantage of what `Array` and `Enumerable` give us?\n\nSome pseudo-code variations on that idea:\n\n``` ruby\ntrash dir('*.png').select(&file?) # Or `trash dir('*.png').select(&files)`\ntrash dir('*.png').select(&directory?)\ntrash dir('*.png').reject(&oldest) # Same as all_but_the_oldest\ntrash dir('*.png').reject(&newest) # Same as all_but_the_newest\ntrash dir('*.png').map(&modified_at).max\ntrash dir('*.png').grep(/foo/).reject(&shortest_name)\n\ntrash dupes.reject(&oldest)\ntrash dupes.reject(&shortest_name)\n```\n\nInclude `all_but_the_oldest` and friends would definitely **not** hold up any pull request, but filtering arrays of filenames a serious thing to consider if we want code to be reusable in interesting ways.  I'd appreciate your opinion on this.  Food for thought if nothing else.  :smile:\n\nAt any rate, thank you very much for your offer to contribute!  I look forward to seeing the pull request.\n\n(Related: https://github.com/benjaminoakes/maid/issues/51)\n. @bobthecow \n\nI've decided to make a new issue for what I brought up... I think the functionality of detecting dupes is more useful right now.  :smile:\n. @bobthecow No worries, I totally understand!  Any contributions are appreciated, whenever they happen.  :smile:\n\nIf you make a pull request with all of it, I'll definitely merge it all.  Specs are appreciated, too.\n\nI've made a branch called \"feature/dupes\" for this pull request, as there are some bugfixes that are going to be released before this.\n. This has been merged into `features/dupes`.\n. Completed by @phoolish .  Thanks again!\n. I can see this being useful.  Are you using this right now?  I'd be interested in hearing more.\n\nI think this would be a good addition to Maid, but I have a couple of comments for the diff that we should resolve before this gets merged.\n. That's all I have to comment on.\n\nThanks again for your work on this!\n. Looks a lot better... but I ran into an issue testing...  (see diff comment)\n. I think the issue should be taken care of...  it's on the `sync` branch:\n\nhttps://github.com/benjaminoakes/maid/tree/sync\n\nI'll be merging pretty soon; I'd like to do a little more testing first.\n. See also: #19\n. Superseded by #19.\n. Taking this since I just did the other deprecation thing...\n. Thanks for this.\n\nI hadn't thought of the branch change making a difference (I probably could have still pulled from your `master`).  Anyway, sorry about that.\n\nThis will most likely be going out in [an upcoming release](https://github.com/benjaminoakes/maid/issues?labels=&milestone=1&page=1&state=open), along with some other [low difficulty issues](https://github.com/benjaminoakes/maid/issues?labels=difficulty-1&page=1&state=open) (any contributions are appreciated).\n\nAlso, if you'd like to help test the beta version of the gem that has `sync`, please drop a comment in #10.\n. Thanks!  I'm merging this into `simple-tools` shortly...\n. I could do a similar refactoring with `Array()` here too...  it went from 9 to 3 lines.  :smile:\n\nhttps://github.com/benjaminoakes/maid/commit/3780eefa0594f578818a220357e81fcd7009bdf1\n\nMerging into `simple-tools`.\n. Yep, should be similar in either case.  Just a matter of getting the logic right. \n. Example in practice: https://github.com/elliotboney/DotFiles/blob/2d6f8e58b01a5597d49ce79b4b22f55290cb3752/misc/maid.symlink/rules.rb#L188\n. For now, it seems like `remove` would handle a lot of the cases...\n\nAre you thinking that `trash` would work something like this?\n\n``` ruby\n# Psuedo-code:\ndef trash(path, opts = {})\n  if opts[:removal_threshold] && disk_usage(path) > opts[:removal_threshold]\n    remove(path)\n  else\n    # normal trash logic\n  end\nend\n```\n\nThen it could be called like so:\n\n``` ruby\ntrash('~/Downloads/*.m4v', removal_threshold: 2.gigabytes)\n```\n\nWe'd need to be somewhat careful with this; a bug in the implementation could be bad news (e.g. a lot more files get deleted than you think...).\n. Great, thank you for your work on this!  I've found some places where it might be useful as well;  look for `delete` in the issues (the name `remove` is fine by me, btw).\n\nI'll be merging this into the just-pushed `simple-tools` branch, which is the milestone this will go under.  (I want to get some bugfixes out first.)  Could you choose that as the target if you make more pull requests, please?  I just added a note to that effect to the wiki; I should have done that last night.  :smile:\n\nThanks again!  It's very appreciated.\n. This looks great, thanks!  I'm merging.\n\nI'm going to refactor it a little.\n\n``` ruby\npaths = [paths] unless paths.kind_of?(Array)\npaths.each # ...\n```\n\nRuby provides an \"arrayification operator\", which [Avdi Grimm introduced me to at RubyConf](http://avdi.org/talks/confident-code-railsconf-2011/) (slide 23).  It does basically the same thing as the above, but more compactly:\n\n``` ruby\nArray(paths).each # ...\n```\n. This has been merged into `simple-tools`.\n. Gotcha.  You're writing good Ruby so far, for what it's worth.  :smile:\n. Looks great; thanks for the specs.\n\nAs you might have guessed... I'm going to refactor with `Array()` here too.  :smile:\n\nThanks again for all your work on this, @phoolish.  It's been a pleasure collaborating with you so far!\n. After a quick glance, this seems good, but I'd like to think about it a little longer.  It's getting a little late over here.  :smile:\n\nIn the meantime:\n- I would prefer the C-style operators (`&&` and `!`) vs `and`/`not`.  (See also https://github.com/bbatsov/ruby-style-guide)  Could you change them please?\n- `trash('foo.zip', remove: 1.gigabyte)` doesn't read quite as well as I'd like (although I like the brevity).  How about...  `trash('foo.zip', remove_over: 1.gigabyte)`?  I'm open to alternatives.\n- Especially since `disk_usage` shells out and then parses the result, I'm a little nervous about files getting removed accidentally.  (I'm not sure how realistic that is, but Maid is automatically handling people's files, after all.)  Perhaps [a pure-Ruby solution](http://stackoverflow.com/questions/3632074/what-is-the-fastest-way-to-calculate-disk-usage-per-customer)?  I'm still on the fence here.\n. Sounds great.  I'll wait to merge until then.\n\nI'm looking at some options for `disk_usage` but haven't gotten too far yet.  If you find a good option, please feel free to run with it.  :smile:\n. @phoolish Merge commits don't really bother me that much, although I know some people don't like them at all.  You can certainly leave it as is.  You're doing me a favor by implementing this, after all.  :smile:\n\nI won't have a chance to try this out until later.  Unfortunately, our ISP was down last night.  :disappointed:\n. Merged.\n\nI added a check to `disk_usage`... just in case, basically.\n\nThanks again for contributing!\n. Hi Larry,\n\nThanks for your contribution.  It's very appreciated!\n\nHowever, this implementation isn't entirely what I had in mind.  My apologies; the description of #27 is a little misleading.  The idea here isn't to just make `find` give the same output as `dir`, but rather _act like_ `dir` in that it gives back an `Array`.  (The calls `dir('~/Downloads')` and `find('~/Downloads')` should give quite different results.  :smile:)\n\nMy thought was that `find` could be modified to have a default block that collects the names of the files (and then that is used as the result).\n\nAlso, if possible, please make this a pull request for the `simple-tools` branch, as that's going to be used for the future release.  If it's easier to leave it on `master`, that's fine too.  I'll be happy to merge it.  :smile:\n\nThanks again for your work on this.  I'm sorry the intent was miscommunicated!\n\nBest wishes,\n\nBen\n. Sounds great. Please let me know if you need any help.\n. I can only take a quick look now, but what I see looks great!  Thanks for adding `FakeFS` too.\n\nI'm going to be trying it out on a VM this evening, and if it all checks out, I'll merge.\n\nThanks again for your contribution!  It's _very_ appreciated.\n. Merged!  Thanks again.\n. Interesting.  This would seem related to how Ruby 1.9.x handles string encodings.  (If so, we might be able to force the encoding to fix this.)\n\nI assume you're using a Mac.  I have a few questions:\n- What version of Ruby is being used?  (`ruby --version`)\n- Did you install Ruby via MacPorts?\n- Can you switch from the MacPorts Ruby to the system Ruby (1.8.7) and see if the problem still exists?  If it works fine, using 1.8.7 might be a workaround for now.\n- Can you share the zipfile that caused this problem?  (Is it something that could be downloaded for testing?)\n\nThanks for your help, and for your interest in Maid!\n\nBen\n. Ah, so both when the zipfile contains a file that has UTF-8 in its filename, and when the name of the zipfile itself contains UTF-8.  I think that would be easy enough to reproduce.  We'll see.\n\nThe current implementation of `zipfile_contents` is less than elegant, but it has certainly worked for most of my use cases (all English-language text).  This bug might be a great reason to switch over to `rubyzip`, which shouldn't have the same problem.\n- https://github.com/aussiegeek/rubyzip\n- http://rubygems.org/gems/rubyzip\n\nHowever, #6 has my attention first.  Any further contributions you can make would be appreciated.  :smile:\n\nThanks again for your report!\n\nBen\n. @gsiener Great, thank you!\n\nI did some initial research on this.  What I'd like to do is use a Ruby based solution (rather than shelling out in an ugly way).  I'm not sure what option is best yet.\n- [Zip::ZipFileSystem](http://rubyzip.sourceforge.net/classes/Zip/ZipFileSystem.html)\n- https://rubygems.org/gems/libarchive-ruby\n- https://rubygems.org/gems/libarchive\n- Possibly others\n\nIf we can pick something that would allow easier support of `tar`, etc that might beneficial... but the first concern has to be fixing this bug, I think.\n. I'd be fine with that.  (I do recommend developing in a VM, for what it's worth.  See [contributing](https://github.com/benjaminoakes/maid/wiki/Contributing).)\n\nAnother option might be adding an example zip file in this repo (e.g. `spec/fixtures/utf8.zip`) rather than creating it in the spec.\n. No worries, the effort is appreciated!  Do you think you'll have time to come back to this later, or should someone else take this on?\n. Sounds great, thanks again!\n. :thumbsup:\n\nWe probably need to update the README too.\n. I just updated the README; I think it's in pretty good shape now. \n. Closing in favor of #36 (duplicate), as it's already labelled, etc.\n\nThanks for your help on this!\n. No worries about #39.  Everyone makes duplicate issues from time to time.  :smile:\n\nFrom a quick glance, it looks good... but I think I'd prefer to keep `:fakefs => true` where it was, just so people unfamiliar with the code can easily discover that `FakeFS` is being used.\n\nLike last time, I'll be taking a closer look at this during an evening this week.  \n. Great, thank you.  :smile:\n. Regarding how soon this will be merged...\n\n> I won't have a chance to try this out until later.  Unfortunately, our ISP was down last night.  :disappointed:\n\nI might do it over lunch if I have time, though.\n\nThanks again for your work, guys!\n. Merged.  I saw `dir` hadn't been modified to use `FakeFS` (partially because it wasn't that good of a spec to begin with -- my bad), so I rewrote it.\n\nI also made some style changes to match up with the \"Ruby Style Guide\".  There are some notes in the [Contributing](https://github.com/benjaminoakes/maid/wiki/Contributing) wiki page if you're interested.\n\nThanks again!\n. @gsiener Thanks for pointing that out.  I missed it when skimming before.\n\nI might be interested in donating.  They run a great service!\n. Nice!  Thanks for doing that.\n\nThe logger situation is getting a little weird.  This is the 2nd comment in that `before` block, which isn't a good sign... We'll have to fix that later.  :smile:\n. Post-merge, I can confirm that this fixed the build:  http://travis-ci.org/#!/benjaminoakes/maid/builds/2513121\n. That might make sense.  Right now, I'm thinking `Maid.new` should take a `Logger` as an argument, rather than the `log_device`.  That way, you can test with a \"null logger\", etc.\n. This looks great.  Per usual, I'll take a closer look this evening...\n\nI'd like to deprecate `last_accessed` too, if possible.  (I can maybe take care of that later -- we need a deprecation solution for `git_piston` too.)  I'm adding a comment...\n. @larrylv It's great, right?  But yet another reason it's important to say \"I'm working on this one\".  :smile:  A good problem to have, for sure.\n. Hey @larrylv read my mind too... :smile:\n. I think setting the `deprecated` gem to `warn` would get us what we want.\n\nI won't have a chance to do that until tonight at the earliest, however.  Feel free to play with it if you'd like.  (Just let me know if you do.  :smile: )\n\nBasically:\n- Add `deprecated` as a dependency in `maid.gemspec`\n\n``` ruby\n# Pseudo-code; just a guess based on their README\n\n# lib/maid.rb (maybe?)\nDeprecated.set_action(:warn)\n\n# lib/maid/tools.rb\nalias :last_accessed :accessed_at\ndeprecated :last_accessed, :accessed_at\n```\n. I'm taking a stab at the `deprecated` change.  Either way, this should get merged soon.\n. Sounds good.  I'm thinking just passing a logger might get us what we need:\n\n``` ruby\n# Example\nMaid.new(:logger => Logger.new)\n```\n. Thanks!  I'll take a look...\n\nI'd like to get at least the Ubuntu trash bugfix (#6) as a part of the next release too.  I was hoping to release **bugfixes** next, but there have been so many PRs for **simple-tools**, it's gotten done first.\n. It might be a couple days until this gets merged; I have a busy weekend planned. :smile:\n\nNo worries, though -- it will get merged soon.\n. No worries about the omission. That's why we have pull requests/code review, after all.  :smile:\n. Merging now; it's almost certainly right.  :)  We can try it out more during the beta test.\n. This looks great in concept; I'll be merging it soon.\n\nAlso adding a comment in the diff...\n. Merged.  Thanks again!\n. Interesting... but it still functions correctly, right?\n. Got it... this is necessary to be able to say:\n\n```\nLogging actions to \"/home/vagrant/.maid/maid.log\"\n```\n\nThat might deserve another set of changes, but in the meantime this is getting merged.\n. Yup, I only found that out after looking through the backtrace that `maid clean` gave.\n\nThe specific failure I got was from when `log_device` is called here https://github.com/benjaminoakes/maid/blob/simple-tools/lib/maid/app.rb#L21\n\nThanks again for reporting this!  I'm still trying to find time to fix that Ubuntu bug (#6), but I think I might make an alpha release so we can find out if there are any other bugs like this one.\n. Not sure yet.  :smile:  I think it's an interesting idea, but I'm not sure of the implementation yet, so I've tagged it as \"incubate\".\n\nIt might be easiest to use gems.  Or just files under ~/.maid/ with some sort of naming convention.  Still thinking about it.\n. It looks like @JohnColvin may be working on something similar.  (Thanks for forking and starting to commit!)\n\nI'm interested in the same idea, but rather than using Spotlight metadata, I was thinking it would be preferable to use something like a mimetype library so that it would also work on Linux.\n\nThoughts?\n. We were writing at the same time... interesting.  :smile:\n. I haven't done a ton of research yet... but I was thinking that using [the mime-types gem](https://rubygems.org/gems/mime-types) (or some variation on that) would be an idea.\n\nThanks again for your help!  It's very appreciated by both me and the user community.\n\nBen\n. I could certainly see including both solutions.  People have requested having more Spotlight attributes (e.g., #12) before, and I can definitely understand the usefulness of that.  (Note: [`ruby-spotlight`](https://github.com/youpy/ruby-spotlight) might be a big help, but may not be necessary right now.)\n\nHowever, if  we generalize that Spotlight feature, it might be a big win.  For example, instead of only adding `content_types()`, we could do something like:\n\n``` ruby\n# Get the kMDItemContentType for the path, converting to camel case like I do in Vertigo:\n#\n#     # something like this:\n#     name.to_s.gsub(/_([a-z])/) { $1.upcase }\n#\n# https://github.com/benjaminoakes/vertigo/blob/develop/lib/vertigo/client.rb#L78\nspotlight_attribute(path, :item_content_type)\n\n# It's general, so you could get other attributes like kMDItemAuthors:\nspotlight_attribute(path, :item_authors)\n```\n\nRegarding mime types, I'd like to avoid shelling out to use more system commands (e.g. `file`).  If we can use `MIME::Types.type_for('citydesk.xml')` to the same effect with a well tested `Ruby` library, that has less room for error in my experience.  But like I said, I don't know a lot of what the `mime-types` gem has in its API.\n\nThanks again for your help on this!  I was honestly thinking mime types were the way to go before this conversation, but I can certainly see how the Spotlight metadata would be useful now.\n\nHappy holidays,\n\nBen\n. Looks really nice!  I'll be happy to change over to using the gem; it doesn't look like that'll be hard at all.\n\nWould you be willing to add specs for the output of these new methods?  (Testing in a VM is recommended.  See [contributing](https://github.com/benjaminoakes/maid/wiki/Contributing).)  I'll be using those specs when changing over to the gem.  If not, I'll be able to put some specs together.\n\nThanks again and happy holidays!\n\nBen\n. That's perfectly fine.  This won't be officially released until v0.3.0, but specs will be needed before that release.  :smile:\n\nCurrent [milestones](https://github.com/benjaminoakes/maid/issues/milestones):\n- v0.2.0: Released on Christmas (hopefully).  It's been in beta testing for a while, and seems ready.  (Help testing is appreciated.)\n- v0.2.1: Released as soon as we finish fixing some pre-existing bugs.\n- v0.3.0: No set date yet.  Includes new backwards compatible features, like what you've implemented.\n\n(I'm versioning by [SemVer](http://semver.org/) standards, at least for now).\n. Work is happening on the `feature/types` branch.\n. Hi guys,\n\n@phoolish and @macfidelity mentioned they'd be interested in helping beta test.  I appreciate any and all contributions you can make in doing this!\n\nAlso, @larrylv and @phoolish have contributed code.  If you can help by testing that your changes still work as intended in `v0.1.3.beta.1`, that would be very appreciated as well.\n\nThanks for your help!\n\nBen\n. Hi @macfidelity,\n\nThanks for helping out!  General impressions are a great thing to report here, but if we identify a bug, we should make a new issue for that.\n\nRegarding http://rubydoc.info/gems/maid/Maid/Tools, it will be updated automatically when Maid 0.1.3 is released; this prerelease doesn't update the documentation.  Thanks for reporting it; I should have noted that would be the case.\n\nThanks for the wiki page too.  It's a great supplement to the \"sample\" that Maid comes with, and is a great option so people can share ways they use Maid.  I'll be adding to that page myself sometime soon.  :smile:\n\nBen\n. @phoolish Thank you, it's very appreciated.  The next release won't come until `xdg` v2.2.3 is out (includes bugfix) and we can test using it.  That should be soon, but will probably be a few days.\n. Thanks @larrylv :smile: \n. @phoolish No problem!  As always, any help you can provide is very appreciated.\n\nI haven't heard any bad feedback from beta testers as of yet, and I've been using the beta every day.  I'm about ready to stop waiting on a bugfix for XDG, so I might just release my own version of the gem to rubygems.org (e.g., `xdg-maid`) so we can get Maid v0.1.3 released.\n\nAt any rate, any feedback you can give is appreciated.  There will still be one more beta release before this is called \"stable\".\n. Hi all,\n\nI got tired of waiting for a new release of `XDG` with the Linux bugfix, so I released a custom build (called `maid-xdg`) which includes the bugfix.  It's unfortunate that we had to go through that, but it means we can release the next version of Maid (finally).  :smile:\n\nMaid v0.1.3.beta.2 has just been released to RubyGems. Along with the dependency on the fixed version of `xdg`, Beta 2 has a tiny fix for a bug in `trash()` that I discovered.\n\nI'm planning to release Maid v0.1.3 (final) after giving a few days so others can try it out.  However, I've only heard positive feedback thus far (and several users are using Beta 1 every day), so I plan on releasing it pretty soon.  :)\n\nBest wishes,\n\nBen\n. I've released v0.1.3.  You can update using:\n\n```\nsudo gem update maid\n```\n. This is part of the beta test effort (#52).\n. After a month of waiting, I released a custom build of `xdg` called [`maid-xdg`](https://rubygems.org/gems/maid-xdg) that includes the bugfix.\n. Work on this feature is happening on the `feature/import_music` branch.  I'm not actively working on it yet (bugfixes are taking priority), but any help implementing is appreciated!\n. I like that idea.\n. **[acceptance]** Saw correct license at https://rubygems.org/gems/maid/versions/0.1.4.alpha.2\n\n> Licenses\n> \n> GPLv2\n. Thanks for your note, Brad.  That's a good observation.\n\nRight now, I don't really find myself using `locate` in my rules, so I'm holding off on making it work on Ubuntu.  (When I do have time to work on Maid, I'm prioritizing bugfixes, and a release with contributions people have made.)\n\nI like the `find` solution because of what you mentioned, but it would seem like the existing `find` method would be very similar.  Because of that, Maid's `locate` might still end up using the system `locate`, but maybe with a disclaimer in the documentation, or a printed warning.\n\nThat's my current thought process at least.  :smile:  Thanks again for writing, and for using Maid of course.\n\nBen\n. That sounds reasonable.  If you run into trouble, let me know!\n. Agreed.  This is definitely something to fix for a future version.  (Any help is appreciated, of course.)\n. I'm working on this.  It will either be a part of v0.2.0 or a bugfix release (e.g. v0.2.1).\n\nIf someone wants to drop in and help, just leave a comment.  I won't have a chance until at least this weekend.\n. Some implementation has started on branch `feature/shellwords`.  I think it's actually done now, but I want to refactor and do more testing before it gets released.\n. I came back to the refactoring I started, and came to the conclusion that it's not going to be any help at all.  (It actually made things more complicated.)  I'm releasing a version with the simple change I made earlier.  `feature/shellwords` is being replaced with `feature/escape`.\n. @loddy1234 just fixed the last bug that I'm aware of, so another beta release will be happening soon. I'll be updating this issue when that happens.\n. @gsiener @ge @jprice\n\nMentioning you guys here since you said you were interested in beta testing.  This is the issue where the v0.2.0 effort is coordinated.\n. I've released the next beta (v0.2.0.beta.2).  Please see the changes in [the ChangeLog](https://github.com/benjaminoakes/maid/blob/master/ChangeLog).\n\nYou can update to the latest pre-release using:\n\n```\ngem install maid --pre \n```\n. I've release the first Release Candidate (v0.2.0.rc.1).  I'd like to release it as stable v0.2.0 this weekend so we can focus on new features.  :smile:\n\nIf you have a chance to test it out, please do.  I've been using the v0.2.0 releases for a few weeks now without any problems, but I appreciate second opinions.  Maid's handling people's files after all, so having a good release and testing process is important.\n. Unless I hear something tonight, this is being released as \"stable\" tomorrow.  Happy holidays everyone!\n. That's an interesting point:  `sync` might fit many people's needs.  However, if the underlying `rsync` binary doesn't exist, it wouldn't work.  In contrast, `copy` would be implemented in terms of `FileUtils.cp`.\n. :smile: Thanks, Nico. \n. @nicosuave still have your code?  If there was a PR for this, I must have missed it.\n. Got a request for this [on Twitter](https://twitter.com/SiegelJosh/status/514264080144928768), assigning to v0.6.0, since this is pretty easy.\n. Hi @SteenJobs, I'm not sure what you mean by \"if you create a pull\"\n. Hi @choupachupss,\n\nThanks for writing in!  `find` does need some better documentation.  Better documentation is a goal for Maid v0.2.0 (hopefully released this coming weekend), so I'll be keeping this in mind.  You can check out the new docs here:  https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L196.  Additionally, you're very welcome to contribute tips and tricks to [the wiki](https://github.com/benjaminoakes/maid/wiki).\n\nHowever, `find` is kind of odd in that it's been less useful to me than I would have originally thought... and it tends to confuse things.  In fact, it's actually not necessary in the rule you brought up.  I would write it slightly differently, since `dir` just gives back an `Array`:\n\n``` ruby\nrule 'facebookPhoto' do\n  paths = dir('~/Downloads/*.jpg').select { |p| p.match(/[a-zA-Z]*/) }\n  move(paths, '~/Images/')\nend\n```\n\nBut that's a pretty common pattern, so Ruby actually gives you `Array#grep` to make it simpler:\n\n``` ruby\nrule 'facebookPhoto' do\n  move(dir('~/Downloads/*.jpg').grep(/[a-zA-Z]*/), '~/Images/')\nend\n```\n\n(Note: if I'm interpreting the intention of your rule correctly, that regexp may need a little tweaking.)\n\nI hope that helps!  Thanks again for using Maid.\n\nBen\n. It might be your version of RubyGems.  What does `gem --version` say?\n. I've reproduced this on a friend's machine running 10.7.4.  This is from a bug in v0.1.3 which has already been fixed in v0.2.0 (now in beta).\n. Yep, it's [available right now](https://rubygems.org/gems/maid).  Please find details about installing at https://github.com/benjaminoakes/maid/issues/71.\n. Thanks!  This is very appreciated.  There are other low difficulty issues too, if you'd ever like to help out.  :smile:\n. Thanks for the catch.  That also seems to be a bug in `activesupport` as well:  https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/numeric/time.rb\n\nActiveSupport isn't being used directly right now because it overwrites the interface to Ruby's `Logger`.  If a workaround is available, it might be a better choice to use ActiveSupport as a dependency.\n. Makes sense; that could be a problem because the calculations are in seconds.  :smile:\n\nRegardless, preferred way of fixing this is still probably to let the ActiveSupport guys sweat the details, and let Maid focus on its core functionality.  I'd love to use their methods for size calculations also (which will require breaking some interfaces in Maid, unfortunately).\n. Thanks!\n. Nice, that makes a lot of sense to have.  :smile:\n\nThanks for the contribution!\n. Thanks!  I'll be merging this soon.\n\nWould you feel comfortable adding a spec showing that `dir( '~/{Documents,Desktop}/*.sh')` works as intended?  I'd just like to make sure it always works before documenting it.\n\nThanks again for your contribution,\n\nBen\n. Fair enough.  Should you change your mind, the offer stands.  :smile:\n. Thanks for the pull request!  This is very related to #55.  What you note about `.localized` will be included when that feature is added.\n\nAlso, the behavior you describe with `move` doesn't seem like it should be happening since there's [a check to see if the file exists](https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L37).  I've made a separate issue (#87) to see if we can reproduce that, and if we can, a bugfix release will be coming out shortly.\n. I've merged this into the newly created `feature/import_music` branch.  Depending on what happens with #87, these comments might get included in the next release regardless of #55.\n. Update: I think I've narrowed down the circumstance that causes this to happen.  I have a test Maid script and I'm working on creating a spec that describes the problem.  The fix is simple, but getting the spec right is harder.\n. (We've been putting some discussion in #51, too.  Future discussion can go in #89  -- this issue -- if you'd like.)\n. For the time being, this is merged into branch `feature/types`.\n. This was recently merged (with a rebase, so it wasn't automatically closed).\n\nThanks again for doing this; just took a while to find some time to work on the specs and native mimetypes.\n. Thanks!  :smile:  I honestly don't know if there will be anything to fix, but it's always worth a check.\n\nAlso, as a reminder both 1.8.7 and 1.9.3 are officially supported Ruby versions.\n. Hrm... you could maybe run the specs with `ruby -w`.  Otherwise, [here](https://github.com/benjaminoakes/maid/blob/master/bin/maid#L1).\n\nThanks again for your help!\n. It sounds like [the `find` method](http://rubydoc.info/gems/maid/Maid/Tools#find-instance_method) will do what you want.  Perhaps something like this?\n\n``` ruby\nmove(find('~/Music/').grep(/\\.m4a$/), other_location)\n```\n. If this helps you, it might make sense for us [to add an example like this in the docs](https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L201) so others can benefit.\n. Good point.  We should probably document that in [`dir`](https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L168).\n. Added:  https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L168\n\nI'm closing this issue as well, as it seems to be resolved.\n. This is great, thanks!  Very good docs, implementation, and specs.\n. Looks like this has a problem on Ruby 1.8.7:  https://travis-ci.org/benjaminoakes/maid/jobs/4132895\n\nJust syntax, I would guess.\n. Great, thank you.  I'll be happy to release any bugfixes along with the others in the next release.\n. Thanks!\n\nWe're in the process of changing from `inspect` to Shellwords, but I'll take care of that change -- there are still some questions about how it will be done.\n. It looks like these changes broke a spec:\n\nhttps://travis-ci.org/benjaminoakes/maid/builds/4270742\n\nWould you have a chance to fix this?\n. Sounds good, thanks for doing this!\n. I've been using this version without issue; planning to release a stable version shortly.\n. Released as v0.2.2\n\nhttps://rubygems.org/gems/maid/versions/0.2.2\n. I like the approach, thanks for doing that.  I've been thinking something similar.\n\nThis isn't quite ready to merge into master yet -- there's one more bugfix to release first.  I'll definitely include it in the alpha of v0.3.0 though.  I'm hoping to find some time to release that soon.\n\nAlso, what's your full name?  I'd like to include it under \"authors\".\n\nThanks again!\n\nBen\n. Hi Mu Ye,\n\nThanks for this.  It's close, but I don't think this is actually going to test the way you might expect... I think it needs to use one of [the \"capture\" helpers I wrote](https://github.com/benjaminoakes/maid/blob/master/spec/lib/maid/app_spec.rb#L6).  Basically, the spec should fail if [the `say` lines in `version`](https://github.com/benjaminoakes/maid/blob/master/lib/maid/app.rb#L35) are removed.\n\nIf you're interested, I've labelled some other [\"low difficulty\" issues](https://github.com/benjaminoakes/maid/issues?labels=difficulty-1&milestone=&page=1&state=open).\n\nThanks again for your work on this!  It's very appreciated.\n\nBen\n. That would also probably catch it... regardless, it would be nice to know that `--version` actually prints the version.  :smile:\n\nIf your spec catches the missing `map`, that's great -- I'll be happy to merge.  My apologies if I led you astray; I haven't touched that code in a while.\n\nBen\n. My mistake.  I had a chance to test this locally, and it does catch the problem.  Thanks!\n. Hi Mu,\n\nThis is great!  Thanks for spending time on this.  I'll try to find some time this weekend to try this out and get it merged.  (For what it's worth, I like feature branches -- I saw you had made one in #98.)\n\nRegarding your question, I believe the answer is that we always `follow_rules`, but the rules will respect the `noop` option if `--noop` is specified.  That allows us to see what a dry run would accomplish.\n\nI've only taken a quick glance through the code so far.  One thing that occurs to me is that we should add another alias called `-f` for people who are familiar with `git clean` (which takes `-n` or `-f`).  That might be a reason to prefer `--force` over `--execute`, but allowing `--execute`, `-e`, and `-f` could make sense too.  I might tinker with that idea if you don't have a chance to. \n\nThanks again!\n\nBen\n. Merged, with a couple tweaks.\n\nThanks again for your help!  You've been making excellent contributions so far.\n. Thanks for your work on this!  I saw your fork and was wondering if I'd see a pull request.  :smile:\n\nI'll be trying this out and merging it hopefully in the next few days.\n\nThanks again,\n\nBen\n. Merged!  I ended up simplifying the spec a little.  See 4eeb1069f405cbcac1bafd333729b2e25283ac1b if you're interested.\n\nThanks for your work on this; it's nice to have a working solution.  You're now listed in the ChangeLog and AUTHORS files. :smile:\n\nBen\n. No problem.  Contributions are always welcome.  :smile:\n. I've been using v0.3.0.beta.1 for over a week.  Besides the expected changes to `rename`, I haven't run into any issues, so this is getting released.\n\nEnjoy!  :smile:\n. Rendered, read through.  Looks fine.  :)\n. My first guess would be an environment problem.  Maid, RubyGems, or Ruby might not be available to the cronjob.\n\nDoes `~/.maid/maid.log` get updated?  If so, could you please share any error messages?\n\nAnother thing to try would be logging any cronjob output to a file like so:\n\n```\n*/1 * * * * /bin/bash -li -c \"maid clean --silent &>maid_cronjob.log\"\n```\n\nThat should make a file in your home directory called `maid_cronjob.log`, possibly with an error message.\n\nHopefully this helps shed some light on the issue!\n. Glad to hear you got it working.  :smile:\n\nWhile your solution works, `bash -li -c` should have handled that issue.  Your `PATH` might not be set up in the way it should be.  Sometimes that's because `~/.bashrc` and `~/.bash_profile` are slightly misconfigured.  Of course, if you are using something other than `bash`, it might not be configured at all.  :smile:\n\nIt's hard to debug things like that remotely, but could be worth looking into your configuration if you'd like to.  Otherwise, you should be set.\n\nI use Ubuntu as well, so if you run into any other issues, please let me know!\n. Great.  I just took a minute to look through my config, and I have this in my `~/.bashrc`:\n\n``` bash\nsource \"$HOME/.bash_profile\"\n```\n\nIf you'd like to see more about how I have things set up, I have [my dotfiles](https://github.com/benjaminoakes/dotfiles) as a public repo on GitHub.\n\nHappy we got Maid working for you.  :smile:\n\nBest wishes,\n\nBen\n. Thanks!\n. Yep, that will be a part of Maid v0.4.0.\n\nI've released some [alpha builds](http://rubygems.org/gems/maid/versions/0.4.0.alpha.2) (which are probably closer to beta quality), if you'd like to start playing with that functionality.  I'd like to do some more testing to make sure everything works as expected, has a nice syntax, etc.  Unfortunately, we're in the middle of moving to a new place, so my time is limited right now.\n\nBeta testing is always **very** appreciated, so if you have comments on how this feature works, please share!  The method you want is probably `where_content_type()`.  There are [some examples in the documentation](https://github.com/benjaminoakes/maid/blob/master/lib/maid/tools.rb#L563).\n. Still some dependencies to update, but this is done.\n. Still an issue on fakefs 0.5.3\n. Hi @jurriaan,\n\nThanks for your enthusiasm!  I think a daemon makes sense.  I don't have time at the moment to review your solution, but I'll take a look soon.\n\nBest wishes,\n\nBen\n. @MoritzFago I think acting on the rules when a file system event happens makes sense.\n\nI haven't yet had the time to sit down and understand this changeset -- but if you feel like the behavior isn't very user friendly, I'd be interested in seeing your suggestions.\n\nAlso, @jurriaan, if you could modify the README with a tutorial on how to use the notification support, that would help me immensely.  (Sorry if it's there and I'm just missing it.)\n. Indeed it was.  Unless I'm missing something, it looks like this issue can be closed.\n. Thanks, seems like a reasonable change.  :smile:\n. This seems interesting.  I'm wondering if there's an issue with how `move` works; I'd have to review the specs and code.\n\nAt any rate, does `rename` not behave the way you expect?  It seems like there's some overlap with the idea you present.\n\nThanks for using Maid,\n\nBen\n. Gotcha, I see what you're going for now.  I like the idea.  I'd take a pull request, but maybe with a slightly more descriptive name like `automatic_rename`, `numbered_rename`, etc.\n\nThere's some other \"automatic naming\" features that I'd like to implement someday (e.g. looking inside a file for a date and then naming that file based on the date that was found, which would be really helpful for bank receipts).  I have some basic code for that now, but not anything worth sharing.\n\nThanks for the kind words.  Glad it helps you, and that it works on Arch.\n\nRegarding inotify, I agree.  That's being worked on too... https://github.com/benjaminoakes/maid/issues/116\n. That's not currently supported, but I'd be interested in having that as a feature.  Pull requests welcome, as I have a lot on my plate at the moment.\n. Interesting, thanks for letting me know.\n. Sweet, thanks!\n. Sounds interesting!  I've been thinking it would be nice to have something to make usage by non-Rubyists a little easier, and this could definitely be a part of it.  Any help in this is definitely appreciated!\n. This is awesome work!  Thank you for your contribution!\n. This is closer to something users would share in the wiki (which I encourage people to do).  Additionally, I answered a relevant question about this on StackOverflow:\n\nhttp://stackoverflow.com/questions/25988567/how-do-i-copy-specific-file-types-with-maid\n. Sounds useful.  Looks like there's [some Ruby interfaces out there, too](https://rubygems.org/gems/findercolor/versions/0.5.0).\n\nI'd be happy to take a pull request for this, but I'm unlikely to implement it myself.\n. @songchenwen That looks really interesting...\n\nI have a few guidelines:\n- Any solution must work on Linux.  By that, I mean `maid` can't fail to install just because of OSX specific code existing to support the OSX-only tagging feature.  To be clear, we **don't** need to have the exact same featureset on Linux.\n- From looking at [jdberry/tag](https://github.com/jdberry/tag/), it seems like a Ruby gem that wraps it could be a very good idea.  I don't know much about taking that approach, but looking at `rb-fsevent` could be a good starting point.\n. @songchenwen I was thinking about this recently... how about we just assume they have `tag` installed?  If they don't, we'll give them a download link.\n\nI'll have some time to do a release on Sunday if you have a chance to make a pull request with the code from your config file.  I'd like to have you receive the recognition you deserve!  (vs. me copying and pasting, in which case it would look like I wrote it)\n. Awesome, thank you!\n\nAdding to `tools.rb` is the only requirement, but specs would be appreciated of course if you have time.  Also, there's a lot of great stuff in your `rules.rb` besides the \"tag\" code.  All of the utility methods you wrote would be welcome.\n\nAs for Linux users, I think we can just report that tagging isn't available since it's an OSX-only feature.  The `Maid::Platform.osx?` command is available to check what platform `maid` is running on.\n\nIn pseudo code:\n\n```\nif Maid::Platform.osx?\n  if has_tag_available?\n    cmd(...)\n  else\n    print \"To use this feature, you need `tag` installed.  Run `brew install tag`\"\n  end\nelse\n  print \"sorry, tagging is unavailable on your platform\"\nend\n```\n. @jurriaan I've merged this, but I think it could be useful to have an example of how to start the daemon on login -- probably for Ubuntu and OSX.  Have any input?\n. Nice.  It feels like we should include a Launch Agent with the project.  In the meantime, I'll add a link to your post in the README.\n. Interesting, must be because of Spotlight changes or something.  I'm not sure how to do what you suggest for OSX 10.10 compatibility, but I'd be interested in a pull request if anyone can figure this out.  (At the time of this writing, I don't have access to a Mac for development with OSX 10.10 -- my primary machine is Ubuntu.)\n. There's a link to [the wiki](https://github.com/benjaminoakes/maid/wiki) in the sample rules file, but I'm interested in any other ideas users might have.\n. I'm okay with that for now.  If something good comes of this, let's try to integrate it in the sample rules.\n. Thanks!\n. I'll be looking at this a little more before merging.  By the way, the plan is to release a new version around Christmas.\n. Good catch, thanks!\n. I'd be interested in seeing a pull request with this if anyone is interested in putting it together.. I'd be for this (pull requests welcome).\n\nBack when I first made the CLI, Thor didn't make its support of this style of help obvious to me (if it did exist). If they've added it since then, it would be very helpful to new users.\n\nMoving away from Thor isn't out of the question, but it does make many things easier.\n. I'd be for this (pull requests welcome), but it needs to play nicely with logging and other non-interactive contexts.\n. While what you say about convention is true, `--force` was chosen for Maid to act more like `git clean`.  Check out this thread on Hacker News for context: https://news.ycombinator.com/item?id=4929243\n\nThat said, what you suggest could be a good compromise if others agree. However, since it changes the meaning of a command, this behavior wouldn't become default until a major version change (e.g. v1.0, per semver conventions).\n\nIf this were added as a new command such as `maid ask` or `maid prompt`, we could try out the idea before making it default.\n. I'd be for this (pull requests welcome).\n. I'd be for this (pull requests welcome). Some people have suggested a menu bar icon as well. \n\nOn Ubuntu, this would probably use libnotify. More info: https://github.com/guard/guard/wiki/System-notifications\n. I'd be for this (pull requests welcome), though I might prefer printing the path so it could be opened by any program.\n. Interesting!  Please make a pull request for this; I think it could be useful to more people.\n. This is great stuff!  Thank you so much for taking the effort to do this.  Merging now...\n. I've released an alpha build based on this pull request.  I'd appreciate any help with testing!\n\nhttps://rubygems.org/gems/maid/versions/0.8.0.alpha.1\n. It looks like you want to use a regexp but are using a string instead.  Try changing `'.*iPhone.*'` to `/.*iPhone.*/`.\n. Also, the `rule` block doesn't take an argument.\n. Could you make this a question on StackOverflow, please?  It'd be more likely to get attention.  I'd recommend using the \"maid\" tag when you post it.\n\n[Here's an example of another Maid user posting to StackOverflow.](http://stackoverflow.com/questions/25988567/how-do-i-copy-specific-file-types-with-maid/25989377)\n. Interesting.  Maybe we should include this by default for `watch` since it seems like sensible default behavior that could be overridden.\n. I think lazy as default is better than killing someone's battery.  Being able to override the behavior is good if someone does end up caring.\n. Thanks!  I'll merge this and try it out before the next release.\n. By the way, thanks for all your hard work on this!  It's _very_ appreciated.\n. Thanks!\n. I'd be for this feature, but I'm unlikely to implement it myself.\n. Interesting.  Thanks for taking a stab at this!\n\nAre you using this yourself?\n\nA few things:\n- Looks like [the build failed](https://travis-ci.org/benjaminoakes/maid/jobs/138082013#L207).  (Note: there's a problem with the test suite on Ruby 2.3 that I've yet to fix that's unrelated to your change.  I'd appreciate it if you want to take a stab at that though!)  That said, what I linked seems to be a real problem.\n- I'd like to see some kind of tests, even if it's just ensuring the files would be installed correctly.\n- The `install_launch_agent` method is pretty long.  Can we break it apart somehow?  (E.g. move the heredocs elsewhere.)\n. No problem!  Kind of the norm for a hobby open source project, sometimes.\n. This could maybe use better messaging... The `watch` command takes a path, not a description. See the README for an example.\n\nI'd happily accept a PR that gives a more obvious warning, assuming that's the root cause. \n\nOn July 12, 2016 8:27:35 AM CDT, \"Micha\u00ebl Fortin\" notifications@github.com wrote:\n\n> Somehow the Maid daemon crashes at startup when I use the move tool in\n> a simple watch rule. Any idea why this occurs and what I could do to\n> work around this?\n> \n> **Conditions:**\n> \n> Ruby 2.3.1 (installed with Homebrew)\n> \n> ``` ruby\n> watch \"Move screenshots\" do\n>    destination = \"~/Pictures/Screen Shots/\"\n>    dir(\"~/Desktop/Screen Shot *\").each do |path|\n>      move(path, destination)\n>    end\n> end\n> ```\n> \n> **Stack trace:**\n> \n> ``` shell\n> ~ maid daemon\n> Logging actions to \"/Users/Michael/.maid/maid.log\"\n> /usr/local/Cellar/ruby/2.3.1/lib/ruby/2.3.0/fileutils.rb:1599:in `dup':\n> can't dup NilClass (TypeError)\n>   from /usr/local/Cellar/ruby/2.3.1/lib/ruby/2.3.0/fileutils.rb:1599:in\n> `fu_check_options'\n>   from /usr/local/Cellar/ruby/2.3.1/lib/ruby/2.3.0/fileutils.rb:514:in\n> `mv'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/tools.rb:45:in\n> `block in move'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/tools.rb:43:in\n> `each'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/tools.rb:43:in\n> `move'\n>   from /Users/Michael/.maid/rules.rb:14:in `block (3 levels) in <top\n> (required)>'\n>   from /Users/Michael/.maid/rules.rb:13:in `each'\n>   from /Users/Michael/.maid/rules.rb:13:in `block (2 levels) in <top\n> (required)>'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/rule_container.rb:8:in\n> `instance_exec'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/rule_container.rb:8:in\n> `initialize_rules'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/watch.rb:12:in\n> `initialize'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:89:in\n> `new'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:89:in\n> `watch'\n>   from /Users/Michael/.maid/rules.rb:11:in `block in <top (required)>'\n>   from /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid.rb:35:in\n> `instance_exec'\n>   from /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid.rb:35:in\n> `rules'\n>   from /Users/Michael/.maid/rules.rb:10:in `<top (required)>'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:82:in\n> `load'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:82:in\n> `block in load_rules'\n>   from /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid.rb:28:in\n> `with_instance'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/maid.rb:78:in\n> `load_rules'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/lib/maid/app.rb:92:in\n> `daemon'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/command.rb:27:in\n> `run'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/invocation.rb:126:in\n> `invoke_command'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor.rb:359:in\n> `dispatch'\n>   from\n> /usr/local/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/base.rb:440:in\n> `start'\n>   from /usr/local/lib/ruby/gems/2.3.0/gems/maid-0.7.0/bin/maid:5:in\n> `<top (required)>'\n>   from /usr/local/bin/maid:23:in `load'\n>   from /usr/local/bin/maid:23:in `<main>'\n> ```\n> \n> ---\n> \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/benjaminoakes/maid/issues/159\n. > Maybe the watch tool could make sure the string is a path, that it exists on the filesystem, and throw with a helpful message otherwise?\n\nYup, that's what I was thinking.  Something like:\n\n``` ruby\nif !File.exist?(expand(path_that_watch_received))\n  raise 'helpful error message'\nend\n```\n. I've personally never done it, but if RubyZip supports it, Maid could too. (Pull requests welcome!)\n\nOn September 24, 2016 3:32:34 PM CDT, Alexandre Vazquez notifications@github.com wrote:\n\n> Is it possible to unzip password protected files? \n> \n> ## \n> \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/benjaminoakes/maid/issues/160\n. @torrottum Thanks from me too! I was going to say the same thing. \n\nOn October 3, 2016 11:12:03 AM EDT, Canor notifications@github.com wrote:\n\n> @torrottum Thanks! Didn't know gems are stored elsewhere. That solved\n> my problem :)\n> \n> ## \n> \n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub:\n> https://github.com/benjaminoakes/maid/issues/161#issuecomment-251133505\n. Does this happen on macOS prior to 10.12?  (I'm still on 10.11 for a variety of reasons.). ",
    "blomma": "Hey man, cool, i'd love to take a stab at it, i love playing with new\ntech. I'll let you know how it goes.\n\n~//M\n\nOn Wed, Oct 12, 2011 at 15:10, Ben Oakes\nreply@reply.github.com\nwrote:\n\n> Thanks so much for this patch! \u00a0I didn't know that adding log rotation was so easy to add.\n> \n> This looks like your changes will apply very cleanly, but in thinking towards future releases of Maid, I'm wondering if there should be a spec backing it up so I don't break it by accident.\n> \n> It would seem that something like https://github.com/defunkt/fakefs could make this really easy. \u00a0Would you be willing to take a stab at this? \u00a0If it isn't feasible, please let me know, and I'll be happy to complete the pull request without.\n> \n> Thanks again!\n> \n> Ben\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/benjaminoakes/maid/pull/1#issuecomment-2378954\n. Hey man, cool, i'd love to take a stab at it, i love playing with new\ntech. I'll let you know how it goes.\n\n~//M\n\nOn Wed, Oct 12, 2011 at 15:10, Ben Oakes\nreply@reply.github.com\nwrote:\n\n> Thanks so much for this patch! \u00a0I didn't know that adding log rotation was so easy to add.\n> \n> This looks like your changes will apply very cleanly, but in thinking towards future releases of Maid, I'm wondering if there should be a spec backing it up so I don't break it by accident.\n> \n> It would seem that something like https://github.com/defunkt/fakefs could make this really easy. \u00a0Would you be willing to take a stab at this? \u00a0If it isn't feasible, please let me know, and I'll be happy to complete the pull request without.\n> \n> Thanks again!\n> \n> Ben\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/benjaminoakes/maid/pull/1#issuecomment-2378954\n. ",
    "phoolish": "If I understand correctly, the issue is with a lack of tests.  But the tests would be against the ruby logger library.  Isn't that out of scope?\n. I'm in and I'll work on a couple of the issues as well.\n. It is funny that you bring up the :delete question.  I added some additional options to my latest commit.  I could add a noop check, but I think it would make more sense to put that in cmd.\n\nI am using this on my current system to handle my video, music, and photo libraries syncing with backup.\n. Actually there is a dry run option that I could add pretty easily.\n. I added the dry run check, but I don't know how to test for it.\n. Looks good.  I like the verbose output of rspec.  I should have looked closer at the code.  I assumed :cmd had already been turned into a stub.\n. I like to send stuff to the trash, but for the big files (films, db_dumps, etc.) I want to just remove them outright.  I have already updated the trash task to take a size option.  As I was doing research into removal, it dawned on me that a remove tool would be a good alternative (See #30).  I can make this separate, but the functionality from remove would just get duplicated during the check.\n. exactly, what i was thinking.\n. This is a good excuse to learn FakeFs.\n. Sounds good.  Glad to help.  As far as the Array thing, ruby is not my defacto language.  I am a python/php developer by trade and only use ruby for Chef, so anytime there is a syntax/elegance question I'll default to you.\n. Whoops that merged in the remove tool.  I guess that is a necessary functionality for using the trash size option.\n. I know the feeling.  I work on CST time a lot, so late night coding sessions can be an interesting mix of fatigue and caffeine overload.\n\nAs far as your notes, I have no problem with using c-style operators and using remove_over.  It is just my brain on python.  I have no clue about a pure-ruby implementation of file size.  I am sure someone has tackled it, but that might mean another gem dependency.  It might also make sense to add a check for cmd to make sure the programs are actually installed.\n. I still want to rewrite the tests to use fakefs.\n. Awesome.  I know nothing about Fakefs, but from what I can tell it'll be very helpful.  I'll take a look in the AM. \n\nB/w I might use it on a capistrano project too.\n\nThanks!\n. @larrylv thanks for the info.  I merged in your changes to trash.\n\n@benjaminoakes sorry about the merge branch commit.  I thought I done the merge on my master.  anyway to cherry pick or should i revert?\n. Looking good.\n.  Ignore my previous comment.  It was pertaining to an earlier commit.  I'll implement the fakefs with the new trash size stuff.\n\n@benjaminoakes How soon will this be committed?\n. @larrylv thanks. fakefs is interesting.  I like the concept, but I am not sure about implementation.  Then again, they are trying to tackle a really big problem, so there are bound to be loose ends.\n\n@benjaminoakes no worries.  this helps me just as much as you.\n. It seems to be having issues with the lack of ./maid/maid.log file =)\n. Just cleared my log and ran the tests.  Populated the log with creation date info.\n. Figured out the issue.  The logger gets initiated when Maid does, so we either need to mock it earlier or change the log_device when making the deceleration.\n. Yeah, I have run into issues testing it on some chef stuff.  I think it might make sense to have some way to turn it off and/or trigger a do you want to create when maid clean is run.\n. I think that makes sense.  Maybe even allow folks to define logger options in the rules.rb file.\n. Read my mind.\n. Updated references as per issue #38\n. Learn something new everyday.  Thanks guys.\n\n@benjaminoakes Let me know what library you go with and I'll make the changes or you can.\n. No it was getting an error and failing.  All the tests pass, but the execution from the command line got it to complain.\n. How will these be distributed?\n. @benjaminoakes I'm a bit busy this week, but I'll try to devote some time this weekend to playing with maid.\n. I'm sorry @benjaminoakes I've been busier then I originally thought and now I'm in Nepal for two weeks.  I have a new computer to come back to.  AKA the perfect test machine =).\n. If I understand correctly, the issue is with a lack of tests.  But the tests would be against the ruby logger library.  Isn't that out of scope?\n. I'm in and I'll work on a couple of the issues as well.\n. It is funny that you bring up the :delete question.  I added some additional options to my latest commit.  I could add a noop check, but I think it would make more sense to put that in cmd.\n\nI am using this on my current system to handle my video, music, and photo libraries syncing with backup.\n. Actually there is a dry run option that I could add pretty easily.\n. I added the dry run check, but I don't know how to test for it.\n. Looks good.  I like the verbose output of rspec.  I should have looked closer at the code.  I assumed :cmd had already been turned into a stub.\n. I like to send stuff to the trash, but for the big files (films, db_dumps, etc.) I want to just remove them outright.  I have already updated the trash task to take a size option.  As I was doing research into removal, it dawned on me that a remove tool would be a good alternative (See #30).  I can make this separate, but the functionality from remove would just get duplicated during the check.\n. exactly, what i was thinking.\n. This is a good excuse to learn FakeFs.\n. Sounds good.  Glad to help.  As far as the Array thing, ruby is not my defacto language.  I am a python/php developer by trade and only use ruby for Chef, so anytime there is a syntax/elegance question I'll default to you.\n. Whoops that merged in the remove tool.  I guess that is a necessary functionality for using the trash size option.\n. I know the feeling.  I work on CST time a lot, so late night coding sessions can be an interesting mix of fatigue and caffeine overload.\n\nAs far as your notes, I have no problem with using c-style operators and using remove_over.  It is just my brain on python.  I have no clue about a pure-ruby implementation of file size.  I am sure someone has tackled it, but that might mean another gem dependency.  It might also make sense to add a check for cmd to make sure the programs are actually installed.\n. I still want to rewrite the tests to use fakefs.\n. Awesome.  I know nothing about Fakefs, but from what I can tell it'll be very helpful.  I'll take a look in the AM. \n\nB/w I might use it on a capistrano project too.\n\nThanks!\n. @larrylv thanks for the info.  I merged in your changes to trash.\n\n@benjaminoakes sorry about the merge branch commit.  I thought I done the merge on my master.  anyway to cherry pick or should i revert?\n. Looking good.\n.  Ignore my previous comment.  It was pertaining to an earlier commit.  I'll implement the fakefs with the new trash size stuff.\n\n@benjaminoakes How soon will this be committed?\n. @larrylv thanks. fakefs is interesting.  I like the concept, but I am not sure about implementation.  Then again, they are trying to tackle a really big problem, so there are bound to be loose ends.\n\n@benjaminoakes no worries.  this helps me just as much as you.\n. It seems to be having issues with the lack of ./maid/maid.log file =)\n. Just cleared my log and ran the tests.  Populated the log with creation date info.\n. Figured out the issue.  The logger gets initiated when Maid does, so we either need to mock it earlier or change the log_device when making the deceleration.\n. Yeah, I have run into issues testing it on some chef stuff.  I think it might make sense to have some way to turn it off and/or trigger a do you want to create when maid clean is run.\n. I think that makes sense.  Maybe even allow folks to define logger options in the rules.rb file.\n. Read my mind.\n. Updated references as per issue #38\n. Learn something new everyday.  Thanks guys.\n\n@benjaminoakes Let me know what library you go with and I'll make the changes or you can.\n. No it was getting an error and failing.  All the tests pass, but the execution from the command line got it to complain.\n. How will these be distributed?\n. @benjaminoakes I'm a bit busy this week, but I'll try to devote some time this weekend to playing with maid.\n. I'm sorry @benjaminoakes I've been busier then I originally thought and now I'm in Nepal for two weeks.  I have a new computer to come back to.  AKA the perfect test machine =).\n. ",
    "yafp": "i would love to see ubuntu packages ...so +1\n\nwhy?\ncause at least for me apt is the way to update debian-based systems - i wasnt even used to ruby before ;)\n. Hi,\n\ni guess i just thought that the sample rules coming from using \"maid sample\" are expected to work on linux. Thanks for pointing me to the documentation - that answers the error ;)\n\nSuggestions:\n- on a short-time-view it might help to add comments to the example-rules generated using \"maid sample\" to point out which os/platform is supported.\n\ngreetings\n. Hi,\n\nthanks for considering the idea.\nLets hope it helps someone else who might try to get started with maid ;)\n. Regarding 'changed on occasion'\n/home/username/.local/share/Trash is valid here for the user-specific Trash on Ubuntu 12.04/Gnome3/Shell\n. @benjaminoakes:\ni did install trash-cli (Installed: 0.11.3~git20120324.fb57a8e-1) via apt for a first quick-test (without using maid) on my 12.04 ubuntu box. the trash-list commands outputs the content of my user trash correct. Trash-put seems to work as well as i expected - same goes for restore-trash and trash-empty. \n\nLooks interesting so far to me. \n\nanything in particular you would like to have tested with it\n. Ok.\n\nI created a file 'foo.txt' and executed the following command manually to simulate the bugfixed coming maid version (if i understood you correct)\n\n> mv foo.txt \"$HOME/.local/share/Trash\"\n\nAs a result the trashed file was not visible in my trash bin - but if i do change the command to:\n\n> mv foo.txt \"$HOME/.local/share/Trash/files\"\n\nI am able to see the trashed file in my nautilus trash. \n\nSeems like inside $HOME/.local/share/Trash is some kind of sub-folder-structure which i don't fully know/understand so far ...but 'files' seems to be the relevant subfolder for the deleted files.\n\nRestoring that file via nautilus itself using the 'restore selected items' button was not possible as it resulted in the following error:\n\n> Could not determine original location of 'foo.txt'.\n> The item cannot be restored from trash.\n\nwhile i was able to drag the file from nautilus -> trash folder as expected to whatever place i wanted to restore it like that.\n\ntrash-list does not list the mv'ed file either.\ni stopped that quick test at this point and did something else:\n1. created foo.txt again\n2. deleted foo.txt using the nautilus function\n3. checked content of \"$HOME/.local/share/Trash\"\n\nand it seems like the trash folder subfolders do work somehow like that:\n- expunged (not clear)\n- files (contains the actual deleted files and folders - if deleted using naultils move to trash function)\n- info (contains a .trashinfo file for each deleted file/folder which contains the original location and timestamp of the delete action.\n\nmy conclusion (without having tested it fully)\n- maid should move the files to \"$HOME/.local/share/Trash/files\" NOT to \"$HOME/.local/share/Trash\"\n- maid needs to create a .trashinfo file for each moved file/folder in \"$HOME/.local/share/Trash/info\" as i.e. trash-list seems to rely on it\n\ni guess it would make sense to double-check that and then maybe add a routine/function for the .trashinfo files in the info subfolder to be able to test further. any other ideas?\n\nall this was tested on Ubuntu 12.04 - havent considered anything mac-specific here.\n. @benjaminoakes:\nyep i fully understand your concerns. \n\nand please dont get me wrong - the above was just the result of my first tests / impressions.\n\nto point the .trashinfo out a bit more detailed:\nThere isnt 1 file which contains all-meta data - but there is a single .trashfile for each trashed file.\nand as trash-list cmd seems to rely on those files for listing you must somehow take care that those files do exist after maid moved something to trash. \n\nquestion will be: who's gonna create those files ;)\n\n..at least if my impression is right hehe\n. and yes - bundling trash-cli to maid might make sense ->as you might be able to use trash-put then instead of moving files.\n\nfiles deleted with trash-put are easily restoreable via nautilus.\n. basically its the same as the install instructions (as i found out 1 min to late hehe) - so pointing out just that part might be enough already\n. thumbs up\n. Havent tested it myself ... and is for sure just a random first hit of my search - but it looks promising:\n\nhttp://shairosenfeld.com/blog/index.php/2011/04/ruby-gems-and-man-pages/\n. @benjaminoakes:\ncall me in for the betas\n. just as additional idea regarding #3\n\nin case you'll ever consider using/setting up a ppa for ubuntu-users - it might even make sense to split it into 2 ppa's.\n- stable builds \n- unstable builds\n\nI know that approach from other projects (Clementine is a lovely example) - and it makes splitting up stable/unstable pretty easy from user point of view. But then again - ppa's are pretty ubuntu-specific.\n. sound like a great idea - that's 1 major option i was missing so far.\n. Hi,\n\ngeneral question: should we report back in this issue - or how's the plan? \n\nFirst impression so far:\n- upgrade worked\n- got notifications about the trash-migration while running --dry-run (which is good). Old .Trash was deleted as a result but in my case i had nothing to migrate in it - so i cant tell if that part would have worked.\n- got notification about last_accessed beeing deprecated while running ---dry-run (which is good). As a sidenote: \n  The documentation at ruby.doc.info still lists last_accessed not accessed_at.\n- i've added a new wiki-page for example rules as i think it might be a chance to start a bigger collection of working examples - from users for users. Useful idea or just not needed as maid comes with the 'sample' option?\n. i would love to see ubuntu packages ...so +1\n\nwhy?\ncause at least for me apt is the way to update debian-based systems - i wasnt even used to ruby before ;)\n. Hi,\n\ni guess i just thought that the sample rules coming from using \"maid sample\" are expected to work on linux. Thanks for pointing me to the documentation - that answers the error ;)\n\nSuggestions:\n- on a short-time-view it might help to add comments to the example-rules generated using \"maid sample\" to point out which os/platform is supported.\n\ngreetings\n. Hi,\n\nthanks for considering the idea.\nLets hope it helps someone else who might try to get started with maid ;)\n. Regarding 'changed on occasion'\n/home/username/.local/share/Trash is valid here for the user-specific Trash on Ubuntu 12.04/Gnome3/Shell\n. @benjaminoakes:\ni did install trash-cli (Installed: 0.11.3~git20120324.fb57a8e-1) via apt for a first quick-test (without using maid) on my 12.04 ubuntu box. the trash-list commands outputs the content of my user trash correct. Trash-put seems to work as well as i expected - same goes for restore-trash and trash-empty. \n\nLooks interesting so far to me. \n\nanything in particular you would like to have tested with it\n. Ok.\n\nI created a file 'foo.txt' and executed the following command manually to simulate the bugfixed coming maid version (if i understood you correct)\n\n> mv foo.txt \"$HOME/.local/share/Trash\"\n\nAs a result the trashed file was not visible in my trash bin - but if i do change the command to:\n\n> mv foo.txt \"$HOME/.local/share/Trash/files\"\n\nI am able to see the trashed file in my nautilus trash. \n\nSeems like inside $HOME/.local/share/Trash is some kind of sub-folder-structure which i don't fully know/understand so far ...but 'files' seems to be the relevant subfolder for the deleted files.\n\nRestoring that file via nautilus itself using the 'restore selected items' button was not possible as it resulted in the following error:\n\n> Could not determine original location of 'foo.txt'.\n> The item cannot be restored from trash.\n\nwhile i was able to drag the file from nautilus -> trash folder as expected to whatever place i wanted to restore it like that.\n\ntrash-list does not list the mv'ed file either.\ni stopped that quick test at this point and did something else:\n1. created foo.txt again\n2. deleted foo.txt using the nautilus function\n3. checked content of \"$HOME/.local/share/Trash\"\n\nand it seems like the trash folder subfolders do work somehow like that:\n- expunged (not clear)\n- files (contains the actual deleted files and folders - if deleted using naultils move to trash function)\n- info (contains a .trashinfo file for each deleted file/folder which contains the original location and timestamp of the delete action.\n\nmy conclusion (without having tested it fully)\n- maid should move the files to \"$HOME/.local/share/Trash/files\" NOT to \"$HOME/.local/share/Trash\"\n- maid needs to create a .trashinfo file for each moved file/folder in \"$HOME/.local/share/Trash/info\" as i.e. trash-list seems to rely on it\n\ni guess it would make sense to double-check that and then maybe add a routine/function for the .trashinfo files in the info subfolder to be able to test further. any other ideas?\n\nall this was tested on Ubuntu 12.04 - havent considered anything mac-specific here.\n. @benjaminoakes:\nyep i fully understand your concerns. \n\nand please dont get me wrong - the above was just the result of my first tests / impressions.\n\nto point the .trashinfo out a bit more detailed:\nThere isnt 1 file which contains all-meta data - but there is a single .trashfile for each trashed file.\nand as trash-list cmd seems to rely on those files for listing you must somehow take care that those files do exist after maid moved something to trash. \n\nquestion will be: who's gonna create those files ;)\n\n..at least if my impression is right hehe\n. and yes - bundling trash-cli to maid might make sense ->as you might be able to use trash-put then instead of moving files.\n\nfiles deleted with trash-put are easily restoreable via nautilus.\n. basically its the same as the install instructions (as i found out 1 min to late hehe) - so pointing out just that part might be enough already\n. thumbs up\n. Havent tested it myself ... and is for sure just a random first hit of my search - but it looks promising:\n\nhttp://shairosenfeld.com/blog/index.php/2011/04/ruby-gems-and-man-pages/\n. @benjaminoakes:\ncall me in for the betas\n. just as additional idea regarding #3\n\nin case you'll ever consider using/setting up a ppa for ubuntu-users - it might even make sense to split it into 2 ppa's.\n- stable builds \n- unstable builds\n\nI know that approach from other projects (Clementine is a lovely example) - and it makes splitting up stable/unstable pretty easy from user point of view. But then again - ppa's are pretty ubuntu-specific.\n. sound like a great idea - that's 1 major option i was missing so far.\n. Hi,\n\ngeneral question: should we report back in this issue - or how's the plan? \n\nFirst impression so far:\n- upgrade worked\n- got notifications about the trash-migration while running --dry-run (which is good). Old .Trash was deleted as a result but in my case i had nothing to migrate in it - so i cant tell if that part would have worked.\n- got notification about last_accessed beeing deprecated while running ---dry-run (which is good). As a sidenote: \n  The documentation at ruby.doc.info still lists last_accessed not accessed_at.\n- i've added a new wiki-page for example rules as i think it might be a chance to start a bigger collection of working examples - from users for users. Useful idea or just not needed as maid comes with the 'sample' option?\n. ",
    "arashbm": "+1\n. +1\n. ",
    "holocronweaver": "Assuming you want this application to enter mainstream usage on Linux, there needs to be an Ubuntu package.\n. Assuming you want this application to enter mainstream usage on Linux, there needs to be an Ubuntu package.\n. ",
    "Benjmin": "+1\n. +1\n. ",
    "jrgifford": "What is the status of this right now?\n. What is the status of this right now?\n. ",
    "Linux-cpp-lisp": "@benjaminoakes: I hope my answer can be of some help. I'd be interested to see this on Linux, as I use Linux for a lot of my stuff. And this looks nice. An automated Download killer would be awesome! \n. @benjaminoakes: Cool. I wonder if I could get it to work on Mint, considering that Mint is an Ubuntu derivative, and if there is any file manager integration, as long as it's done through GNOME APIs, not Nautilus ones, it should work. I'll try it when I have the time.\n\nThat's true. I think the main benefit of having a PPA and a .deb is the auto-updates, because gem doesn't do that. It can be a bit of a pain to have to do it separately.\n\nNote: I'm one of those package-management-till-the-end people. Ever since I saw `apt-get`, I can't live without it! \n. Oh yeah. +1\n. Cool! I'll take a look soon.\n\nOn Nov 26, 2012, at 4:20 PM, Ben Oakes notifications@github.com wrote:\n\n> @Linux-cpp-lisp Glad you like it.  \n> \n> Ubuntu-derived distributions like Mint should work, but I only really have the resources to support Ubuntu proper. Community support of other distros is welcome. If you'd like, you can document your experiences in the wiki.\n> \n> I can understand what you say about apt-get and definitely want oblige at some point. I got a little burned out on Ubuntu packaging earlier. Right now, I'm more likely to implement other new features.  \n> \n> If you want to experiment with making a package that can be accepted into a PPA, that would be very helpful! Please let me know if you'd like to coordinate. (I still have a PPA -- it just doesn't have any packages yet.)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Cool! For Ubuntu or maid?\n\nOn Sunday, December 16, 2012, shockme wrote:\n\n> I've been using Ubuntu full time on my work and home desktop since 2005,\n> so definitely a +1 from me.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/benjaminoakes/maid/issues/3#issuecomment-11423666.\n. @nurettin True, but you didn't take the auto updating of packages into consideration. Getting things updated automatically is a huge boon that RubyGems doesn't offer.\n. Good focus. For native software, a package is critical, but for Maid, it's only slightly necessary. \nOn Dec 31, 2012, at 8:13 AM, Ben Oakes wrote:\n\n> I agree with both points:\n> \n> Auto updating would be nice. It's too hard to know when new versions of Maid are available right now. (If there's a pure Ruby solution, that might be good too.)\n> A package might not be the most useful for RVM users, etc... but for someone who is new to Ruby, it's a much easier way to get started.\n> However, neither are critical right now. Like I've said before, my current focus is on new features and bugfixes. Contributions are always appreciated, though.  \n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. @benjaminoakes: I hope my answer can be of some help. I'd be interested to see this on Linux, as I use Linux for a lot of my stuff. And this looks nice. An automated Download killer would be awesome! \n. @benjaminoakes: Cool. I wonder if I could get it to work on Mint, considering that Mint is an Ubuntu derivative, and if there is any file manager integration, as long as it's done through GNOME APIs, not Nautilus ones, it should work. I'll try it when I have the time.\n\nThat's true. I think the main benefit of having a PPA and a .deb is the auto-updates, because gem doesn't do that. It can be a bit of a pain to have to do it separately.\n\nNote: I'm one of those package-management-till-the-end people. Ever since I saw `apt-get`, I can't live without it! \n. Oh yeah. +1\n. Cool! I'll take a look soon.\n\nOn Nov 26, 2012, at 4:20 PM, Ben Oakes notifications@github.com wrote:\n\n> @Linux-cpp-lisp Glad you like it.  \n> \n> Ubuntu-derived distributions like Mint should work, but I only really have the resources to support Ubuntu proper. Community support of other distros is welcome. If you'd like, you can document your experiences in the wiki.\n> \n> I can understand what you say about apt-get and definitely want oblige at some point. I got a little burned out on Ubuntu packaging earlier. Right now, I'm more likely to implement other new features.  \n> \n> If you want to experiment with making a package that can be accepted into a PPA, that would be very helpful! Please let me know if you'd like to coordinate. (I still have a PPA -- it just doesn't have any packages yet.)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Cool! For Ubuntu or maid?\n\nOn Sunday, December 16, 2012, shockme wrote:\n\n> I've been using Ubuntu full time on my work and home desktop since 2005,\n> so definitely a +1 from me.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/benjaminoakes/maid/issues/3#issuecomment-11423666.\n. @nurettin True, but you didn't take the auto updating of packages into consideration. Getting things updated automatically is a huge boon that RubyGems doesn't offer.\n. Good focus. For native software, a package is critical, but for Maid, it's only slightly necessary. \nOn Dec 31, 2012, at 8:13 AM, Ben Oakes wrote:\n\n> I agree with both points:\n> \n> Auto updating would be nice. It's too hard to know when new versions of Maid are available right now. (If there's a pure Ruby solution, that might be good too.)\n> A package might not be the most useful for RVM users, etc... but for someone who is new to Ruby, it's a much easier way to get started.\n> However, neither are critical right now. Like I've said before, my current focus is on new features and bugfixes. Contributions are always appreciated, though.  \n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "shockme": "I've been using Ubuntu full time on my work and home desktop since 2005, so definitely a +1 from me.\n. +1 for maid package for ubuntu :)\n. I've been using Ubuntu full time on my work and home desktop since 2005, so definitely a +1 from me.\n. +1 for maid package for ubuntu :)\n. ",
    "nurettin": "having an ubuntu package is good for popularization of ruby, so :+1: \nbut if I downloaded ruby via rvm or some other ruby management script, it is of no use so :-1: \nall in all it is a +0 :-)\n. @Linux-cpp-lisp you can keep gems updated with bundle update \n. having an ubuntu package is good for popularization of ruby, so :+1: \nbut if I downloaded ruby via rvm or some other ruby management script, it is of no use so :-1: \nall in all it is a +0 :-)\n. @Linux-cpp-lisp you can keep gems updated with bundle update \n. ",
    "wjbuys": "Vagrant recently [switched to native packages](http://mitchellh.com/abandoning-rubygems). It looks like @mitchellh is using [fpm](https://github.com/jordansissel/fpm) for packaging, which supports multiple platforms.\n. There's also the packaging system that Chef uses, [Omnibus](https://github.com/opscode/omnibus). Embeds everything similarly to Vagrant.\n. Vagrant recently [switched to native packages](http://mitchellh.com/abandoning-rubygems). It looks like @mitchellh is using [fpm](https://github.com/jordansissel/fpm) for packaging, which supports multiple platforms.\n. There's also the packaging system that Chef uses, [Omnibus](https://github.com/opscode/omnibus). Embeds everything similarly to Vagrant.\n. ",
    "exetico": "How is the status of the project with auto-updating ;-)?\n. @mhalano - Well, fair :-) I can understand that. I just saw the message from @Linux-cpp-lisp . Guess i was to snooze, then i post the question. Thanks for your anwser, anyways :-)\n. How is the status of the project with auto-updating ;-)?\n. @mhalano - Well, fair :-) I can understand that. I just saw the message from @Linux-cpp-lisp . Guess i was to snooze, then i post the question. Thanks for your anwser, anyways :-)\n. ",
    "mhalano": "@exetico I think this is not the place to do this question.\n. +1. I think this behavior is perfect. When this patch will be added to code and become a gem?\n. @exetico I think this is not the place to do this question.\n. +1. I think this behavior is perfect. When this patch will be added to code and become a gem?\n. ",
    "lisongx": "same here, I just installed maid 0.1.2\n. This is really convenient :)\n. same here, I just installed maid 0.1.2\n. This is really convenient :)\n. ",
    "regnerjr": "The above link is broken.\nThe referenced post now lives here:\nhttp://shairosenfeld.blogspot.com/2011/04/ruby-gems-and-man-pages.html\n. The above link is broken.\nThe referenced post now lives here:\nhttp://shairosenfeld.blogspot.com/2011/04/ruby-gems-and-man-pages.html\n. ",
    "gsiener": "I'm interested too!\n. What if you started by identifying files w/ similar names? e.g., Movie Download.avi, Movie Download (1).avi\n. You can delete individual items from the trash in OSX -- it's just a hidden directory ~/.Trash.  Not sure what it's like on the linux side.\n. Happy to help write tests and fix this.  \n. I just took at look at this bug and can't write a failing test for it.  How do you feel about not using FakeFS but rather hitting the actual filestore to create an archive and then unzip?\n. Ah, good points.  Cool.\n. Sorry to go silent on this one.  I couldn't get any of the popular archive gems to act consistently between console and rspec.  Didn't have time to investigate beyond my initial few hours, but parked my WIP in the commit above.\n. I will take another swing at it this weekend.\n\nOn Friday, January 18, 2013 at 11:13 AM, Ben Oakes wrote:\n\n> No worries, the effort is appreciated! Do you think you'll have time to come back to this later, or should someone else take this on?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/benjaminoakes/maid/issues/35#issuecomment-12428819).  \n. Unfortunately rubyzip doesn't give us nested folder paths, but otherwise this should solve any utf8 issues.\n. Sounds like they're only rolling this feature out to people that have donated: http://about.travis-ci.org/blog/announcing-pull-request-support/\n. Much simpler, thanks!  Sorry this took so long, finally got enough time to think it through...\n. I'm interested too!\n. What if you started by identifying files w/ similar names? e.g., Movie Download.avi, Movie Download (1).avi\n. You can delete individual items from the trash in OSX -- it's just a hidden directory ~/.Trash.  Not sure what it's like on the linux side.\n. Happy to help write tests and fix this.  \n. I just took at look at this bug and can't write a failing test for it.  How do you feel about not using FakeFS but rather hitting the actual filestore to create an archive and then unzip?\n. Ah, good points.  Cool.\n. Sorry to go silent on this one.  I couldn't get any of the popular archive gems to act consistently between console and rspec.  Didn't have time to investigate beyond my initial few hours, but parked my WIP in the commit above.\n. I will take another swing at it this weekend.\n\nOn Friday, January 18, 2013 at 11:13 AM, Ben Oakes wrote:\n\n> No worries, the effort is appreciated! Do you think you'll have time to come back to this later, or should someone else take this on?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub (https://github.com/benjaminoakes/maid/issues/35#issuecomment-12428819).  \n. Unfortunately rubyzip doesn't give us nested folder paths, but otherwise this should solve any utf8 issues.\n. Sounds like they're only rolling this feature out to people that have donated: http://about.travis-ci.org/blog/announcing-pull-request-support/\n. Much simpler, thanks!  Sorry this took so long, finally got enough time to think it through...\n. ",
    "ge": "I would like to test it, too!\n\nThanks,\nge\nOn Dec 16, 2012 1:33 PM, \"Graham Siener\" notifications@github.com wrote:\n\n> I'm interested too!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/benjaminoakes/maid/issues/10#issuecomment-11420943.\n. I would like to test it, too!\n\nThanks,\nge\nOn Dec 16, 2012 1:33 PM, \"Graham Siener\" notifications@github.com wrote:\n\n> I'm interested too!\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/benjaminoakes/maid/issues/10#issuecomment-11420943.\n. ",
    "jprice": "sign me up\n. sign me up\n. ",
    "asmallteapot": ":+1:\n. :+1:\n. ",
    "nicosuave": "Yup, I just got started with all that. I spent some of the afternoon wiping RVM in favor of rbenv so I will get some ruby 2.0 goodness up and running as well. I'm loving rbenv (after recently nearly committing RVM suicide).\n. I have some time to do some Maid testing this weekend :) I may actually put it to use quite frequently, as I'm considering an iPad mini + issh + mosh + linode, a la http://yieldthought.com/post/31857050698/ipad-linode-1-year-later\n. I've honestly been meaning to install Hazel on my mac to manage downloads anyways. Maid it is!\n. I am working on this :)\n. I've been working on this in a branch `feature/copy` in my fork. See https://github.com/nicoritschel/maid/tree/feature/copy\n. I'm on it. Expect something by the end of the weekend\n. Hmm I can't seem to figure out how to run the gem with verbose mode enabled (where can I signify `ruby -w`?). \n\nI would appreciate any pointers. Thanks :smile:\n. Ah, thanks for the clarification\n\nOf course, thanks for helping me help you :)\n. Yup, I just got started with all that. I spent some of the afternoon wiping RVM in favor of rbenv so I will get some ruby 2.0 goodness up and running as well. I'm loving rbenv (after recently nearly committing RVM suicide).\n. I have some time to do some Maid testing this weekend :) I may actually put it to use quite frequently, as I'm considering an iPad mini + issh + mosh + linode, a la http://yieldthought.com/post/31857050698/ipad-linode-1-year-later\n. I've honestly been meaning to install Hazel on my mac to manage downloads anyways. Maid it is!\n. I am working on this :)\n. I've been working on this in a branch `feature/copy` in my fork. See https://github.com/nicoritschel/maid/tree/feature/copy\n. I'm on it. Expect something by the end of the weekend\n. Hmm I can't seem to figure out how to run the gem with verbose mode enabled (where can I signify `ruby -w`?). \n\nI would appreciate any pointers. Thanks :smile:\n. Ah, thanks for the clarification\n\nOf course, thanks for helping me help you :)\n. ",
    "MacDude": "RIght, a spotlight call would likely be the way to go. The format of the returned value may vary quite a bit from one attribute type to another, that's why I grouped the date strings. \n. RIght, a spotlight call would likely be the way to go. The format of the returned value may vary quite a bit from one attribute type to another, that's why I grouped the date strings. \n. ",
    "bobthecow": "@benjaminoakes [How about something like this?](https://gist.github.com/4321983#file-rules-rb-L7-L32)\n\n(I can submit a pull request with the DSL additions if you'd like)\n. Oh, hey. I just noticed your gist comment :)\n\nI'd be happy to submit a pull request. What do you think of the DSL additions (`files`, `size_of`, `checksum_for` and `dupes_in`)?\n. It would be nice to be able to memoize `checksum_for`, but since rules have the ability to change the state of files while evaluating, that would be next to impossible to invalidate properly.\n. You could make it even more expressive with a few additions:\n\n``` rb\nMaid.rules do\n  def all_but_the_oldest(paths)\n    files(paths).sort_by { |f| File.mtime(f) }[1..-1]\n  end\n\n  def all_but_the_newest(paths)\n    file(paths).sort_by { |f| File.mtime(f) }[0..-2]\n  end\n\n  def all_but_the_longest(paths)\n    file(paths).sort_by { |f| File.basename(f).length }[0..-2]\n  end\n\n  def all_but_the_shortest(paths)\n    file(paths).sort_by { |f| File.basename(f).length }[1..-1]\n  end\n\n  rule 'Trash duplicate downloads' do\n    dupes_in('~/Downloads/*').each do |dupes|\n      # Keep the dupe with the shortest filename\n      trash all_but_the_shortest dupes\n\n      # You could also keep the oldest:\n      trash all_but_the_oldest dupes\n    end\n  end\nend\n```\n. @benjaminoakes Sorry I dropped the ball here. I went trekking over the holidays and just got back.\n\nWhat do you need from me? Should I submit a pull request with only `files` and `dupes_in`?\n. Adding groups would help with this as well:\n\n```\nmaid clean -n --group downloads\n```\n\n``` rb\ngroup :downloads do\n  rule 'Trash duplicate downloads' do\n    dupes_in('~/Downloads/*').each do |dupes|\n      trash dupes.sort_by { |p| File.basename(p).length }[1..-1]\n    end\n  end\n\n  rule 'Trash old files downloaded while developing/testing' do\n    files('~/Downloads/*').each do |path|\n      if downloaded_from(path).any? { |u| u.match %r{//(localhost|[^\\.]+\\.dev)} } and 1.week.since? accessed_at path\n        trash path\n      end\n    end\n  end\n\n  rule 'Trash zips and tarballs downloaded from GitHub' do\n    dir('~/Downloads/*.{zip,tgz,gz,rar,tar}').each do |path|\n      if downloaded_from(path).any? { |u| u.match %r{//([^\\/]+\\.)?github\\.com\\/} }\n        trash path\n      end\n    end\n  end\nend\n```\n. You're prolly looking for the `**` glob operator:\n\n```\ndir('~/Music/**/*.m4a')\n```\n. No problem :)\n. Oop. Sorry, I forgot to test it in 1.8.x :(\n\nOn Sunday, January 13, 2013, Ben Oakes wrote:\n\n> Looks like this has a problem on Ruby 1.8.7:\n> https://travis-ci.org/benjaminoakes/maid/jobs/4132895\n> \n> Just syntax, I would guess.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/benjaminoakes/maid/pull/92#issuecomment-12205358.\n\n## \n\nhttp://justinhileman.com\n. @benjaminoakes [How about something like this?](https://gist.github.com/4321983#file-rules-rb-L7-L32)\n\n(I can submit a pull request with the DSL additions if you'd like)\n. Oh, hey. I just noticed your gist comment :)\n\nI'd be happy to submit a pull request. What do you think of the DSL additions (`files`, `size_of`, `checksum_for` and `dupes_in`)?\n. It would be nice to be able to memoize `checksum_for`, but since rules have the ability to change the state of files while evaluating, that would be next to impossible to invalidate properly.\n. You could make it even more expressive with a few additions:\n\n``` rb\nMaid.rules do\n  def all_but_the_oldest(paths)\n    files(paths).sort_by { |f| File.mtime(f) }[1..-1]\n  end\n\n  def all_but_the_newest(paths)\n    file(paths).sort_by { |f| File.mtime(f) }[0..-2]\n  end\n\n  def all_but_the_longest(paths)\n    file(paths).sort_by { |f| File.basename(f).length }[0..-2]\n  end\n\n  def all_but_the_shortest(paths)\n    file(paths).sort_by { |f| File.basename(f).length }[1..-1]\n  end\n\n  rule 'Trash duplicate downloads' do\n    dupes_in('~/Downloads/*').each do |dupes|\n      # Keep the dupe with the shortest filename\n      trash all_but_the_shortest dupes\n\n      # You could also keep the oldest:\n      trash all_but_the_oldest dupes\n    end\n  end\nend\n```\n. @benjaminoakes Sorry I dropped the ball here. I went trekking over the holidays and just got back.\n\nWhat do you need from me? Should I submit a pull request with only `files` and `dupes_in`?\n. Adding groups would help with this as well:\n\n```\nmaid clean -n --group downloads\n```\n\n``` rb\ngroup :downloads do\n  rule 'Trash duplicate downloads' do\n    dupes_in('~/Downloads/*').each do |dupes|\n      trash dupes.sort_by { |p| File.basename(p).length }[1..-1]\n    end\n  end\n\n  rule 'Trash old files downloaded while developing/testing' do\n    files('~/Downloads/*').each do |path|\n      if downloaded_from(path).any? { |u| u.match %r{//(localhost|[^\\.]+\\.dev)} } and 1.week.since? accessed_at path\n        trash path\n      end\n    end\n  end\n\n  rule 'Trash zips and tarballs downloaded from GitHub' do\n    dir('~/Downloads/*.{zip,tgz,gz,rar,tar}').each do |path|\n      if downloaded_from(path).any? { |u| u.match %r{//([^\\/]+\\.)?github\\.com\\/} }\n        trash path\n      end\n    end\n  end\nend\n```\n. You're prolly looking for the `**` glob operator:\n\n```\ndir('~/Music/**/*.m4a')\n```\n. No problem :)\n. Oop. Sorry, I forgot to test it in 1.8.x :(\n\nOn Sunday, January 13, 2013, Ben Oakes wrote:\n\n> Looks like this has a problem on Ruby 1.8.7:\n> https://travis-ci.org/benjaminoakes/maid/jobs/4132895\n> \n> Just syntax, I would guess.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/benjaminoakes/maid/pull/92#issuecomment-12205358.\n\n## \n\nhttp://justinhileman.com\n. ",
    "larrylv": "@phoolish I write some tests to use fakefs. Maybe you could check #40 for something u need. :)\n. @phoolish To put it simply, `FakeFS` just rewrite the interfaces of `File`, `Dir`, `FileUtils` etc. So when u use their methods in the context of RSpec, u r actually using `FakeFS::File`, `FakeFS::Dir`, `FakeFS::FileUtils`.\n\nU can check `FakeFS` documentation here http://www.ruby-doc.org/gems/docs/f/fakefs-0.4.0/FakeFS.html, the docs on GitHub page is down. \n\nHope this will help. :)\n. @phoolish Maybe u can use `rebase`, then `push -f`.\n. @benjaminoakes Ok, I will continue to work on it, and some other issues. \n. Cool. :)\n. @benjaminoakes ok, I update the PR, and keep `:fakefs => true` option.\n. @phoolish Oops, GitHub remove the space between url and :) when replying by email.\nhttps://github.com/defunkt/fakefs/blob/master/lib/fakefs/spec_helpers.rb#L42\nCheck this one. :)\n. Cool.\n. @phoolish Cool! When I got home about 11:30 pm, I decided to work on these issues. After taking a bath, replying emails, reading some tweets, and... U've already done all that. Haha. :)\n. @benjaminoakes :smile: \n. @benjaminoakes Oops, sorry for that stupid mistake. Updated the code and spec.\n\n> It might be a couple days until this gets merged; I have a busy weekend planned. \n\nThat's all right, man. :smile:\n. @benjaminoakes I've been busy for almost a month, I hate working overtime!!! And, i'm same with @phoolish , will do sth with maid this weekend. :-)\n. @phoolish I write some tests to use fakefs. Maybe you could check #40 for something u need. :)\n. @phoolish To put it simply, `FakeFS` just rewrite the interfaces of `File`, `Dir`, `FileUtils` etc. So when u use their methods in the context of RSpec, u r actually using `FakeFS::File`, `FakeFS::Dir`, `FakeFS::FileUtils`.\n\nU can check `FakeFS` documentation here http://www.ruby-doc.org/gems/docs/f/fakefs-0.4.0/FakeFS.html, the docs on GitHub page is down. \n\nHope this will help. :)\n. @phoolish Maybe u can use `rebase`, then `push -f`.\n. @benjaminoakes Ok, I will continue to work on it, and some other issues. \n. Cool. :)\n. @benjaminoakes ok, I update the PR, and keep `:fakefs => true` option.\n. @phoolish Oops, GitHub remove the space between url and :) when replying by email.\nhttps://github.com/defunkt/fakefs/blob/master/lib/fakefs/spec_helpers.rb#L42\nCheck this one. :)\n. Cool.\n. @phoolish Cool! When I got home about 11:30 pm, I decided to work on these issues. After taking a bath, replying emails, reading some tweets, and... U've already done all that. Haha. :)\n. @benjaminoakes :smile: \n. @benjaminoakes Oops, sorry for that stupid mistake. Updated the code and spec.\n\n> It might be a couple days until this gets merged; I have a busy weekend planned. \n\nThat's all right, man. :smile:\n. @benjaminoakes I've been busy for almost a month, I hate working overtime!!! And, i'm same with @phoolish , will do sth with maid this weekend. :-)\n. ",
    "derekbrokeit": "maid was installed with `ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin12]`, and yes, this is the MacPorts version of Ruby1.9.\n\nI also tried 1.8.7 earlier. I simply made a small zip file with the name `\u3055.zip` (running: `zip \u3055.zip anything.txt`) and the following error is output with ruby 1.8.7\n\n```\nzipinfo:  cannot find or open /Users/derekt/Downloads/\\343\\201\\225.zip, /Users/derekt/Downloads/\\343\\201\\225.zip.zip or /Users/derekt/Downloads/\\343\\201\\225.zip.ZIP.\n```\n\nI am not sure of any easily available sources for such a file. How might I be able to get you a copy if you need one.\n. maid was installed with `ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin12]`, and yes, this is the MacPorts version of Ruby1.9.\n\nI also tried 1.8.7 earlier. I simply made a small zip file with the name `\u3055.zip` (running: `zip \u3055.zip anything.txt`) and the following error is output with ruby 1.8.7\n\n```\nzipinfo:  cannot find or open /Users/derekt/Downloads/\\343\\201\\225.zip, /Users/derekt/Downloads/\\343\\201\\225.zip.zip or /Users/derekt/Downloads/\\343\\201\\225.zip.ZIP.\n```\n\nI am not sure of any easily available sources for such a file. How might I be able to get you a copy if you need one.\n. ",
    "JohnColvin": "I just submitted a pull request that allows for content_type detection via spotlight metdata. So, if you're using OS X, this should allow you to target videos. https://github.com/benjaminoakes/maid/pull/88\n. I'd be happy to use mimetypes, but I'm not sure how to pull that information. If someone can point me in the right direction, I can give it a shot.\n. WIth the file command, we can get the mimetype. For example `file -b --mime-type example.jpg` returns `image/jpeg`.\n\nI'd be happy to write a mimetype method and maybe a method that just returns the media_type. So, we can target image, video or other media types.\n\nI think the spotlight content_types method could still provide value to OS X users, though. The mimetype of a zip is `application/zip`, which is not as helpful for targeting general types as `public.archive` provided by spotlight.\n\nThere may be way to get a tree of types on Linux, but I don't know how.\n. Generalized spotlight functionality would be great. I'm not going to focus on that at the moment, though.\n\nI think using the `mime-types` gem is a good idea. I wasn't sure if you wanted to get in to gem dependencies.\n\nI'm working right now on a method, similar to the one you mentioned above, that would allow you to filter a directory based on mime-type, media-type and/or spotlight content types. To be able to make it \"just work\" maid is going to need to be aware if it's running on OS X. Any thoughts on how you would prefer to do that detection (or if you don't want to do that)?\n. Another pull request. This one implements the functionality at the top of this issue (with some tweaks). https://github.com/benjaminoakes/maid/pull/89\n\nI put in an OS X check by seeing if the system has `mdls`\n. Oh, I forgot. That pull request is using a system call to find the mime type. It should be pretty trivial to switch the implementation of mime_type and media_type to use that gem, though.\n. I'd be happy to. It might have to wait until after the holiday, though.\n. Going to close this and open one with mime_type changes.\n. Yeah. I'll look into it. I'm planning to write specs for all the content type functionality that I've added. I just have to find the time to do it...\n. I just submitted a pull request that allows for content_type detection via spotlight metdata. So, if you're using OS X, this should allow you to target videos. https://github.com/benjaminoakes/maid/pull/88\n. I'd be happy to use mimetypes, but I'm not sure how to pull that information. If someone can point me in the right direction, I can give it a shot.\n. WIth the file command, we can get the mimetype. For example `file -b --mime-type example.jpg` returns `image/jpeg`.\n\nI'd be happy to write a mimetype method and maybe a method that just returns the media_type. So, we can target image, video or other media types.\n\nI think the spotlight content_types method could still provide value to OS X users, though. The mimetype of a zip is `application/zip`, which is not as helpful for targeting general types as `public.archive` provided by spotlight.\n\nThere may be way to get a tree of types on Linux, but I don't know how.\n. Generalized spotlight functionality would be great. I'm not going to focus on that at the moment, though.\n\nI think using the `mime-types` gem is a good idea. I wasn't sure if you wanted to get in to gem dependencies.\n\nI'm working right now on a method, similar to the one you mentioned above, that would allow you to filter a directory based on mime-type, media-type and/or spotlight content types. To be able to make it \"just work\" maid is going to need to be aware if it's running on OS X. Any thoughts on how you would prefer to do that detection (or if you don't want to do that)?\n. Another pull request. This one implements the functionality at the top of this issue (with some tweaks). https://github.com/benjaminoakes/maid/pull/89\n\nI put in an OS X check by seeing if the system has `mdls`\n. Oh, I forgot. That pull request is using a system call to find the mime type. It should be pretty trivial to switch the implementation of mime_type and media_type to use that gem, though.\n. I'd be happy to. It might have to wait until after the holiday, though.\n. Going to close this and open one with mime_type changes.\n. Yeah. I'll look into it. I'm planning to write specs for all the content type functionality that I've added. I just have to find the time to do it...\n. ",
    "bradleyd": "I think the problem with using locate is that one would have to make sure `updatedb` is fresh.  Typically, on modern Ubuntu systems, \n\n``` bash\n/usr/bin/updatedb.mlocate\n```\n\nis executed on a daily cron.  Would this be 'up to date' enough? \n\n``` bash\n  find / -type f -name foo.zip\n```\n\nwould require more time, but would always have up to date results.  \n\nWhat are your thoughts?\n\ntake care\nBrad\n. Ben,\nMy full name is Bradley Smith\n\nThanks again,\nBrad\n. I think the problem with using locate is that one would have to make sure `updatedb` is fresh.  Typically, on modern Ubuntu systems, \n\n``` bash\n/usr/bin/updatedb.mlocate\n```\n\nis executed on a daily cron.  Would this be 'up to date' enough? \n\n``` bash\n  find / -type f -name foo.zip\n```\n\nwould require more time, but would always have up to date results.  \n\nWhat are your thoughts?\n\ntake care\nBrad\n. Ben,\nMy full name is Bradley Smith\n\nThanks again,\nBrad\n. ",
    "p-lambert": "I would like to try this one, if it\u2019s possible. I was just wondering if you have any ideas of how you would approach to this. I mean, not the task definition API itself, which was made clear in your example, but how to execute those instructions. \n\nMy idea was to instantiate a `Maid`, wrap those instructions in a rule, and then call `#clean` on that instance. That way it wouldn\u2019t change anything in the execution flow of a task (logging it properly etc.).\n\nWhat do you think about that? Thanks!\n. I would like to try this one, if it\u2019s possible. I was just wondering if you have any ideas of how you would approach to this. I mean, not the task definition API itself, which was made clear in your example, but how to execute those instructions. \n\nMy idea was to instantiate a `Maid`, wrap those instructions in a rule, and then call `#clean` on that instance. That way it wouldn\u2019t change anything in the execution flow of a task (logging it properly etc.).\n\nWhat do you think about that? Thanks!\n. ",
    "judofyr": "You have a pretty bad exploit now due to not using Shellwords. A HTTP server can serve a file with a filename like:\n\n```\n`rm -rf /`\n```\n\nMany browsers auto-download these days, and Maid will happily execute the command because String#inspect doesn't escape it properly.\n. You have a pretty bad exploit now due to not using Shellwords. A HTTP server can serve a file with a filename like:\n\n```\n`rm -rf /`\n```\n\nMany browsers auto-download these days, and Maid will happily execute the command because String#inspect doesn't escape it properly.\n. ",
    "markjaquith": "Isn't this effectively covered by `.sync()`? What use cases of `.copy()` couldn't be handled by `.sync()`?\n. Aha! Thought this was odd, as a lot of Rails code examples I found were using `months` and `years`. Turns out they moved those two into a different location: rails/rails@d599b8000968047b4095dd8ff6c8ef10bb4ed462\n\nThey didn't want people calling `months` or `years` on floats \u2014 just integers.\n. Opened a ticket for that preferred path forward: #81.\n. Isn't this effectively covered by `.sync()`? What use cases of `.copy()` couldn't be handled by `.sync()`?\n. Aha! Thought this was odd, as a lot of Rails code examples I found were using `months` and `years`. Turns out they moved those two into a different location: rails/rails@d599b8000968047b4095dd8ff6c8ef10bb4ed462\n\nThey didn't want people calling `months` or `years` on floats \u2014 just integers.\n. Opened a ticket for that preferred path forward: #81.\n. ",
    "jesiegel1": "*I meant to say I'll create a pull request.\n. *I meant to say I'll create a pull request.\n. ",
    "choupachupss": "The solution is :  \n\n``` ruby\nrule 'facebookPhoto' do\n    dir('~/Downloads/*.jpg').each do |path|\n    find(path){ |path| /[a-zA-Z]*/}   \n     move(path, '~/Images/')\n    end\n   end\n```\n\ncan we move this tips in the sample ?\n\nand\nthe documentation is : \n find(path, &block) \nthis function require more explanation or a sample of use with 'block'\n\nBest regards\n. The solution is :  \n\n``` ruby\nrule 'facebookPhoto' do\n    dir('~/Downloads/*.jpg').each do |path|\n    find(path){ |path| /[a-zA-Z]*/}   \n     move(path, '~/Images/')\n    end\n   end\n```\n\ncan we move this tips in the sample ?\n\nand\nthe documentation is : \n find(path, &block) \nthis function require more explanation or a sample of use with 'block'\n\nBest regards\n. ",
    "esurharun": "``` bash\nMarcuss-iMac:~ marcus$ gem --version\n1.3.6\n```\n. So it seems there are maid (0.1.3, 0.1.2, 0.1.1, 0.1.0) versions available through RubyGem. \n\nAre you planning to post 0.2.0b to repository?\n. ``` bash\nMarcuss-iMac:~ marcus$ gem --version\n1.3.6\n```\n. So it seems there are maid (0.1.3, 0.1.2, 0.1.1, 0.1.0) versions available through RubyGem. \n\nAre you planning to post 0.2.0b to repository?\n. ",
    "myfreeweb": "You're free to make pull requests to filesortd :-)\n. You're free to make pull requests to filesortd :-)\n. ",
    "yemutex": "Hi Ben,\n\nThanks for the suggestions, I'll read through those issues and see if I can start there.\n\nOne question though, you said\n\n> Basically, the spec should fail if the `say` lines in `version` are removed.\n\nIf the test is for checking the mapping between `version` and `--version`, I thought the spec should fail if the [`map` line](https://github.com/benjaminoakes/maid/blob/master/lib/maid/app.rb#L44) is removed?\n\nMu\n. Oops sorry I just realized I shouldn't have\n\n```\nif options.execute?\n  maid.load_rules\n  maid.clean\nend\n```\n\nThose two methods should also be invoked when `--noop` is passed in.\n\nWhile trying to fix this, it seems that in `Maid#clean`, `follow_rules` is always invoked regardless of whether `--noop` is specified. What am I missing here?\n\nMu\n. Hi Ben,\n\nThanks for the suggestions, I'll read through those issues and see if I can start there.\n\nOne question though, you said\n\n> Basically, the spec should fail if the `say` lines in `version` are removed.\n\nIf the test is for checking the mapping between `version` and `--version`, I thought the spec should fail if the [`map` line](https://github.com/benjaminoakes/maid/blob/master/lib/maid/app.rb#L44) is removed?\n\nMu\n. Oops sorry I just realized I shouldn't have\n\n```\nif options.execute?\n  maid.load_rules\n  maid.clean\nend\n```\n\nThose two methods should also be invoked when `--noop` is passed in.\n\nWhile trying to fix this, it seems that in `Maid#clean`, `follow_rules` is always invoked regardless of whether `--noop` is specified. What am I missing here?\n\nMu\n. ",
    "ghost": "Thank you Ben. That was very helpful.\nThe  ~/.maid/maid.log got updated only when running from the shell. Maid was not run from cron. \nSo had no error messages there.\n\nDid the cronjob logging you suggested and found out that: Command 'maid' is available in '/usr/local/bin/maid' \nand that was not in PATH. So you were right !\n\nI simply changed the crontab line to the following and it started running perfectly:\n\n*/1 \\* \\* \\* \\* /bin/bash -li -c \"/usr/local/bin/maid clean --silent\"\n\nI am just switching to Linux so seems I have  a lot to learn. (That is why I am replicating Hazel functionality with Maid)\n\nThank you !\n. You were right again. It is a bit confusing to me where to set up enviroment variables. Even after reading:\nhttps://help.ubuntu.com/community/EnvironmentVariables\n\nThe PATH variable was set globally but not in .bashrc. I just added it there and now works with the tutorial crontab line as is. \n\nEven Ubuntu's documentation is not very clear for me. For local or per-user settings:\n\nA previous version of the Ubuntu page recommended ~/.pam_environment , but the page currently suggests that if that doesn't work, you should use\n\n~/.profile - This is probably the best file for placing environment variable assignments in, since it gets executed automatically by the DisplayManager during the startup process desktop session as well as by the login shell when one logs-in from the textual console.\n\n~/.bash_profile or ~./bash_login - If one of these exists, bash executes it instead of \"~/.profile\" when bash is started as a login shell. Bash will prefer ~/.bash_profile to ~/.bash_login. [...] These files won't influence a graphical session by default.\"\n\n~/.bashrc - \"... may be the easiest place to set variables\".\n\nThanks again for all the help !\nMaid works perfectly for me.\n. Thank you Ben. That was very helpful.\nThe  ~/.maid/maid.log got updated only when running from the shell. Maid was not run from cron. \nSo had no error messages there.\n\nDid the cronjob logging you suggested and found out that: Command 'maid' is available in '/usr/local/bin/maid' \nand that was not in PATH. So you were right !\n\nI simply changed the crontab line to the following and it started running perfectly:\n\n*/1 \\* \\* \\* \\* /bin/bash -li -c \"/usr/local/bin/maid clean --silent\"\n\nI am just switching to Linux so seems I have  a lot to learn. (That is why I am replicating Hazel functionality with Maid)\n\nThank you !\n. You were right again. It is a bit confusing to me where to set up enviroment variables. Even after reading:\nhttps://help.ubuntu.com/community/EnvironmentVariables\n\nThe PATH variable was set globally but not in .bashrc. I just added it there and now works with the tutorial crontab line as is. \n\nEven Ubuntu's documentation is not very clear for me. For local or per-user settings:\n\nA previous version of the Ubuntu page recommended ~/.pam_environment , but the page currently suggests that if that doesn't work, you should use\n\n~/.profile - This is probably the best file for placing environment variable assignments in, since it gets executed automatically by the DisplayManager during the startup process desktop session as well as by the login shell when one logs-in from the textual console.\n\n~/.bash_profile or ~./bash_login - If one of these exists, bash executes it instead of \"~/.profile\" when bash is started as a login shell. Bash will prefer ~/.bash_profile to ~/.bash_login. [...] These files won't influence a graphical session by default.\"\n\n~/.bashrc - \"... may be the easiest place to set variables\".\n\nThanks again for all the help !\nMaid works perfectly for me.\n. ",
    "jurriaan": "What do you think of my current solution: https://github.com/jurriaan/maid/tree/watch-repeat.\n\nThis does support the older 'one-shot' clean runs and a daemon run which uses rufus-scheduler/listen\n. Thats ok! It's just really a work in progress, for example, I need to think of a way to differentiate between the different file system events. Some file system changes will emit more than one event.\nAlso, need to think of a way too test this. Looking forward to your opinion :)\n. @benjaminoakes Sorry for the late response. Added a simple README section and rebased:\n\n### Running as a daemon\n\nTo run Maid as a daemon you first have to specify watch/repeat rules.\n\nThey are defined like this:\n\n``` ruby\nrepeat '1s' do\n  rule 'This rule will run every second' do\n    # some task\n  end\nend\n\nwatch '/home/user/Downloads' do\n  rule 'This rule will run on every change to the downloads directory' do\n    # another task\n  end\nend\n```\n\nTo run the daemon run `maid daemon`\n. You should be able to do this:\n\n``` ruby\nrule 'Some rule' do |modified, added, removed|\n\nend\n```\n\nwhere modified, added and removed are arrays of filenames.\n. @mhalano It was released a few days ago as v0.6.0\n. Nice!\n. @benjaminoakes I'm a bit busy at the moment, but for OS X you can just create a launchctl daemon and place it in ~/Library/LaunchAgents, maybe we can provide a plist file that users can put in their LaunchAgents folder? I'm not sure how we make sure that it loads everything using the correct ruby version, you want it to run using your login shell I think. \n\nI haven't used Ubuntu in a while, it depends on which Desktop Environment you're running of course, but it can be as simple as putting something in your xinitrc file..\n. Hmm, I broke a few things with this change.. Seems like Maid::Tools somehow isn't available in the watch/repeat blocks.\n. @benjaminoakes I've written a small article about starting maid on login on OS X: http://jurriaan.ninja/2015/01/01/maid-on-os-x.html\n. Basically the problem here was that the rules were ran within the Watch/Repeat instance scope. So they had no way to access the utility functions. As the utility functions use some facilities from the Maid class, the best way to fix this was to run the rules with instance_exec on the Maid instance.\n. What do you think of my current solution: https://github.com/jurriaan/maid/tree/watch-repeat.\n\nThis does support the older 'one-shot' clean runs and a daemon run which uses rufus-scheduler/listen\n. Thats ok! It's just really a work in progress, for example, I need to think of a way to differentiate between the different file system events. Some file system changes will emit more than one event.\nAlso, need to think of a way too test this. Looking forward to your opinion :)\n. @benjaminoakes Sorry for the late response. Added a simple README section and rebased:\n\n### Running as a daemon\n\nTo run Maid as a daemon you first have to specify watch/repeat rules.\n\nThey are defined like this:\n\n``` ruby\nrepeat '1s' do\n  rule 'This rule will run every second' do\n    # some task\n  end\nend\n\nwatch '/home/user/Downloads' do\n  rule 'This rule will run on every change to the downloads directory' do\n    # another task\n  end\nend\n```\n\nTo run the daemon run `maid daemon`\n. You should be able to do this:\n\n``` ruby\nrule 'Some rule' do |modified, added, removed|\n\nend\n```\n\nwhere modified, added and removed are arrays of filenames.\n. @mhalano It was released a few days ago as v0.6.0\n. Nice!\n. @benjaminoakes I'm a bit busy at the moment, but for OS X you can just create a launchctl daemon and place it in ~/Library/LaunchAgents, maybe we can provide a plist file that users can put in their LaunchAgents folder? I'm not sure how we make sure that it loads everything using the correct ruby version, you want it to run using your login shell I think. \n\nI haven't used Ubuntu in a while, it depends on which Desktop Environment you're running of course, but it can be as simple as putting something in your xinitrc file..\n. Hmm, I broke a few things with this change.. Seems like Maid::Tools somehow isn't available in the watch/repeat blocks.\n. @benjaminoakes I've written a small article about starting maid on login on OS X: http://jurriaan.ninja/2015/01/01/maid-on-os-x.html\n. Basically the problem here was that the rules were ran within the Watch/Repeat instance scope. So they had no way to access the utility functions. As the utility functions use some facilities from the Maid class, the best way to fix this was to run the rules with instance_exec on the Maid instance.\n. ",
    "MoritzFago": "i would like it really to see this in maid. But why not DO the Rules if something changes? Why should the maid wait?\n. is there any way to make the maid watch a dir and if something changes to \"do\" the rules? or is it like this:\n\n`````` ruby\nwatch '/home/user/Downloads' do\n  rule 'This rule will run on every change to the downloads directory' do\n    # another task\n  end\n  rule 'do something other on every change to the downloads directory' do\n    # another task\n  end\nend\n```ruby\n``````\n. okay i really don\u00b4t know what\u00b4s wrong.\nWhat i want is that every time a file is added to my downloads folder maid get\u00b4s these added files and checks if they were downloaded via AirDrop from an iOS device (this means the com.apple.metadata:kMDItemWhereFroms extended attribute is like this:\n\n```\n00000000  62 70 6C 69 73 74 30 30 A1 01 5D 4D 6F 72 69 74  |bplist00..]Morit|\n00000010  7A 20 69 50 68 6F 6E 65 08 0A 00 00 00 00 00 00   |z iPhone........|\n00000020  01 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00    |................|\n00000030  00 00 00 00 00 00 00 00 00 18                                  |..........|\n0000003a\n```\n\n) and if thats true moves them to a special folder.\n\nI think my code above should do that, but it doesn\u00b4t as far as i could debug this code\n\n```\nadded.each do |path|\n        move(path,'/Users/moritzfago/Desktop/AirDroped') if downloaded_from(path).any? { |u| u.match('.*iPhone.*')}\n```\n\nblock isn\u00b4t executed and i don\u00b4t know why.\n. oh by the way this is my rules.rb\n\n``` ruby\n# Sample Maid rules file\n\nMaid.rules do\n\n  watch '/Users/moritzfago/Downloads' do\n    rule 'AirDrop to Desktop' do\n      added.each do |path|\n        puts(path)\n        move(path,'/Users/moritzfago/Desktop/AirDroped') if (downloaded_from(path).any? {|s| s[/.*iPhone.*/]})\n      end\n    end\n  end\nend\n```\n. now it works, but it works only one time.\n\n``` ruby\n# Sample Maid rules file\n\nMaid.rules do\n\n  watch '/Users/moritzfago/Downloads/' do\n    #puts added\n    rule 'AirDrop to Desktop' do |added, modified|\n      puts 'foo'\n      puts 'foo3'\n      puts modified\n      puts added\n      puts 'foo2'\n      added.each do |path|\n        puts(path)\n        if downloaded_from(path).any? {|s| s[/.*iPhone.*/]} then\n          move(path,'/Users/moritzfago/Desktop/AirDroped')\n        end\n      end\n      modified.each do |path|\n        puts(path)\n        if downloaded_from(path).any? {|s| s[/.*iPhone.*/]} then\n          move(path,'/Users/moritzfago/Desktop/AirDroped')\n        end\n      end\n      puts 'ed'\n    end\n  end\nend\n```\n\nafter it fired one time it doesn\u00b4t not work anymore. any ideas?\n. i would like it really to see this in maid. But why not DO the Rules if something changes? Why should the maid wait?\n. is there any way to make the maid watch a dir and if something changes to \"do\" the rules? or is it like this:\n\n`````` ruby\nwatch '/home/user/Downloads' do\n  rule 'This rule will run on every change to the downloads directory' do\n    # another task\n  end\n  rule 'do something other on every change to the downloads directory' do\n    # another task\n  end\nend\n```ruby\n``````\n. okay i really don\u00b4t know what\u00b4s wrong.\nWhat i want is that every time a file is added to my downloads folder maid get\u00b4s these added files and checks if they were downloaded via AirDrop from an iOS device (this means the com.apple.metadata:kMDItemWhereFroms extended attribute is like this:\n\n```\n00000000  62 70 6C 69 73 74 30 30 A1 01 5D 4D 6F 72 69 74  |bplist00..]Morit|\n00000010  7A 20 69 50 68 6F 6E 65 08 0A 00 00 00 00 00 00   |z iPhone........|\n00000020  01 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00    |................|\n00000030  00 00 00 00 00 00 00 00 00 18                                  |..........|\n0000003a\n```\n\n) and if thats true moves them to a special folder.\n\nI think my code above should do that, but it doesn\u00b4t as far as i could debug this code\n\n```\nadded.each do |path|\n        move(path,'/Users/moritzfago/Desktop/AirDroped') if downloaded_from(path).any? { |u| u.match('.*iPhone.*')}\n```\n\nblock isn\u00b4t executed and i don\u00b4t know why.\n. oh by the way this is my rules.rb\n\n``` ruby\n# Sample Maid rules file\n\nMaid.rules do\n\n  watch '/Users/moritzfago/Downloads' do\n    rule 'AirDrop to Desktop' do\n      added.each do |path|\n        puts(path)\n        move(path,'/Users/moritzfago/Desktop/AirDroped') if (downloaded_from(path).any? {|s| s[/.*iPhone.*/]})\n      end\n    end\n  end\nend\n```\n. now it works, but it works only one time.\n\n``` ruby\n# Sample Maid rules file\n\nMaid.rules do\n\n  watch '/Users/moritzfago/Downloads/' do\n    #puts added\n    rule 'AirDrop to Desktop' do |added, modified|\n      puts 'foo'\n      puts 'foo3'\n      puts modified\n      puts added\n      puts 'foo2'\n      added.each do |path|\n        puts(path)\n        if downloaded_from(path).any? {|s| s[/.*iPhone.*/]} then\n          move(path,'/Users/moritzfago/Desktop/AirDroped')\n        end\n      end\n      modified.each do |path|\n        puts(path)\n        if downloaded_from(path).any? {|s| s[/.*iPhone.*/]} then\n          move(path,'/Users/moritzfago/Desktop/AirDroped')\n        end\n      end\n      puts 'ed'\n    end\n  end\nend\n```\n\nafter it fired one time it doesn\u00b4t not work anymore. any ideas?\n. ",
    "RobertAudi": "@benjaminoakes Well rename isn't \"automatic\", as in you have to provide a name to rename to. What I am suggesting is to check for existing files and avoid overwritting. Of course the the code I am using right now is not perfect at all. For example, it will rename `archive.tar.gz` to `archive.tar_1.gz`, which is wrong. But it's the idea that is important. Also, I would like to make one thing clear: I don't think there is an \"issue\" with the `move` method, I just think it can be improved.\n\nBy the way, thanks a lot for creating this awesome piece of software, it's amazing and it works very well (I'm using it on ArchLinux with no problems). :+1:\n\nAlso, as a side note, it's better imho to automate `maid` using something like [inotify-tools](https://github.com/rvoicilas/inotify-tools).\n. @benjaminoakes Well rename isn't \"automatic\", as in you have to provide a name to rename to. What I am suggesting is to check for existing files and avoid overwritting. Of course the the code I am using right now is not perfect at all. For example, it will rename `archive.tar.gz` to `archive.tar_1.gz`, which is wrong. But it's the idea that is important. Also, I would like to make one thing clear: I don't think there is an \"issue\" with the `move` method, I just think it can be improved.\n\nBy the way, thanks a lot for creating this awesome piece of software, it's amazing and it works very well (I'm using it on ArchLinux with no problems). :+1:\n\nAlso, as a side note, it's better imho to automate `maid` using something like [inotify-tools](https://github.com/rvoicilas/inotify-tools).\n. ",
    "ahmadseleem": "So now I get this error:\n\n``` bash\n/Users/ahmad/.rubies/ruby-2.1.2/lib/ruby/2.1.0/fileutils.rb:519:in `block in mv': File exists - /Users/ahmad/Downloads/Documents (Errno::EEXIST)\n```\n\nHow can I tell move to auto rename  duplicated files ?\n\nI'd like to use the default OS X behavior like adding \"_01\"  or so incrementally.\n. So now I get this error:\n\n``` bash\n/Users/ahmad/.rubies/ruby-2.1.2/lib/ruby/2.1.0/fileutils.rb:519:in `block in mv': File exists - /Users/ahmad/Downloads/Documents (Errno::EEXIST)\n```\n\nHow can I tell move to auto rename  duplicated files ?\n\nI'd like to use the default OS X behavior like adding \"_01\"  or so incrementally.\n. ",
    "songchenwen": "[Here is my config file](https://github.com/songchenwen/dotfiles/blob/master/maid_rules/rules.rb).\n\nI use [this little command](https://github.com/jdberry/tag/) to handle Finder labels. \n\nI'd like to submit a pull request for this. I just need to know what is the best way to embed a binary in maid.\n. Ok. I'll try to make a PR before Sunday. \n\nTo make things clear, do I just need to add these methods to `tools.rb`? And what should we suggest when Linux user try to use these methods?\n. I'm not that much a ruby guy. But I'll try my best. :smile: \n. If there's anything wrong please let me know.\n. I've ran `gem install maid --pre` to install 0.8.0.alpha.1.\n\nI saw `maid (0.8.0.alpha.1, 0.7.0, 0.6.1)` when `gem list`\n\nBut I still get `0.7.0` when `maid version`. Any further steps to use the alpha version by default?\n. Just added a commit which refactors `downloading`\n. [Here is my config file](https://github.com/songchenwen/dotfiles/blob/master/maid_rules/rules.rb).\n\nI use [this little command](https://github.com/jdberry/tag/) to handle Finder labels. \n\nI'd like to submit a pull request for this. I just need to know what is the best way to embed a binary in maid.\n. Ok. I'll try to make a PR before Sunday. \n\nTo make things clear, do I just need to add these methods to `tools.rb`? And what should we suggest when Linux user try to use these methods?\n. I'm not that much a ruby guy. But I'll try my best. :smile: \n. If there's anything wrong please let me know.\n. I've ran `gem install maid --pre` to install 0.8.0.alpha.1.\n\nI saw `maid (0.8.0.alpha.1, 0.7.0, 0.6.1)` when `gem list`\n\nBut I still get `0.7.0` when `maid version`. Any further steps to use the alpha version by default?\n. Just added a commit which refactors `downloading`\n. ",
    "vrillusions": "I've been having the same issue.  Although for me it seems to be about once a week.  Looking through system logs and don't see anything happening at that time.  If it really is happening on directory listing there's some dtrace commands that you can run to see what process is accessing it.\n\n```\nsudo opensnoop -a -f /Users/yourname/Desktop/some-file-that-access-time-changes-a-lot\n```\n\nProblem is that slows down all file access calls.  For example creating a new tab in terminal takes several seconds where it's near instant if opensnoop isn't running.  For my case (weekly but not exactly weekly) running opensnoop until then isn't possible.  Another fun command is `sudo iosnoop -vstoD` which will show every kind (both read/write) of access for every file in the system.  Needless to say it's rather verbose but it may show a pattern.\n\nMy workaround has been to be more aggressive in the checking.  For example after 2 days screen shots are moved out of desktop (I don't delete anything so it's not a big deal to move it sooner)\n. I've been having the same issue.  Although for me it seems to be about once a week.  Looking through system logs and don't see anything happening at that time.  If it really is happening on directory listing there's some dtrace commands that you can run to see what process is accessing it.\n\n```\nsudo opensnoop -a -f /Users/yourname/Desktop/some-file-that-access-time-changes-a-lot\n```\n\nProblem is that slows down all file access calls.  For example creating a new tab in terminal takes several seconds where it's near instant if opensnoop isn't running.  For my case (weekly but not exactly weekly) running opensnoop until then isn't possible.  Another fun command is `sudo iosnoop -vstoD` which will show every kind (both read/write) of access for every file in the system.  Needless to say it's rather verbose but it may show a pattern.\n\nMy workaround has been to be more aggressive in the checking.  For example after 2 days screen shots are moved out of desktop (I don't delete anything so it's not a big deal to move it sooner)\n. ",
    "bhagyas": "Is it possible to use this thread to discuss some of the best practises on local file management? \n\nTo start with, to classify all the files in the downloads folder by the 'downloaded from' attribute.\n. Is it possible to use this thread to discuss some of the best practises on local file management? \n\nTo start with, to classify all the files in the downloads folder by the 'downloaded from' attribute.\n. ",
    "brandonpittman": "I'm dumb. Nevermind. \n. I'm dumb. Nevermind. \n. ",
    "soleo": "@jurriaan @benjaminoakes  would it make more sense to integrate with homebrew , and use something like ``brew services start maid`` to Install and start the service at login. @benjaminoakes love to help with this issue. Looks like this has been a year and nobody has touched this issue.. Here is the documentation for creating a new Formula in home brew. \r\n\r\nhttps://github.com/Homebrew/brew/blob/master/docs/Formula-Cookbook.md#formula-cookbook\r\n\r\n. @jurriaan @benjaminoakes  would it make more sense to integrate with homebrew , and use something like ``brew services start maid`` to Install and start the service at login. @benjaminoakes love to help with this issue. Looks like this has been a year and nobody has touched this issue.. Here is the documentation for creating a new Formula in home brew. \r\n\r\nhttps://github.com/Homebrew/brew/blob/master/docs/Formula-Cookbook.md#formula-cookbook\r\n\r\n. ",
    "brandondrew": "I may get around to sending a pull request for this... but maybe someone will beat me to it\n. I may get around to sending a pull request for this... but maybe someone will beat me to it\n. ",
    "ChristianBagley": "Brew does have the ability to install rubygems as homebrew formulae. You just need to install the brew-gem formula with:\r\n\r\n`brew install brew-gem`\r\n\r\nAfter that you can install Ruby gems through homebrew with (to install maid for example):\r\n\r\n`brew gem install maid`\r\n\r\n**Otherwise**, if people are more in favor of an actual Homebrew formula for installing, the Brew formula should be rather simple (since the formula will use gem to install Maid). Something like this, to start with:\r\n\r\n```\r\nrequire 'formula'\r\n\r\nclass BrewMaid < Formula\r\n  homepage 'https://github.com/benjaminoakes/maid/'\r\n\r\n  def initialize(*args)\r\n    @name = \"maid\"\r\n    @version = \"0.7.0\"\r\n    super\r\n  end\r\n\r\n  def install\r\n    system \"gem\", \"install\", name, \"--version\", version, \"--install-dir\", prefix\r\n  end\r\nend\r\n```. @bensleveritt I know it has been awhile, are you still experiencing the problem? In terminal what does `ruby --version` return? Without knowing beforehand, I suspect that Homebrew is attempting to install using your system default Ruby. If you post the errors you're getting after running it through Homebrew, I can try and help troubleshoot. . Brew does have the ability to install rubygems as homebrew formulae. You just need to install the brew-gem formula with:\r\n\r\n`brew install brew-gem`\r\n\r\nAfter that you can install Ruby gems through homebrew with (to install maid for example):\r\n\r\n`brew gem install maid`\r\n\r\n**Otherwise**, if people are more in favor of an actual Homebrew formula for installing, the Brew formula should be rather simple (since the formula will use gem to install Maid). Something like this, to start with:\r\n\r\n```\r\nrequire 'formula'\r\n\r\nclass BrewMaid < Formula\r\n  homepage 'https://github.com/benjaminoakes/maid/'\r\n\r\n  def initialize(*args)\r\n    @name = \"maid\"\r\n    @version = \"0.7.0\"\r\n    super\r\n  end\r\n\r\n  def install\r\n    system \"gem\", \"install\", name, \"--version\", version, \"--install-dir\", prefix\r\n  end\r\nend\r\n```. @bensleveritt I know it has been awhile, are you still experiencing the problem? In terminal what does `ruby --version` return? Without knowing beforehand, I suspect that Homebrew is attempting to install using your system default Ruby. If you post the errors you're getting after running it through Homebrew, I can try and help troubleshoot. . ",
    "bensleveritt": "I'm working on the latter idea: installing as a formula, and encountering a rather complex beast of ruby versions and gem install locations. I suspect there's a more correct thing to do (which is to install to ruby's location, rather than to homebrew. But then I encounter rights to install issues).. I'm working on the latter idea: installing as a formula, and encountering a rather complex beast of ruby versions and gem install locations. I suspect there's a more correct thing to do (which is to install to ruby's location, rather than to homebrew. But then I encounter rights to install issues).. ",
    "sotaan": "Problem solved, I forgot what was an Instance variable. \n. Problem solved, I forgot what was an Instance variable. \n. ",
    "cobyism": "@benjaminoakes Unfortunately, I\u2019ve become preoccupied with a couple of things going on in my personal life at the moment, and don\u2019t have the spare cycles to give your comments the attention they deserve, nor continue tweaking this branch, so I\u2019m going to go ahead and close this PR to reflect that it isn\u2019t actively being worked on. If anyone else wants to take this and run with it though, then by all means go ahead!\n. @benjaminoakes Unfortunately, I\u2019ve become preoccupied with a couple of things going on in my personal life at the moment, and don\u2019t have the spare cycles to give your comments the attention they deserve, nor continue tweaking this branch, so I\u2019m going to go ahead and close this PR to reflect that it isn\u2019t actively being worked on. If anyone else wants to take this and run with it though, then by all means go ahead!\n. ",
    "fortinmike": "Oh right! How did I miss this...\n\nI can't guarantee I'll find the time, but what would an acceptable PR look like for this possible check? Maybe the watch tool could make sure the string is a path, that it exists on the filesystem, and throw with a helpful message otherwise?\n. Oh right! How did I miss this...\n\nI can't guarantee I'll find the time, but what would an acceptable PR look like for this possible check? Maybe the watch tool could make sure the string is a path, that it exists on the filesystem, and throw with a helpful message otherwise?\n. ",
    "torrottum": "Do you use RVM or rbenv?\nRVM installs gems to `$HOME/.rvm/{ruby-version}/bin`, not sure about rbenv\nYou can find the executable directory directory by running `gem env | grep \"EXECUTABLE DIRECTORY\"`\n. No problem, happy to help! :smile:\n. Do you use RVM or rbenv?\nRVM installs gems to `$HOME/.rvm/{ruby-version}/bin`, not sure about rbenv\nYou can find the executable directory directory by running `gem env | grep \"EXECUTABLE DIRECTORY\"`\n. No problem, happy to help! :smile:\n. ",
    "Canorus": "@torrottum Thanks! Didn't know gems are stored elsewhere. That solved my problem :)\n. @torrottum Thanks! Didn't know gems are stored elsewhere. That solved my problem :)\n. ",
    "montchr": "I might be running into this issue also, on macOS 10.12.2. If I run `maid daemon`, I get the following output:\r\n\r\n```\r\n$ maid daemon\r\nLogging actions to \"/Users/montchr/.maid/maid.log\"\r\n2017-01-15 00:49 fsevent_watch[90689] (FSEvents.framework) FSEventStreamStart: ERROR: FSEvents_connect() => (ipc/send) invalid destination port (268435459)\r\n2017-01-15 00:49 fsevent_watch[90690] (FSEvents.framework) FSEventStreamStart: ERROR: FSEvents_connect() => (ipc/send) invalid destination port (268435459)\r\n2017-01-15 00:49 fsevent_watch[90691] (FSEvents.framework) FSEventStreamStart: ERROR: FSEvents_connect() => (ipc/send) invalid destination port (268435459)\r\n```\r\n\r\nThe daemon still works, but I think it eventually stops.. I might be running into this issue also, on macOS 10.12.2. If I run `maid daemon`, I get the following output:\r\n\r\n```\r\n$ maid daemon\r\nLogging actions to \"/Users/montchr/.maid/maid.log\"\r\n2017-01-15 00:49 fsevent_watch[90689] (FSEvents.framework) FSEventStreamStart: ERROR: FSEvents_connect() => (ipc/send) invalid destination port (268435459)\r\n2017-01-15 00:49 fsevent_watch[90690] (FSEvents.framework) FSEventStreamStart: ERROR: FSEvents_connect() => (ipc/send) invalid destination port (268435459)\r\n2017-01-15 00:49 fsevent_watch[90691] (FSEvents.framework) FSEventStreamStart: ERROR: FSEvents_connect() => (ipc/send) invalid destination port (268435459)\r\n```\r\n\r\nThe daemon still works, but I think it eventually stops.. ",
    "dnicolson": "A temporary workaround is to run using launchd with `KeepAlive` set to true and scheduling the process to be killed at regular intervals. In recent testing the daemon stopped responding to events between maybe as early as 15 minutes after starting, so the following cron job is used:\r\n\r\n`*/15 * * * * /bin/kill $(ps axo pid,ppid,args | grep 'maid daemon' | grep ' 1 ' | awk '{print $1}')`. The problem seems to be only affecting one of the rules, the first one which watches the `~/Downloads` directory. Other directory rules (including a subdirectory of `~/Downloads`) continue to be logged to `maid.log` after the `~/Downloads` rule stops working.\r\n\r\nI'm not sure why but using the `listen` gem (same version), seems to keep logging events in the `~/Downloads` directory using the following code (which is similar to `watch.rb`):\r\n\r\n```\r\nrequire 'listen'\r\n\r\nlistener = Listen.to(File.expand_path('~/Downloads')) do |modified, added, removed|\r\n  File.write('listen.log', \"added #{added.inspect}\\n\", mode: 'a')\r\n  File.write('listen.log', \"modified #{modified.inspect}\\n\", mode: 'a')\r\n  File.write('listen.log', \"removed #{removed.inspect}\\n\", mode: 'a')\r\nend\r\nlistener.start\r\nsleep\r\n```. Closing this issue as the `~/Downloads` directory also appears stop responding to events eventually when using the `listen` gem.. A temporary workaround is to run using launchd with `KeepAlive` set to true and scheduling the process to be killed at regular intervals. In recent testing the daemon stopped responding to events between maybe as early as 15 minutes after starting, so the following cron job is used:\r\n\r\n`*/15 * * * * /bin/kill $(ps axo pid,ppid,args | grep 'maid daemon' | grep ' 1 ' | awk '{print $1}')`. The problem seems to be only affecting one of the rules, the first one which watches the `~/Downloads` directory. Other directory rules (including a subdirectory of `~/Downloads`) continue to be logged to `maid.log` after the `~/Downloads` rule stops working.\r\n\r\nI'm not sure why but using the `listen` gem (same version), seems to keep logging events in the `~/Downloads` directory using the following code (which is similar to `watch.rb`):\r\n\r\n```\r\nrequire 'listen'\r\n\r\nlistener = Listen.to(File.expand_path('~/Downloads')) do |modified, added, removed|\r\n  File.write('listen.log', \"added #{added.inspect}\\n\", mode: 'a')\r\n  File.write('listen.log', \"modified #{modified.inspect}\\n\", mode: 'a')\r\n  File.write('listen.log', \"removed #{removed.inspect}\\n\", mode: 'a')\r\nend\r\nlistener.start\r\nsleep\r\n```. Closing this issue as the `~/Downloads` directory also appears stop responding to events eventually when using the `listen` gem.. "
}