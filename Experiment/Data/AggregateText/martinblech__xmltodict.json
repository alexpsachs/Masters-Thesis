{
    "martinblech": "That's simply invalid XML, `xmltodict` will not attempt to fix it for you. It's easy to work around, though:\n\n``` python\ndef rootlessparse(doc):\n    return xmltodict.parse('<root>{0}</root>'.format(doc))['root']\n\nrootlessparse('''\n<test>0</test>\n<another>1</another>\n''') # this returns {u'test': u'0', u'another': u'1'}\n```\n. that's invalid xml, any sane xml parser should fail with it. you should escape your strings.\n\n``` python\n>>> xmltodict.parse('<x>&</x>')\nTraceback (most recent call last):\n  ...\nxml.parsers.expat.ExpatError: not well-formed (invalid token): line 1, column 4\n>>> xmltodict.parse('<x>&amp;</x>')\n{u'x': u'&'}\n```\n. `xmltodict` is based on the built-in `xml.parsers.expat` module. There's no way that I know of to stop `expat` from parsing a subtree and treat it as CDATA instead, but you could investigate further and come back with a pull request ;)\n. @slestak It's not a perfect solution for this scenario, as it would imply an unwanted and in some cases lossy XML->dict->XML transformation.\nIt is, however, a good idea for a useful general-purpose feature. I have forked this into a new issue [here](https://github.com/martinblech/xmltodict/issues/6) and will work on it.\n. fixed in release v0.3\n. With streaming mode, you can return a false-ish value from your callback function to stop parsing. If this doesn't solve your issue, can you provide a concrete example?\n. I get it. In this case, you should use a `postprocessor`, not the streaming mode.\nThe postprocessing function gets three arguments in (`path`, `key` and `value`) and must return a `(key, value)` tuple or `None` to skip the node altogether.\n\nIf you want to skip odd `<item>`s, you should do something like this:\n\n``` python\nxml = '''\n<doc>\n    <item>Item1</item>\n    <item>Item2</item>\n    <item>Item3</item>\n    <item>Item4</item>\n</doc>'''\n\nclass SkipOddValues:\n    def __init__(self, key):\n        self.key = key\n        self.count = 0\n\n    def __call__(self, path, key, value):\n        if key != self.key:\n            return key, value\n        self.count += 1\n        if self.count % 2 == 1:\n            return None\n        else:\n            return key, value\n\ndoc = xmltodict.parse(xml, postprocessor=SkipOddValues('item'))\n```\n. Welcome!\n. I'm not sure I understand. Can you explain a bit further, with a code example if possible?\n. Got it! It does sound like a nice to have a feature. I'll give it a look.\n. Something like that?\n. Welcome! It's out in v0.4.\n. `cdata_separator='\\n'` should do (no need to `force_cdata`)\n. @dubanoze describe issue not\n. That's great news!\n\nThe patch looks good to me, I will ship it with 0.4.2.\n\nThanks!\n. Done: http://pypi.python.org/pypi/xmltodict/0.4.2\n. I would, because I'm a human being and I know `children` is the plural form of `child`. The only thing `xmltodict` knows, though, is that it has only found one value for the `child` node (same way as with `root`, `children` and `name`), so there's no need for iterable objects there.\n\nYou can easily work around this by using a custom `dict_constructor` that always starts off with empty lists as values, i.e.:\n\n``` python\nfrom collections import defaultdict\nxmltodict.parse(xml, dict_constructor=lambda *args, **kwargs: defaultdict(list, *args, **kwargs))\n```\n. @foxx I understand it can be annoying, but I think the other option is even worse. For example, with this XML:\n\n``` xml\n<config>\n  <settings>\n    <value1>0</value1>\n    <value2>false</value2>\n  </settings>\n  <logging>\n    <value3>1</value3>\n    <value4>true</value4>\n  </logging>\n</config>\n```\n\nI would expect a `dict` like this:\n\n``` python\n{\n    \"config\": {\n        \"settings\": {\n            \"value1\": \"0\",\n            \"value2\": \"false\"\n        },\n        \"logging\": {\n            \"value3\": \"1\",\n            \"value4\": \"true\"\n        },\n    }\n}\n```\n\nBut with your proposal I would get this instead:\n\n``` python\n{\n    \"config\": [{\n        \"settings\": [{\n            \"value1\": [\"0\"],\n            \"value2\": [\"false\"]\n        }],\n        \"logging\": [{\n            \"value3\": [\"1\"],\n            \"value4\": [\"true\"]\n        }],\n    }]\n}\n```\n\nIn order to access the configuration values, you would have to use `d['config'][0]['settings'][0]['value1'][0]` instead of `d['config']['settings']['value1']`. Other users might think this is surprising behavior too, so I believe which option is better depends on the use case.\n\nAlso, the Python standard library doesn't have a `DefaultDict` that is also an `OrderedDict`. If I followed your suggestion and used `DefaultDict` in the next release, `xmltodict` would lose the elements' ordering information, which could also be surprising for some use cases (and break code that depends on this).\n. The best we can do about this is improve the documentation, I think. @foxx, what would you add to the README to make this behavior less surprising?\n. @kadnan @candlerb this feature is already out in the 0.10.1 release. Which version are you running on? I just did a fresh install and it worked fine:\n\n``` sh\n$ pip install xmltodict\nCollecting xmltodict\n  Downloading xmltodict-0.10.1.tar.gz\nBuilding wheels for collected packages: xmltodict\n  Running setup.py bdist_wheel for xmltodict ... done\n  Stored in directory: /Users/martinblech/Library/Caches/pip/wheels/06/23/c0/b5e91910dc6261d118f437bc4c487972e3b00147e09372f8bc\nSuccessfully built xmltodict\nInstalling collected packages: xmltodict\nSuccessfully installed xmltodict-0.10.1\n$ python\nPython 2.7.11 (default, Feb 22 2016, 19:49:39)\n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import xmltodict\n>>> xml = '''\n... <stuff>\n...   <foo>.1.</foo>\n...   <bar>.2.</bar>\n...   <bar>.3.</bar>\n...   <foo>.4.</foo>\n...   <bar>.5.</bar>\n... </stuff>\n... '''\n>>> xmltodict.parse(xml, force_list={'stuff': True})\nOrderedDict([(u'stuff', [OrderedDict([(u'foo', [u'.1.', u'.4.']), (u'bar', [u'.2.', u'.3.', u'.5.'])])])])\n>>>\n```\n. No problem, glad it worked in the end.\n. You can use a postprocessor for that:\n\n``` python\ndef postprocessor(path, key, value):\n    try:\n        value = value.strip()\n        if not value:\n            return None\n    except:\n        pass\n    return key, value\n\no = xmltodict.parse( infile.read() , postprocessor=postprocessor);\njson.dump( o , outfile, indent=2 )\n```\n\nand get this out:\n\n``` javascript\n\"Service\": {\n  \"kind\": \"1\"\n}\n```\n\nHowever, this should be the default behavior. Use this as a workaround while I fix this for a new release. Thanks!\n. fixed with this commit by @slestak https://github.com/martinblech/xmltodict/commit/2c2b4601e640481bd0ea5c3bf0c22d883eca47e5\n. what's up with the unit tests?\n. I see the test is failing because your expected dict doesn't have a `'emptya'` key. We don't want to completely lose that node, but check that it's value is `None` (as if all that whitespace wasn't there).\n. Looks good now!\n. Unicode support can be quite difficult to achieve on both python 2 and 3 with the same codebase. I will look into this.\n. Fixed with commit 75f885bfc81a7d95e885e81e94330ff9827b6e6f\n. That's correct, `unparse()` is officially done but still undocumented. Thanks for pointing it out!\nAre you using it? Can you try to come up with a small example for the `README`?\n. Now there's an example in `README.md`, but I'm leaving this issue open until I find the time to write the docstring.\n. Looks great. Thank you a lot for the contribution!\n. @LORDofDOOM It's breaking the Travis build. Have you investigated why? https://travis-ci.org/martinblech/xmltodict/builds/6913744\n. Conversions like this don't belong in the core library, as `xmltodict` should not be tied to specific types of XML. The recommended way of doing this is using a `postprocessor`. Thanks for the input!\n. You are welcome!\n. I will definitely consider it for the next release. Thank you for your input!\n. You can start using it in v0.5.0, just released. `xmltodict` still defaults to the built-in `expat`, but you can pass `defusedexpat.pyexpat` instead using the `expat` parameter, just look at `parse()`'s docstring.\n. I like the idea: pretty-printing is surely a useful feature. However, I'm not sure I like the approach. You are extending `XMLGenerator` but then completely overriding the core `startElement()`, `endElement()` and `characters()` methods. I would bet there are corner cases that the new implementation doesn't cover but `XMLGenerator` does.\n\nI think the right, robust way to do this is by leaving `XMLGenerator` untouched and modifying our own `_emit` function to pass a `depth` parameter to itself and call `content_handler.ignorableWhitespace()` appropriately.\n\nI will close this pull request but keep [this issue](https://github.com/martinblech/xmltodict/issues/26) open. Thank you for opening up the discussion!\n. @ahalbert I'm just pinging you to let you know I finally got around to implementing pretty print in `unparse()`, in case you would like to start using it. Cheers!\n. > I think the right, robust way to do this is by leaving XMLGenerator untouched and modifying our own _emit function to pass a depth parameter to itself and call content_handler.ignorableWhitespace() appropriately.\n. I'm glad you found it useful. The `KeyError` means the `article` dict doesn't have a `'title'` key. Have you tried debugging your script? What keys does the `article` dict have? Sometimes a few `print`s can help a lot!\n. You should at least print the exception stack trace, `error` alone doesn't say much. You could also print the whole untouched `page` object to see exactly what your callback function is being called with.\n. You should the `json` module to turn it into JSON, e.g.:\n\n``` python\n> import xmltodict\n>>> foo = xmltodict.parse(\"\"\"<?xml version=\"1.0\" ?>\n...         <person>\n...           <name>john</name>\n...           <age>20</age>\n...         </person>\"\"\")\n>>> print json.dumps(foo)\n{\"person\": {\"name\": \"john\", \"age\": \"20\"}}\n```\n\n`OrderedDict` is just a `dict` that preserves key order (makes sure that if you round-trip that object to XML, `name` will always come before `age`).\n. Looks like a reasonable fallback. Thanks for the contribution!\n. I certainly didn't start the project with namespaces in mind, as you probably guessed from their complete absence in the examples and tests.\n\nYour use case doesn't seem very complicated. I will have a look at it and see how much `pyexpat` can help me in this direction. I would love to add this feature if it doesn't bloat `xmltodict` for the simplest use cases.\n\nThanks for your input!\n. @tomstrummer\nWhat's exactly the role of the `namespaces` dict argument in your example? I see that it has entries for `one='http://one.com'` and `two='http://two.com'`, but `three` is missing, but as far as I can see, `one`, `two` and `three` are treated equally in your example's output.\n\nWhat difference does it make for a namespace to be present or missing in `namespaces`?\n. @tomstrummer Ok, it should have been there. But what if it wasn't? What would be a reasonable default behavior for `xmltodict` in case it bumps into a namespace that is not among the values of the `namespaces` dict? Should it raise an exception?\n\nI'm just trying to figure out what's the purpose of the `namespaces` dict in your example.\n. Fixed with release 0.7.0\n. Looks good to me. Thanks for the contribution!\n. This is a duplicate of #14. Unfortunately, there is no easy way for `xmltodict` to know beforehand which elements are supposed to be `list`s and which are supposed to be single elements. I can think of 2 workarounds for this:\n- The `dict_constructor` approach I described in #14, in which case _all_ values will be `list`s (`doc['root'][0]['abc'][1]['tr'] == ['four']`).\n- Writing your own `postprocessor` that cherry picks the values that should be converted to lists in your particular type of document.\n. @tomstrummer will something like this do?\n. You should `return True` from your callback function, e.g.:\n\n``` python\ndef handle_artist(_, artist):\n    print artist['name']\n    return True\n```\n\nReturning a falsy value (such as `None` in your case) makes `xmltodict` stop parsing and raise a `ParsingInterrupted` exception.\n. But then I realise the example in the README is wrong. Good find, thanks!\n. @AlexMikhalev did it work for you after adding `return True`?\n. Thank you for the contribution, but I think you can already achieve this by passing [jsobject](https://pypi.python.org/pypi/jsobject) or [AttrDict](http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python) as `dict_constructor` to `parse()`.\n\nThis functionality is not core to `xmltodict`, and since you can already get it with help from another module that's available on PyPI, I don't think it's necessary to merge these changes.\n. I meant passing it as `dict_constructor` to `parse()`, overriding the default (`OrderedDict`), e.g.:\n\n``` python\n>>> xd.parse(x, dict_constructor=jo.JSObject)\n```\n\nDoesn't this work for you?\n. @rjbez17 Doing it this way also more efficient, as `xmltodcit` creates `JsObject`s right away, instead of creating regular `dict`s and throwing them away after converting them to `XMLObject`s in the end. Also, it's less code to maintain!\n\nI would be happy to merge a pull request documenting this in the README, though... :wink: :wink:\n. I don't see the issue here. If you want to compare two documents, it doesn't make a difference at all whether you use `OrderedDict` or a regular `dict`:\n\n``` python\n>>> from collections import OrderedDict\n>>> OrderedDict([('a', 'b')]) == {'a': 'b'}\nTrue\n```\n\nHowever, if you don't want to use `OrderedDict`s at all and just want to use regular `dict`s all over, it's easy to override the default behavior using the `dict_constructor` parameter:\n\n``` python\n>>> import xmltodict\n>>> xmltodict.parse('<a>b</a>', dict_constructor=dict)\n{u'a': u'b'}\n```\n. Thanks @qixiuying for reporting this! @alesdotio You are right, I have to include `distribute_setup.py` in the package.\n\nI just removed this buggy release and reverted to v0.7.0 until I get the time to fix it.\n. Fixed with release 0.8.1\n. I've just upgraded `xmltodict` to the latest version of `setuptools`. Can you try `pip install xmltodict==0.8.2` and see if it works now?\n. Can you try 0.8.3 now? It now tries to use your system's `setuptools` if available before attempting to install 1.1.6. It worked for me locally.\n. welcome! thanks for reporting this!\n. It's not incorrect, it's just one of the possible ways of handling lists. What matters is that `unparse()` is consistent with `parse()` and roundtrips correctly.\n\nI understand that this way of handling lists can be annoying for your use case, but if I changed xmltodict to your convenience I still wouldn't be able to make everyone happy. If this:\n\n``` python\n{\n  'response': {\n    'versions': [\n      {'version': 1},\n      {'version': 2}\n    ]\n  }\n}\n```\n\n`unperse`s to:\n\n``` xml\n<response>\n  <versions>\n    <version>1</version>\n    <version>2</version>\n  </versions>\n</response>\n```\n\nThen it means that this:\n\n``` xml\n<settings>\n  <bind>localhost</bind>\n  <bind>192.168.1.1</bind>\n  <port>8080</port>\n</settings>\n```\n\nhas to `parse` to:\n\n``` python\n{\n  'settings': [\n    {'bind': 'localhost'},\n    {'bind': '192.168.1.1'},\n    {'port': '8080'}\n  ]\n}\n```\n\nWhich would be a pain to use, compared with this, which is the current behavior:\n\n``` python\n{\n  'settings': {\n    'bind': ['localhost', '192.168.1.1'],\n    'port': '8080'\n  }\n}\n```\n. That's what the `strip_whitespace` argument is for: deciding whether to strip whitespace or not. It defaults to `True`, but if you pass `False` you get what you're looking for:\n\n``` python\n>>> xml = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n... <service>\n...     <key>\n...         <name>SEPARATOR</name>\n...         <value>&#009;</value>\n...     </key>\n... </service>\n... '''\n>>> doc = xmltodict.parse(xml, strip_whitespace=False)\n>>> doc['service']['key']['value']\nu'\\t'\n```\n. @chrismatta @grzn @lovato thanks for your input. This issue should have been fixed with release 0.8.4. Could you please verify this is so from your side? Thanks!\n. @neildd looks good, thanks! The only thing missing is a python 2.4 line in `.travis.yml`. Can you do that?\n. @twcook I'm unable to reproduce this error. What platform did this happen on? Were you using virtualenv?\n. I setup a clean Ubuntu 12.10 virtual machine, but I still cannot reproduce the error, xmltodict installs just fine.\n\n@twcook I could try again, but I need step by step instructions to reproduce it in a local environment.\n. The proposed change breaks a large number of test cases: https://travis-ci.org/martinblech/xmltodict/builds/15720916\n\nCould you clarify the issue a bit further and provide a code example?\n. @dada2801 beginning with 0.8.5, `xmltodict` is letting the `expat` XML parser take care of choosing the correct encoding.\n. That's sounds like a nice feature, thanks. I will give it some thought as of how to implement it.\n. @megahall I think it's not a bug: you cannot have a XML document with more than one root node. You should wrap that dict inside another dict with a single key:\n\n``` python\n{\n    \"root\": {\n        \"@name\": \"dbl-test\",\n        \"description\": \"dbl-test\",\n        \"recurring\": {\n            \"hourly\": {\n                \"at\": \"00\"\n            }\n        },\n        \"type\": \"ip\",\n        \"url\": \"http://192.168.1.6:8080/pa-dbl.txt\"\n    }\n}\n```\n\nOtherwise, what XML opening tag should the `@name` attribute belong to?\n. That's awesome, thank you for this contribution!\n. @skela You should leave out `<![CDATA[\u2026]]>` from your `val`. `xmltodict` will take care of the escaping/unescaping for you, so you shouldn't attempt to introduce XML escaping characters into the values. The right thing to do is just have `val = '<a href=\"http://www.space.com\">Hi my name is Bob</a>'`.\n. It's just not possible to do this with xmltodict, it's not what the library is intended for.\n. @walko1234 there's no builtin solution, but you could use some DefaultOrderedDict recipe such as [this](http://stackoverflow.com/questions/4126348/how-do-i-rewrite-this-function-to-implement-ordereddict/4127426#4127426).\n. @fyears Thank you for your input. You can already do this if you pass `dict_constructor=dict` to the `parse()` function, as in #39.\n. Yes, I'm afraid it's kinda hidden. I could definitely use some help with\nthe documentation!\nOn Apr 15, 2014 11:40 PM, \"fyears\" notifications@github.com wrote:\n\n> Wow! There's a hidden feature! I should have a good look at the source\n> code first!\n> \n> Thank you. :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/59#issuecomment-40557514\n> .\n. @fyears I appreciate your contribution, but do not think it belongs as part of the library.\n\n`xmltodict` aims at doing just one thing and doing it well: it turns a valid XML document into a `dict` and vice versa. Even though it might be useful in your own particular scenario, the `raw_text()` function produces invalid XML.\n. @sbadia Sure, no problem! It's done: https://pypi.python.org/pypi/xmltodict/0.9.0\n. @sbadia Are you going to create/maintain an official Debian package for xmltodict? Or is this just for a private .deb?\n. @sbadia awesome, thanks!\n. thanks @sbadia !\n. @dgonyier I don't have a Windows box at reach at the moment, so I cannot reproduce it. It's great that you figured this out on your own, this thread can now be used as reference in case someone googles for this error.\n. @BlackMan82 You are right, it seems that `xmltodict` does not follow the spec for semi-structured XML nodes.\n\nWe should detect such cases and have `xmltodict` behave as specified, it would make much more sense:\n\n``` python\n>>> xmltodict.parse('<e>some<a>textual</a>content</e>')\n{'e': 'some<a>textual</a>content'}\n```\n\nI'm still wondering what to do with unparse in this case, though. If I leave it as it is, it would escape `<`s and `>`s, something we don't want:\n\n``` python\n>>> xmltodict.unparse({'e': 'some<a>textual</a>content'}, full_document=False)\n'<e>some&lt;a&gt;textual&lt;/a&gt;content</e>'\n```\n. @joohoi Not much, sorry!\n\nSince `xmltodict` uses SAX, not DOM, by the time it's able to detect semi-structured XML, it's already too late to process it differently. It would have to backtrack and unparse what has been parsed so far, or else switch to DOM, which would mean rewriting the whole library from scratch.\n\nPerhaps I'm missing some other alternative, so I'm definitely open to reading proposals or looking at pull requests.\n. While I do appreciate it and thank you for taking the time to write this long proposal, I do not see something like this happening to `xmltodict`.\n\n`xmltodict` aims to be a very simple library that implements **just one** of the many possible ways one can map XML to and from JSON-like structures. This particular mapping works fine for some simple use cases, but unfortunately it does not for other more complex ones, such as the ones you mention. It does not feature type coercion, meta processing directives nor attribute sniffing. This is by design.\n\nI do understand that your proposed features must make a lot of sense in your context, so I would like to encourage you to either:\n- Implement all this and submit a Pull Request, so I can review the impact of this added complexity on code maintainability, backwards compatibility and usefulness for the originally intended, simple scenarios. I promise to reconsider my position once I see the implementation and tests.\n- Fork `xmltodict` and build your own XML processing library on top of it.\n. That's great, thank you for this PR. The only thing missing would be a new entry in the `matrix/exclude` section to avoid running the tests twice on jython.\n\n``` yaml\n matrix:\n    exclude:\n      - python: \"2.6\"\n        env: JYTHON=true\n      - python: \"2.7\"\n        env: JYTHON=true\n      - python: \"3.2\"\n        env: JYTHON=true\n      - python: \"3.3\"\n        env: JYTHON=true\n+       - python: \"3.4\"\n+         env: JYTHON=true\n```\n. Perfect! Thanks, @frewsxcv \n. @taylormattison Thank you for reporting this. It was actually a problem with the `README`: it was missing the `process_namespaces=True` parameter.\n. @ZoomQuiet Please have a look at #14 for a workaround.\n. @CamyDee Looking forward to see some progress with your fork!\n. I'm sorry, the streaming mode is a bit lacking on the documentation side. Fortunately, the attributes are not lost but passed to the callback as the `path` argument, e.g.:\n\n``` python\ndef cb(path, item):\n    print path, item\n    return True\n\nxmltodict.parse(open(xmlfile), item_depth=2, item_callback=cb)\n[(u'items', None), (u'item', OrderedDict([(u'attr', u'hello')]))] OrderedDict([(u'inner', u'value'), (u'inner2', u'value2')])\n```\n. @pySilver I guess the workaround does work for your use case, but I'm not sure this is would be the correct thing to do. If a l list with N items produces N XML nodes, the logical conclusion should be that a list with 0 items must produce no XML nodes at all, not one empty node:\n\n``` python\n>>> print unparse({'a': {'b': [1, 2, 3]}}, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<a>\n    <b>1</b>\n    <b>2</b>\n    <b>3</b>\n</a>\n>>> print unparse({'a': {'b': [1, 2]}}, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<a>\n    <b>1</b>\n    <b>2</b>\n</a>\n>>> print unparse({'a': {'b': [1]}}, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<a>\n    <b>1</b>\n</a>\n>>> print unparse({'a': {'b': []}}, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<a>\n</a>\n```\n. @pySilver I understand, in some use cases (such as yours) it makes more sense to do it that way. I just think that it's not right to force that behavior on all the other users, it's less logical and might not be what they want.\n. @Telofy thank you for reporting this issue, but I am unable to reproduce it locally. Here's the whole interactive Python session:\n\n``` python\n>>> from urllib2 import urlopen\n>>> from xmltodict import parse, unparse\n>>> feed = urlopen('https://gist.githubusercontent.com/Telofy/241ca0d28edaef732153/raw/70b9228ee374a285397319ce97b0d8dbf227b278/master.atom')\n>>> print unparse(parse(feed), pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:media=\"http://search.yahoo.com/mrss/\" xml:lang=\"en-US\">\n    <id>tag:github.com,2008:/OParl/specs/commits/master</id>\n    <link type=\"text/html\" rel=\"alternate\" href=\"https://github.com/OParl/specs/commits/master\"></link>\n    <link type=\"application/atom+xml\" rel=\"self\" href=\"https://github.com/OParl/specs/commits/master.atom\"></link>\n    <title>Recent Commits to specs:master</title>\n    <updated>2014-07-28T17:01:14+02:00</updated>\n\u2026\n    <entry>\n        <id>tag:github.com,2008:Grit::Commit/53f3af90949c69f0fd9860200077d039107ef2c2</id>\n        <link type=\"text/html\" rel=\"alternate\" href=\"https://github.com/OParl/specs/commit/53f3af90949c69f0fd9860200077d039107ef2c2\"></link>\n        <title>oparl:Person: title: Beschreibung ge\u00e4ndert</title>\n        <updated>2014-07-12T18:11:25+02:00</updated>\n        <media:thumbnail height=\"30\" width=\"30\" url=\"https://avatars2.githubusercontent.com/u/273727?v=2&amp;s=30\"></media:thumbnail>\n        <author>\n            <name>marians</name>\n            <uri>https://github.com/marians</uri>\n        </author>\n        <content type=\"html\">&lt;pre style='white-space:pre-wrap;width:81ex'&gt;oparl:Person: title: Beschreibung ge\u00e4ndert\n\nString an erste Stelle&lt;/pre&gt;</content>\n    </entry>\n    <entry>\n        \u2026\n    </entry>\n\u2026\n</feed>\n```\n\nAll the `<entry>` - `</entry>` balance out correctly. I can subsequently feed the resulting XML to a XML parser and it shows no validation errors.\n\nCould you try to isolate this issue into a test case and submit a pull request for that instead?\n. No problem, glad you solved it!\n. @karantan this is a duplicate of #14, please have a look at that conversation for a workaround\n. That's correct @kmonsoor, xmltodict could use some help with documentation, especially about the streaming mode. \n. @arikscore Thank you for reporting this. `xmltodict` takes care of mapping a XML tree to a set of nested dictionaries, lists and strings. It won't deal with XMLSchema semantics, that level of abstraction is up to the user.\n. @kolis binary mode is the correct way to do this, not a workaround. The XML parser expects bytes as input and takes care of the conversion from bytes to unicode.. I didn't make the parser, can't say. Try asking in stackoverflow.com, someone out there might know.. Thank you for reporting this. It's a known issue, but still haven't figured out a practical way to solve it. Please have a look at #63.\n. No problem. Updated the description of issue #78 with the improved formatting.\n. Thanks @JKillian for the idea, it will be available in the next release.\n. Thank you for reporting this edge case, @JKillian . It's fixed in 0.9.2 which is already published in PyPI.\n. This is not a `xmltodict` issue. Python dictionaries raise `KeyError` when you try to access a nonexistent key, that's just how they work, and I don't think `defaultdict` will help you either.\n\nMaybe you could post this `res['foo']['bar']['might']['exist']` example in [Stackoverflow](http://stackoverflow.com), since this is more of a general Python question, perhaps you will get more help over there. Good luck!\n. I don't see an issue here, there's nothing random about it. The following XML:\n\n``` xml\n<namespaces>\n      <namespace key=\"-2\" case=\"first-letter\">Media</namespace>\n      <namespace key=\"-1\" case=\"first-letter\">Special</namespace>\n</namespaces>\n```\n\nMaps to a `dict` like this:\n\n``` python\n{\n    \"namespaces\": {\n        \"namespace\": [{\n            \"key\": \"-2\",\n            \"case\": \"first-letter\",\n            \"#text\": \"Media\"\n        }, {\n            \"key\": \"-1\",\n            \"case\": \"first-letter\",\n            \"#text\": \"Special\"\n        }]\n    }\n}\n```\n. @xtiansimon The only difference between `dict` and `OrderedDict` is that the latter preserves key insertion order while the former doesn't. We can safely ignore this here.\n\nThere is nothing random about this behavior, it's just a duplicate of issue #14. Please have a look there to see the discussion and some possible workarounds.\n. Thank you for reporting this, @rotten \nCould you please provide a code example with expected and actual output?\n. The problem is not related with `xmltodict` at all, it's just that you are not building the `OrderedDict`s correctly.\n\nThe constructor takes a list of key/value tuples as parameter, but you are passing a `dict` instead, which has already lost the ordering information before the `OrderedDict` is even created. Please have a look at the [official documentation](https://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes).\n. No problem, @rotten , I'm glad that it finally worked for you!\n. @centralniak Thank you for reporting this. Sounds like a nice improvement to `xmltodict`, I would love to review and merge a pull request for this.\n. Thank you for reporting this, @kputland \nWould you mind writing a test case for this? Something with the minimal XML needed to reproduce it, the expected output and the actual output.\n. Thank you for the test case, @kputland. It seems you missed the \"minimal\" in\n\n> Something with the **minimal** XML needed to reproduce it, the expected output and the actual output.\n\nCould you please do that? There's a lot of info in that XML that is not necessary.\n. It's fixed now in master, @kputland . Thank you for reporting this bug, the fix will be out with the next release soon.\n. I agree it's much more pythonic. If someone figures out how to turn the SAX parser into a generator, I'd be glad to review and merge the pull request.\n. That's excellent news! I think that this can be a great contribution to `xmltodict`, as generators are much more pythonic than callbacks.\nCreating threads under the hood can be a very unexpected side-effect for the user, so I think we must first make sure that they will be destroyed every time they're not being used anymore, no matter how the iteration was stopped.\n. @mcrowson absolutely! If you pull the generator stuff to a standalone PR I'll take a look.. Thank you!\n. Looks good to me, thanks!\n. Wow, a Pull Request with documentation. That's not something you see very often, thank you so much!\n\nAbout `OrderedDict`, yes, it's a source of confusion. Maybe this can be fixed in a separate pull request.\n. @centralniak you can rebase now\n. I recently updated the Travis CI configuration to use the latest stable Jython release (2.7). Would you like to rebase and give it a try, @centralniak ?\n. Merged in df80377347259d434dbe3b86d3efcf27b16198ce. Thanks for the contribution!\n. Awesome, thanks!\n. @iyn The main reason back then was to avoid introducing an extra dependency. Now that I think about it better, maybe a good compromise would be to use `defusedexpat` if available and fall back to regular `expat` if not, and raise a security warning. What do you think of this as a default?\n. @iyn I understand. Is there an open issue at `defusedexpat` about Python 3.4 support that we can link to? Please leave a comment if the author gets back to you.\n. Absolutely, @kmonsoor. `xmltodict` is certainly lacking on the documentation side and your contributions will be very welcome. I have no preference on doing it one way or another, just do it however you feel more comfortable and I'll be happy to review the Pull Requests. Thank you!\n. Sorry for the delay! Lots of useful stuff here, indeed. I really appreciate the contribution, @jonlooney !\n\nThere are a few of these features that I would merge right away. The problem is that it's too many things mixed in one \"super-pull request\", and there's a few things that I'm not a fan of. It would be really helpful if you could split it into one pull request per feature, so we can discuss each separately.\n\nSome of the things that I really like:\n- Documentation! `xmltodict` is lacking in this aspect, so this is really helpful. Thanks!\n- Whitespace stripping enhancement.\n- LXML ElementTree parser.\n- Forced lists. This would mitigate a very common annoyance for `xmltodict` users.\n- Iterators/Generators.\n\nSome stuff that I don't like:\n- The `new_style` flag. If users don't a new version's backward-incompatible changes, they should just stick to an older version.\n- Index Keys. I understand it can be useful for some use cases, but I want to keep `xmltodict` simple and have only one XML->dict mapping logic.\n- New Classes. This library has to map between XML and Python standard library dicts. If users need a richer model, my opinion is that they should deal with the DOM/ElementTree/etc directly. There's plenty of libraries that provide that and `xmltodict` isn't trying to replace them.\n\nAgain, @jonlooney thanks a lot for the contribution. Let me know if you would like to take the trouble to split this into separate Pull Requests. Otherwise, I can go through the diff and cherry-pick the parts that I think are ready to merge.\n. @asandvig Thank you for your contribution. Could you please re-send it in pull request form so it's easier to review?\n. @KenetJervet is right, `xmltodict` expects unicode strings and won't try to decode binary UTF-8 encoded data.\n. I'd be glad to review and merge a pull request if proposed.\n. Please send a pull request with your proposed changes.\n. Have you looked at pull request #120? If it doesn't cover this use case, I'll be happy to review and merge any pull request as long as:\n\na) It doesn't complicate the simplest use cases.\nb) It has tests and documentation.\n. The guiding principle behind the design of xmltodict is to implement **one simple mapping** between XML and nested dict+list+string structures resembling what you would get from a JSON document, no more, no less. I have no intention of making xmltodict a full fledged XML processing framework and I think that features like the one proposed in this ticket come at the expense of the library's ease of use and code simplicity/maintainability.\n\nIMHO, if you're hitting xmltodict's limitations, you should use XPath over the excellent [lxml](http://lxml.de/).\n\nOf course I could be wrong, if so please prove it with a pull request that I'll be glad to review and merge as long as the library remains easy to use, simple and maintainable.\n. @SeanHayes You can already achieve this effect using this snippet:\n\n``` python\nfrom collections import defaultdict\nxmltodict.parse(xml, dict_constructor=lambda *args, **kwargs: defaultdict(list, *args, **kwargs))\n```\n. Please provide a test case or at least a code example to illustrate the issue.\n. Oh, sorry if I wasn't clear. I meant that it would be easier to troubleshoot if you provides snippet of Python code and an explanation of expected vs actual output. Something in the lines of:\n\n> If I run this:\n> \n> ``` python\n> xmltodict.parse('<a/>')\n> ```\n> \n> I get this:\n> \n> ``` python\n> {'a': None}\n> ```\n> \n> But I think `xmltodict` should return this instead:\n> \n> ``` python\n> {'a': ''}\n> ```\n. Duplicate of #63\n. Many thanks!\n. Awesome, thanks!\n. Thank you for the contribution! The change looks good to me. Do you have any benchmarks regarding the speed and memory improvements?\n. Wow, thanks for the benchmark @bharel, it's a simple change that makes a huge difference!\n. @kmonsoor There's no need for documentation, it's an internal data structure change that is completely transparent for the user. You still get a str in the end, the list is only used internally.\n. Thanks @daisieh for the contribution! `xmltodict` is definitely lacking on the documentation side, so this is very much appreciated.\n. Yes, there is. Just pass `strip_whitespace=False` to `xmltodict.parse`.\n. Great! Thank you for this contribution!\n. Could you please explain the purpose of this change?\n. Already implemented in #120 \n. Wow, good catch! Surprised nobody reported this before.\n. Thanks for this contribution, it looks promising! There's a couple of things that need to be fixed before merging:\n1. Tests are failing for Jython in the [Travis build](https://travis-ci.org/martinblech/xmltodict/builds/134104382). I can't merge this if it breaks the build.\n2. I don't see any test cases for round-trip support. Doesn't this require any changes in `unparse()`?\n. Thank you!\n. Thanks for this contribution! Please add some tests for this new feature.\n. Thanks again!\n. It looks like this is not an xmltodict issue. Can you provide an example of expected vs. actual output?\n. Docs is the area where this library is definitely lacking. Thank you!\n. This error is unrelated to `xmltodict`. The XML input is not well formed and this is making Expat fail (as it should).\n. Thank you!\n. It's not possible using attributes, but you can pass `force_list=True` instead.. I don't think xmltodict should go in the direction of interpreting the semantics of XML elements based on their names. This would also break the parse(unparse()) roundtrip feature.. Hi @timmwagener \r\n`xmltodict` tries to preserve order whenever possible: adds elements to lists in the order they're received from the parser and uses `OrderedDict` instead of plain `dict` if available. If you do find cases where order isn't preserved, please file them as a bug.\r\nThanks!. Thank you!. v0.11.0 is out: https://pypi.python.org/pypi/xmltodict/0.11.0. Looks like this is covered by #131, please reopen if you still have this issue with the latest release.. Merged #150, fixed.. Looks like this was covered by #150, please reopen if you still have this issue with v0.11.0.. You can pass `full_document=False` to `unparse` so it will skip the declaration altogether. This way you can take care of the declaration however you want.. There's no need to change xmltodict to support this use case. You could do something like this:\r\n\r\n```python\r\nsuperdict = {}\r\nfor filepath in filepaths:\r\n  superdict[filepath] = xmltodict.parse(open(filepath))\r\n```. The latest version of xmltodict disables XML entities by default for security reasons (see 86c3ed6f0e6ea8bb07f98a3f0730e88c34828c84). Just pass `disable_entities=False` if you need this.. Sure, my bad! Happy to merge if you send a PR with the change you'd like to see in the Changelog.. This is a duplicate of #63. Duplicate of #14. Please take a look at the discussion in #14 for possible workarounds. One simple solution is to pass `force_list=True`.. That's simply invalid XML, `xmltodict` will not attempt to fix it for you. It's easy to work around, though:\n\n``` python\ndef rootlessparse(doc):\n    return xmltodict.parse('<root>{0}</root>'.format(doc))['root']\n\nrootlessparse('''\n<test>0</test>\n<another>1</another>\n''') # this returns {u'test': u'0', u'another': u'1'}\n```\n. that's invalid xml, any sane xml parser should fail with it. you should escape your strings.\n\n``` python\n>>> xmltodict.parse('<x>&</x>')\nTraceback (most recent call last):\n  ...\nxml.parsers.expat.ExpatError: not well-formed (invalid token): line 1, column 4\n>>> xmltodict.parse('<x>&amp;</x>')\n{u'x': u'&'}\n```\n. `xmltodict` is based on the built-in `xml.parsers.expat` module. There's no way that I know of to stop `expat` from parsing a subtree and treat it as CDATA instead, but you could investigate further and come back with a pull request ;)\n. @slestak It's not a perfect solution for this scenario, as it would imply an unwanted and in some cases lossy XML->dict->XML transformation.\nIt is, however, a good idea for a useful general-purpose feature. I have forked this into a new issue [here](https://github.com/martinblech/xmltodict/issues/6) and will work on it.\n. fixed in release v0.3\n. With streaming mode, you can return a false-ish value from your callback function to stop parsing. If this doesn't solve your issue, can you provide a concrete example?\n. I get it. In this case, you should use a `postprocessor`, not the streaming mode.\nThe postprocessing function gets three arguments in (`path`, `key` and `value`) and must return a `(key, value)` tuple or `None` to skip the node altogether.\n\nIf you want to skip odd `<item>`s, you should do something like this:\n\n``` python\nxml = '''\n<doc>\n    <item>Item1</item>\n    <item>Item2</item>\n    <item>Item3</item>\n    <item>Item4</item>\n</doc>'''\n\nclass SkipOddValues:\n    def __init__(self, key):\n        self.key = key\n        self.count = 0\n\n    def __call__(self, path, key, value):\n        if key != self.key:\n            return key, value\n        self.count += 1\n        if self.count % 2 == 1:\n            return None\n        else:\n            return key, value\n\ndoc = xmltodict.parse(xml, postprocessor=SkipOddValues('item'))\n```\n. Welcome!\n. I'm not sure I understand. Can you explain a bit further, with a code example if possible?\n. Got it! It does sound like a nice to have a feature. I'll give it a look.\n. Something like that?\n. Welcome! It's out in v0.4.\n. `cdata_separator='\\n'` should do (no need to `force_cdata`)\n. @dubanoze describe issue not\n. That's great news!\n\nThe patch looks good to me, I will ship it with 0.4.2.\n\nThanks!\n. Done: http://pypi.python.org/pypi/xmltodict/0.4.2\n. I would, because I'm a human being and I know `children` is the plural form of `child`. The only thing `xmltodict` knows, though, is that it has only found one value for the `child` node (same way as with `root`, `children` and `name`), so there's no need for iterable objects there.\n\nYou can easily work around this by using a custom `dict_constructor` that always starts off with empty lists as values, i.e.:\n\n``` python\nfrom collections import defaultdict\nxmltodict.parse(xml, dict_constructor=lambda *args, **kwargs: defaultdict(list, *args, **kwargs))\n```\n. @foxx I understand it can be annoying, but I think the other option is even worse. For example, with this XML:\n\n``` xml\n<config>\n  <settings>\n    <value1>0</value1>\n    <value2>false</value2>\n  </settings>\n  <logging>\n    <value3>1</value3>\n    <value4>true</value4>\n  </logging>\n</config>\n```\n\nI would expect a `dict` like this:\n\n``` python\n{\n    \"config\": {\n        \"settings\": {\n            \"value1\": \"0\",\n            \"value2\": \"false\"\n        },\n        \"logging\": {\n            \"value3\": \"1\",\n            \"value4\": \"true\"\n        },\n    }\n}\n```\n\nBut with your proposal I would get this instead:\n\n``` python\n{\n    \"config\": [{\n        \"settings\": [{\n            \"value1\": [\"0\"],\n            \"value2\": [\"false\"]\n        }],\n        \"logging\": [{\n            \"value3\": [\"1\"],\n            \"value4\": [\"true\"]\n        }],\n    }]\n}\n```\n\nIn order to access the configuration values, you would have to use `d['config'][0]['settings'][0]['value1'][0]` instead of `d['config']['settings']['value1']`. Other users might think this is surprising behavior too, so I believe which option is better depends on the use case.\n\nAlso, the Python standard library doesn't have a `DefaultDict` that is also an `OrderedDict`. If I followed your suggestion and used `DefaultDict` in the next release, `xmltodict` would lose the elements' ordering information, which could also be surprising for some use cases (and break code that depends on this).\n. The best we can do about this is improve the documentation, I think. @foxx, what would you add to the README to make this behavior less surprising?\n. @kadnan @candlerb this feature is already out in the 0.10.1 release. Which version are you running on? I just did a fresh install and it worked fine:\n\n``` sh\n$ pip install xmltodict\nCollecting xmltodict\n  Downloading xmltodict-0.10.1.tar.gz\nBuilding wheels for collected packages: xmltodict\n  Running setup.py bdist_wheel for xmltodict ... done\n  Stored in directory: /Users/martinblech/Library/Caches/pip/wheels/06/23/c0/b5e91910dc6261d118f437bc4c487972e3b00147e09372f8bc\nSuccessfully built xmltodict\nInstalling collected packages: xmltodict\nSuccessfully installed xmltodict-0.10.1\n$ python\nPython 2.7.11 (default, Feb 22 2016, 19:49:39)\n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import xmltodict\n>>> xml = '''\n... <stuff>\n...   <foo>.1.</foo>\n...   <bar>.2.</bar>\n...   <bar>.3.</bar>\n...   <foo>.4.</foo>\n...   <bar>.5.</bar>\n... </stuff>\n... '''\n>>> xmltodict.parse(xml, force_list={'stuff': True})\nOrderedDict([(u'stuff', [OrderedDict([(u'foo', [u'.1.', u'.4.']), (u'bar', [u'.2.', u'.3.', u'.5.'])])])])\n>>>\n```\n. No problem, glad it worked in the end.\n. You can use a postprocessor for that:\n\n``` python\ndef postprocessor(path, key, value):\n    try:\n        value = value.strip()\n        if not value:\n            return None\n    except:\n        pass\n    return key, value\n\no = xmltodict.parse( infile.read() , postprocessor=postprocessor);\njson.dump( o , outfile, indent=2 )\n```\n\nand get this out:\n\n``` javascript\n\"Service\": {\n  \"kind\": \"1\"\n}\n```\n\nHowever, this should be the default behavior. Use this as a workaround while I fix this for a new release. Thanks!\n. fixed with this commit by @slestak https://github.com/martinblech/xmltodict/commit/2c2b4601e640481bd0ea5c3bf0c22d883eca47e5\n. what's up with the unit tests?\n. I see the test is failing because your expected dict doesn't have a `'emptya'` key. We don't want to completely lose that node, but check that it's value is `None` (as if all that whitespace wasn't there).\n. Looks good now!\n. Unicode support can be quite difficult to achieve on both python 2 and 3 with the same codebase. I will look into this.\n. Fixed with commit 75f885bfc81a7d95e885e81e94330ff9827b6e6f\n. That's correct, `unparse()` is officially done but still undocumented. Thanks for pointing it out!\nAre you using it? Can you try to come up with a small example for the `README`?\n. Now there's an example in `README.md`, but I'm leaving this issue open until I find the time to write the docstring.\n. Looks great. Thank you a lot for the contribution!\n. @LORDofDOOM It's breaking the Travis build. Have you investigated why? https://travis-ci.org/martinblech/xmltodict/builds/6913744\n. Conversions like this don't belong in the core library, as `xmltodict` should not be tied to specific types of XML. The recommended way of doing this is using a `postprocessor`. Thanks for the input!\n. You are welcome!\n. I will definitely consider it for the next release. Thank you for your input!\n. You can start using it in v0.5.0, just released. `xmltodict` still defaults to the built-in `expat`, but you can pass `defusedexpat.pyexpat` instead using the `expat` parameter, just look at `parse()`'s docstring.\n. I like the idea: pretty-printing is surely a useful feature. However, I'm not sure I like the approach. You are extending `XMLGenerator` but then completely overriding the core `startElement()`, `endElement()` and `characters()` methods. I would bet there are corner cases that the new implementation doesn't cover but `XMLGenerator` does.\n\nI think the right, robust way to do this is by leaving `XMLGenerator` untouched and modifying our own `_emit` function to pass a `depth` parameter to itself and call `content_handler.ignorableWhitespace()` appropriately.\n\nI will close this pull request but keep [this issue](https://github.com/martinblech/xmltodict/issues/26) open. Thank you for opening up the discussion!\n. @ahalbert I'm just pinging you to let you know I finally got around to implementing pretty print in `unparse()`, in case you would like to start using it. Cheers!\n. > I think the right, robust way to do this is by leaving XMLGenerator untouched and modifying our own _emit function to pass a depth parameter to itself and call content_handler.ignorableWhitespace() appropriately.\n. I'm glad you found it useful. The `KeyError` means the `article` dict doesn't have a `'title'` key. Have you tried debugging your script? What keys does the `article` dict have? Sometimes a few `print`s can help a lot!\n. You should at least print the exception stack trace, `error` alone doesn't say much. You could also print the whole untouched `page` object to see exactly what your callback function is being called with.\n. You should the `json` module to turn it into JSON, e.g.:\n\n``` python\n> import xmltodict\n>>> foo = xmltodict.parse(\"\"\"<?xml version=\"1.0\" ?>\n...         <person>\n...           <name>john</name>\n...           <age>20</age>\n...         </person>\"\"\")\n>>> print json.dumps(foo)\n{\"person\": {\"name\": \"john\", \"age\": \"20\"}}\n```\n\n`OrderedDict` is just a `dict` that preserves key order (makes sure that if you round-trip that object to XML, `name` will always come before `age`).\n. Looks like a reasonable fallback. Thanks for the contribution!\n. I certainly didn't start the project with namespaces in mind, as you probably guessed from their complete absence in the examples and tests.\n\nYour use case doesn't seem very complicated. I will have a look at it and see how much `pyexpat` can help me in this direction. I would love to add this feature if it doesn't bloat `xmltodict` for the simplest use cases.\n\nThanks for your input!\n. @tomstrummer\nWhat's exactly the role of the `namespaces` dict argument in your example? I see that it has entries for `one='http://one.com'` and `two='http://two.com'`, but `three` is missing, but as far as I can see, `one`, `two` and `three` are treated equally in your example's output.\n\nWhat difference does it make for a namespace to be present or missing in `namespaces`?\n. @tomstrummer Ok, it should have been there. But what if it wasn't? What would be a reasonable default behavior for `xmltodict` in case it bumps into a namespace that is not among the values of the `namespaces` dict? Should it raise an exception?\n\nI'm just trying to figure out what's the purpose of the `namespaces` dict in your example.\n. Fixed with release 0.7.0\n. Looks good to me. Thanks for the contribution!\n. This is a duplicate of #14. Unfortunately, there is no easy way for `xmltodict` to know beforehand which elements are supposed to be `list`s and which are supposed to be single elements. I can think of 2 workarounds for this:\n- The `dict_constructor` approach I described in #14, in which case _all_ values will be `list`s (`doc['root'][0]['abc'][1]['tr'] == ['four']`).\n- Writing your own `postprocessor` that cherry picks the values that should be converted to lists in your particular type of document.\n. @tomstrummer will something like this do?\n. You should `return True` from your callback function, e.g.:\n\n``` python\ndef handle_artist(_, artist):\n    print artist['name']\n    return True\n```\n\nReturning a falsy value (such as `None` in your case) makes `xmltodict` stop parsing and raise a `ParsingInterrupted` exception.\n. But then I realise the example in the README is wrong. Good find, thanks!\n. @AlexMikhalev did it work for you after adding `return True`?\n. Thank you for the contribution, but I think you can already achieve this by passing [jsobject](https://pypi.python.org/pypi/jsobject) or [AttrDict](http://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute-in-python) as `dict_constructor` to `parse()`.\n\nThis functionality is not core to `xmltodict`, and since you can already get it with help from another module that's available on PyPI, I don't think it's necessary to merge these changes.\n. I meant passing it as `dict_constructor` to `parse()`, overriding the default (`OrderedDict`), e.g.:\n\n``` python\n>>> xd.parse(x, dict_constructor=jo.JSObject)\n```\n\nDoesn't this work for you?\n. @rjbez17 Doing it this way also more efficient, as `xmltodcit` creates `JsObject`s right away, instead of creating regular `dict`s and throwing them away after converting them to `XMLObject`s in the end. Also, it's less code to maintain!\n\nI would be happy to merge a pull request documenting this in the README, though... :wink: :wink:\n. I don't see the issue here. If you want to compare two documents, it doesn't make a difference at all whether you use `OrderedDict` or a regular `dict`:\n\n``` python\n>>> from collections import OrderedDict\n>>> OrderedDict([('a', 'b')]) == {'a': 'b'}\nTrue\n```\n\nHowever, if you don't want to use `OrderedDict`s at all and just want to use regular `dict`s all over, it's easy to override the default behavior using the `dict_constructor` parameter:\n\n``` python\n>>> import xmltodict\n>>> xmltodict.parse('<a>b</a>', dict_constructor=dict)\n{u'a': u'b'}\n```\n. Thanks @qixiuying for reporting this! @alesdotio You are right, I have to include `distribute_setup.py` in the package.\n\nI just removed this buggy release and reverted to v0.7.0 until I get the time to fix it.\n. Fixed with release 0.8.1\n. I've just upgraded `xmltodict` to the latest version of `setuptools`. Can you try `pip install xmltodict==0.8.2` and see if it works now?\n. Can you try 0.8.3 now? It now tries to use your system's `setuptools` if available before attempting to install 1.1.6. It worked for me locally.\n. welcome! thanks for reporting this!\n. It's not incorrect, it's just one of the possible ways of handling lists. What matters is that `unparse()` is consistent with `parse()` and roundtrips correctly.\n\nI understand that this way of handling lists can be annoying for your use case, but if I changed xmltodict to your convenience I still wouldn't be able to make everyone happy. If this:\n\n``` python\n{\n  'response': {\n    'versions': [\n      {'version': 1},\n      {'version': 2}\n    ]\n  }\n}\n```\n\n`unperse`s to:\n\n``` xml\n<response>\n  <versions>\n    <version>1</version>\n    <version>2</version>\n  </versions>\n</response>\n```\n\nThen it means that this:\n\n``` xml\n<settings>\n  <bind>localhost</bind>\n  <bind>192.168.1.1</bind>\n  <port>8080</port>\n</settings>\n```\n\nhas to `parse` to:\n\n``` python\n{\n  'settings': [\n    {'bind': 'localhost'},\n    {'bind': '192.168.1.1'},\n    {'port': '8080'}\n  ]\n}\n```\n\nWhich would be a pain to use, compared with this, which is the current behavior:\n\n``` python\n{\n  'settings': {\n    'bind': ['localhost', '192.168.1.1'],\n    'port': '8080'\n  }\n}\n```\n. That's what the `strip_whitespace` argument is for: deciding whether to strip whitespace or not. It defaults to `True`, but if you pass `False` you get what you're looking for:\n\n``` python\n>>> xml = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n... <service>\n...     <key>\n...         <name>SEPARATOR</name>\n...         <value>&#009;</value>\n...     </key>\n... </service>\n... '''\n>>> doc = xmltodict.parse(xml, strip_whitespace=False)\n>>> doc['service']['key']['value']\nu'\\t'\n```\n. @chrismatta @grzn @lovato thanks for your input. This issue should have been fixed with release 0.8.4. Could you please verify this is so from your side? Thanks!\n. @neildd looks good, thanks! The only thing missing is a python 2.4 line in `.travis.yml`. Can you do that?\n. @twcook I'm unable to reproduce this error. What platform did this happen on? Were you using virtualenv?\n. I setup a clean Ubuntu 12.10 virtual machine, but I still cannot reproduce the error, xmltodict installs just fine.\n\n@twcook I could try again, but I need step by step instructions to reproduce it in a local environment.\n. The proposed change breaks a large number of test cases: https://travis-ci.org/martinblech/xmltodict/builds/15720916\n\nCould you clarify the issue a bit further and provide a code example?\n. @dada2801 beginning with 0.8.5, `xmltodict` is letting the `expat` XML parser take care of choosing the correct encoding.\n. That's sounds like a nice feature, thanks. I will give it some thought as of how to implement it.\n. @megahall I think it's not a bug: you cannot have a XML document with more than one root node. You should wrap that dict inside another dict with a single key:\n\n``` python\n{\n    \"root\": {\n        \"@name\": \"dbl-test\",\n        \"description\": \"dbl-test\",\n        \"recurring\": {\n            \"hourly\": {\n                \"at\": \"00\"\n            }\n        },\n        \"type\": \"ip\",\n        \"url\": \"http://192.168.1.6:8080/pa-dbl.txt\"\n    }\n}\n```\n\nOtherwise, what XML opening tag should the `@name` attribute belong to?\n. That's awesome, thank you for this contribution!\n. @skela You should leave out `<![CDATA[\u2026]]>` from your `val`. `xmltodict` will take care of the escaping/unescaping for you, so you shouldn't attempt to introduce XML escaping characters into the values. The right thing to do is just have `val = '<a href=\"http://www.space.com\">Hi my name is Bob</a>'`.\n. It's just not possible to do this with xmltodict, it's not what the library is intended for.\n. @walko1234 there's no builtin solution, but you could use some DefaultOrderedDict recipe such as [this](http://stackoverflow.com/questions/4126348/how-do-i-rewrite-this-function-to-implement-ordereddict/4127426#4127426).\n. @fyears Thank you for your input. You can already do this if you pass `dict_constructor=dict` to the `parse()` function, as in #39.\n. Yes, I'm afraid it's kinda hidden. I could definitely use some help with\nthe documentation!\nOn Apr 15, 2014 11:40 PM, \"fyears\" notifications@github.com wrote:\n\n> Wow! There's a hidden feature! I should have a good look at the source\n> code first!\n> \n> Thank you. :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/59#issuecomment-40557514\n> .\n. @fyears I appreciate your contribution, but do not think it belongs as part of the library.\n\n`xmltodict` aims at doing just one thing and doing it well: it turns a valid XML document into a `dict` and vice versa. Even though it might be useful in your own particular scenario, the `raw_text()` function produces invalid XML.\n. @sbadia Sure, no problem! It's done: https://pypi.python.org/pypi/xmltodict/0.9.0\n. @sbadia Are you going to create/maintain an official Debian package for xmltodict? Or is this just for a private .deb?\n. @sbadia awesome, thanks!\n. thanks @sbadia !\n. @dgonyier I don't have a Windows box at reach at the moment, so I cannot reproduce it. It's great that you figured this out on your own, this thread can now be used as reference in case someone googles for this error.\n. @BlackMan82 You are right, it seems that `xmltodict` does not follow the spec for semi-structured XML nodes.\n\nWe should detect such cases and have `xmltodict` behave as specified, it would make much more sense:\n\n``` python\n>>> xmltodict.parse('<e>some<a>textual</a>content</e>')\n{'e': 'some<a>textual</a>content'}\n```\n\nI'm still wondering what to do with unparse in this case, though. If I leave it as it is, it would escape `<`s and `>`s, something we don't want:\n\n``` python\n>>> xmltodict.unparse({'e': 'some<a>textual</a>content'}, full_document=False)\n'<e>some&lt;a&gt;textual&lt;/a&gt;content</e>'\n```\n. @joohoi Not much, sorry!\n\nSince `xmltodict` uses SAX, not DOM, by the time it's able to detect semi-structured XML, it's already too late to process it differently. It would have to backtrack and unparse what has been parsed so far, or else switch to DOM, which would mean rewriting the whole library from scratch.\n\nPerhaps I'm missing some other alternative, so I'm definitely open to reading proposals or looking at pull requests.\n. While I do appreciate it and thank you for taking the time to write this long proposal, I do not see something like this happening to `xmltodict`.\n\n`xmltodict` aims to be a very simple library that implements **just one** of the many possible ways one can map XML to and from JSON-like structures. This particular mapping works fine for some simple use cases, but unfortunately it does not for other more complex ones, such as the ones you mention. It does not feature type coercion, meta processing directives nor attribute sniffing. This is by design.\n\nI do understand that your proposed features must make a lot of sense in your context, so I would like to encourage you to either:\n- Implement all this and submit a Pull Request, so I can review the impact of this added complexity on code maintainability, backwards compatibility and usefulness for the originally intended, simple scenarios. I promise to reconsider my position once I see the implementation and tests.\n- Fork `xmltodict` and build your own XML processing library on top of it.\n. That's great, thank you for this PR. The only thing missing would be a new entry in the `matrix/exclude` section to avoid running the tests twice on jython.\n\n``` yaml\n matrix:\n    exclude:\n      - python: \"2.6\"\n        env: JYTHON=true\n      - python: \"2.7\"\n        env: JYTHON=true\n      - python: \"3.2\"\n        env: JYTHON=true\n      - python: \"3.3\"\n        env: JYTHON=true\n+       - python: \"3.4\"\n+         env: JYTHON=true\n```\n. Perfect! Thanks, @frewsxcv \n. @taylormattison Thank you for reporting this. It was actually a problem with the `README`: it was missing the `process_namespaces=True` parameter.\n. @ZoomQuiet Please have a look at #14 for a workaround.\n. @CamyDee Looking forward to see some progress with your fork!\n. I'm sorry, the streaming mode is a bit lacking on the documentation side. Fortunately, the attributes are not lost but passed to the callback as the `path` argument, e.g.:\n\n``` python\ndef cb(path, item):\n    print path, item\n    return True\n\nxmltodict.parse(open(xmlfile), item_depth=2, item_callback=cb)\n[(u'items', None), (u'item', OrderedDict([(u'attr', u'hello')]))] OrderedDict([(u'inner', u'value'), (u'inner2', u'value2')])\n```\n. @pySilver I guess the workaround does work for your use case, but I'm not sure this is would be the correct thing to do. If a l list with N items produces N XML nodes, the logical conclusion should be that a list with 0 items must produce no XML nodes at all, not one empty node:\n\n``` python\n>>> print unparse({'a': {'b': [1, 2, 3]}}, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<a>\n    <b>1</b>\n    <b>2</b>\n    <b>3</b>\n</a>\n>>> print unparse({'a': {'b': [1, 2]}}, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<a>\n    <b>1</b>\n    <b>2</b>\n</a>\n>>> print unparse({'a': {'b': [1]}}, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<a>\n    <b>1</b>\n</a>\n>>> print unparse({'a': {'b': []}}, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<a>\n</a>\n```\n. @pySilver I understand, in some use cases (such as yours) it makes more sense to do it that way. I just think that it's not right to force that behavior on all the other users, it's less logical and might not be what they want.\n. @Telofy thank you for reporting this issue, but I am unable to reproduce it locally. Here's the whole interactive Python session:\n\n``` python\n>>> from urllib2 import urlopen\n>>> from xmltodict import parse, unparse\n>>> feed = urlopen('https://gist.githubusercontent.com/Telofy/241ca0d28edaef732153/raw/70b9228ee374a285397319ce97b0d8dbf227b278/master.atom')\n>>> print unparse(parse(feed), pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:media=\"http://search.yahoo.com/mrss/\" xml:lang=\"en-US\">\n    <id>tag:github.com,2008:/OParl/specs/commits/master</id>\n    <link type=\"text/html\" rel=\"alternate\" href=\"https://github.com/OParl/specs/commits/master\"></link>\n    <link type=\"application/atom+xml\" rel=\"self\" href=\"https://github.com/OParl/specs/commits/master.atom\"></link>\n    <title>Recent Commits to specs:master</title>\n    <updated>2014-07-28T17:01:14+02:00</updated>\n\u2026\n    <entry>\n        <id>tag:github.com,2008:Grit::Commit/53f3af90949c69f0fd9860200077d039107ef2c2</id>\n        <link type=\"text/html\" rel=\"alternate\" href=\"https://github.com/OParl/specs/commit/53f3af90949c69f0fd9860200077d039107ef2c2\"></link>\n        <title>oparl:Person: title: Beschreibung ge\u00e4ndert</title>\n        <updated>2014-07-12T18:11:25+02:00</updated>\n        <media:thumbnail height=\"30\" width=\"30\" url=\"https://avatars2.githubusercontent.com/u/273727?v=2&amp;s=30\"></media:thumbnail>\n        <author>\n            <name>marians</name>\n            <uri>https://github.com/marians</uri>\n        </author>\n        <content type=\"html\">&lt;pre style='white-space:pre-wrap;width:81ex'&gt;oparl:Person: title: Beschreibung ge\u00e4ndert\n\nString an erste Stelle&lt;/pre&gt;</content>\n    </entry>\n    <entry>\n        \u2026\n    </entry>\n\u2026\n</feed>\n```\n\nAll the `<entry>` - `</entry>` balance out correctly. I can subsequently feed the resulting XML to a XML parser and it shows no validation errors.\n\nCould you try to isolate this issue into a test case and submit a pull request for that instead?\n. No problem, glad you solved it!\n. @karantan this is a duplicate of #14, please have a look at that conversation for a workaround\n. That's correct @kmonsoor, xmltodict could use some help with documentation, especially about the streaming mode. \n. @arikscore Thank you for reporting this. `xmltodict` takes care of mapping a XML tree to a set of nested dictionaries, lists and strings. It won't deal with XMLSchema semantics, that level of abstraction is up to the user.\n. @kolis binary mode is the correct way to do this, not a workaround. The XML parser expects bytes as input and takes care of the conversion from bytes to unicode.. I didn't make the parser, can't say. Try asking in stackoverflow.com, someone out there might know.. Thank you for reporting this. It's a known issue, but still haven't figured out a practical way to solve it. Please have a look at #63.\n. No problem. Updated the description of issue #78 with the improved formatting.\n. Thanks @JKillian for the idea, it will be available in the next release.\n. Thank you for reporting this edge case, @JKillian . It's fixed in 0.9.2 which is already published in PyPI.\n. This is not a `xmltodict` issue. Python dictionaries raise `KeyError` when you try to access a nonexistent key, that's just how they work, and I don't think `defaultdict` will help you either.\n\nMaybe you could post this `res['foo']['bar']['might']['exist']` example in [Stackoverflow](http://stackoverflow.com), since this is more of a general Python question, perhaps you will get more help over there. Good luck!\n. I don't see an issue here, there's nothing random about it. The following XML:\n\n``` xml\n<namespaces>\n      <namespace key=\"-2\" case=\"first-letter\">Media</namespace>\n      <namespace key=\"-1\" case=\"first-letter\">Special</namespace>\n</namespaces>\n```\n\nMaps to a `dict` like this:\n\n``` python\n{\n    \"namespaces\": {\n        \"namespace\": [{\n            \"key\": \"-2\",\n            \"case\": \"first-letter\",\n            \"#text\": \"Media\"\n        }, {\n            \"key\": \"-1\",\n            \"case\": \"first-letter\",\n            \"#text\": \"Special\"\n        }]\n    }\n}\n```\n. @xtiansimon The only difference between `dict` and `OrderedDict` is that the latter preserves key insertion order while the former doesn't. We can safely ignore this here.\n\nThere is nothing random about this behavior, it's just a duplicate of issue #14. Please have a look there to see the discussion and some possible workarounds.\n. Thank you for reporting this, @rotten \nCould you please provide a code example with expected and actual output?\n. The problem is not related with `xmltodict` at all, it's just that you are not building the `OrderedDict`s correctly.\n\nThe constructor takes a list of key/value tuples as parameter, but you are passing a `dict` instead, which has already lost the ordering information before the `OrderedDict` is even created. Please have a look at the [official documentation](https://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes).\n. No problem, @rotten , I'm glad that it finally worked for you!\n. @centralniak Thank you for reporting this. Sounds like a nice improvement to `xmltodict`, I would love to review and merge a pull request for this.\n. Thank you for reporting this, @kputland \nWould you mind writing a test case for this? Something with the minimal XML needed to reproduce it, the expected output and the actual output.\n. Thank you for the test case, @kputland. It seems you missed the \"minimal\" in\n\n> Something with the **minimal** XML needed to reproduce it, the expected output and the actual output.\n\nCould you please do that? There's a lot of info in that XML that is not necessary.\n. It's fixed now in master, @kputland . Thank you for reporting this bug, the fix will be out with the next release soon.\n. I agree it's much more pythonic. If someone figures out how to turn the SAX parser into a generator, I'd be glad to review and merge the pull request.\n. That's excellent news! I think that this can be a great contribution to `xmltodict`, as generators are much more pythonic than callbacks.\nCreating threads under the hood can be a very unexpected side-effect for the user, so I think we must first make sure that they will be destroyed every time they're not being used anymore, no matter how the iteration was stopped.\n. @mcrowson absolutely! If you pull the generator stuff to a standalone PR I'll take a look.. Thank you!\n. Looks good to me, thanks!\n. Wow, a Pull Request with documentation. That's not something you see very often, thank you so much!\n\nAbout `OrderedDict`, yes, it's a source of confusion. Maybe this can be fixed in a separate pull request.\n. @centralniak you can rebase now\n. I recently updated the Travis CI configuration to use the latest stable Jython release (2.7). Would you like to rebase and give it a try, @centralniak ?\n. Merged in df80377347259d434dbe3b86d3efcf27b16198ce. Thanks for the contribution!\n. Awesome, thanks!\n. @iyn The main reason back then was to avoid introducing an extra dependency. Now that I think about it better, maybe a good compromise would be to use `defusedexpat` if available and fall back to regular `expat` if not, and raise a security warning. What do you think of this as a default?\n. @iyn I understand. Is there an open issue at `defusedexpat` about Python 3.4 support that we can link to? Please leave a comment if the author gets back to you.\n. Absolutely, @kmonsoor. `xmltodict` is certainly lacking on the documentation side and your contributions will be very welcome. I have no preference on doing it one way or another, just do it however you feel more comfortable and I'll be happy to review the Pull Requests. Thank you!\n. Sorry for the delay! Lots of useful stuff here, indeed. I really appreciate the contribution, @jonlooney !\n\nThere are a few of these features that I would merge right away. The problem is that it's too many things mixed in one \"super-pull request\", and there's a few things that I'm not a fan of. It would be really helpful if you could split it into one pull request per feature, so we can discuss each separately.\n\nSome of the things that I really like:\n- Documentation! `xmltodict` is lacking in this aspect, so this is really helpful. Thanks!\n- Whitespace stripping enhancement.\n- LXML ElementTree parser.\n- Forced lists. This would mitigate a very common annoyance for `xmltodict` users.\n- Iterators/Generators.\n\nSome stuff that I don't like:\n- The `new_style` flag. If users don't a new version's backward-incompatible changes, they should just stick to an older version.\n- Index Keys. I understand it can be useful for some use cases, but I want to keep `xmltodict` simple and have only one XML->dict mapping logic.\n- New Classes. This library has to map between XML and Python standard library dicts. If users need a richer model, my opinion is that they should deal with the DOM/ElementTree/etc directly. There's plenty of libraries that provide that and `xmltodict` isn't trying to replace them.\n\nAgain, @jonlooney thanks a lot for the contribution. Let me know if you would like to take the trouble to split this into separate Pull Requests. Otherwise, I can go through the diff and cherry-pick the parts that I think are ready to merge.\n. @asandvig Thank you for your contribution. Could you please re-send it in pull request form so it's easier to review?\n. @KenetJervet is right, `xmltodict` expects unicode strings and won't try to decode binary UTF-8 encoded data.\n. I'd be glad to review and merge a pull request if proposed.\n. Please send a pull request with your proposed changes.\n. Have you looked at pull request #120? If it doesn't cover this use case, I'll be happy to review and merge any pull request as long as:\n\na) It doesn't complicate the simplest use cases.\nb) It has tests and documentation.\n. The guiding principle behind the design of xmltodict is to implement **one simple mapping** between XML and nested dict+list+string structures resembling what you would get from a JSON document, no more, no less. I have no intention of making xmltodict a full fledged XML processing framework and I think that features like the one proposed in this ticket come at the expense of the library's ease of use and code simplicity/maintainability.\n\nIMHO, if you're hitting xmltodict's limitations, you should use XPath over the excellent [lxml](http://lxml.de/).\n\nOf course I could be wrong, if so please prove it with a pull request that I'll be glad to review and merge as long as the library remains easy to use, simple and maintainable.\n. @SeanHayes You can already achieve this effect using this snippet:\n\n``` python\nfrom collections import defaultdict\nxmltodict.parse(xml, dict_constructor=lambda *args, **kwargs: defaultdict(list, *args, **kwargs))\n```\n. Please provide a test case or at least a code example to illustrate the issue.\n. Oh, sorry if I wasn't clear. I meant that it would be easier to troubleshoot if you provides snippet of Python code and an explanation of expected vs actual output. Something in the lines of:\n\n> If I run this:\n> \n> ``` python\n> xmltodict.parse('<a/>')\n> ```\n> \n> I get this:\n> \n> ``` python\n> {'a': None}\n> ```\n> \n> But I think `xmltodict` should return this instead:\n> \n> ``` python\n> {'a': ''}\n> ```\n. Duplicate of #63\n. Many thanks!\n. Awesome, thanks!\n. Thank you for the contribution! The change looks good to me. Do you have any benchmarks regarding the speed and memory improvements?\n. Wow, thanks for the benchmark @bharel, it's a simple change that makes a huge difference!\n. @kmonsoor There's no need for documentation, it's an internal data structure change that is completely transparent for the user. You still get a str in the end, the list is only used internally.\n. Thanks @daisieh for the contribution! `xmltodict` is definitely lacking on the documentation side, so this is very much appreciated.\n. Yes, there is. Just pass `strip_whitespace=False` to `xmltodict.parse`.\n. Great! Thank you for this contribution!\n. Could you please explain the purpose of this change?\n. Already implemented in #120 \n. Wow, good catch! Surprised nobody reported this before.\n. Thanks for this contribution, it looks promising! There's a couple of things that need to be fixed before merging:\n1. Tests are failing for Jython in the [Travis build](https://travis-ci.org/martinblech/xmltodict/builds/134104382). I can't merge this if it breaks the build.\n2. I don't see any test cases for round-trip support. Doesn't this require any changes in `unparse()`?\n. Thank you!\n. Thanks for this contribution! Please add some tests for this new feature.\n. Thanks again!\n. It looks like this is not an xmltodict issue. Can you provide an example of expected vs. actual output?\n. Docs is the area where this library is definitely lacking. Thank you!\n. This error is unrelated to `xmltodict`. The XML input is not well formed and this is making Expat fail (as it should).\n. Thank you!\n. It's not possible using attributes, but you can pass `force_list=True` instead.. I don't think xmltodict should go in the direction of interpreting the semantics of XML elements based on their names. This would also break the parse(unparse()) roundtrip feature.. Hi @timmwagener \r\n`xmltodict` tries to preserve order whenever possible: adds elements to lists in the order they're received from the parser and uses `OrderedDict` instead of plain `dict` if available. If you do find cases where order isn't preserved, please file them as a bug.\r\nThanks!. Thank you!. v0.11.0 is out: https://pypi.python.org/pypi/xmltodict/0.11.0. Looks like this is covered by #131, please reopen if you still have this issue with the latest release.. Merged #150, fixed.. Looks like this was covered by #150, please reopen if you still have this issue with v0.11.0.. You can pass `full_document=False` to `unparse` so it will skip the declaration altogether. This way you can take care of the declaration however you want.. There's no need to change xmltodict to support this use case. You could do something like this:\r\n\r\n```python\r\nsuperdict = {}\r\nfor filepath in filepaths:\r\n  superdict[filepath] = xmltodict.parse(open(filepath))\r\n```. The latest version of xmltodict disables XML entities by default for security reasons (see 86c3ed6f0e6ea8bb07f98a3f0730e88c34828c84). Just pass `disable_entities=False` if you need this.. Sure, my bad! Happy to merge if you send a PR with the change you'd like to see in the Changelog.. This is a duplicate of #63. Duplicate of #14. Please take a look at the discussion in #14 for possible workarounds. One simple solution is to pass `force_list=True`.. ",
    "corey-p": "Thank you for the correction.\n. Thank you for the correction.\n. ",
    "johnmaxwelliv": "Woops, looks like I typed xml2dict instead of xmltodict.  Sorry!\n. Woops, looks like I typed xml2dict instead of xmltodict.  Sorry!\n. ",
    "slestak": "What about a callback to do some post processing on the resulting dict? For\nsimplicity, let it parse normally, then transform the dictionary as needed.\nOn Nov 6, 2012 1:05 PM, \"Mart\u00edn Blech\" notifications@github.com wrote:\n\n> xmltodict is based on the built-in xml.parsers.expat module. There's no\n> way that I know of to stop expat from parsing a subtree and treat it as\n> CDATA instead, but you could investigate further and come back with a pull\n> request ;)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/5#issuecomment-10120792.\n. Yes, leave it open.  I have a pull request I am working on right now.\n\nOn Tue, Feb 12, 2013 at 5:08 PM, Thomas D notifications@github.com wrote:\n\n> This is a good workaround.\n> Shall I leave the issue opened until there is a fix in the new release?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/15#issuecomment-13462056.\n. Take a look at my repo now.  I have adjusted the cdata logic at line 87, however, the unit test does not pass now.\n. the one i added (that passed with the permanent postprocess implementation)\nis no longer passing.  take a look at test_skip_whitespace()\n\nOn Thu, Feb 14, 2013 at 4:24 PM, Mart\u00edn Blech notifications@github.comwrote:\n\n> what's up with the unit tests?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/pull/16#issuecomment-13579389.\n. What about a callback to do some post processing on the resulting dict? For\nsimplicity, let it parse normally, then transform the dictionary as needed.\nOn Nov 6, 2012 1:05 PM, \"Mart\u00edn Blech\" notifications@github.com wrote:\n\n> xmltodict is based on the built-in xml.parsers.expat module. There's no\n> way that I know of to stop expat from parsing a subtree and treat it as\n> CDATA instead, but you could investigate further and come back with a pull\n> request ;)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/5#issuecomment-10120792.\n. Yes, leave it open.  I have a pull request I am working on right now.\n\nOn Tue, Feb 12, 2013 at 5:08 PM, Thomas D notifications@github.com wrote:\n\n> This is a good workaround.\n> Shall I leave the issue opened until there is a fix in the new release?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/15#issuecomment-13462056.\n. Take a look at my repo now.  I have adjusted the cdata logic at line 87, however, the unit test does not pass now.\n. the one i added (that passed with the permanent postprocess implementation)\nis no longer passing.  take a look at test_skip_whitespace()\n\nOn Thu, Feb 14, 2013 at 4:24 PM, Mart\u00edn Blech notifications@github.comwrote:\n\n> what's up with the unit tests?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/pull/16#issuecomment-13579389.\n. ",
    "inactivist": "Given the following pseudo-XML example:\n\n``` xml\n<doc>\n    <item>Item1</item>\n    <item>Item2</item>\n    <item>Item3</item>\n    <item>Item4</item>\n</doc>\n```\n\nI'd like to retrieve _only_ Item2 and Item4.  If I return False parsing is terminated.\n. Perfect, thanks!\n. Lots of useful stuff here.  Is there anything we can do to help get this PR merged?\n. @martinblech -- I'd prefer finer-grained PRs as well; I was really only interested in the forced lists feature when I found this PR.  Would it make sense to try to split up the PR into multiples, and go from there?\n. Given the following pseudo-XML example:\n\n``` xml\n<doc>\n    <item>Item1</item>\n    <item>Item2</item>\n    <item>Item3</item>\n    <item>Item4</item>\n</doc>\n```\n\nI'd like to retrieve _only_ Item2 and Item4.  If I return False parsing is terminated.\n. Perfect, thanks!\n. Lots of useful stuff here.  Is there anything we can do to help get this PR merged?\n. @martinblech -- I'd prefer finer-grained PRs as well; I was really only interested in the forced lists feature when I found this PR.  Would it make sense to try to split up the PR into multiples, and go from there?\n. ",
    "bmannix": "If a post processor is used, it's no longer possible to unparse the provided OrderedDict back into the exact same XML.\n\nFor instance:\n\n``` python\ndef postprocessor(path, key, value):\n    try:\n        return key + ':int', int(value)\n    except (ValueError, TypeError):\n        return key, value\n\n>>> xmltodict.parse('<a><b>1</b><b>2</b><b>x</b></a>', postprocessor=postprocessor)\nOrderedDict([(u'a', OrderedDict([(u'b:int', [1, 2]), (u'b', u'x')]))])\n```\n\nif we unparse this data, we are not returned the original XML:\n\n``` python\n>>> processed = xmltodict.parse('<a><b>1</b><b>2</b><b>x</b></a>', postprocessor=postprocessor)\n>>> xmltodict.unparse(processed)\nu'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<a><b:int>1</b:int><b:int>2</b:int><b>x</b></a>'\n```\n\nIt would be useful to have a preprocessor hook that would enable this behavior:\n\n``` python\ndef preprocessor(foo, bar):\n    try:\n        foo\n    except:\n        return bar\n\n>>> processed = xmltodict.parse('<a><b>1</b><b>2</b><b>x</b></a>', postprocessor=postprocessor)\n>>> xmltodict.unparse(processed, preprocessor=preprocessor)\nu'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<a><b>1</b><b>2</b><b>x</b></a>'\n```\n\nThis feature, combined with properly written processors, would allow round tripping with xmltodict.\n. Yup!  Looks great.  Thanks Martin, this is exactly what I needed and let me say your turn around time is extremely impressive! :+1: \n. If a post processor is used, it's no longer possible to unparse the provided OrderedDict back into the exact same XML.\n\nFor instance:\n\n``` python\ndef postprocessor(path, key, value):\n    try:\n        return key + ':int', int(value)\n    except (ValueError, TypeError):\n        return key, value\n\n>>> xmltodict.parse('<a><b>1</b><b>2</b><b>x</b></a>', postprocessor=postprocessor)\nOrderedDict([(u'a', OrderedDict([(u'b:int', [1, 2]), (u'b', u'x')]))])\n```\n\nif we unparse this data, we are not returned the original XML:\n\n``` python\n>>> processed = xmltodict.parse('<a><b>1</b><b>2</b><b>x</b></a>', postprocessor=postprocessor)\n>>> xmltodict.unparse(processed)\nu'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<a><b:int>1</b:int><b:int>2</b:int><b>x</b></a>'\n```\n\nIt would be useful to have a preprocessor hook that would enable this behavior:\n\n``` python\ndef preprocessor(foo, bar):\n    try:\n        foo\n    except:\n        return bar\n\n>>> processed = xmltodict.parse('<a><b>1</b><b>2</b><b>x</b></a>', postprocessor=postprocessor)\n>>> xmltodict.unparse(processed, preprocessor=preprocessor)\nu'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<a><b>1</b><b>2</b><b>x</b></a>'\n```\n\nThis feature, combined with properly written processors, would allow round tripping with xmltodict.\n. Yup!  Looks great.  Thanks Martin, this is exactly what I needed and let me say your turn around time is extremely impressive! :+1: \n. ",
    "ameliaikeda": "Invalid. `force_cdata=True` and `cdata_separator=\"\\n\"`\n. Thanks~\n. Invalid. `force_cdata=True` and `cdata_separator=\"\\n\"`\n. Thanks~\n. ",
    "ralphbean": "@martinblech :+1:\n. @martinblech :+1:\n. ",
    "radeksvarz": "Finally I found it! It took me almost a day to understand why the parser is throwing Keyerror:0  in some files.\n\nMartine, I suggest to put above example into the docstring.\n. Finally I found it! It took me almost a day to understand why the parser is throwing Keyerror:0  in some files.\n\nMartine, I suggest to put above example into the docstring.\n. ",
    "ZoomQuiet": "gread skill , got it\n. thanx that code!\ngot the new way.\n. gread skill , got it\n. thanx that code!\ngot the new way.\n. ",
    "foxx": "Given that this issue keeps coming up for many people, myself included, would you entertain making this the default dict constructor in the next major release? It is surprising behaviour to say the least.\n. @martinblech I would be inclined to agree with you, I just tried the previously mentioned workaround and was met with the annoyance of having to reference everything with [0].\n\nIt's difficult to say which would be better, because like you said it depends on use case. For my own use case I have ended up using `pyQuery` which is a bit better for us.\n\nI'm almost tempted to say that adding something to the README would be unlikely to make a difference, as most people will not read the entire thing. Though as a long term fix, having a some good documentation with usage examples could be a great thing.\n. Given that this issue keeps coming up for many people, myself included, would you entertain making this the default dict constructor in the next major release? It is surprising behaviour to say the least.\n. @martinblech I would be inclined to agree with you, I just tried the previously mentioned workaround and was met with the annoyance of having to reference everything with [0].\n\nIt's difficult to say which would be better, because like you said it depends on use case. For my own use case I have ended up using `pyQuery` which is a bit better for us.\n\nI'm almost tempted to say that adding something to the README would be unlikely to make a difference, as most people will not read the entire thing. Though as a long term fix, having a some good documentation with usage examples could be a great thing.\n. ",
    "kmonsoor": "as an user, i also agree with @martinblech . otherwise, the output will get too confusing \n. @vstoykov good find, mate. (y)\n. @a-x- if you think that this issue don't need any more discussion, plz consider to \"close\" it. thanks.\n. @bzamecnik i spent quite a bit time to utilize your code to use the input file as stream handled by generator. But, couldn't get my head around it, stuck at getting at something like \"Producer started\" message.\n\nFailing to use so, i have to use **lxml.objectify.parse** as intermediary. After init-ing i have used root.iterchildren like below:\n\n``` python\nfrom lxml import objectify\nimport xmltodict as x2d\n\ntree = objectify.parse(file_path)\nroot = tree.getroot()\ngenerator = (x for x in root.iterchildren()) \n...\ndata = generator.next()\ndata_dict = x2d.parse(data)\n```\n\nof course, instead of **objectify**, i could use typical lxml.parse(); but it helped me doing some cleanup. \n. thanks, @martinblech for your kind response.\nin that case, i will go one-stub-at-a-time approach.\n. You should use like :\n\n```\nd = xmltodict.parse(open(\"Status.xml\"))\n```\n\nThere is **nothing** like _xmldict.xmldict_ you are trying to use. That's why you are getting the AttributeError.\n. +1 ... (y)\n. @bharel  imo, plz consider adding some relevant comments inline to make non-confusing. \nBecause many programmers would guess about using a **String** here. thanks.\n. > Commenting that data is a list on the definition of \"data = []\" is redundant\n\ni agree. \n\nhowever, i meant commenting for **why** \"data is a list\", but not a string would be helpful. \nBasically, the description of this pull-request, to put inline concisely, mentioning the facts of performance/speed.\n. as an user, i also agree with @martinblech . otherwise, the output will get too confusing \n. @vstoykov good find, mate. (y)\n. @a-x- if you think that this issue don't need any more discussion, plz consider to \"close\" it. thanks.\n. @bzamecnik i spent quite a bit time to utilize your code to use the input file as stream handled by generator. But, couldn't get my head around it, stuck at getting at something like \"Producer started\" message.\n\nFailing to use so, i have to use **lxml.objectify.parse** as intermediary. After init-ing i have used root.iterchildren like below:\n\n``` python\nfrom lxml import objectify\nimport xmltodict as x2d\n\ntree = objectify.parse(file_path)\nroot = tree.getroot()\ngenerator = (x for x in root.iterchildren()) \n...\ndata = generator.next()\ndata_dict = x2d.parse(data)\n```\n\nof course, instead of **objectify**, i could use typical lxml.parse(); but it helped me doing some cleanup. \n. thanks, @martinblech for your kind response.\nin that case, i will go one-stub-at-a-time approach.\n. You should use like :\n\n```\nd = xmltodict.parse(open(\"Status.xml\"))\n```\n\nThere is **nothing** like _xmldict.xmldict_ you are trying to use. That's why you are getting the AttributeError.\n. +1 ... (y)\n. @bharel  imo, plz consider adding some relevant comments inline to make non-confusing. \nBecause many programmers would guess about using a **String** here. thanks.\n. > Commenting that data is a list on the definition of \"data = []\" is redundant\n\ni agree. \n\nhowever, i meant commenting for **why** \"data is a list\", but not a string would be helpful. \nBasically, the description of this pull-request, to put inline concisely, mentioning the facts of performance/speed.\n. ",
    "y-usuzumi": "It might be annoying to reference everything with [0] but for certain cases it provide a unified approach to access arbitrary xml documents.\n\nAs a side question:\nFor such document:\n\n```\n<a>\n    <b></b>\n</a>\n```\n\nI get an object like this: {\"a\": [ { \"b\": [None] } ]}\nI understand that a None is placed to represent an empty b node, but Is it possible to get a {} instead?\nIt's easier to modify the object since I can assume there's always a valid dict to manipulate.\n. @dlf412 xmltodict can't guess the encoding of your strings so it will simply follow the default encoding (in Python is ascii). You'll have to use unicode values instead: `u\"\u4f60\u597d\uff0c\u4e16\u754c\"`\n. But I do wonder if it is reasonable to decode the string as per the `encoding` argument (default to 'utf-8'). Although currently it is intended to only influence the prolog and unicode characters.\n. @asandvig `#comment` is the most natural key to use. But the comment may occur before a given node or after it, and there may be multiple comment nodes. For the comments between two nodes, which one should they belong to? Or maybe I'm being stupid.\n. It might be annoying to reference everything with [0] but for certain cases it provide a unified approach to access arbitrary xml documents.\n\nAs a side question:\nFor such document:\n\n```\n<a>\n    <b></b>\n</a>\n```\n\nI get an object like this: {\"a\": [ { \"b\": [None] } ]}\nI understand that a None is placed to represent an empty b node, but Is it possible to get a {} instead?\nIt's easier to modify the object since I can assume there's always a valid dict to manipulate.\n. @dlf412 xmltodict can't guess the encoding of your strings so it will simply follow the default encoding (in Python is ascii). You'll have to use unicode values instead: `u\"\u4f60\u597d\uff0c\u4e16\u754c\"`\n. But I do wonder if it is reasonable to decode the string as per the `encoding` argument (default to 'utf-8'). Although currently it is intended to only influence the prolog and unicode characters.\n. @asandvig `#comment` is the most natural key to use. But the comment may occur before a given node or after it, and there may be multiple comment nodes. For the comments between two nodes, which one should they belong to? Or maybe I'm being stupid.\n. ",
    "candlerb": "What you could do is to nominate particular elements which should always generate lists, e.g.\n\n```\nxmltodict.parse(xml, force_list=set('child'))\n```\n\nThis is the approach taken by Perl's XML::Simple with the [ForceArray](http://search.cpan.org/~grantm/XML-Simple-2.20/lib/XML/Simple.pm#ForceArray_=>_[_names_]_#_in_-_important) setting.\n\nA problem with this is that if the `<children>` element is empty, it's not going to give you an empty list of `{\"child\": []}`. This is due to how xmltodict groups elements at a lower level, i.e. it's not `children` which is a list, but `child` which is a list.\n\nSo to work with xmltodict, I think you need to specify the enclosing element as well:\n\n```\nxmltodict.parse(xml, force_list={'children': 'child'})\n```\n\nImplies: \"if you see a `<children>` element then always build a `<child>` with empty list underneath it\".  Any actual `<child>` elements will then be added to that list.\n\nAside: there is a related but different problem, which is dealing with a heterogenous sequence of repeating elements. For example:\n\n```\n<stuff>\n  <foo>.1.</foo>\n  <bar>.2.</bar>\n  <bar>.3.</bar>\n  <foo>.4.</foo>\n  <bar>.5.</bar>\n</stuff>\n```\n\nAt the moment you get:\n\n```\nOrderedDict([(u'stuff', OrderedDict([(u'foo', [u'.1.', u'.4.']), (u'bar', [u'.2.', u'.3.', u'.5.'])]))])\n```\n\nwhich loses the ordering relationship between the `foo` and `bar` elements.\n\nThis would have to be dealt with differently. For example:\n\n```\nxmltodict.parse(xml, force_list={'stuff': True})\n```\n\ncould mean that `<stuff>` is forced to have a list of children, and that this list should contain repeated elements rather than grouped elements.  I don't know how practical that is to implement though.  And it would probably have implications for unparse.\n. Correct. It hasn't been implemented yet :-)\n. _(Moving this suggestion from closed ticket #14)_\n\nWhat you could do is to nominate particular elements which should always generate lists, e.g.\n\n```\nxmltodict.parse(xml, force_list=set('child'))\n```\n\nThis is the approach taken by Perl's XML::Simple with the [ForceArray](http://search.cpan.org/~grantm/XML-Simple-2.20/lib/XML/Simple.pm#ForceArray_=>_[_names_]_#_in_-_important) setting.\n\nA problem with this is that if the `<sub>` element is empty, it's not going to give you an empty list of `{\"child\": []}`. This is due to how xmltodict groups elements at a lower level, i.e. it's not `sub` which is a list of child elements, but `child` which is a list.\n\nSo to work with xmltodict, I think you need to specify the enclosing element as well:\n\n```\nxmltodict.parse(xml, force_list={'sub': 'child'})\n```\n\nImplies: \"if you see a `<sub>` element then always build a `<child>` with empty list underneath it\".  Any actual `<child>` elements will then be added to that list, and will be consistent for 0, 1 or more elements.\n\nAside: there is a related but different problem, which is dealing with a heterogenous sequence of repeating elements. For example:\n\n```\n<stuff>\n  <foo>.1.</foo>\n  <bar>.2.</bar>\n  <bar>.3.</bar>\n  <foo>.4.</foo>\n  <bar>.5.</bar>\n</stuff>\n```\n\nAt the moment you get:\n\n```\nOrderedDict([(u'stuff', OrderedDict([(u'foo', [u'.1.', u'.4.']), (u'bar', [u'.2.', u'.3.', u'.5.'])]))])\n```\n\nwhich loses the ordering relationship between the `foo` and `bar` elements.\n\nThis would have to be dealt with differently. For example:\n\n```\nxmltodict.parse(xml, force_list={'stuff': True})\n```\n\ncould mean that `<stuff>` is forced to have a list of children, and that this list should contain repeated elements rather than grouped elements.  I don't know how practical that is to implement though.  And it would probably have implications for unparse.\n. Usually we look for some steer from project owner. Otherwise there is a risk of implementing something only to be told \"no I don't like that solution, do XYZ instead\"\n. There is an issue where the list may be empty. Suppose you have:\n\n```\n        <servers>\n        </servers>\n```\n\nthen this parses as:\n\n```\n{\n    \"servers\": None\n}\n```\n\nThen the user code needs to look something like this:\n\n```\n        if data['servers']:\n            servers = data['servers']['server']\n        else:\n            servers = []\n        for server in servers:\n            print server['name'], server['os']\n```\n\nOr more obtusely:\n\n```\n        for server in (data['servers'] or {'server':[]})['server']:\n            print server['name'], server['os']\n```\n\nTo fix this would require indicating the expected child for each parent. What do people think about `force_list={'servers': 'server'}` ? This would mean:\n1. A `<servers>` tag would always generate a `\"server\": [...]` child in the parsed output, with zero or more elements\n2. Conversely, a random `<server>` tag would _not_ be forced to a list unless it is directly inside a `<servers>` tag\n. What you could do is to nominate particular elements which should always generate lists, e.g.\n\n```\nxmltodict.parse(xml, force_list=set('child'))\n```\n\nThis is the approach taken by Perl's XML::Simple with the [ForceArray](http://search.cpan.org/~grantm/XML-Simple-2.20/lib/XML/Simple.pm#ForceArray_=>_[_names_]_#_in_-_important) setting.\n\nA problem with this is that if the `<children>` element is empty, it's not going to give you an empty list of `{\"child\": []}`. This is due to how xmltodict groups elements at a lower level, i.e. it's not `children` which is a list, but `child` which is a list.\n\nSo to work with xmltodict, I think you need to specify the enclosing element as well:\n\n```\nxmltodict.parse(xml, force_list={'children': 'child'})\n```\n\nImplies: \"if you see a `<children>` element then always build a `<child>` with empty list underneath it\".  Any actual `<child>` elements will then be added to that list.\n\nAside: there is a related but different problem, which is dealing with a heterogenous sequence of repeating elements. For example:\n\n```\n<stuff>\n  <foo>.1.</foo>\n  <bar>.2.</bar>\n  <bar>.3.</bar>\n  <foo>.4.</foo>\n  <bar>.5.</bar>\n</stuff>\n```\n\nAt the moment you get:\n\n```\nOrderedDict([(u'stuff', OrderedDict([(u'foo', [u'.1.', u'.4.']), (u'bar', [u'.2.', u'.3.', u'.5.'])]))])\n```\n\nwhich loses the ordering relationship between the `foo` and `bar` elements.\n\nThis would have to be dealt with differently. For example:\n\n```\nxmltodict.parse(xml, force_list={'stuff': True})\n```\n\ncould mean that `<stuff>` is forced to have a list of children, and that this list should contain repeated elements rather than grouped elements.  I don't know how practical that is to implement though.  And it would probably have implications for unparse.\n. Correct. It hasn't been implemented yet :-)\n. _(Moving this suggestion from closed ticket #14)_\n\nWhat you could do is to nominate particular elements which should always generate lists, e.g.\n\n```\nxmltodict.parse(xml, force_list=set('child'))\n```\n\nThis is the approach taken by Perl's XML::Simple with the [ForceArray](http://search.cpan.org/~grantm/XML-Simple-2.20/lib/XML/Simple.pm#ForceArray_=>_[_names_]_#_in_-_important) setting.\n\nA problem with this is that if the `<sub>` element is empty, it's not going to give you an empty list of `{\"child\": []}`. This is due to how xmltodict groups elements at a lower level, i.e. it's not `sub` which is a list of child elements, but `child` which is a list.\n\nSo to work with xmltodict, I think you need to specify the enclosing element as well:\n\n```\nxmltodict.parse(xml, force_list={'sub': 'child'})\n```\n\nImplies: \"if you see a `<sub>` element then always build a `<child>` with empty list underneath it\".  Any actual `<child>` elements will then be added to that list, and will be consistent for 0, 1 or more elements.\n\nAside: there is a related but different problem, which is dealing with a heterogenous sequence of repeating elements. For example:\n\n```\n<stuff>\n  <foo>.1.</foo>\n  <bar>.2.</bar>\n  <bar>.3.</bar>\n  <foo>.4.</foo>\n  <bar>.5.</bar>\n</stuff>\n```\n\nAt the moment you get:\n\n```\nOrderedDict([(u'stuff', OrderedDict([(u'foo', [u'.1.', u'.4.']), (u'bar', [u'.2.', u'.3.', u'.5.'])]))])\n```\n\nwhich loses the ordering relationship between the `foo` and `bar` elements.\n\nThis would have to be dealt with differently. For example:\n\n```\nxmltodict.parse(xml, force_list={'stuff': True})\n```\n\ncould mean that `<stuff>` is forced to have a list of children, and that this list should contain repeated elements rather than grouped elements.  I don't know how practical that is to implement though.  And it would probably have implications for unparse.\n. Usually we look for some steer from project owner. Otherwise there is a risk of implementing something only to be told \"no I don't like that solution, do XYZ instead\"\n. There is an issue where the list may be empty. Suppose you have:\n\n```\n        <servers>\n        </servers>\n```\n\nthen this parses as:\n\n```\n{\n    \"servers\": None\n}\n```\n\nThen the user code needs to look something like this:\n\n```\n        if data['servers']:\n            servers = data['servers']['server']\n        else:\n            servers = []\n        for server in servers:\n            print server['name'], server['os']\n```\n\nOr more obtusely:\n\n```\n        for server in (data['servers'] or {'server':[]})['server']:\n            print server['name'], server['os']\n```\n\nTo fix this would require indicating the expected child for each parent. What do people think about `force_list={'servers': 'server'}` ? This would mean:\n1. A `<servers>` tag would always generate a `\"server\": [...]` child in the parsed output, with zero or more elements\n2. Conversely, a random `<server>` tag would _not_ be forced to a list unless it is directly inside a `<servers>` tag\n. ",
    "kadnan": "@candlerb \n\n```\nTypeError: __init__() got an unexpected keyword argument 'force_list'\n```\n. @candlerb I found the implementation in `master` not in `pip` version:\n\n```\nsudo pip install git+https://github.com/martinblech/xmltodict.git@master\n```\n. @martinblech When I installed from default pip repo it did not pull the right version\n. Ok, What I figured out that I Had an older version installed a year back and I found the above link from Github and installed like that. Just uninstalled and installed again by doing `sudo pip install xmltodict` and it installed the latest version.\n\nSorry for confusion.\n. @candlerb \n\n```\nTypeError: __init__() got an unexpected keyword argument 'force_list'\n```\n. @candlerb I found the implementation in `master` not in `pip` version:\n\n```\nsudo pip install git+https://github.com/martinblech/xmltodict.git@master\n```\n. @martinblech When I installed from default pip repo it did not pull the right version\n. Ok, What I figured out that I Had an older version installed a year back and I found the above link from Github and installed like that. Just uninstalled and installed again by doing `sudo pip install xmltodict` and it installed the latest version.\n\nSorry for confusion.\n. ",
    "acjackson": "How can I use the `force_list` option for ALL elements?\r\nDo I really have to list every element?. How can I use the `force_list` option for ALL elements?\r\nDo I really have to list every element?. ",
    "tomdeschamps": "This is a good workaround. \nShall I leave the issue opened until there is a fix in the new release?\n. This is a good workaround. \nShall I leave the issue opened until there is a fix in the new release?\n. ",
    "barroca": "according to xml definition & should be translated to &amp; to appear on a xml. I just added a .replace(\"&\",\"&amp;\") on my parsed string to \"ignore\" the issue, since it's a problem with the xml.\n. according to xml definition & should be translated to &amp; to appear on a xml. I just added a .replace(\"&\",\"&amp;\") on my parsed string to \"ignore\" the issue, since it's a problem with the xml.\n. ",
    "kevbo": "Thank _you_ for spending the time on this. For someone who has constant issues installing lxml, this is a great alternative for most of the things I need to do.\n. Thank _you_ for spending the time on this. For someone who has constant issues installing lxml, this is a great alternative for most of the things I need to do.\n. ",
    "mittenchops": "Mi Martin, thanks again.  Hmm, perhaps I'm misunderstanding this very completely then, but it seems like it's throwing errors even when I'm trying to try-catch them in my handler, and my print statements are revealing even more craziness.  Surely my fault, but it's not clear to me how to get this tool to select xml objects or if perhaps mine is failing on reaching the second record.\n\nHere's what I'm running in python:\n\n```\nimport xmltodict\n\nfile = 'enwiki-latest-pages-articles.xml'\n\ndef page_handler(_, page):\n    try:\n        print page.get('title','').encode('utf-8')\n    except:\n        print page\n        print \"error\"\n\nwith open(file) as f:\n    try:\n        xmltodict.parse(f, item_depth=3, item_callback=page_handler)\n    except:\n        pass\n```\n\nThe first record in wikipedia data is a weird namespace declaration.  I imagined that it would be skipped over by my try excepts, but doesn't seem to be.  So, the record being...\n\n```\n<mediawiki xmlns=\"http://www.mediawiki.org/xml/export-0.8/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.mediawiki.org/xml/export-0.8/ http://www.mediawiki.org/xml/export-0.8.xsd\" version=\"0.8\" xml:lang=\"en\">\n  <siteinfo>\n    <sitename>Wikipedia</sitename>\n    <base>http://en.wikipedia.org/wiki/Main_Page</base>\n    <generator>MediaWiki 1.22wmf5</generator>\n    <case>first-letter</case>\n    <namespaces>\n      <namespace key=\"-2\" case=\"first-letter\">Media</namespace>\n      <namespace key=\"-1\" case=\"first-letter\">Special</namespace>\n      <namespace key=\"829\" case=\"first-letter\">Module talk</namespace>\n    </namespaces>\n  </siteinfo>\n  <page>\n    <title>AccessibleComputing</title>\n    <ns>0</ns>\n    <id>10</id>\n```\n\nThe first <page> object is 13 lines down, but when I run the script above, I get...\n\n```\n\n    Wikipedia\nerror\n```\n\nSo, it seems to be in the except block, still reading <sitename> as as page object---or maybe a page.get('title','') result.  Have I missed something elementary here, or misunderstood your readme?\n. Mi Martin, thanks again.  Hmm, perhaps I'm misunderstanding this very completely then, but it seems like it's throwing errors even when I'm trying to try-catch them in my handler, and my print statements are revealing even more craziness.  Surely my fault, but it's not clear to me how to get this tool to select xml objects or if perhaps mine is failing on reaching the second record.\n\nHere's what I'm running in python:\n\n```\nimport xmltodict\n\nfile = 'enwiki-latest-pages-articles.xml'\n\ndef page_handler(_, page):\n    try:\n        print page.get('title','').encode('utf-8')\n    except:\n        print page\n        print \"error\"\n\nwith open(file) as f:\n    try:\n        xmltodict.parse(f, item_depth=3, item_callback=page_handler)\n    except:\n        pass\n```\n\nThe first record in wikipedia data is a weird namespace declaration.  I imagined that it would be skipped over by my try excepts, but doesn't seem to be.  So, the record being...\n\n```\n<mediawiki xmlns=\"http://www.mediawiki.org/xml/export-0.8/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.mediawiki.org/xml/export-0.8/ http://www.mediawiki.org/xml/export-0.8.xsd\" version=\"0.8\" xml:lang=\"en\">\n  <siteinfo>\n    <sitename>Wikipedia</sitename>\n    <base>http://en.wikipedia.org/wiki/Main_Page</base>\n    <generator>MediaWiki 1.22wmf5</generator>\n    <case>first-letter</case>\n    <namespaces>\n      <namespace key=\"-2\" case=\"first-letter\">Media</namespace>\n      <namespace key=\"-1\" case=\"first-letter\">Special</namespace>\n      <namespace key=\"829\" case=\"first-letter\">Module talk</namespace>\n    </namespaces>\n  </siteinfo>\n  <page>\n    <title>AccessibleComputing</title>\n    <ns>0</ns>\n    <id>10</id>\n```\n\nThe first <page> object is 13 lines down, but when I run the script above, I get...\n\n```\n\n    Wikipedia\nerror\n```\n\nSo, it seems to be in the except block, still reading <sitename> as as page object---or maybe a page.get('title','') result.  Have I missed something elementary here, or misunderstood your readme?\n. ",
    "scharfmn": "Thank you for a very fine library. It would be very nice to have the option to just go straight to dict. As noted [here](http://stackoverflow.com/a/25055461/1599229): \"creating a large dictionary (with 100-10000 keys) is around 7-8x faster than creating an OrderedDict with same keys. (Verified using %timeit in ipython).\" The OrderedDict overhead is not what's really advertised by the library's name. \n. Thank you for a very fine library. It would be very nice to have the option to just go straight to dict. As noted [here](http://stackoverflow.com/a/25055461/1599229): \"creating a large dictionary (with 100-10000 keys) is around 7-8x faster than creating an OrderedDict with same keys. (Verified using %timeit in ipython).\" The OrderedDict overhead is not what's really advertised by the library's name. \n. ",
    "vstoykov": "Yes in situations where speed is important and order of items not, then ability to use native dict instead of OrderedDict will be a good option.\n. @scharfmn I just found that you can use:\n\n```\nfoo = xmltodict.parse(xml_string, dict_constructor=dict)\n```\n. Yes in situations where speed is important and order of items not, then ability to use native dict instead of OrderedDict will be a good option.\n. @scharfmn I just found that you can use:\n\n```\nfoo = xmltodict.parse(xml_string, dict_constructor=dict)\n```\n. ",
    "thom-nic": "I figured as much, but thanks for considering it!  Hopefully it will not be too complicated.\n. Hah oops that was just me messing up the example I made up. `three` should\nhave been in the namespace map as well :)\nOn Aug 24, 2013 12:30 PM, \"Mart\u00edn Blech\" notifications@github.com wrote:\n\n> @tomstrummer https://github.com/tomstrummer\n> What's exactly the role of the namespaces dict argument in your example?\n> I see that it has entries for one='http://one.com' and two='http://two.com\n> ', but three is missing, but as far as I can see, one, two and three are\n> treated equally in your example's output.\n> \n> What difference does it make for a namespace to be present or missing in\n> namespaces?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/32#issuecomment-23211791\n> .\n. Yes, that looks great -- thanks!!\n. I figured as much, but thanks for considering it!  Hopefully it will not be too complicated.\n. Hah oops that was just me messing up the example I made up. `three` should\nhave been in the namespace map as well :)\nOn Aug 24, 2013 12:30 PM, \"Mart\u00edn Blech\" notifications@github.com wrote:\n\n> @tomstrummer https://github.com/tomstrummer\n> What's exactly the role of the namespaces dict argument in your example?\n> I see that it has entries for one='http://one.com' and two='http://two.com\n> ', but three is missing, but as far as I can see, one, two and three are\n> treated equally in your example's output.\n> \n> What difference does it make for a namespace to be present or missing in\n> namespaces?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/32#issuecomment-23211791\n> .\n. Yes, that looks great -- thanks!!\n. ",
    "rjbez17": "JSObject will not recursively create an object. It seems to only go one deep:\n\n<code>\n>>> import xmltodict as xd\n>>> import jsobject as jo\n>>> \n>>> x = \"\"\"<Servers>\n...   <Server id=\"ClientID[27]\">\n...     <hostName>server1.localhost</hostName>\n...     <ip>11.11.11.11</ip>\n...   </Server>\n...   <Server id=\"ClientID[26]\">\n...     <hostName>server2.localhost</hostName>\n...     <ip>11.22.11.11</ip>\n...   </Server>\n...   <Server id=\"ClientID[29]\">\n...     <hostName>server3.localhost</hostName>\n...     <ip>11.33.11.11</ip>\n...   </Server>\n...   <Server id=\"ClientID[28]\">\n...     <hostName>server4.localhost</hostName>\n...     <ip>11.44.11.11</ip>\n...   </Server>\n... </Servers>\"\"\"\n>>> \n>>> y = xd.parse(x)\n>>> \n>>> y\nOrderedDict([(u'Servers', OrderedDict([(u'Server', [OrderedDict([(u'@id', u'ClientID[27]'), (u'hostName', u'server1.localhost'), (u'ip', u'11.11.11.11')]), OrderedDict([(u'@id', u'ClientID[26]'), (u'hostName', u'server2.localhost'), (u'ip', u'11.22.11.11')]), OrderedDict([(u'@id', u'ClientID[29]'), (u'hostName', u'server3.localhost'), (u'ip', u'11.33.11.11')]), OrderedDict([(u'@id', u'ClientID[28]'), (u'hostName', u'server4.localhost'), (u'ip', u'11.44.11.11')])])]))])\n>>> \n>>> j = jo.JSObject(y)\n>>> \n>>> j\n{u'Servers': OrderedDict([(u'Server', [OrderedDict([(u'@id', u'ClientID[27]'), (u'hostName', u'server1.localhost'), (u'ip', u'11.11.11.11')]), OrderedDict([(u'@id', u'ClientID[26]'), (u'hostName', u'server2.localhost'), (u'ip', u'11.22.11.11')]), OrderedDict([(u'@id', u'ClientID[29]'), (u'hostName', u'server3.localhost'), (u'ip', u'11.33.11.11')]), OrderedDict([(u'@id', u'ClientID[28]'), (u'hostName', u'server4.localhost'), (u'ip', u'11.44.11.11')])])])}\n>>> \n>>> j.Servers\nOrderedDict([(u'Server', [OrderedDict([(u'@id', u'ClientID[27]'), (u'hostName', u'server1.localhost'), (u'ip', u'11.11.11.11')]), OrderedDict([(u'@id', u'ClientID[26]'), (u'hostName', u'server2.localhost'), (u'ip', u'11.22.11.11')]), OrderedDict([(u'@id', u'ClientID[29]'), (u'hostName', u'server3.localhost'), (u'ip', u'11.33.11.11')]), OrderedDict([(u'@id', u'ClientID[28]'), (u'hostName', u'server4.localhost'), (u'ip', u'11.44.11.11')])])])\n>>> \n>>> j.Servers.Server\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'OrderedDict' object has no attribute 'Server'\n>>> \n>>> z = xd.parse_to_object(x)\n>>> z\n{'Servers': {'Server': [{'ip': u'11.11.11.11', 'hostName': u'server1.localhost', '@id': u'ClientID[27]'}, {'ip': u'11.22.11.11', 'hostName': u'server2.localhost', '@id': u'ClientID[26]'}, {'ip': u'11.33.11.11', 'hostName': u'server3.localhost', '@id': u'ClientID[29]'}, {'ip': u'11.44.11.11', 'hostName': u'server4.localhost', '@id': u'ClientID[28]'}]}}\n>>> z.Servers.Server\n[{'ip': u'11.11.11.11', 'hostName': u'server1.localhost', '@id': u'ClientID[27]'}, {'ip': u'11.22.11.11', 'hostName': u'server2.localhost', '@id': u'ClientID[26]'}, {'ip': u'11.33.11.11', 'hostName': u'server3.localhost', '@id': u'ClientID[29]'}, {'ip': u'11.44.11.11', 'hostName': u'server4.localhost', '@id': u'ClientID[28]'}]\n>>> \n</code>\n. Yes it does...Guess I didn't even think of that. Touch\u00e9!\n. JSObject will not recursively create an object. It seems to only go one deep:\n\n<code>\n>>> import xmltodict as xd\n>>> import jsobject as jo\n>>> \n>>> x = \"\"\"<Servers>\n...   <Server id=\"ClientID[27]\">\n...     <hostName>server1.localhost</hostName>\n...     <ip>11.11.11.11</ip>\n...   </Server>\n...   <Server id=\"ClientID[26]\">\n...     <hostName>server2.localhost</hostName>\n...     <ip>11.22.11.11</ip>\n...   </Server>\n...   <Server id=\"ClientID[29]\">\n...     <hostName>server3.localhost</hostName>\n...     <ip>11.33.11.11</ip>\n...   </Server>\n...   <Server id=\"ClientID[28]\">\n...     <hostName>server4.localhost</hostName>\n...     <ip>11.44.11.11</ip>\n...   </Server>\n... </Servers>\"\"\"\n>>> \n>>> y = xd.parse(x)\n>>> \n>>> y\nOrderedDict([(u'Servers', OrderedDict([(u'Server', [OrderedDict([(u'@id', u'ClientID[27]'), (u'hostName', u'server1.localhost'), (u'ip', u'11.11.11.11')]), OrderedDict([(u'@id', u'ClientID[26]'), (u'hostName', u'server2.localhost'), (u'ip', u'11.22.11.11')]), OrderedDict([(u'@id', u'ClientID[29]'), (u'hostName', u'server3.localhost'), (u'ip', u'11.33.11.11')]), OrderedDict([(u'@id', u'ClientID[28]'), (u'hostName', u'server4.localhost'), (u'ip', u'11.44.11.11')])])]))])\n>>> \n>>> j = jo.JSObject(y)\n>>> \n>>> j\n{u'Servers': OrderedDict([(u'Server', [OrderedDict([(u'@id', u'ClientID[27]'), (u'hostName', u'server1.localhost'), (u'ip', u'11.11.11.11')]), OrderedDict([(u'@id', u'ClientID[26]'), (u'hostName', u'server2.localhost'), (u'ip', u'11.22.11.11')]), OrderedDict([(u'@id', u'ClientID[29]'), (u'hostName', u'server3.localhost'), (u'ip', u'11.33.11.11')]), OrderedDict([(u'@id', u'ClientID[28]'), (u'hostName', u'server4.localhost'), (u'ip', u'11.44.11.11')])])])}\n>>> \n>>> j.Servers\nOrderedDict([(u'Server', [OrderedDict([(u'@id', u'ClientID[27]'), (u'hostName', u'server1.localhost'), (u'ip', u'11.11.11.11')]), OrderedDict([(u'@id', u'ClientID[26]'), (u'hostName', u'server2.localhost'), (u'ip', u'11.22.11.11')]), OrderedDict([(u'@id', u'ClientID[29]'), (u'hostName', u'server3.localhost'), (u'ip', u'11.33.11.11')]), OrderedDict([(u'@id', u'ClientID[28]'), (u'hostName', u'server4.localhost'), (u'ip', u'11.44.11.11')])])])\n>>> \n>>> j.Servers.Server\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'OrderedDict' object has no attribute 'Server'\n>>> \n>>> z = xd.parse_to_object(x)\n>>> z\n{'Servers': {'Server': [{'ip': u'11.11.11.11', 'hostName': u'server1.localhost', '@id': u'ClientID[27]'}, {'ip': u'11.22.11.11', 'hostName': u'server2.localhost', '@id': u'ClientID[26]'}, {'ip': u'11.33.11.11', 'hostName': u'server3.localhost', '@id': u'ClientID[29]'}, {'ip': u'11.44.11.11', 'hostName': u'server4.localhost', '@id': u'ClientID[28]'}]}}\n>>> z.Servers.Server\n[{'ip': u'11.11.11.11', 'hostName': u'server1.localhost', '@id': u'ClientID[27]'}, {'ip': u'11.22.11.11', 'hostName': u'server2.localhost', '@id': u'ClientID[26]'}, {'ip': u'11.33.11.11', 'hostName': u'server3.localhost', '@id': u'ClientID[29]'}, {'ip': u'11.44.11.11', 'hostName': u'server4.localhost', '@id': u'ClientID[28]'}]\n>>> \n</code>\n. Yes it does...Guess I didn't even think of that. Touch\u00e9!\n. ",
    "fdh03ca1": "```\n   runOnlyForDeploymentPostprocessing = 0;\n };\n```\n\n@@ -93,9 +93,9 @@\n     302A764915F972860018B83D /\\* Frameworks */ = {\n       isa = PBXGroup;\n       children = (\n. ```\n   runOnlyForDeploymentPostprocessing = 0;\n };\n```\n\n@@ -93,9 +93,9 @@\n     302A764915F972860018B83D /\\* Frameworks */ = {\n       isa = PBXGroup;\n       children = (\n. ",
    "peterdemin": "That's what I was looking for! Thanks!\nThe reason, I didn't find it by myself is that \n\n```\nimport xmltodict\nhelp(xmltodict.parse)\n```\n\nreturns\n\n```\nparse(xml_input, encoding='utf-8', expat=<module 'xml.parsers.expat' from 'C:\\Python27\\Lib\\xml\\parsers\\expat.pyc'>, process_namespaces=False, namespace_separator=':', **kwargs)\n```\n\nwhich doesn't mention dict_constructor\n. That's what I was looking for! Thanks!\nThe reason, I didn't find it by myself is that \n\n```\nimport xmltodict\nhelp(xmltodict.parse)\n```\n\nreturns\n\n```\nparse(xml_input, encoding='utf-8', expat=<module 'xml.parsers.expat' from 'C:\\Python27\\Lib\\xml\\parsers\\expat.pyc'>, process_namespaces=False, namespace_separator=':', **kwargs)\n```\n\nwhich doesn't mention dict_constructor\n. ",
    "alesdotio": "Same issue here, downgrading to 0.7.0 for now... (I'm on OSX Mountain Lion btw)\n. You probably need to include distribute_setup.py in the package\n. Same issue here, downgrading to 0.7.0 for now... (I'm on OSX Mountain Lion btw)\n. You probably need to include distribute_setup.py in the package\n. ",
    "lyapun": "```\npip install xmltodict==0.8.2\nDownloading/unpacking xmltodict==0.8.2\n  Downloading xmltodict-0.8.2.tar.gz\n  Running setup.py egg_info for package xmltodict\n    The required version of setuptools (>=1.1.6) is not available,\n    and can't be installed while this script is running. Please\n    install a more recent version first, using\n    'easy_install -U setuptools'.\n\n    (Currently using setuptools 0.9.8 (/Users/taras/atlas/venv/lib/python2.7/site-packages))\n    Complete output from command python setup.py egg_info:\n    The required version of setuptools (>=1.1.6) is not available,\n\nand can't be installed while this script is running. Please\n\ninstall a more recent version first, using\n\n'easy_install -U setuptools'.\n\n\n\n(Currently using setuptools 0.9.8 (/Users/taras/atlas/venv/lib/python2.7/site-packages))\n\n----------------------------------------\nCommand python setup.py egg_info failed with error code 2 in /Users/taras/atlas/venv/build/xmltodict\nStoring complete log in /Users/taras/.pip/pip.log\n```\n. works well, thanks!\n. ```\npip install xmltodict==0.8.2\nDownloading/unpacking xmltodict==0.8.2\n  Downloading xmltodict-0.8.2.tar.gz\n  Running setup.py egg_info for package xmltodict\n    The required version of setuptools (>=1.1.6) is not available,\n    and can't be installed while this script is running. Please\n    install a more recent version first, using\n    'easy_install -U setuptools'.\n\n    (Currently using setuptools 0.9.8 (/Users/taras/atlas/venv/lib/python2.7/site-packages))\n    Complete output from command python setup.py egg_info:\n    The required version of setuptools (>=1.1.6) is not available,\n\nand can't be installed while this script is running. Please\n\ninstall a more recent version first, using\n\n'easy_install -U setuptools'.\n\n\n\n(Currently using setuptools 0.9.8 (/Users/taras/atlas/venv/lib/python2.7/site-packages))\n\n----------------------------------------\nCommand python setup.py egg_info failed with error code 2 in /Users/taras/atlas/venv/build/xmltodict\nStoring complete log in /Users/taras/.pip/pip.log\n```\n. works well, thanks!\n. ",
    "jillh510": "![screen shot 2013-10-23 at 12 47 16 pm](https://f.cloud.github.com/assets/2319837/1393536/f7f45aae-3c1b-11e3-85e3-7c40bf96ef79.png)\n. ![screen shot 2013-10-23 at 12 47 16 pm](https://f.cloud.github.com/assets/2319837/1393536/f7f45aae-3c1b-11e3-85e3-7c40bf96ef79.png)\n. ",
    "grzn": "coverage and nose need to be in test_requires, not setup_requires\n. coverage and nose need to be in test_requires, not setup_requires\n. ",
    "lovato": "Exactly. \nMy two cents:\n- On Ubuntu servers, it installs ok with Python 2.7 Pip 1.4.1. But on a CentOS Python 2.6, I got that same output as above.\n- About the setup_requires, there is an issue around it: https://github.com/pypa/pip/issues/410\n\nThe solution is to install each dependency by hand, so it works.\n\nBest\nMarco\n. Exactly. \nMy two cents:\n- On Ubuntu servers, it installs ok with Python 2.7 Pip 1.4.1. But on a CentOS Python 2.6, I got that same output as above.\n- About the setup_requires, there is an issue around it: https://github.com/pypa/pip/issues/410\n\nThe solution is to install each dependency by hand, so it works.\n\nBest\nMarco\n. ",
    "chrismatta": "```\n$ virtualenv .virtualenvs/test_xmltodict                                                               \nNew python executable in .virtualenvs/test_xmltodict/bin/python\nInstalling Setuptools..............................................................................................................................................................................................................................done.\nInstalling Pip.....................................................................................................................................................................................................................................................................................................................................done.\n\n$ source .virtualenvs/test_xmltodict/bin/activate                                                      \n(test_xmltodict)\n$ pip install xmltodict                                                                                \nDownloading/unpacking xmltodict\n  Downloading xmltodict-0.8.4.tar.gz\n  Running setup.py egg_info for package xmltodict\n\nInstalling collected packages: xmltodict\n  Running setup.py install for xmltodict\n\nSuccessfully installed xmltodict\nCleaning up...\n(test_xmltodict)\n```\n\nLooks good. Thanks for the response.\n. ```\n$ virtualenv .virtualenvs/test_xmltodict                                                               \nNew python executable in .virtualenvs/test_xmltodict/bin/python\nInstalling Setuptools..............................................................................................................................................................................................................................done.\nInstalling Pip.....................................................................................................................................................................................................................................................................................................................................done.\n\n$ source .virtualenvs/test_xmltodict/bin/activate                                                      \n(test_xmltodict)\n$ pip install xmltodict                                                                                \nDownloading/unpacking xmltodict\n  Downloading xmltodict-0.8.4.tar.gz\n  Running setup.py egg_info for package xmltodict\n\nInstalling collected packages: xmltodict\n  Running setup.py install for xmltodict\n\nSuccessfully installed xmltodict\nCleaning up...\n(test_xmltodict)\n```\n\nLooks good. Thanks for the response.\n. ",
    "iOS0x00": "Hi, Martinblech\n\nI\u2019m glad to do that later.\n\nAnd thank you for your awsome work!\n\nBest regards!\n\nNeil neil@neildd.com\n(+86) 136-7197-1600\n\n\u5728 2013\u5e7412\u67089\u65e5\uff0c21:24\uff0cMart\u00edn Blech notifications@github.com \u5199\u9053\uff1a\n\n> @neildd looks good, thanks! The only thing missing is a python 2.4 line in .travis.yml. Can you do that?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. Hi, Martinblech\n\nI\u2019m glad to do that later.\n\nAnd thank you for your awsome work!\n\nBest regards!\n\nNeil neil@neildd.com\n(+86) 136-7197-1600\n\n\u5728 2013\u5e7412\u67089\u65e5\uff0c21:24\uff0cMart\u00edn Blech notifications@github.com \u5199\u9053\uff1a\n\n> @neildd looks good, thanks! The only thing missing is a python 2.4 line in .travis.yml. Can you do that?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n. ",
    "twcook": "I am using Ubuntu 12.10 in a Python 3.3.2 virtualenv.  Other Pypi pkgs\ninstall okay.\n\nHTH,\nTim\n\nOn Mon, Dec 9, 2013 at 11:40 AM, Mart\u00edn Blech notifications@github.comwrote:\n\n> @twcook https://github.com/twcook I'm unable to reproduce this error.\n> What platform did this happen on? Were you using virtualenv?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/50#issuecomment-30132317\n> .\n\n## \n\n# MLHIM VIP Signup: http://goo.gl/22B0U\n\nTimothy Cook, MSc           +55 21 94711995\nMLHIM http://www.mlhim.org\nLike Us on FB: https://www.facebook.com/mlhim2\nCircle us on G+: http://goo.gl/44EV5\nGoogle Scholar: http://goo.gl/MMZ1o\nLinkedIn Profile:http://www.linkedin.com/in/timothywaynecook\n. I am using Ubuntu 12.10 in a Python 3.3.2 virtualenv.  Other Pypi pkgs\ninstall okay.\n\nHTH,\nTim\n\nOn Mon, Dec 9, 2013 at 11:40 AM, Mart\u00edn Blech notifications@github.comwrote:\n\n> @twcook https://github.com/twcook I'm unable to reproduce this error.\n> What platform did this happen on? Were you using virtualenv?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/martinblech/xmltodict/issues/50#issuecomment-30132317\n> .\n\n## \n\n# MLHIM VIP Signup: http://goo.gl/22B0U\n\nTimothy Cook, MSc           +55 21 94711995\nMLHIM http://www.mlhim.org\nLike Us on FB: https://www.facebook.com/mlhim2\nCircle us on G+: http://goo.gl/44EV5\nGoogle Scholar: http://goo.gl/MMZ1o\nLinkedIn Profile:http://www.linkedin.com/in/timothywaynecook\n. ",
    "adamlwgriffiths": "I had the same issue, I believe its because I mistakenly installed `xml2dict` from pypi, not `xmltodict`.\nI only noticed when the version numbers didn't line up with your git tags.\n\nPerhaps put the pip install part of your README toward the top because I didn't bother to read that far initially.\n. I had the same issue, I believe its because I mistakenly installed `xml2dict` from pypi, not `xmltodict`.\nI only noticed when the version numbers didn't line up with your git tags.\n\nPerhaps put the pip install part of your README toward the top because I didn't bother to read that far initially.\n. ",
    "hoppfrosch": "Sry - it seems to be already there. \n\nHad a look on old version ... \n\nClosed\n. Sry - it seems to be already there. \n\nHad a look on old version ... \n\nClosed\n. ",
    "megahall": "FYI I think I found a bug in this. If you pass something like so:\n\n```\n{\n    \"@name\": \"dbl-test\",\n    \"description\": \"dbl-test\",\n    \"recurring\": {\n        \"hourly\": {\n            \"at\": \"00\"\n        }\n    },\n    \"type\": \"ip\",\n    \"url\": \"http://192.168.1.6:8080/pa-dbl.txt\"\n}\n```\n\nIt's not able to turn that into an \"XML snippet\" even when you have `full_document=False`.\n. FYI I think I found a bug in this. If you pass something like so:\n\n```\n{\n    \"@name\": \"dbl-test\",\n    \"description\": \"dbl-test\",\n    \"recurring\": {\n        \"hourly\": {\n            \"at\": \"00\"\n        }\n    },\n    \"type\": \"ip\",\n    \"url\": \"http://192.168.1.6:8080/pa-dbl.txt\"\n}\n```\n\nIt's not able to turn that into an \"XML snippet\" even when you have `full_document=False`.\n. ",
    "chaak20": "I also have this problem using 0.10.1. I'm using the '#text' keyvalue in the input dict but xmltodict never writes the CDATA text string out in the xml.  I also resorted to adding it in myself as @skela.  When I try your fix, it still does not work.\n\n> > > import xmltodict\n> > > val = '<a href=\"http://www.space.com\">Hi my name is Bob</a>'\n> > > strings = [{\"@name\": \"some_html\", \"#text\": val}]\n> > > xmld = {\"resources\": {\"string\": strings}}\n> > > xml = xmltodict.unparse(xmld, pretty=True)\n> > > xml\n> > > '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<resources>\\n\\t<string name=\"some_html\">&lt;a href=\"http://www.space.com\"&gt;Hi my name is Bob&lt;/a&gt;</string>\\n</resources>'\n\nHow can I get the CDATA text <![CDATA[ at the beginning and ]]> at the end without the escapes ?\n. FWIW, I was able to accomplish what I needed with this change:\n\n**\\* xmltodict.py.orig   2016-03-28 13:37:00.098508399 -0500\n--- xmltodict.py        2016-03-28 16:11:52.053726618 -0500\n\n---\n\n**\\* 362,368 ****\n--- 362,371 ----\n                    attr_prefix, cdata_key, depth+1, preprocessor,\n                    pretty, newl, indent)\n          if cdata is not None:\n-             # Output the CDATA start/end tags explicity\n-             content_handler._write(r\"<![CDATA[\")\n            content_handler.characters(cdata)\n-             content_handler._write(r\"]]>\")\n        if pretty and children:\n            content_handler.ignorableWhitespace(depth \\* indent)\n        content_handler.endElement(key)\n. I understand now that xmltodict notion of cdata is different from XML's notion of CDATA. The above hack simply does not work because any and all character data gets encapsulated by XML's CDATA strings.\n\nThe solution I found is to do the following:\n- Encapsulate any user CDATA with the XML CDATA strings.\n- Use xmltodict.unparse() to write the data to a string\n- Use xml.sax.saxutils.unescape() to reconvert the entity references back.\n\nThanks again for writing this library module as I find it very useful.\n. I also have this problem using 0.10.1. I'm using the '#text' keyvalue in the input dict but xmltodict never writes the CDATA text string out in the xml.  I also resorted to adding it in myself as @skela.  When I try your fix, it still does not work.\n\n> > > import xmltodict\n> > > val = '<a href=\"http://www.space.com\">Hi my name is Bob</a>'\n> > > strings = [{\"@name\": \"some_html\", \"#text\": val}]\n> > > xmld = {\"resources\": {\"string\": strings}}\n> > > xml = xmltodict.unparse(xmld, pretty=True)\n> > > xml\n> > > '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<resources>\\n\\t<string name=\"some_html\">&lt;a href=\"http://www.space.com\"&gt;Hi my name is Bob&lt;/a&gt;</string>\\n</resources>'\n\nHow can I get the CDATA text <![CDATA[ at the beginning and ]]> at the end without the escapes ?\n. FWIW, I was able to accomplish what I needed with this change:\n\n**\\* xmltodict.py.orig   2016-03-28 13:37:00.098508399 -0500\n--- xmltodict.py        2016-03-28 16:11:52.053726618 -0500\n\n---\n\n**\\* 362,368 ****\n--- 362,371 ----\n                    attr_prefix, cdata_key, depth+1, preprocessor,\n                    pretty, newl, indent)\n          if cdata is not None:\n-             # Output the CDATA start/end tags explicity\n-             content_handler._write(r\"<![CDATA[\")\n            content_handler.characters(cdata)\n-             content_handler._write(r\"]]>\")\n        if pretty and children:\n            content_handler.ignorableWhitespace(depth \\* indent)\n        content_handler.endElement(key)\n. I understand now that xmltodict notion of cdata is different from XML's notion of CDATA. The above hack simply does not work because any and all character data gets encapsulated by XML's CDATA strings.\n\nThe solution I found is to do the following:\n- Encapsulate any user CDATA with the XML CDATA strings.\n- Use xmltodict.unparse() to write the data to a string\n- Use xml.sax.saxutils.unescape() to reconvert the entity references back.\n\nThanks again for writing this library module as I find it very useful.\n. ",
    "walko1234": "I saw there was an solution in issue #14 but how can I change it to get list of OrderedDicts ?\n. I saw there was an solution in issue #14 but how can I change it to get list of OrderedDicts ?\n. ",
    "fyears": "Wow! There's a hidden feature! I should have a good look at the source code first!\n\nThank you. :-)\n. I made it. May be you could directly add it into `xmltodict` package.\n\n```\nfrom collections import OrderedDict\nfrom xmltodict import unparse\n# you should remove the above lines\n# if you are adding the following lines into the package\n\ndef raw_text(parsed_obj):\n    return unparse(OrderedDict([('xml', parsed_obj)]))[44:-6]\n```\n. Wow! There's a hidden feature! I should have a good look at the source code first!\n\nThank you. :-)\n. I made it. May be you could directly add it into `xmltodict` package.\n\n```\nfrom collections import OrderedDict\nfrom xmltodict import unparse\n# you should remove the above lines\n# if you are adding the following lines into the package\n\ndef raw_text(parsed_obj):\n    return unparse(OrderedDict([('xml', parsed_obj)]))[44:-6]\n```\n. ",
    "sbadia": "@martinblech thanks!\n. @martinblech an official Debian package :-) https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=745052\n. @martinblech done :-)\n- http://packages.qa.debian.org/p/python-xmltodict.html\n- http://packages.ubuntu.com/utopic/all/python-xmltodict\n. thanks :)\n. @martinblech thanks!\n. @martinblech an official Debian package :-) https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=745052\n. @martinblech done :-)\n- http://packages.qa.debian.org/p/python-xmltodict.html\n- http://packages.ubuntu.com/utopic/all/python-xmltodict\n. thanks :)\n. ",
    "dgonyier": "Figured out the issue on my end.Due to a known bug in Python 2.7.6 on Windows.\n\nI manually applied the patch for Lib/mimetypes.py from this diff and the was able to install xmltodict\nwithout issue\n\nhttp://bugs.python.org/file18143/\n. For reference, here is where I found the hint:\n\nhttp://stackoverflow.com/a/20451328/3417186\n. Figured out the issue on my end.Due to a known bug in Python 2.7.6 on Windows.\n\nI manually applied the patch for Lib/mimetypes.py from this diff and the was able to install xmltodict\nwithout issue\n\nhttp://bugs.python.org/file18143/\n. For reference, here is where I found the hint:\n\nhttp://stackoverflow.com/a/20451328/3417186\n. ",
    "margru": "AFAIK, there are two options:\n\n``` python\nxml.sax.saxutils.unescape\n```\n\nwhich unescape `&amp;`, `&lt;`, and `&gt;` in a string of data.\n\nOr\n\nin Python 2\n\n``` python\nHTMLParser.HTMLParser.unescape\n```\n\nin Python 3\n\n``` python\nhtml.parser.HTMLParser().unescape\n```\n\nwhich is not documented.\n\nBoth are a standard part of Python. The (current) resulting string could be passed into one of these functions to get rid of the entities. But I'm not familiar with the internal processes of your module so I don't know if it can be really used as I suppose.\n. AFAIK, there are two options:\n\n``` python\nxml.sax.saxutils.unescape\n```\n\nwhich unescape `&amp;`, `&lt;`, and `&gt;` in a string of data.\n\nOr\n\nin Python 2\n\n``` python\nHTMLParser.HTMLParser.unescape\n```\n\nin Python 3\n\n``` python\nhtml.parser.HTMLParser().unescape\n```\n\nwhich is not documented.\n\nBoth are a standard part of Python. The (current) resulting string could be passed into one of these functions to get rid of the entities. But I'm not familiar with the internal processes of your module so I don't know if it can be really used as I suppose.\n. ",
    "joohoi": "Has there been any progress in this issue?\n. Yeah, I came to the same conclusion after fiddling around the code a bit. Can't think of any alternative ways to handle that using SAX.\n. Has there been any progress in this issue?\n. Yeah, I came to the same conclusion after fiddling around the code a bit. Can't think of any alternative ways to handle that using SAX.\n. ",
    "beyondai": "Hi all,\n\nYou can hack through this issue by replacing the tag in the response string before passing to xmltodict parser.\nFor example, if your text is \n\n``` xml\n\"<someTag>bar foo</someTag>\" \n```\n\nand you do not want it to be parsed, you can try \n\n``` xml\nxmltodict.parse(resp.text.replace(\"<someTag>\", \"\").replace(\"</someTag>\", \"\")).\n```\n\nThis simple hack does not solve all problems, but it solves mine.\n\nThanks,\n. Hi all,\n\nYou can hack through this issue by replacing the tag in the response string before passing to xmltodict parser.\nFor example, if your text is \n\n``` xml\n\"<someTag>bar foo</someTag>\" \n```\n\nand you do not want it to be parsed, you can try \n\n``` xml\nxmltodict.parse(resp.text.replace(\"<someTag>\", \"\").replace(\"</someTag>\", \"\")).\n```\n\nThis simple hack does not solve all problems, but it solves mine.\n\nThanks,\n. ",
    "raoulschaffner": "i'm also very interested in a fix to this problem. i have to deal with semi-structured bibliographical data in xml that contains elements with html-formatted content.\n. i'm also very interested in a fix to this problem. i have to deal with semi-structured bibliographical data in xml that contains elements with html-formatted content.\n. ",
    "frewsxcv": "@martinblech Ah, missed that. Added it in\n. @martinblech Ah, missed that. Added it in\n. ",
    "CamyDee": "This is another good example of a case where there is no way for xmltodict to know what is expected.  The creation of an array for multiple nodes makes perfect sense, but may not make much sense for single nodes... else everything becomes an array.\n\nThis is (IMHO) another case where annotation of the expected outcome would be useful.  I outlined a method of approaching these types of cases here: #64 - where the source could be annotated with attributes (even x2d namespaced if necessary).  This works well when the source is generated by the same code (or nearby code that is in your control) that needs to convert it to dict/JSON... alternatively, this information could be passed as an annotation map, when the source is not as easily modified.\n\n@martinblech - I realize this goes beyond the scope of the original purpose of this library, as you have mentioned before. However, I do think that more users will want this kind of functionality. Perhaps it is time to make my own branch...\n. This is another good example of a case where there is no way for xmltodict to know what is expected.  The creation of an array for multiple nodes makes perfect sense, but may not make much sense for single nodes... else everything becomes an array.\n\nThis is (IMHO) another case where annotation of the expected outcome would be useful.  I outlined a method of approaching these types of cases here: #64 - where the source could be annotated with attributes (even x2d namespaced if necessary).  This works well when the source is generated by the same code (or nearby code that is in your control) that needs to convert it to dict/JSON... alternatively, this information could be passed as an annotation map, when the source is not as easily modified.\n\n@martinblech - I realize this goes beyond the scope of the original purpose of this library, as you have mentioned before. However, I do think that more users will want this kind of functionality. Perhaps it is time to make my own branch...\n. ",
    "imkin": "Ah my bad I was installing xml2dict instead of xmltodict :(\n. Ah my bad I was installing xml2dict instead of xmltodict :(\n. ",
    "pySilver": "This solves issue ( \n\n``` python\n# https://github.com/martinblech/xmltodict/blob/master/xmltodict.py#L292\nfor child_key, child_value in children:\n           if isinstance(child_value, (list, tuple)) and not child_value:\n                child_value = None\n            _emit(child_key, child_value, content_handler,\n                  attr_prefix, cdata_key, depth+1, preprocessor,\n                  pretty, newl, indent)\n\n```\n. @martinblech well it depends. if you are building some kind of export format, user may expect element there, at least empty one.\n. This solves issue ( \n\n``` python\n# https://github.com/martinblech/xmltodict/blob/master/xmltodict.py#L292\nfor child_key, child_value in children:\n           if isinstance(child_value, (list, tuple)) and not child_value:\n                child_value = None\n            _emit(child_key, child_value, content_handler,\n                  attr_prefix, cdata_key, depth+1, preprocessor,\n                  pretty, newl, indent)\n\n```\n. @martinblech well it depends. if you are building some kind of export format, user may expect element there, at least empty one.\n. ",
    "tbc": "What a coincidence. I discovered xmltodict just last week, had to work around this behavior, and now here we are talking about it. I agree with @martinblech's design decision. I like how parse works and work around it after unparse.\n. What a coincidence. I discovered xmltodict just last week, had to work around this behavior, and now here we are talking about it. I agree with @martinblech's design decision. I like how parse works and work around it after unparse.\n. ",
    "Telofy": "Hmm, yeah, sorry for the noise. It seems to be a really weird problem with my terminal emulator that only occurs when it has to wrap the previous line at a very specific spot. I restarted IPython and was still able to reproduce it reliably, but then I resized the window slightly, and now it displays the line just as it does for you. But even when the printed version was still missing the line, its `repr` contained it, so it was clearly a problem outside your code and probably outside Python.\n. Hmm, yeah, sorry for the noise. It seems to be a really weird problem with my terminal emulator that only occurs when it has to wrap the previous line at a very specific spot. I restarted IPython and was still able to reproduce it reliably, but then I resized the window slightly, and now it displays the line just as it does for you. But even when the printed version was still missing the line, its `repr` contained it, so it was clearly a problem outside your code and probably outside Python.\n. ",
    "garyjohnson": "Sorry, I found similar issue https://github.com/martinblech/xmltodict/issues/67. Closing this one.\n. Sorry, I found similar issue https://github.com/martinblech/xmltodict/issues/67. Closing this one.\n. ",
    "pvledoux": "+1\n. +1\n. ",
    "a-x-": "Hrm...\n\nI remove `['#text']` and exception vanished...\n. Hrm...\n\nI remove `['#text']` and exception vanished...\n. ",
    "jabbalaci": "I found the solution: you need to open the XML input as **binary**:\n\n```\nwith open(xml_file, \"rb\") as f:\n    d = xmltodict.parse(f, xml_attribs=True)\n```\n\nNotice the \"rb\" mode instead of \"r\".\n. I found the solution: you need to open the XML input as **binary**:\n\n```\nwith open(xml_file, \"rb\") as f:\n    d = xmltodict.parse(f, xml_attribs=True)\n```\n\nNotice the \"rb\" mode instead of \"r\".\n. ",
    "koliyo": "I stumbled upon the same problem.\r\n\r\nIs binary mode really a good solution? Why would I need to open an xml-file as binary :/\r\n\r\nI would like this issue reopened, and using the binary mode only as a temporary workaround.. I still don't see why the parser should expect bytes, XML is text. It is not a big deal, but I am curious of the reasoning for this.. I stumbled upon the same problem.\r\n\r\nIs binary mode really a good solution? Why would I need to open an xml-file as binary :/\r\n\r\nI would like this issue reopened, and using the binary mode only as a temporary workaround.. I still don't see why the parser should expect bytes, XML is text. It is not a big deal, but I am curious of the reasoning for this.. ",
    "JKillian": "Great, thanks for the implementation and quick work @martinblech!\n. @martinblech Found an edge case actually:\n\n``` python\nunparse({'node': [1, 2, 3, 4]})\n# raises ValueError('document with multiple roots')\n```\n\nI think the fix is to pass `full_document` to `_emit` and only do the `if depth == 0 and len(value) > 1:` test if it is a full document. \n. Thanks @martinblech!\n. Great, thanks for the implementation and quick work @martinblech!\n. @martinblech Found an edge case actually:\n\n``` python\nunparse({'node': [1, 2, 3, 4]})\n# raises ValueError('document with multiple roots')\n```\n\nI think the fix is to pass `full_document` to `_emit` and only do the `if depth == 0 and len(value) > 1:` test if it is a full document. \n. Thanks @martinblech!\n. ",
    "carmstrong": "Thanks @martinblech - I had actually posted the question there before trying `defaultdict` with xmltodict - http://stackoverflow.com/questions/28039608/python-getting-sub-dicts-in-dicts-dynamically\n\nI'm afraid my elementary understanding of Python is failing me here - I'm not sure how using a string is giving me the same problems as using None. Anyhow, thanks for the quick reply and for the library. Once I get it working, it's exactly what I need!\n. > Perhaps you could try\n\nYes, but I am calling this over 100 times in my model utility, so catching the error each time isn't realistic. I thought about writing a wrapper function which would handle this for me, but couldn't figure out how to pass the sub-key I'm interested in without evaluating it when I'm passing it (i.e. `foo.bar.might.exist`).\n. Thanks @martinblech - I had actually posted the question there before trying `defaultdict` with xmltodict - http://stackoverflow.com/questions/28039608/python-getting-sub-dicts-in-dicts-dynamically\n\nI'm afraid my elementary understanding of Python is failing me here - I'm not sure how using a string is giving me the same problems as using None. Anyhow, thanks for the quick reply and for the library. Once I get it working, it's exactly what I need!\n. > Perhaps you could try\n\nYes, but I am calling this over 100 times in my model utility, so catching the error each time isn't realistic. I thought about writing a wrapper function which would handle this for me, but couldn't figure out how to pass the sub-key I'm interested in without evaluating it when I'm passing it (i.e. `foo.bar.might.exist`).\n. ",
    "acz13": "Perhaps you could try\n\n```\n    try:\n        return = res[foo][bar][might][exist]\n    except KeyError:\n        return ''\n```\n. Perhaps you could try\n\n```\n    try:\n        return = res[foo][bar][might][exist]\n    except KeyError:\n        return ''\n```\n. ",
    "xtiansimon": "Ok. That list element may be 'correct', but it causes heck for what is otherwise a trivial recursive function.\n\n```\n# helper function\ndef listRecursive (d, key):\n    for k, v in d.items ()\n        if isinstance (v, OrderedDict):              // breaking here on the list\n            for found in listRecursive (v, key):\n                yield found\n        if k == key:    \n            yield v\n\n# recursive search\nfor path, found in listRecursive (FileDict, 'timestamp'):\n   print \"xmltodict: {0}\".format(found)\n```\n. sorry. my bad. I was editing my reply...\n. Ok. That list element may be 'correct', but it causes heck for what is otherwise a trivial recursive function.\n\n```\n# helper function\ndef listRecursive (d, key):\n    for k, v in d.items ()\n        if isinstance (v, OrderedDict):              // breaking here on the list\n            for found in listRecursive (v, key):\n                yield found\n        if k == key:    \n            yield v\n\n# recursive search\nfor path, found in listRecursive (FileDict, 'timestamp'):\n   print \"xmltodict: {0}\".format(found)\n```\n. sorry. my bad. I was editing my reply...\n. ",
    "rotten": "Here is some code:\n\n``` python\nfrom collections import OrderedDict\nimport xmltodict\n\naddressDict = OrderedDict()\n\naddressDict = {\n    'COMMONCUSTOMER' : OrderedDict({\n        'ADDRESSES' : OrderedDict({\n            'ADDRESS' : OrderedDict({\n                'ADDRESS_KEYS' : {\n                    'ADDRESS_KEY' : OrderedDict({\n                        'KEY' : 'some_id',\n                        'VALUE' : '123456789'\n                     })\n                 },\n                'ERROR' : OrderedDict({\n                    'ERROR_CODE' : 'OK',\n                    'ERROR_DESCRIPTION' : 'Everything is A-OK.'\n                }),\n                'ACCESS_CD' : 'Some String',\n                'ENTITY_CD' :  0,\n                'SOURCE_ID' :  0,\n                'LN_1_AD'   : '123 Main St.',\n                'LN_2_AD'   : '',\n                'CTY_NM'    : 'MiddleAmerica',\n                'US_ST_CD'  : 'OH',\n                'POSTAL_CD'    : '43201'\n           })\n       })\n   })\n}\n\naddressXML = xmltodict.unparse(addressDict, pretty=True, indent='   ')\nprint addressXML\n```\n\nAnd here is what it looks like:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<COMMONCUSTOMER>\n   <ADDRESSES>\n      <ADDRESS>\n         <ENTITY_CD>0</ENTITY_CD>\n         <ACCESS_CD>Some String</ACCESS_CD>\n         <CTY_NM>MiddleAmerica</CTY_NM>\n         <US_ST_CD>OH</US_ST_CD>\n         <ERROR>\n            <ERROR_DESCRIPTION>Everything is A-OK.</ERROR_DESCRIPTION>\n            <ERROR_CODE>OK</ERROR_CODE>\n         </ERROR>\n         <SOURCE_ID>0</SOURCE_ID>\n         <POSTAL_CD>43201</POSTAL_CD>\n         <ADDRESS_KEYS>\n            <ADDRESS_KEY>\n               <VALUE>123456789</VALUE>\n               <KEY>some_id</KEY>\n            </ADDRESS_KEY>\n         </ADDRESS_KEYS>\n         <LN_2_AD></LN_2_AD>\n         <LN_1_AD>123 Main St.</LN_1_AD>\n      </ADDRESS>\n   </ADDRESSES>\n</COMMONCUSTOMER>\n```\n\nI was expecting the XML to come out in the same order the keys are in the Dictionary. ie, something like this:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<COMMONCUSTOMER>\n   <ADDRESSES>\n      <ADDRESS>\n         <ADDRESS_KEYS>\n            <ADDRESS_KEY>\n               <KEY>some_id</KEY>\n               <VALUE>123456789</VALUE>\n            </ADDRESS_KEY>\n         </ADDRESS_KEYS>\n         <ERROR>\n            <ERROR_CODE>OK</ERROR_CODE>\n            <ERROR_DESCRIPTION>Everything is A-OK.</ERROR_DESCRIPTION>\n         </ERROR>\n         <ACCESS_CD>Some String</ACCESS_CD>\n         <ENTITY_CD>0</ENTITY_CD>\n         <SOURCE_ID>0</SOURCE_ID>\n         <LN_1_AD>123 Main St.</LN_1_AD>\n         <LN_2_AD></LN_2_AD>\n         <CTY_NM>MiddleAmerica</CTY_NM>\n         <US_ST_CD>OH</US_ST_CD>\n         <POSTAL_CD>43201</POSTAL_CD>\n      </ADDRESS>\n   </ADDRESSES>\n</COMMONCUSTOMER>\n```\n. You are right!  Sorry about that.  It works as expected now.  Duh. Thanks for pointing that out.\n. Here is some code:\n\n``` python\nfrom collections import OrderedDict\nimport xmltodict\n\naddressDict = OrderedDict()\n\naddressDict = {\n    'COMMONCUSTOMER' : OrderedDict({\n        'ADDRESSES' : OrderedDict({\n            'ADDRESS' : OrderedDict({\n                'ADDRESS_KEYS' : {\n                    'ADDRESS_KEY' : OrderedDict({\n                        'KEY' : 'some_id',\n                        'VALUE' : '123456789'\n                     })\n                 },\n                'ERROR' : OrderedDict({\n                    'ERROR_CODE' : 'OK',\n                    'ERROR_DESCRIPTION' : 'Everything is A-OK.'\n                }),\n                'ACCESS_CD' : 'Some String',\n                'ENTITY_CD' :  0,\n                'SOURCE_ID' :  0,\n                'LN_1_AD'   : '123 Main St.',\n                'LN_2_AD'   : '',\n                'CTY_NM'    : 'MiddleAmerica',\n                'US_ST_CD'  : 'OH',\n                'POSTAL_CD'    : '43201'\n           })\n       })\n   })\n}\n\naddressXML = xmltodict.unparse(addressDict, pretty=True, indent='   ')\nprint addressXML\n```\n\nAnd here is what it looks like:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<COMMONCUSTOMER>\n   <ADDRESSES>\n      <ADDRESS>\n         <ENTITY_CD>0</ENTITY_CD>\n         <ACCESS_CD>Some String</ACCESS_CD>\n         <CTY_NM>MiddleAmerica</CTY_NM>\n         <US_ST_CD>OH</US_ST_CD>\n         <ERROR>\n            <ERROR_DESCRIPTION>Everything is A-OK.</ERROR_DESCRIPTION>\n            <ERROR_CODE>OK</ERROR_CODE>\n         </ERROR>\n         <SOURCE_ID>0</SOURCE_ID>\n         <POSTAL_CD>43201</POSTAL_CD>\n         <ADDRESS_KEYS>\n            <ADDRESS_KEY>\n               <VALUE>123456789</VALUE>\n               <KEY>some_id</KEY>\n            </ADDRESS_KEY>\n         </ADDRESS_KEYS>\n         <LN_2_AD></LN_2_AD>\n         <LN_1_AD>123 Main St.</LN_1_AD>\n      </ADDRESS>\n   </ADDRESSES>\n</COMMONCUSTOMER>\n```\n\nI was expecting the XML to come out in the same order the keys are in the Dictionary. ie, something like this:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<COMMONCUSTOMER>\n   <ADDRESSES>\n      <ADDRESS>\n         <ADDRESS_KEYS>\n            <ADDRESS_KEY>\n               <KEY>some_id</KEY>\n               <VALUE>123456789</VALUE>\n            </ADDRESS_KEY>\n         </ADDRESS_KEYS>\n         <ERROR>\n            <ERROR_CODE>OK</ERROR_CODE>\n            <ERROR_DESCRIPTION>Everything is A-OK.</ERROR_DESCRIPTION>\n         </ERROR>\n         <ACCESS_CD>Some String</ACCESS_CD>\n         <ENTITY_CD>0</ENTITY_CD>\n         <SOURCE_ID>0</SOURCE_ID>\n         <LN_1_AD>123 Main St.</LN_1_AD>\n         <LN_2_AD></LN_2_AD>\n         <CTY_NM>MiddleAmerica</CTY_NM>\n         <US_ST_CD>OH</US_ST_CD>\n         <POSTAL_CD>43201</POSTAL_CD>\n      </ADDRESS>\n   </ADDRESSES>\n</COMMONCUSTOMER>\n```\n. You are right!  Sorry about that.  It works as expected now.  Duh. Thanks for pointing that out.\n. ",
    "centralniak": "Although this is easy to fix by casting to `_unicode` it would require changing the assertions in tests to something less precise than `assertEqual`. \n\n@martinblech Let me know if you want this fixed, I'm happy work on this if so. \n. @martinblech If you could please first merge #96 so I could rebase over it? \n\nI believe then the failing job would turn green. \n. Thank you. Looks I need to work a little bit more on this to resolve the Jython job failing. Will keep you posted. \n. It appears to me that Jython implementation of `ordereddict` might be broken - in fact it just mirrors `dict` and does not retain the order.\n\nMy proposal is to just skip this one particular test in Jython build.\n\nhttps://travis-ci.org/martinblech/xmltodict/jobs/58614651#L415-L420\n\nWDYT @martinblech ?\n. You're welcome :-)\n. OK, that's because Python 2.6 uses dict behind the scenes:\n\n```\ntry:  # pragma no cover\n    from collections import OrderedDict\nexcept ImportError:  # pragma no cover\n    try:\n        from ordereddict import OrderedDict\n    except ImportError:\n        OrderedDict = dict\n```\n\nThe outcome of such tests is pure luck. A quick fix is to modify asserts to expect both `<a>1</a>` and `<b>2</b>` to be present in XML but not in any particular order.\n\nI'm sure there is a better way to write asserts about XML contents though. \n\n_Edit:_\n\nOr actually just provide ordereddict for both tox and travis as a dependency.\n. Although this is easy to fix by casting to `_unicode` it would require changing the assertions in tests to something less precise than `assertEqual`. \n\n@martinblech Let me know if you want this fixed, I'm happy work on this if so. \n. @martinblech If you could please first merge #96 so I could rebase over it? \n\nI believe then the failing job would turn green. \n. Thank you. Looks I need to work a little bit more on this to resolve the Jython job failing. Will keep you posted. \n. It appears to me that Jython implementation of `ordereddict` might be broken - in fact it just mirrors `dict` and does not retain the order.\n\nMy proposal is to just skip this one particular test in Jython build.\n\nhttps://travis-ci.org/martinblech/xmltodict/jobs/58614651#L415-L420\n\nWDYT @martinblech ?\n. You're welcome :-)\n. OK, that's because Python 2.6 uses dict behind the scenes:\n\n```\ntry:  # pragma no cover\n    from collections import OrderedDict\nexcept ImportError:  # pragma no cover\n    try:\n        from ordereddict import OrderedDict\n    except ImportError:\n        OrderedDict = dict\n```\n\nThe outcome of such tests is pure luck. A quick fix is to modify asserts to expect both `<a>1</a>` and `<b>2</b>` to be present in XML but not in any particular order.\n\nI'm sure there is a better way to write asserts about XML contents though. \n\n_Edit:_\n\nOr actually just provide ordereddict for both tox and travis as a dependency.\n. ",
    "muffl0n": "The STIXProject had the same problem: https://github.com/STIXProject/python-stix/issues/220\nThey fixed it by using unicode() around all values: https://github.com/STIXProject/python-stix/pull/233/files#diff-a79d7dfc915093fc3e522827c21b2211R290\n. The STIXProject had the same problem: https://github.com/STIXProject/python-stix/issues/220\nThey fixed it by using unicode() around all values: https://github.com/STIXProject/python-stix/pull/233/files#diff-a79d7dfc915093fc3e522827c21b2211R290\n. ",
    "kputland": "I would like \n\n```\n\"@http://www.w3.org/2001/XMLSchema-instance:type\": \"UserOutgoingCallingPlanOriginatingModifyRequest\"\n```\n\nto be\n\n```\n\"@type\": \"UserOutgoingCallingPlanOriginatingModifyRequest\"\n```\n\nwhen all is said and done.\n. ``` python\n# /usr/bin/env python\n# filename: xml2dict_IS87.py \nimport xmltodict\nimport json\nimport difflib\nimport sys\n\nXMLSTRING=\"\"\"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<BroadsoftDocument protocol=\"OCI\" xmlns=\"C\">\n  <userId xmlns=\"\">someuserid!</userId>\n  <command xsi:type=\"UserOutgoingCallingPlanOriginatingModifyRequest\" xmlns=\"\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">;\n    <userId>12345678</userId>\n    <useCustomSettings>true</useCustomSettings>\n    <userPermissions>\n      <group>Allow</group>\n      <local>Allow</local>\n      <tollFree>Allow</tollFree>\n      <toll>Allow</toll>\n      <international>Allow</international>\n      <operatorAssisted>Allow</operatorAssisted>\n      <chargeableDirectoryAssisted>Allow</chargeableDirectoryAssisted>\n      <specialServicesI>Allow</specialServicesI>\n      <specialServicesII>Allow</specialServicesII>\n      <premiumServicesI>Disallow</premiumServicesI>\n      <premiumServicesII>Disallow</premiumServicesII>\n      <casual>Disallow</casual>\n      <urlDialing>Allow</urlDialing>\n      <unknown>Allow</unknown>\n    </userPermissions>\n  </command>\n</BroadsoftDocument>\n\"\"\"\n\nEXPECTED=\"\"\"{\n  \"BroadsoftDocument\": {\n    \"@protocol\": \"OCI\", \n    \"userId\": \"someuserid!\", \n    \"command\": {\n      \"@type\": \"UserOutgoingCallingPlanOriginatingModifyRequest\", \n      \"userId\": \"12345678\", \n      \"useCustomSettings\": \"true\", \n      \"userPermissions\": {\n        \"group\": \"Allow\", \n        \"local\": \"Allow\", \n        \"tollFree\": \"Allow\", \n        \"toll\": \"Allow\", \n        \"international\": \"Allow\", \n        \"operatorAssisted\": \"Allow\", \n        \"chargeableDirectoryAssisted\": \"Allow\", \n        \"specialServicesI\": \"Allow\", \n        \"specialServicesII\": \"Allow\", \n        \"premiumServicesI\": \"Disallow\", \n        \"premiumServicesII\": \"Disallow\", \n        \"casual\": \"Disallow\", \n        \"urlDialing\": \"Allow\", \n        \"unknown\": \"Allow\"\n      }, \n      \"#text\": \";\"\n    }\n  }\n}\"\"\"\n\nPARSED = xmltodict.parse(XMLSTRING.strip(), process_namespaces=True, namespaces={'C':None, 'xsi':None, 'http://www.w3.org/2001/XMLSchema-instance':None})\n\nRESULT = json.dumps(PARSED, indent=2)\n\nif RESULT != EXPECTED:\n    print('EXPECTED')\n    print(EXPECTED)\n    print\n    print('RESULT')\n    print(RESULT)\n\n    print\n    print('DIFF')\n    for line in difflib.unified_diff(RESULT.splitlines(1), EXPECTED.splitlines(1), fromfile=\"RESULT\", tofile=\"EXPECTED\"):\n        sys.stdout.write(line)\n    sys.exit(1)\n```\n. ``` python\n# filename: xml2dict_IS87.py \nimport xmltodict\nimport json\nimport difflib\nimport sys\n\nXMLSTRING=\"\"\"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<BroadsoftDocument protocol=\"OCI\" xmlns=\"C\">\n  <command xsi:type=\"UserOutgoingCallingPlanOriginatingModifyRequest\" xmlns=\"\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">;\n  </command>\n</BroadsoftDocument>\n\"\"\"\n\nEXPECTED=\"\"\"{\n  \"BroadsoftDocument\": {\n    \"@protocol\": \"OCI\", \n    \"command\": {\n      \"@type\": \"UserOutgoingCallingPlanOriginatingModifyRequest\"\n      }, \n      \"#text\": \";\"\n    }\n  }\n}\"\"\"\n\nPARSED = xmltodict.parse(XMLSTRING.strip(), process_namespaces=True, namespaces={'C':None, 'xsi':None, 'http://www.w3.org/2001/XMLSchema-instance':None})\n\nRESULT = json.dumps(PARSED, indent=2)\n\nif RESULT != EXPECTED:\n    print('EXPECTED')\n    print(EXPECTED)\n    print\n    print('RESULT')\n    print(RESULT)\n\n    print\n    print('DIFF')\n    for line in difflib.unified_diff(RESULT.splitlines(1), EXPECTED.splitlines(1), fromfile=\"RESULT\", tofile=\"EXPECTED\"):\n        sys.stdout.write(line)\n    sys.exit(1)\n```\n. I would like \n\n```\n\"@http://www.w3.org/2001/XMLSchema-instance:type\": \"UserOutgoingCallingPlanOriginatingModifyRequest\"\n```\n\nto be\n\n```\n\"@type\": \"UserOutgoingCallingPlanOriginatingModifyRequest\"\n```\n\nwhen all is said and done.\n. ``` python\n# /usr/bin/env python\n# filename: xml2dict_IS87.py \nimport xmltodict\nimport json\nimport difflib\nimport sys\n\nXMLSTRING=\"\"\"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<BroadsoftDocument protocol=\"OCI\" xmlns=\"C\">\n  <userId xmlns=\"\">someuserid!</userId>\n  <command xsi:type=\"UserOutgoingCallingPlanOriginatingModifyRequest\" xmlns=\"\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">;\n    <userId>12345678</userId>\n    <useCustomSettings>true</useCustomSettings>\n    <userPermissions>\n      <group>Allow</group>\n      <local>Allow</local>\n      <tollFree>Allow</tollFree>\n      <toll>Allow</toll>\n      <international>Allow</international>\n      <operatorAssisted>Allow</operatorAssisted>\n      <chargeableDirectoryAssisted>Allow</chargeableDirectoryAssisted>\n      <specialServicesI>Allow</specialServicesI>\n      <specialServicesII>Allow</specialServicesII>\n      <premiumServicesI>Disallow</premiumServicesI>\n      <premiumServicesII>Disallow</premiumServicesII>\n      <casual>Disallow</casual>\n      <urlDialing>Allow</urlDialing>\n      <unknown>Allow</unknown>\n    </userPermissions>\n  </command>\n</BroadsoftDocument>\n\"\"\"\n\nEXPECTED=\"\"\"{\n  \"BroadsoftDocument\": {\n    \"@protocol\": \"OCI\", \n    \"userId\": \"someuserid!\", \n    \"command\": {\n      \"@type\": \"UserOutgoingCallingPlanOriginatingModifyRequest\", \n      \"userId\": \"12345678\", \n      \"useCustomSettings\": \"true\", \n      \"userPermissions\": {\n        \"group\": \"Allow\", \n        \"local\": \"Allow\", \n        \"tollFree\": \"Allow\", \n        \"toll\": \"Allow\", \n        \"international\": \"Allow\", \n        \"operatorAssisted\": \"Allow\", \n        \"chargeableDirectoryAssisted\": \"Allow\", \n        \"specialServicesI\": \"Allow\", \n        \"specialServicesII\": \"Allow\", \n        \"premiumServicesI\": \"Disallow\", \n        \"premiumServicesII\": \"Disallow\", \n        \"casual\": \"Disallow\", \n        \"urlDialing\": \"Allow\", \n        \"unknown\": \"Allow\"\n      }, \n      \"#text\": \";\"\n    }\n  }\n}\"\"\"\n\nPARSED = xmltodict.parse(XMLSTRING.strip(), process_namespaces=True, namespaces={'C':None, 'xsi':None, 'http://www.w3.org/2001/XMLSchema-instance':None})\n\nRESULT = json.dumps(PARSED, indent=2)\n\nif RESULT != EXPECTED:\n    print('EXPECTED')\n    print(EXPECTED)\n    print\n    print('RESULT')\n    print(RESULT)\n\n    print\n    print('DIFF')\n    for line in difflib.unified_diff(RESULT.splitlines(1), EXPECTED.splitlines(1), fromfile=\"RESULT\", tofile=\"EXPECTED\"):\n        sys.stdout.write(line)\n    sys.exit(1)\n```\n. ``` python\n# filename: xml2dict_IS87.py \nimport xmltodict\nimport json\nimport difflib\nimport sys\n\nXMLSTRING=\"\"\"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<BroadsoftDocument protocol=\"OCI\" xmlns=\"C\">\n  <command xsi:type=\"UserOutgoingCallingPlanOriginatingModifyRequest\" xmlns=\"\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">;\n  </command>\n</BroadsoftDocument>\n\"\"\"\n\nEXPECTED=\"\"\"{\n  \"BroadsoftDocument\": {\n    \"@protocol\": \"OCI\", \n    \"command\": {\n      \"@type\": \"UserOutgoingCallingPlanOriginatingModifyRequest\"\n      }, \n      \"#text\": \";\"\n    }\n  }\n}\"\"\"\n\nPARSED = xmltodict.parse(XMLSTRING.strip(), process_namespaces=True, namespaces={'C':None, 'xsi':None, 'http://www.w3.org/2001/XMLSchema-instance':None})\n\nRESULT = json.dumps(PARSED, indent=2)\n\nif RESULT != EXPECTED:\n    print('EXPECTED')\n    print(EXPECTED)\n    print\n    print('RESULT')\n    print(RESULT)\n\n    print\n    print('DIFF')\n    for line in difflib.unified_diff(RESULT.splitlines(1), EXPECTED.splitlines(1), fromfile=\"RESULT\", tofile=\"EXPECTED\"):\n        sys.stdout.write(line)\n    sys.exit(1)\n```\n. ",
    "bzamecnik": "+1 for this problem.\n\nI've came across using the results of streaming `parse()` in a generator. In my case I'd like to feed it into `unparse()` and transform one XML to another in a streaming way.\n\nFeeding `unparse()` with lazy-generated input should be solved in pull request #92 (to issue #91). What remains is connecting `parse()` callback to an `unparse()` generator. I've tried to use a single-element coroutine-based queue ([asyncio.Queue](https://docs.python.org/3/library/asyncio-sync.html)) for this purpose. My code is not complete yet, but I have a working prototype of the queue usage on a simple producer-consumer problem. I hope to integrate it with xmltodict in a similar way to sirex@2c8002a, without the need to use threads.\n. So I delved deeper into asyncio, coroutines, generators with the goal to turn callbacks into generators and unfortunately without success. The problem is that on one end I need a generator (pulling data from the source) and on the other end I have a coroutine (pushing data from the source). I need to use asyncio event loop to start both the producer and consumer but it doesn't allow me to use a for loop for driving the computation. In order to synchronize both I tried to use a Queue but the problem is then that putting into the queue is a coroutine and it has to be wrapped into a task, which gets executed later in the loop, thus the computation is not lazy at all. What I'd like is that putting an item into the queue in the callback blocks and switches the execution to the consumer.\n\nAfter many tries I've created a thread on stackoverflow, so possibly someone more experienced might help us: http://stackoverflow.com/questions/29724273/transform-callbacks-to-generator-in-python\n. At least I tried to get the code with threads working. After a lot of fiddling with the producer-consumer pattern it works. The producer can be notified when the generator was closed and finish the thread. So it is possible to break from within the for loop and the producer thread finishes correctly. The trick to coordinate the consumer and producer is to use two singleton queues (one for requests and the other for responses).\n\nA generator can either finish correctly or be closed. Eg. when break occurs before the generator completes. In this case we can signal to the producer, that it should finish. The failing test case was a bit strange usage since since it neither completely iterated the generator not closed it. It would correspond to a situation when processing one item hangs. A possible behavior is to finish the producer thread after some time of consumer inactivity.\n\nThe new code seems to work ok. I'll try to clean it up a bit and commit it tomorrow.\n. So I commited the code I have. It seems to work in all Python envs defined in tox. https://github.com/bzamecnik/xmltodict/tree/%2388-streaming-parse-with-generator\n\nI'm afraid if we'd like to get rid of the thread and use asyncio it couldn't be used from 2.x Python versions.\n. @sirex The timeout is configurable, so you can increase it as a user if you expect processing items would take long. But anyway, the important point is that the proper usage of a generator is either to fully consume it or close it. If the user do not close the generator, it is wrong and the user cannot be surprised that some resource might get leaked. Your suggestion with automatically cleaning up the resource after usage seems to be a promising way. Since we're using some resource in the generator a proper pattern might be to wrap the whole generator usage into a with statement which would take care of resource allocation and closing (just an idea). I'm not a Python expert but I'd be worried that the destructor doesn't get called or gets called too late (compared to 'with') and also the 'with' statement clearly indicates that there's a kind of resource allocation inside. This way we could elimitate completely the hack with the timeout.\n\n``` python\nwith xmltodict.parse(data, item_depth=2) as gen:\n    for _, item in gen:\n        process_item(item)  # takes 2 seconds to process\n```\n\nBtw: it seems that the timeout doesn't work on pypy. https://travis-ci.org/martinblech/xmltodict/builds/59315990\n. Hi @kmonsoor, this approach seems interesting, I should try it as well. As for that debug message, it must have been from some old commit. Please have a look at the fixed code (in the #99 pull request from the [#88-streaming-parse-with-generator](https://github.com/bzamecnik/xmltodict/tree/%2388-streaming-parse-with-generator) branch). The usage would be like:\n\n``` python\n>>> with xmltodict.parse(file_path, item_depth=2) as gen:\n...     for path, item in gen:\n...         print(path, item) # do whatever...\n```\n. +1 for this problem.\n\nI've came across using the results of streaming `parse()` in a generator. In my case I'd like to feed it into `unparse()` and transform one XML to another in a streaming way.\n\nFeeding `unparse()` with lazy-generated input should be solved in pull request #92 (to issue #91). What remains is connecting `parse()` callback to an `unparse()` generator. I've tried to use a single-element coroutine-based queue ([asyncio.Queue](https://docs.python.org/3/library/asyncio-sync.html)) for this purpose. My code is not complete yet, but I have a working prototype of the queue usage on a simple producer-consumer problem. I hope to integrate it with xmltodict in a similar way to sirex@2c8002a, without the need to use threads.\n. So I delved deeper into asyncio, coroutines, generators with the goal to turn callbacks into generators and unfortunately without success. The problem is that on one end I need a generator (pulling data from the source) and on the other end I have a coroutine (pushing data from the source). I need to use asyncio event loop to start both the producer and consumer but it doesn't allow me to use a for loop for driving the computation. In order to synchronize both I tried to use a Queue but the problem is then that putting into the queue is a coroutine and it has to be wrapped into a task, which gets executed later in the loop, thus the computation is not lazy at all. What I'd like is that putting an item into the queue in the callback blocks and switches the execution to the consumer.\n\nAfter many tries I've created a thread on stackoverflow, so possibly someone more experienced might help us: http://stackoverflow.com/questions/29724273/transform-callbacks-to-generator-in-python\n. At least I tried to get the code with threads working. After a lot of fiddling with the producer-consumer pattern it works. The producer can be notified when the generator was closed and finish the thread. So it is possible to break from within the for loop and the producer thread finishes correctly. The trick to coordinate the consumer and producer is to use two singleton queues (one for requests and the other for responses).\n\nA generator can either finish correctly or be closed. Eg. when break occurs before the generator completes. In this case we can signal to the producer, that it should finish. The failing test case was a bit strange usage since since it neither completely iterated the generator not closed it. It would correspond to a situation when processing one item hangs. A possible behavior is to finish the producer thread after some time of consumer inactivity.\n\nThe new code seems to work ok. I'll try to clean it up a bit and commit it tomorrow.\n. So I commited the code I have. It seems to work in all Python envs defined in tox. https://github.com/bzamecnik/xmltodict/tree/%2388-streaming-parse-with-generator\n\nI'm afraid if we'd like to get rid of the thread and use asyncio it couldn't be used from 2.x Python versions.\n. @sirex The timeout is configurable, so you can increase it as a user if you expect processing items would take long. But anyway, the important point is that the proper usage of a generator is either to fully consume it or close it. If the user do not close the generator, it is wrong and the user cannot be surprised that some resource might get leaked. Your suggestion with automatically cleaning up the resource after usage seems to be a promising way. Since we're using some resource in the generator a proper pattern might be to wrap the whole generator usage into a with statement which would take care of resource allocation and closing (just an idea). I'm not a Python expert but I'd be worried that the destructor doesn't get called or gets called too late (compared to 'with') and also the 'with' statement clearly indicates that there's a kind of resource allocation inside. This way we could elimitate completely the hack with the timeout.\n\n``` python\nwith xmltodict.parse(data, item_depth=2) as gen:\n    for _, item in gen:\n        process_item(item)  # takes 2 seconds to process\n```\n\nBtw: it seems that the timeout doesn't work on pypy. https://travis-ci.org/martinblech/xmltodict/builds/59315990\n. Hi @kmonsoor, this approach seems interesting, I should try it as well. As for that debug message, it must have been from some old commit. Please have a look at the fixed code (in the #99 pull request from the [#88-streaming-parse-with-generator](https://github.com/bzamecnik/xmltodict/tree/%2388-streaming-parse-with-generator) branch). The usage would be like:\n\n``` python\n>>> with xmltodict.parse(file_path, item_depth=2) as gen:\n...     for path, item in gen:\n...         print(path, item) # do whatever...\n```\n. ",
    "sirex": "@bzamecnik since you started to work on a different approach I assume you saw some issues with my solution involving threads? What are the issues you see?\n\nTo the end user threads will not be visible, there should be no thread safety issues, because separate thread that handles SAX callbacks is completely isolated and is not exposed via api in any way.\n\nBy the way, first thing I tried, was actually asyncio, but unfortunately, I could not find a solution with it, without using threads. I could not find a way to turn a callback function to a generator that can be registered to the event loop. If you will succeed in doing this, I would be really interested in seeing that... :)\n. Did not tried, but I guess it would work if generator had a [destructor](https://docs.python.org/2/reference/datamodel.html#object.__del__), destructors are automatically called by garbage collector, so it could take care of threads.\n. @bzamecnik what would happen in this case:\n\n``` python\nfor _, item in xmltodict.parse(data, item_depth=2):\n    process_item(item)  # takes 2 seconds to process\n```\n\n?\n\nIf I understood correctly, generator will terminate? Maybe it is possible to clean threads by using destructor, if generator gets garbage collected it means, that it is completely safe to free thread, because there is no reference that points to generator.\n. Method names like `hasXMLattributes` violates [PEP-8](https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables).\n\nFor forced list, once I did something like that:\n\n``` python\n\nxmltodict.parse(data, schema={\n    'servers/server': list,\n    'servers/server[]/id': int,\n    'servers/server[]/cpus/cpu': list,\n    'servers/server[]/cpus/cpu[]/id': int,\n})\n\n```\n\nFor me it worked very well with very complex XML data.\n. @bzamecnik since you started to work on a different approach I assume you saw some issues with my solution involving threads? What are the issues you see?\n\nTo the end user threads will not be visible, there should be no thread safety issues, because separate thread that handles SAX callbacks is completely isolated and is not exposed via api in any way.\n\nBy the way, first thing I tried, was actually asyncio, but unfortunately, I could not find a solution with it, without using threads. I could not find a way to turn a callback function to a generator that can be registered to the event loop. If you will succeed in doing this, I would be really interested in seeing that... :)\n. Did not tried, but I guess it would work if generator had a [destructor](https://docs.python.org/2/reference/datamodel.html#object.__del__), destructors are automatically called by garbage collector, so it could take care of threads.\n. @bzamecnik what would happen in this case:\n\n``` python\nfor _, item in xmltodict.parse(data, item_depth=2):\n    process_item(item)  # takes 2 seconds to process\n```\n\n?\n\nIf I understood correctly, generator will terminate? Maybe it is possible to clean threads by using destructor, if generator gets garbage collected it means, that it is completely safe to free thread, because there is no reference that points to generator.\n. Method names like `hasXMLattributes` violates [PEP-8](https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables).\n\nFor forced list, once I did something like that:\n\n``` python\n\nxmltodict.parse(data, schema={\n    'servers/server': list,\n    'servers/server[]/id': int,\n    'servers/server[]/cpus/cpu': list,\n    'servers/server[]/cpus/cpu[]/id': int,\n})\n\n```\n\nFor me it worked very well with very complex XML data.\n. ",
    "jonlooney": "Pull request #104 has support for an interator/generator. It lets you do things like this:\n\n``` python\n>>> for (path, item) in xmltodict.parse(fileObj, item_depth=2, generator=True):\n...     print(\"%r, %r\" % (path, item))\n...     # Or, whatever other code you want.\n```\n\nIn all but Jython, it does this through incremental reads. On Jython, it _appears_ that the entire document is read first. (At least, the Travis CI engine shows it is failing my unit test that checks for this. It may be a problem with my unit test, or this may legitimately not work quite as expected on Jython.)\n. > Wow, impressive additions! I particularly like `Force Lists` feature, since now I'm always checking for the list/single item. \n\nThanks for the positive feedback!\n\n> After short glance over the code, I see that you're using Python 2, do you plan to add Python 3? I'm not sure about the \"protocol\" here, does this have to be done manually or by using `six`?\n\nUgh. Yes, I need to admit that I didn't even consider Python 3 support. I tested with Python 2.6/2.7, because that is what I use. I'll need to take a look at what needs to be done to make this Python 3-compliant. Hopefully, it is just simple things like the changed dict.items()/dict.iteritems() support.\n. > I'll need to take a look at what needs to be done to make this Python 3-compliant.\n\nDone. All the CI tests are now passing for Python 2, Python 3, and Jython.\n. I added support for an iterator/generator in streaming mode. This seems to fulfill the request from #88. I updated my original comment to explain the new feature.\n. > Method names like hasXMLattributes violates PEP-8.\n\nThanks for the feedback. I modified the method names to comply (I think) with the guidance in the PEP.\n. Pull request #104 has support for an interator/generator. It lets you do things like this:\n\n``` python\n>>> for (path, item) in xmltodict.parse(fileObj, item_depth=2, generator=True):\n...     print(\"%r, %r\" % (path, item))\n...     # Or, whatever other code you want.\n```\n\nIn all but Jython, it does this through incremental reads. On Jython, it _appears_ that the entire document is read first. (At least, the Travis CI engine shows it is failing my unit test that checks for this. It may be a problem with my unit test, or this may legitimately not work quite as expected on Jython.)\n. > Wow, impressive additions! I particularly like `Force Lists` feature, since now I'm always checking for the list/single item. \n\nThanks for the positive feedback!\n\n> After short glance over the code, I see that you're using Python 2, do you plan to add Python 3? I'm not sure about the \"protocol\" here, does this have to be done manually or by using `six`?\n\nUgh. Yes, I need to admit that I didn't even consider Python 3 support. I tested with Python 2.6/2.7, because that is what I use. I'll need to take a look at what needs to be done to make this Python 3-compliant. Hopefully, it is just simple things like the changed dict.items()/dict.iteritems() support.\n. > I'll need to take a look at what needs to be done to make this Python 3-compliant.\n\nDone. All the CI tests are now passing for Python 2, Python 3, and Jython.\n. I added support for an iterator/generator in streaming mode. This seems to fulfill the request from #88. I updated my original comment to explain the new feature.\n. > Method names like hasXMLattributes violates PEP-8.\n\nThanks for the feedback. I modified the method names to comply (I think) with the guidance in the PEP.\n. ",
    "mcrowson": "it looks like #104 had generator stuff and it hasn't been touched since May? If I pulled that out and made it a standalone PR would you accept it @martinblech ?. I ended up using the standard XML lib to yield dictionaries. Not in progress on my end. That original PR looked good though if you want to harvest its generator. \n\nSent from my iPhone\n\n> On Jun 21, 2017, at 9:05 AM, Harry Jubb <notifications@github.com> wrote:\n> \n> Any news on this?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n. it looks like #104 had generator stuff and it hasn't been touched since May? If I pulled that out and made it a standalone PR would you accept it @martinblech ?. I ended up using the standard XML lib to yield dictionaries. Not in progress on my end. That original PR looked good though if you want to harvest its generator. \n\nSent from my iPhone\n\n> On Jun 21, 2017, at 9:05 AM, Harry Jubb <notifications@github.com> wrote:\n> \n> Any news on this?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n. ",
    "harryjubb": "Any news on this?. Any news on this?. ",
    "iyn": "Just now I've read the source of xmltodict, and it seems that the author thought of this earlier and it's possible to use `defusedexpat`:\n\n```\nimport defusedexpat\nxmltodict.parse('<a>hello</a>', expat=defusedexpat.pyexpat)\n```\n\nSo, the question is, why not make defusedexpat a default version of expat?\n. @martinblech Yeah, I think that would be good solution. Although I have a problem compiling `defusedexpat` for Python 3.4 (it works after commenting out some parts of the code, but it's 'hacky' and not a proper way) - I contacted the author with the question if he plans to officially support Python 3.4. \n\nSo, I'm in favor for using `defusedexpat` as a default, but I'd wait for Python 3.4 support.\n. Sadly, I still didn't hear back from the `defusedexpat` author/maintainer. And it seems that he didn't enable issues on Bitbucket. \n\nI would suggest, that semi-solution could be just adding more visible info about `defusedexpat` in README and a note that it probably won't work on Python 3.4 for some time.\n. Wow, impressive additions! I particularly like `Force Lists` feature, since now I'm always checking for the list/single item. \n\nAfter short glance over the code, I see that you're using Python 2, do you plan to add Python 3? I'm not sure about the \"protocol\" here, does this have to be done manually or by using `six`?\n. Thank you for adding Python 3 support, I'll be using `Force Lists` feature in production after I'll update my project's dependencies next month.\n. I worked on pretty simple schema, and I used something like this:\n\n```\nif not isinstance(result, list): result = [result]\n```\n. Just now I've read the source of xmltodict, and it seems that the author thought of this earlier and it's possible to use `defusedexpat`:\n\n```\nimport defusedexpat\nxmltodict.parse('<a>hello</a>', expat=defusedexpat.pyexpat)\n```\n\nSo, the question is, why not make defusedexpat a default version of expat?\n. @martinblech Yeah, I think that would be good solution. Although I have a problem compiling `defusedexpat` for Python 3.4 (it works after commenting out some parts of the code, but it's 'hacky' and not a proper way) - I contacted the author with the question if he plans to officially support Python 3.4. \n\nSo, I'm in favor for using `defusedexpat` as a default, but I'd wait for Python 3.4 support.\n. Sadly, I still didn't hear back from the `defusedexpat` author/maintainer. And it seems that he didn't enable issues on Bitbucket. \n\nI would suggest, that semi-solution could be just adding more visible info about `defusedexpat` in README and a note that it probably won't work on Python 3.4 for some time.\n. Wow, impressive additions! I particularly like `Force Lists` feature, since now I'm always checking for the list/single item. \n\nAfter short glance over the code, I see that you're using Python 2, do you plan to add Python 3? I'm not sure about the \"protocol\" here, does this have to be done manually or by using `six`?\n. Thank you for adding Python 3 support, I'll be using `Force Lists` feature in production after I'll update my project's dependencies next month.\n. I worked on pretty simple schema, and I used something like this:\n\n```\nif not isinstance(result, list): result = [result]\n```\n. ",
    "anoother": "Oops, my fault - seems the OrderedDict itself is not in the expected order...\n. If anyone is wondering about this, it turns out OrderedDict does not preserve the order of elements specified as kwargs. You have to pass a sequence of pairs explicitly, eg.:\n\n```\nOrderedDict(((\n    'Address', {\n        '#text': 'http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous',\n        '@xmlns': 'http://schemas.xmlsoap.org/ws/2004/08/addressing',\n    }),  \n    ('ReferenceParameters', {      \n        'ResourceURI': {    \n            '#text': 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystem',\n            '@xmlns': 'http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd',\n        },\n        '@xmlns': 'http://schemas.xmlsoap.org/ws/2004/08/addressing',\n        'SelectorSet': {    \n            'Selector': {       \n                '#text': 'ManagedSystem',\n            },\n            '@xmlns': 'http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd',\n        },\n    },\n), ))\n```\n. Oops, my fault - seems the OrderedDict itself is not in the expected order...\n. If anyone is wondering about this, it turns out OrderedDict does not preserve the order of elements specified as kwargs. You have to pass a sequence of pairs explicitly, eg.:\n\n```\nOrderedDict(((\n    'Address', {\n        '#text': 'http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous',\n        '@xmlns': 'http://schemas.xmlsoap.org/ws/2004/08/addressing',\n    }),  \n    ('ReferenceParameters', {      \n        'ResourceURI': {    \n            '#text': 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystem',\n            '@xmlns': 'http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd',\n        },\n        '@xmlns': 'http://schemas.xmlsoap.org/ws/2004/08/addressing',\n        'SelectorSet': {    \n            'Selector': {       \n                '#text': 'ManagedSystem',\n            },\n            '@xmlns': 'http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd',\n        },\n    },\n), ))\n```\n. ",
    "guewen": "I was looking for the forced lists feature too, really a must-have :-)\n. I extracted the forced list feature here #120 \n. I was looking for the forced lists feature too, really a must-have :-)\n. I extracted the forced list feature here #120 \n. ",
    "rrajni": "Thanks kmonsoor. \n. Thanks kmonsoor. \n. ",
    "gwillden": "It looks like the expat parser is not passing the xmlns attributes of the root element on to the startElement handler when operating in namespace mode.\n\nOne workaround is to manually add the xmlns attributes to the dictionary based on the ones in namespaces dictionary.\n\nAnother would be to add the following code to the end of the above example.\n**Note that this is extremely inefficient because you have to parse the file twice. Once with namespace handling disabled and once with it enabled.**\n\n```\nfor key,value in nons['root'].items():\n    if key.startswith('@xmlns'):\n        ns['root'][key]=value\n\nprint(xmltodict.unparse(ns, pretty=True))\n```\n\nOutput\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root xmlns=\"http://defaultns.com/\" xmlns:a=\"http://a.com/\" xmlns:b=\"http://b.com/\">\n        <x>1</x>\n        <a:y>2</a:y>\n        <b:z>3</b:z>\n</root>\n```\n. It looks like the expat parser is not passing the xmlns attributes of the root element on to the startElement handler when operating in namespace mode.\n\nOne workaround is to manually add the xmlns attributes to the dictionary based on the ones in namespaces dictionary.\n\nAnother would be to add the following code to the end of the above example.\n**Note that this is extremely inefficient because you have to parse the file twice. Once with namespace handling disabled and once with it enabled.**\n\n```\nfor key,value in nons['root'].items():\n    if key.startswith('@xmlns'):\n        ns['root'][key]=value\n\nprint(xmltodict.unparse(ns, pretty=True))\n```\n\nOutput\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root xmlns=\"http://defaultns.com/\" xmlns:a=\"http://a.com/\" xmlns:b=\"http://b.com/\">\n        <x>1</x>\n        <a:y>2</a:y>\n        <b:z>3</b:z>\n</root>\n```\n. ",
    "asandvig": "Expat requires a separate handler for processing namespace declarations on elements. This is currently not implemented in `xmltodict`. A proposal to support this has been described in issue #110.\n. Yes, it's possible by implementing a comment handler for Expat (ref. [xmlparser.CommentHandler](https://docs.python.org/2/library/pyexpat.html#xml.parsers.expat.xmlparser.CommentHandler)).\n\nHowever, one also needs to figure out how to represent comments in the returned dictionary. Something like a special `#comment` key, maybe?\n. Some further research/testing shows that `xmlns:*`attributes are supported when `process_namespaces=False` (the default). However, when `process_namesapces=True`, the `xmlns:*` attributes are not included.\n\nThis behavior makes it a bit tricky when processing XSD files, as they may include references to declared namespaces inside attribute strings.\n\nExample:\n\n``` python\n>>> import xmltodict, json\n>>> xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n... <xs:schema version=\"1.0\" elementFormDefault=\"qualified\"\n...     targetNamespace=\"http://space.name/\"\n...     xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n... \n...     <xs:complexType name=\"PersonType\">\n...         <xs:element name=\"Name\" type=\"xs:string\" />\n...     </xs:complexType>\n... \n... </xs:schema>\n... \"\"\"\n>>> print json.dumps(xmltodict.parse(xml), indent=4)\n{\n    \"xs:schema\": {\n        \"@version\": \"1.0\", \n        \"@elementFormDefault\": \"qualified\", \n        \"@targetNamespace\": \"http://space.name/\", \n        \"@xmlns:xs\": \"http://www.w3.org/2001/XMLSchema\", \n        \"xs:complexType\": {\n            \"@name\": \"PersonType\", \n            \"xs:element\": {\n                \"@name\": \"Name\", \n                \"@type\": \"xs:string\"\n            }\n        }\n    }\n}\n>>> print json.dumps(xmltodict.parse(xml, process_namespaces=True), indent=4)\n{\n    \"http://www.w3.org/2001/XMLSchema:schema\": {\n        \"@version\": \"1.0\", \n        \"@elementFormDefault\": \"qualified\", \n        \"@targetNamespace\": \"http://space.name/\", \n        \"http://www.w3.org/2001/XMLSchema:complexType\": {\n            \"@name\": \"PersonType\", \n            \"http://www.w3.org/2001/XMLSchema:element\": {\n                \"@name\": \"Name\", \n                \"@type\": \"xs:string\"\n            }\n        }\n    }\n}\n```\n\nWith the second output (`process_namespaces=True`), it is impossible to found out which namespace `\"xs:string\"`refers to.\n. Expat requires a separate handler for processing namespace declarations on elements. This is currently not implemented in `xmltodict`. A proposal to support this has been described in issue #110.\n. Yes, it's possible by implementing a comment handler for Expat (ref. [xmlparser.CommentHandler](https://docs.python.org/2/library/pyexpat.html#xml.parsers.expat.xmlparser.CommentHandler)).\n\nHowever, one also needs to figure out how to represent comments in the returned dictionary. Something like a special `#comment` key, maybe?\n. Some further research/testing shows that `xmlns:*`attributes are supported when `process_namespaces=False` (the default). However, when `process_namesapces=True`, the `xmlns:*` attributes are not included.\n\nThis behavior makes it a bit tricky when processing XSD files, as they may include references to declared namespaces inside attribute strings.\n\nExample:\n\n``` python\n>>> import xmltodict, json\n>>> xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n... <xs:schema version=\"1.0\" elementFormDefault=\"qualified\"\n...     targetNamespace=\"http://space.name/\"\n...     xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n... \n...     <xs:complexType name=\"PersonType\">\n...         <xs:element name=\"Name\" type=\"xs:string\" />\n...     </xs:complexType>\n... \n... </xs:schema>\n... \"\"\"\n>>> print json.dumps(xmltodict.parse(xml), indent=4)\n{\n    \"xs:schema\": {\n        \"@version\": \"1.0\", \n        \"@elementFormDefault\": \"qualified\", \n        \"@targetNamespace\": \"http://space.name/\", \n        \"@xmlns:xs\": \"http://www.w3.org/2001/XMLSchema\", \n        \"xs:complexType\": {\n            \"@name\": \"PersonType\", \n            \"xs:element\": {\n                \"@name\": \"Name\", \n                \"@type\": \"xs:string\"\n            }\n        }\n    }\n}\n>>> print json.dumps(xmltodict.parse(xml, process_namespaces=True), indent=4)\n{\n    \"http://www.w3.org/2001/XMLSchema:schema\": {\n        \"@version\": \"1.0\", \n        \"@elementFormDefault\": \"qualified\", \n        \"@targetNamespace\": \"http://space.name/\", \n        \"http://www.w3.org/2001/XMLSchema:complexType\": {\n            \"@name\": \"PersonType\", \n            \"http://www.w3.org/2001/XMLSchema:element\": {\n                \"@name\": \"Name\", \n                \"@type\": \"xs:string\"\n            }\n        }\n    }\n}\n```\n\nWith the second output (`process_namespaces=True`), it is impossible to found out which namespace `\"xs:string\"`refers to.\n. ",
    "ngoonee": "I was just planning to raise this issue after hitting it in a new project I'm doing. My initial reaction to 2. was 'yes, exactly'.\n\nI've thought about it a bit more though, and realize that in nested situations this would be a real mess. So for example this:-\n\n``` xml\n<parent>\n    <sub>\n        <child>some text</child>\n        <child>other text</child>\n    </sub>\n</parent>\n```\n\nwould require this:-\n\n``` python\nchildren = parse_result['parent'][0]['sub'][0]['child']\n```\n\nThat being said, an optional argument to parse as suggested would be welcome as a convenience. Better yet if it only applies to leaves and not intermediates.\n. I suspect as with most open-source projects that unless we can show some code, this won't move anywhere.\n. There's been no response in months, though. I personally have just worked around it in my own code, uglily.\n. It covers it for me, though not hard to imagine situations where this would be a pain (as in my 22 Sep comment). However since this would not be default behaviour, callers would be expected to deal with that gracefully.\n\nI like candlerb's suggestion but that would both be more work and probably more brittle as well (hence harder to properly test).\n. I was just planning to raise this issue after hitting it in a new project I'm doing. My initial reaction to 2. was 'yes, exactly'.\n\nI've thought about it a bit more though, and realize that in nested situations this would be a real mess. So for example this:-\n\n``` xml\n<parent>\n    <sub>\n        <child>some text</child>\n        <child>other text</child>\n    </sub>\n</parent>\n```\n\nwould require this:-\n\n``` python\nchildren = parse_result['parent'][0]['sub'][0]['child']\n```\n\nThat being said, an optional argument to parse as suggested would be welcome as a convenience. Better yet if it only applies to leaves and not intermediates.\n. I suspect as with most open-source projects that unless we can show some code, this won't move anywhere.\n. There's been no response in months, though. I personally have just worked around it in my own code, uglily.\n. It covers it for me, though not hard to imagine situations where this would be a pain (as in my 22 Sep comment). However since this would not be default behaviour, callers would be expected to deal with that gracefully.\n\nI like candlerb's suggestion but that would both be more work and probably more brittle as well (hence harder to properly test).\n. ",
    "SeanHayes": "I'd be happy with the `children = parse_result['parent'][0]['sub'][0]['child']` behavior in all cases, it minimizes the number of code paths I need in my own applications. Otherwise I need an if condition for every node level.\n\nOtherwise I'm loving this library, thanks!\n. I'd be happy with the `children = parse_result['parent'][0]['sub'][0]['child']` behavior in all cases, it minimizes the number of code paths I need in my own applications. Otherwise I need an if condition for every node level.\n\nOtherwise I'm loving this library, thanks!\n. ",
    "Hellowlol": "Is xmltodict.parse('xmlstring', process_namespaces=False, attr_prefix='') what you looking for?\n. Is xmltodict.parse('xmlstring', process_namespaces=False, attr_prefix='') what you looking for?\n. ",
    "gamesbook": "I am not sure what you mean by \"provide a test case\" - I was asking a question on how to do something?\n. I am not sure what you mean by \"provide a test case\" - I was asking a question on how to do something?\n. ",
    "tanzaho": "Here is how I'm solving it at the moment : \n\n```\n    xmlText = \"<a>My random text with math<sup>34</sup> expressions.</a>\"\n    xmlText = xmlText.replace(\"<sup>\", \"&lt;sup&gt;\") # replaces sup by an escaped version\n    xmlText = xmlText.replace(\"</sup>\", \"&lt;/sup&gt;\") \n    xmltodict.parse(xmlText)\n```\n. Here is how I'm solving it at the moment : \n\n```\n    xmlText = \"<a>My random text with math<sup>34</sup> expressions.</a>\"\n    xmlText = xmlText.replace(\"<sup>\", \"&lt;sup&gt;\") # replaces sup by an escaped version\n    xmlText = xmlText.replace(\"</sup>\", \"&lt;/sup&gt;\") \n    xmltodict.parse(xmlText)\n```\n. ",
    "cryptid11": "import xmltodict\nimport codecs\nxml=codecs.open('test.xml','r','windows-1252').read()\nxml=xmltodict.parse(xml, process_namespaces=True,encoding='windows-1252')\nxml=xmltodict.unparse(xml, pretty=True, encoding='windows-1252')\nxml_new=codecs.open('cameraOA_exp_new.xml','w','windows-1252')\nxml_new.write(xml)\n\nexcuse me solved in this way.\n. import xmltodict\nimport codecs\nxml=codecs.open('test.xml','r','windows-1252').read()\nxml=xmltodict.parse(xml, process_namespaces=True,encoding='windows-1252')\nxml=xmltodict.unparse(xml, pretty=True, encoding='windows-1252')\nxml_new=codecs.open('cameraOA_exp_new.xml','w','windows-1252')\nxml_new.write(xml)\n\nexcuse me solved in this way.\n. ",
    "yiufung": "Use `pretty=True` in `unparse()`. \n\n``` python\n>>> mydict={\n...     'response': {\n...             'status': 'good'\n...     }\n... }\n>>> print xmltodict.unparse(mydict)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<response><status>good</status></response>\n>>> print xmltodict.unparse(mydict, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<response>\n    <status>good</status>\n</response>\n```\n. Use `pretty=True` in `unparse()`. \n\n``` python\n>>> mydict={\n...     'response': {\n...             'status': 'good'\n...     }\n... }\n>>> print xmltodict.unparse(mydict)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<response><status>good</status></response>\n>>> print xmltodict.unparse(mydict, pretty=True)\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<response>\n    <status>good</status>\n</response>\n```\n. ",
    "siv123456": "thank you  very much - looks great :) \n. thank you  very much - looks great :) \n. ",
    "bharel": "I took a simple xml file:\n\n```\n<?xml version=\"1.0\"?>\n<test>\nthe letter a 400,000,000 times\n</test>\n```\n\nxmltodict is the current one while xmltodict_2 is after the small patch.\n\n```\npython -m timeit -s \"from xmltodict import parse; xml = open('largexml.xml').read()\" \"res = parse(xml)\"\n10 loops, best of 3: 50.1 sec per loop\n\npython -m timeit -s \"from xmltodict_2 import parse; xml = open('largexml.xml').read()\" \"res = parse(xml)\"\n10 loops, best of 3: 2.27 sec per loop\n```\n\nIn the current status, xmltodict took ~1.7GB of memory topping at 1.9. After my patch it took around ~630MB top.\n![image](https://cloud.githubusercontent.com/assets/742359/11289994/e3b33ce4-8f3a-11e5-9c0c-fe2e65d804ce.png)\n\nThe difference becomes even bigger in more complicated and larger xmls.\n. @kmonsoor, I disagree with you due to the fact that data is initialized as a list a few times throughout the code and uses the \".append\" attribute.\nCommenting that data is a list on the definition of \"data = []\" is redundant I believe. The only place data returns to be a string is in a temporary variable inside an inner function.\nIs there a specific place you meant?\n\nOn Fri, Nov 20, 2015 at 3:27 PM kmonsoor notifications@github.com wrote:\n\n> @bharel https://github.com/bharel imo, plz consider adding some\n> relevant comments inline to make non-confusing.\n> Because many programmers would guess about using a *_String *_ here.\n> thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/martinblech/xmltodict/pull/121#issuecomment-158403103\n> .\n. I took a simple xml file:\n\n```\n<?xml version=\"1.0\"?>\n<test>\nthe letter a 400,000,000 times\n</test>\n```\n\nxmltodict is the current one while xmltodict_2 is after the small patch.\n\n```\npython -m timeit -s \"from xmltodict import parse; xml = open('largexml.xml').read()\" \"res = parse(xml)\"\n10 loops, best of 3: 50.1 sec per loop\n\npython -m timeit -s \"from xmltodict_2 import parse; xml = open('largexml.xml').read()\" \"res = parse(xml)\"\n10 loops, best of 3: 2.27 sec per loop\n```\n\nIn the current status, xmltodict took ~1.7GB of memory topping at 1.9. After my patch it took around ~630MB top.\n![image](https://cloud.githubusercontent.com/assets/742359/11289994/e3b33ce4-8f3a-11e5-9c0c-fe2e65d804ce.png)\n\nThe difference becomes even bigger in more complicated and larger xmls.\n. @kmonsoor, I disagree with you due to the fact that data is initialized as a list a few times throughout the code and uses the \".append\" attribute.\nCommenting that data is a list on the definition of \"data = []\" is redundant I believe. The only place data returns to be a string is in a temporary variable inside an inner function.\nIs there a specific place you meant?\n\nOn Fri, Nov 20, 2015 at 3:27 PM kmonsoor notifications@github.com wrote:\n\n> @bharel https://github.com/bharel imo, plz consider adding some\n> relevant comments inline to make non-confusing.\n> Because many programmers would guess about using a *_String *_ here.\n> thanks.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/martinblech/xmltodict/pull/121#issuecomment-158403103\n> .\n. ",
    "Fantomas42": "Sorry...\n. Sorry...\n. ",
    "scott-vsi": "Are you installing xmltodict with pip? If so, this feature isn't included in the latest release. \n\nYou can do `pip install git+https://github.com/martinblech/xmltodict.git@master` to install the latest version directly from the repo.\n. Are you installing xmltodict with pip? If so, this feature isn't included in the latest release. \n\nYou can do `pip install git+https://github.com/martinblech/xmltodict.git@master` to install the latest version directly from the repo.\n. ",
    "mattkohl": "That fixed it. Thanks!\n. That fixed it. Thanks!\n. ",
    "daisieh": "I would like to say that I found this to be a great package overall and very easy to use. Thanks for working on this!\n. I would like to say that I found this to be a great package overall and very easy to use. Thanks for working on this!\n. ",
    "andreif": "Well, it's seems that case is outside of `xmltodict`'s scope and I could simply make my own handler and create a data structure solving the problem in my case (WSDL). I doubt there is any benefit for `xmltodict` to handle it.\n. Some services do require certain order of children unfortunately.\n. Well, it's seems that case is outside of `xmltodict`'s scope and I could simply make my own handler and create a data structure solving the problem in my case (WSDL). I doubt there is any benefit for `xmltodict` to handle it.\n. Some services do require certain order of children unfortunately.\n. ",
    "berteh": "AFAIK the order of children has no meaning in \"pure\" XML. A semantically valid option may be, if that's acceptable to you, to add an attribute \"@position\" or \"@order\" to the elements you want to have in some sequence.\n\nThis information would then be available for querying/sorting/filtering/whatever, and since the elements would have difference sequence attributes they would not be considered as duplicates by the parser (and thus not \"merged\").\n. AFAIK the order of children has no meaning in \"pure\" XML. A semantically valid option may be, if that's acceptable to you, to add an attribute \"@position\" or \"@order\" to the elements you want to have in some sequence.\n\nThis information would then be available for querying/sorting/filtering/whatever, and since the elements would have difference sequence attributes they would not be considered as duplicates by the parser (and thus not \"merged\").\n. ",
    "lindsay-stevens": "@andreif: I needed the same feature and wrote a patch for that, the branch is on my fork here: https://github.com/lindsay-stevens/xmltodict/tree/ordered-children-short-tags\n\nIt's got a flag to deal with mixed child ordering on parse and unparse. During parse it'll add an @__order__ attribute, on unparse it'll remove the attribute and sort the mixed nodes. Also has a bonus XHTML-ish feature to enable output of short-form of empty tags, e.g. \"<tag/>\" vs. \"<tag></tag>\"\n\nNot opened a PR for it yet since my previous one is still open and I didn't want to be annoying.\n. Yes, there's some tests included in the PR demonstrating equal documents on\na parse/unparse round trip.\n\nOn 13 Jun. 2017 5:51 am, \"Christian Gutierrez\" <notifications@github.com>\nwrote:\n\n> @lindsay-stevens <https://github.com/lindsay-stevens> Does this preserve\n> order on unparse?.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/martinblech/xmltodict/pull/142#issuecomment-307899323>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AGDSNW6O6oGdxXnl7CLpE0Bq0bhdoWMhks5sDZVsgaJpZM4Kgx9r>\n> .\n>\n. @andreif: I needed the same feature and wrote a patch for that, the branch is on my fork here: https://github.com/lindsay-stevens/xmltodict/tree/ordered-children-short-tags\n\nIt's got a flag to deal with mixed child ordering on parse and unparse. During parse it'll add an @__order__ attribute, on unparse it'll remove the attribute and sort the mixed nodes. Also has a bonus XHTML-ish feature to enable output of short-form of empty tags, e.g. \"<tag/>\" vs. \"<tag></tag>\"\n\nNot opened a PR for it yet since my previous one is still open and I didn't want to be annoying.\n. Yes, there's some tests included in the PR demonstrating equal documents on\na parse/unparse round trip.\n\nOn 13 Jun. 2017 5:51 am, \"Christian Gutierrez\" <notifications@github.com>\nwrote:\n\n> @lindsay-stevens <https://github.com/lindsay-stevens> Does this preserve\n> order on unparse?.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/martinblech/xmltodict/pull/142#issuecomment-307899323>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AGDSNW6O6oGdxXnl7CLpE0Bq0bhdoWMhks5sDZVsgaJpZM4Kgx9r>\n> .\n>\n. ",
    "chriskessel": "Excellent, thanks!\n. Excellent, thanks!\n. ",
    "john30": "without the change, the first item emitted does not carry any of it's attributes.\n. no need to include my changes?\nor did I use xmltodict in the wrong way??\n. without the change, the first item emitted does not carry any of it's attributes.\n. no need to include my changes?\nor did I use xmltodict in the wrong way??\n. ",
    "maikhoepfel": "~~~I agree, it would be nice to see this implemented. I also found a similar need: I'd like to force every value of the dictionary to be a list.~~~ Just saw #120. Ignore me, sorry for the noise.\n. ~~~I agree, it would be nice to see this implemented. I also found a similar need: I'd like to force every value of the dictionary to be a list.~~~ Just saw #120. Ignore me, sorry for the noise.\n. ",
    "variable": "I am sorry but that doesn't seem to be implemented, see:\n\n`b = xmltodict.parse('<root><item attr=\"abc\"></item><item visible=\"true\">BBB</item><item>abc</item></root>', dict_constructor=dict, force_list={'item':'item'})`\n\n`{u'root': {u'item': [{u'@attr': u'abc'}, {'#text': u'BBB', u'@visible': u'true'}, u'abc']}}`\n\nWhat I want is to make it\n`{u'root': {u'item': [{u'@attr': u'abc'}, {'#text': u'BBB', u'@visible': u'true'}, {'#text': u'abc'}]}}`\n. Nevermind, it's actually implemented by using `force_cdata=True`\n. I am sorry but that doesn't seem to be implemented, see:\n\n`b = xmltodict.parse('<root><item attr=\"abc\"></item><item visible=\"true\">BBB</item><item>abc</item></root>', dict_constructor=dict, force_list={'item':'item'})`\n\n`{u'root': {u'item': [{u'@attr': u'abc'}, {'#text': u'BBB', u'@visible': u'true'}, u'abc']}}`\n\nWhat I want is to make it\n`{u'root': {u'item': [{u'@attr': u'abc'}, {'#text': u'BBB', u'@visible': u'true'}, {'#text': u'abc'}]}}`\n. Nevermind, it's actually implemented by using `force_cdata=True`\n. ",
    "fiebiga": "I was as well, parsing was completely broken! Happy to help :)\n. I was as well, parsing was completely broken! Happy to help :)\n. ",
    "imiric": "OK, I fixed the broken Jython build. It was due to inconsistencies in the namespace prefix values passed to the `StartNamespaceDeclHandler` in the different Expat implementations, so I settled on defining a blank namespace prefix as `''` instead of `None` for all versions.\n\nI also added namespace handling to `unparse()`/`_emit()`, and a test for that too.\n\nI'm not proud of this code, but let me know if it matches your expectations.\n\nCheers,\n\nIvan\n. OK, I fixed the broken Jython build. It was due to inconsistencies in the namespace prefix values passed to the `StartNamespaceDeclHandler` in the different Expat implementations, so I settled on defining a blank namespace prefix as `''` instead of `None` for all versions.\n\nI also added namespace handling to `unparse()`/`_emit()`, and a test for that too.\n\nI'm not proud of this code, but let me know if it matches your expectations.\n\nCheers,\n\nIvan\n. ",
    "james1888": "@dimasmjunior any way to get to work in Python 2.7.x? I really need it. @dimasmjunior any way to get to work in Python 2.7.x? I really need it. ",
    "MortalCatalyst": "I was more hoping that there was advice on a helper method or similar to identify the structure as xmltodict saw it. As descending down the list of orderedicts can be difficult to see.\n\nAs printing the first result of the second tree in my xml like this.\n\n``` python\nimport pprint\nimport xmltodict\nimport json\n\nwith open('/home/sayth/data/20160702RHIL0.xml') as fd:\n    doc = xmltodict.parse(fd.read())\n    main = doc['meeting']['race'][0]\n    pp = pprint.PrettyPrinter(indent=2)\n    pp.pprint(main)\n```\n\n``` bash\n[sayth:~/Projects/pyquery] $ python3 race.py \nOrderedDict([ ('@id', '216874'),\n              ('@number', '1'),\n              ('@nomnumber', '8'),\n              ('@division', '0'),\n              ('@name', 'TAB.COM.AU HANDICAP'),\n              ('@mediumname', '2Y-HCP'),\n              ('@shortname', '2Y-HCP'),\n              ('@stage', 'Acceptances'),\n              ('@distance', '1400'),\n              ('@minweight', '54'),\n              ('@raisedweight', '0'),\n              ('@class', '~         '),\n              ('@age', '2         '),\n              ('@grade', '0'),\n              ('@weightcondition', 'HCP       '),\n              ('@trophy', '0'),\n              ('@owner', '0'),\n              ('@trainer', '0'),\n              ('@jockey', '0'),\n              ('@strapper', '0'),\n              ('@totalprize', '85000'),\n              ('@first', '48750'),\n              ('@second', '16750'),\n              ('@third', '8350'),\n              ('@fourth', '4150'),\n              ('@fifth', '2000'),\n              ('@time', '2016-07-02T11:25:00'),\n              ('@bonustype', 'BOB7      '),\n              ('@nomsfee', '0'),\n              ('@acceptfee', '0'),\n              ('@trackcondition', '          '),\n              ('@timingmethod', '          '),\n              ('@fastesttime', '          '),\n              ('@sectionaltime', '          '),\n              ('@formavailable', '0'),\n              ( '@racebookprize',\n                'Of $85000. First $48750, second $16750, third $8350, fourth '\n                '$4150, fifth $2000, sixth $1000, seventh $1000, eighth $1000, '\n                'ninth $1000, tenth $1000'),\n              ( 'condition',\n                [ OrderedDict([ ('@line', '1'),\n                                ( '#text',\n                                  'Of $85000. First $48750, second $16750, '\n                                  'third $8350, fourth $4150, fifth $2000, '\n                                  'sixth $1000, seventh $1000, eighth $1000, '\n                                  'ninth $1000, tenth $1000')]),\n                  OrderedDict([ ('@line', '2'),\n                                ( '#text',\n                                  'Starter Subsidy: $200 for non-prize earning '\n                                  'runners.')]),\n                  OrderedDict([ ('@line', '3'),\n                                ( '#text',\n                                  'No class restriction, Handicap, For '\n                                  'Two-Years-Old, No sex restriction')]),\n                  OrderedDict([ ('@line', '4'),\n                                ('#text', 'BOBS Bonus available: $20,000')]),\n                  OrderedDict([ ('@line', '5'),\n                                ( '#text',\n                                  'Apprentices can claim. Field Limit: 12 + 4 '\n                                  'EM')])]),\n              ( 'nomination',\n                [ OrderedDict([ ('@number', '1'),\n                                ('@saddlecloth', '1'),\n                                ('@horse', 'Foxplay'),\n                                ('@id', '201409'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '1'),\n                                ('@trainernumber', '681'),\n                                ('@trainersurname', 'Waller'),\n                                ('@trainerfirstname', 'Chris'),\n                                ('@trainertrack', 'Rosehill'),\n                                ('@rsbtrainername', 'Chris Waller'),\n                                ('@jockeynumber', '40133'),\n                                ('@jockeysurname', 'Shinn'),\n                                ('@jockeyfirstname', 'Blake'),\n                                ('@barrier', '7'),\n                                ('@weight', '58'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'GREY-BAY F 2 Foxwedge x Butters(USA) (El '\n                                  'Prado(IRE))'),\n                                ('@colours', 'Purple, White Stars And Cap'),\n                                ( '@owners',\n                                  'Mrs C M Cook,  Mrs J L Van Buynder,  Mrs T '\n                                  'A Schwanke,  Mrs M K Mc Leish,  Mrs R A '\n                                  'Glasgow,  Mrs M Wood,  Mrs H A Aurisch,  '\n                                  'Mrs T G Johnston,  Ms R E Crane &  Ms K M '\n                                  'Wood, Boeara Holdings (Mgr:  Mrs D A '\n                                  'Dunphy  '),\n                                ('@dob', '2013-08-14T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'F'),\n                                ('@career', '4-1-1-0 $81560.00'),\n                                ('@thistrack', '2-1-0-0 $71750.00'),\n                                ('@thisdistance', '1-1-0-0 $68750.00'),\n                                ('@goodtrack', '1-0-0-0 $1885.00'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '2-0-1-0 $10925.00'),\n                                ('@secondup', '2-1-0-0 $70635.00'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '58'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n                  OrderedDict([ ('@number', '2'),\n                                ('@saddlecloth', '2'),\n                                ('@horse', 'Cogliere'),\n                                ('@id', '198218'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '1'),\n                                ('@trainernumber', '756'),\n                                ('@trainersurname', 'Quinn'),\n                                ('@trainerfirstname', 'Marc'),\n                                ('@trainertrack', 'Port Macquarie'),\n                                ('@rsbtrainername', 'Marc Quinn'),\n                                ('@jockeynumber', '87073'),\n                                ('@jockeysurname', 'Adkins'),\n                                ('@jockeyfirstname', 'Andrew'),\n                                ('@barrier', '4'),\n                                ('@weight', '57'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'BR C 2 Pluck(USA) x Final Star (Delago '\n                                  'Brom)'),\n                                ( '@colours',\n                                  'Black And Yellow Diamonds, Black Sleeves, '\n                                  'Halved Cap'),\n                                ( '@owners',\n                                  'M P Quinn, J D Scott, A D Bowler, A Hutton, '\n                                  'L J Radford, Mrs M E Radford, B N '\n                                  'Johnstone, W C Lynch, Mrs S M Anderson, G M '\n                                  'Anderson & Mrs K L Rowlatt, Live A Little '\n                                  'Racing (Mgr: M D Sawyer) '),\n                                ('@dob', '2013-09-12T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'C'),\n                                ('@career', '7-2-1-0 $52430.00'),\n                                ('@thistrack', '1-0-1-0 $16750.00'),\n                                ('@thisdistance', '2-0-1-0 $18750.00'),\n                                ('@goodtrack', '4-1-0-0 $17630.00'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '3-1-0-0 $15630.00'),\n                                ('@secondup', '2-1-0-0 $10050.00'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '57'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n                  OrderedDict([ ('@number', '3'),\n                                ('@saddlecloth', '3'),\n                                ('@horse', 'High Mist'),\n                                ('@id', '202822'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '1'),\n                                ('@trainernumber', '681'),\n                                ('@trainersurname', 'Waller'),\n                                ('@trainerfirstname', 'Chris'),\n                                ('@trainertrack', 'Rosehill'),\n                                ('@rsbtrainername', 'Chris Waller'),\n                                ('@jockeynumber', '87157'),\n                                ('@jockeysurname', 'Hutchings'),\n                                ('@jockeyfirstname', 'Rory'),\n                                ('@barrier', '6'),\n                                ('@weight', '57'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'B C 2 High Chaparral(IRE) x Miss Mushu '\n                                  '(Encosta de Lago)'),\n                                ('@colours', 'Cerise'),\n                                ( '@owners',\n                                  'Ingham Racing Syndicate (Mgrs: Ms L J '\n                                  'Ingham, J A Ingham, R C Ingham & Mrs D N '\n                                  'Kepitis)'),\n                                ('@dob', '2013-09-03T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'C'),\n                                ('@career', '2-1-0-0 $17700.00'),\n                                ('@thistrack', '0-0-0-0'),\n                                ('@thisdistance', '0-0-0-0'),\n                                ('@goodtrack', '1-0-0-0 $450.00'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '2-1-0-0 $17700.00'),\n                                ('@secondup', '0-0-0-0'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '57'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n                  OrderedDict([ ('@number', '4'),\n                                ('@saddlecloth', '4'),\n                                ('@horse', 'Octavian Augustus'),\n                                ('@id', '205266'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '0'),\n                                ('@trainernumber', '681'),\n                                ('@trainersurname', 'Waller'),\n                                ('@trainerfirstname', 'Chris'),\n                                ('@trainertrack', 'Rosehill'),\n                                ('@rsbtrainername', 'Chris Waller'),\n                                ('@jockeynumber', '46930'),\n                                ('@jockeysurname', 'Angland'),\n                                ('@jockeyfirstname', 'Tye'),\n                                ('@barrier', '8'),\n                                ('@weight', '57'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'CH C 2 Husson(ARG) x Sun Classique (Fuji '\n                                  'Kiseki(JPN))'),\n                                ('@colours', 'Royal Blue, Red Vee'),\n                                ( '@owners',\n                                  'C E Holt, R L Smith,Whitby Bloodstock Pty '\n                                  'Ltd(Mgr: M J Whitby), Mystery Downs(Mgr: F '\n                                  'W Cook), Werrett Bloodstock Pty Ltd (Mgr: N '\n                                  'R J Werrett), D M Fallon & Mrs C M Smith '),\n                                ('@dob', '2013-10-22T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'C'),\n                                ('@career', '1-1-0-0 $17250.00'),\n                                ('@thistrack', '0-0-0-0'),\n                                ('@thisdistance', '0-0-0-0'),\n                                ('@goodtrack', '0-0-0-0'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '1-1-0-0 $17250.00'),\n                                ('@secondup', '0-0-0-0'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '57'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n                  OrderedDict([ ('@number', '5'),\n                                ('@saddlecloth', '5'),\n                                ('@horse', 'Awoke (NZ)'),\n                                ('@id', '202065'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '0'),\n                                ('@trainernumber', '681'),\n                                ('@trainersurname', 'Waller'),\n                                ('@trainerfirstname', 'Chris'),\n                                ('@trainertrack', 'Rosehill'),\n                                ('@rsbtrainername', 'Chris Waller'),\n                                ('@jockeynumber', '84015'),\n                                ('@jockeysurname', 'Avdulla'),\n                                ('@jockeyfirstname', 'Brenton'),\n                                ('@barrier', '2'),\n                                ('@weight', '55'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'B F 2 Rip Van Winkle(IRE) x Viviane(NZ) '\n                                  '(Volksraad(GB))'),\n                                ('@colours', 'Brown, White Epaulettes'),\n                                ( '@owners',\n                                  'Henderson Racing & Breeding (Mgr: D A '\n                                  'Henderson) & Cook Bloodstock Pty Ltd (Mgr: '\n                                  'W R Cook)'),\n                                ('@dob', '2013-09-16T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'F'),\n                                ('@career', '1-1-0-0 $12250.00'),\n                                ('@thistrack', '0-0-0-0'),\n                                ('@thisdistance', '0-0-0-0'),\n                                ('@goodtrack', '0-0-0-0'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '1-1-0-0 $12250.00'),\n                                ('@secondup', '0-0-0-0'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '55'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', '')]),\n                  OrderedDict([ ('@number', '6'),\n                                ('@saddlecloth', '6'),\n                                ('@horse', 'Moohariba'),\n                                ('@id', '202348'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '0'),\n                                ('@trainernumber', '77974'),\n                                ('@trainersurname', 'Hawkes'),\n                                ('@trainerfirstname', 'Michael'),\n                                ('@trainertrack', 'Rosehill'),\n                                ( '@rsbtrainername',\n                                  'Michael, Wayne & John Hawkes'),\n                                ('@jockeynumber', '2687'),\n                                ('@jockeysurname', 'Reith'),\n                                ('@jockeyfirstname', 'Christian'),\n                                ('@barrier', '1'),\n                                ('@weight', '54'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'BR F 2 Al Maher x Mahmooda (Fusaichi '\n                                  'Pegasus(USA))'),\n                                ('@colours', 'Yellow, Dark Blue Vee And Cap'),\n                                ( '@owners',\n                                  'Sheikh Mohammed Bin Khalifa Al Maktoum'),\n                                ('@dob', '2013-09-09T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'F'),\n                                ('@career', '1-0-0-1 $8350.00'),\n                                ('@thistrack', '1-0-0-1 $8350.00'),\n                                ('@thisdistance', '1-0-0-1 $8350.00'),\n                                ('@goodtrack', '0-0-0-0'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '1-0-0-1 $8350.00'),\n                                ('@secondup', '0-0-0-0'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '54'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n```\n. I was more hoping that there was advice on a helper method or similar to identify the structure as xmltodict saw it. As descending down the list of orderedicts can be difficult to see.\n\nAs printing the first result of the second tree in my xml like this.\n\n``` python\nimport pprint\nimport xmltodict\nimport json\n\nwith open('/home/sayth/data/20160702RHIL0.xml') as fd:\n    doc = xmltodict.parse(fd.read())\n    main = doc['meeting']['race'][0]\n    pp = pprint.PrettyPrinter(indent=2)\n    pp.pprint(main)\n```\n\n``` bash\n[sayth:~/Projects/pyquery] $ python3 race.py \nOrderedDict([ ('@id', '216874'),\n              ('@number', '1'),\n              ('@nomnumber', '8'),\n              ('@division', '0'),\n              ('@name', 'TAB.COM.AU HANDICAP'),\n              ('@mediumname', '2Y-HCP'),\n              ('@shortname', '2Y-HCP'),\n              ('@stage', 'Acceptances'),\n              ('@distance', '1400'),\n              ('@minweight', '54'),\n              ('@raisedweight', '0'),\n              ('@class', '~         '),\n              ('@age', '2         '),\n              ('@grade', '0'),\n              ('@weightcondition', 'HCP       '),\n              ('@trophy', '0'),\n              ('@owner', '0'),\n              ('@trainer', '0'),\n              ('@jockey', '0'),\n              ('@strapper', '0'),\n              ('@totalprize', '85000'),\n              ('@first', '48750'),\n              ('@second', '16750'),\n              ('@third', '8350'),\n              ('@fourth', '4150'),\n              ('@fifth', '2000'),\n              ('@time', '2016-07-02T11:25:00'),\n              ('@bonustype', 'BOB7      '),\n              ('@nomsfee', '0'),\n              ('@acceptfee', '0'),\n              ('@trackcondition', '          '),\n              ('@timingmethod', '          '),\n              ('@fastesttime', '          '),\n              ('@sectionaltime', '          '),\n              ('@formavailable', '0'),\n              ( '@racebookprize',\n                'Of $85000. First $48750, second $16750, third $8350, fourth '\n                '$4150, fifth $2000, sixth $1000, seventh $1000, eighth $1000, '\n                'ninth $1000, tenth $1000'),\n              ( 'condition',\n                [ OrderedDict([ ('@line', '1'),\n                                ( '#text',\n                                  'Of $85000. First $48750, second $16750, '\n                                  'third $8350, fourth $4150, fifth $2000, '\n                                  'sixth $1000, seventh $1000, eighth $1000, '\n                                  'ninth $1000, tenth $1000')]),\n                  OrderedDict([ ('@line', '2'),\n                                ( '#text',\n                                  'Starter Subsidy: $200 for non-prize earning '\n                                  'runners.')]),\n                  OrderedDict([ ('@line', '3'),\n                                ( '#text',\n                                  'No class restriction, Handicap, For '\n                                  'Two-Years-Old, No sex restriction')]),\n                  OrderedDict([ ('@line', '4'),\n                                ('#text', 'BOBS Bonus available: $20,000')]),\n                  OrderedDict([ ('@line', '5'),\n                                ( '#text',\n                                  'Apprentices can claim. Field Limit: 12 + 4 '\n                                  'EM')])]),\n              ( 'nomination',\n                [ OrderedDict([ ('@number', '1'),\n                                ('@saddlecloth', '1'),\n                                ('@horse', 'Foxplay'),\n                                ('@id', '201409'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '1'),\n                                ('@trainernumber', '681'),\n                                ('@trainersurname', 'Waller'),\n                                ('@trainerfirstname', 'Chris'),\n                                ('@trainertrack', 'Rosehill'),\n                                ('@rsbtrainername', 'Chris Waller'),\n                                ('@jockeynumber', '40133'),\n                                ('@jockeysurname', 'Shinn'),\n                                ('@jockeyfirstname', 'Blake'),\n                                ('@barrier', '7'),\n                                ('@weight', '58'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'GREY-BAY F 2 Foxwedge x Butters(USA) (El '\n                                  'Prado(IRE))'),\n                                ('@colours', 'Purple, White Stars And Cap'),\n                                ( '@owners',\n                                  'Mrs C M Cook,  Mrs J L Van Buynder,  Mrs T '\n                                  'A Schwanke,  Mrs M K Mc Leish,  Mrs R A '\n                                  'Glasgow,  Mrs M Wood,  Mrs H A Aurisch,  '\n                                  'Mrs T G Johnston,  Ms R E Crane &  Ms K M '\n                                  'Wood, Boeara Holdings (Mgr:  Mrs D A '\n                                  'Dunphy  '),\n                                ('@dob', '2013-08-14T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'F'),\n                                ('@career', '4-1-1-0 $81560.00'),\n                                ('@thistrack', '2-1-0-0 $71750.00'),\n                                ('@thisdistance', '1-1-0-0 $68750.00'),\n                                ('@goodtrack', '1-0-0-0 $1885.00'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '2-0-1-0 $10925.00'),\n                                ('@secondup', '2-1-0-0 $70635.00'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '58'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n                  OrderedDict([ ('@number', '2'),\n                                ('@saddlecloth', '2'),\n                                ('@horse', 'Cogliere'),\n                                ('@id', '198218'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '1'),\n                                ('@trainernumber', '756'),\n                                ('@trainersurname', 'Quinn'),\n                                ('@trainerfirstname', 'Marc'),\n                                ('@trainertrack', 'Port Macquarie'),\n                                ('@rsbtrainername', 'Marc Quinn'),\n                                ('@jockeynumber', '87073'),\n                                ('@jockeysurname', 'Adkins'),\n                                ('@jockeyfirstname', 'Andrew'),\n                                ('@barrier', '4'),\n                                ('@weight', '57'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'BR C 2 Pluck(USA) x Final Star (Delago '\n                                  'Brom)'),\n                                ( '@colours',\n                                  'Black And Yellow Diamonds, Black Sleeves, '\n                                  'Halved Cap'),\n                                ( '@owners',\n                                  'M P Quinn, J D Scott, A D Bowler, A Hutton, '\n                                  'L J Radford, Mrs M E Radford, B N '\n                                  'Johnstone, W C Lynch, Mrs S M Anderson, G M '\n                                  'Anderson & Mrs K L Rowlatt, Live A Little '\n                                  'Racing (Mgr: M D Sawyer) '),\n                                ('@dob', '2013-09-12T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'C'),\n                                ('@career', '7-2-1-0 $52430.00'),\n                                ('@thistrack', '1-0-1-0 $16750.00'),\n                                ('@thisdistance', '2-0-1-0 $18750.00'),\n                                ('@goodtrack', '4-1-0-0 $17630.00'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '3-1-0-0 $15630.00'),\n                                ('@secondup', '2-1-0-0 $10050.00'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '57'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n                  OrderedDict([ ('@number', '3'),\n                                ('@saddlecloth', '3'),\n                                ('@horse', 'High Mist'),\n                                ('@id', '202822'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '1'),\n                                ('@trainernumber', '681'),\n                                ('@trainersurname', 'Waller'),\n                                ('@trainerfirstname', 'Chris'),\n                                ('@trainertrack', 'Rosehill'),\n                                ('@rsbtrainername', 'Chris Waller'),\n                                ('@jockeynumber', '87157'),\n                                ('@jockeysurname', 'Hutchings'),\n                                ('@jockeyfirstname', 'Rory'),\n                                ('@barrier', '6'),\n                                ('@weight', '57'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'B C 2 High Chaparral(IRE) x Miss Mushu '\n                                  '(Encosta de Lago)'),\n                                ('@colours', 'Cerise'),\n                                ( '@owners',\n                                  'Ingham Racing Syndicate (Mgrs: Ms L J '\n                                  'Ingham, J A Ingham, R C Ingham & Mrs D N '\n                                  'Kepitis)'),\n                                ('@dob', '2013-09-03T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'C'),\n                                ('@career', '2-1-0-0 $17700.00'),\n                                ('@thistrack', '0-0-0-0'),\n                                ('@thisdistance', '0-0-0-0'),\n                                ('@goodtrack', '1-0-0-0 $450.00'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '2-1-0-0 $17700.00'),\n                                ('@secondup', '0-0-0-0'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '57'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n                  OrderedDict([ ('@number', '4'),\n                                ('@saddlecloth', '4'),\n                                ('@horse', 'Octavian Augustus'),\n                                ('@id', '205266'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '0'),\n                                ('@trainernumber', '681'),\n                                ('@trainersurname', 'Waller'),\n                                ('@trainerfirstname', 'Chris'),\n                                ('@trainertrack', 'Rosehill'),\n                                ('@rsbtrainername', 'Chris Waller'),\n                                ('@jockeynumber', '46930'),\n                                ('@jockeysurname', 'Angland'),\n                                ('@jockeyfirstname', 'Tye'),\n                                ('@barrier', '8'),\n                                ('@weight', '57'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'CH C 2 Husson(ARG) x Sun Classique (Fuji '\n                                  'Kiseki(JPN))'),\n                                ('@colours', 'Royal Blue, Red Vee'),\n                                ( '@owners',\n                                  'C E Holt, R L Smith,Whitby Bloodstock Pty '\n                                  'Ltd(Mgr: M J Whitby), Mystery Downs(Mgr: F '\n                                  'W Cook), Werrett Bloodstock Pty Ltd (Mgr: N '\n                                  'R J Werrett), D M Fallon & Mrs C M Smith '),\n                                ('@dob', '2013-10-22T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'C'),\n                                ('@career', '1-1-0-0 $17250.00'),\n                                ('@thistrack', '0-0-0-0'),\n                                ('@thisdistance', '0-0-0-0'),\n                                ('@goodtrack', '0-0-0-0'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '1-1-0-0 $17250.00'),\n                                ('@secondup', '0-0-0-0'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '57'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n                  OrderedDict([ ('@number', '5'),\n                                ('@saddlecloth', '5'),\n                                ('@horse', 'Awoke (NZ)'),\n                                ('@id', '202065'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '0'),\n                                ('@trainernumber', '681'),\n                                ('@trainersurname', 'Waller'),\n                                ('@trainerfirstname', 'Chris'),\n                                ('@trainertrack', 'Rosehill'),\n                                ('@rsbtrainername', 'Chris Waller'),\n                                ('@jockeynumber', '84015'),\n                                ('@jockeysurname', 'Avdulla'),\n                                ('@jockeyfirstname', 'Brenton'),\n                                ('@barrier', '2'),\n                                ('@weight', '55'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'B F 2 Rip Van Winkle(IRE) x Viviane(NZ) '\n                                  '(Volksraad(GB))'),\n                                ('@colours', 'Brown, White Epaulettes'),\n                                ( '@owners',\n                                  'Henderson Racing & Breeding (Mgr: D A '\n                                  'Henderson) & Cook Bloodstock Pty Ltd (Mgr: '\n                                  'W R Cook)'),\n                                ('@dob', '2013-09-16T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'F'),\n                                ('@career', '1-1-0-0 $12250.00'),\n                                ('@thistrack', '0-0-0-0'),\n                                ('@thisdistance', '0-0-0-0'),\n                                ('@goodtrack', '0-0-0-0'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '1-1-0-0 $12250.00'),\n                                ('@secondup', '0-0-0-0'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '55'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', '')]),\n                  OrderedDict([ ('@number', '6'),\n                                ('@saddlecloth', '6'),\n                                ('@horse', 'Moohariba'),\n                                ('@id', '202348'),\n                                ('@idnumber', ''),\n                                ('@regnumber', ''),\n                                ('@blinkers', '0'),\n                                ('@trainernumber', '77974'),\n                                ('@trainersurname', 'Hawkes'),\n                                ('@trainerfirstname', 'Michael'),\n                                ('@trainertrack', 'Rosehill'),\n                                ( '@rsbtrainername',\n                                  'Michael, Wayne & John Hawkes'),\n                                ('@jockeynumber', '2687'),\n                                ('@jockeysurname', 'Reith'),\n                                ('@jockeyfirstname', 'Christian'),\n                                ('@barrier', '1'),\n                                ('@weight', '54'),\n                                ('@rating', '0'),\n                                ( '@description',\n                                  'BR F 2 Al Maher x Mahmooda (Fusaichi '\n                                  'Pegasus(USA))'),\n                                ('@colours', 'Yellow, Dark Blue Vee And Cap'),\n                                ( '@owners',\n                                  'Sheikh Mohammed Bin Khalifa Al Maktoum'),\n                                ('@dob', '2013-09-09T00:00:00'),\n                                ('@age', '3'),\n                                ('@sex', 'F'),\n                                ('@career', '1-0-0-1 $8350.00'),\n                                ('@thistrack', '1-0-0-1 $8350.00'),\n                                ('@thisdistance', '1-0-0-1 $8350.00'),\n                                ('@goodtrack', '0-0-0-0'),\n                                ('@heavytrack', '0-0-0-0'),\n                                ('@slowtrack', ''),\n                                ('@deadtrack', ''),\n                                ('@fasttrack', '0-0-0-0'),\n                                ('@firstup', '1-0-0-1 $8350.00'),\n                                ('@secondup', '0-0-0-0'),\n                                ('@mindistancewin', '0'),\n                                ('@maxdistancewin', '0'),\n                                ('@finished', '0'),\n                                ('@weightvariation', '0'),\n                                ('@variedweight', '54'),\n                                ('@decimalmargin', '0.00'),\n                                ('@penalty', '0'),\n                                ('@pricestarting', ''),\n                                ('@sectional200', '0'),\n                                ('@sectional400', '0'),\n                                ('@sectional600', '0'),\n                                ('@sectional800', '0'),\n                                ('@sectional1200', '0'),\n                                ('@bonusindicator', 'E')]),\n```\n. ",
    "omps": "thanks figured out the issue was with utf-8 encoding, while rereading the file using the error fixed.\n\n`with open(filename, \"r\", encoding='utf-8') as f:`\n\nthough with python 2.7, do need to import io module.\n\n```\nfrom io import open\nwith open(filename, \"r\", encoding='utf-8') as f:\n```\n\nthanks a lot for responding. :+1: \n. thanks figured out the issue was with utf-8 encoding, while rereading the file using the error fixed.\n\n`with open(filename, \"r\", encoding='utf-8') as f:`\n\nthough with python 2.7, do need to import io module.\n\n```\nfrom io import open\nwith open(filename, \"r\", encoding='utf-8') as f:\n```\n\nthanks a lot for responding. :+1: \n. ",
    "steftux": "ok the problem was in using \n`execfile(xmltodict.py)`\nit is supposed to be used by\n`import xmltodict`\n. ok the problem was in using \n`execfile(xmltodict.py)`\nit is supposed to be used by\n`import xmltodict`\n. ",
    "kevin-brown": "It looks like there hasn't been a release since before this was merged, so there aren't any wheels up on PyPI.. It looks like there hasn't been a release since before this was merged, so there aren't any wheels up on PyPI.. ",
    "chesstrian": "@lindsay-stevens Does this preserve order on `unparse`?.. @lindsay-stevens Does this preserve order on `unparse`?.. ",
    "dudanogueira": "You need something like:\r\n\r\nDEFAULT_CONFIG = {'oneroot': {'encoding ': 'utf-8', 'header': {'Content-Type': 'type=\"text/xml\"'}}}\r\n. You need something like:\r\n\r\nDEFAULT_CONFIG = {'oneroot': {'encoding ': 'utf-8', 'header': {'Content-Type': 'type=\"text/xml\"'}}}\r\n. ",
    "virsystem": "Thank you.\r\nI thought he would make default \"root\". . Thank you.\r\nI thought he would make default \"root\". . ",
    "SnakeNuts": "As a side-not to this: the pypi file seems to say that it's version '0.10.2' (it's also marked as such in the xmltodict.py file), but the contents (apart from the version no.) seem to be '0.10.1'.. As a side-not to this: the pypi file seems to say that it's version '0.10.2' (it's also marked as such in the xmltodict.py file), but the contents (apart from the version no.) seem to be '0.10.1'.. ",
    "tomkralidis": "Testing the above snippet against master yields the same result.  Seems like I'm unable to reopen the issue.. Testing the above snippet against master yields the same result.  Seems like I'm unable to reopen the issue.. ",
    "mikusjelly": "Thank you. It works.. Thank you. It works.. ",
    "dagwieers": "In the meantime I have added the Abdera convention to xmljson (https://github.com/sanand0/xmljson/pull/17), since it already had a way to extend it, it was quite easy to do.\r\n\r\nSince xmltodict was already used in Ansible, it was my first choice.. In the meantime I have added the Abdera convention to xmljson (https://github.com/sanand0/xmljson/pull/17), since it already had a way to extend it, it was quite easy to do.\r\n\r\nSince xmltodict was already used in Ansible, it was my first choice.. ",
    "rspeer": "Thanks for the response. I think you should add this compatibility-breaking change to the Changelog, though.. Thanks for the response. I think you should add this compatibility-breaking change to the Changelog, though.. ",
    "adeadman": "+1 - this bug means we cannot use xmltodict to create a py2/3 compatible library, as the interface for xml.sax.saxutils.XMLGenerator has changed in Python 3.2 to add this flag, but no version checking is presently done in the `unparse` call.. +1 - this bug means we cannot use xmltodict to create a py2/3 compatible library, as the interface for xml.sax.saxutils.XMLGenerator has changed in Python 3.2 to add this flag, but no version checking is presently done in the `unparse` call.. "
}