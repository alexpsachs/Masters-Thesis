{
    "kevinrobinson": "@phopkins This looks awesome, approved.\n. Approved.\n. @phopkins This is awesome work, only had some small nitpicky comments, this is great. :)  Approved.\n. Approved.\n. Approved.\n. :heart: :ship: \n. Approved.  @phopkins sorry, thanks for pinging, I didn't get the notification about this. :\\\n. Approved.\n. Approved.\n\nI'm not able to pull this particular repo anymore, I get a warning about ssh keys.  I mucked with my ssh setup yesterday so will have to fix that up later today.  I wants to see the emoji!  They are a good motivation. :)\n. @phopkins The crossfade animation looks awesome too.  This is great work, very excited to see it out in the world. :)\n\nApproved.\n\n![image](https://cloud.githubusercontent.com/assets/1056957/10137405/59389218-65c7-11e5-9f6d-4ada88e7989a.png)\n. Approved.\n. Approved.\n. Approved.\n. Approved.\n. Approved.\n. Approved.\n. Approved.\n. @david-rosales Check this out: https://github.com/twitter-fabric/velocity-react/pull/102\n. @phopkins This looks awesome, approved.\n. Approved.\n. @phopkins This is awesome work, only had some small nitpicky comments, this is great. :)  Approved.\n. Approved.\n. Approved.\n. :heart: :ship: \n. Approved.  @phopkins sorry, thanks for pinging, I didn't get the notification about this. :\\\n. Approved.\n. Approved.\n\nI'm not able to pull this particular repo anymore, I get a warning about ssh keys.  I mucked with my ssh setup yesterday so will have to fix that up later today.  I wants to see the emoji!  They are a good motivation. :)\n. @phopkins The crossfade animation looks awesome too.  This is great work, very excited to see it out in the world. :)\n\nApproved.\n\n![image](https://cloud.githubusercontent.com/assets/1056957/10137405/59389218-65c7-11e5-9f6d-4ada88e7989a.png)\n. Approved.\n. Approved.\n. Approved.\n. Approved.\n. Approved.\n. Approved.\n. Approved.\n. @david-rosales Check this out: https://github.com/twitter-fabric/velocity-react/pull/102\n. ",
    "fionawhim": "@kevinrobinson can you peep?\n. @kevinrobinson also this\n. Fixed in the above release.\n. Check the error messages. You have to whitelist your SSH key explicitly due\nto twitter-fabric's new SSH security settings.\n\nOn Wed, Sep 23, 2015 at 9:01 AM, Kevin Robinson notifications@github.com\nwrote:\n\n> Approved.\n> \n> I'm not able to pull this particular repo anymore, I get a warning about\n> ssh keys. I mucked with my ssh setup yesterday so will have to fix that up\n> later today. I wants to see the emoji! They are a good motivation. :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/pull/8#issuecomment-142591940\n> .\n. Updated the crossfade component's `propTypes` and comment to explain about style and other things better. No longer passing `opaque` and `duration` down into the delegate.\n\nAlso added a `height: ''` to the `slideDown` so that things work right when you get extra clicky on the toggle.\n\nCommitting.\n. This should fix issue #6.\n. Are you running Node 0.10 or earlier? Sounds like some of the CSS libraries require at least Node 0.12: https://github.com/webpack/css-loader/issues/144\n. Interesting point.\n\nHaving the velocity-react components short-circuit out and not do anything on the server (including not requiring Velocity) I expect would be trivial.\n\nI would assume that in most cases the rest would just work; for consistency you'd want to \u201cfinish\u201d the Velocity animation as soon as the client was in play. While that has the potential for jumpiness, I think that in a lot of cases the \"end\" state for an animation matches the neutral rendering of the element, so you wouldn't notice.\n\nIs the short-circuiting something you're interested in putting together? If not I can take a look. I haven't done any isomorphic React, so if you could point me to a good toy starter project I could toss in a `VelocityComponent` and see what happens.\n\nCertainly being able to \u201cfinish\u201d an animation on the server would be ideal, to have the DOM match more correctly. I don't know how feasible that is or if it's on a roadmap. (cc: @kenwheeler)\n. @jamwaffles I think the `firstChild` error can come up if you don't have a child for the `VelocityComponent`. (Which is something that perhaps we should be tolerant of; though `VelocityComponent` has no DOM footprint of its own, and relies on a child to have a presence on the page.)\n. OK, I traced this out a bit. `VelocityComponent` plays fast-and-loose with `findDOMNode` to try and avoid having its own DOM footprint. This seems incompatible with server-side rendering.\n\nThe alternate trick of trying to add a `ref` to the child by cloning it also seems to fail in my testing of 0.13, possibly also because of `VelocityComponent`\u2019s lack of its own node.\n\nMy plan is to get this package working with 0.14, then see if the problem persists or if any new solutions present themselves.\n\nAs a last resort, we could make `VelocityComponent` take an optional prop that would cause it to render its own DOM node (a la `ReactTransitionGroup`) and that would likely smooth this over.\n. OK, pals. Looks like my investigations above were ERRONEOUS. Turns out (and I need to tattoo this to my trackpad or something), `npm link` and React do not play well together. That is, using `npm link` to pull in a dev version of `velocity-react` from a local repo does not work because `velocity-react` will resolve a different copy of `react` than the main app.\n\n@jamwaffles I believe this accounts for the `firstChild` error the two of us saw, and later \u201cOnly a ReactOwner can have refs\u201d errors I found.\n\nI'll close this since it's fixed on master, and get out a 1.0.1 release that includes the shim from #22.\n. Whoops. Thanks so much!\n. Hrm. What does this fix for you?\n\nThis breaks things from running `npm run demo` for me from the root source directory (/build/bundle.js not found in the webpack server). \n\nIs there a configuration or path that works in both places?\n. Thanks for bringing this to my attention. That `react-dom` bit will be a bit annoying; I think I'll cut a branch for the RC until it's released, and then I think we'll need to do a hard cut over with a 1.1\\* release or somesuch.\n- = might have to break out my semver docs\u2026 should it be 2.0 when the peerDependencies change so forcefully?\n. Noticed that React 0.14 is now official: http://facebook.github.io/react/blog/2015/10/07/react-v0.14.html\n\nWill look into getting support going in the very near term.\n. Now fixed in v1.1.0 of velocity-react.\n. Is this a case where you have Velocity already as a dependency in your project? In that case, does `npm dedupe` do what you need to collapse the dependency tree?\n. FWIW the demo app uses webpack, though it's obviously quite toy. We have this at the top of the top-level component:\n\n```\nrequire('velocity-animate');\nrequire('velocity-animate/velocity.ui');\n```\n. Hrm. I noticed that the demo isn't the best case because it doesn't NPM-in the `velocity-react` bits.\n\nRegardless, in a separate toy project I still couldn't repro. I see that in `./node_modules/velocity-react/node_modules` that there's no `velocity-animate` package of its own. NPM didn't install one there, and it's instead letting the one in `./node_modules/velocity-animate` be used.\n\nThis is with NPM 2.14.4.\n\nMy package.json is:\n\n```\n{\n  \"name\": \"velocity-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"react\": \"^0.13.3\",\n    \"velocity-animate\": \"^1.2.3\",\n    \"velocity-react\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^5.8.25\",\n    \"babel-loader\": \"^5.3.2\",\n    \"react-hot-loader\": \"^1.3.0\",\n    \"style-loader\": \"^0.12.4\",\n    \"webpack\": \"^1.12.2\",\n    \"webpack-dev-server\": \"^1.12.0\"\n  }\n}\n```\n\nAnd do the `require` for `velocity-animate` and `velocity-animate/velocity.ui` in an app.js, followed by a `require` for the `MainComponent` that `require`s `velocity-react/velocity-component`.\n. Here's the gist of my packaging test: https://gist.github.com/phopkins/d127287ffa950d3b0d2c\n. Closing, since I think `npm dedupe` pretty much solves this. Please re-open with more info if that's not the case.\n. Thanks for looking into this. I'll use this as the basis for the 0.14 support.\n\nI think it's still best-practice to keep the React stuff as `peerDependencies` to avoid duplicating Reacts, so I'll keep that pattern.\n. Closing, integrated this into #27. Thanks again!\n. Happy news! It should be secretly already there. Any `props` you pass to `VelocityComponent` that it doesn't interpret itself get passed in the options hash to Velocity. So, if you put a [`complete`](http://julian.com/research/velocity/#beginAndComplete) property on `VelocityComponent` it should get called.\n\nThe [Velocity docs](http://julian.com/research/velocity/) have a list of all the options.\n. P.S.: Glad to hear you're liking it!\n. This is a bug in velocity-react. `ReactTransitionGroup` clobbers the `complete` callback. I can look into fixing this, though if anyone wants to take a go at it LMK.\n. Put up #53 for this. Anyone who wants `complete` for `VelocityTransitionGroup` care to try it out?\n. Fixed in 1.1.2, now published.\n. Unfortunately, this is not enough right now. Closing this, will revisit after 0.14 support.\n. Re-opening because this does at least fix `VelocityTransitionGroup`.\n. On further testing, I believe that this fixes #14, at least for getting things to not crash.\n. See https://github.com/twitter-fabric/velocity-react/pull/22 for my version of this. (It's better to short-circuit `VelocityTransitionGroup` at the `childFactory` level.)\n\nNevertheless, I don't think this solves the entire problem, which is that `React.findDOMNode` in `VelocityComponent` does not seem to work on the client when running from a server-rendered DOM tree.\n\nHave you run into that, and, if so, do you have a solution? If so I can merge #22 and we can take it from there.\n. Can you pull the branch patch/shim-for-server-rendering and check w/ that? If so I can get it in.\n\nWhich components are you using? Is the `_getDOMTarget` method of `VelocityComponent` running over server-generated components once the client boots up?\n\nI'm curious to seeing what the conditions are that make this succeed or fail. I grabbed [https://github.com/RickWong/react-isomorphic-starterkit] and checked out the last 0.13.3 version and am plagued by `VelocityComponent` not working on the client as described in the original #14 report.\n. @mars Ah, ok. I think that's expected. I'll close this PR and merge the other one, and see about getting a release up.\n\nThanks for testing!\n. Good idea. I'll look into this.\n. That would be super awesome. Shouldn't be tooo much of a thing to export\nthe demo bundle in some fashion. But I suppose there's always wrinkles.\n\nOn Wed, Oct 7, 2015 at 4:47 PM, Joseph Furlott notifications@github.com\nwrote:\n\n> @phopkins https://github.com/phopkins I would be happy to get this\n> running on github pages for the repo if you want me to\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/25#issuecomment-146322912\n> .\n. Shiny! Made the `gh-pages` branch.\n\nIdeally, I think we should check any code / location changes in to master\n(i.e. make the demo index.html work from wherever) and then just have\ngh-pages for the pre-built `build` directory.\n\nDid you run into anything where the webpack-dev-server doesn't like\nreferencing the `bundle.js` file from `build`? I'd like to figure out how\nto sort that out if it's possible. I can look at it if it's out-of-scope\nfor you. (This came up in another bug, where webpacking and just opening\nthe `index.html` file didn't work, but running through the dev server did.)\n\nOn Fri, Oct 16, 2015 at 9:10 PM, Joseph Furlott notifications@github.com\nwrote:\n\n> Sorry for the delay @phopkins https://github.com/phopkins but I just\n> got it up running on my fork on the gh-pages branch. I added a build task\n> which the same as the demo script but it uses webpack instead of the dev\n> server. Additionally, I broke out the demo/index.html and put it in the\n> root with updated paths.\n> \n> I had to remove build from the .gitignore so that the files would be\n> available as well in version control. Obviously this branch should never be\n> merged into master.\n> \n> It is visible here http://jmfurlott.github.io/velocity-react/\n> \n> @phopkins https://github.com/phopkins if you want me to merge this in,\n> I think I need you to create a gh-pages so I have a branch that I can\n> make a PR on\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/25#issuecomment-148873558\n> .\n. Here's the PR that was put in regarding `build/bundle.js` vs. `bundle.js`: https://github.com/twitter-fabric/velocity-react/pull/16\n\nI'm ok with index.html in the root for the demo. Could just `.npmignore` it out.\n. Cool. Thank for sorting this out. I'll merge the PR to the `gh-pages`\nbranch, which will get the demo up there, and then I can look into the\npaths and keeping the static version consistent with the demo going forward.\n\nOn Mon, Oct 19, 2015 at 2:32 PM, Joseph Furlott notifications@github.com\nwrote:\n\n> In the gh-pages you don't need to start a server in order to view the\n> index.html. Making that possible is essentially all my PR is. You have to\n> run npm run build, which executes and just spits out build/bundle.js (but\n> this path could be anything), and then the index.html just loads in that\n> bundle. Obviously nothing is watching the changes or anything, but it works\n> completely statically\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/25#issuecomment-149306325\n> .\n. Thanks to @jmfurlott, the basic demo is accessible at: http://twitter-fabric.github.io/velocity-react/\n. I think the best way to achieve a \"chaining\" effect with these components is to just use a `delay` on the 2nd animation that matches the `duration` of the first. (You can use a constant or something to keep the 2 values in sync.)\n\nFor your problems above, you need to decide whether you're doing your widths in JS with styles/animations or in CSS with classes. Mixing the 2 will likely give you popping issues like you describe. (You may want to consider CSS `transition`s, for example, which should play well with the classes.)\n\nNot sure what you're trying to achieve on the right side, but bear in mind that if 2 elements need to take up the same space, absent negative margin shenanigans you'll need some amount of absolute positioning. The `LoadingCrossfadeComponent` in the demo code may give you an effect you want, though bear in mind it can be slightly finicky to get working.\n\n(Closing this as it is not an issue in `velocity-component`)\n. Yeah, that error commonly means that you have 2 React instances. velocity-react uses peerDependencies so it typically doesn't bring in its own React. You should try `npm dedupe` to prune your tree down to one React. \n\nNote that this can also come up if you are `npm link`ing to a velocity-react directory that has all its dependencies installed. To test locally, you'll need to `npm pack` and then `npm install` the archive it creates. \n. I haven't much used react-router myself. Can anyone else chime in here?\n\nThe one I'm most familiar with is https://github.com/larrymyers/react-mini-router, which should work pretty trivially with `VelocityTransitionGroup`. Just call `renderCurrentRoute` as a child of `VelocityTransitionGroup`.\n. Thanks, @mars!\n\nI'll also add that for stuff like this, where your `VelocityTransitionGroup` has single elements that are coming and going, you may need to use absolute positioning during the transition to get overlap right. Take a look at the `LoadingCrossfadeComponent` in the demo source code to see one way of doing this.\n. I think what you want is covered by Velocity, which allows for a start value when tweening:\n\n```\n<VelocityComponent animation={{top: [0, 100], opacity: [1, 0]}}>\u2026</VelocityComponent>\n```\n\n(It's a bit counter-intuitive in that the second value in the array is the start, and the first is the end. It also only works for linear tweens AFAIK.)\n\nMake sure that this is what you want, though. If you're changing animations back and forth, you'll get a smoother effect without fixing the start value.\n. Awesome, thanks!\n. Thanks!\n. Ha! Thanks for catching this.\n. Was this in error?\n. Could you provide more details about what you\u2019re trying to do? How does the `VelocityTransitionGroupChild` get the custom `props` to begin with?\n\nI\u2019m not following how you couldn\u2019t put the `props` on the child elements when you create them as children of `VelocityTransitionGroup` initially.\n. The reason the child animation is not running is because, to React, the inner `VelocityTransitionGroup` and its child are appearing  in the DOM together. By default, the animations only run on children that enter/leave an existing TransitionGroup.\n\nTo get the behavior you want, add `runOnMount={true}` to the inner `VelocityTransitionGroup` so that it will animate in this circumstance.\n\nWhile there\u2019s no cross-element chaining as you see, it should be fairly easy to just add a `delay` on the inner animations so that they start when you want them to. (This gives you the flexibility to tweak things so that the fade in overlaps with the slide down if it\u2019s appropriate.)\n\nIt's also possible to use custom UI Pack effects to do chaining in most circumstances (see `velocityHelpers.registerEffect`) but that likely won\u2019t work in this case because the \u201cslide\u201d effects are custom internal to Velocity in order to get implicit heights right.\n\nAlso, make sure to have `key` properties on all children of `VelocityTransitionGroup`.\n\nDoes that fix things?\n. Hrm. Digging in, in slow motion, I noticed a few things.\n\nFirst up, there's a bug in `VelocityTransitionGroup` where it won\u2019t run any animations unless a `leave` prop is set. I\u2019ll get a fix for this out later today.\n\nSecond, it may help to make sure any inner element is block-level. React\u2019s `TransitionGroup` (and by extension, `VelocityTransitionGroup`) is a `<span>` by default. Use `component=\"div\"` to change this.\n\nI don\u2019t know if `slideDown` and `delay` are going to work well together. `slideDown` calculates the target height when it\u2019s called. If you\u2019re doing that on an element whose child\u2019s animation is delayed, that child may have `display: none` and therefore not influence its parent\u2019s height.\n\nYou could probably work around that by writing a custom animation for the child that doesn\u2019t affect the display and therefore height. (By default all Velocity UI Pack \u201cIn\u201d and \u201cOut\u201d animations mess with display.)\n. For the delayed element, you could do a custom animation that just went from opacity: 0 -> 1. You can put a \"style\" attribute for opacity: 0 on the enter/leave prop that will get set immediately, and then the animation would start after a delay.\n\nI think the delay is not really the issue as much as the Velocity UI Pack \"In\" transitions always starting from \"display: none\".\n\nAt any rate, glad you have something, and maybe this gives you ideas for improving it.\n. @kevinrobinson Can you re-approve? Updated CHANGELOG.md for #39.\n. Kevin's hanging out at #TwitterFlight. Selfin'.\n. The \"style\" just gets applied, since it\u2019s done via Velocity / DOM rather than React it's not straightforward to just \"undo\". You can often override it in the animation if that's necessary.\n\nFor doing a crossfade-like effect, I'd recommend only using \u201cposition: absolute\u201d for the leaving element, leaving the parent to size naturally from any entering element.\n. Makes sense. Thanks for putting this together.\n. Sounds like you don't have the Velocity UI Pack installed. At a top level of your app, include:\n\n``` javascript\nrequire('velocity-animate');\nrequire('velocity-animate/velocity.ui');\n```\n. Thanks for bringing this to our attention. I think it would be up to Radium to avoid stomping existing style attributes, but that may not be feasible. (Vanilla React appears to be well more tolerant of this, even with setting `style` hashes on your elements.)\n\nIn the immediate term, I'm not sure there's anything we can do, given how Velocity operates completely outside of React and on the DOM directly.\n\nIf you do any investigation and get a lead on an approach that might resolve the compatibility between the libraries, FF to re-open and let us know what you find.\n. @ianobermiller I'm not familiar with Radium, but Velocity works outside of React and is setting the style values directly on the DOM node, which React typically leaves alone. My guess if there's a problem with Radium it is because Radium is somehow over-writing those, but this is coming from a place of speculation.\n. Thanks for the suggestion. Tweaked the language some and committed in #43.\n. Hrm. Good point. Let me look into this.\n. Does #54 help you with this?\n\nYou'll still want to wrap your primary `require` calls in:\n\n```\nif (typeof window !== 'undefined') {\n  \u2026\n}\n```\n\nand the `velocity-react` components will use their shim.\n. Lemme get this reviewed and we can get a release up.\n. Fixed in 1.1.2.\n. Take a look at `LoadingCrossfadeComponent` in the demo code for how to switch an element to `absolute` as it leaves so that it doesn't take up space.\n\nPutting a `delay` on the enter animation may work, but the danger there is additional stuttering of the height. (I suspect it would only be feasible if you can let the container collapse down to 0 height.)\n. I suspect you need:\n\n```\nimport {VelocityTransitionGroup} from 'velocity-react'\n```\n. The 'velocity-react' model is a convenience that exports the 3 pieces of the library as a hash. The braces destructure that hash to give you access to just the component you want. \n. Are you using Webpack or some other packager that is aware of npm modules?\nYou'll need that for this library.\n\nOn Wednesday, November 4, 2015, Chris Drackett notifications@github.com\nwrote:\n\n> actually the code I pasted below is causing issues with react, so I don't\n> currently have a solution :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/47#issuecomment-153913032\n> .\n. Glad to hear it's working. This may have been an issue that could have been solved with `npm dedupe` as well.\n. Thanks for clearing this up, @PEM--!\n. Try doing an `npm dedupe` to make sure there aren't alternate Velocity runtimes being loaded.\n\nAlso, not sure how it pans out, but make sure some subtle difference between `import` and `require` isn't causing a problem, since the Velocity libs are not \"pure\" in the module sense.\n. Not sure what the best practice is here. If you do a peerDependency, it\nwould need to be explicitly added as a dependency to the parent app.\n\nI don't know enough about NPM to know when it puts transitive dependencies\nin the package's root, and when they go into the sub-packages (though\nversion numbers may have something to do with it). It may also vary by NPM\nversion.\n\nOn Thu, Apr 7, 2016 at 3:16 PM, David Calhoun notifications@github.com\nwrote:\n\n> @finneganh https://github.com/finneganh I thought about this some more.\n> Should velocity-animated be added as a peerDependency for this package?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/50#issuecomment-207055094\n. Latest version has this tip in the README, in case it bites someone else.\n. @lauffenp what's the stack trace on that? Neither `velocity-react` nor `velocity` use `localeCompare` directly.. You may not have been specifying `display` right. You'l need to do it for each of the animations. E.g.\n\n```\n  <VelocityTransitionGroup component='tbody' enter={{ animation: 'slideDown', display: 'table-row' }} leave={{ animation: 'slideUp', display: 'table-row' }}>          \n      {history.map(this.renderRows}}\n    </VelocityTransitionGroup>\n```\n\nand see if that helps.\n. What URL are you going to in the browser?\n. The `leave` animation is always finished on an element before the `enter` animation runs, to try to make sure that `enter` animations always have a consistent state.\n\nNot sure either way on having the `begin` trigger in this case or not. Probably it shouldn't; actually #53 removes that behavior for complete, so perhaps they should be consistent.\n\nWhat's your use case?\n. Closing. Re-open w/ further information if this is causing problems.\n. There may be some hacks you could do by temporarily changing the `enter` / `leave` props when you know filtering is happening. You could also try some nested shenanigans (in other words, make filtering change rows' display or inner contents rather than adding / removing them from the parent element).\n. Does leaving out the `enter`/`leave` properties have any effect?\n\nOn Fri, Dec 4, 2015 at 3:08 PM, Chris Drackett notifications@github.com\nwrote:\n\n> I'm using a VelocityTransitionGroup for a Loading element that shows a\n> spinner while it has no children and then fades the spinner out and fades\n> the children in when they exist. The issue I'm running into is if I try and\n> get the offsetWidth of a ref within the new children on componentDidMount I\n> end up getting a value of 0. If I remove VelocityTransitionGroup I get\n> the correct width value on this element.\n> \n> Here is my Loading component for reference. the console log statement in\n> componentDidUpdate returns a correct width pre and post loading without\n> VelocityTransitionGroup but returns an incorrect value after loading\n> otherwise:\n> \n> https://gist.github.com/chrisdrackett/2dcbaea51b59166bf5db\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/57.\n. OK. Animations start on a next tick so that all the animations for a single `VelocityTransitionGroup` can be collected and fired together (this makes things like `stagger` work). Your calculations are probably happening before the animations have started, which may be causing the issue.\n. I think Velocity may have a \"begin\" callback that you could put on enter or\nleave.\n\nOn Mon, Dec 7, 2015 at 12:56 PM, Chris Drackett notifications@github.com\nwrote:\n\n> I see, so is there any way to measure an element that is used in\n> VelocityTransitionGroup?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/57#issuecomment-162607580\n> .\n. The Velocity animations are only applied to the direct children of\nVelocityTransitionGroup, so if the tick over before animations starting is\nwhat's giving you trouble with measurements, I would think that the begin\ncallback would fire when the components would be measurable.\n\nOn Mon, Dec 7, 2015 at 1:17 PM, Chris Drackett notifications@github.com\nwrote:\n\n> that would take care of the top level component, the issue here is that\n> this affects any components mounting under the VelocityTransitionGroup.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/57#issuecomment-162612762\n> .\n. Are you measuring before or after Velocity kicks in and starts setting\nstyles?\n\nOn Mon, Dec 7, 2015 at 1:52 PM, Chris Drackett notifications@github.com\nwrote:\n\n> right, but say I have a component inside the Loading component mentioned\n> above. They also return a width of 0 on ComponentDidMount when they are\n> the child of a VelocityTransitionGroup\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/57#issuecomment-162622475\n> .\n. After thinking about this a little, I'd recommend trying to subclass\nVelocityTransitionGroup. If you mark your nodes in some manner with whether\nthey should be animated or not (with classes, perhaps?) you can override\nchildWillAppear, childWillEnter, and childWillLeave. Use your own logic to\nshort-circuit out of those functions (just call the doneFn and return) and\nonly call the \"super\" implementations when you want animation to happen.\n\nYou could also put together a PR to allow the wrapper component class,\ncurrently VelocityTransitionGroupChild, to be parameterized as a prop to\nVelocityTransitionGroup. Then you could implement the logic in your custom\nchild's componentWillAppear / componentWillEnter / componentWillLeave\n(calling the willAppearFunc / willEnterFunc / willLeaveFunc props as\nnecessary).\n\nI think the latter's nicer because I prefer composition over inheritance\nfor customization (esp. given the state of JS \"classes\"), but the former\nyou could get started on right away.\n\nOn Tue, Dec 8, 2015 at 11:08 PM, Richard Lopes notifications@github.com\nwrote:\n\n> Hello,\n> \n> Having great success with the library so far.\n> However I got a new requirement causing me some grief to achieve.\n> \n> I have 2 pages:\n> - a list of items (that you can sort and filter)\n> - a form to create new items\n> \n> I have 2 API endpoints:\n> - one gets the original list of items\n> - one returns new items that have been added by other users\n> \n> This is how it works:\n> 1. when the list of items first load, items are rendered without animation\n> 2. when you filter or sort the list, items are rendered without animation\n> 3. when the second API notify new items have been added, those are\n> rendered in the list with animation\n> 4. when an item is deleted, it gets removed with an animation\n> 5. when a user leave the list page to create an item on the second page,\n> he is redirected back to the list page after creation, the new item only\n> must be rendered with animation\n> \n> At the moment I achieve 1 to 4 but I am having problems with 5 (5 leaves\n> the list page then come back, unmount/mount items). If I turn on animation\n> (on mount) all items are animated as no item was (React) mounted yet. If\n> animation is turned off nothing gets animated including the new item.\n> \n> For animation I wrap the list of items inside a VelocityTransitionGroup\n> and each item as a key attribute set to the item unique id. The unique id\n> works well to filter out what gets animated but in the case of 5 it doesn't\n> help.\n> \n> I have hacks in mind but they are not elegant. What would be the best\n> approach to meet requirements 1 to 5 ?\n> \n> I am thinking replacing the transition group with a VelocityElement per\n> row/item for finer control but I am not sure how to achieve the enter,\n> leave effect as provided by the transition group. Also feels like\n> reinventing transition group in a way.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/58.\n. Nope. The sentiment there is that you can have VelocityComponent and VelocityTransitionGroup in server-rendered code, they just won't have any effect at all.\n\nAn incompatible implementation couldn't run. A compatible implementation would probably output HTML for the components that reflected the end state of specified animations.\n. That line is in there because, due to React's TransitionGroup's API, we\nhave no way of getting all of the children that are entering or leaving\nother than collecting them and waiting a tick to know that the collection\nis complete. We want to batch all of the child animations in one go in\norder to support Velocity options like stagger.\n\nWithout that display: none or an alternate means of hiding, elements would\nflash in for that tick before the animation started.\n\nI could imagine a position: absolute / opacity: 0 combo, or height: 0, or\nsomething else that would keep the element from appearing. Would one of\nthose work for your use case? Do you have ideas about a good means of\nparameterization?\n\nOn Thu, Dec 10, 2015 at 5:09 PM, Chris Drackett notifications@github.com\nwrote:\n\n> Setting display: none here:\n> \n> https://github.com/twitter-fabric/velocity-react/blob/master/velocity-transition-group.js#L153\n> \n> has the potential to cause issues with any components that happen to be\n> under a VelocityTransitionGroup that run style based code as part of\n> ComponentDidMount. For example we have list items that check their width\n> and size the text inside accordingly. If these list items are a child of a\n> parent that uses VelocityTransitionGroup to animate in they will come in\n> at their minimum size as they are getting a width of 0. Then the next\n> time they render they will size themselves correctly.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/61.\n. Looking at a fix in #62 \n. Live in 1.1.2.\n. Yes. The Velocity effects are named after how they appear.\n. Seems reasonable. Could you make a PR?\n\nWe don't need to do the timing bits; `velocity-react` just wants to get to\nthe next tick of the event loop.\n\nOn Thu, Jan 14, 2016 at 3:09 PM, Rand Scullard notifications@github.com\nwrote:\n\n> In velocity-transition-groupjs, on lines 201 and 293, there are calls to\n> windowrequestAnimationFrame This function is not available in Internet\n> Explorer 9 The underlying Velocity library works on IE 9, and it looks like\n> they solved this problem using the following shim:\n> \n> /\\* rAF shim Gist: https://gistgithubcom/julianshapiro/9497513 */\n> var rAFShim = (function() {\n>     var timeLast = 0;\n> \n> ```\n> return windowwebkitRequestAnimationFrame || windowmozRequestAnimationFrame || function(callback) {\n>     var timeCurrent = (new Date())getTime(),\n>         timeDelta;\n> \n>     /* Dynamically set delay on a per-tick basis to match 60fps */\n>     /* Technique by Erik Moller MIT license: https://gistgithubcom/paulirish/1579671 */\n>     timeDelta = Mathmax(0, 16 - (timeCurrent - timeLast));\n>     timeLast = timeCurrent + timeDelta;\n> \n>     return setTimeout(function() { callback(timeCurrent + timeDelta); }, timeDelta);\n> };\n> ```\n> \n> })();\n> \n> Would it make sense to incorporate the same technique in velocity-react?\n> Sadly, for our current project we still need to support IE 9 (for the time\n> being)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/64.\n. Yeah, if rAF isn't available that's fine for us. velocity-react doesn't\ncall rAF repeatedly, so the particular rate of call isn't important.\n\nOn Thu, Jan 14, 2016 at 4:38 PM, Rand Scullard notifications@github.com\nwrote:\n\n> By \"get to the next tick of the event loop\", do you mean just do a\n> setTimeout of zero?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/64#issuecomment-171788539\n> .\n. Sorry for the confusion. You're the second person who brought it up, so I re-worked to match the sentiment I was going for in #67.\n. I haven't tried it, but it's likely to work, since `velocity-react` just calls Velocity on child DOM nodes.\n\nYou may or may not want `runOnMount` to be true, depending upon how you want the \u201canimation\u201d\u00a0to be triggered.\n. You'll want to add a `ref` to the component so you can access it, and call `runAnimation` on it when you want it to fire off.\n. Try `translateX` as the key to the `style` block. velocity-react uses Velocity's style setting for consistency, not React's.\n. You\u2019ll need the component to stay in the DOM for the duration of the animation for the effect to appear. Two options come to mind:\n- Keep using `VelocityComponent`, rendered all of the time, but use Velocity\u2019s [display property](http://julian.com/research/velocity/#displayAndVisibility) (not in `animation`, but as its own `prop`) to get the element to display block/none at the beginning/end of the animation as necessary.\n- Use `VelocityTransitionGroup` and have the white overlay as a child that\u2019s added/removed from it. `VelocityTransitionGroup` will keep the child in the DOM while the animation runs, even if you\u2019re no longer rendering it, and remove it when the animation is over.\n. Cool, thanks for sending this in!\n. Double-check that all versions of Velocity you have installed are 1.2.3? (Perhaps with `npm dedupe` as well.)\n. I think the problem is the `<div>` around your `OrdersList` and the `OrdersList` itself. `ReactTransitionGroup` \u2014 and therefore `VelocityTransitionGroup` \u2014 operates only on direct children. You will need the components you\u2019re adding / removing to be direct children of a `VelocityTransitionGroup` to animate them.\n. Not sure what the error is\u2026 we're pegged to the 3.10 implementation.\n. Presumably we could upgrade to 4, though I don't see why you'd be getting an error now. In my tests, NPM installed lodash 3.10 into velocity-react's node_modules folder.\n\nYou may need to wipe your node_modules directory and do a re-install to get that, though.\n. Note that velocity-react doesn't require all of lodash, just a handful of functions. So, you're not getting a full extra copy in your bundle.\n. The components that use lodash are already only requiring/importing the\nparticular methods that they need.\n\nOn Tue, Aug 1, 2017 at 4:50 PM Eddie Monge <notifications@github.com> wrote:\n\n> Then why not only require the lodash packages you are using?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/77#issuecomment-319492751>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65VKRTKf_NOCqp2SQmLV8VjVXj6vjks5sT4-CgaJpZM4HjHTQ>\n> .\n>\n. My understanding is that a bundler such as webpack is only going to pull in\nthe directly-required files (and their transitive dependencies), regardless\nof what's in node_modules, so I don't know what that PR gains.\n\nOn Tue, Aug 1, 2017 at 5:22 PM Eddie Monge <notifications@github.com> wrote:\n\n> Not really. All of lodash is still included. This only installs the ones\n> that are actually used: #219\n> <https://github.com/twitter-fabric/velocity-react/pull/219>\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/77#issuecomment-319500871>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65cxOMAuLwqxRosxnqVzGdVZdN8Jaks5sT5cNgaJpZM4HjHTQ>\n> .\n>\n. Are you doing some top-level aliasing shenanigans with webpack? If npm is\nwell-behaved, it will put lodash in a node_modules directory relative to\nvelocity-react, and that's what the velocity-react package will import.\n\nThe velocity-react imports are already directly to lodash files, so it\ndoesn't rely on tree-shaking or anything along those lines.\n\nOn Mon, Aug 28, 2017 at 8:12 PM Aaron Melocik <notifications@github.com>\nwrote:\n\n> @finneganh <https://github.com/finneganh> -- I'm also having this Lodash\n> issue, though I'm not 100% confident that it's velocity-react (50/50 chance\n> at this point). But regarding the explicit imports in Lodash and webpack\n> only requiring the necessary modules -- I don't think you get that for free\n> with Webpack.\n>\n> My understanding is that if you were to import all of your lodash\n> statements namespaced, i.e.:\n>\n> import { merge } from 'lodash';\n>\n> ... then Webpack would, as part of optimizing the dependency graph, only\n> create a module out of merge.\n>\n> But if you import all of lodash, i.e.:\n>\n> import _ from 'lodash';\n>\n> ... then you've got all of lodash coming your way.\n>\n> You can validate the weight of lodash in velocity-react using the\n> bundle-analyzer-tool:\n>\n> https://github.com/th0r/webpack-bundle-analyzer\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/77#issuecomment-325517339>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65b9L7kcth772SD0zGvspodNvG3kmks5sc1digaJpZM4HjHTQ>\n> .\n>\n. Check and see if the [Velocity docs on SVG](http://julian.com/research/velocity/#svg) have the info you need.\n. For things like this, turning the animation speed waaaaay down is a good way to test this. That will let you inspect the DOM as it's moving.\n\nMy guess on this is that the animation is playing, but since you have 2 elements in the container, one is either covering the other or, more likely, bumping it down so that it can't be seen.\n\nYou may want to look over the sample code for the crossfade animation, which shows switching a leaving element over to position: absolute so that both elements can coexist on screen.\n. This is currently by design because the leave animation is run to completion before an element is added, so that elements can base their enter animations off of a consistent \u201cleft\u201d state.\n\nI think I\u2019d be open to a patch that would not run either of the \u201cleave\u201d callbacks in this case, however.\n. Yeah, that works for me.\n\nOn Mon, Mar 7, 2016 at 4:17 PM, Seth Tompkins notifications@github.com\nwrote:\n\n> Hrmm, this is the line right here correct?\n> \n> https://github.com/twitter-fabric/velocity-react/blob/eed8a4077e5589bc38e5d42eaffc2457449b2cdd/velocity-transition-group.js#L181\n> \n> Would it make sense to simply exclude the begin opt there just as the\n> complete opt is excluded?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/80#issuecomment-193454186\n> .\n. Will be fixed in 1.1.4\n. Yeah, good point. Looks like that's not documented outside of the `VelocityTransitionGroup` source code.\n. Adding this for the next rev of the README.\n. Thanks! I'll get a release up soon.\n. Shipped in 1.1.4. Thanks again!\n. For debugging animation issues, I recommend turning down the animation time to something on the order of 60s. That should give you enough time to investigate what's going on in a web inspector. The React `TransitionGroup` code should be keeping DOM elements in the correct order, providing your `key` attributes aren\u2019t changing, so I would suspect there\u2019s either something with keys or with your animation.\n. Glad to hear!\n. Sounds like this may be something on the React Template side? `VelocityTransitionGroup` does not use refs itself. You could see if you get the same problem using React\u2019s `TransitionGroup`, which is what VTG delegates to.\n. Try looping with a simpler animation (e.g. just a property hash). I'm not\nsure one way or another if the UIPack animations w/ a series of calls work\nwith loop.\n\nOn Wed, Apr 6, 2016 at 1:37 PM, Brian Thibault notifications@github.com\nwrote:\n\n> Hi I'm using the UIPack stuff to sequence a couple calls\n> \n> let translateAnimations = {\n>       withSwipe: velocityHelpers.registerEffect({\n>         defaultDuration: 750,\n>         calls:\n>          [\n>            [{translateX: buttonPosition.left, translateY: buttonPosition.top}],\n>            [{translateX: buttonPosition.left, translateY: '180px'}]\n>          ]\n>       })\n>     }\n> \n>    ...\n>             <VelocityComponent animation={translateAnimations.withSwipe} loop={true} delay={100}>\n>                   <button className=\"touch\" onClick={this.playNext.bind(this)} />\n>             </VelocityComponent>\n> \n> Ideally I want button to move up and down the y-axis... It does reset and\n> run again on component receiving props, but it doesn't appear to loop. Am I\n> doing something wrong?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/86\n. You could manually loop with a `complete` callback I suppose. You could also talk to @kenwheeler, the current Velocity maintainer, about loop w/ UI Pack.\n. Hrm. Unsure. VelocityTransitionGroup sets a complete handler, but I don't\nknow exactly how that interacts with the complete handler that UI Pack\nadds. You'd need to do some debugger tracing to see how that plays out. I\nwouldn't expect VelocityTransitionGroup to behave any differently from any\ncall to \"animate\" that has its own complete handler.\n\nTheoretically you could reset the styles with a complete handler passed to\nVelocityTransitionGroup, though it looks like it currently eats the\narguments / this that would make that possible.\n\nUpdating VelocityTransitionGroup to pass the args from its complete handler\ninto optsCompleteFn (and probably call it with the right \"this\") would fix\nthat, if you want to make a PR.\n\nOn Thu, Apr 7, 2016 at 3:29 PM, David Calhoun notifications@github.com\nwrote:\n\n> Does velocity-react support the reset property for Velocity.RegisterEffect\n> http://julian.com/research/velocity/#uiPack?\n> \n> Specifically, I'm attempting to \"clean up\" the style attribute of a\n> component after the animation is complete.\n> \n> // Define prep styles for animationvar prepStyles = {\n>   bottom: 0,\n>   left: 0,\n>   position: 'absolute',\n>   right: 0,\n>   top: 0\n> }\n> // Register effectsvar scaleFadeIn = velocityHelpers.registerEffect({\n>   defaultDuration: 600,\n>   calls: [\n>     [{\n>       opacity: [1, 0],\n>       scale: [1, [500, 30], 0.5]\n>     }]\n>   ],\n>   reset: {\n>     bottom: 'auto',\n>     left: 'auto',\n>     position: 'static',\n>     right: 'auto',\n>     top: 'auto',\n>   }\n> })\n> var scaleFadeOut = velocityHelpers.registerEffect({\n>   defaultDuration: 600,\n>   calls: [\n>     [{\n>       opacity: [0, 1],\n>       scale: [0.5, [500, 30], 1]\n>     }]\n>   ],\n>   reset: {\n>     bottom: 'auto',\n>     left: 'auto',\n>     position: 'static',\n>     right: 'auto',\n>     top: 'auto',\n>   }\n> })\n> // Use animation with style hash<VelocityTransitionGroup\n>   enter={{ animation: scaleFadeIn, style: prepStyles }}\n>   leave={{ animation: scaleFadeOut, style: prepStyles }}>\n>   {this.state.first ? <First /> : undefined}\n>   {!this.state.first ? <Second /> : undefined}</VelocityTransitionGroup>\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/87\n. The latest v1.1.5 fixes the `complete` callback so that it has information about what DOM elements were completed.\n. I think it's ok to bump `devDependencies` to 15. \n. Hopefully NPM is clever enough with that `react-addons-transition-group` to pull in the 0.14 version if your project is already using React 0.14.\n. I could go either way, depending upon how NPM complains. `tween-state` is only used for the demo, not the library itself.\n. @StevenLangbroek Can you give it a try to just put the devDependencies to 15?\n. Switched to make the demo use React 15 in a separate PR. Thanks for opening this, though!\n. I'm not 100% sure that's feasible given the hard dependency on `velocity-addons-transition-group`, which has its own `peerDependency` on `react`.\n\nRegardless, testing an update tonight w/ React 15 supported.\n. v1.1.5 out w/ React 15 support.\n. Sorry to hear you had an issue. The 1.1.5 change does just add React 15 as an option along with 0.14 (the velocity-react code was already compatible with both) but NPM's interpretation of that seems to have done you wrong.\n\nI suspect what happened was you're using a version of NPM that is installing peerDependencies automatically, and NPM pulled in React 15 off of velocity-addons-transition-group's peerDependencies (which it got by choosing to use v15 of that package, rather than 0.14, even though both are supported).\n\nYou way want to depend specifically on velocity-addons-transition-group at 0.14.x. velocity-react supports both.\n\nI'm sorry this caused a production problem. Have you looked into npm shrinkwrap to try to keep deployed versions more nailed down?\n. Good luck! Thanks for using velocity-react!\n\nOn Tue, Apr 12, 2016 at 4:50 PM, Lior Brauer notifications@github.com\nwrote:\n\n> @finneganh https://github.com/finneganh Thanks for the reply. I assumed\n> without looking that the version bump on your part explicitly depended on\n> React 15, but I see you're correct. I'll look into shrinkwrap and perhaps a\n> newer version of NPM that doesn't automatically install peerDependencies.\n> \n> Again, thanks for your help and contribution!\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/94#issuecomment-209096599\n. You may need to specify `react-addons-transition-group` at 0.14.x in your dependencies.\n\nSorry for the headaches around this; for some reason this React upgrade isn't going as smoothly as 0.13 -> 0.14.\n\nI think one lesson is to always make sure you're shrinkwrapping your dependencies so this doesn't bite arbitrarily.\n. For debugging stuff like this, I usually recommend slowing the animation down to 30s or so you have enough time to look in the web inspector to see how styles are cascading or conflicting.\n\nThis may be an issue you'd need to address with Velocity to allow for animation styles that override `!important` CSS.\n. I haven\u2019t looked closely at that, as I'm not sure how it would fit in with the declarative approach to animations. Feel free to discuss if you have a feeling of how it would integrate.\n. Ha! Awesome. Thanks for catching.\n. Thanks!\n. Sorry the documentation isn't very clear about this. I think the intent was to describe that you can use the `targetQuerySelector` prop to add the animation to multiple elements, which in this case are not strictly children but grandchildren or below.\n. Let me see if I can convey that better.\n. FWIW `VelocityComponent` requires a single child because it doesn't have a DOM wrapper element of its own.\n. Use `VelocityTransitionGroup` when you want the behavior of a React `TransitionGroup` (animations on elements entering / leaving the DOM). Docs here: https://facebook.github.io/react/docs/animation.html\n\nUse `VelocityComponent` otherwise.\n. It comes down to if you're animating an element in place, vs. if you need\nto animate a component as it enters or leaves the DOM. If you check the\ndemos, the three on the left are `VelocityComponent` whereas the two on the\nright are `VelocityTransitionGroup`.\n\nOn Thu, Jun 16, 2016 at 10:50 AM, Jeff Hansen notifications@github.com\nwrote:\n\n> I guess my question is, for a new animation, why would I _want_ to chose\n> one over the other?\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/103#issuecomment-226508756,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AAP65bKIWGWoXdYZxTYCx7eN7PeNPvPyks5qMWK_gaJpZM4I3XFi\n> .\n. If you're having the CSS animations just on elements so that they animate\nwhen they appear in the DOM, then probably VelocityTransitionGroup will\nmatch the behavior you expect. If you've been dynamically adding\nanimation-specific classes to elements based on some triggering event, then\nuse VelocityComponent.\n\nYou can do multi-step animations in Velocity, which you might be used to\nwith keyframes, by using `registerEffect` and specifying a series of\n`calls`. (This is for cases where straightforward tweening between two\nvalues is not enough.) Look at Velocity's documentation for\n`RegisterEffect`, though `velocity-react` also has a helper for it that\nprevents naming collisions.\n\nOn Thu, Jun 16, 2016 at 10:58 AM, Jeff Hansen notifications@github.com\nwrote:\n\n> Ah, okay, thanks! Basically right now I am using CSS transition groups\n> because the keyframes are easy to work with in CSS. What would be the best\n> path for me to come close to that experience with Velocity?\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/103#issuecomment-226511132,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AAP65TKIK4EPFH502b52p8UtKozTxofWks5qMWR9gaJpZM4I3XFi\n> .\n. `duration` needs to be set for `enter` and `leave` separately. Put them in the hashes alongside `animation`.\n. Curious. I wonder if this is a permanent change or a webhost mixup. At any rate, we can revert later if necessary.\n. Thanks!\n. I think you'll need to investigate what isn't smooth about the current effect. There a lot of processing going on when the routes change, or just components resizing when they get new data and that throwing off the animation.\n\nI believe you could add a `complete` callback to the `VelocityTransitionGroup`'s `enter` or `leave` animations that will get called when the effect is done. That may help, though there might be some bookkeeping to translate that to a specific component.\n. I'm not necessarily against this, but I want to make sure it's doing what you intend.\n\nWhen the duration changes, the animation will restart from the current DOM state, without memory of any previous animation or duration. So, if the box is halfway across the screen and you half the duration, the new animation will actually proceed at the same rate, as it has only half the distance to go.\n\nIs the effect you want better expressed through a custom tween or multi-step animation?\n. Closing this without a compelling use-case. I don't think duration changes are conceptually the right fit for the declarative way velocity-react works, due to the non-intuitive way they work with any in-progress animations.\n. Curious. The `slideUp`/`slideDown` animations are handled a little bit specially by Velocity; I don't know if that affects the way that the `complete` callback is called.\n\nLooking at where the error might happen in `ReactTransitionGroup`, it's something around the `doneFn` callback being called but the child element it was originally bound to is no longer present. Might be worth checking to see if somehow `slideUp` is calling its complete handler twice or something.\n\nI think that `removeAll` may be aggravating this because that example as originally written was being sloppy about keys. They've been based on array position, rather than something more intrinsic. That may have masked this bug because the `doneFn` lookup by key that happens in `ReactTransitionGroup` would have succeeded accidentally if the key were re-used.\n. Cool. This seems reasonable. I think this also safe server-side since `componentWillUnmount` isn't called then.\n\nHeads up, @kenwheeler, it might be nicer to have a Velocity helper for clearing this data rather than duplicating the `['velocity', 'fxqueue']` keys in this code.\n. I'd like to merge this, I just need to validate that it's also fine when jQuery is installed.\n. Demo still seems to work with this, so I think it's safe.\n. Would it work for you to include a `complete` callback and then call the `runAnimation` method on the component manually to cause a loop?\n\nDoes `RunSequence` have support for looping in a way that's different from calling `$.velocity`?\n. @tonybaroneee FF to send to me. I've been on vacation but I need to get back to maintaining this project.\n. The `\"reverse\"` value for an animation is not a great fit for `VelocityTransitionGroup` because elements may need to animate out without having been animated in. (See: http://velocityjs.org/#reverse Reverse just undoes the most recent animation on an element)\n\nIt's best to make an opposite animation.\n. Since you want your animation to be affected by the derivative of your state, rather than the state itself, I'd recommend calling the `runAnimation` method on a `VelocityComponent` in your `componentDidUpdate` method on detecting that the current value is different from the previous value (which are passed to `componentDidUpdate`).\n. Are you using `VelocityComponent` or `VelocityTransitionGroup`? \n. Added a review to that PR. I know it's been a little while. LMK if you want to update the PR or I can take over the fix.\n. Just merged. Will be in the next release.\n. I've been looking into this a little more. In my tests, loading the demo with jsdom worked. I couldn't reproduce the require error.\n\nI'm not sure there's a particular reason why velocity-react shouldn't work with jsdom around, and I wonder if the require error you have is from something else. Leaving the jsdom exclusion in for now, but that might get revisited if it comes up as a feature request from someone else.\n. What's your version of lodash?\n\nI'm hesitant to do this because the original intention of those requires is to only pull in the specific functions so as not to bloat the imports with all of object, array, &c. since tree-shaking is not widely available for JS importing.\n. This package is still using lodash 3. There may be something up with your npm importing if it's finding a different version.\n. Awesome. Thanks!\n. Really? OK. Disappointing that they're parsing code with RegExps, but it's no big deal to change this on our end.\n. You should be able to use the VelocityHelper to register a multi-step\nanimation that goes to 20 and then back to 10.\n\nOn Wednesday, September 7, 2016, angus croll notifications@github.com\nwrote:\n\n> Here's my use case:\n> \n> <VelocityComponent>\n>   <MyComponent/>\n> </VelocityComponent>\n> \n> For each animation loop, MyComponent's width should start at 10, grow to\n> 20 at the half way point, then ease back to 10. I don't think I can use the\n> animation property for this (since start and end values are 10).\n> \n> The progress property supplies the complete value to the associated\n> callback, which I could potentially use to update width via something like:\n> \n> progress={(el, complete) => {width: 20 - (Math.abs(complete - 0.5)*20)}}\n> \n> However I'm not sure how (or whether) I can update a style property via\n> this callback.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/124, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAP65Z94cRwLTrk0BJDuBau-SPYCRG6Sks5qn1DogaJpZM4J3esc\n> .\n. You should be able to modify the easing w/ additional arguments. Unfortunately the `registerEffect` bits are not well-documented in Velocity. You can also set the initial width I think with:\n\n`\n[{\n  width: [20, 10],\n  left: \u2026\n}, \u2026]\n`\n\nI believe that you cannot loop `registerEffect` animations, but you could add a `complete` handler to the component and have that call `runAnimation`.\n. This seems to be an NPM / Treebeard issue. Treebeard's dev dependencies specify React 0.14.8, but the NPM I have (2.7.5) is installing a React for velocity-react's peerDependency, even though 0.14.8 should satisfy the ||.\n\nIn your own app, lock React down at 15.something and I expect you won't have warnings.\n\nI'm not sure if npm 3 would handle this case better.\n. Looks like this is an issue with the new garbage collection, as it uses a Velocity API that's not shimmed out in server / test mode. Will get a new release out presently.\n. Should be fixed in 1.1.7.\n. Fixed in 1.1.8. Thanks @stephenleicht for the fix.\n. Thanks!\n. Selfie since this is breaking IE compat.\n. I'd be surprised if you actually were getting 60kb of lodash 3.\nvelocity-react only requires the handful of lodash methods it actually\nuses, not the whole library.\n\nOn Friday, October 7, 2016, FUJI Goro notifications@github.com wrote:\n\n> It should reduce 60kb+ of JavaScript bundles if our apps depend on lodash\n> \n> ## v4 (but not v3).\n> \n> You can view, comment on, or merge this pull request online at:\n> \n>   https://github.com/twitter-fabric/velocity-react/pull/134\n> Commit Summary\n> - allow lodash v4\n> \n> File Changes\n> - _M_ package.json\n>   https://github.com/twitter-fabric/velocity-react/pull/134/files#diff-0\n>   (2)\n> \n> Patch Links:\n> - https://github.com/twitter-fabric/velocity-react/pull/134.patch\n> - https://github.com/twitter-fabric/velocity-react/pull/134.diff\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/pull/134, or mute the\n> thread\n> https://github.com/notifications/unsubscribe-auth/AAP65ek8BP9xnw8-Y-YDxpT4g0Iz3Nrkks5qxvRygaJpZM4KRlTz\n> .\n. Thanks for the tip. I'll look into this. I'm curious what those numbers are\npost-minification.\n\nOn Saturday, October 8, 2016, FUJI Goro notifications@github.com wrote:\n\n> To be honest, the number comes from webpack-bundle-size-analyzer\n> https://github.com/robertknight/webpack-bundle-size-analyzer and I have\n> no investigation on the details of the analyzer.\n> \n> It says:\n> \n> node_modules/.bin/webpack --config config/webpack.config.js  --json | webpack-bundle-size-analyzer\n> \n> ...\n> velocity-react: 91.18 KB (1.99%)\n>   lodash: 67.87 KB (74.4%)\n>   <self>: 23.31 KB (25.6%)\n> ...\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-252413708,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAP65ZjVbWw-57X7PozMuAOYRDh93y4vks5qx19dgaJpZM4KRlTz\n> .\n. Not sure what's going on in your node_modules, but having 2 different\nversions of a library that are included independently is supported by NPM.\nvelocity-react should have its own copy of lodash installed for it.\n\nOn Wednesday, October 12, 2016, Anthony Da Mota notifications@github.com\nwrote:\n\n> I this branch gonna be merged ? I'm having lots of problems with the\n> lodash dependencies, as my project rely on 4.X (npm is installing the 3.X\n> version for the velocity-react module, but it's still failing)\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-253173325,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAP65Ym6WuWdNG87zRluVAcZYCdmk6C7ks5qzLIhgaJpZM4KRlTz\n> .\n. File size is one concern (but can go both ways; I'm not sure what the\nrelative usage of lodash v3 and v4 is in the wild. Fabric is I believe\nstill on v3), but if you're having JS errors that's some other problem,\neither with the current state of node_modules or something you're doing in\nwebpack. NPM fully supports having separate versions of dependencies.\n\nOn Tue, Jan 24, 2017 at 5:27 AM, Vladimir Dralo <notifications@github.com>\nwrote:\n\n> I also have problem with lodash. My project uses version 4 ofc, and I have\n> conflicts because of this dep\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-274765429>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65UXOG7-0nwXPEYY35rdqztbJjed_ks5rVdIsgaJpZM4KRlTz>\n> .\n>\n. @STRML Curious. Where is `resolve.modules` being set? Is there a reason it doesn\u2019t include the default `\"node_modules\"`?. What's the ordering in `resolve.modules`? is `\"node_modules\"` first?\r\n\r\n. @STRML In that case I would recommend following the example here: https://webpack.js.org/configuration/resolve/#resolve-modules\r\n\r\nand using `__dirname`, as relative paths in `resolve.modules` are treated differently from absolute paths.. The reason is that I'm not interested spending my time testing and doing a release to work around others' non-standard module resolution rules. velocity-react's use of lodash 3 is entirely within spec. . Right, I didn't mean to imply that it's just you who's having module resolution problems since, as you saw from the other responses to this issue, it's not just you. I get frustrated that every few months I have to respond to folks whose setups can't handle a very straightforward relative `node_modules` include which is why, TBH, I'm acting a little bitchy about this.\r\n\r\nIn general I don't update modules just for kicks. For utility stuff like this, I'd rather stick with something that I know works than chase updates.\r\n\r\nThe only argument interesting to me is file size, except that even that's predicated on more folks using 4 than 3 in production, and the site that this library was built for originally is still on 3.. I'd recommend checking and seeing what's installed under\nvelocity-react/node_modules and poking in your lock file to see what it\nsays about lodash. Sounds more like your modules are not installed\ncorrectly rather than a webpack config aliasing lodash or using a\nnon-standard module resolver.\n\nOn Sun, Nov 5, 2017 at 3:00 PM, Vincent Lecrubier <notifications@github.com>\nwrote:\n\n> Just coming here to say that I got the same bug, caused by this dependency\n> on lodash 3. I do not use velocity on my project, it is a dependency of a\n> react-storybook, and it is really annoying that my project dev experience\n> is hampered by this.\n>\n> Module not found: Error: Can't resolve 'lodash/object/omit' in '/xxx/node_modules/velocity-react'\n>\n> @finneganh <https://github.com/finneganh> , do you have any pointers to\n> where react-storybook is using a non standard webpack setup ? Basically,\n> where can I complain about this bug, if not here ?\n>\n> Sorry for the tone, but yeah, I just think you might not realize the\n> impact of your decision.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google-fabric/velocity-react/pull/134#issuecomment-342000498>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65ek-k5Uwtn26OBDDZDhbSXfPhIQDks5szhPAgaJpZM4KRlTz>\n> .\n>\n. Aha, interesting. Good find. I can probably figure out how to work around that in how `VelocityTransitionGroup` generates its `complete` function.\n. Yeah, you'd need to do something tricky to handle the class coming in later, which would be dependent upon whatever you're using to do lazy loading.. I believe the stagger option has to be passed in the `enter`/`exit` props as that\u2019s how it gets passed to the Velocity options argument.\n. See the \"On Demand\" section of the demo. You'll want to call `runAnimation` on the component after you detect the increment. See the \"Interruption Behavior\" options for ways to handle when the animation calls overlap.\n. Can you be clearer about what you're doing and what error you're seeing?. I think this will be fixed in the next release, which fixed the undefined `forEach` problem.. I'd recommend not doing the queue stuff but instead change all the properties in one call. There is a somewhat undocumented way you can specify per-property easing with `registerEffect`, which you can see an example of here: https://github.com/julianshapiro/velocity/blob/master/velocity.ui.js#L541. Sounds like you need to check your dependencies, and possibly re-build your node_modules directory.. You need `runOnMount={true}`. Thanks for the fix!. If you use registerAnimation you can make an animation with sequential\nsteps. The syntax of nested arrays is a bit tricky, so check the Velocity\ndocs for how to do it.\nOn Thu, Dec 15, 2016 at 3:39 AM Martin <notifications@github.com> wrote:\n\n> Is there a way to queue up multiple animations like vanilla Velocity does\n> with calling it multiple times or chaining the promises?\n>\n>\n> I'd like to transform my css animation that is a multistep keyframe\n> animation to a component and run this on mount.\n>\n>\n> @keyframes dash {\n>\n>   0%{\n>\n>     stroke-dasharray: 1,200;\n>\n>     stroke-dashoffset: 0;\n>\n>   }\n>\n>   50%{\n>\n>     stroke-dasharray: 89,200;\n>\n>     stroke-dashoffset: -35;\n>\n>   }\n>\n>   100%{\n>\n>     stroke-dasharray: 89,200;\n>\n>     stroke-dashoffset: -124;\n>\n>   }\n>\n> }\n>\n>\n>\n> With Velocity i would just call it 3 times on the DOM object and give the\n> last animation loop: true so that it runs infinitely. I know i can call\n> runAnimation but with this i can't queue multiple different animations. I\n> could probably change the components probs 3 times in a row, but this seems\n> inelegant. Whats the best way to achive this with your components?\n>\n>\n>\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/154>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65VeFuiVk6JBFpEy75qxsVHzi57hiks5rIPytgaJpZM4LN15Z>\n> .\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n. The first line should be:\r\n\r\n```\r\nimport { VelocityComponent } from 'velocity-animate';\r\n```. `velocity-react` doesn\u2019t expose a way to do \"stop\" directly. Animations are stopped implicitly by changing the `animation` property. You could also try to expose \"stop\" the way that `runAnimation` is from `VelocityComponent` instances.. Check velocity-react inside your node_modules folder. A copy of lodash v3\nshould be in there.\n\nOn Tue, Jan 24, 2017 at 4:59 AM, Neal van der Valk <notifications@github.com\n> wrote:\n\n> I just installed this library but receive the following errors when\n> requireing the package.\n>\n>    - NPM v 3.10.9\n>    - My package.json file\n>    <https://gist.github.com/nealoke/9911fd0ecc538ee4d964542205be31d6>\n>\n> Imported like so import VelocityComponent from 'velocity-react';\n>\n> ERROR in ./~/velocity-react/velocity-helpers.js\n> Module not found: Error: Cannot resolve module 'lodash/lang/isObject' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-helpers.js 4:12-43\n>\n> ERROR in ./~/velocity-react/velocity-component.js\n> Module not found: Error: Cannot resolve module 'lodash/collection/forEach' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-component.js 37:11-47\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/collection/forEach' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 46:11-47\n>\n> ERROR in ./~/velocity-react/velocity-component.js\n> Module not found: Error: Cannot resolve module 'lodash/lang/isEqual' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-component.js 38:11-41\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/lang/isEqual' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 47:11-41\n>\n> ERROR in ./~/velocity-react/velocity-component.js\n> Module not found: Error: Cannot resolve module 'lodash/object/keys' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-component.js 39:8-37\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/object/keys' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 48:8-37\n>\n> ERROR in ./~/velocity-react/velocity-component.js\n> Module not found: Error: Cannot resolve module 'lodash/object/omit' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-component.js 40:8-37\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/object/omit' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 49:8-37\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/collection/each' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 44:8-41\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/object/extend' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 45:10-41\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/collection/pluck' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 50:9-43\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/160>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65aXW7PBxlY3k9hgWvidZ6zAzU85oks5rVctkgaJpZM4LsEHb>\n> .\n>\n. Are you bundling with something like webpack? Are there any plugins or\ntransforms running that would affect lodash?\n\n\nOn Tue, Jan 24, 2017 at 10:36 AM Neal van der Valk <notifications@github.com>\nwrote:\n\n> @finneganh <https://github.com/finneganh> it is, but still doesn't\n> resolve the error though? :/\n>\n>\n>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/160#issuecomment-274838711>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65XXR5VaCVJFv-LrPsDFlUJ5T0BXvks5rVhptgaJpZM4LsEHb>\n> .\n>\n. My guess is that the resolveLoader is overriding the default relative\nnode_modules resolution. So webpack is forcing velocity-react to import\nfrom your base node_modules rather than starting at its internal\nnode_modules.\n\nOn Tue, Jan 24, 2017 at 12:03 PM, Neal van der Valk <\nnotifications@github.com> wrote:\n\n> @finneganh <https://github.com/finneganh> yes I am using webpack but\n> haven't ran into this sort of issue with my other imported libraries. This\n> is a gist of my webpack\n> <https://gist.github.com/nealoke/814acb32fcca8645bf21d1214c6f8fb3>, be\n> aware that my folder structure is a bit different.\n>\n> *Root*\n>\n>    - app\n>    - src\n>    - tools (here are my webpack / gulp / node_modules / bower /...)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/160#issuecomment-274867898>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65bL21HQAxzX0psaYa6bvV1lEAJKRks5rVi7fgaJpZM4LsEHb>\n> .\n>\n. Not sure. I guess I'd try to avoid setting a resolveLoader at all, but you'd know better what led you to using it.. `VelocityTransitionGroup` will run its animation when its child unmounts. I suspect you just need to rearrange things so that your `VelocityTransitionGroup` is sticking around, and its children are the only ones entering / leaving.. Are you trying to animate the SVG or just have the SVG in an animated component?\r\n\r\nI think I used react-svg-loader at Fabric, but never tried to animate the internals of a sprite.. Right, hidden components will still take up space.\r\n\r\nI'd recommend using `VelocityTransitionGroup`. That will let you run an animation when the component is unmounted. Just change your logic to no longer render the component, and the library will animate it away.. Check your `node_modules` (perhaps by deleting them and doing a clean `npm install`). This error can come up when you have 2 copies of React loaded.. The case you're looking for is npm installing a version of React inside the\nvelocity-react/node_modules directory, which would be different from the\nreact installed in your top level node_modules.\n\nWhat version of React is in your package.json?\n\n\nOn Thu, Jan 26, 2017 at 9:53 PM .modernator <notifications@github.com>\nwrote:\n\n> @finneganh <https://github.com/finneganh> No, it's not. I just removed\n> and reinstalled node_modules but still got same error. If I loaded React\n> twice, then it must be failed with same error message without using this\n> module, but it's not. Replace the code to *not using* this module not\n> causes error, worked fine.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/164#issuecomment-275577714>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65ZzTZUGQTvidG8f6s06LsNrgHD3Jks5rWVwdgaJpZM4LuVIP>\n> .\n>\n. It should be the case that you want the `animation` prop to be `\"scroll\"`, then pass the `duration` and `easing` as props to `VelocityComponent`.\r\n\r\nFrom the `VelocityComponent` docs: \u201cUnrecognized properties are passed as options to Velocity (e.g. duration, delay, loop).\u201d. Does leaving off the `loop` param change anything?. You\u2019ll need to make sure that you\u2019re using Velocity 1.2.3 or later. I'm not sure how materialize is bringing it in, I couldn't obviously see from their code. You could poke around in Velocity to see how it attaches to `window`; I\u2019m not sure if requiring a later Velocity would overwrite the earlier one globally.. Are you importing Velocity directly? The library should avoid this issue for itself through `lib/velocity-animate-shim.js`. Maybe look in there and see if you can tell why it's trying to do the real import server-side. . Only import velocity and velocity.ui in your client code\u2019s entry point. Use `velocity-react` elsewhere in your components and it should avoid loading velocity on the server.. Looking at your code, I get the impression that on delete you\u2019re removing the `VelocityTransitionGroup` as well. You\u2019ll need to keep it around.\r\n\r\n`TransitionGroup`s are able to run for their children that leave the DOM, but if they themselves are removed then they\u2019re just gone.. I can\u2019t quite tell from your code. What are you seeing and what are you expecting?\r\n\r\n`VelocityTransitionGroup` is for when you have direct children entering and leaving the DOM, which doesn\u2019t seem to be the case with `GalleryManager`, at least in the code that you\u2019ve provided.. If all the elements are added to the `VelocityTransitionGroup` at once then you don\u2019t need `targetQuerySelector`, just `stagger`.\r\n\r\nThis is shown in the \u201cAdd 5 Rows\u201d part of the demo: https://github.com/twitter-fabric/velocity-react/blob/master/demo/examples/scrolling-group.jsx\r\n\r\nAlso note that `targetQuerySelector` is only for `VelocityComponent`, not `VelocityTransitionGroup`.. I can\u2019t reproduce this this morning, with npm or yarn. Are you still seeing the issue?. React is reconciling that to be the same `<Image>` component. Use a different `key` to force React to treat the `Image` as distinct.. Error message seems to indicate you have something else running at port 8080 on that machine.. You can see in the demo code how to use `registerEffect` to define animations in your own codebase.. It sounds like multiple React versions on the page so certainly double-check that in your node_modules. Other than that I\u2019m not sure.\r\n\r\n`velocity-react` doesn\u2019t use refs itself, though `ReactTransitionGroup` does.. What does the code look like?. I suspect that the issue is the `VelocityTransitionGroup` is being removed from the DOM while the transition around the `Image` is still going on.\r\n\r\nYou should in general have your `VelocityTransitionGroup`s be stable on the page, and only their contents appear and disappear.. You'll need to do your own `window` detection around a `require` for velocity.ui.\r\n. You may be able to start the tab with display: none, and I believe that Velocity may show it automatically.. You could give it a try but you'll probably have to do some digging yourself to see how the tabs are interacting with velocity.. The velocity animations don't run at all on the server. You'll want to display:none the element yourself and let velocity show it on the client.. Velocity doesn't have a `slideLeft` built in. The UI pack has `transition.slideLeftIn` and `transition.slideLeftOut` as preregistered effects, however.\r\n\r\nhttp://velocityjs.org/#uiPack. Thanks for the heads up. Will I think also move\nto reactjs/react-transition-group in the next release.\n\n\nOn Tue, Apr 11, 2017 at 2:04 AM, Zebra Flesh <notifications@github.com>\nwrote:\n\n> Using VelocityTransitionGroup with react 15.5 generates the following\n> deprecation notice:\n>\n> Warning: Accessing PropTypes via the main React package is deprecated. Use\n> the prop-types package from npm instead.\n>\n> Replacing React.PropTypes with PropTypes (via import PropTypes from\n> 'prop-types';) in VelocityComponent and VelocityTransitionGroup should\n> resolve this issue.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/183>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65ZBl_GzobEj7bWJTEjYlUY1BGHpWks5ruxf5gaJpZM4M5p_g>\n> .\n>\n. #191 has fixes for this if you're able to try it out. I had to change some of the internals and also add a prepublish step to this library in order to use ES2015 classes so i want to do a careful rollout.. Fixed in v1.3.0. Thanks for your patience!. Thanks for the heads-up! I'm planning on fixing this fairly soon.\n\nOn Wed, Apr 12, 2017 at 12:05 PM, James Sear <notifications@github.com>\nwrote:\n\n> Just a heads up\n>\n> warning.js:36 Warning: VelocityComponent: React.createClass is deprecated and will be removed in version 16. Use plain JavaScript classes instead. If you're not yet ready to migrate, create-react-class is available on npm as a drop-in replacement.\n>\n> https://facebook.github.io/react/blog/2017/04/07/react-\n> v15.5.0.html#migrating-from-react.createclass\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/184>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65U49InNCOGYUN91Zw8lFQd1LYEAsks5rvPZjgaJpZM4M7ov1>\n> .\n>\n. #191 has fixes for this if you're able to try it out. I had to change some of the internals and also add a prepublish step to this library in order to use ES2015 classes so i want to do a careful rollout.. Fixed in v1.3.0. Thanks for your patience!. This is likely a consequence of `VelocityComponent` using `stop` when switching animations. You could add a config property to change that to `finish` or allow it to `queue`, the way that the `runAnimation` method takes options.\r\n\r\nSee the demo for how these behaviors differ when calling `runAnimation`.. The same sort of configuration that is used in `runAnimation` could be\nadded to the props for VelocityComponent, if you're interested in sending\nin a PR. It's all a workaround for slideUp/slideDown's implementation.\n\nOn Tue, Apr 18, 2017 at 9:35 AM, Robin <notifications@github.com> wrote:\n\n> Ah I see how the demo does it. But this feels more like a workaround than\n> the way it should be to be honest.. This forces me to directly use the\n> Velocity API instead of using this wrapper in a nice way..\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/185#issuecomment-294846161>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65Xqb1JCOAGk0UE_zFiDvMaLVfim-ks5rxLwrgaJpZM4NAEoA>\n> .\n>\n. Yep, I think we're on the same page.\n\nOn Tue, Apr 18, 2017 at 10:01 AM, Robin <notifications@github.com> wrote:\n\n> @finneganh <https://github.com/finneganh> wouldn't it be better to add a\n> prop to the velocity component? That way in componentWillUpdate we can\n> check for that prop. If prop==='stop' then stopAnimation, otherwise\n> finishAnimation.\n>\n> What do you think?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/185#issuecomment-294853991>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65aPsI1m_ax7XF0Li_LQL9mgCs4AJks5rxMJLgaJpZM4NAEoA>\n> .\n>\n. I'm working on updating the demo to be hosted on Glitch. Will see if there's a good place to put it in then.. Cool, this is now live.. Interesting. I believe that the Promise bits have been added since velocity-react was written.\r\n\r\nI can take a look. This will probably help if things like stop / finish are actually asynchronous, but not if the Promises are just an alternative to the `complete` callback for animations.. Thanks! I'll aim for a new release of this tonight.. The `leave` animation won\u2019t run unless you remove the children from the `VelocityTransitionGroup` element.. Thanks for submitting, but I'm switching to ES2015 classes instead. Also, the `isMounted` checks can't be removed without replacing them with something.. Demo. Not bothering to figure out a classes way of doing the\nreact-tween-state mixin right now.\n\nOn Mon, Apr 24, 2017 at 9:55 AM, Anthony Barone <notifications@github.com>\nwrote:\n\n> *@tonybaroneee* commented on this pull request.\n> ------------------------------\n>\n> In demo/examples/toggle-box.jsx\n> <https://github.com/twitter-fabric/velocity-react/pull/191#discussion_r112951663>\n> :\n>\n> > @@ -34,7 +35,7 @@ var EFFECTS = [\n>    'perspectiveRight',\n>  ];\n>\n> -var ToggleBox = React.createClass({\n> +var ToggleBox = createReactClass({\n>\n> Why is this component using the legacy shim instead of getting the ES6\n> class conversion treatment?\n>\n> \u2014\n> You are receiving this because you were assigned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/pull/191#pullrequestreview-34303068>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65XGCvbrXi8Kw2pL1dVsDJiAJ5PLHks5rzKm-gaJpZM4NFZW_>\n> .\n>\n. @danielo515 Out now as v1.3.0.. Happy to consider a pull request.. Fixed in v1.3.0. Thanks for your patience!. FF to open a pull request!. Yeah, this is a bit complicated because slideDown / slideUp are custom animations in Velocity (in order to handle the height issue) so they can't be easily composed with the CSS animations.\r\n\r\nI think what you have is reasonable. . Awesome, thanks!!!. Cool. I should be able to push this out tomorrow. I wonder how many folks are on pre-15.. I'll do a patch release. I admit to not being overly pedantic about semver and dependencies.. Especially since the only reason to upgrade is to support more recent versions of React.. You're not forced to upgrade velocity-react. That being said, I think anyone developing apps without using a dependency lock file is asking for trouble already.. Thanks for having my back on the peer dependencies. It's clearly something I should have paid more attention to. Yay, open source!. Thanks for the fix!. This means you can do:\r\n\r\n`<VelocityComponent animation=\"transition.slideLeftIn\" duration={500} delay={1000} />`\r\n\r\n\u201cunrecognized\u201d in this case means props that aren\u2019t handled directly by `VelocityComponent`.. Eeep. Good catch. Thanks!. Fixed in v1.3.3. You can chain animations using UI pack and `VelocityHelpers.registerEffect`. The API syntax is a little wonky, just pass additional elements in the `calls` array property when you register the animation. Velocity will run the first animation, then run the second. That will let you chain the two translates without any explicit effort on your part.. Here\u2019s an example of `registerEffect` with a single call: \r\n\r\nhttps://github.com/twitter-fabric/velocity-react/blob/master/demo/examples/flap-box.jsx#L18\r\n\r\nadd more to the `calls` array to chain effects.. You should define the two animations outside of your render method, one for collapse and one for not-collapsed, and then use `this.props.collapse` to choose which one to pass as `animation`.. I'm open to PRs, but won't implement this personally.\r\n\r\nNote that most of the typing would actually come from Velocity.js, since these components pass through many of the props.. Thanks for putting this together. I'll try and take a look and see about getting it in. I use Flow rather than TypeScript in my own projects, so I'd have to get familiar with it first.. What effect are you trying to achieve?. That would be tricky. Calling `Velocity.stop` on the animated elements would stop them from animating. But, it would also cause the `TransitionGroup` to keep them around because `stop` keeps the `complete` callback from firing, which is how `VelocityTransitionGroup` can tell `TransitionGroup` to finally remove the element.\r\n\r\nYou might have better luck wrapping each image in a `<VelocityComponent>`, which can have its animation stopped (by setting its `animation` prop to `null`).. Is the issue here w/ velocity-react > 1.1.4 or react-transition-group >= 1.2.0?. `runAnimation` can be called externally with a config. See the demo.. I suppose it could, but consolidating that isn't a huge priority.. I think that this question is outside the scope of velocity-react issues.. Pretty sure that this wouldn't solve any bundle size issues as now the 4.x lodash modules may be coming from different places. \r\n\r\nI maintain that in a correctly-functioning build setup the current use of lodash 3 should not cause a problem. . For starters, just call `registerEffect` at the top of the file, not each time through `render`. \r\n\r\nYour `calls` property needs an extra set of `[]`s. Yes, it\u2019s odd, but that's how `Velocity.RegisterEffect` wants it. See the comment at the top of the velocity-helpers.js file.. Any reason why you think that this is important? The v1 branch is still being maintained. . Yeah, that's the big question. If not, I'll work on getting this upgraded,\nsince I want to use 16, too, but working through any timing changes with\nthe new version RTG implementation will likely be a pain.\n\nOn Sat, Sep 16, 2017 at 6:22 AM Luke Page <notifications@github.com> wrote:\n\n> Ok, sorry I didn't realize that.. if v1 will support react 16 it's not\n> important to me.\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/224#issuecomment-329959910>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65TJdCsMsPkTFTCROnN_NM5puiRHZks5si6FMgaJpZM4PZxWq>\n> .\n>\n. Ok, I\u2019ll have a look.\n\nWe still need a custom TransitionGroup subclass to coordinate transitions\nacross elements (this lets us use Velocity\u2019s stagger) but I think that the\nnew API can be adapted to that. The implementation won\u2019t be in the form of\npublic Transition elements.\n\nOn Wed, Sep 27, 2017 at 5:03 PM Jason Quense <notifications@github.com>\nwrote:\n\n> I'm gonna backport the peer dep range update to v1 but at this point i'd\n> consider v1 deprecated, i have no idea when it is going to stop working and\n> v2 contains a bunch of better stuff that should make implementation easier!\n> let me know if ya'll need info\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/224#issuecomment-332654536>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65UYQbiena7MmPw4pd0SZvhzRPm8rks5smrgKgaJpZM4PZxWq>\n> .\n>\n. Have you noticed any issues at 1.2? I know at least someone else on here downgraded back to 1.1. . ![giphy](https://user-images.githubusercontent.com/260837/30888090-a24703cc-a2ec-11e7-9859-cae2ca3bf8c4.gif)\r\n. Not sure quite what effect you\u2019re going for, but using VelocityTransitionGroup to switch between two views is just going to be tricky. During transition, you\u2019ll likely have both views appearing, messing up the parent height. \r\n\r\nGood luck in debugging. I tend to slow the animations way down to see what\u2019s going on in detail. \r\n\r\nI have done a cross fade in the past, between two views of the same height. The trick is to set the leaving one to position absolute so it can exist in the same space as the entering one. . Thanks! I hadn't realized that they changed the org.. Not something I\u2019m interested in right now. If this package ever needs a large overhaul (like switching to the 2.0 API for react-transition-group) I\u2019d probably tackle other dependency updates at that point. . Your problem likely lies elsewhere. With a well-configured npm and resource bundler, the version of lodash that velocity-react uses should not impact any uses of different versions of lodash in your app.\r\n\r\nOr feel free to just use your fork. This repo doesn't change much. . Sure, should be able to get this out soon. AFAIK react-transition-group\ndidn\u2019t make any code changes for 16 support, so the benefit is just\nclearing up the peer dependency warnings.\n\nOn Wed, Oct 11, 2017 at 5:25 PM DrGor <notifications@github.com> wrote:\n\n> Could you please update the package.json file with newer version of\n> react-transition-group ?\n> The version 1.2.1 supports React 16.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google-fabric/velocity-react/issues/229>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65Ue1oYBtkE2CgJ8pK-7NEWaQP85aks5srTJUgaJpZM4P2JlB>\n> .\n>\n. What do you have running that's looking at the project's babelrc?\n\nvelocity-react ships from npm transpiled to ES5. You shouldn't need to\nre-babel it.\n\nOn Tue, Oct 17, 2017 at 9:25 AM, Sam Hastings <notifications@github.com>\nwrote:\n\n> Importing the velocity-react module is causing the following error:\n>\n> ERROR in ./node_modules/velocity-react/index.js\n> Module build failed: ReferenceError: Unknown plugin \"transform-object-rest-spread\" specified in \"/path/to/project/node_modules/velocity-react/.babelrc\" at 0, attempted to resolve relative to \"/path/to/project/node_modules/velocity-react\"\n>\n> Looking in the node_modules directory, the expected\n> babel-plugin-transform-object-rest-spread directory is indeed missing.\n>\n> I'm using NPM 5.3.0 and Node 8.0.0.\n>\n> Here are the dev dependencies from my project\u2019s package.json:\n>\n> \"autoprefixer\": \"^7.1.5\",\n> \"babel-core\": \"^6.26.0\",\n> \"babel-loader\": \"^7.1.2\",\n> \"babel-preset-env\": \"^1.6.0\",\n> \"babel-preset-react\": \"^6.24.1\",\n> \"css-loader\": \"^0.28.7\",\n> \"html-webpack-plugin\": \"^2.30.1\",\n> \"node-sass\": \"^4.5.3\",\n> \"postcss-loader\": \"^2.0.8\",\n> \"prop-types\": \"^15.6.0\",\n> \"react-router-dom\": \"^4.2.2\",\n> \"sass-loader\": \"^6.0.6\",\n> \"style-loader\": \"^0.19.0\",\n> \"velocity-react\": \"^1.3.3\",\n> \"webpack\": \"^3.8.0\",\n> \"webpack-dev-server\": \"^2.9.2\"\n>\n> I've tried deleting my node_modules directory and package-lock.json file\n> before running a fresh npm install but this hasn\u2019t fixed the issue.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google-fabric/velocity-react/issues/230>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65T1ViFFZnMAdui6zOpesN03EKvHdks5stKrmgaJpZM4P8Jb9>\n> .\n>\n. This is probably an underlying Velocity issue.\n\nOn Mon, Nov 27, 2017 at 4:13 PM Stephen Widom <notifications@github.com>\nwrote:\n\n> I'm using VelocityTransitionGroup as a tbody to animate new rows,\n> however, I find that there is no animation actually taking place. I've\n> referred to this\n> <https://github.com/google-fabric/velocity-react/issues/51> issue for the\n> proper attributes/properties, but here's the issue: with display:\n> \"table-row\", no animation takes place. The rows appear and disappear\n> suddenly. When I remove display: \"table-row\", the rows are animated\n> properly, but displayed as block, thus incorrectly. Let me know if I can\n> be any more insightful.\n>\n> <table id=\"players\">\n>                 <VelocityTransitionGroup enter={{animation: \"slideDown\", display: \"table-row\"}} leave={{animation: \"slideUp\", display: \"table-row\"}} component=\"tbody\">\n>                 {this.state.players.length > 0 && this.state.players.map((player) => (\n>                     <tr key={player.name}>\n>                         <td>\n>                             <i className=\"fa fa-fw fa-minus\" onClick={() => {this.decreaseCount(player);}}></i>\n>                         </td>\n>                         <td>\n>                             <i className=\"fa fa-fw fa-plus\" onClick={() => {this.increaseCount(player);}}></i>\n>                         </td>\n>                         <td className=\"name\">{player.name} </td>\n>                         <td className=\"count\">{player.count}</td>\n>                         <td>\n>                             <i className=\"fa fa-fw fa-user-times\" onClick={() => {this.removePlayer(player);}}></i>\n>                         </td>\n>                     </tr>\n>                 ))}\n>                 </VelocityTransitionGroup>\n>             </table>\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google-fabric/velocity-react/issues/232>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65RX0yv7Vzozg2dcSo9VsDlfMW3qgks5s6yXngaJpZM4QsTU8>\n> .\n>\n. @kevinrobinson can you peep?\n. @kevinrobinson also this\n. Fixed in the above release.\n. Check the error messages. You have to whitelist your SSH key explicitly due\nto twitter-fabric's new SSH security settings.\n\nOn Wed, Sep 23, 2015 at 9:01 AM, Kevin Robinson notifications@github.com\nwrote:\n\n> Approved.\n> \n> I'm not able to pull this particular repo anymore, I get a warning about\n> ssh keys. I mucked with my ssh setup yesterday so will have to fix that up\n> later today. I wants to see the emoji! They are a good motivation. :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/pull/8#issuecomment-142591940\n> .\n. Updated the crossfade component's `propTypes` and comment to explain about style and other things better. No longer passing `opaque` and `duration` down into the delegate.\n\nAlso added a `height: ''` to the `slideDown` so that things work right when you get extra clicky on the toggle.\n\nCommitting.\n. This should fix issue #6.\n. Are you running Node 0.10 or earlier? Sounds like some of the CSS libraries require at least Node 0.12: https://github.com/webpack/css-loader/issues/144\n. Interesting point.\n\nHaving the velocity-react components short-circuit out and not do anything on the server (including not requiring Velocity) I expect would be trivial.\n\nI would assume that in most cases the rest would just work; for consistency you'd want to \u201cfinish\u201d the Velocity animation as soon as the client was in play. While that has the potential for jumpiness, I think that in a lot of cases the \"end\" state for an animation matches the neutral rendering of the element, so you wouldn't notice.\n\nIs the short-circuiting something you're interested in putting together? If not I can take a look. I haven't done any isomorphic React, so if you could point me to a good toy starter project I could toss in a `VelocityComponent` and see what happens.\n\nCertainly being able to \u201cfinish\u201d an animation on the server would be ideal, to have the DOM match more correctly. I don't know how feasible that is or if it's on a roadmap. (cc: @kenwheeler)\n. @jamwaffles I think the `firstChild` error can come up if you don't have a child for the `VelocityComponent`. (Which is something that perhaps we should be tolerant of; though `VelocityComponent` has no DOM footprint of its own, and relies on a child to have a presence on the page.)\n. OK, I traced this out a bit. `VelocityComponent` plays fast-and-loose with `findDOMNode` to try and avoid having its own DOM footprint. This seems incompatible with server-side rendering.\n\nThe alternate trick of trying to add a `ref` to the child by cloning it also seems to fail in my testing of 0.13, possibly also because of `VelocityComponent`\u2019s lack of its own node.\n\nMy plan is to get this package working with 0.14, then see if the problem persists or if any new solutions present themselves.\n\nAs a last resort, we could make `VelocityComponent` take an optional prop that would cause it to render its own DOM node (a la `ReactTransitionGroup`) and that would likely smooth this over.\n. OK, pals. Looks like my investigations above were ERRONEOUS. Turns out (and I need to tattoo this to my trackpad or something), `npm link` and React do not play well together. That is, using `npm link` to pull in a dev version of `velocity-react` from a local repo does not work because `velocity-react` will resolve a different copy of `react` than the main app.\n\n@jamwaffles I believe this accounts for the `firstChild` error the two of us saw, and later \u201cOnly a ReactOwner can have refs\u201d errors I found.\n\nI'll close this since it's fixed on master, and get out a 1.0.1 release that includes the shim from #22.\n. Whoops. Thanks so much!\n. Hrm. What does this fix for you?\n\nThis breaks things from running `npm run demo` for me from the root source directory (/build/bundle.js not found in the webpack server). \n\nIs there a configuration or path that works in both places?\n. Thanks for bringing this to my attention. That `react-dom` bit will be a bit annoying; I think I'll cut a branch for the RC until it's released, and then I think we'll need to do a hard cut over with a 1.1\\* release or somesuch.\n- = might have to break out my semver docs\u2026 should it be 2.0 when the peerDependencies change so forcefully?\n. Noticed that React 0.14 is now official: http://facebook.github.io/react/blog/2015/10/07/react-v0.14.html\n\nWill look into getting support going in the very near term.\n. Now fixed in v1.1.0 of velocity-react.\n. Is this a case where you have Velocity already as a dependency in your project? In that case, does `npm dedupe` do what you need to collapse the dependency tree?\n. FWIW the demo app uses webpack, though it's obviously quite toy. We have this at the top of the top-level component:\n\n```\nrequire('velocity-animate');\nrequire('velocity-animate/velocity.ui');\n```\n. Hrm. I noticed that the demo isn't the best case because it doesn't NPM-in the `velocity-react` bits.\n\nRegardless, in a separate toy project I still couldn't repro. I see that in `./node_modules/velocity-react/node_modules` that there's no `velocity-animate` package of its own. NPM didn't install one there, and it's instead letting the one in `./node_modules/velocity-animate` be used.\n\nThis is with NPM 2.14.4.\n\nMy package.json is:\n\n```\n{\n  \"name\": \"velocity-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"react\": \"^0.13.3\",\n    \"velocity-animate\": \"^1.2.3\",\n    \"velocity-react\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^5.8.25\",\n    \"babel-loader\": \"^5.3.2\",\n    \"react-hot-loader\": \"^1.3.0\",\n    \"style-loader\": \"^0.12.4\",\n    \"webpack\": \"^1.12.2\",\n    \"webpack-dev-server\": \"^1.12.0\"\n  }\n}\n```\n\nAnd do the `require` for `velocity-animate` and `velocity-animate/velocity.ui` in an app.js, followed by a `require` for the `MainComponent` that `require`s `velocity-react/velocity-component`.\n. Here's the gist of my packaging test: https://gist.github.com/phopkins/d127287ffa950d3b0d2c\n. Closing, since I think `npm dedupe` pretty much solves this. Please re-open with more info if that's not the case.\n. Thanks for looking into this. I'll use this as the basis for the 0.14 support.\n\nI think it's still best-practice to keep the React stuff as `peerDependencies` to avoid duplicating Reacts, so I'll keep that pattern.\n. Closing, integrated this into #27. Thanks again!\n. Happy news! It should be secretly already there. Any `props` you pass to `VelocityComponent` that it doesn't interpret itself get passed in the options hash to Velocity. So, if you put a [`complete`](http://julian.com/research/velocity/#beginAndComplete) property on `VelocityComponent` it should get called.\n\nThe [Velocity docs](http://julian.com/research/velocity/) have a list of all the options.\n. P.S.: Glad to hear you're liking it!\n. This is a bug in velocity-react. `ReactTransitionGroup` clobbers the `complete` callback. I can look into fixing this, though if anyone wants to take a go at it LMK.\n. Put up #53 for this. Anyone who wants `complete` for `VelocityTransitionGroup` care to try it out?\n. Fixed in 1.1.2, now published.\n. Unfortunately, this is not enough right now. Closing this, will revisit after 0.14 support.\n. Re-opening because this does at least fix `VelocityTransitionGroup`.\n. On further testing, I believe that this fixes #14, at least for getting things to not crash.\n. See https://github.com/twitter-fabric/velocity-react/pull/22 for my version of this. (It's better to short-circuit `VelocityTransitionGroup` at the `childFactory` level.)\n\nNevertheless, I don't think this solves the entire problem, which is that `React.findDOMNode` in `VelocityComponent` does not seem to work on the client when running from a server-rendered DOM tree.\n\nHave you run into that, and, if so, do you have a solution? If so I can merge #22 and we can take it from there.\n. Can you pull the branch patch/shim-for-server-rendering and check w/ that? If so I can get it in.\n\nWhich components are you using? Is the `_getDOMTarget` method of `VelocityComponent` running over server-generated components once the client boots up?\n\nI'm curious to seeing what the conditions are that make this succeed or fail. I grabbed [https://github.com/RickWong/react-isomorphic-starterkit] and checked out the last 0.13.3 version and am plagued by `VelocityComponent` not working on the client as described in the original #14 report.\n. @mars Ah, ok. I think that's expected. I'll close this PR and merge the other one, and see about getting a release up.\n\nThanks for testing!\n. Good idea. I'll look into this.\n. That would be super awesome. Shouldn't be tooo much of a thing to export\nthe demo bundle in some fashion. But I suppose there's always wrinkles.\n\nOn Wed, Oct 7, 2015 at 4:47 PM, Joseph Furlott notifications@github.com\nwrote:\n\n> @phopkins https://github.com/phopkins I would be happy to get this\n> running on github pages for the repo if you want me to\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/25#issuecomment-146322912\n> .\n. Shiny! Made the `gh-pages` branch.\n\nIdeally, I think we should check any code / location changes in to master\n(i.e. make the demo index.html work from wherever) and then just have\ngh-pages for the pre-built `build` directory.\n\nDid you run into anything where the webpack-dev-server doesn't like\nreferencing the `bundle.js` file from `build`? I'd like to figure out how\nto sort that out if it's possible. I can look at it if it's out-of-scope\nfor you. (This came up in another bug, where webpacking and just opening\nthe `index.html` file didn't work, but running through the dev server did.)\n\nOn Fri, Oct 16, 2015 at 9:10 PM, Joseph Furlott notifications@github.com\nwrote:\n\n> Sorry for the delay @phopkins https://github.com/phopkins but I just\n> got it up running on my fork on the gh-pages branch. I added a build task\n> which the same as the demo script but it uses webpack instead of the dev\n> server. Additionally, I broke out the demo/index.html and put it in the\n> root with updated paths.\n> \n> I had to remove build from the .gitignore so that the files would be\n> available as well in version control. Obviously this branch should never be\n> merged into master.\n> \n> It is visible here http://jmfurlott.github.io/velocity-react/\n> \n> @phopkins https://github.com/phopkins if you want me to merge this in,\n> I think I need you to create a gh-pages so I have a branch that I can\n> make a PR on\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/25#issuecomment-148873558\n> .\n. Here's the PR that was put in regarding `build/bundle.js` vs. `bundle.js`: https://github.com/twitter-fabric/velocity-react/pull/16\n\nI'm ok with index.html in the root for the demo. Could just `.npmignore` it out.\n. Cool. Thank for sorting this out. I'll merge the PR to the `gh-pages`\nbranch, which will get the demo up there, and then I can look into the\npaths and keeping the static version consistent with the demo going forward.\n\nOn Mon, Oct 19, 2015 at 2:32 PM, Joseph Furlott notifications@github.com\nwrote:\n\n> In the gh-pages you don't need to start a server in order to view the\n> index.html. Making that possible is essentially all my PR is. You have to\n> run npm run build, which executes and just spits out build/bundle.js (but\n> this path could be anything), and then the index.html just loads in that\n> bundle. Obviously nothing is watching the changes or anything, but it works\n> completely statically\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/25#issuecomment-149306325\n> .\n. Thanks to @jmfurlott, the basic demo is accessible at: http://twitter-fabric.github.io/velocity-react/\n. I think the best way to achieve a \"chaining\" effect with these components is to just use a `delay` on the 2nd animation that matches the `duration` of the first. (You can use a constant or something to keep the 2 values in sync.)\n\nFor your problems above, you need to decide whether you're doing your widths in JS with styles/animations or in CSS with classes. Mixing the 2 will likely give you popping issues like you describe. (You may want to consider CSS `transition`s, for example, which should play well with the classes.)\n\nNot sure what you're trying to achieve on the right side, but bear in mind that if 2 elements need to take up the same space, absent negative margin shenanigans you'll need some amount of absolute positioning. The `LoadingCrossfadeComponent` in the demo code may give you an effect you want, though bear in mind it can be slightly finicky to get working.\n\n(Closing this as it is not an issue in `velocity-component`)\n. Yeah, that error commonly means that you have 2 React instances. velocity-react uses peerDependencies so it typically doesn't bring in its own React. You should try `npm dedupe` to prune your tree down to one React. \n\nNote that this can also come up if you are `npm link`ing to a velocity-react directory that has all its dependencies installed. To test locally, you'll need to `npm pack` and then `npm install` the archive it creates. \n. I haven't much used react-router myself. Can anyone else chime in here?\n\nThe one I'm most familiar with is https://github.com/larrymyers/react-mini-router, which should work pretty trivially with `VelocityTransitionGroup`. Just call `renderCurrentRoute` as a child of `VelocityTransitionGroup`.\n. Thanks, @mars!\n\nI'll also add that for stuff like this, where your `VelocityTransitionGroup` has single elements that are coming and going, you may need to use absolute positioning during the transition to get overlap right. Take a look at the `LoadingCrossfadeComponent` in the demo source code to see one way of doing this.\n. I think what you want is covered by Velocity, which allows for a start value when tweening:\n\n```\n<VelocityComponent animation={{top: [0, 100], opacity: [1, 0]}}>\u2026</VelocityComponent>\n```\n\n(It's a bit counter-intuitive in that the second value in the array is the start, and the first is the end. It also only works for linear tweens AFAIK.)\n\nMake sure that this is what you want, though. If you're changing animations back and forth, you'll get a smoother effect without fixing the start value.\n. Awesome, thanks!\n. Thanks!\n. Ha! Thanks for catching this.\n. Was this in error?\n. Could you provide more details about what you\u2019re trying to do? How does the `VelocityTransitionGroupChild` get the custom `props` to begin with?\n\nI\u2019m not following how you couldn\u2019t put the `props` on the child elements when you create them as children of `VelocityTransitionGroup` initially.\n. The reason the child animation is not running is because, to React, the inner `VelocityTransitionGroup` and its child are appearing  in the DOM together. By default, the animations only run on children that enter/leave an existing TransitionGroup.\n\nTo get the behavior you want, add `runOnMount={true}` to the inner `VelocityTransitionGroup` so that it will animate in this circumstance.\n\nWhile there\u2019s no cross-element chaining as you see, it should be fairly easy to just add a `delay` on the inner animations so that they start when you want them to. (This gives you the flexibility to tweak things so that the fade in overlaps with the slide down if it\u2019s appropriate.)\n\nIt's also possible to use custom UI Pack effects to do chaining in most circumstances (see `velocityHelpers.registerEffect`) but that likely won\u2019t work in this case because the \u201cslide\u201d effects are custom internal to Velocity in order to get implicit heights right.\n\nAlso, make sure to have `key` properties on all children of `VelocityTransitionGroup`.\n\nDoes that fix things?\n. Hrm. Digging in, in slow motion, I noticed a few things.\n\nFirst up, there's a bug in `VelocityTransitionGroup` where it won\u2019t run any animations unless a `leave` prop is set. I\u2019ll get a fix for this out later today.\n\nSecond, it may help to make sure any inner element is block-level. React\u2019s `TransitionGroup` (and by extension, `VelocityTransitionGroup`) is a `<span>` by default. Use `component=\"div\"` to change this.\n\nI don\u2019t know if `slideDown` and `delay` are going to work well together. `slideDown` calculates the target height when it\u2019s called. If you\u2019re doing that on an element whose child\u2019s animation is delayed, that child may have `display: none` and therefore not influence its parent\u2019s height.\n\nYou could probably work around that by writing a custom animation for the child that doesn\u2019t affect the display and therefore height. (By default all Velocity UI Pack \u201cIn\u201d and \u201cOut\u201d animations mess with display.)\n. For the delayed element, you could do a custom animation that just went from opacity: 0 -> 1. You can put a \"style\" attribute for opacity: 0 on the enter/leave prop that will get set immediately, and then the animation would start after a delay.\n\nI think the delay is not really the issue as much as the Velocity UI Pack \"In\" transitions always starting from \"display: none\".\n\nAt any rate, glad you have something, and maybe this gives you ideas for improving it.\n. @kevinrobinson Can you re-approve? Updated CHANGELOG.md for #39.\n. Kevin's hanging out at #TwitterFlight. Selfin'.\n. The \"style\" just gets applied, since it\u2019s done via Velocity / DOM rather than React it's not straightforward to just \"undo\". You can often override it in the animation if that's necessary.\n\nFor doing a crossfade-like effect, I'd recommend only using \u201cposition: absolute\u201d for the leaving element, leaving the parent to size naturally from any entering element.\n. Makes sense. Thanks for putting this together.\n. Sounds like you don't have the Velocity UI Pack installed. At a top level of your app, include:\n\n``` javascript\nrequire('velocity-animate');\nrequire('velocity-animate/velocity.ui');\n```\n. Thanks for bringing this to our attention. I think it would be up to Radium to avoid stomping existing style attributes, but that may not be feasible. (Vanilla React appears to be well more tolerant of this, even with setting `style` hashes on your elements.)\n\nIn the immediate term, I'm not sure there's anything we can do, given how Velocity operates completely outside of React and on the DOM directly.\n\nIf you do any investigation and get a lead on an approach that might resolve the compatibility between the libraries, FF to re-open and let us know what you find.\n. @ianobermiller I'm not familiar with Radium, but Velocity works outside of React and is setting the style values directly on the DOM node, which React typically leaves alone. My guess if there's a problem with Radium it is because Radium is somehow over-writing those, but this is coming from a place of speculation.\n. Thanks for the suggestion. Tweaked the language some and committed in #43.\n. Hrm. Good point. Let me look into this.\n. Does #54 help you with this?\n\nYou'll still want to wrap your primary `require` calls in:\n\n```\nif (typeof window !== 'undefined') {\n  \u2026\n}\n```\n\nand the `velocity-react` components will use their shim.\n. Lemme get this reviewed and we can get a release up.\n. Fixed in 1.1.2.\n. Take a look at `LoadingCrossfadeComponent` in the demo code for how to switch an element to `absolute` as it leaves so that it doesn't take up space.\n\nPutting a `delay` on the enter animation may work, but the danger there is additional stuttering of the height. (I suspect it would only be feasible if you can let the container collapse down to 0 height.)\n. I suspect you need:\n\n```\nimport {VelocityTransitionGroup} from 'velocity-react'\n```\n. The 'velocity-react' model is a convenience that exports the 3 pieces of the library as a hash. The braces destructure that hash to give you access to just the component you want. \n. Are you using Webpack or some other packager that is aware of npm modules?\nYou'll need that for this library.\n\nOn Wednesday, November 4, 2015, Chris Drackett notifications@github.com\nwrote:\n\n> actually the code I pasted below is causing issues with react, so I don't\n> currently have a solution :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/47#issuecomment-153913032\n> .\n. Glad to hear it's working. This may have been an issue that could have been solved with `npm dedupe` as well.\n. Thanks for clearing this up, @PEM--!\n. Try doing an `npm dedupe` to make sure there aren't alternate Velocity runtimes being loaded.\n\nAlso, not sure how it pans out, but make sure some subtle difference between `import` and `require` isn't causing a problem, since the Velocity libs are not \"pure\" in the module sense.\n. Not sure what the best practice is here. If you do a peerDependency, it\nwould need to be explicitly added as a dependency to the parent app.\n\nI don't know enough about NPM to know when it puts transitive dependencies\nin the package's root, and when they go into the sub-packages (though\nversion numbers may have something to do with it). It may also vary by NPM\nversion.\n\nOn Thu, Apr 7, 2016 at 3:16 PM, David Calhoun notifications@github.com\nwrote:\n\n> @finneganh https://github.com/finneganh I thought about this some more.\n> Should velocity-animated be added as a peerDependency for this package?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/50#issuecomment-207055094\n. Latest version has this tip in the README, in case it bites someone else.\n. @lauffenp what's the stack trace on that? Neither `velocity-react` nor `velocity` use `localeCompare` directly.. You may not have been specifying `display` right. You'l need to do it for each of the animations. E.g.\n\n```\n  <VelocityTransitionGroup component='tbody' enter={{ animation: 'slideDown', display: 'table-row' }} leave={{ animation: 'slideUp', display: 'table-row' }}>          \n      {history.map(this.renderRows}}\n    </VelocityTransitionGroup>\n```\n\nand see if that helps.\n. What URL are you going to in the browser?\n. The `leave` animation is always finished on an element before the `enter` animation runs, to try to make sure that `enter` animations always have a consistent state.\n\nNot sure either way on having the `begin` trigger in this case or not. Probably it shouldn't; actually #53 removes that behavior for complete, so perhaps they should be consistent.\n\nWhat's your use case?\n. Closing. Re-open w/ further information if this is causing problems.\n. There may be some hacks you could do by temporarily changing the `enter` / `leave` props when you know filtering is happening. You could also try some nested shenanigans (in other words, make filtering change rows' display or inner contents rather than adding / removing them from the parent element).\n. Does leaving out the `enter`/`leave` properties have any effect?\n\nOn Fri, Dec 4, 2015 at 3:08 PM, Chris Drackett notifications@github.com\nwrote:\n\n> I'm using a VelocityTransitionGroup for a Loading element that shows a\n> spinner while it has no children and then fades the spinner out and fades\n> the children in when they exist. The issue I'm running into is if I try and\n> get the offsetWidth of a ref within the new children on componentDidMount I\n> end up getting a value of 0. If I remove VelocityTransitionGroup I get\n> the correct width value on this element.\n> \n> Here is my Loading component for reference. the console log statement in\n> componentDidUpdate returns a correct width pre and post loading without\n> VelocityTransitionGroup but returns an incorrect value after loading\n> otherwise:\n> \n> https://gist.github.com/chrisdrackett/2dcbaea51b59166bf5db\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/57.\n. OK. Animations start on a next tick so that all the animations for a single `VelocityTransitionGroup` can be collected and fired together (this makes things like `stagger` work). Your calculations are probably happening before the animations have started, which may be causing the issue.\n. I think Velocity may have a \"begin\" callback that you could put on enter or\nleave.\n\nOn Mon, Dec 7, 2015 at 12:56 PM, Chris Drackett notifications@github.com\nwrote:\n\n> I see, so is there any way to measure an element that is used in\n> VelocityTransitionGroup?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/57#issuecomment-162607580\n> .\n. The Velocity animations are only applied to the direct children of\nVelocityTransitionGroup, so if the tick over before animations starting is\nwhat's giving you trouble with measurements, I would think that the begin\ncallback would fire when the components would be measurable.\n\nOn Mon, Dec 7, 2015 at 1:17 PM, Chris Drackett notifications@github.com\nwrote:\n\n> that would take care of the top level component, the issue here is that\n> this affects any components mounting under the VelocityTransitionGroup.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/57#issuecomment-162612762\n> .\n. Are you measuring before or after Velocity kicks in and starts setting\nstyles?\n\nOn Mon, Dec 7, 2015 at 1:52 PM, Chris Drackett notifications@github.com\nwrote:\n\n> right, but say I have a component inside the Loading component mentioned\n> above. They also return a width of 0 on ComponentDidMount when they are\n> the child of a VelocityTransitionGroup\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/57#issuecomment-162622475\n> .\n. After thinking about this a little, I'd recommend trying to subclass\nVelocityTransitionGroup. If you mark your nodes in some manner with whether\nthey should be animated or not (with classes, perhaps?) you can override\nchildWillAppear, childWillEnter, and childWillLeave. Use your own logic to\nshort-circuit out of those functions (just call the doneFn and return) and\nonly call the \"super\" implementations when you want animation to happen.\n\nYou could also put together a PR to allow the wrapper component class,\ncurrently VelocityTransitionGroupChild, to be parameterized as a prop to\nVelocityTransitionGroup. Then you could implement the logic in your custom\nchild's componentWillAppear / componentWillEnter / componentWillLeave\n(calling the willAppearFunc / willEnterFunc / willLeaveFunc props as\nnecessary).\n\nI think the latter's nicer because I prefer composition over inheritance\nfor customization (esp. given the state of JS \"classes\"), but the former\nyou could get started on right away.\n\nOn Tue, Dec 8, 2015 at 11:08 PM, Richard Lopes notifications@github.com\nwrote:\n\n> Hello,\n> \n> Having great success with the library so far.\n> However I got a new requirement causing me some grief to achieve.\n> \n> I have 2 pages:\n> - a list of items (that you can sort and filter)\n> - a form to create new items\n> \n> I have 2 API endpoints:\n> - one gets the original list of items\n> - one returns new items that have been added by other users\n> \n> This is how it works:\n> 1. when the list of items first load, items are rendered without animation\n> 2. when you filter or sort the list, items are rendered without animation\n> 3. when the second API notify new items have been added, those are\n> rendered in the list with animation\n> 4. when an item is deleted, it gets removed with an animation\n> 5. when a user leave the list page to create an item on the second page,\n> he is redirected back to the list page after creation, the new item only\n> must be rendered with animation\n> \n> At the moment I achieve 1 to 4 but I am having problems with 5 (5 leaves\n> the list page then come back, unmount/mount items). If I turn on animation\n> (on mount) all items are animated as no item was (React) mounted yet. If\n> animation is turned off nothing gets animated including the new item.\n> \n> For animation I wrap the list of items inside a VelocityTransitionGroup\n> and each item as a key attribute set to the item unique id. The unique id\n> works well to filter out what gets animated but in the case of 5 it doesn't\n> help.\n> \n> I have hacks in mind but they are not elegant. What would be the best\n> approach to meet requirements 1 to 5 ?\n> \n> I am thinking replacing the transition group with a VelocityElement per\n> row/item for finer control but I am not sure how to achieve the enter,\n> leave effect as provided by the transition group. Also feels like\n> reinventing transition group in a way.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/58.\n. Nope. The sentiment there is that you can have VelocityComponent and VelocityTransitionGroup in server-rendered code, they just won't have any effect at all.\n\nAn incompatible implementation couldn't run. A compatible implementation would probably output HTML for the components that reflected the end state of specified animations.\n. That line is in there because, due to React's TransitionGroup's API, we\nhave no way of getting all of the children that are entering or leaving\nother than collecting them and waiting a tick to know that the collection\nis complete. We want to batch all of the child animations in one go in\norder to support Velocity options like stagger.\n\nWithout that display: none or an alternate means of hiding, elements would\nflash in for that tick before the animation started.\n\nI could imagine a position: absolute / opacity: 0 combo, or height: 0, or\nsomething else that would keep the element from appearing. Would one of\nthose work for your use case? Do you have ideas about a good means of\nparameterization?\n\nOn Thu, Dec 10, 2015 at 5:09 PM, Chris Drackett notifications@github.com\nwrote:\n\n> Setting display: none here:\n> \n> https://github.com/twitter-fabric/velocity-react/blob/master/velocity-transition-group.js#L153\n> \n> has the potential to cause issues with any components that happen to be\n> under a VelocityTransitionGroup that run style based code as part of\n> ComponentDidMount. For example we have list items that check their width\n> and size the text inside accordingly. If these list items are a child of a\n> parent that uses VelocityTransitionGroup to animate in they will come in\n> at their minimum size as they are getting a width of 0. Then the next\n> time they render they will size themselves correctly.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/61.\n. Looking at a fix in #62 \n. Live in 1.1.2.\n. Yes. The Velocity effects are named after how they appear.\n. Seems reasonable. Could you make a PR?\n\nWe don't need to do the timing bits; `velocity-react` just wants to get to\nthe next tick of the event loop.\n\nOn Thu, Jan 14, 2016 at 3:09 PM, Rand Scullard notifications@github.com\nwrote:\n\n> In velocity-transition-groupjs, on lines 201 and 293, there are calls to\n> windowrequestAnimationFrame This function is not available in Internet\n> Explorer 9 The underlying Velocity library works on IE 9, and it looks like\n> they solved this problem using the following shim:\n> \n> /\\* rAF shim Gist: https://gistgithubcom/julianshapiro/9497513 */\n> var rAFShim = (function() {\n>     var timeLast = 0;\n> \n> ```\n> return windowwebkitRequestAnimationFrame || windowmozRequestAnimationFrame || function(callback) {\n>     var timeCurrent = (new Date())getTime(),\n>         timeDelta;\n> \n>     /* Dynamically set delay on a per-tick basis to match 60fps */\n>     /* Technique by Erik Moller MIT license: https://gistgithubcom/paulirish/1579671 */\n>     timeDelta = Mathmax(0, 16 - (timeCurrent - timeLast));\n>     timeLast = timeCurrent + timeDelta;\n> \n>     return setTimeout(function() { callback(timeCurrent + timeDelta); }, timeDelta);\n> };\n> ```\n> \n> })();\n> \n> Would it make sense to incorporate the same technique in velocity-react?\n> Sadly, for our current project we still need to support IE 9 (for the time\n> being)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/64.\n. Yeah, if rAF isn't available that's fine for us. velocity-react doesn't\ncall rAF repeatedly, so the particular rate of call isn't important.\n\nOn Thu, Jan 14, 2016 at 4:38 PM, Rand Scullard notifications@github.com\nwrote:\n\n> By \"get to the next tick of the event loop\", do you mean just do a\n> setTimeout of zero?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/64#issuecomment-171788539\n> .\n. Sorry for the confusion. You're the second person who brought it up, so I re-worked to match the sentiment I was going for in #67.\n. I haven't tried it, but it's likely to work, since `velocity-react` just calls Velocity on child DOM nodes.\n\nYou may or may not want `runOnMount` to be true, depending upon how you want the \u201canimation\u201d\u00a0to be triggered.\n. You'll want to add a `ref` to the component so you can access it, and call `runAnimation` on it when you want it to fire off.\n. Try `translateX` as the key to the `style` block. velocity-react uses Velocity's style setting for consistency, not React's.\n. You\u2019ll need the component to stay in the DOM for the duration of the animation for the effect to appear. Two options come to mind:\n- Keep using `VelocityComponent`, rendered all of the time, but use Velocity\u2019s [display property](http://julian.com/research/velocity/#displayAndVisibility) (not in `animation`, but as its own `prop`) to get the element to display block/none at the beginning/end of the animation as necessary.\n- Use `VelocityTransitionGroup` and have the white overlay as a child that\u2019s added/removed from it. `VelocityTransitionGroup` will keep the child in the DOM while the animation runs, even if you\u2019re no longer rendering it, and remove it when the animation is over.\n. Cool, thanks for sending this in!\n. Double-check that all versions of Velocity you have installed are 1.2.3? (Perhaps with `npm dedupe` as well.)\n. I think the problem is the `<div>` around your `OrdersList` and the `OrdersList` itself. `ReactTransitionGroup` \u2014 and therefore `VelocityTransitionGroup` \u2014 operates only on direct children. You will need the components you\u2019re adding / removing to be direct children of a `VelocityTransitionGroup` to animate them.\n. Not sure what the error is\u2026 we're pegged to the 3.10 implementation.\n. Presumably we could upgrade to 4, though I don't see why you'd be getting an error now. In my tests, NPM installed lodash 3.10 into velocity-react's node_modules folder.\n\nYou may need to wipe your node_modules directory and do a re-install to get that, though.\n. Note that velocity-react doesn't require all of lodash, just a handful of functions. So, you're not getting a full extra copy in your bundle.\n. The components that use lodash are already only requiring/importing the\nparticular methods that they need.\n\nOn Tue, Aug 1, 2017 at 4:50 PM Eddie Monge <notifications@github.com> wrote:\n\n> Then why not only require the lodash packages you are using?\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/77#issuecomment-319492751>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65VKRTKf_NOCqp2SQmLV8VjVXj6vjks5sT4-CgaJpZM4HjHTQ>\n> .\n>\n. My understanding is that a bundler such as webpack is only going to pull in\nthe directly-required files (and their transitive dependencies), regardless\nof what's in node_modules, so I don't know what that PR gains.\n\nOn Tue, Aug 1, 2017 at 5:22 PM Eddie Monge <notifications@github.com> wrote:\n\n> Not really. All of lodash is still included. This only installs the ones\n> that are actually used: #219\n> <https://github.com/twitter-fabric/velocity-react/pull/219>\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/77#issuecomment-319500871>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65cxOMAuLwqxRosxnqVzGdVZdN8Jaks5sT5cNgaJpZM4HjHTQ>\n> .\n>\n. Are you doing some top-level aliasing shenanigans with webpack? If npm is\nwell-behaved, it will put lodash in a node_modules directory relative to\nvelocity-react, and that's what the velocity-react package will import.\n\nThe velocity-react imports are already directly to lodash files, so it\ndoesn't rely on tree-shaking or anything along those lines.\n\nOn Mon, Aug 28, 2017 at 8:12 PM Aaron Melocik <notifications@github.com>\nwrote:\n\n> @finneganh <https://github.com/finneganh> -- I'm also having this Lodash\n> issue, though I'm not 100% confident that it's velocity-react (50/50 chance\n> at this point). But regarding the explicit imports in Lodash and webpack\n> only requiring the necessary modules -- I don't think you get that for free\n> with Webpack.\n>\n> My understanding is that if you were to import all of your lodash\n> statements namespaced, i.e.:\n>\n> import { merge } from 'lodash';\n>\n> ... then Webpack would, as part of optimizing the dependency graph, only\n> create a module out of merge.\n>\n> But if you import all of lodash, i.e.:\n>\n> import _ from 'lodash';\n>\n> ... then you've got all of lodash coming your way.\n>\n> You can validate the weight of lodash in velocity-react using the\n> bundle-analyzer-tool:\n>\n> https://github.com/th0r/webpack-bundle-analyzer\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/77#issuecomment-325517339>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65b9L7kcth772SD0zGvspodNvG3kmks5sc1digaJpZM4HjHTQ>\n> .\n>\n. Check and see if the [Velocity docs on SVG](http://julian.com/research/velocity/#svg) have the info you need.\n. For things like this, turning the animation speed waaaaay down is a good way to test this. That will let you inspect the DOM as it's moving.\n\nMy guess on this is that the animation is playing, but since you have 2 elements in the container, one is either covering the other or, more likely, bumping it down so that it can't be seen.\n\nYou may want to look over the sample code for the crossfade animation, which shows switching a leaving element over to position: absolute so that both elements can coexist on screen.\n. This is currently by design because the leave animation is run to completion before an element is added, so that elements can base their enter animations off of a consistent \u201cleft\u201d state.\n\nI think I\u2019d be open to a patch that would not run either of the \u201cleave\u201d callbacks in this case, however.\n. Yeah, that works for me.\n\nOn Mon, Mar 7, 2016 at 4:17 PM, Seth Tompkins notifications@github.com\nwrote:\n\n> Hrmm, this is the line right here correct?\n> \n> https://github.com/twitter-fabric/velocity-react/blob/eed8a4077e5589bc38e5d42eaffc2457449b2cdd/velocity-transition-group.js#L181\n> \n> Would it make sense to simply exclude the begin opt there just as the\n> complete opt is excluded?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/80#issuecomment-193454186\n> .\n. Will be fixed in 1.1.4\n. Yeah, good point. Looks like that's not documented outside of the `VelocityTransitionGroup` source code.\n. Adding this for the next rev of the README.\n. Thanks! I'll get a release up soon.\n. Shipped in 1.1.4. Thanks again!\n. For debugging animation issues, I recommend turning down the animation time to something on the order of 60s. That should give you enough time to investigate what's going on in a web inspector. The React `TransitionGroup` code should be keeping DOM elements in the correct order, providing your `key` attributes aren\u2019t changing, so I would suspect there\u2019s either something with keys or with your animation.\n. Glad to hear!\n. Sounds like this may be something on the React Template side? `VelocityTransitionGroup` does not use refs itself. You could see if you get the same problem using React\u2019s `TransitionGroup`, which is what VTG delegates to.\n. Try looping with a simpler animation (e.g. just a property hash). I'm not\nsure one way or another if the UIPack animations w/ a series of calls work\nwith loop.\n\nOn Wed, Apr 6, 2016 at 1:37 PM, Brian Thibault notifications@github.com\nwrote:\n\n> Hi I'm using the UIPack stuff to sequence a couple calls\n> \n> let translateAnimations = {\n>       withSwipe: velocityHelpers.registerEffect({\n>         defaultDuration: 750,\n>         calls:\n>          [\n>            [{translateX: buttonPosition.left, translateY: buttonPosition.top}],\n>            [{translateX: buttonPosition.left, translateY: '180px'}]\n>          ]\n>       })\n>     }\n> \n>    ...\n>             <VelocityComponent animation={translateAnimations.withSwipe} loop={true} delay={100}>\n>                   <button className=\"touch\" onClick={this.playNext.bind(this)} />\n>             </VelocityComponent>\n> \n> Ideally I want button to move up and down the y-axis... It does reset and\n> run again on component receiving props, but it doesn't appear to loop. Am I\n> doing something wrong?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/86\n. You could manually loop with a `complete` callback I suppose. You could also talk to @kenwheeler, the current Velocity maintainer, about loop w/ UI Pack.\n. Hrm. Unsure. VelocityTransitionGroup sets a complete handler, but I don't\nknow exactly how that interacts with the complete handler that UI Pack\nadds. You'd need to do some debugger tracing to see how that plays out. I\nwouldn't expect VelocityTransitionGroup to behave any differently from any\ncall to \"animate\" that has its own complete handler.\n\nTheoretically you could reset the styles with a complete handler passed to\nVelocityTransitionGroup, though it looks like it currently eats the\narguments / this that would make that possible.\n\nUpdating VelocityTransitionGroup to pass the args from its complete handler\ninto optsCompleteFn (and probably call it with the right \"this\") would fix\nthat, if you want to make a PR.\n\nOn Thu, Apr 7, 2016 at 3:29 PM, David Calhoun notifications@github.com\nwrote:\n\n> Does velocity-react support the reset property for Velocity.RegisterEffect\n> http://julian.com/research/velocity/#uiPack?\n> \n> Specifically, I'm attempting to \"clean up\" the style attribute of a\n> component after the animation is complete.\n> \n> // Define prep styles for animationvar prepStyles = {\n>   bottom: 0,\n>   left: 0,\n>   position: 'absolute',\n>   right: 0,\n>   top: 0\n> }\n> // Register effectsvar scaleFadeIn = velocityHelpers.registerEffect({\n>   defaultDuration: 600,\n>   calls: [\n>     [{\n>       opacity: [1, 0],\n>       scale: [1, [500, 30], 0.5]\n>     }]\n>   ],\n>   reset: {\n>     bottom: 'auto',\n>     left: 'auto',\n>     position: 'static',\n>     right: 'auto',\n>     top: 'auto',\n>   }\n> })\n> var scaleFadeOut = velocityHelpers.registerEffect({\n>   defaultDuration: 600,\n>   calls: [\n>     [{\n>       opacity: [0, 1],\n>       scale: [0.5, [500, 30], 1]\n>     }]\n>   ],\n>   reset: {\n>     bottom: 'auto',\n>     left: 'auto',\n>     position: 'static',\n>     right: 'auto',\n>     top: 'auto',\n>   }\n> })\n> // Use animation with style hash<VelocityTransitionGroup\n>   enter={{ animation: scaleFadeIn, style: prepStyles }}\n>   leave={{ animation: scaleFadeOut, style: prepStyles }}>\n>   {this.state.first ? <First /> : undefined}\n>   {!this.state.first ? <Second /> : undefined}</VelocityTransitionGroup>\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/87\n. The latest v1.1.5 fixes the `complete` callback so that it has information about what DOM elements were completed.\n. I think it's ok to bump `devDependencies` to 15. \n. Hopefully NPM is clever enough with that `react-addons-transition-group` to pull in the 0.14 version if your project is already using React 0.14.\n. I could go either way, depending upon how NPM complains. `tween-state` is only used for the demo, not the library itself.\n. @StevenLangbroek Can you give it a try to just put the devDependencies to 15?\n. Switched to make the demo use React 15 in a separate PR. Thanks for opening this, though!\n. I'm not 100% sure that's feasible given the hard dependency on `velocity-addons-transition-group`, which has its own `peerDependency` on `react`.\n\nRegardless, testing an update tonight w/ React 15 supported.\n. v1.1.5 out w/ React 15 support.\n. Sorry to hear you had an issue. The 1.1.5 change does just add React 15 as an option along with 0.14 (the velocity-react code was already compatible with both) but NPM's interpretation of that seems to have done you wrong.\n\nI suspect what happened was you're using a version of NPM that is installing peerDependencies automatically, and NPM pulled in React 15 off of velocity-addons-transition-group's peerDependencies (which it got by choosing to use v15 of that package, rather than 0.14, even though both are supported).\n\nYou way want to depend specifically on velocity-addons-transition-group at 0.14.x. velocity-react supports both.\n\nI'm sorry this caused a production problem. Have you looked into npm shrinkwrap to try to keep deployed versions more nailed down?\n. Good luck! Thanks for using velocity-react!\n\nOn Tue, Apr 12, 2016 at 4:50 PM, Lior Brauer notifications@github.com\nwrote:\n\n> @finneganh https://github.com/finneganh Thanks for the reply. I assumed\n> without looking that the version bump on your part explicitly depended on\n> React 15, but I see you're correct. I'll look into shrinkwrap and perhaps a\n> newer version of NPM that doesn't automatically install peerDependencies.\n> \n> Again, thanks for your help and contribution!\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/94#issuecomment-209096599\n. You may need to specify `react-addons-transition-group` at 0.14.x in your dependencies.\n\nSorry for the headaches around this; for some reason this React upgrade isn't going as smoothly as 0.13 -> 0.14.\n\nI think one lesson is to always make sure you're shrinkwrapping your dependencies so this doesn't bite arbitrarily.\n. For debugging stuff like this, I usually recommend slowing the animation down to 30s or so you have enough time to look in the web inspector to see how styles are cascading or conflicting.\n\nThis may be an issue you'd need to address with Velocity to allow for animation styles that override `!important` CSS.\n. I haven\u2019t looked closely at that, as I'm not sure how it would fit in with the declarative approach to animations. Feel free to discuss if you have a feeling of how it would integrate.\n. Ha! Awesome. Thanks for catching.\n. Thanks!\n. Sorry the documentation isn't very clear about this. I think the intent was to describe that you can use the `targetQuerySelector` prop to add the animation to multiple elements, which in this case are not strictly children but grandchildren or below.\n. Let me see if I can convey that better.\n. FWIW `VelocityComponent` requires a single child because it doesn't have a DOM wrapper element of its own.\n. Use `VelocityTransitionGroup` when you want the behavior of a React `TransitionGroup` (animations on elements entering / leaving the DOM). Docs here: https://facebook.github.io/react/docs/animation.html\n\nUse `VelocityComponent` otherwise.\n. It comes down to if you're animating an element in place, vs. if you need\nto animate a component as it enters or leaves the DOM. If you check the\ndemos, the three on the left are `VelocityComponent` whereas the two on the\nright are `VelocityTransitionGroup`.\n\nOn Thu, Jun 16, 2016 at 10:50 AM, Jeff Hansen notifications@github.com\nwrote:\n\n> I guess my question is, for a new animation, why would I _want_ to chose\n> one over the other?\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/103#issuecomment-226508756,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AAP65bKIWGWoXdYZxTYCx7eN7PeNPvPyks5qMWK_gaJpZM4I3XFi\n> .\n. If you're having the CSS animations just on elements so that they animate\nwhen they appear in the DOM, then probably VelocityTransitionGroup will\nmatch the behavior you expect. If you've been dynamically adding\nanimation-specific classes to elements based on some triggering event, then\nuse VelocityComponent.\n\nYou can do multi-step animations in Velocity, which you might be used to\nwith keyframes, by using `registerEffect` and specifying a series of\n`calls`. (This is for cases where straightforward tweening between two\nvalues is not enough.) Look at Velocity's documentation for\n`RegisterEffect`, though `velocity-react` also has a helper for it that\nprevents naming collisions.\n\nOn Thu, Jun 16, 2016 at 10:58 AM, Jeff Hansen notifications@github.com\nwrote:\n\n> Ah, okay, thanks! Basically right now I am using CSS transition groups\n> because the keyframes are easy to work with in CSS. What would be the best\n> path for me to come close to that experience with Velocity?\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/103#issuecomment-226511132,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/AAP65TKIK4EPFH502b52p8UtKozTxofWks5qMWR9gaJpZM4I3XFi\n> .\n. `duration` needs to be set for `enter` and `leave` separately. Put them in the hashes alongside `animation`.\n. Curious. I wonder if this is a permanent change or a webhost mixup. At any rate, we can revert later if necessary.\n. Thanks!\n. I think you'll need to investigate what isn't smooth about the current effect. There a lot of processing going on when the routes change, or just components resizing when they get new data and that throwing off the animation.\n\nI believe you could add a `complete` callback to the `VelocityTransitionGroup`'s `enter` or `leave` animations that will get called when the effect is done. That may help, though there might be some bookkeeping to translate that to a specific component.\n. I'm not necessarily against this, but I want to make sure it's doing what you intend.\n\nWhen the duration changes, the animation will restart from the current DOM state, without memory of any previous animation or duration. So, if the box is halfway across the screen and you half the duration, the new animation will actually proceed at the same rate, as it has only half the distance to go.\n\nIs the effect you want better expressed through a custom tween or multi-step animation?\n. Closing this without a compelling use-case. I don't think duration changes are conceptually the right fit for the declarative way velocity-react works, due to the non-intuitive way they work with any in-progress animations.\n. Curious. The `slideUp`/`slideDown` animations are handled a little bit specially by Velocity; I don't know if that affects the way that the `complete` callback is called.\n\nLooking at where the error might happen in `ReactTransitionGroup`, it's something around the `doneFn` callback being called but the child element it was originally bound to is no longer present. Might be worth checking to see if somehow `slideUp` is calling its complete handler twice or something.\n\nI think that `removeAll` may be aggravating this because that example as originally written was being sloppy about keys. They've been based on array position, rather than something more intrinsic. That may have masked this bug because the `doneFn` lookup by key that happens in `ReactTransitionGroup` would have succeeded accidentally if the key were re-used.\n. Cool. This seems reasonable. I think this also safe server-side since `componentWillUnmount` isn't called then.\n\nHeads up, @kenwheeler, it might be nicer to have a Velocity helper for clearing this data rather than duplicating the `['velocity', 'fxqueue']` keys in this code.\n. I'd like to merge this, I just need to validate that it's also fine when jQuery is installed.\n. Demo still seems to work with this, so I think it's safe.\n. Would it work for you to include a `complete` callback and then call the `runAnimation` method on the component manually to cause a loop?\n\nDoes `RunSequence` have support for looping in a way that's different from calling `$.velocity`?\n. @tonybaroneee FF to send to me. I've been on vacation but I need to get back to maintaining this project.\n. The `\"reverse\"` value for an animation is not a great fit for `VelocityTransitionGroup` because elements may need to animate out without having been animated in. (See: http://velocityjs.org/#reverse Reverse just undoes the most recent animation on an element)\n\nIt's best to make an opposite animation.\n. Since you want your animation to be affected by the derivative of your state, rather than the state itself, I'd recommend calling the `runAnimation` method on a `VelocityComponent` in your `componentDidUpdate` method on detecting that the current value is different from the previous value (which are passed to `componentDidUpdate`).\n. Are you using `VelocityComponent` or `VelocityTransitionGroup`? \n. Added a review to that PR. I know it's been a little while. LMK if you want to update the PR or I can take over the fix.\n. Just merged. Will be in the next release.\n. I've been looking into this a little more. In my tests, loading the demo with jsdom worked. I couldn't reproduce the require error.\n\nI'm not sure there's a particular reason why velocity-react shouldn't work with jsdom around, and I wonder if the require error you have is from something else. Leaving the jsdom exclusion in for now, but that might get revisited if it comes up as a feature request from someone else.\n. What's your version of lodash?\n\nI'm hesitant to do this because the original intention of those requires is to only pull in the specific functions so as not to bloat the imports with all of object, array, &c. since tree-shaking is not widely available for JS importing.\n. This package is still using lodash 3. There may be something up with your npm importing if it's finding a different version.\n. Awesome. Thanks!\n. Really? OK. Disappointing that they're parsing code with RegExps, but it's no big deal to change this on our end.\n. You should be able to use the VelocityHelper to register a multi-step\nanimation that goes to 20 and then back to 10.\n\nOn Wednesday, September 7, 2016, angus croll notifications@github.com\nwrote:\n\n> Here's my use case:\n> \n> <VelocityComponent>\n>   <MyComponent/>\n> </VelocityComponent>\n> \n> For each animation loop, MyComponent's width should start at 10, grow to\n> 20 at the half way point, then ease back to 10. I don't think I can use the\n> animation property for this (since start and end values are 10).\n> \n> The progress property supplies the complete value to the associated\n> callback, which I could potentially use to update width via something like:\n> \n> progress={(el, complete) => {width: 20 - (Math.abs(complete - 0.5)*20)}}\n> \n> However I'm not sure how (or whether) I can update a style property via\n> this callback.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/124, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAP65Z94cRwLTrk0BJDuBau-SPYCRG6Sks5qn1DogaJpZM4J3esc\n> .\n. You should be able to modify the easing w/ additional arguments. Unfortunately the `registerEffect` bits are not well-documented in Velocity. You can also set the initial width I think with:\n\n`\n[{\n  width: [20, 10],\n  left: \u2026\n}, \u2026]\n`\n\nI believe that you cannot loop `registerEffect` animations, but you could add a `complete` handler to the component and have that call `runAnimation`.\n. This seems to be an NPM / Treebeard issue. Treebeard's dev dependencies specify React 0.14.8, but the NPM I have (2.7.5) is installing a React for velocity-react's peerDependency, even though 0.14.8 should satisfy the ||.\n\nIn your own app, lock React down at 15.something and I expect you won't have warnings.\n\nI'm not sure if npm 3 would handle this case better.\n. Looks like this is an issue with the new garbage collection, as it uses a Velocity API that's not shimmed out in server / test mode. Will get a new release out presently.\n. Should be fixed in 1.1.7.\n. Fixed in 1.1.8. Thanks @stephenleicht for the fix.\n. Thanks!\n. Selfie since this is breaking IE compat.\n. I'd be surprised if you actually were getting 60kb of lodash 3.\nvelocity-react only requires the handful of lodash methods it actually\nuses, not the whole library.\n\nOn Friday, October 7, 2016, FUJI Goro notifications@github.com wrote:\n\n> It should reduce 60kb+ of JavaScript bundles if our apps depend on lodash\n> \n> ## v4 (but not v3).\n> \n> You can view, comment on, or merge this pull request online at:\n> \n>   https://github.com/twitter-fabric/velocity-react/pull/134\n> Commit Summary\n> - allow lodash v4\n> \n> File Changes\n> - _M_ package.json\n>   https://github.com/twitter-fabric/velocity-react/pull/134/files#diff-0\n>   (2)\n> \n> Patch Links:\n> - https://github.com/twitter-fabric/velocity-react/pull/134.patch\n> - https://github.com/twitter-fabric/velocity-react/pull/134.diff\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/pull/134, or mute the\n> thread\n> https://github.com/notifications/unsubscribe-auth/AAP65ek8BP9xnw8-Y-YDxpT4g0Iz3Nrkks5qxvRygaJpZM4KRlTz\n> .\n. Thanks for the tip. I'll look into this. I'm curious what those numbers are\npost-minification.\n\nOn Saturday, October 8, 2016, FUJI Goro notifications@github.com wrote:\n\n> To be honest, the number comes from webpack-bundle-size-analyzer\n> https://github.com/robertknight/webpack-bundle-size-analyzer and I have\n> no investigation on the details of the analyzer.\n> \n> It says:\n> \n> node_modules/.bin/webpack --config config/webpack.config.js  --json | webpack-bundle-size-analyzer\n> \n> ...\n> velocity-react: 91.18 KB (1.99%)\n>   lodash: 67.87 KB (74.4%)\n>   <self>: 23.31 KB (25.6%)\n> ...\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-252413708,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAP65ZjVbWw-57X7PozMuAOYRDh93y4vks5qx19dgaJpZM4KRlTz\n> .\n. Not sure what's going on in your node_modules, but having 2 different\nversions of a library that are included independently is supported by NPM.\nvelocity-react should have its own copy of lodash installed for it.\n\nOn Wednesday, October 12, 2016, Anthony Da Mota notifications@github.com\nwrote:\n\n> I this branch gonna be merged ? I'm having lots of problems with the\n> lodash dependencies, as my project rely on 4.X (npm is installing the 3.X\n> version for the velocity-react module, but it's still failing)\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-253173325,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAP65Ym6WuWdNG87zRluVAcZYCdmk6C7ks5qzLIhgaJpZM4KRlTz\n> .\n. File size is one concern (but can go both ways; I'm not sure what the\nrelative usage of lodash v3 and v4 is in the wild. Fabric is I believe\nstill on v3), but if you're having JS errors that's some other problem,\neither with the current state of node_modules or something you're doing in\nwebpack. NPM fully supports having separate versions of dependencies.\n\nOn Tue, Jan 24, 2017 at 5:27 AM, Vladimir Dralo <notifications@github.com>\nwrote:\n\n> I also have problem with lodash. My project uses version 4 ofc, and I have\n> conflicts because of this dep\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-274765429>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65UXOG7-0nwXPEYY35rdqztbJjed_ks5rVdIsgaJpZM4KRlTz>\n> .\n>\n. @STRML Curious. Where is `resolve.modules` being set? Is there a reason it doesn\u2019t include the default `\"node_modules\"`?. What's the ordering in `resolve.modules`? is `\"node_modules\"` first?\r\n\r\n. @STRML In that case I would recommend following the example here: https://webpack.js.org/configuration/resolve/#resolve-modules\r\n\r\nand using `__dirname`, as relative paths in `resolve.modules` are treated differently from absolute paths.. The reason is that I'm not interested spending my time testing and doing a release to work around others' non-standard module resolution rules. velocity-react's use of lodash 3 is entirely within spec. . Right, I didn't mean to imply that it's just you who's having module resolution problems since, as you saw from the other responses to this issue, it's not just you. I get frustrated that every few months I have to respond to folks whose setups can't handle a very straightforward relative `node_modules` include which is why, TBH, I'm acting a little bitchy about this.\r\n\r\nIn general I don't update modules just for kicks. For utility stuff like this, I'd rather stick with something that I know works than chase updates.\r\n\r\nThe only argument interesting to me is file size, except that even that's predicated on more folks using 4 than 3 in production, and the site that this library was built for originally is still on 3.. I'd recommend checking and seeing what's installed under\nvelocity-react/node_modules and poking in your lock file to see what it\nsays about lodash. Sounds more like your modules are not installed\ncorrectly rather than a webpack config aliasing lodash or using a\nnon-standard module resolver.\n\nOn Sun, Nov 5, 2017 at 3:00 PM, Vincent Lecrubier <notifications@github.com>\nwrote:\n\n> Just coming here to say that I got the same bug, caused by this dependency\n> on lodash 3. I do not use velocity on my project, it is a dependency of a\n> react-storybook, and it is really annoying that my project dev experience\n> is hampered by this.\n>\n> Module not found: Error: Can't resolve 'lodash/object/omit' in '/xxx/node_modules/velocity-react'\n>\n> @finneganh <https://github.com/finneganh> , do you have any pointers to\n> where react-storybook is using a non standard webpack setup ? Basically,\n> where can I complain about this bug, if not here ?\n>\n> Sorry for the tone, but yeah, I just think you might not realize the\n> impact of your decision.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google-fabric/velocity-react/pull/134#issuecomment-342000498>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65ek-k5Uwtn26OBDDZDhbSXfPhIQDks5szhPAgaJpZM4KRlTz>\n> .\n>\n. Aha, interesting. Good find. I can probably figure out how to work around that in how `VelocityTransitionGroup` generates its `complete` function.\n. Yeah, you'd need to do something tricky to handle the class coming in later, which would be dependent upon whatever you're using to do lazy loading.. I believe the stagger option has to be passed in the `enter`/`exit` props as that\u2019s how it gets passed to the Velocity options argument.\n. See the \"On Demand\" section of the demo. You'll want to call `runAnimation` on the component after you detect the increment. See the \"Interruption Behavior\" options for ways to handle when the animation calls overlap.\n. Can you be clearer about what you're doing and what error you're seeing?. I think this will be fixed in the next release, which fixed the undefined `forEach` problem.. I'd recommend not doing the queue stuff but instead change all the properties in one call. There is a somewhat undocumented way you can specify per-property easing with `registerEffect`, which you can see an example of here: https://github.com/julianshapiro/velocity/blob/master/velocity.ui.js#L541. Sounds like you need to check your dependencies, and possibly re-build your node_modules directory.. You need `runOnMount={true}`. Thanks for the fix!. If you use registerAnimation you can make an animation with sequential\nsteps. The syntax of nested arrays is a bit tricky, so check the Velocity\ndocs for how to do it.\nOn Thu, Dec 15, 2016 at 3:39 AM Martin <notifications@github.com> wrote:\n\n> Is there a way to queue up multiple animations like vanilla Velocity does\n> with calling it multiple times or chaining the promises?\n>\n>\n> I'd like to transform my css animation that is a multistep keyframe\n> animation to a component and run this on mount.\n>\n>\n> @keyframes dash {\n>\n>   0%{\n>\n>     stroke-dasharray: 1,200;\n>\n>     stroke-dashoffset: 0;\n>\n>   }\n>\n>   50%{\n>\n>     stroke-dasharray: 89,200;\n>\n>     stroke-dashoffset: -35;\n>\n>   }\n>\n>   100%{\n>\n>     stroke-dasharray: 89,200;\n>\n>     stroke-dashoffset: -124;\n>\n>   }\n>\n> }\n>\n>\n>\n> With Velocity i would just call it 3 times on the DOM object and give the\n> last animation loop: true so that it runs infinitely. I know i can call\n> runAnimation but with this i can't queue multiple different animations. I\n> could probably change the components probs 3 times in a row, but this seems\n> inelegant. Whats the best way to achive this with your components?\n>\n>\n>\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/154>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65VeFuiVk6JBFpEy75qxsVHzi57hiks5rIPytgaJpZM4LN15Z>\n> .\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n. The first line should be:\r\n\r\n```\r\nimport { VelocityComponent } from 'velocity-animate';\r\n```. `velocity-react` doesn\u2019t expose a way to do \"stop\" directly. Animations are stopped implicitly by changing the `animation` property. You could also try to expose \"stop\" the way that `runAnimation` is from `VelocityComponent` instances.. Check velocity-react inside your node_modules folder. A copy of lodash v3\nshould be in there.\n\nOn Tue, Jan 24, 2017 at 4:59 AM, Neal van der Valk <notifications@github.com\n> wrote:\n\n> I just installed this library but receive the following errors when\n> requireing the package.\n>\n>    - NPM v 3.10.9\n>    - My package.json file\n>    <https://gist.github.com/nealoke/9911fd0ecc538ee4d964542205be31d6>\n>\n> Imported like so import VelocityComponent from 'velocity-react';\n>\n> ERROR in ./~/velocity-react/velocity-helpers.js\n> Module not found: Error: Cannot resolve module 'lodash/lang/isObject' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-helpers.js 4:12-43\n>\n> ERROR in ./~/velocity-react/velocity-component.js\n> Module not found: Error: Cannot resolve module 'lodash/collection/forEach' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-component.js 37:11-47\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/collection/forEach' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 46:11-47\n>\n> ERROR in ./~/velocity-react/velocity-component.js\n> Module not found: Error: Cannot resolve module 'lodash/lang/isEqual' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-component.js 38:11-41\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/lang/isEqual' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 47:11-41\n>\n> ERROR in ./~/velocity-react/velocity-component.js\n> Module not found: Error: Cannot resolve module 'lodash/object/keys' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-component.js 39:8-37\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/object/keys' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 48:8-37\n>\n> ERROR in ./~/velocity-react/velocity-component.js\n> Module not found: Error: Cannot resolve module 'lodash/object/omit' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-component.js 40:8-37\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/object/omit' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 49:8-37\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/collection/each' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 44:8-41\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/object/extend' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 45:10-41\n>\n> ERROR in ./~/velocity-react/velocity-transition-group.js\n> Module not found: Error: Cannot resolve module 'lodash/collection/pluck' in C:\\xampp\\htdocs\\Wizer\\tools\\node_modules\\velocity-react\n>  @ ./~/velocity-react/velocity-transition-group.js 50:9-43\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/160>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65aXW7PBxlY3k9hgWvidZ6zAzU85oks5rVctkgaJpZM4LsEHb>\n> .\n>\n. Are you bundling with something like webpack? Are there any plugins or\ntransforms running that would affect lodash?\n\n\nOn Tue, Jan 24, 2017 at 10:36 AM Neal van der Valk <notifications@github.com>\nwrote:\n\n> @finneganh <https://github.com/finneganh> it is, but still doesn't\n> resolve the error though? :/\n>\n>\n>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/160#issuecomment-274838711>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65XXR5VaCVJFv-LrPsDFlUJ5T0BXvks5rVhptgaJpZM4LsEHb>\n> .\n>\n. My guess is that the resolveLoader is overriding the default relative\nnode_modules resolution. So webpack is forcing velocity-react to import\nfrom your base node_modules rather than starting at its internal\nnode_modules.\n\nOn Tue, Jan 24, 2017 at 12:03 PM, Neal van der Valk <\nnotifications@github.com> wrote:\n\n> @finneganh <https://github.com/finneganh> yes I am using webpack but\n> haven't ran into this sort of issue with my other imported libraries. This\n> is a gist of my webpack\n> <https://gist.github.com/nealoke/814acb32fcca8645bf21d1214c6f8fb3>, be\n> aware that my folder structure is a bit different.\n>\n> *Root*\n>\n>    - app\n>    - src\n>    - tools (here are my webpack / gulp / node_modules / bower /...)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/160#issuecomment-274867898>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65bL21HQAxzX0psaYa6bvV1lEAJKRks5rVi7fgaJpZM4LsEHb>\n> .\n>\n. Not sure. I guess I'd try to avoid setting a resolveLoader at all, but you'd know better what led you to using it.. `VelocityTransitionGroup` will run its animation when its child unmounts. I suspect you just need to rearrange things so that your `VelocityTransitionGroup` is sticking around, and its children are the only ones entering / leaving.. Are you trying to animate the SVG or just have the SVG in an animated component?\r\n\r\nI think I used react-svg-loader at Fabric, but never tried to animate the internals of a sprite.. Right, hidden components will still take up space.\r\n\r\nI'd recommend using `VelocityTransitionGroup`. That will let you run an animation when the component is unmounted. Just change your logic to no longer render the component, and the library will animate it away.. Check your `node_modules` (perhaps by deleting them and doing a clean `npm install`). This error can come up when you have 2 copies of React loaded.. The case you're looking for is npm installing a version of React inside the\nvelocity-react/node_modules directory, which would be different from the\nreact installed in your top level node_modules.\n\nWhat version of React is in your package.json?\n\n\nOn Thu, Jan 26, 2017 at 9:53 PM .modernator <notifications@github.com>\nwrote:\n\n> @finneganh <https://github.com/finneganh> No, it's not. I just removed\n> and reinstalled node_modules but still got same error. If I loaded React\n> twice, then it must be failed with same error message without using this\n> module, but it's not. Replace the code to *not using* this module not\n> causes error, worked fine.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/164#issuecomment-275577714>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65ZzTZUGQTvidG8f6s06LsNrgHD3Jks5rWVwdgaJpZM4LuVIP>\n> .\n>\n. It should be the case that you want the `animation` prop to be `\"scroll\"`, then pass the `duration` and `easing` as props to `VelocityComponent`.\r\n\r\nFrom the `VelocityComponent` docs: \u201cUnrecognized properties are passed as options to Velocity (e.g. duration, delay, loop).\u201d. Does leaving off the `loop` param change anything?. You\u2019ll need to make sure that you\u2019re using Velocity 1.2.3 or later. I'm not sure how materialize is bringing it in, I couldn't obviously see from their code. You could poke around in Velocity to see how it attaches to `window`; I\u2019m not sure if requiring a later Velocity would overwrite the earlier one globally.. Are you importing Velocity directly? The library should avoid this issue for itself through `lib/velocity-animate-shim.js`. Maybe look in there and see if you can tell why it's trying to do the real import server-side. . Only import velocity and velocity.ui in your client code\u2019s entry point. Use `velocity-react` elsewhere in your components and it should avoid loading velocity on the server.. Looking at your code, I get the impression that on delete you\u2019re removing the `VelocityTransitionGroup` as well. You\u2019ll need to keep it around.\r\n\r\n`TransitionGroup`s are able to run for their children that leave the DOM, but if they themselves are removed then they\u2019re just gone.. I can\u2019t quite tell from your code. What are you seeing and what are you expecting?\r\n\r\n`VelocityTransitionGroup` is for when you have direct children entering and leaving the DOM, which doesn\u2019t seem to be the case with `GalleryManager`, at least in the code that you\u2019ve provided.. If all the elements are added to the `VelocityTransitionGroup` at once then you don\u2019t need `targetQuerySelector`, just `stagger`.\r\n\r\nThis is shown in the \u201cAdd 5 Rows\u201d part of the demo: https://github.com/twitter-fabric/velocity-react/blob/master/demo/examples/scrolling-group.jsx\r\n\r\nAlso note that `targetQuerySelector` is only for `VelocityComponent`, not `VelocityTransitionGroup`.. I can\u2019t reproduce this this morning, with npm or yarn. Are you still seeing the issue?. React is reconciling that to be the same `<Image>` component. Use a different `key` to force React to treat the `Image` as distinct.. Error message seems to indicate you have something else running at port 8080 on that machine.. You can see in the demo code how to use `registerEffect` to define animations in your own codebase.. It sounds like multiple React versions on the page so certainly double-check that in your node_modules. Other than that I\u2019m not sure.\r\n\r\n`velocity-react` doesn\u2019t use refs itself, though `ReactTransitionGroup` does.. What does the code look like?. I suspect that the issue is the `VelocityTransitionGroup` is being removed from the DOM while the transition around the `Image` is still going on.\r\n\r\nYou should in general have your `VelocityTransitionGroup`s be stable on the page, and only their contents appear and disappear.. You'll need to do your own `window` detection around a `require` for velocity.ui.\r\n. You may be able to start the tab with display: none, and I believe that Velocity may show it automatically.. You could give it a try but you'll probably have to do some digging yourself to see how the tabs are interacting with velocity.. The velocity animations don't run at all on the server. You'll want to display:none the element yourself and let velocity show it on the client.. Velocity doesn't have a `slideLeft` built in. The UI pack has `transition.slideLeftIn` and `transition.slideLeftOut` as preregistered effects, however.\r\n\r\nhttp://velocityjs.org/#uiPack. Thanks for the heads up. Will I think also move\nto reactjs/react-transition-group in the next release.\n\n\nOn Tue, Apr 11, 2017 at 2:04 AM, Zebra Flesh <notifications@github.com>\nwrote:\n\n> Using VelocityTransitionGroup with react 15.5 generates the following\n> deprecation notice:\n>\n> Warning: Accessing PropTypes via the main React package is deprecated. Use\n> the prop-types package from npm instead.\n>\n> Replacing React.PropTypes with PropTypes (via import PropTypes from\n> 'prop-types';) in VelocityComponent and VelocityTransitionGroup should\n> resolve this issue.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/183>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65ZBl_GzobEj7bWJTEjYlUY1BGHpWks5ruxf5gaJpZM4M5p_g>\n> .\n>\n. #191 has fixes for this if you're able to try it out. I had to change some of the internals and also add a prepublish step to this library in order to use ES2015 classes so i want to do a careful rollout.. Fixed in v1.3.0. Thanks for your patience!. Thanks for the heads-up! I'm planning on fixing this fairly soon.\n\nOn Wed, Apr 12, 2017 at 12:05 PM, James Sear <notifications@github.com>\nwrote:\n\n> Just a heads up\n>\n> warning.js:36 Warning: VelocityComponent: React.createClass is deprecated and will be removed in version 16. Use plain JavaScript classes instead. If you're not yet ready to migrate, create-react-class is available on npm as a drop-in replacement.\n>\n> https://facebook.github.io/react/blog/2017/04/07/react-\n> v15.5.0.html#migrating-from-react.createclass\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/184>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65U49InNCOGYUN91Zw8lFQd1LYEAsks5rvPZjgaJpZM4M7ov1>\n> .\n>\n. #191 has fixes for this if you're able to try it out. I had to change some of the internals and also add a prepublish step to this library in order to use ES2015 classes so i want to do a careful rollout.. Fixed in v1.3.0. Thanks for your patience!. This is likely a consequence of `VelocityComponent` using `stop` when switching animations. You could add a config property to change that to `finish` or allow it to `queue`, the way that the `runAnimation` method takes options.\r\n\r\nSee the demo for how these behaviors differ when calling `runAnimation`.. The same sort of configuration that is used in `runAnimation` could be\nadded to the props for VelocityComponent, if you're interested in sending\nin a PR. It's all a workaround for slideUp/slideDown's implementation.\n\nOn Tue, Apr 18, 2017 at 9:35 AM, Robin <notifications@github.com> wrote:\n\n> Ah I see how the demo does it. But this feels more like a workaround than\n> the way it should be to be honest.. This forces me to directly use the\n> Velocity API instead of using this wrapper in a nice way..\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/185#issuecomment-294846161>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65Xqb1JCOAGk0UE_zFiDvMaLVfim-ks5rxLwrgaJpZM4NAEoA>\n> .\n>\n. Yep, I think we're on the same page.\n\nOn Tue, Apr 18, 2017 at 10:01 AM, Robin <notifications@github.com> wrote:\n\n> @finneganh <https://github.com/finneganh> wouldn't it be better to add a\n> prop to the velocity component? That way in componentWillUpdate we can\n> check for that prop. If prop==='stop' then stopAnimation, otherwise\n> finishAnimation.\n>\n> What do you think?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/185#issuecomment-294853991>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65aPsI1m_ax7XF0Li_LQL9mgCs4AJks5rxMJLgaJpZM4NAEoA>\n> .\n>\n. I'm working on updating the demo to be hosted on Glitch. Will see if there's a good place to put it in then.. Cool, this is now live.. Interesting. I believe that the Promise bits have been added since velocity-react was written.\r\n\r\nI can take a look. This will probably help if things like stop / finish are actually asynchronous, but not if the Promises are just an alternative to the `complete` callback for animations.. Thanks! I'll aim for a new release of this tonight.. The `leave` animation won\u2019t run unless you remove the children from the `VelocityTransitionGroup` element.. Thanks for submitting, but I'm switching to ES2015 classes instead. Also, the `isMounted` checks can't be removed without replacing them with something.. Demo. Not bothering to figure out a classes way of doing the\nreact-tween-state mixin right now.\n\nOn Mon, Apr 24, 2017 at 9:55 AM, Anthony Barone <notifications@github.com>\nwrote:\n\n> *@tonybaroneee* commented on this pull request.\n> ------------------------------\n>\n> In demo/examples/toggle-box.jsx\n> <https://github.com/twitter-fabric/velocity-react/pull/191#discussion_r112951663>\n> :\n>\n> > @@ -34,7 +35,7 @@ var EFFECTS = [\n>    'perspectiveRight',\n>  ];\n>\n> -var ToggleBox = React.createClass({\n> +var ToggleBox = createReactClass({\n>\n> Why is this component using the legacy shim instead of getting the ES6\n> class conversion treatment?\n>\n> \u2014\n> You are receiving this because you were assigned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/pull/191#pullrequestreview-34303068>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65XGCvbrXi8Kw2pL1dVsDJiAJ5PLHks5rzKm-gaJpZM4NFZW_>\n> .\n>\n. @danielo515 Out now as v1.3.0.. Happy to consider a pull request.. Fixed in v1.3.0. Thanks for your patience!. FF to open a pull request!. Yeah, this is a bit complicated because slideDown / slideUp are custom animations in Velocity (in order to handle the height issue) so they can't be easily composed with the CSS animations.\r\n\r\nI think what you have is reasonable. . Awesome, thanks!!!. Cool. I should be able to push this out tomorrow. I wonder how many folks are on pre-15.. I'll do a patch release. I admit to not being overly pedantic about semver and dependencies.. Especially since the only reason to upgrade is to support more recent versions of React.. You're not forced to upgrade velocity-react. That being said, I think anyone developing apps without using a dependency lock file is asking for trouble already.. Thanks for having my back on the peer dependencies. It's clearly something I should have paid more attention to. Yay, open source!. Thanks for the fix!. This means you can do:\r\n\r\n`<VelocityComponent animation=\"transition.slideLeftIn\" duration={500} delay={1000} />`\r\n\r\n\u201cunrecognized\u201d in this case means props that aren\u2019t handled directly by `VelocityComponent`.. Eeep. Good catch. Thanks!. Fixed in v1.3.3. You can chain animations using UI pack and `VelocityHelpers.registerEffect`. The API syntax is a little wonky, just pass additional elements in the `calls` array property when you register the animation. Velocity will run the first animation, then run the second. That will let you chain the two translates without any explicit effort on your part.. Here\u2019s an example of `registerEffect` with a single call: \r\n\r\nhttps://github.com/twitter-fabric/velocity-react/blob/master/demo/examples/flap-box.jsx#L18\r\n\r\nadd more to the `calls` array to chain effects.. You should define the two animations outside of your render method, one for collapse and one for not-collapsed, and then use `this.props.collapse` to choose which one to pass as `animation`.. I'm open to PRs, but won't implement this personally.\r\n\r\nNote that most of the typing would actually come from Velocity.js, since these components pass through many of the props.. Thanks for putting this together. I'll try and take a look and see about getting it in. I use Flow rather than TypeScript in my own projects, so I'd have to get familiar with it first.. What effect are you trying to achieve?. That would be tricky. Calling `Velocity.stop` on the animated elements would stop them from animating. But, it would also cause the `TransitionGroup` to keep them around because `stop` keeps the `complete` callback from firing, which is how `VelocityTransitionGroup` can tell `TransitionGroup` to finally remove the element.\r\n\r\nYou might have better luck wrapping each image in a `<VelocityComponent>`, which can have its animation stopped (by setting its `animation` prop to `null`).. Is the issue here w/ velocity-react > 1.1.4 or react-transition-group >= 1.2.0?. `runAnimation` can be called externally with a config. See the demo.. I suppose it could, but consolidating that isn't a huge priority.. I think that this question is outside the scope of velocity-react issues.. Pretty sure that this wouldn't solve any bundle size issues as now the 4.x lodash modules may be coming from different places. \r\n\r\nI maintain that in a correctly-functioning build setup the current use of lodash 3 should not cause a problem. . For starters, just call `registerEffect` at the top of the file, not each time through `render`. \r\n\r\nYour `calls` property needs an extra set of `[]`s. Yes, it\u2019s odd, but that's how `Velocity.RegisterEffect` wants it. See the comment at the top of the velocity-helpers.js file.. Any reason why you think that this is important? The v1 branch is still being maintained. . Yeah, that's the big question. If not, I'll work on getting this upgraded,\nsince I want to use 16, too, but working through any timing changes with\nthe new version RTG implementation will likely be a pain.\n\nOn Sat, Sep 16, 2017 at 6:22 AM Luke Page <notifications@github.com> wrote:\n\n> Ok, sorry I didn't realize that.. if v1 will support react 16 it's not\n> important to me.\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/224#issuecomment-329959910>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65TJdCsMsPkTFTCROnN_NM5puiRHZks5si6FMgaJpZM4PZxWq>\n> .\n>\n. Ok, I\u2019ll have a look.\n\nWe still need a custom TransitionGroup subclass to coordinate transitions\nacross elements (this lets us use Velocity\u2019s stagger) but I think that the\nnew API can be adapted to that. The implementation won\u2019t be in the form of\npublic Transition elements.\n\nOn Wed, Sep 27, 2017 at 5:03 PM Jason Quense <notifications@github.com>\nwrote:\n\n> I'm gonna backport the peer dep range update to v1 but at this point i'd\n> consider v1 deprecated, i have no idea when it is going to stop working and\n> v2 contains a bunch of better stuff that should make implementation easier!\n> let me know if ya'll need info\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/issues/224#issuecomment-332654536>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65UYQbiena7MmPw4pd0SZvhzRPm8rks5smrgKgaJpZM4PZxWq>\n> .\n>\n. Have you noticed any issues at 1.2? I know at least someone else on here downgraded back to 1.1. . ![giphy](https://user-images.githubusercontent.com/260837/30888090-a24703cc-a2ec-11e7-9859-cae2ca3bf8c4.gif)\r\n. Not sure quite what effect you\u2019re going for, but using VelocityTransitionGroup to switch between two views is just going to be tricky. During transition, you\u2019ll likely have both views appearing, messing up the parent height. \r\n\r\nGood luck in debugging. I tend to slow the animations way down to see what\u2019s going on in detail. \r\n\r\nI have done a cross fade in the past, between two views of the same height. The trick is to set the leaving one to position absolute so it can exist in the same space as the entering one. . Thanks! I hadn't realized that they changed the org.. Not something I\u2019m interested in right now. If this package ever needs a large overhaul (like switching to the 2.0 API for react-transition-group) I\u2019d probably tackle other dependency updates at that point. . Your problem likely lies elsewhere. With a well-configured npm and resource bundler, the version of lodash that velocity-react uses should not impact any uses of different versions of lodash in your app.\r\n\r\nOr feel free to just use your fork. This repo doesn't change much. . Sure, should be able to get this out soon. AFAIK react-transition-group\ndidn\u2019t make any code changes for 16 support, so the benefit is just\nclearing up the peer dependency warnings.\n\nOn Wed, Oct 11, 2017 at 5:25 PM DrGor <notifications@github.com> wrote:\n\n> Could you please update the package.json file with newer version of\n> react-transition-group ?\n> The version 1.2.1 supports React 16.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google-fabric/velocity-react/issues/229>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65Ue1oYBtkE2CgJ8pK-7NEWaQP85aks5srTJUgaJpZM4P2JlB>\n> .\n>\n. What do you have running that's looking at the project's babelrc?\n\nvelocity-react ships from npm transpiled to ES5. You shouldn't need to\nre-babel it.\n\nOn Tue, Oct 17, 2017 at 9:25 AM, Sam Hastings <notifications@github.com>\nwrote:\n\n> Importing the velocity-react module is causing the following error:\n>\n> ERROR in ./node_modules/velocity-react/index.js\n> Module build failed: ReferenceError: Unknown plugin \"transform-object-rest-spread\" specified in \"/path/to/project/node_modules/velocity-react/.babelrc\" at 0, attempted to resolve relative to \"/path/to/project/node_modules/velocity-react\"\n>\n> Looking in the node_modules directory, the expected\n> babel-plugin-transform-object-rest-spread directory is indeed missing.\n>\n> I'm using NPM 5.3.0 and Node 8.0.0.\n>\n> Here are the dev dependencies from my project\u2019s package.json:\n>\n> \"autoprefixer\": \"^7.1.5\",\n> \"babel-core\": \"^6.26.0\",\n> \"babel-loader\": \"^7.1.2\",\n> \"babel-preset-env\": \"^1.6.0\",\n> \"babel-preset-react\": \"^6.24.1\",\n> \"css-loader\": \"^0.28.7\",\n> \"html-webpack-plugin\": \"^2.30.1\",\n> \"node-sass\": \"^4.5.3\",\n> \"postcss-loader\": \"^2.0.8\",\n> \"prop-types\": \"^15.6.0\",\n> \"react-router-dom\": \"^4.2.2\",\n> \"sass-loader\": \"^6.0.6\",\n> \"style-loader\": \"^0.19.0\",\n> \"velocity-react\": \"^1.3.3\",\n> \"webpack\": \"^3.8.0\",\n> \"webpack-dev-server\": \"^2.9.2\"\n>\n> I've tried deleting my node_modules directory and package-lock.json file\n> before running a fresh npm install but this hasn\u2019t fixed the issue.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google-fabric/velocity-react/issues/230>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65T1ViFFZnMAdui6zOpesN03EKvHdks5stKrmgaJpZM4P8Jb9>\n> .\n>\n. This is probably an underlying Velocity issue.\n\nOn Mon, Nov 27, 2017 at 4:13 PM Stephen Widom <notifications@github.com>\nwrote:\n\n> I'm using VelocityTransitionGroup as a tbody to animate new rows,\n> however, I find that there is no animation actually taking place. I've\n> referred to this\n> <https://github.com/google-fabric/velocity-react/issues/51> issue for the\n> proper attributes/properties, but here's the issue: with display:\n> \"table-row\", no animation takes place. The rows appear and disappear\n> suddenly. When I remove display: \"table-row\", the rows are animated\n> properly, but displayed as block, thus incorrectly. Let me know if I can\n> be any more insightful.\n>\n> <table id=\"players\">\n>                 <VelocityTransitionGroup enter={{animation: \"slideDown\", display: \"table-row\"}} leave={{animation: \"slideUp\", display: \"table-row\"}} component=\"tbody\">\n>                 {this.state.players.length > 0 && this.state.players.map((player) => (\n>                     <tr key={player.name}>\n>                         <td>\n>                             <i className=\"fa fa-fw fa-minus\" onClick={() => {this.decreaseCount(player);}}></i>\n>                         </td>\n>                         <td>\n>                             <i className=\"fa fa-fw fa-plus\" onClick={() => {this.increaseCount(player);}}></i>\n>                         </td>\n>                         <td className=\"name\">{player.name} </td>\n>                         <td className=\"count\">{player.count}</td>\n>                         <td>\n>                             <i className=\"fa fa-fw fa-user-times\" onClick={() => {this.removePlayer(player);}}></i>\n>                         </td>\n>                     </tr>\n>                 ))}\n>                 </VelocityTransitionGroup>\n>             </table>\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google-fabric/velocity-react/issues/232>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/AAP65RX0yv7Vzozg2dcSo9VsDlfMW3qgks5s6yXngaJpZM4QsTU8>\n> .\n>\n. ",
    "joan-smith": "LGTM\n. Ship it!\n. LGTM\n. LGTM\n. Ship it!\n. LGTM\n. ",
    "Cottin": "Ahh, that's probably it, thanks!\n\n```\nnode -v\nv0.10.26\n```\n. Ahh, that's probably it, thanks!\n\n```\nnode -v\nv0.10.26\n```\n. ",
    "jamwaffles": "I could probably have a crack at the short circuiting behaviour, but regrettably I don't have the time to figure out a nicer solution. Ideally you'd pre-calculate the styles on the server, but I think that's impossible particularly for stuff like `slideDown` as it depends on the height of rendered elements on the client. Some way of \"snapping\" the elements into their animated states would work ok, and it might even happen automagically if `velocity-react` binds to the `componentDidMount` event properly.\n. I've just had a quick go at trying to monkey patch Velocity on the server to no avail. Velocity depends heavily on the DOM so it would be pretty difficult to tear it away from it. I tried a conditional require (ew, I know)...\n\n``` javascript\nif(typeof window !== 'undefined') {\n  var Velocity = require('velocity-animate');\n} else {\n  var Velocity = function() { }\n}\n```\n\n... but I get an odd error on the client:\n\n> Uncaught TypeError: Cannot read property 'firstChild' of undefined\n\nReally not sure why this is triggered, but my React (0.13 FWIW) component is very basic and I don't think I'm doing anything wrong React-wise.\n. Thanks for taking the time to investigate this and fix it everyone. I'll try out the new release asap.\n. I could probably have a crack at the short circuiting behaviour, but regrettably I don't have the time to figure out a nicer solution. Ideally you'd pre-calculate the styles on the server, but I think that's impossible particularly for stuff like `slideDown` as it depends on the height of rendered elements on the client. Some way of \"snapping\" the elements into their animated states would work ok, and it might even happen automagically if `velocity-react` binds to the `componentDidMount` event properly.\n. I've just had a quick go at trying to monkey patch Velocity on the server to no avail. Velocity depends heavily on the DOM so it would be pretty difficult to tear it away from it. I tried a conditional require (ew, I know)...\n\n``` javascript\nif(typeof window !== 'undefined') {\n  var Velocity = require('velocity-animate');\n} else {\n  var Velocity = function() { }\n}\n```\n\n... but I get an odd error on the client:\n\n> Uncaught TypeError: Cannot read property 'firstChild' of undefined\n\nReally not sure why this is triggered, but my React (0.13 FWIW) component is very basic and I don't think I'm doing anything wrong React-wise.\n. Thanks for taking the time to investigate this and fix it everyone. I'll try out the new release asap.\n. ",
    "kenwheeler": "In my experience writing componentry for isomorphic environments, I've typically used https://www.npmjs.com/package/exenv to check whether I should be doing any window referencing. That said, certain things can be abstracted away from the dom, but others require dom querying. I have also experimented with circumventing this by storing dimensions in a cookie on the first request and querying them server side on the next request. I'll look at the source to see what I can do to avoid throwing on the server.\n. I'll take a look and see if I can sort this out in core velocity with a window existence check or something\n. In my experience writing componentry for isomorphic environments, I've typically used https://www.npmjs.com/package/exenv to check whether I should be doing any window referencing. That said, certain things can be abstracted away from the dom, but others require dom querying. I have also experimented with circumventing this by storing dimensions in a cookie on the first request and querying them server side on the next request. I'll look at the source to see what I can do to avoid throwing on the server.\n. I'll take a look and see if I can sort this out in core velocity with a window existence check or something\n. ",
    "mars": "@phopkins oh yeah the `npm link` + dupe React bit me too. I ended up pushing to a branch at Github and using `npm install --save github:owner/repo#branch` to test.\n. Addresses #14 \n. @phopkins this changeset makes VelocityTransitionGroup work correctly in my React 0.13.3 app, including skipping the `React.findDOMNode` code on the server while still running it in the browser.\n. @phopkins I just pulled #22 & verified locally: yes, both client & server-side rendering work for `VelocityTransitionGroup` component (the only Velocity component I'm using.)\n. The key to animating React Router transitions is to add a unique `key` prop to the route's children, so that the transition group recognizes that the components are changing.\n\nExample of a Route component that animates its children's transitions:\n\n``` javascript\nclass AppView extends React.Component {\n  render() {\n    const { pathname } = this.props.location;\n    const key = pathname.split('/')[1] || 'root';\n    const element = this.props.children || <div/>;\n    const elementToAnimate = React.cloneElement(element, { key });\n\n    return (\n      <div id=\"app-view\">\n        <VelocityTransitionGroup \n          enter={{animation: \"fadeIn\"}}\n          leave={{animation: \"fadeOut\"}}>\n\n          {elementToAnimate}\n\n        </VelocityTransitionGroup>\n      </div>\n    );\n  }\n}\n```\n\n(React 0.14, React Router 1.0.0-rc3, Velocity React 1.1.0)\n. This can be easily worked-around by avoiding Radium styles on the component's root element. Instead,  nest a `<div>` to hold the Radium styles.\n\nFor example, replace this component's root element style:\n\n``` javascript\nrender() {\n  return (\n    <div style={{ display: 'flex' }}>\n      <h1>{'Pure awesome'}</h1>\n    </div>\n  );\n}\n```\n\n\u2026with a nested structure:\n\n``` javascript\nrender() {\n  return (\n    <div>\n      <div style={{ display: 'flex' }}>\n        <h1>{'Pure awesome'}</h1>\n      </div>\n    </div>\n  );\n}\n```\n\nAny styles required on that root `<div/>` should be managed from the parent Velocity\\* component, using [the `style` prop](https://github.com/twitter-fabric/velocity-react#velocitytransitiongroup) & [forcefeeding](http://julian.com/research/velocity/#forcefeeding).\n. @phopkins oh yeah the `npm link` + dupe React bit me too. I ended up pushing to a branch at Github and using `npm install --save github:owner/repo#branch` to test.\n. Addresses #14 \n. @phopkins this changeset makes VelocityTransitionGroup work correctly in my React 0.13.3 app, including skipping the `React.findDOMNode` code on the server while still running it in the browser.\n. @phopkins I just pulled #22 & verified locally: yes, both client & server-side rendering work for `VelocityTransitionGroup` component (the only Velocity component I'm using.)\n. The key to animating React Router transitions is to add a unique `key` prop to the route's children, so that the transition group recognizes that the components are changing.\n\nExample of a Route component that animates its children's transitions:\n\n``` javascript\nclass AppView extends React.Component {\n  render() {\n    const { pathname } = this.props.location;\n    const key = pathname.split('/')[1] || 'root';\n    const element = this.props.children || <div/>;\n    const elementToAnimate = React.cloneElement(element, { key });\n\n    return (\n      <div id=\"app-view\">\n        <VelocityTransitionGroup \n          enter={{animation: \"fadeIn\"}}\n          leave={{animation: \"fadeOut\"}}>\n\n          {elementToAnimate}\n\n        </VelocityTransitionGroup>\n      </div>\n    );\n  }\n}\n```\n\n(React 0.14, React Router 1.0.0-rc3, Velocity React 1.1.0)\n. This can be easily worked-around by avoiding Radium styles on the component's root element. Instead,  nest a `<div>` to hold the Radium styles.\n\nFor example, replace this component's root element style:\n\n``` javascript\nrender() {\n  return (\n    <div style={{ display: 'flex' }}>\n      <h1>{'Pure awesome'}</h1>\n    </div>\n  );\n}\n```\n\n\u2026with a nested structure:\n\n``` javascript\nrender() {\n  return (\n    <div>\n      <div style={{ display: 'flex' }}>\n        <h1>{'Pure awesome'}</h1>\n      </div>\n    </div>\n  );\n}\n```\n\nAny styles required on that root `<div/>` should be managed from the parent Velocity\\* component, using [the `style` prop](https://github.com/twitter-fabric/velocity-react#velocitytransitiongroup) & [forcefeeding](http://julian.com/research/velocity/#forcefeeding).\n. ",
    "okize": "Ah, I just saw the index.html and started a local server in ./demo after running webpack. `npm run demo` is much better, let's close this PR. \n\nThis project looks great btw!\n. Ah, I just saw the index.html and started a local server in ./demo after running webpack. `npm run demo` is much better, let's close this PR. \n\nThis project looks great btw!\n. ",
    "jmfurlott": "@damassi Fixed this in the PR.  You can upgrade npm though to 3+ and get passed this error in the meantime for this, and any other, project\n. I am not too familiar with proper semver but I wouldn't upgrade this package to a major version unless just because React upgraded to a major version.  I would only go major if there are breaking changes/tons of new feature/etc relative to that project.\n\nBut at least a minor version :)\n\n@damassi It's been good for me so.  I think NPM just gave the developer more liberty so it should be fine as long as you are careful\n. Yeah, that's definitely best.  It's kind of an awkward time because I think 0.14 is almost stable but the separation of packages is making libraries hard to maintain wrt peerDepedencies.\n\nIf there is anything I can do help, let me know\n. @phopkins I would be happy to get this running on github pages for the repo if you want me to\n. Nah. Will check it out after work!\n. Sorry for the delay @phopkins but I just got it up running on my fork on the `gh-pages` branch.  I added a build task which the same as the demo script but it uses `webpack` instead of the dev server.  Additionally, I broke out the `demo/index.html` and put it in the root with updated paths.\n\nI had to remove `build` from the `.gitignore` so that the files would be available as well in version control.  Obviously this branch should never be merged into `master`. \n\nIt is visible here http://jmfurlott.github.io/velocity-react/\n\n@phopkins if you want me to merge this in, I think I need you to create a `gh-pages` so I have a branch that I can make a PR on\n. Ugh so weird. I couldn't make the PR because it said our commit history was completely different.  I ended up having to re-fork and re-add the changes. \n\nI think we have to have a `index.html` in the root for `gh-pages`. There may be a better way to do this.\n\nI am not sure what you mean by the webpack-dev-sever and referencing the build? I didn't touch the dev sever as I don't want it running at all.  If you can point me to more info (via another issue), I can check it out\n. In the `gh-pages` you don't need to start a server in order to view the `index.html`. Making that possible is essentially all my PR is.  You have to run `npm run build`, which executes and just spits out `build/bundle.js` (but this path could be anything), and then the `index.html` just loads in that bundle.  Obviously nothing is watching the changes or anything, but it works completely statically \n. @damassi Fixed this in the PR.  You can upgrade npm though to 3+ and get passed this error in the meantime for this, and any other, project\n. I am not too familiar with proper semver but I wouldn't upgrade this package to a major version unless just because React upgraded to a major version.  I would only go major if there are breaking changes/tons of new feature/etc relative to that project.\n\nBut at least a minor version :)\n\n@damassi It's been good for me so.  I think NPM just gave the developer more liberty so it should be fine as long as you are careful\n. Yeah, that's definitely best.  It's kind of an awkward time because I think 0.14 is almost stable but the separation of packages is making libraries hard to maintain wrt peerDepedencies.\n\nIf there is anything I can do help, let me know\n. @phopkins I would be happy to get this running on github pages for the repo if you want me to\n. Nah. Will check it out after work!\n. Sorry for the delay @phopkins but I just got it up running on my fork on the `gh-pages` branch.  I added a build task which the same as the demo script but it uses `webpack` instead of the dev server.  Additionally, I broke out the `demo/index.html` and put it in the root with updated paths.\n\nI had to remove `build` from the `.gitignore` so that the files would be available as well in version control.  Obviously this branch should never be merged into `master`. \n\nIt is visible here http://jmfurlott.github.io/velocity-react/\n\n@phopkins if you want me to merge this in, I think I need you to create a `gh-pages` so I have a branch that I can make a PR on\n. Ugh so weird. I couldn't make the PR because it said our commit history was completely different.  I ended up having to re-fork and re-add the changes. \n\nI think we have to have a `index.html` in the root for `gh-pages`. There may be a better way to do this.\n\nI am not sure what you mean by the webpack-dev-sever and referencing the build? I didn't touch the dev sever as I don't want it running at all.  If you can point me to more info (via another issue), I can check it out\n. In the `gh-pages` you don't need to start a server in order to view the `index.html`. Making that possible is essentially all my PR is.  You have to run `npm run build`, which executes and just spits out `build/bundle.js` (but this path could be anything), and then the `index.html` just loads in that bundle.  Obviously nothing is watching the changes or anything, but it works completely statically \n. ",
    "damassi": "Thanks @jmfurlott - too scared to upgrade to the new npm just yet but thanks for the info :) \n. ok cool, thanks so much; i'll give it a spin\n. Thanks @jmfurlott - too scared to upgrade to the new npm just yet but thanks for the info :) \n. ok cool, thanks so much; i'll give it a spin\n. ",
    "Aaike": "good to hear :) would love to see support for 0.14 ! :+1: \n. good to hear :) would love to see support for 0.14 ! :+1: \n. ",
    "Glench": "Oh cool, looks like #19 fixes all of the breaking changes. Looking forward to it!\n. Oh cool, looks like #19 fixes all of the breaking changes. Looking forward to it!\n. ",
    "mtpc": "I noticed that too, the `velocity-animate` package pulled by velocity-react's components is different from the one you would normally include globally in your project, since it comes bundled as its own dependency, effectively causing the UI pack to register on an object different that the one used by `velocity-react`.\nMy current workaround is to require globally the correct `velocity-animate` module\n\n``` javascript\nrequire('velocity-react/node_modules/velocity-animate')\nrequire('velocity-react/node_modules/velocity-animate/velocity.ui')\n```\n. If you're using a module bundler such as webpack, check that velocity-react doesn't bring its own react module (that is, react mustn't appear in its `node_modules` folder).\nIf that's the case then just removing and reinstalling velocity-react should work\n\nIn any case something in your dependencies is bringing a duplicate of react\n. I noticed that too, the `velocity-animate` package pulled by velocity-react's components is different from the one you would normally include globally in your project, since it comes bundled as its own dependency, effectively causing the UI pack to register on an object different that the one used by `velocity-react`.\nMy current workaround is to require globally the correct `velocity-animate` module\n\n``` javascript\nrequire('velocity-react/node_modules/velocity-animate')\nrequire('velocity-react/node_modules/velocity-animate/velocity.ui')\n```\n. If you're using a module bundler such as webpack, check that velocity-react doesn't bring its own react module (that is, react mustn't appear in its `node_modules` folder).\nIf that's the case then just removing and reinstalling velocity-react should work\n\nIn any case something in your dependencies is bringing a duplicate of react\n. ",
    "travisbloom": "But will https://github.com/twitter-fabric/velocity-react/blob/master/velocity-component.js#L42 use the version with UI pack added here: https://github.com/twitter-fabric/velocity-react/blob/master/demo/main.jsx#L6?\n\nAt least in my testing, it will pull the Velocity global object directly from the npm_modules folder. Again, there may be a webpack config I'm unaware of that fixes this\n. But will https://github.com/twitter-fabric/velocity-react/blob/master/velocity-component.js#L42 use the version with UI pack added here: https://github.com/twitter-fabric/velocity-react/blob/master/demo/main.jsx#L6?\n\nAt least in my testing, it will pull the Velocity global object directly from the npm_modules folder. Again, there may be a webpack config I'm unaware of that fixes this\n. ",
    "larryhengl": "Nice.  This appears to have solved my First Argument error. Similar to https://github.com/julianshapiro/velocity/issues/327\n. Nice.  This appears to have solved my First Argument error. Similar to https://github.com/julianshapiro/velocity/issues/327\n. ",
    "kristian-puccio": "Thanks!\n\nOn 6 October 2015 at 00:41, Pete Hopkins notifications@github.com wrote:\n\n> P.S.: Glad to hear you're liking it!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/20#issuecomment-145530844\n> .\n. Thanks!\n\nOn 6 October 2015 at 00:41, Pete Hopkins notifications@github.com wrote:\n\n> P.S.: Glad to hear you're liking it!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/twitter-fabric/velocity-react/issues/20#issuecomment-145530844\n> .\n. ",
    "nathantalewis": "I'm not sure if you want this as a separate issue, but it looks like the complete callback doesn't fire on the leave animation of a `VelocityTransitionGroup`.\n\nIn the following, `begin` and `progress` work happily, but `complete` is never called.\n\n``` jsx\ngetInitialState() {\n  return { maximize: undefined };\n},\n\nchangeStateToMaximize() {\n  this.setState({maximize: true});\n},\n\nrender() {\n  return (<VelocityTransitionGroup\n      enter={{ animation: \"slideDown\" }}\n      leave={{ animation: { height: \"100%\" },\n        begin: () => console.log(\"Beginning...\"),\n        progress: () => console.log(\"Progress...\"),\n        complete: () => console.log(\"Completed.\") }}\n      runOnMount={true} >\n    {this.state.maximize !== undefined ? undefined : (<div key=\"default\" style={{ bottom: 0, height: \"200px\", left: 0, position: \"fixed\", width: \"100%\" }}>\n      <div onClick={this.changeStateToMaximize}>\n        Inner text\n      </div>\n    </div>)}\n  </VelocityTransitionGroup>);\n}\n```\n. @bsalex, sorry no. We ended up going with react-gsap-enhancer instead. https://github.com/azazdeaz/react-gsap-enhancer\n. I'm not sure if you want this as a separate issue, but it looks like the complete callback doesn't fire on the leave animation of a `VelocityTransitionGroup`.\n\nIn the following, `begin` and `progress` work happily, but `complete` is never called.\n\n``` jsx\ngetInitialState() {\n  return { maximize: undefined };\n},\n\nchangeStateToMaximize() {\n  this.setState({maximize: true});\n},\n\nrender() {\n  return (<VelocityTransitionGroup\n      enter={{ animation: \"slideDown\" }}\n      leave={{ animation: { height: \"100%\" },\n        begin: () => console.log(\"Beginning...\"),\n        progress: () => console.log(\"Progress...\"),\n        complete: () => console.log(\"Completed.\") }}\n      runOnMount={true} >\n    {this.state.maximize !== undefined ? undefined : (<div key=\"default\" style={{ bottom: 0, height: \"200px\", left: 0, position: \"fixed\", width: \"100%\" }}>\n      <div onClick={this.changeStateToMaximize}>\n        Inner text\n      </div>\n    </div>)}\n  </VelocityTransitionGroup>);\n}\n```\n. @bsalex, sorry no. We ended up going with react-gsap-enhancer instead. https://github.com/azazdeaz/react-gsap-enhancer\n. ",
    "bsalex": "@nathantalewis, did you find any workaround?\n. Just in case anyone else has the same problem.\nWe've ended up using `progress(elements, complete)` callback, checking for `complete === 1`\n. @nathantalewis, did you find any workaround?\n. Just in case anyone else has the same problem.\nWe've ended up using `progress(elements, complete)` callback, checking for `complete === 1`\n. ",
    "py-in-the-sky": "I just gave the latest of [master](https://github.com/py-in-the-sky/gae-flask-redux-react-starter-kit/commit/1624e9443c5e2caa472bb7f78dd8f01555380b4e#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R66) a [try](https://github.com/py-in-the-sky/gae-flask-redux-react-starter-kit/commit/1624e9443c5e2caa472bb7f78dd8f01555380b4e#diff-e34584f6eff99312dd7c0732eb12af77R12).  Works brilliantly!  Thank you!\n\nWhen do you plan on your next npm release?\n. [Here's](https://github.com/rackt/react-router/blob/master/examples/animations/app.js) an example from the react-router repo.  It uses `ReactCSSTransitionGroup` instead of velocity-react, but the same design principles apply.\n. I just gave the latest of [master](https://github.com/py-in-the-sky/gae-flask-redux-react-starter-kit/commit/1624e9443c5e2caa472bb7f78dd8f01555380b4e#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R66) a [try](https://github.com/py-in-the-sky/gae-flask-redux-react-starter-kit/commit/1624e9443c5e2caa472bb7f78dd8f01555380b4e#diff-e34584f6eff99312dd7c0732eb12af77R12).  Works brilliantly!  Thank you!\n\nWhen do you plan on your next npm release?\n. [Here's](https://github.com/rackt/react-router/blob/master/examples/animations/app.js) an example from the react-router repo.  It uses `ReactCSSTransitionGroup` instead of velocity-react, but the same design principles apply.\n. ",
    "julianshapiro": "I will link the demo from the velocity docs too.\n. I will link the demo from the velocity docs too.\n. ",
    "winkler1": "![](http://4.bp.blogspot.com/-Q5tVyMkoE_0/UUw8v4cgbAI/AAAAAAAAA4s/5DwyopBdidc/s400/pulp_thumb+christian+d.jpg)\n. ![](http://4.bp.blogspot.com/-Q5tVyMkoE_0/UUw8v4cgbAI/AAAAAAAAA4s/5DwyopBdidc/s400/pulp_thumb+christian+d.jpg)\n. ",
    "arush": "inner VelocityTransitionGroup runOnMount={true} causes a flicker, and the parent slideDown doesn't animate, but the inner does\n![runonmount](https://cloud.githubusercontent.com/assets/329761/10638819/bda4b296-7804-11e5-9a46-f740ef6cc074.gif)\n\nchanged the inner to a VelocityComponent with runOnMount={true}, does not animate, just renders in the final position, but the parent works ok. NB: delay is not working on the inner\n![velocitycomponent](https://cloud.githubusercontent.com/assets/329761/10639179/b425c168-7806-11e5-80cd-fb2394ebb8b2.gif)\n. ok you're right about slideDown and delay being incompatible, that makes sense. I was already using block elements, so it was just the slideDown and delay issue.\n\nIn the end, i had to hardcode the height, and make the outer component a VelocityComponent animating the height, then the inner is a VelocityTransitionGroup. Unfortunately its pretty messy code, so I wish there was some built-in support for either animating to/from height:auto or the aforementioned slideDown<->delay issue.\n\n![chained-final](https://cloud.githubusercontent.com/assets/329761/10643280/eb3a5002-7819-11e5-8477-bd1a5ef0422a.gif)\n. inner VelocityTransitionGroup runOnMount={true} causes a flicker, and the parent slideDown doesn't animate, but the inner does\n![runonmount](https://cloud.githubusercontent.com/assets/329761/10638819/bda4b296-7804-11e5-9a46-f740ef6cc074.gif)\n\nchanged the inner to a VelocityComponent with runOnMount={true}, does not animate, just renders in the final position, but the parent works ok. NB: delay is not working on the inner\n![velocitycomponent](https://cloud.githubusercontent.com/assets/329761/10639179/b425c168-7806-11e5-80cd-fb2394ebb8b2.gif)\n. ok you're right about slideDown and delay being incompatible, that makes sense. I was already using block elements, so it was just the slideDown and delay issue.\n\nIn the end, i had to hardcode the height, and make the outer component a VelocityComponent animating the height, then the inner is a VelocityTransitionGroup. Unfortunately its pretty messy code, so I wish there was some built-in support for either animating to/from height:auto or the aforementioned slideDown<->delay issue.\n\n![chained-final](https://cloud.githubusercontent.com/assets/329761/10643280/eb3a5002-7819-11e5-8477-bd1a5ef0422a.gif)\n. ",
    "ianobermiller": ">  it would be up to Radium to avoid stomping existing style attributes\n\nSorry, I haven't taken the time to try to debug this. What exactly is causing the incompatibility? Radium expects `style` to be either a normal style object or an array of such style objects, optionally augmented with special keys like `:hover` and `@media`.\n. Ah, sure, you will of course run into this if you are rendering the style element using React and then changing it using Velocity. This isn't Radium specific, and there is likely no way to avoid it other than using a container element to for Velocity, and Radium on the inside.\n. >  it would be up to Radium to avoid stomping existing style attributes\n\nSorry, I haven't taken the time to try to debug this. What exactly is causing the incompatibility? Radium expects `style` to be either a normal style object or an array of such style objects, optionally augmented with special keys like `:hover` and `@media`.\n. Ah, sure, you will of course run into this if you are rendering the style element using React and then changing it using Velocity. This isn't Radium specific, and there is likely no way to avoid it other than using a container element to for Velocity, and Radium on the inside.\n. ",
    "cdebotton": "**UPDATE:** I just noticed that #54 hasn't been merged yet. Would love to have this functionality available in a universal application that I'm working on!\n\n---\n\nI'm still having the issue with `velocity-react`@1.1.1. I've wrapped the require for velocity-animate/velocity.ui in a check to determine if the code is being run in the browser environment, but I receive the error: \n\n`throw \"Velocity.RegisterEffect not found. You need to require('velocity-animate/velocity.ui') at a top level for UI Pack.\";`\n\nSeem's like it's not no-op'ing on the server.\n. **UPDATE:** I just noticed that #54 hasn't been merged yet. Would love to have this functionality available in a universal application that I'm working on!\n\n---\n\nI'm still having the issue with `velocity-react`@1.1.1. I've wrapped the require for velocity-animate/velocity.ui in a check to determine if the code is being run in the browser environment, but I receive the error: \n\n`throw \"Velocity.RegisterEffect not found. You need to require('velocity-animate/velocity.ui') at a top level for UI Pack.\";`\n\nSeem's like it's not no-op'ing on the server.\n. ",
    "approots": "I have a crude toggle working. The problem is that the incoming html takes space while the outgoing html fades out. I can set display:'none' in the \"leave\" animation, or I suppose I could use absolute positioning. Is there any way to delay and not mount the incoming html/component (or display:'none') until the outgoing html/component fades out?\n\nAnyway, here's the code:\n\n```\nvar MyComponent = React.createClass({\n\n    getInitialState: function() {\n        return {showNewComponent:false}\n    },\n\n    handleClick: function() {\n        this.setState({showNewComponent: !this.state.showNewComponent});\n    },\n\n    render: function () {\n        var enterAnimation = {\n            animation: 'fadeIn',//{opacity: 1},\n            duration: 800,\n            //delay: 500\n        };\n\n        var leaveAnimation = {\n            animation: 'fadeOut',//{opacity: 0},\n            duration: 800,\n            style: {display: 'none'}\n        };\n\n        return (\n            <div style={{backgroundColor:'#E5F2FF'}}>\n                <button onClick={this.handleClick}>Toggle</button>\n\n                <VelocityTransitionGroup enter={enterAnimation} leave={leaveAnimation}>\n                    {this.state.showNewComponent ? undefined : <div>INITIAL COMPONENT</div> }\n                </VelocityTransitionGroup>\n\n                <VelocityTransitionGroup enter={enterAnimation} leave={leaveAnimation}>\n                    {this.state.showNewComponent ? <div>NEW COMPONENT</div> : undefined }\n                </VelocityTransitionGroup>          \n            </div>\n        );\n    },\n});\n```\n. I have a crude toggle working. The problem is that the incoming html takes space while the outgoing html fades out. I can set display:'none' in the \"leave\" animation, or I suppose I could use absolute positioning. Is there any way to delay and not mount the incoming html/component (or display:'none') until the outgoing html/component fades out?\n\nAnyway, here's the code:\n\n```\nvar MyComponent = React.createClass({\n\n    getInitialState: function() {\n        return {showNewComponent:false}\n    },\n\n    handleClick: function() {\n        this.setState({showNewComponent: !this.state.showNewComponent});\n    },\n\n    render: function () {\n        var enterAnimation = {\n            animation: 'fadeIn',//{opacity: 1},\n            duration: 800,\n            //delay: 500\n        };\n\n        var leaveAnimation = {\n            animation: 'fadeOut',//{opacity: 0},\n            duration: 800,\n            style: {display: 'none'}\n        };\n\n        return (\n            <div style={{backgroundColor:'#E5F2FF'}}>\n                <button onClick={this.handleClick}>Toggle</button>\n\n                <VelocityTransitionGroup enter={enterAnimation} leave={leaveAnimation}>\n                    {this.state.showNewComponent ? undefined : <div>INITIAL COMPONENT</div> }\n                </VelocityTransitionGroup>\n\n                <VelocityTransitionGroup enter={enterAnimation} leave={leaveAnimation}>\n                    {this.state.showNewComponent ? <div>NEW COMPONENT</div> : undefined }\n                </VelocityTransitionGroup>          \n            </div>\n        );\n    },\n});\n```\n. ",
    "hellogerard": "You can put them all in the same transition group, if you like:\n\n```\n                <VelocityTransitionGroup enter={enterAnimation} leave={leaveAnimation}>\n                    {this.state.showNewComponent ? undefined : <div>INITIAL COMPONENT</div> }\n                    {this.state.showNewComponent ? <div>NEW COMPONENT</div> : undefined }\n                </VelocityTransitionGroup>          \n```\n. You can put them all in the same transition group, if you like:\n\n```\n                <VelocityTransitionGroup enter={enterAnimation} leave={leaveAnimation}>\n                    {this.state.showNewComponent ? undefined : <div>INITIAL COMPONENT</div> }\n                    {this.state.showNewComponent ? <div>NEW COMPONENT</div> : undefined }\n                </VelocityTransitionGroup>          \n```\n. ",
    "thomas-jeepe": "I also went through with the debugger in chrome and it looks like VelocityTransitionGroup has an object for type\n. I also went through with the debugger in chrome and it looks like VelocityTransitionGroup has an object for type\n. ",
    "joe-strummer": "I had a similar problem, and phopkins' fix worked. Does anyone know why it works?\n. I had a similar problem, and phopkins' fix worked. Does anyone know why it works?\n. ",
    "31526": "yes, react\n. yes, react\n. ",
    "chrisdrackett": "actually the code I pasted below is causing issues with react, so I don't currently have a solution :)\n. yeah, using web pack. I eventually got it to work, but only after removing node_modules and reinstalling. Everyone on my team had to do the same thing. Not sure what was going on, but its fixed now with a fresh install.\n. looks like if I leave out `enter` I don't have the same issue.\n. I see, so is there any way to measure an element that is used in VelocityTransitionGroup?\n. that would take care of the top level component, the issue here is that this affects any components mounting under the VelocityTransitionGroup.\n. right, but say I have a component inside the `Loading` component mentioned above. They also return a width of 0 on `ComponentDidMount` when they are the child of a `VelocityTransitionGroup`\n. the sub-components know nothing about `VelocityTransitionGroup` (its a couple components down the tree) and are trying to measure on `ComponentDidMount`. I'm not sure how to tell in what order things are happening at this point.\n. I'm guessing the problem is that the parent of the elements I'm trying to measure are set to `display: none`:\n\nhttps://github.com/twitter-fabric/velocity-react/blob/master/velocity-transition-group.js#L153\n\nwhich means that anything under that element will have a width/height of `0`\n. @phopkins confirmed that if I comment out the above line everything works as expected. I also tried replacing it with\n\n`Velocity.CSS.setPropertyValue(node, 'opacity', '0');`\n\nor \n\n`Velocity.CSS.setPropertyValue(node, 'visibility', 'hidden');`\n\nwhich might also suppress a flash, but without removing the ability to measure any children on mount. I'm still working through the implications of this.\n. for my current use case anything that hides the element while keeping its physical measurements the same would be ideal. So I think either `absolute/opacity` and `visibility: hidden` should both provide that.\n. actually the code I pasted below is causing issues with react, so I don't currently have a solution :)\n. yeah, using web pack. I eventually got it to work, but only after removing node_modules and reinstalling. Everyone on my team had to do the same thing. Not sure what was going on, but its fixed now with a fresh install.\n. looks like if I leave out `enter` I don't have the same issue.\n. I see, so is there any way to measure an element that is used in VelocityTransitionGroup?\n. that would take care of the top level component, the issue here is that this affects any components mounting under the VelocityTransitionGroup.\n. right, but say I have a component inside the `Loading` component mentioned above. They also return a width of 0 on `ComponentDidMount` when they are the child of a `VelocityTransitionGroup`\n. the sub-components know nothing about `VelocityTransitionGroup` (its a couple components down the tree) and are trying to measure on `ComponentDidMount`. I'm not sure how to tell in what order things are happening at this point.\n. I'm guessing the problem is that the parent of the elements I'm trying to measure are set to `display: none`:\n\nhttps://github.com/twitter-fabric/velocity-react/blob/master/velocity-transition-group.js#L153\n\nwhich means that anything under that element will have a width/height of `0`\n. @phopkins confirmed that if I comment out the above line everything works as expected. I also tried replacing it with\n\n`Velocity.CSS.setPropertyValue(node, 'opacity', '0');`\n\nor \n\n`Velocity.CSS.setPropertyValue(node, 'visibility', 'hidden');`\n\nwhich might also suppress a flash, but without removing the ability to measure any children on mount. I'm still working through the implications of this.\n. for my current use case anything that hides the element while keeping its physical measurements the same would be ideal. So I think either `absolute/opacity` and `visibility: hidden` should both provide that.\n. ",
    "whatknight": "the tagged v1.1.1 also points to react 0.14.0\n. appears to be fixed :+1: \n. the tagged v1.1.1 also points to react 0.14.0\n. appears to be fixed :+1: \n. ",
    "RachBLondon": "Yeah I am also getting the same error. I have tried installing the latest react & react-dom, bur its still not working.  I am curious to get started with this, so appreciate any pointers - ta!\n. Thanks for getting back to me so quickly on this :-)\n. Yeah I am also getting the same error. I have tried installing the latest react & react-dom, bur its still not working.  I am curious to get started with this, so appreciate any pointers - ta!\n. Thanks for getting back to me so quickly on this :-)\n. ",
    "PEM--": "That's due to an issue on `webpack-1.12.3`: https://github.com/webpack/webpack/issues/1596\n\nIn your `package.json`, set webpack and webpack-dev-server to their former releases:\n\n``` json\n    \"webpack\": \"1.12.2\",\n    \"webpack-dev-server\": \"1.10.0 \"\n```\n. `webpack-1.12.4` has just been published and it fixes this issue. @msurguy, you should close this.\n. My pleasure. Thank you for sharing your library. I will surely use it for one of my next project.\n. That's due to an issue on `webpack-1.12.3`: https://github.com/webpack/webpack/issues/1596\n\nIn your `package.json`, set webpack and webpack-dev-server to their former releases:\n\n``` json\n    \"webpack\": \"1.12.2\",\n    \"webpack-dev-server\": \"1.10.0 \"\n```\n. `webpack-1.12.4` has just been published and it fixes this issue. @msurguy, you should close this.\n. My pleasure. Thank you for sharing your library. I will surely use it for one of my next project.\n. ",
    "dcalhoun": "I ran into this same issue. The way I resolved it was adding `velocity-animate` as an [explicit dependency of my app](http://stackoverflow.com/a/9736561/378228). I'm not sure if this was the intended/best approach, but I am now able to require the two `velocity-animate` packages like so:\n\nFirst:\n`npm i -S velocity-animate`\n\nThen:\n\n``` javascript\nimport 'velocity-animate'\nimport 'velocity-animate/velocity.ui'\nimport { VelocityTransitionGroup, velocityHelpers } from 'velocity-react'\n```\n. @finneganh I thought about this some more. Should velocity-animated be added as a `peerDependency` for this package?\n. I realize now that a parent project has to directly require `velocity-animate` _only_ if you desire \"to use the Velocity UI Pack\" (from the [README](https://github.com/twitter-fabric/velocity-react/tree/v1.1.4#installation)). So, I suppose that rules out using `peerDependencies`.\n\nI suppose a nice middle ground could be adding note to the README that you need to install `velocity-animate` yourself prior to directly requiring it. That may be common sense, but the wording of this project's README tripped me up.\n\nThanks for the help!\n. Thank you for implementing support with the `complete` callback.\n\nJust to follow up, it appears the `reset` property of `Velocity.RegisterEffect` _is_ working within velocity-react. It turns out my issue is that [Velocity does not accept non-integer values](https://github.com/julianshapiro/velocity/issues/366#issuecomment-64450918).\n. I ran into this same issue. The way I resolved it was adding `velocity-animate` as an [explicit dependency of my app](http://stackoverflow.com/a/9736561/378228). I'm not sure if this was the intended/best approach, but I am now able to require the two `velocity-animate` packages like so:\n\nFirst:\n`npm i -S velocity-animate`\n\nThen:\n\n``` javascript\nimport 'velocity-animate'\nimport 'velocity-animate/velocity.ui'\nimport { VelocityTransitionGroup, velocityHelpers } from 'velocity-react'\n```\n. @finneganh I thought about this some more. Should velocity-animated be added as a `peerDependency` for this package?\n. I realize now that a parent project has to directly require `velocity-animate` _only_ if you desire \"to use the Velocity UI Pack\" (from the [README](https://github.com/twitter-fabric/velocity-react/tree/v1.1.4#installation)). So, I suppose that rules out using `peerDependencies`.\n\nI suppose a nice middle ground could be adding note to the README that you need to install `velocity-animate` yourself prior to directly requiring it. That may be common sense, but the wording of this project's README tripped me up.\n\nThanks for the help!\n. Thank you for implementing support with the `complete` callback.\n\nJust to follow up, it appears the `reset` property of `Velocity.RegisterEffect` _is_ working within velocity-react. It turns out my issue is that [Velocity does not accept non-integer values](https://github.com/julianshapiro/velocity/issues/366#issuecomment-64450918).\n. ",
    "lauffenp": "Great library. However, I am still finding that I have to require the velocity helpers in my low-level components to get Velocity.RegisterEffect in my window. I have tried running `npm dedupe`, but I'm getting `Cannot read property 'localeCompare' of null` error, which I think is an npm issue.\r\n\r\nDo you think this is really the problem? I have of course explicitly installed the velocity-animate package.\r\n\r\nI'm happy to provide any additional info if it helps.. Great library. However, I am still finding that I have to require the velocity helpers in my low-level components to get Velocity.RegisterEffect in my window. I have tried running `npm dedupe`, but I'm getting `Cannot read property 'localeCompare' of null` error, which I think is an npm issue.\r\n\r\nDo you think this is really the problem? I have of course explicitly installed the velocity-animate package.\r\n\r\nI'm happy to provide any additional info if it helps.. ",
    "limpbrains": "@phopkins Thanks this works!\n. @phopkins Thanks this works!\n. ",
    "tonybaroneee": ":ship: \n. :shell: :sheep: :ship: \n. LGTM! (I failed again by commenting on the commit itself, but I'll just blame you for not linking me /files like you did with the other one :laughing: )\n. :dollar: :euro: :pound: :yen: \n. Good catch, thanks!\n. Thanks for calling this out, working on a PR to fix this now!\n. Sure thing, good to know. Hope you're enjoying yourself!\n. @Moeface @luisherranz Can you clarify which component you were seeing this on? `VelocityComponent` or `VelocityTransitionGroup`?\n. @finneganh Any thoughts on this? I don't see any property spreading happening in `velocity-component` and can't reproduce in our demo environment. I did find and fix some issues with our demo components, however (see https://github.com/twitter-fabric/velocity-react/pull/118).\n. It's using `\"react-addons-transition-group\": \"^0.14.0 || ^15.0.0\",` as a strict dependency. Could you double check your installed version of `react-addons-transition-group` by `cat`'ing out the `node_modules/react-addons-transition-group/package.json` version?\n. Ah right, I don't believe it matters since the actual logic is just embedded within React.\n. Ah, so neither `VelocityTransitionGroup` nor `ReactTransitionGroup` has any conception of a \"duration\" that I know of (you can find the valid props [here](https://github.com/twitter-fabric/velocity-react/blob/master/velocity-transition-group.js#L105)). So, you can simple remove that property or incorporate it into your `enter`/`leave` props.\n\nAs for `VelocityComponent`, I can't reproduce the warning with a `duration` prop placed on it.\n. No worries, glad you have it figured out!\n. Related to https://github.com/twitter-fabric/velocity-react/issues/114\n. Thanks, I'd be happy to spin up a release PR as well.\n. Self\n. Already approved in https://github.com/twitter-fabric/velocity-react/pull/135\n. :ship: \n. :shell: :sheep: :ship: \n. LGTM! (I failed again by commenting on the commit itself, but I'll just blame you for not linking me /files like you did with the other one :laughing: )\n. :dollar: :euro: :pound: :yen: \n. Good catch, thanks!\n. Thanks for calling this out, working on a PR to fix this now!\n. Sure thing, good to know. Hope you're enjoying yourself!\n. @Moeface @luisherranz Can you clarify which component you were seeing this on? `VelocityComponent` or `VelocityTransitionGroup`?\n. @finneganh Any thoughts on this? I don't see any property spreading happening in `velocity-component` and can't reproduce in our demo environment. I did find and fix some issues with our demo components, however (see https://github.com/twitter-fabric/velocity-react/pull/118).\n. It's using `\"react-addons-transition-group\": \"^0.14.0 || ^15.0.0\",` as a strict dependency. Could you double check your installed version of `react-addons-transition-group` by `cat`'ing out the `node_modules/react-addons-transition-group/package.json` version?\n. Ah right, I don't believe it matters since the actual logic is just embedded within React.\n. Ah, so neither `VelocityTransitionGroup` nor `ReactTransitionGroup` has any conception of a \"duration\" that I know of (you can find the valid props [here](https://github.com/twitter-fabric/velocity-react/blob/master/velocity-transition-group.js#L105)). So, you can simple remove that property or incorporate it into your `enter`/`leave` props.\n\nAs for `VelocityComponent`, I can't reproduce the warning with a `duration` prop placed on it.\n. No worries, glad you have it figured out!\n. Related to https://github.com/twitter-fabric/velocity-react/issues/114\n. Thanks, I'd be happy to spin up a release PR as well.\n. Self\n. Already approved in https://github.com/twitter-fabric/velocity-react/pull/135\n. ",
    "richard-lopes": "I see. Ok I am going to see if I can alter `enter` / `leave` on demand. Thanks.\n. For the sake of sharing I have it to work.\nI ended up with something that looks like this:\n\n``` Javascript\n  render() {\n    const props = this.props.enable ? {enter: fadeInRight, leave: fadeOutRight} : {};\n\n    return (\n      <VelocityTransitionGroup component=\"tbody\" {...props}>\n        {this.props.children}\n      </VelocityTransitionGroup>\n    );\n  }\n```\n. Thanks for taking the time to answer this.\nThis is a bit more involved than I would have hoped but I will take your advice and fork the project. I think your option 2 will be better indeed. I also believe composition is a better approach.\nMy immediate objective is to have it working in my context but when I get a minute I can clean things up and submit a PR.\nI keep you posted here.\n. I am going to address this now that I am back from 1 month holiday.\n. I see. Ok I am going to see if I can alter `enter` / `leave` on demand. Thanks.\n. For the sake of sharing I have it to work.\nI ended up with something that looks like this:\n\n``` Javascript\n  render() {\n    const props = this.props.enable ? {enter: fadeInRight, leave: fadeOutRight} : {};\n\n    return (\n      <VelocityTransitionGroup component=\"tbody\" {...props}>\n        {this.props.children}\n      </VelocityTransitionGroup>\n    );\n  }\n```\n. Thanks for taking the time to answer this.\nThis is a bit more involved than I would have hoped but I will take your advice and fork the project. I think your option 2 will be better indeed. I also believe composition is a better approach.\nMy immediate objective is to have it working in my context but when I get a minute I can clean things up and submit a PR.\nI keep you posted here.\n. I am going to address this now that I am back from 1 month holiday.\n. ",
    "ha404": "Okay, in this case you're saying \"compatible\" which leads me to believe it would actually perform the animations. I think \"partially compatible\" might lead to less confusion here if I am understanding correctly.\n. Okay, in this case you're saying \"compatible\" which leads me to believe it would actually perform the animations. I think \"partially compatible\" might lead to less confusion here if I am understanding correctly.\n. ",
    "snow01": "Figured out how to hack it.\n. Figured out how to hack it.\n. ",
    "RandScullard": "By \"get to the next tick of the event loop\", do you mean just do a setTimeout of zero?\n. By \"get to the next tick of the event loop\", do you mean just do a setTimeout of zero?\n. ",
    "samn": "approved\n. approved\n. ",
    "stheobald": "I still couldn't see a way to trigger the animation based on a property with VelocityComponent. \nSo I required the shim: `const velocity = require('velocity-react/lib/velocity-animate-shim');`\nand did exactly as I outlined above.\n. I still couldn't see a way to trigger the animation based on a property with VelocityComponent. \nSo I required the shim: `const velocity = require('velocity-react/lib/velocity-animate-shim');`\nand did exactly as I outlined above.\n. ",
    "mxstbr": "@phopkins you are a genious. That works, thanks!\n. @phopkins you are a genious. That works, thanks!\n. ",
    "restlessbit": "No problem!\n. No problem!\n. ",
    "zenonn37": "Thanks, I had two installed!\n. Thanks, I had two installed!\n. ",
    "tomRedox": "Hi @phopkins, thanks for the info. I got to the bottom of the issue, it was to do with Meteor; it causes a double render (one when the data is subscribed to and and another when the data actually gets to the client).  That meant that the actual render order was old state -> nothing -> new state, rather than old state -> new state which I think was stopping the animation working.  Splitting the component into a sub-component with a shouldComponentUpdate override that stops it rendering during the nothing phase got things working.\n. Hi @phopkins, thanks for the info. I got to the bottom of the issue, it was to do with Meteor; it causes a double render (one when the data is subscribed to and and another when the data actually gets to the client).  That meant that the actual render order was old state -> nothing -> new state, rather than old state -> new state which I think was stopping the animation working.  Splitting the component into a sub-component with a shouldComponentUpdate override that stops it rendering during the nothing phase got things working.\n. ",
    "TCMiranda": "It seems that the only problem is the \"namespace\" isn't it?\nFrom: `lodash/lang/isEqual`\nTo: `lodash/isEqual`\n\nPluck has been deprecated also, will it be hard to upgrade?\n. It seems that the only problem is the \"namespace\" isn't it?\nFrom: `lodash/lang/isEqual`\nTo: `lodash/isEqual`\n\nPluck has been deprecated also, will it be hard to upgrade?\n. ",
    "BLMaster": "Yeah you're right..\nI got the error when upgraded the package. \nReinstalling velocity-react will solve it..\n\nThanks!\n. Yeah you're right..\nI got the error when upgraded the package. \nReinstalling velocity-react will solve it..\n\nThanks!\n. ",
    "axelson": "+1 to this so that I don't need an extra copy of lodash in my distributed bundle\n. Yeah, that's about what I figured. I think simultaneous animations will be non-trivial to integrate into a declarative approach.\n. @Antho2407 can you give some background on how you changed your webpack configuration? I believe I'm running into the same issue.. +1 to this so that I don't need an extra copy of lodash in my distributed bundle\n. Yeah, that's about what I figured. I think simultaneous animations will be non-trivial to integrate into a declarative approach.\n. @Antho2407 can you give some background on how you changed your webpack configuration? I believe I'm running into the same issue.. ",
    "luisherranz": "> +1 to this so that I don't need an extra copy of lodash in my distributed bundle\n\nTrue!\n. I'm having the same error here with React 15.3.0.\n. This is the warning I am getting:\n\n```\nvendors.dashboard.9af5f91\u2026.js:34797 Warning: Unknown prop `duration` on <span> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop\n    in span (created by ReactTransitionGroup)\n    in ReactTransitionGroup (created by VelocityTransitionGroup)\n```\n\nCurious thing is that I have updated the project to React 15.3.0 and that should fix the ReactTransitionGroup span problem, but it doesn't. \n\nIs VelocityTransitionGroup using its own ReactTransitionGroup or does it get it from React (peer dependency)?\n. This is the code on my `index.js` of `react-addons-transition-group`:\n\n```\nmodule.exports = require('react/lib/ReactTransitionGroup');\n```\n\nShouldn't that use the react version of my project, which is in fact 15.3.0, which should solve the span warning?\n\n`package.json` version is `15.1.0` but does that really matter when the `index.js` is only that?\n. Maybe this is a bug in `ReactTransitionGroup` itself. Can you reproduce it?\n. Shit, you are right, that was my fault. I'm sorry. \n\nIt looks like while I was searching I read this issue:\nhttps://github.com/facebook/react/issues/7163\n\n```\nWarning: Unknown prop `transitionAppearTimeout` on <span> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop\n    in span (created by ReactTransitionGroup)\n```\n\nwhich was a real bug and I assumed this was a bug as well.\n\nAnyway, thanks for the help!\n. Thanks @finneganh!\n. > +1 to this so that I don't need an extra copy of lodash in my distributed bundle\n\nTrue!\n. I'm having the same error here with React 15.3.0.\n. This is the warning I am getting:\n\n```\nvendors.dashboard.9af5f91\u2026.js:34797 Warning: Unknown prop `duration` on <span> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop\n    in span (created by ReactTransitionGroup)\n    in ReactTransitionGroup (created by VelocityTransitionGroup)\n```\n\nCurious thing is that I have updated the project to React 15.3.0 and that should fix the ReactTransitionGroup span problem, but it doesn't. \n\nIs VelocityTransitionGroup using its own ReactTransitionGroup or does it get it from React (peer dependency)?\n. This is the code on my `index.js` of `react-addons-transition-group`:\n\n```\nmodule.exports = require('react/lib/ReactTransitionGroup');\n```\n\nShouldn't that use the react version of my project, which is in fact 15.3.0, which should solve the span warning?\n\n`package.json` version is `15.1.0` but does that really matter when the `index.js` is only that?\n. Maybe this is a bug in `ReactTransitionGroup` itself. Can you reproduce it?\n. Shit, you are right, that was my fault. I'm sorry. \n\nIt looks like while I was searching I read this issue:\nhttps://github.com/facebook/react/issues/7163\n\n```\nWarning: Unknown prop `transitionAppearTimeout` on <span> tag. Remove this prop from the element. For details, see https://fb.me/react-unknown-prop\n    in span (created by ReactTransitionGroup)\n```\n\nwhich was a real bug and I assumed this was a bug as well.\n\nAnyway, thanks for the help!\n. Thanks @finneganh!\n. ",
    "eddiemonge": "Then why not only require the lodash packages you are using?. Not really. All of lodash is still included. This only installs the ones that are actually used: https://github.com/twitter-fabric/velocity-react/pull/219. It gains not having to install all of lodash since its a dependency and gets installed when this does. Its not only about the production environment but also dev. Faster installs, less file size overhead. Why not be explicit?. Then why not only require the lodash packages you are using?. Not really. All of lodash is still included. This only installs the ones that are actually used: https://github.com/twitter-fabric/velocity-react/pull/219. It gains not having to install all of lodash since its a dependency and gets installed when this does. Its not only about the production environment but also dev. Faster installs, less file size overhead. Why not be explicit?. ",
    "SterlingVix": "@finneganh -- I'm also having this Lodash issue, though I'm not 100% confident that it's velocity-react (50/50 chance at this point). But regarding the explicit imports in Lodash and webpack only requiring the necessary modules -- I don't think you get that for free with Webpack.\r\n\r\nMy understanding is that if you were to import all of your lodash statements namespaced, i.e.:\r\n\r\n`import { merge } from 'lodash';`\r\n\r\n... then Webpack would, as part of optimizing the dependency graph, only create a module out of `merge`.\r\n\r\nBut if you import all of lodash, i.e.:\r\n\r\n`import _ from 'lodash';`\r\n\r\n... then you've got all of lodash coming your way.\r\n\r\nYou can validate the weight of lodash in velocity-react using the `bundle-analyzer-tool`:\r\n\r\nhttps://github.com/th0r/webpack-bundle-analyzer\r\n\r\nTo get Webpack to optimize your lodash build, you need to run a Babel transform:\r\n\r\nhttps://www.npmjs.com/package/babel-plugin-lodash. @finneganh -- I'm also having this Lodash issue, though I'm not 100% confident that it's velocity-react (50/50 chance at this point). But regarding the explicit imports in Lodash and webpack only requiring the necessary modules -- I don't think you get that for free with Webpack.\r\n\r\nMy understanding is that if you were to import all of your lodash statements namespaced, i.e.:\r\n\r\n`import { merge } from 'lodash';`\r\n\r\n... then Webpack would, as part of optimizing the dependency graph, only create a module out of `merge`.\r\n\r\nBut if you import all of lodash, i.e.:\r\n\r\n`import _ from 'lodash';`\r\n\r\n... then you've got all of lodash coming your way.\r\n\r\nYou can validate the weight of lodash in velocity-react using the `bundle-analyzer-tool`:\r\n\r\nhttps://github.com/th0r/webpack-bundle-analyzer\r\n\r\nTo get Webpack to optimize your lodash build, you need to run a Babel transform:\r\n\r\nhttps://www.npmjs.com/package/babel-plugin-lodash. ",
    "SethTompkins": "Hrmm, this is the line right here correct?\n\nhttps://github.com/twitter-fabric/velocity-react/blob/eed8a4077e5589bc38e5d42eaffc2457449b2cdd/velocity-transition-group.js#L181\n\nWould it make sense to simply exclude the `begin` opt there just as the `complete` opt is excluded?\n. Awesome, glad I could help out :)\n. ![High Five](http://media3.giphy.com/media/CDMz3fckRXXDG/giphy.gif)\n. Hrmm, this is the line right here correct?\n\nhttps://github.com/twitter-fabric/velocity-react/blob/eed8a4077e5589bc38e5d42eaffc2457449b2cdd/velocity-transition-group.js#L181\n\nWould it make sense to simply exclude the `begin` opt there just as the `complete` opt is excluded?\n. Awesome, glad I could help out :)\n. ![High Five](http://media3.giphy.com/media/CDMz3fckRXXDG/giphy.gif)\n. ",
    "Kerumen": "> This is currently by design because the leave animation is run to completion before an element is added, so that elements can base their enter animations off of a consistent \u201cleft\u201d state.\n\nPlease specify this somewhere in the doc. I just lost merely 2 hours wondering why my elements started with the props of the leave animation..\n. > This is currently by design because the leave animation is run to completion before an element is added, so that elements can base their enter animations off of a consistent \u201cleft\u201d state.\n\nPlease specify this somewhere in the doc. I just lost merely 2 hours wondering why my elements started with the props of the leave animation..\n. ",
    "jolic": "Figured out...\n. Figured out...\n. ",
    "JoshWhite": "Hi @jolic - could you post your solution? I'm struggling to figure this out! There is a similar stackoverflow article here: http://stackoverflow.com/questions/35566357/velocity-react-animating-scrolltop-after-component-update, which might be a better place to put the answer!. Hi @jolic - could you post your solution? I'm struggling to figure this out! There is a similar stackoverflow article here: http://stackoverflow.com/questions/35566357/velocity-react-animating-scrolltop-after-component-update, which might be a better place to put the answer!. ",
    "jordan-enev": "Hello guys,\r\n\r\nI've answered on the above post and created a demo [here](https://github.com/jordan-enev/react-velocity-scroll).. Hello guys,\r\n\r\nI've answered on the above post and created a demo [here](https://github.com/jordan-enev/react-velocity-scroll).. ",
    "antsav": "same problem is visible here : http://codepen.io/agrewell/pen/ZYdGOJ\n\nand you may see how in example on click in the middle on any row you see disappearing last row \"Out\" sliding right right under the row stack\n\nexactly the same behaviour I'm experiencing with twitter-fabric/velocity-react TrnasitionGroup. \nI've tried with duration=30000 and saw the same: \n1) click on the row \n2) stack shrinks on one row\n3) in the bottom appears row with the content of last row \n4) animation takes place \n. resolved )\n\nfound out that I was having key as index of iteration and reinjected element had conflicted key\n\nLike below: \n\n```\nlet index = 0;\n[...].map((item)=>{\n  index ++;\n  <div key={index}>\n})\n```\n\nchanged to unique key and everything works perfect!\n\nThnak you ! :smile: \n. same problem is visible here : http://codepen.io/agrewell/pen/ZYdGOJ\n\nand you may see how in example on click in the middle on any row you see disappearing last row \"Out\" sliding right right under the row stack\n\nexactly the same behaviour I'm experiencing with twitter-fabric/velocity-react TrnasitionGroup. \nI've tried with duration=30000 and saw the same: \n1) click on the row \n2) stack shrinks on one row\n3) in the bottom appears row with the content of last row \n4) animation takes place \n. resolved )\n\nfound out that I was having key as index of iteration and reinjected element had conflicted key\n\nLike below: \n\n```\nlet index = 0;\n[...].map((item)=>{\n  index ++;\n  <div key={index}>\n})\n```\n\nchanged to unique key and everything works perfect!\n\nThnak you ! :smile: \n. ",
    "clementoriol": "Adding my two cents, got the same issue, without using react-template. It was related to velocity-react (or one of its dependencies) pulling a different version of React than the one I had in the project. \nLike stated in the react error message, two versions of React were running, causing issues (https://gist.github.com/jimfb/4faa6cbfb1ef476bd105).\n\nI managed to make sure both my project and velocity-react were depending on the same react version, and it fixed the issue.\nShrinkwrapping your dependencies afterwards should help to make sure this issue doesn't arise again.\n. Adding my two cents, got the same issue, without using react-template. It was related to velocity-react (or one of its dependencies) pulling a different version of React than the one I had in the project. \nLike stated in the react error message, two versions of React were running, causing issues (https://gist.github.com/jimfb/4faa6cbfb1ef476bd105).\n\nI managed to make sure both my project and velocity-react were depending on the same react version, and it fixed the issue.\nShrinkwrapping your dependencies afterwards should help to make sure this issue doesn't arise again.\n. ",
    "bthibault": "@finneganh yeah okay it works with a property hash ... how does one chain animations together then? \n. @finneganh yeah okay it works with a property hash ... how does one chain animations together then? \n. ",
    "Superpencil": "@finneganh My animation is out of order:\r\n\r\nVisually it seems to do the steps in the array in this order:\r\n0, 1, 4, 3, 2, 6, 8\r\nSkipping a few... Am I doing this wrong with delays and such? \ud83e\udd13\r\n\r\n```es6\r\nimport React from 'react'\r\nimport { VelocityComponent, VelocityTransitionGroup, velocityHelpers } from 'velocity-react'\r\n\r\nrequire('velocity-animate')\r\nrequire('velocity-animate/velocity.ui')\r\n\r\nconst EmailAnimation = velocityHelpers.registerEffect({\r\n  defaultDuration: 10000,\r\n  calls: [\r\n    [{\r\n      translateX: '10vw',\r\n      translateY: '32.3vw',\r\n      translateZ: '10vw',\r\n      rotateX: '-90deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '0deg',\r\n      scale: 1\r\n    }],\r\n    [{\r\n      opacity: 1\r\n    }],\r\n    [{\r\n      translateX: '44.2vw',\r\n      translateY: '39.5vw',\r\n      translateZ: '5vw',\r\n      rotateX: '0deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '90deg'\r\n    }],\r\n    [{\r\n      translateZ: '0vw'\r\n    }],\r\n    [{\r\n      translateZ: '8vw'\r\n    }],\r\n    [{\r\n      translateX: '44.5vw',\r\n      translateY: '58.7vw',\r\n      translateZ: '5vw',\r\n      rotateX: '0deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '45deg'\r\n    }],\r\n    [{\r\n      translateX: '64vw',\r\n      translateY: '58vw',\r\n      translateZ: '5vw',\r\n      rotateX: '0deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '0deg'\r\n    }],\r\n    [{\r\n      translateZ: '0vw'\r\n    }],\r\n    [{\r\n      translateZ: '8vw'\r\n    }],\r\n    [{\r\n      translateX: '64.5vw',\r\n      translateY: '84.6vw',\r\n      translateZ: '0vw',\r\n      rotateX: '0deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '0deg',\r\n      scale: 0.5\r\n    }]\r\n  ]\r\n})\r\n\r\nclass Interactive extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      laptopLid: false\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    window.setTimeout(\r\n      this.setState({\r\n        laptopLid: true\r\n      })\r\n    , 1000)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <VelocityComponent animation={this.state.laptopLid ? EmailAnimation : null} delay={1000}>\r\n        <div className='envelope'>\r\n          <img src={require('./envelope.svg')} className='img-fluid' alt='' />\r\n        </div>\r\n      </VelocityComponent>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Interactive\r\n```. Thank you @Rycochet! \r\n- It fixed starting at 0 every time\r\n- But now the sequence is: 0 ? 1 4 2 3 9, seemingly omitting a few...\r\nI'm starting to think this is related to the same thing last time where things have to be manually declared in-line, but in React this isn't possible... I'll mess around some more.\r\n\r\nCan't wait for you to release `v2.0.0-beta` so I can test it ;) . I think the answer is in prepending of the array @Rycochet - and I believe we talked about it before:\r\n\r\n*This array*\r\n```es6\r\nconst EmailAnimation = velocityHelpers.registerEffect({\r\n  defaultDuration: 20000,\r\n  calls: [\r\n    [{\r\n      translateX: '10vw',\r\n      translateY: '30vw',\r\n      translateZ: '10vw'\r\n    }, 1 / 3],\r\n    [{\r\n      translateX: '45vw',\r\n      translateY: '40vw',\r\n      translateZ: '5vw'\r\n    }, 1 / 3],\r\n    [{\r\n      translateX: '45vw',\r\n      translateY: '40vw',\r\n      translateZ: '0vw'\r\n    }, 1 / 3]\r\n  ]\r\n})\r\n```\r\n*Results in that the Initial state never registered, so it prepends the array with 0 to the first amounts, and then skips the last step. \r\n\r\nWhen we found this issue last time with `runSequence`, and the solution was to apply the css inline beforehand, but this isn't possible in react, I hope 2.0 fixes it @Rycochet :). @Rycochet thank you for your continued comments!\r\n- I attempted to implement your code but it gets ignored by Velocity\r\n- Is this implemented only in `1.5.0`?\r\n- Forcing `velocity-react` to use `velocity-animate@1.5.0` didn't work for me, perhaps I did it wrong.\r\n- Last item in array is always ignored, even with simpler animations, even when attribute of style is declared on the div beforehand (width in this case)\r\n```es6\r\nconst TheAnimation = velocityHelpers.registerEffect({\r\n  defaultDuration: 300,\r\n  calls: [\r\n    [{ width: '100px' }, 3 / 1],\r\n    [{ width: '200px' }, 3 / 1],\r\n    [{ width: '100px' }, 3 / 1]\r\n  ]\r\n})\r\n```\r\nSeeing as I can't get this to work, I've opted to attempt to replace velocity for now, fingers crossed!. @Rycochet looking forward to your first major release \ud83d\udcaf . @finneganh My animation is out of order:\r\n\r\nVisually it seems to do the steps in the array in this order:\r\n0, 1, 4, 3, 2, 6, 8\r\nSkipping a few... Am I doing this wrong with delays and such? \ud83e\udd13\r\n\r\n```es6\r\nimport React from 'react'\r\nimport { VelocityComponent, VelocityTransitionGroup, velocityHelpers } from 'velocity-react'\r\n\r\nrequire('velocity-animate')\r\nrequire('velocity-animate/velocity.ui')\r\n\r\nconst EmailAnimation = velocityHelpers.registerEffect({\r\n  defaultDuration: 10000,\r\n  calls: [\r\n    [{\r\n      translateX: '10vw',\r\n      translateY: '32.3vw',\r\n      translateZ: '10vw',\r\n      rotateX: '-90deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '0deg',\r\n      scale: 1\r\n    }],\r\n    [{\r\n      opacity: 1\r\n    }],\r\n    [{\r\n      translateX: '44.2vw',\r\n      translateY: '39.5vw',\r\n      translateZ: '5vw',\r\n      rotateX: '0deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '90deg'\r\n    }],\r\n    [{\r\n      translateZ: '0vw'\r\n    }],\r\n    [{\r\n      translateZ: '8vw'\r\n    }],\r\n    [{\r\n      translateX: '44.5vw',\r\n      translateY: '58.7vw',\r\n      translateZ: '5vw',\r\n      rotateX: '0deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '45deg'\r\n    }],\r\n    [{\r\n      translateX: '64vw',\r\n      translateY: '58vw',\r\n      translateZ: '5vw',\r\n      rotateX: '0deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '0deg'\r\n    }],\r\n    [{\r\n      translateZ: '0vw'\r\n    }],\r\n    [{\r\n      translateZ: '8vw'\r\n    }],\r\n    [{\r\n      translateX: '64.5vw',\r\n      translateY: '84.6vw',\r\n      translateZ: '0vw',\r\n      rotateX: '0deg',\r\n      rotateY: '0deg',\r\n      rotateZ: '0deg',\r\n      scale: 0.5\r\n    }]\r\n  ]\r\n})\r\n\r\nclass Interactive extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      laptopLid: false\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    window.setTimeout(\r\n      this.setState({\r\n        laptopLid: true\r\n      })\r\n    , 1000)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <VelocityComponent animation={this.state.laptopLid ? EmailAnimation : null} delay={1000}>\r\n        <div className='envelope'>\r\n          <img src={require('./envelope.svg')} className='img-fluid' alt='' />\r\n        </div>\r\n      </VelocityComponent>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Interactive\r\n```. Thank you @Rycochet! \r\n- It fixed starting at 0 every time\r\n- But now the sequence is: 0 ? 1 4 2 3 9, seemingly omitting a few...\r\nI'm starting to think this is related to the same thing last time where things have to be manually declared in-line, but in React this isn't possible... I'll mess around some more.\r\n\r\nCan't wait for you to release `v2.0.0-beta` so I can test it ;) . I think the answer is in prepending of the array @Rycochet - and I believe we talked about it before:\r\n\r\n*This array*\r\n```es6\r\nconst EmailAnimation = velocityHelpers.registerEffect({\r\n  defaultDuration: 20000,\r\n  calls: [\r\n    [{\r\n      translateX: '10vw',\r\n      translateY: '30vw',\r\n      translateZ: '10vw'\r\n    }, 1 / 3],\r\n    [{\r\n      translateX: '45vw',\r\n      translateY: '40vw',\r\n      translateZ: '5vw'\r\n    }, 1 / 3],\r\n    [{\r\n      translateX: '45vw',\r\n      translateY: '40vw',\r\n      translateZ: '0vw'\r\n    }, 1 / 3]\r\n  ]\r\n})\r\n```\r\n*Results in that the Initial state never registered, so it prepends the array with 0 to the first amounts, and then skips the last step. \r\n\r\nWhen we found this issue last time with `runSequence`, and the solution was to apply the css inline beforehand, but this isn't possible in react, I hope 2.0 fixes it @Rycochet :). @Rycochet thank you for your continued comments!\r\n- I attempted to implement your code but it gets ignored by Velocity\r\n- Is this implemented only in `1.5.0`?\r\n- Forcing `velocity-react` to use `velocity-animate@1.5.0` didn't work for me, perhaps I did it wrong.\r\n- Last item in array is always ignored, even with simpler animations, even when attribute of style is declared on the div beforehand (width in this case)\r\n```es6\r\nconst TheAnimation = velocityHelpers.registerEffect({\r\n  defaultDuration: 300,\r\n  calls: [\r\n    [{ width: '100px' }, 3 / 1],\r\n    [{ width: '200px' }, 3 / 1],\r\n    [{ width: '100px' }, 3 / 1]\r\n  ]\r\n})\r\n```\r\nSeeing as I can't get this to work, I've opted to attempt to replace velocity for now, fingers crossed!. @Rycochet looking forward to your first major release \ud83d\udcaf . ",
    "StevenLangbroek": "Should `devDependencies` be specified the way I did now?\n. Should we wait for [this](https://twitter.com/reactjs/status/718252053441732612) and for `tween-state` to update its dependencies? If `tween-state` needs a deps bump let me know and I'll open a PR there too.\n. yeah, `devDeps` shouldn't give `EPEERINVALID` warnings, you're right. I don't think this library would be affected by the controlled input bug, so afaic this should be enough.\n. Should `devDependencies` be specified the way I did now?\n. Should we wait for [this](https://twitter.com/reactjs/status/718252053441732612) and for `tween-state` to update its dependencies? If `tween-state` needs a deps bump let me know and I'll open a PR there too.\n. yeah, `devDeps` shouldn't give `EPEERINVALID` warnings, you're right. I don't think this library would be affected by the controlled input bug, so afaic this should be enough.\n. ",
    "liorbrauer": "\ud83d\udc4d (Patiently waiting for this merge ;))\n. @finneganh Thanks for the reply. I assumed without looking that the version bump on your part explicitly depended on React 15, but I see you're correct. I'll look into shrinkwrap and perhaps a newer version of NPM that doesn't automatically install peerDependencies.\n\nAgain, thanks for your help and contribution!\n. \ud83d\udc4d (Patiently waiting for this merge ;))\n. @finneganh Thanks for the reply. I assumed without looking that the version bump on your part explicitly depended on React 15, but I see you're correct. I'll look into shrinkwrap and perhaps a newer version of NPM that doesn't automatically install peerDependencies.\n\nAgain, thanks for your help and contribution!\n. ",
    "rtsao": "A more terse semver equivalent is `\"0.14.x - 15.x\"`.\n\nhttp://semver.npmjs.com/\n. A more terse semver equivalent is `\"0.14.x - 15.x\"`.\n\nhttp://semver.npmjs.com/\n. ",
    "nitaliano": "\ud83d\udc4d \n. \ud83d\udc4d \n. ",
    "david-rosales": "This issue was fixed in #102 so I'm going to close this pull request.\n. @finneganh Awesome, this clarification would definitely prevent the issue I was having.\n. This issue was fixed in #102 so I'm going to close this pull request.\n. @finneganh Awesome, this clarification would definitely prevent the issue I was having.\n. ",
    "jeffijoe": "I guess my question is, for a new animation, why would I _want_ to chose one over the other? Why would I explicitly want the behavior of RTG? If that makes sense?\n. Ah, okay, thanks! Basically right now I am using CSS transition groups because the keyframes are easy to work with in CSS. What would be the best path for me to come close to that experience with Velocity?\n. I guess my question is, for a new animation, why would I _want_ to chose one over the other? Why would I explicitly want the behavior of RTG? If that makes sense?\n. Ah, okay, thanks! Basically right now I am using CSS transition groups because the keyframes are easy to work with in CSS. What would be the best path for me to come close to that experience with Velocity?\n. ",
    "baopham": "Tested this and the animation does speed up. For example, when I want the item to suddenly speed up in the middle, setting `duration` to something smaller works.\n. Tested this and the animation does speed up. For example, when I want the item to suddenly speed up in the middle, setting `duration` to something smaller works.\n. ",
    "rnsloan": "Thanks. I will take a bit of a look into the `slide` animations in velocity to get a better understanding, but feel free to close this issue as the solution to not use them solves my issue for now.\n. Related React error https://github.com/facebook/react/issues/4876\n. Thanks. I will take a bit of a look into the `slide` animations in velocity to get a better understanding, but feel free to close this issue as the solution to not use them solves my issue for now.\n. Related React error https://github.com/facebook/react/issues/4876\n. ",
    "hassankhan": "Hi, I seem to be getting this issue, along with what seems to be #79 as well. I followed the crossfade example as best as I could.\n\n```\n<VelocityTransitionGroup component=\"ul\"\n          enter={{animation: 'slideDown', duration: this.props.duration}}\n          leave={{animation: 'slideUp', duration: this.props.duration}}>\n          {this.state.isActive ? this.props.children : null}\n</VelocityTransitionGroup>\n```\n\nWhen `isActive` is `false`, I get the **Cannot read property 'componentDidLeave' of undefined** errors.\n\nAs an aside, if I add a `className`, then the leave transition stops working.\n. Hi, I seem to be getting this issue, along with what seems to be #79 as well. I followed the crossfade example as best as I could.\n\n```\n<VelocityTransitionGroup component=\"ul\"\n          enter={{animation: 'slideDown', duration: this.props.duration}}\n          leave={{animation: 'slideUp', duration: this.props.duration}}>\n          {this.state.isActive ? this.props.children : null}\n</VelocityTransitionGroup>\n```\n\nWhen `isActive` is `false`, I get the **Cannot read property 'componentDidLeave' of undefined** errors.\n\nAs an aside, if I add a `className`, then the leave transition stops working.\n. ",
    "ssilve1989": "I to have this problem following a very similar approach as @hassankhan \n. I to have this problem following a very similar approach as @hassankhan \n. ",
    "mattjfong": "There's a commit to velocity to fix this issue for `slideUp`/`slideDown` animations. Added after the 1.3.1 release.\n. There's a commit to velocity to fix this issue for `slideUp`/`slideDown` animations. Added after the 1.3.1 release.\n. ",
    "eirikurn": "Also, sorry for the lightning PR before any issue discussion.\n\nI just hammered this fix out because the issue is critical in our project. We're running on a fork so I'm happy to close this PR if you want to look into other solutions.\n. Also, sorry for the lightning PR before any issue discussion.\n\nI just hammered this fix out because the issue is critical in our project. We're running on a fork so I'm happy to close this PR if you want to look into other solutions.\n. ",
    "iSimonWeb": ":+1: up\n. :+1: up\n. ",
    "morajabi": "Any news?\n. Any news?\n. ",
    "ShakurOo": "Hello,\r\n\r\nI trying to doing this, i can catch the callback complete but i don't know how i can show runAnimation().\r\nMay I can inject as parameters the name of the animation ?. Hello,\r\n\r\nI trying to doing this, i can catch the callback complete but i don't know how i can show runAnimation().\r\nMay I can inject as parameters the name of the animation ?. ",
    "jwdinker": "Wanted to get your guys thoughts on something like this.  I have read mixed feedback on using setTimeout for animations, but I haven't found a viable work around for running animation sequences in React-Velocity. The rough solution I have come up with so far works so far and looks something like this...\r\n\r\n1.  Pass in array of object animations and include the the delay and duration.\r\n2.  A timeout is created for each animation sequence that factors in the delay of the next animation and the duration of the current animation.   \r\n\r\n\r\n\r\n```\r\nexport class VelocityAnimationSequence extends Component {\r\n\r\n    constructor (props) {\r\n         super(props)\r\n    }\r\n\r\n\r\n    static defaultProps = {\r\n        sequences:[\r\n         {animation: {height:'100px'},delay:200, duration:200},\r\n         {animation: {opacity:1}, duration:2000},\r\n         {animation: {opacity:0}, duration:500},\r\n         {animation: {height:'0px'},duration:1000}\r\n        ],\r\n        on_sequence_end:()=>{console.log(\"The sequence has ended\")}\r\n    }\r\n\r\n\r\n   state = {\r\n       current_sequence:0,\r\n       animation_timeout_id:null,\r\n   }\r\n\r\n  \r\n    next_sequence () {\r\n        clearTimeout(this.state.animation_timeout_id)\r\n        if(this.state.current_sequence < this.props.sequences.length - 2){\r\n            this.setState({current_sequence:this.state.current_sequence + 1, animation_timeout_id:this.create_sequence_timeout(this.get_duration_plus_delay(this.state.current_sequence + 1, this.state.current_sequence + 2))})\r\n        }else if(this.state.current_sequence < this.props.sequences.length - 1){\r\n            this.setState({current_sequence:this.state.current_sequence + 1, animation_timeout_id:this.create_sequence_timeout(this.get_duration_plus_delay(this.state.current_sequence + 1, this.state.current_sequence + 1))})\r\n        }else{\r\n            this.props.on_sequence_end()\r\n            clearTimeout(this.state.animation_timeout_id)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    get_duration_plus_delay(duration_index, delay_index){\r\n        return this.props.sequences[duration_index].duration + this.delay_check(this.props.sequences[delay_index].delay)\r\n    }\r\n\r\n    delay_check(delay){\r\n        return (typeof delay === 'undefined') ? 0 : delay\r\n    }\r\n\r\n  \r\n    create_sequence_timeout (duration) {\r\n        setTimeout(()=>{\r\n            this.next_sequence()\r\n        }, duration)\r\n    }\r\n\r\n\r\n    \r\n    //on first mount, the first duration and delay are added together along with the delay from the second sequence.\r\n    componentWillMount () {\r\n        this.setState({animation_timeout_id:this.create_sequence_timeout(this.get_duration_plus_delay(0,1))})\r\n    }\r\n\r\n    render () {\r\n        console.log('current_sequence', this.state.current_sequence, '\\n current_duration', this.props.sequences[this.state.current_sequence].duration)\r\n\r\n        var {animation, display, duration, delay} = this.props.sequences[this.state.current_sequence]\r\n        \r\n        return (\r\n           <VelocityComponent \r\n                animation={animation} \r\n                runOnMount={true} \r\n                display={display}\r\n                delay={(this.state.current_sequence === 0) ? delay : 'undefined'}\r\n                duration={duration}>\r\n            {this.props.children}\r\n           </VelocityComponent>\r\n        )\r\n\r\n        \r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n```\r\n\r\n\r\n. Wanted to get your guys thoughts on something like this.  I have read mixed feedback on using setTimeout for animations, but I haven't found a viable work around for running animation sequences in React-Velocity. The rough solution I have come up with so far works so far and looks something like this...\r\n\r\n1.  Pass in array of object animations and include the the delay and duration.\r\n2.  A timeout is created for each animation sequence that factors in the delay of the next animation and the duration of the current animation.   \r\n\r\n\r\n\r\n```\r\nexport class VelocityAnimationSequence extends Component {\r\n\r\n    constructor (props) {\r\n         super(props)\r\n    }\r\n\r\n\r\n    static defaultProps = {\r\n        sequences:[\r\n         {animation: {height:'100px'},delay:200, duration:200},\r\n         {animation: {opacity:1}, duration:2000},\r\n         {animation: {opacity:0}, duration:500},\r\n         {animation: {height:'0px'},duration:1000}\r\n        ],\r\n        on_sequence_end:()=>{console.log(\"The sequence has ended\")}\r\n    }\r\n\r\n\r\n   state = {\r\n       current_sequence:0,\r\n       animation_timeout_id:null,\r\n   }\r\n\r\n  \r\n    next_sequence () {\r\n        clearTimeout(this.state.animation_timeout_id)\r\n        if(this.state.current_sequence < this.props.sequences.length - 2){\r\n            this.setState({current_sequence:this.state.current_sequence + 1, animation_timeout_id:this.create_sequence_timeout(this.get_duration_plus_delay(this.state.current_sequence + 1, this.state.current_sequence + 2))})\r\n        }else if(this.state.current_sequence < this.props.sequences.length - 1){\r\n            this.setState({current_sequence:this.state.current_sequence + 1, animation_timeout_id:this.create_sequence_timeout(this.get_duration_plus_delay(this.state.current_sequence + 1, this.state.current_sequence + 1))})\r\n        }else{\r\n            this.props.on_sequence_end()\r\n            clearTimeout(this.state.animation_timeout_id)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    get_duration_plus_delay(duration_index, delay_index){\r\n        return this.props.sequences[duration_index].duration + this.delay_check(this.props.sequences[delay_index].delay)\r\n    }\r\n\r\n    delay_check(delay){\r\n        return (typeof delay === 'undefined') ? 0 : delay\r\n    }\r\n\r\n  \r\n    create_sequence_timeout (duration) {\r\n        setTimeout(()=>{\r\n            this.next_sequence()\r\n        }, duration)\r\n    }\r\n\r\n\r\n    \r\n    //on first mount, the first duration and delay are added together along with the delay from the second sequence.\r\n    componentWillMount () {\r\n        this.setState({animation_timeout_id:this.create_sequence_timeout(this.get_duration_plus_delay(0,1))})\r\n    }\r\n\r\n    render () {\r\n        console.log('current_sequence', this.state.current_sequence, '\\n current_duration', this.props.sequences[this.state.current_sequence].duration)\r\n\r\n        var {animation, display, duration, delay} = this.props.sequences[this.state.current_sequence]\r\n        \r\n        return (\r\n           <VelocityComponent \r\n                animation={animation} \r\n                runOnMount={true} \r\n                display={display}\r\n                delay={(this.state.current_sequence === 0) ? delay : 'undefined'}\r\n                duration={duration}>\r\n            {this.props.children}\r\n           </VelocityComponent>\r\n        )\r\n\r\n        \r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n```\r\n\r\n\r\n. ",
    "levity": "One simple solution I just found is to set the initial values with CSS, since Velocity will correctly override them.\n. One simple solution I just found is to set the initial values with CSS, since Velocity will correctly override them.\n. ",
    "Moeface": "This was in VelocityComponent\n. This was in VelocityComponent\n. ",
    "Tomyail": "I use ava and enzyme to test my component. And I reproduce this error on my [branch](https://github.com/Tomyail/velocity-react/tree/jsdom).when run `npm run test`,the error occur. And `npm run test-shim` is my solution.\n. Thanks. good way to detect node\n. I use ava and enzyme to test my component. And I reproduce this error on my [branch](https://github.com/Tomyail/velocity-react/tree/jsdom).when run `npm run test`,the error occur. And `npm run test-shim` is my solution.\n. Thanks. good way to detect node\n. ",
    "stoikerty": "I understand, so my version of lodash says `\"version\": \"4.14.1\"` in `node_modules/lodash/package.json`.\n\nIf you just want the individual utilities, it is possible to [import them as separate packages](https://www.npmjs.com/package/lodash.isequal)\n\n``` js\nvar isEqual = require('lodash.isequal');\n```\n\nSee also [lodash-modularized](https://www.npmjs.com/browse/keyword/lodash-modularized).\n. That is strange, There is one direct dependency of the modularized version which we're using in that project. `\"lodash.foreach\": \"^4.3.0\"`\n\nI don't understand why it's not using the correct version as specified in `velocity-react`, even after reinstalling all dependencies. The only thing I could think of is that `velocity-react` is the only package where we needed to use `require` instead of `import` because of server-side rendering.\n\n...so after investigating, it looks like npm is installing the correct version of `lodash`, but it's installing it in `node_modules/velocity-react/node_modules/lodash` instead of `node_modules/lodash`. I might need to extend webpack in the toolkit to search in subdirectories for finding dependencies... I thought npm would handle that automatically though :/\n\nWould it be possible to move to a modularized version of lodash?\n. Actually, nevermind I got it to work :D\nI added some settings to `resolve` and `resolveLoader` to make module-searching more flexible and it finds everything correctly now.\n. I understand, so my version of lodash says `\"version\": \"4.14.1\"` in `node_modules/lodash/package.json`.\n\nIf you just want the individual utilities, it is possible to [import them as separate packages](https://www.npmjs.com/package/lodash.isequal)\n\n``` js\nvar isEqual = require('lodash.isequal');\n```\n\nSee also [lodash-modularized](https://www.npmjs.com/browse/keyword/lodash-modularized).\n. That is strange, There is one direct dependency of the modularized version which we're using in that project. `\"lodash.foreach\": \"^4.3.0\"`\n\nI don't understand why it's not using the correct version as specified in `velocity-react`, even after reinstalling all dependencies. The only thing I could think of is that `velocity-react` is the only package where we needed to use `require` instead of `import` because of server-side rendering.\n\n...so after investigating, it looks like npm is installing the correct version of `lodash`, but it's installing it in `node_modules/velocity-react/node_modules/lodash` instead of `node_modules/lodash`. I might need to extend webpack in the toolkit to search in subdirectories for finding dependencies... I thought npm would handle that automatically though :/\n\nWould it be possible to move to a modularized version of lodash?\n. Actually, nevermind I got it to work :D\nI added some settings to `resolve` and `resolveLoader` to make module-searching more flexible and it finds everything correctly now.\n. ",
    "angus-c": "Thanks! I got something sort of working, but having several issues:\n\n```\n    this.widthEffect = velocityHelpers.registerEffect({\n      calls: [\n        [{width: '20px', left: 125}],\n        [{width: '10px', left: 250}],\n      ],\n    });\n```\n\n1) it treats each section (i.e. element in the call array) as a separate easing. So instead of one spring, there's a spring followed by another spring\n2) the width starts from 100% unless I set it to '10px' in the css, after which it stays at 10px\n3) I can't make it loop \n\nUnfortunately I can't find much to help me in the regular velocity documentation for this topic: http://velocityjs.org/#uiPack\n. Thanks! I got something sort of working, but having several issues:\n\n```\n    this.widthEffect = velocityHelpers.registerEffect({\n      calls: [\n        [{width: '20px', left: 125}],\n        [{width: '10px', left: 250}],\n      ],\n    });\n```\n\n1) it treats each section (i.e. element in the call array) as a separate easing. So instead of one spring, there's a spring followed by another spring\n2) the width starts from 100% unless I set it to '10px' in the css, after which it stays at 10px\n3) I can't make it loop \n\nUnfortunately I can't find much to help me in the regular velocity documentation for this topic: http://velocityjs.org/#uiPack\n. ",
    "moretti": "Thanks.\n\nWhat do you think about using a different approach for detecting Node.js?\n`process.env.NODE_ENV` is commonly used by webpack (`DefinePlugin`) and browserify (`envify`).\n\nHow about [`detect-node`](https://github.com/iliakan/detect-node)?\n. Oh, sorry never mind, I didn't realize that a PR has already been merged \ud83d\ude04 \nhttps://github.com/twitter-fabric/velocity-react/pull/130\n. Thanks \ud83d\udc4d \n. Thanks.\n\nWhat do you think about using a different approach for detecting Node.js?\n`process.env.NODE_ENV` is commonly used by webpack (`DefinePlugin`) and browserify (`envify`).\n\nHow about [`detect-node`](https://github.com/iliakan/detect-node)?\n. Oh, sorry never mind, I didn't realize that a PR has already been merged \ud83d\ude04 \nhttps://github.com/twitter-fabric/velocity-react/pull/130\n. Thanks \ud83d\udc4d \n. ",
    "gfx": "To be honest, the number comes from [webpack-bundle-size-analyzer](https://github.com/robertknight/webpack-bundle-size-analyzer) and I have no investigation on the details of the analyzer.\n\nAnyway, it says on my application:\n\n```\n$ node_modules/.bin/webpack --config config/webpack.config.js  --json \\\n   | webpack-bundle-size-analyzer\n\n...\nvelocity-react: 91.18 KB (1.99%)\n  lodash: 67.87 KB (74.4%)\n  <self>: 23.31 KB (25.6%)\n...\n```\n\nNote: I doesn't apply any minification on the bundled JavaScript source code.\n. I am surprised at the fact that velocity-react continues to use lodash v3 \ud83d\ude32 . To be honest, the number comes from [webpack-bundle-size-analyzer](https://github.com/robertknight/webpack-bundle-size-analyzer) and I have no investigation on the details of the analyzer.\n\nAnyway, it says on my application:\n\n```\n$ node_modules/.bin/webpack --config config/webpack.config.js  --json \\\n   | webpack-bundle-size-analyzer\n\n...\nvelocity-react: 91.18 KB (1.99%)\n  lodash: 67.87 KB (74.4%)\n  <self>: 23.31 KB (25.6%)\n...\n```\n\nNote: I doesn't apply any minification on the bundled JavaScript source code.\n. I am surprised at the fact that velocity-react continues to use lodash v3 \ud83d\ude32 . ",
    "Antho2407": "I this branch gonna be merged ? I'm having lots of problems with the lodash dependencies, as my project rely on 4.X (npm is installing the 3.X version for the velocity-react module, but it's still failing) \n. Maybe cause lodash itself is a dependency of the project ? Not sure what's going on. \n\nI tested @gfx  branch and it works great on my side \ud83d\ude04 \n. Just for the record, turns out webpack was the culprit, and resolving my modules with the root ones in priority \ud83d\ude04 \n. @axelson the problem was Webpack not loading properly the dependencies when one version was defined, and another one in a library (like lodash), it was merging the versions.\r\n\r\nMy fix was to change the way i was resolving modules : \r\n\r\n![image](https://cloud.githubusercontent.com/assets/3582904/22255663/f3a7b9b8-e24f-11e6-84d7-4fefa85917e3.png)\r\n\r\nhope it will help !. @finneganh Any updates on that ? Having the same issue, but can't control anything if I use the VelocityTransitionGroup component \ud83d\ude22 . @hirenumradia Did you find a solution ? Trying to tackle the same problem . On my side, looks like the animation is stopped at some point, and the div is not visible then is you trigger the transitions too quickly. Tried to rollback to velocity-react 1.1.4, but didn't do the trick \ud83d\ude22\r\n\r\nIt feels like there is something funny happening with the Velocity.stop() calls, I'll also try to take a closer look next week. So when I was creating the codesandbox I realised something was being a bit funny with the way the DOM and Redux were synchronised, I fixed this issue and I had the exact same one you described \ud83d\ude22  Rolling back to 1.1.4 now fixed the issue. I this branch gonna be merged ? I'm having lots of problems with the lodash dependencies, as my project rely on 4.X (npm is installing the 3.X version for the velocity-react module, but it's still failing) \n. Maybe cause lodash itself is a dependency of the project ? Not sure what's going on. \n\nI tested @gfx  branch and it works great on my side \ud83d\ude04 \n. Just for the record, turns out webpack was the culprit, and resolving my modules with the root ones in priority \ud83d\ude04 \n. @axelson the problem was Webpack not loading properly the dependencies when one version was defined, and another one in a library (like lodash), it was merging the versions.\r\n\r\nMy fix was to change the way i was resolving modules : \r\n\r\n![image](https://cloud.githubusercontent.com/assets/3582904/22255663/f3a7b9b8-e24f-11e6-84d7-4fefa85917e3.png)\r\n\r\nhope it will help !. @finneganh Any updates on that ? Having the same issue, but can't control anything if I use the VelocityTransitionGroup component \ud83d\ude22 . @hirenumradia Did you find a solution ? Trying to tackle the same problem . On my side, looks like the animation is stopped at some point, and the div is not visible then is you trigger the transitions too quickly. Tried to rollback to velocity-react 1.1.4, but didn't do the trick \ud83d\ude22\r\n\r\nIt feels like there is something funny happening with the Velocity.stop() calls, I'll also try to take a closer look next week. So when I was creating the codesandbox I realised something was being a bit funny with the way the DOM and Redux were synchronised, I fixed this issue and I had the exact same one you described \ud83d\ude22  Rolling back to 1.1.4 now fixed the issue. ",
    "mihaibogdan10": "Completely agree with gfx. Lodash v4 was released over 1 year ago. Surely it's stable enough to warrant a version bump here.\r\n\r\nI ended up here for the same reason: I was already using all the functions imported from Lodash v3 in my webpack bundle, but because I'm using Lodash v4 in my project, they were duplicated. Sure, it's not the full 60kb, but given that no arguments to keep using Lodash v3 were presented, why not bump it?. Completely agree with gfx. Lodash v4 was released over 1 year ago. Surely it's stable enough to warrant a version bump here.\r\n\r\nI ended up here for the same reason: I was already using all the functions imported from Lodash v3 in my webpack bundle, but because I'm using Lodash v4 in my project, they were duplicated. Sure, it's not the full 60kb, but given that no arguments to keep using Lodash v3 were presented, why not bump it?. ",
    "vladra": "I also have problem with lodash. My project uses version 4 ofc, and I have conflicts because of this dep. Why this wasn't merged to master?. I've encountered problem with one particular lodash function - `upperCase` (at least from those I found, since it's runtime error, webpack build is fine). With `velocity-react` I have this error, without -  everything is fine. I also have problem with lodash. My project uses version 4 ofc, and I have conflicts because of this dep. Why this wasn't merged to master?. I've encountered problem with one particular lodash function - `upperCase` (at least from those I found, since it's runtime error, webpack build is fine). With `velocity-react` I have this error, without -  everything is fine. ",
    "STRML": "In combination with storybook-react (which now depends on this module through react-treebeard), use of lodash 3 is causing resolution errors similar to #216. I fixed it for my storybook config by adding `'node_modules/velocity-react/node_modules'` to `resolve.modules` but it's very hacky.\r\n\r\nAny particular reason not to use lodash 4 at this point? On most projects this will dedupe out.. It does contain `\"node_modules\"`. It appears I hit some new webpack (3.5.5) bug here, where the deep import to `lodash/...` is going to `node_modules/lodash` for some reason and not to `node_modules/velocity-react/node_modules/lodash`.\r\n\r\nI'm still trying to track that down, but upgrading this library would help anyway - v4 is over a year and a half old.. I run a local folder first `[\"src\", \"node_modules\"]` in order to keep a sane module resolution pattern without all the `../../` insanity.. I'm aware and using that, just didn't list it here.\n\nRegardless, all I'm saying is that there's no reason not to merge this pr.\n\nOn Sep 1, 2017 1:08 PM, \"Fin Hopkins\" <notifications@github.com> wrote:\n\n> @STRML <https://github.com/strml> In that case I would recommend\n> following the example here: https://webpack.js.org/configuration/resolve/#\n> resolve-modules\n>\n> and using __dirname, as relative paths in resolve.modules are treated\n> differently from absolute paths.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-326647910>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABJFP_HnZN5mkcs0DlNzlkmHKPRLfmdCks5seEgMgaJpZM4KRlTz>\n> .\n>\n. Wow, okay. I figured it's worth doing to keep up to date, dedupe with\nlodash versions in app bundles, and get the latest bug fixes and\nperformance updates. It's not just for me, as evidenced by the this PR\nexisting.\n\nOn Sep 1, 2017 1:48 PM, \"Fin Hopkins\" <notifications@github.com> wrote:\n\n> The reason is that I'm not interested spending my time testing and doing a\n> release to work around others' non-standard module resolution rules.\n> velocity-react's use of lodash 3 is entirely within spec.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-326656976>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABJFP6hZ0baxMsIwQ1GkEF6E-q4gtkWPks5seFGKgaJpZM4KRlTz>\n> .\n>\n. In combination with storybook-react (which now depends on this module through react-treebeard), use of lodash 3 is causing resolution errors similar to #216. I fixed it for my storybook config by adding `'node_modules/velocity-react/node_modules'` to `resolve.modules` but it's very hacky.\r\n\r\nAny particular reason not to use lodash 4 at this point? On most projects this will dedupe out.. It does contain `\"node_modules\"`. It appears I hit some new webpack (3.5.5) bug here, where the deep import to `lodash/...` is going to `node_modules/lodash` for some reason and not to `node_modules/velocity-react/node_modules/lodash`.\r\n\r\nI'm still trying to track that down, but upgrading this library would help anyway - v4 is over a year and a half old.. I run a local folder first `[\"src\", \"node_modules\"]` in order to keep a sane module resolution pattern without all the `../../` insanity.. I'm aware and using that, just didn't list it here.\n\nRegardless, all I'm saying is that there's no reason not to merge this pr.\n\nOn Sep 1, 2017 1:08 PM, \"Fin Hopkins\" <notifications@github.com> wrote:\n\n> @STRML <https://github.com/strml> In that case I would recommend\n> following the example here: https://webpack.js.org/configuration/resolve/#\n> resolve-modules\n>\n> and using __dirname, as relative paths in resolve.modules are treated\n> differently from absolute paths.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-326647910>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABJFP_HnZN5mkcs0DlNzlkmHKPRLfmdCks5seEgMgaJpZM4KRlTz>\n> .\n>\n. Wow, okay. I figured it's worth doing to keep up to date, dedupe with\nlodash versions in app bundles, and get the latest bug fixes and\nperformance updates. It's not just for me, as evidenced by the this PR\nexisting.\n\nOn Sep 1, 2017 1:48 PM, \"Fin Hopkins\" <notifications@github.com> wrote:\n\n> The reason is that I'm not interested spending my time testing and doing a\n> release to work around others' non-standard module resolution rules.\n> velocity-react's use of lodash 3 is entirely within spec.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/twitter-fabric/velocity-react/pull/134#issuecomment-326656976>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABJFP6hZ0baxMsIwQ1GkEF6E-q4gtkWPks5seFGKgaJpZM4KRlTz>\n> .\n>\n. ",
    "crubier": "Just coming here to say that I got the same bug, caused by this dependency on lodash 3. I do not use velocity on my project, it is a dependency of a react-storybook, and it is really annoying that my project dev experience is hampered by this. \r\n\r\n```\r\nModule not found: Error: Can't resolve 'lodash/object/omit' in '/xxx/node_modules/velocity-react'\r\n```\r\n\r\n@finneganh , do you have any pointers to where react-storybook is using a non standard webpack setup ? Basically, where can I complain about this bug, if not here ? \r\n\r\nSorry for the tone, but yeah, I just think you might not realize the impact of your decision, especially as there is a pull request that would fix the bug for all of us...\r\n. Just coming here to say that I got the same bug, caused by this dependency on lodash 3. I do not use velocity on my project, it is a dependency of a react-storybook, and it is really annoying that my project dev experience is hampered by this. \r\n\r\n```\r\nModule not found: Error: Can't resolve 'lodash/object/omit' in '/xxx/node_modules/velocity-react'\r\n```\r\n\r\n@finneganh , do you have any pointers to where react-storybook is using a non standard webpack setup ? Basically, where can I complain about this bug, if not here ? \r\n\r\nSorry for the tone, but yeah, I just think you might not realize the impact of your decision, especially as there is a pull request that would fix the bug for all of us...\r\n. ",
    "matthewjf": "Just found https://github.com/twitter-fabric/velocity-react/issues/109, but it doesn't look like it was ever resolved. I'll keep digging around. It would be great if someone with a better understanding could take another look at it.\n. After digging around a bit, velocity fires the `complete` callback at the end of each element's animation. It's removing all of the elements at the end of the first element's animation. I'm not entirely sure if this is a bug with velocity.\n. The issue is fixed with velocity\nhttps://github.com/julianshapiro/velocity/commit/48a4e1eb0610a9582448421c684d8a2cbcec5a90\n\nFeel free to close\n. Just found https://github.com/twitter-fabric/velocity-react/issues/109, but it doesn't look like it was ever resolved. I'll keep digging around. It would be great if someone with a better understanding could take another look at it.\n. After digging around a bit, velocity fires the `complete` callback at the end of each element's animation. It's removing all of the elements at the end of the first element's animation. I'm not entirely sure if this is a bug with velocity.\n. The issue is fixed with velocity\nhttps://github.com/julianshapiro/velocity/commit/48a4e1eb0610a9582448421c684d8a2cbcec5a90\n\nFeel free to close\n. ",
    "with0out": "Would be nice to bump the velocity-animate's version, having multiple tables hide&display triggering this same problem, upgrade to velocity-animate@1.4.0 solves this issue.. Would be nice to bump the velocity-animate's version, having multiple tables hide&display triggering this same problem, upgrade to velocity-animate@1.4.0 solves this issue.. ",
    "Slapbox": "```\n<VelocityComponent animation={options.userEmail ? \"flashIn\" : \"\"}>\n      <span className=\"optionUpdateIndicator\">Username set</span>\n</VelocityComponent>\n```\n\n::facepalm::\n. ```\n<VelocityComponent animation={options.userEmail ? \"flashIn\" : \"\"}>\n      <span className=\"optionUpdateIndicator\">Username set</span>\n</VelocityComponent>\n```\n\n::facepalm::\n. ",
    "mystrdat": "@finneganh Must have missed that feature going through the docs, thank you very much.\n. @finneganh Must have missed that feature going through the docs, thank you very much.\n. ",
    "jinxin479": "thank you . thank you . ",
    "adailey14": "Update - animation works with anything other than 0%. And the 0% to 25% animation works, it's only the 25% to 0% that does not work.. Now I'm pretty sure this was related to updating to the latest velocity-animate. Closing this here and will reopen in that project.. Update - animation works with anything other than 0%. And the 0% to 25% animation works, it's only the 25% to 0% that does not work.. Now I'm pretty sure this was related to updating to the latest velocity-animate. Closing this here and will reopen in that project.. ",
    "martinjuhasz": "WIth `registerAnimation` you mean `RegisterEffect` of velocities UI pack?\r\nThanks for the hint about nested arrays, took me quite some time to figure out.. WIth `registerAnimation` you mean `RegisterEffect` of velocities UI pack?\r\nThanks for the hint about nested arrays, took me quite some time to figure out.. ",
    "Ouadie": "@martinjuhasz @finneganh Could you please post an example of how to queue up multiple animations? It would be really helpful!. @martinjuhasz @finneganh Could you please post an example of how to queue up multiple animations? It would be really helpful!. ",
    "nealoke": "@finneganh it is, but still doesn't resolve the error though? :/. @finneganh yes I am using webpack but haven't ran into this sort of issue with my other imported libraries. This is a [gist of my webpack](https://gist.github.com/nealoke/814acb32fcca8645bf21d1214c6f8fb3), be aware that my folder structure is a bit different. \r\n\r\n**Root**\r\n- app\r\n- src\r\n- tools (here are my webpack / gulp / node_modules / bower /...)\r\n\r\n. @finneganh aah that could be. Any ideas on how to solve this? (thanks for your time btw!). Managed to fix it using the following configuration in `webpack.config.js`.\r\n\r\n```\r\nresolve: {\r\n\troot: ['../tools/node_modules', '../tools/node_modules/babel'],\r\n},\r\n\r\nresolveLoader: {\r\n\troot: path.resolve('..', 'tools', 'node_modules')\r\n}\r\n```. @finneganh it is, but still doesn't resolve the error though? :/. @finneganh yes I am using webpack but haven't ran into this sort of issue with my other imported libraries. This is a [gist of my webpack](https://gist.github.com/nealoke/814acb32fcca8645bf21d1214c6f8fb3), be aware that my folder structure is a bit different. \r\n\r\n**Root**\r\n- app\r\n- src\r\n- tools (here are my webpack / gulp / node_modules / bower /...)\r\n\r\n. @finneganh aah that could be. Any ideas on how to solve this? (thanks for your time btw!). Managed to fix it using the following configuration in `webpack.config.js`.\r\n\r\n```\r\nresolve: {\r\n\troot: ['../tools/node_modules', '../tools/node_modules/babel'],\r\n},\r\n\r\nresolveLoader: {\r\n\troot: path.resolve('..', 'tools', 'node_modules')\r\n}\r\n```. ",
    "saniko": "Hi,\r\nThank for the quick reply!\r\nI'm aiming to animate the SVG as a functional component.\r\n\r\nJust making sure no known issues or limitations with velocity-react and SVG animation (react component from loader) before I dive deeper ;)\r\n\r\nThanks.\r\n. This has been solved with the runOnMount property.. Thanks.. Could you please elaborate?\r\nI have the same problem:\r\n\r\n` <VelocityTransitionGroup enter={{\r\n                 animation: { opacity: 1 },\r\n                 duration: '500ms',\r\n               }} leave={{\r\n                   animation: { opacity: 0 },\r\n                   duration: '500ms',\r\n                 }} runOnMount >\r\n                <GalleryManager />\r\n            </VelocityTransitionGroup>`\r\n\r\nGalleryManger renders every 2 seconds\r\nWhat am I doing wrong?\r\n\r\nThanks. Strange, it happens on a specific component that renders nested animated component, and\r\nonly on prod build.\r\nNo issue with other animations.\r\n\r\nIt's related to this issue:\r\n#174. Not sure it's related to velocity-react, but once i remove the animation, i get no errors.\r\nDo you see any issues with this code?\r\nHappens only on production build (webpack)\r\n\r\n```\r\nvar enterAnimation = {\r\n           animation: {opacity: 1},\r\n           duration: 600\r\n       }\r\n\r\nvar leaveAnimation = {\r\n           animation: {opacity: 0},\r\n           duration: 400,\r\n           style: {display: 'none'}\r\n       }\r\n\r\nreturn (\r\n        <div className='container logos'>\r\n               { this.state.displayData.map((displayData, index) => {\r\n                  <div key={index} className='col-md-3 col-sm-3'>\r\n                    <VelocityTransitionGroup enter={enterAnimation} leave={leaveAnimation}>\r\n                      <Image key={Math.floor(Math.random()*10)} data={this.state.data} />\r\n                    </VelocityTransitionGroup >\r\n                  </div>\r\n                  }\r\n\r\n              )}\r\n        </div>\r\n\r\n);\r\n\r\n```. Hi,\r\nThank for the quick reply!\r\nI'm aiming to animate the SVG as a functional component.\r\n\r\nJust making sure no known issues or limitations with velocity-react and SVG animation (react component from loader) before I dive deeper ;)\r\n\r\nThanks.\r\n. This has been solved with the runOnMount property.. Thanks.. Could you please elaborate?\r\nI have the same problem:\r\n\r\n` <VelocityTransitionGroup enter={{\r\n                 animation: { opacity: 1 },\r\n                 duration: '500ms',\r\n               }} leave={{\r\n                   animation: { opacity: 0 },\r\n                   duration: '500ms',\r\n                 }} runOnMount >\r\n                <GalleryManager />\r\n            </VelocityTransitionGroup>`\r\n\r\nGalleryManger renders every 2 seconds\r\nWhat am I doing wrong?\r\n\r\nThanks. Strange, it happens on a specific component that renders nested animated component, and\r\nonly on prod build.\r\nNo issue with other animations.\r\n\r\nIt's related to this issue:\r\n#174. Not sure it's related to velocity-react, but once i remove the animation, i get no errors.\r\nDo you see any issues with this code?\r\nHappens only on production build (webpack)\r\n\r\n```\r\nvar enterAnimation = {\r\n           animation: {opacity: 1},\r\n           duration: 600\r\n       }\r\n\r\nvar leaveAnimation = {\r\n           animation: {opacity: 0},\r\n           duration: 400,\r\n           style: {display: 'none'}\r\n       }\r\n\r\nreturn (\r\n        <div className='container logos'>\r\n               { this.state.displayData.map((displayData, index) => {\r\n                  <div key={index} className='col-md-3 col-sm-3'>\r\n                    <VelocityTransitionGroup enter={enterAnimation} leave={leaveAnimation}>\r\n                      <Image key={Math.floor(Math.random()*10)} data={this.state.data} />\r\n                    </VelocityTransitionGroup >\r\n                  </div>\r\n                  }\r\n\r\n              )}\r\n        </div>\r\n\r\n);\r\n\r\n```. ",
    "rico345100": "@finneganh No, it's not. I just removed and reinstalled node_modules but still got same error. If I loaded React twice, then it must be failed with same error message without using this module, but it's not. Replace the code to *not using* this module not causes error, worked fine.. I am using React v15.4.2. @finneganh No, it's not. I just removed and reinstalled node_modules but still got same error. If I loaded React twice, then it must be failed with same error message without using this module, but it's not. Replace the code to *not using* this module not causes error, worked fine.. I am using React v15.4.2. ",
    "ericm546": "I just found out that the real issue causing that was in velocity, so I enter a bug in their repo.\r\nhttps://github.com/julianshapiro/velocity/issues/755. I just found out that the real issue causing that was in velocity, so I enter a bug in their repo.\r\nhttps://github.com/julianshapiro/velocity/issues/755. ",
    "mt1140600": "Thanks! I made it run on a different port and it worked :+1: . Yes the tab panel is getting displayed even without velocity component. So you want me to make its display none?. Thanks! I made it run on a different port and it worked :+1: . Yes the tab panel is getting displayed even without velocity component. So you want me to make its display none?. ",
    "traviss-comvex": "Apologies, I just realized that I wrapped the component with additional properties. This is a non  issue.. Apologies, I just realized that I wrapped the component with additional properties. This is a non  issue.. ",
    "Robinfr": "Ah I see how the demo does it. But this feels more like a workaround than the way it should be to be honest.. This forces me to directly use the Velocity API instead of using this wrapper in a nice way..\r\n\r\nEdit: OK so `runAnimation` is not Velocity API. My bad. Still, it feels a bit weird to work this way..\r\n\r\nEspecially because the docs say\r\n\r\n> Useful for when you want an animation that corresponds to an event but not a particular model state change (e.g. a \"bump\" when a click occurs).\r\n\r\nBut this change is happening in response to a state change.. @finneganh wouldn't it be better to add a prop to the velocity component? That way in `componentWillUpdate` we can check for that prop. If `prop==='stop'` then stopAnimation, otherwise finishAnimation.\r\n\r\nWhat do you think?. I'll make a PR in that case.. Added the PR. Let me know if you agree or if you need changes. \r\n\r\nP.S.: I also tried updating the demo, but in the demo the `animation` prop never changes so that wasn't possible with this new prop. It might be doable if you also check if the `children` prop changes in `componentWillUpdate` but I see that as a different issue.. @finneganh I tried it out but it still doesn't seem to have the desired effect. I will check it out once more once I have some time.. I think I figured out why this is happening. Velocity is using Promises and returns a Promise for most functions. Yet in `velocity-component.js` you're calling the functions as if they are synchronous functions. I believe this might be causing issues with race conditions. I would suggest rewriting parts of the velocity component implementing promises to extend what Velocity is doing.. @finneganh . Sounds good, when this is released I will start using it straight away! \ud83d\ude04 . Ah I see how the demo does it. But this feels more like a workaround than the way it should be to be honest.. This forces me to directly use the Velocity API instead of using this wrapper in a nice way..\r\n\r\nEdit: OK so `runAnimation` is not Velocity API. My bad. Still, it feels a bit weird to work this way..\r\n\r\nEspecially because the docs say\r\n\r\n> Useful for when you want an animation that corresponds to an event but not a particular model state change (e.g. a \"bump\" when a click occurs).\r\n\r\nBut this change is happening in response to a state change.. @finneganh wouldn't it be better to add a prop to the velocity component? That way in `componentWillUpdate` we can check for that prop. If `prop==='stop'` then stopAnimation, otherwise finishAnimation.\r\n\r\nWhat do you think?. I'll make a PR in that case.. Added the PR. Let me know if you agree or if you need changes. \r\n\r\nP.S.: I also tried updating the demo, but in the demo the `animation` prop never changes so that wasn't possible with this new prop. It might be doable if you also check if the `children` prop changes in `componentWillUpdate` but I see that as a different issue.. @finneganh I tried it out but it still doesn't seem to have the desired effect. I will check it out once more once I have some time.. I think I figured out why this is happening. Velocity is using Promises and returns a Promise for most functions. Yet in `velocity-component.js` you're calling the functions as if they are synchronous functions. I believe this might be causing issues with race conditions. I would suggest rewriting parts of the velocity component implementing promises to extend what Velocity is doing.. @finneganh . Sounds good, when this is released I will start using it straight away! \ud83d\ude04 . ",
    "markjaquith": "I ran into this issue today, and had an idea.\r\n\r\nVelocity accepts a `begin` option that runs when an animation is starting. Since the issue seemed to be that the partial height from a previous interruption gets \"stuck\" into the `style` and used as the new height, I figured I could use `begin` to reset the element's height to `null` before the animation begins.\r\n\r\nAnd that works! `slideDown` no longer gets stuck at a previous interrupt point. But it's annoying to have to manually pass a `begin` option for every call to `VelocityComponent`, so I made a wrapper that automatically adds it for any `slideDown` animations.\r\n\r\n```jsx\r\nclass MyVelocity extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // https://reactjs.org/docs/handling-events.html\r\n    this.begin = this.begin.bind(this);\r\n  }\r\n\r\n  begin(elements) {\r\n    if ( 'slideDown' === this.props.animation ) {\r\n      elements.forEach((el) => {\r\n        if ( 'none' === el.style.display ) {\r\n          el.style.height = null;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const props = Object.assign({}, {begin: this.begin}, this.props);\r\n    return (\r\n      <VelocityComponent {...props}>\r\n        {this.props.children}\r\n      </VelocityComponent>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nNow you just use `<MyVelocity />` the same way you'd use `<VelocityComponent />`, and it will keep your `slideDown` animations from getting stuck.\r\n\r\nIt's a bandaid, but for anyone tearing their hair out about this, I hope this helps.. I ran into this issue today, and had an idea.\r\n\r\nVelocity accepts a `begin` option that runs when an animation is starting. Since the issue seemed to be that the partial height from a previous interruption gets \"stuck\" into the `style` and used as the new height, I figured I could use `begin` to reset the element's height to `null` before the animation begins.\r\n\r\nAnd that works! `slideDown` no longer gets stuck at a previous interrupt point. But it's annoying to have to manually pass a `begin` option for every call to `VelocityComponent`, so I made a wrapper that automatically adds it for any `slideDown` animations.\r\n\r\n```jsx\r\nclass MyVelocity extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // https://reactjs.org/docs/handling-events.html\r\n    this.begin = this.begin.bind(this);\r\n  }\r\n\r\n  begin(elements) {\r\n    if ( 'slideDown' === this.props.animation ) {\r\n      elements.forEach((el) => {\r\n        if ( 'none' === el.style.display ) {\r\n          el.style.height = null;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const props = Object.assign({}, {begin: this.begin}, this.props);\r\n    return (\r\n      <VelocityComponent {...props}>\r\n        {this.props.children}\r\n      </VelocityComponent>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nNow you just use `<MyVelocity />` the same way you'd use `<VelocityComponent />`, and it will keep your `slideDown` animations from getting stuck.\r\n\r\nIt's a bandaid, but for anyone tearing their hair out about this, I hope this helps.. ",
    "danielo515": "I would love to see this merged and released.\r\nMany thanks for this. Nice ! When is the release planned ?. I would love to see this merged and released.\r\nMany thanks for this. Nice ! When is the release planned ?. ",
    "MichaelDeBoey": "@finneganh `prop-types` [requires](https://github.com/reactjs/prop-types#compatibility) `React 0.14.9` or `React ^15.3.0`\r\n\r\nFixed that in #197 . @finneganh `react-transition-group` also [requires](https://github.com/reactjs/react-transition-group/blob/master/package.json#L41-L42) `React ^15.0.0`, so we need to drop support for `React 0.14.9` as well...\r\n\r\nFixed that in #199. This one requires a major bump I think...?. Yeah but older versions are deprecated now since the new release so everyone that uses `React 0.14.*` and has `velocity-react ^1.0.0` will now be forced to upgrade to `React v15.5`. Not if everyone's using semver... \ud83d\ude1b\r\nThen there wouldn't be breaking changes (like `React` incompatibility). But it's documented well in the CHANGELOG, so that already something \ud83d\ude42 . No problem \ud83d\ude09 . @finneganh `prop-types` [requires](https://github.com/reactjs/prop-types#compatibility) `React 0.14.9` or `React ^15.3.0`\r\n\r\nFixed that in #197 . @finneganh `react-transition-group` also [requires](https://github.com/reactjs/react-transition-group/blob/master/package.json#L41-L42) `React ^15.0.0`, so we need to drop support for `React 0.14.9` as well...\r\n\r\nFixed that in #199. This one requires a major bump I think...?. Yeah but older versions are deprecated now since the new release so everyone that uses `React 0.14.*` and has `velocity-react ^1.0.0` will now be forced to upgrade to `React v15.5`. Not if everyone's using semver... \ud83d\ude1b\r\nThen there wouldn't be breaking changes (like `React` incompatibility). But it's documented well in the CHANGELOG, so that already something \ud83d\ude42 . No problem \ud83d\ude09 . ",
    "hoflish": "1. install the new package\r\n    **yarn**: `yarn add  react-transition-group@1.1.1` \r\n    **npm**:  `npm install --save react-transition-group@1.1.1`\r\n\r\n2. then import \r\n`import ReactTransitionGroup from 'react-transition-group/TransitionGroup';`\r\n\r\nnpm package : https://www.npmjs.com/package/react-addons-transition-group\r\n. 1. install the new package\r\n    **yarn**: `yarn add  react-transition-group@1.1.1` \r\n    **npm**:  `npm install --save react-transition-group@1.1.1`\r\n\r\n2. then import \r\n`import ReactTransitionGroup from 'react-transition-group/TransitionGroup';`\r\n\r\nnpm package : https://www.npmjs.com/package/react-addons-transition-group\r\n. ",
    "maximusnikulin": "Could you get me some example for it ?. I'll try this out, thanks a lot. I have tried this, it works for one direction, but it seems that it don't recognise delay property on reverse direction.\r\nThat's my code:\r\n```javascript \r\n <VelocityComponent \r\n                        key = {i + '' + j}                        \r\n                        animation = {\r\n                            velocityHelpers.registerEffect({ \r\n                                defaultDuration:1000,                               \r\n                                calls: [\r\n                                    [{  translateY: this.props.collapse ? -(this.fullHeight - 150 + topOffset) : 0}, 1, delay: 500],                                                                                    \r\n                                    [{  translateX: this.props.collapse ? -leftOffset : 0 }, 1, {delay: this.props.collapse ? 500 : 0}],            \r\n                                ],\r\n                                \r\n                            })                            \r\n                        }\r\n                        >                                                               \r\n                            <i className = 'points__item'\r\n                            style = {{                                                        \r\n                                    top: topOffset + 'px',\r\n                                    left: leftOffset + 'px',\r\n                                }}></i>\r\n                    </VelocityComponent >\r\n```\r\nDo you have any ideas? I am really exhausted by it. I hope for your help, thanks . Could you get me some example for it ?. I'll try this out, thanks a lot. I have tried this, it works for one direction, but it seems that it don't recognise delay property on reverse direction.\r\nThat's my code:\r\n```javascript \r\n <VelocityComponent \r\n                        key = {i + '' + j}                        \r\n                        animation = {\r\n                            velocityHelpers.registerEffect({ \r\n                                defaultDuration:1000,                               \r\n                                calls: [\r\n                                    [{  translateY: this.props.collapse ? -(this.fullHeight - 150 + topOffset) : 0}, 1, delay: 500],                                                                                    \r\n                                    [{  translateX: this.props.collapse ? -leftOffset : 0 }, 1, {delay: this.props.collapse ? 500 : 0}],            \r\n                                ],\r\n                                \r\n                            })                            \r\n                        }\r\n                        >                                                               \r\n                            <i className = 'points__item'\r\n                            style = {{                                                        \r\n                                    top: topOffset + 'px',\r\n                                    left: leftOffset + 'px',\r\n                                }}></i>\r\n                    </VelocityComponent >\r\n```\r\nDo you have any ideas? I am really exhausted by it. I hope for your help, thanks . ",
    "MartinHaeusler": "Well, as it happens, there *are* typings for Velocity already (however, I don't know how complete they are):\r\n\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/354cec620daccfa0ad167ba046651fb5fef69e8a/types/velocity-animate/index.d.ts\r\n\r\n... just if anybody is interested in doing this. I'm just starting out with this library.. Okay I took a look at it after all. Using your NPM documentation, I was able to figure out most things I think. I have attached my `velocity-react.d.ts` file to this post ([velocity-react.d.ts.zip](https://github.com/twitter-fabric/velocity-react/files/1027504/velocity-react.d.ts.zip); I had to zip it because GitHub does not accept *.ts files as attachments).\r\n\r\nThis file has no guarantee for completion, but it works to get the basic examples going and give some guidance. It also lists the names of all animations that are included in velocity by default.\r\n\r\nThis file has absolutely *zero* dependencies to `velocity` typings. For attributes/references that refer to velocity, this typings file uses `Object`. This is because the standard velocity typings are crawling with `Object` and `any` types to begin with, so there is not much point in including them.\r\n\r\nFeel free to do with this file whatever you want. If you take a look and see something missing, please, by all means, do update it. This is merely what I can make of the documentation.\r\n. Well, as it happens, there *are* typings for Velocity already (however, I don't know how complete they are):\r\n\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/354cec620daccfa0ad167ba046651fb5fef69e8a/types/velocity-animate/index.d.ts\r\n\r\n... just if anybody is interested in doing this. I'm just starting out with this library.. Okay I took a look at it after all. Using your NPM documentation, I was able to figure out most things I think. I have attached my `velocity-react.d.ts` file to this post ([velocity-react.d.ts.zip](https://github.com/twitter-fabric/velocity-react/files/1027504/velocity-react.d.ts.zip); I had to zip it because GitHub does not accept *.ts files as attachments).\r\n\r\nThis file has no guarantee for completion, but it works to get the basic examples going and give some guidance. It also lists the names of all animations that are included in velocity by default.\r\n\r\nThis file has absolutely *zero* dependencies to `velocity` typings. For attributes/references that refer to velocity, this typings file uses `Object`. This is because the standard velocity typings are crawling with `Object` and `any` types to begin with, so there is not much point in including them.\r\n\r\nFeel free to do with this file whatever you want. If you take a look and see something missing, please, by all means, do update it. This is merely what I can make of the documentation.\r\n. ",
    "DanHarman": "@finneganh @MartinHaeusler Any further progess on this? Typings would be super useful as typescript has gained a lot of momentum since google endorsed it for angular... It makes the api a lot more discoverable too.. @finneganh @MartinHaeusler Any further progess on this? Typings would be super useful as typescript has gained a lot of momentum since google endorsed it for angular... It makes the api a lot more discoverable too.. ",
    "kb": "@tonybaroneee FYI. @tonybaroneee FYI. ",
    "skiptomyliu": "I have an automatic scrolling slide show of images.  It's currently modeled after the demo scrolling-group.jsx because the behavior is nearly identical with some minor tweaks.  \r\n\r\nHowever, I would like the end user to be able to pause / play the slide show.  I can \"pause\" the adding of additional items once the animation finishes entering/leaving, but actually pausing during the animation is proving a challenge.. I have an automatic scrolling slide show of images.  It's currently modeled after the demo scrolling-group.jsx because the behavior is nearly identical with some minor tweaks.  \r\n\r\nHowever, I would like the end user to be able to pause / play the slide show.  I can \"pause\" the adding of additional items once the animation finishes entering/leaving, but actually pausing during the animation is proving a challenge.. ",
    "hirenumradia": "I have setup an example here:\r\n\r\nIf you repeatedly click the \"Toggle List\" button and compare the two demos, you can replicate the issue.\r\n\r\nVelocity React 1.1.4 (Working)\r\nhttps://codesandbox.io/s/5K3yjOpq\r\n\r\nVelocity React 1.3.3 (Broken)\r\nhttps://codesandbox.io/s/wp6kJgmPw. Hey @Antho2407, I havnt had a chance to look at this yet but I can try take a look again next week. For now I am just using the older version. From taking a look at the profiles between both versions, there are a lot more events firing in the newer version, it seems to me that all the events are being processed synchronously so is causing wierd issues. Would love a second pair of eyes on it if you have time!\r\n\r\n. @Antho2407 when you get some time, could you fork my code in codesandbox above and put in an example of what your tying to do? Rolling back to an older version fixed my issue, I can see if i can help with yours as well.. Nice, good that you sovled the issue. 1.1.4 is stable enough for now but the issue should really be solved properly. Gonna take a look tonight to see if I can make sense of whats going on.. Hey,\r\n\r\nTake a look at this, I think this answers your question. <3\r\n\r\nhttps://codesandbox.io/s/5K3yjOpq\r\n. I have setup an example here:\r\n\r\nIf you repeatedly click the \"Toggle List\" button and compare the two demos, you can replicate the issue.\r\n\r\nVelocity React 1.1.4 (Working)\r\nhttps://codesandbox.io/s/5K3yjOpq\r\n\r\nVelocity React 1.3.3 (Broken)\r\nhttps://codesandbox.io/s/wp6kJgmPw. Hey @Antho2407, I havnt had a chance to look at this yet but I can try take a look again next week. For now I am just using the older version. From taking a look at the profiles between both versions, there are a lot more events firing in the newer version, it seems to me that all the events are being processed synchronously so is causing wierd issues. Would love a second pair of eyes on it if you have time!\r\n\r\n. @Antho2407 when you get some time, could you fork my code in codesandbox above and put in an example of what your tying to do? Rolling back to an older version fixed my issue, I can see if i can help with yours as well.. Nice, good that you sovled the issue. 1.1.4 is stable enough for now but the issue should really be solved properly. Gonna take a look tonight to see if I can make sense of whats going on.. Hey,\r\n\r\nTake a look at this, I think this answers your question. <3\r\n\r\nhttps://codesandbox.io/s/5K3yjOpq\r\n. ",
    "mmussmann": "OK did miss the obvious, but what I initially noticed was that it looked like the code should call the 2 methods for stop and finish animations instead of having that code twice?\r\n\r\n_finishAnimation() {\r\n_stopAnimation() {. Should I make a PR? and would you want a patch version increase based on it?. OK did miss the obvious, but what I initially noticed was that it looked like the code should call the 2 methods for stop and finish animations instead of having that code twice?\r\n\r\n_finishAnimation() {\r\n_stopAnimation() {. Should I make a PR? and would you want a patch version increase based on it?. ",
    "clementAC": "Thanks it's exactly what I was looking for!. Thanks it's exactly what I was looking for!. ",
    "matthetherington": "Nevermind, removed `node_modules` + `package-lock.json`, ran another `npm install` and all is working now.. Nevermind, removed `node_modules` + `package-lock.json`, ran another `npm install` and all is working now.. ",
    "Rycochet": "Try adding a duration percentage to each of the calls - it's 1 by default, so with 9 calls should be 1/9 -\r\n\r\n```\r\n  calls: [\r\n    [{\r\n      translateX: '10vw',\r\n      translateY: '32.3vw',\r\n      translateZ: '10vw'\r\n    }, 1/9],\r\n```\r\n\r\nIf that doesn't sort it out then I don't know - this function itself is going to be changed and replaced in v2 of Velocity, which will hopefully be testing properly by the end of the month.... I honestly can't remember - but there's nothing stopping you using \"real\" css values now -\r\n\r\n```javascript\r\nconst EmailAnimation = velocityHelpers.registerEffect({\r\n  defaultDuration: 20000,\r\n  calls: [\r\n    [{\r\n      transform: 'translate(10vw,30vw,10vw)'\r\n    }, 1 / 3],\r\n    [{\r\n      transform: 'translate(45vw,40vw,5vw)'\r\n    }, 1 / 3],\r\n    [{\r\n      transform: 'translate(45vw,40vw,0vw)'\r\n    }, 1 / 3]\r\n  ]\r\n})\r\n```\r\n\r\nThe split apart `translateX / Y / Z` etc parts are already removed in v2 (though will be available with a polyfill before release) - not least because you have no control of the order transforms are added when using an Object (alphabetical now btw).\r\n\r\nI feel you'll still need to forcefeed the first value simply so the parser has something to work with - spaces are ignored so if that's the only transform on then having `transform:translate(0,0,0);` in the CSS might be enough.. It was added in Velocity 1.3.2 (so was working in 1.4.0 as used here). Not sure why it's not working, and sadly not really got the time to look into it with everything else that's changing - though hopefully with v2 things will improve (and as I used React at work occasionally I'm hoping this will fully support it soon after release) ;-)\r\n\r\nDefinitely sounds like there's some bug there though :-(. Try adding a duration percentage to each of the calls - it's 1 by default, so with 9 calls should be 1/9 -\r\n\r\n```\r\n  calls: [\r\n    [{\r\n      translateX: '10vw',\r\n      translateY: '32.3vw',\r\n      translateZ: '10vw'\r\n    }, 1/9],\r\n```\r\n\r\nIf that doesn't sort it out then I don't know - this function itself is going to be changed and replaced in v2 of Velocity, which will hopefully be testing properly by the end of the month.... I honestly can't remember - but there's nothing stopping you using \"real\" css values now -\r\n\r\n```javascript\r\nconst EmailAnimation = velocityHelpers.registerEffect({\r\n  defaultDuration: 20000,\r\n  calls: [\r\n    [{\r\n      transform: 'translate(10vw,30vw,10vw)'\r\n    }, 1 / 3],\r\n    [{\r\n      transform: 'translate(45vw,40vw,5vw)'\r\n    }, 1 / 3],\r\n    [{\r\n      transform: 'translate(45vw,40vw,0vw)'\r\n    }, 1 / 3]\r\n  ]\r\n})\r\n```\r\n\r\nThe split apart `translateX / Y / Z` etc parts are already removed in v2 (though will be available with a polyfill before release) - not least because you have no control of the order transforms are added when using an Object (alphabetical now btw).\r\n\r\nI feel you'll still need to forcefeed the first value simply so the parser has something to work with - spaces are ignored so if that's the only transform on then having `transform:translate(0,0,0);` in the CSS might be enough.. It was added in Velocity 1.3.2 (so was working in 1.4.0 as used here). Not sure why it's not working, and sadly not really got the time to look into it with everything else that's changing - though hopefully with v2 things will improve (and as I used React at work occasionally I'm hoping this will fully support it soon after release) ;-)\r\n\r\nDefinitely sounds like there's some bug there though :-(. ",
    "JM-Mendez": "You need to register an effect helper, and use the calls property to chain effects. The animations can also be a string value. Duration Percentage from what I can tell is just a multiplier of the set duration. I set it to 1. All call props and options get passed to velocity. More details can be seen here http://velocityjs.org/#uiPack\r\n\r\n```javascript\r\n    // attach at a top level. I had to also place it in the same file where I used it.\r\n    require('velocity-animate/velocity.ui')\r\n\r\n    const animHelpers = {\r\n      customAnim: velocity.registerEffect({\r\n        defaultDuration: duration,\r\n        calls: [\r\n          [ { property: value }, durationPercentage, { options } ],\r\n          [ { property: value }, durationPercentage, { options } ]\r\n        ],\r\n        reset: { property: value, property: value }\r\n      });)\r\n    }\r\n// in component\r\n<Comp  animation={animHelpers.customAnim} />\r\n```. You need to register an effect helper, and use the calls property to chain effects. The animations can also be a string value. Duration Percentage from what I can tell is just a multiplier of the set duration. I set it to 1. All call props and options get passed to velocity. More details can be seen here http://velocityjs.org/#uiPack\r\n\r\n```javascript\r\n    // attach at a top level. I had to also place it in the same file where I used it.\r\n    require('velocity-animate/velocity.ui')\r\n\r\n    const animHelpers = {\r\n      customAnim: velocity.registerEffect({\r\n        defaultDuration: duration,\r\n        calls: [\r\n          [ { property: value }, durationPercentage, { options } ],\r\n          [ { property: value }, durationPercentage, { options } ]\r\n        ],\r\n        reset: { property: value, property: value }\r\n      });)\r\n    }\r\n// in component\r\n<Comp  animation={animHelpers.customAnim} />\r\n```. ",
    "EmilioAiolfi": "@finneganh this PR not resolve the issue [link](https://github.com/twitter-fabric/velocity-react/issues/77) ?. @finneganh this PR not resolve the issue [link](https://github.com/twitter-fabric/velocity-react/issues/77) ?. ",
    "klaytonfaria": "@EmilioAiolfi and @eddiemonge It seems to solve the issue. @EmilioAiolfi and @eddiemonge It seems to solve the issue. ",
    "merraysy": "+1, When the `runOnMount` prop is falsy the `complete` callback gets called on component's mount.\r\n\r\nThis behavior is there due to the following statements https://github.com/google-fabric/velocity-react/blob/master/src/velocity-component.js#L67.\r\n\r\n@finneganh I don't know exactly the semantics of ending the animation at the component's mount when it's not supposed to `runOnMount`, the only thing a know is that it's not natural and contrasts with the meaning and uses of `complete` callback.. +1, When the `runOnMount` prop is falsy the `complete` callback gets called on component's mount.\r\n\r\nThis behavior is there due to the following statements https://github.com/google-fabric/velocity-react/blob/master/src/velocity-component.js#L67.\r\n\r\n@finneganh I don't know exactly the semantics of ending the animation at the component's mount when it's not supposed to `runOnMount`, the only thing a know is that it's not natural and contrasts with the meaning and uses of `complete` callback.. ",
    "andrewhl": "@finneganh Thank you so much! The extra `[]`s was it. . @finneganh Thank you so much! The extra `[]`s was it. . ",
    "lukeapage": "Ok, sorry I didn't realize that.. if v1 will support react 16 it's not important to me.. I just pin the sub dependency in my own package Json and let npm resolve both to 1.2.1. We have been running 1.2.0 in production without any known problems for several months.. Ok, sorry I didn't realize that.. if v1 will support react 16 it's not important to me.. I just pin the sub dependency in my own package Json and let npm resolve both to 1.2.1. We have been running 1.2.0 in production without any known problems for several months.. ",
    "jquense": "I'm gonna backport the peer dep range update to v1 but at this point i'd consider v1 deprecated, i have no idea when it is going to stop working and v2 contains a bunch of better stuff that should make implementation easier! let me know if ya'll need info. I'm gonna backport the peer dep range update to v1 but at this point i'd consider v1 deprecated, i have no idea when it is going to stop working and v2 contains a bunch of better stuff that should make implementation easier! let me know if ya'll need info. ",
    "lhamrit": "react-transition-group 1.2.1 now supports React 16 ([link](https://github.com/reactjs/react-transition-group/blob/v1.2.1/package.json)), so velocity-react could just upgrade to that. react-transition-group 1.2.1 now supports React 16 ([link](https://github.com/reactjs/react-transition-group/blob/v1.2.1/package.json)), so velocity-react could just upgrade to that. ",
    "brekk": "@finneganh ok, but this is a blocking issue for me. thanks for your time.. @finneganh ok, but this is a blocking issue for me. thanks for your time.. ",
    "samhastings": "Good question! I really am not sure. I'm using Babel to transpile my own project so I assumed that was looking at velocity-react's .babelrc file. But of course it shouldn't need to do that if your code ships pre-transpiled, which I hadn't considered until you mentioned it.\r\n\r\nI'm just using `import 'velocity-react';` to try and animate an element in a React component. Could Babel be recursing into this project and trying to transpile again?\r\n\r\nAre there any other troubleshooting steps you could recommend? Appreciate this is now looking more like a support request than an issue, so will take this to Stack Overflow if you'd prefer.. OK I was unaware of the `exclude` option in the Webpack Babel Loader config, and that was trying to transpile all my Node modules without my knowledge. Just needed to get it to ignore my `node_modules` directory.\r\n\r\n```\r\n// webpack.config.babel.js\r\nrules: [\r\n    {\r\n        test: /\\.js$/,\r\n        exclude: /node_modules/,\r\n        use: [\r\n            'babel-loader',\r\n        ]\r\n    }\r\n]\r\n```\r\n\r\nClosing as this is not an issue!. Good question! I really am not sure. I'm using Babel to transpile my own project so I assumed that was looking at velocity-react's .babelrc file. But of course it shouldn't need to do that if your code ships pre-transpiled, which I hadn't considered until you mentioned it.\r\n\r\nI'm just using `import 'velocity-react';` to try and animate an element in a React component. Could Babel be recursing into this project and trying to transpile again?\r\n\r\nAre there any other troubleshooting steps you could recommend? Appreciate this is now looking more like a support request than an issue, so will take this to Stack Overflow if you'd prefer.. OK I was unaware of the `exclude` option in the Webpack Babel Loader config, and that was trying to transpile all my Node modules without my knowledge. Just needed to get it to ignore my `node_modules` directory.\r\n\r\n```\r\n// webpack.config.babel.js\r\nrules: [\r\n    {\r\n        test: /\\.js$/,\r\n        exclude: /node_modules/,\r\n        use: [\r\n            'babel-loader',\r\n        ]\r\n    }\r\n]\r\n```\r\n\r\nClosing as this is not an issue!. "
}