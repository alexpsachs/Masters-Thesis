{
    "georgealways": "Thanks a million for the feedback doob!\n\nI think that'd be a good solution. But perhaps instead of having each controller responsible for instantiating its own interval that checks the value, we have a method like GUI.listen() that you call in your own loop that goes through and monitors for variable changes on EVERY controller?\n\nCurious to hear your thoughts on this approach. It may be that your sketch doesn't have a loop, or that you don't want to waste resources checking every variable you've added to the GUI (but I'm not exactly sure how taxing that really is).\n. Right. I'm for the idea of individual controllers getting \"listened\" and I think there's something really elegant about putting .listen() at the end of the add call -- my only concern is: how do we give developers control over how frequently those values they choose to listen to are monitored? That's the only reason I was sort of into the idea of a GUI.listen() function that belongs in a user's own interval.\n. we'll add this to the demo page though!\n\nit would be cool if we somehow knew the name of the object you were passing (in this case \"camera.position\")\n\none thing i was thinking that might be possible is to sort of reflectively look at the contents of the function who called GUI.add via arguments.callee and maybe deduce the variable name from there?\n. Changed this back to just .name() -- think it looks cleaner :)\n. Erm. ... wha?\n\nController.js:23 \n\nController.prototype.name = function(n) {\n. I also like this idea, but I want to be sure people are extending our controller class properly -- there are specific things you have to do if you want them to work in accordance with .listen() for example, or further, the sort of save features I'm adding now.\n\nI feel like the syntax should look something more like\n\ngui.custom(ClassName, CustomControllerClassName);\n\n// i.e.\ngui.custom(Vector2D, CustomVector2DControllerImplementation)\n\nHOWEVER I was thinking we should do this in addition to another, simpler thing that may suffice for a lot of situations in which:\n\ngui.add( myObj ) \n\nwould just add all of that object's public properties to a given panel. So, if you happened to have given myObj a property of type Vector2D, its control could be registered automatically.\n. P effin' nice. the only other weird thing is leave a gap for the shadow when you stretch the menu all the way tal\n. yessir! we're going with apache :)\n. Hey szimek. Just wrapped this up -- let me know what you think. Should select the initial value by default. Not sure what you mean by this however: \n\nIf an array is passed e.g. [\"a\", \"b\", \"c\"] it is converted to an object {\"a\": \"a\", \"b\": \"b\", \"c\": \"c\"}, where key is a label and value is, well, value.\n\nFairly sure the behavior is the same?\n. Ah, silly mistake -- my bad. Fixed!\n. Good call, will do. A bad habit that I'm trying to break ;)\n. Out of curiosity though, why would MooTools modify the behavior of a for in loop ...\n. Hmm. Yes onFinishChange is primarily directed at Numbers and Strings which will change incrementally until the user is \"done\". For consistency's sake, I think it should be such that onChange and onFinishChange either fire at the same time, or are literally synonymous for Boolean controllers. Thoughts?\n. Thanks!! Proposed model: \n\nBoolean, onFinishChange = onChange. Whatever you pass to either of these methods will be modifying the same internal reference to a callback. There's just one. \n\nBehavior remains unchanged for Numbers and Strings: onChange = whenever the value changes at all. onFinishChange is when the controller UI element loses focus.\n\nFunctions -- doesn't apply.\n. ... just so I remember to fix it ;)\n. Totally agreed! We've certainly been thinking about it ... I think its important to choose a format to represent color that has a relatively wide degree of consensus. UI is obviously really important here too. \n. No worries, we'll get to it. We have a lot planned for dat.gui in a subsequent update.\n. Thanks a million for the feedback doob!\n\nI think that'd be a good solution. But perhaps instead of having each controller responsible for instantiating its own interval that checks the value, we have a method like GUI.listen() that you call in your own loop that goes through and monitors for variable changes on EVERY controller?\n\nCurious to hear your thoughts on this approach. It may be that your sketch doesn't have a loop, or that you don't want to waste resources checking every variable you've added to the GUI (but I'm not exactly sure how taxing that really is).\n. Right. I'm for the idea of individual controllers getting \"listened\" and I think there's something really elegant about putting .listen() at the end of the add call -- my only concern is: how do we give developers control over how frequently those values they choose to listen to are monitored? That's the only reason I was sort of into the idea of a GUI.listen() function that belongs in a user's own interval.\n. we'll add this to the demo page though!\n\nit would be cool if we somehow knew the name of the object you were passing (in this case \"camera.position\")\n\none thing i was thinking that might be possible is to sort of reflectively look at the contents of the function who called GUI.add via arguments.callee and maybe deduce the variable name from there?\n. Changed this back to just .name() -- think it looks cleaner :)\n. Erm. ... wha?\n\nController.js:23 \n\nController.prototype.name = function(n) {\n. I also like this idea, but I want to be sure people are extending our controller class properly -- there are specific things you have to do if you want them to work in accordance with .listen() for example, or further, the sort of save features I'm adding now.\n\nI feel like the syntax should look something more like\n\ngui.custom(ClassName, CustomControllerClassName);\n\n// i.e.\ngui.custom(Vector2D, CustomVector2DControllerImplementation)\n\nHOWEVER I was thinking we should do this in addition to another, simpler thing that may suffice for a lot of situations in which:\n\ngui.add( myObj ) \n\nwould just add all of that object's public properties to a given panel. So, if you happened to have given myObj a property of type Vector2D, its control could be registered automatically.\n. P effin' nice. the only other weird thing is leave a gap for the shadow when you stretch the menu all the way tal\n. yessir! we're going with apache :)\n. Hey szimek. Just wrapped this up -- let me know what you think. Should select the initial value by default. Not sure what you mean by this however: \n\nIf an array is passed e.g. [\"a\", \"b\", \"c\"] it is converted to an object {\"a\": \"a\", \"b\": \"b\", \"c\": \"c\"}, where key is a label and value is, well, value.\n\nFairly sure the behavior is the same?\n. Ah, silly mistake -- my bad. Fixed!\n. Good call, will do. A bad habit that I'm trying to break ;)\n. Out of curiosity though, why would MooTools modify the behavior of a for in loop ...\n. Hmm. Yes onFinishChange is primarily directed at Numbers and Strings which will change incrementally until the user is \"done\". For consistency's sake, I think it should be such that onChange and onFinishChange either fire at the same time, or are literally synonymous for Boolean controllers. Thoughts?\n. Thanks!! Proposed model: \n\nBoolean, onFinishChange = onChange. Whatever you pass to either of these methods will be modifying the same internal reference to a callback. There's just one. \n\nBehavior remains unchanged for Numbers and Strings: onChange = whenever the value changes at all. onFinishChange is when the controller UI element loses focus.\n\nFunctions -- doesn't apply.\n. ... just so I remember to fix it ;)\n. Totally agreed! We've certainly been thinking about it ... I think its important to choose a format to represent color that has a relatively wide degree of consensus. UI is obviously really important here too. \n. No worries, we'll get to it. We have a lot planned for dat.gui in a subsequent update.\n. ",
    "mrdoob": "Well, the idea was that GUI would have an internal interval. By calling `.listen()` the controller then would be added to the list of controllers to be checked in that loop. I don't think listening to all the controllers would be a good approach.\n\nMaybe `.startListening()` and `.stopListening()`?\n. Here you have a patch :)\nhttps://github.com/mrdoob/gui-dat/commit/d770dbb0c20e41a3ab38605d46ceff5e69696461\n. > Gotcha covered on that one already -- and the syntax is exactly as you describe -- only setName instead of name.\n\nAck! My fault... yeah, having an example of that on the demo would be nice :)\n. Did you commit to jonobr1 branch?\n. You're 2 days late... :)\n. I can confirm on Fedora/Linux 19.\n. Well, the idea was that GUI would have an internal interval. By calling `.listen()` the controller then would be added to the list of controllers to be checked in that loop. I don't think listening to all the controllers would be a good approach.\n\nMaybe `.startListening()` and `.stopListening()`?\n. Here you have a patch :)\nhttps://github.com/mrdoob/gui-dat/commit/d770dbb0c20e41a3ab38605d46ceff5e69696461\n. > Gotcha covered on that one already -- and the syntax is exactly as you describe -- only setName instead of name.\n\nAck! My fault... yeah, having an example of that on the demo would be nice :)\n. Did you commit to jonobr1 branch?\n. You're 2 days late... :)\n. I can confirm on Fedora/Linux 19.\n. ",
    "jonobr1": "merged: https://github.com/jonobr1/gui-dat/commit/f736507fd460001e7b160324f9bc33b00515d2b2\n. Gotcha covered on that one already -- and the syntax is exactly as you describe -- only setName instead of name.\n. updating right now :)\n. it doesn't seem like this was committed..?\n. it doesn't seem like this was committed..? ATM still .setName()\n. All synced up :)\n. This is a great idea! I'll patch that in.\n. I imagine we would have another handlerType, perhaps called anonymous to serve this purpose\n. I find that gui.add( myObj ) would be insanely helpful, even to the point where the GUI could expose things that you probably didn't even know you wanted to control :)\n\nGreat idea George.\n. hmm, maybe we can override with js preventDefaults()\n. done and done: https://github.com/jonobr1/gui-dat/commit/d099440e0ee2c6b5e806a889844b040777119942\n. wait, vertically?\n. ehhh, on second thought nevermind. Doesn't seem to be too helpful as an array is just an object, like null or something else...\n\nhttps://developer.mozilla.org/en/JavaScript/Reference/Operators/Special/typeof\n. hmm, maybe there's a work around with a custom object ... :\\\n\nor just add a custom type.\n. this is the .options()\n. Hey szimek, thanks for the help! I pulled your branch locally, but the animation doesn't seem to work. Not sure how, but perhaps do you have more CSS than just:\n\n```\ndiv.collapsable {\n    overflow: hidden;\n    clear: both;\n    height: 0px;\n    -moz-transition: height .2s linear;\n    -webkit-transition: height .2s linear;\n    transition: height .2s linear;\n}\n```\n\n??? (line 86 of demo.css)\n. haha, nah no worries m8 \u2014\u00a0honored that you're interested in the project!\n. Thanks so much for the follow up. That SO thread was very informative. Pushed the changes :)\n\nhttps://github.com/jonobr1/gui-dat/commit/e21e0ac5c352cd966ea7cdb27490a76fcc9418ba\n. Thanks for the interest @dangoor! George and I are currently debating which license to throw this under, should have something very soon! Until then don't be shy to pull / clone / fork and mess around!\n. Thanks for this. Merging right now.\n. Thanks for the help! It's up.\n. Correct me if I'm wrong, but I think the latest versions have this problem solved.\n. doh and duhhhh \u2014\u00a0thanks for bearing with me :)\n. Thanks for catching this and thanks for using gui-dat! I've updated the master and gh-pages branches that you can pull to make the changes. Do you feel comfortable doing that or should I update the minified versions right away?\n\nAlso, I'd love to see what you've done with it!\n. Just updated the latest minified version. You can download it here: https://github.com/jonobr1/gui-dat/raw/versions/gui.min.js\n. SWEEEEEEEEEEEEET\n. it's all good\n. Thanks for the help!\n. Will look into this. Thanks for the post!\n. Looks good to me! Thanks for the help.\n. Good thinking. We're big fans of backbone. I'd love to know what you're up to.\n. cool cool \u2014 thanks seth-visere!\n. If you've set each GUI to a parameter or to an array then you should be able to access the DOM Element via the `domElement` getter / setter. A hook that would help you in your app is to fire something like this:\n\n```\nfunction removeGui(gui, parent) {\n  if(!parent) {\n    parent = DAT.GUI.autoPlaceContainer;\n  }\n  parent.removeChild(gui.domElement);\n}\n\nfunction addGui(gui, parent) {\n  if(!parent) {\n    parent = DAT.GUI.autoPlaceContainer;\n  }\n  parent.appendChild(gui);\n}\n```\n\nwhere the parameters `gui` represents the `DAT.GUI` you want to remove and `parent` is the parent container where if you didn't specify a `domElement` when instantiating `DAT.GUI` then you don't need to pass a parent. That should do the trick \u2014\u00a0not sure if there's a need to expose this within the library. Lemme know\n. Not sure I understand what you mean by clean up after the DAT.GUI instance... could you elaborate on that?\n\nRemoving a property from a GUI... hmmm I'll have to look into that. If it doesn't exist it should and will put it on the roadmap :)\n. They are now identical.\n. Appreciate the proactive nature of this pull request. We had some internal reorgs and have now done this.\n. :+1: \n. I don't have this issue on Mac OS X, but I can take a look into the Win7 issue. I wonder if this is a `z-index` issue..?\n. I can confirm on a Chromebook Pixel.\n. yeah, looking at the code I think it might have something to do with the `selectedIndex` attribute being set in JavaScript.\n. You can require the built dat.gui it just pollutes the global scope so put\nit at the end of dependencies and don't set an argument for it. i.e:\n\nrequire([\n'module1',\n'dat.gui'\n], function (module1) {\nvar gui = new dat.GUI();\n});\nOn Fri, Feb 7, 2014 at 8:07 AM, Jasper notifications@github.com wrote:\n\n> I'm a bit confused as to why I can't require(['dat.gui']) on the built\n> code, especially since you're using requirejs internally for the source.\n> \n> I could submit a pull request for this if I am given direction as to what\n> file to put this in, or how to integrate it into the build structure.\n> \n> cheers\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dataarts/dat.gui/issues/34\n> .\n. Yep!\nOn Fri, Feb 7, 2014 at 8:38 AM, Jasper notifications@github.com wrote:\n\n> Yeah, I'm hoping to have an AMD compliant way of doing this instead of\n> using shims. It should be pretty straightforward to implement, no?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dataarts/dat.gui/issues/34#issuecomment-34465829\n> .\n. You'll probably want to add something in [`./utils/builder.js`](https://github.com/dataarts/dat.gui/blob/master/utils/builder.js) that appends the AMD module export at the end of file concatenation.\n. Do you have an example online? I wonder if your function is asynchronous..?\n. My hunch: https://github.com/dataarts/dat.gui/commit/586c0607b55bd801701d8c18732d19419ad1c884\n. :+1: \n. merged: https://github.com/jonobr1/gui-dat/commit/f736507fd460001e7b160324f9bc33b00515d2b2\n. Gotcha covered on that one already -- and the syntax is exactly as you describe -- only setName instead of name.\n. updating right now :)\n. it doesn't seem like this was committed..?\n. it doesn't seem like this was committed..? ATM still .setName()\n. All synced up :)\n. This is a great idea! I'll patch that in.\n. I imagine we would have another handlerType, perhaps called anonymous to serve this purpose\n. I find that gui.add( myObj ) would be insanely helpful, even to the point where the GUI could expose things that you probably didn't even know you wanted to control :)\n\nGreat idea George.\n. hmm, maybe we can override with js preventDefaults()\n. done and done: https://github.com/jonobr1/gui-dat/commit/d099440e0ee2c6b5e806a889844b040777119942\n. wait, vertically?\n. ehhh, on second thought nevermind. Doesn't seem to be too helpful as an array is just an object, like null or something else...\n\nhttps://developer.mozilla.org/en/JavaScript/Reference/Operators/Special/typeof\n. hmm, maybe there's a work around with a custom object ... :\\\n\nor just add a custom type.\n. this is the .options()\n. Hey szimek, thanks for the help! I pulled your branch locally, but the animation doesn't seem to work. Not sure how, but perhaps do you have more CSS than just:\n\n```\ndiv.collapsable {\n    overflow: hidden;\n    clear: both;\n    height: 0px;\n    -moz-transition: height .2s linear;\n    -webkit-transition: height .2s linear;\n    transition: height .2s linear;\n}\n```\n\n??? (line 86 of demo.css)\n. haha, nah no worries m8 \u2014\u00a0honored that you're interested in the project!\n. Thanks so much for the follow up. That SO thread was very informative. Pushed the changes :)\n\nhttps://github.com/jonobr1/gui-dat/commit/e21e0ac5c352cd966ea7cdb27490a76fcc9418ba\n. Thanks for the interest @dangoor! George and I are currently debating which license to throw this under, should have something very soon! Until then don't be shy to pull / clone / fork and mess around!\n. Thanks for this. Merging right now.\n. Thanks for the help! It's up.\n. Correct me if I'm wrong, but I think the latest versions have this problem solved.\n. doh and duhhhh \u2014\u00a0thanks for bearing with me :)\n. Thanks for catching this and thanks for using gui-dat! I've updated the master and gh-pages branches that you can pull to make the changes. Do you feel comfortable doing that or should I update the minified versions right away?\n\nAlso, I'd love to see what you've done with it!\n. Just updated the latest minified version. You can download it here: https://github.com/jonobr1/gui-dat/raw/versions/gui.min.js\n. SWEEEEEEEEEEEEET\n. it's all good\n. Thanks for the help!\n. Will look into this. Thanks for the post!\n. Looks good to me! Thanks for the help.\n. Good thinking. We're big fans of backbone. I'd love to know what you're up to.\n. cool cool \u2014 thanks seth-visere!\n. If you've set each GUI to a parameter or to an array then you should be able to access the DOM Element via the `domElement` getter / setter. A hook that would help you in your app is to fire something like this:\n\n```\nfunction removeGui(gui, parent) {\n  if(!parent) {\n    parent = DAT.GUI.autoPlaceContainer;\n  }\n  parent.removeChild(gui.domElement);\n}\n\nfunction addGui(gui, parent) {\n  if(!parent) {\n    parent = DAT.GUI.autoPlaceContainer;\n  }\n  parent.appendChild(gui);\n}\n```\n\nwhere the parameters `gui` represents the `DAT.GUI` you want to remove and `parent` is the parent container where if you didn't specify a `domElement` when instantiating `DAT.GUI` then you don't need to pass a parent. That should do the trick \u2014\u00a0not sure if there's a need to expose this within the library. Lemme know\n. Not sure I understand what you mean by clean up after the DAT.GUI instance... could you elaborate on that?\n\nRemoving a property from a GUI... hmmm I'll have to look into that. If it doesn't exist it should and will put it on the roadmap :)\n. They are now identical.\n. Appreciate the proactive nature of this pull request. We had some internal reorgs and have now done this.\n. :+1: \n. I don't have this issue on Mac OS X, but I can take a look into the Win7 issue. I wonder if this is a `z-index` issue..?\n. I can confirm on a Chromebook Pixel.\n. yeah, looking at the code I think it might have something to do with the `selectedIndex` attribute being set in JavaScript.\n. You can require the built dat.gui it just pollutes the global scope so put\nit at the end of dependencies and don't set an argument for it. i.e:\n\nrequire([\n'module1',\n'dat.gui'\n], function (module1) {\nvar gui = new dat.GUI();\n});\nOn Fri, Feb 7, 2014 at 8:07 AM, Jasper notifications@github.com wrote:\n\n> I'm a bit confused as to why I can't require(['dat.gui']) on the built\n> code, especially since you're using requirejs internally for the source.\n> \n> I could submit a pull request for this if I am given direction as to what\n> file to put this in, or how to integrate it into the build structure.\n> \n> cheers\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dataarts/dat.gui/issues/34\n> .\n. Yep!\nOn Fri, Feb 7, 2014 at 8:38 AM, Jasper notifications@github.com wrote:\n\n> Yeah, I'm hoping to have an AMD compliant way of doing this instead of\n> using shims. It should be pretty straightforward to implement, no?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/dataarts/dat.gui/issues/34#issuecomment-34465829\n> .\n. You'll probably want to add something in [`./utils/builder.js`](https://github.com/dataarts/dat.gui/blob/master/utils/builder.js) that appends the AMD module export at the end of file concatenation.\n. Do you have an example online? I wonder if your function is asynchronous..?\n. My hunch: https://github.com/dataarts/dat.gui/commit/586c0607b55bd801701d8c18732d19419ad1c884\n. :+1: \n. ",
    "tarelli": "This would be a great addition, but I see last update is 2yrs ago. Did development stop? Thx.\n. This would be a great addition, but I see last update is 2yrs ago. Did development stop? Thx.\n. ",
    "szimek": "Hmm, not really. I tested it on Chrome 10, where it worked fine. Just tested it Firefox 4 and it seems to work only when sliding up... I guess that the hack with setting height to auto and then reading it back is not the best idea after all :) I'll try to come up with something better.\n. np :) anyway, I think this is going to work. It's actually based on http://stackoverflow.com/questions/3149419/can-you-use-css3-to-transition-from-height0-to-the-variable-height-of-content\n\nTry wrapping content of .collapsable in another div, so you'll have \n\n```\n<div class=\"collapsable><div>content</div></div>\n```\n\nand then modify toggle function like this\n\n```\nfunction toggle(e) {\n    var collapsable = this.childNodes[3],\n        wrapper = collapsable.childNodes[0];\n    if (this.className === 'collapsed') {\n        this.className = 'expanded';\n        collapsable.style.height = wrapper.clientHeight + 'px';\n    } else {\n        this.className = 'collapsed';\n        collapsable.style.height = '0px';\n    }\n}\n```\n\nAnyway, it's really awesome that you came up with it - I'm porting my old DX demo and I was really missing GUI from DX SDK.\n. We must be using different versions of GitHub :) Just click the first 2 links for onDrag function and you'll notice 2 same definitions at lines 16 and 61.\n. Hmm, not really. I tested it on Chrome 10, where it worked fine. Just tested it Firefox 4 and it seems to work only when sliding up... I guess that the hack with setting height to auto and then reading it back is not the best idea after all :) I'll try to come up with something better.\n. np :) anyway, I think this is going to work. It's actually based on http://stackoverflow.com/questions/3149419/can-you-use-css3-to-transition-from-height0-to-the-variable-height-of-content\n\nTry wrapping content of .collapsable in another div, so you'll have \n\n```\n<div class=\"collapsable><div>content</div></div>\n```\n\nand then modify toggle function like this\n\n```\nfunction toggle(e) {\n    var collapsable = this.childNodes[3],\n        wrapper = collapsable.childNodes[0];\n    if (this.className === 'collapsed') {\n        this.className = 'expanded';\n        collapsable.style.height = wrapper.clientHeight + 'px';\n    } else {\n        this.className = 'collapsed';\n        collapsable.style.height = '0px';\n    }\n}\n```\n\nAnyway, it's really awesome that you came up with it - I'm porting my old DX demo and I was really missing GUI from DX SDK.\n. We must be using different versions of GitHub :) Just click the first 2 links for onDrag function and you'll notice 2 same definitions at lines 16 and 61.\n. ",
    "kotsoft": "I'm not exactly that comfortable with that yet, but there's not much of a rush (it's a really minor bug). I can wait until you have a bigger update for a minified version. Anyway, here's my current demo (I'm using both gee and gui-dat):\nhttp://grantkot.com/sine.html\n. I'm not exactly that comfortable with that yet, but there's not much of a rush (it's a really minor bug). I can wait until you have a bigger update for a minified version. Anyway, here's my current demo (I'm using both gee and gui-dat):\nhttp://grantkot.com/sine.html\n. ",
    "vtron": "Basically Mootools extends the native DOM array object and adds a lot of extra properties, shown here on the right \nhttp://mootools.net/docs/core/Types/Array\n(I assume prototype does this as well).\n\n For...in loops over all non-built-in properties. So the controllers array actually has a bunch of extra properties/functions in it and the function is trying to find the height of each of these, so it throws a crap load of errors and never finishes the function. \n. Yea I think that it totally makes sense that it shouldn't fire for both, only 1, but it isn't too clear which it should use. Technically I'd think that it would use onFinishChange because you are def done changing it it every time you click, but I think it could go either way. Synonymous makes the most sense to me, because you also want to avoid double fires. \n\nBTW awesome work this thing is great!\n. Yea that sounds perfect!\n. haha true sorry bout that.\n. Basically Mootools extends the native DOM array object and adds a lot of extra properties, shown here on the right \nhttp://mootools.net/docs/core/Types/Array\n(I assume prototype does this as well).\n\n For...in loops over all non-built-in properties. So the controllers array actually has a bunch of extra properties/functions in it and the function is trying to find the height of each of these, so it throws a crap load of errors and never finishes the function. \n. Yea I think that it totally makes sense that it shouldn't fire for both, only 1, but it isn't too clear which it should use. Technically I'd think that it would use onFinishChange because you are def done changing it it every time you click, but I think it could go either way. Synonymous makes the most sense to me, because you also want to avoid double fires. \n\nBTW awesome work this thing is great!\n. Yea that sounds perfect!\n. haha true sorry bout that.\n. ",
    "customlogic": "Not sure when it was fixed, but I can confirm that Boolean fields fire onFinishChange\n. The problem was caused by a bug that appeared when you use `.listen()` on the ComboBox control.  It's been fixed in the latest version.\nExample: https://jsfiddle.net/uqqa6e0h/5/\n. v0.6.0 is using Universal Module Declaration, so AMD should work now\n. Now using webpack for build, it wraps the module with UMD. See #78 \n. fixed in 6f0fcb64f5b3d3eee2c49204819d382a4e684f3a\n. Hmm.. there were two scrolling issues. \n- One is when the GUI is longer than the page, the GUI itself has a scrollbar. This is still broken, and is described in #105 \n- The scrolling issue I fixed (or thought I did), was when the HTML page is super long or wide. In this case, when scrolling the page down or right, the color picker and slider were breaking.\n\nWhat issue are you seeing?\n. This has been fixed. Thank you for the clear example and bumb. Thanks! Your fix has been incorporated in 6322ce6 and merged\n. Cheers! Fix merged at 8ae2c7cda9b882422321487ecc869f67523fcc58, updated to include @mrdoob's suggested tweak\n. Fix included in #78 which has been merged\n. Thanks! This fix has been merged into develop 91272edb07ae79a12790b105369d9395cdaa53e5 and will make it to master ASAP\n. Fix included in #78 which has been merged\n. I had a look at the code, and the problem is your logic to create the \"shows\" object and functions, not the GUI. Hopefully you found a way!\n. This was a bug, it's now fixed in v0.6.0.\nexample: https://jsfiddle.net/uqqa6e0h/5/\n. Choosing a color now fires an onFinishedChanged event\nexample: https://jsfiddle.net/5u8cn01d/1/\n. I'm not able to recreate the issue you're describing. Here's an example of .name() being called on a slider: https://jsfiddle.net/gr7ehcLm/\n. I think I found the problem you mentioned.. putting the name() call after a min() or max() seems to cause problems. I'll re-open this issue\n\nexample: [https://jsfiddle.net/ghkhuof3/](https://jsfiddle.net/ghkhuof3/)\n. Opps, this is a pull request, not an issue :grimacing: I'll make a new issue\n. This PR has been superceded by #78, which migrated to common.js as well as converted code to ES6 modules. Thanks for your work on this!\n. Sure, thanks for offering! We're on cdnjs as well: https://cdnjs.com/libraries/dat-gui\n. I wasn't able to re-create the problem exactly, but this fix should solve the issue. Thanks @webcaetano for the solution\n. Has been fixed in develop branch\n. Fix included in #78 which has been merged\n. You can already do this to a certain degree.\r\n\r\n\"addFolder\" returns the folder, so the following do work:\r\n`gui.addFolder('thing').add(thing, 'foo');`\r\nor \r\n`gui.addFolder('thing').close();`\r\n\r\n'gui.add' returns the control that was created, so you can use that to chain together things like this:\r\n`gui.add(thing, 'value').min(1).max(200).step(4);`. fixes to step behavior have been merged into develop 922de644599ad63149bd9b686a252e5e6164d83a\n. Thanks! I'm merging these changes (a few other pull requests) into a develop branch, which will eventually become the new version.\n. Thanks for bringing this to our attention.  I've fixed the redirect that you mentioned @kribblo, it will now take people to the GitHub repo.\nThe Google Code page is now far down on search results, and I've requested to have the archive removed once and for all. \n. Okay, Google Code page is now officially gone.\n. I'm not sure why we'd want to do this. Please comment with more details if you'd like to reopen.\n. Thanks! I've gone a slightly different route to fix the problem (922de644599ad63149bd9b686a252e5e6164d83a), which will accomplish the same thing as your code, but uses some other functions already in place.  \n. Using a function controller is probably the best way. Here is an example:\nhttps://jsfiddle.net/r87oxrdk/3/\n. Your example doesn't run because of some syntax problems. Here's a working update:\nhttp://jsfiddle.net/brespLya/7/\n\nI've fixed some other color picker issues in 6f0fcb64f5b3d3eee2c49204819d382a4e684f3a that might fix your other issues\n. Thanks! Your updates have been merged into develop e1250a1c00b1af3251682f84f429d2e3ff332bfb\n. Thanks! I incorporated your fix in f741e65\n. Thanks! This has been fixed in e129e08b9d4ea7023873528ca61f49f2ef897b4b by setting \"max-width: 100%;\" for the bar.\n. Thanks for your help. I've incorporated your change, with a few tweaks:\n- debounce method lives in common.js\n- debounce method calls function at start, then blocks for timeout (rather than only running after timeout ends)\n. This has been fixed in 6f0fcb64f5b3d3eee2c49204819d382a4e684f3a\n. I've added a process to build the CSS file as a separate file, so that users with CSP enable can include it.\n\nUnfortunately wrapping the injection code in a try/catch doesn't seem to suppress the error. But if you include the external CSS, everything works as it should.\n\nChanged in: dbd80251f3db9cd2526ba8626f9f836617e2550f\n. Thanks! I've slightly modified and merged your code into develop 0399ab6\n. This issues is similar to #101. It has been fixed in ca19030081d8039d5f6b25ca399caa029dd2afc7\n. Thanks for the bug and example. I've made a fix in ca19030\n. Hey there, sorry for the lack of maintenance and responses. We're doing a big catch-up to tidy up outstanding issues and merge pull requests. I'm putting everything into the develop branch, which will become the new version once it's been thoroughly vetted and tested.\n. I've added code to fire the onFinishChange callback for all controls when revert() is called on the GUI. This should fix your issue\n. v0.6.0 has been fixed\n. finally fixed! thanks for flagging the problem. I've merged your changes, thanks for the PR! I made one little fix.. the close button was having problems when the gui was showing the \"save/load presets\" UI.\r\n\r\nThanks again. fixed in        0aec885\n. This looks related to #107 . Thanks for reporting it\n. Actually, I think this is an unrelated issue that was fixed in 0.6.0. Here's your code working:\nhttps://jsfiddle.net/jr7ny1kg/1/\n. Thanks for the issue and example. It's been fixed in latest release\n. Thanks for the helpful example and specific descriptions. I've tracked down the bug and fixed it for the latest release\n. This has been fixed in latest version. Thanks for the bug report!\n. Hey Wills, thanks for the great write up and JSBin. I'll get a fix into the next update\n. Thanks again Wills. I've fixed the bugs and added better string formatting for the various color labels\n. Here's an example with all the Color formats that dat.gui accepts:\nhttps://jsfiddle.net/8cffyzL1/\n. Sorry for the confusion. The version on npm isn't an official release by our team, its a fork of v0.5.1 created by @korczis that he renamed to v0.6.1. We've since incorporated most of the changes he made into the official repo, as well as some new fixes as v0.6.0, and then a few recent fixes made v0.6.1.\n\nThis repo should be the most up to date (and hopefully, functional version). The next version number increment will hopefully clear up the confusion.\n. Can you share a jsFiddle and/or screenshot? I'm not sure I follow. I'm having a look at this in Chrome 57.0.2987 and Safari 10.0.3 (12602.4.8), but haven't been able to re-produce it. Are you still experiencing it?. I've changed it back to './build/dat.gui.js'. Thanks for filing the issue. Hopefully you've been able to make some progress on creating a canvas. If not, here is some general \"getting started with HTML5 Canvas\" info to check out: https://www.sitepoint.com/html5-canvas-tutorial-introduction/. No, sorry.. fixed in 0.6.3. I've made a change that I think addresses this. Can you try out the develop version?. https://rawgit.com/dataarts/dat.gui/develop/build/dat.gui.js. Thanks for reporting. What browser & OS is this?. Thanks for reporting this. The issue has been fixed. Not sure when it was fixed, but I can confirm that Boolean fields fire onFinishChange\n. The problem was caused by a bug that appeared when you use `.listen()` on the ComboBox control.  It's been fixed in the latest version.\nExample: https://jsfiddle.net/uqqa6e0h/5/\n. v0.6.0 is using Universal Module Declaration, so AMD should work now\n. Now using webpack for build, it wraps the module with UMD. See #78 \n. fixed in 6f0fcb64f5b3d3eee2c49204819d382a4e684f3a\n. Hmm.. there were two scrolling issues. \n- One is when the GUI is longer than the page, the GUI itself has a scrollbar. This is still broken, and is described in #105 \n- The scrolling issue I fixed (or thought I did), was when the HTML page is super long or wide. In this case, when scrolling the page down or right, the color picker and slider were breaking.\n\nWhat issue are you seeing?\n. This has been fixed. Thank you for the clear example and bumb. Thanks! Your fix has been incorporated in 6322ce6 and merged\n. Cheers! Fix merged at 8ae2c7cda9b882422321487ecc869f67523fcc58, updated to include @mrdoob's suggested tweak\n. Fix included in #78 which has been merged\n. Thanks! This fix has been merged into develop 91272edb07ae79a12790b105369d9395cdaa53e5 and will make it to master ASAP\n. Fix included in #78 which has been merged\n. I had a look at the code, and the problem is your logic to create the \"shows\" object and functions, not the GUI. Hopefully you found a way!\n. This was a bug, it's now fixed in v0.6.0.\nexample: https://jsfiddle.net/uqqa6e0h/5/\n. Choosing a color now fires an onFinishedChanged event\nexample: https://jsfiddle.net/5u8cn01d/1/\n. I'm not able to recreate the issue you're describing. Here's an example of .name() being called on a slider: https://jsfiddle.net/gr7ehcLm/\n. I think I found the problem you mentioned.. putting the name() call after a min() or max() seems to cause problems. I'll re-open this issue\n\nexample: [https://jsfiddle.net/ghkhuof3/](https://jsfiddle.net/ghkhuof3/)\n. Opps, this is a pull request, not an issue :grimacing: I'll make a new issue\n. This PR has been superceded by #78, which migrated to common.js as well as converted code to ES6 modules. Thanks for your work on this!\n. Sure, thanks for offering! We're on cdnjs as well: https://cdnjs.com/libraries/dat-gui\n. I wasn't able to re-create the problem exactly, but this fix should solve the issue. Thanks @webcaetano for the solution\n. Has been fixed in develop branch\n. Fix included in #78 which has been merged\n. You can already do this to a certain degree.\r\n\r\n\"addFolder\" returns the folder, so the following do work:\r\n`gui.addFolder('thing').add(thing, 'foo');`\r\nor \r\n`gui.addFolder('thing').close();`\r\n\r\n'gui.add' returns the control that was created, so you can use that to chain together things like this:\r\n`gui.add(thing, 'value').min(1).max(200).step(4);`. fixes to step behavior have been merged into develop 922de644599ad63149bd9b686a252e5e6164d83a\n. Thanks! I'm merging these changes (a few other pull requests) into a develop branch, which will eventually become the new version.\n. Thanks for bringing this to our attention.  I've fixed the redirect that you mentioned @kribblo, it will now take people to the GitHub repo.\nThe Google Code page is now far down on search results, and I've requested to have the archive removed once and for all. \n. Okay, Google Code page is now officially gone.\n. I'm not sure why we'd want to do this. Please comment with more details if you'd like to reopen.\n. Thanks! I've gone a slightly different route to fix the problem (922de644599ad63149bd9b686a252e5e6164d83a), which will accomplish the same thing as your code, but uses some other functions already in place.  \n. Using a function controller is probably the best way. Here is an example:\nhttps://jsfiddle.net/r87oxrdk/3/\n. Your example doesn't run because of some syntax problems. Here's a working update:\nhttp://jsfiddle.net/brespLya/7/\n\nI've fixed some other color picker issues in 6f0fcb64f5b3d3eee2c49204819d382a4e684f3a that might fix your other issues\n. Thanks! Your updates have been merged into develop e1250a1c00b1af3251682f84f429d2e3ff332bfb\n. Thanks! I incorporated your fix in f741e65\n. Thanks! This has been fixed in e129e08b9d4ea7023873528ca61f49f2ef897b4b by setting \"max-width: 100%;\" for the bar.\n. Thanks for your help. I've incorporated your change, with a few tweaks:\n- debounce method lives in common.js\n- debounce method calls function at start, then blocks for timeout (rather than only running after timeout ends)\n. This has been fixed in 6f0fcb64f5b3d3eee2c49204819d382a4e684f3a\n. I've added a process to build the CSS file as a separate file, so that users with CSP enable can include it.\n\nUnfortunately wrapping the injection code in a try/catch doesn't seem to suppress the error. But if you include the external CSS, everything works as it should.\n\nChanged in: dbd80251f3db9cd2526ba8626f9f836617e2550f\n. Thanks! I've slightly modified and merged your code into develop 0399ab6\n. This issues is similar to #101. It has been fixed in ca19030081d8039d5f6b25ca399caa029dd2afc7\n. Thanks for the bug and example. I've made a fix in ca19030\n. Hey there, sorry for the lack of maintenance and responses. We're doing a big catch-up to tidy up outstanding issues and merge pull requests. I'm putting everything into the develop branch, which will become the new version once it's been thoroughly vetted and tested.\n. I've added code to fire the onFinishChange callback for all controls when revert() is called on the GUI. This should fix your issue\n. v0.6.0 has been fixed\n. finally fixed! thanks for flagging the problem. I've merged your changes, thanks for the PR! I made one little fix.. the close button was having problems when the gui was showing the \"save/load presets\" UI.\r\n\r\nThanks again. fixed in        0aec885\n. This looks related to #107 . Thanks for reporting it\n. Actually, I think this is an unrelated issue that was fixed in 0.6.0. Here's your code working:\nhttps://jsfiddle.net/jr7ny1kg/1/\n. Thanks for the issue and example. It's been fixed in latest release\n. Thanks for the helpful example and specific descriptions. I've tracked down the bug and fixed it for the latest release\n. This has been fixed in latest version. Thanks for the bug report!\n. Hey Wills, thanks for the great write up and JSBin. I'll get a fix into the next update\n. Thanks again Wills. I've fixed the bugs and added better string formatting for the various color labels\n. Here's an example with all the Color formats that dat.gui accepts:\nhttps://jsfiddle.net/8cffyzL1/\n. Sorry for the confusion. The version on npm isn't an official release by our team, its a fork of v0.5.1 created by @korczis that he renamed to v0.6.1. We've since incorporated most of the changes he made into the official repo, as well as some new fixes as v0.6.0, and then a few recent fixes made v0.6.1.\n\nThis repo should be the most up to date (and hopefully, functional version). The next version number increment will hopefully clear up the confusion.\n. Can you share a jsFiddle and/or screenshot? I'm not sure I follow. I'm having a look at this in Chrome 57.0.2987 and Safari 10.0.3 (12602.4.8), but haven't been able to re-produce it. Are you still experiencing it?. I've changed it back to './build/dat.gui.js'. Thanks for filing the issue. Hopefully you've been able to make some progress on creating a canvas. If not, here is some general \"getting started with HTML5 Canvas\" info to check out: https://www.sitepoint.com/html5-canvas-tutorial-introduction/. No, sorry.. fixed in 0.6.3. I've made a change that I think addresses this. Can you try out the develop version?. https://rawgit.com/dataarts/dat.gui/develop/build/dat.gui.js. Thanks for reporting. What browser & OS is this?. Thanks for reporting this. The issue has been fixed. ",
    "hikirsch": "so i just realized that the .add().options() is the samething, i'm closing this\n. so i just realized that the .add().options() is the samething, i'm closing this\n. ",
    "unknowndomain": "Should I leave it with you guys then - I don't have much experience with what the format might be, I just want to use it on a website and its not got it, so I wanted to investigate adding it.\n. I don't think I could actually do this, I just had a look at the code and its beyond me. :(\n. Amazing, I hate asking this because makes me sound ungrateful however what time frame are we looking at so I can plan ahead?\n. Any idea of time frame?\n. Should I leave it with you guys then - I don't have much experience with what the format might be, I just want to use it on a website and its not got it, so I wanted to investigate adding it.\n. I don't think I could actually do this, I just had a look at the code and its beyond me. :(\n. Amazing, I hate asking this because makes me sound ungrateful however what time frame are we looking at so I can plan ahead?\n. Any idea of time frame?\n. ",
    "MichaelPaulukonis": "Looks like this can be closed.\n. Looks like this can be closed.\n. ",
    "onedayitwillmake": "Cool I will give it a try, will this clean up after the DAT.GUI instance?\nHow about individual controls, there does not seem to be a remove function for those either\n. I mean in terms of like listeners, events, and bindings so that it's not floating in the ether even though it's been removed from the DOM. I since tried your suggestion though, and it's been working well with no problems.\n. Cool I will give it a try, will this clean up after the DAT.GUI instance?\nHow about individual controls, there does not seem to be a remove function for those either\n. I mean in terms of like listeners, events, and bindings so that it's not floating in the ether even though it's been removed from the DOM. I since tried your suggestion though, and it's been working well with no problems.\n. ",
    "makc": "DAT and dat.GUI.autoPlaceContainer are undefined in 0.5.1 :(\n. ah but there is gui.destroy (); now\n. > step will be respected for value changes, but precision in the NumberControllerBox is wrong\n\nsimple workaround in #77 \n. @backspaces thanks for workaround (setting to non-integer). I wish they had `.precision(.01)` method.\n. shit, this overrides individual onChanges :( how come there could only be one ??\n. [here](https://jsfiddle.net/x41s2qhm/12/) is my workaround\n. DAT and dat.GUI.autoPlaceContainer are undefined in 0.5.1 :(\n. ah but there is gui.destroy (); now\n. > step will be respected for value changes, but precision in the NumberControllerBox is wrong\n\nsimple workaround in #77 \n. @backspaces thanks for workaround (setting to non-integer). I wish they had `.precision(.01)` method.\n. shit, this overrides individual onChanges :( how come there could only be one ??\n. [here](https://jsfiddle.net/x41s2qhm/12/) is my workaround\n. ",
    "meetar": "No problem :) Glad the project is still alive!\n. No problem :) Glad the project is still alive!\n. ",
    "air": "Many thanks doug.\n. Many thanks doug.\n. ",
    "doug": "Confirmed on Ubuntu Linux Chrome, and at cursory look didn't appear to be a\nz-index issue.\n\nOn Tue Jan 07 2014 at 2:01:21 PM, Jono Brandel notifications@github.com\nwrote:\n\n> I can confirm on a Chromebook Pixel.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/dataarts/dat.gui/issues/32#issuecomment-31784607\n> .\n. updated the build to 0.5.1 with latest from master. https://github.com/dataarts/dat.gui/releases\n. :+1: Thanks!!\n. Thanks! \ud83d\udc4d \n. Thanks for this :+1: . For people concerned about a change like this we will still just keep building this as a single javascript file regardless of requirejs vs commonjs for the components. So for most people this shouldn't change anything. I too am in favor of the commonjs format over requirejs. More people seem to use it currently. @jonobr1 or @georgealways either of you care to weigh in? My only hesitation is this doesn't change things a great deal and we would probably want to change again once es6 modules are broadly adopted. http://www.2ality.com/2014/09/es6-modules-final.html\n. Confirmed on Ubuntu Linux Chrome, and at cursory look didn't appear to be a\nz-index issue.\n\nOn Tue Jan 07 2014 at 2:01:21 PM, Jono Brandel notifications@github.com\nwrote:\n\n> I can confirm on a Chromebook Pixel.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/dataarts/dat.gui/issues/32#issuecomment-31784607\n> .\n. updated the build to 0.5.1 with latest from master. https://github.com/dataarts/dat.gui/releases\n. :+1: Thanks!!\n. Thanks! \ud83d\udc4d \n. Thanks for this :+1: . For people concerned about a change like this we will still just keep building this as a single javascript file regardless of requirejs vs commonjs for the components. So for most people this shouldn't change anything. I too am in favor of the commonjs format over requirejs. More people seem to use it currently. @jonobr1 or @georgealways either of you care to weigh in? My only hesitation is this doesn't change things a great deal and we would probably want to change again once es6 modules are broadly adopted. http://www.2ality.com/2014/09/es6-modules-final.html\n. ",
    "wellcaffeinated": "Yeah, I'm hoping to have an AMD compliant way of doing this instead of using shims. It should be pretty straightforward to implement, no?\n. Yeah, I'm hoping to have an AMD compliant way of doing this instead of using shims. It should be pretty straightforward to implement, no?\n. ",
    "ghost": "Okay, I'm really confused here, because I noticed the same problem a while ago, but just now while using your example, it worked perfectly fine.\n. # \ud83d\udc4d I agree\ud83d\udc6b \n. Yeah. +1\n. # The tutorial is `1000 times better` than the real docs! I am too stupid to read docs. I can read examples, anyway.\n. # I know why. That's my fault not adding the `.listen()` method.\n. Okay, I'm really confused here, because I noticed the same problem a while ago, but just now while using your example, it worked perfectly fine.\n. # \ud83d\udc4d I agree\ud83d\udc6b \n. Yeah. +1\n. # The tutorial is `1000 times better` than the real docs! I am too stupid to read docs. I can read examples, anyway.\n. # I know why. That's my fault not adding the `.listen()` method.\n. ",
    "matthewlein": "Definitely does not work as intended in Webkit. Firefox did look like it worked correctly, but it was really slow for me.\n. Definitely does not work as intended in Webkit. Firefox did look like it worked correctly, but it was really slow for me.\n. ",
    "idflood": "The issue still exists and is even reproducible on http://workshop.chromeexperiments.com/examples/gui/#4--Color-Controllers .\n\nIn the color controller there 2 functions, `setSV` and `setH` and both of them have something like:\n\n```\nvar v = 1 - (e.clientY - o.top + document.body.scrollTop) / w;\n```\n\nIf you remove the `+ document.body.scrollTop` and `scrollLeft` the bug is fixed on chrome and firefox.\n\nBut I'm not sure it will work on all browsers and it will also possibly make the color doesn't work if the gui has a custom position.\n\nI can happily make a pull request if this seems to be the right solution.\n. The issue still exists and is even reproducible on http://workshop.chromeexperiments.com/examples/gui/#4--Color-Controllers .\n\nIn the color controller there 2 functions, `setSV` and `setH` and both of them have something like:\n\n```\nvar v = 1 - (e.clientY - o.top + document.body.scrollTop) / w;\n```\n\nIf you remove the `+ document.body.scrollTop` and `scrollLeft` the bug is fixed on chrome and firefox.\n\nBut I'm not sure it will work on all browsers and it will also possibly make the color doesn't work if the gui has a custom position.\n\nI can happily make a pull request if this seems to be the right solution.\n. ",
    "whatisor": "Hi, your modification is not related to Selector position.\nI wonder why it works on your side??\n. It is still very bad on chrome with color picker when user scroll\n. Hi,\nThis one I think:\nThe scrolling issue I fixed (or thought I did), was when the HTML page is super long or wide. In this case, when scrolling the page down or right, the color picker and slider were breaking\n Only on Chrome. Firefox  works well with a ugly scrollbar :D\n. Hi, your modification is not related to Selector position.\nI wonder why it works on your side??\n. It is still very bad on chrome with color picker when user scroll\n. Hi,\nThis one I think:\nThe scrolling issue I fixed (or thought I did), was when the HTML page is super long or wide. In this case, when scrolling the page down or right, the color picker and slider were breaking\n Only on Chrome. Firefox  works well with a ugly scrollbar :D\n. ",
    "wyklion": "I have the same problem with @cybafelo ...\nWho can solve this? i even can't figure out how the color selector visible or invisible.\nthe selector need calculate the gui's scroll offset.\n. I have the same problem with @cybafelo ...\nWho can solve this? i even can't figure out how the color selector visible or invisible.\nthe selector need calculate the gui's scroll offset.\n. ",
    "nexflo": "Touch support would indeed be great.\n. Touch support would indeed be great.\n. ",
    "neurofuzzy": "+1!\n. +1!\n. ",
    "stellatigre": "This issue still occurs in the latest build - this functionality can be invoked by firing the fake click event on the save button: \n\n``` javascript\nfunction saveDatGUI() {\n    dat.dom.dom.fakeEvent($('.cr .button')[0], 'click');\n}\n```\n\nbut that feels hacky.  This functionality would be useful in writing tests which involve a datgui component.  \nIf it's deemed not an issue, perhaps close this ?\n. This issue still occurs in the latest build - this functionality can be invoked by firing the fake click event on the save button: \n\n``` javascript\nfunction saveDatGUI() {\n    dat.dom.dom.fakeEvent($('.cr .button')[0], 'click');\n}\n```\n\nbut that feels hacky.  This functionality would be useful in writing tests which involve a datgui component.  \nIf it's deemed not an issue, perhaps close this ?\n. ",
    "spinachmedia": "hmm... me too...\r\nI was very troubled.. hmm... me too...\r\nI was very troubled.. ",
    "GerHobbelt": "Heck, you're fast. Was gonna push exactly that one as a patch. :-)\n. Fixed in referenced commit.\n. Heck, you're fast. Was gonna push exactly that one as a patch. :-)\n. Fixed in referenced commit.\n. ",
    "volkhin": "+1 noticed this bug too\n. +1 noticed this bug too\n. ",
    "korczis": "See #78 \n. See #78 \n. See #78 \n. Supersed https://github.com/dataarts/dat.gui/pull/71\n. Is anybody maintaining this repo?\n. Sorry for troubles.\n. See #78 \n. See #78 \n. See #78 \n. Supersed https://github.com/dataarts/dat.gui/pull/71\n. Is anybody maintaining this repo?\n. Sorry for troubles.\n. ",
    "macpooh": "+1, I've just wanted fork to fix it. please merge it in next release. this issue causing a lots of googling)\n. +1, I've just wanted fork to fix it. please merge it in next release. this issue causing a lots of googling)\n. ",
    "worthwhileindustries": "This isn't maintained anymore. It's a dead project.\n. @sabahkosoy I think a lot of people use it public facing as do I.\n. This isn't maintained anymore. It's a dead project.\n. @sabahkosoy I think a lot of people use it public facing as do I.\n. ",
    "wassname": "Please merge this @doug, if you don't have time then I guess we need more maintainers on this project. It's a great project so I hate to see it in a coma\n. Fixed by pull request #47 (if you use step). Not sure when if it will be merged\n. Fixed by pull request #47 (if you use step). Not sure when if it will be merged\n. Please merge this @doug, if you don't have time then I guess we need more maintainers on this project. It's a great project so I hate to see it in a coma\n. Fixed by pull request #47 (if you use step). Not sure when if it will be merged\n. Fixed by pull request #47 (if you use step). Not sure when if it will be merged\n. ",
    "miketahani": "Having this problem also. Value is a float but the number in the GUI is always displayed as an int.\n. Having this problem also. Value is a float but the number in the GUI is always displayed as an int.\n. ",
    "jpweeks": "This was fixed by #31, but this change is not reflected in the `0.5.0` built distributable.\nSee [source](https://github.com/dataarts/dat.gui/blob/v0.5.0/src/dat/controllers/NumberController.js#L123) vs [build](https://github.com/dataarts/dat.gui/blob/v0.5.0/build/dat.gui.js#L780).\n. This was fixed by #31, but this change is not reflected in the `0.5.0` built distributable.\nSee [source](https://github.com/dataarts/dat.gui/blob/v0.5.0/src/dat/controllers/NumberController.js#L123) vs [build](https://github.com/dataarts/dat.gui/blob/v0.5.0/build/dat.gui.js#L780).\n. ",
    "backspaces": "This did not completely fix it for me. If I have a float slider that starts out with an integer value, I still get this problem.  Works fine if the initial value is non-integer.\n\nDoes the fix here work for everyone else? I.e. float slider that starts out with integer initial value?\n\nI did find a work-around:\n- Make sure the initial value is non-integer.\n- Add .listen() to the property.\n- Then set the property to the integer value.\n\nI.e. I start with:\nvar UI = {\n  ...\n  x: .1, // workaround for float slider bug\n  y: .1,\n  z: .1,\n ...\n}\ngui.add(UI, 'x').min(-10).max(10).step(.1).listen().onChange(callback)\ngui.add(UI, 'y').min(-10).max(10).step(.1).listen().onChange(callback)\ngui.add(UI, 'z').min(-10).max(10).step(.1).listen().onChange(callback)\nUI.x = UI.y = UI.z = 0\n. Fil: Had no idea npm could resolve to github, thanks!!. Sorry for being late. I tried it and it didn't work. Looking at the code, it may presume I'm using a webpack workflow?\r\n\r\nThe test was to use a <script type=\"module\"> tag, first importing a local module \"Model\", along with the dat.gui.js url you created.  I tried both the default module import, and the * form. \r\n\r\nThe Model imported correctly, but I couldn't get dat to import. I used Safari Tech Preview which works for all my module based work. See below. If I comment out both dat imports, it works as expected, placing Model in window for me to look at.\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>dat</title>\r\n  <script type=\"module\">\r\n  import Model from \"../../asx/src/Model.js\"\r\n  import dat from  \"https://rawgit.com/dataarts/dat.gui/develop/build/dat.gui.js\"\r\n  // import * as dat from  \"https://rawgit.com/dataarts/dat.gui/develop/build/dat.gui.js\"\r\n  Object.assign(window, {Model, dat})\r\n  </script>\r\n</head>\r\n<body> </body>\r\n</html>\r\n```. In my experience, the best migration to modules, and still support legacy, is:\r\n- Convert the project to es6 modules\r\n- Use Rollup to create a bundle of several formats: iife, cjs, amd, umd, and so on.\r\n\r\nThis results in a simple modules based core, and conversion to any existing module type.. Thank you for reopening this. I'm making dat.gui the core of my simulation repo's sample models. It is also used with Three.js (which I also depend on) for their examples/ and is even included in their npm package. \r\n\r\nThree has converted their code to modules as I mentioned above. Ditto for the Stats.js library they use. Sure would be cool if dat.gui also did so, then their entire eco-system would be converted!\r\n\r\nI think you will find modules a huge \"life changing\" win in web/javascript programming in general.\r\n\r\nA much-overlooked advantage: Your dependencies are in *your* code, not in <script> tags, which you may not even \"own\" .. someone else is managing the html.. Just FYI: Chromium now supports modules under a flag. Its getting closer!\r\n\r\nI'm writing a couple of articles on migrating a project to modules:\r\nhttps://medium.com/@backspaces/es6-modules-part-1-migration-strategy-a48de0b7f112\r\n\r\nIt's all real, converting a repo that started out with a Legacy approach (IIFEs), converted to several module workflows (JSPM, System.js & Babel, ..) and then tossed them all for a dual build (Modules & bundles)\r\n\r\nOne surprise was, once the base was module based, it was easy to convert not only to IIFEs for the browser, but commonJS modules for node! So now any modules that can run in node, not having browser dependencies, are easily converted to cjs. Yay!\r\n\r\nJump in, you'll love it!. Whoa, just read the code and see you are already es6. Wonderful! \r\n\r\nOnly question left: is it possible to include the .css in the code. I'd guess \"yes\", because the IIFE works w/o needing the .css as a separately browser resource.\r\n\r\nThis is superb. Sorry if I was preaching to the choir.. TL;DR: I've got two versions of dat.gui as modules, one making 4 modifications to the source such that rollup can build a module, the other using a \"wrapper\". May be of use to you or your users.\r\n\r\nDetails: Sorry for being chatty! I definitely do not want to dominate the discussion! But I've now got dat.gui running as a module for my repo using one of two methods: \r\n\r\n1 - convert to module: several dependencies are already in module form but don't expose it. dat.gui, for example was easily converted to a module via a bash script of 4 modifications of the dat.gui source, with rollup.\r\n2 - wrapper: for dat.gui and other repos, I have a \"wraplib\" node script that takes in the legacy form (foo.min.js for example) and wraps it in a module having a function that executes it wrapped with its own window, module, 'this', and return value .. and finds the resulting foo code, exporting it as `export default foo`\r\n\r\nI've tested both of these with several dependencies I have. I prefer method 1, generally, because when the project converts to modules, my project can easily use it. Method 2 has the advantage that it \"just works\" for all the libraries I've tried. dat.gui works fine using either with my small set of tests. I'll soon push this into all my demos, so should show any problems.\r\n\r\nDetails of the two stunts. Feel free to ask about details.\r\n.............................................................\r\nThe dat.gui module bash script looks like\r\n```\r\n#!/usr/bin/env sh\r\ncd dat.gui/src/dat\r\n# convert raw html/css to export default of template string.\r\nsed '\r\n  1s/^/export default `/\r\n  $s/$/`/\r\n' < gui/saveDialogue.html > gui/saveDialogue.js\r\nsed '\r\n  1s/^/export default `/\r\n  $s/$/`/\r\n' < ../../build/dat.gui.css > gui/style.css.js\r\n\r\n# Convert module.exports to js export default\r\ncp utils/css.js utils/css0.js\r\nsed '\r\n  s/module.exports =/export default/\r\n' < utils/css0.js > utils/css.js\r\n\r\n# update GUI.js to new names\r\ncp gui/GUI.js gui/GUI0.js\r\nsed '\r\n  /import saveDialogueContents/s/.html//\r\n  /import styleSheet/s/scss/css.js/\r\n' < gui/GUI0.js > gui/GUI.js\r\n\r\nrollup -f es index.js > ../../../libs/dat.gui.module.js\r\n```\r\n.............................................................\r\nThe dat.gui wrapper created by the node wraplib.js looks like:\r\n```\r\n// Programmatically created by wraplib.js\r\nconst exports = {}\r\nconst module = {}\r\nconst window = {}\r\nconst self = {}\r\nlet returnVal\r\n\r\nfunction wrap () {\r\n\r\nreturnVal =\r\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof\r\n.. and a lot more ..\r\n\r\n}\r\nwrap.call(self)\r\nconst result = self.dat || window.dat || module.exports || returnVal\r\nif (!result) throw Error(\"wrapper failed, file: libs/dat.gui.min.js name: dat\")\r\nexport default result\r\n```\r\n\r\n\r\n. This did not completely fix it for me. If I have a float slider that starts out with an integer value, I still get this problem.  Works fine if the initial value is non-integer.\n\nDoes the fix here work for everyone else? I.e. float slider that starts out with integer initial value?\n\nI did find a work-around:\n- Make sure the initial value is non-integer.\n- Add .listen() to the property.\n- Then set the property to the integer value.\n\nI.e. I start with:\nvar UI = {\n  ...\n  x: .1, // workaround for float slider bug\n  y: .1,\n  z: .1,\n ...\n}\ngui.add(UI, 'x').min(-10).max(10).step(.1).listen().onChange(callback)\ngui.add(UI, 'y').min(-10).max(10).step(.1).listen().onChange(callback)\ngui.add(UI, 'z').min(-10).max(10).step(.1).listen().onChange(callback)\nUI.x = UI.y = UI.z = 0\n. Fil: Had no idea npm could resolve to github, thanks!!. Sorry for being late. I tried it and it didn't work. Looking at the code, it may presume I'm using a webpack workflow?\r\n\r\nThe test was to use a <script type=\"module\"> tag, first importing a local module \"Model\", along with the dat.gui.js url you created.  I tried both the default module import, and the * form. \r\n\r\nThe Model imported correctly, but I couldn't get dat to import. I used Safari Tech Preview which works for all my module based work. See below. If I comment out both dat imports, it works as expected, placing Model in window for me to look at.\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>dat</title>\r\n  <script type=\"module\">\r\n  import Model from \"../../asx/src/Model.js\"\r\n  import dat from  \"https://rawgit.com/dataarts/dat.gui/develop/build/dat.gui.js\"\r\n  // import * as dat from  \"https://rawgit.com/dataarts/dat.gui/develop/build/dat.gui.js\"\r\n  Object.assign(window, {Model, dat})\r\n  </script>\r\n</head>\r\n<body> </body>\r\n</html>\r\n```. In my experience, the best migration to modules, and still support legacy, is:\r\n- Convert the project to es6 modules\r\n- Use Rollup to create a bundle of several formats: iife, cjs, amd, umd, and so on.\r\n\r\nThis results in a simple modules based core, and conversion to any existing module type.. Thank you for reopening this. I'm making dat.gui the core of my simulation repo's sample models. It is also used with Three.js (which I also depend on) for their examples/ and is even included in their npm package. \r\n\r\nThree has converted their code to modules as I mentioned above. Ditto for the Stats.js library they use. Sure would be cool if dat.gui also did so, then their entire eco-system would be converted!\r\n\r\nI think you will find modules a huge \"life changing\" win in web/javascript programming in general.\r\n\r\nA much-overlooked advantage: Your dependencies are in *your* code, not in <script> tags, which you may not even \"own\" .. someone else is managing the html.. Just FYI: Chromium now supports modules under a flag. Its getting closer!\r\n\r\nI'm writing a couple of articles on migrating a project to modules:\r\nhttps://medium.com/@backspaces/es6-modules-part-1-migration-strategy-a48de0b7f112\r\n\r\nIt's all real, converting a repo that started out with a Legacy approach (IIFEs), converted to several module workflows (JSPM, System.js & Babel, ..) and then tossed them all for a dual build (Modules & bundles)\r\n\r\nOne surprise was, once the base was module based, it was easy to convert not only to IIFEs for the browser, but commonJS modules for node! So now any modules that can run in node, not having browser dependencies, are easily converted to cjs. Yay!\r\n\r\nJump in, you'll love it!. Whoa, just read the code and see you are already es6. Wonderful! \r\n\r\nOnly question left: is it possible to include the .css in the code. I'd guess \"yes\", because the IIFE works w/o needing the .css as a separately browser resource.\r\n\r\nThis is superb. Sorry if I was preaching to the choir.. TL;DR: I've got two versions of dat.gui as modules, one making 4 modifications to the source such that rollup can build a module, the other using a \"wrapper\". May be of use to you or your users.\r\n\r\nDetails: Sorry for being chatty! I definitely do not want to dominate the discussion! But I've now got dat.gui running as a module for my repo using one of two methods: \r\n\r\n1 - convert to module: several dependencies are already in module form but don't expose it. dat.gui, for example was easily converted to a module via a bash script of 4 modifications of the dat.gui source, with rollup.\r\n2 - wrapper: for dat.gui and other repos, I have a \"wraplib\" node script that takes in the legacy form (foo.min.js for example) and wraps it in a module having a function that executes it wrapped with its own window, module, 'this', and return value .. and finds the resulting foo code, exporting it as `export default foo`\r\n\r\nI've tested both of these with several dependencies I have. I prefer method 1, generally, because when the project converts to modules, my project can easily use it. Method 2 has the advantage that it \"just works\" for all the libraries I've tried. dat.gui works fine using either with my small set of tests. I'll soon push this into all my demos, so should show any problems.\r\n\r\nDetails of the two stunts. Feel free to ask about details.\r\n.............................................................\r\nThe dat.gui module bash script looks like\r\n```\r\n#!/usr/bin/env sh\r\ncd dat.gui/src/dat\r\n# convert raw html/css to export default of template string.\r\nsed '\r\n  1s/^/export default `/\r\n  $s/$/`/\r\n' < gui/saveDialogue.html > gui/saveDialogue.js\r\nsed '\r\n  1s/^/export default `/\r\n  $s/$/`/\r\n' < ../../build/dat.gui.css > gui/style.css.js\r\n\r\n# Convert module.exports to js export default\r\ncp utils/css.js utils/css0.js\r\nsed '\r\n  s/module.exports =/export default/\r\n' < utils/css0.js > utils/css.js\r\n\r\n# update GUI.js to new names\r\ncp gui/GUI.js gui/GUI0.js\r\nsed '\r\n  /import saveDialogueContents/s/.html//\r\n  /import styleSheet/s/scss/css.js/\r\n' < gui/GUI0.js > gui/GUI.js\r\n\r\nrollup -f es index.js > ../../../libs/dat.gui.module.js\r\n```\r\n.............................................................\r\nThe dat.gui wrapper created by the node wraplib.js looks like:\r\n```\r\n// Programmatically created by wraplib.js\r\nconst exports = {}\r\nconst module = {}\r\nconst window = {}\r\nconst self = {}\r\nlet returnVal\r\n\r\nfunction wrap () {\r\n\r\nreturnVal =\r\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof\r\n.. and a lot more ..\r\n\r\n}\r\nwrap.call(self)\r\nconst result = self.dat || window.dat || module.exports || returnVal\r\nif (!result) throw Error(\"wrapper failed, file: libs/dat.gui.min.js name: dat\")\r\nexport default result\r\n```\r\n\r\n\r\n. ",
    "ulyssesp": "Fixed in #56 \n. @alvarobyrne No, it's not. I did that and then realized it wasn't the correct method, so closed this PR. #56 has the right code.\n. @doug No worries. If you get a chance, I've got a PR waiting for an ArrayController, #55 . Let me know if there's more work to be done on it.\n. Fixed in #56 \n. @alvarobyrne No, it's not. I did that and then realized it wasn't the correct method, so closed this PR. #56 has the right code.\n. @doug No worries. If you get a chance, I've got a PR waiting for an ArrayController, #55 . Let me know if there's more work to be done on it.\n. ",
    "awelles": "Merge this plz. \n. Merge this plz. \n. ",
    "loredanacirstea": "+1 for merge\n. +1 for merge\n. ",
    "alvarobyrne": "Ok. Fine. Thanks. So `arrayX = arraryX.slice(arrayX.indexOf(element),1)` is the same as `arrayX.splice(arrayX.indexOf(element),1)`? Isn't it?\n. Ok. Fine. Thanks. So `arrayX = arraryX.slice(arrayX.indexOf(element),1)` is the same as `arrayX.splice(arrayX.indexOf(element),1)`? Isn't it?\n. ",
    "kevinbarabash": "@korczis cool, hope it gets merged.\n. @korczis cool, hope it gets merged.\n. ",
    "7yl4r": "This was a late-night silly mistake on my part. MAX was undefined in my test code.\n. This was a late-night silly mistake on my part. MAX was undefined in my test code.\n. ",
    "ozair-kafray": "I further observed the following:\n1. If I disable myController.__input, it disables the color controller and it cannot function.\n2. I tried to set the color of input to the same as selected color, so it is not visible to the user in onFinishChange, but onFinishChange is never called for ColorController as reported in #65.\n3. Also, tried to set color for input in onChange as follows:\n\n``` javascript\ncolorController.onChange(function(value) {\n    colorController.__input.style.color = value;\n});\n```\n\nHowever, it doesn't affect the label either.\n\nRight now, i am short of ideas for this. \n. I further observed the following:\n1. If I disable myController.__input, it disables the color controller and it cannot function.\n2. I tried to set the color of input to the same as selected color, so it is not visible to the user in onFinishChange, but onFinishChange is never called for ColorController as reported in #65.\n3. Also, tried to set color for input in onChange as follows:\n\n``` javascript\ncolorController.onChange(function(value) {\n    colorController.__input.style.color = value;\n});\n```\n\nHowever, it doesn't affect the label either.\n\nRight now, i am short of ideas for this. \n. ",
    "davegirdy": "I wanted to hide the labels as well. After looking through dat.gui.js from the build folder... I got working :)\n\n1) Replace this line-\ntextShadow: this.__input_textShadow + 'rgba(0,0,0,0.7)'\nwith this:\ntextShadow: this.__input_textShadow + 'rgba(0,0,0,0.0)'\n\n2) Replace these two lines:\ncolor: 'rgb(' + flip + ',' + flip + ',' + flip +')',\ntextShadow: this.__input_textShadow + 'rgba(' + _flip + ',' + _flip + ',' + _flip +',.7)'\nwith this:\ncolor: this.__color.toString(),\ntextShadow: this.__input_textShadow + 'rgba(0,0,0,0.0)'\n\nHope this helps someone out there.\n. I wanted to hide the labels as well. After looking through dat.gui.js from the build folder... I got working :)\n\n1) Replace this line-\ntextShadow: this.__input_textShadow + 'rgba(0,0,0,0.7)'\nwith this:\ntextShadow: this.__input_textShadow + 'rgba(0,0,0,0.0)'\n\n2) Replace these two lines:\ncolor: 'rgb(' + flip + ',' + flip + ',' + flip +')',\ntextShadow: this.__input_textShadow + 'rgba(' + _flip + ',' + _flip + ',' + _flip +',.7)'\nwith this:\ncolor: this.__color.toString(),\ntextShadow: this.__input_textShadow + 'rgba(0,0,0,0.0)'\n\nHope this helps someone out there.\n. ",
    "wayfu": "this can be fixed by adding plain requestAnimationFrame to the list of polled rAF functions in dat.utils.requestAnimationFrame, like so:\n\n```\n  return window.requestAnimationFrame ||\n      window.webkitRequestAnimationFrame ||\n      window.mozRequestAnimationFrame ||\n      window.oRequestAnimationFrame ||\n      window.msRequestAnimationFrame ||\n      function(callback, element) {\n\n        window.setTimeout(callback, 1000 / 60);\n\n      };\n```\n. this can be fixed by adding plain requestAnimationFrame to the list of polled rAF functions in dat.utils.requestAnimationFrame, like so:\n\n```\n  return window.requestAnimationFrame ||\n      window.webkitRequestAnimationFrame ||\n      window.mozRequestAnimationFrame ||\n      window.oRequestAnimationFrame ||\n      window.msRequestAnimationFrame ||\n      function(callback, element) {\n\n        window.setTimeout(callback, 1000 / 60);\n\n      };\n```\n. ",
    "amenadiel": "+1 I was going to post the same.\n\nit seems that, once you pick the desired color, the palette is removed, therefore it doesn't receive the blur event. \n. I'm using requirejs to bundle dat.gui into my build. I can't use the sigle file version because it exports to the global namespace even when user as AMD. \n\nSo :-1:  to this PR.\n. During the last two months I've been using dat.gui source as a dependency of my GUI component, so at build/bundle time everything is inlined as small AMD modules into just one module. I've got to say it's been a pain in the ass. \n\nI mean, the modular source is still meant to build a monolithic dat.gui script. When you want to include dat.gui in another module, you need to aliase all named modules and, still, loader plugins are not universal among AMD loaders. The `text!` plugin, for example, is hard to use with JSPM, unless you specify the `pluginFirst` option somewhere to true.\n\nAt this point I'd feel much more comfortable having a modular dat.gui build that could be required (without polluting the global scope) than I am with integrating AMD modules in another project, so if it's worth anything, I do recast my vote as :+1: \n. I followed the steps described in that chromeexperiments demo and it works. \n\nThere are no docs that I know of.\n. +1 I was going to post the same.\n\nit seems that, once you pick the desired color, the palette is removed, therefore it doesn't receive the blur event. \n. I'm using requirejs to bundle dat.gui into my build. I can't use the sigle file version because it exports to the global namespace even when user as AMD. \n\nSo :-1:  to this PR.\n. During the last two months I've been using dat.gui source as a dependency of my GUI component, so at build/bundle time everything is inlined as small AMD modules into just one module. I've got to say it's been a pain in the ass. \n\nI mean, the modular source is still meant to build a monolithic dat.gui script. When you want to include dat.gui in another module, you need to aliase all named modules and, still, loader plugins are not universal among AMD loaders. The `text!` plugin, for example, is hard to use with JSPM, unless you specify the `pluginFirst` option somewhere to true.\n\nAt this point I'd feel much more comfortable having a modular dat.gui build that could be required (without polluting the global scope) than I am with integrating AMD modules in another project, so if it's worth anything, I do recast my vote as :+1: \n. I followed the steps described in that chromeexperiments demo and it works. \n\nThere are no docs that I know of.\n. ",
    "sebastianderossi": "+1\n. +1\n. ",
    "polyclick": "I realised you can fix this temporarly by overriding the main property in your own (project) bower.json. Example:\n\n```\n{\n  \"name\": \"myproject\",\n  \"private\": true,\n  \"dependencies\": {\n    \"jquery\": \"~2.1.1\",\n    \"modernizr\": \"~2.8.1\",\n    \"dat-gui\": \"~0.5.1\"\n  },\n  \"overrides\": {\n    \"dat-gui\": {\n      \"main\": \"build/dat.gui.js\"\n    }\n  }\n}\n```\n. I realised you can fix this temporarly by overriding the main property in your own (project) bower.json. Example:\n\n```\n{\n  \"name\": \"myproject\",\n  \"private\": true,\n  \"dependencies\": {\n    \"jquery\": \"~2.1.1\",\n    \"modernizr\": \"~2.8.1\",\n    \"dat-gui\": \"~0.5.1\"\n  },\n  \"overrides\": {\n    \"dat-gui\": {\n      \"main\": \"build/dat.gui.js\"\n    }\n  }\n}\n```\n. ",
    "foobarbecue": "This bug bit me when trying to use dat-gui in meteor using [meteor-bower](https://atmospherejs.com/mquandalle/bower). Please fix. It's clear from the [bower docs](https://github.com/bower/bower.json-spec#main) that there should not be a preceding slash here. Seems too small to make a PR.\n. Just tried @polyclick 's \"overrides\" workaround. Does the trick, thanks.\n. This bug bit me when trying to use dat-gui in meteor using [meteor-bower](https://atmospherejs.com/mquandalle/bower). Please fix. It's clear from the [bower docs](https://github.com/bower/bower.json-spec#main) that there should not be a preceding slash here. Seems too small to make a PR.\n. Just tried @polyclick 's \"overrides\" workaround. Does the trick, thanks.\n. ",
    "lachlanmcdonald": "Why would you need to use a `Float32Array` for storing RGB colours?\n. Why would you need to use a `Float32Array` for storing RGB colours?\n. ",
    "andrevenancio": "first law of programming:\n\nBecause why not?\n\nI'm using gl-matrix on a WebGL project. Its much easier it those values are stored in vectores, so I can manipulate them and upload them directly in the draw call.\n\nAs I said, because why not? :)\n. closing this, since there was no resolution / response from anyone on the team for the last 2 years.. first law of programming:\n\nBecause why not?\n\nI'm using gl-matrix on a WebGL project. Its much easier it those values are stored in vectores, so I can manipulate them and upload them directly in the draw call.\n\nAs I said, because why not? :)\n. closing this, since there was no resolution / response from anyone on the team for the last 2 years.. ",
    "andyinabox": ":+1: for browserify compatibility. \n. :+1: for browserify compatibility. \n. ",
    "webcaetano": "Same issue here.\n. Fixed this. \n\nIf you using bower you can change this\n\n```\n\"dat-gui\": \"~0.5.1\",\n```\n\nby this\n\n```\n\"dat-gui\": \"git@github.com:webcaetano/dat.gui.git#53762381014f91f5d22c10515dbdec85a425c04c\"\n```\n\nI create a pull-request too with the fix.\n. @customlogic nice. good to know\n. Same issue here.\n. Fixed this. \n\nIf you using bower you can change this\n\n```\n\"dat-gui\": \"~0.5.1\",\n```\n\nby this\n\n```\n\"dat-gui\": \"git@github.com:webcaetano/dat.gui.git#53762381014f91f5d22c10515dbdec85a425c04c\"\n```\n\nI create a pull-request too with the fix.\n. @customlogic nice. good to know\n. ",
    "j-r-t": "@doug \n. @doug \n. ",
    "jfbibeau": "+1, this is also a problem for us. Is it possible to do another release with the fixed bower.json?\n. +1, this is also a problem for us. Is it possible to do another release with the fixed bower.json?\n. ",
    "kribblo": "Also if you visit http://dataarts.github.com/dat.gui as mentioned in the source files it will redirect to the code.google.com page.\n. Also if you visit http://dataarts.github.com/dat.gui as mentioned in the source files it will redirect to the code.google.com page.\n. ",
    "binki": "+1\n. It\u2019d be nice to have real docs rather than having to go through the tutorial and/or scan the source each time I need to look for a particular feature.\n. +1\n. It\u2019d be nice to have real docs rather than having to go through the tutorial and/or scan the source each time I need to look for a particular feature.\n. ",
    "mreinstein": "folks you went through the trouble of creating a `package.json` file, specified a `main` attribute within it. I'm assuming this https://www.npmjs.com/package/dat.gui is your official module?\r\n\r\nit's completely broken with browserify.. folks you went through the trouble of creating a `package.json` file, specified a `main` attribute within it. I'm assuming this https://www.npmjs.com/package/dat.gui is your official module?\r\n\r\nit's completely broken with browserify.. ",
    "samme": "See #119 . <https://www.npmjs.com/package/dat.gui> is an old fork.\r\n\r\nUse `npm i 'dataarts/dat.gui'`.. See #119 . <https://www.npmjs.com/package/dat.gui> is an old fork.\r\n\r\nUse `npm i 'dataarts/dat.gui'`.. ",
    "Havvy": "Examples and tutorials are great for teaching how to use a thing. When you want to look something up (e.g., how do I change maxlength of a field before ellipsis show) having API docs available is actually useful.. Examples and tutorials are great for teaching how to use a thing. When you want to look something up (e.g., how do I change maxlength of a field before ellipsis show) having API docs available is actually useful.. ",
    "donmccurdy": "I've autogenerated some API docs from the JSDoc, see: https://github.com/dataarts/dat.gui/issues/146#issuecomment-347922707\r\n\r\nLots of noise in that, but maybe with some tweaks to the JSDoc we can get something more readable out. Can anyone maintaining this comment on whether a PR would be accepted?. ^On the same note, is there a way to remove a folder? `gui.remove(folder)` doesn't work, and seems to expect a control.. Here's a start, generated from JSDoc with [documentation.js](http://documentation.js.org/):\r\n\r\n```\r\nnpx documentation build src/dat/** -f md > api.md\r\n```\r\n\r\nResult: https://gist.github.com/donmccurdy/c08977da5148651f05a9aa4080cead04\r\n\r\nIt needs a lot of cleaning up to remove cruft, but maybe between the documentationjs settings and some improvements to the JSDoc, we can have API docs without needing to maintain them separately from the source code?. I've autogenerated some API docs from the JSDoc, see: https://github.com/dataarts/dat.gui/issues/146#issuecomment-347922707\r\n\r\nLots of noise in that, but maybe with some tweaks to the JSDoc we can get something more readable out. Can anyone maintaining this comment on whether a PR would be accepted?. ^On the same note, is there a way to remove a folder? `gui.remove(folder)` doesn't work, and seems to expect a control.. Here's a start, generated from JSDoc with [documentation.js](http://documentation.js.org/):\r\n\r\n```\r\nnpx documentation build src/dat/** -f md > api.md\r\n```\r\n\r\nResult: https://gist.github.com/donmccurdy/c08977da5148651f05a9aa4080cead04\r\n\r\nIt needs a lot of cleaning up to remove cruft, but maybe between the documentationjs settings and some improvements to the JSDoc, we can have API docs without needing to maintain them separately from the source code?. ",
    "Glidias": "wasn't documented, but there's a: GUI.closed getter/setter variable you can set/get accordingly to alter/get the state of it.\n. wasn't documented, but there's a: GUI.closed getter/setter variable you can set/get accordingly to alter/get the state of it.\n. ",
    "sabahkosoy": "I know we're using dat.gui for development purposes, but is it used anywhere in the user-facing site? Just wondering if it'd be easier to omit dat.gui when we launch.\n. Whoops! As do we @worthwhileindustries. Sorry I misread and thought this was specific to a project we're soon to be launching. Please ignore my previous message. :dancer: \n. Hey @HaykoKoryun and @Milewski, just on a brief hiatus but things should be back in order soon... and appreciate the bump!\n. I know we're using dat.gui for development purposes, but is it used anywhere in the user-facing site? Just wondering if it'd be easier to omit dat.gui when we launch.\n. Whoops! As do we @worthwhileindustries. Sorry I misread and thought this was specific to a project we're soon to be launching. Please ignore my previous message. :dancer: \n. Hey @HaykoKoryun and @Milewski, just on a brief hiatus but things should be back in order soon... and appreciate the bump!\n. ",
    "marklundin": "It may still be possible to fix this by styling using the js `style` object on DOM elements, this would avoid the `style-src` constraints of the CSP, however as @sabahkosoy mentioned, unless its needed, its probably worth ommiting DAT.GUI from production in the build. if I remember correctly it may be changing some globals somewhere\n. It may still be possible to fix this by styling using the js `style` object on DOM elements, this would avoid the `style-src` constraints of the CSP, however as @sabahkosoy mentioned, unless its needed, its probably worth ommiting DAT.GUI from production in the build. if I remember correctly it may be changing some globals somewhere\n. ",
    "queenvictoria": "Is this related to #103?. Actually I think this is the wrong thing to do (as it actually gets called onChange then). But I'm curious to know how to fix the situation. \n\nBasically I have a number of GUI that only have onFinishChange. However if you press Revert that callback isn't called (onChange is, onFinished is not).\n. Thank you!\n. Is this related to #103?. Actually I think this is the wrong thing to do (as it actually gets called onChange then). But I'm curious to know how to fix the situation. \n\nBasically I have a number of GUI that only have onFinishChange. However if you press Revert that callback isn't called (onChange is, onFinished is not).\n. Thank you!\n. ",
    "mikenon": "Sorry about that, first time using Github Desktop.\n. Sorry about that, first time using Github Desktop.\n. ",
    "greggman": "So the issue seems to be the call to `listen`. Remove it and things start working. Unfortunately this the bug only happens on Chrome OSX anyone not developing on Chrome OSX will never know there's an issue\n. So the issue seems to be the call to `listen`. Remove it and things start working. Unfortunately this the bug only happens on Chrome OSX anyone not developing on Chrome OSX will never know there's an issue\n. ",
    "milewski": "abandoned i guess...\n. abandoned i guess...\n. ",
    "bruno-quintela": "I agree with you, it would be more user friendly to have the close/open button always on top of the menu.\r\n\r\nSo, unless you guys want to make this the default behaviour, I'm thinking about adding a new property to the GUI constructor params, where the user sets if this button goes to top or bottom of the menu (bottom by default).\r\n\r\nIt would be something like :\r\n```\r\nnew dat.GUI({\r\n        closeOnTop: true //I'm open to better name sugestions for this property\r\n});\r\n```\r\n. I agree with you, it would be more user friendly to have the close/open button always on top of the menu.\r\n\r\nSo, unless you guys want to make this the default behaviour, I'm thinking about adding a new property to the GUI constructor params, where the user sets if this button goes to top or bottom of the menu (bottom by default).\r\n\r\nIt would be something like :\r\n```\r\nnew dat.GUI({\r\n        closeOnTop: true //I'm open to better name sugestions for this property\r\n});\r\n```\r\n. ",
    "mootari": "You mean _before_ min/max. :) Just encounterd this myself.\n. As soon as .min() _and_ .max() have been called the controller gets replaced with a new instance: https://github.com/dataarts/dat.gui/blob/1f71271c63d1205c70c0c5b2d30c966066e61a09/src/dat/gui/GUI.js#L854\n. You mean _before_ min/max. :) Just encounterd this myself.\n. As soon as .min() _and_ .max() have been called the controller gets replaced with a new instance: https://github.com/dataarts/dat.gui/blob/1f71271c63d1205c70c0c5b2d30c966066e61a09/src/dat/gui/GUI.js#L854\n. ",
    "Sigill": "step() is lost too, for the same reason (I guess).\n. You can use the `remove()` method, but you need to store the controller returned by `add()`: https://github.com/dataarts/dat.gui/blob/d5b6178e33db91b168a1264dcc5252be2d6510ef/src/dat/gui/GUI.js#L502\n\n``` javascript\nvar guiControls = new function () {\n        this.data1 = true;\n        this.data2 = true;\n};\nvar datGUI = new dat.GUI\n\nvar controller1 = datGUI.add(guiControls, 'data1');\nvar controller2 = datGUI.add(guiControls, 'data2');\n...\ndatGUI.remove(controller1);\ndatGUI.remove(controller2);\n```\n\nIt also allows to remove controllers from folders (but not to remove folders).\n. If we are playing the shortest game, we can also `return !!window.localStorage;`.\r\nI'm more confident with my version, which has the benefit to be explicit concerning this dirty undefined/null behavior.. I actually just discovered how Modernizr test LocalStorage availability, and due to some other tricky browsers, it has to be a bit more complex (but no trick involved): https://github.com/Modernizr/Modernizr/blob/94a690127904ed7d85679970257e76f3528b4b1c/modernizr.js#L777-802\r\nI'll probably update my patch to copy Modernizr.. Well, if `localStorage` does not exists in `window`, `window.localStorage` yields `undefined`.\r\nWhen `localStorage` exists in `window`, `window.localStorage` can still yield `undefined`. Or `null`.\r\nAnd there is an implicit conversion between `null` and `undefined`, `void 0` being a synonym of `undefined`...\r\n\r\nI think it's dirty. That's way too much ways to say \"this thing does not exist\".\r\nBut that might just be me being used to languages with stronger types.. step() is lost too, for the same reason (I guess).\n. You can use the `remove()` method, but you need to store the controller returned by `add()`: https://github.com/dataarts/dat.gui/blob/d5b6178e33db91b168a1264dcc5252be2d6510ef/src/dat/gui/GUI.js#L502\n\n``` javascript\nvar guiControls = new function () {\n        this.data1 = true;\n        this.data2 = true;\n};\nvar datGUI = new dat.GUI\n\nvar controller1 = datGUI.add(guiControls, 'data1');\nvar controller2 = datGUI.add(guiControls, 'data2');\n...\ndatGUI.remove(controller1);\ndatGUI.remove(controller2);\n```\n\nIt also allows to remove controllers from folders (but not to remove folders).\n. If we are playing the shortest game, we can also `return !!window.localStorage;`.\r\nI'm more confident with my version, which has the benefit to be explicit concerning this dirty undefined/null behavior.. I actually just discovered how Modernizr test LocalStorage availability, and due to some other tricky browsers, it has to be a bit more complex (but no trick involved): https://github.com/Modernizr/Modernizr/blob/94a690127904ed7d85679970257e76f3528b4b1c/modernizr.js#L777-802\r\nI'll probably update my patch to copy Modernizr.. Well, if `localStorage` does not exists in `window`, `window.localStorage` yields `undefined`.\r\nWhen `localStorage` exists in `window`, `window.localStorage` can still yield `undefined`. Or `null`.\r\nAnd there is an implicit conversion between `null` and `undefined`, `void 0` being a synonym of `undefined`...\r\n\r\nI think it's dirty. That's way too much ways to say \"this thing does not exist\".\r\nBut that might just be me being used to languages with stronger types.. ",
    "Mugen87": "Great! \ud83d\udc4d \n. Great! \ud83d\udc4d \n. ",
    "WillsB3": "Excellent, Thanks Jeff!\n. Excellent, Thanks Jeff!\n. ",
    "AlexBezuska": "I wrote a function that will take in hex or standard rgba strings and convert them to rgba arrays for datgui, I feel like this could smooth over how it is used since I feel like a lot of people would like to just use normal rgba strings like in css:\r\n\r\n```js\r\nfunction hexToRgbA(hex){\r\n    var c;\r\n    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){\r\n        c= hex.substring(1).split('');\r\n        if(c.length== 3){\r\n            c= [c[0], c[0], c[1], c[1], c[2], c[2]];\r\n        }\r\n        c= '0x'+c.join('');\r\n        return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',1)';\r\n    }\r\n    throw new Error('Bad Hex');\r\n}\r\n\r\n// datgui wants this format\r\nfunction parseDatGuiRGBA(color) {\r\n  if (color.indexOf(\"#\") === 0 ) {\r\n    var newColor =  hexToRgbA(color).replace(\"rgba(\", \"\").replace(\")\", \"\");\r\n    return JSON.parse(\"[\" + newColor + \"]\");\r\n  }\r\n  if (color.indexOf(\"rgba\") === 0 ) {\r\n    var newColor = color.replace(\"rgba(\", \"\").replace(\")\", \"\");\r\n    return JSON.parse(\"[\" + newColor + \"]\");\r\n  }\r\n  return color;\r\n}\r\n```\r\n\r\nExample: \r\n\r\n```js\r\nparseDatGuiRGBA( \"#93d5ba\" );\r\n// returns array [147, 213, 186, 0.5] \r\n\r\nparseDatGuiRGBA( \"rgba(147,213,186,0.5)\" );\r\n// returns array [147, 213, 186, 0.5]\r\n\r\nparseDatGuiRGBA( [147, 213, 186, 0.5] );\r\n// returns array [147, 213, 186, 0.5]\r\n```\r\n\r\n\r\nI hope this is useful, let me know if you think it is appropriate for a PR.. I wrote a function that will take in hex or standard rgba strings and convert them to rgba arrays for datgui, I feel like this could smooth over how it is used since I feel like a lot of people would like to just use normal rgba strings like in css:\r\n\r\n```js\r\nfunction hexToRgbA(hex){\r\n    var c;\r\n    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){\r\n        c= hex.substring(1).split('');\r\n        if(c.length== 3){\r\n            c= [c[0], c[0], c[1], c[1], c[2], c[2]];\r\n        }\r\n        c= '0x'+c.join('');\r\n        return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',1)';\r\n    }\r\n    throw new Error('Bad Hex');\r\n}\r\n\r\n// datgui wants this format\r\nfunction parseDatGuiRGBA(color) {\r\n  if (color.indexOf(\"#\") === 0 ) {\r\n    var newColor =  hexToRgbA(color).replace(\"rgba(\", \"\").replace(\")\", \"\");\r\n    return JSON.parse(\"[\" + newColor + \"]\");\r\n  }\r\n  if (color.indexOf(\"rgba\") === 0 ) {\r\n    var newColor = color.replace(\"rgba(\", \"\").replace(\")\", \"\");\r\n    return JSON.parse(\"[\" + newColor + \"]\");\r\n  }\r\n  return color;\r\n}\r\n```\r\n\r\nExample: \r\n\r\n```js\r\nparseDatGuiRGBA( \"#93d5ba\" );\r\n// returns array [147, 213, 186, 0.5] \r\n\r\nparseDatGuiRGBA( \"rgba(147,213,186,0.5)\" );\r\n// returns array [147, 213, 186, 0.5]\r\n\r\nparseDatGuiRGBA( [147, 213, 186, 0.5] );\r\n// returns array [147, 213, 186, 0.5]\r\n```\r\n\r\n\r\nI hope this is useful, let me know if you think it is appropriate for a PR.. ",
    "brean": "Looks like this does not work for the slider (after min and max have been called).. Looks like this does not work for the slider (after min and max have been called).. ",
    "MathiasLengler": "No problem. Thank you for for the explanation!\n. No problem. Thank you for for the explanation!\n. ",
    "Fil": "There is also a \"dat-gui\" package at 0.5.0; is there a way to clean up all this?\r\n\r\nIn the meantime I'm doing the following:\r\n\r\n```\r\n  \"dependencies\": {\r\n    \"dat.gui\": \"dataarts/dat.gui\",\r\n```\r\n\r\nwhich resolves to: \r\n```\r\ndat.gui@dataarts/dat.gui:\r\n  version \"0.6.1\"\r\n  resolved \"https://codeload.github.com/dataarts/dat.gui/tar.gz/d5b6178e33db91b168a1264dcc5252be2d6510ef\"\r\n```\r\n\r\n\ud83d\ude3f . There is also a \"dat-gui\" package at 0.5.0; is there a way to clean up all this?\r\n\r\nIn the meantime I'm doing the following:\r\n\r\n```\r\n  \"dependencies\": {\r\n    \"dat.gui\": \"dataarts/dat.gui\",\r\n```\r\n\r\nwhich resolves to: \r\n```\r\ndat.gui@dataarts/dat.gui:\r\n  version \"0.6.1\"\r\n  resolved \"https://codeload.github.com/dataarts/dat.gui/tar.gz/d5b6178e33db91b168a1264dcc5252be2d6510ef\"\r\n```\r\n\r\n\ud83d\ude3f . ",
    "syamajala": "Any plans to merge this?. Any plans to merge this?. ",
    "BrunoMonteiro92": "Well, just managed another way, by adding this instead of using the css:\r\n```\r\n\tgui.domElement.style.marginTop = \"42px\";\r\n\tgui.domElement.style.marginRight = \"-16px\";\r\n```. Well, just managed another way, by adding this instead of using the css:\r\n```\r\n\tgui.domElement.style.marginTop = \"42px\";\r\n\tgui.domElement.style.marginRight = \"-16px\";\r\n```. ",
    "juazugas": "As a workaround add next style to your style definitions : \r\n\r\n```css\r\n.dg .slider {\r\n    width: 60%!important;\r\n}\r\n```\r\n\r\n\r\n. As a workaround add next style to your style definitions : \r\n\r\n```css\r\n.dg .slider {\r\n    width: 60%!important;\r\n}\r\n```\r\n\r\n\r\n. ",
    "usefulthink": "still happens for me with latest version from npm (0.6.1) (in this case it's in an electron app, but I'd suspect it's the same for chrome).\r\n\r\nThis is the observed behaviour:\r\n![screen1](https://cloud.githubusercontent.com/assets/158792/25564511/0e871c1e-2db5-11e7-9d29-ad032ff454a3.gif)\r\n\r\nThe sliders appear at exactly 511px width, below which they are breaking into the next line:\r\n![screen2](https://cloud.githubusercontent.com/assets/158792/25564536/cb7523c0-2db5-11e7-8e79-b53d1651078b.gif)\r\n\r\nI don't quite understand yet how the css is supposed to work, otherwise I'd be happy to propose a PR for this.\r\n. I would really appreciate it if releases were published to npm.\r\nMaybe ask @korczis if he is willing to hand over that package-name so you can publish it again? . still happens for me with latest version from npm (0.6.1) (in this case it's in an electron app, but I'd suspect it's the same for chrome).\r\n\r\nThis is the observed behaviour:\r\n![screen1](https://cloud.githubusercontent.com/assets/158792/25564511/0e871c1e-2db5-11e7-9d29-ad032ff454a3.gif)\r\n\r\nThe sliders appear at exactly 511px width, below which they are breaking into the next line:\r\n![screen2](https://cloud.githubusercontent.com/assets/158792/25564536/cb7523c0-2db5-11e7-8e79-b53d1651078b.gif)\r\n\r\nI don't quite understand yet how the css is supposed to work, otherwise I'd be happy to propose a PR for this.\r\n. I would really appreciate it if releases were published to npm.\r\nMaybe ask @korczis if he is willing to hand over that package-name so you can publish it again? . ",
    "MartinRGB": "`.dg .slider` 59% !important. `.dg .slider` 59% !important. ",
    "fritx": "@samme damn it! should be mentioned in README xD. so we have to always install it from github??\r\n\r\n```js\r\n{\r\n  \"devDependencies\": {\r\n    \"css-loader\": \"^0.28.0\",\r\n    \"dat.gui\": \"github:dataarts/dat.gui\",   // <-----\r\n    \"eslint\": \"^3.19.0\",\r\n    \"eslint-config-standard\": \"^6.2.1\",\r\n    \"eslint-friendly-formatter\": \"^2.0.7\",\r\n    \"eslint-loader\": \"^1.7.1\",\r\n  }\r\n}\r\n```. @samme damn it! should be mentioned in README xD. so we have to always install it from github??\r\n\r\n```js\r\n{\r\n  \"devDependencies\": {\r\n    \"css-loader\": \"^0.28.0\",\r\n    \"dat.gui\": \"github:dataarts/dat.gui\",   // <-----\r\n    \"eslint\": \"^3.19.0\",\r\n    \"eslint-config-standard\": \"^6.2.1\",\r\n    \"eslint-friendly-formatter\": \"^2.0.7\",\r\n    \"eslint-loader\": \"^1.7.1\",\r\n  }\r\n}\r\n```. ",
    "AttilaVM": "Will you merge this feature if someone develops it?. Will you merge this feature if someone develops it?. ",
    "GoToLoop": "A shorter solution: `return window.localStorage != null;`\r\nUsing `!=` instead of `!==` catches both `null` & `undefined` at the same time!. > ... concerning this dirty undefined/null behavior.\r\n\r\n* There's no \"dirty\" behavior about `undefined` for a decade at least!\r\n* In the very beginning of JS language, `undefined` could be assigned to something else.\r\n* But they fixed that very soon too.\r\n* It was so long ago that this whole `undefined` ruckus shoulda been erased from every1's collective memory.\r\n* However somehow, that `undefined` \"trauma\" still persists till this day, and folks still fear checking for `undefined` using `==` or `!=`.\r\n* Or they use `void 0` in place of `undefined`.. A shorter solution: `return window.localStorage != null;`\r\nUsing `!=` instead of `!==` catches both `null` & `undefined` at the same time!. > ... concerning this dirty undefined/null behavior.\r\n\r\n* There's no \"dirty\" behavior about `undefined` for a decade at least!\r\n* In the very beginning of JS language, `undefined` could be assigned to something else.\r\n* But they fixed that very soon too.\r\n* It was so long ago that this whole `undefined` ruckus shoulda been erased from every1's collective memory.\r\n* However somehow, that `undefined` \"trauma\" still persists till this day, and folks still fear checking for `undefined` using `==` or `!=`.\r\n* Or they use `void 0` in place of `undefined`.. ",
    "cipri-tom": "thank you @backspaces ! The 1st script works perfectly. I'd just add that now you have to say `const gui = new GUI.GUI()` rather than just `const gui = new GUI()`  (when using `import GUI from 'dat.gui.module`). thank you @backspaces ! The 1st script works perfectly. I'd just add that now you have to say `const gui = new GUI.GUI()` rather than just `const gui = new GUI()`  (when using `import GUI from 'dat.gui.module`). ",
    "bagr001": "Win 10, Chrome 56.0.2924.87 (64-bit). Win 10, Chrome 56.0.2924.87 (64-bit). ",
    "zagortenej": "Just checked, v0.6.2 works as expected, it seems the bug is introduced in v0.6.3.. Just checked, v0.6.2 works as expected, it seems the bug is introduced in v0.6.3.. ",
    "cuixiping": "Just edit the [`src/dat/gui/_structure.scss`](https://github.com/dataarts/dat.gui/blob/master/src/dat/gui/_structure.scss#L88), find these lines: (from lines 88 to 92)\r\n```\r\n  &.a {\r\n\r\n    float: right;\r\n    margin-right: 15px;\r\n    overflow-y: visible;\r\n```\r\nChange `overflow-y` to `overflow`,  rebuild dat.gui. Things will be OK. As my testing.\r\n```\r\n  &.a {\r\n\r\n    float: right;\r\n    margin-right: 15px;\r\n    overflow: visible;\r\n```. Just edit the [`src/dat/gui/_structure.scss`](https://github.com/dataarts/dat.gui/blob/master/src/dat/gui/_structure.scss#L88), find these lines: (from lines 88 to 92)\r\n```\r\n  &.a {\r\n\r\n    float: right;\r\n    margin-right: 15px;\r\n    overflow-y: visible;\r\n```\r\nChange `overflow-y` to `overflow`,  rebuild dat.gui. Things will be OK. As my testing.\r\n```\r\n  &.a {\r\n\r\n    float: right;\r\n    margin-right: 15px;\r\n    overflow: visible;\r\n```. ",
    "ChisholmKyle": "I was getting the browserify parse error: \"ParseError: 'import' and 'export' may appear only with 'sourceType: module'\" and this fixed it! thanks.. It appears the vulnerability only exists when cli is run in \"daemon mode\" which is only available for Node versions 0.8 or earlier so it's not a big deal.... I was getting the browserify parse error: \"ParseError: 'import' and 'export' may appear only with 'sourceType: module'\" and this fixed it! thanks.. It appears the vulnerability only exists when cli is run in \"daemon mode\" which is only available for Node versions 0.8 or earlier so it's not a big deal.... ",
    "serapath": "yes - i think this pull request fixes that error. I hope it gets merged soon,. @ChisholmKyle thx. i found https://www.npmjs.com/package/dat.gui but it seems it's quite outdated\r\n\r\nCan a release be cut?  npm only has version 0.6.1 but on github it's 0.6.5...\r\n\r\nI would like to use this change in production.\r\n\r\n. hey :-)\r\n...but if they are `devDependencies` an `npm install` will not install them. Thus, when you try to run your current project, it will break, because one or more modules will be missing and sometimes that can even cause a little bit arcane error messages.\r\n\r\nIf you install a dependency which has a dependency which has a dependency which uses a transform... would you expect your your project to break when you try to run something like `browserify index.js -t babelfiy > bundle.js` ...just because that deeply nested dependencies specifies transforms which havent been installed after `npm install` because the author did not add them or added them to the `devDependencies`?\r\n\r\nI agree with the theoretic thought, that something that isn't explicitly required by your project should probably be a dev dependency... but then again, i tend to not care how things are called, but what they do.\r\n\r\nso `dependencies` get installed on `npm install` no matter if its the main module or a dependency,\r\nwhile `devDependencies` dont get installed when a module is a depdency... ...so that's how they work and i tend to use things to do what i need.\r\n\r\nIt's nice that ppl make up theories (e.g optional dependencies), but they figure out it was a mistake and they deprecate or remove or use them differently than was once intended...\r\n\r\n---\r\nIf you have a better idea, how would you get around the potential problem of arcane error messages - or even if not arcane - then the need to install maybe a few or even half a dozen depdencies manually using `npm install xxx` (because this might potentially be caused by quite a few modules in your dependency tree\r\n\r\nthese days, so many ppl put some unnecessary ES6 into their modules. hm, maybe i'm misunderstanding something.\r\n\r\n...but if i type `npm install` when i work on project `foo` with the dependency `bar`, it won't install the `devDependencies` of `bar`, right?\r\n\r\nIf the project `bar` specifies a `packages.json#browserify#transform` field and i am using `browserify` in my `foo` project it fails, because browserify tries to apply the browserify transforms of `bar` to `bar`, but they havent been installed.\r\n\r\n...and this will or might happen to many modules in my dependency tree - especially if they use ES6.\r\n\r\nI am basically forced to run transforms globally and apply them to every single module in my dependency tree - which is slow and sometimes dangerous (maybe it breaks stuff) and i would like to avoid that using `package.json#browserify#transform` field, which get's picked up by browserify but fails if transforms used by dependencies havent been installed.  :/\r\n\r\nmaybe there is a trick to get them to install without putting them in `package.json#dependencies`\r\n\r\n---\r\n\r\nMaybe i'm completely wrong here. Haven't tried in a while, but the last time i did i remember an `npm install` did not install `devDependencies` of a modules dependencies ... i think. I also consider it a build step.\r\nAnd in theory it should be listed under `devDependencies`, but in practice this is currently very inconvenient and i run into missing dependencies all the time.\r\n\r\nAlso - i feel it's wrong to apply \"transforms\" to every dependency in the dependency tree, which seems to make it slower then necessary and introduces unnecessary risk of breaking things, by applying transforms to stuff that was never meant to have a certain transform applied.\r\n\r\nSo yeah... i dont know. I kind of feel it's slowly time to have an in-browser `require` function to download and cache modules directly into the browser and eventually applying transforms client side if necessary and maybe even using cool tricks to share modules from client to client p2p style.\r\n\r\nCan't wait for that to happen and then i might slowly leave the terminal and live only inside browser environments and work on bringing browser environments closer to the metal (thus - a minimal kernel with just some kind of browser environment on top) ..so all apps and all everything lives inside a browser like environment. ....boot from html file :P. i'm not sure. i don't agree with that. For which platform would you build?\r\n\r\nThe newest browsers support many features, so should they use. So should they use the built form which turns ES6 into ES5 and add some other changes even though they support ES6?\r\n\r\nWhat about minification? During dev i would like to be able to step through dependency code if necessary and only minify it when i need it.\r\n\r\nSo you say you would set the `package.json#main` to `dist/bundle.min.js` or something?\r\n. yes - i think this pull request fixes that error. I hope it gets merged soon,. @ChisholmKyle thx. i found https://www.npmjs.com/package/dat.gui but it seems it's quite outdated\r\n\r\nCan a release be cut?  npm only has version 0.6.1 but on github it's 0.6.5...\r\n\r\nI would like to use this change in production.\r\n\r\n. hey :-)\r\n...but if they are `devDependencies` an `npm install` will not install them. Thus, when you try to run your current project, it will break, because one or more modules will be missing and sometimes that can even cause a little bit arcane error messages.\r\n\r\nIf you install a dependency which has a dependency which has a dependency which uses a transform... would you expect your your project to break when you try to run something like `browserify index.js -t babelfiy > bundle.js` ...just because that deeply nested dependencies specifies transforms which havent been installed after `npm install` because the author did not add them or added them to the `devDependencies`?\r\n\r\nI agree with the theoretic thought, that something that isn't explicitly required by your project should probably be a dev dependency... but then again, i tend to not care how things are called, but what they do.\r\n\r\nso `dependencies` get installed on `npm install` no matter if its the main module or a dependency,\r\nwhile `devDependencies` dont get installed when a module is a depdency... ...so that's how they work and i tend to use things to do what i need.\r\n\r\nIt's nice that ppl make up theories (e.g optional dependencies), but they figure out it was a mistake and they deprecate or remove or use them differently than was once intended...\r\n\r\n---\r\nIf you have a better idea, how would you get around the potential problem of arcane error messages - or even if not arcane - then the need to install maybe a few or even half a dozen depdencies manually using `npm install xxx` (because this might potentially be caused by quite a few modules in your dependency tree\r\n\r\nthese days, so many ppl put some unnecessary ES6 into their modules. hm, maybe i'm misunderstanding something.\r\n\r\n...but if i type `npm install` when i work on project `foo` with the dependency `bar`, it won't install the `devDependencies` of `bar`, right?\r\n\r\nIf the project `bar` specifies a `packages.json#browserify#transform` field and i am using `browserify` in my `foo` project it fails, because browserify tries to apply the browserify transforms of `bar` to `bar`, but they havent been installed.\r\n\r\n...and this will or might happen to many modules in my dependency tree - especially if they use ES6.\r\n\r\nI am basically forced to run transforms globally and apply them to every single module in my dependency tree - which is slow and sometimes dangerous (maybe it breaks stuff) and i would like to avoid that using `package.json#browserify#transform` field, which get's picked up by browserify but fails if transforms used by dependencies havent been installed.  :/\r\n\r\nmaybe there is a trick to get them to install without putting them in `package.json#dependencies`\r\n\r\n---\r\n\r\nMaybe i'm completely wrong here. Haven't tried in a while, but the last time i did i remember an `npm install` did not install `devDependencies` of a modules dependencies ... i think. I also consider it a build step.\r\nAnd in theory it should be listed under `devDependencies`, but in practice this is currently very inconvenient and i run into missing dependencies all the time.\r\n\r\nAlso - i feel it's wrong to apply \"transforms\" to every dependency in the dependency tree, which seems to make it slower then necessary and introduces unnecessary risk of breaking things, by applying transforms to stuff that was never meant to have a certain transform applied.\r\n\r\nSo yeah... i dont know. I kind of feel it's slowly time to have an in-browser `require` function to download and cache modules directly into the browser and eventually applying transforms client side if necessary and maybe even using cool tricks to share modules from client to client p2p style.\r\n\r\nCan't wait for that to happen and then i might slowly leave the terminal and live only inside browser environments and work on bringing browser environments closer to the metal (thus - a minimal kernel with just some kind of browser environment on top) ..so all apps and all everything lives inside a browser like environment. ....boot from html file :P. i'm not sure. i don't agree with that. For which platform would you build?\r\n\r\nThe newest browsers support many features, so should they use. So should they use the built form which turns ES6 into ES5 and add some other changes even though they support ES6?\r\n\r\nWhat about minification? During dev i would like to be able to step through dependency code if necessary and only minify it when i need it.\r\n\r\nSo you say you would set the `package.json#main` to `dist/bundle.min.js` or something?\r\n. ",
    "derhuerst": "the tools added by @serapath should most likely be `devDependencies` instead of `dependencies`.. > ...but if they are devDependencies an `npm install` will not install them.\r\n\r\n@serapath Let's be a bit more specific here to avoid confusion. `npm install` will in fact install them, but `npm install dat.gui` won't.\r\n\r\n> If you install a dependency which has a dependency which has a dependency which uses a transform...\r\n\r\nIt doesn't *use* the transform. Also, I consider transpiling code a build step, therefore it should be a `devDependency` and the module published to npm should contain both the original src as well as the transpiled code. This seems to be the best practice.. > ...but if i type `npm install` when i work on project foo with the dependency bar, it won't install the `devDependencies` of bar, right?\r\n\r\ncorrect.\r\n\r\nI agree with you that the situation about transpiling dependencies is tricky. This is my opinion:\r\n\r\n> I consider transpiling code a build step, therefore it should be a `devDependency` and the module published to npm should contain both the original src as well as the transpiled code. This seems to be the best practice.. > I also consider it a build step.\r\n> And in theory it should be listed under devDependencies, but in practice this is currently very inconvenient and i run into missing dependencies all the time.\r\n\r\n> Also - i feel it's wrong to apply \"transforms\" to every dependency in the dependency tree, which seems to make it slower then necessary and introduces unnecessary risk of breaking things, by applying transforms to stuff that was never meant to have a certain transform applied.\r\n\r\nWhat I meant with \"build step\" is that npm packages should be *published* in a transpired form, *not* transpiled in a build of the consuming package.. In my opinion, it makes sense to have a `src`, `lib` and a `dist` dir in every published npm package that contains any ES6+ code. The `main` field would link to the ES5 `lib` code. `browser` would most likely link to the bundle in `dist`. `jsnext:main` would link to the untranspiled `src` dir. This way, for most of the consuming users it should just work.\r\n\r\nIf you want to generate additional ES6 bundles for modern browsers (you should generate ES5 bundles anyway to not lock people out), you can do so by configuring your bundler.\r\n\r\n> What about minification? During dev i would like to be able to step through dependency code if necessary and only minify it when i need it.\r\n\r\nThat is a different question. During dev, using a modern browser, you wouldn't bundle the code from `dist`, but from `src` (maybe only slightly transpiled, e.g. from ES7 to ES6), without minifying it.. Similar proposal: http://2ality.com/2017/04/transpiling-dependencies-babel.html. the tools added by @serapath should most likely be `devDependencies` instead of `dependencies`.. > ...but if they are devDependencies an `npm install` will not install them.\r\n\r\n@serapath Let's be a bit more specific here to avoid confusion. `npm install` will in fact install them, but `npm install dat.gui` won't.\r\n\r\n> If you install a dependency which has a dependency which has a dependency which uses a transform...\r\n\r\nIt doesn't *use* the transform. Also, I consider transpiling code a build step, therefore it should be a `devDependency` and the module published to npm should contain both the original src as well as the transpiled code. This seems to be the best practice.. > ...but if i type `npm install` when i work on project foo with the dependency bar, it won't install the `devDependencies` of bar, right?\r\n\r\ncorrect.\r\n\r\nI agree with you that the situation about transpiling dependencies is tricky. This is my opinion:\r\n\r\n> I consider transpiling code a build step, therefore it should be a `devDependency` and the module published to npm should contain both the original src as well as the transpiled code. This seems to be the best practice.. > I also consider it a build step.\r\n> And in theory it should be listed under devDependencies, but in practice this is currently very inconvenient and i run into missing dependencies all the time.\r\n\r\n> Also - i feel it's wrong to apply \"transforms\" to every dependency in the dependency tree, which seems to make it slower then necessary and introduces unnecessary risk of breaking things, by applying transforms to stuff that was never meant to have a certain transform applied.\r\n\r\nWhat I meant with \"build step\" is that npm packages should be *published* in a transpired form, *not* transpiled in a build of the consuming package.. In my opinion, it makes sense to have a `src`, `lib` and a `dist` dir in every published npm package that contains any ES6+ code. The `main` field would link to the ES5 `lib` code. `browser` would most likely link to the bundle in `dist`. `jsnext:main` would link to the untranspiled `src` dir. This way, for most of the consuming users it should just work.\r\n\r\nIf you want to generate additional ES6 bundles for modern browsers (you should generate ES5 bundles anyway to not lock people out), you can do so by configuring your bundler.\r\n\r\n> What about minification? During dev i would like to be able to step through dependency code if necessary and only minify it when i need it.\r\n\r\nThat is a different question. During dev, using a modern browser, you wouldn't bundle the code from `dist`, but from `src` (maybe only slightly transpiled, e.g. from ES7 to ES6), without minifying it.. Similar proposal: http://2ality.com/2017/04/transpiling-dependencies-babel.html. ",
    "Hudsonnc": "Bump. Would love to see this feature. Bump. Would love to see this feature. ",
    "aethr": "I'm having the same issue.\r\n\r\nInstalled via npm: `npm install --save dat.gui`\r\nThen included in a Vue component: `import dat from 'dat.gui';`\r\n\r\nWebpack build now produces the following error:\r\n```\r\nThese dependencies were not found:\r\n\r\n* !style!css!sass!./NumberControllerSlider.scss in ./~/dat.gui/src/dat/controllers/NumberControllerSlider.js\r\n* !style!css!sass!./style.scss in ./~/dat.gui/src/dat/gui/GUI.js\r\n* html!./saveDialogue.html in ./~/dat.gui/src/dat/gui/GUI.js\r\n```\r\n\r\nI was able to get my build working by hand editing `node_modules/dat.gui/index.js` and changing it to:\r\n\r\n`module.exports = require('./build/dat.gui');`. I guess the other option is to change the `main` entry in `package.json` to:\r\n\r\n`  \"main\": \"build/dat.gui.js\",`\r\n. I'm having the same issue.\r\n\r\nInstalled via npm: `npm install --save dat.gui`\r\nThen included in a Vue component: `import dat from 'dat.gui';`\r\n\r\nWebpack build now produces the following error:\r\n```\r\nThese dependencies were not found:\r\n\r\n* !style!css!sass!./NumberControllerSlider.scss in ./~/dat.gui/src/dat/controllers/NumberControllerSlider.js\r\n* !style!css!sass!./style.scss in ./~/dat.gui/src/dat/gui/GUI.js\r\n* html!./saveDialogue.html in ./~/dat.gui/src/dat/gui/GUI.js\r\n```\r\n\r\nI was able to get my build working by hand editing `node_modules/dat.gui/index.js` and changing it to:\r\n\r\n`module.exports = require('./build/dat.gui');`. I guess the other option is to change the `main` entry in `package.json` to:\r\n\r\n`  \"main\": \"build/dat.gui.js\",`\r\n. ",
    "a-rts": "Same issue for me, @aethr package.json change makes it work.. Same issue for me, @aethr package.json change makes it work.. ",
    "drupol": "Updating the ./node_modules/dat.gui/package.json file did the trick too.\r\nFor me this solution is a pseudo-working solution and not a real solution at long terms.\r\n\r\nIs there any alternative to not alter the source and get this working properly ?\r\n\r\nThanks.. Indeed, thanks !!!!. Updating the ./node_modules/dat.gui/package.json file did the trick too.\r\nFor me this solution is a pseudo-working solution and not a real solution at long terms.\r\n\r\nIs there any alternative to not alter the source and get this working properly ?\r\n\r\nThanks.. Indeed, thanks !!!!. ",
    "chasevida": "Stumbled on this thread while trying to solve what I assume is a similar issue. This worked for me and meant I didn't have to change anything in the `node_modules` folder.\r\n\r\n```javascript\r\nimport dat from 'dat.gui/build/dat.gui.js'\r\n// or\r\nimport { GUI } from 'dat.gui/build/dat.gui.js'\r\n```. Stumbled on this thread while trying to solve what I assume is a similar issue. This worked for me and meant I didn't have to change anything in the `node_modules` folder.\r\n\r\n```javascript\r\nimport dat from 'dat.gui/build/dat.gui.js'\r\n// or\r\nimport { GUI } from 'dat.gui/build/dat.gui.js'\r\n```. ",
    "matt-erhart": "btw, in typescript it's \r\n```javascript\r\nimport * as dat from 'dat.gui/build/dat.gui.js'\r\n```\r\n. btw, in typescript it's \r\n```javascript\r\nimport * as dat from 'dat.gui/build/dat.gui.js'\r\n```\r\n. ",
    "vchizhov": "Haven't tested it, but try this:  https://stackoverflow.com/questions/18085540/remove-folder-in-dat-gui. Haven't tested it, but try this:  https://stackoverflow.com/questions/18085540/remove-folder-in-dat-gui. ",
    "donpinkus": "Yes, an API doc would be *extremely* useful.\r\n\r\nI'm assuming for someone that has been working with dat.gui for a bit, the API is obvious. \r\n\r\nFor people just starting out with it (such as myself), I don't want to hunt around codepen or the limited tutorial site linked above, just for an example of how to add a control for a simple variable:\r\n\r\n```\r\nvar name = 'Don';\r\nvar gui = new dat.GUI();\r\ngui.add('name', 'Label for name input');\r\n```\r\n\r\n^ that's invalid syntax... but there's no place to lookup what the correct syntax is, because there is no API doc.. @hyunsooda - I'm not answering your question. I'm agreeing with the need for an API doc. . Update - been playing with dat.gui a lot. I'll start an API readme doc soon and hopefully people will add to it.\r\n\r\nIf there's anyone with more than 2 weeks experience using dat.gui that would like to volunteer to help out, please comment. Yes, an API doc would be *extremely* useful.\r\n\r\nI'm assuming for someone that has been working with dat.gui for a bit, the API is obvious. \r\n\r\nFor people just starting out with it (such as myself), I don't want to hunt around codepen or the limited tutorial site linked above, just for an example of how to add a control for a simple variable:\r\n\r\n```\r\nvar name = 'Don';\r\nvar gui = new dat.GUI();\r\ngui.add('name', 'Label for name input');\r\n```\r\n\r\n^ that's invalid syntax... but there's no place to lookup what the correct syntax is, because there is no API doc.. @hyunsooda - I'm not answering your question. I'm agreeing with the need for an API doc. . Update - been playing with dat.gui a lot. I'll start an API readme doc soon and hopefully people will add to it.\r\n\r\nIf there's anyone with more than 2 weeks experience using dat.gui that would like to volunteer to help out, please comment. ",
    "hyunsooda": "Thank you for your reply.\r\nif so, how to the others make controller without api doc?. I just watched your picture and so handsome.\r\nokay, thank you and good bye. Thank you for your reply.\r\nif so, how to the others make controller without api doc?. I just watched your picture and so handsome.\r\nokay, thank you and good bye. ",
    "jarben": "Awesome, thanks!. Awesome, thanks!. ",
    "greenSnot": "+1. +1. "
}